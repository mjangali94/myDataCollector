=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164.604 ops/s
# Warmup Iteration   2: 183.778 ops/s
# Warmup Iteration   3: 233.232 ops/s
# Warmup Iteration   4: 240.474 ops/s
# Warmup Iteration   5: 239.454 ops/s
# Warmup Iteration   6: 237.846 ops/s
# Warmup Iteration   7: 240.113 ops/s
# Warmup Iteration   8: 241.058 ops/s
# Warmup Iteration   9: 240.119 ops/s
# Warmup Iteration  10: 239.336 ops/s
# Warmup Iteration  11: 240.485 ops/s
# Warmup Iteration  12: 216.430 ops/s
# Warmup Iteration  13: 223.855 ops/s
# Warmup Iteration  14: 240.045 ops/s
# Warmup Iteration  15: 240.242 ops/s
# Warmup Iteration  16: 241.253 ops/s
# Warmup Iteration  17: 240.730 ops/s
# Warmup Iteration  18: 238.703 ops/s
# Warmup Iteration  19: 239.267 ops/s
# Warmup Iteration  20: 239.826 ops/s
# Warmup Iteration  21: 239.132 ops/s
# Warmup Iteration  22: 238.104 ops/s
# Warmup Iteration  23: 237.880 ops/s
# Warmup Iteration  24: 238.495 ops/s
# Warmup Iteration  25: 238.965 ops/s
# Warmup Iteration  26: 239.236 ops/s
# Warmup Iteration  27: 238.957 ops/s
# Warmup Iteration  28: 241.161 ops/s
# Warmup Iteration  29: 240.645 ops/s
# Warmup Iteration  30: 239.822 ops/s
Iteration   1: 240.809 ops/s
Iteration   2: 241.031 ops/s
Iteration   3: 241.506 ops/s
Iteration   4: 241.378 ops/s
Iteration   5: 238.792 ops/s
Iteration   6: 239.586 ops/s
Iteration   7: 238.877 ops/s
Iteration   8: 241.437 ops/s
Iteration   9: 240.925 ops/s
Iteration  10: 241.367 ops/s
Iteration  11: 241.416 ops/s
Iteration  12: 238.408 ops/s
Iteration  13: 240.042 ops/s
Iteration  14: 239.616 ops/s
Iteration  15: 239.302 ops/s
Iteration  16: 239.975 ops/s
Iteration  17: 240.411 ops/s
Iteration  18: 241.082 ops/s
Iteration  19: 241.437 ops/s
Iteration  20: 240.126 ops/s
Iteration  21: 240.658 ops/s
Iteration  22: 239.116 ops/s
Iteration  23: 240.241 ops/s
Iteration  24: 239.348 ops/s
Iteration  25: 239.029 ops/s
Iteration  26: 238.657 ops/s
Iteration  27: 239.998 ops/s
Iteration  28: 238.238 ops/s
Iteration  29: 239.442 ops/s
Iteration  30: 239.769 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  240.067 ±(99.9%) 0.679 ops/s [Average]
  (min, avg, max) = (238.238, 240.067, 241.506), stdev = 1.016
  CI (99.9%): [239.388, 240.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt    Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  240.067 ± 0.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 206.286 ops/s
# Warmup Iteration   2: 251.528 ops/s
# Warmup Iteration   3: 322.569 ops/s
# Warmup Iteration   4: 322.764 ops/s
# Warmup Iteration   5: 321.104 ops/s
# Warmup Iteration   6: 321.651 ops/s
# Warmup Iteration   7: 321.683 ops/s
# Warmup Iteration   8: 323.096 ops/s
# Warmup Iteration   9: 301.442 ops/s
# Warmup Iteration  10: 275.802 ops/s
# Warmup Iteration  11: 303.560 ops/s
# Warmup Iteration  12: 304.844 ops/s
# Warmup Iteration  13: 303.658 ops/s
# Warmup Iteration  14: 304.518 ops/s
# Warmup Iteration  15: 303.707 ops/s
# Warmup Iteration  16: 303.588 ops/s
# Warmup Iteration  17: 305.436 ops/s
# Warmup Iteration  18: 306.296 ops/s
# Warmup Iteration  19: 306.557 ops/s
# Warmup Iteration  20: 308.028 ops/s
# Warmup Iteration  21: 308.250 ops/s
# Warmup Iteration  22: 308.206 ops/s
# Warmup Iteration  23: 308.171 ops/s
# Warmup Iteration  24: 308.757 ops/s
# Warmup Iteration  25: 306.563 ops/s
# Warmup Iteration  26: 307.127 ops/s
# Warmup Iteration  27: 305.758 ops/s
# Warmup Iteration  28: 305.412 ops/s
# Warmup Iteration  29: 304.954 ops/s
# Warmup Iteration  30: 305.533 ops/s
Iteration   1: 308.058 ops/s
Iteration   2: 305.898 ops/s
Iteration   3: 305.731 ops/s
Iteration   4: 306.108 ops/s
Iteration   5: 307.306 ops/s
Iteration   6: 306.424 ops/s
Iteration   7: 307.630 ops/s
Iteration   8: 307.287 ops/s
Iteration   9: 306.128 ops/s
Iteration  10: 303.997 ops/s
Iteration  11: 303.892 ops/s
Iteration  12: 303.058 ops/s
Iteration  13: 305.933 ops/s
Iteration  14: 305.205 ops/s
Iteration  15: 305.005 ops/s
Iteration  16: 304.130 ops/s
Iteration  17: 304.463 ops/s
Iteration  18: 304.754 ops/s
Iteration  19: 303.344 ops/s
Iteration  20: 303.483 ops/s
Iteration  21: 304.315 ops/s
Iteration  22: 303.558 ops/s
Iteration  23: 303.738 ops/s
Iteration  24: 304.148 ops/s
Iteration  25: 303.809 ops/s
Iteration  26: 304.653 ops/s
Iteration  27: 307.745 ops/s
Iteration  28: 307.323 ops/s
Iteration  29: 306.387 ops/s
Iteration  30: 308.030 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  305.385 ±(99.9%) 1.051 ops/s [Average]
  (min, avg, max) = (303.058, 305.385, 308.058), stdev = 1.573
  CI (99.9%): [304.334, 306.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt    Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  305.385 ± 1.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18396539.529 ops/s
# Warmup Iteration   2: 39808998.791 ops/s
# Warmup Iteration   3: 34028230.674 ops/s
# Warmup Iteration   4: 40228779.712 ops/s
# Warmup Iteration   5: 40229158.003 ops/s
# Warmup Iteration   6: 40181455.043 ops/s
# Warmup Iteration   7: 40233734.800 ops/s
# Warmup Iteration   8: 40193535.531 ops/s
# Warmup Iteration   9: 40248706.039 ops/s
# Warmup Iteration  10: 40066521.298 ops/s
# Warmup Iteration  11: 40159666.355 ops/s
# Warmup Iteration  12: 40206568.626 ops/s
# Warmup Iteration  13: 40318539.282 ops/s
# Warmup Iteration  14: 40174439.203 ops/s
# Warmup Iteration  15: 40241055.760 ops/s
# Warmup Iteration  16: 40324537.249 ops/s
# Warmup Iteration  17: 40313543.550 ops/s
# Warmup Iteration  18: 40187008.807 ops/s
# Warmup Iteration  19: 40276461.147 ops/s
# Warmup Iteration  20: 40328304.068 ops/s
# Warmup Iteration  21: 40399090.273 ops/s
# Warmup Iteration  22: 40305927.918 ops/s
# Warmup Iteration  23: 40223333.036 ops/s
# Warmup Iteration  24: 40273961.683 ops/s
# Warmup Iteration  25: 40221931.718 ops/s
# Warmup Iteration  26: 40247723.276 ops/s
# Warmup Iteration  27: 40205377.267 ops/s
# Warmup Iteration  28: 40391681.833 ops/s
# Warmup Iteration  29: 40286962.377 ops/s
# Warmup Iteration  30: 40303986.660 ops/s
Iteration   1: 40196901.654 ops/s
Iteration   2: 40386960.647 ops/s
Iteration   3: 40259745.976 ops/s
Iteration   4: 40230381.960 ops/s
Iteration   5: 40304294.265 ops/s
Iteration   6: 40435876.446 ops/s
Iteration   7: 40311532.040 ops/s
Iteration   8: 40434092.407 ops/s
Iteration   9: 40419951.483 ops/s
Iteration  10: 40388474.824 ops/s
Iteration  11: 40129202.235 ops/s
Iteration  12: 40179959.181 ops/s
Iteration  13: 40151889.658 ops/s
Iteration  14: 40319391.437 ops/s
Iteration  15: 40299171.491 ops/s
Iteration  16: 40321060.113 ops/s
Iteration  17: 40231919.682 ops/s
Iteration  18: 40189594.520 ops/s
Iteration  19: 40270804.232 ops/s
Iteration  20: 40363109.194 ops/s
Iteration  21: 40233317.724 ops/s
Iteration  22: 40199831.231 ops/s
Iteration  23: 40270473.036 ops/s
Iteration  24: 40144762.448 ops/s
Iteration  25: 40236088.585 ops/s
Iteration  26: 40288049.277 ops/s
Iteration  27: 40207860.594 ops/s
Iteration  28: 40336653.882 ops/s
Iteration  29: 40319902.777 ops/s
Iteration  30: 40249938.928 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumInteger":
  40277039.731 ±(99.9%) 57132.890 ops/s [Average]
  (min, avg, max) = (40129202.235, 40277039.731, 40435876.446), stdev = 85513.827
  CI (99.9%): [40219906.841, 40334172.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumInteger  thrpt   30  40277039.731 ± 57132.890  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18616482.812 ops/s
# Warmup Iteration   2: 39700530.983 ops/s
# Warmup Iteration   3: 34167993.709 ops/s
# Warmup Iteration   4: 40273910.051 ops/s
# Warmup Iteration   5: 40291205.280 ops/s
# Warmup Iteration   6: 40317434.995 ops/s
# Warmup Iteration   7: 40270700.790 ops/s
# Warmup Iteration   8: 40283187.380 ops/s
# Warmup Iteration   9: 40338562.453 ops/s
# Warmup Iteration  10: 40263283.783 ops/s
# Warmup Iteration  11: 40273101.889 ops/s
# Warmup Iteration  12: 40278375.646 ops/s
# Warmup Iteration  13: 40247070.660 ops/s
# Warmup Iteration  14: 40304462.263 ops/s
# Warmup Iteration  15: 40300205.087 ops/s
# Warmup Iteration  16: 40338416.437 ops/s
# Warmup Iteration  17: 40306976.751 ops/s
# Warmup Iteration  18: 40297483.728 ops/s
# Warmup Iteration  19: 40315415.933 ops/s
# Warmup Iteration  20: 40351630.275 ops/s
# Warmup Iteration  21: 40214493.295 ops/s
# Warmup Iteration  22: 40237362.901 ops/s
# Warmup Iteration  23: 40342542.751 ops/s
# Warmup Iteration  24: 40319936.313 ops/s
# Warmup Iteration  25: 40305676.079 ops/s
# Warmup Iteration  26: 40420830.759 ops/s
# Warmup Iteration  27: 40301999.670 ops/s
# Warmup Iteration  28: 40284826.207 ops/s
# Warmup Iteration  29: 40271481.612 ops/s
# Warmup Iteration  30: 40347521.631 ops/s
Iteration   1: 40328738.378 ops/s
Iteration   2: 40289689.801 ops/s
Iteration   3: 40384515.546 ops/s
Iteration   4: 40156058.276 ops/s
Iteration   5: 40184580.666 ops/s
Iteration   6: 40336951.557 ops/s
Iteration   7: 40284760.070 ops/s
Iteration   8: 40280135.738 ops/s
Iteration   9: 40184734.307 ops/s
Iteration  10: 40350650.928 ops/s
Iteration  11: 40387685.822 ops/s
Iteration  12: 40237327.180 ops/s
Iteration  13: 40441289.356 ops/s
Iteration  14: 40303457.408 ops/s
Iteration  15: 40083540.086 ops/s
Iteration  16: 40297926.318 ops/s
Iteration  17: 40343501.078 ops/s
Iteration  18: 40190160.458 ops/s
Iteration  19: 40292029.743 ops/s
Iteration  20: 40234046.817 ops/s
Iteration  21: 40324916.541 ops/s
Iteration  22: 40223096.058 ops/s
Iteration  23: 40240425.118 ops/s
Iteration  24: 40360451.179 ops/s
Iteration  25: 40209337.487 ops/s
Iteration  26: 40323112.823 ops/s
Iteration  27: 40327101.961 ops/s
Iteration  28: 40378185.042 ops/s
Iteration  29: 40343774.319 ops/s
Iteration  30: 40229217.447 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumLong":
  40285046.584 ±(99.9%) 53555.320 ops/s [Average]
  (min, avg, max) = (40083540.086, 40285046.584, 40441289.356), stdev = 80159.087
  CI (99.9%): [40231491.264, 40338601.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumLong  thrpt   30  40285046.584 ± 53555.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12567785.810 ops/s
# Warmup Iteration   2: 24842074.888 ops/s
# Warmup Iteration   3: 20895963.542 ops/s
# Warmup Iteration   4: 24648590.872 ops/s
# Warmup Iteration   5: 24646696.575 ops/s
# Warmup Iteration   6: 24703108.744 ops/s
# Warmup Iteration   7: 24686072.472 ops/s
# Warmup Iteration   8: 24709704.880 ops/s
# Warmup Iteration   9: 24663161.256 ops/s
# Warmup Iteration  10: 24654277.764 ops/s
# Warmup Iteration  11: 24638233.550 ops/s
# Warmup Iteration  12: 24721943.385 ops/s
# Warmup Iteration  13: 24664785.166 ops/s
# Warmup Iteration  14: 24698942.168 ops/s
# Warmup Iteration  15: 24721276.620 ops/s
# Warmup Iteration  16: 24706982.930 ops/s
# Warmup Iteration  17: 24642127.728 ops/s
# Warmup Iteration  18: 24662523.497 ops/s
# Warmup Iteration  19: 24671177.941 ops/s
# Warmup Iteration  20: 24719118.467 ops/s
# Warmup Iteration  21: 24614037.553 ops/s
# Warmup Iteration  22: 24669155.212 ops/s
# Warmup Iteration  23: 24707676.886 ops/s
# Warmup Iteration  24: 24698813.708 ops/s
# Warmup Iteration  25: 24708517.225 ops/s
# Warmup Iteration  26: 24628387.584 ops/s
# Warmup Iteration  27: 24621770.371 ops/s
# Warmup Iteration  28: 24672749.675 ops/s
# Warmup Iteration  29: 24623888.058 ops/s
# Warmup Iteration  30: 24637082.951 ops/s
Iteration   1: 24820830.897 ops/s
Iteration   2: 24639372.669 ops/s
Iteration   3: 24697912.405 ops/s
Iteration   4: 24732487.765 ops/s
Iteration   5: 24690839.958 ops/s
Iteration   6: 24615942.765 ops/s
Iteration   7: 24724173.893 ops/s
Iteration   8: 24704362.184 ops/s
Iteration   9: 24683648.172 ops/s
Iteration  10: 24671581.901 ops/s
Iteration  11: 24725013.972 ops/s
Iteration  12: 24673876.603 ops/s
Iteration  13: 24675843.806 ops/s
Iteration  14: 24730523.122 ops/s
Iteration  15: 24728826.233 ops/s
Iteration  16: 24699434.232 ops/s
Iteration  17: 24707078.844 ops/s
Iteration  18: 24699049.206 ops/s
Iteration  19: 24671323.834 ops/s
Iteration  20: 24675149.077 ops/s
Iteration  21: 24731082.740 ops/s
Iteration  22: 24736101.617 ops/s
Iteration  23: 24661155.959 ops/s
Iteration  24: 24773794.394 ops/s
Iteration  25: 24688226.785 ops/s
Iteration  26: 24668121.714 ops/s
Iteration  27: 24662002.523 ops/s
Iteration  28: 24656016.323 ops/s
Iteration  29: 24641823.857 ops/s
Iteration  30: 24586036.826 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeDouble":
  24692387.809 ±(99.9%) 30817.176 ops/s [Average]
  (min, avg, max) = (24586036.826, 24692387.809, 24820830.897), stdev = 46125.702
  CI (99.9%): [24661570.633, 24723204.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_summarizeDouble  thrpt   30  24692387.809 ± 30817.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11958924.672 ops/s
# Warmup Iteration   2: 23594564.611 ops/s
# Warmup Iteration   3: 20243726.619 ops/s
# Warmup Iteration   4: 23922758.504 ops/s
# Warmup Iteration   5: 23985224.544 ops/s
# Warmup Iteration   6: 23987362.000 ops/s
# Warmup Iteration   7: 23902952.447 ops/s
# Warmup Iteration   8: 23873495.338 ops/s
# Warmup Iteration   9: 23929611.554 ops/s
# Warmup Iteration  10: 23894237.001 ops/s
# Warmup Iteration  11: 23949949.233 ops/s
# Warmup Iteration  12: 23950600.157 ops/s
# Warmup Iteration  13: 23954082.399 ops/s
# Warmup Iteration  14: 23915997.469 ops/s
# Warmup Iteration  15: 23902771.194 ops/s
# Warmup Iteration  16: 23914945.217 ops/s
# Warmup Iteration  17: 23977059.508 ops/s
# Warmup Iteration  18: 23933984.696 ops/s
# Warmup Iteration  19: 23972089.904 ops/s
# Warmup Iteration  20: 23987222.952 ops/s
# Warmup Iteration  21: 23947599.643 ops/s
# Warmup Iteration  22: 23945885.392 ops/s
# Warmup Iteration  23: 23938910.875 ops/s
# Warmup Iteration  24: 23900046.041 ops/s
# Warmup Iteration  25: 23944816.413 ops/s
# Warmup Iteration  26: 23972815.216 ops/s
# Warmup Iteration  27: 23967189.760 ops/s
# Warmup Iteration  28: 24002466.911 ops/s
# Warmup Iteration  29: 23931557.376 ops/s
# Warmup Iteration  30: 23931697.451 ops/s
Iteration   1: 23964264.923 ops/s
Iteration   2: 23983900.450 ops/s
Iteration   3: 23890748.865 ops/s
Iteration   4: 23954464.432 ops/s
Iteration   5: 23941346.617 ops/s
Iteration   6: 23911308.318 ops/s
Iteration   7: 23729501.951 ops/s
Iteration   8: 23933908.932 ops/s
Iteration   9: 23892962.735 ops/s
Iteration  10: 23947337.448 ops/s
Iteration  11: 23911898.055 ops/s
Iteration  12: 23922460.118 ops/s
Iteration  13: 23937469.477 ops/s
Iteration  14: 23941250.887 ops/s
Iteration  15: 23920401.060 ops/s
Iteration  16: 23947113.814 ops/s
Iteration  17: 23913708.225 ops/s
Iteration  18: 23893496.787 ops/s
Iteration  19: 23957842.063 ops/s
Iteration  20: 23874959.172 ops/s
Iteration  21: 23919194.685 ops/s
Iteration  22: 23963925.702 ops/s
Iteration  23: 23900676.286 ops/s
Iteration  24: 23938470.267 ops/s
Iteration  25: 23923935.549 ops/s
Iteration  26: 23964302.449 ops/s
Iteration  27: 23921736.892 ops/s
Iteration  28: 23873975.416 ops/s
Iteration  29: 23899320.846 ops/s
Iteration  30: 24047330.534 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeFloat":
  23924107.098 ±(99.9%) 34027.403 ops/s [Average]
  (min, avg, max) = (23729501.951, 23924107.098, 24047330.534), stdev = 50930.618
  CI (99.9%): [23890079.696, 23958134.501] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_summarizeFloat  thrpt   30  23924107.098 ± 34027.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18659037.103 ops/s
# Warmup Iteration   2: 36327121.935 ops/s
# Warmup Iteration   3: 34033290.803 ops/s
# Warmup Iteration   4: 39114523.022 ops/s
# Warmup Iteration   5: 39151593.630 ops/s
# Warmup Iteration   6: 39108653.050 ops/s
# Warmup Iteration   7: 39156815.348 ops/s
# Warmup Iteration   8: 39149820.346 ops/s
# Warmup Iteration   9: 39226243.636 ops/s
# Warmup Iteration  10: 39201850.814 ops/s
# Warmup Iteration  11: 39289125.249 ops/s
# Warmup Iteration  12: 39164838.633 ops/s
# Warmup Iteration  13: 39078914.124 ops/s
# Warmup Iteration  14: 39153601.988 ops/s
# Warmup Iteration  15: 39270180.652 ops/s
# Warmup Iteration  16: 39195900.926 ops/s
# Warmup Iteration  17: 39044356.509 ops/s
# Warmup Iteration  18: 39187231.940 ops/s
# Warmup Iteration  19: 39179471.510 ops/s
# Warmup Iteration  20: 38993220.856 ops/s
# Warmup Iteration  21: 39069302.681 ops/s
# Warmup Iteration  22: 39123934.176 ops/s
# Warmup Iteration  23: 39087146.040 ops/s
# Warmup Iteration  24: 39381507.712 ops/s
# Warmup Iteration  25: 39105522.448 ops/s
# Warmup Iteration  26: 39178789.898 ops/s
# Warmup Iteration  27: 39112683.398 ops/s
# Warmup Iteration  28: 39156958.362 ops/s
# Warmup Iteration  29: 39225045.801 ops/s
# Warmup Iteration  30: 39093607.082 ops/s
Iteration   1: 39173603.925 ops/s
Iteration   2: 39143218.595 ops/s
Iteration   3: 39125954.129 ops/s
Iteration   4: 39046033.384 ops/s
Iteration   5: 39117427.573 ops/s
Iteration   6: 39325814.102 ops/s
Iteration   7: 39151331.841 ops/s
Iteration   8: 39052662.617 ops/s
Iteration   9: 39118265.417 ops/s
Iteration  10: 39251669.666 ops/s
Iteration  11: 39137009.656 ops/s
Iteration  12: 39036610.511 ops/s
Iteration  13: 39249589.588 ops/s
Iteration  14: 39282261.517 ops/s
Iteration  15: 39147375.432 ops/s
Iteration  16: 39134638.131 ops/s
Iteration  17: 39200489.568 ops/s
Iteration  18: 39192907.653 ops/s
Iteration  19: 39331589.690 ops/s
Iteration  20: 39215284.502 ops/s
Iteration  21: 39075664.728 ops/s
Iteration  22: 38979448.361 ops/s
Iteration  23: 39343276.596 ops/s
Iteration  24: 39041829.440 ops/s
Iteration  25: 39132917.260 ops/s
Iteration  26: 39129898.155 ops/s
Iteration  27: 39197352.890 ops/s
Iteration  28: 39142453.276 ops/s
Iteration  29: 39124613.109 ops/s
Iteration  30: 39287660.121 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeInt":
  39162961.714 ±(99.9%) 61822.614 ops/s [Average]
  (min, avg, max) = (38979448.361, 39162961.714, 39343276.596), stdev = 92533.186
  CI (99.9%): [39101139.100, 39224784.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_summarizeInt  thrpt   30  39162961.714 ± 61822.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19016527.769 ops/s
# Warmup Iteration   2: 33755341.653 ops/s
# Warmup Iteration   3: 33874702.740 ops/s
# Warmup Iteration   4: 36693777.928 ops/s
# Warmup Iteration   5: 36509389.261 ops/s
# Warmup Iteration   6: 36570676.027 ops/s
# Warmup Iteration   7: 36592408.828 ops/s
# Warmup Iteration   8: 36691139.788 ops/s
# Warmup Iteration   9: 36669229.058 ops/s
# Warmup Iteration  10: 36558877.739 ops/s
# Warmup Iteration  11: 36632242.210 ops/s
# Warmup Iteration  12: 36710384.305 ops/s
# Warmup Iteration  13: 36515695.670 ops/s
# Warmup Iteration  14: 36769578.246 ops/s
# Warmup Iteration  15: 36788121.930 ops/s
# Warmup Iteration  16: 36492152.296 ops/s
# Warmup Iteration  17: 36659124.599 ops/s
# Warmup Iteration  18: 36666437.761 ops/s
# Warmup Iteration  19: 36610621.977 ops/s
# Warmup Iteration  20: 36658209.320 ops/s
# Warmup Iteration  21: 36595646.398 ops/s
# Warmup Iteration  22: 36622022.813 ops/s
# Warmup Iteration  23: 36613210.173 ops/s
# Warmup Iteration  24: 36766978.333 ops/s
# Warmup Iteration  25: 36809653.367 ops/s
# Warmup Iteration  26: 36610167.702 ops/s
# Warmup Iteration  27: 36679012.604 ops/s
# Warmup Iteration  28: 36627487.568 ops/s
# Warmup Iteration  29: 36582341.550 ops/s
# Warmup Iteration  30: 36819571.640 ops/s
Iteration   1: 36578838.017 ops/s
Iteration   2: 36647487.926 ops/s
Iteration   3: 36663824.344 ops/s
Iteration   4: 36500535.982 ops/s
Iteration   5: 36756257.096 ops/s
Iteration   6: 36399517.817 ops/s
Iteration   7: 36860074.167 ops/s
Iteration   8: 36364244.814 ops/s
Iteration   9: 36765245.586 ops/s
Iteration  10: 36612506.435 ops/s
Iteration  11: 36650441.727 ops/s
Iteration  12: 36698610.625 ops/s
Iteration  13: 36765882.413 ops/s
Iteration  14: 36654918.206 ops/s
Iteration  15: 36669564.613 ops/s
Iteration  16: 36733256.422 ops/s
Iteration  17: 36759057.785 ops/s
Iteration  18: 36519452.956 ops/s
Iteration  19: 36592094.839 ops/s
Iteration  20: 36663004.707 ops/s
Iteration  21: 36822151.054 ops/s
Iteration  22: 36616992.156 ops/s
Iteration  23: 36426860.494 ops/s
Iteration  24: 36782649.660 ops/s
Iteration  25: 36630531.380 ops/s
Iteration  26: 36644832.956 ops/s
Iteration  27: 36601021.682 ops/s
Iteration  28: 36465446.313 ops/s
Iteration  29: 36654153.068 ops/s
Iteration  30: 36564786.316 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_summarizeLong":
  36635474.719 ±(99.9%) 81697.127 ops/s [Average]
  (min, avg, max) = (36364244.814, 36635474.719, 36860074.167), stdev = 122280.423
  CI (99.9%): [36553777.591, 36717171.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_summarizeLong  thrpt   30  36635474.719 ± 81697.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2175227.231 ops/s
# Warmup Iteration   2: 5037989.812 ops/s
# Warmup Iteration   3: 5072188.113 ops/s
# Warmup Iteration   4: 4262700.782 ops/s
# Warmup Iteration   5: 5090914.709 ops/s
# Warmup Iteration   6: 5089822.147 ops/s
# Warmup Iteration   7: 5092687.038 ops/s
# Warmup Iteration   8: 5093688.320 ops/s
# Warmup Iteration   9: 5086393.114 ops/s
# Warmup Iteration  10: 5074255.570 ops/s
# Warmup Iteration  11: 5085326.825 ops/s
# Warmup Iteration  12: 5086839.650 ops/s
# Warmup Iteration  13: 5085286.467 ops/s
# Warmup Iteration  14: 5087788.803 ops/s
# Warmup Iteration  15: 5090469.586 ops/s
# Warmup Iteration  16: 5089486.202 ops/s
# Warmup Iteration  17: 5087000.735 ops/s
# Warmup Iteration  18: 5084987.353 ops/s
# Warmup Iteration  19: 5069641.123 ops/s
# Warmup Iteration  20: 5091886.177 ops/s
# Warmup Iteration  21: 5088167.759 ops/s
# Warmup Iteration  22: 5089162.977 ops/s
# Warmup Iteration  23: 5079061.404 ops/s
# Warmup Iteration  24: 5084948.671 ops/s
# Warmup Iteration  25: 5093162.643 ops/s
# Warmup Iteration  26: 5092185.332 ops/s
# Warmup Iteration  27: 5099181.379 ops/s
# Warmup Iteration  28: 5092863.609 ops/s
# Warmup Iteration  29: 5091488.823 ops/s
# Warmup Iteration  30: 5089044.962 ops/s
Iteration   1: 5058925.237 ops/s
Iteration   2: 5091938.539 ops/s
Iteration   3: 5088799.447 ops/s
Iteration   4: 5092689.193 ops/s
Iteration   5: 5108129.953 ops/s
Iteration   6: 5088332.040 ops/s
Iteration   7: 5066745.737 ops/s
Iteration   8: 5079489.386 ops/s
Iteration   9: 5097427.173 ops/s
Iteration  10: 5099042.550 ops/s
Iteration  11: 5091403.526 ops/s
Iteration  12: 5087428.779 ops/s
Iteration  13: 5088904.810 ops/s
Iteration  14: 5094821.148 ops/s
Iteration  15: 5095759.792 ops/s
Iteration  16: 5090876.234 ops/s
Iteration  17: 5088340.390 ops/s
Iteration  18: 5093091.454 ops/s
Iteration  19: 5092127.906 ops/s
Iteration  20: 5081004.012 ops/s
Iteration  21: 5081429.696 ops/s
Iteration  22: 5086429.558 ops/s
Iteration  23: 5099033.800 ops/s
Iteration  24: 5099240.937 ops/s
Iteration  25: 5088574.177 ops/s
Iteration  26: 5071147.925 ops/s
Iteration  27: 5056133.857 ops/s
Iteration  28: 5053206.664 ops/s
Iteration  29: 5065159.955 ops/s
Iteration  30: 5080385.689 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take":
  5085200.652 ±(99.9%) 9110.324 ops/s [Average]
  (min, avg, max) = (5053206.664, 5085200.652, 5108129.953), stdev = 13635.906
  CI (99.9%): [5076090.328, 5094310.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_take  thrpt   30  5085200.652 ± 9110.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3607944.046 ops/s
# Warmup Iteration   2: 7927407.798 ops/s
# Warmup Iteration   3: 6780914.886 ops/s
# Warmup Iteration   4: 8015096.898 ops/s
# Warmup Iteration   5: 8018213.497 ops/s
# Warmup Iteration   6: 8004883.497 ops/s
# Warmup Iteration   7: 8017715.892 ops/s
# Warmup Iteration   8: 8021933.582 ops/s
# Warmup Iteration   9: 8032378.054 ops/s
# Warmup Iteration  10: 8036460.562 ops/s
# Warmup Iteration  11: 8020625.874 ops/s
# Warmup Iteration  12: 8015159.920 ops/s
# Warmup Iteration  13: 8028741.113 ops/s
# Warmup Iteration  14: 8011026.184 ops/s
# Warmup Iteration  15: 8023013.047 ops/s
# Warmup Iteration  16: 8032372.047 ops/s
# Warmup Iteration  17: 8042197.401 ops/s
# Warmup Iteration  18: 8040910.719 ops/s
# Warmup Iteration  19: 8037548.976 ops/s
# Warmup Iteration  20: 8047549.981 ops/s
# Warmup Iteration  21: 8023224.945 ops/s
# Warmup Iteration  22: 8010569.779 ops/s
# Warmup Iteration  23: 8031262.824 ops/s
# Warmup Iteration  24: 8026663.177 ops/s
# Warmup Iteration  25: 8022555.833 ops/s
# Warmup Iteration  26: 8029739.520 ops/s
# Warmup Iteration  27: 8037763.904 ops/s
# Warmup Iteration  28: 8008210.185 ops/s
# Warmup Iteration  29: 8032675.941 ops/s
# Warmup Iteration  30: 8017505.013 ops/s
Iteration   1: 8045070.157 ops/s
Iteration   2: 8022784.964 ops/s
Iteration   3: 8045295.997 ops/s
Iteration   4: 8020517.149 ops/s
Iteration   5: 8022095.074 ops/s
Iteration   6: 8041838.881 ops/s
Iteration   7: 7992787.512 ops/s
Iteration   8: 8032841.470 ops/s
Iteration   9: 8000143.194 ops/s
Iteration  10: 7949282.917 ops/s
Iteration  11: 8004410.361 ops/s
Iteration  12: 8050987.637 ops/s
Iteration  13: 8002461.206 ops/s
Iteration  14: 7987840.213 ops/s
Iteration  15: 7998416.625 ops/s
Iteration  16: 8015298.628 ops/s
Iteration  17: 8027225.152 ops/s
Iteration  18: 7973463.791 ops/s
Iteration  19: 7925843.364 ops/s
Iteration  20: 7943313.405 ops/s
Iteration  21: 8035023.343 ops/s
Iteration  22: 8009091.360 ops/s
Iteration  23: 8022449.488 ops/s
Iteration  24: 8049695.134 ops/s
Iteration  25: 7982887.453 ops/s
Iteration  26: 8027803.724 ops/s
Iteration  27: 8072430.497 ops/s
Iteration  28: 8036012.808 ops/s
Iteration  29: 8028103.148 ops/s
Iteration  30: 8035038.115 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_takeWhile":
  8013348.426 ±(99.9%) 22433.622 ops/s [Average]
  (min, avg, max) = (7925843.364, 8013348.426, 8072430.497), stdev = 33577.591
  CI (99.9%): [7990914.804, 8035782.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_takeWhile  thrpt   30  8013348.426 ± 22433.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745580.802 ops/s
# Warmup Iteration   2: 706456.640 ops/s
# Warmup Iteration   3: 1030021.428 ops/s
# Warmup Iteration   4: 1029187.178 ops/s
# Warmup Iteration   5: 1024020.790 ops/s
# Warmup Iteration   6: 1030318.381 ops/s
# Warmup Iteration   7: 1028789.515 ops/s
# Warmup Iteration   8: 1027979.587 ops/s
# Warmup Iteration   9: 1030351.478 ops/s
# Warmup Iteration  10: 1031510.724 ops/s
# Warmup Iteration  11: 867698.338 ops/s
# Warmup Iteration  12: 1031293.791 ops/s
# Warmup Iteration  13: 1029515.653 ops/s
# Warmup Iteration  14: 1032268.347 ops/s
# Warmup Iteration  15: 1032205.898 ops/s
# Warmup Iteration  16: 1032682.943 ops/s
# Warmup Iteration  17: 1100613.818 ops/s
# Warmup Iteration  18: 1096681.419 ops/s
# Warmup Iteration  19: 1100448.934 ops/s
# Warmup Iteration  20: 1096880.227 ops/s
# Warmup Iteration  21: 1094477.306 ops/s
# Warmup Iteration  22: 1096900.659 ops/s
# Warmup Iteration  23: 1096682.316 ops/s
# Warmup Iteration  24: 1097630.804 ops/s
# Warmup Iteration  25: 1095145.911 ops/s
# Warmup Iteration  26: 1098258.226 ops/s
# Warmup Iteration  27: 1095392.535 ops/s
# Warmup Iteration  28: 1097066.546 ops/s
# Warmup Iteration  29: 1097907.497 ops/s
# Warmup Iteration  30: 1096103.875 ops/s
Iteration   1: 1101194.031 ops/s
Iteration   2: 1099666.180 ops/s
Iteration   3: 1093442.983 ops/s
Iteration   4: 1095518.472 ops/s
Iteration   5: 1098416.751 ops/s
Iteration   6: 1095731.198 ops/s
Iteration   7: 1095043.476 ops/s
Iteration   8: 1098327.156 ops/s
Iteration   9: 1098764.379 ops/s
Iteration  10: 1098350.919 ops/s
Iteration  11: 1098547.178 ops/s
Iteration  12: 1102660.455 ops/s
Iteration  13: 1101859.931 ops/s
Iteration  14: 1089035.169 ops/s
Iteration  15: 1093838.326 ops/s
Iteration  16: 1095755.668 ops/s
Iteration  17: 1101219.093 ops/s
Iteration  18: 1095889.534 ops/s
Iteration  19: 1096425.814 ops/s
Iteration  20: 1098681.251 ops/s
Iteration  21: 1098807.061 ops/s
Iteration  22: 1098911.597 ops/s
Iteration  23: 1098734.284 ops/s
Iteration  24: 1099169.076 ops/s
Iteration  25: 1096045.593 ops/s
Iteration  26: 1095816.848 ops/s
Iteration  27: 1092687.790 ops/s
Iteration  28: 1100891.042 ops/s
Iteration  29: 1097984.072 ops/s
Iteration  30: 1097990.696 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_take_throws":
  1097513.534 ±(99.9%) 1975.851 ops/s [Average]
  (min, avg, max) = (1089035.169, 1097513.534, 1102660.455), stdev = 2957.361
  CI (99.9%): [1095537.683, 1099489.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_take_throws  thrpt   30  1097513.534 ± 1975.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6252952.046 ops/s
# Warmup Iteration   2: 12826759.397 ops/s
# Warmup Iteration   3: 11195984.270 ops/s
# Warmup Iteration   4: 12716981.066 ops/s
# Warmup Iteration   5: 12944150.686 ops/s
# Warmup Iteration   6: 12911595.572 ops/s
# Warmup Iteration   7: 12909089.393 ops/s
# Warmup Iteration   8: 12933577.778 ops/s
# Warmup Iteration   9: 12932526.902 ops/s
# Warmup Iteration  10: 12930924.032 ops/s
# Warmup Iteration  11: 12914320.726 ops/s
# Warmup Iteration  12: 12918833.989 ops/s
# Warmup Iteration  13: 12911765.426 ops/s
# Warmup Iteration  14: 12929154.562 ops/s
# Warmup Iteration  15: 12909918.674 ops/s
# Warmup Iteration  16: 12923063.685 ops/s
# Warmup Iteration  17: 12945127.142 ops/s
# Warmup Iteration  18: 12927268.525 ops/s
# Warmup Iteration  19: 12924610.057 ops/s
# Warmup Iteration  20: 12935989.490 ops/s
# Warmup Iteration  21: 12935154.248 ops/s
# Warmup Iteration  22: 12906824.673 ops/s
# Warmup Iteration  23: 12920521.327 ops/s
# Warmup Iteration  24: 12928789.854 ops/s
# Warmup Iteration  25: 12910685.211 ops/s
# Warmup Iteration  26: 12914599.796 ops/s
# Warmup Iteration  27: 12943994.793 ops/s
# Warmup Iteration  28: 12939254.154 ops/s
# Warmup Iteration  29: 12915604.580 ops/s
# Warmup Iteration  30: 12940286.345 ops/s
Iteration   1: 12949365.333 ops/s
Iteration   2: 12932124.899 ops/s
Iteration   3: 12931915.306 ops/s
Iteration   4: 12917465.536 ops/s
Iteration   5: 12926539.986 ops/s
Iteration   6: 12898698.728 ops/s
Iteration   7: 12939672.962 ops/s
Iteration   8: 12938212.672 ops/s
Iteration   9: 12945069.984 ops/s
Iteration  10: 12921977.362 ops/s
Iteration  11: 12935860.550 ops/s
Iteration  12: 12949422.519 ops/s
Iteration  13: 12933594.780 ops/s
Iteration  14: 12922207.840 ops/s
Iteration  15: 12974913.755 ops/s
Iteration  16: 12945409.313 ops/s
Iteration  17: 12938670.191 ops/s
Iteration  18: 12923804.995 ops/s
Iteration  19: 12939153.394 ops/s
Iteration  20: 12907592.436 ops/s
Iteration  21: 12894961.344 ops/s
Iteration  22: 12952938.943 ops/s
Iteration  23: 12847703.158 ops/s
Iteration  24: 12824939.989 ops/s
Iteration  25: 12934745.974 ops/s
Iteration  26: 12932099.513 ops/s
Iteration  27: 12929252.001 ops/s
Iteration  28: 12904969.357 ops/s
Iteration  29: 12869761.021 ops/s
Iteration  30: 12930075.989 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_tap":
  12923103.994 ±(99.9%) 20702.312 ops/s [Average]
  (min, avg, max) = (12824939.989, 12923103.994, 12974913.755), stdev = 30986.248
  CI (99.9%): [12902401.683, 12943806.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_tap  thrpt   30  12923103.994 ± 20702.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testBAOSSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testBAOSSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30674.669 ops/s
# Warmup Iteration   2: 36091.331 ops/s
# Warmup Iteration   3: 56109.435 ops/s
# Warmup Iteration   4: 55365.970 ops/s
# Warmup Iteration   5: 55577.468 ops/s
# Warmup Iteration   6: 55431.016 ops/s
# Warmup Iteration   7: 54377.633 ops/s
# Warmup Iteration   8: 55275.271 ops/s
# Warmup Iteration   9: 55349.943 ops/s
# Warmup Iteration  10: 44742.341 ops/s
# Warmup Iteration  11: 55653.540 ops/s
# Warmup Iteration  12: 55504.379 ops/s
# Warmup Iteration  13: 55120.308 ops/s
# Warmup Iteration  14: 55510.523 ops/s
# Warmup Iteration  15: 55356.377 ops/s
# Warmup Iteration  16: 55326.717 ops/s
# Warmup Iteration  17: 55157.064 ops/s
# Warmup Iteration  18: 55013.442 ops/s
# Warmup Iteration  19: 55331.616 ops/s
# Warmup Iteration  20: 55223.836 ops/s
# Warmup Iteration  21: 55987.827 ops/s
# Warmup Iteration  22: 55437.309 ops/s
# Warmup Iteration  23: 54947.764 ops/s
# Warmup Iteration  24: 55978.489 ops/s
# Warmup Iteration  25: 55757.748 ops/s
# Warmup Iteration  26: 54660.139 ops/s
# Warmup Iteration  27: 55043.427 ops/s
# Warmup Iteration  28: 55508.450 ops/s
# Warmup Iteration  29: 55386.542 ops/s
# Warmup Iteration  30: 55518.906 ops/s
Iteration   1: 55418.449 ops/s
Iteration   2: 55469.894 ops/s
Iteration   3: 55101.433 ops/s
Iteration   4: 54804.477 ops/s
Iteration   5: 55053.914 ops/s
Iteration   6: 55324.990 ops/s
Iteration   7: 55776.612 ops/s
Iteration   8: 55520.325 ops/s
Iteration   9: 55387.739 ops/s
Iteration  10: 54740.220 ops/s
Iteration  11: 54925.157 ops/s
Iteration  12: 55276.044 ops/s
Iteration  13: 55878.564 ops/s
Iteration  14: 56832.662 ops/s
Iteration  15: 55104.044 ops/s
Iteration  16: 55381.384 ops/s
Iteration  17: 56057.623 ops/s
Iteration  18: 55102.005 ops/s
Iteration  19: 55274.928 ops/s
Iteration  20: 55074.299 ops/s
Iteration  21: 55352.132 ops/s
Iteration  22: 55246.442 ops/s
Iteration  23: 55206.287 ops/s
Iteration  24: 54863.703 ops/s
Iteration  25: 55157.034 ops/s
Iteration  26: 54907.749 ops/s
Iteration  27: 54007.340 ops/s
Iteration  28: 55450.725 ops/s
Iteration  29: 55103.552 ops/s
Iteration  30: 55408.877 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testBAOSSize":
  55273.620 ±(99.9%) 319.279 ops/s [Average]
  (min, avg, max) = (54007.340, 55273.620, 56832.662), stdev = 477.881
  CI (99.9%): [54954.342, 55592.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_testBAOSSize  thrpt   30  55273.620 ± 319.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1187092.202 ops/s
# Warmup Iteration   2: 2029271.254 ops/s
# Warmup Iteration   3: 2019652.267 ops/s
# Warmup Iteration   4: 2018020.989 ops/s
# Warmup Iteration   5: 1710328.490 ops/s
# Warmup Iteration   6: 2044557.457 ops/s
# Warmup Iteration   7: 2044223.122 ops/s
# Warmup Iteration   8: 2041490.910 ops/s
# Warmup Iteration   9: 2046224.314 ops/s
# Warmup Iteration  10: 2042000.135 ops/s
# Warmup Iteration  11: 2042249.798 ops/s
# Warmup Iteration  12: 2044721.952 ops/s
# Warmup Iteration  13: 2045680.535 ops/s
# Warmup Iteration  14: 2044036.067 ops/s
# Warmup Iteration  15: 2038950.821 ops/s
# Warmup Iteration  16: 2042819.790 ops/s
# Warmup Iteration  17: 2035288.613 ops/s
# Warmup Iteration  18: 2029480.336 ops/s
# Warmup Iteration  19: 2030804.222 ops/s
# Warmup Iteration  20: 2026817.111 ops/s
# Warmup Iteration  21: 2024245.515 ops/s
# Warmup Iteration  22: 2035104.579 ops/s
# Warmup Iteration  23: 2036295.772 ops/s
# Warmup Iteration  24: 2032001.698 ops/s
# Warmup Iteration  25: 2035992.059 ops/s
# Warmup Iteration  26: 2033867.561 ops/s
# Warmup Iteration  27: 2032269.551 ops/s
# Warmup Iteration  28: 2032600.936 ops/s
# Warmup Iteration  29: 2036736.336 ops/s
# Warmup Iteration  30: 2035501.462 ops/s
Iteration   1: 2030479.657 ops/s
Iteration   2: 2036160.646 ops/s
Iteration   3: 2043775.069 ops/s
Iteration   4: 2036415.926 ops/s
Iteration   5: 1887697.802 ops/s
Iteration   6: 2028743.328 ops/s
Iteration   7: 2033410.976 ops/s
Iteration   8: 2038581.453 ops/s
Iteration   9: 2036686.604 ops/s
Iteration  10: 2034908.749 ops/s
Iteration  11: 2039753.087 ops/s
Iteration  12: 2030596.168 ops/s
Iteration  13: 2034091.062 ops/s
Iteration  14: 2040475.692 ops/s
Iteration  15: 2031889.483 ops/s
Iteration  16: 2032556.286 ops/s
Iteration  17: 2039317.281 ops/s
Iteration  18: 2034706.644 ops/s
Iteration  19: 2033332.979 ops/s
Iteration  20: 2035593.962 ops/s
Iteration  21: 2031229.742 ops/s
Iteration  22: 2026881.603 ops/s
Iteration  23: 2033983.733 ops/s
Iteration  24: 2035831.449 ops/s
Iteration  25: 2039161.552 ops/s
Iteration  26: 2031103.791 ops/s
Iteration  27: 2027537.668 ops/s
Iteration  28: 2029924.965 ops/s
Iteration  29: 2024887.566 ops/s
Iteration  30: 2021029.430 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testClone":
  2028691.478 ±(99.9%) 18092.162 ops/s [Average]
  (min, avg, max) = (1887697.802, 2028691.478, 2043775.069), stdev = 27079.498
  CI (99.9%): [2010599.316, 2046783.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testClone  thrpt   30  2028691.478 ± 18092.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14315818.675 ops/s
# Warmup Iteration   2: 23137768.707 ops/s
# Warmup Iteration   3: 27830895.458 ops/s
# Warmup Iteration   4: 27677992.891 ops/s
# Warmup Iteration   5: 27607313.359 ops/s
# Warmup Iteration   6: 27590868.600 ops/s
# Warmup Iteration   7: 27609932.170 ops/s
# Warmup Iteration   8: 27484075.383 ops/s
# Warmup Iteration   9: 27649673.235 ops/s
# Warmup Iteration  10: 27633916.972 ops/s
# Warmup Iteration  11: 27622882.152 ops/s
# Warmup Iteration  12: 27576050.170 ops/s
# Warmup Iteration  13: 27601423.874 ops/s
# Warmup Iteration  14: 27665531.734 ops/s
# Warmup Iteration  15: 27598225.407 ops/s
# Warmup Iteration  16: 27702600.939 ops/s
# Warmup Iteration  17: 27663531.452 ops/s
# Warmup Iteration  18: 27777768.168 ops/s
# Warmup Iteration  19: 27623442.548 ops/s
# Warmup Iteration  20: 27655738.807 ops/s
# Warmup Iteration  21: 27782667.385 ops/s
# Warmup Iteration  22: 27696462.599 ops/s
# Warmup Iteration  23: 27681463.293 ops/s
# Warmup Iteration  24: 27819873.882 ops/s
# Warmup Iteration  25: 27723200.479 ops/s
# Warmup Iteration  26: 27719743.784 ops/s
# Warmup Iteration  27: 27777037.406 ops/s
# Warmup Iteration  28: 27739539.662 ops/s
# Warmup Iteration  29: 27603731.128 ops/s
# Warmup Iteration  30: 27728228.680 ops/s
Iteration   1: 27746176.866 ops/s
Iteration   2: 27558222.923 ops/s
Iteration   3: 27725314.137 ops/s
Iteration   4: 27694254.465 ops/s
Iteration   5: 27767972.378 ops/s
Iteration   6: 27704145.947 ops/s
Iteration   7: 27782711.319 ops/s
Iteration   8: 27830656.062 ops/s
Iteration   9: 27795298.906 ops/s
Iteration  10: 27827117.861 ops/s
Iteration  11: 27805565.395 ops/s
Iteration  12: 27769535.729 ops/s
Iteration  13: 27526105.888 ops/s
Iteration  14: 27676488.738 ops/s
Iteration  15: 27722468.811 ops/s
Iteration  16: 27846038.706 ops/s
Iteration  17: 27820962.106 ops/s
Iteration  18: 27795696.356 ops/s
Iteration  19: 27657767.066 ops/s
Iteration  20: 27582009.022 ops/s
Iteration  21: 27534078.600 ops/s
Iteration  22: 27523630.374 ops/s
Iteration  23: 27684837.347 ops/s
Iteration  24: 27610152.278 ops/s
Iteration  25: 27697877.432 ops/s
Iteration  26: 27650828.504 ops/s
Iteration  27: 27650633.308 ops/s
Iteration  28: 27654501.144 ops/s
Iteration  29: 27546101.637 ops/s
Iteration  30: 27634587.796 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewCollection":
  27694057.903 ±(99.9%) 66298.818 ops/s [Average]
  (min, avg, max) = (27523630.374, 27694057.903, 27846038.706), stdev = 99232.957
  CI (99.9%): [27627759.086, 27760356.721] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewCollection  thrpt   30  27694057.903 ± 66298.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8818916.941 ops/s
# Warmup Iteration   2: 15251459.651 ops/s
# Warmup Iteration   3: 16793086.349 ops/s
# Warmup Iteration   4: 17512770.136 ops/s
# Warmup Iteration   5: 17522308.318 ops/s
# Warmup Iteration   6: 17484850.077 ops/s
# Warmup Iteration   7: 17449726.215 ops/s
# Warmup Iteration   8: 17445823.047 ops/s
# Warmup Iteration   9: 17446824.793 ops/s
# Warmup Iteration  10: 17454930.844 ops/s
# Warmup Iteration  11: 17408533.403 ops/s
# Warmup Iteration  12: 17527662.524 ops/s
# Warmup Iteration  13: 17425881.188 ops/s
# Warmup Iteration  14: 17434489.005 ops/s
# Warmup Iteration  15: 17457796.834 ops/s
# Warmup Iteration  16: 17475051.528 ops/s
# Warmup Iteration  17: 17509574.486 ops/s
# Warmup Iteration  18: 17482439.486 ops/s
# Warmup Iteration  19: 17618394.776 ops/s
# Warmup Iteration  20: 17567529.569 ops/s
# Warmup Iteration  21: 17566612.652 ops/s
# Warmup Iteration  22: 17494455.847 ops/s
# Warmup Iteration  23: 17509452.535 ops/s
# Warmup Iteration  24: 17519042.995 ops/s
# Warmup Iteration  25: 17419716.614 ops/s
# Warmup Iteration  26: 17461702.117 ops/s
# Warmup Iteration  27: 17599366.832 ops/s
# Warmup Iteration  28: 17538959.488 ops/s
# Warmup Iteration  29: 17507498.926 ops/s
# Warmup Iteration  30: 17651700.729 ops/s
Iteration   1: 17550234.529 ops/s
Iteration   2: 17546787.569 ops/s
Iteration   3: 17538624.881 ops/s
Iteration   4: 17459139.190 ops/s
Iteration   5: 17508366.919 ops/s
Iteration   6: 17606693.792 ops/s
Iteration   7: 17611808.254 ops/s
Iteration   8: 17572157.890 ops/s
Iteration   9: 17537467.953 ops/s
Iteration  10: 17613734.940 ops/s
Iteration  11: 17533720.637 ops/s
Iteration  12: 17512545.607 ops/s
Iteration  13: 17483254.628 ops/s
Iteration  14: 17528480.194 ops/s
Iteration  15: 17581901.319 ops/s
Iteration  16: 17456665.351 ops/s
Iteration  17: 17479926.070 ops/s
Iteration  18: 17477494.427 ops/s
Iteration  19: 17638061.426 ops/s
Iteration  20: 17573635.922 ops/s
Iteration  21: 17463327.849 ops/s
Iteration  22: 17564386.860 ops/s
Iteration  23: 17615978.064 ops/s
Iteration  24: 17433278.741 ops/s
Iteration  25: 17455894.186 ops/s
Iteration  26: 17564613.509 ops/s
Iteration  27: 17519973.743 ops/s
Iteration  28: 17490247.988 ops/s
Iteration  29: 17515837.542 ops/s
Iteration  30: 17497092.308 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewList":
  17531044.410 ±(99.9%) 37031.701 ops/s [Average]
  (min, avg, max) = (17433278.741, 17531044.410, 17638061.426), stdev = 55427.311
  CI (99.9%): [17494012.708, 17568076.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewList  thrpt   30  17531044.410 ± 37031.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5257140.633 ops/s
# Warmup Iteration   2: 8800025.119 ops/s
# Warmup Iteration   3: 10488668.073 ops/s
# Warmup Iteration   4: 10515488.315 ops/s
# Warmup Iteration   5: 10347222.912 ops/s
# Warmup Iteration   6: 10487798.795 ops/s
# Warmup Iteration   7: 10442019.099 ops/s
# Warmup Iteration   8: 10485315.467 ops/s
# Warmup Iteration   9: 10508977.417 ops/s
# Warmup Iteration  10: 10445052.716 ops/s
# Warmup Iteration  11: 10544935.673 ops/s
# Warmup Iteration  12: 10467455.966 ops/s
# Warmup Iteration  13: 10494555.282 ops/s
# Warmup Iteration  14: 10496248.443 ops/s
# Warmup Iteration  15: 10481920.965 ops/s
# Warmup Iteration  16: 10511331.514 ops/s
# Warmup Iteration  17: 10481677.891 ops/s
# Warmup Iteration  18: 10465061.850 ops/s
# Warmup Iteration  19: 10501708.387 ops/s
# Warmup Iteration  20: 10420035.118 ops/s
# Warmup Iteration  21: 10513359.629 ops/s
# Warmup Iteration  22: 10454555.670 ops/s
# Warmup Iteration  23: 10520683.176 ops/s
# Warmup Iteration  24: 10517992.820 ops/s
# Warmup Iteration  25: 10445893.979 ops/s
# Warmup Iteration  26: 10497305.724 ops/s
# Warmup Iteration  27: 10478358.494 ops/s
# Warmup Iteration  28: 10450109.093 ops/s
# Warmup Iteration  29: 10478325.442 ops/s
# Warmup Iteration  30: 10500426.469 ops/s
Iteration   1: 10462400.685 ops/s
Iteration   2: 10518440.257 ops/s
Iteration   3: 10525744.509 ops/s
Iteration   4: 10489668.547 ops/s
Iteration   5: 10423418.490 ops/s
Iteration   6: 10477935.983 ops/s
Iteration   7: 10574197.323 ops/s
Iteration   8: 10503503.475 ops/s
Iteration   9: 10477767.088 ops/s
Iteration  10: 10484389.943 ops/s
Iteration  11: 10524863.479 ops/s
Iteration  12: 10545649.216 ops/s
Iteration  13: 10489462.648 ops/s
Iteration  14: 10492742.105 ops/s
Iteration  15: 10455435.013 ops/s
Iteration  16: 10522850.310 ops/s
Iteration  17: 10542895.788 ops/s
Iteration  18: 10489948.387 ops/s
Iteration  19: 10465192.867 ops/s
Iteration  20: 10434310.974 ops/s
Iteration  21: 10514564.926 ops/s
Iteration  22: 10457106.190 ops/s
Iteration  23: 10515709.788 ops/s
Iteration  24: 10470137.227 ops/s
Iteration  25: 10446853.456 ops/s
Iteration  26: 10485832.017 ops/s
Iteration  27: 10492918.492 ops/s
Iteration  28: 10454069.339 ops/s
Iteration  29: 10488486.697 ops/s
Iteration  30: 10519757.227 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWith":
  10491541.748 ±(99.9%) 23118.895 ops/s [Average]
  (min, avg, max) = (10423418.490, 10491541.748, 10574197.323), stdev = 34603.276
  CI (99.9%): [10468422.854, 10514660.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewWith  thrpt   30  10491541.748 ± 23118.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3344210.374 ops/s
# Warmup Iteration   2: 6429585.372 ops/s
# Warmup Iteration   3: 6060447.601 ops/s
# Warmup Iteration   4: 6805106.496 ops/s
# Warmup Iteration   5: 6837316.431 ops/s
# Warmup Iteration   6: 6814597.514 ops/s
# Warmup Iteration   7: 6786609.736 ops/s
# Warmup Iteration   8: 6828578.432 ops/s
# Warmup Iteration   9: 6798918.858 ops/s
# Warmup Iteration  10: 6783919.506 ops/s
# Warmup Iteration  11: 6811383.890 ops/s
# Warmup Iteration  12: 6804545.609 ops/s
# Warmup Iteration  13: 6822574.997 ops/s
# Warmup Iteration  14: 6839634.993 ops/s
# Warmup Iteration  15: 6832698.853 ops/s
# Warmup Iteration  16: 6686464.632 ops/s
# Warmup Iteration  17: 6778918.390 ops/s
# Warmup Iteration  18: 6834264.612 ops/s
# Warmup Iteration  19: 6820663.197 ops/s
# Warmup Iteration  20: 6832000.778 ops/s
# Warmup Iteration  21: 6815030.569 ops/s
# Warmup Iteration  22: 6808740.915 ops/s
# Warmup Iteration  23: 6846107.876 ops/s
# Warmup Iteration  24: 6814873.276 ops/s
# Warmup Iteration  25: 6821974.098 ops/s
# Warmup Iteration  26: 6827809.318 ops/s
# Warmup Iteration  27: 6810354.241 ops/s
# Warmup Iteration  28: 6802178.226 ops/s
# Warmup Iteration  29: 6836906.365 ops/s
# Warmup Iteration  30: 6822264.155 ops/s
Iteration   1: 6814652.530 ops/s
Iteration   2: 6824497.436 ops/s
Iteration   3: 6828802.676 ops/s
Iteration   4: 6837557.718 ops/s
Iteration   5: 6801776.721 ops/s
Iteration   6: 6801961.935 ops/s
Iteration   7: 6801628.766 ops/s
Iteration   8: 6838029.372 ops/s
Iteration   9: 6842425.134 ops/s
Iteration  10: 6831457.234 ops/s
Iteration  11: 6795391.246 ops/s
Iteration  12: 6792117.773 ops/s
Iteration  13: 6811611.074 ops/s
Iteration  14: 6876903.224 ops/s
Iteration  15: 6837153.626 ops/s
Iteration  16: 6806358.225 ops/s
Iteration  17: 6790286.233 ops/s
Iteration  18: 6798500.105 ops/s
Iteration  19: 6790668.730 ops/s
Iteration  20: 6854869.313 ops/s
Iteration  21: 6855387.720 ops/s
Iteration  22: 6809486.589 ops/s
Iteration  23: 6801631.706 ops/s
Iteration  24: 6760332.763 ops/s
Iteration  25: 6788148.598 ops/s
Iteration  26: 6836444.533 ops/s
Iteration  27: 6839121.570 ops/s
Iteration  28: 6819067.751 ops/s
Iteration  29: 6825991.700 ops/s
Iteration  30: 6827279.504 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithVarArgs":
  6817984.717 ±(99.9%) 16580.591 ops/s [Average]
  (min, avg, max) = (6760332.763, 6817984.717, 6876903.224), stdev = 24817.050
  CI (99.9%): [6801404.126, 6834565.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  6817984.717 ± 16580.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3893081.665 ops/s
# Warmup Iteration   2: 6574166.829 ops/s
# Warmup Iteration   3: 7727653.411 ops/s
# Warmup Iteration   4: 7741174.405 ops/s
# Warmup Iteration   5: 7734198.281 ops/s
# Warmup Iteration   6: 7754730.019 ops/s
# Warmup Iteration   7: 7694126.844 ops/s
# Warmup Iteration   8: 7688242.367 ops/s
# Warmup Iteration   9: 7688466.016 ops/s
# Warmup Iteration  10: 7716232.279 ops/s
# Warmup Iteration  11: 7702682.122 ops/s
# Warmup Iteration  12: 7733298.333 ops/s
# Warmup Iteration  13: 7750205.529 ops/s
# Warmup Iteration  14: 7769436.070 ops/s
# Warmup Iteration  15: 7781257.067 ops/s
# Warmup Iteration  16: 7700954.581 ops/s
# Warmup Iteration  17: 7693171.547 ops/s
# Warmup Iteration  18: 7734392.408 ops/s
# Warmup Iteration  19: 7734588.982 ops/s
# Warmup Iteration  20: 7772138.634 ops/s
# Warmup Iteration  21: 7753314.045 ops/s
# Warmup Iteration  22: 7726929.054 ops/s
# Warmup Iteration  23: 7739486.777 ops/s
# Warmup Iteration  24: 7717576.799 ops/s
# Warmup Iteration  25: 7761256.512 ops/s
# Warmup Iteration  26: 7744579.205 ops/s
# Warmup Iteration  27: 7729524.500 ops/s
# Warmup Iteration  28: 7710665.845 ops/s
# Warmup Iteration  29: 7695954.010 ops/s
# Warmup Iteration  30: 7731993.125 ops/s
Iteration   1: 7781255.040 ops/s
Iteration   2: 7731760.334 ops/s
Iteration   3: 7716468.473 ops/s
Iteration   4: 7719509.438 ops/s
Iteration   5: 7739211.652 ops/s
Iteration   6: 7697645.127 ops/s
Iteration   7: 7713996.268 ops/s
Iteration   8: 7769052.982 ops/s
Iteration   9: 7553964.075 ops/s
Iteration  10: 7744940.566 ops/s
Iteration  11: 7728652.641 ops/s
Iteration  12: 7708362.316 ops/s
Iteration  13: 7717110.386 ops/s
Iteration  14: 7710142.372 ops/s
Iteration  15: 7701417.403 ops/s
Iteration  16: 7737255.967 ops/s
Iteration  17: 7741066.286 ops/s
Iteration  18: 7705578.030 ops/s
Iteration  19: 7671783.782 ops/s
Iteration  20: 7677446.623 ops/s
Iteration  21: 7701024.314 ops/s
Iteration  22: 7750889.681 ops/s
Iteration  23: 7705798.422 ops/s
Iteration  24: 7714183.305 ops/s
Iteration  25: 7704844.099 ops/s
Iteration  26: 7690166.497 ops/s
Iteration  27: 7711156.697 ops/s
Iteration  28: 7689578.685 ops/s
Iteration  29: 7702545.957 ops/s
Iteration  30: 7695143.321 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWith":
  7711065.025 ±(99.9%) 25831.595 ops/s [Average]
  (min, avg, max) = (7553964.075, 7711065.025, 7781255.040), stdev = 38663.518
  CI (99.9%): [7685233.430, 7736896.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewWithWith  thrpt   30  7711065.025 ± 25831.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3650817.151 ops/s
# Warmup Iteration   2: 6379129.645 ops/s
# Warmup Iteration   3: 7157426.284 ops/s
# Warmup Iteration   4: 7382737.914 ops/s
# Warmup Iteration   5: 7408615.246 ops/s
# Warmup Iteration   6: 7367224.519 ops/s
# Warmup Iteration   7: 7381935.322 ops/s
# Warmup Iteration   8: 7402971.095 ops/s
# Warmup Iteration   9: 7381029.965 ops/s
# Warmup Iteration  10: 7399670.672 ops/s
# Warmup Iteration  11: 7394454.753 ops/s
# Warmup Iteration  12: 7413468.581 ops/s
# Warmup Iteration  13: 7357311.625 ops/s
# Warmup Iteration  14: 7360790.479 ops/s
# Warmup Iteration  15: 7369104.897 ops/s
# Warmup Iteration  16: 7391839.085 ops/s
# Warmup Iteration  17: 7399999.981 ops/s
# Warmup Iteration  18: 7403415.055 ops/s
# Warmup Iteration  19: 7367285.229 ops/s
# Warmup Iteration  20: 7373928.164 ops/s
# Warmup Iteration  21: 7415605.937 ops/s
# Warmup Iteration  22: 7397331.565 ops/s
# Warmup Iteration  23: 7398622.134 ops/s
# Warmup Iteration  24: 7367164.158 ops/s
# Warmup Iteration  25: 7416884.471 ops/s
# Warmup Iteration  26: 7375447.051 ops/s
# Warmup Iteration  27: 7406094.617 ops/s
# Warmup Iteration  28: 7410989.286 ops/s
# Warmup Iteration  29: 7377448.091 ops/s
# Warmup Iteration  30: 7398755.939 ops/s
Iteration   1: 7388768.503 ops/s
Iteration   2: 7352215.668 ops/s
Iteration   3: 7395542.865 ops/s
Iteration   4: 7389788.797 ops/s
Iteration   5: 7384613.556 ops/s
Iteration   6: 7405412.832 ops/s
Iteration   7: 7389466.822 ops/s
Iteration   8: 7404349.995 ops/s
Iteration   9: 7442086.343 ops/s
Iteration  10: 7383600.310 ops/s
Iteration  11: 7381683.524 ops/s
Iteration  12: 7393016.857 ops/s
Iteration  13: 7368499.738 ops/s
Iteration  14: 7416307.719 ops/s
Iteration  15: 7420550.092 ops/s
Iteration  16: 7396024.085 ops/s
Iteration  17: 7398903.459 ops/s
Iteration  18: 7395383.023 ops/s
Iteration  19: 7409318.530 ops/s
Iteration  20: 7364510.930 ops/s
Iteration  21: 7405262.472 ops/s
Iteration  22: 7415928.104 ops/s
Iteration  23: 7393370.678 ops/s
Iteration  24: 7338433.144 ops/s
Iteration  25: 7402001.488 ops/s
Iteration  26: 7427688.855 ops/s
Iteration  27: 7414476.789 ops/s
Iteration  28: 7368118.392 ops/s
Iteration  29: 7406303.370 ops/s
Iteration  30: 7368578.659 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testNewWithWithWith":
  7394006.853 ±(99.9%) 14929.754 ops/s [Average]
  (min, avg, max) = (7338433.144, 7394006.853, 7442086.343), stdev = 22346.155
  CI (99.9%): [7379077.099, 7408936.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  7394006.853 ± 14929.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1889818.068 ops/s
# Warmup Iteration   2: 4068047.067 ops/s
# Warmup Iteration   3: 3456625.284 ops/s
# Warmup Iteration   4: 4066486.258 ops/s
# Warmup Iteration   5: 4092546.507 ops/s
# Warmup Iteration   6: 4088844.425 ops/s
# Warmup Iteration   7: 4088808.604 ops/s
# Warmup Iteration   8: 4091460.653 ops/s
# Warmup Iteration   9: 4084745.368 ops/s
# Warmup Iteration  10: 4083368.380 ops/s
# Warmup Iteration  11: 4087631.818 ops/s
# Warmup Iteration  12: 4075619.991 ops/s
# Warmup Iteration  13: 4088332.016 ops/s
# Warmup Iteration  14: 4098810.354 ops/s
# Warmup Iteration  15: 4089202.902 ops/s
# Warmup Iteration  16: 4087802.015 ops/s
# Warmup Iteration  17: 4070257.379 ops/s
# Warmup Iteration  18: 4083075.134 ops/s
# Warmup Iteration  19: 4104713.688 ops/s
# Warmup Iteration  20: 4096617.403 ops/s
# Warmup Iteration  21: 4103465.978 ops/s
# Warmup Iteration  22: 4096289.754 ops/s
# Warmup Iteration  23: 4084583.203 ops/s
# Warmup Iteration  24: 4087854.303 ops/s
# Warmup Iteration  25: 4094150.783 ops/s
# Warmup Iteration  26: 4096248.311 ops/s
# Warmup Iteration  27: 4100250.663 ops/s
# Warmup Iteration  28: 4101080.746 ops/s
# Warmup Iteration  29: 4097181.333 ops/s
# Warmup Iteration  30: 4114983.308 ops/s
Iteration   1: 4091581.765 ops/s
Iteration   2: 4101529.065 ops/s
Iteration   3: 4084154.667 ops/s
Iteration   4: 4090474.752 ops/s
Iteration   5: 4095039.916 ops/s
Iteration   6: 4092936.600 ops/s
Iteration   7: 4102898.257 ops/s
Iteration   8: 4095714.026 ops/s
Iteration   9: 4099372.488 ops/s
Iteration  10: 4081974.456 ops/s
Iteration  11: 4096030.138 ops/s
Iteration  12: 4111217.494 ops/s
Iteration  13: 4092240.402 ops/s
Iteration  14: 4085328.005 ops/s
Iteration  15: 4091630.437 ops/s
Iteration  16: 4097939.261 ops/s
Iteration  17: 4098955.997 ops/s
Iteration  18: 4103831.670 ops/s
Iteration  19: 4083556.681 ops/s
Iteration  20: 4074739.868 ops/s
Iteration  21: 4051963.791 ops/s
Iteration  22: 4097434.583 ops/s
Iteration  23: 4102322.438 ops/s
Iteration  24: 4102864.329 ops/s
Iteration  25: 4088296.528 ops/s
Iteration  26: 4100762.872 ops/s
Iteration  27: 4096735.720 ops/s
Iteration  28: 4103428.848 ops/s
Iteration  29: 4097389.887 ops/s
Iteration  30: 4087763.132 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_testToString":
  4093336.936 ±(99.9%) 7412.292 ops/s [Average]
  (min, avg, max) = (4051963.791, 4093336.936, 4111217.494), stdev = 11094.370
  CI (99.9%): [4085924.644, 4100749.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_testToString  thrpt   30  4093336.936 ± 7412.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3680221.940 ops/s
# Warmup Iteration   2: 6652601.956 ops/s
# Warmup Iteration   3: 7281973.322 ops/s
# Warmup Iteration   4: 7544242.769 ops/s
# Warmup Iteration   5: 7565980.694 ops/s
# Warmup Iteration   6: 7560604.900 ops/s
# Warmup Iteration   7: 7579946.827 ops/s
# Warmup Iteration   8: 7599364.614 ops/s
# Warmup Iteration   9: 7565823.110 ops/s
# Warmup Iteration  10: 7595706.058 ops/s
# Warmup Iteration  11: 7545520.663 ops/s
# Warmup Iteration  12: 7548821.727 ops/s
# Warmup Iteration  13: 7601772.158 ops/s
# Warmup Iteration  14: 7525603.111 ops/s
# Warmup Iteration  15: 7547486.100 ops/s
# Warmup Iteration  16: 7589914.237 ops/s
# Warmup Iteration  17: 7534103.517 ops/s
# Warmup Iteration  18: 7548294.611 ops/s
# Warmup Iteration  19: 7540150.985 ops/s
# Warmup Iteration  20: 7568526.743 ops/s
# Warmup Iteration  21: 7590026.845 ops/s
# Warmup Iteration  22: 7587327.548 ops/s
# Warmup Iteration  23: 7572223.657 ops/s
# Warmup Iteration  24: 7553338.764 ops/s
# Warmup Iteration  25: 7578263.624 ops/s
# Warmup Iteration  26: 7598889.433 ops/s
# Warmup Iteration  27: 7578022.674 ops/s
# Warmup Iteration  28: 7583465.826 ops/s
# Warmup Iteration  29: 7548981.515 ops/s
# Warmup Iteration  30: 7562409.453 ops/s
Iteration   1: 7618987.924 ops/s
Iteration   2: 7542536.202 ops/s
Iteration   3: 7601924.987 ops/s
Iteration   4: 7616649.656 ops/s
Iteration   5: 7592512.050 ops/s
Iteration   6: 7592756.134 ops/s
Iteration   7: 7521336.626 ops/s
Iteration   8: 7569604.295 ops/s
Iteration   9: 7559953.186 ops/s
Iteration  10: 7511343.554 ops/s
Iteration  11: 7527495.213 ops/s
Iteration  12: 7571702.425 ops/s
Iteration  13: 7556956.016 ops/s
Iteration  14: 7573992.628 ops/s
Iteration  15: 7591151.240 ops/s
Iteration  16: 7619682.788 ops/s
Iteration  17: 7593996.134 ops/s
Iteration  18: 7566092.072 ops/s
Iteration  19: 7545658.678 ops/s
Iteration  20: 7539443.794 ops/s
Iteration  21: 7581138.844 ops/s
Iteration  22: 7599842.804 ops/s
Iteration  23: 7579423.554 ops/s
Iteration  24: 7580163.251 ops/s
Iteration  25: 7582507.869 ops/s
Iteration  26: 7579670.559 ops/s
Iteration  27: 7580041.000 ops/s
Iteration  28: 7521702.476 ops/s
Iteration  29: 7525798.287 ops/s
Iteration  30: 7539357.464 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toArray":
  7569447.390 ±(99.9%) 20418.612 ops/s [Average]
  (min, avg, max) = (7511343.554, 7569447.390, 7619682.788), stdev = 30561.619
  CI (99.9%): [7549028.779, 7589866.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toArray  thrpt   30  7569447.390 ± 20418.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1087683.222 ops/s
# Warmup Iteration   2: 1796849.458 ops/s
# Warmup Iteration   3: 2109283.744 ops/s
# Warmup Iteration   4: 2124775.612 ops/s
# Warmup Iteration   5: 2109000.246 ops/s
# Warmup Iteration   6: 1761964.524 ops/s
# Warmup Iteration   7: 2096889.166 ops/s
# Warmup Iteration   8: 2119576.936 ops/s
# Warmup Iteration   9: 2122318.827 ops/s
# Warmup Iteration  10: 2125802.811 ops/s
# Warmup Iteration  11: 2119534.259 ops/s
# Warmup Iteration  12: 2123268.161 ops/s
# Warmup Iteration  13: 2120339.172 ops/s
# Warmup Iteration  14: 2121740.669 ops/s
# Warmup Iteration  15: 2124156.261 ops/s
# Warmup Iteration  16: 2121795.195 ops/s
# Warmup Iteration  17: 2125608.182 ops/s
# Warmup Iteration  18: 2125988.934 ops/s
# Warmup Iteration  19: 2124863.032 ops/s
# Warmup Iteration  20: 2122091.326 ops/s
# Warmup Iteration  21: 2126182.662 ops/s
# Warmup Iteration  22: 2123187.629 ops/s
# Warmup Iteration  23: 2123838.091 ops/s
# Warmup Iteration  24: 2121744.763 ops/s
# Warmup Iteration  25: 2123626.855 ops/s
# Warmup Iteration  26: 2126020.803 ops/s
# Warmup Iteration  27: 2123677.022 ops/s
# Warmup Iteration  28: 2125135.449 ops/s
# Warmup Iteration  29: 2125170.935 ops/s
# Warmup Iteration  30: 2123833.905 ops/s
Iteration   1: 2128151.701 ops/s
Iteration   2: 2124827.902 ops/s
Iteration   3: 2126369.937 ops/s
Iteration   4: 2123294.922 ops/s
Iteration   5: 2125994.541 ops/s
Iteration   6: 2121730.477 ops/s
Iteration   7: 2121107.308 ops/s
Iteration   8: 2119846.303 ops/s
Iteration   9: 2125447.731 ops/s
Iteration  10: 2124273.022 ops/s
Iteration  11: 2127552.218 ops/s
Iteration  12: 2125256.593 ops/s
Iteration  13: 2125350.410 ops/s
Iteration  14: 2119679.107 ops/s
Iteration  15: 2122651.901 ops/s
Iteration  16: 2123177.741 ops/s
Iteration  17: 2123486.684 ops/s
Iteration  18: 2126845.172 ops/s
Iteration  19: 2118977.734 ops/s
Iteration  20: 2119503.700 ops/s
Iteration  21: 2114106.278 ops/s
Iteration  22: 2126492.130 ops/s
Iteration  23: 2123005.507 ops/s
Iteration  24: 2129579.391 ops/s
Iteration  25: 2125077.243 ops/s
Iteration  26: 2129746.793 ops/s
Iteration  27: 2121295.476 ops/s
Iteration  28: 2123056.567 ops/s
Iteration  29: 2119284.702 ops/s
Iteration  30: 2125869.495 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBag":
  2123701.290 ±(99.9%) 2332.948 ops/s [Average]
  (min, avg, max) = (2114106.278, 2123701.290, 2129746.793), stdev = 3491.847
  CI (99.9%): [2121368.342, 2126034.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toBag  thrpt   30  2123701.290 ± 2332.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 106957.076 ops/s
# Warmup Iteration   2: 154190.305 ops/s
# Warmup Iteration   3: 190262.045 ops/s
# Warmup Iteration   4: 189463.831 ops/s
# Warmup Iteration   5: 190106.596 ops/s
# Warmup Iteration   6: 189917.617 ops/s
# Warmup Iteration   7: 179553.546 ops/s
# Warmup Iteration   8: 169156.254 ops/s
# Warmup Iteration   9: 189935.216 ops/s
# Warmup Iteration  10: 189623.713 ops/s
# Warmup Iteration  11: 190183.062 ops/s
# Warmup Iteration  12: 190559.112 ops/s
# Warmup Iteration  13: 186042.652 ops/s
# Warmup Iteration  14: 190176.271 ops/s
# Warmup Iteration  15: 190378.842 ops/s
# Warmup Iteration  16: 190558.339 ops/s
# Warmup Iteration  17: 196642.045 ops/s
# Warmup Iteration  18: 197185.700 ops/s
# Warmup Iteration  19: 196785.102 ops/s
# Warmup Iteration  20: 196732.421 ops/s
# Warmup Iteration  21: 196533.718 ops/s
# Warmup Iteration  22: 196630.182 ops/s
# Warmup Iteration  23: 196520.687 ops/s
# Warmup Iteration  24: 196547.250 ops/s
# Warmup Iteration  25: 196878.084 ops/s
# Warmup Iteration  26: 196147.789 ops/s
# Warmup Iteration  27: 196773.871 ops/s
# Warmup Iteration  28: 195817.650 ops/s
# Warmup Iteration  29: 196852.965 ops/s
# Warmup Iteration  30: 196603.156 ops/s
Iteration   1: 196324.076 ops/s
Iteration   2: 195829.470 ops/s
Iteration   3: 196769.553 ops/s
Iteration   4: 196243.183 ops/s
Iteration   5: 196481.352 ops/s
Iteration   6: 196516.193 ops/s
Iteration   7: 196038.211 ops/s
Iteration   8: 196751.183 ops/s
Iteration   9: 196104.226 ops/s
Iteration  10: 196688.114 ops/s
Iteration  11: 196161.459 ops/s
Iteration  12: 196334.153 ops/s
Iteration  13: 195743.283 ops/s
Iteration  14: 195472.225 ops/s
Iteration  15: 196572.641 ops/s
Iteration  16: 196143.878 ops/s
Iteration  17: 197578.231 ops/s
Iteration  18: 196220.665 ops/s
Iteration  19: 197050.862 ops/s
Iteration  20: 197234.236 ops/s
Iteration  21: 196961.588 ops/s
Iteration  22: 197343.728 ops/s
Iteration  23: 196184.761 ops/s
Iteration  24: 197227.824 ops/s
Iteration  25: 195834.533 ops/s
Iteration  26: 196653.192 ops/s
Iteration  27: 196713.612 ops/s
Iteration  28: 196781.697 ops/s
Iteration  29: 196598.591 ops/s
Iteration  30: 196853.596 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toBiMap":
  196513.677 ±(99.9%) 336.328 ops/s [Average]
  (min, avg, max) = (195472.225, 196513.677, 197578.231), stdev = 503.400
  CI (99.9%): [196177.349, 196850.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_toBiMap  thrpt   30  196513.677 ± 336.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4422740.115 ops/s
# Warmup Iteration   2: 9885844.277 ops/s
# Warmup Iteration   3: 8597860.796 ops/s
# Warmup Iteration   4: 10235764.929 ops/s
# Warmup Iteration   5: 10302113.987 ops/s
# Warmup Iteration   6: 10293032.459 ops/s
# Warmup Iteration   7: 10285062.431 ops/s
# Warmup Iteration   8: 10276252.042 ops/s
# Warmup Iteration   9: 10309836.253 ops/s
# Warmup Iteration  10: 10281896.490 ops/s
# Warmup Iteration  11: 10302713.455 ops/s
# Warmup Iteration  12: 10277892.055 ops/s
# Warmup Iteration  13: 10331649.574 ops/s
# Warmup Iteration  14: 10301380.142 ops/s
# Warmup Iteration  15: 10273661.178 ops/s
# Warmup Iteration  16: 10283903.945 ops/s
# Warmup Iteration  17: 10316628.579 ops/s
# Warmup Iteration  18: 10335232.559 ops/s
# Warmup Iteration  19: 10348625.911 ops/s
# Warmup Iteration  20: 10353081.235 ops/s
# Warmup Iteration  21: 10335108.281 ops/s
# Warmup Iteration  22: 10344243.626 ops/s
# Warmup Iteration  23: 10327933.415 ops/s
# Warmup Iteration  24: 10332165.674 ops/s
# Warmup Iteration  25: 10331721.315 ops/s
# Warmup Iteration  26: 10319123.049 ops/s
# Warmup Iteration  27: 10336250.670 ops/s
# Warmup Iteration  28: 10304447.112 ops/s
# Warmup Iteration  29: 10301112.663 ops/s
# Warmup Iteration  30: 10325671.254 ops/s
Iteration   1: 10337827.269 ops/s
Iteration   2: 10337125.614 ops/s
Iteration   3: 10303049.572 ops/s
Iteration   4: 10395694.286 ops/s
Iteration   5: 10291495.955 ops/s
Iteration   6: 10394659.270 ops/s
Iteration   7: 10313275.694 ops/s
Iteration   8: 10322009.036 ops/s
Iteration   9: 10347560.845 ops/s
Iteration  10: 10294967.552 ops/s
Iteration  11: 10376118.063 ops/s
Iteration  12: 10339178.841 ops/s
Iteration  13: 10358090.810 ops/s
Iteration  14: 10319027.828 ops/s
Iteration  15: 10322029.822 ops/s
Iteration  16: 10368680.616 ops/s
Iteration  17: 10300544.884 ops/s
Iteration  18: 10372909.429 ops/s
Iteration  19: 10334439.026 ops/s
Iteration  20: 10328176.332 ops/s
Iteration  21: 10333114.150 ops/s
Iteration  22: 10300291.889 ops/s
Iteration  23: 10369658.428 ops/s
Iteration  24: 10302331.495 ops/s
Iteration  25: 10364279.131 ops/s
Iteration  26: 10338973.013 ops/s
Iteration  27: 10293880.586 ops/s
Iteration  28: 10351262.449 ops/s
Iteration  29: 10306915.564 ops/s
Iteration  30: 10365748.829 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toCollection":
  10336110.543 ±(99.9%) 20402.061 ops/s [Average]
  (min, avg, max) = (10291495.955, 10336110.543, 10395694.286), stdev = 30536.846
  CI (99.9%): [10315708.482, 10356512.603] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toCollection  thrpt   30  10336110.543 ± 20402.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4993251.319 ops/s
# Warmup Iteration   2: 10781861.043 ops/s
# Warmup Iteration   3: 10950626.568 ops/s
# Warmup Iteration   4: 9916443.046 ops/s
# Warmup Iteration   5: 10216562.882 ops/s
# Warmup Iteration   6: 10977493.392 ops/s
# Warmup Iteration   7: 10943892.129 ops/s
# Warmup Iteration   8: 10963959.012 ops/s
# Warmup Iteration   9: 10971620.802 ops/s
# Warmup Iteration  10: 10976143.931 ops/s
# Warmup Iteration  11: 10985565.629 ops/s
# Warmup Iteration  12: 10967688.684 ops/s
# Warmup Iteration  13: 10980696.979 ops/s
# Warmup Iteration  14: 10975347.955 ops/s
# Warmup Iteration  15: 10973479.426 ops/s
# Warmup Iteration  16: 10976128.874 ops/s
# Warmup Iteration  17: 10844166.092 ops/s
# Warmup Iteration  18: 10824438.365 ops/s
# Warmup Iteration  19: 10855490.799 ops/s
# Warmup Iteration  20: 10853008.133 ops/s
# Warmup Iteration  21: 10859544.584 ops/s
# Warmup Iteration  22: 10844586.730 ops/s
# Warmup Iteration  23: 10852160.070 ops/s
# Warmup Iteration  24: 10864514.578 ops/s
# Warmup Iteration  25: 10854839.447 ops/s
# Warmup Iteration  26: 10857243.593 ops/s
# Warmup Iteration  27: 10855657.532 ops/s
# Warmup Iteration  28: 10855100.714 ops/s
# Warmup Iteration  29: 10846207.572 ops/s
# Warmup Iteration  30: 10847286.112 ops/s
Iteration   1: 10864654.849 ops/s
Iteration   2: 10821619.638 ops/s
Iteration   3: 10830257.403 ops/s
Iteration   4: 10862313.561 ops/s
Iteration   5: 10866502.612 ops/s
Iteration   6: 10864314.243 ops/s
Iteration   7: 10857298.255 ops/s
Iteration   8: 10853207.011 ops/s
Iteration   9: 10848652.588 ops/s
Iteration  10: 10873630.918 ops/s
Iteration  11: 10857234.132 ops/s
Iteration  12: 10843360.224 ops/s
Iteration  13: 10850419.954 ops/s
Iteration  14: 10830718.944 ops/s
Iteration  15: 10855766.776 ops/s
Iteration  16: 10848225.879 ops/s
Iteration  17: 10847031.937 ops/s
Iteration  18: 10837386.234 ops/s
Iteration  19: 10817627.680 ops/s
Iteration  20: 10862606.749 ops/s
Iteration  21: 10841109.300 ops/s
Iteration  22: 10861195.674 ops/s
Iteration  23: 10846171.881 ops/s
Iteration  24: 10848774.726 ops/s
Iteration  25: 10868505.230 ops/s
Iteration  26: 10834630.687 ops/s
Iteration  27: 10856011.972 ops/s
Iteration  28: 10852024.591 ops/s
Iteration  29: 10862211.120 ops/s
Iteration  30: 10854873.468 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutable":
  10850611.274 ±(99.9%) 9237.081 ops/s [Average]
  (min, avg, max) = (10817627.680, 10850611.274, 10873630.918), stdev = 13825.629
  CI (99.9%): [10841374.194, 10859848.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutable  thrpt   30  10850611.274 ± 9237.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655181.402 ops/s
# Warmup Iteration   2: 1246407.238 ops/s
# Warmup Iteration   3: 1445824.305 ops/s
# Warmup Iteration   4: 1442416.686 ops/s
# Warmup Iteration   5: 1402568.146 ops/s
# Warmup Iteration   6: 1217602.903 ops/s
# Warmup Iteration   7: 1444046.906 ops/s
# Warmup Iteration   8: 1446612.779 ops/s
# Warmup Iteration   9: 1446656.369 ops/s
# Warmup Iteration  10: 1445782.334 ops/s
# Warmup Iteration  11: 1444846.628 ops/s
# Warmup Iteration  12: 1445694.038 ops/s
# Warmup Iteration  13: 1447453.235 ops/s
# Warmup Iteration  14: 1444206.016 ops/s
# Warmup Iteration  15: 1440146.770 ops/s
# Warmup Iteration  16: 1442887.269 ops/s
# Warmup Iteration  17: 1426056.997 ops/s
# Warmup Iteration  18: 1417696.269 ops/s
# Warmup Iteration  19: 1411241.720 ops/s
# Warmup Iteration  20: 1417596.244 ops/s
# Warmup Iteration  21: 1421653.194 ops/s
# Warmup Iteration  22: 1427547.820 ops/s
# Warmup Iteration  23: 1427287.199 ops/s
# Warmup Iteration  24: 1426733.046 ops/s
# Warmup Iteration  25: 1426283.760 ops/s
# Warmup Iteration  26: 1423220.372 ops/s
# Warmup Iteration  27: 1426844.934 ops/s
# Warmup Iteration  28: 1426436.760 ops/s
# Warmup Iteration  29: 1425610.636 ops/s
# Warmup Iteration  30: 1423480.674 ops/s
Iteration   1: 1425219.624 ops/s
Iteration   2: 1421207.218 ops/s
Iteration   3: 1426242.661 ops/s
Iteration   4: 1423693.498 ops/s
Iteration   5: 1427724.450 ops/s
Iteration   6: 1422051.794 ops/s
Iteration   7: 1422142.612 ops/s
Iteration   8: 1427105.200 ops/s
Iteration   9: 1420967.808 ops/s
Iteration  10: 1424495.922 ops/s
Iteration  11: 1423567.371 ops/s
Iteration  12: 1424939.651 ops/s
Iteration  13: 1426641.274 ops/s
Iteration  14: 1423661.787 ops/s
Iteration  15: 1424617.034 ops/s
Iteration  16: 1423508.734 ops/s
Iteration  17: 1424800.685 ops/s
Iteration  18: 1428300.556 ops/s
Iteration  19: 1425020.144 ops/s
Iteration  20: 1426812.089 ops/s
Iteration  21: 1423791.196 ops/s
Iteration  22: 1423960.080 ops/s
Iteration  23: 1420228.407 ops/s
Iteration  24: 1421441.237 ops/s
Iteration  25: 1429042.822 ops/s
Iteration  26: 1422827.822 ops/s
Iteration  27: 1424056.092 ops/s
Iteration  28: 1426460.081 ops/s
Iteration  29: 1426485.042 ops/s
Iteration  30: 1428225.275 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBag":
  1424641.272 ±(99.9%) 1553.769 ops/s [Average]
  (min, avg, max) = (1420228.407, 1424641.272, 1429042.822), stdev = 2325.609
  CI (99.9%): [1423087.503, 1426195.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1424641.272 ± 1553.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92397.108 ops/s
# Warmup Iteration   2: 127059.143 ops/s
# Warmup Iteration   3: 159756.111 ops/s
# Warmup Iteration   4: 158257.450 ops/s
# Warmup Iteration   5: 158913.303 ops/s
# Warmup Iteration   6: 159074.103 ops/s
# Warmup Iteration   7: 159000.587 ops/s
# Warmup Iteration   8: 133427.442 ops/s
# Warmup Iteration   9: 159626.698 ops/s
# Warmup Iteration  10: 157722.344 ops/s
# Warmup Iteration  11: 159347.790 ops/s
# Warmup Iteration  12: 159093.117 ops/s
# Warmup Iteration  13: 159379.414 ops/s
# Warmup Iteration  14: 159182.639 ops/s
# Warmup Iteration  15: 158854.488 ops/s
# Warmup Iteration  16: 158922.876 ops/s
# Warmup Iteration  17: 163629.621 ops/s
# Warmup Iteration  18: 163829.656 ops/s
# Warmup Iteration  19: 163196.948 ops/s
# Warmup Iteration  20: 163331.756 ops/s
# Warmup Iteration  21: 163094.794 ops/s
# Warmup Iteration  22: 162944.512 ops/s
# Warmup Iteration  23: 163506.508 ops/s
# Warmup Iteration  24: 163329.809 ops/s
# Warmup Iteration  25: 163389.680 ops/s
# Warmup Iteration  26: 163198.583 ops/s
# Warmup Iteration  27: 163566.325 ops/s
# Warmup Iteration  28: 163787.510 ops/s
# Warmup Iteration  29: 163598.186 ops/s
# Warmup Iteration  30: 163847.631 ops/s
Iteration   1: 163802.149 ops/s
Iteration   2: 164631.614 ops/s
Iteration   3: 165159.557 ops/s
Iteration   4: 164322.289 ops/s
Iteration   5: 163587.511 ops/s
Iteration   6: 163953.150 ops/s
Iteration   7: 163249.671 ops/s
Iteration   8: 163485.742 ops/s
Iteration   9: 163272.819 ops/s
Iteration  10: 163915.903 ops/s
Iteration  11: 163384.229 ops/s
Iteration  12: 164927.883 ops/s
Iteration  13: 166109.494 ops/s
Iteration  14: 163999.644 ops/s
Iteration  15: 163822.256 ops/s
Iteration  16: 163701.252 ops/s
Iteration  17: 163466.614 ops/s
Iteration  18: 163817.076 ops/s
Iteration  19: 163439.843 ops/s
Iteration  20: 163936.845 ops/s
Iteration  21: 163206.333 ops/s
Iteration  22: 163574.141 ops/s
Iteration  23: 163955.818 ops/s
Iteration  24: 163877.244 ops/s
Iteration  25: 163762.763 ops/s
Iteration  26: 163811.465 ops/s
Iteration  27: 162972.066 ops/s
Iteration  28: 164114.232 ops/s
Iteration  29: 163763.880 ops/s
Iteration  30: 164337.463 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableBiMap":
  163912.031 ±(99.9%) 426.109 ops/s [Average]
  (min, avg, max) = (162972.066, 163912.031, 166109.494), stdev = 637.780
  CI (99.9%): [163485.922, 164338.141] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  163912.031 ± 426.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2655934.026 ops/s
# Warmup Iteration   2: 6346490.363 ops/s
# Warmup Iteration   3: 6127109.967 ops/s
# Warmup Iteration   4: 5647437.422 ops/s
# Warmup Iteration   5: 6423263.623 ops/s
# Warmup Iteration   6: 6424410.356 ops/s
# Warmup Iteration   7: 6430891.155 ops/s
# Warmup Iteration   8: 6422026.208 ops/s
# Warmup Iteration   9: 6429854.262 ops/s
# Warmup Iteration  10: 6402803.495 ops/s
# Warmup Iteration  11: 6412029.376 ops/s
# Warmup Iteration  12: 6420981.067 ops/s
# Warmup Iteration  13: 6415748.608 ops/s
# Warmup Iteration  14: 6432070.155 ops/s
# Warmup Iteration  15: 6384260.433 ops/s
# Warmup Iteration  16: 6421277.018 ops/s
# Warmup Iteration  17: 6410004.128 ops/s
# Warmup Iteration  18: 6415403.545 ops/s
# Warmup Iteration  19: 6423668.992 ops/s
# Warmup Iteration  20: 6424302.285 ops/s
# Warmup Iteration  21: 6423989.563 ops/s
# Warmup Iteration  22: 6428265.096 ops/s
# Warmup Iteration  23: 6414714.887 ops/s
# Warmup Iteration  24: 6434715.789 ops/s
# Warmup Iteration  25: 6427240.628 ops/s
# Warmup Iteration  26: 6413519.138 ops/s
# Warmup Iteration  27: 6422437.571 ops/s
# Warmup Iteration  28: 6429752.168 ops/s
# Warmup Iteration  29: 6430626.700 ops/s
# Warmup Iteration  30: 6424815.056 ops/s
Iteration   1: 6423480.513 ops/s
Iteration   2: 6423536.934 ops/s
Iteration   3: 6417713.288 ops/s
Iteration   4: 6434522.596 ops/s
Iteration   5: 6415934.472 ops/s
Iteration   6: 6423536.355 ops/s
Iteration   7: 6427225.242 ops/s
Iteration   8: 6416551.170 ops/s
Iteration   9: 6423921.561 ops/s
Iteration  10: 6408857.941 ops/s
Iteration  11: 6400159.516 ops/s
Iteration  12: 6406081.765 ops/s
Iteration  13: 6422239.875 ops/s
Iteration  14: 6426732.704 ops/s
Iteration  15: 6423064.832 ops/s
Iteration  16: 6420706.430 ops/s
Iteration  17: 6421022.058 ops/s
Iteration  18: 6423374.134 ops/s
Iteration  19: 6420379.089 ops/s
Iteration  20: 6415531.423 ops/s
Iteration  21: 6377615.533 ops/s
Iteration  22: 6385777.118 ops/s
Iteration  23: 6378535.373 ops/s
Iteration  24: 6379166.862 ops/s
Iteration  25: 6387981.879 ops/s
Iteration  26: 6387908.811 ops/s
Iteration  27: 6415003.063 ops/s
Iteration  28: 6410256.891 ops/s
Iteration  29: 6376419.405 ops/s
Iteration  30: 6371139.954 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableList":
  6408812.559 ±(99.9%) 12538.946 ops/s [Average]
  (min, avg, max) = (6371139.954, 6408812.559, 6434522.596), stdev = 18767.706
  CI (99.9%): [6396273.613, 6421351.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableList  thrpt   30  6408812.559 ± 12538.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1086097.770 ops/s
# Warmup Iteration   2: 2653390.251 ops/s
# Warmup Iteration   3: 2222646.372 ops/s
# Warmup Iteration   4: 2670798.390 ops/s
# Warmup Iteration   5: 2675046.010 ops/s
# Warmup Iteration   6: 2674619.671 ops/s
# Warmup Iteration   7: 2674094.411 ops/s
# Warmup Iteration   8: 2687118.907 ops/s
# Warmup Iteration   9: 2682883.244 ops/s
# Warmup Iteration  10: 2677180.323 ops/s
# Warmup Iteration  11: 2677013.666 ops/s
# Warmup Iteration  12: 2665828.027 ops/s
# Warmup Iteration  13: 2684510.084 ops/s
# Warmup Iteration  14: 2670604.324 ops/s
# Warmup Iteration  15: 2674161.972 ops/s
# Warmup Iteration  16: 2669321.456 ops/s
# Warmup Iteration  17: 2667347.544 ops/s
# Warmup Iteration  18: 2678241.953 ops/s
# Warmup Iteration  19: 2658529.084 ops/s
# Warmup Iteration  20: 2686268.455 ops/s
# Warmup Iteration  21: 2681148.724 ops/s
# Warmup Iteration  22: 2670044.896 ops/s
# Warmup Iteration  23: 2676849.848 ops/s
# Warmup Iteration  24: 2666496.014 ops/s
# Warmup Iteration  25: 2678016.243 ops/s
# Warmup Iteration  26: 2673994.174 ops/s
# Warmup Iteration  27: 2688849.558 ops/s
# Warmup Iteration  28: 2669260.391 ops/s
# Warmup Iteration  29: 2680837.861 ops/s
# Warmup Iteration  30: 2669879.718 ops/s
Iteration   1: 2682011.200 ops/s
Iteration   2: 2671434.511 ops/s
Iteration   3: 2682003.274 ops/s
Iteration   4: 2679598.543 ops/s
Iteration   5: 2657100.957 ops/s
Iteration   6: 2675661.670 ops/s
Iteration   7: 2687795.953 ops/s
Iteration   8: 2688004.978 ops/s
Iteration   9: 2682927.986 ops/s
Iteration  10: 2663097.270 ops/s
Iteration  11: 2682283.453 ops/s
Iteration  12: 2673790.525 ops/s
Iteration  13: 2683394.511 ops/s
Iteration  14: 2671411.252 ops/s
Iteration  15: 2666509.616 ops/s
Iteration  16: 2688368.775 ops/s
Iteration  17: 2686648.206 ops/s
Iteration  18: 2694097.137 ops/s
Iteration  19: 2657899.071 ops/s
Iteration  20: 2688061.665 ops/s
Iteration  21: 2681657.082 ops/s
Iteration  22: 2690724.445 ops/s
Iteration  23: 2653101.740 ops/s
Iteration  24: 2683097.680 ops/s
Iteration  25: 2666649.114 ops/s
Iteration  26: 2680035.229 ops/s
Iteration  27: 2667480.735 ops/s
Iteration  28: 2661138.418 ops/s
Iteration  29: 2678631.342 ops/s
Iteration  30: 2662103.065 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableMap":
  2676223.980 ±(99.9%) 7503.034 ops/s [Average]
  (min, avg, max) = (2653101.740, 2676223.980, 2694097.137), stdev = 11230.189
  CI (99.9%): [2668720.946, 2683727.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableMap  thrpt   30  2676223.980 ± 7503.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1450042.550 ops/s
# Warmup Iteration   2: 2494476.843 ops/s
# Warmup Iteration   3: 2853047.686 ops/s
# Warmup Iteration   4: 2875175.052 ops/s
# Warmup Iteration   5: 2891136.558 ops/s
# Warmup Iteration   6: 2381402.336 ops/s
# Warmup Iteration   7: 2889363.115 ops/s
# Warmup Iteration   8: 2886910.148 ops/s
# Warmup Iteration   9: 2885813.604 ops/s
# Warmup Iteration  10: 2876478.623 ops/s
# Warmup Iteration  11: 2879458.272 ops/s
# Warmup Iteration  12: 2880698.590 ops/s
# Warmup Iteration  13: 2889357.164 ops/s
# Warmup Iteration  14: 2891493.996 ops/s
# Warmup Iteration  15: 2882379.833 ops/s
# Warmup Iteration  16: 2856941.483 ops/s
# Warmup Iteration  17: 2824384.762 ops/s
# Warmup Iteration  18: 2827323.198 ops/s
# Warmup Iteration  19: 2817493.737 ops/s
# Warmup Iteration  20: 2825841.494 ops/s
# Warmup Iteration  21: 2822490.198 ops/s
# Warmup Iteration  22: 2823150.574 ops/s
# Warmup Iteration  23: 2832132.959 ops/s
# Warmup Iteration  24: 2829247.475 ops/s
# Warmup Iteration  25: 2828251.720 ops/s
# Warmup Iteration  26: 2829106.758 ops/s
# Warmup Iteration  27: 2827809.392 ops/s
# Warmup Iteration  28: 2828256.567 ops/s
# Warmup Iteration  29: 2827553.924 ops/s
# Warmup Iteration  30: 2823687.405 ops/s
Iteration   1: 2824765.998 ops/s
Iteration   2: 2822728.727 ops/s
Iteration   3: 2820550.475 ops/s
Iteration   4: 2829745.456 ops/s
Iteration   5: 2824514.997 ops/s
Iteration   6: 2825720.490 ops/s
Iteration   7: 2827991.332 ops/s
Iteration   8: 2829726.256 ops/s
Iteration   9: 2830155.375 ops/s
Iteration  10: 2820807.989 ops/s
Iteration  11: 2833171.512 ops/s
Iteration  12: 2825863.076 ops/s
Iteration  13: 2831130.539 ops/s
Iteration  14: 2823922.425 ops/s
Iteration  15: 2830690.770 ops/s
Iteration  16: 2822865.873 ops/s
Iteration  17: 2824633.416 ops/s
Iteration  18: 2833701.291 ops/s
Iteration  19: 2825542.696 ops/s
Iteration  20: 2826923.271 ops/s
Iteration  21: 2827429.091 ops/s
Iteration  22: 2824626.287 ops/s
Iteration  23: 2824037.235 ops/s
Iteration  24: 2829675.008 ops/s
Iteration  25: 2827617.996 ops/s
Iteration  26: 2831505.601 ops/s
Iteration  27: 2819638.438 ops/s
Iteration  28: 2822449.313 ops/s
Iteration  29: 2827197.390 ops/s
Iteration  30: 2824621.614 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSet":
  2826464.998 ±(99.9%) 2483.175 ops/s [Average]
  (min, avg, max) = (2819638.438, 2826464.998, 2833701.291), stdev = 3716.699
  CI (99.9%): [2823981.823, 2828948.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSet  thrpt   30  2826464.998 ± 2483.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1030413.915 ops/s
# Warmup Iteration   2: 2495391.602 ops/s
# Warmup Iteration   3: 2612289.425 ops/s
# Warmup Iteration   4: 2168537.820 ops/s
# Warmup Iteration   5: 2614052.622 ops/s
# Warmup Iteration   6: 2614145.026 ops/s
# Warmup Iteration   7: 2515574.369 ops/s
# Warmup Iteration   8: 2618257.726 ops/s
# Warmup Iteration   9: 2620901.349 ops/s
# Warmup Iteration  10: 2603276.758 ops/s
# Warmup Iteration  11: 2598740.552 ops/s
# Warmup Iteration  12: 2620824.001 ops/s
# Warmup Iteration  13: 2616591.855 ops/s
# Warmup Iteration  14: 2616671.796 ops/s
# Warmup Iteration  15: 2617102.159 ops/s
# Warmup Iteration  16: 2610698.481 ops/s
# Warmup Iteration  17: 2616146.550 ops/s
# Warmup Iteration  18: 2612012.552 ops/s
# Warmup Iteration  19: 2620749.565 ops/s
# Warmup Iteration  20: 2619103.297 ops/s
# Warmup Iteration  21: 2619762.744 ops/s
# Warmup Iteration  22: 2615607.908 ops/s
# Warmup Iteration  23: 2616916.479 ops/s
# Warmup Iteration  24: 2612358.188 ops/s
# Warmup Iteration  25: 2613207.696 ops/s
# Warmup Iteration  26: 2609889.333 ops/s
# Warmup Iteration  27: 2615277.362 ops/s
# Warmup Iteration  28: 2614997.843 ops/s
# Warmup Iteration  29: 2592405.965 ops/s
# Warmup Iteration  30: 2611990.762 ops/s
Iteration   1: 2620259.784 ops/s
Iteration   2: 2608093.238 ops/s
Iteration   3: 2612618.259 ops/s
Iteration   4: 2614939.575 ops/s
Iteration   5: 2611504.528 ops/s
Iteration   6: 2615487.606 ops/s
Iteration   7: 2621317.189 ops/s
Iteration   8: 2612736.494 ops/s
Iteration   9: 2619151.785 ops/s
Iteration  10: 2607352.085 ops/s
Iteration  11: 2618928.063 ops/s
Iteration  12: 2617721.654 ops/s
Iteration  13: 2614228.345 ops/s
Iteration  14: 2618464.398 ops/s
Iteration  15: 2618327.851 ops/s
Iteration  16: 2615876.490 ops/s
Iteration  17: 2607468.965 ops/s
Iteration  18: 2607857.840 ops/s
Iteration  19: 2619172.084 ops/s
Iteration  20: 2615754.420 ops/s
Iteration  21: 2617882.173 ops/s
Iteration  22: 2623295.406 ops/s
Iteration  23: 2614852.181 ops/s
Iteration  24: 2615052.743 ops/s
Iteration  25: 2613697.908 ops/s
Iteration  26: 2613610.221 ops/s
Iteration  27: 2616069.662 ops/s
Iteration  28: 2618595.707 ops/s
Iteration  29: 2622942.097 ops/s
Iteration  30: 2616624.836 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2615662.786 ±(99.9%) 2868.631 ops/s [Average]
  (min, avg, max) = (2607352.085, 2615662.786, 2623295.406), stdev = 4293.632
  CI (99.9%): [2612794.155, 2618531.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2615662.786 ± 2868.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285959.277 ops/s
# Warmup Iteration   2: 496953.745 ops/s
# Warmup Iteration   3: 626109.101 ops/s
# Warmup Iteration   4: 630247.993 ops/s
# Warmup Iteration   5: 630604.924 ops/s
# Warmup Iteration   6: 556732.795 ops/s
# Warmup Iteration   7: 584488.159 ops/s
# Warmup Iteration   8: 630335.096 ops/s
# Warmup Iteration   9: 631304.646 ops/s
# Warmup Iteration  10: 629330.980 ops/s
# Warmup Iteration  11: 630050.218 ops/s
# Warmup Iteration  12: 630571.389 ops/s
# Warmup Iteration  13: 630959.247 ops/s
# Warmup Iteration  14: 631027.399 ops/s
# Warmup Iteration  15: 631490.298 ops/s
# Warmup Iteration  16: 629479.029 ops/s
# Warmup Iteration  17: 628180.495 ops/s
# Warmup Iteration  18: 630498.477 ops/s
# Warmup Iteration  19: 628284.209 ops/s
# Warmup Iteration  20: 629080.706 ops/s
# Warmup Iteration  21: 629395.924 ops/s
# Warmup Iteration  22: 629619.433 ops/s
# Warmup Iteration  23: 630281.670 ops/s
# Warmup Iteration  24: 629129.959 ops/s
# Warmup Iteration  25: 630404.418 ops/s
# Warmup Iteration  26: 629522.794 ops/s
# Warmup Iteration  27: 630049.111 ops/s
# Warmup Iteration  28: 630995.777 ops/s
# Warmup Iteration  29: 630833.865 ops/s
# Warmup Iteration  30: 630294.873 ops/s
Iteration   1: 629959.675 ops/s
Iteration   2: 629397.010 ops/s
Iteration   3: 629015.452 ops/s
Iteration   4: 630563.074 ops/s
Iteration   5: 629752.510 ops/s
Iteration   6: 631252.997 ops/s
Iteration   7: 630423.282 ops/s
Iteration   8: 630139.204 ops/s
Iteration   9: 631472.482 ops/s
Iteration  10: 628746.783 ops/s
Iteration  11: 630992.796 ops/s
Iteration  12: 628840.193 ops/s
Iteration  13: 631718.686 ops/s
Iteration  14: 629903.327 ops/s
Iteration  15: 631222.288 ops/s
Iteration  16: 629187.026 ops/s
Iteration  17: 630984.862 ops/s
Iteration  18: 629870.265 ops/s
Iteration  19: 631257.060 ops/s
Iteration  20: 625420.016 ops/s
Iteration  21: 630089.134 ops/s
Iteration  22: 629199.328 ops/s
Iteration  23: 631227.617 ops/s
Iteration  24: 630187.305 ops/s
Iteration  25: 630842.410 ops/s
Iteration  26: 629203.613 ops/s
Iteration  27: 627932.615 ops/s
Iteration  28: 626761.726 ops/s
Iteration  29: 630401.453 ops/s
Iteration  30: 630574.172 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy":
  629884.612 ±(99.9%) 933.375 ops/s [Average]
  (min, avg, max) = (625420.016, 629884.612, 631718.686), stdev = 1397.032
  CI (99.9%): [628951.237, 630817.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  629884.612 ± 933.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394561.516 ops/s
# Warmup Iteration   2: 669630.319 ops/s
# Warmup Iteration   3: 793324.660 ops/s
# Warmup Iteration   4: 799477.293 ops/s
# Warmup Iteration   5: 797100.271 ops/s
# Warmup Iteration   6: 691927.358 ops/s
# Warmup Iteration   7: 774350.739 ops/s
# Warmup Iteration   8: 797745.980 ops/s
# Warmup Iteration   9: 799621.657 ops/s
# Warmup Iteration  10: 799114.229 ops/s
# Warmup Iteration  11: 798609.772 ops/s
# Warmup Iteration  12: 797294.835 ops/s
# Warmup Iteration  13: 797937.822 ops/s
# Warmup Iteration  14: 798263.910 ops/s
# Warmup Iteration  15: 798189.803 ops/s
# Warmup Iteration  16: 797334.610 ops/s
# Warmup Iteration  17: 797058.823 ops/s
# Warmup Iteration  18: 799045.403 ops/s
# Warmup Iteration  19: 799008.000 ops/s
# Warmup Iteration  20: 799690.855 ops/s
# Warmup Iteration  21: 799318.588 ops/s
# Warmup Iteration  22: 798667.340 ops/s
# Warmup Iteration  23: 799000.351 ops/s
# Warmup Iteration  24: 799210.234 ops/s
# Warmup Iteration  25: 798257.505 ops/s
# Warmup Iteration  26: 797924.555 ops/s
# Warmup Iteration  27: 796664.572 ops/s
# Warmup Iteration  28: 798584.092 ops/s
# Warmup Iteration  29: 799196.676 ops/s
# Warmup Iteration  30: 797226.995 ops/s
Iteration   1: 797790.703 ops/s
Iteration   2: 800444.046 ops/s
Iteration   3: 798156.912 ops/s
Iteration   4: 797724.632 ops/s
Iteration   5: 795489.528 ops/s
Iteration   6: 796178.909 ops/s
Iteration   7: 795712.223 ops/s
Iteration   8: 796718.144 ops/s
Iteration   9: 800039.538 ops/s
Iteration  10: 797855.448 ops/s
Iteration  11: 799835.638 ops/s
Iteration  12: 797308.795 ops/s
Iteration  13: 799813.705 ops/s
Iteration  14: 799133.039 ops/s
Iteration  15: 800154.594 ops/s
Iteration  16: 795743.958 ops/s
Iteration  17: 794942.746 ops/s
Iteration  18: 794964.197 ops/s
Iteration  19: 800623.865 ops/s
Iteration  20: 798299.298 ops/s
Iteration  21: 795080.024 ops/s
Iteration  22: 797227.631 ops/s
Iteration  23: 799002.775 ops/s
Iteration  24: 798939.626 ops/s
Iteration  25: 799694.511 ops/s
Iteration  26: 793494.744 ops/s
Iteration  27: 795949.305 ops/s
Iteration  28: 798681.921 ops/s
Iteration  29: 799588.482 ops/s
Iteration  30: 797132.708 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  797724.055 ±(99.9%) 1303.132 ops/s [Average]
  (min, avg, max) = (793494.744, 797724.055, 800623.865), stdev = 1950.467
  CI (99.9%): [796420.923, 799027.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  797724.055 ± 1303.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616046.585 ops/s
# Warmup Iteration   2: 1205594.108 ops/s
# Warmup Iteration   3: 1373540.408 ops/s
# Warmup Iteration   4: 1377436.647 ops/s
# Warmup Iteration   5: 1299286.077 ops/s
# Warmup Iteration   6: 1224399.531 ops/s
# Warmup Iteration   7: 1377795.511 ops/s
# Warmup Iteration   8: 1377462.237 ops/s
# Warmup Iteration   9: 1379727.953 ops/s
# Warmup Iteration  10: 1377362.215 ops/s
# Warmup Iteration  11: 1375115.636 ops/s
# Warmup Iteration  12: 1374836.453 ops/s
# Warmup Iteration  13: 1373728.817 ops/s
# Warmup Iteration  14: 1376778.384 ops/s
# Warmup Iteration  15: 1373989.170 ops/s
# Warmup Iteration  16: 1376384.196 ops/s
# Warmup Iteration  17: 1382760.796 ops/s
# Warmup Iteration  18: 1380201.062 ops/s
# Warmup Iteration  19: 1380631.896 ops/s
# Warmup Iteration  20: 1381977.041 ops/s
# Warmup Iteration  21: 1379092.174 ops/s
# Warmup Iteration  22: 1381714.386 ops/s
# Warmup Iteration  23: 1381857.046 ops/s
# Warmup Iteration  24: 1377506.402 ops/s
# Warmup Iteration  25: 1381868.967 ops/s
# Warmup Iteration  26: 1379421.678 ops/s
# Warmup Iteration  27: 1382080.637 ops/s
# Warmup Iteration  28: 1378105.718 ops/s
# Warmup Iteration  29: 1379813.465 ops/s
# Warmup Iteration  30: 1380045.132 ops/s
Iteration   1: 1382295.304 ops/s
Iteration   2: 1380911.371 ops/s
Iteration   3: 1377921.717 ops/s
Iteration   4: 1381285.736 ops/s
Iteration   5: 1382726.333 ops/s
Iteration   6: 1380762.862 ops/s
Iteration   7: 1380997.469 ops/s
Iteration   8: 1379584.433 ops/s
Iteration   9: 1377199.951 ops/s
Iteration  10: 1381402.619 ops/s
Iteration  11: 1382790.812 ops/s
Iteration  12: 1381664.304 ops/s
Iteration  13: 1383101.300 ops/s
Iteration  14: 1382709.066 ops/s
Iteration  15: 1379890.451 ops/s
Iteration  16: 1381211.484 ops/s
Iteration  17: 1380370.712 ops/s
Iteration  18: 1382891.135 ops/s
Iteration  19: 1379376.406 ops/s
Iteration  20: 1379808.207 ops/s
Iteration  21: 1381215.634 ops/s
Iteration  22: 1379166.284 ops/s
Iteration  23: 1382816.684 ops/s
Iteration  24: 1376187.964 ops/s
Iteration  25: 1380573.069 ops/s
Iteration  26: 1383375.171 ops/s
Iteration  27: 1382071.388 ops/s
Iteration  28: 1376602.584 ops/s
Iteration  29: 1376269.359 ops/s
Iteration  30: 1378423.149 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1380520.099 ±(99.9%) 1411.618 ops/s [Average]
  (min, avg, max) = (1376187.964, 1380520.099, 1383375.171), stdev = 2112.843
  CI (99.9%): [1379108.481, 1381931.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1380520.099 ± 1411.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2780893.939 ops/s
# Warmup Iteration   2: 6441608.433 ops/s
# Warmup Iteration   3: 5507774.962 ops/s
# Warmup Iteration   4: 6529525.789 ops/s
# Warmup Iteration   5: 6556938.302 ops/s
# Warmup Iteration   6: 6563236.626 ops/s
# Warmup Iteration   7: 6530427.749 ops/s
# Warmup Iteration   8: 6543489.814 ops/s
# Warmup Iteration   9: 6541615.261 ops/s
# Warmup Iteration  10: 6537417.481 ops/s
# Warmup Iteration  11: 6534383.231 ops/s
# Warmup Iteration  12: 6529022.220 ops/s
# Warmup Iteration  13: 6545143.414 ops/s
# Warmup Iteration  14: 6537714.671 ops/s
# Warmup Iteration  15: 6552584.560 ops/s
# Warmup Iteration  16: 6549272.134 ops/s
# Warmup Iteration  17: 6555422.026 ops/s
# Warmup Iteration  18: 6551126.879 ops/s
# Warmup Iteration  19: 6541735.933 ops/s
# Warmup Iteration  20: 6553680.411 ops/s
# Warmup Iteration  21: 6534708.525 ops/s
# Warmup Iteration  22: 6558393.216 ops/s
# Warmup Iteration  23: 6550919.587 ops/s
# Warmup Iteration  24: 6562636.783 ops/s
# Warmup Iteration  25: 6568449.043 ops/s
# Warmup Iteration  26: 6538166.780 ops/s
# Warmup Iteration  27: 6554988.714 ops/s
# Warmup Iteration  28: 6536514.781 ops/s
# Warmup Iteration  29: 6544708.434 ops/s
# Warmup Iteration  30: 6552654.630 ops/s
Iteration   1: 6576187.384 ops/s
Iteration   2: 6502488.315 ops/s
Iteration   3: 6569150.588 ops/s
Iteration   4: 6538523.872 ops/s
Iteration   5: 6563645.274 ops/s
Iteration   6: 6542101.859 ops/s
Iteration   7: 6559231.656 ops/s
Iteration   8: 6554188.908 ops/s
Iteration   9: 6548756.654 ops/s
Iteration  10: 6558513.976 ops/s
Iteration  11: 6527691.955 ops/s
Iteration  12: 6566674.408 ops/s
Iteration  13: 6525347.842 ops/s
Iteration  14: 6563961.406 ops/s
Iteration  15: 6533033.547 ops/s
Iteration  16: 6585871.039 ops/s
Iteration  17: 6547966.914 ops/s
Iteration  18: 6558938.979 ops/s
Iteration  19: 6539157.257 ops/s
Iteration  20: 6554190.909 ops/s
Iteration  21: 6552971.117 ops/s
Iteration  22: 6555265.416 ops/s
Iteration  23: 6538798.050 ops/s
Iteration  24: 6545896.955 ops/s
Iteration  25: 6568068.751 ops/s
Iteration  26: 6532379.961 ops/s
Iteration  27: 6562792.523 ops/s
Iteration  28: 6526936.232 ops/s
Iteration  29: 6588844.160 ops/s
Iteration  30: 6534070.766 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedListBy":
  6550721.556 ±(99.9%) 12711.382 ops/s [Average]
  (min, avg, max) = (6502488.315, 6550721.556, 6588844.160), stdev = 19025.800
  CI (99.9%): [6538010.174, 6563432.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  6550721.556 ± 12711.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2214572.526 ops/s
# Warmup Iteration   2: 3311993.484 ops/s
# Warmup Iteration   3: 3936261.358 ops/s
# Warmup Iteration   4: 3953410.285 ops/s
# Warmup Iteration   5: 3957121.534 ops/s
# Warmup Iteration   6: 3954458.501 ops/s
# Warmup Iteration   7: 3303145.463 ops/s
# Warmup Iteration   8: 3958362.270 ops/s
# Warmup Iteration   9: 3958419.252 ops/s
# Warmup Iteration  10: 3964233.667 ops/s
# Warmup Iteration  11: 3949139.484 ops/s
# Warmup Iteration  12: 3954100.771 ops/s
# Warmup Iteration  13: 3960617.456 ops/s
# Warmup Iteration  14: 3960799.906 ops/s
# Warmup Iteration  15: 3957761.797 ops/s
# Warmup Iteration  16: 3958156.616 ops/s
# Warmup Iteration  17: 3961430.016 ops/s
# Warmup Iteration  18: 3946643.687 ops/s
# Warmup Iteration  19: 3942529.737 ops/s
# Warmup Iteration  20: 3961380.949 ops/s
# Warmup Iteration  21: 3964283.676 ops/s
# Warmup Iteration  22: 3956864.166 ops/s
# Warmup Iteration  23: 3961946.029 ops/s
# Warmup Iteration  24: 3958430.465 ops/s
# Warmup Iteration  25: 3958941.192 ops/s
# Warmup Iteration  26: 3958387.061 ops/s
# Warmup Iteration  27: 3952275.342 ops/s
# Warmup Iteration  28: 3959425.899 ops/s
# Warmup Iteration  29: 3957099.843 ops/s
# Warmup Iteration  30: 3957378.617 ops/s
Iteration   1: 3963701.994 ops/s
Iteration   2: 3957654.491 ops/s
Iteration   3: 3961339.460 ops/s
Iteration   4: 3960638.343 ops/s
Iteration   5: 3958815.332 ops/s
Iteration   6: 3965938.951 ops/s
Iteration   7: 3955645.195 ops/s
Iteration   8: 3956496.887 ops/s
Iteration   9: 3956161.946 ops/s
Iteration  10: 3959529.598 ops/s
Iteration  11: 3955527.177 ops/s
Iteration  12: 3964914.191 ops/s
Iteration  13: 3955554.377 ops/s
Iteration  14: 3958944.767 ops/s
Iteration  15: 3966769.335 ops/s
Iteration  16: 3956428.796 ops/s
Iteration  17: 3957474.743 ops/s
Iteration  18: 3955855.832 ops/s
Iteration  19: 3962645.405 ops/s
Iteration  20: 3956067.814 ops/s
Iteration  21: 3959974.246 ops/s
Iteration  22: 3957204.777 ops/s
Iteration  23: 3962085.508 ops/s
Iteration  24: 3959527.131 ops/s
Iteration  25: 3968287.367 ops/s
Iteration  26: 3961805.865 ops/s
Iteration  27: 3961552.571 ops/s
Iteration  28: 3962362.671 ops/s
Iteration  29: 3954767.313 ops/s
Iteration  30: 3965923.041 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  3959986.504 ±(99.9%) 2568.697 ops/s [Average]
  (min, avg, max) = (3954767.313, 3959986.504, 3968287.367), stdev = 3844.704
  CI (99.9%): [3957417.808, 3962555.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  3959986.504 ± 2568.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6172855.985 ops/s
# Warmup Iteration   2: 14203469.379 ops/s
# Warmup Iteration   3: 14846389.145 ops/s
# Warmup Iteration   4: 12498903.761 ops/s
# Warmup Iteration   5: 14697629.146 ops/s
# Warmup Iteration   6: 14867575.649 ops/s
# Warmup Iteration   7: 14905020.763 ops/s
# Warmup Iteration   8: 14875565.822 ops/s
# Warmup Iteration   9: 14799770.056 ops/s
# Warmup Iteration  10: 14883086.593 ops/s
# Warmup Iteration  11: 14836569.906 ops/s
# Warmup Iteration  12: 14850649.305 ops/s
# Warmup Iteration  13: 14874955.003 ops/s
# Warmup Iteration  14: 14836612.137 ops/s
# Warmup Iteration  15: 14876408.338 ops/s
# Warmup Iteration  16: 14870647.584 ops/s
# Warmup Iteration  17: 14840723.469 ops/s
# Warmup Iteration  18: 14860984.253 ops/s
# Warmup Iteration  19: 14837975.382 ops/s
# Warmup Iteration  20: 14879420.604 ops/s
# Warmup Iteration  21: 14854485.107 ops/s
# Warmup Iteration  22: 14856517.855 ops/s
# Warmup Iteration  23: 14842698.323 ops/s
# Warmup Iteration  24: 14784421.147 ops/s
# Warmup Iteration  25: 14855592.832 ops/s
# Warmup Iteration  26: 14848293.001 ops/s
# Warmup Iteration  27: 14846764.730 ops/s
# Warmup Iteration  28: 14805062.546 ops/s
# Warmup Iteration  29: 14844152.614 ops/s
# Warmup Iteration  30: 14825623.968 ops/s
Iteration   1: 14824386.719 ops/s
Iteration   2: 14819012.342 ops/s
Iteration   3: 14809593.734 ops/s
Iteration   4: 14853651.371 ops/s
Iteration   5: 14878853.012 ops/s
Iteration   6: 14875946.442 ops/s
Iteration   7: 14850659.643 ops/s
Iteration   8: 14831471.178 ops/s
Iteration   9: 14792134.258 ops/s
Iteration  10: 14827395.945 ops/s
Iteration  11: 14830000.278 ops/s
Iteration  12: 14847305.057 ops/s
Iteration  13: 14813054.954 ops/s
Iteration  14: 14847443.263 ops/s
Iteration  15: 14853161.216 ops/s
Iteration  16: 14850918.184 ops/s
Iteration  17: 14842522.685 ops/s
Iteration  18: 14851350.147 ops/s
Iteration  19: 14860742.173 ops/s
Iteration  20: 14816676.087 ops/s
Iteration  21: 14814646.537 ops/s
Iteration  22: 14830697.987 ops/s
Iteration  23: 14773503.655 ops/s
Iteration  24: 14795867.432 ops/s
Iteration  25: 14762355.345 ops/s
Iteration  26: 14724536.875 ops/s
Iteration  27: 14780114.587 ops/s
Iteration  28: 14796102.428 ops/s
Iteration  29: 14825900.693 ops/s
Iteration  30: 14835020.314 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  14823834.151 ±(99.9%) 22851.589 ops/s [Average]
  (min, avg, max) = (14724536.875, 14823834.151, 14878853.012), stdev = 34203.186
  CI (99.9%): [14800982.562, 14846685.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  14823834.151 ± 22851.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692974.268 ops/s
# Warmup Iteration   2: 1826891.913 ops/s
# Warmup Iteration   3: 1895033.090 ops/s
# Warmup Iteration   4: 1568231.069 ops/s
# Warmup Iteration   5: 1896809.678 ops/s
# Warmup Iteration   6: 1898104.241 ops/s
# Warmup Iteration   7: 1890565.356 ops/s
# Warmup Iteration   8: 1896396.682 ops/s
# Warmup Iteration   9: 1896304.116 ops/s
# Warmup Iteration  10: 1897435.552 ops/s
# Warmup Iteration  11: 1898803.886 ops/s
# Warmup Iteration  12: 1896802.498 ops/s
# Warmup Iteration  13: 1896032.489 ops/s
# Warmup Iteration  14: 1895011.271 ops/s
# Warmup Iteration  15: 1893319.422 ops/s
# Warmup Iteration  16: 1891111.675 ops/s
# Warmup Iteration  17: 1896766.873 ops/s
# Warmup Iteration  18: 1892821.305 ops/s
# Warmup Iteration  19: 1895310.493 ops/s
# Warmup Iteration  20: 1893395.535 ops/s
# Warmup Iteration  21: 1898347.277 ops/s
# Warmup Iteration  22: 1896467.833 ops/s
# Warmup Iteration  23: 1895330.175 ops/s
# Warmup Iteration  24: 1896265.708 ops/s
# Warmup Iteration  25: 1895004.658 ops/s
# Warmup Iteration  26: 1893148.953 ops/s
# Warmup Iteration  27: 1889161.557 ops/s
# Warmup Iteration  28: 1895935.039 ops/s
# Warmup Iteration  29: 1896756.089 ops/s
# Warmup Iteration  30: 1897145.003 ops/s
Iteration   1: 1891828.193 ops/s
Iteration   2: 1891759.269 ops/s
Iteration   3: 1894946.399 ops/s
Iteration   4: 1896965.662 ops/s
Iteration   5: 1896783.947 ops/s
Iteration   6: 1892974.199 ops/s
Iteration   7: 1897873.322 ops/s
Iteration   8: 1890151.026 ops/s
Iteration   9: 1887427.162 ops/s
Iteration  10: 1886410.507 ops/s
Iteration  11: 1894084.960 ops/s
Iteration  12: 1897266.290 ops/s
Iteration  13: 1896021.000 ops/s
Iteration  14: 1895041.182 ops/s
Iteration  15: 1901004.850 ops/s
Iteration  16: 1895199.038 ops/s
Iteration  17: 1895447.515 ops/s
Iteration  18: 1891139.389 ops/s
Iteration  19: 1890631.359 ops/s
Iteration  20: 1894378.042 ops/s
Iteration  21: 1896621.798 ops/s
Iteration  22: 1895126.567 ops/s
Iteration  23: 1896639.804 ops/s
Iteration  24: 1897917.019 ops/s
Iteration  25: 1893991.954 ops/s
Iteration  26: 1894267.636 ops/s
Iteration  27: 1894046.666 ops/s
Iteration  28: 1895682.483 ops/s
Iteration  29: 1892425.109 ops/s
Iteration  30: 1892143.870 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1894206.541 ±(99.9%) 2094.374 ops/s [Average]
  (min, avg, max) = (1886410.507, 1894206.541, 1901004.850), stdev = 3134.760
  CI (99.9%): [1892112.167, 1896300.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1894206.541 ± 2094.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 990894.045 ops/s
# Warmup Iteration   2: 2350827.463 ops/s
# Warmup Iteration   3: 2440137.445 ops/s
# Warmup Iteration   4: 2077746.830 ops/s
# Warmup Iteration   5: 2418260.801 ops/s
# Warmup Iteration   6: 2448252.456 ops/s
# Warmup Iteration   7: 2446144.774 ops/s
# Warmup Iteration   8: 2447583.003 ops/s
# Warmup Iteration   9: 2449109.106 ops/s
# Warmup Iteration  10: 2444707.008 ops/s
# Warmup Iteration  11: 2449891.401 ops/s
# Warmup Iteration  12: 2433906.324 ops/s
# Warmup Iteration  13: 2448614.845 ops/s
# Warmup Iteration  14: 2450375.517 ops/s
# Warmup Iteration  15: 2447913.779 ops/s
# Warmup Iteration  16: 2446802.614 ops/s
# Warmup Iteration  17: 2446606.671 ops/s
# Warmup Iteration  18: 2445915.874 ops/s
# Warmup Iteration  19: 2446237.759 ops/s
# Warmup Iteration  20: 2446417.979 ops/s
# Warmup Iteration  21: 2448486.672 ops/s
# Warmup Iteration  22: 2443975.173 ops/s
# Warmup Iteration  23: 2449787.085 ops/s
# Warmup Iteration  24: 2453468.542 ops/s
# Warmup Iteration  25: 2448892.234 ops/s
# Warmup Iteration  26: 2449946.514 ops/s
# Warmup Iteration  27: 2446206.066 ops/s
# Warmup Iteration  28: 2444594.422 ops/s
# Warmup Iteration  29: 2444549.516 ops/s
# Warmup Iteration  30: 2448012.640 ops/s
Iteration   1: 2445039.547 ops/s
Iteration   2: 2448914.103 ops/s
Iteration   3: 2450252.172 ops/s
Iteration   4: 2446136.735 ops/s
Iteration   5: 2444289.639 ops/s
Iteration   6: 2446811.073 ops/s
Iteration   7: 2448187.688 ops/s
Iteration   8: 2447954.715 ops/s
Iteration   9: 2446421.101 ops/s
Iteration  10: 2444767.599 ops/s
Iteration  11: 2448476.648 ops/s
Iteration  12: 2449525.576 ops/s
Iteration  13: 2450296.726 ops/s
Iteration  14: 2441981.146 ops/s
Iteration  15: 2447221.616 ops/s
Iteration  16: 2437641.513 ops/s
Iteration  17: 2441248.721 ops/s
Iteration  18: 2449128.516 ops/s
Iteration  19: 2433261.455 ops/s
Iteration  20: 2448120.948 ops/s
Iteration  21: 2446510.750 ops/s
Iteration  22: 2440997.215 ops/s
Iteration  23: 2435912.483 ops/s
Iteration  24: 2452555.203 ops/s
Iteration  25: 2450860.854 ops/s
Iteration  26: 2450227.332 ops/s
Iteration  27: 2432182.319 ops/s
Iteration  28: 2437161.492 ops/s
Iteration  29: 2449254.552 ops/s
Iteration  30: 2447625.807 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2445298.841 ±(99.9%) 3604.554 ops/s [Average]
  (min, avg, max) = (2432182.319, 2445298.841, 2452555.203), stdev = 5395.127
  CI (99.9%): [2441694.287, 2448903.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2445298.841 ± 3604.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7186981.462 ops/s
# Warmup Iteration   2: 15052388.983 ops/s
# Warmup Iteration   3: 14164395.372 ops/s
# Warmup Iteration   4: 13118729.069 ops/s
# Warmup Iteration   5: 14649406.711 ops/s
# Warmup Iteration   6: 14654353.388 ops/s
# Warmup Iteration   7: 14640487.169 ops/s
# Warmup Iteration   8: 14618301.317 ops/s
# Warmup Iteration   9: 14674996.897 ops/s
# Warmup Iteration  10: 14677663.836 ops/s
# Warmup Iteration  11: 14678629.725 ops/s
# Warmup Iteration  12: 14663036.069 ops/s
# Warmup Iteration  13: 14644249.019 ops/s
# Warmup Iteration  14: 14635386.779 ops/s
# Warmup Iteration  15: 14694411.801 ops/s
# Warmup Iteration  16: 14707905.870 ops/s
# Warmup Iteration  17: 14710397.707 ops/s
# Warmup Iteration  18: 14684877.139 ops/s
# Warmup Iteration  19: 14681200.316 ops/s
# Warmup Iteration  20: 14732383.422 ops/s
# Warmup Iteration  21: 14670376.719 ops/s
# Warmup Iteration  22: 14692341.420 ops/s
# Warmup Iteration  23: 14670902.228 ops/s
# Warmup Iteration  24: 14693154.239 ops/s
# Warmup Iteration  25: 14647352.047 ops/s
# Warmup Iteration  26: 14658752.549 ops/s
# Warmup Iteration  27: 14673608.940 ops/s
# Warmup Iteration  28: 14649855.369 ops/s
# Warmup Iteration  29: 14675431.359 ops/s
# Warmup Iteration  30: 14681198.295 ops/s
Iteration   1: 14702409.881 ops/s
Iteration   2: 14666141.113 ops/s
Iteration   3: 14701181.291 ops/s
Iteration   4: 14666505.654 ops/s
Iteration   5: 14687563.804 ops/s
Iteration   6: 14688466.065 ops/s
Iteration   7: 14692362.268 ops/s
Iteration   8: 14662120.151 ops/s
Iteration   9: 14650995.200 ops/s
Iteration  10: 14650204.729 ops/s
Iteration  11: 14629487.438 ops/s
Iteration  12: 14671704.039 ops/s
Iteration  13: 14684603.873 ops/s
Iteration  14: 14678501.487 ops/s
Iteration  15: 14697432.885 ops/s
Iteration  16: 14680288.368 ops/s
Iteration  17: 14686670.864 ops/s
Iteration  18: 14669150.625 ops/s
Iteration  19: 14674674.052 ops/s
Iteration  20: 14712701.209 ops/s
Iteration  21: 14655851.811 ops/s
Iteration  22: 14666578.218 ops/s
Iteration  23: 14667717.812 ops/s
Iteration  24: 14637392.023 ops/s
Iteration  25: 14662715.463 ops/s
Iteration  26: 14618601.185 ops/s
Iteration  27: 14619055.752 ops/s
Iteration  28: 14694606.266 ops/s
Iteration  29: 14693207.369 ops/s
Iteration  30: 14684972.683 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toList":
  14671795.453 ±(99.9%) 16065.675 ops/s [Average]
  (min, avg, max) = (14618601.185, 14671795.453, 14712701.209), stdev = 24046.347
  CI (99.9%): [14655729.778, 14687861.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toList  thrpt   30  14671795.453 ± 16065.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2258782.281 ops/s
# Warmup Iteration   2: 4804718.123 ops/s
# Warmup Iteration   3: 4197882.051 ops/s
# Warmup Iteration   4: 5031684.994 ops/s
# Warmup Iteration   5: 4980755.379 ops/s
# Warmup Iteration   6: 5023607.533 ops/s
# Warmup Iteration   7: 5015863.332 ops/s
# Warmup Iteration   8: 5026776.909 ops/s
# Warmup Iteration   9: 4984587.686 ops/s
# Warmup Iteration  10: 4991799.994 ops/s
# Warmup Iteration  11: 4980701.843 ops/s
# Warmup Iteration  12: 5019128.263 ops/s
# Warmup Iteration  13: 4983584.992 ops/s
# Warmup Iteration  14: 4990646.873 ops/s
# Warmup Iteration  15: 4995364.823 ops/s
# Warmup Iteration  16: 5026239.167 ops/s
# Warmup Iteration  17: 4975325.197 ops/s
# Warmup Iteration  18: 4978533.062 ops/s
# Warmup Iteration  19: 4968787.304 ops/s
# Warmup Iteration  20: 4988889.239 ops/s
# Warmup Iteration  21: 4876420.348 ops/s
# Warmup Iteration  22: 4994505.359 ops/s
# Warmup Iteration  23: 5017263.026 ops/s
# Warmup Iteration  24: 4987392.212 ops/s
# Warmup Iteration  25: 4951163.260 ops/s
# Warmup Iteration  26: 4991676.047 ops/s
# Warmup Iteration  27: 4948025.474 ops/s
# Warmup Iteration  28: 4977633.551 ops/s
# Warmup Iteration  29: 4975752.983 ops/s
# Warmup Iteration  30: 4993202.754 ops/s
Iteration   1: 4970154.331 ops/s
Iteration   2: 4982565.133 ops/s
Iteration   3: 5010229.642 ops/s
Iteration   4: 4955283.529 ops/s
Iteration   5: 4977732.809 ops/s
Iteration   6: 4992524.131 ops/s
Iteration   7: 4984905.809 ops/s
Iteration   8: 5007758.483 ops/s
Iteration   9: 4992340.427 ops/s
Iteration  10: 4926354.449 ops/s
Iteration  11: 4998279.995 ops/s
Iteration  12: 5009595.660 ops/s
Iteration  13: 5031730.856 ops/s
Iteration  14: 5015204.906 ops/s
Iteration  15: 4878326.776 ops/s
Iteration  16: 4983282.583 ops/s
Iteration  17: 4976495.868 ops/s
Iteration  18: 4993141.328 ops/s
Iteration  19: 4983790.987 ops/s
Iteration  20: 4987203.599 ops/s
Iteration  21: 4957332.130 ops/s
Iteration  22: 4997303.518 ops/s
Iteration  23: 4981467.572 ops/s
Iteration  24: 4935138.367 ops/s
Iteration  25: 4984910.399 ops/s
Iteration  26: 4989396.076 ops/s
Iteration  27: 4944117.192 ops/s
Iteration  28: 4986029.473 ops/s
Iteration  29: 4971113.574 ops/s
Iteration  30: 4949454.290 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMap":
  4978438.796 ±(99.9%) 20212.826 ops/s [Average]
  (min, avg, max) = (4878326.776, 4978438.796, 5031730.856), stdev = 30253.608
  CI (99.9%): [4958225.971, 4998651.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toMap  thrpt   30  4978438.796 ± 20212.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1763197.986 ops/s
# Warmup Iteration   2: 3895106.259 ops/s
# Warmup Iteration   3: 3275493.727 ops/s
# Warmup Iteration   4: 3937471.690 ops/s
# Warmup Iteration   5: 3898073.452 ops/s
# Warmup Iteration   6: 3930649.067 ops/s
# Warmup Iteration   7: 3927168.850 ops/s
# Warmup Iteration   8: 3931012.137 ops/s
# Warmup Iteration   9: 3931081.095 ops/s
# Warmup Iteration  10: 3927952.921 ops/s
# Warmup Iteration  11: 3938202.362 ops/s
# Warmup Iteration  12: 3914635.685 ops/s
# Warmup Iteration  13: 3921065.031 ops/s
# Warmup Iteration  14: 3938213.871 ops/s
# Warmup Iteration  15: 3913330.251 ops/s
# Warmup Iteration  16: 3929072.280 ops/s
# Warmup Iteration  17: 3930067.296 ops/s
# Warmup Iteration  18: 3922431.563 ops/s
# Warmup Iteration  19: 3926011.713 ops/s
# Warmup Iteration  20: 3918722.288 ops/s
# Warmup Iteration  21: 3936935.124 ops/s
# Warmup Iteration  22: 3937413.693 ops/s
# Warmup Iteration  23: 3942156.043 ops/s
# Warmup Iteration  24: 3936127.509 ops/s
# Warmup Iteration  25: 3937621.697 ops/s
# Warmup Iteration  26: 3910810.248 ops/s
# Warmup Iteration  27: 3929860.939 ops/s
# Warmup Iteration  28: 3935545.866 ops/s
# Warmup Iteration  29: 3917947.498 ops/s
# Warmup Iteration  30: 3940846.586 ops/s
Iteration   1: 3940814.062 ops/s
Iteration   2: 3935050.452 ops/s
Iteration   3: 3959765.969 ops/s
Iteration   4: 3882044.473 ops/s
Iteration   5: 3933725.468 ops/s
Iteration   6: 3918954.179 ops/s
Iteration   7: 3926874.612 ops/s
Iteration   8: 3939166.840 ops/s
Iteration   9: 3892793.674 ops/s
Iteration  10: 3936806.468 ops/s
Iteration  11: 3913933.736 ops/s
Iteration  12: 3944101.728 ops/s
Iteration  13: 3899105.933 ops/s
Iteration  14: 3937687.785 ops/s
Iteration  15: 3928721.966 ops/s
Iteration  16: 3919475.974 ops/s
Iteration  17: 3943008.393 ops/s
Iteration  18: 3952089.394 ops/s
Iteration  19: 3946649.041 ops/s
Iteration  20: 3956251.029 ops/s
Iteration  21: 3916727.235 ops/s
Iteration  22: 3933913.356 ops/s
Iteration  23: 3947368.355 ops/s
Iteration  24: 3934776.547 ops/s
Iteration  25: 3930748.972 ops/s
Iteration  26: 3926128.330 ops/s
Iteration  27: 3968894.481 ops/s
Iteration  28: 3867051.547 ops/s
Iteration  29: 3868195.901 ops/s
Iteration  30: 3891709.856 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toMapTarget":
  3926417.859 ±(99.9%) 17147.368 ops/s [Average]
  (min, avg, max) = (3867051.547, 3926417.859, 3968894.481), stdev = 25665.375
  CI (99.9%): [3909270.491, 3943565.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toMapTarget  thrpt   30  3926417.859 ± 17147.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6807090.347 ops/s
# Warmup Iteration   2: 13834212.767 ops/s
# Warmup Iteration   3: 13197974.249 ops/s
# Warmup Iteration   4: 12749391.308 ops/s
# Warmup Iteration   5: 14017255.900 ops/s
# Warmup Iteration   6: 14072732.433 ops/s
# Warmup Iteration   7: 14062561.989 ops/s
# Warmup Iteration   8: 14046999.900 ops/s
# Warmup Iteration   9: 14032848.248 ops/s
# Warmup Iteration  10: 14014419.508 ops/s
# Warmup Iteration  11: 14039071.299 ops/s
# Warmup Iteration  12: 14045985.926 ops/s
# Warmup Iteration  13: 14037384.578 ops/s
# Warmup Iteration  14: 14067228.779 ops/s
# Warmup Iteration  15: 14025006.716 ops/s
# Warmup Iteration  16: 14052660.501 ops/s
# Warmup Iteration  17: 14039874.451 ops/s
# Warmup Iteration  18: 14052938.697 ops/s
# Warmup Iteration  19: 14065416.033 ops/s
# Warmup Iteration  20: 14030363.540 ops/s
# Warmup Iteration  21: 14067415.448 ops/s
# Warmup Iteration  22: 14069218.679 ops/s
# Warmup Iteration  23: 14044023.148 ops/s
# Warmup Iteration  24: 14034488.346 ops/s
# Warmup Iteration  25: 14046216.253 ops/s
# Warmup Iteration  26: 14072115.257 ops/s
# Warmup Iteration  27: 14024283.960 ops/s
# Warmup Iteration  28: 14029529.988 ops/s
# Warmup Iteration  29: 14078885.898 ops/s
# Warmup Iteration  30: 14047914.358 ops/s
Iteration   1: 14037790.023 ops/s
Iteration   2: 13997159.513 ops/s
Iteration   3: 14067453.153 ops/s
Iteration   4: 14044111.041 ops/s
Iteration   5: 14082314.758 ops/s
Iteration   6: 14044160.223 ops/s
Iteration   7: 13987334.918 ops/s
Iteration   8: 14037333.814 ops/s
Iteration   9: 14068616.067 ops/s
Iteration  10: 14006857.136 ops/s
Iteration  11: 14037523.493 ops/s
Iteration  12: 14069417.811 ops/s
Iteration  13: 14078912.872 ops/s
Iteration  14: 14088399.356 ops/s
Iteration  15: 14054578.610 ops/s
Iteration  16: 14045874.997 ops/s
Iteration  17: 14038757.914 ops/s
Iteration  18: 14046558.174 ops/s
Iteration  19: 14038394.754 ops/s
Iteration  20: 14027282.437 ops/s
Iteration  21: 14030223.580 ops/s
Iteration  22: 14028940.712 ops/s
Iteration  23: 14032735.119 ops/s
Iteration  24: 14051702.878 ops/s
Iteration  25: 14045238.416 ops/s
Iteration  26: 14011958.760 ops/s
Iteration  27: 14080703.016 ops/s
Iteration  28: 14032790.728 ops/s
Iteration  29: 14027860.935 ops/s
Iteration  30: 14028141.356 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toReversed":
  14042304.219 ±(99.9%) 16346.353 ops/s [Average]
  (min, avg, max) = (13987334.918, 14042304.219, 14088399.356), stdev = 24466.454
  CI (99.9%): [14025957.865, 14058650.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toReversed  thrpt   30  14042304.219 ± 16346.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8062127.936 ops/s
# Warmup Iteration   2: 19115723.288 ops/s
# Warmup Iteration   3: 19193596.259 ops/s
# Warmup Iteration   4: 16145269.091 ops/s
# Warmup Iteration   5: 19239091.002 ops/s
# Warmup Iteration   6: 19263438.231 ops/s
# Warmup Iteration   7: 19277774.045 ops/s
# Warmup Iteration   8: 19290028.139 ops/s
# Warmup Iteration   9: 19278395.106 ops/s
# Warmup Iteration  10: 19279731.613 ops/s
# Warmup Iteration  11: 19278074.133 ops/s
# Warmup Iteration  12: 19263861.014 ops/s
# Warmup Iteration  13: 19251351.461 ops/s
# Warmup Iteration  14: 19276777.311 ops/s
# Warmup Iteration  15: 19222403.305 ops/s
# Warmup Iteration  16: 19246022.240 ops/s
# Warmup Iteration  17: 19249278.149 ops/s
# Warmup Iteration  18: 19335857.213 ops/s
# Warmup Iteration  19: 19315438.087 ops/s
# Warmup Iteration  20: 19302067.942 ops/s
# Warmup Iteration  21: 19218267.548 ops/s
# Warmup Iteration  22: 19284289.234 ops/s
# Warmup Iteration  23: 19274253.874 ops/s
# Warmup Iteration  24: 19276787.088 ops/s
# Warmup Iteration  25: 19322275.127 ops/s
# Warmup Iteration  26: 19269884.609 ops/s
# Warmup Iteration  27: 19286771.645 ops/s
# Warmup Iteration  28: 19324877.408 ops/s
# Warmup Iteration  29: 19306427.038 ops/s
# Warmup Iteration  30: 19292495.694 ops/s
Iteration   1: 19302718.857 ops/s
Iteration   2: 19306870.025 ops/s
Iteration   3: 19273701.363 ops/s
Iteration   4: 19243233.287 ops/s
Iteration   5: 19193741.311 ops/s
Iteration   6: 19318267.849 ops/s
Iteration   7: 19290282.824 ops/s
Iteration   8: 19267590.836 ops/s
Iteration   9: 19299690.294 ops/s
Iteration  10: 19281034.532 ops/s
Iteration  11: 19330935.559 ops/s
Iteration  12: 19306133.450 ops/s
Iteration  13: 19336692.233 ops/s
Iteration  14: 19295159.413 ops/s
Iteration  15: 18979117.093 ops/s
Iteration  16: 18897684.714 ops/s
Iteration  17: 19276020.804 ops/s
Iteration  18: 19301884.555 ops/s
Iteration  19: 19271766.082 ops/s
Iteration  20: 19316553.335 ops/s
Iteration  21: 19292294.525 ops/s
Iteration  22: 19275069.673 ops/s
Iteration  23: 19292773.790 ops/s
Iteration  24: 19292025.089 ops/s
Iteration  25: 19293508.544 ops/s
Iteration  26: 19274976.340 ops/s
Iteration  27: 19318317.083 ops/s
Iteration  28: 19190501.175 ops/s
Iteration  29: 19137454.452 ops/s
Iteration  30: 19112733.738 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSet":
  19252291.094 ±(99.9%) 67148.119 ops/s [Average]
  (min, avg, max) = (18897684.714, 19252291.094, 19336692.233), stdev = 100504.150
  CI (99.9%): [19185142.976, 19319439.213] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSet  thrpt   30  19252291.094 ± 67148.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267580.673 ops/s
# Warmup Iteration   2: 444010.856 ops/s
# Warmup Iteration   3: 567411.792 ops/s
# Warmup Iteration   4: 569780.995 ops/s
# Warmup Iteration   5: 568792.055 ops/s
# Warmup Iteration   6: 570202.832 ops/s
# Warmup Iteration   7: 459078.724 ops/s
# Warmup Iteration   8: 569910.326 ops/s
# Warmup Iteration   9: 570108.639 ops/s
# Warmup Iteration  10: 569510.170 ops/s
# Warmup Iteration  11: 570567.794 ops/s
# Warmup Iteration  12: 570037.133 ops/s
# Warmup Iteration  13: 570726.746 ops/s
# Warmup Iteration  14: 570665.791 ops/s
# Warmup Iteration  15: 570593.398 ops/s
# Warmup Iteration  16: 570363.289 ops/s
# Warmup Iteration  17: 567859.099 ops/s
# Warmup Iteration  18: 567419.143 ops/s
# Warmup Iteration  19: 568001.900 ops/s
# Warmup Iteration  20: 570443.827 ops/s
# Warmup Iteration  21: 569821.151 ops/s
# Warmup Iteration  22: 570520.588 ops/s
# Warmup Iteration  23: 569912.301 ops/s
# Warmup Iteration  24: 569343.650 ops/s
# Warmup Iteration  25: 567908.378 ops/s
# Warmup Iteration  26: 569626.449 ops/s
# Warmup Iteration  27: 571097.654 ops/s
# Warmup Iteration  28: 570068.074 ops/s
# Warmup Iteration  29: 570055.197 ops/s
# Warmup Iteration  30: 570096.289 ops/s
Iteration   1: 570956.797 ops/s
Iteration   2: 570987.687 ops/s
Iteration   3: 571141.901 ops/s
Iteration   4: 570943.702 ops/s
Iteration   5: 571260.416 ops/s
Iteration   6: 570442.997 ops/s
Iteration   7: 570865.145 ops/s
Iteration   8: 569861.116 ops/s
Iteration   9: 570904.402 ops/s
Iteration  10: 568681.835 ops/s
Iteration  11: 570393.271 ops/s
Iteration  12: 569805.541 ops/s
Iteration  13: 571031.644 ops/s
Iteration  14: 570121.601 ops/s
Iteration  15: 573051.735 ops/s
Iteration  16: 572605.949 ops/s
Iteration  17: 572892.036 ops/s
Iteration  18: 572099.142 ops/s
Iteration  19: 571768.480 ops/s
Iteration  20: 569316.248 ops/s
Iteration  21: 572902.407 ops/s
Iteration  22: 572034.316 ops/s
Iteration  23: 570375.488 ops/s
Iteration  24: 571206.205 ops/s
Iteration  25: 569242.491 ops/s
Iteration  26: 570950.109 ops/s
Iteration  27: 570801.209 ops/s
Iteration  28: 573126.249 ops/s
Iteration  29: 572709.261 ops/s
Iteration  30: 572837.376 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBagBy":
  571177.225 ±(99.9%) 811.656 ops/s [Average]
  (min, avg, max) = (568681.835, 571177.225, 573126.249), stdev = 1214.848
  CI (99.9%): [570365.570, 571988.881] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  571177.225 ± 811.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611998.387 ops/s
# Warmup Iteration   2: 1243746.013 ops/s
# Warmup Iteration   3: 1388227.818 ops/s
# Warmup Iteration   4: 1394530.370 ops/s
# Warmup Iteration   5: 1167045.662 ops/s
# Warmup Iteration   6: 1395911.066 ops/s
# Warmup Iteration   7: 1398584.373 ops/s
# Warmup Iteration   8: 1390127.223 ops/s
# Warmup Iteration   9: 1399085.223 ops/s
# Warmup Iteration  10: 1396448.277 ops/s
# Warmup Iteration  11: 1394047.703 ops/s
# Warmup Iteration  12: 1393484.805 ops/s
# Warmup Iteration  13: 1388601.140 ops/s
# Warmup Iteration  14: 1394456.298 ops/s
# Warmup Iteration  15: 1387018.666 ops/s
# Warmup Iteration  16: 1389340.350 ops/s
# Warmup Iteration  17: 1393145.780 ops/s
# Warmup Iteration  18: 1395171.561 ops/s
# Warmup Iteration  19: 1395869.721 ops/s
# Warmup Iteration  20: 1392302.740 ops/s
# Warmup Iteration  21: 1396993.767 ops/s
# Warmup Iteration  22: 1395204.099 ops/s
# Warmup Iteration  23: 1391439.209 ops/s
# Warmup Iteration  24: 1393575.543 ops/s
# Warmup Iteration  25: 1389197.188 ops/s
# Warmup Iteration  26: 1390873.102 ops/s
# Warmup Iteration  27: 1393773.128 ops/s
# Warmup Iteration  28: 1395210.423 ops/s
# Warmup Iteration  29: 1392559.870 ops/s
# Warmup Iteration  30: 1388788.619 ops/s
Iteration   1: 1397912.502 ops/s
Iteration   2: 1393047.392 ops/s
Iteration   3: 1393145.183 ops/s
Iteration   4: 1397923.860 ops/s
Iteration   5: 1389330.131 ops/s
Iteration   6: 1393554.658 ops/s
Iteration   7: 1398412.892 ops/s
Iteration   8: 1393278.103 ops/s
Iteration   9: 1391476.739 ops/s
Iteration  10: 1398132.838 ops/s
Iteration  11: 1392289.272 ops/s
Iteration  12: 1392993.266 ops/s
Iteration  13: 1397332.820 ops/s
Iteration  14: 1393188.605 ops/s
Iteration  15: 1394542.630 ops/s
Iteration  16: 1398844.655 ops/s
Iteration  17: 1392667.609 ops/s
Iteration  18: 1391867.019 ops/s
Iteration  19: 1397160.260 ops/s
Iteration  20: 1394150.474 ops/s
Iteration  21: 1396539.008 ops/s
Iteration  22: 1393749.699 ops/s
Iteration  23: 1389639.415 ops/s
Iteration  24: 1390625.784 ops/s
Iteration  25: 1397076.251 ops/s
Iteration  26: 1381212.289 ops/s
Iteration  27: 1379271.279 ops/s
Iteration  28: 1393695.148 ops/s
Iteration  29: 1393491.871 ops/s
Iteration  30: 1393064.957 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1393320.554 ±(99.9%) 2956.316 ops/s [Average]
  (min, avg, max) = (1379271.279, 1393320.554, 1398844.655), stdev = 4424.874
  CI (99.9%): [1390364.238, 1396276.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1393320.554 ± 2956.316  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 680773.194 ops/s
# Warmup Iteration   2: 1394472.686 ops/s
# Warmup Iteration   3: 1535054.063 ops/s
# Warmup Iteration   4: 1541176.693 ops/s
# Warmup Iteration   5: 1291146.184 ops/s
# Warmup Iteration   6: 1548711.075 ops/s
# Warmup Iteration   7: 1549847.835 ops/s
# Warmup Iteration   8: 1546777.195 ops/s
# Warmup Iteration   9: 1539182.972 ops/s
# Warmup Iteration  10: 1549456.962 ops/s
# Warmup Iteration  11: 1548104.160 ops/s
# Warmup Iteration  12: 1549975.193 ops/s
# Warmup Iteration  13: 1550649.944 ops/s
# Warmup Iteration  14: 1550124.508 ops/s
# Warmup Iteration  15: 1549209.561 ops/s
# Warmup Iteration  16: 1549398.362 ops/s
# Warmup Iteration  17: 1553439.307 ops/s
# Warmup Iteration  18: 1555748.754 ops/s
# Warmup Iteration  19: 1555873.668 ops/s
# Warmup Iteration  20: 1555773.479 ops/s
# Warmup Iteration  21: 1551290.633 ops/s
# Warmup Iteration  22: 1559305.826 ops/s
# Warmup Iteration  23: 1555120.440 ops/s
# Warmup Iteration  24: 1556138.327 ops/s
# Warmup Iteration  25: 1552252.238 ops/s
# Warmup Iteration  26: 1548886.635 ops/s
# Warmup Iteration  27: 1552392.337 ops/s
# Warmup Iteration  28: 1553529.218 ops/s
# Warmup Iteration  29: 1550945.279 ops/s
# Warmup Iteration  30: 1547620.254 ops/s
Iteration   1: 1551763.143 ops/s
Iteration   2: 1552654.187 ops/s
Iteration   3: 1553542.707 ops/s
Iteration   4: 1551901.077 ops/s
Iteration   5: 1554663.701 ops/s
Iteration   6: 1557141.826 ops/s
Iteration   7: 1552713.951 ops/s
Iteration   8: 1554884.370 ops/s
Iteration   9: 1550221.216 ops/s
Iteration  10: 1545488.360 ops/s
Iteration  11: 1553539.739 ops/s
Iteration  12: 1557197.262 ops/s
Iteration  13: 1556629.271 ops/s
Iteration  14: 1555919.243 ops/s
Iteration  15: 1557957.793 ops/s
Iteration  16: 1554168.699 ops/s
Iteration  17: 1553231.952 ops/s
Iteration  18: 1556023.081 ops/s
Iteration  19: 1553555.696 ops/s
Iteration  20: 1551149.903 ops/s
Iteration  21: 1556583.269 ops/s
Iteration  22: 1553641.210 ops/s
Iteration  23: 1553131.314 ops/s
Iteration  24: 1550010.343 ops/s
Iteration  25: 1554236.228 ops/s
Iteration  26: 1554163.225 ops/s
Iteration  27: 1552089.221 ops/s
Iteration  28: 1540814.495 ops/s
Iteration  29: 1538079.240 ops/s
Iteration  30: 1555556.466 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1552755.073 ±(99.9%) 2964.863 ops/s [Average]
  (min, avg, max) = (1538079.240, 1552755.073, 1557957.793), stdev = 4437.667
  CI (99.9%): [1549790.210, 1555719.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1552755.073 ± 2964.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 564656.383 ops/s
# Warmup Iteration   2: 609768.543 ops/s
# Warmup Iteration   3: 771642.483 ops/s
# Warmup Iteration   4: 797291.865 ops/s
# Warmup Iteration   5: 798418.051 ops/s
# Warmup Iteration   6: 793572.779 ops/s
# Warmup Iteration   7: 797739.701 ops/s
# Warmup Iteration   8: 798517.141 ops/s
# Warmup Iteration   9: 795822.448 ops/s
# Warmup Iteration  10: 800900.530 ops/s
# Warmup Iteration  11: 796685.758 ops/s
# Warmup Iteration  12: 746194.826 ops/s
# Warmup Iteration  13: 723487.289 ops/s
# Warmup Iteration  14: 797596.756 ops/s
# Warmup Iteration  15: 794689.051 ops/s
# Warmup Iteration  16: 798904.413 ops/s
# Warmup Iteration  17: 837427.525 ops/s
# Warmup Iteration  18: 841880.927 ops/s
# Warmup Iteration  19: 838980.975 ops/s
# Warmup Iteration  20: 841197.390 ops/s
# Warmup Iteration  21: 837656.157 ops/s
# Warmup Iteration  22: 839674.907 ops/s
# Warmup Iteration  23: 839782.916 ops/s
# Warmup Iteration  24: 837344.020 ops/s
# Warmup Iteration  25: 839865.165 ops/s
# Warmup Iteration  26: 842209.477 ops/s
# Warmup Iteration  27: 840249.023 ops/s
# Warmup Iteration  28: 841858.225 ops/s
# Warmup Iteration  29: 839557.434 ops/s
# Warmup Iteration  30: 842379.515 ops/s
Iteration   1: 840878.148 ops/s
Iteration   2: 836222.211 ops/s
Iteration   3: 838747.921 ops/s
Iteration   4: 841690.219 ops/s
Iteration   5: 838943.282 ops/s
Iteration   6: 837842.560 ops/s
Iteration   7: 840546.683 ops/s
Iteration   8: 841497.679 ops/s
Iteration   9: 839131.400 ops/s
Iteration  10: 841268.175 ops/s
Iteration  11: 838695.246 ops/s
Iteration  12: 838663.020 ops/s
Iteration  13: 840162.020 ops/s
Iteration  14: 841387.916 ops/s
Iteration  15: 837773.067 ops/s
Iteration  16: 837229.890 ops/s
Iteration  17: 840598.230 ops/s
Iteration  18: 841622.438 ops/s
Iteration  19: 832553.260 ops/s
Iteration  20: 840713.172 ops/s
Iteration  21: 838983.800 ops/s
Iteration  22: 839030.212 ops/s
Iteration  23: 840238.005 ops/s
Iteration  24: 842360.680 ops/s
Iteration  25: 840636.158 ops/s
Iteration  26: 842794.205 ops/s
Iteration  27: 839682.989 ops/s
Iteration  28: 843572.727 ops/s
Iteration  29: 841311.713 ops/s
Iteration  30: 842607.199 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_null":
  839912.807 ±(99.9%) 1489.514 ops/s [Average]
  (min, avg, max) = (832553.260, 839912.807, 843572.727), stdev = 2229.434
  CI (99.9%): [838423.294, 841402.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  839912.807 ± 1489.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1650188.676 ops/s
# Warmup Iteration   2: 2799077.062 ops/s
# Warmup Iteration   3: 3089012.249 ops/s
# Warmup Iteration   4: 3137000.523 ops/s
# Warmup Iteration   5: 3138516.092 ops/s
# Warmup Iteration   6: 2598857.716 ops/s
# Warmup Iteration   7: 3131911.196 ops/s
# Warmup Iteration   8: 3133145.608 ops/s
# Warmup Iteration   9: 3135843.539 ops/s
# Warmup Iteration  10: 3126318.609 ops/s
# Warmup Iteration  11: 3137023.176 ops/s
# Warmup Iteration  12: 3129853.648 ops/s
# Warmup Iteration  13: 3118774.879 ops/s
# Warmup Iteration  14: 3130406.920 ops/s
# Warmup Iteration  15: 3131157.745 ops/s
# Warmup Iteration  16: 3135014.195 ops/s
# Warmup Iteration  17: 3133697.303 ops/s
# Warmup Iteration  18: 3133000.428 ops/s
# Warmup Iteration  19: 3134336.561 ops/s
# Warmup Iteration  20: 3133038.970 ops/s
# Warmup Iteration  21: 3137394.495 ops/s
# Warmup Iteration  22: 3134562.023 ops/s
# Warmup Iteration  23: 3130709.244 ops/s
# Warmup Iteration  24: 3137034.235 ops/s
# Warmup Iteration  25: 3137892.508 ops/s
# Warmup Iteration  26: 3135563.501 ops/s
# Warmup Iteration  27: 3137384.679 ops/s
# Warmup Iteration  28: 3136463.565 ops/s
# Warmup Iteration  29: 3138055.089 ops/s
# Warmup Iteration  30: 3135172.828 ops/s
Iteration   1: 3132890.522 ops/s
Iteration   2: 3129597.911 ops/s
Iteration   3: 3142550.352 ops/s
Iteration   4: 3134190.175 ops/s
Iteration   5: 3137863.189 ops/s
Iteration   6: 3130461.569 ops/s
Iteration   7: 3131128.109 ops/s
Iteration   8: 3131248.588 ops/s
Iteration   9: 3135069.424 ops/s
Iteration  10: 3130456.972 ops/s
Iteration  11: 3133050.255 ops/s
Iteration  12: 3127009.848 ops/s
Iteration  13: 3133842.978 ops/s
Iteration  14: 3138261.365 ops/s
Iteration  15: 3132924.627 ops/s
Iteration  16: 3141590.826 ops/s
Iteration  17: 3134394.453 ops/s
Iteration  18: 3140275.838 ops/s
Iteration  19: 3130283.275 ops/s
Iteration  20: 3137011.808 ops/s
Iteration  21: 3131457.683 ops/s
Iteration  22: 3132476.793 ops/s
Iteration  23: 3124307.076 ops/s
Iteration  24: 3121015.450 ops/s
Iteration  25: 3125715.344 ops/s
Iteration  26: 3135216.414 ops/s
Iteration  27: 3137713.657 ops/s
Iteration  28: 3131688.791 ops/s
Iteration  29: 3136485.841 ops/s
Iteration  30: 3127725.171 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy":
  3132930.143 ±(99.9%) 3309.697 ops/s [Average]
  (min, avg, max) = (3121015.450, 3132930.143, 3142550.352), stdev = 4953.799
  CI (99.9%): [3129620.447, 3136239.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedListBy  thrpt   30  3132930.143 ± 3309.697  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2490134.943 ops/s
# Warmup Iteration   2: 2729555.351 ops/s
# Warmup Iteration   3: 3740384.287 ops/s
# Warmup Iteration   4: 3769357.374 ops/s
# Warmup Iteration   5: 3745974.122 ops/s
# Warmup Iteration   6: 3744872.301 ops/s
# Warmup Iteration   7: 3696698.051 ops/s
# Warmup Iteration   8: 3752738.945 ops/s
# Warmup Iteration   9: 3713954.643 ops/s
# Warmup Iteration  10: 3789751.421 ops/s
# Warmup Iteration  11: 3140848.389 ops/s
# Warmup Iteration  12: 3794993.039 ops/s
# Warmup Iteration  13: 3787092.991 ops/s
# Warmup Iteration  14: 3787580.432 ops/s
# Warmup Iteration  15: 3763756.860 ops/s
# Warmup Iteration  16: 3779311.277 ops/s
# Warmup Iteration  17: 3790109.947 ops/s
# Warmup Iteration  18: 3777371.889 ops/s
# Warmup Iteration  19: 3780242.016 ops/s
# Warmup Iteration  20: 3789621.993 ops/s
# Warmup Iteration  21: 3786348.796 ops/s
# Warmup Iteration  22: 3786250.767 ops/s
# Warmup Iteration  23: 3796218.244 ops/s
# Warmup Iteration  24: 3794451.254 ops/s
# Warmup Iteration  25: 3794900.824 ops/s
# Warmup Iteration  26: 3783593.768 ops/s
# Warmup Iteration  27: 3794464.953 ops/s
# Warmup Iteration  28: 3788276.457 ops/s
# Warmup Iteration  29: 3789790.645 ops/s
# Warmup Iteration  30: 3789457.140 ops/s
Iteration   1: 3795374.961 ops/s
Iteration   2: 3787993.275 ops/s
Iteration   3: 3788985.779 ops/s
Iteration   4: 3795990.913 ops/s
Iteration   5: 3793414.274 ops/s
Iteration   6: 3785935.715 ops/s
Iteration   7: 3786795.909 ops/s
Iteration   8: 3787327.294 ops/s
Iteration   9: 3782087.697 ops/s
Iteration  10: 3793261.825 ops/s
Iteration  11: 3787004.569 ops/s
Iteration  12: 3780083.707 ops/s
Iteration  13: 3780698.472 ops/s
Iteration  14: 3796551.301 ops/s
Iteration  15: 3790199.777 ops/s
Iteration  16: 3788273.395 ops/s
Iteration  17: 3795868.012 ops/s
Iteration  18: 3790095.048 ops/s
Iteration  19: 3795622.580 ops/s
Iteration  20: 3770220.111 ops/s
Iteration  21: 3764488.865 ops/s
Iteration  22: 3788975.807 ops/s
Iteration  23: 3786293.110 ops/s
Iteration  24: 3793874.402 ops/s
Iteration  25: 3793792.917 ops/s
Iteration  26: 3794329.749 ops/s
Iteration  27: 3787144.268 ops/s
Iteration  28: 3794851.513 ops/s
Iteration  29: 3795912.757 ops/s
Iteration  30: 3799409.283 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListBy_with_null":
  3789028.576 ±(99.9%) 5154.857 ops/s [Average]
  (min, avg, max) = (3764488.865, 3789028.576, 3799409.283), stdev = 7715.547
  CI (99.9%): [3783873.720, 3794183.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  3789028.576 ± 5154.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553827.081 ops/s
# Warmup Iteration   2: 584254.010 ops/s
# Warmup Iteration   3: 642507.807 ops/s
# Warmup Iteration   4: 740149.399 ops/s
# Warmup Iteration   5: 737393.650 ops/s
# Warmup Iteration   6: 738409.671 ops/s
# Warmup Iteration   7: 732744.713 ops/s
# Warmup Iteration   8: 737923.203 ops/s
# Warmup Iteration   9: 736649.855 ops/s
# Warmup Iteration  10: 739854.550 ops/s
# Warmup Iteration  11: 738830.273 ops/s
# Warmup Iteration  12: 737982.201 ops/s
# Warmup Iteration  13: 737820.142 ops/s
# Warmup Iteration  14: 737891.953 ops/s
# Warmup Iteration  15: 738000.888 ops/s
# Warmup Iteration  16: 612730.654 ops/s
# Warmup Iteration  17: 765514.317 ops/s
# Warmup Iteration  18: 765746.319 ops/s
# Warmup Iteration  19: 763304.397 ops/s
# Warmup Iteration  20: 764098.036 ops/s
# Warmup Iteration  21: 765128.116 ops/s
# Warmup Iteration  22: 765040.538 ops/s
# Warmup Iteration  23: 765238.156 ops/s
# Warmup Iteration  24: 763733.167 ops/s
# Warmup Iteration  25: 765217.600 ops/s
# Warmup Iteration  26: 763517.542 ops/s
# Warmup Iteration  27: 765599.982 ops/s
# Warmup Iteration  28: 766801.099 ops/s
# Warmup Iteration  29: 764719.309 ops/s
# Warmup Iteration  30: 765245.651 ops/s
Iteration   1: 766242.254 ops/s
Iteration   2: 765491.652 ops/s
Iteration   3: 764419.005 ops/s
Iteration   4: 763186.171 ops/s
Iteration   5: 764866.128 ops/s
Iteration   6: 766096.211 ops/s
Iteration   7: 764403.895 ops/s
Iteration   8: 764761.962 ops/s
Iteration   9: 764982.844 ops/s
Iteration  10: 764021.087 ops/s
Iteration  11: 766367.491 ops/s
Iteration  12: 766141.883 ops/s
Iteration  13: 766976.748 ops/s
Iteration  14: 766994.222 ops/s
Iteration  15: 764301.961 ops/s
Iteration  16: 766523.725 ops/s
Iteration  17: 766403.382 ops/s
Iteration  18: 766390.841 ops/s
Iteration  19: 765709.190 ops/s
Iteration  20: 765218.034 ops/s
Iteration  21: 765003.993 ops/s
Iteration  22: 767730.350 ops/s
Iteration  23: 766264.303 ops/s
Iteration  24: 766372.023 ops/s
Iteration  25: 765032.437 ops/s
Iteration  26: 763473.766 ops/s
Iteration  27: 765752.820 ops/s
Iteration  28: 763166.799 ops/s
Iteration  29: 765706.264 ops/s
Iteration  30: 765936.554 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator":
  765464.600 ±(99.9%) 768.989 ops/s [Average]
  (min, avg, max) = (763166.799, 765464.600, 767730.350), stdev = 1150.986
  CI (99.9%): [764695.611, 766233.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparator  thrpt   30  765464.600 ± 768.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537144.880 ops/s
# Warmup Iteration   2: 570773.290 ops/s
# Warmup Iteration   3: 690499.703 ops/s
# Warmup Iteration   4: 740686.342 ops/s
# Warmup Iteration   5: 741770.217 ops/s
# Warmup Iteration   6: 736689.407 ops/s
# Warmup Iteration   7: 738802.033 ops/s
# Warmup Iteration   8: 740816.973 ops/s
# Warmup Iteration   9: 739590.452 ops/s
# Warmup Iteration  10: 739817.827 ops/s
# Warmup Iteration  11: 739505.033 ops/s
# Warmup Iteration  12: 740501.800 ops/s
# Warmup Iteration  13: 693941.242 ops/s
# Warmup Iteration  14: 662724.482 ops/s
# Warmup Iteration  15: 743029.394 ops/s
# Warmup Iteration  16: 740269.243 ops/s
# Warmup Iteration  17: 777007.602 ops/s
# Warmup Iteration  18: 776288.653 ops/s
# Warmup Iteration  19: 774539.005 ops/s
# Warmup Iteration  20: 776666.048 ops/s
# Warmup Iteration  21: 773365.233 ops/s
# Warmup Iteration  22: 774614.193 ops/s
# Warmup Iteration  23: 776424.319 ops/s
# Warmup Iteration  24: 775915.636 ops/s
# Warmup Iteration  25: 775499.629 ops/s
# Warmup Iteration  26: 776290.028 ops/s
# Warmup Iteration  27: 776227.780 ops/s
# Warmup Iteration  28: 777685.946 ops/s
# Warmup Iteration  29: 775233.305 ops/s
# Warmup Iteration  30: 771811.685 ops/s
Iteration   1: 776594.920 ops/s
Iteration   2: 776637.860 ops/s
Iteration   3: 775152.072 ops/s
Iteration   4: 774949.895 ops/s
Iteration   5: 777095.928 ops/s
Iteration   6: 775373.996 ops/s
Iteration   7: 776223.438 ops/s
Iteration   8: 773559.606 ops/s
Iteration   9: 776671.129 ops/s
Iteration  10: 776105.329 ops/s
Iteration  11: 776300.647 ops/s
Iteration  12: 773638.562 ops/s
Iteration  13: 773267.988 ops/s
Iteration  14: 774592.734 ops/s
Iteration  15: 776317.532 ops/s
Iteration  16: 777367.334 ops/s
Iteration  17: 773980.672 ops/s
Iteration  18: 775993.138 ops/s
Iteration  19: 776323.719 ops/s
Iteration  20: 777532.839 ops/s
Iteration  21: 775183.520 ops/s
Iteration  22: 776518.551 ops/s
Iteration  23: 776525.366 ops/s
Iteration  24: 774970.174 ops/s
Iteration  25: 777214.037 ops/s
Iteration  26: 772836.161 ops/s
Iteration  27: 776474.967 ops/s
Iteration  28: 774804.380 ops/s
Iteration  29: 773379.111 ops/s
Iteration  30: 771467.955 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements":
  775435.119 ±(99.9%) 1019.322 ops/s [Average]
  (min, avg, max) = (771467.955, 775435.119, 777532.839), stdev = 1525.674
  CI (99.9%): [774415.796, 776454.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedListWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  775435.119 ± 1019.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2780876.503 ops/s
# Warmup Iteration   2: 5890884.439 ops/s
# Warmup Iteration   3: 5075817.158 ops/s
# Warmup Iteration   4: 6008591.726 ops/s
# Warmup Iteration   5: 5993856.255 ops/s
# Warmup Iteration   6: 6018819.765 ops/s
# Warmup Iteration   7: 6016107.722 ops/s
# Warmup Iteration   8: 6014021.016 ops/s
# Warmup Iteration   9: 6015864.888 ops/s
# Warmup Iteration  10: 6018632.062 ops/s
# Warmup Iteration  11: 6009636.758 ops/s
# Warmup Iteration  12: 6014009.180 ops/s
# Warmup Iteration  13: 6013908.630 ops/s
# Warmup Iteration  14: 6018552.137 ops/s
# Warmup Iteration  15: 6004863.112 ops/s
# Warmup Iteration  16: 5998300.294 ops/s
# Warmup Iteration  17: 6024467.578 ops/s
# Warmup Iteration  18: 6029459.216 ops/s
# Warmup Iteration  19: 6002685.734 ops/s
# Warmup Iteration  20: 6021070.894 ops/s
# Warmup Iteration  21: 6039917.644 ops/s
# Warmup Iteration  22: 6017505.003 ops/s
# Warmup Iteration  23: 6034598.433 ops/s
# Warmup Iteration  24: 6024641.231 ops/s
# Warmup Iteration  25: 6039094.696 ops/s
# Warmup Iteration  26: 6036976.979 ops/s
# Warmup Iteration  27: 5995537.032 ops/s
# Warmup Iteration  28: 6036650.162 ops/s
# Warmup Iteration  29: 6036177.305 ops/s
# Warmup Iteration  30: 6005704.969 ops/s
Iteration   1: 6029000.612 ops/s
Iteration   2: 5981069.887 ops/s
Iteration   3: 6030361.185 ops/s
Iteration   4: 6031979.804 ops/s
Iteration   5: 6004813.295 ops/s
Iteration   6: 6043236.632 ops/s
Iteration   7: 5977543.766 ops/s
Iteration   8: 6018124.779 ops/s
Iteration   9: 6031405.664 ops/s
Iteration  10: 6025195.880 ops/s
Iteration  11: 6037890.170 ops/s
Iteration  12: 6027695.547 ops/s
Iteration  13: 6015941.952 ops/s
Iteration  14: 6037649.622 ops/s
Iteration  15: 6032264.357 ops/s
Iteration  16: 6008009.393 ops/s
Iteration  17: 6030337.588 ops/s
Iteration  18: 6028741.555 ops/s
Iteration  19: 6012675.015 ops/s
Iteration  20: 6049059.162 ops/s
Iteration  21: 6021542.695 ops/s
Iteration  22: 6030362.609 ops/s
Iteration  23: 6028777.563 ops/s
Iteration  24: 6001628.734 ops/s
Iteration  25: 6018906.684 ops/s
Iteration  26: 6014783.779 ops/s
Iteration  27: 6000524.973 ops/s
Iteration  28: 6026250.247 ops/s
Iteration  29: 6000827.827 ops/s
Iteration  30: 6001521.739 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering":
  6019937.424 ±(99.9%) 11332.768 ops/s [Average]
  (min, avg, max) = (5977543.766, 6019937.424, 6049059.162), stdev = 16962.355
  CI (99.9%): [6008604.656, 6031270.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  6019937.424 ± 11332.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5532607.920 ops/s
# Warmup Iteration   2: 12277049.345 ops/s
# Warmup Iteration   3: 12531101.006 ops/s
# Warmup Iteration   4: 10484567.745 ops/s
# Warmup Iteration   5: 12519745.333 ops/s
# Warmup Iteration   6: 12525396.808 ops/s
# Warmup Iteration   7: 12557894.618 ops/s
# Warmup Iteration   8: 12534091.629 ops/s
# Warmup Iteration   9: 12483831.386 ops/s
# Warmup Iteration  10: 12533667.612 ops/s
# Warmup Iteration  11: 12523166.803 ops/s
# Warmup Iteration  12: 12545230.169 ops/s
# Warmup Iteration  13: 12530419.993 ops/s
# Warmup Iteration  14: 12520390.207 ops/s
# Warmup Iteration  15: 12526789.391 ops/s
# Warmup Iteration  16: 12519981.788 ops/s
# Warmup Iteration  17: 12546789.999 ops/s
# Warmup Iteration  18: 12537666.122 ops/s
# Warmup Iteration  19: 12521439.702 ops/s
# Warmup Iteration  20: 12536657.472 ops/s
# Warmup Iteration  21: 12510380.390 ops/s
# Warmup Iteration  22: 12536559.537 ops/s
# Warmup Iteration  23: 12529389.374 ops/s
# Warmup Iteration  24: 12541191.581 ops/s
# Warmup Iteration  25: 12515753.743 ops/s
# Warmup Iteration  26: 12430482.116 ops/s
# Warmup Iteration  27: 12431024.028 ops/s
# Warmup Iteration  28: 12538663.597 ops/s
# Warmup Iteration  29: 12533816.476 ops/s
# Warmup Iteration  30: 12520498.856 ops/s
Iteration   1: 12529830.536 ops/s
Iteration   2: 12536339.780 ops/s
Iteration   3: 12524852.859 ops/s
Iteration   4: 12516917.728 ops/s
Iteration   5: 12515214.314 ops/s
Iteration   6: 12465348.939 ops/s
Iteration   7: 12505594.739 ops/s
Iteration   8: 12477706.501 ops/s
Iteration   9: 12516309.118 ops/s
Iteration  10: 12541060.817 ops/s
Iteration  11: 12551988.972 ops/s
Iteration  12: 12562273.030 ops/s
Iteration  13: 12529451.003 ops/s
Iteration  14: 12539143.816 ops/s
Iteration  15: 12449876.420 ops/s
Iteration  16: 12533700.443 ops/s
Iteration  17: 12539678.640 ops/s
Iteration  18: 12515125.317 ops/s
Iteration  19: 12532733.876 ops/s
Iteration  20: 12539298.945 ops/s
Iteration  21: 12534730.764 ops/s
Iteration  22: 12496636.132 ops/s
Iteration  23: 12527014.963 ops/s
Iteration  24: 12503151.257 ops/s
Iteration  25: 12499160.350 ops/s
Iteration  26: 12515977.009 ops/s
Iteration  27: 12540427.078 ops/s
Iteration  28: 12509437.743 ops/s
Iteration  29: 12541601.186 ops/s
Iteration  30: 12543680.352 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_comparator":
  12521142.088 ±(99.9%) 16755.723 ops/s [Average]
  (min, avg, max) = (12449876.420, 12521142.088, 12562273.030), stdev = 25079.179
  CI (99.9%): [12504386.365, 12537897.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  12521142.088 ± 16755.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575164.436 ops/s
# Warmup Iteration   2: 614331.209 ops/s
# Warmup Iteration   3: 696692.086 ops/s
# Warmup Iteration   4: 782457.659 ops/s
# Warmup Iteration   5: 778779.928 ops/s
# Warmup Iteration   6: 781131.515 ops/s
# Warmup Iteration   7: 776469.559 ops/s
# Warmup Iteration   8: 782689.635 ops/s
# Warmup Iteration   9: 778960.756 ops/s
# Warmup Iteration  10: 777825.453 ops/s
# Warmup Iteration  11: 779742.898 ops/s
# Warmup Iteration  12: 780537.276 ops/s
# Warmup Iteration  13: 780690.966 ops/s
# Warmup Iteration  14: 766915.503 ops/s
# Warmup Iteration  15: 656703.390 ops/s
# Warmup Iteration  16: 780071.684 ops/s
# Warmup Iteration  17: 813317.517 ops/s
# Warmup Iteration  18: 812055.982 ops/s
# Warmup Iteration  19: 813884.839 ops/s
# Warmup Iteration  20: 813654.375 ops/s
# Warmup Iteration  21: 813439.305 ops/s
# Warmup Iteration  22: 813815.337 ops/s
# Warmup Iteration  23: 811818.469 ops/s
# Warmup Iteration  24: 813541.675 ops/s
# Warmup Iteration  25: 812179.332 ops/s
# Warmup Iteration  26: 812870.887 ops/s
# Warmup Iteration  27: 812898.032 ops/s
# Warmup Iteration  28: 811016.160 ops/s
# Warmup Iteration  29: 813252.659 ops/s
# Warmup Iteration  30: 811297.412 ops/s
Iteration   1: 813658.630 ops/s
Iteration   2: 813004.435 ops/s
Iteration   3: 813247.748 ops/s
Iteration   4: 812855.151 ops/s
Iteration   5: 811549.401 ops/s
Iteration   6: 814969.483 ops/s
Iteration   7: 813323.915 ops/s
Iteration   8: 812397.113 ops/s
Iteration   9: 810780.617 ops/s
Iteration  10: 809993.428 ops/s
Iteration  11: 813120.686 ops/s
Iteration  12: 810048.271 ops/s
Iteration  13: 810982.701 ops/s
Iteration  14: 811092.691 ops/s
Iteration  15: 811775.957 ops/s
Iteration  16: 814867.578 ops/s
Iteration  17: 813732.634 ops/s
Iteration  18: 812963.667 ops/s
Iteration  19: 808662.380 ops/s
Iteration  20: 810295.658 ops/s
Iteration  21: 811172.430 ops/s
Iteration  22: 810478.211 ops/s
Iteration  23: 811395.197 ops/s
Iteration  24: 810856.499 ops/s
Iteration  25: 813064.876 ops/s
Iteration  26: 812615.287 ops/s
Iteration  27: 810381.711 ops/s
Iteration  28: 809537.953 ops/s
Iteration  29: 810212.495 ops/s
Iteration  30: 810612.743 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_null":
  811788.318 ±(99.9%) 1069.462 ops/s [Average]
  (min, avg, max) = (808662.380, 811788.318, 814969.483), stdev = 1600.720
  CI (99.9%): [810718.856, 812857.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  811788.318 ± 1069.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649197.118 ops/s
# Warmup Iteration   2: 1523999.526 ops/s
# Warmup Iteration   3: 1581128.529 ops/s
# Warmup Iteration   4: 1352566.359 ops/s
# Warmup Iteration   5: 1554586.995 ops/s
# Warmup Iteration   6: 1568457.943 ops/s
# Warmup Iteration   7: 1574570.724 ops/s
# Warmup Iteration   8: 1582035.927 ops/s
# Warmup Iteration   9: 1579684.178 ops/s
# Warmup Iteration  10: 1579495.125 ops/s
# Warmup Iteration  11: 1580261.997 ops/s
# Warmup Iteration  12: 1582553.090 ops/s
# Warmup Iteration  13: 1578832.451 ops/s
# Warmup Iteration  14: 1582798.217 ops/s
# Warmup Iteration  15: 1580795.623 ops/s
# Warmup Iteration  16: 1578986.971 ops/s
# Warmup Iteration  17: 1583222.268 ops/s
# Warmup Iteration  18: 1578845.478 ops/s
# Warmup Iteration  19: 1580913.376 ops/s
# Warmup Iteration  20: 1581847.089 ops/s
# Warmup Iteration  21: 1581463.467 ops/s
# Warmup Iteration  22: 1578146.319 ops/s
# Warmup Iteration  23: 1582739.322 ops/s
# Warmup Iteration  24: 1582082.194 ops/s
# Warmup Iteration  25: 1580705.979 ops/s
# Warmup Iteration  26: 1582572.333 ops/s
# Warmup Iteration  27: 1574089.158 ops/s
# Warmup Iteration  28: 1578639.405 ops/s
# Warmup Iteration  29: 1581975.548 ops/s
# Warmup Iteration  30: 1583590.175 ops/s
Iteration   1: 1574542.186 ops/s
Iteration   2: 1536350.364 ops/s
Iteration   3: 1583249.446 ops/s
Iteration   4: 1580600.028 ops/s
Iteration   5: 1570306.738 ops/s
Iteration   6: 1570235.046 ops/s
Iteration   7: 1572496.262 ops/s
Iteration   8: 1581652.129 ops/s
Iteration   9: 1583022.033 ops/s
Iteration  10: 1579975.811 ops/s
Iteration  11: 1579982.676 ops/s
Iteration  12: 1581235.793 ops/s
Iteration  13: 1576836.064 ops/s
Iteration  14: 1569579.703 ops/s
Iteration  15: 1581285.857 ops/s
Iteration  16: 1578611.832 ops/s
Iteration  17: 1577011.017 ops/s
Iteration  18: 1578215.818 ops/s
Iteration  19: 1579873.757 ops/s
Iteration  20: 1578955.861 ops/s
Iteration  21: 1582801.966 ops/s
Iteration  22: 1585360.072 ops/s
Iteration  23: 1581086.043 ops/s
Iteration  24: 1582105.862 ops/s
Iteration  25: 1580121.389 ops/s
Iteration  26: 1583585.399 ops/s
Iteration  27: 1586110.399 ops/s
Iteration  28: 1584018.807 ops/s
Iteration  29: 1578038.703 ops/s
Iteration  30: 1580591.307 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap":
  1577927.946 ±(99.9%) 5981.385 ops/s [Average]
  (min, avg, max) = (1536350.364, 1577927.946, 1586110.399), stdev = 8952.656
  CI (99.9%): [1571946.560, 1583909.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedMap  thrpt   30  1577927.946 ± 5981.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543923.346 ops/s
# Warmup Iteration   2: 980118.160 ops/s
# Warmup Iteration   3: 1109858.843 ops/s
# Warmup Iteration   4: 1116131.140 ops/s
# Warmup Iteration   5: 1115635.292 ops/s
# Warmup Iteration   6: 931551.556 ops/s
# Warmup Iteration   7: 1119138.893 ops/s
# Warmup Iteration   8: 1116180.042 ops/s
# Warmup Iteration   9: 1115180.183 ops/s
# Warmup Iteration  10: 1115840.199 ops/s
# Warmup Iteration  11: 1117182.712 ops/s
# Warmup Iteration  12: 1115977.715 ops/s
# Warmup Iteration  13: 1117585.236 ops/s
# Warmup Iteration  14: 1116915.557 ops/s
# Warmup Iteration  15: 1117306.397 ops/s
# Warmup Iteration  16: 1115954.166 ops/s
# Warmup Iteration  17: 1116896.669 ops/s
# Warmup Iteration  18: 1116834.446 ops/s
# Warmup Iteration  19: 1117195.189 ops/s
# Warmup Iteration  20: 1116063.676 ops/s
# Warmup Iteration  21: 1116678.203 ops/s
# Warmup Iteration  22: 1110732.625 ops/s
# Warmup Iteration  23: 1117276.287 ops/s
# Warmup Iteration  24: 1117334.272 ops/s
# Warmup Iteration  25: 1117200.419 ops/s
# Warmup Iteration  26: 1118009.000 ops/s
# Warmup Iteration  27: 1118650.652 ops/s
# Warmup Iteration  28: 1108850.951 ops/s
# Warmup Iteration  29: 1105094.339 ops/s
# Warmup Iteration  30: 1108979.748 ops/s
Iteration   1: 1118863.776 ops/s
Iteration   2: 1117878.783 ops/s
Iteration   3: 1115669.093 ops/s
Iteration   4: 1116077.646 ops/s
Iteration   5: 1116128.305 ops/s
Iteration   6: 1117610.622 ops/s
Iteration   7: 1115998.881 ops/s
Iteration   8: 1119343.283 ops/s
Iteration   9: 1116110.640 ops/s
Iteration  10: 1117619.340 ops/s
Iteration  11: 1116005.205 ops/s
Iteration  12: 1117827.060 ops/s
Iteration  13: 1116618.474 ops/s
Iteration  14: 1116067.685 ops/s
Iteration  15: 1120312.518 ops/s
Iteration  16: 1116900.525 ops/s
Iteration  17: 1114521.238 ops/s
Iteration  18: 1118142.284 ops/s
Iteration  19: 1118423.945 ops/s
Iteration  20: 1114061.443 ops/s
Iteration  21: 1116497.300 ops/s
Iteration  22: 1120923.587 ops/s
Iteration  23: 1114553.180 ops/s
Iteration  24: 1118715.500 ops/s
Iteration  25: 1115779.434 ops/s
Iteration  26: 1118959.207 ops/s
Iteration  27: 1117573.620 ops/s
Iteration  28: 1118828.907 ops/s
Iteration  29: 1119291.594 ops/s
Iteration  30: 1116362.172 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMapBy":
  1117255.508 ±(99.9%) 1142.011 ops/s [Average]
  (min, avg, max) = (1114061.443, 1117255.508, 1120923.587), stdev = 1709.309
  CI (99.9%): [1116113.497, 1118397.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1117255.508 ± 1142.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630482.620 ops/s
# Warmup Iteration   2: 1425938.265 ops/s
# Warmup Iteration   3: 1480647.046 ops/s
# Warmup Iteration   4: 1427003.653 ops/s
# Warmup Iteration   5: 1321791.462 ops/s
# Warmup Iteration   6: 1491620.330 ops/s
# Warmup Iteration   7: 1490789.087 ops/s
# Warmup Iteration   8: 1494947.212 ops/s
# Warmup Iteration   9: 1493479.977 ops/s
# Warmup Iteration  10: 1491493.692 ops/s
# Warmup Iteration  11: 1494903.002 ops/s
# Warmup Iteration  12: 1495718.471 ops/s
# Warmup Iteration  13: 1494866.347 ops/s
# Warmup Iteration  14: 1497359.405 ops/s
# Warmup Iteration  15: 1497447.758 ops/s
# Warmup Iteration  16: 1494095.979 ops/s
# Warmup Iteration  17: 1497413.879 ops/s
# Warmup Iteration  18: 1491365.211 ops/s
# Warmup Iteration  19: 1497479.431 ops/s
# Warmup Iteration  20: 1497862.575 ops/s
# Warmup Iteration  21: 1498978.237 ops/s
# Warmup Iteration  22: 1496890.618 ops/s
# Warmup Iteration  23: 1497658.831 ops/s
# Warmup Iteration  24: 1493938.913 ops/s
# Warmup Iteration  25: 1493488.560 ops/s
# Warmup Iteration  26: 1492556.551 ops/s
# Warmup Iteration  27: 1493503.037 ops/s
# Warmup Iteration  28: 1494229.610 ops/s
# Warmup Iteration  29: 1495445.328 ops/s
# Warmup Iteration  30: 1498403.152 ops/s
Iteration   1: 1494598.872 ops/s
Iteration   2: 1488666.715 ops/s
Iteration   3: 1487485.246 ops/s
Iteration   4: 1487384.629 ops/s
Iteration   5: 1499886.951 ops/s
Iteration   6: 1494711.298 ops/s
Iteration   7: 1497806.475 ops/s
Iteration   8: 1496316.568 ops/s
Iteration   9: 1502109.693 ops/s
Iteration  10: 1496703.541 ops/s
Iteration  11: 1496900.804 ops/s
Iteration  12: 1489012.337 ops/s
Iteration  13: 1491922.633 ops/s
Iteration  14: 1496123.512 ops/s
Iteration  15: 1496158.522 ops/s
Iteration  16: 1491559.624 ops/s
Iteration  17: 1498567.886 ops/s
Iteration  18: 1497544.241 ops/s
Iteration  19: 1500694.100 ops/s
Iteration  20: 1498000.713 ops/s
Iteration  21: 1491580.960 ops/s
Iteration  22: 1487931.025 ops/s
Iteration  23: 1490905.881 ops/s
Iteration  24: 1493075.608 ops/s
Iteration  25: 1495409.062 ops/s
Iteration  26: 1496623.942 ops/s
Iteration  27: 1498406.203 ops/s
Iteration  28: 1498815.626 ops/s
Iteration  29: 1493903.184 ops/s
Iteration  30: 1492504.488 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1494710.345 ±(99.9%) 2723.152 ops/s [Average]
  (min, avg, max) = (1487384.629, 1494710.345, 1502109.693), stdev = 4075.886
  CI (99.9%): [1491987.193, 1497433.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1494710.345 ± 2723.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 764034.958 ops/s
# Warmup Iteration   2: 1698692.651 ops/s
# Warmup Iteration   3: 1770358.430 ops/s
# Warmup Iteration   4: 1642819.374 ops/s
# Warmup Iteration   5: 1609527.496 ops/s
# Warmup Iteration   6: 1769567.792 ops/s
# Warmup Iteration   7: 1767606.581 ops/s
# Warmup Iteration   8: 1770466.608 ops/s
# Warmup Iteration   9: 1770028.949 ops/s
# Warmup Iteration  10: 1770548.940 ops/s
# Warmup Iteration  11: 1772240.580 ops/s
# Warmup Iteration  12: 1772007.317 ops/s
# Warmup Iteration  13: 1770013.926 ops/s
# Warmup Iteration  14: 1775606.683 ops/s
# Warmup Iteration  15: 1768631.010 ops/s
# Warmup Iteration  16: 1771068.332 ops/s
# Warmup Iteration  17: 1770790.168 ops/s
# Warmup Iteration  18: 1768085.210 ops/s
# Warmup Iteration  19: 1774014.651 ops/s
# Warmup Iteration  20: 1770762.669 ops/s
# Warmup Iteration  21: 1770904.767 ops/s
# Warmup Iteration  22: 1770701.394 ops/s
# Warmup Iteration  23: 1769673.407 ops/s
# Warmup Iteration  24: 1772305.166 ops/s
# Warmup Iteration  25: 1771607.653 ops/s
# Warmup Iteration  26: 1772095.046 ops/s
# Warmup Iteration  27: 1768193.845 ops/s
# Warmup Iteration  28: 1768216.514 ops/s
# Warmup Iteration  29: 1768536.753 ops/s
# Warmup Iteration  30: 1769562.526 ops/s
Iteration   1: 1767792.507 ops/s
Iteration   2: 1772086.236 ops/s
Iteration   3: 1766651.515 ops/s
Iteration   4: 1767381.319 ops/s
Iteration   5: 1762681.256 ops/s
Iteration   6: 1769891.356 ops/s
Iteration   7: 1776240.885 ops/s
Iteration   8: 1769981.452 ops/s
Iteration   9: 1769138.230 ops/s
Iteration  10: 1767076.325 ops/s
Iteration  11: 1765610.613 ops/s
Iteration  12: 1768226.237 ops/s
Iteration  13: 1765393.070 ops/s
Iteration  14: 1762943.658 ops/s
Iteration  15: 1768103.049 ops/s
Iteration  16: 1775748.954 ops/s
Iteration  17: 1769155.994 ops/s
Iteration  18: 1772158.601 ops/s
Iteration  19: 1776102.253 ops/s
Iteration  20: 1773046.189 ops/s
Iteration  21: 1775984.110 ops/s
Iteration  22: 1771103.471 ops/s
Iteration  23: 1771039.580 ops/s
Iteration  24: 1774045.220 ops/s
Iteration  25: 1768677.242 ops/s
Iteration  26: 1774033.483 ops/s
Iteration  27: 1772245.008 ops/s
Iteration  28: 1771136.971 ops/s
Iteration  29: 1770399.174 ops/s
Iteration  30: 1771240.024 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSetBy":
  1770177.133 ±(99.9%) 2452.155 ops/s [Average]
  (min, avg, max) = (1762681.256, 1770177.133, 1776240.885), stdev = 3670.271
  CI (99.9%): [1767724.977, 1772629.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1770177.133 ± 2452.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1197133.167 ops/s
# Warmup Iteration   2: 2863082.806 ops/s
# Warmup Iteration   3: 2807096.902 ops/s
# Warmup Iteration   4: 2497180.140 ops/s
# Warmup Iteration   5: 2894048.689 ops/s
# Warmup Iteration   6: 2891724.421 ops/s
# Warmup Iteration   7: 2874021.445 ops/s
# Warmup Iteration   8: 2883926.975 ops/s
# Warmup Iteration   9: 2895833.347 ops/s
# Warmup Iteration  10: 2879849.411 ops/s
# Warmup Iteration  11: 2876366.420 ops/s
# Warmup Iteration  12: 2890476.306 ops/s
# Warmup Iteration  13: 2897145.744 ops/s
# Warmup Iteration  14: 2893176.629 ops/s
# Warmup Iteration  15: 2895645.100 ops/s
# Warmup Iteration  16: 2886523.873 ops/s
# Warmup Iteration  17: 2889565.347 ops/s
# Warmup Iteration  18: 2880177.798 ops/s
# Warmup Iteration  19: 2884724.593 ops/s
# Warmup Iteration  20: 2887530.499 ops/s
# Warmup Iteration  21: 2871900.153 ops/s
# Warmup Iteration  22: 2883348.803 ops/s
# Warmup Iteration  23: 2894269.176 ops/s
# Warmup Iteration  24: 2887220.666 ops/s
# Warmup Iteration  25: 2893428.087 ops/s
# Warmup Iteration  26: 2889891.311 ops/s
# Warmup Iteration  27: 2890675.920 ops/s
# Warmup Iteration  28: 2891915.729 ops/s
# Warmup Iteration  29: 2898027.860 ops/s
# Warmup Iteration  30: 2893448.329 ops/s
Iteration   1: 2894653.523 ops/s
Iteration   2: 2896757.129 ops/s
Iteration   3: 2894976.222 ops/s
Iteration   4: 2894164.485 ops/s
Iteration   5: 2887285.694 ops/s
Iteration   6: 2896715.854 ops/s
Iteration   7: 2890824.409 ops/s
Iteration   8: 2892014.461 ops/s
Iteration   9: 2891086.405 ops/s
Iteration  10: 2891829.988 ops/s
Iteration  11: 2887468.473 ops/s
Iteration  12: 2887518.007 ops/s
Iteration  13: 2891494.664 ops/s
Iteration  14: 2893699.332 ops/s
Iteration  15: 2895235.267 ops/s
Iteration  16: 2892841.897 ops/s
Iteration  17: 2887187.998 ops/s
Iteration  18: 2884829.712 ops/s
Iteration  19: 2882752.744 ops/s
Iteration  20: 2889197.870 ops/s
Iteration  21: 2879431.277 ops/s
Iteration  22: 2873556.935 ops/s
Iteration  23: 2891630.278 ops/s
Iteration  24: 2893349.841 ops/s
Iteration  25: 2900842.276 ops/s
Iteration  26: 2891075.181 ops/s
Iteration  27: 2895957.016 ops/s
Iteration  28: 2891071.943 ops/s
Iteration  29: 2893750.933 ops/s
Iteration  30: 2891880.643 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2890836.015 ±(99.9%) 3661.236 ops/s [Average]
  (min, avg, max) = (2873556.935, 2890836.015, 2900842.276), stdev = 5479.966
  CI (99.9%): [2887174.779, 2894497.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2890836.015 ± 3661.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1141366.681 ops/s
# Warmup Iteration   2: 2811490.302 ops/s
# Warmup Iteration   3: 2835930.710 ops/s
# Warmup Iteration   4: 2353382.752 ops/s
# Warmup Iteration   5: 2825627.763 ops/s
# Warmup Iteration   6: 2831626.456 ops/s
# Warmup Iteration   7: 2826258.360 ops/s
# Warmup Iteration   8: 2826233.822 ops/s
# Warmup Iteration   9: 2818132.463 ops/s
# Warmup Iteration  10: 2813407.816 ops/s
# Warmup Iteration  11: 2822846.577 ops/s
# Warmup Iteration  12: 2815119.689 ops/s
# Warmup Iteration  13: 2825494.374 ops/s
# Warmup Iteration  14: 2823693.505 ops/s
# Warmup Iteration  15: 2823712.158 ops/s
# Warmup Iteration  16: 2826585.317 ops/s
# Warmup Iteration  17: 2825011.839 ops/s
# Warmup Iteration  18: 2834950.322 ops/s
# Warmup Iteration  19: 2833339.677 ops/s
# Warmup Iteration  20: 2840282.113 ops/s
# Warmup Iteration  21: 2826360.538 ops/s
# Warmup Iteration  22: 2838678.778 ops/s
# Warmup Iteration  23: 2831795.814 ops/s
# Warmup Iteration  24: 2833513.348 ops/s
# Warmup Iteration  25: 2837768.372 ops/s
# Warmup Iteration  26: 2830885.139 ops/s
# Warmup Iteration  27: 2838899.122 ops/s
# Warmup Iteration  28: 2826569.872 ops/s
# Warmup Iteration  29: 2828306.738 ops/s
# Warmup Iteration  30: 2835587.260 ops/s
Iteration   1: 2819283.653 ops/s
Iteration   2: 2814316.886 ops/s
Iteration   3: 2817393.684 ops/s
Iteration   4: 2829529.680 ops/s
Iteration   5: 2819717.692 ops/s
Iteration   6: 2833123.766 ops/s
Iteration   7: 2819331.313 ops/s
Iteration   8: 2818396.835 ops/s
Iteration   9: 2816637.955 ops/s
Iteration  10: 2816093.086 ops/s
Iteration  11: 2820578.023 ops/s
Iteration  12: 2816755.593 ops/s
Iteration  13: 2803399.938 ops/s
Iteration  14: 2816186.790 ops/s
Iteration  15: 2834819.284 ops/s
Iteration  16: 2834450.944 ops/s
Iteration  17: 2835753.014 ops/s
Iteration  18: 2830913.799 ops/s
Iteration  19: 2831811.511 ops/s
Iteration  20: 2827930.060 ops/s
Iteration  21: 2831524.302 ops/s
Iteration  22: 2832885.641 ops/s
Iteration  23: 2837245.300 ops/s
Iteration  24: 2838261.807 ops/s
Iteration  25: 2837087.726 ops/s
Iteration  26: 2841055.162 ops/s
Iteration  27: 2839564.313 ops/s
Iteration  28: 2837143.670 ops/s
Iteration  29: 2835929.177 ops/s
Iteration  30: 2833156.569 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2827342.572 ±(99.9%) 6544.426 ops/s [Average]
  (min, avg, max) = (2803399.938, 2827342.572, 2841055.162), stdev = 9795.390
  CI (99.9%): [2820798.146, 2833886.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2827342.572 ± 6544.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9612196.808 ops/s
# Warmup Iteration   2: 19575128.676 ops/s
# Warmup Iteration   3: 16951437.608 ops/s
# Warmup Iteration   4: 19987756.407 ops/s
# Warmup Iteration   5: 19862695.806 ops/s
# Warmup Iteration   6: 19866196.511 ops/s
# Warmup Iteration   7: 19938036.796 ops/s
# Warmup Iteration   8: 19985010.710 ops/s
# Warmup Iteration   9: 19864522.890 ops/s
# Warmup Iteration  10: 19967883.815 ops/s
# Warmup Iteration  11: 19908753.349 ops/s
# Warmup Iteration  12: 19987334.784 ops/s
# Warmup Iteration  13: 19895351.885 ops/s
# Warmup Iteration  14: 20015435.365 ops/s
# Warmup Iteration  15: 19925000.258 ops/s
# Warmup Iteration  16: 19942488.674 ops/s
# Warmup Iteration  17: 20032427.283 ops/s
# Warmup Iteration  18: 19864052.085 ops/s
# Warmup Iteration  19: 19999172.194 ops/s
# Warmup Iteration  20: 19825436.177 ops/s
# Warmup Iteration  21: 19943957.108 ops/s
# Warmup Iteration  22: 19961120.524 ops/s
# Warmup Iteration  23: 20019261.166 ops/s
# Warmup Iteration  24: 19956993.255 ops/s
# Warmup Iteration  25: 19978270.144 ops/s
# Warmup Iteration  26: 19870907.256 ops/s
# Warmup Iteration  27: 19916060.301 ops/s
# Warmup Iteration  28: 19865314.337 ops/s
# Warmup Iteration  29: 19906652.559 ops/s
# Warmup Iteration  30: 19926481.544 ops/s
Iteration   1: 20009370.868 ops/s
Iteration   2: 19924690.367 ops/s
Iteration   3: 19948514.033 ops/s
Iteration   4: 19975995.542 ops/s
Iteration   5: 19937602.515 ops/s
Iteration   6: 19889127.459 ops/s
Iteration   7: 19856446.916 ops/s
Iteration   8: 20045075.877 ops/s
Iteration   9: 20079363.944 ops/s
Iteration  10: 19940970.804 ops/s
Iteration  11: 19954830.749 ops/s
Iteration  12: 19900437.359 ops/s
Iteration  13: 19854467.643 ops/s
Iteration  14: 19850076.278 ops/s
Iteration  15: 19913987.977 ops/s
Iteration  16: 20005330.931 ops/s
Iteration  17: 20025851.768 ops/s
Iteration  18: 19989904.418 ops/s
Iteration  19: 19889493.510 ops/s
Iteration  20: 19874692.708 ops/s
Iteration  21: 19819618.009 ops/s
Iteration  22: 19900600.335 ops/s
Iteration  23: 20065519.651 ops/s
Iteration  24: 19968717.144 ops/s
Iteration  25: 19976696.106 ops/s
Iteration  26: 19842145.242 ops/s
Iteration  27: 19912809.828 ops/s
Iteration  28: 19784978.916 ops/s
Iteration  29: 19981380.051 ops/s
Iteration  30: 19931460.723 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_toStack":
  19935005.256 ±(99.9%) 48784.178 ops/s [Average]
  (min, avg, max) = (19784978.916, 19935005.256, 20079363.944), stdev = 73017.866
  CI (99.9%): [19886221.078, 19983789.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_toStack  thrpt   30  19935005.256 ± 48784.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7567560.653 ops/s
# Warmup Iteration   2: 17730020.390 ops/s
# Warmup Iteration   3: 13867174.087 ops/s
# Warmup Iteration   4: 16763385.350 ops/s
# Warmup Iteration   5: 16798071.676 ops/s
# Warmup Iteration   6: 16764541.162 ops/s
# Warmup Iteration   7: 16783208.782 ops/s
# Warmup Iteration   8: 16757554.414 ops/s
# Warmup Iteration   9: 16762467.533 ops/s
# Warmup Iteration  10: 16715796.410 ops/s
# Warmup Iteration  11: 16782052.490 ops/s
# Warmup Iteration  12: 16752853.921 ops/s
# Warmup Iteration  13: 16725216.454 ops/s
# Warmup Iteration  14: 16765960.144 ops/s
# Warmup Iteration  15: 16716919.712 ops/s
# Warmup Iteration  16: 16779033.977 ops/s
# Warmup Iteration  17: 16764382.651 ops/s
# Warmup Iteration  18: 16718910.854 ops/s
# Warmup Iteration  19: 16736520.814 ops/s
# Warmup Iteration  20: 16777069.669 ops/s
# Warmup Iteration  21: 16747989.093 ops/s
# Warmup Iteration  22: 16761952.918 ops/s
# Warmup Iteration  23: 16774259.394 ops/s
# Warmup Iteration  24: 16751217.610 ops/s
# Warmup Iteration  25: 16791418.546 ops/s
# Warmup Iteration  26: 16785747.179 ops/s
# Warmup Iteration  27: 16766111.807 ops/s
# Warmup Iteration  28: 16784627.887 ops/s
# Warmup Iteration  29: 16783401.061 ops/s
# Warmup Iteration  30: 16763027.452 ops/s
Iteration   1: 16782687.017 ops/s
Iteration   2: 16743194.051 ops/s
Iteration   3: 16798111.269 ops/s
Iteration   4: 16709919.836 ops/s
Iteration   5: 16722942.976 ops/s
Iteration   6: 16744524.530 ops/s
Iteration   7: 16720813.978 ops/s
Iteration   8: 16819755.944 ops/s
Iteration   9: 16779200.555 ops/s
Iteration  10: 16752053.234 ops/s
Iteration  11: 16696298.670 ops/s
Iteration  12: 16790838.733 ops/s
Iteration  13: 16769449.505 ops/s
Iteration  14: 16739176.533 ops/s
Iteration  15: 16761913.459 ops/s
Iteration  16: 16665312.544 ops/s
Iteration  17: 16763433.428 ops/s
Iteration  18: 16811859.502 ops/s
Iteration  19: 16783426.094 ops/s
Iteration  20: 16718702.013 ops/s
Iteration  21: 16769528.988 ops/s
Iteration  22: 16733214.165 ops/s
Iteration  23: 16747537.836 ops/s
Iteration  24: 16699621.523 ops/s
Iteration  25: 16796285.264 ops/s
Iteration  26: 16781468.125 ops/s
Iteration  27: 16738575.239 ops/s
Iteration  28: 16739903.084 ops/s
Iteration  29: 16753525.353 ops/s
Iteration  30: 16784193.629 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_with":
  16753915.569 ±(99.9%) 24226.570 ops/s [Average]
  (min, avg, max) = (16665312.544, 16753915.569, 16819755.944), stdev = 36261.193
  CI (99.9%): [16729688.999, 16778142.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_with  thrpt   30  16753915.569 ± 24226.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6069211.615 ops/s
# Warmup Iteration   2: 13435733.540 ops/s
# Warmup Iteration   3: 11404554.883 ops/s
# Warmup Iteration   4: 13601699.492 ops/s
# Warmup Iteration   5: 13619561.064 ops/s
# Warmup Iteration   6: 13614678.370 ops/s
# Warmup Iteration   7: 13616444.246 ops/s
# Warmup Iteration   8: 13604821.066 ops/s
# Warmup Iteration   9: 13606286.653 ops/s
# Warmup Iteration  10: 13621454.930 ops/s
# Warmup Iteration  11: 13644012.448 ops/s
# Warmup Iteration  12: 12604675.665 ops/s
# Warmup Iteration  13: 13612437.371 ops/s
# Warmup Iteration  14: 13618325.175 ops/s
# Warmup Iteration  15: 13614389.838 ops/s
# Warmup Iteration  16: 13565984.921 ops/s
# Warmup Iteration  17: 13599889.194 ops/s
# Warmup Iteration  18: 13597237.479 ops/s
# Warmup Iteration  19: 13633112.704 ops/s
# Warmup Iteration  20: 13608916.967 ops/s
# Warmup Iteration  21: 13595371.931 ops/s
# Warmup Iteration  22: 13615034.658 ops/s
# Warmup Iteration  23: 13588308.046 ops/s
# Warmup Iteration  24: 13623886.595 ops/s
# Warmup Iteration  25: 13617797.092 ops/s
# Warmup Iteration  26: 13633117.350 ops/s
# Warmup Iteration  27: 13610324.804 ops/s
# Warmup Iteration  28: 13618375.744 ops/s
# Warmup Iteration  29: 13637723.317 ops/s
# Warmup Iteration  30: 13653630.217 ops/s
Iteration   1: 13643609.102 ops/s
Iteration   2: 13635797.432 ops/s
Iteration   3: 13447938.822 ops/s
Iteration   4: 13591716.995 ops/s
Iteration   5: 13604691.992 ops/s
Iteration   6: 13669250.525 ops/s
Iteration   7: 13603138.772 ops/s
Iteration   8: 13639136.770 ops/s
Iteration   9: 13588601.413 ops/s
Iteration  10: 13627154.444 ops/s
Iteration  11: 13576863.935 ops/s
Iteration  12: 13646161.236 ops/s
Iteration  13: 13610500.089 ops/s
Iteration  14: 13669105.006 ops/s
Iteration  15: 13593684.770 ops/s
Iteration  16: 13700115.314 ops/s
Iteration  17: 13572165.902 ops/s
Iteration  18: 13664402.551 ops/s
Iteration  19: 13488513.845 ops/s
Iteration  20: 13581111.459 ops/s
Iteration  21: 13596881.750 ops/s
Iteration  22: 13629999.375 ops/s
Iteration  23: 13647357.457 ops/s
Iteration  24: 13628226.789 ops/s
Iteration  25: 13562516.553 ops/s
Iteration  26: 13572146.592 ops/s
Iteration  27: 13623800.164 ops/s
Iteration  28: 13596624.387 ops/s
Iteration  29: 13662259.978 ops/s
Iteration  30: 13582638.984 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withAll":
  13608537.080 ±(99.9%) 34565.801 ops/s [Average]
  (min, avg, max) = (13447938.822, 13608537.080, 13700115.314), stdev = 51736.468
  CI (99.9%): [13573971.279, 13643102.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_withAll  thrpt   30  13608537.080 ± 34565.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withMethods$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withMethods

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3445458.980 ops/s
# Warmup Iteration   2: 6061103.458 ops/s
# Warmup Iteration   3: 7232565.895 ops/s
# Warmup Iteration   4: 7259053.742 ops/s
# Warmup Iteration   5: 7250851.953 ops/s
# Warmup Iteration   6: 7307340.074 ops/s
# Warmup Iteration   7: 7313985.315 ops/s
# Warmup Iteration   8: 7252918.754 ops/s
# Warmup Iteration   9: 7229174.879 ops/s
# Warmup Iteration  10: 7262071.871 ops/s
# Warmup Iteration  11: 7273097.108 ops/s
# Warmup Iteration  12: 7259433.706 ops/s
# Warmup Iteration  13: 7236830.456 ops/s
# Warmup Iteration  14: 7306155.115 ops/s
# Warmup Iteration  15: 7274922.792 ops/s
# Warmup Iteration  16: 7295321.356 ops/s
# Warmup Iteration  17: 7249477.421 ops/s
# Warmup Iteration  18: 7244370.959 ops/s
# Warmup Iteration  19: 7299786.112 ops/s
# Warmup Iteration  20: 7278048.676 ops/s
# Warmup Iteration  21: 7325620.375 ops/s
# Warmup Iteration  22: 7287258.024 ops/s
# Warmup Iteration  23: 7276871.363 ops/s
# Warmup Iteration  24: 7253255.648 ops/s
# Warmup Iteration  25: 7256941.912 ops/s
# Warmup Iteration  26: 7296083.146 ops/s
# Warmup Iteration  27: 7307385.367 ops/s
# Warmup Iteration  28: 7296322.372 ops/s
# Warmup Iteration  29: 7241301.940 ops/s
# Warmup Iteration  30: 7296679.862 ops/s
Iteration   1: 7326641.907 ops/s
Iteration   2: 7260961.580 ops/s
Iteration   3: 7252076.723 ops/s
Iteration   4: 7269855.685 ops/s
Iteration   5: 7220856.432 ops/s
Iteration   6: 7296842.001 ops/s
Iteration   7: 7288220.114 ops/s
Iteration   8: 7283608.683 ops/s
Iteration   9: 7248598.207 ops/s
Iteration  10: 7271917.335 ops/s
Iteration  11: 7260865.711 ops/s
Iteration  12: 7259007.181 ops/s
Iteration  13: 7285361.518 ops/s
Iteration  14: 7240295.206 ops/s
Iteration  15: 7277611.467 ops/s
Iteration  16: 7234012.474 ops/s
Iteration  17: 7255079.454 ops/s
Iteration  18: 7294988.612 ops/s
Iteration  19: 7288374.201 ops/s
Iteration  20: 7262218.164 ops/s
Iteration  21: 7250140.461 ops/s
Iteration  22: 7271534.297 ops/s
Iteration  23: 7258309.696 ops/s
Iteration  24: 7236570.912 ops/s
Iteration  25: 7291620.327 ops/s
Iteration  26: 7290904.251 ops/s
Iteration  27: 7286419.248 ops/s
Iteration  28: 7288303.724 ops/s
Iteration  29: 7277231.113 ops/s
Iteration  30: 7298111.739 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withMethods":
  7270884.614 ±(99.9%) 15508.511 ops/s [Average]
  (min, avg, max) = (7220856.432, 7270884.614, 7326641.907), stdev = 23212.411
  CI (99.9%): [7255376.103, 7286393.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_withMethods  thrpt   30  7270884.614 ± 15508.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5349479.688 ops/s
# Warmup Iteration   2: 13008172.428 ops/s
# Warmup Iteration   3: 11597666.089 ops/s
# Warmup Iteration   4: 12526224.333 ops/s
# Warmup Iteration   5: 13159355.386 ops/s
# Warmup Iteration   6: 13118856.969 ops/s
# Warmup Iteration   7: 13140295.928 ops/s
# Warmup Iteration   8: 13162190.694 ops/s
# Warmup Iteration   9: 13192533.866 ops/s
# Warmup Iteration  10: 13121632.039 ops/s
# Warmup Iteration  11: 13170552.998 ops/s
# Warmup Iteration  12: 13168549.101 ops/s
# Warmup Iteration  13: 13140676.023 ops/s
# Warmup Iteration  14: 13181792.629 ops/s
# Warmup Iteration  15: 13071121.524 ops/s
# Warmup Iteration  16: 13166956.840 ops/s
# Warmup Iteration  17: 13160923.848 ops/s
# Warmup Iteration  18: 13101881.538 ops/s
# Warmup Iteration  19: 13128684.795 ops/s
# Warmup Iteration  20: 13147147.016 ops/s
# Warmup Iteration  21: 13158143.850 ops/s
# Warmup Iteration  22: 13170999.044 ops/s
# Warmup Iteration  23: 13175407.397 ops/s
# Warmup Iteration  24: 13159346.718 ops/s
# Warmup Iteration  25: 13166418.275 ops/s
# Warmup Iteration  26: 13175378.677 ops/s
# Warmup Iteration  27: 13157306.485 ops/s
# Warmup Iteration  28: 13147634.303 ops/s
# Warmup Iteration  29: 13112602.128 ops/s
# Warmup Iteration  30: 13165441.522 ops/s
Iteration   1: 13199765.885 ops/s
Iteration   2: 13173089.387 ops/s
Iteration   3: 13169260.304 ops/s
Iteration   4: 13118779.043 ops/s
Iteration   5: 13190695.325 ops/s
Iteration   6: 13197545.128 ops/s
Iteration   7: 13179347.013 ops/s
Iteration   8: 13183328.648 ops/s
Iteration   9: 13143696.099 ops/s
Iteration  10: 13158200.181 ops/s
Iteration  11: 13149407.837 ops/s
Iteration  12: 13157360.357 ops/s
Iteration  13: 13163144.417 ops/s
Iteration  14: 13105272.387 ops/s
Iteration  15: 13154902.517 ops/s
Iteration  16: 13149640.819 ops/s
Iteration  17: 13177475.021 ops/s
Iteration  18: 13157186.223 ops/s
Iteration  19: 13152481.208 ops/s
Iteration  20: 13146513.924 ops/s
Iteration  21: 13124217.386 ops/s
Iteration  22: 13163321.512 ops/s
Iteration  23: 13176911.195 ops/s
Iteration  24: 12974076.244 ops/s
Iteration  25: 13158500.060 ops/s
Iteration  26: 13125430.975 ops/s
Iteration  27: 13052263.852 ops/s
Iteration  28: 13127481.685 ops/s
Iteration  29: 13132804.373 ops/s
Iteration  30: 13178092.972 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_without":
  13148006.399 ±(99.9%) 29787.227 ops/s [Average]
  (min, avg, max) = (12974076.244, 13148006.399, 13199765.885), stdev = 44584.122
  CI (99.9%): [13118219.173, 13177793.626] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_without  thrpt   30  13148006.399 ± 29787.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 867967.513 ops/s
# Warmup Iteration   2: 960911.338 ops/s
# Warmup Iteration   3: 1163963.217 ops/s
# Warmup Iteration   4: 1255119.314 ops/s
# Warmup Iteration   5: 1256615.657 ops/s
# Warmup Iteration   6: 1244107.957 ops/s
# Warmup Iteration   7: 1256588.094 ops/s
# Warmup Iteration   8: 1255459.935 ops/s
# Warmup Iteration   9: 1258808.282 ops/s
# Warmup Iteration  10: 1253477.622 ops/s
# Warmup Iteration  11: 1251846.000 ops/s
# Warmup Iteration  12: 1256429.683 ops/s
# Warmup Iteration  13: 1115466.581 ops/s
# Warmup Iteration  14: 1173479.212 ops/s
# Warmup Iteration  15: 1244868.990 ops/s
# Warmup Iteration  16: 1243898.099 ops/s
# Warmup Iteration  17: 1256898.334 ops/s
# Warmup Iteration  18: 1256096.204 ops/s
# Warmup Iteration  19: 1255599.767 ops/s
# Warmup Iteration  20: 1256181.475 ops/s
# Warmup Iteration  21: 1250457.920 ops/s
# Warmup Iteration  22: 1250762.482 ops/s
# Warmup Iteration  23: 1254871.107 ops/s
# Warmup Iteration  24: 1256725.150 ops/s
# Warmup Iteration  25: 1254716.731 ops/s
# Warmup Iteration  26: 1256786.089 ops/s
# Warmup Iteration  27: 1255470.736 ops/s
# Warmup Iteration  28: 1258280.187 ops/s
# Warmup Iteration  29: 1258007.785 ops/s
# Warmup Iteration  30: 1256835.782 ops/s
Iteration   1: 1254103.935 ops/s
Iteration   2: 1256538.122 ops/s
Iteration   3: 1257474.537 ops/s
Iteration   4: 1253823.151 ops/s
Iteration   5: 1256322.171 ops/s
Iteration   6: 1255450.146 ops/s
Iteration   7: 1256313.397 ops/s
Iteration   8: 1253862.602 ops/s
Iteration   9: 1255363.939 ops/s
Iteration  10: 1255107.947 ops/s
Iteration  11: 1253878.229 ops/s
Iteration  12: 1259267.165 ops/s
Iteration  13: 1253640.361 ops/s
Iteration  14: 1258199.184 ops/s
Iteration  15: 1256640.964 ops/s
Iteration  16: 1258513.557 ops/s
Iteration  17: 1256494.727 ops/s
Iteration  18: 1257041.157 ops/s
Iteration  19: 1257575.506 ops/s
Iteration  20: 1258258.079 ops/s
Iteration  21: 1258432.124 ops/s
Iteration  22: 1255696.027 ops/s
Iteration  23: 1258704.574 ops/s
Iteration  24: 1257310.627 ops/s
Iteration  25: 1257918.109 ops/s
Iteration  26: 1257065.437 ops/s
Iteration  27: 1254767.367 ops/s
Iteration  28: 1257683.077 ops/s
Iteration  29: 1258409.860 ops/s
Iteration  30: 1257229.602 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_withoutAll":
  1256569.523 ±(99.9%) 1110.266 ops/s [Average]
  (min, avg, max) = (1253640.361, 1256569.523, 1259267.165), stdev = 1661.794
  CI (99.9%): [1255459.257, 1257679.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_withoutAll  thrpt   30  1256569.523 ± 1110.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 170097.566 ops/s
# Warmup Iteration   2: 188213.382 ops/s
# Warmup Iteration   3: 222205.918 ops/s
# Warmup Iteration   4: 243049.400 ops/s
# Warmup Iteration   5: 242769.662 ops/s
# Warmup Iteration   6: 241774.056 ops/s
# Warmup Iteration   7: 244009.046 ops/s
# Warmup Iteration   8: 243456.037 ops/s
# Warmup Iteration   9: 243366.002 ops/s
# Warmup Iteration  10: 243519.203 ops/s
# Warmup Iteration  11: 243699.403 ops/s
# Warmup Iteration  12: 243447.510 ops/s
# Warmup Iteration  13: 243662.198 ops/s
# Warmup Iteration  14: 202758.372 ops/s
# Warmup Iteration  15: 236335.957 ops/s
# Warmup Iteration  16: 236297.604 ops/s
# Warmup Iteration  17: 243187.765 ops/s
# Warmup Iteration  18: 243489.615 ops/s
# Warmup Iteration  19: 243329.924 ops/s
# Warmup Iteration  20: 243517.814 ops/s
# Warmup Iteration  21: 243405.965 ops/s
# Warmup Iteration  22: 243460.676 ops/s
# Warmup Iteration  23: 243678.135 ops/s
# Warmup Iteration  24: 243538.775 ops/s
# Warmup Iteration  25: 243622.051 ops/s
# Warmup Iteration  26: 243064.555 ops/s
# Warmup Iteration  27: 243542.152 ops/s
# Warmup Iteration  28: 243843.226 ops/s
# Warmup Iteration  29: 243658.181 ops/s
# Warmup Iteration  30: 243851.581 ops/s
Iteration   1: 243512.344 ops/s
Iteration   2: 243941.024 ops/s
Iteration   3: 243823.385 ops/s
Iteration   4: 243818.910 ops/s
Iteration   5: 243863.915 ops/s
Iteration   6: 243119.096 ops/s
Iteration   7: 243757.780 ops/s
Iteration   8: 243472.460 ops/s
Iteration   9: 243619.545 ops/s
Iteration  10: 244030.685 ops/s
Iteration  11: 243213.164 ops/s
Iteration  12: 243849.395 ops/s
Iteration  13: 243878.225 ops/s
Iteration  14: 243948.404 ops/s
Iteration  15: 244015.219 ops/s
Iteration  16: 243571.804 ops/s
Iteration  17: 243766.451 ops/s
Iteration  18: 243963.754 ops/s
Iteration  19: 243499.693 ops/s
Iteration  20: 243732.560 ops/s
Iteration  21: 243196.012 ops/s
Iteration  22: 243751.113 ops/s
Iteration  23: 243451.399 ops/s
Iteration  24: 243778.220 ops/s
Iteration  25: 242893.714 ops/s
Iteration  26: 243485.337 ops/s
Iteration  27: 243470.418 ops/s
Iteration  28: 243186.415 ops/s
Iteration  29: 243263.491 ops/s
Iteration  30: 243475.154 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zip":
  243611.636 ±(99.9%) 199.500 ops/s [Average]
  (min, avg, max) = (242893.714, 243611.636, 244030.685), stdev = 298.602
  CI (99.9%): [243412.136, 243811.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_zip  thrpt   30  243611.636 ± 199.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465891.778 ops/s
# Warmup Iteration   2: 776963.848 ops/s
# Warmup Iteration   3: 890695.913 ops/s
# Warmup Iteration   4: 896413.308 ops/s
# Warmup Iteration   5: 897216.919 ops/s
# Warmup Iteration   6: 755552.914 ops/s
# Warmup Iteration   7: 896793.040 ops/s
# Warmup Iteration   8: 897302.387 ops/s
# Warmup Iteration   9: 900682.110 ops/s
# Warmup Iteration  10: 904427.046 ops/s
# Warmup Iteration  11: 895279.051 ops/s
# Warmup Iteration  12: 902976.504 ops/s
# Warmup Iteration  13: 898157.657 ops/s
# Warmup Iteration  14: 895412.107 ops/s
# Warmup Iteration  15: 901666.570 ops/s
# Warmup Iteration  16: 900403.204 ops/s
# Warmup Iteration  17: 899848.992 ops/s
# Warmup Iteration  18: 891596.357 ops/s
# Warmup Iteration  19: 881068.490 ops/s
# Warmup Iteration  20: 885295.551 ops/s
# Warmup Iteration  21: 894481.705 ops/s
# Warmup Iteration  22: 886358.446 ops/s
# Warmup Iteration  23: 896316.587 ops/s
# Warmup Iteration  24: 892522.675 ops/s
# Warmup Iteration  25: 890849.382 ops/s
# Warmup Iteration  26: 873043.973 ops/s
# Warmup Iteration  27: 887000.134 ops/s
# Warmup Iteration  28: 888581.119 ops/s
# Warmup Iteration  29: 888753.222 ops/s
# Warmup Iteration  30: 895334.859 ops/s
Iteration   1: 897428.167 ops/s
Iteration   2: 897516.406 ops/s
Iteration   3: 883790.519 ops/s
Iteration   4: 889473.824 ops/s
Iteration   5: 893626.099 ops/s
Iteration   6: 890679.299 ops/s
Iteration   7: 886856.821 ops/s
Iteration   8: 887417.138 ops/s
Iteration   9: 897439.614 ops/s
Iteration  10: 897317.854 ops/s
Iteration  11: 894212.150 ops/s
Iteration  12: 897289.395 ops/s
Iteration  13: 897929.404 ops/s
Iteration  14: 896839.660 ops/s
Iteration  15: 891966.417 ops/s
Iteration  16: 889333.441 ops/s
Iteration  17: 897435.626 ops/s
Iteration  18: 883655.157 ops/s
Iteration  19: 897182.118 ops/s
Iteration  20: 884331.554 ops/s
Iteration  21: 893855.352 ops/s
Iteration  22: 895967.362 ops/s
Iteration  23: 895790.956 ops/s
Iteration  24: 889378.456 ops/s
Iteration  25: 897725.373 ops/s
Iteration  26: 896492.472 ops/s
Iteration  27: 885224.979 ops/s
Iteration  28: 885922.606 ops/s
Iteration  29: 894093.362 ops/s
Iteration  30: 889582.519 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_zipWithIndex":
  892525.137 ±(99.9%) 3294.089 ops/s [Average]
  (min, avg, max) = (883655.157, 892525.137, 897929.404), stdev = 4930.438
  CI (99.9%): [889231.047, 895819.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_zipWithIndex  thrpt   30  892525.137 ± 3294.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502994.527 ops/s
# Warmup Iteration   2: 677611.874 ops/s
# Warmup Iteration   3: 799054.837 ops/s
# Warmup Iteration   4: 799155.349 ops/s
# Warmup Iteration   5: 799590.817 ops/s
# Warmup Iteration   6: 799103.446 ops/s
# Warmup Iteration   7: 799647.172 ops/s
# Warmup Iteration   8: 677983.695 ops/s
# Warmup Iteration   9: 797161.538 ops/s
# Warmup Iteration  10: 800697.756 ops/s
# Warmup Iteration  11: 801511.123 ops/s
# Warmup Iteration  12: 798520.634 ops/s
# Warmup Iteration  13: 799040.703 ops/s
# Warmup Iteration  14: 798651.869 ops/s
# Warmup Iteration  15: 797436.587 ops/s
# Warmup Iteration  16: 801037.078 ops/s
# Warmup Iteration  17: 842263.082 ops/s
# Warmup Iteration  18: 841260.828 ops/s
# Warmup Iteration  19: 841772.694 ops/s
# Warmup Iteration  20: 842794.272 ops/s
# Warmup Iteration  21: 842395.919 ops/s
# Warmup Iteration  22: 842357.598 ops/s
# Warmup Iteration  23: 841377.669 ops/s
# Warmup Iteration  24: 844921.004 ops/s
# Warmup Iteration  25: 841491.617 ops/s
# Warmup Iteration  26: 840928.600 ops/s
# Warmup Iteration  27: 838850.193 ops/s
# Warmup Iteration  28: 840683.715 ops/s
# Warmup Iteration  29: 839892.654 ops/s
# Warmup Iteration  30: 842501.564 ops/s
Iteration   1: 840851.243 ops/s
Iteration   2: 844326.724 ops/s
Iteration   3: 844274.612 ops/s
Iteration   4: 840732.750 ops/s
Iteration   5: 840574.958 ops/s
Iteration   6: 840946.628 ops/s
Iteration   7: 843226.574 ops/s
Iteration   8: 840973.304 ops/s
Iteration   9: 844110.493 ops/s
Iteration  10: 842951.128 ops/s
Iteration  11: 839516.842 ops/s
Iteration  12: 840996.689 ops/s
Iteration  13: 840266.236 ops/s
Iteration  14: 840598.731 ops/s
Iteration  15: 839241.550 ops/s
Iteration  16: 839495.522 ops/s
Iteration  17: 839154.989 ops/s
Iteration  18: 837494.257 ops/s
Iteration  19: 838616.422 ops/s
Iteration  20: 839729.662 ops/s
Iteration  21: 842534.362 ops/s
Iteration  22: 842944.768 ops/s
Iteration  23: 844048.669 ops/s
Iteration  24: 842509.131 ops/s
Iteration  25: 839348.046 ops/s
Iteration  26: 841697.277 ops/s
Iteration  27: 840707.075 ops/s
Iteration  28: 841564.859 ops/s
Iteration  29: 842145.982 ops/s
Iteration  30: 834801.075 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_add":
  841012.685 ±(99.9%) 1429.799 ops/s [Average]
  (min, avg, max) = (834801.075, 841012.685, 844326.724), stdev = 2140.056
  CI (99.9%): [839582.886, 842442.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_add  thrpt   30  841012.685 ± 1429.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470332.401 ops/s
# Warmup Iteration   2: 670244.728 ops/s
# Warmup Iteration   3: 750516.116 ops/s
# Warmup Iteration   4: 751292.914 ops/s
# Warmup Iteration   5: 749890.078 ops/s
# Warmup Iteration   6: 748734.313 ops/s
# Warmup Iteration   7: 644052.869 ops/s
# Warmup Iteration   8: 750995.075 ops/s
# Warmup Iteration   9: 752162.067 ops/s
# Warmup Iteration  10: 751006.933 ops/s
# Warmup Iteration  11: 752163.190 ops/s
# Warmup Iteration  12: 751758.468 ops/s
# Warmup Iteration  13: 750761.714 ops/s
# Warmup Iteration  14: 750726.169 ops/s
# Warmup Iteration  15: 750236.725 ops/s
# Warmup Iteration  16: 751142.040 ops/s
# Warmup Iteration  17: 791657.508 ops/s
# Warmup Iteration  18: 786865.164 ops/s
# Warmup Iteration  19: 786241.765 ops/s
# Warmup Iteration  20: 785093.096 ops/s
# Warmup Iteration  21: 781682.576 ops/s
# Warmup Iteration  22: 784632.425 ops/s
# Warmup Iteration  23: 785788.376 ops/s
# Warmup Iteration  24: 789545.342 ops/s
# Warmup Iteration  25: 786438.220 ops/s
# Warmup Iteration  26: 786389.877 ops/s
# Warmup Iteration  27: 786163.946 ops/s
# Warmup Iteration  28: 782878.279 ops/s
# Warmup Iteration  29: 783363.300 ops/s
# Warmup Iteration  30: 785418.877 ops/s
Iteration   1: 790231.155 ops/s
Iteration   2: 787367.524 ops/s
Iteration   3: 789708.263 ops/s
Iteration   4: 780144.760 ops/s
Iteration   5: 783454.167 ops/s
Iteration   6: 782212.543 ops/s
Iteration   7: 783301.055 ops/s
Iteration   8: 783367.064 ops/s
Iteration   9: 782837.446 ops/s
Iteration  10: 782168.951 ops/s
Iteration  11: 786064.682 ops/s
Iteration  12: 785945.826 ops/s
Iteration  13: 788528.874 ops/s
Iteration  14: 792198.130 ops/s
Iteration  15: 787624.104 ops/s
Iteration  16: 782698.794 ops/s
Iteration  17: 784810.741 ops/s
Iteration  18: 782738.991 ops/s
Iteration  19: 784754.885 ops/s
Iteration  20: 789177.854 ops/s
Iteration  21: 787885.571 ops/s
Iteration  22: 788986.716 ops/s
Iteration  23: 787813.840 ops/s
Iteration  24: 785392.388 ops/s
Iteration  25: 783387.216 ops/s
Iteration  26: 788225.927 ops/s
Iteration  27: 787911.750 ops/s
Iteration  28: 784597.757 ops/s
Iteration  29: 789730.766 ops/s
Iteration  30: 783274.487 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAll":
  785884.741 ±(99.9%) 2016.083 ops/s [Average]
  (min, avg, max) = (780144.760, 785884.741, 792198.130), stdev = 3017.579
  CI (99.9%): [783868.657, 787900.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_addAll  thrpt   30  785884.741 ± 2016.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470259.867 ops/s
# Warmup Iteration   2: 664039.739 ops/s
# Warmup Iteration   3: 782128.579 ops/s
# Warmup Iteration   4: 780584.019 ops/s
# Warmup Iteration   5: 782437.192 ops/s
# Warmup Iteration   6: 782299.078 ops/s
# Warmup Iteration   7: 658729.582 ops/s
# Warmup Iteration   8: 784380.974 ops/s
# Warmup Iteration   9: 780726.147 ops/s
# Warmup Iteration  10: 780685.752 ops/s
# Warmup Iteration  11: 782758.999 ops/s
# Warmup Iteration  12: 782298.299 ops/s
# Warmup Iteration  13: 780894.271 ops/s
# Warmup Iteration  14: 781930.248 ops/s
# Warmup Iteration  15: 781919.032 ops/s
# Warmup Iteration  16: 783144.798 ops/s
# Warmup Iteration  17: 828382.198 ops/s
# Warmup Iteration  18: 826545.269 ops/s
# Warmup Iteration  19: 826467.762 ops/s
# Warmup Iteration  20: 829481.970 ops/s
# Warmup Iteration  21: 826261.359 ops/s
# Warmup Iteration  22: 829660.410 ops/s
# Warmup Iteration  23: 827138.139 ops/s
# Warmup Iteration  24: 826462.674 ops/s
# Warmup Iteration  25: 829294.770 ops/s
# Warmup Iteration  26: 828600.386 ops/s
# Warmup Iteration  27: 829295.582 ops/s
# Warmup Iteration  28: 827712.763 ops/s
# Warmup Iteration  29: 827763.942 ops/s
# Warmup Iteration  30: 826968.343 ops/s
Iteration   1: 829849.713 ops/s
Iteration   2: 828850.355 ops/s
Iteration   3: 826923.139 ops/s
Iteration   4: 828962.373 ops/s
Iteration   5: 827040.439 ops/s
Iteration   6: 828740.291 ops/s
Iteration   7: 828617.918 ops/s
Iteration   8: 780061.491 ops/s
Iteration   9: 830477.751 ops/s
Iteration  10: 825999.340 ops/s
Iteration  11: 828189.218 ops/s
Iteration  12: 825394.062 ops/s
Iteration  13: 825020.401 ops/s
Iteration  14: 826510.835 ops/s
Iteration  15: 826228.069 ops/s
Iteration  16: 823782.852 ops/s
Iteration  17: 826720.296 ops/s
Iteration  18: 828334.573 ops/s
Iteration  19: 825986.880 ops/s
Iteration  20: 829080.544 ops/s
Iteration  21: 826881.387 ops/s
Iteration  22: 827401.324 ops/s
Iteration  23: 826284.007 ops/s
Iteration  24: 829500.797 ops/s
Iteration  25: 824372.978 ops/s
Iteration  26: 830182.008 ops/s
Iteration  27: 829730.455 ops/s
Iteration  28: 831318.425 ops/s
Iteration  29: 830880.767 ops/s
Iteration  30: 825959.688 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllAtIndex":
  826109.413 ±(99.9%) 5957.857 ops/s [Average]
  (min, avg, max) = (780061.491, 826109.413, 831318.425), stdev = 8917.440
  CI (99.9%): [820151.556, 832067.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  826109.413 ± 5957.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498383.157 ops/s
# Warmup Iteration   2: 754773.679 ops/s
# Warmup Iteration   3: 838321.065 ops/s
# Warmup Iteration   4: 844525.743 ops/s
# Warmup Iteration   5: 834700.515 ops/s
# Warmup Iteration   6: 750943.326 ops/s
# Warmup Iteration   7: 806234.198 ops/s
# Warmup Iteration   8: 833905.326 ops/s
# Warmup Iteration   9: 838647.915 ops/s
# Warmup Iteration  10: 838289.317 ops/s
# Warmup Iteration  11: 841320.999 ops/s
# Warmup Iteration  12: 836158.349 ops/s
# Warmup Iteration  13: 841807.591 ops/s
# Warmup Iteration  14: 841506.823 ops/s
# Warmup Iteration  15: 832910.084 ops/s
# Warmup Iteration  16: 836390.520 ops/s
# Warmup Iteration  17: 878229.106 ops/s
# Warmup Iteration  18: 877657.405 ops/s
# Warmup Iteration  19: 877879.216 ops/s
# Warmup Iteration  20: 882028.175 ops/s
# Warmup Iteration  21: 877498.778 ops/s
# Warmup Iteration  22: 879154.786 ops/s
# Warmup Iteration  23: 877596.787 ops/s
# Warmup Iteration  24: 877931.263 ops/s
# Warmup Iteration  25: 874560.952 ops/s
# Warmup Iteration  26: 878090.730 ops/s
# Warmup Iteration  27: 879032.916 ops/s
# Warmup Iteration  28: 882957.590 ops/s
# Warmup Iteration  29: 886255.383 ops/s
# Warmup Iteration  30: 877093.275 ops/s
Iteration   1: 879963.250 ops/s
Iteration   2: 881531.780 ops/s
Iteration   3: 882411.351 ops/s
Iteration   4: 883275.983 ops/s
Iteration   5: 877526.580 ops/s
Iteration   6: 884127.850 ops/s
Iteration   7: 878145.602 ops/s
Iteration   8: 881272.211 ops/s
Iteration   9: 873872.992 ops/s
Iteration  10: 880057.500 ops/s
Iteration  11: 877170.527 ops/s
Iteration  12: 880592.464 ops/s
Iteration  13: 876632.322 ops/s
Iteration  14: 877848.199 ops/s
Iteration  15: 876096.640 ops/s
Iteration  16: 878239.216 ops/s
Iteration  17: 876515.055 ops/s
Iteration  18: 879906.693 ops/s
Iteration  19: 875617.226 ops/s
Iteration  20: 874825.566 ops/s
Iteration  21: 875762.946 ops/s
Iteration  22: 875361.571 ops/s
Iteration  23: 875425.998 ops/s
Iteration  24: 876830.415 ops/s
Iteration  25: 877234.305 ops/s
Iteration  26: 875744.119 ops/s
Iteration  27: 878828.622 ops/s
Iteration  28: 878341.280 ops/s
Iteration  29: 880412.635 ops/s
Iteration  30: 879409.674 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAllIterable":
  878299.352 ±(99.9%) 1752.476 ops/s [Average]
  (min, avg, max) = (873872.992, 878299.352, 884127.850), stdev = 2623.024
  CI (99.9%): [876546.876, 880051.828] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_addAllIterable  thrpt   30  878299.352 ± 1752.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509052.712 ops/s
# Warmup Iteration   2: 719641.845 ops/s
# Warmup Iteration   3: 830236.421 ops/s
# Warmup Iteration   4: 832323.019 ops/s
# Warmup Iteration   5: 831175.277 ops/s
# Warmup Iteration   6: 833554.609 ops/s
# Warmup Iteration   7: 707990.849 ops/s
# Warmup Iteration   8: 832487.086 ops/s
# Warmup Iteration   9: 831421.089 ops/s
# Warmup Iteration  10: 830824.812 ops/s
# Warmup Iteration  11: 832093.268 ops/s
# Warmup Iteration  12: 832986.356 ops/s
# Warmup Iteration  13: 831421.166 ops/s
# Warmup Iteration  14: 830234.026 ops/s
# Warmup Iteration  15: 828309.350 ops/s
# Warmup Iteration  16: 831236.691 ops/s
# Warmup Iteration  17: 878020.429 ops/s
# Warmup Iteration  18: 873021.258 ops/s
# Warmup Iteration  19: 876671.518 ops/s
# Warmup Iteration  20: 877253.201 ops/s
# Warmup Iteration  21: 874140.060 ops/s
# Warmup Iteration  22: 871006.597 ops/s
# Warmup Iteration  23: 871384.629 ops/s
# Warmup Iteration  24: 872235.247 ops/s
# Warmup Iteration  25: 876617.022 ops/s
# Warmup Iteration  26: 874266.046 ops/s
# Warmup Iteration  27: 878031.390 ops/s
# Warmup Iteration  28: 878428.369 ops/s
# Warmup Iteration  29: 878118.447 ops/s
# Warmup Iteration  30: 880595.440 ops/s
Iteration   1: 878776.477 ops/s
Iteration   2: 880329.400 ops/s
Iteration   3: 877806.383 ops/s
Iteration   4: 881346.094 ops/s
Iteration   5: 879363.107 ops/s
Iteration   6: 876169.436 ops/s
Iteration   7: 877365.129 ops/s
Iteration   8: 877372.432 ops/s
Iteration   9: 878926.253 ops/s
Iteration  10: 880295.816 ops/s
Iteration  11: 881257.605 ops/s
Iteration  12: 877301.540 ops/s
Iteration  13: 877527.911 ops/s
Iteration  14: 877497.523 ops/s
Iteration  15: 875508.051 ops/s
Iteration  16: 872025.564 ops/s
Iteration  17: 873955.713 ops/s
Iteration  18: 875390.412 ops/s
Iteration  19: 878271.214 ops/s
Iteration  20: 878108.441 ops/s
Iteration  21: 878213.215 ops/s
Iteration  22: 880592.780 ops/s
Iteration  23: 875929.682 ops/s
Iteration  24: 877722.873 ops/s
Iteration  25: 874260.574 ops/s
Iteration  26: 877665.509 ops/s
Iteration  27: 877034.109 ops/s
Iteration  28: 881847.509 ops/s
Iteration  29: 879809.624 ops/s
Iteration  30: 879940.668 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_addAtIndex":
  877920.368 ±(99.9%) 1539.317 ops/s [Average]
  (min, avg, max) = (872025.564, 877920.368, 881847.509), stdev = 2303.977
  CI (99.9%): [876381.051, 879459.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_addAtIndex  thrpt   30  877920.368 ± 1539.317  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696540.112 ops/s
# Warmup Iteration   2: 741616.587 ops/s
# Warmup Iteration   3: 985295.896 ops/s
# Warmup Iteration   4: 986382.116 ops/s
# Warmup Iteration   5: 984349.182 ops/s
# Warmup Iteration   6: 984739.026 ops/s
# Warmup Iteration   7: 986145.641 ops/s
# Warmup Iteration   8: 985835.230 ops/s
# Warmup Iteration   9: 987159.044 ops/s
# Warmup Iteration  10: 983989.852 ops/s
# Warmup Iteration  11: 849467.115 ops/s
# Warmup Iteration  12: 970020.184 ops/s
# Warmup Iteration  13: 989462.497 ops/s
# Warmup Iteration  14: 987482.540 ops/s
# Warmup Iteration  15: 988571.079 ops/s
# Warmup Iteration  16: 987248.737 ops/s
# Warmup Iteration  17: 1042378.104 ops/s
# Warmup Iteration  18: 1046940.022 ops/s
# Warmup Iteration  19: 1045678.875 ops/s
# Warmup Iteration  20: 1046172.202 ops/s
# Warmup Iteration  21: 1044971.328 ops/s
# Warmup Iteration  22: 1044339.195 ops/s
# Warmup Iteration  23: 1041615.364 ops/s
# Warmup Iteration  24: 1038726.453 ops/s
# Warmup Iteration  25: 1045298.717 ops/s
# Warmup Iteration  26: 1042206.600 ops/s
# Warmup Iteration  27: 1039956.266 ops/s
# Warmup Iteration  28: 1036710.973 ops/s
# Warmup Iteration  29: 1040898.392 ops/s
# Warmup Iteration  30: 1042743.557 ops/s
Iteration   1: 1044785.839 ops/s
Iteration   2: 1043322.137 ops/s
Iteration   3: 1040453.602 ops/s
Iteration   4: 1045087.615 ops/s
Iteration   5: 1048109.817 ops/s
Iteration   6: 1044874.036 ops/s
Iteration   7: 1048038.816 ops/s
Iteration   8: 1047479.088 ops/s
Iteration   9: 1047091.864 ops/s
Iteration  10: 1041750.982 ops/s
Iteration  11: 1044513.856 ops/s
Iteration  12: 1046196.362 ops/s
Iteration  13: 1046846.836 ops/s
Iteration  14: 1042185.877 ops/s
Iteration  15: 1046984.047 ops/s
Iteration  16: 1045567.600 ops/s
Iteration  17: 1041700.648 ops/s
Iteration  18: 1046809.898 ops/s
Iteration  19: 1046545.944 ops/s
Iteration  20: 1044847.392 ops/s
Iteration  21: 1041625.266 ops/s
Iteration  22: 1043560.118 ops/s
Iteration  23: 1044467.140 ops/s
Iteration  24: 1042047.817 ops/s
Iteration  25: 1044946.625 ops/s
Iteration  26: 1044374.832 ops/s
Iteration  27: 1045291.424 ops/s
Iteration  28: 1041389.377 ops/s
Iteration  29: 1045802.360 ops/s
Iteration  30: 1043955.198 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_clear":
  1044688.414 ±(99.9%) 1426.311 ops/s [Average]
  (min, avg, max) = (1040453.602, 1044688.414, 1048109.817), stdev = 2134.835
  CI (99.9%): [1043262.103, 1046114.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_clear  thrpt   30  1044688.414 ± 1426.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4191723.461 ops/s
# Warmup Iteration   2: 10561863.098 ops/s
# Warmup Iteration   3: 10651995.010 ops/s
# Warmup Iteration   4: 8794738.386 ops/s
# Warmup Iteration   5: 10686067.835 ops/s
# Warmup Iteration   6: 10688583.910 ops/s
# Warmup Iteration   7: 10682647.742 ops/s
# Warmup Iteration   8: 10686117.906 ops/s
# Warmup Iteration   9: 10672777.478 ops/s
# Warmup Iteration  10: 10688338.353 ops/s
# Warmup Iteration  11: 10672795.948 ops/s
# Warmup Iteration  12: 10692806.243 ops/s
# Warmup Iteration  13: 10697043.014 ops/s
# Warmup Iteration  14: 10669587.487 ops/s
# Warmup Iteration  15: 10704371.578 ops/s
# Warmup Iteration  16: 10707149.141 ops/s
# Warmup Iteration  17: 10694188.026 ops/s
# Warmup Iteration  18: 10697147.781 ops/s
# Warmup Iteration  19: 10692511.548 ops/s
# Warmup Iteration  20: 10703279.229 ops/s
# Warmup Iteration  21: 10695498.607 ops/s
# Warmup Iteration  22: 10706639.333 ops/s
# Warmup Iteration  23: 10695005.091 ops/s
# Warmup Iteration  24: 10692852.004 ops/s
# Warmup Iteration  25: 10696591.742 ops/s
# Warmup Iteration  26: 10694954.687 ops/s
# Warmup Iteration  27: 10699376.523 ops/s
# Warmup Iteration  28: 10672227.903 ops/s
# Warmup Iteration  29: 10678958.165 ops/s
# Warmup Iteration  30: 10664554.815 ops/s
Iteration   1: 10688251.738 ops/s
Iteration   2: 10665463.527 ops/s
Iteration   3: 10667532.439 ops/s
Iteration   4: 10696468.381 ops/s
Iteration   5: 10699073.139 ops/s
Iteration   6: 10698628.692 ops/s
Iteration   7: 10692527.211 ops/s
Iteration   8: 10709825.847 ops/s
Iteration   9: 10710451.408 ops/s
Iteration  10: 10708817.724 ops/s
Iteration  11: 10711697.213 ops/s
Iteration  12: 10711716.371 ops/s
Iteration  13: 10711684.058 ops/s
Iteration  14: 10685211.322 ops/s
Iteration  15: 10668163.406 ops/s
Iteration  16: 10684169.098 ops/s
Iteration  17: 10625216.697 ops/s
Iteration  18: 10677453.752 ops/s
Iteration  19: 10717294.829 ops/s
Iteration  20: 10692298.204 ops/s
Iteration  21: 10696225.250 ops/s
Iteration  22: 10698407.151 ops/s
Iteration  23: 10700611.719 ops/s
Iteration  24: 10689768.676 ops/s
Iteration  25: 10709271.230 ops/s
Iteration  26: 10702086.886 ops/s
Iteration  27: 10688538.899 ops/s
Iteration  28: 10693815.179 ops/s
Iteration  29: 10687290.754 ops/s
Iteration  30: 10687627.897 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collect":
  10692519.623 ±(99.9%) 12474.595 ops/s [Average]
  (min, avg, max) = (10625216.697, 10692519.623, 10717294.829), stdev = 18671.388
  CI (99.9%): [10680045.028, 10704994.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collect  thrpt   30  10692519.623 ± 12474.595  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6398513.268 ops/s
# Warmup Iteration   2: 14254956.798 ops/s
# Warmup Iteration   3: 12060067.305 ops/s
# Warmup Iteration   4: 14328310.214 ops/s
# Warmup Iteration   5: 14337417.268 ops/s
# Warmup Iteration   6: 14289831.248 ops/s
# Warmup Iteration   7: 14321337.282 ops/s
# Warmup Iteration   8: 14323349.317 ops/s
# Warmup Iteration   9: 14309512.172 ops/s
# Warmup Iteration  10: 14334148.913 ops/s
# Warmup Iteration  11: 14358397.411 ops/s
# Warmup Iteration  12: 14299476.970 ops/s
# Warmup Iteration  13: 14279701.448 ops/s
# Warmup Iteration  14: 14295980.141 ops/s
# Warmup Iteration  15: 14338795.132 ops/s
# Warmup Iteration  16: 14326959.463 ops/s
# Warmup Iteration  17: 14302104.381 ops/s
# Warmup Iteration  18: 14335002.178 ops/s
# Warmup Iteration  19: 14341790.221 ops/s
# Warmup Iteration  20: 14353640.408 ops/s
# Warmup Iteration  21: 14321147.187 ops/s
# Warmup Iteration  22: 14343117.570 ops/s
# Warmup Iteration  23: 14345683.295 ops/s
# Warmup Iteration  24: 14281986.220 ops/s
# Warmup Iteration  25: 14317557.892 ops/s
# Warmup Iteration  26: 14339905.140 ops/s
# Warmup Iteration  27: 14307713.404 ops/s
# Warmup Iteration  28: 14292496.577 ops/s
# Warmup Iteration  29: 14309176.106 ops/s
# Warmup Iteration  30: 14315749.824 ops/s
Iteration   1: 14301863.764 ops/s
Iteration   2: 14337680.930 ops/s
Iteration   3: 14286763.228 ops/s
Iteration   4: 14293318.750 ops/s
Iteration   5: 14413913.649 ops/s
Iteration   6: 14353146.234 ops/s
Iteration   7: 14306420.644 ops/s
Iteration   8: 14340882.720 ops/s
Iteration   9: 14366467.695 ops/s
Iteration  10: 14299367.915 ops/s
Iteration  11: 14357457.967 ops/s
Iteration  12: 14300884.347 ops/s
Iteration  13: 14306199.622 ops/s
Iteration  14: 14338667.658 ops/s
Iteration  15: 14289929.863 ops/s
Iteration  16: 14354002.258 ops/s
Iteration  17: 14372205.568 ops/s
Iteration  18: 14290097.543 ops/s
Iteration  19: 14279763.153 ops/s
Iteration  20: 14260150.046 ops/s
Iteration  21: 14257162.486 ops/s
Iteration  22: 14349016.182 ops/s
Iteration  23: 14346639.410 ops/s
Iteration  24: 14293635.899 ops/s
Iteration  25: 14330630.656 ops/s
Iteration  26: 14326492.547 ops/s
Iteration  27: 14341213.614 ops/s
Iteration  28: 14385700.715 ops/s
Iteration  29: 14363101.038 ops/s
Iteration  30: 14356007.955 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectBoolean":
  14326626.135 ±(99.9%) 25342.312 ops/s [Average]
  (min, avg, max) = (14257162.486, 14326626.135, 14413913.649), stdev = 37931.182
  CI (99.9%): [14301283.824, 14351968.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectBoolean  thrpt   30  14326626.135 ± 25342.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7247148.938 ops/s
# Warmup Iteration   2: 17158104.139 ops/s
# Warmup Iteration   3: 14444271.556 ops/s
# Warmup Iteration   4: 17277765.296 ops/s
# Warmup Iteration   5: 17298299.884 ops/s
# Warmup Iteration   6: 17281975.862 ops/s
# Warmup Iteration   7: 17285413.156 ops/s
# Warmup Iteration   8: 17273592.842 ops/s
# Warmup Iteration   9: 17289357.088 ops/s
# Warmup Iteration  10: 17271141.015 ops/s
# Warmup Iteration  11: 17291883.346 ops/s
# Warmup Iteration  12: 17292568.090 ops/s
# Warmup Iteration  13: 17309024.332 ops/s
# Warmup Iteration  14: 17271633.697 ops/s
# Warmup Iteration  15: 17324720.159 ops/s
# Warmup Iteration  16: 17309221.882 ops/s
# Warmup Iteration  17: 17311898.070 ops/s
# Warmup Iteration  18: 17333980.251 ops/s
# Warmup Iteration  19: 17324910.429 ops/s
# Warmup Iteration  20: 17324529.605 ops/s
# Warmup Iteration  21: 17327047.558 ops/s
# Warmup Iteration  22: 17294204.611 ops/s
# Warmup Iteration  23: 17356190.468 ops/s
# Warmup Iteration  24: 17259340.575 ops/s
# Warmup Iteration  25: 17302247.333 ops/s
# Warmup Iteration  26: 17333882.512 ops/s
# Warmup Iteration  27: 17344220.712 ops/s
# Warmup Iteration  28: 17373077.112 ops/s
# Warmup Iteration  29: 17323284.953 ops/s
# Warmup Iteration  30: 17280126.527 ops/s
Iteration   1: 17340781.079 ops/s
Iteration   2: 17304725.700 ops/s
Iteration   3: 17399953.204 ops/s
Iteration   4: 17305631.898 ops/s
Iteration   5: 17371032.763 ops/s
Iteration   6: 17330058.201 ops/s
Iteration   7: 17370418.866 ops/s
Iteration   8: 17385038.789 ops/s
Iteration   9: 17364778.068 ops/s
Iteration  10: 17344617.789 ops/s
Iteration  11: 17306738.558 ops/s
Iteration  12: 17335527.769 ops/s
Iteration  13: 17328512.412 ops/s
Iteration  14: 17325200.089 ops/s
Iteration  15: 17204322.981 ops/s
Iteration  16: 17373996.790 ops/s
Iteration  17: 17297890.104 ops/s
Iteration  18: 17338128.794 ops/s
Iteration  19: 17354791.014 ops/s
Iteration  20: 17298185.770 ops/s
Iteration  21: 17329130.361 ops/s
Iteration  22: 17266144.605 ops/s
Iteration  23: 17406444.465 ops/s
Iteration  24: 17339654.656 ops/s
Iteration  25: 17337648.167 ops/s
Iteration  26: 17292451.717 ops/s
Iteration  27: 17336588.940 ops/s
Iteration  28: 17337758.636 ops/s
Iteration  29: 17353992.079 ops/s
Iteration  30: 17389934.507 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectByte":
  17335669.292 ±(99.9%) 27701.363 ops/s [Average]
  (min, avg, max) = (17204322.981, 17335669.292, 17406444.465), stdev = 41462.099
  CI (99.9%): [17307967.929, 17363370.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectByte  thrpt   30  17335669.292 ± 27701.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7304073.369 ops/s
# Warmup Iteration   2: 16973502.549 ops/s
# Warmup Iteration   3: 14140452.017 ops/s
# Warmup Iteration   4: 16910346.875 ops/s
# Warmup Iteration   5: 16913036.684 ops/s
# Warmup Iteration   6: 16874979.054 ops/s
# Warmup Iteration   7: 16875747.924 ops/s
# Warmup Iteration   8: 16870703.308 ops/s
# Warmup Iteration   9: 16876023.370 ops/s
# Warmup Iteration  10: 16889183.892 ops/s
# Warmup Iteration  11: 16881722.300 ops/s
# Warmup Iteration  12: 16861113.853 ops/s
# Warmup Iteration  13: 16892068.851 ops/s
# Warmup Iteration  14: 16862160.816 ops/s
# Warmup Iteration  15: 16931114.095 ops/s
# Warmup Iteration  16: 16913393.114 ops/s
# Warmup Iteration  17: 16898459.654 ops/s
# Warmup Iteration  18: 16942930.094 ops/s
# Warmup Iteration  19: 16895654.454 ops/s
# Warmup Iteration  20: 16910191.901 ops/s
# Warmup Iteration  21: 16901999.548 ops/s
# Warmup Iteration  22: 16904594.005 ops/s
# Warmup Iteration  23: 16912308.578 ops/s
# Warmup Iteration  24: 16956617.417 ops/s
# Warmup Iteration  25: 16901964.327 ops/s
# Warmup Iteration  26: 16891771.254 ops/s
# Warmup Iteration  27: 16917413.351 ops/s
# Warmup Iteration  28: 16902419.420 ops/s
# Warmup Iteration  29: 16933702.116 ops/s
# Warmup Iteration  30: 16927001.214 ops/s
Iteration   1: 16921016.290 ops/s
Iteration   2: 16945637.289 ops/s
Iteration   3: 16971730.302 ops/s
Iteration   4: 16956556.315 ops/s
Iteration   5: 16895069.706 ops/s
Iteration   6: 16886918.759 ops/s
Iteration   7: 16936883.730 ops/s
Iteration   8: 16882450.459 ops/s
Iteration   9: 16967848.130 ops/s
Iteration  10: 16896333.155 ops/s
Iteration  11: 16962819.541 ops/s
Iteration  12: 16880487.340 ops/s
Iteration  13: 16982774.186 ops/s
Iteration  14: 16861053.325 ops/s
Iteration  15: 16972355.584 ops/s
Iteration  16: 16901320.882 ops/s
Iteration  17: 16999650.830 ops/s
Iteration  18: 16776181.846 ops/s
Iteration  19: 16986228.282 ops/s
Iteration  20: 16907662.916 ops/s
Iteration  21: 16959809.782 ops/s
Iteration  22: 16915489.425 ops/s
Iteration  23: 16938646.994 ops/s
Iteration  24: 16900864.246 ops/s
Iteration  25: 16869073.933 ops/s
Iteration  26: 16915258.367 ops/s
Iteration  27: 16892690.244 ops/s
Iteration  28: 16824307.986 ops/s
Iteration  29: 16864795.159 ops/s
Iteration  30: 16953790.150 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectChar":
  16917523.505 ±(99.9%) 34031.202 ops/s [Average]
  (min, avg, max) = (16776181.846, 16917523.505, 16999650.830), stdev = 50936.305
  CI (99.9%): [16883492.303, 16951554.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectChar  thrpt   30  16917523.505 ± 34031.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7470680.336 ops/s
# Warmup Iteration   2: 17211727.734 ops/s
# Warmup Iteration   3: 14418093.459 ops/s
# Warmup Iteration   4: 17249571.585 ops/s
# Warmup Iteration   5: 17186646.199 ops/s
# Warmup Iteration   6: 17213183.083 ops/s
# Warmup Iteration   7: 17168355.530 ops/s
# Warmup Iteration   8: 17262366.503 ops/s
# Warmup Iteration   9: 17127430.610 ops/s
# Warmup Iteration  10: 17249177.780 ops/s
# Warmup Iteration  11: 17212335.470 ops/s
# Warmup Iteration  12: 17249104.745 ops/s
# Warmup Iteration  13: 17188069.759 ops/s
# Warmup Iteration  14: 17218223.555 ops/s
# Warmup Iteration  15: 17230893.199 ops/s
# Warmup Iteration  16: 17221874.958 ops/s
# Warmup Iteration  17: 17246041.331 ops/s
# Warmup Iteration  18: 17288622.039 ops/s
# Warmup Iteration  19: 17245645.480 ops/s
# Warmup Iteration  20: 17215586.920 ops/s
# Warmup Iteration  21: 17227841.716 ops/s
# Warmup Iteration  22: 17224224.005 ops/s
# Warmup Iteration  23: 17272375.016 ops/s
# Warmup Iteration  24: 17277607.212 ops/s
# Warmup Iteration  25: 17179160.759 ops/s
# Warmup Iteration  26: 17250320.750 ops/s
# Warmup Iteration  27: 17255363.899 ops/s
# Warmup Iteration  28: 17256236.797 ops/s
# Warmup Iteration  29: 17202912.739 ops/s
# Warmup Iteration  30: 17234565.952 ops/s
Iteration   1: 17222020.216 ops/s
Iteration   2: 17295716.791 ops/s
Iteration   3: 17218714.409 ops/s
Iteration   4: 17247526.104 ops/s
Iteration   5: 17246917.133 ops/s
Iteration   6: 17246481.975 ops/s
Iteration   7: 17256584.000 ops/s
Iteration   8: 17191092.433 ops/s
Iteration   9: 17249797.343 ops/s
Iteration  10: 17217243.116 ops/s
Iteration  11: 17316426.489 ops/s
Iteration  12: 17186963.762 ops/s
Iteration  13: 17256302.335 ops/s
Iteration  14: 17189835.667 ops/s
Iteration  15: 17254385.375 ops/s
Iteration  16: 17196187.471 ops/s
Iteration  17: 17214122.126 ops/s
Iteration  18: 17296926.518 ops/s
Iteration  19: 17252793.824 ops/s
Iteration  20: 17263631.378 ops/s
Iteration  21: 17218630.970 ops/s
Iteration  22: 17280675.509 ops/s
Iteration  23: 17203406.488 ops/s
Iteration  24: 17242121.805 ops/s
Iteration  25: 17210414.135 ops/s
Iteration  26: 17276832.885 ops/s
Iteration  27: 17225478.950 ops/s
Iteration  28: 17252468.732 ops/s
Iteration  29: 17259829.581 ops/s
Iteration  30: 17245126.494 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectDouble":
  17241155.134 ±(99.9%) 22171.133 ops/s [Average]
  (min, avg, max) = (17186963.762, 17241155.134, 17316426.489), stdev = 33184.711
  CI (99.9%): [17218984.001, 17263326.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectDouble  thrpt   30  17241155.134 ± 22171.133  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7374115.468 ops/s
# Warmup Iteration   2: 17383975.044 ops/s
# Warmup Iteration   3: 14115275.036 ops/s
# Warmup Iteration   4: 16937865.315 ops/s
# Warmup Iteration   5: 16956009.599 ops/s
# Warmup Iteration   6: 16916275.113 ops/s
# Warmup Iteration   7: 16913000.562 ops/s
# Warmup Iteration   8: 16933150.635 ops/s
# Warmup Iteration   9: 16908226.893 ops/s
# Warmup Iteration  10: 16928661.561 ops/s
# Warmup Iteration  11: 16942960.924 ops/s
# Warmup Iteration  12: 16963849.570 ops/s
# Warmup Iteration  13: 16937829.159 ops/s
# Warmup Iteration  14: 16920731.588 ops/s
# Warmup Iteration  15: 16908520.478 ops/s
# Warmup Iteration  16: 16982680.497 ops/s
# Warmup Iteration  17: 16963903.067 ops/s
# Warmup Iteration  18: 16921897.135 ops/s
# Warmup Iteration  19: 16952418.241 ops/s
# Warmup Iteration  20: 16924913.412 ops/s
# Warmup Iteration  21: 16940395.309 ops/s
# Warmup Iteration  22: 16940057.944 ops/s
# Warmup Iteration  23: 16936757.705 ops/s
# Warmup Iteration  24: 16891403.569 ops/s
# Warmup Iteration  25: 16814122.197 ops/s
# Warmup Iteration  26: 16930877.220 ops/s
# Warmup Iteration  27: 16939498.732 ops/s
# Warmup Iteration  28: 16943898.686 ops/s
# Warmup Iteration  29: 16978904.717 ops/s
# Warmup Iteration  30: 16972586.872 ops/s
Iteration   1: 16975672.239 ops/s
Iteration   2: 16847021.105 ops/s
Iteration   3: 16918485.417 ops/s
Iteration   4: 16893502.651 ops/s
Iteration   5: 16956992.095 ops/s
Iteration   6: 16918684.382 ops/s
Iteration   7: 16990745.361 ops/s
Iteration   8: 16917793.326 ops/s
Iteration   9: 16963190.795 ops/s
Iteration  10: 16905234.599 ops/s
Iteration  11: 16937541.854 ops/s
Iteration  12: 16953938.545 ops/s
Iteration  13: 16976213.782 ops/s
Iteration  14: 16977037.246 ops/s
Iteration  15: 17015133.381 ops/s
Iteration  16: 16971476.718 ops/s
Iteration  17: 16956416.092 ops/s
Iteration  18: 16955902.817 ops/s
Iteration  19: 16915914.211 ops/s
Iteration  20: 17002921.489 ops/s
Iteration  21: 16935603.363 ops/s
Iteration  22: 16991874.870 ops/s
Iteration  23: 16923066.982 ops/s
Iteration  24: 16989360.374 ops/s
Iteration  25: 16915435.181 ops/s
Iteration  26: 16981883.341 ops/s
Iteration  27: 16878436.455 ops/s
Iteration  28: 16960794.567 ops/s
Iteration  29: 16937358.127 ops/s
Iteration  30: 16990012.518 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectFloat":
  16948454.796 ±(99.9%) 26335.369 ops/s [Average]
  (min, avg, max) = (16847021.105, 16948454.796, 17015133.381), stdev = 39417.544
  CI (99.9%): [16922119.427, 16974790.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectFloat  thrpt   30  16948454.796 ± 26335.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7477907.451 ops/s
# Warmup Iteration   2: 15987880.927 ops/s
# Warmup Iteration   3: 13922679.635 ops/s
# Warmup Iteration   4: 16258460.860 ops/s
# Warmup Iteration   5: 16262265.890 ops/s
# Warmup Iteration   6: 16337302.085 ops/s
# Warmup Iteration   7: 16265670.327 ops/s
# Warmup Iteration   8: 16290495.389 ops/s
# Warmup Iteration   9: 16161243.717 ops/s
# Warmup Iteration  10: 16260912.041 ops/s
# Warmup Iteration  11: 16253178.094 ops/s
# Warmup Iteration  12: 16312152.408 ops/s
# Warmup Iteration  13: 16340714.753 ops/s
# Warmup Iteration  14: 16258604.817 ops/s
# Warmup Iteration  15: 16238288.821 ops/s
# Warmup Iteration  16: 16298368.532 ops/s
# Warmup Iteration  17: 16290817.681 ops/s
# Warmup Iteration  18: 16354663.971 ops/s
# Warmup Iteration  19: 16325815.403 ops/s
# Warmup Iteration  20: 16311990.999 ops/s
# Warmup Iteration  21: 16312251.676 ops/s
# Warmup Iteration  22: 16315805.562 ops/s
# Warmup Iteration  23: 16304487.901 ops/s
# Warmup Iteration  24: 16294662.818 ops/s
# Warmup Iteration  25: 16253667.072 ops/s
# Warmup Iteration  26: 16375699.758 ops/s
# Warmup Iteration  27: 16306037.257 ops/s
# Warmup Iteration  28: 16269941.115 ops/s
# Warmup Iteration  29: 16272849.757 ops/s
# Warmup Iteration  30: 16269303.873 ops/s
Iteration   1: 16258405.446 ops/s
Iteration   2: 16299023.614 ops/s
Iteration   3: 16369496.091 ops/s
Iteration   4: 16332509.998 ops/s
Iteration   5: 16316100.640 ops/s
Iteration   6: 16270361.177 ops/s
Iteration   7: 16367906.139 ops/s
Iteration   8: 16377230.426 ops/s
Iteration   9: 16297167.966 ops/s
Iteration  10: 16313581.355 ops/s
Iteration  11: 16269780.313 ops/s
Iteration  12: 16293017.681 ops/s
Iteration  13: 16309921.658 ops/s
Iteration  14: 16243060.282 ops/s
Iteration  15: 16342605.966 ops/s
Iteration  16: 16309470.561 ops/s
Iteration  17: 16279447.148 ops/s
Iteration  18: 16286108.572 ops/s
Iteration  19: 16319901.477 ops/s
Iteration  20: 16462409.618 ops/s
Iteration  21: 16191196.037 ops/s
Iteration  22: 16322753.950 ops/s
Iteration  23: 16295800.809 ops/s
Iteration  24: 16292702.827 ops/s
Iteration  25: 16386970.282 ops/s
Iteration  26: 16310372.170 ops/s
Iteration  27: 16333003.090 ops/s
Iteration  28: 16349845.443 ops/s
Iteration  29: 16291507.923 ops/s
Iteration  30: 16326686.470 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectIf":
  16313944.838 ±(99.9%) 33230.580 ops/s [Average]
  (min, avg, max) = (16191196.037, 16313944.838, 16462409.618), stdev = 49737.972
  CI (99.9%): [16280714.257, 16347175.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectIf  thrpt   30  16313944.838 ± 33230.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7296265.841 ops/s
# Warmup Iteration   2: 17171413.507 ops/s
# Warmup Iteration   3: 13997132.505 ops/s
# Warmup Iteration   4: 16794525.228 ops/s
# Warmup Iteration   5: 16761867.009 ops/s
# Warmup Iteration   6: 16781098.444 ops/s
# Warmup Iteration   7: 16803637.047 ops/s
# Warmup Iteration   8: 16762229.364 ops/s
# Warmup Iteration   9: 16751368.674 ops/s
# Warmup Iteration  10: 16724935.241 ops/s
# Warmup Iteration  11: 16779545.547 ops/s
# Warmup Iteration  12: 16774505.875 ops/s
# Warmup Iteration  13: 16762435.258 ops/s
# Warmup Iteration  14: 16785015.506 ops/s
# Warmup Iteration  15: 16789374.873 ops/s
# Warmup Iteration  16: 16795606.910 ops/s
# Warmup Iteration  17: 16783449.625 ops/s
# Warmup Iteration  18: 16781177.924 ops/s
# Warmup Iteration  19: 16784458.334 ops/s
# Warmup Iteration  20: 16779301.503 ops/s
# Warmup Iteration  21: 16775632.565 ops/s
# Warmup Iteration  22: 16730258.818 ops/s
# Warmup Iteration  23: 16792136.378 ops/s
# Warmup Iteration  24: 16767388.187 ops/s
# Warmup Iteration  25: 16767189.568 ops/s
# Warmup Iteration  26: 16810781.840 ops/s
# Warmup Iteration  27: 16788114.971 ops/s
# Warmup Iteration  28: 16749829.081 ops/s
# Warmup Iteration  29: 16778073.151 ops/s
# Warmup Iteration  30: 16756414.079 ops/s
Iteration   1: 16809695.508 ops/s
Iteration   2: 16779599.544 ops/s
Iteration   3: 16796607.153 ops/s
Iteration   4: 16790942.606 ops/s
Iteration   5: 16802934.248 ops/s
Iteration   6: 16753758.121 ops/s
Iteration   7: 16828551.976 ops/s
Iteration   8: 16795920.642 ops/s
Iteration   9: 16797631.147 ops/s
Iteration  10: 16776082.287 ops/s
Iteration  11: 16809962.993 ops/s
Iteration  12: 16802908.467 ops/s
Iteration  13: 16789916.648 ops/s
Iteration  14: 16741836.036 ops/s
Iteration  15: 16788627.211 ops/s
Iteration  16: 16754416.670 ops/s
Iteration  17: 16722779.082 ops/s
Iteration  18: 16779880.555 ops/s
Iteration  19: 16787511.501 ops/s
Iteration  20: 16750972.102 ops/s
Iteration  21: 16788458.889 ops/s
Iteration  22: 16820781.795 ops/s
Iteration  23: 16804460.695 ops/s
Iteration  24: 16782159.873 ops/s
Iteration  25: 16781951.667 ops/s
Iteration  26: 16757595.074 ops/s
Iteration  27: 16742062.476 ops/s
Iteration  28: 16757369.121 ops/s
Iteration  29: 16725864.175 ops/s
Iteration  30: 16705336.433 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectInt":
  16777552.490 ±(99.9%) 20169.419 ops/s [Average]
  (min, avg, max) = (16705336.433, 16777552.490, 16828551.976), stdev = 30188.639
  CI (99.9%): [16757383.071, 16797721.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectInt  thrpt   30  16777552.490 ± 20169.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7496687.460 ops/s
# Warmup Iteration   2: 16914776.362 ops/s
# Warmup Iteration   3: 14479890.669 ops/s
# Warmup Iteration   4: 17358585.181 ops/s
# Warmup Iteration   5: 17377238.680 ops/s
# Warmup Iteration   6: 17401091.879 ops/s
# Warmup Iteration   7: 17345123.179 ops/s
# Warmup Iteration   8: 17286189.850 ops/s
# Warmup Iteration   9: 17273897.478 ops/s
# Warmup Iteration  10: 17340912.756 ops/s
# Warmup Iteration  11: 17258172.630 ops/s
# Warmup Iteration  12: 17345437.530 ops/s
# Warmup Iteration  13: 17367964.761 ops/s
# Warmup Iteration  14: 17342091.422 ops/s
# Warmup Iteration  15: 17399696.361 ops/s
# Warmup Iteration  16: 17324930.192 ops/s
# Warmup Iteration  17: 17286806.220 ops/s
# Warmup Iteration  18: 17343852.883 ops/s
# Warmup Iteration  19: 17330640.661 ops/s
# Warmup Iteration  20: 17359666.113 ops/s
# Warmup Iteration  21: 17365887.784 ops/s
# Warmup Iteration  22: 17302636.019 ops/s
# Warmup Iteration  23: 17350331.087 ops/s
# Warmup Iteration  24: 17357197.948 ops/s
# Warmup Iteration  25: 17323173.742 ops/s
# Warmup Iteration  26: 17306600.863 ops/s
# Warmup Iteration  27: 17345800.620 ops/s
# Warmup Iteration  28: 17299665.868 ops/s
# Warmup Iteration  29: 17331423.517 ops/s
# Warmup Iteration  30: 17376653.335 ops/s
Iteration   1: 17375150.412 ops/s
Iteration   2: 17316033.057 ops/s
Iteration   3: 17369920.763 ops/s
Iteration   4: 17372432.463 ops/s
Iteration   5: 17361371.756 ops/s
Iteration   6: 17347337.931 ops/s
Iteration   7: 17304903.074 ops/s
Iteration   8: 17409888.465 ops/s
Iteration   9: 17311813.576 ops/s
Iteration  10: 17425480.864 ops/s
Iteration  11: 17246500.314 ops/s
Iteration  12: 17381980.776 ops/s
Iteration  13: 17329349.579 ops/s
Iteration  14: 17322192.544 ops/s
Iteration  15: 17349331.833 ops/s
Iteration  16: 17268864.308 ops/s
Iteration  17: 17349402.446 ops/s
Iteration  18: 17342471.852 ops/s
Iteration  19: 17385677.352 ops/s
Iteration  20: 17377033.692 ops/s
Iteration  21: 17368849.099 ops/s
Iteration  22: 17342438.249 ops/s
Iteration  23: 17351519.706 ops/s
Iteration  24: 17371113.173 ops/s
Iteration  25: 17368559.964 ops/s
Iteration  26: 17407411.057 ops/s
Iteration  27: 17331122.352 ops/s
Iteration  28: 17419371.171 ops/s
Iteration  29: 17277025.463 ops/s
Iteration  30: 17355777.928 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectLong":
  17351344.174 ±(99.9%) 28332.521 ops/s [Average]
  (min, avg, max) = (17246500.314, 17351344.174, 17425480.864), stdev = 42406.787
  CI (99.9%): [17323011.653, 17379676.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectLong  thrpt   30  17351344.174 ± 28332.521  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7408299.547 ops/s
# Warmup Iteration   2: 17072566.539 ops/s
# Warmup Iteration   3: 14045930.247 ops/s
# Warmup Iteration   4: 16836881.916 ops/s
# Warmup Iteration   5: 16848764.434 ops/s
# Warmup Iteration   6: 16754511.298 ops/s
# Warmup Iteration   7: 16806034.715 ops/s
# Warmup Iteration   8: 16855859.205 ops/s
# Warmup Iteration   9: 16852481.610 ops/s
# Warmup Iteration  10: 16832166.572 ops/s
# Warmup Iteration  11: 16821603.071 ops/s
# Warmup Iteration  12: 16827361.436 ops/s
# Warmup Iteration  13: 16835108.522 ops/s
# Warmup Iteration  14: 16863506.409 ops/s
# Warmup Iteration  15: 16858138.967 ops/s
# Warmup Iteration  16: 16815422.206 ops/s
# Warmup Iteration  17: 16842152.168 ops/s
# Warmup Iteration  18: 16854122.769 ops/s
# Warmup Iteration  19: 16833956.762 ops/s
# Warmup Iteration  20: 16830443.617 ops/s
# Warmup Iteration  21: 16858229.607 ops/s
# Warmup Iteration  22: 16809444.714 ops/s
# Warmup Iteration  23: 16862851.094 ops/s
# Warmup Iteration  24: 16878045.937 ops/s
# Warmup Iteration  25: 16867885.553 ops/s
# Warmup Iteration  26: 16870951.348 ops/s
# Warmup Iteration  27: 16851473.957 ops/s
# Warmup Iteration  28: 16852488.568 ops/s
# Warmup Iteration  29: 16817582.680 ops/s
# Warmup Iteration  30: 16850029.480 ops/s
Iteration   1: 16838658.171 ops/s
Iteration   2: 16863261.948 ops/s
Iteration   3: 16848221.887 ops/s
Iteration   4: 16848527.687 ops/s
Iteration   5: 16783170.636 ops/s
Iteration   6: 16840524.746 ops/s
Iteration   7: 16772861.888 ops/s
Iteration   8: 16851874.792 ops/s
Iteration   9: 16778760.752 ops/s
Iteration  10: 16843074.073 ops/s
Iteration  11: 16842192.335 ops/s
Iteration  12: 16876491.408 ops/s
Iteration  13: 16850635.576 ops/s
Iteration  14: 16875513.773 ops/s
Iteration  15: 16792472.192 ops/s
Iteration  16: 16914818.226 ops/s
Iteration  17: 16837309.696 ops/s
Iteration  18: 16830013.182 ops/s
Iteration  19: 16830472.553 ops/s
Iteration  20: 16864790.780 ops/s
Iteration  21: 16843144.509 ops/s
Iteration  22: 16830498.823 ops/s
Iteration  23: 16773043.653 ops/s
Iteration  24: 16875388.793 ops/s
Iteration  25: 16835352.878 ops/s
Iteration  26: 16804330.637 ops/s
Iteration  27: 16794461.139 ops/s
Iteration  28: 16862885.580 ops/s
Iteration  29: 16840887.076 ops/s
Iteration  30: 16858983.493 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectShort":
  16836754.096 ±(99.9%) 22698.650 ops/s [Average]
  (min, avg, max) = (16772861.888, 16836754.096, 16914818.226), stdev = 33974.273
  CI (99.9%): [16814055.447, 16859452.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectShort  thrpt   30  16836754.096 ± 22698.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4007589.112 ops/s
# Warmup Iteration   2: 35497173.726 ops/s
# Warmup Iteration   3: 30146656.241 ops/s
# Warmup Iteration   4: 35340375.108 ops/s
# Warmup Iteration   5: 35492006.649 ops/s
# Warmup Iteration   6: 35459883.838 ops/s
# Warmup Iteration   7: 35431112.464 ops/s
# Warmup Iteration   8: 35394011.890 ops/s
# Warmup Iteration   9: 35423812.608 ops/s
# Warmup Iteration  10: 35421754.281 ops/s
# Warmup Iteration  11: 35468532.909 ops/s
# Warmup Iteration  12: 35522089.413 ops/s
# Warmup Iteration  13: 35354831.449 ops/s
# Warmup Iteration  14: 35281378.140 ops/s
# Warmup Iteration  15: 35490971.608 ops/s
# Warmup Iteration  16: 35486483.079 ops/s
# Warmup Iteration  17: 35304693.031 ops/s
# Warmup Iteration  18: 35415394.207 ops/s
# Warmup Iteration  19: 35325332.112 ops/s
# Warmup Iteration  20: 35286592.508 ops/s
# Warmup Iteration  21: 35371396.666 ops/s
# Warmup Iteration  22: 35318436.978 ops/s
# Warmup Iteration  23: 35372336.981 ops/s
# Warmup Iteration  24: 35351291.578 ops/s
# Warmup Iteration  25: 35432557.915 ops/s
# Warmup Iteration  26: 35286246.511 ops/s
# Warmup Iteration  27: 35374925.878 ops/s
# Warmup Iteration  28: 35227247.996 ops/s
# Warmup Iteration  29: 35253554.179 ops/s
# Warmup Iteration  30: 35303736.990 ops/s
Iteration   1: 35306572.731 ops/s
Iteration   2: 35396321.760 ops/s
Iteration   3: 35374718.192 ops/s
Iteration   4: 35438551.885 ops/s
Iteration   5: 35472763.574 ops/s
Iteration   6: 35301824.451 ops/s
Iteration   7: 35449603.071 ops/s
Iteration   8: 35369754.299 ops/s
Iteration   9: 35485198.490 ops/s
Iteration  10: 35406615.060 ops/s
Iteration  11: 35369428.555 ops/s
Iteration  12: 35553656.314 ops/s
Iteration  13: 35292239.696 ops/s
Iteration  14: 35500279.406 ops/s
Iteration  15: 35222189.930 ops/s
Iteration  16: 35391192.367 ops/s
Iteration  17: 35475081.371 ops/s
Iteration  18: 35385383.041 ops/s
Iteration  19: 35558963.128 ops/s
Iteration  20: 35280144.810 ops/s
Iteration  21: 35423779.292 ops/s
Iteration  22: 35350972.801 ops/s
Iteration  23: 35400217.876 ops/s
Iteration  24: 35406625.080 ops/s
Iteration  25: 35411516.184 ops/s
Iteration  26: 35556196.069 ops/s
Iteration  27: 35412334.207 ops/s
Iteration  28: 35348634.028 ops/s
Iteration  29: 35454980.709 ops/s
Iteration  30: 35286311.597 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_collectWith":
  35402734.999 ±(99.9%) 56300.011 ops/s [Average]
  (min, avg, max) = (35222189.930, 35402734.999, 35558963.128), stdev = 84267.212
  CI (99.9%): [35346434.989, 35459035.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_collectWith  thrpt   30  35402734.999 ± 56300.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3741490.786 ops/s
# Warmup Iteration   2: 6923998.032 ops/s
# Warmup Iteration   3: 8061712.744 ops/s
# Warmup Iteration   4: 8102841.774 ops/s
# Warmup Iteration   5: 7813389.745 ops/s
# Warmup Iteration   6: 6781868.441 ops/s
# Warmup Iteration   7: 7926200.666 ops/s
# Warmup Iteration   8: 8034832.255 ops/s
# Warmup Iteration   9: 8022339.985 ops/s
# Warmup Iteration  10: 7984949.730 ops/s
# Warmup Iteration  11: 7980670.755 ops/s
# Warmup Iteration  12: 7956439.147 ops/s
# Warmup Iteration  13: 8028731.875 ops/s
# Warmup Iteration  14: 8007989.494 ops/s
# Warmup Iteration  15: 7995182.916 ops/s
# Warmup Iteration  16: 7967828.294 ops/s
# Warmup Iteration  17: 8043136.783 ops/s
# Warmup Iteration  18: 8060340.374 ops/s
# Warmup Iteration  19: 8078976.289 ops/s
# Warmup Iteration  20: 8069927.138 ops/s
# Warmup Iteration  21: 8051058.689 ops/s
# Warmup Iteration  22: 8075552.300 ops/s
# Warmup Iteration  23: 8087188.912 ops/s
# Warmup Iteration  24: 8062845.130 ops/s
# Warmup Iteration  25: 8061406.707 ops/s
# Warmup Iteration  26: 8054485.558 ops/s
# Warmup Iteration  27: 8095480.625 ops/s
# Warmup Iteration  28: 8044556.567 ops/s
# Warmup Iteration  29: 8071123.414 ops/s
# Warmup Iteration  30: 8053749.401 ops/s
Iteration   1: 8124231.839 ops/s
Iteration   2: 8089481.405 ops/s
Iteration   3: 8115168.789 ops/s
Iteration   4: 8051050.235 ops/s
Iteration   5: 8093597.762 ops/s
Iteration   6: 8117690.592 ops/s
Iteration   7: 8079454.482 ops/s
Iteration   8: 8118063.406 ops/s
Iteration   9: 8053586.353 ops/s
Iteration  10: 8076607.983 ops/s
Iteration  11: 8110191.413 ops/s
Iteration  12: 8073239.025 ops/s
Iteration  13: 8116433.314 ops/s
Iteration  14: 8047226.038 ops/s
Iteration  15: 8067081.038 ops/s
Iteration  16: 8115310.810 ops/s
Iteration  17: 8070188.487 ops/s
Iteration  18: 8101146.468 ops/s
Iteration  19: 8121731.600 ops/s
Iteration  20: 8086008.190 ops/s
Iteration  21: 8121540.645 ops/s
Iteration  22: 8066125.578 ops/s
Iteration  23: 8099010.368 ops/s
Iteration  24: 8124305.345 ops/s
Iteration  25: 8078048.436 ops/s
Iteration  26: 8124741.147 ops/s
Iteration  27: 8068243.475 ops/s
Iteration  28: 8097670.992 ops/s
Iteration  29: 8116734.608 ops/s
Iteration  30: 8077868.211 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_corresponds":
  8093392.601 ±(99.9%) 16482.647 ops/s [Average]
  (min, avg, max) = (8047226.038, 8093392.601, 8124741.147), stdev = 24670.451
  CI (99.9%): [8076909.955, 8109875.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_corresponds  thrpt   30  8093392.601 ± 16482.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17305299.411 ops/s
# Warmup Iteration   2: 32506663.042 ops/s
# Warmup Iteration   3: 34632296.305 ops/s
# Warmup Iteration   4: 34770025.312 ops/s
# Warmup Iteration   5: 29405774.212 ops/s
# Warmup Iteration   6: 34799482.844 ops/s
# Warmup Iteration   7: 34782315.859 ops/s
# Warmup Iteration   8: 34799403.824 ops/s
# Warmup Iteration   9: 34749148.665 ops/s
# Warmup Iteration  10: 34748320.047 ops/s
# Warmup Iteration  11: 34738790.188 ops/s
# Warmup Iteration  12: 34706050.073 ops/s
# Warmup Iteration  13: 34639340.885 ops/s
# Warmup Iteration  14: 34787188.773 ops/s
# Warmup Iteration  15: 34752459.406 ops/s
# Warmup Iteration  16: 34783872.085 ops/s
# Warmup Iteration  17: 34817333.069 ops/s
# Warmup Iteration  18: 34778100.064 ops/s
# Warmup Iteration  19: 34824688.261 ops/s
# Warmup Iteration  20: 34781132.197 ops/s
# Warmup Iteration  21: 34778351.037 ops/s
# Warmup Iteration  22: 34788325.927 ops/s
# Warmup Iteration  23: 34740511.073 ops/s
# Warmup Iteration  24: 34720425.857 ops/s
# Warmup Iteration  25: 34811673.423 ops/s
# Warmup Iteration  26: 34741568.640 ops/s
# Warmup Iteration  27: 34800392.255 ops/s
# Warmup Iteration  28: 34811647.698 ops/s
# Warmup Iteration  29: 34779012.365 ops/s
# Warmup Iteration  30: 34756725.225 ops/s
Iteration   1: 34765227.748 ops/s
Iteration   2: 34802127.946 ops/s
Iteration   3: 34808683.430 ops/s
Iteration   4: 34766206.915 ops/s
Iteration   5: 34873474.276 ops/s
Iteration   6: 34751591.406 ops/s
Iteration   7: 34755705.985 ops/s
Iteration   8: 34898665.571 ops/s
Iteration   9: 34744757.034 ops/s
Iteration  10: 34740536.624 ops/s
Iteration  11: 34814810.892 ops/s
Iteration  12: 34591886.506 ops/s
Iteration  13: 34582538.012 ops/s
Iteration  14: 34739368.987 ops/s
Iteration  15: 34887814.656 ops/s
Iteration  16: 34725433.842 ops/s
Iteration  17: 34748093.350 ops/s
Iteration  18: 34855920.973 ops/s
Iteration  19: 34783113.344 ops/s
Iteration  20: 34702425.635 ops/s
Iteration  21: 34736903.460 ops/s
Iteration  22: 34773501.421 ops/s
Iteration  23: 34725212.413 ops/s
Iteration  24: 34791953.446 ops/s
Iteration  25: 34791808.615 ops/s
Iteration  26: 34751540.671 ops/s
Iteration  27: 34861311.446 ops/s
Iteration  28: 34796470.453 ops/s
Iteration  29: 34764337.774 ops/s
Iteration  30: 34870288.582 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectIndex":
  34773390.381 ±(99.9%) 48584.113 ops/s [Average]
  (min, avg, max) = (34582538.012, 34773390.381, 34898665.571), stdev = 72718.419
  CI (99.9%): [34724806.267, 34821974.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_detectIndex  thrpt   30  34773390.381 ± 48584.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16906914.254 ops/s
# Warmup Iteration   2: 32127080.792 ops/s
# Warmup Iteration   3: 34380083.061 ops/s
# Warmup Iteration   4: 34724519.170 ops/s
# Warmup Iteration   5: 29281781.408 ops/s
# Warmup Iteration   6: 34686628.182 ops/s
# Warmup Iteration   7: 34543856.190 ops/s
# Warmup Iteration   8: 34600524.164 ops/s
# Warmup Iteration   9: 34631039.633 ops/s
# Warmup Iteration  10: 34572151.358 ops/s
# Warmup Iteration  11: 34701028.903 ops/s
# Warmup Iteration  12: 34649702.155 ops/s
# Warmup Iteration  13: 34610545.549 ops/s
# Warmup Iteration  14: 34747704.938 ops/s
# Warmup Iteration  15: 34631292.378 ops/s
# Warmup Iteration  16: 34589690.356 ops/s
# Warmup Iteration  17: 34654885.414 ops/s
# Warmup Iteration  18: 34656870.479 ops/s
# Warmup Iteration  19: 34856693.791 ops/s
# Warmup Iteration  20: 34676773.802 ops/s
# Warmup Iteration  21: 34590744.683 ops/s
# Warmup Iteration  22: 34737240.884 ops/s
# Warmup Iteration  23: 34634675.771 ops/s
# Warmup Iteration  24: 34642711.174 ops/s
# Warmup Iteration  25: 34605608.379 ops/s
# Warmup Iteration  26: 34664871.348 ops/s
# Warmup Iteration  27: 34605570.808 ops/s
# Warmup Iteration  28: 34743411.570 ops/s
# Warmup Iteration  29: 34636099.447 ops/s
# Warmup Iteration  30: 34587586.181 ops/s
Iteration   1: 34810112.636 ops/s
Iteration   2: 34556962.550 ops/s
Iteration   3: 34577760.463 ops/s
Iteration   4: 34792099.497 ops/s
Iteration   5: 34822392.257 ops/s
Iteration   6: 34547690.905 ops/s
Iteration   7: 34664689.608 ops/s
Iteration   8: 34811439.405 ops/s
Iteration   9: 34668108.762 ops/s
Iteration  10: 34728690.386 ops/s
Iteration  11: 34879991.399 ops/s
Iteration  12: 34647774.981 ops/s
Iteration  13: 34668923.154 ops/s
Iteration  14: 34865579.591 ops/s
Iteration  15: 34623788.547 ops/s
Iteration  16: 34738536.434 ops/s
Iteration  17: 34556052.023 ops/s
Iteration  18: 34579841.983 ops/s
Iteration  19: 34593322.019 ops/s
Iteration  20: 34623160.507 ops/s
Iteration  21: 34557815.630 ops/s
Iteration  22: 34554135.870 ops/s
Iteration  23: 34860100.199 ops/s
Iteration  24: 34559861.534 ops/s
Iteration  25: 34617446.105 ops/s
Iteration  26: 34650908.147 ops/s
Iteration  27: 34557186.312 ops/s
Iteration  28: 34668388.451 ops/s
Iteration  29: 34549544.314 ops/s
Iteration  30: 34531828.469 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_detectLastIndex":
  34662137.738 ±(99.9%) 74256.285 ops/s [Average]
  (min, avg, max) = (34531828.469, 34662137.738, 34879991.399), stdev = 111143.320
  CI (99.9%): [34587881.453, 34736394.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  34662137.738 ± 74256.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1811535.113 ops/s
# Warmup Iteration   2: 4385727.303 ops/s
# Warmup Iteration   3: 4624274.881 ops/s
# Warmup Iteration   4: 3862544.175 ops/s
# Warmup Iteration   5: 4628357.776 ops/s
# Warmup Iteration   6: 4650022.291 ops/s
# Warmup Iteration   7: 4647933.648 ops/s
# Warmup Iteration   8: 4654754.885 ops/s
# Warmup Iteration   9: 4649049.105 ops/s
# Warmup Iteration  10: 4644225.835 ops/s
# Warmup Iteration  11: 4639041.330 ops/s
# Warmup Iteration  12: 4639536.440 ops/s
# Warmup Iteration  13: 4633125.103 ops/s
# Warmup Iteration  14: 4639283.880 ops/s
# Warmup Iteration  15: 4650695.833 ops/s
# Warmup Iteration  16: 4644660.254 ops/s
# Warmup Iteration  17: 4649585.410 ops/s
# Warmup Iteration  18: 4649647.196 ops/s
# Warmup Iteration  19: 4657360.361 ops/s
# Warmup Iteration  20: 4632890.255 ops/s
# Warmup Iteration  21: 4640074.761 ops/s
# Warmup Iteration  22: 4623826.061 ops/s
# Warmup Iteration  23: 4621957.744 ops/s
# Warmup Iteration  24: 4629343.758 ops/s
# Warmup Iteration  25: 4646244.477 ops/s
# Warmup Iteration  26: 4651293.582 ops/s
# Warmup Iteration  27: 4644243.351 ops/s
# Warmup Iteration  28: 4645737.379 ops/s
# Warmup Iteration  29: 4647710.252 ops/s
# Warmup Iteration  30: 4642843.617 ops/s
Iteration   1: 4643679.274 ops/s
Iteration   2: 4639826.142 ops/s
Iteration   3: 4634107.595 ops/s
Iteration   4: 4624864.129 ops/s
Iteration   5: 4641188.766 ops/s
Iteration   6: 4629425.764 ops/s
Iteration   7: 4630210.993 ops/s
Iteration   8: 4637860.751 ops/s
Iteration   9: 4639902.297 ops/s
Iteration  10: 4642853.159 ops/s
Iteration  11: 4637602.208 ops/s
Iteration  12: 4652212.827 ops/s
Iteration  13: 4640206.959 ops/s
Iteration  14: 4646095.096 ops/s
Iteration  15: 4643778.554 ops/s
Iteration  16: 4644317.193 ops/s
Iteration  17: 4639636.366 ops/s
Iteration  18: 4645417.099 ops/s
Iteration  19: 4650742.311 ops/s
Iteration  20: 4621105.196 ops/s
Iteration  21: 4631771.844 ops/s
Iteration  22: 4639903.281 ops/s
Iteration  23: 4630750.969 ops/s
Iteration  24: 4637984.883 ops/s
Iteration  25: 4640495.056 ops/s
Iteration  26: 4645146.382 ops/s
Iteration  27: 4649779.730 ops/s
Iteration  28: 4648663.473 ops/s
Iteration  29: 4636367.514 ops/s
Iteration  30: 4639746.363 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_flatCollect":
  4639521.406 ±(99.9%) 4942.719 ops/s [Average]
  (min, avg, max) = (4621105.196, 4639521.406, 4652212.827), stdev = 7398.030
  CI (99.9%): [4634578.687, 4644464.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_flatCollect  thrpt   30  4639521.406 ± 4942.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5400767.330 ops/s
# Warmup Iteration   2: 11619664.415 ops/s
# Warmup Iteration   3: 10049696.628 ops/s
# Warmup Iteration   4: 11293844.653 ops/s
# Warmup Iteration   5: 11691300.217 ops/s
# Warmup Iteration   6: 11713133.644 ops/s
# Warmup Iteration   7: 11631663.153 ops/s
# Warmup Iteration   8: 11450576.339 ops/s
# Warmup Iteration   9: 11525902.957 ops/s
# Warmup Iteration  10: 11644196.822 ops/s
# Warmup Iteration  11: 11907168.771 ops/s
# Warmup Iteration  12: 11829061.655 ops/s
# Warmup Iteration  13: 11950797.705 ops/s
# Warmup Iteration  14: 11894823.063 ops/s
# Warmup Iteration  15: 11361198.432 ops/s
# Warmup Iteration  16: 10337427.800 ops/s
# Warmup Iteration  17: 11936775.065 ops/s
# Warmup Iteration  18: 12073311.723 ops/s
# Warmup Iteration  19: 12089156.465 ops/s
# Warmup Iteration  20: 11200002.435 ops/s
# Warmup Iteration  21: 11494157.887 ops/s
# Warmup Iteration  22: 11839367.445 ops/s
# Warmup Iteration  23: 11717345.970 ops/s
# Warmup Iteration  24: 12073497.807 ops/s
# Warmup Iteration  25: 11943840.344 ops/s
# Warmup Iteration  26: 11719939.206 ops/s
# Warmup Iteration  27: 11951292.066 ops/s
# Warmup Iteration  28: 11535734.867 ops/s
# Warmup Iteration  29: 11356811.347 ops/s
# Warmup Iteration  30: 11504367.156 ops/s
Iteration   1: 11515381.858 ops/s
Iteration   2: 11250299.415 ops/s
Iteration   3: 11372714.578 ops/s
Iteration   4: 11904519.564 ops/s
Iteration   5: 11684358.319 ops/s
Iteration   6: 12005250.659 ops/s
Iteration   7: 12013217.840 ops/s
Iteration   8: 11799911.161 ops/s
Iteration   9: 11579631.237 ops/s
Iteration  10: 12196972.504 ops/s
Iteration  11: 11227009.088 ops/s
Iteration  12: 11786076.098 ops/s
Iteration  13: 11991608.762 ops/s
Iteration  14: 12055596.836 ops/s
Iteration  15: 11658219.843 ops/s
Iteration  16: 11728635.448 ops/s
Iteration  17: 11965469.430 ops/s
Iteration  18: 11924536.959 ops/s
Iteration  19: 11474947.964 ops/s
Iteration  20: 12144090.638 ops/s
Iteration  21: 12056778.468 ops/s
Iteration  22: 11268121.625 ops/s
Iteration  23: 11245138.389 ops/s
Iteration  24: 11230113.011 ops/s
Iteration  25: 10125141.003 ops/s
Iteration  26: 9916412.146 ops/s
Iteration  27: 10855910.044 ops/s
Iteration  28: 11505151.283 ops/s
Iteration  29: 11873433.473 ops/s
Iteration  30: 11754875.674 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_groupBy":
  11570317.444 ±(99.9%) 358376.559 ops/s [Average]
  (min, avg, max) = (9916412.146, 11570317.444, 12196972.504), stdev = 536401.204
  CI (99.9%): [11211940.884, 11928694.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
SingletonListSubListTest._Benchmark.benchmark_groupBy  thrpt   30  11570317.444 ± 358376.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694135.813 ops/s
# Warmup Iteration   2: 745054.309 ops/s
# Warmup Iteration   3: 987014.015 ops/s
# Warmup Iteration   4: 987558.171 ops/s
# Warmup Iteration   5: 981618.893 ops/s
# Warmup Iteration   6: 992877.400 ops/s
# Warmup Iteration   7: 992570.488 ops/s
# Warmup Iteration   8: 991876.771 ops/s
# Warmup Iteration   9: 991089.228 ops/s
# Warmup Iteration  10: 990149.777 ops/s
# Warmup Iteration  11: 844095.739 ops/s
# Warmup Iteration  12: 978021.476 ops/s
# Warmup Iteration  13: 988994.947 ops/s
# Warmup Iteration  14: 990611.915 ops/s
# Warmup Iteration  15: 988274.901 ops/s
# Warmup Iteration  16: 988187.802 ops/s
# Warmup Iteration  17: 1049499.979 ops/s
# Warmup Iteration  18: 1051097.693 ops/s
# Warmup Iteration  19: 1047450.352 ops/s
# Warmup Iteration  20: 1049134.371 ops/s
# Warmup Iteration  21: 1049297.407 ops/s
# Warmup Iteration  22: 1053699.236 ops/s
# Warmup Iteration  23: 1046758.510 ops/s
# Warmup Iteration  24: 1046335.127 ops/s
# Warmup Iteration  25: 1050866.386 ops/s
# Warmup Iteration  26: 1047231.954 ops/s
# Warmup Iteration  27: 1047449.808 ops/s
# Warmup Iteration  28: 1048706.380 ops/s
# Warmup Iteration  29: 989753.116 ops/s
# Warmup Iteration  30: 1027098.686 ops/s
Iteration   1: 1054378.433 ops/s
Iteration   2: 1049629.222 ops/s
Iteration   3: 1040384.757 ops/s
Iteration   4: 1044169.470 ops/s
Iteration   5: 1043590.128 ops/s
Iteration   6: 1044702.676 ops/s
Iteration   7: 1051709.422 ops/s
Iteration   8: 1051506.765 ops/s
Iteration   9: 1052287.353 ops/s
Iteration  10: 1046553.371 ops/s
Iteration  11: 1048572.652 ops/s
Iteration  12: 1054102.911 ops/s
Iteration  13: 1051740.828 ops/s
Iteration  14: 1049358.567 ops/s
Iteration  15: 1048811.647 ops/s
Iteration  16: 1045565.509 ops/s
Iteration  17: 1045208.399 ops/s
Iteration  18: 1049984.815 ops/s
Iteration  19: 1050495.677 ops/s
Iteration  20: 1052894.915 ops/s
Iteration  21: 1044970.866 ops/s
Iteration  22: 1053169.274 ops/s
Iteration  23: 1053761.255 ops/s
Iteration  24: 1049545.804 ops/s
Iteration  25: 1053139.814 ops/s
Iteration  26: 1050685.795 ops/s
Iteration  27: 1050666.108 ops/s
Iteration  28: 1047676.141 ops/s
Iteration  29: 1049278.108 ops/s
Iteration  30: 1050052.241 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_iteratorRemove":
  1049286.431 ±(99.9%) 2364.724 ops/s [Average]
  (min, avg, max) = (1040384.757, 1049286.431, 1054378.433), stdev = 3539.408
  CI (99.9%): [1046921.707, 1051651.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1049286.431 ± 2364.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 342100.446 ops/s
# Warmup Iteration   2: 367369.443 ops/s
# Warmup Iteration   3: 475754.784 ops/s
# Warmup Iteration   4: 477320.099 ops/s
# Warmup Iteration   5: 476965.112 ops/s
# Warmup Iteration   6: 471649.146 ops/s
# Warmup Iteration   7: 471256.080 ops/s
# Warmup Iteration   8: 474487.248 ops/s
# Warmup Iteration   9: 475431.944 ops/s
# Warmup Iteration  10: 476171.289 ops/s
# Warmup Iteration  11: 478389.878 ops/s
# Warmup Iteration  12: 405948.374 ops/s
# Warmup Iteration  13: 474192.252 ops/s
# Warmup Iteration  14: 475482.464 ops/s
# Warmup Iteration  15: 475257.742 ops/s
# Warmup Iteration  16: 474778.507 ops/s
# Warmup Iteration  17: 504488.911 ops/s
# Warmup Iteration  18: 504460.052 ops/s
# Warmup Iteration  19: 506308.096 ops/s
# Warmup Iteration  20: 505390.925 ops/s
# Warmup Iteration  21: 504779.098 ops/s
# Warmup Iteration  22: 504064.020 ops/s
# Warmup Iteration  23: 504893.591 ops/s
# Warmup Iteration  24: 504353.160 ops/s
# Warmup Iteration  25: 507440.879 ops/s
# Warmup Iteration  26: 506460.712 ops/s
# Warmup Iteration  27: 505629.666 ops/s
# Warmup Iteration  28: 502268.792 ops/s
# Warmup Iteration  29: 505062.999 ops/s
# Warmup Iteration  30: 504101.783 ops/s
Iteration   1: 504470.057 ops/s
Iteration   2: 505587.576 ops/s
Iteration   3: 504426.490 ops/s
Iteration   4: 505502.401 ops/s
Iteration   5: 504730.780 ops/s
Iteration   6: 504871.239 ops/s
Iteration   7: 503259.116 ops/s
Iteration   8: 505283.255 ops/s
Iteration   9: 505009.813 ops/s
Iteration  10: 505510.679 ops/s
Iteration  11: 505534.311 ops/s
Iteration  12: 507448.082 ops/s
Iteration  13: 506930.490 ops/s
Iteration  14: 505860.892 ops/s
Iteration  15: 505478.895 ops/s
Iteration  16: 506769.924 ops/s
Iteration  17: 506860.372 ops/s
Iteration  18: 506655.908 ops/s
Iteration  19: 503346.684 ops/s
Iteration  20: 505763.739 ops/s
Iteration  21: 504200.863 ops/s
Iteration  22: 504488.584 ops/s
Iteration  23: 504074.069 ops/s
Iteration  24: 504592.468 ops/s
Iteration  25: 504634.286 ops/s
Iteration  26: 503384.131 ops/s
Iteration  27: 506853.738 ops/s
Iteration  28: 506087.677 ops/s
Iteration  29: 506292.656 ops/s
Iteration  30: 504314.302 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_listIterator":
  505274.116 ±(99.9%) 759.451 ops/s [Average]
  (min, avg, max) = (503259.116, 505274.116, 507448.082), stdev = 1136.711
  CI (99.9%): [504514.665, 506033.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
SingletonListSubListTest._Benchmark.benchmark_listIterator  thrpt   30  505274.116 ± 759.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13671029.666 ops/s
# Warmup Iteration   2: 23908181.546 ops/s
# Warmup Iteration   3: 28123677.024 ops/s
# Warmup Iteration   4: 28195399.244 ops/s
# Warmup Iteration   5: 28214436.280 ops/s
# Warmup Iteration   6: 28257115.470 ops/s
# Warmup Iteration   7: 28302409.896 ops/s
# Warmup Iteration   8: 28185998.527 ops/s
# Warmup Iteration   9: 28266395.099 ops/s
# Warmup Iteration  10: 28139590.121 ops/s
# Warmup Iteration  11: 28272555.828 ops/s
# Warmup Iteration  12: 28278522.823 ops/s
# Warmup Iteration  13: 28304615.643 ops/s
# Warmup Iteration  14: 28290151.502 ops/s
# Warmup Iteration  15: 28264299.515 ops/s
# Warmup Iteration  16: 28393515.447 ops/s
# Warmup Iteration  17: 28338982.021 ops/s
# Warmup Iteration  18: 28306186.768 ops/s
# Warmup Iteration  19: 28265279.539 ops/s
# Warmup Iteration  20: 28346957.352 ops/s
# Warmup Iteration  21: 28268803.496 ops/s
# Warmup Iteration  22: 28136217.617 ops/s
# Warmup Iteration  23: 28320223.027 ops/s
# Warmup Iteration  24: 28361695.225 ops/s
# Warmup Iteration  25: 28263093.838 ops/s
# Warmup Iteration  26: 28133815.654 ops/s
# Warmup Iteration  27: 28368828.252 ops/s
# Warmup Iteration  28: 28244815.377 ops/s
# Warmup Iteration  29: 28102089.542 ops/s
# Warmup Iteration  30: 28359144.557 ops/s
Iteration   1: 28236108.882 ops/s
Iteration   2: 28110917.832 ops/s
Iteration   3: 28464739.199 ops/s
Iteration   4: 28467258.731 ops/s
Iteration   5: 28384357.654 ops/s
Iteration   6: 28320814.523 ops/s
Iteration   7: 28168759.833 ops/s
Iteration   8: 28328461.389 ops/s
Iteration   9: 28260316.089 ops/s
Iteration  10: 28203725.985 ops/s
Iteration  11: 28250733.408 ops/s
Iteration  12: 28159037.206 ops/s
Iteration  13: 28177037.758 ops/s
Iteration  14: 28095537.821 ops/s
Iteration  15: 28263737.454 ops/s
Iteration  16: 28517750.825 ops/s
Iteration  17: 28156072.620 ops/s
Iteration  18: 28241039.144 ops/s
Iteration  19: 28317786.612 ops/s
Iteration  20: 28156914.254 ops/s
Iteration  21: 28092319.520 ops/s
Iteration  22: 28130012.382 ops/s
Iteration  23: 28320900.316 ops/s
Iteration  24: 28240957.088 ops/s
Iteration  25: 28362272.726 ops/s
Iteration  26: 28309818.572 ops/s
Iteration  27: 28091833.683 ops/s
Iteration  28: 28326752.986 ops/s
Iteration  29: 28182944.809 ops/s
Iteration  30: 28409265.666 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_newEmpty":
  28258272.832 ±(99.9%) 78631.355 ops/s [Average]
  (min, avg, max) = (28091833.683, 28258272.832, 28517750.825), stdev = 117691.719
  CI (99.9%): [28179641.477, 28336904.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_newEmpty  thrpt   30  28258272.832 ± 78631.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8840207.839 ops/s
# Warmup Iteration   2: 18474308.605 ops/s
# Warmup Iteration   3: 16129563.690 ops/s
# Warmup Iteration   4: 18774598.712 ops/s
# Warmup Iteration   5: 18853214.993 ops/s
# Warmup Iteration   6: 18828863.035 ops/s
# Warmup Iteration   7: 18889105.641 ops/s
# Warmup Iteration   8: 18810538.578 ops/s
# Warmup Iteration   9: 18894734.259 ops/s
# Warmup Iteration  10: 18883182.132 ops/s
# Warmup Iteration  11: 18797956.458 ops/s
# Warmup Iteration  12: 18833773.601 ops/s
# Warmup Iteration  13: 18840790.088 ops/s
# Warmup Iteration  14: 18849875.463 ops/s
# Warmup Iteration  15: 18784802.934 ops/s
# Warmup Iteration  16: 18884245.241 ops/s
# Warmup Iteration  17: 18779929.505 ops/s
# Warmup Iteration  18: 18788267.150 ops/s
# Warmup Iteration  19: 18796792.497 ops/s
# Warmup Iteration  20: 18885517.726 ops/s
# Warmup Iteration  21: 18818694.291 ops/s
# Warmup Iteration  22: 18849701.668 ops/s
# Warmup Iteration  23: 18880146.116 ops/s
# Warmup Iteration  24: 18805913.859 ops/s
# Warmup Iteration  25: 18785824.207 ops/s
# Warmup Iteration  26: 18755325.302 ops/s
# Warmup Iteration  27: 18487584.403 ops/s
# Warmup Iteration  28: 18750536.617 ops/s
# Warmup Iteration  29: 18836766.364 ops/s
# Warmup Iteration  30: 18778045.117 ops/s
Iteration   1: 18951226.124 ops/s
Iteration   2: 18843522.486 ops/s
Iteration   3: 18771270.609 ops/s
Iteration   4: 18883982.476 ops/s
Iteration   5: 18905108.265 ops/s
Iteration   6: 18884042.356 ops/s
Iteration   7: 18787253.429 ops/s
Iteration   8: 18852806.870 ops/s
Iteration   9: 18906705.462 ops/s
Iteration  10: 18904917.856 ops/s
Iteration  11: 18919423.969 ops/s
Iteration  12: 18913853.007 ops/s
Iteration  13: 18833447.689 ops/s
Iteration  14: 18824313.174 ops/s
Iteration  15: 18760559.662 ops/s
Iteration  16: 18835429.096 ops/s
Iteration  17: 18795044.102 ops/s
Iteration  18: 18756529.134 ops/s
Iteration  19: 18833624.210 ops/s
Iteration  20: 18881942.253 ops/s
Iteration  21: 18870573.062 ops/s
Iteration  22: 18776652.021 ops/s
Iteration  23: 18928292.537 ops/s
Iteration  24: 18897648.888 ops/s
Iteration  25: 18960238.221 ops/s
Iteration  26: 18869645.423 ops/s
Iteration  27: 18929796.535 ops/s
Iteration  28: 18945276.206 ops/s
Iteration  29: 18926951.858 ops/s
Iteration  30: 18857917.619 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partition":
  18866933.153 ±(99.9%) 39753.481 ops/s [Average]
  (min, avg, max) = (18756529.134, 18866933.153, 18960238.221), stdev = 59501.144
  CI (99.9%): [18827179.672, 18906686.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_partition  thrpt   30  18866933.153 ± 39753.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8551942.598 ops/s
# Warmup Iteration   2: 17932338.099 ops/s
# Warmup Iteration   3: 15781475.798 ops/s
# Warmup Iteration   4: 18462791.195 ops/s
# Warmup Iteration   5: 18380547.594 ops/s
# Warmup Iteration   6: 18468898.718 ops/s
# Warmup Iteration   7: 18406664.686 ops/s
# Warmup Iteration   8: 18469182.807 ops/s
# Warmup Iteration   9: 18456859.515 ops/s
# Warmup Iteration  10: 18412301.500 ops/s
# Warmup Iteration  11: 18435232.387 ops/s
# Warmup Iteration  12: 18499301.112 ops/s
# Warmup Iteration  13: 18466742.334 ops/s
# Warmup Iteration  14: 18504357.789 ops/s
# Warmup Iteration  15: 18499138.345 ops/s
# Warmup Iteration  16: 18505182.282 ops/s
# Warmup Iteration  17: 18493593.757 ops/s
# Warmup Iteration  18: 18492973.607 ops/s
# Warmup Iteration  19: 18569458.101 ops/s
# Warmup Iteration  20: 18473353.563 ops/s
# Warmup Iteration  21: 18432851.774 ops/s
# Warmup Iteration  22: 18531326.678 ops/s
# Warmup Iteration  23: 18462339.492 ops/s
# Warmup Iteration  24: 18506708.518 ops/s
# Warmup Iteration  25: 18453683.907 ops/s
# Warmup Iteration  26: 18458398.546 ops/s
# Warmup Iteration  27: 18485717.420 ops/s
# Warmup Iteration  28: 18478078.350 ops/s
# Warmup Iteration  29: 18431088.724 ops/s
# Warmup Iteration  30: 18518634.990 ops/s
Iteration   1: 18507693.783 ops/s
Iteration   2: 18514663.897 ops/s
Iteration   3: 18365231.043 ops/s
Iteration   4: 18398825.937 ops/s
Iteration   5: 18568632.021 ops/s
Iteration   6: 18465761.977 ops/s
Iteration   7: 18471032.731 ops/s
Iteration   8: 18471914.893 ops/s
Iteration   9: 18421340.857 ops/s
Iteration  10: 18033048.728 ops/s
Iteration  11: 18420778.449 ops/s
Iteration  12: 18429495.558 ops/s
Iteration  13: 18528090.896 ops/s
Iteration  14: 18590571.228 ops/s
Iteration  15: 18468104.259 ops/s
Iteration  16: 18363598.923 ops/s
Iteration  17: 18474048.967 ops/s
Iteration  18: 18525347.290 ops/s
Iteration  19: 18413211.826 ops/s
Iteration  20: 18427599.066 ops/s
Iteration  21: 18424967.671 ops/s
Iteration  22: 18429705.381 ops/s
Iteration  23: 18360050.764 ops/s
Iteration  24: 18415279.647 ops/s
Iteration  25: 18452854.722 ops/s
Iteration  26: 18366196.860 ops/s
Iteration  27: 18401807.648 ops/s
Iteration  28: 18387397.471 ops/s
Iteration  29: 18502370.226 ops/s
Iteration  30: 18485838.357 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_partitionWith":
  18436182.036 ±(99.9%) 64725.057 ops/s [Average]
  (min, avg, max) = (18033048.728, 18436182.036, 18590571.228), stdev = 96877.426
  CI (99.9%): [18371456.979, 18500907.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_partitionWith  thrpt   30  18436182.036 ± 64725.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7733001.519 ops/s
# Warmup Iteration   2: 16461073.571 ops/s
# Warmup Iteration   3: 14319475.939 ops/s
# Warmup Iteration   4: 16766175.360 ops/s
# Warmup Iteration   5: 16757683.301 ops/s
# Warmup Iteration   6: 16811824.705 ops/s
# Warmup Iteration   7: 16713655.067 ops/s
# Warmup Iteration   8: 16776285.481 ops/s
# Warmup Iteration   9: 16799802.934 ops/s
# Warmup Iteration  10: 16738204.379 ops/s
# Warmup Iteration  11: 16810782.738 ops/s
# Warmup Iteration  12: 16773690.229 ops/s
# Warmup Iteration  13: 16736856.312 ops/s
# Warmup Iteration  14: 16793345.663 ops/s
# Warmup Iteration  15: 16776822.512 ops/s
# Warmup Iteration  16: 16772319.669 ops/s
# Warmup Iteration  17: 16673330.201 ops/s
# Warmup Iteration  18: 16792217.522 ops/s
# Warmup Iteration  19: 16824420.434 ops/s
# Warmup Iteration  20: 16817676.751 ops/s
# Warmup Iteration  21: 16792266.053 ops/s
# Warmup Iteration  22: 16741825.784 ops/s
# Warmup Iteration  23: 16758435.729 ops/s
# Warmup Iteration  24: 16840338.437 ops/s
# Warmup Iteration  25: 16862514.885 ops/s
# Warmup Iteration  26: 16796253.853 ops/s
# Warmup Iteration  27: 16775149.348 ops/s
# Warmup Iteration  28: 16695182.229 ops/s
# Warmup Iteration  29: 16711510.625 ops/s
# Warmup Iteration  30: 16744557.844 ops/s
Iteration   1: 16751666.678 ops/s
Iteration   2: 16847465.743 ops/s
Iteration   3: 16656012.362 ops/s
Iteration   4: 16784946.068 ops/s
Iteration   5: 16855747.758 ops/s
Iteration   6: 16759415.311 ops/s
Iteration   7: 16694428.040 ops/s
Iteration   8: 16767069.421 ops/s
Iteration   9: 16690048.007 ops/s
Iteration  10: 16721053.935 ops/s
Iteration  11: 16774780.810 ops/s
Iteration  12: 16768875.972 ops/s
Iteration  13: 16835648.217 ops/s
Iteration  14: 16746288.852 ops/s
Iteration  15: 16696503.075 ops/s
Iteration  16: 16784349.589 ops/s
Iteration  17: 16793697.242 ops/s
Iteration  18: 16638205.257 ops/s
Iteration  19: 16900934.609 ops/s
Iteration  20: 16745116.142 ops/s
Iteration  21: 16801496.687 ops/s
Iteration  22: 16791354.088 ops/s
Iteration  23: 16734724.478 ops/s
Iteration  24: 16787116.877 ops/s
Iteration  25: 16894375.651 ops/s
Iteration  26: 16785382.513 ops/s
Iteration  27: 16784718.921 ops/s
Iteration  28: 16775157.889 ops/s
Iteration  29: 16762144.827 ops/s
Iteration  30: 16633234.651 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_reject":
  16765398.656 ±(99.9%) 43826.928 ops/s [Average]
  (min, avg, max) = (16633234.651, 16765398.656, 16900934.609), stdev = 65598.087
  CI (99.9%): [16721571.728, 16809225.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_reject  thrpt   30  16765398.656 ± 43826.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7593232.864 ops/s
# Warmup Iteration   2: 16339979.701 ops/s
# Warmup Iteration   3: 14055789.491 ops/s
# Warmup Iteration   4: 16452584.729 ops/s
# Warmup Iteration   5: 16506123.525 ops/s
# Warmup Iteration   6: 16436531.232 ops/s
# Warmup Iteration   7: 16491401.939 ops/s
# Warmup Iteration   8: 16472576.006 ops/s
# Warmup Iteration   9: 16420588.080 ops/s
# Warmup Iteration  10: 16457791.457 ops/s
# Warmup Iteration  11: 16481446.124 ops/s
# Warmup Iteration  12: 16415306.346 ops/s
# Warmup Iteration  13: 16412206.815 ops/s
# Warmup Iteration  14: 16445332.351 ops/s
# Warmup Iteration  15: 16454715.770 ops/s
# Warmup Iteration  16: 16461920.693 ops/s
# Warmup Iteration  17: 16415320.350 ops/s
# Warmup Iteration  18: 16456870.176 ops/s
# Warmup Iteration  19: 16409458.327 ops/s
# Warmup Iteration  20: 16389951.870 ops/s
# Warmup Iteration  21: 16328288.936 ops/s
# Warmup Iteration  22: 16333307.802 ops/s
# Warmup Iteration  23: 16415674.674 ops/s
# Warmup Iteration  24: 16412604.753 ops/s
# Warmup Iteration  25: 16423063.226 ops/s
# Warmup Iteration  26: 16398314.149 ops/s
# Warmup Iteration  27: 16443748.640 ops/s
# Warmup Iteration  28: 16477667.708 ops/s
# Warmup Iteration  29: 16402613.832 ops/s
# Warmup Iteration  30: 16454326.252 ops/s
Iteration   1: 16431178.173 ops/s
Iteration   2: 16458024.579 ops/s
Iteration   3: 16504943.756 ops/s
Iteration   4: 16401449.195 ops/s
Iteration   5: 16418496.474 ops/s
Iteration   6: 16373610.748 ops/s
Iteration   7: 16426474.390 ops/s
Iteration   8: 16372934.130 ops/s
Iteration   9: 16424058.863 ops/s
Iteration  10: 16462652.660 ops/s
Iteration  11: 16466605.443 ops/s
Iteration  12: 16396324.020 ops/s
Iteration  13: 16415126.603 ops/s
Iteration  14: 16346598.445 ops/s
Iteration  15: 16399491.510 ops/s
Iteration  16: 16492103.705 ops/s
Iteration  17: 16469010.423 ops/s
Iteration  18: 16476840.887 ops/s
Iteration  19: 16428165.136 ops/s
Iteration  20: 16342090.206 ops/s
Iteration  21: 16469151.026 ops/s
Iteration  22: 16412656.812 ops/s
Iteration  23: 16504147.500 ops/s
Iteration  24: 16450218.029 ops/s
Iteration  25: 16466457.952 ops/s
Iteration  26: 16439126.225 ops/s
Iteration  27: 16411740.472 ops/s
Iteration  28: 16469763.625 ops/s
Iteration  29: 16420388.385 ops/s
Iteration  30: 16433513.491 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_rejectWith":
  16432778.095 ±(99.9%) 28217.052 ops/s [Average]
  (min, avg, max) = (16342090.206, 16432778.095, 16504943.756), stdev = 42233.959
  CI (99.9%): [16404561.043, 16460995.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_rejectWith  thrpt   30  16432778.095 ± 28217.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493432.442 ops/s
# Warmup Iteration   2: 752299.805 ops/s
# Warmup Iteration   3: 834576.815 ops/s
# Warmup Iteration   4: 831610.224 ops/s
# Warmup Iteration   5: 829670.754 ops/s
# Warmup Iteration   6: 736317.705 ops/s
# Warmup Iteration   7: 808537.889 ops/s
# Warmup Iteration   8: 833813.299 ops/s
# Warmup Iteration   9: 837443.636 ops/s
# Warmup Iteration  10: 828988.919 ops/s
# Warmup Iteration  11: 832932.607 ops/s
# Warmup Iteration  12: 829562.773 ops/s
# Warmup Iteration  13: 832094.098 ops/s
# Warmup Iteration  14: 832876.075 ops/s
# Warmup Iteration  15: 831606.834 ops/s
# Warmup Iteration  16: 835902.246 ops/s
# Warmup Iteration  17: 874633.929 ops/s
# Warmup Iteration  18: 876283.337 ops/s
# Warmup Iteration  19: 875355.231 ops/s
# Warmup Iteration  20: 869469.507 ops/s
# Warmup Iteration  21: 867623.460 ops/s
# Warmup Iteration  22: 869713.953 ops/s
# Warmup Iteration  23: 875873.826 ops/s
# Warmup Iteration  24: 873287.186 ops/s
# Warmup Iteration  25: 872679.136 ops/s
# Warmup Iteration  26: 870655.398 ops/s
# Warmup Iteration  27: 869553.150 ops/s
# Warmup Iteration  28: 872329.825 ops/s
# Warmup Iteration  29: 872900.638 ops/s
# Warmup Iteration  30: 871135.545 ops/s
Iteration   1: 868531.057 ops/s
Iteration   2: 874097.216 ops/s
Iteration   3: 867055.936 ops/s
Iteration   4: 869614.587 ops/s
Iteration   5: 867623.799 ops/s
Iteration   6: 870590.664 ops/s
Iteration   7: 874309.081 ops/s
Iteration   8: 878320.810 ops/s
Iteration   9: 874035.188 ops/s
Iteration  10: 874564.189 ops/s
Iteration  11: 867595.738 ops/s
Iteration  12: 868898.624 ops/s
Iteration  13: 867595.119 ops/s
Iteration  14: 871609.810 ops/s
Iteration  15: 875005.881 ops/s
Iteration  16: 868656.774 ops/s
Iteration  17: 871626.724 ops/s
Iteration  18: 871704.470 ops/s
Iteration  19: 872515.071 ops/s
Iteration  20: 871446.924 ops/s
Iteration  21: 872331.492 ops/s
Iteration  22: 872615.506 ops/s
Iteration  23: 876749.901 ops/s
Iteration  24: 870173.368 ops/s
Iteration  25: 869804.619 ops/s
Iteration  26: 865046.455 ops/s
Iteration  27: 866275.081 ops/s
Iteration  28: 868002.774 ops/s
Iteration  29: 870398.208 ops/s
Iteration  30: 869505.965 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_remove":
  870876.701 ±(99.9%) 2121.952 ops/s [Average]
  (min, avg, max) = (865046.455, 870876.701, 878320.810), stdev = 3176.037
  CI (99.9%): [868754.749, 872998.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_remove  thrpt   30  870876.701 ± 2121.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484278.161 ops/s
# Warmup Iteration   2: 727692.362 ops/s
# Warmup Iteration   3: 805322.623 ops/s
# Warmup Iteration   4: 807125.100 ops/s
# Warmup Iteration   5: 810884.951 ops/s
# Warmup Iteration   6: 746917.559 ops/s
# Warmup Iteration   7: 764923.134 ops/s
# Warmup Iteration   8: 807930.819 ops/s
# Warmup Iteration   9: 808465.014 ops/s
# Warmup Iteration  10: 807816.735 ops/s
# Warmup Iteration  11: 809075.622 ops/s
# Warmup Iteration  12: 803763.888 ops/s
# Warmup Iteration  13: 813882.426 ops/s
# Warmup Iteration  14: 816323.032 ops/s
# Warmup Iteration  15: 810662.046 ops/s
# Warmup Iteration  16: 807225.166 ops/s
# Warmup Iteration  17: 844263.797 ops/s
# Warmup Iteration  18: 854575.338 ops/s
# Warmup Iteration  19: 845151.709 ops/s
# Warmup Iteration  20: 848831.587 ops/s
# Warmup Iteration  21: 851013.179 ops/s
# Warmup Iteration  22: 848253.125 ops/s
# Warmup Iteration  23: 851034.758 ops/s
# Warmup Iteration  24: 847768.924 ops/s
# Warmup Iteration  25: 843555.376 ops/s
# Warmup Iteration  26: 843574.550 ops/s
# Warmup Iteration  27: 853085.363 ops/s
# Warmup Iteration  28: 852132.702 ops/s
# Warmup Iteration  29: 851786.085 ops/s
# Warmup Iteration  30: 853682.958 ops/s
Iteration   1: 854408.097 ops/s
Iteration   2: 846371.364 ops/s
Iteration   3: 845233.255 ops/s
Iteration   4: 840818.172 ops/s
Iteration   5: 853650.585 ops/s
Iteration   6: 849443.999 ops/s
Iteration   7: 845750.028 ops/s
Iteration   8: 848656.180 ops/s
Iteration   9: 848536.338 ops/s
Iteration  10: 848699.389 ops/s
Iteration  11: 841789.843 ops/s
Iteration  12: 847961.948 ops/s
Iteration  13: 849811.069 ops/s
Iteration  14: 852639.177 ops/s
Iteration  15: 853709.447 ops/s
Iteration  16: 850185.308 ops/s
Iteration  17: 854075.634 ops/s
Iteration  18: 851069.751 ops/s
Iteration  19: 845100.450 ops/s
Iteration  20: 847756.072 ops/s
Iteration  21: 852456.151 ops/s
Iteration  22: 856334.179 ops/s
Iteration  23: 853190.368 ops/s
Iteration  24: 851271.260 ops/s
Iteration  25: 846772.347 ops/s
Iteration  26: 843837.525 ops/s
Iteration  27: 840006.084 ops/s
Iteration  28: 843695.905 ops/s
Iteration  29: 845767.559 ops/s
Iteration  30: 847890.070 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAll":
  848562.918 ±(99.9%) 2835.887 ops/s [Average]
  (min, avg, max) = (840006.084, 848562.918, 856334.179), stdev = 4244.622
  CI (99.9%): [845727.031, 851398.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_removeAll  thrpt   30  848562.918 ± 2835.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487267.942 ops/s
# Warmup Iteration   2: 736041.344 ops/s
# Warmup Iteration   3: 813757.005 ops/s
# Warmup Iteration   4: 818532.741 ops/s
# Warmup Iteration   5: 819181.286 ops/s
# Warmup Iteration   6: 727875.864 ops/s
# Warmup Iteration   7: 786024.045 ops/s
# Warmup Iteration   8: 812087.031 ops/s
# Warmup Iteration   9: 811681.333 ops/s
# Warmup Iteration  10: 815549.269 ops/s
# Warmup Iteration  11: 818303.719 ops/s
# Warmup Iteration  12: 814807.861 ops/s
# Warmup Iteration  13: 813591.080 ops/s
# Warmup Iteration  14: 813064.131 ops/s
# Warmup Iteration  15: 812978.252 ops/s
# Warmup Iteration  16: 813034.598 ops/s
# Warmup Iteration  17: 853285.771 ops/s
# Warmup Iteration  18: 849601.445 ops/s
# Warmup Iteration  19: 855871.113 ops/s
# Warmup Iteration  20: 852990.389 ops/s
# Warmup Iteration  21: 854975.193 ops/s
# Warmup Iteration  22: 855437.037 ops/s
# Warmup Iteration  23: 855655.548 ops/s
# Warmup Iteration  24: 855959.667 ops/s
# Warmup Iteration  25: 848602.029 ops/s
# Warmup Iteration  26: 855913.795 ops/s
# Warmup Iteration  27: 855528.443 ops/s
# Warmup Iteration  28: 857447.652 ops/s
# Warmup Iteration  29: 852087.139 ops/s
# Warmup Iteration  30: 848493.134 ops/s
Iteration   1: 849951.340 ops/s
Iteration   2: 848369.837 ops/s
Iteration   3: 853619.151 ops/s
Iteration   4: 854167.206 ops/s
Iteration   5: 849472.822 ops/s
Iteration   6: 858172.778 ops/s
Iteration   7: 855589.125 ops/s
Iteration   8: 856398.665 ops/s
Iteration   9: 850916.199 ops/s
Iteration  10: 855348.110 ops/s
Iteration  11: 847790.694 ops/s
Iteration  12: 848146.851 ops/s
Iteration  13: 848902.810 ops/s
Iteration  14: 852422.653 ops/s
Iteration  15: 855520.199 ops/s
Iteration  16: 857574.288 ops/s
Iteration  17: 849209.984 ops/s
Iteration  18: 855083.947 ops/s
Iteration  19: 849585.254 ops/s
Iteration  20: 850091.891 ops/s
Iteration  21: 849129.294 ops/s
Iteration  22: 849863.412 ops/s
Iteration  23: 850089.736 ops/s
Iteration  24: 853521.985 ops/s
Iteration  25: 849956.524 ops/s
Iteration  26: 851543.700 ops/s
Iteration  27: 853143.945 ops/s
Iteration  28: 853202.564 ops/s
Iteration  29: 856086.137 ops/s
Iteration  30: 852514.102 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeAllIterable":
  852179.507 ±(99.9%) 2032.061 ops/s [Average]
  (min, avg, max) = (847790.694, 852179.507, 858172.778), stdev = 3041.494
  CI (99.9%): [850147.446, 854211.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_removeAllIterable  thrpt   30  852179.507 ± 2032.061  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495007.613 ops/s
# Warmup Iteration   2: 702850.330 ops/s
# Warmup Iteration   3: 815856.650 ops/s
# Warmup Iteration   4: 811321.058 ops/s
# Warmup Iteration   5: 811282.436 ops/s
# Warmup Iteration   6: 814444.147 ops/s
# Warmup Iteration   7: 689942.426 ops/s
# Warmup Iteration   8: 815571.267 ops/s
# Warmup Iteration   9: 813014.914 ops/s
# Warmup Iteration  10: 809566.580 ops/s
# Warmup Iteration  11: 811755.570 ops/s
# Warmup Iteration  12: 815369.021 ops/s
# Warmup Iteration  13: 815917.678 ops/s
# Warmup Iteration  14: 814770.004 ops/s
# Warmup Iteration  15: 813367.007 ops/s
# Warmup Iteration  16: 813434.593 ops/s
# Warmup Iteration  17: 856117.153 ops/s
# Warmup Iteration  18: 854582.259 ops/s
# Warmup Iteration  19: 854225.039 ops/s
# Warmup Iteration  20: 852285.604 ops/s
# Warmup Iteration  21: 851316.142 ops/s
# Warmup Iteration  22: 854546.970 ops/s
# Warmup Iteration  23: 851810.182 ops/s
# Warmup Iteration  24: 851393.963 ops/s
# Warmup Iteration  25: 851539.245 ops/s
# Warmup Iteration  26: 851010.232 ops/s
# Warmup Iteration  27: 852686.139 ops/s
# Warmup Iteration  28: 849949.152 ops/s
# Warmup Iteration  29: 856369.166 ops/s
# Warmup Iteration  30: 856030.663 ops/s
Iteration   1: 849916.914 ops/s
Iteration   2: 851157.172 ops/s
Iteration   3: 852970.585 ops/s
Iteration   4: 854576.763 ops/s
Iteration   5: 852173.391 ops/s
Iteration   6: 855245.110 ops/s
Iteration   7: 853913.102 ops/s
Iteration   8: 856425.165 ops/s
Iteration   9: 853395.446 ops/s
Iteration  10: 854857.950 ops/s
Iteration  11: 853808.894 ops/s
Iteration  12: 856005.262 ops/s
Iteration  13: 858195.102 ops/s
Iteration  14: 852138.202 ops/s
Iteration  15: 855546.197 ops/s
Iteration  16: 852520.457 ops/s
Iteration  17: 855948.844 ops/s
Iteration  18: 854364.293 ops/s
Iteration  19: 855103.438 ops/s
Iteration  20: 852782.440 ops/s
Iteration  21: 854614.765 ops/s
Iteration  22: 852583.406 ops/s
Iteration  23: 853340.695 ops/s
Iteration  24: 854874.016 ops/s
Iteration  25: 857080.520 ops/s
Iteration  26: 854543.984 ops/s
Iteration  27: 853008.367 ops/s
Iteration  28: 855523.736 ops/s
Iteration  29: 852619.118 ops/s
Iteration  30: 854643.573 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeFromIndex":
  854129.230 ±(99.9%) 1195.479 ops/s [Average]
  (min, avg, max) = (849916.914, 854129.230, 858195.102), stdev = 1789.338
  CI (99.9%): [852933.751, 855324.710] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_removeFromIndex  thrpt   30  854129.230 ± 1195.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 474371.102 ops/s
# Warmup Iteration   2: 686185.846 ops/s
# Warmup Iteration   3: 763266.156 ops/s
# Warmup Iteration   4: 765902.970 ops/s
# Warmup Iteration   5: 767006.313 ops/s
# Warmup Iteration   6: 768470.783 ops/s
# Warmup Iteration   7: 657116.759 ops/s
# Warmup Iteration   8: 765246.380 ops/s
# Warmup Iteration   9: 769410.586 ops/s
# Warmup Iteration  10: 772765.528 ops/s
# Warmup Iteration  11: 771735.552 ops/s
# Warmup Iteration  12: 770674.208 ops/s
# Warmup Iteration  13: 766598.065 ops/s
# Warmup Iteration  14: 768342.760 ops/s
# Warmup Iteration  15: 773450.053 ops/s
# Warmup Iteration  16: 768891.725 ops/s
# Warmup Iteration  17: 810437.531 ops/s
# Warmup Iteration  18: 806509.583 ops/s
# Warmup Iteration  19: 803509.192 ops/s
# Warmup Iteration  20: 811069.158 ops/s
# Warmup Iteration  21: 810471.298 ops/s
# Warmup Iteration  22: 804738.463 ops/s
# Warmup Iteration  23: 806166.613 ops/s
# Warmup Iteration  24: 806115.883 ops/s
# Warmup Iteration  25: 806423.370 ops/s
# Warmup Iteration  26: 806991.323 ops/s
# Warmup Iteration  27: 806072.096 ops/s
# Warmup Iteration  28: 804608.471 ops/s
# Warmup Iteration  29: 806547.367 ops/s
# Warmup Iteration  30: 805683.650 ops/s
Iteration   1: 806104.247 ops/s
Iteration   2: 807726.219 ops/s
Iteration   3: 808150.331 ops/s
Iteration   4: 805593.019 ops/s
Iteration   5: 802953.015 ops/s
Iteration   6: 805874.407 ops/s
Iteration   7: 806955.686 ops/s
Iteration   8: 807979.125 ops/s
Iteration   9: 804706.100 ops/s
Iteration  10: 806226.769 ops/s
Iteration  11: 806514.346 ops/s
Iteration  12: 806191.020 ops/s
Iteration  13: 805648.226 ops/s
Iteration  14: 805911.496 ops/s
Iteration  15: 804750.285 ops/s
Iteration  16: 808175.781 ops/s
Iteration  17: 806152.875 ops/s
Iteration  18: 808408.846 ops/s
Iteration  19: 805154.129 ops/s
Iteration  20: 806581.503 ops/s
Iteration  21: 805341.406 ops/s
Iteration  22: 808436.360 ops/s
Iteration  23: 808365.704 ops/s
Iteration  24: 808004.634 ops/s
Iteration  25: 806603.615 ops/s
Iteration  26: 805821.437 ops/s
Iteration  27: 808948.084 ops/s
Iteration  28: 807125.102 ops/s
Iteration  29: 808952.762 ops/s
Iteration  30: 805728.609 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIf":
  806636.171 ±(99.9%) 962.871 ops/s [Average]
  (min, avg, max) = (802953.015, 806636.171, 808952.762), stdev = 1441.181
  CI (99.9%): [805673.300, 807599.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
SingletonListSubListTest._Benchmark.benchmark_removeIf  thrpt   30  806636.171 ± 962.871  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 483987.976 ops/s
# Warmup Iteration   2: 735307.705 ops/s
# Warmup Iteration   3: 817195.451 ops/s
# Warmup Iteration   4: 818302.823 ops/s
# Warmup Iteration   5: 808130.745 ops/s
# Warmup Iteration   6: 716095.318 ops/s
# Warmup Iteration   7: 792974.040 ops/s
# Warmup Iteration   8: 810382.959 ops/s
# Warmup Iteration   9: 809265.572 ops/s
# Warmup Iteration  10: 811025.682 ops/s
# Warmup Iteration  11: 813965.993 ops/s
# Warmup Iteration  12: 814081.899 ops/s
# Warmup Iteration  13: 812976.231 ops/s
# Warmup Iteration  14: 813709.270 ops/s
# Warmup Iteration  15: 813224.448 ops/s
# Warmup Iteration  16: 813231.274 ops/s
# Warmup Iteration  17: 848283.006 ops/s
# Warmup Iteration  18: 845290.954 ops/s
# Warmup Iteration  19: 848096.747 ops/s
# Warmup Iteration  20: 849843.961 ops/s
# Warmup Iteration  21: 851406.124 ops/s
# Warmup Iteration  22: 847770.206 ops/s
# Warmup Iteration  23: 847923.774 ops/s
# Warmup Iteration  24: 848379.408 ops/s
# Warmup Iteration  25: 848140.473 ops/s
# Warmup Iteration  26: 841432.519 ops/s
# Warmup Iteration  27: 846140.792 ops/s
# Warmup Iteration  28: 851709.972 ops/s
# Warmup Iteration  29: 850512.015 ops/s
# Warmup Iteration  30: 846901.412 ops/s
Iteration   1: 843407.776 ops/s
Iteration   2: 843011.066 ops/s
Iteration   3: 847502.857 ops/s
Iteration   4: 846327.547 ops/s
Iteration   5: 848418.071 ops/s
Iteration   6: 853254.302 ops/s
Iteration   7: 851353.414 ops/s
Iteration   8: 844541.319 ops/s
Iteration   9: 844742.224 ops/s
Iteration  10: 846662.525 ops/s
Iteration  11: 845467.699 ops/s
Iteration  12: 847811.608 ops/s
Iteration  13: 853040.300 ops/s
Iteration  14: 847501.979 ops/s
Iteration  15: 843323.256 ops/s
Iteration  16: 841498.196 ops/s
Iteration  17: 848077.039 ops/s
Iteration  18: 842882.791 ops/s
Iteration  19: 847233.474 ops/s
Iteration  20: 845157.028 ops/s
Iteration  21: 847937.037 ops/s
Iteration  22: 845492.801 ops/s
Iteration  23: 847496.146 ops/s
Iteration  24: 849925.952 ops/s
Iteration  25: 854639.412 ops/s
Iteration  26: 849341.069 ops/s
Iteration  27: 846357.737 ops/s
Iteration  28: 845291.750 ops/s
Iteration  29: 844909.210 ops/s
Iteration  30: 845340.012 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_removeIfWith":
  846931.520 ±(99.9%) 2120.273 ops/s [Average]
  (min, avg, max) = (841498.196, 846931.520, 854639.412), stdev = 3173.525
  CI (99.9%): [844811.247, 849051.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_removeIfWith  thrpt   30  846931.520 ± 2120.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494955.355 ops/s
# Warmup Iteration   2: 753161.799 ops/s
# Warmup Iteration   3: 838984.089 ops/s
# Warmup Iteration   4: 838591.447 ops/s
# Warmup Iteration   5: 835401.013 ops/s
# Warmup Iteration   6: 734134.266 ops/s
# Warmup Iteration   7: 817418.268 ops/s
# Warmup Iteration   8: 834827.796 ops/s
# Warmup Iteration   9: 835669.572 ops/s
# Warmup Iteration  10: 828007.736 ops/s
# Warmup Iteration  11: 828800.319 ops/s
# Warmup Iteration  12: 828599.285 ops/s
# Warmup Iteration  13: 831503.478 ops/s
# Warmup Iteration  14: 833893.416 ops/s
# Warmup Iteration  15: 827666.334 ops/s
# Warmup Iteration  16: 829804.090 ops/s
# Warmup Iteration  17: 876410.041 ops/s
# Warmup Iteration  18: 880494.509 ops/s
# Warmup Iteration  19: 882107.552 ops/s
# Warmup Iteration  20: 880328.430 ops/s
# Warmup Iteration  21: 881410.159 ops/s
# Warmup Iteration  22: 884107.176 ops/s
# Warmup Iteration  23: 880654.811 ops/s
# Warmup Iteration  24: 880144.209 ops/s
# Warmup Iteration  25: 880580.923 ops/s
# Warmup Iteration  26: 877831.456 ops/s
# Warmup Iteration  27: 884602.508 ops/s
# Warmup Iteration  28: 881006.711 ops/s
# Warmup Iteration  29: 878564.581 ops/s
# Warmup Iteration  30: 882178.910 ops/s
Iteration   1: 877757.107 ops/s
Iteration   2: 879368.754 ops/s
Iteration   3: 873905.208 ops/s
Iteration   4: 886703.834 ops/s
Iteration   5: 879526.766 ops/s
Iteration   6: 880812.045 ops/s
Iteration   7: 880913.857 ops/s
Iteration   8: 881082.558 ops/s
Iteration   9: 883241.211 ops/s
Iteration  10: 878487.284 ops/s
Iteration  11: 875813.354 ops/s
Iteration  12: 873384.660 ops/s
Iteration  13: 880534.503 ops/s
Iteration  14: 877410.588 ops/s
Iteration  15: 880903.101 ops/s
Iteration  16: 883222.105 ops/s
Iteration  17: 886205.948 ops/s
Iteration  18: 879133.037 ops/s
Iteration  19: 880605.229 ops/s
Iteration  20: 881409.901 ops/s
Iteration  21: 879004.122 ops/s
Iteration  22: 881759.612 ops/s
Iteration  23: 883999.401 ops/s
Iteration  24: 883508.411 ops/s
Iteration  25: 880368.258 ops/s
Iteration  26: 883401.971 ops/s
Iteration  27: 878146.446 ops/s
Iteration  28: 878549.659 ops/s
Iteration  29: 876123.400 ops/s
Iteration  30: 879904.682 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAll":
  880172.901 ±(99.9%) 2105.754 ops/s [Average]
  (min, avg, max) = (873384.660, 880172.901, 886703.834), stdev = 3151.794
  CI (99.9%): [878067.147, 882278.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_retainAll  thrpt   30  880172.901 ± 2105.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486525.856 ops/s
# Warmup Iteration   2: 734502.265 ops/s
# Warmup Iteration   3: 808244.209 ops/s
# Warmup Iteration   4: 816208.666 ops/s
# Warmup Iteration   5: 813972.524 ops/s
# Warmup Iteration   6: 734919.488 ops/s
# Warmup Iteration   7: 772883.352 ops/s
# Warmup Iteration   8: 813514.393 ops/s
# Warmup Iteration   9: 818639.707 ops/s
# Warmup Iteration  10: 816194.740 ops/s
# Warmup Iteration  11: 815949.199 ops/s
# Warmup Iteration  12: 812165.678 ops/s
# Warmup Iteration  13: 816857.771 ops/s
# Warmup Iteration  14: 816430.599 ops/s
# Warmup Iteration  15: 814337.903 ops/s
# Warmup Iteration  16: 811176.602 ops/s
# Warmup Iteration  17: 851041.068 ops/s
# Warmup Iteration  18: 854137.750 ops/s
# Warmup Iteration  19: 855775.188 ops/s
# Warmup Iteration  20: 858874.599 ops/s
# Warmup Iteration  21: 850885.021 ops/s
# Warmup Iteration  22: 849750.115 ops/s
# Warmup Iteration  23: 855835.447 ops/s
# Warmup Iteration  24: 855178.900 ops/s
# Warmup Iteration  25: 850820.357 ops/s
# Warmup Iteration  26: 852767.498 ops/s
# Warmup Iteration  27: 850575.977 ops/s
# Warmup Iteration  28: 852856.363 ops/s
# Warmup Iteration  29: 852486.715 ops/s
# Warmup Iteration  30: 856684.209 ops/s
Iteration   1: 856963.725 ops/s
Iteration   2: 850753.634 ops/s
Iteration   3: 850836.357 ops/s
Iteration   4: 846017.478 ops/s
Iteration   5: 854359.119 ops/s
Iteration   6: 851827.131 ops/s
Iteration   7: 848748.827 ops/s
Iteration   8: 855544.181 ops/s
Iteration   9: 854539.077 ops/s
Iteration  10: 854209.066 ops/s
Iteration  11: 855378.237 ops/s
Iteration  12: 854905.517 ops/s
Iteration  13: 854928.251 ops/s
Iteration  14: 853531.953 ops/s
Iteration  15: 853079.632 ops/s
Iteration  16: 856856.773 ops/s
Iteration  17: 852508.588 ops/s
Iteration  18: 858013.603 ops/s
Iteration  19: 856279.869 ops/s
Iteration  20: 852697.438 ops/s
Iteration  21: 850704.302 ops/s
Iteration  22: 851803.212 ops/s
Iteration  23: 847202.123 ops/s
Iteration  24: 850528.389 ops/s
Iteration  25: 848929.117 ops/s
Iteration  26: 858175.826 ops/s
Iteration  27: 857973.706 ops/s
Iteration  28: 860100.094 ops/s
Iteration  29: 859923.640 ops/s
Iteration  30: 851434.723 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_retainAllIterable":
  853625.120 ±(99.9%) 2398.637 ops/s [Average]
  (min, avg, max) = (846017.478, 853625.120, 860100.094), stdev = 3590.167
  CI (99.9%): [851226.483, 856023.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_retainAllIterable  thrpt   30  853625.120 ± 2398.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6623798.251 ops/s
# Warmup Iteration   2: 25389728.064 ops/s
# Warmup Iteration   3: 21843578.589 ops/s
# Warmup Iteration   4: 25679890.681 ops/s
# Warmup Iteration   5: 25701889.065 ops/s
# Warmup Iteration   6: 25742688.875 ops/s
# Warmup Iteration   7: 25555909.660 ops/s
# Warmup Iteration   8: 25659995.395 ops/s
# Warmup Iteration   9: 25630819.276 ops/s
# Warmup Iteration  10: 25670569.561 ops/s
# Warmup Iteration  11: 25640681.877 ops/s
# Warmup Iteration  12: 25619602.401 ops/s
# Warmup Iteration  13: 25826608.330 ops/s
# Warmup Iteration  14: 25758362.974 ops/s
# Warmup Iteration  15: 25633948.013 ops/s
# Warmup Iteration  16: 25638782.347 ops/s
# Warmup Iteration  17: 25448348.822 ops/s
# Warmup Iteration  18: 25465063.255 ops/s
# Warmup Iteration  19: 25494547.460 ops/s
# Warmup Iteration  20: 25410136.519 ops/s
# Warmup Iteration  21: 25519639.468 ops/s
# Warmup Iteration  22: 25458657.653 ops/s
# Warmup Iteration  23: 25537460.833 ops/s
# Warmup Iteration  24: 25490158.168 ops/s
# Warmup Iteration  25: 25560600.747 ops/s
# Warmup Iteration  26: 25536872.703 ops/s
# Warmup Iteration  27: 25491267.124 ops/s
# Warmup Iteration  28: 25399318.302 ops/s
# Warmup Iteration  29: 25303460.668 ops/s
# Warmup Iteration  30: 25447532.287 ops/s
Iteration   1: 25424881.467 ops/s
Iteration   2: 25498024.807 ops/s
Iteration   3: 25484600.612 ops/s
Iteration   4: 25535325.049 ops/s
Iteration   5: 25563609.612 ops/s
Iteration   6: 25544746.742 ops/s
Iteration   7: 25519913.400 ops/s
Iteration   8: 25550388.628 ops/s
Iteration   9: 25318757.653 ops/s
Iteration  10: 25421161.404 ops/s
Iteration  11: 25540663.470 ops/s
Iteration  12: 25506359.051 ops/s
Iteration  13: 25504157.794 ops/s
Iteration  14: 25456841.540 ops/s
Iteration  15: 25535672.661 ops/s
Iteration  16: 25498920.711 ops/s
Iteration  17: 25426168.623 ops/s
Iteration  18: 25366263.625 ops/s
Iteration  19: 25563236.726 ops/s
Iteration  20: 25332907.851 ops/s
Iteration  21: 25512946.227 ops/s
Iteration  22: 25559069.990 ops/s
Iteration  23: 25438364.711 ops/s
Iteration  24: 25536867.577 ops/s
Iteration  25: 25414342.526 ops/s
Iteration  26: 25451065.731 ops/s
Iteration  27: 25448213.812 ops/s
Iteration  28: 25409778.077 ops/s
Iteration  29: 25364885.419 ops/s
Iteration  30: 25443722.910 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_select":
  25472395.280 ±(99.9%) 46950.829 ops/s [Average]
  (min, avg, max) = (25318757.653, 25472395.280, 25563609.612), stdev = 70273.797
  CI (99.9%): [25425444.451, 25519346.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_select  thrpt   30  25472395.280 ± 46950.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7794563.645 ops/s
# Warmup Iteration   2: 16699133.349 ops/s
# Warmup Iteration   3: 14381434.781 ops/s
# Warmup Iteration   4: 16808881.341 ops/s
# Warmup Iteration   5: 16814856.501 ops/s
# Warmup Iteration   6: 16835482.602 ops/s
# Warmup Iteration   7: 16912550.923 ops/s
# Warmup Iteration   8: 16827806.138 ops/s
# Warmup Iteration   9: 16844551.227 ops/s
# Warmup Iteration  10: 16746905.925 ops/s
# Warmup Iteration  11: 16677012.004 ops/s
# Warmup Iteration  12: 16768045.049 ops/s
# Warmup Iteration  13: 16871692.466 ops/s
# Warmup Iteration  14: 16829791.772 ops/s
# Warmup Iteration  15: 16821610.097 ops/s
# Warmup Iteration  16: 16822832.686 ops/s
# Warmup Iteration  17: 16835943.978 ops/s
# Warmup Iteration  18: 16834727.300 ops/s
# Warmup Iteration  19: 16794853.796 ops/s
# Warmup Iteration  20: 16792661.851 ops/s
# Warmup Iteration  21: 16829525.996 ops/s
# Warmup Iteration  22: 16843724.174 ops/s
# Warmup Iteration  23: 16756422.371 ops/s
# Warmup Iteration  24: 16786007.906 ops/s
# Warmup Iteration  25: 16823085.516 ops/s
# Warmup Iteration  26: 16835353.377 ops/s
# Warmup Iteration  27: 16763374.336 ops/s
# Warmup Iteration  28: 16769968.805 ops/s
# Warmup Iteration  29: 16842198.474 ops/s
# Warmup Iteration  30: 16853370.280 ops/s
Iteration   1: 16920851.936 ops/s
Iteration   2: 16728265.330 ops/s
Iteration   3: 16815801.898 ops/s
Iteration   4: 16834169.134 ops/s
Iteration   5: 16866711.012 ops/s
Iteration   6: 16855167.532 ops/s
Iteration   7: 16881723.060 ops/s
Iteration   8: 16861863.839 ops/s
Iteration   9: 16882320.239 ops/s
Iteration  10: 16779559.716 ops/s
Iteration  11: 16811931.670 ops/s
Iteration  12: 16842913.788 ops/s
Iteration  13: 16788790.469 ops/s
Iteration  14: 16850480.865 ops/s
Iteration  15: 16810863.804 ops/s
Iteration  16: 16822030.927 ops/s
Iteration  17: 16911435.436 ops/s
Iteration  18: 16787682.101 ops/s
Iteration  19: 16780913.625 ops/s
Iteration  20: 16862999.525 ops/s
Iteration  21: 16817626.714 ops/s
Iteration  22: 16766818.010 ops/s
Iteration  23: 16941735.050 ops/s
Iteration  24: 16914825.605 ops/s
Iteration  25: 16850861.633 ops/s
Iteration  26: 16812928.469 ops/s
Iteration  27: 16793203.941 ops/s
Iteration  28: 16878709.321 ops/s
Iteration  29: 16749186.494 ops/s
Iteration  30: 16856373.192 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_selectWith":
  16835958.144 ±(99.9%) 34910.183 ops/s [Average]
  (min, avg, max) = (16728265.330, 16835958.144, 16941735.050), stdev = 52251.922
  CI (99.9%): [16801047.962, 16870868.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_selectWith  thrpt   30  16835958.144 ± 34910.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645865.278 ops/s
# Warmup Iteration   2: 701808.338 ops/s
# Warmup Iteration   3: 943960.923 ops/s
# Warmup Iteration   4: 943768.025 ops/s
# Warmup Iteration   5: 943353.727 ops/s
# Warmup Iteration   6: 943897.661 ops/s
# Warmup Iteration   7: 942613.540 ops/s
# Warmup Iteration   8: 947198.510 ops/s
# Warmup Iteration   9: 944908.297 ops/s
# Warmup Iteration  10: 947331.608 ops/s
# Warmup Iteration  11: 789719.751 ops/s
# Warmup Iteration  12: 945293.720 ops/s
# Warmup Iteration  13: 944263.079 ops/s
# Warmup Iteration  14: 941765.967 ops/s
# Warmup Iteration  15: 944892.321 ops/s
# Warmup Iteration  16: 944955.649 ops/s
# Warmup Iteration  17: 1000180.180 ops/s
# Warmup Iteration  18: 1003045.541 ops/s
# Warmup Iteration  19: 999758.604 ops/s
# Warmup Iteration  20: 1001542.918 ops/s
# Warmup Iteration  21: 1000408.814 ops/s
# Warmup Iteration  22: 999025.456 ops/s
# Warmup Iteration  23: 1001253.381 ops/s
# Warmup Iteration  24: 999577.704 ops/s
# Warmup Iteration  25: 1001634.899 ops/s
# Warmup Iteration  26: 999699.224 ops/s
# Warmup Iteration  27: 1004084.069 ops/s
# Warmup Iteration  28: 1001757.636 ops/s
# Warmup Iteration  29: 999791.159 ops/s
# Warmup Iteration  30: 1001425.795 ops/s
Iteration   1: 1002439.492 ops/s
Iteration   2: 996609.842 ops/s
Iteration   3: 1002478.096 ops/s
Iteration   4: 1004571.153 ops/s
Iteration   5: 999040.225 ops/s
Iteration   6: 1000801.299 ops/s
Iteration   7: 1000707.490 ops/s
Iteration   8: 1000718.196 ops/s
Iteration   9: 998582.168 ops/s
Iteration  10: 1003646.490 ops/s
Iteration  11: 1001951.415 ops/s
Iteration  12: 1001114.905 ops/s
Iteration  13: 1001266.123 ops/s
Iteration  14: 1001007.334 ops/s
Iteration  15: 1000328.168 ops/s
Iteration  16: 997579.949 ops/s
Iteration  17: 1002081.016 ops/s
Iteration  18: 1001913.771 ops/s
Iteration  19: 999892.853 ops/s
Iteration  20: 1000386.014 ops/s
Iteration  21: 997933.522 ops/s
Iteration  22: 999232.245 ops/s
Iteration  23: 995335.940 ops/s
Iteration  24: 998265.732 ops/s
Iteration  25: 998215.954 ops/s
Iteration  26: 995749.739 ops/s
Iteration  27: 996891.797 ops/s
Iteration  28: 1000301.494 ops/s
Iteration  29: 998245.631 ops/s
Iteration  30: 996875.026 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_subList":
  999805.436 ±(99.9%) 1551.970 ops/s [Average]
  (min, avg, max) = (995335.940, 999805.436, 1004571.153), stdev = 2322.915
  CI (99.9%): [998253.466, 1001357.406] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_subList  thrpt   30  999805.436 ± 1551.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10082373.083 ops/s
# Warmup Iteration   2: 21191495.181 ops/s
# Warmup Iteration   3: 18336352.732 ops/s
# Warmup Iteration   4: 21478516.265 ops/s
# Warmup Iteration   5: 21566845.201 ops/s
# Warmup Iteration   6: 21491214.271 ops/s
# Warmup Iteration   7: 21443842.295 ops/s
# Warmup Iteration   8: 21464610.162 ops/s
# Warmup Iteration   9: 21460896.888 ops/s
# Warmup Iteration  10: 21575735.408 ops/s
# Warmup Iteration  11: 21568871.910 ops/s
# Warmup Iteration  12: 21476366.925 ops/s
# Warmup Iteration  13: 21524130.822 ops/s
# Warmup Iteration  14: 21545699.539 ops/s
# Warmup Iteration  15: 21493945.802 ops/s
# Warmup Iteration  16: 21495279.344 ops/s
# Warmup Iteration  17: 21473012.124 ops/s
# Warmup Iteration  18: 21523111.709 ops/s
# Warmup Iteration  19: 21441883.814 ops/s
# Warmup Iteration  20: 21542653.524 ops/s
# Warmup Iteration  21: 21518006.281 ops/s
# Warmup Iteration  22: 21526877.219 ops/s
# Warmup Iteration  23: 21457294.462 ops/s
# Warmup Iteration  24: 21487071.506 ops/s
# Warmup Iteration  25: 21463106.619 ops/s
# Warmup Iteration  26: 21558630.735 ops/s
# Warmup Iteration  27: 21468662.019 ops/s
# Warmup Iteration  28: 21523603.341 ops/s
# Warmup Iteration  29: 21508014.687 ops/s
# Warmup Iteration  30: 21446968.965 ops/s
Iteration   1: 21337024.095 ops/s
Iteration   2: 21490582.930 ops/s
Iteration   3: 21553970.961 ops/s
Iteration   4: 21291418.575 ops/s
Iteration   5: 21336314.374 ops/s
Iteration   6: 21249115.389 ops/s
Iteration   7: 21451495.614 ops/s
Iteration   8: 21421743.362 ops/s
Iteration   9: 21545806.155 ops/s
Iteration  10: 21450468.454 ops/s
Iteration  11: 21478963.734 ops/s
Iteration  12: 21473471.959 ops/s
Iteration  13: 21349245.681 ops/s
Iteration  14: 21548596.127 ops/s
Iteration  15: 21402725.087 ops/s
Iteration  16: 21506538.908 ops/s
Iteration  17: 21532673.347 ops/s
Iteration  18: 21627737.899 ops/s
Iteration  19: 21415952.525 ops/s
Iteration  20: 21410036.024 ops/s
Iteration  21: 21497645.017 ops/s
Iteration  22: 21512506.026 ops/s
Iteration  23: 21623877.554 ops/s
Iteration  24: 21475442.972 ops/s
Iteration  25: 21520925.474 ops/s
Iteration  26: 21457272.963 ops/s
Iteration  27: 21384283.503 ops/s
Iteration  28: 21410141.675 ops/s
Iteration  29: 21458682.695 ops/s
Iteration  30: 21548960.325 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_tap":
  21458787.313 ±(99.9%) 60411.572 ops/s [Average]
  (min, avg, max) = (21249115.389, 21458787.313, 21627737.899), stdev = 90421.204
  CI (99.9%): [21398375.741, 21519198.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_tap  thrpt   30  21458787.313 ± 60411.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4613104.375 ops/s
# Warmup Iteration   2: 10142434.152 ops/s
# Warmup Iteration   3: 8538972.751 ops/s
# Warmup Iteration   4: 10095813.216 ops/s
# Warmup Iteration   5: 10059067.684 ops/s
# Warmup Iteration   6: 10073164.027 ops/s
# Warmup Iteration   7: 10072544.639 ops/s
# Warmup Iteration   8: 10064057.434 ops/s
# Warmup Iteration   9: 10096490.283 ops/s
# Warmup Iteration  10: 10081618.298 ops/s
# Warmup Iteration  11: 10074745.797 ops/s
# Warmup Iteration  12: 10068364.422 ops/s
# Warmup Iteration  13: 10080905.825 ops/s
# Warmup Iteration  14: 10037759.647 ops/s
# Warmup Iteration  15: 10095875.321 ops/s
# Warmup Iteration  16: 10066449.529 ops/s
# Warmup Iteration  17: 10106168.819 ops/s
# Warmup Iteration  18: 10097739.058 ops/s
# Warmup Iteration  19: 10116808.223 ops/s
# Warmup Iteration  20: 10107062.102 ops/s
# Warmup Iteration  21: 10111134.906 ops/s
# Warmup Iteration  22: 10103850.702 ops/s
# Warmup Iteration  23: 10111334.416 ops/s
# Warmup Iteration  24: 10143500.621 ops/s
# Warmup Iteration  25: 10118799.993 ops/s
# Warmup Iteration  26: 10122213.576 ops/s
# Warmup Iteration  27: 10128989.986 ops/s
# Warmup Iteration  28: 10109630.712 ops/s
# Warmup Iteration  29: 10125550.659 ops/s
# Warmup Iteration  30: 10115436.081 ops/s
Iteration   1: 10124134.047 ops/s
Iteration   2: 10152778.728 ops/s
Iteration   3: 10155374.673 ops/s
Iteration   4: 10080244.750 ops/s
Iteration   5: 10139969.553 ops/s
Iteration   6: 10127889.649 ops/s
Iteration   7: 10122612.314 ops/s
Iteration   8: 10137544.596 ops/s
Iteration   9: 10140272.800 ops/s
Iteration  10: 10145783.274 ops/s
Iteration  11: 10108842.164 ops/s
Iteration  12: 10122952.485 ops/s
Iteration  13: 10130722.529 ops/s
Iteration  14: 10135205.026 ops/s
Iteration  15: 10101051.959 ops/s
Iteration  16: 10113770.434 ops/s
Iteration  17: 10132686.904 ops/s
Iteration  18: 10118041.083 ops/s
Iteration  19: 10129789.505 ops/s
Iteration  20: 10119161.676 ops/s
Iteration  21: 10127135.527 ops/s
Iteration  22: 10091448.840 ops/s
Iteration  23: 9706059.978 ops/s
Iteration  24: 10148449.127 ops/s
Iteration  25: 10132727.956 ops/s
Iteration  26: 10112474.118 ops/s
Iteration  27: 10124336.633 ops/s
Iteration  28: 10143022.986 ops/s
Iteration  29: 10086045.305 ops/s
Iteration  30: 10107882.455 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testAppendString":
  10110613.702 ±(99.9%) 52542.754 ops/s [Average]
  (min, avg, max) = (9706059.978, 10110613.702, 10155374.673), stdev = 78643.526
  CI (99.9%): [10058070.949, 10163156.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_testAppendString  thrpt   30  10110613.702 ± 52542.754  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4727812.336 ops/s
# Warmup Iteration   2: 10341444.158 ops/s
# Warmup Iteration   3: 8436013.184 ops/s
# Warmup Iteration   4: 10018440.126 ops/s
# Warmup Iteration   5: 10024169.368 ops/s
# Warmup Iteration   6: 10030599.176 ops/s
# Warmup Iteration   7: 10010981.383 ops/s
# Warmup Iteration   8: 10020738.413 ops/s
# Warmup Iteration   9: 10009227.264 ops/s
# Warmup Iteration  10: 10024422.455 ops/s
# Warmup Iteration  11: 10025578.991 ops/s
# Warmup Iteration  12: 10050305.399 ops/s
# Warmup Iteration  13: 10016123.257 ops/s
# Warmup Iteration  14: 10006804.880 ops/s
# Warmup Iteration  15: 10000357.048 ops/s
# Warmup Iteration  16: 10025932.136 ops/s
# Warmup Iteration  17: 10008992.074 ops/s
# Warmup Iteration  18: 10009493.989 ops/s
# Warmup Iteration  19: 9999502.539 ops/s
# Warmup Iteration  20: 10013254.077 ops/s
# Warmup Iteration  21: 10032881.729 ops/s
# Warmup Iteration  22: 10000097.149 ops/s
# Warmup Iteration  23: 10014684.657 ops/s
# Warmup Iteration  24: 10037126.884 ops/s
# Warmup Iteration  25: 10021460.747 ops/s
# Warmup Iteration  26: 10008465.141 ops/s
# Warmup Iteration  27: 10014060.401 ops/s
# Warmup Iteration  28: 10011203.120 ops/s
# Warmup Iteration  29: 10010642.508 ops/s
# Warmup Iteration  30: 10021508.210 ops/s
Iteration   1: 10062779.061 ops/s
Iteration   2: 10001751.783 ops/s
Iteration   3: 10013484.877 ops/s
Iteration   4: 10012314.792 ops/s
Iteration   5: 9993943.841 ops/s
Iteration   6: 9960888.502 ops/s
Iteration   7: 10014438.760 ops/s
Iteration   8: 10029994.851 ops/s
Iteration   9: 9984662.190 ops/s
Iteration  10: 9992760.095 ops/s
Iteration  11: 9995771.886 ops/s
Iteration  12: 10001425.870 ops/s
Iteration  13: 10039551.771 ops/s
Iteration  14: 9974812.520 ops/s
Iteration  15: 10045909.803 ops/s
Iteration  16: 10020139.357 ops/s
Iteration  17: 10034723.551 ops/s
Iteration  18: 10046316.923 ops/s
Iteration  19: 9996819.753 ops/s
Iteration  20: 10020922.089 ops/s
Iteration  21: 9985488.912 ops/s
Iteration  22: 10084011.056 ops/s
Iteration  23: 10019283.782 ops/s
Iteration  24: 10011153.624 ops/s
Iteration  25: 10013163.678 ops/s
Iteration  26: 9968236.700 ops/s
Iteration  27: 9984859.213 ops/s
Iteration  28: 10004811.551 ops/s
Iteration  29: 10057634.680 ops/s
Iteration  30: 10001395.756 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_testMakeString":
  10012448.374 ±(99.9%) 19077.424 ops/s [Average]
  (min, avg, max) = (9960888.502, 10012448.374, 10084011.056), stdev = 28554.192
  CI (99.9%): [9993370.950, 10031525.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
SingletonListSubListTest._Benchmark.benchmark_testMakeString  thrpt   30  10012448.374 ± 19077.424  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 507457.283 ops/s
# Warmup Iteration   2: 709204.673 ops/s
# Warmup Iteration   3: 824609.083 ops/s
# Warmup Iteration   4: 821068.011 ops/s
# Warmup Iteration   5: 829436.621 ops/s
# Warmup Iteration   6: 826294.718 ops/s
# Warmup Iteration   7: 700566.367 ops/s
# Warmup Iteration   8: 828297.838 ops/s
# Warmup Iteration   9: 831697.957 ops/s
# Warmup Iteration  10: 830228.458 ops/s
# Warmup Iteration  11: 829783.088 ops/s
# Warmup Iteration  12: 827277.976 ops/s
# Warmup Iteration  13: 826138.424 ops/s
# Warmup Iteration  14: 826882.230 ops/s
# Warmup Iteration  15: 828638.989 ops/s
# Warmup Iteration  16: 826468.557 ops/s
# Warmup Iteration  17: 867519.877 ops/s
# Warmup Iteration  18: 872556.567 ops/s
# Warmup Iteration  19: 865966.930 ops/s
# Warmup Iteration  20: 869700.346 ops/s
# Warmup Iteration  21: 867490.612 ops/s
# Warmup Iteration  22: 867990.401 ops/s
# Warmup Iteration  23: 864471.993 ops/s
# Warmup Iteration  24: 866452.944 ops/s
# Warmup Iteration  25: 872371.721 ops/s
# Warmup Iteration  26: 870391.163 ops/s
# Warmup Iteration  27: 869167.630 ops/s
# Warmup Iteration  28: 862079.412 ops/s
# Warmup Iteration  29: 869407.376 ops/s
# Warmup Iteration  30: 869353.484 ops/s
Iteration   1: 868227.254 ops/s
Iteration   2: 871560.705 ops/s
Iteration   3: 870729.624 ops/s
Iteration   4: 873131.358 ops/s
Iteration   5: 870887.183 ops/s
Iteration   6: 871523.986 ops/s
Iteration   7: 874099.634 ops/s
Iteration   8: 871985.296 ops/s
Iteration   9: 872073.803 ops/s
Iteration  10: 874063.174 ops/s
Iteration  11: 876221.842 ops/s
Iteration  12: 869507.717 ops/s
Iteration  13: 869839.383 ops/s
Iteration  14: 864300.976 ops/s
Iteration  15: 865293.476 ops/s
Iteration  16: 866078.583 ops/s
Iteration  17: 868274.553 ops/s
Iteration  18: 868048.660 ops/s
Iteration  19: 867698.360 ops/s
Iteration  20: 868407.800 ops/s
Iteration  21: 867178.694 ops/s
Iteration  22: 869584.376 ops/s
Iteration  23: 869286.778 ops/s
Iteration  24: 870931.335 ops/s
Iteration  25: 868251.327 ops/s
Iteration  26: 870773.961 ops/s
Iteration  27: 866807.375 ops/s
Iteration  28: 870220.511 ops/s
Iteration  29: 871181.271 ops/s
Iteration  30: 867360.922 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_with":
  869784.331 ±(99.9%) 1817.297 ops/s [Average]
  (min, avg, max) = (864300.976, 869784.331, 876221.842), stdev = 2720.045
  CI (99.9%): [867967.034, 871601.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_with  thrpt   30  869784.331 ± 1817.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 472241.970 ops/s
# Warmup Iteration   2: 711851.999 ops/s
# Warmup Iteration   3: 797609.625 ops/s
# Warmup Iteration   4: 802020.032 ops/s
# Warmup Iteration   5: 802458.843 ops/s
# Warmup Iteration   6: 752142.634 ops/s
# Warmup Iteration   7: 731856.325 ops/s
# Warmup Iteration   8: 798865.391 ops/s
# Warmup Iteration   9: 799106.311 ops/s
# Warmup Iteration  10: 799578.152 ops/s
# Warmup Iteration  11: 803093.098 ops/s
# Warmup Iteration  12: 802645.085 ops/s
# Warmup Iteration  13: 798803.950 ops/s
# Warmup Iteration  14: 799758.568 ops/s
# Warmup Iteration  15: 799706.058 ops/s
# Warmup Iteration  16: 799715.937 ops/s
# Warmup Iteration  17: 838066.682 ops/s
# Warmup Iteration  18: 835817.056 ops/s
# Warmup Iteration  19: 837908.850 ops/s
# Warmup Iteration  20: 838571.133 ops/s
# Warmup Iteration  21: 839673.110 ops/s
# Warmup Iteration  22: 834427.913 ops/s
# Warmup Iteration  23: 831494.445 ops/s
# Warmup Iteration  24: 830445.114 ops/s
# Warmup Iteration  25: 832954.396 ops/s
# Warmup Iteration  26: 834946.055 ops/s
# Warmup Iteration  27: 834813.260 ops/s
# Warmup Iteration  28: 838363.626 ops/s
# Warmup Iteration  29: 837121.924 ops/s
# Warmup Iteration  30: 839384.100 ops/s
Iteration   1: 832387.744 ops/s
Iteration   2: 841450.940 ops/s
Iteration   3: 840062.454 ops/s
Iteration   4: 843609.705 ops/s
Iteration   5: 841280.885 ops/s
Iteration   6: 841725.137 ops/s
Iteration   7: 838524.645 ops/s
Iteration   8: 837318.488 ops/s
Iteration   9: 836959.373 ops/s
Iteration  10: 836762.602 ops/s
Iteration  11: 839381.161 ops/s
Iteration  12: 838168.884 ops/s
Iteration  13: 835939.656 ops/s
Iteration  14: 835070.156 ops/s
Iteration  15: 835680.252 ops/s
Iteration  16: 836965.256 ops/s
Iteration  17: 839254.288 ops/s
Iteration  18: 835452.587 ops/s
Iteration  19: 839528.595 ops/s
Iteration  20: 839416.285 ops/s
Iteration  21: 839579.006 ops/s
Iteration  22: 838055.966 ops/s
Iteration  23: 841206.332 ops/s
Iteration  24: 834716.714 ops/s
Iteration  25: 836425.478 ops/s
Iteration  26: 839057.775 ops/s
Iteration  27: 845318.020 ops/s
Iteration  28: 838372.188 ops/s
Iteration  29: 839502.331 ops/s
Iteration  30: 839281.999 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withAll":
  838548.497 ±(99.9%) 1825.355 ops/s [Average]
  (min, avg, max) = (832387.744, 838548.497, 845318.020), stdev = 2732.105
  CI (99.9%): [836723.142, 840373.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_withAll  thrpt   30  838548.497 ± 1825.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471121.316 ops/s
# Warmup Iteration   2: 690502.044 ops/s
# Warmup Iteration   3: 768558.088 ops/s
# Warmup Iteration   4: 768622.938 ops/s
# Warmup Iteration   5: 769723.005 ops/s
# Warmup Iteration   6: 756169.385 ops/s
# Warmup Iteration   7: 678110.401 ops/s
# Warmup Iteration   8: 768430.225 ops/s
# Warmup Iteration   9: 766380.027 ops/s
# Warmup Iteration  10: 769656.548 ops/s
# Warmup Iteration  11: 769611.189 ops/s
# Warmup Iteration  12: 768929.928 ops/s
# Warmup Iteration  13: 768712.704 ops/s
# Warmup Iteration  14: 773068.799 ops/s
# Warmup Iteration  15: 770306.765 ops/s
# Warmup Iteration  16: 774260.360 ops/s
# Warmup Iteration  17: 803884.700 ops/s
# Warmup Iteration  18: 805004.711 ops/s
# Warmup Iteration  19: 807048.254 ops/s
# Warmup Iteration  20: 810199.623 ops/s
# Warmup Iteration  21: 804286.507 ops/s
# Warmup Iteration  22: 805288.147 ops/s
# Warmup Iteration  23: 803143.762 ops/s
# Warmup Iteration  24: 804537.600 ops/s
# Warmup Iteration  25: 806505.586 ops/s
# Warmup Iteration  26: 807637.904 ops/s
# Warmup Iteration  27: 806822.967 ops/s
# Warmup Iteration  28: 798824.381 ops/s
# Warmup Iteration  29: 802498.960 ops/s
# Warmup Iteration  30: 803717.904 ops/s
Iteration   1: 802727.524 ops/s
Iteration   2: 800835.544 ops/s
Iteration   3: 806079.482 ops/s
Iteration   4: 807364.940 ops/s
Iteration   5: 811017.390 ops/s
Iteration   6: 808249.752 ops/s
Iteration   7: 801908.601 ops/s
Iteration   8: 803611.847 ops/s
Iteration   9: 805460.469 ops/s
Iteration  10: 803213.662 ops/s
Iteration  11: 803918.640 ops/s
Iteration  12: 809251.951 ops/s
Iteration  13: 808494.753 ops/s
Iteration  14: 804608.415 ops/s
Iteration  15: 798497.923 ops/s
Iteration  16: 801414.851 ops/s
Iteration  17: 799223.433 ops/s
Iteration  18: 799352.257 ops/s
Iteration  19: 802531.419 ops/s
Iteration  20: 807574.600 ops/s
Iteration  21: 812061.830 ops/s
Iteration  22: 804526.114 ops/s
Iteration  23: 803066.592 ops/s
Iteration  24: 804564.919 ops/s
Iteration  25: 804989.108 ops/s
Iteration  26: 804235.803 ops/s
Iteration  27: 804965.615 ops/s
Iteration  28: 803040.860 ops/s
Iteration  29: 806203.705 ops/s
Iteration  30: 804605.126 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_without":
  804586.571 ±(99.9%) 2186.431 ops/s [Average]
  (min, avg, max) = (798497.923, 804586.571, 812061.830), stdev = 3272.547
  CI (99.9%): [802400.140, 806773.001] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_without  thrpt   30  804586.571 ± 2186.431  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476330.883 ops/s
# Warmup Iteration   2: 721894.543 ops/s
# Warmup Iteration   3: 794288.988 ops/s
# Warmup Iteration   4: 795574.280 ops/s
# Warmup Iteration   5: 795740.948 ops/s
# Warmup Iteration   6: 732280.687 ops/s
# Warmup Iteration   7: 750121.483 ops/s
# Warmup Iteration   8: 797261.401 ops/s
# Warmup Iteration   9: 796364.808 ops/s
# Warmup Iteration  10: 800883.419 ops/s
# Warmup Iteration  11: 794743.716 ops/s
# Warmup Iteration  12: 796694.855 ops/s
# Warmup Iteration  13: 792758.668 ops/s
# Warmup Iteration  14: 791722.123 ops/s
# Warmup Iteration  15: 791838.166 ops/s
# Warmup Iteration  16: 791125.110 ops/s
# Warmup Iteration  17: 835139.044 ops/s
# Warmup Iteration  18: 833299.217 ops/s
# Warmup Iteration  19: 841254.710 ops/s
# Warmup Iteration  20: 838266.239 ops/s
# Warmup Iteration  21: 837645.378 ops/s
# Warmup Iteration  22: 837238.934 ops/s
# Warmup Iteration  23: 840594.646 ops/s
# Warmup Iteration  24: 837508.094 ops/s
# Warmup Iteration  25: 834804.714 ops/s
# Warmup Iteration  26: 834724.241 ops/s
# Warmup Iteration  27: 836779.031 ops/s
# Warmup Iteration  28: 837299.169 ops/s
# Warmup Iteration  29: 839185.225 ops/s
# Warmup Iteration  30: 839861.489 ops/s
Iteration   1: 840152.443 ops/s
Iteration   2: 833753.044 ops/s
Iteration   3: 834817.711 ops/s
Iteration   4: 833549.072 ops/s
Iteration   5: 832980.749 ops/s
Iteration   6: 837041.650 ops/s
Iteration   7: 840936.439 ops/s
Iteration   8: 832304.615 ops/s
Iteration   9: 835321.781 ops/s
Iteration  10: 834329.137 ops/s
Iteration  11: 838538.103 ops/s
Iteration  12: 836545.334 ops/s
Iteration  13: 838125.923 ops/s
Iteration  14: 840686.615 ops/s
Iteration  15: 841913.731 ops/s
Iteration  16: 832860.784 ops/s
Iteration  17: 836799.669 ops/s
Iteration  18: 842875.280 ops/s
Iteration  19: 840900.323 ops/s
Iteration  20: 833771.141 ops/s
Iteration  21: 834949.646 ops/s
Iteration  22: 839557.182 ops/s
Iteration  23: 836964.438 ops/s
Iteration  24: 837466.863 ops/s
Iteration  25: 837224.577 ops/s
Iteration  26: 841423.843 ops/s
Iteration  27: 837985.209 ops/s
Iteration  28: 830367.054 ops/s
Iteration  29: 831297.916 ops/s
Iteration  30: 832248.390 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_withoutAll":
  836589.622 ±(99.9%) 2305.400 ops/s [Average]
  (min, avg, max) = (830367.054, 836589.622, 842875.280), stdev = 3450.614
  CI (99.9%): [834284.222, 838895.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_withoutAll  thrpt   30  836589.622 ± 2305.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432263.972 ops/s
# Warmup Iteration   2: 555566.159 ops/s
# Warmup Iteration   3: 759401.477 ops/s
# Warmup Iteration   4: 755061.330 ops/s
# Warmup Iteration   5: 760507.264 ops/s
# Warmup Iteration   6: 756889.118 ops/s
# Warmup Iteration   7: 752621.137 ops/s
# Warmup Iteration   8: 757007.945 ops/s
# Warmup Iteration   9: 620867.104 ops/s
# Warmup Iteration  10: 759951.128 ops/s
# Warmup Iteration  11: 758733.749 ops/s
# Warmup Iteration  12: 759549.441 ops/s
# Warmup Iteration  13: 759457.265 ops/s
# Warmup Iteration  14: 760781.197 ops/s
# Warmup Iteration  15: 757537.405 ops/s
# Warmup Iteration  16: 758791.839 ops/s
# Warmup Iteration  17: 759860.264 ops/s
# Warmup Iteration  18: 760041.726 ops/s
# Warmup Iteration  19: 761756.160 ops/s
# Warmup Iteration  20: 760281.133 ops/s
# Warmup Iteration  21: 760501.711 ops/s
# Warmup Iteration  22: 760951.732 ops/s
# Warmup Iteration  23: 760093.844 ops/s
# Warmup Iteration  24: 759540.182 ops/s
# Warmup Iteration  25: 760551.300 ops/s
# Warmup Iteration  26: 761461.307 ops/s
# Warmup Iteration  27: 760492.194 ops/s
# Warmup Iteration  28: 761333.948 ops/s
# Warmup Iteration  29: 761443.718 ops/s
# Warmup Iteration  30: 757424.183 ops/s
Iteration   1: 757714.477 ops/s
Iteration   2: 757032.084 ops/s
Iteration   3: 758780.786 ops/s
Iteration   4: 760811.431 ops/s
Iteration   5: 759573.105 ops/s
Iteration   6: 760494.507 ops/s
Iteration   7: 761485.879 ops/s
Iteration   8: 760041.136 ops/s
Iteration   9: 761365.317 ops/s
Iteration  10: 761946.582 ops/s
Iteration  11: 759624.797 ops/s
Iteration  12: 761737.079 ops/s
Iteration  13: 761765.679 ops/s
Iteration  14: 759710.506 ops/s
Iteration  15: 762150.872 ops/s
Iteration  16: 758939.062 ops/s
Iteration  17: 760590.612 ops/s
Iteration  18: 761951.805 ops/s
Iteration  19: 760967.012 ops/s
Iteration  20: 761433.737 ops/s
Iteration  21: 762396.488 ops/s
Iteration  22: 761289.743 ops/s
Iteration  23: 759716.309 ops/s
Iteration  24: 761710.468 ops/s
Iteration  25: 760723.985 ops/s
Iteration  26: 757926.732 ops/s
Iteration  27: 761458.902 ops/s
Iteration  28: 761248.006 ops/s
Iteration  29: 758677.764 ops/s
Iteration  30: 760222.134 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zip":
  760449.567 ±(99.9%) 947.967 ops/s [Average]
  (min, avg, max) = (757032.084, 760449.567, 762396.488), stdev = 1418.873
  CI (99.9%): [759501.599, 761397.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
SingletonListSubListTest._Benchmark.benchmark_zip  thrpt   30  760449.567 ± 947.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 801320.207 ops/s
# Warmup Iteration   2: 1288470.790 ops/s
# Warmup Iteration   3: 1528928.170 ops/s
# Warmup Iteration   4: 1540349.076 ops/s
# Warmup Iteration   5: 1540505.262 ops/s
# Warmup Iteration   6: 1522219.948 ops/s
# Warmup Iteration   7: 1290453.692 ops/s
# Warmup Iteration   8: 1538015.085 ops/s
# Warmup Iteration   9: 1540408.599 ops/s
# Warmup Iteration  10: 1543621.593 ops/s
# Warmup Iteration  11: 1541319.102 ops/s
# Warmup Iteration  12: 1542371.662 ops/s
# Warmup Iteration  13: 1537892.080 ops/s
# Warmup Iteration  14: 1537868.329 ops/s
# Warmup Iteration  15: 1540373.816 ops/s
# Warmup Iteration  16: 1540089.836 ops/s
# Warmup Iteration  17: 1538810.338 ops/s
# Warmup Iteration  18: 1533582.514 ops/s
# Warmup Iteration  19: 1537123.010 ops/s
# Warmup Iteration  20: 1540262.436 ops/s
# Warmup Iteration  21: 1541192.169 ops/s
# Warmup Iteration  22: 1543505.907 ops/s
# Warmup Iteration  23: 1540719.630 ops/s
# Warmup Iteration  24: 1541680.209 ops/s
# Warmup Iteration  25: 1541626.238 ops/s
# Warmup Iteration  26: 1540339.431 ops/s
# Warmup Iteration  27: 1535126.178 ops/s
# Warmup Iteration  28: 1539703.116 ops/s
# Warmup Iteration  29: 1544432.856 ops/s
# Warmup Iteration  30: 1544686.048 ops/s
Iteration   1: 1546392.365 ops/s
Iteration   2: 1540147.664 ops/s
Iteration   3: 1543322.893 ops/s
Iteration   4: 1544109.445 ops/s
Iteration   5: 1540975.757 ops/s
Iteration   6: 1542676.857 ops/s
Iteration   7: 1540684.641 ops/s
Iteration   8: 1542383.515 ops/s
Iteration   9: 1543186.185 ops/s
Iteration  10: 1543780.436 ops/s
Iteration  11: 1537629.962 ops/s
Iteration  12: 1542644.910 ops/s
Iteration  13: 1541178.517 ops/s
Iteration  14: 1541704.306 ops/s
Iteration  15: 1540090.519 ops/s
Iteration  16: 1540216.506 ops/s
Iteration  17: 1533515.333 ops/s
Iteration  18: 1540673.489 ops/s
Iteration  19: 1539818.048 ops/s
Iteration  20: 1543656.596 ops/s
Iteration  21: 1542066.161 ops/s
Iteration  22: 1544539.411 ops/s
Iteration  23: 1540163.443 ops/s
Iteration  24: 1543876.471 ops/s
Iteration  25: 1540432.009 ops/s
Iteration  26: 1544601.988 ops/s
Iteration  27: 1541013.666 ops/s
Iteration  28: 1543357.399 ops/s
Iteration  29: 1537710.927 ops/s
Iteration  30: 1537704.046 ops/s


Result "org.eclipse.collections.impl.list.fixed.SingletonListSubListTest._Benchmark.benchmark_zipWithIndex":
  1541475.116 ±(99.9%) 1751.124 ops/s [Average]
  (min, avg, max) = (1533515.333, 1541475.116, 1546392.365), stdev = 2621.001
  CI (99.9%): [1539723.991, 1543226.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
SingletonListSubListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1541475.116 ± 1751.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621416.022 ops/s
# Warmup Iteration   2: 763377.914 ops/s
# Warmup Iteration   3: 946801.105 ops/s
# Warmup Iteration   4: 932480.952 ops/s
# Warmup Iteration   5: 939971.801 ops/s
# Warmup Iteration   6: 945222.977 ops/s
# Warmup Iteration   7: 946175.170 ops/s
# Warmup Iteration   8: 948888.988 ops/s
# Warmup Iteration   9: 798767.751 ops/s
# Warmup Iteration  10: 946779.913 ops/s
# Warmup Iteration  11: 946857.780 ops/s
# Warmup Iteration  12: 949134.026 ops/s
# Warmup Iteration  13: 947752.257 ops/s
# Warmup Iteration  14: 946847.307 ops/s
# Warmup Iteration  15: 946200.194 ops/s
# Warmup Iteration  16: 946300.685 ops/s
# Warmup Iteration  17: 1002418.846 ops/s
# Warmup Iteration  18: 1003874.511 ops/s
# Warmup Iteration  19: 1005072.697 ops/s
# Warmup Iteration  20: 1005203.892 ops/s
# Warmup Iteration  21: 1002130.462 ops/s
# Warmup Iteration  22: 998613.705 ops/s
# Warmup Iteration  23: 1003483.801 ops/s
# Warmup Iteration  24: 1005950.806 ops/s
# Warmup Iteration  25: 1006222.601 ops/s
# Warmup Iteration  26: 1004836.144 ops/s
# Warmup Iteration  27: 1006214.200 ops/s
# Warmup Iteration  28: 1005375.601 ops/s
# Warmup Iteration  29: 1003462.998 ops/s
# Warmup Iteration  30: 1004990.510 ops/s
Iteration   1: 1004933.241 ops/s
Iteration   2: 1005022.976 ops/s
Iteration   3: 1007443.995 ops/s
Iteration   4: 1006160.522 ops/s
Iteration   5: 1003141.181 ops/s
Iteration   6: 1004662.402 ops/s
Iteration   7: 1003958.400 ops/s
Iteration   8: 1006114.064 ops/s
Iteration   9: 1006642.745 ops/s
Iteration  10: 1005799.712 ops/s
Iteration  11: 1006208.018 ops/s
Iteration  12: 1006263.839 ops/s
Iteration  13: 1003539.151 ops/s
Iteration  14: 1005929.936 ops/s
Iteration  15: 1004860.350 ops/s
Iteration  16: 1008736.147 ops/s
Iteration  17: 1007607.469 ops/s
Iteration  18: 1003766.278 ops/s
Iteration  19: 1004627.699 ops/s
Iteration  20: 1005401.313 ops/s
Iteration  21: 1001801.406 ops/s
Iteration  22: 996009.297 ops/s
Iteration  23: 1001500.875 ops/s
Iteration  24: 1005130.049 ops/s
Iteration  25: 1007364.539 ops/s
Iteration  26: 999140.265 ops/s
Iteration  27: 1000649.419 ops/s
Iteration  28: 1002036.415 ops/s
Iteration  29: 1002580.765 ops/s
Iteration  30: 1003970.119 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_add":
  1004366.753 ±(99.9%) 1802.404 ops/s [Average]
  (min, avg, max) = (996009.297, 1004366.753, 1008736.147), stdev = 2697.754
  CI (99.9%): [1002564.349, 1006169.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_add  thrpt   30  1004366.753 ± 1802.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616629.251 ops/s
# Warmup Iteration   2: 768724.977 ops/s
# Warmup Iteration   3: 961134.817 ops/s
# Warmup Iteration   4: 955094.703 ops/s
# Warmup Iteration   5: 957496.371 ops/s
# Warmup Iteration   6: 958696.788 ops/s
# Warmup Iteration   7: 960854.074 ops/s
# Warmup Iteration   8: 958451.997 ops/s
# Warmup Iteration   9: 812746.821 ops/s
# Warmup Iteration  10: 962913.497 ops/s
# Warmup Iteration  11: 964169.084 ops/s
# Warmup Iteration  12: 961419.847 ops/s
# Warmup Iteration  13: 961823.460 ops/s
# Warmup Iteration  14: 963094.629 ops/s
# Warmup Iteration  15: 962227.092 ops/s
# Warmup Iteration  16: 960318.325 ops/s
# Warmup Iteration  17: 1018236.513 ops/s
# Warmup Iteration  18: 1019070.221 ops/s
# Warmup Iteration  19: 1018981.653 ops/s
# Warmup Iteration  20: 1016204.999 ops/s
# Warmup Iteration  21: 1012216.534 ops/s
# Warmup Iteration  22: 1019469.062 ops/s
# Warmup Iteration  23: 1018392.219 ops/s
# Warmup Iteration  24: 1018078.084 ops/s
# Warmup Iteration  25: 1014185.983 ops/s
# Warmup Iteration  26: 1017978.318 ops/s
# Warmup Iteration  27: 1015038.228 ops/s
# Warmup Iteration  28: 1018582.772 ops/s
# Warmup Iteration  29: 1022024.563 ops/s
# Warmup Iteration  30: 1014323.518 ops/s
Iteration   1: 1006610.727 ops/s
Iteration   2: 1020014.457 ops/s
Iteration   3: 1020530.573 ops/s
Iteration   4: 1016989.984 ops/s
Iteration   5: 1020448.653 ops/s
Iteration   6: 1020564.363 ops/s
Iteration   7: 1017388.732 ops/s
Iteration   8: 1020758.470 ops/s
Iteration   9: 1019024.293 ops/s
Iteration  10: 1018500.726 ops/s
Iteration  11: 1019836.273 ops/s
Iteration  12: 1013890.477 ops/s
Iteration  13: 1016071.703 ops/s
Iteration  14: 1017267.158 ops/s
Iteration  15: 1019083.843 ops/s
Iteration  16: 1018055.187 ops/s
Iteration  17: 1017351.102 ops/s
Iteration  18: 1009174.850 ops/s
Iteration  19: 1010232.360 ops/s
Iteration  20: 1007541.977 ops/s
Iteration  21: 1015620.954 ops/s
Iteration  22: 1011768.570 ops/s
Iteration  23: 1015006.432 ops/s
Iteration  24: 1006340.429 ops/s
Iteration  25: 1010326.890 ops/s
Iteration  26: 1015482.570 ops/s
Iteration  27: 1020623.555 ops/s
Iteration  28: 1009526.444 ops/s
Iteration  29: 1002109.887 ops/s
Iteration  30: 1007517.436 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAll":
  1014788.636 ±(99.9%) 3559.286 ops/s [Average]
  (min, avg, max) = (1002109.887, 1014788.636, 1020758.470), stdev = 5327.373
  CI (99.9%): [1011229.349, 1018347.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_addAll  thrpt   30  1014788.636 ± 3559.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 616296.994 ops/s
# Warmup Iteration   2: 761255.695 ops/s
# Warmup Iteration   3: 952132.352 ops/s
# Warmup Iteration   4: 944488.164 ops/s
# Warmup Iteration   5: 950381.623 ops/s
# Warmup Iteration   6: 945163.345 ops/s
# Warmup Iteration   7: 952050.392 ops/s
# Warmup Iteration   8: 955839.485 ops/s
# Warmup Iteration   9: 798293.194 ops/s
# Warmup Iteration  10: 952460.714 ops/s
# Warmup Iteration  11: 951843.219 ops/s
# Warmup Iteration  12: 951021.020 ops/s
# Warmup Iteration  13: 946064.531 ops/s
# Warmup Iteration  14: 950790.661 ops/s
# Warmup Iteration  15: 953853.516 ops/s
# Warmup Iteration  16: 945943.865 ops/s
# Warmup Iteration  17: 1001696.371 ops/s
# Warmup Iteration  18: 1006160.009 ops/s
# Warmup Iteration  19: 1003492.042 ops/s
# Warmup Iteration  20: 1005932.362 ops/s
# Warmup Iteration  21: 1003633.205 ops/s
# Warmup Iteration  22: 1001922.169 ops/s
# Warmup Iteration  23: 1005732.042 ops/s
# Warmup Iteration  24: 1007663.248 ops/s
# Warmup Iteration  25: 1008395.146 ops/s
# Warmup Iteration  26: 1008012.836 ops/s
# Warmup Iteration  27: 1006288.198 ops/s
# Warmup Iteration  28: 1007473.247 ops/s
# Warmup Iteration  29: 1006947.245 ops/s
# Warmup Iteration  30: 1005491.155 ops/s
Iteration   1: 1007889.478 ops/s
Iteration   2: 1007464.404 ops/s
Iteration   3: 1008916.708 ops/s
Iteration   4: 1009886.761 ops/s
Iteration   5: 1005576.240 ops/s
Iteration   6: 1008687.662 ops/s
Iteration   7: 1008510.479 ops/s
Iteration   8: 1007126.306 ops/s
Iteration   9: 1009461.351 ops/s
Iteration  10: 1007283.611 ops/s
Iteration  11: 1009322.818 ops/s
Iteration  12: 1008208.555 ops/s
Iteration  13: 1003757.720 ops/s
Iteration  14: 1009764.193 ops/s
Iteration  15: 1008626.012 ops/s
Iteration  16: 1004532.002 ops/s
Iteration  17: 1007682.224 ops/s
Iteration  18: 1004537.920 ops/s
Iteration  19: 1006914.220 ops/s
Iteration  20: 1007369.380 ops/s
Iteration  21: 1006957.445 ops/s
Iteration  22: 1009814.704 ops/s
Iteration  23: 1009302.285 ops/s
Iteration  24: 1006555.189 ops/s
Iteration  25: 1006104.614 ops/s
Iteration  26: 998410.695 ops/s
Iteration  27: 999141.470 ops/s
Iteration  28: 1000634.564 ops/s
Iteration  29: 1000108.178 ops/s
Iteration  30: 1001666.047 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAllAtIndex":
  1006340.441 ±(99.9%) 2219.053 ops/s [Average]
  (min, avg, max) = (998410.695, 1006340.441, 1009886.761), stdev = 3321.375
  CI (99.9%): [1004121.388, 1008559.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1006340.441 ± 2219.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 630384.532 ops/s
# Warmup Iteration   2: 771608.994 ops/s
# Warmup Iteration   3: 952750.440 ops/s
# Warmup Iteration   4: 945670.333 ops/s
# Warmup Iteration   5: 950826.647 ops/s
# Warmup Iteration   6: 951610.687 ops/s
# Warmup Iteration   7: 950500.547 ops/s
# Warmup Iteration   8: 951364.971 ops/s
# Warmup Iteration   9: 795935.968 ops/s
# Warmup Iteration  10: 949107.654 ops/s
# Warmup Iteration  11: 953590.742 ops/s
# Warmup Iteration  12: 951934.685 ops/s
# Warmup Iteration  13: 950985.604 ops/s
# Warmup Iteration  14: 950513.640 ops/s
# Warmup Iteration  15: 950225.980 ops/s
# Warmup Iteration  16: 950882.039 ops/s
# Warmup Iteration  17: 996164.812 ops/s
# Warmup Iteration  18: 996401.648 ops/s
# Warmup Iteration  19: 996136.677 ops/s
# Warmup Iteration  20: 997931.431 ops/s
# Warmup Iteration  21: 997482.773 ops/s
# Warmup Iteration  22: 996067.766 ops/s
# Warmup Iteration  23: 994238.542 ops/s
# Warmup Iteration  24: 998644.134 ops/s
# Warmup Iteration  25: 990704.942 ops/s
# Warmup Iteration  26: 996618.894 ops/s
# Warmup Iteration  27: 995615.120 ops/s
# Warmup Iteration  28: 997594.597 ops/s
# Warmup Iteration  29: 995110.264 ops/s
# Warmup Iteration  30: 996663.048 ops/s
Iteration   1: 997808.188 ops/s
Iteration   2: 996074.251 ops/s
Iteration   3: 994954.390 ops/s
Iteration   4: 998161.794 ops/s
Iteration   5: 998194.155 ops/s
Iteration   6: 993619.318 ops/s
Iteration   7: 997965.348 ops/s
Iteration   8: 994878.275 ops/s
Iteration   9: 993636.764 ops/s
Iteration  10: 994503.476 ops/s
Iteration  11: 993418.541 ops/s
Iteration  12: 996344.482 ops/s
Iteration  13: 995791.189 ops/s
Iteration  14: 994105.027 ops/s
Iteration  15: 999826.233 ops/s
Iteration  16: 999188.675 ops/s
Iteration  17: 993719.193 ops/s
Iteration  18: 996344.940 ops/s
Iteration  19: 996786.533 ops/s
Iteration  20: 993867.933 ops/s
Iteration  21: 990384.026 ops/s
Iteration  22: 988378.746 ops/s
Iteration  23: 991969.064 ops/s
Iteration  24: 993481.048 ops/s
Iteration  25: 995194.332 ops/s
Iteration  26: 997711.449 ops/s
Iteration  27: 993256.148 ops/s
Iteration  28: 994888.506 ops/s
Iteration  29: 993460.854 ops/s
Iteration  30: 997936.892 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_addAtIndex":
  995194.992 ±(99.9%) 1725.783 ops/s [Average]
  (min, avg, max) = (988378.746, 995194.992, 999826.233), stdev = 2583.071
  CI (99.9%): [993469.209, 996920.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_addAtIndex  thrpt   30  995194.992 ± 1725.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724315.941 ops/s
# Warmup Iteration   2: 1980214.808 ops/s
# Warmup Iteration   3: 1989666.939 ops/s
# Warmup Iteration   4: 1651040.728 ops/s
# Warmup Iteration   5: 1999429.159 ops/s
# Warmup Iteration   6: 1995665.142 ops/s
# Warmup Iteration   7: 1996756.419 ops/s
# Warmup Iteration   8: 1989447.786 ops/s
# Warmup Iteration   9: 1981914.270 ops/s
# Warmup Iteration  10: 1996324.670 ops/s
# Warmup Iteration  11: 2001012.905 ops/s
# Warmup Iteration  12: 2000375.722 ops/s
# Warmup Iteration  13: 1995468.368 ops/s
# Warmup Iteration  14: 1993652.289 ops/s
# Warmup Iteration  15: 1990192.893 ops/s
# Warmup Iteration  16: 1991410.571 ops/s
# Warmup Iteration  17: 1996706.686 ops/s
# Warmup Iteration  18: 1983731.498 ops/s
# Warmup Iteration  19: 2000873.815 ops/s
# Warmup Iteration  20: 1999020.151 ops/s
# Warmup Iteration  21: 1988914.900 ops/s
# Warmup Iteration  22: 2002623.696 ops/s
# Warmup Iteration  23: 1998129.075 ops/s
# Warmup Iteration  24: 1999004.254 ops/s
# Warmup Iteration  25: 1991305.808 ops/s
# Warmup Iteration  26: 1996002.863 ops/s
# Warmup Iteration  27: 1995434.640 ops/s
# Warmup Iteration  28: 1999988.844 ops/s
# Warmup Iteration  29: 1997888.808 ops/s
# Warmup Iteration  30: 1996340.757 ops/s
Iteration   1: 1998856.727 ops/s
Iteration   2: 1994157.403 ops/s
Iteration   3: 1993933.161 ops/s
Iteration   4: 1997513.787 ops/s
Iteration   5: 1967274.035 ops/s
Iteration   6: 1992429.619 ops/s
Iteration   7: 2003343.694 ops/s
Iteration   8: 1999838.379 ops/s
Iteration   9: 1999460.899 ops/s
Iteration  10: 2001758.135 ops/s
Iteration  11: 2001490.814 ops/s
Iteration  12: 2004496.876 ops/s
Iteration  13: 2005545.816 ops/s
Iteration  14: 1996515.982 ops/s
Iteration  15: 1977395.031 ops/s
Iteration  16: 1976972.838 ops/s
Iteration  17: 1983655.739 ops/s
Iteration  18: 1996162.041 ops/s
Iteration  19: 2003849.276 ops/s
Iteration  20: 1993696.865 ops/s
Iteration  21: 1993125.175 ops/s
Iteration  22: 2002071.622 ops/s
Iteration  23: 1995849.323 ops/s
Iteration  24: 2003571.369 ops/s
Iteration  25: 2003532.656 ops/s
Iteration  26: 1996192.256 ops/s
Iteration  27: 2006084.948 ops/s
Iteration  28: 2000748.664 ops/s
Iteration  29: 1996669.787 ops/s
Iteration  30: 2000518.508 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByMutating":
  1996223.714 ±(99.9%) 6070.283 ops/s [Average]
  (min, avg, max) = (1967274.035, 1996223.714, 2006084.948), stdev = 9085.714
  CI (99.9%): [1990153.432, 2002293.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1996223.714 ± 6070.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750762.445 ops/s
# Warmup Iteration   2: 1974636.071 ops/s
# Warmup Iteration   3: 2028875.025 ops/s
# Warmup Iteration   4: 1688355.513 ops/s
# Warmup Iteration   5: 2029174.982 ops/s
# Warmup Iteration   6: 2024696.348 ops/s
# Warmup Iteration   7: 2027966.016 ops/s
# Warmup Iteration   8: 2024225.280 ops/s
# Warmup Iteration   9: 2030432.926 ops/s
# Warmup Iteration  10: 2031095.874 ops/s
# Warmup Iteration  11: 2025974.176 ops/s
# Warmup Iteration  12: 2029976.719 ops/s
# Warmup Iteration  13: 2028021.943 ops/s
# Warmup Iteration  14: 2032156.401 ops/s
# Warmup Iteration  15: 2034042.069 ops/s
# Warmup Iteration  16: 2026600.001 ops/s
# Warmup Iteration  17: 2028453.898 ops/s
# Warmup Iteration  18: 2031046.937 ops/s
# Warmup Iteration  19: 2026584.454 ops/s
# Warmup Iteration  20: 2034507.994 ops/s
# Warmup Iteration  21: 2031900.470 ops/s
# Warmup Iteration  22: 2033670.776 ops/s
# Warmup Iteration  23: 2031841.196 ops/s
# Warmup Iteration  24: 2029613.274 ops/s
# Warmup Iteration  25: 2030340.636 ops/s
# Warmup Iteration  26: 2028504.105 ops/s
# Warmup Iteration  27: 2025794.564 ops/s
# Warmup Iteration  28: 2030481.929 ops/s
# Warmup Iteration  29: 2029726.688 ops/s
# Warmup Iteration  30: 2037208.354 ops/s
Iteration   1: 2031402.548 ops/s
Iteration   2: 2033456.209 ops/s
Iteration   3: 2034115.096 ops/s
Iteration   4: 2035688.856 ops/s
Iteration   5: 2037038.140 ops/s
Iteration   6: 2035008.832 ops/s
Iteration   7: 2033343.807 ops/s
Iteration   8: 2031389.057 ops/s
Iteration   9: 2028393.143 ops/s
Iteration  10: 2028543.571 ops/s
Iteration  11: 2033657.073 ops/s
Iteration  12: 2030476.270 ops/s
Iteration  13: 2033813.461 ops/s
Iteration  14: 2034437.376 ops/s
Iteration  15: 2034087.527 ops/s
Iteration  16: 2022203.048 ops/s
Iteration  17: 2019172.310 ops/s
Iteration  18: 2018714.107 ops/s
Iteration  19: 2021586.737 ops/s
Iteration  20: 2024832.005 ops/s
Iteration  21: 2025698.613 ops/s
Iteration  22: 2022797.197 ops/s
Iteration  23: 2029693.037 ops/s
Iteration  24: 2036170.281 ops/s
Iteration  25: 2033672.774 ops/s
Iteration  26: 2032099.499 ops/s
Iteration  27: 2033086.027 ops/s
Iteration  28: 2039533.213 ops/s
Iteration  29: 2039416.765 ops/s
Iteration  30: 2034150.285 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_aggregateByNonMutating":
  2030922.562 ±(99.9%) 3784.100 ops/s [Average]
  (min, avg, max) = (2018714.107, 2030922.562, 2039533.213), stdev = 5663.864
  CI (99.9%): [2027138.462, 2034706.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  2030922.562 ± 3784.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24698244.105 ops/s
# Warmup Iteration   2: 49220526.450 ops/s
# Warmup Iteration   3: 40222290.799 ops/s
# Warmup Iteration   4: 47204126.533 ops/s
# Warmup Iteration   5: 47171862.260 ops/s
# Warmup Iteration   6: 47209975.571 ops/s
# Warmup Iteration   7: 47014711.618 ops/s
# Warmup Iteration   8: 47075566.624 ops/s
# Warmup Iteration   9: 47030809.720 ops/s
# Warmup Iteration  10: 47151447.335 ops/s
# Warmup Iteration  11: 47114661.533 ops/s
# Warmup Iteration  12: 47250747.596 ops/s
# Warmup Iteration  13: 47140017.323 ops/s
# Warmup Iteration  14: 47285711.184 ops/s
# Warmup Iteration  15: 47168308.365 ops/s
# Warmup Iteration  16: 47127620.940 ops/s
# Warmup Iteration  17: 47286753.362 ops/s
# Warmup Iteration  18: 47341596.289 ops/s
# Warmup Iteration  19: 47255007.891 ops/s
# Warmup Iteration  20: 47316977.319 ops/s
# Warmup Iteration  21: 47098441.195 ops/s
# Warmup Iteration  22: 47196210.323 ops/s
# Warmup Iteration  23: 47237198.455 ops/s
# Warmup Iteration  24: 47196350.756 ops/s
# Warmup Iteration  25: 47209453.853 ops/s
# Warmup Iteration  26: 47224246.401 ops/s
# Warmup Iteration  27: 47304034.652 ops/s
# Warmup Iteration  28: 47227640.071 ops/s
# Warmup Iteration  29: 47234138.224 ops/s
# Warmup Iteration  30: 47251083.279 ops/s
Iteration   1: 47001140.303 ops/s
Iteration   2: 47246399.048 ops/s
Iteration   3: 47217808.976 ops/s
Iteration   4: 47291599.660 ops/s
Iteration   5: 47382130.737 ops/s
Iteration   6: 47073327.021 ops/s
Iteration   7: 47441019.959 ops/s
Iteration   8: 45922124.769 ops/s
Iteration   9: 46587095.437 ops/s
Iteration  10: 47451397.027 ops/s
Iteration  11: 47292167.083 ops/s
Iteration  12: 47296235.039 ops/s
Iteration  13: 47177999.462 ops/s
Iteration  14: 47256868.114 ops/s
Iteration  15: 47150401.900 ops/s
Iteration  16: 47382738.639 ops/s
Iteration  17: 47062528.987 ops/s
Iteration  18: 47170223.676 ops/s
Iteration  19: 47175411.762 ops/s
Iteration  20: 47186268.227 ops/s
Iteration  21: 47113658.233 ops/s
Iteration  22: 47196490.415 ops/s
Iteration  23: 47225284.062 ops/s
Iteration  24: 47234041.790 ops/s
Iteration  25: 47197245.952 ops/s
Iteration  26: 47264388.165 ops/s
Iteration  27: 47063941.744 ops/s
Iteration  28: 47041185.732 ops/s
Iteration  29: 47226590.531 ops/s
Iteration  30: 47114701.758 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfy":
  47148080.474 ±(99.9%) 187814.901 ops/s [Average]
  (min, avg, max) = (45922124.769, 47148080.474, 47451397.027), stdev = 281112.523
  CI (99.9%): [46960265.573, 47335895.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_allSatisfy  thrpt   30  47148080.474 ± 187814.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16437530.908 ops/s
# Warmup Iteration   2: 33320324.305 ops/s
# Warmup Iteration   3: 30420165.772 ops/s
# Warmup Iteration   4: 33341421.533 ops/s
# Warmup Iteration   5: 34532428.197 ops/s
# Warmup Iteration   6: 34548162.307 ops/s
# Warmup Iteration   7: 34496974.305 ops/s
# Warmup Iteration   8: 34431431.516 ops/s
# Warmup Iteration   9: 34446180.017 ops/s
# Warmup Iteration  10: 34539706.999 ops/s
# Warmup Iteration  11: 34498255.720 ops/s
# Warmup Iteration  12: 34395523.708 ops/s
# Warmup Iteration  13: 34431938.842 ops/s
# Warmup Iteration  14: 34504046.684 ops/s
# Warmup Iteration  15: 34546811.051 ops/s
# Warmup Iteration  16: 34560813.241 ops/s
# Warmup Iteration  17: 34506017.359 ops/s
# Warmup Iteration  18: 34406006.432 ops/s
# Warmup Iteration  19: 34611680.819 ops/s
# Warmup Iteration  20: 34506948.121 ops/s
# Warmup Iteration  21: 34502858.997 ops/s
# Warmup Iteration  22: 34485413.388 ops/s
# Warmup Iteration  23: 34365942.657 ops/s
# Warmup Iteration  24: 34443812.182 ops/s
# Warmup Iteration  25: 34505289.920 ops/s
# Warmup Iteration  26: 34466912.550 ops/s
# Warmup Iteration  27: 34555151.130 ops/s
# Warmup Iteration  28: 34493195.178 ops/s
# Warmup Iteration  29: 34591908.242 ops/s
# Warmup Iteration  30: 34455669.127 ops/s
Iteration   1: 34425998.156 ops/s
Iteration   2: 34534683.370 ops/s
Iteration   3: 34605174.926 ops/s
Iteration   4: 34396325.752 ops/s
Iteration   5: 34319621.820 ops/s
Iteration   6: 34486280.978 ops/s
Iteration   7: 34335401.647 ops/s
Iteration   8: 34552060.479 ops/s
Iteration   9: 34469465.124 ops/s
Iteration  10: 34467936.077 ops/s
Iteration  11: 34354008.093 ops/s
Iteration  12: 34502460.493 ops/s
Iteration  13: 34616097.241 ops/s
Iteration  14: 34495180.042 ops/s
Iteration  15: 34389897.574 ops/s
Iteration  16: 34526105.159 ops/s
Iteration  17: 34498507.542 ops/s
Iteration  18: 34344720.042 ops/s
Iteration  19: 34520844.564 ops/s
Iteration  20: 34529872.424 ops/s
Iteration  21: 34484868.410 ops/s
Iteration  22: 34638294.497 ops/s
Iteration  23: 34586550.127 ops/s
Iteration  24: 34176403.562 ops/s
Iteration  25: 34304285.742 ops/s
Iteration  26: 34501702.564 ops/s
Iteration  27: 34523736.068 ops/s
Iteration  28: 34603271.579 ops/s
Iteration  29: 34711936.747 ops/s
Iteration  30: 34436634.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_allSatisfyWith":
  34477944.169 ±(99.9%) 76627.625 ops/s [Average]
  (min, avg, max) = (34176403.562, 34477944.169, 34711936.747), stdev = 114692.631
  CI (99.9%): [34401316.543, 34554571.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  34477944.169 ± 76627.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24934359.737 ops/s
# Warmup Iteration   2: 49402379.600 ops/s
# Warmup Iteration   3: 40870650.133 ops/s
# Warmup Iteration   4: 47842701.215 ops/s
# Warmup Iteration   5: 47745751.600 ops/s
# Warmup Iteration   6: 47903203.544 ops/s
# Warmup Iteration   7: 47737920.143 ops/s
# Warmup Iteration   8: 47931945.758 ops/s
# Warmup Iteration   9: 47797663.981 ops/s
# Warmup Iteration  10: 47851978.404 ops/s
# Warmup Iteration  11: 47921329.436 ops/s
# Warmup Iteration  12: 47747535.067 ops/s
# Warmup Iteration  13: 47756715.642 ops/s
# Warmup Iteration  14: 47883056.839 ops/s
# Warmup Iteration  15: 47873783.635 ops/s
# Warmup Iteration  16: 47832996.164 ops/s
# Warmup Iteration  17: 47855508.160 ops/s
# Warmup Iteration  18: 47827455.980 ops/s
# Warmup Iteration  19: 47931516.793 ops/s
# Warmup Iteration  20: 47937003.776 ops/s
# Warmup Iteration  21: 47836667.206 ops/s
# Warmup Iteration  22: 47749578.417 ops/s
# Warmup Iteration  23: 48016507.341 ops/s
# Warmup Iteration  24: 48013758.343 ops/s
# Warmup Iteration  25: 48007316.580 ops/s
# Warmup Iteration  26: 46368740.324 ops/s
# Warmup Iteration  27: 47630816.977 ops/s
# Warmup Iteration  28: 47925579.477 ops/s
# Warmup Iteration  29: 47945334.610 ops/s
# Warmup Iteration  30: 47972966.026 ops/s
Iteration   1: 48063896.662 ops/s
Iteration   2: 47823157.371 ops/s
Iteration   3: 47874073.181 ops/s
Iteration   4: 47808909.976 ops/s
Iteration   5: 47867052.308 ops/s
Iteration   6: 47842449.096 ops/s
Iteration   7: 47972673.704 ops/s
Iteration   8: 47988022.480 ops/s
Iteration   9: 47774654.761 ops/s
Iteration  10: 47935478.698 ops/s
Iteration  11: 47941048.769 ops/s
Iteration  12: 47812697.633 ops/s
Iteration  13: 48146368.613 ops/s
Iteration  14: 47873524.064 ops/s
Iteration  15: 47946717.548 ops/s
Iteration  16: 48020376.412 ops/s
Iteration  17: 47984495.313 ops/s
Iteration  18: 48069345.179 ops/s
Iteration  19: 47855350.377 ops/s
Iteration  20: 47719323.934 ops/s
Iteration  21: 47888181.222 ops/s
Iteration  22: 47794062.773 ops/s
Iteration  23: 47872998.597 ops/s
Iteration  24: 48007765.685 ops/s
Iteration  25: 47895705.503 ops/s
Iteration  26: 48072163.958 ops/s
Iteration  27: 47816076.560 ops/s
Iteration  28: 48012058.613 ops/s
Iteration  29: 47936360.044 ops/s
Iteration  30: 48027280.233 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfy":
  47921408.976 ±(99.9%) 69154.958 ops/s [Average]
  (min, avg, max) = (47719323.934, 47921408.976, 48146368.613), stdev = 103507.893
  CI (99.9%): [47852254.018, 47990563.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_anySatisfy  thrpt   30  47921408.976 ± 69154.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16250729.566 ops/s
# Warmup Iteration   2: 33637459.336 ops/s
# Warmup Iteration   3: 30138787.996 ops/s
# Warmup Iteration   4: 32502307.608 ops/s
# Warmup Iteration   5: 33978661.433 ops/s
# Warmup Iteration   6: 33955185.102 ops/s
# Warmup Iteration   7: 34016132.236 ops/s
# Warmup Iteration   8: 34033950.140 ops/s
# Warmup Iteration   9: 33986506.744 ops/s
# Warmup Iteration  10: 33974477.969 ops/s
# Warmup Iteration  11: 34045052.067 ops/s
# Warmup Iteration  12: 34012990.678 ops/s
# Warmup Iteration  13: 33995169.309 ops/s
# Warmup Iteration  14: 33964265.753 ops/s
# Warmup Iteration  15: 34030041.578 ops/s
# Warmup Iteration  16: 33949837.648 ops/s
# Warmup Iteration  17: 22009802.410 ops/s
# Warmup Iteration  18: 22030457.086 ops/s
# Warmup Iteration  19: 22035293.491 ops/s
# Warmup Iteration  20: 21986438.861 ops/s
# Warmup Iteration  21: 22014885.202 ops/s
# Warmup Iteration  22: 22003183.439 ops/s
# Warmup Iteration  23: 21990787.718 ops/s
# Warmup Iteration  24: 21929569.101 ops/s
# Warmup Iteration  25: 22054620.919 ops/s
# Warmup Iteration  26: 21999956.848 ops/s
# Warmup Iteration  27: 22055074.838 ops/s
# Warmup Iteration  28: 21977330.937 ops/s
# Warmup Iteration  29: 22039637.001 ops/s
# Warmup Iteration  30: 22010178.056 ops/s
Iteration   1: 22038381.377 ops/s
Iteration   2: 22047616.325 ops/s
Iteration   3: 22027558.891 ops/s
Iteration   4: 22025909.514 ops/s
Iteration   5: 22044808.421 ops/s
Iteration   6: 21973302.303 ops/s
Iteration   7: 21953376.240 ops/s
Iteration   8: 21987297.786 ops/s
Iteration   9: 22070056.370 ops/s
Iteration  10: 22026221.147 ops/s
Iteration  11: 22018874.593 ops/s
Iteration  12: 21975345.732 ops/s
Iteration  13: 22054299.489 ops/s
Iteration  14: 22024110.992 ops/s
Iteration  15: 22039344.962 ops/s
Iteration  16: 22001338.210 ops/s
Iteration  17: 22061058.431 ops/s
Iteration  18: 22040144.927 ops/s
Iteration  19: 22030229.289 ops/s
Iteration  20: 22017671.466 ops/s
Iteration  21: 22080380.568 ops/s
Iteration  22: 22040351.604 ops/s
Iteration  23: 22025342.443 ops/s
Iteration  24: 22051705.541 ops/s
Iteration  25: 21980975.468 ops/s
Iteration  26: 21944117.196 ops/s
Iteration  27: 21969564.394 ops/s
Iteration  28: 22021743.921 ops/s
Iteration  29: 21956487.645 ops/s
Iteration  30: 21971355.023 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_anySatisfyWith":
  22016632.342 ±(99.9%) 24543.529 ops/s [Average]
  (min, avg, max) = (21944117.196, 22016632.342, 22080380.568), stdev = 36735.602
  CI (99.9%): [21992088.813, 22041175.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  22016632.342 ± 24543.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635684.625 ops/s
# Warmup Iteration   2: 1454904.064 ops/s
# Warmup Iteration   3: 1241442.378 ops/s
# Warmup Iteration   4: 1469701.692 ops/s
# Warmup Iteration   5: 1469593.885 ops/s
# Warmup Iteration   6: 1473057.712 ops/s
# Warmup Iteration   7: 1468480.844 ops/s
# Warmup Iteration   8: 1474997.411 ops/s
# Warmup Iteration   9: 1466850.546 ops/s
# Warmup Iteration  10: 1465750.697 ops/s
# Warmup Iteration  11: 1467153.103 ops/s
# Warmup Iteration  12: 1464686.728 ops/s
# Warmup Iteration  13: 1473387.671 ops/s
# Warmup Iteration  14: 1475653.893 ops/s
# Warmup Iteration  15: 1469665.762 ops/s
# Warmup Iteration  16: 1465112.274 ops/s
# Warmup Iteration  17: 1458395.980 ops/s
# Warmup Iteration  18: 1465142.583 ops/s
# Warmup Iteration  19: 1472335.278 ops/s
# Warmup Iteration  20: 1470191.597 ops/s
# Warmup Iteration  21: 1469174.509 ops/s
# Warmup Iteration  22: 1474427.684 ops/s
# Warmup Iteration  23: 1471697.370 ops/s
# Warmup Iteration  24: 1469095.761 ops/s
# Warmup Iteration  25: 1469608.844 ops/s
# Warmup Iteration  26: 1474018.047 ops/s
# Warmup Iteration  27: 1471865.045 ops/s
# Warmup Iteration  28: 1477453.208 ops/s
# Warmup Iteration  29: 1468099.900 ops/s
# Warmup Iteration  30: 1467988.750 ops/s
Iteration   1: 1475033.301 ops/s
Iteration   2: 1468471.631 ops/s
Iteration   3: 1469585.634 ops/s
Iteration   4: 1462793.364 ops/s
Iteration   5: 1471454.999 ops/s
Iteration   6: 1469277.439 ops/s
Iteration   7: 1469143.705 ops/s
Iteration   8: 1468900.373 ops/s
Iteration   9: 1473303.880 ops/s
Iteration  10: 1468219.969 ops/s
Iteration  11: 1475179.381 ops/s
Iteration  12: 1472562.255 ops/s
Iteration  13: 1469820.211 ops/s
Iteration  14: 1473520.575 ops/s
Iteration  15: 1469637.533 ops/s
Iteration  16: 1475820.908 ops/s
Iteration  17: 1474833.908 ops/s
Iteration  18: 1473995.045 ops/s
Iteration  19: 1473011.911 ops/s
Iteration  20: 1472984.868 ops/s
Iteration  21: 1475524.679 ops/s
Iteration  22: 1474842.742 ops/s
Iteration  23: 1470872.546 ops/s
Iteration  24: 1475543.857 ops/s
Iteration  25: 1472015.741 ops/s
Iteration  26: 1476109.282 ops/s
Iteration  27: 1474924.716 ops/s
Iteration  28: 1478435.738 ops/s
Iteration  29: 1472149.540 ops/s
Iteration  30: 1469271.626 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_appendString":
  1472241.379 ±(99.9%) 2192.458 ops/s [Average]
  (min, avg, max) = (1462793.364, 1472241.379, 1478435.738), stdev = 3281.568
  CI (99.9%): [1470048.920, 1474433.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_appendString  thrpt   30  1472241.379 ± 2192.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4014797.581 ops/s
# Warmup Iteration   2: 8975361.450 ops/s
# Warmup Iteration   3: 7649395.457 ops/s
# Warmup Iteration   4: 9029632.637 ops/s
# Warmup Iteration   5: 9035133.727 ops/s
# Warmup Iteration   6: 9054397.512 ops/s
# Warmup Iteration   7: 9020561.368 ops/s
# Warmup Iteration   8: 9033301.266 ops/s
# Warmup Iteration   9: 9015453.078 ops/s
# Warmup Iteration  10: 9035816.158 ops/s
# Warmup Iteration  11: 9038063.302 ops/s
# Warmup Iteration  12: 9046023.516 ops/s
# Warmup Iteration  13: 9046450.598 ops/s
# Warmup Iteration  14: 9027654.771 ops/s
# Warmup Iteration  15: 9046035.432 ops/s
# Warmup Iteration  16: 9049288.656 ops/s
# Warmup Iteration  17: 9039317.897 ops/s
# Warmup Iteration  18: 9053241.992 ops/s
# Warmup Iteration  19: 9033687.623 ops/s
# Warmup Iteration  20: 9026210.074 ops/s
# Warmup Iteration  21: 9058878.874 ops/s
# Warmup Iteration  22: 9033534.597 ops/s
# Warmup Iteration  23: 9014609.021 ops/s
# Warmup Iteration  24: 9064940.577 ops/s
# Warmup Iteration  25: 9050464.587 ops/s
# Warmup Iteration  26: 9049756.287 ops/s
# Warmup Iteration  27: 9047726.820 ops/s
# Warmup Iteration  28: 9034862.439 ops/s
# Warmup Iteration  29: 9053573.460 ops/s
# Warmup Iteration  30: 9047662.221 ops/s
Iteration   1: 9039934.134 ops/s
Iteration   2: 9035280.439 ops/s
Iteration   3: 9084346.962 ops/s
Iteration   4: 9036105.969 ops/s
Iteration   5: 9001208.053 ops/s
Iteration   6: 9005055.117 ops/s
Iteration   7: 9021998.263 ops/s
Iteration   8: 9046005.553 ops/s
Iteration   9: 9052184.393 ops/s
Iteration  10: 9027228.421 ops/s
Iteration  11: 9074548.753 ops/s
Iteration  12: 9050591.841 ops/s
Iteration  13: 9034573.340 ops/s
Iteration  14: 9053747.513 ops/s
Iteration  15: 9032511.942 ops/s
Iteration  16: 9023607.725 ops/s
Iteration  17: 9024405.861 ops/s
Iteration  18: 9047036.900 ops/s
Iteration  19: 9009159.847 ops/s
Iteration  20: 9009914.808 ops/s
Iteration  21: 9025958.839 ops/s
Iteration  22: 9093361.923 ops/s
Iteration  23: 9076653.902 ops/s
Iteration  24: 9045133.534 ops/s
Iteration  25: 9042230.778 ops/s
Iteration  26: 9028956.578 ops/s
Iteration  27: 9033392.978 ops/s
Iteration  28: 9056064.917 ops/s
Iteration  29: 9078607.179 ops/s
Iteration  30: 9027688.312 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_asReversed":
  9040583.159 ±(99.9%) 15631.645 ops/s [Average]
  (min, avg, max) = (9001208.053, 9040583.159, 9093361.923), stdev = 23396.712
  CI (99.9%): [9024951.514, 9056214.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_asReversed  thrpt   30  9040583.159 ± 15631.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637449.333 ops/s
# Warmup Iteration   2: 779672.901 ops/s
# Warmup Iteration   3: 957580.872 ops/s
# Warmup Iteration   4: 961380.050 ops/s
# Warmup Iteration   5: 962524.806 ops/s
# Warmup Iteration   6: 964741.072 ops/s
# Warmup Iteration   7: 967900.376 ops/s
# Warmup Iteration   8: 968710.275 ops/s
# Warmup Iteration   9: 815278.202 ops/s
# Warmup Iteration  10: 967558.092 ops/s
# Warmup Iteration  11: 967011.071 ops/s
# Warmup Iteration  12: 967085.818 ops/s
# Warmup Iteration  13: 966050.857 ops/s
# Warmup Iteration  14: 966536.531 ops/s
# Warmup Iteration  15: 968054.531 ops/s
# Warmup Iteration  16: 967187.843 ops/s
# Warmup Iteration  17: 1026388.346 ops/s
# Warmup Iteration  18: 1026073.019 ops/s
# Warmup Iteration  19: 1026183.572 ops/s
# Warmup Iteration  20: 1026046.006 ops/s
# Warmup Iteration  21: 1029485.079 ops/s
# Warmup Iteration  22: 1026549.474 ops/s
# Warmup Iteration  23: 1025112.958 ops/s
# Warmup Iteration  24: 1026426.246 ops/s
# Warmup Iteration  25: 1028355.405 ops/s
# Warmup Iteration  26: 1028973.099 ops/s
# Warmup Iteration  27: 1026622.397 ops/s
# Warmup Iteration  28: 1027495.042 ops/s
# Warmup Iteration  29: 1027829.652 ops/s
# Warmup Iteration  30: 1025320.165 ops/s
Iteration   1: 1027452.844 ops/s
Iteration   2: 1028330.253 ops/s
Iteration   3: 1029789.508 ops/s
Iteration   4: 1027013.337 ops/s
Iteration   5: 1028956.115 ops/s
Iteration   6: 1026877.889 ops/s
Iteration   7: 1023638.424 ops/s
Iteration   8: 1026206.380 ops/s
Iteration   9: 1025652.137 ops/s
Iteration  10: 1024620.799 ops/s
Iteration  11: 1026606.948 ops/s
Iteration  12: 1023385.292 ops/s
Iteration  13: 1026096.622 ops/s
Iteration  14: 1027985.388 ops/s
Iteration  15: 1025350.227 ops/s
Iteration  16: 1026853.496 ops/s
Iteration  17: 1027024.007 ops/s
Iteration  18: 1026130.948 ops/s
Iteration  19: 1026748.870 ops/s
Iteration  20: 1027098.465 ops/s
Iteration  21: 1028302.714 ops/s
Iteration  22: 1027290.001 ops/s
Iteration  23: 1026403.590 ops/s
Iteration  24: 1028776.711 ops/s
Iteration  25: 1026341.368 ops/s
Iteration  26: 1023963.353 ops/s
Iteration  27: 1027337.639 ops/s
Iteration  28: 1025141.358 ops/s
Iteration  29: 1027661.985 ops/s
Iteration  30: 1028727.214 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_castToCollection":
  1026725.463 ±(99.9%) 1047.320 ops/s [Average]
  (min, avg, max) = (1023385.292, 1026725.463, 1029789.508), stdev = 1567.579
  CI (99.9%): [1025678.143, 1027772.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_castToCollection  thrpt   30  1026725.463 ± 1047.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3269974.196 ops/s
# Warmup Iteration   2: 7211219.837 ops/s
# Warmup Iteration   3: 6932346.660 ops/s
# Warmup Iteration   4: 6443328.683 ops/s
# Warmup Iteration   5: 7259637.984 ops/s
# Warmup Iteration   6: 7249354.934 ops/s
# Warmup Iteration   7: 7261612.709 ops/s
# Warmup Iteration   8: 7254872.759 ops/s
# Warmup Iteration   9: 7268476.572 ops/s
# Warmup Iteration  10: 7234593.961 ops/s
# Warmup Iteration  11: 7251828.354 ops/s
# Warmup Iteration  12: 7254267.354 ops/s
# Warmup Iteration  13: 7261312.367 ops/s
# Warmup Iteration  14: 7255641.746 ops/s
# Warmup Iteration  15: 7223999.496 ops/s
# Warmup Iteration  16: 7236775.046 ops/s
# Warmup Iteration  17: 7268205.717 ops/s
# Warmup Iteration  18: 7275011.790 ops/s
# Warmup Iteration  19: 7282007.505 ops/s
# Warmup Iteration  20: 7275426.570 ops/s
# Warmup Iteration  21: 7248974.342 ops/s
# Warmup Iteration  22: 7248350.792 ops/s
# Warmup Iteration  23: 7270621.897 ops/s
# Warmup Iteration  24: 7264795.312 ops/s
# Warmup Iteration  25: 7272685.158 ops/s
# Warmup Iteration  26: 7271676.873 ops/s
# Warmup Iteration  27: 7279194.706 ops/s
# Warmup Iteration  28: 7269741.041 ops/s
# Warmup Iteration  29: 7276136.645 ops/s
# Warmup Iteration  30: 7278248.945 ops/s
Iteration   1: 7272122.095 ops/s
Iteration   2: 7245593.988 ops/s
Iteration   3: 7271444.515 ops/s
Iteration   4: 7262502.646 ops/s
Iteration   5: 7255667.562 ops/s
Iteration   6: 7217657.746 ops/s
Iteration   7: 7249413.935 ops/s
Iteration   8: 7268690.082 ops/s
Iteration   9: 7261164.535 ops/s
Iteration  10: 7252255.766 ops/s
Iteration  11: 7269252.851 ops/s
Iteration  12: 7256716.526 ops/s
Iteration  13: 7251649.291 ops/s
Iteration  14: 7231610.171 ops/s
Iteration  15: 7224599.230 ops/s
Iteration  16: 7271038.134 ops/s
Iteration  17: 7256808.564 ops/s
Iteration  18: 7253879.756 ops/s
Iteration  19: 7253807.489 ops/s
Iteration  20: 7262573.192 ops/s
Iteration  21: 7243958.058 ops/s
Iteration  22: 7279207.031 ops/s
Iteration  23: 7223006.506 ops/s
Iteration  24: 7263827.653 ops/s
Iteration  25: 7269724.623 ops/s
Iteration  26: 7259456.036 ops/s
Iteration  27: 7257372.083 ops/s
Iteration  28: 7257237.848 ops/s
Iteration  29: 7272611.424 ops/s
Iteration  30: 7247440.203 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_large_size":
  7255409.651 ±(99.9%) 10227.333 ops/s [Average]
  (min, avg, max) = (7217657.746, 7255409.651, 7279207.031), stdev = 15307.792
  CI (99.9%): [7245182.318, 7265636.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  7255409.651 ± 10227.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752226.735 ops/s
# Warmup Iteration   2: 818734.163 ops/s
# Warmup Iteration   3: 1048063.260 ops/s
# Warmup Iteration   4: 1046992.014 ops/s
# Warmup Iteration   5: 1042159.043 ops/s
# Warmup Iteration   6: 1045772.431 ops/s
# Warmup Iteration   7: 1047105.091 ops/s
# Warmup Iteration   8: 1041200.436 ops/s
# Warmup Iteration   9: 1041136.024 ops/s
# Warmup Iteration  10: 1048684.416 ops/s
# Warmup Iteration  11: 888548.046 ops/s
# Warmup Iteration  12: 1046943.352 ops/s
# Warmup Iteration  13: 1046161.122 ops/s
# Warmup Iteration  14: 1046513.193 ops/s
# Warmup Iteration  15: 1046481.709 ops/s
# Warmup Iteration  16: 1045275.906 ops/s
# Warmup Iteration  17: 1114858.221 ops/s
# Warmup Iteration  18: 1110218.209 ops/s
# Warmup Iteration  19: 1111783.278 ops/s
# Warmup Iteration  20: 1108916.496 ops/s
# Warmup Iteration  21: 1114139.226 ops/s
# Warmup Iteration  22: 1114360.131 ops/s
# Warmup Iteration  23: 1113878.506 ops/s
# Warmup Iteration  24: 1104696.125 ops/s
# Warmup Iteration  25: 1114839.273 ops/s
# Warmup Iteration  26: 1113881.751 ops/s
# Warmup Iteration  27: 1115685.073 ops/s
# Warmup Iteration  28: 1117012.830 ops/s
# Warmup Iteration  29: 1115093.561 ops/s
# Warmup Iteration  30: 1111368.161 ops/s
Iteration   1: 1113315.829 ops/s
Iteration   2: 1113692.085 ops/s
Iteration   3: 1113889.314 ops/s
Iteration   4: 1113084.864 ops/s
Iteration   5: 1119265.277 ops/s
Iteration   6: 1110800.668 ops/s
Iteration   7: 1107869.755 ops/s
Iteration   8: 1114194.114 ops/s
Iteration   9: 1109906.583 ops/s
Iteration  10: 1108453.865 ops/s
Iteration  11: 1108284.247 ops/s
Iteration  12: 1111730.136 ops/s
Iteration  13: 1113262.809 ops/s
Iteration  14: 1110424.600 ops/s
Iteration  15: 1109982.706 ops/s
Iteration  16: 1112602.267 ops/s
Iteration  17: 1112672.483 ops/s
Iteration  18: 1114128.835 ops/s
Iteration  19: 1117540.679 ops/s
Iteration  20: 1115106.620 ops/s
Iteration  21: 1107014.979 ops/s
Iteration  22: 1110732.617 ops/s
Iteration  23: 1110289.444 ops/s
Iteration  24: 1108476.656 ops/s
Iteration  25: 1108626.670 ops/s
Iteration  26: 1112161.479 ops/s
Iteration  27: 1107794.090 ops/s
Iteration  28: 1107083.018 ops/s
Iteration  29: 1111750.801 ops/s
Iteration  30: 1106218.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_chunk_zero_throws":
  1111345.212 ±(99.9%) 2097.428 ops/s [Average]
  (min, avg, max) = (1106218.865, 1111345.212, 1119265.277), stdev = 3139.331
  CI (99.9%): [1109247.784, 1113442.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1111345.212 ± 2097.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623362.534 ops/s
# Warmup Iteration   2: 767371.460 ops/s
# Warmup Iteration   3: 952479.299 ops/s
# Warmup Iteration   4: 949816.693 ops/s
# Warmup Iteration   5: 952706.943 ops/s
# Warmup Iteration   6: 953049.902 ops/s
# Warmup Iteration   7: 952414.607 ops/s
# Warmup Iteration   8: 952877.152 ops/s
# Warmup Iteration   9: 799840.119 ops/s
# Warmup Iteration  10: 953550.532 ops/s
# Warmup Iteration  11: 953993.085 ops/s
# Warmup Iteration  12: 950824.601 ops/s
# Warmup Iteration  13: 952473.123 ops/s
# Warmup Iteration  14: 955007.957 ops/s
# Warmup Iteration  15: 952856.909 ops/s
# Warmup Iteration  16: 951779.770 ops/s
# Warmup Iteration  17: 1010528.696 ops/s
# Warmup Iteration  18: 1011559.790 ops/s
# Warmup Iteration  19: 1009804.692 ops/s
# Warmup Iteration  20: 1009512.151 ops/s
# Warmup Iteration  21: 1011872.143 ops/s
# Warmup Iteration  22: 1012405.704 ops/s
# Warmup Iteration  23: 1012418.223 ops/s
# Warmup Iteration  24: 1010082.441 ops/s
# Warmup Iteration  25: 1014479.442 ops/s
# Warmup Iteration  26: 1013255.437 ops/s
# Warmup Iteration  27: 1013183.808 ops/s
# Warmup Iteration  28: 1009797.749 ops/s
# Warmup Iteration  29: 1008930.610 ops/s
# Warmup Iteration  30: 1010060.019 ops/s
Iteration   1: 1013377.774 ops/s
Iteration   2: 1011571.720 ops/s
Iteration   3: 1010264.834 ops/s
Iteration   4: 1013001.269 ops/s
Iteration   5: 1009286.142 ops/s
Iteration   6: 1014417.974 ops/s
Iteration   7: 1013011.078 ops/s
Iteration   8: 1013737.097 ops/s
Iteration   9: 1014183.638 ops/s
Iteration  10: 1010384.581 ops/s
Iteration  11: 1012145.351 ops/s
Iteration  12: 1010944.762 ops/s
Iteration  13: 1011545.705 ops/s
Iteration  14: 1011247.077 ops/s
Iteration  15: 1011450.569 ops/s
Iteration  16: 1013674.726 ops/s
Iteration  17: 1013182.627 ops/s
Iteration  18: 1012081.576 ops/s
Iteration  19: 1011424.521 ops/s
Iteration  20: 1014062.783 ops/s
Iteration  21: 1009562.836 ops/s
Iteration  22: 1013428.473 ops/s
Iteration  23: 1013993.003 ops/s
Iteration  24: 1010894.526 ops/s
Iteration  25: 1014698.855 ops/s
Iteration  26: 1007206.305 ops/s
Iteration  27: 1007934.994 ops/s
Iteration  28: 1004293.224 ops/s
Iteration  29: 1012212.929 ops/s
Iteration  30: 1014318.794 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_clear":
  1011784.658 ±(99.9%) 1594.218 ops/s [Average]
  (min, avg, max) = (1004293.224, 1011784.658, 1014698.855), stdev = 2386.151
  CI (99.9%): [1010190.440, 1013378.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_clear  thrpt   30  1011784.658 ± 1594.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5242818.860 ops/s
# Warmup Iteration   2: 10499415.845 ops/s
# Warmup Iteration   3: 11077990.843 ops/s
# Warmup Iteration   4: 11197281.082 ops/s
# Warmup Iteration   5: 9233909.402 ops/s
# Warmup Iteration   6: 11213034.279 ops/s
# Warmup Iteration   7: 11222351.105 ops/s
# Warmup Iteration   8: 11215680.971 ops/s
# Warmup Iteration   9: 11224792.372 ops/s
# Warmup Iteration  10: 11198687.279 ops/s
# Warmup Iteration  11: 11219868.320 ops/s
# Warmup Iteration  12: 11194051.589 ops/s
# Warmup Iteration  13: 10886287.651 ops/s
# Warmup Iteration  14: 11232117.000 ops/s
# Warmup Iteration  15: 11215347.681 ops/s
# Warmup Iteration  16: 11209536.256 ops/s
# Warmup Iteration  17: 11222213.593 ops/s
# Warmup Iteration  18: 11203976.415 ops/s
# Warmup Iteration  19: 11224504.228 ops/s
# Warmup Iteration  20: 11211364.712 ops/s
# Warmup Iteration  21: 11204777.665 ops/s
# Warmup Iteration  22: 11222263.970 ops/s
# Warmup Iteration  23: 11202533.518 ops/s
# Warmup Iteration  24: 11245116.956 ops/s
# Warmup Iteration  25: 11206526.279 ops/s
# Warmup Iteration  26: 11233361.290 ops/s
# Warmup Iteration  27: 11213136.239 ops/s
# Warmup Iteration  28: 11212908.206 ops/s
# Warmup Iteration  29: 11230412.841 ops/s
# Warmup Iteration  30: 11228309.310 ops/s
Iteration   1: 11223842.622 ops/s
Iteration   2: 11157399.047 ops/s
Iteration   3: 11177991.196 ops/s
Iteration   4: 11197351.741 ops/s
Iteration   5: 11221535.790 ops/s
Iteration   6: 11226117.405 ops/s
Iteration   7: 11218786.741 ops/s
Iteration   8: 11209320.657 ops/s
Iteration   9: 11218935.822 ops/s
Iteration  10: 11243141.013 ops/s
Iteration  11: 11215112.981 ops/s
Iteration  12: 11200965.896 ops/s
Iteration  13: 11233783.661 ops/s
Iteration  14: 11228412.587 ops/s
Iteration  15: 11215868.872 ops/s
Iteration  16: 11233600.286 ops/s
Iteration  17: 11214017.990 ops/s
Iteration  18: 11219753.717 ops/s
Iteration  19: 11175688.102 ops/s
Iteration  20: 11230736.490 ops/s
Iteration  21: 11217575.092 ops/s
Iteration  22: 11162629.617 ops/s
Iteration  23: 11203894.158 ops/s
Iteration  24: 11224114.468 ops/s
Iteration  25: 11164896.041 ops/s
Iteration  26: 11221618.997 ops/s
Iteration  27: 11213300.387 ops/s
Iteration  28: 11206381.741 ops/s
Iteration  29: 11242905.983 ops/s
Iteration  30: 11221806.523 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect":
  11211382.854 ±(99.9%) 15200.005 ops/s [Average]
  (min, avg, max) = (11157399.047, 11211382.854, 11243141.013), stdev = 22750.653
  CI (99.9%): [11196182.850, 11226582.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collect  thrpt   30  11211382.854 ± 15200.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3514043.866 ops/s
# Warmup Iteration   2: 8442370.565 ops/s
# Warmup Iteration   3: 7369539.049 ops/s
# Warmup Iteration   4: 8626512.558 ops/s
# Warmup Iteration   5: 8793186.768 ops/s
# Warmup Iteration   6: 8771104.873 ops/s
# Warmup Iteration   7: 8803908.455 ops/s
# Warmup Iteration   8: 8778391.560 ops/s
# Warmup Iteration   9: 8782023.002 ops/s
# Warmup Iteration  10: 8803831.759 ops/s
# Warmup Iteration  11: 8796091.903 ops/s
# Warmup Iteration  12: 8782983.277 ops/s
# Warmup Iteration  13: 8782782.899 ops/s
# Warmup Iteration  14: 8775821.663 ops/s
# Warmup Iteration  15: 8790578.747 ops/s
# Warmup Iteration  16: 8787078.178 ops/s
# Warmup Iteration  17: 8782744.611 ops/s
# Warmup Iteration  18: 8800216.140 ops/s
# Warmup Iteration  19: 8792540.722 ops/s
# Warmup Iteration  20: 8768957.858 ops/s
# Warmup Iteration  21: 8768606.368 ops/s
# Warmup Iteration  22: 8790115.102 ops/s
# Warmup Iteration  23: 8773363.704 ops/s
# Warmup Iteration  24: 8792150.363 ops/s
# Warmup Iteration  25: 8765325.402 ops/s
# Warmup Iteration  26: 8793508.344 ops/s
# Warmup Iteration  27: 8814690.341 ops/s
# Warmup Iteration  28: 8799391.016 ops/s
# Warmup Iteration  29: 8793181.018 ops/s
# Warmup Iteration  30: 8783004.246 ops/s
Iteration   1: 8763412.996 ops/s
Iteration   2: 8808704.903 ops/s
Iteration   3: 8777753.325 ops/s
Iteration   4: 8780889.599 ops/s
Iteration   5: 8791113.141 ops/s
Iteration   6: 8805427.309 ops/s
Iteration   7: 8812734.901 ops/s
Iteration   8: 8779168.036 ops/s
Iteration   9: 8788093.526 ops/s
Iteration  10: 8800820.107 ops/s
Iteration  11: 8799128.396 ops/s
Iteration  12: 8795660.399 ops/s
Iteration  13: 8799229.768 ops/s
Iteration  14: 8790637.419 ops/s
Iteration  15: 8790814.166 ops/s
Iteration  16: 8794561.485 ops/s
Iteration  17: 8794744.754 ops/s
Iteration  18: 8803619.121 ops/s
Iteration  19: 8796549.394 ops/s
Iteration  20: 8807016.193 ops/s
Iteration  21: 8805101.413 ops/s
Iteration  22: 8792240.166 ops/s
Iteration  23: 8816966.807 ops/s
Iteration  24: 8805220.748 ops/s
Iteration  25: 8785591.674 ops/s
Iteration  26: 8793922.282 ops/s
Iteration  27: 8781521.210 ops/s
Iteration  28: 8799386.473 ops/s
Iteration  29: 8754480.082 ops/s
Iteration  30: 8807817.809 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectBoolean":
  8794077.587 ±(99.9%) 9212.520 ops/s [Average]
  (min, avg, max) = (8754480.082, 8794077.587, 8816966.807), stdev = 13788.867
  CI (99.9%): [8784865.067, 8803290.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectBoolean  thrpt   30  8794077.587 ± 9212.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2894654.808 ops/s
# Warmup Iteration   2: 6142347.556 ops/s
# Warmup Iteration   3: 6704626.385 ops/s
# Warmup Iteration   4: 6737517.537 ops/s
# Warmup Iteration   5: 5579932.082 ops/s
# Warmup Iteration   6: 6736421.661 ops/s
# Warmup Iteration   7: 6739515.028 ops/s
# Warmup Iteration   8: 6730111.207 ops/s
# Warmup Iteration   9: 6696500.811 ops/s
# Warmup Iteration  10: 6739000.940 ops/s
# Warmup Iteration  11: 6736096.022 ops/s
# Warmup Iteration  12: 6736656.199 ops/s
# Warmup Iteration  13: 6745143.568 ops/s
# Warmup Iteration  14: 6733191.740 ops/s
# Warmup Iteration  15: 6743178.247 ops/s
# Warmup Iteration  16: 6737060.428 ops/s
# Warmup Iteration  17: 6735028.569 ops/s
# Warmup Iteration  18: 6723810.834 ops/s
# Warmup Iteration  19: 6706724.057 ops/s
# Warmup Iteration  20: 6734403.185 ops/s
# Warmup Iteration  21: 6729034.134 ops/s
# Warmup Iteration  22: 6743843.953 ops/s
# Warmup Iteration  23: 6738756.186 ops/s
# Warmup Iteration  24: 6731743.997 ops/s
# Warmup Iteration  25: 6717900.319 ops/s
# Warmup Iteration  26: 6718593.760 ops/s
# Warmup Iteration  27: 6731442.819 ops/s
# Warmup Iteration  28: 6742974.529 ops/s
# Warmup Iteration  29: 6739482.764 ops/s
# Warmup Iteration  30: 6739088.399 ops/s
Iteration   1: 6736278.718 ops/s
Iteration   2: 6729288.419 ops/s
Iteration   3: 6721787.632 ops/s
Iteration   4: 6730955.069 ops/s
Iteration   5: 6734548.481 ops/s
Iteration   6: 6728573.715 ops/s
Iteration   7: 6744717.789 ops/s
Iteration   8: 6727668.995 ops/s
Iteration   9: 6733875.426 ops/s
Iteration  10: 6733749.376 ops/s
Iteration  11: 6739917.774 ops/s
Iteration  12: 6727972.747 ops/s
Iteration  13: 6726060.439 ops/s
Iteration  14: 6737436.550 ops/s
Iteration  15: 6745684.769 ops/s
Iteration  16: 6731680.508 ops/s
Iteration  17: 6739315.519 ops/s
Iteration  18: 6738186.681 ops/s
Iteration  19: 6748023.669 ops/s
Iteration  20: 6729672.136 ops/s
Iteration  21: 6735750.962 ops/s
Iteration  22: 6740029.490 ops/s
Iteration  23: 6745524.634 ops/s
Iteration  24: 6734540.993 ops/s
Iteration  25: 6741387.756 ops/s
Iteration  26: 6735967.783 ops/s
Iteration  27: 6751349.486 ops/s
Iteration  28: 6738455.560 ops/s
Iteration  29: 6727198.514 ops/s
Iteration  30: 6726849.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectByte":
  6735414.977 ±(99.9%) 4819.470 ops/s [Average]
  (min, avg, max) = (6721787.632, 6735414.977, 6751349.486), stdev = 7213.557
  CI (99.9%): [6730595.507, 6740234.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectByte  thrpt   30  6735414.977 ± 4819.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2921531.594 ops/s
# Warmup Iteration   2: 6278566.212 ops/s
# Warmup Iteration   3: 6897609.529 ops/s
# Warmup Iteration   4: 6941301.229 ops/s
# Warmup Iteration   5: 5717882.667 ops/s
# Warmup Iteration   6: 6879015.973 ops/s
# Warmup Iteration   7: 6925262.901 ops/s
# Warmup Iteration   8: 6920906.424 ops/s
# Warmup Iteration   9: 6909347.146 ops/s
# Warmup Iteration  10: 6929615.282 ops/s
# Warmup Iteration  11: 6921240.249 ops/s
# Warmup Iteration  12: 6928474.521 ops/s
# Warmup Iteration  13: 6924429.633 ops/s
# Warmup Iteration  14: 6923255.761 ops/s
# Warmup Iteration  15: 6901262.367 ops/s
# Warmup Iteration  16: 6924089.773 ops/s
# Warmup Iteration  17: 6959503.986 ops/s
# Warmup Iteration  18: 6938769.535 ops/s
# Warmup Iteration  19: 6957177.118 ops/s
# Warmup Iteration  20: 6943800.364 ops/s
# Warmup Iteration  21: 6945783.037 ops/s
# Warmup Iteration  22: 6940757.769 ops/s
# Warmup Iteration  23: 6948030.524 ops/s
# Warmup Iteration  24: 6941454.541 ops/s
# Warmup Iteration  25: 6945782.083 ops/s
# Warmup Iteration  26: 6957984.297 ops/s
# Warmup Iteration  27: 6948791.306 ops/s
# Warmup Iteration  28: 6951213.141 ops/s
# Warmup Iteration  29: 6934286.166 ops/s
# Warmup Iteration  30: 6934926.038 ops/s
Iteration   1: 6944387.896 ops/s
Iteration   2: 6929491.282 ops/s
Iteration   3: 6932728.295 ops/s
Iteration   4: 6915867.751 ops/s
Iteration   5: 6922497.200 ops/s
Iteration   6: 6911416.261 ops/s
Iteration   7: 6899928.406 ops/s
Iteration   8: 6912237.986 ops/s
Iteration   9: 6930330.689 ops/s
Iteration  10: 6941022.864 ops/s
Iteration  11: 6941249.061 ops/s
Iteration  12: 6951082.563 ops/s
Iteration  13: 6956651.818 ops/s
Iteration  14: 6937226.249 ops/s
Iteration  15: 6924895.143 ops/s
Iteration  16: 6946946.411 ops/s
Iteration  17: 6951522.548 ops/s
Iteration  18: 6958378.459 ops/s
Iteration  19: 6944811.971 ops/s
Iteration  20: 6945365.672 ops/s
Iteration  21: 6948060.964 ops/s
Iteration  22: 6954863.775 ops/s
Iteration  23: 6932420.472 ops/s
Iteration  24: 6931590.363 ops/s
Iteration  25: 6935092.639 ops/s
Iteration  26: 6940262.072 ops/s
Iteration  27: 6955846.798 ops/s
Iteration  28: 6936259.952 ops/s
Iteration  29: 6946198.745 ops/s
Iteration  30: 6944186.498 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectChar":
  6937427.360 ±(99.9%) 9712.275 ops/s [Average]
  (min, avg, max) = (6899928.406, 6937427.360, 6958378.459), stdev = 14536.877
  CI (99.9%): [6927715.085, 6947139.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectChar  thrpt   30  6937427.360 ± 9712.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2737677.999 ops/s
# Warmup Iteration   2: 6526159.301 ops/s
# Warmup Iteration   3: 6868902.692 ops/s
# Warmup Iteration   4: 5821519.019 ops/s
# Warmup Iteration   5: 6677305.758 ops/s
# Warmup Iteration   6: 6843672.605 ops/s
# Warmup Iteration   7: 6873489.596 ops/s
# Warmup Iteration   8: 6862289.864 ops/s
# Warmup Iteration   9: 6850608.737 ops/s
# Warmup Iteration  10: 6874777.712 ops/s
# Warmup Iteration  11: 6834022.298 ops/s
# Warmup Iteration  12: 6869170.446 ops/s
# Warmup Iteration  13: 6867737.041 ops/s
# Warmup Iteration  14: 6882417.723 ops/s
# Warmup Iteration  15: 6868695.921 ops/s
# Warmup Iteration  16: 6839076.452 ops/s
# Warmup Iteration  17: 6952719.251 ops/s
# Warmup Iteration  18: 6941241.481 ops/s
# Warmup Iteration  19: 6927152.915 ops/s
# Warmup Iteration  20: 6935584.586 ops/s
# Warmup Iteration  21: 6947703.258 ops/s
# Warmup Iteration  22: 6929800.957 ops/s
# Warmup Iteration  23: 6948301.734 ops/s
# Warmup Iteration  24: 6949414.328 ops/s
# Warmup Iteration  25: 6930811.516 ops/s
# Warmup Iteration  26: 6937940.863 ops/s
# Warmup Iteration  27: 6946195.569 ops/s
# Warmup Iteration  28: 6956464.386 ops/s
# Warmup Iteration  29: 6943847.364 ops/s
# Warmup Iteration  30: 6939116.552 ops/s
Iteration   1: 6937216.244 ops/s
Iteration   2: 6964592.001 ops/s
Iteration   3: 6944464.121 ops/s
Iteration   4: 6941426.365 ops/s
Iteration   5: 6924387.962 ops/s
Iteration   6: 6937176.715 ops/s
Iteration   7: 6947971.006 ops/s
Iteration   8: 6930338.108 ops/s
Iteration   9: 6955375.899 ops/s
Iteration  10: 6936418.578 ops/s
Iteration  11: 6937905.687 ops/s
Iteration  12: 6938528.473 ops/s
Iteration  13: 6937679.905 ops/s
Iteration  14: 6910620.339 ops/s
Iteration  15: 6960534.186 ops/s
Iteration  16: 6948443.153 ops/s
Iteration  17: 6934156.867 ops/s
Iteration  18: 6948432.764 ops/s
Iteration  19: 6939641.912 ops/s
Iteration  20: 6931579.553 ops/s
Iteration  21: 6923784.485 ops/s
Iteration  22: 6951675.430 ops/s
Iteration  23: 6946071.189 ops/s
Iteration  24: 6941867.564 ops/s
Iteration  25: 6949706.818 ops/s
Iteration  26: 6938070.327 ops/s
Iteration  27: 6935607.424 ops/s
Iteration  28: 6928702.349 ops/s
Iteration  29: 6956805.415 ops/s
Iteration  30: 6937115.966 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectDouble":
  6940543.227 ±(99.9%) 7650.940 ops/s [Average]
  (min, avg, max) = (6910620.339, 6940543.227, 6964592.001), stdev = 11451.568
  CI (99.9%): [6932892.287, 6948194.167] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectDouble  thrpt   30  6940543.227 ± 7650.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2876275.763 ops/s
# Warmup Iteration   2: 6441130.262 ops/s
# Warmup Iteration   3: 6907354.153 ops/s
# Warmup Iteration   4: 6340119.194 ops/s
# Warmup Iteration   5: 6283567.036 ops/s
# Warmup Iteration   6: 6880659.591 ops/s
# Warmup Iteration   7: 6878631.856 ops/s
# Warmup Iteration   8: 6877968.627 ops/s
# Warmup Iteration   9: 6851295.701 ops/s
# Warmup Iteration  10: 6861147.246 ops/s
# Warmup Iteration  11: 6872796.473 ops/s
# Warmup Iteration  12: 6880108.395 ops/s
# Warmup Iteration  13: 6865974.802 ops/s
# Warmup Iteration  14: 6866784.792 ops/s
# Warmup Iteration  15: 6876778.604 ops/s
# Warmup Iteration  16: 6867221.427 ops/s
# Warmup Iteration  17: 6939425.537 ops/s
# Warmup Iteration  18: 6958382.869 ops/s
# Warmup Iteration  19: 6957147.646 ops/s
# Warmup Iteration  20: 6971389.953 ops/s
# Warmup Iteration  21: 6949007.364 ops/s
# Warmup Iteration  22: 6950491.073 ops/s
# Warmup Iteration  23: 6955488.923 ops/s
# Warmup Iteration  24: 6956522.101 ops/s
# Warmup Iteration  25: 6944034.979 ops/s
# Warmup Iteration  26: 6947464.768 ops/s
# Warmup Iteration  27: 6953595.196 ops/s
# Warmup Iteration  28: 6963404.658 ops/s
# Warmup Iteration  29: 6956369.281 ops/s
# Warmup Iteration  30: 6960946.686 ops/s
Iteration   1: 6968873.655 ops/s
Iteration   2: 6959235.659 ops/s
Iteration   3: 6957136.569 ops/s
Iteration   4: 6961131.031 ops/s
Iteration   5: 6964141.564 ops/s
Iteration   6: 6970284.929 ops/s
Iteration   7: 6958086.958 ops/s
Iteration   8: 6960233.318 ops/s
Iteration   9: 6957183.198 ops/s
Iteration  10: 6968576.518 ops/s
Iteration  11: 6962509.416 ops/s
Iteration  12: 6978434.255 ops/s
Iteration  13: 6957384.655 ops/s
Iteration  14: 6963561.632 ops/s
Iteration  15: 6961955.208 ops/s
Iteration  16: 6946996.004 ops/s
Iteration  17: 6974915.364 ops/s
Iteration  18: 6961218.679 ops/s
Iteration  19: 6954028.815 ops/s
Iteration  20: 6961342.150 ops/s
Iteration  21: 6955841.290 ops/s
Iteration  22: 6964082.697 ops/s
Iteration  23: 6976394.637 ops/s
Iteration  24: 6964713.579 ops/s
Iteration  25: 6938590.775 ops/s
Iteration  26: 6945719.073 ops/s
Iteration  27: 6952354.749 ops/s
Iteration  28: 6967097.062 ops/s
Iteration  29: 6951169.012 ops/s
Iteration  30: 6958528.462 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectFloat":
  6960724.030 ±(99.9%) 5894.651 ops/s [Average]
  (min, avg, max) = (6938590.775, 6960724.030, 6978434.255), stdev = 8822.837
  CI (99.9%): [6954829.379, 6966618.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectFloat  thrpt   30  6960724.030 ± 5894.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4961044.677 ops/s
# Warmup Iteration   2: 10107654.963 ops/s
# Warmup Iteration   3: 10807999.484 ops/s
# Warmup Iteration   4: 10826190.861 ops/s
# Warmup Iteration   5: 8931055.248 ops/s
# Warmup Iteration   6: 10799743.466 ops/s
# Warmup Iteration   7: 10828421.478 ops/s
# Warmup Iteration   8: 10812065.009 ops/s
# Warmup Iteration   9: 10826420.358 ops/s
# Warmup Iteration  10: 10838511.764 ops/s
# Warmup Iteration  11: 10815337.135 ops/s
# Warmup Iteration  12: 10823294.112 ops/s
# Warmup Iteration  13: 10812696.637 ops/s
# Warmup Iteration  14: 10824001.324 ops/s
# Warmup Iteration  15: 10806820.514 ops/s
# Warmup Iteration  16: 10832064.466 ops/s
# Warmup Iteration  17: 10819694.902 ops/s
# Warmup Iteration  18: 10825361.746 ops/s
# Warmup Iteration  19: 10812234.231 ops/s
# Warmup Iteration  20: 10827741.603 ops/s
# Warmup Iteration  21: 10839535.045 ops/s
# Warmup Iteration  22: 10819030.379 ops/s
# Warmup Iteration  23: 10832631.912 ops/s
# Warmup Iteration  24: 10830533.566 ops/s
# Warmup Iteration  25: 10837696.620 ops/s
# Warmup Iteration  26: 10826617.659 ops/s
# Warmup Iteration  27: 10803325.388 ops/s
# Warmup Iteration  28: 10807546.836 ops/s
# Warmup Iteration  29: 10835256.425 ops/s
# Warmup Iteration  30: 10815532.202 ops/s
Iteration   1: 10845136.303 ops/s
Iteration   2: 10815339.748 ops/s
Iteration   3: 10820053.155 ops/s
Iteration   4: 10846302.423 ops/s
Iteration   5: 10828372.730 ops/s
Iteration   6: 10835660.973 ops/s
Iteration   7: 10828105.763 ops/s
Iteration   8: 10838578.136 ops/s
Iteration   9: 10819870.005 ops/s
Iteration  10: 10813812.226 ops/s
Iteration  11: 10821483.515 ops/s
Iteration  12: 10831989.920 ops/s
Iteration  13: 10844417.384 ops/s
Iteration  14: 10788549.792 ops/s
Iteration  15: 10849699.900 ops/s
Iteration  16: 10819932.044 ops/s
Iteration  17: 10824353.561 ops/s
Iteration  18: 10819015.869 ops/s
Iteration  19: 10845034.458 ops/s
Iteration  20: 10846360.385 ops/s
Iteration  21: 10796717.552 ops/s
Iteration  22: 10836140.313 ops/s
Iteration  23: 10841027.991 ops/s
Iteration  24: 10837143.032 ops/s
Iteration  25: 10817496.912 ops/s
Iteration  26: 10837465.127 ops/s
Iteration  27: 10828462.804 ops/s
Iteration  28: 10817004.290 ops/s
Iteration  29: 10814511.757 ops/s
Iteration  30: 10837553.378 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIf":
  10828186.382 ±(99.9%) 9865.390 ops/s [Average]
  (min, avg, max) = (10788549.792, 10828186.382, 10849699.900), stdev = 14766.052
  CI (99.9%): [10818320.992, 10838051.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectIf  thrpt   30  10828186.382 ± 9865.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15742331.372 ops/s
# Warmup Iteration   2: 27712639.657 ops/s
# Warmup Iteration   3: 29920069.206 ops/s
# Warmup Iteration   4: 31526304.856 ops/s
# Warmup Iteration   5: 31599758.977 ops/s
# Warmup Iteration   6: 31420442.297 ops/s
# Warmup Iteration   7: 31455819.119 ops/s
# Warmup Iteration   8: 31483913.718 ops/s
# Warmup Iteration   9: 31429866.698 ops/s
# Warmup Iteration  10: 31536182.585 ops/s
# Warmup Iteration  11: 31429007.411 ops/s
# Warmup Iteration  12: 31316401.149 ops/s
# Warmup Iteration  13: 31700287.091 ops/s
# Warmup Iteration  14: 31687767.436 ops/s
# Warmup Iteration  15: 31464686.975 ops/s
# Warmup Iteration  16: 31411547.982 ops/s
# Warmup Iteration  17: 31218071.477 ops/s
# Warmup Iteration  18: 31412548.838 ops/s
# Warmup Iteration  19: 31346317.675 ops/s
# Warmup Iteration  20: 31477622.709 ops/s
# Warmup Iteration  21: 31106297.183 ops/s
# Warmup Iteration  22: 31410386.458 ops/s
# Warmup Iteration  23: 31424325.288 ops/s
# Warmup Iteration  24: 31127830.141 ops/s
# Warmup Iteration  25: 31332087.443 ops/s
# Warmup Iteration  26: 31404685.381 ops/s
# Warmup Iteration  27: 31501816.083 ops/s
# Warmup Iteration  28: 31167746.110 ops/s
# Warmup Iteration  29: 31421958.292 ops/s
# Warmup Iteration  30: 31547557.001 ops/s
Iteration   1: 31631521.000 ops/s
Iteration   2: 31243616.505 ops/s
Iteration   3: 31133400.072 ops/s
Iteration   4: 31146267.149 ops/s
Iteration   5: 31309861.739 ops/s
Iteration   6: 31506438.502 ops/s
Iteration   7: 30455277.694 ops/s
Iteration   8: 31296613.036 ops/s
Iteration   9: 31297149.791 ops/s
Iteration  10: 31500524.809 ops/s
Iteration  11: 31509736.564 ops/s
Iteration  12: 31498373.636 ops/s
Iteration  13: 31236097.804 ops/s
Iteration  14: 31536086.838 ops/s
Iteration  15: 31119907.775 ops/s
Iteration  16: 31479716.938 ops/s
Iteration  17: 31561196.559 ops/s
Iteration  18: 31514763.526 ops/s
Iteration  19: 31235174.874 ops/s
Iteration  20: 30976043.909 ops/s
Iteration  21: 31287513.495 ops/s
Iteration  22: 31334705.986 ops/s
Iteration  23: 31391517.325 ops/s
Iteration  24: 31360991.117 ops/s
Iteration  25: 31367895.433 ops/s
Iteration  26: 31262503.811 ops/s
Iteration  27: 31452871.347 ops/s
Iteration  28: 31165988.723 ops/s
Iteration  29: 31341434.372 ops/s
Iteration  30: 31359425.516 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectIfWithTarget":
  31317087.195 ±(99.9%) 149376.746 ops/s [Average]
  (min, avg, max) = (30455277.694, 31317087.195, 31631521.000), stdev = 223580.098
  CI (99.9%): [31167710.449, 31466463.941] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  31317087.195 ± 149376.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2846811.990 ops/s
# Warmup Iteration   2: 6624775.560 ops/s
# Warmup Iteration   3: 6886022.887 ops/s
# Warmup Iteration   4: 6263014.648 ops/s
# Warmup Iteration   5: 6351937.832 ops/s
# Warmup Iteration   6: 6911881.958 ops/s
# Warmup Iteration   7: 6923882.069 ops/s
# Warmup Iteration   8: 6900720.059 ops/s
# Warmup Iteration   9: 6922639.779 ops/s
# Warmup Iteration  10: 6903753.435 ops/s
# Warmup Iteration  11: 6908075.843 ops/s
# Warmup Iteration  12: 6913120.695 ops/s
# Warmup Iteration  13: 6897933.129 ops/s
# Warmup Iteration  14: 6907999.422 ops/s
# Warmup Iteration  15: 6919404.064 ops/s
# Warmup Iteration  16: 6896071.454 ops/s
# Warmup Iteration  17: 7018403.533 ops/s
# Warmup Iteration  18: 7010552.670 ops/s
# Warmup Iteration  19: 7024206.156 ops/s
# Warmup Iteration  20: 7023203.606 ops/s
# Warmup Iteration  21: 6999429.267 ops/s
# Warmup Iteration  22: 7012518.374 ops/s
# Warmup Iteration  23: 7025561.799 ops/s
# Warmup Iteration  24: 7007583.709 ops/s
# Warmup Iteration  25: 7010850.626 ops/s
# Warmup Iteration  26: 7006569.098 ops/s
# Warmup Iteration  27: 7002365.058 ops/s
# Warmup Iteration  28: 7019915.773 ops/s
# Warmup Iteration  29: 7028107.405 ops/s
# Warmup Iteration  30: 7010499.108 ops/s
Iteration   1: 6926338.475 ops/s
Iteration   2: 7012124.294 ops/s
Iteration   3: 7032153.539 ops/s
Iteration   4: 7009632.568 ops/s
Iteration   5: 7008461.619 ops/s
Iteration   6: 6984099.554 ops/s
Iteration   7: 6998269.024 ops/s
Iteration   8: 7030722.910 ops/s
Iteration   9: 7022163.336 ops/s
Iteration  10: 7018787.399 ops/s
Iteration  11: 7018160.290 ops/s
Iteration  12: 7007394.511 ops/s
Iteration  13: 7014324.590 ops/s
Iteration  14: 7017517.871 ops/s
Iteration  15: 7020190.241 ops/s
Iteration  16: 7004129.267 ops/s
Iteration  17: 7013677.979 ops/s
Iteration  18: 7011025.114 ops/s
Iteration  19: 7023112.756 ops/s
Iteration  20: 7027384.601 ops/s
Iteration  21: 7017173.245 ops/s
Iteration  22: 7019909.554 ops/s
Iteration  23: 6933547.520 ops/s
Iteration  24: 6992142.159 ops/s
Iteration  25: 7009533.022 ops/s
Iteration  26: 6990838.119 ops/s
Iteration  27: 7029211.751 ops/s
Iteration  28: 7017242.553 ops/s
Iteration  29: 7011276.788 ops/s
Iteration  30: 7010136.431 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectInt":
  7007689.369 ±(99.9%) 16023.046 ops/s [Average]
  (min, avg, max) = (6926338.475, 7007689.369, 7032153.539), stdev = 23982.543
  CI (99.9%): [6991666.323, 7023712.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectInt  thrpt   30  7007689.369 ± 16023.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2796274.045 ops/s
# Warmup Iteration   2: 6639756.675 ops/s
# Warmup Iteration   3: 6941266.995 ops/s
# Warmup Iteration   4: 5743389.196 ops/s
# Warmup Iteration   5: 6958151.079 ops/s
# Warmup Iteration   6: 6951261.931 ops/s
# Warmup Iteration   7: 6934787.957 ops/s
# Warmup Iteration   8: 6943582.935 ops/s
# Warmup Iteration   9: 6947311.449 ops/s
# Warmup Iteration  10: 6886734.910 ops/s
# Warmup Iteration  11: 6952271.563 ops/s
# Warmup Iteration  12: 6954176.490 ops/s
# Warmup Iteration  13: 6949967.222 ops/s
# Warmup Iteration  14: 6943049.341 ops/s
# Warmup Iteration  15: 6960235.478 ops/s
# Warmup Iteration  16: 6955702.924 ops/s
# Warmup Iteration  17: 7007717.320 ops/s
# Warmup Iteration  18: 7024918.388 ops/s
# Warmup Iteration  19: 7019056.261 ops/s
# Warmup Iteration  20: 7011505.867 ops/s
# Warmup Iteration  21: 7016047.583 ops/s
# Warmup Iteration  22: 7023517.573 ops/s
# Warmup Iteration  23: 7024319.629 ops/s
# Warmup Iteration  24: 6970142.853 ops/s
# Warmup Iteration  25: 6997138.081 ops/s
# Warmup Iteration  26: 7014887.846 ops/s
# Warmup Iteration  27: 7010934.881 ops/s
# Warmup Iteration  28: 7004490.997 ops/s
# Warmup Iteration  29: 7015854.279 ops/s
# Warmup Iteration  30: 7006245.421 ops/s
Iteration   1: 7024454.198 ops/s
Iteration   2: 7017087.939 ops/s
Iteration   3: 7014481.829 ops/s
Iteration   4: 7027530.029 ops/s
Iteration   5: 7036746.451 ops/s
Iteration   6: 7023967.276 ops/s
Iteration   7: 7011502.863 ops/s
Iteration   8: 7012563.043 ops/s
Iteration   9: 7010382.261 ops/s
Iteration  10: 7000936.473 ops/s
Iteration  11: 7014324.934 ops/s
Iteration  12: 7015897.223 ops/s
Iteration  13: 7026801.731 ops/s
Iteration  14: 7052693.328 ops/s
Iteration  15: 7015873.702 ops/s
Iteration  16: 7016709.354 ops/s
Iteration  17: 7016934.463 ops/s
Iteration  18: 6937733.735 ops/s
Iteration  19: 7019214.296 ops/s
Iteration  20: 7020128.238 ops/s
Iteration  21: 7028790.692 ops/s
Iteration  22: 7023565.164 ops/s
Iteration  23: 7016809.491 ops/s
Iteration  24: 7012273.853 ops/s
Iteration  25: 7015327.748 ops/s
Iteration  26: 7006575.612 ops/s
Iteration  27: 7030150.063 ops/s
Iteration  28: 7019400.411 ops/s
Iteration  29: 6986454.754 ops/s
Iteration  30: 7018868.575 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectLong":
  7015805.991 ±(99.9%) 12424.536 ops/s [Average]
  (min, avg, max) = (6937733.735, 7015805.991, 7052693.328), stdev = 18596.461
  CI (99.9%): [7003381.455, 7028230.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectLong  thrpt   30  7015805.991 ± 12424.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2847464.751 ops/s
# Warmup Iteration   2: 5977597.410 ops/s
# Warmup Iteration   3: 6671476.070 ops/s
# Warmup Iteration   4: 6669398.579 ops/s
# Warmup Iteration   5: 5519730.471 ops/s
# Warmup Iteration   6: 6677671.817 ops/s
# Warmup Iteration   7: 6690416.886 ops/s
# Warmup Iteration   8: 6674971.820 ops/s
# Warmup Iteration   9: 6688313.429 ops/s
# Warmup Iteration  10: 6694074.891 ops/s
# Warmup Iteration  11: 6655727.760 ops/s
# Warmup Iteration  12: 6687371.835 ops/s
# Warmup Iteration  13: 6702684.262 ops/s
# Warmup Iteration  14: 6689165.640 ops/s
# Warmup Iteration  15: 6686903.751 ops/s
# Warmup Iteration  16: 6681191.153 ops/s
# Warmup Iteration  17: 6696192.285 ops/s
# Warmup Iteration  18: 6689780.646 ops/s
# Warmup Iteration  19: 6700196.400 ops/s
# Warmup Iteration  20: 6685080.314 ops/s
# Warmup Iteration  21: 6690213.490 ops/s
# Warmup Iteration  22: 6683588.186 ops/s
# Warmup Iteration  23: 6693945.803 ops/s
# Warmup Iteration  24: 6676573.635 ops/s
# Warmup Iteration  25: 6692728.529 ops/s
# Warmup Iteration  26: 6684038.707 ops/s
# Warmup Iteration  27: 6683583.262 ops/s
# Warmup Iteration  28: 6687933.338 ops/s
# Warmup Iteration  29: 6692666.266 ops/s
# Warmup Iteration  30: 6687611.211 ops/s
Iteration   1: 6697277.850 ops/s
Iteration   2: 6665671.971 ops/s
Iteration   3: 6663120.649 ops/s
Iteration   4: 6668563.854 ops/s
Iteration   5: 6675244.646 ops/s
Iteration   6: 6676010.728 ops/s
Iteration   7: 6668577.815 ops/s
Iteration   8: 6683314.725 ops/s
Iteration   9: 6690301.946 ops/s
Iteration  10: 6692414.326 ops/s
Iteration  11: 6682263.184 ops/s
Iteration  12: 6690251.564 ops/s
Iteration  13: 6709696.116 ops/s
Iteration  14: 6689270.685 ops/s
Iteration  15: 6684099.675 ops/s
Iteration  16: 6684345.781 ops/s
Iteration  17: 6702746.035 ops/s
Iteration  18: 6684943.699 ops/s
Iteration  19: 6692204.155 ops/s
Iteration  20: 6691224.219 ops/s
Iteration  21: 6695524.042 ops/s
Iteration  22: 6689396.570 ops/s
Iteration  23: 6683293.843 ops/s
Iteration  24: 6686374.519 ops/s
Iteration  25: 6696903.733 ops/s
Iteration  26: 6696447.118 ops/s
Iteration  27: 6677943.270 ops/s
Iteration  28: 6660688.684 ops/s
Iteration  29: 6693007.961 ops/s
Iteration  30: 6658045.798 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectShort":
  6684305.639 ±(99.9%) 8504.971 ops/s [Average]
  (min, avg, max) = (6658045.798, 6684305.639, 6709696.116), stdev = 12729.842
  CI (99.9%): [6675800.667, 6692810.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectShort  thrpt   30  6684305.639 ± 8504.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1746339.614 ops/s
# Warmup Iteration   2: 4025156.271 ops/s
# Warmup Iteration   3: 3298141.227 ops/s
# Warmup Iteration   4: 3923465.485 ops/s
# Warmup Iteration   5: 3923888.155 ops/s
# Warmup Iteration   6: 3931402.117 ops/s
# Warmup Iteration   7: 3922712.834 ops/s
# Warmup Iteration   8: 3892906.313 ops/s
# Warmup Iteration   9: 3904473.522 ops/s
# Warmup Iteration  10: 3922244.604 ops/s
# Warmup Iteration  11: 3921804.833 ops/s
# Warmup Iteration  12: 3931080.206 ops/s
# Warmup Iteration  13: 3915611.476 ops/s
# Warmup Iteration  14: 3928723.135 ops/s
# Warmup Iteration  15: 3915444.595 ops/s
# Warmup Iteration  16: 3924724.737 ops/s
# Warmup Iteration  17: 3923676.349 ops/s
# Warmup Iteration  18: 3920486.568 ops/s
# Warmup Iteration  19: 3919798.156 ops/s
# Warmup Iteration  20: 3935019.989 ops/s
# Warmup Iteration  21: 3926100.786 ops/s
# Warmup Iteration  22: 3935768.075 ops/s
# Warmup Iteration  23: 3929796.419 ops/s
# Warmup Iteration  24: 3929540.098 ops/s
# Warmup Iteration  25: 3918450.620 ops/s
# Warmup Iteration  26: 3925385.180 ops/s
# Warmup Iteration  27: 3896472.845 ops/s
# Warmup Iteration  28: 3922725.011 ops/s
# Warmup Iteration  29: 3930337.898 ops/s
# Warmup Iteration  30: 3926587.662 ops/s
Iteration   1: 3911773.106 ops/s
Iteration   2: 3933778.893 ops/s
Iteration   3: 3931940.873 ops/s
Iteration   4: 3940191.157 ops/s
Iteration   5: 3929480.293 ops/s
Iteration   6: 3925697.153 ops/s
Iteration   7: 3916296.348 ops/s
Iteration   8: 3933191.751 ops/s
Iteration   9: 3924486.896 ops/s
Iteration  10: 3912482.106 ops/s
Iteration  11: 3935431.092 ops/s
Iteration  12: 3929912.875 ops/s
Iteration  13: 3904194.931 ops/s
Iteration  14: 3892612.445 ops/s
Iteration  15: 3923778.651 ops/s
Iteration  16: 3936913.928 ops/s
Iteration  17: 3928290.580 ops/s
Iteration  18: 3923958.554 ops/s
Iteration  19: 3912881.091 ops/s
Iteration  20: 3910506.739 ops/s
Iteration  21: 3901418.500 ops/s
Iteration  22: 3905074.762 ops/s
Iteration  23: 3912425.893 ops/s
Iteration  24: 3935002.099 ops/s
Iteration  25: 3923937.254 ops/s
Iteration  26: 3927759.395 ops/s
Iteration  27: 3933922.658 ops/s
Iteration  28: 3940208.494 ops/s
Iteration  29: 3923285.656 ops/s
Iteration  30: 3935869.854 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith":
  3923223.468 ±(99.9%) 8355.493 ops/s [Average]
  (min, avg, max) = (3892612.445, 3923223.468, 3940208.494), stdev = 12506.110
  CI (99.9%): [3914867.974, 3931578.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectWith  thrpt   30  3923223.468 ± 8355.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3192826.154 ops/s
# Warmup Iteration   2: 8081776.751 ops/s
# Warmup Iteration   3: 6876531.594 ops/s
# Warmup Iteration   4: 8193943.830 ops/s
# Warmup Iteration   5: 8208650.444 ops/s
# Warmup Iteration   6: 8196793.478 ops/s
# Warmup Iteration   7: 8209454.061 ops/s
# Warmup Iteration   8: 8202534.241 ops/s
# Warmup Iteration   9: 8180596.293 ops/s
# Warmup Iteration  10: 8211351.965 ops/s
# Warmup Iteration  11: 8223900.094 ops/s
# Warmup Iteration  12: 8212408.421 ops/s
# Warmup Iteration  13: 8204640.330 ops/s
# Warmup Iteration  14: 8212281.413 ops/s
# Warmup Iteration  15: 8222614.968 ops/s
# Warmup Iteration  16: 8208835.447 ops/s
# Warmup Iteration  17: 8202232.532 ops/s
# Warmup Iteration  18: 8221664.322 ops/s
# Warmup Iteration  19: 8217663.317 ops/s
# Warmup Iteration  20: 8203412.530 ops/s
# Warmup Iteration  21: 8204646.095 ops/s
# Warmup Iteration  22: 8203544.638 ops/s
# Warmup Iteration  23: 8195694.560 ops/s
# Warmup Iteration  24: 8203341.812 ops/s
# Warmup Iteration  25: 8131521.187 ops/s
# Warmup Iteration  26: 8214609.909 ops/s
# Warmup Iteration  27: 8197704.788 ops/s
# Warmup Iteration  28: 8200718.549 ops/s
# Warmup Iteration  29: 8186956.231 ops/s
# Warmup Iteration  30: 8208108.981 ops/s
Iteration   1: 8184217.776 ops/s
Iteration   2: 8184583.434 ops/s
Iteration   3: 8176763.014 ops/s
Iteration   4: 8189846.391 ops/s
Iteration   5: 8233064.929 ops/s
Iteration   6: 8201011.148 ops/s
Iteration   7: 8157834.995 ops/s
Iteration   8: 8191482.802 ops/s
Iteration   9: 8214069.304 ops/s
Iteration  10: 8208106.822 ops/s
Iteration  11: 8212081.461 ops/s
Iteration  12: 8209617.199 ops/s
Iteration  13: 8204551.686 ops/s
Iteration  14: 8208485.365 ops/s
Iteration  15: 8168544.422 ops/s
Iteration  16: 8213851.378 ops/s
Iteration  17: 8218089.739 ops/s
Iteration  18: 8205754.779 ops/s
Iteration  19: 8157094.448 ops/s
Iteration  20: 8192510.457 ops/s
Iteration  21: 8221997.230 ops/s
Iteration  22: 8221993.248 ops/s
Iteration  23: 8220949.025 ops/s
Iteration  24: 8195642.717 ops/s
Iteration  25: 8186074.817 ops/s
Iteration  26: 8205088.862 ops/s
Iteration  27: 8191397.529 ops/s
Iteration  28: 8193622.790 ops/s
Iteration  29: 8240913.691 ops/s
Iteration  30: 8197439.004 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndex":
  8200222.682 ±(99.9%) 13331.663 ops/s [Average]
  (min, avg, max) = (8157094.448, 8200222.682, 8240913.691), stdev = 19954.206
  CI (99.9%): [8186891.019, 8213554.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  8200222.682 ± 13331.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696643.443 ops/s
# Warmup Iteration   2: 1777273.073 ops/s
# Warmup Iteration   3: 1899827.057 ops/s
# Warmup Iteration   4: 1571474.731 ops/s
# Warmup Iteration   5: 1895461.075 ops/s
# Warmup Iteration   6: 1894133.521 ops/s
# Warmup Iteration   7: 1896980.028 ops/s
# Warmup Iteration   8: 1887649.940 ops/s
# Warmup Iteration   9: 1898176.101 ops/s
# Warmup Iteration  10: 1895135.319 ops/s
# Warmup Iteration  11: 1894912.789 ops/s
# Warmup Iteration  12: 1896577.438 ops/s
# Warmup Iteration  13: 1898471.617 ops/s
# Warmup Iteration  14: 1897311.128 ops/s
# Warmup Iteration  15: 1896221.568 ops/s
# Warmup Iteration  16: 1896132.255 ops/s
# Warmup Iteration  17: 1892300.240 ops/s
# Warmup Iteration  18: 1896995.580 ops/s
# Warmup Iteration  19: 1895123.141 ops/s
# Warmup Iteration  20: 1895864.351 ops/s
# Warmup Iteration  21: 1894786.462 ops/s
# Warmup Iteration  22: 1895071.926 ops/s
# Warmup Iteration  23: 1894355.185 ops/s
# Warmup Iteration  24: 1892456.739 ops/s
# Warmup Iteration  25: 1887790.763 ops/s
# Warmup Iteration  26: 1892000.729 ops/s
# Warmup Iteration  27: 1894436.564 ops/s
# Warmup Iteration  28: 1888794.170 ops/s
# Warmup Iteration  29: 1890570.279 ops/s
# Warmup Iteration  30: 1883679.423 ops/s
Iteration   1: 1878440.892 ops/s
Iteration   2: 1889267.907 ops/s
Iteration   3: 1896189.557 ops/s
Iteration   4: 1895642.754 ops/s
Iteration   5: 1896063.724 ops/s
Iteration   6: 1893650.531 ops/s
Iteration   7: 1897554.055 ops/s
Iteration   8: 1901710.471 ops/s
Iteration   9: 1891230.165 ops/s
Iteration  10: 1888937.679 ops/s
Iteration  11: 1894263.805 ops/s
Iteration  12: 1895515.487 ops/s
Iteration  13: 1895374.399 ops/s
Iteration  14: 1894078.456 ops/s
Iteration  15: 1893716.068 ops/s
Iteration  16: 1895982.560 ops/s
Iteration  17: 1890106.088 ops/s
Iteration  18: 1889749.767 ops/s
Iteration  19: 1894292.536 ops/s
Iteration  20: 1892520.357 ops/s
Iteration  21: 1893990.822 ops/s
Iteration  22: 1901805.862 ops/s
Iteration  23: 1896478.660 ops/s
Iteration  24: 1899403.141 ops/s
Iteration  25: 1901789.626 ops/s
Iteration  26: 1893209.593 ops/s
Iteration  27: 1898047.254 ops/s
Iteration  28: 1896251.688 ops/s
Iteration  29: 1895064.674 ops/s
Iteration  30: 1894024.344 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1894478.431 ±(99.9%) 3035.926 ops/s [Average]
  (min, avg, max) = (1878440.892, 1894478.431, 1901805.862), stdev = 4544.032
  CI (99.9%): [1891442.504, 1897514.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1894478.431 ± 3035.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2094215.778 ops/s
# Warmup Iteration   2: 4791273.630 ops/s
# Warmup Iteration   3: 4084514.610 ops/s
# Warmup Iteration   4: 4820791.096 ops/s
# Warmup Iteration   5: 4843117.882 ops/s
# Warmup Iteration   6: 4844261.497 ops/s
# Warmup Iteration   7: 4845765.589 ops/s
# Warmup Iteration   8: 4840406.535 ops/s
# Warmup Iteration   9: 4838802.373 ops/s
# Warmup Iteration  10: 4851342.936 ops/s
# Warmup Iteration  11: 4830640.020 ops/s
# Warmup Iteration  12: 4844884.415 ops/s
# Warmup Iteration  13: 4847105.703 ops/s
# Warmup Iteration  14: 4840338.658 ops/s
# Warmup Iteration  15: 4839072.777 ops/s
# Warmup Iteration  16: 4840936.496 ops/s
# Warmup Iteration  17: 4851496.452 ops/s
# Warmup Iteration  18: 4840794.773 ops/s
# Warmup Iteration  19: 4844217.280 ops/s
# Warmup Iteration  20: 4863563.703 ops/s
# Warmup Iteration  21: 4862697.796 ops/s
# Warmup Iteration  22: 4850489.904 ops/s
# Warmup Iteration  23: 4841832.140 ops/s
# Warmup Iteration  24: 4855898.503 ops/s
# Warmup Iteration  25: 4854928.715 ops/s
# Warmup Iteration  26: 4857885.334 ops/s
# Warmup Iteration  27: 4852356.675 ops/s
# Warmup Iteration  28: 4834412.986 ops/s
# Warmup Iteration  29: 4840802.471 ops/s
# Warmup Iteration  30: 4861330.731 ops/s
Iteration   1: 4869749.812 ops/s
Iteration   2: 4869910.645 ops/s
Iteration   3: 4860192.448 ops/s
Iteration   4: 4856503.004 ops/s
Iteration   5: 4873499.591 ops/s
Iteration   6: 4862642.787 ops/s
Iteration   7: 4846544.710 ops/s
Iteration   8: 4865090.561 ops/s
Iteration   9: 4858020.898 ops/s
Iteration  10: 4853150.147 ops/s
Iteration  11: 4849158.921 ops/s
Iteration  12: 4861020.265 ops/s
Iteration  13: 4861609.405 ops/s
Iteration  14: 4863882.676 ops/s
Iteration  15: 4854305.735 ops/s
Iteration  16: 4856717.314 ops/s
Iteration  17: 4840771.818 ops/s
Iteration  18: 4862253.281 ops/s
Iteration  19: 4862002.065 ops/s
Iteration  20: 4857123.669 ops/s
Iteration  21: 4846591.420 ops/s
Iteration  22: 4863802.668 ops/s
Iteration  23: 4859589.967 ops/s
Iteration  24: 4860880.065 ops/s
Iteration  25: 4864145.848 ops/s
Iteration  26: 4864044.823 ops/s
Iteration  27: 4863143.546 ops/s
Iteration  28: 4851163.584 ops/s
Iteration  29: 4869442.035 ops/s
Iteration  30: 4864688.249 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collectWith_target":
  4859721.399 ±(99.9%) 5031.296 ops/s [Average]
  (min, avg, max) = (4840771.818, 4859721.399, 4873499.591), stdev = 7530.608
  CI (99.9%): [4854690.102, 4864752.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collectWith_target  thrpt   30  4859721.399 ± 5031.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4129156.512 ops/s
# Warmup Iteration   2: 8349837.359 ops/s
# Warmup Iteration   3: 7174738.804 ops/s
# Warmup Iteration   4: 8476726.063 ops/s
# Warmup Iteration   5: 8466037.134 ops/s
# Warmup Iteration   6: 8467157.547 ops/s
# Warmup Iteration   7: 8441442.114 ops/s
# Warmup Iteration   8: 8439511.005 ops/s
# Warmup Iteration   9: 8430256.569 ops/s
# Warmup Iteration  10: 8474820.930 ops/s
# Warmup Iteration  11: 8459859.828 ops/s
# Warmup Iteration  12: 8472312.025 ops/s
# Warmup Iteration  13: 8449263.354 ops/s
# Warmup Iteration  14: 8423604.147 ops/s
# Warmup Iteration  15: 8455686.637 ops/s
# Warmup Iteration  16: 8433391.921 ops/s
# Warmup Iteration  17: 8459319.470 ops/s
# Warmup Iteration  18: 8463595.775 ops/s
# Warmup Iteration  19: 8468226.847 ops/s
# Warmup Iteration  20: 8445334.575 ops/s
# Warmup Iteration  21: 8494758.366 ops/s
# Warmup Iteration  22: 8453642.424 ops/s
# Warmup Iteration  23: 8452955.516 ops/s
# Warmup Iteration  24: 8446944.045 ops/s
# Warmup Iteration  25: 8453174.677 ops/s
# Warmup Iteration  26: 8456810.067 ops/s
# Warmup Iteration  27: 8477803.200 ops/s
# Warmup Iteration  28: 8508524.818 ops/s
# Warmup Iteration  29: 8469105.666 ops/s
# Warmup Iteration  30: 8451431.444 ops/s
Iteration   1: 8466393.953 ops/s
Iteration   2: 8448400.870 ops/s
Iteration   3: 8440642.176 ops/s
Iteration   4: 8458667.850 ops/s
Iteration   5: 8423262.995 ops/s
Iteration   6: 8438860.647 ops/s
Iteration   7: 8455424.766 ops/s
Iteration   8: 8461270.571 ops/s
Iteration   9: 8483074.856 ops/s
Iteration  10: 8491621.928 ops/s
Iteration  11: 8447325.029 ops/s
Iteration  12: 8458437.569 ops/s
Iteration  13: 8519247.417 ops/s
Iteration  14: 8511344.760 ops/s
Iteration  15: 8451903.925 ops/s
Iteration  16: 8500820.937 ops/s
Iteration  17: 8508671.005 ops/s
Iteration  18: 8463590.579 ops/s
Iteration  19: 8468414.293 ops/s
Iteration  20: 8450597.690 ops/s
Iteration  21: 8440427.550 ops/s
Iteration  22: 8458271.994 ops/s
Iteration  23: 8448270.519 ops/s
Iteration  24: 8441980.673 ops/s
Iteration  25: 8451338.710 ops/s
Iteration  26: 8457957.689 ops/s
Iteration  27: 8469321.206 ops/s
Iteration  28: 8478434.366 ops/s
Iteration  29: 8511873.691 ops/s
Iteration  30: 8442529.916 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_collect_target":
  8464946.004 ±(99.9%) 16692.349 ops/s [Average]
  (min, avg, max) = (8423262.995, 8464946.004, 8519247.417), stdev = 24984.325
  CI (99.9%): [8448253.655, 8481638.354] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_collect_target  thrpt   30  8464946.004 ± 16692.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16364912.138 ops/s
# Warmup Iteration   2: 33223871.421 ops/s
# Warmup Iteration   3: 30998279.752 ops/s
# Warmup Iteration   4: 35446354.334 ops/s
# Warmup Iteration   5: 36139461.807 ops/s
# Warmup Iteration   6: 36099434.742 ops/s
# Warmup Iteration   7: 36110516.385 ops/s
# Warmup Iteration   8: 36062961.789 ops/s
# Warmup Iteration   9: 36107809.907 ops/s
# Warmup Iteration  10: 36099796.757 ops/s
# Warmup Iteration  11: 36039641.394 ops/s
# Warmup Iteration  12: 36053857.677 ops/s
# Warmup Iteration  13: 36098999.141 ops/s
# Warmup Iteration  14: 36055418.862 ops/s
# Warmup Iteration  15: 35997717.713 ops/s
# Warmup Iteration  16: 36087475.335 ops/s
# Warmup Iteration  17: 36054494.970 ops/s
# Warmup Iteration  18: 36018180.757 ops/s
# Warmup Iteration  19: 36135576.050 ops/s
# Warmup Iteration  20: 36053819.740 ops/s
# Warmup Iteration  21: 36033144.199 ops/s
# Warmup Iteration  22: 36065169.950 ops/s
# Warmup Iteration  23: 36101236.640 ops/s
# Warmup Iteration  24: 36112600.803 ops/s
# Warmup Iteration  25: 36156409.344 ops/s
# Warmup Iteration  26: 36140478.521 ops/s
# Warmup Iteration  27: 36080169.343 ops/s
# Warmup Iteration  28: 36113417.429 ops/s
# Warmup Iteration  29: 36082122.634 ops/s
# Warmup Iteration  30: 36102597.524 ops/s
Iteration   1: 36148699.135 ops/s
Iteration   2: 36162792.675 ops/s
Iteration   3: 36062654.151 ops/s
Iteration   4: 36124942.801 ops/s
Iteration   5: 36149552.278 ops/s
Iteration   6: 36151154.184 ops/s
Iteration   7: 36167231.092 ops/s
Iteration   8: 36046424.222 ops/s
Iteration   9: 36088121.874 ops/s
Iteration  10: 36170147.613 ops/s
Iteration  11: 36168156.959 ops/s
Iteration  12: 36162305.577 ops/s
Iteration  13: 36032943.823 ops/s
Iteration  14: 36153661.787 ops/s
Iteration  15: 36159325.124 ops/s
Iteration  16: 36145068.820 ops/s
Iteration  17: 36091982.409 ops/s
Iteration  18: 36074342.469 ops/s
Iteration  19: 36109978.313 ops/s
Iteration  20: 36091833.728 ops/s
Iteration  21: 36112521.538 ops/s
Iteration  22: 36129429.062 ops/s
Iteration  23: 36061646.991 ops/s
Iteration  24: 36093528.180 ops/s
Iteration  25: 36114982.897 ops/s
Iteration  26: 36152894.072 ops/s
Iteration  27: 36034324.316 ops/s
Iteration  28: 36094692.500 ops/s
Iteration  29: 36060833.909 ops/s
Iteration  30: 36075150.015 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_contains":
  36113044.084 ±(99.9%) 29134.309 ops/s [Average]
  (min, avg, max) = (36032943.823, 36113044.084, 36170147.613), stdev = 43606.865
  CI (99.9%): [36083909.775, 36142178.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_contains  thrpt   30  36113044.084 ± 29134.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9745370.689 ops/s
# Warmup Iteration   2: 20248276.016 ops/s
# Warmup Iteration   3: 17833541.735 ops/s
# Warmup Iteration   4: 20869368.258 ops/s
# Warmup Iteration   5: 20901756.658 ops/s
# Warmup Iteration   6: 20877357.054 ops/s
# Warmup Iteration   7: 20868540.402 ops/s
# Warmup Iteration   8: 20786425.801 ops/s
# Warmup Iteration   9: 20910128.631 ops/s
# Warmup Iteration  10: 20890653.801 ops/s
# Warmup Iteration  11: 20942837.139 ops/s
# Warmup Iteration  12: 20882991.904 ops/s
# Warmup Iteration  13: 20883866.957 ops/s
# Warmup Iteration  14: 20910320.209 ops/s
# Warmup Iteration  15: 20909762.838 ops/s
# Warmup Iteration  16: 20846875.062 ops/s
# Warmup Iteration  17: 20866042.746 ops/s
# Warmup Iteration  18: 20897042.064 ops/s
# Warmup Iteration  19: 20880183.478 ops/s
# Warmup Iteration  20: 20742168.494 ops/s
# Warmup Iteration  21: 20856504.389 ops/s
# Warmup Iteration  22: 20919827.089 ops/s
# Warmup Iteration  23: 20899796.401 ops/s
# Warmup Iteration  24: 20971227.682 ops/s
# Warmup Iteration  25: 20884403.038 ops/s
# Warmup Iteration  26: 20972688.670 ops/s
# Warmup Iteration  27: 20812397.605 ops/s
# Warmup Iteration  28: 20940415.754 ops/s
# Warmup Iteration  29: 20961534.189 ops/s
# Warmup Iteration  30: 20834020.391 ops/s
Iteration   1: 20938598.506 ops/s
Iteration   2: 20845492.405 ops/s
Iteration   3: 20883617.914 ops/s
Iteration   4: 20903601.592 ops/s
Iteration   5: 20902557.992 ops/s
Iteration   6: 20889750.070 ops/s
Iteration   7: 20876770.315 ops/s
Iteration   8: 20915925.640 ops/s
Iteration   9: 21005399.062 ops/s
Iteration  10: 20909347.627 ops/s
Iteration  11: 20762382.685 ops/s
Iteration  12: 20898349.685 ops/s
Iteration  13: 20734710.311 ops/s
Iteration  14: 20836650.652 ops/s
Iteration  15: 20906518.106 ops/s
Iteration  16: 20910698.218 ops/s
Iteration  17: 20786629.159 ops/s
Iteration  18: 20906703.464 ops/s
Iteration  19: 20806969.686 ops/s
Iteration  20: 20779223.926 ops/s
Iteration  21: 20922943.532 ops/s
Iteration  22: 20863948.600 ops/s
Iteration  23: 20854665.757 ops/s
Iteration  24: 20958314.814 ops/s
Iteration  25: 20879743.097 ops/s
Iteration  26: 20869488.956 ops/s
Iteration  27: 20898306.084 ops/s
Iteration  28: 20983359.160 ops/s
Iteration  29: 20946732.626 ops/s
Iteration  30: 20927264.193 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAll":
  20883488.794 ±(99.9%) 41841.214 ops/s [Average]
  (min, avg, max) = (20734710.311, 20883488.794, 21005399.062), stdev = 62625.964
  CI (99.9%): [20841647.581, 20925330.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_containsAll  thrpt   30  20883488.794 ± 41841.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8768165.269 ops/s
# Warmup Iteration   2: 17417097.025 ops/s
# Warmup Iteration   3: 16478648.724 ops/s
# Warmup Iteration   4: 19545455.346 ops/s
# Warmup Iteration   5: 19502129.026 ops/s
# Warmup Iteration   6: 19541650.885 ops/s
# Warmup Iteration   7: 19523471.479 ops/s
# Warmup Iteration   8: 19542782.070 ops/s
# Warmup Iteration   9: 19509654.825 ops/s
# Warmup Iteration  10: 19478360.780 ops/s
# Warmup Iteration  11: 19510417.716 ops/s
# Warmup Iteration  12: 19527068.707 ops/s
# Warmup Iteration  13: 19532773.822 ops/s
# Warmup Iteration  14: 19574081.894 ops/s
# Warmup Iteration  15: 19510705.895 ops/s
# Warmup Iteration  16: 19497061.771 ops/s
# Warmup Iteration  17: 19547675.559 ops/s
# Warmup Iteration  18: 19532452.506 ops/s
# Warmup Iteration  19: 19555964.453 ops/s
# Warmup Iteration  20: 19549573.799 ops/s
# Warmup Iteration  21: 19559146.135 ops/s
# Warmup Iteration  22: 19530978.821 ops/s
# Warmup Iteration  23: 19516051.635 ops/s
# Warmup Iteration  24: 19535259.099 ops/s
# Warmup Iteration  25: 19563170.475 ops/s
# Warmup Iteration  26: 19531126.296 ops/s
# Warmup Iteration  27: 19541562.615 ops/s
# Warmup Iteration  28: 19520384.570 ops/s
# Warmup Iteration  29: 19549469.382 ops/s
# Warmup Iteration  30: 19588458.676 ops/s
Iteration   1: 19620772.810 ops/s
Iteration   2: 19536837.667 ops/s
Iteration   3: 19603921.226 ops/s
Iteration   4: 19536750.656 ops/s
Iteration   5: 19510423.020 ops/s
Iteration   6: 19566644.780 ops/s
Iteration   7: 19536102.796 ops/s
Iteration   8: 19627330.637 ops/s
Iteration   9: 19560706.745 ops/s
Iteration  10: 19561079.375 ops/s
Iteration  11: 19559019.546 ops/s
Iteration  12: 19492547.902 ops/s
Iteration  13: 19587762.288 ops/s
Iteration  14: 19505807.618 ops/s
Iteration  15: 19581717.800 ops/s
Iteration  16: 19528766.614 ops/s
Iteration  17: 19507893.091 ops/s
Iteration  18: 19583386.638 ops/s
Iteration  19: 19567086.036 ops/s
Iteration  20: 19520664.543 ops/s
Iteration  21: 19496685.519 ops/s
Iteration  22: 19512331.462 ops/s
Iteration  23: 19489852.296 ops/s
Iteration  24: 19487696.005 ops/s
Iteration  25: 19520441.743 ops/s
Iteration  26: 19565207.391 ops/s
Iteration  27: 19563197.642 ops/s
Iteration  28: 19552013.898 ops/s
Iteration  29: 19500026.102 ops/s
Iteration  30: 19602516.166 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllArray":
  19546173.000 ±(99.9%) 26792.720 ops/s [Average]
  (min, avg, max) = (19487696.005, 19546173.000, 19627330.637), stdev = 40102.085
  CI (99.9%): [19519380.280, 19572965.720] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_containsAllArray  thrpt   30  19546173.000 ± 26792.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6225936.068 ops/s
# Warmup Iteration   2: 13158058.048 ops/s
# Warmup Iteration   3: 13406258.966 ops/s
# Warmup Iteration   4: 11309655.207 ops/s
# Warmup Iteration   5: 13301228.340 ops/s
# Warmup Iteration   6: 13354358.441 ops/s
# Warmup Iteration   7: 13381689.983 ops/s
# Warmup Iteration   8: 13380312.909 ops/s
# Warmup Iteration   9: 13408507.878 ops/s
# Warmup Iteration  10: 13374765.408 ops/s
# Warmup Iteration  11: 13395532.827 ops/s
# Warmup Iteration  12: 13385557.070 ops/s
# Warmup Iteration  13: 13386416.161 ops/s
# Warmup Iteration  14: 13375232.994 ops/s
# Warmup Iteration  15: 13342764.972 ops/s
# Warmup Iteration  16: 13353077.961 ops/s
# Warmup Iteration  17: 13407517.830 ops/s
# Warmup Iteration  18: 13377046.929 ops/s
# Warmup Iteration  19: 13364056.762 ops/s
# Warmup Iteration  20: 13352053.922 ops/s
# Warmup Iteration  21: 13359599.809 ops/s
# Warmup Iteration  22: 13392505.669 ops/s
# Warmup Iteration  23: 13354825.878 ops/s
# Warmup Iteration  24: 13370567.356 ops/s
# Warmup Iteration  25: 13379749.464 ops/s
# Warmup Iteration  26: 13391103.202 ops/s
# Warmup Iteration  27: 13387723.482 ops/s
# Warmup Iteration  28: 13395449.974 ops/s
# Warmup Iteration  29: 13379444.872 ops/s
# Warmup Iteration  30: 13381460.553 ops/s
Iteration   1: 13374278.170 ops/s
Iteration   2: 13398848.731 ops/s
Iteration   3: 13379853.294 ops/s
Iteration   4: 13369846.700 ops/s
Iteration   5: 13400983.297 ops/s
Iteration   6: 13324275.918 ops/s
Iteration   7: 13334601.683 ops/s
Iteration   8: 13378477.883 ops/s
Iteration   9: 13362043.000 ops/s
Iteration  10: 13353734.205 ops/s
Iteration  11: 13328687.845 ops/s
Iteration  12: 13388953.246 ops/s
Iteration  13: 13388737.171 ops/s
Iteration  14: 13405543.418 ops/s
Iteration  15: 13378606.114 ops/s
Iteration  16: 13371149.018 ops/s
Iteration  17: 13389858.392 ops/s
Iteration  18: 13371432.199 ops/s
Iteration  19: 13351394.016 ops/s
Iteration  20: 13385131.782 ops/s
Iteration  21: 13355079.014 ops/s
Iteration  22: 13374098.228 ops/s
Iteration  23: 13381572.870 ops/s
Iteration  24: 13383049.807 ops/s
Iteration  25: 13378243.201 ops/s
Iteration  26: 13350232.021 ops/s
Iteration  27: 13316476.274 ops/s
Iteration  28: 13407848.006 ops/s
Iteration  29: 13392187.906 ops/s
Iteration  30: 13384226.024 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_containsAllIterable":
  13371981.648 ±(99.9%) 15817.700 ops/s [Average]
  (min, avg, max) = (13316476.274, 13371981.648, 13407848.006), stdev = 23675.191
  CI (99.9%): [13356163.947, 13387799.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  13371981.648 ± 15817.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5788891.822 ops/s
# Warmup Iteration   2: 12719494.269 ops/s
# Warmup Iteration   3: 11429598.715 ops/s
# Warmup Iteration   4: 12246382.821 ops/s
# Warmup Iteration   5: 12839733.813 ops/s
# Warmup Iteration   6: 12856122.076 ops/s
# Warmup Iteration   7: 12842141.209 ops/s
# Warmup Iteration   8: 12846633.434 ops/s
# Warmup Iteration   9: 12849642.756 ops/s
# Warmup Iteration  10: 12889054.234 ops/s
# Warmup Iteration  11: 12863375.647 ops/s
# Warmup Iteration  12: 12884963.007 ops/s
# Warmup Iteration  13: 12872937.514 ops/s
# Warmup Iteration  14: 12854888.840 ops/s
# Warmup Iteration  15: 12856847.952 ops/s
# Warmup Iteration  16: 12860637.212 ops/s
# Warmup Iteration  17: 12847402.836 ops/s
# Warmup Iteration  18: 12868683.699 ops/s
# Warmup Iteration  19: 12824976.149 ops/s
# Warmup Iteration  20: 12844865.265 ops/s
# Warmup Iteration  21: 12859714.249 ops/s
# Warmup Iteration  22: 12887387.001 ops/s
# Warmup Iteration  23: 12862912.112 ops/s
# Warmup Iteration  24: 12811170.710 ops/s
# Warmup Iteration  25: 12862952.503 ops/s
# Warmup Iteration  26: 12839417.305 ops/s
# Warmup Iteration  27: 12814022.865 ops/s
# Warmup Iteration  28: 12850669.613 ops/s
# Warmup Iteration  29: 12844632.559 ops/s
# Warmup Iteration  30: 12810200.970 ops/s
Iteration   1: 12785429.603 ops/s
Iteration   2: 12867832.195 ops/s
Iteration   3: 12862010.061 ops/s
Iteration   4: 12869411.485 ops/s
Iteration   5: 12866877.127 ops/s
Iteration   6: 12869304.005 ops/s
Iteration   7: 12859824.135 ops/s
Iteration   8: 12848685.430 ops/s
Iteration   9: 12870265.552 ops/s
Iteration  10: 12834598.658 ops/s
Iteration  11: 12854784.657 ops/s
Iteration  12: 12838784.099 ops/s
Iteration  13: 12883400.264 ops/s
Iteration  14: 12814817.636 ops/s
Iteration  15: 12846985.483 ops/s
Iteration  16: 12866502.683 ops/s
Iteration  17: 12867736.373 ops/s
Iteration  18: 12867087.951 ops/s
Iteration  19: 12852714.819 ops/s
Iteration  20: 12887614.643 ops/s
Iteration  21: 12876369.564 ops/s
Iteration  22: 12865873.760 ops/s
Iteration  23: 12891883.075 ops/s
Iteration  24: 12860622.232 ops/s
Iteration  25: 12857759.032 ops/s
Iteration  26: 12847779.593 ops/s
Iteration  27: 12842792.642 ops/s
Iteration  28: 12831646.795 ops/s
Iteration  29: 12846525.055 ops/s
Iteration  30: 12844268.479 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_corresponds":
  12856006.236 ±(99.9%) 14391.186 ops/s [Average]
  (min, avg, max) = (12785429.603, 12856006.236, 12891883.075), stdev = 21540.052
  CI (99.9%): [12841615.050, 12870397.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_corresponds  thrpt   30  12856006.236 ± 14391.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16751630.211 ops/s
# Warmup Iteration   2: 33896267.890 ops/s
# Warmup Iteration   3: 29415123.907 ops/s
# Warmup Iteration   4: 34786446.831 ops/s
# Warmup Iteration   5: 34761509.512 ops/s
# Warmup Iteration   6: 34693410.413 ops/s
# Warmup Iteration   7: 34808989.723 ops/s
# Warmup Iteration   8: 34738682.956 ops/s
# Warmup Iteration   9: 34712487.649 ops/s
# Warmup Iteration  10: 34837361.739 ops/s
# Warmup Iteration  11: 34762082.125 ops/s
# Warmup Iteration  12: 34726212.267 ops/s
# Warmup Iteration  13: 34588406.797 ops/s
# Warmup Iteration  14: 34653831.810 ops/s
# Warmup Iteration  15: 34708693.310 ops/s
# Warmup Iteration  16: 34669084.320 ops/s
# Warmup Iteration  17: 34501398.234 ops/s
# Warmup Iteration  18: 34510994.057 ops/s
# Warmup Iteration  19: 34495497.871 ops/s
# Warmup Iteration  20: 34479139.583 ops/s
# Warmup Iteration  21: 34594040.603 ops/s
# Warmup Iteration  22: 34590900.595 ops/s
# Warmup Iteration  23: 34517956.341 ops/s
# Warmup Iteration  24: 34574717.215 ops/s
# Warmup Iteration  25: 34577476.663 ops/s
# Warmup Iteration  26: 34613379.687 ops/s
# Warmup Iteration  27: 34608474.710 ops/s
# Warmup Iteration  28: 34549323.060 ops/s
# Warmup Iteration  29: 34586025.468 ops/s
# Warmup Iteration  30: 34599912.899 ops/s
Iteration   1: 34447679.381 ops/s
Iteration   2: 34627294.943 ops/s
Iteration   3: 34583667.885 ops/s
Iteration   4: 34600877.547 ops/s
Iteration   5: 34571448.261 ops/s
Iteration   6: 34679132.396 ops/s
Iteration   7: 34521311.894 ops/s
Iteration   8: 34586634.523 ops/s
Iteration   9: 34454293.879 ops/s
Iteration  10: 34581437.513 ops/s
Iteration  11: 34486691.430 ops/s
Iteration  12: 34576281.502 ops/s
Iteration  13: 34658666.822 ops/s
Iteration  14: 34561017.659 ops/s
Iteration  15: 34578624.864 ops/s
Iteration  16: 34583069.130 ops/s
Iteration  17: 34565444.113 ops/s
Iteration  18: 34415046.529 ops/s
Iteration  19: 34570260.866 ops/s
Iteration  20: 34471378.911 ops/s
Iteration  21: 34581102.345 ops/s
Iteration  22: 34568384.650 ops/s
Iteration  23: 34563495.203 ops/s
Iteration  24: 34394499.851 ops/s
Iteration  25: 34428674.813 ops/s
Iteration  26: 34539630.383 ops/s
Iteration  27: 34491154.636 ops/s
Iteration  28: 34588582.720 ops/s
Iteration  29: 34387855.602 ops/s
Iteration  30: 34588818.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_count":
  34541748.628 ±(99.9%) 50303.947 ops/s [Average]
  (min, avg, max) = (34387855.602, 34541748.628, 34679132.396), stdev = 75292.586
  CI (99.9%): [34491444.681, 34592052.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_count  thrpt   30  34541748.628 ± 50303.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 986521.669 ops/s
# Warmup Iteration   2: 2074262.776 ops/s
# Warmup Iteration   3: 2240541.430 ops/s
# Warmup Iteration   4: 2252901.030 ops/s
# Warmup Iteration   5: 1877546.613 ops/s
# Warmup Iteration   6: 2258082.873 ops/s
# Warmup Iteration   7: 2262063.779 ops/s
# Warmup Iteration   8: 2255736.020 ops/s
# Warmup Iteration   9: 2260720.027 ops/s
# Warmup Iteration  10: 2265206.979 ops/s
# Warmup Iteration  11: 2258400.488 ops/s
# Warmup Iteration  12: 2259952.020 ops/s
# Warmup Iteration  13: 2261733.690 ops/s
# Warmup Iteration  14: 2258636.499 ops/s
# Warmup Iteration  15: 2268526.993 ops/s
# Warmup Iteration  16: 2248671.099 ops/s
# Warmup Iteration  17: 2266858.807 ops/s
# Warmup Iteration  18: 2255901.385 ops/s
# Warmup Iteration  19: 2251920.012 ops/s
# Warmup Iteration  20: 2264188.687 ops/s
# Warmup Iteration  21: 2244804.333 ops/s
# Warmup Iteration  22: 2241333.576 ops/s
# Warmup Iteration  23: 2249428.700 ops/s
# Warmup Iteration  24: 2247527.129 ops/s
# Warmup Iteration  25: 2262911.001 ops/s
# Warmup Iteration  26: 2252500.864 ops/s
# Warmup Iteration  27: 2258121.572 ops/s
# Warmup Iteration  28: 2244235.345 ops/s
# Warmup Iteration  29: 2265542.921 ops/s
# Warmup Iteration  30: 2271745.211 ops/s
Iteration   1: 2272433.599 ops/s
Iteration   2: 2259693.888 ops/s
Iteration   3: 2259026.467 ops/s
Iteration   4: 2263481.170 ops/s
Iteration   5: 2262281.559 ops/s
Iteration   6: 2256660.653 ops/s
Iteration   7: 2266111.287 ops/s
Iteration   8: 2261034.454 ops/s
Iteration   9: 2259888.749 ops/s
Iteration  10: 2258735.177 ops/s
Iteration  11: 2267579.330 ops/s
Iteration  12: 2256426.651 ops/s
Iteration  13: 2241409.253 ops/s
Iteration  14: 2251578.200 ops/s
Iteration  15: 2254537.058 ops/s
Iteration  16: 2259489.565 ops/s
Iteration  17: 2269508.719 ops/s
Iteration  18: 2242361.671 ops/s
Iteration  19: 2254922.571 ops/s
Iteration  20: 2243433.989 ops/s
Iteration  21: 2270468.154 ops/s
Iteration  22: 2256140.332 ops/s
Iteration  23: 2253468.101 ops/s
Iteration  24: 2269701.379 ops/s
Iteration  25: 2257010.428 ops/s
Iteration  26: 2261146.400 ops/s
Iteration  27: 2271495.845 ops/s
Iteration  28: 2253788.115 ops/s
Iteration  29: 2260744.274 ops/s
Iteration  30: 2261534.082 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countBy":
  2259203.037 ±(99.9%) 5363.375 ops/s [Average]
  (min, avg, max) = (2241409.253, 2259203.037, 2272433.599), stdev = 8027.648
  CI (99.9%): [2253839.662, 2264566.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_countBy  thrpt   30  2259203.037 ± 5363.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 242245.742 ops/s
# Warmup Iteration   2: 406263.678 ops/s
# Warmup Iteration   3: 489340.072 ops/s
# Warmup Iteration   4: 491561.475 ops/s
# Warmup Iteration   5: 491253.553 ops/s
# Warmup Iteration   6: 463350.097 ops/s
# Warmup Iteration   7: 437488.808 ops/s
# Warmup Iteration   8: 490426.970 ops/s
# Warmup Iteration   9: 491384.427 ops/s
# Warmup Iteration  10: 492818.708 ops/s
# Warmup Iteration  11: 492993.830 ops/s
# Warmup Iteration  12: 492246.179 ops/s
# Warmup Iteration  13: 491030.417 ops/s
# Warmup Iteration  14: 492432.585 ops/s
# Warmup Iteration  15: 492340.564 ops/s
# Warmup Iteration  16: 492174.488 ops/s
# Warmup Iteration  17: 492116.502 ops/s
# Warmup Iteration  18: 492225.514 ops/s
# Warmup Iteration  19: 491553.906 ops/s
# Warmup Iteration  20: 491817.129 ops/s
# Warmup Iteration  21: 491609.166 ops/s
# Warmup Iteration  22: 492603.595 ops/s
# Warmup Iteration  23: 491065.264 ops/s
# Warmup Iteration  24: 492257.298 ops/s
# Warmup Iteration  25: 492164.242 ops/s
# Warmup Iteration  26: 492461.336 ops/s
# Warmup Iteration  27: 491695.624 ops/s
# Warmup Iteration  28: 491924.152 ops/s
# Warmup Iteration  29: 491798.367 ops/s
# Warmup Iteration  30: 492030.808 ops/s
Iteration   1: 491537.553 ops/s
Iteration   2: 492406.506 ops/s
Iteration   3: 491747.197 ops/s
Iteration   4: 492138.260 ops/s
Iteration   5: 490948.425 ops/s
Iteration   6: 492199.935 ops/s
Iteration   7: 491771.620 ops/s
Iteration   8: 492199.290 ops/s
Iteration   9: 491229.090 ops/s
Iteration  10: 492366.383 ops/s
Iteration  11: 491765.150 ops/s
Iteration  12: 492066.144 ops/s
Iteration  13: 491467.972 ops/s
Iteration  14: 492127.186 ops/s
Iteration  15: 490812.458 ops/s
Iteration  16: 491893.753 ops/s
Iteration  17: 491448.187 ops/s
Iteration  18: 491938.352 ops/s
Iteration  19: 491386.897 ops/s
Iteration  20: 492015.904 ops/s
Iteration  21: 468018.704 ops/s
Iteration  22: 484457.073 ops/s
Iteration  23: 491935.104 ops/s
Iteration  24: 493298.654 ops/s
Iteration  25: 490589.730 ops/s
Iteration  26: 492529.255 ops/s
Iteration  27: 491703.837 ops/s
Iteration  28: 492167.505 ops/s
Iteration  29: 491584.437 ops/s
Iteration  30: 492955.325 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByEach":
  490823.530 ±(99.9%) 3040.312 ops/s [Average]
  (min, avg, max) = (468018.704, 490823.530, 493298.654), stdev = 4550.596
  CI (99.9%): [487783.218, 493863.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_countByEach  thrpt   30  490823.530 ± 3040.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1024277.421 ops/s
# Warmup Iteration   2: 2116410.089 ops/s
# Warmup Iteration   3: 2337674.517 ops/s
# Warmup Iteration   4: 2349585.465 ops/s
# Warmup Iteration   5: 1939403.329 ops/s
# Warmup Iteration   6: 2360577.500 ops/s
# Warmup Iteration   7: 2353130.404 ops/s
# Warmup Iteration   8: 2371027.996 ops/s
# Warmup Iteration   9: 2360703.353 ops/s
# Warmup Iteration  10: 2357913.095 ops/s
# Warmup Iteration  11: 2356462.425 ops/s
# Warmup Iteration  12: 2357076.427 ops/s
# Warmup Iteration  13: 2356438.798 ops/s
# Warmup Iteration  14: 2355169.918 ops/s
# Warmup Iteration  15: 2355630.147 ops/s
# Warmup Iteration  16: 2362656.761 ops/s
# Warmup Iteration  17: 2358312.585 ops/s
# Warmup Iteration  18: 2365685.264 ops/s
# Warmup Iteration  19: 2352301.384 ops/s
# Warmup Iteration  20: 2364059.055 ops/s
# Warmup Iteration  21: 2354626.785 ops/s
# Warmup Iteration  22: 2349357.244 ops/s
# Warmup Iteration  23: 2354062.214 ops/s
# Warmup Iteration  24: 2355342.002 ops/s
# Warmup Iteration  25: 2359135.495 ops/s
# Warmup Iteration  26: 2354926.185 ops/s
# Warmup Iteration  27: 2367237.345 ops/s
# Warmup Iteration  28: 2366622.865 ops/s
# Warmup Iteration  29: 2361445.229 ops/s
# Warmup Iteration  30: 2365063.787 ops/s
Iteration   1: 2366649.232 ops/s
Iteration   2: 2357558.354 ops/s
Iteration   3: 2361872.157 ops/s
Iteration   4: 2354057.404 ops/s
Iteration   5: 2346156.913 ops/s
Iteration   6: 2363871.494 ops/s
Iteration   7: 2359869.682 ops/s
Iteration   8: 2361242.077 ops/s
Iteration   9: 2356027.431 ops/s
Iteration  10: 2349582.005 ops/s
Iteration  11: 2363145.506 ops/s
Iteration  12: 2362526.949 ops/s
Iteration  13: 2350165.793 ops/s
Iteration  14: 2345921.908 ops/s
Iteration  15: 2380268.997 ops/s
Iteration  16: 2367548.057 ops/s
Iteration  17: 2360937.829 ops/s
Iteration  18: 2373933.945 ops/s
Iteration  19: 2362323.264 ops/s
Iteration  20: 2355276.317 ops/s
Iteration  21: 2363158.690 ops/s
Iteration  22: 2359928.864 ops/s
Iteration  23: 2353510.391 ops/s
Iteration  24: 2360584.687 ops/s
Iteration  25: 2362016.795 ops/s
Iteration  26: 2363037.136 ops/s
Iteration  27: 2365889.862 ops/s
Iteration  28: 2356837.716 ops/s
Iteration  29: 2363678.872 ops/s
Iteration  30: 2363754.265 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countByWith":
  2360377.753 ±(99.9%) 4895.466 ops/s [Average]
  (min, avg, max) = (2345921.908, 2360377.753, 2380268.997), stdev = 7327.304
  CI (99.9%): [2355482.287, 2365273.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_countByWith  thrpt   30  2360377.753 ± 4895.466  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22002697.973 ops/s
# Warmup Iteration   2: 44246387.290 ops/s
# Warmup Iteration   3: 39072429.506 ops/s
# Warmup Iteration   4: 46337209.808 ops/s
# Warmup Iteration   5: 46152427.646 ops/s
# Warmup Iteration   6: 46053797.732 ops/s
# Warmup Iteration   7: 46152418.820 ops/s
# Warmup Iteration   8: 46368248.937 ops/s
# Warmup Iteration   9: 46189643.594 ops/s
# Warmup Iteration  10: 46112274.375 ops/s
# Warmup Iteration  11: 46289823.176 ops/s
# Warmup Iteration  12: 46278139.744 ops/s
# Warmup Iteration  13: 46207185.355 ops/s
# Warmup Iteration  14: 46279809.261 ops/s
# Warmup Iteration  15: 46302695.134 ops/s
# Warmup Iteration  16: 46202461.612 ops/s
# Warmup Iteration  17: 46170019.794 ops/s
# Warmup Iteration  18: 46284649.014 ops/s
# Warmup Iteration  19: 45958681.524 ops/s
# Warmup Iteration  20: 46268275.806 ops/s
# Warmup Iteration  21: 46302018.905 ops/s
# Warmup Iteration  22: 46225455.588 ops/s
# Warmup Iteration  23: 46203272.046 ops/s
# Warmup Iteration  24: 46186436.533 ops/s
# Warmup Iteration  25: 46305332.212 ops/s
# Warmup Iteration  26: 46280829.072 ops/s
# Warmup Iteration  27: 46256575.889 ops/s
# Warmup Iteration  28: 46168531.237 ops/s
# Warmup Iteration  29: 46245220.131 ops/s
# Warmup Iteration  30: 46300352.877 ops/s
Iteration   1: 46244639.077 ops/s
Iteration   2: 46407252.811 ops/s
Iteration   3: 46478191.341 ops/s
Iteration   4: 46411635.842 ops/s
Iteration   5: 46146744.968 ops/s
Iteration   6: 46419864.409 ops/s
Iteration   7: 46224628.208 ops/s
Iteration   8: 46299398.920 ops/s
Iteration   9: 46385137.320 ops/s
Iteration  10: 46228811.943 ops/s
Iteration  11: 46226018.744 ops/s
Iteration  12: 46038562.072 ops/s
Iteration  13: 46317772.426 ops/s
Iteration  14: 46336483.009 ops/s
Iteration  15: 46339913.872 ops/s
Iteration  16: 46061045.012 ops/s
Iteration  17: 46242208.710 ops/s
Iteration  18: 46139694.140 ops/s
Iteration  19: 46246323.279 ops/s
Iteration  20: 46205903.885 ops/s
Iteration  21: 46207137.832 ops/s
Iteration  22: 46155663.689 ops/s
Iteration  23: 46211014.941 ops/s
Iteration  24: 46236468.882 ops/s
Iteration  25: 46009965.452 ops/s
Iteration  26: 46136980.565 ops/s
Iteration  27: 46133334.265 ops/s
Iteration  28: 46311033.107 ops/s
Iteration  29: 46129552.032 ops/s
Iteration  30: 46254953.173 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_countWith":
  46239544.464 ±(99.9%) 77579.234 ops/s [Average]
  (min, avg, max) = (46009965.452, 46239544.464, 46478191.341), stdev = 116116.954
  CI (99.9%): [46161965.230, 46317123.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_countWith  thrpt   30  46239544.464 ± 77579.234  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22648679.657 ops/s
# Warmup Iteration   2: 45155945.010 ops/s
# Warmup Iteration   3: 37265674.152 ops/s
# Warmup Iteration   4: 44123761.173 ops/s
# Warmup Iteration   5: 43489135.743 ops/s
# Warmup Iteration   6: 44105278.168 ops/s
# Warmup Iteration   7: 44150137.649 ops/s
# Warmup Iteration   8: 44067738.622 ops/s
# Warmup Iteration   9: 43864861.220 ops/s
# Warmup Iteration  10: 44161734.405 ops/s
# Warmup Iteration  11: 44102224.401 ops/s
# Warmup Iteration  12: 44064166.061 ops/s
# Warmup Iteration  13: 44181760.274 ops/s
# Warmup Iteration  14: 44099425.884 ops/s
# Warmup Iteration  15: 43640057.780 ops/s
# Warmup Iteration  16: 44039162.076 ops/s
# Warmup Iteration  17: 44179190.099 ops/s
# Warmup Iteration  18: 44038334.782 ops/s
# Warmup Iteration  19: 44091482.329 ops/s
# Warmup Iteration  20: 44183092.415 ops/s
# Warmup Iteration  21: 44066955.407 ops/s
# Warmup Iteration  22: 44208458.709 ops/s
# Warmup Iteration  23: 44178331.495 ops/s
# Warmup Iteration  24: 44182828.731 ops/s
# Warmup Iteration  25: 44224727.755 ops/s
# Warmup Iteration  26: 44265445.585 ops/s
# Warmup Iteration  27: 43751486.944 ops/s
# Warmup Iteration  28: 44088053.262 ops/s
# Warmup Iteration  29: 44139546.681 ops/s
# Warmup Iteration  30: 44235981.541 ops/s
Iteration   1: 44285854.827 ops/s
Iteration   2: 44219267.419 ops/s
Iteration   3: 44322725.356 ops/s
Iteration   4: 44079728.435 ops/s
Iteration   5: 44236543.257 ops/s
Iteration   6: 43907707.930 ops/s
Iteration   7: 44307282.420 ops/s
Iteration   8: 44156459.113 ops/s
Iteration   9: 44080589.230 ops/s
Iteration  10: 44113868.284 ops/s
Iteration  11: 44340343.616 ops/s
Iteration  12: 44101540.055 ops/s
Iteration  13: 44224420.174 ops/s
Iteration  14: 44253338.715 ops/s
Iteration  15: 44278095.932 ops/s
Iteration  16: 44272234.235 ops/s
Iteration  17: 44267656.163 ops/s
Iteration  18: 44185394.706 ops/s
Iteration  19: 44205411.311 ops/s
Iteration  20: 44025740.940 ops/s
Iteration  21: 43908314.502 ops/s
Iteration  22: 44036145.953 ops/s
Iteration  23: 44025141.921 ops/s
Iteration  24: 44040923.032 ops/s
Iteration  25: 44031428.253 ops/s
Iteration  26: 44172393.417 ops/s
Iteration  27: 44082113.571 ops/s
Iteration  28: 44220793.588 ops/s
Iteration  29: 43934520.583 ops/s
Iteration  30: 44326757.931 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detect":
  44154757.829 ±(99.9%) 85498.636 ops/s [Average]
  (min, avg, max) = (43907707.930, 44154757.829, 44340343.616), stdev = 127970.343
  CI (99.9%): [44069259.193, 44240256.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detect  thrpt   30  44154757.829 ± 85498.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20383294.999 ops/s
# Warmup Iteration   2: 39764270.601 ops/s
# Warmup Iteration   3: 34477824.986 ops/s
# Warmup Iteration   4: 40528892.261 ops/s
# Warmup Iteration   5: 40477448.872 ops/s
# Warmup Iteration   6: 40564831.999 ops/s
# Warmup Iteration   7: 40585291.059 ops/s
# Warmup Iteration   8: 40582701.202 ops/s
# Warmup Iteration   9: 40476352.216 ops/s
# Warmup Iteration  10: 40604713.511 ops/s
# Warmup Iteration  11: 40503312.790 ops/s
# Warmup Iteration  12: 40544332.253 ops/s
# Warmup Iteration  13: 40573444.940 ops/s
# Warmup Iteration  14: 40568340.072 ops/s
# Warmup Iteration  15: 40510425.547 ops/s
# Warmup Iteration  16: 40575226.258 ops/s
# Warmup Iteration  17: 40520575.433 ops/s
# Warmup Iteration  18: 40548386.489 ops/s
# Warmup Iteration  19: 40634184.784 ops/s
# Warmup Iteration  20: 40558351.364 ops/s
# Warmup Iteration  21: 40618399.812 ops/s
# Warmup Iteration  22: 40509254.384 ops/s
# Warmup Iteration  23: 40556214.006 ops/s
# Warmup Iteration  24: 40551678.128 ops/s
# Warmup Iteration  25: 40723228.582 ops/s
# Warmup Iteration  26: 40604276.907 ops/s
# Warmup Iteration  27: 40579728.291 ops/s
# Warmup Iteration  28: 40569196.610 ops/s
# Warmup Iteration  29: 40533082.640 ops/s
# Warmup Iteration  30: 40558647.069 ops/s
Iteration   1: 40600934.388 ops/s
Iteration   2: 40626601.144 ops/s
Iteration   3: 40615323.124 ops/s
Iteration   4: 40623405.375 ops/s
Iteration   5: 40456661.226 ops/s
Iteration   6: 40628005.388 ops/s
Iteration   7: 40417047.040 ops/s
Iteration   8: 40569827.284 ops/s
Iteration   9: 40628004.148 ops/s
Iteration  10: 40417327.303 ops/s
Iteration  11: 40586135.571 ops/s
Iteration  12: 40596907.207 ops/s
Iteration  13: 40534682.229 ops/s
Iteration  14: 40639613.366 ops/s
Iteration  15: 40754568.266 ops/s
Iteration  16: 40475057.085 ops/s
Iteration  17: 40452968.119 ops/s
Iteration  18: 40506874.951 ops/s
Iteration  19: 40405507.745 ops/s
Iteration  20: 40312084.592 ops/s
Iteration  21: 40525993.200 ops/s
Iteration  22: 40545417.213 ops/s
Iteration  23: 40583940.178 ops/s
Iteration  24: 40538710.445 ops/s
Iteration  25: 40548381.722 ops/s
Iteration  26: 40658996.482 ops/s
Iteration  27: 40458039.355 ops/s
Iteration  28: 40410724.573 ops/s
Iteration  29: 40506227.812 ops/s
Iteration  30: 40520375.779 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIfNone":
  40538144.744 ±(99.9%) 63607.536 ops/s [Average]
  (min, avg, max) = (40312084.592, 40538144.744, 40754568.266), stdev = 95204.773
  CI (99.9%): [40474537.207, 40601752.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detectIfNone  thrpt   30  40538144.744 ± 63607.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13374014.667 ops/s
# Warmup Iteration   2: 26940324.656 ops/s
# Warmup Iteration   3: 22814584.914 ops/s
# Warmup Iteration   4: 26891680.219 ops/s
# Warmup Iteration   5: 26862339.568 ops/s
# Warmup Iteration   6: 26878637.209 ops/s
# Warmup Iteration   7: 26827816.665 ops/s
# Warmup Iteration   8: 26771554.861 ops/s
# Warmup Iteration   9: 26820558.124 ops/s
# Warmup Iteration  10: 26812005.825 ops/s
# Warmup Iteration  11: 26813639.383 ops/s
# Warmup Iteration  12: 26829435.030 ops/s
# Warmup Iteration  13: 26617284.794 ops/s
# Warmup Iteration  14: 26837910.513 ops/s
# Warmup Iteration  15: 26890240.545 ops/s
# Warmup Iteration  16: 26874283.864 ops/s
# Warmup Iteration  17: 26821463.422 ops/s
# Warmup Iteration  18: 26847186.427 ops/s
# Warmup Iteration  19: 26801515.909 ops/s
# Warmup Iteration  20: 26865001.018 ops/s
# Warmup Iteration  21: 26939521.246 ops/s
# Warmup Iteration  22: 26844735.972 ops/s
# Warmup Iteration  23: 26857494.795 ops/s
# Warmup Iteration  24: 26841649.613 ops/s
# Warmup Iteration  25: 26851536.446 ops/s
# Warmup Iteration  26: 26821259.465 ops/s
# Warmup Iteration  27: 26885226.020 ops/s
# Warmup Iteration  28: 26837125.881 ops/s
# Warmup Iteration  29: 26854623.885 ops/s
# Warmup Iteration  30: 26923401.376 ops/s
Iteration   1: 26842654.366 ops/s
Iteration   2: 26996686.500 ops/s
Iteration   3: 26813941.383 ops/s
Iteration   4: 26887937.683 ops/s
Iteration   5: 26920144.515 ops/s
Iteration   6: 26839240.248 ops/s
Iteration   7: 26923019.611 ops/s
Iteration   8: 26885976.918 ops/s
Iteration   9: 26826246.900 ops/s
Iteration  10: 26754252.143 ops/s
Iteration  11: 26798746.481 ops/s
Iteration  12: 26921883.495 ops/s
Iteration  13: 26866027.441 ops/s
Iteration  14: 26925615.941 ops/s
Iteration  15: 26836208.719 ops/s
Iteration  16: 26887250.060 ops/s
Iteration  17: 26891192.551 ops/s
Iteration  18: 26811816.762 ops/s
Iteration  19: 26912220.488 ops/s
Iteration  20: 26774017.774 ops/s
Iteration  21: 26496887.855 ops/s
Iteration  22: 26795897.557 ops/s
Iteration  23: 26873054.763 ops/s
Iteration  24: 26800941.926 ops/s
Iteration  25: 26862261.789 ops/s
Iteration  26: 26884899.820 ops/s
Iteration  27: 26904508.526 ops/s
Iteration  28: 26834639.252 ops/s
Iteration  29: 26854329.500 ops/s
Iteration  30: 26787948.805 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectIndex":
  26847014.992 ±(99.9%) 57202.281 ops/s [Average]
  (min, avg, max) = (26496887.855, 26847014.992, 26996686.500), stdev = 85617.688
  CI (99.9%): [26789812.712, 26904217.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detectIndex  thrpt   30  26847014.992 ± 57202.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13002611.357 ops/s
# Warmup Iteration   2: 25987113.590 ops/s
# Warmup Iteration   3: 22377092.784 ops/s
# Warmup Iteration   4: 26150172.748 ops/s
# Warmup Iteration   5: 26047283.051 ops/s
# Warmup Iteration   6: 26171936.656 ops/s
# Warmup Iteration   7: 26145842.331 ops/s
# Warmup Iteration   8: 26123209.878 ops/s
# Warmup Iteration   9: 26183638.954 ops/s
# Warmup Iteration  10: 26188043.505 ops/s
# Warmup Iteration  11: 26131607.638 ops/s
# Warmup Iteration  12: 26147993.568 ops/s
# Warmup Iteration  13: 26155486.519 ops/s
# Warmup Iteration  14: 26158198.681 ops/s
# Warmup Iteration  15: 26172835.875 ops/s
# Warmup Iteration  16: 26200803.125 ops/s
# Warmup Iteration  17: 26143327.360 ops/s
# Warmup Iteration  18: 26174940.559 ops/s
# Warmup Iteration  19: 26153625.115 ops/s
# Warmup Iteration  20: 25890447.833 ops/s
# Warmup Iteration  21: 26134767.637 ops/s
# Warmup Iteration  22: 26199503.304 ops/s
# Warmup Iteration  23: 26085172.075 ops/s
# Warmup Iteration  24: 26122814.112 ops/s
# Warmup Iteration  25: 26128435.734 ops/s
# Warmup Iteration  26: 26130405.805 ops/s
# Warmup Iteration  27: 25784248.208 ops/s
# Warmup Iteration  28: 26148046.636 ops/s
# Warmup Iteration  29: 26163440.877 ops/s
# Warmup Iteration  30: 26135580.453 ops/s
Iteration   1: 26167057.382 ops/s
Iteration   2: 26163155.354 ops/s
Iteration   3: 26182939.319 ops/s
Iteration   4: 26214549.655 ops/s
Iteration   5: 26199558.905 ops/s
Iteration   6: 26176807.377 ops/s
Iteration   7: 26158128.261 ops/s
Iteration   8: 26293766.251 ops/s
Iteration   9: 26246452.057 ops/s
Iteration  10: 26155771.786 ops/s
Iteration  11: 26202073.767 ops/s
Iteration  12: 26230095.606 ops/s
Iteration  13: 26281520.173 ops/s
Iteration  14: 26164108.202 ops/s
Iteration  15: 26095752.545 ops/s
Iteration  16: 26237078.032 ops/s
Iteration  17: 26162567.670 ops/s
Iteration  18: 26152906.519 ops/s
Iteration  19: 26203551.318 ops/s
Iteration  20: 26185651.772 ops/s
Iteration  21: 26179613.297 ops/s
Iteration  22: 26099809.613 ops/s
Iteration  23: 26074264.552 ops/s
Iteration  24: 26147147.012 ops/s
Iteration  25: 26098309.816 ops/s
Iteration  26: 26182036.223 ops/s
Iteration  27: 26166541.247 ops/s
Iteration  28: 26258120.196 ops/s
Iteration  29: 26171982.458 ops/s
Iteration  30: 26083094.801 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectLastIndex":
  26177813.706 ±(99.9%) 36587.513 ops/s [Average]
  (min, avg, max) = (26074264.552, 26177813.706, 26293766.251), stdev = 54762.472
  CI (99.9%): [26141226.192, 26214401.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  26177813.706 ± 36587.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15686039.774 ops/s
# Warmup Iteration   2: 31158074.804 ops/s
# Warmup Iteration   3: 27104361.854 ops/s
# Warmup Iteration   4: 31893293.491 ops/s
# Warmup Iteration   5: 31782439.904 ops/s
# Warmup Iteration   6: 31805387.836 ops/s
# Warmup Iteration   7: 31887716.084 ops/s
# Warmup Iteration   8: 31839918.207 ops/s
# Warmup Iteration   9: 31824972.203 ops/s
# Warmup Iteration  10: 31826073.754 ops/s
# Warmup Iteration  11: 31896013.750 ops/s
# Warmup Iteration  12: 31842416.602 ops/s
# Warmup Iteration  13: 31833647.899 ops/s
# Warmup Iteration  14: 31817476.703 ops/s
# Warmup Iteration  15: 31828970.627 ops/s
# Warmup Iteration  16: 31860619.952 ops/s
# Warmup Iteration  17: 31821663.412 ops/s
# Warmup Iteration  18: 31883159.825 ops/s
# Warmup Iteration  19: 31953882.845 ops/s
# Warmup Iteration  20: 31829954.398 ops/s
# Warmup Iteration  21: 31877081.996 ops/s
# Warmup Iteration  22: 31882216.067 ops/s
# Warmup Iteration  23: 31740375.524 ops/s
# Warmup Iteration  24: 31767807.845 ops/s
# Warmup Iteration  25: 31899493.233 ops/s
# Warmup Iteration  26: 31847472.291 ops/s
# Warmup Iteration  27: 31780011.589 ops/s
# Warmup Iteration  28: 31769380.699 ops/s
# Warmup Iteration  29: 31833729.715 ops/s
# Warmup Iteration  30: 31913357.639 ops/s
Iteration   1: 31921895.359 ops/s
Iteration   2: 31897228.018 ops/s
Iteration   3: 31852134.313 ops/s
Iteration   4: 31839987.919 ops/s
Iteration   5: 31679815.033 ops/s
Iteration   6: 31958292.436 ops/s
Iteration   7: 29815580.647 ops/s
Iteration   8: 31823854.781 ops/s
Iteration   9: 31829557.889 ops/s
Iteration  10: 31746187.676 ops/s
Iteration  11: 31856809.178 ops/s
Iteration  12: 31840624.791 ops/s
Iteration  13: 31826936.067 ops/s
Iteration  14: 31880229.239 ops/s
Iteration  15: 31905247.454 ops/s
Iteration  16: 31888752.220 ops/s
Iteration  17: 31889226.068 ops/s
Iteration  18: 31816680.333 ops/s
Iteration  19: 31816556.770 ops/s
Iteration  20: 31801374.001 ops/s
Iteration  21: 31820409.961 ops/s
Iteration  22: 31888807.845 ops/s
Iteration  23: 31838869.358 ops/s
Iteration  24: 31837433.831 ops/s
Iteration  25: 31953815.730 ops/s
Iteration  26: 31833772.114 ops/s
Iteration  27: 31741308.375 ops/s
Iteration  28: 31655496.848 ops/s
Iteration  29: 31747137.760 ops/s
Iteration  30: 31847374.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWith":
  31768379.887 ±(99.9%) 250762.112 ops/s [Average]
  (min, avg, max) = (29815580.647, 31768379.887, 31958292.436), stdev = 375328.953
  CI (99.9%): [31517617.775, 32019141.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detectWith  thrpt   30  31768379.887 ± 250762.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13430107.501 ops/s
# Warmup Iteration   2: 27852912.881 ops/s
# Warmup Iteration   3: 29433072.573 ops/s
# Warmup Iteration   4: 24835591.851 ops/s
# Warmup Iteration   5: 29476595.133 ops/s
# Warmup Iteration   6: 29472624.741 ops/s
# Warmup Iteration   7: 29427370.856 ops/s
# Warmup Iteration   8: 29482242.193 ops/s
# Warmup Iteration   9: 29554648.196 ops/s
# Warmup Iteration  10: 29462564.799 ops/s
# Warmup Iteration  11: 29482447.422 ops/s
# Warmup Iteration  12: 29526469.543 ops/s
# Warmup Iteration  13: 29495876.713 ops/s
# Warmup Iteration  14: 29474913.004 ops/s
# Warmup Iteration  15: 29479148.679 ops/s
# Warmup Iteration  16: 29479227.218 ops/s
# Warmup Iteration  17: 29562879.881 ops/s
# Warmup Iteration  18: 29573373.726 ops/s
# Warmup Iteration  19: 29478984.379 ops/s
# Warmup Iteration  20: 29449938.404 ops/s
# Warmup Iteration  21: 29419418.974 ops/s
# Warmup Iteration  22: 29445639.339 ops/s
# Warmup Iteration  23: 29483792.778 ops/s
# Warmup Iteration  24: 29485402.212 ops/s
# Warmup Iteration  25: 29507476.595 ops/s
# Warmup Iteration  26: 29515502.267 ops/s
# Warmup Iteration  27: 29465924.496 ops/s
# Warmup Iteration  28: 29471404.497 ops/s
# Warmup Iteration  29: 29487079.532 ops/s
# Warmup Iteration  30: 29537741.605 ops/s
Iteration   1: 29426373.769 ops/s
Iteration   2: 29444329.997 ops/s
Iteration   3: 29488008.181 ops/s
Iteration   4: 29553143.786 ops/s
Iteration   5: 29556204.371 ops/s
Iteration   6: 29517804.450 ops/s
Iteration   7: 29501884.045 ops/s
Iteration   8: 29550820.810 ops/s
Iteration   9: 29535499.865 ops/s
Iteration  10: 29453912.382 ops/s
Iteration  11: 29504019.046 ops/s
Iteration  12: 29460064.533 ops/s
Iteration  13: 29458622.397 ops/s
Iteration  14: 29460195.740 ops/s
Iteration  15: 29477309.664 ops/s
Iteration  16: 29569733.854 ops/s
Iteration  17: 29513530.920 ops/s
Iteration  18: 29518655.728 ops/s
Iteration  19: 29578929.824 ops/s
Iteration  20: 29552090.717 ops/s
Iteration  21: 29542835.794 ops/s
Iteration  22: 29451005.255 ops/s
Iteration  23: 29546904.326 ops/s
Iteration  24: 29586863.892 ops/s
Iteration  25: 29579225.859 ops/s
Iteration  26: 29617881.773 ops/s
Iteration  27: 29598455.864 ops/s
Iteration  28: 29593550.094 ops/s
Iteration  29: 29568719.542 ops/s
Iteration  30: 29596692.863 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_detectWithIfNone":
  29526775.645 ±(99.9%) 36352.828 ops/s [Average]
  (min, avg, max) = (29426373.769, 29526775.645, 29617881.773), stdev = 54411.206
  CI (99.9%): [29490422.816, 29563128.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  29526775.645 ± 36352.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2163727.212 ops/s
# Warmup Iteration   2: 5064404.019 ops/s
# Warmup Iteration   3: 4289494.314 ops/s
# Warmup Iteration   4: 5114128.624 ops/s
# Warmup Iteration   5: 5117213.071 ops/s
# Warmup Iteration   6: 5118842.914 ops/s
# Warmup Iteration   7: 5120877.342 ops/s
# Warmup Iteration   8: 5114444.485 ops/s
# Warmup Iteration   9: 5104994.068 ops/s
# Warmup Iteration  10: 5114104.510 ops/s
# Warmup Iteration  11: 5107929.650 ops/s
# Warmup Iteration  12: 5107063.764 ops/s
# Warmup Iteration  13: 5100181.385 ops/s
# Warmup Iteration  14: 5098548.186 ops/s
# Warmup Iteration  15: 5122497.911 ops/s
# Warmup Iteration  16: 5117314.024 ops/s
# Warmup Iteration  17: 5126785.605 ops/s
# Warmup Iteration  18: 5107428.992 ops/s
# Warmup Iteration  19: 5111478.689 ops/s
# Warmup Iteration  20: 5115274.665 ops/s
# Warmup Iteration  21: 5114057.476 ops/s
# Warmup Iteration  22: 5114304.741 ops/s
# Warmup Iteration  23: 5107861.393 ops/s
# Warmup Iteration  24: 5127657.037 ops/s
# Warmup Iteration  25: 5122201.592 ops/s
# Warmup Iteration  26: 5107395.693 ops/s
# Warmup Iteration  27: 5114719.569 ops/s
# Warmup Iteration  28: 5109525.145 ops/s
# Warmup Iteration  29: 5104721.106 ops/s
# Warmup Iteration  30: 5114043.439 ops/s
Iteration   1: 5108300.615 ops/s
Iteration   2: 5113871.990 ops/s
Iteration   3: 5111284.461 ops/s
Iteration   4: 5115182.596 ops/s
Iteration   5: 5107362.045 ops/s
Iteration   6: 5106529.758 ops/s
Iteration   7: 5112640.602 ops/s
Iteration   8: 5115782.217 ops/s
Iteration   9: 5129193.461 ops/s
Iteration  10: 5096162.153 ops/s
Iteration  11: 5093440.199 ops/s
Iteration  12: 5104538.179 ops/s
Iteration  13: 5111665.131 ops/s
Iteration  14: 5109263.652 ops/s
Iteration  15: 5104191.977 ops/s
Iteration  16: 5112651.132 ops/s
Iteration  17: 5128421.596 ops/s
Iteration  18: 5112874.857 ops/s
Iteration  19: 5100736.735 ops/s
Iteration  20: 5115330.972 ops/s
Iteration  21: 5108305.806 ops/s
Iteration  22: 5131944.053 ops/s
Iteration  23: 5109924.861 ops/s
Iteration  24: 5123483.839 ops/s
Iteration  25: 5118365.482 ops/s
Iteration  26: 5120844.877 ops/s
Iteration  27: 5087727.759 ops/s
Iteration  28: 5132077.031 ops/s
Iteration  29: 5122068.252 ops/s
Iteration  30: 5129831.013 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinct":
  5113133.243 ±(99.9%) 7399.672 ops/s [Average]
  (min, avg, max) = (5087727.759, 5113133.243, 5132077.031), stdev = 11075.481
  CI (99.9%): [5105733.572, 5120532.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_distinct  thrpt   30  5113133.243 ± 7399.672  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4272486.014 ops/s
# Warmup Iteration   2: 9869972.372 ops/s
# Warmup Iteration   3: 9382244.324 ops/s
# Warmup Iteration   4: 8734632.403 ops/s
# Warmup Iteration   5: 9836994.169 ops/s
# Warmup Iteration   6: 9826520.478 ops/s
# Warmup Iteration   7: 9853957.575 ops/s
# Warmup Iteration   8: 9842148.951 ops/s
# Warmup Iteration   9: 9854576.493 ops/s
# Warmup Iteration  10: 9839247.712 ops/s
# Warmup Iteration  11: 9826797.807 ops/s
# Warmup Iteration  12: 9829933.492 ops/s
# Warmup Iteration  13: 9836715.080 ops/s
# Warmup Iteration  14: 9845608.287 ops/s
# Warmup Iteration  15: 9825620.294 ops/s
# Warmup Iteration  16: 9832294.656 ops/s
# Warmup Iteration  17: 9909411.705 ops/s
# Warmup Iteration  18: 9889589.407 ops/s
# Warmup Iteration  19: 9923136.102 ops/s
# Warmup Iteration  20: 9889749.201 ops/s
# Warmup Iteration  21: 9884982.593 ops/s
# Warmup Iteration  22: 9908033.185 ops/s
# Warmup Iteration  23: 9890606.841 ops/s
# Warmup Iteration  24: 9907502.490 ops/s
# Warmup Iteration  25: 9908535.711 ops/s
# Warmup Iteration  26: 9904146.519 ops/s
# Warmup Iteration  27: 9912615.450 ops/s
# Warmup Iteration  28: 9905516.848 ops/s
# Warmup Iteration  29: 9893056.672 ops/s
# Warmup Iteration  30: 9894304.213 ops/s
Iteration   1: 9911809.810 ops/s
Iteration   2: 9905072.581 ops/s
Iteration   3: 9914610.128 ops/s
Iteration   4: 9917553.120 ops/s
Iteration   5: 9918229.716 ops/s
Iteration   6: 9908394.893 ops/s
Iteration   7: 9892920.291 ops/s
Iteration   8: 9906499.703 ops/s
Iteration   9: 9894382.042 ops/s
Iteration  10: 9912841.958 ops/s
Iteration  11: 9902777.862 ops/s
Iteration  12: 9926244.506 ops/s
Iteration  13: 9891899.576 ops/s
Iteration  14: 9927389.957 ops/s
Iteration  15: 9902650.465 ops/s
Iteration  16: 9923407.850 ops/s
Iteration  17: 9893096.876 ops/s
Iteration  18: 9899271.208 ops/s
Iteration  19: 9917855.553 ops/s
Iteration  20: 9915480.715 ops/s
Iteration  21: 9910724.982 ops/s
Iteration  22: 9900534.423 ops/s
Iteration  23: 9885689.264 ops/s
Iteration  24: 9910876.500 ops/s
Iteration  25: 9900787.271 ops/s
Iteration  26: 9873148.995 ops/s
Iteration  27: 9884882.071 ops/s
Iteration  28: 9910065.474 ops/s
Iteration  29: 9908847.319 ops/s
Iteration  30: 9920009.570 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctBy":
  9906265.156 ±(99.9%) 8634.190 ops/s [Average]
  (min, avg, max) = (9873148.995, 9906265.156, 9927389.957), stdev = 12923.249
  CI (99.9%): [9897630.966, 9914899.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_distinctBy  thrpt   30  9906265.156 ± 8634.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4295257.599 ops/s
# Warmup Iteration   2: 9820157.875 ops/s
# Warmup Iteration   3: 9393312.792 ops/s
# Warmup Iteration   4: 8825477.285 ops/s
# Warmup Iteration   5: 9931125.632 ops/s
# Warmup Iteration   6: 9933566.065 ops/s
# Warmup Iteration   7: 9918013.849 ops/s
# Warmup Iteration   8: 9923761.451 ops/s
# Warmup Iteration   9: 9954735.583 ops/s
# Warmup Iteration  10: 9944272.112 ops/s
# Warmup Iteration  11: 9940245.883 ops/s
# Warmup Iteration  12: 9950082.037 ops/s
# Warmup Iteration  13: 9939722.810 ops/s
# Warmup Iteration  14: 9927026.971 ops/s
# Warmup Iteration  15: 9953813.092 ops/s
# Warmup Iteration  16: 9953930.370 ops/s
# Warmup Iteration  17: 9971725.665 ops/s
# Warmup Iteration  18: 9951850.396 ops/s
# Warmup Iteration  19: 9943493.492 ops/s
# Warmup Iteration  20: 9956596.990 ops/s
# Warmup Iteration  21: 9944290.356 ops/s
# Warmup Iteration  22: 9956902.554 ops/s
# Warmup Iteration  23: 9906400.264 ops/s
# Warmup Iteration  24: 9939157.472 ops/s
# Warmup Iteration  25: 9901552.072 ops/s
# Warmup Iteration  26: 9963073.914 ops/s
# Warmup Iteration  27: 9943015.407 ops/s
# Warmup Iteration  28: 9955025.979 ops/s
# Warmup Iteration  29: 9972790.444 ops/s
# Warmup Iteration  30: 9946849.698 ops/s
Iteration   1: 9942552.355 ops/s
Iteration   2: 9955139.465 ops/s
Iteration   3: 9948999.345 ops/s
Iteration   4: 9963347.335 ops/s
Iteration   5: 9960417.360 ops/s
Iteration   6: 9961488.348 ops/s
Iteration   7: 9963952.894 ops/s
Iteration   8: 9931321.828 ops/s
Iteration   9: 9944589.317 ops/s
Iteration  10: 9941506.439 ops/s
Iteration  11: 9954668.336 ops/s
Iteration  12: 9937289.205 ops/s
Iteration  13: 9958123.020 ops/s
Iteration  14: 9946561.105 ops/s
Iteration  15: 9950886.633 ops/s
Iteration  16: 9980503.338 ops/s
Iteration  17: 9952391.469 ops/s
Iteration  18: 9947547.513 ops/s
Iteration  19: 9951472.998 ops/s
Iteration  20: 9949494.444 ops/s
Iteration  21: 9970325.900 ops/s
Iteration  22: 9923995.777 ops/s
Iteration  23: 9956427.286 ops/s
Iteration  24: 9966407.246 ops/s
Iteration  25: 9959122.446 ops/s
Iteration  26: 9947064.930 ops/s
Iteration  27: 9956867.910 ops/s
Iteration  28: 9950823.465 ops/s
Iteration  29: 9979255.235 ops/s
Iteration  30: 9979085.589 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  9954387.618 ±(99.9%) 8787.593 ops/s [Average]
  (min, avg, max) = (9923995.777, 9954387.618, 9980503.338), stdev = 13152.856
  CI (99.9%): [9945600.025, 9963175.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  9954387.618 ± 8787.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 977008.112 ops/s
# Warmup Iteration   2: 1141687.045 ops/s
# Warmup Iteration   3: 1550377.813 ops/s
# Warmup Iteration   4: 1544876.299 ops/s
# Warmup Iteration   5: 1535869.863 ops/s
# Warmup Iteration   6: 1553201.476 ops/s
# Warmup Iteration   7: 1552695.183 ops/s
# Warmup Iteration   8: 1553116.081 ops/s
# Warmup Iteration   9: 1540941.923 ops/s
# Warmup Iteration  10: 1275611.878 ops/s
# Warmup Iteration  11: 1556227.302 ops/s
# Warmup Iteration  12: 1553495.748 ops/s
# Warmup Iteration  13: 1550971.399 ops/s
# Warmup Iteration  14: 1547139.267 ops/s
# Warmup Iteration  15: 1552950.543 ops/s
# Warmup Iteration  16: 1553035.652 ops/s
# Warmup Iteration  17: 1554739.919 ops/s
# Warmup Iteration  18: 1554496.217 ops/s
# Warmup Iteration  19: 1551675.053 ops/s
# Warmup Iteration  20: 1554491.743 ops/s
# Warmup Iteration  21: 1555442.068 ops/s
# Warmup Iteration  22: 1553198.262 ops/s
# Warmup Iteration  23: 1554685.211 ops/s
# Warmup Iteration  24: 1550986.128 ops/s
# Warmup Iteration  25: 1550857.635 ops/s
# Warmup Iteration  26: 1552726.659 ops/s
# Warmup Iteration  27: 1551896.270 ops/s
# Warmup Iteration  28: 1553137.790 ops/s
# Warmup Iteration  29: 1554796.593 ops/s
# Warmup Iteration  30: 1553591.937 ops/s
Iteration   1: 1556347.495 ops/s
Iteration   2: 1555699.362 ops/s
Iteration   3: 1554530.724 ops/s
Iteration   4: 1552489.610 ops/s
Iteration   5: 1554625.376 ops/s
Iteration   6: 1553759.276 ops/s
Iteration   7: 1550314.420 ops/s
Iteration   8: 1552424.647 ops/s
Iteration   9: 1546518.257 ops/s
Iteration  10: 1548187.333 ops/s
Iteration  11: 1552967.598 ops/s
Iteration  12: 1554612.257 ops/s
Iteration  13: 1553058.527 ops/s
Iteration  14: 1553006.216 ops/s
Iteration  15: 1555225.347 ops/s
Iteration  16: 1553557.017 ops/s
Iteration  17: 1551103.696 ops/s
Iteration  18: 1555480.421 ops/s
Iteration  19: 1553593.340 ops/s
Iteration  20: 1552711.850 ops/s
Iteration  21: 1555727.689 ops/s
Iteration  22: 1555341.052 ops/s
Iteration  23: 1553780.169 ops/s
Iteration  24: 1553610.950 ops/s
Iteration  25: 1554648.940 ops/s
Iteration  26: 1549853.968 ops/s
Iteration  27: 1551400.884 ops/s
Iteration  28: 1555027.485 ops/s
Iteration  29: 1554500.051 ops/s
Iteration  30: 1553776.955 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop":
  1553262.697 ±(99.9%) 1514.680 ops/s [Average]
  (min, avg, max) = (1546518.257, 1553262.697, 1556347.495), stdev = 2267.103
  CI (99.9%): [1551748.017, 1554777.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_drop  thrpt   30  1553262.697 ± 1514.680  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8074651.006 ops/s
# Warmup Iteration   2: 16777696.627 ops/s
# Warmup Iteration   3: 14349301.924 ops/s
# Warmup Iteration   4: 16875865.919 ops/s
# Warmup Iteration   5: 16902146.823 ops/s
# Warmup Iteration   6: 16854498.584 ops/s
# Warmup Iteration   7: 16871658.222 ops/s
# Warmup Iteration   8: 16867340.944 ops/s
# Warmup Iteration   9: 16883664.183 ops/s
# Warmup Iteration  10: 16892536.943 ops/s
# Warmup Iteration  11: 16871457.595 ops/s
# Warmup Iteration  12: 16918457.304 ops/s
# Warmup Iteration  13: 16922940.282 ops/s
# Warmup Iteration  14: 16866951.037 ops/s
# Warmup Iteration  15: 16889793.987 ops/s
# Warmup Iteration  16: 16896721.901 ops/s
# Warmup Iteration  17: 16892282.792 ops/s
# Warmup Iteration  18: 16891151.317 ops/s
# Warmup Iteration  19: 16852993.118 ops/s
# Warmup Iteration  20: 16891492.874 ops/s
# Warmup Iteration  21: 16883630.197 ops/s
# Warmup Iteration  22: 16883467.770 ops/s
# Warmup Iteration  23: 16867354.803 ops/s
# Warmup Iteration  24: 16837400.723 ops/s
# Warmup Iteration  25: 16872240.997 ops/s
# Warmup Iteration  26: 16875150.016 ops/s
# Warmup Iteration  27: 16854635.010 ops/s
# Warmup Iteration  28: 16883835.146 ops/s
# Warmup Iteration  29: 16886530.228 ops/s
# Warmup Iteration  30: 16862145.212 ops/s
Iteration   1: 16880765.534 ops/s
Iteration   2: 16823366.898 ops/s
Iteration   3: 16955157.959 ops/s
Iteration   4: 16876586.193 ops/s
Iteration   5: 16856103.555 ops/s
Iteration   6: 16913165.368 ops/s
Iteration   7: 16906834.818 ops/s
Iteration   8: 16881306.812 ops/s
Iteration   9: 16909116.407 ops/s
Iteration  10: 16904442.691 ops/s
Iteration  11: 16912636.659 ops/s
Iteration  12: 16860731.527 ops/s
Iteration  13: 16890212.340 ops/s
Iteration  14: 16842571.708 ops/s
Iteration  15: 16884032.322 ops/s
Iteration  16: 16818930.989 ops/s
Iteration  17: 15948584.485 ops/s
Iteration  18: 16857424.100 ops/s
Iteration  19: 16899745.457 ops/s
Iteration  20: 16816094.638 ops/s
Iteration  21: 16919726.467 ops/s
Iteration  22: 16864061.909 ops/s
Iteration  23: 16916827.334 ops/s
Iteration  24: 16864328.584 ops/s
Iteration  25: 16899698.047 ops/s
Iteration  26: 16869257.142 ops/s
Iteration  27: 16884971.569 ops/s
Iteration  28: 16865395.629 ops/s
Iteration  29: 16914982.363 ops/s
Iteration  30: 16872388.009 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_dropWhile":
  16850314.917 ±(99.9%) 115782.577 ops/s [Average]
  (min, avg, max) = (15948584.485, 16850314.917, 16955157.959), stdev = 173297.923
  CI (99.9%): [16734532.340, 16966097.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_dropWhile  thrpt   30  16850314.917 ± 115782.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711905.284 ops/s
# Warmup Iteration   2: 760224.406 ops/s
# Warmup Iteration   3: 999512.078 ops/s
# Warmup Iteration   4: 1001616.648 ops/s
# Warmup Iteration   5: 996555.763 ops/s
# Warmup Iteration   6: 1004569.853 ops/s
# Warmup Iteration   7: 1001394.138 ops/s
# Warmup Iteration   8: 1000823.397 ops/s
# Warmup Iteration   9: 1000608.031 ops/s
# Warmup Iteration  10: 1001396.266 ops/s
# Warmup Iteration  11: 873556.379 ops/s
# Warmup Iteration  12: 974263.835 ops/s
# Warmup Iteration  13: 1004266.083 ops/s
# Warmup Iteration  14: 1002964.821 ops/s
# Warmup Iteration  15: 1003036.713 ops/s
# Warmup Iteration  16: 1005075.717 ops/s
# Warmup Iteration  17: 1066656.509 ops/s
# Warmup Iteration  18: 1063217.873 ops/s
# Warmup Iteration  19: 1061034.795 ops/s
# Warmup Iteration  20: 1065006.935 ops/s
# Warmup Iteration  21: 1065810.489 ops/s
# Warmup Iteration  22: 1066862.298 ops/s
# Warmup Iteration  23: 1067698.340 ops/s
# Warmup Iteration  24: 1066273.794 ops/s
# Warmup Iteration  25: 1066364.323 ops/s
# Warmup Iteration  26: 1065283.406 ops/s
# Warmup Iteration  27: 1068826.385 ops/s
# Warmup Iteration  28: 1064899.551 ops/s
# Warmup Iteration  29: 1065445.235 ops/s
# Warmup Iteration  30: 1064876.635 ops/s
Iteration   1: 1065868.492 ops/s
Iteration   2: 1059608.594 ops/s
Iteration   3: 1064721.000 ops/s
Iteration   4: 1066441.060 ops/s
Iteration   5: 1065080.049 ops/s
Iteration   6: 1063877.038 ops/s
Iteration   7: 1064609.123 ops/s
Iteration   8: 1066319.332 ops/s
Iteration   9: 1069202.032 ops/s
Iteration  10: 1063732.518 ops/s
Iteration  11: 1064573.200 ops/s
Iteration  12: 1064681.599 ops/s
Iteration  13: 1063103.579 ops/s
Iteration  14: 1064393.325 ops/s
Iteration  15: 1066675.688 ops/s
Iteration  16: 1065730.516 ops/s
Iteration  17: 1065492.339 ops/s
Iteration  18: 1067289.719 ops/s
Iteration  19: 1067456.155 ops/s
Iteration  20: 1069112.478 ops/s
Iteration  21: 1065963.030 ops/s
Iteration  22: 1069378.771 ops/s
Iteration  23: 1068326.360 ops/s
Iteration  24: 1065707.313 ops/s
Iteration  25: 1065200.555 ops/s
Iteration  26: 1066393.366 ops/s
Iteration  27: 1064004.971 ops/s
Iteration  28: 1063715.508 ops/s
Iteration  29: 1069496.203 ops/s
Iteration  30: 1067131.720 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_drop_throws":
  1065776.188 ±(99.9%) 1432.911 ops/s [Average]
  (min, avg, max) = (1059608.594, 1065776.188, 1069496.203), stdev = 2144.715
  CI (99.9%): [1064343.276, 1067209.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_drop_throws  thrpt   30  1065776.188 ± 1432.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11000696.811 ops/s
# Warmup Iteration   2: 24009380.136 ops/s
# Warmup Iteration   3: 19520548.246 ops/s
# Warmup Iteration   4: 23095188.415 ops/s
# Warmup Iteration   5: 23157507.352 ops/s
# Warmup Iteration   6: 23154562.770 ops/s
# Warmup Iteration   7: 23145932.974 ops/s
# Warmup Iteration   8: 23153141.371 ops/s
# Warmup Iteration   9: 23176724.201 ops/s
# Warmup Iteration  10: 23143119.176 ops/s
# Warmup Iteration  11: 23138888.693 ops/s
# Warmup Iteration  12: 23044097.902 ops/s
# Warmup Iteration  13: 23092973.674 ops/s
# Warmup Iteration  14: 23093021.134 ops/s
# Warmup Iteration  15: 23164532.595 ops/s
# Warmup Iteration  16: 23170116.335 ops/s
# Warmup Iteration  17: 23182953.371 ops/s
# Warmup Iteration  18: 23102733.129 ops/s
# Warmup Iteration  19: 23161633.391 ops/s
# Warmup Iteration  20: 23112549.661 ops/s
# Warmup Iteration  21: 23166097.595 ops/s
# Warmup Iteration  22: 23146558.770 ops/s
# Warmup Iteration  23: 23115904.728 ops/s
# Warmup Iteration  24: 23203206.146 ops/s
# Warmup Iteration  25: 23224044.775 ops/s
# Warmup Iteration  26: 23130075.904 ops/s
# Warmup Iteration  27: 23180748.218 ops/s
# Warmup Iteration  28: 23194361.452 ops/s
# Warmup Iteration  29: 23153380.166 ops/s
# Warmup Iteration  30: 23228976.572 ops/s
Iteration   1: 23186480.439 ops/s
Iteration   2: 23212672.659 ops/s
Iteration   3: 23131420.780 ops/s
Iteration   4: 23291254.597 ops/s
Iteration   5: 23148165.549 ops/s
Iteration   6: 23204607.480 ops/s
Iteration   7: 23117252.061 ops/s
Iteration   8: 23178551.482 ops/s
Iteration   9: 23120440.551 ops/s
Iteration  10: 23157987.549 ops/s
Iteration  11: 23249064.858 ops/s
Iteration  12: 23154767.595 ops/s
Iteration  13: 23130077.842 ops/s
Iteration  14: 23132668.673 ops/s
Iteration  15: 23164612.977 ops/s
Iteration  16: 23257955.954 ops/s
Iteration  17: 23180931.907 ops/s
Iteration  18: 23207148.707 ops/s
Iteration  19: 23184530.674 ops/s
Iteration  20: 23125529.183 ops/s
Iteration  21: 23104029.376 ops/s
Iteration  22: 23078539.811 ops/s
Iteration  23: 23115186.864 ops/s
Iteration  24: 23092523.461 ops/s
Iteration  25: 23237721.481 ops/s
Iteration  26: 23145492.186 ops/s
Iteration  27: 23163928.169 ops/s
Iteration  28: 23117059.004 ops/s
Iteration  29: 23038367.830 ops/s
Iteration  30: 23178685.379 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_each":
  23160255.169 ±(99.9%) 37352.242 ops/s [Average]
  (min, avg, max) = (23038367.830, 23160255.169, 23291254.597), stdev = 55907.082
  CI (99.9%): [23122902.927, 23197607.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_each  thrpt   30  23160255.169 ± 37352.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32991.273 ops/s
# Warmup Iteration   2: 46126.858 ops/s
# Warmup Iteration   3: 65758.463 ops/s
# Warmup Iteration   4: 65843.216 ops/s
# Warmup Iteration   5: 65536.622 ops/s
# Warmup Iteration   6: 65590.287 ops/s
# Warmup Iteration   7: 66098.803 ops/s
# Warmup Iteration   8: 66265.148 ops/s
# Warmup Iteration   9: 55961.102 ops/s
# Warmup Iteration  10: 66223.867 ops/s
# Warmup Iteration  11: 66213.506 ops/s
# Warmup Iteration  12: 66197.413 ops/s
# Warmup Iteration  13: 66348.599 ops/s
# Warmup Iteration  14: 66157.286 ops/s
# Warmup Iteration  15: 66083.459 ops/s
# Warmup Iteration  16: 66184.560 ops/s
# Warmup Iteration  17: 66111.052 ops/s
# Warmup Iteration  18: 65916.109 ops/s
# Warmup Iteration  19: 66094.568 ops/s
# Warmup Iteration  20: 66060.632 ops/s
# Warmup Iteration  21: 65945.228 ops/s
# Warmup Iteration  22: 66181.168 ops/s
# Warmup Iteration  23: 66126.332 ops/s
# Warmup Iteration  24: 66140.783 ops/s
# Warmup Iteration  25: 65999.826 ops/s
# Warmup Iteration  26: 65938.242 ops/s
# Warmup Iteration  27: 65376.451 ops/s
# Warmup Iteration  28: 66029.968 ops/s
# Warmup Iteration  29: 66083.983 ops/s
# Warmup Iteration  30: 66083.933 ops/s
Iteration   1: 63563.983 ops/s
Iteration   2: 66023.619 ops/s
Iteration   3: 66006.582 ops/s
Iteration   4: 66035.860 ops/s
Iteration   5: 65919.272 ops/s
Iteration   6: 66039.037 ops/s
Iteration   7: 65957.697 ops/s
Iteration   8: 65833.251 ops/s
Iteration   9: 65843.490 ops/s
Iteration  10: 66020.788 ops/s
Iteration  11: 65676.816 ops/s
Iteration  12: 65966.806 ops/s
Iteration  13: 66001.140 ops/s
Iteration  14: 66047.786 ops/s
Iteration  15: 65645.804 ops/s
Iteration  16: 66036.874 ops/s
Iteration  17: 65940.142 ops/s
Iteration  18: 65958.106 ops/s
Iteration  19: 65984.671 ops/s
Iteration  20: 65734.528 ops/s
Iteration  21: 65974.156 ops/s
Iteration  22: 65967.617 ops/s
Iteration  23: 65943.441 ops/s
Iteration  24: 66178.465 ops/s
Iteration  25: 66204.711 ops/s
Iteration  26: 65904.424 ops/s
Iteration  27: 66169.913 ops/s
Iteration  28: 66023.378 ops/s
Iteration  29: 66097.736 ops/s
Iteration  30: 66171.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_equalsAndHashCode":
  65895.731 ±(99.9%) 307.409 ops/s [Average]
  (min, avg, max) = (63563.983, 65895.731, 66204.711), stdev = 460.115
  CI (99.9%): [65588.322, 66203.140] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt      Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  65895.731 ± 307.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2217832.712 ops/s
# Warmup Iteration   2: 5477972.527 ops/s
# Warmup Iteration   3: 4625774.241 ops/s
# Warmup Iteration   4: 5541235.499 ops/s
# Warmup Iteration   5: 5520134.667 ops/s
# Warmup Iteration   6: 5543720.227 ops/s
# Warmup Iteration   7: 5555772.894 ops/s
# Warmup Iteration   8: 5560707.118 ops/s
# Warmup Iteration   9: 5544021.611 ops/s
# Warmup Iteration  10: 5546482.762 ops/s
# Warmup Iteration  11: 5549855.168 ops/s
# Warmup Iteration  12: 5552850.747 ops/s
# Warmup Iteration  13: 5534447.902 ops/s
# Warmup Iteration  14: 5553737.315 ops/s
# Warmup Iteration  15: 5553189.663 ops/s
# Warmup Iteration  16: 5546535.517 ops/s
# Warmup Iteration  17: 5533774.465 ops/s
# Warmup Iteration  18: 5529599.483 ops/s
# Warmup Iteration  19: 5542739.150 ops/s
# Warmup Iteration  20: 5551280.593 ops/s
# Warmup Iteration  21: 5510226.456 ops/s
# Warmup Iteration  22: 5556031.546 ops/s
# Warmup Iteration  23: 5554023.373 ops/s
# Warmup Iteration  24: 5526169.083 ops/s
# Warmup Iteration  25: 5520941.208 ops/s
# Warmup Iteration  26: 5505500.645 ops/s
# Warmup Iteration  27: 5547911.089 ops/s
# Warmup Iteration  28: 5548543.502 ops/s
# Warmup Iteration  29: 5539429.150 ops/s
# Warmup Iteration  30: 5544288.698 ops/s
Iteration   1: 5536265.597 ops/s
Iteration   2: 5554079.204 ops/s
Iteration   3: 5553100.628 ops/s
Iteration   4: 5504878.888 ops/s
Iteration   5: 5533083.081 ops/s
Iteration   6: 5533635.515 ops/s
Iteration   7: 5547870.374 ops/s
Iteration   8: 5554787.405 ops/s
Iteration   9: 5543552.787 ops/s
Iteration  10: 5547235.582 ops/s
Iteration  11: 5541852.676 ops/s
Iteration  12: 5549122.345 ops/s
Iteration  13: 5540672.852 ops/s
Iteration  14: 5546821.148 ops/s
Iteration  15: 5543864.506 ops/s
Iteration  16: 5530728.550 ops/s
Iteration  17: 5525185.145 ops/s
Iteration  18: 5498422.347 ops/s
Iteration  19: 5539082.472 ops/s
Iteration  20: 5546069.338 ops/s
Iteration  21: 5525904.422 ops/s
Iteration  22: 5553158.962 ops/s
Iteration  23: 5533959.347 ops/s
Iteration  24: 5526059.221 ops/s
Iteration  25: 5529523.637 ops/s
Iteration  26: 5560570.757 ops/s
Iteration  27: 5543814.145 ops/s
Iteration  28: 5548792.371 ops/s
Iteration  29: 5542546.913 ops/s
Iteration  30: 5558079.270 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollect":
  5539757.316 ±(99.9%) 9473.461 ops/s [Average]
  (min, avg, max) = (5498422.347, 5539757.316, 5560570.757), stdev = 14179.431
  CI (99.9%): [5530283.855, 5549230.777] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_flatCollect  thrpt   30  5539757.316 ± 9473.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2177866.676 ops/s
# Warmup Iteration   2: 5159041.270 ops/s
# Warmup Iteration   3: 4349761.432 ops/s
# Warmup Iteration   4: 5223729.451 ops/s
# Warmup Iteration   5: 5226724.015 ops/s
# Warmup Iteration   6: 5241587.196 ops/s
# Warmup Iteration   7: 5242017.373 ops/s
# Warmup Iteration   8: 5223588.496 ops/s
# Warmup Iteration   9: 5251549.922 ops/s
# Warmup Iteration  10: 5249966.815 ops/s
# Warmup Iteration  11: 5247741.637 ops/s
# Warmup Iteration  12: 5253525.263 ops/s
# Warmup Iteration  13: 5234285.870 ops/s
# Warmup Iteration  14: 5244941.525 ops/s
# Warmup Iteration  15: 5242590.246 ops/s
# Warmup Iteration  16: 5247811.155 ops/s
# Warmup Iteration  17: 5237955.244 ops/s
# Warmup Iteration  18: 5246529.702 ops/s
# Warmup Iteration  19: 5234672.950 ops/s
# Warmup Iteration  20: 5240434.644 ops/s
# Warmup Iteration  21: 5246219.433 ops/s
# Warmup Iteration  22: 5238548.558 ops/s
# Warmup Iteration  23: 5259295.362 ops/s
# Warmup Iteration  24: 5249293.037 ops/s
# Warmup Iteration  25: 5229105.201 ops/s
# Warmup Iteration  26: 5232482.928 ops/s
# Warmup Iteration  27: 5239469.346 ops/s
# Warmup Iteration  28: 5235654.428 ops/s
# Warmup Iteration  29: 5254185.597 ops/s
# Warmup Iteration  30: 5248466.408 ops/s
Iteration   1: 5266275.441 ops/s
Iteration   2: 5255347.905 ops/s
Iteration   3: 5250515.538 ops/s
Iteration   4: 5245930.516 ops/s
Iteration   5: 5242720.283 ops/s
Iteration   6: 5215177.115 ops/s
Iteration   7: 5260140.296 ops/s
Iteration   8: 5250250.073 ops/s
Iteration   9: 5260661.852 ops/s
Iteration  10: 5265028.206 ops/s
Iteration  11: 5238322.381 ops/s
Iteration  12: 5234077.152 ops/s
Iteration  13: 5247616.954 ops/s
Iteration  14: 5244622.524 ops/s
Iteration  15: 5243523.020 ops/s
Iteration  16: 5239481.397 ops/s
Iteration  17: 5253431.271 ops/s
Iteration  18: 5249988.267 ops/s
Iteration  19: 5235947.807 ops/s
Iteration  20: 5234247.503 ops/s
Iteration  21: 5243034.227 ops/s
Iteration  22: 5234500.522 ops/s
Iteration  23: 5240839.338 ops/s
Iteration  24: 5261114.423 ops/s
Iteration  25: 5233089.904 ops/s
Iteration  26: 5261908.787 ops/s
Iteration  27: 5253301.555 ops/s
Iteration  28: 5241709.455 ops/s
Iteration  29: 5233400.981 ops/s
Iteration  30: 5251792.085 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWith":
  5246266.559 ±(99.9%) 7764.768 ops/s [Average]
  (min, avg, max) = (5215177.115, 5246266.559, 5266275.441), stdev = 11621.940
  CI (99.9%): [5238501.791, 5254031.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  5246266.559 ± 7764.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1712864.987 ops/s
# Warmup Iteration   2: 4339446.500 ops/s
# Warmup Iteration   3: 4354125.968 ops/s
# Warmup Iteration   4: 3599467.240 ops/s
# Warmup Iteration   5: 4369855.204 ops/s
# Warmup Iteration   6: 4355628.193 ops/s
# Warmup Iteration   7: 4357857.680 ops/s
# Warmup Iteration   8: 4362484.708 ops/s
# Warmup Iteration   9: 4365820.838 ops/s
# Warmup Iteration  10: 4369251.225 ops/s
# Warmup Iteration  11: 4357036.852 ops/s
# Warmup Iteration  12: 4358158.020 ops/s
# Warmup Iteration  13: 4366819.503 ops/s
# Warmup Iteration  14: 4342643.372 ops/s
# Warmup Iteration  15: 4365623.424 ops/s
# Warmup Iteration  16: 4352811.278 ops/s
# Warmup Iteration  17: 4362120.566 ops/s
# Warmup Iteration  18: 4363580.996 ops/s
# Warmup Iteration  19: 4370170.261 ops/s
# Warmup Iteration  20: 4361295.416 ops/s
# Warmup Iteration  21: 4363811.157 ops/s
# Warmup Iteration  22: 4364488.504 ops/s
# Warmup Iteration  23: 4365437.105 ops/s
# Warmup Iteration  24: 4362267.699 ops/s
# Warmup Iteration  25: 4361867.428 ops/s
# Warmup Iteration  26: 4356075.689 ops/s
# Warmup Iteration  27: 4356274.951 ops/s
# Warmup Iteration  28: 4359638.626 ops/s
# Warmup Iteration  29: 4367699.013 ops/s
# Warmup Iteration  30: 4360262.830 ops/s
Iteration   1: 4358703.286 ops/s
Iteration   2: 4345688.187 ops/s
Iteration   3: 4363619.347 ops/s
Iteration   4: 4369425.834 ops/s
Iteration   5: 4363628.968 ops/s
Iteration   6: 4365875.925 ops/s
Iteration   7: 4365066.324 ops/s
Iteration   8: 4360173.432 ops/s
Iteration   9: 4362563.828 ops/s
Iteration  10: 4363689.195 ops/s
Iteration  11: 4345396.501 ops/s
Iteration  12: 4360500.317 ops/s
Iteration  13: 4361550.624 ops/s
Iteration  14: 4358307.476 ops/s
Iteration  15: 4372040.288 ops/s
Iteration  16: 4352169.414 ops/s
Iteration  17: 4356726.286 ops/s
Iteration  18: 4353888.769 ops/s
Iteration  19: 4354599.894 ops/s
Iteration  20: 4353813.827 ops/s
Iteration  21: 4366918.727 ops/s
Iteration  22: 4357484.602 ops/s
Iteration  23: 4364305.824 ops/s
Iteration  24: 4370061.908 ops/s
Iteration  25: 4359776.578 ops/s
Iteration  26: 4377624.344 ops/s
Iteration  27: 4360154.627 ops/s
Iteration  28: 4383212.858 ops/s
Iteration  29: 4370295.821 ops/s
Iteration  30: 4349269.347 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_flatCollectWithTarget":
  4361551.079 ±(99.9%) 5705.765 ops/s [Average]
  (min, avg, max) = (4345396.501, 4361551.079, 4383212.858), stdev = 8540.121
  CI (99.9%): [4355845.313, 4367256.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  4361551.079 ± 5705.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11850778.667 ops/s
# Warmup Iteration   2: 24925250.899 ops/s
# Warmup Iteration   3: 19735104.188 ops/s
# Warmup Iteration   4: 23426301.618 ops/s
# Warmup Iteration   5: 23468775.113 ops/s
# Warmup Iteration   6: 23369103.206 ops/s
# Warmup Iteration   7: 23423370.680 ops/s
# Warmup Iteration   8: 23411822.012 ops/s
# Warmup Iteration   9: 23484737.115 ops/s
# Warmup Iteration  10: 23445961.622 ops/s
# Warmup Iteration  11: 23439149.435 ops/s
# Warmup Iteration  12: 23451696.122 ops/s
# Warmup Iteration  13: 23365694.910 ops/s
# Warmup Iteration  14: 23471694.319 ops/s
# Warmup Iteration  15: 23550542.204 ops/s
# Warmup Iteration  16: 23481793.538 ops/s
# Warmup Iteration  17: 23456605.270 ops/s
# Warmup Iteration  18: 23463893.034 ops/s
# Warmup Iteration  19: 23318373.210 ops/s
# Warmup Iteration  20: 23360720.646 ops/s
# Warmup Iteration  21: 23477142.212 ops/s
# Warmup Iteration  22: 23466919.018 ops/s
# Warmup Iteration  23: 23433063.034 ops/s
# Warmup Iteration  24: 23411055.466 ops/s
# Warmup Iteration  25: 23460609.328 ops/s
# Warmup Iteration  26: 23514634.817 ops/s
# Warmup Iteration  27: 23398320.304 ops/s
# Warmup Iteration  28: 23421852.825 ops/s
# Warmup Iteration  29: 23379247.646 ops/s
# Warmup Iteration  30: 23356629.475 ops/s
Iteration   1: 23395845.912 ops/s
Iteration   2: 23445778.242 ops/s
Iteration   3: 23369151.365 ops/s
Iteration   4: 23345859.672 ops/s
Iteration   5: 23419160.537 ops/s
Iteration   6: 23493692.864 ops/s
Iteration   7: 23270768.252 ops/s
Iteration   8: 23475997.258 ops/s
Iteration   9: 23322182.798 ops/s
Iteration  10: 23481487.830 ops/s
Iteration  11: 23468748.897 ops/s
Iteration  12: 23415438.531 ops/s
Iteration  13: 23422115.425 ops/s
Iteration  14: 23354570.188 ops/s
Iteration  15: 23507603.480 ops/s
Iteration  16: 23446237.934 ops/s
Iteration  17: 23455994.888 ops/s
Iteration  18: 23352790.940 ops/s
Iteration  19: 23498940.287 ops/s
Iteration  20: 23476743.183 ops/s
Iteration  21: 23393163.075 ops/s
Iteration  22: 23475650.205 ops/s
Iteration  23: 23451422.109 ops/s
Iteration  24: 23402704.084 ops/s
Iteration  25: 23371911.168 ops/s
Iteration  26: 23564812.888 ops/s
Iteration  27: 23310065.775 ops/s
Iteration  28: 23242914.970 ops/s
Iteration  29: 23460770.276 ops/s
Iteration  30: 23468505.576 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEach":
  23418700.954 ±(99.9%) 49567.533 ops/s [Average]
  (min, avg, max) = (23242914.970, 23418700.954, 23564812.888), stdev = 74190.355
  CI (99.9%): [23369133.421, 23468268.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEach  thrpt   30  23418700.954 ± 49567.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 290565.845 ops/s
# Warmup Iteration   2: 314401.780 ops/s
# Warmup Iteration   3: 376300.943 ops/s
# Warmup Iteration   4: 399621.814 ops/s
# Warmup Iteration   5: 401592.893 ops/s
# Warmup Iteration   6: 398134.957 ops/s
# Warmup Iteration   7: 401031.320 ops/s
# Warmup Iteration   8: 400770.092 ops/s
# Warmup Iteration   9: 401618.808 ops/s
# Warmup Iteration  10: 400597.905 ops/s
# Warmup Iteration  11: 400470.444 ops/s
# Warmup Iteration  12: 401318.870 ops/s
# Warmup Iteration  13: 371380.592 ops/s
# Warmup Iteration  14: 367593.180 ops/s
# Warmup Iteration  15: 401722.731 ops/s
# Warmup Iteration  16: 400954.886 ops/s
# Warmup Iteration  17: 419563.500 ops/s
# Warmup Iteration  18: 418343.027 ops/s
# Warmup Iteration  19: 418317.091 ops/s
# Warmup Iteration  20: 418678.798 ops/s
# Warmup Iteration  21: 418618.914 ops/s
# Warmup Iteration  22: 419255.608 ops/s
# Warmup Iteration  23: 418559.196 ops/s
# Warmup Iteration  24: 418272.487 ops/s
# Warmup Iteration  25: 418644.130 ops/s
# Warmup Iteration  26: 419882.109 ops/s
# Warmup Iteration  27: 419559.631 ops/s
# Warmup Iteration  28: 419590.950 ops/s
# Warmup Iteration  29: 419659.883 ops/s
# Warmup Iteration  30: 417239.358 ops/s
Iteration   1: 419040.729 ops/s
Iteration   2: 418954.892 ops/s
Iteration   3: 418428.555 ops/s
Iteration   4: 383549.293 ops/s
Iteration   5: 418996.457 ops/s
Iteration   6: 417827.933 ops/s
Iteration   7: 420593.287 ops/s
Iteration   8: 418098.981 ops/s
Iteration   9: 419236.922 ops/s
Iteration  10: 419057.361 ops/s
Iteration  11: 419183.280 ops/s
Iteration  12: 418246.697 ops/s
Iteration  13: 418238.059 ops/s
Iteration  14: 418343.186 ops/s
Iteration  15: 418803.725 ops/s
Iteration  16: 419536.507 ops/s
Iteration  17: 416477.270 ops/s
Iteration  18: 418464.877 ops/s
Iteration  19: 419312.227 ops/s
Iteration  20: 419488.357 ops/s
Iteration  21: 418268.813 ops/s
Iteration  22: 419228.060 ops/s
Iteration  23: 418711.711 ops/s
Iteration  24: 419213.842 ops/s
Iteration  25: 419264.473 ops/s
Iteration  26: 419523.963 ops/s
Iteration  27: 420484.358 ops/s
Iteration  28: 419459.502 ops/s
Iteration  29: 419604.734 ops/s
Iteration  30: 416278.053 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachFromTo":
  417663.870 ±(99.9%) 4348.461 ops/s [Average]
  (min, avg, max) = (383549.293, 417663.870, 420593.287), stdev = 6508.573
  CI (99.9%): [413315.409, 422012.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  417663.870 ± 4348.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10577524.557 ops/s
# Warmup Iteration   2: 21249966.106 ops/s
# Warmup Iteration   3: 18319439.941 ops/s
# Warmup Iteration   4: 21576765.493 ops/s
# Warmup Iteration   5: 21463031.515 ops/s
# Warmup Iteration   6: 21588583.190 ops/s
# Warmup Iteration   7: 21548521.834 ops/s
# Warmup Iteration   8: 21558864.657 ops/s
# Warmup Iteration   9: 21507055.961 ops/s
# Warmup Iteration  10: 21554500.211 ops/s
# Warmup Iteration  11: 21468745.847 ops/s
# Warmup Iteration  12: 21530362.049 ops/s
# Warmup Iteration  13: 21455265.067 ops/s
# Warmup Iteration  14: 21534384.963 ops/s
# Warmup Iteration  15: 21564025.580 ops/s
# Warmup Iteration  16: 21478942.499 ops/s
# Warmup Iteration  17: 21550771.396 ops/s
# Warmup Iteration  18: 21527756.891 ops/s
# Warmup Iteration  19: 21515524.343 ops/s
# Warmup Iteration  20: 21520541.539 ops/s
# Warmup Iteration  21: 21488134.136 ops/s
# Warmup Iteration  22: 21532392.679 ops/s
# Warmup Iteration  23: 21520872.339 ops/s
# Warmup Iteration  24: 21498940.788 ops/s
# Warmup Iteration  25: 21587119.404 ops/s
# Warmup Iteration  26: 21533896.177 ops/s
# Warmup Iteration  27: 21541873.982 ops/s
# Warmup Iteration  28: 21518659.637 ops/s
# Warmup Iteration  29: 21576495.017 ops/s
# Warmup Iteration  30: 21479224.018 ops/s
Iteration   1: 21507896.923 ops/s
Iteration   2: 21503413.565 ops/s
Iteration   3: 21442748.132 ops/s
Iteration   4: 21437099.660 ops/s
Iteration   5: 21504739.558 ops/s
Iteration   6: 21516784.784 ops/s
Iteration   7: 21580572.213 ops/s
Iteration   8: 21522001.582 ops/s
Iteration   9: 21432523.904 ops/s
Iteration  10: 21483846.588 ops/s
Iteration  11: 21444988.230 ops/s
Iteration  12: 21499330.069 ops/s
Iteration  13: 21531204.984 ops/s
Iteration  14: 21569505.230 ops/s
Iteration  15: 21529396.095 ops/s
Iteration  16: 21574258.229 ops/s
Iteration  17: 21593019.673 ops/s
Iteration  18: 21581782.181 ops/s
Iteration  19: 21516927.097 ops/s
Iteration  20: 21585316.862 ops/s
Iteration  21: 21610518.513 ops/s
Iteration  22: 21497560.179 ops/s
Iteration  23: 21553505.010 ops/s
Iteration  24: 21568524.516 ops/s
Iteration  25: 21554456.518 ops/s
Iteration  26: 21570867.163 ops/s
Iteration  27: 21564999.546 ops/s
Iteration  28: 21547843.337 ops/s
Iteration  29: 21533686.754 ops/s
Iteration  30: 21529353.330 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWith":
  21529622.348 ±(99.9%) 32226.201 ops/s [Average]
  (min, avg, max) = (21432523.904, 21529622.348, 21610518.513), stdev = 48234.664
  CI (99.9%): [21497396.147, 21561848.548] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachWith  thrpt   30  21529622.348 ± 32226.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8241942.823 ops/s
# Warmup Iteration   2: 17558957.807 ops/s
# Warmup Iteration   3: 14780467.218 ops/s
# Warmup Iteration   4: 17729338.511 ops/s
# Warmup Iteration   5: 17646233.697 ops/s
# Warmup Iteration   6: 17754246.035 ops/s
# Warmup Iteration   7: 17719986.618 ops/s
# Warmup Iteration   8: 17729610.392 ops/s
# Warmup Iteration   9: 17747018.159 ops/s
# Warmup Iteration  10: 17696758.393 ops/s
# Warmup Iteration  11: 17733933.058 ops/s
# Warmup Iteration  12: 17762774.220 ops/s
# Warmup Iteration  13: 17744482.278 ops/s
# Warmup Iteration  14: 17716530.262 ops/s
# Warmup Iteration  15: 17704012.493 ops/s
# Warmup Iteration  16: 17762638.421 ops/s
# Warmup Iteration  17: 17732171.894 ops/s
# Warmup Iteration  18: 17743751.557 ops/s
# Warmup Iteration  19: 17737540.165 ops/s
# Warmup Iteration  20: 17679470.281 ops/s
# Warmup Iteration  21: 17740132.064 ops/s
# Warmup Iteration  22: 17718957.777 ops/s
# Warmup Iteration  23: 17660400.142 ops/s
# Warmup Iteration  24: 17703302.473 ops/s
# Warmup Iteration  25: 17728874.179 ops/s
# Warmup Iteration  26: 17722881.806 ops/s
# Warmup Iteration  27: 17708446.550 ops/s
# Warmup Iteration  28: 17684681.903 ops/s
# Warmup Iteration  29: 17689666.599 ops/s
# Warmup Iteration  30: 17733092.481 ops/s
Iteration   1: 17690647.404 ops/s
Iteration   2: 17733489.510 ops/s
Iteration   3: 17766685.632 ops/s
Iteration   4: 17681997.232 ops/s
Iteration   5: 17692076.456 ops/s
Iteration   6: 17735061.297 ops/s
Iteration   7: 17758198.894 ops/s
Iteration   8: 17725435.629 ops/s
Iteration   9: 17721673.928 ops/s
Iteration  10: 17812704.233 ops/s
Iteration  11: 17714568.780 ops/s
Iteration  12: 17705010.004 ops/s
Iteration  13: 17745873.432 ops/s
Iteration  14: 17702625.903 ops/s
Iteration  15: 17765900.418 ops/s
Iteration  16: 17735918.503 ops/s
Iteration  17: 17693210.008 ops/s
Iteration  18: 17687672.763 ops/s
Iteration  19: 17699804.019 ops/s
Iteration  20: 17747290.880 ops/s
Iteration  21: 17709232.203 ops/s
Iteration  22: 17709216.344 ops/s
Iteration  23: 17738875.184 ops/s
Iteration  24: 17698764.730 ops/s
Iteration  25: 17730213.347 ops/s
Iteration  26: 17730333.495 ops/s
Iteration  27: 17787502.138 ops/s
Iteration  28: 17736645.534 ops/s
Iteration  29: 17700800.125 ops/s
Iteration  30: 17691496.608 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndex":
  17724964.154 ±(99.9%) 21049.688 ops/s [Average]
  (min, avg, max) = (17681997.232, 17724964.154, 17812704.233), stdev = 31506.184
  CI (99.9%): [17703914.467, 17746013.842] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  17724964.154 ± 21049.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 283972.364 ops/s
# Warmup Iteration   2: 309652.264 ops/s
# Warmup Iteration   3: 369238.880 ops/s
# Warmup Iteration   4: 391747.499 ops/s
# Warmup Iteration   5: 392286.604 ops/s
# Warmup Iteration   6: 389377.782 ops/s
# Warmup Iteration   7: 392313.992 ops/s
# Warmup Iteration   8: 391278.118 ops/s
# Warmup Iteration   9: 393058.580 ops/s
# Warmup Iteration  10: 391324.419 ops/s
# Warmup Iteration  11: 393034.555 ops/s
# Warmup Iteration  12: 392591.887 ops/s
# Warmup Iteration  13: 365078.300 ops/s
# Warmup Iteration  14: 361718.006 ops/s
# Warmup Iteration  15: 393588.342 ops/s
# Warmup Iteration  16: 392902.141 ops/s
# Warmup Iteration  17: 410672.937 ops/s
# Warmup Iteration  18: 407635.074 ops/s
# Warmup Iteration  19: 408575.412 ops/s
# Warmup Iteration  20: 409209.227 ops/s
# Warmup Iteration  21: 410538.536 ops/s
# Warmup Iteration  22: 410603.062 ops/s
# Warmup Iteration  23: 409871.501 ops/s
# Warmup Iteration  24: 411694.780 ops/s
# Warmup Iteration  25: 411000.816 ops/s
# Warmup Iteration  26: 411961.209 ops/s
# Warmup Iteration  27: 410795.662 ops/s
# Warmup Iteration  28: 411238.003 ops/s
# Warmup Iteration  29: 411828.066 ops/s
# Warmup Iteration  30: 410667.414 ops/s
Iteration   1: 411751.875 ops/s
Iteration   2: 412607.301 ops/s
Iteration   3: 411359.588 ops/s
Iteration   4: 412281.557 ops/s
Iteration   5: 411437.236 ops/s
Iteration   6: 409620.058 ops/s
Iteration   7: 409107.120 ops/s
Iteration   8: 411507.034 ops/s
Iteration   9: 412000.452 ops/s
Iteration  10: 412461.302 ops/s
Iteration  11: 412658.942 ops/s
Iteration  12: 410149.637 ops/s
Iteration  13: 412076.764 ops/s
Iteration  14: 411138.702 ops/s
Iteration  15: 410246.031 ops/s
Iteration  16: 411564.010 ops/s
Iteration  17: 411778.950 ops/s
Iteration  18: 412628.494 ops/s
Iteration  19: 411210.048 ops/s
Iteration  20: 411193.512 ops/s
Iteration  21: 408777.939 ops/s
Iteration  22: 411185.094 ops/s
Iteration  23: 410256.206 ops/s
Iteration  24: 410225.092 ops/s
Iteration  25: 410623.513 ops/s
Iteration  26: 411490.341 ops/s
Iteration  27: 412003.853 ops/s
Iteration  28: 411187.138 ops/s
Iteration  29: 412108.910 ops/s
Iteration  30: 410746.549 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  411246.108 ±(99.9%) 678.404 ops/s [Average]
  (min, avg, max) = (408777.939, 411246.108, 412658.942), stdev = 1015.403
  CI (99.9%): [410567.704, 411924.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  411246.108 ± 678.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalFrom$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalFrom

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 743667.545 ops/s
# Warmup Iteration   2: 788497.584 ops/s
# Warmup Iteration   3: 1029032.062 ops/s
# Warmup Iteration   4: 1027287.361 ops/s
# Warmup Iteration   5: 1021139.732 ops/s
# Warmup Iteration   6: 1020434.408 ops/s
# Warmup Iteration   7: 1026711.210 ops/s
# Warmup Iteration   8: 1027627.667 ops/s
# Warmup Iteration   9: 1032207.835 ops/s
# Warmup Iteration  10: 1031372.085 ops/s
# Warmup Iteration  11: 997750.640 ops/s
# Warmup Iteration  12: 901221.491 ops/s
# Warmup Iteration  13: 1029378.159 ops/s
# Warmup Iteration  14: 1026981.373 ops/s
# Warmup Iteration  15: 1028642.044 ops/s
# Warmup Iteration  16: 1030033.169 ops/s
# Warmup Iteration  17: 1097331.253 ops/s
# Warmup Iteration  18: 1094540.941 ops/s
# Warmup Iteration  19: 1095141.767 ops/s
# Warmup Iteration  20: 1092753.420 ops/s
# Warmup Iteration  21: 1094898.084 ops/s
# Warmup Iteration  22: 1093663.722 ops/s
# Warmup Iteration  23: 1093730.583 ops/s
# Warmup Iteration  24: 1092406.531 ops/s
# Warmup Iteration  25: 1092652.728 ops/s
# Warmup Iteration  26: 1094154.002 ops/s
# Warmup Iteration  27: 1090437.871 ops/s
# Warmup Iteration  28: 1095091.313 ops/s
# Warmup Iteration  29: 1091820.756 ops/s
# Warmup Iteration  30: 1095779.013 ops/s
Iteration   1: 1095580.976 ops/s
Iteration   2: 1092441.924 ops/s
Iteration   3: 1092919.988 ops/s
Iteration   4: 1094932.163 ops/s
Iteration   5: 1096002.513 ops/s
Iteration   6: 1095543.694 ops/s
Iteration   7: 1095165.097 ops/s
Iteration   8: 1097955.176 ops/s
Iteration   9: 1093830.402 ops/s
Iteration  10: 1097059.701 ops/s
Iteration  11: 1094228.159 ops/s
Iteration  12: 1093811.089 ops/s
Iteration  13: 1090046.983 ops/s
Iteration  14: 1099682.546 ops/s
Iteration  15: 1094299.481 ops/s
Iteration  16: 1095289.925 ops/s
Iteration  17: 1091834.731 ops/s
Iteration  18: 1095547.809 ops/s
Iteration  19: 1092788.921 ops/s
Iteration  20: 1093338.583 ops/s
Iteration  21: 1094314.219 ops/s
Iteration  22: 1094880.930 ops/s
Iteration  23: 1093083.371 ops/s
Iteration  24: 1091796.294 ops/s
Iteration  25: 1091357.415 ops/s
Iteration  26: 1091594.719 ops/s
Iteration  27: 1096772.680 ops/s
Iteration  28: 1090230.933 ops/s
Iteration  29: 1093870.866 ops/s
Iteration  30: 1092914.779 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalFrom":
  1094103.869 ±(99.9%) 1471.096 ops/s [Average]
  (min, avg, max) = (1090046.983, 1094103.869, 1099682.546), stdev = 2201.868
  CI (99.9%): [1092632.772, 1095574.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalFrom  thrpt   30  1094103.869 ± 1471.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749951.023 ops/s
# Warmup Iteration   2: 793251.886 ops/s
# Warmup Iteration   3: 1029961.356 ops/s
# Warmup Iteration   4: 1030955.054 ops/s
# Warmup Iteration   5: 1026718.057 ops/s
# Warmup Iteration   6: 1027881.788 ops/s
# Warmup Iteration   7: 1023295.570 ops/s
# Warmup Iteration   8: 1028856.854 ops/s
# Warmup Iteration   9: 1032383.045 ops/s
# Warmup Iteration  10: 1026886.234 ops/s
# Warmup Iteration  11: 1023636.753 ops/s
# Warmup Iteration  12: 885198.126 ops/s
# Warmup Iteration  13: 1033428.588 ops/s
# Warmup Iteration  14: 1034619.474 ops/s
# Warmup Iteration  15: 1033635.252 ops/s
# Warmup Iteration  16: 1024708.383 ops/s
# Warmup Iteration  17: 1096302.940 ops/s
# Warmup Iteration  18: 1091003.154 ops/s
# Warmup Iteration  19: 1090637.433 ops/s
# Warmup Iteration  20: 1092461.958 ops/s
# Warmup Iteration  21: 1090412.619 ops/s
# Warmup Iteration  22: 1092984.185 ops/s
# Warmup Iteration  23: 1096421.411 ops/s
# Warmup Iteration  24: 1095684.393 ops/s
# Warmup Iteration  25: 1097118.634 ops/s
# Warmup Iteration  26: 1092712.463 ops/s
# Warmup Iteration  27: 1094193.891 ops/s
# Warmup Iteration  28: 1091703.528 ops/s
# Warmup Iteration  29: 1091277.559 ops/s
# Warmup Iteration  30: 1090416.204 ops/s
Iteration   1: 1091914.415 ops/s
Iteration   2: 1089167.997 ops/s
Iteration   3: 1093532.447 ops/s
Iteration   4: 1090597.601 ops/s
Iteration   5: 1090330.109 ops/s
Iteration   6: 1093041.748 ops/s
Iteration   7: 1097429.861 ops/s
Iteration   8: 1084931.727 ops/s
Iteration   9: 1091480.595 ops/s
Iteration  10: 1093695.951 ops/s
Iteration  11: 1095687.867 ops/s
Iteration  12: 1089073.217 ops/s
Iteration  13: 1090609.346 ops/s
Iteration  14: 1094832.405 ops/s
Iteration  15: 1093599.653 ops/s
Iteration  16: 1093430.309 ops/s
Iteration  17: 1088821.872 ops/s
Iteration  18: 1089690.643 ops/s
Iteration  19: 1089176.752 ops/s
Iteration  20: 1086623.441 ops/s
Iteration  21: 1081045.942 ops/s
Iteration  22: 1083734.743 ops/s
Iteration  23: 1084707.106 ops/s
Iteration  24: 1086773.628 ops/s
Iteration  25: 1089651.061 ops/s
Iteration  26: 1089659.660 ops/s
Iteration  27: 1091810.466 ops/s
Iteration  28: 1089861.906 ops/s
Iteration  29: 1092358.214 ops/s
Iteration  30: 1091740.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalTo":
  1090300.389 ±(99.9%) 2436.836 ops/s [Average]
  (min, avg, max) = (1081045.942, 1090300.389, 1097429.861), stdev = 3647.341
  CI (99.9%): [1087863.553, 1092737.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forEachWithIndexIllegalTo  thrpt   30  1090300.389 ± 2436.836  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22883393.898 ops/s
# Warmup Iteration   2: 40027916.642 ops/s
# Warmup Iteration   3: 40989139.019 ops/s
# Warmup Iteration   4: 45828475.063 ops/s
# Warmup Iteration   5: 45731442.503 ops/s
# Warmup Iteration   6: 45842263.941 ops/s
# Warmup Iteration   7: 45685095.266 ops/s
# Warmup Iteration   8: 45547677.247 ops/s
# Warmup Iteration   9: 45823333.687 ops/s
# Warmup Iteration  10: 45815670.887 ops/s
# Warmup Iteration  11: 45856619.151 ops/s
# Warmup Iteration  12: 45848583.875 ops/s
# Warmup Iteration  13: 45810715.787 ops/s
# Warmup Iteration  14: 45710741.536 ops/s
# Warmup Iteration  15: 45511012.974 ops/s
# Warmup Iteration  16: 45720229.029 ops/s
# Warmup Iteration  17: 45977591.747 ops/s
# Warmup Iteration  18: 45890880.280 ops/s
# Warmup Iteration  19: 45462510.284 ops/s
# Warmup Iteration  20: 45615991.490 ops/s
# Warmup Iteration  21: 45824855.322 ops/s
# Warmup Iteration  22: 45783032.049 ops/s
# Warmup Iteration  23: 45922198.556 ops/s
# Warmup Iteration  24: 45941532.560 ops/s
# Warmup Iteration  25: 45740098.352 ops/s
# Warmup Iteration  26: 45612477.599 ops/s
# Warmup Iteration  27: 45687390.539 ops/s
# Warmup Iteration  28: 45578476.341 ops/s
# Warmup Iteration  29: 45563717.736 ops/s
# Warmup Iteration  30: 45776650.693 ops/s
Iteration   1: 45669991.835 ops/s
Iteration   2: 45948935.654 ops/s
Iteration   3: 45674839.724 ops/s
Iteration   4: 45450352.760 ops/s
Iteration   5: 45660208.626 ops/s
Iteration   6: 45089459.844 ops/s
Iteration   7: 45717558.142 ops/s
Iteration   8: 45824418.919 ops/s
Iteration   9: 45806618.246 ops/s
Iteration  10: 45725028.894 ops/s
Iteration  11: 45581273.438 ops/s
Iteration  12: 45438361.427 ops/s
Iteration  13: 45543571.077 ops/s
Iteration  14: 45961519.054 ops/s
Iteration  15: 45752404.535 ops/s
Iteration  16: 45878908.461 ops/s
Iteration  17: 45746864.033 ops/s
Iteration  18: 45759445.941 ops/s
Iteration  19: 45713179.199 ops/s
Iteration  20: 45420422.630 ops/s
Iteration  21: 45614803.781 ops/s
Iteration  22: 45638136.197 ops/s
Iteration  23: 45879667.783 ops/s
Iteration  24: 45723523.778 ops/s
Iteration  25: 45644193.667 ops/s
Iteration  26: 45683132.130 ops/s
Iteration  27: 45959754.578 ops/s
Iteration  28: 45971878.407 ops/s
Iteration  29: 45612911.290 ops/s
Iteration  30: 45584642.705 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_forLoop":
  45689200.225 ±(99.9%) 125807.938 ops/s [Average]
  (min, avg, max) = (45089459.844, 45689200.225, 45971878.407), stdev = 188303.414
  CI (99.9%): [45563392.287, 45815008.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_forLoop  thrpt   30  45689200.225 ± 125807.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25499848.470 ops/s
# Warmup Iteration   2: 51990466.255 ops/s
# Warmup Iteration   3: 45416696.720 ops/s
# Warmup Iteration   4: 52338970.678 ops/s
# Warmup Iteration   5: 52545444.011 ops/s
# Warmup Iteration   6: 52317967.140 ops/s
# Warmup Iteration   7: 52371830.054 ops/s
# Warmup Iteration   8: 52258262.001 ops/s
# Warmup Iteration   9: 52430853.280 ops/s
# Warmup Iteration  10: 52169951.975 ops/s
# Warmup Iteration  11: 52204354.595 ops/s
# Warmup Iteration  12: 52364228.668 ops/s
# Warmup Iteration  13: 52504079.833 ops/s
# Warmup Iteration  14: 52218721.263 ops/s
# Warmup Iteration  15: 52183253.182 ops/s
# Warmup Iteration  16: 52407094.344 ops/s
# Warmup Iteration  17: 52331013.515 ops/s
# Warmup Iteration  18: 52250657.605 ops/s
# Warmup Iteration  19: 52404833.139 ops/s
# Warmup Iteration  20: 52323337.498 ops/s
# Warmup Iteration  21: 52568029.537 ops/s
# Warmup Iteration  22: 52690202.511 ops/s
# Warmup Iteration  23: 52473167.424 ops/s
# Warmup Iteration  24: 52423005.048 ops/s
# Warmup Iteration  25: 52585202.292 ops/s
# Warmup Iteration  26: 52586502.049 ops/s
# Warmup Iteration  27: 52170240.626 ops/s
# Warmup Iteration  28: 52432133.502 ops/s
# Warmup Iteration  29: 52434531.790 ops/s
# Warmup Iteration  30: 52429351.848 ops/s
Iteration   1: 52521153.413 ops/s
Iteration   2: 52447424.926 ops/s
Iteration   3: 52399924.890 ops/s
Iteration   4: 52492561.269 ops/s
Iteration   5: 52342215.897 ops/s
Iteration   6: 52706899.109 ops/s
Iteration   7: 52613337.880 ops/s
Iteration   8: 52542322.531 ops/s
Iteration   9: 52343242.848 ops/s
Iteration  10: 52474234.555 ops/s
Iteration  11: 52440269.530 ops/s
Iteration  12: 52678878.269 ops/s
Iteration  13: 52642874.279 ops/s
Iteration  14: 52789825.927 ops/s
Iteration  15: 52489181.178 ops/s
Iteration  16: 52625406.782 ops/s
Iteration  17: 52496488.056 ops/s
Iteration  18: 52415182.735 ops/s
Iteration  19: 52489519.935 ops/s
Iteration  20: 52466591.956 ops/s
Iteration  21: 52129616.975 ops/s
Iteration  22: 52392230.980 ops/s
Iteration  23: 52306236.526 ops/s
Iteration  24: 52240529.676 ops/s
Iteration  25: 52283032.052 ops/s
Iteration  26: 52410743.629 ops/s
Iteration  27: 52215209.936 ops/s
Iteration  28: 52316219.251 ops/s
Iteration  29: 52537633.585 ops/s
Iteration  30: 52603010.208 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_get":
  52461733.293 ±(99.9%) 102065.862 ops/s [Average]
  (min, avg, max) = (52129616.975, 52461733.293, 52789825.927), stdev = 152767.389
  CI (99.9%): [52359667.431, 52563799.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_get  thrpt   30  52461733.293 ± 102065.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27068316.811 ops/s
# Warmup Iteration   2: 50764174.926 ops/s
# Warmup Iteration   3: 44520080.809 ops/s
# Warmup Iteration   4: 51032567.303 ops/s
# Warmup Iteration   5: 50411850.233 ops/s
# Warmup Iteration   6: 50977380.157 ops/s
# Warmup Iteration   7: 50871627.453 ops/s
# Warmup Iteration   8: 51058107.288 ops/s
# Warmup Iteration   9: 51098270.089 ops/s
# Warmup Iteration  10: 50956105.503 ops/s
# Warmup Iteration  11: 51024574.186 ops/s
# Warmup Iteration  12: 51041080.039 ops/s
# Warmup Iteration  13: 51032762.159 ops/s
# Warmup Iteration  14: 51041990.907 ops/s
# Warmup Iteration  15: 51198955.551 ops/s
# Warmup Iteration  16: 50990415.637 ops/s
# Warmup Iteration  17: 50897505.451 ops/s
# Warmup Iteration  18: 51053362.438 ops/s
# Warmup Iteration  19: 51070491.371 ops/s
# Warmup Iteration  20: 51337392.741 ops/s
# Warmup Iteration  21: 51084453.628 ops/s
# Warmup Iteration  22: 51186075.005 ops/s
# Warmup Iteration  23: 51071196.018 ops/s
# Warmup Iteration  24: 51081876.110 ops/s
# Warmup Iteration  25: 51187251.204 ops/s
# Warmup Iteration  26: 51270477.597 ops/s
# Warmup Iteration  27: 51238018.154 ops/s
# Warmup Iteration  28: 50930567.216 ops/s
# Warmup Iteration  29: 51057806.421 ops/s
# Warmup Iteration  30: 51052834.549 ops/s
Iteration   1: 51199034.694 ops/s
Iteration   2: 50954927.990 ops/s
Iteration   3: 50935641.019 ops/s
Iteration   4: 51014157.238 ops/s
Iteration   5: 51126326.636 ops/s
Iteration   6: 51088379.505 ops/s
Iteration   7: 51090155.407 ops/s
Iteration   8: 51069740.282 ops/s
Iteration   9: 51150408.847 ops/s
Iteration  10: 51149776.809 ops/s
Iteration  11: 51157046.997 ops/s
Iteration  12: 51164723.763 ops/s
Iteration  13: 51045892.141 ops/s
Iteration  14: 51192350.192 ops/s
Iteration  15: 50840835.158 ops/s
Iteration  16: 51050925.231 ops/s
Iteration  17: 50887009.861 ops/s
Iteration  18: 50792982.292 ops/s
Iteration  19: 51184709.767 ops/s
Iteration  20: 51054633.756 ops/s
Iteration  21: 51054097.441 ops/s
Iteration  22: 51082578.275 ops/s
Iteration  23: 51067896.244 ops/s
Iteration  24: 51138151.684 ops/s
Iteration  25: 51146281.303 ops/s
Iteration  26: 51064920.861 ops/s
Iteration  27: 51047936.625 ops/s
Iteration  28: 51188959.918 ops/s
Iteration  29: 51263842.225 ops/s
Iteration  30: 50988858.153 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getFirst":
  51073106.011 ±(99.9%) 72958.608 ops/s [Average]
  (min, avg, max) = (50792982.292, 51073106.011, 51263842.225), stdev = 109201.018
  CI (99.9%): [51000147.402, 51146064.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_getFirst  thrpt   30  51073106.011 ± 72958.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26213379.053 ops/s
# Warmup Iteration   2: 49566026.867 ops/s
# Warmup Iteration   3: 42888564.635 ops/s
# Warmup Iteration   4: 50383711.359 ops/s
# Warmup Iteration   5: 50321458.427 ops/s
# Warmup Iteration   6: 50366234.730 ops/s
# Warmup Iteration   7: 50103634.287 ops/s
# Warmup Iteration   8: 50385074.973 ops/s
# Warmup Iteration   9: 50320086.287 ops/s
# Warmup Iteration  10: 50390770.998 ops/s
# Warmup Iteration  11: 50248231.993 ops/s
# Warmup Iteration  12: 50483797.289 ops/s
# Warmup Iteration  13: 50192489.987 ops/s
# Warmup Iteration  14: 50178840.886 ops/s
# Warmup Iteration  15: 50141850.519 ops/s
# Warmup Iteration  16: 50221811.318 ops/s
# Warmup Iteration  17: 50423460.961 ops/s
# Warmup Iteration  18: 50337056.209 ops/s
# Warmup Iteration  19: 50551131.045 ops/s
# Warmup Iteration  20: 50338626.910 ops/s
# Warmup Iteration  21: 50438504.992 ops/s
# Warmup Iteration  22: 50524913.348 ops/s
# Warmup Iteration  23: 50299543.861 ops/s
# Warmup Iteration  24: 50480283.412 ops/s
# Warmup Iteration  25: 50371795.868 ops/s
# Warmup Iteration  26: 50365041.039 ops/s
# Warmup Iteration  27: 50475109.550 ops/s
# Warmup Iteration  28: 50437256.818 ops/s
# Warmup Iteration  29: 50413715.966 ops/s
# Warmup Iteration  30: 50449418.262 ops/s
Iteration   1: 50351628.228 ops/s
Iteration   2: 50411929.006 ops/s
Iteration   3: 50280834.577 ops/s
Iteration   4: 50013528.835 ops/s
Iteration   5: 50515117.191 ops/s
Iteration   6: 50537572.185 ops/s
Iteration   7: 50506887.275 ops/s
Iteration   8: 50205213.285 ops/s
Iteration   9: 50420451.512 ops/s
Iteration  10: 50091123.208 ops/s
Iteration  11: 50278127.141 ops/s
Iteration  12: 50461013.179 ops/s
Iteration  13: 50358323.447 ops/s
Iteration  14: 50467215.468 ops/s
Iteration  15: 50283757.029 ops/s
Iteration  16: 50385130.887 ops/s
Iteration  17: 50149937.084 ops/s
Iteration  18: 50304848.089 ops/s
Iteration  19: 50372362.458 ops/s
Iteration  20: 48875222.154 ops/s
Iteration  21: 50297768.303 ops/s
Iteration  22: 50496604.285 ops/s
Iteration  23: 50423688.396 ops/s
Iteration  24: 50389673.797 ops/s
Iteration  25: 50347386.377 ops/s
Iteration  26: 50317875.724 ops/s
Iteration  27: 50574476.074 ops/s
Iteration  28: 50478218.659 ops/s
Iteration  29: 50380037.689 ops/s
Iteration  30: 50407119.043 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getLast":
  50312769.020 ±(99.9%) 200739.549 ops/s [Average]
  (min, avg, max) = (48875222.154, 50312769.020, 50574476.074), stdev = 300457.529
  CI (99.9%): [50112029.471, 50513508.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_getLast  thrpt   30  50312769.020 ± 200739.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29136644.699 ops/s
# Warmup Iteration   2: 55617071.856 ops/s
# Warmup Iteration   3: 47137284.287 ops/s
# Warmup Iteration   4: 55293587.977 ops/s
# Warmup Iteration   5: 55355258.149 ops/s
# Warmup Iteration   6: 55297519.973 ops/s
# Warmup Iteration   7: 55425620.279 ops/s
# Warmup Iteration   8: 55192549.221 ops/s
# Warmup Iteration   9: 55316902.562 ops/s
# Warmup Iteration  10: 55358241.917 ops/s
# Warmup Iteration  11: 55286189.395 ops/s
# Warmup Iteration  12: 55399239.924 ops/s
# Warmup Iteration  13: 55121611.035 ops/s
# Warmup Iteration  14: 55306508.337 ops/s
# Warmup Iteration  15: 55252683.806 ops/s
# Warmup Iteration  16: 55314192.199 ops/s
# Warmup Iteration  17: 55193820.769 ops/s
# Warmup Iteration  18: 55327018.773 ops/s
# Warmup Iteration  19: 55284544.560 ops/s
# Warmup Iteration  20: 55307282.866 ops/s
# Warmup Iteration  21: 55389859.172 ops/s
# Warmup Iteration  22: 55198187.615 ops/s
# Warmup Iteration  23: 55308435.687 ops/s
# Warmup Iteration  24: 55298197.650 ops/s
# Warmup Iteration  25: 55357039.924 ops/s
# Warmup Iteration  26: 55332033.891 ops/s
# Warmup Iteration  27: 55353102.094 ops/s
# Warmup Iteration  28: 55189230.865 ops/s
# Warmup Iteration  29: 55489532.006 ops/s
# Warmup Iteration  30: 55443758.457 ops/s
Iteration   1: 55302606.973 ops/s
Iteration   2: 55563493.230 ops/s
Iteration   3: 55294942.753 ops/s
Iteration   4: 55592282.016 ops/s
Iteration   5: 55224946.483 ops/s
Iteration   6: 55480318.402 ops/s
Iteration   7: 55249952.350 ops/s
Iteration   8: 55655686.073 ops/s
Iteration   9: 55417151.142 ops/s
Iteration  10: 55260652.392 ops/s
Iteration  11: 55314591.968 ops/s
Iteration  12: 55211813.852 ops/s
Iteration  13: 55208820.130 ops/s
Iteration  14: 55403685.346 ops/s
Iteration  15: 55526777.376 ops/s
Iteration  16: 55239207.894 ops/s
Iteration  17: 55478000.671 ops/s
Iteration  18: 55287117.202 ops/s
Iteration  19: 55505265.743 ops/s
Iteration  20: 55583863.661 ops/s
Iteration  21: 55196632.533 ops/s
Iteration  22: 55377208.305 ops/s
Iteration  23: 55451518.130 ops/s
Iteration  24: 55330869.822 ops/s
Iteration  25: 55364908.886 ops/s
Iteration  26: 55251404.461 ops/s
Iteration  27: 55184801.320 ops/s
Iteration  28: 55483760.948 ops/s
Iteration  29: 55385086.037 ops/s
Iteration  30: 55322465.342 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly":
  55371661.048 ±(99.9%) 89630.180 ops/s [Average]
  (min, avg, max) = (55184801.320, 55371661.048, 55655686.073), stdev = 134154.245
  CI (99.9%): [55282030.868, 55461291.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_getOnly  thrpt   30  55371661.048 ± 89630.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 783670.017 ops/s
# Warmup Iteration   2: 824525.067 ops/s
# Warmup Iteration   3: 1060891.316 ops/s
# Warmup Iteration   4: 1060605.563 ops/s
# Warmup Iteration   5: 1055130.206 ops/s
# Warmup Iteration   6: 1057892.278 ops/s
# Warmup Iteration   7: 1058604.713 ops/s
# Warmup Iteration   8: 1061828.499 ops/s
# Warmup Iteration   9: 1064430.004 ops/s
# Warmup Iteration  10: 1063814.125 ops/s
# Warmup Iteration  11: 1030829.318 ops/s
# Warmup Iteration  12: 928241.431 ops/s
# Warmup Iteration  13: 1060214.832 ops/s
# Warmup Iteration  14: 1061974.107 ops/s
# Warmup Iteration  15: 1065207.864 ops/s
# Warmup Iteration  16: 1060587.080 ops/s
# Warmup Iteration  17: 1129062.587 ops/s
# Warmup Iteration  18: 1127216.095 ops/s
# Warmup Iteration  19: 1129992.781 ops/s
# Warmup Iteration  20: 1128136.724 ops/s
# Warmup Iteration  21: 1130940.657 ops/s
# Warmup Iteration  22: 1128166.506 ops/s
# Warmup Iteration  23: 1126099.879 ops/s
# Warmup Iteration  24: 1127708.046 ops/s
# Warmup Iteration  25: 1133315.541 ops/s
# Warmup Iteration  26: 1134680.285 ops/s
# Warmup Iteration  27: 1134317.102 ops/s
# Warmup Iteration  28: 1127015.310 ops/s
# Warmup Iteration  29: 1128022.138 ops/s
# Warmup Iteration  30: 1131079.999 ops/s
Iteration   1: 1127616.743 ops/s
Iteration   2: 1128933.880 ops/s
Iteration   3: 1126344.495 ops/s
Iteration   4: 1128857.017 ops/s
Iteration   5: 1126695.236 ops/s
Iteration   6: 1130955.977 ops/s
Iteration   7: 1124787.682 ops/s
Iteration   8: 1135642.359 ops/s
Iteration   9: 1127585.386 ops/s
Iteration  10: 1132597.255 ops/s
Iteration  11: 1127610.229 ops/s
Iteration  12: 1124458.836 ops/s
Iteration  13: 1124531.714 ops/s
Iteration  14: 1127058.172 ops/s
Iteration  15: 1124747.735 ops/s
Iteration  16: 1133667.331 ops/s
Iteration  17: 1128384.642 ops/s
Iteration  18: 1131813.988 ops/s
Iteration  19: 1130644.941 ops/s
Iteration  20: 1128495.886 ops/s
Iteration  21: 1130332.194 ops/s
Iteration  22: 1129267.445 ops/s
Iteration  23: 1130465.588 ops/s
Iteration  24: 1131528.106 ops/s
Iteration  25: 1131813.193 ops/s
Iteration  26: 1130059.998 ops/s
Iteration  27: 1131524.015 ops/s
Iteration  28: 1130147.034 ops/s
Iteration  29: 1127667.253 ops/s
Iteration  30: 1131037.748 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_empty":
  1129175.736 ±(99.9%) 1858.739 ops/s [Average]
  (min, avg, max) = (1124458.836, 1129175.736, 1135642.359), stdev = 2782.074
  CI (99.9%): [1127316.997, 1131034.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_empty  thrpt   30  1129175.736 ± 1858.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771461.678 ops/s
# Warmup Iteration   2: 826523.595 ops/s
# Warmup Iteration   3: 1036633.771 ops/s
# Warmup Iteration   4: 1036902.287 ops/s
# Warmup Iteration   5: 1033158.185 ops/s
# Warmup Iteration   6: 1034446.209 ops/s
# Warmup Iteration   7: 1040519.738 ops/s
# Warmup Iteration   8: 1038494.453 ops/s
# Warmup Iteration   9: 1028381.236 ops/s
# Warmup Iteration  10: 1037054.911 ops/s
# Warmup Iteration  11: 947651.696 ops/s
# Warmup Iteration  12: 978899.954 ops/s
# Warmup Iteration  13: 1028312.022 ops/s
# Warmup Iteration  14: 1034780.055 ops/s
# Warmup Iteration  15: 1033419.830 ops/s
# Warmup Iteration  16: 1035467.186 ops/s
# Warmup Iteration  17: 1099546.771 ops/s
# Warmup Iteration  18: 1094963.929 ops/s
# Warmup Iteration  19: 1094125.355 ops/s
# Warmup Iteration  20: 1098830.165 ops/s
# Warmup Iteration  21: 1093931.660 ops/s
# Warmup Iteration  22: 1105037.531 ops/s
# Warmup Iteration  23: 1100284.396 ops/s
# Warmup Iteration  24: 1102085.371 ops/s
# Warmup Iteration  25: 1098869.074 ops/s
# Warmup Iteration  26: 1091832.192 ops/s
# Warmup Iteration  27: 1088960.592 ops/s
# Warmup Iteration  28: 1096433.380 ops/s
# Warmup Iteration  29: 1095139.080 ops/s
# Warmup Iteration  30: 1089840.934 ops/s
Iteration   1: 1097108.041 ops/s
Iteration   2: 1097113.656 ops/s
Iteration   3: 1085633.384 ops/s
Iteration   4: 1080881.697 ops/s
Iteration   5: 1096179.789 ops/s
Iteration   6: 1101559.872 ops/s
Iteration   7: 1103470.950 ops/s
Iteration   8: 1094018.129 ops/s
Iteration   9: 1098562.881 ops/s
Iteration  10: 1097676.484 ops/s
Iteration  11: 1095820.244 ops/s
Iteration  12: 1097134.870 ops/s
Iteration  13: 1103450.015 ops/s
Iteration  14: 1092653.597 ops/s
Iteration  15: 1047579.390 ops/s
Iteration  16: 1092929.823 ops/s
Iteration  17: 1092227.722 ops/s
Iteration  18: 1102338.716 ops/s
Iteration  19: 1098126.700 ops/s
Iteration  20: 1105127.190 ops/s
Iteration  21: 1094805.650 ops/s
Iteration  22: 1095615.011 ops/s
Iteration  23: 1088283.577 ops/s
Iteration  24: 1102914.300 ops/s
Iteration  25: 1095169.034 ops/s
Iteration  26: 1101253.165 ops/s
Iteration  27: 1097115.582 ops/s
Iteration  28: 1096702.084 ops/s
Iteration  29: 1096234.477 ops/s
Iteration  30: 1095476.618 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items":
  1094772.088 ±(99.9%) 6904.161 ops/s [Average]
  (min, avg, max) = (1047579.390, 1094772.088, 1105127.190), stdev = 10333.824
  CI (99.9%): [1087867.927, 1101676.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_getOnly_exception_when_multiple_items  thrpt   30  1094772.088 ± 6904.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909571.811 ops/s
# Warmup Iteration   2: 2353876.610 ops/s
# Warmup Iteration   3: 2424955.428 ops/s
# Warmup Iteration   4: 2008764.399 ops/s
# Warmup Iteration   5: 2426109.181 ops/s
# Warmup Iteration   6: 2418443.078 ops/s
# Warmup Iteration   7: 2425251.607 ops/s
# Warmup Iteration   8: 2423927.939 ops/s
# Warmup Iteration   9: 2425135.497 ops/s
# Warmup Iteration  10: 2425275.153 ops/s
# Warmup Iteration  11: 2424553.975 ops/s
# Warmup Iteration  12: 2426771.700 ops/s
# Warmup Iteration  13: 2422576.281 ops/s
# Warmup Iteration  14: 2414932.029 ops/s
# Warmup Iteration  15: 2419556.372 ops/s
# Warmup Iteration  16: 2426528.220 ops/s
# Warmup Iteration  17: 2423174.574 ops/s
# Warmup Iteration  18: 2420418.722 ops/s
# Warmup Iteration  19: 2421360.628 ops/s
# Warmup Iteration  20: 2426844.684 ops/s
# Warmup Iteration  21: 2422655.970 ops/s
# Warmup Iteration  22: 2419050.688 ops/s
# Warmup Iteration  23: 2418259.045 ops/s
# Warmup Iteration  24: 2421889.023 ops/s
# Warmup Iteration  25: 2419763.044 ops/s
# Warmup Iteration  26: 2418751.232 ops/s
# Warmup Iteration  27: 2415623.805 ops/s
# Warmup Iteration  28: 2421423.405 ops/s
# Warmup Iteration  29: 2422460.183 ops/s
# Warmup Iteration  30: 2405309.974 ops/s
Iteration   1: 2399277.108 ops/s
Iteration   2: 2426304.317 ops/s
Iteration   3: 2424064.087 ops/s
Iteration   4: 2420700.320 ops/s
Iteration   5: 2425801.618 ops/s
Iteration   6: 2417547.965 ops/s
Iteration   7: 2418202.576 ops/s
Iteration   8: 2421933.948 ops/s
Iteration   9: 2423072.649 ops/s
Iteration  10: 2420766.808 ops/s
Iteration  11: 2427643.129 ops/s
Iteration  12: 2419852.081 ops/s
Iteration  13: 2423014.136 ops/s
Iteration  14: 2416146.670 ops/s
Iteration  15: 2416746.243 ops/s
Iteration  16: 2421328.740 ops/s
Iteration  17: 2420260.220 ops/s
Iteration  18: 2418268.531 ops/s
Iteration  19: 2397245.166 ops/s
Iteration  20: 2414151.208 ops/s
Iteration  21: 2418041.792 ops/s
Iteration  22: 2420119.656 ops/s
Iteration  23: 2419133.262 ops/s
Iteration  24: 2420165.966 ops/s
Iteration  25: 2418462.428 ops/s
Iteration  26: 2419662.090 ops/s
Iteration  27: 2428085.107 ops/s
Iteration  28: 2427508.459 ops/s
Iteration  29: 2416725.577 ops/s
Iteration  30: 2421277.413 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupBy":
  2419383.642 ±(99.9%) 4511.705 ops/s [Average]
  (min, avg, max) = (2397245.166, 2419383.642, 2428085.107), stdev = 6752.908
  CI (99.9%): [2414871.937, 2423895.347] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupBy  thrpt   30  2419383.642 ± 4511.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 274659.185 ops/s
# Warmup Iteration   2: 493576.789 ops/s
# Warmup Iteration   3: 567175.622 ops/s
# Warmup Iteration   4: 569403.653 ops/s
# Warmup Iteration   5: 570108.426 ops/s
# Warmup Iteration   6: 475607.127 ops/s
# Warmup Iteration   7: 569862.534 ops/s
# Warmup Iteration   8: 570320.693 ops/s
# Warmup Iteration   9: 568762.520 ops/s
# Warmup Iteration  10: 567995.304 ops/s
# Warmup Iteration  11: 568511.049 ops/s
# Warmup Iteration  12: 567486.134 ops/s
# Warmup Iteration  13: 570553.840 ops/s
# Warmup Iteration  14: 570250.137 ops/s
# Warmup Iteration  15: 568476.860 ops/s
# Warmup Iteration  16: 569198.799 ops/s
# Warmup Iteration  17: 567629.772 ops/s
# Warmup Iteration  18: 568737.651 ops/s
# Warmup Iteration  19: 569159.094 ops/s
# Warmup Iteration  20: 569603.666 ops/s
# Warmup Iteration  21: 568923.924 ops/s
# Warmup Iteration  22: 569448.516 ops/s
# Warmup Iteration  23: 567886.721 ops/s
# Warmup Iteration  24: 568048.714 ops/s
# Warmup Iteration  25: 569290.831 ops/s
# Warmup Iteration  26: 568343.335 ops/s
# Warmup Iteration  27: 567788.843 ops/s
# Warmup Iteration  28: 567098.411 ops/s
# Warmup Iteration  29: 567575.761 ops/s
# Warmup Iteration  30: 568322.248 ops/s
Iteration   1: 570153.353 ops/s
Iteration   2: 568618.387 ops/s
Iteration   3: 567242.785 ops/s
Iteration   4: 568995.243 ops/s
Iteration   5: 567841.490 ops/s
Iteration   6: 568382.092 ops/s
Iteration   7: 567147.437 ops/s
Iteration   8: 570132.434 ops/s
Iteration   9: 568239.579 ops/s
Iteration  10: 568500.014 ops/s
Iteration  11: 569026.166 ops/s
Iteration  12: 568515.047 ops/s
Iteration  13: 568914.427 ops/s
Iteration  14: 566117.828 ops/s
Iteration  15: 567469.583 ops/s
Iteration  16: 567778.605 ops/s
Iteration  17: 567667.704 ops/s
Iteration  18: 567519.797 ops/s
Iteration  19: 566547.836 ops/s
Iteration  20: 566793.751 ops/s
Iteration  21: 566474.102 ops/s
Iteration  22: 568313.308 ops/s
Iteration  23: 568744.483 ops/s
Iteration  24: 568657.074 ops/s
Iteration  25: 567275.867 ops/s
Iteration  26: 566918.338 ops/s
Iteration  27: 567685.608 ops/s
Iteration  28: 566205.487 ops/s
Iteration  29: 568069.588 ops/s
Iteration  30: 567299.493 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByEach":
  567908.230 ±(99.9%) 690.065 ops/s [Average]
  (min, avg, max) = (566117.828, 567908.230, 570153.353), stdev = 1032.857
  CI (99.9%): [567218.165, 568598.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupByEach  thrpt   30  567908.230 ± 690.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2822600.381 ops/s
# Warmup Iteration   2: 7247517.913 ops/s
# Warmup Iteration   3: 6237874.264 ops/s
# Warmup Iteration   4: 6946048.715 ops/s
# Warmup Iteration   5: 7203385.639 ops/s
# Warmup Iteration   6: 7183967.120 ops/s
# Warmup Iteration   7: 7183528.596 ops/s
# Warmup Iteration   8: 7187260.775 ops/s
# Warmup Iteration   9: 7186799.413 ops/s
# Warmup Iteration  10: 7184715.055 ops/s
# Warmup Iteration  11: 7184779.214 ops/s
# Warmup Iteration  12: 7216075.934 ops/s
# Warmup Iteration  13: 7223201.593 ops/s
# Warmup Iteration  14: 7224692.199 ops/s
# Warmup Iteration  15: 7242812.714 ops/s
# Warmup Iteration  16: 7246802.774 ops/s
# Warmup Iteration  17: 7234274.061 ops/s
# Warmup Iteration  18: 7214688.305 ops/s
# Warmup Iteration  19: 7226062.197 ops/s
# Warmup Iteration  20: 7201313.042 ops/s
# Warmup Iteration  21: 7224386.972 ops/s
# Warmup Iteration  22: 7252222.548 ops/s
# Warmup Iteration  23: 7243632.302 ops/s
# Warmup Iteration  24: 7209047.927 ops/s
# Warmup Iteration  25: 7205437.453 ops/s
# Warmup Iteration  26: 7224852.179 ops/s
# Warmup Iteration  27: 7198128.968 ops/s
# Warmup Iteration  28: 7203840.341 ops/s
# Warmup Iteration  29: 7196965.373 ops/s
# Warmup Iteration  30: 7189823.099 ops/s
Iteration   1: 7224109.544 ops/s
Iteration   2: 7237138.596 ops/s
Iteration   3: 7147798.631 ops/s
Iteration   4: 7245928.050 ops/s
Iteration   5: 7229772.648 ops/s
Iteration   6: 7236896.246 ops/s
Iteration   7: 7236151.942 ops/s
Iteration   8: 7219592.687 ops/s
Iteration   9: 7220810.293 ops/s
Iteration  10: 7207152.556 ops/s
Iteration  11: 7207671.020 ops/s
Iteration  12: 7213345.502 ops/s
Iteration  13: 7197942.159 ops/s
Iteration  14: 7205651.664 ops/s
Iteration  15: 7190785.235 ops/s
Iteration  16: 7234811.585 ops/s
Iteration  17: 7220051.140 ops/s
Iteration  18: 7237123.133 ops/s
Iteration  19: 7229307.178 ops/s
Iteration  20: 7245280.783 ops/s
Iteration  21: 7250152.791 ops/s
Iteration  22: 7248758.742 ops/s
Iteration  23: 7246389.312 ops/s
Iteration  24: 7252752.335 ops/s
Iteration  25: 7212986.847 ops/s
Iteration  26: 7198139.311 ops/s
Iteration  27: 7204625.530 ops/s
Iteration  28: 7194435.795 ops/s
Iteration  29: 7261538.827 ops/s
Iteration  30: 7228489.861 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey":
  7222852.998 ±(99.9%) 15917.129 ops/s [Average]
  (min, avg, max) = (7147798.631, 7222852.998, 7261538.827), stdev = 23824.012
  CI (99.9%): [7206935.869, 7238770.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  7222852.998 ± 15917.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2216412.150 ops/s
# Warmup Iteration   2: 4547411.913 ops/s
# Warmup Iteration   3: 4861121.270 ops/s
# Warmup Iteration   4: 4884763.324 ops/s
# Warmup Iteration   5: 4016882.175 ops/s
# Warmup Iteration   6: 4893382.808 ops/s
# Warmup Iteration   7: 4894140.601 ops/s
# Warmup Iteration   8: 4876750.652 ops/s
# Warmup Iteration   9: 4890360.369 ops/s
# Warmup Iteration  10: 4887570.814 ops/s
# Warmup Iteration  11: 4889134.029 ops/s
# Warmup Iteration  12: 4891385.202 ops/s
# Warmup Iteration  13: 4885504.471 ops/s
# Warmup Iteration  14: 4890464.464 ops/s
# Warmup Iteration  15: 4881905.338 ops/s
# Warmup Iteration  16: 4883319.952 ops/s
# Warmup Iteration  17: 4901507.578 ops/s
# Warmup Iteration  18: 4902313.264 ops/s
# Warmup Iteration  19: 4904463.211 ops/s
# Warmup Iteration  20: 4894519.330 ops/s
# Warmup Iteration  21: 4907848.749 ops/s
# Warmup Iteration  22: 4904228.741 ops/s
# Warmup Iteration  23: 4901473.245 ops/s
# Warmup Iteration  24: 4899990.488 ops/s
# Warmup Iteration  25: 4901364.450 ops/s
# Warmup Iteration  26: 4902169.064 ops/s
# Warmup Iteration  27: 4904751.040 ops/s
# Warmup Iteration  28: 4904772.021 ops/s
# Warmup Iteration  29: 4899730.919 ops/s
# Warmup Iteration  30: 4906656.765 ops/s
Iteration   1: 4893254.702 ops/s
Iteration   2: 4887465.583 ops/s
Iteration   3: 4892242.422 ops/s
Iteration   4: 4885579.744 ops/s
Iteration   5: 4897556.608 ops/s
Iteration   6: 4895474.203 ops/s
Iteration   7: 4880298.328 ops/s
Iteration   8: 4908960.441 ops/s
Iteration   9: 4899173.450 ops/s
Iteration  10: 4900673.416 ops/s
Iteration  11: 4903348.792 ops/s
Iteration  12: 4902244.254 ops/s
Iteration  13: 4903167.712 ops/s
Iteration  14: 4899713.459 ops/s
Iteration  15: 4908343.083 ops/s
Iteration  16: 4903601.858 ops/s
Iteration  17: 4902707.895 ops/s
Iteration  18: 4900667.910 ops/s
Iteration  19: 4907838.863 ops/s
Iteration  20: 4899787.672 ops/s
Iteration  21: 4899091.873 ops/s
Iteration  22: 4898497.349 ops/s
Iteration  23: 4900509.724 ops/s
Iteration  24: 4886886.399 ops/s
Iteration  25: 4897180.570 ops/s
Iteration  26: 4906085.780 ops/s
Iteration  27: 4909203.826 ops/s
Iteration  28: 4903825.029 ops/s
Iteration  29: 4901041.531 ops/s
Iteration  30: 4907989.488 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target":
  4899413.732 ±(99.9%) 4835.738 ops/s [Average]
  (min, avg, max) = (4880298.328, 4899413.732, 4909203.826), stdev = 7237.905
  CI (99.9%): [4894577.995, 4904249.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4899413.732 ± 4835.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549773.040 ops/s
# Warmup Iteration   2: 610725.724 ops/s
# Warmup Iteration   3: 807821.482 ops/s
# Warmup Iteration   4: 805166.455 ops/s
# Warmup Iteration   5: 801369.927 ops/s
# Warmup Iteration   6: 805618.522 ops/s
# Warmup Iteration   7: 806880.035 ops/s
# Warmup Iteration   8: 805523.334 ops/s
# Warmup Iteration   9: 805672.006 ops/s
# Warmup Iteration  10: 736022.643 ops/s
# Warmup Iteration  11: 742486.850 ops/s
# Warmup Iteration  12: 805712.912 ops/s
# Warmup Iteration  13: 804700.954 ops/s
# Warmup Iteration  14: 802344.214 ops/s
# Warmup Iteration  15: 806677.639 ops/s
# Warmup Iteration  16: 804686.570 ops/s
# Warmup Iteration  17: 842792.146 ops/s
# Warmup Iteration  18: 843428.058 ops/s
# Warmup Iteration  19: 842362.893 ops/s
# Warmup Iteration  20: 843838.043 ops/s
# Warmup Iteration  21: 841400.666 ops/s
# Warmup Iteration  22: 842050.645 ops/s
# Warmup Iteration  23: 841550.649 ops/s
# Warmup Iteration  24: 841426.723 ops/s
# Warmup Iteration  25: 842262.114 ops/s
# Warmup Iteration  26: 841866.793 ops/s
# Warmup Iteration  27: 842550.347 ops/s
# Warmup Iteration  28: 841871.661 ops/s
# Warmup Iteration  29: 842694.106 ops/s
# Warmup Iteration  30: 842319.143 ops/s
Iteration   1: 841631.695 ops/s
Iteration   2: 843979.789 ops/s
Iteration   3: 843304.095 ops/s
Iteration   4: 844018.246 ops/s
Iteration   5: 841418.051 ops/s
Iteration   6: 843888.244 ops/s
Iteration   7: 843316.548 ops/s
Iteration   8: 839457.061 ops/s
Iteration   9: 838960.353 ops/s
Iteration  10: 842776.229 ops/s
Iteration  11: 842413.871 ops/s
Iteration  12: 841446.292 ops/s
Iteration  13: 844492.921 ops/s
Iteration  14: 843378.681 ops/s
Iteration  15: 842670.231 ops/s
Iteration  16: 841510.351 ops/s
Iteration  17: 841245.599 ops/s
Iteration  18: 842052.708 ops/s
Iteration  19: 839597.587 ops/s
Iteration  20: 841324.072 ops/s
Iteration  21: 840272.650 ops/s
Iteration  22: 839149.525 ops/s
Iteration  23: 841736.145 ops/s
Iteration  24: 841121.390 ops/s
Iteration  25: 843193.068 ops/s
Iteration  26: 844979.292 ops/s
Iteration  27: 844604.087 ops/s
Iteration  28: 844188.176 ops/s
Iteration  29: 840812.325 ops/s
Iteration  30: 844628.996 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  842252.276 ±(99.9%) 1164.433 ops/s [Average]
  (min, avg, max) = (838960.353, 842252.276, 844979.292), stdev = 1742.869
  CI (99.9%): [841087.843, 843416.709] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  842252.276 ± 1164.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567084.791 ops/s
# Warmup Iteration   2: 628337.973 ops/s
# Warmup Iteration   3: 846025.536 ops/s
# Warmup Iteration   4: 843649.565 ops/s
# Warmup Iteration   5: 841040.189 ops/s
# Warmup Iteration   6: 843322.860 ops/s
# Warmup Iteration   7: 840118.896 ops/s
# Warmup Iteration   8: 844093.429 ops/s
# Warmup Iteration   9: 842005.156 ops/s
# Warmup Iteration  10: 836278.768 ops/s
# Warmup Iteration  11: 706522.614 ops/s
# Warmup Iteration  12: 844774.296 ops/s
# Warmup Iteration  13: 845001.604 ops/s
# Warmup Iteration  14: 845042.730 ops/s
# Warmup Iteration  15: 844334.362 ops/s
# Warmup Iteration  16: 843778.108 ops/s
# Warmup Iteration  17: 889506.202 ops/s
# Warmup Iteration  18: 891965.778 ops/s
# Warmup Iteration  19: 893019.480 ops/s
# Warmup Iteration  20: 891744.300 ops/s
# Warmup Iteration  21: 893612.366 ops/s
# Warmup Iteration  22: 890182.398 ops/s
# Warmup Iteration  23: 890520.668 ops/s
# Warmup Iteration  24: 892423.770 ops/s
# Warmup Iteration  25: 891920.205 ops/s
# Warmup Iteration  26: 892415.110 ops/s
# Warmup Iteration  27: 891660.002 ops/s
# Warmup Iteration  28: 892412.008 ops/s
# Warmup Iteration  29: 893145.086 ops/s
# Warmup Iteration  30: 891678.160 ops/s
Iteration   1: 892712.158 ops/s
Iteration   2: 892088.589 ops/s
Iteration   3: 891096.494 ops/s
Iteration   4: 893032.430 ops/s
Iteration   5: 893265.122 ops/s
Iteration   6: 894505.137 ops/s
Iteration   7: 891936.254 ops/s
Iteration   8: 894661.757 ops/s
Iteration   9: 894323.849 ops/s
Iteration  10: 890697.180 ops/s
Iteration  11: 894114.762 ops/s
Iteration  12: 894699.125 ops/s
Iteration  13: 892288.992 ops/s
Iteration  14: 894058.861 ops/s
Iteration  15: 893399.937 ops/s
Iteration  16: 892820.169 ops/s
Iteration  17: 891740.185 ops/s
Iteration  18: 894617.539 ops/s
Iteration  19: 893507.369 ops/s
Iteration  20: 892813.548 ops/s
Iteration  21: 893599.453 ops/s
Iteration  22: 893986.944 ops/s
Iteration  23: 893739.600 ops/s
Iteration  24: 891465.267 ops/s
Iteration  25: 892669.505 ops/s
Iteration  26: 893288.210 ops/s
Iteration  27: 892042.339 ops/s
Iteration  28: 892339.129 ops/s
Iteration  29: 892028.226 ops/s
Iteration  30: 891721.648 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_throws":
  892975.326 ±(99.9%) 750.662 ops/s [Average]
  (min, avg, max) = (890697.180, 892975.326, 894699.125), stdev = 1123.555
  CI (99.9%): [892224.664, 893725.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  892975.326 ± 750.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7721738.010 ops/s
# Warmup Iteration   2: 15682728.277 ops/s
# Warmup Iteration   3: 13439098.500 ops/s
# Warmup Iteration   4: 15839037.985 ops/s
# Warmup Iteration   5: 15783137.508 ops/s
# Warmup Iteration   6: 15802220.181 ops/s
# Warmup Iteration   7: 15837861.823 ops/s
# Warmup Iteration   8: 15817543.355 ops/s
# Warmup Iteration   9: 15820403.651 ops/s
# Warmup Iteration  10: 15815887.079 ops/s
# Warmup Iteration  11: 15781449.186 ops/s
# Warmup Iteration  12: 15863315.969 ops/s
# Warmup Iteration  13: 15832251.239 ops/s
# Warmup Iteration  14: 15885427.697 ops/s
# Warmup Iteration  15: 15838455.488 ops/s
# Warmup Iteration  16: 15820786.365 ops/s
# Warmup Iteration  17: 15883777.632 ops/s
# Warmup Iteration  18: 15938168.714 ops/s
# Warmup Iteration  19: 15872011.988 ops/s
# Warmup Iteration  20: 15914022.199 ops/s
# Warmup Iteration  21: 15950999.283 ops/s
# Warmup Iteration  22: 15921038.608 ops/s
# Warmup Iteration  23: 15888339.608 ops/s
# Warmup Iteration  24: 15832033.524 ops/s
# Warmup Iteration  25: 15882135.054 ops/s
# Warmup Iteration  26: 15980289.750 ops/s
# Warmup Iteration  27: 15893881.394 ops/s
# Warmup Iteration  28: 15887395.269 ops/s
# Warmup Iteration  29: 15926672.025 ops/s
# Warmup Iteration  30: 15924803.187 ops/s
Iteration   1: 15913013.377 ops/s
Iteration   2: 16023821.795 ops/s
Iteration   3: 15912342.569 ops/s
Iteration   4: 15863002.688 ops/s
Iteration   5: 15983889.544 ops/s
Iteration   6: 15910066.334 ops/s
Iteration   7: 15960378.239 ops/s
Iteration   8: 15972085.000 ops/s
Iteration   9: 15946498.030 ops/s
Iteration  10: 15889351.366 ops/s
Iteration  11: 15942920.725 ops/s
Iteration  12: 15963746.976 ops/s
Iteration  13: 15902285.616 ops/s
Iteration  14: 15940069.483 ops/s
Iteration  15: 15825868.635 ops/s
Iteration  16: 15796187.031 ops/s
Iteration  17: 15835475.637 ops/s
Iteration  18: 15912033.568 ops/s
Iteration  19: 15842823.769 ops/s
Iteration  20: 15868986.177 ops/s
Iteration  21: 15877147.925 ops/s
Iteration  22: 15905787.695 ops/s
Iteration  23: 15902319.935 ops/s
Iteration  24: 15884980.023 ops/s
Iteration  25: 15896232.658 ops/s
Iteration  26: 15898518.404 ops/s
Iteration  27: 15938672.002 ops/s
Iteration  28: 15904427.291 ops/s
Iteration  29: 15899084.529 ops/s
Iteration  30: 15932051.585 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_indexOf":
  15908135.620 ±(99.9%) 32581.646 ops/s [Average]
  (min, avg, max) = (15796187.031, 15908135.620, 16023821.795), stdev = 48766.678
  CI (99.9%): [15875553.974, 15940717.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_indexOf  thrpt   30  15908135.620 ± 32581.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12250233.573 ops/s
# Warmup Iteration   2: 24407697.130 ops/s
# Warmup Iteration   3: 20706738.704 ops/s
# Warmup Iteration   4: 24490911.278 ops/s
# Warmup Iteration   5: 24487437.043 ops/s
# Warmup Iteration   6: 24471024.694 ops/s
# Warmup Iteration   7: 24451596.307 ops/s
# Warmup Iteration   8: 24403009.335 ops/s
# Warmup Iteration   9: 24485637.811 ops/s
# Warmup Iteration  10: 24475031.194 ops/s
# Warmup Iteration  11: 24437217.954 ops/s
# Warmup Iteration  12: 24436669.048 ops/s
# Warmup Iteration  13: 24515550.994 ops/s
# Warmup Iteration  14: 24439756.436 ops/s
# Warmup Iteration  15: 24497705.434 ops/s
# Warmup Iteration  16: 24470524.351 ops/s
# Warmup Iteration  17: 24529706.487 ops/s
# Warmup Iteration  18: 24485263.053 ops/s
# Warmup Iteration  19: 24469430.610 ops/s
# Warmup Iteration  20: 23673858.678 ops/s
# Warmup Iteration  21: 22345696.589 ops/s
# Warmup Iteration  22: 24538450.388 ops/s
# Warmup Iteration  23: 24494893.796 ops/s
# Warmup Iteration  24: 24528397.336 ops/s
# Warmup Iteration  25: 24503856.657 ops/s
# Warmup Iteration  26: 24528328.978 ops/s
# Warmup Iteration  27: 24481007.918 ops/s
# Warmup Iteration  28: 24478191.585 ops/s
# Warmup Iteration  29: 24534348.357 ops/s
# Warmup Iteration  30: 24519316.911 ops/s
Iteration   1: 24541589.228 ops/s
Iteration   2: 24446630.957 ops/s
Iteration   3: 24513554.259 ops/s
Iteration   4: 24533623.353 ops/s
Iteration   5: 24504646.428 ops/s
Iteration   6: 24533249.329 ops/s
Iteration   7: 24539179.800 ops/s
Iteration   8: 24509572.592 ops/s
Iteration   9: 24477246.110 ops/s
Iteration  10: 24576718.549 ops/s
Iteration  11: 24586333.950 ops/s
Iteration  12: 24485114.554 ops/s
Iteration  13: 24474066.794 ops/s
Iteration  14: 24522635.806 ops/s
Iteration  15: 24454669.187 ops/s
Iteration  16: 24502279.285 ops/s
Iteration  17: 24498639.740 ops/s
Iteration  18: 24464957.601 ops/s
Iteration  19: 24501900.587 ops/s
Iteration  20: 24486968.969 ops/s
Iteration  21: 24528203.201 ops/s
Iteration  22: 24485248.642 ops/s
Iteration  23: 24501771.112 ops/s
Iteration  24: 24549527.959 ops/s
Iteration  25: 24471519.557 ops/s
Iteration  26: 24478786.760 ops/s
Iteration  27: 24530885.237 ops/s
Iteration  28: 24434594.922 ops/s
Iteration  29: 24549473.582 ops/s
Iteration  30: 24476045.385 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectInto":
  24505321.114 ±(99.9%) 24659.663 ops/s [Average]
  (min, avg, max) = (24434594.922, 24505321.114, 24586333.950), stdev = 36909.426
  CI (99.9%): [24480661.451, 24529980.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_injectInto  thrpt   30  24505321.114 ± 24659.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9472358.759 ops/s
# Warmup Iteration   2: 19414623.389 ops/s
# Warmup Iteration   3: 16458623.442 ops/s
# Warmup Iteration   4: 19527880.263 ops/s
# Warmup Iteration   5: 19543613.121 ops/s
# Warmup Iteration   6: 19515571.987 ops/s
# Warmup Iteration   7: 19539481.609 ops/s
# Warmup Iteration   8: 19493098.872 ops/s
# Warmup Iteration   9: 19504136.857 ops/s
# Warmup Iteration  10: 19506469.362 ops/s
# Warmup Iteration  11: 19462252.061 ops/s
# Warmup Iteration  12: 19522924.713 ops/s
# Warmup Iteration  13: 19418292.117 ops/s
# Warmup Iteration  14: 19494618.460 ops/s
# Warmup Iteration  15: 19504160.755 ops/s
# Warmup Iteration  16: 19471874.849 ops/s
# Warmup Iteration  17: 19489280.194 ops/s
# Warmup Iteration  18: 19462546.113 ops/s
# Warmup Iteration  19: 19513477.345 ops/s
# Warmup Iteration  20: 19509553.467 ops/s
# Warmup Iteration  21: 19492315.584 ops/s
# Warmup Iteration  22: 19492045.601 ops/s
# Warmup Iteration  23: 19537605.787 ops/s
# Warmup Iteration  24: 19461697.446 ops/s
# Warmup Iteration  25: 19503071.869 ops/s
# Warmup Iteration  26: 19494075.705 ops/s
# Warmup Iteration  27: 19547265.916 ops/s
# Warmup Iteration  28: 19474620.488 ops/s
# Warmup Iteration  29: 19454855.469 ops/s
# Warmup Iteration  30: 19477677.206 ops/s
Iteration   1: 19473400.353 ops/s
Iteration   2: 19510601.145 ops/s
Iteration   3: 19504716.737 ops/s
Iteration   4: 19539919.547 ops/s
Iteration   5: 19518930.114 ops/s
Iteration   6: 19488981.102 ops/s
Iteration   7: 19500626.521 ops/s
Iteration   8: 19450350.417 ops/s
Iteration   9: 19464467.545 ops/s
Iteration  10: 19488882.302 ops/s
Iteration  11: 19509108.138 ops/s
Iteration  12: 19458096.394 ops/s
Iteration  13: 19498168.223 ops/s
Iteration  14: 19537256.693 ops/s
Iteration  15: 19477224.266 ops/s
Iteration  16: 19431239.795 ops/s
Iteration  17: 19444333.107 ops/s
Iteration  18: 19476374.298 ops/s
Iteration  19: 19476086.146 ops/s
Iteration  20: 19451708.327 ops/s
Iteration  21: 19454902.396 ops/s
Iteration  22: 19495881.241 ops/s
Iteration  23: 19482370.696 ops/s
Iteration  24: 19491878.252 ops/s
Iteration  25: 19502754.135 ops/s
Iteration  26: 19448130.828 ops/s
Iteration  27: 19502450.603 ops/s
Iteration  28: 19499661.550 ops/s
Iteration  29: 19521766.909 ops/s
Iteration  30: 19532613.739 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoDouble":
  19487762.717 ±(99.9%) 19212.773 ops/s [Average]
  (min, avg, max) = (19431239.795, 19487762.717, 19539919.547), stdev = 28756.776
  CI (99.9%): [19468549.944, 19506975.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  19487762.717 ± 19212.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8711220.631 ops/s
# Warmup Iteration   2: 18123412.143 ops/s
# Warmup Iteration   3: 16556216.822 ops/s
# Warmup Iteration   4: 17005306.320 ops/s
# Warmup Iteration   5: 18227058.948 ops/s
# Warmup Iteration   6: 18214092.606 ops/s
# Warmup Iteration   7: 18209275.977 ops/s
# Warmup Iteration   8: 18200642.878 ops/s
# Warmup Iteration   9: 18215421.612 ops/s
# Warmup Iteration  10: 18210594.120 ops/s
# Warmup Iteration  11: 18185799.060 ops/s
# Warmup Iteration  12: 18209338.535 ops/s
# Warmup Iteration  13: 18174608.192 ops/s
# Warmup Iteration  14: 18175359.975 ops/s
# Warmup Iteration  15: 18227903.285 ops/s
# Warmup Iteration  16: 18219788.628 ops/s
# Warmup Iteration  17: 18201519.441 ops/s
# Warmup Iteration  18: 18224897.835 ops/s
# Warmup Iteration  19: 18218293.788 ops/s
# Warmup Iteration  20: 18183575.317 ops/s
# Warmup Iteration  21: 18164933.286 ops/s
# Warmup Iteration  22: 18144103.208 ops/s
# Warmup Iteration  23: 18140246.476 ops/s
# Warmup Iteration  24: 18216080.926 ops/s
# Warmup Iteration  25: 18177066.045 ops/s
# Warmup Iteration  26: 18231469.765 ops/s
# Warmup Iteration  27: 18212917.544 ops/s
# Warmup Iteration  28: 18184014.585 ops/s
# Warmup Iteration  29: 18189120.596 ops/s
# Warmup Iteration  30: 18182562.305 ops/s
Iteration   1: 18218937.367 ops/s
Iteration   2: 18225164.655 ops/s
Iteration   3: 18169632.787 ops/s
Iteration   4: 18234396.339 ops/s
Iteration   5: 18204125.319 ops/s
Iteration   6: 18223211.062 ops/s
Iteration   7: 18168504.988 ops/s
Iteration   8: 18245223.927 ops/s
Iteration   9: 18224054.140 ops/s
Iteration  10: 18203157.535 ops/s
Iteration  11: 18212445.446 ops/s
Iteration  12: 18201019.104 ops/s
Iteration  13: 18194626.010 ops/s
Iteration  14: 18200801.792 ops/s
Iteration  15: 18144687.781 ops/s
Iteration  16: 18198413.870 ops/s
Iteration  17: 18182849.970 ops/s
Iteration  18: 18179875.719 ops/s
Iteration  19: 18201978.412 ops/s
Iteration  20: 18207228.526 ops/s
Iteration  21: 18205024.592 ops/s
Iteration  22: 18181302.971 ops/s
Iteration  23: 18179092.528 ops/s
Iteration  24: 18171602.978 ops/s
Iteration  25: 18183619.579 ops/s
Iteration  26: 18209994.245 ops/s
Iteration  27: 18198671.015 ops/s
Iteration  28: 18198330.011 ops/s
Iteration  29: 18187228.184 ops/s
Iteration  30: 18207336.558 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoFloat":
  18198751.247 ±(99.9%) 14384.417 ops/s [Average]
  (min, avg, max) = (18144687.781, 18198751.247, 18245223.927), stdev = 21529.919
  CI (99.9%): [18184366.830, 18213135.664] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  18198751.247 ± 14384.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11187079.159 ops/s
# Warmup Iteration   2: 22177395.914 ops/s
# Warmup Iteration   3: 19245155.605 ops/s
# Warmup Iteration   4: 22684433.588 ops/s
# Warmup Iteration   5: 22678763.077 ops/s
# Warmup Iteration   6: 22707314.849 ops/s
# Warmup Iteration   7: 22692719.980 ops/s
# Warmup Iteration   8: 22719632.488 ops/s
# Warmup Iteration   9: 22692898.650 ops/s
# Warmup Iteration  10: 22684210.858 ops/s
# Warmup Iteration  11: 22653814.895 ops/s
# Warmup Iteration  12: 22668089.479 ops/s
# Warmup Iteration  13: 22688169.308 ops/s
# Warmup Iteration  14: 22677203.123 ops/s
# Warmup Iteration  15: 22681348.269 ops/s
# Warmup Iteration  16: 22716664.517 ops/s
# Warmup Iteration  17: 22701049.886 ops/s
# Warmup Iteration  18: 22657488.545 ops/s
# Warmup Iteration  19: 22653699.337 ops/s
# Warmup Iteration  20: 22666364.086 ops/s
# Warmup Iteration  21: 22665452.642 ops/s
# Warmup Iteration  22: 22681024.654 ops/s
# Warmup Iteration  23: 22704495.851 ops/s
# Warmup Iteration  24: 22670725.704 ops/s
# Warmup Iteration  25: 22682791.214 ops/s
# Warmup Iteration  26: 22660017.427 ops/s
# Warmup Iteration  27: 22651031.867 ops/s
# Warmup Iteration  28: 22661796.903 ops/s
# Warmup Iteration  29: 22653519.927 ops/s
# Warmup Iteration  30: 22719927.166 ops/s
Iteration   1: 22733789.018 ops/s
Iteration   2: 22686516.470 ops/s
Iteration   3: 22653127.643 ops/s
Iteration   4: 22653083.143 ops/s
Iteration   5: 22589499.211 ops/s
Iteration   6: 22659274.628 ops/s
Iteration   7: 22686219.619 ops/s
Iteration   8: 22713007.382 ops/s
Iteration   9: 22819019.106 ops/s
Iteration  10: 22656805.314 ops/s
Iteration  11: 22708761.905 ops/s
Iteration  12: 22703861.796 ops/s
Iteration  13: 22691486.779 ops/s
Iteration  14: 22752105.261 ops/s
Iteration  15: 22574239.100 ops/s
Iteration  16: 22708213.443 ops/s
Iteration  17: 22691575.688 ops/s
Iteration  18: 22707424.727 ops/s
Iteration  19: 22727073.709 ops/s
Iteration  20: 22667724.476 ops/s
Iteration  21: 22703244.835 ops/s
Iteration  22: 22719745.204 ops/s
Iteration  23: 22696776.996 ops/s
Iteration  24: 22730520.485 ops/s
Iteration  25: 22614673.084 ops/s
Iteration  26: 22700936.224 ops/s
Iteration  27: 22687450.280 ops/s
Iteration  28: 22605627.837 ops/s
Iteration  29: 22655370.009 ops/s
Iteration  30: 22652960.716 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoInt":
  22685003.803 ±(99.9%) 33241.597 ops/s [Average]
  (min, avg, max) = (22574239.100, 22685003.803, 22819019.106), stdev = 49754.462
  CI (99.9%): [22651762.206, 22718245.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  22685003.803 ± 33241.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11063836.664 ops/s
# Warmup Iteration   2: 22393316.057 ops/s
# Warmup Iteration   3: 19157738.683 ops/s
# Warmup Iteration   4: 22630307.305 ops/s
# Warmup Iteration   5: 22657858.145 ops/s
# Warmup Iteration   6: 22739311.271 ops/s
# Warmup Iteration   7: 22730191.694 ops/s
# Warmup Iteration   8: 22716462.200 ops/s
# Warmup Iteration   9: 22752211.272 ops/s
# Warmup Iteration  10: 22681160.752 ops/s
# Warmup Iteration  11: 22761478.658 ops/s
# Warmup Iteration  12: 22688696.140 ops/s
# Warmup Iteration  13: 22745743.901 ops/s
# Warmup Iteration  14: 22725000.644 ops/s
# Warmup Iteration  15: 22766844.923 ops/s
# Warmup Iteration  16: 22785376.494 ops/s
# Warmup Iteration  17: 22717047.667 ops/s
# Warmup Iteration  18: 22742595.934 ops/s
# Warmup Iteration  19: 22718800.621 ops/s
# Warmup Iteration  20: 22714393.120 ops/s
# Warmup Iteration  21: 22689378.135 ops/s
# Warmup Iteration  22: 22694650.916 ops/s
# Warmup Iteration  23: 22699867.632 ops/s
# Warmup Iteration  24: 22596162.285 ops/s
# Warmup Iteration  25: 22676369.899 ops/s
# Warmup Iteration  26: 22664669.731 ops/s
# Warmup Iteration  27: 22727419.570 ops/s
# Warmup Iteration  28: 22702705.633 ops/s
# Warmup Iteration  29: 22737000.557 ops/s
# Warmup Iteration  30: 22708856.449 ops/s
Iteration   1: 22774811.244 ops/s
Iteration   2: 22693453.559 ops/s
Iteration   3: 22711564.768 ops/s
Iteration   4: 22729034.021 ops/s
Iteration   5: 22732652.702 ops/s
Iteration   6: 22723093.654 ops/s
Iteration   7: 22653962.097 ops/s
Iteration   8: 22748065.966 ops/s
Iteration   9: 22739015.311 ops/s
Iteration  10: 22742051.235 ops/s
Iteration  11: 22787957.182 ops/s
Iteration  12: 22758400.229 ops/s
Iteration  13: 22757850.580 ops/s
Iteration  14: 22753869.929 ops/s
Iteration  15: 22726282.704 ops/s
Iteration  16: 22798410.806 ops/s
Iteration  17: 22749426.023 ops/s
Iteration  18: 22736023.081 ops/s
Iteration  19: 22770302.720 ops/s
Iteration  20: 22725145.878 ops/s
Iteration  21: 22808142.565 ops/s
Iteration  22: 22751380.242 ops/s
Iteration  23: 22689358.207 ops/s
Iteration  24: 22711824.042 ops/s
Iteration  25: 22700543.363 ops/s
Iteration  26: 22758946.421 ops/s
Iteration  27: 22697232.430 ops/s
Iteration  28: 22713021.893 ops/s
Iteration  29: 22718183.907 ops/s
Iteration  30: 22710212.692 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_injectIntoLong":
  22735673.982 ±(99.9%) 22714.032 ops/s [Average]
  (min, avg, max) = (22653962.097, 22735673.982, 22808142.565), stdev = 33997.296
  CI (99.9%): [22712959.950, 22758388.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  22735673.982 ± 22714.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28176291.507 ops/s
# Warmup Iteration   2: 50978416.354 ops/s
# Warmup Iteration   3: 49039857.846 ops/s
# Warmup Iteration   4: 53143194.857 ops/s
# Warmup Iteration   5: 53070212.825 ops/s
# Warmup Iteration   6: 53137849.065 ops/s
# Warmup Iteration   7: 52916952.474 ops/s
# Warmup Iteration   8: 53024188.366 ops/s
# Warmup Iteration   9: 52956288.219 ops/s
# Warmup Iteration  10: 53064847.120 ops/s
# Warmup Iteration  11: 53080795.431 ops/s
# Warmup Iteration  12: 52994955.101 ops/s
# Warmup Iteration  13: 52898224.376 ops/s
# Warmup Iteration  14: 52845932.934 ops/s
# Warmup Iteration  15: 53121388.935 ops/s
# Warmup Iteration  16: 53097257.120 ops/s
# Warmup Iteration  17: 53064447.534 ops/s
# Warmup Iteration  18: 52753211.832 ops/s
# Warmup Iteration  19: 52798049.177 ops/s
# Warmup Iteration  20: 52985175.425 ops/s
# Warmup Iteration  21: 53063583.551 ops/s
# Warmup Iteration  22: 53156629.063 ops/s
# Warmup Iteration  23: 53081460.648 ops/s
# Warmup Iteration  24: 53014673.369 ops/s
# Warmup Iteration  25: 53077486.281 ops/s
# Warmup Iteration  26: 53218497.100 ops/s
# Warmup Iteration  27: 53040122.106 ops/s
# Warmup Iteration  28: 52881735.993 ops/s
# Warmup Iteration  29: 52844148.448 ops/s
# Warmup Iteration  30: 52858555.206 ops/s
Iteration   1: 53132587.753 ops/s
Iteration   2: 53051693.783 ops/s
Iteration   3: 52906808.463 ops/s
Iteration   4: 53282759.050 ops/s
Iteration   5: 53089417.504 ops/s
Iteration   6: 53264454.157 ops/s
Iteration   7: 53078721.976 ops/s
Iteration   8: 53166564.859 ops/s
Iteration   9: 53220052.071 ops/s
Iteration  10: 53224934.963 ops/s
Iteration  11: 53370178.756 ops/s
Iteration  12: 53018395.970 ops/s
Iteration  13: 52887896.039 ops/s
Iteration  14: 53162624.856 ops/s
Iteration  15: 53119854.895 ops/s
Iteration  16: 53113633.676 ops/s
Iteration  17: 53006305.686 ops/s
Iteration  18: 52907313.737 ops/s
Iteration  19: 52989580.406 ops/s
Iteration  20: 52933333.216 ops/s
Iteration  21: 52860547.336 ops/s
Iteration  22: 52819937.271 ops/s
Iteration  23: 53017013.231 ops/s
Iteration  24: 52849066.328 ops/s
Iteration  25: 53043391.388 ops/s
Iteration  26: 53136572.361 ops/s
Iteration  27: 52874583.643 ops/s
Iteration  28: 52973669.873 ops/s
Iteration  29: 53287033.714 ops/s
Iteration  30: 53114567.046 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_isEmpty":
  53063449.800 ±(99.9%) 97945.843 ops/s [Average]
  (min, avg, max) = (52819937.271, 53063449.800, 53370178.756), stdev = 146600.738
  CI (99.9%): [52965503.957, 53161395.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_isEmpty  thrpt   30  53063449.800 ± 97945.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754048.807 ops/s
# Warmup Iteration   2: 787872.602 ops/s
# Warmup Iteration   3: 1035318.590 ops/s
# Warmup Iteration   4: 1051141.012 ops/s
# Warmup Iteration   5: 1053053.537 ops/s
# Warmup Iteration   6: 1041526.555 ops/s
# Warmup Iteration   7: 1051094.821 ops/s
# Warmup Iteration   8: 1054390.422 ops/s
# Warmup Iteration   9: 1052154.943 ops/s
# Warmup Iteration  10: 1051957.801 ops/s
# Warmup Iteration  11: 1054100.369 ops/s
# Warmup Iteration  12: 879663.465 ops/s
# Warmup Iteration  13: 1052812.604 ops/s
# Warmup Iteration  14: 1051627.375 ops/s
# Warmup Iteration  15: 1052240.620 ops/s
# Warmup Iteration  16: 1052111.805 ops/s
# Warmup Iteration  17: 1121745.241 ops/s
# Warmup Iteration  18: 1122285.600 ops/s
# Warmup Iteration  19: 1121581.239 ops/s
# Warmup Iteration  20: 1122164.147 ops/s
# Warmup Iteration  21: 1122164.053 ops/s
# Warmup Iteration  22: 1117661.273 ops/s
# Warmup Iteration  23: 1121829.639 ops/s
# Warmup Iteration  24: 1120366.361 ops/s
# Warmup Iteration  25: 1113160.080 ops/s
# Warmup Iteration  26: 1118941.844 ops/s
# Warmup Iteration  27: 1122728.871 ops/s
# Warmup Iteration  28: 1120041.837 ops/s
# Warmup Iteration  29: 1119958.879 ops/s
# Warmup Iteration  30: 1116007.641 ops/s
Iteration   1: 1120166.597 ops/s
Iteration   2: 1119837.449 ops/s
Iteration   3: 1121764.211 ops/s
Iteration   4: 1117111.512 ops/s
Iteration   5: 1119613.183 ops/s
Iteration   6: 1116406.027 ops/s
Iteration   7: 1116727.374 ops/s
Iteration   8: 1116581.990 ops/s
Iteration   9: 1119334.794 ops/s
Iteration  10: 1119555.509 ops/s
Iteration  11: 1117433.786 ops/s
Iteration  12: 1122683.045 ops/s
Iteration  13: 1122198.592 ops/s
Iteration  14: 1122096.169 ops/s
Iteration  15: 1119640.830 ops/s
Iteration  16: 1121534.428 ops/s
Iteration  17: 1119575.067 ops/s
Iteration  18: 1121519.429 ops/s
Iteration  19: 1119079.298 ops/s
Iteration  20: 1120940.024 ops/s
Iteration  21: 1120845.607 ops/s
Iteration  22: 1120216.135 ops/s
Iteration  23: 1119678.999 ops/s
Iteration  24: 1120781.069 ops/s
Iteration  25: 1120999.864 ops/s
Iteration  26: 1120654.317 ops/s
Iteration  27: 1118738.382 ops/s
Iteration  28: 1123655.893 ops/s
Iteration  29: 1120027.015 ops/s
Iteration  30: 1121095.353 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iterator":
  1120016.398 ±(99.9%) 1217.976 ops/s [Average]
  (min, avg, max) = (1116406.027, 1120016.398, 1123655.893), stdev = 1823.010
  CI (99.9%): [1118798.422, 1121234.375] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_iterator  thrpt   30  1120016.398 ± 1217.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811829.178 ops/s
# Warmup Iteration   2: 851710.201 ops/s
# Warmup Iteration   3: 1116995.144 ops/s
# Warmup Iteration   4: 1110286.793 ops/s
# Warmup Iteration   5: 1103417.179 ops/s
# Warmup Iteration   6: 1105938.493 ops/s
# Warmup Iteration   7: 1111879.237 ops/s
# Warmup Iteration   8: 1107267.625 ops/s
# Warmup Iteration   9: 1100379.376 ops/s
# Warmup Iteration  10: 1107129.999 ops/s
# Warmup Iteration  11: 1096493.972 ops/s
# Warmup Iteration  12: 950494.761 ops/s
# Warmup Iteration  13: 1109932.580 ops/s
# Warmup Iteration  14: 1109466.667 ops/s
# Warmup Iteration  15: 1107028.300 ops/s
# Warmup Iteration  16: 1111126.802 ops/s
# Warmup Iteration  17: 1185898.033 ops/s
# Warmup Iteration  18: 1191561.718 ops/s
# Warmup Iteration  19: 1190521.809 ops/s
# Warmup Iteration  20: 1187908.466 ops/s
# Warmup Iteration  21: 1190058.766 ops/s
# Warmup Iteration  22: 1186926.908 ops/s
# Warmup Iteration  23: 1187768.582 ops/s
# Warmup Iteration  24: 1186023.109 ops/s
# Warmup Iteration  25: 1190318.415 ops/s
# Warmup Iteration  26: 1190305.457 ops/s
# Warmup Iteration  27: 1190054.952 ops/s
# Warmup Iteration  28: 1191570.582 ops/s
# Warmup Iteration  29: 1190906.784 ops/s
# Warmup Iteration  30: 1195612.287 ops/s
Iteration   1: 1192747.829 ops/s
Iteration   2: 1187322.796 ops/s
Iteration   3: 1192820.945 ops/s
Iteration   4: 1190676.205 ops/s
Iteration   5: 1180804.116 ops/s
Iteration   6: 1185848.653 ops/s
Iteration   7: 1188026.916 ops/s
Iteration   8: 1188625.306 ops/s
Iteration   9: 1188419.339 ops/s
Iteration  10: 1187961.377 ops/s
Iteration  11: 1187924.793 ops/s
Iteration  12: 1183062.888 ops/s
Iteration  13: 1182460.670 ops/s
Iteration  14: 1191844.470 ops/s
Iteration  15: 1192655.634 ops/s
Iteration  16: 1186706.446 ops/s
Iteration  17: 1180463.277 ops/s
Iteration  18: 1196279.400 ops/s
Iteration  19: 1185704.381 ops/s
Iteration  20: 1186655.963 ops/s
Iteration  21: 1185018.584 ops/s
Iteration  22: 1194354.673 ops/s
Iteration  23: 1188303.534 ops/s
Iteration  24: 1191671.192 ops/s
Iteration  25: 1193709.355 ops/s
Iteration  26: 1190186.893 ops/s
Iteration  27: 1181957.708 ops/s
Iteration  28: 1191778.815 ops/s
Iteration  29: 1194612.740 ops/s
Iteration  30: 1187965.230 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_iteratorRemove":
  1188552.338 ±(99.9%) 2833.444 ops/s [Average]
  (min, avg, max) = (1180463.277, 1188552.338, 1196279.400), stdev = 4240.966
  CI (99.9%): [1185718.894, 1191385.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1188552.338 ± 2833.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6495527.298 ops/s
# Warmup Iteration   2: 12825737.246 ops/s
# Warmup Iteration   3: 11230887.475 ops/s
# Warmup Iteration   4: 13197342.141 ops/s
# Warmup Iteration   5: 13201267.936 ops/s
# Warmup Iteration   6: 13233447.687 ops/s
# Warmup Iteration   7: 13222083.113 ops/s
# Warmup Iteration   8: 13218102.336 ops/s
# Warmup Iteration   9: 13196540.245 ops/s
# Warmup Iteration  10: 13170990.630 ops/s
# Warmup Iteration  11: 13187964.139 ops/s
# Warmup Iteration  12: 13221986.947 ops/s
# Warmup Iteration  13: 13221647.397 ops/s
# Warmup Iteration  14: 13261282.454 ops/s
# Warmup Iteration  15: 13174147.015 ops/s
# Warmup Iteration  16: 13159441.398 ops/s
# Warmup Iteration  17: 13180751.728 ops/s
# Warmup Iteration  18: 13233177.618 ops/s
# Warmup Iteration  19: 13205729.134 ops/s
# Warmup Iteration  20: 13211427.375 ops/s
# Warmup Iteration  21: 13206235.800 ops/s
# Warmup Iteration  22: 13180377.693 ops/s
# Warmup Iteration  23: 13171683.378 ops/s
# Warmup Iteration  24: 13128027.815 ops/s
# Warmup Iteration  25: 13168963.672 ops/s
# Warmup Iteration  26: 13217353.355 ops/s
# Warmup Iteration  27: 13186852.028 ops/s
# Warmup Iteration  28: 13191443.356 ops/s
# Warmup Iteration  29: 13237640.777 ops/s
# Warmup Iteration  30: 13182077.756 ops/s
Iteration   1: 13215448.684 ops/s
Iteration   2: 13206890.727 ops/s
Iteration   3: 13213926.492 ops/s
Iteration   4: 13250179.484 ops/s
Iteration   5: 13158070.117 ops/s
Iteration   6: 13196575.218 ops/s
Iteration   7: 13227075.274 ops/s
Iteration   8: 13193160.030 ops/s
Iteration   9: 13187432.669 ops/s
Iteration  10: 13231698.264 ops/s
Iteration  11: 13220529.841 ops/s
Iteration  12: 13221931.207 ops/s
Iteration  13: 13167391.590 ops/s
Iteration  14: 13164884.272 ops/s
Iteration  15: 13241055.655 ops/s
Iteration  16: 13264406.831 ops/s
Iteration  17: 13222805.528 ops/s
Iteration  18: 13182026.950 ops/s
Iteration  19: 13236115.008 ops/s
Iteration  20: 13190406.715 ops/s
Iteration  21: 13197099.943 ops/s
Iteration  22: 13176477.976 ops/s
Iteration  23: 13190871.448 ops/s
Iteration  24: 13185689.093 ops/s
Iteration  25: 13155781.981 ops/s
Iteration  26: 13201946.368 ops/s
Iteration  27: 13232717.877 ops/s
Iteration  28: 13169839.894 ops/s
Iteration  29: 13188421.963 ops/s
Iteration  30: 13142629.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_lastIndexOf":
  13201116.223 ±(99.9%) 20066.257 ops/s [Average]
  (min, avg, max) = (13142629.601, 13201116.223, 13264406.831), stdev = 30034.231
  CI (99.9%): [13181049.967, 13221182.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  13201116.223 ± 20066.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 157688.577 ops/s
# Warmup Iteration   2: 183280.355 ops/s
# Warmup Iteration   3: 239280.836 ops/s
# Warmup Iteration   4: 239167.879 ops/s
# Warmup Iteration   5: 238378.063 ops/s
# Warmup Iteration   6: 239576.718 ops/s
# Warmup Iteration   7: 239007.517 ops/s
# Warmup Iteration   8: 238399.605 ops/s
# Warmup Iteration   9: 238436.107 ops/s
# Warmup Iteration  10: 203290.090 ops/s
# Warmup Iteration  11: 236438.092 ops/s
# Warmup Iteration  12: 239169.752 ops/s
# Warmup Iteration  13: 239599.002 ops/s
# Warmup Iteration  14: 239020.910 ops/s
# Warmup Iteration  15: 239488.186 ops/s
# Warmup Iteration  16: 239133.309 ops/s
# Warmup Iteration  17: 251450.757 ops/s
# Warmup Iteration  18: 252980.695 ops/s
# Warmup Iteration  19: 252963.790 ops/s
# Warmup Iteration  20: 253103.318 ops/s
# Warmup Iteration  21: 252902.922 ops/s
# Warmup Iteration  22: 252632.618 ops/s
# Warmup Iteration  23: 253449.810 ops/s
# Warmup Iteration  24: 253131.843 ops/s
# Warmup Iteration  25: 252479.441 ops/s
# Warmup Iteration  26: 252749.128 ops/s
# Warmup Iteration  27: 251896.506 ops/s
# Warmup Iteration  28: 252124.950 ops/s
# Warmup Iteration  29: 251868.745 ops/s
# Warmup Iteration  30: 251830.379 ops/s
Iteration   1: 252040.685 ops/s
Iteration   2: 253564.884 ops/s
Iteration   3: 253346.570 ops/s
Iteration   4: 252669.587 ops/s
Iteration   5: 252849.602 ops/s
Iteration   6: 253160.998 ops/s
Iteration   7: 252493.816 ops/s
Iteration   8: 253238.517 ops/s
Iteration   9: 253320.190 ops/s
Iteration  10: 252902.413 ops/s
Iteration  11: 253290.539 ops/s
Iteration  12: 252724.051 ops/s
Iteration  13: 252800.841 ops/s
Iteration  14: 253646.880 ops/s
Iteration  15: 253344.128 ops/s
Iteration  16: 252406.230 ops/s
Iteration  17: 253140.958 ops/s
Iteration  18: 252432.579 ops/s
Iteration  19: 252672.889 ops/s
Iteration  20: 250686.584 ops/s
Iteration  21: 252648.512 ops/s
Iteration  22: 252807.040 ops/s
Iteration  23: 252266.921 ops/s
Iteration  24: 252806.076 ops/s
Iteration  25: 252403.127 ops/s
Iteration  26: 252209.229 ops/s
Iteration  27: 253456.779 ops/s
Iteration  28: 253444.678 ops/s
Iteration  29: 251573.840 ops/s
Iteration  30: 251977.540 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator":
  252744.223 ±(99.9%) 431.084 ops/s [Average]
  (min, avg, max) = (250686.584, 252744.223, 253646.880), stdev = 645.227
  CI (99.9%): [252313.138, 253175.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_listIterator  thrpt   30  252744.223 ± 431.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744984.522 ops/s
# Warmup Iteration   2: 773580.044 ops/s
# Warmup Iteration   3: 1009131.269 ops/s
# Warmup Iteration   4: 1013932.817 ops/s
# Warmup Iteration   5: 1015322.607 ops/s
# Warmup Iteration   6: 1005828.733 ops/s
# Warmup Iteration   7: 1015716.166 ops/s
# Warmup Iteration   8: 1016109.611 ops/s
# Warmup Iteration   9: 1016164.725 ops/s
# Warmup Iteration  10: 1016646.390 ops/s
# Warmup Iteration  11: 1016295.854 ops/s
# Warmup Iteration  12: 857882.184 ops/s
# Warmup Iteration  13: 1013664.112 ops/s
# Warmup Iteration  14: 1012961.997 ops/s
# Warmup Iteration  15: 1013293.910 ops/s
# Warmup Iteration  16: 1013025.617 ops/s
# Warmup Iteration  17: 1069757.990 ops/s
# Warmup Iteration  18: 1069007.913 ops/s
# Warmup Iteration  19: 1069467.370 ops/s
# Warmup Iteration  20: 1069983.557 ops/s
# Warmup Iteration  21: 1071766.327 ops/s
# Warmup Iteration  22: 1069924.404 ops/s
# Warmup Iteration  23: 1071388.993 ops/s
# Warmup Iteration  24: 1071727.607 ops/s
# Warmup Iteration  25: 1071395.802 ops/s
# Warmup Iteration  26: 1071473.136 ops/s
# Warmup Iteration  27: 1071021.867 ops/s
# Warmup Iteration  28: 1071641.280 ops/s
# Warmup Iteration  29: 1071716.715 ops/s
# Warmup Iteration  30: 1071034.098 ops/s
Iteration   1: 1069608.372 ops/s
Iteration   2: 1067120.433 ops/s
Iteration   3: 1069524.254 ops/s
Iteration   4: 1068123.751 ops/s
Iteration   5: 1070135.438 ops/s
Iteration   6: 1073542.512 ops/s
Iteration   7: 1074238.560 ops/s
Iteration   8: 1071214.233 ops/s
Iteration   9: 1072015.484 ops/s
Iteration  10: 1073425.333 ops/s
Iteration  11: 1073655.092 ops/s
Iteration  12: 1071535.735 ops/s
Iteration  13: 1073407.385 ops/s
Iteration  14: 1073909.264 ops/s
Iteration  15: 1074050.474 ops/s
Iteration  16: 1069624.510 ops/s
Iteration  17: 1073257.626 ops/s
Iteration  18: 1070674.031 ops/s
Iteration  19: 1071867.249 ops/s
Iteration  20: 1069637.196 ops/s
Iteration  21: 1072003.713 ops/s
Iteration  22: 1070556.696 ops/s
Iteration  23: 1072426.779 ops/s
Iteration  24: 1069013.674 ops/s
Iteration  25: 1070398.591 ops/s
Iteration  26: 1071780.719 ops/s
Iteration  27: 1068135.146 ops/s
Iteration  28: 1070267.118 ops/s
Iteration  29: 1071414.934 ops/s
Iteration  30: 1072361.876 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1071297.539 ±(99.9%) 1295.135 ops/s [Average]
  (min, avg, max) = (1067120.433, 1071297.539, 1074238.560), stdev = 1938.497
  CI (99.9%): [1070002.405, 1072592.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1071297.539 ± 1295.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748204.091 ops/s
# Warmup Iteration   2: 777639.862 ops/s
# Warmup Iteration   3: 1012363.779 ops/s
# Warmup Iteration   4: 1012615.165 ops/s
# Warmup Iteration   5: 1009433.433 ops/s
# Warmup Iteration   6: 1004450.538 ops/s
# Warmup Iteration   7: 1014778.062 ops/s
# Warmup Iteration   8: 1017094.818 ops/s
# Warmup Iteration   9: 1012701.413 ops/s
# Warmup Iteration  10: 1014721.496 ops/s
# Warmup Iteration  11: 1016986.089 ops/s
# Warmup Iteration  12: 859249.573 ops/s
# Warmup Iteration  13: 1012245.106 ops/s
# Warmup Iteration  14: 1013183.509 ops/s
# Warmup Iteration  15: 1014349.787 ops/s
# Warmup Iteration  16: 1013686.089 ops/s
# Warmup Iteration  17: 1073704.255 ops/s
# Warmup Iteration  18: 1072538.714 ops/s
# Warmup Iteration  19: 1071237.113 ops/s
# Warmup Iteration  20: 1066732.321 ops/s
# Warmup Iteration  21: 1065689.063 ops/s
# Warmup Iteration  22: 1067869.098 ops/s
# Warmup Iteration  23: 1070583.697 ops/s
# Warmup Iteration  24: 1068345.751 ops/s
# Warmup Iteration  25: 1073016.226 ops/s
# Warmup Iteration  26: 1074284.575 ops/s
# Warmup Iteration  27: 1073157.589 ops/s
# Warmup Iteration  28: 1072860.143 ops/s
# Warmup Iteration  29: 1074146.652 ops/s
# Warmup Iteration  30: 1072000.759 ops/s
Iteration   1: 1075617.956 ops/s
Iteration   2: 1074083.765 ops/s
Iteration   3: 1072870.653 ops/s
Iteration   4: 1071040.904 ops/s
Iteration   5: 1074400.473 ops/s
Iteration   6: 1073722.478 ops/s
Iteration   7: 1072972.957 ops/s
Iteration   8: 1068776.292 ops/s
Iteration   9: 1070447.977 ops/s
Iteration  10: 1074266.878 ops/s
Iteration  11: 1074896.541 ops/s
Iteration  12: 1073410.218 ops/s
Iteration  13: 1077143.968 ops/s
Iteration  14: 1071980.205 ops/s
Iteration  15: 1073410.086 ops/s
Iteration  16: 1070284.280 ops/s
Iteration  17: 1072540.802 ops/s
Iteration  18: 1073354.582 ops/s
Iteration  19: 1073436.168 ops/s
Iteration  20: 1071649.114 ops/s
Iteration  21: 1072980.121 ops/s
Iteration  22: 1073172.371 ops/s
Iteration  23: 1074128.778 ops/s
Iteration  24: 1076765.139 ops/s
Iteration  25: 1069671.964 ops/s
Iteration  26: 1071014.460 ops/s
Iteration  27: 1067205.288 ops/s
Iteration  28: 1069231.307 ops/s
Iteration  29: 1067512.016 ops/s
Iteration  30: 1074433.673 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1072547.381 ±(99.9%) 1648.274 ops/s [Average]
  (min, avg, max) = (1067205.288, 1072547.381, 1077143.968), stdev = 2467.060
  CI (99.9%): [1070899.106, 1074195.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1072547.381 ± 1648.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 664422.509 ops/s
# Warmup Iteration   2: 1455895.837 ops/s
# Warmup Iteration   3: 1251767.031 ops/s
# Warmup Iteration   4: 1489442.471 ops/s
# Warmup Iteration   5: 1485916.190 ops/s
# Warmup Iteration   6: 1478543.506 ops/s
# Warmup Iteration   7: 1473436.933 ops/s
# Warmup Iteration   8: 1472503.463 ops/s
# Warmup Iteration   9: 1488195.922 ops/s
# Warmup Iteration  10: 1486126.653 ops/s
# Warmup Iteration  11: 1481978.575 ops/s
# Warmup Iteration  12: 1485296.295 ops/s
# Warmup Iteration  13: 1481848.622 ops/s
# Warmup Iteration  14: 1485580.884 ops/s
# Warmup Iteration  15: 1472236.762 ops/s
# Warmup Iteration  16: 1469593.480 ops/s
# Warmup Iteration  17: 1476317.580 ops/s
# Warmup Iteration  18: 1479629.550 ops/s
# Warmup Iteration  19: 1478853.213 ops/s
# Warmup Iteration  20: 1485486.270 ops/s
# Warmup Iteration  21: 1478099.547 ops/s
# Warmup Iteration  22: 1483529.780 ops/s
# Warmup Iteration  23: 1484075.343 ops/s
# Warmup Iteration  24: 1484485.215 ops/s
# Warmup Iteration  25: 1476489.422 ops/s
# Warmup Iteration  26: 1475723.555 ops/s
# Warmup Iteration  27: 1476606.303 ops/s
# Warmup Iteration  28: 1479348.405 ops/s
# Warmup Iteration  29: 1469321.363 ops/s
# Warmup Iteration  30: 1473040.458 ops/s
Iteration   1: 1478250.259 ops/s
Iteration   2: 1477175.484 ops/s
Iteration   3: 1477109.131 ops/s
Iteration   4: 1474371.024 ops/s
Iteration   5: 1471491.775 ops/s
Iteration   6: 1477349.046 ops/s
Iteration   7: 1474677.854 ops/s
Iteration   8: 1478139.924 ops/s
Iteration   9: 1473997.613 ops/s
Iteration  10: 1474093.233 ops/s
Iteration  11: 1476581.034 ops/s
Iteration  12: 1485514.754 ops/s
Iteration  13: 1479876.623 ops/s
Iteration  14: 1480344.468 ops/s
Iteration  15: 1481349.642 ops/s
Iteration  16: 1484222.067 ops/s
Iteration  17: 1481062.767 ops/s
Iteration  18: 1482213.915 ops/s
Iteration  19: 1478675.449 ops/s
Iteration  20: 1478992.231 ops/s
Iteration  21: 1481912.521 ops/s
Iteration  22: 1482843.877 ops/s
Iteration  23: 1479976.697 ops/s
Iteration  24: 1481496.817 ops/s
Iteration  25: 1475574.418 ops/s
Iteration  26: 1468110.486 ops/s
Iteration  27: 1466254.141 ops/s
Iteration  28: 1468120.181 ops/s
Iteration  29: 1483070.601 ops/s
Iteration  30: 1482559.471 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_makeString":
  1477846.917 ±(99.9%) 3249.011 ops/s [Average]
  (min, avg, max) = (1466254.141, 1477846.917, 1485514.754), stdev = 4862.967
  CI (99.9%): [1474597.906, 1481095.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_makeString  thrpt   30  1477846.917 ± 3249.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18367843.798 ops/s
# Warmup Iteration   2: 36935043.335 ops/s
# Warmup Iteration   3: 31654327.842 ops/s
# Warmup Iteration   4: 37590548.428 ops/s
# Warmup Iteration   5: 37596803.984 ops/s
# Warmup Iteration   6: 37628604.516 ops/s
# Warmup Iteration   7: 37582254.719 ops/s
# Warmup Iteration   8: 37651813.217 ops/s
# Warmup Iteration   9: 37549820.290 ops/s
# Warmup Iteration  10: 37582427.079 ops/s
# Warmup Iteration  11: 37497615.434 ops/s
# Warmup Iteration  12: 37547968.662 ops/s
# Warmup Iteration  13: 37621474.931 ops/s
# Warmup Iteration  14: 37554862.139 ops/s
# Warmup Iteration  15: 37530895.666 ops/s
# Warmup Iteration  16: 37586873.872 ops/s
# Warmup Iteration  17: 37647199.459 ops/s
# Warmup Iteration  18: 37626026.196 ops/s
# Warmup Iteration  19: 37443550.891 ops/s
# Warmup Iteration  20: 37519785.849 ops/s
# Warmup Iteration  21: 37574754.334 ops/s
# Warmup Iteration  22: 37507746.782 ops/s
# Warmup Iteration  23: 37598608.973 ops/s
# Warmup Iteration  24: 37610226.432 ops/s
# Warmup Iteration  25: 37696932.777 ops/s
# Warmup Iteration  26: 37578808.950 ops/s
# Warmup Iteration  27: 37569184.794 ops/s
# Warmup Iteration  28: 37578037.371 ops/s
# Warmup Iteration  29: 37581253.189 ops/s
# Warmup Iteration  30: 37613092.031 ops/s
Iteration   1: 37623894.390 ops/s
Iteration   2: 37604771.889 ops/s
Iteration   3: 37639736.175 ops/s
Iteration   4: 37678511.321 ops/s
Iteration   5: 37652498.245 ops/s
Iteration   6: 37562675.951 ops/s
Iteration   7: 37556734.433 ops/s
Iteration   8: 37681937.058 ops/s
Iteration   9: 37627432.293 ops/s
Iteration  10: 37611765.082 ops/s
Iteration  11: 37557902.252 ops/s
Iteration  12: 37610649.968 ops/s
Iteration  13: 37689853.894 ops/s
Iteration  14: 37587340.159 ops/s
Iteration  15: 37516606.937 ops/s
Iteration  16: 37573886.926 ops/s
Iteration  17: 37468791.665 ops/s
Iteration  18: 37530746.686 ops/s
Iteration  19: 37563979.666 ops/s
Iteration  20: 37579764.538 ops/s
Iteration  21: 37513051.441 ops/s
Iteration  22: 37530568.250 ops/s
Iteration  23: 37597800.418 ops/s
Iteration  24: 37685053.945 ops/s
Iteration  25: 37501282.003 ops/s
Iteration  26: 37468355.090 ops/s
Iteration  27: 37623718.968 ops/s
Iteration  28: 37590582.994 ops/s
Iteration  29: 37491256.855 ops/s
Iteration  30: 37488635.185 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max":
  37580326.156 ±(99.9%) 43581.956 ops/s [Average]
  (min, avg, max) = (37468355.090, 37580326.156, 37689853.894), stdev = 65231.425
  CI (99.9%): [37536744.200, 37623908.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_max  thrpt   30  37580326.156 ± 43581.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13850441.368 ops/s
# Warmup Iteration   2: 26553623.456 ops/s
# Warmup Iteration   3: 22577455.128 ops/s
# Warmup Iteration   4: 26537697.799 ops/s
# Warmup Iteration   5: 26423311.669 ops/s
# Warmup Iteration   6: 26064392.152 ops/s
# Warmup Iteration   7: 26429247.282 ops/s
# Warmup Iteration   8: 26483014.451 ops/s
# Warmup Iteration   9: 26385598.901 ops/s
# Warmup Iteration  10: 26416992.947 ops/s
# Warmup Iteration  11: 26499543.806 ops/s
# Warmup Iteration  12: 26469122.152 ops/s
# Warmup Iteration  13: 26454761.396 ops/s
# Warmup Iteration  14: 26488372.555 ops/s
# Warmup Iteration  15: 26430772.062 ops/s
# Warmup Iteration  16: 26450934.229 ops/s
# Warmup Iteration  17: 26457320.158 ops/s
# Warmup Iteration  18: 26425527.374 ops/s
# Warmup Iteration  19: 26479368.586 ops/s
# Warmup Iteration  20: 26509261.382 ops/s
# Warmup Iteration  21: 26498034.811 ops/s
# Warmup Iteration  22: 26431054.492 ops/s
# Warmup Iteration  23: 26384277.250 ops/s
# Warmup Iteration  24: 26379784.361 ops/s
# Warmup Iteration  25: 26484944.674 ops/s
# Warmup Iteration  26: 26439785.984 ops/s
# Warmup Iteration  27: 26411939.369 ops/s
# Warmup Iteration  28: 26371818.311 ops/s
# Warmup Iteration  29: 26396238.476 ops/s
# Warmup Iteration  30: 26538030.131 ops/s
Iteration   1: 26433952.340 ops/s
Iteration   2: 26412610.767 ops/s
Iteration   3: 26471171.444 ops/s
Iteration   4: 26456447.020 ops/s
Iteration   5: 26411881.258 ops/s
Iteration   6: 26554643.529 ops/s
Iteration   7: 26402156.565 ops/s
Iteration   8: 26390741.616 ops/s
Iteration   9: 26557531.733 ops/s
Iteration  10: 26495959.526 ops/s
Iteration  11: 26541114.568 ops/s
Iteration  12: 26604205.767 ops/s
Iteration  13: 26536092.633 ops/s
Iteration  14: 26488294.944 ops/s
Iteration  15: 26506736.738 ops/s
Iteration  16: 26535927.038 ops/s
Iteration  17: 26543423.620 ops/s
Iteration  18: 26430636.330 ops/s
Iteration  19: 26404119.899 ops/s
Iteration  20: 26367637.939 ops/s
Iteration  21: 26386856.327 ops/s
Iteration  22: 26494747.442 ops/s
Iteration  23: 26249541.855 ops/s
Iteration  24: 26371740.054 ops/s
Iteration  25: 26458771.704 ops/s
Iteration  26: 26426164.520 ops/s
Iteration  27: 26427934.201 ops/s
Iteration  28: 26452414.861 ops/s
Iteration  29: 26490608.944 ops/s
Iteration  30: 26355112.425 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_maxBy":
  26455305.920 ±(99.9%) 50673.051 ops/s [Average]
  (min, avg, max) = (26249541.855, 26455305.920, 26604205.767), stdev = 75845.043
  CI (99.9%): [26404632.870, 26505978.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_maxBy  thrpt   30  26455305.920 ± 50673.051  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5383752.547 ops/s
# Warmup Iteration   2: 12617303.510 ops/s
# Warmup Iteration   3: 12653062.040 ops/s
# Warmup Iteration   4: 10644023.247 ops/s
# Warmup Iteration   5: 12698099.731 ops/s
# Warmup Iteration   6: 12641358.144 ops/s
# Warmup Iteration   7: 12667196.470 ops/s
# Warmup Iteration   8: 12686807.974 ops/s
# Warmup Iteration   9: 12667280.408 ops/s
# Warmup Iteration  10: 12677271.148 ops/s
# Warmup Iteration  11: 12684197.198 ops/s
# Warmup Iteration  12: 12679329.689 ops/s
# Warmup Iteration  13: 12686533.784 ops/s
# Warmup Iteration  14: 12658288.959 ops/s
# Warmup Iteration  15: 12666500.440 ops/s
# Warmup Iteration  16: 12637090.496 ops/s
# Warmup Iteration  17: 12604737.050 ops/s
# Warmup Iteration  18: 12602077.094 ops/s
# Warmup Iteration  19: 12617651.240 ops/s
# Warmup Iteration  20: 12610633.661 ops/s
# Warmup Iteration  21: 12615773.237 ops/s
# Warmup Iteration  22: 12614377.633 ops/s
# Warmup Iteration  23: 12595122.462 ops/s
# Warmup Iteration  24: 12608743.382 ops/s
# Warmup Iteration  25: 12624142.730 ops/s
# Warmup Iteration  26: 12621820.980 ops/s
# Warmup Iteration  27: 12611339.457 ops/s
# Warmup Iteration  28: 12624308.812 ops/s
# Warmup Iteration  29: 12611699.083 ops/s
# Warmup Iteration  30: 12617109.318 ops/s
Iteration   1: 11757685.839 ops/s
Iteration   2: 12621889.452 ops/s
Iteration   3: 12621726.564 ops/s
Iteration   4: 12606344.026 ops/s
Iteration   5: 12606999.008 ops/s
Iteration   6: 12631343.151 ops/s
Iteration   7: 12589718.043 ops/s
Iteration   8: 12613240.503 ops/s
Iteration   9: 12631146.256 ops/s
Iteration  10: 12598893.035 ops/s
Iteration  11: 12604893.244 ops/s
Iteration  12: 12591554.102 ops/s
Iteration  13: 12594105.789 ops/s
Iteration  14: 12614101.548 ops/s
Iteration  15: 12593420.803 ops/s
Iteration  16: 12645466.673 ops/s
Iteration  17: 12628228.104 ops/s
Iteration  18: 12587396.714 ops/s
Iteration  19: 12627354.699 ops/s
Iteration  20: 12609331.719 ops/s
Iteration  21: 12612699.144 ops/s
Iteration  22: 12595543.753 ops/s
Iteration  23: 12606544.778 ops/s
Iteration  24: 12595088.970 ops/s
Iteration  25: 12633001.651 ops/s
Iteration  26: 12581799.904 ops/s
Iteration  27: 12603669.145 ops/s
Iteration  28: 12612382.639 ops/s
Iteration  29: 12560538.310 ops/s
Iteration  30: 12619230.605 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws":
  12579844.606 ±(99.9%) 104434.356 ops/s [Average]
  (min, avg, max) = (11757685.839, 12579844.606, 12645466.673), stdev = 156312.439
  CI (99.9%): [12475410.250, 12684278.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_max_null_throws  thrpt   30  12579844.606 ± 104434.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3665024.272 ops/s
# Warmup Iteration   2: 5896980.499 ops/s
# Warmup Iteration   3: 6838722.556 ops/s
# Warmup Iteration   4: 6810127.555 ops/s
# Warmup Iteration   5: 6836541.282 ops/s
# Warmup Iteration   6: 6877554.227 ops/s
# Warmup Iteration   7: 5740620.219 ops/s
# Warmup Iteration   8: 6891608.737 ops/s
# Warmup Iteration   9: 6896821.240 ops/s
# Warmup Iteration  10: 6890537.110 ops/s
# Warmup Iteration  11: 6891864.165 ops/s
# Warmup Iteration  12: 6895459.385 ops/s
# Warmup Iteration  13: 6894198.675 ops/s
# Warmup Iteration  14: 6891713.548 ops/s
# Warmup Iteration  15: 6885809.875 ops/s
# Warmup Iteration  16: 6891074.999 ops/s
# Warmup Iteration  17: 6883327.595 ops/s
# Warmup Iteration  18: 6880688.674 ops/s
# Warmup Iteration  19: 6889666.194 ops/s
# Warmup Iteration  20: 6873763.336 ops/s
# Warmup Iteration  21: 6881575.125 ops/s
# Warmup Iteration  22: 6887300.766 ops/s
# Warmup Iteration  23: 6876230.518 ops/s
# Warmup Iteration  24: 6846261.916 ops/s
# Warmup Iteration  25: 6866392.932 ops/s
# Warmup Iteration  26: 6894603.523 ops/s
# Warmup Iteration  27: 6896386.172 ops/s
# Warmup Iteration  28: 6895085.370 ops/s
# Warmup Iteration  29: 6894418.800 ops/s
# Warmup Iteration  30: 6895175.658 ops/s
Iteration   1: 6886138.752 ops/s
Iteration   2: 6905962.979 ops/s
Iteration   3: 6888165.721 ops/s
Iteration   4: 6887667.592 ops/s
Iteration   5: 6892122.973 ops/s
Iteration   6: 6902834.420 ops/s
Iteration   7: 6887345.439 ops/s
Iteration   8: 6902800.544 ops/s
Iteration   9: 6895924.856 ops/s
Iteration  10: 6899191.318 ops/s
Iteration  11: 6852629.373 ops/s
Iteration  12: 6897324.569 ops/s
Iteration  13: 6878681.901 ops/s
Iteration  14: 6894603.582 ops/s
Iteration  15: 6871372.970 ops/s
Iteration  16: 6886010.894 ops/s
Iteration  17: 6889223.202 ops/s
Iteration  18: 6876738.369 ops/s
Iteration  19: 6879283.035 ops/s
Iteration  20: 6884125.474 ops/s
Iteration  21: 6886598.928 ops/s
Iteration  22: 6887086.369 ops/s
Iteration  23: 6895028.741 ops/s
Iteration  24: 6881417.456 ops/s
Iteration  25: 6897625.398 ops/s
Iteration  26: 6882671.010 ops/s
Iteration  27: 6896551.972 ops/s
Iteration  28: 6895980.876 ops/s
Iteration  29: 6901035.973 ops/s
Iteration  30: 6883838.583 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  6888866.109 ±(99.9%) 7294.813 ops/s [Average]
  (min, avg, max) = (6852629.373, 6888866.109, 6905962.979), stdev = 10918.533
  CI (99.9%): [6881571.296, 6896160.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  6888866.109 ± 7294.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13786537.823 ops/s
# Warmup Iteration   2: 26137228.175 ops/s
# Warmup Iteration   3: 23334656.632 ops/s
# Warmup Iteration   4: 27362848.429 ops/s
# Warmup Iteration   5: 27267096.384 ops/s
# Warmup Iteration   6: 27305239.737 ops/s
# Warmup Iteration   7: 27325868.316 ops/s
# Warmup Iteration   8: 27195859.252 ops/s
# Warmup Iteration   9: 27196249.585 ops/s
# Warmup Iteration  10: 27326511.365 ops/s
# Warmup Iteration  11: 27298331.463 ops/s
# Warmup Iteration  12: 27301158.176 ops/s
# Warmup Iteration  13: 27331027.878 ops/s
# Warmup Iteration  14: 27297585.831 ops/s
# Warmup Iteration  15: 27331829.074 ops/s
# Warmup Iteration  16: 26510318.640 ops/s
# Warmup Iteration  17: 27224586.985 ops/s
# Warmup Iteration  18: 27308226.966 ops/s
# Warmup Iteration  19: 27250197.172 ops/s
# Warmup Iteration  20: 27243735.577 ops/s
# Warmup Iteration  21: 27265894.387 ops/s
# Warmup Iteration  22: 27325279.118 ops/s
# Warmup Iteration  23: 27220123.463 ops/s
# Warmup Iteration  24: 27264178.942 ops/s
# Warmup Iteration  25: 27172178.293 ops/s
# Warmup Iteration  26: 27214084.486 ops/s
# Warmup Iteration  27: 27188671.026 ops/s
# Warmup Iteration  28: 27229243.081 ops/s
# Warmup Iteration  29: 27248493.669 ops/s
# Warmup Iteration  30: 27238063.509 ops/s
Iteration   1: 27248646.440 ops/s
Iteration   2: 27310223.336 ops/s
Iteration   3: 27374022.149 ops/s
Iteration   4: 27215917.079 ops/s
Iteration   5: 27303730.107 ops/s
Iteration   6: 27410049.596 ops/s
Iteration   7: 27251281.407 ops/s
Iteration   8: 27309717.436 ops/s
Iteration   9: 27314709.174 ops/s
Iteration  10: 27260631.921 ops/s
Iteration  11: 27327263.964 ops/s
Iteration  12: 27302870.997 ops/s
Iteration  13: 27283158.524 ops/s
Iteration  14: 27330584.795 ops/s
Iteration  15: 27206255.502 ops/s
Iteration  16: 27276035.789 ops/s
Iteration  17: 27351880.619 ops/s
Iteration  18: 27213822.693 ops/s
Iteration  19: 27137509.167 ops/s
Iteration  20: 27197745.715 ops/s
Iteration  21: 27286669.884 ops/s
Iteration  22: 27218694.020 ops/s
Iteration  23: 27254094.805 ops/s
Iteration  24: 27256359.277 ops/s
Iteration  25: 27186790.369 ops/s
Iteration  26: 27206930.819 ops/s
Iteration  27: 27224007.736 ops/s
Iteration  28: 27230478.290 ops/s
Iteration  29: 27253521.994 ops/s
Iteration  30: 27333204.561 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_max_without_comparator":
  27269226.939 ±(99.9%) 40715.403 ops/s [Average]
  (min, avg, max) = (27137509.167, 27269226.939, 27410049.596), stdev = 60940.902
  CI (99.9%): [27228511.536, 27309942.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  27269226.939 ± 40715.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24251127.677 ops/s
# Warmup Iteration   2: 47942873.272 ops/s
# Warmup Iteration   3: 39929046.750 ops/s
# Warmup Iteration   4: 46990198.809 ops/s
# Warmup Iteration   5: 46983047.297 ops/s
# Warmup Iteration   6: 47083872.205 ops/s
# Warmup Iteration   7: 46956846.758 ops/s
# Warmup Iteration   8: 46932622.790 ops/s
# Warmup Iteration   9: 46995617.251 ops/s
# Warmup Iteration  10: 46929943.482 ops/s
# Warmup Iteration  11: 46891766.683 ops/s
# Warmup Iteration  12: 46935048.293 ops/s
# Warmup Iteration  13: 47048079.447 ops/s
# Warmup Iteration  14: 47016908.910 ops/s
# Warmup Iteration  15: 46989084.402 ops/s
# Warmup Iteration  16: 46901019.010 ops/s
# Warmup Iteration  17: 46967653.633 ops/s
# Warmup Iteration  18: 46976781.009 ops/s
# Warmup Iteration  19: 46929846.375 ops/s
# Warmup Iteration  20: 46924885.212 ops/s
# Warmup Iteration  21: 46972299.722 ops/s
# Warmup Iteration  22: 46844334.345 ops/s
# Warmup Iteration  23: 46934460.287 ops/s
# Warmup Iteration  24: 46974797.962 ops/s
# Warmup Iteration  25: 47051174.121 ops/s
# Warmup Iteration  26: 47019430.777 ops/s
# Warmup Iteration  27: 47007369.206 ops/s
# Warmup Iteration  28: 47009591.176 ops/s
# Warmup Iteration  29: 46928861.732 ops/s
# Warmup Iteration  30: 47007807.316 ops/s
Iteration   1: 46963329.719 ops/s
Iteration   2: 47031509.496 ops/s
Iteration   3: 47096977.464 ops/s
Iteration   4: 46912452.941 ops/s
Iteration   5: 46638678.547 ops/s
Iteration   6: 46834343.065 ops/s
Iteration   7: 46906519.853 ops/s
Iteration   8: 47058397.770 ops/s
Iteration   9: 46897133.132 ops/s
Iteration  10: 46891597.090 ops/s
Iteration  11: 47167098.182 ops/s
Iteration  12: 46934934.071 ops/s
Iteration  13: 47024732.024 ops/s
Iteration  14: 46853147.958 ops/s
Iteration  15: 46960835.216 ops/s
Iteration  16: 46861719.828 ops/s
Iteration  17: 46953723.297 ops/s
Iteration  18: 46785623.478 ops/s
Iteration  19: 46853090.823 ops/s
Iteration  20: 46736953.181 ops/s
Iteration  21: 46881850.757 ops/s
Iteration  22: 46819774.592 ops/s
Iteration  23: 46888298.207 ops/s
Iteration  24: 46567836.325 ops/s
Iteration  25: 46698785.654 ops/s
Iteration  26: 46525464.798 ops/s
Iteration  27: 46754740.890 ops/s
Iteration  28: 46982549.563 ops/s
Iteration  29: 46976449.652 ops/s
Iteration  30: 46980935.421 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min":
  46881316.100 ±(99.9%) 98171.903 ops/s [Average]
  (min, avg, max) = (46525464.798, 46881316.100, 47167098.182), stdev = 146939.094
  CI (99.9%): [46783144.197, 46979488.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_min  thrpt   30  46881316.100 ± 98171.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14404732.820 ops/s
# Warmup Iteration   2: 29464524.638 ops/s
# Warmup Iteration   3: 25117198.611 ops/s
# Warmup Iteration   4: 29418854.721 ops/s
# Warmup Iteration   5: 29540366.013 ops/s
# Warmup Iteration   6: 29576965.651 ops/s
# Warmup Iteration   7: 29550817.992 ops/s
# Warmup Iteration   8: 29487237.459 ops/s
# Warmup Iteration   9: 29606454.233 ops/s
# Warmup Iteration  10: 29568803.733 ops/s
# Warmup Iteration  11: 29511393.144 ops/s
# Warmup Iteration  12: 29644593.034 ops/s
# Warmup Iteration  13: 29413986.004 ops/s
# Warmup Iteration  14: 29596796.888 ops/s
# Warmup Iteration  15: 29614064.528 ops/s
# Warmup Iteration  16: 29626004.297 ops/s
# Warmup Iteration  17: 29794323.613 ops/s
# Warmup Iteration  18: 29844699.754 ops/s
# Warmup Iteration  19: 29674571.166 ops/s
# Warmup Iteration  20: 29884136.782 ops/s
# Warmup Iteration  21: 29841418.133 ops/s
# Warmup Iteration  22: 29904112.134 ops/s
# Warmup Iteration  23: 29868611.448 ops/s
# Warmup Iteration  24: 29881942.138 ops/s
# Warmup Iteration  25: 29758557.826 ops/s
# Warmup Iteration  26: 29940326.988 ops/s
# Warmup Iteration  27: 29952719.307 ops/s
# Warmup Iteration  28: 29868926.519 ops/s
# Warmup Iteration  29: 29907421.031 ops/s
# Warmup Iteration  30: 29862424.151 ops/s
Iteration   1: 29978419.652 ops/s
Iteration   2: 29843675.084 ops/s
Iteration   3: 29999448.995 ops/s
Iteration   4: 30015981.125 ops/s
Iteration   5: 29972633.512 ops/s
Iteration   6: 29812459.713 ops/s
Iteration   7: 29677784.692 ops/s
Iteration   8: 30021241.435 ops/s
Iteration   9: 29887200.476 ops/s
Iteration  10: 29770003.995 ops/s
Iteration  11: 29980392.348 ops/s
Iteration  12: 29922972.558 ops/s
Iteration  13: 29919248.901 ops/s
Iteration  14: 29758768.414 ops/s
Iteration  15: 29782102.272 ops/s
Iteration  16: 29642185.106 ops/s
Iteration  17: 29866223.902 ops/s
Iteration  18: 29888281.432 ops/s
Iteration  19: 29850354.276 ops/s
Iteration  20: 30024179.809 ops/s
Iteration  21: 29892799.631 ops/s
Iteration  22: 29810665.191 ops/s
Iteration  23: 29901479.969 ops/s
Iteration  24: 29770999.429 ops/s
Iteration  25: 29964603.625 ops/s
Iteration  26: 29969698.819 ops/s
Iteration  27: 29887742.406 ops/s
Iteration  28: 29890710.753 ops/s
Iteration  29: 29888805.060 ops/s
Iteration  30: 30015344.433 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_minBy":
  29886880.234 ±(99.9%) 67475.402 ops/s [Average]
  (min, avg, max) = (29642185.106, 29886880.234, 30024179.809), stdev = 100994.012
  CI (99.9%): [29819404.832, 29954355.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_minBy  thrpt   30  29886880.234 ± 67475.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5402936.432 ops/s
# Warmup Iteration   2: 12546369.787 ops/s
# Warmup Iteration   3: 12803737.406 ops/s
# Warmup Iteration   4: 10694598.620 ops/s
# Warmup Iteration   5: 12835874.968 ops/s
# Warmup Iteration   6: 12819359.615 ops/s
# Warmup Iteration   7: 12823610.004 ops/s
# Warmup Iteration   8: 12806434.827 ops/s
# Warmup Iteration   9: 12781396.754 ops/s
# Warmup Iteration  10: 12824337.473 ops/s
# Warmup Iteration  11: 12831942.112 ops/s
# Warmup Iteration  12: 12706681.076 ops/s
# Warmup Iteration  13: 12728057.881 ops/s
# Warmup Iteration  14: 12727920.259 ops/s
# Warmup Iteration  15: 12836314.429 ops/s
# Warmup Iteration  16: 12805473.259 ops/s
# Warmup Iteration  17: 12772164.510 ops/s
# Warmup Iteration  18: 12771996.702 ops/s
# Warmup Iteration  19: 12792551.429 ops/s
# Warmup Iteration  20: 12786115.021 ops/s
# Warmup Iteration  21: 12780570.167 ops/s
# Warmup Iteration  22: 12789207.471 ops/s
# Warmup Iteration  23: 12731100.091 ops/s
# Warmup Iteration  24: 12743662.702 ops/s
# Warmup Iteration  25: 12700357.148 ops/s
# Warmup Iteration  26: 12783892.869 ops/s
# Warmup Iteration  27: 12718722.828 ops/s
# Warmup Iteration  28: 12702109.258 ops/s
# Warmup Iteration  29: 12814989.921 ops/s
# Warmup Iteration  30: 12743466.496 ops/s
Iteration   1: 12814285.295 ops/s
Iteration   2: 12779338.778 ops/s
Iteration   3: 12751781.826 ops/s
Iteration   4: 12743178.389 ops/s
Iteration   5: 12767947.329 ops/s
Iteration   6: 12713650.180 ops/s
Iteration   7: 12755351.572 ops/s
Iteration   8: 12760622.394 ops/s
Iteration   9: 12795978.591 ops/s
Iteration  10: 12798770.933 ops/s
Iteration  11: 12777684.853 ops/s
Iteration  12: 12796084.187 ops/s
Iteration  13: 12808671.730 ops/s
Iteration  14: 12809756.901 ops/s
Iteration  15: 12744874.952 ops/s
Iteration  16: 12728394.431 ops/s
Iteration  17: 12745262.968 ops/s
Iteration  18: 12814597.918 ops/s
Iteration  19: 12712739.401 ops/s
Iteration  20: 12748229.595 ops/s
Iteration  21: 12778907.100 ops/s
Iteration  22: 12798977.654 ops/s
Iteration  23: 12784565.339 ops/s
Iteration  24: 12789352.590 ops/s
Iteration  25: 12772359.886 ops/s
Iteration  26: 12688011.157 ops/s
Iteration  27: 12767706.899 ops/s
Iteration  28: 12710278.085 ops/s
Iteration  29: 12803717.783 ops/s
Iteration  30: 12819664.205 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws":
  12769358.098 ±(99.9%) 23543.796 ops/s [Average]
  (min, avg, max) = (12688011.157, 12769358.098, 12819664.205), stdev = 35239.248
  CI (99.9%): [12745814.302, 12792901.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_min_null_throws  thrpt   30  12769358.098 ± 23543.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5377381.457 ops/s
# Warmup Iteration   2: 12506541.807 ops/s
# Warmup Iteration   3: 12660721.680 ops/s
# Warmup Iteration   4: 10718445.332 ops/s
# Warmup Iteration   5: 12701562.951 ops/s
# Warmup Iteration   6: 12656277.245 ops/s
# Warmup Iteration   7: 12708279.076 ops/s
# Warmup Iteration   8: 12678139.542 ops/s
# Warmup Iteration   9: 12687507.419 ops/s
# Warmup Iteration  10: 12704636.731 ops/s
# Warmup Iteration  11: 12679041.222 ops/s
# Warmup Iteration  12: 12714708.549 ops/s
# Warmup Iteration  13: 12705552.524 ops/s
# Warmup Iteration  14: 12704819.177 ops/s
# Warmup Iteration  15: 12723256.180 ops/s
# Warmup Iteration  16: 12661625.322 ops/s
# Warmup Iteration  17: 12647140.761 ops/s
# Warmup Iteration  18: 12635854.082 ops/s
# Warmup Iteration  19: 12681271.055 ops/s
# Warmup Iteration  20: 12626619.112 ops/s
# Warmup Iteration  21: 12618331.336 ops/s
# Warmup Iteration  22: 12655641.910 ops/s
# Warmup Iteration  23: 12581788.106 ops/s
# Warmup Iteration  24: 12635811.060 ops/s
# Warmup Iteration  25: 12643555.244 ops/s
# Warmup Iteration  26: 12650220.824 ops/s
# Warmup Iteration  27: 12644986.485 ops/s
# Warmup Iteration  28: 12655040.846 ops/s
# Warmup Iteration  29: 12685498.850 ops/s
# Warmup Iteration  30: 12653725.681 ops/s
Iteration   1: 12647130.458 ops/s
Iteration   2: 12658078.030 ops/s
Iteration   3: 12658956.706 ops/s
Iteration   4: 12671790.776 ops/s
Iteration   5: 12573233.512 ops/s
Iteration   6: 12619892.933 ops/s
Iteration   7: 12666848.659 ops/s
Iteration   8: 12654816.590 ops/s
Iteration   9: 12540850.563 ops/s
Iteration  10: 12665925.062 ops/s
Iteration  11: 12616585.714 ops/s
Iteration  12: 12635426.763 ops/s
Iteration  13: 12639672.135 ops/s
Iteration  14: 12665471.791 ops/s
Iteration  15: 12566516.650 ops/s
Iteration  16: 12713574.969 ops/s
Iteration  17: 12659415.135 ops/s
Iteration  18: 12674473.069 ops/s
Iteration  19: 12646599.549 ops/s
Iteration  20: 12536700.925 ops/s
Iteration  21: 12606880.795 ops/s
Iteration  22: 12687217.769 ops/s
Iteration  23: 12641634.673 ops/s
Iteration  24: 11987793.503 ops/s
Iteration  25: 12587555.912 ops/s
Iteration  26: 12698492.843 ops/s
Iteration  27: 12591202.081 ops/s
Iteration  28: 12598352.080 ops/s
Iteration  29: 12670006.583 ops/s
Iteration  30: 12649516.675 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  12614353.763 ±(99.9%) 84383.899 ops/s [Average]
  (min, avg, max) = (11987793.503, 12614353.763, 12713574.969), stdev = 126301.856
  CI (99.9%): [12529969.865, 12698737.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  12614353.763 ± 84383.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24154461.890 ops/s
# Warmup Iteration   2: 47933075.068 ops/s
# Warmup Iteration   3: 40533147.677 ops/s
# Warmup Iteration   4: 47753279.252 ops/s
# Warmup Iteration   5: 47691616.901 ops/s
# Warmup Iteration   6: 47715892.285 ops/s
# Warmup Iteration   7: 47567184.073 ops/s
# Warmup Iteration   8: 47581045.688 ops/s
# Warmup Iteration   9: 47755120.800 ops/s
# Warmup Iteration  10: 47723364.855 ops/s
# Warmup Iteration  11: 47717513.681 ops/s
# Warmup Iteration  12: 47821043.737 ops/s
# Warmup Iteration  13: 47640379.431 ops/s
# Warmup Iteration  14: 47750015.952 ops/s
# Warmup Iteration  15: 47753009.022 ops/s
# Warmup Iteration  16: 47672129.675 ops/s
# Warmup Iteration  17: 47780548.132 ops/s
# Warmup Iteration  18: 47971110.047 ops/s
# Warmup Iteration  19: 48057326.515 ops/s
# Warmup Iteration  20: 48175403.478 ops/s
# Warmup Iteration  21: 48080126.298 ops/s
# Warmup Iteration  22: 48191103.529 ops/s
# Warmup Iteration  23: 48069501.556 ops/s
# Warmup Iteration  24: 47975682.828 ops/s
# Warmup Iteration  25: 47994927.454 ops/s
# Warmup Iteration  26: 47893645.952 ops/s
# Warmup Iteration  27: 48113741.520 ops/s
# Warmup Iteration  28: 48134453.300 ops/s
# Warmup Iteration  29: 47975583.992 ops/s
# Warmup Iteration  30: 47821878.405 ops/s
Iteration   1: 47702965.976 ops/s
Iteration   2: 48124036.964 ops/s
Iteration   3: 48006275.201 ops/s
Iteration   4: 47737249.600 ops/s
Iteration   5: 48064507.274 ops/s
Iteration   6: 48242957.621 ops/s
Iteration   7: 48227092.938 ops/s
Iteration   8: 47940410.421 ops/s
Iteration   9: 48080487.549 ops/s
Iteration  10: 48048993.909 ops/s
Iteration  11: 48036451.915 ops/s
Iteration  12: 48204754.188 ops/s
Iteration  13: 48293243.144 ops/s
Iteration  14: 48181316.236 ops/s
Iteration  15: 48171719.672 ops/s
Iteration  16: 48187213.126 ops/s
Iteration  17: 47884871.991 ops/s
Iteration  18: 48248528.261 ops/s
Iteration  19: 47931919.201 ops/s
Iteration  20: 48100046.086 ops/s
Iteration  21: 47894194.647 ops/s
Iteration  22: 48148770.165 ops/s
Iteration  23: 48046279.716 ops/s
Iteration  24: 48008241.993 ops/s
Iteration  25: 48049852.313 ops/s
Iteration  26: 48039059.670 ops/s
Iteration  27: 47959912.834 ops/s
Iteration  28: 48074354.302 ops/s
Iteration  29: 48035066.603 ops/s
Iteration  30: 47828909.113 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_min_without_comparator":
  48049989.421 ±(99.9%) 97564.712 ops/s [Average]
  (min, avg, max) = (47702965.976, 48049989.421, 48293243.144), stdev = 146030.279
  CI (99.9%): [47952424.709, 48147554.133] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  48049989.421 ± 97564.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30215063.806 ops/s
# Warmup Iteration   2: 61492552.369 ops/s
# Warmup Iteration   3: 55617914.485 ops/s
# Warmup Iteration   4: 65810433.381 ops/s
# Warmup Iteration   5: 65767104.172 ops/s
# Warmup Iteration   6: 65710201.970 ops/s
# Warmup Iteration   7: 65099532.858 ops/s
# Warmup Iteration   8: 65338752.125 ops/s
# Warmup Iteration   9: 65742403.049 ops/s
# Warmup Iteration  10: 65523616.255 ops/s
# Warmup Iteration  11: 65904478.148 ops/s
# Warmup Iteration  12: 65749413.438 ops/s
# Warmup Iteration  13: 65814862.024 ops/s
# Warmup Iteration  14: 65794895.762 ops/s
# Warmup Iteration  15: 65714681.996 ops/s
# Warmup Iteration  16: 65790394.069 ops/s
# Warmup Iteration  17: 65842479.884 ops/s
# Warmup Iteration  18: 65926494.513 ops/s
# Warmup Iteration  19: 65884361.596 ops/s
# Warmup Iteration  20: 65999900.418 ops/s
# Warmup Iteration  21: 65897759.451 ops/s
# Warmup Iteration  22: 65926217.169 ops/s
# Warmup Iteration  23: 65707605.322 ops/s
# Warmup Iteration  24: 65406104.046 ops/s
# Warmup Iteration  25: 65294581.691 ops/s
# Warmup Iteration  26: 65667842.706 ops/s
# Warmup Iteration  27: 65891743.636 ops/s
# Warmup Iteration  28: 65855609.549 ops/s
# Warmup Iteration  29: 65417890.018 ops/s
# Warmup Iteration  30: 65518464.406 ops/s
Iteration   1: 65980637.190 ops/s
Iteration   2: 65827609.427 ops/s
Iteration   3: 65700243.436 ops/s
Iteration   4: 65338287.666 ops/s
Iteration   5: 65675975.900 ops/s
Iteration   6: 65481461.969 ops/s
Iteration   7: 65672702.294 ops/s
Iteration   8: 65651517.036 ops/s
Iteration   9: 65792829.128 ops/s
Iteration  10: 65598685.163 ops/s
Iteration  11: 65569747.564 ops/s
Iteration  12: 65921199.193 ops/s
Iteration  13: 65620455.061 ops/s
Iteration  14: 65873461.414 ops/s
Iteration  15: 65860081.058 ops/s
Iteration  16: 65817991.837 ops/s
Iteration  17: 65600091.591 ops/s
Iteration  18: 65932183.278 ops/s
Iteration  19: 65607856.628 ops/s
Iteration  20: 66171022.282 ops/s
Iteration  21: 65533850.644 ops/s
Iteration  22: 65952216.960 ops/s
Iteration  23: 65760002.059 ops/s
Iteration  24: 65777087.927 ops/s
Iteration  25: 65346738.001 ops/s
Iteration  26: 65648115.095 ops/s
Iteration  27: 65851047.118 ops/s
Iteration  28: 65479946.763 ops/s
Iteration  29: 65644911.973 ops/s
Iteration  30: 65472518.031 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWith":
  65705349.123 ±(99.9%) 129272.632 ops/s [Average]
  (min, avg, max) = (65338287.666, 65705349.123, 66171022.282), stdev = 193489.205
  CI (99.9%): [65576076.490, 65834621.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newListWith  thrpt   30  65705349.123 ± 129272.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4722773.955 ops/s
# Warmup Iteration   2: 8254087.896 ops/s
# Warmup Iteration   3: 8949286.162 ops/s
# Warmup Iteration   4: 9007440.507 ops/s
# Warmup Iteration   5: 8439161.627 ops/s
# Warmup Iteration   6: 8097002.737 ops/s
# Warmup Iteration   7: 8999068.320 ops/s
# Warmup Iteration   8: 9016975.677 ops/s
# Warmup Iteration   9: 9017583.989 ops/s
# Warmup Iteration  10: 9013072.946 ops/s
# Warmup Iteration  11: 8974476.934 ops/s
# Warmup Iteration  12: 9006930.661 ops/s
# Warmup Iteration  13: 9035062.042 ops/s
# Warmup Iteration  14: 8996661.930 ops/s
# Warmup Iteration  15: 9026853.941 ops/s
# Warmup Iteration  16: 8997668.456 ops/s
# Warmup Iteration  17: 8991249.250 ops/s
# Warmup Iteration  18: 9004567.144 ops/s
# Warmup Iteration  19: 9003673.027 ops/s
# Warmup Iteration  20: 9016035.100 ops/s
# Warmup Iteration  21: 8991910.180 ops/s
# Warmup Iteration  22: 8984802.086 ops/s
# Warmup Iteration  23: 8971439.251 ops/s
# Warmup Iteration  24: 9003041.009 ops/s
# Warmup Iteration  25: 9006260.138 ops/s
# Warmup Iteration  26: 8983643.354 ops/s
# Warmup Iteration  27: 9022665.177 ops/s
# Warmup Iteration  28: 9024860.073 ops/s
# Warmup Iteration  29: 9008638.582 ops/s
# Warmup Iteration  30: 8957177.930 ops/s
Iteration   1: 8953577.324 ops/s
Iteration   2: 8964733.964 ops/s
Iteration   3: 9038766.817 ops/s
Iteration   4: 8986817.118 ops/s
Iteration   5: 8994474.885 ops/s
Iteration   6: 9023897.175 ops/s
Iteration   7: 9004999.139 ops/s
Iteration   8: 8991713.327 ops/s
Iteration   9: 8998929.854 ops/s
Iteration  10: 8976941.917 ops/s
Iteration  11: 8986811.409 ops/s
Iteration  12: 9016963.289 ops/s
Iteration  13: 9038223.953 ops/s
Iteration  14: 8991531.639 ops/s
Iteration  15: 9028131.424 ops/s
Iteration  16: 9025128.045 ops/s
Iteration  17: 8971531.812 ops/s
Iteration  18: 9043832.598 ops/s
Iteration  19: 9016021.916 ops/s
Iteration  20: 8987643.445 ops/s
Iteration  21: 9029782.293 ops/s
Iteration  22: 9010016.406 ops/s
Iteration  23: 9031345.366 ops/s
Iteration  24: 9040194.246 ops/s
Iteration  25: 9017343.765 ops/s
Iteration  26: 9011211.237 ops/s
Iteration  27: 8988657.249 ops/s
Iteration  28: 9038684.443 ops/s
Iteration  29: 9013238.748 ops/s
Iteration  30: 9025895.374 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newListWithVarArgs":
  9008234.673 ±(99.9%) 16323.210 ops/s [Average]
  (min, avg, max) = (8953577.324, 9008234.673, 9043832.598), stdev = 24431.814
  CI (99.9%): [8991911.463, 9024557.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newListWithVarArgs  thrpt   30  9008234.673 ± 16323.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11255905.699 ops/s
# Warmup Iteration   2: 22954682.305 ops/s
# Warmup Iteration   3: 18836034.948 ops/s
# Warmup Iteration   4: 22248506.910 ops/s
# Warmup Iteration   5: 22212412.227 ops/s
# Warmup Iteration   6: 22287391.287 ops/s
# Warmup Iteration   7: 22205521.285 ops/s
# Warmup Iteration   8: 21535280.415 ops/s
# Warmup Iteration   9: 19481622.189 ops/s
# Warmup Iteration  10: 22188282.835 ops/s
# Warmup Iteration  11: 22239753.755 ops/s
# Warmup Iteration  12: 22276148.452 ops/s
# Warmup Iteration  13: 22220434.316 ops/s
# Warmup Iteration  14: 22263700.044 ops/s
# Warmup Iteration  15: 22202188.984 ops/s
# Warmup Iteration  16: 22168449.717 ops/s
# Warmup Iteration  17: 21625227.051 ops/s
# Warmup Iteration  18: 22206760.079 ops/s
# Warmup Iteration  19: 22265980.825 ops/s
# Warmup Iteration  20: 22189650.304 ops/s
# Warmup Iteration  21: 22277119.609 ops/s
# Warmup Iteration  22: 22265268.128 ops/s
# Warmup Iteration  23: 22315500.337 ops/s
# Warmup Iteration  24: 22326563.429 ops/s
# Warmup Iteration  25: 22260045.151 ops/s
# Warmup Iteration  26: 22309327.359 ops/s
# Warmup Iteration  27: 22196961.491 ops/s
# Warmup Iteration  28: 22232567.985 ops/s
# Warmup Iteration  29: 22252163.116 ops/s
# Warmup Iteration  30: 22293007.712 ops/s
Iteration   1: 22221234.686 ops/s
Iteration   2: 22340677.556 ops/s
Iteration   3: 22259970.751 ops/s
Iteration   4: 22347434.951 ops/s
Iteration   5: 22193999.794 ops/s
Iteration   6: 22362938.314 ops/s
Iteration   7: 22159775.123 ops/s
Iteration   8: 22308867.558 ops/s
Iteration   9: 22308559.010 ops/s
Iteration  10: 22204313.066 ops/s
Iteration  11: 22345049.442 ops/s
Iteration  12: 22196850.878 ops/s
Iteration  13: 22331906.799 ops/s
Iteration  14: 22311372.463 ops/s
Iteration  15: 22211844.657 ops/s
Iteration  16: 22212014.224 ops/s
Iteration  17: 22402689.543 ops/s
Iteration  18: 22191491.915 ops/s
Iteration  19: 22216858.414 ops/s
Iteration  20: 22276141.392 ops/s
Iteration  21: 22125944.673 ops/s
Iteration  22: 22235783.269 ops/s
Iteration  23: 22324378.881 ops/s
Iteration  24: 22380679.443 ops/s
Iteration  25: 22145750.885 ops/s
Iteration  26: 22295551.778 ops/s
Iteration  27: 22291630.060 ops/s
Iteration  28: 22247414.476 ops/s
Iteration  29: 22346907.864 ops/s
Iteration  30: 22257668.087 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWith":
  22268523.332 ±(99.9%) 49228.960 ops/s [Average]
  (min, avg, max) = (22125944.673, 22268523.332, 22402689.543), stdev = 73683.596
  CI (99.9%): [22219294.372, 22317752.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newWith  thrpt   30  22268523.332 ± 49228.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11883241.758 ops/s
# Warmup Iteration   2: 23213540.334 ops/s
# Warmup Iteration   3: 23562229.299 ops/s
# Warmup Iteration   4: 25471862.125 ops/s
# Warmup Iteration   5: 25512788.414 ops/s
# Warmup Iteration   6: 25453953.394 ops/s
# Warmup Iteration   7: 25516501.785 ops/s
# Warmup Iteration   8: 25386056.469 ops/s
# Warmup Iteration   9: 25404724.396 ops/s
# Warmup Iteration  10: 25606151.393 ops/s
# Warmup Iteration  11: 25519512.516 ops/s
# Warmup Iteration  12: 25619320.557 ops/s
# Warmup Iteration  13: 25513542.331 ops/s
# Warmup Iteration  14: 25617761.909 ops/s
# Warmup Iteration  15: 25496479.609 ops/s
# Warmup Iteration  16: 25530120.608 ops/s
# Warmup Iteration  17: 25481208.372 ops/s
# Warmup Iteration  18: 25269579.251 ops/s
# Warmup Iteration  19: 25461228.520 ops/s
# Warmup Iteration  20: 25462219.854 ops/s
# Warmup Iteration  21: 25258485.464 ops/s
# Warmup Iteration  22: 25353366.354 ops/s
# Warmup Iteration  23: 25209682.489 ops/s
# Warmup Iteration  24: 25208242.057 ops/s
# Warmup Iteration  25: 25480243.702 ops/s
# Warmup Iteration  26: 25298639.309 ops/s
# Warmup Iteration  27: 25202431.627 ops/s
# Warmup Iteration  28: 25269993.992 ops/s
# Warmup Iteration  29: 25469145.235 ops/s
# Warmup Iteration  30: 25322966.474 ops/s
Iteration   1: 25542503.388 ops/s
Iteration   2: 25305331.517 ops/s
Iteration   3: 25206160.241 ops/s
Iteration   4: 25236493.418 ops/s
Iteration   5: 25418983.798 ops/s
Iteration   6: 25380653.256 ops/s
Iteration   7: 25313167.681 ops/s
Iteration   8: 25341527.482 ops/s
Iteration   9: 25355944.594 ops/s
Iteration  10: 25361245.087 ops/s
Iteration  11: 25287063.137 ops/s
Iteration  12: 25399945.282 ops/s
Iteration  13: 25267438.248 ops/s
Iteration  14: 25348557.596 ops/s
Iteration  15: 25409848.202 ops/s
Iteration  16: 25361782.665 ops/s
Iteration  17: 25132297.216 ops/s
Iteration  18: 25455836.659 ops/s
Iteration  19: 25386665.365 ops/s
Iteration  20: 25434458.458 ops/s
Iteration  21: 25348118.294 ops/s
Iteration  22: 25538540.246 ops/s
Iteration  23: 25555629.738 ops/s
Iteration  24: 25460441.928 ops/s
Iteration  25: 25470542.963 ops/s
Iteration  26: 25480488.200 ops/s
Iteration  27: 25457768.532 ops/s
Iteration  28: 25478744.678 ops/s
Iteration  29: 25276647.695 ops/s
Iteration  30: 25408825.728 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithAll":
  25380721.710 ±(99.9%) 67303.485 ops/s [Average]
  (min, avg, max) = (25132297.216, 25380721.710, 25555629.738), stdev = 100736.696
  CI (99.9%): [25313418.225, 25448025.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newWithAll  thrpt   30  25380721.710 ± 67303.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithOut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithOut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4059772.908 ops/s
# Warmup Iteration   2: 10093146.633 ops/s
# Warmup Iteration   3: 10232763.601 ops/s
# Warmup Iteration   4: 8442512.059 ops/s
# Warmup Iteration   5: 10235924.933 ops/s
# Warmup Iteration   6: 10237087.630 ops/s
# Warmup Iteration   7: 10242700.044 ops/s
# Warmup Iteration   8: 10253104.536 ops/s
# Warmup Iteration   9: 10233578.614 ops/s
# Warmup Iteration  10: 10241398.519 ops/s
# Warmup Iteration  11: 10248476.814 ops/s
# Warmup Iteration  12: 10201609.112 ops/s
# Warmup Iteration  13: 10266703.093 ops/s
# Warmup Iteration  14: 10209288.591 ops/s
# Warmup Iteration  15: 10236285.302 ops/s
# Warmup Iteration  16: 10270363.809 ops/s
# Warmup Iteration  17: 10251632.193 ops/s
# Warmup Iteration  18: 10273363.079 ops/s
# Warmup Iteration  19: 10252261.155 ops/s
# Warmup Iteration  20: 10205044.669 ops/s
# Warmup Iteration  21: 10252374.855 ops/s
# Warmup Iteration  22: 10249556.872 ops/s
# Warmup Iteration  23: 10224972.455 ops/s
# Warmup Iteration  24: 10231193.153 ops/s
# Warmup Iteration  25: 10200000.938 ops/s
# Warmup Iteration  26: 10262011.213 ops/s
# Warmup Iteration  27: 10224724.484 ops/s
# Warmup Iteration  28: 10279699.328 ops/s
# Warmup Iteration  29: 10235957.252 ops/s
# Warmup Iteration  30: 10265584.961 ops/s
Iteration   1: 10273033.307 ops/s
Iteration   2: 10200602.766 ops/s
Iteration   3: 10232558.162 ops/s
Iteration   4: 10283706.495 ops/s
Iteration   5: 10280464.463 ops/s
Iteration   6: 10177427.039 ops/s
Iteration   7: 10237308.433 ops/s
Iteration   8: 10252556.134 ops/s
Iteration   9: 10266650.991 ops/s
Iteration  10: 10246363.862 ops/s
Iteration  11: 10260534.523 ops/s
Iteration  12: 10271565.962 ops/s
Iteration  13: 10292307.500 ops/s
Iteration  14: 10277523.404 ops/s
Iteration  15: 10283072.339 ops/s
Iteration  16: 10257041.593 ops/s
Iteration  17: 10223164.121 ops/s
Iteration  18: 10232259.118 ops/s
Iteration  19: 10266520.998 ops/s
Iteration  20: 10263318.755 ops/s
Iteration  21: 10235628.064 ops/s
Iteration  22: 10216479.533 ops/s
Iteration  23: 10260133.779 ops/s
Iteration  24: 10218036.404 ops/s
Iteration  25: 10249672.676 ops/s
Iteration  26: 10231849.793 ops/s
Iteration  27: 10276789.860 ops/s
Iteration  28: 10268924.038 ops/s
Iteration  29: 10247183.205 ops/s
Iteration  30: 10265916.348 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithOut":
  10251619.789 ±(99.9%) 17918.137 ops/s [Average]
  (min, avg, max) = (10177427.039, 10251619.789, 10292307.500), stdev = 26819.026
  CI (99.9%): [10233701.652, 10269537.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newWithOut  thrpt   30  10251619.789 ± 17918.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 195715.060 ops/s
# Warmup Iteration   2: 238018.759 ops/s
# Warmup Iteration   3: 266674.513 ops/s
# Warmup Iteration   4: 305013.022 ops/s
# Warmup Iteration   5: 304382.360 ops/s
# Warmup Iteration   6: 304588.511 ops/s
# Warmup Iteration   7: 302136.566 ops/s
# Warmup Iteration   8: 301849.831 ops/s
# Warmup Iteration   9: 304960.901 ops/s
# Warmup Iteration  10: 304733.208 ops/s
# Warmup Iteration  11: 304731.305 ops/s
# Warmup Iteration  12: 304643.834 ops/s
# Warmup Iteration  13: 305336.100 ops/s
# Warmup Iteration  14: 295241.283 ops/s
# Warmup Iteration  15: 259405.062 ops/s
# Warmup Iteration  16: 305423.917 ops/s
# Warmup Iteration  17: 305493.192 ops/s
# Warmup Iteration  18: 305565.605 ops/s
# Warmup Iteration  19: 305826.026 ops/s
# Warmup Iteration  20: 305242.533 ops/s
# Warmup Iteration  21: 306385.566 ops/s
# Warmup Iteration  22: 306264.595 ops/s
# Warmup Iteration  23: 305906.867 ops/s
# Warmup Iteration  24: 304417.549 ops/s
# Warmup Iteration  25: 305386.971 ops/s
# Warmup Iteration  26: 305521.898 ops/s
# Warmup Iteration  27: 306792.821 ops/s
# Warmup Iteration  28: 305350.768 ops/s
# Warmup Iteration  29: 305438.088 ops/s
# Warmup Iteration  30: 305633.171 ops/s
Iteration   1: 304297.016 ops/s
Iteration   2: 304975.418 ops/s
Iteration   3: 305886.710 ops/s
Iteration   4: 306992.839 ops/s
Iteration   5: 305397.461 ops/s
Iteration   6: 305763.843 ops/s
Iteration   7: 305501.580 ops/s
Iteration   8: 307159.434 ops/s
Iteration   9: 305621.687 ops/s
Iteration  10: 305824.680 ops/s
Iteration  11: 306178.898 ops/s
Iteration  12: 307026.110 ops/s
Iteration  13: 305885.584 ops/s
Iteration  14: 306697.785 ops/s
Iteration  15: 306506.459 ops/s
Iteration  16: 305553.227 ops/s
Iteration  17: 305903.798 ops/s
Iteration  18: 304836.360 ops/s
Iteration  19: 306170.497 ops/s
Iteration  20: 304780.128 ops/s
Iteration  21: 305164.172 ops/s
Iteration  22: 304886.487 ops/s
Iteration  23: 305424.526 ops/s
Iteration  24: 306020.525 ops/s
Iteration  25: 307417.267 ops/s
Iteration  26: 305165.412 ops/s
Iteration  27: 303251.286 ops/s
Iteration  28: 294147.836 ops/s
Iteration  29: 294867.586 ops/s
Iteration  30: 302568.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_newWithoutAll":
  304862.431 ±(99.9%) 2007.964 ops/s [Average]
  (min, avg, max) = (294147.836, 304862.431, 307417.267), stdev = 3005.426
  CI (99.9%): [302854.467, 306870.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_newWithoutAll  thrpt   30  304862.431 ± 2007.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25081654.201 ops/s
# Warmup Iteration   2: 49330801.937 ops/s
# Warmup Iteration   3: 40293083.237 ops/s
# Warmup Iteration   4: 47012691.211 ops/s
# Warmup Iteration   5: 47030993.502 ops/s
# Warmup Iteration   6: 47092857.225 ops/s
# Warmup Iteration   7: 47146277.681 ops/s
# Warmup Iteration   8: 47001416.201 ops/s
# Warmup Iteration   9: 46856768.158 ops/s
# Warmup Iteration  10: 46995926.476 ops/s
# Warmup Iteration  11: 46922493.096 ops/s
# Warmup Iteration  12: 47162160.531 ops/s
# Warmup Iteration  13: 47043632.223 ops/s
# Warmup Iteration  14: 47053975.882 ops/s
# Warmup Iteration  15: 47304268.107 ops/s
# Warmup Iteration  16: 47242041.108 ops/s
# Warmup Iteration  17: 47196702.660 ops/s
# Warmup Iteration  18: 47204576.647 ops/s
# Warmup Iteration  19: 47288587.091 ops/s
# Warmup Iteration  20: 47214741.328 ops/s
# Warmup Iteration  21: 46922196.014 ops/s
# Warmup Iteration  22: 47342652.417 ops/s
# Warmup Iteration  23: 47086102.976 ops/s
# Warmup Iteration  24: 47174420.691 ops/s
# Warmup Iteration  25: 47371026.633 ops/s
# Warmup Iteration  26: 47297699.523 ops/s
# Warmup Iteration  27: 47277207.231 ops/s
# Warmup Iteration  28: 47181930.306 ops/s
# Warmup Iteration  29: 47145715.184 ops/s
# Warmup Iteration  30: 47083544.507 ops/s
Iteration   1: 47017979.812 ops/s
Iteration   2: 47111296.574 ops/s
Iteration   3: 47104559.345 ops/s
Iteration   4: 47221939.335 ops/s
Iteration   5: 47039541.534 ops/s
Iteration   6: 47353819.038 ops/s
Iteration   7: 47036241.286 ops/s
Iteration   8: 47226962.055 ops/s
Iteration   9: 47290805.759 ops/s
Iteration  10: 47073702.814 ops/s
Iteration  11: 47191271.276 ops/s
Iteration  12: 47286854.068 ops/s
Iteration  13: 47029149.270 ops/s
Iteration  14: 47371068.383 ops/s
Iteration  15: 47033494.226 ops/s
Iteration  16: 47349419.943 ops/s
Iteration  17: 47148273.102 ops/s
Iteration  18: 47053197.825 ops/s
Iteration  19: 46976096.173 ops/s
Iteration  20: 47052437.625 ops/s
Iteration  21: 47214838.428 ops/s
Iteration  22: 46920235.389 ops/s
Iteration  23: 47041394.739 ops/s
Iteration  24: 47233787.277 ops/s
Iteration  25: 47351409.184 ops/s
Iteration  26: 47342119.935 ops/s
Iteration  27: 47031691.872 ops/s
Iteration  28: 47187986.045 ops/s
Iteration  29: 46588506.258 ops/s
Iteration  30: 46879390.791 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfy":
  47125315.645 ±(99.9%) 114366.485 ops/s [Average]
  (min, avg, max) = (46588506.258, 47125315.645, 47371068.383), stdev = 171178.384
  CI (99.9%): [47010949.160, 47239682.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  47125315.645 ± 114366.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15769377.681 ops/s
# Warmup Iteration   2: 32381298.347 ops/s
# Warmup Iteration   3: 31386350.610 ops/s
# Warmup Iteration   4: 32562441.706 ops/s
# Warmup Iteration   5: 34741366.943 ops/s
# Warmup Iteration   6: 34861486.044 ops/s
# Warmup Iteration   7: 34803963.923 ops/s
# Warmup Iteration   8: 34693948.667 ops/s
# Warmup Iteration   9: 34751394.671 ops/s
# Warmup Iteration  10: 34762043.566 ops/s
# Warmup Iteration  11: 34756475.531 ops/s
# Warmup Iteration  12: 34712089.615 ops/s
# Warmup Iteration  13: 34853516.496 ops/s
# Warmup Iteration  14: 34874994.767 ops/s
# Warmup Iteration  15: 34777302.177 ops/s
# Warmup Iteration  16: 34623744.678 ops/s
# Warmup Iteration  17: 34864065.938 ops/s
# Warmup Iteration  18: 34796961.734 ops/s
# Warmup Iteration  19: 34864581.462 ops/s
# Warmup Iteration  20: 34604900.061 ops/s
# Warmup Iteration  21: 34790815.836 ops/s
# Warmup Iteration  22: 34766021.614 ops/s
# Warmup Iteration  23: 34775970.673 ops/s
# Warmup Iteration  24: 34891859.115 ops/s
# Warmup Iteration  25: 34788040.630 ops/s
# Warmup Iteration  26: 34861061.326 ops/s
# Warmup Iteration  27: 34719022.247 ops/s
# Warmup Iteration  28: 34783606.171 ops/s
# Warmup Iteration  29: 34673571.632 ops/s
# Warmup Iteration  30: 34762901.421 ops/s
Iteration   1: 34799090.181 ops/s
Iteration   2: 34654507.306 ops/s
Iteration   3: 34515327.083 ops/s
Iteration   4: 34598899.617 ops/s
Iteration   5: 34717740.071 ops/s
Iteration   6: 34966998.833 ops/s
Iteration   7: 34745618.670 ops/s
Iteration   8: 34735729.143 ops/s
Iteration   9: 34637919.234 ops/s
Iteration  10: 34647239.844 ops/s
Iteration  11: 34736675.033 ops/s
Iteration  12: 34732802.714 ops/s
Iteration  13: 34716716.978 ops/s
Iteration  14: 34689385.432 ops/s
Iteration  15: 34768127.897 ops/s
Iteration  16: 34610019.241 ops/s
Iteration  17: 34933775.475 ops/s
Iteration  18: 34759512.898 ops/s
Iteration  19: 34881633.059 ops/s
Iteration  20: 34618568.832 ops/s
Iteration  21: 34695968.078 ops/s
Iteration  22: 34807946.353 ops/s
Iteration  23: 34648440.148 ops/s
Iteration  24: 34774902.822 ops/s
Iteration  25: 34750172.631 ops/s
Iteration  26: 34547680.381 ops/s
Iteration  27: 34538393.582 ops/s
Iteration  28: 34778795.804 ops/s
Iteration  29: 34681953.265 ops/s
Iteration  30: 34768796.185 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_noneSatisfyWith":
  34715311.226 ±(99.9%) 70965.523 ops/s [Average]
  (min, avg, max) = (34515327.083, 34715311.226, 34966998.833), stdev = 106217.863
  CI (99.9%): [34644345.703, 34786276.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  34715311.226 ± 70965.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21328.450 ops/s
# Warmup Iteration   2: 26998.798 ops/s
# Warmup Iteration   3: 27078.608 ops/s
# Warmup Iteration   4: 27299.280 ops/s
# Warmup Iteration   5: 26291.380 ops/s
# Warmup Iteration   6: 26993.760 ops/s
# Warmup Iteration   7: 29211.814 ops/s
# Warmup Iteration   8: 34350.645 ops/s
# Warmup Iteration   9: 34600.360 ops/s
# Warmup Iteration  10: 33626.492 ops/s
# Warmup Iteration  11: 32310.410 ops/s
# Warmup Iteration  12: 31966.150 ops/s
# Warmup Iteration  13: 32269.283 ops/s
# Warmup Iteration  14: 32625.406 ops/s
# Warmup Iteration  15: 33017.433 ops/s
# Warmup Iteration  16: 33415.073 ops/s
# Warmup Iteration  17: 33178.682 ops/s
# Warmup Iteration  18: 33736.533 ops/s
# Warmup Iteration  19: 33316.612 ops/s
# Warmup Iteration  20: 32785.798 ops/s
# Warmup Iteration  21: 33484.224 ops/s
# Warmup Iteration  22: 33674.073 ops/s
# Warmup Iteration  23: 32681.085 ops/s
# Warmup Iteration  24: 33157.790 ops/s
# Warmup Iteration  25: 34003.413 ops/s
# Warmup Iteration  26: 32796.502 ops/s
# Warmup Iteration  27: 33005.219 ops/s
# Warmup Iteration  28: 34352.600 ops/s
# Warmup Iteration  29: 33659.851 ops/s
# Warmup Iteration  30: 33230.402 ops/s
Iteration   1: 32820.021 ops/s
Iteration   2: 32811.864 ops/s
Iteration   3: 31960.654 ops/s
Iteration   4: 32003.496 ops/s
Iteration   5: 32266.733 ops/s
Iteration   6: 32515.360 ops/s
Iteration   7: 32319.443 ops/s
Iteration   8: 32135.805 ops/s
Iteration   9: 32601.769 ops/s
Iteration  10: 32744.630 ops/s
Iteration  11: 34067.371 ops/s
Iteration  12: 32256.164 ops/s
Iteration  13: 35026.777 ops/s
Iteration  14: 33720.046 ops/s
Iteration  15: 33604.963 ops/s
Iteration  16: 34630.928 ops/s
Iteration  17: 34872.009 ops/s
Iteration  18: 33598.224 ops/s
Iteration  19: 33394.120 ops/s
Iteration  20: 34428.354 ops/s
Iteration  21: 31064.223 ops/s
Iteration  22: 26067.064 ops/s
Iteration  23: 27124.183 ops/s
Iteration  24: 26568.949 ops/s
Iteration  25: 26204.020 ops/s
Iteration  26: 30396.879 ops/s
Iteration  27: 35044.576 ops/s
Iteration  28: 33413.545 ops/s
Iteration  29: 33810.411 ops/s
Iteration  30: 34788.216 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_parallelStream":
  32275.360 ±(99.9%) 1722.950 ops/s [Average]
  (min, avg, max) = (26067.064, 32275.360, 35044.576), stdev = 2578.831
  CI (99.9%): [30552.410, 33998.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_parallelStream  thrpt   30  32275.360 ± 1722.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1477721.349 ops/s
# Warmup Iteration   2: 2109646.828 ops/s
# Warmup Iteration   3: 2515513.159 ops/s
# Warmup Iteration   4: 2509249.791 ops/s
# Warmup Iteration   5: 2522259.770 ops/s
# Warmup Iteration   6: 2516740.427 ops/s
# Warmup Iteration   7: 2257973.667 ops/s
# Warmup Iteration   8: 2380834.831 ops/s
# Warmup Iteration   9: 2523387.359 ops/s
# Warmup Iteration  10: 2511542.478 ops/s
# Warmup Iteration  11: 2522684.345 ops/s
# Warmup Iteration  12: 2529101.230 ops/s
# Warmup Iteration  13: 2526349.599 ops/s
# Warmup Iteration  14: 2524040.635 ops/s
# Warmup Iteration  15: 2514745.358 ops/s
# Warmup Iteration  16: 2528541.937 ops/s
# Warmup Iteration  17: 2529332.749 ops/s
# Warmup Iteration  18: 2530099.327 ops/s
# Warmup Iteration  19: 2526549.931 ops/s
# Warmup Iteration  20: 2528897.475 ops/s
# Warmup Iteration  21: 2531446.828 ops/s
# Warmup Iteration  22: 2526549.922 ops/s
# Warmup Iteration  23: 2529048.249 ops/s
# Warmup Iteration  24: 2520749.745 ops/s
# Warmup Iteration  25: 2528797.935 ops/s
# Warmup Iteration  26: 2525632.016 ops/s
# Warmup Iteration  27: 2522612.966 ops/s
# Warmup Iteration  28: 2531823.501 ops/s
# Warmup Iteration  29: 2531251.772 ops/s
# Warmup Iteration  30: 2517453.495 ops/s
Iteration   1: 2518777.406 ops/s
Iteration   2: 2523040.255 ops/s
Iteration   3: 2512124.595 ops/s
Iteration   4: 2506629.365 ops/s
Iteration   5: 2533588.841 ops/s
Iteration   6: 2516439.437 ops/s
Iteration   7: 2519780.027 ops/s
Iteration   8: 2523800.481 ops/s
Iteration   9: 2520975.101 ops/s
Iteration  10: 2528067.723 ops/s
Iteration  11: 2521973.255 ops/s
Iteration  12: 2533211.157 ops/s
Iteration  13: 2533120.535 ops/s
Iteration  14: 2523915.824 ops/s
Iteration  15: 2524283.524 ops/s
Iteration  16: 2517938.133 ops/s
Iteration  17: 2526195.867 ops/s
Iteration  18: 2508113.154 ops/s
Iteration  19: 2525831.976 ops/s
Iteration  20: 2531933.433 ops/s
Iteration  21: 2529562.086 ops/s
Iteration  22: 2510072.324 ops/s
Iteration  23: 2518204.733 ops/s
Iteration  24: 2523795.653 ops/s
Iteration  25: 2517879.951 ops/s
Iteration  26: 2509954.903 ops/s
Iteration  27: 2519451.529 ops/s
Iteration  28: 2520848.940 ops/s
Iteration  29: 2473940.569 ops/s
Iteration  30: 2509973.385 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partition":
  2519447.472 ±(99.9%) 7648.816 ops/s [Average]
  (min, avg, max) = (2473940.569, 2519447.472, 2533588.841), stdev = 11448.388
  CI (99.9%): [2511798.657, 2527096.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_partition  thrpt   30  2519447.472 ± 7648.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4432905.250 ops/s
# Warmup Iteration   2: 9571106.082 ops/s
# Warmup Iteration   3: 8262482.760 ops/s
# Warmup Iteration   4: 9014437.620 ops/s
# Warmup Iteration   5: 9668202.047 ops/s
# Warmup Iteration   6: 9624252.318 ops/s
# Warmup Iteration   7: 9672411.476 ops/s
# Warmup Iteration   8: 9712900.118 ops/s
# Warmup Iteration   9: 9639923.274 ops/s
# Warmup Iteration  10: 9644728.300 ops/s
# Warmup Iteration  11: 9687825.113 ops/s
# Warmup Iteration  12: 9623376.144 ops/s
# Warmup Iteration  13: 9680381.654 ops/s
# Warmup Iteration  14: 9699255.029 ops/s
# Warmup Iteration  15: 9635942.393 ops/s
# Warmup Iteration  16: 9705173.560 ops/s
# Warmup Iteration  17: 9723181.762 ops/s
# Warmup Iteration  18: 9754755.814 ops/s
# Warmup Iteration  19: 9775047.723 ops/s
# Warmup Iteration  20: 9757760.092 ops/s
# Warmup Iteration  21: 9716649.719 ops/s
# Warmup Iteration  22: 9702044.267 ops/s
# Warmup Iteration  23: 9719765.301 ops/s
# Warmup Iteration  24: 9733130.225 ops/s
# Warmup Iteration  25: 9738056.401 ops/s
# Warmup Iteration  26: 9715234.082 ops/s
# Warmup Iteration  27: 9724053.746 ops/s
# Warmup Iteration  28: 9707135.948 ops/s
# Warmup Iteration  29: 9642811.612 ops/s
# Warmup Iteration  30: 9727286.898 ops/s
Iteration   1: 9656265.728 ops/s
Iteration   2: 9752671.842 ops/s
Iteration   3: 9777752.426 ops/s
Iteration   4: 9758784.484 ops/s
Iteration   5: 9729794.310 ops/s
Iteration   6: 9733352.553 ops/s
Iteration   7: 9770818.213 ops/s
Iteration   8: 9716314.391 ops/s
Iteration   9: 9697045.700 ops/s
Iteration  10: 9738676.063 ops/s
Iteration  11: 9718925.686 ops/s
Iteration  12: 9713249.311 ops/s
Iteration  13: 9678994.267 ops/s
Iteration  14: 9774443.529 ops/s
Iteration  15: 9687382.825 ops/s
Iteration  16: 9799882.886 ops/s
Iteration  17: 9704918.882 ops/s
Iteration  18: 9735097.963 ops/s
Iteration  19: 9739867.920 ops/s
Iteration  20: 9718139.935 ops/s
Iteration  21: 9684677.453 ops/s
Iteration  22: 9717520.798 ops/s
Iteration  23: 9692274.366 ops/s
Iteration  24: 9722647.495 ops/s
Iteration  25: 9719951.551 ops/s
Iteration  26: 9744643.085 ops/s
Iteration  27: 9680069.615 ops/s
Iteration  28: 9701903.680 ops/s
Iteration  29: 9775110.787 ops/s
Iteration  30: 9684440.765 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWhile":
  9724187.284 ±(99.9%) 23223.949 ops/s [Average]
  (min, avg, max) = (9656265.728, 9724187.284, 9799882.886), stdev = 34760.515
  CI (99.9%): [9700963.335, 9747411.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_partitionWhile  thrpt   30  9724187.284 ± 23223.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1260327.965 ops/s
# Warmup Iteration   2: 1894560.780 ops/s
# Warmup Iteration   3: 2225494.365 ops/s
# Warmup Iteration   4: 2218576.528 ops/s
# Warmup Iteration   5: 2224898.234 ops/s
# Warmup Iteration   6: 2234727.897 ops/s
# Warmup Iteration   7: 1864762.888 ops/s
# Warmup Iteration   8: 2227860.977 ops/s
# Warmup Iteration   9: 2218723.361 ops/s
# Warmup Iteration  10: 2215096.319 ops/s
# Warmup Iteration  11: 2222913.225 ops/s
# Warmup Iteration  12: 2232519.009 ops/s
# Warmup Iteration  13: 2224819.853 ops/s
# Warmup Iteration  14: 2228665.253 ops/s
# Warmup Iteration  15: 2226944.121 ops/s
# Warmup Iteration  16: 2230811.832 ops/s
# Warmup Iteration  17: 2227293.583 ops/s
# Warmup Iteration  18: 2230207.437 ops/s
# Warmup Iteration  19: 2230890.024 ops/s
# Warmup Iteration  20: 2232457.012 ops/s
# Warmup Iteration  21: 2220074.918 ops/s
# Warmup Iteration  22: 2233852.666 ops/s
# Warmup Iteration  23: 2232383.666 ops/s
# Warmup Iteration  24: 2228800.783 ops/s
# Warmup Iteration  25: 2225483.152 ops/s
# Warmup Iteration  26: 2222190.907 ops/s
# Warmup Iteration  27: 2231253.103 ops/s
# Warmup Iteration  28: 2231333.348 ops/s
# Warmup Iteration  29: 2234840.377 ops/s
# Warmup Iteration  30: 2232632.518 ops/s
Iteration   1: 2236031.076 ops/s
Iteration   2: 2231214.166 ops/s
Iteration   3: 2231612.960 ops/s
Iteration   4: 2233957.847 ops/s
Iteration   5: 2232468.519 ops/s
Iteration   6: 2231942.878 ops/s
Iteration   7: 2230746.285 ops/s
Iteration   8: 2231407.501 ops/s
Iteration   9: 2233576.086 ops/s
Iteration  10: 2234149.093 ops/s
Iteration  11: 2233605.147 ops/s
Iteration  12: 2228771.447 ops/s
Iteration  13: 2228817.648 ops/s
Iteration  14: 2222404.861 ops/s
Iteration  15: 2223012.826 ops/s
Iteration  16: 2237050.863 ops/s
Iteration  17: 2236222.798 ops/s
Iteration  18: 2227225.000 ops/s
Iteration  19: 2238433.098 ops/s
Iteration  20: 2226976.634 ops/s
Iteration  21: 2227137.103 ops/s
Iteration  22: 2235219.570 ops/s
Iteration  23: 2230203.792 ops/s
Iteration  24: 2234885.142 ops/s
Iteration  25: 2236664.397 ops/s
Iteration  26: 2226515.376 ops/s
Iteration  27: 2227097.091 ops/s
Iteration  28: 2229087.233 ops/s
Iteration  29: 2230641.042 ops/s
Iteration  30: 2214532.870 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_partitionWith":
  2230720.345 ±(99.9%) 3389.896 ops/s [Average]
  (min, avg, max) = (2214532.870, 2230720.345, 2238433.098), stdev = 5073.836
  CI (99.9%): [2227330.449, 2234110.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_partitionWith  thrpt   30  2230720.345 ± 3389.896  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5643056.203 ops/s
# Warmup Iteration   2: 12939624.015 ops/s
# Warmup Iteration   3: 10928552.220 ops/s
# Warmup Iteration   4: 13130237.652 ops/s
# Warmup Iteration   5: 13121863.552 ops/s
# Warmup Iteration   6: 13116684.931 ops/s
# Warmup Iteration   7: 13131357.270 ops/s
# Warmup Iteration   8: 13116680.109 ops/s
# Warmup Iteration   9: 13095512.499 ops/s
# Warmup Iteration  10: 13105879.179 ops/s
# Warmup Iteration  11: 13154433.069 ops/s
# Warmup Iteration  12: 13100509.926 ops/s
# Warmup Iteration  13: 13151623.312 ops/s
# Warmup Iteration  14: 13137952.939 ops/s
# Warmup Iteration  15: 13112402.175 ops/s
# Warmup Iteration  16: 13129165.977 ops/s
# Warmup Iteration  17: 13124415.193 ops/s
# Warmup Iteration  18: 13101667.096 ops/s
# Warmup Iteration  19: 13134198.246 ops/s
# Warmup Iteration  20: 13134951.148 ops/s
# Warmup Iteration  21: 13130632.574 ops/s
# Warmup Iteration  22: 13121295.609 ops/s
# Warmup Iteration  23: 13142270.244 ops/s
# Warmup Iteration  24: 13134833.326 ops/s
# Warmup Iteration  25: 13147810.838 ops/s
# Warmup Iteration  26: 13132293.532 ops/s
# Warmup Iteration  27: 13103576.377 ops/s
# Warmup Iteration  28: 13116743.136 ops/s
# Warmup Iteration  29: 13098942.027 ops/s
# Warmup Iteration  30: 13087465.548 ops/s
Iteration   1: 13114519.828 ops/s
Iteration   2: 13127371.338 ops/s
Iteration   3: 13155394.730 ops/s
Iteration   4: 13123821.085 ops/s
Iteration   5: 13111165.966 ops/s
Iteration   6: 13145446.178 ops/s
Iteration   7: 13155524.394 ops/s
Iteration   8: 13127108.061 ops/s
Iteration   9: 13088386.915 ops/s
Iteration  10: 13144660.127 ops/s
Iteration  11: 13097781.960 ops/s
Iteration  12: 13108016.328 ops/s
Iteration  13: 13115598.769 ops/s
Iteration  14: 13087931.481 ops/s
Iteration  15: 13161162.491 ops/s
Iteration  16: 13112666.648 ops/s
Iteration  17: 13060615.974 ops/s
Iteration  18: 13093118.830 ops/s
Iteration  19: 13065945.988 ops/s
Iteration  20: 13108453.801 ops/s
Iteration  21: 13127749.912 ops/s
Iteration  22: 13080091.559 ops/s
Iteration  23: 13093178.314 ops/s
Iteration  24: 13142478.104 ops/s
Iteration  25: 13145319.654 ops/s
Iteration  26: 13142885.249 ops/s
Iteration  27: 12966363.241 ops/s
Iteration  28: 13102635.649 ops/s
Iteration  29: 13132879.472 ops/s
Iteration  30: 13145577.149 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject":
  13112794.973 ±(99.9%) 25710.413 ops/s [Average]
  (min, avg, max) = (12966363.241, 13112794.973, 13161162.491), stdev = 38482.139
  CI (99.9%): [13087084.560, 13138505.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_reject  thrpt   30  13112794.973 ± 25710.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3863733.154 ops/s
# Warmup Iteration   2: 8787015.361 ops/s
# Warmup Iteration   3: 7530509.690 ops/s
# Warmup Iteration   4: 8943020.732 ops/s
# Warmup Iteration   5: 8972839.190 ops/s
# Warmup Iteration   6: 8962738.831 ops/s
# Warmup Iteration   7: 8995395.813 ops/s
# Warmup Iteration   8: 8955678.761 ops/s
# Warmup Iteration   9: 8982872.848 ops/s
# Warmup Iteration  10: 8978448.423 ops/s
# Warmup Iteration  11: 8989095.334 ops/s
# Warmup Iteration  12: 8967688.503 ops/s
# Warmup Iteration  13: 8970293.496 ops/s
# Warmup Iteration  14: 8959311.802 ops/s
# Warmup Iteration  15: 8981656.184 ops/s
# Warmup Iteration  16: 8945239.584 ops/s
# Warmup Iteration  17: 8992408.581 ops/s
# Warmup Iteration  18: 9019784.237 ops/s
# Warmup Iteration  19: 8961502.299 ops/s
# Warmup Iteration  20: 9007277.904 ops/s
# Warmup Iteration  21: 8953918.358 ops/s
# Warmup Iteration  22: 8964583.207 ops/s
# Warmup Iteration  23: 8948705.233 ops/s
# Warmup Iteration  24: 8943052.840 ops/s
# Warmup Iteration  25: 8967711.026 ops/s
# Warmup Iteration  26: 8958354.559 ops/s
# Warmup Iteration  27: 8979507.802 ops/s
# Warmup Iteration  28: 8958819.520 ops/s
# Warmup Iteration  29: 8985820.579 ops/s
# Warmup Iteration  30: 8967310.183 ops/s
Iteration   1: 8978024.639 ops/s
Iteration   2: 8977953.564 ops/s
Iteration   3: 8926248.219 ops/s
Iteration   4: 9006810.975 ops/s
Iteration   5: 9024088.337 ops/s
Iteration   6: 8934997.445 ops/s
Iteration   7: 8981360.869 ops/s
Iteration   8: 8999606.954 ops/s
Iteration   9: 8994017.589 ops/s
Iteration  10: 8981339.071 ops/s
Iteration  11: 8985527.548 ops/s
Iteration  12: 8981513.218 ops/s
Iteration  13: 8971171.104 ops/s
Iteration  14: 8996237.247 ops/s
Iteration  15: 8938457.411 ops/s
Iteration  16: 8965419.994 ops/s
Iteration  17: 8990948.411 ops/s
Iteration  18: 8969914.765 ops/s
Iteration  19: 8970141.355 ops/s
Iteration  20: 9002004.360 ops/s
Iteration  21: 9031513.623 ops/s
Iteration  22: 9001361.173 ops/s
Iteration  23: 8964783.010 ops/s
Iteration  24: 8986935.904 ops/s
Iteration  25: 8987877.616 ops/s
Iteration  26: 9016568.564 ops/s
Iteration  27: 8995782.969 ops/s
Iteration  28: 8997958.920 ops/s
Iteration  29: 8945795.668 ops/s
Iteration  30: 9008718.135 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith":
  8983769.289 ±(99.9%) 16744.021 ops/s [Average]
  (min, avg, max) = (8926248.219, 8983769.289, 9031513.623), stdev = 25061.664
  CI (99.9%): [8967025.268, 9000513.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_rejectWith  thrpt   30  8983769.289 ± 16744.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5056164.868 ops/s
# Warmup Iteration   2: 11284242.762 ops/s
# Warmup Iteration   3: 9625416.702 ops/s
# Warmup Iteration   4: 11395804.172 ops/s
# Warmup Iteration   5: 11352797.983 ops/s
# Warmup Iteration   6: 11379771.689 ops/s
# Warmup Iteration   7: 11384551.261 ops/s
# Warmup Iteration   8: 11381821.355 ops/s
# Warmup Iteration   9: 11419030.325 ops/s
# Warmup Iteration  10: 11359533.446 ops/s
# Warmup Iteration  11: 11392087.509 ops/s
# Warmup Iteration  12: 11339790.871 ops/s
# Warmup Iteration  13: 11392379.655 ops/s
# Warmup Iteration  14: 11395739.288 ops/s
# Warmup Iteration  15: 11418466.666 ops/s
# Warmup Iteration  16: 11373182.539 ops/s
# Warmup Iteration  17: 11434727.583 ops/s
# Warmup Iteration  18: 11439057.178 ops/s
# Warmup Iteration  19: 11427564.519 ops/s
# Warmup Iteration  20: 11447161.702 ops/s
# Warmup Iteration  21: 11473358.918 ops/s
# Warmup Iteration  22: 11421562.374 ops/s
# Warmup Iteration  23: 11361857.488 ops/s
# Warmup Iteration  24: 11483532.968 ops/s
# Warmup Iteration  25: 11399704.146 ops/s
# Warmup Iteration  26: 11430583.234 ops/s
# Warmup Iteration  27: 11389913.757 ops/s
# Warmup Iteration  28: 11386284.085 ops/s
# Warmup Iteration  29: 11443406.248 ops/s
# Warmup Iteration  30: 11426019.382 ops/s
Iteration   1: 11398722.548 ops/s
Iteration   2: 11381976.278 ops/s
Iteration   3: 11361993.499 ops/s
Iteration   4: 11336961.518 ops/s
Iteration   5: 11449896.602 ops/s
Iteration   6: 11459204.843 ops/s
Iteration   7: 11445754.773 ops/s
Iteration   8: 11482874.382 ops/s
Iteration   9: 11483609.984 ops/s
Iteration  10: 11408072.055 ops/s
Iteration  11: 11448020.456 ops/s
Iteration  12: 11472375.039 ops/s
Iteration  13: 11424515.582 ops/s
Iteration  14: 11433699.216 ops/s
Iteration  15: 11408137.175 ops/s
Iteration  16: 11430073.703 ops/s
Iteration  17: 11399803.837 ops/s
Iteration  18: 11426962.455 ops/s
Iteration  19: 11462758.766 ops/s
Iteration  20: 11458609.375 ops/s
Iteration  21: 11377056.658 ops/s
Iteration  22: 11450004.023 ops/s
Iteration  23: 11465026.466 ops/s
Iteration  24: 11435531.601 ops/s
Iteration  25: 11488016.293 ops/s
Iteration  26: 10341088.309 ops/s
Iteration  27: 11183739.842 ops/s
Iteration  28: 11459669.261 ops/s
Iteration  29: 11468592.774 ops/s
Iteration  30: 11440833.530 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndex":
  11389452.695 ±(99.9%) 137987.985 ops/s [Average]
  (min, avg, max) = (10341088.309, 11389452.695, 11488016.293), stdev = 206533.935
  CI (99.9%): [11251464.710, 11527440.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  11389452.695 ± 137987.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3938485.645 ops/s
# Warmup Iteration   2: 8588012.658 ops/s
# Warmup Iteration   3: 7414324.671 ops/s
# Warmup Iteration   4: 8704981.296 ops/s
# Warmup Iteration   5: 8756708.305 ops/s
# Warmup Iteration   6: 8787786.200 ops/s
# Warmup Iteration   7: 8771333.700 ops/s
# Warmup Iteration   8: 8737293.327 ops/s
# Warmup Iteration   9: 8780315.003 ops/s
# Warmup Iteration  10: 8758850.741 ops/s
# Warmup Iteration  11: 8781553.892 ops/s
# Warmup Iteration  12: 8707977.746 ops/s
# Warmup Iteration  13: 8780132.909 ops/s
# Warmup Iteration  14: 8758883.075 ops/s
# Warmup Iteration  15: 8781464.722 ops/s
# Warmup Iteration  16: 8766694.948 ops/s
# Warmup Iteration  17: 8749047.189 ops/s
# Warmup Iteration  18: 8730465.605 ops/s
# Warmup Iteration  19: 8746644.253 ops/s
# Warmup Iteration  20: 8758621.162 ops/s
# Warmup Iteration  21: 8733485.595 ops/s
# Warmup Iteration  22: 8723949.217 ops/s
# Warmup Iteration  23: 8735455.473 ops/s
# Warmup Iteration  24: 8710284.301 ops/s
# Warmup Iteration  25: 8681709.294 ops/s
# Warmup Iteration  26: 8760917.482 ops/s
# Warmup Iteration  27: 8748243.204 ops/s
# Warmup Iteration  28: 8756587.627 ops/s
# Warmup Iteration  29: 8778657.996 ops/s
# Warmup Iteration  30: 8748273.010 ops/s
Iteration   1: 8739544.690 ops/s
Iteration   2: 8746351.340 ops/s
Iteration   3: 8716921.225 ops/s
Iteration   4: 8740769.118 ops/s
Iteration   5: 8754520.569 ops/s
Iteration   6: 8745513.369 ops/s
Iteration   7: 8744927.433 ops/s
Iteration   8: 8751640.427 ops/s
Iteration   9: 8762016.787 ops/s
Iteration  10: 8724587.796 ops/s
Iteration  11: 8730043.475 ops/s
Iteration  12: 8769633.418 ops/s
Iteration  13: 8731488.303 ops/s
Iteration  14: 8762943.363 ops/s
Iteration  15: 8766930.146 ops/s
Iteration  16: 8732393.335 ops/s
Iteration  17: 8753335.069 ops/s
Iteration  18: 8766401.240 ops/s
Iteration  19: 8758720.908 ops/s
Iteration  20: 8758160.237 ops/s
Iteration  21: 8733249.927 ops/s
Iteration  22: 8737429.798 ops/s
Iteration  23: 8749689.288 ops/s
Iteration  24: 8737185.331 ops/s
Iteration  25: 8737470.812 ops/s
Iteration  26: 8719363.884 ops/s
Iteration  27: 8789549.258 ops/s
Iteration  28: 8766038.044 ops/s
Iteration  29: 8709560.773 ops/s
Iteration  30: 8812292.100 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  8748289.049 ±(99.9%) 14373.489 ops/s [Average]
  (min, avg, max) = (8709560.773, 8748289.049, 8812292.100), stdev = 21513.563
  CI (99.9%): [8733915.560, 8762662.538] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  8748289.049 ± 14373.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4621920.397 ops/s
# Warmup Iteration   2: 9869983.420 ops/s
# Warmup Iteration   3: 8858251.721 ops/s
# Warmup Iteration   4: 10443778.595 ops/s
# Warmup Iteration   5: 10401380.642 ops/s
# Warmup Iteration   6: 10417157.013 ops/s
# Warmup Iteration   7: 10395635.844 ops/s
# Warmup Iteration   8: 10352280.052 ops/s
# Warmup Iteration   9: 10382048.435 ops/s
# Warmup Iteration  10: 10396911.580 ops/s
# Warmup Iteration  11: 10372006.588 ops/s
# Warmup Iteration  12: 10326117.028 ops/s
# Warmup Iteration  13: 10316031.783 ops/s
# Warmup Iteration  14: 10363749.517 ops/s
# Warmup Iteration  15: 10401894.024 ops/s
# Warmup Iteration  16: 10377203.443 ops/s
# Warmup Iteration  17: 10408445.492 ops/s
# Warmup Iteration  18: 10416868.473 ops/s
# Warmup Iteration  19: 10388530.452 ops/s
# Warmup Iteration  20: 10392823.453 ops/s
# Warmup Iteration  21: 10384400.445 ops/s
# Warmup Iteration  22: 10412663.746 ops/s
# Warmup Iteration  23: 10415269.503 ops/s
# Warmup Iteration  24: 10423117.275 ops/s
# Warmup Iteration  25: 10382306.813 ops/s
# Warmup Iteration  26: 10319329.778 ops/s
# Warmup Iteration  27: 10428744.388 ops/s
# Warmup Iteration  28: 10345091.751 ops/s
# Warmup Iteration  29: 10379484.294 ops/s
# Warmup Iteration  30: 10315698.874 ops/s
Iteration   1: 10408051.841 ops/s
Iteration   2: 10459832.973 ops/s
Iteration   3: 10435943.977 ops/s
Iteration   4: 10421292.671 ops/s
Iteration   5: 10375585.643 ops/s
Iteration   6: 10389407.714 ops/s
Iteration   7: 10318123.537 ops/s
Iteration   8: 10365736.321 ops/s
Iteration   9: 10382637.104 ops/s
Iteration  10: 10402300.775 ops/s
Iteration  11: 10397809.126 ops/s
Iteration  12: 10414103.832 ops/s
Iteration  13: 10416707.825 ops/s
Iteration  14: 10418072.325 ops/s
Iteration  15: 10463508.324 ops/s
Iteration  16: 10391732.055 ops/s
Iteration  17: 10361642.651 ops/s
Iteration  18: 10346653.510 ops/s
Iteration  19: 10399003.378 ops/s
Iteration  20: 10359985.371 ops/s
Iteration  21: 10331611.625 ops/s
Iteration  22: 10339625.328 ops/s
Iteration  23: 10299876.570 ops/s
Iteration  24: 10403775.280 ops/s
Iteration  25: 10389401.923 ops/s
Iteration  26: 10378027.615 ops/s
Iteration  27: 10336965.580 ops/s
Iteration  28: 10348365.986 ops/s
Iteration  29: 10347804.858 ops/s
Iteration  30: 10426558.796 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_rejectWith_target":
  10384338.150 ±(99.9%) 26833.673 ops/s [Average]
  (min, avg, max) = (10299876.570, 10384338.150, 10463508.324), stdev = 40163.381
  CI (99.9%): [10357504.478, 10411171.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  10384338.150 ± 26833.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9640298.901 ops/s
# Warmup Iteration   2: 17304380.103 ops/s
# Warmup Iteration   3: 20426100.100 ops/s
# Warmup Iteration   4: 20418368.169 ops/s
# Warmup Iteration   5: 20347353.137 ops/s
# Warmup Iteration   6: 20370576.342 ops/s
# Warmup Iteration   7: 20371002.268 ops/s
# Warmup Iteration   8: 20434133.350 ops/s
# Warmup Iteration   9: 20418040.408 ops/s
# Warmup Iteration  10: 20358947.275 ops/s
# Warmup Iteration  11: 20443632.849 ops/s
# Warmup Iteration  12: 20383626.503 ops/s
# Warmup Iteration  13: 20230641.703 ops/s
# Warmup Iteration  14: 20362299.662 ops/s
# Warmup Iteration  15: 20439490.820 ops/s
# Warmup Iteration  16: 20520153.793 ops/s
# Warmup Iteration  17: 20393465.733 ops/s
# Warmup Iteration  18: 20328893.150 ops/s
# Warmup Iteration  19: 20396262.864 ops/s
# Warmup Iteration  20: 20457299.768 ops/s
# Warmup Iteration  21: 20349230.372 ops/s
# Warmup Iteration  22: 20497013.523 ops/s
# Warmup Iteration  23: 20403538.689 ops/s
# Warmup Iteration  24: 20506633.572 ops/s
# Warmup Iteration  25: 20493783.163 ops/s
# Warmup Iteration  26: 20449187.648 ops/s
# Warmup Iteration  27: 20387050.488 ops/s
# Warmup Iteration  28: 20473727.943 ops/s
# Warmup Iteration  29: 20414672.616 ops/s
# Warmup Iteration  30: 20492622.856 ops/s
Iteration   1: 20455332.914 ops/s
Iteration   2: 20368224.196 ops/s
Iteration   3: 20308992.761 ops/s
Iteration   4: 20346594.454 ops/s
Iteration   5: 20555127.250 ops/s
Iteration   6: 20447221.262 ops/s
Iteration   7: 20525106.277 ops/s
Iteration   8: 20407617.370 ops/s
Iteration   9: 20515377.155 ops/s
Iteration  10: 20555576.036 ops/s
Iteration  11: 20644832.660 ops/s
Iteration  12: 20591178.849 ops/s
Iteration  13: 20492724.169 ops/s
Iteration  14: 20484519.296 ops/s
Iteration  15: 20481711.025 ops/s
Iteration  16: 20458100.358 ops/s
Iteration  17: 20611306.050 ops/s
Iteration  18: 20569470.306 ops/s
Iteration  19: 20468916.952 ops/s
Iteration  20: 20437313.341 ops/s
Iteration  21: 20502497.950 ops/s
Iteration  22: 20385069.071 ops/s
Iteration  23: 20372251.317 ops/s
Iteration  24: 20550965.552 ops/s
Iteration  25: 20513531.037 ops/s
Iteration  26: 20447230.454 ops/s
Iteration  27: 20387698.256 ops/s
Iteration  28: 20393931.994 ops/s
Iteration  29: 20456861.438 ops/s
Iteration  30: 20407201.012 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reject_target":
  20471416.025 ±(99.9%) 54981.997 ops/s [Average]
  (min, avg, max) = (20308992.761, 20471416.025, 20644832.660), stdev = 82294.470
  CI (99.9%): [20416434.029, 20526398.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_reject_target  thrpt   30  20471416.025 ± 54981.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623661.048 ops/s
# Warmup Iteration   2: 776016.784 ops/s
# Warmup Iteration   3: 957857.320 ops/s
# Warmup Iteration   4: 953395.262 ops/s
# Warmup Iteration   5: 961522.484 ops/s
# Warmup Iteration   6: 964852.358 ops/s
# Warmup Iteration   7: 957649.354 ops/s
# Warmup Iteration   8: 960204.306 ops/s
# Warmup Iteration   9: 809878.506 ops/s
# Warmup Iteration  10: 959165.344 ops/s
# Warmup Iteration  11: 965201.670 ops/s
# Warmup Iteration  12: 961557.785 ops/s
# Warmup Iteration  13: 961701.386 ops/s
# Warmup Iteration  14: 963039.410 ops/s
# Warmup Iteration  15: 961858.192 ops/s
# Warmup Iteration  16: 953199.176 ops/s
# Warmup Iteration  17: 1006504.915 ops/s
# Warmup Iteration  18: 1009813.473 ops/s
# Warmup Iteration  19: 1007863.455 ops/s
# Warmup Iteration  20: 1010587.363 ops/s
# Warmup Iteration  21: 1006696.150 ops/s
# Warmup Iteration  22: 1008899.526 ops/s
# Warmup Iteration  23: 1010370.586 ops/s
# Warmup Iteration  24: 1011967.050 ops/s
# Warmup Iteration  25: 1006783.285 ops/s
# Warmup Iteration  26: 1009370.988 ops/s
# Warmup Iteration  27: 1008904.784 ops/s
# Warmup Iteration  28: 1009771.940 ops/s
# Warmup Iteration  29: 1010163.356 ops/s
# Warmup Iteration  30: 1005655.701 ops/s
Iteration   1: 1012011.075 ops/s
Iteration   2: 999790.471 ops/s
Iteration   3: 999291.031 ops/s
Iteration   4: 1008053.380 ops/s
Iteration   5: 1007461.743 ops/s
Iteration   6: 1008375.973 ops/s
Iteration   7: 1007648.118 ops/s
Iteration   8: 1010573.957 ops/s
Iteration   9: 1010188.128 ops/s
Iteration  10: 1007251.695 ops/s
Iteration  11: 1014243.990 ops/s
Iteration  12: 1012495.934 ops/s
Iteration  13: 1010623.169 ops/s
Iteration  14: 1011976.926 ops/s
Iteration  15: 1009623.135 ops/s
Iteration  16: 1011878.364 ops/s
Iteration  17: 1011238.150 ops/s
Iteration  18: 1011681.793 ops/s
Iteration  19: 1013069.956 ops/s
Iteration  20: 1014938.314 ops/s
Iteration  21: 1011829.631 ops/s
Iteration  22: 1014635.575 ops/s
Iteration  23: 1012158.155 ops/s
Iteration  24: 1010158.997 ops/s
Iteration  25: 1010913.351 ops/s
Iteration  26: 1005907.598 ops/s
Iteration  27: 1013249.307 ops/s
Iteration  28: 1009286.676 ops/s
Iteration  29: 1011608.566 ops/s
Iteration  30: 1013063.817 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_remove":
  1010174.232 ±(99.9%) 2446.615 ops/s [Average]
  (min, avg, max) = (999291.031, 1010174.232, 1014938.314), stdev = 3661.978
  CI (99.9%): [1007727.618, 1012620.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_remove  thrpt   30  1010174.232 ± 2446.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607581.263 ops/s
# Warmup Iteration   2: 755735.438 ops/s
# Warmup Iteration   3: 942197.679 ops/s
# Warmup Iteration   4: 943915.556 ops/s
# Warmup Iteration   5: 944838.665 ops/s
# Warmup Iteration   6: 941307.445 ops/s
# Warmup Iteration   7: 941253.925 ops/s
# Warmup Iteration   8: 926558.764 ops/s
# Warmup Iteration   9: 805099.052 ops/s
# Warmup Iteration  10: 940403.885 ops/s
# Warmup Iteration  11: 947594.203 ops/s
# Warmup Iteration  12: 946953.376 ops/s
# Warmup Iteration  13: 943747.174 ops/s
# Warmup Iteration  14: 942213.301 ops/s
# Warmup Iteration  15: 945961.869 ops/s
# Warmup Iteration  16: 949295.355 ops/s
# Warmup Iteration  17: 1007387.406 ops/s
# Warmup Iteration  18: 1002259.015 ops/s
# Warmup Iteration  19: 1002671.812 ops/s
# Warmup Iteration  20: 1003702.269 ops/s
# Warmup Iteration  21: 1001781.958 ops/s
# Warmup Iteration  22: 1001997.379 ops/s
# Warmup Iteration  23: 1000480.286 ops/s
# Warmup Iteration  24: 1003790.523 ops/s
# Warmup Iteration  25: 1000279.275 ops/s
# Warmup Iteration  26: 1003471.544 ops/s
# Warmup Iteration  27: 1002247.357 ops/s
# Warmup Iteration  28: 997963.551 ops/s
# Warmup Iteration  29: 1005385.030 ops/s
# Warmup Iteration  30: 1005020.897 ops/s
Iteration   1: 1000476.735 ops/s
Iteration   2: 1008398.860 ops/s
Iteration   3: 1006784.002 ops/s
Iteration   4: 1002222.743 ops/s
Iteration   5: 1003724.478 ops/s
Iteration   6: 1000750.074 ops/s
Iteration   7: 1001559.024 ops/s
Iteration   8: 997224.554 ops/s
Iteration   9: 1004589.100 ops/s
Iteration  10: 1005892.310 ops/s
Iteration  11: 1006448.328 ops/s
Iteration  12: 998773.877 ops/s
Iteration  13: 1007873.299 ops/s
Iteration  14: 1005647.009 ops/s
Iteration  15: 1005719.186 ops/s
Iteration  16: 1001898.751 ops/s
Iteration  17: 1001898.698 ops/s
Iteration  18: 1004941.392 ops/s
Iteration  19: 1004496.343 ops/s
Iteration  20: 999871.125 ops/s
Iteration  21: 1000267.337 ops/s
Iteration  22: 1003485.142 ops/s
Iteration  23: 1008334.211 ops/s
Iteration  24: 1002165.544 ops/s
Iteration  25: 1000480.494 ops/s
Iteration  26: 997284.825 ops/s
Iteration  27: 990025.250 ops/s
Iteration  28: 994495.245 ops/s
Iteration  29: 995064.140 ops/s
Iteration  30: 990393.757 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAll":
  1001706.195 ±(99.9%) 3227.342 ops/s [Average]
  (min, avg, max) = (990025.250, 1001706.195, 1008398.860), stdev = 4830.535
  CI (99.9%): [998478.852, 1004933.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_removeAll  thrpt   30  1001706.195 ± 3227.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625395.428 ops/s
# Warmup Iteration   2: 770700.704 ops/s
# Warmup Iteration   3: 956943.355 ops/s
# Warmup Iteration   4: 949666.371 ops/s
# Warmup Iteration   5: 960414.738 ops/s
# Warmup Iteration   6: 962642.232 ops/s
# Warmup Iteration   7: 960774.093 ops/s
# Warmup Iteration   8: 956831.267 ops/s
# Warmup Iteration   9: 816987.012 ops/s
# Warmup Iteration  10: 959890.334 ops/s
# Warmup Iteration  11: 960832.264 ops/s
# Warmup Iteration  12: 960495.869 ops/s
# Warmup Iteration  13: 961900.011 ops/s
# Warmup Iteration  14: 961313.852 ops/s
# Warmup Iteration  15: 955741.060 ops/s
# Warmup Iteration  16: 955702.875 ops/s
# Warmup Iteration  17: 1020280.838 ops/s
# Warmup Iteration  18: 1018119.102 ops/s
# Warmup Iteration  19: 1016821.713 ops/s
# Warmup Iteration  20: 1013996.039 ops/s
# Warmup Iteration  21: 1018327.403 ops/s
# Warmup Iteration  22: 1013802.112 ops/s
# Warmup Iteration  23: 1018338.072 ops/s
# Warmup Iteration  24: 1016919.529 ops/s
# Warmup Iteration  25: 1008564.306 ops/s
# Warmup Iteration  26: 1018356.529 ops/s
# Warmup Iteration  27: 1019447.129 ops/s
# Warmup Iteration  28: 1019246.491 ops/s
# Warmup Iteration  29: 1020778.596 ops/s
# Warmup Iteration  30: 1017658.715 ops/s
Iteration   1: 1018060.443 ops/s
Iteration   2: 1015936.993 ops/s
Iteration   3: 1015155.143 ops/s
Iteration   4: 1017492.932 ops/s
Iteration   5: 1017338.442 ops/s
Iteration   6: 1018507.009 ops/s
Iteration   7: 1013955.186 ops/s
Iteration   8: 1014802.626 ops/s
Iteration   9: 1018527.069 ops/s
Iteration  10: 1016305.590 ops/s
Iteration  11: 1017963.206 ops/s
Iteration  12: 1016425.024 ops/s
Iteration  13: 1016650.105 ops/s
Iteration  14: 1015204.161 ops/s
Iteration  15: 1017354.984 ops/s
Iteration  16: 1016326.340 ops/s
Iteration  17: 1018115.495 ops/s
Iteration  18: 1015222.759 ops/s
Iteration  19: 1020399.078 ops/s
Iteration  20: 1014277.039 ops/s
Iteration  21: 1016495.557 ops/s
Iteration  22: 1015782.671 ops/s
Iteration  23: 1015746.568 ops/s
Iteration  24: 1011910.953 ops/s
Iteration  25: 1013653.230 ops/s
Iteration  26: 1016140.542 ops/s
Iteration  27: 1018184.631 ops/s
Iteration  28: 1015749.311 ops/s
Iteration  29: 1019165.879 ops/s
Iteration  30: 1018991.681 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_removeAtIndex":
  1016528.022 ±(99.9%) 1239.691 ops/s [Average]
  (min, avg, max) = (1011910.953, 1016528.022, 1020399.078), stdev = 1855.512
  CI (99.9%): [1015288.330, 1017767.713] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1016528.022 ± 1239.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618892.380 ops/s
# Warmup Iteration   2: 764769.667 ops/s
# Warmup Iteration   3: 941951.532 ops/s
# Warmup Iteration   4: 945582.630 ops/s
# Warmup Iteration   5: 951967.042 ops/s
# Warmup Iteration   6: 950569.833 ops/s
# Warmup Iteration   7: 949057.679 ops/s
# Warmup Iteration   8: 950279.597 ops/s
# Warmup Iteration   9: 798946.871 ops/s
# Warmup Iteration  10: 953297.264 ops/s
# Warmup Iteration  11: 954114.506 ops/s
# Warmup Iteration  12: 953559.256 ops/s
# Warmup Iteration  13: 950428.076 ops/s
# Warmup Iteration  14: 950762.084 ops/s
# Warmup Iteration  15: 950221.110 ops/s
# Warmup Iteration  16: 954741.605 ops/s
# Warmup Iteration  17: 1008486.473 ops/s
# Warmup Iteration  18: 1008469.723 ops/s
# Warmup Iteration  19: 1009076.128 ops/s
# Warmup Iteration  20: 1003296.609 ops/s
# Warmup Iteration  21: 1001751.940 ops/s
# Warmup Iteration  22: 1004216.893 ops/s
# Warmup Iteration  23: 1005248.138 ops/s
# Warmup Iteration  24: 1007032.372 ops/s
# Warmup Iteration  25: 1007072.030 ops/s
# Warmup Iteration  26: 1007593.451 ops/s
# Warmup Iteration  27: 1005221.574 ops/s
# Warmup Iteration  28: 1008880.019 ops/s
# Warmup Iteration  29: 1011065.267 ops/s
# Warmup Iteration  30: 1010440.627 ops/s
Iteration   1: 1009627.093 ops/s
Iteration   2: 1010134.921 ops/s
Iteration   3: 1010361.693 ops/s
Iteration   4: 1005260.695 ops/s
Iteration   5: 1010051.728 ops/s
Iteration   6: 1009058.332 ops/s
Iteration   7: 1007968.207 ops/s
Iteration   8: 1010205.424 ops/s
Iteration   9: 1009026.819 ops/s
Iteration  10: 1008173.490 ops/s
Iteration  11: 996061.522 ops/s
Iteration  12: 1008408.657 ops/s
Iteration  13: 1010033.893 ops/s
Iteration  14: 1004973.781 ops/s
Iteration  15: 1006989.711 ops/s
Iteration  16: 1007841.231 ops/s
Iteration  17: 1010769.942 ops/s
Iteration  18: 1006636.749 ops/s
Iteration  19: 1010212.656 ops/s
Iteration  20: 1007679.709 ops/s
Iteration  21: 1005631.863 ops/s
Iteration  22: 1008560.240 ops/s
Iteration  23: 1004478.010 ops/s
Iteration  24: 1009520.082 ops/s
Iteration  25: 1008449.550 ops/s
Iteration  26: 1009369.668 ops/s
Iteration  27: 1006107.388 ops/s
Iteration  28: 1008921.618 ops/s
Iteration  29: 1008563.334 ops/s
Iteration  30: 1011128.502 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_replaceAll":
  1008006.884 ±(99.9%) 1923.534 ops/s [Average]
  (min, avg, max) = (996061.522, 1008006.884, 1011128.502), stdev = 2879.056
  CI (99.9%): [1006083.349, 1009930.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_replaceAll  thrpt   30  1008006.884 ± 1923.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612847.314 ops/s
# Warmup Iteration   2: 762830.968 ops/s
# Warmup Iteration   3: 955046.885 ops/s
# Warmup Iteration   4: 949660.415 ops/s
# Warmup Iteration   5: 955374.286 ops/s
# Warmup Iteration   6: 954980.013 ops/s
# Warmup Iteration   7: 954108.292 ops/s
# Warmup Iteration   8: 946396.952 ops/s
# Warmup Iteration   9: 807126.608 ops/s
# Warmup Iteration  10: 953139.022 ops/s
# Warmup Iteration  11: 955156.770 ops/s
# Warmup Iteration  12: 954600.550 ops/s
# Warmup Iteration  13: 955494.657 ops/s
# Warmup Iteration  14: 954238.623 ops/s
# Warmup Iteration  15: 955592.407 ops/s
# Warmup Iteration  16: 955593.699 ops/s
# Warmup Iteration  17: 1005147.742 ops/s
# Warmup Iteration  18: 1008540.874 ops/s
# Warmup Iteration  19: 1009113.610 ops/s
# Warmup Iteration  20: 1008635.126 ops/s
# Warmup Iteration  21: 1010949.309 ops/s
# Warmup Iteration  22: 1003767.050 ops/s
# Warmup Iteration  23: 1004270.708 ops/s
# Warmup Iteration  24: 1004886.221 ops/s
# Warmup Iteration  25: 1006376.505 ops/s
# Warmup Iteration  26: 1005409.171 ops/s
# Warmup Iteration  27: 1009025.690 ops/s
# Warmup Iteration  28: 1007923.607 ops/s
# Warmup Iteration  29: 1002065.196 ops/s
# Warmup Iteration  30: 1004660.180 ops/s
Iteration   1: 1005804.042 ops/s
Iteration   2: 1003612.889 ops/s
Iteration   3: 999101.702 ops/s
Iteration   4: 1009002.067 ops/s
Iteration   5: 1009377.969 ops/s
Iteration   6: 1004491.193 ops/s
Iteration   7: 1004940.854 ops/s
Iteration   8: 1006323.574 ops/s
Iteration   9: 1010405.642 ops/s
Iteration  10: 1009761.243 ops/s
Iteration  11: 1006572.355 ops/s
Iteration  12: 1002899.746 ops/s
Iteration  13: 1005461.080 ops/s
Iteration  14: 1005804.833 ops/s
Iteration  15: 988576.649 ops/s
Iteration  16: 1000640.181 ops/s
Iteration  17: 1001147.271 ops/s
Iteration  18: 1000564.915 ops/s
Iteration  19: 1007337.270 ops/s
Iteration  20: 1008670.129 ops/s
Iteration  21: 1009455.048 ops/s
Iteration  22: 1007790.222 ops/s
Iteration  23: 1008219.926 ops/s
Iteration  24: 1006214.065 ops/s
Iteration  25: 1005928.321 ops/s
Iteration  26: 1008032.608 ops/s
Iteration  27: 1006802.938 ops/s
Iteration  28: 1006762.960 ops/s
Iteration  29: 1006399.590 ops/s
Iteration  30: 1003534.640 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_retainAll":
  1005321.197 ±(99.9%) 2865.013 ops/s [Average]
  (min, avg, max) = (988576.649, 1005321.197, 1010405.642), stdev = 4288.218
  CI (99.9%): [1002456.184, 1008186.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_retainAll  thrpt   30  1005321.197 ± 2865.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8114146.450 ops/s
# Warmup Iteration   2: 15526611.409 ops/s
# Warmup Iteration   3: 15020802.533 ops/s
# Warmup Iteration   4: 17843354.956 ops/s
# Warmup Iteration   5: 17832395.427 ops/s
# Warmup Iteration   6: 17852807.250 ops/s
# Warmup Iteration   7: 17858341.504 ops/s
# Warmup Iteration   8: 17800740.725 ops/s
# Warmup Iteration   9: 17824530.979 ops/s
# Warmup Iteration  10: 17872293.468 ops/s
# Warmup Iteration  11: 17803494.805 ops/s
# Warmup Iteration  12: 17902086.827 ops/s
# Warmup Iteration  13: 17851378.404 ops/s
# Warmup Iteration  14: 17828336.322 ops/s
# Warmup Iteration  15: 17745133.707 ops/s
# Warmup Iteration  16: 17792491.336 ops/s
# Warmup Iteration  17: 17829833.636 ops/s
# Warmup Iteration  18: 16604071.171 ops/s
# Warmup Iteration  19: 17848248.299 ops/s
# Warmup Iteration  20: 17884058.716 ops/s
# Warmup Iteration  21: 17847581.719 ops/s
# Warmup Iteration  22: 17844704.069 ops/s
# Warmup Iteration  23: 17845680.050 ops/s
# Warmup Iteration  24: 17859809.892 ops/s
# Warmup Iteration  25: 17789137.497 ops/s
# Warmup Iteration  26: 17823408.683 ops/s
# Warmup Iteration  27: 17853661.909 ops/s
# Warmup Iteration  28: 17854852.326 ops/s
# Warmup Iteration  29: 17874487.061 ops/s
# Warmup Iteration  30: 17844346.836 ops/s
Iteration   1: 17861635.289 ops/s
Iteration   2: 17796765.192 ops/s
Iteration   3: 17822727.008 ops/s
Iteration   4: 17767885.003 ops/s
Iteration   5: 17890925.862 ops/s
Iteration   6: 17772489.831 ops/s
Iteration   7: 17774658.765 ops/s
Iteration   8: 17901978.418 ops/s
Iteration   9: 17775790.992 ops/s
Iteration  10: 17895764.900 ops/s
Iteration  11: 17806346.313 ops/s
Iteration  12: 17747218.617 ops/s
Iteration  13: 17731194.880 ops/s
Iteration  14: 17831085.515 ops/s
Iteration  15: 17860043.822 ops/s
Iteration  16: 17868254.226 ops/s
Iteration  17: 17867231.503 ops/s
Iteration  18: 17802914.176 ops/s
Iteration  19: 17776167.971 ops/s
Iteration  20: 17888541.758 ops/s
Iteration  21: 17783656.526 ops/s
Iteration  22: 17794200.303 ops/s
Iteration  23: 17867328.269 ops/s
Iteration  24: 17859954.565 ops/s
Iteration  25: 17798365.020 ops/s
Iteration  26: 17806414.964 ops/s
Iteration  27: 17845374.659 ops/s
Iteration  28: 17887340.050 ops/s
Iteration  29: 17827028.395 ops/s
Iteration  30: 17800864.968 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEach":
  17823671.592 ±(99.9%) 32110.513 ops/s [Average]
  (min, avg, max) = (17731194.880, 17823671.592, 17901978.418), stdev = 48061.508
  CI (99.9%): [17791561.079, 17855782.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_reverseForEach  thrpt   30  17823671.592 ± 32110.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6565781.200 ops/s
# Warmup Iteration   2: 13892462.055 ops/s
# Warmup Iteration   3: 12298779.859 ops/s
# Warmup Iteration   4: 14558944.488 ops/s
# Warmup Iteration   5: 14479614.068 ops/s
# Warmup Iteration   6: 14518795.887 ops/s
# Warmup Iteration   7: 14582985.371 ops/s
# Warmup Iteration   8: 14474575.523 ops/s
# Warmup Iteration   9: 14522258.484 ops/s
# Warmup Iteration  10: 14515431.980 ops/s
# Warmup Iteration  11: 14592254.131 ops/s
# Warmup Iteration  12: 14550658.560 ops/s
# Warmup Iteration  13: 14523843.353 ops/s
# Warmup Iteration  14: 14542523.918 ops/s
# Warmup Iteration  15: 14535226.268 ops/s
# Warmup Iteration  16: 14482305.940 ops/s
# Warmup Iteration  17: 14723946.305 ops/s
# Warmup Iteration  18: 14714224.850 ops/s
# Warmup Iteration  19: 14698412.637 ops/s
# Warmup Iteration  20: 14719645.144 ops/s
# Warmup Iteration  21: 14684589.674 ops/s
# Warmup Iteration  22: 14586845.782 ops/s
# Warmup Iteration  23: 14723637.657 ops/s
# Warmup Iteration  24: 14678745.068 ops/s
# Warmup Iteration  25: 14697481.736 ops/s
# Warmup Iteration  26: 14665765.717 ops/s
# Warmup Iteration  27: 14682356.704 ops/s
# Warmup Iteration  28: 14679962.417 ops/s
# Warmup Iteration  29: 14668375.724 ops/s
# Warmup Iteration  30: 14685352.685 ops/s
Iteration   1: 14665170.723 ops/s
Iteration   2: 14753919.314 ops/s
Iteration   3: 14692027.737 ops/s
Iteration   4: 14679427.523 ops/s
Iteration   5: 14739609.399 ops/s
Iteration   6: 14722696.785 ops/s
Iteration   7: 14720941.753 ops/s
Iteration   8: 14671714.400 ops/s
Iteration   9: 14660991.312 ops/s
Iteration  10: 14744324.785 ops/s
Iteration  11: 14667343.023 ops/s
Iteration  12: 14715657.401 ops/s
Iteration  13: 14699413.541 ops/s
Iteration  14: 14694983.721 ops/s
Iteration  15: 14698489.404 ops/s
Iteration  16: 14746047.395 ops/s
Iteration  17: 14679607.315 ops/s
Iteration  18: 14709631.088 ops/s
Iteration  19: 14725000.770 ops/s
Iteration  20: 14750353.429 ops/s
Iteration  21: 14727472.936 ops/s
Iteration  22: 14642610.407 ops/s
Iteration  23: 14754069.478 ops/s
Iteration  24: 14674530.852 ops/s
Iteration  25: 14716868.326 ops/s
Iteration  26: 14652969.183 ops/s
Iteration  27: 14706787.718 ops/s
Iteration  28: 14751354.189 ops/s
Iteration  29: 14662025.717 ops/s
Iteration  30: 14616129.628 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_reverseForEachWithIndex":
  14701405.642 ±(99.9%) 24739.284 ops/s [Average]
  (min, avg, max) = (14616129.628, 14701405.642, 14754069.478), stdev = 37028.599
  CI (99.9%): [14676666.357, 14726144.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  14701405.642 ± 24739.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5728461.303 ops/s
# Warmup Iteration   2: 12905106.079 ops/s
# Warmup Iteration   3: 10991336.669 ops/s
# Warmup Iteration   4: 13056365.704 ops/s
# Warmup Iteration   5: 13037100.968 ops/s
# Warmup Iteration   6: 13048043.020 ops/s
# Warmup Iteration   7: 13020849.386 ops/s
# Warmup Iteration   8: 13007557.158 ops/s
# Warmup Iteration   9: 13035691.068 ops/s
# Warmup Iteration  10: 11696557.102 ops/s
# Warmup Iteration  11: 13003495.253 ops/s
# Warmup Iteration  12: 12984686.145 ops/s
# Warmup Iteration  13: 13045550.383 ops/s
# Warmup Iteration  14: 13036843.679 ops/s
# Warmup Iteration  15: 13066094.424 ops/s
# Warmup Iteration  16: 13042588.673 ops/s
# Warmup Iteration  17: 13061018.283 ops/s
# Warmup Iteration  18: 13052474.773 ops/s
# Warmup Iteration  19: 13067498.648 ops/s
# Warmup Iteration  20: 13056570.448 ops/s
# Warmup Iteration  21: 13072124.920 ops/s
# Warmup Iteration  22: 13058815.483 ops/s
# Warmup Iteration  23: 13043218.352 ops/s
# Warmup Iteration  24: 13067214.346 ops/s
# Warmup Iteration  25: 13018125.203 ops/s
# Warmup Iteration  26: 12988952.174 ops/s
# Warmup Iteration  27: 13014579.124 ops/s
# Warmup Iteration  28: 13071887.308 ops/s
# Warmup Iteration  29: 13051089.206 ops/s
# Warmup Iteration  30: 13018548.682 ops/s
Iteration   1: 13075959.444 ops/s
Iteration   2: 13044062.935 ops/s
Iteration   3: 13032403.580 ops/s
Iteration   4: 13046366.221 ops/s
Iteration   5: 13025720.020 ops/s
Iteration   6: 13044567.244 ops/s
Iteration   7: 12993186.411 ops/s
Iteration   8: 13089619.226 ops/s
Iteration   9: 13028497.891 ops/s
Iteration  10: 13084287.064 ops/s
Iteration  11: 12950771.909 ops/s
Iteration  12: 13059428.364 ops/s
Iteration  13: 13030491.217 ops/s
Iteration  14: 13030979.949 ops/s
Iteration  15: 13042092.287 ops/s
Iteration  16: 13066796.326 ops/s
Iteration  17: 13080234.957 ops/s
Iteration  18: 12987092.348 ops/s
Iteration  19: 12977832.254 ops/s
Iteration  20: 13051042.132 ops/s
Iteration  21: 13076310.028 ops/s
Iteration  22: 13004286.476 ops/s
Iteration  23: 13016082.968 ops/s
Iteration  24: 13096094.120 ops/s
Iteration  25: 13107331.674 ops/s
Iteration  26: 12916931.534 ops/s
Iteration  27: 13058984.763 ops/s
Iteration  28: 13112724.587 ops/s
Iteration  29: 12995535.733 ops/s
Iteration  30: 13037145.573 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select":
  13038761.974 ±(99.9%) 30287.814 ops/s [Average]
  (min, avg, max) = (12916931.534, 13038761.974, 13112724.587), stdev = 45333.378
  CI (99.9%): [13008474.160, 13069049.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_select  thrpt   30  13038761.974 ± 30287.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5261355.608 ops/s
# Warmup Iteration   2: 10668492.855 ops/s
# Warmup Iteration   3: 11334296.663 ops/s
# Warmup Iteration   4: 11396738.350 ops/s
# Warmup Iteration   5: 9456608.187 ops/s
# Warmup Iteration   6: 11457037.771 ops/s
# Warmup Iteration   7: 11425444.546 ops/s
# Warmup Iteration   8: 11412581.987 ops/s
# Warmup Iteration   9: 11407467.966 ops/s
# Warmup Iteration  10: 11442569.709 ops/s
# Warmup Iteration  11: 11460384.453 ops/s
# Warmup Iteration  12: 11461580.898 ops/s
# Warmup Iteration  13: 11470073.078 ops/s
# Warmup Iteration  14: 11462896.677 ops/s
# Warmup Iteration  15: 11477655.890 ops/s
# Warmup Iteration  16: 11461041.499 ops/s
# Warmup Iteration  17: 11471473.412 ops/s
# Warmup Iteration  18: 11449746.158 ops/s
# Warmup Iteration  19: 11432210.731 ops/s
# Warmup Iteration  20: 11485095.384 ops/s
# Warmup Iteration  21: 11476532.955 ops/s
# Warmup Iteration  22: 11472268.003 ops/s
# Warmup Iteration  23: 11484170.186 ops/s
# Warmup Iteration  24: 11480523.325 ops/s
# Warmup Iteration  25: 11474486.662 ops/s
# Warmup Iteration  26: 11461401.492 ops/s
# Warmup Iteration  27: 11450972.295 ops/s
# Warmup Iteration  28: 11475775.610 ops/s
# Warmup Iteration  29: 11475193.785 ops/s
# Warmup Iteration  30: 11461063.813 ops/s
Iteration   1: 11475752.706 ops/s
Iteration   2: 11442289.488 ops/s
Iteration   3: 11466707.684 ops/s
Iteration   4: 11473548.808 ops/s
Iteration   5: 11450871.039 ops/s
Iteration   6: 11472806.999 ops/s
Iteration   7: 11486127.278 ops/s
Iteration   8: 11478072.655 ops/s
Iteration   9: 11469616.468 ops/s
Iteration  10: 11495048.830 ops/s
Iteration  11: 11436803.970 ops/s
Iteration  12: 11452954.032 ops/s
Iteration  13: 11463747.760 ops/s
Iteration  14: 11436385.038 ops/s
Iteration  15: 11439537.020 ops/s
Iteration  16: 11462908.710 ops/s
Iteration  17: 11468877.115 ops/s
Iteration  18: 11449477.842 ops/s
Iteration  19: 11454823.138 ops/s
Iteration  20: 11459260.829 ops/s
Iteration  21: 11447425.703 ops/s
Iteration  22: 11447438.365 ops/s
Iteration  23: 11458472.096 ops/s
Iteration  24: 11497785.630 ops/s
Iteration  25: 11472467.456 ops/s
Iteration  26: 11453091.930 ops/s
Iteration  27: 11496674.269 ops/s
Iteration  28: 11472236.317 ops/s
Iteration  29: 11464080.375 ops/s
Iteration  30: 11453906.361 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectInstancesOf":
  11463306.530 ±(99.9%) 11330.802 ops/s [Average]
  (min, avg, max) = (11436385.038, 11463306.530, 11497785.630), stdev = 16959.412
  CI (99.9%): [11451975.729, 11474637.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  11463306.530 ± 11330.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3735409.138 ops/s
# Warmup Iteration   2: 8883212.345 ops/s
# Warmup Iteration   3: 7547702.009 ops/s
# Warmup Iteration   4: 8885332.885 ops/s
# Warmup Iteration   5: 8971547.929 ops/s
# Warmup Iteration   6: 8976747.290 ops/s
# Warmup Iteration   7: 8970685.469 ops/s
# Warmup Iteration   8: 8986035.370 ops/s
# Warmup Iteration   9: 8967813.123 ops/s
# Warmup Iteration  10: 8978733.117 ops/s
# Warmup Iteration  11: 8973260.193 ops/s
# Warmup Iteration  12: 8983949.704 ops/s
# Warmup Iteration  13: 8972132.793 ops/s
# Warmup Iteration  14: 8983612.383 ops/s
# Warmup Iteration  15: 8982368.301 ops/s
# Warmup Iteration  16: 8981609.490 ops/s
# Warmup Iteration  17: 8988819.037 ops/s
# Warmup Iteration  18: 8973738.439 ops/s
# Warmup Iteration  19: 8977004.986 ops/s
# Warmup Iteration  20: 8931550.676 ops/s
# Warmup Iteration  21: 8962542.485 ops/s
# Warmup Iteration  22: 8968865.823 ops/s
# Warmup Iteration  23: 8937285.546 ops/s
# Warmup Iteration  24: 8983365.586 ops/s
# Warmup Iteration  25: 8980658.649 ops/s
# Warmup Iteration  26: 8997421.449 ops/s
# Warmup Iteration  27: 8977373.155 ops/s
# Warmup Iteration  28: 8988080.874 ops/s
# Warmup Iteration  29: 8984104.825 ops/s
# Warmup Iteration  30: 8992311.884 ops/s
Iteration   1: 8992340.816 ops/s
Iteration   2: 8983688.242 ops/s
Iteration   3: 8979044.468 ops/s
Iteration   4: 8986105.540 ops/s
Iteration   5: 8971224.894 ops/s
Iteration   6: 8984873.676 ops/s
Iteration   7: 8984429.642 ops/s
Iteration   8: 8962394.551 ops/s
Iteration   9: 8977797.083 ops/s
Iteration  10: 8984889.478 ops/s
Iteration  11: 9012195.264 ops/s
Iteration  12: 8969467.434 ops/s
Iteration  13: 8981309.338 ops/s
Iteration  14: 8970821.932 ops/s
Iteration  15: 8966957.683 ops/s
Iteration  16: 8968137.357 ops/s
Iteration  17: 8987464.917 ops/s
Iteration  18: 8976701.329 ops/s
Iteration  19: 8992065.296 ops/s
Iteration  20: 8972436.404 ops/s
Iteration  21: 8972471.310 ops/s
Iteration  22: 8978228.883 ops/s
Iteration  23: 8997282.064 ops/s
Iteration  24: 8983527.958 ops/s
Iteration  25: 8982238.516 ops/s
Iteration  26: 8972235.263 ops/s
Iteration  27: 9009799.641 ops/s
Iteration  28: 8989144.171 ops/s
Iteration  29: 8978751.224 ops/s
Iteration  30: 8986638.626 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith":
  8981822.100 ±(99.9%) 7678.749 ops/s [Average]
  (min, avg, max) = (8962394.551, 8981822.100, 9012195.264), stdev = 11493.190
  CI (99.9%): [8974143.351, 8989500.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_selectWith  thrpt   30  8981822.100 ± 7678.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5081184.938 ops/s
# Warmup Iteration   2: 11449103.748 ops/s
# Warmup Iteration   3: 9477386.711 ops/s
# Warmup Iteration   4: 11224317.957 ops/s
# Warmup Iteration   5: 11237542.350 ops/s
# Warmup Iteration   6: 11219210.731 ops/s
# Warmup Iteration   7: 11228908.302 ops/s
# Warmup Iteration   8: 11204765.703 ops/s
# Warmup Iteration   9: 11213401.187 ops/s
# Warmup Iteration  10: 11199375.265 ops/s
# Warmup Iteration  11: 11249028.917 ops/s
# Warmup Iteration  12: 11207677.093 ops/s
# Warmup Iteration  13: 11225777.977 ops/s
# Warmup Iteration  14: 11195905.602 ops/s
# Warmup Iteration  15: 11240299.288 ops/s
# Warmup Iteration  16: 11228589.658 ops/s
# Warmup Iteration  17: 11239561.905 ops/s
# Warmup Iteration  18: 11244185.222 ops/s
# Warmup Iteration  19: 11200503.075 ops/s
# Warmup Iteration  20: 11228442.191 ops/s
# Warmup Iteration  21: 11230229.745 ops/s
# Warmup Iteration  22: 11237784.616 ops/s
# Warmup Iteration  23: 11229668.892 ops/s
# Warmup Iteration  24: 11255437.516 ops/s
# Warmup Iteration  25: 11234409.640 ops/s
# Warmup Iteration  26: 11221546.462 ops/s
# Warmup Iteration  27: 11235191.427 ops/s
# Warmup Iteration  28: 11211846.567 ops/s
# Warmup Iteration  29: 11205141.819 ops/s
# Warmup Iteration  30: 11233224.475 ops/s
Iteration   1: 11230145.780 ops/s
Iteration   2: 11218284.125 ops/s
Iteration   3: 11239070.554 ops/s
Iteration   4: 11243887.506 ops/s
Iteration   5: 11236517.723 ops/s
Iteration   6: 11233348.949 ops/s
Iteration   7: 11234784.235 ops/s
Iteration   8: 11239529.373 ops/s
Iteration   9: 11231220.529 ops/s
Iteration  10: 11235669.315 ops/s
Iteration  11: 11197596.438 ops/s
Iteration  12: 11268006.738 ops/s
Iteration  13: 11249758.401 ops/s
Iteration  14: 11250997.618 ops/s
Iteration  15: 11255033.366 ops/s
Iteration  16: 11256897.321 ops/s
Iteration  17: 11243596.208 ops/s
Iteration  18: 11272510.921 ops/s
Iteration  19: 11251276.177 ops/s
Iteration  20: 11260274.659 ops/s
Iteration  21: 11222154.350 ops/s
Iteration  22: 11261145.477 ops/s
Iteration  23: 11210650.106 ops/s
Iteration  24: 11249372.789 ops/s
Iteration  25: 11251841.560 ops/s
Iteration  26: 11184718.747 ops/s
Iteration  27: 11259509.729 ops/s
Iteration  28: 11230268.734 ops/s
Iteration  29: 11221667.580 ops/s
Iteration  30: 11256007.197 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndex":
  11239858.074 ±(99.9%) 13397.150 ops/s [Average]
  (min, avg, max) = (11184718.747, 11239858.074, 11272510.921), stdev = 20052.224
  CI (99.9%): [11226460.924, 11253255.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  11239858.074 ± 13397.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4030221.511 ops/s
# Warmup Iteration   2: 8956890.842 ops/s
# Warmup Iteration   3: 7666579.688 ops/s
# Warmup Iteration   4: 9085310.942 ops/s
# Warmup Iteration   5: 9070090.321 ops/s
# Warmup Iteration   6: 9068309.088 ops/s
# Warmup Iteration   7: 9098111.025 ops/s
# Warmup Iteration   8: 9090832.552 ops/s
# Warmup Iteration   9: 9103019.593 ops/s
# Warmup Iteration  10: 9086648.300 ops/s
# Warmup Iteration  11: 9076922.200 ops/s
# Warmup Iteration  12: 9072174.323 ops/s
# Warmup Iteration  13: 9066653.999 ops/s
# Warmup Iteration  14: 9085653.518 ops/s
# Warmup Iteration  15: 9092588.005 ops/s
# Warmup Iteration  16: 9054003.664 ops/s
# Warmup Iteration  17: 9075858.598 ops/s
# Warmup Iteration  18: 9064612.557 ops/s
# Warmup Iteration  19: 9052760.002 ops/s
# Warmup Iteration  20: 9081400.019 ops/s
# Warmup Iteration  21: 9091571.752 ops/s
# Warmup Iteration  22: 9067643.993 ops/s
# Warmup Iteration  23: 9082547.242 ops/s
# Warmup Iteration  24: 9091069.006 ops/s
# Warmup Iteration  25: 9079365.124 ops/s
# Warmup Iteration  26: 9107817.915 ops/s
# Warmup Iteration  27: 9074025.837 ops/s
# Warmup Iteration  28: 9070185.634 ops/s
# Warmup Iteration  29: 9076022.891 ops/s
# Warmup Iteration  30: 9077026.704 ops/s
Iteration   1: 9066944.759 ops/s
Iteration   2: 9089752.868 ops/s
Iteration   3: 9093953.908 ops/s
Iteration   4: 9069904.683 ops/s
Iteration   5: 9062622.889 ops/s
Iteration   6: 9079567.798 ops/s
Iteration   7: 9076963.688 ops/s
Iteration   8: 9090404.096 ops/s
Iteration   9: 9092823.312 ops/s
Iteration  10: 9099424.630 ops/s
Iteration  11: 9080658.182 ops/s
Iteration  12: 9074898.680 ops/s
Iteration  13: 9075210.731 ops/s
Iteration  14: 9127620.691 ops/s
Iteration  15: 9072428.695 ops/s
Iteration  16: 9120805.974 ops/s
Iteration  17: 9100984.451 ops/s
Iteration  18: 9051596.963 ops/s
Iteration  19: 9034214.117 ops/s
Iteration  20: 9091776.562 ops/s
Iteration  21: 9086430.577 ops/s
Iteration  22: 9065767.515 ops/s
Iteration  23: 9089903.709 ops/s
Iteration  24: 9075010.896 ops/s
Iteration  25: 9098981.184 ops/s
Iteration  26: 9063850.254 ops/s
Iteration  27: 9028950.843 ops/s
Iteration  28: 9060990.704 ops/s
Iteration  29: 9068431.139 ops/s
Iteration  30: 9031452.148 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  9077410.888 ±(99.9%) 15341.149 ops/s [Average]
  (min, avg, max) = (9028950.843, 9077410.888, 9127620.691), stdev = 22961.911
  CI (99.9%): [9062069.739, 9092752.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  9077410.888 ± 15341.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4480404.584 ops/s
# Warmup Iteration   2: 9793354.310 ops/s
# Warmup Iteration   3: 8429118.564 ops/s
# Warmup Iteration   4: 9927972.875 ops/s
# Warmup Iteration   5: 9943178.270 ops/s
# Warmup Iteration   6: 9924055.225 ops/s
# Warmup Iteration   7: 9920159.402 ops/s
# Warmup Iteration   8: 9962092.596 ops/s
# Warmup Iteration   9: 9944671.719 ops/s
# Warmup Iteration  10: 9909055.998 ops/s
# Warmup Iteration  11: 9952900.965 ops/s
# Warmup Iteration  12: 9928311.932 ops/s
# Warmup Iteration  13: 9933897.356 ops/s
# Warmup Iteration  14: 9919486.723 ops/s
# Warmup Iteration  15: 9932007.999 ops/s
# Warmup Iteration  16: 9942590.613 ops/s
# Warmup Iteration  17: 9968251.276 ops/s
# Warmup Iteration  18: 9978731.106 ops/s
# Warmup Iteration  19: 9968113.615 ops/s
# Warmup Iteration  20: 10001850.106 ops/s
# Warmup Iteration  21: 9994002.888 ops/s
# Warmup Iteration  22: 9994131.987 ops/s
# Warmup Iteration  23: 10002682.940 ops/s
# Warmup Iteration  24: 9994908.670 ops/s
# Warmup Iteration  25: 9999908.418 ops/s
# Warmup Iteration  26: 9978921.028 ops/s
# Warmup Iteration  27: 10007104.295 ops/s
# Warmup Iteration  28: 10004033.605 ops/s
# Warmup Iteration  29: 9985485.425 ops/s
# Warmup Iteration  30: 9996001.451 ops/s
Iteration   1: 9988446.326 ops/s
Iteration   2: 10010318.817 ops/s
Iteration   3: 9987407.128 ops/s
Iteration   4: 10004225.087 ops/s
Iteration   5: 10008625.482 ops/s
Iteration   6: 10000632.699 ops/s
Iteration   7: 9978002.420 ops/s
Iteration   8: 9999258.958 ops/s
Iteration   9: 9959512.050 ops/s
Iteration  10: 9987361.018 ops/s
Iteration  11: 9924573.218 ops/s
Iteration  12: 9965295.020 ops/s
Iteration  13: 9933943.320 ops/s
Iteration  14: 9991495.386 ops/s
Iteration  15: 9982584.539 ops/s
Iteration  16: 9977361.637 ops/s
Iteration  17: 9973749.462 ops/s
Iteration  18: 9992992.357 ops/s
Iteration  19: 9977240.973 ops/s
Iteration  20: 9999090.009 ops/s
Iteration  21: 10024352.329 ops/s
Iteration  22: 9990797.902 ops/s
Iteration  23: 10013439.631 ops/s
Iteration  24: 10019553.932 ops/s
Iteration  25: 10010663.649 ops/s
Iteration  26: 9988113.746 ops/s
Iteration  27: 9982264.967 ops/s
Iteration  28: 9969485.043 ops/s
Iteration  29: 10005165.369 ops/s
Iteration  30: 9999512.849 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_selectWith_target":
  9988182.178 ±(99.9%) 15070.441 ops/s [Average]
  (min, avg, max) = (9924573.218, 9988182.178, 10024352.329), stdev = 22556.728
  CI (99.9%): [9973111.736, 10003252.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_selectWith_target  thrpt   30  9988182.178 ± 15070.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10266645.197 ops/s
# Warmup Iteration   2: 17564479.101 ops/s
# Warmup Iteration   3: 21098317.859 ops/s
# Warmup Iteration   4: 21064233.303 ops/s
# Warmup Iteration   5: 21177171.959 ops/s
# Warmup Iteration   6: 21139188.673 ops/s
# Warmup Iteration   7: 20945540.504 ops/s
# Warmup Iteration   8: 21086321.771 ops/s
# Warmup Iteration   9: 21155153.903 ops/s
# Warmup Iteration  10: 21064456.465 ops/s
# Warmup Iteration  11: 21102738.169 ops/s
# Warmup Iteration  12: 21159838.443 ops/s
# Warmup Iteration  13: 21254880.336 ops/s
# Warmup Iteration  14: 21061167.770 ops/s
# Warmup Iteration  15: 21052337.717 ops/s
# Warmup Iteration  16: 21075326.998 ops/s
# Warmup Iteration  17: 21225868.815 ops/s
# Warmup Iteration  18: 21196609.159 ops/s
# Warmup Iteration  19: 21127552.008 ops/s
# Warmup Iteration  20: 21038403.315 ops/s
# Warmup Iteration  21: 20999344.619 ops/s
# Warmup Iteration  22: 20996497.891 ops/s
# Warmup Iteration  23: 21112178.798 ops/s
# Warmup Iteration  24: 21095594.269 ops/s
# Warmup Iteration  25: 21082898.780 ops/s
# Warmup Iteration  26: 21068813.701 ops/s
# Warmup Iteration  27: 21092075.341 ops/s
# Warmup Iteration  28: 21057552.469 ops/s
# Warmup Iteration  29: 21186706.313 ops/s
# Warmup Iteration  30: 21150788.926 ops/s
Iteration   1: 21143241.926 ops/s
Iteration   2: 21103825.765 ops/s
Iteration   3: 21010277.683 ops/s
Iteration   4: 21178514.855 ops/s
Iteration   5: 21196715.984 ops/s
Iteration   6: 21147225.503 ops/s
Iteration   7: 21109147.485 ops/s
Iteration   8: 21003575.021 ops/s
Iteration   9: 21022042.186 ops/s
Iteration  10: 21267901.070 ops/s
Iteration  11: 21138055.408 ops/s
Iteration  12: 21298488.445 ops/s
Iteration  13: 21234173.985 ops/s
Iteration  14: 21197064.493 ops/s
Iteration  15: 21181440.218 ops/s
Iteration  16: 21194424.483 ops/s
Iteration  17: 21191108.188 ops/s
Iteration  18: 21173320.817 ops/s
Iteration  19: 21155373.771 ops/s
Iteration  20: 21211067.726 ops/s
Iteration  21: 21082305.793 ops/s
Iteration  22: 21082314.698 ops/s
Iteration  23: 21148888.397 ops/s
Iteration  24: 21254070.320 ops/s
Iteration  25: 21211593.892 ops/s
Iteration  26: 21049969.720 ops/s
Iteration  27: 21007635.218 ops/s
Iteration  28: 21091186.111 ops/s
Iteration  29: 21005769.199 ops/s
Iteration  30: 20981024.589 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_select_target":
  21135724.765 ±(99.9%) 58098.688 ops/s [Average]
  (min, avg, max) = (20981024.589, 21135724.765, 21298488.445), stdev = 86959.387
  CI (99.9%): [21077626.077, 21193823.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_select_target  thrpt   30  21135724.765 ± 58098.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42315.485 ops/s
# Warmup Iteration   2: 53657.368 ops/s
# Warmup Iteration   3: 79665.132 ops/s
# Warmup Iteration   4: 79113.674 ops/s
# Warmup Iteration   5: 79063.980 ops/s
# Warmup Iteration   6: 79462.271 ops/s
# Warmup Iteration   7: 79281.754 ops/s
# Warmup Iteration   8: 78746.806 ops/s
# Warmup Iteration   9: 79335.436 ops/s
# Warmup Iteration  10: 66851.577 ops/s
# Warmup Iteration  11: 79923.451 ops/s
# Warmup Iteration  12: 79738.245 ops/s
# Warmup Iteration  13: 79808.695 ops/s
# Warmup Iteration  14: 79791.669 ops/s
# Warmup Iteration  15: 79547.780 ops/s
# Warmup Iteration  16: 79858.580 ops/s
# Warmup Iteration  17: 80051.509 ops/s
# Warmup Iteration  18: 79912.282 ops/s
# Warmup Iteration  19: 80072.858 ops/s
# Warmup Iteration  20: 79764.808 ops/s
# Warmup Iteration  21: 79627.875 ops/s
# Warmup Iteration  22: 79760.527 ops/s
# Warmup Iteration  23: 79657.694 ops/s
# Warmup Iteration  24: 79831.239 ops/s
# Warmup Iteration  25: 80177.684 ops/s
# Warmup Iteration  26: 80036.134 ops/s
# Warmup Iteration  27: 80089.951 ops/s
# Warmup Iteration  28: 79801.728 ops/s
# Warmup Iteration  29: 79280.073 ops/s
# Warmup Iteration  30: 79544.287 ops/s
Iteration   1: 79058.961 ops/s
Iteration   2: 79899.179 ops/s
Iteration   3: 79997.656 ops/s
Iteration   4: 79936.235 ops/s
Iteration   5: 80089.392 ops/s
Iteration   6: 79941.793 ops/s
Iteration   7: 80311.140 ops/s
Iteration   8: 80204.059 ops/s
Iteration   9: 79827.918 ops/s
Iteration  10: 79785.470 ops/s
Iteration  11: 79325.089 ops/s
Iteration  12: 80324.939 ops/s
Iteration  13: 80324.591 ops/s
Iteration  14: 79771.601 ops/s
Iteration  15: 79478.093 ops/s
Iteration  16: 80273.858 ops/s
Iteration  17: 79554.570 ops/s
Iteration  18: 79191.273 ops/s
Iteration  19: 80239.605 ops/s
Iteration  20: 80350.574 ops/s
Iteration  21: 79763.819 ops/s
Iteration  22: 79821.545 ops/s
Iteration  23: 80293.074 ops/s
Iteration  24: 79980.399 ops/s
Iteration  25: 79820.478 ops/s
Iteration  26: 80307.903 ops/s
Iteration  27: 79148.111 ops/s
Iteration  28: 79863.146 ops/s
Iteration  29: 80035.983 ops/s
Iteration  30: 79990.225 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_serialization":
  79897.023 ±(99.9%) 246.658 ops/s [Average]
  (min, avg, max) = (79058.961, 79897.023, 80350.574), stdev = 369.186
  CI (99.9%): [79650.365, 80143.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt      Score     Error  Units
ImmutableArrayListTest._Benchmark.benchmark_serialization  thrpt   30  79897.023 ± 246.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 617793.704 ops/s
# Warmup Iteration   2: 749526.700 ops/s
# Warmup Iteration   3: 924889.400 ops/s
# Warmup Iteration   4: 929976.737 ops/s
# Warmup Iteration   5: 928564.598 ops/s
# Warmup Iteration   6: 924825.177 ops/s
# Warmup Iteration   7: 929226.692 ops/s
# Warmup Iteration   8: 931057.061 ops/s
# Warmup Iteration   9: 781063.673 ops/s
# Warmup Iteration  10: 932538.539 ops/s
# Warmup Iteration  11: 925716.659 ops/s
# Warmup Iteration  12: 931461.756 ops/s
# Warmup Iteration  13: 929236.404 ops/s
# Warmup Iteration  14: 931130.733 ops/s
# Warmup Iteration  15: 928429.120 ops/s
# Warmup Iteration  16: 929854.174 ops/s
# Warmup Iteration  17: 985368.554 ops/s
# Warmup Iteration  18: 988884.806 ops/s
# Warmup Iteration  19: 989380.354 ops/s
# Warmup Iteration  20: 988612.954 ops/s
# Warmup Iteration  21: 984000.422 ops/s
# Warmup Iteration  22: 990404.652 ops/s
# Warmup Iteration  23: 985512.210 ops/s
# Warmup Iteration  24: 987599.458 ops/s
# Warmup Iteration  25: 987349.406 ops/s
# Warmup Iteration  26: 988980.390 ops/s
# Warmup Iteration  27: 990282.927 ops/s
# Warmup Iteration  28: 984045.573 ops/s
# Warmup Iteration  29: 987516.798 ops/s
# Warmup Iteration  30: 989131.214 ops/s
Iteration   1: 986401.501 ops/s
Iteration   2: 988254.284 ops/s
Iteration   3: 987867.823 ops/s
Iteration   4: 987684.218 ops/s
Iteration   5: 988523.537 ops/s
Iteration   6: 989548.660 ops/s
Iteration   7: 989353.953 ops/s
Iteration   8: 991471.787 ops/s
Iteration   9: 987451.880 ops/s
Iteration  10: 988975.075 ops/s
Iteration  11: 989871.679 ops/s
Iteration  12: 989969.462 ops/s
Iteration  13: 988213.426 ops/s
Iteration  14: 987607.279 ops/s
Iteration  15: 986018.739 ops/s
Iteration  16: 986630.029 ops/s
Iteration  17: 988186.859 ops/s
Iteration  18: 985968.829 ops/s
Iteration  19: 987950.619 ops/s
Iteration  20: 987309.466 ops/s
Iteration  21: 988150.118 ops/s
Iteration  22: 989067.997 ops/s
Iteration  23: 993509.038 ops/s
Iteration  24: 989710.977 ops/s
Iteration  25: 990611.180 ops/s
Iteration  26: 986671.325 ops/s
Iteration  27: 991537.469 ops/s
Iteration  28: 982827.123 ops/s
Iteration  29: 984937.399 ops/s
Iteration  30: 982828.314 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_set":
  988103.668 ±(99.9%) 1552.904 ops/s [Average]
  (min, avg, max) = (982827.123, 988103.668, 993509.038), stdev = 2324.313
  CI (99.9%): [986550.765, 989656.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_set  thrpt   30  988103.668 ± 1552.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622514.176 ops/s
# Warmup Iteration   2: 768838.029 ops/s
# Warmup Iteration   3: 952499.102 ops/s
# Warmup Iteration   4: 946185.042 ops/s
# Warmup Iteration   5: 955183.740 ops/s
# Warmup Iteration   6: 952034.423 ops/s
# Warmup Iteration   7: 954641.698 ops/s
# Warmup Iteration   8: 952373.584 ops/s
# Warmup Iteration   9: 799490.870 ops/s
# Warmup Iteration  10: 955640.809 ops/s
# Warmup Iteration  11: 955758.971 ops/s
# Warmup Iteration  12: 956363.400 ops/s
# Warmup Iteration  13: 956754.878 ops/s
# Warmup Iteration  14: 955772.295 ops/s
# Warmup Iteration  15: 955214.451 ops/s
# Warmup Iteration  16: 956412.023 ops/s
# Warmup Iteration  17: 1010279.928 ops/s
# Warmup Iteration  18: 1011246.401 ops/s
# Warmup Iteration  19: 1007698.919 ops/s
# Warmup Iteration  20: 1010251.723 ops/s
# Warmup Iteration  21: 1010612.584 ops/s
# Warmup Iteration  22: 1000321.574 ops/s
# Warmup Iteration  23: 1005568.900 ops/s
# Warmup Iteration  24: 1009101.638 ops/s
# Warmup Iteration  25: 1009416.049 ops/s
# Warmup Iteration  26: 1007603.013 ops/s
# Warmup Iteration  27: 1008847.677 ops/s
# Warmup Iteration  28: 1011153.305 ops/s
# Warmup Iteration  29: 1008746.348 ops/s
# Warmup Iteration  30: 1010938.287 ops/s
Iteration   1: 1011016.390 ops/s
Iteration   2: 1006947.897 ops/s
Iteration   3: 1011399.004 ops/s
Iteration   4: 1010637.640 ops/s
Iteration   5: 1009295.864 ops/s
Iteration   6: 1011413.229 ops/s
Iteration   7: 1005104.068 ops/s
Iteration   8: 1003352.722 ops/s
Iteration   9: 1012140.193 ops/s
Iteration  10: 1009524.973 ops/s
Iteration  11: 1008211.587 ops/s
Iteration  12: 1009514.232 ops/s
Iteration  13: 1008914.228 ops/s
Iteration  14: 1010411.968 ops/s
Iteration  15: 1007373.273 ops/s
Iteration  16: 1010281.782 ops/s
Iteration  17: 1010140.347 ops/s
Iteration  18: 1013125.345 ops/s
Iteration  19: 1007554.648 ops/s
Iteration  20: 1012490.922 ops/s
Iteration  21: 1011186.315 ops/s
Iteration  22: 1010657.831 ops/s
Iteration  23: 1010832.564 ops/s
Iteration  24: 1009426.549 ops/s
Iteration  25: 1010774.026 ops/s
Iteration  26: 1009179.683 ops/s
Iteration  27: 1008607.352 ops/s
Iteration  28: 1010956.133 ops/s
Iteration  29: 1008029.826 ops/s
Iteration  30: 1009792.163 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sort":
  1009609.759 ±(99.9%) 1404.987 ops/s [Average]
  (min, avg, max) = (1003352.722, 1009609.759, 1013125.345), stdev = 2102.918
  CI (99.9%): [1008204.772, 1011014.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sort  thrpt   30  1009609.759 ± 1404.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 293250.132 ops/s
# Warmup Iteration   2: 640039.283 ops/s
# Warmup Iteration   3: 734309.462 ops/s
# Warmup Iteration   4: 739131.602 ops/s
# Warmup Iteration   5: 611058.056 ops/s
# Warmup Iteration   6: 736655.538 ops/s
# Warmup Iteration   7: 739368.780 ops/s
# Warmup Iteration   8: 739728.791 ops/s
# Warmup Iteration   9: 739862.709 ops/s
# Warmup Iteration  10: 736782.150 ops/s
# Warmup Iteration  11: 738637.912 ops/s
# Warmup Iteration  12: 737823.696 ops/s
# Warmup Iteration  13: 738883.362 ops/s
# Warmup Iteration  14: 739452.538 ops/s
# Warmup Iteration  15: 738597.525 ops/s
# Warmup Iteration  16: 738185.074 ops/s
# Warmup Iteration  17: 738873.794 ops/s
# Warmup Iteration  18: 738974.443 ops/s
# Warmup Iteration  19: 739343.835 ops/s
# Warmup Iteration  20: 736135.271 ops/s
# Warmup Iteration  21: 733703.616 ops/s
# Warmup Iteration  22: 739000.490 ops/s
# Warmup Iteration  23: 739320.029 ops/s
# Warmup Iteration  24: 730954.554 ops/s
# Warmup Iteration  25: 735747.610 ops/s
# Warmup Iteration  26: 738768.011 ops/s
# Warmup Iteration  27: 738628.685 ops/s
# Warmup Iteration  28: 737803.074 ops/s
# Warmup Iteration  29: 738489.175 ops/s
# Warmup Iteration  30: 739309.363 ops/s
Iteration   1: 731316.480 ops/s
Iteration   2: 739112.116 ops/s
Iteration   3: 737067.958 ops/s
Iteration   4: 737916.847 ops/s
Iteration   5: 739568.547 ops/s
Iteration   6: 737702.031 ops/s
Iteration   7: 739207.604 ops/s
Iteration   8: 738387.176 ops/s
Iteration   9: 739839.488 ops/s
Iteration  10: 721689.587 ops/s
Iteration  11: 714047.015 ops/s
Iteration  12: 736524.380 ops/s
Iteration  13: 739100.753 ops/s
Iteration  14: 739885.965 ops/s
Iteration  15: 741108.165 ops/s
Iteration  16: 739993.406 ops/s
Iteration  17: 739601.595 ops/s
Iteration  18: 740650.165 ops/s
Iteration  19: 739717.021 ops/s
Iteration  20: 733899.252 ops/s
Iteration  21: 740778.642 ops/s
Iteration  22: 740257.962 ops/s
Iteration  23: 738251.336 ops/s
Iteration  24: 739115.322 ops/s
Iteration  25: 739019.311 ops/s
Iteration  26: 739157.851 ops/s
Iteration  27: 739807.246 ops/s
Iteration  28: 739255.729 ops/s
Iteration  29: 738873.967 ops/s
Iteration  30: 739528.563 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_stream":
  737346.049 ±(99.9%) 3835.310 ops/s [Average]
  (min, avg, max) = (714047.015, 737346.049, 741108.165), stdev = 5740.512
  CI (99.9%): [733510.739, 741181.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_stream  thrpt   30  737346.049 ± 3835.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14294867.734 ops/s
# Warmup Iteration   2: 28427066.241 ops/s
# Warmup Iteration   3: 25720839.781 ops/s
# Warmup Iteration   4: 29123712.555 ops/s
# Warmup Iteration   5: 29121518.216 ops/s
# Warmup Iteration   6: 29094704.129 ops/s
# Warmup Iteration   7: 29165393.912 ops/s
# Warmup Iteration   8: 29132988.635 ops/s
# Warmup Iteration   9: 29012293.648 ops/s
# Warmup Iteration  10: 29060568.727 ops/s
# Warmup Iteration  11: 28974617.503 ops/s
# Warmup Iteration  12: 29191787.543 ops/s
# Warmup Iteration  13: 29196060.576 ops/s
# Warmup Iteration  14: 29115889.914 ops/s
# Warmup Iteration  15: 29195465.240 ops/s
# Warmup Iteration  16: 29180500.989 ops/s
# Warmup Iteration  17: 29314000.123 ops/s
# Warmup Iteration  18: 29135176.559 ops/s
# Warmup Iteration  19: 29195134.444 ops/s
# Warmup Iteration  20: 29191027.901 ops/s
# Warmup Iteration  21: 29178668.737 ops/s
# Warmup Iteration  22: 29207671.672 ops/s
# Warmup Iteration  23: 29137053.290 ops/s
# Warmup Iteration  24: 29165488.019 ops/s
# Warmup Iteration  25: 29124746.926 ops/s
# Warmup Iteration  26: 29238874.529 ops/s
# Warmup Iteration  27: 29215487.298 ops/s
# Warmup Iteration  28: 29127397.046 ops/s
# Warmup Iteration  29: 29078675.767 ops/s
# Warmup Iteration  30: 29072374.890 ops/s
Iteration   1: 29103170.710 ops/s
Iteration   2: 29253790.304 ops/s
Iteration   3: 29169142.656 ops/s
Iteration   4: 29259243.344 ops/s
Iteration   5: 29178449.041 ops/s
Iteration   6: 29157003.114 ops/s
Iteration   7: 29194417.450 ops/s
Iteration   8: 29199492.256 ops/s
Iteration   9: 29213014.557 ops/s
Iteration  10: 29265613.506 ops/s
Iteration  11: 29187033.062 ops/s
Iteration  12: 29215111.820 ops/s
Iteration  13: 29128636.235 ops/s
Iteration  14: 29258172.348 ops/s
Iteration  15: 29313372.763 ops/s
Iteration  16: 29257475.618 ops/s
Iteration  17: 29198499.527 ops/s
Iteration  18: 29266271.806 ops/s
Iteration  19: 29245534.425 ops/s
Iteration  20: 29110485.679 ops/s
Iteration  21: 29071849.007 ops/s
Iteration  22: 29180013.897 ops/s
Iteration  23: 29269531.473 ops/s
Iteration  24: 29318540.821 ops/s
Iteration  25: 29222121.746 ops/s
Iteration  26: 29090718.786 ops/s
Iteration  27: 29224918.217 ops/s
Iteration  28: 29186817.362 ops/s
Iteration  29: 29163946.238 ops/s
Iteration  30: 29136564.820 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subList":
  29201298.420 ±(99.9%) 42485.735 ops/s [Average]
  (min, avg, max) = (29071849.007, 29201298.420, 29318540.821), stdev = 63590.653
  CI (99.9%): [29158812.684, 29243784.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_subList  thrpt   30  29201298.420 ± 42485.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639811.468 ops/s
# Warmup Iteration   2: 664927.911 ops/s
# Warmup Iteration   3: 817298.243 ops/s
# Warmup Iteration   4: 857309.777 ops/s
# Warmup Iteration   5: 855710.180 ops/s
# Warmup Iteration   6: 850833.713 ops/s
# Warmup Iteration   7: 855884.910 ops/s
# Warmup Iteration   8: 853260.704 ops/s
# Warmup Iteration   9: 855068.685 ops/s
# Warmup Iteration  10: 854954.534 ops/s
# Warmup Iteration  11: 856981.731 ops/s
# Warmup Iteration  12: 857342.247 ops/s
# Warmup Iteration  13: 720184.623 ops/s
# Warmup Iteration  14: 855408.149 ops/s
# Warmup Iteration  15: 859450.940 ops/s
# Warmup Iteration  16: 856971.243 ops/s
# Warmup Iteration  17: 905982.293 ops/s
# Warmup Iteration  18: 906058.092 ops/s
# Warmup Iteration  19: 907047.701 ops/s
# Warmup Iteration  20: 904277.963 ops/s
# Warmup Iteration  21: 902829.465 ops/s
# Warmup Iteration  22: 903115.010 ops/s
# Warmup Iteration  23: 903204.828 ops/s
# Warmup Iteration  24: 906225.712 ops/s
# Warmup Iteration  25: 906010.925 ops/s
# Warmup Iteration  26: 906258.781 ops/s
# Warmup Iteration  27: 905526.290 ops/s
# Warmup Iteration  28: 905222.378 ops/s
# Warmup Iteration  29: 906236.029 ops/s
# Warmup Iteration  30: 907192.532 ops/s
Iteration   1: 904176.658 ops/s
Iteration   2: 905706.714 ops/s
Iteration   3: 904721.277 ops/s
Iteration   4: 905514.951 ops/s
Iteration   5: 902509.913 ops/s
Iteration   6: 898236.763 ops/s
Iteration   7: 901474.943 ops/s
Iteration   8: 906142.908 ops/s
Iteration   9: 903583.092 ops/s
Iteration  10: 902538.887 ops/s
Iteration  11: 908513.025 ops/s
Iteration  12: 903336.545 ops/s
Iteration  13: 905598.919 ops/s
Iteration  14: 904792.184 ops/s
Iteration  15: 903832.282 ops/s
Iteration  16: 903744.900 ops/s
Iteration  17: 904533.918 ops/s
Iteration  18: 902902.621 ops/s
Iteration  19: 904718.706 ops/s
Iteration  20: 904873.911 ops/s
Iteration  21: 904896.878 ops/s
Iteration  22: 906593.551 ops/s
Iteration  23: 902207.547 ops/s
Iteration  24: 905624.700 ops/s
Iteration  25: 908393.316 ops/s
Iteration  26: 902415.216 ops/s
Iteration  27: 898137.331 ops/s
Iteration  28: 903501.104 ops/s
Iteration  29: 903274.921 ops/s
Iteration  30: 905887.383 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  904079.502 ±(99.9%) 1544.802 ops/s [Average]
  (min, avg, max) = (898137.331, 904079.502, 908513.025), stdev = 2312.187
  CI (99.9%): [902534.700, 905624.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  904079.502 ± 1544.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650062.507 ops/s
# Warmup Iteration   2: 675821.493 ops/s
# Warmup Iteration   3: 814504.588 ops/s
# Warmup Iteration   4: 857183.681 ops/s
# Warmup Iteration   5: 861994.082 ops/s
# Warmup Iteration   6: 856262.516 ops/s
# Warmup Iteration   7: 862876.978 ops/s
# Warmup Iteration   8: 862302.170 ops/s
# Warmup Iteration   9: 863292.919 ops/s
# Warmup Iteration  10: 859086.220 ops/s
# Warmup Iteration  11: 858149.561 ops/s
# Warmup Iteration  12: 861780.934 ops/s
# Warmup Iteration  13: 788784.108 ops/s
# Warmup Iteration  14: 797544.361 ops/s
# Warmup Iteration  15: 861765.927 ops/s
# Warmup Iteration  16: 860899.484 ops/s
# Warmup Iteration  17: 915741.427 ops/s
# Warmup Iteration  18: 915948.724 ops/s
# Warmup Iteration  19: 915633.193 ops/s
# Warmup Iteration  20: 916515.920 ops/s
# Warmup Iteration  21: 913874.497 ops/s
# Warmup Iteration  22: 916342.582 ops/s
# Warmup Iteration  23: 916003.231 ops/s
# Warmup Iteration  24: 915660.913 ops/s
# Warmup Iteration  25: 915615.863 ops/s
# Warmup Iteration  26: 916859.814 ops/s
# Warmup Iteration  27: 916750.522 ops/s
# Warmup Iteration  28: 916063.754 ops/s
# Warmup Iteration  29: 918011.694 ops/s
# Warmup Iteration  30: 917235.179 ops/s
Iteration   1: 913821.028 ops/s
Iteration   2: 916375.922 ops/s
Iteration   3: 916510.097 ops/s
Iteration   4: 915993.093 ops/s
Iteration   5: 917908.774 ops/s
Iteration   6: 918138.904 ops/s
Iteration   7: 913041.526 ops/s
Iteration   8: 918445.244 ops/s
Iteration   9: 917936.035 ops/s
Iteration  10: 914276.566 ops/s
Iteration  11: 913801.765 ops/s
Iteration  12: 917940.438 ops/s
Iteration  13: 918515.934 ops/s
Iteration  14: 917629.830 ops/s
Iteration  15: 918345.516 ops/s
Iteration  16: 915771.154 ops/s
Iteration  17: 775995.145 ops/s
Iteration  18: 777197.782 ops/s
Iteration  19: 785729.378 ops/s
Iteration  20: 917366.040 ops/s
Iteration  21: 917654.185 ops/s
Iteration  22: 914114.455 ops/s
Iteration  23: 914386.507 ops/s
Iteration  24: 917759.704 ops/s
Iteration  25: 913327.666 ops/s
Iteration  26: 917486.363 ops/s
Iteration  27: 917696.258 ops/s
Iteration  28: 916654.071 ops/s
Iteration  29: 915729.910 ops/s
Iteration  30: 917122.906 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListFromNegative":
  902755.740 ±(99.9%) 27924.743 ops/s [Average]
  (min, avg, max) = (775995.145, 902755.740, 918515.934), stdev = 41796.444
  CI (99.9%): [874830.997, 930680.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  902755.740 ± 27924.743  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634256.927 ops/s
# Warmup Iteration   2: 656982.348 ops/s
# Warmup Iteration   3: 782888.703 ops/s
# Warmup Iteration   4: 835762.718 ops/s
# Warmup Iteration   5: 835159.767 ops/s
# Warmup Iteration   6: 833274.616 ops/s
# Warmup Iteration   7: 834741.485 ops/s
# Warmup Iteration   8: 833838.819 ops/s
# Warmup Iteration   9: 836850.011 ops/s
# Warmup Iteration  10: 834268.312 ops/s
# Warmup Iteration  11: 833617.997 ops/s
# Warmup Iteration  12: 837063.129 ops/s
# Warmup Iteration  13: 832709.689 ops/s
# Warmup Iteration  14: 703052.066 ops/s
# Warmup Iteration  15: 837929.665 ops/s
# Warmup Iteration  16: 836723.216 ops/s
# Warmup Iteration  17: 884841.457 ops/s
# Warmup Iteration  18: 882563.256 ops/s
# Warmup Iteration  19: 883359.811 ops/s
# Warmup Iteration  20: 885128.073 ops/s
# Warmup Iteration  21: 884162.831 ops/s
# Warmup Iteration  22: 885285.147 ops/s
# Warmup Iteration  23: 884948.625 ops/s
# Warmup Iteration  24: 884877.096 ops/s
# Warmup Iteration  25: 885491.190 ops/s
# Warmup Iteration  26: 882525.349 ops/s
# Warmup Iteration  27: 884091.325 ops/s
# Warmup Iteration  28: 883711.324 ops/s
# Warmup Iteration  29: 883480.489 ops/s
# Warmup Iteration  30: 883264.917 ops/s
Iteration   1: 884655.837 ops/s
Iteration   2: 884543.300 ops/s
Iteration   3: 885360.778 ops/s
Iteration   4: 885235.545 ops/s
Iteration   5: 884741.988 ops/s
Iteration   6: 883755.215 ops/s
Iteration   7: 884112.681 ops/s
Iteration   8: 886506.717 ops/s
Iteration   9: 883187.061 ops/s
Iteration  10: 886728.130 ops/s
Iteration  11: 886210.366 ops/s
Iteration  12: 881890.609 ops/s
Iteration  13: 880032.854 ops/s
Iteration  14: 881696.178 ops/s
Iteration  15: 882243.404 ops/s
Iteration  16: 882998.787 ops/s
Iteration  17: 884321.895 ops/s
Iteration  18: 883894.815 ops/s
Iteration  19: 884546.823 ops/s
Iteration  20: 881726.977 ops/s
Iteration  21: 884857.526 ops/s
Iteration  22: 887657.742 ops/s
Iteration  23: 884728.007 ops/s
Iteration  24: 887340.692 ops/s
Iteration  25: 886187.194 ops/s
Iteration  26: 885964.099 ops/s
Iteration  27: 884307.506 ops/s
Iteration  28: 885130.192 ops/s
Iteration  29: 884489.426 ops/s
Iteration  30: 882810.420 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_subListToGreaterThanSize":
  884395.425 ±(99.9%) 1189.640 ops/s [Average]
  (min, avg, max) = (880032.854, 884395.425, 887657.742), stdev = 1780.597
  CI (99.9%): [883205.786, 885585.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  884395.425 ± 1189.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 977385.824 ops/s
# Warmup Iteration   2: 1771507.404 ops/s
# Warmup Iteration   3: 2008298.229 ops/s
# Warmup Iteration   4: 2019720.160 ops/s
# Warmup Iteration   5: 2017571.968 ops/s
# Warmup Iteration   6: 1675118.424 ops/s
# Warmup Iteration   7: 2020282.842 ops/s
# Warmup Iteration   8: 2022460.269 ops/s
# Warmup Iteration   9: 2019988.039 ops/s
# Warmup Iteration  10: 2019377.634 ops/s
# Warmup Iteration  11: 2021296.636 ops/s
# Warmup Iteration  12: 2020279.333 ops/s
# Warmup Iteration  13: 2023557.835 ops/s
# Warmup Iteration  14: 2022015.194 ops/s
# Warmup Iteration  15: 2013944.712 ops/s
# Warmup Iteration  16: 2021557.607 ops/s
# Warmup Iteration  17: 2020842.631 ops/s
# Warmup Iteration  18: 2019503.844 ops/s
# Warmup Iteration  19: 2023456.155 ops/s
# Warmup Iteration  20: 2021116.337 ops/s
# Warmup Iteration  21: 2013184.428 ops/s
# Warmup Iteration  22: 2022250.390 ops/s
# Warmup Iteration  23: 2020994.541 ops/s
# Warmup Iteration  24: 2020413.052 ops/s
# Warmup Iteration  25: 2020370.238 ops/s
# Warmup Iteration  26: 2020885.904 ops/s
# Warmup Iteration  27: 2020519.385 ops/s
# Warmup Iteration  28: 2021529.798 ops/s
# Warmup Iteration  29: 2022939.637 ops/s
# Warmup Iteration  30: 2022201.144 ops/s
Iteration   1: 2019244.844 ops/s
Iteration   2: 2018894.265 ops/s
Iteration   3: 2016399.312 ops/s
Iteration   4: 2020591.938 ops/s
Iteration   5: 2019257.798 ops/s
Iteration   6: 2015956.005 ops/s
Iteration   7: 2021801.240 ops/s
Iteration   8: 2019170.674 ops/s
Iteration   9: 2020175.116 ops/s
Iteration  10: 2019815.788 ops/s
Iteration  11: 2008314.974 ops/s
Iteration  12: 2016884.710 ops/s
Iteration  13: 2015298.267 ops/s
Iteration  14: 2023879.982 ops/s
Iteration  15: 2020392.230 ops/s
Iteration  16: 2022923.355 ops/s
Iteration  17: 2019478.625 ops/s
Iteration  18: 2014512.728 ops/s
Iteration  19: 2020421.805 ops/s
Iteration  20: 2020585.832 ops/s
Iteration  21: 2022265.005 ops/s
Iteration  22: 2019426.053 ops/s
Iteration  23: 2025404.975 ops/s
Iteration  24: 2018074.507 ops/s
Iteration  25: 2020102.853 ops/s
Iteration  26: 2024272.989 ops/s
Iteration  27: 2018665.471 ops/s
Iteration  28: 2017293.836 ops/s
Iteration  29: 2021510.861 ops/s
Iteration  30: 2021314.498 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDouble":
  2019411.018 ±(99.9%) 2213.712 ops/s [Average]
  (min, avg, max) = (2008314.974, 2019411.018, 2025404.975), stdev = 3313.380
  CI (99.9%): [2017197.306, 2021624.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2019411.018 ± 2213.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.776 ops/s
# Warmup Iteration   2: 74.382 ops/s
# Warmup Iteration   3: 99.567 ops/s
# Warmup Iteration   4: 102.453 ops/s
# Warmup Iteration   5: 101.638 ops/s
# Warmup Iteration   6: 101.356 ops/s
# Warmup Iteration   7: 101.468 ops/s
# Warmup Iteration   8: 101.508 ops/s
# Warmup Iteration   9: 87.188 ops/s
# Warmup Iteration  10: 97.854 ops/s
# Warmup Iteration  11: 102.216 ops/s
# Warmup Iteration  12: 103.849 ops/s
# Warmup Iteration  13: 99.569 ops/s
# Warmup Iteration  14: 100.415 ops/s
# Warmup Iteration  15: 102.931 ops/s
# Warmup Iteration  16: 101.887 ops/s
# Warmup Iteration  17: 99.381 ops/s
# Warmup Iteration  18: 99.653 ops/s
# Warmup Iteration  19: 98.506 ops/s
# Warmup Iteration  20: 100.049 ops/s
# Warmup Iteration  21: 99.302 ops/s
# Warmup Iteration  22: 99.599 ops/s
# Warmup Iteration  23: 100.847 ops/s
# Warmup Iteration  24: 101.293 ops/s
# Warmup Iteration  25: 101.117 ops/s
# Warmup Iteration  26: 102.452 ops/s
# Warmup Iteration  27: 102.067 ops/s
# Warmup Iteration  28: 101.083 ops/s
# Warmup Iteration  29: 101.430 ops/s
# Warmup Iteration  30: 101.153 ops/s
Iteration   1: 102.495 ops/s
Iteration   2: 98.673 ops/s
Iteration   3: 101.789 ops/s
Iteration   4: 100.142 ops/s
Iteration   5: 97.624 ops/s
Iteration   6: 100.792 ops/s
Iteration   7: 101.248 ops/s
Iteration   8: 98.535 ops/s
Iteration   9: 101.866 ops/s
Iteration  10: 100.672 ops/s
Iteration  11: 97.890 ops/s
Iteration  12: 101.923 ops/s
Iteration  13: 102.287 ops/s
Iteration  14: 99.066 ops/s
Iteration  15: 102.094 ops/s
Iteration  16: 101.011 ops/s
Iteration  17: 98.732 ops/s
Iteration  18: 102.177 ops/s
Iteration  19: 102.449 ops/s
Iteration  20: 99.430 ops/s
Iteration  21: 102.157 ops/s
Iteration  22: 100.080 ops/s
Iteration  23: 99.545 ops/s
Iteration  24: 101.719 ops/s
Iteration  25: 102.815 ops/s
Iteration  26: 97.924 ops/s
Iteration  27: 98.769 ops/s
Iteration  28: 100.683 ops/s
Iteration  29: 98.962 ops/s
Iteration  30: 98.694 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  100.408 ±(99.9%) 1.091 ops/s [Average]
  (min, avg, max) = (97.624, 100.408, 102.815), stdev = 1.632
  CI (99.9%): [99.318, 101.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt    Score   Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  100.408 ± 1.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 979830.690 ops/s
# Warmup Iteration   2: 1820885.375 ops/s
# Warmup Iteration   3: 2054859.476 ops/s
# Warmup Iteration   4: 2060999.251 ops/s
# Warmup Iteration   5: 2065404.254 ops/s
# Warmup Iteration   6: 1706585.398 ops/s
# Warmup Iteration   7: 2058347.590 ops/s
# Warmup Iteration   8: 2062740.342 ops/s
# Warmup Iteration   9: 2057940.344 ops/s
# Warmup Iteration  10: 2058132.282 ops/s
# Warmup Iteration  11: 2058699.342 ops/s
# Warmup Iteration  12: 2061356.870 ops/s
# Warmup Iteration  13: 2064093.022 ops/s
# Warmup Iteration  14: 2068577.524 ops/s
# Warmup Iteration  15: 2065900.720 ops/s
# Warmup Iteration  16: 2066507.653 ops/s
# Warmup Iteration  17: 2065495.910 ops/s
# Warmup Iteration  18: 2062662.605 ops/s
# Warmup Iteration  19: 2062837.600 ops/s
# Warmup Iteration  20: 2060553.119 ops/s
# Warmup Iteration  21: 2065721.944 ops/s
# Warmup Iteration  22: 2062317.665 ops/s
# Warmup Iteration  23: 2061512.546 ops/s
# Warmup Iteration  24: 2062511.861 ops/s
# Warmup Iteration  25: 2064898.661 ops/s
# Warmup Iteration  26: 2065042.761 ops/s
# Warmup Iteration  27: 2065407.714 ops/s
# Warmup Iteration  28: 2067919.326 ops/s
# Warmup Iteration  29: 2060889.199 ops/s
# Warmup Iteration  30: 2063183.885 ops/s
Iteration   1: 2069750.730 ops/s
Iteration   2: 2064444.935 ops/s
Iteration   3: 2064972.715 ops/s
Iteration   4: 2061937.672 ops/s
Iteration   5: 2048113.031 ops/s
Iteration   6: 2068518.323 ops/s
Iteration   7: 2066432.622 ops/s
Iteration   8: 2065540.460 ops/s
Iteration   9: 2070736.398 ops/s
Iteration  10: 2070021.274 ops/s
Iteration  11: 2070420.727 ops/s
Iteration  12: 2068181.338 ops/s
Iteration  13: 2069708.760 ops/s
Iteration  14: 2072282.394 ops/s
Iteration  15: 2066407.221 ops/s
Iteration  16: 2067690.584 ops/s
Iteration  17: 2062441.389 ops/s
Iteration  18: 2061220.381 ops/s
Iteration  19: 2064552.301 ops/s
Iteration  20: 2062697.051 ops/s
Iteration  21: 2065816.335 ops/s
Iteration  22: 2059066.535 ops/s
Iteration  23: 2051633.705 ops/s
Iteration  24: 2062816.765 ops/s
Iteration  25: 2057879.694 ops/s
Iteration  26: 2070012.417 ops/s
Iteration  27: 2066074.974 ops/s
Iteration  28: 2068339.597 ops/s
Iteration  29: 2065008.528 ops/s
Iteration  30: 2067168.546 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloat":
  2064996.247 ±(99.9%) 3622.765 ops/s [Average]
  (min, avg, max) = (2048113.031, 2064996.247, 2072282.394), stdev = 5422.385
  CI (99.9%): [2061373.482, 2068619.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2064996.247 ± 3622.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.139 ops/s
# Warmup Iteration   2: 73.751 ops/s
# Warmup Iteration   3: 98.506 ops/s
# Warmup Iteration   4: 98.980 ops/s
# Warmup Iteration   5: 97.830 ops/s
# Warmup Iteration   6: 98.847 ops/s
# Warmup Iteration   7: 98.297 ops/s
# Warmup Iteration   8: 98.034 ops/s
# Warmup Iteration   9: 92.143 ops/s
# Warmup Iteration  10: 86.981 ops/s
# Warmup Iteration  11: 99.264 ops/s
# Warmup Iteration  12: 97.955 ops/s
# Warmup Iteration  13: 100.564 ops/s
# Warmup Iteration  14: 102.940 ops/s
# Warmup Iteration  15: 100.969 ops/s
# Warmup Iteration  16: 99.146 ops/s
# Warmup Iteration  17: 80.918 ops/s
# Warmup Iteration  18: 77.984 ops/s
# Warmup Iteration  19: 80.281 ops/s
# Warmup Iteration  20: 78.630 ops/s
# Warmup Iteration  21: 82.179 ops/s
# Warmup Iteration  22: 80.835 ops/s
# Warmup Iteration  23: 83.110 ops/s
# Warmup Iteration  24: 79.330 ops/s
# Warmup Iteration  25: 81.064 ops/s
# Warmup Iteration  26: 81.105 ops/s
# Warmup Iteration  27: 81.953 ops/s
# Warmup Iteration  28: 80.862 ops/s
# Warmup Iteration  29: 81.484 ops/s
# Warmup Iteration  30: 81.148 ops/s
Iteration   1: 82.083 ops/s
Iteration   2: 91.870 ops/s
Iteration   3: 98.573 ops/s
Iteration   4: 98.793 ops/s
Iteration   5: 99.176 ops/s
Iteration   6: 100.052 ops/s
Iteration   7: 101.377 ops/s
Iteration   8: 96.053 ops/s
Iteration   9: 96.492 ops/s
Iteration  10: 98.437 ops/s
Iteration  11: 97.327 ops/s
Iteration  12: 96.273 ops/s
Iteration  13: 98.485 ops/s
Iteration  14: 97.334 ops/s
Iteration  15: 95.855 ops/s
Iteration  16: 100.116 ops/s
Iteration  17: 99.785 ops/s
Iteration  18: 96.745 ops/s
Iteration  19: 100.558 ops/s
Iteration  20: 100.568 ops/s
Iteration  21: 95.833 ops/s
Iteration  22: 99.948 ops/s
Iteration  23: 99.851 ops/s
Iteration  24: 95.933 ops/s
Iteration  25: 99.236 ops/s
Iteration  26: 100.132 ops/s
Iteration  27: 97.115 ops/s
Iteration  28: 99.434 ops/s
Iteration  29: 98.711 ops/s
Iteration  30: 97.502 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.655 ±(99.9%) 2.382 ops/s [Average]
  (min, avg, max) = (82.083, 97.655, 101.377), stdev = 3.565
  CI (99.9%): [95.273, 100.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.655 ± 2.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1375663.882 ops/s
# Warmup Iteration   2: 2625258.401 ops/s
# Warmup Iteration   3: 2918142.928 ops/s
# Warmup Iteration   4: 2941777.104 ops/s
# Warmup Iteration   5: 2497333.572 ops/s
# Warmup Iteration   6: 2856835.141 ops/s
# Warmup Iteration   7: 2942637.714 ops/s
# Warmup Iteration   8: 2936267.510 ops/s
# Warmup Iteration   9: 2941225.681 ops/s
# Warmup Iteration  10: 2887785.050 ops/s
# Warmup Iteration  11: 2938362.473 ops/s
# Warmup Iteration  12: 2938062.044 ops/s
# Warmup Iteration  13: 2942255.594 ops/s
# Warmup Iteration  14: 2947239.525 ops/s
# Warmup Iteration  15: 2941723.419 ops/s
# Warmup Iteration  16: 2943928.109 ops/s
# Warmup Iteration  17: 2942954.986 ops/s
# Warmup Iteration  18: 2928591.367 ops/s
# Warmup Iteration  19: 2932341.139 ops/s
# Warmup Iteration  20: 2932023.933 ops/s
# Warmup Iteration  21: 2942470.825 ops/s
# Warmup Iteration  22: 2944497.497 ops/s
# Warmup Iteration  23: 2939577.743 ops/s
# Warmup Iteration  24: 2941640.440 ops/s
# Warmup Iteration  25: 2934259.672 ops/s
# Warmup Iteration  26: 2936765.619 ops/s
# Warmup Iteration  27: 2938789.470 ops/s
# Warmup Iteration  28: 2937389.112 ops/s
# Warmup Iteration  29: 2941402.994 ops/s
# Warmup Iteration  30: 2936329.484 ops/s
Iteration   1: 2942869.181 ops/s
Iteration   2: 2940637.910 ops/s
Iteration   3: 2942934.576 ops/s
Iteration   4: 2936219.900 ops/s
Iteration   5: 2934237.103 ops/s
Iteration   6: 2947151.027 ops/s
Iteration   7: 2932987.656 ops/s
Iteration   8: 2938436.524 ops/s
Iteration   9: 2941812.592 ops/s
Iteration  10: 2936327.955 ops/s
Iteration  11: 2928731.809 ops/s
Iteration  12: 2941533.229 ops/s
Iteration  13: 2938128.893 ops/s
Iteration  14: 2934085.889 ops/s
Iteration  15: 2939940.149 ops/s
Iteration  16: 2936530.911 ops/s
Iteration  17: 2936336.955 ops/s
Iteration  18: 2933941.898 ops/s
Iteration  19: 2933899.228 ops/s
Iteration  20: 2944546.847 ops/s
Iteration  21: 2929011.753 ops/s
Iteration  22: 2928640.122 ops/s
Iteration  23: 2946677.233 ops/s
Iteration  24: 2936819.227 ops/s
Iteration  25: 2942295.692 ops/s
Iteration  26: 2947066.614 ops/s
Iteration  27: 2945882.042 ops/s
Iteration  28: 2940548.884 ops/s
Iteration  29: 2942323.471 ops/s
Iteration  30: 2937064.983 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByInt":
  2938587.342 ±(99.9%) 3554.574 ops/s [Average]
  (min, avg, max) = (2928640.122, 2938587.342, 2947151.027), stdev = 5320.320
  CI (99.9%): [2935032.767, 2942141.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByInt  thrpt   30  2938587.342 ± 3554.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1328803.763 ops/s
# Warmup Iteration   2: 2650988.298 ops/s
# Warmup Iteration   3: 2916680.320 ops/s
# Warmup Iteration   4: 2953011.937 ops/s
# Warmup Iteration   5: 2418697.804 ops/s
# Warmup Iteration   6: 2962409.589 ops/s
# Warmup Iteration   7: 2970550.121 ops/s
# Warmup Iteration   8: 2953000.827 ops/s
# Warmup Iteration   9: 2946047.280 ops/s
# Warmup Iteration  10: 2957380.957 ops/s
# Warmup Iteration  11: 2965909.752 ops/s
# Warmup Iteration  12: 2963319.530 ops/s
# Warmup Iteration  13: 2957419.902 ops/s
# Warmup Iteration  14: 2956673.064 ops/s
# Warmup Iteration  15: 2954539.002 ops/s
# Warmup Iteration  16: 2941790.897 ops/s
# Warmup Iteration  17: 2948058.767 ops/s
# Warmup Iteration  18: 2949266.259 ops/s
# Warmup Iteration  19: 2952789.311 ops/s
# Warmup Iteration  20: 2960742.043 ops/s
# Warmup Iteration  21: 2948042.849 ops/s
# Warmup Iteration  22: 2957446.552 ops/s
# Warmup Iteration  23: 2956746.615 ops/s
# Warmup Iteration  24: 2961760.132 ops/s
# Warmup Iteration  25: 2964087.843 ops/s
# Warmup Iteration  26: 2966155.676 ops/s
# Warmup Iteration  27: 2957228.421 ops/s
# Warmup Iteration  28: 2961309.399 ops/s
# Warmup Iteration  29: 2938760.857 ops/s
# Warmup Iteration  30: 2942272.517 ops/s
Iteration   1: 2938296.308 ops/s
Iteration   2: 2960437.325 ops/s
Iteration   3: 2965660.952 ops/s
Iteration   4: 2957374.760 ops/s
Iteration   5: 2955625.323 ops/s
Iteration   6: 2970734.846 ops/s
Iteration   7: 2957084.035 ops/s
Iteration   8: 2964656.664 ops/s
Iteration   9: 2972085.799 ops/s
Iteration  10: 2964188.670 ops/s
Iteration  11: 2950698.091 ops/s
Iteration  12: 2958190.281 ops/s
Iteration  13: 2963442.348 ops/s
Iteration  14: 2958162.725 ops/s
Iteration  15: 2955613.767 ops/s
Iteration  16: 2965346.863 ops/s
Iteration  17: 2971197.683 ops/s
Iteration  18: 2953770.148 ops/s
Iteration  19: 2963124.878 ops/s
Iteration  20: 2956545.291 ops/s
Iteration  21: 2959185.466 ops/s
Iteration  22: 2931911.523 ops/s
Iteration  23: 2951994.494 ops/s
Iteration  24: 2927237.810 ops/s
Iteration  25: 2937375.604 ops/s
Iteration  26: 2953400.514 ops/s
Iteration  27: 2948905.286 ops/s
Iteration  28: 2967758.199 ops/s
Iteration  29: 2960492.234 ops/s
Iteration  30: 2948989.566 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumByLong":
  2956316.248 ±(99.9%) 7399.598 ops/s [Average]
  (min, avg, max) = (2927237.810, 2956316.248, 2972085.799), stdev = 11075.371
  CI (99.9%): [2948916.650, 2963715.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumByLong  thrpt   30  2956316.248 ± 7399.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8721072.616 ops/s
# Warmup Iteration   2: 18090077.803 ops/s
# Warmup Iteration   3: 16600512.354 ops/s
# Warmup Iteration   4: 17170501.389 ops/s
# Warmup Iteration   5: 18321761.556 ops/s
# Warmup Iteration   6: 18295177.106 ops/s
# Warmup Iteration   7: 18287854.245 ops/s
# Warmup Iteration   8: 18301079.196 ops/s
# Warmup Iteration   9: 18315977.803 ops/s
# Warmup Iteration  10: 18319090.118 ops/s
# Warmup Iteration  11: 18321765.286 ops/s
# Warmup Iteration  12: 18341964.149 ops/s
# Warmup Iteration  13: 18352874.196 ops/s
# Warmup Iteration  14: 18326866.922 ops/s
# Warmup Iteration  15: 18369391.098 ops/s
# Warmup Iteration  16: 18347107.865 ops/s
# Warmup Iteration  17: 18331262.888 ops/s
# Warmup Iteration  18: 18352483.086 ops/s
# Warmup Iteration  19: 18350833.420 ops/s
# Warmup Iteration  20: 18321774.962 ops/s
# Warmup Iteration  21: 18332471.389 ops/s
# Warmup Iteration  22: 18350837.570 ops/s
# Warmup Iteration  23: 18344715.741 ops/s
# Warmup Iteration  24: 18297975.768 ops/s
# Warmup Iteration  25: 18353752.212 ops/s
# Warmup Iteration  26: 18352814.300 ops/s
# Warmup Iteration  27: 18348485.720 ops/s
# Warmup Iteration  28: 18311503.613 ops/s
# Warmup Iteration  29: 18340771.737 ops/s
# Warmup Iteration  30: 18359638.412 ops/s
Iteration   1: 18343539.583 ops/s
Iteration   2: 18302686.045 ops/s
Iteration   3: 18306495.152 ops/s
Iteration   4: 18312577.473 ops/s
Iteration   5: 18308174.232 ops/s
Iteration   6: 18334678.786 ops/s
Iteration   7: 18353770.208 ops/s
Iteration   8: 18322058.218 ops/s
Iteration   9: 18292026.664 ops/s
Iteration  10: 18355377.320 ops/s
Iteration  11: 18368103.314 ops/s
Iteration  12: 18377688.203 ops/s
Iteration  13: 18321267.934 ops/s
Iteration  14: 18352413.254 ops/s
Iteration  15: 18369156.388 ops/s
Iteration  16: 18370541.443 ops/s
Iteration  17: 18336666.569 ops/s
Iteration  18: 18334599.961 ops/s
Iteration  19: 18324101.423 ops/s
Iteration  20: 18352525.760 ops/s
Iteration  21: 18340881.802 ops/s
Iteration  22: 18318427.462 ops/s
Iteration  23: 18306523.903 ops/s
Iteration  24: 18333884.585 ops/s
Iteration  25: 18299853.051 ops/s
Iteration  26: 18282383.664 ops/s
Iteration  27: 18313860.802 ops/s
Iteration  28: 18345164.080 ops/s
Iteration  29: 18318078.737 ops/s
Iteration  30: 18311879.005 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumDouble":
  18330312.834 ±(99.9%) 16663.462 ops/s [Average]
  (min, avg, max) = (18282383.664, 18330312.834, 18377688.203), stdev = 24941.087
  CI (99.9%): [18313649.372, 18346976.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumDouble  thrpt   30  18330312.834 ± 16663.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7886347.561 ops/s
# Warmup Iteration   2: 16946303.754 ops/s
# Warmup Iteration   3: 16680247.793 ops/s
# Warmup Iteration   4: 14087442.455 ops/s
# Warmup Iteration   5: 16701166.617 ops/s
# Warmup Iteration   6: 16686964.227 ops/s
# Warmup Iteration   7: 16655679.060 ops/s
# Warmup Iteration   8: 16683265.431 ops/s
# Warmup Iteration   9: 16696603.749 ops/s
# Warmup Iteration  10: 16691570.472 ops/s
# Warmup Iteration  11: 16702618.614 ops/s
# Warmup Iteration  12: 16705420.752 ops/s
# Warmup Iteration  13: 16688457.856 ops/s
# Warmup Iteration  14: 16667736.370 ops/s
# Warmup Iteration  15: 16691569.522 ops/s
# Warmup Iteration  16: 16707097.796 ops/s
# Warmup Iteration  17: 16684057.387 ops/s
# Warmup Iteration  18: 16710306.344 ops/s
# Warmup Iteration  19: 16706468.990 ops/s
# Warmup Iteration  20: 16701327.123 ops/s
# Warmup Iteration  21: 16702654.984 ops/s
# Warmup Iteration  22: 16702343.349 ops/s
# Warmup Iteration  23: 16698596.829 ops/s
# Warmup Iteration  24: 16692111.428 ops/s
# Warmup Iteration  25: 16704673.035 ops/s
# Warmup Iteration  26: 16696355.193 ops/s
# Warmup Iteration  27: 16701658.088 ops/s
# Warmup Iteration  28: 16674916.739 ops/s
# Warmup Iteration  29: 16728401.970 ops/s
# Warmup Iteration  30: 16705137.947 ops/s
Iteration   1: 16662969.509 ops/s
Iteration   2: 16694101.841 ops/s
Iteration   3: 16714540.649 ops/s
Iteration   4: 16668392.331 ops/s
Iteration   5: 16676103.373 ops/s
Iteration   6: 16704738.646 ops/s
Iteration   7: 16689571.694 ops/s
Iteration   8: 16688457.713 ops/s
Iteration   9: 16696487.102 ops/s
Iteration  10: 16698975.719 ops/s
Iteration  11: 16703438.916 ops/s
Iteration  12: 16709772.986 ops/s
Iteration  13: 16701701.636 ops/s
Iteration  14: 16709333.076 ops/s
Iteration  15: 16705035.561 ops/s
Iteration  16: 16699606.534 ops/s
Iteration  17: 16702840.968 ops/s
Iteration  18: 16700887.604 ops/s
Iteration  19: 16690694.473 ops/s
Iteration  20: 16695155.707 ops/s
Iteration  21: 16700586.901 ops/s
Iteration  22: 16702991.247 ops/s
Iteration  23: 16672882.870 ops/s
Iteration  24: 16690708.349 ops/s
Iteration  25: 16690755.599 ops/s
Iteration  26: 16653349.036 ops/s
Iteration  27: 16692447.870 ops/s
Iteration  28: 16683822.271 ops/s
Iteration  29: 16685969.568 ops/s
Iteration  30: 16679738.347 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumFloat":
  16692201.937 ±(99.9%) 9611.463 ops/s [Average]
  (min, avg, max) = (16653349.036, 16692201.937, 16714540.649), stdev = 14385.987
  CI (99.9%): [16682590.473, 16701813.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumFloat  thrpt   30  16692201.937 ± 9611.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13134510.725 ops/s
# Warmup Iteration   2: 26263515.598 ops/s
# Warmup Iteration   3: 22077620.576 ops/s
# Warmup Iteration   4: 26378704.937 ops/s
# Warmup Iteration   5: 26387143.185 ops/s
# Warmup Iteration   6: 26428040.219 ops/s
# Warmup Iteration   7: 26359709.232 ops/s
# Warmup Iteration   8: 26350676.846 ops/s
# Warmup Iteration   9: 26326563.272 ops/s
# Warmup Iteration  10: 26362465.641 ops/s
# Warmup Iteration  11: 26313814.419 ops/s
# Warmup Iteration  12: 26340096.526 ops/s
# Warmup Iteration  13: 26397428.669 ops/s
# Warmup Iteration  14: 26341914.720 ops/s
# Warmup Iteration  15: 26325721.384 ops/s
# Warmup Iteration  16: 26280439.170 ops/s
# Warmup Iteration  17: 26303080.404 ops/s
# Warmup Iteration  18: 26373527.964 ops/s
# Warmup Iteration  19: 26347902.636 ops/s
# Warmup Iteration  20: 26377608.939 ops/s
# Warmup Iteration  21: 26372703.092 ops/s
# Warmup Iteration  22: 26446653.780 ops/s
# Warmup Iteration  23: 26329827.977 ops/s
# Warmup Iteration  24: 26334435.418 ops/s
# Warmup Iteration  25: 26378601.970 ops/s
# Warmup Iteration  26: 26351601.484 ops/s
# Warmup Iteration  27: 26379413.665 ops/s
# Warmup Iteration  28: 26364542.581 ops/s
# Warmup Iteration  29: 26387946.531 ops/s
# Warmup Iteration  30: 26389977.820 ops/s
Iteration   1: 26371186.974 ops/s
Iteration   2: 26498337.416 ops/s
Iteration   3: 26405570.678 ops/s
Iteration   4: 26331450.133 ops/s
Iteration   5: 26463850.983 ops/s
Iteration   6: 26357326.338 ops/s
Iteration   7: 26424425.639 ops/s
Iteration   8: 26426663.176 ops/s
Iteration   9: 26321794.328 ops/s
Iteration  10: 26473898.869 ops/s
Iteration  11: 26357436.718 ops/s
Iteration  12: 26359339.700 ops/s
Iteration  13: 26386057.796 ops/s
Iteration  14: 26355285.054 ops/s
Iteration  15: 26275133.215 ops/s
Iteration  16: 26433202.881 ops/s
Iteration  17: 26343643.263 ops/s
Iteration  18: 26405582.564 ops/s
Iteration  19: 26403483.355 ops/s
Iteration  20: 26302674.566 ops/s
Iteration  21: 26399674.877 ops/s
Iteration  22: 26355015.553 ops/s
Iteration  23: 26358411.821 ops/s
Iteration  24: 26358486.199 ops/s
Iteration  25: 26374828.187 ops/s
Iteration  26: 26413713.731 ops/s
Iteration  27: 26320376.803 ops/s
Iteration  28: 26429664.630 ops/s
Iteration  29: 26397489.542 ops/s
Iteration  30: 26225299.123 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumInteger":
  26377643.470 ±(99.9%) 38860.063 ops/s [Average]
  (min, avg, max) = (26225299.123, 26377643.470, 26498337.416), stdev = 58163.917
  CI (99.9%): [26338783.408, 26416503.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumInteger  thrpt   30  26377643.470 ± 38860.063  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12782927.462 ops/s
# Warmup Iteration   2: 25663943.276 ops/s
# Warmup Iteration   3: 21748701.514 ops/s
# Warmup Iteration   4: 25496935.380 ops/s
# Warmup Iteration   5: 25508824.581 ops/s
# Warmup Iteration   6: 25511172.237 ops/s
# Warmup Iteration   7: 25555221.649 ops/s
# Warmup Iteration   8: 25586918.247 ops/s
# Warmup Iteration   9: 25553341.528 ops/s
# Warmup Iteration  10: 25508810.199 ops/s
# Warmup Iteration  11: 25498638.487 ops/s
# Warmup Iteration  12: 25489772.329 ops/s
# Warmup Iteration  13: 25550902.189 ops/s
# Warmup Iteration  14: 25550218.721 ops/s
# Warmup Iteration  15: 25570095.620 ops/s
# Warmup Iteration  16: 25568596.147 ops/s
# Warmup Iteration  17: 25488621.885 ops/s
# Warmup Iteration  18: 25539942.695 ops/s
# Warmup Iteration  19: 25531911.726 ops/s
# Warmup Iteration  20: 25564043.893 ops/s
# Warmup Iteration  21: 25555593.946 ops/s
# Warmup Iteration  22: 25518159.697 ops/s
# Warmup Iteration  23: 25517653.505 ops/s
# Warmup Iteration  24: 25503960.130 ops/s
# Warmup Iteration  25: 25567481.162 ops/s
# Warmup Iteration  26: 25459924.612 ops/s
# Warmup Iteration  27: 25551405.768 ops/s
# Warmup Iteration  28: 25565954.084 ops/s
# Warmup Iteration  29: 25579907.344 ops/s
# Warmup Iteration  30: 25530243.346 ops/s
Iteration   1: 25518633.280 ops/s
Iteration   2: 25568275.301 ops/s
Iteration   3: 25513263.903 ops/s
Iteration   4: 25466715.148 ops/s
Iteration   5: 25566921.850 ops/s
Iteration   6: 25478212.179 ops/s
Iteration   7: 25543037.686 ops/s
Iteration   8: 25478576.378 ops/s
Iteration   9: 25522864.448 ops/s
Iteration  10: 25566354.848 ops/s
Iteration  11: 25550013.881 ops/s
Iteration  12: 25560668.823 ops/s
Iteration  13: 25466276.534 ops/s
Iteration  14: 25581785.907 ops/s
Iteration  15: 25485057.428 ops/s
Iteration  16: 25520687.463 ops/s
Iteration  17: 25571499.130 ops/s
Iteration  18: 25468587.672 ops/s
Iteration  19: 25572762.057 ops/s
Iteration  20: 25505380.903 ops/s
Iteration  21: 25594157.891 ops/s
Iteration  22: 25485407.058 ops/s
Iteration  23: 25529252.853 ops/s
Iteration  24: 25574137.392 ops/s
Iteration  25: 25463390.740 ops/s
Iteration  26: 25624113.258 ops/s
Iteration  27: 25490313.064 ops/s
Iteration  28: 25570492.067 ops/s
Iteration  29: 25516312.105 ops/s
Iteration  30: 25471233.129 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_sumLong":
  25527479.479 ±(99.9%) 30451.038 ops/s [Average]
  (min, avg, max) = (25463390.740, 25527479.479, 25624113.258), stdev = 45577.684
  CI (99.9%): [25497028.441, 25557930.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_sumLong  thrpt   30  25527479.479 ± 30451.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2505331.772 ops/s
# Warmup Iteration   2: 5384581.312 ops/s
# Warmup Iteration   3: 5714789.408 ops/s
# Warmup Iteration   4: 5740079.884 ops/s
# Warmup Iteration   5: 4743975.966 ops/s
# Warmup Iteration   6: 5771080.216 ops/s
# Warmup Iteration   7: 5775943.840 ops/s
# Warmup Iteration   8: 5767325.540 ops/s
# Warmup Iteration   9: 5775683.226 ops/s
# Warmup Iteration  10: 5768135.640 ops/s
# Warmup Iteration  11: 5762472.538 ops/s
# Warmup Iteration  12: 5777860.507 ops/s
# Warmup Iteration  13: 5764628.319 ops/s
# Warmup Iteration  14: 5775718.579 ops/s
# Warmup Iteration  15: 5774992.157 ops/s
# Warmup Iteration  16: 5771761.140 ops/s
# Warmup Iteration  17: 5770301.457 ops/s
# Warmup Iteration  18: 5770807.346 ops/s
# Warmup Iteration  19: 5775697.790 ops/s
# Warmup Iteration  20: 5778127.259 ops/s
# Warmup Iteration  21: 5780163.128 ops/s
# Warmup Iteration  22: 5765213.922 ops/s
# Warmup Iteration  23: 5774534.199 ops/s
# Warmup Iteration  24: 5777729.921 ops/s
# Warmup Iteration  25: 5765200.275 ops/s
# Warmup Iteration  26: 5775518.391 ops/s
# Warmup Iteration  27: 5765537.308 ops/s
# Warmup Iteration  28: 5771970.542 ops/s
# Warmup Iteration  29: 5773023.218 ops/s
# Warmup Iteration  30: 5778525.893 ops/s
Iteration   1: 5772392.053 ops/s
Iteration   2: 5763597.735 ops/s
Iteration   3: 5769673.116 ops/s
Iteration   4: 5771407.654 ops/s
Iteration   5: 5762877.785 ops/s
Iteration   6: 5758859.016 ops/s
Iteration   7: 5761916.125 ops/s
Iteration   8: 5790785.579 ops/s
Iteration   9: 5774247.867 ops/s
Iteration  10: 5782087.841 ops/s
Iteration  11: 5780738.763 ops/s
Iteration  12: 5772923.947 ops/s
Iteration  13: 5780514.853 ops/s
Iteration  14: 5776126.922 ops/s
Iteration  15: 5775287.966 ops/s
Iteration  16: 5760759.279 ops/s
Iteration  17: 5782627.760 ops/s
Iteration  18: 5771613.464 ops/s
Iteration  19: 5782333.473 ops/s
Iteration  20: 5773615.692 ops/s
Iteration  21: 5766285.277 ops/s
Iteration  22: 5741155.600 ops/s
Iteration  23: 5755181.404 ops/s
Iteration  24: 5759482.713 ops/s
Iteration  25: 5773316.822 ops/s
Iteration  26: 5765747.208 ops/s
Iteration  27: 5750352.440 ops/s
Iteration  28: 5759100.053 ops/s
Iteration  29: 5775609.020 ops/s
Iteration  30: 5772901.336 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take":
  5769450.625 ±(99.9%) 7168.496 ops/s [Average]
  (min, avg, max) = (5741155.600, 5769450.625, 5790785.579), stdev = 10729.468
  CI (99.9%): [5762282.129, 5776619.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_take  thrpt   30  5769450.625 ± 7168.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7892562.690 ops/s
# Warmup Iteration   2: 18830435.822 ops/s
# Warmup Iteration   3: 18409260.047 ops/s
# Warmup Iteration   4: 15242785.591 ops/s
# Warmup Iteration   5: 18411998.105 ops/s
# Warmup Iteration   6: 18447565.294 ops/s
# Warmup Iteration   7: 18422606.074 ops/s
# Warmup Iteration   8: 18436972.948 ops/s
# Warmup Iteration   9: 18447630.615 ops/s
# Warmup Iteration  10: 18421659.767 ops/s
# Warmup Iteration  11: 18441710.861 ops/s
# Warmup Iteration  12: 18440845.803 ops/s
# Warmup Iteration  13: 18394448.300 ops/s
# Warmup Iteration  14: 18439014.606 ops/s
# Warmup Iteration  15: 18448630.875 ops/s
# Warmup Iteration  16: 18434237.117 ops/s
# Warmup Iteration  17: 18356573.852 ops/s
# Warmup Iteration  18: 18412501.794 ops/s
# Warmup Iteration  19: 18417199.316 ops/s
# Warmup Iteration  20: 18419909.654 ops/s
# Warmup Iteration  21: 18413704.227 ops/s
# Warmup Iteration  22: 18408599.292 ops/s
# Warmup Iteration  23: 18413572.432 ops/s
# Warmup Iteration  24: 18424926.764 ops/s
# Warmup Iteration  25: 18429387.380 ops/s
# Warmup Iteration  26: 18419330.078 ops/s
# Warmup Iteration  27: 18400988.848 ops/s
# Warmup Iteration  28: 18382300.283 ops/s
# Warmup Iteration  29: 18457374.060 ops/s
# Warmup Iteration  30: 18428716.334 ops/s
Iteration   1: 18408039.818 ops/s
Iteration   2: 18390410.215 ops/s
Iteration   3: 18406779.805 ops/s
Iteration   4: 18437079.356 ops/s
Iteration   5: 18448858.139 ops/s
Iteration   6: 18437898.111 ops/s
Iteration   7: 18384374.361 ops/s
Iteration   8: 18386493.446 ops/s
Iteration   9: 18392575.361 ops/s
Iteration  10: 18404164.068 ops/s
Iteration  11: 18380250.990 ops/s
Iteration  12: 18422632.403 ops/s
Iteration  13: 18462341.956 ops/s
Iteration  14: 18456026.286 ops/s
Iteration  15: 18451830.199 ops/s
Iteration  16: 18445166.711 ops/s
Iteration  17: 18450348.120 ops/s
Iteration  18: 18463618.932 ops/s
Iteration  19: 18396336.632 ops/s
Iteration  20: 18392531.837 ops/s
Iteration  21: 18404573.687 ops/s
Iteration  22: 18390459.202 ops/s
Iteration  23: 18421920.508 ops/s
Iteration  24: 18426153.385 ops/s
Iteration  25: 18462189.491 ops/s
Iteration  26: 18383173.349 ops/s
Iteration  27: 18407210.607 ops/s
Iteration  28: 18395682.544 ops/s
Iteration  29: 18453594.689 ops/s
Iteration  30: 18463072.922 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_takeWhile":
  18420859.571 ±(99.9%) 19419.387 ops/s [Average]
  (min, avg, max) = (18380250.990, 18420859.571, 18463618.932), stdev = 29066.026
  CI (99.9%): [18401440.184, 18440278.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_takeWhile  thrpt   30  18420859.571 ± 19419.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712384.839 ops/s
# Warmup Iteration   2: 751307.210 ops/s
# Warmup Iteration   3: 1005487.598 ops/s
# Warmup Iteration   4: 1001229.105 ops/s
# Warmup Iteration   5: 994079.729 ops/s
# Warmup Iteration   6: 1004525.459 ops/s
# Warmup Iteration   7: 1003668.210 ops/s
# Warmup Iteration   8: 1001868.318 ops/s
# Warmup Iteration   9: 1002164.113 ops/s
# Warmup Iteration  10: 1005070.348 ops/s
# Warmup Iteration  11: 873050.876 ops/s
# Warmup Iteration  12: 980896.649 ops/s
# Warmup Iteration  13: 1005651.065 ops/s
# Warmup Iteration  14: 1005436.757 ops/s
# Warmup Iteration  15: 1004731.962 ops/s
# Warmup Iteration  16: 1005808.155 ops/s
# Warmup Iteration  17: 1065588.572 ops/s
# Warmup Iteration  18: 1064763.466 ops/s
# Warmup Iteration  19: 1060151.583 ops/s
# Warmup Iteration  20: 1065868.681 ops/s
# Warmup Iteration  21: 1067234.521 ops/s
# Warmup Iteration  22: 1064423.836 ops/s
# Warmup Iteration  23: 1065889.263 ops/s
# Warmup Iteration  24: 1065362.861 ops/s
# Warmup Iteration  25: 1067825.690 ops/s
# Warmup Iteration  26: 1064075.077 ops/s
# Warmup Iteration  27: 1066162.540 ops/s
# Warmup Iteration  28: 1066732.808 ops/s
# Warmup Iteration  29: 1062958.496 ops/s
# Warmup Iteration  30: 1063433.121 ops/s
Iteration   1: 1062498.819 ops/s
Iteration   2: 1064645.425 ops/s
Iteration   3: 1060453.396 ops/s
Iteration   4: 1067152.826 ops/s
Iteration   5: 1066054.039 ops/s
Iteration   6: 1064597.090 ops/s
Iteration   7: 1066555.892 ops/s
Iteration   8: 1067083.423 ops/s
Iteration   9: 1066858.569 ops/s
Iteration  10: 1065986.404 ops/s
Iteration  11: 1059269.830 ops/s
Iteration  12: 1063225.514 ops/s
Iteration  13: 1065567.110 ops/s
Iteration  14: 1063267.243 ops/s
Iteration  15: 1063190.055 ops/s
Iteration  16: 1067852.239 ops/s
Iteration  17: 1064722.677 ops/s
Iteration  18: 1067902.252 ops/s
Iteration  19: 1066033.279 ops/s
Iteration  20: 1065616.674 ops/s
Iteration  21: 1065751.391 ops/s
Iteration  22: 1064537.363 ops/s
Iteration  23: 1063498.973 ops/s
Iteration  24: 1067600.414 ops/s
Iteration  25: 1067261.508 ops/s
Iteration  26: 1066065.546 ops/s
Iteration  27: 1067023.429 ops/s
Iteration  28: 1064375.198 ops/s
Iteration  29: 1067424.164 ops/s
Iteration  30: 1067119.353 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_take_throws":
  1065306.337 ±(99.9%) 1430.244 ops/s [Average]
  (min, avg, max) = (1059269.830, 1065306.337, 1067902.252), stdev = 2140.722
  CI (99.9%): [1063876.093, 1066736.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_take_throws  thrpt   30  1065306.337 ± 1430.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7225459.151 ops/s
# Warmup Iteration   2: 14947653.847 ops/s
# Warmup Iteration   3: 13068342.337 ops/s
# Warmup Iteration   4: 15419194.908 ops/s
# Warmup Iteration   5: 15398040.982 ops/s
# Warmup Iteration   6: 15352933.410 ops/s
# Warmup Iteration   7: 15403021.831 ops/s
# Warmup Iteration   8: 15384911.705 ops/s
# Warmup Iteration   9: 15413493.562 ops/s
# Warmup Iteration  10: 15385972.867 ops/s
# Warmup Iteration  11: 15394077.142 ops/s
# Warmup Iteration  12: 15357216.559 ops/s
# Warmup Iteration  13: 15411161.422 ops/s
# Warmup Iteration  14: 15397096.505 ops/s
# Warmup Iteration  15: 15409428.569 ops/s
# Warmup Iteration  16: 15357757.194 ops/s
# Warmup Iteration  17: 15413827.262 ops/s
# Warmup Iteration  18: 15421451.159 ops/s
# Warmup Iteration  19: 15428243.670 ops/s
# Warmup Iteration  20: 15425990.778 ops/s
# Warmup Iteration  21: 15383186.192 ops/s
# Warmup Iteration  22: 15416135.384 ops/s
# Warmup Iteration  23: 15424235.192 ops/s
# Warmup Iteration  24: 15421812.048 ops/s
# Warmup Iteration  25: 15398290.919 ops/s
# Warmup Iteration  26: 15412053.397 ops/s
# Warmup Iteration  27: 15416649.277 ops/s
# Warmup Iteration  28: 15398453.257 ops/s
# Warmup Iteration  29: 15383150.262 ops/s
# Warmup Iteration  30: 15386763.830 ops/s
Iteration   1: 15419118.333 ops/s
Iteration   2: 15426773.361 ops/s
Iteration   3: 15419662.346 ops/s
Iteration   4: 15421910.285 ops/s
Iteration   5: 15391557.235 ops/s
Iteration   6: 15426979.983 ops/s
Iteration   7: 15442561.867 ops/s
Iteration   8: 15379926.499 ops/s
Iteration   9: 15431423.546 ops/s
Iteration  10: 15439129.403 ops/s
Iteration  11: 15422006.974 ops/s
Iteration  12: 15451060.467 ops/s
Iteration  13: 15390889.505 ops/s
Iteration  14: 15398102.607 ops/s
Iteration  15: 15418653.273 ops/s
Iteration  16: 15401713.970 ops/s
Iteration  17: 15448437.729 ops/s
Iteration  18: 15415976.051 ops/s
Iteration  19: 15400266.053 ops/s
Iteration  20: 15413233.778 ops/s
Iteration  21: 15353072.759 ops/s
Iteration  22: 15411000.796 ops/s
Iteration  23: 15416304.963 ops/s
Iteration  24: 15406408.775 ops/s
Iteration  25: 15447010.465 ops/s
Iteration  26: 15413467.399 ops/s
Iteration  27: 15404006.775 ops/s
Iteration  28: 15467850.463 ops/s
Iteration  29: 15363529.701 ops/s
Iteration  30: 15401100.286 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_tap":
  15414771.188 ±(99.9%) 16743.628 ops/s [Average]
  (min, avg, max) = (15353072.759, 15414771.188, 15467850.463), stdev = 25061.075
  CI (99.9%): [15398027.561, 15431514.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_tap  thrpt   30  15414771.188 ± 16743.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2603048.120 ops/s
# Warmup Iteration   2: 6096838.420 ops/s
# Warmup Iteration   3: 5120927.371 ops/s
# Warmup Iteration   4: 6172488.350 ops/s
# Warmup Iteration   5: 6176724.033 ops/s
# Warmup Iteration   6: 6174931.492 ops/s
# Warmup Iteration   7: 6199528.363 ops/s
# Warmup Iteration   8: 6200673.063 ops/s
# Warmup Iteration   9: 6188457.854 ops/s
# Warmup Iteration  10: 6178995.385 ops/s
# Warmup Iteration  11: 6153709.416 ops/s
# Warmup Iteration  12: 6192833.431 ops/s
# Warmup Iteration  13: 6187991.758 ops/s
# Warmup Iteration  14: 6192172.622 ops/s
# Warmup Iteration  15: 6005137.794 ops/s
# Warmup Iteration  16: 6191974.474 ops/s
# Warmup Iteration  17: 6173870.361 ops/s
# Warmup Iteration  18: 6188635.317 ops/s
# Warmup Iteration  19: 6190121.093 ops/s
# Warmup Iteration  20: 6191118.623 ops/s
# Warmup Iteration  21: 6183982.575 ops/s
# Warmup Iteration  22: 6184862.567 ops/s
# Warmup Iteration  23: 6173698.764 ops/s
# Warmup Iteration  24: 6169173.716 ops/s
# Warmup Iteration  25: 6182752.079 ops/s
# Warmup Iteration  26: 6182542.943 ops/s
# Warmup Iteration  27: 6186299.631 ops/s
# Warmup Iteration  28: 6182728.207 ops/s
# Warmup Iteration  29: 6164472.034 ops/s
# Warmup Iteration  30: 6199512.173 ops/s
Iteration   1: 6200169.323 ops/s
Iteration   2: 6202369.080 ops/s
Iteration   3: 6173656.039 ops/s
Iteration   4: 6188739.093 ops/s
Iteration   5: 6194605.015 ops/s
Iteration   6: 6207765.550 ops/s
Iteration   7: 6162501.125 ops/s
Iteration   8: 6183565.486 ops/s
Iteration   9: 6185727.442 ops/s
Iteration  10: 6184776.984 ops/s
Iteration  11: 6160794.759 ops/s
Iteration  12: 6185506.705 ops/s
Iteration  13: 6185515.895 ops/s
Iteration  14: 6173683.725 ops/s
Iteration  15: 6208353.612 ops/s
Iteration  16: 6192604.263 ops/s
Iteration  17: 6184189.798 ops/s
Iteration  18: 6136930.053 ops/s
Iteration  19: 6150355.739 ops/s
Iteration  20: 6178639.955 ops/s
Iteration  21: 6179840.438 ops/s
Iteration  22: 6179229.148 ops/s
Iteration  23: 6137676.259 ops/s
Iteration  24: 6197744.453 ops/s
Iteration  25: 6176633.187 ops/s
Iteration  26: 6171321.272 ops/s
Iteration  27: 6193055.748 ops/s
Iteration  28: 6187467.067 ops/s
Iteration  29: 6187122.276 ops/s
Iteration  30: 6203932.172 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_testToString":
  6181815.722 ±(99.9%) 12100.218 ops/s [Average]
  (min, avg, max) = (6136930.053, 6181815.722, 6208353.612), stdev = 18111.037
  CI (99.9%): [6169715.505, 6193915.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_testToString  thrpt   30  6181815.722 ± 12100.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480082.222 ops/s
# Warmup Iteration   2: 8938096.491 ops/s
# Warmup Iteration   3: 8788997.472 ops/s
# Warmup Iteration   4: 7168606.752 ops/s
# Warmup Iteration   5: 8784148.506 ops/s
# Warmup Iteration   6: 8808829.611 ops/s
# Warmup Iteration   7: 8802469.368 ops/s
# Warmup Iteration   8: 8789708.394 ops/s
# Warmup Iteration   9: 8817403.562 ops/s
# Warmup Iteration  10: 8800676.176 ops/s
# Warmup Iteration  11: 8776475.116 ops/s
# Warmup Iteration  12: 8796591.051 ops/s
# Warmup Iteration  13: 8787976.979 ops/s
# Warmup Iteration  14: 8806172.683 ops/s
# Warmup Iteration  15: 8799070.522 ops/s
# Warmup Iteration  16: 8784641.762 ops/s
# Warmup Iteration  17: 8797848.006 ops/s
# Warmup Iteration  18: 8800071.488 ops/s
# Warmup Iteration  19: 8805125.520 ops/s
# Warmup Iteration  20: 8794774.390 ops/s
# Warmup Iteration  21: 8795726.334 ops/s
# Warmup Iteration  22: 8812614.154 ops/s
# Warmup Iteration  23: 8802819.385 ops/s
# Warmup Iteration  24: 8805717.367 ops/s
# Warmup Iteration  25: 8808042.129 ops/s
# Warmup Iteration  26: 8794152.960 ops/s
# Warmup Iteration  27: 8798323.636 ops/s
# Warmup Iteration  28: 8801329.216 ops/s
# Warmup Iteration  29: 8815310.723 ops/s
# Warmup Iteration  30: 8798602.584 ops/s
Iteration   1: 8808220.623 ops/s
Iteration   2: 8807812.069 ops/s
Iteration   3: 8808986.059 ops/s
Iteration   4: 8797066.619 ops/s
Iteration   5: 8806303.923 ops/s
Iteration   6: 8805092.854 ops/s
Iteration   7: 8797836.774 ops/s
Iteration   8: 8784117.284 ops/s
Iteration   9: 8786055.809 ops/s
Iteration  10: 8811190.170 ops/s
Iteration  11: 8816076.105 ops/s
Iteration  12: 8796147.999 ops/s
Iteration  13: 8814440.318 ops/s
Iteration  14: 8803018.181 ops/s
Iteration  15: 8818297.760 ops/s
Iteration  16: 8826154.117 ops/s
Iteration  17: 8802636.810 ops/s
Iteration  18: 8805319.776 ops/s
Iteration  19: 8795953.291 ops/s
Iteration  20: 8779748.814 ops/s
Iteration  21: 8823383.516 ops/s
Iteration  22: 8808492.120 ops/s
Iteration  23: 8804485.612 ops/s
Iteration  24: 8812936.494 ops/s
Iteration  25: 8786894.114 ops/s
Iteration  26: 8791663.749 ops/s
Iteration  27: 8797454.612 ops/s
Iteration  28: 8800091.359 ops/s
Iteration  29: 8812953.210 ops/s
Iteration  30: 8798774.115 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toArray":
  8803586.809 ±(99.9%) 7515.121 ops/s [Average]
  (min, avg, max) = (8779748.814, 8803586.809, 8826154.117), stdev = 11248.280
  CI (99.9%): [8796071.688, 8811101.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toArray  thrpt   30  8803586.809 ± 7515.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27413626.649 ops/s
# Warmup Iteration   2: 50926753.074 ops/s
# Warmup Iteration   3: 47668533.188 ops/s
# Warmup Iteration   4: 53157331.894 ops/s
# Warmup Iteration   5: 53158499.515 ops/s
# Warmup Iteration   6: 53466158.381 ops/s
# Warmup Iteration   7: 53081632.251 ops/s
# Warmup Iteration   8: 53626381.030 ops/s
# Warmup Iteration   9: 53651682.882 ops/s
# Warmup Iteration  10: 53581976.767 ops/s
# Warmup Iteration  11: 53664708.401 ops/s
# Warmup Iteration  12: 53494989.970 ops/s
# Warmup Iteration  13: 53694914.246 ops/s
# Warmup Iteration  14: 53527229.919 ops/s
# Warmup Iteration  15: 53676397.533 ops/s
# Warmup Iteration  16: 53736961.517 ops/s
# Warmup Iteration  17: 53491438.738 ops/s
# Warmup Iteration  18: 53731572.432 ops/s
# Warmup Iteration  19: 53614860.586 ops/s
# Warmup Iteration  20: 53474881.380 ops/s
# Warmup Iteration  21: 53352884.307 ops/s
# Warmup Iteration  22: 53634430.637 ops/s
# Warmup Iteration  23: 53325242.663 ops/s
# Warmup Iteration  24: 53266947.205 ops/s
# Warmup Iteration  25: 53498304.140 ops/s
# Warmup Iteration  26: 53512584.518 ops/s
# Warmup Iteration  27: 53601925.326 ops/s
# Warmup Iteration  28: 53524074.100 ops/s
# Warmup Iteration  29: 53505515.343 ops/s
# Warmup Iteration  30: 53477685.958 ops/s
Iteration   1: 53659334.475 ops/s
Iteration   2: 53449272.152 ops/s
Iteration   3: 53594037.582 ops/s
Iteration   4: 53606546.857 ops/s
Iteration   5: 53757888.050 ops/s
Iteration   6: 53608090.412 ops/s
Iteration   7: 53529553.126 ops/s
Iteration   8: 53717601.464 ops/s
Iteration   9: 53497887.459 ops/s
Iteration  10: 53671344.034 ops/s
Iteration  11: 53409845.578 ops/s
Iteration  12: 53079815.500 ops/s
Iteration  13: 53197256.716 ops/s
Iteration  14: 53309664.266 ops/s
Iteration  15: 53804849.787 ops/s
Iteration  16: 53725218.404 ops/s
Iteration  17: 53573927.499 ops/s
Iteration  18: 53391594.570 ops/s
Iteration  19: 53286515.814 ops/s
Iteration  20: 53465018.338 ops/s
Iteration  21: 53742042.188 ops/s
Iteration  22: 53601277.820 ops/s
Iteration  23: 53664611.347 ops/s
Iteration  24: 53508089.761 ops/s
Iteration  25: 53555924.831 ops/s
Iteration  26: 53396623.154 ops/s
Iteration  27: 53369882.715 ops/s
Iteration  28: 53683689.977 ops/s
Iteration  29: 53718118.046 ops/s
Iteration  30: 53735769.233 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toImmutable":
  53543709.705 ±(99.9%) 119677.005 ops/s [Average]
  (min, avg, max) = (53079815.500, 53543709.705, 53804849.787), stdev = 179126.921
  CI (99.9%): [53424032.700, 53663386.711] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toImmutable  thrpt   30  53543709.705 ± 119677.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3418858.749 ops/s
# Warmup Iteration   2: 7332394.559 ops/s
# Warmup Iteration   3: 6283211.202 ops/s
# Warmup Iteration   4: 7448582.726 ops/s
# Warmup Iteration   5: 7438501.844 ops/s
# Warmup Iteration   6: 7430080.137 ops/s
# Warmup Iteration   7: 7452935.661 ops/s
# Warmup Iteration   8: 7430921.582 ops/s
# Warmup Iteration   9: 7433236.835 ops/s
# Warmup Iteration  10: 7446958.864 ops/s
# Warmup Iteration  11: 7457487.109 ops/s
# Warmup Iteration  12: 7428120.584 ops/s
# Warmup Iteration  13: 7430091.628 ops/s
# Warmup Iteration  14: 7446817.601 ops/s
# Warmup Iteration  15: 7433515.023 ops/s
# Warmup Iteration  16: 7443218.537 ops/s
# Warmup Iteration  17: 7445964.545 ops/s
# Warmup Iteration  18: 7442603.873 ops/s
# Warmup Iteration  19: 7442183.490 ops/s
# Warmup Iteration  20: 7460828.261 ops/s
# Warmup Iteration  21: 7454437.882 ops/s
# Warmup Iteration  22: 7457249.331 ops/s
# Warmup Iteration  23: 7455355.793 ops/s
# Warmup Iteration  24: 7455387.466 ops/s
# Warmup Iteration  25: 7473389.743 ops/s
# Warmup Iteration  26: 7471547.879 ops/s
# Warmup Iteration  27: 7447555.795 ops/s
# Warmup Iteration  28: 7398535.978 ops/s
# Warmup Iteration  29: 7422124.229 ops/s
# Warmup Iteration  30: 7456462.961 ops/s
Iteration   1: 7439764.699 ops/s
Iteration   2: 7455532.186 ops/s
Iteration   3: 7439131.183 ops/s
Iteration   4: 7465465.000 ops/s
Iteration   5: 7466899.528 ops/s
Iteration   6: 7474250.279 ops/s
Iteration   7: 7453601.415 ops/s
Iteration   8: 7460303.709 ops/s
Iteration   9: 7430793.258 ops/s
Iteration  10: 7460998.226 ops/s
Iteration  11: 7417773.216 ops/s
Iteration  12: 7457152.073 ops/s
Iteration  13: 7417273.255 ops/s
Iteration  14: 7454236.039 ops/s
Iteration  15: 7438211.984 ops/s
Iteration  16: 7444101.051 ops/s
Iteration  17: 7413760.111 ops/s
Iteration  18: 7449014.112 ops/s
Iteration  19: 7458870.546 ops/s
Iteration  20: 7467915.489 ops/s
Iteration  21: 7436665.158 ops/s
Iteration  22: 7424237.117 ops/s
Iteration  23: 7444333.048 ops/s
Iteration  24: 7435758.693 ops/s
Iteration  25: 7475939.723 ops/s
Iteration  26: 7453786.763 ops/s
Iteration  27: 7441311.282 ops/s
Iteration  28: 7444517.493 ops/s
Iteration  29: 7439266.680 ops/s
Iteration  30: 7444418.285 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toList":
  7446842.720 ±(99.9%) 10927.822 ops/s [Average]
  (min, avg, max) = (7413760.111, 7446842.720, 7475939.723), stdev = 16356.250
  CI (99.9%): [7435914.898, 7457770.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toList  thrpt   30  7446842.720 ± 10927.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2188189.239 ops/s
# Warmup Iteration   2: 5018851.825 ops/s
# Warmup Iteration   3: 4244731.966 ops/s
# Warmup Iteration   4: 5079502.113 ops/s
# Warmup Iteration   5: 5086882.569 ops/s
# Warmup Iteration   6: 5082340.322 ops/s
# Warmup Iteration   7: 5077986.151 ops/s
# Warmup Iteration   8: 5081332.708 ops/s
# Warmup Iteration   9: 5064330.303 ops/s
# Warmup Iteration  10: 5082532.237 ops/s
# Warmup Iteration  11: 5075249.482 ops/s
# Warmup Iteration  12: 5078569.641 ops/s
# Warmup Iteration  13: 5083056.465 ops/s
# Warmup Iteration  14: 5090123.812 ops/s
# Warmup Iteration  15: 5089231.012 ops/s
# Warmup Iteration  16: 5067248.901 ops/s
# Warmup Iteration  17: 5080607.605 ops/s
# Warmup Iteration  18: 5076667.277 ops/s
# Warmup Iteration  19: 5081799.446 ops/s
# Warmup Iteration  20: 5072180.855 ops/s
# Warmup Iteration  21: 5077318.086 ops/s
# Warmup Iteration  22: 5072176.312 ops/s
# Warmup Iteration  23: 5080131.670 ops/s
# Warmup Iteration  24: 5080503.665 ops/s
# Warmup Iteration  25: 5092213.125 ops/s
# Warmup Iteration  26: 5077842.419 ops/s
# Warmup Iteration  27: 5082563.651 ops/s
# Warmup Iteration  28: 5084904.529 ops/s
# Warmup Iteration  29: 5084754.643 ops/s
# Warmup Iteration  30: 5086889.529 ops/s
Iteration   1: 5079657.398 ops/s
Iteration   2: 5091373.816 ops/s
Iteration   3: 5084099.750 ops/s
Iteration   4: 5096137.815 ops/s
Iteration   5: 5071522.850 ops/s
Iteration   6: 5088155.656 ops/s
Iteration   7: 4752701.481 ops/s
Iteration   8: 4574913.001 ops/s
Iteration   9: 4574864.812 ops/s
Iteration  10: 4801528.281 ops/s
Iteration  11: 5008733.645 ops/s
Iteration  12: 5084060.945 ops/s
Iteration  13: 5082675.208 ops/s
Iteration  14: 5078669.763 ops/s
Iteration  15: 5090416.161 ops/s
Iteration  16: 5097608.015 ops/s
Iteration  17: 5096781.097 ops/s
Iteration  18: 5097318.873 ops/s
Iteration  19: 5098876.094 ops/s
Iteration  20: 5102090.829 ops/s
Iteration  21: 5103145.993 ops/s
Iteration  22: 5094413.550 ops/s
Iteration  23: 5085917.726 ops/s
Iteration  24: 5088308.375 ops/s
Iteration  25: 5067743.866 ops/s
Iteration  26: 5081046.043 ops/s
Iteration  27: 5095424.512 ops/s
Iteration  28: 5091807.131 ops/s
Iteration  29: 5087330.062 ops/s
Iteration  30: 5078650.391 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toMap":
  5030865.771 ±(99.9%) 98586.812 ops/s [Average]
  (min, avg, max) = (4574864.812, 5030865.771, 5103145.993), stdev = 147560.111
  CI (99.9%): [4932278.959, 5129452.584] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toMap  thrpt   30  5030865.771 ± 98586.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1652393.307 ops/s
# Warmup Iteration   2: 2267150.682 ops/s
# Warmup Iteration   3: 2838859.295 ops/s
# Warmup Iteration   4: 2822559.322 ops/s
# Warmup Iteration   5: 2838735.174 ops/s
# Warmup Iteration   6: 2842707.407 ops/s
# Warmup Iteration   7: 2838499.872 ops/s
# Warmup Iteration   8: 2322570.007 ops/s
# Warmup Iteration   9: 2805027.392 ops/s
# Warmup Iteration  10: 2812565.911 ops/s
# Warmup Iteration  11: 2813548.810 ops/s
# Warmup Iteration  12: 2808933.556 ops/s
# Warmup Iteration  13: 2810729.830 ops/s
# Warmup Iteration  14: 2807332.655 ops/s
# Warmup Iteration  15: 2805446.989 ops/s
# Warmup Iteration  16: 2811158.767 ops/s
# Warmup Iteration  17: 2815464.733 ops/s
# Warmup Iteration  18: 2815232.624 ops/s
# Warmup Iteration  19: 2816763.513 ops/s
# Warmup Iteration  20: 2813174.699 ops/s
# Warmup Iteration  21: 2817459.691 ops/s
# Warmup Iteration  22: 2814685.138 ops/s
# Warmup Iteration  23: 2815968.922 ops/s
# Warmup Iteration  24: 2815223.850 ops/s
# Warmup Iteration  25: 2815455.248 ops/s
# Warmup Iteration  26: 2817856.566 ops/s
# Warmup Iteration  27: 2806696.226 ops/s
# Warmup Iteration  28: 2811969.207 ops/s
# Warmup Iteration  29: 2812373.948 ops/s
# Warmup Iteration  30: 2812617.375 ops/s
Iteration   1: 2814762.835 ops/s
Iteration   2: 2815791.576 ops/s
Iteration   3: 2807791.385 ops/s
Iteration   4: 2816950.361 ops/s
Iteration   5: 2812530.990 ops/s
Iteration   6: 2816777.335 ops/s
Iteration   7: 2816191.765 ops/s
Iteration   8: 2813546.064 ops/s
Iteration   9: 2808365.728 ops/s
Iteration  10: 2813884.215 ops/s
Iteration  11: 2815010.142 ops/s
Iteration  12: 2814334.319 ops/s
Iteration  13: 2813840.083 ops/s
Iteration  14: 2817667.239 ops/s
Iteration  15: 2810481.272 ops/s
Iteration  16: 2817770.661 ops/s
Iteration  17: 2818857.307 ops/s
Iteration  18: 2809562.855 ops/s
Iteration  19: 2816010.049 ops/s
Iteration  20: 2806611.124 ops/s
Iteration  21: 2811746.941 ops/s
Iteration  22: 2816930.827 ops/s
Iteration  23: 2810320.283 ops/s
Iteration  24: 2816402.411 ops/s
Iteration  25: 2815280.444 ops/s
Iteration  26: 2808860.777 ops/s
Iteration  27: 2815325.418 ops/s
Iteration  28: 2813576.251 ops/s
Iteration  29: 2815677.111 ops/s
Iteration  30: 2802508.475 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toReversed":
  2813445.541 ±(99.9%) 2570.931 ops/s [Average]
  (min, avg, max) = (2802508.475, 2813445.541, 2818857.307), stdev = 3848.048
  CI (99.9%): [2810874.611, 2816016.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toReversed  thrpt   30  2813445.541 ± 2570.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5669914.143 ops/s
# Warmup Iteration   2: 11853807.551 ops/s
# Warmup Iteration   3: 10056432.871 ops/s
# Warmup Iteration   4: 11668663.789 ops/s
# Warmup Iteration   5: 11655045.547 ops/s
# Warmup Iteration   6: 11677142.390 ops/s
# Warmup Iteration   7: 11709066.442 ops/s
# Warmup Iteration   8: 11733710.274 ops/s
# Warmup Iteration   9: 11687183.115 ops/s
# Warmup Iteration  10: 11668888.683 ops/s
# Warmup Iteration  11: 11718115.536 ops/s
# Warmup Iteration  12: 11721827.261 ops/s
# Warmup Iteration  13: 11675832.286 ops/s
# Warmup Iteration  14: 11703339.103 ops/s
# Warmup Iteration  15: 11725422.323 ops/s
# Warmup Iteration  16: 11742818.758 ops/s
# Warmup Iteration  17: 11783795.351 ops/s
# Warmup Iteration  18: 11780705.245 ops/s
# Warmup Iteration  19: 11786051.170 ops/s
# Warmup Iteration  20: 11784844.769 ops/s
# Warmup Iteration  21: 11787849.117 ops/s
# Warmup Iteration  22: 11788784.666 ops/s
# Warmup Iteration  23: 11779528.080 ops/s
# Warmup Iteration  24: 11788302.343 ops/s
# Warmup Iteration  25: 11807762.261 ops/s
# Warmup Iteration  26: 11760338.104 ops/s
# Warmup Iteration  27: 11777704.584 ops/s
# Warmup Iteration  28: 11784533.176 ops/s
# Warmup Iteration  29: 11785077.679 ops/s
# Warmup Iteration  30: 11826478.630 ops/s
Iteration   1: 11656117.935 ops/s
Iteration   2: 11785110.235 ops/s
Iteration   3: 11758797.994 ops/s
Iteration   4: 11740532.900 ops/s
Iteration   5: 11761166.107 ops/s
Iteration   6: 11742923.322 ops/s
Iteration   7: 11720878.402 ops/s
Iteration   8: 11723083.517 ops/s
Iteration   9: 11756215.476 ops/s
Iteration  10: 11761572.209 ops/s
Iteration  11: 11750011.217 ops/s
Iteration  12: 11794479.196 ops/s
Iteration  13: 11760065.253 ops/s
Iteration  14: 11759461.109 ops/s
Iteration  15: 11836863.109 ops/s
Iteration  16: 11793130.587 ops/s
Iteration  17: 11770087.630 ops/s
Iteration  18: 11795974.460 ops/s
Iteration  19: 11776841.781 ops/s
Iteration  20: 11726832.150 ops/s
Iteration  21: 11767255.258 ops/s
Iteration  22: 11799438.125 ops/s
Iteration  23: 11782905.893 ops/s
Iteration  24: 11750723.018 ops/s
Iteration  25: 11753461.354 ops/s
Iteration  26: 11774688.423 ops/s
Iteration  27: 11711093.780 ops/s
Iteration  28: 11708908.702 ops/s
Iteration  29: 11741088.823 ops/s
Iteration  30: 11812512.464 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSet":
  11759074.014 ±(99.9%) 23750.840 ops/s [Average]
  (min, avg, max) = (11656117.935, 11759074.014, 11836863.109), stdev = 35549.142
  CI (99.9%): [11735323.174, 11782824.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSet  thrpt   30  11759074.014 ± 23750.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3680220.478 ops/s
# Warmup Iteration   2: 9109406.858 ops/s
# Warmup Iteration   3: 9159730.205 ops/s
# Warmup Iteration   4: 7715429.446 ops/s
# Warmup Iteration   5: 9232955.871 ops/s
# Warmup Iteration   6: 9224639.238 ops/s
# Warmup Iteration   7: 9199806.865 ops/s
# Warmup Iteration   8: 9234485.613 ops/s
# Warmup Iteration   9: 9237251.269 ops/s
# Warmup Iteration  10: 9226250.093 ops/s
# Warmup Iteration  11: 9203770.517 ops/s
# Warmup Iteration  12: 9203029.225 ops/s
# Warmup Iteration  13: 9234789.770 ops/s
# Warmup Iteration  14: 9228180.052 ops/s
# Warmup Iteration  15: 9213801.644 ops/s
# Warmup Iteration  16: 9231053.347 ops/s
# Warmup Iteration  17: 9232716.430 ops/s
# Warmup Iteration  18: 9226465.976 ops/s
# Warmup Iteration  19: 9237784.695 ops/s
# Warmup Iteration  20: 9221126.292 ops/s
# Warmup Iteration  21: 9219768.381 ops/s
# Warmup Iteration  22: 9230718.194 ops/s
# Warmup Iteration  23: 9236071.107 ops/s
# Warmup Iteration  24: 9232071.664 ops/s
# Warmup Iteration  25: 9210890.704 ops/s
# Warmup Iteration  26: 9223556.226 ops/s
# Warmup Iteration  27: 9212886.018 ops/s
# Warmup Iteration  28: 9223370.415 ops/s
# Warmup Iteration  29: 9233803.935 ops/s
# Warmup Iteration  30: 9242972.238 ops/s
Iteration   1: 9240061.006 ops/s
Iteration   2: 9225019.808 ops/s
Iteration   3: 9198101.465 ops/s
Iteration   4: 9210079.918 ops/s
Iteration   5: 9208029.834 ops/s
Iteration   6: 9221687.172 ops/s
Iteration   7: 9227254.358 ops/s
Iteration   8: 9225414.122 ops/s
Iteration   9: 9243276.914 ops/s
Iteration  10: 9240254.449 ops/s
Iteration  11: 9228561.014 ops/s
Iteration  12: 9250144.568 ops/s
Iteration  13: 9231381.762 ops/s
Iteration  14: 9208462.574 ops/s
Iteration  15: 9219672.268 ops/s
Iteration  16: 9254104.497 ops/s
Iteration  17: 9205556.745 ops/s
Iteration  18: 9205844.015 ops/s
Iteration  19: 9194648.980 ops/s
Iteration  20: 9183683.508 ops/s
Iteration  21: 9219352.268 ops/s
Iteration  22: 9195275.730 ops/s
Iteration  23: 9217237.423 ops/s
Iteration  24: 9213122.727 ops/s
Iteration  25: 9219135.604 ops/s
Iteration  26: 9229875.230 ops/s
Iteration  27: 9221147.997 ops/s
Iteration  28: 9224127.395 ops/s
Iteration  29: 9236954.755 ops/s
Iteration  30: 9238318.282 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedList":
  9221192.880 ±(99.9%) 11321.776 ops/s [Average]
  (min, avg, max) = (9183683.508, 9221192.880, 9254104.497), stdev = 16945.902
  CI (99.9%): [9209871.104, 9232514.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSortedList  thrpt   30  9221192.880 ± 11321.776  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1952443.169 ops/s
# Warmup Iteration   2: 2805008.451 ops/s
# Warmup Iteration   3: 3385580.729 ops/s
# Warmup Iteration   4: 3363121.846 ops/s
# Warmup Iteration   5: 3376635.473 ops/s
# Warmup Iteration   6: 3383555.974 ops/s
# Warmup Iteration   7: 2996297.559 ops/s
# Warmup Iteration   8: 3207848.773 ops/s
# Warmup Iteration   9: 3375464.097 ops/s
# Warmup Iteration  10: 3372489.824 ops/s
# Warmup Iteration  11: 3373398.406 ops/s
# Warmup Iteration  12: 3362453.702 ops/s
# Warmup Iteration  13: 3376540.189 ops/s
# Warmup Iteration  14: 3374617.788 ops/s
# Warmup Iteration  15: 3374910.819 ops/s
# Warmup Iteration  16: 3376014.462 ops/s
# Warmup Iteration  17: 3346003.416 ops/s
# Warmup Iteration  18: 3346385.474 ops/s
# Warmup Iteration  19: 3351297.996 ops/s
# Warmup Iteration  20: 3356488.208 ops/s
# Warmup Iteration  21: 3354939.824 ops/s
# Warmup Iteration  22: 3353368.912 ops/s
# Warmup Iteration  23: 3348414.469 ops/s
# Warmup Iteration  24: 3353994.747 ops/s
# Warmup Iteration  25: 3355711.178 ops/s
# Warmup Iteration  26: 3359875.285 ops/s
# Warmup Iteration  27: 3354968.883 ops/s
# Warmup Iteration  28: 3360561.783 ops/s
# Warmup Iteration  29: 3351976.502 ops/s
# Warmup Iteration  30: 3343193.435 ops/s
Iteration   1: 3346098.392 ops/s
Iteration   2: 3347742.087 ops/s
Iteration   3: 3346321.798 ops/s
Iteration   4: 3338494.962 ops/s
Iteration   5: 3339411.668 ops/s
Iteration   6: 3346437.859 ops/s
Iteration   7: 3349719.471 ops/s
Iteration   8: 3345730.590 ops/s
Iteration   9: 3342063.343 ops/s
Iteration  10: 3342777.813 ops/s
Iteration  11: 3342797.349 ops/s
Iteration  12: 3359864.565 ops/s
Iteration  13: 3351405.417 ops/s
Iteration  14: 3350041.616 ops/s
Iteration  15: 3355601.015 ops/s
Iteration  16: 3348543.869 ops/s
Iteration  17: 3354941.644 ops/s
Iteration  18: 3357141.108 ops/s
Iteration  19: 3351333.323 ops/s
Iteration  20: 3356430.262 ops/s
Iteration  21: 3348053.893 ops/s
Iteration  22: 3355150.499 ops/s
Iteration  23: 3352138.684 ops/s
Iteration  24: 3357333.797 ops/s
Iteration  25: 3351299.830 ops/s
Iteration  26: 3353796.285 ops/s
Iteration  27: 3348129.310 ops/s
Iteration  28: 3348791.055 ops/s
Iteration  29: 3352471.035 ops/s
Iteration  30: 3345605.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedListBy":
  3349522.253 ±(99.9%) 3629.805 ops/s [Average]
  (min, avg, max) = (3338494.962, 3349522.253, 3359864.565), stdev = 5432.921
  CI (99.9%): [3345892.449, 3353152.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  3349522.253 ± 3629.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2852126.510 ops/s
# Warmup Iteration   2: 6716563.236 ops/s
# Warmup Iteration   3: 5703952.750 ops/s
# Warmup Iteration   4: 6780572.409 ops/s
# Warmup Iteration   5: 6783148.713 ops/s
# Warmup Iteration   6: 6781373.928 ops/s
# Warmup Iteration   7: 6783184.609 ops/s
# Warmup Iteration   8: 6787955.847 ops/s
# Warmup Iteration   9: 6783478.229 ops/s
# Warmup Iteration  10: 6774517.344 ops/s
# Warmup Iteration  11: 6792163.783 ops/s
# Warmup Iteration  12: 6789380.041 ops/s
# Warmup Iteration  13: 6788707.802 ops/s
# Warmup Iteration  14: 6784350.587 ops/s
# Warmup Iteration  15: 6786488.216 ops/s
# Warmup Iteration  16: 6788566.275 ops/s
# Warmup Iteration  17: 6772489.930 ops/s
# Warmup Iteration  18: 6787286.414 ops/s
# Warmup Iteration  19: 6781532.254 ops/s
# Warmup Iteration  20: 6596644.723 ops/s
# Warmup Iteration  21: 6528603.186 ops/s
# Warmup Iteration  22: 6771587.058 ops/s
# Warmup Iteration  23: 6775676.192 ops/s
# Warmup Iteration  24: 6771615.336 ops/s
# Warmup Iteration  25: 6783475.246 ops/s
# Warmup Iteration  26: 6781421.885 ops/s
# Warmup Iteration  27: 6779899.620 ops/s
# Warmup Iteration  28: 6791795.808 ops/s
# Warmup Iteration  29: 6762775.322 ops/s
# Warmup Iteration  30: 6769250.675 ops/s
Iteration   1: 6783454.325 ops/s
Iteration   2: 6782825.715 ops/s
Iteration   3: 6770488.974 ops/s
Iteration   4: 6770189.293 ops/s
Iteration   5: 6791710.073 ops/s
Iteration   6: 6749244.003 ops/s
Iteration   7: 6778579.578 ops/s
Iteration   8: 6793343.200 ops/s
Iteration   9: 6765211.862 ops/s
Iteration  10: 6786067.679 ops/s
Iteration  11: 6786794.586 ops/s
Iteration  12: 6776444.856 ops/s
Iteration  13: 6788966.910 ops/s
Iteration  14: 6759248.134 ops/s
Iteration  15: 6772751.558 ops/s
Iteration  16: 6780527.521 ops/s
Iteration  17: 6721881.662 ops/s
Iteration  18: 6709879.570 ops/s
Iteration  19: 6759596.075 ops/s
Iteration  20: 6781847.884 ops/s
Iteration  21: 6769190.145 ops/s
Iteration  22: 6768818.831 ops/s
Iteration  23: 6761171.636 ops/s
Iteration  24: 6769399.762 ops/s
Iteration  25: 6792907.746 ops/s
Iteration  26: 6775338.448 ops/s
Iteration  27: 6782993.919 ops/s
Iteration  28: 6796139.902 ops/s
Iteration  29: 6765591.024 ops/s
Iteration  30: 6781536.928 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSet":
  6772404.727 ±(99.9%) 12838.315 ops/s [Average]
  (min, avg, max) = (6709879.570, 6772404.727, 6796139.902), stdev = 19215.786
  CI (99.9%): [6759566.412, 6785243.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSortedSet  thrpt   30  6772404.727 ± 12838.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848044.997 ops/s
# Warmup Iteration   2: 1825062.026 ops/s
# Warmup Iteration   3: 1904492.612 ops/s
# Warmup Iteration   4: 1914805.850 ops/s
# Warmup Iteration   5: 1597586.747 ops/s
# Warmup Iteration   6: 1909720.715 ops/s
# Warmup Iteration   7: 1916605.497 ops/s
# Warmup Iteration   8: 1915121.178 ops/s
# Warmup Iteration   9: 1914655.922 ops/s
# Warmup Iteration  10: 1914046.375 ops/s
# Warmup Iteration  11: 1917190.866 ops/s
# Warmup Iteration  12: 1910858.272 ops/s
# Warmup Iteration  13: 1913354.699 ops/s
# Warmup Iteration  14: 1911121.005 ops/s
# Warmup Iteration  15: 1912022.150 ops/s
# Warmup Iteration  16: 1911840.386 ops/s
# Warmup Iteration  17: 1914473.604 ops/s
# Warmup Iteration  18: 1911442.262 ops/s
# Warmup Iteration  19: 1912828.253 ops/s
# Warmup Iteration  20: 1912798.745 ops/s
# Warmup Iteration  21: 1914611.033 ops/s
# Warmup Iteration  22: 1908035.821 ops/s
# Warmup Iteration  23: 1916669.419 ops/s
# Warmup Iteration  24: 1914598.325 ops/s
# Warmup Iteration  25: 1918038.101 ops/s
# Warmup Iteration  26: 1912015.779 ops/s
# Warmup Iteration  27: 1914999.378 ops/s
# Warmup Iteration  28: 1913242.292 ops/s
# Warmup Iteration  29: 1920126.032 ops/s
# Warmup Iteration  30: 1915957.579 ops/s
Iteration   1: 1915401.091 ops/s
Iteration   2: 1919108.961 ops/s
Iteration   3: 1915852.887 ops/s
Iteration   4: 1916170.279 ops/s
Iteration   5: 1913654.418 ops/s
Iteration   6: 1912076.896 ops/s
Iteration   7: 1917710.184 ops/s
Iteration   8: 1919216.255 ops/s
Iteration   9: 1917904.211 ops/s
Iteration  10: 1920093.427 ops/s
Iteration  11: 1917088.032 ops/s
Iteration  12: 1916620.474 ops/s
Iteration  13: 1917891.956 ops/s
Iteration  14: 1918186.934 ops/s
Iteration  15: 1914935.935 ops/s
Iteration  16: 1916315.865 ops/s
Iteration  17: 1917208.647 ops/s
Iteration  18: 1919206.881 ops/s
Iteration  19: 1915796.774 ops/s
Iteration  20: 1917970.243 ops/s
Iteration  21: 1918990.416 ops/s
Iteration  22: 1918892.981 ops/s
Iteration  23: 1914857.143 ops/s
Iteration  24: 1920549.334 ops/s
Iteration  25: 1914734.075 ops/s
Iteration  26: 1917558.509 ops/s
Iteration  27: 1916208.040 ops/s
Iteration  28: 1912829.152 ops/s
Iteration  29: 1916399.519 ops/s
Iteration  30: 1918478.327 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetBy":
  1916930.262 ±(99.9%) 1388.388 ops/s [Average]
  (min, avg, max) = (1912076.896, 1916930.262, 1920549.334), stdev = 2078.074
  CI (99.9%): [1915541.873, 1918318.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1916930.262 ± 1388.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1695454.510 ops/s
# Warmup Iteration   2: 4333052.571 ops/s
# Warmup Iteration   3: 4345153.589 ops/s
# Warmup Iteration   4: 3654950.989 ops/s
# Warmup Iteration   5: 4338520.322 ops/s
# Warmup Iteration   6: 4342872.269 ops/s
# Warmup Iteration   7: 4333755.648 ops/s
# Warmup Iteration   8: 4340161.609 ops/s
# Warmup Iteration   9: 4353166.660 ops/s
# Warmup Iteration  10: 4344795.939 ops/s
# Warmup Iteration  11: 4339841.601 ops/s
# Warmup Iteration  12: 4334939.919 ops/s
# Warmup Iteration  13: 4352181.205 ops/s
# Warmup Iteration  14: 4351181.402 ops/s
# Warmup Iteration  15: 4344951.507 ops/s
# Warmup Iteration  16: 4344030.632 ops/s
# Warmup Iteration  17: 4349494.362 ops/s
# Warmup Iteration  18: 4358913.994 ops/s
# Warmup Iteration  19: 4363456.763 ops/s
# Warmup Iteration  20: 4356334.527 ops/s
# Warmup Iteration  21: 4359859.436 ops/s
# Warmup Iteration  22: 4357283.203 ops/s
# Warmup Iteration  23: 4356439.217 ops/s
# Warmup Iteration  24: 4348598.330 ops/s
# Warmup Iteration  25: 4357958.227 ops/s
# Warmup Iteration  26: 4357896.619 ops/s
# Warmup Iteration  27: 4358506.634 ops/s
# Warmup Iteration  28: 4359562.734 ops/s
# Warmup Iteration  29: 4352128.150 ops/s
# Warmup Iteration  30: 4352844.025 ops/s
Iteration   1: 4357960.639 ops/s
Iteration   2: 4352436.169 ops/s
Iteration   3: 4361923.936 ops/s
Iteration   4: 4356562.893 ops/s
Iteration   5: 4359744.380 ops/s
Iteration   6: 4358688.563 ops/s
Iteration   7: 4359358.705 ops/s
Iteration   8: 4356752.964 ops/s
Iteration   9: 4360328.047 ops/s
Iteration  10: 4360271.027 ops/s
Iteration  11: 4355731.369 ops/s
Iteration  12: 4363102.692 ops/s
Iteration  13: 4363156.026 ops/s
Iteration  14: 4363803.439 ops/s
Iteration  15: 4364089.718 ops/s
Iteration  16: 4361698.501 ops/s
Iteration  17: 4364430.426 ops/s
Iteration  18: 4351999.499 ops/s
Iteration  19: 4360200.845 ops/s
Iteration  20: 4358189.759 ops/s
Iteration  21: 4359854.563 ops/s
Iteration  22: 4362904.930 ops/s
Iteration  23: 4348236.382 ops/s
Iteration  24: 4364206.974 ops/s
Iteration  25: 4360545.546 ops/s
Iteration  26: 4360986.680 ops/s
Iteration  27: 4357950.602 ops/s
Iteration  28: 4356535.894 ops/s
Iteration  29: 4353384.020 ops/s
Iteration  30: 4359342.103 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toSortedSetWithComparator":
  4359145.910 ±(99.9%) 2640.520 ops/s [Average]
  (min, avg, max) = (4348236.382, 4359145.910, 4364430.426), stdev = 3952.206
  CI (99.9%): [4356505.390, 4361786.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  4359145.910 ± 2640.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4159944.934 ops/s
# Warmup Iteration   2: 10075880.522 ops/s
# Warmup Iteration   3: 8493642.849 ops/s
# Warmup Iteration   4: 10199195.651 ops/s
# Warmup Iteration   5: 10099461.752 ops/s
# Warmup Iteration   6: 10204687.129 ops/s
# Warmup Iteration   7: 10207419.043 ops/s
# Warmup Iteration   8: 10203019.681 ops/s
# Warmup Iteration   9: 10211375.031 ops/s
# Warmup Iteration  10: 10209224.737 ops/s
# Warmup Iteration  11: 10138677.355 ops/s
# Warmup Iteration  12: 10190692.535 ops/s
# Warmup Iteration  13: 10215572.593 ops/s
# Warmup Iteration  14: 10209637.541 ops/s
# Warmup Iteration  15: 10217729.516 ops/s
# Warmup Iteration  16: 10201934.101 ops/s
# Warmup Iteration  17: 10186287.906 ops/s
# Warmup Iteration  18: 10167792.934 ops/s
# Warmup Iteration  19: 10233623.506 ops/s
# Warmup Iteration  20: 10228482.508 ops/s
# Warmup Iteration  21: 10219050.504 ops/s
# Warmup Iteration  22: 10220040.482 ops/s
# Warmup Iteration  23: 9828009.974 ops/s
# Warmup Iteration  24: 9771654.782 ops/s
# Warmup Iteration  25: 9913957.576 ops/s
# Warmup Iteration  26: 9878772.034 ops/s
# Warmup Iteration  27: 9880608.659 ops/s
# Warmup Iteration  28: 9776113.839 ops/s
# Warmup Iteration  29: 9820159.067 ops/s
# Warmup Iteration  30: 9913392.737 ops/s
Iteration   1: 9623414.870 ops/s
Iteration   2: 9690442.403 ops/s
Iteration   3: 9787847.404 ops/s
Iteration   4: 9768431.039 ops/s
Iteration   5: 9972751.145 ops/s
Iteration   6: 9631901.006 ops/s
Iteration   7: 9914630.655 ops/s
Iteration   8: 9807834.676 ops/s
Iteration   9: 9874412.583 ops/s
Iteration  10: 9949510.846 ops/s
Iteration  11: 9918238.917 ops/s
Iteration  12: 9861868.448 ops/s
Iteration  13: 9897597.680 ops/s
Iteration  14: 9909313.684 ops/s
Iteration  15: 9725813.452 ops/s
Iteration  16: 9878802.415 ops/s
Iteration  17: 9910431.744 ops/s
Iteration  18: 9928763.326 ops/s
Iteration  19: 9930140.751 ops/s
Iteration  20: 9900152.253 ops/s
Iteration  21: 9729312.660 ops/s
Iteration  22: 9845629.846 ops/s
Iteration  23: 9809837.212 ops/s
Iteration  24: 9910688.923 ops/s
Iteration  25: 9935335.704 ops/s
Iteration  26: 9956793.563 ops/s
Iteration  27: 9817503.620 ops/s
Iteration  28: 9891994.697 ops/s
Iteration  29: 9802931.591 ops/s
Iteration  30: 9975852.457 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_toStack":
  9851939.319 ±(99.9%) 64628.395 ops/s [Average]
  (min, avg, max) = (9623414.870, 9851939.319, 9975852.457), stdev = 96732.746
  CI (99.9%): [9787310.925, 9916567.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_toStack  thrpt   30  9851939.319 ± 64628.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481609.185 ops/s
# Warmup Iteration   2: 1024121.608 ops/s
# Warmup Iteration   3: 1097693.662 ops/s
# Warmup Iteration   4: 1107802.611 ops/s
# Warmup Iteration   5: 918192.601 ops/s
# Warmup Iteration   6: 1102022.895 ops/s
# Warmup Iteration   7: 1108570.669 ops/s
# Warmup Iteration   8: 1106608.926 ops/s
# Warmup Iteration   9: 1108458.344 ops/s
# Warmup Iteration  10: 1108462.820 ops/s
# Warmup Iteration  11: 1109145.528 ops/s
# Warmup Iteration  12: 1096766.268 ops/s
# Warmup Iteration  13: 1096527.104 ops/s
# Warmup Iteration  14: 1093201.633 ops/s
# Warmup Iteration  15: 1107876.313 ops/s
# Warmup Iteration  16: 1095034.323 ops/s
# Warmup Iteration  17: 1101015.817 ops/s
# Warmup Iteration  18: 1102038.529 ops/s
# Warmup Iteration  19: 1091843.202 ops/s
# Warmup Iteration  20: 1102679.346 ops/s
# Warmup Iteration  21: 1113774.645 ops/s
# Warmup Iteration  22: 1110064.224 ops/s
# Warmup Iteration  23: 1109578.411 ops/s
# Warmup Iteration  24: 1099854.860 ops/s
# Warmup Iteration  25: 1113285.135 ops/s
# Warmup Iteration  26: 1116468.700 ops/s
# Warmup Iteration  27: 1106298.462 ops/s
# Warmup Iteration  28: 1103344.723 ops/s
# Warmup Iteration  29: 1103378.252 ops/s
# Warmup Iteration  30: 1096752.666 ops/s
Iteration   1: 1113530.679 ops/s
Iteration   2: 1094656.854 ops/s
Iteration   3: 1114296.231 ops/s
Iteration   4: 1119465.179 ops/s
Iteration   5: 1096819.273 ops/s
Iteration   6: 1104177.261 ops/s
Iteration   7: 1098824.524 ops/s
Iteration   8: 1099169.096 ops/s
Iteration   9: 1105838.736 ops/s
Iteration  10: 1100940.690 ops/s
Iteration  11: 1105878.851 ops/s
Iteration  12: 1115678.691 ops/s
Iteration  13: 1095262.358 ops/s
Iteration  14: 1111274.798 ops/s
Iteration  15: 1104490.512 ops/s
Iteration  16: 1109134.686 ops/s
Iteration  17: 1104473.924 ops/s
Iteration  18: 1105435.622 ops/s
Iteration  19: 1092532.983 ops/s
Iteration  20: 1104562.888 ops/s
Iteration  21: 1111898.085 ops/s
Iteration  22: 1109941.375 ops/s
Iteration  23: 1106055.615 ops/s
Iteration  24: 1094809.518 ops/s
Iteration  25: 1100941.637 ops/s
Iteration  26: 1107797.083 ops/s
Iteration  27: 1111064.320 ops/s
Iteration  28: 1105888.670 ops/s
Iteration  29: 1100337.615 ops/s
Iteration  30: 1098897.242 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zip":
  1104802.500 ±(99.9%) 4560.829 ops/s [Average]
  (min, avg, max) = (1092532.983, 1104802.500, 1119465.179), stdev = 6826.434
  CI (99.9%): [1100241.671, 1109363.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableArrayListTest._Benchmark.benchmark_zip  thrpt   30  1104802.500 ± 4560.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1283927.451 ops/s
# Warmup Iteration   2: 2970040.298 ops/s
# Warmup Iteration   3: 3046902.787 ops/s
# Warmup Iteration   4: 2749979.998 ops/s
# Warmup Iteration   5: 2865805.554 ops/s
# Warmup Iteration   6: 3053380.505 ops/s
# Warmup Iteration   7: 3091451.305 ops/s
# Warmup Iteration   8: 3063753.479 ops/s
# Warmup Iteration   9: 3104545.987 ops/s
# Warmup Iteration  10: 3058867.015 ops/s
# Warmup Iteration  11: 3074126.223 ops/s
# Warmup Iteration  12: 3056318.904 ops/s
# Warmup Iteration  13: 3066095.899 ops/s
# Warmup Iteration  14: 3069479.804 ops/s
# Warmup Iteration  15: 3100559.050 ops/s
# Warmup Iteration  16: 3069008.958 ops/s
# Warmup Iteration  17: 3072532.481 ops/s
# Warmup Iteration  18: 3103423.759 ops/s
# Warmup Iteration  19: 3053820.311 ops/s
# Warmup Iteration  20: 3067590.290 ops/s
# Warmup Iteration  21: 3057445.975 ops/s
# Warmup Iteration  22: 3075942.549 ops/s
# Warmup Iteration  23: 3061027.088 ops/s
# Warmup Iteration  24: 3051943.737 ops/s
# Warmup Iteration  25: 3087506.319 ops/s
# Warmup Iteration  26: 3072347.976 ops/s
# Warmup Iteration  27: 3061833.437 ops/s
# Warmup Iteration  28: 3065472.036 ops/s
# Warmup Iteration  29: 3072830.619 ops/s
# Warmup Iteration  30: 3070522.235 ops/s
Iteration   1: 3087799.163 ops/s
Iteration   2: 3057103.250 ops/s
Iteration   3: 3067696.365 ops/s
Iteration   4: 3074588.320 ops/s
Iteration   5: 3094186.014 ops/s
Iteration   6: 3087313.634 ops/s
Iteration   7: 3084050.180 ops/s
Iteration   8: 3079395.385 ops/s
Iteration   9: 3102233.949 ops/s
Iteration  10: 3091874.665 ops/s
Iteration  11: 3107248.392 ops/s
Iteration  12: 3124650.520 ops/s
Iteration  13: 3065778.783 ops/s
Iteration  14: 3062469.142 ops/s
Iteration  15: 3080620.781 ops/s
Iteration  16: 3057795.161 ops/s
Iteration  17: 3100975.861 ops/s
Iteration  18: 3086569.125 ops/s
Iteration  19: 3088943.449 ops/s
Iteration  20: 3083355.066 ops/s
Iteration  21: 3070709.763 ops/s
Iteration  22: 3100166.761 ops/s
Iteration  23: 3075223.649 ops/s
Iteration  24: 3116386.121 ops/s
Iteration  25: 3104689.492 ops/s
Iteration  26: 3084256.705 ops/s
Iteration  27: 3062303.527 ops/s
Iteration  28: 3074397.633 ops/s
Iteration  29: 3114154.553 ops/s
Iteration  30: 3103517.580 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableArrayListTest._Benchmark.benchmark_zipWithIndex":
  3086348.433 ±(99.9%) 11970.031 ops/s [Average]
  (min, avg, max) = (3057103.250, 3086348.433, 3124650.520), stdev = 17916.180
  CI (99.9%): [3074378.402, 3098318.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableArrayListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  3086348.433 ± 11970.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604395.112 ops/s
# Warmup Iteration   2: 726930.039 ops/s
# Warmup Iteration   3: 923684.577 ops/s
# Warmup Iteration   4: 914523.934 ops/s
# Warmup Iteration   5: 920690.683 ops/s
# Warmup Iteration   6: 919459.627 ops/s
# Warmup Iteration   7: 921564.921 ops/s
# Warmup Iteration   8: 930855.421 ops/s
# Warmup Iteration   9: 774841.295 ops/s
# Warmup Iteration  10: 913877.212 ops/s
# Warmup Iteration  11: 907677.273 ops/s
# Warmup Iteration  12: 927992.435 ops/s
# Warmup Iteration  13: 928168.506 ops/s
# Warmup Iteration  14: 929817.505 ops/s
# Warmup Iteration  15: 926139.650 ops/s
# Warmup Iteration  16: 923449.771 ops/s
# Warmup Iteration  17: 972601.798 ops/s
# Warmup Iteration  18: 979285.176 ops/s
# Warmup Iteration  19: 973875.682 ops/s
# Warmup Iteration  20: 980052.933 ops/s
# Warmup Iteration  21: 976997.773 ops/s
# Warmup Iteration  22: 967632.220 ops/s
# Warmup Iteration  23: 976184.858 ops/s
# Warmup Iteration  24: 986945.476 ops/s
# Warmup Iteration  25: 976757.130 ops/s
# Warmup Iteration  26: 975484.856 ops/s
# Warmup Iteration  27: 978626.268 ops/s
# Warmup Iteration  28: 976650.009 ops/s
# Warmup Iteration  29: 976286.417 ops/s
# Warmup Iteration  30: 978389.194 ops/s
Iteration   1: 978443.817 ops/s
Iteration   2: 971272.999 ops/s
Iteration   3: 984600.057 ops/s
Iteration   4: 976487.119 ops/s
Iteration   5: 978469.448 ops/s
Iteration   6: 975581.581 ops/s
Iteration   7: 974719.608 ops/s
Iteration   8: 973103.733 ops/s
Iteration   9: 983326.252 ops/s
Iteration  10: 976907.098 ops/s
Iteration  11: 967766.715 ops/s
Iteration  12: 986715.770 ops/s
Iteration  13: 985425.858 ops/s
Iteration  14: 967455.591 ops/s
Iteration  15: 981018.270 ops/s
Iteration  16: 956422.019 ops/s
Iteration  17: 977052.681 ops/s
Iteration  18: 975517.855 ops/s
Iteration  19: 990565.593 ops/s
Iteration  20: 964763.820 ops/s
Iteration  21: 970250.498 ops/s
Iteration  22: 967958.103 ops/s
Iteration  23: 979043.665 ops/s
Iteration  24: 969035.214 ops/s
Iteration  25: 964246.155 ops/s
Iteration  26: 959440.181 ops/s
Iteration  27: 970984.124 ops/s
Iteration  28: 967170.404 ops/s
Iteration  29: 975033.323 ops/s
Iteration  30: 973524.384 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_add":
  974076.731 ±(99.9%) 5311.837 ops/s [Average]
  (min, avg, max) = (956422.019, 974076.731, 990565.593), stdev = 7950.509
  CI (99.9%): [968764.894, 979388.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_add  thrpt   30  974076.731 ± 5311.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 686445.141 ops/s
# Warmup Iteration   2: 732593.112 ops/s
# Warmup Iteration   3: 930144.363 ops/s
# Warmup Iteration   4: 923236.017 ops/s
# Warmup Iteration   5: 924398.200 ops/s
# Warmup Iteration   6: 919760.643 ops/s
# Warmup Iteration   7: 918100.213 ops/s
# Warmup Iteration   8: 919846.482 ops/s
# Warmup Iteration   9: 935365.791 ops/s
# Warmup Iteration  10: 914562.753 ops/s
# Warmup Iteration  11: 925225.816 ops/s
# Warmup Iteration  12: 815657.712 ops/s
# Warmup Iteration  13: 892682.636 ops/s
# Warmup Iteration  14: 928456.257 ops/s
# Warmup Iteration  15: 928253.063 ops/s
# Warmup Iteration  16: 916661.759 ops/s
# Warmup Iteration  17: 979095.799 ops/s
# Warmup Iteration  18: 972433.887 ops/s
# Warmup Iteration  19: 976456.837 ops/s
# Warmup Iteration  20: 983238.531 ops/s
# Warmup Iteration  21: 972895.422 ops/s
# Warmup Iteration  22: 969153.231 ops/s
# Warmup Iteration  23: 976152.001 ops/s
# Warmup Iteration  24: 984663.004 ops/s
# Warmup Iteration  25: 981719.654 ops/s
# Warmup Iteration  26: 966081.247 ops/s
# Warmup Iteration  27: 973380.319 ops/s
# Warmup Iteration  28: 977035.621 ops/s
# Warmup Iteration  29: 979986.016 ops/s
# Warmup Iteration  30: 980604.009 ops/s
Iteration   1: 978298.796 ops/s
Iteration   2: 984062.004 ops/s
Iteration   3: 982954.961 ops/s
Iteration   4: 986923.363 ops/s
Iteration   5: 994026.711 ops/s
Iteration   6: 971420.752 ops/s
Iteration   7: 971479.111 ops/s
Iteration   8: 982123.897 ops/s
Iteration   9: 970798.535 ops/s
Iteration  10: 976029.608 ops/s
Iteration  11: 974594.987 ops/s
Iteration  12: 978556.809 ops/s
Iteration  13: 975644.448 ops/s
Iteration  14: 968718.507 ops/s
Iteration  15: 976249.113 ops/s
Iteration  16: 973495.409 ops/s
Iteration  17: 975321.972 ops/s
Iteration  18: 982556.084 ops/s
Iteration  19: 971751.805 ops/s
Iteration  20: 978106.635 ops/s
Iteration  21: 987824.437 ops/s
Iteration  22: 962742.069 ops/s
Iteration  23: 979089.254 ops/s
Iteration  24: 965424.270 ops/s
Iteration  25: 962308.114 ops/s
Iteration  26: 978532.293 ops/s
Iteration  27: 964476.153 ops/s
Iteration  28: 980313.629 ops/s
Iteration  29: 973569.792 ops/s
Iteration  30: 985633.923 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAll":
  976434.248 ±(99.9%) 5082.366 ops/s [Average]
  (min, avg, max) = (962308.114, 976434.248, 994026.711), stdev = 7607.047
  CI (99.9%): [971351.882, 981516.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_addAll  thrpt   30  976434.248 ± 5082.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696328.525 ops/s
# Warmup Iteration   2: 730524.678 ops/s
# Warmup Iteration   3: 951394.414 ops/s
# Warmup Iteration   4: 954557.676 ops/s
# Warmup Iteration   5: 958001.729 ops/s
# Warmup Iteration   6: 946968.190 ops/s
# Warmup Iteration   7: 946136.926 ops/s
# Warmup Iteration   8: 949107.710 ops/s
# Warmup Iteration   9: 953380.874 ops/s
# Warmup Iteration  10: 950554.816 ops/s
# Warmup Iteration  11: 954884.066 ops/s
# Warmup Iteration  12: 811059.632 ops/s
# Warmup Iteration  13: 945312.849 ops/s
# Warmup Iteration  14: 946010.881 ops/s
# Warmup Iteration  15: 947034.983 ops/s
# Warmup Iteration  16: 948747.537 ops/s
# Warmup Iteration  17: 1024001.485 ops/s
# Warmup Iteration  18: 1018578.424 ops/s
# Warmup Iteration  19: 1034137.225 ops/s
# Warmup Iteration  20: 1026585.289 ops/s
# Warmup Iteration  21: 1019515.035 ops/s
# Warmup Iteration  22: 1026763.455 ops/s
# Warmup Iteration  23: 1022289.561 ops/s
# Warmup Iteration  24: 1030139.466 ops/s
# Warmup Iteration  25: 1022288.610 ops/s
# Warmup Iteration  26: 1022609.805 ops/s
# Warmup Iteration  27: 1023704.439 ops/s
# Warmup Iteration  28: 1024913.622 ops/s
# Warmup Iteration  29: 1037472.869 ops/s
# Warmup Iteration  30: 1028352.024 ops/s
Iteration   1: 1029267.264 ops/s
Iteration   2: 1020712.358 ops/s
Iteration   3: 1020763.588 ops/s
Iteration   4: 1026104.168 ops/s
Iteration   5: 1013217.286 ops/s
Iteration   6: 1027521.512 ops/s
Iteration   7: 1022293.088 ops/s
Iteration   8: 1029988.794 ops/s
Iteration   9: 1028124.906 ops/s
Iteration  10: 1031593.524 ops/s
Iteration  11: 1029166.900 ops/s
Iteration  12: 1035193.271 ops/s
Iteration  13: 1047347.855 ops/s
Iteration  14: 1018747.311 ops/s
Iteration  15: 1031775.511 ops/s
Iteration  16: 1018072.124 ops/s
Iteration  17: 1034012.662 ops/s
Iteration  18: 1030264.946 ops/s
Iteration  19: 1030149.276 ops/s
Iteration  20: 1025941.412 ops/s
Iteration  21: 1025637.048 ops/s
Iteration  22: 1022358.974 ops/s
Iteration  23: 1033532.936 ops/s
Iteration  24: 1028241.322 ops/s
Iteration  25: 1032178.180 ops/s
Iteration  26: 1029526.763 ops/s
Iteration  27: 1031115.743 ops/s
Iteration  28: 1016476.379 ops/s
Iteration  29: 1024272.799 ops/s
Iteration  30: 1030382.737 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAllAtIndex":
  1027466.021 ±(99.9%) 4466.840 ops/s [Average]
  (min, avg, max) = (1013217.286, 1027466.021, 1047347.855), stdev = 6685.757
  CI (99.9%): [1022999.181, 1031932.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1027466.021 ± 4466.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716277.056 ops/s
# Warmup Iteration   2: 744144.721 ops/s
# Warmup Iteration   3: 967859.721 ops/s
# Warmup Iteration   4: 964400.846 ops/s
# Warmup Iteration   5: 968327.479 ops/s
# Warmup Iteration   6: 966284.469 ops/s
# Warmup Iteration   7: 968211.972 ops/s
# Warmup Iteration   8: 961512.014 ops/s
# Warmup Iteration   9: 965014.981 ops/s
# Warmup Iteration  10: 962481.520 ops/s
# Warmup Iteration  11: 965014.586 ops/s
# Warmup Iteration  12: 810668.724 ops/s
# Warmup Iteration  13: 971368.239 ops/s
# Warmup Iteration  14: 967361.544 ops/s
# Warmup Iteration  15: 969119.442 ops/s
# Warmup Iteration  16: 962287.509 ops/s
# Warmup Iteration  17: 1029459.514 ops/s
# Warmup Iteration  18: 1023052.625 ops/s
# Warmup Iteration  19: 1024760.440 ops/s
# Warmup Iteration  20: 1026730.412 ops/s
# Warmup Iteration  21: 1037318.251 ops/s
# Warmup Iteration  22: 1036529.293 ops/s
# Warmup Iteration  23: 1034789.133 ops/s
# Warmup Iteration  24: 1029852.534 ops/s
# Warmup Iteration  25: 1031049.055 ops/s
# Warmup Iteration  26: 1023890.040 ops/s
# Warmup Iteration  27: 1033408.302 ops/s
# Warmup Iteration  28: 1027230.398 ops/s
# Warmup Iteration  29: 1032026.164 ops/s
# Warmup Iteration  30: 1032842.643 ops/s
Iteration   1: 1028946.505 ops/s
Iteration   2: 1032485.337 ops/s
Iteration   3: 1035574.630 ops/s
Iteration   4: 1030850.564 ops/s
Iteration   5: 1024051.558 ops/s
Iteration   6: 1038806.632 ops/s
Iteration   7: 1031977.303 ops/s
Iteration   8: 1031632.396 ops/s
Iteration   9: 1027870.968 ops/s
Iteration  10: 1028697.314 ops/s
Iteration  11: 1038642.486 ops/s
Iteration  12: 1039489.536 ops/s
Iteration  13: 1028362.902 ops/s
Iteration  14: 1039303.249 ops/s
Iteration  15: 1033426.920 ops/s
Iteration  16: 1028539.793 ops/s
Iteration  17: 1033633.644 ops/s
Iteration  18: 1038699.561 ops/s
Iteration  19: 1023897.148 ops/s
Iteration  20: 1035553.157 ops/s
Iteration  21: 1033048.228 ops/s
Iteration  22: 1025404.678 ops/s
Iteration  23: 1030618.062 ops/s
Iteration  24: 1036492.718 ops/s
Iteration  25: 1030238.473 ops/s
Iteration  26: 1027328.906 ops/s
Iteration  27: 1031947.478 ops/s
Iteration  28: 1038829.746 ops/s
Iteration  29: 1024801.573 ops/s
Iteration  30: 1034864.723 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_addAtIndex":
  1032133.873 ±(99.9%) 3200.869 ops/s [Average]
  (min, avg, max) = (1023897.148, 1032133.873, 1039489.536), stdev = 4790.910
  CI (99.9%): [1028933.005, 1035334.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1032133.873 ± 3200.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 286684.287 ops/s
# Warmup Iteration   2: 524001.878 ops/s
# Warmup Iteration   3: 611970.327 ops/s
# Warmup Iteration   4: 616615.492 ops/s
# Warmup Iteration   5: 617009.367 ops/s
# Warmup Iteration   6: 503375.081 ops/s
# Warmup Iteration   7: 613650.413 ops/s
# Warmup Iteration   8: 616825.668 ops/s
# Warmup Iteration   9: 612799.515 ops/s
# Warmup Iteration  10: 614150.710 ops/s
# Warmup Iteration  11: 607691.277 ops/s
# Warmup Iteration  12: 616522.047 ops/s
# Warmup Iteration  13: 613599.561 ops/s
# Warmup Iteration  14: 615840.942 ops/s
# Warmup Iteration  15: 620843.713 ops/s
# Warmup Iteration  16: 611083.489 ops/s
# Warmup Iteration  17: 615628.835 ops/s
# Warmup Iteration  18: 618022.914 ops/s
# Warmup Iteration  19: 618689.769 ops/s
# Warmup Iteration  20: 612686.833 ops/s
# Warmup Iteration  21: 620969.050 ops/s
# Warmup Iteration  22: 621437.161 ops/s
# Warmup Iteration  23: 614625.281 ops/s
# Warmup Iteration  24: 617611.356 ops/s
# Warmup Iteration  25: 619981.845 ops/s
# Warmup Iteration  26: 619710.049 ops/s
# Warmup Iteration  27: 616128.172 ops/s
# Warmup Iteration  28: 624912.573 ops/s
# Warmup Iteration  29: 622800.370 ops/s
# Warmup Iteration  30: 620235.586 ops/s
Iteration   1: 612230.829 ops/s
Iteration   2: 625409.315 ops/s
Iteration   3: 611494.772 ops/s
Iteration   4: 613196.739 ops/s
Iteration   5: 624002.363 ops/s
Iteration   6: 612223.814 ops/s
Iteration   7: 624333.146 ops/s
Iteration   8: 617909.477 ops/s
Iteration   9: 617802.980 ops/s
Iteration  10: 615869.233 ops/s
Iteration  11: 618697.657 ops/s
Iteration  12: 619917.295 ops/s
Iteration  13: 616472.754 ops/s
Iteration  14: 620032.207 ops/s
Iteration  15: 609356.619 ops/s
Iteration  16: 624042.157 ops/s
Iteration  17: 623974.303 ops/s
Iteration  18: 615439.182 ops/s
Iteration  19: 612559.122 ops/s
Iteration  20: 620411.130 ops/s
Iteration  21: 614208.194 ops/s
Iteration  22: 615460.952 ops/s
Iteration  23: 617791.116 ops/s
Iteration  24: 618881.807 ops/s
Iteration  25: 606014.509 ops/s
Iteration  26: 622597.923 ops/s
Iteration  27: 624229.184 ops/s
Iteration  28: 618811.312 ops/s
Iteration  29: 616696.066 ops/s
Iteration  30: 619628.821 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByMutating":
  617656.499 ±(99.9%) 3268.082 ops/s [Average]
  (min, avg, max) = (606014.509, 617656.499, 625409.315), stdev = 4891.512
  CI (99.9%): [614388.417, 620924.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  617656.499 ± 3268.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 315878.300 ops/s
# Warmup Iteration   2: 504981.938 ops/s
# Warmup Iteration   3: 609970.296 ops/s
# Warmup Iteration   4: 606785.258 ops/s
# Warmup Iteration   5: 612560.843 ops/s
# Warmup Iteration   6: 556736.328 ops/s
# Warmup Iteration   7: 547947.190 ops/s
# Warmup Iteration   8: 611031.687 ops/s
# Warmup Iteration   9: 609223.424 ops/s
# Warmup Iteration  10: 611270.341 ops/s
# Warmup Iteration  11: 612943.587 ops/s
# Warmup Iteration  12: 611516.487 ops/s
# Warmup Iteration  13: 617223.435 ops/s
# Warmup Iteration  14: 614409.360 ops/s
# Warmup Iteration  15: 609460.694 ops/s
# Warmup Iteration  16: 607636.963 ops/s
# Warmup Iteration  17: 613428.349 ops/s
# Warmup Iteration  18: 607488.559 ops/s
# Warmup Iteration  19: 616062.645 ops/s
# Warmup Iteration  20: 610692.279 ops/s
# Warmup Iteration  21: 612485.757 ops/s
# Warmup Iteration  22: 601412.245 ops/s
# Warmup Iteration  23: 611766.883 ops/s
# Warmup Iteration  24: 614004.727 ops/s
# Warmup Iteration  25: 609997.091 ops/s
# Warmup Iteration  26: 608125.330 ops/s
# Warmup Iteration  27: 610951.546 ops/s
# Warmup Iteration  28: 614049.996 ops/s
# Warmup Iteration  29: 611804.368 ops/s
# Warmup Iteration  30: 610606.102 ops/s
Iteration   1: 611882.682 ops/s
Iteration   2: 607637.766 ops/s
Iteration   3: 608111.651 ops/s
Iteration   4: 613586.091 ops/s
Iteration   5: 618134.916 ops/s
Iteration   6: 602671.210 ops/s
Iteration   7: 617080.677 ops/s
Iteration   8: 612955.205 ops/s
Iteration   9: 607123.458 ops/s
Iteration  10: 606771.672 ops/s
Iteration  11: 603038.830 ops/s
Iteration  12: 605383.507 ops/s
Iteration  13: 614353.952 ops/s
Iteration  14: 611667.649 ops/s
Iteration  15: 613235.198 ops/s
Iteration  16: 605862.774 ops/s
Iteration  17: 608427.349 ops/s
Iteration  18: 607555.893 ops/s
Iteration  19: 606945.592 ops/s
Iteration  20: 610074.975 ops/s
Iteration  21: 615406.610 ops/s
Iteration  22: 604680.736 ops/s
Iteration  23: 611268.456 ops/s
Iteration  24: 612993.829 ops/s
Iteration  25: 612752.555 ops/s
Iteration  26: 611751.412 ops/s
Iteration  27: 615409.297 ops/s
Iteration  28: 609912.205 ops/s
Iteration  29: 609253.080 ops/s
Iteration  30: 607807.560 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  610124.560 ±(99.9%) 2697.637 ops/s [Average]
  (min, avg, max) = (602671.210, 610124.560, 618134.916), stdev = 4037.696
  CI (99.9%): [607426.923, 612822.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  610124.560 ± 2697.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11873744.467 ops/s
# Warmup Iteration   2: 25849925.423 ops/s
# Warmup Iteration   3: 25293619.478 ops/s
# Warmup Iteration   4: 21200574.804 ops/s
# Warmup Iteration   5: 25491834.918 ops/s
# Warmup Iteration   6: 25623093.593 ops/s
# Warmup Iteration   7: 25252275.968 ops/s
# Warmup Iteration   8: 25322867.690 ops/s
# Warmup Iteration   9: 25365767.096 ops/s
# Warmup Iteration  10: 25475301.725 ops/s
# Warmup Iteration  11: 25507234.353 ops/s
# Warmup Iteration  12: 25168651.918 ops/s
# Warmup Iteration  13: 25263872.334 ops/s
# Warmup Iteration  14: 25374625.682 ops/s
# Warmup Iteration  15: 25401684.325 ops/s
# Warmup Iteration  16: 25488390.512 ops/s
# Warmup Iteration  17: 25423207.754 ops/s
# Warmup Iteration  18: 25222238.843 ops/s
# Warmup Iteration  19: 25525271.832 ops/s
# Warmup Iteration  20: 25418289.670 ops/s
# Warmup Iteration  21: 25390365.391 ops/s
# Warmup Iteration  22: 25481196.656 ops/s
# Warmup Iteration  23: 25487947.503 ops/s
# Warmup Iteration  24: 25338568.915 ops/s
# Warmup Iteration  25: 25509934.875 ops/s
# Warmup Iteration  26: 25365701.819 ops/s
# Warmup Iteration  27: 25371878.973 ops/s
# Warmup Iteration  28: 25417872.217 ops/s
# Warmup Iteration  29: 25277529.764 ops/s
# Warmup Iteration  30: 25507420.281 ops/s
Iteration   1: 25310793.396 ops/s
Iteration   2: 25486863.241 ops/s
Iteration   3: 25241092.827 ops/s
Iteration   4: 25469248.738 ops/s
Iteration   5: 25202309.064 ops/s
Iteration   6: 25339785.107 ops/s
Iteration   7: 25223289.305 ops/s
Iteration   8: 25248153.984 ops/s
Iteration   9: 25174730.576 ops/s
Iteration  10: 25379237.422 ops/s
Iteration  11: 25204726.640 ops/s
Iteration  12: 25417874.884 ops/s
Iteration  13: 25154188.592 ops/s
Iteration  14: 25032148.742 ops/s
Iteration  15: 25546733.402 ops/s
Iteration  16: 25154086.324 ops/s
Iteration  17: 25009371.556 ops/s
Iteration  18: 25126025.022 ops/s
Iteration  19: 25434887.105 ops/s
Iteration  20: 25622319.264 ops/s
Iteration  21: 25347923.727 ops/s
Iteration  22: 25293415.897 ops/s
Iteration  23: 25284864.083 ops/s
Iteration  24: 25472255.371 ops/s
Iteration  25: 25477365.990 ops/s
Iteration  26: 25298210.239 ops/s
Iteration  27: 25603352.491 ops/s
Iteration  28: 25227693.359 ops/s
Iteration  29: 25314189.052 ops/s
Iteration  30: 24890020.344 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfy":
  25299571.858 ±(99.9%) 115920.817 ops/s [Average]
  (min, avg, max) = (24890020.344, 25299571.858, 25622319.264), stdev = 173504.835
  CI (99.9%): [25183651.041, 25415492.675] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  25299571.858 ± 115920.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7262746.336 ops/s
# Warmup Iteration   2: 16207051.381 ops/s
# Warmup Iteration   3: 16117903.812 ops/s
# Warmup Iteration   4: 13583380.384 ops/s
# Warmup Iteration   5: 16024391.274 ops/s
# Warmup Iteration   6: 16250831.961 ops/s
# Warmup Iteration   7: 16285452.120 ops/s
# Warmup Iteration   8: 16213922.199 ops/s
# Warmup Iteration   9: 16065591.009 ops/s
# Warmup Iteration  10: 16100900.609 ops/s
# Warmup Iteration  11: 15992749.861 ops/s
# Warmup Iteration  12: 16038048.194 ops/s
# Warmup Iteration  13: 16035997.296 ops/s
# Warmup Iteration  14: 16132617.864 ops/s
# Warmup Iteration  15: 16055640.909 ops/s
# Warmup Iteration  16: 16155098.851 ops/s
# Warmup Iteration  17: 15993987.177 ops/s
# Warmup Iteration  18: 15968393.101 ops/s
# Warmup Iteration  19: 15719668.997 ops/s
# Warmup Iteration  20: 15799080.586 ops/s
# Warmup Iteration  21: 15984635.281 ops/s
# Warmup Iteration  22: 15979709.599 ops/s
# Warmup Iteration  23: 15853832.211 ops/s
# Warmup Iteration  24: 15972926.560 ops/s
# Warmup Iteration  25: 15886982.810 ops/s
# Warmup Iteration  26: 15696405.504 ops/s
# Warmup Iteration  27: 15891257.319 ops/s
# Warmup Iteration  28: 15818563.078 ops/s
# Warmup Iteration  29: 15837216.340 ops/s
# Warmup Iteration  30: 15766089.725 ops/s
Iteration   1: 15654070.076 ops/s
Iteration   2: 15717162.283 ops/s
Iteration   3: 15919032.040 ops/s
Iteration   4: 15886670.177 ops/s
Iteration   5: 16009723.997 ops/s
Iteration   6: 15896055.288 ops/s
Iteration   7: 15878782.054 ops/s
Iteration   8: 15741883.922 ops/s
Iteration   9: 15855508.025 ops/s
Iteration  10: 15861631.566 ops/s
Iteration  11: 15915104.058 ops/s
Iteration  12: 15763051.093 ops/s
Iteration  13: 15925253.436 ops/s
Iteration  14: 16025948.753 ops/s
Iteration  15: 15876724.666 ops/s
Iteration  16: 15896968.728 ops/s
Iteration  17: 16019594.904 ops/s
Iteration  18: 16010060.695 ops/s
Iteration  19: 15864363.810 ops/s
Iteration  20: 15820923.032 ops/s
Iteration  21: 15790366.787 ops/s
Iteration  22: 15981273.130 ops/s
Iteration  23: 15930508.365 ops/s
Iteration  24: 15914605.411 ops/s
Iteration  25: 15729376.448 ops/s
Iteration  26: 15745259.923 ops/s
Iteration  27: 15831063.945 ops/s
Iteration  28: 16029209.758 ops/s
Iteration  29: 15976569.990 ops/s
Iteration  30: 15735279.695 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfyWith":
  15873400.868 ±(99.9%) 69235.439 ops/s [Average]
  (min, avg, max) = (15654070.076, 15873400.868, 16029209.758), stdev = 103628.354
  CI (99.9%): [15804165.429, 15942636.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  15873400.868 ± 69235.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6693652.659 ops/s
# Warmup Iteration   2: 13867922.981 ops/s
# Warmup Iteration   3: 13877575.037 ops/s
# Warmup Iteration   4: 13792901.129 ops/s
# Warmup Iteration   5: 11649960.481 ops/s
# Warmup Iteration   6: 13815941.472 ops/s
# Warmup Iteration   7: 13929001.694 ops/s
# Warmup Iteration   8: 13977586.655 ops/s
# Warmup Iteration   9: 13870209.891 ops/s
# Warmup Iteration  10: 13816554.033 ops/s
# Warmup Iteration  11: 14004116.618 ops/s
# Warmup Iteration  12: 13992936.310 ops/s
# Warmup Iteration  13: 13968158.118 ops/s
# Warmup Iteration  14: 13869828.814 ops/s
# Warmup Iteration  15: 13793047.585 ops/s
# Warmup Iteration  16: 14054598.843 ops/s
# Warmup Iteration  17: 13833035.149 ops/s
# Warmup Iteration  18: 13902868.927 ops/s
# Warmup Iteration  19: 13871903.880 ops/s
# Warmup Iteration  20: 14012781.497 ops/s
# Warmup Iteration  21: 13797396.103 ops/s
# Warmup Iteration  22: 13920032.536 ops/s
# Warmup Iteration  23: 13977949.731 ops/s
# Warmup Iteration  24: 13861565.370 ops/s
# Warmup Iteration  25: 13866103.641 ops/s
# Warmup Iteration  26: 13903585.442 ops/s
# Warmup Iteration  27: 13692163.976 ops/s
# Warmup Iteration  28: 13831228.060 ops/s
# Warmup Iteration  29: 13916043.990 ops/s
# Warmup Iteration  30: 13826857.610 ops/s
Iteration   1: 14064623.347 ops/s
Iteration   2: 13937134.239 ops/s
Iteration   3: 13955502.449 ops/s
Iteration   4: 13892716.259 ops/s
Iteration   5: 13858174.245 ops/s
Iteration   6: 13802357.242 ops/s
Iteration   7: 13680167.901 ops/s
Iteration   8: 13912181.443 ops/s
Iteration   9: 13868231.219 ops/s
Iteration  10: 13819467.640 ops/s
Iteration  11: 14034089.366 ops/s
Iteration  12: 13791348.951 ops/s
Iteration  13: 14081264.857 ops/s
Iteration  14: 13757568.133 ops/s
Iteration  15: 13953383.134 ops/s
Iteration  16: 13892094.898 ops/s
Iteration  17: 14057042.315 ops/s
Iteration  18: 13908989.746 ops/s
Iteration  19: 13882369.808 ops/s
Iteration  20: 13726155.631 ops/s
Iteration  21: 13793953.960 ops/s
Iteration  22: 13753670.140 ops/s
Iteration  23: 13895847.256 ops/s
Iteration  24: 13897773.347 ops/s
Iteration  25: 13991233.670 ops/s
Iteration  26: 13861032.972 ops/s
Iteration  27: 13980890.238 ops/s
Iteration  28: 14111482.419 ops/s
Iteration  29: 13832411.945 ops/s
Iteration  30: 13922730.485 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfy":
  13897196.309 ±(99.9%) 72195.263 ops/s [Average]
  (min, avg, max) = (13680167.901, 13897196.309, 14111482.419), stdev = 108058.480
  CI (99.9%): [13825001.045, 13969391.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  13897196.309 ± 72195.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6219512.411 ops/s
# Warmup Iteration   2: 8181812.137 ops/s
# Warmup Iteration   3: 9554636.353 ops/s
# Warmup Iteration   4: 9417245.061 ops/s
# Warmup Iteration   5: 9488628.083 ops/s
# Warmup Iteration   6: 9475095.447 ops/s
# Warmup Iteration   7: 9459437.408 ops/s
# Warmup Iteration   8: 7982195.099 ops/s
# Warmup Iteration   9: 9467995.126 ops/s
# Warmup Iteration  10: 9437158.836 ops/s
# Warmup Iteration  11: 9548452.337 ops/s
# Warmup Iteration  12: 9566349.174 ops/s
# Warmup Iteration  13: 9498348.403 ops/s
# Warmup Iteration  14: 9523940.209 ops/s
# Warmup Iteration  15: 9478636.771 ops/s
# Warmup Iteration  16: 9515765.515 ops/s
# Warmup Iteration  17: 9553528.048 ops/s
# Warmup Iteration  18: 9341891.800 ops/s
# Warmup Iteration  19: 9420646.877 ops/s
# Warmup Iteration  20: 9367368.858 ops/s
# Warmup Iteration  21: 9501432.372 ops/s
# Warmup Iteration  22: 9454935.903 ops/s
# Warmup Iteration  23: 9501246.764 ops/s
# Warmup Iteration  24: 9487656.785 ops/s
# Warmup Iteration  25: 9469384.046 ops/s
# Warmup Iteration  26: 9465173.434 ops/s
# Warmup Iteration  27: 9382298.399 ops/s
# Warmup Iteration  28: 9465597.777 ops/s
# Warmup Iteration  29: 9442003.881 ops/s
# Warmup Iteration  30: 9356786.565 ops/s
Iteration   1: 9364175.305 ops/s
Iteration   2: 9558949.974 ops/s
Iteration   3: 9709439.533 ops/s
Iteration   4: 9498633.733 ops/s
Iteration   5: 9620537.686 ops/s
Iteration   6: 9634782.680 ops/s
Iteration   7: 9605750.318 ops/s
Iteration   8: 9659778.860 ops/s
Iteration   9: 9410894.613 ops/s
Iteration  10: 9488810.415 ops/s
Iteration  11: 9496969.946 ops/s
Iteration  12: 9505800.144 ops/s
Iteration  13: 9461529.632 ops/s
Iteration  14: 9389756.312 ops/s
Iteration  15: 9605184.290 ops/s
Iteration  16: 9472096.490 ops/s
Iteration  17: 9537048.058 ops/s
Iteration  18: 9312109.929 ops/s
Iteration  19: 9539520.086 ops/s
Iteration  20: 9269959.882 ops/s
Iteration  21: 9490915.663 ops/s
Iteration  22: 9425414.002 ops/s
Iteration  23: 9448506.863 ops/s
Iteration  24: 9443022.599 ops/s
Iteration  25: 9573508.409 ops/s
Iteration  26: 9558434.651 ops/s
Iteration  27: 9409449.108 ops/s
Iteration  28: 9492215.117 ops/s
Iteration  29: 9408089.533 ops/s
Iteration  30: 9465299.818 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfyWith":
  9495219.455 ±(99.9%) 67672.604 ops/s [Average]
  (min, avg, max) = (9269959.882, 9495219.455, 9709439.533), stdev = 101289.176
  CI (99.9%): [9427546.851, 9562892.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  9495219.455 ± 67672.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149732.434 ops/s
# Warmup Iteration   2: 319062.710 ops/s
# Warmup Iteration   3: 353714.443 ops/s
# Warmup Iteration   4: 351154.911 ops/s
# Warmup Iteration   5: 310315.295 ops/s
# Warmup Iteration   6: 336470.945 ops/s
# Warmup Iteration   7: 353011.952 ops/s
# Warmup Iteration   8: 354685.945 ops/s
# Warmup Iteration   9: 346335.143 ops/s
# Warmup Iteration  10: 354005.075 ops/s
# Warmup Iteration  11: 353857.493 ops/s
# Warmup Iteration  12: 354000.119 ops/s
# Warmup Iteration  13: 355226.172 ops/s
# Warmup Iteration  14: 352386.204 ops/s
# Warmup Iteration  15: 351531.425 ops/s
# Warmup Iteration  16: 354485.423 ops/s
# Warmup Iteration  17: 353631.409 ops/s
# Warmup Iteration  18: 353819.897 ops/s
# Warmup Iteration  19: 357546.247 ops/s
# Warmup Iteration  20: 353579.453 ops/s
# Warmup Iteration  21: 353431.622 ops/s
# Warmup Iteration  22: 355101.900 ops/s
# Warmup Iteration  23: 355999.230 ops/s
# Warmup Iteration  24: 354859.470 ops/s
# Warmup Iteration  25: 351753.916 ops/s
# Warmup Iteration  26: 353535.045 ops/s
# Warmup Iteration  27: 354560.711 ops/s
# Warmup Iteration  28: 355741.424 ops/s
# Warmup Iteration  29: 354147.363 ops/s
# Warmup Iteration  30: 354833.384 ops/s
Iteration   1: 352740.458 ops/s
Iteration   2: 352554.366 ops/s
Iteration   3: 356076.709 ops/s
Iteration   4: 350072.223 ops/s
Iteration   5: 356019.703 ops/s
Iteration   6: 353291.388 ops/s
Iteration   7: 349677.303 ops/s
Iteration   8: 353898.118 ops/s
Iteration   9: 352483.191 ops/s
Iteration  10: 354806.796 ops/s
Iteration  11: 356121.532 ops/s
Iteration  12: 352601.745 ops/s
Iteration  13: 352373.340 ops/s
Iteration  14: 357273.644 ops/s
Iteration  15: 357697.419 ops/s
Iteration  16: 357850.881 ops/s
Iteration  17: 353273.316 ops/s
Iteration  18: 350853.230 ops/s
Iteration  19: 353832.273 ops/s
Iteration  20: 353017.707 ops/s
Iteration  21: 352181.752 ops/s
Iteration  22: 352749.792 ops/s
Iteration  23: 351870.742 ops/s
Iteration  24: 353452.676 ops/s
Iteration  25: 352121.751 ops/s
Iteration  26: 354092.306 ops/s
Iteration  27: 356861.772 ops/s
Iteration  28: 349100.569 ops/s
Iteration  29: 355168.037 ops/s
Iteration  30: 357023.144 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_appendString":
  353704.596 ±(99.9%) 1582.534 ops/s [Average]
  (min, avg, max) = (349100.569, 353704.596, 357850.881), stdev = 2368.663
  CI (99.9%): [352122.062, 355287.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_appendString  thrpt   30  353704.596 ± 1582.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1933189.742 ops/s
# Warmup Iteration   2: 4323644.041 ops/s
# Warmup Iteration   3: 4457114.903 ops/s
# Warmup Iteration   4: 4229780.599 ops/s
# Warmup Iteration   5: 3973552.127 ops/s
# Warmup Iteration   6: 4465589.829 ops/s
# Warmup Iteration   7: 4438845.630 ops/s
# Warmup Iteration   8: 4477109.401 ops/s
# Warmup Iteration   9: 4481845.912 ops/s
# Warmup Iteration  10: 4499009.888 ops/s
# Warmup Iteration  11: 4475330.491 ops/s
# Warmup Iteration  12: 4484026.050 ops/s
# Warmup Iteration  13: 4513420.447 ops/s
# Warmup Iteration  14: 4451241.796 ops/s
# Warmup Iteration  15: 4463610.636 ops/s
# Warmup Iteration  16: 4459319.083 ops/s
# Warmup Iteration  17: 4441362.562 ops/s
# Warmup Iteration  18: 4489714.847 ops/s
# Warmup Iteration  19: 4466181.960 ops/s
# Warmup Iteration  20: 4469213.609 ops/s
# Warmup Iteration  21: 4484550.247 ops/s
# Warmup Iteration  22: 4473314.684 ops/s
# Warmup Iteration  23: 4490319.391 ops/s
# Warmup Iteration  24: 4504025.132 ops/s
# Warmup Iteration  25: 4447418.766 ops/s
# Warmup Iteration  26: 4478170.857 ops/s
# Warmup Iteration  27: 4471949.889 ops/s
# Warmup Iteration  28: 4478627.730 ops/s
# Warmup Iteration  29: 4474270.753 ops/s
# Warmup Iteration  30: 4465191.855 ops/s
Iteration   1: 4411033.197 ops/s
Iteration   2: 4432668.899 ops/s
Iteration   3: 4464534.146 ops/s
Iteration   4: 4443561.186 ops/s
Iteration   5: 4508740.687 ops/s
Iteration   6: 4514329.500 ops/s
Iteration   7: 4447808.831 ops/s
Iteration   8: 4460631.178 ops/s
Iteration   9: 4491953.869 ops/s
Iteration  10: 4531282.146 ops/s
Iteration  11: 4528083.426 ops/s
Iteration  12: 4472099.090 ops/s
Iteration  13: 4465302.352 ops/s
Iteration  14: 4466520.879 ops/s
Iteration  15: 4508276.949 ops/s
Iteration  16: 4481123.760 ops/s
Iteration  17: 4427334.936 ops/s
Iteration  18: 4494548.305 ops/s
Iteration  19: 4520010.835 ops/s
Iteration  20: 4468466.239 ops/s
Iteration  21: 4410484.147 ops/s
Iteration  22: 4478172.077 ops/s
Iteration  23: 4424302.531 ops/s
Iteration  24: 4439523.293 ops/s
Iteration  25: 4457303.385 ops/s
Iteration  26: 4482444.154 ops/s
Iteration  27: 4478442.572 ops/s
Iteration  28: 4478589.926 ops/s
Iteration  29: 4482514.462 ops/s
Iteration  30: 4454426.921 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_asReversed":
  4470817.129 ±(99.9%) 21941.334 ops/s [Average]
  (min, avg, max) = (4410484.147, 4470817.129, 4531282.146), stdev = 32840.758
  CI (99.9%): [4448875.795, 4492758.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_asReversed  thrpt   30  4470817.129 ± 21941.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718623.607 ops/s
# Warmup Iteration   2: 761856.708 ops/s
# Warmup Iteration   3: 1009360.128 ops/s
# Warmup Iteration   4: 1011659.948 ops/s
# Warmup Iteration   5: 997162.718 ops/s
# Warmup Iteration   6: 1020626.193 ops/s
# Warmup Iteration   7: 1011472.375 ops/s
# Warmup Iteration   8: 1014567.281 ops/s
# Warmup Iteration   9: 1005779.608 ops/s
# Warmup Iteration  10: 1010380.405 ops/s
# Warmup Iteration  11: 939677.992 ops/s
# Warmup Iteration  12: 911738.945 ops/s
# Warmup Iteration  13: 1004665.846 ops/s
# Warmup Iteration  14: 1012598.457 ops/s
# Warmup Iteration  15: 1019958.941 ops/s
# Warmup Iteration  16: 994370.569 ops/s
# Warmup Iteration  17: 1073700.900 ops/s
# Warmup Iteration  18: 1074056.124 ops/s
# Warmup Iteration  19: 1068970.849 ops/s
# Warmup Iteration  20: 1057392.854 ops/s
# Warmup Iteration  21: 1074425.178 ops/s
# Warmup Iteration  22: 1079891.995 ops/s
# Warmup Iteration  23: 1082165.792 ops/s
# Warmup Iteration  24: 1075220.208 ops/s
# Warmup Iteration  25: 1071968.918 ops/s
# Warmup Iteration  26: 1072015.991 ops/s
# Warmup Iteration  27: 1077535.947 ops/s
# Warmup Iteration  28: 1069816.710 ops/s
# Warmup Iteration  29: 1067972.431 ops/s
# Warmup Iteration  30: 1081213.499 ops/s
Iteration   1: 1067175.403 ops/s
Iteration   2: 1061025.017 ops/s
Iteration   3: 1080818.116 ops/s
Iteration   4: 1071973.868 ops/s
Iteration   5: 1073470.906 ops/s
Iteration   6: 1068715.432 ops/s
Iteration   7: 1080854.443 ops/s
Iteration   8: 1087732.129 ops/s
Iteration   9: 1076513.728 ops/s
Iteration  10: 1088882.662 ops/s
Iteration  11: 1086825.221 ops/s
Iteration  12: 1077728.217 ops/s
Iteration  13: 1080067.544 ops/s
Iteration  14: 1080801.931 ops/s
Iteration  15: 1082928.389 ops/s
Iteration  16: 1078900.701 ops/s
Iteration  17: 1076081.159 ops/s
Iteration  18: 1070080.275 ops/s
Iteration  19: 1071018.447 ops/s
Iteration  20: 1074328.124 ops/s
Iteration  21: 1071257.137 ops/s
Iteration  22: 1075582.614 ops/s
Iteration  23: 1088347.635 ops/s
Iteration  24: 1057445.558 ops/s
Iteration  25: 1060970.451 ops/s
Iteration  26: 1082517.539 ops/s
Iteration  27: 1071269.631 ops/s
Iteration  28: 1069192.698 ops/s
Iteration  29: 1079657.297 ops/s
Iteration  30: 1082990.209 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_castToCollection":
  1075838.416 ±(99.9%) 5443.681 ops/s [Average]
  (min, avg, max) = (1057445.558, 1075838.416, 1088882.662), stdev = 8147.846
  CI (99.9%): [1070394.735, 1081282.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1075838.416 ± 5443.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2497441.163 ops/s
# Warmup Iteration   2: 6723143.443 ops/s
# Warmup Iteration   3: 7087885.233 ops/s
# Warmup Iteration   4: 6798431.138 ops/s
# Warmup Iteration   5: 6427423.160 ops/s
# Warmup Iteration   6: 7180010.443 ops/s
# Warmup Iteration   7: 7198976.984 ops/s
# Warmup Iteration   8: 7159463.456 ops/s
# Warmup Iteration   9: 7292468.815 ops/s
# Warmup Iteration  10: 7205436.755 ops/s
# Warmup Iteration  11: 6992217.720 ops/s
# Warmup Iteration  12: 6895529.983 ops/s
# Warmup Iteration  13: 7195852.740 ops/s
# Warmup Iteration  14: 6600406.267 ops/s
# Warmup Iteration  15: 7019222.529 ops/s
# Warmup Iteration  16: 7179740.303 ops/s
# Warmup Iteration  17: 7168000.316 ops/s
# Warmup Iteration  18: 7200654.794 ops/s
# Warmup Iteration  19: 7141393.415 ops/s
# Warmup Iteration  20: 7196157.201 ops/s
# Warmup Iteration  21: 7081773.066 ops/s
# Warmup Iteration  22: 7118550.890 ops/s
# Warmup Iteration  23: 7172831.857 ops/s
# Warmup Iteration  24: 7136786.945 ops/s
# Warmup Iteration  25: 7166953.188 ops/s
# Warmup Iteration  26: 7156715.382 ops/s
# Warmup Iteration  27: 7088924.357 ops/s
# Warmup Iteration  28: 7167416.331 ops/s
# Warmup Iteration  29: 7206181.572 ops/s
# Warmup Iteration  30: 7209597.530 ops/s
Iteration   1: 7184726.114 ops/s
Iteration   2: 7195932.887 ops/s
Iteration   3: 7093987.750 ops/s
Iteration   4: 7227292.520 ops/s
Iteration   5: 7075385.939 ops/s
Iteration   6: 7001239.450 ops/s
Iteration   7: 7129642.153 ops/s
Iteration   8: 7118739.337 ops/s
Iteration   9: 7154403.298 ops/s
Iteration  10: 7254853.372 ops/s
Iteration  11: 7155763.144 ops/s
Iteration  12: 7250183.614 ops/s
Iteration  13: 7187359.192 ops/s
Iteration  14: 7191988.521 ops/s
Iteration  15: 7234323.799 ops/s
Iteration  16: 7138908.288 ops/s
Iteration  17: 7183404.492 ops/s
Iteration  18: 7181917.424 ops/s
Iteration  19: 7007775.336 ops/s
Iteration  20: 7116611.330 ops/s
Iteration  21: 7153435.738 ops/s
Iteration  22: 7119273.058 ops/s
Iteration  23: 7109462.876 ops/s
Iteration  24: 7275847.707 ops/s
Iteration  25: 7114171.632 ops/s
Iteration  26: 7222697.823 ops/s
Iteration  27: 7149120.025 ops/s
Iteration  28: 7144959.861 ops/s
Iteration  29: 7116920.659 ops/s
Iteration  30: 7206623.781 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_large_size":
  7156565.037 ±(99.9%) 43777.378 ops/s [Average]
  (min, avg, max) = (7001239.450, 7156565.037, 7275847.707), stdev = 65523.924
  CI (99.9%): [7112787.659, 7200342.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  7156565.037 ± 43777.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742507.807 ops/s
# Warmup Iteration   2: 780173.941 ops/s
# Warmup Iteration   3: 994470.601 ops/s
# Warmup Iteration   4: 1001898.395 ops/s
# Warmup Iteration   5: 1005695.643 ops/s
# Warmup Iteration   6: 1009284.918 ops/s
# Warmup Iteration   7: 1008408.659 ops/s
# Warmup Iteration   8: 1008567.254 ops/s
# Warmup Iteration   9: 1001566.763 ops/s
# Warmup Iteration  10: 1004524.939 ops/s
# Warmup Iteration  11: 947983.151 ops/s
# Warmup Iteration  12: 898482.646 ops/s
# Warmup Iteration  13: 990077.973 ops/s
# Warmup Iteration  14: 996229.183 ops/s
# Warmup Iteration  15: 1005533.510 ops/s
# Warmup Iteration  16: 1003524.256 ops/s
# Warmup Iteration  17: 1074624.330 ops/s
# Warmup Iteration  18: 1060046.258 ops/s
# Warmup Iteration  19: 1070738.400 ops/s
# Warmup Iteration  20: 1068417.839 ops/s
# Warmup Iteration  21: 1073090.545 ops/s
# Warmup Iteration  22: 1077830.681 ops/s
# Warmup Iteration  23: 1067107.037 ops/s
# Warmup Iteration  24: 1068880.334 ops/s
# Warmup Iteration  25: 1040811.809 ops/s
# Warmup Iteration  26: 1071656.667 ops/s
# Warmup Iteration  27: 1072448.158 ops/s
# Warmup Iteration  28: 1070611.910 ops/s
# Warmup Iteration  29: 1067710.606 ops/s
# Warmup Iteration  30: 1082442.140 ops/s
Iteration   1: 1064450.010 ops/s
Iteration   2: 1069232.506 ops/s
Iteration   3: 1060871.312 ops/s
Iteration   4: 1084085.779 ops/s
Iteration   5: 1052799.881 ops/s
Iteration   6: 1076962.929 ops/s
Iteration   7: 1060717.398 ops/s
Iteration   8: 1069344.570 ops/s
Iteration   9: 1079040.205 ops/s
Iteration  10: 1083424.131 ops/s
Iteration  11: 1076573.437 ops/s
Iteration  12: 1067221.683 ops/s
Iteration  13: 1062117.632 ops/s
Iteration  14: 1061161.550 ops/s
Iteration  15: 1070844.302 ops/s
Iteration  16: 1062357.380 ops/s
Iteration  17: 1073464.825 ops/s
Iteration  18: 1079131.174 ops/s
Iteration  19: 1076991.358 ops/s
Iteration  20: 1075357.398 ops/s
Iteration  21: 1057449.692 ops/s
Iteration  22: 1067266.082 ops/s
Iteration  23: 1073537.422 ops/s
Iteration  24: 1072534.242 ops/s
Iteration  25: 1076119.605 ops/s
Iteration  26: 1068460.790 ops/s
Iteration  27: 1079798.268 ops/s
Iteration  28: 1089870.106 ops/s
Iteration  29: 1051905.958 ops/s
Iteration  30: 1078032.360 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1070704.133 ±(99.9%) 6229.099 ops/s [Average]
  (min, avg, max) = (1051905.958, 1070704.133, 1089870.106), stdev = 9323.422
  CI (99.9%): [1064475.034, 1076933.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1070704.133 ± 6229.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703897.147 ops/s
# Warmup Iteration   2: 734046.224 ops/s
# Warmup Iteration   3: 917761.908 ops/s
# Warmup Iteration   4: 924196.222 ops/s
# Warmup Iteration   5: 915563.733 ops/s
# Warmup Iteration   6: 913563.468 ops/s
# Warmup Iteration   7: 927439.930 ops/s
# Warmup Iteration   8: 928866.879 ops/s
# Warmup Iteration   9: 921775.809 ops/s
# Warmup Iteration  10: 924474.436 ops/s
# Warmup Iteration  11: 916385.856 ops/s
# Warmup Iteration  12: 822853.270 ops/s
# Warmup Iteration  13: 873224.904 ops/s
# Warmup Iteration  14: 916367.157 ops/s
# Warmup Iteration  15: 920417.382 ops/s
# Warmup Iteration  16: 923737.424 ops/s
# Warmup Iteration  17: 978720.141 ops/s
# Warmup Iteration  18: 973607.852 ops/s
# Warmup Iteration  19: 984938.434 ops/s
# Warmup Iteration  20: 976229.827 ops/s
# Warmup Iteration  21: 972536.686 ops/s
# Warmup Iteration  22: 985529.671 ops/s
# Warmup Iteration  23: 974878.615 ops/s
# Warmup Iteration  24: 976846.437 ops/s
# Warmup Iteration  25: 970046.473 ops/s
# Warmup Iteration  26: 979306.779 ops/s
# Warmup Iteration  27: 979349.802 ops/s
# Warmup Iteration  28: 975819.145 ops/s
# Warmup Iteration  29: 977933.902 ops/s
# Warmup Iteration  30: 972694.402 ops/s
Iteration   1: 957399.763 ops/s
Iteration   2: 980919.903 ops/s
Iteration   3: 968149.096 ops/s
Iteration   4: 986583.307 ops/s
Iteration   5: 978940.193 ops/s
Iteration   6: 966705.279 ops/s
Iteration   7: 966164.692 ops/s
Iteration   8: 991961.684 ops/s
Iteration   9: 972815.216 ops/s
Iteration  10: 987676.497 ops/s
Iteration  11: 984381.351 ops/s
Iteration  12: 977476.234 ops/s
Iteration  13: 970181.099 ops/s
Iteration  14: 966010.716 ops/s
Iteration  15: 984312.396 ops/s
Iteration  16: 975405.061 ops/s
Iteration  17: 979033.854 ops/s
Iteration  18: 975339.497 ops/s
Iteration  19: 987978.211 ops/s
Iteration  20: 968073.328 ops/s
Iteration  21: 982207.796 ops/s
Iteration  22: 964094.873 ops/s
Iteration  23: 983363.694 ops/s
Iteration  24: 971999.397 ops/s
Iteration  25: 978884.257 ops/s
Iteration  26: 982510.688 ops/s
Iteration  27: 976113.331 ops/s
Iteration  28: 961874.313 ops/s
Iteration  29: 973387.025 ops/s
Iteration  30: 973712.584 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_clear":
  975788.511 ±(99.9%) 5739.002 ops/s [Average]
  (min, avg, max) = (957399.763, 975788.511, 991961.684), stdev = 8589.868
  CI (99.9%): [970049.509, 981527.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_clear  thrpt   30  975788.511 ± 5739.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4945199.129 ops/s
# Warmup Iteration   2: 8107789.516 ops/s
# Warmup Iteration   3: 9567098.999 ops/s
# Warmup Iteration   4: 9691862.225 ops/s
# Warmup Iteration   5: 9594199.050 ops/s
# Warmup Iteration   6: 8442972.880 ops/s
# Warmup Iteration   7: 9162918.790 ops/s
# Warmup Iteration   8: 9658683.231 ops/s
# Warmup Iteration   9: 9576788.876 ops/s
# Warmup Iteration  10: 9643251.292 ops/s
# Warmup Iteration  11: 9574135.567 ops/s
# Warmup Iteration  12: 9688649.211 ops/s
# Warmup Iteration  13: 9657346.011 ops/s
# Warmup Iteration  14: 9688928.578 ops/s
# Warmup Iteration  15: 9616369.879 ops/s
# Warmup Iteration  16: 9650345.542 ops/s
# Warmup Iteration  17: 9539031.839 ops/s
# Warmup Iteration  18: 9590842.489 ops/s
# Warmup Iteration  19: 9722043.461 ops/s
# Warmup Iteration  20: 9649966.524 ops/s
# Warmup Iteration  21: 9647590.865 ops/s
# Warmup Iteration  22: 9671265.399 ops/s
# Warmup Iteration  23: 9614283.720 ops/s
# Warmup Iteration  24: 9641395.512 ops/s
# Warmup Iteration  25: 9598195.507 ops/s
# Warmup Iteration  26: 9731853.374 ops/s
# Warmup Iteration  27: 9576371.010 ops/s
# Warmup Iteration  28: 9606766.623 ops/s
# Warmup Iteration  29: 9709466.012 ops/s
# Warmup Iteration  30: 9676699.910 ops/s
Iteration   1: 9581483.582 ops/s
Iteration   2: 9673983.000 ops/s
Iteration   3: 9670073.571 ops/s
Iteration   4: 9692167.010 ops/s
Iteration   5: 9550793.143 ops/s
Iteration   6: 9776629.116 ops/s
Iteration   7: 9616388.071 ops/s
Iteration   8: 9650362.086 ops/s
Iteration   9: 9707593.373 ops/s
Iteration  10: 9719663.785 ops/s
Iteration  11: 9686848.640 ops/s
Iteration  12: 9681006.300 ops/s
Iteration  13: 9652507.875 ops/s
Iteration  14: 9713518.079 ops/s
Iteration  15: 9596844.235 ops/s
Iteration  16: 9692423.280 ops/s
Iteration  17: 9550825.038 ops/s
Iteration  18: 9636373.505 ops/s
Iteration  19: 9655137.381 ops/s
Iteration  20: 9626022.376 ops/s
Iteration  21: 9649739.353 ops/s
Iteration  22: 9648865.769 ops/s
Iteration  23: 9618317.727 ops/s
Iteration  24: 9694672.857 ops/s
Iteration  25: 9573947.703 ops/s
Iteration  26: 9700616.406 ops/s
Iteration  27: 9782291.038 ops/s
Iteration  28: 9751273.481 ops/s
Iteration  29: 9555079.060 ops/s
Iteration  30: 9656787.795 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect":
  9658741.154 ±(99.9%) 41167.183 ops/s [Average]
  (min, avg, max) = (9550793.143, 9658741.154, 9782291.038), stdev = 61617.107
  CI (99.9%): [9617573.971, 9699908.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collect  thrpt   30  9658741.154 ± 41167.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2682647.896 ops/s
# Warmup Iteration   2: 6543379.563 ops/s
# Warmup Iteration   3: 6836345.214 ops/s
# Warmup Iteration   4: 5599585.378 ops/s
# Warmup Iteration   5: 6867202.052 ops/s
# Warmup Iteration   6: 6778532.361 ops/s
# Warmup Iteration   7: 6881889.071 ops/s
# Warmup Iteration   8: 6775097.380 ops/s
# Warmup Iteration   9: 6811111.400 ops/s
# Warmup Iteration  10: 6788375.844 ops/s
# Warmup Iteration  11: 6762200.888 ops/s
# Warmup Iteration  12: 6826475.924 ops/s
# Warmup Iteration  13: 6849079.521 ops/s
# Warmup Iteration  14: 6873435.916 ops/s
# Warmup Iteration  15: 6857417.477 ops/s
# Warmup Iteration  16: 6813846.506 ops/s
# Warmup Iteration  17: 6775853.311 ops/s
# Warmup Iteration  18: 6826051.255 ops/s
# Warmup Iteration  19: 6799907.385 ops/s
# Warmup Iteration  20: 6788817.613 ops/s
# Warmup Iteration  21: 6849108.980 ops/s
# Warmup Iteration  22: 6779719.665 ops/s
# Warmup Iteration  23: 6771244.663 ops/s
# Warmup Iteration  24: 6834136.792 ops/s
# Warmup Iteration  25: 6839060.711 ops/s
# Warmup Iteration  26: 6802905.214 ops/s
# Warmup Iteration  27: 6879772.492 ops/s
# Warmup Iteration  28: 6842862.699 ops/s
# Warmup Iteration  29: 6852756.401 ops/s
# Warmup Iteration  30: 6864521.520 ops/s
Iteration   1: 6900103.015 ops/s
Iteration   2: 6838449.627 ops/s
Iteration   3: 6862821.683 ops/s
Iteration   4: 6809719.645 ops/s
Iteration   5: 6797397.101 ops/s
Iteration   6: 6770783.609 ops/s
Iteration   7: 6869334.206 ops/s
Iteration   8: 6730498.906 ops/s
Iteration   9: 6824389.737 ops/s
Iteration  10: 6802452.081 ops/s
Iteration  11: 6867433.048 ops/s
Iteration  12: 6729693.572 ops/s
Iteration  13: 6791114.299 ops/s
Iteration  14: 6843635.056 ops/s
Iteration  15: 6787872.087 ops/s
Iteration  16: 6853631.520 ops/s
Iteration  17: 6785633.173 ops/s
Iteration  18: 6857015.078 ops/s
Iteration  19: 6838626.932 ops/s
Iteration  20: 6819042.844 ops/s
Iteration  21: 6834661.791 ops/s
Iteration  22: 6848524.582 ops/s
Iteration  23: 6763920.561 ops/s
Iteration  24: 6854410.709 ops/s
Iteration  25: 6901099.666 ops/s
Iteration  26: 6713848.722 ops/s
Iteration  27: 6829270.599 ops/s
Iteration  28: 6866955.921 ops/s
Iteration  29: 6770325.509 ops/s
Iteration  30: 6770107.428 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectBoolean":
  6817759.090 ±(99.9%) 32721.604 ops/s [Average]
  (min, avg, max) = (6713848.722, 6817759.090, 6901099.666), stdev = 48976.160
  CI (99.9%): [6785037.486, 6850480.694] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  6817759.090 ± 32721.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2091782.813 ops/s
# Warmup Iteration   2: 3774884.154 ops/s
# Warmup Iteration   3: 4598636.077 ops/s
# Warmup Iteration   4: 4663766.444 ops/s
# Warmup Iteration   5: 4644927.847 ops/s
# Warmup Iteration   6: 3799114.954 ops/s
# Warmup Iteration   7: 4620671.653 ops/s
# Warmup Iteration   8: 4635404.130 ops/s
# Warmup Iteration   9: 4614791.275 ops/s
# Warmup Iteration  10: 4619788.216 ops/s
# Warmup Iteration  11: 4630155.287 ops/s
# Warmup Iteration  12: 4635399.834 ops/s
# Warmup Iteration  13: 4665445.039 ops/s
# Warmup Iteration  14: 4665528.249 ops/s
# Warmup Iteration  15: 4634663.107 ops/s
# Warmup Iteration  16: 4637704.819 ops/s
# Warmup Iteration  17: 4638140.642 ops/s
# Warmup Iteration  18: 4615463.203 ops/s
# Warmup Iteration  19: 4649712.190 ops/s
# Warmup Iteration  20: 4608747.867 ops/s
# Warmup Iteration  21: 4628206.165 ops/s
# Warmup Iteration  22: 4585266.366 ops/s
# Warmup Iteration  23: 4608089.301 ops/s
# Warmup Iteration  24: 4624573.770 ops/s
# Warmup Iteration  25: 4607395.338 ops/s
# Warmup Iteration  26: 4620613.892 ops/s
# Warmup Iteration  27: 4671786.653 ops/s
# Warmup Iteration  28: 4606682.799 ops/s
# Warmup Iteration  29: 4646255.776 ops/s
# Warmup Iteration  30: 4644141.068 ops/s
Iteration   1: 4602370.645 ops/s
Iteration   2: 4688044.325 ops/s
Iteration   3: 4625004.097 ops/s
Iteration   4: 4647508.638 ops/s
Iteration   5: 4698011.693 ops/s
Iteration   6: 4616877.188 ops/s
Iteration   7: 4673791.317 ops/s
Iteration   8: 4626396.289 ops/s
Iteration   9: 4617230.516 ops/s
Iteration  10: 4658182.318 ops/s
Iteration  11: 4607600.832 ops/s
Iteration  12: 4677645.918 ops/s
Iteration  13: 4648089.206 ops/s
Iteration  14: 4672062.237 ops/s
Iteration  15: 4592970.953 ops/s
Iteration  16: 4609979.887 ops/s
Iteration  17: 4627576.360 ops/s
Iteration  18: 4626508.207 ops/s
Iteration  19: 4617612.636 ops/s
Iteration  20: 4626705.194 ops/s
Iteration  21: 4613188.059 ops/s
Iteration  22: 4636672.278 ops/s
Iteration  23: 4669588.631 ops/s
Iteration  24: 4704000.937 ops/s
Iteration  25: 4672363.864 ops/s
Iteration  26: 4660490.726 ops/s
Iteration  27: 4640092.561 ops/s
Iteration  28: 4646690.129 ops/s
Iteration  29: 4622141.264 ops/s
Iteration  30: 4625250.827 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectByte":
  4641688.258 ±(99.9%) 19785.872 ops/s [Average]
  (min, avg, max) = (4592970.953, 4641688.258, 4704000.937), stdev = 29614.564
  CI (99.9%): [4621902.386, 4661474.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectByte  thrpt   30  4641688.258 ± 19785.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2337879.715 ops/s
# Warmup Iteration   2: 4621502.923 ops/s
# Warmup Iteration   3: 5154185.229 ops/s
# Warmup Iteration   4: 5183168.788 ops/s
# Warmup Iteration   5: 4690478.717 ops/s
# Warmup Iteration   6: 4671523.897 ops/s
# Warmup Iteration   7: 5172073.304 ops/s
# Warmup Iteration   8: 5186333.660 ops/s
# Warmup Iteration   9: 5155234.218 ops/s
# Warmup Iteration  10: 5114961.815 ops/s
# Warmup Iteration  11: 5209424.649 ops/s
# Warmup Iteration  12: 5152682.863 ops/s
# Warmup Iteration  13: 5166859.032 ops/s
# Warmup Iteration  14: 5165398.859 ops/s
# Warmup Iteration  15: 5142681.892 ops/s
# Warmup Iteration  16: 5159975.816 ops/s
# Warmup Iteration  17: 5158546.202 ops/s
# Warmup Iteration  18: 5178945.856 ops/s
# Warmup Iteration  19: 5136811.744 ops/s
# Warmup Iteration  20: 5150758.299 ops/s
# Warmup Iteration  21: 5156221.627 ops/s
# Warmup Iteration  22: 5158459.884 ops/s
# Warmup Iteration  23: 5183095.649 ops/s
# Warmup Iteration  24: 5188197.842 ops/s
# Warmup Iteration  25: 5173994.694 ops/s
# Warmup Iteration  26: 5193792.227 ops/s
# Warmup Iteration  27: 5173820.027 ops/s
# Warmup Iteration  28: 5193448.089 ops/s
# Warmup Iteration  29: 5178653.589 ops/s
# Warmup Iteration  30: 5190081.249 ops/s
Iteration   1: 5181651.899 ops/s
Iteration   2: 5199615.220 ops/s
Iteration   3: 5165217.347 ops/s
Iteration   4: 5132448.533 ops/s
Iteration   5: 5173884.975 ops/s
Iteration   6: 5179685.722 ops/s
Iteration   7: 5162022.041 ops/s
Iteration   8: 5207588.093 ops/s
Iteration   9: 5157147.511 ops/s
Iteration  10: 5188786.562 ops/s
Iteration  11: 5183243.397 ops/s
Iteration  12: 5198378.372 ops/s
Iteration  13: 5205069.317 ops/s
Iteration  14: 5132179.986 ops/s
Iteration  15: 5131432.572 ops/s
Iteration  16: 5155717.118 ops/s
Iteration  17: 5189138.313 ops/s
Iteration  18: 5180689.991 ops/s
Iteration  19: 5165033.451 ops/s
Iteration  20: 5188706.990 ops/s
Iteration  21: 5137821.930 ops/s
Iteration  22: 5084179.563 ops/s
Iteration  23: 5240240.740 ops/s
Iteration  24: 5100089.636 ops/s
Iteration  25: 5179359.569 ops/s
Iteration  26: 5132072.483 ops/s
Iteration  27: 5162522.288 ops/s
Iteration  28: 5157074.109 ops/s
Iteration  29: 5168818.768 ops/s
Iteration  30: 5110069.402 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectChar":
  5164996.197 ±(99.9%) 22724.551 ops/s [Average]
  (min, avg, max) = (5084179.563, 5164996.197, 5240240.740), stdev = 34013.040
  CI (99.9%): [5142271.646, 5187720.747] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectChar  thrpt   30  5164996.197 ± 22724.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1924734.433 ops/s
# Warmup Iteration   2: 4216814.110 ops/s
# Warmup Iteration   3: 4583505.525 ops/s
# Warmup Iteration   4: 4607308.481 ops/s
# Warmup Iteration   5: 3774105.689 ops/s
# Warmup Iteration   6: 4620439.183 ops/s
# Warmup Iteration   7: 4635014.589 ops/s
# Warmup Iteration   8: 4632872.651 ops/s
# Warmup Iteration   9: 4609330.920 ops/s
# Warmup Iteration  10: 4591327.903 ops/s
# Warmup Iteration  11: 4607939.051 ops/s
# Warmup Iteration  12: 4629265.004 ops/s
# Warmup Iteration  13: 4621522.907 ops/s
# Warmup Iteration  14: 4614500.826 ops/s
# Warmup Iteration  15: 4568948.770 ops/s
# Warmup Iteration  16: 4617663.792 ops/s
# Warmup Iteration  17: 4599344.020 ops/s
# Warmup Iteration  18: 4602881.494 ops/s
# Warmup Iteration  19: 4622602.174 ops/s
# Warmup Iteration  20: 4600040.375 ops/s
# Warmup Iteration  21: 4585044.481 ops/s
# Warmup Iteration  22: 4591372.922 ops/s
# Warmup Iteration  23: 4596185.740 ops/s
# Warmup Iteration  24: 4560791.705 ops/s
# Warmup Iteration  25: 4593913.703 ops/s
# Warmup Iteration  26: 4569644.921 ops/s
# Warmup Iteration  27: 4602433.652 ops/s
# Warmup Iteration  28: 4582090.345 ops/s
# Warmup Iteration  29: 4597411.305 ops/s
# Warmup Iteration  30: 4555203.331 ops/s
Iteration   1: 4631581.300 ops/s
Iteration   2: 4604882.054 ops/s
Iteration   3: 4646964.844 ops/s
Iteration   4: 4658956.750 ops/s
Iteration   5: 4673699.123 ops/s
Iteration   6: 4664733.139 ops/s
Iteration   7: 4583080.319 ops/s
Iteration   8: 4501767.145 ops/s
Iteration   9: 4662218.048 ops/s
Iteration  10: 4536361.012 ops/s
Iteration  11: 4523960.600 ops/s
Iteration  12: 4576546.738 ops/s
Iteration  13: 4629640.479 ops/s
Iteration  14: 4612436.872 ops/s
Iteration  15: 4599992.581 ops/s
Iteration  16: 4567912.145 ops/s
Iteration  17: 4629269.897 ops/s
Iteration  18: 4585909.828 ops/s
Iteration  19: 4616113.329 ops/s
Iteration  20: 4639202.561 ops/s
Iteration  21: 4544997.350 ops/s
Iteration  22: 4644561.458 ops/s
Iteration  23: 4578127.796 ops/s
Iteration  24: 4647358.390 ops/s
Iteration  25: 4580779.074 ops/s
Iteration  26: 4623158.492 ops/s
Iteration  27: 4633268.213 ops/s
Iteration  28: 4626325.992 ops/s
Iteration  29: 4571986.215 ops/s
Iteration  30: 4581579.526 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectDouble":
  4605912.376 ±(99.9%) 29343.929 ops/s [Average]
  (min, avg, max) = (4501767.145, 4605912.376, 4673699.123), stdev = 43920.615
  CI (99.9%): [4576568.447, 4635256.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  4605912.376 ± 29343.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2185288.251 ops/s
# Warmup Iteration   2: 4470195.019 ops/s
# Warmup Iteration   3: 5005851.486 ops/s
# Warmup Iteration   4: 5057428.594 ops/s
# Warmup Iteration   5: 4109292.774 ops/s
# Warmup Iteration   6: 4981201.409 ops/s
# Warmup Iteration   7: 5028339.475 ops/s
# Warmup Iteration   8: 5027824.279 ops/s
# Warmup Iteration   9: 5015983.390 ops/s
# Warmup Iteration  10: 4994382.461 ops/s
# Warmup Iteration  11: 5038957.477 ops/s
# Warmup Iteration  12: 4996354.347 ops/s
# Warmup Iteration  13: 5069939.304 ops/s
# Warmup Iteration  14: 5039597.766 ops/s
# Warmup Iteration  15: 5002484.228 ops/s
# Warmup Iteration  16: 5023327.354 ops/s
# Warmup Iteration  17: 5018635.442 ops/s
# Warmup Iteration  18: 5039616.393 ops/s
# Warmup Iteration  19: 5059686.660 ops/s
# Warmup Iteration  20: 5019822.687 ops/s
# Warmup Iteration  21: 5022133.504 ops/s
# Warmup Iteration  22: 4982760.864 ops/s
# Warmup Iteration  23: 5055345.842 ops/s
# Warmup Iteration  24: 5019450.579 ops/s
# Warmup Iteration  25: 5038370.282 ops/s
# Warmup Iteration  26: 4965630.271 ops/s
# Warmup Iteration  27: 5006119.579 ops/s
# Warmup Iteration  28: 4958610.951 ops/s
# Warmup Iteration  29: 5030401.963 ops/s
# Warmup Iteration  30: 4997997.575 ops/s
Iteration   1: 4977312.374 ops/s
Iteration   2: 4980635.044 ops/s
Iteration   3: 5016510.254 ops/s
Iteration   4: 5090900.364 ops/s
Iteration   5: 5030721.238 ops/s
Iteration   6: 5026082.065 ops/s
Iteration   7: 5073320.954 ops/s
Iteration   8: 5095809.120 ops/s
Iteration   9: 5013768.092 ops/s
Iteration  10: 5053320.277 ops/s
Iteration  11: 5012673.809 ops/s
Iteration  12: 5005143.257 ops/s
Iteration  13: 5050111.141 ops/s
Iteration  14: 5025111.627 ops/s
Iteration  15: 5041899.077 ops/s
Iteration  16: 4959464.532 ops/s
Iteration  17: 4948865.953 ops/s
Iteration  18: 5008215.172 ops/s
Iteration  19: 5018685.310 ops/s
Iteration  20: 5008045.358 ops/s
Iteration  21: 4979277.384 ops/s
Iteration  22: 5078752.762 ops/s
Iteration  23: 5049409.604 ops/s
Iteration  24: 5057355.192 ops/s
Iteration  25: 5029506.791 ops/s
Iteration  26: 5060410.216 ops/s
Iteration  27: 5028505.178 ops/s
Iteration  28: 5007767.044 ops/s
Iteration  29: 4985719.669 ops/s
Iteration  30: 5000114.704 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectFloat":
  5023780.452 ±(99.9%) 24643.359 ops/s [Average]
  (min, avg, max) = (4948865.953, 5023780.452, 5095809.120), stdev = 36885.022
  CI (99.9%): [4999137.093, 5048423.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  5023780.452 ± 24643.359  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4522114.049 ops/s
# Warmup Iteration   2: 7675966.744 ops/s
# Warmup Iteration   3: 8893261.408 ops/s
# Warmup Iteration   4: 8901016.639 ops/s
# Warmup Iteration   5: 8812557.534 ops/s
# Warmup Iteration   6: 7440958.663 ops/s
# Warmup Iteration   7: 8901544.466 ops/s
# Warmup Iteration   8: 8890175.153 ops/s
# Warmup Iteration   9: 8900873.017 ops/s
# Warmup Iteration  10: 8915785.791 ops/s
# Warmup Iteration  11: 8979387.600 ops/s
# Warmup Iteration  12: 8934613.347 ops/s
# Warmup Iteration  13: 8871386.151 ops/s
# Warmup Iteration  14: 8835789.755 ops/s
# Warmup Iteration  15: 8929434.138 ops/s
# Warmup Iteration  16: 8906621.757 ops/s
# Warmup Iteration  17: 8891126.541 ops/s
# Warmup Iteration  18: 8848014.614 ops/s
# Warmup Iteration  19: 8881642.563 ops/s
# Warmup Iteration  20: 8924401.292 ops/s
# Warmup Iteration  21: 8937502.799 ops/s
# Warmup Iteration  22: 8960868.589 ops/s
# Warmup Iteration  23: 8811266.348 ops/s
# Warmup Iteration  24: 8925263.743 ops/s
# Warmup Iteration  25: 8886112.780 ops/s
# Warmup Iteration  26: 8943130.506 ops/s
# Warmup Iteration  27: 8846928.713 ops/s
# Warmup Iteration  28: 8857721.483 ops/s
# Warmup Iteration  29: 8902832.193 ops/s
# Warmup Iteration  30: 8870214.129 ops/s
Iteration   1: 8926215.767 ops/s
Iteration   2: 8856239.925 ops/s
Iteration   3: 8931143.993 ops/s
Iteration   4: 8888039.987 ops/s
Iteration   5: 8864552.888 ops/s
Iteration   6: 8882854.323 ops/s
Iteration   7: 8915087.347 ops/s
Iteration   8: 8887300.272 ops/s
Iteration   9: 8887387.123 ops/s
Iteration  10: 8933862.099 ops/s
Iteration  11: 8865288.802 ops/s
Iteration  12: 8893967.913 ops/s
Iteration  13: 8874711.317 ops/s
Iteration  14: 8879022.577 ops/s
Iteration  15: 8974540.089 ops/s
Iteration  16: 8907551.812 ops/s
Iteration  17: 8821190.703 ops/s
Iteration  18: 8879664.298 ops/s
Iteration  19: 8901619.047 ops/s
Iteration  20: 8789341.671 ops/s
Iteration  21: 8876280.490 ops/s
Iteration  22: 8776713.944 ops/s
Iteration  23: 8816874.109 ops/s
Iteration  24: 8967108.900 ops/s
Iteration  25: 8938249.040 ops/s
Iteration  26: 8944563.437 ops/s
Iteration  27: 8846371.282 ops/s
Iteration  28: 8815690.847 ops/s
Iteration  29: 8905905.823 ops/s
Iteration  30: 8875962.064 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIf":
  8884110.063 ±(99.9%) 32212.434 ops/s [Average]
  (min, avg, max) = (8776713.944, 8884110.063, 8974540.089), stdev = 48214.058
  CI (99.9%): [8851897.629, 8916322.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectIf  thrpt   30  8884110.063 ± 32212.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5171670.240 ops/s
# Warmup Iteration   2: 25352316.317 ops/s
# Warmup Iteration   3: 27823494.359 ops/s
# Warmup Iteration   4: 23281636.175 ops/s
# Warmup Iteration   5: 27836271.064 ops/s
# Warmup Iteration   6: 27714077.503 ops/s
# Warmup Iteration   7: 27958511.125 ops/s
# Warmup Iteration   8: 27778745.658 ops/s
# Warmup Iteration   9: 27716923.037 ops/s
# Warmup Iteration  10: 27851722.866 ops/s
# Warmup Iteration  11: 27746606.272 ops/s
# Warmup Iteration  12: 27770309.995 ops/s
# Warmup Iteration  13: 27849578.666 ops/s
# Warmup Iteration  14: 27938888.682 ops/s
# Warmup Iteration  15: 27733158.856 ops/s
# Warmup Iteration  16: 27996304.894 ops/s
# Warmup Iteration  17: 27835705.987 ops/s
# Warmup Iteration  18: 27636604.992 ops/s
# Warmup Iteration  19: 27876009.068 ops/s
# Warmup Iteration  20: 27672851.906 ops/s
# Warmup Iteration  21: 27597309.749 ops/s
# Warmup Iteration  22: 27705697.195 ops/s
# Warmup Iteration  23: 27668763.463 ops/s
# Warmup Iteration  24: 27623480.652 ops/s
# Warmup Iteration  25: 27617835.906 ops/s
# Warmup Iteration  26: 27858439.298 ops/s
# Warmup Iteration  27: 27568541.784 ops/s
# Warmup Iteration  28: 27739415.178 ops/s
# Warmup Iteration  29: 27624559.077 ops/s
# Warmup Iteration  30: 27715650.060 ops/s
Iteration   1: 27419042.339 ops/s
Iteration   2: 27905682.991 ops/s
Iteration   3: 27717037.519 ops/s
Iteration   4: 27801776.268 ops/s
Iteration   5: 27942756.818 ops/s
Iteration   6: 27359677.226 ops/s
Iteration   7: 27476362.616 ops/s
Iteration   8: 27384076.556 ops/s
Iteration   9: 27507617.476 ops/s
Iteration  10: 27725384.883 ops/s
Iteration  11: 27718998.410 ops/s
Iteration  12: 27813602.364 ops/s
Iteration  13: 27620375.144 ops/s
Iteration  14: 28052542.533 ops/s
Iteration  15: 27483528.907 ops/s
Iteration  16: 27356242.954 ops/s
Iteration  17: 27794856.020 ops/s
Iteration  18: 27939843.179 ops/s
Iteration  19: 27655831.815 ops/s
Iteration  20: 27838538.499 ops/s
Iteration  21: 27979640.744 ops/s
Iteration  22: 27649233.607 ops/s
Iteration  23: 27725702.194 ops/s
Iteration  24: 28103580.065 ops/s
Iteration  25: 27572188.450 ops/s
Iteration  26: 27628383.213 ops/s
Iteration  27: 27963810.780 ops/s
Iteration  28: 27548255.238 ops/s
Iteration  29: 27677857.711 ops/s
Iteration  30: 27466132.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectIfWithTarget":
  27694285.296 ±(99.9%) 141636.444 ops/s [Average]
  (min, avg, max) = (27356242.954, 27694285.296, 28103580.065), stdev = 211994.777
  CI (99.9%): [27552648.853, 27835921.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  27694285.296 ± 141636.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2240701.247 ops/s
# Warmup Iteration   2: 4554020.223 ops/s
# Warmup Iteration   3: 4972817.965 ops/s
# Warmup Iteration   4: 5017334.421 ops/s
# Warmup Iteration   5: 4113446.173 ops/s
# Warmup Iteration   6: 5036713.124 ops/s
# Warmup Iteration   7: 5041697.933 ops/s
# Warmup Iteration   8: 4992336.571 ops/s
# Warmup Iteration   9: 5064597.406 ops/s
# Warmup Iteration  10: 5035184.692 ops/s
# Warmup Iteration  11: 4985179.061 ops/s
# Warmup Iteration  12: 4955216.264 ops/s
# Warmup Iteration  13: 4863392.025 ops/s
# Warmup Iteration  14: 5024542.138 ops/s
# Warmup Iteration  15: 4985793.798 ops/s
# Warmup Iteration  16: 5081858.992 ops/s
# Warmup Iteration  17: 5068711.498 ops/s
# Warmup Iteration  18: 5051356.394 ops/s
# Warmup Iteration  19: 5016025.883 ops/s
# Warmup Iteration  20: 4995016.069 ops/s
# Warmup Iteration  21: 5021284.837 ops/s
# Warmup Iteration  22: 5056411.606 ops/s
# Warmup Iteration  23: 5061178.298 ops/s
# Warmup Iteration  24: 5053348.185 ops/s
# Warmup Iteration  25: 5025749.853 ops/s
# Warmup Iteration  26: 4967804.912 ops/s
# Warmup Iteration  27: 5010957.217 ops/s
# Warmup Iteration  28: 5030262.458 ops/s
# Warmup Iteration  29: 5035181.790 ops/s
# Warmup Iteration  30: 5050116.099 ops/s
Iteration   1: 5031958.827 ops/s
Iteration   2: 5015943.594 ops/s
Iteration   3: 5054435.835 ops/s
Iteration   4: 5047790.149 ops/s
Iteration   5: 5064117.569 ops/s
Iteration   6: 5041296.031 ops/s
Iteration   7: 5035858.193 ops/s
Iteration   8: 4979228.109 ops/s
Iteration   9: 4956913.666 ops/s
Iteration  10: 5022600.329 ops/s
Iteration  11: 4994749.407 ops/s
Iteration  12: 5046845.892 ops/s
Iteration  13: 5029434.326 ops/s
Iteration  14: 5002727.804 ops/s
Iteration  15: 5046042.507 ops/s
Iteration  16: 5032914.151 ops/s
Iteration  17: 5048460.095 ops/s
Iteration  18: 5031646.887 ops/s
Iteration  19: 5003792.380 ops/s
Iteration  20: 5000313.547 ops/s
Iteration  21: 5051830.832 ops/s
Iteration  22: 5076483.146 ops/s
Iteration  23: 5033515.593 ops/s
Iteration  24: 4994365.846 ops/s
Iteration  25: 4999152.163 ops/s
Iteration  26: 5035704.899 ops/s
Iteration  27: 5043290.863 ops/s
Iteration  28: 5070042.335 ops/s
Iteration  29: 5028276.521 ops/s
Iteration  30: 4979331.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectInt":
  5026635.434 ±(99.9%) 19130.753 ops/s [Average]
  (min, avg, max) = (4956913.666, 5026635.434, 5076483.146), stdev = 28634.012
  CI (99.9%): [5007504.681, 5045766.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectInt  thrpt   30  5026635.434 ± 19130.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1919576.099 ops/s
# Warmup Iteration   2: 4440025.375 ops/s
# Warmup Iteration   3: 4827627.729 ops/s
# Warmup Iteration   4: 4792122.580 ops/s
# Warmup Iteration   5: 3925116.259 ops/s
# Warmup Iteration   6: 4808673.876 ops/s
# Warmup Iteration   7: 4751710.978 ops/s
# Warmup Iteration   8: 4797816.696 ops/s
# Warmup Iteration   9: 4782065.533 ops/s
# Warmup Iteration  10: 4795284.188 ops/s
# Warmup Iteration  11: 4845373.818 ops/s
# Warmup Iteration  12: 4800174.196 ops/s
# Warmup Iteration  13: 4796938.889 ops/s
# Warmup Iteration  14: 4788756.766 ops/s
# Warmup Iteration  15: 4816075.196 ops/s
# Warmup Iteration  16: 4835270.023 ops/s
# Warmup Iteration  17: 4801636.884 ops/s
# Warmup Iteration  18: 4824844.969 ops/s
# Warmup Iteration  19: 4787115.172 ops/s
# Warmup Iteration  20: 4789568.699 ops/s
# Warmup Iteration  21: 4835392.167 ops/s
# Warmup Iteration  22: 4839964.391 ops/s
# Warmup Iteration  23: 4851554.198 ops/s
# Warmup Iteration  24: 4819771.603 ops/s
# Warmup Iteration  25: 4833861.433 ops/s
# Warmup Iteration  26: 4811458.792 ops/s
# Warmup Iteration  27: 4833049.044 ops/s
# Warmup Iteration  28: 4788148.624 ops/s
# Warmup Iteration  29: 4816941.247 ops/s
# Warmup Iteration  30: 4814690.452 ops/s
Iteration   1: 4862328.717 ops/s
Iteration   2: 4828199.551 ops/s
Iteration   3: 4824296.698 ops/s
Iteration   4: 4759979.975 ops/s
Iteration   5: 4816248.448 ops/s
Iteration   6: 4763136.831 ops/s
Iteration   7: 4828146.283 ops/s
Iteration   8: 4790712.058 ops/s
Iteration   9: 4774802.862 ops/s
Iteration  10: 4779380.153 ops/s
Iteration  11: 4774493.210 ops/s
Iteration  12: 4854642.316 ops/s
Iteration  13: 4825139.627 ops/s
Iteration  14: 4800225.448 ops/s
Iteration  15: 4847367.207 ops/s
Iteration  16: 4784665.924 ops/s
Iteration  17: 4824647.741 ops/s
Iteration  18: 4785537.373 ops/s
Iteration  19: 4822070.666 ops/s
Iteration  20: 4818103.285 ops/s
Iteration  21: 4834729.032 ops/s
Iteration  22: 4774283.075 ops/s
Iteration  23: 4857353.119 ops/s
Iteration  24: 4714458.657 ops/s
Iteration  25: 4798772.742 ops/s
Iteration  26: 4877671.504 ops/s
Iteration  27: 4809918.313 ops/s
Iteration  28: 4786028.953 ops/s
Iteration  29: 4836271.767 ops/s
Iteration  30: 4834626.798 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectLong":
  4809607.944 ±(99.9%) 23980.151 ops/s [Average]
  (min, avg, max) = (4714458.657, 4809607.944, 4877671.504), stdev = 35892.363
  CI (99.9%): [4785627.794, 4833588.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectLong  thrpt   30  4809607.944 ± 23980.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2124831.211 ops/s
# Warmup Iteration   2: 3756128.901 ops/s
# Warmup Iteration   3: 4425396.673 ops/s
# Warmup Iteration   4: 4428705.616 ops/s
# Warmup Iteration   5: 4435205.127 ops/s
# Warmup Iteration   6: 3669626.030 ops/s
# Warmup Iteration   7: 4463440.613 ops/s
# Warmup Iteration   8: 4445511.770 ops/s
# Warmup Iteration   9: 4453752.524 ops/s
# Warmup Iteration  10: 4471235.240 ops/s
# Warmup Iteration  11: 4455432.340 ops/s
# Warmup Iteration  12: 4460005.403 ops/s
# Warmup Iteration  13: 4506636.895 ops/s
# Warmup Iteration  14: 4440665.658 ops/s
# Warmup Iteration  15: 4467861.814 ops/s
# Warmup Iteration  16: 4437491.447 ops/s
# Warmup Iteration  17: 4412593.608 ops/s
# Warmup Iteration  18: 4474349.396 ops/s
# Warmup Iteration  19: 4452411.538 ops/s
# Warmup Iteration  20: 4420233.020 ops/s
# Warmup Iteration  21: 4410889.434 ops/s
# Warmup Iteration  22: 4465367.218 ops/s
# Warmup Iteration  23: 4469164.700 ops/s
# Warmup Iteration  24: 4444332.750 ops/s
# Warmup Iteration  25: 4499760.852 ops/s
# Warmup Iteration  26: 4449638.710 ops/s
# Warmup Iteration  27: 4490952.557 ops/s
# Warmup Iteration  28: 4449697.285 ops/s
# Warmup Iteration  29: 4473294.017 ops/s
# Warmup Iteration  30: 4490066.062 ops/s
Iteration   1: 4457059.478 ops/s
Iteration   2: 4430884.444 ops/s
Iteration   3: 4423937.788 ops/s
Iteration   4: 4454357.856 ops/s
Iteration   5: 4461217.541 ops/s
Iteration   6: 4411222.575 ops/s
Iteration   7: 4465932.415 ops/s
Iteration   8: 4439728.761 ops/s
Iteration   9: 4498598.350 ops/s
Iteration  10: 4500993.438 ops/s
Iteration  11: 4497316.772 ops/s
Iteration  12: 4492657.891 ops/s
Iteration  13: 4447852.164 ops/s
Iteration  14: 4449681.141 ops/s
Iteration  15: 4458910.308 ops/s
Iteration  16: 4473601.571 ops/s
Iteration  17: 4487310.632 ops/s
Iteration  18: 4420020.224 ops/s
Iteration  19: 4496377.550 ops/s
Iteration  20: 4497006.495 ops/s
Iteration  21: 4452880.005 ops/s
Iteration  22: 4442017.484 ops/s
Iteration  23: 4416068.875 ops/s
Iteration  24: 4453528.101 ops/s
Iteration  25: 4488999.051 ops/s
Iteration  26: 4431161.575 ops/s
Iteration  27: 4478538.885 ops/s
Iteration  28: 4456950.140 ops/s
Iteration  29: 4479202.830 ops/s
Iteration  30: 4529250.956 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectShort":
  4463108.843 ±(99.9%) 19760.386 ops/s [Average]
  (min, avg, max) = (4411222.575, 4463108.843, 4529250.956), stdev = 29576.418
  CI (99.9%): [4443348.457, 4482869.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectShort  thrpt   30  4463108.843 ± 19760.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 418339.476 ops/s
# Warmup Iteration   2: 970948.830 ops/s
# Warmup Iteration   3: 1024982.142 ops/s
# Warmup Iteration   4: 899794.015 ops/s
# Warmup Iteration   5: 946732.681 ops/s
# Warmup Iteration   6: 1019891.977 ops/s
# Warmup Iteration   7: 1021297.382 ops/s
# Warmup Iteration   8: 1021760.908 ops/s
# Warmup Iteration   9: 1026253.189 ops/s
# Warmup Iteration  10: 1020246.902 ops/s
# Warmup Iteration  11: 1019182.727 ops/s
# Warmup Iteration  12: 1020522.715 ops/s
# Warmup Iteration  13: 1012952.717 ops/s
# Warmup Iteration  14: 1023464.186 ops/s
# Warmup Iteration  15: 1018890.295 ops/s
# Warmup Iteration  16: 1021841.124 ops/s
# Warmup Iteration  17: 1024159.387 ops/s
# Warmup Iteration  18: 1013988.405 ops/s
# Warmup Iteration  19: 1015126.669 ops/s
# Warmup Iteration  20: 1018416.026 ops/s
# Warmup Iteration  21: 1030416.450 ops/s
# Warmup Iteration  22: 1019011.560 ops/s
# Warmup Iteration  23: 1021289.368 ops/s
# Warmup Iteration  24: 1014665.909 ops/s
# Warmup Iteration  25: 1029842.296 ops/s
# Warmup Iteration  26: 1020279.770 ops/s
# Warmup Iteration  27: 1029454.202 ops/s
# Warmup Iteration  28: 1021689.002 ops/s
# Warmup Iteration  29: 1023408.125 ops/s
# Warmup Iteration  30: 1030706.411 ops/s
Iteration   1: 1026476.896 ops/s
Iteration   2: 1016947.162 ops/s
Iteration   3: 1031643.229 ops/s
Iteration   4: 1010505.043 ops/s
Iteration   5: 1032364.339 ops/s
Iteration   6: 1026307.445 ops/s
Iteration   7: 1013366.789 ops/s
Iteration   8: 1013566.525 ops/s
Iteration   9: 1008911.768 ops/s
Iteration  10: 1013460.271 ops/s
Iteration  11: 1021917.460 ops/s
Iteration  12: 1022258.849 ops/s
Iteration  13: 1021062.828 ops/s
Iteration  14: 1032514.125 ops/s
Iteration  15: 1025780.201 ops/s
Iteration  16: 1025940.914 ops/s
Iteration  17: 1010678.172 ops/s
Iteration  18: 1016514.520 ops/s
Iteration  19: 1021405.519 ops/s
Iteration  20: 1031088.838 ops/s
Iteration  21: 1012672.403 ops/s
Iteration  22: 1030236.302 ops/s
Iteration  23: 1027620.999 ops/s
Iteration  24: 1016338.250 ops/s
Iteration  25: 1018284.554 ops/s
Iteration  26: 1027629.954 ops/s
Iteration  27: 1030152.235 ops/s
Iteration  28: 1015378.087 ops/s
Iteration  29: 1021586.550 ops/s
Iteration  30: 1017400.188 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith":
  1021333.680 ±(99.9%) 4886.704 ops/s [Average]
  (min, avg, max) = (1008911.768, 1021333.680, 1032514.125), stdev = 7314.189
  CI (99.9%): [1016446.977, 1026220.384] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectWith  thrpt   30  1021333.680 ± 4886.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1182008.513 ops/s
# Warmup Iteration   2: 3161394.826 ops/s
# Warmup Iteration   3: 3224873.503 ops/s
# Warmup Iteration   4: 2653554.902 ops/s
# Warmup Iteration   5: 3243684.567 ops/s
# Warmup Iteration   6: 3236881.640 ops/s
# Warmup Iteration   7: 3234669.185 ops/s
# Warmup Iteration   8: 3266877.391 ops/s
# Warmup Iteration   9: 3253567.616 ops/s
# Warmup Iteration  10: 3252658.653 ops/s
# Warmup Iteration  11: 3272475.827 ops/s
# Warmup Iteration  12: 3235402.924 ops/s
# Warmup Iteration  13: 3265033.068 ops/s
# Warmup Iteration  14: 3269473.310 ops/s
# Warmup Iteration  15: 3241247.817 ops/s
# Warmup Iteration  16: 3237354.187 ops/s
# Warmup Iteration  17: 3232245.326 ops/s
# Warmup Iteration  18: 3255739.286 ops/s
# Warmup Iteration  19: 3262502.351 ops/s
# Warmup Iteration  20: 3226828.849 ops/s
# Warmup Iteration  21: 3248648.983 ops/s
# Warmup Iteration  22: 3224321.034 ops/s
# Warmup Iteration  23: 3246966.825 ops/s
# Warmup Iteration  24: 3229959.207 ops/s
# Warmup Iteration  25: 3246420.987 ops/s
# Warmup Iteration  26: 3229805.523 ops/s
# Warmup Iteration  27: 3240100.441 ops/s
# Warmup Iteration  28: 3245430.519 ops/s
# Warmup Iteration  29: 3261235.514 ops/s
# Warmup Iteration  30: 3254764.951 ops/s
Iteration   1: 3238616.251 ops/s
Iteration   2: 3189614.772 ops/s
Iteration   3: 3220514.437 ops/s
Iteration   4: 3253349.540 ops/s
Iteration   5: 3279791.371 ops/s
Iteration   6: 3238210.251 ops/s
Iteration   7: 3234207.237 ops/s
Iteration   8: 3268335.612 ops/s
Iteration   9: 3221853.803 ops/s
Iteration  10: 3248861.327 ops/s
Iteration  11: 3237574.707 ops/s
Iteration  12: 3262278.556 ops/s
Iteration  13: 3251821.093 ops/s
Iteration  14: 3205281.820 ops/s
Iteration  15: 3233320.906 ops/s
Iteration  16: 3220978.696 ops/s
Iteration  17: 3174245.062 ops/s
Iteration  18: 3225661.379 ops/s
Iteration  19: 3224244.416 ops/s
Iteration  20: 3253589.655 ops/s
Iteration  21: 3198847.112 ops/s
Iteration  22: 3215689.028 ops/s
Iteration  23: 3275423.906 ops/s
Iteration  24: 3213558.288 ops/s
Iteration  25: 3193119.814 ops/s
Iteration  26: 3225396.977 ops/s
Iteration  27: 3217361.266 ops/s
Iteration  28: 3244093.092 ops/s
Iteration  29: 3240290.029 ops/s
Iteration  30: 3249800.954 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndex":
  3231864.379 ±(99.9%) 16844.882 ops/s [Average]
  (min, avg, max) = (3174245.062, 3231864.379, 3279791.371), stdev = 25212.628
  CI (99.9%): [3215019.497, 3248709.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  3231864.379 ± 16844.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 321791.487 ops/s
# Warmup Iteration   2: 785974.761 ops/s
# Warmup Iteration   3: 1014626.967 ops/s
# Warmup Iteration   4: 1020490.624 ops/s
# Warmup Iteration   5: 890079.216 ops/s
# Warmup Iteration   6: 963383.610 ops/s
# Warmup Iteration   7: 1012118.441 ops/s
# Warmup Iteration   8: 1003675.347 ops/s
# Warmup Iteration   9: 1012201.559 ops/s
# Warmup Iteration  10: 1012108.125 ops/s
# Warmup Iteration  11: 1013814.012 ops/s
# Warmup Iteration  12: 1010197.938 ops/s
# Warmup Iteration  13: 1016278.921 ops/s
# Warmup Iteration  14: 1009243.302 ops/s
# Warmup Iteration  15: 1014554.516 ops/s
# Warmup Iteration  16: 1017570.207 ops/s
# Warmup Iteration  17: 1008380.182 ops/s
# Warmup Iteration  18: 989824.430 ops/s
# Warmup Iteration  19: 1012956.138 ops/s
# Warmup Iteration  20: 1010165.822 ops/s
# Warmup Iteration  21: 1022600.530 ops/s
# Warmup Iteration  22: 1010928.950 ops/s
# Warmup Iteration  23: 1020269.571 ops/s
# Warmup Iteration  24: 1016090.308 ops/s
# Warmup Iteration  25: 1016352.257 ops/s
# Warmup Iteration  26: 1020423.101 ops/s
# Warmup Iteration  27: 1004393.069 ops/s
# Warmup Iteration  28: 1013682.963 ops/s
# Warmup Iteration  29: 1012637.705 ops/s
# Warmup Iteration  30: 1006417.468 ops/s
Iteration   1: 998939.345 ops/s
Iteration   2: 1011622.128 ops/s
Iteration   3: 1021017.382 ops/s
Iteration   4: 1003766.966 ops/s
Iteration   5: 1014896.170 ops/s
Iteration   6: 1017640.718 ops/s
Iteration   7: 1014167.781 ops/s
Iteration   8: 1017046.439 ops/s
Iteration   9: 1015673.951 ops/s
Iteration  10: 1012730.406 ops/s
Iteration  11: 996953.008 ops/s
Iteration  12: 1009883.364 ops/s
Iteration  13: 1012167.035 ops/s
Iteration  14: 1018878.060 ops/s
Iteration  15: 1022455.201 ops/s
Iteration  16: 1002770.575 ops/s
Iteration  17: 1006045.490 ops/s
Iteration  18: 1019277.375 ops/s
Iteration  19: 1007645.497 ops/s
Iteration  20: 1010923.124 ops/s
Iteration  21: 1015793.928 ops/s
Iteration  22: 1009395.127 ops/s
Iteration  23: 1018770.380 ops/s
Iteration  24: 1016396.531 ops/s
Iteration  25: 1011546.127 ops/s
Iteration  26: 1003696.702 ops/s
Iteration  27: 1009430.058 ops/s
Iteration  28: 1004841.945 ops/s
Iteration  29: 1009655.726 ops/s
Iteration  30: 1008793.201 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1011427.325 ±(99.9%) 4306.272 ops/s [Average]
  (min, avg, max) = (996953.008, 1011427.325, 1022455.201), stdev = 6445.425
  CI (99.9%): [1007121.053, 1015733.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1011427.325 ± 4306.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 400925.960 ops/s
# Warmup Iteration   2: 950254.378 ops/s
# Warmup Iteration   3: 996618.000 ops/s
# Warmup Iteration   4: 809444.187 ops/s
# Warmup Iteration   5: 997406.863 ops/s
# Warmup Iteration   6: 996776.377 ops/s
# Warmup Iteration   7: 990526.194 ops/s
# Warmup Iteration   8: 997222.178 ops/s
# Warmup Iteration   9: 993878.455 ops/s
# Warmup Iteration  10: 989378.369 ops/s
# Warmup Iteration  11: 991959.764 ops/s
# Warmup Iteration  12: 980440.393 ops/s
# Warmup Iteration  13: 997361.951 ops/s
# Warmup Iteration  14: 997473.831 ops/s
# Warmup Iteration  15: 996174.238 ops/s
# Warmup Iteration  16: 987821.996 ops/s
# Warmup Iteration  17: 992163.488 ops/s
# Warmup Iteration  18: 993563.574 ops/s
# Warmup Iteration  19: 1000220.620 ops/s
# Warmup Iteration  20: 994677.965 ops/s
# Warmup Iteration  21: 1003498.443 ops/s
# Warmup Iteration  22: 992280.854 ops/s
# Warmup Iteration  23: 999179.410 ops/s
# Warmup Iteration  24: 992242.560 ops/s
# Warmup Iteration  25: 997970.186 ops/s
# Warmup Iteration  26: 991226.497 ops/s
# Warmup Iteration  27: 987866.991 ops/s
# Warmup Iteration  28: 1001595.880 ops/s
# Warmup Iteration  29: 993503.652 ops/s
# Warmup Iteration  30: 999874.661 ops/s
Iteration   1: 1006479.160 ops/s
Iteration   2: 989680.869 ops/s
Iteration   3: 991066.004 ops/s
Iteration   4: 993530.892 ops/s
Iteration   5: 999915.434 ops/s
Iteration   6: 1002553.023 ops/s
Iteration   7: 987072.237 ops/s
Iteration   8: 990534.576 ops/s
Iteration   9: 987929.239 ops/s
Iteration  10: 1006886.984 ops/s
Iteration  11: 1000471.043 ops/s
Iteration  12: 992006.569 ops/s
Iteration  13: 1006875.162 ops/s
Iteration  14: 997352.150 ops/s
Iteration  15: 995599.496 ops/s
Iteration  16: 995966.850 ops/s
Iteration  17: 995768.796 ops/s
Iteration  18: 992523.836 ops/s
Iteration  19: 998647.267 ops/s
Iteration  20: 1001855.730 ops/s
Iteration  21: 996296.511 ops/s
Iteration  22: 1004919.879 ops/s
Iteration  23: 996562.987 ops/s
Iteration  24: 1008063.215 ops/s
Iteration  25: 973337.084 ops/s
Iteration  26: 1003206.132 ops/s
Iteration  27: 993104.066 ops/s
Iteration  28: 999781.411 ops/s
Iteration  29: 999548.749 ops/s
Iteration  30: 993804.180 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collectWith_target":
  996711.318 ±(99.9%) 4895.913 ops/s [Average]
  (min, avg, max) = (973337.084, 996711.318, 1008063.215), stdev = 7327.973
  CI (99.9%): [991815.404, 1001607.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  996711.318 ± 4895.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791795.077 ops/s
# Warmup Iteration   2: 1765330.158 ops/s
# Warmup Iteration   3: 1896212.864 ops/s
# Warmup Iteration   4: 1888137.388 ops/s
# Warmup Iteration   5: 1558918.988 ops/s
# Warmup Iteration   6: 1922637.944 ops/s
# Warmup Iteration   7: 1920945.092 ops/s
# Warmup Iteration   8: 1904913.905 ops/s
# Warmup Iteration   9: 1914220.312 ops/s
# Warmup Iteration  10: 1905446.442 ops/s
# Warmup Iteration  11: 1916473.339 ops/s
# Warmup Iteration  12: 1914688.756 ops/s
# Warmup Iteration  13: 1926374.060 ops/s
# Warmup Iteration  14: 1938723.519 ops/s
# Warmup Iteration  15: 1932989.872 ops/s
# Warmup Iteration  16: 1919740.975 ops/s
# Warmup Iteration  17: 1925271.068 ops/s
# Warmup Iteration  18: 1922858.474 ops/s
# Warmup Iteration  19: 1934573.001 ops/s
# Warmup Iteration  20: 1954736.191 ops/s
# Warmup Iteration  21: 1940802.504 ops/s
# Warmup Iteration  22: 1937701.132 ops/s
# Warmup Iteration  23: 1941219.146 ops/s
# Warmup Iteration  24: 1956058.522 ops/s
# Warmup Iteration  25: 1961017.056 ops/s
# Warmup Iteration  26: 1952011.101 ops/s
# Warmup Iteration  27: 1980681.841 ops/s
# Warmup Iteration  28: 1931619.765 ops/s
# Warmup Iteration  29: 1953220.472 ops/s
# Warmup Iteration  30: 1920953.102 ops/s
Iteration   1: 1907212.381 ops/s
Iteration   2: 1935774.785 ops/s
Iteration   3: 1925798.638 ops/s
Iteration   4: 1923084.804 ops/s
Iteration   5: 1949259.914 ops/s
Iteration   6: 1935732.629 ops/s
Iteration   7: 1950282.573 ops/s
Iteration   8: 1939891.885 ops/s
Iteration   9: 1935854.231 ops/s
Iteration  10: 1942665.586 ops/s
Iteration  11: 1917357.832 ops/s
Iteration  12: 1915997.392 ops/s
Iteration  13: 1993371.893 ops/s
Iteration  14: 1961873.413 ops/s
Iteration  15: 1983479.390 ops/s
Iteration  16: 1985150.715 ops/s
Iteration  17: 1978647.645 ops/s
Iteration  18: 1988369.271 ops/s
Iteration  19: 1986677.347 ops/s
Iteration  20: 1990235.891 ops/s
Iteration  21: 1980665.940 ops/s
Iteration  22: 1990301.875 ops/s
Iteration  23: 1988873.863 ops/s
Iteration  24: 1989193.270 ops/s
Iteration  25: 1981460.440 ops/s
Iteration  26: 1973063.649 ops/s
Iteration  27: 1982972.516 ops/s
Iteration  28: 1941775.113 ops/s
Iteration  29: 1990125.839 ops/s
Iteration  30: 1987162.100 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_collect_target":
  1961743.761 ±(99.9%) 18775.692 ops/s [Average]
  (min, avg, max) = (1907212.381, 1961743.761, 1993371.893), stdev = 28102.573
  CI (99.9%): [1942968.069, 1980519.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_collect_target  thrpt   30  1961743.761 ± 18775.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1710163.963 ops/s
# Warmup Iteration   2: 3502032.625 ops/s
# Warmup Iteration   3: 3407462.747 ops/s
# Warmup Iteration   4: 3436975.724 ops/s
# Warmup Iteration   5: 2874128.432 ops/s
# Warmup Iteration   6: 3415792.661 ops/s
# Warmup Iteration   7: 3430386.513 ops/s
# Warmup Iteration   8: 3355347.252 ops/s
# Warmup Iteration   9: 3378075.324 ops/s
# Warmup Iteration  10: 3378090.954 ops/s
# Warmup Iteration  11: 3410423.585 ops/s
# Warmup Iteration  12: 3406853.339 ops/s
# Warmup Iteration  13: 3352157.057 ops/s
# Warmup Iteration  14: 3373543.379 ops/s
# Warmup Iteration  15: 3406324.701 ops/s
# Warmup Iteration  16: 3360174.504 ops/s
# Warmup Iteration  17: 3353197.725 ops/s
# Warmup Iteration  18: 3342837.497 ops/s
# Warmup Iteration  19: 3356518.101 ops/s
# Warmup Iteration  20: 3406525.434 ops/s
# Warmup Iteration  21: 3404448.763 ops/s
# Warmup Iteration  22: 3425300.818 ops/s
# Warmup Iteration  23: 3423524.577 ops/s
# Warmup Iteration  24: 3420818.245 ops/s
# Warmup Iteration  25: 3421897.458 ops/s
# Warmup Iteration  26: 3436328.974 ops/s
# Warmup Iteration  27: 3431865.275 ops/s
# Warmup Iteration  28: 3405435.564 ops/s
# Warmup Iteration  29: 3403716.907 ops/s
# Warmup Iteration  30: 3429801.252 ops/s
Iteration   1: 3346117.416 ops/s
Iteration   2: 3337135.846 ops/s
Iteration   3: 3355359.800 ops/s
Iteration   4: 3368382.367 ops/s
Iteration   5: 3354988.191 ops/s
Iteration   6: 3367927.362 ops/s
Iteration   7: 3346278.125 ops/s
Iteration   8: 3374729.281 ops/s
Iteration   9: 3362558.139 ops/s
Iteration  10: 3326244.404 ops/s
Iteration  11: 3374400.117 ops/s
Iteration  12: 3343072.129 ops/s
Iteration  13: 3420542.213 ops/s
Iteration  14: 3357788.909 ops/s
Iteration  15: 3354842.108 ops/s
Iteration  16: 3393955.755 ops/s
Iteration  17: 3447826.505 ops/s
Iteration  18: 3440676.987 ops/s
Iteration  19: 3448047.561 ops/s
Iteration  20: 3426881.824 ops/s
Iteration  21: 3428811.703 ops/s
Iteration  22: 3433408.734 ops/s
Iteration  23: 3428493.206 ops/s
Iteration  24: 3404632.705 ops/s
Iteration  25: 3336766.490 ops/s
Iteration  26: 3396432.483 ops/s
Iteration  27: 3334530.633 ops/s
Iteration  28: 3410130.651 ops/s
Iteration  29: 3410365.253 ops/s
Iteration  30: 3430057.715 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_contains":
  3385379.487 ±(99.9%) 26081.921 ops/s [Average]
  (min, avg, max) = (3326244.404, 3385379.487, 3448047.561), stdev = 39038.194
  CI (99.9%): [3359297.566, 3411461.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_contains  thrpt   30  3385379.487 ± 26081.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1518496.040 ops/s
# Warmup Iteration   2: 2994308.129 ops/s
# Warmup Iteration   3: 3160845.072 ops/s
# Warmup Iteration   4: 3196209.797 ops/s
# Warmup Iteration   5: 2672564.175 ops/s
# Warmup Iteration   6: 3150562.916 ops/s
# Warmup Iteration   7: 3185799.137 ops/s
# Warmup Iteration   8: 3190826.055 ops/s
# Warmup Iteration   9: 3201916.679 ops/s
# Warmup Iteration  10: 3174856.590 ops/s
# Warmup Iteration  11: 3170988.808 ops/s
# Warmup Iteration  12: 3104005.723 ops/s
# Warmup Iteration  13: 3109970.865 ops/s
# Warmup Iteration  14: 3122238.395 ops/s
# Warmup Iteration  15: 3095802.944 ops/s
# Warmup Iteration  16: 3101254.288 ops/s
# Warmup Iteration  17: 3095393.392 ops/s
# Warmup Iteration  18: 3189406.384 ops/s
# Warmup Iteration  19: 3187714.061 ops/s
# Warmup Iteration  20: 3194949.055 ops/s
# Warmup Iteration  21: 3127703.981 ops/s
# Warmup Iteration  22: 3195606.512 ops/s
# Warmup Iteration  23: 3200702.904 ops/s
# Warmup Iteration  24: 3201961.688 ops/s
# Warmup Iteration  25: 3202448.675 ops/s
# Warmup Iteration  26: 3181983.083 ops/s
# Warmup Iteration  27: 3199653.783 ops/s
# Warmup Iteration  28: 3187978.506 ops/s
# Warmup Iteration  29: 3185629.346 ops/s
# Warmup Iteration  30: 3163697.278 ops/s
Iteration   1: 3188454.013 ops/s
Iteration   2: 3210608.868 ops/s
Iteration   3: 3207488.626 ops/s
Iteration   4: 3152872.708 ops/s
Iteration   5: 3129435.901 ops/s
Iteration   6: 3142576.058 ops/s
Iteration   7: 3157245.146 ops/s
Iteration   8: 3123812.447 ops/s
Iteration   9: 3158348.097 ops/s
Iteration  10: 3133765.371 ops/s
Iteration  11: 3159170.488 ops/s
Iteration  12: 3138880.637 ops/s
Iteration  13: 3205650.360 ops/s
Iteration  14: 3170849.003 ops/s
Iteration  15: 3149030.876 ops/s
Iteration  16: 3182773.723 ops/s
Iteration  17: 3199040.765 ops/s
Iteration  18: 3204486.136 ops/s
Iteration  19: 3210631.438 ops/s
Iteration  20: 3206576.663 ops/s
Iteration  21: 3201362.031 ops/s
Iteration  22: 3208757.098 ops/s
Iteration  23: 3199738.307 ops/s
Iteration  24: 3207485.176 ops/s
Iteration  25: 3192606.299 ops/s
Iteration  26: 3199742.061 ops/s
Iteration  27: 3203187.874 ops/s
Iteration  28: 3207526.399 ops/s
Iteration  29: 3208589.674 ops/s
Iteration  30: 3202187.980 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAll":
  3182096.007 ±(99.9%) 19470.200 ops/s [Average]
  (min, avg, max) = (3123812.447, 3182096.007, 3210631.438), stdev = 29142.080
  CI (99.9%): [3162625.808, 3201566.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_containsAll  thrpt   30  3182096.007 ± 19470.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1671753.938 ops/s
# Warmup Iteration   2: 3768875.875 ops/s
# Warmup Iteration   3: 3834585.008 ops/s
# Warmup Iteration   4: 3352469.105 ops/s
# Warmup Iteration   5: 3685553.184 ops/s
# Warmup Iteration   6: 3881370.068 ops/s
# Warmup Iteration   7: 3892873.963 ops/s
# Warmup Iteration   8: 3895270.043 ops/s
# Warmup Iteration   9: 3888517.606 ops/s
# Warmup Iteration  10: 3901612.903 ops/s
# Warmup Iteration  11: 3897206.394 ops/s
# Warmup Iteration  12: 3889890.361 ops/s
# Warmup Iteration  13: 3892231.338 ops/s
# Warmup Iteration  14: 3890690.627 ops/s
# Warmup Iteration  15: 3886826.720 ops/s
# Warmup Iteration  16: 3897154.244 ops/s
# Warmup Iteration  17: 3900065.976 ops/s
# Warmup Iteration  18: 3884372.224 ops/s
# Warmup Iteration  19: 3892632.269 ops/s
# Warmup Iteration  20: 3888405.864 ops/s
# Warmup Iteration  21: 3882458.323 ops/s
# Warmup Iteration  22: 3877705.103 ops/s
# Warmup Iteration  23: 3878343.882 ops/s
# Warmup Iteration  24: 3871572.773 ops/s
# Warmup Iteration  25: 3866140.715 ops/s
# Warmup Iteration  26: 3872848.947 ops/s
# Warmup Iteration  27: 3866447.371 ops/s
# Warmup Iteration  28: 3866331.009 ops/s
# Warmup Iteration  29: 3868178.680 ops/s
# Warmup Iteration  30: 3880818.194 ops/s
Iteration   1: 3875863.287 ops/s
Iteration   2: 3883071.517 ops/s
Iteration   3: 3894596.481 ops/s
Iteration   4: 3900455.276 ops/s
Iteration   5: 3898851.521 ops/s
Iteration   6: 3871603.451 ops/s
Iteration   7: 3897046.536 ops/s
Iteration   8: 3885172.363 ops/s
Iteration   9: 3889631.473 ops/s
Iteration  10: 3893472.188 ops/s
Iteration  11: 3902309.004 ops/s
Iteration  12: 3888541.134 ops/s
Iteration  13: 3891461.360 ops/s
Iteration  14: 3898697.735 ops/s
Iteration  15: 3894386.246 ops/s
Iteration  16: 3890422.960 ops/s
Iteration  17: 3897229.729 ops/s
Iteration  18: 3897010.353 ops/s
Iteration  19: 3898507.806 ops/s
Iteration  20: 3899819.111 ops/s
Iteration  21: 3895307.985 ops/s
Iteration  22: 3885424.022 ops/s
Iteration  23: 3888275.377 ops/s
Iteration  24: 3900151.850 ops/s
Iteration  25: 3887812.045 ops/s
Iteration  26: 3886966.492 ops/s
Iteration  27: 3882734.194 ops/s
Iteration  28: 3895958.339 ops/s
Iteration  29: 3901439.751 ops/s
Iteration  30: 3893263.809 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllArray":
  3892182.780 ±(99.9%) 5050.694 ops/s [Average]
  (min, avg, max) = (3871603.451, 3892182.780, 3902309.004), stdev = 7559.641
  CI (99.9%): [3887132.086, 3897233.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  3892182.780 ± 5050.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1769335.544 ops/s
# Warmup Iteration   2: 3390455.293 ops/s
# Warmup Iteration   3: 3509013.193 ops/s
# Warmup Iteration   4: 3487878.242 ops/s
# Warmup Iteration   5: 2967003.229 ops/s
# Warmup Iteration   6: 3521790.317 ops/s
# Warmup Iteration   7: 3525240.843 ops/s
# Warmup Iteration   8: 3533531.517 ops/s
# Warmup Iteration   9: 3531574.872 ops/s
# Warmup Iteration  10: 3517705.919 ops/s
# Warmup Iteration  11: 3485286.623 ops/s
# Warmup Iteration  12: 3477315.768 ops/s
# Warmup Iteration  13: 3485788.858 ops/s
# Warmup Iteration  14: 3525567.623 ops/s
# Warmup Iteration  15: 3518705.725 ops/s
# Warmup Iteration  16: 3522519.767 ops/s
# Warmup Iteration  17: 3532632.493 ops/s
# Warmup Iteration  18: 3519225.388 ops/s
# Warmup Iteration  19: 3518507.068 ops/s
# Warmup Iteration  20: 3533474.022 ops/s
# Warmup Iteration  21: 3531617.336 ops/s
# Warmup Iteration  22: 3535334.804 ops/s
# Warmup Iteration  23: 3531431.662 ops/s
# Warmup Iteration  24: 3527417.583 ops/s
# Warmup Iteration  25: 3512129.465 ops/s
# Warmup Iteration  26: 3532211.045 ops/s
# Warmup Iteration  27: 3533358.952 ops/s
# Warmup Iteration  28: 3541094.669 ops/s
# Warmup Iteration  29: 3534590.436 ops/s
# Warmup Iteration  30: 3537984.782 ops/s
Iteration   1: 3536574.160 ops/s
Iteration   2: 3539111.373 ops/s
Iteration   3: 3534324.376 ops/s
Iteration   4: 3528951.292 ops/s
Iteration   5: 3548168.145 ops/s
Iteration   6: 3534079.421 ops/s
Iteration   7: 3533554.909 ops/s
Iteration   8: 3540168.161 ops/s
Iteration   9: 3533639.106 ops/s
Iteration  10: 3533713.571 ops/s
Iteration  11: 3540675.083 ops/s
Iteration  12: 3535085.400 ops/s
Iteration  13: 3506743.357 ops/s
Iteration  14: 3528945.847 ops/s
Iteration  15: 3522906.603 ops/s
Iteration  16: 3525716.898 ops/s
Iteration  17: 3496946.669 ops/s
Iteration  18: 3492547.585 ops/s
Iteration  19: 3514980.356 ops/s
Iteration  20: 3520494.316 ops/s
Iteration  21: 3531768.688 ops/s
Iteration  22: 3505119.759 ops/s
Iteration  23: 3523724.495 ops/s
Iteration  24: 3530695.985 ops/s
Iteration  25: 3516482.008 ops/s
Iteration  26: 3481460.345 ops/s
Iteration  27: 3488505.514 ops/s
Iteration  28: 3524274.841 ops/s
Iteration  29: 3524885.630 ops/s
Iteration  30: 3534573.574 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_containsAllIterable":
  3523627.249 ±(99.9%) 11083.968 ops/s [Average]
  (min, avg, max) = (3481460.345, 3523627.249, 3548168.145), stdev = 16589.963
  CI (99.9%): [3512543.281, 3534711.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3523627.249 ± 11083.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3418027.028 ops/s
# Warmup Iteration   2: 7856062.034 ops/s
# Warmup Iteration   3: 8250953.608 ops/s
# Warmup Iteration   4: 7560989.478 ops/s
# Warmup Iteration   5: 7572325.631 ops/s
# Warmup Iteration   6: 8275438.040 ops/s
# Warmup Iteration   7: 8267835.764 ops/s
# Warmup Iteration   8: 8278132.245 ops/s
# Warmup Iteration   9: 8250780.095 ops/s
# Warmup Iteration  10: 8274311.215 ops/s
# Warmup Iteration  11: 8275386.467 ops/s
# Warmup Iteration  12: 8272287.931 ops/s
# Warmup Iteration  13: 8283655.776 ops/s
# Warmup Iteration  14: 8268057.058 ops/s
# Warmup Iteration  15: 8249585.314 ops/s
# Warmup Iteration  16: 8294139.458 ops/s
# Warmup Iteration  17: 8277585.867 ops/s
# Warmup Iteration  18: 8272175.152 ops/s
# Warmup Iteration  19: 8262259.446 ops/s
# Warmup Iteration  20: 8269346.273 ops/s
# Warmup Iteration  21: 8287623.463 ops/s
# Warmup Iteration  22: 8279455.244 ops/s
# Warmup Iteration  23: 8212778.398 ops/s
# Warmup Iteration  24: 8284271.165 ops/s
# Warmup Iteration  25: 8244812.139 ops/s
# Warmup Iteration  26: 8248907.366 ops/s
# Warmup Iteration  27: 8269667.056 ops/s
# Warmup Iteration  28: 8301695.287 ops/s
# Warmup Iteration  29: 8257198.051 ops/s
# Warmup Iteration  30: 8293877.933 ops/s
Iteration   1: 8287336.085 ops/s
Iteration   2: 8261651.980 ops/s
Iteration   3: 8285414.536 ops/s
Iteration   4: 8303755.574 ops/s
Iteration   5: 8324571.179 ops/s
Iteration   6: 8293793.979 ops/s
Iteration   7: 8272957.068 ops/s
Iteration   8: 8271407.818 ops/s
Iteration   9: 8278034.905 ops/s
Iteration  10: 8239398.586 ops/s
Iteration  11: 8281704.901 ops/s
Iteration  12: 8308686.662 ops/s
Iteration  13: 8302338.484 ops/s
Iteration  14: 8301253.942 ops/s
Iteration  15: 8302121.541 ops/s
Iteration  16: 8267752.379 ops/s
Iteration  17: 8258830.179 ops/s
Iteration  18: 8269048.142 ops/s
Iteration  19: 8301107.399 ops/s
Iteration  20: 8270209.710 ops/s
Iteration  21: 8285177.309 ops/s
Iteration  22: 8259587.102 ops/s
Iteration  23: 8298279.955 ops/s
Iteration  24: 8305473.024 ops/s
Iteration  25: 8258062.233 ops/s
Iteration  26: 8303459.577 ops/s
Iteration  27: 8264090.158 ops/s
Iteration  28: 8254032.057 ops/s
Iteration  29: 8277771.176 ops/s
Iteration  30: 8272812.404 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_corresponds":
  8282004.001 ±(99.9%) 13467.760 ops/s [Average]
  (min, avg, max) = (8239398.586, 8282004.001, 8324571.179), stdev = 20157.911
  CI (99.9%): [8268536.241, 8295471.761] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_corresponds  thrpt   30  8282004.001 ± 13467.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9755998.610 ops/s
# Warmup Iteration   2: 19125958.751 ops/s
# Warmup Iteration   3: 19398741.460 ops/s
# Warmup Iteration   4: 19429084.111 ops/s
# Warmup Iteration   5: 16296532.567 ops/s
# Warmup Iteration   6: 19413638.041 ops/s
# Warmup Iteration   7: 19470822.974 ops/s
# Warmup Iteration   8: 19479772.458 ops/s
# Warmup Iteration   9: 19455513.621 ops/s
# Warmup Iteration  10: 19456053.559 ops/s
# Warmup Iteration  11: 19420464.379 ops/s
# Warmup Iteration  12: 19408418.679 ops/s
# Warmup Iteration  13: 19436679.688 ops/s
# Warmup Iteration  14: 19446276.567 ops/s
# Warmup Iteration  15: 19493185.508 ops/s
# Warmup Iteration  16: 19483615.981 ops/s
# Warmup Iteration  17: 19510474.891 ops/s
# Warmup Iteration  18: 19415362.018 ops/s
# Warmup Iteration  19: 19426193.814 ops/s
# Warmup Iteration  20: 19503553.887 ops/s
# Warmup Iteration  21: 19465053.274 ops/s
# Warmup Iteration  22: 19441437.723 ops/s
# Warmup Iteration  23: 19454840.656 ops/s
# Warmup Iteration  24: 19518776.815 ops/s
# Warmup Iteration  25: 19399404.574 ops/s
# Warmup Iteration  26: 19336532.662 ops/s
# Warmup Iteration  27: 19412934.917 ops/s
# Warmup Iteration  28: 19418016.979 ops/s
# Warmup Iteration  29: 19336079.928 ops/s
# Warmup Iteration  30: 19426686.670 ops/s
Iteration   1: 19496596.911 ops/s
Iteration   2: 19409108.408 ops/s
Iteration   3: 19368042.943 ops/s
Iteration   4: 19448445.949 ops/s
Iteration   5: 19291006.784 ops/s
Iteration   6: 19421405.280 ops/s
Iteration   7: 19497470.908 ops/s
Iteration   8: 19484985.663 ops/s
Iteration   9: 19428264.024 ops/s
Iteration  10: 19405091.790 ops/s
Iteration  11: 19395653.751 ops/s
Iteration  12: 19488819.551 ops/s
Iteration  13: 19455963.628 ops/s
Iteration  14: 19490180.334 ops/s
Iteration  15: 19420345.794 ops/s
Iteration  16: 19471701.378 ops/s
Iteration  17: 19435545.281 ops/s
Iteration  18: 19410663.344 ops/s
Iteration  19: 19451501.341 ops/s
Iteration  20: 19342120.863 ops/s
Iteration  21: 19357649.527 ops/s
Iteration  22: 19464428.886 ops/s
Iteration  23: 19474093.118 ops/s
Iteration  24: 19359718.413 ops/s
Iteration  25: 19449283.921 ops/s
Iteration  26: 19431725.725 ops/s
Iteration  27: 19428755.037 ops/s
Iteration  28: 19527120.023 ops/s
Iteration  29: 19491203.482 ops/s
Iteration  30: 19499846.167 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_count":
  19436557.941 ±(99.9%) 36477.415 ops/s [Average]
  (min, avg, max) = (19291006.784, 19436557.941, 19527120.023), stdev = 54597.681
  CI (99.9%): [19400080.526, 19473035.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_count  thrpt   30  19436557.941 ± 36477.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 494006.029 ops/s
# Warmup Iteration   2: 1015410.738 ops/s
# Warmup Iteration   3: 1128029.421 ops/s
# Warmup Iteration   4: 1136589.818 ops/s
# Warmup Iteration   5: 934635.048 ops/s
# Warmup Iteration   6: 1126942.813 ops/s
# Warmup Iteration   7: 1131258.714 ops/s
# Warmup Iteration   8: 1133691.324 ops/s
# Warmup Iteration   9: 1135359.168 ops/s
# Warmup Iteration  10: 1132010.792 ops/s
# Warmup Iteration  11: 1136506.049 ops/s
# Warmup Iteration  12: 1133223.746 ops/s
# Warmup Iteration  13: 1129788.566 ops/s
# Warmup Iteration  14: 1131098.877 ops/s
# Warmup Iteration  15: 1128280.473 ops/s
# Warmup Iteration  16: 1131867.911 ops/s
# Warmup Iteration  17: 1132910.744 ops/s
# Warmup Iteration  18: 1126280.255 ops/s
# Warmup Iteration  19: 1121842.052 ops/s
# Warmup Iteration  20: 1120651.313 ops/s
# Warmup Iteration  21: 1122303.515 ops/s
# Warmup Iteration  22: 1125844.727 ops/s
# Warmup Iteration  23: 1126286.203 ops/s
# Warmup Iteration  24: 1126212.917 ops/s
# Warmup Iteration  25: 1124904.843 ops/s
# Warmup Iteration  26: 1132395.579 ops/s
# Warmup Iteration  27: 1130928.579 ops/s
# Warmup Iteration  28: 1128597.665 ops/s
# Warmup Iteration  29: 1128778.978 ops/s
# Warmup Iteration  30: 1126002.209 ops/s
Iteration   1: 1123063.191 ops/s
Iteration   2: 1129210.548 ops/s
Iteration   3: 1126425.390 ops/s
Iteration   4: 1125406.358 ops/s
Iteration   5: 1129341.588 ops/s
Iteration   6: 1125373.151 ops/s
Iteration   7: 1121777.735 ops/s
Iteration   8: 1127276.078 ops/s
Iteration   9: 1126943.094 ops/s
Iteration  10: 1125744.071 ops/s
Iteration  11: 1129352.450 ops/s
Iteration  12: 1123882.939 ops/s
Iteration  13: 1122238.418 ops/s
Iteration  14: 1122207.185 ops/s
Iteration  15: 1107651.395 ops/s
Iteration  16: 1120441.362 ops/s
Iteration  17: 1125909.403 ops/s
Iteration  18: 1128063.941 ops/s
Iteration  19: 1128481.086 ops/s
Iteration  20: 1122690.466 ops/s
Iteration  21: 1131498.058 ops/s
Iteration  22: 1121795.369 ops/s
Iteration  23: 1119421.509 ops/s
Iteration  24: 1136408.183 ops/s
Iteration  25: 1125508.415 ops/s
Iteration  26: 1127302.209 ops/s
Iteration  27: 1129968.950 ops/s
Iteration  28: 1125089.036 ops/s
Iteration  29: 1128526.238 ops/s
Iteration  30: 1133046.951 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countBy":
  1125668.159 ±(99.9%) 3409.905 ops/s [Average]
  (min, avg, max) = (1107651.395, 1125668.159, 1136408.183), stdev = 5103.786
  CI (99.9%): [1122258.254, 1129078.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_countBy  thrpt   30  1125668.159 ± 3409.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88369.425 ops/s
# Warmup Iteration   2: 135288.728 ops/s
# Warmup Iteration   3: 165813.639 ops/s
# Warmup Iteration   4: 165311.940 ops/s
# Warmup Iteration   5: 165525.072 ops/s
# Warmup Iteration   6: 165910.408 ops/s
# Warmup Iteration   7: 145321.376 ops/s
# Warmup Iteration   8: 160337.999 ops/s
# Warmup Iteration   9: 165927.811 ops/s
# Warmup Iteration  10: 166523.508 ops/s
# Warmup Iteration  11: 166284.948 ops/s
# Warmup Iteration  12: 165579.396 ops/s
# Warmup Iteration  13: 166019.173 ops/s
# Warmup Iteration  14: 166597.174 ops/s
# Warmup Iteration  15: 166099.893 ops/s
# Warmup Iteration  16: 165996.779 ops/s
# Warmup Iteration  17: 166608.282 ops/s
# Warmup Iteration  18: 166040.857 ops/s
# Warmup Iteration  19: 166260.762 ops/s
# Warmup Iteration  20: 166454.468 ops/s
# Warmup Iteration  21: 165551.646 ops/s
# Warmup Iteration  22: 166635.989 ops/s
# Warmup Iteration  23: 166832.970 ops/s
# Warmup Iteration  24: 166418.981 ops/s
# Warmup Iteration  25: 166410.135 ops/s
# Warmup Iteration  26: 166279.784 ops/s
# Warmup Iteration  27: 166569.086 ops/s
# Warmup Iteration  28: 166675.840 ops/s
# Warmup Iteration  29: 166881.595 ops/s
# Warmup Iteration  30: 167050.748 ops/s
Iteration   1: 167041.146 ops/s
Iteration   2: 166842.105 ops/s
Iteration   3: 166545.920 ops/s
Iteration   4: 165805.222 ops/s
Iteration   5: 166623.812 ops/s
Iteration   6: 166722.819 ops/s
Iteration   7: 166827.144 ops/s
Iteration   8: 166187.468 ops/s
Iteration   9: 166669.938 ops/s
Iteration  10: 166606.448 ops/s
Iteration  11: 167017.401 ops/s
Iteration  12: 166437.330 ops/s
Iteration  13: 166409.759 ops/s
Iteration  14: 166472.182 ops/s
Iteration  15: 166032.577 ops/s
Iteration  16: 166685.760 ops/s
Iteration  17: 166408.859 ops/s
Iteration  18: 166733.170 ops/s
Iteration  19: 166222.742 ops/s
Iteration  20: 166670.418 ops/s
Iteration  21: 166744.548 ops/s
Iteration  22: 166310.467 ops/s
Iteration  23: 166807.133 ops/s
Iteration  24: 166382.973 ops/s
Iteration  25: 166715.522 ops/s
Iteration  26: 166315.131 ops/s
Iteration  27: 166510.144 ops/s
Iteration  28: 166442.115 ops/s
Iteration  29: 166444.428 ops/s
Iteration  30: 166418.395 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByEach":
  166535.102 ±(99.9%) 182.647 ops/s [Average]
  (min, avg, max) = (165805.222, 166535.102, 167041.146), stdev = 273.378
  CI (99.9%): [166352.455, 166717.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_countByEach  thrpt   30  166535.102 ± 182.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 484966.182 ops/s
# Warmup Iteration   2: 942232.489 ops/s
# Warmup Iteration   3: 1057908.360 ops/s
# Warmup Iteration   4: 1066077.546 ops/s
# Warmup Iteration   5: 928361.715 ops/s
# Warmup Iteration   6: 1016507.902 ops/s
# Warmup Iteration   7: 1067705.038 ops/s
# Warmup Iteration   8: 1064168.362 ops/s
# Warmup Iteration   9: 1063173.377 ops/s
# Warmup Iteration  10: 1070178.826 ops/s
# Warmup Iteration  11: 1068724.408 ops/s
# Warmup Iteration  12: 1067193.860 ops/s
# Warmup Iteration  13: 1065732.436 ops/s
# Warmup Iteration  14: 1061871.219 ops/s
# Warmup Iteration  15: 1062596.106 ops/s
# Warmup Iteration  16: 1066440.686 ops/s
# Warmup Iteration  17: 1065262.800 ops/s
# Warmup Iteration  18: 1061126.336 ops/s
# Warmup Iteration  19: 1066804.059 ops/s
# Warmup Iteration  20: 1066225.493 ops/s
# Warmup Iteration  21: 1060702.233 ops/s
# Warmup Iteration  22: 1065220.757 ops/s
# Warmup Iteration  23: 1055747.741 ops/s
# Warmup Iteration  24: 1059131.808 ops/s
# Warmup Iteration  25: 1066736.805 ops/s
# Warmup Iteration  26: 1062123.327 ops/s
# Warmup Iteration  27: 1062324.143 ops/s
# Warmup Iteration  28: 1056343.760 ops/s
# Warmup Iteration  29: 1065275.718 ops/s
# Warmup Iteration  30: 1060566.581 ops/s
Iteration   1: 1058420.615 ops/s
Iteration   2: 1060599.563 ops/s
Iteration   3: 1062874.395 ops/s
Iteration   4: 1061019.476 ops/s
Iteration   5: 1056012.693 ops/s
Iteration   6: 1063094.911 ops/s
Iteration   7: 1057963.994 ops/s
Iteration   8: 1058289.567 ops/s
Iteration   9: 1051293.311 ops/s
Iteration  10: 1054291.028 ops/s
Iteration  11: 1061994.746 ops/s
Iteration  12: 1066657.770 ops/s
Iteration  13: 1061738.164 ops/s
Iteration  14: 1066221.520 ops/s
Iteration  15: 1067378.101 ops/s
Iteration  16: 1066753.323 ops/s
Iteration  17: 1067616.113 ops/s
Iteration  18: 1061330.358 ops/s
Iteration  19: 1063456.226 ops/s
Iteration  20: 1059135.564 ops/s
Iteration  21: 1052102.404 ops/s
Iteration  22: 1061009.322 ops/s
Iteration  23: 1056600.917 ops/s
Iteration  24: 1053439.683 ops/s
Iteration  25: 1061971.953 ops/s
Iteration  26: 1053864.160 ops/s
Iteration  27: 1053851.493 ops/s
Iteration  28: 1051990.072 ops/s
Iteration  29: 1065625.844 ops/s
Iteration  30: 1054278.624 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countByWith":
  1059695.864 ±(99.9%) 3372.068 ops/s [Average]
  (min, avg, max) = (1051293.311, 1059695.864, 1067616.113), stdev = 5047.153
  CI (99.9%): [1056323.795, 1063067.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_countByWith  thrpt   30  1059695.864 ± 3372.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11500733.372 ops/s
# Warmup Iteration   2: 17735901.514 ops/s
# Warmup Iteration   3: 21374193.900 ops/s
# Warmup Iteration   4: 21558324.963 ops/s
# Warmup Iteration   5: 21581338.713 ops/s
# Warmup Iteration   6: 18241097.225 ops/s
# Warmup Iteration   7: 21635155.511 ops/s
# Warmup Iteration   8: 21546537.392 ops/s
# Warmup Iteration   9: 21516536.119 ops/s
# Warmup Iteration  10: 21623215.656 ops/s
# Warmup Iteration  11: 21641312.757 ops/s
# Warmup Iteration  12: 21544402.536 ops/s
# Warmup Iteration  13: 21480737.204 ops/s
# Warmup Iteration  14: 21647711.992 ops/s
# Warmup Iteration  15: 21579326.810 ops/s
# Warmup Iteration  16: 21520235.986 ops/s
# Warmup Iteration  17: 21470155.717 ops/s
# Warmup Iteration  18: 21537443.538 ops/s
# Warmup Iteration  19: 21412276.051 ops/s
# Warmup Iteration  20: 21559086.428 ops/s
# Warmup Iteration  21: 21501484.869 ops/s
# Warmup Iteration  22: 21503032.537 ops/s
# Warmup Iteration  23: 21383485.014 ops/s
# Warmup Iteration  24: 21484799.443 ops/s
# Warmup Iteration  25: 21576167.882 ops/s
# Warmup Iteration  26: 21402773.232 ops/s
# Warmup Iteration  27: 21458499.725 ops/s
# Warmup Iteration  28: 21495541.631 ops/s
# Warmup Iteration  29: 21602749.133 ops/s
# Warmup Iteration  30: 21463623.680 ops/s
Iteration   1: 21515333.758 ops/s
Iteration   2: 21542750.655 ops/s
Iteration   3: 21418666.508 ops/s
Iteration   4: 21615342.648 ops/s
Iteration   5: 21583626.737 ops/s
Iteration   6: 21541459.278 ops/s
Iteration   7: 21546138.456 ops/s
Iteration   8: 21500872.731 ops/s
Iteration   9: 21514203.523 ops/s
Iteration  10: 21753843.534 ops/s
Iteration  11: 21279186.319 ops/s
Iteration  12: 21576059.432 ops/s
Iteration  13: 21296860.576 ops/s
Iteration  14: 21684779.844 ops/s
Iteration  15: 21569806.835 ops/s
Iteration  16: 21500261.125 ops/s
Iteration  17: 21485513.023 ops/s
Iteration  18: 21518889.209 ops/s
Iteration  19: 21543325.805 ops/s
Iteration  20: 21377735.037 ops/s
Iteration  21: 21508500.366 ops/s
Iteration  22: 21639514.440 ops/s
Iteration  23: 21537362.123 ops/s
Iteration  24: 21510718.097 ops/s
Iteration  25: 21710551.733 ops/s
Iteration  26: 21668501.904 ops/s
Iteration  27: 21333086.714 ops/s
Iteration  28: 21488663.625 ops/s
Iteration  29: 21573112.072 ops/s
Iteration  30: 21627964.387 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_countWith":
  21532087.683 ±(99.9%) 74673.893 ops/s [Average]
  (min, avg, max) = (21279186.319, 21532087.683, 21753843.534), stdev = 111768.376
  CI (99.9%): [21457413.790, 21606761.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_countWith  thrpt   30  21532087.683 ± 74673.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33236409.814 ops/s
# Warmup Iteration   2: 36477058.004 ops/s
# Warmup Iteration   3: 48001381.917 ops/s
# Warmup Iteration   4: 48318987.986 ops/s
# Warmup Iteration   5: 47491026.215 ops/s
# Warmup Iteration   6: 47894421.692 ops/s
# Warmup Iteration   7: 48224582.851 ops/s
# Warmup Iteration   8: 48289474.348 ops/s
# Warmup Iteration   9: 47714689.736 ops/s
# Warmup Iteration  10: 48204321.758 ops/s
# Warmup Iteration  11: 40122977.068 ops/s
# Warmup Iteration  12: 47960413.931 ops/s
# Warmup Iteration  13: 47840944.044 ops/s
# Warmup Iteration  14: 48097853.011 ops/s
# Warmup Iteration  15: 48104315.990 ops/s
# Warmup Iteration  16: 47872934.202 ops/s
# Warmup Iteration  17: 48024705.471 ops/s
# Warmup Iteration  18: 48158881.039 ops/s
# Warmup Iteration  19: 48089952.265 ops/s
# Warmup Iteration  20: 48073093.800 ops/s
# Warmup Iteration  21: 48156335.549 ops/s
# Warmup Iteration  22: 48016718.872 ops/s
# Warmup Iteration  23: 47888522.431 ops/s
# Warmup Iteration  24: 47999806.556 ops/s
# Warmup Iteration  25: 48259437.530 ops/s
# Warmup Iteration  26: 48221181.902 ops/s
# Warmup Iteration  27: 47886921.152 ops/s
# Warmup Iteration  28: 48010372.630 ops/s
# Warmup Iteration  29: 48033946.978 ops/s
# Warmup Iteration  30: 48050462.705 ops/s
Iteration   1: 47778377.574 ops/s
Iteration   2: 47991015.461 ops/s
Iteration   3: 48124502.466 ops/s
Iteration   4: 47874487.055 ops/s
Iteration   5: 48257233.063 ops/s
Iteration   6: 48159374.984 ops/s
Iteration   7: 48222680.690 ops/s
Iteration   8: 48107485.067 ops/s
Iteration   9: 48473869.345 ops/s
Iteration  10: 48362842.611 ops/s
Iteration  11: 47161965.244 ops/s
Iteration  12: 48132957.099 ops/s
Iteration  13: 48119448.196 ops/s
Iteration  14: 47798185.111 ops/s
Iteration  15: 48268459.562 ops/s
Iteration  16: 47965876.551 ops/s
Iteration  17: 48393348.747 ops/s
Iteration  18: 47617105.212 ops/s
Iteration  19: 48193771.897 ops/s
Iteration  20: 48190288.099 ops/s
Iteration  21: 47959073.640 ops/s
Iteration  22: 47926150.576 ops/s
Iteration  23: 47995848.362 ops/s
Iteration  24: 47757861.070 ops/s
Iteration  25: 47716118.640 ops/s
Iteration  26: 47947866.331 ops/s
Iteration  27: 48215518.411 ops/s
Iteration  28: 47761308.058 ops/s
Iteration  29: 47831897.866 ops/s
Iteration  30: 48094332.391 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detect":
  48013308.313 ±(99.9%) 179660.201 ops/s [Average]
  (min, avg, max) = (47161965.244, 48013308.313, 48473869.345), stdev = 268906.952
  CI (99.9%): [47833648.112, 48192968.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detect  thrpt   30  48013308.313 ± 179660.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11372422.137 ops/s
# Warmup Iteration   2: 23621715.460 ops/s
# Warmup Iteration   3: 23212811.921 ops/s
# Warmup Iteration   4: 19687160.937 ops/s
# Warmup Iteration   5: 23294394.446 ops/s
# Warmup Iteration   6: 23255358.553 ops/s
# Warmup Iteration   7: 23118577.714 ops/s
# Warmup Iteration   8: 23412616.526 ops/s
# Warmup Iteration   9: 23353143.582 ops/s
# Warmup Iteration  10: 23231194.036 ops/s
# Warmup Iteration  11: 23200781.268 ops/s
# Warmup Iteration  12: 23265334.281 ops/s
# Warmup Iteration  13: 23220936.073 ops/s
# Warmup Iteration  14: 23400194.139 ops/s
# Warmup Iteration  15: 23286199.088 ops/s
# Warmup Iteration  16: 23375001.746 ops/s
# Warmup Iteration  17: 23310983.894 ops/s
# Warmup Iteration  18: 23309874.333 ops/s
# Warmup Iteration  19: 23317255.786 ops/s
# Warmup Iteration  20: 23396011.531 ops/s
# Warmup Iteration  21: 23377862.143 ops/s
# Warmup Iteration  22: 23298369.962 ops/s
# Warmup Iteration  23: 23453617.510 ops/s
# Warmup Iteration  24: 23328893.864 ops/s
# Warmup Iteration  25: 23217050.886 ops/s
# Warmup Iteration  26: 23339722.340 ops/s
# Warmup Iteration  27: 23286543.677 ops/s
# Warmup Iteration  28: 23472895.332 ops/s
# Warmup Iteration  29: 23291025.640 ops/s
# Warmup Iteration  30: 23285251.409 ops/s
Iteration   1: 23346496.428 ops/s
Iteration   2: 23415079.484 ops/s
Iteration   3: 23313278.529 ops/s
Iteration   4: 23474592.897 ops/s
Iteration   5: 23297867.385 ops/s
Iteration   6: 23358235.861 ops/s
Iteration   7: 23468583.397 ops/s
Iteration   8: 23518600.592 ops/s
Iteration   9: 23302000.477 ops/s
Iteration  10: 23340148.579 ops/s
Iteration  11: 23266114.699 ops/s
Iteration  12: 23528232.749 ops/s
Iteration  13: 23320996.342 ops/s
Iteration  14: 23446261.956 ops/s
Iteration  15: 23284711.746 ops/s
Iteration  16: 23331536.406 ops/s
Iteration  17: 23327947.187 ops/s
Iteration  18: 23286121.179 ops/s
Iteration  19: 23385948.755 ops/s
Iteration  20: 23395545.109 ops/s
Iteration  21: 23325743.224 ops/s
Iteration  22: 23452404.866 ops/s
Iteration  23: 23412524.665 ops/s
Iteration  24: 23404369.079 ops/s
Iteration  25: 23331062.003 ops/s
Iteration  26: 23376385.040 ops/s
Iteration  27: 23437266.684 ops/s
Iteration  28: 23276577.590 ops/s
Iteration  29: 23402893.811 ops/s
Iteration  30: 23098468.270 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIfNone":
  23364199.833 ±(99.9%) 58490.119 ops/s [Average]
  (min, avg, max) = (23098468.270, 23364199.833, 23528232.749), stdev = 87545.263
  CI (99.9%): [23305709.714, 23422689.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  23364199.833 ± 58490.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35160351.507 ops/s
# Warmup Iteration   2: 38763198.595 ops/s
# Warmup Iteration   3: 48634753.673 ops/s
# Warmup Iteration   4: 48562658.440 ops/s
# Warmup Iteration   5: 48336771.152 ops/s
# Warmup Iteration   6: 48755298.543 ops/s
# Warmup Iteration   7: 48576912.718 ops/s
# Warmup Iteration   8: 48714978.327 ops/s
# Warmup Iteration   9: 48895159.466 ops/s
# Warmup Iteration  10: 48678905.322 ops/s
# Warmup Iteration  11: 40935767.212 ops/s
# Warmup Iteration  12: 48886802.484 ops/s
# Warmup Iteration  13: 48574026.288 ops/s
# Warmup Iteration  14: 48305316.952 ops/s
# Warmup Iteration  15: 48405736.328 ops/s
# Warmup Iteration  16: 48703790.305 ops/s
# Warmup Iteration  17: 48338546.903 ops/s
# Warmup Iteration  18: 48721913.886 ops/s
# Warmup Iteration  19: 48863520.381 ops/s
# Warmup Iteration  20: 48901137.540 ops/s
# Warmup Iteration  21: 48604310.205 ops/s
# Warmup Iteration  22: 48341661.190 ops/s
# Warmup Iteration  23: 48861742.852 ops/s
# Warmup Iteration  24: 48455206.350 ops/s
# Warmup Iteration  25: 48457006.295 ops/s
# Warmup Iteration  26: 48525794.141 ops/s
# Warmup Iteration  27: 48394268.258 ops/s
# Warmup Iteration  28: 48931714.415 ops/s
# Warmup Iteration  29: 48388753.259 ops/s
# Warmup Iteration  30: 48520771.047 ops/s
Iteration   1: 48651319.518 ops/s
Iteration   2: 48371494.647 ops/s
Iteration   3: 48536040.137 ops/s
Iteration   4: 47999077.053 ops/s
Iteration   5: 48475999.751 ops/s
Iteration   6: 48274092.175 ops/s
Iteration   7: 48660835.106 ops/s
Iteration   8: 48533462.680 ops/s
Iteration   9: 48590643.039 ops/s
Iteration  10: 48532041.318 ops/s
Iteration  11: 48574002.647 ops/s
Iteration  12: 48686975.185 ops/s
Iteration  13: 48701304.711 ops/s
Iteration  14: 48720247.357 ops/s
Iteration  15: 48685728.299 ops/s
Iteration  16: 48326747.062 ops/s
Iteration  17: 48376908.163 ops/s
Iteration  18: 48640228.767 ops/s
Iteration  19: 48683328.817 ops/s
Iteration  20: 48765356.655 ops/s
Iteration  21: 48696120.037 ops/s
Iteration  22: 48353158.546 ops/s
Iteration  23: 48494693.086 ops/s
Iteration  24: 48259352.879 ops/s
Iteration  25: 48889969.364 ops/s
Iteration  26: 48528700.727 ops/s
Iteration  27: 49046429.617 ops/s
Iteration  28: 48505526.281 ops/s
Iteration  29: 48369281.163 ops/s
Iteration  30: 48504741.088 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectIndex":
  48547793.529 ±(99.9%) 137615.256 ops/s [Average]
  (min, avg, max) = (47999077.053, 48547793.529, 49046429.617), stdev = 205976.052
  CI (99.9%): [48410178.273, 48685408.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  48547793.529 ± 137615.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22919269.987 ops/s
# Warmup Iteration   2: 24155371.086 ops/s
# Warmup Iteration   3: 24781747.631 ops/s
# Warmup Iteration   4: 29084325.541 ops/s
# Warmup Iteration   5: 28782653.148 ops/s
# Warmup Iteration   6: 28845153.365 ops/s
# Warmup Iteration   7: 28679649.946 ops/s
# Warmup Iteration   8: 28980192.733 ops/s
# Warmup Iteration   9: 28889093.587 ops/s
# Warmup Iteration  10: 28582474.114 ops/s
# Warmup Iteration  11: 28572145.745 ops/s
# Warmup Iteration  12: 28749586.943 ops/s
# Warmup Iteration  13: 28964968.665 ops/s
# Warmup Iteration  14: 28897343.549 ops/s
# Warmup Iteration  15: 28998782.219 ops/s
# Warmup Iteration  16: 28791020.169 ops/s
# Warmup Iteration  17: 26911272.955 ops/s
# Warmup Iteration  18: 26489760.245 ops/s
# Warmup Iteration  19: 28784201.242 ops/s
# Warmup Iteration  20: 28851149.786 ops/s
# Warmup Iteration  21: 28915368.099 ops/s
# Warmup Iteration  22: 28912979.939 ops/s
# Warmup Iteration  23: 28929463.709 ops/s
# Warmup Iteration  24: 28937345.439 ops/s
# Warmup Iteration  25: 29077454.622 ops/s
# Warmup Iteration  26: 28890556.382 ops/s
# Warmup Iteration  27: 28773537.526 ops/s
# Warmup Iteration  28: 29057533.114 ops/s
# Warmup Iteration  29: 28907025.481 ops/s
# Warmup Iteration  30: 28986383.490 ops/s
Iteration   1: 29188766.668 ops/s
Iteration   2: 29214618.089 ops/s
Iteration   3: 29134553.844 ops/s
Iteration   4: 29227710.717 ops/s
Iteration   5: 29014963.123 ops/s
Iteration   6: 28914882.934 ops/s
Iteration   7: 29074549.927 ops/s
Iteration   8: 28938755.499 ops/s
Iteration   9: 28975648.663 ops/s
Iteration  10: 29090578.580 ops/s
Iteration  11: 29018243.395 ops/s
Iteration  12: 29015381.602 ops/s
Iteration  13: 28975180.834 ops/s
Iteration  14: 29029354.775 ops/s
Iteration  15: 28900937.114 ops/s
Iteration  16: 28941518.549 ops/s
Iteration  17: 28897688.130 ops/s
Iteration  18: 28688949.098 ops/s
Iteration  19: 28985630.807 ops/s
Iteration  20: 29154541.037 ops/s
Iteration  21: 28925842.763 ops/s
Iteration  22: 29061347.426 ops/s
Iteration  23: 28901423.045 ops/s
Iteration  24: 28956882.758 ops/s
Iteration  25: 29090585.512 ops/s
Iteration  26: 29058857.757 ops/s
Iteration  27: 28962278.126 ops/s
Iteration  28: 28888299.675 ops/s
Iteration  29: 28939858.058 ops/s
Iteration  30: 29014767.605 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectLastIndex":
  29006086.537 ±(99.9%) 75766.204 ops/s [Average]
  (min, avg, max) = (28688949.098, 29006086.537, 29227710.717), stdev = 113403.296
  CI (99.9%): [28930320.333, 29081852.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  29006086.537 ± 75766.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6302277.268 ops/s
# Warmup Iteration   2: 13600903.595 ops/s
# Warmup Iteration   3: 13449661.362 ops/s
# Warmup Iteration   4: 11845314.911 ops/s
# Warmup Iteration   5: 13744683.040 ops/s
# Warmup Iteration   6: 13737541.581 ops/s
# Warmup Iteration   7: 13774591.179 ops/s
# Warmup Iteration   8: 13772065.303 ops/s
# Warmup Iteration   9: 13709187.120 ops/s
# Warmup Iteration  10: 13387074.494 ops/s
# Warmup Iteration  11: 13778005.888 ops/s
# Warmup Iteration  12: 13737464.447 ops/s
# Warmup Iteration  13: 13683184.550 ops/s
# Warmup Iteration  14: 13685095.126 ops/s
# Warmup Iteration  15: 13760311.040 ops/s
# Warmup Iteration  16: 13606399.806 ops/s
# Warmup Iteration  17: 13746926.469 ops/s
# Warmup Iteration  18: 13671039.245 ops/s
# Warmup Iteration  19: 13760986.649 ops/s
# Warmup Iteration  20: 13791392.103 ops/s
# Warmup Iteration  21: 13879647.021 ops/s
# Warmup Iteration  22: 13863643.059 ops/s
# Warmup Iteration  23: 13755246.343 ops/s
# Warmup Iteration  24: 13767718.648 ops/s
# Warmup Iteration  25: 13705786.390 ops/s
# Warmup Iteration  26: 13711749.481 ops/s
# Warmup Iteration  27: 13774537.940 ops/s
# Warmup Iteration  28: 13640290.534 ops/s
# Warmup Iteration  29: 13690563.526 ops/s
# Warmup Iteration  30: 13766047.915 ops/s
Iteration   1: 13814846.990 ops/s
Iteration   2: 13751212.117 ops/s
Iteration   3: 13784396.490 ops/s
Iteration   4: 13766974.474 ops/s
Iteration   5: 13676651.447 ops/s
Iteration   6: 13655574.235 ops/s
Iteration   7: 13552564.883 ops/s
Iteration   8: 13755697.175 ops/s
Iteration   9: 13742795.739 ops/s
Iteration  10: 13807974.324 ops/s
Iteration  11: 13702175.911 ops/s
Iteration  12: 13743228.427 ops/s
Iteration  13: 13787300.747 ops/s
Iteration  14: 13773925.358 ops/s
Iteration  15: 13852628.851 ops/s
Iteration  16: 13763560.723 ops/s
Iteration  17: 13797572.233 ops/s
Iteration  18: 13670314.649 ops/s
Iteration  19: 13820910.071 ops/s
Iteration  20: 13854601.047 ops/s
Iteration  21: 13778191.986 ops/s
Iteration  22: 13857653.347 ops/s
Iteration  23: 13802974.320 ops/s
Iteration  24: 13830283.494 ops/s
Iteration  25: 13772455.140 ops/s
Iteration  26: 13761060.861 ops/s
Iteration  27: 13895096.057 ops/s
Iteration  28: 13818774.566 ops/s
Iteration  29: 13796600.210 ops/s
Iteration  30: 13815251.570 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWith":
  13773441.581 ±(99.9%) 46418.582 ops/s [Average]
  (min, avg, max) = (13552564.883, 13773441.581, 13895096.057), stdev = 69477.154
  CI (99.9%): [13727022.999, 13819860.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detectWith  thrpt   30  13773441.581 ± 46418.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7395779.881 ops/s
# Warmup Iteration   2: 15572911.204 ops/s
# Warmup Iteration   3: 15596004.222 ops/s
# Warmup Iteration   4: 13322699.674 ops/s
# Warmup Iteration   5: 15814964.953 ops/s
# Warmup Iteration   6: 15740321.604 ops/s
# Warmup Iteration   7: 15825421.109 ops/s
# Warmup Iteration   8: 15699961.855 ops/s
# Warmup Iteration   9: 15643957.454 ops/s
# Warmup Iteration  10: 15767903.349 ops/s
# Warmup Iteration  11: 15710450.009 ops/s
# Warmup Iteration  12: 15739300.568 ops/s
# Warmup Iteration  13: 15821118.606 ops/s
# Warmup Iteration  14: 15709016.971 ops/s
# Warmup Iteration  15: 15750778.647 ops/s
# Warmup Iteration  16: 15785177.513 ops/s
# Warmup Iteration  17: 15799839.525 ops/s
# Warmup Iteration  18: 15715923.079 ops/s
# Warmup Iteration  19: 15846174.652 ops/s
# Warmup Iteration  20: 15790500.407 ops/s
# Warmup Iteration  21: 15768872.610 ops/s
# Warmup Iteration  22: 15742202.141 ops/s
# Warmup Iteration  23: 15745259.896 ops/s
# Warmup Iteration  24: 15796513.945 ops/s
# Warmup Iteration  25: 15707719.851 ops/s
# Warmup Iteration  26: 15705178.098 ops/s
# Warmup Iteration  27: 15778667.130 ops/s
# Warmup Iteration  28: 15673399.190 ops/s
# Warmup Iteration  29: 15738645.615 ops/s
# Warmup Iteration  30: 15751353.587 ops/s
Iteration   1: 15684530.422 ops/s
Iteration   2: 15796760.636 ops/s
Iteration   3: 15848691.962 ops/s
Iteration   4: 15890825.274 ops/s
Iteration   5: 15887791.192 ops/s
Iteration   6: 15749361.746 ops/s
Iteration   7: 15782490.308 ops/s
Iteration   8: 15696270.884 ops/s
Iteration   9: 15752197.814 ops/s
Iteration  10: 15716240.434 ops/s
Iteration  11: 15783372.057 ops/s
Iteration  12: 15728889.351 ops/s
Iteration  13: 15819307.244 ops/s
Iteration  14: 15813238.532 ops/s
Iteration  15: 15765845.526 ops/s
Iteration  16: 15789119.285 ops/s
Iteration  17: 15713762.699 ops/s
Iteration  18: 15662738.902 ops/s
Iteration  19: 15779246.719 ops/s
Iteration  20: 15735743.314 ops/s
Iteration  21: 15748964.160 ops/s
Iteration  22: 15805168.156 ops/s
Iteration  23: 15842619.905 ops/s
Iteration  24: 15790611.307 ops/s
Iteration  25: 15833851.788 ops/s
Iteration  26: 15787461.227 ops/s
Iteration  27: 15837144.691 ops/s
Iteration  28: 15659324.012 ops/s
Iteration  29: 15774689.843 ops/s
Iteration  30: 15797843.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_detectWithIfNone":
  15775803.419 ±(99.9%) 39758.145 ops/s [Average]
  (min, avg, max) = (15659324.012, 15775803.419, 15890825.274), stdev = 59508.125
  CI (99.9%): [15736045.274, 15815561.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  15775803.419 ± 39758.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1196058.674 ops/s
# Warmup Iteration   2: 2265312.361 ops/s
# Warmup Iteration   3: 2450567.249 ops/s
# Warmup Iteration   4: 2470645.179 ops/s
# Warmup Iteration   5: 2066322.681 ops/s
# Warmup Iteration   6: 2467636.542 ops/s
# Warmup Iteration   7: 2460673.826 ops/s
# Warmup Iteration   8: 2467409.813 ops/s
# Warmup Iteration   9: 2456241.694 ops/s
# Warmup Iteration  10: 2479919.588 ops/s
# Warmup Iteration  11: 2469148.301 ops/s
# Warmup Iteration  12: 2472756.146 ops/s
# Warmup Iteration  13: 2474120.786 ops/s
# Warmup Iteration  14: 2468691.226 ops/s
# Warmup Iteration  15: 2474548.698 ops/s
# Warmup Iteration  16: 2466145.693 ops/s
# Warmup Iteration  17: 2468635.087 ops/s
# Warmup Iteration  18: 2483333.104 ops/s
# Warmup Iteration  19: 2483228.807 ops/s
# Warmup Iteration  20: 2467097.530 ops/s
# Warmup Iteration  21: 2476258.177 ops/s
# Warmup Iteration  22: 2477898.388 ops/s
# Warmup Iteration  23: 2486358.987 ops/s
# Warmup Iteration  24: 2487530.585 ops/s
# Warmup Iteration  25: 2470884.447 ops/s
# Warmup Iteration  26: 2475724.086 ops/s
# Warmup Iteration  27: 2470836.389 ops/s
# Warmup Iteration  28: 2482757.984 ops/s
# Warmup Iteration  29: 2486439.717 ops/s
# Warmup Iteration  30: 2479397.331 ops/s
Iteration   1: 2480441.924 ops/s
Iteration   2: 2491722.362 ops/s
Iteration   3: 2476092.939 ops/s
Iteration   4: 2456306.249 ops/s
Iteration   5: 2468228.185 ops/s
Iteration   6: 2454548.657 ops/s
Iteration   7: 2484660.621 ops/s
Iteration   8: 2491532.245 ops/s
Iteration   9: 2497965.358 ops/s
Iteration  10: 2482193.652 ops/s
Iteration  11: 2483633.451 ops/s
Iteration  12: 2454745.753 ops/s
Iteration  13: 2463194.078 ops/s
Iteration  14: 2456338.560 ops/s
Iteration  15: 2477169.211 ops/s
Iteration  16: 2460621.294 ops/s
Iteration  17: 2444907.089 ops/s
Iteration  18: 2480888.110 ops/s
Iteration  19: 2472678.277 ops/s
Iteration  20: 2483902.514 ops/s
Iteration  21: 2502191.282 ops/s
Iteration  22: 2475391.001 ops/s
Iteration  23: 2460799.166 ops/s
Iteration  24: 2494128.071 ops/s
Iteration  25: 2490760.916 ops/s
Iteration  26: 2478662.038 ops/s
Iteration  27: 2469475.596 ops/s
Iteration  28: 2494924.526 ops/s
Iteration  29: 2472560.473 ops/s
Iteration  30: 2486626.120 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinct":
  2476242.991 ±(99.9%) 9901.731 ops/s [Average]
  (min, avg, max) = (2444907.089, 2476242.991, 2502191.282), stdev = 14820.446
  CI (99.9%): [2466341.259, 2486144.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_distinct  thrpt   30  2476242.991 ± 9901.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3530526.318 ops/s
# Warmup Iteration   2: 7900009.453 ops/s
# Warmup Iteration   3: 7885102.280 ops/s
# Warmup Iteration   4: 6774021.652 ops/s
# Warmup Iteration   5: 7752624.077 ops/s
# Warmup Iteration   6: 7838219.162 ops/s
# Warmup Iteration   7: 7894713.679 ops/s
# Warmup Iteration   8: 7912396.542 ops/s
# Warmup Iteration   9: 7883128.261 ops/s
# Warmup Iteration  10: 7885683.907 ops/s
# Warmup Iteration  11: 7891846.231 ops/s
# Warmup Iteration  12: 7885923.360 ops/s
# Warmup Iteration  13: 7892406.881 ops/s
# Warmup Iteration  14: 7891245.759 ops/s
# Warmup Iteration  15: 7889573.206 ops/s
# Warmup Iteration  16: 7953566.680 ops/s
# Warmup Iteration  17: 7831954.250 ops/s
# Warmup Iteration  18: 7925030.426 ops/s
# Warmup Iteration  19: 7932381.677 ops/s
# Warmup Iteration  20: 7927748.298 ops/s
# Warmup Iteration  21: 7943602.228 ops/s
# Warmup Iteration  22: 7932056.292 ops/s
# Warmup Iteration  23: 7912594.088 ops/s
# Warmup Iteration  24: 7910972.130 ops/s
# Warmup Iteration  25: 7945847.238 ops/s
# Warmup Iteration  26: 7899297.394 ops/s
# Warmup Iteration  27: 7887636.584 ops/s
# Warmup Iteration  28: 7937999.598 ops/s
# Warmup Iteration  29: 7920598.056 ops/s
# Warmup Iteration  30: 7893889.402 ops/s
Iteration   1: 7892025.997 ops/s
Iteration   2: 7914653.476 ops/s
Iteration   3: 7931150.921 ops/s
Iteration   4: 7943140.753 ops/s
Iteration   5: 7854596.910 ops/s
Iteration   6: 7906171.884 ops/s
Iteration   7: 7957504.154 ops/s
Iteration   8: 7984823.333 ops/s
Iteration   9: 7861835.732 ops/s
Iteration  10: 7798270.780 ops/s
Iteration  11: 7825841.604 ops/s
Iteration  12: 7722567.446 ops/s
Iteration  13: 7849136.465 ops/s
Iteration  14: 7752712.355 ops/s
Iteration  15: 7976840.926 ops/s
Iteration  16: 7823319.357 ops/s
Iteration  17: 7919256.308 ops/s
Iteration  18: 7858188.414 ops/s
Iteration  19: 7931808.810 ops/s
Iteration  20: 7932088.889 ops/s
Iteration  21: 7893376.386 ops/s
Iteration  22: 7893976.919 ops/s
Iteration  23: 7901155.715 ops/s
Iteration  24: 7910517.626 ops/s
Iteration  25: 7913164.038 ops/s
Iteration  26: 7774576.460 ops/s
Iteration  27: 7812267.712 ops/s
Iteration  28: 7891488.655 ops/s
Iteration  29: 7910744.105 ops/s
Iteration  30: 7914808.637 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctBy":
  7881733.692 ±(99.9%) 42782.753 ops/s [Average]
  (min, avg, max) = (7722567.446, 7881733.692, 7984823.333), stdev = 64035.216
  CI (99.9%): [7838950.939, 7924516.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  7881733.692 ± 42782.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3453428.555 ops/s
# Warmup Iteration   2: 7680888.633 ops/s
# Warmup Iteration   3: 7674510.497 ops/s
# Warmup Iteration   4: 6986110.118 ops/s
# Warmup Iteration   5: 7215218.970 ops/s
# Warmup Iteration   6: 7650290.048 ops/s
# Warmup Iteration   7: 7692425.465 ops/s
# Warmup Iteration   8: 7652576.756 ops/s
# Warmup Iteration   9: 7670856.672 ops/s
# Warmup Iteration  10: 7662018.643 ops/s
# Warmup Iteration  11: 7719944.190 ops/s
# Warmup Iteration  12: 7779352.224 ops/s
# Warmup Iteration  13: 7728754.845 ops/s
# Warmup Iteration  14: 7550752.877 ops/s
# Warmup Iteration  15: 7614627.246 ops/s
# Warmup Iteration  16: 7661280.945 ops/s
# Warmup Iteration  17: 7598332.884 ops/s
# Warmup Iteration  18: 7759557.079 ops/s
# Warmup Iteration  19: 7750972.498 ops/s
# Warmup Iteration  20: 7617678.876 ops/s
# Warmup Iteration  21: 7704429.583 ops/s
# Warmup Iteration  22: 7600150.858 ops/s
# Warmup Iteration  23: 7673565.109 ops/s
# Warmup Iteration  24: 7655098.224 ops/s
# Warmup Iteration  25: 7644232.254 ops/s
# Warmup Iteration  26: 7719422.933 ops/s
# Warmup Iteration  27: 7723735.388 ops/s
# Warmup Iteration  28: 7682347.128 ops/s
# Warmup Iteration  29: 7629513.233 ops/s
# Warmup Iteration  30: 7622591.333 ops/s
Iteration   1: 7631298.127 ops/s
Iteration   2: 7777268.926 ops/s
Iteration   3: 7678102.058 ops/s
Iteration   4: 7687345.757 ops/s
Iteration   5: 7640536.619 ops/s
Iteration   6: 7708398.704 ops/s
Iteration   7: 7603111.157 ops/s
Iteration   8: 7615082.880 ops/s
Iteration   9: 7654655.446 ops/s
Iteration  10: 7600749.087 ops/s
Iteration  11: 7780562.308 ops/s
Iteration  12: 7738003.499 ops/s
Iteration  13: 7687987.361 ops/s
Iteration  14: 7581099.510 ops/s
Iteration  15: 7793107.439 ops/s
Iteration  16: 7757661.958 ops/s
Iteration  17: 7744075.481 ops/s
Iteration  18: 7775120.420 ops/s
Iteration  19: 7783713.055 ops/s
Iteration  20: 7769902.536 ops/s
Iteration  21: 7621138.457 ops/s
Iteration  22: 7597107.242 ops/s
Iteration  23: 7674162.733 ops/s
Iteration  24: 7710945.654 ops/s
Iteration  25: 7785699.596 ops/s
Iteration  26: 7804486.519 ops/s
Iteration  27: 7726184.536 ops/s
Iteration  28: 7662545.218 ops/s
Iteration  29: 7734737.091 ops/s
Iteration  30: 7655357.056 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  7699338.214 ±(99.9%) 46132.014 ops/s [Average]
  (min, avg, max) = (7581099.510, 7699338.214, 7804486.519), stdev = 69048.233
  CI (99.9%): [7653206.200, 7745470.229] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  7699338.214 ± 46132.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902858.867 ops/s
# Warmup Iteration   2: 1047688.148 ops/s
# Warmup Iteration   3: 1416199.777 ops/s
# Warmup Iteration   4: 1422939.557 ops/s
# Warmup Iteration   5: 1423802.580 ops/s
# Warmup Iteration   6: 1429557.959 ops/s
# Warmup Iteration   7: 1426817.678 ops/s
# Warmup Iteration   8: 1425048.022 ops/s
# Warmup Iteration   9: 1413120.807 ops/s
# Warmup Iteration  10: 1183687.776 ops/s
# Warmup Iteration  11: 1423263.570 ops/s
# Warmup Iteration  12: 1431840.685 ops/s
# Warmup Iteration  13: 1420400.763 ops/s
# Warmup Iteration  14: 1427727.127 ops/s
# Warmup Iteration  15: 1428814.155 ops/s
# Warmup Iteration  16: 1435332.667 ops/s
# Warmup Iteration  17: 1435711.816 ops/s
# Warmup Iteration  18: 1435065.532 ops/s
# Warmup Iteration  19: 1428135.482 ops/s
# Warmup Iteration  20: 1422580.718 ops/s
# Warmup Iteration  21: 1421445.019 ops/s
# Warmup Iteration  22: 1414391.394 ops/s
# Warmup Iteration  23: 1438317.655 ops/s
# Warmup Iteration  24: 1436012.708 ops/s
# Warmup Iteration  25: 1426609.164 ops/s
# Warmup Iteration  26: 1431674.810 ops/s
# Warmup Iteration  27: 1429831.651 ops/s
# Warmup Iteration  28: 1426976.142 ops/s
# Warmup Iteration  29: 1429201.637 ops/s
# Warmup Iteration  30: 1431322.744 ops/s
Iteration   1: 1428893.687 ops/s
Iteration   2: 1423709.194 ops/s
Iteration   3: 1426890.967 ops/s
Iteration   4: 1429040.456 ops/s
Iteration   5: 1432282.376 ops/s
Iteration   6: 1418158.690 ops/s
Iteration   7: 1412607.611 ops/s
Iteration   8: 1425119.022 ops/s
Iteration   9: 1436666.879 ops/s
Iteration  10: 1428632.504 ops/s
Iteration  11: 1425870.401 ops/s
Iteration  12: 1436391.997 ops/s
Iteration  13: 1433216.124 ops/s
Iteration  14: 1440494.167 ops/s
Iteration  15: 1440330.458 ops/s
Iteration  16: 1442147.032 ops/s
Iteration  17: 1418844.266 ops/s
Iteration  18: 1438635.635 ops/s
Iteration  19: 1430829.940 ops/s
Iteration  20: 1421553.268 ops/s
Iteration  21: 1422981.721 ops/s
Iteration  22: 1427053.511 ops/s
Iteration  23: 1435423.945 ops/s
Iteration  24: 1437760.352 ops/s
Iteration  25: 1412004.632 ops/s
Iteration  26: 1432004.375 ops/s
Iteration  27: 1437757.576 ops/s
Iteration  28: 1429855.626 ops/s
Iteration  29: 1438936.701 ops/s
Iteration  30: 1425123.602 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop":
  1429640.557 ±(99.9%) 5420.054 ops/s [Average]
  (min, avg, max) = (1412004.632, 1429640.557, 1442147.032), stdev = 8112.482
  CI (99.9%): [1424220.503, 1435060.611] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_drop  thrpt   30  1429640.557 ± 5420.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3034054.405 ops/s
# Warmup Iteration   2: 5978297.734 ops/s
# Warmup Iteration   3: 6192580.660 ops/s
# Warmup Iteration   4: 6153679.784 ops/s
# Warmup Iteration   5: 5229138.184 ops/s
# Warmup Iteration   6: 6221876.275 ops/s
# Warmup Iteration   7: 6256039.859 ops/s
# Warmup Iteration   8: 6271235.489 ops/s
# Warmup Iteration   9: 6213993.316 ops/s
# Warmup Iteration  10: 6221934.672 ops/s
# Warmup Iteration  11: 6200517.743 ops/s
# Warmup Iteration  12: 6255473.371 ops/s
# Warmup Iteration  13: 6186512.974 ops/s
# Warmup Iteration  14: 6207548.349 ops/s
# Warmup Iteration  15: 6289541.047 ops/s
# Warmup Iteration  16: 6239456.618 ops/s
# Warmup Iteration  17: 6238041.128 ops/s
# Warmup Iteration  18: 6233602.157 ops/s
# Warmup Iteration  19: 6214094.528 ops/s
# Warmup Iteration  20: 6239894.715 ops/s
# Warmup Iteration  21: 6222697.423 ops/s
# Warmup Iteration  22: 6232738.196 ops/s
# Warmup Iteration  23: 6226595.792 ops/s
# Warmup Iteration  24: 6250365.340 ops/s
# Warmup Iteration  25: 6239004.937 ops/s
# Warmup Iteration  26: 6225159.459 ops/s
# Warmup Iteration  27: 6241707.501 ops/s
# Warmup Iteration  28: 6221642.664 ops/s
# Warmup Iteration  29: 6228032.965 ops/s
# Warmup Iteration  30: 6238745.235 ops/s
Iteration   1: 6223497.961 ops/s
Iteration   2: 6221397.972 ops/s
Iteration   3: 6166655.407 ops/s
Iteration   4: 6234506.431 ops/s
Iteration   5: 6212536.949 ops/s
Iteration   6: 6244323.744 ops/s
Iteration   7: 6218093.446 ops/s
Iteration   8: 6201581.734 ops/s
Iteration   9: 6221102.812 ops/s
Iteration  10: 6241830.659 ops/s
Iteration  11: 6251456.277 ops/s
Iteration  12: 6243385.358 ops/s
Iteration  13: 6221438.354 ops/s
Iteration  14: 6193196.892 ops/s
Iteration  15: 6269355.526 ops/s
Iteration  16: 6212668.145 ops/s
Iteration  17: 6240798.355 ops/s
Iteration  18: 6171518.667 ops/s
Iteration  19: 6119128.524 ops/s
Iteration  20: 6227226.705 ops/s
Iteration  21: 6247773.638 ops/s
Iteration  22: 6232488.874 ops/s
Iteration  23: 6190656.201 ops/s
Iteration  24: 6183581.300 ops/s
Iteration  25: 6208460.554 ops/s
Iteration  26: 6281404.185 ops/s
Iteration  27: 6223304.344 ops/s
Iteration  28: 6239022.632 ops/s
Iteration  29: 6231515.744 ops/s
Iteration  30: 6227603.576 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_dropWhile":
  6220050.366 ±(99.9%) 21444.535 ops/s [Average]
  (min, avg, max) = (6119128.524, 6220050.366, 6281404.185), stdev = 32097.174
  CI (99.9%): [6198605.830, 6241494.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  6220050.366 ± 21444.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712498.183 ops/s
# Warmup Iteration   2: 750165.982 ops/s
# Warmup Iteration   3: 983228.947 ops/s
# Warmup Iteration   4: 980033.802 ops/s
# Warmup Iteration   5: 979614.721 ops/s
# Warmup Iteration   6: 986800.851 ops/s
# Warmup Iteration   7: 976468.977 ops/s
# Warmup Iteration   8: 982571.796 ops/s
# Warmup Iteration   9: 981778.438 ops/s
# Warmup Iteration  10: 981050.373 ops/s
# Warmup Iteration  11: 977325.462 ops/s
# Warmup Iteration  12: 823540.390 ops/s
# Warmup Iteration  13: 978588.964 ops/s
# Warmup Iteration  14: 972880.919 ops/s
# Warmup Iteration  15: 979537.564 ops/s
# Warmup Iteration  16: 980088.255 ops/s
# Warmup Iteration  17: 1040164.805 ops/s
# Warmup Iteration  18: 1038146.270 ops/s
# Warmup Iteration  19: 1040528.327 ops/s
# Warmup Iteration  20: 1048033.420 ops/s
# Warmup Iteration  21: 1043485.557 ops/s
# Warmup Iteration  22: 1042945.621 ops/s
# Warmup Iteration  23: 1047739.273 ops/s
# Warmup Iteration  24: 1046218.996 ops/s
# Warmup Iteration  25: 1049849.257 ops/s
# Warmup Iteration  26: 1044108.404 ops/s
# Warmup Iteration  27: 1038595.330 ops/s
# Warmup Iteration  28: 1038030.797 ops/s
# Warmup Iteration  29: 1045714.144 ops/s
# Warmup Iteration  30: 1041800.126 ops/s
Iteration   1: 1034396.610 ops/s
Iteration   2: 1038058.057 ops/s
Iteration   3: 1043000.184 ops/s
Iteration   4: 1040721.272 ops/s
Iteration   5: 1038337.236 ops/s
Iteration   6: 1044034.972 ops/s
Iteration   7: 1040050.210 ops/s
Iteration   8: 1046068.275 ops/s
Iteration   9: 1042178.679 ops/s
Iteration  10: 1040979.579 ops/s
Iteration  11: 1041294.623 ops/s
Iteration  12: 1046318.640 ops/s
Iteration  13: 1045215.429 ops/s
Iteration  14: 1035217.699 ops/s
Iteration  15: 1038016.712 ops/s
Iteration  16: 1045821.275 ops/s
Iteration  17: 1047957.364 ops/s
Iteration  18: 1042233.223 ops/s
Iteration  19: 1048642.238 ops/s
Iteration  20: 975485.127 ops/s
Iteration  21: 890281.702 ops/s
Iteration  22: 1033344.773 ops/s
Iteration  23: 1031590.787 ops/s
Iteration  24: 1040336.487 ops/s
Iteration  25: 1048789.696 ops/s
Iteration  26: 1043371.945 ops/s
Iteration  27: 1044744.918 ops/s
Iteration  28: 1045912.976 ops/s
Iteration  29: 1044474.220 ops/s
Iteration  30: 1048868.280 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_drop_throws":
  1034858.106 ±(99.9%) 20205.236 ops/s [Average]
  (min, avg, max) = (890281.702, 1034858.106, 1048868.280), stdev = 30242.248
  CI (99.9%): [1014652.870, 1055063.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1034858.106 ± 20205.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5410599.469 ops/s
# Warmup Iteration   2: 20766376.607 ops/s
# Warmup Iteration   3: 23387561.137 ops/s
# Warmup Iteration   4: 23560020.295 ops/s
# Warmup Iteration   5: 19453144.828 ops/s
# Warmup Iteration   6: 23079172.163 ops/s
# Warmup Iteration   7: 22891450.696 ops/s
# Warmup Iteration   8: 23052642.194 ops/s
# Warmup Iteration   9: 23151889.677 ops/s
# Warmup Iteration  10: 23057679.280 ops/s
# Warmup Iteration  11: 22815072.445 ops/s
# Warmup Iteration  12: 23094461.668 ops/s
# Warmup Iteration  13: 22964465.248 ops/s
# Warmup Iteration  14: 22972928.371 ops/s
# Warmup Iteration  15: 22970764.668 ops/s
# Warmup Iteration  16: 22954408.481 ops/s
# Warmup Iteration  17: 22991026.302 ops/s
# Warmup Iteration  18: 22967850.839 ops/s
# Warmup Iteration  19: 23013941.575 ops/s
# Warmup Iteration  20: 23200284.467 ops/s
# Warmup Iteration  21: 22977157.880 ops/s
# Warmup Iteration  22: 23104618.262 ops/s
# Warmup Iteration  23: 23051435.611 ops/s
# Warmup Iteration  24: 22993806.764 ops/s
# Warmup Iteration  25: 22924302.254 ops/s
# Warmup Iteration  26: 22839759.039 ops/s
# Warmup Iteration  27: 22937715.117 ops/s
# Warmup Iteration  28: 22979940.780 ops/s
# Warmup Iteration  29: 23122349.149 ops/s
# Warmup Iteration  30: 23075274.740 ops/s
Iteration   1: 22972199.424 ops/s
Iteration   2: 23104815.160 ops/s
Iteration   3: 23030347.073 ops/s
Iteration   4: 23070729.254 ops/s
Iteration   5: 22742679.050 ops/s
Iteration   6: 22946213.446 ops/s
Iteration   7: 22860976.052 ops/s
Iteration   8: 23148805.046 ops/s
Iteration   9: 22860026.689 ops/s
Iteration  10: 22736139.402 ops/s
Iteration  11: 22881476.765 ops/s
Iteration  12: 22749156.392 ops/s
Iteration  13: 23168065.331 ops/s
Iteration  14: 23008289.031 ops/s
Iteration  15: 23058397.447 ops/s
Iteration  16: 23046994.892 ops/s
Iteration  17: 23104249.355 ops/s
Iteration  18: 23093471.864 ops/s
Iteration  19: 23302631.522 ops/s
Iteration  20: 23315960.897 ops/s
Iteration  21: 23020804.163 ops/s
Iteration  22: 23254812.602 ops/s
Iteration  23: 23099631.300 ops/s
Iteration  24: 23054031.958 ops/s
Iteration  25: 23181367.685 ops/s
Iteration  26: 22920500.436 ops/s
Iteration  27: 23261496.722 ops/s
Iteration  28: 23091136.606 ops/s
Iteration  29: 23297872.992 ops/s
Iteration  30: 23240328.529 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_each":
  23054120.236 ±(99.9%) 110420.070 ops/s [Average]
  (min, avg, max) = (22736139.402, 23054120.236, 23315960.897), stdev = 165271.575
  CI (99.9%): [22943700.166, 23164540.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_each  thrpt   30  23054120.236 ± 110420.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24163.535 ops/s
# Warmup Iteration   2: 32349.534 ops/s
# Warmup Iteration   3: 47034.324 ops/s
# Warmup Iteration   4: 48351.590 ops/s
# Warmup Iteration   5: 47834.583 ops/s
# Warmup Iteration   6: 47866.959 ops/s
# Warmup Iteration   7: 48044.861 ops/s
# Warmup Iteration   8: 48380.356 ops/s
# Warmup Iteration   9: 48146.495 ops/s
# Warmup Iteration  10: 43647.508 ops/s
# Warmup Iteration  11: 44318.591 ops/s
# Warmup Iteration  12: 47764.878 ops/s
# Warmup Iteration  13: 47991.251 ops/s
# Warmup Iteration  14: 47626.778 ops/s
# Warmup Iteration  15: 47903.056 ops/s
# Warmup Iteration  16: 47717.410 ops/s
# Warmup Iteration  17: 48271.984 ops/s
# Warmup Iteration  18: 47842.686 ops/s
# Warmup Iteration  19: 48009.390 ops/s
# Warmup Iteration  20: 47789.553 ops/s
# Warmup Iteration  21: 47836.149 ops/s
# Warmup Iteration  22: 48192.938 ops/s
# Warmup Iteration  23: 47637.950 ops/s
# Warmup Iteration  24: 47919.827 ops/s
# Warmup Iteration  25: 47888.734 ops/s
# Warmup Iteration  26: 47983.826 ops/s
# Warmup Iteration  27: 47964.215 ops/s
# Warmup Iteration  28: 48246.506 ops/s
# Warmup Iteration  29: 47965.354 ops/s
# Warmup Iteration  30: 47744.612 ops/s
Iteration   1: 48227.219 ops/s
Iteration   2: 47823.004 ops/s
Iteration   3: 48211.321 ops/s
Iteration   4: 47937.147 ops/s
Iteration   5: 48147.117 ops/s
Iteration   6: 47639.046 ops/s
Iteration   7: 47907.148 ops/s
Iteration   8: 47552.325 ops/s
Iteration   9: 47370.620 ops/s
Iteration  10: 47672.500 ops/s
Iteration  11: 47396.003 ops/s
Iteration  12: 47517.449 ops/s
Iteration  13: 47549.458 ops/s
Iteration  14: 47884.621 ops/s
Iteration  15: 48266.791 ops/s
Iteration  16: 47404.519 ops/s
Iteration  17: 47959.392 ops/s
Iteration  18: 48382.781 ops/s
Iteration  19: 48242.215 ops/s
Iteration  20: 48802.950 ops/s
Iteration  21: 47931.476 ops/s
Iteration  22: 48313.953 ops/s
Iteration  23: 48353.438 ops/s
Iteration  24: 48703.566 ops/s
Iteration  25: 48789.027 ops/s
Iteration  26: 48272.359 ops/s
Iteration  27: 48409.981 ops/s
Iteration  28: 48457.689 ops/s
Iteration  29: 48291.399 ops/s
Iteration  30: 48326.757 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_equalsAndHashCode":
  48058.109 ±(99.9%) 276.727 ops/s [Average]
  (min, avg, max) = (47370.620, 48058.109, 48802.950), stdev = 414.192
  CI (99.9%): [47781.382, 48334.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  48058.109 ± 276.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582241.119 ops/s
# Warmup Iteration   2: 1132203.733 ops/s
# Warmup Iteration   3: 1274854.315 ops/s
# Warmup Iteration   4: 1299688.188 ops/s
# Warmup Iteration   5: 1086710.033 ops/s
# Warmup Iteration   6: 1253461.613 ops/s
# Warmup Iteration   7: 1301291.372 ops/s
# Warmup Iteration   8: 1301321.987 ops/s
# Warmup Iteration   9: 1301491.041 ops/s
# Warmup Iteration  10: 1290597.184 ops/s
# Warmup Iteration  11: 1301249.460 ops/s
# Warmup Iteration  12: 1299289.092 ops/s
# Warmup Iteration  13: 1304015.150 ops/s
# Warmup Iteration  14: 1301986.173 ops/s
# Warmup Iteration  15: 1294855.154 ops/s
# Warmup Iteration  16: 1298994.002 ops/s
# Warmup Iteration  17: 1298209.609 ops/s
# Warmup Iteration  18: 1300226.813 ops/s
# Warmup Iteration  19: 1294363.316 ops/s
# Warmup Iteration  20: 1294705.053 ops/s
# Warmup Iteration  21: 1295632.385 ops/s
# Warmup Iteration  22: 1293820.477 ops/s
# Warmup Iteration  23: 1302160.288 ops/s
# Warmup Iteration  24: 1298458.523 ops/s
# Warmup Iteration  25: 1300181.788 ops/s
# Warmup Iteration  26: 1303299.584 ops/s
# Warmup Iteration  27: 1303710.116 ops/s
# Warmup Iteration  28: 1301827.306 ops/s
# Warmup Iteration  29: 1298309.532 ops/s
# Warmup Iteration  30: 1296700.836 ops/s
Iteration   1: 1302875.037 ops/s
Iteration   2: 1301561.639 ops/s
Iteration   3: 1299233.114 ops/s
Iteration   4: 1302426.172 ops/s
Iteration   5: 1299160.321 ops/s
Iteration   6: 1305176.633 ops/s
Iteration   7: 1294482.666 ops/s
Iteration   8: 1298574.662 ops/s
Iteration   9: 1301879.931 ops/s
Iteration  10: 1301438.904 ops/s
Iteration  11: 1303374.028 ops/s
Iteration  12: 1299578.399 ops/s
Iteration  13: 1302503.135 ops/s
Iteration  14: 1293974.593 ops/s
Iteration  15: 1297784.276 ops/s
Iteration  16: 1303415.088 ops/s
Iteration  17: 1295123.922 ops/s
Iteration  18: 1296904.810 ops/s
Iteration  19: 1300105.876 ops/s
Iteration  20: 1297831.388 ops/s
Iteration  21: 1302464.651 ops/s
Iteration  22: 1295185.906 ops/s
Iteration  23: 1301817.646 ops/s
Iteration  24: 1299682.940 ops/s
Iteration  25: 1304770.844 ops/s
Iteration  26: 1304099.926 ops/s
Iteration  27: 1302802.418 ops/s
Iteration  28: 1301556.813 ops/s
Iteration  29: 1298860.357 ops/s
Iteration  30: 1293133.328 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollect":
  1300059.314 ±(99.9%) 2227.591 ops/s [Average]
  (min, avg, max) = (1293133.328, 1300059.314, 1305176.633), stdev = 3334.153
  CI (99.9%): [1297831.723, 1302286.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  1300059.314 ± 2227.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531606.582 ops/s
# Warmup Iteration   2: 1091631.819 ops/s
# Warmup Iteration   3: 1216648.973 ops/s
# Warmup Iteration   4: 1226232.905 ops/s
# Warmup Iteration   5: 994769.548 ops/s
# Warmup Iteration   6: 1227809.192 ops/s
# Warmup Iteration   7: 1231535.233 ops/s
# Warmup Iteration   8: 1230632.516 ops/s
# Warmup Iteration   9: 1226444.933 ops/s
# Warmup Iteration  10: 1230434.680 ops/s
# Warmup Iteration  11: 1231562.488 ops/s
# Warmup Iteration  12: 1225974.007 ops/s
# Warmup Iteration  13: 1226375.420 ops/s
# Warmup Iteration  14: 1229634.011 ops/s
# Warmup Iteration  15: 1229037.458 ops/s
# Warmup Iteration  16: 1228984.895 ops/s
# Warmup Iteration  17: 1222085.417 ops/s
# Warmup Iteration  18: 1228776.008 ops/s
# Warmup Iteration  19: 1228262.338 ops/s
# Warmup Iteration  20: 1225129.603 ops/s
# Warmup Iteration  21: 1228095.056 ops/s
# Warmup Iteration  22: 1231537.775 ops/s
# Warmup Iteration  23: 1230509.789 ops/s
# Warmup Iteration  24: 1227335.606 ops/s
# Warmup Iteration  25: 1222000.412 ops/s
# Warmup Iteration  26: 1231340.150 ops/s
# Warmup Iteration  27: 1218421.353 ops/s
# Warmup Iteration  28: 1227115.494 ops/s
# Warmup Iteration  29: 1229743.316 ops/s
# Warmup Iteration  30: 1227406.614 ops/s
Iteration   1: 1222030.862 ops/s
Iteration   2: 1222796.002 ops/s
Iteration   3: 1231579.616 ops/s
Iteration   4: 1228831.985 ops/s
Iteration   5: 1227733.904 ops/s
Iteration   6: 1227372.124 ops/s
Iteration   7: 1206223.823 ops/s
Iteration   8: 1218026.258 ops/s
Iteration   9: 1225040.506 ops/s
Iteration  10: 1228284.857 ops/s
Iteration  11: 1226132.654 ops/s
Iteration  12: 1219134.477 ops/s
Iteration  13: 1226084.142 ops/s
Iteration  14: 1227439.230 ops/s
Iteration  15: 1221521.364 ops/s
Iteration  16: 1228126.891 ops/s
Iteration  17: 1229891.229 ops/s
Iteration  18: 1228273.817 ops/s
Iteration  19: 1226360.544 ops/s
Iteration  20: 1233610.310 ops/s
Iteration  21: 1227330.500 ops/s
Iteration  22: 1227672.534 ops/s
Iteration  23: 1224943.097 ops/s
Iteration  24: 1230978.687 ops/s
Iteration  25: 1224348.312 ops/s
Iteration  26: 1224695.895 ops/s
Iteration  27: 1232068.208 ops/s
Iteration  28: 1224770.564 ops/s
Iteration  29: 1221274.186 ops/s
Iteration  30: 1231339.635 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWith":
  1225797.207 ±(99.9%) 3522.014 ops/s [Average]
  (min, avg, max) = (1206223.823, 1225797.207, 1233610.310), stdev = 5271.585
  CI (99.9%): [1222275.193, 1229319.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  1225797.207 ± 3522.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615922.835 ops/s
# Warmup Iteration   2: 1284617.468 ops/s
# Warmup Iteration   3: 1436695.512 ops/s
# Warmup Iteration   4: 1451070.862 ops/s
# Warmup Iteration   5: 1158642.864 ops/s
# Warmup Iteration   6: 1455145.328 ops/s
# Warmup Iteration   7: 1449274.658 ops/s
# Warmup Iteration   8: 1448946.222 ops/s
# Warmup Iteration   9: 1441043.077 ops/s
# Warmup Iteration  10: 1452661.009 ops/s
# Warmup Iteration  11: 1441379.055 ops/s
# Warmup Iteration  12: 1447862.325 ops/s
# Warmup Iteration  13: 1451825.434 ops/s
# Warmup Iteration  14: 1455155.609 ops/s
# Warmup Iteration  15: 1449015.812 ops/s
# Warmup Iteration  16: 1445285.282 ops/s
# Warmup Iteration  17: 1448195.429 ops/s
# Warmup Iteration  18: 1446419.442 ops/s
# Warmup Iteration  19: 1451314.184 ops/s
# Warmup Iteration  20: 1450704.591 ops/s
# Warmup Iteration  21: 1447262.521 ops/s
# Warmup Iteration  22: 1456684.582 ops/s
# Warmup Iteration  23: 1446820.541 ops/s
# Warmup Iteration  24: 1443303.735 ops/s
# Warmup Iteration  25: 1451032.827 ops/s
# Warmup Iteration  26: 1451890.115 ops/s
# Warmup Iteration  27: 1449412.324 ops/s
# Warmup Iteration  28: 1449982.000 ops/s
# Warmup Iteration  29: 1450663.175 ops/s
# Warmup Iteration  30: 1449950.782 ops/s
Iteration   1: 1451725.337 ops/s
Iteration   2: 1454737.330 ops/s
Iteration   3: 1449252.393 ops/s
Iteration   4: 1446809.829 ops/s
Iteration   5: 1445146.513 ops/s
Iteration   6: 1447811.973 ops/s
Iteration   7: 1451682.876 ops/s
Iteration   8: 1454751.441 ops/s
Iteration   9: 1449714.581 ops/s
Iteration  10: 1450315.784 ops/s
Iteration  11: 1451092.861 ops/s
Iteration  12: 1456273.479 ops/s
Iteration  13: 1447313.368 ops/s
Iteration  14: 1440895.028 ops/s
Iteration  15: 1449432.853 ops/s
Iteration  16: 1452884.067 ops/s
Iteration  17: 1454141.998 ops/s
Iteration  18: 1451792.814 ops/s
Iteration  19: 1449343.323 ops/s
Iteration  20: 1452855.629 ops/s
Iteration  21: 1452478.284 ops/s
Iteration  22: 1455444.927 ops/s
Iteration  23: 1447373.439 ops/s
Iteration  24: 1440306.576 ops/s
Iteration  25: 1443608.411 ops/s
Iteration  26: 1453585.336 ops/s
Iteration  27: 1448668.778 ops/s
Iteration  28: 1444908.896 ops/s
Iteration  29: 1453957.567 ops/s
Iteration  30: 1443074.125 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  1449712.660 ±(99.9%) 2876.488 ops/s [Average]
  (min, avg, max) = (1440306.576, 1449712.660, 1456273.479), stdev = 4305.392
  CI (99.9%): [1446836.173, 1452589.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  1449712.660 ± 2876.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5004578.313 ops/s
# Warmup Iteration   2: 7446663.636 ops/s
# Warmup Iteration   3: 8276566.300 ops/s
# Warmup Iteration   4: 8305812.013 ops/s
# Warmup Iteration   5: 8316313.310 ops/s
# Warmup Iteration   6: 7778967.222 ops/s
# Warmup Iteration   7: 7560993.771 ops/s
# Warmup Iteration   8: 8289903.510 ops/s
# Warmup Iteration   9: 8313365.425 ops/s
# Warmup Iteration  10: 8316246.065 ops/s
# Warmup Iteration  11: 8362817.099 ops/s
# Warmup Iteration  12: 8352357.316 ops/s
# Warmup Iteration  13: 8360337.453 ops/s
# Warmup Iteration  14: 8324048.412 ops/s
# Warmup Iteration  15: 8313729.629 ops/s
# Warmup Iteration  16: 8329576.741 ops/s
# Warmup Iteration  17: 8331215.828 ops/s
# Warmup Iteration  18: 8332134.289 ops/s
# Warmup Iteration  19: 8363447.267 ops/s
# Warmup Iteration  20: 8351016.350 ops/s
# Warmup Iteration  21: 8363828.885 ops/s
# Warmup Iteration  22: 8365577.641 ops/s
# Warmup Iteration  23: 8366798.304 ops/s
# Warmup Iteration  24: 8335144.269 ops/s
# Warmup Iteration  25: 8331595.204 ops/s
# Warmup Iteration  26: 8331089.550 ops/s
# Warmup Iteration  27: 8316982.140 ops/s
# Warmup Iteration  28: 8322669.888 ops/s
# Warmup Iteration  29: 8347024.948 ops/s
# Warmup Iteration  30: 8360978.176 ops/s
Iteration   1: 8380695.590 ops/s
Iteration   2: 8391342.747 ops/s
Iteration   3: 8342858.875 ops/s
Iteration   4: 8342226.475 ops/s
Iteration   5: 8346361.826 ops/s
Iteration   6: 8323922.588 ops/s
Iteration   7: 8345501.160 ops/s
Iteration   8: 8282665.532 ops/s
Iteration   9: 8372013.145 ops/s
Iteration  10: 8338313.585 ops/s
Iteration  11: 8348579.207 ops/s
Iteration  12: 8400346.787 ops/s
Iteration  13: 8373644.116 ops/s
Iteration  14: 8347866.642 ops/s
Iteration  15: 8349517.081 ops/s
Iteration  16: 8338991.564 ops/s
Iteration  17: 8319109.778 ops/s
Iteration  18: 8326602.882 ops/s
Iteration  19: 8350182.987 ops/s
Iteration  20: 8300775.350 ops/s
Iteration  21: 8303163.882 ops/s
Iteration  22: 8276699.293 ops/s
Iteration  23: 8353077.182 ops/s
Iteration  24: 8321080.234 ops/s
Iteration  25: 8367231.407 ops/s
Iteration  26: 8312973.136 ops/s
Iteration  27: 8371062.256 ops/s
Iteration  28: 8373589.815 ops/s
Iteration  29: 8401991.280 ops/s
Iteration  30: 8341271.360 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEach":
  8344788.592 ±(99.9%) 21063.004 ops/s [Average]
  (min, avg, max) = (8276699.293, 8344788.592, 8401991.280), stdev = 31526.115
  CI (99.9%): [8323725.588, 8365851.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forEach  thrpt   30  8344788.592 ± 21063.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 281902.959 ops/s
# Warmup Iteration   2: 303427.397 ops/s
# Warmup Iteration   3: 352051.139 ops/s
# Warmup Iteration   4: 377988.745 ops/s
# Warmup Iteration   5: 376497.909 ops/s
# Warmup Iteration   6: 377237.144 ops/s
# Warmup Iteration   7: 378763.636 ops/s
# Warmup Iteration   8: 378689.188 ops/s
# Warmup Iteration   9: 378720.384 ops/s
# Warmup Iteration  10: 374582.306 ops/s
# Warmup Iteration  11: 377044.781 ops/s
# Warmup Iteration  12: 377919.208 ops/s
# Warmup Iteration  13: 379402.667 ops/s
# Warmup Iteration  14: 327870.906 ops/s
# Warmup Iteration  15: 368934.725 ops/s
# Warmup Iteration  16: 378893.132 ops/s
# Warmup Iteration  17: 398105.397 ops/s
# Warmup Iteration  18: 396515.383 ops/s
# Warmup Iteration  19: 399216.674 ops/s
# Warmup Iteration  20: 398480.443 ops/s
# Warmup Iteration  21: 400184.235 ops/s
# Warmup Iteration  22: 396118.806 ops/s
# Warmup Iteration  23: 397343.459 ops/s
# Warmup Iteration  24: 396153.944 ops/s
# Warmup Iteration  25: 398853.951 ops/s
# Warmup Iteration  26: 398758.240 ops/s
# Warmup Iteration  27: 393965.141 ops/s
# Warmup Iteration  28: 398353.073 ops/s
# Warmup Iteration  29: 395331.455 ops/s
# Warmup Iteration  30: 395527.984 ops/s
Iteration   1: 399295.259 ops/s
Iteration   2: 397719.289 ops/s
Iteration   3: 398392.374 ops/s
Iteration   4: 396567.748 ops/s
Iteration   5: 398477.185 ops/s
Iteration   6: 398199.640 ops/s
Iteration   7: 395125.562 ops/s
Iteration   8: 400043.923 ops/s
Iteration   9: 398274.966 ops/s
Iteration  10: 397821.344 ops/s
Iteration  11: 397244.672 ops/s
Iteration  12: 399568.671 ops/s
Iteration  13: 400922.728 ops/s
Iteration  14: 398790.422 ops/s
Iteration  15: 400395.045 ops/s
Iteration  16: 397416.751 ops/s
Iteration  17: 398777.113 ops/s
Iteration  18: 399108.537 ops/s
Iteration  19: 398893.147 ops/s
Iteration  20: 398923.837 ops/s
Iteration  21: 398188.999 ops/s
Iteration  22: 399365.958 ops/s
Iteration  23: 399362.953 ops/s
Iteration  24: 399650.532 ops/s
Iteration  25: 398437.845 ops/s
Iteration  26: 397416.909 ops/s
Iteration  27: 398119.690 ops/s
Iteration  28: 399053.584 ops/s
Iteration  29: 399779.841 ops/s
Iteration  30: 398668.902 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachFromTo":
  398600.114 ±(99.9%) 779.604 ops/s [Average]
  (min, avg, max) = (395125.562, 398600.114, 400922.728), stdev = 1166.875
  CI (99.9%): [397820.510, 399379.718] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  398600.114 ± 779.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8338347.386 ops/s
# Warmup Iteration   2: 13026937.039 ops/s
# Warmup Iteration   3: 14602618.855 ops/s
# Warmup Iteration   4: 14710396.590 ops/s
# Warmup Iteration   5: 14712631.102 ops/s
# Warmup Iteration   6: 13554418.591 ops/s
# Warmup Iteration   7: 13453023.161 ops/s
# Warmup Iteration   8: 14705777.566 ops/s
# Warmup Iteration   9: 14718735.508 ops/s
# Warmup Iteration  10: 14719726.726 ops/s
# Warmup Iteration  11: 14739173.510 ops/s
# Warmup Iteration  12: 14746822.853 ops/s
# Warmup Iteration  13: 14692491.076 ops/s
# Warmup Iteration  14: 14696711.965 ops/s
# Warmup Iteration  15: 14740068.821 ops/s
# Warmup Iteration  16: 14730975.436 ops/s
# Warmup Iteration  17: 14675673.397 ops/s
# Warmup Iteration  18: 14723990.239 ops/s
# Warmup Iteration  19: 14658107.351 ops/s
# Warmup Iteration  20: 14714984.238 ops/s
# Warmup Iteration  21: 14632482.722 ops/s
# Warmup Iteration  22: 14689653.147 ops/s
# Warmup Iteration  23: 14726082.635 ops/s
# Warmup Iteration  24: 14701490.199 ops/s
# Warmup Iteration  25: 14702087.779 ops/s
# Warmup Iteration  26: 14651286.329 ops/s
# Warmup Iteration  27: 14707872.945 ops/s
# Warmup Iteration  28: 14698157.724 ops/s
# Warmup Iteration  29: 14704718.570 ops/s
# Warmup Iteration  30: 14724628.573 ops/s
Iteration   1: 14705360.856 ops/s
Iteration   2: 14748922.812 ops/s
Iteration   3: 14738138.334 ops/s
Iteration   4: 14774344.979 ops/s
Iteration   5: 14591425.657 ops/s
Iteration   6: 14637655.828 ops/s
Iteration   7: 14762935.512 ops/s
Iteration   8: 14716682.250 ops/s
Iteration   9: 14703392.548 ops/s
Iteration  10: 14621597.831 ops/s
Iteration  11: 14757182.757 ops/s
Iteration  12: 14733861.072 ops/s
Iteration  13: 14703623.947 ops/s
Iteration  14: 14690266.391 ops/s
Iteration  15: 14717542.471 ops/s
Iteration  16: 14688354.703 ops/s
Iteration  17: 14674759.794 ops/s
Iteration  18: 14618115.418 ops/s
Iteration  19: 14703234.487 ops/s
Iteration  20: 14706613.702 ops/s
Iteration  21: 14719516.362 ops/s
Iteration  22: 14716251.750 ops/s
Iteration  23: 14651475.379 ops/s
Iteration  24: 14719242.676 ops/s
Iteration  25: 14747349.484 ops/s
Iteration  26: 14673561.065 ops/s
Iteration  27: 14717637.820 ops/s
Iteration  28: 14479074.642 ops/s
Iteration  29: 14715707.426 ops/s
Iteration  30: 14658227.343 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWith":
  14693068.510 ±(99.9%) 39975.462 ops/s [Average]
  (min, avg, max) = (14479074.642, 14693068.510, 14774344.979), stdev = 59833.394
  CI (99.9%): [14653093.048, 14733043.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  14693068.510 ± 39975.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5440677.428 ops/s
# Warmup Iteration   2: 8641104.975 ops/s
# Warmup Iteration   3: 9666060.189 ops/s
# Warmup Iteration   4: 9706586.109 ops/s
# Warmup Iteration   5: 9692123.761 ops/s
# Warmup Iteration   6: 8165470.990 ops/s
# Warmup Iteration   7: 9658692.394 ops/s
# Warmup Iteration   8: 9709142.659 ops/s
# Warmup Iteration   9: 9724347.068 ops/s
# Warmup Iteration  10: 9744087.245 ops/s
# Warmup Iteration  11: 9700581.688 ops/s
# Warmup Iteration  12: 9728297.130 ops/s
# Warmup Iteration  13: 9709146.170 ops/s
# Warmup Iteration  14: 9695868.778 ops/s
# Warmup Iteration  15: 9676633.898 ops/s
# Warmup Iteration  16: 9745415.461 ops/s
# Warmup Iteration  17: 9694087.981 ops/s
# Warmup Iteration  18: 9753042.283 ops/s
# Warmup Iteration  19: 9699927.932 ops/s
# Warmup Iteration  20: 9745557.005 ops/s
# Warmup Iteration  21: 9711630.027 ops/s
# Warmup Iteration  22: 9711164.509 ops/s
# Warmup Iteration  23: 9747806.408 ops/s
# Warmup Iteration  24: 9726357.837 ops/s
# Warmup Iteration  25: 9751034.788 ops/s
# Warmup Iteration  26: 9729808.918 ops/s
# Warmup Iteration  27: 9703376.570 ops/s
# Warmup Iteration  28: 9707356.145 ops/s
# Warmup Iteration  29: 9714705.471 ops/s
# Warmup Iteration  30: 9700308.803 ops/s
Iteration   1: 9682809.310 ops/s
Iteration   2: 9760149.155 ops/s
Iteration   3: 9727748.028 ops/s
Iteration   4: 9670382.325 ops/s
Iteration   5: 9748972.546 ops/s
Iteration   6: 9700190.357 ops/s
Iteration   7: 9737788.106 ops/s
Iteration   8: 9711517.979 ops/s
Iteration   9: 9730671.384 ops/s
Iteration  10: 9692209.155 ops/s
Iteration  11: 9688440.456 ops/s
Iteration  12: 9746358.317 ops/s
Iteration  13: 9751338.743 ops/s
Iteration  14: 9692203.364 ops/s
Iteration  15: 9762844.473 ops/s
Iteration  16: 9730604.977 ops/s
Iteration  17: 9694859.804 ops/s
Iteration  18: 9688315.356 ops/s
Iteration  19: 9733064.578 ops/s
Iteration  20: 9714240.187 ops/s
Iteration  21: 9715046.797 ops/s
Iteration  22: 9662794.492 ops/s
Iteration  23: 9636224.802 ops/s
Iteration  24: 9669403.379 ops/s
Iteration  25: 9652685.901 ops/s
Iteration  26: 9650793.646 ops/s
Iteration  27: 9657424.565 ops/s
Iteration  28: 9748126.257 ops/s
Iteration  29: 9742534.891 ops/s
Iteration  30: 9726587.602 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndex":
  9707544.364 ±(99.9%) 24202.820 ops/s [Average]
  (min, avg, max) = (9636224.802, 9707544.364, 9762844.473), stdev = 36225.644
  CI (99.9%): [9683341.545, 9731747.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  9707544.364 ± 24202.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275512.495 ops/s
# Warmup Iteration   2: 300956.717 ops/s
# Warmup Iteration   3: 354038.692 ops/s
# Warmup Iteration   4: 381006.230 ops/s
# Warmup Iteration   5: 378753.167 ops/s
# Warmup Iteration   6: 380465.431 ops/s
# Warmup Iteration   7: 380440.058 ops/s
# Warmup Iteration   8: 379670.244 ops/s
# Warmup Iteration   9: 379155.413 ops/s
# Warmup Iteration  10: 379438.990 ops/s
# Warmup Iteration  11: 380742.820 ops/s
# Warmup Iteration  12: 380519.442 ops/s
# Warmup Iteration  13: 380668.056 ops/s
# Warmup Iteration  14: 320014.174 ops/s
# Warmup Iteration  15: 377283.355 ops/s
# Warmup Iteration  16: 377334.746 ops/s
# Warmup Iteration  17: 397763.450 ops/s
# Warmup Iteration  18: 397174.377 ops/s
# Warmup Iteration  19: 396409.750 ops/s
# Warmup Iteration  20: 398527.447 ops/s
# Warmup Iteration  21: 397562.694 ops/s
# Warmup Iteration  22: 396372.096 ops/s
# Warmup Iteration  23: 395434.830 ops/s
# Warmup Iteration  24: 394627.465 ops/s
# Warmup Iteration  25: 395222.956 ops/s
# Warmup Iteration  26: 395624.414 ops/s
# Warmup Iteration  27: 397198.838 ops/s
# Warmup Iteration  28: 397596.130 ops/s
# Warmup Iteration  29: 397790.365 ops/s
# Warmup Iteration  30: 397790.638 ops/s
Iteration   1: 396725.707 ops/s
Iteration   2: 395160.594 ops/s
Iteration   3: 398589.273 ops/s
Iteration   4: 398085.683 ops/s
Iteration   5: 395677.912 ops/s
Iteration   6: 397686.409 ops/s
Iteration   7: 398098.110 ops/s
Iteration   8: 396755.288 ops/s
Iteration   9: 397111.094 ops/s
Iteration  10: 394567.966 ops/s
Iteration  11: 398776.726 ops/s
Iteration  12: 397108.099 ops/s
Iteration  13: 396873.850 ops/s
Iteration  14: 392598.907 ops/s
Iteration  15: 393041.276 ops/s
Iteration  16: 396741.339 ops/s
Iteration  17: 396096.840 ops/s
Iteration  18: 398189.193 ops/s
Iteration  19: 398534.155 ops/s
Iteration  20: 396019.596 ops/s
Iteration  21: 396728.633 ops/s
Iteration  22: 397585.728 ops/s
Iteration  23: 395607.122 ops/s
Iteration  24: 396566.150 ops/s
Iteration  25: 395094.709 ops/s
Iteration  26: 397190.494 ops/s
Iteration  27: 399135.678 ops/s
Iteration  28: 398399.996 ops/s
Iteration  29: 397631.602 ops/s
Iteration  30: 399421.889 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  396860.001 ±(99.9%) 1101.469 ops/s [Average]
  (min, avg, max) = (392598.907, 396860.001, 399421.889), stdev = 1648.628
  CI (99.9%): [395758.531, 397961.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  396860.001 ± 1101.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18511476.176 ops/s
# Warmup Iteration   2: 36854416.092 ops/s
# Warmup Iteration   3: 37352232.157 ops/s
# Warmup Iteration   4: 31909860.981 ops/s
# Warmup Iteration   5: 37690380.461 ops/s
# Warmup Iteration   6: 37554332.701 ops/s
# Warmup Iteration   7: 37711542.548 ops/s
# Warmup Iteration   8: 37731070.530 ops/s
# Warmup Iteration   9: 37736769.625 ops/s
# Warmup Iteration  10: 37695116.082 ops/s
# Warmup Iteration  11: 37628600.555 ops/s
# Warmup Iteration  12: 37560792.164 ops/s
# Warmup Iteration  13: 37842900.534 ops/s
# Warmup Iteration  14: 37557978.387 ops/s
# Warmup Iteration  15: 37702652.500 ops/s
# Warmup Iteration  16: 37798936.463 ops/s
# Warmup Iteration  17: 37576768.129 ops/s
# Warmup Iteration  18: 37695990.313 ops/s
# Warmup Iteration  19: 37696527.216 ops/s
# Warmup Iteration  20: 37797073.353 ops/s
# Warmup Iteration  21: 37766807.331 ops/s
# Warmup Iteration  22: 37778391.383 ops/s
# Warmup Iteration  23: 37814495.124 ops/s
# Warmup Iteration  24: 37584320.143 ops/s
# Warmup Iteration  25: 37761907.999 ops/s
# Warmup Iteration  26: 37716806.922 ops/s
# Warmup Iteration  27: 37660407.846 ops/s
# Warmup Iteration  28: 37676328.546 ops/s
# Warmup Iteration  29: 37645321.185 ops/s
# Warmup Iteration  30: 37818188.400 ops/s
Iteration   1: 37798292.698 ops/s
Iteration   2: 37454955.638 ops/s
Iteration   3: 37727345.763 ops/s
Iteration   4: 37475223.142 ops/s
Iteration   5: 37533364.697 ops/s
Iteration   6: 37746087.634 ops/s
Iteration   7: 37644281.733 ops/s
Iteration   8: 37700160.455 ops/s
Iteration   9: 37266552.608 ops/s
Iteration  10: 37632718.602 ops/s
Iteration  11: 37610601.399 ops/s
Iteration  12: 37820720.208 ops/s
Iteration  13: 37745317.931 ops/s
Iteration  14: 37566971.063 ops/s
Iteration  15: 37764942.241 ops/s
Iteration  16: 37742611.877 ops/s
Iteration  17: 37662754.007 ops/s
Iteration  18: 37749083.557 ops/s
Iteration  19: 37703469.611 ops/s
Iteration  20: 37510797.535 ops/s
Iteration  21: 37730635.273 ops/s
Iteration  22: 37624630.299 ops/s
Iteration  23: 37346962.458 ops/s
Iteration  24: 37597502.302 ops/s
Iteration  25: 37754264.056 ops/s
Iteration  26: 37853673.464 ops/s
Iteration  27: 37856761.877 ops/s
Iteration  28: 37700651.882 ops/s
Iteration  29: 37727850.211 ops/s
Iteration  30: 37724571.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_forLoop":
  37659125.198 ±(99.9%) 94362.143 ops/s [Average]
  (min, avg, max) = (37266552.608, 37659125.198, 37856761.877), stdev = 141236.824
  CI (99.9%): [37564763.056, 37753487.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_forLoop  thrpt   30  37659125.198 ± 94362.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 364019.397 ops/s
# Warmup Iteration   2: 377401.198 ops/s
# Warmup Iteration   3: 461241.511 ops/s
# Warmup Iteration   4: 480216.800 ops/s
# Warmup Iteration   5: 482039.110 ops/s
# Warmup Iteration   6: 478957.461 ops/s
# Warmup Iteration   7: 446762.757 ops/s
# Warmup Iteration   8: 480914.589 ops/s
# Warmup Iteration   9: 479778.671 ops/s
# Warmup Iteration  10: 480704.441 ops/s
# Warmup Iteration  11: 479132.915 ops/s
# Warmup Iteration  12: 477186.956 ops/s
# Warmup Iteration  13: 420113.584 ops/s
# Warmup Iteration  14: 469658.943 ops/s
# Warmup Iteration  15: 484642.597 ops/s
# Warmup Iteration  16: 481903.394 ops/s
# Warmup Iteration  17: 510225.431 ops/s
# Warmup Iteration  18: 510398.842 ops/s
# Warmup Iteration  19: 512380.887 ops/s
# Warmup Iteration  20: 509762.421 ops/s
# Warmup Iteration  21: 510136.031 ops/s
# Warmup Iteration  22: 510044.829 ops/s
# Warmup Iteration  23: 511310.918 ops/s
# Warmup Iteration  24: 509650.459 ops/s
# Warmup Iteration  25: 509679.183 ops/s
# Warmup Iteration  26: 508975.054 ops/s
# Warmup Iteration  27: 510606.360 ops/s
# Warmup Iteration  28: 510148.057 ops/s
# Warmup Iteration  29: 510471.553 ops/s
# Warmup Iteration  30: 511968.559 ops/s
Iteration   1: 512474.767 ops/s
Iteration   2: 510091.075 ops/s
Iteration   3: 512566.954 ops/s
Iteration   4: 511203.634 ops/s
Iteration   5: 508658.467 ops/s
Iteration   6: 509688.519 ops/s
Iteration   7: 509804.936 ops/s
Iteration   8: 512348.678 ops/s
Iteration   9: 512481.422 ops/s
Iteration  10: 511911.223 ops/s
Iteration  11: 510478.670 ops/s
Iteration  12: 511935.232 ops/s
Iteration  13: 509615.458 ops/s
Iteration  14: 508538.582 ops/s
Iteration  15: 508500.210 ops/s
Iteration  16: 507845.921 ops/s
Iteration  17: 509931.957 ops/s
Iteration  18: 508177.246 ops/s
Iteration  19: 509674.121 ops/s
Iteration  20: 511571.372 ops/s
Iteration  21: 509176.550 ops/s
Iteration  22: 508606.599 ops/s
Iteration  23: 510145.738 ops/s
Iteration  24: 512428.581 ops/s
Iteration  25: 510068.840 ops/s
Iteration  26: 509781.996 ops/s
Iteration  27: 506525.631 ops/s
Iteration  28: 512183.757 ops/s
Iteration  29: 507272.894 ops/s
Iteration  30: 513048.412 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_get":
  510224.581 ±(99.9%) 1184.353 ops/s [Average]
  (min, avg, max) = (506525.631, 510224.581, 513048.412), stdev = 1772.684
  CI (99.9%): [509040.229, 511408.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_get  thrpt   30  510224.581 ± 1184.353  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30654978.499 ops/s
# Warmup Iteration   2: 62192787.258 ops/s
# Warmup Iteration   3: 54124756.665 ops/s
# Warmup Iteration   4: 63114097.720 ops/s
# Warmup Iteration   5: 64139643.111 ops/s
# Warmup Iteration   6: 63349843.495 ops/s
# Warmup Iteration   7: 63784245.394 ops/s
# Warmup Iteration   8: 63695774.801 ops/s
# Warmup Iteration   9: 63929482.305 ops/s
# Warmup Iteration  10: 63870438.820 ops/s
# Warmup Iteration  11: 63558445.312 ops/s
# Warmup Iteration  12: 63375898.415 ops/s
# Warmup Iteration  13: 63814848.251 ops/s
# Warmup Iteration  14: 63411241.649 ops/s
# Warmup Iteration  15: 64083060.876 ops/s
# Warmup Iteration  16: 63466565.269 ops/s
# Warmup Iteration  17: 63611418.926 ops/s
# Warmup Iteration  18: 63881585.630 ops/s
# Warmup Iteration  19: 63992205.680 ops/s
# Warmup Iteration  20: 63359949.707 ops/s
# Warmup Iteration  21: 62860283.117 ops/s
# Warmup Iteration  22: 63122764.427 ops/s
# Warmup Iteration  23: 63668077.167 ops/s
# Warmup Iteration  24: 63680851.189 ops/s
# Warmup Iteration  25: 62848667.725 ops/s
# Warmup Iteration  26: 63267311.434 ops/s
# Warmup Iteration  27: 63951186.701 ops/s
# Warmup Iteration  28: 63457682.200 ops/s
# Warmup Iteration  29: 64057308.939 ops/s
# Warmup Iteration  30: 63852197.651 ops/s
Iteration   1: 62641810.977 ops/s
Iteration   2: 63399838.092 ops/s
Iteration   3: 63491156.009 ops/s
Iteration   4: 63542579.513 ops/s
Iteration   5: 64120843.140 ops/s
Iteration   6: 63803877.009 ops/s
Iteration   7: 63541855.044 ops/s
Iteration   8: 63723700.865 ops/s
Iteration   9: 63371601.601 ops/s
Iteration  10: 62940858.718 ops/s
Iteration  11: 63813663.552 ops/s
Iteration  12: 63269580.261 ops/s
Iteration  13: 64030690.955 ops/s
Iteration  14: 64232505.703 ops/s
Iteration  15: 62801155.829 ops/s
Iteration  16: 63609280.214 ops/s
Iteration  17: 63963233.540 ops/s
Iteration  18: 63910518.584 ops/s
Iteration  19: 63829060.954 ops/s
Iteration  20: 63609947.486 ops/s
Iteration  21: 64314683.265 ops/s
Iteration  22: 63571671.103 ops/s
Iteration  23: 63483526.231 ops/s
Iteration  24: 63507064.782 ops/s
Iteration  25: 63717638.465 ops/s
Iteration  26: 63773352.213 ops/s
Iteration  27: 63638156.509 ops/s
Iteration  28: 63807103.275 ops/s
Iteration  29: 63938284.666 ops/s
Iteration  30: 63740644.997 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getFirst":
  63637996.118 ±(99.9%) 253165.570 ops/s [Average]
  (min, avg, max) = (62641810.977, 63637996.118, 64314683.265), stdev = 378926.336
  CI (99.9%): [63384830.548, 63891161.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_getFirst  thrpt   30  63637996.118 ± 253165.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30245347.549 ops/s
# Warmup Iteration   2: 62640748.996 ops/s
# Warmup Iteration   3: 53288179.718 ops/s
# Warmup Iteration   4: 62237399.967 ops/s
# Warmup Iteration   5: 62134970.600 ops/s
# Warmup Iteration   6: 62250706.133 ops/s
# Warmup Iteration   7: 61726482.560 ops/s
# Warmup Iteration   8: 61567975.553 ops/s
# Warmup Iteration   9: 61853356.755 ops/s
# Warmup Iteration  10: 62317622.900 ops/s
# Warmup Iteration  11: 62486745.832 ops/s
# Warmup Iteration  12: 62356036.015 ops/s
# Warmup Iteration  13: 61812459.956 ops/s
# Warmup Iteration  14: 62477636.577 ops/s
# Warmup Iteration  15: 62105208.003 ops/s
# Warmup Iteration  16: 61565045.307 ops/s
# Warmup Iteration  17: 62623965.077 ops/s
# Warmup Iteration  18: 62178950.388 ops/s
# Warmup Iteration  19: 62492937.304 ops/s
# Warmup Iteration  20: 61885176.852 ops/s
# Warmup Iteration  21: 62094737.379 ops/s
# Warmup Iteration  22: 61625826.571 ops/s
# Warmup Iteration  23: 61825564.060 ops/s
# Warmup Iteration  24: 61929528.476 ops/s
# Warmup Iteration  25: 62166135.967 ops/s
# Warmup Iteration  26: 62177719.876 ops/s
# Warmup Iteration  27: 62108939.081 ops/s
# Warmup Iteration  28: 62274795.170 ops/s
# Warmup Iteration  29: 62050276.551 ops/s
# Warmup Iteration  30: 62009955.078 ops/s
Iteration   1: 61721416.711 ops/s
Iteration   2: 62022103.587 ops/s
Iteration   3: 61995741.024 ops/s
Iteration   4: 62043712.949 ops/s
Iteration   5: 62003746.451 ops/s
Iteration   6: 62166108.077 ops/s
Iteration   7: 61536273.799 ops/s
Iteration   8: 62533638.712 ops/s
Iteration   9: 61617084.523 ops/s
Iteration  10: 61678718.879 ops/s
Iteration  11: 62405707.075 ops/s
Iteration  12: 61975470.089 ops/s
Iteration  13: 62003416.128 ops/s
Iteration  14: 62247276.993 ops/s
Iteration  15: 61909028.026 ops/s
Iteration  16: 62184343.717 ops/s
Iteration  17: 62190405.647 ops/s
Iteration  18: 62187900.996 ops/s
Iteration  19: 61356758.097 ops/s
Iteration  20: 62238938.788 ops/s
Iteration  21: 61933478.732 ops/s
Iteration  22: 62019515.561 ops/s
Iteration  23: 61381786.618 ops/s
Iteration  24: 62458652.100 ops/s
Iteration  25: 62429265.051 ops/s
Iteration  26: 62136229.320 ops/s
Iteration  27: 61329305.454 ops/s
Iteration  28: 61581506.653 ops/s
Iteration  29: 62005886.322 ops/s
Iteration  30: 62463105.302 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getLast":
  61991884.046 ±(99.9%) 225580.690 ops/s [Average]
  (min, avg, max) = (61329305.454, 61991884.046, 62533638.712), stdev = 337638.582
  CI (99.9%): [61766303.356, 62217464.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_getLast  thrpt   30  61991884.046 ± 225580.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770654.385 ops/s
# Warmup Iteration   2: 814102.747 ops/s
# Warmup Iteration   3: 1055081.638 ops/s
# Warmup Iteration   4: 1047036.716 ops/s
# Warmup Iteration   5: 1045142.207 ops/s
# Warmup Iteration   6: 1052530.789 ops/s
# Warmup Iteration   7: 1048514.246 ops/s
# Warmup Iteration   8: 1049400.005 ops/s
# Warmup Iteration   9: 1052379.264 ops/s
# Warmup Iteration  10: 1048711.493 ops/s
# Warmup Iteration  11: 990951.808 ops/s
# Warmup Iteration  12: 947665.549 ops/s
# Warmup Iteration  13: 1048793.931 ops/s
# Warmup Iteration  14: 1045519.701 ops/s
# Warmup Iteration  15: 1047447.550 ops/s
# Warmup Iteration  16: 1046588.527 ops/s
# Warmup Iteration  17: 1112021.507 ops/s
# Warmup Iteration  18: 1120147.712 ops/s
# Warmup Iteration  19: 1111962.952 ops/s
# Warmup Iteration  20: 1114717.474 ops/s
# Warmup Iteration  21: 1113345.000 ops/s
# Warmup Iteration  22: 1112193.613 ops/s
# Warmup Iteration  23: 1117938.344 ops/s
# Warmup Iteration  24: 1122495.982 ops/s
# Warmup Iteration  25: 1120121.532 ops/s
# Warmup Iteration  26: 1125234.443 ops/s
# Warmup Iteration  27: 1120291.059 ops/s
# Warmup Iteration  28: 1116103.445 ops/s
# Warmup Iteration  29: 1115991.647 ops/s
# Warmup Iteration  30: 1118507.669 ops/s
Iteration   1: 1109604.830 ops/s
Iteration   2: 1122808.221 ops/s
Iteration   3: 1111816.503 ops/s
Iteration   4: 1122094.218 ops/s
Iteration   5: 1117302.328 ops/s
Iteration   6: 1108886.732 ops/s
Iteration   7: 1106168.612 ops/s
Iteration   8: 1106029.593 ops/s
Iteration   9: 1118199.500 ops/s
Iteration  10: 1106015.025 ops/s
Iteration  11: 1109006.812 ops/s
Iteration  12: 1117722.559 ops/s
Iteration  13: 1114909.296 ops/s
Iteration  14: 1115996.030 ops/s
Iteration  15: 1113233.110 ops/s
Iteration  16: 1112866.108 ops/s
Iteration  17: 1116080.907 ops/s
Iteration  18: 1100463.657 ops/s
Iteration  19: 1117783.147 ops/s
Iteration  20: 1114612.900 ops/s
Iteration  21: 1123010.996 ops/s
Iteration  22: 1115038.231 ops/s
Iteration  23: 1112587.048 ops/s
Iteration  24: 1118878.854 ops/s
Iteration  25: 1120784.959 ops/s
Iteration  26: 1119834.854 ops/s
Iteration  27: 1118888.094 ops/s
Iteration  28: 1117304.270 ops/s
Iteration  29: 1119157.045 ops/s
Iteration  30: 1121549.928 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_getOnly":
  1114954.479 ±(99.9%) 3798.611 ops/s [Average]
  (min, avg, max) = (1100463.657, 1114954.479, 1123010.996), stdev = 5685.583
  CI (99.9%): [1111155.868, 1118753.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1114954.479 ± 3798.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737725.622 ops/s
# Warmup Iteration   2: 1459414.538 ops/s
# Warmup Iteration   3: 1635115.486 ops/s
# Warmup Iteration   4: 1640476.146 ops/s
# Warmup Iteration   5: 1372916.534 ops/s
# Warmup Iteration   6: 1618537.257 ops/s
# Warmup Iteration   7: 1648414.199 ops/s
# Warmup Iteration   8: 1646361.152 ops/s
# Warmup Iteration   9: 1646904.238 ops/s
# Warmup Iteration  10: 1649396.255 ops/s
# Warmup Iteration  11: 1651495.290 ops/s
# Warmup Iteration  12: 1635600.316 ops/s
# Warmup Iteration  13: 1640676.190 ops/s
# Warmup Iteration  14: 1645407.485 ops/s
# Warmup Iteration  15: 1646027.337 ops/s
# Warmup Iteration  16: 1649324.185 ops/s
# Warmup Iteration  17: 1654888.207 ops/s
# Warmup Iteration  18: 1646715.439 ops/s
# Warmup Iteration  19: 1646457.741 ops/s
# Warmup Iteration  20: 1647387.657 ops/s
# Warmup Iteration  21: 1650079.017 ops/s
# Warmup Iteration  22: 1649380.562 ops/s
# Warmup Iteration  23: 1640012.126 ops/s
# Warmup Iteration  24: 1635345.490 ops/s
# Warmup Iteration  25: 1642552.655 ops/s
# Warmup Iteration  26: 1636721.599 ops/s
# Warmup Iteration  27: 1641448.003 ops/s
# Warmup Iteration  28: 1644406.209 ops/s
# Warmup Iteration  29: 1646900.015 ops/s
# Warmup Iteration  30: 1630890.738 ops/s
Iteration   1: 1646757.788 ops/s
Iteration   2: 1653190.917 ops/s
Iteration   3: 1649283.848 ops/s
Iteration   4: 1638855.057 ops/s
Iteration   5: 1644535.236 ops/s
Iteration   6: 1638810.851 ops/s
Iteration   7: 1627822.098 ops/s
Iteration   8: 1640456.959 ops/s
Iteration   9: 1637594.367 ops/s
Iteration  10: 1647135.125 ops/s
Iteration  11: 1649187.895 ops/s
Iteration  12: 1643409.358 ops/s
Iteration  13: 1652728.540 ops/s
Iteration  14: 1638825.431 ops/s
Iteration  15: 1648026.908 ops/s
Iteration  16: 1645844.894 ops/s
Iteration  17: 1650149.983 ops/s
Iteration  18: 1647335.096 ops/s
Iteration  19: 1648677.309 ops/s
Iteration  20: 1650097.447 ops/s
Iteration  21: 1644714.342 ops/s
Iteration  22: 1650299.619 ops/s
Iteration  23: 1641734.876 ops/s
Iteration  24: 1634343.227 ops/s
Iteration  25: 1652155.624 ops/s
Iteration  26: 1647668.076 ops/s
Iteration  27: 1651357.764 ops/s
Iteration  28: 1650157.985 ops/s
Iteration  29: 1643880.317 ops/s
Iteration  30: 1648570.729 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupBy":
  1645453.589 ±(99.9%) 3971.630 ops/s [Average]
  (min, avg, max) = (1627822.098, 1645453.589, 1653190.917), stdev = 5944.549
  CI (99.9%): [1641481.959, 1649425.219] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_groupBy  thrpt   30  1645453.589 ± 3971.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 81687.348 ops/s
# Warmup Iteration   2: 118416.108 ops/s
# Warmup Iteration   3: 154791.587 ops/s
# Warmup Iteration   4: 154446.806 ops/s
# Warmup Iteration   5: 155701.113 ops/s
# Warmup Iteration   6: 154945.744 ops/s
# Warmup Iteration   7: 154890.402 ops/s
# Warmup Iteration   8: 126036.360 ops/s
# Warmup Iteration   9: 155301.693 ops/s
# Warmup Iteration  10: 155649.094 ops/s
# Warmup Iteration  11: 155075.686 ops/s
# Warmup Iteration  12: 155477.219 ops/s
# Warmup Iteration  13: 155270.916 ops/s
# Warmup Iteration  14: 155108.515 ops/s
# Warmup Iteration  15: 155423.311 ops/s
# Warmup Iteration  16: 155756.941 ops/s
# Warmup Iteration  17: 155584.787 ops/s
# Warmup Iteration  18: 155823.385 ops/s
# Warmup Iteration  19: 154589.493 ops/s
# Warmup Iteration  20: 154991.736 ops/s
# Warmup Iteration  21: 155538.641 ops/s
# Warmup Iteration  22: 155177.753 ops/s
# Warmup Iteration  23: 154027.824 ops/s
# Warmup Iteration  24: 155230.659 ops/s
# Warmup Iteration  25: 154567.772 ops/s
# Warmup Iteration  26: 155062.678 ops/s
# Warmup Iteration  27: 155063.550 ops/s
# Warmup Iteration  28: 155523.037 ops/s
# Warmup Iteration  29: 155045.925 ops/s
# Warmup Iteration  30: 153902.409 ops/s
Iteration   1: 154371.412 ops/s
Iteration   2: 155512.321 ops/s
Iteration   3: 154438.961 ops/s
Iteration   4: 155067.839 ops/s
Iteration   5: 155151.999 ops/s
Iteration   6: 155293.408 ops/s
Iteration   7: 155930.439 ops/s
Iteration   8: 155606.155 ops/s
Iteration   9: 155413.077 ops/s
Iteration  10: 153879.201 ops/s
Iteration  11: 153685.020 ops/s
Iteration  12: 154098.433 ops/s
Iteration  13: 155352.149 ops/s
Iteration  14: 154965.784 ops/s
Iteration  15: 155561.666 ops/s
Iteration  16: 154693.665 ops/s
Iteration  17: 154596.226 ops/s
Iteration  18: 155719.625 ops/s
Iteration  19: 155958.933 ops/s
Iteration  20: 155169.342 ops/s
Iteration  21: 154646.990 ops/s
Iteration  22: 154993.997 ops/s
Iteration  23: 154925.306 ops/s
Iteration  24: 154748.169 ops/s
Iteration  25: 155042.928 ops/s
Iteration  26: 154796.920 ops/s
Iteration  27: 155590.845 ops/s
Iteration  28: 155259.066 ops/s
Iteration  29: 155479.093 ops/s
Iteration  30: 155823.734 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_groupByEach":
  155059.090 ±(99.9%) 390.520 ops/s [Average]
  (min, avg, max) = (153685.020, 155059.090, 155958.933), stdev = 584.513
  CI (99.9%): [154668.570, 155449.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  155059.090 ± 390.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10911854.404 ops/s
# Warmup Iteration   2: 23728150.615 ops/s
# Warmup Iteration   3: 19969358.730 ops/s
# Warmup Iteration   4: 23872434.994 ops/s
# Warmup Iteration   5: 23752563.763 ops/s
# Warmup Iteration   6: 23708222.851 ops/s
# Warmup Iteration   7: 23842043.256 ops/s
# Warmup Iteration   8: 23816241.415 ops/s
# Warmup Iteration   9: 23815949.979 ops/s
# Warmup Iteration  10: 23707254.013 ops/s
# Warmup Iteration  11: 23593132.315 ops/s
# Warmup Iteration  12: 23742806.219 ops/s
# Warmup Iteration  13: 23754870.269 ops/s
# Warmup Iteration  14: 23697655.103 ops/s
# Warmup Iteration  15: 23769877.504 ops/s
# Warmup Iteration  16: 23732057.620 ops/s
# Warmup Iteration  17: 23626705.947 ops/s
# Warmup Iteration  18: 23690347.606 ops/s
# Warmup Iteration  19: 23850355.938 ops/s
# Warmup Iteration  20: 23413793.716 ops/s
# Warmup Iteration  21: 23638307.087 ops/s
# Warmup Iteration  22: 23718771.374 ops/s
# Warmup Iteration  23: 23825215.750 ops/s
# Warmup Iteration  24: 23681411.147 ops/s
# Warmup Iteration  25: 23820303.834 ops/s
# Warmup Iteration  26: 23614288.484 ops/s
# Warmup Iteration  27: 23786167.841 ops/s
# Warmup Iteration  28: 23773110.366 ops/s
# Warmup Iteration  29: 23775344.562 ops/s
# Warmup Iteration  30: 23913071.839 ops/s
Iteration   1: 23743954.600 ops/s
Iteration   2: 23843683.540 ops/s
Iteration   3: 23693204.627 ops/s
Iteration   4: 23771864.351 ops/s
Iteration   5: 23772601.176 ops/s
Iteration   6: 23794721.344 ops/s
Iteration   7: 23637845.838 ops/s
Iteration   8: 23770746.018 ops/s
Iteration   9: 23878792.965 ops/s
Iteration  10: 23843549.625 ops/s
Iteration  11: 23656428.862 ops/s
Iteration  12: 23816284.922 ops/s
Iteration  13: 23912187.693 ops/s
Iteration  14: 23887622.557 ops/s
Iteration  15: 23879950.681 ops/s
Iteration  16: 23906453.066 ops/s
Iteration  17: 23929379.570 ops/s
Iteration  18: 23914372.065 ops/s
Iteration  19: 23936753.221 ops/s
Iteration  20: 23725060.177 ops/s
Iteration  21: 23866683.228 ops/s
Iteration  22: 23858833.777 ops/s
Iteration  23: 23916938.953 ops/s
Iteration  24: 23932218.391 ops/s
Iteration  25: 23705368.266 ops/s
Iteration  26: 23708788.778 ops/s
Iteration  27: 23790202.213 ops/s
Iteration  28: 23809731.179 ops/s
Iteration  29: 23605507.038 ops/s
Iteration  30: 23640463.934 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_indexOf":
  23805006.422 ±(99.9%) 66272.332 ops/s [Average]
  (min, avg, max) = (23605507.038, 23805006.422, 23936753.221), stdev = 99193.315
  CI (99.9%): [23738734.089, 23871278.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_indexOf  thrpt   30  23805006.422 ± 66272.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12113687.734 ops/s
# Warmup Iteration   2: 21490012.287 ops/s
# Warmup Iteration   3: 23182632.197 ops/s
# Warmup Iteration   4: 23304934.015 ops/s
# Warmup Iteration   5: 23235941.073 ops/s
# Warmup Iteration   6: 19601819.470 ops/s
# Warmup Iteration   7: 23170545.092 ops/s
# Warmup Iteration   8: 23234181.745 ops/s
# Warmup Iteration   9: 23401664.811 ops/s
# Warmup Iteration  10: 23392380.164 ops/s
# Warmup Iteration  11: 23395199.349 ops/s
# Warmup Iteration  12: 23454124.364 ops/s
# Warmup Iteration  13: 23429255.470 ops/s
# Warmup Iteration  14: 23446246.244 ops/s
# Warmup Iteration  15: 23404304.225 ops/s
# Warmup Iteration  16: 23331501.964 ops/s
# Warmup Iteration  17: 23309240.473 ops/s
# Warmup Iteration  18: 23415363.763 ops/s
# Warmup Iteration  19: 23375093.870 ops/s
# Warmup Iteration  20: 23370620.975 ops/s
# Warmup Iteration  21: 23361981.905 ops/s
# Warmup Iteration  22: 23239875.633 ops/s
# Warmup Iteration  23: 23408209.195 ops/s
# Warmup Iteration  24: 23369286.928 ops/s
# Warmup Iteration  25: 23354399.297 ops/s
# Warmup Iteration  26: 23328924.469 ops/s
# Warmup Iteration  27: 23353224.830 ops/s
# Warmup Iteration  28: 23358748.930 ops/s
# Warmup Iteration  29: 23378995.073 ops/s
# Warmup Iteration  30: 23381055.855 ops/s
Iteration   1: 23422278.052 ops/s
Iteration   2: 23375746.718 ops/s
Iteration   3: 23433113.114 ops/s
Iteration   4: 23373505.259 ops/s
Iteration   5: 23395700.005 ops/s
Iteration   6: 23380020.275 ops/s
Iteration   7: 23356356.520 ops/s
Iteration   8: 23423377.289 ops/s
Iteration   9: 23351420.259 ops/s
Iteration  10: 23324135.021 ops/s
Iteration  11: 23173032.879 ops/s
Iteration  12: 23121328.372 ops/s
Iteration  13: 23322515.016 ops/s
Iteration  14: 23195210.942 ops/s
Iteration  15: 22975613.381 ops/s
Iteration  16: 23139078.653 ops/s
Iteration  17: 23240098.115 ops/s
Iteration  18: 23336814.131 ops/s
Iteration  19: 23378126.130 ops/s
Iteration  20: 23329324.566 ops/s
Iteration  21: 23220715.592 ops/s
Iteration  22: 23345644.962 ops/s
Iteration  23: 23287005.309 ops/s
Iteration  24: 23249181.374 ops/s
Iteration  25: 23308472.342 ops/s
Iteration  26: 23224170.392 ops/s
Iteration  27: 23217522.627 ops/s
Iteration  28: 23308260.901 ops/s
Iteration  29: 23220294.262 ops/s
Iteration  30: 23240237.924 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectInto":
  23288943.346 ±(99.9%) 69479.957 ops/s [Average]
  (min, avg, max) = (22975613.381, 23288943.346, 23433113.114), stdev = 103994.337
  CI (99.9%): [23219463.389, 23358423.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_injectInto  thrpt   30  23288943.346 ± 69479.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20176581.699 ops/s
# Warmup Iteration   2: 21037873.703 ops/s
# Warmup Iteration   3: 20605165.482 ops/s
# Warmup Iteration   4: 23846150.313 ops/s
# Warmup Iteration   5: 24685324.540 ops/s
# Warmup Iteration   6: 24649670.934 ops/s
# Warmup Iteration   7: 24699458.913 ops/s
# Warmup Iteration   8: 24619979.710 ops/s
# Warmup Iteration   9: 24436843.639 ops/s
# Warmup Iteration  10: 24585100.582 ops/s
# Warmup Iteration  11: 24716598.878 ops/s
# Warmup Iteration  12: 24721553.464 ops/s
# Warmup Iteration  13: 24712971.442 ops/s
# Warmup Iteration  14: 24749912.031 ops/s
# Warmup Iteration  15: 24794572.104 ops/s
# Warmup Iteration  16: 24752636.523 ops/s
# Warmup Iteration  17: 24390986.992 ops/s
# Warmup Iteration  18: 24495081.154 ops/s
# Warmup Iteration  19: 24521546.370 ops/s
# Warmup Iteration  20: 21866138.970 ops/s
# Warmup Iteration  21: 22942281.483 ops/s
# Warmup Iteration  22: 24420819.737 ops/s
# Warmup Iteration  23: 24376624.176 ops/s
# Warmup Iteration  24: 24326737.955 ops/s
# Warmup Iteration  25: 24377251.735 ops/s
# Warmup Iteration  26: 24514892.085 ops/s
# Warmup Iteration  27: 24425970.664 ops/s
# Warmup Iteration  28: 24357565.993 ops/s
# Warmup Iteration  29: 24440957.860 ops/s
# Warmup Iteration  30: 24366129.467 ops/s
Iteration   1: 24479150.644 ops/s
Iteration   2: 24557456.058 ops/s
Iteration   3: 24391485.717 ops/s
Iteration   4: 24404134.189 ops/s
Iteration   5: 24409591.716 ops/s
Iteration   6: 24500763.542 ops/s
Iteration   7: 24447925.173 ops/s
Iteration   8: 24289769.583 ops/s
Iteration   9: 24453150.099 ops/s
Iteration  10: 24405261.261 ops/s
Iteration  11: 24434637.384 ops/s
Iteration  12: 24349430.981 ops/s
Iteration  13: 24447082.649 ops/s
Iteration  14: 24284856.143 ops/s
Iteration  15: 24453652.850 ops/s
Iteration  16: 24480525.353 ops/s
Iteration  17: 24358522.125 ops/s
Iteration  18: 24219469.890 ops/s
Iteration  19: 24238509.019 ops/s
Iteration  20: 24513073.722 ops/s
Iteration  21: 24423533.636 ops/s
Iteration  22: 24466191.008 ops/s
Iteration  23: 24531838.273 ops/s
Iteration  24: 24527809.934 ops/s
Iteration  25: 24437968.177 ops/s
Iteration  26: 24516303.825 ops/s
Iteration  27: 24089676.989 ops/s
Iteration  28: 24431291.034 ops/s
Iteration  29: 24426672.315 ops/s
Iteration  30: 24372520.075 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoDouble":
  24411408.445 ±(99.9%) 68956.854 ops/s [Average]
  (min, avg, max) = (24089676.989, 24411408.445, 24557456.058), stdev = 103211.380
  CI (99.9%): [24342451.592, 24480365.299] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  24411408.445 ± 68956.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20469128.541 ops/s
# Warmup Iteration   2: 21492936.794 ops/s
# Warmup Iteration   3: 21421923.815 ops/s
# Warmup Iteration   4: 25179455.170 ops/s
# Warmup Iteration   5: 25644806.681 ops/s
# Warmup Iteration   6: 25610166.863 ops/s
# Warmup Iteration   7: 25627423.009 ops/s
# Warmup Iteration   8: 25563711.665 ops/s
# Warmup Iteration   9: 25545535.652 ops/s
# Warmup Iteration  10: 25593541.369 ops/s
# Warmup Iteration  11: 25667519.428 ops/s
# Warmup Iteration  12: 25577153.052 ops/s
# Warmup Iteration  13: 25659042.857 ops/s
# Warmup Iteration  14: 25640376.339 ops/s
# Warmup Iteration  15: 25678320.248 ops/s
# Warmup Iteration  16: 25608273.431 ops/s
# Warmup Iteration  17: 25656306.300 ops/s
# Warmup Iteration  18: 25686444.027 ops/s
# Warmup Iteration  19: 24087639.084 ops/s
# Warmup Iteration  20: 23110641.405 ops/s
# Warmup Iteration  21: 25609625.451 ops/s
# Warmup Iteration  22: 25697712.401 ops/s
# Warmup Iteration  23: 25658897.249 ops/s
# Warmup Iteration  24: 25512594.589 ops/s
# Warmup Iteration  25: 25358030.033 ops/s
# Warmup Iteration  26: 25507397.042 ops/s
# Warmup Iteration  27: 25469725.660 ops/s
# Warmup Iteration  28: 25581648.403 ops/s
# Warmup Iteration  29: 25487660.400 ops/s
# Warmup Iteration  30: 25399061.472 ops/s
Iteration   1: 25598990.058 ops/s
Iteration   2: 25519194.595 ops/s
Iteration   3: 25563340.330 ops/s
Iteration   4: 25618383.595 ops/s
Iteration   5: 25571146.476 ops/s
Iteration   6: 25296180.883 ops/s
Iteration   7: 25753816.337 ops/s
Iteration   8: 25392201.454 ops/s
Iteration   9: 25721689.930 ops/s
Iteration  10: 25766270.001 ops/s
Iteration  11: 25712926.475 ops/s
Iteration  12: 25680073.758 ops/s
Iteration  13: 25661078.927 ops/s
Iteration  14: 25491904.062 ops/s
Iteration  15: 25585370.768 ops/s
Iteration  16: 25355937.002 ops/s
Iteration  17: 25605809.360 ops/s
Iteration  18: 25637308.187 ops/s
Iteration  19: 25546146.971 ops/s
Iteration  20: 25568393.714 ops/s
Iteration  21: 25268670.913 ops/s
Iteration  22: 25545632.365 ops/s
Iteration  23: 25573374.804 ops/s
Iteration  24: 25640361.202 ops/s
Iteration  25: 25704133.001 ops/s
Iteration  26: 25584736.969 ops/s
Iteration  27: 25474992.344 ops/s
Iteration  28: 25620063.463 ops/s
Iteration  29: 25248198.232 ops/s
Iteration  30: 25708515.504 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoFloat":
  25567161.389 ±(99.9%) 92484.750 ops/s [Average]
  (min, avg, max) = (25248198.232, 25567161.389, 25766270.001), stdev = 138426.830
  CI (99.9%): [25474676.639, 25659646.139] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  25567161.389 ± 92484.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21300619.205 ops/s
# Warmup Iteration   2: 22289605.371 ops/s
# Warmup Iteration   3: 22866972.852 ops/s
# Warmup Iteration   4: 27520030.497 ops/s
# Warmup Iteration   5: 27412121.107 ops/s
# Warmup Iteration   6: 27583561.032 ops/s
# Warmup Iteration   7: 27646103.440 ops/s
# Warmup Iteration   8: 27575170.184 ops/s
# Warmup Iteration   9: 27614967.045 ops/s
# Warmup Iteration  10: 27665943.532 ops/s
# Warmup Iteration  11: 27705083.556 ops/s
# Warmup Iteration  12: 27575199.579 ops/s
# Warmup Iteration  13: 27582821.037 ops/s
# Warmup Iteration  14: 27573491.966 ops/s
# Warmup Iteration  15: 27628396.736 ops/s
# Warmup Iteration  16: 27623852.978 ops/s
# Warmup Iteration  17: 27628652.290 ops/s
# Warmup Iteration  18: 24809154.441 ops/s
# Warmup Iteration  19: 26125810.616 ops/s
# Warmup Iteration  20: 27657972.226 ops/s
# Warmup Iteration  21: 27659095.595 ops/s
# Warmup Iteration  22: 27651649.033 ops/s
# Warmup Iteration  23: 27567359.624 ops/s
# Warmup Iteration  24: 27533896.776 ops/s
# Warmup Iteration  25: 27528096.750 ops/s
# Warmup Iteration  26: 27612077.209 ops/s
# Warmup Iteration  27: 27404266.028 ops/s
# Warmup Iteration  28: 27637765.285 ops/s
# Warmup Iteration  29: 27375362.499 ops/s
# Warmup Iteration  30: 27502751.896 ops/s
Iteration   1: 27385649.213 ops/s
Iteration   2: 27650339.974 ops/s
Iteration   3: 27522311.351 ops/s
Iteration   4: 27567055.968 ops/s
Iteration   5: 27547930.400 ops/s
Iteration   6: 27592267.537 ops/s
Iteration   7: 27577467.619 ops/s
Iteration   8: 27572096.692 ops/s
Iteration   9: 27597637.654 ops/s
Iteration  10: 27494876.768 ops/s
Iteration  11: 27655440.417 ops/s
Iteration  12: 27683554.359 ops/s
Iteration  13: 27662395.198 ops/s
Iteration  14: 27558593.708 ops/s
Iteration  15: 27518930.899 ops/s
Iteration  16: 27616512.110 ops/s
Iteration  17: 27633162.439 ops/s
Iteration  18: 27681039.089 ops/s
Iteration  19: 27656457.936 ops/s
Iteration  20: 27675699.787 ops/s
Iteration  21: 27675531.598 ops/s
Iteration  22: 27646735.047 ops/s
Iteration  23: 27685356.155 ops/s
Iteration  24: 27664733.485 ops/s
Iteration  25: 27670021.921 ops/s
Iteration  26: 27612220.137 ops/s
Iteration  27: 27590155.383 ops/s
Iteration  28: 27483555.463 ops/s
Iteration  29: 27630167.280 ops/s
Iteration  30: 27643328.863 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoInt":
  27605040.815 ±(99.9%) 48035.382 ops/s [Average]
  (min, avg, max) = (27385649.213, 27605040.815, 27685356.155), stdev = 71897.104
  CI (99.9%): [27557005.433, 27653076.197] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  27605040.815 ± 48035.382  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20693989.951 ops/s
# Warmup Iteration   2: 21809963.079 ops/s
# Warmup Iteration   3: 21844484.215 ops/s
# Warmup Iteration   4: 25866671.290 ops/s
# Warmup Iteration   5: 26013582.542 ops/s
# Warmup Iteration   6: 25895017.939 ops/s
# Warmup Iteration   7: 25986685.888 ops/s
# Warmup Iteration   8: 25951166.645 ops/s
# Warmup Iteration   9: 25722211.237 ops/s
# Warmup Iteration  10: 26001591.115 ops/s
# Warmup Iteration  11: 25988753.466 ops/s
# Warmup Iteration  12: 26020100.256 ops/s
# Warmup Iteration  13: 26013033.132 ops/s
# Warmup Iteration  14: 25999580.236 ops/s
# Warmup Iteration  15: 26022018.359 ops/s
# Warmup Iteration  16: 25998826.398 ops/s
# Warmup Iteration  17: 26033875.716 ops/s
# Warmup Iteration  18: 26021297.413 ops/s
# Warmup Iteration  19: 23291078.076 ops/s
# Warmup Iteration  20: 24493663.421 ops/s
# Warmup Iteration  21: 25968560.804 ops/s
# Warmup Iteration  22: 26016016.964 ops/s
# Warmup Iteration  23: 25903128.021 ops/s
# Warmup Iteration  24: 25955653.301 ops/s
# Warmup Iteration  25: 25936894.543 ops/s
# Warmup Iteration  26: 25873358.537 ops/s
# Warmup Iteration  27: 25976033.324 ops/s
# Warmup Iteration  28: 25918543.057 ops/s
# Warmup Iteration  29: 25941597.815 ops/s
# Warmup Iteration  30: 25935631.710 ops/s
Iteration   1: 25860386.645 ops/s
Iteration   2: 25812860.878 ops/s
Iteration   3: 25918207.035 ops/s
Iteration   4: 25969991.130 ops/s
Iteration   5: 26025290.572 ops/s
Iteration   6: 25917928.660 ops/s
Iteration   7: 25955253.429 ops/s
Iteration   8: 25836763.228 ops/s
Iteration   9: 25982472.461 ops/s
Iteration  10: 25992005.276 ops/s
Iteration  11: 25875419.183 ops/s
Iteration  12: 25962361.329 ops/s
Iteration  13: 26040249.759 ops/s
Iteration  14: 25901660.576 ops/s
Iteration  15: 26017755.641 ops/s
Iteration  16: 25956091.692 ops/s
Iteration  17: 25995759.964 ops/s
Iteration  18: 25931521.417 ops/s
Iteration  19: 25847159.978 ops/s
Iteration  20: 25946578.892 ops/s
Iteration  21: 25876472.265 ops/s
Iteration  22: 25956517.040 ops/s
Iteration  23: 25915812.760 ops/s
Iteration  24: 26013246.344 ops/s
Iteration  25: 25715991.675 ops/s
Iteration  26: 25908531.942 ops/s
Iteration  27: 25726367.356 ops/s
Iteration  28: 25849731.850 ops/s
Iteration  29: 26011215.077 ops/s
Iteration  30: 26007113.931 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoLong":
  25924223.933 ±(99.9%) 55303.410 ops/s [Average]
  (min, avg, max) = (25715991.675, 25924223.933, 26040249.759), stdev = 82775.547
  CI (99.9%): [25868920.523, 25979527.343] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  25924223.933 ± 55303.410  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31591482.322 ops/s
# Warmup Iteration   2: 62824912.094 ops/s
# Warmup Iteration   3: 54834890.944 ops/s
# Warmup Iteration   4: 63608172.150 ops/s
# Warmup Iteration   5: 64214046.989 ops/s
# Warmup Iteration   6: 63930342.825 ops/s
# Warmup Iteration   7: 64149640.551 ops/s
# Warmup Iteration   8: 63919482.306 ops/s
# Warmup Iteration   9: 64037878.057 ops/s
# Warmup Iteration  10: 63423292.214 ops/s
# Warmup Iteration  11: 63886585.053 ops/s
# Warmup Iteration  12: 63301274.796 ops/s
# Warmup Iteration  13: 64527656.102 ops/s
# Warmup Iteration  14: 63956212.254 ops/s
# Warmup Iteration  15: 63527856.400 ops/s
# Warmup Iteration  16: 63692935.024 ops/s
# Warmup Iteration  17: 63720332.545 ops/s
# Warmup Iteration  18: 63542397.615 ops/s
# Warmup Iteration  19: 63842817.180 ops/s
# Warmup Iteration  20: 63872596.375 ops/s
# Warmup Iteration  21: 63967038.208 ops/s
# Warmup Iteration  22: 63762973.570 ops/s
# Warmup Iteration  23: 63886590.369 ops/s
# Warmup Iteration  24: 63731806.538 ops/s
# Warmup Iteration  25: 64317598.830 ops/s
# Warmup Iteration  26: 63902078.525 ops/s
# Warmup Iteration  27: 64261206.090 ops/s
# Warmup Iteration  28: 64316235.241 ops/s
# Warmup Iteration  29: 64001971.905 ops/s
# Warmup Iteration  30: 62942054.536 ops/s
Iteration   1: 63359199.543 ops/s
Iteration   2: 64303538.750 ops/s
Iteration   3: 64115164.113 ops/s
Iteration   4: 64227554.653 ops/s
Iteration   5: 64286280.095 ops/s
Iteration   6: 64212791.986 ops/s
Iteration   7: 64349422.626 ops/s
Iteration   8: 64185732.039 ops/s
Iteration   9: 64230881.868 ops/s
Iteration  10: 64247756.555 ops/s
Iteration  11: 63376114.816 ops/s
Iteration  12: 63344868.923 ops/s
Iteration  13: 63958618.379 ops/s
Iteration  14: 64313014.036 ops/s
Iteration  15: 63857223.872 ops/s
Iteration  16: 63981091.390 ops/s
Iteration  17: 64230228.024 ops/s
Iteration  18: 64500926.328 ops/s
Iteration  19: 63982597.719 ops/s
Iteration  20: 63820351.376 ops/s
Iteration  21: 63835772.846 ops/s
Iteration  22: 63481144.832 ops/s
Iteration  23: 64494775.636 ops/s
Iteration  24: 64428581.419 ops/s
Iteration  25: 64384162.515 ops/s
Iteration  26: 63928493.655 ops/s
Iteration  27: 63528966.087 ops/s
Iteration  28: 63948181.975 ops/s
Iteration  29: 64402677.634 ops/s
Iteration  30: 62937487.048 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_isEmpty":
  64008453.358 ±(99.9%) 267030.592 ops/s [Average]
  (min, avg, max) = (62937487.048, 64008453.358, 64500926.328), stdev = 399678.849
  CI (99.9%): [63741422.766, 64275483.949] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  64008453.358 ± 267030.592  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366863.366 ops/s
# Warmup Iteration   2: 385197.192 ops/s
# Warmup Iteration   3: 457003.842 ops/s
# Warmup Iteration   4: 487141.440 ops/s
# Warmup Iteration   5: 488521.972 ops/s
# Warmup Iteration   6: 486176.845 ops/s
# Warmup Iteration   7: 488605.281 ops/s
# Warmup Iteration   8: 484036.837 ops/s
# Warmup Iteration   9: 487176.445 ops/s
# Warmup Iteration  10: 487403.498 ops/s
# Warmup Iteration  11: 487451.688 ops/s
# Warmup Iteration  12: 486484.938 ops/s
# Warmup Iteration  13: 487841.958 ops/s
# Warmup Iteration  14: 412959.274 ops/s
# Warmup Iteration  15: 489523.989 ops/s
# Warmup Iteration  16: 484645.702 ops/s
# Warmup Iteration  17: 513753.514 ops/s
# Warmup Iteration  18: 515204.411 ops/s
# Warmup Iteration  19: 515636.306 ops/s
# Warmup Iteration  20: 517726.248 ops/s
# Warmup Iteration  21: 517267.262 ops/s
# Warmup Iteration  22: 517276.595 ops/s
# Warmup Iteration  23: 515433.058 ops/s
# Warmup Iteration  24: 514046.328 ops/s
# Warmup Iteration  25: 517712.255 ops/s
# Warmup Iteration  26: 516048.255 ops/s
# Warmup Iteration  27: 517625.382 ops/s
# Warmup Iteration  28: 517159.535 ops/s
# Warmup Iteration  29: 516754.225 ops/s
# Warmup Iteration  30: 514516.029 ops/s
Iteration   1: 511841.353 ops/s
Iteration   2: 514078.476 ops/s
Iteration   3: 511749.631 ops/s
Iteration   4: 515862.741 ops/s
Iteration   5: 513521.296 ops/s
Iteration   6: 514925.672 ops/s
Iteration   7: 516812.109 ops/s
Iteration   8: 519533.507 ops/s
Iteration   9: 516385.109 ops/s
Iteration  10: 516502.693 ops/s
Iteration  11: 517035.149 ops/s
Iteration  12: 514090.635 ops/s
Iteration  13: 516629.582 ops/s
Iteration  14: 515129.269 ops/s
Iteration  15: 516207.497 ops/s
Iteration  16: 517040.452 ops/s
Iteration  17: 515959.225 ops/s
Iteration  18: 518476.086 ops/s
Iteration  19: 517531.593 ops/s
Iteration  20: 516919.784 ops/s
Iteration  21: 516024.296 ops/s
Iteration  22: 515917.752 ops/s
Iteration  23: 516335.310 ops/s
Iteration  24: 514611.716 ops/s
Iteration  25: 514299.836 ops/s
Iteration  26: 516110.690 ops/s
Iteration  27: 517068.118 ops/s
Iteration  28: 517311.390 ops/s
Iteration  29: 518652.103 ops/s
Iteration  30: 517028.234 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iterator":
  515986.377 ±(99.9%) 1190.855 ops/s [Average]
  (min, avg, max) = (511749.631, 515986.377, 519533.507), stdev = 1782.415
  CI (99.9%): [514795.522, 517177.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_iterator  thrpt   30  515986.377 ± 1190.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 720141.286 ops/s
# Warmup Iteration   2: 770112.548 ops/s
# Warmup Iteration   3: 980528.277 ops/s
# Warmup Iteration   4: 973466.213 ops/s
# Warmup Iteration   5: 971243.483 ops/s
# Warmup Iteration   6: 978828.549 ops/s
# Warmup Iteration   7: 974917.890 ops/s
# Warmup Iteration   8: 973389.698 ops/s
# Warmup Iteration   9: 974370.325 ops/s
# Warmup Iteration  10: 968681.296 ops/s
# Warmup Iteration  11: 873950.804 ops/s
# Warmup Iteration  12: 920911.367 ops/s
# Warmup Iteration  13: 973421.138 ops/s
# Warmup Iteration  14: 971967.842 ops/s
# Warmup Iteration  15: 974912.062 ops/s
# Warmup Iteration  16: 977525.940 ops/s
# Warmup Iteration  17: 1039124.597 ops/s
# Warmup Iteration  18: 1036079.173 ops/s
# Warmup Iteration  19: 1033227.150 ops/s
# Warmup Iteration  20: 1025961.014 ops/s
# Warmup Iteration  21: 1029472.754 ops/s
# Warmup Iteration  22: 1034902.704 ops/s
# Warmup Iteration  23: 1034706.810 ops/s
# Warmup Iteration  24: 1032406.088 ops/s
# Warmup Iteration  25: 1040177.347 ops/s
# Warmup Iteration  26: 1035121.811 ops/s
# Warmup Iteration  27: 1037471.450 ops/s
# Warmup Iteration  28: 1036633.522 ops/s
# Warmup Iteration  29: 1039787.914 ops/s
# Warmup Iteration  30: 1039353.500 ops/s
Iteration   1: 1038022.787 ops/s
Iteration   2: 1035766.189 ops/s
Iteration   3: 1039690.339 ops/s
Iteration   4: 1032031.085 ops/s
Iteration   5: 1028495.827 ops/s
Iteration   6: 1028800.994 ops/s
Iteration   7: 1030504.441 ops/s
Iteration   8: 1036907.118 ops/s
Iteration   9: 1039740.755 ops/s
Iteration  10: 1039362.587 ops/s
Iteration  11: 1035212.725 ops/s
Iteration  12: 1037184.074 ops/s
Iteration  13: 1037099.998 ops/s
Iteration  14: 1035736.679 ops/s
Iteration  15: 1037093.484 ops/s
Iteration  16: 1027343.503 ops/s
Iteration  17: 1032477.027 ops/s
Iteration  18: 1029934.210 ops/s
Iteration  19: 1027037.097 ops/s
Iteration  20: 1027777.633 ops/s
Iteration  21: 1037008.422 ops/s
Iteration  22: 1033552.704 ops/s
Iteration  23: 1036767.559 ops/s
Iteration  24: 1032911.866 ops/s
Iteration  25: 1036953.066 ops/s
Iteration  26: 1033689.226 ops/s
Iteration  27: 1035994.193 ops/s
Iteration  28: 1037212.569 ops/s
Iteration  29: 1032683.351 ops/s
Iteration  30: 1036823.665 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_iteratorRemove":
  1034327.172 ±(99.9%) 2564.094 ops/s [Average]
  (min, avg, max) = (1027037.097, 1034327.172, 1039740.755), stdev = 3837.815
  CI (99.9%): [1031763.078, 1036891.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1034327.172 ± 2564.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7627489.426 ops/s
# Warmup Iteration   2: 16944204.673 ops/s
# Warmup Iteration   3: 16886096.736 ops/s
# Warmup Iteration   4: 14279982.041 ops/s
# Warmup Iteration   5: 16916254.507 ops/s
# Warmup Iteration   6: 16860369.871 ops/s
# Warmup Iteration   7: 16809879.122 ops/s
# Warmup Iteration   8: 16877665.607 ops/s
# Warmup Iteration   9: 16899171.407 ops/s
# Warmup Iteration  10: 16890715.404 ops/s
# Warmup Iteration  11: 16912231.203 ops/s
# Warmup Iteration  12: 16908756.101 ops/s
# Warmup Iteration  13: 16907648.023 ops/s
# Warmup Iteration  14: 16877168.373 ops/s
# Warmup Iteration  15: 16827386.628 ops/s
# Warmup Iteration  16: 16907752.694 ops/s
# Warmup Iteration  17: 16880628.294 ops/s
# Warmup Iteration  18: 16887174.100 ops/s
# Warmup Iteration  19: 16898533.275 ops/s
# Warmup Iteration  20: 16921370.491 ops/s
# Warmup Iteration  21: 16885060.705 ops/s
# Warmup Iteration  22: 16900833.891 ops/s
# Warmup Iteration  23: 16854721.564 ops/s
# Warmup Iteration  24: 16901257.781 ops/s
# Warmup Iteration  25: 16929439.493 ops/s
# Warmup Iteration  26: 16850640.427 ops/s
# Warmup Iteration  27: 16902367.822 ops/s
# Warmup Iteration  28: 16886752.399 ops/s
# Warmup Iteration  29: 16915156.930 ops/s
# Warmup Iteration  30: 16838953.148 ops/s
Iteration   1: 16918543.980 ops/s
Iteration   2: 16937027.510 ops/s
Iteration   3: 16876463.655 ops/s
Iteration   4: 16832129.882 ops/s
Iteration   5: 16894652.433 ops/s
Iteration   6: 16908516.490 ops/s
Iteration   7: 16922636.138 ops/s
Iteration   8: 16898231.098 ops/s
Iteration   9: 16894295.271 ops/s
Iteration  10: 16906401.811 ops/s
Iteration  11: 16847967.067 ops/s
Iteration  12: 16922546.641 ops/s
Iteration  13: 16877794.793 ops/s
Iteration  14: 16926283.980 ops/s
Iteration  15: 16877871.419 ops/s
Iteration  16: 16900105.351 ops/s
Iteration  17: 16856677.965 ops/s
Iteration  18: 16921716.491 ops/s
Iteration  19: 16933934.142 ops/s
Iteration  20: 16847162.500 ops/s
Iteration  21: 16918254.527 ops/s
Iteration  22: 16822125.045 ops/s
Iteration  23: 16882071.456 ops/s
Iteration  24: 16966998.773 ops/s
Iteration  25: 16921742.599 ops/s
Iteration  26: 16900433.986 ops/s
Iteration  27: 16930335.103 ops/s
Iteration  28: 16907533.426 ops/s
Iteration  29: 16903618.475 ops/s
Iteration  30: 16940875.372 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_lastIndexOf":
  16899831.579 ±(99.9%) 22567.455 ops/s [Average]
  (min, avg, max) = (16822125.045, 16899831.579, 16966998.773), stdev = 33777.907
  CI (99.9%): [16877264.124, 16922399.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  16899831.579 ± 22567.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 144759.666 ops/s
# Warmup Iteration   2: 153765.525 ops/s
# Warmup Iteration   3: 186009.291 ops/s
# Warmup Iteration   4: 194741.632 ops/s
# Warmup Iteration   5: 194919.464 ops/s
# Warmup Iteration   6: 193387.662 ops/s
# Warmup Iteration   7: 193919.600 ops/s
# Warmup Iteration   8: 194038.511 ops/s
# Warmup Iteration   9: 195011.783 ops/s
# Warmup Iteration  10: 194438.449 ops/s
# Warmup Iteration  11: 194464.006 ops/s
# Warmup Iteration  12: 194904.646 ops/s
# Warmup Iteration  13: 176030.368 ops/s
# Warmup Iteration  14: 183556.939 ops/s
# Warmup Iteration  15: 194563.805 ops/s
# Warmup Iteration  16: 193943.130 ops/s
# Warmup Iteration  17: 204853.516 ops/s
# Warmup Iteration  18: 204364.701 ops/s
# Warmup Iteration  19: 205115.228 ops/s
# Warmup Iteration  20: 205404.111 ops/s
# Warmup Iteration  21: 205322.789 ops/s
# Warmup Iteration  22: 205772.179 ops/s
# Warmup Iteration  23: 205109.309 ops/s
# Warmup Iteration  24: 204205.543 ops/s
# Warmup Iteration  25: 205244.519 ops/s
# Warmup Iteration  26: 204100.950 ops/s
# Warmup Iteration  27: 205474.580 ops/s
# Warmup Iteration  28: 204915.049 ops/s
# Warmup Iteration  29: 205077.462 ops/s
# Warmup Iteration  30: 205080.772 ops/s
Iteration   1: 205399.106 ops/s
Iteration   2: 204505.334 ops/s
Iteration   3: 205377.577 ops/s
Iteration   4: 202983.203 ops/s
Iteration   5: 204669.420 ops/s
Iteration   6: 206148.107 ops/s
Iteration   7: 204652.588 ops/s
Iteration   8: 205327.143 ops/s
Iteration   9: 204523.872 ops/s
Iteration  10: 205669.464 ops/s
Iteration  11: 205142.700 ops/s
Iteration  12: 204801.231 ops/s
Iteration  13: 205118.719 ops/s
Iteration  14: 205704.720 ops/s
Iteration  15: 206197.663 ops/s
Iteration  16: 203681.313 ops/s
Iteration  17: 205099.059 ops/s
Iteration  18: 204704.360 ops/s
Iteration  19: 205462.441 ops/s
Iteration  20: 205529.161 ops/s
Iteration  21: 206501.648 ops/s
Iteration  22: 206391.985 ops/s
Iteration  23: 205712.777 ops/s
Iteration  24: 205613.430 ops/s
Iteration  25: 205458.892 ops/s
Iteration  26: 205998.725 ops/s
Iteration  27: 205605.839 ops/s
Iteration  28: 205792.864 ops/s
Iteration  29: 204867.799 ops/s
Iteration  30: 205249.075 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator":
  205263.007 ±(99.9%) 504.933 ops/s [Average]
  (min, avg, max) = (202983.203, 205263.007, 206501.648), stdev = 755.760
  CI (99.9%): [204758.074, 205767.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_listIterator  thrpt   30  205263.007 ± 504.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750233.753 ops/s
# Warmup Iteration   2: 781258.791 ops/s
# Warmup Iteration   3: 998403.172 ops/s
# Warmup Iteration   4: 1027679.276 ops/s
# Warmup Iteration   5: 1028700.529 ops/s
# Warmup Iteration   6: 1028304.114 ops/s
# Warmup Iteration   7: 1028972.975 ops/s
# Warmup Iteration   8: 1028708.043 ops/s
# Warmup Iteration   9: 1025614.346 ops/s
# Warmup Iteration  10: 1023083.106 ops/s
# Warmup Iteration  11: 1030600.188 ops/s
# Warmup Iteration  12: 916918.054 ops/s
# Warmup Iteration  13: 962772.075 ops/s
# Warmup Iteration  14: 1021946.116 ops/s
# Warmup Iteration  15: 1020374.197 ops/s
# Warmup Iteration  16: 1029218.156 ops/s
# Warmup Iteration  17: 1095067.736 ops/s
# Warmup Iteration  18: 1096133.099 ops/s
# Warmup Iteration  19: 1096717.688 ops/s
# Warmup Iteration  20: 1096204.020 ops/s
# Warmup Iteration  21: 1094631.661 ops/s
# Warmup Iteration  22: 1089573.709 ops/s
# Warmup Iteration  23: 1096245.716 ops/s
# Warmup Iteration  24: 1097094.475 ops/s
# Warmup Iteration  25: 1095293.243 ops/s
# Warmup Iteration  26: 1094450.430 ops/s
# Warmup Iteration  27: 1094646.657 ops/s
# Warmup Iteration  28: 1093153.331 ops/s
# Warmup Iteration  29: 1086916.204 ops/s
# Warmup Iteration  30: 1093999.784 ops/s
Iteration   1: 1092005.256 ops/s
Iteration   2: 1098155.579 ops/s
Iteration   3: 1096704.754 ops/s
Iteration   4: 1094679.487 ops/s
Iteration   5: 1093184.394 ops/s
Iteration   6: 1088055.128 ops/s
Iteration   7: 1088819.649 ops/s
Iteration   8: 1096124.305 ops/s
Iteration   9: 1090061.210 ops/s
Iteration  10: 1095150.279 ops/s
Iteration  11: 1091561.569 ops/s
Iteration  12: 1100125.478 ops/s
Iteration  13: 1092477.356 ops/s
Iteration  14: 1095111.216 ops/s
Iteration  15: 1097881.933 ops/s
Iteration  16: 1088368.035 ops/s
Iteration  17: 1093197.470 ops/s
Iteration  18: 1095406.818 ops/s
Iteration  19: 1090783.413 ops/s
Iteration  20: 1094324.597 ops/s
Iteration  21: 1096859.166 ops/s
Iteration  22: 1089900.051 ops/s
Iteration  23: 1093661.426 ops/s
Iteration  24: 1097755.569 ops/s
Iteration  25: 1090723.291 ops/s
Iteration  26: 1091838.703 ops/s
Iteration  27: 1097777.062 ops/s
Iteration  28: 1096030.813 ops/s
Iteration  29: 1094202.079 ops/s
Iteration  30: 1096475.339 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1093913.381 ±(99.9%) 2145.460 ops/s [Average]
  (min, avg, max) = (1088055.128, 1093913.381, 1100125.478), stdev = 3211.224
  CI (99.9%): [1091767.921, 1096058.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1093913.381 ± 2145.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756276.866 ops/s
# Warmup Iteration   2: 784049.986 ops/s
# Warmup Iteration   3: 1015543.728 ops/s
# Warmup Iteration   4: 1041424.877 ops/s
# Warmup Iteration   5: 1042677.482 ops/s
# Warmup Iteration   6: 1034314.503 ops/s
# Warmup Iteration   7: 1036864.904 ops/s
# Warmup Iteration   8: 1040003.919 ops/s
# Warmup Iteration   9: 1041762.436 ops/s
# Warmup Iteration  10: 1038773.182 ops/s
# Warmup Iteration  11: 1039235.276 ops/s
# Warmup Iteration  12: 891804.698 ops/s
# Warmup Iteration  13: 1018149.706 ops/s
# Warmup Iteration  14: 1043312.380 ops/s
# Warmup Iteration  15: 1042624.010 ops/s
# Warmup Iteration  16: 1041488.813 ops/s
# Warmup Iteration  17: 1119569.845 ops/s
# Warmup Iteration  18: 1119212.689 ops/s
# Warmup Iteration  19: 1114840.626 ops/s
# Warmup Iteration  20: 1121070.538 ops/s
# Warmup Iteration  21: 1115016.586 ops/s
# Warmup Iteration  22: 1117994.693 ops/s
# Warmup Iteration  23: 1115132.301 ops/s
# Warmup Iteration  24: 1119633.117 ops/s
# Warmup Iteration  25: 1118559.987 ops/s
# Warmup Iteration  26: 1120234.746 ops/s
# Warmup Iteration  27: 1120123.387 ops/s
# Warmup Iteration  28: 1119528.048 ops/s
# Warmup Iteration  29: 1116951.951 ops/s
# Warmup Iteration  30: 1116005.814 ops/s
Iteration   1: 1117842.090 ops/s
Iteration   2: 1114615.342 ops/s
Iteration   3: 1120513.594 ops/s
Iteration   4: 1118141.803 ops/s
Iteration   5: 1119602.100 ops/s
Iteration   6: 1117799.800 ops/s
Iteration   7: 1121656.132 ops/s
Iteration   8: 1115734.688 ops/s
Iteration   9: 1114231.499 ops/s
Iteration  10: 1112225.673 ops/s
Iteration  11: 1115773.935 ops/s
Iteration  12: 1115983.471 ops/s
Iteration  13: 1116396.787 ops/s
Iteration  14: 1116664.112 ops/s
Iteration  15: 1122239.706 ops/s
Iteration  16: 1113746.956 ops/s
Iteration  17: 1118767.830 ops/s
Iteration  18: 1113405.695 ops/s
Iteration  19: 1118819.274 ops/s
Iteration  20: 1114864.955 ops/s
Iteration  21: 1113946.085 ops/s
Iteration  22: 1113131.811 ops/s
Iteration  23: 1122972.239 ops/s
Iteration  24: 1116989.100 ops/s
Iteration  25: 1120365.372 ops/s
Iteration  26: 1119625.830 ops/s
Iteration  27: 1113626.042 ops/s
Iteration  28: 1110324.276 ops/s
Iteration  29: 1108694.204 ops/s
Iteration  30: 1115185.699 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1116462.870 ±(99.9%) 2300.759 ops/s [Average]
  (min, avg, max) = (1108694.204, 1116462.870, 1122972.239), stdev = 3443.668
  CI (99.9%): [1114162.111, 1118763.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1116462.870 ± 2300.759  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156385.889 ops/s
# Warmup Iteration   2: 317493.251 ops/s
# Warmup Iteration   3: 357328.603 ops/s
# Warmup Iteration   4: 359717.911 ops/s
# Warmup Iteration   5: 298019.910 ops/s
# Warmup Iteration   6: 355701.250 ops/s
# Warmup Iteration   7: 360856.849 ops/s
# Warmup Iteration   8: 359649.286 ops/s
# Warmup Iteration   9: 358569.348 ops/s
# Warmup Iteration  10: 360116.790 ops/s
# Warmup Iteration  11: 360765.545 ops/s
# Warmup Iteration  12: 360521.078 ops/s
# Warmup Iteration  13: 358246.315 ops/s
# Warmup Iteration  14: 358604.138 ops/s
# Warmup Iteration  15: 360001.766 ops/s
# Warmup Iteration  16: 360173.490 ops/s
# Warmup Iteration  17: 359153.653 ops/s
# Warmup Iteration  18: 359701.307 ops/s
# Warmup Iteration  19: 359755.611 ops/s
# Warmup Iteration  20: 359092.112 ops/s
# Warmup Iteration  21: 358237.845 ops/s
# Warmup Iteration  22: 359742.764 ops/s
# Warmup Iteration  23: 360134.340 ops/s
# Warmup Iteration  24: 359027.805 ops/s
# Warmup Iteration  25: 359828.104 ops/s
# Warmup Iteration  26: 360503.253 ops/s
# Warmup Iteration  27: 359917.032 ops/s
# Warmup Iteration  28: 358569.879 ops/s
# Warmup Iteration  29: 358585.384 ops/s
# Warmup Iteration  30: 359425.252 ops/s
Iteration   1: 358306.807 ops/s
Iteration   2: 360220.719 ops/s
Iteration   3: 358890.288 ops/s
Iteration   4: 359326.849 ops/s
Iteration   5: 360116.103 ops/s
Iteration   6: 359698.962 ops/s
Iteration   7: 360287.604 ops/s
Iteration   8: 359812.428 ops/s
Iteration   9: 360133.833 ops/s
Iteration  10: 360250.312 ops/s
Iteration  11: 360636.637 ops/s
Iteration  12: 358982.100 ops/s
Iteration  13: 358383.178 ops/s
Iteration  14: 360591.297 ops/s
Iteration  15: 359958.175 ops/s
Iteration  16: 359726.807 ops/s
Iteration  17: 359596.689 ops/s
Iteration  18: 359751.579 ops/s
Iteration  19: 359160.769 ops/s
Iteration  20: 359820.749 ops/s
Iteration  21: 360317.219 ops/s
Iteration  22: 359747.513 ops/s
Iteration  23: 360088.426 ops/s
Iteration  24: 358082.521 ops/s
Iteration  25: 359629.378 ops/s
Iteration  26: 360089.899 ops/s
Iteration  27: 360391.464 ops/s
Iteration  28: 360497.270 ops/s
Iteration  29: 359698.965 ops/s
Iteration  30: 359903.385 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_makeString":
  359736.597 ±(99.9%) 443.151 ops/s [Average]
  (min, avg, max) = (358082.521, 359736.597, 360636.637), stdev = 663.288
  CI (99.9%): [359293.446, 360179.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_makeString  thrpt   30  359736.597 ± 443.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11438027.787 ops/s
# Warmup Iteration   2: 17609739.897 ops/s
# Warmup Iteration   3: 23552553.795 ops/s
# Warmup Iteration   4: 23669952.741 ops/s
# Warmup Iteration   5: 23693073.273 ops/s
# Warmup Iteration   6: 19935651.921 ops/s
# Warmup Iteration   7: 23650949.051 ops/s
# Warmup Iteration   8: 23744713.650 ops/s
# Warmup Iteration   9: 23729046.399 ops/s
# Warmup Iteration  10: 23696502.556 ops/s
# Warmup Iteration  11: 23678288.760 ops/s
# Warmup Iteration  12: 23659943.238 ops/s
# Warmup Iteration  13: 23746215.710 ops/s
# Warmup Iteration  14: 23739801.661 ops/s
# Warmup Iteration  15: 23654658.143 ops/s
# Warmup Iteration  16: 23647484.053 ops/s
# Warmup Iteration  17: 23728649.529 ops/s
# Warmup Iteration  18: 23649609.790 ops/s
# Warmup Iteration  19: 23711760.021 ops/s
# Warmup Iteration  20: 23753905.049 ops/s
# Warmup Iteration  21: 23775321.134 ops/s
# Warmup Iteration  22: 23757871.407 ops/s
# Warmup Iteration  23: 23729351.961 ops/s
# Warmup Iteration  24: 23774454.190 ops/s
# Warmup Iteration  25: 23669522.013 ops/s
# Warmup Iteration  26: 23680219.654 ops/s
# Warmup Iteration  27: 23715717.866 ops/s
# Warmup Iteration  28: 23733476.948 ops/s
# Warmup Iteration  29: 23752926.398 ops/s
# Warmup Iteration  30: 23722538.651 ops/s
Iteration   1: 23727558.254 ops/s
Iteration   2: 23701172.553 ops/s
Iteration   3: 23664974.257 ops/s
Iteration   4: 23754818.819 ops/s
Iteration   5: 23582327.262 ops/s
Iteration   6: 23669762.778 ops/s
Iteration   7: 23457283.526 ops/s
Iteration   8: 23773521.337 ops/s
Iteration   9: 23732027.562 ops/s
Iteration  10: 23740773.976 ops/s
Iteration  11: 23708693.463 ops/s
Iteration  12: 23732536.967 ops/s
Iteration  13: 23752183.234 ops/s
Iteration  14: 23702520.373 ops/s
Iteration  15: 23751488.109 ops/s
Iteration  16: 23524748.556 ops/s
Iteration  17: 23712511.145 ops/s
Iteration  18: 23716793.122 ops/s
Iteration  19: 23804246.603 ops/s
Iteration  20: 23731270.019 ops/s
Iteration  21: 23781552.340 ops/s
Iteration  22: 23507898.516 ops/s
Iteration  23: 23468181.213 ops/s
Iteration  24: 23572227.945 ops/s
Iteration  25: 23644696.976 ops/s
Iteration  26: 23713244.585 ops/s
Iteration  27: 23708193.528 ops/s
Iteration  28: 23553997.482 ops/s
Iteration  29: 23746196.064 ops/s
Iteration  30: 23711845.890 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max":
  23678308.215 ±(99.9%) 63584.705 ops/s [Average]
  (min, avg, max) = (23457283.526, 23678308.215, 23804246.603), stdev = 95170.600
  CI (99.9%): [23614723.510, 23741892.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_max  thrpt   30  23678308.215 ± 63584.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11849286.259 ops/s
# Warmup Iteration   2: 24079737.604 ops/s
# Warmup Iteration   3: 22669444.942 ops/s
# Warmup Iteration   4: 19436144.997 ops/s
# Warmup Iteration   5: 22733491.477 ops/s
# Warmup Iteration   6: 22828410.918 ops/s
# Warmup Iteration   7: 22736833.202 ops/s
# Warmup Iteration   8: 22616042.075 ops/s
# Warmup Iteration   9: 22885239.152 ops/s
# Warmup Iteration  10: 22840012.255 ops/s
# Warmup Iteration  11: 22810356.814 ops/s
# Warmup Iteration  12: 22795077.499 ops/s
# Warmup Iteration  13: 22714186.331 ops/s
# Warmup Iteration  14: 22695296.022 ops/s
# Warmup Iteration  15: 22834174.302 ops/s
# Warmup Iteration  16: 22801294.425 ops/s
# Warmup Iteration  17: 22849964.160 ops/s
# Warmup Iteration  18: 22787655.376 ops/s
# Warmup Iteration  19: 22885109.668 ops/s
# Warmup Iteration  20: 22913770.183 ops/s
# Warmup Iteration  21: 22689483.722 ops/s
# Warmup Iteration  22: 22831677.441 ops/s
# Warmup Iteration  23: 22794306.880 ops/s
# Warmup Iteration  24: 22806704.468 ops/s
# Warmup Iteration  25: 22802772.442 ops/s
# Warmup Iteration  26: 22758521.097 ops/s
# Warmup Iteration  27: 22840964.775 ops/s
# Warmup Iteration  28: 22745700.178 ops/s
# Warmup Iteration  29: 22883296.835 ops/s
# Warmup Iteration  30: 22835788.657 ops/s
Iteration   1: 22753272.947 ops/s
Iteration   2: 22844080.542 ops/s
Iteration   3: 22765514.972 ops/s
Iteration   4: 22924656.811 ops/s
Iteration   5: 22783715.418 ops/s
Iteration   6: 22835717.216 ops/s
Iteration   7: 22877293.668 ops/s
Iteration   8: 22944091.342 ops/s
Iteration   9: 22784452.702 ops/s
Iteration  10: 22661630.818 ops/s
Iteration  11: 22635924.140 ops/s
Iteration  12: 22557701.943 ops/s
Iteration  13: 22758676.163 ops/s
Iteration  14: 22712765.208 ops/s
Iteration  15: 22734579.582 ops/s
Iteration  16: 22748479.698 ops/s
Iteration  17: 22636098.162 ops/s
Iteration  18: 22821810.746 ops/s
Iteration  19: 22698105.807 ops/s
Iteration  20: 22757398.699 ops/s
Iteration  21: 22663587.222 ops/s
Iteration  22: 22846971.163 ops/s
Iteration  23: 22722692.711 ops/s
Iteration  24: 22808645.554 ops/s
Iteration  25: 22906532.629 ops/s
Iteration  26: 22863496.910 ops/s
Iteration  27: 22864855.027 ops/s
Iteration  28: 22813523.190 ops/s
Iteration  29: 22841366.905 ops/s
Iteration  30: 22804631.142 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_maxBy":
  22779075.635 ±(99.9%) 61430.808 ops/s [Average]
  (min, avg, max) = (22557701.943, 22779075.635, 22944091.342), stdev = 91946.748
  CI (99.9%): [22717644.827, 22840506.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_maxBy  thrpt   30  22779075.635 ± 61430.808  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3168091.239 ops/s
# Warmup Iteration   2: 5583700.093 ops/s
# Warmup Iteration   3: 7832058.498 ops/s
# Warmup Iteration   4: 7903314.309 ops/s
# Warmup Iteration   5: 7904716.612 ops/s
# Warmup Iteration   6: 6539839.040 ops/s
# Warmup Iteration   7: 7886039.614 ops/s
# Warmup Iteration   8: 7919021.552 ops/s
# Warmup Iteration   9: 7922570.409 ops/s
# Warmup Iteration  10: 7920341.181 ops/s
# Warmup Iteration  11: 7940807.436 ops/s
# Warmup Iteration  12: 7936557.446 ops/s
# Warmup Iteration  13: 7933148.768 ops/s
# Warmup Iteration  14: 7924613.437 ops/s
# Warmup Iteration  15: 7911787.368 ops/s
# Warmup Iteration  16: 7920702.874 ops/s
# Warmup Iteration  17: 7907448.990 ops/s
# Warmup Iteration  18: 7916522.872 ops/s
# Warmup Iteration  19: 7920105.733 ops/s
# Warmup Iteration  20: 7922149.919 ops/s
# Warmup Iteration  21: 7903600.291 ops/s
# Warmup Iteration  22: 7930760.020 ops/s
# Warmup Iteration  23: 7894463.633 ops/s
# Warmup Iteration  24: 7925413.591 ops/s
# Warmup Iteration  25: 7916102.136 ops/s
# Warmup Iteration  26: 7935770.329 ops/s
# Warmup Iteration  27: 7933638.054 ops/s
# Warmup Iteration  28: 7917595.136 ops/s
# Warmup Iteration  29: 7932248.795 ops/s
# Warmup Iteration  30: 7913362.206 ops/s
Iteration   1: 7847113.977 ops/s
Iteration   2: 7920307.023 ops/s
Iteration   3: 7931534.521 ops/s
Iteration   4: 7908905.811 ops/s
Iteration   5: 7913728.967 ops/s
Iteration   6: 7924415.560 ops/s
Iteration   7: 7917594.510 ops/s
Iteration   8: 7940123.527 ops/s
Iteration   9: 7911648.397 ops/s
Iteration  10: 7914863.119 ops/s
Iteration  11: 7926285.764 ops/s
Iteration  12: 7902577.790 ops/s
Iteration  13: 7935408.524 ops/s
Iteration  14: 7883665.165 ops/s
Iteration  15: 7916940.808 ops/s
Iteration  16: 7910099.730 ops/s
Iteration  17: 7944606.929 ops/s
Iteration  18: 7933310.633 ops/s
Iteration  19: 7922846.865 ops/s
Iteration  20: 7905140.596 ops/s
Iteration  21: 7936039.247 ops/s
Iteration  22: 7930238.074 ops/s
Iteration  23: 7901408.379 ops/s
Iteration  24: 7822689.211 ops/s
Iteration  25: 7891764.733 ops/s
Iteration  26: 7909250.780 ops/s
Iteration  27: 7897130.649 ops/s
Iteration  28: 7930138.157 ops/s
Iteration  29: 7922584.856 ops/s
Iteration  30: 7937173.107 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws":
  7912984.514 ±(99.9%) 17411.074 ops/s [Average]
  (min, avg, max) = (7822689.211, 7912984.514, 7944606.929), stdev = 26060.078
  CI (99.9%): [7895573.440, 7930395.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  7912984.514 ± 17411.074  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3802496.351 ops/s
# Warmup Iteration   2: 7040502.045 ops/s
# Warmup Iteration   3: 8021674.834 ops/s
# Warmup Iteration   4: 8039644.376 ops/s
# Warmup Iteration   5: 7745797.429 ops/s
# Warmup Iteration   6: 6988727.857 ops/s
# Warmup Iteration   7: 8076134.131 ops/s
# Warmup Iteration   8: 8083417.002 ops/s
# Warmup Iteration   9: 8060091.165 ops/s
# Warmup Iteration  10: 8087154.992 ops/s
# Warmup Iteration  11: 8096093.637 ops/s
# Warmup Iteration  12: 8081973.262 ops/s
# Warmup Iteration  13: 8073948.452 ops/s
# Warmup Iteration  14: 8026219.780 ops/s
# Warmup Iteration  15: 8064835.858 ops/s
# Warmup Iteration  16: 8069332.553 ops/s
# Warmup Iteration  17: 8107641.597 ops/s
# Warmup Iteration  18: 8073175.930 ops/s
# Warmup Iteration  19: 8107765.847 ops/s
# Warmup Iteration  20: 8100827.031 ops/s
# Warmup Iteration  21: 8092233.419 ops/s
# Warmup Iteration  22: 8071086.208 ops/s
# Warmup Iteration  23: 8078813.070 ops/s
# Warmup Iteration  24: 8071412.996 ops/s
# Warmup Iteration  25: 8058777.721 ops/s
# Warmup Iteration  26: 8090557.928 ops/s
# Warmup Iteration  27: 8062112.208 ops/s
# Warmup Iteration  28: 8085964.748 ops/s
# Warmup Iteration  29: 8052581.863 ops/s
# Warmup Iteration  30: 8077502.027 ops/s
Iteration   1: 8029782.710 ops/s
Iteration   2: 8058498.359 ops/s
Iteration   3: 8025758.689 ops/s
Iteration   4: 8089922.032 ops/s
Iteration   5: 8051001.380 ops/s
Iteration   6: 8080679.479 ops/s
Iteration   7: 8079957.670 ops/s
Iteration   8: 8035383.201 ops/s
Iteration   9: 8103702.636 ops/s
Iteration  10: 8072352.006 ops/s
Iteration  11: 8043788.661 ops/s
Iteration  12: 8093421.077 ops/s
Iteration  13: 8049683.590 ops/s
Iteration  14: 8113908.612 ops/s
Iteration  15: 8106863.548 ops/s
Iteration  16: 8067120.817 ops/s
Iteration  17: 8073490.595 ops/s
Iteration  18: 8069696.440 ops/s
Iteration  19: 8072427.759 ops/s
Iteration  20: 8090962.139 ops/s
Iteration  21: 8070255.844 ops/s
Iteration  22: 8061132.797 ops/s
Iteration  23: 8077246.204 ops/s
Iteration  24: 8094185.348 ops/s
Iteration  25: 8066177.766 ops/s
Iteration  26: 8080700.137 ops/s
Iteration  27: 8092465.724 ops/s
Iteration  28: 8046549.411 ops/s
Iteration  29: 8083886.797 ops/s
Iteration  30: 8102927.291 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  8072797.624 ±(99.9%) 15376.606 ops/s [Average]
  (min, avg, max) = (8025758.689, 8072797.624, 8113908.612), stdev = 23014.982
  CI (99.9%): [8057421.017, 8088174.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  8072797.624 ± 15376.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11751353.662 ops/s
# Warmup Iteration   2: 25794363.964 ops/s
# Warmup Iteration   3: 22399023.936 ops/s
# Warmup Iteration   4: 22543476.529 ops/s
# Warmup Iteration   5: 24239129.829 ops/s
# Warmup Iteration   6: 24278853.583 ops/s
# Warmup Iteration   7: 24256358.942 ops/s
# Warmup Iteration   8: 24297233.346 ops/s
# Warmup Iteration   9: 24238801.724 ops/s
# Warmup Iteration  10: 24297804.453 ops/s
# Warmup Iteration  11: 24311973.647 ops/s
# Warmup Iteration  12: 24282529.523 ops/s
# Warmup Iteration  13: 24277503.409 ops/s
# Warmup Iteration  14: 24152083.737 ops/s
# Warmup Iteration  15: 24309968.752 ops/s
# Warmup Iteration  16: 24346350.841 ops/s
# Warmup Iteration  17: 24145884.142 ops/s
# Warmup Iteration  18: 24215286.822 ops/s
# Warmup Iteration  19: 24327204.904 ops/s
# Warmup Iteration  20: 24319094.505 ops/s
# Warmup Iteration  21: 24226023.418 ops/s
# Warmup Iteration  22: 24295766.800 ops/s
# Warmup Iteration  23: 24318281.628 ops/s
# Warmup Iteration  24: 24176126.655 ops/s
# Warmup Iteration  25: 24342961.719 ops/s
# Warmup Iteration  26: 24327317.098 ops/s
# Warmup Iteration  27: 24254482.189 ops/s
# Warmup Iteration  28: 24281853.775 ops/s
# Warmup Iteration  29: 24245751.672 ops/s
# Warmup Iteration  30: 24282979.612 ops/s
Iteration   1: 24372392.342 ops/s
Iteration   2: 24389505.118 ops/s
Iteration   3: 24325220.222 ops/s
Iteration   4: 24397207.713 ops/s
Iteration   5: 24304532.005 ops/s
Iteration   6: 24282070.208 ops/s
Iteration   7: 24165866.854 ops/s
Iteration   8: 24345029.441 ops/s
Iteration   9: 24298961.876 ops/s
Iteration  10: 24301124.063 ops/s
Iteration  11: 24344553.297 ops/s
Iteration  12: 24324813.585 ops/s
Iteration  13: 24295148.439 ops/s
Iteration  14: 24323207.363 ops/s
Iteration  15: 24138323.427 ops/s
Iteration  16: 24332905.198 ops/s
Iteration  17: 24333389.978 ops/s
Iteration  18: 24242447.213 ops/s
Iteration  19: 24213835.501 ops/s
Iteration  20: 23972262.569 ops/s
Iteration  21: 24110392.111 ops/s
Iteration  22: 24359850.002 ops/s
Iteration  23: 24292437.809 ops/s
Iteration  24: 24188380.598 ops/s
Iteration  25: 24328747.129 ops/s
Iteration  26: 24220613.470 ops/s
Iteration  27: 24250643.472 ops/s
Iteration  28: 24279059.711 ops/s
Iteration  29: 24259921.855 ops/s
Iteration  30: 24290916.719 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_max_without_comparator":
  24276125.310 ±(99.9%) 60778.187 ops/s [Average]
  (min, avg, max) = (23972262.569, 24276125.310, 24397207.713), stdev = 90969.937
  CI (99.9%): [24215347.122, 24336903.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  24276125.310 ± 60778.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17830919.085 ops/s
# Warmup Iteration   2: 37400336.663 ops/s
# Warmup Iteration   3: 37407715.371 ops/s
# Warmup Iteration   4: 31571717.854 ops/s
# Warmup Iteration   5: 37379207.856 ops/s
# Warmup Iteration   6: 37297946.082 ops/s
# Warmup Iteration   7: 37211311.238 ops/s
# Warmup Iteration   8: 37324375.125 ops/s
# Warmup Iteration   9: 37337022.692 ops/s
# Warmup Iteration  10: 37414549.457 ops/s
# Warmup Iteration  11: 37398450.643 ops/s
# Warmup Iteration  12: 37285472.104 ops/s
# Warmup Iteration  13: 37433270.316 ops/s
# Warmup Iteration  14: 37433603.833 ops/s
# Warmup Iteration  15: 37364553.698 ops/s
# Warmup Iteration  16: 37434634.916 ops/s
# Warmup Iteration  17: 37320793.683 ops/s
# Warmup Iteration  18: 37184405.095 ops/s
# Warmup Iteration  19: 37299861.280 ops/s
# Warmup Iteration  20: 37354806.814 ops/s
# Warmup Iteration  21: 37366215.071 ops/s
# Warmup Iteration  22: 37435774.178 ops/s
# Warmup Iteration  23: 37397971.727 ops/s
# Warmup Iteration  24: 37356053.643 ops/s
# Warmup Iteration  25: 37262914.106 ops/s
# Warmup Iteration  26: 37264039.841 ops/s
# Warmup Iteration  27: 37315701.114 ops/s
# Warmup Iteration  28: 37301986.681 ops/s
# Warmup Iteration  29: 37213671.888 ops/s
# Warmup Iteration  30: 37447748.427 ops/s
Iteration   1: 37248275.577 ops/s
Iteration   2: 37379498.351 ops/s
Iteration   3: 37451304.313 ops/s
Iteration   4: 37117434.699 ops/s
Iteration   5: 37407688.684 ops/s
Iteration   6: 37475332.516 ops/s
Iteration   7: 35700997.140 ops/s
Iteration   8: 32198971.749 ops/s
Iteration   9: 37050433.845 ops/s
Iteration  10: 37415937.221 ops/s
Iteration  11: 37342196.833 ops/s
Iteration  12: 37418357.051 ops/s
Iteration  13: 37393277.722 ops/s
Iteration  14: 37403247.103 ops/s
Iteration  15: 37418368.440 ops/s
Iteration  16: 37377902.936 ops/s
Iteration  17: 37436643.079 ops/s
Iteration  18: 37478844.168 ops/s
Iteration  19: 37109254.628 ops/s
Iteration  20: 37340378.254 ops/s
Iteration  21: 37421349.154 ops/s
Iteration  22: 37358815.482 ops/s
Iteration  23: 37507276.835 ops/s
Iteration  24: 37476800.079 ops/s
Iteration  25: 37449794.364 ops/s
Iteration  26: 37401589.599 ops/s
Iteration  27: 37343824.756 ops/s
Iteration  28: 37457251.504 ops/s
Iteration  29: 37344788.744 ops/s
Iteration  30: 37406903.454 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min":
  37144424.609 ±(99.9%) 660508.640 ops/s [Average]
  (min, avg, max) = (32198971.749, 37144424.609, 37507276.835), stdev = 988618.313
  CI (99.9%): [36483915.969, 37804933.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_min  thrpt   30  37144424.609 ± 660508.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2267544.835 ops/s
# Warmup Iteration   2: 3485353.491 ops/s
# Warmup Iteration   3: 4421228.962 ops/s
# Warmup Iteration   4: 4402605.873 ops/s
# Warmup Iteration   5: 4421714.693 ops/s
# Warmup Iteration   6: 4436850.500 ops/s
# Warmup Iteration   7: 3474391.712 ops/s
# Warmup Iteration   8: 4421436.814 ops/s
# Warmup Iteration   9: 4417421.947 ops/s
# Warmup Iteration  10: 4428103.529 ops/s
# Warmup Iteration  11: 4434033.293 ops/s
# Warmup Iteration  12: 4435562.012 ops/s
# Warmup Iteration  13: 4414424.398 ops/s
# Warmup Iteration  14: 4424273.520 ops/s
# Warmup Iteration  15: 4427681.490 ops/s
# Warmup Iteration  16: 4429785.572 ops/s
# Warmup Iteration  17: 4446313.978 ops/s
# Warmup Iteration  18: 4440750.916 ops/s
# Warmup Iteration  19: 4456300.106 ops/s
# Warmup Iteration  20: 4454721.513 ops/s
# Warmup Iteration  21: 4449757.362 ops/s
# Warmup Iteration  22: 4455921.159 ops/s
# Warmup Iteration  23: 4452658.629 ops/s
# Warmup Iteration  24: 4428418.639 ops/s
# Warmup Iteration  25: 4442905.651 ops/s
# Warmup Iteration  26: 4443583.468 ops/s
# Warmup Iteration  27: 4448025.655 ops/s
# Warmup Iteration  28: 4448053.580 ops/s
# Warmup Iteration  29: 4444402.478 ops/s
# Warmup Iteration  30: 4448652.813 ops/s
Iteration   1: 4430273.225 ops/s
Iteration   2: 4454545.206 ops/s
Iteration   3: 4433626.750 ops/s
Iteration   4: 4460445.537 ops/s
Iteration   5: 4445828.157 ops/s
Iteration   6: 4449301.392 ops/s
Iteration   7: 4449054.890 ops/s
Iteration   8: 4459935.029 ops/s
Iteration   9: 4453126.242 ops/s
Iteration  10: 4459095.379 ops/s
Iteration  11: 4451515.844 ops/s
Iteration  12: 4459742.860 ops/s
Iteration  13: 4437643.445 ops/s
Iteration  14: 4449865.797 ops/s
Iteration  15: 4434222.778 ops/s
Iteration  16: 4453370.946 ops/s
Iteration  17: 4417402.664 ops/s
Iteration  18: 4436029.796 ops/s
Iteration  19: 4454888.140 ops/s
Iteration  20: 4457492.041 ops/s
Iteration  21: 4440022.252 ops/s
Iteration  22: 4433388.179 ops/s
Iteration  23: 4456970.796 ops/s
Iteration  24: 4422996.327 ops/s
Iteration  25: 4463052.010 ops/s
Iteration  26: 4434210.306 ops/s
Iteration  27: 4438619.953 ops/s
Iteration  28: 4449814.642 ops/s
Iteration  29: 4464284.518 ops/s
Iteration  30: 4450366.049 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_minBy":
  4446704.372 ±(99.9%) 8253.687 ops/s [Average]
  (min, avg, max) = (4417402.664, 4446704.372, 4464284.518), stdev = 12353.732
  CI (99.9%): [4438450.684, 4454958.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_minBy  thrpt   30  4446704.372 ± 8253.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3825816.130 ops/s
# Warmup Iteration   2: 7054194.810 ops/s
# Warmup Iteration   3: 7911656.358 ops/s
# Warmup Iteration   4: 7988717.090 ops/s
# Warmup Iteration   5: 7779483.131 ops/s
# Warmup Iteration   6: 6801104.921 ops/s
# Warmup Iteration   7: 7979750.309 ops/s
# Warmup Iteration   8: 8010491.045 ops/s
# Warmup Iteration   9: 8008981.332 ops/s
# Warmup Iteration  10: 8006344.552 ops/s
# Warmup Iteration  11: 7987086.184 ops/s
# Warmup Iteration  12: 8003831.143 ops/s
# Warmup Iteration  13: 7988075.292 ops/s
# Warmup Iteration  14: 7996471.555 ops/s
# Warmup Iteration  15: 8006119.382 ops/s
# Warmup Iteration  16: 7936677.529 ops/s
# Warmup Iteration  17: 7995466.152 ops/s
# Warmup Iteration  18: 7985301.020 ops/s
# Warmup Iteration  19: 7988829.541 ops/s
# Warmup Iteration  20: 8004784.736 ops/s
# Warmup Iteration  21: 8013897.278 ops/s
# Warmup Iteration  22: 8002026.671 ops/s
# Warmup Iteration  23: 7931050.477 ops/s
# Warmup Iteration  24: 7980172.166 ops/s
# Warmup Iteration  25: 8015576.881 ops/s
# Warmup Iteration  26: 8000880.935 ops/s
# Warmup Iteration  27: 7979655.356 ops/s
# Warmup Iteration  28: 8016044.097 ops/s
# Warmup Iteration  29: 8003795.964 ops/s
# Warmup Iteration  30: 7996844.373 ops/s
Iteration   1: 8002215.567 ops/s
Iteration   2: 7968609.282 ops/s
Iteration   3: 8022245.225 ops/s
Iteration   4: 7984785.645 ops/s
Iteration   5: 7934946.979 ops/s
Iteration   6: 7867530.697 ops/s
Iteration   7: 7862147.172 ops/s
Iteration   8: 8025628.001 ops/s
Iteration   9: 8011619.385 ops/s
Iteration  10: 8006656.381 ops/s
Iteration  11: 7998033.227 ops/s
Iteration  12: 7978748.275 ops/s
Iteration  13: 7948861.291 ops/s
Iteration  14: 8007769.070 ops/s
Iteration  15: 8022951.791 ops/s
Iteration  16: 8012874.321 ops/s
Iteration  17: 7982207.505 ops/s
Iteration  18: 7917138.485 ops/s
Iteration  19: 7963022.104 ops/s
Iteration  20: 7984156.112 ops/s
Iteration  21: 8011239.890 ops/s
Iteration  22: 7981898.226 ops/s
Iteration  23: 8021683.670 ops/s
Iteration  24: 7989495.602 ops/s
Iteration  25: 7993122.668 ops/s
Iteration  26: 8011847.606 ops/s
Iteration  27: 7986220.459 ops/s
Iteration  28: 8025456.457 ops/s
Iteration  29: 8000194.658 ops/s
Iteration  30: 7988578.029 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws":
  7983729.459 ±(99.9%) 27799.905 ops/s [Average]
  (min, avg, max) = (7862147.172, 7983729.459, 8025628.001), stdev = 41609.592
  CI (99.9%): [7955929.554, 8011529.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  7983729.459 ± 27799.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3264993.916 ops/s
# Warmup Iteration   2: 6597022.877 ops/s
# Warmup Iteration   3: 8906935.784 ops/s
# Warmup Iteration   4: 8969459.789 ops/s
# Warmup Iteration   5: 8196096.456 ops/s
# Warmup Iteration   6: 8197815.131 ops/s
# Warmup Iteration   7: 9010051.231 ops/s
# Warmup Iteration   8: 9005272.736 ops/s
# Warmup Iteration   9: 8984992.902 ops/s
# Warmup Iteration  10: 8956620.212 ops/s
# Warmup Iteration  11: 8987662.179 ops/s
# Warmup Iteration  12: 8956914.560 ops/s
# Warmup Iteration  13: 8989780.296 ops/s
# Warmup Iteration  14: 8972294.900 ops/s
# Warmup Iteration  15: 8985225.623 ops/s
# Warmup Iteration  16: 8996869.010 ops/s
# Warmup Iteration  17: 8980770.739 ops/s
# Warmup Iteration  18: 8978947.315 ops/s
# Warmup Iteration  19: 8973772.491 ops/s
# Warmup Iteration  20: 9005883.721 ops/s
# Warmup Iteration  21: 8978753.432 ops/s
# Warmup Iteration  22: 8967689.524 ops/s
# Warmup Iteration  23: 8941294.396 ops/s
# Warmup Iteration  24: 8986535.624 ops/s
# Warmup Iteration  25: 8975768.633 ops/s
# Warmup Iteration  26: 8981913.941 ops/s
# Warmup Iteration  27: 8979500.410 ops/s
# Warmup Iteration  28: 8970231.464 ops/s
# Warmup Iteration  29: 8959828.141 ops/s
# Warmup Iteration  30: 8981640.334 ops/s
Iteration   1: 9037854.650 ops/s
Iteration   2: 8948756.444 ops/s
Iteration   3: 8992135.007 ops/s
Iteration   4: 8983316.560 ops/s
Iteration   5: 8994237.585 ops/s
Iteration   6: 8955102.374 ops/s
Iteration   7: 8931882.138 ops/s
Iteration   8: 8946871.512 ops/s
Iteration   9: 8961824.909 ops/s
Iteration  10: 9008315.779 ops/s
Iteration  11: 8976532.509 ops/s
Iteration  12: 8978846.552 ops/s
Iteration  13: 8972332.087 ops/s
Iteration  14: 8968534.038 ops/s
Iteration  15: 8976097.443 ops/s
Iteration  16: 8985703.564 ops/s
Iteration  17: 8940104.760 ops/s
Iteration  18: 9011112.887 ops/s
Iteration  19: 8977189.621 ops/s
Iteration  20: 8992490.921 ops/s
Iteration  21: 8988223.769 ops/s
Iteration  22: 8992604.374 ops/s
Iteration  23: 8966018.980 ops/s
Iteration  24: 8952757.143 ops/s
Iteration  25: 8983347.189 ops/s
Iteration  26: 8990272.930 ops/s
Iteration  27: 8997494.397 ops/s
Iteration  28: 8946156.947 ops/s
Iteration  29: 8975330.973 ops/s
Iteration  30: 8988177.988 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  8977320.868 ±(99.9%) 15410.955 ops/s [Average]
  (min, avg, max) = (8931882.138, 8977320.868, 9037854.650), stdev = 23066.394
  CI (99.9%): [8961909.913, 8992731.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  8977320.868 ± 15410.955  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18110464.912 ops/s
# Warmup Iteration   2: 39088718.247 ops/s
# Warmup Iteration   3: 38335095.912 ops/s
# Warmup Iteration   4: 32749146.988 ops/s
# Warmup Iteration   5: 38662187.437 ops/s
# Warmup Iteration   6: 38702522.874 ops/s
# Warmup Iteration   7: 38648395.909 ops/s
# Warmup Iteration   8: 38613943.420 ops/s
# Warmup Iteration   9: 38545486.085 ops/s
# Warmup Iteration  10: 38418146.557 ops/s
# Warmup Iteration  11: 38588170.983 ops/s
# Warmup Iteration  12: 38491462.717 ops/s
# Warmup Iteration  13: 38573466.715 ops/s
# Warmup Iteration  14: 38492116.374 ops/s
# Warmup Iteration  15: 38612716.954 ops/s
# Warmup Iteration  16: 38453252.874 ops/s
# Warmup Iteration  17: 38498306.271 ops/s
# Warmup Iteration  18: 38589703.753 ops/s
# Warmup Iteration  19: 38607505.066 ops/s
# Warmup Iteration  20: 38528732.784 ops/s
# Warmup Iteration  21: 38571950.578 ops/s
# Warmup Iteration  22: 38618553.335 ops/s
# Warmup Iteration  23: 38632283.780 ops/s
# Warmup Iteration  24: 38639078.701 ops/s
# Warmup Iteration  25: 38549869.214 ops/s
# Warmup Iteration  26: 38485983.555 ops/s
# Warmup Iteration  27: 38516840.642 ops/s
# Warmup Iteration  28: 38613176.529 ops/s
# Warmup Iteration  29: 38513554.587 ops/s
# Warmup Iteration  30: 38625214.295 ops/s
Iteration   1: 38594267.988 ops/s
Iteration   2: 38621305.063 ops/s
Iteration   3: 38699269.744 ops/s
Iteration   4: 38526928.411 ops/s
Iteration   5: 38651064.718 ops/s
Iteration   6: 38587829.739 ops/s
Iteration   7: 38412504.037 ops/s
Iteration   8: 38516399.263 ops/s
Iteration   9: 38522260.377 ops/s
Iteration  10: 38617966.150 ops/s
Iteration  11: 38647590.434 ops/s
Iteration  12: 38677725.098 ops/s
Iteration  13: 38646165.107 ops/s
Iteration  14: 38416559.648 ops/s
Iteration  15: 38527733.027 ops/s
Iteration  16: 38326873.401 ops/s
Iteration  17: 38615416.753 ops/s
Iteration  18: 38576988.378 ops/s
Iteration  19: 38675053.366 ops/s
Iteration  20: 38781852.797 ops/s
Iteration  21: 38640756.336 ops/s
Iteration  22: 38683644.064 ops/s
Iteration  23: 38657990.058 ops/s
Iteration  24: 38734139.865 ops/s
Iteration  25: 38688762.521 ops/s
Iteration  26: 38752389.141 ops/s
Iteration  27: 38600258.898 ops/s
Iteration  28: 38539997.269 ops/s
Iteration  29: 38714400.265 ops/s
Iteration  30: 38770797.444 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_min_without_comparator":
  38614162.979 ±(99.9%) 71408.508 ops/s [Average]
  (min, avg, max) = (38326873.401, 38614162.979, 38781852.797), stdev = 106880.901
  CI (99.9%): [38542754.471, 38685571.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  38614162.979 ± 71408.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6924590.729 ops/s
# Warmup Iteration   2: 14181128.135 ops/s
# Warmup Iteration   3: 14400696.980 ops/s
# Warmup Iteration   4: 13879031.528 ops/s
# Warmup Iteration   5: 12708670.438 ops/s
# Warmup Iteration   6: 14448443.366 ops/s
# Warmup Iteration   7: 14463103.880 ops/s
# Warmup Iteration   8: 14475897.684 ops/s
# Warmup Iteration   9: 14458651.393 ops/s
# Warmup Iteration  10: 14448255.501 ops/s
# Warmup Iteration  11: 14424113.193 ops/s
# Warmup Iteration  12: 14469509.162 ops/s
# Warmup Iteration  13: 14382313.727 ops/s
# Warmup Iteration  14: 14419945.999 ops/s
# Warmup Iteration  15: 14436159.355 ops/s
# Warmup Iteration  16: 14452700.491 ops/s
# Warmup Iteration  17: 14481629.208 ops/s
# Warmup Iteration  18: 14420998.013 ops/s
# Warmup Iteration  19: 14414496.537 ops/s
# Warmup Iteration  20: 14436880.267 ops/s
# Warmup Iteration  21: 14426195.976 ops/s
# Warmup Iteration  22: 14391739.036 ops/s
# Warmup Iteration  23: 14463136.722 ops/s
# Warmup Iteration  24: 14396363.169 ops/s
# Warmup Iteration  25: 14410996.222 ops/s
# Warmup Iteration  26: 14440229.106 ops/s
# Warmup Iteration  27: 14432704.237 ops/s
# Warmup Iteration  28: 14429834.960 ops/s
# Warmup Iteration  29: 14430320.242 ops/s
# Warmup Iteration  30: 14479599.443 ops/s
Iteration   1: 14446182.269 ops/s
Iteration   2: 14461595.284 ops/s
Iteration   3: 14452522.505 ops/s
Iteration   4: 14335773.526 ops/s
Iteration   5: 14450165.303 ops/s
Iteration   6: 14437712.788 ops/s
Iteration   7: 13193728.403 ops/s
Iteration   8: 14434823.247 ops/s
Iteration   9: 14464027.552 ops/s
Iteration  10: 14403593.120 ops/s
Iteration  11: 14451605.585 ops/s
Iteration  12: 14432352.652 ops/s
Iteration  13: 14406236.594 ops/s
Iteration  14: 14454797.362 ops/s
Iteration  15: 14450657.924 ops/s
Iteration  16: 14456081.203 ops/s
Iteration  17: 14405907.637 ops/s
Iteration  18: 14432210.351 ops/s
Iteration  19: 14417908.618 ops/s
Iteration  20: 14476448.191 ops/s
Iteration  21: 14432884.705 ops/s
Iteration  22: 14422756.477 ops/s
Iteration  23: 14468537.004 ops/s
Iteration  24: 14452294.555 ops/s
Iteration  25: 14363591.277 ops/s
Iteration  26: 14349604.831 ops/s
Iteration  27: 14373241.412 ops/s
Iteration  28: 14458007.611 ops/s
Iteration  29: 14405705.197 ops/s
Iteration  30: 14422916.750 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfy":
  14387128.998 ±(99.9%) 152425.454 ops/s [Average]
  (min, avg, max) = (13193728.403, 14387128.998, 14476448.191), stdev = 228143.261
  CI (99.9%): [14234703.544, 14539554.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  14387128.998 ± 152425.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10642067.972 ops/s
# Warmup Iteration   2: 22609565.890 ops/s
# Warmup Iteration   3: 22648026.487 ops/s
# Warmup Iteration   4: 19157947.475 ops/s
# Warmup Iteration   5: 22693031.641 ops/s
# Warmup Iteration   6: 22668429.098 ops/s
# Warmup Iteration   7: 22672344.203 ops/s
# Warmup Iteration   8: 22767620.205 ops/s
# Warmup Iteration   9: 22772170.208 ops/s
# Warmup Iteration  10: 22625645.638 ops/s
# Warmup Iteration  11: 22762575.378 ops/s
# Warmup Iteration  12: 22766030.630 ops/s
# Warmup Iteration  13: 22652536.401 ops/s
# Warmup Iteration  14: 22732447.690 ops/s
# Warmup Iteration  15: 22702356.496 ops/s
# Warmup Iteration  16: 22630486.220 ops/s
# Warmup Iteration  17: 22744619.936 ops/s
# Warmup Iteration  18: 22738605.562 ops/s
# Warmup Iteration  19: 22727677.079 ops/s
# Warmup Iteration  20: 22745124.079 ops/s
# Warmup Iteration  21: 22778501.814 ops/s
# Warmup Iteration  22: 22721993.907 ops/s
# Warmup Iteration  23: 22701949.477 ops/s
# Warmup Iteration  24: 22765207.955 ops/s
# Warmup Iteration  25: 22704503.685 ops/s
# Warmup Iteration  26: 22746713.869 ops/s
# Warmup Iteration  27: 22760137.915 ops/s
# Warmup Iteration  28: 22749243.950 ops/s
# Warmup Iteration  29: 22775459.220 ops/s
# Warmup Iteration  30: 22738527.625 ops/s
Iteration   1: 22752547.702 ops/s
Iteration   2: 22706831.574 ops/s
Iteration   3: 22727667.538 ops/s
Iteration   4: 22753263.931 ops/s
Iteration   5: 22727124.954 ops/s
Iteration   6: 22729454.312 ops/s
Iteration   7: 22721786.741 ops/s
Iteration   8: 22744549.810 ops/s
Iteration   9: 22738765.009 ops/s
Iteration  10: 22773988.743 ops/s
Iteration  11: 22807868.777 ops/s
Iteration  12: 22420126.855 ops/s
Iteration  13: 22751692.756 ops/s
Iteration  14: 22727651.296 ops/s
Iteration  15: 22736166.097 ops/s
Iteration  16: 22702030.312 ops/s
Iteration  17: 22737155.324 ops/s
Iteration  18: 22662871.935 ops/s
Iteration  19: 22751243.625 ops/s
Iteration  20: 22702616.319 ops/s
Iteration  21: 22689099.958 ops/s
Iteration  22: 22735198.604 ops/s
Iteration  23: 22609874.729 ops/s
Iteration  24: 22781119.123 ops/s
Iteration  25: 22806906.865 ops/s
Iteration  26: 22782478.983 ops/s
Iteration  27: 22783525.637 ops/s
Iteration  28: 22756943.611 ops/s
Iteration  29: 22657845.927 ops/s
Iteration  30: 22665382.231 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfyWith":
  22721459.309 ±(99.9%) 48246.524 ops/s [Average]
  (min, avg, max) = (22420126.855, 22721459.309, 22807868.777), stdev = 72213.131
  CI (99.9%): [22673212.786, 22769705.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  22721459.309 ± 48246.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9637.290 ops/s
# Warmup Iteration   2: 9472.619 ops/s
# Warmup Iteration   3: 9760.348 ops/s
# Warmup Iteration   4: 9683.850 ops/s
# Warmup Iteration   5: 9701.125 ops/s
# Warmup Iteration   6: 10424.736 ops/s
# Warmup Iteration   7: 12752.965 ops/s
# Warmup Iteration   8: 12601.357 ops/s
# Warmup Iteration   9: 12338.892 ops/s
# Warmup Iteration  10: 12645.748 ops/s
# Warmup Iteration  11: 12641.530 ops/s
# Warmup Iteration  12: 13023.646 ops/s
# Warmup Iteration  13: 12563.484 ops/s
# Warmup Iteration  14: 12708.966 ops/s
# Warmup Iteration  15: 12816.623 ops/s
# Warmup Iteration  16: 12616.988 ops/s
# Warmup Iteration  17: 12797.229 ops/s
# Warmup Iteration  18: 12770.776 ops/s
# Warmup Iteration  19: 12429.647 ops/s
# Warmup Iteration  20: 12611.459 ops/s
# Warmup Iteration  21: 12290.900 ops/s
# Warmup Iteration  22: 12475.782 ops/s
# Warmup Iteration  23: 12539.867 ops/s
# Warmup Iteration  24: 12546.520 ops/s
# Warmup Iteration  25: 12888.645 ops/s
# Warmup Iteration  26: 13093.484 ops/s
# Warmup Iteration  27: 12954.283 ops/s
# Warmup Iteration  28: 12915.767 ops/s
# Warmup Iteration  29: 12928.842 ops/s
# Warmup Iteration  30: 12488.189 ops/s
Iteration   1: 12738.834 ops/s
Iteration   2: 12513.772 ops/s
Iteration   3: 12528.561 ops/s
Iteration   4: 12584.283 ops/s
Iteration   5: 12529.073 ops/s
Iteration   6: 10841.115 ops/s
Iteration   7: 9390.844 ops/s
Iteration   8: 9663.798 ops/s
Iteration   9: 9673.849 ops/s
Iteration  10: 11841.709 ops/s
Iteration  11: 13096.225 ops/s
Iteration  12: 12859.363 ops/s
Iteration  13: 12913.939 ops/s
Iteration  14: 13094.294 ops/s
Iteration  15: 13594.315 ops/s
Iteration  16: 12926.520 ops/s
Iteration  17: 13197.787 ops/s
Iteration  18: 13356.389 ops/s
Iteration  19: 12911.183 ops/s
Iteration  20: 12982.025 ops/s
Iteration  21: 12374.944 ops/s
Iteration  22: 12569.904 ops/s
Iteration  23: 12737.886 ops/s
Iteration  24: 13085.049 ops/s
Iteration  25: 12961.161 ops/s
Iteration  26: 13064.410 ops/s
Iteration  27: 12995.182 ops/s
Iteration  28: 13125.205 ops/s
Iteration  29: 12978.122 ops/s
Iteration  30: 12865.119 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_parallelStream":
  12466.495 ±(99.9%) 732.664 ops/s [Average]
  (min, avg, max) = (9390.844, 12466.495, 13594.315), stdev = 1096.618
  CI (99.9%): [11733.831, 13199.160] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt      Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  12466.495 ± 732.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1613864.189 ops/s
# Warmup Iteration   2: 2828604.128 ops/s
# Warmup Iteration   3: 3136345.682 ops/s
# Warmup Iteration   4: 3153097.068 ops/s
# Warmup Iteration   5: 3161463.573 ops/s
# Warmup Iteration   6: 2659415.096 ops/s
# Warmup Iteration   7: 3164618.588 ops/s
# Warmup Iteration   8: 3163453.389 ops/s
# Warmup Iteration   9: 3165171.574 ops/s
# Warmup Iteration  10: 3175453.901 ops/s
# Warmup Iteration  11: 3165010.441 ops/s
# Warmup Iteration  12: 3164713.924 ops/s
# Warmup Iteration  13: 3145677.027 ops/s
# Warmup Iteration  14: 3150355.694 ops/s
# Warmup Iteration  15: 3165949.374 ops/s
# Warmup Iteration  16: 3167904.424 ops/s
# Warmup Iteration  17: 3161937.605 ops/s
# Warmup Iteration  18: 3164416.309 ops/s
# Warmup Iteration  19: 3163383.374 ops/s
# Warmup Iteration  20: 3164701.835 ops/s
# Warmup Iteration  21: 3170722.602 ops/s
# Warmup Iteration  22: 3157891.398 ops/s
# Warmup Iteration  23: 3164618.905 ops/s
# Warmup Iteration  24: 3166060.616 ops/s
# Warmup Iteration  25: 3162813.362 ops/s
# Warmup Iteration  26: 3150248.581 ops/s
# Warmup Iteration  27: 3148592.593 ops/s
# Warmup Iteration  28: 3163267.142 ops/s
# Warmup Iteration  29: 3164315.510 ops/s
# Warmup Iteration  30: 3147251.113 ops/s
Iteration   1: 3171298.412 ops/s
Iteration   2: 3156941.870 ops/s
Iteration   3: 3156822.115 ops/s
Iteration   4: 3149542.274 ops/s
Iteration   5: 3167932.291 ops/s
Iteration   6: 3171098.932 ops/s
Iteration   7: 3156687.004 ops/s
Iteration   8: 3167454.313 ops/s
Iteration   9: 3171599.569 ops/s
Iteration  10: 3164512.059 ops/s
Iteration  11: 3159899.394 ops/s
Iteration  12: 3143256.769 ops/s
Iteration  13: 3174029.967 ops/s
Iteration  14: 3168041.503 ops/s
Iteration  15: 3142659.849 ops/s
Iteration  16: 3156178.814 ops/s
Iteration  17: 3141052.578 ops/s
Iteration  18: 3165366.934 ops/s
Iteration  19: 3157897.799 ops/s
Iteration  20: 3153996.415 ops/s
Iteration  21: 3154547.521 ops/s
Iteration  22: 3162169.571 ops/s
Iteration  23: 3153471.842 ops/s
Iteration  24: 3138401.407 ops/s
Iteration  25: 3161899.353 ops/s
Iteration  26: 3164980.124 ops/s
Iteration  27: 3158908.908 ops/s
Iteration  28: 3157227.401 ops/s
Iteration  29: 3156682.595 ops/s
Iteration  30: 3154129.684 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partition":
  3158622.909 ±(99.9%) 6226.611 ops/s [Average]
  (min, avg, max) = (3138401.407, 3158622.909, 3174029.967), stdev = 9319.700
  CI (99.9%): [3152396.297, 3164849.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_partition  thrpt   30  3158622.909 ± 6226.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1736748.474 ops/s
# Warmup Iteration   2: 3473330.659 ops/s
# Warmup Iteration   3: 3691301.487 ops/s
# Warmup Iteration   4: 3717479.204 ops/s
# Warmup Iteration   5: 3090413.006 ops/s
# Warmup Iteration   6: 3684456.550 ops/s
# Warmup Iteration   7: 3701177.898 ops/s
# Warmup Iteration   8: 3705357.377 ops/s
# Warmup Iteration   9: 3688927.049 ops/s
# Warmup Iteration  10: 3687980.398 ops/s
# Warmup Iteration  11: 3697523.227 ops/s
# Warmup Iteration  12: 3707743.129 ops/s
# Warmup Iteration  13: 3560409.035 ops/s
# Warmup Iteration  14: 3608335.252 ops/s
# Warmup Iteration  15: 3688284.590 ops/s
# Warmup Iteration  16: 3706482.708 ops/s
# Warmup Iteration  17: 3700481.622 ops/s
# Warmup Iteration  18: 3702848.550 ops/s
# Warmup Iteration  19: 3708358.226 ops/s
# Warmup Iteration  20: 3699954.676 ops/s
# Warmup Iteration  21: 3711695.266 ops/s
# Warmup Iteration  22: 3701480.362 ops/s
# Warmup Iteration  23: 3689848.490 ops/s
# Warmup Iteration  24: 3699018.777 ops/s
# Warmup Iteration  25: 3676336.191 ops/s
# Warmup Iteration  26: 3678805.002 ops/s
# Warmup Iteration  27: 3699748.622 ops/s
# Warmup Iteration  28: 3694889.268 ops/s
# Warmup Iteration  29: 3704210.818 ops/s
# Warmup Iteration  30: 3673920.716 ops/s
Iteration   1: 3678341.459 ops/s
Iteration   2: 3663918.926 ops/s
Iteration   3: 3686126.559 ops/s
Iteration   4: 3688535.814 ops/s
Iteration   5: 3716832.644 ops/s
Iteration   6: 3712434.383 ops/s
Iteration   7: 3705598.583 ops/s
Iteration   8: 3714832.636 ops/s
Iteration   9: 3708086.413 ops/s
Iteration  10: 3705353.230 ops/s
Iteration  11: 3718508.011 ops/s
Iteration  12: 3703946.486 ops/s
Iteration  13: 3701804.323 ops/s
Iteration  14: 3707827.659 ops/s
Iteration  15: 3710196.428 ops/s
Iteration  16: 3708125.079 ops/s
Iteration  17: 3694291.544 ops/s
Iteration  18: 3669180.190 ops/s
Iteration  19: 3708585.978 ops/s
Iteration  20: 3702810.376 ops/s
Iteration  21: 3704924.738 ops/s
Iteration  22: 3685244.786 ops/s
Iteration  23: 3702572.682 ops/s
Iteration  24: 3694713.758 ops/s
Iteration  25: 3710120.196 ops/s
Iteration  26: 3699063.120 ops/s
Iteration  27: 3702549.583 ops/s
Iteration  28: 3709243.357 ops/s
Iteration  29: 3686662.026 ops/s
Iteration  30: 3674390.305 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWhile":
  3699160.709 ±(99.9%) 9464.233 ops/s [Average]
  (min, avg, max) = (3663918.926, 3699160.709, 3718508.011), stdev = 14165.619
  CI (99.9%): [3689696.476, 3708624.942] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  3699160.709 ± 9464.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 792390.376 ops/s
# Warmup Iteration   2: 1172110.895 ops/s
# Warmup Iteration   3: 1396413.436 ops/s
# Warmup Iteration   4: 1374039.314 ops/s
# Warmup Iteration   5: 1389160.532 ops/s
# Warmup Iteration   6: 1398097.229 ops/s
# Warmup Iteration   7: 1168677.602 ops/s
# Warmup Iteration   8: 1401390.805 ops/s
# Warmup Iteration   9: 1397321.689 ops/s
# Warmup Iteration  10: 1395524.083 ops/s
# Warmup Iteration  11: 1394567.690 ops/s
# Warmup Iteration  12: 1397804.434 ops/s
# Warmup Iteration  13: 1394784.252 ops/s
# Warmup Iteration  14: 1396470.101 ops/s
# Warmup Iteration  15: 1387372.109 ops/s
# Warmup Iteration  16: 1380657.061 ops/s
# Warmup Iteration  17: 1396324.305 ops/s
# Warmup Iteration  18: 1402273.363 ops/s
# Warmup Iteration  19: 1400197.334 ops/s
# Warmup Iteration  20: 1399686.430 ops/s
# Warmup Iteration  21: 1400505.199 ops/s
# Warmup Iteration  22: 1394528.523 ops/s
# Warmup Iteration  23: 1387953.052 ops/s
# Warmup Iteration  24: 1396838.339 ops/s
# Warmup Iteration  25: 1394901.833 ops/s
# Warmup Iteration  26: 1397673.689 ops/s
# Warmup Iteration  27: 1391869.881 ops/s
# Warmup Iteration  28: 1392660.368 ops/s
# Warmup Iteration  29: 1399891.650 ops/s
# Warmup Iteration  30: 1399270.122 ops/s
Iteration   1: 1399468.250 ops/s
Iteration   2: 1396283.674 ops/s
Iteration   3: 1396974.178 ops/s
Iteration   4: 1398258.585 ops/s
Iteration   5: 1398438.963 ops/s
Iteration   6: 1395889.957 ops/s
Iteration   7: 1400797.427 ops/s
Iteration   8: 1399383.880 ops/s
Iteration   9: 1399370.590 ops/s
Iteration  10: 1393222.266 ops/s
Iteration  11: 1403269.025 ops/s
Iteration  12: 1385041.964 ops/s
Iteration  13: 1389637.875 ops/s
Iteration  14: 1400702.609 ops/s
Iteration  15: 1403322.025 ops/s
Iteration  16: 1389900.956 ops/s
Iteration  17: 1390046.030 ops/s
Iteration  18: 1387660.042 ops/s
Iteration  19: 1385528.934 ops/s
Iteration  20: 1400143.394 ops/s
Iteration  21: 1400790.594 ops/s
Iteration  22: 1396916.638 ops/s
Iteration  23: 1398214.706 ops/s
Iteration  24: 1393515.079 ops/s
Iteration  25: 1399473.540 ops/s
Iteration  26: 1397560.897 ops/s
Iteration  27: 1396920.905 ops/s
Iteration  28: 1397810.846 ops/s
Iteration  29: 1404870.792 ops/s
Iteration  30: 1385656.676 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_partitionWith":
  1396169.043 ±(99.9%) 3668.047 ops/s [Average]
  (min, avg, max) = (1385041.964, 1396169.043, 1404870.792), stdev = 5490.161
  CI (99.9%): [1392500.996, 1399837.090] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  1396169.043 ± 3668.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2789944.691 ops/s
# Warmup Iteration   2: 5987980.674 ops/s
# Warmup Iteration   3: 6256887.240 ops/s
# Warmup Iteration   4: 6274697.729 ops/s
# Warmup Iteration   5: 5285512.401 ops/s
# Warmup Iteration   6: 6286357.822 ops/s
# Warmup Iteration   7: 6273377.330 ops/s
# Warmup Iteration   8: 6301508.043 ops/s
# Warmup Iteration   9: 6270492.010 ops/s
# Warmup Iteration  10: 6283134.869 ops/s
# Warmup Iteration  11: 6298288.613 ops/s
# Warmup Iteration  12: 6298938.872 ops/s
# Warmup Iteration  13: 6282813.113 ops/s
# Warmup Iteration  14: 6301361.688 ops/s
# Warmup Iteration  15: 6288330.716 ops/s
# Warmup Iteration  16: 6305940.240 ops/s
# Warmup Iteration  17: 6301516.408 ops/s
# Warmup Iteration  18: 6286708.324 ops/s
# Warmup Iteration  19: 6305828.289 ops/s
# Warmup Iteration  20: 6271290.929 ops/s
# Warmup Iteration  21: 6291229.584 ops/s
# Warmup Iteration  22: 6297414.592 ops/s
# Warmup Iteration  23: 6287933.499 ops/s
# Warmup Iteration  24: 6294350.501 ops/s
# Warmup Iteration  25: 6289417.556 ops/s
# Warmup Iteration  26: 6297602.631 ops/s
# Warmup Iteration  27: 6301101.391 ops/s
# Warmup Iteration  28: 6302991.934 ops/s
# Warmup Iteration  29: 6299144.933 ops/s
# Warmup Iteration  30: 6313364.041 ops/s
Iteration   1: 6267132.042 ops/s
Iteration   2: 6303634.690 ops/s
Iteration   3: 6307381.680 ops/s
Iteration   4: 6287978.983 ops/s
Iteration   5: 6294750.923 ops/s
Iteration   6: 6289317.601 ops/s
Iteration   7: 6246303.395 ops/s
Iteration   8: 6305113.332 ops/s
Iteration   9: 6283476.859 ops/s
Iteration  10: 6293681.013 ops/s
Iteration  11: 6286639.735 ops/s
Iteration  12: 6299140.412 ops/s
Iteration  13: 6287028.499 ops/s
Iteration  14: 6318137.648 ops/s
Iteration  15: 6302965.592 ops/s
Iteration  16: 6302409.727 ops/s
Iteration  17: 6276013.708 ops/s
Iteration  18: 6295313.784 ops/s
Iteration  19: 6298978.844 ops/s
Iteration  20: 6267339.823 ops/s
Iteration  21: 6284328.938 ops/s
Iteration  22: 6313508.413 ops/s
Iteration  23: 6302960.527 ops/s
Iteration  24: 6300956.077 ops/s
Iteration  25: 6234348.868 ops/s
Iteration  26: 6224728.736 ops/s
Iteration  27: 6234772.182 ops/s
Iteration  28: 6226443.032 ops/s
Iteration  29: 6257228.344 ops/s
Iteration  30: 6219600.685 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject":
  6280387.136 ±(99.9%) 19158.009 ops/s [Average]
  (min, avg, max) = (6219600.685, 6280387.136, 6318137.648), stdev = 28674.808
  CI (99.9%): [6261229.128, 6299545.145] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_reject  thrpt   30  6280387.136 ± 19158.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1678081.428 ops/s
# Warmup Iteration   2: 3489380.842 ops/s
# Warmup Iteration   3: 3649258.320 ops/s
# Warmup Iteration   4: 3656645.944 ops/s
# Warmup Iteration   5: 3088493.499 ops/s
# Warmup Iteration   6: 3679216.137 ops/s
# Warmup Iteration   7: 3653986.227 ops/s
# Warmup Iteration   8: 3656177.329 ops/s
# Warmup Iteration   9: 3679501.712 ops/s
# Warmup Iteration  10: 3677971.894 ops/s
# Warmup Iteration  11: 3681605.044 ops/s
# Warmup Iteration  12: 3681772.767 ops/s
# Warmup Iteration  13: 3680024.570 ops/s
# Warmup Iteration  14: 3687830.344 ops/s
# Warmup Iteration  15: 3665941.734 ops/s
# Warmup Iteration  16: 3673954.220 ops/s
# Warmup Iteration  17: 3675497.063 ops/s
# Warmup Iteration  18: 3680620.908 ops/s
# Warmup Iteration  19: 3679626.734 ops/s
# Warmup Iteration  20: 3681653.184 ops/s
# Warmup Iteration  21: 3669354.565 ops/s
# Warmup Iteration  22: 3667276.009 ops/s
# Warmup Iteration  23: 3675813.683 ops/s
# Warmup Iteration  24: 3654416.961 ops/s
# Warmup Iteration  25: 3660006.673 ops/s
# Warmup Iteration  26: 3668052.755 ops/s
# Warmup Iteration  27: 3670799.572 ops/s
# Warmup Iteration  28: 3685724.064 ops/s
# Warmup Iteration  29: 3662409.889 ops/s
# Warmup Iteration  30: 3681662.981 ops/s
Iteration   1: 3423307.361 ops/s
Iteration   2: 3659779.379 ops/s
Iteration   3: 3680207.296 ops/s
Iteration   4: 3671883.331 ops/s
Iteration   5: 3668831.356 ops/s
Iteration   6: 3674120.101 ops/s
Iteration   7: 3670691.310 ops/s
Iteration   8: 3666814.935 ops/s
Iteration   9: 3688356.586 ops/s
Iteration  10: 3699693.472 ops/s
Iteration  11: 3688403.878 ops/s
Iteration  12: 3677210.553 ops/s
Iteration  13: 3676513.547 ops/s
Iteration  14: 3657542.481 ops/s
Iteration  15: 3691018.003 ops/s
Iteration  16: 3672787.017 ops/s
Iteration  17: 3695819.883 ops/s
Iteration  18: 3668740.400 ops/s
Iteration  19: 3675324.678 ops/s
Iteration  20: 3686847.076 ops/s
Iteration  21: 3702082.932 ops/s
Iteration  22: 3652538.304 ops/s
Iteration  23: 3666917.612 ops/s
Iteration  24: 3679537.563 ops/s
Iteration  25: 3682686.629 ops/s
Iteration  26: 3673712.480 ops/s
Iteration  27: 3666408.376 ops/s
Iteration  28: 3688529.358 ops/s
Iteration  29: 3683617.851 ops/s
Iteration  30: 3682001.912 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith":
  3669064.189 ±(99.9%) 32018.557 ops/s [Average]
  (min, avg, max) = (3423307.361, 3669064.189, 3702082.932), stdev = 47923.873
  CI (99.9%): [3637045.631, 3701082.746] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  3669064.189 ± 32018.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2596094.766 ops/s
# Warmup Iteration   2: 6592919.463 ops/s
# Warmup Iteration   3: 7106464.456 ops/s
# Warmup Iteration   4: 7141427.959 ops/s
# Warmup Iteration   5: 5939939.090 ops/s
# Warmup Iteration   6: 7128931.671 ops/s
# Warmup Iteration   7: 7112054.854 ops/s
# Warmup Iteration   8: 7150250.507 ops/s
# Warmup Iteration   9: 7142953.128 ops/s
# Warmup Iteration  10: 7123770.000 ops/s
# Warmup Iteration  11: 7114330.485 ops/s
# Warmup Iteration  12: 7128768.959 ops/s
# Warmup Iteration  13: 7114188.155 ops/s
# Warmup Iteration  14: 7138155.434 ops/s
# Warmup Iteration  15: 7127275.455 ops/s
# Warmup Iteration  16: 7134801.092 ops/s
# Warmup Iteration  17: 7116707.052 ops/s
# Warmup Iteration  18: 7127164.360 ops/s
# Warmup Iteration  19: 7113429.308 ops/s
# Warmup Iteration  20: 7135320.239 ops/s
# Warmup Iteration  21: 7164899.404 ops/s
# Warmup Iteration  22: 7146917.219 ops/s
# Warmup Iteration  23: 7123781.824 ops/s
# Warmup Iteration  24: 7143690.167 ops/s
# Warmup Iteration  25: 7128806.684 ops/s
# Warmup Iteration  26: 7086104.614 ops/s
# Warmup Iteration  27: 7149157.038 ops/s
# Warmup Iteration  28: 7139310.888 ops/s
# Warmup Iteration  29: 7122861.963 ops/s
# Warmup Iteration  30: 7141504.855 ops/s
Iteration   1: 7120522.721 ops/s
Iteration   2: 7076078.402 ops/s
Iteration   3: 7114665.771 ops/s
Iteration   4: 7096157.569 ops/s
Iteration   5: 7105304.750 ops/s
Iteration   6: 7122462.012 ops/s
Iteration   7: 7130699.992 ops/s
Iteration   8: 7124686.788 ops/s
Iteration   9: 7134008.121 ops/s
Iteration  10: 7092162.178 ops/s
Iteration  11: 7115092.295 ops/s
Iteration  12: 7114072.707 ops/s
Iteration  13: 7103354.990 ops/s
Iteration  14: 7136768.665 ops/s
Iteration  15: 7158223.863 ops/s
Iteration  16: 7130837.631 ops/s
Iteration  17: 7166711.312 ops/s
Iteration  18: 7155598.852 ops/s
Iteration  19: 7154510.330 ops/s
Iteration  20: 7164266.874 ops/s
Iteration  21: 7143201.222 ops/s
Iteration  22: 7141800.532 ops/s
Iteration  23: 7158870.201 ops/s
Iteration  24: 7164971.856 ops/s
Iteration  25: 7153140.846 ops/s
Iteration  26: 7154537.034 ops/s
Iteration  27: 7161619.221 ops/s
Iteration  28: 7142737.079 ops/s
Iteration  29: 7137806.655 ops/s
Iteration  30: 7138880.975 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndex":
  7133791.715 ±(99.9%) 16035.700 ops/s [Average]
  (min, avg, max) = (7076078.402, 7133791.715, 7166711.312), stdev = 24001.482
  CI (99.9%): [7117756.015, 7149827.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  7133791.715 ± 16035.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1899946.523 ops/s
# Warmup Iteration   2: 4436006.043 ops/s
# Warmup Iteration   3: 4597823.001 ops/s
# Warmup Iteration   4: 3918187.094 ops/s
# Warmup Iteration   5: 4520131.414 ops/s
# Warmup Iteration   6: 4612803.061 ops/s
# Warmup Iteration   7: 4595344.757 ops/s
# Warmup Iteration   8: 4601194.966 ops/s
# Warmup Iteration   9: 4617225.028 ops/s
# Warmup Iteration  10: 4595019.128 ops/s
# Warmup Iteration  11: 4621403.685 ops/s
# Warmup Iteration  12: 4626592.382 ops/s
# Warmup Iteration  13: 4617091.123 ops/s
# Warmup Iteration  14: 4588949.269 ops/s
# Warmup Iteration  15: 4622323.338 ops/s
# Warmup Iteration  16: 4622386.568 ops/s
# Warmup Iteration  17: 4612714.317 ops/s
# Warmup Iteration  18: 4604575.729 ops/s
# Warmup Iteration  19: 4611710.385 ops/s
# Warmup Iteration  20: 4622757.993 ops/s
# Warmup Iteration  21: 4617463.323 ops/s
# Warmup Iteration  22: 4620930.326 ops/s
# Warmup Iteration  23: 4626331.310 ops/s
# Warmup Iteration  24: 4614940.945 ops/s
# Warmup Iteration  25: 4621932.236 ops/s
# Warmup Iteration  26: 4618706.372 ops/s
# Warmup Iteration  27: 4617671.988 ops/s
# Warmup Iteration  28: 4617889.602 ops/s
# Warmup Iteration  29: 4625717.603 ops/s
# Warmup Iteration  30: 4627647.417 ops/s
Iteration   1: 4630228.176 ops/s
Iteration   2: 4621578.602 ops/s
Iteration   3: 4625900.142 ops/s
Iteration   4: 4627330.270 ops/s
Iteration   5: 4622322.446 ops/s
Iteration   6: 4627440.892 ops/s
Iteration   7: 4629250.740 ops/s
Iteration   8: 4629753.590 ops/s
Iteration   9: 4625814.069 ops/s
Iteration  10: 4625210.501 ops/s
Iteration  11: 4625282.554 ops/s
Iteration  12: 4632992.095 ops/s
Iteration  13: 4614282.493 ops/s
Iteration  14: 4626890.048 ops/s
Iteration  15: 4608194.724 ops/s
Iteration  16: 4576902.929 ops/s
Iteration  17: 4642019.055 ops/s
Iteration  18: 4570029.848 ops/s
Iteration  19: 4625620.527 ops/s
Iteration  20: 4616051.460 ops/s
Iteration  21: 4601043.027 ops/s
Iteration  22: 4593635.443 ops/s
Iteration  23: 4624701.369 ops/s
Iteration  24: 4604816.406 ops/s
Iteration  25: 4619974.372 ops/s
Iteration  26: 4604541.242 ops/s
Iteration  27: 4611704.725 ops/s
Iteration  28: 4608279.805 ops/s
Iteration  29: 4637507.479 ops/s
Iteration  30: 4626920.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  4617873.976 ±(99.9%) 10937.301 ops/s [Average]
  (min, avg, max) = (4570029.848, 4617873.976, 4642019.055), stdev = 16370.439
  CI (99.9%): [4606936.675, 4628811.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  4617873.976 ± 10937.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1207154.618 ops/s
# Warmup Iteration   2: 1785850.886 ops/s
# Warmup Iteration   3: 2071034.894 ops/s
# Warmup Iteration   4: 2100023.739 ops/s
# Warmup Iteration   5: 2111938.658 ops/s
# Warmup Iteration   6: 2106996.677 ops/s
# Warmup Iteration   7: 1768229.476 ops/s
# Warmup Iteration   8: 2112265.709 ops/s
# Warmup Iteration   9: 2111086.480 ops/s
# Warmup Iteration  10: 2114092.121 ops/s
# Warmup Iteration  11: 2112385.330 ops/s
# Warmup Iteration  12: 2105754.321 ops/s
# Warmup Iteration  13: 2114318.823 ops/s
# Warmup Iteration  14: 2110180.299 ops/s
# Warmup Iteration  15: 2112739.753 ops/s
# Warmup Iteration  16: 2110029.691 ops/s
# Warmup Iteration  17: 2112808.994 ops/s
# Warmup Iteration  18: 2108686.178 ops/s
# Warmup Iteration  19: 2115205.642 ops/s
# Warmup Iteration  20: 2102458.275 ops/s
# Warmup Iteration  21: 2113347.233 ops/s
# Warmup Iteration  22: 2112768.129 ops/s
# Warmup Iteration  23: 2112320.196 ops/s
# Warmup Iteration  24: 2111192.897 ops/s
# Warmup Iteration  25: 2109903.858 ops/s
# Warmup Iteration  26: 2096593.507 ops/s
# Warmup Iteration  27: 2112843.638 ops/s
# Warmup Iteration  28: 2104636.471 ops/s
# Warmup Iteration  29: 2099242.428 ops/s
# Warmup Iteration  30: 2090943.135 ops/s
Iteration   1: 2109277.712 ops/s
Iteration   2: 2108038.860 ops/s
Iteration   3: 2110692.505 ops/s
Iteration   4: 2104498.715 ops/s
Iteration   5: 2083389.103 ops/s
Iteration   6: 2088886.536 ops/s
Iteration   7: 2085171.768 ops/s
Iteration   8: 2114923.930 ops/s
Iteration   9: 2103870.676 ops/s
Iteration  10: 2095832.178 ops/s
Iteration  11: 2102784.384 ops/s
Iteration  12: 2099337.613 ops/s
Iteration  13: 2098258.963 ops/s
Iteration  14: 2112621.770 ops/s
Iteration  15: 2105407.101 ops/s
Iteration  16: 2115171.252 ops/s
Iteration  17: 2116591.505 ops/s
Iteration  18: 2110709.062 ops/s
Iteration  19: 2112619.080 ops/s
Iteration  20: 2113210.197 ops/s
Iteration  21: 2115593.006 ops/s
Iteration  22: 2100944.855 ops/s
Iteration  23: 2113894.139 ops/s
Iteration  24: 2105378.743 ops/s
Iteration  25: 2110730.106 ops/s
Iteration  26: 2105028.952 ops/s
Iteration  27: 2117282.857 ops/s
Iteration  28: 2115686.405 ops/s
Iteration  29: 2112093.069 ops/s
Iteration  30: 2107444.119 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith_target":
  2106512.305 ±(99.9%) 6070.150 ops/s [Average]
  (min, avg, max) = (2083389.103, 2106512.305, 2117282.857), stdev = 9085.516
  CI (99.9%): [2100442.155, 2112582.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  2106512.305 ± 6070.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4076176.230 ops/s
# Warmup Iteration   2: 9328916.143 ops/s
# Warmup Iteration   3: 9531795.710 ops/s
# Warmup Iteration   4: 8007307.251 ops/s
# Warmup Iteration   5: 9567300.707 ops/s
# Warmup Iteration   6: 9572732.137 ops/s
# Warmup Iteration   7: 9582292.696 ops/s
# Warmup Iteration   8: 9537504.645 ops/s
# Warmup Iteration   9: 9545884.973 ops/s
# Warmup Iteration  10: 9558671.998 ops/s
# Warmup Iteration  11: 9563177.983 ops/s
# Warmup Iteration  12: 9570061.462 ops/s
# Warmup Iteration  13: 9565431.684 ops/s
# Warmup Iteration  14: 9559209.247 ops/s
# Warmup Iteration  15: 9581616.296 ops/s
# Warmup Iteration  16: 9565772.301 ops/s
# Warmup Iteration  17: 9580719.622 ops/s
# Warmup Iteration  18: 9574467.761 ops/s
# Warmup Iteration  19: 9545812.301 ops/s
# Warmup Iteration  20: 9570771.316 ops/s
# Warmup Iteration  21: 9540079.355 ops/s
# Warmup Iteration  22: 9543447.525 ops/s
# Warmup Iteration  23: 9551009.212 ops/s
# Warmup Iteration  24: 9537502.795 ops/s
# Warmup Iteration  25: 9587767.315 ops/s
# Warmup Iteration  26: 9565273.908 ops/s
# Warmup Iteration  27: 9582075.036 ops/s
# Warmup Iteration  28: 9563657.190 ops/s
# Warmup Iteration  29: 9533198.171 ops/s
# Warmup Iteration  30: 9579632.589 ops/s
Iteration   1: 9585502.597 ops/s
Iteration   2: 9562122.396 ops/s
Iteration   3: 9571771.096 ops/s
Iteration   4: 9566192.543 ops/s
Iteration   5: 9573062.530 ops/s
Iteration   6: 9588197.357 ops/s
Iteration   7: 9588562.968 ops/s
Iteration   8: 9576231.429 ops/s
Iteration   9: 9574203.425 ops/s
Iteration  10: 9591257.546 ops/s
Iteration  11: 9556885.506 ops/s
Iteration  12: 9574571.784 ops/s
Iteration  13: 9585909.403 ops/s
Iteration  14: 9588353.146 ops/s
Iteration  15: 9572831.903 ops/s
Iteration  16: 9577166.495 ops/s
Iteration  17: 9576014.658 ops/s
Iteration  18: 9585680.897 ops/s
Iteration  19: 9588039.284 ops/s
Iteration  20: 9573928.412 ops/s
Iteration  21: 9561546.114 ops/s
Iteration  22: 9565198.949 ops/s
Iteration  23: 9596121.764 ops/s
Iteration  24: 9583789.028 ops/s
Iteration  25: 9578679.470 ops/s
Iteration  26: 9592155.559 ops/s
Iteration  27: 9568833.999 ops/s
Iteration  28: 9582287.717 ops/s
Iteration  29: 9575198.191 ops/s
Iteration  30: 9564794.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reject_target":
  9577503.023 ±(99.9%) 6828.618 ops/s [Average]
  (min, avg, max) = (9556885.506, 9577503.023, 9596121.764), stdev = 10220.754
  CI (99.9%): [9570674.405, 9584331.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_reject_target  thrpt   30  9577503.023 ± 6828.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 729409.382 ops/s
# Warmup Iteration   2: 765799.785 ops/s
# Warmup Iteration   3: 976189.058 ops/s
# Warmup Iteration   4: 973584.895 ops/s
# Warmup Iteration   5: 968305.204 ops/s
# Warmup Iteration   6: 977380.880 ops/s
# Warmup Iteration   7: 975563.726 ops/s
# Warmup Iteration   8: 970664.809 ops/s
# Warmup Iteration   9: 975586.785 ops/s
# Warmup Iteration  10: 971062.952 ops/s
# Warmup Iteration  11: 955906.626 ops/s
# Warmup Iteration  12: 843831.532 ops/s
# Warmup Iteration  13: 973297.237 ops/s
# Warmup Iteration  14: 974285.822 ops/s
# Warmup Iteration  15: 972286.285 ops/s
# Warmup Iteration  16: 971175.438 ops/s
# Warmup Iteration  17: 1029433.914 ops/s
# Warmup Iteration  18: 1028784.178 ops/s
# Warmup Iteration  19: 1028714.349 ops/s
# Warmup Iteration  20: 1033005.664 ops/s
# Warmup Iteration  21: 1037862.408 ops/s
# Warmup Iteration  22: 1034764.377 ops/s
# Warmup Iteration  23: 1034668.787 ops/s
# Warmup Iteration  24: 1032919.243 ops/s
# Warmup Iteration  25: 1036409.741 ops/s
# Warmup Iteration  26: 1036191.354 ops/s
# Warmup Iteration  27: 1035319.294 ops/s
# Warmup Iteration  28: 1035411.970 ops/s
# Warmup Iteration  29: 1032704.512 ops/s
# Warmup Iteration  30: 1034309.643 ops/s
Iteration   1: 1035532.972 ops/s
Iteration   2: 1033648.451 ops/s
Iteration   3: 1034948.120 ops/s
Iteration   4: 1029886.934 ops/s
Iteration   5: 1029895.222 ops/s
Iteration   6: 1035346.148 ops/s
Iteration   7: 1038808.405 ops/s
Iteration   8: 1035665.790 ops/s
Iteration   9: 1030258.734 ops/s
Iteration  10: 1033134.985 ops/s
Iteration  11: 1035779.918 ops/s
Iteration  12: 1040402.412 ops/s
Iteration  13: 1038358.883 ops/s
Iteration  14: 1033916.138 ops/s
Iteration  15: 1034300.222 ops/s
Iteration  16: 1033788.145 ops/s
Iteration  17: 1035333.960 ops/s
Iteration  18: 1034951.476 ops/s
Iteration  19: 1035660.992 ops/s
Iteration  20: 1034214.488 ops/s
Iteration  21: 1031780.435 ops/s
Iteration  22: 1040641.540 ops/s
Iteration  23: 1038513.528 ops/s
Iteration  24: 1036157.934 ops/s
Iteration  25: 1034765.902 ops/s
Iteration  26: 1036132.511 ops/s
Iteration  27: 1033267.042 ops/s
Iteration  28: 1032218.231 ops/s
Iteration  29: 1034823.282 ops/s
Iteration  30: 1036307.095 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_remove":
  1034947.996 ±(99.9%) 1799.306 ops/s [Average]
  (min, avg, max) = (1029886.934, 1034947.996, 1040641.540), stdev = 2693.117
  CI (99.9%): [1033148.690, 1036747.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_remove  thrpt   30  1034947.996 ± 1799.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712997.494 ops/s
# Warmup Iteration   2: 763536.208 ops/s
# Warmup Iteration   3: 980012.012 ops/s
# Warmup Iteration   4: 971477.255 ops/s
# Warmup Iteration   5: 969343.156 ops/s
# Warmup Iteration   6: 970042.922 ops/s
# Warmup Iteration   7: 971705.620 ops/s
# Warmup Iteration   8: 974681.740 ops/s
# Warmup Iteration   9: 974609.264 ops/s
# Warmup Iteration  10: 975560.830 ops/s
# Warmup Iteration  11: 929572.875 ops/s
# Warmup Iteration  12: 863615.624 ops/s
# Warmup Iteration  13: 966852.256 ops/s
# Warmup Iteration  14: 969506.938 ops/s
# Warmup Iteration  15: 968474.873 ops/s
# Warmup Iteration  16: 971914.026 ops/s
# Warmup Iteration  17: 1031771.237 ops/s
# Warmup Iteration  18: 1029026.607 ops/s
# Warmup Iteration  19: 1021976.504 ops/s
# Warmup Iteration  20: 1028354.363 ops/s
# Warmup Iteration  21: 1028085.877 ops/s
# Warmup Iteration  22: 1033068.375 ops/s
# Warmup Iteration  23: 1032976.515 ops/s
# Warmup Iteration  24: 1036834.443 ops/s
# Warmup Iteration  25: 1038825.569 ops/s
# Warmup Iteration  26: 1039985.308 ops/s
# Warmup Iteration  27: 1032344.250 ops/s
# Warmup Iteration  28: 1033129.752 ops/s
# Warmup Iteration  29: 1034332.665 ops/s
# Warmup Iteration  30: 1037057.563 ops/s
Iteration   1: 1032001.474 ops/s
Iteration   2: 1034074.189 ops/s
Iteration   3: 1033295.835 ops/s
Iteration   4: 1039361.533 ops/s
Iteration   5: 1028270.655 ops/s
Iteration   6: 1033058.812 ops/s
Iteration   7: 1033203.673 ops/s
Iteration   8: 1032311.326 ops/s
Iteration   9: 1032962.345 ops/s
Iteration  10: 1037961.019 ops/s
Iteration  11: 1037426.712 ops/s
Iteration  12: 1038879.769 ops/s
Iteration  13: 1033026.431 ops/s
Iteration  14: 1035948.756 ops/s
Iteration  15: 1034258.461 ops/s
Iteration  16: 1031002.036 ops/s
Iteration  17: 1036977.123 ops/s
Iteration  18: 1037969.057 ops/s
Iteration  19: 1032162.685 ops/s
Iteration  20: 1030304.811 ops/s
Iteration  21: 1033528.145 ops/s
Iteration  22: 1032639.101 ops/s
Iteration  23: 1031469.695 ops/s
Iteration  24: 1032895.264 ops/s
Iteration  25: 1040336.091 ops/s
Iteration  26: 1037759.449 ops/s
Iteration  27: 1033406.152 ops/s
Iteration  28: 1035782.201 ops/s
Iteration  29: 1033757.219 ops/s
Iteration  30: 1034714.469 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAll":
  1034358.150 ±(99.9%) 1931.733 ops/s [Average]
  (min, avg, max) = (1028270.655, 1034358.150, 1040336.091), stdev = 2891.328
  CI (99.9%): [1032426.416, 1036289.883] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1034358.150 ± 1931.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735298.786 ops/s
# Warmup Iteration   2: 791694.541 ops/s
# Warmup Iteration   3: 1008869.030 ops/s
# Warmup Iteration   4: 1010714.078 ops/s
# Warmup Iteration   5: 1004640.360 ops/s
# Warmup Iteration   6: 1008509.165 ops/s
# Warmup Iteration   7: 1007989.601 ops/s
# Warmup Iteration   8: 1004422.578 ops/s
# Warmup Iteration   9: 1004313.717 ops/s
# Warmup Iteration  10: 1004838.197 ops/s
# Warmup Iteration  11: 905833.015 ops/s
# Warmup Iteration  12: 951489.047 ops/s
# Warmup Iteration  13: 1002803.937 ops/s
# Warmup Iteration  14: 1003991.573 ops/s
# Warmup Iteration  15: 1005330.905 ops/s
# Warmup Iteration  16: 1007174.231 ops/s
# Warmup Iteration  17: 1065964.291 ops/s
# Warmup Iteration  18: 1065402.716 ops/s
# Warmup Iteration  19: 1068313.543 ops/s
# Warmup Iteration  20: 1067564.833 ops/s
# Warmup Iteration  21: 1067071.307 ops/s
# Warmup Iteration  22: 1045578.211 ops/s
# Warmup Iteration  23: 1068309.373 ops/s
# Warmup Iteration  24: 1064926.470 ops/s
# Warmup Iteration  25: 1064484.986 ops/s
# Warmup Iteration  26: 1072416.387 ops/s
# Warmup Iteration  27: 1065290.179 ops/s
# Warmup Iteration  28: 1064509.172 ops/s
# Warmup Iteration  29: 1069520.743 ops/s
# Warmup Iteration  30: 1067278.914 ops/s
Iteration   1: 1067516.709 ops/s
Iteration   2: 1069584.139 ops/s
Iteration   3: 1068967.843 ops/s
Iteration   4: 1065914.898 ops/s
Iteration   5: 1064055.210 ops/s
Iteration   6: 1068987.257 ops/s
Iteration   7: 1069612.903 ops/s
Iteration   8: 1066328.171 ops/s
Iteration   9: 1067968.227 ops/s
Iteration  10: 1061822.402 ops/s
Iteration  11: 1065654.190 ops/s
Iteration  12: 1066427.193 ops/s
Iteration  13: 1068560.126 ops/s
Iteration  14: 1072013.478 ops/s
Iteration  15: 1064407.803 ops/s
Iteration  16: 1064490.930 ops/s
Iteration  17: 1066408.902 ops/s
Iteration  18: 1066815.220 ops/s
Iteration  19: 1064109.990 ops/s
Iteration  20: 1070533.039 ops/s
Iteration  21: 1069612.857 ops/s
Iteration  22: 1064389.430 ops/s
Iteration  23: 1065079.382 ops/s
Iteration  24: 1062481.478 ops/s
Iteration  25: 1063121.226 ops/s
Iteration  26: 1065097.816 ops/s
Iteration  27: 1068273.618 ops/s
Iteration  28: 1063934.152 ops/s
Iteration  29: 1063927.721 ops/s
Iteration  30: 1068310.797 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_removeAtIndex":
  1066480.237 ±(99.9%) 1728.324 ops/s [Average]
  (min, avg, max) = (1061822.402, 1066480.237, 1072013.478), stdev = 2586.874
  CI (99.9%): [1064751.913, 1068208.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1066480.237 ± 1728.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633091.018 ops/s
# Warmup Iteration   2: 768752.029 ops/s
# Warmup Iteration   3: 974968.423 ops/s
# Warmup Iteration   4: 970777.755 ops/s
# Warmup Iteration   5: 975098.734 ops/s
# Warmup Iteration   6: 978419.757 ops/s
# Warmup Iteration   7: 972073.690 ops/s
# Warmup Iteration   8: 971989.896 ops/s
# Warmup Iteration   9: 812158.064 ops/s
# Warmup Iteration  10: 972860.472 ops/s
# Warmup Iteration  11: 975037.944 ops/s
# Warmup Iteration  12: 974967.462 ops/s
# Warmup Iteration  13: 978043.846 ops/s
# Warmup Iteration  14: 976189.905 ops/s
# Warmup Iteration  15: 974947.520 ops/s
# Warmup Iteration  16: 975745.491 ops/s
# Warmup Iteration  17: 1030116.199 ops/s
# Warmup Iteration  18: 1030545.747 ops/s
# Warmup Iteration  19: 1031381.703 ops/s
# Warmup Iteration  20: 1031129.346 ops/s
# Warmup Iteration  21: 1034834.741 ops/s
# Warmup Iteration  22: 1032047.020 ops/s
# Warmup Iteration  23: 1034170.841 ops/s
# Warmup Iteration  24: 1033081.979 ops/s
# Warmup Iteration  25: 1032874.831 ops/s
# Warmup Iteration  26: 1032804.066 ops/s
# Warmup Iteration  27: 1034624.309 ops/s
# Warmup Iteration  28: 1032050.142 ops/s
# Warmup Iteration  29: 1032460.423 ops/s
# Warmup Iteration  30: 1032214.496 ops/s
Iteration   1: 1028471.744 ops/s
Iteration   2: 1033852.304 ops/s
Iteration   3: 1031441.664 ops/s
Iteration   4: 1035829.964 ops/s
Iteration   5: 1033840.310 ops/s
Iteration   6: 1035031.848 ops/s
Iteration   7: 1035470.968 ops/s
Iteration   8: 1028946.375 ops/s
Iteration   9: 1026787.102 ops/s
Iteration  10: 1031169.459 ops/s
Iteration  11: 1029306.262 ops/s
Iteration  12: 1031409.596 ops/s
Iteration  13: 1031872.789 ops/s
Iteration  14: 1033039.614 ops/s
Iteration  15: 1030330.941 ops/s
Iteration  16: 1031784.928 ops/s
Iteration  17: 1032244.667 ops/s
Iteration  18: 1031977.035 ops/s
Iteration  19: 1028446.948 ops/s
Iteration  20: 1030018.593 ops/s
Iteration  21: 1035129.704 ops/s
Iteration  22: 1023299.106 ops/s
Iteration  23: 1029165.920 ops/s
Iteration  24: 1031008.165 ops/s
Iteration  25: 1028294.714 ops/s
Iteration  26: 1028881.910 ops/s
Iteration  27: 1034604.996 ops/s
Iteration  28: 1034168.502 ops/s
Iteration  29: 1031635.980 ops/s
Iteration  30: 1030575.467 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_replaceAll":
  1031267.919 ±(99.9%) 1907.380 ops/s [Average]
  (min, avg, max) = (1023299.106, 1031267.919, 1035829.964), stdev = 2854.877
  CI (99.9%): [1029360.539, 1033175.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1031267.919 ± 1907.380  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718734.962 ops/s
# Warmup Iteration   2: 763029.364 ops/s
# Warmup Iteration   3: 967316.527 ops/s
# Warmup Iteration   4: 956168.127 ops/s
# Warmup Iteration   5: 952663.810 ops/s
# Warmup Iteration   6: 956586.981 ops/s
# Warmup Iteration   7: 960277.197 ops/s
# Warmup Iteration   8: 959419.287 ops/s
# Warmup Iteration   9: 960380.617 ops/s
# Warmup Iteration  10: 961603.537 ops/s
# Warmup Iteration  11: 951118.144 ops/s
# Warmup Iteration  12: 837825.876 ops/s
# Warmup Iteration  13: 963158.640 ops/s
# Warmup Iteration  14: 963000.775 ops/s
# Warmup Iteration  15: 963084.928 ops/s
# Warmup Iteration  16: 953401.523 ops/s
# Warmup Iteration  17: 1006963.780 ops/s
# Warmup Iteration  18: 1008365.114 ops/s
# Warmup Iteration  19: 1023199.484 ops/s
# Warmup Iteration  20: 1016294.336 ops/s
# Warmup Iteration  21: 1010514.821 ops/s
# Warmup Iteration  22: 1016522.896 ops/s
# Warmup Iteration  23: 1010826.576 ops/s
# Warmup Iteration  24: 1013596.596 ops/s
# Warmup Iteration  25: 1016734.319 ops/s
# Warmup Iteration  26: 1017668.684 ops/s
# Warmup Iteration  27: 1007617.583 ops/s
# Warmup Iteration  28: 1006443.118 ops/s
# Warmup Iteration  29: 1013024.475 ops/s
# Warmup Iteration  30: 1017789.605 ops/s
Iteration   1: 1020689.959 ops/s
Iteration   2: 1012167.519 ops/s
Iteration   3: 1010123.763 ops/s
Iteration   4: 1011051.400 ops/s
Iteration   5: 1011482.255 ops/s
Iteration   6: 1007131.900 ops/s
Iteration   7: 1019651.890 ops/s
Iteration   8: 1020121.291 ops/s
Iteration   9: 1021822.589 ops/s
Iteration  10: 1015669.639 ops/s
Iteration  11: 1009974.903 ops/s
Iteration  12: 1006561.189 ops/s
Iteration  13: 1010592.851 ops/s
Iteration  14: 1014745.546 ops/s
Iteration  15: 1023460.018 ops/s
Iteration  16: 1017955.009 ops/s
Iteration  17: 1016954.359 ops/s
Iteration  18: 1007292.604 ops/s
Iteration  19: 1015930.659 ops/s
Iteration  20: 1006816.085 ops/s
Iteration  21: 1013717.102 ops/s
Iteration  22: 1019372.984 ops/s
Iteration  23: 1017157.321 ops/s
Iteration  24: 1015100.868 ops/s
Iteration  25: 1013878.210 ops/s
Iteration  26: 1018279.495 ops/s
Iteration  27: 1013973.568 ops/s
Iteration  28: 1015009.861 ops/s
Iteration  29: 1013395.758 ops/s
Iteration  30: 1014839.061 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_retainAll":
  1014497.322 ±(99.9%) 3063.575 ops/s [Average]
  (min, avg, max) = (1006561.189, 1014497.322, 1023460.018), stdev = 4585.416
  CI (99.9%): [1011433.747, 1017560.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1014497.322 ± 3063.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5106072.607 ops/s
# Warmup Iteration   2: 11225926.328 ops/s
# Warmup Iteration   3: 11283275.436 ops/s
# Warmup Iteration   4: 9520655.912 ops/s
# Warmup Iteration   5: 11343954.188 ops/s
# Warmup Iteration   6: 11371204.806 ops/s
# Warmup Iteration   7: 11331839.235 ops/s
# Warmup Iteration   8: 11351924.390 ops/s
# Warmup Iteration   9: 11355212.882 ops/s
# Warmup Iteration  10: 11343113.637 ops/s
# Warmup Iteration  11: 11227980.688 ops/s
# Warmup Iteration  12: 11320258.370 ops/s
# Warmup Iteration  13: 11329113.192 ops/s
# Warmup Iteration  14: 11341431.614 ops/s
# Warmup Iteration  15: 11369544.782 ops/s
# Warmup Iteration  16: 11349290.123 ops/s
# Warmup Iteration  17: 11339080.355 ops/s
# Warmup Iteration  18: 11374539.463 ops/s
# Warmup Iteration  19: 11347265.737 ops/s
# Warmup Iteration  20: 11365824.153 ops/s
# Warmup Iteration  21: 11324009.156 ops/s
# Warmup Iteration  22: 11366895.966 ops/s
# Warmup Iteration  23: 11351969.675 ops/s
# Warmup Iteration  24: 11361722.515 ops/s
# Warmup Iteration  25: 11350548.536 ops/s
# Warmup Iteration  26: 11269900.676 ops/s
# Warmup Iteration  27: 11368212.981 ops/s
# Warmup Iteration  28: 11349787.610 ops/s
# Warmup Iteration  29: 11371544.071 ops/s
# Warmup Iteration  30: 11373579.401 ops/s
Iteration   1: 11361311.077 ops/s
Iteration   2: 11339681.159 ops/s
Iteration   3: 11369316.827 ops/s
Iteration   4: 11315796.817 ops/s
Iteration   5: 11384304.891 ops/s
Iteration   6: 11388941.713 ops/s
Iteration   7: 11334340.818 ops/s
Iteration   8: 11382111.202 ops/s
Iteration   9: 11345763.932 ops/s
Iteration  10: 11348173.714 ops/s
Iteration  11: 11351018.757 ops/s
Iteration  12: 11361721.879 ops/s
Iteration  13: 11363743.787 ops/s
Iteration  14: 11332585.442 ops/s
Iteration  15: 11344008.587 ops/s
Iteration  16: 11279291.387 ops/s
Iteration  17: 11358563.229 ops/s
Iteration  18: 11366152.902 ops/s
Iteration  19: 11354715.752 ops/s
Iteration  20: 11365234.698 ops/s
Iteration  21: 11328822.868 ops/s
Iteration  22: 11357366.302 ops/s
Iteration  23: 11326375.598 ops/s
Iteration  24: 11319643.992 ops/s
Iteration  25: 11333322.984 ops/s
Iteration  26: 11373946.286 ops/s
Iteration  27: 11359588.707 ops/s
Iteration  28: 11339612.771 ops/s
Iteration  29: 11319146.560 ops/s
Iteration  30: 11316541.840 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEach":
  11347371.549 ±(99.9%) 16138.497 ops/s [Average]
  (min, avg, max) = (11279291.387, 11347371.549, 11388941.713), stdev = 24155.345
  CI (99.9%): [11331233.052, 11363510.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  11347371.549 ± 16138.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4278969.796 ops/s
# Warmup Iteration   2: 6526765.083 ops/s
# Warmup Iteration   3: 7572487.091 ops/s
# Warmup Iteration   4: 7625433.067 ops/s
# Warmup Iteration   5: 7639214.066 ops/s
# Warmup Iteration   6: 7638543.916 ops/s
# Warmup Iteration   7: 6397327.526 ops/s
# Warmup Iteration   8: 7646831.187 ops/s
# Warmup Iteration   9: 7617966.067 ops/s
# Warmup Iteration  10: 7616163.964 ops/s
# Warmup Iteration  11: 7628367.059 ops/s
# Warmup Iteration  12: 7606462.722 ops/s
# Warmup Iteration  13: 7588811.453 ops/s
# Warmup Iteration  14: 7589026.413 ops/s
# Warmup Iteration  15: 7644117.053 ops/s
# Warmup Iteration  16: 7643252.669 ops/s
# Warmup Iteration  17: 7657575.862 ops/s
# Warmup Iteration  18: 7666501.901 ops/s
# Warmup Iteration  19: 7662564.632 ops/s
# Warmup Iteration  20: 7678456.725 ops/s
# Warmup Iteration  21: 7655126.716 ops/s
# Warmup Iteration  22: 7661525.684 ops/s
# Warmup Iteration  23: 7651191.094 ops/s
# Warmup Iteration  24: 7661567.127 ops/s
# Warmup Iteration  25: 7595012.179 ops/s
# Warmup Iteration  26: 7669297.820 ops/s
# Warmup Iteration  27: 7668048.712 ops/s
# Warmup Iteration  28: 7673255.087 ops/s
# Warmup Iteration  29: 7660822.665 ops/s
# Warmup Iteration  30: 7656677.088 ops/s
Iteration   1: 7629824.797 ops/s
Iteration   2: 7613147.332 ops/s
Iteration   3: 7656490.241 ops/s
Iteration   4: 7668092.275 ops/s
Iteration   5: 7678453.552 ops/s
Iteration   6: 7619989.636 ops/s
Iteration   7: 7610492.229 ops/s
Iteration   8: 7681642.619 ops/s
Iteration   9: 7635713.262 ops/s
Iteration  10: 7673103.703 ops/s
Iteration  11: 7644196.649 ops/s
Iteration  12: 7665425.153 ops/s
Iteration  13: 7640613.050 ops/s
Iteration  14: 7670060.497 ops/s
Iteration  15: 7636201.533 ops/s
Iteration  16: 7674283.063 ops/s
Iteration  17: 7647378.501 ops/s
Iteration  18: 7676359.062 ops/s
Iteration  19: 7656748.844 ops/s
Iteration  20: 7661656.327 ops/s
Iteration  21: 7668566.586 ops/s
Iteration  22: 7669151.944 ops/s
Iteration  23: 7669634.858 ops/s
Iteration  24: 7646107.155 ops/s
Iteration  25: 7651130.735 ops/s
Iteration  26: 7652052.820 ops/s
Iteration  27: 7682178.821 ops/s
Iteration  28: 7624958.012 ops/s
Iteration  29: 7674504.577 ops/s
Iteration  30: 7608119.297 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  7652875.904 ±(99.9%) 14917.170 ops/s [Average]
  (min, avg, max) = (7608119.297, 7652875.904, 7682178.821), stdev = 22327.319
  CI (99.9%): [7637958.735, 7667793.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  7652875.904 ± 14917.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2829069.355 ops/s
# Warmup Iteration   2: 6124335.658 ops/s
# Warmup Iteration   3: 6282777.775 ops/s
# Warmup Iteration   4: 6327023.080 ops/s
# Warmup Iteration   5: 5304744.422 ops/s
# Warmup Iteration   6: 6316511.028 ops/s
# Warmup Iteration   7: 6337206.878 ops/s
# Warmup Iteration   8: 6307022.772 ops/s
# Warmup Iteration   9: 6332901.620 ops/s
# Warmup Iteration  10: 6318495.498 ops/s
# Warmup Iteration  11: 6318339.859 ops/s
# Warmup Iteration  12: 6321813.494 ops/s
# Warmup Iteration  13: 6331744.063 ops/s
# Warmup Iteration  14: 6323965.916 ops/s
# Warmup Iteration  15: 6330288.002 ops/s
# Warmup Iteration  16: 6325898.296 ops/s
# Warmup Iteration  17: 6325869.824 ops/s
# Warmup Iteration  18: 6316477.962 ops/s
# Warmup Iteration  19: 6331245.801 ops/s
# Warmup Iteration  20: 6329418.339 ops/s
# Warmup Iteration  21: 6324634.722 ops/s
# Warmup Iteration  22: 6321645.530 ops/s
# Warmup Iteration  23: 6329516.066 ops/s
# Warmup Iteration  24: 6314156.007 ops/s
# Warmup Iteration  25: 6317585.777 ops/s
# Warmup Iteration  26: 6328613.068 ops/s
# Warmup Iteration  27: 6299807.828 ops/s
# Warmup Iteration  28: 6327652.805 ops/s
# Warmup Iteration  29: 6317842.518 ops/s
# Warmup Iteration  30: 6327572.395 ops/s
Iteration   1: 6336207.911 ops/s
Iteration   2: 6301067.928 ops/s
Iteration   3: 6310953.896 ops/s
Iteration   4: 6287666.993 ops/s
Iteration   5: 6329328.766 ops/s
Iteration   6: 6308687.818 ops/s
Iteration   7: 6335010.178 ops/s
Iteration   8: 6355700.828 ops/s
Iteration   9: 6337182.707 ops/s
Iteration  10: 6313453.599 ops/s
Iteration  11: 6327834.036 ops/s
Iteration  12: 6308742.115 ops/s
Iteration  13: 6340827.700 ops/s
Iteration  14: 6337991.853 ops/s
Iteration  15: 6322134.135 ops/s
Iteration  16: 6331502.382 ops/s
Iteration  17: 6301958.835 ops/s
Iteration  18: 6301116.734 ops/s
Iteration  19: 6324011.290 ops/s
Iteration  20: 6334455.988 ops/s
Iteration  21: 6328352.821 ops/s
Iteration  22: 6324972.431 ops/s
Iteration  23: 6328058.845 ops/s
Iteration  24: 6317595.502 ops/s
Iteration  25: 6321946.063 ops/s
Iteration  26: 6317981.747 ops/s
Iteration  27: 6332522.076 ops/s
Iteration  28: 6335176.943 ops/s
Iteration  29: 6329176.448 ops/s
Iteration  30: 6340136.358 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select":
  6324058.498 ±(99.9%) 9883.806 ops/s [Average]
  (min, avg, max) = (6287666.993, 6324058.498, 6355700.828), stdev = 14793.617
  CI (99.9%): [6314174.691, 6333942.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_select  thrpt   30  6324058.498 ± 9883.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstanceOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstanceOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6263877.948 ops/s
# Warmup Iteration   2: 14181193.925 ops/s
# Warmup Iteration   3: 11978602.668 ops/s
# Warmup Iteration   4: 14283034.451 ops/s
# Warmup Iteration   5: 14305508.817 ops/s
# Warmup Iteration   6: 14306229.459 ops/s
# Warmup Iteration   7: 14315467.567 ops/s
# Warmup Iteration   8: 14267559.672 ops/s
# Warmup Iteration   9: 14284259.143 ops/s
# Warmup Iteration  10: 14326098.586 ops/s
# Warmup Iteration  11: 14297238.522 ops/s
# Warmup Iteration  12: 14321514.671 ops/s
# Warmup Iteration  13: 14313813.003 ops/s
# Warmup Iteration  14: 14235000.579 ops/s
# Warmup Iteration  15: 14287107.841 ops/s
# Warmup Iteration  16: 14322897.075 ops/s
# Warmup Iteration  17: 14283431.292 ops/s
# Warmup Iteration  18: 14283509.698 ops/s
# Warmup Iteration  19: 14263531.269 ops/s
# Warmup Iteration  20: 14275618.099 ops/s
# Warmup Iteration  21: 14287096.193 ops/s
# Warmup Iteration  22: 14289180.417 ops/s
# Warmup Iteration  23: 14324111.500 ops/s
# Warmup Iteration  24: 14313367.687 ops/s
# Warmup Iteration  25: 14314810.132 ops/s
# Warmup Iteration  26: 14211466.470 ops/s
# Warmup Iteration  27: 14288599.209 ops/s
# Warmup Iteration  28: 14273343.958 ops/s
# Warmup Iteration  29: 14322944.955 ops/s
# Warmup Iteration  30: 14260578.803 ops/s
Iteration   1: 14208279.760 ops/s
Iteration   2: 14341373.065 ops/s
Iteration   3: 14333871.248 ops/s
Iteration   4: 14268654.299 ops/s
Iteration   5: 14157859.979 ops/s
Iteration   6: 14225226.160 ops/s
Iteration   7: 14325425.107 ops/s
Iteration   8: 14211102.268 ops/s
Iteration   9: 14126250.203 ops/s
Iteration  10: 14081437.807 ops/s
Iteration  11: 14201365.743 ops/s
Iteration  12: 14266143.213 ops/s
Iteration  13: 14198819.360 ops/s
Iteration  14: 14325091.501 ops/s
Iteration  15: 14283318.551 ops/s
Iteration  16: 14357999.150 ops/s
Iteration  17: 14233685.750 ops/s
Iteration  18: 14287671.326 ops/s
Iteration  19: 14255851.599 ops/s
Iteration  20: 14346589.342 ops/s
Iteration  21: 14310735.237 ops/s
Iteration  22: 14280669.069 ops/s
Iteration  23: 14313282.936 ops/s
Iteration  24: 14336690.123 ops/s
Iteration  25: 14302855.184 ops/s
Iteration  26: 14289323.227 ops/s
Iteration  27: 14271127.979 ops/s
Iteration  28: 14242798.164 ops/s
Iteration  29: 14285500.679 ops/s
Iteration  30: 14017245.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstanceOf":
  14256208.107 ±(99.9%) 53718.787 ops/s [Average]
  (min, avg, max) = (14017245.190, 14256208.107, 14357999.150), stdev = 80403.758
  CI (99.9%): [14202489.320, 14309926.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectInstanceOf  thrpt   30  14256208.107 ± 53718.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3794871.576 ops/s
# Warmup Iteration   2: 5689145.752 ops/s
# Warmup Iteration   3: 6487746.550 ops/s
# Warmup Iteration   4: 6523883.615 ops/s
# Warmup Iteration   5: 6554379.142 ops/s
# Warmup Iteration   6: 6554812.696 ops/s
# Warmup Iteration   7: 5523080.148 ops/s
# Warmup Iteration   8: 6535686.010 ops/s
# Warmup Iteration   9: 6508198.696 ops/s
# Warmup Iteration  10: 6533872.665 ops/s
# Warmup Iteration  11: 6554504.065 ops/s
# Warmup Iteration  12: 6529012.858 ops/s
# Warmup Iteration  13: 6555797.754 ops/s
# Warmup Iteration  14: 6454101.474 ops/s
# Warmup Iteration  15: 6460218.356 ops/s
# Warmup Iteration  16: 6573745.792 ops/s
# Warmup Iteration  17: 6537364.599 ops/s
# Warmup Iteration  18: 6539088.407 ops/s
# Warmup Iteration  19: 6519218.903 ops/s
# Warmup Iteration  20: 6529452.647 ops/s
# Warmup Iteration  21: 6542776.679 ops/s
# Warmup Iteration  22: 6542542.999 ops/s
# Warmup Iteration  23: 6564984.894 ops/s
# Warmup Iteration  24: 6504455.956 ops/s
# Warmup Iteration  25: 6541334.504 ops/s
# Warmup Iteration  26: 6542258.460 ops/s
# Warmup Iteration  27: 6542303.238 ops/s
# Warmup Iteration  28: 6553298.025 ops/s
# Warmup Iteration  29: 6535647.981 ops/s
# Warmup Iteration  30: 6532716.934 ops/s
Iteration   1: 6553875.031 ops/s
Iteration   2: 6491228.841 ops/s
Iteration   3: 6565108.931 ops/s
Iteration   4: 6484750.398 ops/s
Iteration   5: 6550346.742 ops/s
Iteration   6: 6504352.129 ops/s
Iteration   7: 6543924.672 ops/s
Iteration   8: 6549044.691 ops/s
Iteration   9: 6566953.829 ops/s
Iteration  10: 6550183.929 ops/s
Iteration  11: 6553868.192 ops/s
Iteration  12: 6549938.978 ops/s
Iteration  13: 6535986.137 ops/s
Iteration  14: 6559010.891 ops/s
Iteration  15: 6568173.901 ops/s
Iteration  16: 6540163.733 ops/s
Iteration  17: 6547409.755 ops/s
Iteration  18: 6468177.761 ops/s
Iteration  19: 6564091.360 ops/s
Iteration  20: 6532791.492 ops/s
Iteration  21: 6549521.649 ops/s
Iteration  22: 6555058.137 ops/s
Iteration  23: 6489232.305 ops/s
Iteration  24: 6556633.944 ops/s
Iteration  25: 6558342.724 ops/s
Iteration  26: 6541347.118 ops/s
Iteration  27: 6523841.127 ops/s
Iteration  28: 6523575.051 ops/s
Iteration  29: 6547639.452 ops/s
Iteration  30: 6548183.386 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectInstancesOf":
  6539091.876 ±(99.9%) 17549.322 ops/s [Average]
  (min, avg, max) = (6468177.761, 6539091.876, 6568173.901), stdev = 26267.001
  CI (99.9%): [6521542.554, 6556641.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  6539091.876 ± 17549.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1681674.434 ops/s
# Warmup Iteration   2: 3546988.523 ops/s
# Warmup Iteration   3: 3697520.042 ops/s
# Warmup Iteration   4: 3703652.555 ops/s
# Warmup Iteration   5: 3119224.849 ops/s
# Warmup Iteration   6: 3721068.702 ops/s
# Warmup Iteration   7: 3726455.619 ops/s
# Warmup Iteration   8: 3718981.929 ops/s
# Warmup Iteration   9: 3721143.058 ops/s
# Warmup Iteration  10: 3714919.593 ops/s
# Warmup Iteration  11: 3717615.802 ops/s
# Warmup Iteration  12: 3716063.289 ops/s
# Warmup Iteration  13: 3709581.663 ops/s
# Warmup Iteration  14: 3722343.024 ops/s
# Warmup Iteration  15: 3719288.355 ops/s
# Warmup Iteration  16: 3724109.516 ops/s
# Warmup Iteration  17: 3703112.197 ops/s
# Warmup Iteration  18: 3681200.458 ops/s
# Warmup Iteration  19: 3701476.788 ops/s
# Warmup Iteration  20: 3708441.541 ops/s
# Warmup Iteration  21: 3718180.857 ops/s
# Warmup Iteration  22: 3716575.650 ops/s
# Warmup Iteration  23: 3729485.863 ops/s
# Warmup Iteration  24: 3717740.437 ops/s
# Warmup Iteration  25: 3712385.295 ops/s
# Warmup Iteration  26: 3708606.802 ops/s
# Warmup Iteration  27: 3715592.010 ops/s
# Warmup Iteration  28: 3699420.637 ops/s
# Warmup Iteration  29: 3706304.099 ops/s
# Warmup Iteration  30: 3721145.504 ops/s
Iteration   1: 3727701.387 ops/s
Iteration   2: 3716797.671 ops/s
Iteration   3: 3710943.073 ops/s
Iteration   4: 3704022.561 ops/s
Iteration   5: 3725918.687 ops/s
Iteration   6: 3715094.311 ops/s
Iteration   7: 3716087.322 ops/s
Iteration   8: 3723112.883 ops/s
Iteration   9: 3723591.527 ops/s
Iteration  10: 3732013.153 ops/s
Iteration  11: 3716312.808 ops/s
Iteration  12: 3729028.580 ops/s
Iteration  13: 3715917.074 ops/s
Iteration  14: 3722751.931 ops/s
Iteration  15: 3718172.254 ops/s
Iteration  16: 3727789.089 ops/s
Iteration  17: 3724276.439 ops/s
Iteration  18: 3721630.288 ops/s
Iteration  19: 3709881.919 ops/s
Iteration  20: 3721712.989 ops/s
Iteration  21: 3724406.665 ops/s
Iteration  22: 3723273.720 ops/s
Iteration  23: 3725848.030 ops/s
Iteration  24: 3727662.190 ops/s
Iteration  25: 3713017.536 ops/s
Iteration  26: 3680933.657 ops/s
Iteration  27: 3726905.948 ops/s
Iteration  28: 3711393.707 ops/s
Iteration  29: 3718074.322 ops/s
Iteration  30: 3701558.260 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith":
  3718527.666 ±(99.9%) 6858.829 ops/s [Average]
  (min, avg, max) = (3680933.657, 3718527.666, 3732013.153), stdev = 10265.973
  CI (99.9%): [3711668.837, 3725386.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectWith  thrpt   30  3718527.666 ± 6858.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3330053.512 ops/s
# Warmup Iteration   2: 6941176.202 ops/s
# Warmup Iteration   3: 7161495.382 ops/s
# Warmup Iteration   4: 7213295.776 ops/s
# Warmup Iteration   5: 6086011.121 ops/s
# Warmup Iteration   6: 7241308.841 ops/s
# Warmup Iteration   7: 7250613.733 ops/s
# Warmup Iteration   8: 7241375.406 ops/s
# Warmup Iteration   9: 7242505.796 ops/s
# Warmup Iteration  10: 7252961.133 ops/s
# Warmup Iteration  11: 7256345.553 ops/s
# Warmup Iteration  12: 7252174.609 ops/s
# Warmup Iteration  13: 7257454.807 ops/s
# Warmup Iteration  14: 7246692.734 ops/s
# Warmup Iteration  15: 7230647.540 ops/s
# Warmup Iteration  16: 7255775.264 ops/s
# Warmup Iteration  17: 7235877.972 ops/s
# Warmup Iteration  18: 7262831.465 ops/s
# Warmup Iteration  19: 7247804.374 ops/s
# Warmup Iteration  20: 7245315.157 ops/s
# Warmup Iteration  21: 7247269.279 ops/s
# Warmup Iteration  22: 7246455.703 ops/s
# Warmup Iteration  23: 7253225.986 ops/s
# Warmup Iteration  24: 7242561.764 ops/s
# Warmup Iteration  25: 7251368.375 ops/s
# Warmup Iteration  26: 7250555.293 ops/s
# Warmup Iteration  27: 7213040.710 ops/s
# Warmup Iteration  28: 7228035.567 ops/s
# Warmup Iteration  29: 7254652.278 ops/s
# Warmup Iteration  30: 7251686.654 ops/s
Iteration   1: 7246612.037 ops/s
Iteration   2: 7261632.579 ops/s
Iteration   3: 7258847.320 ops/s
Iteration   4: 7074015.963 ops/s
Iteration   5: 7198092.890 ops/s
Iteration   6: 7248345.272 ops/s
Iteration   7: 7252719.424 ops/s
Iteration   8: 7247764.392 ops/s
Iteration   9: 7264488.182 ops/s
Iteration  10: 7259000.063 ops/s
Iteration  11: 7252481.489 ops/s
Iteration  12: 7231405.510 ops/s
Iteration  13: 7264366.861 ops/s
Iteration  14: 7260249.094 ops/s
Iteration  15: 7231334.522 ops/s
Iteration  16: 7259178.766 ops/s
Iteration  17: 7244727.205 ops/s
Iteration  18: 7233458.158 ops/s
Iteration  19: 7240130.823 ops/s
Iteration  20: 7269830.501 ops/s
Iteration  21: 7256896.268 ops/s
Iteration  22: 7261293.244 ops/s
Iteration  23: 7253373.838 ops/s
Iteration  24: 7265323.200 ops/s
Iteration  25: 7262887.117 ops/s
Iteration  26: 7252798.460 ops/s
Iteration  27: 7249020.678 ops/s
Iteration  28: 7263649.626 ops/s
Iteration  29: 7241848.669 ops/s
Iteration  30: 7235025.234 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndex":
  7244693.246 ±(99.9%) 23641.626 ops/s [Average]
  (min, avg, max) = (7074015.963, 7244693.246, 7269830.501), stdev = 35385.676
  CI (99.9%): [7221051.620, 7268334.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  7244693.246 ± 23641.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1916547.277 ops/s
# Warmup Iteration   2: 4510239.390 ops/s
# Warmup Iteration   3: 4653528.341 ops/s
# Warmup Iteration   4: 3883608.559 ops/s
# Warmup Iteration   5: 4672565.949 ops/s
# Warmup Iteration   6: 4671251.648 ops/s
# Warmup Iteration   7: 4653851.726 ops/s
# Warmup Iteration   8: 4665023.492 ops/s
# Warmup Iteration   9: 4670338.548 ops/s
# Warmup Iteration  10: 4654746.709 ops/s
# Warmup Iteration  11: 4673043.056 ops/s
# Warmup Iteration  12: 4660403.928 ops/s
# Warmup Iteration  13: 4663769.023 ops/s
# Warmup Iteration  14: 4659287.217 ops/s
# Warmup Iteration  15: 4668072.164 ops/s
# Warmup Iteration  16: 4653963.311 ops/s
# Warmup Iteration  17: 4668203.044 ops/s
# Warmup Iteration  18: 4669125.806 ops/s
# Warmup Iteration  19: 4667653.921 ops/s
# Warmup Iteration  20: 4664733.699 ops/s
# Warmup Iteration  21: 4661329.355 ops/s
# Warmup Iteration  22: 4659292.580 ops/s
# Warmup Iteration  23: 4667724.829 ops/s
# Warmup Iteration  24: 4662032.846 ops/s
# Warmup Iteration  25: 4660755.677 ops/s
# Warmup Iteration  26: 4652644.815 ops/s
# Warmup Iteration  27: 4669146.404 ops/s
# Warmup Iteration  28: 4660673.142 ops/s
# Warmup Iteration  29: 4658136.758 ops/s
# Warmup Iteration  30: 4652716.525 ops/s
Iteration   1: 4666312.249 ops/s
Iteration   2: 4642278.123 ops/s
Iteration   3: 4661925.108 ops/s
Iteration   4: 4670982.897 ops/s
Iteration   5: 4674834.663 ops/s
Iteration   6: 4664877.876 ops/s
Iteration   7: 4666358.671 ops/s
Iteration   8: 4675042.711 ops/s
Iteration   9: 4670656.963 ops/s
Iteration  10: 4654488.300 ops/s
Iteration  11: 4660320.821 ops/s
Iteration  12: 4669240.336 ops/s
Iteration  13: 4656799.660 ops/s
Iteration  14: 4648216.456 ops/s
Iteration  15: 4677851.023 ops/s
Iteration  16: 4669282.795 ops/s
Iteration  17: 4652248.148 ops/s
Iteration  18: 4655547.042 ops/s
Iteration  19: 4663552.221 ops/s
Iteration  20: 4660524.638 ops/s
Iteration  21: 4673458.422 ops/s
Iteration  22: 4653960.579 ops/s
Iteration  23: 4656238.087 ops/s
Iteration  24: 4667467.184 ops/s
Iteration  25: 4671559.500 ops/s
Iteration  26: 4661970.052 ops/s
Iteration  27: 4671142.168 ops/s
Iteration  28: 4683182.333 ops/s
Iteration  29: 4668046.476 ops/s
Iteration  30: 4668026.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  4664546.385 ±(99.9%) 6154.260 ops/s [Average]
  (min, avg, max) = (4642278.123, 4664546.385, 4683182.333), stdev = 9211.407
  CI (99.9%): [4658392.126, 4670700.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  4664546.385 ± 6154.260  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1209298.335 ops/s
# Warmup Iteration   2: 1830020.426 ops/s
# Warmup Iteration   3: 2133576.330 ops/s
# Warmup Iteration   4: 2139826.615 ops/s
# Warmup Iteration   5: 2143782.373 ops/s
# Warmup Iteration   6: 2148844.758 ops/s
# Warmup Iteration   7: 1792990.154 ops/s
# Warmup Iteration   8: 2146381.236 ops/s
# Warmup Iteration   9: 2147552.000 ops/s
# Warmup Iteration  10: 2150618.459 ops/s
# Warmup Iteration  11: 2146896.986 ops/s
# Warmup Iteration  12: 2153528.882 ops/s
# Warmup Iteration  13: 2147357.281 ops/s
# Warmup Iteration  14: 2144812.664 ops/s
# Warmup Iteration  15: 2145652.756 ops/s
# Warmup Iteration  16: 2141047.643 ops/s
# Warmup Iteration  17: 2147381.970 ops/s
# Warmup Iteration  18: 2150249.494 ops/s
# Warmup Iteration  19: 2146698.175 ops/s
# Warmup Iteration  20: 2147778.836 ops/s
# Warmup Iteration  21: 2143537.789 ops/s
# Warmup Iteration  22: 2130055.531 ops/s
# Warmup Iteration  23: 2140362.536 ops/s
# Warmup Iteration  24: 2146744.017 ops/s
# Warmup Iteration  25: 2147360.266 ops/s
# Warmup Iteration  26: 2146898.088 ops/s
# Warmup Iteration  27: 2137319.370 ops/s
# Warmup Iteration  28: 2147374.737 ops/s
# Warmup Iteration  29: 2146427.103 ops/s
# Warmup Iteration  30: 2137591.088 ops/s
Iteration   1: 2147170.596 ops/s
Iteration   2: 2151236.013 ops/s
Iteration   3: 2149751.010 ops/s
Iteration   4: 2147386.760 ops/s
Iteration   5: 2149358.705 ops/s
Iteration   6: 2145842.373 ops/s
Iteration   7: 2148007.214 ops/s
Iteration   8: 2143101.668 ops/s
Iteration   9: 2150578.027 ops/s
Iteration  10: 2149156.678 ops/s
Iteration  11: 2151231.890 ops/s
Iteration  12: 2143283.992 ops/s
Iteration  13: 2136391.905 ops/s
Iteration  14: 2137919.517 ops/s
Iteration  15: 2141293.477 ops/s
Iteration  16: 2132965.342 ops/s
Iteration  17: 2137682.130 ops/s
Iteration  18: 2152817.330 ops/s
Iteration  19: 2138223.003 ops/s
Iteration  20: 2150162.719 ops/s
Iteration  21: 2140826.701 ops/s
Iteration  22: 2149514.473 ops/s
Iteration  23: 2148032.914 ops/s
Iteration  24: 2147790.321 ops/s
Iteration  25: 2147133.573 ops/s
Iteration  26: 2152040.911 ops/s
Iteration  27: 2140296.197 ops/s
Iteration  28: 2137000.625 ops/s
Iteration  29: 2137379.540 ops/s
Iteration  30: 2153358.788 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_selectWith_target":
  2145231.146 ±(99.9%) 3895.349 ops/s [Average]
  (min, avg, max) = (2132965.342, 2145231.146, 2153358.788), stdev = 5830.376
  CI (99.9%): [2141335.797, 2149126.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  2145231.146 ± 3895.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4139586.377 ops/s
# Warmup Iteration   2: 10047006.260 ops/s
# Warmup Iteration   3: 10082475.255 ops/s
# Warmup Iteration   4: 8465592.134 ops/s
# Warmup Iteration   5: 10091430.882 ops/s
# Warmup Iteration   6: 10091264.212 ops/s
# Warmup Iteration   7: 10101739.235 ops/s
# Warmup Iteration   8: 10091816.921 ops/s
# Warmup Iteration   9: 10059971.749 ops/s
# Warmup Iteration  10: 10098318.856 ops/s
# Warmup Iteration  11: 10095572.856 ops/s
# Warmup Iteration  12: 9757090.035 ops/s
# Warmup Iteration  13: 10057038.912 ops/s
# Warmup Iteration  14: 10027777.712 ops/s
# Warmup Iteration  15: 10085054.449 ops/s
# Warmup Iteration  16: 10106239.762 ops/s
# Warmup Iteration  17: 10103599.574 ops/s
# Warmup Iteration  18: 10095319.408 ops/s
# Warmup Iteration  19: 10096646.215 ops/s
# Warmup Iteration  20: 10100109.393 ops/s
# Warmup Iteration  21: 10077076.553 ops/s
# Warmup Iteration  22: 10108011.643 ops/s
# Warmup Iteration  23: 10107118.310 ops/s
# Warmup Iteration  24: 10103748.328 ops/s
# Warmup Iteration  25: 10098567.152 ops/s
# Warmup Iteration  26: 10087750.522 ops/s
# Warmup Iteration  27: 10083857.375 ops/s
# Warmup Iteration  28: 10090874.626 ops/s
# Warmup Iteration  29: 10074605.636 ops/s
# Warmup Iteration  30: 10106670.146 ops/s
Iteration   1: 10088950.000 ops/s
Iteration   2: 10085632.409 ops/s
Iteration   3: 10069702.253 ops/s
Iteration   4: 10105815.866 ops/s
Iteration   5: 10094513.940 ops/s
Iteration   6: 10092904.052 ops/s
Iteration   7: 10089610.642 ops/s
Iteration   8: 10091407.687 ops/s
Iteration   9: 10070472.884 ops/s
Iteration  10: 10102319.914 ops/s
Iteration  11: 10096400.676 ops/s
Iteration  12: 10076629.669 ops/s
Iteration  13: 10092042.711 ops/s
Iteration  14: 10094653.161 ops/s
Iteration  15: 10086081.184 ops/s
Iteration  16: 10050992.281 ops/s
Iteration  17: 10051160.725 ops/s
Iteration  18: 10009542.203 ops/s
Iteration  19: 10117030.311 ops/s
Iteration  20: 10050757.265 ops/s
Iteration  21: 10071845.079 ops/s
Iteration  22: 10035885.527 ops/s
Iteration  23: 10108413.296 ops/s
Iteration  24: 10085649.076 ops/s
Iteration  25: 10075644.791 ops/s
Iteration  26: 10093040.953 ops/s
Iteration  27: 10104976.879 ops/s
Iteration  28: 10101758.384 ops/s
Iteration  29: 10099478.994 ops/s
Iteration  30: 10106512.728 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_select_target":
  10083327.518 ±(99.9%) 15937.533 ops/s [Average]
  (min, avg, max) = (10009542.203, 10083327.518, 10117030.311), stdev = 23854.551
  CI (99.9%): [10067389.985, 10099265.051] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_select_target  thrpt   30  10083327.518 ± 15937.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742520.275 ops/s
# Warmup Iteration   2: 787735.484 ops/s
# Warmup Iteration   3: 1005807.465 ops/s
# Warmup Iteration   4: 1009273.664 ops/s
# Warmup Iteration   5: 1002880.082 ops/s
# Warmup Iteration   6: 1005578.787 ops/s
# Warmup Iteration   7: 1005180.153 ops/s
# Warmup Iteration   8: 1009631.326 ops/s
# Warmup Iteration   9: 1011440.351 ops/s
# Warmup Iteration  10: 1005022.177 ops/s
# Warmup Iteration  11: 933497.792 ops/s
# Warmup Iteration  12: 930259.538 ops/s
# Warmup Iteration  13: 1011257.608 ops/s
# Warmup Iteration  14: 1012739.617 ops/s
# Warmup Iteration  15: 1008360.024 ops/s
# Warmup Iteration  16: 1007625.583 ops/s
# Warmup Iteration  17: 1074857.336 ops/s
# Warmup Iteration  18: 1069978.158 ops/s
# Warmup Iteration  19: 1074471.762 ops/s
# Warmup Iteration  20: 1073927.996 ops/s
# Warmup Iteration  21: 1073740.722 ops/s
# Warmup Iteration  22: 1071979.092 ops/s
# Warmup Iteration  23: 1074680.592 ops/s
# Warmup Iteration  24: 1073422.376 ops/s
# Warmup Iteration  25: 1074919.878 ops/s
# Warmup Iteration  26: 1074810.094 ops/s
# Warmup Iteration  27: 1073344.043 ops/s
# Warmup Iteration  28: 1076108.157 ops/s
# Warmup Iteration  29: 1074718.636 ops/s
# Warmup Iteration  30: 1074796.782 ops/s
Iteration   1: 1075473.215 ops/s
Iteration   2: 1074504.032 ops/s
Iteration   3: 1075163.133 ops/s
Iteration   4: 1075262.460 ops/s
Iteration   5: 1075151.421 ops/s
Iteration   6: 1074898.836 ops/s
Iteration   7: 1069802.711 ops/s
Iteration   8: 1070537.331 ops/s
Iteration   9: 1069603.677 ops/s
Iteration  10: 1065195.053 ops/s
Iteration  11: 1068231.074 ops/s
Iteration  12: 1074378.916 ops/s
Iteration  13: 1075882.422 ops/s
Iteration  14: 1074844.579 ops/s
Iteration  15: 1067463.147 ops/s
Iteration  16: 1076036.601 ops/s
Iteration  17: 1073301.925 ops/s
Iteration  18: 1076622.061 ops/s
Iteration  19: 1069806.754 ops/s
Iteration  20: 1073621.521 ops/s
Iteration  21: 1060372.439 ops/s
Iteration  22: 1069277.145 ops/s
Iteration  23: 1072386.399 ops/s
Iteration  24: 1074749.405 ops/s
Iteration  25: 1075932.090 ops/s
Iteration  26: 1075061.544 ops/s
Iteration  27: 1075521.994 ops/s
Iteration  28: 1075245.001 ops/s
Iteration  29: 1071577.460 ops/s
Iteration  30: 1076357.768 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_set":
  1072742.071 ±(99.9%) 2565.122 ops/s [Average]
  (min, avg, max) = (1060372.439, 1072742.071, 1076622.061), stdev = 3839.354
  CI (99.9%): [1070176.948, 1075307.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_set  thrpt   30  1072742.071 ± 2565.122  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735146.230 ops/s
# Warmup Iteration   2: 793129.800 ops/s
# Warmup Iteration   3: 1007348.084 ops/s
# Warmup Iteration   4: 1001091.467 ops/s
# Warmup Iteration   5: 996843.654 ops/s
# Warmup Iteration   6: 1005715.015 ops/s
# Warmup Iteration   7: 1001558.450 ops/s
# Warmup Iteration   8: 999246.311 ops/s
# Warmup Iteration   9: 995662.600 ops/s
# Warmup Iteration  10: 1000212.891 ops/s
# Warmup Iteration  11: 916367.012 ops/s
# Warmup Iteration  12: 939600.801 ops/s
# Warmup Iteration  13: 1006576.856 ops/s
# Warmup Iteration  14: 1005281.831 ops/s
# Warmup Iteration  15: 1002618.140 ops/s
# Warmup Iteration  16: 1002104.385 ops/s
# Warmup Iteration  17: 1062651.306 ops/s
# Warmup Iteration  18: 1066476.811 ops/s
# Warmup Iteration  19: 1068952.738 ops/s
# Warmup Iteration  20: 1066929.548 ops/s
# Warmup Iteration  21: 1064996.801 ops/s
# Warmup Iteration  22: 1066354.286 ops/s
# Warmup Iteration  23: 1067115.501 ops/s
# Warmup Iteration  24: 1066528.922 ops/s
# Warmup Iteration  25: 1064868.342 ops/s
# Warmup Iteration  26: 1070326.594 ops/s
# Warmup Iteration  27: 1070168.135 ops/s
# Warmup Iteration  28: 1069765.310 ops/s
# Warmup Iteration  29: 1069693.621 ops/s
# Warmup Iteration  30: 1069213.613 ops/s
Iteration   1: 1071859.029 ops/s
Iteration   2: 1066088.208 ops/s
Iteration   3: 1062621.271 ops/s
Iteration   4: 1068070.659 ops/s
Iteration   5: 1072553.879 ops/s
Iteration   6: 1071870.895 ops/s
Iteration   7: 1072110.992 ops/s
Iteration   8: 1069169.445 ops/s
Iteration   9: 1070859.259 ops/s
Iteration  10: 1067268.544 ops/s
Iteration  11: 1065435.307 ops/s
Iteration  12: 1068749.250 ops/s
Iteration  13: 1068728.352 ops/s
Iteration  14: 1068034.984 ops/s
Iteration  15: 1062749.408 ops/s
Iteration  16: 1072514.842 ops/s
Iteration  17: 1068609.140 ops/s
Iteration  18: 1068950.258 ops/s
Iteration  19: 1066511.349 ops/s
Iteration  20: 1066271.982 ops/s
Iteration  21: 1065635.736 ops/s
Iteration  22: 1067912.496 ops/s
Iteration  23: 1071576.283 ops/s
Iteration  24: 1067291.449 ops/s
Iteration  25: 1067534.602 ops/s
Iteration  26: 1063936.719 ops/s
Iteration  27: 1072371.172 ops/s
Iteration  28: 1073567.608 ops/s
Iteration  29: 1070887.405 ops/s
Iteration  30: 1063127.783 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sort":
  1068428.944 ±(99.9%) 2092.846 ops/s [Average]
  (min, avg, max) = (1062621.271, 1068428.944, 1073567.608), stdev = 3132.474
  CI (99.9%): [1066336.097, 1070521.790] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sort  thrpt   30  1068428.944 ± 2092.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156136.706 ops/s
# Warmup Iteration   2: 301313.509 ops/s
# Warmup Iteration   3: 363676.048 ops/s
# Warmup Iteration   4: 365061.892 ops/s
# Warmup Iteration   5: 364583.646 ops/s
# Warmup Iteration   6: 302108.836 ops/s
# Warmup Iteration   7: 365409.705 ops/s
# Warmup Iteration   8: 366050.116 ops/s
# Warmup Iteration   9: 365335.858 ops/s
# Warmup Iteration  10: 365297.065 ops/s
# Warmup Iteration  11: 365357.205 ops/s
# Warmup Iteration  12: 365099.708 ops/s
# Warmup Iteration  13: 362354.301 ops/s
# Warmup Iteration  14: 364520.448 ops/s
# Warmup Iteration  15: 364901.293 ops/s
# Warmup Iteration  16: 363609.089 ops/s
# Warmup Iteration  17: 365637.118 ops/s
# Warmup Iteration  18: 366311.321 ops/s
# Warmup Iteration  19: 365112.481 ops/s
# Warmup Iteration  20: 365281.899 ops/s
# Warmup Iteration  21: 366431.507 ops/s
# Warmup Iteration  22: 365539.887 ops/s
# Warmup Iteration  23: 365860.964 ops/s
# Warmup Iteration  24: 364776.766 ops/s
# Warmup Iteration  25: 366358.607 ops/s
# Warmup Iteration  26: 363948.506 ops/s
# Warmup Iteration  27: 366859.580 ops/s
# Warmup Iteration  28: 365584.218 ops/s
# Warmup Iteration  29: 365049.634 ops/s
# Warmup Iteration  30: 366256.415 ops/s
Iteration   1: 365837.022 ops/s
Iteration   2: 365377.015 ops/s
Iteration   3: 365381.531 ops/s
Iteration   4: 366660.212 ops/s
Iteration   5: 365546.282 ops/s
Iteration   6: 365856.666 ops/s
Iteration   7: 365346.744 ops/s
Iteration   8: 366492.345 ops/s
Iteration   9: 365836.407 ops/s
Iteration  10: 364649.342 ops/s
Iteration  11: 366548.041 ops/s
Iteration  12: 362944.808 ops/s
Iteration  13: 365158.261 ops/s
Iteration  14: 365200.931 ops/s
Iteration  15: 365701.152 ops/s
Iteration  16: 366680.395 ops/s
Iteration  17: 366154.105 ops/s
Iteration  18: 366760.870 ops/s
Iteration  19: 365661.788 ops/s
Iteration  20: 365001.290 ops/s
Iteration  21: 366387.321 ops/s
Iteration  22: 365640.369 ops/s
Iteration  23: 366478.324 ops/s
Iteration  24: 365907.480 ops/s
Iteration  25: 366794.630 ops/s
Iteration  26: 365780.194 ops/s
Iteration  27: 365771.652 ops/s
Iteration  28: 365599.519 ops/s
Iteration  29: 363022.959 ops/s
Iteration  30: 366803.560 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_stream":
  365699.374 ±(99.9%) 625.690 ops/s [Average]
  (min, avg, max) = (362944.808, 365699.374, 366803.560), stdev = 936.504
  CI (99.9%): [365073.684, 366325.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_stream  thrpt   30  365699.374 ± 625.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17757425.777 ops/s
# Warmup Iteration   2: 32562080.567 ops/s
# Warmup Iteration   3: 33705586.568 ops/s
# Warmup Iteration   4: 35823490.273 ops/s
# Warmup Iteration   5: 35883431.777 ops/s
# Warmup Iteration   6: 35788442.931 ops/s
# Warmup Iteration   7: 35818705.877 ops/s
# Warmup Iteration   8: 35857730.038 ops/s
# Warmup Iteration   9: 35823638.219 ops/s
# Warmup Iteration  10: 35953661.638 ops/s
# Warmup Iteration  11: 35765080.415 ops/s
# Warmup Iteration  12: 35888594.968 ops/s
# Warmup Iteration  13: 35708486.611 ops/s
# Warmup Iteration  14: 35902843.823 ops/s
# Warmup Iteration  15: 35848023.327 ops/s
# Warmup Iteration  16: 35953807.790 ops/s
# Warmup Iteration  17: 35804919.175 ops/s
# Warmup Iteration  18: 35627042.643 ops/s
# Warmup Iteration  19: 35816559.793 ops/s
# Warmup Iteration  20: 35870999.621 ops/s
# Warmup Iteration  21: 35966973.708 ops/s
# Warmup Iteration  22: 35733196.153 ops/s
# Warmup Iteration  23: 35885177.966 ops/s
# Warmup Iteration  24: 35789858.198 ops/s
# Warmup Iteration  25: 35572521.620 ops/s
# Warmup Iteration  26: 35716848.909 ops/s
# Warmup Iteration  27: 35717312.387 ops/s
# Warmup Iteration  28: 35599986.657 ops/s
# Warmup Iteration  29: 35582222.476 ops/s
# Warmup Iteration  30: 35856982.423 ops/s
Iteration   1: 35797576.275 ops/s
Iteration   2: 35768726.568 ops/s
Iteration   3: 35894059.611 ops/s
Iteration   4: 36016966.474 ops/s
Iteration   5: 35735956.485 ops/s
Iteration   6: 35795590.710 ops/s
Iteration   7: 35562002.013 ops/s
Iteration   8: 35778918.653 ops/s
Iteration   9: 35863781.164 ops/s
Iteration  10: 35727816.956 ops/s
Iteration  11: 35767019.919 ops/s
Iteration  12: 35922259.475 ops/s
Iteration  13: 35956065.337 ops/s
Iteration  14: 35843310.470 ops/s
Iteration  15: 35745442.609 ops/s
Iteration  16: 35891259.915 ops/s
Iteration  17: 35813779.683 ops/s
Iteration  18: 35605620.928 ops/s
Iteration  19: 35642288.129 ops/s
Iteration  20: 35820874.788 ops/s
Iteration  21: 35834597.006 ops/s
Iteration  22: 35819897.396 ops/s
Iteration  23: 35846557.914 ops/s
Iteration  24: 35745276.441 ops/s
Iteration  25: 35852067.112 ops/s
Iteration  26: 35882431.879 ops/s
Iteration  27: 35833151.305 ops/s
Iteration  28: 35883769.659 ops/s
Iteration  29: 35916493.161 ops/s
Iteration  30: 35865307.030 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subList":
  35814295.502 ±(99.9%) 65687.805 ops/s [Average]
  (min, avg, max) = (35562002.013, 35814295.502, 36016966.474), stdev = 98318.422
  CI (99.9%): [35748607.697, 35879983.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_subList  thrpt   30  35814295.502 ± 65687.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 641264.181 ops/s
# Warmup Iteration   2: 664766.174 ops/s
# Warmup Iteration   3: 800495.760 ops/s
# Warmup Iteration   4: 851392.775 ops/s
# Warmup Iteration   5: 850542.307 ops/s
# Warmup Iteration   6: 843809.293 ops/s
# Warmup Iteration   7: 851851.829 ops/s
# Warmup Iteration   8: 851208.589 ops/s
# Warmup Iteration   9: 853599.705 ops/s
# Warmup Iteration  10: 850638.758 ops/s
# Warmup Iteration  11: 851753.032 ops/s
# Warmup Iteration  12: 853844.876 ops/s
# Warmup Iteration  13: 806987.681 ops/s
# Warmup Iteration  14: 760874.079 ops/s
# Warmup Iteration  15: 850599.795 ops/s
# Warmup Iteration  16: 852124.385 ops/s
# Warmup Iteration  17: 898471.174 ops/s
# Warmup Iteration  18: 901520.609 ops/s
# Warmup Iteration  19: 901226.318 ops/s
# Warmup Iteration  20: 902288.819 ops/s
# Warmup Iteration  21: 902128.007 ops/s
# Warmup Iteration  22: 902526.713 ops/s
# Warmup Iteration  23: 902460.133 ops/s
# Warmup Iteration  24: 900990.863 ops/s
# Warmup Iteration  25: 903975.578 ops/s
# Warmup Iteration  26: 903110.444 ops/s
# Warmup Iteration  27: 901892.869 ops/s
# Warmup Iteration  28: 903222.356 ops/s
# Warmup Iteration  29: 904234.139 ops/s
# Warmup Iteration  30: 904871.771 ops/s
Iteration   1: 904145.376 ops/s
Iteration   2: 899333.803 ops/s
Iteration   3: 899626.190 ops/s
Iteration   4: 904255.964 ops/s
Iteration   5: 901168.518 ops/s
Iteration   6: 903331.316 ops/s
Iteration   7: 904670.793 ops/s
Iteration   8: 901925.878 ops/s
Iteration   9: 904735.224 ops/s
Iteration  10: 905374.516 ops/s
Iteration  11: 904652.409 ops/s
Iteration  12: 900012.360 ops/s
Iteration  13: 901010.446 ops/s
Iteration  14: 900126.201 ops/s
Iteration  15: 903265.769 ops/s
Iteration  16: 902438.432 ops/s
Iteration  17: 900943.487 ops/s
Iteration  18: 902847.973 ops/s
Iteration  19: 903279.416 ops/s
Iteration  20: 901558.251 ops/s
Iteration  21: 901965.809 ops/s
Iteration  22: 902930.041 ops/s
Iteration  23: 900155.644 ops/s
Iteration  24: 901729.273 ops/s
Iteration  25: 901479.245 ops/s
Iteration  26: 903962.922 ops/s
Iteration  27: 903220.731 ops/s
Iteration  28: 903038.877 ops/s
Iteration  29: 902295.906 ops/s
Iteration  30: 901532.178 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  902367.098 ±(99.9%) 1103.717 ops/s [Average]
  (min, avg, max) = (899333.803, 902367.098, 905374.516), stdev = 1651.992
  CI (99.9%): [901263.381, 903470.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  902367.098 ± 1103.717  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651360.486 ops/s
# Warmup Iteration   2: 681167.754 ops/s
# Warmup Iteration   3: 808106.877 ops/s
# Warmup Iteration   4: 865604.373 ops/s
# Warmup Iteration   5: 862028.125 ops/s
# Warmup Iteration   6: 856093.430 ops/s
# Warmup Iteration   7: 860405.490 ops/s
# Warmup Iteration   8: 859659.650 ops/s
# Warmup Iteration   9: 862924.456 ops/s
# Warmup Iteration  10: 859842.705 ops/s
# Warmup Iteration  11: 865863.250 ops/s
# Warmup Iteration  12: 856154.639 ops/s
# Warmup Iteration  13: 859934.036 ops/s
# Warmup Iteration  14: 725457.768 ops/s
# Warmup Iteration  15: 862324.158 ops/s
# Warmup Iteration  16: 859619.600 ops/s
# Warmup Iteration  17: 903401.471 ops/s
# Warmup Iteration  18: 905249.789 ops/s
# Warmup Iteration  19: 901877.109 ops/s
# Warmup Iteration  20: 903526.604 ops/s
# Warmup Iteration  21: 905459.357 ops/s
# Warmup Iteration  22: 905089.133 ops/s
# Warmup Iteration  23: 900511.561 ops/s
# Warmup Iteration  24: 903933.728 ops/s
# Warmup Iteration  25: 906601.595 ops/s
# Warmup Iteration  26: 903369.545 ops/s
# Warmup Iteration  27: 904424.008 ops/s
# Warmup Iteration  28: 903797.391 ops/s
# Warmup Iteration  29: 904393.722 ops/s
# Warmup Iteration  30: 906912.666 ops/s
Iteration   1: 903575.253 ops/s
Iteration   2: 904724.365 ops/s
Iteration   3: 905910.468 ops/s
Iteration   4: 906039.547 ops/s
Iteration   5: 903981.903 ops/s
Iteration   6: 905930.043 ops/s
Iteration   7: 906359.765 ops/s
Iteration   8: 908362.127 ops/s
Iteration   9: 905613.817 ops/s
Iteration  10: 907650.837 ops/s
Iteration  11: 905714.725 ops/s
Iteration  12: 903947.872 ops/s
Iteration  13: 903667.833 ops/s
Iteration  14: 900613.097 ops/s
Iteration  15: 905122.474 ops/s
Iteration  16: 906154.044 ops/s
Iteration  17: 904148.004 ops/s
Iteration  18: 903773.762 ops/s
Iteration  19: 903993.477 ops/s
Iteration  20: 905732.924 ops/s
Iteration  21: 907938.866 ops/s
Iteration  22: 905316.058 ops/s
Iteration  23: 904035.757 ops/s
Iteration  24: 908895.682 ops/s
Iteration  25: 907351.883 ops/s
Iteration  26: 906765.233 ops/s
Iteration  27: 906744.768 ops/s
Iteration  28: 900069.645 ops/s
Iteration  29: 907615.500 ops/s
Iteration  30: 904494.155 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListFromNegative":
  905341.463 ±(99.9%) 1351.570 ops/s [Average]
  (min, avg, max) = (900069.645, 905341.463, 908895.682), stdev = 2022.966
  CI (99.9%): [903989.893, 906693.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  905341.463 ± 1351.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 644525.764 ops/s
# Warmup Iteration   2: 669113.791 ops/s
# Warmup Iteration   3: 801019.407 ops/s
# Warmup Iteration   4: 867074.888 ops/s
# Warmup Iteration   5: 866116.130 ops/s
# Warmup Iteration   6: 860877.317 ops/s
# Warmup Iteration   7: 868123.158 ops/s
# Warmup Iteration   8: 868381.770 ops/s
# Warmup Iteration   9: 868096.211 ops/s
# Warmup Iteration  10: 864886.301 ops/s
# Warmup Iteration  11: 866998.431 ops/s
# Warmup Iteration  12: 864144.349 ops/s
# Warmup Iteration  13: 864124.836 ops/s
# Warmup Iteration  14: 724819.091 ops/s
# Warmup Iteration  15: 866613.753 ops/s
# Warmup Iteration  16: 865743.641 ops/s
# Warmup Iteration  17: 913028.418 ops/s
# Warmup Iteration  18: 914081.014 ops/s
# Warmup Iteration  19: 914177.624 ops/s
# Warmup Iteration  20: 913605.785 ops/s
# Warmup Iteration  21: 910949.616 ops/s
# Warmup Iteration  22: 908276.157 ops/s
# Warmup Iteration  23: 911070.559 ops/s
# Warmup Iteration  24: 913965.686 ops/s
# Warmup Iteration  25: 913737.029 ops/s
# Warmup Iteration  26: 912960.936 ops/s
# Warmup Iteration  27: 913647.722 ops/s
# Warmup Iteration  28: 914929.626 ops/s
# Warmup Iteration  29: 913141.158 ops/s
# Warmup Iteration  30: 913561.789 ops/s
Iteration   1: 913117.881 ops/s
Iteration   2: 915175.871 ops/s
Iteration   3: 912210.413 ops/s
Iteration   4: 909183.810 ops/s
Iteration   5: 913252.742 ops/s
Iteration   6: 912793.803 ops/s
Iteration   7: 913505.160 ops/s
Iteration   8: 908814.694 ops/s
Iteration   9: 912775.721 ops/s
Iteration  10: 913063.493 ops/s
Iteration  11: 916194.759 ops/s
Iteration  12: 914070.437 ops/s
Iteration  13: 914803.122 ops/s
Iteration  14: 906166.131 ops/s
Iteration  15: 913623.255 ops/s
Iteration  16: 915130.369 ops/s
Iteration  17: 913624.301 ops/s
Iteration  18: 914065.691 ops/s
Iteration  19: 913244.111 ops/s
Iteration  20: 912103.085 ops/s
Iteration  21: 908151.927 ops/s
Iteration  22: 913470.191 ops/s
Iteration  23: 912664.525 ops/s
Iteration  24: 915567.713 ops/s
Iteration  25: 913605.554 ops/s
Iteration  26: 909030.261 ops/s
Iteration  27: 912274.271 ops/s
Iteration  28: 912633.587 ops/s
Iteration  29: 907877.618 ops/s
Iteration  30: 912281.803 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  912482.543 ±(99.9%) 1629.128 ops/s [Average]
  (min, avg, max) = (906166.131, 912482.543, 916194.759), stdev = 2438.402
  CI (99.9%): [910853.416, 914111.671] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  912482.543 ± 1629.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 988436.110 ops/s
# Warmup Iteration   2: 1780902.279 ops/s
# Warmup Iteration   3: 2025171.583 ops/s
# Warmup Iteration   4: 2027208.480 ops/s
# Warmup Iteration   5: 2029495.381 ops/s
# Warmup Iteration   6: 1679177.720 ops/s
# Warmup Iteration   7: 2036298.949 ops/s
# Warmup Iteration   8: 2034353.591 ops/s
# Warmup Iteration   9: 2037126.277 ops/s
# Warmup Iteration  10: 2034486.118 ops/s
# Warmup Iteration  11: 2037562.039 ops/s
# Warmup Iteration  12: 2027294.670 ops/s
# Warmup Iteration  13: 2019982.180 ops/s
# Warmup Iteration  14: 2032010.301 ops/s
# Warmup Iteration  15: 2036864.171 ops/s
# Warmup Iteration  16: 2031082.914 ops/s
# Warmup Iteration  17: 2029979.858 ops/s
# Warmup Iteration  18: 2029939.512 ops/s
# Warmup Iteration  19: 2019156.852 ops/s
# Warmup Iteration  20: 2031375.880 ops/s
# Warmup Iteration  21: 2030921.983 ops/s
# Warmup Iteration  22: 2038496.859 ops/s
# Warmup Iteration  23: 2031848.050 ops/s
# Warmup Iteration  24: 2032368.764 ops/s
# Warmup Iteration  25: 2034954.623 ops/s
# Warmup Iteration  26: 2030549.002 ops/s
# Warmup Iteration  27: 2037879.715 ops/s
# Warmup Iteration  28: 2035940.545 ops/s
# Warmup Iteration  29: 2030758.445 ops/s
# Warmup Iteration  30: 2032376.573 ops/s
Iteration   1: 2034578.926 ops/s
Iteration   2: 2027380.975 ops/s
Iteration   3: 2037121.805 ops/s
Iteration   4: 2033555.769 ops/s
Iteration   5: 2034649.385 ops/s
Iteration   6: 2038012.290 ops/s
Iteration   7: 2035887.676 ops/s
Iteration   8: 2031905.726 ops/s
Iteration   9: 2035827.956 ops/s
Iteration  10: 2038896.597 ops/s
Iteration  11: 2036170.628 ops/s
Iteration  12: 2034128.426 ops/s
Iteration  13: 2040001.770 ops/s
Iteration  14: 2032537.838 ops/s
Iteration  15: 2037563.638 ops/s
Iteration  16: 2035514.722 ops/s
Iteration  17: 2038457.642 ops/s
Iteration  18: 2038728.429 ops/s
Iteration  19: 2037400.338 ops/s
Iteration  20: 2039579.795 ops/s
Iteration  21: 2035990.963 ops/s
Iteration  22: 2032490.749 ops/s
Iteration  23: 2027551.045 ops/s
Iteration  24: 2039200.037 ops/s
Iteration  25: 2026686.218 ops/s
Iteration  26: 2035363.138 ops/s
Iteration  27: 2031896.372 ops/s
Iteration  28: 2025126.307 ops/s
Iteration  29: 2040419.027 ops/s
Iteration  30: 2016923.784 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDouble":
  2034318.266 ±(99.9%) 3491.146 ops/s [Average]
  (min, avg, max) = (2016923.784, 2034318.266, 2040419.027), stdev = 5225.383
  CI (99.9%): [2030827.120, 2037809.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2034318.266 ± 3491.146  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.131 ops/s
# Warmup Iteration   2: 71.281 ops/s
# Warmup Iteration   3: 99.482 ops/s
# Warmup Iteration   4: 99.877 ops/s
# Warmup Iteration   5: 98.013 ops/s
# Warmup Iteration   6: 100.012 ops/s
# Warmup Iteration   7: 98.626 ops/s
# Warmup Iteration   8: 100.241 ops/s
# Warmup Iteration   9: 91.721 ops/s
# Warmup Iteration  10: 89.446 ops/s
# Warmup Iteration  11: 100.173 ops/s
# Warmup Iteration  12: 100.306 ops/s
# Warmup Iteration  13: 100.779 ops/s
# Warmup Iteration  14: 100.939 ops/s
# Warmup Iteration  15: 100.247 ops/s
# Warmup Iteration  16: 98.512 ops/s
# Warmup Iteration  17: 100.777 ops/s
# Warmup Iteration  18: 100.734 ops/s
# Warmup Iteration  19: 98.523 ops/s
# Warmup Iteration  20: 102.807 ops/s
# Warmup Iteration  21: 99.873 ops/s
# Warmup Iteration  22: 98.846 ops/s
# Warmup Iteration  23: 100.318 ops/s
# Warmup Iteration  24: 99.093 ops/s
# Warmup Iteration  25: 100.358 ops/s
# Warmup Iteration  26: 100.793 ops/s
# Warmup Iteration  27: 97.385 ops/s
# Warmup Iteration  28: 99.356 ops/s
# Warmup Iteration  29: 98.729 ops/s
# Warmup Iteration  30: 99.306 ops/s
Iteration   1: 100.721 ops/s
Iteration   2: 99.123 ops/s
Iteration   3: 96.775 ops/s
Iteration   4: 97.439 ops/s
Iteration   5: 96.957 ops/s
Iteration   6: 95.720 ops/s
Iteration   7: 100.209 ops/s
Iteration   8: 100.038 ops/s
Iteration   9: 95.906 ops/s
Iteration  10: 98.575 ops/s
Iteration  11: 100.421 ops/s
Iteration  12: 96.498 ops/s
Iteration  13: 98.701 ops/s
Iteration  14: 100.642 ops/s
Iteration  15: 97.713 ops/s
Iteration  16: 98.884 ops/s
Iteration  17: 96.213 ops/s
Iteration  18: 95.965 ops/s
Iteration  19: 97.148 ops/s
Iteration  20: 99.326 ops/s
Iteration  21: 97.765 ops/s
Iteration  22: 95.451 ops/s
Iteration  23: 98.537 ops/s
Iteration  24: 99.707 ops/s
Iteration  25: 98.751 ops/s
Iteration  26: 100.874 ops/s
Iteration  27: 97.996 ops/s
Iteration  28: 95.236 ops/s
Iteration  29: 98.126 ops/s
Iteration  30: 99.470 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  98.163 ±(99.9%) 1.140 ops/s [Average]
  (min, avg, max) = (95.236, 98.163, 100.874), stdev = 1.706
  CI (99.9%): [97.023, 99.303] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt   Score   Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  98.163 ± 1.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1002027.048 ops/s
# Warmup Iteration   2: 1801803.368 ops/s
# Warmup Iteration   3: 2074183.822 ops/s
# Warmup Iteration   4: 2083147.568 ops/s
# Warmup Iteration   5: 2080845.804 ops/s
# Warmup Iteration   6: 1711198.094 ops/s
# Warmup Iteration   7: 2084340.891 ops/s
# Warmup Iteration   8: 2081173.401 ops/s
# Warmup Iteration   9: 2087982.707 ops/s
# Warmup Iteration  10: 2083480.053 ops/s
# Warmup Iteration  11: 2084664.112 ops/s
# Warmup Iteration  12: 2084798.456 ops/s
# Warmup Iteration  13: 2072694.246 ops/s
# Warmup Iteration  14: 2079955.027 ops/s
# Warmup Iteration  15: 2082275.022 ops/s
# Warmup Iteration  16: 2084343.537 ops/s
# Warmup Iteration  17: 2086526.523 ops/s
# Warmup Iteration  18: 2084577.782 ops/s
# Warmup Iteration  19: 2085158.902 ops/s
# Warmup Iteration  20: 2082042.549 ops/s
# Warmup Iteration  21: 2086256.807 ops/s
# Warmup Iteration  22: 2080194.073 ops/s
# Warmup Iteration  23: 2085167.088 ops/s
# Warmup Iteration  24: 2087883.430 ops/s
# Warmup Iteration  25: 2081556.509 ops/s
# Warmup Iteration  26: 2081149.457 ops/s
# Warmup Iteration  27: 2086798.896 ops/s
# Warmup Iteration  28: 2082729.433 ops/s
# Warmup Iteration  29: 2083385.198 ops/s
# Warmup Iteration  30: 2085611.277 ops/s
Iteration   1: 2083544.248 ops/s
Iteration   2: 2065181.068 ops/s
Iteration   3: 2061700.215 ops/s
Iteration   4: 2054142.205 ops/s
Iteration   5: 2073360.113 ops/s
Iteration   6: 2081661.227 ops/s
Iteration   7: 2083132.065 ops/s
Iteration   8: 2087986.091 ops/s
Iteration   9: 2083549.403 ops/s
Iteration  10: 2085120.034 ops/s
Iteration  11: 2083601.579 ops/s
Iteration  12: 2084735.458 ops/s
Iteration  13: 2085482.180 ops/s
Iteration  14: 2083636.085 ops/s
Iteration  15: 2086165.150 ops/s
Iteration  16: 2084262.415 ops/s
Iteration  17: 2087069.082 ops/s
Iteration  18: 2082913.812 ops/s
Iteration  19: 2062549.912 ops/s
Iteration  20: 2067025.345 ops/s
Iteration  21: 2068962.360 ops/s
Iteration  22: 2086651.259 ops/s
Iteration  23: 2083978.622 ops/s
Iteration  24: 2083501.154 ops/s
Iteration  25: 2085267.176 ops/s
Iteration  26: 2081878.034 ops/s
Iteration  27: 2083588.438 ops/s
Iteration  28: 2083771.244 ops/s
Iteration  29: 2082921.986 ops/s
Iteration  30: 2084363.590 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloat":
  2079723.385 ±(99.9%) 6000.056 ops/s [Average]
  (min, avg, max) = (2054142.205, 2079723.385, 2087986.091), stdev = 8980.603
  CI (99.9%): [2073723.329, 2085723.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2079723.385 ± 6000.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58.932 ops/s
# Warmup Iteration   2: 71.222 ops/s
# Warmup Iteration   3: 97.362 ops/s
# Warmup Iteration   4: 99.591 ops/s
# Warmup Iteration   5: 97.454 ops/s
# Warmup Iteration   6: 96.506 ops/s
# Warmup Iteration   7: 96.991 ops/s
# Warmup Iteration   8: 98.074 ops/s
# Warmup Iteration   9: 95.055 ops/s
# Warmup Iteration  10: 83.840 ops/s
# Warmup Iteration  11: 99.258 ops/s
# Warmup Iteration  12: 100.931 ops/s
# Warmup Iteration  13: 99.858 ops/s
# Warmup Iteration  14: 100.878 ops/s
# Warmup Iteration  15: 98.251 ops/s
# Warmup Iteration  16: 97.361 ops/s
# Warmup Iteration  17: 98.928 ops/s
# Warmup Iteration  18: 99.175 ops/s
# Warmup Iteration  19: 99.941 ops/s
# Warmup Iteration  20: 99.354 ops/s
# Warmup Iteration  21: 98.135 ops/s
# Warmup Iteration  22: 97.849 ops/s
# Warmup Iteration  23: 97.220 ops/s
# Warmup Iteration  24: 95.954 ops/s
# Warmup Iteration  25: 99.344 ops/s
# Warmup Iteration  26: 97.335 ops/s
# Warmup Iteration  27: 98.544 ops/s
# Warmup Iteration  28: 99.278 ops/s
# Warmup Iteration  29: 96.044 ops/s
# Warmup Iteration  30: 94.769 ops/s
Iteration   1: 96.162 ops/s
Iteration   2: 99.314 ops/s
Iteration   3: 97.099 ops/s
Iteration   4: 94.720 ops/s
Iteration   5: 96.121 ops/s
Iteration   6: 96.363 ops/s
Iteration   7: 94.913 ops/s
Iteration   8: 97.215 ops/s
Iteration   9: 99.736 ops/s
Iteration  10: 96.900 ops/s
Iteration  11: 97.534 ops/s
Iteration  12: 97.965 ops/s
Iteration  13: 96.523 ops/s
Iteration  14: 98.722 ops/s
Iteration  15: 97.946 ops/s
Iteration  16: 95.599 ops/s
Iteration  17: 97.614 ops/s
Iteration  18: 98.466 ops/s
Iteration  19: 94.736 ops/s
Iteration  20: 97.078 ops/s
Iteration  21: 96.679 ops/s
Iteration  22: 95.955 ops/s
Iteration  23: 96.493 ops/s
Iteration  24: 99.216 ops/s
Iteration  25: 98.200 ops/s
Iteration  26: 95.821 ops/s
Iteration  27: 98.328 ops/s
Iteration  28: 98.904 ops/s
Iteration  29: 96.409 ops/s
Iteration  30: 99.250 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  97.199 ±(99.9%) 0.945 ops/s [Average]
  (min, avg, max) = (94.720, 97.199, 99.736), stdev = 1.415
  CI (99.9%): [96.254, 98.145] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  97.199 ± 0.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1358374.222 ops/s
# Warmup Iteration   2: 2652407.495 ops/s
# Warmup Iteration   3: 2885971.407 ops/s
# Warmup Iteration   4: 2902276.621 ops/s
# Warmup Iteration   5: 2524729.980 ops/s
# Warmup Iteration   6: 2801608.189 ops/s
# Warmup Iteration   7: 2912720.604 ops/s
# Warmup Iteration   8: 2906521.376 ops/s
# Warmup Iteration   9: 2902828.939 ops/s
# Warmup Iteration  10: 2912975.970 ops/s
# Warmup Iteration  11: 2917040.292 ops/s
# Warmup Iteration  12: 2895723.027 ops/s
# Warmup Iteration  13: 2909148.417 ops/s
# Warmup Iteration  14: 2909769.668 ops/s
# Warmup Iteration  15: 2913240.907 ops/s
# Warmup Iteration  16: 2911233.121 ops/s
# Warmup Iteration  17: 2923053.879 ops/s
# Warmup Iteration  18: 2918892.052 ops/s
# Warmup Iteration  19: 2910223.748 ops/s
# Warmup Iteration  20: 2920923.211 ops/s
# Warmup Iteration  21: 2916252.219 ops/s
# Warmup Iteration  22: 2911698.679 ops/s
# Warmup Iteration  23: 2922362.949 ops/s
# Warmup Iteration  24: 2911200.483 ops/s
# Warmup Iteration  25: 2920124.922 ops/s
# Warmup Iteration  26: 2923829.696 ops/s
# Warmup Iteration  27: 2924658.808 ops/s
# Warmup Iteration  28: 2923010.666 ops/s
# Warmup Iteration  29: 2923815.367 ops/s
# Warmup Iteration  30: 2923471.327 ops/s
Iteration   1: 2921481.219 ops/s
Iteration   2: 2924883.519 ops/s
Iteration   3: 2917622.248 ops/s
Iteration   4: 2922423.098 ops/s
Iteration   5: 2925900.496 ops/s
Iteration   6: 2914145.142 ops/s
Iteration   7: 2912529.559 ops/s
Iteration   8: 2929638.479 ops/s
Iteration   9: 2920913.177 ops/s
Iteration  10: 2923161.329 ops/s
Iteration  11: 2926720.250 ops/s
Iteration  12: 2921494.278 ops/s
Iteration  13: 2918869.088 ops/s
Iteration  14: 2929471.255 ops/s
Iteration  15: 2917755.363 ops/s
Iteration  16: 2925684.561 ops/s
Iteration  17: 2915103.579 ops/s
Iteration  18: 2923398.262 ops/s
Iteration  19: 2926176.726 ops/s
Iteration  20: 2911784.357 ops/s
Iteration  21: 2914750.915 ops/s
Iteration  22: 2912449.805 ops/s
Iteration  23: 2902362.673 ops/s
Iteration  24: 2905511.411 ops/s
Iteration  25: 2909158.338 ops/s
Iteration  26: 2910909.525 ops/s
Iteration  27: 2914009.943 ops/s
Iteration  28: 2908557.396 ops/s
Iteration  29: 2913412.230 ops/s
Iteration  30: 2928327.629 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByInt":
  2918286.862 ±(99.9%) 4932.050 ops/s [Average]
  (min, avg, max) = (2902362.673, 2918286.862, 2929638.479), stdev = 7382.060
  CI (99.9%): [2913354.812, 2923218.911] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2918286.862 ± 4932.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1350542.264 ops/s
# Warmup Iteration   2: 2639152.134 ops/s
# Warmup Iteration   3: 2919083.945 ops/s
# Warmup Iteration   4: 2910432.096 ops/s
# Warmup Iteration   5: 2514056.631 ops/s
# Warmup Iteration   6: 2835172.185 ops/s
# Warmup Iteration   7: 2936782.563 ops/s
# Warmup Iteration   8: 2935706.614 ops/s
# Warmup Iteration   9: 2939250.478 ops/s
# Warmup Iteration  10: 2945049.330 ops/s
# Warmup Iteration  11: 2939380.807 ops/s
# Warmup Iteration  12: 2940220.134 ops/s
# Warmup Iteration  13: 2936143.208 ops/s
# Warmup Iteration  14: 2938445.391 ops/s
# Warmup Iteration  15: 2932040.703 ops/s
# Warmup Iteration  16: 2932445.771 ops/s
# Warmup Iteration  17: 2937657.037 ops/s
# Warmup Iteration  18: 2935547.174 ops/s
# Warmup Iteration  19: 2931343.914 ops/s
# Warmup Iteration  20: 2935901.265 ops/s
# Warmup Iteration  21: 2935360.721 ops/s
# Warmup Iteration  22: 2932539.447 ops/s
# Warmup Iteration  23: 2931433.120 ops/s
# Warmup Iteration  24: 2924460.832 ops/s
# Warmup Iteration  25: 2934139.391 ops/s
# Warmup Iteration  26: 2938277.679 ops/s
# Warmup Iteration  27: 2927395.597 ops/s
# Warmup Iteration  28: 2928412.245 ops/s
# Warmup Iteration  29: 2940258.391 ops/s
# Warmup Iteration  30: 2935901.811 ops/s
Iteration   1: 2927533.663 ops/s
Iteration   2: 2918278.275 ops/s
Iteration   3: 2935707.118 ops/s
Iteration   4: 2918537.824 ops/s
Iteration   5: 2933546.637 ops/s
Iteration   6: 2945229.905 ops/s
Iteration   7: 2934544.155 ops/s
Iteration   8: 2937091.473 ops/s
Iteration   9: 2940218.667 ops/s
Iteration  10: 2944598.804 ops/s
Iteration  11: 2935254.595 ops/s
Iteration  12: 2941900.409 ops/s
Iteration  13: 2935186.134 ops/s
Iteration  14: 2947108.762 ops/s
Iteration  15: 2936600.729 ops/s
Iteration  16: 2926151.505 ops/s
Iteration  17: 2903677.903 ops/s
Iteration  18: 2927243.960 ops/s
Iteration  19: 2932769.653 ops/s
Iteration  20: 2938878.199 ops/s
Iteration  21: 2930263.424 ops/s
Iteration  22: 2926806.868 ops/s
Iteration  23: 2934401.438 ops/s
Iteration  24: 2935826.036 ops/s
Iteration  25: 2935213.268 ops/s
Iteration  26: 2935547.952 ops/s
Iteration  27: 2921411.067 ops/s
Iteration  28: 2925804.268 ops/s
Iteration  29: 2932422.008 ops/s
Iteration  30: 2934201.058 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumByLong":
  2932398.525 ±(99.9%) 5999.493 ops/s [Average]
  (min, avg, max) = (2903677.903, 2932398.525, 2947108.762), stdev = 8979.759
  CI (99.9%): [2926399.032, 2938398.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2932398.525 ± 5999.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19389696.593 ops/s
# Warmup Iteration   2: 20400176.304 ops/s
# Warmup Iteration   3: 20539501.315 ops/s
# Warmup Iteration   4: 23232067.943 ops/s
# Warmup Iteration   5: 24310684.031 ops/s
# Warmup Iteration   6: 24121758.087 ops/s
# Warmup Iteration   7: 24296356.307 ops/s
# Warmup Iteration   8: 24283642.608 ops/s
# Warmup Iteration   9: 24166525.993 ops/s
# Warmup Iteration  10: 24295799.580 ops/s
# Warmup Iteration  11: 24251465.042 ops/s
# Warmup Iteration  12: 24296198.101 ops/s
# Warmup Iteration  13: 24290917.131 ops/s
# Warmup Iteration  14: 24268087.661 ops/s
# Warmup Iteration  15: 23807162.560 ops/s
# Warmup Iteration  16: 23676072.543 ops/s
# Warmup Iteration  17: 24210271.699 ops/s
# Warmup Iteration  18: 24319460.228 ops/s
# Warmup Iteration  19: 24313817.163 ops/s
# Warmup Iteration  20: 23035799.265 ops/s
# Warmup Iteration  21: 21539566.386 ops/s
# Warmup Iteration  22: 24237199.388 ops/s
# Warmup Iteration  23: 24214483.874 ops/s
# Warmup Iteration  24: 24332852.990 ops/s
# Warmup Iteration  25: 24291421.968 ops/s
# Warmup Iteration  26: 24310506.290 ops/s
# Warmup Iteration  27: 24310640.826 ops/s
# Warmup Iteration  28: 24327791.768 ops/s
# Warmup Iteration  29: 24299696.997 ops/s
# Warmup Iteration  30: 24314569.484 ops/s
Iteration   1: 24330153.016 ops/s
Iteration   2: 24296740.312 ops/s
Iteration   3: 24324112.173 ops/s
Iteration   4: 24157313.841 ops/s
Iteration   5: 24316678.248 ops/s
Iteration   6: 24263525.841 ops/s
Iteration   7: 24206733.587 ops/s
Iteration   8: 24288902.589 ops/s
Iteration   9: 24326036.646 ops/s
Iteration  10: 24239372.453 ops/s
Iteration  11: 24237182.886 ops/s
Iteration  12: 24266098.314 ops/s
Iteration  13: 24285674.237 ops/s
Iteration  14: 24314526.074 ops/s
Iteration  15: 24334499.477 ops/s
Iteration  16: 24266012.831 ops/s
Iteration  17: 24321871.576 ops/s
Iteration  18: 24266061.732 ops/s
Iteration  19: 24282940.846 ops/s
Iteration  20: 24330512.882 ops/s
Iteration  21: 24317062.645 ops/s
Iteration  22: 24313736.804 ops/s
Iteration  23: 24147987.849 ops/s
Iteration  24: 24133091.436 ops/s
Iteration  25: 24168973.804 ops/s
Iteration  26: 24039094.282 ops/s
Iteration  27: 24166933.926 ops/s
Iteration  28: 24179511.903 ops/s
Iteration  29: 24301788.557 ops/s
Iteration  30: 24041941.304 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumDouble":
  24248835.736 ±(99.9%) 56080.772 ops/s [Average]
  (min, avg, max) = (24039094.282, 24248835.736, 24334499.477), stdev = 83939.066
  CI (99.9%): [24192754.964, 24304916.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  24248835.736 ± 56080.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12277728.374 ops/s
# Warmup Iteration   2: 12834277.600 ops/s
# Warmup Iteration   3: 12910935.481 ops/s
# Warmup Iteration   4: 12931225.301 ops/s
# Warmup Iteration   5: 12919209.129 ops/s
# Warmup Iteration   6: 14207423.331 ops/s
# Warmup Iteration   7: 14321563.574 ops/s
# Warmup Iteration   8: 14313189.519 ops/s
# Warmup Iteration   9: 14327111.914 ops/s
# Warmup Iteration  10: 14304537.699 ops/s
# Warmup Iteration  11: 14332625.733 ops/s
# Warmup Iteration  12: 14305264.263 ops/s
# Warmup Iteration  13: 14323181.065 ops/s
# Warmup Iteration  14: 14295061.322 ops/s
# Warmup Iteration  15: 14119129.811 ops/s
# Warmup Iteration  16: 14279536.812 ops/s
# Warmup Iteration  17: 14290601.375 ops/s
# Warmup Iteration  18: 14280287.093 ops/s
# Warmup Iteration  19: 14284758.037 ops/s
# Warmup Iteration  20: 14318648.021 ops/s
# Warmup Iteration  21: 14331710.698 ops/s
# Warmup Iteration  22: 14295556.594 ops/s
# Warmup Iteration  23: 14304787.335 ops/s
# Warmup Iteration  24: 14295673.767 ops/s
# Warmup Iteration  25: 14272360.581 ops/s
# Warmup Iteration  26: 14330122.051 ops/s
# Warmup Iteration  27: 14313636.883 ops/s
# Warmup Iteration  28: 14339413.884 ops/s
# Warmup Iteration  29: 14287709.605 ops/s
# Warmup Iteration  30: 14338004.947 ops/s
Iteration   1: 14284415.507 ops/s
Iteration   2: 14254892.120 ops/s
Iteration   3: 14245135.207 ops/s
Iteration   4: 14330541.764 ops/s
Iteration   5: 14334380.759 ops/s
Iteration   6: 13980443.364 ops/s
Iteration   7: 13016799.120 ops/s
Iteration   8: 12944685.453 ops/s
Iteration   9: 12962337.830 ops/s
Iteration  10: 14128118.231 ops/s
Iteration  11: 14362231.274 ops/s
Iteration  12: 14328768.802 ops/s
Iteration  13: 14236952.447 ops/s
Iteration  14: 14279461.840 ops/s
Iteration  15: 14326656.246 ops/s
Iteration  16: 14275730.975 ops/s
Iteration  17: 14341461.470 ops/s
Iteration  18: 14338378.282 ops/s
Iteration  19: 14341691.663 ops/s
Iteration  20: 14323536.108 ops/s
Iteration  21: 14330709.357 ops/s
Iteration  22: 14268661.897 ops/s
Iteration  23: 14328464.229 ops/s
Iteration  24: 14261868.786 ops/s
Iteration  25: 14327823.304 ops/s
Iteration  26: 14331658.434 ops/s
Iteration  27: 14330451.725 ops/s
Iteration  28: 14338708.013 ops/s
Iteration  29: 14284453.733 ops/s
Iteration  30: 14289182.522 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumFloat":
  14157620.015 ±(99.9%) 272615.399 ops/s [Average]
  (min, avg, max) = (12944685.453, 14157620.015, 14362231.274), stdev = 408037.927
  CI (99.9%): [13885004.616, 14430235.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  14157620.015 ± 272615.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25947604.266 ops/s
# Warmup Iteration   2: 27331664.766 ops/s
# Warmup Iteration   3: 30879578.246 ops/s
# Warmup Iteration   4: 33984287.672 ops/s
# Warmup Iteration   5: 33901852.419 ops/s
# Warmup Iteration   6: 33981772.700 ops/s
# Warmup Iteration   7: 33765881.469 ops/s
# Warmup Iteration   8: 34024346.150 ops/s
# Warmup Iteration   9: 33950321.385 ops/s
# Warmup Iteration  10: 33896738.356 ops/s
# Warmup Iteration  11: 33847457.876 ops/s
# Warmup Iteration  12: 33931855.320 ops/s
# Warmup Iteration  13: 33978245.596 ops/s
# Warmup Iteration  14: 34035107.264 ops/s
# Warmup Iteration  15: 28404134.910 ops/s
# Warmup Iteration  16: 33943323.819 ops/s
# Warmup Iteration  17: 33978565.980 ops/s
# Warmup Iteration  18: 34013794.489 ops/s
# Warmup Iteration  19: 34043505.070 ops/s
# Warmup Iteration  20: 33975735.631 ops/s
# Warmup Iteration  21: 33978089.557 ops/s
# Warmup Iteration  22: 33945661.710 ops/s
# Warmup Iteration  23: 34010880.246 ops/s
# Warmup Iteration  24: 34046626.038 ops/s
# Warmup Iteration  25: 33955390.320 ops/s
# Warmup Iteration  26: 33958032.904 ops/s
# Warmup Iteration  27: 34020280.961 ops/s
# Warmup Iteration  28: 33973050.249 ops/s
# Warmup Iteration  29: 33900016.828 ops/s
# Warmup Iteration  30: 34008520.704 ops/s
Iteration   1: 33943022.227 ops/s
Iteration   2: 33822592.220 ops/s
Iteration   3: 34019641.168 ops/s
Iteration   4: 33924071.005 ops/s
Iteration   5: 34028391.301 ops/s
Iteration   6: 33994436.994 ops/s
Iteration   7: 33898722.146 ops/s
Iteration   8: 34064987.585 ops/s
Iteration   9: 33912012.805 ops/s
Iteration  10: 34064963.121 ops/s
Iteration  11: 34175060.222 ops/s
Iteration  12: 33977759.419 ops/s
Iteration  13: 33989579.181 ops/s
Iteration  14: 33968840.630 ops/s
Iteration  15: 34075121.452 ops/s
Iteration  16: 34038482.929 ops/s
Iteration  17: 34005030.522 ops/s
Iteration  18: 33950049.401 ops/s
Iteration  19: 34000055.904 ops/s
Iteration  20: 34035669.313 ops/s
Iteration  21: 34021696.196 ops/s
Iteration  22: 34002680.460 ops/s
Iteration  23: 33904510.724 ops/s
Iteration  24: 34012202.339 ops/s
Iteration  25: 34012061.209 ops/s
Iteration  26: 34033374.068 ops/s
Iteration  27: 34042276.286 ops/s
Iteration  28: 33773068.687 ops/s
Iteration  29: 34049615.497 ops/s
Iteration  30: 34042631.808 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumInteger":
  33992753.561 ±(99.9%) 52384.548 ops/s [Average]
  (min, avg, max) = (33773068.687, 33992753.561, 34175060.222), stdev = 78406.732
  CI (99.9%): [33940369.012, 34045138.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  33992753.561 ± 52384.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9433248.288 ops/s
# Warmup Iteration   2: 33982990.485 ops/s
# Warmup Iteration   3: 33993152.729 ops/s
# Warmup Iteration   4: 34009339.712 ops/s
# Warmup Iteration   5: 33799650.135 ops/s
# Warmup Iteration   6: 33995725.930 ops/s
# Warmup Iteration   7: 34005487.278 ops/s
# Warmup Iteration   8: 34040172.062 ops/s
# Warmup Iteration   9: 33876456.084 ops/s
# Warmup Iteration  10: 34039918.803 ops/s
# Warmup Iteration  11: 33910433.700 ops/s
# Warmup Iteration  12: 34007522.278 ops/s
# Warmup Iteration  13: 30135302.181 ops/s
# Warmup Iteration  14: 31871946.583 ops/s
# Warmup Iteration  15: 33803405.315 ops/s
# Warmup Iteration  16: 34004159.181 ops/s
# Warmup Iteration  17: 34020023.658 ops/s
# Warmup Iteration  18: 34006258.456 ops/s
# Warmup Iteration  19: 34017364.310 ops/s
# Warmup Iteration  20: 34048096.795 ops/s
# Warmup Iteration  21: 34053375.556 ops/s
# Warmup Iteration  22: 33985977.300 ops/s
# Warmup Iteration  23: 34041666.017 ops/s
# Warmup Iteration  24: 34035881.030 ops/s
# Warmup Iteration  25: 33959341.609 ops/s
# Warmup Iteration  26: 34035943.229 ops/s
# Warmup Iteration  27: 34011118.194 ops/s
# Warmup Iteration  28: 34025794.151 ops/s
# Warmup Iteration  29: 33921530.926 ops/s
# Warmup Iteration  30: 33992730.215 ops/s
Iteration   1: 34004613.642 ops/s
Iteration   2: 34050057.585 ops/s
Iteration   3: 34067629.536 ops/s
Iteration   4: 33995025.460 ops/s
Iteration   5: 34005669.148 ops/s
Iteration   6: 34011937.607 ops/s
Iteration   7: 34062294.283 ops/s
Iteration   8: 34016505.937 ops/s
Iteration   9: 33970289.012 ops/s
Iteration  10: 34036851.798 ops/s
Iteration  11: 34045612.020 ops/s
Iteration  12: 34027832.178 ops/s
Iteration  13: 33905631.414 ops/s
Iteration  14: 33984998.081 ops/s
Iteration  15: 34069232.452 ops/s
Iteration  16: 33976674.335 ops/s
Iteration  17: 33965346.815 ops/s
Iteration  18: 34040094.181 ops/s
Iteration  19: 33929079.275 ops/s
Iteration  20: 34046990.114 ops/s
Iteration  21: 34053135.015 ops/s
Iteration  22: 34052408.867 ops/s
Iteration  23: 34059609.621 ops/s
Iteration  24: 34017040.678 ops/s
Iteration  25: 33944924.521 ops/s
Iteration  26: 33880329.824 ops/s
Iteration  27: 33790941.744 ops/s
Iteration  28: 33816723.686 ops/s
Iteration  29: 34054599.771 ops/s
Iteration  30: 33959786.863 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_sumLong":
  33994728.849 ±(99.9%) 47872.423 ops/s [Average]
  (min, avg, max) = (33790941.744, 33994728.849, 34069232.452), stdev = 71653.194
  CI (99.9%): [33946856.426, 34042601.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_sumLong  thrpt   30  33994728.849 ± 47872.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2160212.608 ops/s
# Warmup Iteration   2: 4296807.184 ops/s
# Warmup Iteration   3: 4681087.609 ops/s
# Warmup Iteration   4: 4705523.221 ops/s
# Warmup Iteration   5: 3913605.720 ops/s
# Warmup Iteration   6: 4712036.578 ops/s
# Warmup Iteration   7: 4704150.809 ops/s
# Warmup Iteration   8: 4698089.874 ops/s
# Warmup Iteration   9: 4718751.548 ops/s
# Warmup Iteration  10: 4719736.154 ops/s
# Warmup Iteration  11: 4709225.826 ops/s
# Warmup Iteration  12: 4709747.744 ops/s
# Warmup Iteration  13: 4712892.951 ops/s
# Warmup Iteration  14: 4714400.337 ops/s
# Warmup Iteration  15: 4716183.119 ops/s
# Warmup Iteration  16: 4706201.158 ops/s
# Warmup Iteration  17: 4712876.798 ops/s
# Warmup Iteration  18: 4711027.068 ops/s
# Warmup Iteration  19: 4706016.722 ops/s
# Warmup Iteration  20: 4696149.772 ops/s
# Warmup Iteration  21: 4705252.085 ops/s
# Warmup Iteration  22: 4697220.135 ops/s
# Warmup Iteration  23: 4717867.917 ops/s
# Warmup Iteration  24: 4718422.796 ops/s
# Warmup Iteration  25: 4706913.546 ops/s
# Warmup Iteration  26: 4710160.838 ops/s
# Warmup Iteration  27: 4708410.637 ops/s
# Warmup Iteration  28: 4704240.753 ops/s
# Warmup Iteration  29: 4713559.515 ops/s
# Warmup Iteration  30: 4704056.496 ops/s
Iteration   1: 4713150.167 ops/s
Iteration   2: 4709385.942 ops/s
Iteration   3: 4719939.360 ops/s
Iteration   4: 4719604.700 ops/s
Iteration   5: 4712449.159 ops/s
Iteration   6: 4703080.630 ops/s
Iteration   7: 4707178.039 ops/s
Iteration   8: 4716669.625 ops/s
Iteration   9: 4706096.120 ops/s
Iteration  10: 4724873.518 ops/s
Iteration  11: 4714329.949 ops/s
Iteration  12: 4712758.480 ops/s
Iteration  13: 4711266.325 ops/s
Iteration  14: 4702622.998 ops/s
Iteration  15: 4713519.486 ops/s
Iteration  16: 4704588.338 ops/s
Iteration  17: 4714024.971 ops/s
Iteration  18: 4713657.666 ops/s
Iteration  19: 4698013.418 ops/s
Iteration  20: 4710215.295 ops/s
Iteration  21: 4721133.427 ops/s
Iteration  22: 4688666.190 ops/s
Iteration  23: 4694482.087 ops/s
Iteration  24: 4728651.845 ops/s
Iteration  25: 4712737.018 ops/s
Iteration  26: 4693790.524 ops/s
Iteration  27: 4709215.513 ops/s
Iteration  28: 4720567.784 ops/s
Iteration  29: 4705161.277 ops/s
Iteration  30: 4702193.190 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take":
  4710134.101 ±(99.9%) 6172.949 ops/s [Average]
  (min, avg, max) = (4688666.190, 4710134.101, 4728651.845), stdev = 9239.380
  CI (99.9%): [4703961.152, 4716307.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_take  thrpt   30  4710134.101 ± 6172.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7258425.454 ops/s
# Warmup Iteration   2: 13754974.064 ops/s
# Warmup Iteration   3: 14652056.493 ops/s
# Warmup Iteration   4: 14728552.937 ops/s
# Warmup Iteration   5: 12442052.050 ops/s
# Warmup Iteration   6: 14765829.157 ops/s
# Warmup Iteration   7: 14738488.726 ops/s
# Warmup Iteration   8: 14745356.069 ops/s
# Warmup Iteration   9: 14762384.951 ops/s
# Warmup Iteration  10: 14786111.465 ops/s
# Warmup Iteration  11: 14729774.357 ops/s
# Warmup Iteration  12: 14746177.795 ops/s
# Warmup Iteration  13: 14769578.586 ops/s
# Warmup Iteration  14: 14756226.307 ops/s
# Warmup Iteration  15: 14756315.982 ops/s
# Warmup Iteration  16: 14759305.571 ops/s
# Warmup Iteration  17: 14754788.641 ops/s
# Warmup Iteration  18: 14752091.447 ops/s
# Warmup Iteration  19: 14779801.783 ops/s
# Warmup Iteration  20: 14755332.644 ops/s
# Warmup Iteration  21: 14759946.947 ops/s
# Warmup Iteration  22: 14790736.372 ops/s
# Warmup Iteration  23: 14763197.307 ops/s
# Warmup Iteration  24: 14757690.036 ops/s
# Warmup Iteration  25: 14747788.567 ops/s
# Warmup Iteration  26: 14695975.855 ops/s
# Warmup Iteration  27: 14772693.477 ops/s
# Warmup Iteration  28: 14766488.373 ops/s
# Warmup Iteration  29: 14757150.651 ops/s
# Warmup Iteration  30: 14717979.156 ops/s
Iteration   1: 14780163.781 ops/s
Iteration   2: 14768519.313 ops/s
Iteration   3: 14765314.857 ops/s
Iteration   4: 14776674.701 ops/s
Iteration   5: 14726162.657 ops/s
Iteration   6: 14773358.226 ops/s
Iteration   7: 14783326.539 ops/s
Iteration   8: 14763461.752 ops/s
Iteration   9: 14784248.826 ops/s
Iteration  10: 14805010.967 ops/s
Iteration  11: 14772186.401 ops/s
Iteration  12: 14789041.665 ops/s
Iteration  13: 14786416.530 ops/s
Iteration  14: 14722187.162 ops/s
Iteration  15: 14741871.490 ops/s
Iteration  16: 14687168.059 ops/s
Iteration  17: 14762553.641 ops/s
Iteration  18: 14777150.379 ops/s
Iteration  19: 14797102.254 ops/s
Iteration  20: 14755445.378 ops/s
Iteration  21: 14766876.840 ops/s
Iteration  22: 14790748.430 ops/s
Iteration  23: 14696374.787 ops/s
Iteration  24: 14765226.729 ops/s
Iteration  25: 14785716.427 ops/s
Iteration  26: 14747713.070 ops/s
Iteration  27: 14705013.574 ops/s
Iteration  28: 14720798.244 ops/s
Iteration  29: 14697234.709 ops/s
Iteration  30: 14743148.125 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_takeWhile":
  14757873.850 ±(99.9%) 21581.087 ops/s [Average]
  (min, avg, max) = (14687168.059, 14757873.850, 14805010.967), stdev = 32301.558
  CI (99.9%): [14736292.763, 14779454.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  14757873.850 ± 21581.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724613.547 ops/s
# Warmup Iteration   2: 758627.399 ops/s
# Warmup Iteration   3: 988800.076 ops/s
# Warmup Iteration   4: 985765.027 ops/s
# Warmup Iteration   5: 988437.744 ops/s
# Warmup Iteration   6: 989212.031 ops/s
# Warmup Iteration   7: 989210.570 ops/s
# Warmup Iteration   8: 990140.610 ops/s
# Warmup Iteration   9: 988517.732 ops/s
# Warmup Iteration  10: 988946.286 ops/s
# Warmup Iteration  11: 976578.221 ops/s
# Warmup Iteration  12: 853285.737 ops/s
# Warmup Iteration  13: 990135.128 ops/s
# Warmup Iteration  14: 988399.406 ops/s
# Warmup Iteration  15: 988431.999 ops/s
# Warmup Iteration  16: 989936.132 ops/s
# Warmup Iteration  17: 1051583.229 ops/s
# Warmup Iteration  18: 1051193.137 ops/s
# Warmup Iteration  19: 1051866.844 ops/s
# Warmup Iteration  20: 1052894.660 ops/s
# Warmup Iteration  21: 1041747.578 ops/s
# Warmup Iteration  22: 1044625.186 ops/s
# Warmup Iteration  23: 1052720.772 ops/s
# Warmup Iteration  24: 1045649.689 ops/s
# Warmup Iteration  25: 1048491.947 ops/s
# Warmup Iteration  26: 1047494.038 ops/s
# Warmup Iteration  27: 1049728.956 ops/s
# Warmup Iteration  28: 1048569.884 ops/s
# Warmup Iteration  29: 1051557.239 ops/s
# Warmup Iteration  30: 1048449.811 ops/s
Iteration   1: 1050792.495 ops/s
Iteration   2: 1049624.094 ops/s
Iteration   3: 1050440.319 ops/s
Iteration   4: 1052032.301 ops/s
Iteration   5: 1052090.840 ops/s
Iteration   6: 1047533.641 ops/s
Iteration   7: 1051782.613 ops/s
Iteration   8: 1050981.063 ops/s
Iteration   9: 1053469.968 ops/s
Iteration  10: 1048825.115 ops/s
Iteration  11: 1049459.695 ops/s
Iteration  12: 1051871.376 ops/s
Iteration  13: 1051645.194 ops/s
Iteration  14: 1050560.569 ops/s
Iteration  15: 1047479.448 ops/s
Iteration  16: 1055384.766 ops/s
Iteration  17: 1048573.142 ops/s
Iteration  18: 1053171.020 ops/s
Iteration  19: 1048746.479 ops/s
Iteration  20: 1050456.541 ops/s
Iteration  21: 1050021.266 ops/s
Iteration  22: 1050730.485 ops/s
Iteration  23: 1050452.895 ops/s
Iteration  24: 1052826.717 ops/s
Iteration  25: 1046738.583 ops/s
Iteration  26: 1050363.740 ops/s
Iteration  27: 1048770.017 ops/s
Iteration  28: 1046650.894 ops/s
Iteration  29: 1053458.719 ops/s
Iteration  30: 1054212.131 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_take_throws":
  1050638.204 ±(99.9%) 1461.961 ops/s [Average]
  (min, avg, max) = (1046650.894, 1050638.204, 1055384.766), stdev = 2188.195
  CI (99.9%): [1049176.243, 1052100.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1050638.204 ± 1461.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4107987.275 ops/s
# Warmup Iteration   2: 10795689.182 ops/s
# Warmup Iteration   3: 11369580.783 ops/s
# Warmup Iteration   4: 11395318.627 ops/s
# Warmup Iteration   5: 9564374.551 ops/s
# Warmup Iteration   6: 11432513.601 ops/s
# Warmup Iteration   7: 11425504.586 ops/s
# Warmup Iteration   8: 11438064.498 ops/s
# Warmup Iteration   9: 11420678.729 ops/s
# Warmup Iteration  10: 11428998.546 ops/s
# Warmup Iteration  11: 11403423.336 ops/s
# Warmup Iteration  12: 11411994.346 ops/s
# Warmup Iteration  13: 11411319.396 ops/s
# Warmup Iteration  14: 11405977.295 ops/s
# Warmup Iteration  15: 11441458.440 ops/s
# Warmup Iteration  16: 11403302.461 ops/s
# Warmup Iteration  17: 11431097.343 ops/s
# Warmup Iteration  18: 11410107.203 ops/s
# Warmup Iteration  19: 11428356.358 ops/s
# Warmup Iteration  20: 11427747.190 ops/s
# Warmup Iteration  21: 11401043.975 ops/s
# Warmup Iteration  22: 11422952.698 ops/s
# Warmup Iteration  23: 11422621.789 ops/s
# Warmup Iteration  24: 11429123.873 ops/s
# Warmup Iteration  25: 11437741.754 ops/s
# Warmup Iteration  26: 11433003.479 ops/s
# Warmup Iteration  27: 11453846.976 ops/s
# Warmup Iteration  28: 11437193.119 ops/s
# Warmup Iteration  29: 11430179.124 ops/s
# Warmup Iteration  30: 11443559.598 ops/s
Iteration   1: 11408792.347 ops/s
Iteration   2: 11401738.586 ops/s
Iteration   3: 11459571.709 ops/s
Iteration   4: 11364755.370 ops/s
Iteration   5: 11416314.512 ops/s
Iteration   6: 11460105.999 ops/s
Iteration   7: 11425259.439 ops/s
Iteration   8: 11363291.902 ops/s
Iteration   9: 11432845.297 ops/s
Iteration  10: 11422153.391 ops/s
Iteration  11: 11440347.250 ops/s
Iteration  12: 11435275.887 ops/s
Iteration  13: 11402152.257 ops/s
Iteration  14: 11441532.802 ops/s
Iteration  15: 11423574.161 ops/s
Iteration  16: 11449961.887 ops/s
Iteration  17: 11433881.995 ops/s
Iteration  18: 11427383.062 ops/s
Iteration  19: 11414497.102 ops/s
Iteration  20: 11456951.962 ops/s
Iteration  21: 11403797.586 ops/s
Iteration  22: 11432326.503 ops/s
Iteration  23: 11464983.197 ops/s
Iteration  24: 11426994.823 ops/s
Iteration  25: 11431921.735 ops/s
Iteration  26: 11448597.213 ops/s
Iteration  27: 11399689.022 ops/s
Iteration  28: 11417237.419 ops/s
Iteration  29: 11374535.406 ops/s
Iteration  30: 11447473.496 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_tap":
  11424264.777 ±(99.9%) 17649.727 ops/s [Average]
  (min, avg, max) = (11363291.902, 11424264.777, 11464983.197), stdev = 26417.283
  CI (99.9%): [11406615.050, 11441914.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_tap  thrpt   30  11424264.777 ± 17649.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 534862.334 ops/s
# Warmup Iteration   2: 1073539.039 ops/s
# Warmup Iteration   3: 1164509.867 ops/s
# Warmup Iteration   4: 1168431.767 ops/s
# Warmup Iteration   5: 956232.948 ops/s
# Warmup Iteration   6: 1172398.610 ops/s
# Warmup Iteration   7: 1164662.488 ops/s
# Warmup Iteration   8: 1168623.163 ops/s
# Warmup Iteration   9: 1172397.974 ops/s
# Warmup Iteration  10: 1170393.813 ops/s
# Warmup Iteration  11: 1172620.255 ops/s
# Warmup Iteration  12: 1171967.076 ops/s
# Warmup Iteration  13: 1172822.366 ops/s
# Warmup Iteration  14: 1169360.955 ops/s
# Warmup Iteration  15: 1172702.152 ops/s
# Warmup Iteration  16: 1170808.659 ops/s
# Warmup Iteration  17: 1172096.515 ops/s
# Warmup Iteration  18: 1167521.639 ops/s
# Warmup Iteration  19: 1170752.723 ops/s
# Warmup Iteration  20: 1170588.331 ops/s
# Warmup Iteration  21: 1168208.437 ops/s
# Warmup Iteration  22: 1168830.047 ops/s
# Warmup Iteration  23: 1171063.386 ops/s
# Warmup Iteration  24: 1170333.316 ops/s
# Warmup Iteration  25: 1169327.936 ops/s
# Warmup Iteration  26: 1167600.898 ops/s
# Warmup Iteration  27: 1170933.233 ops/s
# Warmup Iteration  28: 1169289.501 ops/s
# Warmup Iteration  29: 1171168.249 ops/s
# Warmup Iteration  30: 1166904.771 ops/s
Iteration   1: 1174544.522 ops/s
Iteration   2: 1170977.929 ops/s
Iteration   3: 1167926.067 ops/s
Iteration   4: 1169034.071 ops/s
Iteration   5: 1170278.910 ops/s
Iteration   6: 1173955.437 ops/s
Iteration   7: 1171854.333 ops/s
Iteration   8: 1170700.371 ops/s
Iteration   9: 1172230.355 ops/s
Iteration  10: 1169217.727 ops/s
Iteration  11: 1171494.178 ops/s
Iteration  12: 1172054.533 ops/s
Iteration  13: 1171760.000 ops/s
Iteration  14: 1174746.743 ops/s
Iteration  15: 1171430.097 ops/s
Iteration  16: 1173024.270 ops/s
Iteration  17: 1174756.843 ops/s
Iteration  18: 1171551.113 ops/s
Iteration  19: 1170797.821 ops/s
Iteration  20: 1168245.881 ops/s
Iteration  21: 1169756.122 ops/s
Iteration  22: 1167065.443 ops/s
Iteration  23: 1172984.563 ops/s
Iteration  24: 1175786.292 ops/s
Iteration  25: 1172807.891 ops/s
Iteration  26: 1169915.185 ops/s
Iteration  27: 1174682.349 ops/s
Iteration  28: 1171970.944 ops/s
Iteration  29: 1171109.398 ops/s
Iteration  30: 1173686.003 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_testToString":
  1171678.180 ±(99.9%) 1463.722 ops/s [Average]
  (min, avg, max) = (1167065.443, 1171678.180, 1175786.292), stdev = 2190.830
  CI (99.9%): [1170214.458, 1173141.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_testToString  thrpt   30  1171678.180 ± 1463.722  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4778948.345 ops/s
# Warmup Iteration   2: 10396435.553 ops/s
# Warmup Iteration   3: 8954394.814 ops/s
# Warmup Iteration   4: 10682035.378 ops/s
# Warmup Iteration   5: 10650683.377 ops/s
# Warmup Iteration   6: 10669656.626 ops/s
# Warmup Iteration   7: 10655639.169 ops/s
# Warmup Iteration   8: 10647679.686 ops/s
# Warmup Iteration   9: 10666536.041 ops/s
# Warmup Iteration  10: 10650194.010 ops/s
# Warmup Iteration  11: 10679304.464 ops/s
# Warmup Iteration  12: 10658650.678 ops/s
# Warmup Iteration  13: 10686613.860 ops/s
# Warmup Iteration  14: 10689542.200 ops/s
# Warmup Iteration  15: 10678641.405 ops/s
# Warmup Iteration  16: 10654952.936 ops/s
# Warmup Iteration  17: 10685674.253 ops/s
# Warmup Iteration  18: 10663881.947 ops/s
# Warmup Iteration  19: 10669681.473 ops/s
# Warmup Iteration  20: 10673949.048 ops/s
# Warmup Iteration  21: 10672255.737 ops/s
# Warmup Iteration  22: 10666236.473 ops/s
# Warmup Iteration  23: 10677077.201 ops/s
# Warmup Iteration  24: 10685892.602 ops/s
# Warmup Iteration  25: 10681288.749 ops/s
# Warmup Iteration  26: 10625974.645 ops/s
# Warmup Iteration  27: 10644001.289 ops/s
# Warmup Iteration  28: 10653436.527 ops/s
# Warmup Iteration  29: 10694386.941 ops/s
# Warmup Iteration  30: 10674449.074 ops/s
Iteration   1: 10685684.440 ops/s
Iteration   2: 10700401.939 ops/s
Iteration   3: 10674578.732 ops/s
Iteration   4: 10667758.382 ops/s
Iteration   5: 10670198.648 ops/s
Iteration   6: 10681116.666 ops/s
Iteration   7: 10691987.819 ops/s
Iteration   8: 10671566.021 ops/s
Iteration   9: 10655064.116 ops/s
Iteration  10: 10612705.462 ops/s
Iteration  11: 10617262.184 ops/s
Iteration  12: 10653041.290 ops/s
Iteration  13: 10611660.741 ops/s
Iteration  14: 10672890.373 ops/s
Iteration  15: 10667635.756 ops/s
Iteration  16: 10665112.012 ops/s
Iteration  17: 10662787.644 ops/s
Iteration  18: 10637650.023 ops/s
Iteration  19: 10673631.269 ops/s
Iteration  20: 10684026.744 ops/s
Iteration  21: 10677158.126 ops/s
Iteration  22: 10659872.431 ops/s
Iteration  23: 10618145.683 ops/s
Iteration  24: 10679119.305 ops/s
Iteration  25: 10637983.852 ops/s
Iteration  26: 10668520.330 ops/s
Iteration  27: 10375472.254 ops/s
Iteration  28: 10655619.152 ops/s
Iteration  29: 10613615.233 ops/s
Iteration  30: 10692073.841 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toArray":
  10651144.682 ±(99.9%) 38647.428 ops/s [Average]
  (min, avg, max) = (10375472.254, 10651144.682, 10700401.939), stdev = 57845.655
  CI (99.9%): [10612497.254, 10689792.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toArray  thrpt   30  10651144.682 ± 38647.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 156679310.393 ops/s
# Warmup Iteration   2: 301820775.175 ops/s
# Warmup Iteration   3: 264403969.838 ops/s
# Warmup Iteration   4: 309232364.619 ops/s
# Warmup Iteration   5: 308759088.170 ops/s
# Warmup Iteration   6: 309570378.295 ops/s
# Warmup Iteration   7: 309004269.351 ops/s
# Warmup Iteration   8: 310084246.412 ops/s
# Warmup Iteration   9: 309680750.635 ops/s
# Warmup Iteration  10: 310808691.213 ops/s
# Warmup Iteration  11: 309643890.027 ops/s
# Warmup Iteration  12: 308988871.697 ops/s
# Warmup Iteration  13: 309214344.134 ops/s
# Warmup Iteration  14: 308777156.848 ops/s
# Warmup Iteration  15: 310582090.808 ops/s
# Warmup Iteration  16: 309354212.954 ops/s
# Warmup Iteration  17: 310072446.821 ops/s
# Warmup Iteration  18: 309491285.279 ops/s
# Warmup Iteration  19: 309641146.837 ops/s
# Warmup Iteration  20: 307805642.518 ops/s
# Warmup Iteration  21: 309817522.736 ops/s
# Warmup Iteration  22: 310562625.203 ops/s
# Warmup Iteration  23: 308832077.329 ops/s
# Warmup Iteration  24: 308497299.065 ops/s
# Warmup Iteration  25: 308924887.179 ops/s
# Warmup Iteration  26: 309478711.939 ops/s
# Warmup Iteration  27: 310470106.698 ops/s
# Warmup Iteration  28: 308619033.160 ops/s
# Warmup Iteration  29: 309203686.554 ops/s
# Warmup Iteration  30: 309724004.003 ops/s
Iteration   1: 309564555.285 ops/s
Iteration   2: 306845322.164 ops/s
Iteration   3: 310138331.477 ops/s
Iteration   4: 310377215.652 ops/s
Iteration   5: 310765457.690 ops/s
Iteration   6: 309539002.151 ops/s
Iteration   7: 309121796.440 ops/s
Iteration   8: 309704801.869 ops/s
Iteration   9: 310868200.496 ops/s
Iteration  10: 307663056.184 ops/s
Iteration  11: 310222635.797 ops/s
Iteration  12: 310619121.817 ops/s
Iteration  13: 307641585.657 ops/s
Iteration  14: 310413800.733 ops/s
Iteration  15: 308180928.449 ops/s
Iteration  16: 310593161.171 ops/s
Iteration  17: 309613577.176 ops/s
Iteration  18: 308549447.999 ops/s
Iteration  19: 309422835.432 ops/s
Iteration  20: 308016121.897 ops/s
Iteration  21: 308774081.064 ops/s
Iteration  22: 309674785.215 ops/s
Iteration  23: 308366021.037 ops/s
Iteration  24: 306037546.069 ops/s
Iteration  25: 309424801.946 ops/s
Iteration  26: 307828816.434 ops/s
Iteration  27: 308369916.706 ops/s
Iteration  28: 309382107.404 ops/s
Iteration  29: 309436558.792 ops/s
Iteration  30: 310560685.114 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toImmutable":
  309190542.511 ±(99.9%) 818859.760 ops/s [Average]
  (min, avg, max) = (306037546.069, 309190542.511, 310868200.496), stdev = 1225630.833
  CI (99.9%): [308371682.750, 310009402.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  309190542.511 ± 818859.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1952644.338 ops/s
# Warmup Iteration   2: 4576567.309 ops/s
# Warmup Iteration   3: 4556196.519 ops/s
# Warmup Iteration   4: 3818681.244 ops/s
# Warmup Iteration   5: 4610029.406 ops/s
# Warmup Iteration   6: 4607954.767 ops/s
# Warmup Iteration   7: 4591854.410 ops/s
# Warmup Iteration   8: 4611720.437 ops/s
# Warmup Iteration   9: 4611990.824 ops/s
# Warmup Iteration  10: 4605505.832 ops/s
# Warmup Iteration  11: 4608211.197 ops/s
# Warmup Iteration  12: 4613280.982 ops/s
# Warmup Iteration  13: 4605477.245 ops/s
# Warmup Iteration  14: 4610601.223 ops/s
# Warmup Iteration  15: 4608096.693 ops/s
# Warmup Iteration  16: 4614830.331 ops/s
# Warmup Iteration  17: 4555502.950 ops/s
# Warmup Iteration  18: 4559010.101 ops/s
# Warmup Iteration  19: 4565378.977 ops/s
# Warmup Iteration  20: 4559238.632 ops/s
# Warmup Iteration  21: 4567462.985 ops/s
# Warmup Iteration  22: 4552947.349 ops/s
# Warmup Iteration  23: 4563609.125 ops/s
# Warmup Iteration  24: 4545063.605 ops/s
# Warmup Iteration  25: 4566578.463 ops/s
# Warmup Iteration  26: 4551107.535 ops/s
# Warmup Iteration  27: 4552589.106 ops/s
# Warmup Iteration  28: 4561645.056 ops/s
# Warmup Iteration  29: 4554523.030 ops/s
# Warmup Iteration  30: 4552659.749 ops/s
Iteration   1: 4571785.375 ops/s
Iteration   2: 4559970.694 ops/s
Iteration   3: 4569247.027 ops/s
Iteration   4: 4569992.565 ops/s
Iteration   5: 4553114.265 ops/s
Iteration   6: 4563561.909 ops/s
Iteration   7: 4557258.163 ops/s
Iteration   8: 4556406.025 ops/s
Iteration   9: 4566065.507 ops/s
Iteration  10: 4538813.093 ops/s
Iteration  11: 4549501.307 ops/s
Iteration  12: 4537790.685 ops/s
Iteration  13: 4532206.557 ops/s
Iteration  14: 4561824.545 ops/s
Iteration  15: 4556107.649 ops/s
Iteration  16: 4560445.695 ops/s
Iteration  17: 4555117.009 ops/s
Iteration  18: 4560389.164 ops/s
Iteration  19: 4559652.191 ops/s
Iteration  20: 4562910.322 ops/s
Iteration  21: 4533526.728 ops/s
Iteration  22: 4542658.286 ops/s
Iteration  23: 4559024.159 ops/s
Iteration  24: 4551301.660 ops/s
Iteration  25: 4566181.723 ops/s
Iteration  26: 4567241.951 ops/s
Iteration  27: 4566318.907 ops/s
Iteration  28: 4561957.946 ops/s
Iteration  29: 4562015.255 ops/s
Iteration  30: 4562253.649 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toList":
  4557154.667 ±(99.9%) 7123.288 ops/s [Average]
  (min, avg, max) = (4532206.557, 4557154.667, 4571785.375), stdev = 10661.804
  CI (99.9%): [4550031.379, 4564277.955] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toList  thrpt   30  4557154.667 ± 7123.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709310.584 ops/s
# Warmup Iteration   2: 2264301.858 ops/s
# Warmup Iteration   3: 2861565.274 ops/s
# Warmup Iteration   4: 2845234.714 ops/s
# Warmup Iteration   5: 2858046.120 ops/s
# Warmup Iteration   6: 2860122.291 ops/s
# Warmup Iteration   7: 2859578.838 ops/s
# Warmup Iteration   8: 2369156.429 ops/s
# Warmup Iteration   9: 2855161.744 ops/s
# Warmup Iteration  10: 2858258.929 ops/s
# Warmup Iteration  11: 2861192.415 ops/s
# Warmup Iteration  12: 2858869.430 ops/s
# Warmup Iteration  13: 2849708.419 ops/s
# Warmup Iteration  14: 2859933.625 ops/s
# Warmup Iteration  15: 2861593.063 ops/s
# Warmup Iteration  16: 2861081.659 ops/s
# Warmup Iteration  17: 2859193.244 ops/s
# Warmup Iteration  18: 2862916.808 ops/s
# Warmup Iteration  19: 2853670.858 ops/s
# Warmup Iteration  20: 2855104.015 ops/s
# Warmup Iteration  21: 2853182.764 ops/s
# Warmup Iteration  22: 2856413.069 ops/s
# Warmup Iteration  23: 2859409.039 ops/s
# Warmup Iteration  24: 2861150.665 ops/s
# Warmup Iteration  25: 2863665.147 ops/s
# Warmup Iteration  26: 2861945.194 ops/s
# Warmup Iteration  27: 2859935.005 ops/s
# Warmup Iteration  28: 2863846.783 ops/s
# Warmup Iteration  29: 2862358.783 ops/s
# Warmup Iteration  30: 2865021.388 ops/s
Iteration   1: 2859065.295 ops/s
Iteration   2: 2861039.505 ops/s
Iteration   3: 2865153.898 ops/s
Iteration   4: 2851786.660 ops/s
Iteration   5: 2862588.080 ops/s
Iteration   6: 2860761.036 ops/s
Iteration   7: 2854835.705 ops/s
Iteration   8: 2845599.277 ops/s
Iteration   9: 2849602.239 ops/s
Iteration  10: 2860916.283 ops/s
Iteration  11: 2851535.371 ops/s
Iteration  12: 2857828.980 ops/s
Iteration  13: 2849444.410 ops/s
Iteration  14: 2863004.921 ops/s
Iteration  15: 2860995.656 ops/s
Iteration  16: 2863674.705 ops/s
Iteration  17: 2867962.877 ops/s
Iteration  18: 2861580.218 ops/s
Iteration  19: 2862877.581 ops/s
Iteration  20: 2862563.855 ops/s
Iteration  21: 2852840.376 ops/s
Iteration  22: 2850362.999 ops/s
Iteration  23: 2850936.922 ops/s
Iteration  24: 2847727.861 ops/s
Iteration  25: 2860256.979 ops/s
Iteration  26: 2859637.467 ops/s
Iteration  27: 2863476.736 ops/s
Iteration  28: 2858194.410 ops/s
Iteration  29: 2855553.407 ops/s
Iteration  30: 2861020.547 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toReversed":
  2857760.809 ±(99.9%) 3925.529 ops/s [Average]
  (min, avg, max) = (2845599.277, 2857760.809, 2867962.877), stdev = 5875.548
  CI (99.9%): [2853835.279, 2861686.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toReversed  thrpt   30  2857760.809 ± 3925.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2605617.496 ops/s
# Warmup Iteration   2: 3326322.669 ops/s
# Warmup Iteration   3: 4290340.912 ops/s
# Warmup Iteration   4: 4266288.646 ops/s
# Warmup Iteration   5: 4290559.626 ops/s
# Warmup Iteration   6: 4278922.552 ops/s
# Warmup Iteration   7: 4277565.697 ops/s
# Warmup Iteration   8: 4289553.435 ops/s
# Warmup Iteration   9: 3531243.190 ops/s
# Warmup Iteration  10: 4299966.552 ops/s
# Warmup Iteration  11: 4294445.729 ops/s
# Warmup Iteration  12: 4279127.785 ops/s
# Warmup Iteration  13: 4279748.138 ops/s
# Warmup Iteration  14: 4293016.086 ops/s
# Warmup Iteration  15: 4292097.096 ops/s
# Warmup Iteration  16: 4293731.678 ops/s
# Warmup Iteration  17: 4291766.567 ops/s
# Warmup Iteration  18: 4285477.327 ops/s
# Warmup Iteration  19: 4278450.907 ops/s
# Warmup Iteration  20: 4291501.432 ops/s
# Warmup Iteration  21: 4299469.261 ops/s
# Warmup Iteration  22: 4300505.985 ops/s
# Warmup Iteration  23: 4295760.916 ops/s
# Warmup Iteration  24: 4296484.287 ops/s
# Warmup Iteration  25: 4256800.986 ops/s
# Warmup Iteration  26: 4287248.759 ops/s
# Warmup Iteration  27: 4292500.075 ops/s
# Warmup Iteration  28: 4295603.492 ops/s
# Warmup Iteration  29: 4297243.122 ops/s
# Warmup Iteration  30: 4296515.758 ops/s
Iteration   1: 4290809.859 ops/s
Iteration   2: 4272899.432 ops/s
Iteration   3: 4296451.297 ops/s
Iteration   4: 4285146.844 ops/s
Iteration   5: 4287254.763 ops/s
Iteration   6: 4287789.663 ops/s
Iteration   7: 4289443.757 ops/s
Iteration   8: 4285802.405 ops/s
Iteration   9: 4287133.189 ops/s
Iteration  10: 4300301.001 ops/s
Iteration  11: 4299654.732 ops/s
Iteration  12: 4298740.032 ops/s
Iteration  13: 4282904.773 ops/s
Iteration  14: 4298422.430 ops/s
Iteration  15: 4174100.767 ops/s
Iteration  16: 4136144.911 ops/s
Iteration  17: 4295599.396 ops/s
Iteration  18: 4298485.485 ops/s
Iteration  19: 4304181.307 ops/s
Iteration  20: 4299252.827 ops/s
Iteration  21: 4296870.372 ops/s
Iteration  22: 4298050.203 ops/s
Iteration  23: 4297444.441 ops/s
Iteration  24: 4283592.286 ops/s
Iteration  25: 4298391.159 ops/s
Iteration  26: 4298949.420 ops/s
Iteration  27: 4293210.656 ops/s
Iteration  28: 4298075.001 ops/s
Iteration  29: 4296933.984 ops/s
Iteration  30: 4313494.084 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedList":
  4284851.016 ±(99.9%) 24351.970 ops/s [Average]
  (min, avg, max) = (4136144.911, 4284851.016, 4313494.084), stdev = 36448.885
  CI (99.9%): [4260499.046, 4309202.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  4284851.016 ± 24351.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1132819.176 ops/s
# Warmup Iteration   2: 1227257.030 ops/s
# Warmup Iteration   3: 1229567.100 ops/s
# Warmup Iteration   4: 1328778.790 ops/s
# Warmup Iteration   5: 1439894.031 ops/s
# Warmup Iteration   6: 1440494.588 ops/s
# Warmup Iteration   7: 1456738.604 ops/s
# Warmup Iteration   8: 1454119.711 ops/s
# Warmup Iteration   9: 1455643.210 ops/s
# Warmup Iteration  10: 1452103.906 ops/s
# Warmup Iteration  11: 1460717.844 ops/s
# Warmup Iteration  12: 1461776.491 ops/s
# Warmup Iteration  13: 1461378.185 ops/s
# Warmup Iteration  14: 1463337.691 ops/s
# Warmup Iteration  15: 1454145.055 ops/s
# Warmup Iteration  16: 1451217.123 ops/s
# Warmup Iteration  17: 1460417.942 ops/s
# Warmup Iteration  18: 1452811.089 ops/s
# Warmup Iteration  19: 1452278.678 ops/s
# Warmup Iteration  20: 1461730.302 ops/s
# Warmup Iteration  21: 1462802.658 ops/s
# Warmup Iteration  22: 1275588.816 ops/s
# Warmup Iteration  23: 1402268.814 ops/s
# Warmup Iteration  24: 1461889.804 ops/s
# Warmup Iteration  25: 1439247.025 ops/s
# Warmup Iteration  26: 1437520.611 ops/s
# Warmup Iteration  27: 1437220.503 ops/s
# Warmup Iteration  28: 1439706.483 ops/s
# Warmup Iteration  29: 1432468.905 ops/s
# Warmup Iteration  30: 1430083.310 ops/s
Iteration   1: 1429148.993 ops/s
Iteration   2: 1428458.539 ops/s
Iteration   3: 1434794.556 ops/s
Iteration   4: 1437712.627 ops/s
Iteration   5: 1437371.467 ops/s
Iteration   6: 1434281.074 ops/s
Iteration   7: 1437274.040 ops/s
Iteration   8: 1438756.120 ops/s
Iteration   9: 1440112.016 ops/s
Iteration  10: 1434044.431 ops/s
Iteration  11: 1437725.407 ops/s
Iteration  12: 1441623.515 ops/s
Iteration  13: 1436164.306 ops/s
Iteration  14: 1427289.987 ops/s
Iteration  15: 1434881.949 ops/s
Iteration  16: 1440159.082 ops/s
Iteration  17: 1438589.628 ops/s
Iteration  18: 1440405.190 ops/s
Iteration  19: 1441148.297 ops/s
Iteration  20: 1424032.935 ops/s
Iteration  21: 1438175.286 ops/s
Iteration  22: 1433894.821 ops/s
Iteration  23: 1435168.240 ops/s
Iteration  24: 1436774.556 ops/s
Iteration  25: 1432214.425 ops/s
Iteration  26: 1433020.323 ops/s
Iteration  27: 1436340.723 ops/s
Iteration  28: 1438480.555 ops/s
Iteration  29: 1436566.502 ops/s
Iteration  30: 1436094.992 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedListBy":
  1435690.153 ±(99.9%) 2788.674 ops/s [Average]
  (min, avg, max) = (1424032.935, 1435690.153, 1441623.515), stdev = 4173.956
  CI (99.9%): [1432901.479, 1438478.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1435690.153 ± 2788.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1271432.354 ops/s
# Warmup Iteration   2: 2615566.678 ops/s
# Warmup Iteration   3: 2706128.768 ops/s
# Warmup Iteration   4: 2732328.718 ops/s
# Warmup Iteration   5: 2297357.259 ops/s
# Warmup Iteration   6: 2740279.952 ops/s
# Warmup Iteration   7: 2729542.206 ops/s
# Warmup Iteration   8: 2717329.605 ops/s
# Warmup Iteration   9: 2732814.659 ops/s
# Warmup Iteration  10: 2736868.126 ops/s
# Warmup Iteration  11: 2732159.987 ops/s
# Warmup Iteration  12: 2728174.693 ops/s
# Warmup Iteration  13: 2735175.748 ops/s
# Warmup Iteration  14: 2731717.889 ops/s
# Warmup Iteration  15: 2737025.015 ops/s
# Warmup Iteration  16: 2734050.200 ops/s
# Warmup Iteration  17: 2731897.441 ops/s
# Warmup Iteration  18: 2733925.651 ops/s
# Warmup Iteration  19: 2729555.151 ops/s
# Warmup Iteration  20: 2729969.530 ops/s
# Warmup Iteration  21: 2727892.240 ops/s
# Warmup Iteration  22: 2734380.528 ops/s
# Warmup Iteration  23: 2729783.106 ops/s
# Warmup Iteration  24: 2732377.394 ops/s
# Warmup Iteration  25: 2734675.743 ops/s
# Warmup Iteration  26: 2736340.741 ops/s
# Warmup Iteration  27: 2733735.530 ops/s
# Warmup Iteration  28: 2731190.999 ops/s
# Warmup Iteration  29: 2731355.484 ops/s
# Warmup Iteration  30: 2719658.176 ops/s
Iteration   1: 2737790.017 ops/s
Iteration   2: 2733524.300 ops/s
Iteration   3: 2727761.055 ops/s
Iteration   4: 2723757.079 ops/s
Iteration   5: 2735795.079 ops/s
Iteration   6: 2729790.846 ops/s
Iteration   7: 2732758.090 ops/s
Iteration   8: 2736753.042 ops/s
Iteration   9: 2727743.081 ops/s
Iteration  10: 2728088.570 ops/s
Iteration  11: 2729193.460 ops/s
Iteration  12: 2735925.999 ops/s
Iteration  13: 2725005.722 ops/s
Iteration  14: 2730591.620 ops/s
Iteration  15: 2734852.281 ops/s
Iteration  16: 2715046.625 ops/s
Iteration  17: 2734887.659 ops/s
Iteration  18: 2718546.411 ops/s
Iteration  19: 2732533.738 ops/s
Iteration  20: 2716598.951 ops/s
Iteration  21: 2729302.299 ops/s
Iteration  22: 2730102.330 ops/s
Iteration  23: 2726438.768 ops/s
Iteration  24: 2733893.494 ops/s
Iteration  25: 2739378.475 ops/s
Iteration  26: 2725760.172 ops/s
Iteration  27: 2736018.527 ops/s
Iteration  28: 2733453.552 ops/s
Iteration  29: 2737276.761 ops/s
Iteration  30: 2727160.800 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSet":
  2730190.960 ±(99.9%) 4122.832 ops/s [Average]
  (min, avg, max) = (2715046.625, 2730190.960, 2739378.475), stdev = 6170.861
  CI (99.9%): [2726068.128, 2734313.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  2730190.960 ± 4122.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 257555.620 ops/s
# Warmup Iteration   2: 411714.210 ops/s
# Warmup Iteration   3: 518420.650 ops/s
# Warmup Iteration   4: 523189.261 ops/s
# Warmup Iteration   5: 522910.397 ops/s
# Warmup Iteration   6: 521813.116 ops/s
# Warmup Iteration   7: 416502.245 ops/s
# Warmup Iteration   8: 523500.493 ops/s
# Warmup Iteration   9: 522729.209 ops/s
# Warmup Iteration  10: 523620.121 ops/s
# Warmup Iteration  11: 523707.577 ops/s
# Warmup Iteration  12: 523713.195 ops/s
# Warmup Iteration  13: 522314.556 ops/s
# Warmup Iteration  14: 523766.377 ops/s
# Warmup Iteration  15: 524065.298 ops/s
# Warmup Iteration  16: 521476.330 ops/s
# Warmup Iteration  17: 522411.348 ops/s
# Warmup Iteration  18: 522979.801 ops/s
# Warmup Iteration  19: 523385.952 ops/s
# Warmup Iteration  20: 522407.574 ops/s
# Warmup Iteration  21: 522687.394 ops/s
# Warmup Iteration  22: 523096.834 ops/s
# Warmup Iteration  23: 522645.230 ops/s
# Warmup Iteration  24: 523268.729 ops/s
# Warmup Iteration  25: 521869.678 ops/s
# Warmup Iteration  26: 523608.261 ops/s
# Warmup Iteration  27: 523339.695 ops/s
# Warmup Iteration  28: 523487.254 ops/s
# Warmup Iteration  29: 524273.272 ops/s
# Warmup Iteration  30: 523067.470 ops/s
Iteration   1: 522093.199 ops/s
Iteration   2: 520581.215 ops/s
Iteration   3: 523199.248 ops/s
Iteration   4: 520939.518 ops/s
Iteration   5: 524320.362 ops/s
Iteration   6: 522404.203 ops/s
Iteration   7: 523936.965 ops/s
Iteration   8: 523312.617 ops/s
Iteration   9: 524158.199 ops/s
Iteration  10: 523312.682 ops/s
Iteration  11: 522221.472 ops/s
Iteration  12: 524299.479 ops/s
Iteration  13: 523794.766 ops/s
Iteration  14: 524366.910 ops/s
Iteration  15: 522903.734 ops/s
Iteration  16: 524817.503 ops/s
Iteration  17: 523136.787 ops/s
Iteration  18: 523515.865 ops/s
Iteration  19: 522289.168 ops/s
Iteration  20: 522407.956 ops/s
Iteration  21: 520602.367 ops/s
Iteration  22: 521955.877 ops/s
Iteration  23: 523154.918 ops/s
Iteration  24: 524733.422 ops/s
Iteration  25: 523110.814 ops/s
Iteration  26: 524116.638 ops/s
Iteration  27: 525301.365 ops/s
Iteration  28: 524698.708 ops/s
Iteration  29: 522897.001 ops/s
Iteration  30: 523922.347 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetBy":
  523216.843 ±(99.9%) 818.067 ops/s [Average]
  (min, avg, max) = (520581.215, 523216.843, 525301.365), stdev = 1224.444
  CI (99.9%): [522398.777, 524034.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  523216.843 ± 818.067  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 871099.807 ops/s
# Warmup Iteration   2: 1555879.999 ops/s
# Warmup Iteration   3: 1773497.557 ops/s
# Warmup Iteration   4: 1774622.625 ops/s
# Warmup Iteration   5: 1782024.497 ops/s
# Warmup Iteration   6: 1482426.124 ops/s
# Warmup Iteration   7: 1784387.235 ops/s
# Warmup Iteration   8: 1778090.397 ops/s
# Warmup Iteration   9: 1784374.901 ops/s
# Warmup Iteration  10: 1783058.928 ops/s
# Warmup Iteration  11: 1780039.648 ops/s
# Warmup Iteration  12: 1781376.109 ops/s
# Warmup Iteration  13: 1784877.151 ops/s
# Warmup Iteration  14: 1785674.294 ops/s
# Warmup Iteration  15: 1782643.558 ops/s
# Warmup Iteration  16: 1782384.393 ops/s
# Warmup Iteration  17: 1785984.885 ops/s
# Warmup Iteration  18: 1784764.497 ops/s
# Warmup Iteration  19: 1785003.566 ops/s
# Warmup Iteration  20: 1779495.886 ops/s
# Warmup Iteration  21: 1784591.634 ops/s
# Warmup Iteration  22: 1781930.639 ops/s
# Warmup Iteration  23: 1778903.782 ops/s
# Warmup Iteration  24: 1776545.629 ops/s
# Warmup Iteration  25: 1784092.715 ops/s
# Warmup Iteration  26: 1780504.787 ops/s
# Warmup Iteration  27: 1777625.238 ops/s
# Warmup Iteration  28: 1765078.375 ops/s
# Warmup Iteration  29: 1780203.017 ops/s
# Warmup Iteration  30: 1780391.905 ops/s
Iteration   1: 1784991.970 ops/s
Iteration   2: 1781804.605 ops/s
Iteration   3: 1782125.931 ops/s
Iteration   4: 1781654.895 ops/s
Iteration   5: 1785769.640 ops/s
Iteration   6: 1781832.725 ops/s
Iteration   7: 1783267.676 ops/s
Iteration   8: 1786574.925 ops/s
Iteration   9: 1781396.428 ops/s
Iteration  10: 1783873.017 ops/s
Iteration  11: 1783612.968 ops/s
Iteration  12: 1777034.882 ops/s
Iteration  13: 1780841.456 ops/s
Iteration  14: 1781815.511 ops/s
Iteration  15: 1782938.598 ops/s
Iteration  16: 1774346.177 ops/s
Iteration  17: 1785568.972 ops/s
Iteration  18: 1778560.324 ops/s
Iteration  19: 1778636.842 ops/s
Iteration  20: 1784477.486 ops/s
Iteration  21: 1785914.785 ops/s
Iteration  22: 1784580.973 ops/s
Iteration  23: 1782316.121 ops/s
Iteration  24: 1787452.727 ops/s
Iteration  25: 1779518.861 ops/s
Iteration  26: 1788826.398 ops/s
Iteration  27: 1786527.770 ops/s
Iteration  28: 1782793.495 ops/s
Iteration  29: 1787089.207 ops/s
Iteration  30: 1781416.403 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  1782918.726 ±(99.9%) 2172.055 ops/s [Average]
  (min, avg, max) = (1774346.177, 1782918.726, 1788826.398), stdev = 3251.030
  CI (99.9%): [1780746.670, 1785090.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  1782918.726 ± 2172.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1930694.218 ops/s
# Warmup Iteration   2: 2914003.779 ops/s
# Warmup Iteration   3: 3488772.904 ops/s
# Warmup Iteration   4: 3506216.687 ops/s
# Warmup Iteration   5: 3513529.227 ops/s
# Warmup Iteration   6: 3511708.713 ops/s
# Warmup Iteration   7: 2901837.017 ops/s
# Warmup Iteration   8: 3508249.212 ops/s
# Warmup Iteration   9: 3517890.971 ops/s
# Warmup Iteration  10: 3508112.577 ops/s
# Warmup Iteration  11: 3514896.007 ops/s
# Warmup Iteration  12: 3517714.354 ops/s
# Warmup Iteration  13: 3516174.278 ops/s
# Warmup Iteration  14: 3507615.502 ops/s
# Warmup Iteration  15: 3515297.235 ops/s
# Warmup Iteration  16: 3501767.707 ops/s
# Warmup Iteration  17: 3511023.450 ops/s
# Warmup Iteration  18: 3514344.168 ops/s
# Warmup Iteration  19: 3505294.745 ops/s
# Warmup Iteration  20: 3511910.043 ops/s
# Warmup Iteration  21: 3513991.536 ops/s
# Warmup Iteration  22: 3510349.838 ops/s
# Warmup Iteration  23: 3502761.886 ops/s
# Warmup Iteration  24: 3503732.218 ops/s
# Warmup Iteration  25: 3516248.289 ops/s
# Warmup Iteration  26: 3512371.367 ops/s
# Warmup Iteration  27: 3518192.220 ops/s
# Warmup Iteration  28: 3516256.910 ops/s
# Warmup Iteration  29: 3511885.795 ops/s
# Warmup Iteration  30: 3504694.223 ops/s
Iteration   1: 3488112.165 ops/s
Iteration   2: 3507320.326 ops/s
Iteration   3: 3519539.946 ops/s
Iteration   4: 3513678.661 ops/s
Iteration   5: 3512458.284 ops/s
Iteration   6: 3511298.065 ops/s
Iteration   7: 3519813.959 ops/s
Iteration   8: 3509857.276 ops/s
Iteration   9: 3505493.192 ops/s
Iteration  10: 3509100.806 ops/s
Iteration  11: 3518995.724 ops/s
Iteration  12: 3518760.048 ops/s
Iteration  13: 3513374.733 ops/s
Iteration  14: 3515194.992 ops/s
Iteration  15: 3507935.073 ops/s
Iteration  16: 3514460.583 ops/s
Iteration  17: 3515857.584 ops/s
Iteration  18: 3521339.009 ops/s
Iteration  19: 3515457.466 ops/s
Iteration  20: 3519125.370 ops/s
Iteration  21: 3511357.229 ops/s
Iteration  22: 3518668.507 ops/s
Iteration  23: 3514650.777 ops/s
Iteration  24: 3504935.475 ops/s
Iteration  25: 3521393.709 ops/s
Iteration  26: 3504780.538 ops/s
Iteration  27: 3503208.702 ops/s
Iteration  28: 3510028.877 ops/s
Iteration  29: 3499563.114 ops/s
Iteration  30: 3507173.156 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_toStack":
  3511764.445 ±(99.9%) 4905.045 ops/s [Average]
  (min, avg, max) = (3488112.165, 3511764.445, 3521393.709), stdev = 7341.640
  CI (99.9%): [3506859.400, 3516669.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_toStack  thrpt   30  3511764.445 ± 4905.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 212227.687 ops/s
# Warmup Iteration   2: 376347.618 ops/s
# Warmup Iteration   3: 454721.432 ops/s
# Warmup Iteration   4: 458393.040 ops/s
# Warmup Iteration   5: 458471.054 ops/s
# Warmup Iteration   6: 445152.723 ops/s
# Warmup Iteration   7: 394540.683 ops/s
# Warmup Iteration   8: 458346.038 ops/s
# Warmup Iteration   9: 458813.642 ops/s
# Warmup Iteration  10: 458504.770 ops/s
# Warmup Iteration  11: 458343.664 ops/s
# Warmup Iteration  12: 458599.154 ops/s
# Warmup Iteration  13: 457865.349 ops/s
# Warmup Iteration  14: 458734.010 ops/s
# Warmup Iteration  15: 458316.061 ops/s
# Warmup Iteration  16: 457288.932 ops/s
# Warmup Iteration  17: 458483.741 ops/s
# Warmup Iteration  18: 458153.869 ops/s
# Warmup Iteration  19: 458650.173 ops/s
# Warmup Iteration  20: 458576.791 ops/s
# Warmup Iteration  21: 458478.928 ops/s
# Warmup Iteration  22: 457823.517 ops/s
# Warmup Iteration  23: 458274.472 ops/s
# Warmup Iteration  24: 457958.186 ops/s
# Warmup Iteration  25: 458493.054 ops/s
# Warmup Iteration  26: 458836.065 ops/s
# Warmup Iteration  27: 459228.385 ops/s
# Warmup Iteration  28: 459324.220 ops/s
# Warmup Iteration  29: 458182.987 ops/s
# Warmup Iteration  30: 458388.531 ops/s
Iteration   1: 459526.755 ops/s
Iteration   2: 458344.417 ops/s
Iteration   3: 456696.263 ops/s
Iteration   4: 458681.248 ops/s
Iteration   5: 458776.080 ops/s
Iteration   6: 457064.086 ops/s
Iteration   7: 458660.450 ops/s
Iteration   8: 457423.083 ops/s
Iteration   9: 457581.548 ops/s
Iteration  10: 457666.264 ops/s
Iteration  11: 459298.771 ops/s
Iteration  12: 458792.129 ops/s
Iteration  13: 459228.433 ops/s
Iteration  14: 456927.281 ops/s
Iteration  15: 459586.505 ops/s
Iteration  16: 458442.526 ops/s
Iteration  17: 459829.623 ops/s
Iteration  18: 458396.697 ops/s
Iteration  19: 458565.722 ops/s
Iteration  20: 459061.652 ops/s
Iteration  21: 457747.955 ops/s
Iteration  22: 458724.388 ops/s
Iteration  23: 459140.024 ops/s
Iteration  24: 454244.233 ops/s
Iteration  25: 456900.787 ops/s
Iteration  26: 457780.905 ops/s
Iteration  27: 458233.395 ops/s
Iteration  28: 457615.109 ops/s
Iteration  29: 459742.116 ops/s
Iteration  30: 458622.871 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zip":
  458243.377 ±(99.9%) 773.642 ops/s [Average]
  (min, avg, max) = (454244.233, 458243.377, 459829.623), stdev = 1157.951
  CI (99.9%): [457469.735, 459017.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score     Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_zip  thrpt   30  458243.377 ± 773.642  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623692.752 ops/s
# Warmup Iteration   2: 1248867.804 ops/s
# Warmup Iteration   3: 1322409.662 ops/s
# Warmup Iteration   4: 1329575.434 ops/s
# Warmup Iteration   5: 1109427.698 ops/s
# Warmup Iteration   6: 1330851.167 ops/s
# Warmup Iteration   7: 1332229.242 ops/s
# Warmup Iteration   8: 1335123.339 ops/s
# Warmup Iteration   9: 1334628.291 ops/s
# Warmup Iteration  10: 1330529.938 ops/s
# Warmup Iteration  11: 1333417.365 ops/s
# Warmup Iteration  12: 1333046.611 ops/s
# Warmup Iteration  13: 1335556.032 ops/s
# Warmup Iteration  14: 1332595.985 ops/s
# Warmup Iteration  15: 1332045.904 ops/s
# Warmup Iteration  16: 1331755.332 ops/s
# Warmup Iteration  17: 1329641.614 ops/s
# Warmup Iteration  18: 1330307.708 ops/s
# Warmup Iteration  19: 1333033.524 ops/s
# Warmup Iteration  20: 1330640.171 ops/s
# Warmup Iteration  21: 1328629.661 ops/s
# Warmup Iteration  22: 1325993.297 ops/s
# Warmup Iteration  23: 1332294.802 ops/s
# Warmup Iteration  24: 1331583.642 ops/s
# Warmup Iteration  25: 1331405.344 ops/s
# Warmup Iteration  26: 1324668.610 ops/s
# Warmup Iteration  27: 1331086.170 ops/s
# Warmup Iteration  28: 1331029.728 ops/s
# Warmup Iteration  29: 1333425.369 ops/s
# Warmup Iteration  30: 1316515.518 ops/s
Iteration   1: 1324077.357 ops/s
Iteration   2: 1327467.814 ops/s
Iteration   3: 1332035.375 ops/s
Iteration   4: 1330655.159 ops/s
Iteration   5: 1331546.693 ops/s
Iteration   6: 1333012.131 ops/s
Iteration   7: 1325064.460 ops/s
Iteration   8: 1320256.525 ops/s
Iteration   9: 1324212.902 ops/s
Iteration  10: 1331703.131 ops/s
Iteration  11: 1333985.632 ops/s
Iteration  12: 1332852.236 ops/s
Iteration  13: 1329262.061 ops/s
Iteration  14: 1324208.018 ops/s
Iteration  15: 1332120.292 ops/s
Iteration  16: 1329045.879 ops/s
Iteration  17: 1330014.453 ops/s
Iteration  18: 1316904.347 ops/s
Iteration  19: 1331299.426 ops/s
Iteration  20: 1333755.869 ops/s
Iteration  21: 1330808.158 ops/s
Iteration  22: 1329412.300 ops/s
Iteration  23: 1326801.256 ops/s
Iteration  24: 1327517.843 ops/s
Iteration  25: 1321747.640 ops/s
Iteration  26: 1328417.319 ops/s
Iteration  27: 1334726.205 ops/s
Iteration  28: 1325482.978 ops/s
Iteration  29: 1330610.889 ops/s
Iteration  30: 1333083.017 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDecapletonListTest._Benchmark.benchmark_zipWithIndex":
  1328736.245 ±(99.9%) 2927.331 ops/s [Average]
  (min, avg, max) = (1316904.347, 1328736.245, 1334726.205), stdev = 4381.492
  CI (99.9%): [1325808.914, 1331663.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDecapletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1328736.245 ± 2927.331  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639296.756 ops/s
# Warmup Iteration   2: 767732.624 ops/s
# Warmup Iteration   3: 967204.402 ops/s
# Warmup Iteration   4: 962828.741 ops/s
# Warmup Iteration   5: 964750.328 ops/s
# Warmup Iteration   6: 966403.489 ops/s
# Warmup Iteration   7: 963110.198 ops/s
# Warmup Iteration   8: 965247.390 ops/s
# Warmup Iteration   9: 809724.995 ops/s
# Warmup Iteration  10: 964426.603 ops/s
# Warmup Iteration  11: 965587.454 ops/s
# Warmup Iteration  12: 966150.967 ops/s
# Warmup Iteration  13: 967499.027 ops/s
# Warmup Iteration  14: 967118.522 ops/s
# Warmup Iteration  15: 965654.434 ops/s
# Warmup Iteration  16: 967385.911 ops/s
# Warmup Iteration  17: 1014454.470 ops/s
# Warmup Iteration  18: 1019248.541 ops/s
# Warmup Iteration  19: 1020169.065 ops/s
# Warmup Iteration  20: 1018149.452 ops/s
# Warmup Iteration  21: 1014660.377 ops/s
# Warmup Iteration  22: 1018366.668 ops/s
# Warmup Iteration  23: 1015150.483 ops/s
# Warmup Iteration  24: 1020323.307 ops/s
# Warmup Iteration  25: 1019090.446 ops/s
# Warmup Iteration  26: 1021103.444 ops/s
# Warmup Iteration  27: 1018684.999 ops/s
# Warmup Iteration  28: 1016154.619 ops/s
# Warmup Iteration  29: 1020913.007 ops/s
# Warmup Iteration  30: 1020128.348 ops/s
Iteration   1: 1007682.968 ops/s
Iteration   2: 1008221.138 ops/s
Iteration   3: 1010064.213 ops/s
Iteration   4: 1019466.694 ops/s
Iteration   5: 1015988.090 ops/s
Iteration   6: 1016707.112 ops/s
Iteration   7: 1015958.582 ops/s
Iteration   8: 1019061.132 ops/s
Iteration   9: 1021605.615 ops/s
Iteration  10: 1007660.625 ops/s
Iteration  11: 1021183.108 ops/s
Iteration  12: 1019083.707 ops/s
Iteration  13: 1018645.190 ops/s
Iteration  14: 1020098.763 ops/s
Iteration  15: 1022377.520 ops/s
Iteration  16: 1016987.915 ops/s
Iteration  17: 1021237.109 ops/s
Iteration  18: 1021206.807 ops/s
Iteration  19: 1017188.589 ops/s
Iteration  20: 1021033.667 ops/s
Iteration  21: 1024369.950 ops/s
Iteration  22: 1019930.137 ops/s
Iteration  23: 1022308.225 ops/s
Iteration  24: 1022456.338 ops/s
Iteration  25: 1020029.964 ops/s
Iteration  26: 1020838.305 ops/s
Iteration  27: 1016439.768 ops/s
Iteration  28: 1021134.545 ops/s
Iteration  29: 1022038.712 ops/s
Iteration  30: 1016852.282 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_add":
  1018261.892 ±(99.9%) 3007.860 ops/s [Average]
  (min, avg, max) = (1007660.625, 1018261.892, 1024369.950), stdev = 4502.024
  CI (99.9%): [1015254.032, 1021269.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_add  thrpt   30  1018261.892 ± 3007.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738979.982 ops/s
# Warmup Iteration   2: 779592.657 ops/s
# Warmup Iteration   3: 995220.871 ops/s
# Warmup Iteration   4: 988920.667 ops/s
# Warmup Iteration   5: 992318.657 ops/s
# Warmup Iteration   6: 987025.515 ops/s
# Warmup Iteration   7: 989226.025 ops/s
# Warmup Iteration   8: 992488.559 ops/s
# Warmup Iteration   9: 986170.164 ops/s
# Warmup Iteration  10: 983816.483 ops/s
# Warmup Iteration  11: 987121.429 ops/s
# Warmup Iteration  12: 841070.165 ops/s
# Warmup Iteration  13: 990891.938 ops/s
# Warmup Iteration  14: 994890.394 ops/s
# Warmup Iteration  15: 992526.464 ops/s
# Warmup Iteration  16: 993955.940 ops/s
# Warmup Iteration  17: 1053646.007 ops/s
# Warmup Iteration  18: 1057338.620 ops/s
# Warmup Iteration  19: 1057800.311 ops/s
# Warmup Iteration  20: 1050655.766 ops/s
# Warmup Iteration  21: 1049424.321 ops/s
# Warmup Iteration  22: 1049680.709 ops/s
# Warmup Iteration  23: 1052712.441 ops/s
# Warmup Iteration  24: 1055566.293 ops/s
# Warmup Iteration  25: 1054067.747 ops/s
# Warmup Iteration  26: 1057286.492 ops/s
# Warmup Iteration  27: 1059246.257 ops/s
# Warmup Iteration  28: 1059910.521 ops/s
# Warmup Iteration  29: 1057277.230 ops/s
# Warmup Iteration  30: 1056243.865 ops/s
Iteration   1: 1055627.625 ops/s
Iteration   2: 1052990.679 ops/s
Iteration   3: 1058326.489 ops/s
Iteration   4: 1055755.587 ops/s
Iteration   5: 1060324.917 ops/s
Iteration   6: 1052141.859 ops/s
Iteration   7: 1051685.170 ops/s
Iteration   8: 1051303.569 ops/s
Iteration   9: 1056345.879 ops/s
Iteration  10: 1061152.427 ops/s
Iteration  11: 1056502.073 ops/s
Iteration  12: 1056449.300 ops/s
Iteration  13: 1054207.204 ops/s
Iteration  14: 1053765.137 ops/s
Iteration  15: 1059247.555 ops/s
Iteration  16: 1057056.061 ops/s
Iteration  17: 1056385.662 ops/s
Iteration  18: 1055370.716 ops/s
Iteration  19: 1054323.366 ops/s
Iteration  20: 1057870.552 ops/s
Iteration  21: 1057968.923 ops/s
Iteration  22: 1057488.400 ops/s
Iteration  23: 1053052.108 ops/s
Iteration  24: 1055827.452 ops/s
Iteration  25: 1054645.046 ops/s
Iteration  26: 1058071.412 ops/s
Iteration  27: 1001263.460 ops/s
Iteration  28: 1057001.415 ops/s
Iteration  29: 1057480.123 ops/s
Iteration  30: 1059050.165 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAll":
  1054289.344 ±(99.9%) 6890.394 ops/s [Average]
  (min, avg, max) = (1001263.460, 1054289.344, 1061152.427), stdev = 10313.219
  CI (99.9%): [1047398.950, 1061179.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_addAll  thrpt   30  1054289.344 ± 6890.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626310.638 ops/s
# Warmup Iteration   2: 764054.093 ops/s
# Warmup Iteration   3: 964424.659 ops/s
# Warmup Iteration   4: 961622.574 ops/s
# Warmup Iteration   5: 967251.169 ops/s
# Warmup Iteration   6: 962795.253 ops/s
# Warmup Iteration   7: 965393.602 ops/s
# Warmup Iteration   8: 965817.656 ops/s
# Warmup Iteration   9: 809147.016 ops/s
# Warmup Iteration  10: 968365.830 ops/s
# Warmup Iteration  11: 964556.221 ops/s
# Warmup Iteration  12: 963812.867 ops/s
# Warmup Iteration  13: 966608.195 ops/s
# Warmup Iteration  14: 965642.502 ops/s
# Warmup Iteration  15: 966756.037 ops/s
# Warmup Iteration  16: 967412.385 ops/s
# Warmup Iteration  17: 1017879.727 ops/s
# Warmup Iteration  18: 1019060.468 ops/s
# Warmup Iteration  19: 1016619.683 ops/s
# Warmup Iteration  20: 1010204.341 ops/s
# Warmup Iteration  21: 1008978.757 ops/s
# Warmup Iteration  22: 1009806.105 ops/s
# Warmup Iteration  23: 1015218.846 ops/s
# Warmup Iteration  24: 1017970.939 ops/s
# Warmup Iteration  25: 1018680.703 ops/s
# Warmup Iteration  26: 1016063.320 ops/s
# Warmup Iteration  27: 1012750.670 ops/s
# Warmup Iteration  28: 1015289.788 ops/s
# Warmup Iteration  29: 1019492.528 ops/s
# Warmup Iteration  30: 1014375.209 ops/s
Iteration   1: 1017161.334 ops/s
Iteration   2: 1016717.893 ops/s
Iteration   3: 1018609.807 ops/s
Iteration   4: 1016441.059 ops/s
Iteration   5: 1020763.131 ops/s
Iteration   6: 1017028.891 ops/s
Iteration   7: 1015927.794 ops/s
Iteration   8: 1020327.291 ops/s
Iteration   9: 1014515.832 ops/s
Iteration  10: 1011212.511 ops/s
Iteration  11: 1013554.166 ops/s
Iteration  12: 1016999.289 ops/s
Iteration  13: 1014387.167 ops/s
Iteration  14: 1013376.402 ops/s
Iteration  15: 1018385.701 ops/s
Iteration  16: 1018175.737 ops/s
Iteration  17: 1022377.122 ops/s
Iteration  18: 1018882.855 ops/s
Iteration  19: 1013749.328 ops/s
Iteration  20: 1013128.848 ops/s
Iteration  21: 1011163.786 ops/s
Iteration  22: 1016118.978 ops/s
Iteration  23: 1019682.922 ops/s
Iteration  24: 1017485.312 ops/s
Iteration  25: 1015078.405 ops/s
Iteration  26: 1014741.483 ops/s
Iteration  27: 1013409.744 ops/s
Iteration  28: 1017853.678 ops/s
Iteration  29: 1018085.651 ops/s
Iteration  30: 1017112.567 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAllAtIndex":
  1016415.156 ±(99.9%) 1831.033 ops/s [Average]
  (min, avg, max) = (1011163.786, 1016415.156, 1022377.122), stdev = 2740.604
  CI (99.9%): [1014584.123, 1018246.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1016415.156 ± 1831.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751747.377 ops/s
# Warmup Iteration   2: 784152.372 ops/s
# Warmup Iteration   3: 1017055.571 ops/s
# Warmup Iteration   4: 1013238.299 ops/s
# Warmup Iteration   5: 1011525.444 ops/s
# Warmup Iteration   6: 1015342.044 ops/s
# Warmup Iteration   7: 1012105.239 ops/s
# Warmup Iteration   8: 1013911.355 ops/s
# Warmup Iteration   9: 1016796.076 ops/s
# Warmup Iteration  10: 1013898.186 ops/s
# Warmup Iteration  11: 1018885.210 ops/s
# Warmup Iteration  12: 860769.947 ops/s
# Warmup Iteration  13: 1014452.296 ops/s
# Warmup Iteration  14: 1011104.614 ops/s
# Warmup Iteration  15: 1011911.789 ops/s
# Warmup Iteration  16: 1014720.814 ops/s
# Warmup Iteration  17: 1076633.390 ops/s
# Warmup Iteration  18: 1074273.875 ops/s
# Warmup Iteration  19: 936917.845 ops/s
# Warmup Iteration  20: 1072984.839 ops/s
# Warmup Iteration  21: 1070679.322 ops/s
# Warmup Iteration  22: 1074808.189 ops/s
# Warmup Iteration  23: 1073141.148 ops/s
# Warmup Iteration  24: 1079235.495 ops/s
# Warmup Iteration  25: 1074494.607 ops/s
# Warmup Iteration  26: 1069962.757 ops/s
# Warmup Iteration  27: 1068866.614 ops/s
# Warmup Iteration  28: 1075079.737 ops/s
# Warmup Iteration  29: 1078761.164 ops/s
# Warmup Iteration  30: 1076970.677 ops/s
Iteration   1: 1075830.556 ops/s
Iteration   2: 1073149.628 ops/s
Iteration   3: 1074836.775 ops/s
Iteration   4: 1079488.264 ops/s
Iteration   5: 1078278.549 ops/s
Iteration   6: 1071925.161 ops/s
Iteration   7: 1071313.918 ops/s
Iteration   8: 1073950.167 ops/s
Iteration   9: 1079652.622 ops/s
Iteration  10: 1080123.577 ops/s
Iteration  11: 1076181.891 ops/s
Iteration  12: 1077770.670 ops/s
Iteration  13: 1075668.343 ops/s
Iteration  14: 1078723.458 ops/s
Iteration  15: 1075030.485 ops/s
Iteration  16: 1073495.831 ops/s
Iteration  17: 1002994.732 ops/s
Iteration  18: 1056642.731 ops/s
Iteration  19: 1075828.678 ops/s
Iteration  20: 1079239.080 ops/s
Iteration  21: 1076510.289 ops/s
Iteration  22: 1073287.367 ops/s
Iteration  23: 1078209.899 ops/s
Iteration  24: 1079709.127 ops/s
Iteration  25: 1074598.504 ops/s
Iteration  26: 1076185.826 ops/s
Iteration  27: 1061926.278 ops/s
Iteration  28: 1060706.089 ops/s
Iteration  29: 1077753.018 ops/s
Iteration  30: 1074862.929 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_addAtIndex":
  1072129.148 ±(99.9%) 9487.536 ops/s [Average]
  (min, avg, max) = (1002994.732, 1072129.148, 1080123.577), stdev = 14200.499
  CI (99.9%): [1062641.612, 1081616.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1072129.148 ± 9487.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1156344.782 ops/s
# Warmup Iteration   2: 3115550.880 ops/s
# Warmup Iteration   3: 2855733.633 ops/s
# Warmup Iteration   4: 2847283.209 ops/s
# Warmup Iteration   5: 3127021.940 ops/s
# Warmup Iteration   6: 3111022.653 ops/s
# Warmup Iteration   7: 3115870.224 ops/s
# Warmup Iteration   8: 3094871.153 ops/s
# Warmup Iteration   9: 3119203.649 ops/s
# Warmup Iteration  10: 3126708.863 ops/s
# Warmup Iteration  11: 3120557.722 ops/s
# Warmup Iteration  12: 3125602.772 ops/s
# Warmup Iteration  13: 3128180.682 ops/s
# Warmup Iteration  14: 3127467.384 ops/s
# Warmup Iteration  15: 3109179.012 ops/s
# Warmup Iteration  16: 3131596.331 ops/s
# Warmup Iteration  17: 3115627.587 ops/s
# Warmup Iteration  18: 3128762.438 ops/s
# Warmup Iteration  19: 3129589.907 ops/s
# Warmup Iteration  20: 3122014.391 ops/s
# Warmup Iteration  21: 3122828.028 ops/s
# Warmup Iteration  22: 3113117.615 ops/s
# Warmup Iteration  23: 3123518.881 ops/s
# Warmup Iteration  24: 3121766.015 ops/s
# Warmup Iteration  25: 3120097.284 ops/s
# Warmup Iteration  26: 3119677.860 ops/s
# Warmup Iteration  27: 3129109.757 ops/s
# Warmup Iteration  28: 3127487.771 ops/s
# Warmup Iteration  29: 3118620.127 ops/s
# Warmup Iteration  30: 3109530.652 ops/s
Iteration   1: 3124159.247 ops/s
Iteration   2: 3112428.961 ops/s
Iteration   3: 3130010.400 ops/s
Iteration   4: 3118039.040 ops/s
Iteration   5: 3121916.510 ops/s
Iteration   6: 3123564.542 ops/s
Iteration   7: 3126877.543 ops/s
Iteration   8: 3130911.987 ops/s
Iteration   9: 3106200.743 ops/s
Iteration  10: 3063004.159 ops/s
Iteration  11: 3061935.683 ops/s
Iteration  12: 3113675.045 ops/s
Iteration  13: 3124299.438 ops/s
Iteration  14: 3125712.699 ops/s
Iteration  15: 3131070.404 ops/s
Iteration  16: 3129590.898 ops/s
Iteration  17: 3124036.889 ops/s
Iteration  18: 3089996.864 ops/s
Iteration  19: 3119087.156 ops/s
Iteration  20: 3129272.582 ops/s
Iteration  21: 3121372.695 ops/s
Iteration  22: 3138907.148 ops/s
Iteration  23: 3113426.850 ops/s
Iteration  24: 3107958.480 ops/s
Iteration  25: 3127133.780 ops/s
Iteration  26: 3134281.428 ops/s
Iteration  27: 3130103.066 ops/s
Iteration  28: 3103268.036 ops/s
Iteration  29: 3107067.995 ops/s
Iteration  30: 3124996.899 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByMutating":
  3117143.572 ±(99.9%) 12163.906 ops/s [Average]
  (min, avg, max) = (3061935.683, 3117143.572, 3138907.148), stdev = 18206.363
  CI (99.9%): [3104979.667, 3129307.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3117143.572 ± 12163.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1118648.414 ops/s
# Warmup Iteration   2: 3211071.880 ops/s
# Warmup Iteration   3: 3205338.503 ops/s
# Warmup Iteration   4: 2654359.551 ops/s
# Warmup Iteration   5: 3215895.721 ops/s
# Warmup Iteration   6: 3223449.896 ops/s
# Warmup Iteration   7: 3225130.343 ops/s
# Warmup Iteration   8: 3224091.259 ops/s
# Warmup Iteration   9: 3210166.903 ops/s
# Warmup Iteration  10: 3209842.438 ops/s
# Warmup Iteration  11: 3205010.063 ops/s
# Warmup Iteration  12: 3218037.369 ops/s
# Warmup Iteration  13: 3221795.985 ops/s
# Warmup Iteration  14: 3217940.644 ops/s
# Warmup Iteration  15: 3222615.012 ops/s
# Warmup Iteration  16: 3216456.706 ops/s
# Warmup Iteration  17: 3211937.608 ops/s
# Warmup Iteration  18: 3205535.640 ops/s
# Warmup Iteration  19: 3219320.445 ops/s
# Warmup Iteration  20: 3219780.447 ops/s
# Warmup Iteration  21: 3223967.828 ops/s
# Warmup Iteration  22: 3221812.076 ops/s
# Warmup Iteration  23: 3224578.561 ops/s
# Warmup Iteration  24: 3225359.408 ops/s
# Warmup Iteration  25: 3220979.865 ops/s
# Warmup Iteration  26: 3214236.735 ops/s
# Warmup Iteration  27: 3226269.780 ops/s
# Warmup Iteration  28: 3220209.163 ops/s
# Warmup Iteration  29: 3222871.489 ops/s
# Warmup Iteration  30: 3204083.955 ops/s
Iteration   1: 3214674.043 ops/s
Iteration   2: 3221662.164 ops/s
Iteration   3: 3221901.196 ops/s
Iteration   4: 3218899.069 ops/s
Iteration   5: 3225672.274 ops/s
Iteration   6: 3227986.649 ops/s
Iteration   7: 3220616.064 ops/s
Iteration   8: 3225277.357 ops/s
Iteration   9: 3214199.060 ops/s
Iteration  10: 3208652.638 ops/s
Iteration  11: 3224846.930 ops/s
Iteration  12: 3209233.293 ops/s
Iteration  13: 3218742.583 ops/s
Iteration  14: 3217414.688 ops/s
Iteration  15: 3196629.579 ops/s
Iteration  16: 3223662.200 ops/s
Iteration  17: 3220122.661 ops/s
Iteration  18: 3229406.231 ops/s
Iteration  19: 3229189.482 ops/s
Iteration  20: 3222966.448 ops/s
Iteration  21: 3215165.684 ops/s
Iteration  22: 3226255.407 ops/s
Iteration  23: 3223026.881 ops/s
Iteration  24: 3214922.067 ops/s
Iteration  25: 3217965.344 ops/s
Iteration  26: 3221066.580 ops/s
Iteration  27: 3207612.221 ops/s
Iteration  28: 3210766.353 ops/s
Iteration  29: 3225176.885 ops/s
Iteration  30: 3219561.696 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  3219109.124 ±(99.9%) 4894.208 ops/s [Average]
  (min, avg, max) = (3196629.579, 3219109.124, 3229406.231), stdev = 7325.421
  CI (99.9%): [3214214.916, 3224003.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3219109.124 ± 4894.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21224748.949 ops/s
# Warmup Iteration   2: 42500488.266 ops/s
# Warmup Iteration   3: 35045671.310 ops/s
# Warmup Iteration   4: 41218614.517 ops/s
# Warmup Iteration   5: 41360151.436 ops/s
# Warmup Iteration   6: 41476780.347 ops/s
# Warmup Iteration   7: 41512647.894 ops/s
# Warmup Iteration   8: 41390262.753 ops/s
# Warmup Iteration   9: 41333291.731 ops/s
# Warmup Iteration  10: 41261444.177 ops/s
# Warmup Iteration  11: 41212831.129 ops/s
# Warmup Iteration  12: 41290864.897 ops/s
# Warmup Iteration  13: 41410146.042 ops/s
# Warmup Iteration  14: 41354278.579 ops/s
# Warmup Iteration  15: 41306682.915 ops/s
# Warmup Iteration  16: 41395610.404 ops/s
# Warmup Iteration  17: 41396993.614 ops/s
# Warmup Iteration  18: 41369767.857 ops/s
# Warmup Iteration  19: 41418129.305 ops/s
# Warmup Iteration  20: 41331948.353 ops/s
# Warmup Iteration  21: 41277442.393 ops/s
# Warmup Iteration  22: 41227467.259 ops/s
# Warmup Iteration  23: 41298312.535 ops/s
# Warmup Iteration  24: 41381107.265 ops/s
# Warmup Iteration  25: 41312905.517 ops/s
# Warmup Iteration  26: 41336323.694 ops/s
# Warmup Iteration  27: 41192113.790 ops/s
# Warmup Iteration  28: 41246208.887 ops/s
# Warmup Iteration  29: 41428241.409 ops/s
# Warmup Iteration  30: 41298793.125 ops/s
Iteration   1: 41315502.831 ops/s
Iteration   2: 41410030.497 ops/s
Iteration   3: 41297374.196 ops/s
Iteration   4: 41289535.624 ops/s
Iteration   5: 41201445.942 ops/s
Iteration   6: 41497328.070 ops/s
Iteration   7: 41348238.294 ops/s
Iteration   8: 41227110.896 ops/s
Iteration   9: 41391810.965 ops/s
Iteration  10: 41179494.523 ops/s
Iteration  11: 41167193.174 ops/s
Iteration  12: 41198988.245 ops/s
Iteration  13: 41498594.678 ops/s
Iteration  14: 41285759.596 ops/s
Iteration  15: 41422309.444 ops/s
Iteration  16: 41371385.813 ops/s
Iteration  17: 41192738.714 ops/s
Iteration  18: 41232072.084 ops/s
Iteration  19: 41376765.903 ops/s
Iteration  20: 41371687.696 ops/s
Iteration  21: 41615562.549 ops/s
Iteration  22: 41272237.497 ops/s
Iteration  23: 41209163.481 ops/s
Iteration  24: 41355104.433 ops/s
Iteration  25: 41288073.833 ops/s
Iteration  26: 41162974.020 ops/s
Iteration  27: 41458591.658 ops/s
Iteration  28: 41534241.093 ops/s
Iteration  29: 41333493.487 ops/s
Iteration  30: 41374604.001 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfy":
  41329313.775 ±(99.9%) 78257.793 ops/s [Average]
  (min, avg, max) = (41162974.020, 41329313.775, 41615562.549), stdev = 117132.589
  CI (99.9%): [41251055.982, 41407571.568] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  41329313.775 ± 78257.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13218299.583 ops/s
# Warmup Iteration   2: 26436585.014 ops/s
# Warmup Iteration   3: 22721258.763 ops/s
# Warmup Iteration   4: 26576634.469 ops/s
# Warmup Iteration   5: 26708181.027 ops/s
# Warmup Iteration   6: 26708103.125 ops/s
# Warmup Iteration   7: 26728004.972 ops/s
# Warmup Iteration   8: 26690885.403 ops/s
# Warmup Iteration   9: 26516708.308 ops/s
# Warmup Iteration  10: 26659559.195 ops/s
# Warmup Iteration  11: 26619862.851 ops/s
# Warmup Iteration  12: 26700697.896 ops/s
# Warmup Iteration  13: 26637283.411 ops/s
# Warmup Iteration  14: 26689884.218 ops/s
# Warmup Iteration  15: 26747700.455 ops/s
# Warmup Iteration  16: 26582220.568 ops/s
# Warmup Iteration  17: 26830219.643 ops/s
# Warmup Iteration  18: 26832857.336 ops/s
# Warmup Iteration  19: 26913184.584 ops/s
# Warmup Iteration  20: 26916374.690 ops/s
# Warmup Iteration  21: 26940445.458 ops/s
# Warmup Iteration  22: 26938445.986 ops/s
# Warmup Iteration  23: 26883457.021 ops/s
# Warmup Iteration  24: 26890483.832 ops/s
# Warmup Iteration  25: 26851233.315 ops/s
# Warmup Iteration  26: 26914894.423 ops/s
# Warmup Iteration  27: 26857259.003 ops/s
# Warmup Iteration  28: 26874455.297 ops/s
# Warmup Iteration  29: 26955479.918 ops/s
# Warmup Iteration  30: 26894657.050 ops/s
Iteration   1: 26901727.589 ops/s
Iteration   2: 26936372.310 ops/s
Iteration   3: 26890378.573 ops/s
Iteration   4: 26924377.005 ops/s
Iteration   5: 26895177.124 ops/s
Iteration   6: 26921716.434 ops/s
Iteration   7: 26908344.931 ops/s
Iteration   8: 26941937.949 ops/s
Iteration   9: 26897854.440 ops/s
Iteration  10: 26970849.915 ops/s
Iteration  11: 26960531.414 ops/s
Iteration  12: 26897511.063 ops/s
Iteration  13: 26891666.008 ops/s
Iteration  14: 26868888.215 ops/s
Iteration  15: 26907990.156 ops/s
Iteration  16: 27001525.707 ops/s
Iteration  17: 26833710.394 ops/s
Iteration  18: 26887650.505 ops/s
Iteration  19: 26838924.986 ops/s
Iteration  20: 26744227.529 ops/s
Iteration  21: 26793501.726 ops/s
Iteration  22: 26824885.417 ops/s
Iteration  23: 26927134.464 ops/s
Iteration  24: 26889623.994 ops/s
Iteration  25: 26747596.669 ops/s
Iteration  26: 26932001.848 ops/s
Iteration  27: 26976405.222 ops/s
Iteration  28: 26895975.671 ops/s
Iteration  29: 26877243.053 ops/s
Iteration  30: 26809490.865 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfyWith":
  26889840.706 ±(99.9%) 41246.428 ops/s [Average]
  (min, avg, max) = (26744227.529, 26889840.706, 27001525.707), stdev = 61735.716
  CI (99.9%): [26848594.278, 26931087.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  26889840.706 ± 41246.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13612128.831 ops/s
# Warmup Iteration   2: 27849354.785 ops/s
# Warmup Iteration   3: 23645303.892 ops/s
# Warmup Iteration   4: 27838209.163 ops/s
# Warmup Iteration   5: 27844779.478 ops/s
# Warmup Iteration   6: 27825387.172 ops/s
# Warmup Iteration   7: 27780790.041 ops/s
# Warmup Iteration   8: 27831898.092 ops/s
# Warmup Iteration   9: 27819315.783 ops/s
# Warmup Iteration  10: 27806156.318 ops/s
# Warmup Iteration  11: 27829385.745 ops/s
# Warmup Iteration  12: 27845294.843 ops/s
# Warmup Iteration  13: 27652310.409 ops/s
# Warmup Iteration  14: 27888319.742 ops/s
# Warmup Iteration  15: 27831593.972 ops/s
# Warmup Iteration  16: 27805189.197 ops/s
# Warmup Iteration  17: 27848268.438 ops/s
# Warmup Iteration  18: 27867688.367 ops/s
# Warmup Iteration  19: 27909557.338 ops/s
# Warmup Iteration  20: 27841600.554 ops/s
# Warmup Iteration  21: 27817140.385 ops/s
# Warmup Iteration  22: 27869601.318 ops/s
# Warmup Iteration  23: 27809354.735 ops/s
# Warmup Iteration  24: 27894500.927 ops/s
# Warmup Iteration  25: 27847696.870 ops/s
# Warmup Iteration  26: 27893997.733 ops/s
# Warmup Iteration  27: 27832679.252 ops/s
# Warmup Iteration  28: 27950100.254 ops/s
# Warmup Iteration  29: 27858529.047 ops/s
# Warmup Iteration  30: 27847462.581 ops/s
Iteration   1: 27974300.222 ops/s
Iteration   2: 27903321.153 ops/s
Iteration   3: 27864316.589 ops/s
Iteration   4: 27853753.097 ops/s
Iteration   5: 27931174.448 ops/s
Iteration   6: 27902991.892 ops/s
Iteration   7: 27868979.425 ops/s
Iteration   8: 27900608.228 ops/s
Iteration   9: 27963729.003 ops/s
Iteration  10: 27955586.544 ops/s
Iteration  11: 27914070.723 ops/s
Iteration  12: 27854381.660 ops/s
Iteration  13: 27901626.823 ops/s
Iteration  14: 27908188.880 ops/s
Iteration  15: 27976677.113 ops/s
Iteration  16: 27850972.838 ops/s
Iteration  17: 27854680.019 ops/s
Iteration  18: 27772295.739 ops/s
Iteration  19: 27858832.488 ops/s
Iteration  20: 27849528.945 ops/s
Iteration  21: 27815879.277 ops/s
Iteration  22: 27911797.527 ops/s
Iteration  23: 27873363.286 ops/s
Iteration  24: 27949117.100 ops/s
Iteration  25: 27856863.912 ops/s
Iteration  26: 27821420.460 ops/s
Iteration  27: 27879510.433 ops/s
Iteration  28: 27902392.985 ops/s
Iteration  29: 27883644.385 ops/s
Iteration  30: 27855406.563 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfy":
  27886980.392 ±(99.9%) 32171.904 ops/s [Average]
  (min, avg, max) = (27772295.739, 27886980.392, 27976677.113), stdev = 48153.395
  CI (99.9%): [27854808.488, 27919152.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  27886980.392 ± 32171.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12901967.429 ops/s
# Warmup Iteration   2: 27906019.510 ops/s
# Warmup Iteration   3: 25828842.241 ops/s
# Warmup Iteration   4: 21728152.665 ops/s
# Warmup Iteration   5: 25733858.299 ops/s
# Warmup Iteration   6: 25856422.295 ops/s
# Warmup Iteration   7: 25912577.160 ops/s
# Warmup Iteration   8: 25882809.239 ops/s
# Warmup Iteration   9: 25855814.401 ops/s
# Warmup Iteration  10: 25845005.845 ops/s
# Warmup Iteration  11: 25880387.169 ops/s
# Warmup Iteration  12: 25893876.528 ops/s
# Warmup Iteration  13: 25852608.462 ops/s
# Warmup Iteration  14: 25877271.600 ops/s
# Warmup Iteration  15: 25901785.343 ops/s
# Warmup Iteration  16: 25813042.462 ops/s
# Warmup Iteration  17: 25892257.967 ops/s
# Warmup Iteration  18: 25675438.870 ops/s
# Warmup Iteration  19: 25784525.043 ops/s
# Warmup Iteration  20: 25834402.368 ops/s
# Warmup Iteration  21: 25888777.452 ops/s
# Warmup Iteration  22: 25892402.934 ops/s
# Warmup Iteration  23: 25855627.377 ops/s
# Warmup Iteration  24: 25853298.107 ops/s
# Warmup Iteration  25: 25789274.076 ops/s
# Warmup Iteration  26: 25832333.381 ops/s
# Warmup Iteration  27: 25886668.575 ops/s
# Warmup Iteration  28: 25791396.259 ops/s
# Warmup Iteration  29: 25847935.272 ops/s
# Warmup Iteration  30: 25884384.670 ops/s
Iteration   1: 25807022.701 ops/s
Iteration   2: 25933977.860 ops/s
Iteration   3: 25812294.220 ops/s
Iteration   4: 25809550.170 ops/s
Iteration   5: 25784531.456 ops/s
Iteration   6: 25877186.723 ops/s
Iteration   7: 25943154.547 ops/s
Iteration   8: 25910550.683 ops/s
Iteration   9: 25917435.815 ops/s
Iteration  10: 25726963.218 ops/s
Iteration  11: 25822427.643 ops/s
Iteration  12: 25899622.572 ops/s
Iteration  13: 25859982.164 ops/s
Iteration  14: 25834946.061 ops/s
Iteration  15: 25789159.142 ops/s
Iteration  16: 25762084.889 ops/s
Iteration  17: 25643549.791 ops/s
Iteration  18: 25724347.656 ops/s
Iteration  19: 25904094.948 ops/s
Iteration  20: 25902686.216 ops/s
Iteration  21: 25852057.048 ops/s
Iteration  22: 25905062.299 ops/s
Iteration  23: 25852275.255 ops/s
Iteration  24: 25896335.024 ops/s
Iteration  25: 25898109.795 ops/s
Iteration  26: 25833771.131 ops/s
Iteration  27: 25943688.932 ops/s
Iteration  28: 25863582.143 ops/s
Iteration  29: 25915234.850 ops/s
Iteration  30: 25869253.358 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfyWith":
  25849831.277 ±(99.9%) 47963.421 ops/s [Average]
  (min, avg, max) = (25643549.791, 25849831.277, 25943688.932), stdev = 71789.396
  CI (99.9%): [25801867.856, 25897794.698] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  25849831.277 ± 47963.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 917099.424 ops/s
# Warmup Iteration   2: 2180650.955 ops/s
# Warmup Iteration   3: 1829193.936 ops/s
# Warmup Iteration   4: 2193394.698 ops/s
# Warmup Iteration   5: 2179664.048 ops/s
# Warmup Iteration   6: 2169017.916 ops/s
# Warmup Iteration   7: 2187408.995 ops/s
# Warmup Iteration   8: 2199156.067 ops/s
# Warmup Iteration   9: 2190222.262 ops/s
# Warmup Iteration  10: 2181437.944 ops/s
# Warmup Iteration  11: 2187091.789 ops/s
# Warmup Iteration  12: 2188408.905 ops/s
# Warmup Iteration  13: 2192184.319 ops/s
# Warmup Iteration  14: 2192361.725 ops/s
# Warmup Iteration  15: 2185838.504 ops/s
# Warmup Iteration  16: 2184370.294 ops/s
# Warmup Iteration  17: 2194612.503 ops/s
# Warmup Iteration  18: 2191436.817 ops/s
# Warmup Iteration  19: 2192210.293 ops/s
# Warmup Iteration  20: 2179658.397 ops/s
# Warmup Iteration  21: 2192900.778 ops/s
# Warmup Iteration  22: 2195337.631 ops/s
# Warmup Iteration  23: 2192760.430 ops/s
# Warmup Iteration  24: 2188929.973 ops/s
# Warmup Iteration  25: 2190830.177 ops/s
# Warmup Iteration  26: 2183375.826 ops/s
# Warmup Iteration  27: 2190960.080 ops/s
# Warmup Iteration  28: 2182320.687 ops/s
# Warmup Iteration  29: 2183771.163 ops/s
# Warmup Iteration  30: 2184258.494 ops/s
Iteration   1: 2191204.419 ops/s
Iteration   2: 2194021.025 ops/s
Iteration   3: 2195272.698 ops/s
Iteration   4: 2194310.275 ops/s
Iteration   5: 2185439.940 ops/s
Iteration   6: 2199183.443 ops/s
Iteration   7: 2182644.642 ops/s
Iteration   8: 2193045.604 ops/s
Iteration   9: 2191462.525 ops/s
Iteration  10: 2186043.087 ops/s
Iteration  11: 2184704.384 ops/s
Iteration  12: 2185948.713 ops/s
Iteration  13: 2176590.952 ops/s
Iteration  14: 2180182.719 ops/s
Iteration  15: 2191332.610 ops/s
Iteration  16: 2190012.400 ops/s
Iteration  17: 2198108.800 ops/s
Iteration  18: 2192381.967 ops/s
Iteration  19: 2190927.142 ops/s
Iteration  20: 2195753.135 ops/s
Iteration  21: 2197098.141 ops/s
Iteration  22: 2186659.244 ops/s
Iteration  23: 2185160.862 ops/s
Iteration  24: 2193994.910 ops/s
Iteration  25: 2183615.618 ops/s
Iteration  26: 2191738.823 ops/s
Iteration  27: 2173749.317 ops/s
Iteration  28: 2186407.696 ops/s
Iteration  29: 2200255.087 ops/s
Iteration  30: 2190924.169 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_appendString":
  2189605.812 ±(99.9%) 4299.819 ops/s [Average]
  (min, avg, max) = (2173749.317, 2189605.812, 2200255.087), stdev = 6435.767
  CI (99.9%): [2185305.992, 2193905.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_appendString  thrpt   30  2189605.812 ± 4299.819  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5687683.336 ops/s
# Warmup Iteration   2: 12046962.035 ops/s
# Warmup Iteration   3: 11511973.701 ops/s
# Warmup Iteration   4: 12824650.659 ops/s
# Warmup Iteration   5: 12812087.374 ops/s
# Warmup Iteration   6: 12844068.254 ops/s
# Warmup Iteration   7: 12726668.122 ops/s
# Warmup Iteration   8: 12810718.445 ops/s
# Warmup Iteration   9: 12742701.851 ops/s
# Warmup Iteration  10: 12796364.833 ops/s
# Warmup Iteration  11: 12803676.825 ops/s
# Warmup Iteration  12: 12840710.593 ops/s
# Warmup Iteration  13: 12883297.518 ops/s
# Warmup Iteration  14: 12810980.755 ops/s
# Warmup Iteration  15: 12812643.546 ops/s
# Warmup Iteration  16: 12834663.692 ops/s
# Warmup Iteration  17: 12840170.467 ops/s
# Warmup Iteration  18: 12868117.657 ops/s
# Warmup Iteration  19: 12792894.583 ops/s
# Warmup Iteration  20: 12884031.626 ops/s
# Warmup Iteration  21: 12785028.055 ops/s
# Warmup Iteration  22: 12861781.292 ops/s
# Warmup Iteration  23: 12779482.208 ops/s
# Warmup Iteration  24: 12832685.959 ops/s
# Warmup Iteration  25: 12781818.704 ops/s
# Warmup Iteration  26: 12821090.346 ops/s
# Warmup Iteration  27: 12829494.493 ops/s
# Warmup Iteration  28: 12834757.789 ops/s
# Warmup Iteration  29: 12858512.483 ops/s
# Warmup Iteration  30: 12819478.929 ops/s
Iteration   1: 12812792.866 ops/s
Iteration   2: 12818725.923 ops/s
Iteration   3: 12851816.299 ops/s
Iteration   4: 12878453.156 ops/s
Iteration   5: 12822214.308 ops/s
Iteration   6: 12788621.352 ops/s
Iteration   7: 12800280.759 ops/s
Iteration   8: 12802576.905 ops/s
Iteration   9: 12866207.115 ops/s
Iteration  10: 12882477.511 ops/s
Iteration  11: 12881770.516 ops/s
Iteration  12: 12803700.475 ops/s
Iteration  13: 12818143.963 ops/s
Iteration  14: 12884432.236 ops/s
Iteration  15: 12780404.815 ops/s
Iteration  16: 12875103.555 ops/s
Iteration  17: 12855324.883 ops/s
Iteration  18: 12924446.814 ops/s
Iteration  19: 12827967.709 ops/s
Iteration  20: 12804226.802 ops/s
Iteration  21: 12741899.671 ops/s
Iteration  22: 12710313.038 ops/s
Iteration  23: 12821116.453 ops/s
Iteration  24: 12846471.479 ops/s
Iteration  25: 12832110.181 ops/s
Iteration  26: 12756906.404 ops/s
Iteration  27: 12822750.208 ops/s
Iteration  28: 12889998.526 ops/s
Iteration  29: 12887576.413 ops/s
Iteration  30: 12830856.120 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_asReversed":
  12830656.215 ±(99.9%) 32031.534 ops/s [Average]
  (min, avg, max) = (12710313.038, 12830656.215, 12924446.814), stdev = 47943.296
  CI (99.9%): [12798624.681, 12862687.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_asReversed  thrpt   30  12830656.215 ± 32031.534  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768861.715 ops/s
# Warmup Iteration   2: 806880.136 ops/s
# Warmup Iteration   3: 1041203.632 ops/s
# Warmup Iteration   4: 1042983.343 ops/s
# Warmup Iteration   5: 1043531.773 ops/s
# Warmup Iteration   6: 1047064.397 ops/s
# Warmup Iteration   7: 1044465.901 ops/s
# Warmup Iteration   8: 1050451.491 ops/s
# Warmup Iteration   9: 1051448.498 ops/s
# Warmup Iteration  10: 1047895.643 ops/s
# Warmup Iteration  11: 999564.206 ops/s
# Warmup Iteration  12: 935715.308 ops/s
# Warmup Iteration  13: 1047083.294 ops/s
# Warmup Iteration  14: 1045409.700 ops/s
# Warmup Iteration  15: 1045027.510 ops/s
# Warmup Iteration  16: 1047467.837 ops/s
# Warmup Iteration  17: 1116699.882 ops/s
# Warmup Iteration  18: 1117503.901 ops/s
# Warmup Iteration  19: 1114292.241 ops/s
# Warmup Iteration  20: 1112945.209 ops/s
# Warmup Iteration  21: 1116098.238 ops/s
# Warmup Iteration  22: 1114911.604 ops/s
# Warmup Iteration  23: 1111556.725 ops/s
# Warmup Iteration  24: 1108085.848 ops/s
# Warmup Iteration  25: 1114227.757 ops/s
# Warmup Iteration  26: 1110696.287 ops/s
# Warmup Iteration  27: 1115109.291 ops/s
# Warmup Iteration  28: 1111094.696 ops/s
# Warmup Iteration  29: 1112021.670 ops/s
# Warmup Iteration  30: 1117445.245 ops/s
Iteration   1: 1112746.143 ops/s
Iteration   2: 1114550.282 ops/s
Iteration   3: 1114353.482 ops/s
Iteration   4: 1116763.165 ops/s
Iteration   5: 1117930.632 ops/s
Iteration   6: 1118585.296 ops/s
Iteration   7: 1117596.275 ops/s
Iteration   8: 1121133.262 ops/s
Iteration   9: 1116554.030 ops/s
Iteration  10: 1116625.431 ops/s
Iteration  11: 1117028.345 ops/s
Iteration  12: 1113721.295 ops/s
Iteration  13: 1109463.444 ops/s
Iteration  14: 1117579.791 ops/s
Iteration  15: 1117957.767 ops/s
Iteration  16: 1112097.635 ops/s
Iteration  17: 1115472.546 ops/s
Iteration  18: 1116092.087 ops/s
Iteration  19: 1116836.706 ops/s
Iteration  20: 1113058.018 ops/s
Iteration  21: 1114293.799 ops/s
Iteration  22: 1117248.539 ops/s
Iteration  23: 1112958.049 ops/s
Iteration  24: 1110918.550 ops/s
Iteration  25: 1111476.861 ops/s
Iteration  26: 1114387.015 ops/s
Iteration  27: 1112991.678 ops/s
Iteration  28: 1116672.856 ops/s
Iteration  29: 1116469.751 ops/s
Iteration  30: 1114920.846 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_castToCollection":
  1115282.786 ±(99.9%) 1729.043 ops/s [Average]
  (min, avg, max) = (1109463.444, 1115282.786, 1121133.262), stdev = 2587.951
  CI (99.9%): [1113553.743, 1117011.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1115282.786 ± 1729.043  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4350307.703 ops/s
# Warmup Iteration   2: 10040531.566 ops/s
# Warmup Iteration   3: 10109137.892 ops/s
# Warmup Iteration   4: 8513019.405 ops/s
# Warmup Iteration   5: 10122859.599 ops/s
# Warmup Iteration   6: 10122347.784 ops/s
# Warmup Iteration   7: 10136119.285 ops/s
# Warmup Iteration   8: 10101703.130 ops/s
# Warmup Iteration   9: 10129647.716 ops/s
# Warmup Iteration  10: 10090469.332 ops/s
# Warmup Iteration  11: 10103913.331 ops/s
# Warmup Iteration  12: 10098134.530 ops/s
# Warmup Iteration  13: 10096021.102 ops/s
# Warmup Iteration  14: 10123265.263 ops/s
# Warmup Iteration  15: 10111733.710 ops/s
# Warmup Iteration  16: 10104043.257 ops/s
# Warmup Iteration  17: 10204048.208 ops/s
# Warmup Iteration  18: 10202211.902 ops/s
# Warmup Iteration  19: 10179629.878 ops/s
# Warmup Iteration  20: 10197378.362 ops/s
# Warmup Iteration  21: 10196603.950 ops/s
# Warmup Iteration  22: 10160750.758 ops/s
# Warmup Iteration  23: 10194541.384 ops/s
# Warmup Iteration  24: 10211293.335 ops/s
# Warmup Iteration  25: 10189640.344 ops/s
# Warmup Iteration  26: 10171318.516 ops/s
# Warmup Iteration  27: 10170400.770 ops/s
# Warmup Iteration  28: 10167282.554 ops/s
# Warmup Iteration  29: 10201788.181 ops/s
# Warmup Iteration  30: 10198868.346 ops/s
Iteration   1: 10187747.082 ops/s
Iteration   2: 10197961.591 ops/s
Iteration   3: 10184150.993 ops/s
Iteration   4: 10197327.501 ops/s
Iteration   5: 10191598.607 ops/s
Iteration   6: 10141096.452 ops/s
Iteration   7: 10150277.887 ops/s
Iteration   8: 10189508.720 ops/s
Iteration   9: 10217568.247 ops/s
Iteration  10: 10168920.777 ops/s
Iteration  11: 10215424.258 ops/s
Iteration  12: 10199232.153 ops/s
Iteration  13: 10212405.951 ops/s
Iteration  14: 10205230.190 ops/s
Iteration  15: 10198578.670 ops/s
Iteration  16: 10156888.988 ops/s
Iteration  17: 10193390.581 ops/s
Iteration  18: 10165566.249 ops/s
Iteration  19: 10144186.817 ops/s
Iteration  20: 10202996.604 ops/s
Iteration  21: 10217403.333 ops/s
Iteration  22: 10183915.780 ops/s
Iteration  23: 10204841.100 ops/s
Iteration  24: 10195250.691 ops/s
Iteration  25: 10165126.344 ops/s
Iteration  26: 10135859.532 ops/s
Iteration  27: 10163820.866 ops/s
Iteration  28: 10211716.902 ops/s
Iteration  29: 10197881.397 ops/s
Iteration  30: 10202223.402 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_large_size":
  10186603.256 ±(99.9%) 15913.663 ops/s [Average]
  (min, avg, max) = (10135859.532, 10186603.256, 10217568.247), stdev = 23818.824
  CI (99.9%): [10170689.592, 10202516.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  10186603.256 ± 15913.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 776598.945 ops/s
# Warmup Iteration   2: 816194.984 ops/s
# Warmup Iteration   3: 1033590.281 ops/s
# Warmup Iteration   4: 1030342.227 ops/s
# Warmup Iteration   5: 1028543.245 ops/s
# Warmup Iteration   6: 1033887.372 ops/s
# Warmup Iteration   7: 1035652.871 ops/s
# Warmup Iteration   8: 1035156.161 ops/s
# Warmup Iteration   9: 1030635.157 ops/s
# Warmup Iteration  10: 1032909.996 ops/s
# Warmup Iteration  11: 1011934.737 ops/s
# Warmup Iteration  12: 912774.177 ops/s
# Warmup Iteration  13: 999987.927 ops/s
# Warmup Iteration  14: 1028399.096 ops/s
# Warmup Iteration  15: 1030787.739 ops/s
# Warmup Iteration  16: 1030251.052 ops/s
# Warmup Iteration  17: 1094547.577 ops/s
# Warmup Iteration  18: 1097541.432 ops/s
# Warmup Iteration  19: 1097242.085 ops/s
# Warmup Iteration  20: 1093876.844 ops/s
# Warmup Iteration  21: 1096713.117 ops/s
# Warmup Iteration  22: 1094547.384 ops/s
# Warmup Iteration  23: 1094675.034 ops/s
# Warmup Iteration  24: 1095529.483 ops/s
# Warmup Iteration  25: 1094927.853 ops/s
# Warmup Iteration  26: 1095850.726 ops/s
# Warmup Iteration  27: 1098305.114 ops/s
# Warmup Iteration  28: 1092719.301 ops/s
# Warmup Iteration  29: 1096216.575 ops/s
# Warmup Iteration  30: 1092581.920 ops/s
Iteration   1: 1092519.139 ops/s
Iteration   2: 1095190.695 ops/s
Iteration   3: 1097721.560 ops/s
Iteration   4: 1098149.688 ops/s
Iteration   5: 1097055.538 ops/s
Iteration   6: 1089327.198 ops/s
Iteration   7: 1095793.264 ops/s
Iteration   8: 1096408.656 ops/s
Iteration   9: 1094492.001 ops/s
Iteration  10: 1093846.632 ops/s
Iteration  11: 1099406.051 ops/s
Iteration  12: 1098963.355 ops/s
Iteration  13: 1096820.970 ops/s
Iteration  14: 1097382.428 ops/s
Iteration  15: 1097630.199 ops/s
Iteration  16: 1097708.769 ops/s
Iteration  17: 1092547.883 ops/s
Iteration  18: 1094734.895 ops/s
Iteration  19: 1098187.650 ops/s
Iteration  20: 1098927.343 ops/s
Iteration  21: 1095519.494 ops/s
Iteration  22: 1095578.088 ops/s
Iteration  23: 1093514.224 ops/s
Iteration  24: 1094580.137 ops/s
Iteration  25: 1091666.127 ops/s
Iteration  26: 1093605.554 ops/s
Iteration  27: 1096504.389 ops/s
Iteration  28: 1096958.633 ops/s
Iteration  29: 1093440.506 ops/s
Iteration  30: 1090482.108 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1095488.772 ±(99.9%) 1719.040 ops/s [Average]
  (min, avg, max) = (1089327.198, 1095488.772, 1099406.051), stdev = 2572.978
  CI (99.9%): [1093769.733, 1097207.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1095488.772 ± 1719.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750146.913 ops/s
# Warmup Iteration   2: 787441.091 ops/s
# Warmup Iteration   3: 1005428.274 ops/s
# Warmup Iteration   4: 999335.849 ops/s
# Warmup Iteration   5: 994072.779 ops/s
# Warmup Iteration   6: 1000091.129 ops/s
# Warmup Iteration   7: 998030.703 ops/s
# Warmup Iteration   8: 998318.761 ops/s
# Warmup Iteration   9: 998643.196 ops/s
# Warmup Iteration  10: 994142.845 ops/s
# Warmup Iteration  11: 990397.924 ops/s
# Warmup Iteration  12: 848878.923 ops/s
# Warmup Iteration  13: 999360.377 ops/s
# Warmup Iteration  14: 1002219.620 ops/s
# Warmup Iteration  15: 999502.433 ops/s
# Warmup Iteration  16: 999307.448 ops/s
# Warmup Iteration  17: 1055341.176 ops/s
# Warmup Iteration  18: 1058021.206 ops/s
# Warmup Iteration  19: 1058174.155 ops/s
# Warmup Iteration  20: 1063184.753 ops/s
# Warmup Iteration  21: 1057944.853 ops/s
# Warmup Iteration  22: 1057330.674 ops/s
# Warmup Iteration  23: 1056761.340 ops/s
# Warmup Iteration  24: 1058115.425 ops/s
# Warmup Iteration  25: 1058490.923 ops/s
# Warmup Iteration  26: 1056076.702 ops/s
# Warmup Iteration  27: 1057520.629 ops/s
# Warmup Iteration  28: 1060551.169 ops/s
# Warmup Iteration  29: 1057558.399 ops/s
# Warmup Iteration  30: 1058599.076 ops/s
Iteration   1: 1057705.567 ops/s
Iteration   2: 1058375.963 ops/s
Iteration   3: 1060941.102 ops/s
Iteration   4: 1056030.942 ops/s
Iteration   5: 1058123.055 ops/s
Iteration   6: 1055051.009 ops/s
Iteration   7: 1056101.973 ops/s
Iteration   8: 1061447.670 ops/s
Iteration   9: 1050322.535 ops/s
Iteration  10: 1050315.341 ops/s
Iteration  11: 1055123.923 ops/s
Iteration  12: 1058639.893 ops/s
Iteration  13: 1057027.051 ops/s
Iteration  14: 1058239.434 ops/s
Iteration  15: 1059805.303 ops/s
Iteration  16: 1060631.886 ops/s
Iteration  17: 1061612.357 ops/s
Iteration  18: 1053099.504 ops/s
Iteration  19: 1056673.935 ops/s
Iteration  20: 1059207.899 ops/s
Iteration  21: 1058646.066 ops/s
Iteration  22: 1057325.936 ops/s
Iteration  23: 1058845.547 ops/s
Iteration  24: 1061077.846 ops/s
Iteration  25: 1062071.275 ops/s
Iteration  26: 1059227.289 ops/s
Iteration  27: 1061077.220 ops/s
Iteration  28: 1063610.452 ops/s
Iteration  29: 1049305.811 ops/s
Iteration  30: 1055384.750 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_clear":
  1057701.618 ±(99.9%) 2370.109 ops/s [Average]
  (min, avg, max) = (1049305.811, 1057701.618, 1063610.452), stdev = 3547.468
  CI (99.9%): [1055331.509, 1060071.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_clear  thrpt   30  1057701.618 ± 2370.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6696444.451 ops/s
# Warmup Iteration   2: 12874514.757 ops/s
# Warmup Iteration   3: 13512357.256 ops/s
# Warmup Iteration   4: 13564651.067 ops/s
# Warmup Iteration   5: 11409150.453 ops/s
# Warmup Iteration   6: 13495785.129 ops/s
# Warmup Iteration   7: 13446143.687 ops/s
# Warmup Iteration   8: 13543522.220 ops/s
# Warmup Iteration   9: 13570603.660 ops/s
# Warmup Iteration  10: 13550684.316 ops/s
# Warmup Iteration  11: 13510046.089 ops/s
# Warmup Iteration  12: 13521633.659 ops/s
# Warmup Iteration  13: 13581904.185 ops/s
# Warmup Iteration  14: 13575936.050 ops/s
# Warmup Iteration  15: 13556526.777 ops/s
# Warmup Iteration  16: 13593416.052 ops/s
# Warmup Iteration  17: 13569452.741 ops/s
# Warmup Iteration  18: 13555941.976 ops/s
# Warmup Iteration  19: 13600122.007 ops/s
# Warmup Iteration  20: 13577709.963 ops/s
# Warmup Iteration  21: 13591389.420 ops/s
# Warmup Iteration  22: 13578793.616 ops/s
# Warmup Iteration  23: 13581411.092 ops/s
# Warmup Iteration  24: 13588349.252 ops/s
# Warmup Iteration  25: 13567179.555 ops/s
# Warmup Iteration  26: 13537057.952 ops/s
# Warmup Iteration  27: 13585538.476 ops/s
# Warmup Iteration  28: 13585530.354 ops/s
# Warmup Iteration  29: 13497409.561 ops/s
# Warmup Iteration  30: 13540456.280 ops/s
Iteration   1: 13516331.094 ops/s
Iteration   2: 13600222.865 ops/s
Iteration   3: 13600845.800 ops/s
Iteration   4: 13573934.498 ops/s
Iteration   5: 13588111.147 ops/s
Iteration   6: 13528585.935 ops/s
Iteration   7: 13544072.442 ops/s
Iteration   8: 13587716.062 ops/s
Iteration   9: 13593760.841 ops/s
Iteration  10: 13573922.504 ops/s
Iteration  11: 13568118.314 ops/s
Iteration  12: 13526022.636 ops/s
Iteration  13: 13546938.098 ops/s
Iteration  14: 13519461.341 ops/s
Iteration  15: 13621501.137 ops/s
Iteration  16: 13562630.749 ops/s
Iteration  17: 13555303.697 ops/s
Iteration  18: 13617009.313 ops/s
Iteration  19: 13541116.481 ops/s
Iteration  20: 13547302.641 ops/s
Iteration  21: 13561868.716 ops/s
Iteration  22: 13590198.583 ops/s
Iteration  23: 13538557.677 ops/s
Iteration  24: 13537465.267 ops/s
Iteration  25: 13498521.871 ops/s
Iteration  26: 13523084.641 ops/s
Iteration  27: 13562552.130 ops/s
Iteration  28: 13583545.253 ops/s
Iteration  29: 13551957.257 ops/s
Iteration  30: 13539390.136 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect":
  13560001.638 ±(99.9%) 20837.554 ops/s [Average]
  (min, avg, max) = (13498521.871, 13560001.638, 13621501.137), stdev = 31188.672
  CI (99.9%): [13539164.084, 13580839.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collect  thrpt   30  13560001.638 ± 20837.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4125003.214 ops/s
# Warmup Iteration   2: 10497214.239 ops/s
# Warmup Iteration   3: 10455977.778 ops/s
# Warmup Iteration   4: 8776985.312 ops/s
# Warmup Iteration   5: 10597118.412 ops/s
# Warmup Iteration   6: 10616750.924 ops/s
# Warmup Iteration   7: 10576761.283 ops/s
# Warmup Iteration   8: 10588447.667 ops/s
# Warmup Iteration   9: 10608412.624 ops/s
# Warmup Iteration  10: 10547280.035 ops/s
# Warmup Iteration  11: 10576185.377 ops/s
# Warmup Iteration  12: 10574939.047 ops/s
# Warmup Iteration  13: 10605384.601 ops/s
# Warmup Iteration  14: 10595854.918 ops/s
# Warmup Iteration  15: 10550320.617 ops/s
# Warmup Iteration  16: 10533101.883 ops/s
# Warmup Iteration  17: 10586819.281 ops/s
# Warmup Iteration  18: 10559694.157 ops/s
# Warmup Iteration  19: 10627006.102 ops/s
# Warmup Iteration  20: 10523256.820 ops/s
# Warmup Iteration  21: 10597129.286 ops/s
# Warmup Iteration  22: 10591686.598 ops/s
# Warmup Iteration  23: 10596975.845 ops/s
# Warmup Iteration  24: 10607388.196 ops/s
# Warmup Iteration  25: 10599015.203 ops/s
# Warmup Iteration  26: 10587449.792 ops/s
# Warmup Iteration  27: 10615926.255 ops/s
# Warmup Iteration  28: 10614457.083 ops/s
# Warmup Iteration  29: 10575966.323 ops/s
# Warmup Iteration  30: 10615632.941 ops/s
Iteration   1: 10616823.776 ops/s
Iteration   2: 10615108.670 ops/s
Iteration   3: 10610638.800 ops/s
Iteration   4: 10600856.146 ops/s
Iteration   5: 10618333.797 ops/s
Iteration   6: 10587825.036 ops/s
Iteration   7: 10514985.027 ops/s
Iteration   8: 10533461.217 ops/s
Iteration   9: 10626103.535 ops/s
Iteration  10: 10615238.016 ops/s
Iteration  11: 10598552.318 ops/s
Iteration  12: 10572082.003 ops/s
Iteration  13: 10629290.847 ops/s
Iteration  14: 10629523.948 ops/s
Iteration  15: 10566299.391 ops/s
Iteration  16: 10539176.847 ops/s
Iteration  17: 10533900.535 ops/s
Iteration  18: 10597329.912 ops/s
Iteration  19: 10600984.154 ops/s
Iteration  20: 10621674.764 ops/s
Iteration  21: 10573789.282 ops/s
Iteration  22: 10546579.286 ops/s
Iteration  23: 10597456.132 ops/s
Iteration  24: 10620332.217 ops/s
Iteration  25: 10593999.836 ops/s
Iteration  26: 10623077.396 ops/s
Iteration  27: 10596374.420 ops/s
Iteration  28: 10599060.296 ops/s
Iteration  29: 10560237.532 ops/s
Iteration  30: 10564154.166 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectBoolean":
  10590108.310 ±(99.9%) 21612.092 ops/s [Average]
  (min, avg, max) = (10514985.027, 10590108.310, 10629523.948), stdev = 32347.964
  CI (99.9%): [10568496.218, 10611720.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  10590108.310 ± 21612.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3518923.696 ops/s
# Warmup Iteration   2: 6861223.797 ops/s
# Warmup Iteration   3: 7527072.140 ops/s
# Warmup Iteration   4: 7578888.902 ops/s
# Warmup Iteration   5: 6215087.708 ops/s
# Warmup Iteration   6: 7586614.961 ops/s
# Warmup Iteration   7: 7569800.490 ops/s
# Warmup Iteration   8: 7572154.285 ops/s
# Warmup Iteration   9: 7577629.382 ops/s
# Warmup Iteration  10: 7589223.948 ops/s
# Warmup Iteration  11: 7588512.889 ops/s
# Warmup Iteration  12: 7571436.956 ops/s
# Warmup Iteration  13: 7574883.773 ops/s
# Warmup Iteration  14: 7581688.195 ops/s
# Warmup Iteration  15: 7582428.435 ops/s
# Warmup Iteration  16: 7586539.506 ops/s
# Warmup Iteration  17: 7602853.527 ops/s
# Warmup Iteration  18: 7608984.883 ops/s
# Warmup Iteration  19: 7645114.926 ops/s
# Warmup Iteration  20: 7615962.613 ops/s
# Warmup Iteration  21: 7627505.914 ops/s
# Warmup Iteration  22: 7630548.077 ops/s
# Warmup Iteration  23: 7628620.302 ops/s
# Warmup Iteration  24: 7626347.625 ops/s
# Warmup Iteration  25: 7626410.280 ops/s
# Warmup Iteration  26: 7610596.992 ops/s
# Warmup Iteration  27: 7620825.714 ops/s
# Warmup Iteration  28: 7624439.811 ops/s
# Warmup Iteration  29: 7630395.386 ops/s
# Warmup Iteration  30: 7622947.326 ops/s
Iteration   1: 7640140.957 ops/s
Iteration   2: 7635411.918 ops/s
Iteration   3: 7622297.063 ops/s
Iteration   4: 7639889.469 ops/s
Iteration   5: 7631063.307 ops/s
Iteration   6: 7639636.576 ops/s
Iteration   7: 7630019.509 ops/s
Iteration   8: 7627785.424 ops/s
Iteration   9: 7634663.517 ops/s
Iteration  10: 7644650.601 ops/s
Iteration  11: 7591420.559 ops/s
Iteration  12: 7631530.017 ops/s
Iteration  13: 7648504.059 ops/s
Iteration  14: 7633414.459 ops/s
Iteration  15: 7640154.428 ops/s
Iteration  16: 7632964.391 ops/s
Iteration  17: 7625067.938 ops/s
Iteration  18: 7626241.913 ops/s
Iteration  19: 7659082.557 ops/s
Iteration  20: 7629056.367 ops/s
Iteration  21: 7618665.980 ops/s
Iteration  22: 7643391.653 ops/s
Iteration  23: 7624720.160 ops/s
Iteration  24: 7645208.387 ops/s
Iteration  25: 7625520.227 ops/s
Iteration  26: 7628700.377 ops/s
Iteration  27: 7604631.284 ops/s
Iteration  28: 7619275.000 ops/s
Iteration  29: 7631436.758 ops/s
Iteration  30: 7644381.028 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectByte":
  7631630.863 ±(99.9%) 8722.400 ops/s [Average]
  (min, avg, max) = (7591420.559, 7631630.863, 7659082.557), stdev = 13055.279
  CI (99.9%): [7622908.463, 7640353.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectByte  thrpt   30  7631630.863 ± 8722.400  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3541478.654 ops/s
# Warmup Iteration   2: 7052959.553 ops/s
# Warmup Iteration   3: 7608584.099 ops/s
# Warmup Iteration   4: 7670828.471 ops/s
# Warmup Iteration   5: 6330791.873 ops/s
# Warmup Iteration   6: 7679130.124 ops/s
# Warmup Iteration   7: 7681959.435 ops/s
# Warmup Iteration   8: 7680884.107 ops/s
# Warmup Iteration   9: 7672779.176 ops/s
# Warmup Iteration  10: 7683442.487 ops/s
# Warmup Iteration  11: 7674276.808 ops/s
# Warmup Iteration  12: 7678348.104 ops/s
# Warmup Iteration  13: 7678092.076 ops/s
# Warmup Iteration  14: 7672816.091 ops/s
# Warmup Iteration  15: 7680531.054 ops/s
# Warmup Iteration  16: 7669469.187 ops/s
# Warmup Iteration  17: 7736438.102 ops/s
# Warmup Iteration  18: 7740244.136 ops/s
# Warmup Iteration  19: 7711406.106 ops/s
# Warmup Iteration  20: 7738338.096 ops/s
# Warmup Iteration  21: 7746709.912 ops/s
# Warmup Iteration  22: 7742865.324 ops/s
# Warmup Iteration  23: 7738397.651 ops/s
# Warmup Iteration  24: 7746803.232 ops/s
# Warmup Iteration  25: 7732450.039 ops/s
# Warmup Iteration  26: 7737484.745 ops/s
# Warmup Iteration  27: 7730005.804 ops/s
# Warmup Iteration  28: 7746939.015 ops/s
# Warmup Iteration  29: 7731172.563 ops/s
# Warmup Iteration  30: 7737336.342 ops/s
Iteration   1: 7729531.641 ops/s
Iteration   2: 7733533.601 ops/s
Iteration   3: 7721968.457 ops/s
Iteration   4: 7717629.842 ops/s
Iteration   5: 7727894.116 ops/s
Iteration   6: 7730136.915 ops/s
Iteration   7: 7714023.199 ops/s
Iteration   8: 7713965.512 ops/s
Iteration   9: 7758418.461 ops/s
Iteration  10: 7740707.954 ops/s
Iteration  11: 7733898.781 ops/s
Iteration  12: 7703651.046 ops/s
Iteration  13: 7710459.426 ops/s
Iteration  14: 7679799.931 ops/s
Iteration  15: 7751554.536 ops/s
Iteration  16: 7729419.648 ops/s
Iteration  17: 7742004.060 ops/s
Iteration  18: 7751005.195 ops/s
Iteration  19: 7730466.660 ops/s
Iteration  20: 7722037.340 ops/s
Iteration  21: 7749601.281 ops/s
Iteration  22: 7741411.282 ops/s
Iteration  23: 7744551.601 ops/s
Iteration  24: 7741833.110 ops/s
Iteration  25: 7738417.711 ops/s
Iteration  26: 7735923.784 ops/s
Iteration  27: 7742488.531 ops/s
Iteration  28: 7737238.982 ops/s
Iteration  29: 7749754.356 ops/s
Iteration  30: 7726894.449 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectChar":
  7731674.047 ±(99.9%) 11020.797 ops/s [Average]
  (min, avg, max) = (7679799.931, 7731674.047, 7758418.461), stdev = 16495.411
  CI (99.9%): [7720653.250, 7742694.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectChar  thrpt   30  7731674.047 ± 11020.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3445744.732 ops/s
# Warmup Iteration   2: 7093714.955 ops/s
# Warmup Iteration   3: 7595389.270 ops/s
# Warmup Iteration   4: 7630257.478 ops/s
# Warmup Iteration   5: 6332432.066 ops/s
# Warmup Iteration   6: 7641153.641 ops/s
# Warmup Iteration   7: 7629919.754 ops/s
# Warmup Iteration   8: 7638148.228 ops/s
# Warmup Iteration   9: 7632029.340 ops/s
# Warmup Iteration  10: 7646629.424 ops/s
# Warmup Iteration  11: 7645172.746 ops/s
# Warmup Iteration  12: 7626797.260 ops/s
# Warmup Iteration  13: 7632700.196 ops/s
# Warmup Iteration  14: 7633291.057 ops/s
# Warmup Iteration  15: 7630774.693 ops/s
# Warmup Iteration  16: 7604504.440 ops/s
# Warmup Iteration  17: 7632881.901 ops/s
# Warmup Iteration  18: 7641591.311 ops/s
# Warmup Iteration  19: 7609854.227 ops/s
# Warmup Iteration  20: 7647893.456 ops/s
# Warmup Iteration  21: 7622051.172 ops/s
# Warmup Iteration  22: 7638810.918 ops/s
# Warmup Iteration  23: 7651757.466 ops/s
# Warmup Iteration  24: 7630169.328 ops/s
# Warmup Iteration  25: 7641193.676 ops/s
# Warmup Iteration  26: 7625978.953 ops/s
# Warmup Iteration  27: 7642343.509 ops/s
# Warmup Iteration  28: 7631673.650 ops/s
# Warmup Iteration  29: 7631320.345 ops/s
# Warmup Iteration  30: 7628351.124 ops/s
Iteration   1: 7636485.858 ops/s
Iteration   2: 7636247.332 ops/s
Iteration   3: 7651071.654 ops/s
Iteration   4: 7668926.168 ops/s
Iteration   5: 7636405.488 ops/s
Iteration   6: 7605191.671 ops/s
Iteration   7: 7652594.972 ops/s
Iteration   8: 7630970.051 ops/s
Iteration   9: 7635703.183 ops/s
Iteration  10: 7623763.194 ops/s
Iteration  11: 7620845.331 ops/s
Iteration  12: 7632883.130 ops/s
Iteration  13: 7642702.277 ops/s
Iteration  14: 7636670.547 ops/s
Iteration  15: 7630227.207 ops/s
Iteration  16: 7629117.273 ops/s
Iteration  17: 7648950.991 ops/s
Iteration  18: 7642479.968 ops/s
Iteration  19: 7637792.664 ops/s
Iteration  20: 7661951.560 ops/s
Iteration  21: 7644822.434 ops/s
Iteration  22: 7633666.934 ops/s
Iteration  23: 7626210.519 ops/s
Iteration  24: 7652687.705 ops/s
Iteration  25: 7632560.165 ops/s
Iteration  26: 7644706.719 ops/s
Iteration  27: 7642416.977 ops/s
Iteration  28: 7625349.019 ops/s
Iteration  29: 7642443.243 ops/s
Iteration  30: 7649026.053 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectDouble":
  7638495.676 ±(99.9%) 8494.161 ops/s [Average]
  (min, avg, max) = (7605191.671, 7638495.676, 7668926.168), stdev = 12713.661
  CI (99.9%): [7630001.515, 7646989.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  7638495.676 ± 8494.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3568273.887 ops/s
# Warmup Iteration   2: 7139412.099 ops/s
# Warmup Iteration   3: 7778420.570 ops/s
# Warmup Iteration   4: 7810408.050 ops/s
# Warmup Iteration   5: 6445938.518 ops/s
# Warmup Iteration   6: 7826667.991 ops/s
# Warmup Iteration   7: 7812485.115 ops/s
# Warmup Iteration   8: 7795962.382 ops/s
# Warmup Iteration   9: 7828475.826 ops/s
# Warmup Iteration  10: 7822504.905 ops/s
# Warmup Iteration  11: 7820864.204 ops/s
# Warmup Iteration  12: 7817104.986 ops/s
# Warmup Iteration  13: 7819580.629 ops/s
# Warmup Iteration  14: 7797664.025 ops/s
# Warmup Iteration  15: 7822016.301 ops/s
# Warmup Iteration  16: 7815783.218 ops/s
# Warmup Iteration  17: 7822434.206 ops/s
# Warmup Iteration  18: 7827069.451 ops/s
# Warmup Iteration  19: 7819352.863 ops/s
# Warmup Iteration  20: 7830120.403 ops/s
# Warmup Iteration  21: 7827046.409 ops/s
# Warmup Iteration  22: 7817980.893 ops/s
# Warmup Iteration  23: 7805801.114 ops/s
# Warmup Iteration  24: 7819996.604 ops/s
# Warmup Iteration  25: 7819352.219 ops/s
# Warmup Iteration  26: 7811329.470 ops/s
# Warmup Iteration  27: 7815585.026 ops/s
# Warmup Iteration  28: 7827488.235 ops/s
# Warmup Iteration  29: 7820488.509 ops/s
# Warmup Iteration  30: 7809266.816 ops/s
Iteration   1: 7827994.236 ops/s
Iteration   2: 7793100.425 ops/s
Iteration   3: 7818746.703 ops/s
Iteration   4: 7839304.642 ops/s
Iteration   5: 7798337.120 ops/s
Iteration   6: 7786553.608 ops/s
Iteration   7: 7819796.614 ops/s
Iteration   8: 7815329.780 ops/s
Iteration   9: 7824129.777 ops/s
Iteration  10: 7841408.093 ops/s
Iteration  11: 7817233.962 ops/s
Iteration  12: 7809434.430 ops/s
Iteration  13: 7756090.603 ops/s
Iteration  14: 7843819.378 ops/s
Iteration  15: 7814141.201 ops/s
Iteration  16: 7827439.158 ops/s
Iteration  17: 7819000.255 ops/s
Iteration  18: 7816427.743 ops/s
Iteration  19: 7810932.152 ops/s
Iteration  20: 7836281.034 ops/s
Iteration  21: 7820519.412 ops/s
Iteration  22: 7825430.575 ops/s
Iteration  23: 7832188.571 ops/s
Iteration  24: 7808839.001 ops/s
Iteration  25: 7790496.123 ops/s
Iteration  26: 7833481.513 ops/s
Iteration  27: 7821687.144 ops/s
Iteration  28: 7840612.634 ops/s
Iteration  29: 7823726.851 ops/s
Iteration  30: 7816663.814 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectFloat":
  7817638.218 ±(99.9%) 12474.099 ops/s [Average]
  (min, avg, max) = (7756090.603, 7817638.218, 7843819.378), stdev = 18670.646
  CI (99.9%): [7805164.119, 7830112.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  7817638.218 ± 12474.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7897796.735 ops/s
# Warmup Iteration   2: 17961178.402 ops/s
# Warmup Iteration   3: 18046323.312 ops/s
# Warmup Iteration   4: 15228526.390 ops/s
# Warmup Iteration   5: 18136418.927 ops/s
# Warmup Iteration   6: 18140300.842 ops/s
# Warmup Iteration   7: 18121006.626 ops/s
# Warmup Iteration   8: 18156487.172 ops/s
# Warmup Iteration   9: 18131250.680 ops/s
# Warmup Iteration  10: 18143119.291 ops/s
# Warmup Iteration  11: 18148493.109 ops/s
# Warmup Iteration  12: 18132045.382 ops/s
# Warmup Iteration  13: 18121453.598 ops/s
# Warmup Iteration  14: 18148297.377 ops/s
# Warmup Iteration  15: 18140407.174 ops/s
# Warmup Iteration  16: 18156434.917 ops/s
# Warmup Iteration  17: 17982125.325 ops/s
# Warmup Iteration  18: 18009828.931 ops/s
# Warmup Iteration  19: 18011255.695 ops/s
# Warmup Iteration  20: 18029624.698 ops/s
# Warmup Iteration  21: 18004912.367 ops/s
# Warmup Iteration  22: 18016530.245 ops/s
# Warmup Iteration  23: 18030322.371 ops/s
# Warmup Iteration  24: 18024745.565 ops/s
# Warmup Iteration  25: 17982358.427 ops/s
# Warmup Iteration  26: 18009237.726 ops/s
# Warmup Iteration  27: 18042106.649 ops/s
# Warmup Iteration  28: 18025076.830 ops/s
# Warmup Iteration  29: 17985348.903 ops/s
# Warmup Iteration  30: 18027543.058 ops/s
Iteration   1: 18011948.965 ops/s
Iteration   2: 18024881.733 ops/s
Iteration   3: 18022964.289 ops/s
Iteration   4: 17895913.198 ops/s
Iteration   5: 17962853.820 ops/s
Iteration   6: 18024406.576 ops/s
Iteration   7: 18063038.750 ops/s
Iteration   8: 18021262.148 ops/s
Iteration   9: 17996807.742 ops/s
Iteration  10: 17964568.295 ops/s
Iteration  11: 17922785.688 ops/s
Iteration  12: 18000583.139 ops/s
Iteration  13: 18036909.459 ops/s
Iteration  14: 18054489.888 ops/s
Iteration  15: 17985229.006 ops/s
Iteration  16: 17974720.258 ops/s
Iteration  17: 18029532.121 ops/s
Iteration  18: 17940457.135 ops/s
Iteration  19: 17996552.654 ops/s
Iteration  20: 18028302.184 ops/s
Iteration  21: 17996967.382 ops/s
Iteration  22: 18035584.892 ops/s
Iteration  23: 18022669.781 ops/s
Iteration  24: 17962485.586 ops/s
Iteration  25: 17971460.291 ops/s
Iteration  26: 18001951.536 ops/s
Iteration  27: 17989295.478 ops/s
Iteration  28: 18014540.177 ops/s
Iteration  29: 17975705.569 ops/s
Iteration  30: 18001291.028 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIf":
  17997671.959 ±(99.9%) 25103.631 ops/s [Average]
  (min, avg, max) = (17895913.198, 17997671.959, 18063038.750), stdev = 37573.936
  CI (99.9%): [17972568.328, 18022775.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectIf  thrpt   30  17997671.959 ± 25103.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14391316.893 ops/s
# Warmup Iteration   2: 30589993.671 ops/s
# Warmup Iteration   3: 25913128.799 ops/s
# Warmup Iteration   4: 30660464.628 ops/s
# Warmup Iteration   5: 30690765.667 ops/s
# Warmup Iteration   6: 30639129.155 ops/s
# Warmup Iteration   7: 30646603.386 ops/s
# Warmup Iteration   8: 30604741.451 ops/s
# Warmup Iteration   9: 30729349.570 ops/s
# Warmup Iteration  10: 30543174.352 ops/s
# Warmup Iteration  11: 30672214.742 ops/s
# Warmup Iteration  12: 30688009.975 ops/s
# Warmup Iteration  13: 30592764.606 ops/s
# Warmup Iteration  14: 30589553.404 ops/s
# Warmup Iteration  15: 30698277.764 ops/s
# Warmup Iteration  16: 30726760.486 ops/s
# Warmup Iteration  17: 30682202.765 ops/s
# Warmup Iteration  18: 30643671.426 ops/s
# Warmup Iteration  19: 30683949.773 ops/s
# Warmup Iteration  20: 30678112.049 ops/s
# Warmup Iteration  21: 30557578.920 ops/s
# Warmup Iteration  22: 30721314.946 ops/s
# Warmup Iteration  23: 30710621.618 ops/s
# Warmup Iteration  24: 30675022.762 ops/s
# Warmup Iteration  25: 30685140.276 ops/s
# Warmup Iteration  26: 30627374.906 ops/s
# Warmup Iteration  27: 30665130.100 ops/s
# Warmup Iteration  28: 30551926.702 ops/s
# Warmup Iteration  29: 30713875.290 ops/s
# Warmup Iteration  30: 30570940.145 ops/s
Iteration   1: 30624773.431 ops/s
Iteration   2: 30700966.091 ops/s
Iteration   3: 30693269.011 ops/s
Iteration   4: 30796711.357 ops/s
Iteration   5: 30452694.694 ops/s
Iteration   6: 30626029.361 ops/s
Iteration   7: 30731418.737 ops/s
Iteration   8: 30654914.389 ops/s
Iteration   9: 30719590.226 ops/s
Iteration  10: 30610673.517 ops/s
Iteration  11: 30766114.281 ops/s
Iteration  12: 30617595.103 ops/s
Iteration  13: 30807632.539 ops/s
Iteration  14: 30610400.696 ops/s
Iteration  15: 30756191.763 ops/s
Iteration  16: 30677244.540 ops/s
Iteration  17: 30750373.201 ops/s
Iteration  18: 30734818.648 ops/s
Iteration  19: 30596395.516 ops/s
Iteration  20: 30650161.073 ops/s
Iteration  21: 30658224.346 ops/s
Iteration  22: 30694969.265 ops/s
Iteration  23: 30721348.505 ops/s
Iteration  24: 30614611.896 ops/s
Iteration  25: 30647508.488 ops/s
Iteration  26: 30763069.546 ops/s
Iteration  27: 30581751.632 ops/s
Iteration  28: 30637813.411 ops/s
Iteration  29: 29946495.710 ops/s
Iteration  30: 29841366.806 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectIfWithTarget":
  30622837.593 ±(99.9%) 141727.556 ops/s [Average]
  (min, avg, max) = (29841366.806, 30622837.593, 30807632.539), stdev = 212131.149
  CI (99.9%): [30481110.037, 30764565.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  30622837.593 ± 141727.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3589943.077 ops/s
# Warmup Iteration   2: 7199264.759 ops/s
# Warmup Iteration   3: 7758646.915 ops/s
# Warmup Iteration   4: 7815264.904 ops/s
# Warmup Iteration   5: 6452518.010 ops/s
# Warmup Iteration   6: 7829014.624 ops/s
# Warmup Iteration   7: 7826021.285 ops/s
# Warmup Iteration   8: 7824920.822 ops/s
# Warmup Iteration   9: 7819237.861 ops/s
# Warmup Iteration  10: 7820174.725 ops/s
# Warmup Iteration  11: 7826517.812 ops/s
# Warmup Iteration  12: 7823691.082 ops/s
# Warmup Iteration  13: 7812882.453 ops/s
# Warmup Iteration  14: 7825354.840 ops/s
# Warmup Iteration  15: 7820635.130 ops/s
# Warmup Iteration  16: 7811709.169 ops/s
# Warmup Iteration  17: 7792359.513 ops/s
# Warmup Iteration  18: 7818957.879 ops/s
# Warmup Iteration  19: 7795235.386 ops/s
# Warmup Iteration  20: 7800657.997 ops/s
# Warmup Iteration  21: 7792977.637 ops/s
# Warmup Iteration  22: 7811940.716 ops/s
# Warmup Iteration  23: 7800920.143 ops/s
# Warmup Iteration  24: 7790035.766 ops/s
# Warmup Iteration  25: 7811869.997 ops/s
# Warmup Iteration  26: 7818760.050 ops/s
# Warmup Iteration  27: 7807532.516 ops/s
# Warmup Iteration  28: 7828250.607 ops/s
# Warmup Iteration  29: 7788941.444 ops/s
# Warmup Iteration  30: 7829101.296 ops/s
Iteration   1: 7803983.402 ops/s
Iteration   2: 7783915.473 ops/s
Iteration   3: 7755203.006 ops/s
Iteration   4: 7806544.812 ops/s
Iteration   5: 7749413.826 ops/s
Iteration   6: 7815067.989 ops/s
Iteration   7: 7825488.488 ops/s
Iteration   8: 7813322.189 ops/s
Iteration   9: 7783469.864 ops/s
Iteration  10: 7827472.175 ops/s
Iteration  11: 7773145.798 ops/s
Iteration  12: 7813450.842 ops/s
Iteration  13: 7834275.798 ops/s
Iteration  14: 7795707.122 ops/s
Iteration  15: 7767257.323 ops/s
Iteration  16: 7776259.463 ops/s
Iteration  17: 7775729.628 ops/s
Iteration  18: 7807896.705 ops/s
Iteration  19: 7815884.525 ops/s
Iteration  20: 7802625.172 ops/s
Iteration  21: 7763993.716 ops/s
Iteration  22: 7783398.710 ops/s
Iteration  23: 7822285.474 ops/s
Iteration  24: 7785447.565 ops/s
Iteration  25: 7809988.578 ops/s
Iteration  26: 7832106.474 ops/s
Iteration  27: 7813101.292 ops/s
Iteration  28: 7804865.489 ops/s
Iteration  29: 7821953.413 ops/s
Iteration  30: 7805396.993 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectInt":
  7798955.043 ±(99.9%) 15541.224 ops/s [Average]
  (min, avg, max) = (7749413.826, 7798955.043, 7834275.798), stdev = 23261.374
  CI (99.9%): [7783413.820, 7814496.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectInt  thrpt   30  7798955.043 ± 15541.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3480757.043 ops/s
# Warmup Iteration   2: 7298110.601 ops/s
# Warmup Iteration   3: 7752564.455 ops/s
# Warmup Iteration   4: 7812846.607 ops/s
# Warmup Iteration   5: 6457074.631 ops/s
# Warmup Iteration   6: 7824743.735 ops/s
# Warmup Iteration   7: 7824505.223 ops/s
# Warmup Iteration   8: 7833486.489 ops/s
# Warmup Iteration   9: 7807279.436 ops/s
# Warmup Iteration  10: 7836144.763 ops/s
# Warmup Iteration  11: 7833115.952 ops/s
# Warmup Iteration  12: 7826058.123 ops/s
# Warmup Iteration  13: 7823404.029 ops/s
# Warmup Iteration  14: 7823943.559 ops/s
# Warmup Iteration  15: 7826338.610 ops/s
# Warmup Iteration  16: 7828370.579 ops/s
# Warmup Iteration  17: 7823452.693 ops/s
# Warmup Iteration  18: 7817048.294 ops/s
# Warmup Iteration  19: 7824116.207 ops/s
# Warmup Iteration  20: 7814566.849 ops/s
# Warmup Iteration  21: 7813086.162 ops/s
# Warmup Iteration  22: 7817032.016 ops/s
# Warmup Iteration  23: 7833757.989 ops/s
# Warmup Iteration  24: 7824352.834 ops/s
# Warmup Iteration  25: 7827186.905 ops/s
# Warmup Iteration  26: 7802345.510 ops/s
# Warmup Iteration  27: 7842341.683 ops/s
# Warmup Iteration  28: 7837591.325 ops/s
# Warmup Iteration  29: 7833065.854 ops/s
# Warmup Iteration  30: 7839786.041 ops/s
Iteration   1: 7821865.469 ops/s
Iteration   2: 7833270.257 ops/s
Iteration   3: 7765733.517 ops/s
Iteration   4: 7835154.327 ops/s
Iteration   5: 7823974.644 ops/s
Iteration   6: 7839902.774 ops/s
Iteration   7: 7846950.791 ops/s
Iteration   8: 7823758.754 ops/s
Iteration   9: 7830712.559 ops/s
Iteration  10: 7830527.621 ops/s
Iteration  11: 7845604.512 ops/s
Iteration  12: 7827802.265 ops/s
Iteration  13: 7835766.602 ops/s
Iteration  14: 7841802.286 ops/s
Iteration  15: 7820381.288 ops/s
Iteration  16: 7826998.311 ops/s
Iteration  17: 7817246.456 ops/s
Iteration  18: 7842502.047 ops/s
Iteration  19: 7838557.898 ops/s
Iteration  20: 7835546.649 ops/s
Iteration  21: 7837871.801 ops/s
Iteration  22: 7826261.948 ops/s
Iteration  23: 7832834.443 ops/s
Iteration  24: 7850423.404 ops/s
Iteration  25: 7845375.790 ops/s
Iteration  26: 7788336.889 ops/s
Iteration  27: 7784918.657 ops/s
Iteration  28: 7820513.612 ops/s
Iteration  29: 7846634.063 ops/s
Iteration  30: 7824465.496 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectLong":
  7828056.504 ±(99.9%) 12670.515 ops/s [Average]
  (min, avg, max) = (7765733.517, 7828056.504, 7850423.404), stdev = 18964.632
  CI (99.9%): [7815385.989, 7840727.020] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectLong  thrpt   30  7828056.504 ± 12670.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3479858.518 ops/s
# Warmup Iteration   2: 6776541.819 ops/s
# Warmup Iteration   3: 7465357.361 ops/s
# Warmup Iteration   4: 7510915.609 ops/s
# Warmup Iteration   5: 6192328.722 ops/s
# Warmup Iteration   6: 7496002.533 ops/s
# Warmup Iteration   7: 7490719.557 ops/s
# Warmup Iteration   8: 7492681.443 ops/s
# Warmup Iteration   9: 7448149.342 ops/s
# Warmup Iteration  10: 7501058.792 ops/s
# Warmup Iteration  11: 7500259.472 ops/s
# Warmup Iteration  12: 7494850.673 ops/s
# Warmup Iteration  13: 7501725.562 ops/s
# Warmup Iteration  14: 7504810.860 ops/s
# Warmup Iteration  15: 7492132.758 ops/s
# Warmup Iteration  16: 7498625.368 ops/s
# Warmup Iteration  17: 7473767.289 ops/s
# Warmup Iteration  18: 7460615.788 ops/s
# Warmup Iteration  19: 7482562.638 ops/s
# Warmup Iteration  20: 7488853.911 ops/s
# Warmup Iteration  21: 7483754.108 ops/s
# Warmup Iteration  22: 7461520.157 ops/s
# Warmup Iteration  23: 7485363.210 ops/s
# Warmup Iteration  24: 7468886.108 ops/s
# Warmup Iteration  25: 7488090.432 ops/s
# Warmup Iteration  26: 7490621.297 ops/s
# Warmup Iteration  27: 7487662.183 ops/s
# Warmup Iteration  28: 7496613.039 ops/s
# Warmup Iteration  29: 7471874.234 ops/s
# Warmup Iteration  30: 7478155.402 ops/s
Iteration   1: 7477461.915 ops/s
Iteration   2: 7502485.329 ops/s
Iteration   3: 7478262.800 ops/s
Iteration   4: 7467598.811 ops/s
Iteration   5: 7465112.169 ops/s
Iteration   6: 7473202.384 ops/s
Iteration   7: 7487227.845 ops/s
Iteration   8: 7491400.249 ops/s
Iteration   9: 7489670.823 ops/s
Iteration  10: 7453490.415 ops/s
Iteration  11: 7487232.059 ops/s
Iteration  12: 7397390.273 ops/s
Iteration  13: 7495222.001 ops/s
Iteration  14: 7481495.248 ops/s
Iteration  15: 7481171.445 ops/s
Iteration  16: 7470468.344 ops/s
Iteration  17: 7483188.390 ops/s
Iteration  18: 7455800.009 ops/s
Iteration  19: 7484787.171 ops/s
Iteration  20: 7476578.169 ops/s
Iteration  21: 7394832.726 ops/s
Iteration  22: 7490060.968 ops/s
Iteration  23: 7465364.501 ops/s
Iteration  24: 7437047.235 ops/s
Iteration  25: 7482375.688 ops/s
Iteration  26: 7479347.666 ops/s
Iteration  27: 7371716.286 ops/s
Iteration  28: 7494888.000 ops/s
Iteration  29: 7462721.712 ops/s
Iteration  30: 7506146.377 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectShort":
  7469458.234 ±(99.9%) 21041.322 ops/s [Average]
  (min, avg, max) = (7371716.286, 7469458.234, 7506146.377), stdev = 31493.663
  CI (99.9%): [7448416.912, 7490499.556] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectShort  thrpt   30  7469458.234 ± 21041.322  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1521834.641 ops/s
# Warmup Iteration   2: 3787878.014 ops/s
# Warmup Iteration   3: 3800812.964 ops/s
# Warmup Iteration   4: 3165881.652 ops/s
# Warmup Iteration   5: 3810236.399 ops/s
# Warmup Iteration   6: 3806834.603 ops/s
# Warmup Iteration   7: 3810919.795 ops/s
# Warmup Iteration   8: 3808486.408 ops/s
# Warmup Iteration   9: 3764807.566 ops/s
# Warmup Iteration  10: 3796534.907 ops/s
# Warmup Iteration  11: 3808652.827 ops/s
# Warmup Iteration  12: 3807106.121 ops/s
# Warmup Iteration  13: 3813743.263 ops/s
# Warmup Iteration  14: 3801094.255 ops/s
# Warmup Iteration  15: 3802229.937 ops/s
# Warmup Iteration  16: 3768816.983 ops/s
# Warmup Iteration  17: 3815051.733 ops/s
# Warmup Iteration  18: 3810355.557 ops/s
# Warmup Iteration  19: 3804918.944 ops/s
# Warmup Iteration  20: 3805053.169 ops/s
# Warmup Iteration  21: 3798005.803 ops/s
# Warmup Iteration  22: 3797739.933 ops/s
# Warmup Iteration  23: 3793762.069 ops/s
# Warmup Iteration  24: 3792983.489 ops/s
# Warmup Iteration  25: 3796860.296 ops/s
# Warmup Iteration  26: 3790245.437 ops/s
# Warmup Iteration  27: 3801733.913 ops/s
# Warmup Iteration  28: 3812199.385 ops/s
# Warmup Iteration  29: 3812496.688 ops/s
# Warmup Iteration  30: 3802799.625 ops/s
Iteration   1: 3805556.966 ops/s
Iteration   2: 3812135.667 ops/s
Iteration   3: 3802256.750 ops/s
Iteration   4: 3789859.366 ops/s
Iteration   5: 3809884.820 ops/s
Iteration   6: 3789959.187 ops/s
Iteration   7: 3810323.754 ops/s
Iteration   8: 3813853.994 ops/s
Iteration   9: 3809550.515 ops/s
Iteration  10: 3817343.701 ops/s
Iteration  11: 3798737.640 ops/s
Iteration  12: 3807818.156 ops/s
Iteration  13: 3815405.287 ops/s
Iteration  14: 3800478.612 ops/s
Iteration  15: 3785581.943 ops/s
Iteration  16: 3802696.380 ops/s
Iteration  17: 3810950.659 ops/s
Iteration  18: 3808708.184 ops/s
Iteration  19: 3785463.157 ops/s
Iteration  20: 3802847.945 ops/s
Iteration  21: 3808793.160 ops/s
Iteration  22: 3806167.493 ops/s
Iteration  23: 3808276.759 ops/s
Iteration  24: 3797753.615 ops/s
Iteration  25: 3803648.078 ops/s
Iteration  26: 3806624.420 ops/s
Iteration  27: 3815346.225 ops/s
Iteration  28: 3809451.025 ops/s
Iteration  29: 3802210.326 ops/s
Iteration  30: 3716423.696 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith":
  3801803.583 ±(99.9%) 12136.215 ops/s [Average]
  (min, avg, max) = (3716423.696, 3801803.583, 3817343.701), stdev = 18164.917
  CI (99.9%): [3789667.368, 3813939.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectWith  thrpt   30  3801803.583 ± 12136.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3359403.310 ops/s
# Warmup Iteration   2: 8119608.840 ops/s
# Warmup Iteration   3: 6925877.765 ops/s
# Warmup Iteration   4: 8254779.975 ops/s
# Warmup Iteration   5: 8208143.301 ops/s
# Warmup Iteration   6: 8247811.023 ops/s
# Warmup Iteration   7: 8242037.119 ops/s
# Warmup Iteration   8: 8225948.485 ops/s
# Warmup Iteration   9: 8228620.198 ops/s
# Warmup Iteration  10: 8233101.789 ops/s
# Warmup Iteration  11: 8249743.505 ops/s
# Warmup Iteration  12: 8238890.895 ops/s
# Warmup Iteration  13: 8238804.736 ops/s
# Warmup Iteration  14: 8235436.255 ops/s
# Warmup Iteration  15: 8230427.218 ops/s
# Warmup Iteration  16: 8243168.341 ops/s
# Warmup Iteration  17: 8227690.752 ops/s
# Warmup Iteration  18: 8245949.602 ops/s
# Warmup Iteration  19: 8253548.439 ops/s
# Warmup Iteration  20: 8228858.651 ops/s
# Warmup Iteration  21: 8248535.053 ops/s
# Warmup Iteration  22: 8238144.452 ops/s
# Warmup Iteration  23: 8247961.667 ops/s
# Warmup Iteration  24: 8252910.997 ops/s
# Warmup Iteration  25: 8137127.777 ops/s
# Warmup Iteration  26: 8240959.835 ops/s
# Warmup Iteration  27: 8229814.387 ops/s
# Warmup Iteration  28: 8252801.844 ops/s
# Warmup Iteration  29: 8228067.094 ops/s
# Warmup Iteration  30: 8230474.157 ops/s
Iteration   1: 8209060.884 ops/s
Iteration   2: 8274145.194 ops/s
Iteration   3: 8236099.295 ops/s
Iteration   4: 8220487.393 ops/s
Iteration   5: 8246114.654 ops/s
Iteration   6: 8245819.789 ops/s
Iteration   7: 8245281.176 ops/s
Iteration   8: 8194061.634 ops/s
Iteration   9: 8028360.570 ops/s
Iteration  10: 7615687.957 ops/s
Iteration  11: 8255731.624 ops/s
Iteration  12: 8240228.366 ops/s
Iteration  13: 8247542.483 ops/s
Iteration  14: 8228293.317 ops/s
Iteration  15: 8248657.982 ops/s
Iteration  16: 8221820.986 ops/s
Iteration  17: 8219558.847 ops/s
Iteration  18: 8229920.666 ops/s
Iteration  19: 8237426.302 ops/s
Iteration  20: 8232907.772 ops/s
Iteration  21: 8241346.506 ops/s
Iteration  22: 8244765.959 ops/s
Iteration  23: 8231090.377 ops/s
Iteration  24: 8247854.831 ops/s
Iteration  25: 8216481.662 ops/s
Iteration  26: 8273492.535 ops/s
Iteration  27: 8223538.610 ops/s
Iteration  28: 8267917.164 ops/s
Iteration  29: 8216997.903 ops/s
Iteration  30: 8236536.006 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndex":
  8209240.948 ±(99.9%) 79996.430 ops/s [Average]
  (min, avg, max) = (7615687.957, 8209240.948, 8274145.194), stdev = 119734.899
  CI (99.9%): [8129244.518, 8289237.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  8209240.948 ± 79996.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745232.731 ops/s
# Warmup Iteration   2: 2282348.293 ops/s
# Warmup Iteration   3: 2382523.605 ops/s
# Warmup Iteration   4: 1989786.326 ops/s
# Warmup Iteration   5: 2386392.746 ops/s
# Warmup Iteration   6: 2372429.466 ops/s
# Warmup Iteration   7: 2386936.081 ops/s
# Warmup Iteration   8: 2382063.209 ops/s
# Warmup Iteration   9: 2388293.262 ops/s
# Warmup Iteration  10: 2390192.014 ops/s
# Warmup Iteration  11: 2390046.122 ops/s
# Warmup Iteration  12: 2389525.547 ops/s
# Warmup Iteration  13: 2385908.861 ops/s
# Warmup Iteration  14: 2387960.140 ops/s
# Warmup Iteration  15: 2388081.473 ops/s
# Warmup Iteration  16: 2383056.535 ops/s
# Warmup Iteration  17: 2387908.830 ops/s
# Warmup Iteration  18: 2385983.465 ops/s
# Warmup Iteration  19: 2380863.434 ops/s
# Warmup Iteration  20: 2389151.657 ops/s
# Warmup Iteration  21: 2389975.884 ops/s
# Warmup Iteration  22: 2378461.157 ops/s
# Warmup Iteration  23: 2385100.392 ops/s
# Warmup Iteration  24: 2388788.351 ops/s
# Warmup Iteration  25: 2380353.505 ops/s
# Warmup Iteration  26: 2385057.840 ops/s
# Warmup Iteration  27: 2386365.908 ops/s
# Warmup Iteration  28: 2375967.865 ops/s
# Warmup Iteration  29: 2385562.022 ops/s
# Warmup Iteration  30: 2383708.050 ops/s
Iteration   1: 2370203.223 ops/s
Iteration   2: 2384420.762 ops/s
Iteration   3: 2386859.519 ops/s
Iteration   4: 2383063.542 ops/s
Iteration   5: 2371414.146 ops/s
Iteration   6: 2363644.864 ops/s
Iteration   7: 2386834.037 ops/s
Iteration   8: 2386021.212 ops/s
Iteration   9: 2395174.826 ops/s
Iteration  10: 2391672.480 ops/s
Iteration  11: 2385983.886 ops/s
Iteration  12: 2389705.100 ops/s
Iteration  13: 2368542.155 ops/s
Iteration  14: 2388395.636 ops/s
Iteration  15: 2390464.894 ops/s
Iteration  16: 2389207.795 ops/s
Iteration  17: 2388840.055 ops/s
Iteration  18: 2388230.342 ops/s
Iteration  19: 2384961.246 ops/s
Iteration  20: 2387350.046 ops/s
Iteration  21: 2386974.807 ops/s
Iteration  22: 2375011.783 ops/s
Iteration  23: 2390733.650 ops/s
Iteration  24: 2387714.501 ops/s
Iteration  25: 2381230.698 ops/s
Iteration  26: 2380557.322 ops/s
Iteration  27: 2390097.472 ops/s
Iteration  28: 2383646.293 ops/s
Iteration  29: 2387276.688 ops/s
Iteration  30: 2386507.532 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2384358.017 ±(99.9%) 4968.964 ops/s [Average]
  (min, avg, max) = (2363644.864, 2384358.017, 2395174.826), stdev = 7437.312
  CI (99.9%): [2379389.053, 2389326.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2384358.017 ± 4968.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2160549.481 ops/s
# Warmup Iteration   2: 5321838.975 ops/s
# Warmup Iteration   3: 4486787.240 ops/s
# Warmup Iteration   4: 5397482.063 ops/s
# Warmup Iteration   5: 5425983.173 ops/s
# Warmup Iteration   6: 5425990.637 ops/s
# Warmup Iteration   7: 5419591.119 ops/s
# Warmup Iteration   8: 5411446.428 ops/s
# Warmup Iteration   9: 5397822.562 ops/s
# Warmup Iteration  10: 5374795.416 ops/s
# Warmup Iteration  11: 5407241.392 ops/s
# Warmup Iteration  12: 5416851.755 ops/s
# Warmup Iteration  13: 5410945.727 ops/s
# Warmup Iteration  14: 5434322.427 ops/s
# Warmup Iteration  15: 5422368.147 ops/s
# Warmup Iteration  16: 5428492.154 ops/s
# Warmup Iteration  17: 5414265.035 ops/s
# Warmup Iteration  18: 5412198.032 ops/s
# Warmup Iteration  19: 5407299.021 ops/s
# Warmup Iteration  20: 5421326.858 ops/s
# Warmup Iteration  21: 5427431.203 ops/s
# Warmup Iteration  22: 5420252.955 ops/s
# Warmup Iteration  23: 5415567.757 ops/s
# Warmup Iteration  24: 5418185.686 ops/s
# Warmup Iteration  25: 5398491.624 ops/s
# Warmup Iteration  26: 5395883.445 ops/s
# Warmup Iteration  27: 5435690.613 ops/s
# Warmup Iteration  28: 5423095.830 ops/s
# Warmup Iteration  29: 5425562.296 ops/s
# Warmup Iteration  30: 5421032.010 ops/s
Iteration   1: 5425701.365 ops/s
Iteration   2: 5418891.944 ops/s
Iteration   3: 5412206.090 ops/s
Iteration   4: 5406007.225 ops/s
Iteration   5: 5375588.214 ops/s
Iteration   6: 5400763.941 ops/s
Iteration   7: 5429935.538 ops/s
Iteration   8: 5418526.034 ops/s
Iteration   9: 5422789.032 ops/s
Iteration  10: 5420383.633 ops/s
Iteration  11: 5417073.977 ops/s
Iteration  12: 5415915.278 ops/s
Iteration  13: 5431501.773 ops/s
Iteration  14: 5433819.300 ops/s
Iteration  15: 5421225.910 ops/s
Iteration  16: 5433551.262 ops/s
Iteration  17: 5425817.958 ops/s
Iteration  18: 5417797.370 ops/s
Iteration  19: 5403183.114 ops/s
Iteration  20: 5407918.146 ops/s
Iteration  21: 5406969.735 ops/s
Iteration  22: 5405419.766 ops/s
Iteration  23: 5422265.944 ops/s
Iteration  24: 5418816.321 ops/s
Iteration  25: 5421952.761 ops/s
Iteration  26: 5408311.511 ops/s
Iteration  27: 5416730.248 ops/s
Iteration  28: 5406571.347 ops/s
Iteration  29: 5430373.719 ops/s
Iteration  30: 5438172.579 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collectWith_target":
  5417139.368 ±(99.9%) 8465.021 ops/s [Average]
  (min, avg, max) = (5375588.214, 5417139.368, 5438172.579), stdev = 12670.046
  CI (99.9%): [5408674.347, 5425604.389] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  5417139.368 ± 8465.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5525940.643 ops/s
# Warmup Iteration   2: 11449654.689 ops/s
# Warmup Iteration   3: 9962367.457 ops/s
# Warmup Iteration   4: 11690465.458 ops/s
# Warmup Iteration   5: 11754284.851 ops/s
# Warmup Iteration   6: 11716253.482 ops/s
# Warmup Iteration   7: 11780392.107 ops/s
# Warmup Iteration   8: 11749127.208 ops/s
# Warmup Iteration   9: 11554375.107 ops/s
# Warmup Iteration  10: 11736796.142 ops/s
# Warmup Iteration  11: 11767526.040 ops/s
# Warmup Iteration  12: 11706301.378 ops/s
# Warmup Iteration  13: 11698120.460 ops/s
# Warmup Iteration  14: 11731903.882 ops/s
# Warmup Iteration  15: 11675213.717 ops/s
# Warmup Iteration  16: 11717137.700 ops/s
# Warmup Iteration  17: 11749567.298 ops/s
# Warmup Iteration  18: 11741253.565 ops/s
# Warmup Iteration  19: 11799760.426 ops/s
# Warmup Iteration  20: 11769350.392 ops/s
# Warmup Iteration  21: 11731097.740 ops/s
# Warmup Iteration  22: 11783717.350 ops/s
# Warmup Iteration  23: 11728184.051 ops/s
# Warmup Iteration  24: 11784227.595 ops/s
# Warmup Iteration  25: 11776091.085 ops/s
# Warmup Iteration  26: 11766469.704 ops/s
# Warmup Iteration  27: 11781581.002 ops/s
# Warmup Iteration  28: 11682563.956 ops/s
# Warmup Iteration  29: 11800837.186 ops/s
# Warmup Iteration  30: 11731061.106 ops/s
Iteration   1: 11745875.576 ops/s
Iteration   2: 11706749.959 ops/s
Iteration   3: 11686738.834 ops/s
Iteration   4: 11761242.290 ops/s
Iteration   5: 11746107.393 ops/s
Iteration   6: 11728944.325 ops/s
Iteration   7: 11793433.221 ops/s
Iteration   8: 11725552.475 ops/s
Iteration   9: 11779673.844 ops/s
Iteration  10: 11782699.530 ops/s
Iteration  11: 11832479.174 ops/s
Iteration  12: 11800411.977 ops/s
Iteration  13: 11681349.400 ops/s
Iteration  14: 11772642.667 ops/s
Iteration  15: 11698474.543 ops/s
Iteration  16: 11709518.584 ops/s
Iteration  17: 11699852.636 ops/s
Iteration  18: 11811293.003 ops/s
Iteration  19: 11726506.316 ops/s
Iteration  20: 11782042.766 ops/s
Iteration  21: 11754611.198 ops/s
Iteration  22: 11814045.681 ops/s
Iteration  23: 11830118.196 ops/s
Iteration  24: 11774296.958 ops/s
Iteration  25: 11713458.246 ops/s
Iteration  26: 11732592.262 ops/s
Iteration  27: 11783297.712 ops/s
Iteration  28: 11794119.802 ops/s
Iteration  29: 11814152.690 ops/s
Iteration  30: 11719072.158 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_collect_target":
  11756711.781 ±(99.9%) 29664.020 ops/s [Average]
  (min, avg, max) = (11681349.400, 11756711.781, 11832479.174), stdev = 44399.712
  CI (99.9%): [11727047.761, 11786375.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_collect_target  thrpt   30  11756711.781 ± 29664.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 129177122.425 ops/s
# Warmup Iteration   2: 244853821.412 ops/s
# Warmup Iteration   3: 209363465.234 ops/s
# Warmup Iteration   4: 247795673.818 ops/s
# Warmup Iteration   5: 247317450.526 ops/s
# Warmup Iteration   6: 247667205.571 ops/s
# Warmup Iteration   7: 247884063.388 ops/s
# Warmup Iteration   8: 248026276.063 ops/s
# Warmup Iteration   9: 247845174.191 ops/s
# Warmup Iteration  10: 247800227.811 ops/s
# Warmup Iteration  11: 248631799.319 ops/s
# Warmup Iteration  12: 248194437.531 ops/s
# Warmup Iteration  13: 248223936.378 ops/s
# Warmup Iteration  14: 247672767.406 ops/s
# Warmup Iteration  15: 247184290.051 ops/s
# Warmup Iteration  16: 247571507.297 ops/s
# Warmup Iteration  17: 247512477.187 ops/s
# Warmup Iteration  18: 248111632.729 ops/s
# Warmup Iteration  19: 247958369.454 ops/s
# Warmup Iteration  20: 248401749.582 ops/s
# Warmup Iteration  21: 248098438.542 ops/s
# Warmup Iteration  22: 247038728.991 ops/s
# Warmup Iteration  23: 248507229.741 ops/s
# Warmup Iteration  24: 248040114.176 ops/s
# Warmup Iteration  25: 248549715.726 ops/s
# Warmup Iteration  26: 247725445.530 ops/s
# Warmup Iteration  27: 247825245.493 ops/s
# Warmup Iteration  28: 248010188.537 ops/s
# Warmup Iteration  29: 247626114.282 ops/s
# Warmup Iteration  30: 247356073.635 ops/s
Iteration   1: 247388488.255 ops/s
Iteration   2: 248845553.707 ops/s
Iteration   3: 245883166.052 ops/s
Iteration   4: 247588354.113 ops/s
Iteration   5: 247942840.366 ops/s
Iteration   6: 246560313.618 ops/s
Iteration   7: 248179775.034 ops/s
Iteration   8: 248768834.037 ops/s
Iteration   9: 248113053.849 ops/s
Iteration  10: 248765640.772 ops/s
Iteration  11: 247463135.151 ops/s
Iteration  12: 248169650.014 ops/s
Iteration  13: 249162391.173 ops/s
Iteration  14: 248052009.401 ops/s
Iteration  15: 248276307.176 ops/s
Iteration  16: 248349631.685 ops/s
Iteration  17: 247137352.614 ops/s
Iteration  18: 247848339.681 ops/s
Iteration  19: 246728678.758 ops/s
Iteration  20: 247134584.114 ops/s
Iteration  21: 248768617.089 ops/s
Iteration  22: 246480896.248 ops/s
Iteration  23: 248592232.949 ops/s
Iteration  24: 247870011.371 ops/s
Iteration  25: 247780591.774 ops/s
Iteration  26: 248715435.896 ops/s
Iteration  27: 247017444.324 ops/s
Iteration  28: 248373436.176 ops/s
Iteration  29: 248447044.020 ops/s
Iteration  30: 247754563.254 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_contains":
  247871945.756 ±(99.9%) 537056.270 ops/s [Average]
  (min, avg, max) = (245883166.052, 247871945.756, 249162391.173), stdev = 803840.603
  CI (99.9%): [247334889.486, 248409002.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_contains  thrpt   30  247871945.756 ± 537056.270  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16980610.830 ops/s
# Warmup Iteration   2: 35577561.329 ops/s
# Warmup Iteration   3: 31387115.371 ops/s
# Warmup Iteration   4: 37305582.734 ops/s
# Warmup Iteration   5: 37268926.958 ops/s
# Warmup Iteration   6: 37293683.121 ops/s
# Warmup Iteration   7: 37384168.980 ops/s
# Warmup Iteration   8: 37368963.981 ops/s
# Warmup Iteration   9: 37209357.385 ops/s
# Warmup Iteration  10: 37203122.069 ops/s
# Warmup Iteration  11: 37373180.228 ops/s
# Warmup Iteration  12: 37340470.986 ops/s
# Warmup Iteration  13: 37239489.515 ops/s
# Warmup Iteration  14: 37218127.338 ops/s
# Warmup Iteration  15: 37272062.073 ops/s
# Warmup Iteration  16: 37151248.552 ops/s
# Warmup Iteration  17: 37268817.209 ops/s
# Warmup Iteration  18: 37268841.028 ops/s
# Warmup Iteration  19: 37260653.907 ops/s
# Warmup Iteration  20: 37422192.980 ops/s
# Warmup Iteration  21: 37294275.424 ops/s
# Warmup Iteration  22: 37321971.239 ops/s
# Warmup Iteration  23: 37256349.611 ops/s
# Warmup Iteration  24: 37276462.520 ops/s
# Warmup Iteration  25: 37148202.653 ops/s
# Warmup Iteration  26: 37446278.731 ops/s
# Warmup Iteration  27: 37340428.798 ops/s
# Warmup Iteration  28: 37342326.353 ops/s
# Warmup Iteration  29: 37272021.286 ops/s
# Warmup Iteration  30: 37304729.144 ops/s
Iteration   1: 37330856.862 ops/s
Iteration   2: 37190808.506 ops/s
Iteration   3: 37399792.746 ops/s
Iteration   4: 37390634.443 ops/s
Iteration   5: 37181925.492 ops/s
Iteration   6: 37084068.331 ops/s
Iteration   7: 37172829.828 ops/s
Iteration   8: 37152225.255 ops/s
Iteration   9: 37235547.613 ops/s
Iteration  10: 37310292.832 ops/s
Iteration  11: 37117526.955 ops/s
Iteration  12: 37354126.885 ops/s
Iteration  13: 37375974.195 ops/s
Iteration  14: 37396645.028 ops/s
Iteration  15: 37170378.253 ops/s
Iteration  16: 37251280.787 ops/s
Iteration  17: 37278008.172 ops/s
Iteration  18: 37206219.670 ops/s
Iteration  19: 37474837.802 ops/s
Iteration  20: 37355038.588 ops/s
Iteration  21: 37277751.871 ops/s
Iteration  22: 37203374.295 ops/s
Iteration  23: 37022735.586 ops/s
Iteration  24: 37300310.327 ops/s
Iteration  25: 37287745.953 ops/s
Iteration  26: 37341695.830 ops/s
Iteration  27: 37298081.238 ops/s
Iteration  28: 37416685.992 ops/s
Iteration  29: 37226774.925 ops/s
Iteration  30: 37047246.492 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAll":
  37261714.025 ±(99.9%) 75950.203 ops/s [Average]
  (min, avg, max) = (37022735.586, 37261714.025, 37474837.802), stdev = 113678.697
  CI (99.9%): [37185763.822, 37337664.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_containsAll  thrpt   30  37261714.025 ± 75950.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30930119.734 ops/s
# Warmup Iteration   2: 63821298.859 ops/s
# Warmup Iteration   3: 53473954.363 ops/s
# Warmup Iteration   4: 63346520.211 ops/s
# Warmup Iteration   5: 63307082.047 ops/s
# Warmup Iteration   6: 63041524.182 ops/s
# Warmup Iteration   7: 63274921.499 ops/s
# Warmup Iteration   8: 63279149.544 ops/s
# Warmup Iteration   9: 62183160.855 ops/s
# Warmup Iteration  10: 63437692.069 ops/s
# Warmup Iteration  11: 63304008.699 ops/s
# Warmup Iteration  12: 63323765.306 ops/s
# Warmup Iteration  13: 63380866.407 ops/s
# Warmup Iteration  14: 63257546.788 ops/s
# Warmup Iteration  15: 63289273.529 ops/s
# Warmup Iteration  16: 63273109.132 ops/s
# Warmup Iteration  17: 63452318.226 ops/s
# Warmup Iteration  18: 63400731.002 ops/s
# Warmup Iteration  19: 63197307.495 ops/s
# Warmup Iteration  20: 63258698.298 ops/s
# Warmup Iteration  21: 63292920.878 ops/s
# Warmup Iteration  22: 63273924.262 ops/s
# Warmup Iteration  23: 63349357.413 ops/s
# Warmup Iteration  24: 63463613.970 ops/s
# Warmup Iteration  25: 63333525.832 ops/s
# Warmup Iteration  26: 63279971.011 ops/s
# Warmup Iteration  27: 63392995.732 ops/s
# Warmup Iteration  28: 63303544.896 ops/s
# Warmup Iteration  29: 63297455.616 ops/s
# Warmup Iteration  30: 63262227.976 ops/s
Iteration   1: 63521970.162 ops/s
Iteration   2: 63474119.103 ops/s
Iteration   3: 63195794.810 ops/s
Iteration   4: 63211299.434 ops/s
Iteration   5: 63263161.485 ops/s
Iteration   6: 63328516.395 ops/s
Iteration   7: 63121004.963 ops/s
Iteration   8: 63255503.736 ops/s
Iteration   9: 63105612.586 ops/s
Iteration  10: 63435312.205 ops/s
Iteration  11: 63325440.962 ops/s
Iteration  12: 63049707.762 ops/s
Iteration  13: 63482749.802 ops/s
Iteration  14: 63438183.574 ops/s
Iteration  15: 63439838.510 ops/s
Iteration  16: 63094421.659 ops/s
Iteration  17: 63239326.671 ops/s
Iteration  18: 63309772.705 ops/s
Iteration  19: 63077381.657 ops/s
Iteration  20: 63360815.509 ops/s
Iteration  21: 63266773.738 ops/s
Iteration  22: 63430309.753 ops/s
Iteration  23: 63271593.994 ops/s
Iteration  24: 63172602.663 ops/s
Iteration  25: 63231101.282 ops/s
Iteration  26: 63308016.969 ops/s
Iteration  27: 63527667.844 ops/s
Iteration  28: 63499427.437 ops/s
Iteration  29: 63316588.009 ops/s
Iteration  30: 63433029.162 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllArray":
  63306234.818 ±(99.9%) 93961.022 ops/s [Average]
  (min, avg, max) = (63049707.762, 63306234.818, 63527667.844), stdev = 140636.446
  CI (99.9%): [63212273.796, 63400195.841] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  63306234.818 ± 93961.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15455526.928 ops/s
# Warmup Iteration   2: 18341252.539 ops/s
# Warmup Iteration   3: 22676604.598 ops/s
# Warmup Iteration   4: 22622650.951 ops/s
# Warmup Iteration   5: 22606627.401 ops/s
# Warmup Iteration   6: 22706529.436 ops/s
# Warmup Iteration   7: 22713000.354 ops/s
# Warmup Iteration   8: 22693739.530 ops/s
# Warmup Iteration   9: 20675510.912 ops/s
# Warmup Iteration  10: 21220724.058 ops/s
# Warmup Iteration  11: 22722394.997 ops/s
# Warmup Iteration  12: 22710910.820 ops/s
# Warmup Iteration  13: 22759265.957 ops/s
# Warmup Iteration  14: 22760929.034 ops/s
# Warmup Iteration  15: 22729965.692 ops/s
# Warmup Iteration  16: 22725870.989 ops/s
# Warmup Iteration  17: 22740425.474 ops/s
# Warmup Iteration  18: 22757295.519 ops/s
# Warmup Iteration  19: 22692877.733 ops/s
# Warmup Iteration  20: 22776557.640 ops/s
# Warmup Iteration  21: 22755338.227 ops/s
# Warmup Iteration  22: 22756098.363 ops/s
# Warmup Iteration  23: 22758016.794 ops/s
# Warmup Iteration  24: 22746916.323 ops/s
# Warmup Iteration  25: 22720907.764 ops/s
# Warmup Iteration  26: 22772258.921 ops/s
# Warmup Iteration  27: 22749465.641 ops/s
# Warmup Iteration  28: 22775391.420 ops/s
# Warmup Iteration  29: 22734509.572 ops/s
# Warmup Iteration  30: 22757802.177 ops/s
Iteration   1: 22708390.193 ops/s
Iteration   2: 22777157.383 ops/s
Iteration   3: 22652897.553 ops/s
Iteration   4: 22674432.209 ops/s
Iteration   5: 22719383.539 ops/s
Iteration   6: 22744789.375 ops/s
Iteration   7: 22727744.324 ops/s
Iteration   8: 22746867.111 ops/s
Iteration   9: 22726109.916 ops/s
Iteration  10: 22750310.270 ops/s
Iteration  11: 22714415.083 ops/s
Iteration  12: 22751283.436 ops/s
Iteration  13: 22751492.008 ops/s
Iteration  14: 22769302.062 ops/s
Iteration  15: 22752509.767 ops/s
Iteration  16: 22648696.336 ops/s
Iteration  17: 22754769.243 ops/s
Iteration  18: 22788905.901 ops/s
Iteration  19: 22739633.188 ops/s
Iteration  20: 22798008.586 ops/s
Iteration  21: 22792372.886 ops/s
Iteration  22: 22723052.745 ops/s
Iteration  23: 22762571.617 ops/s
Iteration  24: 22772057.750 ops/s
Iteration  25: 22724312.893 ops/s
Iteration  26: 22754657.985 ops/s
Iteration  27: 22759716.575 ops/s
Iteration  28: 22716870.867 ops/s
Iteration  29: 22683851.402 ops/s
Iteration  30: 22770166.691 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_containsAllIterable":
  22738557.630 ±(99.9%) 25244.531 ops/s [Average]
  (min, avg, max) = (22648696.336, 22738557.630, 22798008.586), stdev = 37784.829
  CI (99.9%): [22713313.098, 22763802.161] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  22738557.630 ± 25244.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8505260.191 ops/s
# Warmup Iteration   2: 18678955.372 ops/s
# Warmup Iteration   3: 19129878.188 ops/s
# Warmup Iteration   4: 17281756.638 ops/s
# Warmup Iteration   5: 18047430.396 ops/s
# Warmup Iteration   6: 19175299.184 ops/s
# Warmup Iteration   7: 19208712.710 ops/s
# Warmup Iteration   8: 19194937.124 ops/s
# Warmup Iteration   9: 19156975.751 ops/s
# Warmup Iteration  10: 19182020.557 ops/s
# Warmup Iteration  11: 19139606.698 ops/s
# Warmup Iteration  12: 19122554.034 ops/s
# Warmup Iteration  13: 19188003.625 ops/s
# Warmup Iteration  14: 19184600.880 ops/s
# Warmup Iteration  15: 19178380.526 ops/s
# Warmup Iteration  16: 19161373.529 ops/s
# Warmup Iteration  17: 19209195.952 ops/s
# Warmup Iteration  18: 19180402.478 ops/s
# Warmup Iteration  19: 19186440.706 ops/s
# Warmup Iteration  20: 19198058.100 ops/s
# Warmup Iteration  21: 19171252.098 ops/s
# Warmup Iteration  22: 19200407.074 ops/s
# Warmup Iteration  23: 19206402.138 ops/s
# Warmup Iteration  24: 19184386.367 ops/s
# Warmup Iteration  25: 19161639.303 ops/s
# Warmup Iteration  26: 19243209.043 ops/s
# Warmup Iteration  27: 19220820.351 ops/s
# Warmup Iteration  28: 19167428.601 ops/s
# Warmup Iteration  29: 19133012.848 ops/s
# Warmup Iteration  30: 19117504.797 ops/s
Iteration   1: 19070436.597 ops/s
Iteration   2: 19178653.617 ops/s
Iteration   3: 19220606.153 ops/s
Iteration   4: 19232375.471 ops/s
Iteration   5: 19181188.009 ops/s
Iteration   6: 19179034.924 ops/s
Iteration   7: 19197719.082 ops/s
Iteration   8: 19063347.590 ops/s
Iteration   9: 19219059.837 ops/s
Iteration  10: 19206587.288 ops/s
Iteration  11: 19188004.751 ops/s
Iteration  12: 19129723.461 ops/s
Iteration  13: 19211718.571 ops/s
Iteration  14: 19215921.767 ops/s
Iteration  15: 19204761.544 ops/s
Iteration  16: 19201473.135 ops/s
Iteration  17: 19200508.009 ops/s
Iteration  18: 19193897.652 ops/s
Iteration  19: 19163819.465 ops/s
Iteration  20: 19229746.337 ops/s
Iteration  21: 19190724.750 ops/s
Iteration  22: 19173280.432 ops/s
Iteration  23: 19133573.286 ops/s
Iteration  24: 19116060.163 ops/s
Iteration  25: 19200089.611 ops/s
Iteration  26: 19121151.760 ops/s
Iteration  27: 19102597.161 ops/s
Iteration  28: 19155118.072 ops/s
Iteration  29: 19191895.526 ops/s
Iteration  30: 19163129.236 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_corresponds":
  19174540.109 ±(99.9%) 29950.978 ops/s [Average]
  (min, avg, max) = (19063347.590, 19174540.109, 19232375.471), stdev = 44829.218
  CI (99.9%): [19144589.130, 19204491.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_corresponds  thrpt   30  19174540.109 ± 29950.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44692558.818 ops/s
# Warmup Iteration   2: 89671395.838 ops/s
# Warmup Iteration   3: 80036112.032 ops/s
# Warmup Iteration   4: 92821239.053 ops/s
# Warmup Iteration   5: 92514634.111 ops/s
# Warmup Iteration   6: 92379803.852 ops/s
# Warmup Iteration   7: 92698387.957 ops/s
# Warmup Iteration   8: 92582046.052 ops/s
# Warmup Iteration   9: 92651387.817 ops/s
# Warmup Iteration  10: 92615448.511 ops/s
# Warmup Iteration  11: 92428152.527 ops/s
# Warmup Iteration  12: 92854448.722 ops/s
# Warmup Iteration  13: 92552672.393 ops/s
# Warmup Iteration  14: 92554406.148 ops/s
# Warmup Iteration  15: 92521278.052 ops/s
# Warmup Iteration  16: 92710969.209 ops/s
# Warmup Iteration  17: 95073091.449 ops/s
# Warmup Iteration  18: 94722151.695 ops/s
# Warmup Iteration  19: 94686421.044 ops/s
# Warmup Iteration  20: 94725275.909 ops/s
# Warmup Iteration  21: 94916770.156 ops/s
# Warmup Iteration  22: 94807796.668 ops/s
# Warmup Iteration  23: 94527937.722 ops/s
# Warmup Iteration  24: 94102346.230 ops/s
# Warmup Iteration  25: 94889372.389 ops/s
# Warmup Iteration  26: 94665606.173 ops/s
# Warmup Iteration  27: 94538095.589 ops/s
# Warmup Iteration  28: 94997595.069 ops/s
# Warmup Iteration  29: 94352315.146 ops/s
# Warmup Iteration  30: 95024303.161 ops/s
Iteration   1: 94637686.566 ops/s
Iteration   2: 95290666.423 ops/s
Iteration   3: 94642983.231 ops/s
Iteration   4: 94673353.529 ops/s
Iteration   5: 95219470.630 ops/s
Iteration   6: 94709236.808 ops/s
Iteration   7: 94778507.316 ops/s
Iteration   8: 94574838.477 ops/s
Iteration   9: 94728118.431 ops/s
Iteration  10: 95163103.955 ops/s
Iteration  11: 95168430.177 ops/s
Iteration  12: 94692406.798 ops/s
Iteration  13: 94759809.997 ops/s
Iteration  14: 95203513.022 ops/s
Iteration  15: 94450253.237 ops/s
Iteration  16: 94598547.773 ops/s
Iteration  17: 95134765.809 ops/s
Iteration  18: 94972029.373 ops/s
Iteration  19: 94849546.160 ops/s
Iteration  20: 95029115.184 ops/s
Iteration  21: 94115957.468 ops/s
Iteration  22: 94824902.239 ops/s
Iteration  23: 94860836.682 ops/s
Iteration  24: 94891891.558 ops/s
Iteration  25: 94739189.637 ops/s
Iteration  26: 94650906.712 ops/s
Iteration  27: 94876538.809 ops/s
Iteration  28: 94684884.748 ops/s
Iteration  29: 95064238.961 ops/s
Iteration  30: 95040531.306 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_count":
  94834208.701 ±(99.9%) 174121.584 ops/s [Average]
  (min, avg, max) = (94115957.468, 94834208.701, 95290666.423), stdev = 260617.009
  CI (99.9%): [94660087.117, 95008330.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_count  thrpt   30  94834208.701 ± 174121.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1362360.385 ops/s
# Warmup Iteration   2: 2832947.825 ops/s
# Warmup Iteration   3: 3137645.833 ops/s
# Warmup Iteration   4: 3155934.961 ops/s
# Warmup Iteration   5: 2597663.946 ops/s
# Warmup Iteration   6: 3152567.792 ops/s
# Warmup Iteration   7: 3156910.800 ops/s
# Warmup Iteration   8: 3138351.118 ops/s
# Warmup Iteration   9: 3144144.228 ops/s
# Warmup Iteration  10: 3143177.620 ops/s
# Warmup Iteration  11: 3156678.982 ops/s
# Warmup Iteration  12: 3157162.086 ops/s
# Warmup Iteration  13: 3155093.877 ops/s
# Warmup Iteration  14: 3157539.068 ops/s
# Warmup Iteration  15: 3153830.769 ops/s
# Warmup Iteration  16: 3148159.902 ops/s
# Warmup Iteration  17: 3152562.502 ops/s
# Warmup Iteration  18: 3145224.306 ops/s
# Warmup Iteration  19: 3151053.997 ops/s
# Warmup Iteration  20: 3150086.711 ops/s
# Warmup Iteration  21: 3147143.465 ops/s
# Warmup Iteration  22: 3138527.344 ops/s
# Warmup Iteration  23: 3152667.967 ops/s
# Warmup Iteration  24: 3151866.851 ops/s
# Warmup Iteration  25: 3150231.133 ops/s
# Warmup Iteration  26: 3140983.883 ops/s
# Warmup Iteration  27: 3138491.011 ops/s
# Warmup Iteration  28: 3140755.115 ops/s
# Warmup Iteration  29: 3150351.216 ops/s
# Warmup Iteration  30: 3151914.016 ops/s
Iteration   1: 3144806.130 ops/s
Iteration   2: 3150552.863 ops/s
Iteration   3: 3135537.086 ops/s
Iteration   4: 3143338.963 ops/s
Iteration   5: 3148776.701 ops/s
Iteration   6: 3155001.737 ops/s
Iteration   7: 3151781.688 ops/s
Iteration   8: 3138581.447 ops/s
Iteration   9: 3158137.007 ops/s
Iteration  10: 3140853.709 ops/s
Iteration  11: 3139784.085 ops/s
Iteration  12: 3153991.310 ops/s
Iteration  13: 3135025.753 ops/s
Iteration  14: 3139432.544 ops/s
Iteration  15: 3144623.400 ops/s
Iteration  16: 3151882.428 ops/s
Iteration  17: 3137453.227 ops/s
Iteration  18: 3137895.487 ops/s
Iteration  19: 3148102.301 ops/s
Iteration  20: 3145462.296 ops/s
Iteration  21: 3145340.314 ops/s
Iteration  22: 3151503.402 ops/s
Iteration  23: 3145488.656 ops/s
Iteration  24: 3147095.505 ops/s
Iteration  25: 3157368.689 ops/s
Iteration  26: 3150101.417 ops/s
Iteration  27: 3135574.162 ops/s
Iteration  28: 3154557.258 ops/s
Iteration  29: 3152259.162 ops/s
Iteration  30: 3139243.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countBy":
  3145985.066 ±(99.9%) 4610.006 ops/s [Average]
  (min, avg, max) = (3135025.753, 3145985.066, 3158137.007), stdev = 6900.040
  CI (99.9%): [3141375.060, 3150595.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_countBy  thrpt   30  3145985.066 ± 4610.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327084.840 ops/s
# Warmup Iteration   2: 555853.987 ops/s
# Warmup Iteration   3: 670852.763 ops/s
# Warmup Iteration   4: 674535.655 ops/s
# Warmup Iteration   5: 670952.364 ops/s
# Warmup Iteration   6: 656989.101 ops/s
# Warmup Iteration   7: 575935.347 ops/s
# Warmup Iteration   8: 675534.995 ops/s
# Warmup Iteration   9: 674767.268 ops/s
# Warmup Iteration  10: 675865.833 ops/s
# Warmup Iteration  11: 676584.034 ops/s
# Warmup Iteration  12: 676957.826 ops/s
# Warmup Iteration  13: 676352.195 ops/s
# Warmup Iteration  14: 675576.326 ops/s
# Warmup Iteration  15: 675804.832 ops/s
# Warmup Iteration  16: 675361.304 ops/s
# Warmup Iteration  17: 675000.328 ops/s
# Warmup Iteration  18: 675438.993 ops/s
# Warmup Iteration  19: 676320.349 ops/s
# Warmup Iteration  20: 676373.204 ops/s
# Warmup Iteration  21: 674880.383 ops/s
# Warmup Iteration  22: 676864.935 ops/s
# Warmup Iteration  23: 675549.834 ops/s
# Warmup Iteration  24: 673827.246 ops/s
# Warmup Iteration  25: 675916.612 ops/s
# Warmup Iteration  26: 675243.753 ops/s
# Warmup Iteration  27: 673490.031 ops/s
# Warmup Iteration  28: 676350.566 ops/s
# Warmup Iteration  29: 674512.231 ops/s
# Warmup Iteration  30: 674941.380 ops/s
Iteration   1: 675482.488 ops/s
Iteration   2: 673818.221 ops/s
Iteration   3: 676485.271 ops/s
Iteration   4: 669873.843 ops/s
Iteration   5: 677469.497 ops/s
Iteration   6: 676725.447 ops/s
Iteration   7: 676165.235 ops/s
Iteration   8: 674486.256 ops/s
Iteration   9: 677080.600 ops/s
Iteration  10: 675052.265 ops/s
Iteration  11: 673976.489 ops/s
Iteration  12: 675492.337 ops/s
Iteration  13: 674115.851 ops/s
Iteration  14: 674820.721 ops/s
Iteration  15: 676495.496 ops/s
Iteration  16: 675944.646 ops/s
Iteration  17: 675468.200 ops/s
Iteration  18: 676048.473 ops/s
Iteration  19: 676619.947 ops/s
Iteration  20: 675843.001 ops/s
Iteration  21: 676578.841 ops/s
Iteration  22: 675623.640 ops/s
Iteration  23: 675501.695 ops/s
Iteration  24: 675638.065 ops/s
Iteration  25: 677034.300 ops/s
Iteration  26: 675486.242 ops/s
Iteration  27: 676632.804 ops/s
Iteration  28: 671587.694 ops/s
Iteration  29: 676659.699 ops/s
Iteration  30: 673577.428 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByEach":
  675392.823 ±(99.9%) 1091.509 ops/s [Average]
  (min, avg, max) = (669873.843, 675392.823, 677469.497), stdev = 1633.719
  CI (99.9%): [674301.314, 676484.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_countByEach  thrpt   30  675392.823 ± 1091.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1381913.240 ops/s
# Warmup Iteration   2: 2932071.685 ops/s
# Warmup Iteration   3: 3182766.421 ops/s
# Warmup Iteration   4: 3218727.558 ops/s
# Warmup Iteration   5: 2647021.754 ops/s
# Warmup Iteration   6: 3193838.691 ops/s
# Warmup Iteration   7: 3189202.571 ops/s
# Warmup Iteration   8: 3193285.240 ops/s
# Warmup Iteration   9: 3186298.149 ops/s
# Warmup Iteration  10: 3190378.395 ops/s
# Warmup Iteration  11: 3176820.392 ops/s
# Warmup Iteration  12: 3183921.577 ops/s
# Warmup Iteration  13: 3188672.309 ops/s
# Warmup Iteration  14: 3195365.192 ops/s
# Warmup Iteration  15: 3193995.012 ops/s
# Warmup Iteration  16: 3190583.103 ops/s
# Warmup Iteration  17: 3196196.473 ops/s
# Warmup Iteration  18: 3189485.919 ops/s
# Warmup Iteration  19: 3213779.841 ops/s
# Warmup Iteration  20: 3188645.327 ops/s
# Warmup Iteration  21: 3204010.542 ops/s
# Warmup Iteration  22: 3209169.307 ops/s
# Warmup Iteration  23: 3203831.065 ops/s
# Warmup Iteration  24: 3212835.412 ops/s
# Warmup Iteration  25: 3193977.646 ops/s
# Warmup Iteration  26: 3209290.933 ops/s
# Warmup Iteration  27: 3204370.725 ops/s
# Warmup Iteration  28: 3215078.590 ops/s
# Warmup Iteration  29: 3215642.497 ops/s
# Warmup Iteration  30: 3207783.067 ops/s
Iteration   1: 3199908.894 ops/s
Iteration   2: 3207922.372 ops/s
Iteration   3: 3202903.622 ops/s
Iteration   4: 3208833.938 ops/s
Iteration   5: 3206235.779 ops/s
Iteration   6: 3211598.875 ops/s
Iteration   7: 3212621.569 ops/s
Iteration   8: 3206157.593 ops/s
Iteration   9: 3206214.111 ops/s
Iteration  10: 3208639.754 ops/s
Iteration  11: 3210361.765 ops/s
Iteration  12: 3223301.949 ops/s
Iteration  13: 3212615.606 ops/s
Iteration  14: 3209111.397 ops/s
Iteration  15: 3204487.457 ops/s
Iteration  16: 3195205.749 ops/s
Iteration  17: 3207710.657 ops/s
Iteration  18: 3214881.829 ops/s
Iteration  19: 3213449.886 ops/s
Iteration  20: 3202645.856 ops/s
Iteration  21: 3193818.339 ops/s
Iteration  22: 3213706.106 ops/s
Iteration  23: 3203702.992 ops/s
Iteration  24: 3211950.639 ops/s
Iteration  25: 3198891.860 ops/s
Iteration  26: 3199101.667 ops/s
Iteration  27: 3209125.409 ops/s
Iteration  28: 3213183.822 ops/s
Iteration  29: 3213337.902 ops/s
Iteration  30: 3213650.418 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countByWith":
  3207842.594 ±(99.9%) 4294.835 ops/s [Average]
  (min, avg, max) = (3193818.339, 3207842.594, 3223301.949), stdev = 6428.307
  CI (99.9%): [3203547.759, 3212137.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_countByWith  thrpt   30  3207842.594 ± 4294.835  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44131555.706 ops/s
# Warmup Iteration   2: 85869471.675 ops/s
# Warmup Iteration   3: 79420635.931 ops/s
# Warmup Iteration   4: 93419266.124 ops/s
# Warmup Iteration   5: 93734870.359 ops/s
# Warmup Iteration   6: 93835061.158 ops/s
# Warmup Iteration   7: 93579826.587 ops/s
# Warmup Iteration   8: 94016499.568 ops/s
# Warmup Iteration   9: 93974879.619 ops/s
# Warmup Iteration  10: 93679024.655 ops/s
# Warmup Iteration  11: 93974337.831 ops/s
# Warmup Iteration  12: 94283153.583 ops/s
# Warmup Iteration  13: 93812483.513 ops/s
# Warmup Iteration  14: 93747198.018 ops/s
# Warmup Iteration  15: 93867432.591 ops/s
# Warmup Iteration  16: 93887699.194 ops/s
# Warmup Iteration  17: 93313170.340 ops/s
# Warmup Iteration  18: 93829356.603 ops/s
# Warmup Iteration  19: 93911239.698 ops/s
# Warmup Iteration  20: 93960910.408 ops/s
# Warmup Iteration  21: 93892418.131 ops/s
# Warmup Iteration  22: 93301810.755 ops/s
# Warmup Iteration  23: 93596424.677 ops/s
# Warmup Iteration  24: 93955196.701 ops/s
# Warmup Iteration  25: 93678060.558 ops/s
# Warmup Iteration  26: 93486711.519 ops/s
# Warmup Iteration  27: 93597721.612 ops/s
# Warmup Iteration  28: 93593250.199 ops/s
# Warmup Iteration  29: 93773803.840 ops/s
# Warmup Iteration  30: 94052859.617 ops/s
Iteration   1: 93546466.168 ops/s
Iteration   2: 94174446.376 ops/s
Iteration   3: 94123653.685 ops/s
Iteration   4: 93506986.799 ops/s
Iteration   5: 94412059.778 ops/s
Iteration   6: 94023185.934 ops/s
Iteration   7: 93429730.484 ops/s
Iteration   8: 93395518.585 ops/s
Iteration   9: 93768807.657 ops/s
Iteration  10: 93855293.834 ops/s
Iteration  11: 94102357.787 ops/s
Iteration  12: 93804534.653 ops/s
Iteration  13: 93788474.934 ops/s
Iteration  14: 93935174.311 ops/s
Iteration  15: 94096469.797 ops/s
Iteration  16: 94028251.627 ops/s
Iteration  17: 93630825.499 ops/s
Iteration  18: 94117586.326 ops/s
Iteration  19: 93980841.110 ops/s
Iteration  20: 94332475.932 ops/s
Iteration  21: 94016045.336 ops/s
Iteration  22: 93323905.617 ops/s
Iteration  23: 93153920.200 ops/s
Iteration  24: 93021827.728 ops/s
Iteration  25: 93723872.988 ops/s
Iteration  26: 93747341.861 ops/s
Iteration  27: 93757381.939 ops/s
Iteration  28: 94085200.506 ops/s
Iteration  29: 93513630.458 ops/s
Iteration  30: 93687362.466 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_countWith":
  93802787.679 ±(99.9%) 225455.096 ops/s [Average]
  (min, avg, max) = (93021827.728, 93802787.679, 94412059.778), stdev = 337450.600
  CI (99.9%): [93577332.583, 94028242.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_countWith  thrpt   30  93802787.679 ± 225455.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19794613.372 ops/s
# Warmup Iteration   2: 41224883.202 ops/s
# Warmup Iteration   3: 34514408.803 ops/s
# Warmup Iteration   4: 40734075.255 ops/s
# Warmup Iteration   5: 40776319.293 ops/s
# Warmup Iteration   6: 40789877.930 ops/s
# Warmup Iteration   7: 40646731.643 ops/s
# Warmup Iteration   8: 40694877.180 ops/s
# Warmup Iteration   9: 40679790.152 ops/s
# Warmup Iteration  10: 40818401.529 ops/s
# Warmup Iteration  11: 40676391.019 ops/s
# Warmup Iteration  12: 40744103.601 ops/s
# Warmup Iteration  13: 40641679.245 ops/s
# Warmup Iteration  14: 40817628.907 ops/s
# Warmup Iteration  15: 40670850.426 ops/s
# Warmup Iteration  16: 40734959.321 ops/s
# Warmup Iteration  17: 40700635.498 ops/s
# Warmup Iteration  18: 40779862.375 ops/s
# Warmup Iteration  19: 40786490.773 ops/s
# Warmup Iteration  20: 40710456.072 ops/s
# Warmup Iteration  21: 40753465.549 ops/s
# Warmup Iteration  22: 40824686.852 ops/s
# Warmup Iteration  23: 40651569.443 ops/s
# Warmup Iteration  24: 40716461.528 ops/s
# Warmup Iteration  25: 40645164.640 ops/s
# Warmup Iteration  26: 40605831.211 ops/s
# Warmup Iteration  27: 40687069.117 ops/s
# Warmup Iteration  28: 40716977.357 ops/s
# Warmup Iteration  29: 40757856.511 ops/s
# Warmup Iteration  30: 40763909.104 ops/s
Iteration   1: 40565665.194 ops/s
Iteration   2: 40749827.441 ops/s
Iteration   3: 40919256.822 ops/s
Iteration   4: 40693054.455 ops/s
Iteration   5: 40548190.424 ops/s
Iteration   6: 40733745.433 ops/s
Iteration   7: 40761294.471 ops/s
Iteration   8: 40726389.685 ops/s
Iteration   9: 40617510.076 ops/s
Iteration  10: 40705683.380 ops/s
Iteration  11: 40951569.059 ops/s
Iteration  12: 40689931.895 ops/s
Iteration  13: 40715142.738 ops/s
Iteration  14: 40713341.952 ops/s
Iteration  15: 40824310.230 ops/s
Iteration  16: 40658903.284 ops/s
Iteration  17: 40836933.739 ops/s
Iteration  18: 40742345.860 ops/s
Iteration  19: 40844592.162 ops/s
Iteration  20: 40639315.544 ops/s
Iteration  21: 40740668.992 ops/s
Iteration  22: 40750952.693 ops/s
Iteration  23: 40813951.947 ops/s
Iteration  24: 40715095.342 ops/s
Iteration  25: 40709876.321 ops/s
Iteration  26: 40760727.662 ops/s
Iteration  27: 40752180.019 ops/s
Iteration  28: 40683900.963 ops/s
Iteration  29: 40697194.193 ops/s
Iteration  30: 40651904.565 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detect":
  40730448.551 ±(99.9%) 59361.757 ops/s [Average]
  (min, avg, max) = (40548190.424, 40730448.551, 40951569.059), stdev = 88849.890
  CI (99.9%): [40671086.795, 40789810.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detect  thrpt   30  40730448.551 ± 59361.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21201044.715 ops/s
# Warmup Iteration   2: 42167493.410 ops/s
# Warmup Iteration   3: 35843050.368 ops/s
# Warmup Iteration   4: 42134548.607 ops/s
# Warmup Iteration   5: 42100082.579 ops/s
# Warmup Iteration   6: 41947550.266 ops/s
# Warmup Iteration   7: 41978116.840 ops/s
# Warmup Iteration   8: 41995836.513 ops/s
# Warmup Iteration   9: 42108001.734 ops/s
# Warmup Iteration  10: 41925809.694 ops/s
# Warmup Iteration  11: 42045297.685 ops/s
# Warmup Iteration  12: 41927434.518 ops/s
# Warmup Iteration  13: 41996121.501 ops/s
# Warmup Iteration  14: 42059089.684 ops/s
# Warmup Iteration  15: 42046332.482 ops/s
# Warmup Iteration  16: 42020924.817 ops/s
# Warmup Iteration  17: 41979765.676 ops/s
# Warmup Iteration  18: 42002222.767 ops/s
# Warmup Iteration  19: 42036036.288 ops/s
# Warmup Iteration  20: 41925264.458 ops/s
# Warmup Iteration  21: 42037098.643 ops/s
# Warmup Iteration  22: 41994502.012 ops/s
# Warmup Iteration  23: 41990432.422 ops/s
# Warmup Iteration  24: 41963801.127 ops/s
# Warmup Iteration  25: 41993073.650 ops/s
# Warmup Iteration  26: 42070989.245 ops/s
# Warmup Iteration  27: 41984423.765 ops/s
# Warmup Iteration  28: 41992057.584 ops/s
# Warmup Iteration  29: 42104514.149 ops/s
# Warmup Iteration  30: 42037415.563 ops/s
Iteration   1: 42059238.680 ops/s
Iteration   2: 41943055.733 ops/s
Iteration   3: 42091174.198 ops/s
Iteration   4: 42030418.152 ops/s
Iteration   5: 42040138.470 ops/s
Iteration   6: 42028558.809 ops/s
Iteration   7: 42090031.535 ops/s
Iteration   8: 42039424.429 ops/s
Iteration   9: 41981785.830 ops/s
Iteration  10: 41797554.732 ops/s
Iteration  11: 41862711.453 ops/s
Iteration  12: 42119444.111 ops/s
Iteration  13: 41871270.206 ops/s
Iteration  14: 42057499.991 ops/s
Iteration  15: 42089728.511 ops/s
Iteration  16: 42039816.349 ops/s
Iteration  17: 41939377.971 ops/s
Iteration  18: 42054680.249 ops/s
Iteration  19: 42093876.759 ops/s
Iteration  20: 41896040.950 ops/s
Iteration  21: 41901936.337 ops/s
Iteration  22: 42069757.888 ops/s
Iteration  23: 41827969.650 ops/s
Iteration  24: 41994792.555 ops/s
Iteration  25: 41998914.624 ops/s
Iteration  26: 42023551.165 ops/s
Iteration  27: 41802120.235 ops/s
Iteration  28: 41996476.570 ops/s
Iteration  29: 42180720.038 ops/s
Iteration  30: 41970794.086 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIfNone":
  41996428.676 ±(99.9%) 65091.906 ops/s [Average]
  (min, avg, max) = (41797554.732, 41996428.676, 42180720.038), stdev = 97426.507
  CI (99.9%): [41931336.770, 42061520.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detectIfNone  thrpt   30  41996428.676 ± 65091.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 97952391.153 ops/s
# Warmup Iteration   2: 197941225.901 ops/s
# Warmup Iteration   3: 186325936.169 ops/s
# Warmup Iteration   4: 209580919.933 ops/s
# Warmup Iteration   5: 213826414.622 ops/s
# Warmup Iteration   6: 214106106.817 ops/s
# Warmup Iteration   7: 213568158.675 ops/s
# Warmup Iteration   8: 213248890.484 ops/s
# Warmup Iteration   9: 213708816.693 ops/s
# Warmup Iteration  10: 214185514.521 ops/s
# Warmup Iteration  11: 214008932.412 ops/s
# Warmup Iteration  12: 214182131.421 ops/s
# Warmup Iteration  13: 214038906.389 ops/s
# Warmup Iteration  14: 214024926.038 ops/s
# Warmup Iteration  15: 213984985.472 ops/s
# Warmup Iteration  16: 214219432.543 ops/s
# Warmup Iteration  17: 213968478.649 ops/s
# Warmup Iteration  18: 213992865.477 ops/s
# Warmup Iteration  19: 214057843.060 ops/s
# Warmup Iteration  20: 213816619.865 ops/s
# Warmup Iteration  21: 214013098.352 ops/s
# Warmup Iteration  22: 214014796.848 ops/s
# Warmup Iteration  23: 214478114.626 ops/s
# Warmup Iteration  24: 213962640.803 ops/s
# Warmup Iteration  25: 213877249.184 ops/s
# Warmup Iteration  26: 213447995.488 ops/s
# Warmup Iteration  27: 214149857.210 ops/s
# Warmup Iteration  28: 213996536.633 ops/s
# Warmup Iteration  29: 214333347.029 ops/s
# Warmup Iteration  30: 214352884.394 ops/s
Iteration   1: 214544932.601 ops/s
Iteration   2: 213794757.944 ops/s
Iteration   3: 214247861.238 ops/s
Iteration   4: 214128374.900 ops/s
Iteration   5: 214489858.661 ops/s
Iteration   6: 212929130.103 ops/s
Iteration   7: 212345982.869 ops/s
Iteration   8: 213028679.096 ops/s
Iteration   9: 213910099.916 ops/s
Iteration  10: 213907407.337 ops/s
Iteration  11: 213542198.416 ops/s
Iteration  12: 214271298.998 ops/s
Iteration  13: 213888055.845 ops/s
Iteration  14: 214255687.014 ops/s
Iteration  15: 214178794.573 ops/s
Iteration  16: 214234409.752 ops/s
Iteration  17: 213954478.655 ops/s
Iteration  18: 213654530.960 ops/s
Iteration  19: 214379355.938 ops/s
Iteration  20: 213953981.381 ops/s
Iteration  21: 214400878.693 ops/s
Iteration  22: 214624837.606 ops/s
Iteration  23: 213838887.056 ops/s
Iteration  24: 213949976.887 ops/s
Iteration  25: 214234596.981 ops/s
Iteration  26: 214138060.602 ops/s
Iteration  27: 214383104.746 ops/s
Iteration  28: 213754290.361 ops/s
Iteration  29: 213912974.529 ops/s
Iteration  30: 214004889.399 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectIndex":
  213962745.769 ±(99.9%) 329226.102 ops/s [Average]
  (min, avg, max) = (212345982.869, 213962745.769, 214624837.606), stdev = 492770.167
  CI (99.9%): [213633519.667, 214291971.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detectIndex  thrpt   30  213962745.769 ± 329226.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 104361652.122 ops/s
# Warmup Iteration   2: 197435179.531 ops/s
# Warmup Iteration   3: 182837722.824 ops/s
# Warmup Iteration   4: 212008953.545 ops/s
# Warmup Iteration   5: 213446853.424 ops/s
# Warmup Iteration   6: 213277250.340 ops/s
# Warmup Iteration   7: 213371612.214 ops/s
# Warmup Iteration   8: 213205645.260 ops/s
# Warmup Iteration   9: 212663987.467 ops/s
# Warmup Iteration  10: 213258773.629 ops/s
# Warmup Iteration  11: 212718541.454 ops/s
# Warmup Iteration  12: 213433136.482 ops/s
# Warmup Iteration  13: 213624537.538 ops/s
# Warmup Iteration  14: 213401585.377 ops/s
# Warmup Iteration  15: 213140792.819 ops/s
# Warmup Iteration  16: 213267669.119 ops/s
# Warmup Iteration  17: 213370610.856 ops/s
# Warmup Iteration  18: 213281036.194 ops/s
# Warmup Iteration  19: 212925273.792 ops/s
# Warmup Iteration  20: 212601892.649 ops/s
# Warmup Iteration  21: 213566941.918 ops/s
# Warmup Iteration  22: 212984716.022 ops/s
# Warmup Iteration  23: 213641638.726 ops/s
# Warmup Iteration  24: 213115433.641 ops/s
# Warmup Iteration  25: 213517410.426 ops/s
# Warmup Iteration  26: 213642610.546 ops/s
# Warmup Iteration  27: 213403635.447 ops/s
# Warmup Iteration  28: 212921364.625 ops/s
# Warmup Iteration  29: 213810078.699 ops/s
# Warmup Iteration  30: 213622952.150 ops/s
Iteration   1: 213568260.565 ops/s
Iteration   2: 213296606.070 ops/s
Iteration   3: 213433064.960 ops/s
Iteration   4: 212989195.073 ops/s
Iteration   5: 213697018.353 ops/s
Iteration   6: 213627013.162 ops/s
Iteration   7: 213445598.809 ops/s
Iteration   8: 213193800.151 ops/s
Iteration   9: 213177265.892 ops/s
Iteration  10: 213280775.567 ops/s
Iteration  11: 213455058.407 ops/s
Iteration  12: 213693879.546 ops/s
Iteration  13: 213930412.904 ops/s
Iteration  14: 213202891.259 ops/s
Iteration  15: 213160599.713 ops/s
Iteration  16: 213248818.070 ops/s
Iteration  17: 213853635.066 ops/s
Iteration  18: 213588046.057 ops/s
Iteration  19: 213049168.892 ops/s
Iteration  20: 213515760.438 ops/s
Iteration  21: 213923772.173 ops/s
Iteration  22: 213775130.330 ops/s
Iteration  23: 213881984.944 ops/s
Iteration  24: 213418637.733 ops/s
Iteration  25: 212874862.372 ops/s
Iteration  26: 213612435.465 ops/s
Iteration  27: 213101366.880 ops/s
Iteration  28: 213853923.611 ops/s
Iteration  29: 213438201.300 ops/s
Iteration  30: 213590712.195 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectLastIndex":
  213462596.532 ±(99.9%) 196499.524 ops/s [Average]
  (min, avg, max) = (212874862.372, 213462596.532, 213930412.904), stdev = 294111.259
  CI (99.9%): [213266097.008, 213659096.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  213462596.532 ± 196499.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10224855.015 ops/s
# Warmup Iteration   2: 21184788.058 ops/s
# Warmup Iteration   3: 18327946.496 ops/s
# Warmup Iteration   4: 21676382.951 ops/s
# Warmup Iteration   5: 21675244.168 ops/s
# Warmup Iteration   6: 21675761.045 ops/s
# Warmup Iteration   7: 21647339.655 ops/s
# Warmup Iteration   8: 21645874.114 ops/s
# Warmup Iteration   9: 21652523.681 ops/s
# Warmup Iteration  10: 21624676.001 ops/s
# Warmup Iteration  11: 21630484.156 ops/s
# Warmup Iteration  12: 21623844.716 ops/s
# Warmup Iteration  13: 21667134.130 ops/s
# Warmup Iteration  14: 21634426.028 ops/s
# Warmup Iteration  15: 21628134.587 ops/s
# Warmup Iteration  16: 21674604.544 ops/s
# Warmup Iteration  17: 21689729.698 ops/s
# Warmup Iteration  18: 21667719.521 ops/s
# Warmup Iteration  19: 21620956.621 ops/s
# Warmup Iteration  20: 21645898.995 ops/s
# Warmup Iteration  21: 21666463.510 ops/s
# Warmup Iteration  22: 21748328.340 ops/s
# Warmup Iteration  23: 21653711.443 ops/s
# Warmup Iteration  24: 21667058.197 ops/s
# Warmup Iteration  25: 21694998.833 ops/s
# Warmup Iteration  26: 21666043.047 ops/s
# Warmup Iteration  27: 21692876.499 ops/s
# Warmup Iteration  28: 21637938.699 ops/s
# Warmup Iteration  29: 21679760.765 ops/s
# Warmup Iteration  30: 21612144.548 ops/s
Iteration   1: 21677131.234 ops/s
Iteration   2: 21640071.359 ops/s
Iteration   3: 21577750.717 ops/s
Iteration   4: 21682085.865 ops/s
Iteration   5: 21727126.202 ops/s
Iteration   6: 21548495.630 ops/s
Iteration   7: 21787827.650 ops/s
Iteration   8: 21587825.882 ops/s
Iteration   9: 21674230.878 ops/s
Iteration  10: 21561215.225 ops/s
Iteration  11: 21590738.362 ops/s
Iteration  12: 21694382.273 ops/s
Iteration  13: 21612491.118 ops/s
Iteration  14: 21619904.238 ops/s
Iteration  15: 21731496.726 ops/s
Iteration  16: 21697169.005 ops/s
Iteration  17: 21651813.161 ops/s
Iteration  18: 21788977.621 ops/s
Iteration  19: 21576225.746 ops/s
Iteration  20: 21755159.326 ops/s
Iteration  21: 21664006.845 ops/s
Iteration  22: 21677613.315 ops/s
Iteration  23: 21664154.451 ops/s
Iteration  24: 21665418.510 ops/s
Iteration  25: 21708038.050 ops/s
Iteration  26: 21553167.477 ops/s
Iteration  27: 21662900.572 ops/s
Iteration  28: 21559535.658 ops/s
Iteration  29: 21669057.191 ops/s
Iteration  30: 21601041.843 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWith":
  21653568.404 ±(99.9%) 45078.276 ops/s [Average]
  (min, avg, max) = (21548495.630, 21653568.404, 21788977.621), stdev = 67471.046
  CI (99.9%): [21608490.129, 21698646.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detectWith  thrpt   30  21653568.404 ± 45078.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12214754.728 ops/s
# Warmup Iteration   2: 25557272.954 ops/s
# Warmup Iteration   3: 21978277.612 ops/s
# Warmup Iteration   4: 26064814.018 ops/s
# Warmup Iteration   5: 25984609.504 ops/s
# Warmup Iteration   6: 26050882.429 ops/s
# Warmup Iteration   7: 26026653.768 ops/s
# Warmup Iteration   8: 25971282.758 ops/s
# Warmup Iteration   9: 26120582.450 ops/s
# Warmup Iteration  10: 25989145.232 ops/s
# Warmup Iteration  11: 26046028.940 ops/s
# Warmup Iteration  12: 26056296.090 ops/s
# Warmup Iteration  13: 26092325.853 ops/s
# Warmup Iteration  14: 26098367.215 ops/s
# Warmup Iteration  15: 26102004.716 ops/s
# Warmup Iteration  16: 26077697.559 ops/s
# Warmup Iteration  17: 24285330.285 ops/s
# Warmup Iteration  18: 26005914.634 ops/s
# Warmup Iteration  19: 26134657.554 ops/s
# Warmup Iteration  20: 26104137.329 ops/s
# Warmup Iteration  21: 26055731.847 ops/s
# Warmup Iteration  22: 26137305.950 ops/s
# Warmup Iteration  23: 26098316.661 ops/s
# Warmup Iteration  24: 26089142.926 ops/s
# Warmup Iteration  25: 26136371.586 ops/s
# Warmup Iteration  26: 26094546.819 ops/s
# Warmup Iteration  27: 26116641.101 ops/s
# Warmup Iteration  28: 26095936.337 ops/s
# Warmup Iteration  29: 26107583.546 ops/s
# Warmup Iteration  30: 26023931.853 ops/s
Iteration   1: 26108108.329 ops/s
Iteration   2: 26075878.233 ops/s
Iteration   3: 26122432.166 ops/s
Iteration   4: 26132466.218 ops/s
Iteration   5: 26157006.755 ops/s
Iteration   6: 26109108.974 ops/s
Iteration   7: 26189789.749 ops/s
Iteration   8: 26052793.813 ops/s
Iteration   9: 26095657.556 ops/s
Iteration  10: 26118408.272 ops/s
Iteration  11: 26085508.755 ops/s
Iteration  12: 26085321.209 ops/s
Iteration  13: 26078933.014 ops/s
Iteration  14: 26120548.247 ops/s
Iteration  15: 26040737.367 ops/s
Iteration  16: 26167670.682 ops/s
Iteration  17: 26078538.618 ops/s
Iteration  18: 26096448.842 ops/s
Iteration  19: 26129554.171 ops/s
Iteration  20: 26121301.080 ops/s
Iteration  21: 26053486.247 ops/s
Iteration  22: 26118816.925 ops/s
Iteration  23: 26267545.795 ops/s
Iteration  24: 26096204.303 ops/s
Iteration  25: 26062557.754 ops/s
Iteration  26: 26110567.213 ops/s
Iteration  27: 26099525.554 ops/s
Iteration  28: 25942352.314 ops/s
Iteration  29: 25989440.531 ops/s
Iteration  30: 26105150.018 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_detectWithIfNone":
  26100395.290 ±(99.9%) 38557.153 ops/s [Average]
  (min, avg, max) = (25942352.314, 26100395.290, 26267545.795), stdev = 57710.536
  CI (99.9%): [26061838.137, 26138952.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  26100395.290 ± 38557.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2225407.101 ops/s
# Warmup Iteration   2: 5399042.596 ops/s
# Warmup Iteration   3: 5324174.254 ops/s
# Warmup Iteration   4: 4486164.977 ops/s
# Warmup Iteration   5: 5377461.469 ops/s
# Warmup Iteration   6: 5380184.853 ops/s
# Warmup Iteration   7: 5388780.071 ops/s
# Warmup Iteration   8: 5386523.209 ops/s
# Warmup Iteration   9: 5377919.853 ops/s
# Warmup Iteration  10: 5356715.124 ops/s
# Warmup Iteration  11: 5365900.355 ops/s
# Warmup Iteration  12: 5381037.698 ops/s
# Warmup Iteration  13: 5387722.902 ops/s
# Warmup Iteration  14: 5382252.467 ops/s
# Warmup Iteration  15: 5373796.094 ops/s
# Warmup Iteration  16: 5382505.219 ops/s
# Warmup Iteration  17: 5367261.102 ops/s
# Warmup Iteration  18: 5376839.817 ops/s
# Warmup Iteration  19: 5385160.694 ops/s
# Warmup Iteration  20: 5378183.684 ops/s
# Warmup Iteration  21: 5366039.571 ops/s
# Warmup Iteration  22: 5376827.155 ops/s
# Warmup Iteration  23: 5389139.083 ops/s
# Warmup Iteration  24: 5383565.730 ops/s
# Warmup Iteration  25: 5384864.448 ops/s
# Warmup Iteration  26: 5344433.920 ops/s
# Warmup Iteration  27: 5374887.159 ops/s
# Warmup Iteration  28: 5363354.421 ops/s
# Warmup Iteration  29: 5378122.626 ops/s
# Warmup Iteration  30: 5382740.682 ops/s
Iteration   1: 5379211.210 ops/s
Iteration   2: 5379459.137 ops/s
Iteration   3: 5384738.881 ops/s
Iteration   4: 5389171.818 ops/s
Iteration   5: 5383424.914 ops/s
Iteration   6: 5387307.805 ops/s
Iteration   7: 5379659.359 ops/s
Iteration   8: 5382136.059 ops/s
Iteration   9: 5364446.243 ops/s
Iteration  10: 5379212.498 ops/s
Iteration  11: 5376767.562 ops/s
Iteration  12: 5366059.790 ops/s
Iteration  13: 5368317.201 ops/s
Iteration  14: 5343361.468 ops/s
Iteration  15: 5374912.873 ops/s
Iteration  16: 5392635.590 ops/s
Iteration  17: 5387903.291 ops/s
Iteration  18: 5379120.224 ops/s
Iteration  19: 5386267.393 ops/s
Iteration  20: 5385601.644 ops/s
Iteration  21: 5380146.086 ops/s
Iteration  22: 5377917.397 ops/s
Iteration  23: 5373872.193 ops/s
Iteration  24: 5380534.311 ops/s
Iteration  25: 5380690.382 ops/s
Iteration  26: 5386404.929 ops/s
Iteration  27: 5365407.118 ops/s
Iteration  28: 5398262.585 ops/s
Iteration  29: 5375006.967 ops/s
Iteration  30: 5374918.102 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinct":
  5378762.501 ±(99.9%) 6860.615 ops/s [Average]
  (min, avg, max) = (5343361.468, 5378762.501, 5398262.585), stdev = 10268.646
  CI (99.9%): [5371901.886, 5385623.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_distinct  thrpt   30  5378762.501 ± 6860.615  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5770069.031 ops/s
# Warmup Iteration   2: 13147451.083 ops/s
# Warmup Iteration   3: 11930045.984 ops/s
# Warmup Iteration   4: 12580388.316 ops/s
# Warmup Iteration   5: 13265262.990 ops/s
# Warmup Iteration   6: 12869970.436 ops/s
# Warmup Iteration   7: 13312121.918 ops/s
# Warmup Iteration   8: 13243463.739 ops/s
# Warmup Iteration   9: 13235538.580 ops/s
# Warmup Iteration  10: 13304683.269 ops/s
# Warmup Iteration  11: 13278603.697 ops/s
# Warmup Iteration  12: 13324730.437 ops/s
# Warmup Iteration  13: 13290958.746 ops/s
# Warmup Iteration  14: 13275542.564 ops/s
# Warmup Iteration  15: 13298480.517 ops/s
# Warmup Iteration  16: 13252213.153 ops/s
# Warmup Iteration  17: 13915053.035 ops/s
# Warmup Iteration  18: 13911805.968 ops/s
# Warmup Iteration  19: 13884299.938 ops/s
# Warmup Iteration  20: 13885860.086 ops/s
# Warmup Iteration  21: 13891105.034 ops/s
# Warmup Iteration  22: 13880556.885 ops/s
# Warmup Iteration  23: 13930297.070 ops/s
# Warmup Iteration  24: 13922967.034 ops/s
# Warmup Iteration  25: 13912902.964 ops/s
# Warmup Iteration  26: 13908441.981 ops/s
# Warmup Iteration  27: 13869856.591 ops/s
# Warmup Iteration  28: 13891956.051 ops/s
# Warmup Iteration  29: 13863030.474 ops/s
# Warmup Iteration  30: 13902871.606 ops/s
Iteration   1: 13925026.985 ops/s
Iteration   2: 13910351.437 ops/s
Iteration   3: 13926369.737 ops/s
Iteration   4: 13868104.056 ops/s
Iteration   5: 13930886.136 ops/s
Iteration   6: 13915185.482 ops/s
Iteration   7: 13903168.323 ops/s
Iteration   8: 13890472.134 ops/s
Iteration   9: 13904147.523 ops/s
Iteration  10: 13901507.859 ops/s
Iteration  11: 13899439.947 ops/s
Iteration  12: 13936414.259 ops/s
Iteration  13: 13920525.325 ops/s
Iteration  14: 13932191.253 ops/s
Iteration  15: 13870057.662 ops/s
Iteration  16: 13931055.885 ops/s
Iteration  17: 13939796.740 ops/s
Iteration  18: 13908625.295 ops/s
Iteration  19: 13812461.089 ops/s
Iteration  20: 13925804.631 ops/s
Iteration  21: 13881278.569 ops/s
Iteration  22: 13949053.895 ops/s
Iteration  23: 13848346.583 ops/s
Iteration  24: 13886648.387 ops/s
Iteration  25: 13918266.207 ops/s
Iteration  26: 13941687.688 ops/s
Iteration  27: 13923217.209 ops/s
Iteration  28: 13908842.454 ops/s
Iteration  29: 13920959.995 ops/s
Iteration  30: 13909585.732 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctBy":
  13907982.616 ±(99.9%) 19731.663 ops/s [Average]
  (min, avg, max) = (13812461.089, 13907982.616, 13949053.895), stdev = 29533.426
  CI (99.9%): [13888250.953, 13927714.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_distinctBy  thrpt   30  13907982.616 ± 19731.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4339549.152 ops/s
# Warmup Iteration   2: 9210024.436 ops/s
# Warmup Iteration   3: 9112113.241 ops/s
# Warmup Iteration   4: 7772305.350 ops/s
# Warmup Iteration   5: 9007566.803 ops/s
# Warmup Iteration   6: 9117213.633 ops/s
# Warmup Iteration   7: 9188759.886 ops/s
# Warmup Iteration   8: 9172291.569 ops/s
# Warmup Iteration   9: 9111876.333 ops/s
# Warmup Iteration  10: 9180647.578 ops/s
# Warmup Iteration  11: 9135447.054 ops/s
# Warmup Iteration  12: 9042207.407 ops/s
# Warmup Iteration  13: 9155773.214 ops/s
# Warmup Iteration  14: 9224457.823 ops/s
# Warmup Iteration  15: 9108066.604 ops/s
# Warmup Iteration  16: 9128244.864 ops/s
# Warmup Iteration  17: 8856183.135 ops/s
# Warmup Iteration  18: 9005317.041 ops/s
# Warmup Iteration  19: 9082883.054 ops/s
# Warmup Iteration  20: 9073659.592 ops/s
# Warmup Iteration  21: 9094827.218 ops/s
# Warmup Iteration  22: 8992805.373 ops/s
# Warmup Iteration  23: 9004848.700 ops/s
# Warmup Iteration  24: 8904371.364 ops/s
# Warmup Iteration  25: 9162023.177 ops/s
# Warmup Iteration  26: 9231636.325 ops/s
# Warmup Iteration  27: 8864312.869 ops/s
# Warmup Iteration  28: 9053050.257 ops/s
# Warmup Iteration  29: 9182141.743 ops/s
# Warmup Iteration  30: 9032730.180 ops/s
Iteration   1: 9142025.663 ops/s
Iteration   2: 9159228.240 ops/s
Iteration   3: 9077260.686 ops/s
Iteration   4: 9211308.405 ops/s
Iteration   5: 8953971.787 ops/s
Iteration   6: 9013612.683 ops/s
Iteration   7: 8970190.596 ops/s
Iteration   8: 9092440.881 ops/s
Iteration   9: 8972922.102 ops/s
Iteration  10: 8948001.083 ops/s
Iteration  11: 8921654.665 ops/s
Iteration  12: 9133104.997 ops/s
Iteration  13: 9163969.546 ops/s
Iteration  14: 8996114.011 ops/s
Iteration  15: 9048618.519 ops/s
Iteration  16: 9081335.673 ops/s
Iteration  17: 9017207.149 ops/s
Iteration  18: 8950499.611 ops/s
Iteration  19: 8953557.950 ops/s
Iteration  20: 9076303.221 ops/s
Iteration  21: 8946130.633 ops/s
Iteration  22: 9086211.516 ops/s
Iteration  23: 8990608.343 ops/s
Iteration  24: 8979745.613 ops/s
Iteration  25: 9115367.212 ops/s
Iteration  26: 9145884.970 ops/s
Iteration  27: 8918101.268 ops/s
Iteration  28: 9017083.259 ops/s
Iteration  29: 8997530.724 ops/s
Iteration  30: 8946240.866 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  9034207.729 ±(99.9%) 55759.950 ops/s [Average]
  (min, avg, max) = (8918101.268, 9034207.729, 9211308.405), stdev = 83458.874
  CI (99.9%): [8978447.779, 9089967.679] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  9034207.729 ± 55759.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1411039.002 ops/s
# Warmup Iteration   2: 1849393.953 ops/s
# Warmup Iteration   3: 2415619.113 ops/s
# Warmup Iteration   4: 2401209.389 ops/s
# Warmup Iteration   5: 2405681.381 ops/s
# Warmup Iteration   6: 2408372.733 ops/s
# Warmup Iteration   7: 2409650.568 ops/s
# Warmup Iteration   8: 2210293.216 ops/s
# Warmup Iteration   9: 2165051.470 ops/s
# Warmup Iteration  10: 2406022.275 ops/s
# Warmup Iteration  11: 2409342.365 ops/s
# Warmup Iteration  12: 2407406.647 ops/s
# Warmup Iteration  13: 2406949.451 ops/s
# Warmup Iteration  14: 2408414.595 ops/s
# Warmup Iteration  15: 2407037.323 ops/s
# Warmup Iteration  16: 2401316.804 ops/s
# Warmup Iteration  17: 2408547.260 ops/s
# Warmup Iteration  18: 2403961.141 ops/s
# Warmup Iteration  19: 2404826.082 ops/s
# Warmup Iteration  20: 2407568.435 ops/s
# Warmup Iteration  21: 2403419.407 ops/s
# Warmup Iteration  22: 2405557.154 ops/s
# Warmup Iteration  23: 2405867.113 ops/s
# Warmup Iteration  24: 2397482.899 ops/s
# Warmup Iteration  25: 2407382.735 ops/s
# Warmup Iteration  26: 2396963.008 ops/s
# Warmup Iteration  27: 2407660.784 ops/s
# Warmup Iteration  28: 2403679.464 ops/s
# Warmup Iteration  29: 2408951.388 ops/s
# Warmup Iteration  30: 2406610.618 ops/s
Iteration   1: 2399415.098 ops/s
Iteration   2: 2406366.197 ops/s
Iteration   3: 2407026.026 ops/s
Iteration   4: 2406436.206 ops/s
Iteration   5: 2405708.916 ops/s
Iteration   6: 2403606.593 ops/s
Iteration   7: 2411556.667 ops/s
Iteration   8: 2406478.538 ops/s
Iteration   9: 2374737.381 ops/s
Iteration  10: 2409697.262 ops/s
Iteration  11: 2409792.131 ops/s
Iteration  12: 2405559.903 ops/s
Iteration  13: 2410722.254 ops/s
Iteration  14: 2402926.450 ops/s
Iteration  15: 2406373.963 ops/s
Iteration  16: 2409418.941 ops/s
Iteration  17: 2401225.225 ops/s
Iteration  18: 2410928.435 ops/s
Iteration  19: 2407396.535 ops/s
Iteration  20: 2406401.718 ops/s
Iteration  21: 2409408.559 ops/s
Iteration  22: 2404018.193 ops/s
Iteration  23: 2395398.484 ops/s
Iteration  24: 2404735.632 ops/s
Iteration  25: 2409006.343 ops/s
Iteration  26: 2404051.724 ops/s
Iteration  27: 2399766.119 ops/s
Iteration  28: 2407523.127 ops/s
Iteration  29: 2409894.753 ops/s
Iteration  30: 2410280.901 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop":
  2405195.276 ±(99.9%) 4604.895 ops/s [Average]
  (min, avg, max) = (2374737.381, 2405195.276, 2411556.667), stdev = 6892.390
  CI (99.9%): [2400590.381, 2409800.170] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_drop  thrpt   30  2405195.276 ± 4604.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7826158.006 ops/s
# Warmup Iteration   2: 18236474.648 ops/s
# Warmup Iteration   3: 18201917.794 ops/s
# Warmup Iteration   4: 15356872.839 ops/s
# Warmup Iteration   5: 18238603.576 ops/s
# Warmup Iteration   6: 18255651.361 ops/s
# Warmup Iteration   7: 18241472.091 ops/s
# Warmup Iteration   8: 18263929.078 ops/s
# Warmup Iteration   9: 18242246.243 ops/s
# Warmup Iteration  10: 18274742.812 ops/s
# Warmup Iteration  11: 18275948.716 ops/s
# Warmup Iteration  12: 18153407.851 ops/s
# Warmup Iteration  13: 18240992.646 ops/s
# Warmup Iteration  14: 18064045.232 ops/s
# Warmup Iteration  15: 18245847.356 ops/s
# Warmup Iteration  16: 18262837.347 ops/s
# Warmup Iteration  17: 18237911.928 ops/s
# Warmup Iteration  18: 18268829.428 ops/s
# Warmup Iteration  19: 18242642.453 ops/s
# Warmup Iteration  20: 18283677.424 ops/s
# Warmup Iteration  21: 18266009.209 ops/s
# Warmup Iteration  22: 18257363.935 ops/s
# Warmup Iteration  23: 18248867.963 ops/s
# Warmup Iteration  24: 18235170.611 ops/s
# Warmup Iteration  25: 18257353.048 ops/s
# Warmup Iteration  26: 18252347.756 ops/s
# Warmup Iteration  27: 18263749.577 ops/s
# Warmup Iteration  28: 18249900.171 ops/s
# Warmup Iteration  29: 18264750.107 ops/s
# Warmup Iteration  30: 18246159.891 ops/s
Iteration   1: 18094691.810 ops/s
Iteration   2: 18206210.353 ops/s
Iteration   3: 18248709.712 ops/s
Iteration   4: 18229640.064 ops/s
Iteration   5: 18220253.070 ops/s
Iteration   6: 18263831.420 ops/s
Iteration   7: 18241419.486 ops/s
Iteration   8: 18257232.606 ops/s
Iteration   9: 18280287.371 ops/s
Iteration  10: 18181965.799 ops/s
Iteration  11: 18270508.054 ops/s
Iteration  12: 18235505.603 ops/s
Iteration  13: 18267673.797 ops/s
Iteration  14: 18248363.153 ops/s
Iteration  15: 18194535.678 ops/s
Iteration  16: 18242138.455 ops/s
Iteration  17: 18194912.638 ops/s
Iteration  18: 18284830.490 ops/s
Iteration  19: 18169243.478 ops/s
Iteration  20: 18269840.618 ops/s
Iteration  21: 18244077.572 ops/s
Iteration  22: 18294040.212 ops/s
Iteration  23: 18287873.993 ops/s
Iteration  24: 18248077.083 ops/s
Iteration  25: 18159881.299 ops/s
Iteration  26: 18268660.227 ops/s
Iteration  27: 18200716.715 ops/s
Iteration  28: 18240550.508 ops/s
Iteration  29: 18286495.294 ops/s
Iteration  30: 18291086.131 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_dropWhile":
  18237441.756 ±(99.9%) 30676.666 ops/s [Average]
  (min, avg, max) = (18094691.810, 18237441.756, 18294040.212), stdev = 45915.393
  CI (99.9%): [18206765.090, 18268118.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_dropWhile  thrpt   30  18237441.756 ± 30676.666  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732279.273 ops/s
# Warmup Iteration   2: 769015.278 ops/s
# Warmup Iteration   3: 984173.457 ops/s
# Warmup Iteration   4: 993499.323 ops/s
# Warmup Iteration   5: 1001238.181 ops/s
# Warmup Iteration   6: 977545.756 ops/s
# Warmup Iteration   7: 986292.390 ops/s
# Warmup Iteration   8: 983120.746 ops/s
# Warmup Iteration   9: 983761.140 ops/s
# Warmup Iteration  10: 986906.899 ops/s
# Warmup Iteration  11: 995642.084 ops/s
# Warmup Iteration  12: 857168.055 ops/s
# Warmup Iteration  13: 987995.622 ops/s
# Warmup Iteration  14: 996715.123 ops/s
# Warmup Iteration  15: 995410.025 ops/s
# Warmup Iteration  16: 998727.969 ops/s
# Warmup Iteration  17: 1053161.335 ops/s
# Warmup Iteration  18: 1053716.467 ops/s
# Warmup Iteration  19: 1055232.826 ops/s
# Warmup Iteration  20: 1050342.971 ops/s
# Warmup Iteration  21: 1050477.719 ops/s
# Warmup Iteration  22: 1052277.880 ops/s
# Warmup Iteration  23: 1048702.669 ops/s
# Warmup Iteration  24: 1054114.199 ops/s
# Warmup Iteration  25: 1052478.392 ops/s
# Warmup Iteration  26: 1055666.072 ops/s
# Warmup Iteration  27: 1053410.216 ops/s
# Warmup Iteration  28: 1055486.824 ops/s
# Warmup Iteration  29: 1050135.628 ops/s
# Warmup Iteration  30: 1050419.073 ops/s
Iteration   1: 1054249.908 ops/s
Iteration   2: 1054159.875 ops/s
Iteration   3: 1055640.955 ops/s
Iteration   4: 1052749.541 ops/s
Iteration   5: 1053058.750 ops/s
Iteration   6: 1053580.501 ops/s
Iteration   7: 1048016.908 ops/s
Iteration   8: 1049744.838 ops/s
Iteration   9: 1050792.847 ops/s
Iteration  10: 1052758.050 ops/s
Iteration  11: 1054267.727 ops/s
Iteration  12: 1042256.531 ops/s
Iteration  13: 1044728.602 ops/s
Iteration  14: 1051300.481 ops/s
Iteration  15: 1055884.645 ops/s
Iteration  16: 1053255.969 ops/s
Iteration  17: 1054664.244 ops/s
Iteration  18: 1057641.622 ops/s
Iteration  19: 1055265.027 ops/s
Iteration  20: 1044631.846 ops/s
Iteration  21: 1054886.295 ops/s
Iteration  22: 1054599.439 ops/s
Iteration  23: 1055852.902 ops/s
Iteration  24: 1054704.911 ops/s
Iteration  25: 1051286.085 ops/s
Iteration  26: 1052325.965 ops/s
Iteration  27: 1055431.509 ops/s
Iteration  28: 1051856.898 ops/s
Iteration  29: 1051267.463 ops/s
Iteration  30: 1053774.073 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_drop_throws":
  1052487.814 ±(99.9%) 2387.535 ops/s [Average]
  (min, avg, max) = (1042256.531, 1052487.814, 1057641.622), stdev = 3573.550
  CI (99.9%): [1050100.279, 1054875.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_drop_throws  thrpt   30  1052487.814 ± 2387.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14961185.057 ops/s
# Warmup Iteration   2: 30793840.033 ops/s
# Warmup Iteration   3: 27025285.998 ops/s
# Warmup Iteration   4: 32289533.703 ops/s
# Warmup Iteration   5: 32162042.895 ops/s
# Warmup Iteration   6: 32256496.087 ops/s
# Warmup Iteration   7: 32217369.873 ops/s
# Warmup Iteration   8: 32185149.504 ops/s
# Warmup Iteration   9: 32206394.230 ops/s
# Warmup Iteration  10: 32180665.216 ops/s
# Warmup Iteration  11: 32183036.087 ops/s
# Warmup Iteration  12: 31944293.741 ops/s
# Warmup Iteration  13: 32145579.492 ops/s
# Warmup Iteration  14: 32241666.648 ops/s
# Warmup Iteration  15: 32175485.299 ops/s
# Warmup Iteration  16: 32262527.041 ops/s
# Warmup Iteration  17: 32211005.170 ops/s
# Warmup Iteration  18: 32213760.440 ops/s
# Warmup Iteration  19: 32258654.150 ops/s
# Warmup Iteration  20: 32288109.950 ops/s
# Warmup Iteration  21: 32254813.738 ops/s
# Warmup Iteration  22: 32263319.201 ops/s
# Warmup Iteration  23: 32121687.222 ops/s
# Warmup Iteration  24: 32163484.248 ops/s
# Warmup Iteration  25: 32202318.068 ops/s
# Warmup Iteration  26: 32217497.838 ops/s
# Warmup Iteration  27: 32300297.050 ops/s
# Warmup Iteration  28: 32242340.778 ops/s
# Warmup Iteration  29: 32272981.372 ops/s
# Warmup Iteration  30: 32183254.664 ops/s
Iteration   1: 32165781.663 ops/s
Iteration   2: 32073172.740 ops/s
Iteration   3: 32208452.428 ops/s
Iteration   4: 32183279.370 ops/s
Iteration   5: 32081303.736 ops/s
Iteration   6: 32223580.030 ops/s
Iteration   7: 32327072.921 ops/s
Iteration   8: 32188071.693 ops/s
Iteration   9: 32299638.268 ops/s
Iteration  10: 32224207.223 ops/s
Iteration  11: 32179215.837 ops/s
Iteration  12: 32232297.662 ops/s
Iteration  13: 32119516.692 ops/s
Iteration  14: 32212204.920 ops/s
Iteration  15: 32325851.092 ops/s
Iteration  16: 32239477.137 ops/s
Iteration  17: 32018559.376 ops/s
Iteration  18: 32211589.793 ops/s
Iteration  19: 32205571.669 ops/s
Iteration  20: 32276506.956 ops/s
Iteration  21: 32428195.580 ops/s
Iteration  22: 32130257.795 ops/s
Iteration  23: 32159531.862 ops/s
Iteration  24: 32149753.090 ops/s
Iteration  25: 32212566.677 ops/s
Iteration  26: 32267034.205 ops/s
Iteration  27: 32308541.593 ops/s
Iteration  28: 32243892.337 ops/s
Iteration  29: 32291622.507 ops/s
Iteration  30: 32207883.189 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_each":
  32213154.335 ±(99.9%) 56339.665 ops/s [Average]
  (min, avg, max) = (32018559.376, 32213154.335, 32428195.580), stdev = 84326.565
  CI (99.9%): [32156814.669, 32269494.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_each  thrpt   30  32213154.335 ± 56339.665  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 39197.576 ops/s
# Warmup Iteration   2: 57211.817 ops/s
# Warmup Iteration   3: 80760.304 ops/s
# Warmup Iteration   4: 80543.744 ops/s
# Warmup Iteration   5: 80107.048 ops/s
# Warmup Iteration   6: 80589.737 ops/s
# Warmup Iteration   7: 80666.142 ops/s
# Warmup Iteration   8: 70098.937 ops/s
# Warmup Iteration   9: 78838.389 ops/s
# Warmup Iteration  10: 80883.006 ops/s
# Warmup Iteration  11: 81077.707 ops/s
# Warmup Iteration  12: 80901.490 ops/s
# Warmup Iteration  13: 80873.060 ops/s
# Warmup Iteration  14: 80961.135 ops/s
# Warmup Iteration  15: 80804.746 ops/s
# Warmup Iteration  16: 80782.666 ops/s
# Warmup Iteration  17: 80945.103 ops/s
# Warmup Iteration  18: 80896.615 ops/s
# Warmup Iteration  19: 80490.521 ops/s
# Warmup Iteration  20: 80812.848 ops/s
# Warmup Iteration  21: 81208.850 ops/s
# Warmup Iteration  22: 81041.361 ops/s
# Warmup Iteration  23: 80510.206 ops/s
# Warmup Iteration  24: 80413.809 ops/s
# Warmup Iteration  25: 80922.759 ops/s
# Warmup Iteration  26: 80967.286 ops/s
# Warmup Iteration  27: 80893.607 ops/s
# Warmup Iteration  28: 80760.125 ops/s
# Warmup Iteration  29: 80569.053 ops/s
# Warmup Iteration  30: 80795.496 ops/s
Iteration   1: 80983.173 ops/s
Iteration   2: 81233.436 ops/s
Iteration   3: 80785.851 ops/s
Iteration   4: 80866.950 ops/s
Iteration   5: 80925.078 ops/s
Iteration   6: 81024.382 ops/s
Iteration   7: 81011.182 ops/s
Iteration   8: 81015.477 ops/s
Iteration   9: 81092.366 ops/s
Iteration  10: 81175.971 ops/s
Iteration  11: 81108.225 ops/s
Iteration  12: 81242.950 ops/s
Iteration  13: 81124.551 ops/s
Iteration  14: 80886.404 ops/s
Iteration  15: 80713.775 ops/s
Iteration  16: 81498.138 ops/s
Iteration  17: 80603.832 ops/s
Iteration  18: 81138.937 ops/s
Iteration  19: 80720.101 ops/s
Iteration  20: 80964.411 ops/s
Iteration  21: 81171.226 ops/s
Iteration  22: 81250.931 ops/s
Iteration  23: 81190.188 ops/s
Iteration  24: 80926.178 ops/s
Iteration  25: 80843.217 ops/s
Iteration  26: 81065.608 ops/s
Iteration  27: 81179.929 ops/s
Iteration  28: 81347.336 ops/s
Iteration  29: 81837.629 ops/s
Iteration  30: 81407.564 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_equalsAndHashCode":
  81077.833 ±(99.9%) 168.806 ops/s [Average]
  (min, avg, max) = (80603.832, 81077.833, 81837.629), stdev = 252.661
  CI (99.9%): [80909.027, 81246.639] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  81077.833 ± 168.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1985085.329 ops/s
# Warmup Iteration   2: 4014841.151 ops/s
# Warmup Iteration   3: 4397651.927 ops/s
# Warmup Iteration   4: 4417990.786 ops/s
# Warmup Iteration   5: 3565918.790 ops/s
# Warmup Iteration   6: 4334814.641 ops/s
# Warmup Iteration   7: 4376546.323 ops/s
# Warmup Iteration   8: 4372219.815 ops/s
# Warmup Iteration   9: 4379273.274 ops/s
# Warmup Iteration  10: 4383983.424 ops/s
# Warmup Iteration  11: 4361387.810 ops/s
# Warmup Iteration  12: 4380934.081 ops/s
# Warmup Iteration  13: 4376260.623 ops/s
# Warmup Iteration  14: 4365415.203 ops/s
# Warmup Iteration  15: 4369517.200 ops/s
# Warmup Iteration  16: 4375975.079 ops/s
# Warmup Iteration  17: 4439629.635 ops/s
# Warmup Iteration  18: 4438592.602 ops/s
# Warmup Iteration  19: 4434128.217 ops/s
# Warmup Iteration  20: 4434056.248 ops/s
# Warmup Iteration  21: 4423363.248 ops/s
# Warmup Iteration  22: 4405207.151 ops/s
# Warmup Iteration  23: 4427003.609 ops/s
# Warmup Iteration  24: 4433271.883 ops/s
# Warmup Iteration  25: 4434481.920 ops/s
# Warmup Iteration  26: 4401539.830 ops/s
# Warmup Iteration  27: 4427154.881 ops/s
# Warmup Iteration  28: 4415360.073 ops/s
# Warmup Iteration  29: 4429463.974 ops/s
# Warmup Iteration  30: 4425718.888 ops/s
Iteration   1: 4440303.175 ops/s
Iteration   2: 4436311.540 ops/s
Iteration   3: 4436648.798 ops/s
Iteration   4: 4450958.734 ops/s
Iteration   5: 4429004.089 ops/s
Iteration   6: 4432441.071 ops/s
Iteration   7: 4417675.358 ops/s
Iteration   8: 4416999.326 ops/s
Iteration   9: 4423711.158 ops/s
Iteration  10: 4432873.272 ops/s
Iteration  11: 4431126.558 ops/s
Iteration  12: 4438500.663 ops/s
Iteration  13: 4427971.022 ops/s
Iteration  14: 4450708.111 ops/s
Iteration  15: 4438438.394 ops/s
Iteration  16: 4433961.909 ops/s
Iteration  17: 4449156.425 ops/s
Iteration  18: 4441947.902 ops/s
Iteration  19: 4425667.284 ops/s
Iteration  20: 4441029.561 ops/s
Iteration  21: 4412261.264 ops/s
Iteration  22: 4435755.231 ops/s
Iteration  23: 4433655.665 ops/s
Iteration  24: 4438283.778 ops/s
Iteration  25: 4440884.280 ops/s
Iteration  26: 4433478.521 ops/s
Iteration  27: 4439760.911 ops/s
Iteration  28: 4437386.676 ops/s
Iteration  29: 4445774.034 ops/s
Iteration  30: 4431155.965 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollect":
  4434794.356 ±(99.9%) 6227.312 ops/s [Average]
  (min, avg, max) = (4412261.264, 4434794.356, 4450958.734), stdev = 9320.749
  CI (99.9%): [4428567.043, 4441021.668] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_flatCollect  thrpt   30  4434794.356 ± 6227.312  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1923258.833 ops/s
# Warmup Iteration   2: 4835254.501 ops/s
# Warmup Iteration   3: 4842234.918 ops/s
# Warmup Iteration   4: 4047356.570 ops/s
# Warmup Iteration   5: 4882170.690 ops/s
# Warmup Iteration   6: 4882823.239 ops/s
# Warmup Iteration   7: 4861436.968 ops/s
# Warmup Iteration   8: 4854879.376 ops/s
# Warmup Iteration   9: 4848331.713 ops/s
# Warmup Iteration  10: 4866719.738 ops/s
# Warmup Iteration  11: 4875338.626 ops/s
# Warmup Iteration  12: 4865698.938 ops/s
# Warmup Iteration  13: 4898937.870 ops/s
# Warmup Iteration  14: 4884473.112 ops/s
# Warmup Iteration  15: 4886536.825 ops/s
# Warmup Iteration  16: 4877792.726 ops/s
# Warmup Iteration  17: 4883765.268 ops/s
# Warmup Iteration  18: 4867775.416 ops/s
# Warmup Iteration  19: 4882989.886 ops/s
# Warmup Iteration  20: 4865177.514 ops/s
# Warmup Iteration  21: 4851056.953 ops/s
# Warmup Iteration  22: 4889231.569 ops/s
# Warmup Iteration  23: 4864067.563 ops/s
# Warmup Iteration  24: 4879388.688 ops/s
# Warmup Iteration  25: 4883246.446 ops/s
# Warmup Iteration  26: 4873956.112 ops/s
# Warmup Iteration  27: 4889007.895 ops/s
# Warmup Iteration  28: 4873651.505 ops/s
# Warmup Iteration  29: 4883073.573 ops/s
# Warmup Iteration  30: 4879965.322 ops/s
Iteration   1: 4869391.924 ops/s
Iteration   2: 4866149.339 ops/s
Iteration   3: 4898675.560 ops/s
Iteration   4: 4888226.353 ops/s
Iteration   5: 4871112.627 ops/s
Iteration   6: 4884535.235 ops/s
Iteration   7: 4876166.144 ops/s
Iteration   8: 4864681.492 ops/s
Iteration   9: 4889992.998 ops/s
Iteration  10: 4886299.068 ops/s
Iteration  11: 4880209.603 ops/s
Iteration  12: 4851083.358 ops/s
Iteration  13: 4879770.373 ops/s
Iteration  14: 4881686.246 ops/s
Iteration  15: 4866986.802 ops/s
Iteration  16: 4889254.062 ops/s
Iteration  17: 4871414.910 ops/s
Iteration  18: 4892122.104 ops/s
Iteration  19: 4881267.956 ops/s
Iteration  20: 4883133.882 ops/s
Iteration  21: 4874551.179 ops/s
Iteration  22: 4881674.188 ops/s
Iteration  23: 4872427.456 ops/s
Iteration  24: 4857500.522 ops/s
Iteration  25: 4814635.186 ops/s
Iteration  26: 4884706.359 ops/s
Iteration  27: 4874326.857 ops/s
Iteration  28: 4863128.121 ops/s
Iteration  29: 4870464.470 ops/s
Iteration  30: 4883583.995 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWith":
  4874971.946 ±(99.9%) 10445.388 ops/s [Average]
  (min, avg, max) = (4814635.186, 4874971.946, 4898675.560), stdev = 15634.166
  CI (99.9%): [4864526.558, 4885417.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  4874971.946 ± 10445.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2678778.601 ops/s
# Warmup Iteration   2: 7029512.640 ops/s
# Warmup Iteration   3: 7056540.189 ops/s
# Warmup Iteration   4: 5851890.894 ops/s
# Warmup Iteration   5: 7065007.126 ops/s
# Warmup Iteration   6: 7100025.658 ops/s
# Warmup Iteration   7: 7089115.260 ops/s
# Warmup Iteration   8: 7056344.628 ops/s
# Warmup Iteration   9: 7097550.155 ops/s
# Warmup Iteration  10: 7083546.815 ops/s
# Warmup Iteration  11: 7115322.497 ops/s
# Warmup Iteration  12: 7098171.528 ops/s
# Warmup Iteration  13: 7099543.310 ops/s
# Warmup Iteration  14: 7058358.573 ops/s
# Warmup Iteration  15: 7100298.965 ops/s
# Warmup Iteration  16: 7075642.098 ops/s
# Warmup Iteration  17: 7087777.476 ops/s
# Warmup Iteration  18: 7094256.325 ops/s
# Warmup Iteration  19: 7090769.581 ops/s
# Warmup Iteration  20: 7100569.906 ops/s
# Warmup Iteration  21: 7107365.219 ops/s
# Warmup Iteration  22: 7113869.942 ops/s
# Warmup Iteration  23: 7101620.443 ops/s
# Warmup Iteration  24: 7101066.148 ops/s
# Warmup Iteration  25: 7077357.332 ops/s
# Warmup Iteration  26: 7097469.504 ops/s
# Warmup Iteration  27: 7112032.562 ops/s
# Warmup Iteration  28: 7056529.538 ops/s
# Warmup Iteration  29: 7066195.239 ops/s
# Warmup Iteration  30: 7050722.471 ops/s
Iteration   1: 7083808.142 ops/s
Iteration   2: 7069826.480 ops/s
Iteration   3: 7080226.935 ops/s
Iteration   4: 7083825.806 ops/s
Iteration   5: 7087086.638 ops/s
Iteration   6: 7113387.362 ops/s
Iteration   7: 7082501.804 ops/s
Iteration   8: 7072010.806 ops/s
Iteration   9: 7093800.674 ops/s
Iteration  10: 7079925.244 ops/s
Iteration  11: 7102610.444 ops/s
Iteration  12: 7098760.847 ops/s
Iteration  13: 7101456.405 ops/s
Iteration  14: 7107440.372 ops/s
Iteration  15: 7089667.350 ops/s
Iteration  16: 7089215.440 ops/s
Iteration  17: 7113053.990 ops/s
Iteration  18: 7083097.307 ops/s
Iteration  19: 7044042.927 ops/s
Iteration  20: 7091441.988 ops/s
Iteration  21: 7076203.663 ops/s
Iteration  22: 7086414.434 ops/s
Iteration  23: 7080351.129 ops/s
Iteration  24: 7097460.460 ops/s
Iteration  25: 7086775.084 ops/s
Iteration  26: 7084603.963 ops/s
Iteration  27: 7116403.644 ops/s
Iteration  28: 7110803.849 ops/s
Iteration  29: 7094103.714 ops/s
Iteration  30: 7092538.697 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWithTarget":
  7089761.520 ±(99.9%) 10031.953 ops/s [Average]
  (min, avg, max) = (7044042.927, 7089761.520, 7116403.644), stdev = 15015.356
  CI (99.9%): [7079729.567, 7099793.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  7089761.520 ± 10031.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15441759.326 ops/s
# Warmup Iteration   2: 31583616.700 ops/s
# Warmup Iteration   3: 27805742.210 ops/s
# Warmup Iteration   4: 32719329.156 ops/s
# Warmup Iteration   5: 32831570.322 ops/s
# Warmup Iteration   6: 32884198.939 ops/s
# Warmup Iteration   7: 32826410.649 ops/s
# Warmup Iteration   8: 32779121.854 ops/s
# Warmup Iteration   9: 32851880.808 ops/s
# Warmup Iteration  10: 32817193.732 ops/s
# Warmup Iteration  11: 32761065.582 ops/s
# Warmup Iteration  12: 32813220.162 ops/s
# Warmup Iteration  13: 32848902.294 ops/s
# Warmup Iteration  14: 32866992.248 ops/s
# Warmup Iteration  15: 32924749.998 ops/s
# Warmup Iteration  16: 32753195.602 ops/s
# Warmup Iteration  17: 32803418.434 ops/s
# Warmup Iteration  18: 32867050.174 ops/s
# Warmup Iteration  19: 32925387.677 ops/s
# Warmup Iteration  20: 32845166.998 ops/s
# Warmup Iteration  21: 32871542.820 ops/s
# Warmup Iteration  22: 32824951.470 ops/s
# Warmup Iteration  23: 32953560.393 ops/s
# Warmup Iteration  24: 32840670.335 ops/s
# Warmup Iteration  25: 32861027.017 ops/s
# Warmup Iteration  26: 32826641.437 ops/s
# Warmup Iteration  27: 32874640.562 ops/s
# Warmup Iteration  28: 32693771.732 ops/s
# Warmup Iteration  29: 32808078.758 ops/s
# Warmup Iteration  30: 32852731.894 ops/s
Iteration   1: 32692378.839 ops/s
Iteration   2: 32967517.991 ops/s
Iteration   3: 32765011.975 ops/s
Iteration   4: 32785099.095 ops/s
Iteration   5: 32828045.523 ops/s
Iteration   6: 32834458.950 ops/s
Iteration   7: 32838945.015 ops/s
Iteration   8: 32787440.100 ops/s
Iteration   9: 32908360.012 ops/s
Iteration  10: 32916283.805 ops/s
Iteration  11: 32779979.627 ops/s
Iteration  12: 32796432.023 ops/s
Iteration  13: 32773705.142 ops/s
Iteration  14: 32814449.317 ops/s
Iteration  15: 32841773.279 ops/s
Iteration  16: 32837189.452 ops/s
Iteration  17: 32907737.882 ops/s
Iteration  18: 32932241.825 ops/s
Iteration  19: 32773424.614 ops/s
Iteration  20: 32752330.892 ops/s
Iteration  21: 32838360.501 ops/s
Iteration  22: 32776690.300 ops/s
Iteration  23: 32880223.164 ops/s
Iteration  24: 32637321.232 ops/s
Iteration  25: 32856226.199 ops/s
Iteration  26: 32611584.923 ops/s
Iteration  27: 32813218.418 ops/s
Iteration  28: 32861352.741 ops/s
Iteration  29: 32870961.830 ops/s
Iteration  30: 32876365.773 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEach":
  32818503.681 ±(99.9%) 53309.185 ops/s [Average]
  (min, avg, max) = (32611584.923, 32818503.681, 32967517.991), stdev = 79790.684
  CI (99.9%): [32765194.497, 32871812.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forEach  thrpt   30  32818503.681 ± 53309.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 300258.008 ops/s
# Warmup Iteration   2: 324614.537 ops/s
# Warmup Iteration   3: 385428.552 ops/s
# Warmup Iteration   4: 409641.656 ops/s
# Warmup Iteration   5: 409538.542 ops/s
# Warmup Iteration   6: 407896.284 ops/s
# Warmup Iteration   7: 409676.825 ops/s
# Warmup Iteration   8: 409753.090 ops/s
# Warmup Iteration   9: 409950.879 ops/s
# Warmup Iteration  10: 409656.200 ops/s
# Warmup Iteration  11: 410293.775 ops/s
# Warmup Iteration  12: 409649.705 ops/s
# Warmup Iteration  13: 399249.088 ops/s
# Warmup Iteration  14: 357163.284 ops/s
# Warmup Iteration  15: 408706.262 ops/s
# Warmup Iteration  16: 408367.055 ops/s
# Warmup Iteration  17: 429905.603 ops/s
# Warmup Iteration  18: 430087.567 ops/s
# Warmup Iteration  19: 430653.122 ops/s
# Warmup Iteration  20: 431017.639 ops/s
# Warmup Iteration  21: 430176.674 ops/s
# Warmup Iteration  22: 430910.874 ops/s
# Warmup Iteration  23: 430794.284 ops/s
# Warmup Iteration  24: 430594.243 ops/s
# Warmup Iteration  25: 429717.159 ops/s
# Warmup Iteration  26: 429576.968 ops/s
# Warmup Iteration  27: 429821.792 ops/s
# Warmup Iteration  28: 431140.957 ops/s
# Warmup Iteration  29: 432267.538 ops/s
# Warmup Iteration  30: 430103.521 ops/s
Iteration   1: 432126.231 ops/s
Iteration   2: 431440.777 ops/s
Iteration   3: 429987.775 ops/s
Iteration   4: 429975.397 ops/s
Iteration   5: 431023.176 ops/s
Iteration   6: 430464.584 ops/s
Iteration   7: 430550.002 ops/s
Iteration   8: 431759.527 ops/s
Iteration   9: 429634.716 ops/s
Iteration  10: 430248.990 ops/s
Iteration  11: 428736.878 ops/s
Iteration  12: 429876.012 ops/s
Iteration  13: 430392.887 ops/s
Iteration  14: 430825.575 ops/s
Iteration  15: 431056.227 ops/s
Iteration  16: 430733.202 ops/s
Iteration  17: 431043.634 ops/s
Iteration  18: 429626.947 ops/s
Iteration  19: 430796.368 ops/s
Iteration  20: 432173.132 ops/s
Iteration  21: 431974.252 ops/s
Iteration  22: 431189.815 ops/s
Iteration  23: 430571.912 ops/s
Iteration  24: 431551.984 ops/s
Iteration  25: 431033.497 ops/s
Iteration  26: 431022.566 ops/s
Iteration  27: 426048.210 ops/s
Iteration  28: 429154.652 ops/s
Iteration  29: 429861.735 ops/s
Iteration  30: 430262.897 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachFromTo":
  430504.785 ±(99.9%) 795.153 ops/s [Average]
  (min, avg, max) = (426048.210, 430504.785, 432173.132), stdev = 1190.148
  CI (99.9%): [429709.632, 431299.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  430504.785 ± 795.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14575594.421 ops/s
# Warmup Iteration   2: 29320902.926 ops/s
# Warmup Iteration   3: 24846032.197 ops/s
# Warmup Iteration   4: 29559212.429 ops/s
# Warmup Iteration   5: 29570246.385 ops/s
# Warmup Iteration   6: 29458975.308 ops/s
# Warmup Iteration   7: 29489375.703 ops/s
# Warmup Iteration   8: 29502006.649 ops/s
# Warmup Iteration   9: 29584994.719 ops/s
# Warmup Iteration  10: 29535741.360 ops/s
# Warmup Iteration  11: 29451946.780 ops/s
# Warmup Iteration  12: 29522449.415 ops/s
# Warmup Iteration  13: 29464007.920 ops/s
# Warmup Iteration  14: 29547470.690 ops/s
# Warmup Iteration  15: 29535941.294 ops/s
# Warmup Iteration  16: 29511229.619 ops/s
# Warmup Iteration  17: 29516076.627 ops/s
# Warmup Iteration  18: 29494918.281 ops/s
# Warmup Iteration  19: 29511098.399 ops/s
# Warmup Iteration  20: 29526950.083 ops/s
# Warmup Iteration  21: 29558899.055 ops/s
# Warmup Iteration  22: 29570411.497 ops/s
# Warmup Iteration  23: 29555762.446 ops/s
# Warmup Iteration  24: 29322854.096 ops/s
# Warmup Iteration  25: 29479667.454 ops/s
# Warmup Iteration  26: 29497906.642 ops/s
# Warmup Iteration  27: 29440454.875 ops/s
# Warmup Iteration  28: 29465254.448 ops/s
# Warmup Iteration  29: 29481938.415 ops/s
# Warmup Iteration  30: 29480012.047 ops/s
Iteration   1: 29442746.212 ops/s
Iteration   2: 29576430.211 ops/s
Iteration   3: 29570426.684 ops/s
Iteration   4: 29469725.567 ops/s
Iteration   5: 29446305.363 ops/s
Iteration   6: 29524458.654 ops/s
Iteration   7: 29588551.768 ops/s
Iteration   8: 29472682.427 ops/s
Iteration   9: 29507914.058 ops/s
Iteration  10: 29502985.275 ops/s
Iteration  11: 29591467.872 ops/s
Iteration  12: 29531481.408 ops/s
Iteration  13: 29451111.405 ops/s
Iteration  14: 29613308.057 ops/s
Iteration  15: 29484424.966 ops/s
Iteration  16: 29542708.314 ops/s
Iteration  17: 29425859.118 ops/s
Iteration  18: 29445724.566 ops/s
Iteration  19: 29453388.903 ops/s
Iteration  20: 29591824.392 ops/s
Iteration  21: 29531741.652 ops/s
Iteration  22: 29560946.397 ops/s
Iteration  23: 29560160.436 ops/s
Iteration  24: 29536400.834 ops/s
Iteration  25: 29498649.569 ops/s
Iteration  26: 29509005.396 ops/s
Iteration  27: 29532472.205 ops/s
Iteration  28: 29601244.761 ops/s
Iteration  29: 29527946.679 ops/s
Iteration  30: 29569902.504 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWith":
  29522066.522 ±(99.9%) 36160.349 ops/s [Average]
  (min, avg, max) = (29425859.118, 29522066.522, 29613308.057), stdev = 54123.113
  CI (99.9%): [29485906.173, 29558226.871] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forEachWith  thrpt   30  29522066.522 ± 36160.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19870261.839 ops/s
# Warmup Iteration   2: 41401042.120 ops/s
# Warmup Iteration   3: 35726797.000 ops/s
# Warmup Iteration   4: 42047975.508 ops/s
# Warmup Iteration   5: 42058165.714 ops/s
# Warmup Iteration   6: 42023773.230 ops/s
# Warmup Iteration   7: 42094960.488 ops/s
# Warmup Iteration   8: 42153285.883 ops/s
# Warmup Iteration   9: 42125929.514 ops/s
# Warmup Iteration  10: 42117104.331 ops/s
# Warmup Iteration  11: 42059880.727 ops/s
# Warmup Iteration  12: 41935842.672 ops/s
# Warmup Iteration  13: 42031913.238 ops/s
# Warmup Iteration  14: 42031675.446 ops/s
# Warmup Iteration  15: 42108653.709 ops/s
# Warmup Iteration  16: 41917662.574 ops/s
# Warmup Iteration  17: 41998389.999 ops/s
# Warmup Iteration  18: 42077651.938 ops/s
# Warmup Iteration  19: 42135328.834 ops/s
# Warmup Iteration  20: 42117103.606 ops/s
# Warmup Iteration  21: 42069852.042 ops/s
# Warmup Iteration  22: 41982783.741 ops/s
# Warmup Iteration  23: 42095899.307 ops/s
# Warmup Iteration  24: 42133434.178 ops/s
# Warmup Iteration  25: 42177592.780 ops/s
# Warmup Iteration  26: 42027935.455 ops/s
# Warmup Iteration  27: 42074208.487 ops/s
# Warmup Iteration  28: 42006448.361 ops/s
# Warmup Iteration  29: 42160505.204 ops/s
# Warmup Iteration  30: 42028392.063 ops/s
Iteration   1: 42075763.446 ops/s
Iteration   2: 41950292.069 ops/s
Iteration   3: 42168880.493 ops/s
Iteration   4: 42174466.848 ops/s
Iteration   5: 41954921.947 ops/s
Iteration   6: 42007907.846 ops/s
Iteration   7: 42080030.009 ops/s
Iteration   8: 41956529.935 ops/s
Iteration   9: 41977527.548 ops/s
Iteration  10: 42068712.310 ops/s
Iteration  11: 42064893.364 ops/s
Iteration  12: 41878552.766 ops/s
Iteration  13: 42133944.674 ops/s
Iteration  14: 42221719.605 ops/s
Iteration  15: 42026485.948 ops/s
Iteration  16: 42080785.724 ops/s
Iteration  17: 41958172.726 ops/s
Iteration  18: 42007182.641 ops/s
Iteration  19: 42199212.361 ops/s
Iteration  20: 42133849.259 ops/s
Iteration  21: 42243088.759 ops/s
Iteration  22: 42091192.244 ops/s
Iteration  23: 42075190.933 ops/s
Iteration  24: 42107063.807 ops/s
Iteration  25: 42164737.052 ops/s
Iteration  26: 42099196.591 ops/s
Iteration  27: 42029805.431 ops/s
Iteration  28: 42136155.434 ops/s
Iteration  29: 41813818.267 ops/s
Iteration  30: 42122118.817 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndex":
  42066739.962 ±(99.9%) 67082.197 ops/s [Average]
  (min, avg, max) = (41813818.267, 42066739.962, 42243088.759), stdev = 100405.482
  CI (99.9%): [41999657.765, 42133822.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  42066739.962 ± 67082.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 294097.593 ops/s
# Warmup Iteration   2: 319499.191 ops/s
# Warmup Iteration   3: 379577.863 ops/s
# Warmup Iteration   4: 403504.780 ops/s
# Warmup Iteration   5: 404233.669 ops/s
# Warmup Iteration   6: 399708.010 ops/s
# Warmup Iteration   7: 403611.153 ops/s
# Warmup Iteration   8: 403311.565 ops/s
# Warmup Iteration   9: 404719.314 ops/s
# Warmup Iteration  10: 402777.073 ops/s
# Warmup Iteration  11: 404269.252 ops/s
# Warmup Iteration  12: 403897.013 ops/s
# Warmup Iteration  13: 388320.273 ops/s
# Warmup Iteration  14: 358209.028 ops/s
# Warmup Iteration  15: 404033.544 ops/s
# Warmup Iteration  16: 403778.239 ops/s
# Warmup Iteration  17: 424816.492 ops/s
# Warmup Iteration  18: 422505.338 ops/s
# Warmup Iteration  19: 423276.705 ops/s
# Warmup Iteration  20: 423935.555 ops/s
# Warmup Iteration  21: 424044.603 ops/s
# Warmup Iteration  22: 421362.253 ops/s
# Warmup Iteration  23: 423792.250 ops/s
# Warmup Iteration  24: 424632.757 ops/s
# Warmup Iteration  25: 422512.573 ops/s
# Warmup Iteration  26: 424188.199 ops/s
# Warmup Iteration  27: 423229.433 ops/s
# Warmup Iteration  28: 423770.917 ops/s
# Warmup Iteration  29: 423850.899 ops/s
# Warmup Iteration  30: 424133.418 ops/s
Iteration   1: 424886.372 ops/s
Iteration   2: 424682.841 ops/s
Iteration   3: 424767.375 ops/s
Iteration   4: 421213.482 ops/s
Iteration   5: 423462.056 ops/s
Iteration   6: 424342.234 ops/s
Iteration   7: 424263.662 ops/s
Iteration   8: 422579.248 ops/s
Iteration   9: 423140.788 ops/s
Iteration  10: 424529.224 ops/s
Iteration  11: 424602.887 ops/s
Iteration  12: 424482.333 ops/s
Iteration  13: 422679.960 ops/s
Iteration  14: 423050.856 ops/s
Iteration  15: 423162.469 ops/s
Iteration  16: 422799.617 ops/s
Iteration  17: 421432.086 ops/s
Iteration  18: 422221.657 ops/s
Iteration  19: 422675.492 ops/s
Iteration  20: 420996.813 ops/s
Iteration  21: 422438.700 ops/s
Iteration  22: 420427.716 ops/s
Iteration  23: 423067.288 ops/s
Iteration  24: 423937.689 ops/s
Iteration  25: 423865.202 ops/s
Iteration  26: 423402.997 ops/s
Iteration  27: 423795.535 ops/s
Iteration  28: 421038.073 ops/s
Iteration  29: 422914.913 ops/s
Iteration  30: 424445.894 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  423176.849 ±(99.9%) 835.407 ops/s [Average]
  (min, avg, max) = (420427.716, 423176.849, 424886.372), stdev = 1250.398
  CI (99.9%): [422341.442, 424012.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  423176.849 ± 835.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48455887.735 ops/s
# Warmup Iteration   2: 93857032.927 ops/s
# Warmup Iteration   3: 86362988.299 ops/s
# Warmup Iteration   4: 102069897.138 ops/s
# Warmup Iteration   5: 102409803.483 ops/s
# Warmup Iteration   6: 102379714.770 ops/s
# Warmup Iteration   7: 102345374.309 ops/s
# Warmup Iteration   8: 102287946.117 ops/s
# Warmup Iteration   9: 102304483.304 ops/s
# Warmup Iteration  10: 102073624.821 ops/s
# Warmup Iteration  11: 102193529.323 ops/s
# Warmup Iteration  12: 102297811.852 ops/s
# Warmup Iteration  13: 101938739.666 ops/s
# Warmup Iteration  14: 102477809.063 ops/s
# Warmup Iteration  15: 102653067.767 ops/s
# Warmup Iteration  16: 102463969.376 ops/s
# Warmup Iteration  17: 101769452.588 ops/s
# Warmup Iteration  18: 101934627.437 ops/s
# Warmup Iteration  19: 102035522.505 ops/s
# Warmup Iteration  20: 102050611.412 ops/s
# Warmup Iteration  21: 102182617.585 ops/s
# Warmup Iteration  22: 102203072.818 ops/s
# Warmup Iteration  23: 102205459.774 ops/s
# Warmup Iteration  24: 102099325.069 ops/s
# Warmup Iteration  25: 102018893.743 ops/s
# Warmup Iteration  26: 102060185.956 ops/s
# Warmup Iteration  27: 102239394.845 ops/s
# Warmup Iteration  28: 102263530.332 ops/s
# Warmup Iteration  29: 101948003.287 ops/s
# Warmup Iteration  30: 102074762.024 ops/s
Iteration   1: 101932589.535 ops/s
Iteration   2: 102462811.179 ops/s
Iteration   3: 102419262.782 ops/s
Iteration   4: 102532349.826 ops/s
Iteration   5: 101886201.610 ops/s
Iteration   6: 102232063.038 ops/s
Iteration   7: 102432031.451 ops/s
Iteration   8: 101958285.602 ops/s
Iteration   9: 102451482.587 ops/s
Iteration  10: 101980416.312 ops/s
Iteration  11: 102298732.445 ops/s
Iteration  12: 102154917.558 ops/s
Iteration  13: 102291456.258 ops/s
Iteration  14: 102162997.587 ops/s
Iteration  15: 102457279.087 ops/s
Iteration  16: 102151733.060 ops/s
Iteration  17: 102196720.617 ops/s
Iteration  18: 102482272.158 ops/s
Iteration  19: 101983706.773 ops/s
Iteration  20: 102320740.948 ops/s
Iteration  21: 102703729.403 ops/s
Iteration  22: 102096170.782 ops/s
Iteration  23: 102603452.425 ops/s
Iteration  24: 102110746.619 ops/s
Iteration  25: 102483268.054 ops/s
Iteration  26: 102298372.684 ops/s
Iteration  27: 102406993.177 ops/s
Iteration  28: 102444153.104 ops/s
Iteration  29: 102328790.137 ops/s
Iteration  30: 102576100.819 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_forLoop":
  102294660.921 ±(99.9%) 145229.483 ops/s [Average]
  (min, avg, max) = (101886201.610, 102294660.921, 102703729.403), stdev = 217372.669
  CI (99.9%): [102149431.438, 102439890.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_forLoop  thrpt   30  102294660.921 ± 145229.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 369301.065 ops/s
# Warmup Iteration   2: 385588.950 ops/s
# Warmup Iteration   3: 467680.753 ops/s
# Warmup Iteration   4: 488238.689 ops/s
# Warmup Iteration   5: 487977.996 ops/s
# Warmup Iteration   6: 486026.285 ops/s
# Warmup Iteration   7: 488792.623 ops/s
# Warmup Iteration   8: 488865.927 ops/s
# Warmup Iteration   9: 488604.058 ops/s
# Warmup Iteration  10: 489495.328 ops/s
# Warmup Iteration  11: 489737.218 ops/s
# Warmup Iteration  12: 489780.014 ops/s
# Warmup Iteration  13: 429363.115 ops/s
# Warmup Iteration  14: 474120.675 ops/s
# Warmup Iteration  15: 488885.954 ops/s
# Warmup Iteration  16: 487699.876 ops/s
# Warmup Iteration  17: 519649.105 ops/s
# Warmup Iteration  18: 519615.130 ops/s
# Warmup Iteration  19: 518162.943 ops/s
# Warmup Iteration  20: 518855.179 ops/s
# Warmup Iteration  21: 519237.154 ops/s
# Warmup Iteration  22: 519045.167 ops/s
# Warmup Iteration  23: 517318.142 ops/s
# Warmup Iteration  24: 518776.154 ops/s
# Warmup Iteration  25: 518188.837 ops/s
# Warmup Iteration  26: 520370.103 ops/s
# Warmup Iteration  27: 519374.974 ops/s
# Warmup Iteration  28: 520023.592 ops/s
# Warmup Iteration  29: 517786.401 ops/s
# Warmup Iteration  30: 519259.754 ops/s
Iteration   1: 520120.173 ops/s
Iteration   2: 518618.108 ops/s
Iteration   3: 521473.898 ops/s
Iteration   4: 519919.232 ops/s
Iteration   5: 519765.255 ops/s
Iteration   6: 519753.084 ops/s
Iteration   7: 519978.472 ops/s
Iteration   8: 520135.805 ops/s
Iteration   9: 518173.209 ops/s
Iteration  10: 516291.088 ops/s
Iteration  11: 519101.057 ops/s
Iteration  12: 519849.739 ops/s
Iteration  13: 518909.270 ops/s
Iteration  14: 520140.376 ops/s
Iteration  15: 518451.524 ops/s
Iteration  16: 520927.142 ops/s
Iteration  17: 520810.947 ops/s
Iteration  18: 520877.772 ops/s
Iteration  19: 516971.625 ops/s
Iteration  20: 518141.418 ops/s
Iteration  21: 518072.113 ops/s
Iteration  22: 520852.816 ops/s
Iteration  23: 518118.568 ops/s
Iteration  24: 518725.852 ops/s
Iteration  25: 520199.570 ops/s
Iteration  26: 519598.904 ops/s
Iteration  27: 521945.708 ops/s
Iteration  28: 517872.484 ops/s
Iteration  29: 518043.710 ops/s
Iteration  30: 520110.367 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_get":
  519398.310 ±(99.9%) 892.758 ops/s [Average]
  (min, avg, max) = (516291.088, 519398.310, 521945.708), stdev = 1336.239
  CI (99.9%): [518505.551, 520291.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_get  thrpt   30  519398.310 ± 892.758  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48938209.039 ops/s
# Warmup Iteration   2: 96155374.605 ops/s
# Warmup Iteration   3: 89115402.409 ops/s
# Warmup Iteration   4: 105354377.990 ops/s
# Warmup Iteration   5: 105345816.751 ops/s
# Warmup Iteration   6: 105200358.515 ops/s
# Warmup Iteration   7: 105004923.568 ops/s
# Warmup Iteration   8: 105100485.596 ops/s
# Warmup Iteration   9: 105404189.643 ops/s
# Warmup Iteration  10: 105042258.408 ops/s
# Warmup Iteration  11: 104837520.269 ops/s
# Warmup Iteration  12: 104818176.975 ops/s
# Warmup Iteration  13: 105587584.387 ops/s
# Warmup Iteration  14: 105405246.504 ops/s
# Warmup Iteration  15: 105361998.536 ops/s
# Warmup Iteration  16: 105171016.415 ops/s
# Warmup Iteration  17: 105385718.205 ops/s
# Warmup Iteration  18: 105128324.748 ops/s
# Warmup Iteration  19: 105495444.794 ops/s
# Warmup Iteration  20: 105480813.091 ops/s
# Warmup Iteration  21: 105276126.407 ops/s
# Warmup Iteration  22: 105425478.279 ops/s
# Warmup Iteration  23: 105272169.119 ops/s
# Warmup Iteration  24: 105427162.204 ops/s
# Warmup Iteration  25: 105424310.482 ops/s
# Warmup Iteration  26: 105234005.878 ops/s
# Warmup Iteration  27: 104932251.312 ops/s
# Warmup Iteration  28: 105534504.343 ops/s
# Warmup Iteration  29: 105290468.635 ops/s
# Warmup Iteration  30: 105027074.894 ops/s
Iteration   1: 105065710.557 ops/s
Iteration   2: 105416083.208 ops/s
Iteration   3: 105557193.723 ops/s
Iteration   4: 105378530.095 ops/s
Iteration   5: 105494460.337 ops/s
Iteration   6: 105087118.769 ops/s
Iteration   7: 105620576.659 ops/s
Iteration   8: 105443082.551 ops/s
Iteration   9: 105212773.327 ops/s
Iteration  10: 105237249.043 ops/s
Iteration  11: 105367470.835 ops/s
Iteration  12: 105312226.020 ops/s
Iteration  13: 105201723.809 ops/s
Iteration  14: 104784706.604 ops/s
Iteration  15: 105286058.442 ops/s
Iteration  16: 105209642.266 ops/s
Iteration  17: 104626476.758 ops/s
Iteration  18: 105051130.574 ops/s
Iteration  19: 104544372.395 ops/s
Iteration  20: 105187859.862 ops/s
Iteration  21: 105285289.148 ops/s
Iteration  22: 106024676.693 ops/s
Iteration  23: 104886727.813 ops/s
Iteration  24: 106073287.394 ops/s
Iteration  25: 105210728.232 ops/s
Iteration  26: 105745138.844 ops/s
Iteration  27: 104950564.133 ops/s
Iteration  28: 105356951.329 ops/s
Iteration  29: 105220338.405 ops/s
Iteration  30: 105081782.584 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getFirst":
  105263997.680 ±(99.9%) 228315.985 ops/s [Average]
  (min, avg, max) = (104544372.395, 105263997.680, 106073287.394), stdev = 341732.644
  CI (99.9%): [105035681.695, 105492313.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_getFirst  thrpt   30  105263997.680 ± 228315.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48162048.170 ops/s
# Warmup Iteration   2: 96393720.254 ops/s
# Warmup Iteration   3: 89655717.288 ops/s
# Warmup Iteration   4: 105215846.845 ops/s
# Warmup Iteration   5: 105796507.183 ops/s
# Warmup Iteration   6: 105298038.935 ops/s
# Warmup Iteration   7: 105468876.957 ops/s
# Warmup Iteration   8: 105562482.102 ops/s
# Warmup Iteration   9: 105532331.336 ops/s
# Warmup Iteration  10: 105540268.270 ops/s
# Warmup Iteration  11: 105594511.711 ops/s
# Warmup Iteration  12: 105376933.840 ops/s
# Warmup Iteration  13: 105483107.490 ops/s
# Warmup Iteration  14: 105394776.642 ops/s
# Warmup Iteration  15: 105062674.287 ops/s
# Warmup Iteration  16: 105569542.429 ops/s
# Warmup Iteration  17: 105568024.556 ops/s
# Warmup Iteration  18: 105185903.767 ops/s
# Warmup Iteration  19: 105156949.265 ops/s
# Warmup Iteration  20: 105112952.006 ops/s
# Warmup Iteration  21: 105573104.297 ops/s
# Warmup Iteration  22: 105533534.001 ops/s
# Warmup Iteration  23: 105428940.927 ops/s
# Warmup Iteration  24: 105434904.057 ops/s
# Warmup Iteration  25: 105252300.548 ops/s
# Warmup Iteration  26: 105715230.152 ops/s
# Warmup Iteration  27: 105236597.454 ops/s
# Warmup Iteration  28: 105113478.487 ops/s
# Warmup Iteration  29: 105507799.595 ops/s
# Warmup Iteration  30: 105304058.072 ops/s
Iteration   1: 105016255.498 ops/s
Iteration   2: 105499231.258 ops/s
Iteration   3: 105328451.715 ops/s
Iteration   4: 105006493.719 ops/s
Iteration   5: 105480813.390 ops/s
Iteration   6: 105208369.421 ops/s
Iteration   7: 105616836.809 ops/s
Iteration   8: 105516863.851 ops/s
Iteration   9: 105799219.205 ops/s
Iteration  10: 105082301.419 ops/s
Iteration  11: 105594307.918 ops/s
Iteration  12: 105009684.217 ops/s
Iteration  13: 105359465.581 ops/s
Iteration  14: 105136590.076 ops/s
Iteration  15: 105770305.345 ops/s
Iteration  16: 105498128.205 ops/s
Iteration  17: 105038907.908 ops/s
Iteration  18: 105752160.683 ops/s
Iteration  19: 105278363.248 ops/s
Iteration  20: 105010347.208 ops/s
Iteration  21: 105318114.268 ops/s
Iteration  22: 105774815.256 ops/s
Iteration  23: 105322981.717 ops/s
Iteration  24: 105638288.255 ops/s
Iteration  25: 104675907.782 ops/s
Iteration  26: 105797316.166 ops/s
Iteration  27: 104758676.739 ops/s
Iteration  28: 105307713.385 ops/s
Iteration  29: 105268686.223 ops/s
Iteration  30: 105352138.961 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getLast":
  105340591.181 ±(99.9%) 205206.013 ops/s [Average]
  (min, avg, max) = (104675907.782, 105340591.181, 105799219.205), stdev = 307142.723
  CI (99.9%): [105135385.168, 105545797.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_getLast  thrpt   30  105340591.181 ± 205206.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790592.455 ops/s
# Warmup Iteration   2: 817164.238 ops/s
# Warmup Iteration   3: 1068139.270 ops/s
# Warmup Iteration   4: 1070431.362 ops/s
# Warmup Iteration   5: 1074452.931 ops/s
# Warmup Iteration   6: 1054687.109 ops/s
# Warmup Iteration   7: 1070857.480 ops/s
# Warmup Iteration   8: 1067568.049 ops/s
# Warmup Iteration   9: 1064728.232 ops/s
# Warmup Iteration  10: 1069947.842 ops/s
# Warmup Iteration  11: 1070506.014 ops/s
# Warmup Iteration  12: 905868.547 ops/s
# Warmup Iteration  13: 1074867.273 ops/s
# Warmup Iteration  14: 1069565.973 ops/s
# Warmup Iteration  15: 1071817.855 ops/s
# Warmup Iteration  16: 1071484.498 ops/s
# Warmup Iteration  17: 1132072.754 ops/s
# Warmup Iteration  18: 1133398.354 ops/s
# Warmup Iteration  19: 1131769.638 ops/s
# Warmup Iteration  20: 1133220.623 ops/s
# Warmup Iteration  21: 1131391.865 ops/s
# Warmup Iteration  22: 1134376.018 ops/s
# Warmup Iteration  23: 1133432.513 ops/s
# Warmup Iteration  24: 1133583.980 ops/s
# Warmup Iteration  25: 1131110.477 ops/s
# Warmup Iteration  26: 1131076.623 ops/s
# Warmup Iteration  27: 1136989.200 ops/s
# Warmup Iteration  28: 1130781.162 ops/s
# Warmup Iteration  29: 1134232.463 ops/s
# Warmup Iteration  30: 1133740.393 ops/s
Iteration   1: 1135880.208 ops/s
Iteration   2: 1133815.617 ops/s
Iteration   3: 1136172.743 ops/s
Iteration   4: 1130069.763 ops/s
Iteration   5: 1130707.621 ops/s
Iteration   6: 1131215.569 ops/s
Iteration   7: 1128383.918 ops/s
Iteration   8: 1133148.168 ops/s
Iteration   9: 1133608.354 ops/s
Iteration  10: 1134011.177 ops/s
Iteration  11: 1128881.330 ops/s
Iteration  12: 1129922.730 ops/s
Iteration  13: 1138676.928 ops/s
Iteration  14: 1137994.892 ops/s
Iteration  15: 1131907.497 ops/s
Iteration  16: 1134814.334 ops/s
Iteration  17: 1131168.061 ops/s
Iteration  18: 1137621.011 ops/s
Iteration  19: 1137692.804 ops/s
Iteration  20: 1139203.138 ops/s
Iteration  21: 1133803.078 ops/s
Iteration  22: 1127802.685 ops/s
Iteration  23: 1128947.110 ops/s
Iteration  24: 1131280.644 ops/s
Iteration  25: 1133864.778 ops/s
Iteration  26: 1134665.227 ops/s
Iteration  27: 1127966.483 ops/s
Iteration  28: 1135090.443 ops/s
Iteration  29: 1137478.802 ops/s
Iteration  30: 1138996.633 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_getOnly":
  1133493.058 ±(99.9%) 2357.484 ops/s [Average]
  (min, avg, max) = (1127802.685, 1133493.058, 1139203.138), stdev = 3528.571
  CI (99.9%): [1131135.575, 1135850.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_getOnly  thrpt   30  1133493.058 ± 2357.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1076376.754 ops/s
# Warmup Iteration   2: 2809997.215 ops/s
# Warmup Iteration   3: 2867215.579 ops/s
# Warmup Iteration   4: 2369137.380 ops/s
# Warmup Iteration   5: 2869233.897 ops/s
# Warmup Iteration   6: 2866619.351 ops/s
# Warmup Iteration   7: 2875281.516 ops/s
# Warmup Iteration   8: 2868863.416 ops/s
# Warmup Iteration   9: 2867875.457 ops/s
# Warmup Iteration  10: 2860513.787 ops/s
# Warmup Iteration  11: 2869607.845 ops/s
# Warmup Iteration  12: 2873465.030 ops/s
# Warmup Iteration  13: 2867711.602 ops/s
# Warmup Iteration  14: 2867960.497 ops/s
# Warmup Iteration  15: 2862211.603 ops/s
# Warmup Iteration  16: 2866840.569 ops/s
# Warmup Iteration  17: 2868611.657 ops/s
# Warmup Iteration  18: 2870059.408 ops/s
# Warmup Iteration  19: 2873894.901 ops/s
# Warmup Iteration  20: 2818347.512 ops/s
# Warmup Iteration  21: 2865027.724 ops/s
# Warmup Iteration  22: 2854483.738 ops/s
# Warmup Iteration  23: 2868050.465 ops/s
# Warmup Iteration  24: 2851961.183 ops/s
# Warmup Iteration  25: 2856136.560 ops/s
# Warmup Iteration  26: 2870759.894 ops/s
# Warmup Iteration  27: 2868251.921 ops/s
# Warmup Iteration  28: 2856959.392 ops/s
# Warmup Iteration  29: 2853392.604 ops/s
# Warmup Iteration  30: 2869082.211 ops/s
Iteration   1: 2868457.068 ops/s
Iteration   2: 2863295.619 ops/s
Iteration   3: 2867134.473 ops/s
Iteration   4: 2857016.424 ops/s
Iteration   5: 2840050.645 ops/s
Iteration   6: 2846837.803 ops/s
Iteration   7: 2867713.962 ops/s
Iteration   8: 2862406.504 ops/s
Iteration   9: 2864491.913 ops/s
Iteration  10: 2869583.787 ops/s
Iteration  11: 2869899.461 ops/s
Iteration  12: 2868699.024 ops/s
Iteration  13: 2864577.115 ops/s
Iteration  14: 2866027.630 ops/s
Iteration  15: 2870710.450 ops/s
Iteration  16: 2870781.471 ops/s
Iteration  17: 2860027.780 ops/s
Iteration  18: 2864179.908 ops/s
Iteration  19: 2866697.264 ops/s
Iteration  20: 2866988.445 ops/s
Iteration  21: 2869434.655 ops/s
Iteration  22: 2869865.805 ops/s
Iteration  23: 2870388.639 ops/s
Iteration  24: 2863089.217 ops/s
Iteration  25: 2864459.701 ops/s
Iteration  26: 2863403.677 ops/s
Iteration  27: 2866187.891 ops/s
Iteration  28: 2857876.868 ops/s
Iteration  29: 2857518.466 ops/s
Iteration  30: 2864150.489 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupBy":
  2864065.072 ±(99.9%) 4591.305 ops/s [Average]
  (min, avg, max) = (2840050.645, 2864065.072, 2870781.471), stdev = 6872.050
  CI (99.9%): [2859473.767, 2868656.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_groupBy  thrpt   30  2864065.072 ± 4591.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 394041.074 ops/s
# Warmup Iteration   2: 826133.883 ops/s
# Warmup Iteration   3: 908345.327 ops/s
# Warmup Iteration   4: 908718.763 ops/s
# Warmup Iteration   5: 769018.417 ops/s
# Warmup Iteration   6: 922502.914 ops/s
# Warmup Iteration   7: 918645.967 ops/s
# Warmup Iteration   8: 921924.976 ops/s
# Warmup Iteration   9: 920921.841 ops/s
# Warmup Iteration  10: 920830.299 ops/s
# Warmup Iteration  11: 919024.516 ops/s
# Warmup Iteration  12: 904004.642 ops/s
# Warmup Iteration  13: 903490.758 ops/s
# Warmup Iteration  14: 918668.110 ops/s
# Warmup Iteration  15: 920239.138 ops/s
# Warmup Iteration  16: 921648.738 ops/s
# Warmup Iteration  17: 920201.252 ops/s
# Warmup Iteration  18: 900386.840 ops/s
# Warmup Iteration  19: 920795.826 ops/s
# Warmup Iteration  20: 912819.310 ops/s
# Warmup Iteration  21: 895681.521 ops/s
# Warmup Iteration  22: 923505.290 ops/s
# Warmup Iteration  23: 921519.474 ops/s
# Warmup Iteration  24: 922241.568 ops/s
# Warmup Iteration  25: 918280.718 ops/s
# Warmup Iteration  26: 918419.594 ops/s
# Warmup Iteration  27: 905690.457 ops/s
# Warmup Iteration  28: 921121.265 ops/s
# Warmup Iteration  29: 920781.666 ops/s
# Warmup Iteration  30: 919947.429 ops/s
Iteration   1: 920778.198 ops/s
Iteration   2: 924031.821 ops/s
Iteration   3: 925525.724 ops/s
Iteration   4: 918160.451 ops/s
Iteration   5: 918290.719 ops/s
Iteration   6: 920147.707 ops/s
Iteration   7: 920859.834 ops/s
Iteration   8: 923984.854 ops/s
Iteration   9: 923144.995 ops/s
Iteration  10: 916854.778 ops/s
Iteration  11: 919282.914 ops/s
Iteration  12: 908637.991 ops/s
Iteration  13: 912537.438 ops/s
Iteration  14: 917453.168 ops/s
Iteration  15: 921612.017 ops/s
Iteration  16: 920349.251 ops/s
Iteration  17: 920007.891 ops/s
Iteration  18: 921170.043 ops/s
Iteration  19: 918400.374 ops/s
Iteration  20: 908008.923 ops/s
Iteration  21: 922934.580 ops/s
Iteration  22: 918609.118 ops/s
Iteration  23: 921433.308 ops/s
Iteration  24: 921727.185 ops/s
Iteration  25: 915287.977 ops/s
Iteration  26: 921754.543 ops/s
Iteration  27: 914436.088 ops/s
Iteration  28: 923244.493 ops/s
Iteration  29: 919044.051 ops/s
Iteration  30: 910414.102 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_groupByEach":
  918937.485 ±(99.9%) 2971.435 ops/s [Average]
  (min, avg, max) = (908008.923, 918937.485, 925525.724), stdev = 4447.504
  CI (99.9%): [915966.050, 921908.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_groupByEach  thrpt   30  918937.485 ± 2971.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42794409.004 ops/s
# Warmup Iteration   2: 91081750.109 ops/s
# Warmup Iteration   3: 87222375.570 ops/s
# Warmup Iteration   4: 103004248.071 ops/s
# Warmup Iteration   5: 103084695.266 ops/s
# Warmup Iteration   6: 103034940.066 ops/s
# Warmup Iteration   7: 103361021.162 ops/s
# Warmup Iteration   8: 102949097.462 ops/s
# Warmup Iteration   9: 103643821.082 ops/s
# Warmup Iteration  10: 103234412.004 ops/s
# Warmup Iteration  11: 102808068.958 ops/s
# Warmup Iteration  12: 103322270.252 ops/s
# Warmup Iteration  13: 103267323.933 ops/s
# Warmup Iteration  14: 103385523.982 ops/s
# Warmup Iteration  15: 103139558.021 ops/s
# Warmup Iteration  16: 103125985.217 ops/s
# Warmup Iteration  17: 103058772.156 ops/s
# Warmup Iteration  18: 101863280.226 ops/s
# Warmup Iteration  19: 101721227.490 ops/s
# Warmup Iteration  20: 102860202.565 ops/s
# Warmup Iteration  21: 102868566.393 ops/s
# Warmup Iteration  22: 103062316.369 ops/s
# Warmup Iteration  23: 103034718.480 ops/s
# Warmup Iteration  24: 103115462.746 ops/s
# Warmup Iteration  25: 103268181.080 ops/s
# Warmup Iteration  26: 102597473.518 ops/s
# Warmup Iteration  27: 102646146.197 ops/s
# Warmup Iteration  28: 101123368.204 ops/s
# Warmup Iteration  29: 102896506.866 ops/s
# Warmup Iteration  30: 102934850.912 ops/s
Iteration   1: 102107859.490 ops/s
Iteration   2: 102288174.509 ops/s
Iteration   3: 102913639.631 ops/s
Iteration   4: 102716794.334 ops/s
Iteration   5: 103066732.992 ops/s
Iteration   6: 103294728.093 ops/s
Iteration   7: 102428031.500 ops/s
Iteration   8: 103130380.832 ops/s
Iteration   9: 102835866.693 ops/s
Iteration  10: 103102532.846 ops/s
Iteration  11: 102806950.489 ops/s
Iteration  12: 102939538.536 ops/s
Iteration  13: 102601524.099 ops/s
Iteration  14: 102714462.261 ops/s
Iteration  15: 103503045.880 ops/s
Iteration  16: 102877201.823 ops/s
Iteration  17: 103550155.937 ops/s
Iteration  18: 102546340.179 ops/s
Iteration  19: 102592016.309 ops/s
Iteration  20: 103141630.644 ops/s
Iteration  21: 102954978.603 ops/s
Iteration  22: 103180834.739 ops/s
Iteration  23: 102722153.127 ops/s
Iteration  24: 103135710.537 ops/s
Iteration  25: 102425414.788 ops/s
Iteration  26: 102977076.948 ops/s
Iteration  27: 102687270.694 ops/s
Iteration  28: 103218602.734 ops/s
Iteration  29: 103501643.440 ops/s
Iteration  30: 102952104.333 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_indexOf":
  102897113.234 ±(99.9%) 237043.842 ops/s [Average]
  (min, avg, max) = (102107859.490, 102897113.234, 103550155.937), stdev = 354796.090
  CI (99.9%): [102660069.392, 103134157.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_indexOf  thrpt   30  102897113.234 ± 237043.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24722945.386 ops/s
# Warmup Iteration   2: 48493849.060 ops/s
# Warmup Iteration   3: 42189636.094 ops/s
# Warmup Iteration   4: 49555129.557 ops/s
# Warmup Iteration   5: 49739967.407 ops/s
# Warmup Iteration   6: 49544347.595 ops/s
# Warmup Iteration   7: 49495959.040 ops/s
# Warmup Iteration   8: 49580284.393 ops/s
# Warmup Iteration   9: 49559030.640 ops/s
# Warmup Iteration  10: 49624911.406 ops/s
# Warmup Iteration  11: 49589978.786 ops/s
# Warmup Iteration  12: 49321535.088 ops/s
# Warmup Iteration  13: 49445801.341 ops/s
# Warmup Iteration  14: 49633113.780 ops/s
# Warmup Iteration  15: 49478777.660 ops/s
# Warmup Iteration  16: 49624903.265 ops/s
# Warmup Iteration  17: 49664805.082 ops/s
# Warmup Iteration  18: 49636893.770 ops/s
# Warmup Iteration  19: 49498704.706 ops/s
# Warmup Iteration  20: 49714633.707 ops/s
# Warmup Iteration  21: 49547948.069 ops/s
# Warmup Iteration  22: 49538434.358 ops/s
# Warmup Iteration  23: 49606428.200 ops/s
# Warmup Iteration  24: 49712554.906 ops/s
# Warmup Iteration  25: 49620524.057 ops/s
# Warmup Iteration  26: 49520955.524 ops/s
# Warmup Iteration  27: 49627917.169 ops/s
# Warmup Iteration  28: 49601582.425 ops/s
# Warmup Iteration  29: 49579363.204 ops/s
# Warmup Iteration  30: 49657587.192 ops/s
Iteration   1: 49280211.761 ops/s
Iteration   2: 49682971.233 ops/s
Iteration   3: 49703782.503 ops/s
Iteration   4: 49698401.509 ops/s
Iteration   5: 49568385.579 ops/s
Iteration   6: 49528442.425 ops/s
Iteration   7: 49881476.329 ops/s
Iteration   8: 49495031.356 ops/s
Iteration   9: 49720921.441 ops/s
Iteration  10: 49537356.910 ops/s
Iteration  11: 49713936.229 ops/s
Iteration  12: 49598827.830 ops/s
Iteration  13: 49660881.881 ops/s
Iteration  14: 49566717.864 ops/s
Iteration  15: 49557743.853 ops/s
Iteration  16: 49512989.974 ops/s
Iteration  17: 49628799.473 ops/s
Iteration  18: 49662727.162 ops/s
Iteration  19: 49470737.518 ops/s
Iteration  20: 49726966.968 ops/s
Iteration  21: 49540125.844 ops/s
Iteration  22: 49595538.712 ops/s
Iteration  23: 49466106.990 ops/s
Iteration  24: 49624317.042 ops/s
Iteration  25: 49687270.375 ops/s
Iteration  26: 49679065.142 ops/s
Iteration  27: 49488923.105 ops/s
Iteration  28: 49751684.959 ops/s
Iteration  29: 49524381.106 ops/s
Iteration  30: 49690007.125 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectInto":
  49608157.673 ±(99.9%) 77719.176 ops/s [Average]
  (min, avg, max) = (49280211.761, 49608157.673, 49881476.329), stdev = 116326.413
  CI (99.9%): [49530438.497, 49685876.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_injectInto  thrpt   30  49608157.673 ± 77719.176  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24487839.735 ops/s
# Warmup Iteration   2: 50981662.406 ops/s
# Warmup Iteration   3: 46355868.751 ops/s
# Warmup Iteration   4: 53168427.158 ops/s
# Warmup Iteration   5: 54100185.848 ops/s
# Warmup Iteration   6: 54063335.947 ops/s
# Warmup Iteration   7: 54171563.164 ops/s
# Warmup Iteration   8: 54175630.424 ops/s
# Warmup Iteration   9: 54079316.921 ops/s
# Warmup Iteration  10: 53970625.206 ops/s
# Warmup Iteration  11: 54134364.425 ops/s
# Warmup Iteration  12: 54155765.540 ops/s
# Warmup Iteration  13: 54192451.288 ops/s
# Warmup Iteration  14: 53856861.456 ops/s
# Warmup Iteration  15: 54141216.659 ops/s
# Warmup Iteration  16: 53915223.319 ops/s
# Warmup Iteration  17: 54177159.303 ops/s
# Warmup Iteration  18: 54052912.870 ops/s
# Warmup Iteration  19: 54154637.808 ops/s
# Warmup Iteration  20: 54039809.817 ops/s
# Warmup Iteration  21: 54073905.564 ops/s
# Warmup Iteration  22: 54263649.700 ops/s
# Warmup Iteration  23: 54003067.591 ops/s
# Warmup Iteration  24: 53982645.765 ops/s
# Warmup Iteration  25: 54068316.595 ops/s
# Warmup Iteration  26: 54101679.646 ops/s
# Warmup Iteration  27: 54267012.600 ops/s
# Warmup Iteration  28: 54061667.155 ops/s
# Warmup Iteration  29: 53956757.404 ops/s
# Warmup Iteration  30: 54116701.903 ops/s
Iteration   1: 53857462.971 ops/s
Iteration   2: 53930296.232 ops/s
Iteration   3: 54248744.914 ops/s
Iteration   4: 54036253.117 ops/s
Iteration   5: 54101840.423 ops/s
Iteration   6: 54143404.280 ops/s
Iteration   7: 54137233.364 ops/s
Iteration   8: 53880901.620 ops/s
Iteration   9: 54119172.932 ops/s
Iteration  10: 54251693.381 ops/s
Iteration  11: 54170486.237 ops/s
Iteration  12: 54214846.406 ops/s
Iteration  13: 54023762.133 ops/s
Iteration  14: 53885000.056 ops/s
Iteration  15: 53985313.600 ops/s
Iteration  16: 54111601.991 ops/s
Iteration  17: 54182478.083 ops/s
Iteration  18: 54465927.876 ops/s
Iteration  19: 54133182.354 ops/s
Iteration  20: 54067811.592 ops/s
Iteration  21: 54020521.977 ops/s
Iteration  22: 54081441.072 ops/s
Iteration  23: 53908835.287 ops/s
Iteration  24: 53992534.411 ops/s
Iteration  25: 54069557.076 ops/s
Iteration  26: 54223530.009 ops/s
Iteration  27: 54098493.321 ops/s
Iteration  28: 54127681.257 ops/s
Iteration  29: 53969509.070 ops/s
Iteration  30: 53989458.077 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoDouble":
  54080965.837 ±(99.9%) 88154.737 ops/s [Average]
  (min, avg, max) = (53857462.971, 54080965.837, 54465927.876), stdev = 131945.870
  CI (99.9%): [53992811.101, 54169120.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  54080965.837 ± 88154.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24406191.251 ops/s
# Warmup Iteration   2: 51746480.106 ops/s
# Warmup Iteration   3: 45377901.221 ops/s
# Warmup Iteration   4: 51352892.617 ops/s
# Warmup Iteration   5: 52429881.614 ops/s
# Warmup Iteration   6: 52535318.338 ops/s
# Warmup Iteration   7: 52788627.035 ops/s
# Warmup Iteration   8: 52399884.900 ops/s
# Warmup Iteration   9: 52413433.625 ops/s
# Warmup Iteration  10: 52683718.506 ops/s
# Warmup Iteration  11: 52540432.080 ops/s
# Warmup Iteration  12: 52519534.031 ops/s
# Warmup Iteration  13: 51924472.417 ops/s
# Warmup Iteration  14: 52754808.535 ops/s
# Warmup Iteration  15: 52684185.430 ops/s
# Warmup Iteration  16: 52518992.112 ops/s
# Warmup Iteration  17: 52564095.326 ops/s
# Warmup Iteration  18: 52413493.158 ops/s
# Warmup Iteration  19: 52314896.384 ops/s
# Warmup Iteration  20: 52642598.825 ops/s
# Warmup Iteration  21: 52584927.629 ops/s
# Warmup Iteration  22: 52359263.352 ops/s
# Warmup Iteration  23: 52618644.174 ops/s
# Warmup Iteration  24: 52494619.738 ops/s
# Warmup Iteration  25: 52592632.025 ops/s
# Warmup Iteration  26: 52560176.499 ops/s
# Warmup Iteration  27: 52501747.736 ops/s
# Warmup Iteration  28: 52432269.799 ops/s
# Warmup Iteration  29: 52685632.134 ops/s
# Warmup Iteration  30: 52687889.745 ops/s
Iteration   1: 52716924.358 ops/s
Iteration   2: 52696405.267 ops/s
Iteration   3: 52634391.910 ops/s
Iteration   4: 52527384.257 ops/s
Iteration   5: 52810720.696 ops/s
Iteration   6: 52654832.174 ops/s
Iteration   7: 52534179.745 ops/s
Iteration   8: 52426227.045 ops/s
Iteration   9: 52033157.616 ops/s
Iteration  10: 52167471.396 ops/s
Iteration  11: 52198797.529 ops/s
Iteration  12: 52333219.863 ops/s
Iteration  13: 52683209.298 ops/s
Iteration  14: 52641645.764 ops/s
Iteration  15: 52668617.635 ops/s
Iteration  16: 52421731.390 ops/s
Iteration  17: 52587495.964 ops/s
Iteration  18: 52500769.005 ops/s
Iteration  19: 52632125.263 ops/s
Iteration  20: 52569131.504 ops/s
Iteration  21: 52655893.709 ops/s
Iteration  22: 52631139.877 ops/s
Iteration  23: 52569539.725 ops/s
Iteration  24: 52570770.116 ops/s
Iteration  25: 52762286.462 ops/s
Iteration  26: 52655610.641 ops/s
Iteration  27: 52779803.131 ops/s
Iteration  28: 52572075.376 ops/s
Iteration  29: 52557782.459 ops/s
Iteration  30: 52683481.211 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoFloat":
  52562560.680 ±(99.9%) 120550.231 ops/s [Average]
  (min, avg, max) = (52033157.616, 52562560.680, 52810720.696), stdev = 180433.924
  CI (99.9%): [52442010.449, 52683110.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  52562560.680 ± 120550.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28108526.100 ops/s
# Warmup Iteration   2: 53937590.157 ops/s
# Warmup Iteration   3: 47183693.809 ops/s
# Warmup Iteration   4: 55615153.359 ops/s
# Warmup Iteration   5: 55688214.752 ops/s
# Warmup Iteration   6: 55445434.532 ops/s
# Warmup Iteration   7: 55595551.190 ops/s
# Warmup Iteration   8: 55616005.889 ops/s
# Warmup Iteration   9: 55568655.147 ops/s
# Warmup Iteration  10: 55731029.525 ops/s
# Warmup Iteration  11: 55621339.943 ops/s
# Warmup Iteration  12: 55697828.999 ops/s
# Warmup Iteration  13: 55546562.597 ops/s
# Warmup Iteration  14: 55760537.461 ops/s
# Warmup Iteration  15: 55582556.726 ops/s
# Warmup Iteration  16: 55350090.843 ops/s
# Warmup Iteration  17: 55769472.758 ops/s
# Warmup Iteration  18: 55618925.105 ops/s
# Warmup Iteration  19: 55463651.040 ops/s
# Warmup Iteration  20: 55674749.117 ops/s
# Warmup Iteration  21: 55609500.668 ops/s
# Warmup Iteration  22: 55630515.444 ops/s
# Warmup Iteration  23: 55628123.087 ops/s
# Warmup Iteration  24: 55416656.845 ops/s
# Warmup Iteration  25: 55670340.611 ops/s
# Warmup Iteration  26: 55585278.935 ops/s
# Warmup Iteration  27: 55632679.457 ops/s
# Warmup Iteration  28: 55487075.045 ops/s
# Warmup Iteration  29: 55543736.290 ops/s
# Warmup Iteration  30: 55621386.815 ops/s
Iteration   1: 55711217.940 ops/s
Iteration   2: 55565056.862 ops/s
Iteration   3: 55576868.695 ops/s
Iteration   4: 55707155.688 ops/s
Iteration   5: 55418864.278 ops/s
Iteration   6: 55721465.042 ops/s
Iteration   7: 55843380.293 ops/s
Iteration   8: 55548299.387 ops/s
Iteration   9: 55722666.340 ops/s
Iteration  10: 55684473.559 ops/s
Iteration  11: 55424212.658 ops/s
Iteration  12: 55623894.280 ops/s
Iteration  13: 55767398.133 ops/s
Iteration  14: 55671847.666 ops/s
Iteration  15: 55469378.532 ops/s
Iteration  16: 55657345.717 ops/s
Iteration  17: 55762700.722 ops/s
Iteration  18: 55845848.444 ops/s
Iteration  19: 55654772.392 ops/s
Iteration  20: 55721225.470 ops/s
Iteration  21: 55797893.456 ops/s
Iteration  22: 55696727.442 ops/s
Iteration  23: 55501746.522 ops/s
Iteration  24: 55547227.657 ops/s
Iteration  25: 55729962.975 ops/s
Iteration  26: 55770723.142 ops/s
Iteration  27: 55610906.555 ops/s
Iteration  28: 55502853.606 ops/s
Iteration  29: 55727728.504 ops/s
Iteration  30: 55782282.752 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoInt":
  55658870.824 ±(99.9%) 79343.238 ops/s [Average]
  (min, avg, max) = (55418864.278, 55658870.824, 55845848.444), stdev = 118757.233
  CI (99.9%): [55579527.585, 55738214.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  55658870.824 ± 79343.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27722048.732 ops/s
# Warmup Iteration   2: 55494661.029 ops/s
# Warmup Iteration   3: 47175188.480 ops/s
# Warmup Iteration   4: 53842314.885 ops/s
# Warmup Iteration   5: 55785046.990 ops/s
# Warmup Iteration   6: 55721087.532 ops/s
# Warmup Iteration   7: 55647281.206 ops/s
# Warmup Iteration   8: 55689784.843 ops/s
# Warmup Iteration   9: 55682867.912 ops/s
# Warmup Iteration  10: 55624462.789 ops/s
# Warmup Iteration  11: 55609843.889 ops/s
# Warmup Iteration  12: 55812770.197 ops/s
# Warmup Iteration  13: 55689753.117 ops/s
# Warmup Iteration  14: 55653454.429 ops/s
# Warmup Iteration  15: 55725412.020 ops/s
# Warmup Iteration  16: 55850627.825 ops/s
# Warmup Iteration  17: 55854776.598 ops/s
# Warmup Iteration  18: 55840522.097 ops/s
# Warmup Iteration  19: 55813267.756 ops/s
# Warmup Iteration  20: 55813226.851 ops/s
# Warmup Iteration  21: 55667658.906 ops/s
# Warmup Iteration  22: 55707761.894 ops/s
# Warmup Iteration  23: 55657597.377 ops/s
# Warmup Iteration  24: 55760740.936 ops/s
# Warmup Iteration  25: 55765779.443 ops/s
# Warmup Iteration  26: 55735728.455 ops/s
# Warmup Iteration  27: 55893826.364 ops/s
# Warmup Iteration  28: 55810250.248 ops/s
# Warmup Iteration  29: 55771609.433 ops/s
# Warmup Iteration  30: 55701386.586 ops/s
Iteration   1: 55790399.112 ops/s
Iteration   2: 55641169.285 ops/s
Iteration   3: 55686071.944 ops/s
Iteration   4: 55922438.017 ops/s
Iteration   5: 55722376.368 ops/s
Iteration   6: 55724404.222 ops/s
Iteration   7: 55665437.221 ops/s
Iteration   8: 55676445.779 ops/s
Iteration   9: 55788775.575 ops/s
Iteration  10: 55728346.389 ops/s
Iteration  11: 55709284.792 ops/s
Iteration  12: 55910340.608 ops/s
Iteration  13: 55907638.262 ops/s
Iteration  14: 55666389.272 ops/s
Iteration  15: 55834825.382 ops/s
Iteration  16: 55784294.583 ops/s
Iteration  17: 55740268.314 ops/s
Iteration  18: 55736894.319 ops/s
Iteration  19: 55733331.792 ops/s
Iteration  20: 55677361.830 ops/s
Iteration  21: 55565212.435 ops/s
Iteration  22: 55635499.888 ops/s
Iteration  23: 55612007.079 ops/s
Iteration  24: 55725293.928 ops/s
Iteration  25: 55516843.056 ops/s
Iteration  26: 55548582.484 ops/s
Iteration  27: 55654534.918 ops/s
Iteration  28: 55695201.581 ops/s
Iteration  29: 55946134.165 ops/s
Iteration  30: 55664016.178 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoLong":
  55720327.293 ±(99.9%) 71275.962 ops/s [Average]
  (min, avg, max) = (55516843.056, 55720327.293, 55946134.165), stdev = 106682.513
  CI (99.9%): [55649051.331, 55791603.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  55720327.293 ± 71275.962  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51027306.264 ops/s
# Warmup Iteration   2: 104122985.921 ops/s
# Warmup Iteration   3: 93837191.971 ops/s
# Warmup Iteration   4: 109067986.930 ops/s
# Warmup Iteration   5: 109285324.823 ops/s
# Warmup Iteration   6: 109258726.679 ops/s
# Warmup Iteration   7: 109199417.812 ops/s
# Warmup Iteration   8: 109015646.279 ops/s
# Warmup Iteration   9: 108806193.592 ops/s
# Warmup Iteration  10: 108869428.857 ops/s
# Warmup Iteration  11: 108788984.046 ops/s
# Warmup Iteration  12: 109053136.545 ops/s
# Warmup Iteration  13: 108869666.338 ops/s
# Warmup Iteration  14: 108384544.610 ops/s
# Warmup Iteration  15: 108626656.168 ops/s
# Warmup Iteration  16: 109005930.898 ops/s
# Warmup Iteration  17: 109911086.561 ops/s
# Warmup Iteration  18: 109805322.789 ops/s
# Warmup Iteration  19: 109734640.972 ops/s
# Warmup Iteration  20: 109779136.992 ops/s
# Warmup Iteration  21: 109875412.275 ops/s
# Warmup Iteration  22: 109701780.085 ops/s
# Warmup Iteration  23: 109250820.162 ops/s
# Warmup Iteration  24: 109674688.275 ops/s
# Warmup Iteration  25: 109949434.109 ops/s
# Warmup Iteration  26: 109485227.339 ops/s
# Warmup Iteration  27: 109463430.195 ops/s
# Warmup Iteration  28: 109702934.590 ops/s
# Warmup Iteration  29: 109147335.146 ops/s
# Warmup Iteration  30: 109130476.839 ops/s
Iteration   1: 109253192.188 ops/s
Iteration   2: 108999897.125 ops/s
Iteration   3: 110202353.489 ops/s
Iteration   4: 109993216.367 ops/s
Iteration   5: 110452552.257 ops/s
Iteration   6: 109637596.158 ops/s
Iteration   7: 110249344.598 ops/s
Iteration   8: 110041447.443 ops/s
Iteration   9: 109132223.424 ops/s
Iteration  10: 110093122.265 ops/s
Iteration  11: 110261421.221 ops/s
Iteration  12: 110405752.316 ops/s
Iteration  13: 109885045.509 ops/s
Iteration  14: 109773485.597 ops/s
Iteration  15: 109982723.724 ops/s
Iteration  16: 109818878.980 ops/s
Iteration  17: 109671655.473 ops/s
Iteration  18: 109961195.340 ops/s
Iteration  19: 109541532.142 ops/s
Iteration  20: 110349539.931 ops/s
Iteration  21: 109477931.592 ops/s
Iteration  22: 110157650.464 ops/s
Iteration  23: 109346937.359 ops/s
Iteration  24: 109670355.763 ops/s
Iteration  25: 109679317.351 ops/s
Iteration  26: 109702365.558 ops/s
Iteration  27: 110152432.596 ops/s
Iteration  28: 109555597.978 ops/s
Iteration  29: 109738469.598 ops/s
Iteration  30: 109619074.809 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_isEmpty":
  109826876.954 ±(99.9%) 250968.824 ops/s [Average]
  (min, avg, max) = (108999897.125, 109826876.954, 110452552.257), stdev = 375638.350
  CI (99.9%): [109575908.129, 110077845.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_isEmpty  thrpt   30  109826876.954 ± 250968.824  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373580.584 ops/s
# Warmup Iteration   2: 392100.019 ops/s
# Warmup Iteration   3: 458046.705 ops/s
# Warmup Iteration   4: 494303.496 ops/s
# Warmup Iteration   5: 491087.616 ops/s
# Warmup Iteration   6: 490245.211 ops/s
# Warmup Iteration   7: 493800.182 ops/s
# Warmup Iteration   8: 493836.365 ops/s
# Warmup Iteration   9: 494942.555 ops/s
# Warmup Iteration  10: 494277.311 ops/s
# Warmup Iteration  11: 494452.917 ops/s
# Warmup Iteration  12: 493542.209 ops/s
# Warmup Iteration  13: 494832.880 ops/s
# Warmup Iteration  14: 421669.598 ops/s
# Warmup Iteration  15: 493862.150 ops/s
# Warmup Iteration  16: 494342.081 ops/s
# Warmup Iteration  17: 524230.058 ops/s
# Warmup Iteration  18: 524035.978 ops/s
# Warmup Iteration  19: 523435.244 ops/s
# Warmup Iteration  20: 525030.755 ops/s
# Warmup Iteration  21: 524074.021 ops/s
# Warmup Iteration  22: 524199.580 ops/s
# Warmup Iteration  23: 525521.372 ops/s
# Warmup Iteration  24: 523974.333 ops/s
# Warmup Iteration  25: 523913.251 ops/s
# Warmup Iteration  26: 522824.715 ops/s
# Warmup Iteration  27: 524561.639 ops/s
# Warmup Iteration  28: 523414.411 ops/s
# Warmup Iteration  29: 524944.719 ops/s
# Warmup Iteration  30: 525673.083 ops/s
Iteration   1: 524577.027 ops/s
Iteration   2: 524722.551 ops/s
Iteration   3: 525777.810 ops/s
Iteration   4: 524789.928 ops/s
Iteration   5: 524475.678 ops/s
Iteration   6: 524335.904 ops/s
Iteration   7: 524721.522 ops/s
Iteration   8: 526174.233 ops/s
Iteration   9: 524174.631 ops/s
Iteration  10: 523345.147 ops/s
Iteration  11: 523178.904 ops/s
Iteration  12: 523600.738 ops/s
Iteration  13: 523239.940 ops/s
Iteration  14: 523483.560 ops/s
Iteration  15: 523057.780 ops/s
Iteration  16: 524813.513 ops/s
Iteration  17: 524304.881 ops/s
Iteration  18: 524206.804 ops/s
Iteration  19: 525454.765 ops/s
Iteration  20: 520435.109 ops/s
Iteration  21: 525965.297 ops/s
Iteration  22: 522816.347 ops/s
Iteration  23: 525264.357 ops/s
Iteration  24: 523360.577 ops/s
Iteration  25: 525151.485 ops/s
Iteration  26: 521868.269 ops/s
Iteration  27: 522889.062 ops/s
Iteration  28: 523196.041 ops/s
Iteration  29: 522068.088 ops/s
Iteration  30: 521601.301 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iterator":
  523901.708 ±(99.9%) 903.993 ops/s [Average]
  (min, avg, max) = (520435.109, 523901.708, 526174.233), stdev = 1353.054
  CI (99.9%): [522997.716, 524805.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_iterator  thrpt   30  523901.708 ± 903.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 632040.536 ops/s
# Warmup Iteration   2: 762582.048 ops/s
# Warmup Iteration   3: 957396.107 ops/s
# Warmup Iteration   4: 952899.573 ops/s
# Warmup Iteration   5: 962854.739 ops/s
# Warmup Iteration   6: 959438.485 ops/s
# Warmup Iteration   7: 959438.189 ops/s
# Warmup Iteration   8: 960550.826 ops/s
# Warmup Iteration   9: 804434.433 ops/s
# Warmup Iteration  10: 959540.958 ops/s
# Warmup Iteration  11: 960824.199 ops/s
# Warmup Iteration  12: 961871.428 ops/s
# Warmup Iteration  13: 959683.849 ops/s
# Warmup Iteration  14: 959676.517 ops/s
# Warmup Iteration  15: 959340.100 ops/s
# Warmup Iteration  16: 960199.224 ops/s
# Warmup Iteration  17: 1013014.087 ops/s
# Warmup Iteration  18: 1012774.999 ops/s
# Warmup Iteration  19: 1016522.467 ops/s
# Warmup Iteration  20: 1014583.068 ops/s
# Warmup Iteration  21: 1014880.003 ops/s
# Warmup Iteration  22: 1011580.116 ops/s
# Warmup Iteration  23: 1014441.002 ops/s
# Warmup Iteration  24: 1016086.295 ops/s
# Warmup Iteration  25: 1015516.570 ops/s
# Warmup Iteration  26: 1017471.734 ops/s
# Warmup Iteration  27: 1014864.575 ops/s
# Warmup Iteration  28: 1015360.897 ops/s
# Warmup Iteration  29: 1013210.296 ops/s
# Warmup Iteration  30: 1011067.934 ops/s
Iteration   1: 1010126.514 ops/s
Iteration   2: 1016230.565 ops/s
Iteration   3: 1016441.706 ops/s
Iteration   4: 1011460.947 ops/s
Iteration   5: 1016955.982 ops/s
Iteration   6: 1013127.284 ops/s
Iteration   7: 1012370.218 ops/s
Iteration   8: 1014428.566 ops/s
Iteration   9: 1015127.373 ops/s
Iteration  10: 1012950.549 ops/s
Iteration  11: 1011914.188 ops/s
Iteration  12: 1015016.915 ops/s
Iteration  13: 1010110.509 ops/s
Iteration  14: 1007491.928 ops/s
Iteration  15: 1013755.743 ops/s
Iteration  16: 1013974.084 ops/s
Iteration  17: 1016066.480 ops/s
Iteration  18: 1014464.715 ops/s
Iteration  19: 1015131.641 ops/s
Iteration  20: 1016991.381 ops/s
Iteration  21: 1014539.513 ops/s
Iteration  22: 1012083.874 ops/s
Iteration  23: 1010383.647 ops/s
Iteration  24: 1007991.687 ops/s
Iteration  25: 1008845.473 ops/s
Iteration  26: 1007676.872 ops/s
Iteration  27: 1008783.212 ops/s
Iteration  28: 1010807.466 ops/s
Iteration  29: 1016593.775 ops/s
Iteration  30: 1013084.077 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_iteratorRemove":
  1012830.896 ±(99.9%) 1955.377 ops/s [Average]
  (min, avg, max) = (1007491.928, 1012830.896, 1016991.381), stdev = 2926.716
  CI (99.9%): [1010875.520, 1014786.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1012830.896 ± 1955.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45970104.363 ops/s
# Warmup Iteration   2: 96766799.692 ops/s
# Warmup Iteration   3: 90827448.707 ops/s
# Warmup Iteration   4: 107005964.849 ops/s
# Warmup Iteration   5: 107188798.908 ops/s
# Warmup Iteration   6: 106687327.065 ops/s
# Warmup Iteration   7: 107040675.424 ops/s
# Warmup Iteration   8: 106553471.899 ops/s
# Warmup Iteration   9: 107018876.470 ops/s
# Warmup Iteration  10: 106891501.811 ops/s
# Warmup Iteration  11: 106854748.466 ops/s
# Warmup Iteration  12: 107209795.847 ops/s
# Warmup Iteration  13: 106897556.825 ops/s
# Warmup Iteration  14: 107105261.350 ops/s
# Warmup Iteration  15: 106749921.952 ops/s
# Warmup Iteration  16: 106740556.251 ops/s
# Warmup Iteration  17: 106907337.036 ops/s
# Warmup Iteration  18: 106797127.038 ops/s
# Warmup Iteration  19: 106953879.618 ops/s
# Warmup Iteration  20: 107233993.759 ops/s
# Warmup Iteration  21: 106965464.859 ops/s
# Warmup Iteration  22: 106898679.131 ops/s
# Warmup Iteration  23: 106685003.350 ops/s
# Warmup Iteration  24: 106967026.172 ops/s
# Warmup Iteration  25: 106973967.323 ops/s
# Warmup Iteration  26: 106791536.043 ops/s
# Warmup Iteration  27: 106844675.346 ops/s
# Warmup Iteration  28: 106631194.729 ops/s
# Warmup Iteration  29: 106253777.726 ops/s
# Warmup Iteration  30: 106730142.209 ops/s
Iteration   1: 106754723.598 ops/s
Iteration   2: 107189546.888 ops/s
Iteration   3: 107004431.808 ops/s
Iteration   4: 107017426.492 ops/s
Iteration   5: 106025251.456 ops/s
Iteration   6: 107199930.438 ops/s
Iteration   7: 106666998.425 ops/s
Iteration   8: 105725668.303 ops/s
Iteration   9: 106160637.878 ops/s
Iteration  10: 106487275.533 ops/s
Iteration  11: 107128937.220 ops/s
Iteration  12: 107143963.113 ops/s
Iteration  13: 107322973.317 ops/s
Iteration  14: 106660032.490 ops/s
Iteration  15: 106871354.882 ops/s
Iteration  16: 106881248.940 ops/s
Iteration  17: 106902260.658 ops/s
Iteration  18: 106748719.312 ops/s
Iteration  19: 106960795.198 ops/s
Iteration  20: 106375653.822 ops/s
Iteration  21: 106969049.402 ops/s
Iteration  22: 106968535.889 ops/s
Iteration  23: 107177362.780 ops/s
Iteration  24: 106694489.974 ops/s
Iteration  25: 107010633.826 ops/s
Iteration  26: 106523047.680 ops/s
Iteration  27: 107139059.929 ops/s
Iteration  28: 107217185.621 ops/s
Iteration  29: 106932641.305 ops/s
Iteration  30: 106834718.058 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_lastIndexOf":
  106823151.808 ±(99.9%) 249834.645 ops/s [Average]
  (min, avg, max) = (105725668.303, 106823151.808, 107322973.317), stdev = 373940.763
  CI (99.9%): [106573317.163, 107072986.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  106823151.808 ± 249834.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145886.795 ops/s
# Warmup Iteration   2: 154337.551 ops/s
# Warmup Iteration   3: 186299.272 ops/s
# Warmup Iteration   4: 196630.748 ops/s
# Warmup Iteration   5: 196952.439 ops/s
# Warmup Iteration   6: 195261.959 ops/s
# Warmup Iteration   7: 196452.976 ops/s
# Warmup Iteration   8: 196122.818 ops/s
# Warmup Iteration   9: 195612.314 ops/s
# Warmup Iteration  10: 196257.447 ops/s
# Warmup Iteration  11: 196331.906 ops/s
# Warmup Iteration  12: 195348.921 ops/s
# Warmup Iteration  13: 177438.211 ops/s
# Warmup Iteration  14: 183316.994 ops/s
# Warmup Iteration  15: 196140.986 ops/s
# Warmup Iteration  16: 195641.554 ops/s
# Warmup Iteration  17: 206871.854 ops/s
# Warmup Iteration  18: 206689.864 ops/s
# Warmup Iteration  19: 206434.085 ops/s
# Warmup Iteration  20: 207084.907 ops/s
# Warmup Iteration  21: 206774.373 ops/s
# Warmup Iteration  22: 206079.581 ops/s
# Warmup Iteration  23: 205977.450 ops/s
# Warmup Iteration  24: 206529.857 ops/s
# Warmup Iteration  25: 206129.627 ops/s
# Warmup Iteration  26: 206330.778 ops/s
# Warmup Iteration  27: 206439.648 ops/s
# Warmup Iteration  28: 207058.382 ops/s
# Warmup Iteration  29: 207166.353 ops/s
# Warmup Iteration  30: 205532.354 ops/s
Iteration   1: 205738.512 ops/s
Iteration   2: 205923.032 ops/s
Iteration   3: 206440.620 ops/s
Iteration   4: 206528.473 ops/s
Iteration   5: 206919.996 ops/s
Iteration   6: 206748.589 ops/s
Iteration   7: 206941.309 ops/s
Iteration   8: 206858.192 ops/s
Iteration   9: 207188.817 ops/s
Iteration  10: 207352.612 ops/s
Iteration  11: 207004.970 ops/s
Iteration  12: 207158.423 ops/s
Iteration  13: 206890.963 ops/s
Iteration  14: 206356.072 ops/s
Iteration  15: 206461.449 ops/s
Iteration  16: 206866.480 ops/s
Iteration  17: 206168.119 ops/s
Iteration  18: 206628.868 ops/s
Iteration  19: 207063.481 ops/s
Iteration  20: 205521.244 ops/s
Iteration  21: 204727.511 ops/s
Iteration  22: 205561.661 ops/s
Iteration  23: 206319.281 ops/s
Iteration  24: 206094.526 ops/s
Iteration  25: 206051.040 ops/s
Iteration  26: 206436.120 ops/s
Iteration  27: 205265.343 ops/s
Iteration  28: 205987.423 ops/s
Iteration  29: 205449.105 ops/s
Iteration  30: 205794.439 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator":
  206348.222 ±(99.9%) 433.395 ops/s [Average]
  (min, avg, max) = (204727.511, 206348.222, 207352.612), stdev = 648.685
  CI (99.9%): [205914.827, 206781.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_listIterator  thrpt   30  206348.222 ± 433.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 766991.275 ops/s
# Warmup Iteration   2: 796033.041 ops/s
# Warmup Iteration   3: 989797.101 ops/s
# Warmup Iteration   4: 1024874.927 ops/s
# Warmup Iteration   5: 1027461.159 ops/s
# Warmup Iteration   6: 1016488.341 ops/s
# Warmup Iteration   7: 1024242.156 ops/s
# Warmup Iteration   8: 1021169.353 ops/s
# Warmup Iteration   9: 1022095.769 ops/s
# Warmup Iteration  10: 1027902.478 ops/s
# Warmup Iteration  11: 1022621.731 ops/s
# Warmup Iteration  12: 1022878.101 ops/s
# Warmup Iteration  13: 864090.963 ops/s
# Warmup Iteration  14: 1022680.791 ops/s
# Warmup Iteration  15: 1026380.193 ops/s
# Warmup Iteration  16: 1025828.139 ops/s
# Warmup Iteration  17: 1087300.230 ops/s
# Warmup Iteration  18: 1087928.965 ops/s
# Warmup Iteration  19: 1088530.890 ops/s
# Warmup Iteration  20: 1087505.815 ops/s
# Warmup Iteration  21: 1086838.922 ops/s
# Warmup Iteration  22: 1084775.449 ops/s
# Warmup Iteration  23: 1088821.721 ops/s
# Warmup Iteration  24: 1088290.834 ops/s
# Warmup Iteration  25: 1091685.957 ops/s
# Warmup Iteration  26: 1088525.306 ops/s
# Warmup Iteration  27: 1091390.771 ops/s
# Warmup Iteration  28: 1082884.467 ops/s
# Warmup Iteration  29: 1090780.833 ops/s
# Warmup Iteration  30: 1087989.011 ops/s
Iteration   1: 1088910.877 ops/s
Iteration   2: 1090642.186 ops/s
Iteration   3: 1093997.265 ops/s
Iteration   4: 1094732.425 ops/s
Iteration   5: 1090288.061 ops/s
Iteration   6: 1088626.849 ops/s
Iteration   7: 1082529.261 ops/s
Iteration   8: 1085097.144 ops/s
Iteration   9: 1088834.123 ops/s
Iteration  10: 1088333.729 ops/s
Iteration  11: 1092492.594 ops/s
Iteration  12: 1087939.854 ops/s
Iteration  13: 1083073.975 ops/s
Iteration  14: 1091580.470 ops/s
Iteration  15: 1083163.372 ops/s
Iteration  16: 1085123.411 ops/s
Iteration  17: 1083113.791 ops/s
Iteration  18: 1091311.723 ops/s
Iteration  19: 1089576.096 ops/s
Iteration  20: 1090634.980 ops/s
Iteration  21: 1090377.576 ops/s
Iteration  22: 1084498.262 ops/s
Iteration  23: 1087440.132 ops/s
Iteration  24: 1089946.044 ops/s
Iteration  25: 1088081.682 ops/s
Iteration  26: 1091933.879 ops/s
Iteration  27: 1089892.448 ops/s
Iteration  28: 1089844.343 ops/s
Iteration  29: 1088605.378 ops/s
Iteration  30: 1088266.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1088629.615 ±(99.9%) 2149.342 ops/s [Average]
  (min, avg, max) = (1082529.261, 1088629.615, 1094732.425), stdev = 3217.035
  CI (99.9%): [1086480.273, 1090778.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1088629.615 ± 2149.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771759.711 ops/s
# Warmup Iteration   2: 798676.774 ops/s
# Warmup Iteration   3: 995979.286 ops/s
# Warmup Iteration   4: 1031739.003 ops/s
# Warmup Iteration   5: 1032643.443 ops/s
# Warmup Iteration   6: 1026467.201 ops/s
# Warmup Iteration   7: 1035123.740 ops/s
# Warmup Iteration   8: 1030202.035 ops/s
# Warmup Iteration   9: 1029678.973 ops/s
# Warmup Iteration  10: 1029137.207 ops/s
# Warmup Iteration  11: 1033173.978 ops/s
# Warmup Iteration  12: 1028214.829 ops/s
# Warmup Iteration  13: 873654.637 ops/s
# Warmup Iteration  14: 1033388.987 ops/s
# Warmup Iteration  15: 1033447.853 ops/s
# Warmup Iteration  16: 1033952.100 ops/s
# Warmup Iteration  17: 1098066.953 ops/s
# Warmup Iteration  18: 1097771.189 ops/s
# Warmup Iteration  19: 1102251.551 ops/s
# Warmup Iteration  20: 1097750.148 ops/s
# Warmup Iteration  21: 1099232.009 ops/s
# Warmup Iteration  22: 1103081.321 ops/s
# Warmup Iteration  23: 1099411.553 ops/s
# Warmup Iteration  24: 1101822.748 ops/s
# Warmup Iteration  25: 1092837.523 ops/s
# Warmup Iteration  26: 1098116.876 ops/s
# Warmup Iteration  27: 1099361.280 ops/s
# Warmup Iteration  28: 1097609.869 ops/s
# Warmup Iteration  29: 1097432.162 ops/s
# Warmup Iteration  30: 1099693.174 ops/s
Iteration   1: 1097930.488 ops/s
Iteration   2: 1100966.718 ops/s
Iteration   3: 1100194.224 ops/s
Iteration   4: 1099691.738 ops/s
Iteration   5: 1100580.976 ops/s
Iteration   6: 1098368.702 ops/s
Iteration   7: 1098885.311 ops/s
Iteration   8: 1093390.705 ops/s
Iteration   9: 1103170.499 ops/s
Iteration  10: 1103055.865 ops/s
Iteration  11: 1102238.449 ops/s
Iteration  12: 1098646.373 ops/s
Iteration  13: 1100174.159 ops/s
Iteration  14: 1098772.384 ops/s
Iteration  15: 1100727.803 ops/s
Iteration  16: 1101156.818 ops/s
Iteration  17: 1095994.238 ops/s
Iteration  18: 1094559.671 ops/s
Iteration  19: 1090085.268 ops/s
Iteration  20: 1094567.930 ops/s
Iteration  21: 1083760.057 ops/s
Iteration  22: 1090819.203 ops/s
Iteration  23: 1087784.336 ops/s
Iteration  24: 1099448.073 ops/s
Iteration  25: 1100901.036 ops/s
Iteration  26: 1099621.674 ops/s
Iteration  27: 1092055.332 ops/s
Iteration  28: 1097925.486 ops/s
Iteration  29: 1095406.719 ops/s
Iteration  30: 1099743.386 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1097354.121 ±(99.9%) 3122.497 ops/s [Average]
  (min, avg, max) = (1083760.057, 1097354.121, 1103170.499), stdev = 4673.607
  CI (99.9%): [1094231.624, 1100476.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1097354.121 ± 3122.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 959267.219 ops/s
# Warmup Iteration   2: 2255824.649 ops/s
# Warmup Iteration   3: 1899462.449 ops/s
# Warmup Iteration   4: 2272837.787 ops/s
# Warmup Iteration   5: 2268675.539 ops/s
# Warmup Iteration   6: 2278192.053 ops/s
# Warmup Iteration   7: 2271706.359 ops/s
# Warmup Iteration   8: 2271521.616 ops/s
# Warmup Iteration   9: 2268996.183 ops/s
# Warmup Iteration  10: 2264165.198 ops/s
# Warmup Iteration  11: 2274575.892 ops/s
# Warmup Iteration  12: 2284338.094 ops/s
# Warmup Iteration  13: 2279202.286 ops/s
# Warmup Iteration  14: 2274781.966 ops/s
# Warmup Iteration  15: 2257228.178 ops/s
# Warmup Iteration  16: 2276998.768 ops/s
# Warmup Iteration  17: 2280956.276 ops/s
# Warmup Iteration  18: 2276343.245 ops/s
# Warmup Iteration  19: 2275537.411 ops/s
# Warmup Iteration  20: 2272611.003 ops/s
# Warmup Iteration  21: 2274870.315 ops/s
# Warmup Iteration  22: 2269549.392 ops/s
# Warmup Iteration  23: 2284155.544 ops/s
# Warmup Iteration  24: 2272105.607 ops/s
# Warmup Iteration  25: 2283025.403 ops/s
# Warmup Iteration  26: 2271181.560 ops/s
# Warmup Iteration  27: 2270282.583 ops/s
# Warmup Iteration  28: 2268296.315 ops/s
# Warmup Iteration  29: 2275800.155 ops/s
# Warmup Iteration  30: 2271981.694 ops/s
Iteration   1: 2274398.928 ops/s
Iteration   2: 2268096.195 ops/s
Iteration   3: 2278596.633 ops/s
Iteration   4: 2271555.486 ops/s
Iteration   5: 2271781.092 ops/s
Iteration   6: 2276529.768 ops/s
Iteration   7: 2273657.030 ops/s
Iteration   8: 2281536.279 ops/s
Iteration   9: 2285961.535 ops/s
Iteration  10: 2279444.367 ops/s
Iteration  11: 2272945.236 ops/s
Iteration  12: 2279914.473 ops/s
Iteration  13: 2259210.810 ops/s
Iteration  14: 2283021.842 ops/s
Iteration  15: 2282301.773 ops/s
Iteration  16: 2285196.184 ops/s
Iteration  17: 2285749.449 ops/s
Iteration  18: 2274528.652 ops/s
Iteration  19: 2281211.950 ops/s
Iteration  20: 2287692.646 ops/s
Iteration  21: 2277951.120 ops/s
Iteration  22: 2279516.474 ops/s
Iteration  23: 2280752.823 ops/s
Iteration  24: 2273023.827 ops/s
Iteration  25: 2284949.616 ops/s
Iteration  26: 2275309.476 ops/s
Iteration  27: 2275091.230 ops/s
Iteration  28: 2277007.049 ops/s
Iteration  29: 2267877.801 ops/s
Iteration  30: 2273447.206 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_makeString":
  2277275.232 ±(99.9%) 4210.549 ops/s [Average]
  (min, avg, max) = (2259210.810, 2277275.232, 2287692.646), stdev = 6302.152
  CI (99.9%): [2273064.682, 2281485.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_makeString  thrpt   30  2277275.232 ± 4210.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37811015.814 ops/s
# Warmup Iteration   2: 74306339.433 ops/s
# Warmup Iteration   3: 78588442.773 ops/s
# Warmup Iteration   4: 80997822.388 ops/s
# Warmup Iteration   5: 86359769.209 ops/s
# Warmup Iteration   6: 86223771.703 ops/s
# Warmup Iteration   7: 86226351.454 ops/s
# Warmup Iteration   8: 86241583.378 ops/s
# Warmup Iteration   9: 86288812.918 ops/s
# Warmup Iteration  10: 86094362.558 ops/s
# Warmup Iteration  11: 86369894.810 ops/s
# Warmup Iteration  12: 86305431.610 ops/s
# Warmup Iteration  13: 86290824.637 ops/s
# Warmup Iteration  14: 86009123.503 ops/s
# Warmup Iteration  15: 86492033.744 ops/s
# Warmup Iteration  16: 86129848.728 ops/s
# Warmup Iteration  17: 86428793.041 ops/s
# Warmup Iteration  18: 86126580.356 ops/s
# Warmup Iteration  19: 86168866.064 ops/s
# Warmup Iteration  20: 86277433.434 ops/s
# Warmup Iteration  21: 86161982.270 ops/s
# Warmup Iteration  22: 86223834.133 ops/s
# Warmup Iteration  23: 86122003.187 ops/s
# Warmup Iteration  24: 85826025.771 ops/s
# Warmup Iteration  25: 86337241.969 ops/s
# Warmup Iteration  26: 86141909.572 ops/s
# Warmup Iteration  27: 86364365.310 ops/s
# Warmup Iteration  28: 86253962.999 ops/s
# Warmup Iteration  29: 85924445.523 ops/s
# Warmup Iteration  30: 86191373.560 ops/s
Iteration   1: 86076790.153 ops/s
Iteration   2: 86193550.780 ops/s
Iteration   3: 85972235.226 ops/s
Iteration   4: 85663124.136 ops/s
Iteration   5: 86227353.859 ops/s
Iteration   6: 86082179.024 ops/s
Iteration   7: 85435269.115 ops/s
Iteration   8: 86275273.393 ops/s
Iteration   9: 86435805.329 ops/s
Iteration  10: 86246480.800 ops/s
Iteration  11: 85893254.644 ops/s
Iteration  12: 86304398.245 ops/s
Iteration  13: 86070961.239 ops/s
Iteration  14: 86154166.191 ops/s
Iteration  15: 86435647.144 ops/s
Iteration  16: 86410578.960 ops/s
Iteration  17: 86254194.525 ops/s
Iteration  18: 86133188.790 ops/s
Iteration  19: 86425215.052 ops/s
Iteration  20: 86268106.433 ops/s
Iteration  21: 86024925.575 ops/s
Iteration  22: 86168218.586 ops/s
Iteration  23: 85889820.445 ops/s
Iteration  24: 86621608.758 ops/s
Iteration  25: 86379831.490 ops/s
Iteration  26: 86290540.581 ops/s
Iteration  27: 85841727.610 ops/s
Iteration  28: 86099537.381 ops/s
Iteration  29: 85732722.708 ops/s
Iteration  30: 85952374.592 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max":
  86131969.359 ±(99.9%) 172358.257 ops/s [Average]
  (min, avg, max) = (85435269.115, 86131969.359, 86621608.758), stdev = 257977.745
  CI (99.9%): [85959611.102, 86304327.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_max  thrpt   30  86131969.359 ± 172358.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31174906.194 ops/s
# Warmup Iteration   2: 62148994.332 ops/s
# Warmup Iteration   3: 52409936.081 ops/s
# Warmup Iteration   4: 61268761.339 ops/s
# Warmup Iteration   5: 61859005.416 ops/s
# Warmup Iteration   6: 61967312.364 ops/s
# Warmup Iteration   7: 61802599.669 ops/s
# Warmup Iteration   8: 61780230.112 ops/s
# Warmup Iteration   9: 61890542.408 ops/s
# Warmup Iteration  10: 61557991.014 ops/s
# Warmup Iteration  11: 61787914.285 ops/s
# Warmup Iteration  12: 61922181.736 ops/s
# Warmup Iteration  13: 61948439.987 ops/s
# Warmup Iteration  14: 61875715.466 ops/s
# Warmup Iteration  15: 61921516.666 ops/s
# Warmup Iteration  16: 61832762.555 ops/s
# Warmup Iteration  17: 61696192.595 ops/s
# Warmup Iteration  18: 61530861.438 ops/s
# Warmup Iteration  19: 61906968.497 ops/s
# Warmup Iteration  20: 61833122.981 ops/s
# Warmup Iteration  21: 61817794.643 ops/s
# Warmup Iteration  22: 61790176.699 ops/s
# Warmup Iteration  23: 61857179.812 ops/s
# Warmup Iteration  24: 61802334.442 ops/s
# Warmup Iteration  25: 61905583.633 ops/s
# Warmup Iteration  26: 61355261.686 ops/s
# Warmup Iteration  27: 61814673.965 ops/s
# Warmup Iteration  28: 61922890.593 ops/s
# Warmup Iteration  29: 62020020.310 ops/s
# Warmup Iteration  30: 61707773.739 ops/s
Iteration   1: 61965857.555 ops/s
Iteration   2: 61467531.154 ops/s
Iteration   3: 61692480.287 ops/s
Iteration   4: 61658836.711 ops/s
Iteration   5: 61813485.492 ops/s
Iteration   6: 61734178.059 ops/s
Iteration   7: 61658881.354 ops/s
Iteration   8: 61911309.719 ops/s
Iteration   9: 62015213.914 ops/s
Iteration  10: 61529704.624 ops/s
Iteration  11: 61997246.467 ops/s
Iteration  12: 61528406.460 ops/s
Iteration  13: 61607813.732 ops/s
Iteration  14: 62000233.404 ops/s
Iteration  15: 61706984.699 ops/s
Iteration  16: 62043206.422 ops/s
Iteration  17: 62057069.750 ops/s
Iteration  18: 62085650.074 ops/s
Iteration  19: 61710759.329 ops/s
Iteration  20: 61521458.603 ops/s
Iteration  21: 61888644.180 ops/s
Iteration  22: 61855335.995 ops/s
Iteration  23: 61752065.943 ops/s
Iteration  24: 61661923.485 ops/s
Iteration  25: 61501152.119 ops/s
Iteration  26: 61760520.318 ops/s
Iteration  27: 62128051.757 ops/s
Iteration  28: 61705469.073 ops/s
Iteration  29: 61915268.096 ops/s
Iteration  30: 61897702.096 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_maxBy":
  61792414.696 ±(99.9%) 128769.438 ops/s [Average]
  (min, avg, max) = (61467531.154, 61792414.696, 62128051.757), stdev = 192736.047
  CI (99.9%): [61663645.258, 61921184.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_maxBy  thrpt   30  61792414.696 ± 128769.438  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6933087.710 ops/s
# Warmup Iteration   2: 16409527.350 ops/s
# Warmup Iteration   3: 16490043.741 ops/s
# Warmup Iteration   4: 13885433.425 ops/s
# Warmup Iteration   5: 16531172.920 ops/s
# Warmup Iteration   6: 16524724.909 ops/s
# Warmup Iteration   7: 16536458.027 ops/s
# Warmup Iteration   8: 16536029.601 ops/s
# Warmup Iteration   9: 16523124.537 ops/s
# Warmup Iteration  10: 16569438.431 ops/s
# Warmup Iteration  11: 16546501.267 ops/s
# Warmup Iteration  12: 16533673.347 ops/s
# Warmup Iteration  13: 16499657.699 ops/s
# Warmup Iteration  14: 16560198.500 ops/s
# Warmup Iteration  15: 16531004.731 ops/s
# Warmup Iteration  16: 16542603.021 ops/s
# Warmup Iteration  17: 16619670.507 ops/s
# Warmup Iteration  18: 16596227.146 ops/s
# Warmup Iteration  19: 16621582.808 ops/s
# Warmup Iteration  20: 16616922.971 ops/s
# Warmup Iteration  21: 16567450.286 ops/s
# Warmup Iteration  22: 16602879.947 ops/s
# Warmup Iteration  23: 16620315.356 ops/s
# Warmup Iteration  24: 16630849.408 ops/s
# Warmup Iteration  25: 16618989.884 ops/s
# Warmup Iteration  26: 16618291.393 ops/s
# Warmup Iteration  27: 16608728.510 ops/s
# Warmup Iteration  28: 16619198.725 ops/s
# Warmup Iteration  29: 16583258.213 ops/s
# Warmup Iteration  30: 16610575.128 ops/s
Iteration   1: 16648453.367 ops/s
Iteration   2: 16635490.716 ops/s
Iteration   3: 16619441.095 ops/s
Iteration   4: 16594048.425 ops/s
Iteration   5: 16630985.009 ops/s
Iteration   6: 16630143.532 ops/s
Iteration   7: 16586477.768 ops/s
Iteration   8: 16611285.714 ops/s
Iteration   9: 16629668.871 ops/s
Iteration  10: 16674282.187 ops/s
Iteration  11: 16608984.443 ops/s
Iteration  12: 16598686.895 ops/s
Iteration  13: 16566135.009 ops/s
Iteration  14: 16335575.469 ops/s
Iteration  15: 16585693.972 ops/s
Iteration  16: 16494305.872 ops/s
Iteration  17: 16605983.601 ops/s
Iteration  18: 16516285.181 ops/s
Iteration  19: 16654420.177 ops/s
Iteration  20: 16594767.143 ops/s
Iteration  21: 16554167.282 ops/s
Iteration  22: 16582480.950 ops/s
Iteration  23: 16514010.875 ops/s
Iteration  24: 16639208.173 ops/s
Iteration  25: 16642825.729 ops/s
Iteration  26: 16647700.075 ops/s
Iteration  27: 16677759.225 ops/s
Iteration  28: 16634396.297 ops/s
Iteration  29: 16590134.016 ops/s
Iteration  30: 16529518.964 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws":
  16594443.868 ±(99.9%) 45070.580 ops/s [Average]
  (min, avg, max) = (16335575.469, 16594443.868, 16677759.225), stdev = 67459.527
  CI (99.9%): [16549373.288, 16639514.448] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws  thrpt   30  16594443.868 ± 45070.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146556.694 ops/s
# Warmup Iteration   2: 156507.505 ops/s
# Warmup Iteration   3: 156105.175 ops/s
# Warmup Iteration   4: 156396.443 ops/s
# Warmup Iteration   5: 156894.740 ops/s
# Warmup Iteration   6: 156625.985 ops/s
# Warmup Iteration   7: 156676.384 ops/s
# Warmup Iteration   8: 156567.113 ops/s
# Warmup Iteration   9: 155145.954 ops/s
# Warmup Iteration  10: 157052.971 ops/s
# Warmup Iteration  11: 164772.002 ops/s
# Warmup Iteration  12: 165457.701 ops/s
# Warmup Iteration  13: 165241.279 ops/s
# Warmup Iteration  14: 164938.939 ops/s
# Warmup Iteration  15: 165070.685 ops/s
# Warmup Iteration  16: 165431.867 ops/s
# Warmup Iteration  17: 167077.457 ops/s
# Warmup Iteration  18: 166993.476 ops/s
# Warmup Iteration  19: 166843.116 ops/s
# Warmup Iteration  20: 166668.648 ops/s
# Warmup Iteration  21: 165963.444 ops/s
# Warmup Iteration  22: 165232.496 ops/s
# Warmup Iteration  23: 166801.546 ops/s
# Warmup Iteration  24: 166842.172 ops/s
# Warmup Iteration  25: 167454.755 ops/s
# Warmup Iteration  26: 167198.339 ops/s
# Warmup Iteration  27: 166738.534 ops/s
# Warmup Iteration  28: 166501.752 ops/s
# Warmup Iteration  29: 164453.998 ops/s
# Warmup Iteration  30: 166255.779 ops/s
Iteration   1: 166650.190 ops/s
Iteration   2: 166520.147 ops/s
Iteration   3: 167340.878 ops/s
Iteration   4: 167249.253 ops/s
Iteration   5: 167225.315 ops/s
Iteration   6: 166373.956 ops/s
Iteration   7: 166678.655 ops/s
Iteration   8: 166673.524 ops/s
Iteration   9: 167250.902 ops/s
Iteration  10: 166104.956 ops/s
Iteration  11: 166717.896 ops/s
Iteration  12: 166620.493 ops/s
Iteration  13: 166538.298 ops/s
Iteration  14: 166635.566 ops/s
Iteration  15: 166365.598 ops/s
Iteration  16: 166927.212 ops/s
Iteration  17: 166482.676 ops/s
Iteration  18: 167180.615 ops/s
Iteration  19: 167142.279 ops/s
Iteration  20: 166395.460 ops/s
Iteration  21: 166204.398 ops/s
Iteration  22: 165653.593 ops/s
Iteration  23: 165865.593 ops/s
Iteration  24: 166359.796 ops/s
Iteration  25: 166036.353 ops/s
Iteration  26: 165371.973 ops/s
Iteration  27: 164927.963 ops/s
Iteration  28: 165397.089 ops/s
Iteration  29: 165453.365 ops/s
Iteration  30: 165496.066 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  166394.669 ±(99.9%) 428.991 ops/s [Average]
  (min, avg, max) = (164927.963, 166394.669, 167340.878), stdev = 642.094
  CI (99.9%): [165965.677, 166823.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  166394.669 ± 428.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30041780.024 ops/s
# Warmup Iteration   2: 60723077.826 ops/s
# Warmup Iteration   3: 54318787.319 ops/s
# Warmup Iteration   4: 63736738.693 ops/s
# Warmup Iteration   5: 63875891.028 ops/s
# Warmup Iteration   6: 63720012.371 ops/s
# Warmup Iteration   7: 63714282.927 ops/s
# Warmup Iteration   8: 63792625.935 ops/s
# Warmup Iteration   9: 63643465.066 ops/s
# Warmup Iteration  10: 63644707.966 ops/s
# Warmup Iteration  11: 63656963.589 ops/s
# Warmup Iteration  12: 63657614.765 ops/s
# Warmup Iteration  13: 63710818.988 ops/s
# Warmup Iteration  14: 63848008.032 ops/s
# Warmup Iteration  15: 63781551.109 ops/s
# Warmup Iteration  16: 63742911.044 ops/s
# Warmup Iteration  17: 64248242.240 ops/s
# Warmup Iteration  18: 64086136.388 ops/s
# Warmup Iteration  19: 63692002.761 ops/s
# Warmup Iteration  20: 64037065.457 ops/s
# Warmup Iteration  21: 64103901.270 ops/s
# Warmup Iteration  22: 63981409.685 ops/s
# Warmup Iteration  23: 64185167.579 ops/s
# Warmup Iteration  24: 63892179.156 ops/s
# Warmup Iteration  25: 64002734.209 ops/s
# Warmup Iteration  26: 63967634.623 ops/s
# Warmup Iteration  27: 64048503.366 ops/s
# Warmup Iteration  28: 64179738.704 ops/s
# Warmup Iteration  29: 63981894.547 ops/s
# Warmup Iteration  30: 64074115.614 ops/s
Iteration   1: 63996395.967 ops/s
Iteration   2: 64163885.768 ops/s
Iteration   3: 63984938.662 ops/s
Iteration   4: 64628050.014 ops/s
Iteration   5: 64142587.515 ops/s
Iteration   6: 64323378.274 ops/s
Iteration   7: 64074539.680 ops/s
Iteration   8: 64106113.299 ops/s
Iteration   9: 64138486.358 ops/s
Iteration  10: 63893115.915 ops/s
Iteration  11: 64020876.761 ops/s
Iteration  12: 64046725.530 ops/s
Iteration  13: 64340703.907 ops/s
Iteration  14: 64070001.809 ops/s
Iteration  15: 64272896.711 ops/s
Iteration  16: 63983251.014 ops/s
Iteration  17: 64129149.115 ops/s
Iteration  18: 64442314.375 ops/s
Iteration  19: 64043404.672 ops/s
Iteration  20: 64444938.394 ops/s
Iteration  21: 63883803.184 ops/s
Iteration  22: 64289063.498 ops/s
Iteration  23: 64058123.326 ops/s
Iteration  24: 64190132.445 ops/s
Iteration  25: 64286434.327 ops/s
Iteration  26: 63781805.860 ops/s
Iteration  27: 63948353.175 ops/s
Iteration  28: 64125819.673 ops/s
Iteration  29: 63774509.499 ops/s
Iteration  30: 63829820.118 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_max_without_comparator":
  64113787.295 ±(99.9%) 134799.046 ops/s [Average]
  (min, avg, max) = (63774509.499, 64113787.295, 64628050.014), stdev = 201760.882
  CI (99.9%): [63978988.248, 64248586.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  64113787.295 ± 134799.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 45570687.545 ops/s
# Warmup Iteration   2: 90749485.575 ops/s
# Warmup Iteration   3: 83490147.390 ops/s
# Warmup Iteration   4: 98299257.206 ops/s
# Warmup Iteration   5: 98136641.460 ops/s
# Warmup Iteration   6: 98337840.369 ops/s
# Warmup Iteration   7: 98024824.426 ops/s
# Warmup Iteration   8: 98128660.666 ops/s
# Warmup Iteration   9: 97911022.211 ops/s
# Warmup Iteration  10: 98437671.288 ops/s
# Warmup Iteration  11: 97853468.659 ops/s
# Warmup Iteration  12: 98094150.760 ops/s
# Warmup Iteration  13: 98031013.021 ops/s
# Warmup Iteration  14: 98148332.529 ops/s
# Warmup Iteration  15: 98097263.361 ops/s
# Warmup Iteration  16: 97816294.871 ops/s
# Warmup Iteration  17: 97970024.139 ops/s
# Warmup Iteration  18: 97980158.158 ops/s
# Warmup Iteration  19: 97752138.303 ops/s
# Warmup Iteration  20: 98321964.132 ops/s
# Warmup Iteration  21: 97682082.185 ops/s
# Warmup Iteration  22: 97805742.919 ops/s
# Warmup Iteration  23: 97962099.201 ops/s
# Warmup Iteration  24: 97759601.822 ops/s
# Warmup Iteration  25: 98035534.866 ops/s
# Warmup Iteration  26: 98015320.137 ops/s
# Warmup Iteration  27: 97620610.510 ops/s
# Warmup Iteration  28: 97809014.168 ops/s
# Warmup Iteration  29: 97966248.127 ops/s
# Warmup Iteration  30: 97857514.106 ops/s
Iteration   1: 97939602.521 ops/s
Iteration   2: 97812606.312 ops/s
Iteration   3: 97987219.017 ops/s
Iteration   4: 97456151.258 ops/s
Iteration   5: 97774915.234 ops/s
Iteration   6: 98155672.676 ops/s
Iteration   7: 97984843.964 ops/s
Iteration   8: 98096439.166 ops/s
Iteration   9: 98196458.949 ops/s
Iteration  10: 96950024.475 ops/s
Iteration  11: 97750001.635 ops/s
Iteration  12: 97873005.205 ops/s
Iteration  13: 97838091.872 ops/s
Iteration  14: 98174027.530 ops/s
Iteration  15: 97698096.124 ops/s
Iteration  16: 97986319.916 ops/s
Iteration  17: 98097237.813 ops/s
Iteration  18: 97996234.245 ops/s
Iteration  19: 97899421.644 ops/s
Iteration  20: 98079757.206 ops/s
Iteration  21: 97906846.699 ops/s
Iteration  22: 97864845.679 ops/s
Iteration  23: 97429117.749 ops/s
Iteration  24: 98020699.975 ops/s
Iteration  25: 98133472.200 ops/s
Iteration  26: 97803649.363 ops/s
Iteration  27: 97661039.421 ops/s
Iteration  28: 97864951.934 ops/s
Iteration  29: 97859766.401 ops/s
Iteration  30: 98335187.538 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min":
  97887523.457 ±(99.9%) 180123.396 ops/s [Average]
  (min, avg, max) = (96950024.475, 97887523.457, 98335187.538), stdev = 269600.240
  CI (99.9%): [97707400.062, 98067646.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_min  thrpt   30  97887523.457 ± 180123.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17686544.672 ops/s
# Warmup Iteration   2: 35325395.076 ops/s
# Warmup Iteration   3: 30696743.024 ops/s
# Warmup Iteration   4: 35938630.132 ops/s
# Warmup Iteration   5: 36016530.253 ops/s
# Warmup Iteration   6: 36076327.980 ops/s
# Warmup Iteration   7: 36131924.395 ops/s
# Warmup Iteration   8: 36019209.471 ops/s
# Warmup Iteration   9: 36076087.956 ops/s
# Warmup Iteration  10: 36049081.713 ops/s
# Warmup Iteration  11: 36125274.605 ops/s
# Warmup Iteration  12: 35976920.005 ops/s
# Warmup Iteration  13: 35995618.327 ops/s
# Warmup Iteration  14: 35968659.441 ops/s
# Warmup Iteration  15: 36004783.285 ops/s
# Warmup Iteration  16: 35892282.375 ops/s
# Warmup Iteration  17: 36089367.715 ops/s
# Warmup Iteration  18: 36017807.484 ops/s
# Warmup Iteration  19: 35950257.631 ops/s
# Warmup Iteration  20: 36140732.646 ops/s
# Warmup Iteration  21: 36083513.290 ops/s
# Warmup Iteration  22: 35998985.194 ops/s
# Warmup Iteration  23: 36085950.528 ops/s
# Warmup Iteration  24: 35963409.924 ops/s
# Warmup Iteration  25: 36153589.622 ops/s
# Warmup Iteration  26: 36092135.825 ops/s
# Warmup Iteration  27: 36135532.576 ops/s
# Warmup Iteration  28: 35950147.348 ops/s
# Warmup Iteration  29: 36020390.728 ops/s
# Warmup Iteration  30: 36111628.690 ops/s
Iteration   1: 36238734.863 ops/s
Iteration   2: 36151682.244 ops/s
Iteration   3: 36057455.283 ops/s
Iteration   4: 36209170.997 ops/s
Iteration   5: 35898457.025 ops/s
Iteration   6: 36089288.920 ops/s
Iteration   7: 36104590.538 ops/s
Iteration   8: 36035704.034 ops/s
Iteration   9: 35992671.544 ops/s
Iteration  10: 36260123.155 ops/s
Iteration  11: 36160624.199 ops/s
Iteration  12: 36140953.802 ops/s
Iteration  13: 36278200.848 ops/s
Iteration  14: 36233677.910 ops/s
Iteration  15: 36226152.085 ops/s
Iteration  16: 35941539.170 ops/s
Iteration  17: 35998325.169 ops/s
Iteration  18: 36189315.578 ops/s
Iteration  19: 36157940.719 ops/s
Iteration  20: 36117400.115 ops/s
Iteration  21: 36231801.756 ops/s
Iteration  22: 36124147.441 ops/s
Iteration  23: 36050389.273 ops/s
Iteration  24: 36037626.147 ops/s
Iteration  25: 36179708.880 ops/s
Iteration  26: 36073508.498 ops/s
Iteration  27: 36104506.244 ops/s
Iteration  28: 36082550.245 ops/s
Iteration  29: 36005316.479 ops/s
Iteration  30: 35915692.271 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_minBy":
  36109575.181 ±(99.9%) 68802.352 ops/s [Average]
  (min, avg, max) = (35898457.025, 36109575.181, 36278200.848), stdev = 102980.130
  CI (99.9%): [36040772.829, 36178377.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_minBy  thrpt   30  36109575.181 ± 68802.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6885070.127 ops/s
# Warmup Iteration   2: 16375142.408 ops/s
# Warmup Iteration   3: 16717778.859 ops/s
# Warmup Iteration   4: 14014811.454 ops/s
# Warmup Iteration   5: 16719632.418 ops/s
# Warmup Iteration   6: 16714980.681 ops/s
# Warmup Iteration   7: 16715465.741 ops/s
# Warmup Iteration   8: 16730202.670 ops/s
# Warmup Iteration   9: 16698794.321 ops/s
# Warmup Iteration  10: 16705957.328 ops/s
# Warmup Iteration  11: 16709619.632 ops/s
# Warmup Iteration  12: 16735870.423 ops/s
# Warmup Iteration  13: 16683578.676 ops/s
# Warmup Iteration  14: 16722407.682 ops/s
# Warmup Iteration  15: 16754444.957 ops/s
# Warmup Iteration  16: 16720558.114 ops/s
# Warmup Iteration  17: 16759639.995 ops/s
# Warmup Iteration  18: 16743361.729 ops/s
# Warmup Iteration  19: 16789939.392 ops/s
# Warmup Iteration  20: 16783537.110 ops/s
# Warmup Iteration  21: 16779853.221 ops/s
# Warmup Iteration  22: 16775164.419 ops/s
# Warmup Iteration  23: 16800564.682 ops/s
# Warmup Iteration  24: 16794462.962 ops/s
# Warmup Iteration  25: 16736884.716 ops/s
# Warmup Iteration  26: 16784642.613 ops/s
# Warmup Iteration  27: 16761029.547 ops/s
# Warmup Iteration  28: 16743080.380 ops/s
# Warmup Iteration  29: 16797113.382 ops/s
# Warmup Iteration  30: 16767181.806 ops/s
Iteration   1: 16795049.690 ops/s
Iteration   2: 16763444.068 ops/s
Iteration   3: 16800138.284 ops/s
Iteration   4: 16783711.538 ops/s
Iteration   5: 16776566.430 ops/s
Iteration   6: 16782248.401 ops/s
Iteration   7: 16778565.288 ops/s
Iteration   8: 16774226.756 ops/s
Iteration   9: 16693833.475 ops/s
Iteration  10: 16720529.959 ops/s
Iteration  11: 16734297.978 ops/s
Iteration  12: 16803765.078 ops/s
Iteration  13: 16737053.335 ops/s
Iteration  14: 16783053.116 ops/s
Iteration  15: 16770865.757 ops/s
Iteration  16: 16815890.819 ops/s
Iteration  17: 16770375.557 ops/s
Iteration  18: 16756673.644 ops/s
Iteration  19: 16779656.174 ops/s
Iteration  20: 16717529.291 ops/s
Iteration  21: 16641852.388 ops/s
Iteration  22: 16795052.879 ops/s
Iteration  23: 16720403.104 ops/s
Iteration  24: 16790888.554 ops/s
Iteration  25: 16814266.750 ops/s
Iteration  26: 16808353.627 ops/s
Iteration  27: 16729715.052 ops/s
Iteration  28: 16754139.382 ops/s
Iteration  29: 16714200.284 ops/s
Iteration  30: 16794082.444 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws":
  16763347.637 ±(99.9%) 26815.882 ops/s [Average]
  (min, avg, max) = (16641852.388, 16763347.637, 16815890.819), stdev = 40136.754
  CI (99.9%): [16736531.754, 16790163.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws  thrpt   30  16763347.637 ± 26815.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 146484.929 ops/s
# Warmup Iteration   2: 156261.758 ops/s
# Warmup Iteration   3: 155728.930 ops/s
# Warmup Iteration   4: 156299.086 ops/s
# Warmup Iteration   5: 157097.240 ops/s
# Warmup Iteration   6: 157080.352 ops/s
# Warmup Iteration   7: 157020.260 ops/s
# Warmup Iteration   8: 156946.611 ops/s
# Warmup Iteration   9: 156366.768 ops/s
# Warmup Iteration  10: 156705.656 ops/s
# Warmup Iteration  11: 165147.977 ops/s
# Warmup Iteration  12: 165568.292 ops/s
# Warmup Iteration  13: 165614.265 ops/s
# Warmup Iteration  14: 165421.005 ops/s
# Warmup Iteration  15: 165877.878 ops/s
# Warmup Iteration  16: 165249.244 ops/s
# Warmup Iteration  17: 167504.328 ops/s
# Warmup Iteration  18: 167434.241 ops/s
# Warmup Iteration  19: 167075.938 ops/s
# Warmup Iteration  20: 166887.454 ops/s
# Warmup Iteration  21: 167495.713 ops/s
# Warmup Iteration  22: 167401.024 ops/s
# Warmup Iteration  23: 167219.337 ops/s
# Warmup Iteration  24: 167102.172 ops/s
# Warmup Iteration  25: 166749.587 ops/s
# Warmup Iteration  26: 166653.738 ops/s
# Warmup Iteration  27: 167537.193 ops/s
# Warmup Iteration  28: 167810.848 ops/s
# Warmup Iteration  29: 165558.247 ops/s
# Warmup Iteration  30: 166580.092 ops/s
Iteration   1: 164944.965 ops/s
Iteration   2: 167036.818 ops/s
Iteration   3: 167954.995 ops/s
Iteration   4: 167178.281 ops/s
Iteration   5: 167564.368 ops/s
Iteration   6: 167541.322 ops/s
Iteration   7: 166961.939 ops/s
Iteration   8: 167520.815 ops/s
Iteration   9: 167423.675 ops/s
Iteration  10: 167925.208 ops/s
Iteration  11: 166889.124 ops/s
Iteration  12: 167180.176 ops/s
Iteration  13: 167140.784 ops/s
Iteration  14: 168391.067 ops/s
Iteration  15: 167469.091 ops/s
Iteration  16: 166326.359 ops/s
Iteration  17: 167700.855 ops/s
Iteration  18: 167360.319 ops/s
Iteration  19: 167994.177 ops/s
Iteration  20: 168027.021 ops/s
Iteration  21: 168060.695 ops/s
Iteration  22: 167234.881 ops/s
Iteration  23: 166753.811 ops/s
Iteration  24: 166949.787 ops/s
Iteration  25: 167528.739 ops/s
Iteration  26: 166837.892 ops/s
Iteration  27: 166655.634 ops/s
Iteration  28: 167156.097 ops/s
Iteration  29: 167642.785 ops/s
Iteration  30: 167914.374 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  167308.868 ±(99.9%) 438.728 ops/s [Average]
  (min, avg, max) = (164944.965, 167308.868, 168391.067), stdev = 656.668
  CI (99.9%): [166870.140, 167747.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score     Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  167308.868 ± 438.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47065131.241 ops/s
# Warmup Iteration   2: 88180217.917 ops/s
# Warmup Iteration   3: 75903340.723 ops/s
# Warmup Iteration   4: 99367743.310 ops/s
# Warmup Iteration   5: 99263743.536 ops/s
# Warmup Iteration   6: 99211937.496 ops/s
# Warmup Iteration   7: 99263589.141 ops/s
# Warmup Iteration   8: 98900241.415 ops/s
# Warmup Iteration   9: 98992844.360 ops/s
# Warmup Iteration  10: 98958920.734 ops/s
# Warmup Iteration  11: 99158491.568 ops/s
# Warmup Iteration  12: 98608828.361 ops/s
# Warmup Iteration  13: 98888458.092 ops/s
# Warmup Iteration  14: 99383750.247 ops/s
# Warmup Iteration  15: 98830384.872 ops/s
# Warmup Iteration  16: 98872526.772 ops/s
# Warmup Iteration  17: 99164237.380 ops/s
# Warmup Iteration  18: 98972705.465 ops/s
# Warmup Iteration  19: 99034410.730 ops/s
# Warmup Iteration  20: 99371299.210 ops/s
# Warmup Iteration  21: 99170184.439 ops/s
# Warmup Iteration  22: 99163771.294 ops/s
# Warmup Iteration  23: 99230724.305 ops/s
# Warmup Iteration  24: 98762338.781 ops/s
# Warmup Iteration  25: 99305740.195 ops/s
# Warmup Iteration  26: 99146333.816 ops/s
# Warmup Iteration  27: 98944110.529 ops/s
# Warmup Iteration  28: 99145011.558 ops/s
# Warmup Iteration  29: 99038847.540 ops/s
# Warmup Iteration  30: 99080661.718 ops/s
Iteration   1: 99113920.072 ops/s
Iteration   2: 98775206.547 ops/s
Iteration   3: 99346968.453 ops/s
Iteration   4: 99358385.595 ops/s
Iteration   5: 99005626.637 ops/s
Iteration   6: 98971442.248 ops/s
Iteration   7: 99082220.779 ops/s
Iteration   8: 98699665.593 ops/s
Iteration   9: 99130819.787 ops/s
Iteration  10: 99091088.263 ops/s
Iteration  11: 98924227.232 ops/s
Iteration  12: 99525466.070 ops/s
Iteration  13: 99093700.934 ops/s
Iteration  14: 99313628.807 ops/s
Iteration  15: 99611828.510 ops/s
Iteration  16: 97689634.120 ops/s
Iteration  17: 99514540.745 ops/s
Iteration  18: 98815020.510 ops/s
Iteration  19: 98868881.886 ops/s
Iteration  20: 99155852.840 ops/s
Iteration  21: 99233339.617 ops/s
Iteration  22: 99294025.262 ops/s
Iteration  23: 99371095.019 ops/s
Iteration  24: 99175454.190 ops/s
Iteration  25: 99581192.656 ops/s
Iteration  26: 98966682.940 ops/s
Iteration  27: 99266534.706 ops/s
Iteration  28: 99275632.790 ops/s
Iteration  29: 99233259.981 ops/s
Iteration  30: 99290512.601 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_min_without_comparator":
  99125861.846 ±(99.9%) 239136.742 ops/s [Average]
  (min, avg, max) = (97689634.120, 99125861.846, 99611828.510), stdev = 357928.645
  CI (99.9%): [98886725.104, 99364998.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  99125861.846 ± 239136.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20945750.429 ops/s
# Warmup Iteration   2: 42532593.858 ops/s
# Warmup Iteration   3: 35119888.165 ops/s
# Warmup Iteration   4: 41229656.478 ops/s
# Warmup Iteration   5: 41149664.436 ops/s
# Warmup Iteration   6: 41260625.753 ops/s
# Warmup Iteration   7: 41071610.907 ops/s
# Warmup Iteration   8: 41279532.753 ops/s
# Warmup Iteration   9: 41264110.273 ops/s
# Warmup Iteration  10: 41292803.733 ops/s
# Warmup Iteration  11: 41294171.755 ops/s
# Warmup Iteration  12: 41050113.685 ops/s
# Warmup Iteration  13: 41224254.087 ops/s
# Warmup Iteration  14: 41201313.444 ops/s
# Warmup Iteration  15: 41226605.162 ops/s
# Warmup Iteration  16: 41086221.014 ops/s
# Warmup Iteration  17: 41117866.270 ops/s
# Warmup Iteration  18: 41291850.110 ops/s
# Warmup Iteration  19: 41284376.638 ops/s
# Warmup Iteration  20: 41134831.997 ops/s
# Warmup Iteration  21: 41198122.684 ops/s
# Warmup Iteration  22: 41345635.554 ops/s
# Warmup Iteration  23: 41359467.534 ops/s
# Warmup Iteration  24: 41297820.965 ops/s
# Warmup Iteration  25: 41195404.761 ops/s
# Warmup Iteration  26: 41324298.770 ops/s
# Warmup Iteration  27: 41308291.966 ops/s
# Warmup Iteration  28: 41308661.976 ops/s
# Warmup Iteration  29: 41272559.427 ops/s
# Warmup Iteration  30: 41060681.979 ops/s
Iteration   1: 41386448.283 ops/s
Iteration   2: 41226238.695 ops/s
Iteration   3: 41298706.857 ops/s
Iteration   4: 41267285.302 ops/s
Iteration   5: 41418795.126 ops/s
Iteration   6: 41319389.602 ops/s
Iteration   7: 41190124.220 ops/s
Iteration   8: 41230631.896 ops/s
Iteration   9: 41339241.129 ops/s
Iteration  10: 41225868.284 ops/s
Iteration  11: 41306007.082 ops/s
Iteration  12: 41378190.036 ops/s
Iteration  13: 41268257.344 ops/s
Iteration  14: 41310750.507 ops/s
Iteration  15: 41086571.848 ops/s
Iteration  16: 41236779.364 ops/s
Iteration  17: 41243954.772 ops/s
Iteration  18: 41353769.097 ops/s
Iteration  19: 41039670.617 ops/s
Iteration  20: 41240121.888 ops/s
Iteration  21: 41331906.001 ops/s
Iteration  22: 41350442.754 ops/s
Iteration  23: 41067470.045 ops/s
Iteration  24: 41288345.246 ops/s
Iteration  25: 41333697.379 ops/s
Iteration  26: 41220357.159 ops/s
Iteration  27: 41186722.547 ops/s
Iteration  28: 41306151.640 ops/s
Iteration  29: 41182927.899 ops/s
Iteration  30: 41061961.117 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfy":
  41256559.458 ±(99.9%) 65470.488 ops/s [Average]
  (min, avg, max) = (41039670.617, 41256559.458, 41418795.126), stdev = 97993.152
  CI (99.9%): [41191088.969, 41322029.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  41256559.458 ± 65470.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12830820.154 ops/s
# Warmup Iteration   2: 26141365.574 ops/s
# Warmup Iteration   3: 22408885.722 ops/s
# Warmup Iteration   4: 26756187.319 ops/s
# Warmup Iteration   5: 26726751.283 ops/s
# Warmup Iteration   6: 26777825.268 ops/s
# Warmup Iteration   7: 26763015.613 ops/s
# Warmup Iteration   8: 26618427.895 ops/s
# Warmup Iteration   9: 26699885.547 ops/s
# Warmup Iteration  10: 26751394.294 ops/s
# Warmup Iteration  11: 26771917.969 ops/s
# Warmup Iteration  12: 26778165.901 ops/s
# Warmup Iteration  13: 26748355.528 ops/s
# Warmup Iteration  14: 26706859.469 ops/s
# Warmup Iteration  15: 26706834.824 ops/s
# Warmup Iteration  16: 26733327.486 ops/s
# Warmup Iteration  17: 26734002.472 ops/s
# Warmup Iteration  18: 26733303.753 ops/s
# Warmup Iteration  19: 26687549.302 ops/s
# Warmup Iteration  20: 26708244.505 ops/s
# Warmup Iteration  21: 26780977.461 ops/s
# Warmup Iteration  22: 26534406.847 ops/s
# Warmup Iteration  23: 26709527.838 ops/s
# Warmup Iteration  24: 26791527.406 ops/s
# Warmup Iteration  25: 26690263.142 ops/s
# Warmup Iteration  26: 26786834.819 ops/s
# Warmup Iteration  27: 26722474.464 ops/s
# Warmup Iteration  28: 26753730.923 ops/s
# Warmup Iteration  29: 26698931.552 ops/s
# Warmup Iteration  30: 26753612.191 ops/s
Iteration   1: 26791352.692 ops/s
Iteration   2: 26705301.788 ops/s
Iteration   3: 26706051.957 ops/s
Iteration   4: 26772554.320 ops/s
Iteration   5: 26695342.240 ops/s
Iteration   6: 26728466.920 ops/s
Iteration   7: 26674233.365 ops/s
Iteration   8: 26687040.776 ops/s
Iteration   9: 26742349.591 ops/s
Iteration  10: 26763041.829 ops/s
Iteration  11: 26720235.394 ops/s
Iteration  12: 26694945.057 ops/s
Iteration  13: 26793248.811 ops/s
Iteration  14: 26760181.997 ops/s
Iteration  15: 26795349.023 ops/s
Iteration  16: 26804013.744 ops/s
Iteration  17: 26697857.448 ops/s
Iteration  18: 26726506.731 ops/s
Iteration  19: 26674182.510 ops/s
Iteration  20: 26707681.353 ops/s
Iteration  21: 26679204.591 ops/s
Iteration  22: 26819580.440 ops/s
Iteration  23: 26719002.129 ops/s
Iteration  24: 26778451.018 ops/s
Iteration  25: 26758396.698 ops/s
Iteration  26: 26723509.508 ops/s
Iteration  27: 26669311.751 ops/s
Iteration  28: 26825504.038 ops/s
Iteration  29: 26759469.552 ops/s
Iteration  30: 26707820.946 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfyWith":
  26736006.274 ±(99.9%) 30844.391 ops/s [Average]
  (min, avg, max) = (26669311.751, 26736006.274, 26825504.038), stdev = 46166.436
  CI (99.9%): [26705161.883, 26766850.665] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  26736006.274 ± 30844.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26421.091 ops/s
# Warmup Iteration   2: 33070.211 ops/s
# Warmup Iteration   3: 33169.433 ops/s
# Warmup Iteration   4: 31998.772 ops/s
# Warmup Iteration   5: 32897.776 ops/s
# Warmup Iteration   6: 32156.211 ops/s
# Warmup Iteration   7: 38097.458 ops/s
# Warmup Iteration   8: 41819.290 ops/s
# Warmup Iteration   9: 43353.573 ops/s
# Warmup Iteration  10: 42866.245 ops/s
# Warmup Iteration  11: 41406.233 ops/s
# Warmup Iteration  12: 41851.096 ops/s
# Warmup Iteration  13: 43452.165 ops/s
# Warmup Iteration  14: 43408.091 ops/s
# Warmup Iteration  15: 44217.913 ops/s
# Warmup Iteration  16: 43053.106 ops/s
# Warmup Iteration  17: 41482.459 ops/s
# Warmup Iteration  18: 40956.042 ops/s
# Warmup Iteration  19: 43377.174 ops/s
# Warmup Iteration  20: 41926.018 ops/s
# Warmup Iteration  21: 44020.518 ops/s
# Warmup Iteration  22: 43617.380 ops/s
# Warmup Iteration  23: 42630.746 ops/s
# Warmup Iteration  24: 42623.611 ops/s
# Warmup Iteration  25: 41677.068 ops/s
# Warmup Iteration  26: 43406.350 ops/s
# Warmup Iteration  27: 42715.052 ops/s
# Warmup Iteration  28: 42596.844 ops/s
# Warmup Iteration  29: 43327.363 ops/s
# Warmup Iteration  30: 42643.098 ops/s
Iteration   1: 42849.775 ops/s
Iteration   2: 42490.658 ops/s
Iteration   3: 41571.160 ops/s
Iteration   4: 41392.625 ops/s
Iteration   5: 40968.277 ops/s
Iteration   6: 43391.169 ops/s
Iteration   7: 43386.413 ops/s
Iteration   8: 43578.338 ops/s
Iteration   9: 40366.381 ops/s
Iteration  10: 44623.620 ops/s
Iteration  11: 42968.365 ops/s
Iteration  12: 35995.055 ops/s
Iteration  13: 33982.569 ops/s
Iteration  14: 33406.649 ops/s
Iteration  15: 33234.889 ops/s
Iteration  16: 37825.776 ops/s
Iteration  17: 42836.659 ops/s
Iteration  18: 41099.355 ops/s
Iteration  19: 42785.492 ops/s
Iteration  20: 42885.013 ops/s
Iteration  21: 42741.382 ops/s
Iteration  22: 44254.305 ops/s
Iteration  23: 42195.122 ops/s
Iteration  24: 41539.412 ops/s
Iteration  25: 43335.498 ops/s
Iteration  26: 43724.329 ops/s
Iteration  27: 42079.379 ops/s
Iteration  28: 41626.955 ops/s
Iteration  29: 40570.584 ops/s
Iteration  30: 43116.088 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_parallelStream":
  41227.376 ±(99.9%) 2101.546 ops/s [Average]
  (min, avg, max) = (33234.889, 41227.376, 44623.620), stdev = 3145.495
  CI (99.9%): [39125.830, 43328.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_parallelStream  thrpt   30  41227.376 ± 2101.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2330167.296 ops/s
# Warmup Iteration   2: 4963834.367 ops/s
# Warmup Iteration   3: 5097330.981 ops/s
# Warmup Iteration   4: 5119295.292 ops/s
# Warmup Iteration   5: 4326335.635 ops/s
# Warmup Iteration   6: 5099089.081 ops/s
# Warmup Iteration   7: 5141788.804 ops/s
# Warmup Iteration   8: 5137826.403 ops/s
# Warmup Iteration   9: 5097318.093 ops/s
# Warmup Iteration  10: 5131045.277 ops/s
# Warmup Iteration  11: 5124626.711 ops/s
# Warmup Iteration  12: 5130449.135 ops/s
# Warmup Iteration  13: 5137992.440 ops/s
# Warmup Iteration  14: 5135781.570 ops/s
# Warmup Iteration  15: 5119339.523 ops/s
# Warmup Iteration  16: 5136560.766 ops/s
# Warmup Iteration  17: 5120228.512 ops/s
# Warmup Iteration  18: 5097802.664 ops/s
# Warmup Iteration  19: 5125385.674 ops/s
# Warmup Iteration  20: 5132005.599 ops/s
# Warmup Iteration  21: 5127491.425 ops/s
# Warmup Iteration  22: 5125091.068 ops/s
# Warmup Iteration  23: 5105719.021 ops/s
# Warmup Iteration  24: 5123965.873 ops/s
# Warmup Iteration  25: 5119379.810 ops/s
# Warmup Iteration  26: 5132847.241 ops/s
# Warmup Iteration  27: 5125805.163 ops/s
# Warmup Iteration  28: 5125811.348 ops/s
# Warmup Iteration  29: 5133172.243 ops/s
# Warmup Iteration  30: 5125136.499 ops/s
Iteration   1: 5128451.156 ops/s
Iteration   2: 5123264.801 ops/s
Iteration   3: 5107553.256 ops/s
Iteration   4: 5122619.705 ops/s
Iteration   5: 5131770.867 ops/s
Iteration   6: 5118739.536 ops/s
Iteration   7: 5131760.364 ops/s
Iteration   8: 5128382.668 ops/s
Iteration   9: 5135128.631 ops/s
Iteration  10: 5126755.295 ops/s
Iteration  11: 5127692.895 ops/s
Iteration  12: 5086862.552 ops/s
Iteration  13: 5140175.205 ops/s
Iteration  14: 5125560.396 ops/s
Iteration  15: 5132254.085 ops/s
Iteration  16: 5134183.775 ops/s
Iteration  17: 5119967.347 ops/s
Iteration  18: 5127250.111 ops/s
Iteration  19: 5129082.330 ops/s
Iteration  20: 5110421.948 ops/s
Iteration  21: 5110723.352 ops/s
Iteration  22: 5117727.823 ops/s
Iteration  23: 5112028.184 ops/s
Iteration  24: 5110947.730 ops/s
Iteration  25: 5113929.951 ops/s
Iteration  26: 5122628.701 ops/s
Iteration  27: 5121033.057 ops/s
Iteration  28: 5108303.890 ops/s
Iteration  29: 5097996.566 ops/s
Iteration  30: 5129358.028 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partition":
  5121085.140 ±(99.9%) 7841.866 ops/s [Average]
  (min, avg, max) = (5086862.552, 5121085.140, 5140175.205), stdev = 11737.337
  CI (99.9%): [5113243.274, 5128927.006] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_partition  thrpt   30  5121085.140 ± 7841.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3329227.792 ops/s
# Warmup Iteration   2: 7776818.087 ops/s
# Warmup Iteration   3: 7581099.587 ops/s
# Warmup Iteration   4: 6779671.372 ops/s
# Warmup Iteration   5: 7836418.068 ops/s
# Warmup Iteration   6: 7836663.074 ops/s
# Warmup Iteration   7: 7800601.466 ops/s
# Warmup Iteration   8: 7830927.404 ops/s
# Warmup Iteration   9: 7831767.536 ops/s
# Warmup Iteration  10: 7836364.927 ops/s
# Warmup Iteration  11: 7824226.986 ops/s
# Warmup Iteration  12: 7811881.651 ops/s
# Warmup Iteration  13: 7822886.498 ops/s
# Warmup Iteration  14: 7815805.698 ops/s
# Warmup Iteration  15: 7843073.269 ops/s
# Warmup Iteration  16: 7839707.194 ops/s
# Warmup Iteration  17: 7856934.303 ops/s
# Warmup Iteration  18: 7850171.774 ops/s
# Warmup Iteration  19: 7832390.596 ops/s
# Warmup Iteration  20: 7829736.610 ops/s
# Warmup Iteration  21: 7818107.828 ops/s
# Warmup Iteration  22: 7825963.507 ops/s
# Warmup Iteration  23: 7849776.321 ops/s
# Warmup Iteration  24: 7814818.622 ops/s
# Warmup Iteration  25: 7825021.359 ops/s
# Warmup Iteration  26: 7817783.530 ops/s
# Warmup Iteration  27: 7822505.007 ops/s
# Warmup Iteration  28: 7844081.900 ops/s
# Warmup Iteration  29: 7840446.172 ops/s
# Warmup Iteration  30: 7835864.456 ops/s
Iteration   1: 7864783.367 ops/s
Iteration   2: 7832405.377 ops/s
Iteration   3: 7856953.099 ops/s
Iteration   4: 7845474.375 ops/s
Iteration   5: 7845417.232 ops/s
Iteration   6: 7843669.923 ops/s
Iteration   7: 7836055.855 ops/s
Iteration   8: 7852585.180 ops/s
Iteration   9: 7840424.000 ops/s
Iteration  10: 7836085.608 ops/s
Iteration  11: 7836642.716 ops/s
Iteration  12: 7857370.447 ops/s
Iteration  13: 7842597.061 ops/s
Iteration  14: 7840509.205 ops/s
Iteration  15: 7851664.955 ops/s
Iteration  16: 7842777.854 ops/s
Iteration  17: 7842779.796 ops/s
Iteration  18: 7801010.063 ops/s
Iteration  19: 7770845.730 ops/s
Iteration  20: 7832936.070 ops/s
Iteration  21: 7845813.026 ops/s
Iteration  22: 7847827.491 ops/s
Iteration  23: 7827164.897 ops/s
Iteration  24: 7818489.208 ops/s
Iteration  25: 7854691.189 ops/s
Iteration  26: 7839823.111 ops/s
Iteration  27: 7838480.515 ops/s
Iteration  28: 7847021.202 ops/s
Iteration  29: 7848614.323 ops/s
Iteration  30: 7836439.260 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWhile":
  7839245.071 ±(99.9%) 11838.504 ops/s [Average]
  (min, avg, max) = (7770845.730, 7839245.071, 7864783.367), stdev = 17719.317
  CI (99.9%): [7827406.567, 7851083.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_partitionWhile  thrpt   30  7839245.071 ± 11838.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1833144.244 ops/s
# Warmup Iteration   2: 4075153.208 ops/s
# Warmup Iteration   3: 4215463.838 ops/s
# Warmup Iteration   4: 3850403.718 ops/s
# Warmup Iteration   5: 3887075.982 ops/s
# Warmup Iteration   6: 4210409.642 ops/s
# Warmup Iteration   7: 4215266.640 ops/s
# Warmup Iteration   8: 4201106.922 ops/s
# Warmup Iteration   9: 4223142.934 ops/s
# Warmup Iteration  10: 4217255.674 ops/s
# Warmup Iteration  11: 4218179.578 ops/s
# Warmup Iteration  12: 4217052.599 ops/s
# Warmup Iteration  13: 4202620.070 ops/s
# Warmup Iteration  14: 4219186.054 ops/s
# Warmup Iteration  15: 4209300.514 ops/s
# Warmup Iteration  16: 4211793.911 ops/s
# Warmup Iteration  17: 4214276.604 ops/s
# Warmup Iteration  18: 4207351.756 ops/s
# Warmup Iteration  19: 4219331.508 ops/s
# Warmup Iteration  20: 4213769.130 ops/s
# Warmup Iteration  21: 4217416.690 ops/s
# Warmup Iteration  22: 4218857.444 ops/s
# Warmup Iteration  23: 4212528.973 ops/s
# Warmup Iteration  24: 4201206.472 ops/s
# Warmup Iteration  25: 4220534.165 ops/s
# Warmup Iteration  26: 4212314.662 ops/s
# Warmup Iteration  27: 4209592.683 ops/s
# Warmup Iteration  28: 4216415.444 ops/s
# Warmup Iteration  29: 4219350.747 ops/s
# Warmup Iteration  30: 4220825.621 ops/s
Iteration   1: 4218785.841 ops/s
Iteration   2: 4222942.652 ops/s
Iteration   3: 4223527.348 ops/s
Iteration   4: 4195639.538 ops/s
Iteration   5: 4205985.393 ops/s
Iteration   6: 4205474.629 ops/s
Iteration   7: 4206017.820 ops/s
Iteration   8: 4205659.845 ops/s
Iteration   9: 4221791.630 ops/s
Iteration  10: 4217834.461 ops/s
Iteration  11: 4211212.263 ops/s
Iteration  12: 4224517.580 ops/s
Iteration  13: 4210649.557 ops/s
Iteration  14: 4217900.514 ops/s
Iteration  15: 4215779.703 ops/s
Iteration  16: 4217114.063 ops/s
Iteration  17: 4203028.272 ops/s
Iteration  18: 4220488.314 ops/s
Iteration  19: 4223736.923 ops/s
Iteration  20: 4222176.479 ops/s
Iteration  21: 4213401.364 ops/s
Iteration  22: 4218133.020 ops/s
Iteration  23: 4224774.978 ops/s
Iteration  24: 4219493.499 ops/s
Iteration  25: 4224650.674 ops/s
Iteration  26: 4216706.316 ops/s
Iteration  27: 4199892.891 ops/s
Iteration  28: 4220444.669 ops/s
Iteration  29: 4208086.155 ops/s
Iteration  30: 4216719.396 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_partitionWith":
  4215085.526 ±(99.9%) 5393.967 ops/s [Average]
  (min, avg, max) = (4195639.538, 4215085.526, 4224774.978), stdev = 8073.436
  CI (99.9%): [4209691.560, 4220479.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_partitionWith  thrpt   30  4215085.526 ± 5393.967  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4298319.019 ops/s
# Warmup Iteration   2: 10278823.810 ops/s
# Warmup Iteration   3: 10327265.916 ops/s
# Warmup Iteration   4: 8679925.093 ops/s
# Warmup Iteration   5: 10381121.033 ops/s
# Warmup Iteration   6: 10372754.107 ops/s
# Warmup Iteration   7: 10341913.698 ops/s
# Warmup Iteration   8: 10371929.903 ops/s
# Warmup Iteration   9: 10353778.632 ops/s
# Warmup Iteration  10: 10367376.961 ops/s
# Warmup Iteration  11: 10355810.505 ops/s
# Warmup Iteration  12: 10370691.128 ops/s
# Warmup Iteration  13: 10390721.290 ops/s
# Warmup Iteration  14: 10357482.186 ops/s
# Warmup Iteration  15: 10360408.013 ops/s
# Warmup Iteration  16: 10349101.860 ops/s
# Warmup Iteration  17: 10341122.241 ops/s
# Warmup Iteration  18: 10356809.138 ops/s
# Warmup Iteration  19: 10358583.821 ops/s
# Warmup Iteration  20: 10343967.938 ops/s
# Warmup Iteration  21: 10364493.300 ops/s
# Warmup Iteration  22: 10368474.655 ops/s
# Warmup Iteration  23: 10367657.198 ops/s
# Warmup Iteration  24: 10358115.886 ops/s
# Warmup Iteration  25: 10337260.887 ops/s
# Warmup Iteration  26: 10363291.653 ops/s
# Warmup Iteration  27: 10359864.023 ops/s
# Warmup Iteration  28: 10294992.214 ops/s
# Warmup Iteration  29: 10335362.428 ops/s
# Warmup Iteration  30: 10360065.839 ops/s
Iteration   1: 10360912.377 ops/s
Iteration   2: 10322915.646 ops/s
Iteration   3: 10344298.722 ops/s
Iteration   4: 10347662.334 ops/s
Iteration   5: 10354595.199 ops/s
Iteration   6: 10362337.608 ops/s
Iteration   7: 10359731.790 ops/s
Iteration   8: 10379397.640 ops/s
Iteration   9: 10385815.045 ops/s
Iteration  10: 10390323.310 ops/s
Iteration  11: 10397966.100 ops/s
Iteration  12: 10368339.027 ops/s
Iteration  13: 10392863.789 ops/s
Iteration  14: 10379011.994 ops/s
Iteration  15: 10375698.312 ops/s
Iteration  16: 10377048.310 ops/s
Iteration  17: 10386894.307 ops/s
Iteration  18: 10388688.696 ops/s
Iteration  19: 10357561.727 ops/s
Iteration  20: 10357031.128 ops/s
Iteration  21: 10315073.012 ops/s
Iteration  22: 10394291.395 ops/s
Iteration  23: 10395359.664 ops/s
Iteration  24: 10386860.435 ops/s
Iteration  25: 10334148.359 ops/s
Iteration  26: 10381048.767 ops/s
Iteration  27: 10298451.781 ops/s
Iteration  28: 10261475.515 ops/s
Iteration  29: 10346614.017 ops/s
Iteration  30: 10373691.948 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject":
  10362536.932 ±(99.9%) 21043.165 ops/s [Average]
  (min, avg, max) = (10261475.515, 10362536.932, 10397966.100), stdev = 31496.422
  CI (99.9%): [10341493.766, 10383580.097] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_reject  thrpt   30  10362536.932 ± 21043.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4911055.606 ops/s
# Warmup Iteration   2: 11605710.232 ops/s
# Warmup Iteration   3: 9911915.203 ops/s
# Warmup Iteration   4: 11747032.457 ops/s
# Warmup Iteration   5: 11757995.842 ops/s
# Warmup Iteration   6: 11743526.238 ops/s
# Warmup Iteration   7: 11758180.238 ops/s
# Warmup Iteration   8: 11733642.489 ops/s
# Warmup Iteration   9: 11723654.790 ops/s
# Warmup Iteration  10: 11748903.383 ops/s
# Warmup Iteration  11: 11752077.702 ops/s
# Warmup Iteration  12: 11721853.491 ops/s
# Warmup Iteration  13: 11716602.307 ops/s
# Warmup Iteration  14: 11743350.471 ops/s
# Warmup Iteration  15: 11749893.261 ops/s
# Warmup Iteration  16: 11754185.881 ops/s
# Warmup Iteration  17: 11779360.603 ops/s
# Warmup Iteration  18: 11741906.654 ops/s
# Warmup Iteration  19: 11744727.266 ops/s
# Warmup Iteration  20: 11755377.804 ops/s
# Warmup Iteration  21: 11728703.476 ops/s
# Warmup Iteration  22: 11753464.389 ops/s
# Warmup Iteration  23: 11757229.439 ops/s
# Warmup Iteration  24: 11744956.035 ops/s
# Warmup Iteration  25: 11681061.370 ops/s
# Warmup Iteration  26: 11732406.560 ops/s
# Warmup Iteration  27: 11754354.325 ops/s
# Warmup Iteration  28: 11728788.449 ops/s
# Warmup Iteration  29: 11676375.715 ops/s
# Warmup Iteration  30: 11749193.357 ops/s
Iteration   1: 11740042.304 ops/s
Iteration   2: 11753924.740 ops/s
Iteration   3: 11717267.891 ops/s
Iteration   4: 11749570.965 ops/s
Iteration   5: 11767599.967 ops/s
Iteration   6: 11785669.122 ops/s
Iteration   7: 11735428.243 ops/s
Iteration   8: 11756327.638 ops/s
Iteration   9: 11763529.563 ops/s
Iteration  10: 11704118.373 ops/s
Iteration  11: 11674185.599 ops/s
Iteration  12: 11796399.425 ops/s
Iteration  13: 11760009.960 ops/s
Iteration  14: 11792933.496 ops/s
Iteration  15: 11771494.865 ops/s
Iteration  16: 11764681.134 ops/s
Iteration  17: 11763506.946 ops/s
Iteration  18: 11723273.548 ops/s
Iteration  19: 11708306.798 ops/s
Iteration  20: 11701053.654 ops/s
Iteration  21: 11765189.086 ops/s
Iteration  22: 11746583.270 ops/s
Iteration  23: 11712445.174 ops/s
Iteration  24: 11757527.753 ops/s
Iteration  25: 11770578.172 ops/s
Iteration  26: 11760874.688 ops/s
Iteration  27: 11748582.758 ops/s
Iteration  28: 11761105.788 ops/s
Iteration  29: 11761885.299 ops/s
Iteration  30: 11717700.556 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith":
  11747726.559 ±(99.9%) 19326.855 ops/s [Average]
  (min, avg, max) = (11674185.599, 11747726.559, 11796399.425), stdev = 28927.529
  CI (99.9%): [11728399.704, 11767053.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith  thrpt   30  11747726.559 ± 19326.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5319723.438 ops/s
# Warmup Iteration   2: 12233599.924 ops/s
# Warmup Iteration   3: 12305088.363 ops/s
# Warmup Iteration   4: 10356532.790 ops/s
# Warmup Iteration   5: 12334459.781 ops/s
# Warmup Iteration   6: 12360991.136 ops/s
# Warmup Iteration   7: 12359425.727 ops/s
# Warmup Iteration   8: 12347973.785 ops/s
# Warmup Iteration   9: 12351441.748 ops/s
# Warmup Iteration  10: 12368627.633 ops/s
# Warmup Iteration  11: 12368161.413 ops/s
# Warmup Iteration  12: 12354206.376 ops/s
# Warmup Iteration  13: 12377496.164 ops/s
# Warmup Iteration  14: 12340614.406 ops/s
# Warmup Iteration  15: 12338047.824 ops/s
# Warmup Iteration  16: 12361942.795 ops/s
# Warmup Iteration  17: 12379908.709 ops/s
# Warmup Iteration  18: 12354172.433 ops/s
# Warmup Iteration  19: 12409910.237 ops/s
# Warmup Iteration  20: 12386651.511 ops/s
# Warmup Iteration  21: 12387498.773 ops/s
# Warmup Iteration  22: 12373880.054 ops/s
# Warmup Iteration  23: 12368511.236 ops/s
# Warmup Iteration  24: 12398864.310 ops/s
# Warmup Iteration  25: 12408550.769 ops/s
# Warmup Iteration  26: 12376693.754 ops/s
# Warmup Iteration  27: 12381639.955 ops/s
# Warmup Iteration  28: 12364169.603 ops/s
# Warmup Iteration  29: 12380910.502 ops/s
# Warmup Iteration  30: 12343927.661 ops/s
Iteration   1: 12358068.011 ops/s
Iteration   2: 12352567.559 ops/s
Iteration   3: 12318026.199 ops/s
Iteration   4: 12387419.874 ops/s
Iteration   5: 12376973.446 ops/s
Iteration   6: 12397277.876 ops/s
Iteration   7: 12394431.818 ops/s
Iteration   8: 12403647.987 ops/s
Iteration   9: 12383032.805 ops/s
Iteration  10: 12312438.488 ops/s
Iteration  11: 12387640.056 ops/s
Iteration  12: 12376722.915 ops/s
Iteration  13: 12352473.300 ops/s
Iteration  14: 12388312.140 ops/s
Iteration  15: 12397350.061 ops/s
Iteration  16: 12339091.125 ops/s
Iteration  17: 12381059.351 ops/s
Iteration  18: 12386484.958 ops/s
Iteration  19: 12349824.091 ops/s
Iteration  20: 12417532.958 ops/s
Iteration  21: 12396976.365 ops/s
Iteration  22: 12369197.091 ops/s
Iteration  23: 12393836.062 ops/s
Iteration  24: 12386898.625 ops/s
Iteration  25: 12391034.180 ops/s
Iteration  26: 12387494.462 ops/s
Iteration  27: 12392903.511 ops/s
Iteration  28: 12403146.675 ops/s
Iteration  29: 12337289.077 ops/s
Iteration  30: 12396429.968 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndex":
  12377186.034 ±(99.9%) 17276.755 ops/s [Average]
  (min, avg, max) = (12312438.488, 12377186.034, 12417532.958), stdev = 25859.035
  CI (99.9%): [12359909.280, 12394462.789] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  12377186.034 ± 17276.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4804207.307 ops/s
# Warmup Iteration   2: 10275416.388 ops/s
# Warmup Iteration   3: 9225028.405 ops/s
# Warmup Iteration   4: 10575658.760 ops/s
# Warmup Iteration   5: 10591320.640 ops/s
# Warmup Iteration   6: 10625909.708 ops/s
# Warmup Iteration   7: 10558180.241 ops/s
# Warmup Iteration   8: 10546765.198 ops/s
# Warmup Iteration   9: 10586358.916 ops/s
# Warmup Iteration  10: 10542438.283 ops/s
# Warmup Iteration  11: 10540526.607 ops/s
# Warmup Iteration  12: 10636189.272 ops/s
# Warmup Iteration  13: 10583372.743 ops/s
# Warmup Iteration  14: 10558989.139 ops/s
# Warmup Iteration  15: 10564027.927 ops/s
# Warmup Iteration  16: 10557112.409 ops/s
# Warmup Iteration  17: 10632105.925 ops/s
# Warmup Iteration  18: 10593111.461 ops/s
# Warmup Iteration  19: 10608508.361 ops/s
# Warmup Iteration  20: 10619196.187 ops/s
# Warmup Iteration  21: 10627669.821 ops/s
# Warmup Iteration  22: 10599974.198 ops/s
# Warmup Iteration  23: 10595787.465 ops/s
# Warmup Iteration  24: 10586047.239 ops/s
# Warmup Iteration  25: 10627445.972 ops/s
# Warmup Iteration  26: 10570800.791 ops/s
# Warmup Iteration  27: 10569386.518 ops/s
# Warmup Iteration  28: 10617812.171 ops/s
# Warmup Iteration  29: 10576363.465 ops/s
# Warmup Iteration  30: 10599054.875 ops/s
Iteration   1: 10557809.383 ops/s
Iteration   2: 10554860.829 ops/s
Iteration   3: 10538024.747 ops/s
Iteration   4: 10628292.745 ops/s
Iteration   5: 10615647.337 ops/s
Iteration   6: 10589423.580 ops/s
Iteration   7: 10561532.752 ops/s
Iteration   8: 10613475.172 ops/s
Iteration   9: 10547631.311 ops/s
Iteration  10: 10598316.848 ops/s
Iteration  11: 10643475.834 ops/s
Iteration  12: 10647291.897 ops/s
Iteration  13: 10593603.119 ops/s
Iteration  14: 10579833.193 ops/s
Iteration  15: 10554976.045 ops/s
Iteration  16: 10560624.765 ops/s
Iteration  17: 10586817.178 ops/s
Iteration  18: 10618468.645 ops/s
Iteration  19: 10566707.835 ops/s
Iteration  20: 10613297.314 ops/s
Iteration  21: 10582330.352 ops/s
Iteration  22: 10577117.672 ops/s
Iteration  23: 10547653.232 ops/s
Iteration  24: 10570743.936 ops/s
Iteration  25: 10610009.507 ops/s
Iteration  26: 10611355.390 ops/s
Iteration  27: 10565310.177 ops/s
Iteration  28: 10582053.935 ops/s
Iteration  29: 10602381.925 ops/s
Iteration  30: 10628281.784 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  10588244.948 ±(99.9%) 20012.969 ops/s [Average]
  (min, avg, max) = (10538024.747, 10588244.948, 10647291.897), stdev = 29954.473
  CI (99.9%): [10568231.979, 10608257.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  10588244.948 ± 20012.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4951356.674 ops/s
# Warmup Iteration   2: 11866628.112 ops/s
# Warmup Iteration   3: 10046699.672 ops/s
# Warmup Iteration   4: 11931637.454 ops/s
# Warmup Iteration   5: 11885862.082 ops/s
# Warmup Iteration   6: 11902058.484 ops/s
# Warmup Iteration   7: 11896818.627 ops/s
# Warmup Iteration   8: 11885510.506 ops/s
# Warmup Iteration   9: 11871172.306 ops/s
# Warmup Iteration  10: 11912785.162 ops/s
# Warmup Iteration  11: 11897853.324 ops/s
# Warmup Iteration  12: 11932668.356 ops/s
# Warmup Iteration  13: 11854384.410 ops/s
# Warmup Iteration  14: 11897357.503 ops/s
# Warmup Iteration  15: 11904347.959 ops/s
# Warmup Iteration  16: 11868657.215 ops/s
# Warmup Iteration  17: 11857693.716 ops/s
# Warmup Iteration  18: 11903000.895 ops/s
# Warmup Iteration  19: 11916563.327 ops/s
# Warmup Iteration  20: 11933150.725 ops/s
# Warmup Iteration  21: 11888517.447 ops/s
# Warmup Iteration  22: 11890383.143 ops/s
# Warmup Iteration  23: 11910494.973 ops/s
# Warmup Iteration  24: 11929367.472 ops/s
# Warmup Iteration  25: 11900035.446 ops/s
# Warmup Iteration  26: 11913644.713 ops/s
# Warmup Iteration  27: 11914024.246 ops/s
# Warmup Iteration  28: 11927801.048 ops/s
# Warmup Iteration  29: 11934946.494 ops/s
# Warmup Iteration  30: 11875861.503 ops/s
Iteration   1: 11890151.122 ops/s
Iteration   2: 11883149.426 ops/s
Iteration   3: 11932580.483 ops/s
Iteration   4: 11885147.349 ops/s
Iteration   5: 11871287.831 ops/s
Iteration   6: 11840818.009 ops/s
Iteration   7: 11911581.524 ops/s
Iteration   8: 11952800.282 ops/s
Iteration   9: 11876959.740 ops/s
Iteration  10: 11893906.322 ops/s
Iteration  11: 11893833.960 ops/s
Iteration  12: 11929963.740 ops/s
Iteration  13: 11939014.120 ops/s
Iteration  14: 11850382.313 ops/s
Iteration  15: 11902342.346 ops/s
Iteration  16: 11906316.684 ops/s
Iteration  17: 11885191.956 ops/s
Iteration  18: 11905277.673 ops/s
Iteration  19: 11872783.197 ops/s
Iteration  20: 11879842.315 ops/s
Iteration  21: 11940683.915 ops/s
Iteration  22: 11940211.407 ops/s
Iteration  23: 11875464.032 ops/s
Iteration  24: 11944555.578 ops/s
Iteration  25: 11919709.533 ops/s
Iteration  26: 11934598.349 ops/s
Iteration  27: 11920189.948 ops/s
Iteration  28: 11955933.150 ops/s
Iteration  29: 11905255.634 ops/s
Iteration  30: 11912018.691 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith_target":
  11905065.021 ±(99.9%) 20090.497 ops/s [Average]
  (min, avg, max) = (11840818.009, 11905065.021, 11955933.150), stdev = 30070.512
  CI (99.9%): [11884974.524, 11925155.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  11905065.021 ± 20090.497  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8006520.609 ops/s
# Warmup Iteration   2: 17389955.570 ops/s
# Warmup Iteration   3: 14664426.134 ops/s
# Warmup Iteration   4: 17334517.833 ops/s
# Warmup Iteration   5: 17350813.296 ops/s
# Warmup Iteration   6: 17270666.075 ops/s
# Warmup Iteration   7: 17321684.974 ops/s
# Warmup Iteration   8: 17251445.807 ops/s
# Warmup Iteration   9: 17342472.725 ops/s
# Warmup Iteration  10: 17316265.340 ops/s
# Warmup Iteration  11: 17376231.010 ops/s
# Warmup Iteration  12: 17343633.881 ops/s
# Warmup Iteration  13: 17352195.457 ops/s
# Warmup Iteration  14: 17321331.987 ops/s
# Warmup Iteration  15: 17360698.089 ops/s
# Warmup Iteration  16: 17321199.900 ops/s
# Warmup Iteration  17: 17365172.470 ops/s
# Warmup Iteration  18: 17326034.833 ops/s
# Warmup Iteration  19: 17336112.071 ops/s
# Warmup Iteration  20: 17309934.274 ops/s
# Warmup Iteration  21: 17378065.689 ops/s
# Warmup Iteration  22: 17335951.930 ops/s
# Warmup Iteration  23: 17334394.101 ops/s
# Warmup Iteration  24: 17357072.616 ops/s
# Warmup Iteration  25: 17360907.218 ops/s
# Warmup Iteration  26: 17367971.744 ops/s
# Warmup Iteration  27: 17347328.288 ops/s
# Warmup Iteration  28: 17374464.667 ops/s
# Warmup Iteration  29: 17323637.662 ops/s
# Warmup Iteration  30: 17317691.805 ops/s
Iteration   1: 17392829.642 ops/s
Iteration   2: 17401148.368 ops/s
Iteration   3: 17353802.394 ops/s
Iteration   4: 17366352.782 ops/s
Iteration   5: 17346959.408 ops/s
Iteration   6: 17332009.841 ops/s
Iteration   7: 17264441.362 ops/s
Iteration   8: 17386265.834 ops/s
Iteration   9: 17371268.319 ops/s
Iteration  10: 17367534.350 ops/s
Iteration  11: 17339889.091 ops/s
Iteration  12: 17368733.320 ops/s
Iteration  13: 17346174.654 ops/s
Iteration  14: 17379590.577 ops/s
Iteration  15: 17319925.027 ops/s
Iteration  16: 17320751.876 ops/s
Iteration  17: 16789878.847 ops/s
Iteration  18: 16549596.114 ops/s
Iteration  19: 17364312.180 ops/s
Iteration  20: 17391938.911 ops/s
Iteration  21: 17376573.893 ops/s
Iteration  22: 17320421.652 ops/s
Iteration  23: 17303886.460 ops/s
Iteration  24: 17348307.488 ops/s
Iteration  25: 17318908.537 ops/s
Iteration  26: 17321176.126 ops/s
Iteration  27: 17331499.954 ops/s
Iteration  28: 17157305.858 ops/s
Iteration  29: 17390553.945 ops/s
Iteration  30: 17299877.742 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reject_target":
  17297397.152 ±(99.9%) 120160.188 ops/s [Average]
  (min, avg, max) = (16549596.114, 17297397.152, 17401148.368), stdev = 179850.126
  CI (99.9%): [17177236.964, 17417557.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_reject_target  thrpt   30  17297397.152 ± 120160.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744260.242 ops/s
# Warmup Iteration   2: 776215.925 ops/s
# Warmup Iteration   3: 999747.643 ops/s
# Warmup Iteration   4: 995582.997 ops/s
# Warmup Iteration   5: 995527.732 ops/s
# Warmup Iteration   6: 991651.565 ops/s
# Warmup Iteration   7: 994506.664 ops/s
# Warmup Iteration   8: 994799.380 ops/s
# Warmup Iteration   9: 994116.209 ops/s
# Warmup Iteration  10: 990725.946 ops/s
# Warmup Iteration  11: 989439.028 ops/s
# Warmup Iteration  12: 843667.947 ops/s
# Warmup Iteration  13: 994902.531 ops/s
# Warmup Iteration  14: 995632.223 ops/s
# Warmup Iteration  15: 992697.230 ops/s
# Warmup Iteration  16: 996746.644 ops/s
# Warmup Iteration  17: 1060182.711 ops/s
# Warmup Iteration  18: 1059072.332 ops/s
# Warmup Iteration  19: 1061043.553 ops/s
# Warmup Iteration  20: 1053546.050 ops/s
# Warmup Iteration  21: 1059828.457 ops/s
# Warmup Iteration  22: 1058186.625 ops/s
# Warmup Iteration  23: 1057035.319 ops/s
# Warmup Iteration  24: 1059154.644 ops/s
# Warmup Iteration  25: 1059608.831 ops/s
# Warmup Iteration  26: 1061323.033 ops/s
# Warmup Iteration  27: 1056984.724 ops/s
# Warmup Iteration  28: 1057795.284 ops/s
# Warmup Iteration  29: 1059128.191 ops/s
# Warmup Iteration  30: 1058665.987 ops/s
Iteration   1: 1051700.485 ops/s
Iteration   2: 1055893.156 ops/s
Iteration   3: 1059043.485 ops/s
Iteration   4: 1059151.211 ops/s
Iteration   5: 1060487.023 ops/s
Iteration   6: 1061235.794 ops/s
Iteration   7: 1060374.212 ops/s
Iteration   8: 1059662.362 ops/s
Iteration   9: 1059645.492 ops/s
Iteration  10: 1058742.554 ops/s
Iteration  11: 1056693.583 ops/s
Iteration  12: 1054862.140 ops/s
Iteration  13: 1056365.627 ops/s
Iteration  14: 1054863.192 ops/s
Iteration  15: 1056639.799 ops/s
Iteration  16: 1060713.850 ops/s
Iteration  17: 1063298.192 ops/s
Iteration  18: 1060854.729 ops/s
Iteration  19: 1050201.094 ops/s
Iteration  20: 1058256.255 ops/s
Iteration  21: 1060701.274 ops/s
Iteration  22: 1059724.596 ops/s
Iteration  23: 1059252.061 ops/s
Iteration  24: 1056243.299 ops/s
Iteration  25: 1055628.144 ops/s
Iteration  26: 1061559.183 ops/s
Iteration  27: 1059698.074 ops/s
Iteration  28: 1062134.172 ops/s
Iteration  29: 1055606.516 ops/s
Iteration  30: 1056688.699 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_remove":
  1058197.342 ±(99.9%) 2018.544 ops/s [Average]
  (min, avg, max) = (1050201.094, 1058197.342, 1063298.192), stdev = 3021.261
  CI (99.9%): [1056178.798, 1060215.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_remove  thrpt   30  1058197.342 ± 2018.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 736390.053 ops/s
# Warmup Iteration   2: 781644.288 ops/s
# Warmup Iteration   3: 969960.424 ops/s
# Warmup Iteration   4: 978489.503 ops/s
# Warmup Iteration   5: 986641.920 ops/s
# Warmup Iteration   6: 968401.002 ops/s
# Warmup Iteration   7: 969540.428 ops/s
# Warmup Iteration   8: 980100.437 ops/s
# Warmup Iteration   9: 972080.926 ops/s
# Warmup Iteration  10: 982474.971 ops/s
# Warmup Iteration  11: 982294.173 ops/s
# Warmup Iteration  12: 842334.613 ops/s
# Warmup Iteration  13: 971682.329 ops/s
# Warmup Iteration  14: 973578.877 ops/s
# Warmup Iteration  15: 972153.672 ops/s
# Warmup Iteration  16: 971144.828 ops/s
# Warmup Iteration  17: 1025168.415 ops/s
# Warmup Iteration  18: 1032021.571 ops/s
# Warmup Iteration  19: 1028754.508 ops/s
# Warmup Iteration  20: 1030530.956 ops/s
# Warmup Iteration  21: 1025815.816 ops/s
# Warmup Iteration  22: 1005002.444 ops/s
# Warmup Iteration  23: 1026393.570 ops/s
# Warmup Iteration  24: 1022102.455 ops/s
# Warmup Iteration  25: 1023322.559 ops/s
# Warmup Iteration  26: 1034779.972 ops/s
# Warmup Iteration  27: 1029696.945 ops/s
# Warmup Iteration  28: 1028181.170 ops/s
# Warmup Iteration  29: 1026386.004 ops/s
# Warmup Iteration  30: 1031980.499 ops/s
Iteration   1: 1015533.933 ops/s
Iteration   2: 1018894.895 ops/s
Iteration   3: 1024380.421 ops/s
Iteration   4: 1024852.557 ops/s
Iteration   5: 1020305.346 ops/s
Iteration   6: 1018948.298 ops/s
Iteration   7: 1019659.033 ops/s
Iteration   8: 1023219.328 ops/s
Iteration   9: 1024679.519 ops/s
Iteration  10: 1029124.608 ops/s
Iteration  11: 1032996.172 ops/s
Iteration  12: 1026566.707 ops/s
Iteration  13: 1028435.899 ops/s
Iteration  14: 1018839.814 ops/s
Iteration  15: 1035071.466 ops/s
Iteration  16: 1020279.011 ops/s
Iteration  17: 1025469.971 ops/s
Iteration  18: 1012406.031 ops/s
Iteration  19: 1031390.623 ops/s
Iteration  20: 1028258.150 ops/s
Iteration  21: 1028505.263 ops/s
Iteration  22: 1029114.028 ops/s
Iteration  23: 1029048.257 ops/s
Iteration  24: 1022893.579 ops/s
Iteration  25: 1028183.879 ops/s
Iteration  26: 1020278.277 ops/s
Iteration  27: 1020961.218 ops/s
Iteration  28: 1028293.774 ops/s
Iteration  29: 1032793.837 ops/s
Iteration  30: 1020706.499 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAll":
  1024669.680 ±(99.9%) 3660.345 ops/s [Average]
  (min, avg, max) = (1012406.031, 1024669.680, 1035071.466), stdev = 5478.633
  CI (99.9%): [1021009.335, 1028330.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_removeAll  thrpt   30  1024669.680 ± 3660.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631878.248 ops/s
# Warmup Iteration   2: 763538.389 ops/s
# Warmup Iteration   3: 963704.296 ops/s
# Warmup Iteration   4: 961991.879 ops/s
# Warmup Iteration   5: 962395.102 ops/s
# Warmup Iteration   6: 963520.023 ops/s
# Warmup Iteration   7: 963405.865 ops/s
# Warmup Iteration   8: 963237.640 ops/s
# Warmup Iteration   9: 807126.973 ops/s
# Warmup Iteration  10: 967430.601 ops/s
# Warmup Iteration  11: 965240.767 ops/s
# Warmup Iteration  12: 963373.983 ops/s
# Warmup Iteration  13: 963101.172 ops/s
# Warmup Iteration  14: 966008.291 ops/s
# Warmup Iteration  15: 965204.527 ops/s
# Warmup Iteration  16: 959658.981 ops/s
# Warmup Iteration  17: 1019409.295 ops/s
# Warmup Iteration  18: 1016628.395 ops/s
# Warmup Iteration  19: 1018025.734 ops/s
# Warmup Iteration  20: 1017169.317 ops/s
# Warmup Iteration  21: 1018556.302 ops/s
# Warmup Iteration  22: 1017666.553 ops/s
# Warmup Iteration  23: 1017197.686 ops/s
# Warmup Iteration  24: 1013037.980 ops/s
# Warmup Iteration  25: 1018280.397 ops/s
# Warmup Iteration  26: 1021576.947 ops/s
# Warmup Iteration  27: 1020683.790 ops/s
# Warmup Iteration  28: 1017974.878 ops/s
# Warmup Iteration  29: 1016589.457 ops/s
# Warmup Iteration  30: 1022442.006 ops/s
Iteration   1: 1019944.243 ops/s
Iteration   2: 1015515.141 ops/s
Iteration   3: 1014251.232 ops/s
Iteration   4: 1012568.121 ops/s
Iteration   5: 1017811.468 ops/s
Iteration   6: 1023914.860 ops/s
Iteration   7: 1019543.621 ops/s
Iteration   8: 1019677.943 ops/s
Iteration   9: 1022679.300 ops/s
Iteration  10: 1020428.156 ops/s
Iteration  11: 1018088.993 ops/s
Iteration  12: 1016181.591 ops/s
Iteration  13: 1018794.351 ops/s
Iteration  14: 1023939.649 ops/s
Iteration  15: 1019342.456 ops/s
Iteration  16: 1022448.233 ops/s
Iteration  17: 1023011.328 ops/s
Iteration  18: 1018069.616 ops/s
Iteration  19: 1011909.169 ops/s
Iteration  20: 1016781.686 ops/s
Iteration  21: 1018155.220 ops/s
Iteration  22: 1018267.188 ops/s
Iteration  23: 1019139.647 ops/s
Iteration  24: 1017329.517 ops/s
Iteration  25: 1020283.327 ops/s
Iteration  26: 1020221.537 ops/s
Iteration  27: 1020422.357 ops/s
Iteration  28: 1020900.369 ops/s
Iteration  29: 1021009.490 ops/s
Iteration  30: 1017547.903 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_removeAtIndex":
  1018939.257 ±(99.9%) 1981.582 ops/s [Average]
  (min, avg, max) = (1011909.169, 1018939.257, 1023939.649), stdev = 2965.938
  CI (99.9%): [1016957.675, 1020920.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1018939.257 ± 1981.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627843.176 ops/s
# Warmup Iteration   2: 755849.364 ops/s
# Warmup Iteration   3: 963498.765 ops/s
# Warmup Iteration   4: 946770.918 ops/s
# Warmup Iteration   5: 961267.297 ops/s
# Warmup Iteration   6: 963767.551 ops/s
# Warmup Iteration   7: 963410.094 ops/s
# Warmup Iteration   8: 962269.076 ops/s
# Warmup Iteration   9: 805944.843 ops/s
# Warmup Iteration  10: 965374.142 ops/s
# Warmup Iteration  11: 960844.826 ops/s
# Warmup Iteration  12: 957597.795 ops/s
# Warmup Iteration  13: 966462.057 ops/s
# Warmup Iteration  14: 964663.234 ops/s
# Warmup Iteration  15: 964018.008 ops/s
# Warmup Iteration  16: 965999.552 ops/s
# Warmup Iteration  17: 1019858.870 ops/s
# Warmup Iteration  18: 1018720.085 ops/s
# Warmup Iteration  19: 1018418.649 ops/s
# Warmup Iteration  20: 1020217.857 ops/s
# Warmup Iteration  21: 1017047.874 ops/s
# Warmup Iteration  22: 1014874.589 ops/s
# Warmup Iteration  23: 1019097.608 ops/s
# Warmup Iteration  24: 1017018.615 ops/s
# Warmup Iteration  25: 1018384.620 ops/s
# Warmup Iteration  26: 1020037.339 ops/s
# Warmup Iteration  27: 1016968.807 ops/s
# Warmup Iteration  28: 1018534.915 ops/s
# Warmup Iteration  29: 1014693.661 ops/s
# Warmup Iteration  30: 1018505.735 ops/s
Iteration   1: 1017510.963 ops/s
Iteration   2: 1020906.620 ops/s
Iteration   3: 1021679.507 ops/s
Iteration   4: 1018080.087 ops/s
Iteration   5: 1015788.661 ops/s
Iteration   6: 1021229.412 ops/s
Iteration   7: 1017767.017 ops/s
Iteration   8: 1018802.363 ops/s
Iteration   9: 1018238.498 ops/s
Iteration  10: 1018061.415 ops/s
Iteration  11: 1015925.749 ops/s
Iteration  12: 1020294.774 ops/s
Iteration  13: 1020560.422 ops/s
Iteration  14: 1020009.335 ops/s
Iteration  15: 1016930.049 ops/s
Iteration  16: 1015426.215 ops/s
Iteration  17: 1017111.770 ops/s
Iteration  18: 1017181.648 ops/s
Iteration  19: 1015203.315 ops/s
Iteration  20: 1019408.712 ops/s
Iteration  21: 1020615.770 ops/s
Iteration  22: 1020826.212 ops/s
Iteration  23: 1021243.695 ops/s
Iteration  24: 1020711.102 ops/s
Iteration  25: 1018087.700 ops/s
Iteration  26: 1020082.199 ops/s
Iteration  27: 1018443.117 ops/s
Iteration  28: 1010912.171 ops/s
Iteration  29: 1015074.034 ops/s
Iteration  30: 1020084.143 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_replaceAll":
  1018406.556 ±(99.9%) 1631.499 ops/s [Average]
  (min, avg, max) = (1010912.171, 1018406.556, 1021679.507), stdev = 2441.951
  CI (99.9%): [1016775.057, 1020038.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_replaceAll  thrpt   30  1018406.556 ± 1631.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623769.620 ops/s
# Warmup Iteration   2: 755838.618 ops/s
# Warmup Iteration   3: 957035.601 ops/s
# Warmup Iteration   4: 951959.991 ops/s
# Warmup Iteration   5: 958485.044 ops/s
# Warmup Iteration   6: 959384.800 ops/s
# Warmup Iteration   7: 955683.200 ops/s
# Warmup Iteration   8: 958498.458 ops/s
# Warmup Iteration   9: 805014.617 ops/s
# Warmup Iteration  10: 959177.382 ops/s
# Warmup Iteration  11: 959133.717 ops/s
# Warmup Iteration  12: 958447.549 ops/s
# Warmup Iteration  13: 959259.103 ops/s
# Warmup Iteration  14: 953158.079 ops/s
# Warmup Iteration  15: 957166.032 ops/s
# Warmup Iteration  16: 955077.096 ops/s
# Warmup Iteration  17: 1016462.056 ops/s
# Warmup Iteration  18: 1015539.032 ops/s
# Warmup Iteration  19: 1013609.404 ops/s
# Warmup Iteration  20: 1016198.849 ops/s
# Warmup Iteration  21: 1018642.574 ops/s
# Warmup Iteration  22: 1016419.063 ops/s
# Warmup Iteration  23: 1018014.803 ops/s
# Warmup Iteration  24: 1017766.372 ops/s
# Warmup Iteration  25: 1016073.564 ops/s
# Warmup Iteration  26: 1017791.104 ops/s
# Warmup Iteration  27: 1017287.666 ops/s
# Warmup Iteration  28: 1017751.959 ops/s
# Warmup Iteration  29: 1017441.286 ops/s
# Warmup Iteration  30: 1016953.990 ops/s
Iteration   1: 1016731.374 ops/s
Iteration   2: 1016550.833 ops/s
Iteration   3: 1017608.232 ops/s
Iteration   4: 1016704.521 ops/s
Iteration   5: 1018885.609 ops/s
Iteration   6: 1011701.830 ops/s
Iteration   7: 1016890.324 ops/s
Iteration   8: 1019690.124 ops/s
Iteration   9: 1017856.916 ops/s
Iteration  10: 1010314.472 ops/s
Iteration  11: 1013200.368 ops/s
Iteration  12: 1019022.979 ops/s
Iteration  13: 1016865.144 ops/s
Iteration  14: 1017919.594 ops/s
Iteration  15: 1010979.428 ops/s
Iteration  16: 1017295.657 ops/s
Iteration  17: 1015026.569 ops/s
Iteration  18: 1016093.762 ops/s
Iteration  19: 1017013.082 ops/s
Iteration  20: 1012668.097 ops/s
Iteration  21: 1014496.224 ops/s
Iteration  22: 1019733.593 ops/s
Iteration  23: 1017736.660 ops/s
Iteration  24: 1017910.615 ops/s
Iteration  25: 1019702.286 ops/s
Iteration  26: 1013182.514 ops/s
Iteration  27: 1016542.533 ops/s
Iteration  28: 1015304.611 ops/s
Iteration  29: 1015911.542 ops/s
Iteration  30: 1010988.923 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_retainAll":
  1016017.614 ±(99.9%) 1809.332 ops/s [Average]
  (min, avg, max) = (1010314.472, 1016017.614, 1019733.593), stdev = 2708.123
  CI (99.9%): [1014208.282, 1017826.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_retainAll  thrpt   30  1016017.614 ± 1809.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10623413.778 ops/s
# Warmup Iteration   2: 22353246.964 ops/s
# Warmup Iteration   3: 18160109.190 ops/s
# Warmup Iteration   4: 21616200.962 ops/s
# Warmup Iteration   5: 21472592.025 ops/s
# Warmup Iteration   6: 21552053.271 ops/s
# Warmup Iteration   7: 21572131.732 ops/s
# Warmup Iteration   8: 21611889.537 ops/s
# Warmup Iteration   9: 21570420.373 ops/s
# Warmup Iteration  10: 21553181.580 ops/s
# Warmup Iteration  11: 21521510.517 ops/s
# Warmup Iteration  12: 21587579.784 ops/s
# Warmup Iteration  13: 21560058.447 ops/s
# Warmup Iteration  14: 21599846.295 ops/s
# Warmup Iteration  15: 21516898.572 ops/s
# Warmup Iteration  16: 21510594.349 ops/s
# Warmup Iteration  17: 21607397.634 ops/s
# Warmup Iteration  18: 21536241.998 ops/s
# Warmup Iteration  19: 21611282.007 ops/s
# Warmup Iteration  20: 21631050.293 ops/s
# Warmup Iteration  21: 21578622.871 ops/s
# Warmup Iteration  22: 21559780.304 ops/s
# Warmup Iteration  23: 21611565.910 ops/s
# Warmup Iteration  24: 21588385.152 ops/s
# Warmup Iteration  25: 21641582.906 ops/s
# Warmup Iteration  26: 21568292.332 ops/s
# Warmup Iteration  27: 21541265.060 ops/s
# Warmup Iteration  28: 21573724.889 ops/s
# Warmup Iteration  29: 21576655.013 ops/s
# Warmup Iteration  30: 21581869.865 ops/s
Iteration   1: 21496701.679 ops/s
Iteration   2: 21519480.684 ops/s
Iteration   3: 21502825.159 ops/s
Iteration   4: 21590281.147 ops/s
Iteration   5: 21597799.242 ops/s
Iteration   6: 21579675.924 ops/s
Iteration   7: 21635986.983 ops/s
Iteration   8: 21605291.653 ops/s
Iteration   9: 21578338.404 ops/s
Iteration  10: 21661981.544 ops/s
Iteration  11: 21569497.479 ops/s
Iteration  12: 21589621.309 ops/s
Iteration  13: 21584803.928 ops/s
Iteration  14: 21609457.274 ops/s
Iteration  15: 21712775.608 ops/s
Iteration  16: 21343517.398 ops/s
Iteration  17: 21574096.509 ops/s
Iteration  18: 21607405.632 ops/s
Iteration  19: 21603831.812 ops/s
Iteration  20: 21697538.268 ops/s
Iteration  21: 21636419.158 ops/s
Iteration  22: 21589154.859 ops/s
Iteration  23: 21704131.775 ops/s
Iteration  24: 21597208.491 ops/s
Iteration  25: 21653371.239 ops/s
Iteration  26: 21592571.166 ops/s
Iteration  27: 21529064.394 ops/s
Iteration  28: 21512495.462 ops/s
Iteration  29: 21553303.492 ops/s
Iteration  30: 21634874.905 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEach":
  21588783.419 ±(99.9%) 48109.222 ops/s [Average]
  (min, avg, max) = (21343517.398, 21588783.419, 21712775.608), stdev = 72007.625
  CI (99.9%): [21540674.197, 21636892.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEach  thrpt   30  21588783.419 ± 48109.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7539407.113 ops/s
# Warmup Iteration   2: 16199094.875 ops/s
# Warmup Iteration   3: 13722307.659 ops/s
# Warmup Iteration   4: 16289621.197 ops/s
# Warmup Iteration   5: 16250594.300 ops/s
# Warmup Iteration   6: 16276119.571 ops/s
# Warmup Iteration   7: 16279892.428 ops/s
# Warmup Iteration   8: 16223694.290 ops/s
# Warmup Iteration   9: 16279233.575 ops/s
# Warmup Iteration  10: 16282894.426 ops/s
# Warmup Iteration  11: 16292768.649 ops/s
# Warmup Iteration  12: 16302477.636 ops/s
# Warmup Iteration  13: 16258974.983 ops/s
# Warmup Iteration  14: 16247780.362 ops/s
# Warmup Iteration  15: 16300344.443 ops/s
# Warmup Iteration  16: 16284822.323 ops/s
# Warmup Iteration  17: 16316100.165 ops/s
# Warmup Iteration  18: 16321038.789 ops/s
# Warmup Iteration  19: 16286990.851 ops/s
# Warmup Iteration  20: 16285006.045 ops/s
# Warmup Iteration  21: 16279417.104 ops/s
# Warmup Iteration  22: 16316116.076 ops/s
# Warmup Iteration  23: 16349625.834 ops/s
# Warmup Iteration  24: 16344094.201 ops/s
# Warmup Iteration  25: 16294608.813 ops/s
# Warmup Iteration  26: 16300689.406 ops/s
# Warmup Iteration  27: 16284172.732 ops/s
# Warmup Iteration  28: 16338923.136 ops/s
# Warmup Iteration  29: 16332239.600 ops/s
# Warmup Iteration  30: 16306671.129 ops/s
Iteration   1: 16360765.310 ops/s
Iteration   2: 16232553.618 ops/s
Iteration   3: 16246909.562 ops/s
Iteration   4: 16286114.019 ops/s
Iteration   5: 16364447.364 ops/s
Iteration   6: 16329169.308 ops/s
Iteration   7: 16359715.995 ops/s
Iteration   8: 16333799.592 ops/s
Iteration   9: 16337940.292 ops/s
Iteration  10: 16320131.870 ops/s
Iteration  11: 16291395.530 ops/s
Iteration  12: 16298120.725 ops/s
Iteration  13: 16293929.670 ops/s
Iteration  14: 16370900.518 ops/s
Iteration  15: 16266804.446 ops/s
Iteration  16: 16353625.597 ops/s
Iteration  17: 16327294.204 ops/s
Iteration  18: 16338728.760 ops/s
Iteration  19: 16327259.612 ops/s
Iteration  20: 16309980.231 ops/s
Iteration  21: 16332415.902 ops/s
Iteration  22: 16352513.973 ops/s
Iteration  23: 16334327.424 ops/s
Iteration  24: 16333006.032 ops/s
Iteration  25: 16342507.685 ops/s
Iteration  26: 16333094.110 ops/s
Iteration  27: 16328962.636 ops/s
Iteration  28: 16329847.796 ops/s
Iteration  29: 16342336.052 ops/s
Iteration  30: 16336506.202 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEachWithIndex":
  16323836.801 ±(99.9%) 22125.515 ops/s [Average]
  (min, avg, max) = (16232553.618, 16323836.801, 16370900.518), stdev = 33116.432
  CI (99.9%): [16301711.286, 16345962.317] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  16323836.801 ± 22125.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4343928.626 ops/s
# Warmup Iteration   2: 10313017.725 ops/s
# Warmup Iteration   3: 10323341.366 ops/s
# Warmup Iteration   4: 8714376.185 ops/s
# Warmup Iteration   5: 10327740.531 ops/s
# Warmup Iteration   6: 10350965.870 ops/s
# Warmup Iteration   7: 10335724.049 ops/s
# Warmup Iteration   8: 10351663.984 ops/s
# Warmup Iteration   9: 10340915.896 ops/s
# Warmup Iteration  10: 10344888.207 ops/s
# Warmup Iteration  11: 10343673.057 ops/s
# Warmup Iteration  12: 10334471.396 ops/s
# Warmup Iteration  13: 10346753.887 ops/s
# Warmup Iteration  14: 10330282.162 ops/s
# Warmup Iteration  15: 10351922.747 ops/s
# Warmup Iteration  16: 10347661.451 ops/s
# Warmup Iteration  17: 10347933.789 ops/s
# Warmup Iteration  18: 10317627.912 ops/s
# Warmup Iteration  19: 10336733.726 ops/s
# Warmup Iteration  20: 10345196.888 ops/s
# Warmup Iteration  21: 10320314.677 ops/s
# Warmup Iteration  22: 10299643.150 ops/s
# Warmup Iteration  23: 10343447.429 ops/s
# Warmup Iteration  24: 10320371.562 ops/s
# Warmup Iteration  25: 10350098.105 ops/s
# Warmup Iteration  26: 10371549.767 ops/s
# Warmup Iteration  27: 10308492.324 ops/s
# Warmup Iteration  28: 10305202.519 ops/s
# Warmup Iteration  29: 10354052.774 ops/s
# Warmup Iteration  30: 10325639.424 ops/s
Iteration   1: 10329223.070 ops/s
Iteration   2: 10257930.764 ops/s
Iteration   3: 10350050.779 ops/s
Iteration   4: 10335070.038 ops/s
Iteration   5: 10299104.490 ops/s
Iteration   6: 10352604.449 ops/s
Iteration   7: 10309645.912 ops/s
Iteration   8: 10365694.322 ops/s
Iteration   9: 10357297.927 ops/s
Iteration  10: 10306787.975 ops/s
Iteration  11: 10333929.884 ops/s
Iteration  12: 10309475.287 ops/s
Iteration  13: 10281810.821 ops/s
Iteration  14: 10333519.438 ops/s
Iteration  15: 10351144.454 ops/s
Iteration  16: 10304937.829 ops/s
Iteration  17: 10292596.724 ops/s
Iteration  18: 10371762.810 ops/s
Iteration  19: 10351683.453 ops/s
Iteration  20: 10364401.718 ops/s
Iteration  21: 10366022.944 ops/s
Iteration  22: 10342099.734 ops/s
Iteration  23: 10349338.810 ops/s
Iteration  24: 10347639.951 ops/s
Iteration  25: 10366782.149 ops/s
Iteration  26: 10362970.718 ops/s
Iteration  27: 10357946.695 ops/s
Iteration  28: 10363934.978 ops/s
Iteration  29: 10333941.122 ops/s
Iteration  30: 10318920.117 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select":
  10335608.979 ±(99.9%) 19379.533 ops/s [Average]
  (min, avg, max) = (10257930.764, 10335608.979, 10371762.810), stdev = 29006.375
  CI (99.9%): [10316229.445, 10354988.512] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_select  thrpt   30  10335608.979 ± 19379.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7930112.359 ops/s
# Warmup Iteration   2: 13844956.685 ops/s
# Warmup Iteration   3: 14897502.206 ops/s
# Warmup Iteration   4: 14955822.209 ops/s
# Warmup Iteration   5: 14848884.306 ops/s
# Warmup Iteration   6: 12784736.535 ops/s
# Warmup Iteration   7: 15034796.674 ops/s
# Warmup Iteration   8: 14953811.455 ops/s
# Warmup Iteration   9: 15046553.776 ops/s
# Warmup Iteration  10: 15077939.670 ops/s
# Warmup Iteration  11: 15030805.382 ops/s
# Warmup Iteration  12: 15047576.585 ops/s
# Warmup Iteration  13: 15045294.394 ops/s
# Warmup Iteration  14: 15049905.891 ops/s
# Warmup Iteration  15: 15053982.678 ops/s
# Warmup Iteration  16: 15033705.575 ops/s
# Warmup Iteration  17: 15031769.996 ops/s
# Warmup Iteration  18: 14988313.443 ops/s
# Warmup Iteration  19: 14970443.679 ops/s
# Warmup Iteration  20: 14945894.241 ops/s
# Warmup Iteration  21: 14973074.382 ops/s
# Warmup Iteration  22: 14985695.963 ops/s
# Warmup Iteration  23: 14989856.424 ops/s
# Warmup Iteration  24: 14998538.551 ops/s
# Warmup Iteration  25: 14922310.738 ops/s
# Warmup Iteration  26: 15026963.773 ops/s
# Warmup Iteration  27: 15014922.011 ops/s
# Warmup Iteration  28: 14947180.736 ops/s
# Warmup Iteration  29: 14946826.022 ops/s
# Warmup Iteration  30: 14985055.035 ops/s
Iteration   1: 14977725.572 ops/s
Iteration   2: 15011719.433 ops/s
Iteration   3: 15016664.116 ops/s
Iteration   4: 14981598.534 ops/s
Iteration   5: 15013290.008 ops/s
Iteration   6: 14876308.651 ops/s
Iteration   7: 14955594.531 ops/s
Iteration   8: 15013240.042 ops/s
Iteration   9: 14967268.745 ops/s
Iteration  10: 15038672.318 ops/s
Iteration  11: 14955725.160 ops/s
Iteration  12: 15004672.799 ops/s
Iteration  13: 15005602.065 ops/s
Iteration  14: 15022374.276 ops/s
Iteration  15: 15054277.302 ops/s
Iteration  16: 15007680.409 ops/s
Iteration  17: 15032215.416 ops/s
Iteration  18: 15050712.767 ops/s
Iteration  19: 14901237.148 ops/s
Iteration  20: 14973680.554 ops/s
Iteration  21: 14978573.867 ops/s
Iteration  22: 14948098.738 ops/s
Iteration  23: 15016838.526 ops/s
Iteration  24: 14949309.066 ops/s
Iteration  25: 15054534.546 ops/s
Iteration  26: 14980667.558 ops/s
Iteration  27: 15022380.044 ops/s
Iteration  28: 15028151.263 ops/s
Iteration  29: 14999624.412 ops/s
Iteration  30: 15022172.713 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectInstancesOf":
  14995353.686 ±(99.9%) 28156.765 ops/s [Average]
  (min, avg, max) = (14876308.651, 14995353.686, 15054534.546), stdev = 42143.723
  CI (99.9%): [14967196.921, 15023510.451] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  14995353.686 ± 28156.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4703757.827 ops/s
# Warmup Iteration   2: 11472755.458 ops/s
# Warmup Iteration   3: 9715515.019 ops/s
# Warmup Iteration   4: 11522072.584 ops/s
# Warmup Iteration   5: 11560689.503 ops/s
# Warmup Iteration   6: 11567775.280 ops/s
# Warmup Iteration   7: 11551413.740 ops/s
# Warmup Iteration   8: 11534810.011 ops/s
# Warmup Iteration   9: 11583376.122 ops/s
# Warmup Iteration  10: 11521124.731 ops/s
# Warmup Iteration  11: 11552676.577 ops/s
# Warmup Iteration  12: 11544929.360 ops/s
# Warmup Iteration  13: 11545865.010 ops/s
# Warmup Iteration  14: 11547459.816 ops/s
# Warmup Iteration  15: 11572937.209 ops/s
# Warmup Iteration  16: 11543664.696 ops/s
# Warmup Iteration  17: 11561722.065 ops/s
# Warmup Iteration  18: 11601261.079 ops/s
# Warmup Iteration  19: 11523369.740 ops/s
# Warmup Iteration  20: 11579691.609 ops/s
# Warmup Iteration  21: 11550034.378 ops/s
# Warmup Iteration  22: 11528435.613 ops/s
# Warmup Iteration  23: 11563570.700 ops/s
# Warmup Iteration  24: 11566820.836 ops/s
# Warmup Iteration  25: 11568545.255 ops/s
# Warmup Iteration  26: 11578322.740 ops/s
# Warmup Iteration  27: 11544730.642 ops/s
# Warmup Iteration  28: 11553344.178 ops/s
# Warmup Iteration  29: 11578313.073 ops/s
# Warmup Iteration  30: 11534142.103 ops/s
Iteration   1: 11508213.985 ops/s
Iteration   2: 11585915.150 ops/s
Iteration   3: 11532566.299 ops/s
Iteration   4: 11474495.416 ops/s
Iteration   5: 11565824.832 ops/s
Iteration   6: 11551916.838 ops/s
Iteration   7: 11556877.323 ops/s
Iteration   8: 11553754.154 ops/s
Iteration   9: 11572399.650 ops/s
Iteration  10: 11600311.009 ops/s
Iteration  11: 11593781.512 ops/s
Iteration  12: 11585151.590 ops/s
Iteration  13: 11564520.656 ops/s
Iteration  14: 11567441.299 ops/s
Iteration  15: 11581023.857 ops/s
Iteration  16: 11553458.226 ops/s
Iteration  17: 11546264.859 ops/s
Iteration  18: 11517922.810 ops/s
Iteration  19: 11475662.349 ops/s
Iteration  20: 11573949.421 ops/s
Iteration  21: 11528022.751 ops/s
Iteration  22: 11553836.180 ops/s
Iteration  23: 11552347.108 ops/s
Iteration  24: 11580480.893 ops/s
Iteration  25: 11565384.743 ops/s
Iteration  26: 11591946.489 ops/s
Iteration  27: 11571819.450 ops/s
Iteration  28: 11585167.992 ops/s
Iteration  29: 11569777.801 ops/s
Iteration  30: 11563259.923 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith":
  11557449.819 ±(99.9%) 20840.468 ops/s [Average]
  (min, avg, max) = (11474495.416, 11557449.819, 11600311.009), stdev = 31193.034
  CI (99.9%): [11536609.351, 11578290.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_selectWith  thrpt   30  11557449.819 ± 20840.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5265739.887 ops/s
# Warmup Iteration   2: 12148366.122 ops/s
# Warmup Iteration   3: 12293931.765 ops/s
# Warmup Iteration   4: 10376462.606 ops/s
# Warmup Iteration   5: 12255591.616 ops/s
# Warmup Iteration   6: 12332695.246 ops/s
# Warmup Iteration   7: 12327662.493 ops/s
# Warmup Iteration   8: 12271780.764 ops/s
# Warmup Iteration   9: 12337616.348 ops/s
# Warmup Iteration  10: 12278560.341 ops/s
# Warmup Iteration  11: 12283580.642 ops/s
# Warmup Iteration  12: 12290492.794 ops/s
# Warmup Iteration  13: 12320121.809 ops/s
# Warmup Iteration  14: 12269856.077 ops/s
# Warmup Iteration  15: 12290760.237 ops/s
# Warmup Iteration  16: 12292001.421 ops/s
# Warmup Iteration  17: 12319440.445 ops/s
# Warmup Iteration  18: 12327162.774 ops/s
# Warmup Iteration  19: 12299256.281 ops/s
# Warmup Iteration  20: 12275075.947 ops/s
# Warmup Iteration  21: 12332176.050 ops/s
# Warmup Iteration  22: 12343221.812 ops/s
# Warmup Iteration  23: 12349400.268 ops/s
# Warmup Iteration  24: 12319555.581 ops/s
# Warmup Iteration  25: 12322157.433 ops/s
# Warmup Iteration  26: 12294452.039 ops/s
# Warmup Iteration  27: 12327852.061 ops/s
# Warmup Iteration  28: 12310455.400 ops/s
# Warmup Iteration  29: 12276800.481 ops/s
# Warmup Iteration  30: 12339411.247 ops/s
Iteration   1: 12331684.230 ops/s
Iteration   2: 12331889.217 ops/s
Iteration   3: 12337253.975 ops/s
Iteration   4: 12279395.626 ops/s
Iteration   5: 12309501.646 ops/s
Iteration   6: 12318502.638 ops/s
Iteration   7: 12305033.779 ops/s
Iteration   8: 12304575.575 ops/s
Iteration   9: 12311385.856 ops/s
Iteration  10: 12332124.564 ops/s
Iteration  11: 12318276.061 ops/s
Iteration  12: 12325384.526 ops/s
Iteration  13: 12321992.857 ops/s
Iteration  14: 12235311.498 ops/s
Iteration  15: 12344216.282 ops/s
Iteration  16: 12311273.004 ops/s
Iteration  17: 12329215.670 ops/s
Iteration  18: 12293967.828 ops/s
Iteration  19: 12294802.192 ops/s
Iteration  20: 12303632.577 ops/s
Iteration  21: 12320984.563 ops/s
Iteration  22: 12310922.247 ops/s
Iteration  23: 12295534.604 ops/s
Iteration  24: 12281713.853 ops/s
Iteration  25: 12330744.250 ops/s
Iteration  26: 12339445.064 ops/s
Iteration  27: 12328145.328 ops/s
Iteration  28: 12264503.424 ops/s
Iteration  29: 12318523.598 ops/s
Iteration  30: 12253466.143 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndex":
  12309446.756 ±(99.9%) 17294.243 ops/s [Average]
  (min, avg, max) = (12235311.498, 12309446.756, 12344216.282), stdev = 25885.210
  CI (99.9%): [12292152.513, 12326740.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  12309446.756 ± 17294.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4377977.464 ops/s
# Warmup Iteration   2: 9403054.657 ops/s
# Warmup Iteration   3: 8570337.421 ops/s
# Warmup Iteration   4: 9720328.530 ops/s
# Warmup Iteration   5: 9763524.135 ops/s
# Warmup Iteration   6: 9774675.649 ops/s
# Warmup Iteration   7: 9785631.832 ops/s
# Warmup Iteration   8: 9735106.194 ops/s
# Warmup Iteration   9: 9738964.518 ops/s
# Warmup Iteration  10: 9743939.112 ops/s
# Warmup Iteration  11: 9735883.442 ops/s
# Warmup Iteration  12: 9749634.350 ops/s
# Warmup Iteration  13: 9747327.927 ops/s
# Warmup Iteration  14: 9766259.002 ops/s
# Warmup Iteration  15: 9733609.536 ops/s
# Warmup Iteration  16: 9771665.661 ops/s
# Warmup Iteration  17: 9785481.410 ops/s
# Warmup Iteration  18: 9725251.144 ops/s
# Warmup Iteration  19: 9743051.388 ops/s
# Warmup Iteration  20: 9767584.009 ops/s
# Warmup Iteration  21: 9740152.608 ops/s
# Warmup Iteration  22: 9750535.939 ops/s
# Warmup Iteration  23: 9768118.743 ops/s
# Warmup Iteration  24: 9775598.930 ops/s
# Warmup Iteration  25: 9715844.756 ops/s
# Warmup Iteration  26: 9770484.073 ops/s
# Warmup Iteration  27: 9755599.489 ops/s
# Warmup Iteration  28: 9761458.268 ops/s
# Warmup Iteration  29: 9766616.658 ops/s
# Warmup Iteration  30: 9755671.269 ops/s
Iteration   1: 9805249.196 ops/s
Iteration   2: 9816655.538 ops/s
Iteration   3: 9802761.758 ops/s
Iteration   4: 9777405.306 ops/s
Iteration   5: 9757364.969 ops/s
Iteration   6: 9747775.903 ops/s
Iteration   7: 9808454.561 ops/s
Iteration   8: 9767505.646 ops/s
Iteration   9: 9763888.513 ops/s
Iteration  10: 9727296.457 ops/s
Iteration  11: 9741477.414 ops/s
Iteration  12: 9788430.580 ops/s
Iteration  13: 9747635.342 ops/s
Iteration  14: 9807899.691 ops/s
Iteration  15: 9790684.194 ops/s
Iteration  16: 9758941.349 ops/s
Iteration  17: 9791764.327 ops/s
Iteration  18: 9750123.585 ops/s
Iteration  19: 9748763.983 ops/s
Iteration  20: 9772250.502 ops/s
Iteration  21: 9754903.730 ops/s
Iteration  22: 9739117.791 ops/s
Iteration  23: 9806434.761 ops/s
Iteration  24: 9781306.289 ops/s
Iteration  25: 9784552.534 ops/s
Iteration  26: 9765489.885 ops/s
Iteration  27: 9774010.861 ops/s
Iteration  28: 9738989.980 ops/s
Iteration  29: 9725224.555 ops/s
Iteration  30: 9787202.008 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  9770985.374 ±(99.9%) 17382.440 ops/s [Average]
  (min, avg, max) = (9725224.555, 9770985.374, 9816655.538), stdev = 26017.220
  CI (99.9%): [9753602.933, 9788367.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  9770985.374 ± 17382.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5228664.555 ops/s
# Warmup Iteration   2: 11751618.379 ops/s
# Warmup Iteration   3: 10034057.550 ops/s
# Warmup Iteration   4: 11884138.554 ops/s
# Warmup Iteration   5: 11921244.487 ops/s
# Warmup Iteration   6: 11930619.530 ops/s
# Warmup Iteration   7: 11901147.379 ops/s
# Warmup Iteration   8: 11890190.615 ops/s
# Warmup Iteration   9: 11889264.356 ops/s
# Warmup Iteration  10: 11930334.142 ops/s
# Warmup Iteration  11: 11886370.764 ops/s
# Warmup Iteration  12: 11931420.831 ops/s
# Warmup Iteration  13: 11933782.786 ops/s
# Warmup Iteration  14: 11936998.258 ops/s
# Warmup Iteration  15: 11926433.156 ops/s
# Warmup Iteration  16: 11907744.255 ops/s
# Warmup Iteration  17: 11942297.899 ops/s
# Warmup Iteration  18: 11888346.945 ops/s
# Warmup Iteration  19: 11912096.472 ops/s
# Warmup Iteration  20: 11894199.398 ops/s
# Warmup Iteration  21: 11909993.401 ops/s
# Warmup Iteration  22: 11975471.000 ops/s
# Warmup Iteration  23: 11925734.241 ops/s
# Warmup Iteration  24: 11928291.960 ops/s
# Warmup Iteration  25: 11916556.822 ops/s
# Warmup Iteration  26: 11936316.092 ops/s
# Warmup Iteration  27: 11947019.310 ops/s
# Warmup Iteration  28: 11866859.138 ops/s
# Warmup Iteration  29: 11936308.356 ops/s
# Warmup Iteration  30: 11923124.077 ops/s
Iteration   1: 11908667.664 ops/s
Iteration   2: 11925247.572 ops/s
Iteration   3: 11895833.509 ops/s
Iteration   4: 11943840.122 ops/s
Iteration   5: 11914113.820 ops/s
Iteration   6: 11939139.613 ops/s
Iteration   7: 11885581.125 ops/s
Iteration   8: 11867987.493 ops/s
Iteration   9: 11920946.603 ops/s
Iteration  10: 11901607.846 ops/s
Iteration  11: 11900613.111 ops/s
Iteration  12: 11866653.791 ops/s
Iteration  13: 11866270.902 ops/s
Iteration  14: 11960014.088 ops/s
Iteration  15: 11898566.557 ops/s
Iteration  16: 11889341.498 ops/s
Iteration  17: 11897404.198 ops/s
Iteration  18: 11890003.321 ops/s
Iteration  19: 11937494.510 ops/s
Iteration  20: 11911230.519 ops/s
Iteration  21: 11937637.235 ops/s
Iteration  22: 11853525.238 ops/s
Iteration  23: 11863342.944 ops/s
Iteration  24: 11950353.003 ops/s
Iteration  25: 11873672.719 ops/s
Iteration  26: 11917783.264 ops/s
Iteration  27: 11906109.555 ops/s
Iteration  28: 11940986.024 ops/s
Iteration  29: 11950134.881 ops/s
Iteration  30: 11926011.590 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_selectWith_target":
  11908003.810 ±(99.9%) 19660.943 ops/s [Average]
  (min, avg, max) = (11853525.238, 11908003.810, 11960014.088), stdev = 29427.576
  CI (99.9%): [11888342.867, 11927664.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_selectWith_target  thrpt   30  11908003.810 ± 19660.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8121430.035 ops/s
# Warmup Iteration   2: 17469484.127 ops/s
# Warmup Iteration   3: 14882076.606 ops/s
# Warmup Iteration   4: 17516539.875 ops/s
# Warmup Iteration   5: 17458611.358 ops/s
# Warmup Iteration   6: 17507149.680 ops/s
# Warmup Iteration   7: 17432867.107 ops/s
# Warmup Iteration   8: 17445546.351 ops/s
# Warmup Iteration   9: 17517794.778 ops/s
# Warmup Iteration  10: 17432985.405 ops/s
# Warmup Iteration  11: 17521673.116 ops/s
# Warmup Iteration  12: 17503951.363 ops/s
# Warmup Iteration  13: 17540129.366 ops/s
# Warmup Iteration  14: 17542153.272 ops/s
# Warmup Iteration  15: 17509671.034 ops/s
# Warmup Iteration  16: 17458377.385 ops/s
# Warmup Iteration  17: 17567742.716 ops/s
# Warmup Iteration  18: 17550672.060 ops/s
# Warmup Iteration  19: 17330786.001 ops/s
# Warmup Iteration  20: 17502958.240 ops/s
# Warmup Iteration  21: 17370812.901 ops/s
# Warmup Iteration  22: 17511486.084 ops/s
# Warmup Iteration  23: 17530385.650 ops/s
# Warmup Iteration  24: 17548724.680 ops/s
# Warmup Iteration  25: 17490903.473 ops/s
# Warmup Iteration  26: 17496831.585 ops/s
# Warmup Iteration  27: 17523990.316 ops/s
# Warmup Iteration  28: 17532451.376 ops/s
# Warmup Iteration  29: 17586645.001 ops/s
# Warmup Iteration  30: 17548908.752 ops/s
Iteration   1: 17452195.195 ops/s
Iteration   2: 17557695.384 ops/s
Iteration   3: 17533763.525 ops/s
Iteration   4: 17573037.894 ops/s
Iteration   5: 17541780.282 ops/s
Iteration   6: 17548027.766 ops/s
Iteration   7: 17523724.344 ops/s
Iteration   8: 16367163.069 ops/s
Iteration   9: 14999541.975 ops/s
Iteration  10: 17375783.957 ops/s
Iteration  11: 17574103.439 ops/s
Iteration  12: 17464304.697 ops/s
Iteration  13: 17595976.878 ops/s
Iteration  14: 17558668.739 ops/s
Iteration  15: 17496206.966 ops/s
Iteration  16: 17481195.823 ops/s
Iteration  17: 17515041.883 ops/s
Iteration  18: 17316541.691 ops/s
Iteration  19: 17520095.217 ops/s
Iteration  20: 17481732.285 ops/s
Iteration  21: 17514853.221 ops/s
Iteration  22: 17524827.607 ops/s
Iteration  23: 17599216.123 ops/s
Iteration  24: 17563665.745 ops/s
Iteration  25: 17528485.652 ops/s
Iteration  26: 17548569.940 ops/s
Iteration  27: 17454866.473 ops/s
Iteration  28: 17461587.583 ops/s
Iteration  29: 17310043.658 ops/s
Iteration  30: 17602534.358 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_select_target":
  17386174.379 ±(99.9%) 335240.287 ops/s [Average]
  (min, avg, max) = (14999541.975, 17386174.379, 17602534.358), stdev = 501771.918
  CI (99.9%): [17050934.092, 17721414.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_select_target  thrpt   30  17386174.379 ± 335240.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 755929.230 ops/s
# Warmup Iteration   2: 789396.749 ops/s
# Warmup Iteration   3: 1015126.311 ops/s
# Warmup Iteration   4: 1016072.654 ops/s
# Warmup Iteration   5: 1015439.609 ops/s
# Warmup Iteration   6: 1014981.652 ops/s
# Warmup Iteration   7: 1015923.760 ops/s
# Warmup Iteration   8: 1015844.610 ops/s
# Warmup Iteration   9: 1017264.038 ops/s
# Warmup Iteration  10: 1011932.443 ops/s
# Warmup Iteration  11: 1014628.139 ops/s
# Warmup Iteration  12: 857984.260 ops/s
# Warmup Iteration  13: 1013290.667 ops/s
# Warmup Iteration  14: 1016420.673 ops/s
# Warmup Iteration  15: 1008867.636 ops/s
# Warmup Iteration  16: 1016356.462 ops/s
# Warmup Iteration  17: 1085459.586 ops/s
# Warmup Iteration  18: 1080785.605 ops/s
# Warmup Iteration  19: 1079604.436 ops/s
# Warmup Iteration  20: 1083488.788 ops/s
# Warmup Iteration  21: 1080764.440 ops/s
# Warmup Iteration  22: 1082633.554 ops/s
# Warmup Iteration  23: 1081687.030 ops/s
# Warmup Iteration  24: 1078174.736 ops/s
# Warmup Iteration  25: 1076436.284 ops/s
# Warmup Iteration  26: 1080431.005 ops/s
# Warmup Iteration  27: 1084816.325 ops/s
# Warmup Iteration  28: 1079316.469 ops/s
# Warmup Iteration  29: 1085067.467 ops/s
# Warmup Iteration  30: 1081329.806 ops/s
Iteration   1: 1083726.552 ops/s
Iteration   2: 1084527.623 ops/s
Iteration   3: 1080808.497 ops/s
Iteration   4: 1081579.108 ops/s
Iteration   5: 1081811.444 ops/s
Iteration   6: 1081913.419 ops/s
Iteration   7: 1081687.130 ops/s
Iteration   8: 1083130.259 ops/s
Iteration   9: 1083561.402 ops/s
Iteration  10: 1077246.535 ops/s
Iteration  11: 1080866.290 ops/s
Iteration  12: 1076562.111 ops/s
Iteration  13: 1075016.280 ops/s
Iteration  14: 1081039.874 ops/s
Iteration  15: 1081427.922 ops/s
Iteration  16: 1082606.012 ops/s
Iteration  17: 1081037.644 ops/s
Iteration  18: 1076522.124 ops/s
Iteration  19: 1080839.019 ops/s
Iteration  20: 1083024.089 ops/s
Iteration  21: 1081216.885 ops/s
Iteration  22: 1083039.060 ops/s
Iteration  23: 1082511.644 ops/s
Iteration  24: 1083341.590 ops/s
Iteration  25: 1085328.129 ops/s
Iteration  26: 1077283.176 ops/s
Iteration  27: 1076632.247 ops/s
Iteration  28: 1077421.893 ops/s
Iteration  29: 1082915.144 ops/s
Iteration  30: 1079203.810 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_set":
  1080927.564 ±(99.9%) 1810.662 ops/s [Average]
  (min, avg, max) = (1075016.280, 1080927.564, 1085328.129), stdev = 2710.114
  CI (99.9%): [1079116.901, 1082738.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_set  thrpt   30  1080927.564 ± 1810.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750986.393 ops/s
# Warmup Iteration   2: 778401.548 ops/s
# Warmup Iteration   3: 1011881.747 ops/s
# Warmup Iteration   4: 1010230.008 ops/s
# Warmup Iteration   5: 1006321.435 ops/s
# Warmup Iteration   6: 1004571.351 ops/s
# Warmup Iteration   7: 1007741.852 ops/s
# Warmup Iteration   8: 1012794.361 ops/s
# Warmup Iteration   9: 1010225.012 ops/s
# Warmup Iteration  10: 1008015.686 ops/s
# Warmup Iteration  11: 1014374.346 ops/s
# Warmup Iteration  12: 858272.732 ops/s
# Warmup Iteration  13: 1014648.633 ops/s
# Warmup Iteration  14: 1012841.970 ops/s
# Warmup Iteration  15: 1008948.926 ops/s
# Warmup Iteration  16: 1004047.967 ops/s
# Warmup Iteration  17: 1075182.599 ops/s
# Warmup Iteration  18: 1072097.597 ops/s
# Warmup Iteration  19: 1069848.461 ops/s
# Warmup Iteration  20: 1069802.062 ops/s
# Warmup Iteration  21: 1073031.499 ops/s
# Warmup Iteration  22: 1077147.521 ops/s
# Warmup Iteration  23: 1076016.201 ops/s
# Warmup Iteration  24: 1071120.927 ops/s
# Warmup Iteration  25: 1077137.544 ops/s
# Warmup Iteration  26: 1074391.721 ops/s
# Warmup Iteration  27: 1078518.470 ops/s
# Warmup Iteration  28: 1078873.233 ops/s
# Warmup Iteration  29: 1078418.066 ops/s
# Warmup Iteration  30: 1078057.007 ops/s
Iteration   1: 1076873.336 ops/s
Iteration   2: 1076812.179 ops/s
Iteration   3: 1074789.974 ops/s
Iteration   4: 1077141.577 ops/s
Iteration   5: 1072502.059 ops/s
Iteration   6: 1076877.967 ops/s
Iteration   7: 1075556.164 ops/s
Iteration   8: 1075827.773 ops/s
Iteration   9: 1069863.328 ops/s
Iteration  10: 1076773.867 ops/s
Iteration  11: 1074844.125 ops/s
Iteration  12: 1074991.874 ops/s
Iteration  13: 1077465.379 ops/s
Iteration  14: 1076759.312 ops/s
Iteration  15: 1072079.989 ops/s
Iteration  16: 1078051.208 ops/s
Iteration  17: 1074260.918 ops/s
Iteration  18: 1079798.953 ops/s
Iteration  19: 1075862.793 ops/s
Iteration  20: 1074638.781 ops/s
Iteration  21: 1076612.360 ops/s
Iteration  22: 1074452.648 ops/s
Iteration  23: 1074157.161 ops/s
Iteration  24: 1075054.132 ops/s
Iteration  25: 1075542.529 ops/s
Iteration  26: 1075358.717 ops/s
Iteration  27: 1077691.102 ops/s
Iteration  28: 1076671.525 ops/s
Iteration  29: 1076789.285 ops/s
Iteration  30: 1076059.432 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sort":
  1075672.015 ±(99.9%) 1289.621 ops/s [Average]
  (min, avg, max) = (1069863.328, 1075672.015, 1079798.953), stdev = 1930.243
  CI (99.9%): [1074382.394, 1076961.635] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sort  thrpt   30  1075672.015 ± 1289.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 397186.375 ops/s
# Warmup Iteration   2: 917676.307 ops/s
# Warmup Iteration   3: 1029548.531 ops/s
# Warmup Iteration   4: 1029622.557 ops/s
# Warmup Iteration   5: 860417.448 ops/s
# Warmup Iteration   6: 1038392.136 ops/s
# Warmup Iteration   7: 1039595.850 ops/s
# Warmup Iteration   8: 1037125.381 ops/s
# Warmup Iteration   9: 1038635.342 ops/s
# Warmup Iteration  10: 1035089.095 ops/s
# Warmup Iteration  11: 1036833.984 ops/s
# Warmup Iteration  12: 1028733.769 ops/s
# Warmup Iteration  13: 1037721.826 ops/s
# Warmup Iteration  14: 1038626.174 ops/s
# Warmup Iteration  15: 1037831.941 ops/s
# Warmup Iteration  16: 1038343.703 ops/s
# Warmup Iteration  17: 1039323.454 ops/s
# Warmup Iteration  18: 1039426.789 ops/s
# Warmup Iteration  19: 1040915.202 ops/s
# Warmup Iteration  20: 1042975.387 ops/s
# Warmup Iteration  21: 1040755.841 ops/s
# Warmup Iteration  22: 1043814.328 ops/s
# Warmup Iteration  23: 1041385.590 ops/s
# Warmup Iteration  24: 1042430.360 ops/s
# Warmup Iteration  25: 1041027.432 ops/s
# Warmup Iteration  26: 1042036.820 ops/s
# Warmup Iteration  27: 1042934.355 ops/s
# Warmup Iteration  28: 1038083.195 ops/s
# Warmup Iteration  29: 1041386.048 ops/s
# Warmup Iteration  30: 1042418.721 ops/s
Iteration   1: 1042900.898 ops/s
Iteration   2: 1038062.594 ops/s
Iteration   3: 1036688.524 ops/s
Iteration   4: 1042740.331 ops/s
Iteration   5: 1041615.582 ops/s
Iteration   6: 1039718.200 ops/s
Iteration   7: 1042735.316 ops/s
Iteration   8: 1042488.179 ops/s
Iteration   9: 1039804.287 ops/s
Iteration  10: 1041540.188 ops/s
Iteration  11: 1041500.287 ops/s
Iteration  12: 1039689.852 ops/s
Iteration  13: 1042123.821 ops/s
Iteration  14: 1041874.206 ops/s
Iteration  15: 1041496.459 ops/s
Iteration  16: 1038766.167 ops/s
Iteration  17: 1035042.352 ops/s
Iteration  18: 1044149.662 ops/s
Iteration  19: 1044448.996 ops/s
Iteration  20: 1033802.307 ops/s
Iteration  21: 1043395.656 ops/s
Iteration  22: 1042119.922 ops/s
Iteration  23: 1042587.152 ops/s
Iteration  24: 1040075.940 ops/s
Iteration  25: 1038897.979 ops/s
Iteration  26: 1039546.786 ops/s
Iteration  27: 1044512.322 ops/s
Iteration  28: 1043941.588 ops/s
Iteration  29: 1043182.710 ops/s
Iteration  30: 1039338.138 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_stream":
  1040959.547 ±(99.9%) 1783.000 ops/s [Average]
  (min, avg, max) = (1033802.307, 1040959.547, 1044512.322), stdev = 2668.711
  CI (99.9%): [1039176.547, 1042742.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_stream  thrpt   30  1040959.547 ± 1783.000  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20858038.827 ops/s
# Warmup Iteration   2: 41761762.008 ops/s
# Warmup Iteration   3: 37925189.136 ops/s
# Warmup Iteration   4: 43057217.255 ops/s
# Warmup Iteration   5: 42189602.320 ops/s
# Warmup Iteration   6: 43102917.657 ops/s
# Warmup Iteration   7: 42823460.667 ops/s
# Warmup Iteration   8: 43024011.604 ops/s
# Warmup Iteration   9: 43161400.582 ops/s
# Warmup Iteration  10: 43090876.285 ops/s
# Warmup Iteration  11: 42673155.753 ops/s
# Warmup Iteration  12: 43111399.263 ops/s
# Warmup Iteration  13: 43146317.774 ops/s
# Warmup Iteration  14: 42950099.605 ops/s
# Warmup Iteration  15: 43306690.764 ops/s
# Warmup Iteration  16: 43134199.424 ops/s
# Warmup Iteration  17: 42682527.108 ops/s
# Warmup Iteration  18: 43197119.906 ops/s
# Warmup Iteration  19: 43066385.943 ops/s
# Warmup Iteration  20: 43123594.323 ops/s
# Warmup Iteration  21: 43144219.149 ops/s
# Warmup Iteration  22: 42939986.468 ops/s
# Warmup Iteration  23: 43206025.306 ops/s
# Warmup Iteration  24: 43070541.403 ops/s
# Warmup Iteration  25: 43178821.013 ops/s
# Warmup Iteration  26: 43197289.147 ops/s
# Warmup Iteration  27: 43097683.178 ops/s
# Warmup Iteration  28: 43134525.329 ops/s
# Warmup Iteration  29: 43105975.218 ops/s
# Warmup Iteration  30: 43168625.490 ops/s
Iteration   1: 43136769.759 ops/s
Iteration   2: 43271803.037 ops/s
Iteration   3: 43262388.144 ops/s
Iteration   4: 42507853.507 ops/s
Iteration   5: 43349606.163 ops/s
Iteration   6: 43203696.570 ops/s
Iteration   7: 43075134.391 ops/s
Iteration   8: 43248761.432 ops/s
Iteration   9: 43140791.138 ops/s
Iteration  10: 43006917.409 ops/s
Iteration  11: 43289915.339 ops/s
Iteration  12: 42898309.907 ops/s
Iteration  13: 43277249.678 ops/s
Iteration  14: 42991607.474 ops/s
Iteration  15: 42850793.672 ops/s
Iteration  16: 43154930.374 ops/s
Iteration  17: 43186274.861 ops/s
Iteration  18: 43445014.367 ops/s
Iteration  19: 43295657.054 ops/s
Iteration  20: 42968913.353 ops/s
Iteration  21: 43112668.466 ops/s
Iteration  22: 42907136.450 ops/s
Iteration  23: 43111967.703 ops/s
Iteration  24: 42983532.866 ops/s
Iteration  25: 42891497.652 ops/s
Iteration  26: 43174069.477 ops/s
Iteration  27: 43244287.090 ops/s
Iteration  28: 43337835.391 ops/s
Iteration  29: 43263534.385 ops/s
Iteration  30: 43024991.247 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subList":
  43120463.612 ±(99.9%) 128825.228 ops/s [Average]
  (min, avg, max) = (42507853.507, 43120463.612, 43445014.367), stdev = 192819.550
  CI (99.9%): [42991638.385, 43249288.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_subList  thrpt   30  43120463.612 ± 128825.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651277.240 ops/s
# Warmup Iteration   2: 682705.441 ops/s
# Warmup Iteration   3: 793645.248 ops/s
# Warmup Iteration   4: 849207.968 ops/s
# Warmup Iteration   5: 852320.532 ops/s
# Warmup Iteration   6: 849751.842 ops/s
# Warmup Iteration   7: 849723.714 ops/s
# Warmup Iteration   8: 850273.733 ops/s
# Warmup Iteration   9: 838072.187 ops/s
# Warmup Iteration  10: 853686.852 ops/s
# Warmup Iteration  11: 854108.811 ops/s
# Warmup Iteration  12: 846787.903 ops/s
# Warmup Iteration  13: 852648.425 ops/s
# Warmup Iteration  14: 734826.842 ops/s
# Warmup Iteration  15: 837741.354 ops/s
# Warmup Iteration  16: 852962.558 ops/s
# Warmup Iteration  17: 898898.739 ops/s
# Warmup Iteration  18: 898223.482 ops/s
# Warmup Iteration  19: 898732.265 ops/s
# Warmup Iteration  20: 899966.386 ops/s
# Warmup Iteration  21: 900511.607 ops/s
# Warmup Iteration  22: 901154.245 ops/s
# Warmup Iteration  23: 898437.841 ops/s
# Warmup Iteration  24: 901840.359 ops/s
# Warmup Iteration  25: 902398.165 ops/s
# Warmup Iteration  26: 901975.184 ops/s
# Warmup Iteration  27: 895741.800 ops/s
# Warmup Iteration  28: 895139.236 ops/s
# Warmup Iteration  29: 902037.348 ops/s
# Warmup Iteration  30: 899455.925 ops/s
Iteration   1: 902012.156 ops/s
Iteration   2: 902603.001 ops/s
Iteration   3: 900755.438 ops/s
Iteration   4: 900615.936 ops/s
Iteration   5: 904148.936 ops/s
Iteration   6: 901210.676 ops/s
Iteration   7: 901345.310 ops/s
Iteration   8: 903194.031 ops/s
Iteration   9: 900730.901 ops/s
Iteration  10: 899238.378 ops/s
Iteration  11: 902679.667 ops/s
Iteration  12: 901916.414 ops/s
Iteration  13: 897216.140 ops/s
Iteration  14: 895520.602 ops/s
Iteration  15: 896526.782 ops/s
Iteration  16: 897538.884 ops/s
Iteration  17: 898406.694 ops/s
Iteration  18: 898342.513 ops/s
Iteration  19: 898778.711 ops/s
Iteration  20: 896728.194 ops/s
Iteration  21: 891780.056 ops/s
Iteration  22: 896398.959 ops/s
Iteration  23: 901732.963 ops/s
Iteration  24: 898108.263 ops/s
Iteration  25: 898111.314 ops/s
Iteration  26: 902548.283 ops/s
Iteration  27: 901733.173 ops/s
Iteration  28: 901982.470 ops/s
Iteration  29: 903147.627 ops/s
Iteration  30: 899953.857 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  899833.544 ±(99.9%) 1885.798 ops/s [Average]
  (min, avg, max) = (891780.056, 899833.544, 904148.936), stdev = 2822.573
  CI (99.9%): [897947.747, 901719.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  899833.544 ± 1885.798  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661557.350 ops/s
# Warmup Iteration   2: 691525.497 ops/s
# Warmup Iteration   3: 805067.851 ops/s
# Warmup Iteration   4: 871169.267 ops/s
# Warmup Iteration   5: 866502.899 ops/s
# Warmup Iteration   6: 871748.356 ops/s
# Warmup Iteration   7: 872894.410 ops/s
# Warmup Iteration   8: 871368.076 ops/s
# Warmup Iteration   9: 873598.074 ops/s
# Warmup Iteration  10: 869964.116 ops/s
# Warmup Iteration  11: 864577.030 ops/s
# Warmup Iteration  12: 868130.350 ops/s
# Warmup Iteration  13: 868985.476 ops/s
# Warmup Iteration  14: 781637.672 ops/s
# Warmup Iteration  15: 820327.134 ops/s
# Warmup Iteration  16: 869114.359 ops/s
# Warmup Iteration  17: 916533.334 ops/s
# Warmup Iteration  18: 920010.833 ops/s
# Warmup Iteration  19: 920725.386 ops/s
# Warmup Iteration  20: 918693.153 ops/s
# Warmup Iteration  21: 912161.901 ops/s
# Warmup Iteration  22: 912835.605 ops/s
# Warmup Iteration  23: 916872.347 ops/s
# Warmup Iteration  24: 915034.892 ops/s
# Warmup Iteration  25: 918221.441 ops/s
# Warmup Iteration  26: 920047.938 ops/s
# Warmup Iteration  27: 916536.937 ops/s
# Warmup Iteration  28: 919132.493 ops/s
# Warmup Iteration  29: 917422.740 ops/s
# Warmup Iteration  30: 917083.759 ops/s
Iteration   1: 915238.378 ops/s
Iteration   2: 914004.815 ops/s
Iteration   3: 915248.512 ops/s
Iteration   4: 914176.907 ops/s
Iteration   5: 915292.655 ops/s
Iteration   6: 917924.639 ops/s
Iteration   7: 915226.041 ops/s
Iteration   8: 917406.309 ops/s
Iteration   9: 914577.803 ops/s
Iteration  10: 911582.503 ops/s
Iteration  11: 917901.435 ops/s
Iteration  12: 917563.461 ops/s
Iteration  13: 921280.245 ops/s
Iteration  14: 919547.666 ops/s
Iteration  15: 918063.545 ops/s
Iteration  16: 918279.877 ops/s
Iteration  17: 916620.010 ops/s
Iteration  18: 919847.617 ops/s
Iteration  19: 920509.930 ops/s
Iteration  20: 920146.773 ops/s
Iteration  21: 915765.208 ops/s
Iteration  22: 917753.060 ops/s
Iteration  23: 912277.624 ops/s
Iteration  24: 915120.997 ops/s
Iteration  25: 921510.809 ops/s
Iteration  26: 917462.645 ops/s
Iteration  27: 917906.017 ops/s
Iteration  28: 918149.382 ops/s
Iteration  29: 919506.495 ops/s
Iteration  30: 919335.567 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListFromNegative":
  917174.231 ±(99.9%) 1692.251 ops/s [Average]
  (min, avg, max) = (911582.503, 917174.231, 921510.809), stdev = 2532.882
  CI (99.9%): [915481.980, 918866.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  917174.231 ± 1692.251  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 660933.259 ops/s
# Warmup Iteration   2: 686937.819 ops/s
# Warmup Iteration   3: 796557.901 ops/s
# Warmup Iteration   4: 867210.561 ops/s
# Warmup Iteration   5: 861505.010 ops/s
# Warmup Iteration   6: 862283.558 ops/s
# Warmup Iteration   7: 859380.106 ops/s
# Warmup Iteration   8: 864752.330 ops/s
# Warmup Iteration   9: 865972.528 ops/s
# Warmup Iteration  10: 864057.038 ops/s
# Warmup Iteration  11: 866432.685 ops/s
# Warmup Iteration  12: 865511.401 ops/s
# Warmup Iteration  13: 864029.276 ops/s
# Warmup Iteration  14: 793314.687 ops/s
# Warmup Iteration  15: 796045.182 ops/s
# Warmup Iteration  16: 866665.214 ops/s
# Warmup Iteration  17: 907244.619 ops/s
# Warmup Iteration  18: 910982.325 ops/s
# Warmup Iteration  19: 912889.166 ops/s
# Warmup Iteration  20: 910668.955 ops/s
# Warmup Iteration  21: 912141.720 ops/s
# Warmup Iteration  22: 908076.058 ops/s
# Warmup Iteration  23: 908991.094 ops/s
# Warmup Iteration  24: 908925.699 ops/s
# Warmup Iteration  25: 902317.421 ops/s
# Warmup Iteration  26: 911215.866 ops/s
# Warmup Iteration  27: 911426.254 ops/s
# Warmup Iteration  28: 911859.958 ops/s
# Warmup Iteration  29: 907428.948 ops/s
# Warmup Iteration  30: 910861.171 ops/s
Iteration   1: 910461.878 ops/s
Iteration   2: 914324.602 ops/s
Iteration   3: 910336.833 ops/s
Iteration   4: 910043.309 ops/s
Iteration   5: 909205.025 ops/s
Iteration   6: 911186.613 ops/s
Iteration   7: 914483.124 ops/s
Iteration   8: 910821.982 ops/s
Iteration   9: 896480.826 ops/s
Iteration  10: 912788.620 ops/s
Iteration  11: 910751.440 ops/s
Iteration  12: 909656.480 ops/s
Iteration  13: 908035.718 ops/s
Iteration  14: 911536.924 ops/s
Iteration  15: 911190.037 ops/s
Iteration  16: 910366.790 ops/s
Iteration  17: 909802.963 ops/s
Iteration  18: 911866.209 ops/s
Iteration  19: 910700.823 ops/s
Iteration  20: 906653.673 ops/s
Iteration  21: 911375.178 ops/s
Iteration  22: 910699.986 ops/s
Iteration  23: 908024.533 ops/s
Iteration  24: 909314.111 ops/s
Iteration  25: 911295.973 ops/s
Iteration  26: 912368.226 ops/s
Iteration  27: 908604.846 ops/s
Iteration  28: 904953.699 ops/s
Iteration  29: 911613.905 ops/s
Iteration  30: 910565.287 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_subListToGreaterThanSize":
  909983.654 ±(99.9%) 2150.394 ops/s [Average]
  (min, avg, max) = (896480.826, 909983.654, 914483.124), stdev = 3218.609
  CI (99.9%): [907833.260, 912134.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  909983.654 ± 2150.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 980052.188 ops/s
# Warmup Iteration   2: 1782850.900 ops/s
# Warmup Iteration   3: 2066648.298 ops/s
# Warmup Iteration   4: 2074755.827 ops/s
# Warmup Iteration   5: 2082189.851 ops/s
# Warmup Iteration   6: 1710798.483 ops/s
# Warmup Iteration   7: 2083703.882 ops/s
# Warmup Iteration   8: 2073116.458 ops/s
# Warmup Iteration   9: 2075772.421 ops/s
# Warmup Iteration  10: 2075576.099 ops/s
# Warmup Iteration  11: 2076314.019 ops/s
# Warmup Iteration  12: 2080298.070 ops/s
# Warmup Iteration  13: 2082301.551 ops/s
# Warmup Iteration  14: 2081889.150 ops/s
# Warmup Iteration  15: 2083743.582 ops/s
# Warmup Iteration  16: 2082107.050 ops/s
# Warmup Iteration  17: 2083516.777 ops/s
# Warmup Iteration  18: 2082296.441 ops/s
# Warmup Iteration  19: 2082765.661 ops/s
# Warmup Iteration  20: 2080461.564 ops/s
# Warmup Iteration  21: 2075621.233 ops/s
# Warmup Iteration  22: 2072626.246 ops/s
# Warmup Iteration  23: 2081057.680 ops/s
# Warmup Iteration  24: 2080165.049 ops/s
# Warmup Iteration  25: 2073243.864 ops/s
# Warmup Iteration  26: 2075009.321 ops/s
# Warmup Iteration  27: 2066943.378 ops/s
# Warmup Iteration  28: 2067570.542 ops/s
# Warmup Iteration  29: 2082082.275 ops/s
# Warmup Iteration  30: 2085193.423 ops/s
Iteration   1: 2074091.966 ops/s
Iteration   2: 2078871.027 ops/s
Iteration   3: 2082192.351 ops/s
Iteration   4: 2084214.140 ops/s
Iteration   5: 2082912.844 ops/s
Iteration   6: 2078080.430 ops/s
Iteration   7: 2083693.238 ops/s
Iteration   8: 2083079.818 ops/s
Iteration   9: 2085441.391 ops/s
Iteration  10: 2076908.685 ops/s
Iteration  11: 2076237.691 ops/s
Iteration  12: 2085143.510 ops/s
Iteration  13: 2079694.660 ops/s
Iteration  14: 2087216.163 ops/s
Iteration  15: 2082833.293 ops/s
Iteration  16: 2086184.361 ops/s
Iteration  17: 2078328.665 ops/s
Iteration  18: 2081740.027 ops/s
Iteration  19: 2086264.091 ops/s
Iteration  20: 2079273.673 ops/s
Iteration  21: 2075080.022 ops/s
Iteration  22: 2084938.559 ops/s
Iteration  23: 2076932.484 ops/s
Iteration  24: 2083839.290 ops/s
Iteration  25: 2083502.642 ops/s
Iteration  26: 2080807.265 ops/s
Iteration  27: 2086277.342 ops/s
Iteration  28: 2082242.819 ops/s
Iteration  29: 2075809.246 ops/s
Iteration  30: 2082999.164 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDouble":
  2081494.362 ±(99.9%) 2504.486 ops/s [Average]
  (min, avg, max) = (2074091.966, 2081494.362, 2087216.163), stdev = 3748.597
  CI (99.9%): [2078989.876, 2083998.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2081494.362 ± 2504.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58.691 ops/s
# Warmup Iteration   2: 71.285 ops/s
# Warmup Iteration   3: 98.808 ops/s
# Warmup Iteration   4: 97.045 ops/s
# Warmup Iteration   5: 97.704 ops/s
# Warmup Iteration   6: 97.475 ops/s
# Warmup Iteration   7: 98.374 ops/s
# Warmup Iteration   8: 98.365 ops/s
# Warmup Iteration   9: 95.288 ops/s
# Warmup Iteration  10: 88.207 ops/s
# Warmup Iteration  11: 101.902 ops/s
# Warmup Iteration  12: 99.572 ops/s
# Warmup Iteration  13: 99.818 ops/s
# Warmup Iteration  14: 99.969 ops/s
# Warmup Iteration  15: 100.888 ops/s
# Warmup Iteration  16: 99.238 ops/s
# Warmup Iteration  17: 99.257 ops/s
# Warmup Iteration  18: 99.051 ops/s
# Warmup Iteration  19: 99.841 ops/s
# Warmup Iteration  20: 99.596 ops/s
# Warmup Iteration  21: 98.396 ops/s
# Warmup Iteration  22: 100.726 ops/s
# Warmup Iteration  23: 100.200 ops/s
# Warmup Iteration  24: 99.052 ops/s
# Warmup Iteration  25: 98.663 ops/s
# Warmup Iteration  26: 98.208 ops/s
# Warmup Iteration  27: 99.443 ops/s
# Warmup Iteration  28: 97.794 ops/s
# Warmup Iteration  29: 98.856 ops/s
# Warmup Iteration  30: 100.589 ops/s
Iteration   1: 101.398 ops/s
Iteration   2: 99.142 ops/s
Iteration   3: 98.044 ops/s
Iteration   4: 101.209 ops/s
Iteration   5: 100.925 ops/s
Iteration   6: 98.161 ops/s
Iteration   7: 102.175 ops/s
Iteration   8: 102.270 ops/s
Iteration   9: 99.519 ops/s
Iteration  10: 100.649 ops/s
Iteration  11: 99.140 ops/s
Iteration  12: 98.772 ops/s
Iteration  13: 94.961 ops/s
Iteration  14: 99.565 ops/s
Iteration  15: 100.212 ops/s
Iteration  16: 98.012 ops/s
Iteration  17: 96.734 ops/s
Iteration  18: 99.156 ops/s
Iteration  19: 97.954 ops/s
Iteration  20: 99.829 ops/s
Iteration  21: 98.642 ops/s
Iteration  22: 98.849 ops/s
Iteration  23: 98.329 ops/s
Iteration  24: 99.074 ops/s
Iteration  25: 98.572 ops/s
Iteration  26: 100.401 ops/s
Iteration  27: 98.563 ops/s
Iteration  28: 97.311 ops/s
Iteration  29: 100.667 ops/s
Iteration  30: 101.237 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  99.316 ±(99.9%) 1.085 ops/s [Average]
  (min, avg, max) = (94.961, 99.316, 102.270), stdev = 1.623
  CI (99.9%): [98.231, 100.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt   Score   Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  99.316 ± 1.085  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 982804.117 ops/s
# Warmup Iteration   2: 1744118.323 ops/s
# Warmup Iteration   3: 2039777.442 ops/s
# Warmup Iteration   4: 2047800.273 ops/s
# Warmup Iteration   5: 2047676.654 ops/s
# Warmup Iteration   6: 1678993.045 ops/s
# Warmup Iteration   7: 2051010.489 ops/s
# Warmup Iteration   8: 2048796.322 ops/s
# Warmup Iteration   9: 2042085.466 ops/s
# Warmup Iteration  10: 2052073.119 ops/s
# Warmup Iteration  11: 2049357.787 ops/s
# Warmup Iteration  12: 2048487.587 ops/s
# Warmup Iteration  13: 2046021.602 ops/s
# Warmup Iteration  14: 2045415.873 ops/s
# Warmup Iteration  15: 2047578.376 ops/s
# Warmup Iteration  16: 2042553.772 ops/s
# Warmup Iteration  17: 2045802.581 ops/s
# Warmup Iteration  18: 2041809.827 ops/s
# Warmup Iteration  19: 2050318.848 ops/s
# Warmup Iteration  20: 2046755.194 ops/s
# Warmup Iteration  21: 2045420.415 ops/s
# Warmup Iteration  22: 2045460.910 ops/s
# Warmup Iteration  23: 2051874.685 ops/s
# Warmup Iteration  24: 2044889.069 ops/s
# Warmup Iteration  25: 2045568.174 ops/s
# Warmup Iteration  26: 2042718.152 ops/s
# Warmup Iteration  27: 2044517.111 ops/s
# Warmup Iteration  28: 2041546.763 ops/s
# Warmup Iteration  29: 2049028.415 ops/s
# Warmup Iteration  30: 2048818.562 ops/s
Iteration   1: 2051298.487 ops/s
Iteration   2: 2046846.719 ops/s
Iteration   3: 2036628.968 ops/s
Iteration   4: 2047345.172 ops/s
Iteration   5: 2048653.417 ops/s
Iteration   6: 2045152.217 ops/s
Iteration   7: 2047240.094 ops/s
Iteration   8: 2049924.558 ops/s
Iteration   9: 2033293.220 ops/s
Iteration  10: 2039147.416 ops/s
Iteration  11: 2044876.184 ops/s
Iteration  12: 2045493.094 ops/s
Iteration  13: 2048027.885 ops/s
Iteration  14: 2038132.567 ops/s
Iteration  15: 2037356.410 ops/s
Iteration  16: 2042780.862 ops/s
Iteration  17: 2041992.287 ops/s
Iteration  18: 2050703.321 ops/s
Iteration  19: 2048246.816 ops/s
Iteration  20: 2048525.992 ops/s
Iteration  21: 2043035.221 ops/s
Iteration  22: 2046116.213 ops/s
Iteration  23: 2047676.933 ops/s
Iteration  24: 2045350.233 ops/s
Iteration  25: 2041513.531 ops/s
Iteration  26: 2036618.279 ops/s
Iteration  27: 2051992.763 ops/s
Iteration  28: 2046709.133 ops/s
Iteration  29: 2048810.795 ops/s
Iteration  30: 2051465.230 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloat":
  2045031.801 ±(99.9%) 3329.019 ops/s [Average]
  (min, avg, max) = (2033293.220, 2045031.801, 2051992.763), stdev = 4982.719
  CI (99.9%): [2041702.782, 2048360.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2045031.801 ± 3329.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.920 ops/s
# Warmup Iteration   2: 72.150 ops/s
# Warmup Iteration   3: 99.240 ops/s
# Warmup Iteration   4: 99.453 ops/s
# Warmup Iteration   5: 98.245 ops/s
# Warmup Iteration   6: 98.680 ops/s
# Warmup Iteration   7: 99.162 ops/s
# Warmup Iteration   8: 99.128 ops/s
# Warmup Iteration   9: 92.270 ops/s
# Warmup Iteration  10: 90.734 ops/s
# Warmup Iteration  11: 100.681 ops/s
# Warmup Iteration  12: 99.499 ops/s
# Warmup Iteration  13: 99.616 ops/s
# Warmup Iteration  14: 101.036 ops/s
# Warmup Iteration  15: 96.062 ops/s
# Warmup Iteration  16: 99.587 ops/s
# Warmup Iteration  17: 98.663 ops/s
# Warmup Iteration  18: 100.347 ops/s
# Warmup Iteration  19: 99.351 ops/s
# Warmup Iteration  20: 99.294 ops/s
# Warmup Iteration  21: 98.693 ops/s
# Warmup Iteration  22: 98.330 ops/s
# Warmup Iteration  23: 99.723 ops/s
# Warmup Iteration  24: 99.188 ops/s
# Warmup Iteration  25: 100.499 ops/s
# Warmup Iteration  26: 99.277 ops/s
# Warmup Iteration  27: 97.665 ops/s
# Warmup Iteration  28: 99.308 ops/s
# Warmup Iteration  29: 98.979 ops/s
# Warmup Iteration  30: 99.704 ops/s
Iteration   1: 98.457 ops/s
Iteration   2: 99.457 ops/s
Iteration   3: 96.821 ops/s
Iteration   4: 99.354 ops/s
Iteration   5: 98.981 ops/s
Iteration   6: 97.088 ops/s
Iteration   7: 99.831 ops/s
Iteration   8: 101.355 ops/s
Iteration   9: 97.291 ops/s
Iteration  10: 96.596 ops/s
Iteration  11: 99.466 ops/s
Iteration  12: 99.084 ops/s
Iteration  13: 99.574 ops/s
Iteration  14: 100.613 ops/s
Iteration  15: 96.952 ops/s
Iteration  16: 97.299 ops/s
Iteration  17: 97.081 ops/s
Iteration  18: 96.663 ops/s
Iteration  19: 94.957 ops/s
Iteration  20: 99.489 ops/s
Iteration  21: 99.668 ops/s
Iteration  22: 97.155 ops/s
Iteration  23: 99.774 ops/s
Iteration  24: 100.290 ops/s
Iteration  25: 97.192 ops/s
Iteration  26: 97.639 ops/s
Iteration  27: 97.344 ops/s
Iteration  28: 96.197 ops/s
Iteration  29: 97.829 ops/s
Iteration  30: 98.144 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  98.255 ±(99.9%) 1.017 ops/s [Average]
  (min, avg, max) = (94.957, 98.255, 101.355), stdev = 1.522
  CI (99.9%): [97.238, 99.272] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  98.255 ± 1.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1357736.150 ops/s
# Warmup Iteration   2: 2636475.883 ops/s
# Warmup Iteration   3: 2984523.561 ops/s
# Warmup Iteration   4: 2972211.753 ops/s
# Warmup Iteration   5: 2464939.549 ops/s
# Warmup Iteration   6: 2975789.026 ops/s
# Warmup Iteration   7: 2990468.454 ops/s
# Warmup Iteration   8: 2993845.785 ops/s
# Warmup Iteration   9: 3000445.089 ops/s
# Warmup Iteration  10: 3003707.378 ops/s
# Warmup Iteration  11: 2982706.367 ops/s
# Warmup Iteration  12: 2979993.459 ops/s
# Warmup Iteration  13: 2983523.169 ops/s
# Warmup Iteration  14: 2987600.059 ops/s
# Warmup Iteration  15: 2977334.850 ops/s
# Warmup Iteration  16: 2986066.061 ops/s
# Warmup Iteration  17: 2976811.776 ops/s
# Warmup Iteration  18: 2984031.321 ops/s
# Warmup Iteration  19: 2974618.924 ops/s
# Warmup Iteration  20: 2987711.903 ops/s
# Warmup Iteration  21: 2981083.337 ops/s
# Warmup Iteration  22: 2979705.850 ops/s
# Warmup Iteration  23: 2970614.950 ops/s
# Warmup Iteration  24: 2999512.635 ops/s
# Warmup Iteration  25: 2992281.754 ops/s
# Warmup Iteration  26: 2995903.151 ops/s
# Warmup Iteration  27: 2994650.581 ops/s
# Warmup Iteration  28: 2998048.226 ops/s
# Warmup Iteration  29: 2982132.184 ops/s
# Warmup Iteration  30: 2976631.086 ops/s
Iteration   1: 2990891.178 ops/s
Iteration   2: 3009738.185 ops/s
Iteration   3: 3003123.146 ops/s
Iteration   4: 2986388.928 ops/s
Iteration   5: 2997463.069 ops/s
Iteration   6: 2979438.764 ops/s
Iteration   7: 2968052.630 ops/s
Iteration   8: 2985298.836 ops/s
Iteration   9: 2964849.872 ops/s
Iteration  10: 2985634.197 ops/s
Iteration  11: 2996861.409 ops/s
Iteration  12: 2995961.758 ops/s
Iteration  13: 2978286.217 ops/s
Iteration  14: 2986328.684 ops/s
Iteration  15: 2976137.883 ops/s
Iteration  16: 3003549.709 ops/s
Iteration  17: 2984981.205 ops/s
Iteration  18: 2981421.669 ops/s
Iteration  19: 2972204.594 ops/s
Iteration  20: 3001865.440 ops/s
Iteration  21: 2996438.514 ops/s
Iteration  22: 3010178.433 ops/s
Iteration  23: 2977051.347 ops/s
Iteration  24: 3007148.287 ops/s
Iteration  25: 2994665.232 ops/s
Iteration  26: 2973549.231 ops/s
Iteration  27: 2991623.191 ops/s
Iteration  28: 2988620.660 ops/s
Iteration  29: 2974764.145 ops/s
Iteration  30: 2976070.599 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByInt":
  2987952.900 ±(99.9%) 8388.231 ops/s [Average]
  (min, avg, max) = (2964849.872, 2987952.900, 3010178.433), stdev = 12555.111
  CI (99.9%): [2979564.669, 2996341.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByInt  thrpt   30  2987952.900 ± 8388.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1383519.490 ops/s
# Warmup Iteration   2: 2657374.511 ops/s
# Warmup Iteration   3: 2969872.928 ops/s
# Warmup Iteration   4: 2983793.653 ops/s
# Warmup Iteration   5: 2477976.347 ops/s
# Warmup Iteration   6: 2983481.255 ops/s
# Warmup Iteration   7: 2989640.328 ops/s
# Warmup Iteration   8: 2989518.186 ops/s
# Warmup Iteration   9: 2976723.965 ops/s
# Warmup Iteration  10: 2986478.419 ops/s
# Warmup Iteration  11: 2976932.016 ops/s
# Warmup Iteration  12: 2985800.925 ops/s
# Warmup Iteration  13: 2982699.228 ops/s
# Warmup Iteration  14: 2983979.893 ops/s
# Warmup Iteration  15: 2987831.761 ops/s
# Warmup Iteration  16: 2980982.746 ops/s
# Warmup Iteration  17: 3000856.112 ops/s
# Warmup Iteration  18: 3001721.903 ops/s
# Warmup Iteration  19: 3003704.694 ops/s
# Warmup Iteration  20: 3000747.069 ops/s
# Warmup Iteration  21: 3003893.562 ops/s
# Warmup Iteration  22: 2997686.971 ops/s
# Warmup Iteration  23: 2985450.909 ops/s
# Warmup Iteration  24: 2992938.354 ops/s
# Warmup Iteration  25: 2991164.519 ops/s
# Warmup Iteration  26: 3000749.267 ops/s
# Warmup Iteration  27: 2996734.996 ops/s
# Warmup Iteration  28: 3002054.742 ops/s
# Warmup Iteration  29: 3000188.936 ops/s
# Warmup Iteration  30: 2999685.604 ops/s
Iteration   1: 2995766.649 ops/s
Iteration   2: 2993153.081 ops/s
Iteration   3: 3000630.416 ops/s
Iteration   4: 2983432.250 ops/s
Iteration   5: 3009278.294 ops/s
Iteration   6: 2995908.393 ops/s
Iteration   7: 2991301.112 ops/s
Iteration   8: 2993223.282 ops/s
Iteration   9: 2986694.979 ops/s
Iteration  10: 2997956.474 ops/s
Iteration  11: 3002239.434 ops/s
Iteration  12: 2997887.393 ops/s
Iteration  13: 2998494.465 ops/s
Iteration  14: 2980221.203 ops/s
Iteration  15: 2993340.784 ops/s
Iteration  16: 3002448.403 ops/s
Iteration  17: 3002453.815 ops/s
Iteration  18: 2983424.944 ops/s
Iteration  19: 3001236.597 ops/s
Iteration  20: 3007429.359 ops/s
Iteration  21: 2995500.892 ops/s
Iteration  22: 2994931.304 ops/s
Iteration  23: 3011499.400 ops/s
Iteration  24: 2994859.579 ops/s
Iteration  25: 2998304.389 ops/s
Iteration  26: 2987109.061 ops/s
Iteration  27: 2996751.966 ops/s
Iteration  28: 2992920.458 ops/s
Iteration  29: 2993080.230 ops/s
Iteration  30: 2989373.396 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumByLong":
  2995695.067 ±(99.9%) 4924.046 ops/s [Average]
  (min, avg, max) = (2980221.203, 2995695.067, 3011499.400), stdev = 7370.080
  CI (99.9%): [2990771.021, 3000619.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumByLong  thrpt   30  2995695.067 ± 4924.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24841372.095 ops/s
# Warmup Iteration   2: 54970486.595 ops/s
# Warmup Iteration   3: 45270988.383 ops/s
# Warmup Iteration   4: 53640437.409 ops/s
# Warmup Iteration   5: 53682808.888 ops/s
# Warmup Iteration   6: 53641946.486 ops/s
# Warmup Iteration   7: 53649021.889 ops/s
# Warmup Iteration   8: 53599423.609 ops/s
# Warmup Iteration   9: 53536927.459 ops/s
# Warmup Iteration  10: 53694053.694 ops/s
# Warmup Iteration  11: 53365588.364 ops/s
# Warmup Iteration  12: 53545925.569 ops/s
# Warmup Iteration  13: 53518159.776 ops/s
# Warmup Iteration  14: 52223215.206 ops/s
# Warmup Iteration  15: 53826579.793 ops/s
# Warmup Iteration  16: 53524579.357 ops/s
# Warmup Iteration  17: 52573898.781 ops/s
# Warmup Iteration  18: 52780121.505 ops/s
# Warmup Iteration  19: 52449007.736 ops/s
# Warmup Iteration  20: 52706395.920 ops/s
# Warmup Iteration  21: 52748564.308 ops/s
# Warmup Iteration  22: 52711187.581 ops/s
# Warmup Iteration  23: 52687266.379 ops/s
# Warmup Iteration  24: 52536955.080 ops/s
# Warmup Iteration  25: 52607030.893 ops/s
# Warmup Iteration  26: 52635975.824 ops/s
# Warmup Iteration  27: 52610908.194 ops/s
# Warmup Iteration  28: 52439674.957 ops/s
# Warmup Iteration  29: 52755630.115 ops/s
# Warmup Iteration  30: 52599443.798 ops/s
Iteration   1: 52614630.836 ops/s
Iteration   2: 52855653.972 ops/s
Iteration   3: 52723531.065 ops/s
Iteration   4: 52574592.543 ops/s
Iteration   5: 52170648.938 ops/s
Iteration   6: 52662271.520 ops/s
Iteration   7: 52795078.774 ops/s
Iteration   8: 52680810.569 ops/s
Iteration   9: 52823672.126 ops/s
Iteration  10: 52562087.818 ops/s
Iteration  11: 52652107.309 ops/s
Iteration  12: 52703952.733 ops/s
Iteration  13: 52486250.710 ops/s
Iteration  14: 52534509.355 ops/s
Iteration  15: 52470798.607 ops/s
Iteration  16: 52536784.424 ops/s
Iteration  17: 52823158.202 ops/s
Iteration  18: 52642397.355 ops/s
Iteration  19: 52632108.651 ops/s
Iteration  20: 52768297.265 ops/s
Iteration  21: 52471931.243 ops/s
Iteration  22: 52789698.463 ops/s
Iteration  23: 52699171.395 ops/s
Iteration  24: 52809850.321 ops/s
Iteration  25: 52536099.906 ops/s
Iteration  26: 52542384.570 ops/s
Iteration  27: 52611785.108 ops/s
Iteration  28: 52570136.414 ops/s
Iteration  29: 50356471.631 ops/s
Iteration  30: 51360138.410 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumDouble":
  52515367.008 ±(99.9%) 327509.957 ops/s [Average]
  (min, avg, max) = (50356471.631, 52515367.008, 52855653.972), stdev = 490201.522
  CI (99.9%): [52187857.051, 52842876.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumDouble  thrpt   30  52515367.008 ± 327509.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23764153.763 ops/s
# Warmup Iteration   2: 52085910.807 ops/s
# Warmup Iteration   3: 45701822.621 ops/s
# Warmup Iteration   4: 47255064.848 ops/s
# Warmup Iteration   5: 48641641.658 ops/s
# Warmup Iteration   6: 48607821.096 ops/s
# Warmup Iteration   7: 48694325.155 ops/s
# Warmup Iteration   8: 48513503.409 ops/s
# Warmup Iteration   9: 48623504.329 ops/s
# Warmup Iteration  10: 48520847.663 ops/s
# Warmup Iteration  11: 48509216.018 ops/s
# Warmup Iteration  12: 48622697.183 ops/s
# Warmup Iteration  13: 48613377.304 ops/s
# Warmup Iteration  14: 48164429.511 ops/s
# Warmup Iteration  15: 48536618.340 ops/s
# Warmup Iteration  16: 48377055.299 ops/s
# Warmup Iteration  17: 48585981.938 ops/s
# Warmup Iteration  18: 48377085.166 ops/s
# Warmup Iteration  19: 48332296.109 ops/s
# Warmup Iteration  20: 48593192.932 ops/s
# Warmup Iteration  21: 48325665.274 ops/s
# Warmup Iteration  22: 48304655.943 ops/s
# Warmup Iteration  23: 48570211.088 ops/s
# Warmup Iteration  24: 48486761.602 ops/s
# Warmup Iteration  25: 48429951.562 ops/s
# Warmup Iteration  26: 48604857.866 ops/s
# Warmup Iteration  27: 48588027.843 ops/s
# Warmup Iteration  28: 48612968.538 ops/s
# Warmup Iteration  29: 48644491.908 ops/s
# Warmup Iteration  30: 48501213.408 ops/s
Iteration   1: 48534185.975 ops/s
Iteration   2: 48352931.282 ops/s
Iteration   3: 48221141.622 ops/s
Iteration   4: 48570437.068 ops/s
Iteration   5: 48352753.809 ops/s
Iteration   6: 48546064.860 ops/s
Iteration   7: 48458762.407 ops/s
Iteration   8: 48263446.575 ops/s
Iteration   9: 48414589.831 ops/s
Iteration  10: 48380504.302 ops/s
Iteration  11: 48529727.271 ops/s
Iteration  12: 48527147.885 ops/s
Iteration  13: 48626945.439 ops/s
Iteration  14: 48649894.221 ops/s
Iteration  15: 48630530.145 ops/s
Iteration  16: 48714986.424 ops/s
Iteration  17: 48580769.442 ops/s
Iteration  18: 48597502.387 ops/s
Iteration  19: 48524903.153 ops/s
Iteration  20: 48471177.548 ops/s
Iteration  21: 48446373.363 ops/s
Iteration  22: 48484557.274 ops/s
Iteration  23: 48472909.106 ops/s
Iteration  24: 48586274.323 ops/s
Iteration  25: 48529238.229 ops/s
Iteration  26: 48559973.001 ops/s
Iteration  27: 48423552.318 ops/s
Iteration  28: 48582924.704 ops/s
Iteration  29: 48321425.107 ops/s
Iteration  30: 48252810.059 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumFloat":
  48486947.971 ±(99.9%) 82840.485 ops/s [Average]
  (min, avg, max) = (48221141.622, 48486947.971, 48714986.424), stdev = 123991.748
  CI (99.9%): [48404107.486, 48569788.456] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumFloat  thrpt   30  48486947.971 ± 82840.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28294387.713 ops/s
# Warmup Iteration   2: 55530179.281 ops/s
# Warmup Iteration   3: 50257134.578 ops/s
# Warmup Iteration   4: 59778728.536 ops/s
# Warmup Iteration   5: 59493119.153 ops/s
# Warmup Iteration   6: 59810709.305 ops/s
# Warmup Iteration   7: 59810730.538 ops/s
# Warmup Iteration   8: 59984283.196 ops/s
# Warmup Iteration   9: 59753979.909 ops/s
# Warmup Iteration  10: 59837858.813 ops/s
# Warmup Iteration  11: 59770040.676 ops/s
# Warmup Iteration  12: 59505132.359 ops/s
# Warmup Iteration  13: 59587523.948 ops/s
# Warmup Iteration  14: 59719475.954 ops/s
# Warmup Iteration  15: 59399139.542 ops/s
# Warmup Iteration  16: 59539139.441 ops/s
# Warmup Iteration  17: 58597694.584 ops/s
# Warmup Iteration  18: 58701451.160 ops/s
# Warmup Iteration  19: 58667734.955 ops/s
# Warmup Iteration  20: 58861158.387 ops/s
# Warmup Iteration  21: 58620014.527 ops/s
# Warmup Iteration  22: 58690243.167 ops/s
# Warmup Iteration  23: 58682476.725 ops/s
# Warmup Iteration  24: 58809686.792 ops/s
# Warmup Iteration  25: 58950967.825 ops/s
# Warmup Iteration  26: 58396902.408 ops/s
# Warmup Iteration  27: 58733829.328 ops/s
# Warmup Iteration  28: 59011462.466 ops/s
# Warmup Iteration  29: 58753713.868 ops/s
# Warmup Iteration  30: 58810943.075 ops/s
Iteration   1: 58850321.451 ops/s
Iteration   2: 58553689.410 ops/s
Iteration   3: 58742296.475 ops/s
Iteration   4: 58379191.468 ops/s
Iteration   5: 58615456.848 ops/s
Iteration   6: 58985151.583 ops/s
Iteration   7: 58779809.124 ops/s
Iteration   8: 58319017.620 ops/s
Iteration   9: 58897822.468 ops/s
Iteration  10: 58799310.421 ops/s
Iteration  11: 58765458.436 ops/s
Iteration  12: 58500210.177 ops/s
Iteration  13: 58515943.751 ops/s
Iteration  14: 58623337.090 ops/s
Iteration  15: 58760163.126 ops/s
Iteration  16: 58604132.079 ops/s
Iteration  17: 58656653.243 ops/s
Iteration  18: 58899703.717 ops/s
Iteration  19: 58837752.699 ops/s
Iteration  20: 58450466.748 ops/s
Iteration  21: 58691851.628 ops/s
Iteration  22: 58833328.147 ops/s
Iteration  23: 58466044.494 ops/s
Iteration  24: 58473822.144 ops/s
Iteration  25: 58727808.099 ops/s
Iteration  26: 58396558.980 ops/s
Iteration  27: 58847045.270 ops/s
Iteration  28: 58284517.786 ops/s
Iteration  29: 58882238.077 ops/s
Iteration  30: 58853447.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumInteger":
  58666418.321 ±(99.9%) 129599.865 ops/s [Average]
  (min, avg, max) = (58284517.786, 58666418.321, 58985151.583), stdev = 193978.992
  CI (99.9%): [58536818.455, 58796018.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumInteger  thrpt   30  58666418.321 ± 129599.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26844465.249 ops/s
# Warmup Iteration   2: 53721476.270 ops/s
# Warmup Iteration   3: 50004206.069 ops/s
# Warmup Iteration   4: 59813022.206 ops/s
# Warmup Iteration   5: 59562985.590 ops/s
# Warmup Iteration   6: 59735125.286 ops/s
# Warmup Iteration   7: 59866291.153 ops/s
# Warmup Iteration   8: 59528758.915 ops/s
# Warmup Iteration   9: 59704788.667 ops/s
# Warmup Iteration  10: 59871527.363 ops/s
# Warmup Iteration  11: 59609510.253 ops/s
# Warmup Iteration  12: 59525181.838 ops/s
# Warmup Iteration  13: 59762553.407 ops/s
# Warmup Iteration  14: 59489320.543 ops/s
# Warmup Iteration  15: 59724219.108 ops/s
# Warmup Iteration  16: 59789217.961 ops/s
# Warmup Iteration  17: 59736758.396 ops/s
# Warmup Iteration  18: 59773945.162 ops/s
# Warmup Iteration  19: 59697799.199 ops/s
# Warmup Iteration  20: 59944717.274 ops/s
# Warmup Iteration  21: 59657595.245 ops/s
# Warmup Iteration  22: 59840034.668 ops/s
# Warmup Iteration  23: 59819142.627 ops/s
# Warmup Iteration  24: 59581758.174 ops/s
# Warmup Iteration  25: 59676195.574 ops/s
# Warmup Iteration  26: 59612131.038 ops/s
# Warmup Iteration  27: 59508433.827 ops/s
# Warmup Iteration  28: 59699297.024 ops/s
# Warmup Iteration  29: 59733730.782 ops/s
# Warmup Iteration  30: 59715561.482 ops/s
Iteration   1: 59961414.233 ops/s
Iteration   2: 59773361.287 ops/s
Iteration   3: 59805613.837 ops/s
Iteration   4: 59997128.380 ops/s
Iteration   5: 59916363.336 ops/s
Iteration   6: 59588973.828 ops/s
Iteration   7: 59461279.645 ops/s
Iteration   8: 59792383.164 ops/s
Iteration   9: 59722969.155 ops/s
Iteration  10: 59917819.646 ops/s
Iteration  11: 59675190.497 ops/s
Iteration  12: 59795107.884 ops/s
Iteration  13: 59808946.277 ops/s
Iteration  14: 59476008.851 ops/s
Iteration  15: 59858792.449 ops/s
Iteration  16: 59632587.837 ops/s
Iteration  17: 59556026.388 ops/s
Iteration  18: 59907373.545 ops/s
Iteration  19: 60191928.560 ops/s
Iteration  20: 59579792.337 ops/s
Iteration  21: 59963206.897 ops/s
Iteration  22: 59809482.500 ops/s
Iteration  23: 59727803.933 ops/s
Iteration  24: 59803759.074 ops/s
Iteration  25: 59751666.356 ops/s
Iteration  26: 59734049.097 ops/s
Iteration  27: 59881399.418 ops/s
Iteration  28: 59338343.453 ops/s
Iteration  29: 59667087.681 ops/s
Iteration  30: 59581176.618 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_sumLong":
  59755901.205 ±(99.9%) 120874.292 ops/s [Average]
  (min, avg, max) = (59338343.453, 59755901.205, 60191928.560), stdev = 180918.964
  CI (99.9%): [59635026.913, 59876775.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_sumLong  thrpt   30  59755901.205 ± 120874.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3312804.251 ops/s
# Warmup Iteration   2: 7011254.292 ops/s
# Warmup Iteration   3: 7461744.773 ops/s
# Warmup Iteration   4: 7477081.953 ops/s
# Warmup Iteration   5: 6196651.730 ops/s
# Warmup Iteration   6: 7519727.947 ops/s
# Warmup Iteration   7: 7507554.033 ops/s
# Warmup Iteration   8: 7518610.186 ops/s
# Warmup Iteration   9: 7505482.092 ops/s
# Warmup Iteration  10: 7514453.986 ops/s
# Warmup Iteration  11: 7492864.544 ops/s
# Warmup Iteration  12: 7492795.664 ops/s
# Warmup Iteration  13: 7516139.942 ops/s
# Warmup Iteration  14: 7514795.604 ops/s
# Warmup Iteration  15: 7513322.955 ops/s
# Warmup Iteration  16: 7496725.238 ops/s
# Warmup Iteration  17: 7511051.342 ops/s
# Warmup Iteration  18: 7502666.662 ops/s
# Warmup Iteration  19: 7509873.671 ops/s
# Warmup Iteration  20: 7503124.141 ops/s
# Warmup Iteration  21: 7509952.232 ops/s
# Warmup Iteration  22: 7507422.923 ops/s
# Warmup Iteration  23: 7506895.789 ops/s
# Warmup Iteration  24: 7501983.209 ops/s
# Warmup Iteration  25: 7516345.386 ops/s
# Warmup Iteration  26: 7517645.120 ops/s
# Warmup Iteration  27: 7496750.112 ops/s
# Warmup Iteration  28: 7491272.781 ops/s
# Warmup Iteration  29: 7513343.792 ops/s
# Warmup Iteration  30: 7524955.601 ops/s
Iteration   1: 7493913.729 ops/s
Iteration   2: 7488945.554 ops/s
Iteration   3: 7527028.354 ops/s
Iteration   4: 7496334.279 ops/s
Iteration   5: 7503882.186 ops/s
Iteration   6: 7507921.221 ops/s
Iteration   7: 7483003.638 ops/s
Iteration   8: 7514105.186 ops/s
Iteration   9: 7469564.521 ops/s
Iteration  10: 7523625.823 ops/s
Iteration  11: 7471927.857 ops/s
Iteration  12: 7500673.539 ops/s
Iteration  13: 7504037.814 ops/s
Iteration  14: 7525200.217 ops/s
Iteration  15: 7517353.230 ops/s
Iteration  16: 7465076.107 ops/s
Iteration  17: 7518093.643 ops/s
Iteration  18: 7528726.451 ops/s
Iteration  19: 7493957.631 ops/s
Iteration  20: 7500106.108 ops/s
Iteration  21: 7494490.516 ops/s
Iteration  22: 7527827.856 ops/s
Iteration  23: 7464473.593 ops/s
Iteration  24: 7490502.233 ops/s
Iteration  25: 7509619.098 ops/s
Iteration  26: 7511276.539 ops/s
Iteration  27: 7501915.152 ops/s
Iteration  28: 7519740.203 ops/s
Iteration  29: 7528612.658 ops/s
Iteration  30: 7519798.218 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take":
  7503391.105 ±(99.9%) 12856.744 ops/s [Average]
  (min, avg, max) = (7464473.593, 7503391.105, 7528726.451), stdev = 19243.370
  CI (99.9%): [7490534.362, 7516247.849] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_take  thrpt   30  7503391.105 ± 12856.744  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7443786.927 ops/s
# Warmup Iteration   2: 14554580.929 ops/s
# Warmup Iteration   3: 15302094.004 ops/s
# Warmup Iteration   4: 15273364.592 ops/s
# Warmup Iteration   5: 12870182.750 ops/s
# Warmup Iteration   6: 15334384.687 ops/s
# Warmup Iteration   7: 15318249.032 ops/s
# Warmup Iteration   8: 15356190.366 ops/s
# Warmup Iteration   9: 15304931.728 ops/s
# Warmup Iteration  10: 15282011.346 ops/s
# Warmup Iteration  11: 15325470.879 ops/s
# Warmup Iteration  12: 15334499.283 ops/s
# Warmup Iteration  13: 15306248.797 ops/s
# Warmup Iteration  14: 15307000.262 ops/s
# Warmup Iteration  15: 15323541.706 ops/s
# Warmup Iteration  16: 15337633.782 ops/s
# Warmup Iteration  17: 15343850.928 ops/s
# Warmup Iteration  18: 15303708.621 ops/s
# Warmup Iteration  19: 15314375.301 ops/s
# Warmup Iteration  20: 15324358.350 ops/s
# Warmup Iteration  21: 15345323.211 ops/s
# Warmup Iteration  22: 15351844.832 ops/s
# Warmup Iteration  23: 15329305.223 ops/s
# Warmup Iteration  24: 15310495.436 ops/s
# Warmup Iteration  25: 15364447.348 ops/s
# Warmup Iteration  26: 15257113.943 ops/s
# Warmup Iteration  27: 15296264.896 ops/s
# Warmup Iteration  28: 15286319.349 ops/s
# Warmup Iteration  29: 15299241.963 ops/s
# Warmup Iteration  30: 15314314.866 ops/s
Iteration   1: 15318046.150 ops/s
Iteration   2: 15319582.881 ops/s
Iteration   3: 15355638.548 ops/s
Iteration   4: 15349428.030 ops/s
Iteration   5: 15322059.917 ops/s
Iteration   6: 15346624.867 ops/s
Iteration   7: 15316444.694 ops/s
Iteration   8: 15214270.371 ops/s
Iteration   9: 15338009.776 ops/s
Iteration  10: 15240015.120 ops/s
Iteration  11: 15260521.483 ops/s
Iteration  12: 15352828.536 ops/s
Iteration  13: 15334004.227 ops/s
Iteration  14: 15293955.262 ops/s
Iteration  15: 15254842.877 ops/s
Iteration  16: 14445229.095 ops/s
Iteration  17: 14597441.601 ops/s
Iteration  18: 15287966.676 ops/s
Iteration  19: 15315357.012 ops/s
Iteration  20: 15293278.191 ops/s
Iteration  21: 15267520.709 ops/s
Iteration  22: 15362373.740 ops/s
Iteration  23: 15346634.773 ops/s
Iteration  24: 15347602.442 ops/s
Iteration  25: 15342393.386 ops/s
Iteration  26: 15351741.267 ops/s
Iteration  27: 15339567.302 ops/s
Iteration  28: 15297095.220 ops/s
Iteration  29: 15312924.946 ops/s
Iteration  30: 15323876.272 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_takeWhile":
  15261575.846 ±(99.9%) 137353.363 ops/s [Average]
  (min, avg, max) = (14445229.095, 15261575.846, 15362373.740), stdev = 205584.064
  CI (99.9%): [15124222.482, 15398929.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_takeWhile  thrpt   30  15261575.846 ± 137353.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734944.084 ops/s
# Warmup Iteration   2: 764732.196 ops/s
# Warmup Iteration   3: 993772.251 ops/s
# Warmup Iteration   4: 1004659.366 ops/s
# Warmup Iteration   5: 1006109.385 ops/s
# Warmup Iteration   6: 991107.492 ops/s
# Warmup Iteration   7: 1005700.255 ops/s
# Warmup Iteration   8: 1007867.261 ops/s
# Warmup Iteration   9: 1001129.805 ops/s
# Warmup Iteration  10: 999720.851 ops/s
# Warmup Iteration  11: 999468.118 ops/s
# Warmup Iteration  12: 849042.900 ops/s
# Warmup Iteration  13: 994011.273 ops/s
# Warmup Iteration  14: 991973.996 ops/s
# Warmup Iteration  15: 987810.286 ops/s
# Warmup Iteration  16: 996558.372 ops/s
# Warmup Iteration  17: 1047055.407 ops/s
# Warmup Iteration  18: 1048249.217 ops/s
# Warmup Iteration  19: 1045876.249 ops/s
# Warmup Iteration  20: 1049416.106 ops/s
# Warmup Iteration  21: 1048269.673 ops/s
# Warmup Iteration  22: 1044267.262 ops/s
# Warmup Iteration  23: 1045268.314 ops/s
# Warmup Iteration  24: 1048117.026 ops/s
# Warmup Iteration  25: 1047273.907 ops/s
# Warmup Iteration  26: 1046374.505 ops/s
# Warmup Iteration  27: 1050056.247 ops/s
# Warmup Iteration  28: 1049119.333 ops/s
# Warmup Iteration  29: 1044215.494 ops/s
# Warmup Iteration  30: 1048079.469 ops/s
Iteration   1: 1043137.480 ops/s
Iteration   2: 1042195.430 ops/s
Iteration   3: 1049879.432 ops/s
Iteration   4: 1046262.559 ops/s
Iteration   5: 1047125.102 ops/s
Iteration   6: 1041074.431 ops/s
Iteration   7: 1048136.233 ops/s
Iteration   8: 1048402.510 ops/s
Iteration   9: 1036281.385 ops/s
Iteration  10: 1049196.543 ops/s
Iteration  11: 1045821.566 ops/s
Iteration  12: 1047993.227 ops/s
Iteration  13: 1044746.862 ops/s
Iteration  14: 1049942.682 ops/s
Iteration  15: 1051038.314 ops/s
Iteration  16: 1049588.472 ops/s
Iteration  17: 1050580.338 ops/s
Iteration  18: 1049359.398 ops/s
Iteration  19: 1047757.137 ops/s
Iteration  20: 1048355.253 ops/s
Iteration  21: 1043389.743 ops/s
Iteration  22: 1043752.719 ops/s
Iteration  23: 1040532.816 ops/s
Iteration  24: 1045531.702 ops/s
Iteration  25: 1045936.084 ops/s
Iteration  26: 1048958.974 ops/s
Iteration  27: 1048667.963 ops/s
Iteration  28: 1048000.774 ops/s
Iteration  29: 1050504.097 ops/s
Iteration  30: 1045577.524 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_take_throws":
  1046590.892 ±(99.9%) 2322.530 ops/s [Average]
  (min, avg, max) = (1036281.385, 1046590.892, 1051038.314), stdev = 3476.253
  CI (99.9%): [1044268.362, 1048913.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_take_throws  thrpt   30  1046590.892 ± 2322.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10975982.651 ops/s
# Warmup Iteration   2: 23161128.416 ops/s
# Warmup Iteration   3: 19730293.798 ops/s
# Warmup Iteration   4: 23177675.980 ops/s
# Warmup Iteration   5: 22965104.558 ops/s
# Warmup Iteration   6: 23147482.794 ops/s
# Warmup Iteration   7: 23155919.666 ops/s
# Warmup Iteration   8: 23132117.312 ops/s
# Warmup Iteration   9: 23159437.466 ops/s
# Warmup Iteration  10: 23111099.640 ops/s
# Warmup Iteration  11: 23193655.076 ops/s
# Warmup Iteration  12: 23267908.224 ops/s
# Warmup Iteration  13: 23165214.055 ops/s
# Warmup Iteration  14: 23179798.726 ops/s
# Warmup Iteration  15: 23036775.977 ops/s
# Warmup Iteration  16: 23204478.211 ops/s
# Warmup Iteration  17: 23127667.748 ops/s
# Warmup Iteration  18: 23271839.585 ops/s
# Warmup Iteration  19: 23166635.154 ops/s
# Warmup Iteration  20: 23210603.511 ops/s
# Warmup Iteration  21: 23111943.948 ops/s
# Warmup Iteration  22: 23168868.091 ops/s
# Warmup Iteration  23: 23120087.136 ops/s
# Warmup Iteration  24: 23217594.005 ops/s
# Warmup Iteration  25: 23092861.144 ops/s
# Warmup Iteration  26: 23230409.970 ops/s
# Warmup Iteration  27: 23138112.442 ops/s
# Warmup Iteration  28: 23223676.894 ops/s
# Warmup Iteration  29: 23239157.955 ops/s
# Warmup Iteration  30: 23217988.465 ops/s
Iteration   1: 23226399.529 ops/s
Iteration   2: 23200855.030 ops/s
Iteration   3: 23254589.499 ops/s
Iteration   4: 23165174.186 ops/s
Iteration   5: 23287932.294 ops/s
Iteration   6: 23179774.204 ops/s
Iteration   7: 23363412.145 ops/s
Iteration   8: 23240022.440 ops/s
Iteration   9: 23091309.027 ops/s
Iteration  10: 23164064.607 ops/s
Iteration  11: 23048403.403 ops/s
Iteration  12: 23269631.785 ops/s
Iteration  13: 23187145.488 ops/s
Iteration  14: 23159954.906 ops/s
Iteration  15: 23134301.503 ops/s
Iteration  16: 23147388.740 ops/s
Iteration  17: 23223086.988 ops/s
Iteration  18: 23247055.133 ops/s
Iteration  19: 23192487.517 ops/s
Iteration  20: 23184930.584 ops/s
Iteration  21: 23020139.223 ops/s
Iteration  22: 23201947.381 ops/s
Iteration  23: 23234579.091 ops/s
Iteration  24: 23119236.477 ops/s
Iteration  25: 23263734.888 ops/s
Iteration  26: 23177942.964 ops/s
Iteration  27: 23160371.901 ops/s
Iteration  28: 23276461.384 ops/s
Iteration  29: 23204323.178 ops/s
Iteration  30: 23246072.242 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_tap":
  23195757.591 ±(99.9%) 47695.855 ops/s [Average]
  (min, avg, max) = (23020139.223, 23195757.591, 23363412.145), stdev = 71388.916
  CI (99.9%): [23148061.736, 23243453.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_tap  thrpt   30  23195757.591 ± 47695.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2510786.024 ops/s
# Warmup Iteration   2: 5718921.310 ops/s
# Warmup Iteration   3: 5359356.881 ops/s
# Warmup Iteration   4: 5474071.521 ops/s
# Warmup Iteration   5: 5929382.353 ops/s
# Warmup Iteration   6: 5936477.446 ops/s
# Warmup Iteration   7: 5928801.913 ops/s
# Warmup Iteration   8: 5932043.211 ops/s
# Warmup Iteration   9: 5923557.907 ops/s
# Warmup Iteration  10: 5916763.585 ops/s
# Warmup Iteration  11: 5901302.140 ops/s
# Warmup Iteration  12: 5926771.953 ops/s
# Warmup Iteration  13: 5921480.277 ops/s
# Warmup Iteration  14: 5937083.213 ops/s
# Warmup Iteration  15: 5921711.895 ops/s
# Warmup Iteration  16: 5931440.778 ops/s
# Warmup Iteration  17: 5920458.517 ops/s
# Warmup Iteration  18: 5928800.169 ops/s
# Warmup Iteration  19: 5940172.948 ops/s
# Warmup Iteration  20: 5921089.660 ops/s
# Warmup Iteration  21: 5926440.275 ops/s
# Warmup Iteration  22: 5918156.778 ops/s
# Warmup Iteration  23: 5930937.190 ops/s
# Warmup Iteration  24: 5893987.312 ops/s
# Warmup Iteration  25: 5869359.804 ops/s
# Warmup Iteration  26: 5871996.181 ops/s
# Warmup Iteration  27: 5878974.462 ops/s
# Warmup Iteration  28: 5886674.503 ops/s
# Warmup Iteration  29: 5901784.551 ops/s
# Warmup Iteration  30: 5890931.233 ops/s
Iteration   1: 5927913.130 ops/s
Iteration   2: 5912270.835 ops/s
Iteration   3: 5909405.129 ops/s
Iteration   4: 5914667.825 ops/s
Iteration   5: 5900664.914 ops/s
Iteration   6: 5919397.153 ops/s
Iteration   7: 5916450.055 ops/s
Iteration   8: 5919627.655 ops/s
Iteration   9: 5918365.674 ops/s
Iteration  10: 5902584.023 ops/s
Iteration  11: 5927946.048 ops/s
Iteration  12: 5905313.082 ops/s
Iteration  13: 5907451.437 ops/s
Iteration  14: 5920477.578 ops/s
Iteration  15: 5897615.274 ops/s
Iteration  16: 5913615.721 ops/s
Iteration  17: 5925055.948 ops/s
Iteration  18: 5896447.630 ops/s
Iteration  19: 5904959.790 ops/s
Iteration  20: 5901083.858 ops/s
Iteration  21: 5885720.255 ops/s
Iteration  22: 5909804.690 ops/s
Iteration  23: 5909978.722 ops/s
Iteration  24: 5908434.550 ops/s
Iteration  25: 5922372.241 ops/s
Iteration  26: 5914688.386 ops/s
Iteration  27: 5910443.135 ops/s
Iteration  28: 5921294.542 ops/s
Iteration  29: 5926568.785 ops/s
Iteration  30: 5912338.595 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_testToString":
  5912098.555 ±(99.9%) 6758.550 ops/s [Average]
  (min, avg, max) = (5885720.255, 5912098.555, 5927946.048), stdev = 10115.881
  CI (99.9%): [5905340.005, 5918857.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_testToString  thrpt   30  5912098.555 ± 6758.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9422851.429 ops/s
# Warmup Iteration   2: 19441510.630 ops/s
# Warmup Iteration   3: 17143594.479 ops/s
# Warmup Iteration   4: 20188540.647 ops/s
# Warmup Iteration   5: 20208210.415 ops/s
# Warmup Iteration   6: 20308425.567 ops/s
# Warmup Iteration   7: 20194841.840 ops/s
# Warmup Iteration   8: 20211557.410 ops/s
# Warmup Iteration   9: 20188785.410 ops/s
# Warmup Iteration  10: 20163768.843 ops/s
# Warmup Iteration  11: 20253387.286 ops/s
# Warmup Iteration  12: 20219802.725 ops/s
# Warmup Iteration  13: 20177709.104 ops/s
# Warmup Iteration  14: 20208815.168 ops/s
# Warmup Iteration  15: 20237175.854 ops/s
# Warmup Iteration  16: 20183518.082 ops/s
# Warmup Iteration  17: 20272349.361 ops/s
# Warmup Iteration  18: 20273963.204 ops/s
# Warmup Iteration  19: 20276926.937 ops/s
# Warmup Iteration  20: 20239662.895 ops/s
# Warmup Iteration  21: 20303986.221 ops/s
# Warmup Iteration  22: 20284270.741 ops/s
# Warmup Iteration  23: 20273869.082 ops/s
# Warmup Iteration  24: 20275790.476 ops/s
# Warmup Iteration  25: 20260305.479 ops/s
# Warmup Iteration  26: 20229901.091 ops/s
# Warmup Iteration  27: 20252718.958 ops/s
# Warmup Iteration  28: 20266486.784 ops/s
# Warmup Iteration  29: 20259480.387 ops/s
# Warmup Iteration  30: 20198505.561 ops/s
Iteration   1: 20221071.544 ops/s
Iteration   2: 20236784.672 ops/s
Iteration   3: 20251117.611 ops/s
Iteration   4: 20273788.652 ops/s
Iteration   5: 20267178.654 ops/s
Iteration   6: 20259266.200 ops/s
Iteration   7: 20246974.449 ops/s
Iteration   8: 20151223.724 ops/s
Iteration   9: 20302682.422 ops/s
Iteration  10: 20148826.860 ops/s
Iteration  11: 20251804.934 ops/s
Iteration  12: 20201626.526 ops/s
Iteration  13: 20292109.659 ops/s
Iteration  14: 20227553.697 ops/s
Iteration  15: 20233240.468 ops/s
Iteration  16: 20239288.703 ops/s
Iteration  17: 20288996.914 ops/s
Iteration  18: 20235966.894 ops/s
Iteration  19: 20210084.407 ops/s
Iteration  20: 20241089.920 ops/s
Iteration  21: 20243161.708 ops/s
Iteration  22: 20209454.021 ops/s
Iteration  23: 20208491.364 ops/s
Iteration  24: 20240547.157 ops/s
Iteration  25: 20227818.863 ops/s
Iteration  26: 20237677.231 ops/s
Iteration  27: 20142970.351 ops/s
Iteration  28: 20274684.905 ops/s
Iteration  29: 20208000.470 ops/s
Iteration  30: 20206617.083 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toArray":
  20232670.002 ±(99.9%) 26021.527 ops/s [Average]
  (min, avg, max) = (20142970.351, 20232670.002, 20302682.422), stdev = 38947.799
  CI (99.9%): [20206648.475, 20258691.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toArray  thrpt   30  20232670.002 ± 26021.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154798960.209 ops/s
# Warmup Iteration   2: 302444689.283 ops/s
# Warmup Iteration   3: 263470378.396 ops/s
# Warmup Iteration   4: 308099852.473 ops/s
# Warmup Iteration   5: 306914124.509 ops/s
# Warmup Iteration   6: 308585849.966 ops/s
# Warmup Iteration   7: 308416967.699 ops/s
# Warmup Iteration   8: 309048462.257 ops/s
# Warmup Iteration   9: 309283194.073 ops/s
# Warmup Iteration  10: 309369209.034 ops/s
# Warmup Iteration  11: 308113077.130 ops/s
# Warmup Iteration  12: 308674846.526 ops/s
# Warmup Iteration  13: 309213829.632 ops/s
# Warmup Iteration  14: 309409663.204 ops/s
# Warmup Iteration  15: 309901141.662 ops/s
# Warmup Iteration  16: 307876658.891 ops/s
# Warmup Iteration  17: 310144790.906 ops/s
# Warmup Iteration  18: 309440791.493 ops/s
# Warmup Iteration  19: 309399793.747 ops/s
# Warmup Iteration  20: 308251817.094 ops/s
# Warmup Iteration  21: 307959943.310 ops/s
# Warmup Iteration  22: 309365224.651 ops/s
# Warmup Iteration  23: 307935978.928 ops/s
# Warmup Iteration  24: 309671208.145 ops/s
# Warmup Iteration  25: 309209239.934 ops/s
# Warmup Iteration  26: 309931820.793 ops/s
# Warmup Iteration  27: 308309484.004 ops/s
# Warmup Iteration  28: 308307045.360 ops/s
# Warmup Iteration  29: 308365079.331 ops/s
# Warmup Iteration  30: 309579475.274 ops/s
Iteration   1: 308111143.197 ops/s
Iteration   2: 309352350.474 ops/s
Iteration   3: 309778239.168 ops/s
Iteration   4: 308064965.926 ops/s
Iteration   5: 308519320.450 ops/s
Iteration   6: 310438755.988 ops/s
Iteration   7: 308726281.159 ops/s
Iteration   8: 308731135.852 ops/s
Iteration   9: 310268859.307 ops/s
Iteration  10: 308940784.922 ops/s
Iteration  11: 309488554.316 ops/s
Iteration  12: 310176200.483 ops/s
Iteration  13: 308782831.053 ops/s
Iteration  14: 308839893.136 ops/s
Iteration  15: 309129457.737 ops/s
Iteration  16: 309530364.288 ops/s
Iteration  17: 308557867.107 ops/s
Iteration  18: 309500555.394 ops/s
Iteration  19: 308537530.011 ops/s
Iteration  20: 308770643.172 ops/s
Iteration  21: 308516847.516 ops/s
Iteration  22: 306922332.317 ops/s
Iteration  23: 307477547.350 ops/s
Iteration  24: 306948627.286 ops/s
Iteration  25: 308143530.056 ops/s
Iteration  26: 307812877.896 ops/s
Iteration  27: 308713971.120 ops/s
Iteration  28: 309370423.968 ops/s
Iteration  29: 307789723.185 ops/s
Iteration  30: 309085404.057 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toImmutable":
  308767567.263 ±(99.9%) 587849.297 ops/s [Average]
  (min, avg, max) = (306922332.317, 308767567.263, 310438755.988), stdev = 879865.221
  CI (99.9%): [308179717.966, 309355416.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toImmutable  thrpt   30  308767567.263 ± 587849.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3180437.364 ops/s
# Warmup Iteration   2: 7097102.319 ops/s
# Warmup Iteration   3: 5966690.338 ops/s
# Warmup Iteration   4: 7102614.982 ops/s
# Warmup Iteration   5: 7117001.750 ops/s
# Warmup Iteration   6: 7127461.038 ops/s
# Warmup Iteration   7: 7125538.754 ops/s
# Warmup Iteration   8: 7121077.924 ops/s
# Warmup Iteration   9: 7107464.598 ops/s
# Warmup Iteration  10: 7114897.692 ops/s
# Warmup Iteration  11: 7133544.849 ops/s
# Warmup Iteration  12: 7108442.971 ops/s
# Warmup Iteration  13: 7124219.260 ops/s
# Warmup Iteration  14: 7123583.927 ops/s
# Warmup Iteration  15: 7114501.207 ops/s
# Warmup Iteration  16: 7097028.244 ops/s
# Warmup Iteration  17: 7108427.357 ops/s
# Warmup Iteration  18: 7122786.016 ops/s
# Warmup Iteration  19: 7119974.953 ops/s
# Warmup Iteration  20: 7108509.644 ops/s
# Warmup Iteration  21: 7121907.419 ops/s
# Warmup Iteration  22: 7088917.610 ops/s
# Warmup Iteration  23: 7115093.568 ops/s
# Warmup Iteration  24: 7116787.703 ops/s
# Warmup Iteration  25: 7129778.239 ops/s
# Warmup Iteration  26: 7125267.778 ops/s
# Warmup Iteration  27: 7109157.279 ops/s
# Warmup Iteration  28: 7103091.388 ops/s
# Warmup Iteration  29: 7130147.188 ops/s
# Warmup Iteration  30: 7117181.866 ops/s
Iteration   1: 7114857.950 ops/s
Iteration   2: 7129858.812 ops/s
Iteration   3: 7102370.996 ops/s
Iteration   4: 7106942.475 ops/s
Iteration   5: 7115572.623 ops/s
Iteration   6: 7099252.544 ops/s
Iteration   7: 7117937.075 ops/s
Iteration   8: 7126239.402 ops/s
Iteration   9: 7105861.192 ops/s
Iteration  10: 7119433.102 ops/s
Iteration  11: 7123108.174 ops/s
Iteration  12: 7103160.334 ops/s
Iteration  13: 7115021.223 ops/s
Iteration  14: 7098107.700 ops/s
Iteration  15: 7114297.745 ops/s
Iteration  16: 7088195.983 ops/s
Iteration  17: 7106051.905 ops/s
Iteration  18: 7125433.621 ops/s
Iteration  19: 7107864.742 ops/s
Iteration  20: 7099643.029 ops/s
Iteration  21: 7118529.905 ops/s
Iteration  22: 7129967.209 ops/s
Iteration  23: 7092737.374 ops/s
Iteration  24: 7108684.114 ops/s
Iteration  25: 7116178.167 ops/s
Iteration  26: 7105877.069 ops/s
Iteration  27: 7098488.641 ops/s
Iteration  28: 7109826.147 ops/s
Iteration  29: 7088424.116 ops/s
Iteration  30: 7106662.528 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toList":
  7109819.530 ±(99.9%) 7591.571 ops/s [Average]
  (min, avg, max) = (7088195.983, 7109819.530, 7129967.209), stdev = 11362.707
  CI (99.9%): [7102227.959, 7117411.101] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toList  thrpt   30  7109819.530 ± 7591.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1961098.646 ops/s
# Warmup Iteration   2: 2265370.325 ops/s
# Warmup Iteration   3: 3064269.641 ops/s
# Warmup Iteration   4: 3096724.255 ops/s
# Warmup Iteration   5: 3054364.869 ops/s
# Warmup Iteration   6: 3079707.234 ops/s
# Warmup Iteration   7: 3093748.716 ops/s
# Warmup Iteration   8: 3074409.839 ops/s
# Warmup Iteration   9: 3049078.109 ops/s
# Warmup Iteration  10: 2507015.759 ops/s
# Warmup Iteration  11: 3103605.686 ops/s
# Warmup Iteration  12: 3097381.653 ops/s
# Warmup Iteration  13: 3101833.144 ops/s
# Warmup Iteration  14: 3099076.803 ops/s
# Warmup Iteration  15: 3098040.341 ops/s
# Warmup Iteration  16: 3102429.779 ops/s
# Warmup Iteration  17: 3091649.104 ops/s
# Warmup Iteration  18: 3102022.643 ops/s
# Warmup Iteration  19: 3101842.669 ops/s
# Warmup Iteration  20: 3069742.091 ops/s
# Warmup Iteration  21: 3103271.604 ops/s
# Warmup Iteration  22: 3098695.641 ops/s
# Warmup Iteration  23: 3096948.536 ops/s
# Warmup Iteration  24: 3102596.765 ops/s
# Warmup Iteration  25: 3094239.872 ops/s
# Warmup Iteration  26: 3103318.060 ops/s
# Warmup Iteration  27: 3096463.953 ops/s
# Warmup Iteration  28: 3099593.074 ops/s
# Warmup Iteration  29: 3102175.276 ops/s
# Warmup Iteration  30: 3099776.145 ops/s
Iteration   1: 3104715.113 ops/s
Iteration   2: 3102137.223 ops/s
Iteration   3: 3092557.428 ops/s
Iteration   4: 3101036.384 ops/s
Iteration   5: 3104989.813 ops/s
Iteration   6: 3099147.277 ops/s
Iteration   7: 3102750.302 ops/s
Iteration   8: 3096201.861 ops/s
Iteration   9: 3080693.266 ops/s
Iteration  10: 3100268.153 ops/s
Iteration  11: 3106023.163 ops/s
Iteration  12: 3098670.243 ops/s
Iteration  13: 3094313.200 ops/s
Iteration  14: 3104672.531 ops/s
Iteration  15: 3104001.059 ops/s
Iteration  16: 3098919.889 ops/s
Iteration  17: 3104979.754 ops/s
Iteration  18: 3103127.017 ops/s
Iteration  19: 3098052.030 ops/s
Iteration  20: 3104018.969 ops/s
Iteration  21: 3072152.582 ops/s
Iteration  22: 3097829.567 ops/s
Iteration  23: 3099208.477 ops/s
Iteration  24: 3103915.751 ops/s
Iteration  25: 3104837.719 ops/s
Iteration  26: 3094272.477 ops/s
Iteration  27: 3100616.901 ops/s
Iteration  28: 3100693.387 ops/s
Iteration  29: 3099141.593 ops/s
Iteration  30: 3068220.831 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toReversed":
  3098072.132 ±(99.9%) 6103.202 ops/s [Average]
  (min, avg, max) = (3068220.831, 3098072.132, 3106023.163), stdev = 9134.986
  CI (99.9%): [3091968.930, 3104175.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toReversed  thrpt   30  3098072.132 ± 6103.202  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4534696.019 ops/s
# Warmup Iteration   2: 11164036.986 ops/s
# Warmup Iteration   3: 11027078.271 ops/s
# Warmup Iteration   4: 9241150.827 ops/s
# Warmup Iteration   5: 11031054.161 ops/s
# Warmup Iteration   6: 11082927.886 ops/s
# Warmup Iteration   7: 11043504.456 ops/s
# Warmup Iteration   8: 11058313.396 ops/s
# Warmup Iteration   9: 11068218.735 ops/s
# Warmup Iteration  10: 11034414.316 ops/s
# Warmup Iteration  11: 11043728.234 ops/s
# Warmup Iteration  12: 11052178.094 ops/s
# Warmup Iteration  13: 11041816.600 ops/s
# Warmup Iteration  14: 11062711.051 ops/s
# Warmup Iteration  15: 11071250.537 ops/s
# Warmup Iteration  16: 11058338.601 ops/s
# Warmup Iteration  17: 11055645.639 ops/s
# Warmup Iteration  18: 11048262.843 ops/s
# Warmup Iteration  19: 11048332.966 ops/s
# Warmup Iteration  20: 11064958.112 ops/s
# Warmup Iteration  21: 11050781.727 ops/s
# Warmup Iteration  22: 11034011.564 ops/s
# Warmup Iteration  23: 11037398.750 ops/s
# Warmup Iteration  24: 11049379.324 ops/s
# Warmup Iteration  25: 11044934.197 ops/s
# Warmup Iteration  26: 11027951.305 ops/s
# Warmup Iteration  27: 11040394.775 ops/s
# Warmup Iteration  28: 11026578.278 ops/s
# Warmup Iteration  29: 11038962.139 ops/s
# Warmup Iteration  30: 11071187.690 ops/s
Iteration   1: 11072065.423 ops/s
Iteration   2: 11080494.826 ops/s
Iteration   3: 11006662.146 ops/s
Iteration   4: 11057703.008 ops/s
Iteration   5: 11070857.604 ops/s
Iteration   6: 11066208.798 ops/s
Iteration   7: 11080569.424 ops/s
Iteration   8: 11058235.323 ops/s
Iteration   9: 11077260.921 ops/s
Iteration  10: 11065648.605 ops/s
Iteration  11: 11048785.608 ops/s
Iteration  12: 11054498.534 ops/s
Iteration  13: 11045726.728 ops/s
Iteration  14: 11039210.684 ops/s
Iteration  15: 11009252.887 ops/s
Iteration  16: 11094492.757 ops/s
Iteration  17: 11069452.556 ops/s
Iteration  18: 11058559.236 ops/s
Iteration  19: 11031403.731 ops/s
Iteration  20: 11062612.192 ops/s
Iteration  21: 11047267.588 ops/s
Iteration  22: 11048947.724 ops/s
Iteration  23: 11088224.850 ops/s
Iteration  24: 11050276.828 ops/s
Iteration  25: 11071714.314 ops/s
Iteration  26: 10838679.926 ops/s
Iteration  27: 11076137.517 ops/s
Iteration  28: 11076800.132 ops/s
Iteration  29: 11065707.386 ops/s
Iteration  30: 11066824.842 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedList":
  11052676.070 ±(99.9%) 30163.255 ops/s [Average]
  (min, avg, max) = (10838679.926, 11052676.070, 11094492.757), stdev = 45146.943
  CI (99.9%): [11022512.815, 11082839.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toSortedList  thrpt   30  11052676.070 ± 30163.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2799621.908 ops/s
# Warmup Iteration   2: 3525948.710 ops/s
# Warmup Iteration   3: 4480157.899 ops/s
# Warmup Iteration   4: 4414542.342 ops/s
# Warmup Iteration   5: 4496274.517 ops/s
# Warmup Iteration   6: 4500155.774 ops/s
# Warmup Iteration   7: 4499281.852 ops/s
# Warmup Iteration   8: 4494641.913 ops/s
# Warmup Iteration   9: 3758729.501 ops/s
# Warmup Iteration  10: 4503632.231 ops/s
# Warmup Iteration  11: 4495973.452 ops/s
# Warmup Iteration  12: 4503685.742 ops/s
# Warmup Iteration  13: 4496129.099 ops/s
# Warmup Iteration  14: 4496863.887 ops/s
# Warmup Iteration  15: 4494660.840 ops/s
# Warmup Iteration  16: 4501346.186 ops/s
# Warmup Iteration  17: 4503142.568 ops/s
# Warmup Iteration  18: 4516170.580 ops/s
# Warmup Iteration  19: 4500435.591 ops/s
# Warmup Iteration  20: 4505743.891 ops/s
# Warmup Iteration  21: 4501041.107 ops/s
# Warmup Iteration  22: 4491210.760 ops/s
# Warmup Iteration  23: 4511169.114 ops/s
# Warmup Iteration  24: 4508268.022 ops/s
# Warmup Iteration  25: 4499789.536 ops/s
# Warmup Iteration  26: 4508976.601 ops/s
# Warmup Iteration  27: 4501458.223 ops/s
# Warmup Iteration  28: 4497394.335 ops/s
# Warmup Iteration  29: 4510106.786 ops/s
# Warmup Iteration  30: 4503140.784 ops/s
Iteration   1: 4509231.380 ops/s
Iteration   2: 4502337.082 ops/s
Iteration   3: 4500304.955 ops/s
Iteration   4: 4504907.522 ops/s
Iteration   5: 4498580.561 ops/s
Iteration   6: 4530188.589 ops/s
Iteration   7: 4510038.950 ops/s
Iteration   8: 4498487.329 ops/s
Iteration   9: 4514703.495 ops/s
Iteration  10: 4505074.309 ops/s
Iteration  11: 4502820.319 ops/s
Iteration  12: 4507942.266 ops/s
Iteration  13: 4513124.846 ops/s
Iteration  14: 4504724.179 ops/s
Iteration  15: 4510079.527 ops/s
Iteration  16: 4495006.245 ops/s
Iteration  17: 4499431.414 ops/s
Iteration  18: 4496262.859 ops/s
Iteration  19: 4507864.744 ops/s
Iteration  20: 4501115.162 ops/s
Iteration  21: 4509469.685 ops/s
Iteration  22: 4513973.549 ops/s
Iteration  23: 4494109.371 ops/s
Iteration  24: 4504967.501 ops/s
Iteration  25: 4503231.070 ops/s
Iteration  26: 4508175.467 ops/s
Iteration  27: 4509721.658 ops/s
Iteration  28: 4499728.350 ops/s
Iteration  29: 4510322.761 ops/s
Iteration  30: 4498948.994 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedListBy":
  4505495.805 ±(99.9%) 4900.960 ops/s [Average]
  (min, avg, max) = (4494109.371, 4505495.805, 4530188.589), stdev = 7335.527
  CI (99.9%): [4500594.844, 4510396.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  4505495.805 ± 4900.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4431125.061 ops/s
# Warmup Iteration   2: 10453710.050 ops/s
# Warmup Iteration   3: 8894449.680 ops/s
# Warmup Iteration   4: 10519150.313 ops/s
# Warmup Iteration   5: 10493888.198 ops/s
# Warmup Iteration   6: 10495563.628 ops/s
# Warmup Iteration   7: 10497319.510 ops/s
# Warmup Iteration   8: 10532532.944 ops/s
# Warmup Iteration   9: 10483983.446 ops/s
# Warmup Iteration  10: 10514028.153 ops/s
# Warmup Iteration  11: 10523454.036 ops/s
# Warmup Iteration  12: 10516098.389 ops/s
# Warmup Iteration  13: 10472687.980 ops/s
# Warmup Iteration  14: 10499578.822 ops/s
# Warmup Iteration  15: 10505708.730 ops/s
# Warmup Iteration  16: 10502624.712 ops/s
# Warmup Iteration  17: 10457832.876 ops/s
# Warmup Iteration  18: 10482318.772 ops/s
# Warmup Iteration  19: 10512309.688 ops/s
# Warmup Iteration  20: 10466483.941 ops/s
# Warmup Iteration  21: 10498735.059 ops/s
# Warmup Iteration  22: 10470839.512 ops/s
# Warmup Iteration  23: 10500831.750 ops/s
# Warmup Iteration  24: 10507598.363 ops/s
# Warmup Iteration  25: 10495062.689 ops/s
# Warmup Iteration  26: 10453388.409 ops/s
# Warmup Iteration  27: 10472487.154 ops/s
# Warmup Iteration  28: 10488097.852 ops/s
# Warmup Iteration  29: 10473314.457 ops/s
# Warmup Iteration  30: 10490939.544 ops/s
Iteration   1: 10503335.508 ops/s
Iteration   2: 10430788.171 ops/s
Iteration   3: 10433746.996 ops/s
Iteration   4: 10504261.083 ops/s
Iteration   5: 10464186.894 ops/s
Iteration   6: 10456038.253 ops/s
Iteration   7: 10475505.940 ops/s
Iteration   8: 10495300.204 ops/s
Iteration   9: 10478446.076 ops/s
Iteration  10: 10486354.971 ops/s
Iteration  11: 10470669.268 ops/s
Iteration  12: 10477498.513 ops/s
Iteration  13: 10487159.970 ops/s
Iteration  14: 10507439.951 ops/s
Iteration  15: 10502189.260 ops/s
Iteration  16: 10509689.096 ops/s
Iteration  17: 10490366.856 ops/s
Iteration  18: 10484832.575 ops/s
Iteration  19: 10489584.923 ops/s
Iteration  20: 10490726.347 ops/s
Iteration  21: 10490237.683 ops/s
Iteration  22: 10522837.508 ops/s
Iteration  23: 10436901.837 ops/s
Iteration  24: 10494492.253 ops/s
Iteration  25: 10496462.699 ops/s
Iteration  26: 10518585.240 ops/s
Iteration  27: 10466009.254 ops/s
Iteration  28: 10471058.955 ops/s
Iteration  29: 10479946.807 ops/s
Iteration  30: 10496235.630 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSet":
  10483696.291 ±(99.9%) 15356.718 ops/s [Average]
  (min, avg, max) = (10430788.171, 10483696.291, 10522837.508), stdev = 22985.214
  CI (99.9%): [10468339.573, 10499053.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSet  thrpt   30  10483696.291 ± 15356.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1062589.002 ops/s
# Warmup Iteration   2: 2264781.571 ops/s
# Warmup Iteration   3: 2371705.719 ops/s
# Warmup Iteration   4: 2394930.173 ops/s
# Warmup Iteration   5: 2001240.820 ops/s
# Warmup Iteration   6: 2392956.430 ops/s
# Warmup Iteration   7: 2395878.388 ops/s
# Warmup Iteration   8: 2391050.725 ops/s
# Warmup Iteration   9: 2392400.736 ops/s
# Warmup Iteration  10: 2390729.725 ops/s
# Warmup Iteration  11: 2391124.712 ops/s
# Warmup Iteration  12: 2392120.792 ops/s
# Warmup Iteration  13: 2389763.993 ops/s
# Warmup Iteration  14: 2383163.504 ops/s
# Warmup Iteration  15: 2385789.381 ops/s
# Warmup Iteration  16: 2381113.467 ops/s
# Warmup Iteration  17: 2375399.558 ops/s
# Warmup Iteration  18: 2375476.582 ops/s
# Warmup Iteration  19: 2373601.075 ops/s
# Warmup Iteration  20: 2379875.557 ops/s
# Warmup Iteration  21: 2374862.872 ops/s
# Warmup Iteration  22: 2379757.085 ops/s
# Warmup Iteration  23: 2371487.974 ops/s
# Warmup Iteration  24: 2378241.016 ops/s
# Warmup Iteration  25: 2379144.137 ops/s
# Warmup Iteration  26: 2383922.907 ops/s
# Warmup Iteration  27: 2380179.587 ops/s
# Warmup Iteration  28: 2377340.411 ops/s
# Warmup Iteration  29: 2378710.722 ops/s
# Warmup Iteration  30: 2377296.062 ops/s
Iteration   1: 2381417.719 ops/s
Iteration   2: 2382653.310 ops/s
Iteration   3: 2378847.717 ops/s
Iteration   4: 2381633.837 ops/s
Iteration   5: 2377764.788 ops/s
Iteration   6: 2387198.900 ops/s
Iteration   7: 2374649.008 ops/s
Iteration   8: 2382123.363 ops/s
Iteration   9: 2377952.951 ops/s
Iteration  10: 2380403.481 ops/s
Iteration  11: 2375955.896 ops/s
Iteration  12: 2380150.781 ops/s
Iteration  13: 2378938.822 ops/s
Iteration  14: 2387066.648 ops/s
Iteration  15: 2377071.176 ops/s
Iteration  16: 2384486.982 ops/s
Iteration  17: 2384024.992 ops/s
Iteration  18: 2382212.219 ops/s
Iteration  19: 2378997.348 ops/s
Iteration  20: 2383129.868 ops/s
Iteration  21: 2383217.782 ops/s
Iteration  22: 2380937.257 ops/s
Iteration  23: 2377237.519 ops/s
Iteration  24: 2381080.729 ops/s
Iteration  25: 2384153.401 ops/s
Iteration  26: 2373398.150 ops/s
Iteration  27: 2383241.671 ops/s
Iteration  28: 2377718.348 ops/s
Iteration  29: 2372955.731 ops/s
Iteration  30: 2386499.553 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetBy":
  2380570.665 ±(99.9%) 2524.627 ops/s [Average]
  (min, avg, max) = (2372955.731, 2380570.665, 2387198.900), stdev = 3778.743
  CI (99.9%): [2378046.038, 2383095.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  2380570.665 ± 2524.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2415767.659 ops/s
# Warmup Iteration   2: 6193775.972 ops/s
# Warmup Iteration   3: 5235817.846 ops/s
# Warmup Iteration   4: 6239457.511 ops/s
# Warmup Iteration   5: 6235042.132 ops/s
# Warmup Iteration   6: 6231895.164 ops/s
# Warmup Iteration   7: 6229055.166 ops/s
# Warmup Iteration   8: 6226084.242 ops/s
# Warmup Iteration   9: 6251214.706 ops/s
# Warmup Iteration  10: 6234824.535 ops/s
# Warmup Iteration  11: 6245541.874 ops/s
# Warmup Iteration  12: 6230725.760 ops/s
# Warmup Iteration  13: 6246499.721 ops/s
# Warmup Iteration  14: 6234524.290 ops/s
# Warmup Iteration  15: 6243439.112 ops/s
# Warmup Iteration  16: 6226137.117 ops/s
# Warmup Iteration  17: 6231383.067 ops/s
# Warmup Iteration  18: 6229485.401 ops/s
# Warmup Iteration  19: 6241120.706 ops/s
# Warmup Iteration  20: 6242297.159 ops/s
# Warmup Iteration  21: 6244159.892 ops/s
# Warmup Iteration  22: 6233938.752 ops/s
# Warmup Iteration  23: 6233722.934 ops/s
# Warmup Iteration  24: 6230793.431 ops/s
# Warmup Iteration  25: 6247512.522 ops/s
# Warmup Iteration  26: 6242798.884 ops/s
# Warmup Iteration  27: 6241786.596 ops/s
# Warmup Iteration  28: 6246693.422 ops/s
# Warmup Iteration  29: 6241919.319 ops/s
# Warmup Iteration  30: 6243969.352 ops/s
Iteration   1: 6242887.501 ops/s
Iteration   2: 6248326.514 ops/s
Iteration   3: 6239264.039 ops/s
Iteration   4: 6235264.845 ops/s
Iteration   5: 6224746.266 ops/s
Iteration   6: 6248053.142 ops/s
Iteration   7: 6231321.117 ops/s
Iteration   8: 6242782.188 ops/s
Iteration   9: 6222239.055 ops/s
Iteration  10: 6239967.819 ops/s
Iteration  11: 6247685.066 ops/s
Iteration  12: 6244315.313 ops/s
Iteration  13: 6237355.364 ops/s
Iteration  14: 6248231.814 ops/s
Iteration  15: 6248416.639 ops/s
Iteration  16: 6239911.583 ops/s
Iteration  17: 6231192.602 ops/s
Iteration  18: 6243760.847 ops/s
Iteration  19: 6187455.539 ops/s
Iteration  20: 6243808.161 ops/s
Iteration  21: 6244854.195 ops/s
Iteration  22: 6250289.827 ops/s
Iteration  23: 6230812.158 ops/s
Iteration  24: 6234582.247 ops/s
Iteration  25: 6231011.250 ops/s
Iteration  26: 6242378.918 ops/s
Iteration  27: 6220108.334 ops/s
Iteration  28: 6253158.905 ops/s
Iteration  29: 6232256.432 ops/s
Iteration  30: 6231481.424 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetWithComparator":
  6237263.970 ±(99.9%) 8499.668 ops/s [Average]
  (min, avg, max) = (6187455.539, 6237263.970, 6253158.905), stdev = 12721.903
  CI (99.9%): [6228764.303, 6245763.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  6237263.970 ± 8499.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3891568.548 ops/s
# Warmup Iteration   2: 9754815.027 ops/s
# Warmup Iteration   3: 8363159.146 ops/s
# Warmup Iteration   4: 9855855.435 ops/s
# Warmup Iteration   5: 9971199.839 ops/s
# Warmup Iteration   6: 9945488.674 ops/s
# Warmup Iteration   7: 9963822.639 ops/s
# Warmup Iteration   8: 9969525.500 ops/s
# Warmup Iteration   9: 9936023.805 ops/s
# Warmup Iteration  10: 9948407.011 ops/s
# Warmup Iteration  11: 9954074.767 ops/s
# Warmup Iteration  12: 9977352.806 ops/s
# Warmup Iteration  13: 9970031.709 ops/s
# Warmup Iteration  14: 9981617.272 ops/s
# Warmup Iteration  15: 9960610.879 ops/s
# Warmup Iteration  16: 9987494.612 ops/s
# Warmup Iteration  17: 9978898.710 ops/s
# Warmup Iteration  18: 9978040.397 ops/s
# Warmup Iteration  19: 9958836.930 ops/s
# Warmup Iteration  20: 9967596.673 ops/s
# Warmup Iteration  21: 9918590.535 ops/s
# Warmup Iteration  22: 9982412.892 ops/s
# Warmup Iteration  23: 9992326.829 ops/s
# Warmup Iteration  24: 9971533.963 ops/s
# Warmup Iteration  25: 9973913.737 ops/s
# Warmup Iteration  26: 9964319.628 ops/s
# Warmup Iteration  27: 9974214.061 ops/s
# Warmup Iteration  28: 9969973.656 ops/s
# Warmup Iteration  29: 9979949.364 ops/s
# Warmup Iteration  30: 9969508.358 ops/s
Iteration   1: 9968726.343 ops/s
Iteration   2: 9972309.869 ops/s
Iteration   3: 9985151.778 ops/s
Iteration   4: 9955409.540 ops/s
Iteration   5: 9958906.041 ops/s
Iteration   6: 9987476.222 ops/s
Iteration   7: 9991634.640 ops/s
Iteration   8: 9975943.526 ops/s
Iteration   9: 9962614.976 ops/s
Iteration  10: 9985438.287 ops/s
Iteration  11: 10011170.387 ops/s
Iteration  12: 9976840.211 ops/s
Iteration  13: 9955840.147 ops/s
Iteration  14: 9977489.670 ops/s
Iteration  15: 9994738.712 ops/s
Iteration  16: 9968899.499 ops/s
Iteration  17: 9961192.426 ops/s
Iteration  18: 9996240.804 ops/s
Iteration  19: 9972418.871 ops/s
Iteration  20: 9993369.297 ops/s
Iteration  21: 9931539.496 ops/s
Iteration  22: 9987202.751 ops/s
Iteration  23: 9990333.833 ops/s
Iteration  24: 9974033.538 ops/s
Iteration  25: 9995797.807 ops/s
Iteration  26: 9965558.407 ops/s
Iteration  27: 9977621.255 ops/s
Iteration  28: 9977530.982 ops/s
Iteration  29: 10001625.402 ops/s
Iteration  30: 9969470.433 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_toStack":
  9977417.505 ±(99.9%) 11068.070 ops/s [Average]
  (min, avg, max) = (9931539.496, 9977417.505, 10011170.387), stdev = 16566.168
  CI (99.9%): [9966349.435, 9988485.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_toStack  thrpt   30  9977417.505 ± 11068.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524529.853 ops/s
# Warmup Iteration   2: 876042.664 ops/s
# Warmup Iteration   3: 1008419.096 ops/s
# Warmup Iteration   4: 1015342.476 ops/s
# Warmup Iteration   5: 1012971.261 ops/s
# Warmup Iteration   6: 841866.613 ops/s
# Warmup Iteration   7: 1014604.324 ops/s
# Warmup Iteration   8: 1016188.047 ops/s
# Warmup Iteration   9: 1015172.426 ops/s
# Warmup Iteration  10: 1013941.435 ops/s
# Warmup Iteration  11: 1013980.001 ops/s
# Warmup Iteration  12: 1014876.745 ops/s
# Warmup Iteration  13: 1015511.205 ops/s
# Warmup Iteration  14: 1013554.994 ops/s
# Warmup Iteration  15: 1015360.004 ops/s
# Warmup Iteration  16: 1014615.428 ops/s
# Warmup Iteration  17: 1014762.350 ops/s
# Warmup Iteration  18: 1015092.838 ops/s
# Warmup Iteration  19: 1015861.267 ops/s
# Warmup Iteration  20: 1015416.887 ops/s
# Warmup Iteration  21: 1015422.605 ops/s
# Warmup Iteration  22: 1013250.684 ops/s
# Warmup Iteration  23: 1013303.486 ops/s
# Warmup Iteration  24: 1013998.989 ops/s
# Warmup Iteration  25: 1013006.782 ops/s
# Warmup Iteration  26: 1013943.324 ops/s
# Warmup Iteration  27: 1011931.390 ops/s
# Warmup Iteration  28: 1015106.322 ops/s
# Warmup Iteration  29: 1015999.993 ops/s
# Warmup Iteration  30: 1014559.687 ops/s
Iteration   1: 1014736.675 ops/s
Iteration   2: 1013907.500 ops/s
Iteration   3: 1013095.694 ops/s
Iteration   4: 1013812.213 ops/s
Iteration   5: 1019281.080 ops/s
Iteration   6: 1015797.462 ops/s
Iteration   7: 1017305.732 ops/s
Iteration   8: 1014245.228 ops/s
Iteration   9: 1013975.399 ops/s
Iteration  10: 1015236.584 ops/s
Iteration  11: 1014189.099 ops/s
Iteration  12: 1016444.847 ops/s
Iteration  13: 1010493.093 ops/s
Iteration  14: 1016639.229 ops/s
Iteration  15: 1015072.524 ops/s
Iteration  16: 1015842.642 ops/s
Iteration  17: 1014607.465 ops/s
Iteration  18: 1017451.200 ops/s
Iteration  19: 1011849.403 ops/s
Iteration  20: 1014878.527 ops/s
Iteration  21: 1014240.331 ops/s
Iteration  22: 1015184.865 ops/s
Iteration  23: 1015143.100 ops/s
Iteration  24: 1016279.954 ops/s
Iteration  25: 1016041.886 ops/s
Iteration  26: 1014650.948 ops/s
Iteration  27: 1015381.456 ops/s
Iteration  28: 1015400.338 ops/s
Iteration  29: 1016791.402 ops/s
Iteration  30: 1013121.937 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zip":
  1015036.594 ±(99.9%) 1145.830 ops/s [Average]
  (min, avg, max) = (1010493.093, 1015036.594, 1019281.080), stdev = 1715.025
  CI (99.9%): [1013890.763, 1016182.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_zip  thrpt   30  1015036.594 ± 1145.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1121570.818 ops/s
# Warmup Iteration   2: 2008755.535 ops/s
# Warmup Iteration   3: 2235285.562 ops/s
# Warmup Iteration   4: 2240259.735 ops/s
# Warmup Iteration   5: 2168243.417 ops/s
# Warmup Iteration   6: 1944923.781 ops/s
# Warmup Iteration   7: 2239161.832 ops/s
# Warmup Iteration   8: 2236752.547 ops/s
# Warmup Iteration   9: 2237668.874 ops/s
# Warmup Iteration  10: 2243700.885 ops/s
# Warmup Iteration  11: 2239819.869 ops/s
# Warmup Iteration  12: 2243482.479 ops/s
# Warmup Iteration  13: 2242227.549 ops/s
# Warmup Iteration  14: 2239293.292 ops/s
# Warmup Iteration  15: 2238725.115 ops/s
# Warmup Iteration  16: 2242698.803 ops/s
# Warmup Iteration  17: 2241393.689 ops/s
# Warmup Iteration  18: 2242634.060 ops/s
# Warmup Iteration  19: 2241837.055 ops/s
# Warmup Iteration  20: 2245190.594 ops/s
# Warmup Iteration  21: 2238228.588 ops/s
# Warmup Iteration  22: 2241411.236 ops/s
# Warmup Iteration  23: 2237974.640 ops/s
# Warmup Iteration  24: 2240543.954 ops/s
# Warmup Iteration  25: 2245009.258 ops/s
# Warmup Iteration  26: 2246016.025 ops/s
# Warmup Iteration  27: 2242083.196 ops/s
# Warmup Iteration  28: 2243100.254 ops/s
# Warmup Iteration  29: 2241071.369 ops/s
# Warmup Iteration  30: 2236282.723 ops/s
Iteration   1: 2243670.840 ops/s
Iteration   2: 2238676.561 ops/s
Iteration   3: 2242557.288 ops/s
Iteration   4: 2246380.840 ops/s
Iteration   5: 2247019.879 ops/s
Iteration   6: 2246438.030 ops/s
Iteration   7: 2240675.918 ops/s
Iteration   8: 2244575.338 ops/s
Iteration   9: 2243004.828 ops/s
Iteration  10: 2245156.121 ops/s
Iteration  11: 2239136.054 ops/s
Iteration  12: 2238049.952 ops/s
Iteration  13: 2242185.159 ops/s
Iteration  14: 2239790.644 ops/s
Iteration  15: 2242148.038 ops/s
Iteration  16: 2239223.140 ops/s
Iteration  17: 2237743.496 ops/s
Iteration  18: 2244826.607 ops/s
Iteration  19: 2240429.619 ops/s
Iteration  20: 2244675.092 ops/s
Iteration  21: 2236722.350 ops/s
Iteration  22: 2240971.727 ops/s
Iteration  23: 2240893.907 ops/s
Iteration  24: 2236406.274 ops/s
Iteration  25: 2246531.151 ops/s
Iteration  26: 2243279.938 ops/s
Iteration  27: 2240726.344 ops/s
Iteration  28: 2245729.169 ops/s
Iteration  29: 2196747.537 ops/s
Iteration  30: 2248952.691 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableDoubletonListTest._Benchmark.benchmark_zipWithIndex":
  2240777.484 ±(99.9%) 5976.023 ops/s [Average]
  (min, avg, max) = (2196747.537, 2240777.484, 2248952.691), stdev = 8944.630
  CI (99.9%): [2234801.462, 2246753.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableDoubletonListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2240777.484 ± 5976.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747991.754 ops/s
# Warmup Iteration   2: 797377.953 ops/s
# Warmup Iteration   3: 1009424.685 ops/s
# Warmup Iteration   4: 1027411.017 ops/s
# Warmup Iteration   5: 1030853.279 ops/s
# Warmup Iteration   6: 1024519.943 ops/s
# Warmup Iteration   7: 1027332.443 ops/s
# Warmup Iteration   8: 1027779.712 ops/s
# Warmup Iteration   9: 1028790.973 ops/s
# Warmup Iteration  10: 1031199.177 ops/s
# Warmup Iteration  11: 1031137.839 ops/s
# Warmup Iteration  12: 907811.081 ops/s
# Warmup Iteration  13: 988039.009 ops/s
# Warmup Iteration  14: 1029548.082 ops/s
# Warmup Iteration  15: 1024414.926 ops/s
# Warmup Iteration  16: 1028185.736 ops/s
# Warmup Iteration  17: 1093132.316 ops/s
# Warmup Iteration  18: 1093199.227 ops/s
# Warmup Iteration  19: 1094680.086 ops/s
# Warmup Iteration  20: 1095869.201 ops/s
# Warmup Iteration  21: 1097676.633 ops/s
# Warmup Iteration  22: 1097622.979 ops/s
# Warmup Iteration  23: 1096628.132 ops/s
# Warmup Iteration  24: 1099103.524 ops/s
# Warmup Iteration  25: 1093665.495 ops/s
# Warmup Iteration  26: 1096271.740 ops/s
# Warmup Iteration  27: 1094309.272 ops/s
# Warmup Iteration  28: 1097310.105 ops/s
# Warmup Iteration  29: 1096765.561 ops/s
# Warmup Iteration  30: 1096634.716 ops/s
Iteration   1: 1093805.793 ops/s
Iteration   2: 1096077.426 ops/s
Iteration   3: 1097641.262 ops/s
Iteration   4: 1088450.045 ops/s
Iteration   5: 1098802.009 ops/s
Iteration   6: 1096942.283 ops/s
Iteration   7: 1098194.772 ops/s
Iteration   8: 1094977.336 ops/s
Iteration   9: 1091945.681 ops/s
Iteration  10: 1097727.002 ops/s
Iteration  11: 1097110.089 ops/s
Iteration  12: 1097699.526 ops/s
Iteration  13: 1094857.594 ops/s
Iteration  14: 1095294.491 ops/s
Iteration  15: 1095619.771 ops/s
Iteration  16: 1100003.137 ops/s
Iteration  17: 1094999.205 ops/s
Iteration  18: 1096363.613 ops/s
Iteration  19: 1095545.913 ops/s
Iteration  20: 1098964.518 ops/s
Iteration  21: 1093392.867 ops/s
Iteration  22: 1099863.847 ops/s
Iteration  23: 1097157.737 ops/s
Iteration  24: 1097690.274 ops/s
Iteration  25: 1095260.660 ops/s
Iteration  26: 1098883.657 ops/s
Iteration  27: 1097966.657 ops/s
Iteration  28: 1099206.148 ops/s
Iteration  29: 1093870.238 ops/s
Iteration  30: 1095007.595 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_add":
  1096310.705 ±(99.9%) 1675.193 ops/s [Average]
  (min, avg, max) = (1088450.045, 1096310.705, 1100003.137), stdev = 2507.351
  CI (99.9%): [1094635.512, 1097985.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_add  thrpt   30  1096310.705 ± 1675.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748587.374 ops/s
# Warmup Iteration   2: 795616.490 ops/s
# Warmup Iteration   3: 1003291.431 ops/s
# Warmup Iteration   4: 1009899.150 ops/s
# Warmup Iteration   5: 1010538.313 ops/s
# Warmup Iteration   6: 1003434.258 ops/s
# Warmup Iteration   7: 1011223.017 ops/s
# Warmup Iteration   8: 1013521.519 ops/s
# Warmup Iteration   9: 1006754.600 ops/s
# Warmup Iteration  10: 1007096.137 ops/s
# Warmup Iteration  11: 1017277.064 ops/s
# Warmup Iteration  12: 907049.858 ops/s
# Warmup Iteration  13: 973069.131 ops/s
# Warmup Iteration  14: 1020792.152 ops/s
# Warmup Iteration  15: 1018013.682 ops/s
# Warmup Iteration  16: 1018523.269 ops/s
# Warmup Iteration  17: 1086823.908 ops/s
# Warmup Iteration  18: 1091374.992 ops/s
# Warmup Iteration  19: 1089164.286 ops/s
# Warmup Iteration  20: 1089999.432 ops/s
# Warmup Iteration  21: 1087244.422 ops/s
# Warmup Iteration  22: 1086551.369 ops/s
# Warmup Iteration  23: 1087091.733 ops/s
# Warmup Iteration  24: 1090477.146 ops/s
# Warmup Iteration  25: 1087523.307 ops/s
# Warmup Iteration  26: 1088417.013 ops/s
# Warmup Iteration  27: 1085312.693 ops/s
# Warmup Iteration  28: 1089008.617 ops/s
# Warmup Iteration  29: 1084846.798 ops/s
# Warmup Iteration  30: 1087510.294 ops/s
Iteration   1: 1084802.906 ops/s
Iteration   2: 1086320.403 ops/s
Iteration   3: 1083108.142 ops/s
Iteration   4: 1089416.864 ops/s
Iteration   5: 1087128.484 ops/s
Iteration   6: 1088275.371 ops/s
Iteration   7: 1085770.987 ops/s
Iteration   8: 1089029.689 ops/s
Iteration   9: 1088960.142 ops/s
Iteration  10: 1086934.715 ops/s
Iteration  11: 1088870.127 ops/s
Iteration  12: 1086768.351 ops/s
Iteration  13: 1083341.166 ops/s
Iteration  14: 1088133.344 ops/s
Iteration  15: 1088187.980 ops/s
Iteration  16: 1090691.932 ops/s
Iteration  17: 1088108.978 ops/s
Iteration  18: 1083688.185 ops/s
Iteration  19: 1091470.619 ops/s
Iteration  20: 1090435.880 ops/s
Iteration  21: 1088578.573 ops/s
Iteration  22: 1089355.501 ops/s
Iteration  23: 1078835.740 ops/s
Iteration  24: 1087082.092 ops/s
Iteration  25: 1087042.672 ops/s
Iteration  26: 1088380.064 ops/s
Iteration  27: 1079641.243 ops/s
Iteration  28: 1089613.043 ops/s
Iteration  29: 1089458.477 ops/s
Iteration  30: 1089396.915 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAll":
  1087227.619 ±(99.9%) 2009.987 ops/s [Average]
  (min, avg, max) = (1078835.740, 1087227.619, 1091470.619), stdev = 3008.455
  CI (99.9%): [1085217.632, 1089237.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_addAll  thrpt   30  1087227.619 ± 2009.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 739091.937 ops/s
# Warmup Iteration   2: 791464.887 ops/s
# Warmup Iteration   3: 991605.392 ops/s
# Warmup Iteration   4: 1010434.759 ops/s
# Warmup Iteration   5: 1012293.925 ops/s
# Warmup Iteration   6: 1001036.523 ops/s
# Warmup Iteration   7: 1007887.571 ops/s
# Warmup Iteration   8: 1009814.713 ops/s
# Warmup Iteration   9: 1014200.423 ops/s
# Warmup Iteration  10: 1016301.578 ops/s
# Warmup Iteration  11: 1013879.536 ops/s
# Warmup Iteration  12: 910038.308 ops/s
# Warmup Iteration  13: 958590.425 ops/s
# Warmup Iteration  14: 1008173.207 ops/s
# Warmup Iteration  15: 1008357.006 ops/s
# Warmup Iteration  16: 1009095.738 ops/s
# Warmup Iteration  17: 1069156.317 ops/s
# Warmup Iteration  18: 1072555.455 ops/s
# Warmup Iteration  19: 1070754.995 ops/s
# Warmup Iteration  20: 1068111.204 ops/s
# Warmup Iteration  21: 1068239.172 ops/s
# Warmup Iteration  22: 1071458.502 ops/s
# Warmup Iteration  23: 1072528.370 ops/s
# Warmup Iteration  24: 1070688.924 ops/s
# Warmup Iteration  25: 1071124.453 ops/s
# Warmup Iteration  26: 1069151.288 ops/s
# Warmup Iteration  27: 1068294.056 ops/s
# Warmup Iteration  28: 1071503.797 ops/s
# Warmup Iteration  29: 1067439.307 ops/s
# Warmup Iteration  30: 1070353.538 ops/s
Iteration   1: 1065251.415 ops/s
Iteration   2: 1071860.935 ops/s
Iteration   3: 1071124.133 ops/s
Iteration   4: 1069461.112 ops/s
Iteration   5: 1071135.903 ops/s
Iteration   6: 1071806.188 ops/s
Iteration   7: 1071912.724 ops/s
Iteration   8: 1071452.348 ops/s
Iteration   9: 1065691.414 ops/s
Iteration  10: 1064820.591 ops/s
Iteration  11: 1072541.000 ops/s
Iteration  12: 1072135.373 ops/s
Iteration  13: 1068205.717 ops/s
Iteration  14: 1060978.986 ops/s
Iteration  15: 1070467.995 ops/s
Iteration  16: 1067128.322 ops/s
Iteration  17: 1073592.221 ops/s
Iteration  18: 1066615.572 ops/s
Iteration  19: 1069533.283 ops/s
Iteration  20: 1072204.421 ops/s
Iteration  21: 1073101.496 ops/s
Iteration  22: 1068944.151 ops/s
Iteration  23: 1070021.080 ops/s
Iteration  24: 1070733.834 ops/s
Iteration  25: 1067853.344 ops/s
Iteration  26: 1068605.122 ops/s
Iteration  27: 1072668.907 ops/s
Iteration  28: 1067842.615 ops/s
Iteration  29: 1068815.670 ops/s
Iteration  30: 1069107.649 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAllAtIndex":
  1069520.451 ±(99.9%) 1928.796 ops/s [Average]
  (min, avg, max) = (1060978.986, 1069520.451, 1073592.221), stdev = 2886.932
  CI (99.9%): [1067591.655, 1071449.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1069520.451 ± 1928.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747142.256 ops/s
# Warmup Iteration   2: 794730.650 ops/s
# Warmup Iteration   3: 1008334.918 ops/s
# Warmup Iteration   4: 1025221.024 ops/s
# Warmup Iteration   5: 1026579.677 ops/s
# Warmup Iteration   6: 1025772.148 ops/s
# Warmup Iteration   7: 1029159.384 ops/s
# Warmup Iteration   8: 1032348.832 ops/s
# Warmup Iteration   9: 1031017.982 ops/s
# Warmup Iteration  10: 1031599.197 ops/s
# Warmup Iteration  11: 1027277.471 ops/s
# Warmup Iteration  12: 910469.643 ops/s
# Warmup Iteration  13: 986857.373 ops/s
# Warmup Iteration  14: 1031991.407 ops/s
# Warmup Iteration  15: 1031938.103 ops/s
# Warmup Iteration  16: 1028532.660 ops/s
# Warmup Iteration  17: 1093679.158 ops/s
# Warmup Iteration  18: 1094646.647 ops/s
# Warmup Iteration  19: 1095824.954 ops/s
# Warmup Iteration  20: 1097154.094 ops/s
# Warmup Iteration  21: 1093244.736 ops/s
# Warmup Iteration  22: 1091898.405 ops/s
# Warmup Iteration  23: 1094192.002 ops/s
# Warmup Iteration  24: 1093745.038 ops/s
# Warmup Iteration  25: 1096064.763 ops/s
# Warmup Iteration  26: 1095421.769 ops/s
# Warmup Iteration  27: 1095620.493 ops/s
# Warmup Iteration  28: 1096125.950 ops/s
# Warmup Iteration  29: 1090114.133 ops/s
# Warmup Iteration  30: 1094663.147 ops/s
Iteration   1: 1093473.635 ops/s
Iteration   2: 1091171.012 ops/s
Iteration   3: 1096393.413 ops/s
Iteration   4: 1096444.952 ops/s
Iteration   5: 1092712.737 ops/s
Iteration   6: 1094549.191 ops/s
Iteration   7: 1096116.616 ops/s
Iteration   8: 1096358.390 ops/s
Iteration   9: 1090919.884 ops/s
Iteration  10: 1095534.693 ops/s
Iteration  11: 1094220.670 ops/s
Iteration  12: 1094698.094 ops/s
Iteration  13: 1089632.773 ops/s
Iteration  14: 1099859.227 ops/s
Iteration  15: 1096297.085 ops/s
Iteration  16: 1096429.034 ops/s
Iteration  17: 1087733.310 ops/s
Iteration  18: 1092589.039 ops/s
Iteration  19: 1093376.514 ops/s
Iteration  20: 1095443.544 ops/s
Iteration  21: 1092655.938 ops/s
Iteration  22: 1099078.515 ops/s
Iteration  23: 1094059.158 ops/s
Iteration  24: 1095489.210 ops/s
Iteration  25: 1093731.003 ops/s
Iteration  26: 1095304.669 ops/s
Iteration  27: 1093035.345 ops/s
Iteration  28: 1093247.023 ops/s
Iteration  29: 1093465.111 ops/s
Iteration  30: 1095460.544 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_addAtIndex":
  1094316.011 ±(99.9%) 1688.361 ops/s [Average]
  (min, avg, max) = (1087733.310, 1094316.011, 1099859.227), stdev = 2527.060
  CI (99.9%): [1092627.650, 1096004.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1094316.011 ± 1688.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5631860.987 ops/s
# Warmup Iteration   2: 11462006.861 ops/s
# Warmup Iteration   3: 13868057.830 ops/s
# Warmup Iteration   4: 13896368.673 ops/s
# Warmup Iteration   5: 13853478.552 ops/s
# Warmup Iteration   6: 13814426.689 ops/s
# Warmup Iteration   7: 13751012.087 ops/s
# Warmup Iteration   8: 13872138.032 ops/s
# Warmup Iteration   9: 13872214.039 ops/s
# Warmup Iteration  10: 13929289.080 ops/s
# Warmup Iteration  11: 13869626.956 ops/s
# Warmup Iteration  12: 13847083.135 ops/s
# Warmup Iteration  13: 13889415.311 ops/s
# Warmup Iteration  14: 13879207.293 ops/s
# Warmup Iteration  15: 13865112.196 ops/s
# Warmup Iteration  16: 13823471.237 ops/s
# Warmup Iteration  17: 13854193.654 ops/s
# Warmup Iteration  18: 13835660.712 ops/s
# Warmup Iteration  19: 13856631.035 ops/s
# Warmup Iteration  20: 13808384.227 ops/s
# Warmup Iteration  21: 13840999.811 ops/s
# Warmup Iteration  22: 13875069.306 ops/s
# Warmup Iteration  23: 13851387.032 ops/s
# Warmup Iteration  24: 13829870.715 ops/s
# Warmup Iteration  25: 13835402.521 ops/s
# Warmup Iteration  26: 13840045.145 ops/s
# Warmup Iteration  27: 13794290.300 ops/s
# Warmup Iteration  28: 13860120.350 ops/s
# Warmup Iteration  29: 13803883.577 ops/s
# Warmup Iteration  30: 13846267.943 ops/s
Iteration   1: 13860616.339 ops/s
Iteration   2: 13863597.613 ops/s
Iteration   3: 13824279.891 ops/s
Iteration   4: 13836044.042 ops/s
Iteration   5: 13832458.449 ops/s
Iteration   6: 13917199.541 ops/s
Iteration   7: 13848624.395 ops/s
Iteration   8: 13801251.018 ops/s
Iteration   9: 13887134.557 ops/s
Iteration  10: 13830073.131 ops/s
Iteration  11: 13792139.202 ops/s
Iteration  12: 13837605.333 ops/s
Iteration  13: 13819848.715 ops/s
Iteration  14: 13730896.158 ops/s
Iteration  15: 13834289.873 ops/s
Iteration  16: 13909372.167 ops/s
Iteration  17: 13796710.640 ops/s
Iteration  18: 13821719.244 ops/s
Iteration  19: 13857037.244 ops/s
Iteration  20: 13955910.113 ops/s
Iteration  21: 13783192.736 ops/s
Iteration  22: 13804031.821 ops/s
Iteration  23: 13794415.551 ops/s
Iteration  24: 13821606.977 ops/s
Iteration  25: 13832762.856 ops/s
Iteration  26: 13848462.461 ops/s
Iteration  27: 13784297.905 ops/s
Iteration  28: 13769430.885 ops/s
Iteration  29: 13879674.707 ops/s
Iteration  30: 13819260.261 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByMutating":
  13833131.461 ±(99.9%) 30960.435 ops/s [Average]
  (min, avg, max) = (13730896.158, 13833131.461, 13955910.113), stdev = 46340.126
  CI (99.9%): [13802171.026, 13864091.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  13833131.461 ± 30960.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3787353.604 ops/s
# Warmup Iteration   2: 9801808.018 ops/s
# Warmup Iteration   3: 8227876.836 ops/s
# Warmup Iteration   4: 9874244.175 ops/s
# Warmup Iteration   5: 9848669.397 ops/s
# Warmup Iteration   6: 9881191.898 ops/s
# Warmup Iteration   7: 9888728.390 ops/s
# Warmup Iteration   8: 9862426.331 ops/s
# Warmup Iteration   9: 9859125.901 ops/s
# Warmup Iteration  10: 9869273.896 ops/s
# Warmup Iteration  11: 9865103.596 ops/s
# Warmup Iteration  12: 9896154.771 ops/s
# Warmup Iteration  13: 9883586.171 ops/s
# Warmup Iteration  14: 9853885.920 ops/s
# Warmup Iteration  15: 9830034.643 ops/s
# Warmup Iteration  16: 9862823.319 ops/s
# Warmup Iteration  17: 9874955.855 ops/s
# Warmup Iteration  18: 9885516.014 ops/s
# Warmup Iteration  19: 9901107.742 ops/s
# Warmup Iteration  20: 9879008.014 ops/s
# Warmup Iteration  21: 9888832.067 ops/s
# Warmup Iteration  22: 9905204.459 ops/s
# Warmup Iteration  23: 9891405.832 ops/s
# Warmup Iteration  24: 9860721.420 ops/s
# Warmup Iteration  25: 9886049.982 ops/s
# Warmup Iteration  26: 9866669.991 ops/s
# Warmup Iteration  27: 9872909.005 ops/s
# Warmup Iteration  28: 9883330.430 ops/s
# Warmup Iteration  29: 9892401.985 ops/s
# Warmup Iteration  30: 9897367.319 ops/s
Iteration   1: 9829290.631 ops/s
Iteration   2: 9895237.839 ops/s
Iteration   3: 9862827.910 ops/s
Iteration   4: 9875790.366 ops/s
Iteration   5: 9882433.850 ops/s
Iteration   6: 9877530.717 ops/s
Iteration   7: 9874132.542 ops/s
Iteration   8: 9904201.191 ops/s
Iteration   9: 9854855.051 ops/s
Iteration  10: 9924753.877 ops/s
Iteration  11: 9903128.575 ops/s
Iteration  12: 9859537.393 ops/s
Iteration  13: 9875966.514 ops/s
Iteration  14: 9876025.176 ops/s
Iteration  15: 9899341.157 ops/s
Iteration  16: 9896319.007 ops/s
Iteration  17: 9873514.211 ops/s
Iteration  18: 9880653.247 ops/s
Iteration  19: 9896268.174 ops/s
Iteration  20: 9864291.571 ops/s
Iteration  21: 9888927.271 ops/s
Iteration  22: 9890629.784 ops/s
Iteration  23: 9907840.797 ops/s
Iteration  24: 9878880.841 ops/s
Iteration  25: 9871574.090 ops/s
Iteration  26: 9905106.918 ops/s
Iteration  27: 9881640.333 ops/s
Iteration  28: 9876799.414 ops/s
Iteration  29: 9871495.914 ops/s
Iteration  30: 9884289.072 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_aggregateByNonMutating":
  9882109.448 ±(99.9%) 12532.531 ops/s [Average]
  (min, avg, max) = (9829290.631, 9882109.448, 9924753.877), stdev = 18758.103
  CI (99.9%): [9869576.917, 9894641.978] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  9882109.448 ± 12532.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150425492.423 ops/s
# Warmup Iteration   2: 302434636.797 ops/s
# Warmup Iteration   3: 265581191.190 ops/s
# Warmup Iteration   4: 311606752.425 ops/s
# Warmup Iteration   5: 310825041.101 ops/s
# Warmup Iteration   6: 310987479.196 ops/s
# Warmup Iteration   7: 310640076.190 ops/s
# Warmup Iteration   8: 311727073.749 ops/s
# Warmup Iteration   9: 310899202.081 ops/s
# Warmup Iteration  10: 312049713.767 ops/s
# Warmup Iteration  11: 310854319.393 ops/s
# Warmup Iteration  12: 311543678.861 ops/s
# Warmup Iteration  13: 311340635.444 ops/s
# Warmup Iteration  14: 311417004.558 ops/s
# Warmup Iteration  15: 310797411.455 ops/s
# Warmup Iteration  16: 310762177.326 ops/s
# Warmup Iteration  17: 311170422.372 ops/s
# Warmup Iteration  18: 310714919.315 ops/s
# Warmup Iteration  19: 311470878.604 ops/s
# Warmup Iteration  20: 311381321.340 ops/s
# Warmup Iteration  21: 310839401.395 ops/s
# Warmup Iteration  22: 311317944.099 ops/s
# Warmup Iteration  23: 310822366.639 ops/s
# Warmup Iteration  24: 311976422.108 ops/s
# Warmup Iteration  25: 311846542.613 ops/s
# Warmup Iteration  26: 311122420.339 ops/s
# Warmup Iteration  27: 312117910.357 ops/s
# Warmup Iteration  28: 310061894.504 ops/s
# Warmup Iteration  29: 311421012.913 ops/s
# Warmup Iteration  30: 311479695.086 ops/s
Iteration   1: 309339755.111 ops/s
Iteration   2: 311568633.867 ops/s
Iteration   3: 310834139.859 ops/s
Iteration   4: 311336271.319 ops/s
Iteration   5: 311495876.328 ops/s
Iteration   6: 312074030.306 ops/s
Iteration   7: 311848456.496 ops/s
Iteration   8: 312354021.677 ops/s
Iteration   9: 310635658.665 ops/s
Iteration  10: 311640137.962 ops/s
Iteration  11: 311952849.250 ops/s
Iteration  12: 311278091.156 ops/s
Iteration  13: 311549028.839 ops/s
Iteration  14: 311776369.400 ops/s
Iteration  15: 310853340.138 ops/s
Iteration  16: 311229870.735 ops/s
Iteration  17: 310976409.788 ops/s
Iteration  18: 312610544.839 ops/s
Iteration  19: 308614969.571 ops/s
Iteration  20: 310861474.260 ops/s
Iteration  21: 311682493.629 ops/s
Iteration  22: 311848182.891 ops/s
Iteration  23: 308629338.231 ops/s
Iteration  24: 312126818.601 ops/s
Iteration  25: 310841722.747 ops/s
Iteration  26: 310124965.192 ops/s
Iteration  27: 310921144.968 ops/s
Iteration  28: 310479661.697 ops/s
Iteration  29: 311674100.553 ops/s
Iteration  30: 310616178.100 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfy":
  311125817.872 ±(99.9%) 647650.365 ops/s [Average]
  (min, avg, max) = (308614969.571, 311125817.872, 312610544.839), stdev = 969372.650
  CI (99.9%): [310478167.508, 311773468.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_allSatisfy  thrpt   30  311125817.872 ± 647650.365  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150045424.612 ops/s
# Warmup Iteration   2: 301435641.615 ops/s
# Warmup Iteration   3: 266260391.529 ops/s
# Warmup Iteration   4: 311725761.344 ops/s
# Warmup Iteration   5: 311274395.295 ops/s
# Warmup Iteration   6: 311965539.518 ops/s
# Warmup Iteration   7: 311350607.076 ops/s
# Warmup Iteration   8: 310482658.173 ops/s
# Warmup Iteration   9: 311083398.629 ops/s
# Warmup Iteration  10: 311885506.299 ops/s
# Warmup Iteration  11: 310572325.854 ops/s
# Warmup Iteration  12: 310669740.608 ops/s
# Warmup Iteration  13: 310840077.537 ops/s
# Warmup Iteration  14: 311187001.005 ops/s
# Warmup Iteration  15: 310645680.873 ops/s
# Warmup Iteration  16: 312312123.758 ops/s
# Warmup Iteration  17: 310614782.251 ops/s
# Warmup Iteration  18: 310750210.505 ops/s
# Warmup Iteration  19: 310343731.754 ops/s
# Warmup Iteration  20: 309786679.297 ops/s
# Warmup Iteration  21: 311403616.295 ops/s
# Warmup Iteration  22: 311823291.893 ops/s
# Warmup Iteration  23: 311209809.126 ops/s
# Warmup Iteration  24: 312156358.029 ops/s
# Warmup Iteration  25: 311474527.658 ops/s
# Warmup Iteration  26: 310967235.734 ops/s
# Warmup Iteration  27: 311034083.936 ops/s
# Warmup Iteration  28: 310401354.813 ops/s
# Warmup Iteration  29: 311656145.812 ops/s
# Warmup Iteration  30: 311131090.023 ops/s
Iteration   1: 310468050.451 ops/s
Iteration   2: 311591498.463 ops/s
Iteration   3: 309665402.548 ops/s
Iteration   4: 310837325.933 ops/s
Iteration   5: 311156027.286 ops/s
Iteration   6: 311581476.225 ops/s
Iteration   7: 311936039.738 ops/s
Iteration   8: 311299096.613 ops/s
Iteration   9: 312010231.750 ops/s
Iteration  10: 310216772.760 ops/s
Iteration  11: 311865007.642 ops/s
Iteration  12: 310860615.903 ops/s
Iteration  13: 310336287.290 ops/s
Iteration  14: 311555626.721 ops/s
Iteration  15: 308949046.442 ops/s
Iteration  16: 311207873.508 ops/s
Iteration  17: 310783920.680 ops/s
Iteration  18: 310720625.256 ops/s
Iteration  19: 310329354.440 ops/s
Iteration  20: 310413143.525 ops/s
Iteration  21: 310606274.068 ops/s
Iteration  22: 310734105.242 ops/s
Iteration  23: 310673247.017 ops/s
Iteration  24: 310279334.460 ops/s
Iteration  25: 311231021.492 ops/s
Iteration  26: 310447545.442 ops/s
Iteration  27: 310204741.760 ops/s
Iteration  28: 311803634.232 ops/s
Iteration  29: 310906403.775 ops/s
Iteration  30: 311401717.189 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_allSatisfyWith":
  310869048.262 ±(99.9%) 468046.816 ops/s [Average]
  (min, avg, max) = (308949046.442, 310869048.262, 312010231.750), stdev = 700550.493
  CI (99.9%): [310401001.446, 311337095.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  310869048.262 ± 468046.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150036110.949 ops/s
# Warmup Iteration   2: 301617029.863 ops/s
# Warmup Iteration   3: 264313818.631 ops/s
# Warmup Iteration   4: 308333860.612 ops/s
# Warmup Iteration   5: 308652803.908 ops/s
# Warmup Iteration   6: 308964565.913 ops/s
# Warmup Iteration   7: 308255024.462 ops/s
# Warmup Iteration   8: 307492101.524 ops/s
# Warmup Iteration   9: 307310566.754 ops/s
# Warmup Iteration  10: 308127419.260 ops/s
# Warmup Iteration  11: 308705864.409 ops/s
# Warmup Iteration  12: 307857713.994 ops/s
# Warmup Iteration  13: 308870299.958 ops/s
# Warmup Iteration  14: 308720200.804 ops/s
# Warmup Iteration  15: 308510128.372 ops/s
# Warmup Iteration  16: 306998595.112 ops/s
# Warmup Iteration  17: 308464326.833 ops/s
# Warmup Iteration  18: 307617030.733 ops/s
# Warmup Iteration  19: 307696126.818 ops/s
# Warmup Iteration  20: 308211142.442 ops/s
# Warmup Iteration  21: 307749999.338 ops/s
# Warmup Iteration  22: 308284788.071 ops/s
# Warmup Iteration  23: 308657170.573 ops/s
# Warmup Iteration  24: 308216227.143 ops/s
# Warmup Iteration  25: 308054379.483 ops/s
# Warmup Iteration  26: 308828342.313 ops/s
# Warmup Iteration  27: 308051809.031 ops/s
# Warmup Iteration  28: 308155287.154 ops/s
# Warmup Iteration  29: 309325307.447 ops/s
# Warmup Iteration  30: 308315961.714 ops/s
Iteration   1: 307103526.159 ops/s
Iteration   2: 308299586.393 ops/s
Iteration   3: 309053380.126 ops/s
Iteration   4: 307425996.728 ops/s
Iteration   5: 308281029.812 ops/s
Iteration   6: 309046786.761 ops/s
Iteration   7: 308105480.841 ops/s
Iteration   8: 309212131.244 ops/s
Iteration   9: 308896094.540 ops/s
Iteration  10: 307849116.262 ops/s
Iteration  11: 309079105.944 ops/s
Iteration  12: 308159140.662 ops/s
Iteration  13: 309152144.822 ops/s
Iteration  14: 308790088.271 ops/s
Iteration  15: 306196197.605 ops/s
Iteration  16: 307902397.230 ops/s
Iteration  17: 308786796.044 ops/s
Iteration  18: 309031830.782 ops/s
Iteration  19: 307292356.786 ops/s
Iteration  20: 309009638.868 ops/s
Iteration  21: 307222386.418 ops/s
Iteration  22: 307656282.764 ops/s
Iteration  23: 308085927.731 ops/s
Iteration  24: 308201095.787 ops/s
Iteration  25: 308399624.402 ops/s
Iteration  26: 308206766.344 ops/s
Iteration  27: 308354115.327 ops/s
Iteration  28: 308738253.147 ops/s
Iteration  29: 308124425.828 ops/s
Iteration  30: 308233533.385 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfy":
  308263174.567 ±(99.9%) 481425.901 ops/s [Average]
  (min, avg, max) = (306196197.605, 308263174.567, 309212131.244), stdev = 720575.679
  CI (99.9%): [307781748.666, 308744600.468] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_anySatisfy  thrpt   30  308263174.567 ± 481425.901  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151530456.144 ops/s
# Warmup Iteration   2: 302409411.240 ops/s
# Warmup Iteration   3: 266873316.387 ops/s
# Warmup Iteration   4: 312384593.837 ops/s
# Warmup Iteration   5: 310274081.050 ops/s
# Warmup Iteration   6: 311898182.866 ops/s
# Warmup Iteration   7: 311850996.665 ops/s
# Warmup Iteration   8: 311204830.147 ops/s
# Warmup Iteration   9: 311563911.412 ops/s
# Warmup Iteration  10: 311080173.824 ops/s
# Warmup Iteration  11: 309463998.752 ops/s
# Warmup Iteration  12: 311003857.458 ops/s
# Warmup Iteration  13: 311654554.157 ops/s
# Warmup Iteration  14: 312141240.378 ops/s
# Warmup Iteration  15: 311439848.758 ops/s
# Warmup Iteration  16: 311230052.640 ops/s
# Warmup Iteration  17: 311800025.917 ops/s
# Warmup Iteration  18: 311036157.998 ops/s
# Warmup Iteration  19: 310873140.940 ops/s
# Warmup Iteration  20: 310543800.101 ops/s
# Warmup Iteration  21: 311207747.914 ops/s
# Warmup Iteration  22: 311246657.244 ops/s
# Warmup Iteration  23: 311367609.652 ops/s
# Warmup Iteration  24: 310748405.957 ops/s
# Warmup Iteration  25: 312514287.231 ops/s
# Warmup Iteration  26: 312301574.138 ops/s
# Warmup Iteration  27: 311258562.683 ops/s
# Warmup Iteration  28: 310792854.162 ops/s
# Warmup Iteration  29: 311750085.987 ops/s
# Warmup Iteration  30: 311278731.617 ops/s
Iteration   1: 310571274.223 ops/s
Iteration   2: 310503053.808 ops/s
Iteration   3: 312938381.544 ops/s
Iteration   4: 310978593.508 ops/s
Iteration   5: 311027602.699 ops/s
Iteration   6: 311351286.245 ops/s
Iteration   7: 310105483.412 ops/s
Iteration   8: 311885983.715 ops/s
Iteration   9: 312360249.797 ops/s
Iteration  10: 310010074.015 ops/s
Iteration  11: 311196688.141 ops/s
Iteration  12: 311573181.819 ops/s
Iteration  13: 310791905.570 ops/s
Iteration  14: 312073166.558 ops/s
Iteration  15: 311703216.995 ops/s
Iteration  16: 310122268.631 ops/s
Iteration  17: 309689407.762 ops/s
Iteration  18: 312651476.956 ops/s
Iteration  19: 311783009.370 ops/s
Iteration  20: 310965279.148 ops/s
Iteration  21: 311496782.471 ops/s
Iteration  22: 312015388.429 ops/s
Iteration  23: 310862783.516 ops/s
Iteration  24: 311872133.063 ops/s
Iteration  25: 311069687.639 ops/s
Iteration  26: 311466190.903 ops/s
Iteration  27: 311120550.753 ops/s
Iteration  28: 310729732.240 ops/s
Iteration  29: 311622948.703 ops/s
Iteration  30: 310317452.479 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_anySatisfyWith":
  311228507.804 ±(99.9%) 530284.002 ops/s [Average]
  (min, avg, max) = (309689407.762, 311228507.804, 312938381.544), stdev = 793704.190
  CI (99.9%): [310698223.802, 311758791.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  311228507.804 ± 530284.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3184238.589 ops/s
# Warmup Iteration   2: 7001388.780 ops/s
# Warmup Iteration   3: 6503531.579 ops/s
# Warmup Iteration   4: 7373255.069 ops/s
# Warmup Iteration   5: 7394813.282 ops/s
# Warmup Iteration   6: 7369123.229 ops/s
# Warmup Iteration   7: 7415322.347 ops/s
# Warmup Iteration   8: 7398057.495 ops/s
# Warmup Iteration   9: 7385437.486 ops/s
# Warmup Iteration  10: 7423177.845 ops/s
# Warmup Iteration  11: 7400829.674 ops/s
# Warmup Iteration  12: 7416398.795 ops/s
# Warmup Iteration  13: 7407871.733 ops/s
# Warmup Iteration  14: 7401288.005 ops/s
# Warmup Iteration  15: 7419879.212 ops/s
# Warmup Iteration  16: 7387772.764 ops/s
# Warmup Iteration  17: 7364834.734 ops/s
# Warmup Iteration  18: 7413922.845 ops/s
# Warmup Iteration  19: 7366713.002 ops/s
# Warmup Iteration  20: 7418886.871 ops/s
# Warmup Iteration  21: 7343402.329 ops/s
# Warmup Iteration  22: 7403435.308 ops/s
# Warmup Iteration  23: 7419571.080 ops/s
# Warmup Iteration  24: 7411827.051 ops/s
# Warmup Iteration  25: 7399275.872 ops/s
# Warmup Iteration  26: 7371099.656 ops/s
# Warmup Iteration  27: 7424205.078 ops/s
# Warmup Iteration  28: 7392960.474 ops/s
# Warmup Iteration  29: 7417119.809 ops/s
# Warmup Iteration  30: 7421685.805 ops/s
Iteration   1: 7386412.776 ops/s
Iteration   2: 7364762.243 ops/s
Iteration   3: 7406602.892 ops/s
Iteration   4: 7429403.795 ops/s
Iteration   5: 7425713.768 ops/s
Iteration   6: 7425929.534 ops/s
Iteration   7: 7427999.142 ops/s
Iteration   8: 7333585.525 ops/s
Iteration   9: 7387421.914 ops/s
Iteration  10: 7344462.986 ops/s
Iteration  11: 7405277.910 ops/s
Iteration  12: 7379233.613 ops/s
Iteration  13: 7366399.291 ops/s
Iteration  14: 7397982.547 ops/s
Iteration  15: 7326154.986 ops/s
Iteration  16: 7421043.792 ops/s
Iteration  17: 7388531.088 ops/s
Iteration  18: 7394986.318 ops/s
Iteration  19: 7364072.460 ops/s
Iteration  20: 7389980.375 ops/s
Iteration  21: 7404365.679 ops/s
Iteration  22: 7366636.111 ops/s
Iteration  23: 7367561.478 ops/s
Iteration  24: 7455525.531 ops/s
Iteration  25: 7439634.562 ops/s
Iteration  26: 7396082.759 ops/s
Iteration  27: 7399624.194 ops/s
Iteration  28: 7400708.581 ops/s
Iteration  29: 7439853.128 ops/s
Iteration  30: 7421047.744 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_appendString":
  7395233.224 ±(99.9%) 21253.047 ops/s [Average]
  (min, avg, max) = (7326154.986, 7395233.224, 7455525.531), stdev = 31810.562
  CI (99.9%): [7373980.177, 7416486.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_appendString  thrpt   30  7395233.224 ± 21253.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6478026.815 ops/s
# Warmup Iteration   2: 14324761.625 ops/s
# Warmup Iteration   3: 12264151.221 ops/s
# Warmup Iteration   4: 14531337.325 ops/s
# Warmup Iteration   5: 14530209.592 ops/s
# Warmup Iteration   6: 14514304.235 ops/s
# Warmup Iteration   7: 14534121.699 ops/s
# Warmup Iteration   8: 14537131.397 ops/s
# Warmup Iteration   9: 14507155.904 ops/s
# Warmup Iteration  10: 14548447.682 ops/s
# Warmup Iteration  11: 14523763.441 ops/s
# Warmup Iteration  12: 14544006.003 ops/s
# Warmup Iteration  13: 14523295.946 ops/s
# Warmup Iteration  14: 14495624.520 ops/s
# Warmup Iteration  15: 14531072.509 ops/s
# Warmup Iteration  16: 14532126.145 ops/s
# Warmup Iteration  17: 14495876.333 ops/s
# Warmup Iteration  18: 14565636.071 ops/s
# Warmup Iteration  19: 14504822.259 ops/s
# Warmup Iteration  20: 14518875.089 ops/s
# Warmup Iteration  21: 14461566.561 ops/s
# Warmup Iteration  22: 14479700.131 ops/s
# Warmup Iteration  23: 14526675.954 ops/s
# Warmup Iteration  24: 14547701.558 ops/s
# Warmup Iteration  25: 14575415.369 ops/s
# Warmup Iteration  26: 14536410.772 ops/s
# Warmup Iteration  27: 14568986.221 ops/s
# Warmup Iteration  28: 14534108.753 ops/s
# Warmup Iteration  29: 14527772.901 ops/s
# Warmup Iteration  30: 14537613.537 ops/s
Iteration   1: 14520758.676 ops/s
Iteration   2: 14571301.235 ops/s
Iteration   3: 14561772.718 ops/s
Iteration   4: 14555405.116 ops/s
Iteration   5: 14546795.591 ops/s
Iteration   6: 14521461.014 ops/s
Iteration   7: 14510186.755 ops/s
Iteration   8: 14550268.495 ops/s
Iteration   9: 14540879.243 ops/s
Iteration  10: 14463355.445 ops/s
Iteration  11: 14561774.290 ops/s
Iteration  12: 14520176.271 ops/s
Iteration  13: 14537031.277 ops/s
Iteration  14: 14539070.671 ops/s
Iteration  15: 14484516.578 ops/s
Iteration  16: 14511143.696 ops/s
Iteration  17: 14540219.338 ops/s
Iteration  18: 14514490.509 ops/s
Iteration  19: 14545210.165 ops/s
Iteration  20: 14638087.921 ops/s
Iteration  21: 14522492.962 ops/s
Iteration  22: 14543732.185 ops/s
Iteration  23: 14597013.223 ops/s
Iteration  24: 14537450.152 ops/s
Iteration  25: 14521344.134 ops/s
Iteration  26: 14564471.611 ops/s
Iteration  27: 14545016.939 ops/s
Iteration  28: 14568202.950 ops/s
Iteration  29: 14560781.894 ops/s
Iteration  30: 14540275.950 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_asReversed":
  14541156.233 ±(99.9%) 21540.450 ops/s [Average]
  (min, avg, max) = (14463355.445, 14541156.233, 14638087.921), stdev = 32240.733
  CI (99.9%): [14519615.784, 14562696.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_asReversed  thrpt   30  14541156.233 ± 21540.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152195363.973 ops/s
# Warmup Iteration   2: 302117465.238 ops/s
# Warmup Iteration   3: 267133691.149 ops/s
# Warmup Iteration   4: 311717348.186 ops/s
# Warmup Iteration   5: 310730089.259 ops/s
# Warmup Iteration   6: 311191639.660 ops/s
# Warmup Iteration   7: 312106457.277 ops/s
# Warmup Iteration   8: 312105501.356 ops/s
# Warmup Iteration   9: 310972333.346 ops/s
# Warmup Iteration  10: 312169150.996 ops/s
# Warmup Iteration  11: 311199107.841 ops/s
# Warmup Iteration  12: 311863884.419 ops/s
# Warmup Iteration  13: 311260704.160 ops/s
# Warmup Iteration  14: 311199608.430 ops/s
# Warmup Iteration  15: 310625401.799 ops/s
# Warmup Iteration  16: 312200925.016 ops/s
# Warmup Iteration  17: 310729092.070 ops/s
# Warmup Iteration  18: 311238104.784 ops/s
# Warmup Iteration  19: 310659091.430 ops/s
# Warmup Iteration  20: 310979707.438 ops/s
# Warmup Iteration  21: 310746106.652 ops/s
# Warmup Iteration  22: 312307513.566 ops/s
# Warmup Iteration  23: 311272467.184 ops/s
# Warmup Iteration  24: 311070294.014 ops/s
# Warmup Iteration  25: 311767942.236 ops/s
# Warmup Iteration  26: 310330187.538 ops/s
# Warmup Iteration  27: 311171359.946 ops/s
# Warmup Iteration  28: 310461420.394 ops/s
# Warmup Iteration  29: 310462882.981 ops/s
# Warmup Iteration  30: 310737685.243 ops/s
Iteration   1: 310342435.676 ops/s
Iteration   2: 311467363.496 ops/s
Iteration   3: 311785314.466 ops/s
Iteration   4: 309354486.370 ops/s
Iteration   5: 311820608.803 ops/s
Iteration   6: 311835084.883 ops/s
Iteration   7: 311154813.429 ops/s
Iteration   8: 310731984.211 ops/s
Iteration   9: 311100667.410 ops/s
Iteration  10: 311817560.784 ops/s
Iteration  11: 311587075.820 ops/s
Iteration  12: 311687710.490 ops/s
Iteration  13: 310800448.565 ops/s
Iteration  14: 311414021.308 ops/s
Iteration  15: 311675389.195 ops/s
Iteration  16: 309680155.322 ops/s
Iteration  17: 311541060.253 ops/s
Iteration  18: 308832514.673 ops/s
Iteration  19: 309192736.107 ops/s
Iteration  20: 310985546.156 ops/s
Iteration  21: 310874795.725 ops/s
Iteration  22: 310728947.215 ops/s
Iteration  23: 311155170.102 ops/s
Iteration  24: 310725740.307 ops/s
Iteration  25: 310408292.386 ops/s
Iteration  26: 310667834.578 ops/s
Iteration  27: 310662807.067 ops/s
Iteration  28: 310180887.156 ops/s
Iteration  29: 310630633.798 ops/s
Iteration  30: 309527658.734 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearch":
  310812324.816 ±(99.9%) 558784.875 ops/s [Average]
  (min, avg, max) = (308832514.673, 310812324.816, 311835084.883), stdev = 836362.958
  CI (99.9%): [310253539.941, 311371109.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_binarySearch  thrpt   30  310812324.816 ± 558784.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150798380.750 ops/s
# Warmup Iteration   2: 301174739.879 ops/s
# Warmup Iteration   3: 264441506.219 ops/s
# Warmup Iteration   4: 309207593.559 ops/s
# Warmup Iteration   5: 307995385.485 ops/s
# Warmup Iteration   6: 308805042.095 ops/s
# Warmup Iteration   7: 307508425.002 ops/s
# Warmup Iteration   8: 307450034.200 ops/s
# Warmup Iteration   9: 308555072.292 ops/s
# Warmup Iteration  10: 308759182.268 ops/s
# Warmup Iteration  11: 309340522.008 ops/s
# Warmup Iteration  12: 308853226.457 ops/s
# Warmup Iteration  13: 308592663.732 ops/s
# Warmup Iteration  14: 309471561.998 ops/s
# Warmup Iteration  15: 308695893.454 ops/s
# Warmup Iteration  16: 307544559.544 ops/s
# Warmup Iteration  17: 308878422.843 ops/s
# Warmup Iteration  18: 307923762.238 ops/s
# Warmup Iteration  19: 308142033.579 ops/s
# Warmup Iteration  20: 308114461.772 ops/s
# Warmup Iteration  21: 307494233.849 ops/s
# Warmup Iteration  22: 309499445.569 ops/s
# Warmup Iteration  23: 307778198.842 ops/s
# Warmup Iteration  24: 308439979.944 ops/s
# Warmup Iteration  25: 308275890.958 ops/s
# Warmup Iteration  26: 309308315.915 ops/s
# Warmup Iteration  27: 308363649.061 ops/s
# Warmup Iteration  28: 308293066.073 ops/s
# Warmup Iteration  29: 308553872.537 ops/s
# Warmup Iteration  30: 309315994.233 ops/s
Iteration   1: 307782655.397 ops/s
Iteration   2: 308099290.385 ops/s
Iteration   3: 308990062.623 ops/s
Iteration   4: 307430794.592 ops/s
Iteration   5: 309330079.747 ops/s
Iteration   6: 309466719.822 ops/s
Iteration   7: 307948349.575 ops/s
Iteration   8: 306967440.067 ops/s
Iteration   9: 308812870.896 ops/s
Iteration  10: 308382282.660 ops/s
Iteration  11: 307313133.358 ops/s
Iteration  12: 309228593.968 ops/s
Iteration  13: 308637825.776 ops/s
Iteration  14: 310270544.243 ops/s
Iteration  15: 308256133.664 ops/s
Iteration  16: 306290590.160 ops/s
Iteration  17: 308799686.428 ops/s
Iteration  18: 308585833.169 ops/s
Iteration  19: 308083150.250 ops/s
Iteration  20: 308109110.077 ops/s
Iteration  21: 308778915.325 ops/s
Iteration  22: 308172416.814 ops/s
Iteration  23: 308767455.742 ops/s
Iteration  24: 308090969.912 ops/s
Iteration  25: 308124489.506 ops/s
Iteration  26: 308978416.980 ops/s
Iteration  27: 307349850.960 ops/s
Iteration  28: 307124156.762 ops/s
Iteration  29: 308372898.181 ops/s
Iteration  30: 308753936.986 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_binarySearchWithComparator":
  308309955.134 ±(99.9%) 553610.978 ops/s [Average]
  (min, avg, max) = (306290590.160, 308309955.134, 310270544.243), stdev = 828618.913
  CI (99.9%): [307756344.156, 308863566.112] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  308309955.134 ± 553610.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606365.253 ops/s
# Warmup Iteration   2: 697966.186 ops/s
# Warmup Iteration   3: 898094.155 ops/s
# Warmup Iteration   4: 895407.710 ops/s
# Warmup Iteration   5: 891313.654 ops/s
# Warmup Iteration   6: 895568.160 ops/s
# Warmup Iteration   7: 898268.043 ops/s
# Warmup Iteration   8: 897649.700 ops/s
# Warmup Iteration   9: 898439.285 ops/s
# Warmup Iteration  10: 752535.936 ops/s
# Warmup Iteration  11: 898152.593 ops/s
# Warmup Iteration  12: 896021.784 ops/s
# Warmup Iteration  13: 896598.431 ops/s
# Warmup Iteration  14: 896387.290 ops/s
# Warmup Iteration  15: 898357.282 ops/s
# Warmup Iteration  16: 899115.142 ops/s
# Warmup Iteration  17: 945997.751 ops/s
# Warmup Iteration  18: 948971.858 ops/s
# Warmup Iteration  19: 946605.799 ops/s
# Warmup Iteration  20: 945413.683 ops/s
# Warmup Iteration  21: 948893.099 ops/s
# Warmup Iteration  22: 946972.421 ops/s
# Warmup Iteration  23: 944922.004 ops/s
# Warmup Iteration  24: 948823.335 ops/s
# Warmup Iteration  25: 947020.311 ops/s
# Warmup Iteration  26: 946422.163 ops/s
# Warmup Iteration  27: 950434.321 ops/s
# Warmup Iteration  28: 945465.614 ops/s
# Warmup Iteration  29: 947693.430 ops/s
# Warmup Iteration  30: 946410.622 ops/s
Iteration   1: 942258.499 ops/s
Iteration   2: 943326.973 ops/s
Iteration   3: 947969.533 ops/s
Iteration   4: 949902.598 ops/s
Iteration   5: 945991.671 ops/s
Iteration   6: 946089.367 ops/s
Iteration   7: 949266.618 ops/s
Iteration   8: 945118.306 ops/s
Iteration   9: 947158.295 ops/s
Iteration  10: 945965.188 ops/s
Iteration  11: 940342.859 ops/s
Iteration  12: 953107.433 ops/s
Iteration  13: 948828.849 ops/s
Iteration  14: 948420.883 ops/s
Iteration  15: 947817.626 ops/s
Iteration  16: 947958.881 ops/s
Iteration  17: 947879.539 ops/s
Iteration  18: 946722.921 ops/s
Iteration  19: 947527.603 ops/s
Iteration  20: 949112.155 ops/s
Iteration  21: 948630.646 ops/s
Iteration  22: 947895.412 ops/s
Iteration  23: 949188.396 ops/s
Iteration  24: 946114.135 ops/s
Iteration  25: 948687.364 ops/s
Iteration  26: 943691.744 ops/s
Iteration  27: 947859.790 ops/s
Iteration  28: 944773.600 ops/s
Iteration  29: 948298.774 ops/s
Iteration  30: 945365.140 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_castToCollection":
  947042.360 ±(99.9%) 1682.660 ops/s [Average]
  (min, avg, max) = (940342.859, 947042.360, 953107.433), stdev = 2518.526
  CI (99.9%): [945359.700, 948725.019] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_castToCollection  thrpt   30  947042.360 ± 1682.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35918795.697 ops/s
# Warmup Iteration   2: 74645702.086 ops/s
# Warmup Iteration   3: 80666054.621 ops/s
# Warmup Iteration   4: 82285418.898 ops/s
# Warmup Iteration   5: 88565641.687 ops/s
# Warmup Iteration   6: 88438771.356 ops/s
# Warmup Iteration   7: 88233226.199 ops/s
# Warmup Iteration   8: 88614184.404 ops/s
# Warmup Iteration   9: 88587941.790 ops/s
# Warmup Iteration  10: 88523163.596 ops/s
# Warmup Iteration  11: 88156287.854 ops/s
# Warmup Iteration  12: 88592337.972 ops/s
# Warmup Iteration  13: 88553054.400 ops/s
# Warmup Iteration  14: 88586228.794 ops/s
# Warmup Iteration  15: 88500951.978 ops/s
# Warmup Iteration  16: 88520722.840 ops/s
# Warmup Iteration  17: 88442345.485 ops/s
# Warmup Iteration  18: 88497205.671 ops/s
# Warmup Iteration  19: 88423805.420 ops/s
# Warmup Iteration  20: 88415655.792 ops/s
# Warmup Iteration  21: 88364469.826 ops/s
# Warmup Iteration  22: 88315779.987 ops/s
# Warmup Iteration  23: 88190197.776 ops/s
# Warmup Iteration  24: 88208452.775 ops/s
# Warmup Iteration  25: 88543004.201 ops/s
# Warmup Iteration  26: 88343541.923 ops/s
# Warmup Iteration  27: 88495400.904 ops/s
# Warmup Iteration  28: 88493517.947 ops/s
# Warmup Iteration  29: 88682514.133 ops/s
# Warmup Iteration  30: 88669848.705 ops/s
Iteration   1: 88524805.395 ops/s
Iteration   2: 88426454.710 ops/s
Iteration   3: 88617741.843 ops/s
Iteration   4: 88603314.584 ops/s
Iteration   5: 88700605.103 ops/s
Iteration   6: 88703093.751 ops/s
Iteration   7: 88428899.083 ops/s
Iteration   8: 88558848.499 ops/s
Iteration   9: 88532347.929 ops/s
Iteration  10: 88661697.091 ops/s
Iteration  11: 88600530.542 ops/s
Iteration  12: 88738545.680 ops/s
Iteration  13: 88419056.768 ops/s
Iteration  14: 88692698.530 ops/s
Iteration  15: 88453771.265 ops/s
Iteration  16: 88244589.052 ops/s
Iteration  17: 88722874.590 ops/s
Iteration  18: 88665429.686 ops/s
Iteration  19: 88466913.054 ops/s
Iteration  20: 88459695.952 ops/s
Iteration  21: 88311321.198 ops/s
Iteration  22: 88469180.213 ops/s
Iteration  23: 88526910.378 ops/s
Iteration  24: 88301102.766 ops/s
Iteration  25: 88424124.928 ops/s
Iteration  26: 88336752.564 ops/s
Iteration  27: 88107067.771 ops/s
Iteration  28: 88560913.067 ops/s
Iteration  29: 88369140.153 ops/s
Iteration  30: 88497409.392 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk":
  88504194.518 ±(99.9%) 103021.958 ops/s [Average]
  (min, avg, max) = (88107067.771, 88504194.518, 88738545.680), stdev = 154198.429
  CI (99.9%): [88401172.559, 88607216.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_chunk  thrpt   30  88504194.518 ± 103021.958  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 108102361.472 ops/s
# Warmup Iteration   2: 224643946.815 ops/s
# Warmup Iteration   3: 245291054.904 ops/s
# Warmup Iteration   4: 286515060.276 ops/s
# Warmup Iteration   5: 287648130.504 ops/s
# Warmup Iteration   6: 287399275.520 ops/s
# Warmup Iteration   7: 287783084.530 ops/s
# Warmup Iteration   8: 286653164.114 ops/s
# Warmup Iteration   9: 287021486.733 ops/s
# Warmup Iteration  10: 287840730.980 ops/s
# Warmup Iteration  11: 287476754.012 ops/s
# Warmup Iteration  12: 286783084.815 ops/s
# Warmup Iteration  13: 287120040.353 ops/s
# Warmup Iteration  14: 286149834.711 ops/s
# Warmup Iteration  15: 288012130.798 ops/s
# Warmup Iteration  16: 288106471.550 ops/s
# Warmup Iteration  17: 288569434.349 ops/s
# Warmup Iteration  18: 288216238.787 ops/s
# Warmup Iteration  19: 287923011.166 ops/s
# Warmup Iteration  20: 288275846.951 ops/s
# Warmup Iteration  21: 288480516.144 ops/s
# Warmup Iteration  22: 286423943.538 ops/s
# Warmup Iteration  23: 287643801.481 ops/s
# Warmup Iteration  24: 288788276.823 ops/s
# Warmup Iteration  25: 288086478.655 ops/s
# Warmup Iteration  26: 288013598.629 ops/s
# Warmup Iteration  27: 287947178.231 ops/s
# Warmup Iteration  28: 288160538.359 ops/s
# Warmup Iteration  29: 288046636.771 ops/s
# Warmup Iteration  30: 288391878.656 ops/s
Iteration   1: 287198010.227 ops/s
Iteration   2: 288363478.884 ops/s
Iteration   3: 288236740.463 ops/s
Iteration   4: 287879708.215 ops/s
Iteration   5: 287790955.311 ops/s
Iteration   6: 288021942.427 ops/s
Iteration   7: 287425461.540 ops/s
Iteration   8: 289152893.037 ops/s
Iteration   9: 286805791.715 ops/s
Iteration  10: 288089863.568 ops/s
Iteration  11: 287856911.290 ops/s
Iteration  12: 287345445.672 ops/s
Iteration  13: 287342178.165 ops/s
Iteration  14: 287151243.513 ops/s
Iteration  15: 288157261.159 ops/s
Iteration  16: 287686635.184 ops/s
Iteration  17: 287569524.790 ops/s
Iteration  18: 287886650.521 ops/s
Iteration  19: 286973030.701 ops/s
Iteration  20: 287331178.754 ops/s
Iteration  21: 287921087.164 ops/s
Iteration  22: 287715291.558 ops/s
Iteration  23: 287209799.785 ops/s
Iteration  24: 287065579.717 ops/s
Iteration  25: 288281449.448 ops/s
Iteration  26: 287436147.015 ops/s
Iteration  27: 288332301.851 ops/s
Iteration  28: 287256022.376 ops/s
Iteration  29: 287965860.003 ops/s
Iteration  30: 287484431.302 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_large_size":
  287697762.512 ±(99.9%) 341597.952 ops/s [Average]
  (min, avg, max) = (286805791.715, 287697762.512, 289152893.037), stdev = 511287.772
  CI (99.9%): [287356164.560, 288039360.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  287697762.512 ± 341597.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768231.225 ops/s
# Warmup Iteration   2: 812664.039 ops/s
# Warmup Iteration   3: 1051793.099 ops/s
# Warmup Iteration   4: 1053676.172 ops/s
# Warmup Iteration   5: 1052455.911 ops/s
# Warmup Iteration   6: 1045503.527 ops/s
# Warmup Iteration   7: 1054362.918 ops/s
# Warmup Iteration   8: 1056668.445 ops/s
# Warmup Iteration   9: 1052601.258 ops/s
# Warmup Iteration  10: 1054439.259 ops/s
# Warmup Iteration  11: 1056439.985 ops/s
# Warmup Iteration  12: 896876.509 ops/s
# Warmup Iteration  13: 1057008.820 ops/s
# Warmup Iteration  14: 1054502.167 ops/s
# Warmup Iteration  15: 1055873.052 ops/s
# Warmup Iteration  16: 1054771.104 ops/s
# Warmup Iteration  17: 1123148.627 ops/s
# Warmup Iteration  18: 1121173.838 ops/s
# Warmup Iteration  19: 1122079.816 ops/s
# Warmup Iteration  20: 1121835.975 ops/s
# Warmup Iteration  21: 1122338.226 ops/s
# Warmup Iteration  22: 1120626.452 ops/s
# Warmup Iteration  23: 1118687.580 ops/s
# Warmup Iteration  24: 1123676.426 ops/s
# Warmup Iteration  25: 1120444.917 ops/s
# Warmup Iteration  26: 1120180.068 ops/s
# Warmup Iteration  27: 1121638.201 ops/s
# Warmup Iteration  28: 1119370.398 ops/s
# Warmup Iteration  29: 1123725.133 ops/s
# Warmup Iteration  30: 1118432.353 ops/s
Iteration   1: 1123055.793 ops/s
Iteration   2: 1122501.889 ops/s
Iteration   3: 1120064.122 ops/s
Iteration   4: 1125947.403 ops/s
Iteration   5: 1123462.951 ops/s
Iteration   6: 1123474.537 ops/s
Iteration   7: 1125172.059 ops/s
Iteration   8: 1121359.608 ops/s
Iteration   9: 1124882.585 ops/s
Iteration  10: 1122867.988 ops/s
Iteration  11: 1120418.581 ops/s
Iteration  12: 1121447.411 ops/s
Iteration  13: 1122580.016 ops/s
Iteration  14: 1122384.737 ops/s
Iteration  15: 1102799.205 ops/s
Iteration  16: 1125982.208 ops/s
Iteration  17: 1120235.439 ops/s
Iteration  18: 1123955.555 ops/s
Iteration  19: 1121199.497 ops/s
Iteration  20: 1123076.053 ops/s
Iteration  21: 1124591.828 ops/s
Iteration  22: 1119077.960 ops/s
Iteration  23: 1125141.083 ops/s
Iteration  24: 1122319.292 ops/s
Iteration  25: 1122710.755 ops/s
Iteration  26: 1118856.057 ops/s
Iteration  27: 1121663.900 ops/s
Iteration  28: 1123133.375 ops/s
Iteration  29: 1123385.124 ops/s
Iteration  30: 1120540.791 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_chunk_zero_throws":
  1121942.927 ±(99.9%) 2723.972 ops/s [Average]
  (min, avg, max) = (1102799.205, 1121942.927, 1125982.208), stdev = 4077.113
  CI (99.9%): [1119218.955, 1124666.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1121942.927 ± 2723.972  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748504.280 ops/s
# Warmup Iteration   2: 794555.412 ops/s
# Warmup Iteration   3: 1014833.591 ops/s
# Warmup Iteration   4: 1020828.254 ops/s
# Warmup Iteration   5: 1022687.851 ops/s
# Warmup Iteration   6: 1010836.856 ops/s
# Warmup Iteration   7: 1018069.301 ops/s
# Warmup Iteration   8: 1018023.357 ops/s
# Warmup Iteration   9: 1021712.574 ops/s
# Warmup Iteration  10: 1020545.346 ops/s
# Warmup Iteration  11: 1009831.694 ops/s
# Warmup Iteration  12: 889621.000 ops/s
# Warmup Iteration  13: 988451.610 ops/s
# Warmup Iteration  14: 1018016.087 ops/s
# Warmup Iteration  15: 1016716.471 ops/s
# Warmup Iteration  16: 1018368.733 ops/s
# Warmup Iteration  17: 1074998.204 ops/s
# Warmup Iteration  18: 1076138.469 ops/s
# Warmup Iteration  19: 1076205.442 ops/s
# Warmup Iteration  20: 1072758.861 ops/s
# Warmup Iteration  21: 1074943.129 ops/s
# Warmup Iteration  22: 1078441.416 ops/s
# Warmup Iteration  23: 1077041.607 ops/s
# Warmup Iteration  24: 1078396.061 ops/s
# Warmup Iteration  25: 1073478.266 ops/s
# Warmup Iteration  26: 1077458.538 ops/s
# Warmup Iteration  27: 1073912.886 ops/s
# Warmup Iteration  28: 1077487.360 ops/s
# Warmup Iteration  29: 1077135.707 ops/s
# Warmup Iteration  30: 1078847.952 ops/s
Iteration   1: 1071796.378 ops/s
Iteration   2: 1076412.836 ops/s
Iteration   3: 1076820.860 ops/s
Iteration   4: 1078469.368 ops/s
Iteration   5: 1071759.486 ops/s
Iteration   6: 1075183.332 ops/s
Iteration   7: 1078309.281 ops/s
Iteration   8: 1073733.974 ops/s
Iteration   9: 1081226.296 ops/s
Iteration  10: 1074737.385 ops/s
Iteration  11: 1078494.854 ops/s
Iteration  12: 1078093.614 ops/s
Iteration  13: 1073149.734 ops/s
Iteration  14: 1073490.178 ops/s
Iteration  15: 1076201.526 ops/s
Iteration  16: 1073754.185 ops/s
Iteration  17: 1072869.717 ops/s
Iteration  18: 1074731.016 ops/s
Iteration  19: 1077925.846 ops/s
Iteration  20: 1078883.882 ops/s
Iteration  21: 1076315.880 ops/s
Iteration  22: 1078157.762 ops/s
Iteration  23: 1076886.581 ops/s
Iteration  24: 1077542.269 ops/s
Iteration  25: 1072800.140 ops/s
Iteration  26: 1074693.495 ops/s
Iteration  27: 1076561.965 ops/s
Iteration  28: 1079952.094 ops/s
Iteration  29: 1079442.233 ops/s
Iteration  30: 1072621.006 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_clear":
  1076033.906 ±(99.9%) 1733.459 ops/s [Average]
  (min, avg, max) = (1071759.486, 1076033.906, 1081226.296), stdev = 2594.559
  CI (99.9%): [1074300.447, 1077767.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_clear  thrpt   30  1076033.906 ± 1733.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151357590.978 ops/s
# Warmup Iteration   2: 301547608.914 ops/s
# Warmup Iteration   3: 265600751.498 ops/s
# Warmup Iteration   4: 310113571.524 ops/s
# Warmup Iteration   5: 307249106.433 ops/s
# Warmup Iteration   6: 308051769.526 ops/s
# Warmup Iteration   7: 308243371.030 ops/s
# Warmup Iteration   8: 308883522.393 ops/s
# Warmup Iteration   9: 308044233.366 ops/s
# Warmup Iteration  10: 309094011.368 ops/s
# Warmup Iteration  11: 308201955.451 ops/s
# Warmup Iteration  12: 308570360.003 ops/s
# Warmup Iteration  13: 307993272.223 ops/s
# Warmup Iteration  14: 307963633.014 ops/s
# Warmup Iteration  15: 308523143.987 ops/s
# Warmup Iteration  16: 307410195.207 ops/s
# Warmup Iteration  17: 308851780.911 ops/s
# Warmup Iteration  18: 307393508.696 ops/s
# Warmup Iteration  19: 308724339.122 ops/s
# Warmup Iteration  20: 308563426.918 ops/s
# Warmup Iteration  21: 308457171.654 ops/s
# Warmup Iteration  22: 309412205.578 ops/s
# Warmup Iteration  23: 308024290.347 ops/s
# Warmup Iteration  24: 308358022.507 ops/s
# Warmup Iteration  25: 308200761.921 ops/s
# Warmup Iteration  26: 308312642.494 ops/s
# Warmup Iteration  27: 308506139.328 ops/s
# Warmup Iteration  28: 308496290.013 ops/s
# Warmup Iteration  29: 307869881.407 ops/s
# Warmup Iteration  30: 308973894.260 ops/s
Iteration   1: 307918617.404 ops/s
Iteration   2: 308663038.618 ops/s
Iteration   3: 309476654.831 ops/s
Iteration   4: 308330776.085 ops/s
Iteration   5: 306704320.041 ops/s
Iteration   6: 309048460.324 ops/s
Iteration   7: 309459702.546 ops/s
Iteration   8: 308463218.284 ops/s
Iteration   9: 307872935.423 ops/s
Iteration  10: 308458355.344 ops/s
Iteration  11: 308918373.411 ops/s
Iteration  12: 309554146.717 ops/s
Iteration  13: 308173081.752 ops/s
Iteration  14: 309364656.785 ops/s
Iteration  15: 307530611.608 ops/s
Iteration  16: 309059823.543 ops/s
Iteration  17: 308625749.331 ops/s
Iteration  18: 307055275.883 ops/s
Iteration  19: 308048649.837 ops/s
Iteration  20: 306802123.427 ops/s
Iteration  21: 307584055.189 ops/s
Iteration  22: 306106622.907 ops/s
Iteration  23: 307695926.600 ops/s
Iteration  24: 309341447.814 ops/s
Iteration  25: 308601047.812 ops/s
Iteration  26: 308159530.495 ops/s
Iteration  27: 308285436.902 ops/s
Iteration  28: 307117316.037 ops/s
Iteration  29: 307432672.072 ops/s
Iteration  30: 308517865.379 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect":
  308212349.747 ±(99.9%) 600611.272 ops/s [Average]
  (min, avg, max) = (306106622.907, 308212349.747, 309554146.717), stdev = 898966.745
  CI (99.9%): [307611738.475, 308812961.018] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collect  thrpt   30  308212349.747 ± 600611.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24956204.029 ops/s
# Warmup Iteration   2: 43719505.475 ops/s
# Warmup Iteration   3: 52053489.050 ops/s
# Warmup Iteration   4: 51992444.452 ops/s
# Warmup Iteration   5: 52103131.153 ops/s
# Warmup Iteration   6: 52075789.333 ops/s
# Warmup Iteration   7: 52061544.197 ops/s
# Warmup Iteration   8: 52027303.406 ops/s
# Warmup Iteration   9: 52214829.324 ops/s
# Warmup Iteration  10: 51985892.604 ops/s
# Warmup Iteration  11: 52107888.896 ops/s
# Warmup Iteration  12: 51900433.361 ops/s
# Warmup Iteration  13: 51965926.322 ops/s
# Warmup Iteration  14: 52058958.419 ops/s
# Warmup Iteration  15: 51878110.162 ops/s
# Warmup Iteration  16: 52305511.127 ops/s
# Warmup Iteration  17: 51891377.966 ops/s
# Warmup Iteration  18: 52106915.673 ops/s
# Warmup Iteration  19: 52151378.221 ops/s
# Warmup Iteration  20: 52197580.588 ops/s
# Warmup Iteration  21: 52070430.783 ops/s
# Warmup Iteration  22: 52276602.564 ops/s
# Warmup Iteration  23: 52204988.322 ops/s
# Warmup Iteration  24: 52200958.867 ops/s
# Warmup Iteration  25: 52251793.610 ops/s
# Warmup Iteration  26: 52207454.800 ops/s
# Warmup Iteration  27: 51988571.112 ops/s
# Warmup Iteration  28: 52109071.516 ops/s
# Warmup Iteration  29: 52052070.271 ops/s
# Warmup Iteration  30: 51957188.481 ops/s
Iteration   1: 51999336.565 ops/s
Iteration   2: 52094105.090 ops/s
Iteration   3: 52188667.834 ops/s
Iteration   4: 52304544.253 ops/s
Iteration   5: 52324776.187 ops/s
Iteration   6: 52019438.074 ops/s
Iteration   7: 51701207.537 ops/s
Iteration   8: 52555733.491 ops/s
Iteration   9: 51767106.053 ops/s
Iteration  10: 52227030.594 ops/s
Iteration  11: 52282665.613 ops/s
Iteration  12: 51524299.439 ops/s
Iteration  13: 51759288.852 ops/s
Iteration  14: 52075259.604 ops/s
Iteration  15: 51837378.075 ops/s
Iteration  16: 51834251.206 ops/s
Iteration  17: 52260230.854 ops/s
Iteration  18: 51972101.286 ops/s
Iteration  19: 52221700.903 ops/s
Iteration  20: 52083802.710 ops/s
Iteration  21: 52041412.315 ops/s
Iteration  22: 52334272.028 ops/s
Iteration  23: 52110517.629 ops/s
Iteration  24: 51731754.549 ops/s
Iteration  25: 52103056.487 ops/s
Iteration  26: 52321704.088 ops/s
Iteration  27: 51962826.143 ops/s
Iteration  28: 51961628.363 ops/s
Iteration  29: 52219840.919 ops/s
Iteration  30: 52088204.559 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectBoolean":
  52063604.710 ±(99.9%) 154194.822 ops/s [Average]
  (min, avg, max) = (51524299.439, 52063604.710, 52555733.491), stdev = 230791.568
  CI (99.9%): [51909409.888, 52217799.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectBoolean  thrpt   30  52063604.710 ± 154194.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9919729.370 ops/s
# Warmup Iteration   2: 22012591.789 ops/s
# Warmup Iteration   3: 22722639.348 ops/s
# Warmup Iteration   4: 19198322.978 ops/s
# Warmup Iteration   5: 22766428.697 ops/s
# Warmup Iteration   6: 22821489.321 ops/s
# Warmup Iteration   7: 22802328.096 ops/s
# Warmup Iteration   8: 22772229.547 ops/s
# Warmup Iteration   9: 22779518.579 ops/s
# Warmup Iteration  10: 22764881.884 ops/s
# Warmup Iteration  11: 22752396.262 ops/s
# Warmup Iteration  12: 22807738.728 ops/s
# Warmup Iteration  13: 22786659.770 ops/s
# Warmup Iteration  14: 22794800.231 ops/s
# Warmup Iteration  15: 22786967.977 ops/s
# Warmup Iteration  16: 22773096.489 ops/s
# Warmup Iteration  17: 22787102.600 ops/s
# Warmup Iteration  18: 22751299.724 ops/s
# Warmup Iteration  19: 22779120.281 ops/s
# Warmup Iteration  20: 22782033.302 ops/s
# Warmup Iteration  21: 22779358.497 ops/s
# Warmup Iteration  22: 22799431.642 ops/s
# Warmup Iteration  23: 22751342.477 ops/s
# Warmup Iteration  24: 22741740.408 ops/s
# Warmup Iteration  25: 22798225.941 ops/s
# Warmup Iteration  26: 22759239.748 ops/s
# Warmup Iteration  27: 22757985.638 ops/s
# Warmup Iteration  28: 22764176.344 ops/s
# Warmup Iteration  29: 22785675.984 ops/s
# Warmup Iteration  30: 22765061.571 ops/s
Iteration   1: 22667259.943 ops/s
Iteration   2: 22641409.045 ops/s
Iteration   3: 22799897.619 ops/s
Iteration   4: 22778934.419 ops/s
Iteration   5: 22737347.213 ops/s
Iteration   6: 22765353.050 ops/s
Iteration   7: 22774767.296 ops/s
Iteration   8: 22770795.097 ops/s
Iteration   9: 22722023.354 ops/s
Iteration  10: 22829729.098 ops/s
Iteration  11: 22720460.430 ops/s
Iteration  12: 22779944.667 ops/s
Iteration  13: 22814814.133 ops/s
Iteration  14: 22692408.779 ops/s
Iteration  15: 22764321.498 ops/s
Iteration  16: 22715690.035 ops/s
Iteration  17: 22788543.730 ops/s
Iteration  18: 22796826.263 ops/s
Iteration  19: 22805713.834 ops/s
Iteration  20: 22791348.967 ops/s
Iteration  21: 22837378.346 ops/s
Iteration  22: 22805865.979 ops/s
Iteration  23: 22803572.459 ops/s
Iteration  24: 22839834.495 ops/s
Iteration  25: 22771808.151 ops/s
Iteration  26: 22765134.527 ops/s
Iteration  27: 22788572.965 ops/s
Iteration  28: 22792362.132 ops/s
Iteration  29: 22715051.986 ops/s
Iteration  30: 22654881.403 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectByte":
  22764401.697 ±(99.9%) 34967.352 ops/s [Average]
  (min, avg, max) = (22641409.045, 22764401.697, 22839834.495), stdev = 52337.490
  CI (99.9%): [22729434.345, 22799369.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectByte  thrpt   30  22764401.697 ± 34967.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9956742.854 ops/s
# Warmup Iteration   2: 22062693.846 ops/s
# Warmup Iteration   3: 22765508.393 ops/s
# Warmup Iteration   4: 19207398.445 ops/s
# Warmup Iteration   5: 22782527.422 ops/s
# Warmup Iteration   6: 22760332.593 ops/s
# Warmup Iteration   7: 22794128.239 ops/s
# Warmup Iteration   8: 22826914.548 ops/s
# Warmup Iteration   9: 22761715.473 ops/s
# Warmup Iteration  10: 22734023.225 ops/s
# Warmup Iteration  11: 22769579.812 ops/s
# Warmup Iteration  12: 22762988.323 ops/s
# Warmup Iteration  13: 22785264.100 ops/s
# Warmup Iteration  14: 22798036.894 ops/s
# Warmup Iteration  15: 22760816.434 ops/s
# Warmup Iteration  16: 22803305.759 ops/s
# Warmup Iteration  17: 22796079.449 ops/s
# Warmup Iteration  18: 22737268.211 ops/s
# Warmup Iteration  19: 22861075.848 ops/s
# Warmup Iteration  20: 22785385.873 ops/s
# Warmup Iteration  21: 22749200.535 ops/s
# Warmup Iteration  22: 22784306.956 ops/s
# Warmup Iteration  23: 22738806.125 ops/s
# Warmup Iteration  24: 22747774.041 ops/s
# Warmup Iteration  25: 22765657.259 ops/s
# Warmup Iteration  26: 22824350.691 ops/s
# Warmup Iteration  27: 22781879.350 ops/s
# Warmup Iteration  28: 22766359.202 ops/s
# Warmup Iteration  29: 22759863.026 ops/s
# Warmup Iteration  30: 22741772.091 ops/s
Iteration   1: 22713764.256 ops/s
Iteration   2: 22820214.626 ops/s
Iteration   3: 22794415.321 ops/s
Iteration   4: 22730120.373 ops/s
Iteration   5: 22690930.162 ops/s
Iteration   6: 22799749.573 ops/s
Iteration   7: 22669801.888 ops/s
Iteration   8: 22759895.317 ops/s
Iteration   9: 22797192.238 ops/s
Iteration  10: 22758808.448 ops/s
Iteration  11: 22763454.721 ops/s
Iteration  12: 22775310.228 ops/s
Iteration  13: 22818868.210 ops/s
Iteration  14: 22801622.537 ops/s
Iteration  15: 22669119.251 ops/s
Iteration  16: 22784926.831 ops/s
Iteration  17: 22761480.289 ops/s
Iteration  18: 22791010.828 ops/s
Iteration  19: 22808980.690 ops/s
Iteration  20: 22778427.667 ops/s
Iteration  21: 22766683.722 ops/s
Iteration  22: 22818004.548 ops/s
Iteration  23: 22799176.306 ops/s
Iteration  24: 22726788.920 ops/s
Iteration  25: 22775027.624 ops/s
Iteration  26: 22648202.096 ops/s
Iteration  27: 22765611.364 ops/s
Iteration  28: 22822328.504 ops/s
Iteration  29: 22797335.729 ops/s
Iteration  30: 22821168.657 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectChar":
  22767614.031 ±(99.9%) 32310.299 ops/s [Average]
  (min, avg, max) = (22648202.096, 22767614.031, 22822328.504), stdev = 48360.539
  CI (99.9%): [22735303.732, 22799924.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectChar  thrpt   30  22767614.031 ± 32310.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9824377.502 ops/s
# Warmup Iteration   2: 21898045.988 ops/s
# Warmup Iteration   3: 22730178.464 ops/s
# Warmup Iteration   4: 19191879.454 ops/s
# Warmup Iteration   5: 22788374.384 ops/s
# Warmup Iteration   6: 22823099.204 ops/s
# Warmup Iteration   7: 22774360.420 ops/s
# Warmup Iteration   8: 22803347.637 ops/s
# Warmup Iteration   9: 22781746.588 ops/s
# Warmup Iteration  10: 22776309.218 ops/s
# Warmup Iteration  11: 22741922.646 ops/s
# Warmup Iteration  12: 22786669.607 ops/s
# Warmup Iteration  13: 22803261.427 ops/s
# Warmup Iteration  14: 22763374.534 ops/s
# Warmup Iteration  15: 22745225.776 ops/s
# Warmup Iteration  16: 22811652.732 ops/s
# Warmup Iteration  17: 22770751.786 ops/s
# Warmup Iteration  18: 22813395.809 ops/s
# Warmup Iteration  19: 22799203.614 ops/s
# Warmup Iteration  20: 22782685.848 ops/s
# Warmup Iteration  21: 22760666.802 ops/s
# Warmup Iteration  22: 22805477.148 ops/s
# Warmup Iteration  23: 22759289.815 ops/s
# Warmup Iteration  24: 22796390.515 ops/s
# Warmup Iteration  25: 22783815.185 ops/s
# Warmup Iteration  26: 22783302.281 ops/s
# Warmup Iteration  27: 22786340.369 ops/s
# Warmup Iteration  28: 22746171.255 ops/s
# Warmup Iteration  29: 22802646.091 ops/s
# Warmup Iteration  30: 22798481.506 ops/s
Iteration   1: 22813755.035 ops/s
Iteration   2: 22768355.673 ops/s
Iteration   3: 22796578.193 ops/s
Iteration   4: 22823051.505 ops/s
Iteration   5: 22755126.680 ops/s
Iteration   6: 22811640.291 ops/s
Iteration   7: 22742782.193 ops/s
Iteration   8: 22784914.092 ops/s
Iteration   9: 22756812.330 ops/s
Iteration  10: 22781130.994 ops/s
Iteration  11: 22756234.974 ops/s
Iteration  12: 22761398.545 ops/s
Iteration  13: 22803723.328 ops/s
Iteration  14: 22795756.110 ops/s
Iteration  15: 22746190.675 ops/s
Iteration  16: 22822345.409 ops/s
Iteration  17: 22727007.509 ops/s
Iteration  18: 22717644.160 ops/s
Iteration  19: 22784813.455 ops/s
Iteration  20: 22800934.331 ops/s
Iteration  21: 22777621.676 ops/s
Iteration  22: 22783612.233 ops/s
Iteration  23: 22774677.930 ops/s
Iteration  24: 22744195.349 ops/s
Iteration  25: 22801150.956 ops/s
Iteration  26: 22772470.742 ops/s
Iteration  27: 22802932.284 ops/s
Iteration  28: 22780191.891 ops/s
Iteration  29: 22762079.104 ops/s
Iteration  30: 22770521.250 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectDouble":
  22777321.630 ±(99.9%) 18124.601 ops/s [Average]
  (min, avg, max) = (22717644.160, 22777321.630, 22823051.505), stdev = 27128.052
  CI (99.9%): [22759197.029, 22795446.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectDouble  thrpt   30  22777321.630 ± 18124.601  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9967725.414 ops/s
# Warmup Iteration   2: 21936496.375 ops/s
# Warmup Iteration   3: 22724556.250 ops/s
# Warmup Iteration   4: 19175151.912 ops/s
# Warmup Iteration   5: 22795653.727 ops/s
# Warmup Iteration   6: 22805317.149 ops/s
# Warmup Iteration   7: 22773034.823 ops/s
# Warmup Iteration   8: 22799435.383 ops/s
# Warmup Iteration   9: 22768055.104 ops/s
# Warmup Iteration  10: 22757745.432 ops/s
# Warmup Iteration  11: 22772981.939 ops/s
# Warmup Iteration  12: 22674030.671 ops/s
# Warmup Iteration  13: 22790731.852 ops/s
# Warmup Iteration  14: 22728240.923 ops/s
# Warmup Iteration  15: 22771084.058 ops/s
# Warmup Iteration  16: 22792753.010 ops/s
# Warmup Iteration  17: 22838393.854 ops/s
# Warmup Iteration  18: 22782445.489 ops/s
# Warmup Iteration  19: 22741946.501 ops/s
# Warmup Iteration  20: 22812526.652 ops/s
# Warmup Iteration  21: 22729879.567 ops/s
# Warmup Iteration  22: 22787386.913 ops/s
# Warmup Iteration  23: 22727067.765 ops/s
# Warmup Iteration  24: 22782550.001 ops/s
# Warmup Iteration  25: 22762476.451 ops/s
# Warmup Iteration  26: 22782925.308 ops/s
# Warmup Iteration  27: 22809098.005 ops/s
# Warmup Iteration  28: 22787874.313 ops/s
# Warmup Iteration  29: 22761530.021 ops/s
# Warmup Iteration  30: 22799329.134 ops/s
Iteration   1: 22800851.178 ops/s
Iteration   2: 22656742.715 ops/s
Iteration   3: 22832353.644 ops/s
Iteration   4: 22776446.875 ops/s
Iteration   5: 22761256.010 ops/s
Iteration   6: 22788887.830 ops/s
Iteration   7: 22792632.641 ops/s
Iteration   8: 22781671.059 ops/s
Iteration   9: 22795174.234 ops/s
Iteration  10: 22745017.521 ops/s
Iteration  11: 22795280.957 ops/s
Iteration  12: 22715728.401 ops/s
Iteration  13: 22700983.929 ops/s
Iteration  14: 22695956.001 ops/s
Iteration  15: 22773413.498 ops/s
Iteration  16: 22789495.919 ops/s
Iteration  17: 22759715.518 ops/s
Iteration  18: 22767625.879 ops/s
Iteration  19: 22714546.302 ops/s
Iteration  20: 22792976.815 ops/s
Iteration  21: 22771658.603 ops/s
Iteration  22: 22706998.221 ops/s
Iteration  23: 22753180.921 ops/s
Iteration  24: 22832421.259 ops/s
Iteration  25: 22791815.697 ops/s
Iteration  26: 22790899.652 ops/s
Iteration  27: 22718807.615 ops/s
Iteration  28: 22777806.308 ops/s
Iteration  29: 22747212.711 ops/s
Iteration  30: 22800904.281 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectFloat":
  22764282.073 ±(99.9%) 27803.844 ops/s [Average]
  (min, avg, max) = (22656742.715, 22764282.073, 22832421.259), stdev = 41615.488
  CI (99.9%): [22736478.229, 22792085.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectFloat  thrpt   30  22764282.073 ± 27803.844  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149861591.503 ops/s
# Warmup Iteration   2: 301328816.467 ops/s
# Warmup Iteration   3: 267491811.815 ops/s
# Warmup Iteration   4: 311388976.872 ops/s
# Warmup Iteration   5: 310181101.642 ops/s
# Warmup Iteration   6: 311859258.292 ops/s
# Warmup Iteration   7: 311163300.452 ops/s
# Warmup Iteration   8: 310438143.338 ops/s
# Warmup Iteration   9: 310963126.644 ops/s
# Warmup Iteration  10: 311186109.116 ops/s
# Warmup Iteration  11: 310272234.160 ops/s
# Warmup Iteration  12: 311666351.480 ops/s
# Warmup Iteration  13: 311090951.711 ops/s
# Warmup Iteration  14: 312947704.202 ops/s
# Warmup Iteration  15: 310922130.226 ops/s
# Warmup Iteration  16: 311691729.316 ops/s
# Warmup Iteration  17: 310646432.947 ops/s
# Warmup Iteration  18: 310727009.735 ops/s
# Warmup Iteration  19: 311505241.487 ops/s
# Warmup Iteration  20: 311262236.876 ops/s
# Warmup Iteration  21: 311869031.854 ops/s
# Warmup Iteration  22: 311029467.866 ops/s
# Warmup Iteration  23: 311425260.185 ops/s
# Warmup Iteration  24: 311563290.276 ops/s
# Warmup Iteration  25: 311085931.788 ops/s
# Warmup Iteration  26: 311342141.866 ops/s
# Warmup Iteration  27: 310193731.203 ops/s
# Warmup Iteration  28: 310810020.264 ops/s
# Warmup Iteration  29: 311275680.508 ops/s
# Warmup Iteration  30: 311869608.090 ops/s
Iteration   1: 310393033.456 ops/s
Iteration   2: 310022623.221 ops/s
Iteration   3: 312081094.736 ops/s
Iteration   4: 311308044.323 ops/s
Iteration   5: 310421965.745 ops/s
Iteration   6: 311079145.543 ops/s
Iteration   7: 311647763.515 ops/s
Iteration   8: 311180328.139 ops/s
Iteration   9: 310640260.014 ops/s
Iteration  10: 311582697.297 ops/s
Iteration  11: 311589364.152 ops/s
Iteration  12: 311399682.907 ops/s
Iteration  13: 311211450.972 ops/s
Iteration  14: 312551896.159 ops/s
Iteration  15: 311457810.893 ops/s
Iteration  16: 311030090.556 ops/s
Iteration  17: 312128915.766 ops/s
Iteration  18: 310857298.636 ops/s
Iteration  19: 308943069.040 ops/s
Iteration  20: 312196273.596 ops/s
Iteration  21: 310927722.580 ops/s
Iteration  22: 310650833.586 ops/s
Iteration  23: 310738220.800 ops/s
Iteration  24: 311980482.670 ops/s
Iteration  25: 311243104.133 ops/s
Iteration  26: 311228621.456 ops/s
Iteration  27: 311065047.818 ops/s
Iteration  28: 311503011.634 ops/s
Iteration  29: 309986351.179 ops/s
Iteration  30: 312451861.162 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIf":
  311183268.856 ±(99.9%) 520922.959 ops/s [Average]
  (min, avg, max) = (308943069.040, 311183268.856, 312551896.159), stdev = 779693.020
  CI (99.9%): [310662345.897, 311704191.815] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectIf  thrpt   30  311183268.856 ± 520922.959  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148224599.904 ops/s
# Warmup Iteration   2: 301883011.447 ops/s
# Warmup Iteration   3: 266627226.284 ops/s
# Warmup Iteration   4: 312075921.652 ops/s
# Warmup Iteration   5: 310647748.482 ops/s
# Warmup Iteration   6: 310705150.441 ops/s
# Warmup Iteration   7: 310971063.198 ops/s
# Warmup Iteration   8: 312087376.291 ops/s
# Warmup Iteration   9: 311834442.790 ops/s
# Warmup Iteration  10: 311612278.172 ops/s
# Warmup Iteration  11: 311123488.290 ops/s
# Warmup Iteration  12: 310669480.506 ops/s
# Warmup Iteration  13: 311780464.038 ops/s
# Warmup Iteration  14: 312140948.787 ops/s
# Warmup Iteration  15: 311525551.530 ops/s
# Warmup Iteration  16: 311764478.006 ops/s
# Warmup Iteration  17: 311534619.560 ops/s
# Warmup Iteration  18: 311979243.687 ops/s
# Warmup Iteration  19: 310280872.276 ops/s
# Warmup Iteration  20: 310355475.748 ops/s
# Warmup Iteration  21: 311337103.788 ops/s
# Warmup Iteration  22: 311520115.977 ops/s
# Warmup Iteration  23: 311085003.450 ops/s
# Warmup Iteration  24: 311616434.632 ops/s
# Warmup Iteration  25: 311882167.797 ops/s
# Warmup Iteration  26: 311633497.493 ops/s
# Warmup Iteration  27: 310742708.264 ops/s
# Warmup Iteration  28: 310693678.068 ops/s
# Warmup Iteration  29: 310354586.422 ops/s
# Warmup Iteration  30: 310909556.108 ops/s
Iteration   1: 310692495.002 ops/s
Iteration   2: 311366018.597 ops/s
Iteration   3: 308288174.479 ops/s
Iteration   4: 311109784.687 ops/s
Iteration   5: 311808790.550 ops/s
Iteration   6: 311580695.834 ops/s
Iteration   7: 311071751.943 ops/s
Iteration   8: 311339469.857 ops/s
Iteration   9: 311690127.075 ops/s
Iteration  10: 311152653.743 ops/s
Iteration  11: 311394906.445 ops/s
Iteration  12: 310990364.469 ops/s
Iteration  13: 311835758.219 ops/s
Iteration  14: 311560687.299 ops/s
Iteration  15: 310795381.244 ops/s
Iteration  16: 310572099.459 ops/s
Iteration  17: 311658531.992 ops/s
Iteration  18: 311916924.904 ops/s
Iteration  19: 311038654.967 ops/s
Iteration  20: 311237546.040 ops/s
Iteration  21: 310878907.443 ops/s
Iteration  22: 310260316.270 ops/s
Iteration  23: 308973702.860 ops/s
Iteration  24: 311590603.996 ops/s
Iteration  25: 308864972.186 ops/s
Iteration  26: 308681789.676 ops/s
Iteration  27: 310933969.266 ops/s
Iteration  28: 309965492.412 ops/s
Iteration  29: 311080358.344 ops/s
Iteration  30: 311415862.909 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectIfWithTarget":
  310858226.406 ±(99.9%) 650983.269 ops/s [Average]
  (min, avg, max) = (308288174.479, 310858226.406, 311916924.904), stdev = 974361.184
  CI (99.9%): [310207243.137, 311509209.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  310858226.406 ± 650983.269  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9886565.478 ops/s
# Warmup Iteration   2: 22054945.369 ops/s
# Warmup Iteration   3: 22718952.444 ops/s
# Warmup Iteration   4: 19146840.676 ops/s
# Warmup Iteration   5: 22691357.492 ops/s
# Warmup Iteration   6: 22202969.131 ops/s
# Warmup Iteration   7: 22692428.186 ops/s
# Warmup Iteration   8: 22746227.911 ops/s
# Warmup Iteration   9: 22709776.051 ops/s
# Warmup Iteration  10: 22521150.533 ops/s
# Warmup Iteration  11: 22687579.974 ops/s
# Warmup Iteration  12: 22676213.417 ops/s
# Warmup Iteration  13: 22697682.981 ops/s
# Warmup Iteration  14: 22447993.750 ops/s
# Warmup Iteration  15: 22633035.896 ops/s
# Warmup Iteration  16: 22685122.822 ops/s
# Warmup Iteration  17: 22722626.126 ops/s
# Warmup Iteration  18: 22711093.169 ops/s
# Warmup Iteration  19: 22717227.283 ops/s
# Warmup Iteration  20: 22699388.412 ops/s
# Warmup Iteration  21: 22552232.856 ops/s
# Warmup Iteration  22: 22722551.959 ops/s
# Warmup Iteration  23: 22291877.741 ops/s
# Warmup Iteration  24: 22698488.807 ops/s
# Warmup Iteration  25: 22738270.918 ops/s
# Warmup Iteration  26: 22562246.191 ops/s
# Warmup Iteration  27: 22657111.621 ops/s
# Warmup Iteration  28: 22648515.352 ops/s
# Warmup Iteration  29: 22541509.170 ops/s
# Warmup Iteration  30: 22691338.213 ops/s
Iteration   1: 22712311.349 ops/s
Iteration   2: 22717445.417 ops/s
Iteration   3: 22769351.395 ops/s
Iteration   4: 22633011.400 ops/s
Iteration   5: 22734952.527 ops/s
Iteration   6: 22613584.107 ops/s
Iteration   7: 22673501.188 ops/s
Iteration   8: 22670140.958 ops/s
Iteration   9: 22692579.111 ops/s
Iteration  10: 21677426.268 ops/s
Iteration  11: 22715641.976 ops/s
Iteration  12: 22663707.961 ops/s
Iteration  13: 21703347.480 ops/s
Iteration  14: 22683249.690 ops/s
Iteration  15: 22720186.191 ops/s
Iteration  16: 22723283.340 ops/s
Iteration  17: 22697092.739 ops/s
Iteration  18: 22720664.531 ops/s
Iteration  19: 22731512.037 ops/s
Iteration  20: 22719110.249 ops/s
Iteration  21: 22682384.209 ops/s
Iteration  22: 22679956.295 ops/s
Iteration  23: 22721266.690 ops/s
Iteration  24: 22738973.475 ops/s
Iteration  25: 22691005.100 ops/s
Iteration  26: 22696625.933 ops/s
Iteration  27: 22731768.757 ops/s
Iteration  28: 22694712.042 ops/s
Iteration  29: 22690994.284 ops/s
Iteration  30: 22705230.698 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectInt":
  22633500.580 ±(99.9%) 172576.163 ops/s [Average]
  (min, avg, max) = (21677426.268, 22633500.580, 22769351.395), stdev = 258303.896
  CI (99.9%): [22460924.417, 22806076.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectInt  thrpt   30  22633500.580 ± 172576.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9737994.804 ops/s
# Warmup Iteration   2: 21993570.474 ops/s
# Warmup Iteration   3: 22712783.882 ops/s
# Warmup Iteration   4: 19249173.488 ops/s
# Warmup Iteration   5: 22807023.833 ops/s
# Warmup Iteration   6: 22793773.325 ops/s
# Warmup Iteration   7: 22756867.954 ops/s
# Warmup Iteration   8: 22799245.933 ops/s
# Warmup Iteration   9: 22778208.437 ops/s
# Warmup Iteration  10: 22786598.575 ops/s
# Warmup Iteration  11: 22773193.687 ops/s
# Warmup Iteration  12: 22773344.394 ops/s
# Warmup Iteration  13: 22782894.169 ops/s
# Warmup Iteration  14: 22769120.228 ops/s
# Warmup Iteration  15: 22705372.737 ops/s
# Warmup Iteration  16: 22786177.511 ops/s
# Warmup Iteration  17: 22822691.057 ops/s
# Warmup Iteration  18: 22759875.398 ops/s
# Warmup Iteration  19: 22802560.812 ops/s
# Warmup Iteration  20: 22782705.928 ops/s
# Warmup Iteration  21: 22736394.071 ops/s
# Warmup Iteration  22: 22769725.933 ops/s
# Warmup Iteration  23: 22781883.367 ops/s
# Warmup Iteration  24: 22735894.088 ops/s
# Warmup Iteration  25: 22693375.315 ops/s
# Warmup Iteration  26: 22778215.693 ops/s
# Warmup Iteration  27: 22783456.886 ops/s
# Warmup Iteration  28: 22747282.146 ops/s
# Warmup Iteration  29: 22738123.025 ops/s
# Warmup Iteration  30: 22788686.728 ops/s
Iteration   1: 22791569.374 ops/s
Iteration   2: 22792649.356 ops/s
Iteration   3: 22776666.278 ops/s
Iteration   4: 22761241.288 ops/s
Iteration   5: 22794846.699 ops/s
Iteration   6: 22819082.249 ops/s
Iteration   7: 22816130.676 ops/s
Iteration   8: 22775835.648 ops/s
Iteration   9: 22809233.581 ops/s
Iteration  10: 22757510.779 ops/s
Iteration  11: 22807142.473 ops/s
Iteration  12: 22797232.231 ops/s
Iteration  13: 22785526.893 ops/s
Iteration  14: 22808314.092 ops/s
Iteration  15: 22771086.810 ops/s
Iteration  16: 22825928.594 ops/s
Iteration  17: 22835525.378 ops/s
Iteration  18: 22809143.670 ops/s
Iteration  19: 22813137.664 ops/s
Iteration  20: 22785350.394 ops/s
Iteration  21: 22808181.722 ops/s
Iteration  22: 22815504.435 ops/s
Iteration  23: 22813614.338 ops/s
Iteration  24: 22806297.734 ops/s
Iteration  25: 22780980.695 ops/s
Iteration  26: 22752984.925 ops/s
Iteration  27: 22828053.860 ops/s
Iteration  28: 22815183.661 ops/s
Iteration  29: 22737895.815 ops/s
Iteration  30: 22743223.044 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectLong":
  22794502.479 ±(99.9%) 17178.263 ops/s [Average]
  (min, avg, max) = (22737895.815, 22794502.479, 22835525.378), stdev = 25711.618
  CI (99.9%): [22777324.215, 22811680.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectLong  thrpt   30  22794502.479 ± 17178.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9843759.200 ops/s
# Warmup Iteration   2: 22043977.221 ops/s
# Warmup Iteration   3: 22800834.032 ops/s
# Warmup Iteration   4: 19313762.444 ops/s
# Warmup Iteration   5: 22910891.541 ops/s
# Warmup Iteration   6: 22927529.301 ops/s
# Warmup Iteration   7: 22876328.932 ops/s
# Warmup Iteration   8: 22882302.071 ops/s
# Warmup Iteration   9: 22880803.867 ops/s
# Warmup Iteration  10: 22768610.413 ops/s
# Warmup Iteration  11: 22846689.750 ops/s
# Warmup Iteration  12: 22899234.954 ops/s
# Warmup Iteration  13: 22877066.405 ops/s
# Warmup Iteration  14: 22900615.425 ops/s
# Warmup Iteration  15: 22868178.630 ops/s
# Warmup Iteration  16: 22916746.757 ops/s
# Warmup Iteration  17: 22931131.029 ops/s
# Warmup Iteration  18: 22875029.185 ops/s
# Warmup Iteration  19: 22921095.060 ops/s
# Warmup Iteration  20: 22837960.605 ops/s
# Warmup Iteration  21: 22884121.912 ops/s
# Warmup Iteration  22: 22874177.446 ops/s
# Warmup Iteration  23: 22926656.839 ops/s
# Warmup Iteration  24: 22793594.036 ops/s
# Warmup Iteration  25: 22880514.731 ops/s
# Warmup Iteration  26: 22856829.661 ops/s
# Warmup Iteration  27: 22908524.879 ops/s
# Warmup Iteration  28: 22785004.610 ops/s
# Warmup Iteration  29: 22679205.260 ops/s
# Warmup Iteration  30: 22785744.608 ops/s
Iteration   1: 22829151.884 ops/s
Iteration   2: 22938267.500 ops/s
Iteration   3: 22893264.714 ops/s
Iteration   4: 22884983.859 ops/s
Iteration   5: 22821113.656 ops/s
Iteration   6: 22927555.623 ops/s
Iteration   7: 22910069.445 ops/s
Iteration   8: 22903830.665 ops/s
Iteration   9: 23004115.570 ops/s
Iteration  10: 22898460.794 ops/s
Iteration  11: 22894620.110 ops/s
Iteration  12: 22688244.400 ops/s
Iteration  13: 22922803.003 ops/s
Iteration  14: 22807856.922 ops/s
Iteration  15: 22639631.952 ops/s
Iteration  16: 22989009.102 ops/s
Iteration  17: 22961603.600 ops/s
Iteration  18: 22905170.817 ops/s
Iteration  19: 22954353.489 ops/s
Iteration  20: 22942458.573 ops/s
Iteration  21: 22862860.761 ops/s
Iteration  22: 22896694.155 ops/s
Iteration  23: 22830179.099 ops/s
Iteration  24: 22872714.211 ops/s
Iteration  25: 22831876.153 ops/s
Iteration  26: 22948615.780 ops/s
Iteration  27: 22838599.088 ops/s
Iteration  28: 22746328.018 ops/s
Iteration  29: 22854620.208 ops/s
Iteration  30: 22910831.061 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectShort":
  22876996.140 ±(99.9%) 54159.750 ops/s [Average]
  (min, avg, max) = (22639631.952, 22876996.140, 23004115.570), stdev = 81063.771
  CI (99.9%): [22822836.390, 22931155.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectShort  thrpt   30  22876996.140 ± 54159.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151040038.410 ops/s
# Warmup Iteration   2: 301192510.083 ops/s
# Warmup Iteration   3: 267313521.221 ops/s
# Warmup Iteration   4: 310493015.151 ops/s
# Warmup Iteration   5: 307526376.702 ops/s
# Warmup Iteration   6: 309486313.192 ops/s
# Warmup Iteration   7: 310310371.638 ops/s
# Warmup Iteration   8: 309480680.323 ops/s
# Warmup Iteration   9: 309435686.622 ops/s
# Warmup Iteration  10: 309692738.529 ops/s
# Warmup Iteration  11: 308469068.936 ops/s
# Warmup Iteration  12: 307640394.428 ops/s
# Warmup Iteration  13: 308669978.655 ops/s
# Warmup Iteration  14: 310001409.448 ops/s
# Warmup Iteration  15: 310426427.370 ops/s
# Warmup Iteration  16: 309331400.980 ops/s
# Warmup Iteration  17: 310590876.369 ops/s
# Warmup Iteration  18: 307433902.488 ops/s
# Warmup Iteration  19: 308746399.260 ops/s
# Warmup Iteration  20: 306062623.034 ops/s
# Warmup Iteration  21: 309654840.494 ops/s
# Warmup Iteration  22: 310765004.225 ops/s
# Warmup Iteration  23: 309267865.920 ops/s
# Warmup Iteration  24: 308849405.352 ops/s
# Warmup Iteration  25: 308828027.407 ops/s
# Warmup Iteration  26: 307983201.190 ops/s
# Warmup Iteration  27: 308675856.484 ops/s
# Warmup Iteration  28: 308441052.140 ops/s
# Warmup Iteration  29: 309160027.752 ops/s
# Warmup Iteration  30: 307865474.606 ops/s
Iteration   1: 309467147.816 ops/s
Iteration   2: 309833835.256 ops/s
Iteration   3: 310220016.330 ops/s
Iteration   4: 310201704.944 ops/s
Iteration   5: 310493567.393 ops/s
Iteration   6: 310168530.267 ops/s
Iteration   7: 308054678.936 ops/s
Iteration   8: 309303694.735 ops/s
Iteration   9: 308911340.471 ops/s
Iteration  10: 310293974.548 ops/s
Iteration  11: 309720962.861 ops/s
Iteration  12: 310379005.304 ops/s
Iteration  13: 309760327.738 ops/s
Iteration  14: 307788235.553 ops/s
Iteration  15: 311135590.501 ops/s
Iteration  16: 308986305.737 ops/s
Iteration  17: 308838001.539 ops/s
Iteration  18: 310513688.039 ops/s
Iteration  19: 308724536.046 ops/s
Iteration  20: 309329038.556 ops/s
Iteration  21: 308555769.518 ops/s
Iteration  22: 307186249.871 ops/s
Iteration  23: 308917376.888 ops/s
Iteration  24: 309719202.822 ops/s
Iteration  25: 309070826.055 ops/s
Iteration  26: 308204948.434 ops/s
Iteration  27: 308811929.557 ops/s
Iteration  28: 309339394.611 ops/s
Iteration  29: 309503931.485 ops/s
Iteration  30: 305885282.174 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith":
  309243969.800 ±(99.9%) 729874.005 ops/s [Average]
  (min, avg, max) = (305885282.174, 309243969.800, 311135590.501), stdev = 1092441.133
  CI (99.9%): [308514095.795, 309973843.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectWith  thrpt   30  309243969.800 ± 729874.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28237222.012 ops/s
# Warmup Iteration   2: 49896910.731 ops/s
# Warmup Iteration   3: 58451258.368 ops/s
# Warmup Iteration   4: 58343736.611 ops/s
# Warmup Iteration   5: 58178466.588 ops/s
# Warmup Iteration   6: 58342782.165 ops/s
# Warmup Iteration   7: 57816658.789 ops/s
# Warmup Iteration   8: 58173565.538 ops/s
# Warmup Iteration   9: 58228179.029 ops/s
# Warmup Iteration  10: 58663485.840 ops/s
# Warmup Iteration  11: 58266248.751 ops/s
# Warmup Iteration  12: 58026691.050 ops/s
# Warmup Iteration  13: 58700278.717 ops/s
# Warmup Iteration  14: 57699588.620 ops/s
# Warmup Iteration  15: 58605342.456 ops/s
# Warmup Iteration  16: 58259984.132 ops/s
# Warmup Iteration  17: 58070686.739 ops/s
# Warmup Iteration  18: 58203423.823 ops/s
# Warmup Iteration  19: 58546654.921 ops/s
# Warmup Iteration  20: 58659221.548 ops/s
# Warmup Iteration  21: 58183344.620 ops/s
# Warmup Iteration  22: 58258824.498 ops/s
# Warmup Iteration  23: 58339841.549 ops/s
# Warmup Iteration  24: 58377827.819 ops/s
# Warmup Iteration  25: 58447049.533 ops/s
# Warmup Iteration  26: 58539432.288 ops/s
# Warmup Iteration  27: 58470454.309 ops/s
# Warmup Iteration  28: 58073011.209 ops/s
# Warmup Iteration  29: 58017063.676 ops/s
# Warmup Iteration  30: 58316195.231 ops/s
Iteration   1: 58847235.116 ops/s
Iteration   2: 58376450.981 ops/s
Iteration   3: 58331202.979 ops/s
Iteration   4: 58458094.756 ops/s
Iteration   5: 58977809.972 ops/s
Iteration   6: 58263627.671 ops/s
Iteration   7: 58078817.713 ops/s
Iteration   8: 58553527.045 ops/s
Iteration   9: 58404753.777 ops/s
Iteration  10: 58055259.008 ops/s
Iteration  11: 58594796.993 ops/s
Iteration  12: 58676923.251 ops/s
Iteration  13: 58812431.694 ops/s
Iteration  14: 58224235.946 ops/s
Iteration  15: 58505281.522 ops/s
Iteration  16: 58351762.260 ops/s
Iteration  17: 58517914.313 ops/s
Iteration  18: 58837220.339 ops/s
Iteration  19: 58622487.888 ops/s
Iteration  20: 58029040.953 ops/s
Iteration  21: 58626445.151 ops/s
Iteration  22: 58984752.148 ops/s
Iteration  23: 58454060.338 ops/s
Iteration  24: 58476446.810 ops/s
Iteration  25: 58866699.034 ops/s
Iteration  26: 58641879.925 ops/s
Iteration  27: 57944439.403 ops/s
Iteration  28: 58322478.076 ops/s
Iteration  29: 58559379.542 ops/s
Iteration  30: 58536963.975 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndex":
  58497747.286 ±(99.9%) 183067.705 ops/s [Average]
  (min, avg, max) = (57944439.403, 58497747.286, 58984752.148), stdev = 274007.143
  CI (99.9%): [58314679.581, 58680814.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  58497747.286 ± 183067.705  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21408915.039 ops/s
# Warmup Iteration   2: 37384982.571 ops/s
# Warmup Iteration   3: 44285100.055 ops/s
# Warmup Iteration   4: 44263525.556 ops/s
# Warmup Iteration   5: 44151706.855 ops/s
# Warmup Iteration   6: 44133890.597 ops/s
# Warmup Iteration   7: 44169808.407 ops/s
# Warmup Iteration   8: 44375507.350 ops/s
# Warmup Iteration   9: 44156370.288 ops/s
# Warmup Iteration  10: 44187435.604 ops/s
# Warmup Iteration  11: 44430950.026 ops/s
# Warmup Iteration  12: 44310111.502 ops/s
# Warmup Iteration  13: 44115780.069 ops/s
# Warmup Iteration  14: 44159077.161 ops/s
# Warmup Iteration  15: 44217995.814 ops/s
# Warmup Iteration  16: 44148487.277 ops/s
# Warmup Iteration  17: 44569255.245 ops/s
# Warmup Iteration  18: 44385124.267 ops/s
# Warmup Iteration  19: 44537139.551 ops/s
# Warmup Iteration  20: 44369372.434 ops/s
# Warmup Iteration  21: 44015573.600 ops/s
# Warmup Iteration  22: 44484299.547 ops/s
# Warmup Iteration  23: 44768801.755 ops/s
# Warmup Iteration  24: 44206370.976 ops/s
# Warmup Iteration  25: 44264127.740 ops/s
# Warmup Iteration  26: 44572698.497 ops/s
# Warmup Iteration  27: 44317467.683 ops/s
# Warmup Iteration  28: 44134917.804 ops/s
# Warmup Iteration  29: 44386586.787 ops/s
# Warmup Iteration  30: 44315366.903 ops/s
Iteration   1: 44432723.151 ops/s
Iteration   2: 44488897.269 ops/s
Iteration   3: 44523892.845 ops/s
Iteration   4: 44284755.111 ops/s
Iteration   5: 44576511.858 ops/s
Iteration   6: 44477710.599 ops/s
Iteration   7: 44442147.420 ops/s
Iteration   8: 44615383.985 ops/s
Iteration   9: 44524394.489 ops/s
Iteration  10: 44137135.814 ops/s
Iteration  11: 44480911.213 ops/s
Iteration  12: 44454193.622 ops/s
Iteration  13: 44001999.983 ops/s
Iteration  14: 44559807.254 ops/s
Iteration  15: 44864452.711 ops/s
Iteration  16: 44319220.520 ops/s
Iteration  17: 44344232.799 ops/s
Iteration  18: 44393293.071 ops/s
Iteration  19: 44349432.032 ops/s
Iteration  20: 44250192.818 ops/s
Iteration  21: 44604707.099 ops/s
Iteration  22: 44508537.249 ops/s
Iteration  23: 44301935.781 ops/s
Iteration  24: 44504093.123 ops/s
Iteration  25: 44587703.343 ops/s
Iteration  26: 44280770.810 ops/s
Iteration  27: 44338025.046 ops/s
Iteration  28: 44265982.293 ops/s
Iteration  29: 44517813.853 ops/s
Iteration  30: 44433393.550 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  44428808.357 ±(99.9%) 110051.334 ops/s [Average]
  (min, avg, max) = (44001999.983, 44428808.357, 44864452.711), stdev = 164719.668
  CI (99.9%): [44318757.023, 44538859.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  44428808.357 ± 110051.334  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150984142.497 ops/s
# Warmup Iteration   2: 302485099.191 ops/s
# Warmup Iteration   3: 266895265.663 ops/s
# Warmup Iteration   4: 311160296.312 ops/s
# Warmup Iteration   5: 311776709.176 ops/s
# Warmup Iteration   6: 313180641.217 ops/s
# Warmup Iteration   7: 312218752.685 ops/s
# Warmup Iteration   8: 312712946.348 ops/s
# Warmup Iteration   9: 312920882.311 ops/s
# Warmup Iteration  10: 311003746.542 ops/s
# Warmup Iteration  11: 312301013.017 ops/s
# Warmup Iteration  12: 312079317.907 ops/s
# Warmup Iteration  13: 311224888.908 ops/s
# Warmup Iteration  14: 312432964.683 ops/s
# Warmup Iteration  15: 310941456.381 ops/s
# Warmup Iteration  16: 313228734.089 ops/s
# Warmup Iteration  17: 312703632.685 ops/s
# Warmup Iteration  18: 313592842.518 ops/s
# Warmup Iteration  19: 312423411.982 ops/s
# Warmup Iteration  20: 310935304.121 ops/s
# Warmup Iteration  21: 311828553.630 ops/s
# Warmup Iteration  22: 312173500.806 ops/s
# Warmup Iteration  23: 311785028.097 ops/s
# Warmup Iteration  24: 312329327.740 ops/s
# Warmup Iteration  25: 312146079.819 ops/s
# Warmup Iteration  26: 313110493.846 ops/s
# Warmup Iteration  27: 312624199.136 ops/s
# Warmup Iteration  28: 311511244.768 ops/s
# Warmup Iteration  29: 311108809.962 ops/s
# Warmup Iteration  30: 312375479.806 ops/s
Iteration   1: 310781976.532 ops/s
Iteration   2: 312498037.562 ops/s
Iteration   3: 313260241.590 ops/s
Iteration   4: 311562407.781 ops/s
Iteration   5: 310279230.418 ops/s
Iteration   6: 310760578.331 ops/s
Iteration   7: 310856378.943 ops/s
Iteration   8: 312304117.729 ops/s
Iteration   9: 313045449.169 ops/s
Iteration  10: 313195518.016 ops/s
Iteration  11: 312064565.820 ops/s
Iteration  12: 310547466.199 ops/s
Iteration  13: 310830876.551 ops/s
Iteration  14: 311964386.917 ops/s
Iteration  15: 313677519.428 ops/s
Iteration  16: 313087433.375 ops/s
Iteration  17: 310638551.237 ops/s
Iteration  18: 310730039.945 ops/s
Iteration  19: 312868284.274 ops/s
Iteration  20: 312217872.088 ops/s
Iteration  21: 312706189.383 ops/s
Iteration  22: 312729958.429 ops/s
Iteration  23: 311288098.555 ops/s
Iteration  24: 310149484.344 ops/s
Iteration  25: 311704006.859 ops/s
Iteration  26: 312104874.791 ops/s
Iteration  27: 311948414.415 ops/s
Iteration  28: 311125009.393 ops/s
Iteration  29: 309939458.739 ops/s
Iteration  30: 313042205.152 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collectWith_target":
  311796954.399 ±(99.9%) 719177.337 ops/s [Average]
  (min, avg, max) = (309939458.739, 311796954.399, 313677519.428), stdev = 1076430.864
  CI (99.9%): [311077777.061, 312516131.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collectWith_target  thrpt   30  311796954.399 ± 719177.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150986362.428 ops/s
# Warmup Iteration   2: 302826936.423 ops/s
# Warmup Iteration   3: 265117887.360 ops/s
# Warmup Iteration   4: 308998866.741 ops/s
# Warmup Iteration   5: 309180945.054 ops/s
# Warmup Iteration   6: 310498697.640 ops/s
# Warmup Iteration   7: 310578341.446 ops/s
# Warmup Iteration   8: 309885299.279 ops/s
# Warmup Iteration   9: 309340483.681 ops/s
# Warmup Iteration  10: 308648192.646 ops/s
# Warmup Iteration  11: 309244731.346 ops/s
# Warmup Iteration  12: 309202973.250 ops/s
# Warmup Iteration  13: 308016735.608 ops/s
# Warmup Iteration  14: 308446627.814 ops/s
# Warmup Iteration  15: 309460723.198 ops/s
# Warmup Iteration  16: 309052183.491 ops/s
# Warmup Iteration  17: 309771506.747 ops/s
# Warmup Iteration  18: 309379626.486 ops/s
# Warmup Iteration  19: 309638812.089 ops/s
# Warmup Iteration  20: 308627800.447 ops/s
# Warmup Iteration  21: 309799245.487 ops/s
# Warmup Iteration  22: 309160822.746 ops/s
# Warmup Iteration  23: 308940096.406 ops/s
# Warmup Iteration  24: 310354449.634 ops/s
# Warmup Iteration  25: 310290133.581 ops/s
# Warmup Iteration  26: 310590822.873 ops/s
# Warmup Iteration  27: 309474638.232 ops/s
# Warmup Iteration  28: 309276500.157 ops/s
# Warmup Iteration  29: 309539373.310 ops/s
# Warmup Iteration  30: 309810117.330 ops/s
Iteration   1: 309455601.323 ops/s
Iteration   2: 308411968.986 ops/s
Iteration   3: 309951058.116 ops/s
Iteration   4: 311382734.467 ops/s
Iteration   5: 309376350.173 ops/s
Iteration   6: 310377229.354 ops/s
Iteration   7: 308621543.577 ops/s
Iteration   8: 307783264.398 ops/s
Iteration   9: 309482839.257 ops/s
Iteration  10: 309523832.420 ops/s
Iteration  11: 309742019.044 ops/s
Iteration  12: 308861767.878 ops/s
Iteration  13: 309232461.266 ops/s
Iteration  14: 310818535.878 ops/s
Iteration  15: 310504111.510 ops/s
Iteration  16: 311240806.879 ops/s
Iteration  17: 310763704.048 ops/s
Iteration  18: 310197098.975 ops/s
Iteration  19: 309454885.143 ops/s
Iteration  20: 309592212.163 ops/s
Iteration  21: 311035418.403 ops/s
Iteration  22: 309136946.740 ops/s
Iteration  23: 308251108.503 ops/s
Iteration  24: 307346252.185 ops/s
Iteration  25: 307793922.022 ops/s
Iteration  26: 310273351.202 ops/s
Iteration  27: 308536170.043 ops/s
Iteration  28: 310340767.257 ops/s
Iteration  29: 308181448.412 ops/s
Iteration  30: 308694997.600 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_collect_target":
  309478813.574 ±(99.9%) 723973.025 ops/s [Average]
  (min, avg, max) = (307346252.185, 309478813.574, 311382734.467), stdev = 1083608.823
  CI (99.9%): [308754840.549, 310202786.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_collect_target  thrpt   30  309478813.574 ± 723973.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150110772.703 ops/s
# Warmup Iteration   2: 300803990.842 ops/s
# Warmup Iteration   3: 263878554.263 ops/s
# Warmup Iteration   4: 310842338.848 ops/s
# Warmup Iteration   5: 308952573.450 ops/s
# Warmup Iteration   6: 309517166.819 ops/s
# Warmup Iteration   7: 308738287.236 ops/s
# Warmup Iteration   8: 309785840.016 ops/s
# Warmup Iteration   9: 308657366.003 ops/s
# Warmup Iteration  10: 309686712.800 ops/s
# Warmup Iteration  11: 309736788.519 ops/s
# Warmup Iteration  12: 310062582.568 ops/s
# Warmup Iteration  13: 308467366.008 ops/s
# Warmup Iteration  14: 309297145.397 ops/s
# Warmup Iteration  15: 310000575.495 ops/s
# Warmup Iteration  16: 309184139.405 ops/s
# Warmup Iteration  17: 310193776.184 ops/s
# Warmup Iteration  18: 310155965.627 ops/s
# Warmup Iteration  19: 309778118.010 ops/s
# Warmup Iteration  20: 309170619.367 ops/s
# Warmup Iteration  21: 307511276.660 ops/s
# Warmup Iteration  22: 310389303.272 ops/s
# Warmup Iteration  23: 310167578.552 ops/s
# Warmup Iteration  24: 310295897.338 ops/s
# Warmup Iteration  25: 309310757.596 ops/s
# Warmup Iteration  26: 309572599.068 ops/s
# Warmup Iteration  27: 308531366.209 ops/s
# Warmup Iteration  28: 308917773.247 ops/s
# Warmup Iteration  29: 308783599.521 ops/s
# Warmup Iteration  30: 310302399.695 ops/s
Iteration   1: 309431799.701 ops/s
Iteration   2: 309687654.114 ops/s
Iteration   3: 309478049.529 ops/s
Iteration   4: 309194802.563 ops/s
Iteration   5: 309471933.524 ops/s
Iteration   6: 310593652.875 ops/s
Iteration   7: 309037483.173 ops/s
Iteration   8: 308941138.689 ops/s
Iteration   9: 309688664.383 ops/s
Iteration  10: 309300610.033 ops/s
Iteration  11: 309528243.493 ops/s
Iteration  12: 308228753.248 ops/s
Iteration  13: 308493966.517 ops/s
Iteration  14: 311227569.839 ops/s
Iteration  15: 310836993.929 ops/s
Iteration  16: 310537932.244 ops/s
Iteration  17: 308432702.847 ops/s
Iteration  18: 305358851.952 ops/s
Iteration  19: 307124041.363 ops/s
Iteration  20: 306568770.910 ops/s
Iteration  21: 308933390.444 ops/s
Iteration  22: 308503860.867 ops/s
Iteration  23: 305998298.345 ops/s
Iteration  24: 308247621.942 ops/s
Iteration  25: 308409086.169 ops/s
Iteration  26: 309072154.165 ops/s
Iteration  27: 308364628.290 ops/s
Iteration  28: 310230260.241 ops/s
Iteration  29: 308788611.502 ops/s
Iteration  30: 309685370.598 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_contains":
  308913229.916 ±(99.9%) 890219.985 ops/s [Average]
  (min, avg, max) = (305358851.952, 308913229.916, 311227569.839), stdev = 1332439.465
  CI (99.9%): [308023009.932, 309803449.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_contains  thrpt   30  308913229.916 ± 890219.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57968148.869 ops/s
# Warmup Iteration   2: 117231689.048 ops/s
# Warmup Iteration   3: 108960699.121 ops/s
# Warmup Iteration   4: 126273067.984 ops/s
# Warmup Iteration   5: 127754263.767 ops/s
# Warmup Iteration   6: 128027988.362 ops/s
# Warmup Iteration   7: 126030351.465 ops/s
# Warmup Iteration   8: 127153680.711 ops/s
# Warmup Iteration   9: 127514665.954 ops/s
# Warmup Iteration  10: 127910192.942 ops/s
# Warmup Iteration  11: 126735674.446 ops/s
# Warmup Iteration  12: 127157130.137 ops/s
# Warmup Iteration  13: 126933227.274 ops/s
# Warmup Iteration  14: 126809593.165 ops/s
# Warmup Iteration  15: 127874166.978 ops/s
# Warmup Iteration  16: 125167063.848 ops/s
# Warmup Iteration  17: 124756715.720 ops/s
# Warmup Iteration  18: 127415271.926 ops/s
# Warmup Iteration  19: 127143640.621 ops/s
# Warmup Iteration  20: 127502854.068 ops/s
# Warmup Iteration  21: 127195390.539 ops/s
# Warmup Iteration  22: 127247610.652 ops/s
# Warmup Iteration  23: 128294229.529 ops/s
# Warmup Iteration  24: 126916032.525 ops/s
# Warmup Iteration  25: 126591020.877 ops/s
# Warmup Iteration  26: 126832571.018 ops/s
# Warmup Iteration  27: 127451734.216 ops/s
# Warmup Iteration  28: 126553204.646 ops/s
# Warmup Iteration  29: 126926044.900 ops/s
# Warmup Iteration  30: 127840556.692 ops/s
Iteration   1: 127893321.952 ops/s
Iteration   2: 126655397.321 ops/s
Iteration   3: 128255159.502 ops/s
Iteration   4: 126773041.956 ops/s
Iteration   5: 127625526.391 ops/s
Iteration   6: 126441490.470 ops/s
Iteration   7: 127446764.600 ops/s
Iteration   8: 126246839.776 ops/s
Iteration   9: 127978790.636 ops/s
Iteration  10: 127064956.395 ops/s
Iteration  11: 129013441.866 ops/s
Iteration  12: 127620910.639 ops/s
Iteration  13: 127942650.576 ops/s
Iteration  14: 127141324.919 ops/s
Iteration  15: 126406680.221 ops/s
Iteration  16: 127969142.360 ops/s
Iteration  17: 126930837.653 ops/s
Iteration  18: 126083697.455 ops/s
Iteration  19: 126658357.608 ops/s
Iteration  20: 127091388.629 ops/s
Iteration  21: 126958168.210 ops/s
Iteration  22: 128093710.240 ops/s
Iteration  23: 127295400.459 ops/s
Iteration  24: 127009515.554 ops/s
Iteration  25: 128168791.191 ops/s
Iteration  26: 127058381.039 ops/s
Iteration  27: 127939400.927 ops/s
Iteration  28: 128663591.372 ops/s
Iteration  29: 126960214.295 ops/s
Iteration  30: 128914158.370 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAll":
  127410035.086 ±(99.9%) 519170.770 ops/s [Average]
  (min, avg, max) = (126083697.455, 127410035.086, 129013441.866), stdev = 777070.426
  CI (99.9%): [126890864.316, 127929205.856] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_containsAll  thrpt   30  127410035.086 ± 519170.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 74448727.244 ops/s
# Warmup Iteration   2: 151413739.400 ops/s
# Warmup Iteration   3: 144558654.006 ops/s
# Warmup Iteration   4: 170205611.779 ops/s
# Warmup Iteration   5: 169749475.893 ops/s
# Warmup Iteration   6: 169925847.825 ops/s
# Warmup Iteration   7: 169902038.215 ops/s
# Warmup Iteration   8: 170582552.078 ops/s
# Warmup Iteration   9: 169819697.732 ops/s
# Warmup Iteration  10: 170112114.819 ops/s
# Warmup Iteration  11: 170243907.741 ops/s
# Warmup Iteration  12: 169936107.880 ops/s
# Warmup Iteration  13: 169700194.904 ops/s
# Warmup Iteration  14: 169613405.969 ops/s
# Warmup Iteration  15: 170799013.654 ops/s
# Warmup Iteration  16: 170136777.449 ops/s
# Warmup Iteration  17: 170669369.001 ops/s
# Warmup Iteration  18: 169811014.819 ops/s
# Warmup Iteration  19: 169124112.274 ops/s
# Warmup Iteration  20: 170023806.628 ops/s
# Warmup Iteration  21: 169897217.928 ops/s
# Warmup Iteration  22: 169423433.629 ops/s
# Warmup Iteration  23: 169578187.206 ops/s
# Warmup Iteration  24: 169708557.050 ops/s
# Warmup Iteration  25: 169795503.579 ops/s
# Warmup Iteration  26: 170612203.878 ops/s
# Warmup Iteration  27: 169367665.028 ops/s
# Warmup Iteration  28: 169465637.563 ops/s
# Warmup Iteration  29: 170056872.553 ops/s
# Warmup Iteration  30: 169739680.204 ops/s
Iteration   1: 169830045.191 ops/s
Iteration   2: 169797070.128 ops/s
Iteration   3: 168970341.913 ops/s
Iteration   4: 169545096.454 ops/s
Iteration   5: 170599444.585 ops/s
Iteration   6: 169594410.782 ops/s
Iteration   7: 170106846.575 ops/s
Iteration   8: 169948957.275 ops/s
Iteration   9: 169647549.993 ops/s
Iteration  10: 169840911.987 ops/s
Iteration  11: 169591046.509 ops/s
Iteration  12: 170244336.440 ops/s
Iteration  13: 169973665.806 ops/s
Iteration  14: 170781596.200 ops/s
Iteration  15: 170525670.158 ops/s
Iteration  16: 170056047.454 ops/s
Iteration  17: 169087897.183 ops/s
Iteration  18: 169579513.425 ops/s
Iteration  19: 169640152.568 ops/s
Iteration  20: 169680075.844 ops/s
Iteration  21: 170217046.190 ops/s
Iteration  22: 169286531.437 ops/s
Iteration  23: 169724719.526 ops/s
Iteration  24: 169619630.064 ops/s
Iteration  25: 169585757.187 ops/s
Iteration  26: 169967807.779 ops/s
Iteration  27: 169726312.467 ops/s
Iteration  28: 169007333.917 ops/s
Iteration  29: 170322916.554 ops/s
Iteration  30: 170360684.797 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllArray":
  169828647.213 ±(99.9%) 297400.558 ops/s [Average]
  (min, avg, max) = (168970341.913, 169828647.213, 170781596.200), stdev = 445135.188
  CI (99.9%): [169531246.655, 170126047.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_containsAllArray  thrpt   30  169828647.213 ± 297400.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22396457.319 ops/s
# Warmup Iteration   2: 23766569.024 ops/s
# Warmup Iteration   3: 25153834.863 ops/s
# Warmup Iteration   4: 29742417.329 ops/s
# Warmup Iteration   5: 29668721.788 ops/s
# Warmup Iteration   6: 29735899.771 ops/s
# Warmup Iteration   7: 29664716.871 ops/s
# Warmup Iteration   8: 29622725.312 ops/s
# Warmup Iteration   9: 29738098.879 ops/s
# Warmup Iteration  10: 29649223.134 ops/s
# Warmup Iteration  11: 29716101.115 ops/s
# Warmup Iteration  12: 29652793.443 ops/s
# Warmup Iteration  13: 29739501.545 ops/s
# Warmup Iteration  14: 29621386.664 ops/s
# Warmup Iteration  15: 29632000.435 ops/s
# Warmup Iteration  16: 29666952.311 ops/s
# Warmup Iteration  17: 25442373.065 ops/s
# Warmup Iteration  18: 29160979.833 ops/s
# Warmup Iteration  19: 29748038.862 ops/s
# Warmup Iteration  20: 29744818.722 ops/s
# Warmup Iteration  21: 29683118.801 ops/s
# Warmup Iteration  22: 29751880.267 ops/s
# Warmup Iteration  23: 29715017.955 ops/s
# Warmup Iteration  24: 29679621.741 ops/s
# Warmup Iteration  25: 29717979.244 ops/s
# Warmup Iteration  26: 29717892.851 ops/s
# Warmup Iteration  27: 29711399.932 ops/s
# Warmup Iteration  28: 29713909.294 ops/s
# Warmup Iteration  29: 29708765.992 ops/s
# Warmup Iteration  30: 29664001.744 ops/s
Iteration   1: 29673540.600 ops/s
Iteration   2: 29692477.623 ops/s
Iteration   3: 29630955.524 ops/s
Iteration   4: 29629162.143 ops/s
Iteration   5: 29560112.876 ops/s
Iteration   6: 29746483.792 ops/s
Iteration   7: 29753288.819 ops/s
Iteration   8: 29735243.914 ops/s
Iteration   9: 29746525.420 ops/s
Iteration  10: 29736412.391 ops/s
Iteration  11: 29657334.428 ops/s
Iteration  12: 29491874.996 ops/s
Iteration  13: 29743218.120 ops/s
Iteration  14: 29728423.319 ops/s
Iteration  15: 29684222.491 ops/s
Iteration  16: 29677061.300 ops/s
Iteration  17: 29692569.025 ops/s
Iteration  18: 29713736.089 ops/s
Iteration  19: 29741948.328 ops/s
Iteration  20: 29736091.307 ops/s
Iteration  21: 29729226.922 ops/s
Iteration  22: 29690768.563 ops/s
Iteration  23: 29693061.162 ops/s
Iteration  24: 29733400.896 ops/s
Iteration  25: 29694492.466 ops/s
Iteration  26: 29689058.681 ops/s
Iteration  27: 29458131.915 ops/s
Iteration  28: 29719205.109 ops/s
Iteration  29: 29571250.062 ops/s
Iteration  30: 29699089.933 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_containsAllIterable":
  29681612.274 ±(99.9%) 49516.412 ops/s [Average]
  (min, avg, max) = (29458131.915, 29681612.274, 29753288.819), stdev = 74113.840
  CI (99.9%): [29632095.862, 29731128.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  29681612.274 ± 49516.412  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32684126.279 ops/s
# Warmup Iteration   2: 67005756.698 ops/s
# Warmup Iteration   3: 63696124.346 ops/s
# Warmup Iteration   4: 75699807.195 ops/s
# Warmup Iteration   5: 75820649.743 ops/s
# Warmup Iteration   6: 75523399.431 ops/s
# Warmup Iteration   7: 75715568.550 ops/s
# Warmup Iteration   8: 75723096.982 ops/s
# Warmup Iteration   9: 75458343.417 ops/s
# Warmup Iteration  10: 75806538.872 ops/s
# Warmup Iteration  11: 75969286.111 ops/s
# Warmup Iteration  12: 75643430.198 ops/s
# Warmup Iteration  13: 75636783.855 ops/s
# Warmup Iteration  14: 75714579.606 ops/s
# Warmup Iteration  15: 75979847.120 ops/s
# Warmup Iteration  16: 75851293.989 ops/s
# Warmup Iteration  17: 75471457.944 ops/s
# Warmup Iteration  18: 75830978.079 ops/s
# Warmup Iteration  19: 75684336.698 ops/s
# Warmup Iteration  20: 75735869.966 ops/s
# Warmup Iteration  21: 75780757.010 ops/s
# Warmup Iteration  22: 75914133.140 ops/s
# Warmup Iteration  23: 75396874.974 ops/s
# Warmup Iteration  24: 75749921.362 ops/s
# Warmup Iteration  25: 75775623.093 ops/s
# Warmup Iteration  26: 75786543.195 ops/s
# Warmup Iteration  27: 75485904.874 ops/s
# Warmup Iteration  28: 75541905.120 ops/s
# Warmup Iteration  29: 75853515.023 ops/s
# Warmup Iteration  30: 75682369.021 ops/s
Iteration   1: 75634341.114 ops/s
Iteration   2: 76240992.288 ops/s
Iteration   3: 75962038.187 ops/s
Iteration   4: 76051109.740 ops/s
Iteration   5: 75577308.560 ops/s
Iteration   6: 75951585.009 ops/s
Iteration   7: 75672338.272 ops/s
Iteration   8: 76077913.628 ops/s
Iteration   9: 75890391.616 ops/s
Iteration  10: 75999472.222 ops/s
Iteration  11: 75674463.274 ops/s
Iteration  12: 76124821.655 ops/s
Iteration  13: 75895390.637 ops/s
Iteration  14: 75845372.586 ops/s
Iteration  15: 75933352.208 ops/s
Iteration  16: 75851930.157 ops/s
Iteration  17: 75796130.189 ops/s
Iteration  18: 75593302.697 ops/s
Iteration  19: 75682403.528 ops/s
Iteration  20: 75462234.557 ops/s
Iteration  21: 75781892.248 ops/s
Iteration  22: 75842329.268 ops/s
Iteration  23: 76074436.092 ops/s
Iteration  24: 76002133.371 ops/s
Iteration  25: 75870277.200 ops/s
Iteration  26: 75345904.097 ops/s
Iteration  27: 76119009.426 ops/s
Iteration  28: 75217693.361 ops/s
Iteration  29: 75772410.135 ops/s
Iteration  30: 75514525.898 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_corresponds":
  75815250.107 ±(99.9%) 161495.578 ops/s [Average]
  (min, avg, max) = (75217693.361, 75815250.107, 76240992.288), stdev = 241718.996
  CI (99.9%): [75653754.530, 75976745.685] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_corresponds  thrpt   30  75815250.107 ± 161495.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151313758.568 ops/s
# Warmup Iteration   2: 300418168.563 ops/s
# Warmup Iteration   3: 265643288.608 ops/s
# Warmup Iteration   4: 309590869.710 ops/s
# Warmup Iteration   5: 308295081.600 ops/s
# Warmup Iteration   6: 310124299.155 ops/s
# Warmup Iteration   7: 308848808.934 ops/s
# Warmup Iteration   8: 308096512.248 ops/s
# Warmup Iteration   9: 308674025.185 ops/s
# Warmup Iteration  10: 308610329.680 ops/s
# Warmup Iteration  11: 309052643.408 ops/s
# Warmup Iteration  12: 308244257.300 ops/s
# Warmup Iteration  13: 308093072.131 ops/s
# Warmup Iteration  14: 310475000.483 ops/s
# Warmup Iteration  15: 308430278.022 ops/s
# Warmup Iteration  16: 308761103.950 ops/s
# Warmup Iteration  17: 309680440.055 ops/s
# Warmup Iteration  18: 307946599.813 ops/s
# Warmup Iteration  19: 309069842.418 ops/s
# Warmup Iteration  20: 309138851.985 ops/s
# Warmup Iteration  21: 308068677.339 ops/s
# Warmup Iteration  22: 310843307.516 ops/s
# Warmup Iteration  23: 308964024.127 ops/s
# Warmup Iteration  24: 309408719.555 ops/s
# Warmup Iteration  25: 307575912.575 ops/s
# Warmup Iteration  26: 310285326.679 ops/s
# Warmup Iteration  27: 309688524.835 ops/s
# Warmup Iteration  28: 308331646.456 ops/s
# Warmup Iteration  29: 308997618.102 ops/s
# Warmup Iteration  30: 310022618.173 ops/s
Iteration   1: 308571442.111 ops/s
Iteration   2: 308832432.061 ops/s
Iteration   3: 310472918.443 ops/s
Iteration   4: 309515017.850 ops/s
Iteration   5: 309879030.328 ops/s
Iteration   6: 309647720.556 ops/s
Iteration   7: 309283802.403 ops/s
Iteration   8: 308168705.007 ops/s
Iteration   9: 308881200.355 ops/s
Iteration  10: 310002281.705 ops/s
Iteration  11: 309257695.335 ops/s
Iteration  12: 307273059.818 ops/s
Iteration  13: 309075842.972 ops/s
Iteration  14: 309544610.520 ops/s
Iteration  15: 310071944.458 ops/s
Iteration  16: 307752921.807 ops/s
Iteration  17: 307894467.061 ops/s
Iteration  18: 309804027.563 ops/s
Iteration  19: 307941486.894 ops/s
Iteration  20: 307985079.076 ops/s
Iteration  21: 309076761.726 ops/s
Iteration  22: 309141025.990 ops/s
Iteration  23: 308529494.531 ops/s
Iteration  24: 310201816.963 ops/s
Iteration  25: 307997608.399 ops/s
Iteration  26: 309243390.228 ops/s
Iteration  27: 309361431.483 ops/s
Iteration  28: 308606183.198 ops/s
Iteration  29: 308557049.773 ops/s
Iteration  30: 309607365.074 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_count":
  309005927.123 ±(99.9%) 545166.099 ops/s [Average]
  (min, avg, max) = (307273059.818, 309005927.123, 310472918.443), stdev = 815979.014
  CI (99.9%): [308460761.024, 309551093.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_count  thrpt   30  309005927.123 ± 545166.099  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10657908.855 ops/s
# Warmup Iteration   2: 20649632.122 ops/s
# Warmup Iteration   3: 23967666.339 ops/s
# Warmup Iteration   4: 24206053.139 ops/s
# Warmup Iteration   5: 24320395.308 ops/s
# Warmup Iteration   6: 24232628.870 ops/s
# Warmup Iteration   7: 24291779.620 ops/s
# Warmup Iteration   8: 24273060.044 ops/s
# Warmup Iteration   9: 24274173.250 ops/s
# Warmup Iteration  10: 24212336.837 ops/s
# Warmup Iteration  11: 24288112.700 ops/s
# Warmup Iteration  12: 24338522.676 ops/s
# Warmup Iteration  13: 24257427.113 ops/s
# Warmup Iteration  14: 24271751.354 ops/s
# Warmup Iteration  15: 24257170.798 ops/s
# Warmup Iteration  16: 24224915.198 ops/s
# Warmup Iteration  17: 24247972.835 ops/s
# Warmup Iteration  18: 24185219.924 ops/s
# Warmup Iteration  19: 24244095.590 ops/s
# Warmup Iteration  20: 24249235.858 ops/s
# Warmup Iteration  21: 24113983.619 ops/s
# Warmup Iteration  22: 24222321.090 ops/s
# Warmup Iteration  23: 24129433.855 ops/s
# Warmup Iteration  24: 24235505.075 ops/s
# Warmup Iteration  25: 24197752.748 ops/s
# Warmup Iteration  26: 24343458.851 ops/s
# Warmup Iteration  27: 24229187.814 ops/s
# Warmup Iteration  28: 24307335.779 ops/s
# Warmup Iteration  29: 24197633.063 ops/s
# Warmup Iteration  30: 24136134.503 ops/s
Iteration   1: 24165494.052 ops/s
Iteration   2: 24302215.753 ops/s
Iteration   3: 24322864.921 ops/s
Iteration   4: 24035513.471 ops/s
Iteration   5: 24260307.934 ops/s
Iteration   6: 24377946.009 ops/s
Iteration   7: 24275423.337 ops/s
Iteration   8: 24173584.832 ops/s
Iteration   9: 24031516.443 ops/s
Iteration  10: 24240967.784 ops/s
Iteration  11: 24260411.388 ops/s
Iteration  12: 24294146.944 ops/s
Iteration  13: 24311787.958 ops/s
Iteration  14: 24326618.429 ops/s
Iteration  15: 24246591.049 ops/s
Iteration  16: 24337112.689 ops/s
Iteration  17: 24234173.167 ops/s
Iteration  18: 24311672.548 ops/s
Iteration  19: 24234704.054 ops/s
Iteration  20: 24300816.315 ops/s
Iteration  21: 24304783.235 ops/s
Iteration  22: 24227348.436 ops/s
Iteration  23: 24351667.657 ops/s
Iteration  24: 24102877.308 ops/s
Iteration  25: 24176778.017 ops/s
Iteration  26: 24119846.313 ops/s
Iteration  27: 24309741.022 ops/s
Iteration  28: 24012769.226 ops/s
Iteration  29: 24307916.657 ops/s
Iteration  30: 24332301.724 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countBy":
  24242996.622 ±(99.9%) 66172.056 ops/s [Average]
  (min, avg, max) = (24012769.226, 24242996.622, 24377946.009), stdev = 99043.225
  CI (99.9%): [24176824.567, 24309168.678] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_countBy  thrpt   30  24242996.622 ± 66172.056  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 142363632.645 ops/s
# Warmup Iteration   2: 301460981.668 ops/s
# Warmup Iteration   3: 265951060.203 ops/s
# Warmup Iteration   4: 309780122.786 ops/s
# Warmup Iteration   5: 309449205.860 ops/s
# Warmup Iteration   6: 309220453.238 ops/s
# Warmup Iteration   7: 308967519.362 ops/s
# Warmup Iteration   8: 308017151.784 ops/s
# Warmup Iteration   9: 308393934.810 ops/s
# Warmup Iteration  10: 308828573.644 ops/s
# Warmup Iteration  11: 309887595.721 ops/s
# Warmup Iteration  12: 309456996.733 ops/s
# Warmup Iteration  13: 310622587.884 ops/s
# Warmup Iteration  14: 310390019.350 ops/s
# Warmup Iteration  15: 310147734.145 ops/s
# Warmup Iteration  16: 308059840.656 ops/s
# Warmup Iteration  17: 310412840.538 ops/s
# Warmup Iteration  18: 308509631.823 ops/s
# Warmup Iteration  19: 309578648.945 ops/s
# Warmup Iteration  20: 309251068.032 ops/s
# Warmup Iteration  21: 309039086.731 ops/s
# Warmup Iteration  22: 310773511.565 ops/s
# Warmup Iteration  23: 308833358.771 ops/s
# Warmup Iteration  24: 309411490.230 ops/s
# Warmup Iteration  25: 308028105.150 ops/s
# Warmup Iteration  26: 308458396.187 ops/s
# Warmup Iteration  27: 310210074.528 ops/s
# Warmup Iteration  28: 310385032.229 ops/s
# Warmup Iteration  29: 309591527.976 ops/s
# Warmup Iteration  30: 309421338.718 ops/s
Iteration   1: 310862997.598 ops/s
Iteration   2: 310746801.024 ops/s
Iteration   3: 308024076.762 ops/s
Iteration   4: 309774987.500 ops/s
Iteration   5: 310063845.741 ops/s
Iteration   6: 310179547.249 ops/s
Iteration   7: 308788866.264 ops/s
Iteration   8: 310181371.478 ops/s
Iteration   9: 309384316.920 ops/s
Iteration  10: 308981055.814 ops/s
Iteration  11: 309791274.219 ops/s
Iteration  12: 309421967.283 ops/s
Iteration  13: 309603941.684 ops/s
Iteration  14: 311413875.313 ops/s
Iteration  15: 310071080.780 ops/s
Iteration  16: 308825357.904 ops/s
Iteration  17: 308509391.080 ops/s
Iteration  18: 307648316.068 ops/s
Iteration  19: 307123721.751 ops/s
Iteration  20: 308830727.982 ops/s
Iteration  21: 307374924.818 ops/s
Iteration  22: 307996603.758 ops/s
Iteration  23: 307152282.006 ops/s
Iteration  24: 309753002.538 ops/s
Iteration  25: 307693996.966 ops/s
Iteration  26: 308741755.714 ops/s
Iteration  27: 309387748.598 ops/s
Iteration  28: 308450194.195 ops/s
Iteration  29: 308390843.548 ops/s
Iteration  30: 307861467.307 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach":
  309034344.662 ±(99.9%) 759361.462 ops/s [Average]
  (min, avg, max) = (307123721.751, 309034344.662, 311413875.313), stdev = 1136576.574
  CI (99.9%): [308274983.200, 309793706.124] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_countByEach  thrpt   30  309034344.662 ± 759361.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23738441.035 ops/s
# Warmup Iteration   2: 43119967.440 ops/s
# Warmup Iteration   3: 49032884.793 ops/s
# Warmup Iteration   4: 49063397.006 ops/s
# Warmup Iteration   5: 48871101.166 ops/s
# Warmup Iteration   6: 48594224.431 ops/s
# Warmup Iteration   7: 48786259.962 ops/s
# Warmup Iteration   8: 49003823.812 ops/s
# Warmup Iteration   9: 49113436.889 ops/s
# Warmup Iteration  10: 48864441.707 ops/s
# Warmup Iteration  11: 49001675.574 ops/s
# Warmup Iteration  12: 48852486.927 ops/s
# Warmup Iteration  13: 49101493.404 ops/s
# Warmup Iteration  14: 48965871.499 ops/s
# Warmup Iteration  15: 49183447.909 ops/s
# Warmup Iteration  16: 48782143.532 ops/s
# Warmup Iteration  17: 49002195.755 ops/s
# Warmup Iteration  18: 49115652.158 ops/s
# Warmup Iteration  19: 48979331.373 ops/s
# Warmup Iteration  20: 49309064.046 ops/s
# Warmup Iteration  21: 48983295.143 ops/s
# Warmup Iteration  22: 48957102.864 ops/s
# Warmup Iteration  23: 48837504.076 ops/s
# Warmup Iteration  24: 49141784.093 ops/s
# Warmup Iteration  25: 48651854.276 ops/s
# Warmup Iteration  26: 49176729.898 ops/s
# Warmup Iteration  27: 48956977.353 ops/s
# Warmup Iteration  28: 48851225.250 ops/s
# Warmup Iteration  29: 48946906.513 ops/s
# Warmup Iteration  30: 48981955.394 ops/s
Iteration   1: 49244608.548 ops/s
Iteration   2: 49058397.576 ops/s
Iteration   3: 48767853.517 ops/s
Iteration   4: 48876038.675 ops/s
Iteration   5: 48910419.299 ops/s
Iteration   6: 48988993.748 ops/s
Iteration   7: 49212655.791 ops/s
Iteration   8: 48793004.031 ops/s
Iteration   9: 49169945.345 ops/s
Iteration  10: 48994021.429 ops/s
Iteration  11: 48953226.649 ops/s
Iteration  12: 49115336.469 ops/s
Iteration  13: 48884767.110 ops/s
Iteration  14: 49187460.544 ops/s
Iteration  15: 49190412.605 ops/s
Iteration  16: 48707894.369 ops/s
Iteration  17: 48819520.278 ops/s
Iteration  18: 48842575.255 ops/s
Iteration  19: 49122444.449 ops/s
Iteration  20: 48993863.898 ops/s
Iteration  21: 49171256.555 ops/s
Iteration  22: 48798782.946 ops/s
Iteration  23: 49322766.540 ops/s
Iteration  24: 48993364.547 ops/s
Iteration  25: 48791402.750 ops/s
Iteration  26: 49245407.062 ops/s
Iteration  27: 48704451.911 ops/s
Iteration  28: 48883699.518 ops/s
Iteration  29: 49009701.209 ops/s
Iteration  30: 48943863.426 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByEach_target":
  48989937.868 ±(99.9%) 117330.298 ops/s [Average]
  (min, avg, max) = (48704451.911, 48989937.868, 49322766.540), stdev = 175614.480
  CI (99.9%): [48872607.570, 49107268.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_countByEach_target  thrpt   30  48989937.868 ± 117330.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10692969.403 ops/s
# Warmup Iteration   2: 20645698.650 ops/s
# Warmup Iteration   3: 24116575.754 ops/s
# Warmup Iteration   4: 24241659.758 ops/s
# Warmup Iteration   5: 24042112.463 ops/s
# Warmup Iteration   6: 24307974.157 ops/s
# Warmup Iteration   7: 24293929.983 ops/s
# Warmup Iteration   8: 24146601.384 ops/s
# Warmup Iteration   9: 24214790.056 ops/s
# Warmup Iteration  10: 24307043.969 ops/s
# Warmup Iteration  11: 24327495.502 ops/s
# Warmup Iteration  12: 24339153.263 ops/s
# Warmup Iteration  13: 24304727.174 ops/s
# Warmup Iteration  14: 24214448.304 ops/s
# Warmup Iteration  15: 24319775.670 ops/s
# Warmup Iteration  16: 24155778.119 ops/s
# Warmup Iteration  17: 24202089.548 ops/s
# Warmup Iteration  18: 24372955.278 ops/s
# Warmup Iteration  19: 24264120.267 ops/s
# Warmup Iteration  20: 24253470.999 ops/s
# Warmup Iteration  21: 24274620.360 ops/s
# Warmup Iteration  22: 24247573.474 ops/s
# Warmup Iteration  23: 24219856.177 ops/s
# Warmup Iteration  24: 24270944.988 ops/s
# Warmup Iteration  25: 24126490.388 ops/s
# Warmup Iteration  26: 24232324.571 ops/s
# Warmup Iteration  27: 24257373.579 ops/s
# Warmup Iteration  28: 24155860.336 ops/s
# Warmup Iteration  29: 24189792.597 ops/s
# Warmup Iteration  30: 24409005.814 ops/s
Iteration   1: 24363933.949 ops/s
Iteration   2: 24369324.493 ops/s
Iteration   3: 24139034.623 ops/s
Iteration   4: 24154915.191 ops/s
Iteration   5: 24261683.320 ops/s
Iteration   6: 24293663.747 ops/s
Iteration   7: 24210168.226 ops/s
Iteration   8: 24281245.299 ops/s
Iteration   9: 24216312.525 ops/s
Iteration  10: 24319603.697 ops/s
Iteration  11: 24414417.070 ops/s
Iteration  12: 24291769.156 ops/s
Iteration  13: 24145281.561 ops/s
Iteration  14: 24254301.710 ops/s
Iteration  15: 24403284.117 ops/s
Iteration  16: 24191818.725 ops/s
Iteration  17: 24173069.994 ops/s
Iteration  18: 24238992.690 ops/s
Iteration  19: 24318048.310 ops/s
Iteration  20: 24300333.114 ops/s
Iteration  21: 24375013.255 ops/s
Iteration  22: 24336986.110 ops/s
Iteration  23: 24260887.557 ops/s
Iteration  24: 24151508.667 ops/s
Iteration  25: 24342247.903 ops/s
Iteration  26: 24347150.874 ops/s
Iteration  27: 24209388.193 ops/s
Iteration  28: 24158682.344 ops/s
Iteration  29: 24228422.341 ops/s
Iteration  30: 24102498.421 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countByWith":
  24261799.573 ±(99.9%) 57926.907 ops/s [Average]
  (min, avg, max) = (24102498.421, 24261799.573, 24414417.070), stdev = 86702.274
  CI (99.9%): [24203872.666, 24319726.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_countByWith  thrpt   30  24261799.573 ± 57926.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 153866550.577 ops/s
# Warmup Iteration   2: 302222086.844 ops/s
# Warmup Iteration   3: 267888097.422 ops/s
# Warmup Iteration   4: 311661585.586 ops/s
# Warmup Iteration   5: 310936725.198 ops/s
# Warmup Iteration   6: 311478453.373 ops/s
# Warmup Iteration   7: 312387129.154 ops/s
# Warmup Iteration   8: 312696788.902 ops/s
# Warmup Iteration   9: 309517644.793 ops/s
# Warmup Iteration  10: 309720024.377 ops/s
# Warmup Iteration  11: 312523192.431 ops/s
# Warmup Iteration  12: 312444862.005 ops/s
# Warmup Iteration  13: 311549524.467 ops/s
# Warmup Iteration  14: 312050087.863 ops/s
# Warmup Iteration  15: 310505618.469 ops/s
# Warmup Iteration  16: 311913975.142 ops/s
# Warmup Iteration  17: 311321910.386 ops/s
# Warmup Iteration  18: 312378884.797 ops/s
# Warmup Iteration  19: 311977515.365 ops/s
# Warmup Iteration  20: 312087347.684 ops/s
# Warmup Iteration  21: 310864854.217 ops/s
# Warmup Iteration  22: 310629898.763 ops/s
# Warmup Iteration  23: 310133670.501 ops/s
# Warmup Iteration  24: 312278468.499 ops/s
# Warmup Iteration  25: 312342387.213 ops/s
# Warmup Iteration  26: 313812941.950 ops/s
# Warmup Iteration  27: 310525902.505 ops/s
# Warmup Iteration  28: 311810498.313 ops/s
# Warmup Iteration  29: 312594672.010 ops/s
# Warmup Iteration  30: 313338463.942 ops/s
Iteration   1: 310366656.300 ops/s
Iteration   2: 308341131.768 ops/s
Iteration   3: 310998918.254 ops/s
Iteration   4: 312098185.134 ops/s
Iteration   5: 311568487.342 ops/s
Iteration   6: 313161954.941 ops/s
Iteration   7: 311884710.098 ops/s
Iteration   8: 311683115.023 ops/s
Iteration   9: 311694692.740 ops/s
Iteration  10: 311035196.474 ops/s
Iteration  11: 312506661.545 ops/s
Iteration  12: 310494779.714 ops/s
Iteration  13: 310807906.642 ops/s
Iteration  14: 311953091.692 ops/s
Iteration  15: 310624449.061 ops/s
Iteration  16: 311998832.809 ops/s
Iteration  17: 310040696.028 ops/s
Iteration  18: 310958578.272 ops/s
Iteration  19: 311569298.314 ops/s
Iteration  20: 312150691.565 ops/s
Iteration  21: 309446639.170 ops/s
Iteration  22: 313197163.194 ops/s
Iteration  23: 310794474.763 ops/s
Iteration  24: 311080699.991 ops/s
Iteration  25: 312307267.761 ops/s
Iteration  26: 312554964.966 ops/s
Iteration  27: 311484109.551 ops/s
Iteration  28: 310102095.965 ops/s
Iteration  29: 312072909.987 ops/s
Iteration  30: 312617538.108 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_countWith":
  311386529.906 ±(99.9%) 726907.584 ops/s [Average]
  (min, avg, max) = (308341131.768, 311386529.906, 313197163.194), stdev = 1088001.134
  CI (99.9%): [310659622.322, 312113437.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_countWith  thrpt   30  311386529.906 ± 726907.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150315961.991 ops/s
# Warmup Iteration   2: 300168347.539 ops/s
# Warmup Iteration   3: 265413546.489 ops/s
# Warmup Iteration   4: 310096587.862 ops/s
# Warmup Iteration   5: 309778281.287 ops/s
# Warmup Iteration   6: 309496989.991 ops/s
# Warmup Iteration   7: 310049108.987 ops/s
# Warmup Iteration   8: 309356294.267 ops/s
# Warmup Iteration   9: 308804601.823 ops/s
# Warmup Iteration  10: 310917974.386 ops/s
# Warmup Iteration  11: 308146002.517 ops/s
# Warmup Iteration  12: 308894594.962 ops/s
# Warmup Iteration  13: 306704398.104 ops/s
# Warmup Iteration  14: 310669469.605 ops/s
# Warmup Iteration  15: 310840370.257 ops/s
# Warmup Iteration  16: 308385075.156 ops/s
# Warmup Iteration  17: 310368236.963 ops/s
# Warmup Iteration  18: 308480805.538 ops/s
# Warmup Iteration  19: 309356457.529 ops/s
# Warmup Iteration  20: 308445437.001 ops/s
# Warmup Iteration  21: 309948820.187 ops/s
# Warmup Iteration  22: 309568224.331 ops/s
# Warmup Iteration  23: 309726067.569 ops/s
# Warmup Iteration  24: 310136819.410 ops/s
# Warmup Iteration  25: 309506505.802 ops/s
# Warmup Iteration  26: 309021500.671 ops/s
# Warmup Iteration  27: 310068057.530 ops/s
# Warmup Iteration  28: 309546295.925 ops/s
# Warmup Iteration  29: 309401309.258 ops/s
# Warmup Iteration  30: 309937020.767 ops/s
Iteration   1: 310787266.192 ops/s
Iteration   2: 307738826.933 ops/s
Iteration   3: 310727052.640 ops/s
Iteration   4: 310385408.948 ops/s
Iteration   5: 309909900.676 ops/s
Iteration   6: 310492665.652 ops/s
Iteration   7: 309670322.804 ops/s
Iteration   8: 309528404.538 ops/s
Iteration   9: 307150910.588 ops/s
Iteration  10: 310418506.611 ops/s
Iteration  11: 306716591.253 ops/s
Iteration  12: 312155908.849 ops/s
Iteration  13: 308811774.703 ops/s
Iteration  14: 309802805.667 ops/s
Iteration  15: 310348313.355 ops/s
Iteration  16: 310162557.124 ops/s
Iteration  17: 309964006.185 ops/s
Iteration  18: 309442802.030 ops/s
Iteration  19: 307593817.855 ops/s
Iteration  20: 308397690.295 ops/s
Iteration  21: 310546803.435 ops/s
Iteration  22: 309563949.551 ops/s
Iteration  23: 309994128.320 ops/s
Iteration  24: 309513990.149 ops/s
Iteration  25: 309902387.311 ops/s
Iteration  26: 308790254.691 ops/s
Iteration  27: 308048678.989 ops/s
Iteration  28: 310073977.892 ops/s
Iteration  29: 309317272.391 ops/s
Iteration  30: 310267784.223 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detect":
  309540825.328 ±(99.9%) 796384.427 ops/s [Average]
  (min, avg, max) = (306716591.253, 309540825.328, 312155908.849), stdev = 1191990.810
  CI (99.9%): [308744440.901, 310337209.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detect  thrpt   30  309540825.328 ± 796384.427  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147538992.745 ops/s
# Warmup Iteration   2: 302454382.999 ops/s
# Warmup Iteration   3: 267995882.694 ops/s
# Warmup Iteration   4: 311771565.916 ops/s
# Warmup Iteration   5: 311717635.528 ops/s
# Warmup Iteration   6: 312794163.729 ops/s
# Warmup Iteration   7: 313535798.088 ops/s
# Warmup Iteration   8: 311142155.504 ops/s
# Warmup Iteration   9: 312664936.489 ops/s
# Warmup Iteration  10: 312597284.681 ops/s
# Warmup Iteration  11: 310824589.298 ops/s
# Warmup Iteration  12: 312923585.345 ops/s
# Warmup Iteration  13: 312313757.662 ops/s
# Warmup Iteration  14: 312113882.478 ops/s
# Warmup Iteration  15: 312043951.136 ops/s
# Warmup Iteration  16: 314682385.167 ops/s
# Warmup Iteration  17: 312753240.733 ops/s
# Warmup Iteration  18: 312841497.418 ops/s
# Warmup Iteration  19: 311693662.606 ops/s
# Warmup Iteration  20: 311442153.155 ops/s
# Warmup Iteration  21: 310677394.239 ops/s
# Warmup Iteration  22: 313946038.532 ops/s
# Warmup Iteration  23: 310880453.817 ops/s
# Warmup Iteration  24: 312835570.967 ops/s
# Warmup Iteration  25: 311688371.598 ops/s
# Warmup Iteration  26: 313547364.839 ops/s
# Warmup Iteration  27: 312448233.395 ops/s
# Warmup Iteration  28: 311726605.878 ops/s
# Warmup Iteration  29: 311764320.591 ops/s
# Warmup Iteration  30: 313670918.041 ops/s
Iteration   1: 311952623.187 ops/s
Iteration   2: 312708586.374 ops/s
Iteration   3: 311146128.072 ops/s
Iteration   4: 313116529.820 ops/s
Iteration   5: 312254240.502 ops/s
Iteration   6: 311961505.224 ops/s
Iteration   7: 312291678.618 ops/s
Iteration   8: 312544449.551 ops/s
Iteration   9: 313450688.274 ops/s
Iteration  10: 313350101.503 ops/s
Iteration  11: 313476961.115 ops/s
Iteration  12: 312729268.697 ops/s
Iteration  13: 311662856.532 ops/s
Iteration  14: 310193695.248 ops/s
Iteration  15: 312837176.231 ops/s
Iteration  16: 313949323.371 ops/s
Iteration  17: 312925060.087 ops/s
Iteration  18: 313835602.838 ops/s
Iteration  19: 312316470.418 ops/s
Iteration  20: 312730158.767 ops/s
Iteration  21: 310567693.338 ops/s
Iteration  22: 311269194.234 ops/s
Iteration  23: 313482060.265 ops/s
Iteration  24: 312242719.471 ops/s
Iteration  25: 311450162.396 ops/s
Iteration  26: 312682215.852 ops/s
Iteration  27: 309102974.292 ops/s
Iteration  28: 311617218.789 ops/s
Iteration  29: 312459879.580 ops/s
Iteration  30: 311681713.655 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIfNone":
  312266297.877 ±(99.9%) 730166.804 ops/s [Average]
  (min, avg, max) = (309102974.292, 312266297.877, 313949323.371), stdev = 1092879.381
  CI (99.9%): [311536131.073, 312996464.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detectIfNone  thrpt   30  312266297.877 ± 730166.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149313649.703 ops/s
# Warmup Iteration   2: 303036168.756 ops/s
# Warmup Iteration   3: 268120878.706 ops/s
# Warmup Iteration   4: 311615430.500 ops/s
# Warmup Iteration   5: 311304501.487 ops/s
# Warmup Iteration   6: 313034814.966 ops/s
# Warmup Iteration   7: 313196230.637 ops/s
# Warmup Iteration   8: 311712439.195 ops/s
# Warmup Iteration   9: 312659480.113 ops/s
# Warmup Iteration  10: 312114467.785 ops/s
# Warmup Iteration  11: 312872400.225 ops/s
# Warmup Iteration  12: 312861782.280 ops/s
# Warmup Iteration  13: 312640439.310 ops/s
# Warmup Iteration  14: 311534702.452 ops/s
# Warmup Iteration  15: 312154900.933 ops/s
# Warmup Iteration  16: 310453904.922 ops/s
# Warmup Iteration  17: 312740191.528 ops/s
# Warmup Iteration  18: 311872002.949 ops/s
# Warmup Iteration  19: 312079472.848 ops/s
# Warmup Iteration  20: 313974101.608 ops/s
# Warmup Iteration  21: 311560730.047 ops/s
# Warmup Iteration  22: 312564574.295 ops/s
# Warmup Iteration  23: 311187214.859 ops/s
# Warmup Iteration  24: 312436354.597 ops/s
# Warmup Iteration  25: 312163796.176 ops/s
# Warmup Iteration  26: 313098285.221 ops/s
# Warmup Iteration  27: 313360161.856 ops/s
# Warmup Iteration  28: 313426245.473 ops/s
# Warmup Iteration  29: 314123468.769 ops/s
# Warmup Iteration  30: 312097971.821 ops/s
Iteration   1: 312917751.059 ops/s
Iteration   2: 312015311.753 ops/s
Iteration   3: 312340497.997 ops/s
Iteration   4: 312119600.944 ops/s
Iteration   5: 309041226.737 ops/s
Iteration   6: 311124451.019 ops/s
Iteration   7: 310251644.612 ops/s
Iteration   8: 311731854.848 ops/s
Iteration   9: 312893184.036 ops/s
Iteration  10: 313713964.502 ops/s
Iteration  11: 312773490.389 ops/s
Iteration  12: 312524065.277 ops/s
Iteration  13: 312325477.445 ops/s
Iteration  14: 313417394.064 ops/s
Iteration  15: 312539581.337 ops/s
Iteration  16: 310562302.605 ops/s
Iteration  17: 313253575.491 ops/s
Iteration  18: 312912580.559 ops/s
Iteration  19: 312185037.726 ops/s
Iteration  20: 310139934.943 ops/s
Iteration  21: 309949030.886 ops/s
Iteration  22: 311890054.989 ops/s
Iteration  23: 312763657.239 ops/s
Iteration  24: 312194222.587 ops/s
Iteration  25: 311399923.509 ops/s
Iteration  26: 312266192.123 ops/s
Iteration  27: 312389471.996 ops/s
Iteration  28: 313383432.850 ops/s
Iteration  29: 311922541.307 ops/s
Iteration  30: 312804071.908 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectIndex":
  312058184.225 ±(99.9%) 749431.851 ops/s [Average]
  (min, avg, max) = (309041226.737, 312058184.225, 313713964.502), stdev = 1121714.399
  CI (99.9%): [311308752.374, 312807616.075] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detectIndex  thrpt   30  312058184.225 ± 749431.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150213724.524 ops/s
# Warmup Iteration   2: 302695928.713 ops/s
# Warmup Iteration   3: 267480540.212 ops/s
# Warmup Iteration   4: 312624234.574 ops/s
# Warmup Iteration   5: 312272733.918 ops/s
# Warmup Iteration   6: 312403900.213 ops/s
# Warmup Iteration   7: 313046504.833 ops/s
# Warmup Iteration   8: 311393575.103 ops/s
# Warmup Iteration   9: 313289767.080 ops/s
# Warmup Iteration  10: 313148453.147 ops/s
# Warmup Iteration  11: 312031495.570 ops/s
# Warmup Iteration  12: 310763717.487 ops/s
# Warmup Iteration  13: 313134536.507 ops/s
# Warmup Iteration  14: 313482187.039 ops/s
# Warmup Iteration  15: 312771637.265 ops/s
# Warmup Iteration  16: 312911937.740 ops/s
# Warmup Iteration  17: 311493827.025 ops/s
# Warmup Iteration  18: 313077136.657 ops/s
# Warmup Iteration  19: 313498438.476 ops/s
# Warmup Iteration  20: 312728497.187 ops/s
# Warmup Iteration  21: 311122400.172 ops/s
# Warmup Iteration  22: 313073605.328 ops/s
# Warmup Iteration  23: 312615860.459 ops/s
# Warmup Iteration  24: 312118322.212 ops/s
# Warmup Iteration  25: 312415156.825 ops/s
# Warmup Iteration  26: 313754907.899 ops/s
# Warmup Iteration  27: 313006583.568 ops/s
# Warmup Iteration  28: 312262177.849 ops/s
# Warmup Iteration  29: 312125012.208 ops/s
# Warmup Iteration  30: 311834798.393 ops/s
Iteration   1: 311875825.530 ops/s
Iteration   2: 311093286.518 ops/s
Iteration   3: 312065981.714 ops/s
Iteration   4: 309850107.918 ops/s
Iteration   5: 312984513.624 ops/s
Iteration   6: 314916600.593 ops/s
Iteration   7: 312762567.933 ops/s
Iteration   8: 311563064.264 ops/s
Iteration   9: 313389982.175 ops/s
Iteration  10: 312831853.167 ops/s
Iteration  11: 313758925.249 ops/s
Iteration  12: 311866626.418 ops/s
Iteration  13: 312654474.367 ops/s
Iteration  14: 310730164.531 ops/s
Iteration  15: 312563591.627 ops/s
Iteration  16: 312004768.559 ops/s
Iteration  17: 308430387.132 ops/s
Iteration  18: 310520168.979 ops/s
Iteration  19: 310635301.432 ops/s
Iteration  20: 310808447.486 ops/s
Iteration  21: 313810007.944 ops/s
Iteration  22: 313132141.036 ops/s
Iteration  23: 310991783.666 ops/s
Iteration  24: 311143191.854 ops/s
Iteration  25: 312083553.965 ops/s
Iteration  26: 311003423.370 ops/s
Iteration  27: 311632840.233 ops/s
Iteration  28: 312337526.371 ops/s
Iteration  29: 312711683.706 ops/s
Iteration  30: 312223149.326 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectLastIndex":
  311945864.690 ±(99.9%) 877681.077 ops/s [Average]
  (min, avg, max) = (308430387.132, 311945864.690, 314916600.593), stdev = 1313671.817
  CI (99.9%): [311068183.613, 312823545.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detectLastIndex  thrpt   30  311945864.690 ± 877681.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147789267.574 ops/s
# Warmup Iteration   2: 300162373.661 ops/s
# Warmup Iteration   3: 264728729.800 ops/s
# Warmup Iteration   4: 308594011.285 ops/s
# Warmup Iteration   5: 306816977.266 ops/s
# Warmup Iteration   6: 307665518.984 ops/s
# Warmup Iteration   7: 308793358.486 ops/s
# Warmup Iteration   8: 306705026.213 ops/s
# Warmup Iteration   9: 308477539.100 ops/s
# Warmup Iteration  10: 308742650.992 ops/s
# Warmup Iteration  11: 309978921.640 ops/s
# Warmup Iteration  12: 309957057.667 ops/s
# Warmup Iteration  13: 308365973.858 ops/s
# Warmup Iteration  14: 309120244.342 ops/s
# Warmup Iteration  15: 310516788.111 ops/s
# Warmup Iteration  16: 307390300.792 ops/s
# Warmup Iteration  17: 310128227.074 ops/s
# Warmup Iteration  18: 306085199.405 ops/s
# Warmup Iteration  19: 307352361.866 ops/s
# Warmup Iteration  20: 309237553.467 ops/s
# Warmup Iteration  21: 308534185.889 ops/s
# Warmup Iteration  22: 309910714.255 ops/s
# Warmup Iteration  23: 308964778.620 ops/s
# Warmup Iteration  24: 310613369.978 ops/s
# Warmup Iteration  25: 309941338.464 ops/s
# Warmup Iteration  26: 309742064.033 ops/s
# Warmup Iteration  27: 308982143.863 ops/s
# Warmup Iteration  28: 309562073.307 ops/s
# Warmup Iteration  29: 309036413.740 ops/s
# Warmup Iteration  30: 308822725.129 ops/s
Iteration   1: 308522597.255 ops/s
Iteration   2: 308149633.675 ops/s
Iteration   3: 308291708.543 ops/s
Iteration   4: 308764337.850 ops/s
Iteration   5: 308647393.869 ops/s
Iteration   6: 309640438.477 ops/s
Iteration   7: 309964705.101 ops/s
Iteration   8: 308753536.758 ops/s
Iteration   9: 308969255.860 ops/s
Iteration  10: 308574321.756 ops/s
Iteration  11: 307340437.695 ops/s
Iteration  12: 309793658.934 ops/s
Iteration  13: 309112436.869 ops/s
Iteration  14: 306290461.206 ops/s
Iteration  15: 308800381.994 ops/s
Iteration  16: 308500018.819 ops/s
Iteration  17: 308317045.925 ops/s
Iteration  18: 307600621.731 ops/s
Iteration  19: 308270163.149 ops/s
Iteration  20: 309495005.485 ops/s
Iteration  21: 309239680.042 ops/s
Iteration  22: 307788796.209 ops/s
Iteration  23: 304789820.302 ops/s
Iteration  24: 309514204.853 ops/s
Iteration  25: 309190534.128 ops/s
Iteration  26: 308171925.534 ops/s
Iteration  27: 309460508.687 ops/s
Iteration  28: 309689091.477 ops/s
Iteration  29: 307968411.712 ops/s
Iteration  30: 307652457.473 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWith":
  308508786.379 ±(99.9%) 723542.080 ops/s [Average]
  (min, avg, max) = (304789820.302, 308508786.379, 309964705.101), stdev = 1082963.805
  CI (99.9%): [307785244.299, 309232328.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detectWith  thrpt   30  308508786.379 ± 723542.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149478607.712 ops/s
# Warmup Iteration   2: 302100691.049 ops/s
# Warmup Iteration   3: 268141978.622 ops/s
# Warmup Iteration   4: 312844793.226 ops/s
# Warmup Iteration   5: 312130983.786 ops/s
# Warmup Iteration   6: 312223720.495 ops/s
# Warmup Iteration   7: 312929406.930 ops/s
# Warmup Iteration   8: 312924272.204 ops/s
# Warmup Iteration   9: 312242252.810 ops/s
# Warmup Iteration  10: 311360953.688 ops/s
# Warmup Iteration  11: 312043231.125 ops/s
# Warmup Iteration  12: 311979495.435 ops/s
# Warmup Iteration  13: 311760754.456 ops/s
# Warmup Iteration  14: 310610870.156 ops/s
# Warmup Iteration  15: 310936850.162 ops/s
# Warmup Iteration  16: 311788462.555 ops/s
# Warmup Iteration  17: 310796004.459 ops/s
# Warmup Iteration  18: 312111399.756 ops/s
# Warmup Iteration  19: 312500319.597 ops/s
# Warmup Iteration  20: 313048440.244 ops/s
# Warmup Iteration  21: 311139067.375 ops/s
# Warmup Iteration  22: 312055831.531 ops/s
# Warmup Iteration  23: 310625219.510 ops/s
# Warmup Iteration  24: 311651375.665 ops/s
# Warmup Iteration  25: 311487211.072 ops/s
# Warmup Iteration  26: 308046044.701 ops/s
# Warmup Iteration  27: 312146544.516 ops/s
# Warmup Iteration  28: 312436749.490 ops/s
# Warmup Iteration  29: 311639148.802 ops/s
# Warmup Iteration  30: 311228076.768 ops/s
Iteration   1: 313137613.862 ops/s
Iteration   2: 312765971.709 ops/s
Iteration   3: 313006622.877 ops/s
Iteration   4: 311709242.152 ops/s
Iteration   5: 312278630.744 ops/s
Iteration   6: 312544699.447 ops/s
Iteration   7: 312225329.792 ops/s
Iteration   8: 311871065.030 ops/s
Iteration   9: 311285618.392 ops/s
Iteration  10: 311843005.569 ops/s
Iteration  11: 313887083.320 ops/s
Iteration  12: 311730714.832 ops/s
Iteration  13: 311962778.650 ops/s
Iteration  14: 311451251.210 ops/s
Iteration  15: 314570958.685 ops/s
Iteration  16: 313305144.878 ops/s
Iteration  17: 312896780.117 ops/s
Iteration  18: 313544366.520 ops/s
Iteration  19: 311663824.911 ops/s
Iteration  20: 309223705.608 ops/s
Iteration  21: 312722175.417 ops/s
Iteration  22: 311221679.267 ops/s
Iteration  23: 311297859.740 ops/s
Iteration  24: 310583019.934 ops/s
Iteration  25: 309586196.150 ops/s
Iteration  26: 311954777.047 ops/s
Iteration  27: 312666416.553 ops/s
Iteration  28: 311900398.867 ops/s
Iteration  29: 312362191.740 ops/s
Iteration  30: 313628001.777 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_detectWithIfNone":
  312160904.160 ±(99.9%) 776082.899 ops/s [Average]
  (min, avg, max) = (309223705.608, 312160904.160, 314570958.685), stdev = 1161604.436
  CI (99.9%): [311384821.261, 312936987.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  312160904.160 ± 776082.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21559068.517 ops/s
# Warmup Iteration   2: 38041026.034 ops/s
# Warmup Iteration   3: 43504786.714 ops/s
# Warmup Iteration   4: 44155259.855 ops/s
# Warmup Iteration   5: 43694864.663 ops/s
# Warmup Iteration   6: 43915734.325 ops/s
# Warmup Iteration   7: 44339567.525 ops/s
# Warmup Iteration   8: 43998226.548 ops/s
# Warmup Iteration   9: 43680167.105 ops/s
# Warmup Iteration  10: 43945820.059 ops/s
# Warmup Iteration  11: 43993063.675 ops/s
# Warmup Iteration  12: 44059315.304 ops/s
# Warmup Iteration  13: 43565245.891 ops/s
# Warmup Iteration  14: 43776972.330 ops/s
# Warmup Iteration  15: 43712221.728 ops/s
# Warmup Iteration  16: 43795792.127 ops/s
# Warmup Iteration  17: 43510942.796 ops/s
# Warmup Iteration  18: 44009438.572 ops/s
# Warmup Iteration  19: 43775777.494 ops/s
# Warmup Iteration  20: 44245351.781 ops/s
# Warmup Iteration  21: 43920787.495 ops/s
# Warmup Iteration  22: 44030803.355 ops/s
# Warmup Iteration  23: 44379762.392 ops/s
# Warmup Iteration  24: 43894198.430 ops/s
# Warmup Iteration  25: 44288341.146 ops/s
# Warmup Iteration  26: 44165487.080 ops/s
# Warmup Iteration  27: 43733854.764 ops/s
# Warmup Iteration  28: 43754537.228 ops/s
# Warmup Iteration  29: 43901124.291 ops/s
# Warmup Iteration  30: 44383215.256 ops/s
Iteration   1: 44400213.314 ops/s
Iteration   2: 43855691.005 ops/s
Iteration   3: 43819013.877 ops/s
Iteration   4: 44429550.496 ops/s
Iteration   5: 43848912.759 ops/s
Iteration   6: 43786923.714 ops/s
Iteration   7: 44699604.650 ops/s
Iteration   8: 44414207.465 ops/s
Iteration   9: 44521705.855 ops/s
Iteration  10: 43983046.378 ops/s
Iteration  11: 43959810.973 ops/s
Iteration  12: 44341447.254 ops/s
Iteration  13: 43871205.429 ops/s
Iteration  14: 44130544.669 ops/s
Iteration  15: 44205933.071 ops/s
Iteration  16: 43895721.874 ops/s
Iteration  17: 43868273.935 ops/s
Iteration  18: 44114464.856 ops/s
Iteration  19: 43940059.737 ops/s
Iteration  20: 43925418.114 ops/s
Iteration  21: 44036334.359 ops/s
Iteration  22: 44041921.846 ops/s
Iteration  23: 43852727.676 ops/s
Iteration  24: 43937121.468 ops/s
Iteration  25: 44203369.412 ops/s
Iteration  26: 43711531.386 ops/s
Iteration  27: 43883247.111 ops/s
Iteration  28: 44564508.347 ops/s
Iteration  29: 44398345.974 ops/s
Iteration  30: 44284607.213 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinct":
  44097515.474 ±(99.9%) 179131.499 ops/s [Average]
  (min, avg, max) = (43711531.386, 44097515.474, 44699604.650), stdev = 268115.615
  CI (99.9%): [43918383.975, 44276646.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_distinct  thrpt   30  44097515.474 ± 179131.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13595064.604 ops/s
# Warmup Iteration   2: 31009382.738 ops/s
# Warmup Iteration   3: 28181561.985 ops/s
# Warmup Iteration   4: 32541598.897 ops/s
# Warmup Iteration   5: 32519074.155 ops/s
# Warmup Iteration   6: 32448104.122 ops/s
# Warmup Iteration   7: 32355482.420 ops/s
# Warmup Iteration   8: 32474353.135 ops/s
# Warmup Iteration   9: 32514296.339 ops/s
# Warmup Iteration  10: 32550919.178 ops/s
# Warmup Iteration  11: 32425529.559 ops/s
# Warmup Iteration  12: 32598776.718 ops/s
# Warmup Iteration  13: 32593277.076 ops/s
# Warmup Iteration  14: 32637358.655 ops/s
# Warmup Iteration  15: 32449259.232 ops/s
# Warmup Iteration  16: 32468973.461 ops/s
# Warmup Iteration  17: 32499262.836 ops/s
# Warmup Iteration  18: 32524628.735 ops/s
# Warmup Iteration  19: 32522458.985 ops/s
# Warmup Iteration  20: 32520676.977 ops/s
# Warmup Iteration  21: 32387607.294 ops/s
# Warmup Iteration  22: 32453684.586 ops/s
# Warmup Iteration  23: 32533471.632 ops/s
# Warmup Iteration  24: 32527303.611 ops/s
# Warmup Iteration  25: 32568002.922 ops/s
# Warmup Iteration  26: 32528889.771 ops/s
# Warmup Iteration  27: 32366351.838 ops/s
# Warmup Iteration  28: 32484743.499 ops/s
# Warmup Iteration  29: 32414967.488 ops/s
# Warmup Iteration  30: 32470156.420 ops/s
Iteration   1: 32320319.182 ops/s
Iteration   2: 32278537.056 ops/s
Iteration   3: 32498392.387 ops/s
Iteration   4: 32503733.854 ops/s
Iteration   5: 32301068.684 ops/s
Iteration   6: 32325853.987 ops/s
Iteration   7: 32415260.949 ops/s
Iteration   8: 32567199.348 ops/s
Iteration   9: 32593996.154 ops/s
Iteration  10: 32437154.424 ops/s
Iteration  11: 32605075.780 ops/s
Iteration  12: 32464562.918 ops/s
Iteration  13: 32520956.814 ops/s
Iteration  14: 32458666.723 ops/s
Iteration  15: 32533218.055 ops/s
Iteration  16: 32552084.529 ops/s
Iteration  17: 32639059.803 ops/s
Iteration  18: 32421382.609 ops/s
Iteration  19: 32585311.971 ops/s
Iteration  20: 32388611.579 ops/s
Iteration  21: 32452513.658 ops/s
Iteration  22: 32559836.967 ops/s
Iteration  23: 32550915.304 ops/s
Iteration  24: 32541969.281 ops/s
Iteration  25: 32443258.384 ops/s
Iteration  26: 32400959.625 ops/s
Iteration  27: 32411591.109 ops/s
Iteration  28: 32501821.610 ops/s
Iteration  29: 32590286.500 ops/s
Iteration  30: 32442834.192 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctBy":
  32476881.115 ±(99.9%) 63940.801 ops/s [Average]
  (min, avg, max) = (32278537.056, 32476881.115, 32639059.803), stdev = 95703.588
  CI (99.9%): [32412940.313, 32540821.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_distinctBy  thrpt   30  32476881.115 ± 63940.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12329008.623 ops/s
# Warmup Iteration   2: 18965801.975 ops/s
# Warmup Iteration   3: 17196733.564 ops/s
# Warmup Iteration   4: 19027068.882 ops/s
# Warmup Iteration   5: 19572818.661 ops/s
# Warmup Iteration   6: 18988529.811 ops/s
# Warmup Iteration   7: 19161960.493 ops/s
# Warmup Iteration   8: 18934061.777 ops/s
# Warmup Iteration   9: 18895291.144 ops/s
# Warmup Iteration  10: 18978227.595 ops/s
# Warmup Iteration  11: 19040830.880 ops/s
# Warmup Iteration  12: 19003669.189 ops/s
# Warmup Iteration  13: 18761721.142 ops/s
# Warmup Iteration  14: 19460488.062 ops/s
# Warmup Iteration  15: 18720739.406 ops/s
# Warmup Iteration  16: 18906468.914 ops/s
# Warmup Iteration  17: 18572729.286 ops/s
# Warmup Iteration  18: 19343914.838 ops/s
# Warmup Iteration  19: 19099409.449 ops/s
# Warmup Iteration  20: 19308349.215 ops/s
# Warmup Iteration  21: 18989098.711 ops/s
# Warmup Iteration  22: 18778783.101 ops/s
# Warmup Iteration  23: 19079338.186 ops/s
# Warmup Iteration  24: 18720966.344 ops/s
# Warmup Iteration  25: 19036281.188 ops/s
# Warmup Iteration  26: 18892604.889 ops/s
# Warmup Iteration  27: 19421151.881 ops/s
# Warmup Iteration  28: 18867721.537 ops/s
# Warmup Iteration  29: 18953920.714 ops/s
# Warmup Iteration  30: 19010857.585 ops/s
Iteration   1: 19042935.924 ops/s
Iteration   2: 19025641.504 ops/s
Iteration   3: 18855580.144 ops/s
Iteration   4: 18972270.681 ops/s
Iteration   5: 19454410.307 ops/s
Iteration   6: 19139447.347 ops/s
Iteration   7: 19116608.227 ops/s
Iteration   8: 18927564.958 ops/s
Iteration   9: 18932219.357 ops/s
Iteration  10: 18840672.720 ops/s
Iteration  11: 18871360.541 ops/s
Iteration  12: 18901452.157 ops/s
Iteration  13: 19572619.763 ops/s
Iteration  14: 19297983.156 ops/s
Iteration  15: 18988384.082 ops/s
Iteration  16: 18941671.941 ops/s
Iteration  17: 19384126.192 ops/s
Iteration  18: 19407857.162 ops/s
Iteration  19: 18672341.209 ops/s
Iteration  20: 18713064.606 ops/s
Iteration  21: 18669900.569 ops/s
Iteration  22: 18673627.318 ops/s
Iteration  23: 18829396.080 ops/s
Iteration  24: 19010997.349 ops/s
Iteration  25: 18861931.836 ops/s
Iteration  26: 19057606.295 ops/s
Iteration  27: 18919720.554 ops/s
Iteration  28: 19122719.386 ops/s
Iteration  29: 18969802.703 ops/s
Iteration  30: 18811356.380 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_distinctWithHashingStrategy":
  18999509.015 ±(99.9%) 155653.960 ops/s [Average]
  (min, avg, max) = (18669900.569, 18999509.015, 19572619.763), stdev = 232975.537
  CI (99.9%): [18843855.055, 19155162.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  18999509.015 ± 155653.960  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10252518.303 ops/s
# Warmup Iteration   2: 20861746.500 ops/s
# Warmup Iteration   3: 21120502.165 ops/s
# Warmup Iteration   4: 21287550.140 ops/s
# Warmup Iteration   5: 17539573.373 ops/s
# Warmup Iteration   6: 20563405.051 ops/s
# Warmup Iteration   7: 20540513.646 ops/s
# Warmup Iteration   8: 20587254.250 ops/s
# Warmup Iteration   9: 20520239.251 ops/s
# Warmup Iteration  10: 20579531.001 ops/s
# Warmup Iteration  11: 20592167.686 ops/s
# Warmup Iteration  12: 20514055.417 ops/s
# Warmup Iteration  13: 20557461.013 ops/s
# Warmup Iteration  14: 20561250.340 ops/s
# Warmup Iteration  15: 20552062.358 ops/s
# Warmup Iteration  16: 20598998.646 ops/s
# Warmup Iteration  17: 21335973.672 ops/s
# Warmup Iteration  18: 21306883.250 ops/s
# Warmup Iteration  19: 21288042.487 ops/s
# Warmup Iteration  20: 21356555.732 ops/s
# Warmup Iteration  21: 21332738.518 ops/s
# Warmup Iteration  22: 21199221.850 ops/s
# Warmup Iteration  23: 21359347.970 ops/s
# Warmup Iteration  24: 21307087.216 ops/s
# Warmup Iteration  25: 21312688.894 ops/s
# Warmup Iteration  26: 21293736.344 ops/s
# Warmup Iteration  27: 21324543.542 ops/s
# Warmup Iteration  28: 21279063.452 ops/s
# Warmup Iteration  29: 21275752.797 ops/s
# Warmup Iteration  30: 21384701.838 ops/s
Iteration   1: 21319195.722 ops/s
Iteration   2: 21283905.735 ops/s
Iteration   3: 21349145.869 ops/s
Iteration   4: 21355319.041 ops/s
Iteration   5: 21270666.046 ops/s
Iteration   6: 21311360.058 ops/s
Iteration   7: 21389901.365 ops/s
Iteration   8: 21290896.478 ops/s
Iteration   9: 21329035.957 ops/s
Iteration  10: 21348920.175 ops/s
Iteration  11: 21355327.688 ops/s
Iteration  12: 21307530.811 ops/s
Iteration  13: 21316059.139 ops/s
Iteration  14: 21387088.311 ops/s
Iteration  15: 21275483.661 ops/s
Iteration  16: 21306949.526 ops/s
Iteration  17: 21382811.384 ops/s
Iteration  18: 21343994.258 ops/s
Iteration  19: 21306551.737 ops/s
Iteration  20: 21374368.635 ops/s
Iteration  21: 21414370.874 ops/s
Iteration  22: 21210503.353 ops/s
Iteration  23: 21270567.123 ops/s
Iteration  24: 21340389.541 ops/s
Iteration  25: 21268558.410 ops/s
Iteration  26: 21269099.581 ops/s
Iteration  27: 21327497.045 ops/s
Iteration  28: 21362003.088 ops/s
Iteration  29: 21331624.897 ops/s
Iteration  30: 21323708.085 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop":
  21324094.453 ±(99.9%) 30070.975 ops/s [Average]
  (min, avg, max) = (21210503.353, 21324094.453, 21414370.874), stdev = 45008.823
  CI (99.9%): [21294023.478, 21354165.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_drop  thrpt   30  21324094.453 ± 30070.975  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 38601797.989 ops/s
# Warmup Iteration   2: 80694286.529 ops/s
# Warmup Iteration   3: 69268217.212 ops/s
# Warmup Iteration   4: 80976342.285 ops/s
# Warmup Iteration   5: 80951861.643 ops/s
# Warmup Iteration   6: 81270203.478 ops/s
# Warmup Iteration   7: 80756110.838 ops/s
# Warmup Iteration   8: 81318711.513 ops/s
# Warmup Iteration   9: 81079163.140 ops/s
# Warmup Iteration  10: 80979520.972 ops/s
# Warmup Iteration  11: 81189602.216 ops/s
# Warmup Iteration  12: 81050581.561 ops/s
# Warmup Iteration  13: 81445305.553 ops/s
# Warmup Iteration  14: 81514516.445 ops/s
# Warmup Iteration  15: 81342605.967 ops/s
# Warmup Iteration  16: 81197076.883 ops/s
# Warmup Iteration  17: 80877920.351 ops/s
# Warmup Iteration  18: 81278504.328 ops/s
# Warmup Iteration  19: 80766421.613 ops/s
# Warmup Iteration  20: 81560731.362 ops/s
# Warmup Iteration  21: 81275948.699 ops/s
# Warmup Iteration  22: 81216289.340 ops/s
# Warmup Iteration  23: 81433140.450 ops/s
# Warmup Iteration  24: 81380806.957 ops/s
# Warmup Iteration  25: 81783507.514 ops/s
# Warmup Iteration  26: 81291768.034 ops/s
# Warmup Iteration  27: 81408059.351 ops/s
# Warmup Iteration  28: 81209852.954 ops/s
# Warmup Iteration  29: 81072523.216 ops/s
# Warmup Iteration  30: 81538412.979 ops/s
Iteration   1: 81681489.666 ops/s
Iteration   2: 81128378.328 ops/s
Iteration   3: 81021558.319 ops/s
Iteration   4: 81620745.342 ops/s
Iteration   5: 81219319.914 ops/s
Iteration   6: 81506673.685 ops/s
Iteration   7: 81876489.472 ops/s
Iteration   8: 81473963.953 ops/s
Iteration   9: 81802798.970 ops/s
Iteration  10: 81386249.857 ops/s
Iteration  11: 81320431.060 ops/s
Iteration  12: 81778731.222 ops/s
Iteration  13: 81465716.453 ops/s
Iteration  14: 81504476.220 ops/s
Iteration  15: 81919497.629 ops/s
Iteration  16: 81594297.306 ops/s
Iteration  17: 81344667.857 ops/s
Iteration  18: 81660671.959 ops/s
Iteration  19: 81561966.490 ops/s
Iteration  20: 81467761.882 ops/s
Iteration  21: 79819668.873 ops/s
Iteration  22: 81434207.073 ops/s
Iteration  23: 81900908.400 ops/s
Iteration  24: 81143772.840 ops/s
Iteration  25: 81231820.694 ops/s
Iteration  26: 81722389.291 ops/s
Iteration  27: 81090983.745 ops/s
Iteration  28: 81291763.092 ops/s
Iteration  29: 81630423.116 ops/s
Iteration  30: 81006386.821 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_dropWhile":
  81420273.651 ±(99.9%) 266342.315 ops/s [Average]
  (min, avg, max) = (79819668.873, 81420273.651, 81919497.629), stdev = 398648.668
  CI (99.9%): [81153931.336, 81686615.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_dropWhile  thrpt   30  81420273.651 ± 266342.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740418.644 ops/s
# Warmup Iteration   2: 790816.734 ops/s
# Warmup Iteration   3: 1008265.957 ops/s
# Warmup Iteration   4: 1024437.544 ops/s
# Warmup Iteration   5: 1026224.005 ops/s
# Warmup Iteration   6: 1027061.109 ops/s
# Warmup Iteration   7: 1030482.360 ops/s
# Warmup Iteration   8: 1025469.981 ops/s
# Warmup Iteration   9: 1029649.234 ops/s
# Warmup Iteration  10: 1026852.547 ops/s
# Warmup Iteration  11: 1023483.456 ops/s
# Warmup Iteration  12: 885793.456 ops/s
# Warmup Iteration  13: 1013141.140 ops/s
# Warmup Iteration  14: 1021745.088 ops/s
# Warmup Iteration  15: 1026433.815 ops/s
# Warmup Iteration  16: 1024553.501 ops/s
# Warmup Iteration  17: 1084705.993 ops/s
# Warmup Iteration  18: 1089349.004 ops/s
# Warmup Iteration  19: 1084961.357 ops/s
# Warmup Iteration  20: 1086022.488 ops/s
# Warmup Iteration  21: 1084294.586 ops/s
# Warmup Iteration  22: 1091367.954 ops/s
# Warmup Iteration  23: 1086681.463 ops/s
# Warmup Iteration  24: 1086793.030 ops/s
# Warmup Iteration  25: 1088766.543 ops/s
# Warmup Iteration  26: 1085004.053 ops/s
# Warmup Iteration  27: 1090959.667 ops/s
# Warmup Iteration  28: 1089329.900 ops/s
# Warmup Iteration  29: 1082238.021 ops/s
# Warmup Iteration  30: 1080113.186 ops/s
Iteration   1: 1090331.786 ops/s
Iteration   2: 1087692.757 ops/s
Iteration   3: 1091631.661 ops/s
Iteration   4: 1091274.037 ops/s
Iteration   5: 1084669.560 ops/s
Iteration   6: 1082696.087 ops/s
Iteration   7: 1089146.376 ops/s
Iteration   8: 1092757.511 ops/s
Iteration   9: 1088615.761 ops/s
Iteration  10: 1087751.790 ops/s
Iteration  11: 1084670.209 ops/s
Iteration  12: 1080082.613 ops/s
Iteration  13: 1084227.992 ops/s
Iteration  14: 1087636.348 ops/s
Iteration  15: 1087837.250 ops/s
Iteration  16: 1089945.180 ops/s
Iteration  17: 1085837.751 ops/s
Iteration  18: 1091246.872 ops/s
Iteration  19: 1088768.016 ops/s
Iteration  20: 1089268.763 ops/s
Iteration  21: 1087645.887 ops/s
Iteration  22: 1085256.193 ops/s
Iteration  23: 1085370.161 ops/s
Iteration  24: 1089217.568 ops/s
Iteration  25: 1094215.141 ops/s
Iteration  26: 1090080.991 ops/s
Iteration  27: 1088964.243 ops/s
Iteration  28: 1084485.689 ops/s
Iteration  29: 1084214.845 ops/s
Iteration  30: 1088129.413 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_drop_throws":
  1087788.948 ±(99.9%) 2104.404 ops/s [Average]
  (min, avg, max) = (1080082.613, 1087788.948, 1094215.141), stdev = 3149.774
  CI (99.9%): [1085684.544, 1089893.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_drop_throws  thrpt   30  1087788.948 ± 2104.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_each$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_each

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54409415.269 ops/s
# Warmup Iteration   2: 112824689.141 ops/s
# Warmup Iteration   3: 103678813.117 ops/s
# Warmup Iteration   4: 122166198.503 ops/s
# Warmup Iteration   5: 121574501.694 ops/s
# Warmup Iteration   6: 120875603.454 ops/s
# Warmup Iteration   7: 121715851.998 ops/s
# Warmup Iteration   8: 121793394.564 ops/s
# Warmup Iteration   9: 120518000.720 ops/s
# Warmup Iteration  10: 121884850.875 ops/s
# Warmup Iteration  11: 121431241.927 ops/s
# Warmup Iteration  12: 118735609.827 ops/s
# Warmup Iteration  13: 119189674.086 ops/s
# Warmup Iteration  14: 121015994.095 ops/s
# Warmup Iteration  15: 120783030.274 ops/s
# Warmup Iteration  16: 121444764.997 ops/s
# Warmup Iteration  17: 120972989.518 ops/s
# Warmup Iteration  18: 122260000.995 ops/s
# Warmup Iteration  19: 121041507.153 ops/s
# Warmup Iteration  20: 120405304.839 ops/s
# Warmup Iteration  21: 120236405.507 ops/s
# Warmup Iteration  22: 122128627.976 ops/s
# Warmup Iteration  23: 121250844.134 ops/s
# Warmup Iteration  24: 120160518.642 ops/s
# Warmup Iteration  25: 121405908.141 ops/s
# Warmup Iteration  26: 120976053.175 ops/s
# Warmup Iteration  27: 121281548.570 ops/s
# Warmup Iteration  28: 120370286.322 ops/s
# Warmup Iteration  29: 120947404.739 ops/s
# Warmup Iteration  30: 119081134.487 ops/s
Iteration   1: 121321025.669 ops/s
Iteration   2: 122283566.527 ops/s
Iteration   3: 119225968.078 ops/s
Iteration   4: 121154256.910 ops/s
Iteration   5: 120190125.000 ops/s
Iteration   6: 120954894.576 ops/s
Iteration   7: 120728715.865 ops/s
Iteration   8: 120840539.233 ops/s
Iteration   9: 121271091.652 ops/s
Iteration  10: 121073279.969 ops/s
Iteration  11: 121275542.185 ops/s
Iteration  12: 121735727.095 ops/s
Iteration  13: 121027052.837 ops/s
Iteration  14: 120164114.688 ops/s
Iteration  15: 119843797.401 ops/s
Iteration  16: 118560976.374 ops/s
Iteration  17: 120473017.904 ops/s
Iteration  18: 121967887.977 ops/s
Iteration  19: 121423595.140 ops/s
Iteration  20: 121203341.357 ops/s
Iteration  21: 120886930.014 ops/s
Iteration  22: 118167154.579 ops/s
Iteration  23: 118235048.577 ops/s
Iteration  24: 118561320.131 ops/s
Iteration  25: 118864999.826 ops/s
Iteration  26: 121799209.255 ops/s
Iteration  27: 121899002.717 ops/s
Iteration  28: 120255466.071 ops/s
Iteration  29: 120159638.397 ops/s
Iteration  30: 121541238.437 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_each":
  120569617.481 ±(99.9%) 779015.225 ops/s [Average]
  (min, avg, max) = (118167154.579, 120569617.481, 122283566.527), stdev = 1165993.404
  CI (99.9%): [119790602.256, 121348632.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_each  thrpt   30  120569617.481 ± 779015.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 113965.615 ops/s
# Warmup Iteration   2: 214450.486 ops/s
# Warmup Iteration   3: 253008.594 ops/s
# Warmup Iteration   4: 251646.296 ops/s
# Warmup Iteration   5: 233291.128 ops/s
# Warmup Iteration   6: 235713.386 ops/s
# Warmup Iteration   7: 252625.213 ops/s
# Warmup Iteration   8: 251623.021 ops/s
# Warmup Iteration   9: 249930.058 ops/s
# Warmup Iteration  10: 251129.906 ops/s
# Warmup Iteration  11: 249860.503 ops/s
# Warmup Iteration  12: 251729.920 ops/s
# Warmup Iteration  13: 253567.172 ops/s
# Warmup Iteration  14: 250546.468 ops/s
# Warmup Iteration  15: 251880.801 ops/s
# Warmup Iteration  16: 251325.667 ops/s
# Warmup Iteration  17: 252215.406 ops/s
# Warmup Iteration  18: 251949.496 ops/s
# Warmup Iteration  19: 249893.314 ops/s
# Warmup Iteration  20: 249654.243 ops/s
# Warmup Iteration  21: 250915.075 ops/s
# Warmup Iteration  22: 251930.580 ops/s
# Warmup Iteration  23: 251583.017 ops/s
# Warmup Iteration  24: 251812.529 ops/s
# Warmup Iteration  25: 251273.352 ops/s
# Warmup Iteration  26: 249470.410 ops/s
# Warmup Iteration  27: 250475.583 ops/s
# Warmup Iteration  28: 249605.218 ops/s
# Warmup Iteration  29: 250663.244 ops/s
# Warmup Iteration  30: 250534.133 ops/s
Iteration   1: 251155.421 ops/s
Iteration   2: 249371.035 ops/s
Iteration   3: 249490.678 ops/s
Iteration   4: 249409.068 ops/s
Iteration   5: 250214.237 ops/s
Iteration   6: 250429.650 ops/s
Iteration   7: 249342.841 ops/s
Iteration   8: 249387.271 ops/s
Iteration   9: 250142.554 ops/s
Iteration  10: 250536.349 ops/s
Iteration  11: 252004.157 ops/s
Iteration  12: 250276.126 ops/s
Iteration  13: 250823.903 ops/s
Iteration  14: 252787.704 ops/s
Iteration  15: 246589.531 ops/s
Iteration  16: 247033.680 ops/s
Iteration  17: 246081.673 ops/s
Iteration  18: 245879.727 ops/s
Iteration  19: 244876.483 ops/s
Iteration  20: 244272.787 ops/s
Iteration  21: 244963.757 ops/s
Iteration  22: 244061.151 ops/s
Iteration  23: 243025.387 ops/s
Iteration  24: 244303.881 ops/s
Iteration  25: 245340.102 ops/s
Iteration  26: 245330.650 ops/s
Iteration  27: 245271.095 ops/s
Iteration  28: 243100.474 ops/s
Iteration  29: 245952.809 ops/s
Iteration  30: 248725.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_equalsAndHashCode":
  247672.664 ±(99.9%) 1917.028 ops/s [Average]
  (min, avg, max) = (243025.387, 247672.664, 252787.704), stdev = 2869.318
  CI (99.9%): [245755.636, 249589.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  247672.664 ± 1917.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151486903.919 ops/s
# Warmup Iteration   2: 303734020.042 ops/s
# Warmup Iteration   3: 267349660.748 ops/s
# Warmup Iteration   4: 313044880.235 ops/s
# Warmup Iteration   5: 314592579.226 ops/s
# Warmup Iteration   6: 313556981.904 ops/s
# Warmup Iteration   7: 314554902.615 ops/s
# Warmup Iteration   8: 312102844.905 ops/s
# Warmup Iteration   9: 310965579.944 ops/s
# Warmup Iteration  10: 312848367.760 ops/s
# Warmup Iteration  11: 313186570.664 ops/s
# Warmup Iteration  12: 313502359.399 ops/s
# Warmup Iteration  13: 314122258.293 ops/s
# Warmup Iteration  14: 313031386.712 ops/s
# Warmup Iteration  15: 313212705.048 ops/s
# Warmup Iteration  16: 314660968.843 ops/s
# Warmup Iteration  17: 312842469.431 ops/s
# Warmup Iteration  18: 313829731.113 ops/s
# Warmup Iteration  19: 313851024.981 ops/s
# Warmup Iteration  20: 311337171.249 ops/s
# Warmup Iteration  21: 312460813.671 ops/s
# Warmup Iteration  22: 314357951.259 ops/s
# Warmup Iteration  23: 312315115.450 ops/s
# Warmup Iteration  24: 312204685.086 ops/s
# Warmup Iteration  25: 311983726.644 ops/s
# Warmup Iteration  26: 312476731.537 ops/s
# Warmup Iteration  27: 313193834.818 ops/s
# Warmup Iteration  28: 312773965.962 ops/s
# Warmup Iteration  29: 313892789.031 ops/s
# Warmup Iteration  30: 312559295.763 ops/s
Iteration   1: 314450338.825 ops/s
Iteration   2: 311186890.904 ops/s
Iteration   3: 312809801.485 ops/s
Iteration   4: 313624543.799 ops/s
Iteration   5: 313873607.900 ops/s
Iteration   6: 313356094.356 ops/s
Iteration   7: 312977862.647 ops/s
Iteration   8: 312377183.011 ops/s
Iteration   9: 313681936.862 ops/s
Iteration  10: 311929312.859 ops/s
Iteration  11: 312873556.166 ops/s
Iteration  12: 311804533.989 ops/s
Iteration  13: 313229214.331 ops/s
Iteration  14: 313517281.719 ops/s
Iteration  15: 313634654.157 ops/s
Iteration  16: 312895772.518 ops/s
Iteration  17: 314303545.997 ops/s
Iteration  18: 312722777.566 ops/s
Iteration  19: 312581849.170 ops/s
Iteration  20: 313809629.727 ops/s
Iteration  21: 313909553.463 ops/s
Iteration  22: 311678521.338 ops/s
Iteration  23: 313911392.810 ops/s
Iteration  24: 310121569.686 ops/s
Iteration  25: 312130382.811 ops/s
Iteration  26: 314269590.517 ops/s
Iteration  27: 311343611.364 ops/s
Iteration  28: 313214579.052 ops/s
Iteration  29: 312114211.067 ops/s
Iteration  30: 312801400.792 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollect":
  312904506.696 ±(99.9%) 689541.100 ops/s [Average]
  (min, avg, max) = (310121569.686, 312904506.696, 314450338.825), stdev = 1032072.735
  CI (99.9%): [312214965.596, 313594047.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_flatCollect  thrpt   30  312904506.696 ± 689541.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149282222.705 ops/s
# Warmup Iteration   2: 302759603.267 ops/s
# Warmup Iteration   3: 265933140.112 ops/s
# Warmup Iteration   4: 313512007.825 ops/s
# Warmup Iteration   5: 311975477.429 ops/s
# Warmup Iteration   6: 312212971.518 ops/s
# Warmup Iteration   7: 314280924.504 ops/s
# Warmup Iteration   8: 313905999.801 ops/s
# Warmup Iteration   9: 310730822.608 ops/s
# Warmup Iteration  10: 313419129.927 ops/s
# Warmup Iteration  11: 313096290.857 ops/s
# Warmup Iteration  12: 312427191.946 ops/s
# Warmup Iteration  13: 310488895.894 ops/s
# Warmup Iteration  14: 311914152.437 ops/s
# Warmup Iteration  15: 310890687.064 ops/s
# Warmup Iteration  16: 312398744.270 ops/s
# Warmup Iteration  17: 312175476.663 ops/s
# Warmup Iteration  18: 313624883.651 ops/s
# Warmup Iteration  19: 313548291.447 ops/s
# Warmup Iteration  20: 312362050.050 ops/s
# Warmup Iteration  21: 312316006.190 ops/s
# Warmup Iteration  22: 313919387.018 ops/s
# Warmup Iteration  23: 311649995.834 ops/s
# Warmup Iteration  24: 312075255.531 ops/s
# Warmup Iteration  25: 310923975.770 ops/s
# Warmup Iteration  26: 311587739.533 ops/s
# Warmup Iteration  27: 310951565.815 ops/s
# Warmup Iteration  28: 312139541.508 ops/s
# Warmup Iteration  29: 312797719.475 ops/s
# Warmup Iteration  30: 312227416.460 ops/s
Iteration   1: 313715590.641 ops/s
Iteration   2: 311286362.077 ops/s
Iteration   3: 311054197.764 ops/s
Iteration   4: 312517994.308 ops/s
Iteration   5: 314224410.276 ops/s
Iteration   6: 313904042.102 ops/s
Iteration   7: 310690333.795 ops/s
Iteration   8: 314035866.659 ops/s
Iteration   9: 312139842.850 ops/s
Iteration  10: 312750892.660 ops/s
Iteration  11: 311574168.447 ops/s
Iteration  12: 313322843.939 ops/s
Iteration  13: 312279024.867 ops/s
Iteration  14: 313095401.442 ops/s
Iteration  15: 312166701.079 ops/s
Iteration  16: 312707869.400 ops/s
Iteration  17: 310088715.235 ops/s
Iteration  18: 310876808.138 ops/s
Iteration  19: 313146079.791 ops/s
Iteration  20: 311120804.514 ops/s
Iteration  21: 312093890.977 ops/s
Iteration  22: 310344450.987 ops/s
Iteration  23: 314312258.781 ops/s
Iteration  24: 311147117.237 ops/s
Iteration  25: 312364205.023 ops/s
Iteration  26: 313752417.164 ops/s
Iteration  27: 314180942.013 ops/s
Iteration  28: 313019992.544 ops/s
Iteration  29: 312141268.906 ops/s
Iteration  30: 313783642.667 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWith":
  312461271.210 ±(99.9%) 832380.123 ops/s [Average]
  (min, avg, max) = (310088715.235, 312461271.210, 314312258.781), stdev = 1245867.476
  CI (99.9%): [311628891.087, 313293651.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWith  thrpt   30  312461271.210 ± 832380.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147714184.699 ops/s
# Warmup Iteration   2: 300245076.746 ops/s
# Warmup Iteration   3: 267410109.548 ops/s
# Warmup Iteration   4: 312926959.578 ops/s
# Warmup Iteration   5: 313371915.694 ops/s
# Warmup Iteration   6: 314688042.202 ops/s
# Warmup Iteration   7: 314345216.150 ops/s
# Warmup Iteration   8: 312676850.394 ops/s
# Warmup Iteration   9: 310973527.476 ops/s
# Warmup Iteration  10: 312942960.064 ops/s
# Warmup Iteration  11: 312229199.194 ops/s
# Warmup Iteration  12: 311638235.263 ops/s
# Warmup Iteration  13: 312198968.018 ops/s
# Warmup Iteration  14: 312507627.613 ops/s
# Warmup Iteration  15: 310724686.144 ops/s
# Warmup Iteration  16: 312721740.725 ops/s
# Warmup Iteration  17: 312470317.320 ops/s
# Warmup Iteration  18: 312211711.534 ops/s
# Warmup Iteration  19: 312458346.659 ops/s
# Warmup Iteration  20: 313275597.638 ops/s
# Warmup Iteration  21: 312851613.682 ops/s
# Warmup Iteration  22: 312703959.161 ops/s
# Warmup Iteration  23: 312761449.432 ops/s
# Warmup Iteration  24: 312813855.932 ops/s
# Warmup Iteration  25: 312001369.851 ops/s
# Warmup Iteration  26: 314179953.322 ops/s
# Warmup Iteration  27: 311621402.919 ops/s
# Warmup Iteration  28: 311622490.648 ops/s
# Warmup Iteration  29: 312328881.584 ops/s
# Warmup Iteration  30: 312701931.356 ops/s
Iteration   1: 313006975.006 ops/s
Iteration   2: 308908343.920 ops/s
Iteration   3: 309877276.771 ops/s
Iteration   4: 313280199.587 ops/s
Iteration   5: 314208184.989 ops/s
Iteration   6: 314301277.253 ops/s
Iteration   7: 313853068.449 ops/s
Iteration   8: 313981648.218 ops/s
Iteration   9: 314305235.912 ops/s
Iteration  10: 312035460.161 ops/s
Iteration  11: 313918072.604 ops/s
Iteration  12: 313456906.020 ops/s
Iteration  13: 308855188.419 ops/s
Iteration  14: 310582512.568 ops/s
Iteration  15: 312641671.348 ops/s
Iteration  16: 310784406.146 ops/s
Iteration  17: 310265132.076 ops/s
Iteration  18: 311756274.465 ops/s
Iteration  19: 311557781.480 ops/s
Iteration  20: 311892737.208 ops/s
Iteration  21: 313167669.948 ops/s
Iteration  22: 313206527.538 ops/s
Iteration  23: 313003573.148 ops/s
Iteration  24: 311617549.879 ops/s
Iteration  25: 311447798.888 ops/s
Iteration  26: 314296574.153 ops/s
Iteration  27: 312891597.112 ops/s
Iteration  28: 314439402.135 ops/s
Iteration  29: 311088581.868 ops/s
Iteration  30: 309205291.310 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWithTarget":
  312261097.286 ±(99.9%) 1146011.388 ops/s [Average]
  (min, avg, max) = (308855188.419, 312261097.286, 314439402.135), stdev = 1715296.026
  CI (99.9%): [311115085.897, 313407108.674] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  312261097.286 ± 1146011.388  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54123954.577 ops/s
# Warmup Iteration   2: 113433913.213 ops/s
# Warmup Iteration   3: 105120452.343 ops/s
# Warmup Iteration   4: 121720432.742 ops/s
# Warmup Iteration   5: 121315906.411 ops/s
# Warmup Iteration   6: 120737915.127 ops/s
# Warmup Iteration   7: 122227361.258 ops/s
# Warmup Iteration   8: 122088377.211 ops/s
# Warmup Iteration   9: 119315945.884 ops/s
# Warmup Iteration  10: 119830532.234 ops/s
# Warmup Iteration  11: 122293678.092 ops/s
# Warmup Iteration  12: 122158305.193 ops/s
# Warmup Iteration  13: 122260574.614 ops/s
# Warmup Iteration  14: 121424252.592 ops/s
# Warmup Iteration  15: 122964037.576 ops/s
# Warmup Iteration  16: 121351695.907 ops/s
# Warmup Iteration  17: 121596553.806 ops/s
# Warmup Iteration  18: 120505196.420 ops/s
# Warmup Iteration  19: 122337001.870 ops/s
# Warmup Iteration  20: 122108254.988 ops/s
# Warmup Iteration  21: 121217754.775 ops/s
# Warmup Iteration  22: 120006695.386 ops/s
# Warmup Iteration  23: 122307410.672 ops/s
# Warmup Iteration  24: 120867995.546 ops/s
# Warmup Iteration  25: 122394083.011 ops/s
# Warmup Iteration  26: 120932820.765 ops/s
# Warmup Iteration  27: 120704505.952 ops/s
# Warmup Iteration  28: 119672351.351 ops/s
# Warmup Iteration  29: 121871848.020 ops/s
# Warmup Iteration  30: 121865384.999 ops/s
Iteration   1: 121718099.676 ops/s
Iteration   2: 122218687.029 ops/s
Iteration   3: 122076551.413 ops/s
Iteration   4: 122027520.688 ops/s
Iteration   5: 120902305.300 ops/s
Iteration   6: 120443122.322 ops/s
Iteration   7: 119441225.990 ops/s
Iteration   8: 121255071.784 ops/s
Iteration   9: 122088768.777 ops/s
Iteration  10: 121175055.120 ops/s
Iteration  11: 120962585.277 ops/s
Iteration  12: 120117765.580 ops/s
Iteration  13: 120768350.599 ops/s
Iteration  14: 121530063.047 ops/s
Iteration  15: 121349205.884 ops/s
Iteration  16: 121281756.963 ops/s
Iteration  17: 120340419.235 ops/s
Iteration  18: 122232769.191 ops/s
Iteration  19: 122459701.217 ops/s
Iteration  20: 121763059.391 ops/s
Iteration  21: 121318333.690 ops/s
Iteration  22: 121192101.608 ops/s
Iteration  23: 121315215.678 ops/s
Iteration  24: 120337533.668 ops/s
Iteration  25: 119939837.353 ops/s
Iteration  26: 119512613.556 ops/s
Iteration  27: 120098168.985 ops/s
Iteration  28: 122152446.610 ops/s
Iteration  29: 120274315.205 ops/s
Iteration  30: 121014890.492 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEach":
  121110251.378 ±(99.9%) 562359.709 ops/s [Average]
  (min, avg, max) = (119441225.990, 121110251.378, 122459701.217), stdev = 841713.602
  CI (99.9%): [120547891.669, 121672611.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forEach  thrpt   30  121110251.378 ± 562359.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354870.761 ops/s
# Warmup Iteration   2: 383381.370 ops/s
# Warmup Iteration   3: 460506.998 ops/s
# Warmup Iteration   4: 486355.483 ops/s
# Warmup Iteration   5: 485069.199 ops/s
# Warmup Iteration   6: 483981.094 ops/s
# Warmup Iteration   7: 488155.272 ops/s
# Warmup Iteration   8: 485931.889 ops/s
# Warmup Iteration   9: 485392.901 ops/s
# Warmup Iteration  10: 487158.164 ops/s
# Warmup Iteration  11: 484811.093 ops/s
# Warmup Iteration  12: 484255.896 ops/s
# Warmup Iteration  13: 439706.220 ops/s
# Warmup Iteration  14: 463241.798 ops/s
# Warmup Iteration  15: 488414.889 ops/s
# Warmup Iteration  16: 486183.080 ops/s
# Warmup Iteration  17: 512091.018 ops/s
# Warmup Iteration  18: 511827.170 ops/s
# Warmup Iteration  19: 512203.821 ops/s
# Warmup Iteration  20: 511497.602 ops/s
# Warmup Iteration  21: 510771.725 ops/s
# Warmup Iteration  22: 510795.964 ops/s
# Warmup Iteration  23: 512365.521 ops/s
# Warmup Iteration  24: 513139.140 ops/s
# Warmup Iteration  25: 508417.327 ops/s
# Warmup Iteration  26: 509667.452 ops/s
# Warmup Iteration  27: 512671.232 ops/s
# Warmup Iteration  28: 511025.494 ops/s
# Warmup Iteration  29: 512158.692 ops/s
# Warmup Iteration  30: 513076.488 ops/s
Iteration   1: 513749.785 ops/s
Iteration   2: 512154.952 ops/s
Iteration   3: 513061.675 ops/s
Iteration   4: 513738.245 ops/s
Iteration   5: 514090.132 ops/s
Iteration   6: 511326.919 ops/s
Iteration   7: 512315.894 ops/s
Iteration   8: 513142.242 ops/s
Iteration   9: 513658.374 ops/s
Iteration  10: 510523.837 ops/s
Iteration  11: 510498.846 ops/s
Iteration  12: 512096.046 ops/s
Iteration  13: 512936.027 ops/s
Iteration  14: 512383.352 ops/s
Iteration  15: 512175.439 ops/s
Iteration  16: 511185.705 ops/s
Iteration  17: 506825.931 ops/s
Iteration  18: 509315.194 ops/s
Iteration  19: 505612.583 ops/s
Iteration  20: 507724.100 ops/s
Iteration  21: 510138.726 ops/s
Iteration  22: 513071.639 ops/s
Iteration  23: 513212.975 ops/s
Iteration  24: 509787.404 ops/s
Iteration  25: 511265.202 ops/s
Iteration  26: 510718.649 ops/s
Iteration  27: 514008.047 ops/s
Iteration  28: 513608.014 ops/s
Iteration  29: 507207.270 ops/s
Iteration  30: 509704.373 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachFromTo":
  511374.586 ±(99.9%) 1528.154 ops/s [Average]
  (min, avg, max) = (505612.583, 511374.586, 514090.132), stdev = 2287.269
  CI (99.9%): [509846.432, 512902.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forEachFromTo  thrpt   30  511374.586 ± 1528.154  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53009916.596 ops/s
# Warmup Iteration   2: 112189721.194 ops/s
# Warmup Iteration   3: 103886468.909 ops/s
# Warmup Iteration   4: 122839698.242 ops/s
# Warmup Iteration   5: 122457994.953 ops/s
# Warmup Iteration   6: 121953151.503 ops/s
# Warmup Iteration   7: 123271478.722 ops/s
# Warmup Iteration   8: 120823584.434 ops/s
# Warmup Iteration   9: 119699393.260 ops/s
# Warmup Iteration  10: 121047637.965 ops/s
# Warmup Iteration  11: 122847174.404 ops/s
# Warmup Iteration  12: 121681666.559 ops/s
# Warmup Iteration  13: 122244886.883 ops/s
# Warmup Iteration  14: 121725347.528 ops/s
# Warmup Iteration  15: 121877311.404 ops/s
# Warmup Iteration  16: 122938557.886 ops/s
# Warmup Iteration  17: 121927485.002 ops/s
# Warmup Iteration  18: 122343177.180 ops/s
# Warmup Iteration  19: 121348871.495 ops/s
# Warmup Iteration  20: 121400020.237 ops/s
# Warmup Iteration  21: 121495156.150 ops/s
# Warmup Iteration  22: 122295905.659 ops/s
# Warmup Iteration  23: 121736999.249 ops/s
# Warmup Iteration  24: 121078352.357 ops/s
# Warmup Iteration  25: 121446730.402 ops/s
# Warmup Iteration  26: 121926195.810 ops/s
# Warmup Iteration  27: 122165023.349 ops/s
# Warmup Iteration  28: 121058308.375 ops/s
# Warmup Iteration  29: 121562516.397 ops/s
# Warmup Iteration  30: 121399342.994 ops/s
Iteration   1: 120995588.067 ops/s
Iteration   2: 121683725.760 ops/s
Iteration   3: 121994396.897 ops/s
Iteration   4: 122202495.693 ops/s
Iteration   5: 121971487.322 ops/s
Iteration   6: 121490707.823 ops/s
Iteration   7: 121641463.587 ops/s
Iteration   8: 121455019.532 ops/s
Iteration   9: 121693620.503 ops/s
Iteration  10: 121936509.419 ops/s
Iteration  11: 121549830.267 ops/s
Iteration  12: 120935545.243 ops/s
Iteration  13: 121806575.069 ops/s
Iteration  14: 122163525.190 ops/s
Iteration  15: 121611953.962 ops/s
Iteration  16: 120976190.836 ops/s
Iteration  17: 121838465.074 ops/s
Iteration  18: 121150422.277 ops/s
Iteration  19: 121919762.519 ops/s
Iteration  20: 121233568.619 ops/s
Iteration  21: 121621377.426 ops/s
Iteration  22: 122530846.575 ops/s
Iteration  23: 121562382.133 ops/s
Iteration  24: 122686255.891 ops/s
Iteration  25: 122310687.281 ops/s
Iteration  26: 121322692.502 ops/s
Iteration  27: 122563470.379 ops/s
Iteration  28: 122370407.412 ops/s
Iteration  29: 121652418.420 ops/s
Iteration  30: 121178614.766 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWith":
  121735000.215 ±(99.9%) 320181.180 ops/s [Average]
  (min, avg, max) = (120935545.243, 121735000.215, 122686255.891), stdev = 479232.153
  CI (99.9%): [121414819.035, 122055181.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forEachWith  thrpt   30  121735000.215 ± 320181.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56115710.691 ops/s
# Warmup Iteration   2: 112293587.610 ops/s
# Warmup Iteration   3: 103510165.915 ops/s
# Warmup Iteration   4: 120625706.191 ops/s
# Warmup Iteration   5: 121850416.883 ops/s
# Warmup Iteration   6: 121684169.773 ops/s
# Warmup Iteration   7: 120232121.881 ops/s
# Warmup Iteration   8: 118619974.243 ops/s
# Warmup Iteration   9: 120194840.109 ops/s
# Warmup Iteration  10: 121813697.457 ops/s
# Warmup Iteration  11: 120167548.267 ops/s
# Warmup Iteration  12: 120450837.025 ops/s
# Warmup Iteration  13: 120287064.576 ops/s
# Warmup Iteration  14: 120846765.497 ops/s
# Warmup Iteration  15: 120507435.418 ops/s
# Warmup Iteration  16: 120449840.594 ops/s
# Warmup Iteration  17: 120745250.848 ops/s
# Warmup Iteration  18: 120710874.864 ops/s
# Warmup Iteration  19: 119324938.326 ops/s
# Warmup Iteration  20: 120275672.856 ops/s
# Warmup Iteration  21: 121184335.522 ops/s
# Warmup Iteration  22: 120209065.528 ops/s
# Warmup Iteration  23: 120586367.712 ops/s
# Warmup Iteration  24: 121514510.889 ops/s
# Warmup Iteration  25: 120397956.906 ops/s
# Warmup Iteration  26: 120505292.134 ops/s
# Warmup Iteration  27: 120263979.427 ops/s
# Warmup Iteration  28: 121089734.143 ops/s
# Warmup Iteration  29: 120122498.408 ops/s
# Warmup Iteration  30: 120629192.763 ops/s
Iteration   1: 119567387.288 ops/s
Iteration   2: 119728156.451 ops/s
Iteration   3: 119697997.404 ops/s
Iteration   4: 119988425.658 ops/s
Iteration   5: 119288489.269 ops/s
Iteration   6: 119656102.422 ops/s
Iteration   7: 120138213.064 ops/s
Iteration   8: 119547813.280 ops/s
Iteration   9: 119569595.067 ops/s
Iteration  10: 120505826.915 ops/s
Iteration  11: 118382501.186 ops/s
Iteration  12: 119778058.138 ops/s
Iteration  13: 119725409.937 ops/s
Iteration  14: 119975644.757 ops/s
Iteration  15: 119909191.799 ops/s
Iteration  16: 120584965.165 ops/s
Iteration  17: 121208600.178 ops/s
Iteration  18: 121457519.453 ops/s
Iteration  19: 121481558.210 ops/s
Iteration  20: 120392025.622 ops/s
Iteration  21: 118465963.866 ops/s
Iteration  22: 120440982.116 ops/s
Iteration  23: 121958900.078 ops/s
Iteration  24: 121003563.057 ops/s
Iteration  25: 120835437.655 ops/s
Iteration  26: 120135591.179 ops/s
Iteration  27: 118661380.263 ops/s
Iteration  28: 121418809.916 ops/s
Iteration  29: 121722650.760 ops/s
Iteration  30: 120687835.167 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndex":
  120197153.177 ±(99.9%) 618529.884 ops/s [Average]
  (min, avg, max) = (118382501.186, 120197153.177, 121958900.078), stdev = 925786.482
  CI (99.9%): [119578623.294, 120815683.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  120197153.177 ± 618529.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndexFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndexFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345022.232 ops/s
# Warmup Iteration   2: 369853.541 ops/s
# Warmup Iteration   3: 449872.616 ops/s
# Warmup Iteration   4: 466090.726 ops/s
# Warmup Iteration   5: 466636.559 ops/s
# Warmup Iteration   6: 465590.921 ops/s
# Warmup Iteration   7: 467994.641 ops/s
# Warmup Iteration   8: 466376.039 ops/s
# Warmup Iteration   9: 466811.580 ops/s
# Warmup Iteration  10: 467160.853 ops/s
# Warmup Iteration  11: 468223.050 ops/s
# Warmup Iteration  12: 466453.380 ops/s
# Warmup Iteration  13: 399863.997 ops/s
# Warmup Iteration  14: 451769.074 ops/s
# Warmup Iteration  15: 463986.104 ops/s
# Warmup Iteration  16: 465542.631 ops/s
# Warmup Iteration  17: 492279.279 ops/s
# Warmup Iteration  18: 493695.682 ops/s
# Warmup Iteration  19: 490382.683 ops/s
# Warmup Iteration  20: 490803.584 ops/s
# Warmup Iteration  21: 492305.613 ops/s
# Warmup Iteration  22: 492115.115 ops/s
# Warmup Iteration  23: 492111.544 ops/s
# Warmup Iteration  24: 492704.713 ops/s
# Warmup Iteration  25: 491468.737 ops/s
# Warmup Iteration  26: 491911.823 ops/s
# Warmup Iteration  27: 494693.920 ops/s
# Warmup Iteration  28: 493927.811 ops/s
# Warmup Iteration  29: 493407.084 ops/s
# Warmup Iteration  30: 492164.438 ops/s
Iteration   1: 494856.711 ops/s
Iteration   2: 493470.070 ops/s
Iteration   3: 493641.179 ops/s
Iteration   4: 494557.664 ops/s
Iteration   5: 494104.385 ops/s
Iteration   6: 493496.722 ops/s
Iteration   7: 492760.129 ops/s
Iteration   8: 494828.872 ops/s
Iteration   9: 493563.395 ops/s
Iteration  10: 489592.863 ops/s
Iteration  11: 488024.574 ops/s
Iteration  12: 492104.283 ops/s
Iteration  13: 490517.262 ops/s
Iteration  14: 492136.017 ops/s
Iteration  15: 492810.134 ops/s
Iteration  16: 490744.847 ops/s
Iteration  17: 491616.108 ops/s
Iteration  18: 487575.002 ops/s
Iteration  19: 493374.893 ops/s
Iteration  20: 492282.073 ops/s
Iteration  21: 493294.799 ops/s
Iteration  22: 494321.509 ops/s
Iteration  23: 491885.693 ops/s
Iteration  24: 491216.797 ops/s
Iteration  25: 492012.754 ops/s
Iteration  26: 492794.036 ops/s
Iteration  27: 489044.312 ops/s
Iteration  28: 493526.521 ops/s
Iteration  29: 489818.620 ops/s
Iteration  30: 491581.311 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndexFromTo":
  492185.118 ±(99.9%) 1291.121 ops/s [Average]
  (min, avg, max) = (487575.002, 492185.118, 494856.711), stdev = 1932.490
  CI (99.9%): [490893.996, 493476.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forEachWithIndexFromTo  thrpt   30  492185.118 ± 1291.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151822168.928 ops/s
# Warmup Iteration   2: 302314774.334 ops/s
# Warmup Iteration   3: 268231611.815 ops/s
# Warmup Iteration   4: 312803153.245 ops/s
# Warmup Iteration   5: 310666805.677 ops/s
# Warmup Iteration   6: 311341675.118 ops/s
# Warmup Iteration   7: 313824877.906 ops/s
# Warmup Iteration   8: 311581855.109 ops/s
# Warmup Iteration   9: 313011232.972 ops/s
# Warmup Iteration  10: 312327814.739 ops/s
# Warmup Iteration  11: 312104725.279 ops/s
# Warmup Iteration  12: 312455936.790 ops/s
# Warmup Iteration  13: 312005716.771 ops/s
# Warmup Iteration  14: 311717130.520 ops/s
# Warmup Iteration  15: 312006217.024 ops/s
# Warmup Iteration  16: 312999947.750 ops/s
# Warmup Iteration  17: 310165855.085 ops/s
# Warmup Iteration  18: 312997628.951 ops/s
# Warmup Iteration  19: 311968618.433 ops/s
# Warmup Iteration  20: 312062868.344 ops/s
# Warmup Iteration  21: 309780344.586 ops/s
# Warmup Iteration  22: 313109639.932 ops/s
# Warmup Iteration  23: 312667231.565 ops/s
# Warmup Iteration  24: 310532284.740 ops/s
# Warmup Iteration  25: 310896499.905 ops/s
# Warmup Iteration  26: 312831720.655 ops/s
# Warmup Iteration  27: 313310395.396 ops/s
# Warmup Iteration  28: 312210007.558 ops/s
# Warmup Iteration  29: 312558094.470 ops/s
# Warmup Iteration  30: 310933452.818 ops/s
Iteration   1: 310106567.417 ops/s
Iteration   2: 311842097.676 ops/s
Iteration   3: 312345510.069 ops/s
Iteration   4: 311789158.356 ops/s
Iteration   5: 311324596.680 ops/s
Iteration   6: 311785706.147 ops/s
Iteration   7: 312741836.767 ops/s
Iteration   8: 311336074.108 ops/s
Iteration   9: 311106329.560 ops/s
Iteration  10: 311785598.622 ops/s
Iteration  11: 309478092.238 ops/s
Iteration  12: 312844343.486 ops/s
Iteration  13: 311979958.892 ops/s
Iteration  14: 310859132.036 ops/s
Iteration  15: 311759234.387 ops/s
Iteration  16: 311427540.281 ops/s
Iteration  17: 313214133.620 ops/s
Iteration  18: 312264917.135 ops/s
Iteration  19: 312404240.199 ops/s
Iteration  20: 312049939.033 ops/s
Iteration  21: 310799612.910 ops/s
Iteration  22: 310058443.370 ops/s
Iteration  23: 312617520.642 ops/s
Iteration  24: 309966782.980 ops/s
Iteration  25: 310699508.659 ops/s
Iteration  26: 310671354.258 ops/s
Iteration  27: 312947022.786 ops/s
Iteration  28: 310550945.442 ops/s
Iteration  29: 311552726.729 ops/s
Iteration  30: 312295339.461 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_forLoop":
  311553475.465 ±(99.9%) 645465.855 ops/s [Average]
  (min, avg, max) = (309478092.238, 311553475.465, 313214133.620), stdev = 966102.979
  CI (99.9%): [310908009.610, 312198941.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_forLoop  thrpt   30  311553475.465 ± 645465.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 361349.597 ops/s
# Warmup Iteration   2: 385307.341 ops/s
# Warmup Iteration   3: 459803.798 ops/s
# Warmup Iteration   4: 487375.292 ops/s
# Warmup Iteration   5: 489655.254 ops/s
# Warmup Iteration   6: 484758.803 ops/s
# Warmup Iteration   7: 489333.933 ops/s
# Warmup Iteration   8: 488324.536 ops/s
# Warmup Iteration   9: 490527.739 ops/s
# Warmup Iteration  10: 488758.845 ops/s
# Warmup Iteration  11: 485946.082 ops/s
# Warmup Iteration  12: 487323.329 ops/s
# Warmup Iteration  13: 458380.720 ops/s
# Warmup Iteration  14: 446496.167 ops/s
# Warmup Iteration  15: 487328.001 ops/s
# Warmup Iteration  16: 487765.175 ops/s
# Warmup Iteration  17: 511722.033 ops/s
# Warmup Iteration  18: 511428.645 ops/s
# Warmup Iteration  19: 508789.660 ops/s
# Warmup Iteration  20: 512219.338 ops/s
# Warmup Iteration  21: 512515.466 ops/s
# Warmup Iteration  22: 512372.315 ops/s
# Warmup Iteration  23: 513025.561 ops/s
# Warmup Iteration  24: 512184.882 ops/s
# Warmup Iteration  25: 512464.241 ops/s
# Warmup Iteration  26: 513063.289 ops/s
# Warmup Iteration  27: 512980.120 ops/s
# Warmup Iteration  28: 512435.385 ops/s
# Warmup Iteration  29: 509796.770 ops/s
# Warmup Iteration  30: 512665.397 ops/s
Iteration   1: 513504.847 ops/s
Iteration   2: 513061.211 ops/s
Iteration   3: 511884.318 ops/s
Iteration   4: 512471.230 ops/s
Iteration   5: 511191.242 ops/s
Iteration   6: 507320.588 ops/s
Iteration   7: 510533.223 ops/s
Iteration   8: 510830.910 ops/s
Iteration   9: 510718.062 ops/s
Iteration  10: 512133.637 ops/s
Iteration  11: 508688.146 ops/s
Iteration  12: 498173.348 ops/s
Iteration  13: 481607.110 ops/s
Iteration  14: 508718.870 ops/s
Iteration  15: 512790.876 ops/s
Iteration  16: 510380.460 ops/s
Iteration  17: 508632.590 ops/s
Iteration  18: 511634.902 ops/s
Iteration  19: 512209.206 ops/s
Iteration  20: 512257.464 ops/s
Iteration  21: 509560.748 ops/s
Iteration  22: 513457.938 ops/s
Iteration  23: 514348.486 ops/s
Iteration  24: 514967.380 ops/s
Iteration  25: 511740.432 ops/s
Iteration  26: 512168.490 ops/s
Iteration  27: 507837.898 ops/s
Iteration  28: 511942.010 ops/s
Iteration  29: 508423.955 ops/s
Iteration  30: 506372.729 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_get":
  509652.077 ±(99.9%) 4117.995 ops/s [Average]
  (min, avg, max) = (481607.110, 509652.077, 514967.380), stdev = 6163.621
  CI (99.9%): [505534.082, 513770.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_get  thrpt   30  509652.077 ± 4117.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 154415338.153 ops/s
# Warmup Iteration   2: 300699962.549 ops/s
# Warmup Iteration   3: 264867575.612 ops/s
# Warmup Iteration   4: 309413035.171 ops/s
# Warmup Iteration   5: 308931688.847 ops/s
# Warmup Iteration   6: 308012785.436 ops/s
# Warmup Iteration   7: 309681632.470 ops/s
# Warmup Iteration   8: 309505552.320 ops/s
# Warmup Iteration   9: 309852482.395 ops/s
# Warmup Iteration  10: 309757088.374 ops/s
# Warmup Iteration  11: 309176625.436 ops/s
# Warmup Iteration  12: 307915738.637 ops/s
# Warmup Iteration  13: 308429042.270 ops/s
# Warmup Iteration  14: 309294023.329 ops/s
# Warmup Iteration  15: 309254886.174 ops/s
# Warmup Iteration  16: 307439825.106 ops/s
# Warmup Iteration  17: 309840863.090 ops/s
# Warmup Iteration  18: 308146369.986 ops/s
# Warmup Iteration  19: 310543999.337 ops/s
# Warmup Iteration  20: 308156738.075 ops/s
# Warmup Iteration  21: 309175583.205 ops/s
# Warmup Iteration  22: 310573299.526 ops/s
# Warmup Iteration  23: 309491933.500 ops/s
# Warmup Iteration  24: 308658850.806 ops/s
# Warmup Iteration  25: 309588804.705 ops/s
# Warmup Iteration  26: 308821662.606 ops/s
# Warmup Iteration  27: 309464066.350 ops/s
# Warmup Iteration  28: 309374667.326 ops/s
# Warmup Iteration  29: 309974995.373 ops/s
# Warmup Iteration  30: 309323587.070 ops/s
Iteration   1: 311765899.577 ops/s
Iteration   2: 308518509.555 ops/s
Iteration   3: 307821794.944 ops/s
Iteration   4: 310677873.614 ops/s
Iteration   5: 307466202.974 ops/s
Iteration   6: 308657623.170 ops/s
Iteration   7: 308910962.585 ops/s
Iteration   8: 309232483.611 ops/s
Iteration   9: 309508591.942 ops/s
Iteration  10: 309225474.559 ops/s
Iteration  11: 309798061.951 ops/s
Iteration  12: 310559545.190 ops/s
Iteration  13: 307627502.969 ops/s
Iteration  14: 309054668.833 ops/s
Iteration  15: 308438038.173 ops/s
Iteration  16: 311249999.708 ops/s
Iteration  17: 308864237.203 ops/s
Iteration  18: 311152812.413 ops/s
Iteration  19: 307902275.142 ops/s
Iteration  20: 310104701.803 ops/s
Iteration  21: 309437931.310 ops/s
Iteration  22: 308745247.627 ops/s
Iteration  23: 306800816.114 ops/s
Iteration  24: 307219711.485 ops/s
Iteration  25: 303182563.346 ops/s
Iteration  26: 307942566.546 ops/s
Iteration  27: 309440284.233 ops/s
Iteration  28: 307839301.565 ops/s
Iteration  29: 307716215.823 ops/s
Iteration  30: 308162905.736 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getFirst":
  308767493.457 ±(99.9%) 1094525.837 ops/s [Average]
  (min, avg, max) = (303182563.346, 308767493.457, 311765899.577), stdev = 1638234.870
  CI (99.9%): [307672967.620, 309862019.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_getFirst  thrpt   30  308767493.457 ± 1094525.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151827537.030 ops/s
# Warmup Iteration   2: 302756178.226 ops/s
# Warmup Iteration   3: 266270628.785 ops/s
# Warmup Iteration   4: 313021832.281 ops/s
# Warmup Iteration   5: 312124639.287 ops/s
# Warmup Iteration   6: 311989789.162 ops/s
# Warmup Iteration   7: 311210653.555 ops/s
# Warmup Iteration   8: 313144824.900 ops/s
# Warmup Iteration   9: 312207381.072 ops/s
# Warmup Iteration  10: 311405499.380 ops/s
# Warmup Iteration  11: 311614100.963 ops/s
# Warmup Iteration  12: 312221357.332 ops/s
# Warmup Iteration  13: 312746811.088 ops/s
# Warmup Iteration  14: 312004475.256 ops/s
# Warmup Iteration  15: 309900835.309 ops/s
# Warmup Iteration  16: 312813536.314 ops/s
# Warmup Iteration  17: 310977637.466 ops/s
# Warmup Iteration  18: 313405227.403 ops/s
# Warmup Iteration  19: 310921713.931 ops/s
# Warmup Iteration  20: 313283960.958 ops/s
# Warmup Iteration  21: 311787588.663 ops/s
# Warmup Iteration  22: 311581318.561 ops/s
# Warmup Iteration  23: 311156443.759 ops/s
# Warmup Iteration  24: 311171452.069 ops/s
# Warmup Iteration  25: 310499289.900 ops/s
# Warmup Iteration  26: 312533921.860 ops/s
# Warmup Iteration  27: 311318642.930 ops/s
# Warmup Iteration  28: 311782377.700 ops/s
# Warmup Iteration  29: 310794199.604 ops/s
# Warmup Iteration  30: 313497016.257 ops/s
Iteration   1: 309952640.358 ops/s
Iteration   2: 311713719.477 ops/s
Iteration   3: 313625602.690 ops/s
Iteration   4: 312076894.483 ops/s
Iteration   5: 311663928.902 ops/s
Iteration   6: 312163489.980 ops/s
Iteration   7: 311919713.528 ops/s
Iteration   8: 312264545.969 ops/s
Iteration   9: 311942786.273 ops/s
Iteration  10: 310875495.701 ops/s
Iteration  11: 311921136.054 ops/s
Iteration  12: 310898542.791 ops/s
Iteration  13: 311947601.807 ops/s
Iteration  14: 311477834.145 ops/s
Iteration  15: 311878078.780 ops/s
Iteration  16: 310406267.592 ops/s
Iteration  17: 311426669.941 ops/s
Iteration  18: 311874385.593 ops/s
Iteration  19: 310218904.031 ops/s
Iteration  20: 311257704.536 ops/s
Iteration  21: 312578480.204 ops/s
Iteration  22: 312174248.862 ops/s
Iteration  23: 311690282.561 ops/s
Iteration  24: 312418443.479 ops/s
Iteration  25: 312073380.218 ops/s
Iteration  26: 313064935.320 ops/s
Iteration  27: 313049569.870 ops/s
Iteration  28: 310468921.910 ops/s
Iteration  29: 308999263.883 ops/s
Iteration  30: 312714178.612 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getLast":
  311691254.918 ±(99.9%) 661159.954 ops/s [Average]
  (min, avg, max) = (308999263.883, 311691254.918, 313625602.690), stdev = 989593.170
  CI (99.9%): [311030094.964, 312352414.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_getLast  thrpt   30  311691254.918 ± 661159.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 782418.043 ops/s
# Warmup Iteration   2: 838949.301 ops/s
# Warmup Iteration   3: 1057672.847 ops/s
# Warmup Iteration   4: 1079604.129 ops/s
# Warmup Iteration   5: 1082183.103 ops/s
# Warmup Iteration   6: 1065340.839 ops/s
# Warmup Iteration   7: 1066252.942 ops/s
# Warmup Iteration   8: 1081156.140 ops/s
# Warmup Iteration   9: 1076813.919 ops/s
# Warmup Iteration  10: 1078088.488 ops/s
# Warmup Iteration  11: 1077643.891 ops/s
# Warmup Iteration  12: 968860.771 ops/s
# Warmup Iteration  13: 1025578.174 ops/s
# Warmup Iteration  14: 1083200.537 ops/s
# Warmup Iteration  15: 1080558.146 ops/s
# Warmup Iteration  16: 1081946.076 ops/s
# Warmup Iteration  17: 1146619.668 ops/s
# Warmup Iteration  18: 1144633.241 ops/s
# Warmup Iteration  19: 1144680.740 ops/s
# Warmup Iteration  20: 1151163.437 ops/s
# Warmup Iteration  21: 1140092.098 ops/s
# Warmup Iteration  22: 1138505.991 ops/s
# Warmup Iteration  23: 1143432.935 ops/s
# Warmup Iteration  24: 1148963.607 ops/s
# Warmup Iteration  25: 1147107.907 ops/s
# Warmup Iteration  26: 1151352.247 ops/s
# Warmup Iteration  27: 1149027.203 ops/s
# Warmup Iteration  28: 1149447.895 ops/s
# Warmup Iteration  29: 1146785.701 ops/s
# Warmup Iteration  30: 1152289.952 ops/s
Iteration   1: 1148400.680 ops/s
Iteration   2: 1151598.335 ops/s
Iteration   3: 1151982.067 ops/s
Iteration   4: 1152764.182 ops/s
Iteration   5: 1146385.849 ops/s
Iteration   6: 1148465.730 ops/s
Iteration   7: 1152228.640 ops/s
Iteration   8: 1149110.493 ops/s
Iteration   9: 1149078.603 ops/s
Iteration  10: 1148177.468 ops/s
Iteration  11: 1146074.483 ops/s
Iteration  12: 1143091.525 ops/s
Iteration  13: 1143939.057 ops/s
Iteration  14: 1145769.643 ops/s
Iteration  15: 1144012.644 ops/s
Iteration  16: 1146230.578 ops/s
Iteration  17: 1144509.495 ops/s
Iteration  18: 1152023.920 ops/s
Iteration  19: 1153753.547 ops/s
Iteration  20: 1154402.473 ops/s
Iteration  21: 1151061.613 ops/s
Iteration  22: 1151277.673 ops/s
Iteration  23: 1153907.555 ops/s
Iteration  24: 1153104.993 ops/s
Iteration  25: 1151392.194 ops/s
Iteration  26: 1147832.270 ops/s
Iteration  27: 1140440.513 ops/s
Iteration  28: 1142132.356 ops/s
Iteration  29: 1144774.408 ops/s
Iteration  30: 1146515.962 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_getOnly":
  1148481.298 ±(99.9%) 2588.797 ops/s [Average]
  (min, avg, max) = (1140440.513, 1148481.298, 1154402.473), stdev = 3874.790
  CI (99.9%): [1145892.501, 1151070.095] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_getOnly  thrpt   30  1148481.298 ± 2588.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4141089.447 ops/s
# Warmup Iteration   2: 9679701.731 ops/s
# Warmup Iteration   3: 9010433.477 ops/s
# Warmup Iteration   4: 10151686.311 ops/s
# Warmup Iteration   5: 10161155.993 ops/s
# Warmup Iteration   6: 10216501.338 ops/s
# Warmup Iteration   7: 10127534.920 ops/s
# Warmup Iteration   8: 10173203.273 ops/s
# Warmup Iteration   9: 10225400.978 ops/s
# Warmup Iteration  10: 10196713.716 ops/s
# Warmup Iteration  11: 10226672.194 ops/s
# Warmup Iteration  12: 10248665.577 ops/s
# Warmup Iteration  13: 10184803.405 ops/s
# Warmup Iteration  14: 10216811.629 ops/s
# Warmup Iteration  15: 10189707.951 ops/s
# Warmup Iteration  16: 10178911.765 ops/s
# Warmup Iteration  17: 10233845.444 ops/s
# Warmup Iteration  18: 10194742.517 ops/s
# Warmup Iteration  19: 10159223.264 ops/s
# Warmup Iteration  20: 10207725.555 ops/s
# Warmup Iteration  21: 10194382.745 ops/s
# Warmup Iteration  22: 10191837.532 ops/s
# Warmup Iteration  23: 10196266.373 ops/s
# Warmup Iteration  24: 10184412.419 ops/s
# Warmup Iteration  25: 10189454.640 ops/s
# Warmup Iteration  26: 10234026.684 ops/s
# Warmup Iteration  27: 10243215.581 ops/s
# Warmup Iteration  28: 10191998.974 ops/s
# Warmup Iteration  29: 10228688.795 ops/s
# Warmup Iteration  30: 10229866.084 ops/s
Iteration   1: 10166570.402 ops/s
Iteration   2: 10234541.609 ops/s
Iteration   3: 10232310.461 ops/s
Iteration   4: 10177008.287 ops/s
Iteration   5: 10229665.932 ops/s
Iteration   6: 10223908.758 ops/s
Iteration   7: 10248637.127 ops/s
Iteration   8: 10211977.238 ops/s
Iteration   9: 10189408.860 ops/s
Iteration  10: 10261053.133 ops/s
Iteration  11: 10233088.518 ops/s
Iteration  12: 10200440.478 ops/s
Iteration  13: 10177378.902 ops/s
Iteration  14: 10232684.484 ops/s
Iteration  15: 10248276.939 ops/s
Iteration  16: 10210818.645 ops/s
Iteration  17: 10224529.007 ops/s
Iteration  18: 10215267.690 ops/s
Iteration  19: 10150848.981 ops/s
Iteration  20: 10245040.612 ops/s
Iteration  21: 10190772.111 ops/s
Iteration  22: 10198962.820 ops/s
Iteration  23: 10213186.383 ops/s
Iteration  24: 10136203.118 ops/s
Iteration  25: 10210059.385 ops/s
Iteration  26: 10175161.658 ops/s
Iteration  27: 10140549.360 ops/s
Iteration  28: 10207408.521 ops/s
Iteration  29: 10162107.966 ops/s
Iteration  30: 10226211.614 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupBy":
  10205802.633 ±(99.9%) 22136.526 ops/s [Average]
  (min, avg, max) = (10136203.118, 10205802.633, 10261053.133), stdev = 33132.913
  CI (99.9%): [10183666.107, 10227939.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_groupBy  thrpt   30  10205802.633 ± 22136.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1998815.905 ops/s
# Warmup Iteration   2: 4547207.966 ops/s
# Warmup Iteration   3: 3964061.052 ops/s
# Warmup Iteration   4: 4616444.519 ops/s
# Warmup Iteration   5: 4612179.481 ops/s
# Warmup Iteration   6: 4634767.091 ops/s
# Warmup Iteration   7: 4625443.216 ops/s
# Warmup Iteration   8: 4616873.533 ops/s
# Warmup Iteration   9: 4623209.604 ops/s
# Warmup Iteration  10: 4622867.738 ops/s
# Warmup Iteration  11: 4632916.477 ops/s
# Warmup Iteration  12: 4629958.953 ops/s
# Warmup Iteration  13: 4610162.229 ops/s
# Warmup Iteration  14: 4614903.713 ops/s
# Warmup Iteration  15: 4640060.576 ops/s
# Warmup Iteration  16: 4611064.095 ops/s
# Warmup Iteration  17: 4625317.340 ops/s
# Warmup Iteration  18: 4621583.835 ops/s
# Warmup Iteration  19: 4612884.254 ops/s
# Warmup Iteration  20: 4615668.960 ops/s
# Warmup Iteration  21: 4632161.542 ops/s
# Warmup Iteration  22: 4624906.744 ops/s
# Warmup Iteration  23: 4630678.518 ops/s
# Warmup Iteration  24: 4626026.903 ops/s
# Warmup Iteration  25: 4632480.566 ops/s
# Warmup Iteration  26: 4606293.979 ops/s
# Warmup Iteration  27: 4606367.404 ops/s
# Warmup Iteration  28: 4631079.118 ops/s
# Warmup Iteration  29: 4602588.318 ops/s
# Warmup Iteration  30: 4631465.350 ops/s
Iteration   1: 4622857.490 ops/s
Iteration   2: 4621953.049 ops/s
Iteration   3: 4595828.552 ops/s
Iteration   4: 4584046.963 ops/s
Iteration   5: 4628465.616 ops/s
Iteration   6: 4618918.875 ops/s
Iteration   7: 4627376.749 ops/s
Iteration   8: 4603608.546 ops/s
Iteration   9: 4612187.803 ops/s
Iteration  10: 4618521.620 ops/s
Iteration  11: 4645223.815 ops/s
Iteration  12: 4649524.344 ops/s
Iteration  13: 4628004.203 ops/s
Iteration  14: 4636282.515 ops/s
Iteration  15: 4590180.338 ops/s
Iteration  16: 4611200.958 ops/s
Iteration  17: 4607709.592 ops/s
Iteration  18: 4632889.768 ops/s
Iteration  19: 4628123.160 ops/s
Iteration  20: 4613297.866 ops/s
Iteration  21: 4621023.857 ops/s
Iteration  22: 4616933.857 ops/s
Iteration  23: 4622070.299 ops/s
Iteration  24: 4636666.252 ops/s
Iteration  25: 4636964.063 ops/s
Iteration  26: 4628939.431 ops/s
Iteration  27: 4646854.490 ops/s
Iteration  28: 4634936.021 ops/s
Iteration  29: 4630835.798 ops/s
Iteration  30: 4625788.049 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_groupByEach":
  4622573.798 ±(99.9%) 10480.767 ops/s [Average]
  (min, avg, max) = (4584046.963, 4622573.798, 4649524.344), stdev = 15687.120
  CI (99.9%): [4612093.031, 4633054.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_groupByEach  thrpt   30  4622573.798 ± 10480.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54612270.691 ops/s
# Warmup Iteration   2: 110192092.279 ops/s
# Warmup Iteration   3: 108599643.336 ops/s
# Warmup Iteration   4: 128305927.987 ops/s
# Warmup Iteration   5: 129027584.389 ops/s
# Warmup Iteration   6: 129228603.116 ops/s
# Warmup Iteration   7: 129204209.298 ops/s
# Warmup Iteration   8: 128203291.247 ops/s
# Warmup Iteration   9: 128971274.932 ops/s
# Warmup Iteration  10: 129183271.504 ops/s
# Warmup Iteration  11: 129660362.709 ops/s
# Warmup Iteration  12: 128467317.467 ops/s
# Warmup Iteration  13: 129113814.455 ops/s
# Warmup Iteration  14: 128905232.357 ops/s
# Warmup Iteration  15: 129244340.758 ops/s
# Warmup Iteration  16: 129679794.998 ops/s
# Warmup Iteration  17: 128833047.463 ops/s
# Warmup Iteration  18: 128445981.429 ops/s
# Warmup Iteration  19: 128777308.861 ops/s
# Warmup Iteration  20: 129042231.837 ops/s
# Warmup Iteration  21: 129004613.109 ops/s
# Warmup Iteration  22: 128945905.611 ops/s
# Warmup Iteration  23: 129097173.896 ops/s
# Warmup Iteration  24: 129572572.831 ops/s
# Warmup Iteration  25: 128436796.774 ops/s
# Warmup Iteration  26: 129572950.288 ops/s
# Warmup Iteration  27: 128577337.305 ops/s
# Warmup Iteration  28: 128837776.558 ops/s
# Warmup Iteration  29: 128599743.119 ops/s
# Warmup Iteration  30: 128689944.967 ops/s
Iteration   1: 129503702.733 ops/s
Iteration   2: 129196325.559 ops/s
Iteration   3: 129971448.035 ops/s
Iteration   4: 129232882.687 ops/s
Iteration   5: 129707949.117 ops/s
Iteration   6: 129270317.831 ops/s
Iteration   7: 129685314.694 ops/s
Iteration   8: 130357414.705 ops/s
Iteration   9: 129831306.376 ops/s
Iteration  10: 129863887.556 ops/s
Iteration  11: 129082669.502 ops/s
Iteration  12: 129989422.558 ops/s
Iteration  13: 129343478.002 ops/s
Iteration  14: 129815861.335 ops/s
Iteration  15: 129129459.136 ops/s
Iteration  16: 129613261.716 ops/s
Iteration  17: 129258295.712 ops/s
Iteration  18: 128448224.586 ops/s
Iteration  19: 128966434.399 ops/s
Iteration  20: 128470003.326 ops/s
Iteration  21: 129112435.502 ops/s
Iteration  22: 127783119.695 ops/s
Iteration  23: 129425772.676 ops/s
Iteration  24: 129525935.501 ops/s
Iteration  25: 129575461.320 ops/s
Iteration  26: 129692889.845 ops/s
Iteration  27: 128643979.624 ops/s
Iteration  28: 129385823.142 ops/s
Iteration  29: 128869302.978 ops/s
Iteration  30: 129440164.860 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_indexOf":
  129339751.490 ±(99.9%) 355607.215 ops/s [Average]
  (min, avg, max) = (127783119.695, 129339751.490, 130357414.705), stdev = 532256.179
  CI (99.9%): [128984144.275, 129695358.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_indexOf  thrpt   30  129339751.490 ± 355607.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44336096.269 ops/s
# Warmup Iteration   2: 89622017.885 ops/s
# Warmup Iteration   3: 86958117.723 ops/s
# Warmup Iteration   4: 99807597.529 ops/s
# Warmup Iteration   5: 99718713.586 ops/s
# Warmup Iteration   6: 100278870.390 ops/s
# Warmup Iteration   7: 99377179.959 ops/s
# Warmup Iteration   8: 100198423.379 ops/s
# Warmup Iteration   9: 99799419.069 ops/s
# Warmup Iteration  10: 99796475.578 ops/s
# Warmup Iteration  11: 100253264.965 ops/s
# Warmup Iteration  12: 100137252.049 ops/s
# Warmup Iteration  13: 99875757.076 ops/s
# Warmup Iteration  14: 99934163.221 ops/s
# Warmup Iteration  15: 100243217.061 ops/s
# Warmup Iteration  16: 99477095.181 ops/s
# Warmup Iteration  17: 100494502.277 ops/s
# Warmup Iteration  18: 99773148.094 ops/s
# Warmup Iteration  19: 99884156.147 ops/s
# Warmup Iteration  20: 100002544.409 ops/s
# Warmup Iteration  21: 100204168.960 ops/s
# Warmup Iteration  22: 99828984.341 ops/s
# Warmup Iteration  23: 99648682.143 ops/s
# Warmup Iteration  24: 100276502.053 ops/s
# Warmup Iteration  25: 99763634.931 ops/s
# Warmup Iteration  26: 99795196.808 ops/s
# Warmup Iteration  27: 99776434.970 ops/s
# Warmup Iteration  28: 99120401.288 ops/s
# Warmup Iteration  29: 99905804.131 ops/s
# Warmup Iteration  30: 100259625.909 ops/s
Iteration   1: 100021117.638 ops/s
Iteration   2: 99685134.385 ops/s
Iteration   3: 98844259.154 ops/s
Iteration   4: 99362309.540 ops/s
Iteration   5: 99880548.538 ops/s
Iteration   6: 100072549.945 ops/s
Iteration   7: 100402381.009 ops/s
Iteration   8: 100762131.859 ops/s
Iteration   9: 99453886.239 ops/s
Iteration  10: 99558043.200 ops/s
Iteration  11: 99903091.041 ops/s
Iteration  12: 99957640.569 ops/s
Iteration  13: 100098696.035 ops/s
Iteration  14: 99917627.392 ops/s
Iteration  15: 100357102.544 ops/s
Iteration  16: 100133128.169 ops/s
Iteration  17: 99466193.854 ops/s
Iteration  18: 99849428.187 ops/s
Iteration  19: 99468877.124 ops/s
Iteration  20: 100601808.675 ops/s
Iteration  21: 100135148.869 ops/s
Iteration  22: 100414604.573 ops/s
Iteration  23: 100378848.975 ops/s
Iteration  24: 99797166.708 ops/s
Iteration  25: 100283413.469 ops/s
Iteration  26: 100394791.236 ops/s
Iteration  27: 100267112.330 ops/s
Iteration  28: 99971469.714 ops/s
Iteration  29: 99830669.188 ops/s
Iteration  30: 100370968.473 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectInto":
  99988004.954 ±(99.9%) 279293.886 ops/s [Average]
  (min, avg, max) = (98844259.154, 99988004.954, 100762131.859), stdev = 418033.972
  CI (99.9%): [99708711.068, 100267298.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_injectInto  thrpt   30  99988004.954 ± 279293.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149736895.295 ops/s
# Warmup Iteration   2: 302044143.317 ops/s
# Warmup Iteration   3: 265098983.925 ops/s
# Warmup Iteration   4: 310439291.521 ops/s
# Warmup Iteration   5: 308393483.540 ops/s
# Warmup Iteration   6: 309099314.569 ops/s
# Warmup Iteration   7: 309318356.606 ops/s
# Warmup Iteration   8: 309570432.983 ops/s
# Warmup Iteration   9: 310042583.070 ops/s
# Warmup Iteration  10: 310026311.738 ops/s
# Warmup Iteration  11: 309853754.797 ops/s
# Warmup Iteration  12: 307837597.238 ops/s
# Warmup Iteration  13: 307511423.162 ops/s
# Warmup Iteration  14: 310634641.625 ops/s
# Warmup Iteration  15: 310483071.983 ops/s
# Warmup Iteration  16: 309430675.362 ops/s
# Warmup Iteration  17: 310784228.312 ops/s
# Warmup Iteration  18: 309552862.099 ops/s
# Warmup Iteration  19: 306775566.862 ops/s
# Warmup Iteration  20: 309586144.405 ops/s
# Warmup Iteration  21: 310139955.463 ops/s
# Warmup Iteration  22: 310004531.184 ops/s
# Warmup Iteration  23: 308162236.066 ops/s
# Warmup Iteration  24: 309734188.578 ops/s
# Warmup Iteration  25: 307089380.693 ops/s
# Warmup Iteration  26: 310320943.945 ops/s
# Warmup Iteration  27: 310311814.540 ops/s
# Warmup Iteration  28: 307706434.074 ops/s
# Warmup Iteration  29: 309899145.329 ops/s
# Warmup Iteration  30: 309526277.818 ops/s
Iteration   1: 310620812.713 ops/s
Iteration   2: 310484945.080 ops/s
Iteration   3: 310546976.662 ops/s
Iteration   4: 309964118.079 ops/s
Iteration   5: 310483562.901 ops/s
Iteration   6: 309493893.411 ops/s
Iteration   7: 309421866.332 ops/s
Iteration   8: 311007297.806 ops/s
Iteration   9: 310758185.723 ops/s
Iteration  10: 308785097.753 ops/s
Iteration  11: 310887807.302 ops/s
Iteration  12: 310319471.590 ops/s
Iteration  13: 310991071.499 ops/s
Iteration  14: 310197801.251 ops/s
Iteration  15: 309890656.798 ops/s
Iteration  16: 309953165.450 ops/s
Iteration  17: 308148869.822 ops/s
Iteration  18: 309516743.143 ops/s
Iteration  19: 308749559.747 ops/s
Iteration  20: 310203760.096 ops/s
Iteration  21: 309962498.877 ops/s
Iteration  22: 308947645.855 ops/s
Iteration  23: 308173186.259 ops/s
Iteration  24: 308895436.788 ops/s
Iteration  25: 309713494.404 ops/s
Iteration  26: 308960601.311 ops/s
Iteration  27: 309813262.207 ops/s
Iteration  28: 309520676.901 ops/s
Iteration  29: 308295088.549 ops/s
Iteration  30: 309090158.928 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoDouble":
  309726590.441 ±(99.9%) 562921.188 ops/s [Average]
  (min, avg, max) = (308148869.822, 309726590.441, 311007297.806), stdev = 842553.998
  CI (99.9%): [309163669.253, 310289511.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  309726590.441 ± 562921.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148495254.757 ops/s
# Warmup Iteration   2: 302013325.971 ops/s
# Warmup Iteration   3: 265772150.581 ops/s
# Warmup Iteration   4: 309689425.367 ops/s
# Warmup Iteration   5: 308359363.625 ops/s
# Warmup Iteration   6: 310829197.362 ops/s
# Warmup Iteration   7: 310422748.654 ops/s
# Warmup Iteration   8: 310711019.683 ops/s
# Warmup Iteration   9: 309719252.573 ops/s
# Warmup Iteration  10: 310999824.692 ops/s
# Warmup Iteration  11: 309438831.860 ops/s
# Warmup Iteration  12: 310314710.361 ops/s
# Warmup Iteration  13: 310186277.463 ops/s
# Warmup Iteration  14: 310093059.191 ops/s
# Warmup Iteration  15: 310250735.939 ops/s
# Warmup Iteration  16: 309796698.159 ops/s
# Warmup Iteration  17: 309653313.270 ops/s
# Warmup Iteration  18: 308795421.908 ops/s
# Warmup Iteration  19: 310781424.657 ops/s
# Warmup Iteration  20: 309017943.741 ops/s
# Warmup Iteration  21: 310170893.417 ops/s
# Warmup Iteration  22: 309458583.121 ops/s
# Warmup Iteration  23: 309834449.255 ops/s
# Warmup Iteration  24: 307747047.726 ops/s
# Warmup Iteration  25: 308754343.785 ops/s
# Warmup Iteration  26: 309668807.565 ops/s
# Warmup Iteration  27: 309679768.507 ops/s
# Warmup Iteration  28: 308625331.326 ops/s
# Warmup Iteration  29: 306954719.240 ops/s
# Warmup Iteration  30: 307140352.728 ops/s
Iteration   1: 310509210.549 ops/s
Iteration   2: 308681354.116 ops/s
Iteration   3: 309481730.890 ops/s
Iteration   4: 310803870.361 ops/s
Iteration   5: 308918550.020 ops/s
Iteration   6: 308996518.935 ops/s
Iteration   7: 308749967.536 ops/s
Iteration   8: 309254868.336 ops/s
Iteration   9: 309377086.640 ops/s
Iteration  10: 310377736.539 ops/s
Iteration  11: 311299064.803 ops/s
Iteration  12: 309771571.420 ops/s
Iteration  13: 311336053.885 ops/s
Iteration  14: 309709995.944 ops/s
Iteration  15: 309225927.938 ops/s
Iteration  16: 312130176.366 ops/s
Iteration  17: 308237630.653 ops/s
Iteration  18: 308957559.036 ops/s
Iteration  19: 308307197.299 ops/s
Iteration  20: 307873008.888 ops/s
Iteration  21: 308360445.951 ops/s
Iteration  22: 309884000.703 ops/s
Iteration  23: 310821670.384 ops/s
Iteration  24: 310316866.733 ops/s
Iteration  25: 310144671.318 ops/s
Iteration  26: 309644843.082 ops/s
Iteration  27: 307743274.618 ops/s
Iteration  28: 309516451.883 ops/s
Iteration  29: 309700859.670 ops/s
Iteration  30: 310778256.192 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoFloat":
  309630347.356 ±(99.9%) 719287.464 ops/s [Average]
  (min, avg, max) = (307743274.618, 309630347.356, 312130176.366), stdev = 1076595.696
  CI (99.9%): [308911059.892, 310349634.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  309630347.356 ± 719287.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148673147.705 ops/s
# Warmup Iteration   2: 302522699.738 ops/s
# Warmup Iteration   3: 265263533.824 ops/s
# Warmup Iteration   4: 310274221.801 ops/s
# Warmup Iteration   5: 308483568.361 ops/s
# Warmup Iteration   6: 310092953.906 ops/s
# Warmup Iteration   7: 307645946.938 ops/s
# Warmup Iteration   8: 309461595.752 ops/s
# Warmup Iteration   9: 308523559.189 ops/s
# Warmup Iteration  10: 309859868.227 ops/s
# Warmup Iteration  11: 309780679.275 ops/s
# Warmup Iteration  12: 309448484.414 ops/s
# Warmup Iteration  13: 308211350.680 ops/s
# Warmup Iteration  14: 307970751.042 ops/s
# Warmup Iteration  15: 310918964.263 ops/s
# Warmup Iteration  16: 305964660.239 ops/s
# Warmup Iteration  17: 309789401.564 ops/s
# Warmup Iteration  18: 308363722.526 ops/s
# Warmup Iteration  19: 308676065.239 ops/s
# Warmup Iteration  20: 307767780.198 ops/s
# Warmup Iteration  21: 307359821.372 ops/s
# Warmup Iteration  22: 310098989.116 ops/s
# Warmup Iteration  23: 309163539.784 ops/s
# Warmup Iteration  24: 309629656.546 ops/s
# Warmup Iteration  25: 308226440.408 ops/s
# Warmup Iteration  26: 309161034.035 ops/s
# Warmup Iteration  27: 309312292.716 ops/s
# Warmup Iteration  28: 307861846.548 ops/s
# Warmup Iteration  29: 309197469.503 ops/s
# Warmup Iteration  30: 310402178.948 ops/s
Iteration   1: 306275157.801 ops/s
Iteration   2: 310035539.735 ops/s
Iteration   3: 309162190.591 ops/s
Iteration   4: 308434818.465 ops/s
Iteration   5: 309363903.984 ops/s
Iteration   6: 309865715.057 ops/s
Iteration   7: 307150166.973 ops/s
Iteration   8: 308668889.426 ops/s
Iteration   9: 308505746.699 ops/s
Iteration  10: 308242228.608 ops/s
Iteration  11: 308688882.232 ops/s
Iteration  12: 310548616.640 ops/s
Iteration  13: 310422738.146 ops/s
Iteration  14: 309374725.589 ops/s
Iteration  15: 309879462.936 ops/s
Iteration  16: 308971263.422 ops/s
Iteration  17: 307642369.367 ops/s
Iteration  18: 308377136.888 ops/s
Iteration  19: 309770450.755 ops/s
Iteration  20: 307315953.067 ops/s
Iteration  21: 307545774.329 ops/s
Iteration  22: 307946657.991 ops/s
Iteration  23: 308890650.326 ops/s
Iteration  24: 310210086.315 ops/s
Iteration  25: 308165545.234 ops/s
Iteration  26: 307630860.647 ops/s
Iteration  27: 308796885.041 ops/s
Iteration  28: 306360227.983 ops/s
Iteration  29: 308384497.273 ops/s
Iteration  30: 306821442.161 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoInt":
  308581619.456 ±(99.9%) 778001.551 ops/s [Average]
  (min, avg, max) = (306275157.801, 308581619.456, 310548616.640), stdev = 1164476.184
  CI (99.9%): [307803617.905, 309359621.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_injectIntoInt  thrpt   30  308581619.456 ± 778001.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151834178.181 ops/s
# Warmup Iteration   2: 301244234.306 ops/s
# Warmup Iteration   3: 267447974.480 ops/s
# Warmup Iteration   4: 314048936.492 ops/s
# Warmup Iteration   5: 311162561.796 ops/s
# Warmup Iteration   6: 310962889.368 ops/s
# Warmup Iteration   7: 311557963.640 ops/s
# Warmup Iteration   8: 313551798.281 ops/s
# Warmup Iteration   9: 312474570.063 ops/s
# Warmup Iteration  10: 314057138.488 ops/s
# Warmup Iteration  11: 311457327.659 ops/s
# Warmup Iteration  12: 312444813.911 ops/s
# Warmup Iteration  13: 311571709.632 ops/s
# Warmup Iteration  14: 312683507.539 ops/s
# Warmup Iteration  15: 312156568.194 ops/s
# Warmup Iteration  16: 312939057.921 ops/s
# Warmup Iteration  17: 311531370.009 ops/s
# Warmup Iteration  18: 313353451.930 ops/s
# Warmup Iteration  19: 312287642.186 ops/s
# Warmup Iteration  20: 312273398.987 ops/s
# Warmup Iteration  21: 311975036.585 ops/s
# Warmup Iteration  22: 309520779.538 ops/s
# Warmup Iteration  23: 312613748.914 ops/s
# Warmup Iteration  24: 313102717.533 ops/s
# Warmup Iteration  25: 312670790.961 ops/s
# Warmup Iteration  26: 312911349.571 ops/s
# Warmup Iteration  27: 310992698.617 ops/s
# Warmup Iteration  28: 310441018.344 ops/s
# Warmup Iteration  29: 313044144.478 ops/s
# Warmup Iteration  30: 311544757.754 ops/s
Iteration   1: 309487380.014 ops/s
Iteration   2: 312399977.291 ops/s
Iteration   3: 314526660.095 ops/s
Iteration   4: 312484320.914 ops/s
Iteration   5: 310980274.937 ops/s
Iteration   6: 313053315.345 ops/s
Iteration   7: 312549272.658 ops/s
Iteration   8: 312967977.592 ops/s
Iteration   9: 311488677.498 ops/s
Iteration  10: 312416275.291 ops/s
Iteration  11: 314451583.677 ops/s
Iteration  12: 312977485.417 ops/s
Iteration  13: 310487215.197 ops/s
Iteration  14: 312045127.823 ops/s
Iteration  15: 313080301.780 ops/s
Iteration  16: 313423024.879 ops/s
Iteration  17: 312920957.250 ops/s
Iteration  18: 312725683.643 ops/s
Iteration  19: 314741331.932 ops/s
Iteration  20: 313619785.085 ops/s
Iteration  21: 310181262.861 ops/s
Iteration  22: 312897685.353 ops/s
Iteration  23: 310400202.262 ops/s
Iteration  24: 312536356.572 ops/s
Iteration  25: 311287444.791 ops/s
Iteration  26: 313272147.647 ops/s
Iteration  27: 314017494.731 ops/s
Iteration  28: 313164458.315 ops/s
Iteration  29: 311224368.291 ops/s
Iteration  30: 309469438.637 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_injectIntoLong":
  312375916.259 ±(99.9%) 946118.027 ops/s [Average]
  (min, avg, max) = (309469438.637, 312375916.259, 314741331.932), stdev = 1416105.030
  CI (99.9%): [311429798.232, 313322034.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_injectIntoLong  thrpt   30  312375916.259 ± 946118.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149448420.436 ops/s
# Warmup Iteration   2: 301288394.886 ops/s
# Warmup Iteration   3: 266521391.841 ops/s
# Warmup Iteration   4: 312932000.098 ops/s
# Warmup Iteration   5: 311816901.180 ops/s
# Warmup Iteration   6: 313572161.985 ops/s
# Warmup Iteration   7: 310697125.815 ops/s
# Warmup Iteration   8: 313069753.215 ops/s
# Warmup Iteration   9: 313611872.575 ops/s
# Warmup Iteration  10: 312850623.414 ops/s
# Warmup Iteration  11: 312063274.788 ops/s
# Warmup Iteration  12: 311563830.453 ops/s
# Warmup Iteration  13: 311695141.046 ops/s
# Warmup Iteration  14: 310686262.741 ops/s
# Warmup Iteration  15: 311237105.256 ops/s
# Warmup Iteration  16: 310731534.699 ops/s
# Warmup Iteration  17: 309730782.725 ops/s
# Warmup Iteration  18: 312309068.718 ops/s
# Warmup Iteration  19: 312754666.378 ops/s
# Warmup Iteration  20: 311205405.162 ops/s
# Warmup Iteration  21: 311758145.372 ops/s
# Warmup Iteration  22: 312845962.301 ops/s
# Warmup Iteration  23: 312263039.397 ops/s
# Warmup Iteration  24: 313022042.633 ops/s
# Warmup Iteration  25: 308716611.935 ops/s
# Warmup Iteration  26: 311559909.415 ops/s
# Warmup Iteration  27: 310865424.455 ops/s
# Warmup Iteration  28: 312710791.603 ops/s
# Warmup Iteration  29: 312418278.224 ops/s
# Warmup Iteration  30: 312543274.103 ops/s
Iteration   1: 311973092.366 ops/s
Iteration   2: 309913987.962 ops/s
Iteration   3: 310500405.603 ops/s
Iteration   4: 314044336.789 ops/s
Iteration   5: 311993258.462 ops/s
Iteration   6: 313634694.356 ops/s
Iteration   7: 313916283.174 ops/s
Iteration   8: 312962227.306 ops/s
Iteration   9: 313232880.531 ops/s
Iteration  10: 313139020.738 ops/s
Iteration  11: 314067664.942 ops/s
Iteration  12: 310457272.779 ops/s
Iteration  13: 313482253.752 ops/s
Iteration  14: 312634959.508 ops/s
Iteration  15: 313520360.636 ops/s
Iteration  16: 313935784.681 ops/s
Iteration  17: 312343594.515 ops/s
Iteration  18: 313906643.997 ops/s
Iteration  19: 311730427.738 ops/s
Iteration  20: 310194373.554 ops/s
Iteration  21: 313579121.231 ops/s
Iteration  22: 311128217.832 ops/s
Iteration  23: 313038223.976 ops/s
Iteration  24: 310870709.970 ops/s
Iteration  25: 311870144.747 ops/s
Iteration  26: 310283010.049 ops/s
Iteration  27: 311553461.578 ops/s
Iteration  28: 309632614.232 ops/s
Iteration  29: 312067053.565 ops/s
Iteration  30: 312216949.165 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_isEmpty":
  312260767.658 ±(99.9%) 925562.456 ops/s [Average]
  (min, avg, max) = (309632614.232, 312260767.658, 314067664.942), stdev = 1385338.417
  CI (99.9%): [311335205.201, 313186330.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_isEmpty  thrpt   30  312260767.658 ± 925562.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 376434.187 ops/s
# Warmup Iteration   2: 401384.964 ops/s
# Warmup Iteration   3: 466435.110 ops/s
# Warmup Iteration   4: 499552.914 ops/s
# Warmup Iteration   5: 496591.238 ops/s
# Warmup Iteration   6: 495710.530 ops/s
# Warmup Iteration   7: 496454.657 ops/s
# Warmup Iteration   8: 496701.262 ops/s
# Warmup Iteration   9: 498824.023 ops/s
# Warmup Iteration  10: 498631.051 ops/s
# Warmup Iteration  11: 497690.547 ops/s
# Warmup Iteration  12: 497533.721 ops/s
# Warmup Iteration  13: 494992.548 ops/s
# Warmup Iteration  14: 435078.956 ops/s
# Warmup Iteration  15: 484463.207 ops/s
# Warmup Iteration  16: 494720.207 ops/s
# Warmup Iteration  17: 525156.773 ops/s
# Warmup Iteration  18: 528430.742 ops/s
# Warmup Iteration  19: 527452.292 ops/s
# Warmup Iteration  20: 528497.231 ops/s
# Warmup Iteration  21: 529630.444 ops/s
# Warmup Iteration  22: 528342.548 ops/s
# Warmup Iteration  23: 530371.346 ops/s
# Warmup Iteration  24: 528650.243 ops/s
# Warmup Iteration  25: 528643.296 ops/s
# Warmup Iteration  26: 530149.183 ops/s
# Warmup Iteration  27: 530625.298 ops/s
# Warmup Iteration  28: 527799.590 ops/s
# Warmup Iteration  29: 526719.373 ops/s
# Warmup Iteration  30: 529747.149 ops/s
Iteration   1: 528132.437 ops/s
Iteration   2: 526790.719 ops/s
Iteration   3: 529295.822 ops/s
Iteration   4: 529647.865 ops/s
Iteration   5: 527969.361 ops/s
Iteration   6: 528743.173 ops/s
Iteration   7: 529224.999 ops/s
Iteration   8: 530111.270 ops/s
Iteration   9: 531304.477 ops/s
Iteration  10: 532013.518 ops/s
Iteration  11: 529654.573 ops/s
Iteration  12: 528275.949 ops/s
Iteration  13: 529294.717 ops/s
Iteration  14: 529947.383 ops/s
Iteration  15: 528103.442 ops/s
Iteration  16: 530832.381 ops/s
Iteration  17: 524554.733 ops/s
Iteration  18: 530617.534 ops/s
Iteration  19: 528930.587 ops/s
Iteration  20: 528300.208 ops/s
Iteration  21: 528971.997 ops/s
Iteration  22: 526341.312 ops/s
Iteration  23: 526227.582 ops/s
Iteration  24: 529737.794 ops/s
Iteration  25: 528536.317 ops/s
Iteration  26: 527515.503 ops/s
Iteration  27: 527647.820 ops/s
Iteration  28: 529480.300 ops/s
Iteration  29: 528928.873 ops/s
Iteration  30: 530266.105 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iterator":
  528846.625 ±(99.9%) 1057.083 ops/s [Average]
  (min, avg, max) = (524554.733, 528846.625, 532013.518), stdev = 1582.191
  CI (99.9%): [527789.543, 529903.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_iterator  thrpt   30  528846.625 ± 1057.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 730885.371 ops/s
# Warmup Iteration   2: 781532.864 ops/s
# Warmup Iteration   3: 1000882.657 ops/s
# Warmup Iteration   4: 992837.534 ops/s
# Warmup Iteration   5: 991234.159 ops/s
# Warmup Iteration   6: 994230.616 ops/s
# Warmup Iteration   7: 995322.842 ops/s
# Warmup Iteration   8: 990525.095 ops/s
# Warmup Iteration   9: 995545.518 ops/s
# Warmup Iteration  10: 997814.228 ops/s
# Warmup Iteration  11: 998298.660 ops/s
# Warmup Iteration  12: 847877.757 ops/s
# Warmup Iteration  13: 988883.899 ops/s
# Warmup Iteration  14: 991831.989 ops/s
# Warmup Iteration  15: 995996.648 ops/s
# Warmup Iteration  16: 992277.563 ops/s
# Warmup Iteration  17: 1054648.298 ops/s
# Warmup Iteration  18: 1052419.794 ops/s
# Warmup Iteration  19: 1055290.615 ops/s
# Warmup Iteration  20: 1053693.944 ops/s
# Warmup Iteration  21: 1051537.792 ops/s
# Warmup Iteration  22: 1049906.760 ops/s
# Warmup Iteration  23: 1054474.597 ops/s
# Warmup Iteration  24: 1053784.407 ops/s
# Warmup Iteration  25: 1054128.469 ops/s
# Warmup Iteration  26: 1054310.749 ops/s
# Warmup Iteration  27: 1042350.967 ops/s
# Warmup Iteration  28: 1046565.541 ops/s
# Warmup Iteration  29: 1051247.353 ops/s
# Warmup Iteration  30: 1052233.139 ops/s
Iteration   1: 1058395.728 ops/s
Iteration   2: 1059133.906 ops/s
Iteration   3: 1058847.911 ops/s
Iteration   4: 1052888.960 ops/s
Iteration   5: 1055103.999 ops/s
Iteration   6: 1051149.684 ops/s
Iteration   7: 1041905.329 ops/s
Iteration   8: 1045355.360 ops/s
Iteration   9: 1047873.450 ops/s
Iteration  10: 1057579.010 ops/s
Iteration  11: 1051727.796 ops/s
Iteration  12: 1053440.882 ops/s
Iteration  13: 1044341.997 ops/s
Iteration  14: 1047645.951 ops/s
Iteration  15: 1051083.758 ops/s
Iteration  16: 1048414.485 ops/s
Iteration  17: 1054326.103 ops/s
Iteration  18: 1055386.900 ops/s
Iteration  19: 1044877.859 ops/s
Iteration  20: 1053358.876 ops/s
Iteration  21: 1054277.491 ops/s
Iteration  22: 1060304.904 ops/s
Iteration  23: 1050849.195 ops/s
Iteration  24: 1054419.635 ops/s
Iteration  25: 1053252.760 ops/s
Iteration  26: 1051419.961 ops/s
Iteration  27: 1046362.183 ops/s
Iteration  28: 1055829.699 ops/s
Iteration  29: 1051644.424 ops/s
Iteration  30: 1058166.233 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_iteratorRemove":
  1052312.148 ±(99.9%) 3215.832 ops/s [Average]
  (min, avg, max) = (1041905.329, 1052312.148, 1060304.904), stdev = 4813.306
  CI (99.9%): [1049096.316, 1055527.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1052312.148 ± 3215.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53309157.348 ops/s
# Warmup Iteration   2: 111370593.789 ops/s
# Warmup Iteration   3: 107180565.569 ops/s
# Warmup Iteration   4: 129213200.550 ops/s
# Warmup Iteration   5: 129966507.966 ops/s
# Warmup Iteration   6: 129868290.030 ops/s
# Warmup Iteration   7: 129721289.965 ops/s
# Warmup Iteration   8: 128634497.328 ops/s
# Warmup Iteration   9: 130285164.209 ops/s
# Warmup Iteration  10: 130108325.408 ops/s
# Warmup Iteration  11: 129194345.254 ops/s
# Warmup Iteration  12: 128982113.231 ops/s
# Warmup Iteration  13: 128797660.857 ops/s
# Warmup Iteration  14: 129579666.557 ops/s
# Warmup Iteration  15: 129532422.038 ops/s
# Warmup Iteration  16: 129562612.398 ops/s
# Warmup Iteration  17: 128240590.235 ops/s
# Warmup Iteration  18: 127660173.129 ops/s
# Warmup Iteration  19: 128461787.153 ops/s
# Warmup Iteration  20: 128389514.807 ops/s
# Warmup Iteration  21: 128012503.157 ops/s
# Warmup Iteration  22: 126846087.201 ops/s
# Warmup Iteration  23: 128501943.107 ops/s
# Warmup Iteration  24: 128780037.220 ops/s
# Warmup Iteration  25: 129125312.739 ops/s
# Warmup Iteration  26: 128977990.395 ops/s
# Warmup Iteration  27: 127998099.351 ops/s
# Warmup Iteration  28: 127893927.551 ops/s
# Warmup Iteration  29: 126472288.204 ops/s
# Warmup Iteration  30: 127849373.702 ops/s
Iteration   1: 128837507.711 ops/s
Iteration   2: 128102709.622 ops/s
Iteration   3: 128256350.265 ops/s
Iteration   4: 128127790.191 ops/s
Iteration   5: 125200425.768 ops/s
Iteration   6: 127988890.136 ops/s
Iteration   7: 127726460.062 ops/s
Iteration   8: 129012846.992 ops/s
Iteration   9: 127691100.658 ops/s
Iteration  10: 127970078.807 ops/s
Iteration  11: 128132874.644 ops/s
Iteration  12: 126871736.224 ops/s
Iteration  13: 129199343.102 ops/s
Iteration  14: 128760851.443 ops/s
Iteration  15: 129364108.618 ops/s
Iteration  16: 128351286.695 ops/s
Iteration  17: 128622772.678 ops/s
Iteration  18: 128306121.589 ops/s
Iteration  19: 127590634.482 ops/s
Iteration  20: 128230685.505 ops/s
Iteration  21: 127682628.884 ops/s
Iteration  22: 129152794.689 ops/s
Iteration  23: 128034802.296 ops/s
Iteration  24: 127658435.060 ops/s
Iteration  25: 128158846.415 ops/s
Iteration  26: 127578835.312 ops/s
Iteration  27: 128260106.837 ops/s
Iteration  28: 126648653.552 ops/s
Iteration  29: 128612183.507 ops/s
Iteration  30: 127720330.394 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_lastIndexOf":
  128061739.738 ±(99.9%) 552137.578 ops/s [Average]
  (min, avg, max) = (125200425.768, 128061739.738, 129364108.618), stdev = 826413.597
  CI (99.9%): [127509602.160, 128613877.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_lastIndexOf  thrpt   30  128061739.738 ± 552137.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 179982.844 ops/s
# Warmup Iteration   2: 194715.218 ops/s
# Warmup Iteration   3: 226539.658 ops/s
# Warmup Iteration   4: 243667.724 ops/s
# Warmup Iteration   5: 244131.551 ops/s
# Warmup Iteration   6: 241720.402 ops/s
# Warmup Iteration   7: 242231.915 ops/s
# Warmup Iteration   8: 243197.164 ops/s
# Warmup Iteration   9: 243904.657 ops/s
# Warmup Iteration  10: 242632.357 ops/s
# Warmup Iteration  11: 242943.731 ops/s
# Warmup Iteration  12: 242507.704 ops/s
# Warmup Iteration  13: 238862.903 ops/s
# Warmup Iteration  14: 211500.938 ops/s
# Warmup Iteration  15: 244820.161 ops/s
# Warmup Iteration  16: 245408.133 ops/s
# Warmup Iteration  17: 263212.279 ops/s
# Warmup Iteration  18: 262259.456 ops/s
# Warmup Iteration  19: 261536.546 ops/s
# Warmup Iteration  20: 263430.674 ops/s
# Warmup Iteration  21: 262390.621 ops/s
# Warmup Iteration  22: 261643.865 ops/s
# Warmup Iteration  23: 262292.319 ops/s
# Warmup Iteration  24: 258875.995 ops/s
# Warmup Iteration  25: 262203.188 ops/s
# Warmup Iteration  26: 262434.602 ops/s
# Warmup Iteration  27: 262565.008 ops/s
# Warmup Iteration  28: 263200.305 ops/s
# Warmup Iteration  29: 262293.945 ops/s
# Warmup Iteration  30: 260569.923 ops/s
Iteration   1: 259915.481 ops/s
Iteration   2: 261781.644 ops/s
Iteration   3: 262080.975 ops/s
Iteration   4: 262485.092 ops/s
Iteration   5: 262957.853 ops/s
Iteration   6: 261390.078 ops/s
Iteration   7: 261793.894 ops/s
Iteration   8: 262974.827 ops/s
Iteration   9: 261442.191 ops/s
Iteration  10: 258234.850 ops/s
Iteration  11: 260097.276 ops/s
Iteration  12: 261059.314 ops/s
Iteration  13: 261623.375 ops/s
Iteration  14: 261319.852 ops/s
Iteration  15: 259930.579 ops/s
Iteration  16: 260824.403 ops/s
Iteration  17: 261088.547 ops/s
Iteration  18: 258958.441 ops/s
Iteration  19: 259259.868 ops/s
Iteration  20: 261418.893 ops/s
Iteration  21: 262968.756 ops/s
Iteration  22: 263336.848 ops/s
Iteration  23: 261022.970 ops/s
Iteration  24: 263113.183 ops/s
Iteration  25: 263020.945 ops/s
Iteration  26: 262138.460 ops/s
Iteration  27: 262531.473 ops/s
Iteration  28: 263482.737 ops/s
Iteration  29: 262506.716 ops/s
Iteration  30: 261151.248 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator":
  261530.359 ±(99.9%) 902.603 ops/s [Average]
  (min, avg, max) = (258234.850, 261530.359, 263482.737), stdev = 1350.973
  CI (99.9%): [260627.756, 262432.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_listIterator  thrpt   30  261530.359 ± 902.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762039.217 ops/s
# Warmup Iteration   2: 807645.773 ops/s
# Warmup Iteration   3: 970721.742 ops/s
# Warmup Iteration   4: 1029092.526 ops/s
# Warmup Iteration   5: 1033170.177 ops/s
# Warmup Iteration   6: 1028532.950 ops/s
# Warmup Iteration   7: 1035546.055 ops/s
# Warmup Iteration   8: 1032169.780 ops/s
# Warmup Iteration   9: 1025885.211 ops/s
# Warmup Iteration  10: 1025943.852 ops/s
# Warmup Iteration  11: 1029640.894 ops/s
# Warmup Iteration  12: 1027708.211 ops/s
# Warmup Iteration  13: 922477.262 ops/s
# Warmup Iteration  14: 968360.318 ops/s
# Warmup Iteration  15: 1023628.930 ops/s
# Warmup Iteration  16: 1034155.304 ops/s
# Warmup Iteration  17: 1100145.779 ops/s
# Warmup Iteration  18: 1086886.835 ops/s
# Warmup Iteration  19: 1097636.142 ops/s
# Warmup Iteration  20: 1095848.121 ops/s
# Warmup Iteration  21: 1098778.915 ops/s
# Warmup Iteration  22: 1100484.567 ops/s
# Warmup Iteration  23: 1097276.102 ops/s
# Warmup Iteration  24: 1101750.700 ops/s
# Warmup Iteration  25: 1092274.099 ops/s
# Warmup Iteration  26: 1090551.298 ops/s
# Warmup Iteration  27: 1098734.352 ops/s
# Warmup Iteration  28: 1098131.906 ops/s
# Warmup Iteration  29: 1098697.195 ops/s
# Warmup Iteration  30: 1092942.860 ops/s
Iteration   1: 1091150.627 ops/s
Iteration   2: 1084074.882 ops/s
Iteration   3: 1096175.644 ops/s
Iteration   4: 1094188.969 ops/s
Iteration   5: 1098265.519 ops/s
Iteration   6: 1081257.094 ops/s
Iteration   7: 1092294.997 ops/s
Iteration   8: 1092114.693 ops/s
Iteration   9: 1102195.389 ops/s
Iteration  10: 1100361.072 ops/s
Iteration  11: 1089817.362 ops/s
Iteration  12: 1093905.736 ops/s
Iteration  13: 1087983.122 ops/s
Iteration  14: 1083545.838 ops/s
Iteration  15: 1090769.029 ops/s
Iteration  16: 1093957.642 ops/s
Iteration  17: 1098907.317 ops/s
Iteration  18: 1100712.277 ops/s
Iteration  19: 1095045.748 ops/s
Iteration  20: 1100911.930 ops/s
Iteration  21: 1101090.736 ops/s
Iteration  22: 1100458.544 ops/s
Iteration  23: 1104418.215 ops/s
Iteration  24: 1097876.737 ops/s
Iteration  25: 1096199.243 ops/s
Iteration  26: 1095910.774 ops/s
Iteration  27: 1102173.354 ops/s
Iteration  28: 1100530.486 ops/s
Iteration  29: 1098763.415 ops/s
Iteration  30: 1099306.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize":
  1095478.748 ±(99.9%) 3955.032 ops/s [Average]
  (min, avg, max) = (1081257.094, 1095478.748, 1104418.215), stdev = 5919.706
  CI (99.9%): [1091523.717, 1099433.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsGreaterThanSize  thrpt   30  1095478.748 ± 3955.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758163.596 ops/s
# Warmup Iteration   2: 718156.588 ops/s
# Warmup Iteration   3: 962472.781 ops/s
# Warmup Iteration   4: 1038417.123 ops/s
# Warmup Iteration   5: 1040709.466 ops/s
# Warmup Iteration   6: 1038721.142 ops/s
# Warmup Iteration   7: 1045764.858 ops/s
# Warmup Iteration   8: 1039029.957 ops/s
# Warmup Iteration   9: 1036916.390 ops/s
# Warmup Iteration  10: 1041772.593 ops/s
# Warmup Iteration  11: 1039184.861 ops/s
# Warmup Iteration  12: 1038482.515 ops/s
# Warmup Iteration  13: 938750.538 ops/s
# Warmup Iteration  14: 985888.130 ops/s
# Warmup Iteration  15: 1042017.691 ops/s
# Warmup Iteration  16: 1036619.317 ops/s
# Warmup Iteration  17: 1083258.787 ops/s
# Warmup Iteration  18: 1095185.024 ops/s
# Warmup Iteration  19: 1086631.942 ops/s
# Warmup Iteration  20: 1092823.434 ops/s
# Warmup Iteration  21: 1090393.268 ops/s
# Warmup Iteration  22: 1096159.396 ops/s
# Warmup Iteration  23: 1094563.187 ops/s
# Warmup Iteration  24: 1086208.836 ops/s
# Warmup Iteration  25: 1086432.106 ops/s
# Warmup Iteration  26: 1090252.814 ops/s
# Warmup Iteration  27: 1087843.284 ops/s
# Warmup Iteration  28: 1092295.819 ops/s
# Warmup Iteration  29: 1089573.574 ops/s
# Warmup Iteration  30: 1088857.774 ops/s
Iteration   1: 1087445.778 ops/s
Iteration   2: 1092721.602 ops/s
Iteration   3: 1094333.720 ops/s
Iteration   4: 1093389.281 ops/s
Iteration   5: 1085258.198 ops/s
Iteration   6: 1091599.450 ops/s
Iteration   7: 1088061.234 ops/s
Iteration   8: 1090087.698 ops/s
Iteration   9: 1092046.723 ops/s
Iteration  10: 1088148.065 ops/s
Iteration  11: 1092723.227 ops/s
Iteration  12: 1097835.277 ops/s
Iteration  13: 1091261.251 ops/s
Iteration  14: 1090695.273 ops/s
Iteration  15: 1091565.877 ops/s
Iteration  16: 1092866.303 ops/s
Iteration  17: 1093940.043 ops/s
Iteration  18: 1087226.692 ops/s
Iteration  19: 1086220.745 ops/s
Iteration  20: 1088757.229 ops/s
Iteration  21: 1091168.176 ops/s
Iteration  22: 1076983.057 ops/s
Iteration  23: 1076391.168 ops/s
Iteration  24: 1083921.902 ops/s
Iteration  25: 1087498.697 ops/s
Iteration  26: 1086757.409 ops/s
Iteration  27: 1083409.624 ops/s
Iteration  28: 1089023.872 ops/s
Iteration  29: 1093593.642 ops/s
Iteration  30: 1094005.116 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsNegative":
  1089297.878 ±(99.9%) 3210.135 ops/s [Average]
  (min, avg, max) = (1076391.168, 1089297.878, 1097835.277), stdev = 4804.779
  CI (99.9%): [1086087.743, 1092508.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_listIterator_throwsNegative  thrpt   30  1089297.878 ± 3210.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3601142.152 ops/s
# Warmup Iteration   2: 8243192.109 ops/s
# Warmup Iteration   3: 6709501.694 ops/s
# Warmup Iteration   4: 8017179.104 ops/s
# Warmup Iteration   5: 8010922.330 ops/s
# Warmup Iteration   6: 7986332.848 ops/s
# Warmup Iteration   7: 7887421.705 ops/s
# Warmup Iteration   8: 7991461.086 ops/s
# Warmup Iteration   9: 7977423.634 ops/s
# Warmup Iteration  10: 7557120.274 ops/s
# Warmup Iteration  11: 7997914.636 ops/s
# Warmup Iteration  12: 7999163.426 ops/s
# Warmup Iteration  13: 7988264.996 ops/s
# Warmup Iteration  14: 7999892.103 ops/s
# Warmup Iteration  15: 7981486.549 ops/s
# Warmup Iteration  16: 7950754.276 ops/s
# Warmup Iteration  17: 8002608.374 ops/s
# Warmup Iteration  18: 8014088.982 ops/s
# Warmup Iteration  19: 8027570.863 ops/s
# Warmup Iteration  20: 8020112.578 ops/s
# Warmup Iteration  21: 7941234.091 ops/s
# Warmup Iteration  22: 7980147.596 ops/s
# Warmup Iteration  23: 8019308.415 ops/s
# Warmup Iteration  24: 8002789.905 ops/s
# Warmup Iteration  25: 7997101.065 ops/s
# Warmup Iteration  26: 8006700.298 ops/s
# Warmup Iteration  27: 8009128.064 ops/s
# Warmup Iteration  28: 8009300.952 ops/s
# Warmup Iteration  29: 7966248.366 ops/s
# Warmup Iteration  30: 7966935.955 ops/s
Iteration   1: 7975765.879 ops/s
Iteration   2: 7979841.960 ops/s
Iteration   3: 7990004.802 ops/s
Iteration   4: 8015318.329 ops/s
Iteration   5: 7995553.211 ops/s
Iteration   6: 7977247.807 ops/s
Iteration   7: 7999495.980 ops/s
Iteration   8: 7979140.101 ops/s
Iteration   9: 7952002.300 ops/s
Iteration  10: 7983846.930 ops/s
Iteration  11: 8006648.456 ops/s
Iteration  12: 7987755.323 ops/s
Iteration  13: 7999432.568 ops/s
Iteration  14: 8020216.010 ops/s
Iteration  15: 8015618.886 ops/s
Iteration  16: 8016658.366 ops/s
Iteration  17: 7983153.098 ops/s
Iteration  18: 7930641.600 ops/s
Iteration  19: 7996976.223 ops/s
Iteration  20: 8027490.754 ops/s
Iteration  21: 8018259.445 ops/s
Iteration  22: 7962427.900 ops/s
Iteration  23: 8002070.183 ops/s
Iteration  24: 8028900.212 ops/s
Iteration  25: 7991916.339 ops/s
Iteration  26: 7987917.290 ops/s
Iteration  27: 8007801.044 ops/s
Iteration  28: 7969749.155 ops/s
Iteration  29: 7954542.819 ops/s
Iteration  30: 7903991.340 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_makeString":
  7988679.477 ±(99.9%) 18840.343 ops/s [Average]
  (min, avg, max) = (7903991.340, 7988679.477, 8028900.212), stdev = 28199.341
  CI (99.9%): [7969839.134, 8007519.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_makeString  thrpt   30  7988679.477 ± 18840.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 827765.676 ops/s
# Warmup Iteration   2: 879657.622 ops/s
# Warmup Iteration   3: 1032916.733 ops/s
# Warmup Iteration   4: 1112841.730 ops/s
# Warmup Iteration   5: 1105921.019 ops/s
# Warmup Iteration   6: 1101105.870 ops/s
# Warmup Iteration   7: 1109946.632 ops/s
# Warmup Iteration   8: 1106845.594 ops/s
# Warmup Iteration   9: 1107717.553 ops/s
# Warmup Iteration  10: 1108425.497 ops/s
# Warmup Iteration  11: 1106674.906 ops/s
# Warmup Iteration  12: 1112360.602 ops/s
# Warmup Iteration  13: 1110325.913 ops/s
# Warmup Iteration  14: 933503.964 ops/s
# Warmup Iteration  15: 1115300.095 ops/s
# Warmup Iteration  16: 1112186.386 ops/s
# Warmup Iteration  17: 1193017.106 ops/s
# Warmup Iteration  18: 1187616.052 ops/s
# Warmup Iteration  19: 1192591.001 ops/s
# Warmup Iteration  20: 1184669.363 ops/s
# Warmup Iteration  21: 1192076.823 ops/s
# Warmup Iteration  22: 1188684.888 ops/s
# Warmup Iteration  23: 1187557.436 ops/s
# Warmup Iteration  24: 1189717.666 ops/s
# Warmup Iteration  25: 1193904.980 ops/s
# Warmup Iteration  26: 1191871.760 ops/s
# Warmup Iteration  27: 1185152.088 ops/s
# Warmup Iteration  28: 1192776.265 ops/s
# Warmup Iteration  29: 1187820.558 ops/s
# Warmup Iteration  30: 1189216.600 ops/s
Iteration   1: 1191806.372 ops/s
Iteration   2: 1186470.051 ops/s
Iteration   3: 1190326.090 ops/s
Iteration   4: 1188910.849 ops/s
Iteration   5: 1190672.184 ops/s
Iteration   6: 1182427.023 ops/s
Iteration   7: 1187167.005 ops/s
Iteration   8: 1187972.830 ops/s
Iteration   9: 1184445.136 ops/s
Iteration  10: 1187380.813 ops/s
Iteration  11: 1186161.429 ops/s
Iteration  12: 1190779.427 ops/s
Iteration  13: 1192008.132 ops/s
Iteration  14: 1190414.784 ops/s
Iteration  15: 1190793.363 ops/s
Iteration  16: 1194804.169 ops/s
Iteration  17: 1194640.074 ops/s
Iteration  18: 1190302.078 ops/s
Iteration  19: 1183892.649 ops/s
Iteration  20: 1190051.092 ops/s
Iteration  21: 1191358.971 ops/s
Iteration  22: 1189668.159 ops/s
Iteration  23: 1192880.782 ops/s
Iteration  24: 1193427.938 ops/s
Iteration  25: 1190677.382 ops/s
Iteration  26: 1191426.411 ops/s
Iteration  27: 1180610.914 ops/s
Iteration  28: 1179935.042 ops/s
Iteration  29: 1188024.143 ops/s
Iteration  30: 1186091.572 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max":
  1188850.895 ±(99.9%) 2543.720 ops/s [Average]
  (min, avg, max) = (1179935.042, 1188850.895, 1194804.169), stdev = 3807.320
  CI (99.9%): [1186307.176, 1191394.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_max  thrpt   30  1188850.895 ± 2543.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 815756.931 ops/s
# Warmup Iteration   2: 865876.801 ops/s
# Warmup Iteration   3: 999973.281 ops/s
# Warmup Iteration   4: 1091770.379 ops/s
# Warmup Iteration   5: 1091210.124 ops/s
# Warmup Iteration   6: 1086504.607 ops/s
# Warmup Iteration   7: 1090626.579 ops/s
# Warmup Iteration   8: 1083121.972 ops/s
# Warmup Iteration   9: 1092560.996 ops/s
# Warmup Iteration  10: 1088347.774 ops/s
# Warmup Iteration  11: 1092859.018 ops/s
# Warmup Iteration  12: 1092100.503 ops/s
# Warmup Iteration  13: 1090201.536 ops/s
# Warmup Iteration  14: 919209.456 ops/s
# Warmup Iteration  15: 1091358.496 ops/s
# Warmup Iteration  16: 1093015.457 ops/s
# Warmup Iteration  17: 1158203.125 ops/s
# Warmup Iteration  18: 1158334.024 ops/s
# Warmup Iteration  19: 1156033.803 ops/s
# Warmup Iteration  20: 1156038.398 ops/s
# Warmup Iteration  21: 1160083.576 ops/s
# Warmup Iteration  22: 1156113.200 ops/s
# Warmup Iteration  23: 1160025.085 ops/s
# Warmup Iteration  24: 1152342.845 ops/s
# Warmup Iteration  25: 1156159.129 ops/s
# Warmup Iteration  26: 1158870.387 ops/s
# Warmup Iteration  27: 1162144.911 ops/s
# Warmup Iteration  28: 1154014.332 ops/s
# Warmup Iteration  29: 1156377.233 ops/s
# Warmup Iteration  30: 1162311.030 ops/s
Iteration   1: 1154024.525 ops/s
Iteration   2: 1157578.845 ops/s
Iteration   3: 1160623.022 ops/s
Iteration   4: 1151812.896 ops/s
Iteration   5: 1158775.609 ops/s
Iteration   6: 1155497.295 ops/s
Iteration   7: 1157214.582 ops/s
Iteration   8: 1162284.551 ops/s
Iteration   9: 1163304.292 ops/s
Iteration  10: 1156464.498 ops/s
Iteration  11: 1156154.612 ops/s
Iteration  12: 1154273.488 ops/s
Iteration  13: 1154627.953 ops/s
Iteration  14: 1160098.726 ops/s
Iteration  15: 1158495.590 ops/s
Iteration  16: 1161938.169 ops/s
Iteration  17: 1161804.604 ops/s
Iteration  18: 1163711.872 ops/s
Iteration  19: 1158574.746 ops/s
Iteration  20: 1162713.480 ops/s
Iteration  21: 1164140.149 ops/s
Iteration  22: 1155015.086 ops/s
Iteration  23: 1161420.306 ops/s
Iteration  24: 1161072.644 ops/s
Iteration  25: 1162527.998 ops/s
Iteration  26: 1162405.123 ops/s
Iteration  27: 1160163.446 ops/s
Iteration  28: 1155104.541 ops/s
Iteration  29: 1160771.854 ops/s
Iteration  30: 1151883.498 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_maxBy":
  1158815.933 ±(99.9%) 2424.171 ops/s [Average]
  (min, avg, max) = (1151812.896, 1158815.933, 1164140.149), stdev = 3628.386
  CI (99.9%): [1156391.762, 1161240.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_maxBy  thrpt   30  1158815.933 ± 2424.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64129196.627 ops/s
# Warmup Iteration   2: 132380163.847 ops/s
# Warmup Iteration   3: 124345412.738 ops/s
# Warmup Iteration   4: 146443421.602 ops/s
# Warmup Iteration   5: 145349700.222 ops/s
# Warmup Iteration   6: 146100494.453 ops/s
# Warmup Iteration   7: 146882773.916 ops/s
# Warmup Iteration   8: 145473955.163 ops/s
# Warmup Iteration   9: 145887891.485 ops/s
# Warmup Iteration  10: 146459027.431 ops/s
# Warmup Iteration  11: 146477998.740 ops/s
# Warmup Iteration  12: 146976959.477 ops/s
# Warmup Iteration  13: 146103750.293 ops/s
# Warmup Iteration  14: 146483272.658 ops/s
# Warmup Iteration  15: 144084820.668 ops/s
# Warmup Iteration  16: 145517765.309 ops/s
# Warmup Iteration  17: 140948725.510 ops/s
# Warmup Iteration  18: 141270603.205 ops/s
# Warmup Iteration  19: 142421611.679 ops/s
# Warmup Iteration  20: 141747066.635 ops/s
# Warmup Iteration  21: 141784081.028 ops/s
# Warmup Iteration  22: 140600818.409 ops/s
# Warmup Iteration  23: 142553427.207 ops/s
# Warmup Iteration  24: 141619905.690 ops/s
# Warmup Iteration  25: 142274970.812 ops/s
# Warmup Iteration  26: 141378700.226 ops/s
# Warmup Iteration  27: 141758289.464 ops/s
# Warmup Iteration  28: 142272606.157 ops/s
# Warmup Iteration  29: 142590144.664 ops/s
# Warmup Iteration  30: 142434952.203 ops/s
Iteration   1: 142200112.074 ops/s
Iteration   2: 141866111.563 ops/s
Iteration   3: 142400931.764 ops/s
Iteration   4: 141147878.493 ops/s
Iteration   5: 141868009.510 ops/s
Iteration   6: 141665947.730 ops/s
Iteration   7: 142591175.867 ops/s
Iteration   8: 142607559.293 ops/s
Iteration   9: 142443729.876 ops/s
Iteration  10: 142304697.794 ops/s
Iteration  11: 139660989.995 ops/s
Iteration  12: 140395323.871 ops/s
Iteration  13: 140970575.603 ops/s
Iteration  14: 142180029.029 ops/s
Iteration  15: 141968004.872 ops/s
Iteration  16: 142300402.809 ops/s
Iteration  17: 142580110.409 ops/s
Iteration  18: 141253274.141 ops/s
Iteration  19: 140450377.621 ops/s
Iteration  20: 138476886.647 ops/s
Iteration  21: 141800365.303 ops/s
Iteration  22: 141626437.953 ops/s
Iteration  23: 140647762.323 ops/s
Iteration  24: 141723178.356 ops/s
Iteration  25: 142128519.635 ops/s
Iteration  26: 142007541.188 ops/s
Iteration  27: 140627497.850 ops/s
Iteration  28: 141915031.718 ops/s
Iteration  29: 141919691.300 ops/s
Iteration  30: 142349180.025 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws":
  141602577.820 ±(99.9%) 637477.973 ops/s [Average]
  (min, avg, max) = (138476886.647, 141602577.820, 142607559.293), stdev = 954147.092
  CI (99.9%): [140965099.847, 142240055.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws  thrpt   30  141602577.820 ± 637477.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65229547.302 ops/s
# Warmup Iteration   2: 129968262.668 ops/s
# Warmup Iteration   3: 125839897.083 ops/s
# Warmup Iteration   4: 147051859.569 ops/s
# Warmup Iteration   5: 147741211.927 ops/s
# Warmup Iteration   6: 147854910.389 ops/s
# Warmup Iteration   7: 148465750.511 ops/s
# Warmup Iteration   8: 147134167.365 ops/s
# Warmup Iteration   9: 146630090.523 ops/s
# Warmup Iteration  10: 147272965.923 ops/s
# Warmup Iteration  11: 147836691.358 ops/s
# Warmup Iteration  12: 148692772.470 ops/s
# Warmup Iteration  13: 148071291.825 ops/s
# Warmup Iteration  14: 148498342.985 ops/s
# Warmup Iteration  15: 147649069.732 ops/s
# Warmup Iteration  16: 147778283.501 ops/s
# Warmup Iteration  17: 145163040.830 ops/s
# Warmup Iteration  18: 145179553.053 ops/s
# Warmup Iteration  19: 144845775.861 ops/s
# Warmup Iteration  20: 144639337.046 ops/s
# Warmup Iteration  21: 145536272.993 ops/s
# Warmup Iteration  22: 144757590.555 ops/s
# Warmup Iteration  23: 143949656.576 ops/s
# Warmup Iteration  24: 144021677.104 ops/s
# Warmup Iteration  25: 145010167.258 ops/s
# Warmup Iteration  26: 144110929.314 ops/s
# Warmup Iteration  27: 143360162.666 ops/s
# Warmup Iteration  28: 144772262.759 ops/s
# Warmup Iteration  29: 145275120.035 ops/s
# Warmup Iteration  30: 145095709.998 ops/s
Iteration   1: 145941299.163 ops/s
Iteration   2: 144866796.624 ops/s
Iteration   3: 145604803.587 ops/s
Iteration   4: 144167356.282 ops/s
Iteration   5: 143980745.288 ops/s
Iteration   6: 142496785.577 ops/s
Iteration   7: 144412893.111 ops/s
Iteration   8: 144634296.410 ops/s
Iteration   9: 144822154.109 ops/s
Iteration  10: 145325396.661 ops/s
Iteration  11: 144314060.625 ops/s
Iteration  12: 144250435.894 ops/s
Iteration  13: 144459317.800 ops/s
Iteration  14: 145226099.103 ops/s
Iteration  15: 144881005.819 ops/s
Iteration  16: 144146825.199 ops/s
Iteration  17: 144095772.206 ops/s
Iteration  18: 144860053.271 ops/s
Iteration  19: 145887065.626 ops/s
Iteration  20: 143004070.075 ops/s
Iteration  21: 144529435.207 ops/s
Iteration  22: 144966257.934 ops/s
Iteration  23: 144355177.771 ops/s
Iteration  24: 145987643.414 ops/s
Iteration  25: 144819250.233 ops/s
Iteration  26: 145032205.629 ops/s
Iteration  27: 144511673.312 ops/s
Iteration  28: 144589820.633 ops/s
Iteration  29: 144026715.486 ops/s
Iteration  30: 144213824.405 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws_without_comparator":
  144613641.215 ±(99.9%) 507773.097 ops/s [Average]
  (min, avg, max) = (142496785.577, 144613641.215, 145987643.414), stdev = 760010.924
  CI (99.9%): [144105868.118, 145121414.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  144613641.215 ± 507773.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828915.306 ops/s
# Warmup Iteration   2: 881155.360 ops/s
# Warmup Iteration   3: 1044300.077 ops/s
# Warmup Iteration   4: 1117218.077 ops/s
# Warmup Iteration   5: 1107992.068 ops/s
# Warmup Iteration   6: 1098164.862 ops/s
# Warmup Iteration   7: 1113548.581 ops/s
# Warmup Iteration   8: 1116224.198 ops/s
# Warmup Iteration   9: 1109850.815 ops/s
# Warmup Iteration  10: 1114525.128 ops/s
# Warmup Iteration  11: 1114676.098 ops/s
# Warmup Iteration  12: 1109063.925 ops/s
# Warmup Iteration  13: 1107143.848 ops/s
# Warmup Iteration  14: 945491.417 ops/s
# Warmup Iteration  15: 1111559.663 ops/s
# Warmup Iteration  16: 1119353.760 ops/s
# Warmup Iteration  17: 1186063.676 ops/s
# Warmup Iteration  18: 1188318.720 ops/s
# Warmup Iteration  19: 1189780.675 ops/s
# Warmup Iteration  20: 1182069.514 ops/s
# Warmup Iteration  21: 1190244.105 ops/s
# Warmup Iteration  22: 1190008.128 ops/s
# Warmup Iteration  23: 1186552.286 ops/s
# Warmup Iteration  24: 1190153.210 ops/s
# Warmup Iteration  25: 1188121.498 ops/s
# Warmup Iteration  26: 1182612.488 ops/s
# Warmup Iteration  27: 1189606.157 ops/s
# Warmup Iteration  28: 1187926.318 ops/s
# Warmup Iteration  29: 1181324.667 ops/s
# Warmup Iteration  30: 1179390.371 ops/s
Iteration   1: 1178008.796 ops/s
Iteration   2: 1174632.233 ops/s
Iteration   3: 1191754.798 ops/s
Iteration   4: 1187710.997 ops/s
Iteration   5: 1184764.238 ops/s
Iteration   6: 1188472.662 ops/s
Iteration   7: 1185746.310 ops/s
Iteration   8: 1185998.907 ops/s
Iteration   9: 1187604.088 ops/s
Iteration  10: 1187356.456 ops/s
Iteration  11: 1176205.638 ops/s
Iteration  12: 1188516.146 ops/s
Iteration  13: 1187741.295 ops/s
Iteration  14: 1191558.583 ops/s
Iteration  15: 1185026.992 ops/s
Iteration  16: 1178563.240 ops/s
Iteration  17: 1184059.309 ops/s
Iteration  18: 1189869.618 ops/s
Iteration  19: 1190080.546 ops/s
Iteration  20: 1188720.632 ops/s
Iteration  21: 1190055.726 ops/s
Iteration  22: 1184593.388 ops/s
Iteration  23: 1189576.004 ops/s
Iteration  24: 1178013.864 ops/s
Iteration  25: 1184221.704 ops/s
Iteration  26: 1181588.491 ops/s
Iteration  27: 1191172.643 ops/s
Iteration  28: 1191950.378 ops/s
Iteration  29: 1183088.932 ops/s
Iteration  30: 1188871.376 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_max_without_comparator":
  1185850.800 ±(99.9%) 3216.902 ops/s [Average]
  (min, avg, max) = (1174632.233, 1185850.800, 1191950.378), stdev = 4814.908
  CI (99.9%): [1182633.898, 1189067.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_max_without_comparator  thrpt   30  1185850.800 ± 3216.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 825218.682 ops/s
# Warmup Iteration   2: 874512.450 ops/s
# Warmup Iteration   3: 1033738.544 ops/s
# Warmup Iteration   4: 1103716.715 ops/s
# Warmup Iteration   5: 1109944.207 ops/s
# Warmup Iteration   6: 1115702.469 ops/s
# Warmup Iteration   7: 1108602.289 ops/s
# Warmup Iteration   8: 1116043.117 ops/s
# Warmup Iteration   9: 1116237.620 ops/s
# Warmup Iteration  10: 1112509.517 ops/s
# Warmup Iteration  11: 1117376.780 ops/s
# Warmup Iteration  12: 1109519.894 ops/s
# Warmup Iteration  13: 1086727.339 ops/s
# Warmup Iteration  14: 939791.172 ops/s
# Warmup Iteration  15: 1112216.140 ops/s
# Warmup Iteration  16: 1116170.413 ops/s
# Warmup Iteration  17: 1174649.164 ops/s
# Warmup Iteration  18: 1181563.929 ops/s
# Warmup Iteration  19: 1176787.920 ops/s
# Warmup Iteration  20: 1182370.197 ops/s
# Warmup Iteration  21: 1177548.840 ops/s
# Warmup Iteration  22: 1180463.407 ops/s
# Warmup Iteration  23: 1177979.461 ops/s
# Warmup Iteration  24: 1188293.513 ops/s
# Warmup Iteration  25: 1188050.097 ops/s
# Warmup Iteration  26: 1188386.371 ops/s
# Warmup Iteration  27: 1179537.681 ops/s
# Warmup Iteration  28: 1181378.441 ops/s
# Warmup Iteration  29: 1185439.508 ops/s
# Warmup Iteration  30: 1180600.433 ops/s
Iteration   1: 1189291.928 ops/s
Iteration   2: 1187199.071 ops/s
Iteration   3: 1184304.217 ops/s
Iteration   4: 1185623.649 ops/s
Iteration   5: 1186851.843 ops/s
Iteration   6: 1188060.749 ops/s
Iteration   7: 1185093.367 ops/s
Iteration   8: 1175084.634 ops/s
Iteration   9: 1184295.991 ops/s
Iteration  10: 1187714.220 ops/s
Iteration  11: 1178319.833 ops/s
Iteration  12: 1187528.466 ops/s
Iteration  13: 1186784.196 ops/s
Iteration  14: 1178191.055 ops/s
Iteration  15: 1187701.820 ops/s
Iteration  16: 1185089.604 ops/s
Iteration  17: 1189342.408 ops/s
Iteration  18: 1173267.468 ops/s
Iteration  19: 1174457.136 ops/s
Iteration  20: 1180665.518 ops/s
Iteration  21: 1175014.486 ops/s
Iteration  22: 1152485.245 ops/s
Iteration  23: 1187196.297 ops/s
Iteration  24: 1175483.754 ops/s
Iteration  25: 1179718.293 ops/s
Iteration  26: 1186861.331 ops/s
Iteration  27: 1177557.363 ops/s
Iteration  28: 1183363.728 ops/s
Iteration  29: 1187337.598 ops/s
Iteration  30: 1188160.472 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min":
  1182268.191 ±(99.9%) 5071.129 ops/s [Average]
  (min, avg, max) = (1152485.245, 1182268.191, 1189342.408), stdev = 7590.228
  CI (99.9%): [1177197.062, 1187339.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_min  thrpt   30  1182268.191 ± 5071.129  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 814645.379 ops/s
# Warmup Iteration   2: 878848.101 ops/s
# Warmup Iteration   3: 1036072.676 ops/s
# Warmup Iteration   4: 1116241.990 ops/s
# Warmup Iteration   5: 1114487.611 ops/s
# Warmup Iteration   6: 1104289.437 ops/s
# Warmup Iteration   7: 1112166.258 ops/s
# Warmup Iteration   8: 1103691.635 ops/s
# Warmup Iteration   9: 1108223.303 ops/s
# Warmup Iteration  10: 1103522.635 ops/s
# Warmup Iteration  11: 1114318.116 ops/s
# Warmup Iteration  12: 1114737.341 ops/s
# Warmup Iteration  13: 1106225.489 ops/s
# Warmup Iteration  14: 934025.040 ops/s
# Warmup Iteration  15: 1113848.395 ops/s
# Warmup Iteration  16: 1112698.770 ops/s
# Warmup Iteration  17: 1184574.102 ops/s
# Warmup Iteration  18: 1184566.764 ops/s
# Warmup Iteration  19: 1180476.714 ops/s
# Warmup Iteration  20: 1184043.278 ops/s
# Warmup Iteration  21: 1185508.906 ops/s
# Warmup Iteration  22: 1182515.134 ops/s
# Warmup Iteration  23: 1179371.499 ops/s
# Warmup Iteration  24: 1188230.890 ops/s
# Warmup Iteration  25: 1178710.834 ops/s
# Warmup Iteration  26: 1172606.311 ops/s
# Warmup Iteration  27: 1176719.632 ops/s
# Warmup Iteration  28: 1185840.462 ops/s
# Warmup Iteration  29: 1179548.883 ops/s
# Warmup Iteration  30: 1180525.458 ops/s
Iteration   1: 1189456.565 ops/s
Iteration   2: 1186701.514 ops/s
Iteration   3: 1190314.765 ops/s
Iteration   4: 1183144.195 ops/s
Iteration   5: 1183433.884 ops/s
Iteration   6: 1178396.583 ops/s
Iteration   7: 1189702.192 ops/s
Iteration   8: 1188652.237 ops/s
Iteration   9: 1188366.736 ops/s
Iteration  10: 1182200.788 ops/s
Iteration  11: 1188980.879 ops/s
Iteration  12: 1188339.268 ops/s
Iteration  13: 1189031.038 ops/s
Iteration  14: 1189046.790 ops/s
Iteration  15: 1189756.426 ops/s
Iteration  16: 1180012.823 ops/s
Iteration  17: 1183307.098 ops/s
Iteration  18: 1182510.218 ops/s
Iteration  19: 1190892.711 ops/s
Iteration  20: 1187496.780 ops/s
Iteration  21: 1184524.900 ops/s
Iteration  22: 1182186.705 ops/s
Iteration  23: 1189136.057 ops/s
Iteration  24: 1189636.212 ops/s
Iteration  25: 1186755.961 ops/s
Iteration  26: 1184327.953 ops/s
Iteration  27: 1182943.559 ops/s
Iteration  28: 1182680.238 ops/s
Iteration  29: 1189271.712 ops/s
Iteration  30: 1183932.803 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_minBy":
  1186171.320 ±(99.9%) 2322.314 ops/s [Average]
  (min, avg, max) = (1178396.583, 1186171.320, 1190892.711), stdev = 3475.931
  CI (99.9%): [1183849.006, 1188493.634] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_minBy  thrpt   30  1186171.320 ± 2322.314  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64087597.444 ops/s
# Warmup Iteration   2: 132135000.586 ops/s
# Warmup Iteration   3: 125292640.347 ops/s
# Warmup Iteration   4: 144642395.212 ops/s
# Warmup Iteration   5: 145833953.070 ops/s
# Warmup Iteration   6: 145184915.498 ops/s
# Warmup Iteration   7: 146100085.544 ops/s
# Warmup Iteration   8: 145837869.303 ops/s
# Warmup Iteration   9: 144570590.998 ops/s
# Warmup Iteration  10: 146276243.681 ops/s
# Warmup Iteration  11: 146291312.088 ops/s
# Warmup Iteration  12: 146232127.677 ops/s
# Warmup Iteration  13: 145147845.619 ops/s
# Warmup Iteration  14: 146493864.918 ops/s
# Warmup Iteration  15: 146107941.370 ops/s
# Warmup Iteration  16: 146686526.052 ops/s
# Warmup Iteration  17: 141834928.793 ops/s
# Warmup Iteration  18: 141326105.375 ops/s
# Warmup Iteration  19: 141559529.641 ops/s
# Warmup Iteration  20: 141956730.926 ops/s
# Warmup Iteration  21: 141996857.098 ops/s
# Warmup Iteration  22: 140812743.441 ops/s
# Warmup Iteration  23: 140690592.800 ops/s
# Warmup Iteration  24: 142360435.608 ops/s
# Warmup Iteration  25: 141968216.053 ops/s
# Warmup Iteration  26: 141200343.401 ops/s
# Warmup Iteration  27: 141407227.543 ops/s
# Warmup Iteration  28: 141997466.323 ops/s
# Warmup Iteration  29: 142257783.019 ops/s
# Warmup Iteration  30: 142343637.845 ops/s
Iteration   1: 142570620.478 ops/s
Iteration   2: 142507887.587 ops/s
Iteration   3: 141629852.723 ops/s
Iteration   4: 141541144.982 ops/s
Iteration   5: 141233402.764 ops/s
Iteration   6: 142210206.463 ops/s
Iteration   7: 142706170.222 ops/s
Iteration   8: 142321884.175 ops/s
Iteration   9: 142594248.565 ops/s
Iteration  10: 142575619.345 ops/s
Iteration  11: 142185690.537 ops/s
Iteration  12: 142586072.739 ops/s
Iteration  13: 142198712.989 ops/s
Iteration  14: 142899642.716 ops/s
Iteration  15: 142305440.995 ops/s
Iteration  16: 141954509.080 ops/s
Iteration  17: 142351074.551 ops/s
Iteration  18: 141943952.821 ops/s
Iteration  19: 142150784.035 ops/s
Iteration  20: 142096554.503 ops/s
Iteration  21: 141938271.442 ops/s
Iteration  22: 142006678.328 ops/s
Iteration  23: 142600617.842 ops/s
Iteration  24: 142401097.134 ops/s
Iteration  25: 141309090.496 ops/s
Iteration  26: 141504845.214 ops/s
Iteration  27: 142167903.635 ops/s
Iteration  28: 142091979.720 ops/s
Iteration  29: 142534582.335 ops/s
Iteration  30: 142019751.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws":
  142171276.335 ±(99.9%) 278003.876 ops/s [Average]
  (min, avg, max) = (141233402.764, 142171276.335, 142899642.716), stdev = 416103.146
  CI (99.9%): [141893272.459, 142449280.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws  thrpt   30  142171276.335 ± 278003.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 65133016.853 ops/s
# Warmup Iteration   2: 132780823.644 ops/s
# Warmup Iteration   3: 124591364.705 ops/s
# Warmup Iteration   4: 147381352.025 ops/s
# Warmup Iteration   5: 146357593.878 ops/s
# Warmup Iteration   6: 147821211.880 ops/s
# Warmup Iteration   7: 147013225.985 ops/s
# Warmup Iteration   8: 146158529.256 ops/s
# Warmup Iteration   9: 147760754.619 ops/s
# Warmup Iteration  10: 145993096.064 ops/s
# Warmup Iteration  11: 145102070.049 ops/s
# Warmup Iteration  12: 145982382.598 ops/s
# Warmup Iteration  13: 146362772.222 ops/s
# Warmup Iteration  14: 148460811.240 ops/s
# Warmup Iteration  15: 147041106.765 ops/s
# Warmup Iteration  16: 146829073.211 ops/s
# Warmup Iteration  17: 144821589.050 ops/s
# Warmup Iteration  18: 145364107.040 ops/s
# Warmup Iteration  19: 144036363.607 ops/s
# Warmup Iteration  20: 143327749.484 ops/s
# Warmup Iteration  21: 143233346.066 ops/s
# Warmup Iteration  22: 143982506.210 ops/s
# Warmup Iteration  23: 144501937.987 ops/s
# Warmup Iteration  24: 144683030.837 ops/s
# Warmup Iteration  25: 145046802.911 ops/s
# Warmup Iteration  26: 144638504.475 ops/s
# Warmup Iteration  27: 144739669.064 ops/s
# Warmup Iteration  28: 144198924.700 ops/s
# Warmup Iteration  29: 143623934.680 ops/s
# Warmup Iteration  30: 144502352.004 ops/s
Iteration   1: 144483299.325 ops/s
Iteration   2: 145259386.579 ops/s
Iteration   3: 144255468.155 ops/s
Iteration   4: 143936399.067 ops/s
Iteration   5: 145235572.498 ops/s
Iteration   6: 145091659.780 ops/s
Iteration   7: 144961752.379 ops/s
Iteration   8: 144397951.886 ops/s
Iteration   9: 144867531.101 ops/s
Iteration  10: 144468613.208 ops/s
Iteration  11: 144337543.521 ops/s
Iteration  12: 145509203.274 ops/s
Iteration  13: 145308051.913 ops/s
Iteration  14: 144671444.285 ops/s
Iteration  15: 144538859.029 ops/s
Iteration  16: 144815360.118 ops/s
Iteration  17: 144527800.077 ops/s
Iteration  18: 144010054.399 ops/s
Iteration  19: 144267624.116 ops/s
Iteration  20: 144736723.562 ops/s
Iteration  21: 144736640.801 ops/s
Iteration  22: 144850633.849 ops/s
Iteration  23: 143238788.194 ops/s
Iteration  24: 144152945.228 ops/s
Iteration  25: 144135838.695 ops/s
Iteration  26: 144702615.172 ops/s
Iteration  27: 143859640.441 ops/s
Iteration  28: 144070262.101 ops/s
Iteration  29: 143836001.594 ops/s
Iteration  30: 144917311.507 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws_without_comparator":
  144539365.862 ±(99.9%) 342277.936 ops/s [Average]
  (min, avg, max) = (143238788.194, 144539365.862, 145509203.274), stdev = 512305.540
  CI (99.9%): [144197087.926, 144881643.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  144539365.862 ± 342277.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 829615.388 ops/s
# Warmup Iteration   2: 875153.542 ops/s
# Warmup Iteration   3: 1037782.362 ops/s
# Warmup Iteration   4: 1115661.025 ops/s
# Warmup Iteration   5: 1108202.569 ops/s
# Warmup Iteration   6: 1106502.864 ops/s
# Warmup Iteration   7: 1109146.153 ops/s
# Warmup Iteration   8: 1113672.270 ops/s
# Warmup Iteration   9: 1111721.068 ops/s
# Warmup Iteration  10: 1114402.641 ops/s
# Warmup Iteration  11: 1114714.410 ops/s
# Warmup Iteration  12: 1109330.654 ops/s
# Warmup Iteration  13: 1102344.731 ops/s
# Warmup Iteration  14: 941764.547 ops/s
# Warmup Iteration  15: 1104061.498 ops/s
# Warmup Iteration  16: 1105306.333 ops/s
# Warmup Iteration  17: 1190327.093 ops/s
# Warmup Iteration  18: 1185369.389 ops/s
# Warmup Iteration  19: 1189524.878 ops/s
# Warmup Iteration  20: 1191184.281 ops/s
# Warmup Iteration  21: 1187498.330 ops/s
# Warmup Iteration  22: 1191236.417 ops/s
# Warmup Iteration  23: 1189860.242 ops/s
# Warmup Iteration  24: 1184212.174 ops/s
# Warmup Iteration  25: 1191120.510 ops/s
# Warmup Iteration  26: 1186360.219 ops/s
# Warmup Iteration  27: 1186498.618 ops/s
# Warmup Iteration  28: 1180081.387 ops/s
# Warmup Iteration  29: 1179495.787 ops/s
# Warmup Iteration  30: 1176748.631 ops/s
Iteration   1: 1179209.983 ops/s
Iteration   2: 1187881.369 ops/s
Iteration   3: 1190491.788 ops/s
Iteration   4: 1171625.747 ops/s
Iteration   5: 1179997.744 ops/s
Iteration   6: 1170590.647 ops/s
Iteration   7: 1189139.460 ops/s
Iteration   8: 1193196.788 ops/s
Iteration   9: 1187194.489 ops/s
Iteration  10: 1191938.090 ops/s
Iteration  11: 1181322.942 ops/s
Iteration  12: 1173764.935 ops/s
Iteration  13: 1189365.077 ops/s
Iteration  14: 1188842.607 ops/s
Iteration  15: 1187444.376 ops/s
Iteration  16: 1190555.822 ops/s
Iteration  17: 1191441.714 ops/s
Iteration  18: 1171827.270 ops/s
Iteration  19: 1188561.988 ops/s
Iteration  20: 1187606.708 ops/s
Iteration  21: 1190823.294 ops/s
Iteration  22: 1190353.814 ops/s
Iteration  23: 1191275.904 ops/s
Iteration  24: 1191470.534 ops/s
Iteration  25: 1175733.737 ops/s
Iteration  26: 1185798.339 ops/s
Iteration  27: 1180753.809 ops/s
Iteration  28: 1184851.789 ops/s
Iteration  29: 1184680.724 ops/s
Iteration  30: 1186730.125 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_min_without_comparator":
  1185149.054 ±(99.9%) 4501.547 ops/s [Average]
  (min, avg, max) = (1170590.647, 1185149.054, 1193196.788), stdev = 6737.705
  CI (99.9%): [1180647.506, 1189650.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_min_without_comparator  thrpt   30  1185149.054 ± 4501.547  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46144901.902 ops/s
# Warmup Iteration   2: 96604286.396 ops/s
# Warmup Iteration   3: 91117976.403 ops/s
# Warmup Iteration   4: 104992982.177 ops/s
# Warmup Iteration   5: 106019815.194 ops/s
# Warmup Iteration   6: 105512640.551 ops/s
# Warmup Iteration   7: 105383644.731 ops/s
# Warmup Iteration   8: 105795455.596 ops/s
# Warmup Iteration   9: 106073881.614 ops/s
# Warmup Iteration  10: 105463949.414 ops/s
# Warmup Iteration  11: 103668769.355 ops/s
# Warmup Iteration  12: 106226682.341 ops/s
# Warmup Iteration  13: 106919970.976 ops/s
# Warmup Iteration  14: 104658380.918 ops/s
# Warmup Iteration  15: 105947269.528 ops/s
# Warmup Iteration  16: 106058316.476 ops/s
# Warmup Iteration  17: 105430260.509 ops/s
# Warmup Iteration  18: 106625637.582 ops/s
# Warmup Iteration  19: 105594049.672 ops/s
# Warmup Iteration  20: 106355098.771 ops/s
# Warmup Iteration  21: 106023464.890 ops/s
# Warmup Iteration  22: 106453678.826 ops/s
# Warmup Iteration  23: 105531758.969 ops/s
# Warmup Iteration  24: 105437841.400 ops/s
# Warmup Iteration  25: 106746701.185 ops/s
# Warmup Iteration  26: 105225437.599 ops/s
# Warmup Iteration  27: 105148774.084 ops/s
# Warmup Iteration  28: 107845959.376 ops/s
# Warmup Iteration  29: 105708926.991 ops/s
# Warmup Iteration  30: 106524669.112 ops/s
Iteration   1: 107905963.436 ops/s
Iteration   2: 107169400.514 ops/s
Iteration   3: 106507098.226 ops/s
Iteration   4: 105367116.837 ops/s
Iteration   5: 107324359.204 ops/s
Iteration   6: 105469639.039 ops/s
Iteration   7: 104823442.548 ops/s
Iteration   8: 106795282.844 ops/s
Iteration   9: 106976268.734 ops/s
Iteration  10: 106122403.529 ops/s
Iteration  11: 106713211.030 ops/s
Iteration  12: 105968604.887 ops/s
Iteration  13: 105346959.701 ops/s
Iteration  14: 106813618.293 ops/s
Iteration  15: 105467266.961 ops/s
Iteration  16: 104187902.708 ops/s
Iteration  17: 105953853.969 ops/s
Iteration  18: 107253045.800 ops/s
Iteration  19: 107821574.812 ops/s
Iteration  20: 105914069.805 ops/s
Iteration  21: 106459838.130 ops/s
Iteration  22: 107097482.118 ops/s
Iteration  23: 106869060.902 ops/s
Iteration  24: 104433883.946 ops/s
Iteration  25: 102633115.146 ops/s
Iteration  26: 104940703.904 ops/s
Iteration  27: 105803631.890 ops/s
Iteration  28: 106747181.202 ops/s
Iteration  29: 107116497.700 ops/s
Iteration  30: 105893416.597 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_newWithout":
  106129863.147 ±(99.9%) 776495.756 ops/s [Average]
  (min, avg, max) = (102633115.146, 106129863.147, 107905963.436), stdev = 1162222.381
  CI (99.9%): [105353367.391, 106906358.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_newWithout  thrpt   30  106129863.147 ± 776495.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147851427.064 ops/s
# Warmup Iteration   2: 301038347.656 ops/s
# Warmup Iteration   3: 265616709.438 ops/s
# Warmup Iteration   4: 312916321.598 ops/s
# Warmup Iteration   5: 311471766.248 ops/s
# Warmup Iteration   6: 311345071.007 ops/s
# Warmup Iteration   7: 309488301.935 ops/s
# Warmup Iteration   8: 311966136.660 ops/s
# Warmup Iteration   9: 312842000.288 ops/s
# Warmup Iteration  10: 312350283.982 ops/s
# Warmup Iteration  11: 312294124.515 ops/s
# Warmup Iteration  12: 313254807.438 ops/s
# Warmup Iteration  13: 312178263.634 ops/s
# Warmup Iteration  14: 311467019.599 ops/s
# Warmup Iteration  15: 310056026.027 ops/s
# Warmup Iteration  16: 311693070.442 ops/s
# Warmup Iteration  17: 311946059.559 ops/s
# Warmup Iteration  18: 312321396.126 ops/s
# Warmup Iteration  19: 312633290.900 ops/s
# Warmup Iteration  20: 310121208.535 ops/s
# Warmup Iteration  21: 312216057.121 ops/s
# Warmup Iteration  22: 314293426.474 ops/s
# Warmup Iteration  23: 311787276.378 ops/s
# Warmup Iteration  24: 311458350.843 ops/s
# Warmup Iteration  25: 309485916.723 ops/s
# Warmup Iteration  26: 312829258.295 ops/s
# Warmup Iteration  27: 311248200.432 ops/s
# Warmup Iteration  28: 310533457.909 ops/s
# Warmup Iteration  29: 310461039.040 ops/s
# Warmup Iteration  30: 308775397.702 ops/s
Iteration   1: 311855662.569 ops/s
Iteration   2: 312568654.973 ops/s
Iteration   3: 314043356.894 ops/s
Iteration   4: 311593886.161 ops/s
Iteration   5: 312966234.359 ops/s
Iteration   6: 312407669.706 ops/s
Iteration   7: 312526247.830 ops/s
Iteration   8: 312018845.402 ops/s
Iteration   9: 311204276.543 ops/s
Iteration  10: 311887708.728 ops/s
Iteration  11: 313492334.010 ops/s
Iteration  12: 313853650.055 ops/s
Iteration  13: 313831209.280 ops/s
Iteration  14: 313181532.808 ops/s
Iteration  15: 311210184.643 ops/s
Iteration  16: 307453459.860 ops/s
Iteration  17: 310836128.567 ops/s
Iteration  18: 312120909.588 ops/s
Iteration  19: 312007913.056 ops/s
Iteration  20: 312598698.109 ops/s
Iteration  21: 313097868.577 ops/s
Iteration  22: 312459620.308 ops/s
Iteration  23: 310504251.551 ops/s
Iteration  24: 314096948.781 ops/s
Iteration  25: 314011782.997 ops/s
Iteration  26: 312092557.735 ops/s
Iteration  27: 314092010.074 ops/s
Iteration  28: 312119227.149 ops/s
Iteration  29: 311977917.956 ops/s
Iteration  30: 311938994.113 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfy":
  312334991.413 ±(99.9%) 905571.664 ops/s [Average]
  (min, avg, max) = (307453459.860, 312334991.413, 314096948.781), stdev = 1355417.138
  CI (99.9%): [311429419.749, 313240563.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfy  thrpt   30  312334991.413 ± 905571.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149847797.985 ops/s
# Warmup Iteration   2: 301108731.635 ops/s
# Warmup Iteration   3: 249081998.722 ops/s
# Warmup Iteration   4: 289321521.314 ops/s
# Warmup Iteration   5: 289193858.296 ops/s
# Warmup Iteration   6: 289664920.863 ops/s
# Warmup Iteration   7: 288887033.472 ops/s
# Warmup Iteration   8: 287898889.068 ops/s
# Warmup Iteration   9: 289173594.579 ops/s
# Warmup Iteration  10: 289653262.498 ops/s
# Warmup Iteration  11: 288675967.479 ops/s
# Warmup Iteration  12: 288963921.381 ops/s
# Warmup Iteration  13: 289516913.696 ops/s
# Warmup Iteration  14: 290489523.297 ops/s
# Warmup Iteration  15: 289431112.975 ops/s
# Warmup Iteration  16: 289910281.172 ops/s
# Warmup Iteration  17: 289815693.839 ops/s
# Warmup Iteration  18: 289835812.266 ops/s
# Warmup Iteration  19: 288968624.087 ops/s
# Warmup Iteration  20: 288606004.349 ops/s
# Warmup Iteration  21: 283697260.309 ops/s
# Warmup Iteration  22: 290104352.987 ops/s
# Warmup Iteration  23: 289705274.487 ops/s
# Warmup Iteration  24: 290085483.077 ops/s
# Warmup Iteration  25: 290569003.383 ops/s
# Warmup Iteration  26: 288050593.650 ops/s
# Warmup Iteration  27: 290115081.693 ops/s
# Warmup Iteration  28: 289811662.577 ops/s
# Warmup Iteration  29: 289572515.352 ops/s
# Warmup Iteration  30: 290577328.180 ops/s
Iteration   1: 290023519.933 ops/s
Iteration   2: 288092655.608 ops/s
Iteration   3: 290756338.717 ops/s
Iteration   4: 288377401.877 ops/s
Iteration   5: 290609905.598 ops/s
Iteration   6: 290515393.227 ops/s
Iteration   7: 289513903.270 ops/s
Iteration   8: 288952527.312 ops/s
Iteration   9: 289911116.476 ops/s
Iteration  10: 288959131.389 ops/s
Iteration  11: 288290104.234 ops/s
Iteration  12: 289862074.244 ops/s
Iteration  13: 291126266.305 ops/s
Iteration  14: 288403877.920 ops/s
Iteration  15: 288608091.525 ops/s
Iteration  16: 287917454.802 ops/s
Iteration  17: 287158596.810 ops/s
Iteration  18: 286246366.807 ops/s
Iteration  19: 288940766.937 ops/s
Iteration  20: 287348133.869 ops/s
Iteration  21: 288034359.016 ops/s
Iteration  22: 288776658.857 ops/s
Iteration  23: 288091534.329 ops/s
Iteration  24: 287822333.419 ops/s
Iteration  25: 290698403.134 ops/s
Iteration  26: 288261921.855 ops/s
Iteration  27: 287599906.710 ops/s
Iteration  28: 287367648.935 ops/s
Iteration  29: 287253826.356 ops/s
Iteration  30: 287495788.046 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfyWith":
  288700533.584 ±(99.9%) 844685.264 ops/s [Average]
  (min, avg, max) = (286246366.807, 288700533.584, 291126266.305), stdev = 1264285.233
  CI (99.9%): [287855848.320, 289545218.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  288700533.584 ± 844685.264  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586923.912 ops/s
# Warmup Iteration   2: 1694769.774 ops/s
# Warmup Iteration   3: 1760198.593 ops/s
# Warmup Iteration   4: 1489329.893 ops/s
# Warmup Iteration   5: 1781837.800 ops/s
# Warmup Iteration   6: 1768211.214 ops/s
# Warmup Iteration   7: 1780801.519 ops/s
# Warmup Iteration   8: 1779904.528 ops/s
# Warmup Iteration   9: 1781754.072 ops/s
# Warmup Iteration  10: 1773758.731 ops/s
# Warmup Iteration  11: 1781916.507 ops/s
# Warmup Iteration  12: 1775531.682 ops/s
# Warmup Iteration  13: 1768817.994 ops/s
# Warmup Iteration  14: 1779742.603 ops/s
# Warmup Iteration  15: 1783065.072 ops/s
# Warmup Iteration  16: 1780733.448 ops/s
# Warmup Iteration  17: 1781621.988 ops/s
# Warmup Iteration  18: 1777754.402 ops/s
# Warmup Iteration  19: 1777365.345 ops/s
# Warmup Iteration  20: 1778313.456 ops/s
# Warmup Iteration  21: 1781401.028 ops/s
# Warmup Iteration  22: 1778992.925 ops/s
# Warmup Iteration  23: 1780460.262 ops/s
# Warmup Iteration  24: 1777993.570 ops/s
# Warmup Iteration  25: 1762260.401 ops/s
# Warmup Iteration  26: 1780741.676 ops/s
# Warmup Iteration  27: 1778655.722 ops/s
# Warmup Iteration  28: 1774986.419 ops/s
# Warmup Iteration  29: 1780302.126 ops/s
# Warmup Iteration  30: 1772787.221 ops/s
Iteration   1: 1773663.174 ops/s
Iteration   2: 1770917.156 ops/s
Iteration   3: 1759679.617 ops/s
Iteration   4: 1779662.360 ops/s
Iteration   5: 1779930.137 ops/s
Iteration   6: 1771955.158 ops/s
Iteration   7: 1779307.118 ops/s
Iteration   8: 1780817.185 ops/s
Iteration   9: 1780118.661 ops/s
Iteration  10: 1780680.298 ops/s
Iteration  11: 1780355.377 ops/s
Iteration  12: 1781372.958 ops/s
Iteration  13: 1782787.810 ops/s
Iteration  14: 1768976.197 ops/s
Iteration  15: 1770186.098 ops/s
Iteration  16: 1777024.501 ops/s
Iteration  17: 1777805.406 ops/s
Iteration  18: 1782446.018 ops/s
Iteration  19: 1774657.085 ops/s
Iteration  20: 1780308.356 ops/s
Iteration  21: 1783550.561 ops/s
Iteration  22: 1780404.911 ops/s
Iteration  23: 1781275.612 ops/s
Iteration  24: 1783015.180 ops/s
Iteration  25: 1758675.316 ops/s
Iteration  26: 1778961.281 ops/s
Iteration  27: 1772552.899 ops/s
Iteration  28: 1775859.074 ops/s
Iteration  29: 1781253.026 ops/s
Iteration  30: 1783605.943 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_parallelStream":
  1777060.149 ±(99.9%) 4271.091 ops/s [Average]
  (min, avg, max) = (1758675.316, 1777060.149, 1783605.943), stdev = 6392.768
  CI (99.9%): [1772789.058, 1781331.240] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_parallelStream  thrpt   30  1777060.149 ± 4271.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86651782.693 ops/s
# Warmup Iteration   2: 184582886.826 ops/s
# Warmup Iteration   3: 238547216.861 ops/s
# Warmup Iteration   4: 268902003.981 ops/s
# Warmup Iteration   5: 268742750.217 ops/s
# Warmup Iteration   6: 267770175.416 ops/s
# Warmup Iteration   7: 269514922.070 ops/s
# Warmup Iteration   8: 269284907.786 ops/s
# Warmup Iteration   9: 267318251.785 ops/s
# Warmup Iteration  10: 267752002.791 ops/s
# Warmup Iteration  11: 268780365.656 ops/s
# Warmup Iteration  12: 267331018.382 ops/s
# Warmup Iteration  13: 268136426.498 ops/s
# Warmup Iteration  14: 267295705.054 ops/s
# Warmup Iteration  15: 267633005.808 ops/s
# Warmup Iteration  16: 267304092.776 ops/s
# Warmup Iteration  17: 267953558.639 ops/s
# Warmup Iteration  18: 269419706.796 ops/s
# Warmup Iteration  19: 268567624.042 ops/s
# Warmup Iteration  20: 268817509.680 ops/s
# Warmup Iteration  21: 268447037.056 ops/s
# Warmup Iteration  22: 268728846.398 ops/s
# Warmup Iteration  23: 267730565.206 ops/s
# Warmup Iteration  24: 267624428.138 ops/s
# Warmup Iteration  25: 269095468.062 ops/s
# Warmup Iteration  26: 269369778.821 ops/s
# Warmup Iteration  27: 268527647.630 ops/s
# Warmup Iteration  28: 268890235.930 ops/s
# Warmup Iteration  29: 269385368.661 ops/s
# Warmup Iteration  30: 269211524.395 ops/s
Iteration   1: 267109710.688 ops/s
Iteration   2: 268630285.761 ops/s
Iteration   3: 268942167.917 ops/s
Iteration   4: 267642797.869 ops/s
Iteration   5: 270030620.975 ops/s
Iteration   6: 268326274.208 ops/s
Iteration   7: 265409418.081 ops/s
Iteration   8: 267411566.518 ops/s
Iteration   9: 269323368.688 ops/s
Iteration  10: 269306574.712 ops/s
Iteration  11: 269393355.412 ops/s
Iteration  12: 268946791.714 ops/s
Iteration  13: 268557624.055 ops/s
Iteration  14: 268770752.064 ops/s
Iteration  15: 268592663.129 ops/s
Iteration  16: 267814599.650 ops/s
Iteration  17: 267764196.813 ops/s
Iteration  18: 268696526.654 ops/s
Iteration  19: 267447719.600 ops/s
Iteration  20: 269479998.316 ops/s
Iteration  21: 267377667.781 ops/s
Iteration  22: 268235429.307 ops/s
Iteration  23: 268658165.381 ops/s
Iteration  24: 269419812.926 ops/s
Iteration  25: 268576619.132 ops/s
Iteration  26: 268752263.291 ops/s
Iteration  27: 269236055.196 ops/s
Iteration  28: 269196543.699 ops/s
Iteration  29: 269595108.553 ops/s
Iteration  30: 268236276.941 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partition":
  268496031.834 ±(99.9%) 633632.771 ops/s [Average]
  (min, avg, max) = (265409418.081, 268496031.834, 270030620.975), stdev = 948391.774
  CI (99.9%): [267862399.063, 269129664.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_partition  thrpt   30  268496031.834 ± 633632.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34924895.983 ops/s
# Warmup Iteration   2: 75097239.574 ops/s
# Warmup Iteration   3: 60438998.758 ops/s
# Warmup Iteration   4: 70672456.287 ops/s
# Warmup Iteration   5: 70620549.187 ops/s
# Warmup Iteration   6: 70850926.216 ops/s
# Warmup Iteration   7: 70893795.787 ops/s
# Warmup Iteration   8: 70752162.758 ops/s
# Warmup Iteration   9: 70612806.602 ops/s
# Warmup Iteration  10: 70934172.884 ops/s
# Warmup Iteration  11: 70233537.448 ops/s
# Warmup Iteration  12: 69568615.967 ops/s
# Warmup Iteration  13: 69685417.428 ops/s
# Warmup Iteration  14: 70770383.897 ops/s
# Warmup Iteration  15: 70813546.620 ops/s
# Warmup Iteration  16: 70383091.794 ops/s
# Warmup Iteration  17: 70756163.230 ops/s
# Warmup Iteration  18: 71159973.290 ops/s
# Warmup Iteration  19: 71041736.502 ops/s
# Warmup Iteration  20: 70068837.557 ops/s
# Warmup Iteration  21: 70875044.739 ops/s
# Warmup Iteration  22: 70483560.405 ops/s
# Warmup Iteration  23: 71321701.522 ops/s
# Warmup Iteration  24: 71174680.935 ops/s
# Warmup Iteration  25: 71144040.189 ops/s
# Warmup Iteration  26: 71394609.835 ops/s
# Warmup Iteration  27: 71138471.875 ops/s
# Warmup Iteration  28: 71015008.407 ops/s
# Warmup Iteration  29: 71105807.484 ops/s
# Warmup Iteration  30: 70816619.965 ops/s
Iteration   1: 70596755.414 ops/s
Iteration   2: 70024721.598 ops/s
Iteration   3: 70474714.101 ops/s
Iteration   4: 70004240.470 ops/s
Iteration   5: 71363310.576 ops/s
Iteration   6: 71444911.550 ops/s
Iteration   7: 71344552.387 ops/s
Iteration   8: 71473132.296 ops/s
Iteration   9: 70421657.744 ops/s
Iteration  10: 71336102.541 ops/s
Iteration  11: 70644173.413 ops/s
Iteration  12: 71493169.902 ops/s
Iteration  13: 71927512.343 ops/s
Iteration  14: 70398184.466 ops/s
Iteration  15: 70430102.715 ops/s
Iteration  16: 71036361.055 ops/s
Iteration  17: 70900887.820 ops/s
Iteration  18: 70908112.512 ops/s
Iteration  19: 71185796.510 ops/s
Iteration  20: 70843540.334 ops/s
Iteration  21: 71296731.985 ops/s
Iteration  22: 70303300.433 ops/s
Iteration  23: 70472012.702 ops/s
Iteration  24: 71239429.198 ops/s
Iteration  25: 71558494.875 ops/s
Iteration  26: 70418481.600 ops/s
Iteration  27: 70925149.631 ops/s
Iteration  28: 70668430.880 ops/s
Iteration  29: 70721619.612 ops/s
Iteration  30: 71090353.355 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWhile":
  70898198.134 ±(99.9%) 326995.739 ops/s [Average]
  (min, avg, max) = (70004240.470, 70898198.134, 71927512.343), stdev = 489431.865
  CI (99.9%): [70571202.395, 71225193.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_partitionWhile  thrpt   30  70898198.134 ± 326995.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28511939.353 ops/s
# Warmup Iteration   2: 62173209.638 ops/s
# Warmup Iteration   3: 50947829.251 ops/s
# Warmup Iteration   4: 60203208.942 ops/s
# Warmup Iteration   5: 61097116.321 ops/s
# Warmup Iteration   6: 60984118.427 ops/s
# Warmup Iteration   7: 60799972.497 ops/s
# Warmup Iteration   8: 60293080.235 ops/s
# Warmup Iteration   9: 60313626.933 ops/s
# Warmup Iteration  10: 60738894.353 ops/s
# Warmup Iteration  11: 60347625.206 ops/s
# Warmup Iteration  12: 60828385.403 ops/s
# Warmup Iteration  13: 60655488.991 ops/s
# Warmup Iteration  14: 60516595.654 ops/s
# Warmup Iteration  15: 60756295.028 ops/s
# Warmup Iteration  16: 61068792.646 ops/s
# Warmup Iteration  17: 60942290.197 ops/s
# Warmup Iteration  18: 60496182.623 ops/s
# Warmup Iteration  19: 60352874.900 ops/s
# Warmup Iteration  20: 60912475.465 ops/s
# Warmup Iteration  21: 60708649.752 ops/s
# Warmup Iteration  22: 60489434.213 ops/s
# Warmup Iteration  23: 60660536.601 ops/s
# Warmup Iteration  24: 60593957.207 ops/s
# Warmup Iteration  25: 60032643.893 ops/s
# Warmup Iteration  26: 60062666.933 ops/s
# Warmup Iteration  27: 60441218.198 ops/s
# Warmup Iteration  28: 60935714.912 ops/s
# Warmup Iteration  29: 61083859.573 ops/s
# Warmup Iteration  30: 60895864.345 ops/s
Iteration   1: 60527769.347 ops/s
Iteration   2: 60458629.322 ops/s
Iteration   3: 60836904.003 ops/s
Iteration   4: 60705955.913 ops/s
Iteration   5: 60798120.050 ops/s
Iteration   6: 61008288.902 ops/s
Iteration   7: 60857655.375 ops/s
Iteration   8: 60859582.763 ops/s
Iteration   9: 60785113.448 ops/s
Iteration  10: 60962905.158 ops/s
Iteration  11: 61061785.566 ops/s
Iteration  12: 60532987.589 ops/s
Iteration  13: 60144697.430 ops/s
Iteration  14: 60238401.838 ops/s
Iteration  15: 60532502.611 ops/s
Iteration  16: 60542132.003 ops/s
Iteration  17: 60808141.480 ops/s
Iteration  18: 60899161.205 ops/s
Iteration  19: 60460888.023 ops/s
Iteration  20: 60971028.504 ops/s
Iteration  21: 60835612.738 ops/s
Iteration  22: 59883693.082 ops/s
Iteration  23: 60505495.015 ops/s
Iteration  24: 60889759.229 ops/s
Iteration  25: 60383040.705 ops/s
Iteration  26: 60306528.380 ops/s
Iteration  27: 60518277.365 ops/s
Iteration  28: 60542887.071 ops/s
Iteration  29: 60859241.151 ops/s
Iteration  30: 60693581.483 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_partitionWith":
  60647025.558 ±(99.9%) 186759.916 ops/s [Average]
  (min, avg, max) = (59883693.082, 60647025.558, 61061785.566), stdev = 279533.472
  CI (99.9%): [60460265.642, 60833785.475] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_partitionWith  thrpt   30  60647025.558 ± 186759.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31940852.725 ops/s
# Warmup Iteration   2: 58325297.104 ops/s
# Warmup Iteration   3: 69498616.020 ops/s
# Warmup Iteration   4: 69228209.309 ops/s
# Warmup Iteration   5: 69012071.128 ops/s
# Warmup Iteration   6: 69064898.015 ops/s
# Warmup Iteration   7: 69064832.831 ops/s
# Warmup Iteration   8: 68808868.315 ops/s
# Warmup Iteration   9: 69572774.169 ops/s
# Warmup Iteration  10: 69281048.427 ops/s
# Warmup Iteration  11: 69300939.286 ops/s
# Warmup Iteration  12: 69413278.826 ops/s
# Warmup Iteration  13: 69479864.050 ops/s
# Warmup Iteration  14: 69178633.285 ops/s
# Warmup Iteration  15: 69457007.061 ops/s
# Warmup Iteration  16: 69718273.949 ops/s
# Warmup Iteration  17: 69737913.520 ops/s
# Warmup Iteration  18: 69608548.211 ops/s
# Warmup Iteration  19: 69595881.327 ops/s
# Warmup Iteration  20: 70073581.729 ops/s
# Warmup Iteration  21: 69364987.309 ops/s
# Warmup Iteration  22: 69404828.024 ops/s
# Warmup Iteration  23: 69812593.085 ops/s
# Warmup Iteration  24: 69823422.359 ops/s
# Warmup Iteration  25: 69663085.301 ops/s
# Warmup Iteration  26: 69174146.662 ops/s
# Warmup Iteration  27: 69488766.358 ops/s
# Warmup Iteration  28: 69772002.650 ops/s
# Warmup Iteration  29: 69605128.144 ops/s
# Warmup Iteration  30: 70092982.919 ops/s
Iteration   1: 69979514.985 ops/s
Iteration   2: 69316756.450 ops/s
Iteration   3: 69505393.033 ops/s
Iteration   4: 69800791.733 ops/s
Iteration   5: 69493800.125 ops/s
Iteration   6: 69690483.776 ops/s
Iteration   7: 69633505.792 ops/s
Iteration   8: 69707895.679 ops/s
Iteration   9: 69453967.914 ops/s
Iteration  10: 69154173.877 ops/s
Iteration  11: 68954412.914 ops/s
Iteration  12: 68806295.173 ops/s
Iteration  13: 69040452.797 ops/s
Iteration  14: 69005693.131 ops/s
Iteration  15: 69218542.241 ops/s
Iteration  16: 69917186.089 ops/s
Iteration  17: 68966099.334 ops/s
Iteration  18: 69621441.905 ops/s
Iteration  19: 69326846.341 ops/s
Iteration  20: 69060592.974 ops/s
Iteration  21: 69084242.305 ops/s
Iteration  22: 68964546.425 ops/s
Iteration  23: 69178262.794 ops/s
Iteration  24: 69611226.364 ops/s
Iteration  25: 68808407.616 ops/s
Iteration  26: 68343848.611 ops/s
Iteration  27: 69137684.173 ops/s
Iteration  28: 69519683.840 ops/s
Iteration  29: 68952489.777 ops/s
Iteration  30: 69196261.603 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject":
  69281683.326 ±(99.9%) 250227.800 ops/s [Average]
  (min, avg, max) = (68343848.611, 69281683.326, 69979514.985), stdev = 374529.219
  CI (99.9%): [69031455.526, 69531911.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_reject  thrpt   30  69281683.326 ± 250227.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14486899.452 ops/s
# Warmup Iteration   2: 38478119.237 ops/s
# Warmup Iteration   3: 31786804.360 ops/s
# Warmup Iteration   4: 37282211.073 ops/s
# Warmup Iteration   5: 37101478.997 ops/s
# Warmup Iteration   6: 37310858.091 ops/s
# Warmup Iteration   7: 37297743.889 ops/s
# Warmup Iteration   8: 37177675.353 ops/s
# Warmup Iteration   9: 37101722.115 ops/s
# Warmup Iteration  10: 37174210.099 ops/s
# Warmup Iteration  11: 37276177.535 ops/s
# Warmup Iteration  12: 37365062.845 ops/s
# Warmup Iteration  13: 37160197.344 ops/s
# Warmup Iteration  14: 37058077.245 ops/s
# Warmup Iteration  15: 37235514.952 ops/s
# Warmup Iteration  16: 37107294.668 ops/s
# Warmup Iteration  17: 36846309.800 ops/s
# Warmup Iteration  18: 36759695.898 ops/s
# Warmup Iteration  19: 36886648.149 ops/s
# Warmup Iteration  20: 36921594.284 ops/s
# Warmup Iteration  21: 36823214.821 ops/s
# Warmup Iteration  22: 36828174.230 ops/s
# Warmup Iteration  23: 37030383.499 ops/s
# Warmup Iteration  24: 36823762.674 ops/s
# Warmup Iteration  25: 36660294.090 ops/s
# Warmup Iteration  26: 36743290.333 ops/s
# Warmup Iteration  27: 36858937.258 ops/s
# Warmup Iteration  28: 36996394.449 ops/s
# Warmup Iteration  29: 36805929.827 ops/s
# Warmup Iteration  30: 36729847.306 ops/s
Iteration   1: 36936768.827 ops/s
Iteration   2: 37219837.362 ops/s
Iteration   3: 37123393.353 ops/s
Iteration   4: 37194267.231 ops/s
Iteration   5: 37173685.978 ops/s
Iteration   6: 37046304.945 ops/s
Iteration   7: 36886406.177 ops/s
Iteration   8: 36920670.629 ops/s
Iteration   9: 36868093.472 ops/s
Iteration  10: 36757343.451 ops/s
Iteration  11: 36474417.332 ops/s
Iteration  12: 36618205.116 ops/s
Iteration  13: 36584761.926 ops/s
Iteration  14: 36942224.070 ops/s
Iteration  15: 36963941.117 ops/s
Iteration  16: 36935535.351 ops/s
Iteration  17: 37110383.752 ops/s
Iteration  18: 35975336.387 ops/s
Iteration  19: 37113894.919 ops/s
Iteration  20: 36877245.103 ops/s
Iteration  21: 37032573.939 ops/s
Iteration  22: 36591587.325 ops/s
Iteration  23: 36928628.323 ops/s
Iteration  24: 36675124.535 ops/s
Iteration  25: 36631974.226 ops/s
Iteration  26: 37149540.986 ops/s
Iteration  27: 36617853.213 ops/s
Iteration  28: 36891781.203 ops/s
Iteration  29: 36928638.819 ops/s
Iteration  30: 37183812.800 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith":
  36878474.395 ±(99.9%) 180486.101 ops/s [Average]
  (min, avg, max) = (35975336.387, 36878474.395, 37219837.362), stdev = 270143.120
  CI (99.9%): [36697988.294, 37058960.497] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_rejectWith  thrpt   30  36878474.395 ± 180486.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 47546323.994 ops/s
# Warmup Iteration   2: 80333192.516 ops/s
# Warmup Iteration   3: 97117231.856 ops/s
# Warmup Iteration   4: 97475629.264 ops/s
# Warmup Iteration   5: 97130137.219 ops/s
# Warmup Iteration   6: 97128699.906 ops/s
# Warmup Iteration   7: 96885402.506 ops/s
# Warmup Iteration   8: 97628501.413 ops/s
# Warmup Iteration   9: 97115869.442 ops/s
# Warmup Iteration  10: 96892700.537 ops/s
# Warmup Iteration  11: 96659145.706 ops/s
# Warmup Iteration  12: 97240040.222 ops/s
# Warmup Iteration  13: 97554576.392 ops/s
# Warmup Iteration  14: 97614703.804 ops/s
# Warmup Iteration  15: 97549656.294 ops/s
# Warmup Iteration  16: 97429169.809 ops/s
# Warmup Iteration  17: 97495801.105 ops/s
# Warmup Iteration  18: 96601955.001 ops/s
# Warmup Iteration  19: 96998155.231 ops/s
# Warmup Iteration  20: 96700947.653 ops/s
# Warmup Iteration  21: 97579960.112 ops/s
# Warmup Iteration  22: 97206263.548 ops/s
# Warmup Iteration  23: 96242528.140 ops/s
# Warmup Iteration  24: 97058846.680 ops/s
# Warmup Iteration  25: 97077967.897 ops/s
# Warmup Iteration  26: 97051720.245 ops/s
# Warmup Iteration  27: 96249732.239 ops/s
# Warmup Iteration  28: 96992184.274 ops/s
# Warmup Iteration  29: 96806311.282 ops/s
# Warmup Iteration  30: 97778336.419 ops/s
Iteration   1: 97562284.318 ops/s
Iteration   2: 96705228.081 ops/s
Iteration   3: 97143755.642 ops/s
Iteration   4: 96784242.403 ops/s
Iteration   5: 97806034.680 ops/s
Iteration   6: 96511501.856 ops/s
Iteration   7: 97013861.568 ops/s
Iteration   8: 96711974.412 ops/s
Iteration   9: 97018350.501 ops/s
Iteration  10: 97337503.675 ops/s
Iteration  11: 97305562.295 ops/s
Iteration  12: 96973601.320 ops/s
Iteration  13: 97099968.350 ops/s
Iteration  14: 97147952.239 ops/s
Iteration  15: 96827330.000 ops/s
Iteration  16: 96844410.550 ops/s
Iteration  17: 97089523.976 ops/s
Iteration  18: 96893391.093 ops/s
Iteration  19: 97633725.928 ops/s
Iteration  20: 97566768.405 ops/s
Iteration  21: 97042608.619 ops/s
Iteration  22: 97081902.435 ops/s
Iteration  23: 97528122.674 ops/s
Iteration  24: 96836620.649 ops/s
Iteration  25: 97518460.240 ops/s
Iteration  26: 96046318.192 ops/s
Iteration  27: 96717309.819 ops/s
Iteration  28: 97002873.088 ops/s
Iteration  29: 97258955.089 ops/s
Iteration  30: 96758452.811 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndex":
  97058953.164 ±(99.9%) 250344.187 ops/s [Average]
  (min, avg, max) = (96046318.192, 97058953.164, 97806034.680), stdev = 374703.422
  CI (99.9%): [96808608.977, 97309297.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  97058953.164 ± 250344.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8156976.232 ops/s
# Warmup Iteration   2: 14826600.360 ops/s
# Warmup Iteration   3: 17609598.860 ops/s
# Warmup Iteration   4: 17747759.249 ops/s
# Warmup Iteration   5: 17782399.796 ops/s
# Warmup Iteration   6: 17556981.824 ops/s
# Warmup Iteration   7: 17461868.492 ops/s
# Warmup Iteration   8: 17485452.831 ops/s
# Warmup Iteration   9: 17683088.234 ops/s
# Warmup Iteration  10: 17585693.634 ops/s
# Warmup Iteration  11: 17525152.687 ops/s
# Warmup Iteration  12: 17698219.362 ops/s
# Warmup Iteration  13: 17735022.922 ops/s
# Warmup Iteration  14: 17660809.040 ops/s
# Warmup Iteration  15: 17658241.114 ops/s
# Warmup Iteration  16: 17663967.291 ops/s
# Warmup Iteration  17: 17729459.055 ops/s
# Warmup Iteration  18: 17698954.788 ops/s
# Warmup Iteration  19: 17656632.437 ops/s
# Warmup Iteration  20: 17682606.082 ops/s
# Warmup Iteration  21: 17730099.595 ops/s
# Warmup Iteration  22: 17544775.269 ops/s
# Warmup Iteration  23: 17605210.584 ops/s
# Warmup Iteration  24: 17633861.626 ops/s
# Warmup Iteration  25: 17487507.765 ops/s
# Warmup Iteration  26: 17644442.846 ops/s
# Warmup Iteration  27: 17663194.868 ops/s
# Warmup Iteration  28: 17697725.704 ops/s
# Warmup Iteration  29: 17626868.059 ops/s
# Warmup Iteration  30: 17737043.429 ops/s
Iteration   1: 17546960.925 ops/s
Iteration   2: 17797085.674 ops/s
Iteration   3: 17797960.389 ops/s
Iteration   4: 17891687.764 ops/s
Iteration   5: 17785532.777 ops/s
Iteration   6: 17683373.237 ops/s
Iteration   7: 17555425.711 ops/s
Iteration   8: 17899328.977 ops/s
Iteration   9: 17526895.048 ops/s
Iteration  10: 17870779.957 ops/s
Iteration  11: 17611621.100 ops/s
Iteration  12: 17940000.104 ops/s
Iteration  13: 17555490.440 ops/s
Iteration  14: 17444981.493 ops/s
Iteration  15: 17514320.348 ops/s
Iteration  16: 17693388.747 ops/s
Iteration  17: 17532142.723 ops/s
Iteration  18: 17616350.024 ops/s
Iteration  19: 17563223.908 ops/s
Iteration  20: 17571693.199 ops/s
Iteration  21: 17759740.793 ops/s
Iteration  22: 17310845.044 ops/s
Iteration  23: 17611838.212 ops/s
Iteration  24: 17293465.474 ops/s
Iteration  25: 17638868.186 ops/s
Iteration  26: 17408377.476 ops/s
Iteration  27: 17389065.153 ops/s
Iteration  28: 17704757.488 ops/s
Iteration  29: 17569924.878 ops/s
Iteration  30: 17739934.722 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  17627501.999 ±(99.9%) 113512.069 ops/s [Average]
  (min, avg, max) = (17293465.474, 17627501.999, 17940000.104), stdev = 169899.533
  CI (99.9%): [17513989.930, 17741014.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  17627501.999 ± 113512.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8910762.923 ops/s
# Warmup Iteration   2: 17564995.296 ops/s
# Warmup Iteration   3: 17089283.166 ops/s
# Warmup Iteration   4: 18981593.385 ops/s
# Warmup Iteration   5: 18919391.902 ops/s
# Warmup Iteration   6: 18946994.048 ops/s
# Warmup Iteration   7: 18906349.643 ops/s
# Warmup Iteration   8: 19013605.832 ops/s
# Warmup Iteration   9: 18928723.799 ops/s
# Warmup Iteration  10: 18927185.329 ops/s
# Warmup Iteration  11: 18942305.937 ops/s
# Warmup Iteration  12: 18764995.130 ops/s
# Warmup Iteration  13: 18680842.618 ops/s
# Warmup Iteration  14: 18841766.346 ops/s
# Warmup Iteration  15: 18929800.615 ops/s
# Warmup Iteration  16: 18882579.939 ops/s
# Warmup Iteration  17: 18752457.308 ops/s
# Warmup Iteration  18: 18943877.093 ops/s
# Warmup Iteration  19: 18863227.403 ops/s
# Warmup Iteration  20: 18855548.573 ops/s
# Warmup Iteration  21: 18827079.990 ops/s
# Warmup Iteration  22: 18815894.892 ops/s
# Warmup Iteration  23: 18724113.556 ops/s
# Warmup Iteration  24: 18897949.229 ops/s
# Warmup Iteration  25: 18971625.459 ops/s
# Warmup Iteration  26: 19021216.816 ops/s
# Warmup Iteration  27: 19020175.156 ops/s
# Warmup Iteration  28: 19016551.016 ops/s
# Warmup Iteration  29: 19027546.480 ops/s
# Warmup Iteration  30: 18985031.977 ops/s
Iteration   1: 19009030.493 ops/s
Iteration   2: 19112551.430 ops/s
Iteration   3: 19119228.702 ops/s
Iteration   4: 18988354.652 ops/s
Iteration   5: 19017197.317 ops/s
Iteration   6: 18984577.152 ops/s
Iteration   7: 18958043.246 ops/s
Iteration   8: 18972226.775 ops/s
Iteration   9: 19018852.558 ops/s
Iteration  10: 18975711.427 ops/s
Iteration  11: 18850176.693 ops/s
Iteration  12: 18807853.298 ops/s
Iteration  13: 18941711.765 ops/s
Iteration  14: 19040851.490 ops/s
Iteration  15: 18869610.651 ops/s
Iteration  16: 18829213.931 ops/s
Iteration  17: 18997650.742 ops/s
Iteration  18: 18853324.846 ops/s
Iteration  19: 18755517.409 ops/s
Iteration  20: 18978376.870 ops/s
Iteration  21: 18798644.891 ops/s
Iteration  22: 18902484.509 ops/s
Iteration  23: 18797968.491 ops/s
Iteration  24: 18915202.702 ops/s
Iteration  25: 18873659.731 ops/s
Iteration  26: 18767639.263 ops/s
Iteration  27: 18898621.262 ops/s
Iteration  28: 18936600.723 ops/s
Iteration  29: 18913681.742 ops/s
Iteration  30: 18989987.530 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_rejectWith_target":
  18929151.743 ±(99.9%) 63594.933 ops/s [Average]
  (min, avg, max) = (18755517.409, 18929151.743, 19119228.702), stdev = 95185.909
  CI (99.9%): [18865556.810, 18992746.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_rejectWith_target  thrpt   30  18929151.743 ± 63594.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31863387.582 ops/s
# Warmup Iteration   2: 57430617.902 ops/s
# Warmup Iteration   3: 68369404.714 ops/s
# Warmup Iteration   4: 68033084.604 ops/s
# Warmup Iteration   5: 68117502.768 ops/s
# Warmup Iteration   6: 68436881.491 ops/s
# Warmup Iteration   7: 67910566.323 ops/s
# Warmup Iteration   8: 68396656.603 ops/s
# Warmup Iteration   9: 68470567.999 ops/s
# Warmup Iteration  10: 68674868.682 ops/s
# Warmup Iteration  11: 68808310.320 ops/s
# Warmup Iteration  12: 68253678.202 ops/s
# Warmup Iteration  13: 68106304.161 ops/s
# Warmup Iteration  14: 68285512.784 ops/s
# Warmup Iteration  15: 68634562.955 ops/s
# Warmup Iteration  16: 68673664.775 ops/s
# Warmup Iteration  17: 67763778.855 ops/s
# Warmup Iteration  18: 68787386.627 ops/s
# Warmup Iteration  19: 68545892.580 ops/s
# Warmup Iteration  20: 68496356.976 ops/s
# Warmup Iteration  21: 68289780.449 ops/s
# Warmup Iteration  22: 68741887.694 ops/s
# Warmup Iteration  23: 68557506.674 ops/s
# Warmup Iteration  24: 68539499.574 ops/s
# Warmup Iteration  25: 68335157.428 ops/s
# Warmup Iteration  26: 68455472.499 ops/s
# Warmup Iteration  27: 68647690.321 ops/s
# Warmup Iteration  28: 68513552.723 ops/s
# Warmup Iteration  29: 68859414.707 ops/s
# Warmup Iteration  30: 68684578.613 ops/s
Iteration   1: 68606797.684 ops/s
Iteration   2: 68948312.819 ops/s
Iteration   3: 68828953.516 ops/s
Iteration   4: 68590699.818 ops/s
Iteration   5: 68318951.289 ops/s
Iteration   6: 68539842.032 ops/s
Iteration   7: 68841829.534 ops/s
Iteration   8: 68669007.070 ops/s
Iteration   9: 68724185.897 ops/s
Iteration  10: 68601605.736 ops/s
Iteration  11: 69066288.423 ops/s
Iteration  12: 68321773.828 ops/s
Iteration  13: 68375802.418 ops/s
Iteration  14: 68819702.049 ops/s
Iteration  15: 68343185.778 ops/s
Iteration  16: 68590020.880 ops/s
Iteration  17: 68589585.024 ops/s
Iteration  18: 68282002.220 ops/s
Iteration  19: 68408356.822 ops/s
Iteration  20: 68780298.117 ops/s
Iteration  21: 68617778.580 ops/s
Iteration  22: 68866562.256 ops/s
Iteration  23: 68434782.039 ops/s
Iteration  24: 68279607.907 ops/s
Iteration  25: 68454952.302 ops/s
Iteration  26: 68087021.944 ops/s
Iteration  27: 68898089.093 ops/s
Iteration  28: 68535577.461 ops/s
Iteration  29: 68724785.262 ops/s
Iteration  30: 68384712.853 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reject_target":
  68584369.022 ±(99.9%) 156840.473 ops/s [Average]
  (min, avg, max) = (68087021.944, 68584369.022, 69066288.423), stdev = 234751.455
  CI (99.9%): [68427528.548, 68741209.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_reject_target  thrpt   30  68584369.022 ± 156840.473  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747096.868 ops/s
# Warmup Iteration   2: 794064.349 ops/s
# Warmup Iteration   3: 1000691.126 ops/s
# Warmup Iteration   4: 1011420.431 ops/s
# Warmup Iteration   5: 1005354.235 ops/s
# Warmup Iteration   6: 999255.662 ops/s
# Warmup Iteration   7: 1008021.036 ops/s
# Warmup Iteration   8: 1008203.325 ops/s
# Warmup Iteration   9: 1010109.974 ops/s
# Warmup Iteration  10: 1005509.418 ops/s
# Warmup Iteration  11: 825262.907 ops/s
# Warmup Iteration  12: 882370.643 ops/s
# Warmup Iteration  13: 894004.284 ops/s
# Warmup Iteration  14: 1000610.293 ops/s
# Warmup Iteration  15: 999378.367 ops/s
# Warmup Iteration  16: 1000323.589 ops/s
# Warmup Iteration  17: 1062233.917 ops/s
# Warmup Iteration  18: 1059782.047 ops/s
# Warmup Iteration  19: 1055373.589 ops/s
# Warmup Iteration  20: 1056147.288 ops/s
# Warmup Iteration  21: 1063270.020 ops/s
# Warmup Iteration  22: 1064997.276 ops/s
# Warmup Iteration  23: 1061175.305 ops/s
# Warmup Iteration  24: 1066909.689 ops/s
# Warmup Iteration  25: 1062464.940 ops/s
# Warmup Iteration  26: 1069447.768 ops/s
# Warmup Iteration  27: 1067025.210 ops/s
# Warmup Iteration  28: 1062442.534 ops/s
# Warmup Iteration  29: 1067467.893 ops/s
# Warmup Iteration  30: 1054861.321 ops/s
Iteration   1: 1062894.302 ops/s
Iteration   2: 1062623.009 ops/s
Iteration   3: 1061094.280 ops/s
Iteration   4: 1070673.620 ops/s
Iteration   5: 1057292.550 ops/s
Iteration   6: 1061841.919 ops/s
Iteration   7: 1068755.056 ops/s
Iteration   8: 1059053.981 ops/s
Iteration   9: 1060608.791 ops/s
Iteration  10: 1066911.410 ops/s
Iteration  11: 1060474.760 ops/s
Iteration  12: 1060095.970 ops/s
Iteration  13: 1059169.179 ops/s
Iteration  14: 1060688.618 ops/s
Iteration  15: 1063116.450 ops/s
Iteration  16: 1063856.831 ops/s
Iteration  17: 1069237.230 ops/s
Iteration  18: 1067350.534 ops/s
Iteration  19: 1054405.606 ops/s
Iteration  20: 1057613.974 ops/s
Iteration  21: 1049739.414 ops/s
Iteration  22: 1060606.122 ops/s
Iteration  23: 1060183.745 ops/s
Iteration  24: 1064537.750 ops/s
Iteration  25: 1069623.964 ops/s
Iteration  26: 1058511.367 ops/s
Iteration  27: 1054848.014 ops/s
Iteration  28: 1067754.449 ops/s
Iteration  29: 1060152.584 ops/s
Iteration  30: 1059635.188 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_remove":
  1061778.356 ±(99.9%) 3240.423 ops/s [Average]
  (min, avg, max) = (1049739.414, 1061778.356, 1070673.620), stdev = 4850.114
  CI (99.9%): [1058537.932, 1065018.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_remove  thrpt   30  1061778.356 ± 3240.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744183.167 ops/s
# Warmup Iteration   2: 792297.690 ops/s
# Warmup Iteration   3: 988470.151 ops/s
# Warmup Iteration   4: 989364.790 ops/s
# Warmup Iteration   5: 998594.995 ops/s
# Warmup Iteration   6: 997079.837 ops/s
# Warmup Iteration   7: 1003518.059 ops/s
# Warmup Iteration   8: 998351.241 ops/s
# Warmup Iteration   9: 992833.749 ops/s
# Warmup Iteration  10: 998737.277 ops/s
# Warmup Iteration  11: 1001029.828 ops/s
# Warmup Iteration  12: 892778.450 ops/s
# Warmup Iteration  13: 956143.965 ops/s
# Warmup Iteration  14: 1003188.516 ops/s
# Warmup Iteration  15: 993071.067 ops/s
# Warmup Iteration  16: 996680.682 ops/s
# Warmup Iteration  17: 1065878.701 ops/s
# Warmup Iteration  18: 1055614.430 ops/s
# Warmup Iteration  19: 1057837.661 ops/s
# Warmup Iteration  20: 1059142.343 ops/s
# Warmup Iteration  21: 1071177.055 ops/s
# Warmup Iteration  22: 1066446.318 ops/s
# Warmup Iteration  23: 1071733.343 ops/s
# Warmup Iteration  24: 1067112.957 ops/s
# Warmup Iteration  25: 1072990.131 ops/s
# Warmup Iteration  26: 1073885.282 ops/s
# Warmup Iteration  27: 1070894.279 ops/s
# Warmup Iteration  28: 1063147.647 ops/s
# Warmup Iteration  29: 1058045.892 ops/s
# Warmup Iteration  30: 1066000.512 ops/s
Iteration   1: 1069732.964 ops/s
Iteration   2: 1073562.615 ops/s
Iteration   3: 1068307.690 ops/s
Iteration   4: 1076015.505 ops/s
Iteration   5: 1071363.089 ops/s
Iteration   6: 1066828.255 ops/s
Iteration   7: 1064875.758 ops/s
Iteration   8: 1064721.440 ops/s
Iteration   9: 1055146.930 ops/s
Iteration  10: 1065514.148 ops/s
Iteration  11: 1056547.970 ops/s
Iteration  12: 1064893.860 ops/s
Iteration  13: 1064608.524 ops/s
Iteration  14: 1069562.067 ops/s
Iteration  15: 1066280.386 ops/s
Iteration  16: 1077295.163 ops/s
Iteration  17: 1057340.931 ops/s
Iteration  18: 1057192.730 ops/s
Iteration  19: 1068999.250 ops/s
Iteration  20: 1057665.954 ops/s
Iteration  21: 1042986.611 ops/s
Iteration  22: 1052132.089 ops/s
Iteration  23: 1048311.908 ops/s
Iteration  24: 1051084.660 ops/s
Iteration  25: 1072270.152 ops/s
Iteration  26: 1079965.978 ops/s
Iteration  27: 1065240.011 ops/s
Iteration  28: 1064900.974 ops/s
Iteration  29: 1070622.027 ops/s
Iteration  30: 1065817.112 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAll":
  1064326.225 ±(99.9%) 5847.886 ops/s [Average]
  (min, avg, max) = (1042986.611, 1064326.225, 1079965.978), stdev = 8752.841
  CI (99.9%): [1058478.339, 1070174.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_removeAll  thrpt   30  1064326.225 ± 5847.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749405.782 ops/s
# Warmup Iteration   2: 793879.260 ops/s
# Warmup Iteration   3: 1002015.828 ops/s
# Warmup Iteration   4: 1010499.844 ops/s
# Warmup Iteration   5: 1018512.468 ops/s
# Warmup Iteration   6: 1012950.599 ops/s
# Warmup Iteration   7: 1021298.880 ops/s
# Warmup Iteration   8: 1024812.316 ops/s
# Warmup Iteration   9: 1026413.599 ops/s
# Warmup Iteration  10: 1021678.520 ops/s
# Warmup Iteration  11: 1026698.816 ops/s
# Warmup Iteration  12: 891240.634 ops/s
# Warmup Iteration  13: 990721.388 ops/s
# Warmup Iteration  14: 1024187.388 ops/s
# Warmup Iteration  15: 1013383.229 ops/s
# Warmup Iteration  16: 1024987.686 ops/s
# Warmup Iteration  17: 1085239.454 ops/s
# Warmup Iteration  18: 1085655.655 ops/s
# Warmup Iteration  19: 1081490.624 ops/s
# Warmup Iteration  20: 1085333.973 ops/s
# Warmup Iteration  21: 1083876.533 ops/s
# Warmup Iteration  22: 1082499.844 ops/s
# Warmup Iteration  23: 1081482.183 ops/s
# Warmup Iteration  24: 1077954.543 ops/s
# Warmup Iteration  25: 1068198.367 ops/s
# Warmup Iteration  26: 1075910.027 ops/s
# Warmup Iteration  27: 1079779.338 ops/s
# Warmup Iteration  28: 1083559.514 ops/s
# Warmup Iteration  29: 1083871.359 ops/s
# Warmup Iteration  30: 1083757.157 ops/s
Iteration   1: 1077954.392 ops/s
Iteration   2: 1084810.322 ops/s
Iteration   3: 1091456.255 ops/s
Iteration   4: 1080836.349 ops/s
Iteration   5: 1081471.554 ops/s
Iteration   6: 1067113.015 ops/s
Iteration   7: 1080489.700 ops/s
Iteration   8: 1077684.526 ops/s
Iteration   9: 1083627.822 ops/s
Iteration  10: 1073435.559 ops/s
Iteration  11: 1082404.700 ops/s
Iteration  12: 1084946.432 ops/s
Iteration  13: 1083364.055 ops/s
Iteration  14: 1074563.653 ops/s
Iteration  15: 1079032.388 ops/s
Iteration  16: 1073389.292 ops/s
Iteration  17: 1081413.294 ops/s
Iteration  18: 1072633.542 ops/s
Iteration  19: 1084284.928 ops/s
Iteration  20: 1087217.422 ops/s
Iteration  21: 1084167.521 ops/s
Iteration  22: 1089349.747 ops/s
Iteration  23: 1078971.570 ops/s
Iteration  24: 1080684.072 ops/s
Iteration  25: 1090534.795 ops/s
Iteration  26: 1078292.803 ops/s
Iteration  27: 1077663.810 ops/s
Iteration  28: 1079276.620 ops/s
Iteration  29: 1077893.771 ops/s
Iteration  30: 1070296.178 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_removeAtIndex":
  1080308.670 ±(99.9%) 3831.527 ops/s [Average]
  (min, avg, max) = (1067113.015, 1080308.670, 1091456.255), stdev = 5734.849
  CI (99.9%): [1076477.143, 1084140.196] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1080308.670 ± 3831.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747066.553 ops/s
# Warmup Iteration   2: 793272.879 ops/s
# Warmup Iteration   3: 1015448.187 ops/s
# Warmup Iteration   4: 1017579.801 ops/s
# Warmup Iteration   5: 1006837.124 ops/s
# Warmup Iteration   6: 1007354.069 ops/s
# Warmup Iteration   7: 1011595.530 ops/s
# Warmup Iteration   8: 1010539.271 ops/s
# Warmup Iteration   9: 1016221.113 ops/s
# Warmup Iteration  10: 991913.659 ops/s
# Warmup Iteration  11: 1022942.143 ops/s
# Warmup Iteration  12: 870637.164 ops/s
# Warmup Iteration  13: 1013153.299 ops/s
# Warmup Iteration  14: 1029971.252 ops/s
# Warmup Iteration  15: 1011440.700 ops/s
# Warmup Iteration  16: 1018246.365 ops/s
# Warmup Iteration  17: 1077613.557 ops/s
# Warmup Iteration  18: 1093864.884 ops/s
# Warmup Iteration  19: 1093522.312 ops/s
# Warmup Iteration  20: 1090004.881 ops/s
# Warmup Iteration  21: 1080421.559 ops/s
# Warmup Iteration  22: 1089258.830 ops/s
# Warmup Iteration  23: 1085236.845 ops/s
# Warmup Iteration  24: 1088943.595 ops/s
# Warmup Iteration  25: 1085106.981 ops/s
# Warmup Iteration  26: 1084192.309 ops/s
# Warmup Iteration  27: 1084345.467 ops/s
# Warmup Iteration  28: 1086448.316 ops/s
# Warmup Iteration  29: 1089076.211 ops/s
# Warmup Iteration  30: 1086926.374 ops/s
Iteration   1: 1091606.314 ops/s
Iteration   2: 1082182.909 ops/s
Iteration   3: 1090722.227 ops/s
Iteration   4: 1091128.610 ops/s
Iteration   5: 1058190.882 ops/s
Iteration   6: 1075482.186 ops/s
Iteration   7: 1086004.440 ops/s
Iteration   8: 1090488.170 ops/s
Iteration   9: 1085052.153 ops/s
Iteration  10: 1089419.811 ops/s
Iteration  11: 1088088.227 ops/s
Iteration  12: 1089296.139 ops/s
Iteration  13: 1081838.856 ops/s
Iteration  14: 1090908.832 ops/s
Iteration  15: 1085874.403 ops/s
Iteration  16: 1086864.479 ops/s
Iteration  17: 1096218.472 ops/s
Iteration  18: 1096715.454 ops/s
Iteration  19: 1090706.067 ops/s
Iteration  20: 1098228.481 ops/s
Iteration  21: 1093647.031 ops/s
Iteration  22: 1094124.611 ops/s
Iteration  23: 1092433.531 ops/s
Iteration  24: 1093841.162 ops/s
Iteration  25: 1084688.416 ops/s
Iteration  26: 1076786.686 ops/s
Iteration  27: 1082140.916 ops/s
Iteration  28: 1088629.494 ops/s
Iteration  29: 1081321.027 ops/s
Iteration  30: 1090703.375 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_replaceAll":
  1087444.445 ±(99.9%) 5229.660 ops/s [Average]
  (min, avg, max) = (1058190.882, 1087444.445, 1098228.481), stdev = 7827.509
  CI (99.9%): [1082214.785, 1092674.105] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_replaceAll  thrpt   30  1087444.445 ± 5229.660  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628940.235 ops/s
# Warmup Iteration   2: 764664.067 ops/s
# Warmup Iteration   3: 963361.456 ops/s
# Warmup Iteration   4: 963542.996 ops/s
# Warmup Iteration   5: 974996.356 ops/s
# Warmup Iteration   6: 973888.567 ops/s
# Warmup Iteration   7: 972412.764 ops/s
# Warmup Iteration   8: 967202.047 ops/s
# Warmup Iteration   9: 806630.759 ops/s
# Warmup Iteration  10: 971228.425 ops/s
# Warmup Iteration  11: 970544.050 ops/s
# Warmup Iteration  12: 966020.619 ops/s
# Warmup Iteration  13: 948637.549 ops/s
# Warmup Iteration  14: 969593.378 ops/s
# Warmup Iteration  15: 970983.719 ops/s
# Warmup Iteration  16: 971023.426 ops/s
# Warmup Iteration  17: 1020458.685 ops/s
# Warmup Iteration  18: 1018244.112 ops/s
# Warmup Iteration  19: 1021292.937 ops/s
# Warmup Iteration  20: 1016832.061 ops/s
# Warmup Iteration  21: 959307.306 ops/s
# Warmup Iteration  22: 1026439.027 ops/s
# Warmup Iteration  23: 1017767.754 ops/s
# Warmup Iteration  24: 1024549.987 ops/s
# Warmup Iteration  25: 1028103.329 ops/s
# Warmup Iteration  26: 1021947.788 ops/s
# Warmup Iteration  27: 1026429.634 ops/s
# Warmup Iteration  28: 1020095.296 ops/s
# Warmup Iteration  29: 1027276.161 ops/s
# Warmup Iteration  30: 1031523.931 ops/s
Iteration   1: 1035307.057 ops/s
Iteration   2: 1029471.588 ops/s
Iteration   3: 1032235.081 ops/s
Iteration   4: 1014939.487 ops/s
Iteration   5: 1030733.869 ops/s
Iteration   6: 1019612.108 ops/s
Iteration   7: 1026013.453 ops/s
Iteration   8: 1033287.718 ops/s
Iteration   9: 1029222.375 ops/s
Iteration  10: 1027986.897 ops/s
Iteration  11: 1026483.622 ops/s
Iteration  12: 1030752.314 ops/s
Iteration  13: 1030356.042 ops/s
Iteration  14: 1031659.937 ops/s
Iteration  15: 1031193.131 ops/s
Iteration  16: 1032022.659 ops/s
Iteration  17: 1033265.528 ops/s
Iteration  18: 1033431.693 ops/s
Iteration  19: 1030148.802 ops/s
Iteration  20: 1033820.567 ops/s
Iteration  21: 1032833.067 ops/s
Iteration  22: 1033628.005 ops/s
Iteration  23: 1034503.347 ops/s
Iteration  24: 1031173.760 ops/s
Iteration  25: 1032655.566 ops/s
Iteration  26: 1033165.047 ops/s
Iteration  27: 1031545.915 ops/s
Iteration  28: 1033068.866 ops/s
Iteration  29: 1033422.993 ops/s
Iteration  30: 1026229.612 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_retainAll":
  1030472.337 ±(99.9%) 2908.044 ops/s [Average]
  (min, avg, max) = (1014939.487, 1030472.337, 1035307.057), stdev = 4352.624
  CI (99.9%): [1027564.292, 1033380.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_retainAll  thrpt   30  1030472.337 ± 2908.044  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51560683.008 ops/s
# Warmup Iteration   2: 104513751.984 ops/s
# Warmup Iteration   3: 92581381.829 ops/s
# Warmup Iteration   4: 109290052.254 ops/s
# Warmup Iteration   5: 109589971.826 ops/s
# Warmup Iteration   6: 109473481.140 ops/s
# Warmup Iteration   7: 108329224.043 ops/s
# Warmup Iteration   8: 109398034.443 ops/s
# Warmup Iteration   9: 109332819.241 ops/s
# Warmup Iteration  10: 108949057.613 ops/s
# Warmup Iteration  11: 109213388.648 ops/s
# Warmup Iteration  12: 109082110.055 ops/s
# Warmup Iteration  13: 109188025.179 ops/s
# Warmup Iteration  14: 109467360.828 ops/s
# Warmup Iteration  15: 108147595.217 ops/s
# Warmup Iteration  16: 108479230.019 ops/s
# Warmup Iteration  17: 109978771.663 ops/s
# Warmup Iteration  18: 108508693.376 ops/s
# Warmup Iteration  19: 108969058.355 ops/s
# Warmup Iteration  20: 109530868.542 ops/s
# Warmup Iteration  21: 109071028.234 ops/s
# Warmup Iteration  22: 109138616.618 ops/s
# Warmup Iteration  23: 108797400.096 ops/s
# Warmup Iteration  24: 108711417.492 ops/s
# Warmup Iteration  25: 108617537.590 ops/s
# Warmup Iteration  26: 108956933.036 ops/s
# Warmup Iteration  27: 109575113.645 ops/s
# Warmup Iteration  28: 109067089.015 ops/s
# Warmup Iteration  29: 109402277.761 ops/s
# Warmup Iteration  30: 109882624.102 ops/s
Iteration   1: 109984931.653 ops/s
Iteration   2: 108590149.684 ops/s
Iteration   3: 109159455.060 ops/s
Iteration   4: 108704713.837 ops/s
Iteration   5: 110441703.629 ops/s
Iteration   6: 108524379.951 ops/s
Iteration   7: 109070264.627 ops/s
Iteration   8: 109795855.456 ops/s
Iteration   9: 109619652.853 ops/s
Iteration  10: 109146404.398 ops/s
Iteration  11: 110406700.831 ops/s
Iteration  12: 109934768.786 ops/s
Iteration  13: 110133242.438 ops/s
Iteration  14: 109349547.407 ops/s
Iteration  15: 110390979.310 ops/s
Iteration  16: 109657414.708 ops/s
Iteration  17: 108637832.710 ops/s
Iteration  18: 107707689.681 ops/s
Iteration  19: 108546394.145 ops/s
Iteration  20: 109460960.850 ops/s
Iteration  21: 108174515.971 ops/s
Iteration  22: 108706091.050 ops/s
Iteration  23: 108753424.908 ops/s
Iteration  24: 109386187.297 ops/s
Iteration  25: 108424076.341 ops/s
Iteration  26: 109909935.251 ops/s
Iteration  27: 109233983.726 ops/s
Iteration  28: 109794095.977 ops/s
Iteration  29: 110156851.110 ops/s
Iteration  30: 110251209.134 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEach":
  109335113.759 ±(99.9%) 493184.691 ops/s [Average]
  (min, avg, max) = (107707689.681, 109335113.759, 110441703.629), stdev = 738175.684
  CI (99.9%): [108841929.068, 109828298.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_reverseForEach  thrpt   30  109335113.759 ± 493184.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 152097040.508 ops/s
# Warmup Iteration   2: 302374970.945 ops/s
# Warmup Iteration   3: 266566147.368 ops/s
# Warmup Iteration   4: 308667402.785 ops/s
# Warmup Iteration   5: 311244040.526 ops/s
# Warmup Iteration   6: 312042813.637 ops/s
# Warmup Iteration   7: 310607031.861 ops/s
# Warmup Iteration   8: 310896351.704 ops/s
# Warmup Iteration   9: 310431541.070 ops/s
# Warmup Iteration  10: 306941263.265 ops/s
# Warmup Iteration  11: 310406368.521 ops/s
# Warmup Iteration  12: 309200556.616 ops/s
# Warmup Iteration  13: 310620915.386 ops/s
# Warmup Iteration  14: 311456166.238 ops/s
# Warmup Iteration  15: 312804168.966 ops/s
# Warmup Iteration  16: 311527990.830 ops/s
# Warmup Iteration  17: 310305925.598 ops/s
# Warmup Iteration  18: 308591219.678 ops/s
# Warmup Iteration  19: 310687703.695 ops/s
# Warmup Iteration  20: 312996334.293 ops/s
# Warmup Iteration  21: 311893868.045 ops/s
# Warmup Iteration  22: 311343817.028 ops/s
# Warmup Iteration  23: 309265356.904 ops/s
# Warmup Iteration  24: 310079523.274 ops/s
# Warmup Iteration  25: 309654814.523 ops/s
# Warmup Iteration  26: 307312610.518 ops/s
# Warmup Iteration  27: 309083753.809 ops/s
# Warmup Iteration  28: 310067336.688 ops/s
# Warmup Iteration  29: 309483986.252 ops/s
# Warmup Iteration  30: 310164232.118 ops/s
Iteration   1: 312020888.531 ops/s
Iteration   2: 309268918.340 ops/s
Iteration   3: 310482293.779 ops/s
Iteration   4: 308929997.227 ops/s
Iteration   5: 310372480.550 ops/s
Iteration   6: 312694185.554 ops/s
Iteration   7: 311941671.652 ops/s
Iteration   8: 311655105.242 ops/s
Iteration   9: 309162340.129 ops/s
Iteration  10: 308846072.636 ops/s
Iteration  11: 312492703.394 ops/s
Iteration  12: 312072835.011 ops/s
Iteration  13: 310718946.637 ops/s
Iteration  14: 310197169.917 ops/s
Iteration  15: 312871138.482 ops/s
Iteration  16: 312000739.447 ops/s
Iteration  17: 309260673.212 ops/s
Iteration  18: 308686112.106 ops/s
Iteration  19: 309546709.327 ops/s
Iteration  20: 312251448.238 ops/s
Iteration  21: 309349217.383 ops/s
Iteration  22: 311226025.572 ops/s
Iteration  23: 311315930.704 ops/s
Iteration  24: 312281263.625 ops/s
Iteration  25: 309674592.746 ops/s
Iteration  26: 308570579.326 ops/s
Iteration  27: 311407760.379 ops/s
Iteration  28: 311305913.271 ops/s
Iteration  29: 310768855.866 ops/s
Iteration  30: 309385851.507 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_reverseForEachWithIndex":
  310691947.326 ±(99.9%) 912528.361 ops/s [Average]
  (min, avg, max) = (308570579.326, 310691947.326, 312871138.482), stdev = 1365829.596
  CI (99.9%): [309779418.965, 311604475.688] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  310691947.326 ± 912528.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32971927.865 ops/s
# Warmup Iteration   2: 58246278.353 ops/s
# Warmup Iteration   3: 69275436.207 ops/s
# Warmup Iteration   4: 69042705.867 ops/s
# Warmup Iteration   5: 69520754.277 ops/s
# Warmup Iteration   6: 68574326.501 ops/s
# Warmup Iteration   7: 69833160.842 ops/s
# Warmup Iteration   8: 69235714.258 ops/s
# Warmup Iteration   9: 69439260.352 ops/s
# Warmup Iteration  10: 69460731.205 ops/s
# Warmup Iteration  11: 69276417.566 ops/s
# Warmup Iteration  12: 69486296.367 ops/s
# Warmup Iteration  13: 69146216.772 ops/s
# Warmup Iteration  14: 69245266.044 ops/s
# Warmup Iteration  15: 69096697.391 ops/s
# Warmup Iteration  16: 69187734.721 ops/s
# Warmup Iteration  17: 68913628.309 ops/s
# Warmup Iteration  18: 69071358.563 ops/s
# Warmup Iteration  19: 69708134.564 ops/s
# Warmup Iteration  20: 69382795.776 ops/s
# Warmup Iteration  21: 69494651.630 ops/s
# Warmup Iteration  22: 69019087.742 ops/s
# Warmup Iteration  23: 67560320.568 ops/s
# Warmup Iteration  24: 69851980.876 ops/s
# Warmup Iteration  25: 69634987.331 ops/s
# Warmup Iteration  26: 69314509.093 ops/s
# Warmup Iteration  27: 69620477.631 ops/s
# Warmup Iteration  28: 69772790.185 ops/s
# Warmup Iteration  29: 69505523.187 ops/s
# Warmup Iteration  30: 68993967.629 ops/s
Iteration   1: 69674133.056 ops/s
Iteration   2: 69033394.677 ops/s
Iteration   3: 69531083.229 ops/s
Iteration   4: 68653361.663 ops/s
Iteration   5: 69165856.811 ops/s
Iteration   6: 69611486.075 ops/s
Iteration   7: 69533035.628 ops/s
Iteration   8: 68660058.364 ops/s
Iteration   9: 70014261.208 ops/s
Iteration  10: 69642372.671 ops/s
Iteration  11: 69569552.458 ops/s
Iteration  12: 69369551.988 ops/s
Iteration  13: 69195940.958 ops/s
Iteration  14: 69250887.694 ops/s
Iteration  15: 69926753.497 ops/s
Iteration  16: 70081490.728 ops/s
Iteration  17: 70050249.278 ops/s
Iteration  18: 69625980.431 ops/s
Iteration  19: 69917969.828 ops/s
Iteration  20: 69089324.564 ops/s
Iteration  21: 68910718.642 ops/s
Iteration  22: 69551140.238 ops/s
Iteration  23: 69750081.637 ops/s
Iteration  24: 69471423.650 ops/s
Iteration  25: 69326181.689 ops/s
Iteration  26: 69591955.330 ops/s
Iteration  27: 69489919.754 ops/s
Iteration  28: 69422661.163 ops/s
Iteration  29: 69185480.783 ops/s
Iteration  30: 69596157.623 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select":
  69463082.177 ±(99.9%) 247045.537 ops/s [Average]
  (min, avg, max) = (68653361.663, 69463082.177, 70081490.728), stdev = 369766.157
  CI (99.9%): [69216036.641, 69710127.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_select  thrpt   30  69463082.177 ± 247045.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59372738.103 ops/s
# Warmup Iteration   2: 115430015.603 ops/s
# Warmup Iteration   3: 110341251.742 ops/s
# Warmup Iteration   4: 127032494.193 ops/s
# Warmup Iteration   5: 127310660.556 ops/s
# Warmup Iteration   6: 131368842.602 ops/s
# Warmup Iteration   7: 129513730.519 ops/s
# Warmup Iteration   8: 124677969.929 ops/s
# Warmup Iteration   9: 127862711.293 ops/s
# Warmup Iteration  10: 130785820.436 ops/s
# Warmup Iteration  11: 128207422.145 ops/s
# Warmup Iteration  12: 128730311.654 ops/s
# Warmup Iteration  13: 129502599.567 ops/s
# Warmup Iteration  14: 130146006.086 ops/s
# Warmup Iteration  15: 132105694.169 ops/s
# Warmup Iteration  16: 129901706.708 ops/s
# Warmup Iteration  17: 130356379.310 ops/s
# Warmup Iteration  18: 130383408.334 ops/s
# Warmup Iteration  19: 130721285.727 ops/s
# Warmup Iteration  20: 129578145.545 ops/s
# Warmup Iteration  21: 130115162.548 ops/s
# Warmup Iteration  22: 131958877.433 ops/s
# Warmup Iteration  23: 127928328.025 ops/s
# Warmup Iteration  24: 128767922.754 ops/s
# Warmup Iteration  25: 129265134.930 ops/s
# Warmup Iteration  26: 129341616.744 ops/s
# Warmup Iteration  27: 129608113.921 ops/s
# Warmup Iteration  28: 129339516.400 ops/s
# Warmup Iteration  29: 127830146.577 ops/s
# Warmup Iteration  30: 130593074.762 ops/s
Iteration   1: 128859393.691 ops/s
Iteration   2: 128612061.210 ops/s
Iteration   3: 127259375.724 ops/s
Iteration   4: 128352875.727 ops/s
Iteration   5: 128772578.990 ops/s
Iteration   6: 127209336.967 ops/s
Iteration   7: 130551580.426 ops/s
Iteration   8: 128535578.173 ops/s
Iteration   9: 130060955.883 ops/s
Iteration  10: 128022512.676 ops/s
Iteration  11: 129610849.142 ops/s
Iteration  12: 132718057.725 ops/s
Iteration  13: 129374030.457 ops/s
Iteration  14: 128941283.049 ops/s
Iteration  15: 130013011.658 ops/s
Iteration  16: 130555388.029 ops/s
Iteration  17: 128336357.715 ops/s
Iteration  18: 130544927.638 ops/s
Iteration  19: 129194687.894 ops/s
Iteration  20: 132370667.965 ops/s
Iteration  21: 132187624.454 ops/s
Iteration  22: 129034419.969 ops/s
Iteration  23: 130531103.631 ops/s
Iteration  24: 130520941.934 ops/s
Iteration  25: 132488829.313 ops/s
Iteration  26: 132601907.656 ops/s
Iteration  27: 129880501.885 ops/s
Iteration  28: 130861336.367 ops/s
Iteration  29: 130058022.440 ops/s
Iteration  30: 132688096.873 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectInstancesOf":
  129958276.509 ±(99.9%) 1074233.773 ops/s [Average]
  (min, avg, max) = (127209336.967, 129958276.509, 132718057.725), stdev = 1607862.662
  CI (99.9%): [128884042.736, 131032510.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  129958276.509 ± 1074233.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17577219.404 ops/s
# Warmup Iteration   2: 37670226.399 ops/s
# Warmup Iteration   3: 31924116.287 ops/s
# Warmup Iteration   4: 36954928.443 ops/s
# Warmup Iteration   5: 37261425.252 ops/s
# Warmup Iteration   6: 37181537.970 ops/s
# Warmup Iteration   7: 37283362.728 ops/s
# Warmup Iteration   8: 37385657.605 ops/s
# Warmup Iteration   9: 37374458.123 ops/s
# Warmup Iteration  10: 37397759.020 ops/s
# Warmup Iteration  11: 37296089.798 ops/s
# Warmup Iteration  12: 37253393.434 ops/s
# Warmup Iteration  13: 37281480.719 ops/s
# Warmup Iteration  14: 37392459.343 ops/s
# Warmup Iteration  15: 37222716.325 ops/s
# Warmup Iteration  16: 37254347.334 ops/s
# Warmup Iteration  17: 37519863.890 ops/s
# Warmup Iteration  18: 37458411.511 ops/s
# Warmup Iteration  19: 37284130.409 ops/s
# Warmup Iteration  20: 37013522.685 ops/s
# Warmup Iteration  21: 37251157.583 ops/s
# Warmup Iteration  22: 37013182.866 ops/s
# Warmup Iteration  23: 37196419.787 ops/s
# Warmup Iteration  24: 37129750.370 ops/s
# Warmup Iteration  25: 37020454.532 ops/s
# Warmup Iteration  26: 37218455.525 ops/s
# Warmup Iteration  27: 37245073.822 ops/s
# Warmup Iteration  28: 37069147.963 ops/s
# Warmup Iteration  29: 37165700.634 ops/s
# Warmup Iteration  30: 37347643.155 ops/s
Iteration   1: 37574602.878 ops/s
Iteration   2: 37386055.324 ops/s
Iteration   3: 37478052.016 ops/s
Iteration   4: 37201430.078 ops/s
Iteration   5: 37211879.932 ops/s
Iteration   6: 37337623.812 ops/s
Iteration   7: 37232832.605 ops/s
Iteration   8: 37244979.984 ops/s
Iteration   9: 37190992.928 ops/s
Iteration  10: 37291542.288 ops/s
Iteration  11: 37004154.124 ops/s
Iteration  12: 37345979.258 ops/s
Iteration  13: 37453565.961 ops/s
Iteration  14: 36788496.431 ops/s
Iteration  15: 37178027.298 ops/s
Iteration  16: 37344721.424 ops/s
Iteration  17: 37363891.784 ops/s
Iteration  18: 36767136.347 ops/s
Iteration  19: 36963739.303 ops/s
Iteration  20: 37037572.924 ops/s
Iteration  21: 36979935.487 ops/s
Iteration  22: 37170922.632 ops/s
Iteration  23: 37235349.816 ops/s
Iteration  24: 37271735.450 ops/s
Iteration  25: 37004592.376 ops/s
Iteration  26: 37282104.316 ops/s
Iteration  27: 36798580.494 ops/s
Iteration  28: 37129005.946 ops/s
Iteration  29: 36839773.125 ops/s
Iteration  30: 36810007.743 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith":
  37163976.136 ±(99.9%) 146993.086 ops/s [Average]
  (min, avg, max) = (36767136.347, 37163976.136, 37574602.878), stdev = 220012.348
  CI (99.9%): [37016983.050, 37310969.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_selectWith  thrpt   30  37163976.136 ± 146993.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 46294109.186 ops/s
# Warmup Iteration   2: 80604293.499 ops/s
# Warmup Iteration   3: 98311011.642 ops/s
# Warmup Iteration   4: 96877369.963 ops/s
# Warmup Iteration   5: 98120592.820 ops/s
# Warmup Iteration   6: 97795011.098 ops/s
# Warmup Iteration   7: 97860037.146 ops/s
# Warmup Iteration   8: 97378669.060 ops/s
# Warmup Iteration   9: 98048630.452 ops/s
# Warmup Iteration  10: 98075351.695 ops/s
# Warmup Iteration  11: 98345805.992 ops/s
# Warmup Iteration  12: 97737030.403 ops/s
# Warmup Iteration  13: 97532336.393 ops/s
# Warmup Iteration  14: 97944671.167 ops/s
# Warmup Iteration  15: 98620296.077 ops/s
# Warmup Iteration  16: 98273084.437 ops/s
# Warmup Iteration  17: 98345780.342 ops/s
# Warmup Iteration  18: 97740048.627 ops/s
# Warmup Iteration  19: 96330361.311 ops/s
# Warmup Iteration  20: 97550081.606 ops/s
# Warmup Iteration  21: 97664679.557 ops/s
# Warmup Iteration  22: 98509484.245 ops/s
# Warmup Iteration  23: 98285085.190 ops/s
# Warmup Iteration  24: 97451805.771 ops/s
# Warmup Iteration  25: 98182748.648 ops/s
# Warmup Iteration  26: 98518856.026 ops/s
# Warmup Iteration  27: 98224693.805 ops/s
# Warmup Iteration  28: 98179379.963 ops/s
# Warmup Iteration  29: 97988797.985 ops/s
# Warmup Iteration  30: 97959537.931 ops/s
Iteration   1: 97579676.960 ops/s
Iteration   2: 98279070.869 ops/s
Iteration   3: 98284150.545 ops/s
Iteration   4: 98169350.882 ops/s
Iteration   5: 97815127.780 ops/s
Iteration   6: 98436373.523 ops/s
Iteration   7: 97832877.040 ops/s
Iteration   8: 97940195.571 ops/s
Iteration   9: 98237675.294 ops/s
Iteration  10: 98355333.299 ops/s
Iteration  11: 98284029.608 ops/s
Iteration  12: 97725166.271 ops/s
Iteration  13: 98209890.053 ops/s
Iteration  14: 98078562.616 ops/s
Iteration  15: 97358544.572 ops/s
Iteration  16: 98073993.572 ops/s
Iteration  17: 98219754.439 ops/s
Iteration  18: 98214280.333 ops/s
Iteration  19: 96657423.208 ops/s
Iteration  20: 96905773.567 ops/s
Iteration  21: 98000480.580 ops/s
Iteration  22: 97076250.992 ops/s
Iteration  23: 97669533.578 ops/s
Iteration  24: 97370963.410 ops/s
Iteration  25: 97865885.374 ops/s
Iteration  26: 97999616.725 ops/s
Iteration  27: 98632492.599 ops/s
Iteration  28: 98477802.839 ops/s
Iteration  29: 98069814.063 ops/s
Iteration  30: 98010933.396 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndex":
  97927700.785 ±(99.9%) 313200.035 ops/s [Average]
  (min, avg, max) = (96657423.208, 97927700.785, 98632492.599), stdev = 468783.104
  CI (99.9%): [97614500.750, 98240900.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndex  thrpt   30  97927700.785 ± 313200.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8102070.715 ops/s
# Warmup Iteration   2: 14869679.415 ops/s
# Warmup Iteration   3: 17417999.009 ops/s
# Warmup Iteration   4: 17393059.524 ops/s
# Warmup Iteration   5: 17469449.294 ops/s
# Warmup Iteration   6: 17279936.266 ops/s
# Warmup Iteration   7: 17397238.913 ops/s
# Warmup Iteration   8: 17547214.518 ops/s
# Warmup Iteration   9: 17404011.124 ops/s
# Warmup Iteration  10: 17466752.671 ops/s
# Warmup Iteration  11: 17410532.183 ops/s
# Warmup Iteration  12: 17590423.934 ops/s
# Warmup Iteration  13: 17562937.849 ops/s
# Warmup Iteration  14: 17493742.894 ops/s
# Warmup Iteration  15: 17531830.255 ops/s
# Warmup Iteration  16: 17453157.782 ops/s
# Warmup Iteration  17: 17404695.335 ops/s
# Warmup Iteration  18: 17375298.908 ops/s
# Warmup Iteration  19: 17625158.173 ops/s
# Warmup Iteration  20: 17489701.693 ops/s
# Warmup Iteration  21: 17537211.174 ops/s
# Warmup Iteration  22: 17424910.289 ops/s
# Warmup Iteration  23: 17543105.948 ops/s
# Warmup Iteration  24: 17405845.672 ops/s
# Warmup Iteration  25: 17356815.908 ops/s
# Warmup Iteration  26: 17412269.975 ops/s
# Warmup Iteration  27: 17352263.359 ops/s
# Warmup Iteration  28: 17445457.744 ops/s
# Warmup Iteration  29: 17453803.504 ops/s
# Warmup Iteration  30: 17389094.510 ops/s
Iteration   1: 17646438.608 ops/s
Iteration   2: 17522571.353 ops/s
Iteration   3: 17389427.878 ops/s
Iteration   4: 17325093.631 ops/s
Iteration   5: 17393034.860 ops/s
Iteration   6: 17332902.138 ops/s
Iteration   7: 17524592.279 ops/s
Iteration   8: 17540206.709 ops/s
Iteration   9: 17492441.522 ops/s
Iteration  10: 17571653.508 ops/s
Iteration  11: 17665852.366 ops/s
Iteration  12: 17694248.970 ops/s
Iteration  13: 17347018.959 ops/s
Iteration  14: 17524472.745 ops/s
Iteration  15: 17248169.381 ops/s
Iteration  16: 17477361.422 ops/s
Iteration  17: 17593087.676 ops/s
Iteration  18: 17636671.527 ops/s
Iteration  19: 17427032.594 ops/s
Iteration  20: 17449387.514 ops/s
Iteration  21: 17560310.345 ops/s
Iteration  22: 17535669.442 ops/s
Iteration  23: 17389349.542 ops/s
Iteration  24: 17379437.084 ops/s
Iteration  25: 17404594.511 ops/s
Iteration  26: 17331990.980 ops/s
Iteration  27: 17483158.836 ops/s
Iteration  28: 17652608.971 ops/s
Iteration  29: 17607375.817 ops/s
Iteration  30: 17477428.073 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndexWithTarget":
  17487452.975 ±(99.9%) 78452.002 ops/s [Average]
  (min, avg, max) = (17248169.381, 17487452.975, 17694248.970), stdev = 117423.273
  CI (99.9%): [17409000.972, 17565904.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  17487452.975 ± 78452.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9068585.833 ops/s
# Warmup Iteration   2: 17520411.602 ops/s
# Warmup Iteration   3: 17472158.533 ops/s
# Warmup Iteration   4: 19009702.033 ops/s
# Warmup Iteration   5: 18918340.707 ops/s
# Warmup Iteration   6: 18902136.644 ops/s
# Warmup Iteration   7: 18854820.973 ops/s
# Warmup Iteration   8: 18882956.602 ops/s
# Warmup Iteration   9: 18955064.879 ops/s
# Warmup Iteration  10: 19042308.575 ops/s
# Warmup Iteration  11: 19016861.628 ops/s
# Warmup Iteration  12: 18766840.339 ops/s
# Warmup Iteration  13: 18797951.849 ops/s
# Warmup Iteration  14: 19061342.493 ops/s
# Warmup Iteration  15: 18964593.174 ops/s
# Warmup Iteration  16: 19010257.918 ops/s
# Warmup Iteration  17: 18936822.944 ops/s
# Warmup Iteration  18: 19059933.555 ops/s
# Warmup Iteration  19: 18962920.813 ops/s
# Warmup Iteration  20: 18932731.474 ops/s
# Warmup Iteration  21: 19068009.756 ops/s
# Warmup Iteration  22: 19004899.036 ops/s
# Warmup Iteration  23: 18984813.081 ops/s
# Warmup Iteration  24: 19056822.807 ops/s
# Warmup Iteration  25: 18925511.386 ops/s
# Warmup Iteration  26: 18912621.578 ops/s
# Warmup Iteration  27: 18988992.919 ops/s
# Warmup Iteration  28: 18987266.165 ops/s
# Warmup Iteration  29: 18967034.103 ops/s
# Warmup Iteration  30: 18930758.814 ops/s
Iteration   1: 18761350.962 ops/s
Iteration   2: 18927397.687 ops/s
Iteration   3: 19006408.730 ops/s
Iteration   4: 18982525.703 ops/s
Iteration   5: 18908871.668 ops/s
Iteration   6: 18909294.042 ops/s
Iteration   7: 19142569.027 ops/s
Iteration   8: 19003202.473 ops/s
Iteration   9: 18932241.755 ops/s
Iteration  10: 19040697.973 ops/s
Iteration  11: 18912581.844 ops/s
Iteration  12: 18939277.510 ops/s
Iteration  13: 18875378.261 ops/s
Iteration  14: 18995613.716 ops/s
Iteration  15: 18826666.549 ops/s
Iteration  16: 18954871.293 ops/s
Iteration  17: 18874592.590 ops/s
Iteration  18: 18755569.558 ops/s
Iteration  19: 18829075.884 ops/s
Iteration  20: 19091230.089 ops/s
Iteration  21: 19085714.674 ops/s
Iteration  22: 18975833.121 ops/s
Iteration  23: 19006186.846 ops/s
Iteration  24: 18901006.086 ops/s
Iteration  25: 18898611.304 ops/s
Iteration  26: 19042863.923 ops/s
Iteration  27: 19156922.675 ops/s
Iteration  28: 19087014.367 ops/s
Iteration  29: 18860222.414 ops/s
Iteration  30: 18945510.944 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_selectWith_target":
  18954310.122 ±(99.9%) 67910.397 ops/s [Average]
  (min, avg, max) = (18755569.558, 18954310.122, 19156922.675), stdev = 101645.093
  CI (99.9%): [18886399.725, 19022220.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_selectWith_target  thrpt   30  18954310.122 ± 67910.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32275275.561 ops/s
# Warmup Iteration   2: 56765250.312 ops/s
# Warmup Iteration   3: 70200543.178 ops/s
# Warmup Iteration   4: 70734523.568 ops/s
# Warmup Iteration   5: 70131319.679 ops/s
# Warmup Iteration   6: 70058742.329 ops/s
# Warmup Iteration   7: 70115671.674 ops/s
# Warmup Iteration   8: 70183554.993 ops/s
# Warmup Iteration   9: 69856762.757 ops/s
# Warmup Iteration  10: 70206189.799 ops/s
# Warmup Iteration  11: 70506736.275 ops/s
# Warmup Iteration  12: 69316587.463 ops/s
# Warmup Iteration  13: 69945537.258 ops/s
# Warmup Iteration  14: 69761507.227 ops/s
# Warmup Iteration  15: 70317729.367 ops/s
# Warmup Iteration  16: 70489562.172 ops/s
# Warmup Iteration  17: 69815094.986 ops/s
# Warmup Iteration  18: 70205645.734 ops/s
# Warmup Iteration  19: 70351043.493 ops/s
# Warmup Iteration  20: 70227695.920 ops/s
# Warmup Iteration  21: 70412996.974 ops/s
# Warmup Iteration  22: 70298531.140 ops/s
# Warmup Iteration  23: 70018693.714 ops/s
# Warmup Iteration  24: 70163097.403 ops/s
# Warmup Iteration  25: 69816343.368 ops/s
# Warmup Iteration  26: 70021223.282 ops/s
# Warmup Iteration  27: 70301279.421 ops/s
# Warmup Iteration  28: 69947198.017 ops/s
# Warmup Iteration  29: 70070453.065 ops/s
# Warmup Iteration  30: 69918723.337 ops/s
Iteration   1: 69157478.511 ops/s
Iteration   2: 69110267.327 ops/s
Iteration   3: 69232028.943 ops/s
Iteration   4: 70126849.237 ops/s
Iteration   5: 70138469.543 ops/s
Iteration   6: 70557570.778 ops/s
Iteration   7: 70241316.435 ops/s
Iteration   8: 70015682.090 ops/s
Iteration   9: 69787691.873 ops/s
Iteration  10: 70546336.535 ops/s
Iteration  11: 69960467.899 ops/s
Iteration  12: 70229289.284 ops/s
Iteration  13: 70302397.421 ops/s
Iteration  14: 70213595.933 ops/s
Iteration  15: 69659934.777 ops/s
Iteration  16: 70263437.611 ops/s
Iteration  17: 70181558.032 ops/s
Iteration  18: 70201221.120 ops/s
Iteration  19: 70162987.988 ops/s
Iteration  20: 70819441.817 ops/s
Iteration  21: 70465182.107 ops/s
Iteration  22: 70319962.489 ops/s
Iteration  23: 70153541.858 ops/s
Iteration  24: 70103886.719 ops/s
Iteration  25: 70015306.145 ops/s
Iteration  26: 69471585.544 ops/s
Iteration  27: 69959851.401 ops/s
Iteration  28: 69673575.616 ops/s
Iteration  29: 69431573.301 ops/s
Iteration  30: 70522186.633 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_select_target":
  70034155.832 ±(99.9%) 285316.349 ops/s [Average]
  (min, avg, max) = (69110267.327, 70034155.832, 70819441.817), stdev = 427048.112
  CI (99.9%): [69748839.483, 70319472.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_select_target  thrpt   30  70034155.832 ± 285316.349  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 748841.912 ops/s
# Warmup Iteration   2: 798775.467 ops/s
# Warmup Iteration   3: 1025667.945 ops/s
# Warmup Iteration   4: 1047949.863 ops/s
# Warmup Iteration   5: 1045875.905 ops/s
# Warmup Iteration   6: 1034364.971 ops/s
# Warmup Iteration   7: 1037961.412 ops/s
# Warmup Iteration   8: 1041689.321 ops/s
# Warmup Iteration   9: 1044199.657 ops/s
# Warmup Iteration  10: 1048181.921 ops/s
# Warmup Iteration  11: 1049833.295 ops/s
# Warmup Iteration  12: 885576.842 ops/s
# Warmup Iteration  13: 1041525.352 ops/s
# Warmup Iteration  14: 1052018.148 ops/s
# Warmup Iteration  15: 1045953.554 ops/s
# Warmup Iteration  16: 1050165.783 ops/s
# Warmup Iteration  17: 1112008.741 ops/s
# Warmup Iteration  18: 1114251.215 ops/s
# Warmup Iteration  19: 1111479.426 ops/s
# Warmup Iteration  20: 1105683.494 ops/s
# Warmup Iteration  21: 1110590.681 ops/s
# Warmup Iteration  22: 1113774.291 ops/s
# Warmup Iteration  23: 1109647.473 ops/s
# Warmup Iteration  24: 1107505.296 ops/s
# Warmup Iteration  25: 1107996.624 ops/s
# Warmup Iteration  26: 1111199.004 ops/s
# Warmup Iteration  27: 1111342.237 ops/s
# Warmup Iteration  28: 1105664.850 ops/s
# Warmup Iteration  29: 1109786.931 ops/s
# Warmup Iteration  30: 1103679.962 ops/s
Iteration   1: 1113407.460 ops/s
Iteration   2: 1106556.228 ops/s
Iteration   3: 1102530.454 ops/s
Iteration   4: 1103298.357 ops/s
Iteration   5: 1101612.617 ops/s
Iteration   6: 1099921.434 ops/s
Iteration   7: 1113314.607 ops/s
Iteration   8: 1110740.694 ops/s
Iteration   9: 1109017.893 ops/s
Iteration  10: 1106447.817 ops/s
Iteration  11: 1110307.807 ops/s
Iteration  12: 1110274.114 ops/s
Iteration  13: 1112512.956 ops/s
Iteration  14: 1104977.836 ops/s
Iteration  15: 1107370.226 ops/s
Iteration  16: 1099859.875 ops/s
Iteration  17: 1102483.211 ops/s
Iteration  18: 1098031.753 ops/s
Iteration  19: 1112441.728 ops/s
Iteration  20: 1109659.766 ops/s
Iteration  21: 1112632.697 ops/s
Iteration  22: 1116860.635 ops/s
Iteration  23: 1102101.952 ops/s
Iteration  24: 1111978.359 ops/s
Iteration  25: 1110931.173 ops/s
Iteration  26: 1099181.449 ops/s
Iteration  27: 1112251.519 ops/s
Iteration  28: 1109706.003 ops/s
Iteration  29: 1112326.790 ops/s
Iteration  30: 1113503.474 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_set":
  1107874.696 ±(99.9%) 3495.963 ops/s [Average]
  (min, avg, max) = (1098031.753, 1107874.696, 1116860.635), stdev = 5232.593
  CI (99.9%): [1104378.733, 1111370.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_set  thrpt   30  1107874.696 ± 3495.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750947.973 ops/s
# Warmup Iteration   2: 796427.736 ops/s
# Warmup Iteration   3: 1016030.192 ops/s
# Warmup Iteration   4: 1037761.021 ops/s
# Warmup Iteration   5: 1044691.659 ops/s
# Warmup Iteration   6: 1031543.660 ops/s
# Warmup Iteration   7: 1037737.869 ops/s
# Warmup Iteration   8: 1039213.836 ops/s
# Warmup Iteration   9: 1042945.619 ops/s
# Warmup Iteration  10: 1045883.891 ops/s
# Warmup Iteration  11: 1044684.057 ops/s
# Warmup Iteration  12: 889984.130 ops/s
# Warmup Iteration  13: 1030328.419 ops/s
# Warmup Iteration  14: 1046720.908 ops/s
# Warmup Iteration  15: 1040104.741 ops/s
# Warmup Iteration  16: 1045648.296 ops/s
# Warmup Iteration  17: 1105246.771 ops/s
# Warmup Iteration  18: 1104838.828 ops/s
# Warmup Iteration  19: 1113247.232 ops/s
# Warmup Iteration  20: 1106489.176 ops/s
# Warmup Iteration  21: 1105587.843 ops/s
# Warmup Iteration  22: 1106443.192 ops/s
# Warmup Iteration  23: 1105710.799 ops/s
# Warmup Iteration  24: 1114402.871 ops/s
# Warmup Iteration  25: 1114784.289 ops/s
# Warmup Iteration  26: 1112673.729 ops/s
# Warmup Iteration  27: 1107756.622 ops/s
# Warmup Iteration  28: 1113650.740 ops/s
# Warmup Iteration  29: 1109376.535 ops/s
# Warmup Iteration  30: 1106979.852 ops/s
Iteration   1: 1112021.869 ops/s
Iteration   2: 1103805.097 ops/s
Iteration   3: 1117618.229 ops/s
Iteration   4: 1112588.069 ops/s
Iteration   5: 1113776.115 ops/s
Iteration   6: 1113369.148 ops/s
Iteration   7: 1118423.704 ops/s
Iteration   8: 1114671.914 ops/s
Iteration   9: 1113259.531 ops/s
Iteration  10: 1106108.750 ops/s
Iteration  11: 1114355.287 ops/s
Iteration  12: 1106623.971 ops/s
Iteration  13: 1108772.579 ops/s
Iteration  14: 1109089.962 ops/s
Iteration  15: 1112826.152 ops/s
Iteration  16: 1110657.589 ops/s
Iteration  17: 1114453.814 ops/s
Iteration  18: 1109517.736 ops/s
Iteration  19: 1110645.229 ops/s
Iteration  20: 1104800.277 ops/s
Iteration  21: 1104039.459 ops/s
Iteration  22: 1104612.917 ops/s
Iteration  23: 1101130.348 ops/s
Iteration  24: 1107302.681 ops/s
Iteration  25: 1109023.217 ops/s
Iteration  26: 1109934.448 ops/s
Iteration  27: 1112326.522 ops/s
Iteration  28: 1106564.717 ops/s
Iteration  29: 1110506.216 ops/s
Iteration  30: 1105716.320 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sort":
  1109951.396 ±(99.9%) 2848.668 ops/s [Average]
  (min, avg, max) = (1101130.348, 1109951.396, 1118423.704), stdev = 4263.752
  CI (99.9%): [1107102.728, 1112800.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sort  thrpt   30  1109951.396 ± 2848.668  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 738891.030 ops/s
# Warmup Iteration   2: 2273356.801 ops/s
# Warmup Iteration   3: 2173420.328 ops/s
# Warmup Iteration   4: 2002904.142 ops/s
# Warmup Iteration   5: 2283345.713 ops/s
# Warmup Iteration   6: 2290099.647 ops/s
# Warmup Iteration   7: 2300892.337 ops/s
# Warmup Iteration   8: 2290049.232 ops/s
# Warmup Iteration   9: 2289161.832 ops/s
# Warmup Iteration  10: 2273503.856 ops/s
# Warmup Iteration  11: 2295118.829 ops/s
# Warmup Iteration  12: 2275502.543 ops/s
# Warmup Iteration  13: 2287896.418 ops/s
# Warmup Iteration  14: 2284112.500 ops/s
# Warmup Iteration  15: 2293701.206 ops/s
# Warmup Iteration  16: 2285765.806 ops/s
# Warmup Iteration  17: 2286567.253 ops/s
# Warmup Iteration  18: 2284010.224 ops/s
# Warmup Iteration  19: 2292011.009 ops/s
# Warmup Iteration  20: 2290988.217 ops/s
# Warmup Iteration  21: 2281542.661 ops/s
# Warmup Iteration  22: 2284276.720 ops/s
# Warmup Iteration  23: 2286109.517 ops/s
# Warmup Iteration  24: 2290990.274 ops/s
# Warmup Iteration  25: 2286957.504 ops/s
# Warmup Iteration  26: 2284857.422 ops/s
# Warmup Iteration  27: 2277129.605 ops/s
# Warmup Iteration  28: 2276332.789 ops/s
# Warmup Iteration  29: 2285854.704 ops/s
# Warmup Iteration  30: 2293069.566 ops/s
Iteration   1: 2295868.964 ops/s
Iteration   2: 2291418.758 ops/s
Iteration   3: 2287700.404 ops/s
Iteration   4: 2292119.601 ops/s
Iteration   5: 2288777.600 ops/s
Iteration   6: 2271117.115 ops/s
Iteration   7: 2255373.075 ops/s
Iteration   8: 2293433.563 ops/s
Iteration   9: 2276490.674 ops/s
Iteration  10: 2293407.562 ops/s
Iteration  11: 2285812.489 ops/s
Iteration  12: 2283389.749 ops/s
Iteration  13: 2281602.902 ops/s
Iteration  14: 2292688.892 ops/s
Iteration  15: 2280312.644 ops/s
Iteration  16: 2294389.300 ops/s
Iteration  17: 2286864.830 ops/s
Iteration  18: 2285874.448 ops/s
Iteration  19: 2293530.358 ops/s
Iteration  20: 2292882.048 ops/s
Iteration  21: 2295032.949 ops/s
Iteration  22: 2292444.955 ops/s
Iteration  23: 2283014.617 ops/s
Iteration  24: 2277726.324 ops/s
Iteration  25: 2285376.822 ops/s
Iteration  26: 2272725.828 ops/s
Iteration  27: 2270015.653 ops/s
Iteration  28: 2277557.445 ops/s
Iteration  29: 2288944.709 ops/s
Iteration  30: 2293633.677 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_stream":
  2285317.599 ±(99.9%) 6289.769 ops/s [Average]
  (min, avg, max) = (2255373.075, 2285317.599, 2295868.964), stdev = 9414.231
  CI (99.9%): [2279027.829, 2291607.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_stream  thrpt   30  2285317.599 ± 6289.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 754277.179 ops/s
# Warmup Iteration   2: 796767.855 ops/s
# Warmup Iteration   3: 991964.140 ops/s
# Warmup Iteration   4: 1034270.086 ops/s
# Warmup Iteration   5: 1035523.641 ops/s
# Warmup Iteration   6: 1023196.672 ops/s
# Warmup Iteration   7: 1029695.641 ops/s
# Warmup Iteration   8: 1034750.627 ops/s
# Warmup Iteration   9: 1036952.423 ops/s
# Warmup Iteration  10: 1037422.704 ops/s
# Warmup Iteration  11: 1031071.016 ops/s
# Warmup Iteration  12: 1033215.521 ops/s
# Warmup Iteration  13: 873445.125 ops/s
# Warmup Iteration  14: 1026683.076 ops/s
# Warmup Iteration  15: 1029216.253 ops/s
# Warmup Iteration  16: 1032474.483 ops/s
# Warmup Iteration  17: 1099379.623 ops/s
# Warmup Iteration  18: 1099121.896 ops/s
# Warmup Iteration  19: 1099525.475 ops/s
# Warmup Iteration  20: 1085995.052 ops/s
# Warmup Iteration  21: 1093643.592 ops/s
# Warmup Iteration  22: 1094952.823 ops/s
# Warmup Iteration  23: 1100600.353 ops/s
# Warmup Iteration  24: 1100572.275 ops/s
# Warmup Iteration  25: 1094298.065 ops/s
# Warmup Iteration  26: 1097247.903 ops/s
# Warmup Iteration  27: 1097895.291 ops/s
# Warmup Iteration  28: 1092519.116 ops/s
# Warmup Iteration  29: 1093382.824 ops/s
# Warmup Iteration  30: 1097251.097 ops/s
Iteration   1: 1095067.732 ops/s
Iteration   2: 1099785.092 ops/s
Iteration   3: 1088113.821 ops/s
Iteration   4: 976097.776 ops/s
Iteration   5: 1072694.400 ops/s
Iteration   6: 1100779.021 ops/s
Iteration   7: 1091828.678 ops/s
Iteration   8: 1098471.687 ops/s
Iteration   9: 1092159.179 ops/s
Iteration  10: 1094682.700 ops/s
Iteration  11: 1095369.939 ops/s
Iteration  12: 1092124.452 ops/s
Iteration  13: 1095625.050 ops/s
Iteration  14: 1104885.971 ops/s
Iteration  15: 1099261.768 ops/s
Iteration  16: 1097878.570 ops/s
Iteration  17: 1096802.587 ops/s
Iteration  18: 1101234.551 ops/s
Iteration  19: 1105267.777 ops/s
Iteration  20: 1100081.489 ops/s
Iteration  21: 1098224.710 ops/s
Iteration  22: 1092361.382 ops/s
Iteration  23: 1091354.241 ops/s
Iteration  24: 1089474.565 ops/s
Iteration  25: 1091974.797 ops/s
Iteration  26: 1099198.505 ops/s
Iteration  27: 1098635.096 ops/s
Iteration  28: 1102187.566 ops/s
Iteration  29: 1097617.649 ops/s
Iteration  30: 1097651.620 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subList":
  1091896.412 ±(99.9%) 15171.219 ops/s [Average]
  (min, avg, max) = (976097.776, 1091896.412, 1105267.777), stdev = 22707.568
  CI (99.9%): [1076725.193, 1107067.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_subList  thrpt   30  1091896.412 ± 15171.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromGreaterThanTO$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromGreaterThanTO

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653615.003 ops/s
# Warmup Iteration   2: 701757.648 ops/s
# Warmup Iteration   3: 791174.821 ops/s
# Warmup Iteration   4: 859793.423 ops/s
# Warmup Iteration   5: 861671.768 ops/s
# Warmup Iteration   6: 860600.442 ops/s
# Warmup Iteration   7: 853537.481 ops/s
# Warmup Iteration   8: 859192.053 ops/s
# Warmup Iteration   9: 858098.784 ops/s
# Warmup Iteration  10: 858675.968 ops/s
# Warmup Iteration  11: 860401.067 ops/s
# Warmup Iteration  12: 858914.611 ops/s
# Warmup Iteration  13: 857333.288 ops/s
# Warmup Iteration  14: 799570.431 ops/s
# Warmup Iteration  15: 778022.043 ops/s
# Warmup Iteration  16: 859597.415 ops/s
# Warmup Iteration  17: 883737.006 ops/s
# Warmup Iteration  18: 901297.793 ops/s
# Warmup Iteration  19: 901143.136 ops/s
# Warmup Iteration  20: 901058.718 ops/s
# Warmup Iteration  21: 907361.150 ops/s
# Warmup Iteration  22: 901750.439 ops/s
# Warmup Iteration  23: 903043.728 ops/s
# Warmup Iteration  24: 904834.887 ops/s
# Warmup Iteration  25: 900107.293 ops/s
# Warmup Iteration  26: 902192.125 ops/s
# Warmup Iteration  27: 894615.375 ops/s
# Warmup Iteration  28: 906502.129 ops/s
# Warmup Iteration  29: 907001.148 ops/s
# Warmup Iteration  30: 905897.487 ops/s
Iteration   1: 899528.341 ops/s
Iteration   2: 908476.603 ops/s
Iteration   3: 903263.358 ops/s
Iteration   4: 905645.581 ops/s
Iteration   5: 906006.640 ops/s
Iteration   6: 901308.433 ops/s
Iteration   7: 901978.117 ops/s
Iteration   8: 900134.018 ops/s
Iteration   9: 902015.947 ops/s
Iteration  10: 902075.114 ops/s
Iteration  11: 902746.814 ops/s
Iteration  12: 910546.809 ops/s
Iteration  13: 905974.207 ops/s
Iteration  14: 905966.132 ops/s
Iteration  15: 908902.273 ops/s
Iteration  16: 904628.511 ops/s
Iteration  17: 903928.711 ops/s
Iteration  18: 901486.881 ops/s
Iteration  19: 903537.725 ops/s
Iteration  20: 906579.838 ops/s
Iteration  21: 906601.923 ops/s
Iteration  22: 903777.710 ops/s
Iteration  23: 903673.609 ops/s
Iteration  24: 904864.612 ops/s
Iteration  25: 900358.059 ops/s
Iteration  26: 908120.097 ops/s
Iteration  27: 899173.475 ops/s
Iteration  28: 909786.980 ops/s
Iteration  29: 909102.675 ops/s
Iteration  30: 906466.867 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromGreaterThanTO":
  904555.202 ±(99.9%) 2107.714 ops/s [Average]
  (min, avg, max) = (899173.475, 904555.202, 910546.809), stdev = 3154.727
  CI (99.9%): [902447.488, 906662.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_subListFromGreaterThanTO  thrpt   30  904555.202 ± 2107.714  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromNegative$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromNegative

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 672760.384 ops/s
# Warmup Iteration   2: 712985.153 ops/s
# Warmup Iteration   3: 807587.814 ops/s
# Warmup Iteration   4: 877528.382 ops/s
# Warmup Iteration   5: 873002.591 ops/s
# Warmup Iteration   6: 873608.166 ops/s
# Warmup Iteration   7: 869990.505 ops/s
# Warmup Iteration   8: 872659.671 ops/s
# Warmup Iteration   9: 867988.184 ops/s
# Warmup Iteration  10: 876360.675 ops/s
# Warmup Iteration  11: 876297.943 ops/s
# Warmup Iteration  12: 871118.638 ops/s
# Warmup Iteration  13: 874147.009 ops/s
# Warmup Iteration  14: 857419.528 ops/s
# Warmup Iteration  15: 753434.423 ops/s
# Warmup Iteration  16: 873617.556 ops/s
# Warmup Iteration  17: 922125.939 ops/s
# Warmup Iteration  18: 921253.344 ops/s
# Warmup Iteration  19: 913276.981 ops/s
# Warmup Iteration  20: 921569.878 ops/s
# Warmup Iteration  21: 916226.691 ops/s
# Warmup Iteration  22: 915401.549 ops/s
# Warmup Iteration  23: 920759.873 ops/s
# Warmup Iteration  24: 925566.130 ops/s
# Warmup Iteration  25: 922783.339 ops/s
# Warmup Iteration  26: 922771.122 ops/s
# Warmup Iteration  27: 916002.654 ops/s
# Warmup Iteration  28: 918968.463 ops/s
# Warmup Iteration  29: 920055.552 ops/s
# Warmup Iteration  30: 917343.777 ops/s
Iteration   1: 923164.212 ops/s
Iteration   2: 916826.595 ops/s
Iteration   3: 920688.865 ops/s
Iteration   4: 919407.923 ops/s
Iteration   5: 921121.812 ops/s
Iteration   6: 922778.729 ops/s
Iteration   7: 915359.225 ops/s
Iteration   8: 921586.279 ops/s
Iteration   9: 921564.368 ops/s
Iteration  10: 920430.598 ops/s
Iteration  11: 919332.422 ops/s
Iteration  12: 922300.146 ops/s
Iteration  13: 920366.361 ops/s
Iteration  14: 920388.395 ops/s
Iteration  15: 920716.119 ops/s
Iteration  16: 924719.094 ops/s
Iteration  17: 924568.112 ops/s
Iteration  18: 925661.161 ops/s
Iteration  19: 924531.589 ops/s
Iteration  20: 923908.076 ops/s
Iteration  21: 926460.455 ops/s
Iteration  22: 922613.414 ops/s
Iteration  23: 921681.401 ops/s
Iteration  24: 915149.620 ops/s
Iteration  25: 914875.646 ops/s
Iteration  26: 916716.633 ops/s
Iteration  27: 925043.689 ops/s
Iteration  28: 925540.951 ops/s
Iteration  29: 921801.186 ops/s
Iteration  30: 918647.017 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListFromNegative":
  921265.003 ±(99.9%) 2146.265 ops/s [Average]
  (min, avg, max) = (914875.646, 921265.003, 926460.455), stdev = 3212.428
  CI (99.9%): [919118.738, 923411.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_subListFromNegative  thrpt   30  921265.003 ± 2146.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListToGreaterThanSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListToGreaterThanSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 657520.262 ops/s
# Warmup Iteration   2: 706801.001 ops/s
# Warmup Iteration   3: 788959.843 ops/s
# Warmup Iteration   4: 872459.554 ops/s
# Warmup Iteration   5: 865819.211 ops/s
# Warmup Iteration   6: 867684.945 ops/s
# Warmup Iteration   7: 856224.576 ops/s
# Warmup Iteration   8: 856227.937 ops/s
# Warmup Iteration   9: 867210.448 ops/s
# Warmup Iteration  10: 869874.928 ops/s
# Warmup Iteration  11: 869539.178 ops/s
# Warmup Iteration  12: 863071.425 ops/s
# Warmup Iteration  13: 860357.303 ops/s
# Warmup Iteration  14: 867066.952 ops/s
# Warmup Iteration  15: 730046.142 ops/s
# Warmup Iteration  16: 866670.402 ops/s
# Warmup Iteration  17: 909811.657 ops/s
# Warmup Iteration  18: 913257.139 ops/s
# Warmup Iteration  19: 909513.460 ops/s
# Warmup Iteration  20: 911110.340 ops/s
# Warmup Iteration  21: 910484.357 ops/s
# Warmup Iteration  22: 909995.834 ops/s
# Warmup Iteration  23: 907807.600 ops/s
# Warmup Iteration  24: 909139.268 ops/s
# Warmup Iteration  25: 905423.107 ops/s
# Warmup Iteration  26: 908230.891 ops/s
# Warmup Iteration  27: 911757.399 ops/s
# Warmup Iteration  28: 912603.734 ops/s
# Warmup Iteration  29: 907961.060 ops/s
# Warmup Iteration  30: 906406.283 ops/s
Iteration   1: 907020.309 ops/s
Iteration   2: 909962.702 ops/s
Iteration   3: 908202.282 ops/s
Iteration   4: 913909.144 ops/s
Iteration   5: 912091.897 ops/s
Iteration   6: 914157.879 ops/s
Iteration   7: 914514.118 ops/s
Iteration   8: 915489.918 ops/s
Iteration   9: 915598.812 ops/s
Iteration  10: 914076.486 ops/s
Iteration  11: 911098.696 ops/s
Iteration  12: 914528.981 ops/s
Iteration  13: 910178.939 ops/s
Iteration  14: 907216.714 ops/s
Iteration  15: 910019.341 ops/s
Iteration  16: 912179.391 ops/s
Iteration  17: 916359.149 ops/s
Iteration  18: 912530.311 ops/s
Iteration  19: 912554.412 ops/s
Iteration  20: 913577.774 ops/s
Iteration  21: 912476.720 ops/s
Iteration  22: 913522.849 ops/s
Iteration  23: 914878.834 ops/s
Iteration  24: 910869.535 ops/s
Iteration  25: 906328.270 ops/s
Iteration  26: 907434.025 ops/s
Iteration  27: 907958.417 ops/s
Iteration  28: 913128.607 ops/s
Iteration  29: 914106.997 ops/s
Iteration  30: 911927.758 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_subListToGreaterThanSize":
  911929.976 ±(99.9%) 1897.503 ops/s [Average]
  (min, avg, max) = (906328.270, 911929.976, 916359.149), stdev = 2840.093
  CI (99.9%): [910032.473, 913827.478] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_subListToGreaterThanSize  thrpt   30  911929.976 ± 1897.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 995041.913 ops/s
# Warmup Iteration   2: 1805209.877 ops/s
# Warmup Iteration   3: 2048433.779 ops/s
# Warmup Iteration   4: 2056797.203 ops/s
# Warmup Iteration   5: 2061464.932 ops/s
# Warmup Iteration   6: 1694547.045 ops/s
# Warmup Iteration   7: 2062330.537 ops/s
# Warmup Iteration   8: 2038483.278 ops/s
# Warmup Iteration   9: 2054070.370 ops/s
# Warmup Iteration  10: 2057553.397 ops/s
# Warmup Iteration  11: 2056350.500 ops/s
# Warmup Iteration  12: 2055293.477 ops/s
# Warmup Iteration  13: 2060987.525 ops/s
# Warmup Iteration  14: 2055617.383 ops/s
# Warmup Iteration  15: 2048950.365 ops/s
# Warmup Iteration  16: 2051546.404 ops/s
# Warmup Iteration  17: 2049748.732 ops/s
# Warmup Iteration  18: 2046908.591 ops/s
# Warmup Iteration  19: 2059831.671 ops/s
# Warmup Iteration  20: 2052151.253 ops/s
# Warmup Iteration  21: 2052011.078 ops/s
# Warmup Iteration  22: 2054417.543 ops/s
# Warmup Iteration  23: 2054399.836 ops/s
# Warmup Iteration  24: 2051583.567 ops/s
# Warmup Iteration  25: 2056693.855 ops/s
# Warmup Iteration  26: 2056614.143 ops/s
# Warmup Iteration  27: 2050972.465 ops/s
# Warmup Iteration  28: 2050546.075 ops/s
# Warmup Iteration  29: 2051318.797 ops/s
# Warmup Iteration  30: 2056757.475 ops/s
Iteration   1: 2052644.783 ops/s
Iteration   2: 2057566.903 ops/s
Iteration   3: 2057083.049 ops/s
Iteration   4: 2064136.130 ops/s
Iteration   5: 2025752.686 ops/s
Iteration   6: 2056230.935 ops/s
Iteration   7: 2055020.061 ops/s
Iteration   8: 2050777.376 ops/s
Iteration   9: 2049212.098 ops/s
Iteration  10: 2044876.603 ops/s
Iteration  11: 2049591.199 ops/s
Iteration  12: 2059776.155 ops/s
Iteration  13: 2046052.172 ops/s
Iteration  14: 2032799.651 ops/s
Iteration  15: 2053847.983 ops/s
Iteration  16: 2043592.964 ops/s
Iteration  17: 2048007.949 ops/s
Iteration  18: 2063923.689 ops/s
Iteration  19: 2057221.530 ops/s
Iteration  20: 2058968.644 ops/s
Iteration  21: 2062431.842 ops/s
Iteration  22: 2045462.502 ops/s
Iteration  23: 2064293.951 ops/s
Iteration  24: 2039187.658 ops/s
Iteration  25: 2047530.870 ops/s
Iteration  26: 2050078.864 ops/s
Iteration  27: 2049176.571 ops/s
Iteration  28: 2055598.881 ops/s
Iteration  29: 2054980.218 ops/s
Iteration  30: 2063131.285 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDouble":
  2051965.173 ±(99.9%) 6081.753 ops/s [Average]
  (min, avg, max) = (2025752.686, 2051965.173, 2064293.951), stdev = 9102.883
  CI (99.9%): [2045883.420, 2058046.927] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByDouble  thrpt   30  2051965.173 ± 6081.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 61.102 ops/s
# Warmup Iteration   2: 75.557 ops/s
# Warmup Iteration   3: 99.844 ops/s
# Warmup Iteration   4: 102.287 ops/s
# Warmup Iteration   5: 103.663 ops/s
# Warmup Iteration   6: 103.129 ops/s
# Warmup Iteration   7: 101.336 ops/s
# Warmup Iteration   8: 99.432 ops/s
# Warmup Iteration   9: 86.782 ops/s
# Warmup Iteration  10: 96.108 ops/s
# Warmup Iteration  11: 100.091 ops/s
# Warmup Iteration  12: 100.926 ops/s
# Warmup Iteration  13: 99.096 ops/s
# Warmup Iteration  14: 101.388 ops/s
# Warmup Iteration  15: 100.525 ops/s
# Warmup Iteration  16: 100.595 ops/s
# Warmup Iteration  17: 102.446 ops/s
# Warmup Iteration  18: 102.346 ops/s
# Warmup Iteration  19: 98.442 ops/s
# Warmup Iteration  20: 99.209 ops/s
# Warmup Iteration  21: 101.862 ops/s
# Warmup Iteration  22: 99.792 ops/s
# Warmup Iteration  23: 98.974 ops/s
# Warmup Iteration  24: 99.060 ops/s
# Warmup Iteration  25: 100.969 ops/s
# Warmup Iteration  26: 99.606 ops/s
# Warmup Iteration  27: 98.520 ops/s
# Warmup Iteration  28: 96.620 ops/s
# Warmup Iteration  29: 100.518 ops/s
# Warmup Iteration  30: 99.966 ops/s
Iteration   1: 100.843 ops/s
Iteration   2: 99.026 ops/s
Iteration   3: 100.594 ops/s
Iteration   4: 101.429 ops/s
Iteration   5: 100.217 ops/s
Iteration   6: 100.382 ops/s
Iteration   7: 100.253 ops/s
Iteration   8: 99.629 ops/s
Iteration   9: 99.325 ops/s
Iteration  10: 100.164 ops/s
Iteration  11: 100.745 ops/s
Iteration  12: 98.930 ops/s
Iteration  13: 100.516 ops/s
Iteration  14: 101.311 ops/s
Iteration  15: 99.433 ops/s
Iteration  16: 98.957 ops/s
Iteration  17: 99.905 ops/s
Iteration  18: 97.877 ops/s
Iteration  19: 98.741 ops/s
Iteration  20: 99.013 ops/s
Iteration  21: 99.541 ops/s
Iteration  22: 101.974 ops/s
Iteration  23: 102.303 ops/s
Iteration  24: 98.415 ops/s
Iteration  25: 101.346 ops/s
Iteration  26: 102.255 ops/s
Iteration  27: 99.664 ops/s
Iteration  28: 102.121 ops/s
Iteration  29: 102.541 ops/s
Iteration  30: 99.083 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  100.218 ±(99.9%) 0.845 ops/s [Average]
  (min, avg, max) = (97.877, 100.218, 102.541), stdev = 1.265
  CI (99.9%): [99.373, 101.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt    Score   Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  100.218 ± 0.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 983945.814 ops/s
# Warmup Iteration   2: 1785274.779 ops/s
# Warmup Iteration   3: 2057206.980 ops/s
# Warmup Iteration   4: 2059087.140 ops/s
# Warmup Iteration   5: 2070822.511 ops/s
# Warmup Iteration   6: 1694448.009 ops/s
# Warmup Iteration   7: 2014750.909 ops/s
# Warmup Iteration   8: 2070742.347 ops/s
# Warmup Iteration   9: 2070922.413 ops/s
# Warmup Iteration  10: 2081086.924 ops/s
# Warmup Iteration  11: 2074578.245 ops/s
# Warmup Iteration  12: 2065913.543 ops/s
# Warmup Iteration  13: 2061094.400 ops/s
# Warmup Iteration  14: 2072786.209 ops/s
# Warmup Iteration  15: 2076063.701 ops/s
# Warmup Iteration  16: 2080165.928 ops/s
# Warmup Iteration  17: 2069107.021 ops/s
# Warmup Iteration  18: 2077980.041 ops/s
# Warmup Iteration  19: 2076934.937 ops/s
# Warmup Iteration  20: 2065995.353 ops/s
# Warmup Iteration  21: 2076268.929 ops/s
# Warmup Iteration  22: 2075473.284 ops/s
# Warmup Iteration  23: 2070486.197 ops/s
# Warmup Iteration  24: 2079475.238 ops/s
# Warmup Iteration  25: 2067823.211 ops/s
# Warmup Iteration  26: 2064102.640 ops/s
# Warmup Iteration  27: 2071825.211 ops/s
# Warmup Iteration  28: 2064172.183 ops/s
# Warmup Iteration  29: 2074886.969 ops/s
# Warmup Iteration  30: 2067323.220 ops/s
Iteration   1: 2074933.329 ops/s
Iteration   2: 2079397.199 ops/s
Iteration   3: 2082205.557 ops/s
Iteration   4: 2072796.838 ops/s
Iteration   5: 2078606.409 ops/s
Iteration   6: 2076148.234 ops/s
Iteration   7: 2074927.896 ops/s
Iteration   8: 2077941.792 ops/s
Iteration   9: 2063393.897 ops/s
Iteration  10: 2066277.614 ops/s
Iteration  11: 2071310.619 ops/s
Iteration  12: 2074868.008 ops/s
Iteration  13: 2055410.908 ops/s
Iteration  14: 2064544.572 ops/s
Iteration  15: 2068172.788 ops/s
Iteration  16: 2077796.280 ops/s
Iteration  17: 2071713.792 ops/s
Iteration  18: 2067989.649 ops/s
Iteration  19: 2066703.839 ops/s
Iteration  20: 2059140.701 ops/s
Iteration  21: 2069815.906 ops/s
Iteration  22: 2070587.256 ops/s
Iteration  23: 2064336.391 ops/s
Iteration  24: 2075692.556 ops/s
Iteration  25: 2077833.859 ops/s
Iteration  26: 2081647.421 ops/s
Iteration  27: 2068078.010 ops/s
Iteration  28: 2074409.100 ops/s
Iteration  29: 2044970.921 ops/s
Iteration  30: 2073282.039 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloat":
  2070831.113 ±(99.9%) 5401.628 ops/s [Average]
  (min, avg, max) = (2044970.921, 2070831.113, 2082205.557), stdev = 8084.904
  CI (99.9%): [2065429.484, 2076232.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByFloat  thrpt   30  2070831.113 ± 5401.628  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 60.246 ops/s
# Warmup Iteration   2: 74.209 ops/s
# Warmup Iteration   3: 101.635 ops/s
# Warmup Iteration   4: 101.589 ops/s
# Warmup Iteration   5: 100.097 ops/s
# Warmup Iteration   6: 101.005 ops/s
# Warmup Iteration   7: 100.955 ops/s
# Warmup Iteration   8: 99.266 ops/s
# Warmup Iteration   9: 87.337 ops/s
# Warmup Iteration  10: 92.878 ops/s
# Warmup Iteration  11: 100.069 ops/s
# Warmup Iteration  12: 99.431 ops/s
# Warmup Iteration  13: 99.844 ops/s
# Warmup Iteration  14: 101.296 ops/s
# Warmup Iteration  15: 99.798 ops/s
# Warmup Iteration  16: 98.948 ops/s
# Warmup Iteration  17: 97.965 ops/s
# Warmup Iteration  18: 98.902 ops/s
# Warmup Iteration  19: 99.065 ops/s
# Warmup Iteration  20: 99.068 ops/s
# Warmup Iteration  21: 98.705 ops/s
# Warmup Iteration  22: 99.350 ops/s
# Warmup Iteration  23: 98.455 ops/s
# Warmup Iteration  24: 100.243 ops/s
# Warmup Iteration  25: 99.628 ops/s
# Warmup Iteration  26: 99.984 ops/s
# Warmup Iteration  27: 98.777 ops/s
# Warmup Iteration  28: 97.437 ops/s
# Warmup Iteration  29: 99.762 ops/s
# Warmup Iteration  30: 98.438 ops/s
Iteration   1: 98.888 ops/s
Iteration   2: 98.966 ops/s
Iteration   3: 96.521 ops/s
Iteration   4: 100.534 ops/s
Iteration   5: 99.972 ops/s
Iteration   6: 97.849 ops/s
Iteration   7: 100.599 ops/s
Iteration   8: 101.137 ops/s
Iteration   9: 99.803 ops/s
Iteration  10: 101.481 ops/s
Iteration  11: 99.420 ops/s
Iteration  12: 97.379 ops/s
Iteration  13: 99.188 ops/s
Iteration  14: 101.226 ops/s
Iteration  15: 98.403 ops/s
Iteration  16: 99.826 ops/s
Iteration  17: 99.819 ops/s
Iteration  18: 98.400 ops/s
Iteration  19: 100.302 ops/s
Iteration  20: 99.706 ops/s
Iteration  21: 98.852 ops/s
Iteration  22: 100.813 ops/s
Iteration  23: 99.019 ops/s
Iteration  24: 98.130 ops/s
Iteration  25: 98.469 ops/s
Iteration  26: 98.576 ops/s
Iteration  27: 99.097 ops/s
Iteration  28: 97.977 ops/s
Iteration  29: 98.873 ops/s
Iteration  30: 99.530 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  99.292 ±(99.9%) 0.786 ops/s [Average]
  (min, avg, max) = (96.521, 99.292, 101.481), stdev = 1.176
  CI (99.9%): [98.506, 100.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  99.292 ± 0.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1355539.445 ops/s
# Warmup Iteration   2: 2545609.643 ops/s
# Warmup Iteration   3: 2934404.985 ops/s
# Warmup Iteration   4: 2951757.633 ops/s
# Warmup Iteration   5: 2535197.460 ops/s
# Warmup Iteration   6: 2828367.555 ops/s
# Warmup Iteration   7: 2936435.585 ops/s
# Warmup Iteration   8: 2935981.704 ops/s
# Warmup Iteration   9: 2927695.394 ops/s
# Warmup Iteration  10: 2950595.982 ops/s
# Warmup Iteration  11: 2938151.479 ops/s
# Warmup Iteration  12: 2951763.460 ops/s
# Warmup Iteration  13: 2928144.185 ops/s
# Warmup Iteration  14: 2945749.123 ops/s
# Warmup Iteration  15: 2936838.284 ops/s
# Warmup Iteration  16: 2947403.024 ops/s
# Warmup Iteration  17: 2955491.165 ops/s
# Warmup Iteration  18: 2951081.249 ops/s
# Warmup Iteration  19: 2945564.944 ops/s
# Warmup Iteration  20: 2946479.683 ops/s
# Warmup Iteration  21: 2938191.434 ops/s
# Warmup Iteration  22: 2914007.269 ops/s
# Warmup Iteration  23: 2923716.029 ops/s
# Warmup Iteration  24: 2946948.783 ops/s
# Warmup Iteration  25: 2934281.314 ops/s
# Warmup Iteration  26: 2931032.867 ops/s
# Warmup Iteration  27: 2922747.659 ops/s
# Warmup Iteration  28: 2950448.888 ops/s
# Warmup Iteration  29: 2952056.039 ops/s
# Warmup Iteration  30: 2950183.609 ops/s
Iteration   1: 2935064.863 ops/s
Iteration   2: 2943763.407 ops/s
Iteration   3: 2949359.422 ops/s
Iteration   4: 2934767.600 ops/s
Iteration   5: 2955458.446 ops/s
Iteration   6: 2937318.752 ops/s
Iteration   7: 2936223.250 ops/s
Iteration   8: 2937466.714 ops/s
Iteration   9: 2956935.499 ops/s
Iteration  10: 2955143.884 ops/s
Iteration  11: 2952447.925 ops/s
Iteration  12: 2939451.879 ops/s
Iteration  13: 2928127.942 ops/s
Iteration  14: 2931493.852 ops/s
Iteration  15: 2936060.073 ops/s
Iteration  16: 2926844.528 ops/s
Iteration  17: 2932192.547 ops/s
Iteration  18: 2905999.107 ops/s
Iteration  19: 2930580.366 ops/s
Iteration  20: 2946481.135 ops/s
Iteration  21: 2926441.763 ops/s
Iteration  22: 2932913.537 ops/s
Iteration  23: 2931864.541 ops/s
Iteration  24: 2942962.083 ops/s
Iteration  25: 2946544.588 ops/s
Iteration  26: 2927058.622 ops/s
Iteration  27: 2929693.987 ops/s
Iteration  28: 2935494.158 ops/s
Iteration  29: 2938653.696 ops/s
Iteration  30: 2900173.157 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByInt":
  2936099.377 ±(99.9%) 8431.656 ops/s [Average]
  (min, avg, max) = (2900173.157, 2936099.377, 2956935.499), stdev = 12620.107
  CI (99.9%): [2927667.721, 2944531.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByInt  thrpt   30  2936099.377 ± 8431.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1360709.253 ops/s
# Warmup Iteration   2: 2578006.621 ops/s
# Warmup Iteration   3: 2883368.961 ops/s
# Warmup Iteration   4: 2888818.141 ops/s
# Warmup Iteration   5: 2546014.636 ops/s
# Warmup Iteration   6: 2750452.335 ops/s
# Warmup Iteration   7: 2912774.949 ops/s
# Warmup Iteration   8: 2907447.709 ops/s
# Warmup Iteration   9: 2899360.546 ops/s
# Warmup Iteration  10: 2915764.002 ops/s
# Warmup Iteration  11: 2919184.780 ops/s
# Warmup Iteration  12: 2902661.372 ops/s
# Warmup Iteration  13: 2901236.406 ops/s
# Warmup Iteration  14: 2854168.215 ops/s
# Warmup Iteration  15: 2914072.021 ops/s
# Warmup Iteration  16: 2900282.213 ops/s
# Warmup Iteration  17: 2906411.381 ops/s
# Warmup Iteration  18: 2916395.931 ops/s
# Warmup Iteration  19: 2908580.134 ops/s
# Warmup Iteration  20: 2916128.896 ops/s
# Warmup Iteration  21: 2910982.741 ops/s
# Warmup Iteration  22: 2906068.367 ops/s
# Warmup Iteration  23: 2896776.832 ops/s
# Warmup Iteration  24: 2904877.041 ops/s
# Warmup Iteration  25: 2916435.704 ops/s
# Warmup Iteration  26: 2916436.371 ops/s
# Warmup Iteration  27: 2918650.922 ops/s
# Warmup Iteration  28: 2914926.593 ops/s
# Warmup Iteration  29: 2910906.878 ops/s
# Warmup Iteration  30: 2911714.176 ops/s
Iteration   1: 2914784.300 ops/s
Iteration   2: 2920902.142 ops/s
Iteration   3: 2892233.125 ops/s
Iteration   4: 2911139.282 ops/s
Iteration   5: 2894752.197 ops/s
Iteration   6: 2907690.267 ops/s
Iteration   7: 2888318.197 ops/s
Iteration   8: 2905286.865 ops/s
Iteration   9: 2904316.849 ops/s
Iteration  10: 2899465.649 ops/s
Iteration  11: 2912155.579 ops/s
Iteration  12: 2914404.101 ops/s
Iteration  13: 2912435.614 ops/s
Iteration  14: 2917750.193 ops/s
Iteration  15: 2898044.351 ops/s
Iteration  16: 2914400.502 ops/s
Iteration  17: 2906669.234 ops/s
Iteration  18: 2883529.251 ops/s
Iteration  19: 2911732.426 ops/s
Iteration  20: 2916520.155 ops/s
Iteration  21: 2915417.924 ops/s
Iteration  22: 2911447.381 ops/s
Iteration  23: 2883297.967 ops/s
Iteration  24: 2895220.823 ops/s
Iteration  25: 2911576.186 ops/s
Iteration  26: 2905720.624 ops/s
Iteration  27: 2913093.438 ops/s
Iteration  28: 2905998.540 ops/s
Iteration  29: 2896661.044 ops/s
Iteration  30: 2921348.749 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumByLong":
  2906210.432 ±(99.9%) 7047.659 ops/s [Average]
  (min, avg, max) = (2883297.967, 2906210.432, 2921348.749), stdev = 10548.605
  CI (99.9%): [2899162.773, 2913258.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumByLong  thrpt   30  2906210.432 ± 7047.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149025062.417 ops/s
# Warmup Iteration   2: 301881484.419 ops/s
# Warmup Iteration   3: 264945063.261 ops/s
# Warmup Iteration   4: 307514384.437 ops/s
# Warmup Iteration   5: 306847083.356 ops/s
# Warmup Iteration   6: 308347621.018 ops/s
# Warmup Iteration   7: 310220827.145 ops/s
# Warmup Iteration   8: 306465363.700 ops/s
# Warmup Iteration   9: 309142476.586 ops/s
# Warmup Iteration  10: 308264304.127 ops/s
# Warmup Iteration  11: 309144739.336 ops/s
# Warmup Iteration  12: 309451215.039 ops/s
# Warmup Iteration  13: 309842839.908 ops/s
# Warmup Iteration  14: 307785562.121 ops/s
# Warmup Iteration  15: 310157963.697 ops/s
# Warmup Iteration  16: 307843621.795 ops/s
# Warmup Iteration  17: 310062008.680 ops/s
# Warmup Iteration  18: 309373676.835 ops/s
# Warmup Iteration  19: 308539011.484 ops/s
# Warmup Iteration  20: 307428317.291 ops/s
# Warmup Iteration  21: 307693110.274 ops/s
# Warmup Iteration  22: 308856136.885 ops/s
# Warmup Iteration  23: 308059743.574 ops/s
# Warmup Iteration  24: 307868005.859 ops/s
# Warmup Iteration  25: 309801954.851 ops/s
# Warmup Iteration  26: 309079653.638 ops/s
# Warmup Iteration  27: 307950654.228 ops/s
# Warmup Iteration  28: 308625048.808 ops/s
# Warmup Iteration  29: 310686260.780 ops/s
# Warmup Iteration  30: 308530155.889 ops/s
Iteration   1: 306938239.489 ops/s
Iteration   2: 309478377.419 ops/s
Iteration   3: 309086068.038 ops/s
Iteration   4: 310256628.503 ops/s
Iteration   5: 309220720.895 ops/s
Iteration   6: 307738741.112 ops/s
Iteration   7: 306299076.053 ops/s
Iteration   8: 307628515.142 ops/s
Iteration   9: 310035248.368 ops/s
Iteration  10: 310117896.161 ops/s
Iteration  11: 308101999.557 ops/s
Iteration  12: 307576821.909 ops/s
Iteration  13: 308573448.534 ops/s
Iteration  14: 306677183.502 ops/s
Iteration  15: 308615650.080 ops/s
Iteration  16: 307179287.900 ops/s
Iteration  17: 307685526.962 ops/s
Iteration  18: 310224256.397 ops/s
Iteration  19: 306567144.666 ops/s
Iteration  20: 307240939.699 ops/s
Iteration  21: 306980951.535 ops/s
Iteration  22: 305252064.781 ops/s
Iteration  23: 308502673.149 ops/s
Iteration  24: 309160304.294 ops/s
Iteration  25: 308335946.395 ops/s
Iteration  26: 304788635.500 ops/s
Iteration  27: 308391379.925 ops/s
Iteration  28: 308419194.542 ops/s
Iteration  29: 307957314.214 ops/s
Iteration  30: 307266282.733 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumDouble":
  308009883.915 ±(99.9%) 922423.082 ops/s [Average]
  (min, avg, max) = (304788635.500, 308009883.915, 310256628.503), stdev = 1380639.549
  CI (99.9%): [307087460.833, 308932306.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumDouble  thrpt   30  308009883.915 ± 922423.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132966253.567 ops/s
# Warmup Iteration   2: 300144159.508 ops/s
# Warmup Iteration   3: 265710339.378 ops/s
# Warmup Iteration   4: 312133268.547 ops/s
# Warmup Iteration   5: 312719180.058 ops/s
# Warmup Iteration   6: 312727093.470 ops/s
# Warmup Iteration   7: 311132561.386 ops/s
# Warmup Iteration   8: 312272226.387 ops/s
# Warmup Iteration   9: 310093289.845 ops/s
# Warmup Iteration  10: 312128233.724 ops/s
# Warmup Iteration  11: 311653091.657 ops/s
# Warmup Iteration  12: 311612253.537 ops/s
# Warmup Iteration  13: 310522929.704 ops/s
# Warmup Iteration  14: 310046902.209 ops/s
# Warmup Iteration  15: 311798565.349 ops/s
# Warmup Iteration  16: 310740647.011 ops/s
# Warmup Iteration  17: 310305941.373 ops/s
# Warmup Iteration  18: 311370988.746 ops/s
# Warmup Iteration  19: 312855375.543 ops/s
# Warmup Iteration  20: 311718253.766 ops/s
# Warmup Iteration  21: 312130039.287 ops/s
# Warmup Iteration  22: 312367968.566 ops/s
# Warmup Iteration  23: 312402449.160 ops/s
# Warmup Iteration  24: 312390005.078 ops/s
# Warmup Iteration  25: 313394330.119 ops/s
# Warmup Iteration  26: 310239687.456 ops/s
# Warmup Iteration  27: 309516749.285 ops/s
# Warmup Iteration  28: 309769829.730 ops/s
# Warmup Iteration  29: 312521150.093 ops/s
# Warmup Iteration  30: 311671686.892 ops/s
Iteration   1: 307686163.076 ops/s
Iteration   2: 308513900.123 ops/s
Iteration   3: 313297241.312 ops/s
Iteration   4: 311956819.037 ops/s
Iteration   5: 310131554.996 ops/s
Iteration   6: 313145328.826 ops/s
Iteration   7: 310292906.334 ops/s
Iteration   8: 310453966.719 ops/s
Iteration   9: 313088791.828 ops/s
Iteration  10: 311817330.062 ops/s
Iteration  11: 310890290.744 ops/s
Iteration  12: 311144156.548 ops/s
Iteration  13: 312788192.011 ops/s
Iteration  14: 312222935.391 ops/s
Iteration  15: 310942379.263 ops/s
Iteration  16: 310028864.170 ops/s
Iteration  17: 309832757.031 ops/s
Iteration  18: 309781068.113 ops/s
Iteration  19: 308243733.665 ops/s
Iteration  20: 312232162.150 ops/s
Iteration  21: 312208831.365 ops/s
Iteration  22: 311332740.442 ops/s
Iteration  23: 311586973.520 ops/s
Iteration  24: 311083304.022 ops/s
Iteration  25: 310190086.014 ops/s
Iteration  26: 309937458.446 ops/s
Iteration  27: 311407863.807 ops/s
Iteration  28: 311471666.682 ops/s
Iteration  29: 310375581.966 ops/s
Iteration  30: 311546937.134 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumFloat":
  310987732.826 ±(99.9%) 936333.091 ops/s [Average]
  (min, avg, max) = (307686163.076, 310987732.826, 313297241.312), stdev = 1401459.397
  CI (99.9%): [310051399.736, 311924065.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumFloat  thrpt   30  310987732.826 ± 936333.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148985972.121 ops/s
# Warmup Iteration   2: 301459297.984 ops/s
# Warmup Iteration   3: 262778665.879 ops/s
# Warmup Iteration   4: 309462264.171 ops/s
# Warmup Iteration   5: 308840902.795 ops/s
# Warmup Iteration   6: 308823540.123 ops/s
# Warmup Iteration   7: 310026190.486 ops/s
# Warmup Iteration   8: 310508398.226 ops/s
# Warmup Iteration   9: 309051563.967 ops/s
# Warmup Iteration  10: 309389371.689 ops/s
# Warmup Iteration  11: 309017172.010 ops/s
# Warmup Iteration  12: 308710437.710 ops/s
# Warmup Iteration  13: 307458198.285 ops/s
# Warmup Iteration  14: 308120448.434 ops/s
# Warmup Iteration  15: 308878190.011 ops/s
# Warmup Iteration  16: 307503312.476 ops/s
# Warmup Iteration  17: 309143900.581 ops/s
# Warmup Iteration  18: 308064218.906 ops/s
# Warmup Iteration  19: 309376577.069 ops/s
# Warmup Iteration  20: 307306663.621 ops/s
# Warmup Iteration  21: 305848775.835 ops/s
# Warmup Iteration  22: 309617655.760 ops/s
# Warmup Iteration  23: 307991574.824 ops/s
# Warmup Iteration  24: 307793168.541 ops/s
# Warmup Iteration  25: 308201864.067 ops/s
# Warmup Iteration  26: 306917355.780 ops/s
# Warmup Iteration  27: 309355722.321 ops/s
# Warmup Iteration  28: 308558703.700 ops/s
# Warmup Iteration  29: 301082373.793 ops/s
# Warmup Iteration  30: 307803477.811 ops/s
Iteration   1: 307511433.621 ops/s
Iteration   2: 309526873.052 ops/s
Iteration   3: 308815343.444 ops/s
Iteration   4: 305227637.838 ops/s
Iteration   5: 309721907.914 ops/s
Iteration   6: 309230953.700 ops/s
Iteration   7: 307938927.991 ops/s
Iteration   8: 308274967.351 ops/s
Iteration   9: 309663509.221 ops/s
Iteration  10: 309568228.198 ops/s
Iteration  11: 308817520.261 ops/s
Iteration  12: 308708440.363 ops/s
Iteration  13: 308598054.626 ops/s
Iteration  14: 310839500.608 ops/s
Iteration  15: 308543761.465 ops/s
Iteration  16: 307070100.751 ops/s
Iteration  17: 308888037.294 ops/s
Iteration  18: 308435516.850 ops/s
Iteration  19: 309353321.128 ops/s
Iteration  20: 308745811.835 ops/s
Iteration  21: 307883716.103 ops/s
Iteration  22: 309246886.627 ops/s
Iteration  23: 308826323.104 ops/s
Iteration  24: 306604843.524 ops/s
Iteration  25: 307238755.524 ops/s
Iteration  26: 307267360.242 ops/s
Iteration  27: 304609835.813 ops/s
Iteration  28: 306612946.921 ops/s
Iteration  29: 307573135.493 ops/s
Iteration  30: 308759729.646 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumInteger":
  308270112.684 ±(99.9%) 895727.597 ops/s [Average]
  (min, avg, max) = (304609835.813, 308270112.684, 310839500.608), stdev = 1340683.001
  CI (99.9%): [307374385.086, 309165840.281] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumInteger  thrpt   30  308270112.684 ± 895727.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 139961402.291 ops/s
# Warmup Iteration   2: 308989355.439 ops/s
# Warmup Iteration   3: 261376511.782 ops/s
# Warmup Iteration   4: 312695281.996 ops/s
# Warmup Iteration   5: 309502415.127 ops/s
# Warmup Iteration   6: 311284068.331 ops/s
# Warmup Iteration   7: 312136647.550 ops/s
# Warmup Iteration   8: 309857764.858 ops/s
# Warmup Iteration   9: 312740819.632 ops/s
# Warmup Iteration  10: 313148803.234 ops/s
# Warmup Iteration  11: 312801087.407 ops/s
# Warmup Iteration  12: 313776894.837 ops/s
# Warmup Iteration  13: 310214849.220 ops/s
# Warmup Iteration  14: 312212328.008 ops/s
# Warmup Iteration  15: 311058387.838 ops/s
# Warmup Iteration  16: 312950928.010 ops/s
# Warmup Iteration  17: 310017405.582 ops/s
# Warmup Iteration  18: 312673873.965 ops/s
# Warmup Iteration  19: 313236693.518 ops/s
# Warmup Iteration  20: 311390391.336 ops/s
# Warmup Iteration  21: 311659295.285 ops/s
# Warmup Iteration  22: 311048170.995 ops/s
# Warmup Iteration  23: 310094948.849 ops/s
# Warmup Iteration  24: 310553586.558 ops/s
# Warmup Iteration  25: 310256037.476 ops/s
# Warmup Iteration  26: 312620414.002 ops/s
# Warmup Iteration  27: 312491846.301 ops/s
# Warmup Iteration  28: 312104217.622 ops/s
# Warmup Iteration  29: 311294403.563 ops/s
# Warmup Iteration  30: 312639557.266 ops/s
Iteration   1: 312968689.259 ops/s
Iteration   2: 312081353.303 ops/s
Iteration   3: 312572664.522 ops/s
Iteration   4: 305284494.597 ops/s
Iteration   5: 310778902.756 ops/s
Iteration   6: 309973463.275 ops/s
Iteration   7: 311914632.228 ops/s
Iteration   8: 313106094.644 ops/s
Iteration   9: 309233099.848 ops/s
Iteration  10: 310750518.075 ops/s
Iteration  11: 309617409.835 ops/s
Iteration  12: 310497760.518 ops/s
Iteration  13: 309828367.441 ops/s
Iteration  14: 313591711.546 ops/s
Iteration  15: 311326885.460 ops/s
Iteration  16: 309834005.539 ops/s
Iteration  17: 312029429.951 ops/s
Iteration  18: 313138451.356 ops/s
Iteration  19: 312111773.264 ops/s
Iteration  20: 313395788.033 ops/s
Iteration  21: 312360070.039 ops/s
Iteration  22: 313465023.901 ops/s
Iteration  23: 313210508.430 ops/s
Iteration  24: 310853875.300 ops/s
Iteration  25: 308411160.765 ops/s
Iteration  26: 307460979.085 ops/s
Iteration  27: 311025856.275 ops/s
Iteration  28: 313091571.142 ops/s
Iteration  29: 310595498.798 ops/s
Iteration  30: 309210280.395 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_sumLong":
  311124010.653 ±(99.9%) 1321247.995 ops/s [Average]
  (min, avg, max) = (305284494.597, 311124010.653, 313591711.546), stdev = 1977581.949
  CI (99.9%): [309802762.658, 312445258.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_sumLong  thrpt   30  311124010.653 ± 1321247.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 148989390.601 ops/s
# Warmup Iteration   2: 304292743.835 ops/s
# Warmup Iteration   3: 266181892.262 ops/s
# Warmup Iteration   4: 307973302.312 ops/s
# Warmup Iteration   5: 307727773.093 ops/s
# Warmup Iteration   6: 308728492.776 ops/s
# Warmup Iteration   7: 308078908.406 ops/s
# Warmup Iteration   8: 308540119.543 ops/s
# Warmup Iteration   9: 307989920.069 ops/s
# Warmup Iteration  10: 309851410.894 ops/s
# Warmup Iteration  11: 307249951.084 ops/s
# Warmup Iteration  12: 309140758.713 ops/s
# Warmup Iteration  13: 308234410.809 ops/s
# Warmup Iteration  14: 308398461.014 ops/s
# Warmup Iteration  15: 310315913.680 ops/s
# Warmup Iteration  16: 308040970.969 ops/s
# Warmup Iteration  17: 308412891.336 ops/s
# Warmup Iteration  18: 307918098.104 ops/s
# Warmup Iteration  19: 309919098.383 ops/s
# Warmup Iteration  20: 308933664.137 ops/s
# Warmup Iteration  21: 307736134.785 ops/s
# Warmup Iteration  22: 305885625.456 ops/s
# Warmup Iteration  23: 307903710.214 ops/s
# Warmup Iteration  24: 308738290.696 ops/s
# Warmup Iteration  25: 309366192.736 ops/s
# Warmup Iteration  26: 309793384.531 ops/s
# Warmup Iteration  27: 310511023.915 ops/s
# Warmup Iteration  28: 305999067.859 ops/s
# Warmup Iteration  29: 307935406.261 ops/s
# Warmup Iteration  30: 308901539.916 ops/s
Iteration   1: 307738202.348 ops/s
Iteration   2: 307528394.068 ops/s
Iteration   3: 308589470.335 ops/s
Iteration   4: 309081600.462 ops/s
Iteration   5: 307775748.934 ops/s
Iteration   6: 308941244.880 ops/s
Iteration   7: 309202155.833 ops/s
Iteration   8: 304780613.163 ops/s
Iteration   9: 307031869.599 ops/s
Iteration  10: 308188351.195 ops/s
Iteration  11: 309892426.189 ops/s
Iteration  12: 308552456.522 ops/s
Iteration  13: 310322154.659 ops/s
Iteration  14: 307843527.935 ops/s
Iteration  15: 308307903.671 ops/s
Iteration  16: 309419950.363 ops/s
Iteration  17: 308779426.024 ops/s
Iteration  18: 304092091.423 ops/s
Iteration  19: 308480049.460 ops/s
Iteration  20: 308397468.816 ops/s
Iteration  21: 307306665.124 ops/s
Iteration  22: 306168304.611 ops/s
Iteration  23: 307269952.160 ops/s
Iteration  24: 308541329.403 ops/s
Iteration  25: 306339212.546 ops/s
Iteration  26: 307735066.810 ops/s
Iteration  27: 308738758.066 ops/s
Iteration  28: 309679318.390 ops/s
Iteration  29: 308656309.594 ops/s
Iteration  30: 307605873.341 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take":
  308032863.197 ±(99.9%) 916899.924 ops/s [Average]
  (min, avg, max) = (304092091.423, 308032863.197, 310322154.659), stdev = 1372372.745
  CI (99.9%): [307115963.274, 308949763.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_take  thrpt   30  308032863.197 ± 916899.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_takeWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_takeWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149978151.161 ops/s
# Warmup Iteration   2: 301860524.354 ops/s
# Warmup Iteration   3: 247786647.497 ops/s
# Warmup Iteration   4: 287061968.937 ops/s
# Warmup Iteration   5: 285429083.697 ops/s
# Warmup Iteration   6: 286898871.279 ops/s
# Warmup Iteration   7: 286394595.046 ops/s
# Warmup Iteration   8: 285774602.966 ops/s
# Warmup Iteration   9: 286702440.598 ops/s
# Warmup Iteration  10: 286047784.286 ops/s
# Warmup Iteration  11: 285780775.603 ops/s
# Warmup Iteration  12: 287762844.571 ops/s
# Warmup Iteration  13: 286410811.276 ops/s
# Warmup Iteration  14: 285148678.423 ops/s
# Warmup Iteration  15: 286042484.264 ops/s
# Warmup Iteration  16: 285955953.946 ops/s
# Warmup Iteration  17: 286726376.860 ops/s
# Warmup Iteration  18: 287996805.086 ops/s
# Warmup Iteration  19: 285663345.208 ops/s
# Warmup Iteration  20: 288757715.911 ops/s
# Warmup Iteration  21: 285551229.562 ops/s
# Warmup Iteration  22: 286725632.824 ops/s
# Warmup Iteration  23: 286134280.172 ops/s
# Warmup Iteration  24: 286156871.585 ops/s
# Warmup Iteration  25: 286805944.607 ops/s
# Warmup Iteration  26: 287086237.387 ops/s
# Warmup Iteration  27: 288137765.633 ops/s
# Warmup Iteration  28: 284041248.575 ops/s
# Warmup Iteration  29: 286805319.604 ops/s
# Warmup Iteration  30: 286807583.033 ops/s
Iteration   1: 286284955.300 ops/s
Iteration   2: 284086740.487 ops/s
Iteration   3: 282648662.048 ops/s
Iteration   4: 285977881.403 ops/s
Iteration   5: 289754985.741 ops/s
Iteration   6: 283028608.819 ops/s
Iteration   7: 286112099.644 ops/s
Iteration   8: 288413672.296 ops/s
Iteration   9: 286706453.005 ops/s
Iteration  10: 286457157.568 ops/s
Iteration  11: 288012351.047 ops/s
Iteration  12: 287372407.531 ops/s
Iteration  13: 286753153.042 ops/s
Iteration  14: 284948822.988 ops/s
Iteration  15: 287951614.097 ops/s
Iteration  16: 286822585.789 ops/s
Iteration  17: 286388788.312 ops/s
Iteration  18: 287817027.552 ops/s
Iteration  19: 287654673.823 ops/s
Iteration  20: 286546018.644 ops/s
Iteration  21: 287231889.862 ops/s
Iteration  22: 288919837.422 ops/s
Iteration  23: 286444329.905 ops/s
Iteration  24: 287595255.837 ops/s
Iteration  25: 287246354.111 ops/s
Iteration  26: 286294347.313 ops/s
Iteration  27: 288298149.193 ops/s
Iteration  28: 287669559.095 ops/s
Iteration  29: 286069566.533 ops/s
Iteration  30: 287661988.898 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_takeWhile":
  286772331.244 ±(99.9%) 1040932.065 ops/s [Average]
  (min, avg, max) = (282648662.048, 286772331.244, 289754985.741), stdev = 1558018.229
  CI (99.9%): [285731399.179, 287813263.308] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_takeWhile  thrpt   30  286772331.244 ± 1040932.065  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747276.146 ops/s
# Warmup Iteration   2: 792709.543 ops/s
# Warmup Iteration   3: 1017129.071 ops/s
# Warmup Iteration   4: 1025589.837 ops/s
# Warmup Iteration   5: 1029395.860 ops/s
# Warmup Iteration   6: 1030626.517 ops/s
# Warmup Iteration   7: 1028968.960 ops/s
# Warmup Iteration   8: 1025832.706 ops/s
# Warmup Iteration   9: 1027703.692 ops/s
# Warmup Iteration  10: 1024716.014 ops/s
# Warmup Iteration  11: 1020188.398 ops/s
# Warmup Iteration  12: 883888.310 ops/s
# Warmup Iteration  13: 1014850.666 ops/s
# Warmup Iteration  14: 1023630.688 ops/s
# Warmup Iteration  15: 1021672.200 ops/s
# Warmup Iteration  16: 1023321.294 ops/s
# Warmup Iteration  17: 1082978.646 ops/s
# Warmup Iteration  18: 1085384.005 ops/s
# Warmup Iteration  19: 1086533.789 ops/s
# Warmup Iteration  20: 1086122.902 ops/s
# Warmup Iteration  21: 1084916.698 ops/s
# Warmup Iteration  22: 1088957.003 ops/s
# Warmup Iteration  23: 1087168.984 ops/s
# Warmup Iteration  24: 1089039.349 ops/s
# Warmup Iteration  25: 1082860.979 ops/s
# Warmup Iteration  26: 1088101.786 ops/s
# Warmup Iteration  27: 1087747.540 ops/s
# Warmup Iteration  28: 1091380.393 ops/s
# Warmup Iteration  29: 1087927.213 ops/s
# Warmup Iteration  30: 1090368.226 ops/s
Iteration   1: 1088690.695 ops/s
Iteration   2: 1085860.606 ops/s
Iteration   3: 1083700.006 ops/s
Iteration   4: 1077410.953 ops/s
Iteration   5: 1084792.299 ops/s
Iteration   6: 1090736.763 ops/s
Iteration   7: 1092492.805 ops/s
Iteration   8: 1089465.968 ops/s
Iteration   9: 1092263.025 ops/s
Iteration  10: 1079625.699 ops/s
Iteration  11: 1089367.108 ops/s
Iteration  12: 1088204.342 ops/s
Iteration  13: 1075977.688 ops/s
Iteration  14: 1080789.112 ops/s
Iteration  15: 1090379.385 ops/s
Iteration  16: 1080471.646 ops/s
Iteration  17: 1088293.973 ops/s
Iteration  18: 1081240.189 ops/s
Iteration  19: 1078880.490 ops/s
Iteration  20: 1084493.171 ops/s
Iteration  21: 1088401.251 ops/s
Iteration  22: 1094089.994 ops/s
Iteration  23: 1083190.089 ops/s
Iteration  24: 1093344.049 ops/s
Iteration  25: 1092693.144 ops/s
Iteration  26: 1091856.097 ops/s
Iteration  27: 1081344.729 ops/s
Iteration  28: 1081537.684 ops/s
Iteration  29: 1080960.759 ops/s
Iteration  30: 1080054.954 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_take_throws":
  1085686.956 ±(99.9%) 3574.669 ops/s [Average]
  (min, avg, max) = (1075977.688, 1085686.956, 1094089.994), stdev = 5350.397
  CI (99.9%): [1082112.287, 1089261.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_take_throws  thrpt   30  1085686.956 ± 3574.669  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35454594.475 ops/s
# Warmup Iteration   2: 74736862.647 ops/s
# Warmup Iteration   3: 68162259.465 ops/s
# Warmup Iteration   4: 79266023.253 ops/s
# Warmup Iteration   5: 79609952.080 ops/s
# Warmup Iteration   6: 80631828.184 ops/s
# Warmup Iteration   7: 80094783.588 ops/s
# Warmup Iteration   8: 79961475.018 ops/s
# Warmup Iteration   9: 79636527.497 ops/s
# Warmup Iteration  10: 81039695.097 ops/s
# Warmup Iteration  11: 80763087.266 ops/s
# Warmup Iteration  12: 80360513.852 ops/s
# Warmup Iteration  13: 79635862.516 ops/s
# Warmup Iteration  14: 80215633.777 ops/s
# Warmup Iteration  15: 79491451.466 ops/s
# Warmup Iteration  16: 80595405.335 ops/s
# Warmup Iteration  17: 80438504.202 ops/s
# Warmup Iteration  18: 78917299.588 ops/s
# Warmup Iteration  19: 80012059.760 ops/s
# Warmup Iteration  20: 81277955.241 ops/s
# Warmup Iteration  21: 81338650.850 ops/s
# Warmup Iteration  22: 79750206.402 ops/s
# Warmup Iteration  23: 80456604.588 ops/s
# Warmup Iteration  24: 80121301.107 ops/s
# Warmup Iteration  25: 80710372.593 ops/s
# Warmup Iteration  26: 80814370.695 ops/s
# Warmup Iteration  27: 80324987.957 ops/s
# Warmup Iteration  28: 80675217.074 ops/s
# Warmup Iteration  29: 81208053.008 ops/s
# Warmup Iteration  30: 80460249.037 ops/s
Iteration   1: 78688427.409 ops/s
Iteration   2: 78766777.768 ops/s
Iteration   3: 80414102.199 ops/s
Iteration   4: 79241733.508 ops/s
Iteration   5: 80126047.306 ops/s
Iteration   6: 80843890.775 ops/s
Iteration   7: 79659201.834 ops/s
Iteration   8: 79770763.164 ops/s
Iteration   9: 80460618.412 ops/s
Iteration  10: 79814514.411 ops/s
Iteration  11: 80350639.975 ops/s
Iteration  12: 80360726.126 ops/s
Iteration  13: 80096540.402 ops/s
Iteration  14: 80643766.855 ops/s
Iteration  15: 80879969.105 ops/s
Iteration  16: 80348559.842 ops/s
Iteration  17: 81120650.324 ops/s
Iteration  18: 81234335.908 ops/s
Iteration  19: 80960364.876 ops/s
Iteration  20: 80601374.490 ops/s
Iteration  21: 80893481.061 ops/s
Iteration  22: 79979932.072 ops/s
Iteration  23: 78886474.261 ops/s
Iteration  24: 79456286.219 ops/s
Iteration  25: 79578848.123 ops/s
Iteration  26: 79611305.004 ops/s
Iteration  27: 80950264.232 ops/s
Iteration  28: 80121480.621 ops/s
Iteration  29: 80689819.646 ops/s
Iteration  30: 80988020.574 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_tap":
  80184630.550 ±(99.9%) 476914.218 ops/s [Average]
  (min, avg, max) = (78688427.409, 80184630.550, 81234335.908), stdev = 713822.804
  CI (99.9%): [79707716.332, 80661544.768] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_tap  thrpt   30  80184630.550 ± 476914.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11119513.706 ops/s
# Warmup Iteration   2: 25292144.056 ops/s
# Warmup Iteration   3: 20394920.007 ops/s
# Warmup Iteration   4: 24648331.758 ops/s
# Warmup Iteration   5: 24675419.578 ops/s
# Warmup Iteration   6: 24555547.003 ops/s
# Warmup Iteration   7: 24555769.183 ops/s
# Warmup Iteration   8: 24610745.392 ops/s
# Warmup Iteration   9: 24493460.706 ops/s
# Warmup Iteration  10: 24564300.924 ops/s
# Warmup Iteration  11: 24575725.980 ops/s
# Warmup Iteration  12: 24520982.201 ops/s
# Warmup Iteration  13: 24501142.961 ops/s
# Warmup Iteration  14: 24576383.489 ops/s
# Warmup Iteration  15: 24500738.579 ops/s
# Warmup Iteration  16: 24333808.524 ops/s
# Warmup Iteration  17: 24687863.330 ops/s
# Warmup Iteration  18: 24494687.613 ops/s
# Warmup Iteration  19: 24535592.514 ops/s
# Warmup Iteration  20: 24572509.971 ops/s
# Warmup Iteration  21: 24595421.276 ops/s
# Warmup Iteration  22: 24239097.677 ops/s
# Warmup Iteration  23: 24447626.290 ops/s
# Warmup Iteration  24: 24665165.250 ops/s
# Warmup Iteration  25: 24608979.796 ops/s
# Warmup Iteration  26: 24477989.519 ops/s
# Warmup Iteration  27: 24663714.077 ops/s
# Warmup Iteration  28: 24586578.378 ops/s
# Warmup Iteration  29: 24563892.987 ops/s
# Warmup Iteration  30: 24567169.978 ops/s
Iteration   1: 24572691.823 ops/s
Iteration   2: 24513987.496 ops/s
Iteration   3: 24508753.865 ops/s
Iteration   4: 24495762.163 ops/s
Iteration   5: 24437020.088 ops/s
Iteration   6: 24600545.564 ops/s
Iteration   7: 24450915.821 ops/s
Iteration   8: 24468258.996 ops/s
Iteration   9: 24585302.373 ops/s
Iteration  10: 24642678.514 ops/s
Iteration  11: 24537052.210 ops/s
Iteration  12: 24766243.035 ops/s
Iteration  13: 24342262.152 ops/s
Iteration  14: 24669613.533 ops/s
Iteration  15: 24599106.427 ops/s
Iteration  16: 24688853.261 ops/s
Iteration  17: 24552013.211 ops/s
Iteration  18: 24728358.388 ops/s
Iteration  19: 24637569.184 ops/s
Iteration  20: 24403990.889 ops/s
Iteration  21: 24450627.454 ops/s
Iteration  22: 24573402.118 ops/s
Iteration  23: 24706699.508 ops/s
Iteration  24: 24458946.252 ops/s
Iteration  25: 24690226.261 ops/s
Iteration  26: 24685928.963 ops/s
Iteration  27: 24684015.431 ops/s
Iteration  28: 24644189.359 ops/s
Iteration  29: 24545738.420 ops/s
Iteration  30: 24557409.212 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_testToString":
  24573272.066 ±(99.9%) 70951.971 ops/s [Average]
  (min, avg, max) = (24342262.152, 24573272.066, 24766243.035), stdev = 106197.578
  CI (99.9%): [24502320.094, 24644224.037] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_testToString  thrpt   30  24573272.066 ± 70951.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15655123.887 ops/s
# Warmup Iteration   2: 32056037.205 ops/s
# Warmup Iteration   3: 28334665.598 ops/s
# Warmup Iteration   4: 32990498.221 ops/s
# Warmup Iteration   5: 33135295.242 ops/s
# Warmup Iteration   6: 33269743.108 ops/s
# Warmup Iteration   7: 33248359.666 ops/s
# Warmup Iteration   8: 33160976.045 ops/s
# Warmup Iteration   9: 33196259.524 ops/s
# Warmup Iteration  10: 33202950.186 ops/s
# Warmup Iteration  11: 33269029.355 ops/s
# Warmup Iteration  12: 33154932.590 ops/s
# Warmup Iteration  13: 33057454.487 ops/s
# Warmup Iteration  14: 33081978.494 ops/s
# Warmup Iteration  15: 33147168.558 ops/s
# Warmup Iteration  16: 32967394.005 ops/s
# Warmup Iteration  17: 33160137.134 ops/s
# Warmup Iteration  18: 33033272.442 ops/s
# Warmup Iteration  19: 33177545.810 ops/s
# Warmup Iteration  20: 31367352.722 ops/s
# Warmup Iteration  21: 33236161.177 ops/s
# Warmup Iteration  22: 32875941.989 ops/s
# Warmup Iteration  23: 33114223.384 ops/s
# Warmup Iteration  24: 33056712.211 ops/s
# Warmup Iteration  25: 33207273.945 ops/s
# Warmup Iteration  26: 33088940.243 ops/s
# Warmup Iteration  27: 32821164.116 ops/s
# Warmup Iteration  28: 32949071.988 ops/s
# Warmup Iteration  29: 33015419.788 ops/s
# Warmup Iteration  30: 33032069.581 ops/s
Iteration   1: 33216208.090 ops/s
Iteration   2: 33380553.541 ops/s
Iteration   3: 33380292.942 ops/s
Iteration   4: 33235776.124 ops/s
Iteration   5: 33099929.065 ops/s
Iteration   6: 33165986.684 ops/s
Iteration   7: 33188228.360 ops/s
Iteration   8: 32961300.081 ops/s
Iteration   9: 33044943.716 ops/s
Iteration  10: 33358651.095 ops/s
Iteration  11: 33079306.081 ops/s
Iteration  12: 32929203.783 ops/s
Iteration  13: 33228718.576 ops/s
Iteration  14: 33418248.057 ops/s
Iteration  15: 31708561.279 ops/s
Iteration  16: 32828299.911 ops/s
Iteration  17: 33201616.739 ops/s
Iteration  18: 33193794.649 ops/s
Iteration  19: 33058797.292 ops/s
Iteration  20: 33023557.325 ops/s
Iteration  21: 33264753.937 ops/s
Iteration  22: 33214053.901 ops/s
Iteration  23: 33257064.921 ops/s
Iteration  24: 33321481.915 ops/s
Iteration  25: 33337009.913 ops/s
Iteration  26: 32891883.650 ops/s
Iteration  27: 32901424.956 ops/s
Iteration  28: 33235213.644 ops/s
Iteration  29: 33294379.401 ops/s
Iteration  30: 33073035.529 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toArray":
  33116409.172 ±(99.9%) 206712.102 ops/s [Average]
  (min, avg, max) = (31708561.279, 33116409.172, 33418248.057), stdev = 309396.966
  CI (99.9%): [32909697.070, 33323121.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toArray  thrpt   30  33116409.172 ± 206712.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151509085.638 ops/s
# Warmup Iteration   2: 303213110.479 ops/s
# Warmup Iteration   3: 267108293.178 ops/s
# Warmup Iteration   4: 310883131.282 ops/s
# Warmup Iteration   5: 311544061.179 ops/s
# Warmup Iteration   6: 312556467.064 ops/s
# Warmup Iteration   7: 311094289.971 ops/s
# Warmup Iteration   8: 311753044.636 ops/s
# Warmup Iteration   9: 309722098.040 ops/s
# Warmup Iteration  10: 309899128.543 ops/s
# Warmup Iteration  11: 311095079.464 ops/s
# Warmup Iteration  12: 311876791.015 ops/s
# Warmup Iteration  13: 313290185.579 ops/s
# Warmup Iteration  14: 312784713.731 ops/s
# Warmup Iteration  15: 310542403.468 ops/s
# Warmup Iteration  16: 312769197.462 ops/s
# Warmup Iteration  17: 310323742.941 ops/s
# Warmup Iteration  18: 309878788.291 ops/s
# Warmup Iteration  19: 310488833.599 ops/s
# Warmup Iteration  20: 311196876.486 ops/s
# Warmup Iteration  21: 311597655.667 ops/s
# Warmup Iteration  22: 311084953.876 ops/s
# Warmup Iteration  23: 311420613.256 ops/s
# Warmup Iteration  24: 311347189.579 ops/s
# Warmup Iteration  25: 311086688.544 ops/s
# Warmup Iteration  26: 312014799.175 ops/s
# Warmup Iteration  27: 311381605.582 ops/s
# Warmup Iteration  28: 312319013.162 ops/s
# Warmup Iteration  29: 312899214.364 ops/s
# Warmup Iteration  30: 310808440.654 ops/s
Iteration   1: 311226076.754 ops/s
Iteration   2: 311807579.257 ops/s
Iteration   3: 312440822.438 ops/s
Iteration   4: 309161539.688 ops/s
Iteration   5: 312431524.661 ops/s
Iteration   6: 312544291.159 ops/s
Iteration   7: 312036071.650 ops/s
Iteration   8: 311688372.479 ops/s
Iteration   9: 312321416.431 ops/s
Iteration  10: 310636453.223 ops/s
Iteration  11: 312879405.341 ops/s
Iteration  12: 313917790.416 ops/s
Iteration  13: 313223869.805 ops/s
Iteration  14: 311596014.845 ops/s
Iteration  15: 313826225.127 ops/s
Iteration  16: 309550184.583 ops/s
Iteration  17: 309863367.432 ops/s
Iteration  18: 310101777.860 ops/s
Iteration  19: 310049875.944 ops/s
Iteration  20: 312917249.485 ops/s
Iteration  21: 312718604.824 ops/s
Iteration  22: 310562254.975 ops/s
Iteration  23: 309660782.876 ops/s
Iteration  24: 310669365.523 ops/s
Iteration  25: 307530141.375 ops/s
Iteration  26: 312861236.980 ops/s
Iteration  27: 311606553.284 ops/s
Iteration  28: 313216642.549 ops/s
Iteration  29: 311702777.757 ops/s
Iteration  30: 312768612.377 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toImmutable":
  311583896.037 ±(99.9%) 1018241.517 ops/s [Average]
  (min, avg, max) = (307530141.375, 311583896.037, 313917790.416), stdev = 1524056.082
  CI (99.9%): [310565654.520, 312602137.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt          Score         Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toImmutable  thrpt   30  311583896.037 ± 1018241.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3685349.694 ops/s
# Warmup Iteration   2: 8078094.378 ops/s
# Warmup Iteration   3: 6928690.275 ops/s
# Warmup Iteration   4: 8164090.311 ops/s
# Warmup Iteration   5: 8193459.723 ops/s
# Warmup Iteration   6: 8248957.758 ops/s
# Warmup Iteration   7: 8239902.855 ops/s
# Warmup Iteration   8: 8231133.913 ops/s
# Warmup Iteration   9: 8196024.859 ops/s
# Warmup Iteration  10: 8227461.577 ops/s
# Warmup Iteration  11: 8173534.158 ops/s
# Warmup Iteration  12: 8251611.276 ops/s
# Warmup Iteration  13: 8238133.843 ops/s
# Warmup Iteration  14: 8154334.018 ops/s
# Warmup Iteration  15: 8155800.481 ops/s
# Warmup Iteration  16: 8226887.691 ops/s
# Warmup Iteration  17: 8199102.283 ops/s
# Warmup Iteration  18: 8223693.051 ops/s
# Warmup Iteration  19: 8151910.512 ops/s
# Warmup Iteration  20: 8198735.352 ops/s
# Warmup Iteration  21: 8214455.424 ops/s
# Warmup Iteration  22: 8194918.783 ops/s
# Warmup Iteration  23: 8249841.606 ops/s
# Warmup Iteration  24: 8219930.429 ops/s
# Warmup Iteration  25: 8232552.843 ops/s
# Warmup Iteration  26: 8218331.244 ops/s
# Warmup Iteration  27: 8224194.021 ops/s
# Warmup Iteration  28: 8220019.801 ops/s
# Warmup Iteration  29: 8203998.927 ops/s
# Warmup Iteration  30: 8215320.801 ops/s
Iteration   1: 8227509.457 ops/s
Iteration   2: 8173466.480 ops/s
Iteration   3: 8233867.101 ops/s
Iteration   4: 8232332.140 ops/s
Iteration   5: 8234649.125 ops/s
Iteration   6: 8257638.261 ops/s
Iteration   7: 8198061.245 ops/s
Iteration   8: 8199320.212 ops/s
Iteration   9: 8229396.786 ops/s
Iteration  10: 8191125.574 ops/s
Iteration  11: 8236677.039 ops/s
Iteration  12: 8183047.265 ops/s
Iteration  13: 8236432.776 ops/s
Iteration  14: 8207860.645 ops/s
Iteration  15: 8198101.149 ops/s
Iteration  16: 8212628.528 ops/s
Iteration  17: 8211429.923 ops/s
Iteration  18: 8239032.327 ops/s
Iteration  19: 8183814.923 ops/s
Iteration  20: 8208645.331 ops/s
Iteration  21: 8197773.794 ops/s
Iteration  22: 8241425.224 ops/s
Iteration  23: 8236551.142 ops/s
Iteration  24: 8231607.585 ops/s
Iteration  25: 8219217.181 ops/s
Iteration  26: 8244700.050 ops/s
Iteration  27: 8145105.115 ops/s
Iteration  28: 8263681.742 ops/s
Iteration  29: 8209614.209 ops/s
Iteration  30: 8186583.062 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toList":
  8215709.846 ±(99.9%) 17832.404 ops/s [Average]
  (min, avg, max) = (8145105.115, 8215709.846, 8263681.742), stdev = 26690.705
  CI (99.9%): [8197877.443, 8233542.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toList  thrpt   30  8215709.846 ± 17832.404  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 31382827.233 ops/s
# Warmup Iteration   2: 63935035.124 ops/s
# Warmup Iteration   3: 55468141.704 ops/s
# Warmup Iteration   4: 65128044.580 ops/s
# Warmup Iteration   5: 65447938.794 ops/s
# Warmup Iteration   6: 65148220.346 ops/s
# Warmup Iteration   7: 65087851.522 ops/s
# Warmup Iteration   8: 65647208.692 ops/s
# Warmup Iteration   9: 65483198.993 ops/s
# Warmup Iteration  10: 65527668.193 ops/s
# Warmup Iteration  11: 65850350.835 ops/s
# Warmup Iteration  12: 65633702.803 ops/s
# Warmup Iteration  13: 65767814.187 ops/s
# Warmup Iteration  14: 65576766.678 ops/s
# Warmup Iteration  15: 65512956.044 ops/s
# Warmup Iteration  16: 65363532.407 ops/s
# Warmup Iteration  17: 64150030.887 ops/s
# Warmup Iteration  18: 64602727.864 ops/s
# Warmup Iteration  19: 64683214.018 ops/s
# Warmup Iteration  20: 64758744.364 ops/s
# Warmup Iteration  21: 64612256.727 ops/s
# Warmup Iteration  22: 64663073.743 ops/s
# Warmup Iteration  23: 64372793.420 ops/s
# Warmup Iteration  24: 64295798.463 ops/s
# Warmup Iteration  25: 64930516.060 ops/s
# Warmup Iteration  26: 64839025.056 ops/s
# Warmup Iteration  27: 64586193.482 ops/s
# Warmup Iteration  28: 64499553.890 ops/s
# Warmup Iteration  29: 64405784.543 ops/s
# Warmup Iteration  30: 64982531.064 ops/s
Iteration   1: 64793195.459 ops/s
Iteration   2: 64631312.348 ops/s
Iteration   3: 65153233.498 ops/s
Iteration   4: 64741110.714 ops/s
Iteration   5: 64301585.547 ops/s
Iteration   6: 63697579.715 ops/s
Iteration   7: 64890993.138 ops/s
Iteration   8: 63931136.068 ops/s
Iteration   9: 64697048.710 ops/s
Iteration  10: 64616963.030 ops/s
Iteration  11: 64566409.596 ops/s
Iteration  12: 64847796.022 ops/s
Iteration  13: 64532715.534 ops/s
Iteration  14: 64949624.536 ops/s
Iteration  15: 64383225.259 ops/s
Iteration  16: 64983231.239 ops/s
Iteration  17: 64638036.775 ops/s
Iteration  18: 64633445.617 ops/s
Iteration  19: 64241791.180 ops/s
Iteration  20: 64047442.180 ops/s
Iteration  21: 64097279.917 ops/s
Iteration  22: 63810941.487 ops/s
Iteration  23: 64567022.231 ops/s
Iteration  24: 64621646.964 ops/s
Iteration  25: 65083436.811 ops/s
Iteration  26: 64644209.014 ops/s
Iteration  27: 64549002.327 ops/s
Iteration  28: 64596725.282 ops/s
Iteration  29: 64384124.194 ops/s
Iteration  30: 64637024.240 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toReversed":
  64542309.621 ±(99.9%) 238390.212 ops/s [Average]
  (min, avg, max) = (63697579.715, 64542309.621, 65153233.498), stdev = 356811.274
  CI (99.9%): [64303919.409, 64780699.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toReversed  thrpt   30  64542309.621 ± 238390.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16589064.412 ops/s
# Warmup Iteration   2: 36339250.839 ops/s
# Warmup Iteration   3: 32030089.449 ops/s
# Warmup Iteration   4: 38265820.796 ops/s
# Warmup Iteration   5: 38182859.129 ops/s
# Warmup Iteration   6: 38458797.925 ops/s
# Warmup Iteration   7: 38257692.576 ops/s
# Warmup Iteration   8: 38098735.326 ops/s
# Warmup Iteration   9: 37931441.994 ops/s
# Warmup Iteration  10: 38417118.590 ops/s
# Warmup Iteration  11: 38333018.226 ops/s
# Warmup Iteration  12: 38378308.641 ops/s
# Warmup Iteration  13: 38198264.735 ops/s
# Warmup Iteration  14: 38196528.795 ops/s
# Warmup Iteration  15: 38336085.846 ops/s
# Warmup Iteration  16: 38496939.915 ops/s
# Warmup Iteration  17: 38285803.779 ops/s
# Warmup Iteration  18: 38266254.073 ops/s
# Warmup Iteration  19: 38299569.204 ops/s
# Warmup Iteration  20: 38401759.743 ops/s
# Warmup Iteration  21: 38336268.891 ops/s
# Warmup Iteration  22: 38257942.391 ops/s
# Warmup Iteration  23: 38232696.299 ops/s
# Warmup Iteration  24: 38156703.758 ops/s
# Warmup Iteration  25: 38241585.047 ops/s
# Warmup Iteration  26: 38419855.697 ops/s
# Warmup Iteration  27: 38311439.934 ops/s
# Warmup Iteration  28: 38521028.159 ops/s
# Warmup Iteration  29: 38172429.553 ops/s
# Warmup Iteration  30: 38238153.736 ops/s
Iteration   1: 38379729.814 ops/s
Iteration   2: 38411552.495 ops/s
Iteration   3: 38480712.704 ops/s
Iteration   4: 38356339.132 ops/s
Iteration   5: 38437162.111 ops/s
Iteration   6: 38182746.637 ops/s
Iteration   7: 38394687.024 ops/s
Iteration   8: 38347782.146 ops/s
Iteration   9: 38385947.344 ops/s
Iteration  10: 38372212.161 ops/s
Iteration  11: 38083524.067 ops/s
Iteration  12: 38513524.635 ops/s
Iteration  13: 38313661.169 ops/s
Iteration  14: 38298052.602 ops/s
Iteration  15: 38414496.945 ops/s
Iteration  16: 38423500.555 ops/s
Iteration  17: 38412846.130 ops/s
Iteration  18: 38517509.015 ops/s
Iteration  19: 38325222.114 ops/s
Iteration  20: 38492775.212 ops/s
Iteration  21: 38439600.658 ops/s
Iteration  22: 38328888.302 ops/s
Iteration  23: 38478828.680 ops/s
Iteration  24: 38457638.470 ops/s
Iteration  25: 38354138.166 ops/s
Iteration  26: 37370163.820 ops/s
Iteration  27: 38042067.284 ops/s
Iteration  28: 38438043.350 ops/s
Iteration  29: 38344511.736 ops/s
Iteration  30: 38476494.013 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedList":
  38342478.616 ±(99.9%) 143570.923 ops/s [Average]
  (min, avg, max) = (37370163.820, 38342478.616, 38517509.015), stdev = 214890.214
  CI (99.9%): [38198907.694, 38486049.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toSortedList  thrpt   30  38342478.616 ± 143570.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5105546.380 ops/s
# Warmup Iteration   2: 5386192.666 ops/s
# Warmup Iteration   3: 6210629.542 ops/s
# Warmup Iteration   4: 6973471.477 ops/s
# Warmup Iteration   5: 6973230.367 ops/s
# Warmup Iteration   6: 6982169.358 ops/s
# Warmup Iteration   7: 6907168.007 ops/s
# Warmup Iteration   8: 6984026.330 ops/s
# Warmup Iteration   9: 7007418.219 ops/s
# Warmup Iteration  10: 6973381.639 ops/s
# Warmup Iteration  11: 6943506.264 ops/s
# Warmup Iteration  12: 6961111.364 ops/s
# Warmup Iteration  13: 7014562.784 ops/s
# Warmup Iteration  14: 6829545.136 ops/s
# Warmup Iteration  15: 5961841.547 ops/s
# Warmup Iteration  16: 7008297.122 ops/s
# Warmup Iteration  17: 7003435.429 ops/s
# Warmup Iteration  18: 6994427.271 ops/s
# Warmup Iteration  19: 6995619.562 ops/s
# Warmup Iteration  20: 6956334.318 ops/s
# Warmup Iteration  21: 7002139.076 ops/s
# Warmup Iteration  22: 6967012.210 ops/s
# Warmup Iteration  23: 6991173.805 ops/s
# Warmup Iteration  24: 7021402.804 ops/s
# Warmup Iteration  25: 6999164.552 ops/s
# Warmup Iteration  26: 6981687.628 ops/s
# Warmup Iteration  27: 7009652.001 ops/s
# Warmup Iteration  28: 6990035.464 ops/s
# Warmup Iteration  29: 7003716.846 ops/s
# Warmup Iteration  30: 6978535.614 ops/s
Iteration   1: 6985249.543 ops/s
Iteration   2: 6938110.420 ops/s
Iteration   3: 7010086.735 ops/s
Iteration   4: 7013388.361 ops/s
Iteration   5: 7024016.988 ops/s
Iteration   6: 6915743.586 ops/s
Iteration   7: 7016497.365 ops/s
Iteration   8: 6993137.642 ops/s
Iteration   9: 7020726.174 ops/s
Iteration  10: 7021468.452 ops/s
Iteration  11: 6888460.070 ops/s
Iteration  12: 7022224.115 ops/s
Iteration  13: 6955343.907 ops/s
Iteration  14: 6983691.880 ops/s
Iteration  15: 6978399.757 ops/s
Iteration  16: 6972350.879 ops/s
Iteration  17: 6980736.542 ops/s
Iteration  18: 6961101.560 ops/s
Iteration  19: 7018638.402 ops/s
Iteration  20: 7004751.002 ops/s
Iteration  21: 6987912.299 ops/s
Iteration  22: 7015736.691 ops/s
Iteration  23: 7015439.171 ops/s
Iteration  24: 7013168.787 ops/s
Iteration  25: 6980750.321 ops/s
Iteration  26: 6953612.755 ops/s
Iteration  27: 7000885.337 ops/s
Iteration  28: 7019000.857 ops/s
Iteration  29: 7003165.068 ops/s
Iteration  30: 7009309.745 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedListBy":
  6990103.480 ±(99.9%) 22449.702 ops/s [Average]
  (min, avg, max) = (6888460.070, 6990103.480, 7024016.988), stdev = 33601.659
  CI (99.9%): [6967653.779, 7012553.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toSortedListBy  thrpt   30  6990103.480 ± 22449.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10289682.944 ops/s
# Warmup Iteration   2: 21931720.020 ops/s
# Warmup Iteration   3: 19546291.283 ops/s
# Warmup Iteration   4: 22627737.466 ops/s
# Warmup Iteration   5: 22672456.211 ops/s
# Warmup Iteration   6: 22626730.244 ops/s
# Warmup Iteration   7: 22332336.289 ops/s
# Warmup Iteration   8: 22669512.114 ops/s
# Warmup Iteration   9: 22535206.922 ops/s
# Warmup Iteration  10: 22528875.425 ops/s
# Warmup Iteration  11: 22542608.279 ops/s
# Warmup Iteration  12: 22678452.419 ops/s
# Warmup Iteration  13: 22403563.642 ops/s
# Warmup Iteration  14: 22681541.845 ops/s
# Warmup Iteration  15: 22641482.562 ops/s
# Warmup Iteration  16: 22461558.461 ops/s
# Warmup Iteration  17: 22541275.996 ops/s
# Warmup Iteration  18: 22550080.594 ops/s
# Warmup Iteration  19: 22708828.178 ops/s
# Warmup Iteration  20: 22696130.835 ops/s
# Warmup Iteration  21: 22700778.139 ops/s
# Warmup Iteration  22: 22652388.546 ops/s
# Warmup Iteration  23: 22568557.966 ops/s
# Warmup Iteration  24: 22603778.029 ops/s
# Warmup Iteration  25: 22463013.174 ops/s
# Warmup Iteration  26: 22562117.060 ops/s
# Warmup Iteration  27: 22575872.259 ops/s
# Warmup Iteration  28: 22573812.398 ops/s
# Warmup Iteration  29: 22464061.866 ops/s
# Warmup Iteration  30: 22746601.456 ops/s
Iteration   1: 22694476.666 ops/s
Iteration   2: 22629554.507 ops/s
Iteration   3: 22621370.720 ops/s
Iteration   4: 22564810.513 ops/s
Iteration   5: 22465399.480 ops/s
Iteration   6: 22608483.933 ops/s
Iteration   7: 22533891.788 ops/s
Iteration   8: 22611643.904 ops/s
Iteration   9: 22743103.786 ops/s
Iteration  10: 22662851.840 ops/s
Iteration  11: 22685745.931 ops/s
Iteration  12: 22575995.422 ops/s
Iteration  13: 22483489.441 ops/s
Iteration  14: 22554791.914 ops/s
Iteration  15: 22588761.678 ops/s
Iteration  16: 22860144.953 ops/s
Iteration  17: 22481624.508 ops/s
Iteration  18: 22674944.527 ops/s
Iteration  19: 22362581.139 ops/s
Iteration  20: 22531407.976 ops/s
Iteration  21: 22500710.713 ops/s
Iteration  22: 22390971.715 ops/s
Iteration  23: 22792666.862 ops/s
Iteration  24: 22451341.006 ops/s
Iteration  25: 22583805.929 ops/s
Iteration  26: 22568671.755 ops/s
Iteration  27: 22730151.396 ops/s
Iteration  28: 22664369.368 ops/s
Iteration  29: 22566173.594 ops/s
Iteration  30: 22604385.422 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSet":
  22592944.079 ±(99.9%) 74999.272 ops/s [Average]
  (min, avg, max) = (22362581.139, 22592944.079, 22860144.953), stdev = 112255.388
  CI (99.9%): [22517944.808, 22667943.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toSortedSet  thrpt   30  22592944.079 ± 74999.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1727795.363 ops/s
# Warmup Iteration   2: 3108941.610 ops/s
# Warmup Iteration   3: 3396290.247 ops/s
# Warmup Iteration   4: 3461803.142 ops/s
# Warmup Iteration   5: 3458028.039 ops/s
# Warmup Iteration   6: 2877056.158 ops/s
# Warmup Iteration   7: 3353270.992 ops/s
# Warmup Iteration   8: 3433496.817 ops/s
# Warmup Iteration   9: 3473775.512 ops/s
# Warmup Iteration  10: 3474879.648 ops/s
# Warmup Iteration  11: 3448003.780 ops/s
# Warmup Iteration  12: 3449454.802 ops/s
# Warmup Iteration  13: 3424565.604 ops/s
# Warmup Iteration  14: 3431771.844 ops/s
# Warmup Iteration  15: 3446454.828 ops/s
# Warmup Iteration  16: 3468868.725 ops/s
# Warmup Iteration  17: 3479019.070 ops/s
# Warmup Iteration  18: 3490126.991 ops/s
# Warmup Iteration  19: 3476472.206 ops/s
# Warmup Iteration  20: 3481993.057 ops/s
# Warmup Iteration  21: 3498267.780 ops/s
# Warmup Iteration  22: 3497153.679 ops/s
# Warmup Iteration  23: 3495886.356 ops/s
# Warmup Iteration  24: 3493216.335 ops/s
# Warmup Iteration  25: 3501026.334 ops/s
# Warmup Iteration  26: 3488475.463 ops/s
# Warmup Iteration  27: 3496160.427 ops/s
# Warmup Iteration  28: 3491208.018 ops/s
# Warmup Iteration  29: 3492867.374 ops/s
# Warmup Iteration  30: 3500599.158 ops/s
Iteration   1: 3506811.988 ops/s
Iteration   2: 3492717.495 ops/s
Iteration   3: 3494734.941 ops/s
Iteration   4: 3503970.358 ops/s
Iteration   5: 3493435.140 ops/s
Iteration   6: 3495780.384 ops/s
Iteration   7: 3486215.291 ops/s
Iteration   8: 3503652.695 ops/s
Iteration   9: 3494704.820 ops/s
Iteration  10: 3497135.718 ops/s
Iteration  11: 3486225.590 ops/s
Iteration  12: 3463161.524 ops/s
Iteration  13: 3500691.725 ops/s
Iteration  14: 3487916.468 ops/s
Iteration  15: 3499602.226 ops/s
Iteration  16: 3492293.631 ops/s
Iteration  17: 3472496.497 ops/s
Iteration  18: 3492309.810 ops/s
Iteration  19: 3455397.418 ops/s
Iteration  20: 3470404.704 ops/s
Iteration  21: 3487001.369 ops/s
Iteration  22: 3490000.926 ops/s
Iteration  23: 3490611.804 ops/s
Iteration  24: 3492515.334 ops/s
Iteration  25: 3470623.016 ops/s
Iteration  26: 3503765.274 ops/s
Iteration  27: 3479960.945 ops/s
Iteration  28: 3504190.231 ops/s
Iteration  29: 3471046.379 ops/s
Iteration  30: 3498249.863 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetBy":
  3489254.119 ±(99.9%) 8740.843 ops/s [Average]
  (min, avg, max) = (3455397.418, 3489254.119, 3506811.988), stdev = 13082.883
  CI (99.9%): [3480513.276, 3497994.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  3489254.119 ± 8740.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6981639.146 ops/s
# Warmup Iteration   2: 14313795.146 ops/s
# Warmup Iteration   3: 12841826.179 ops/s
# Warmup Iteration   4: 14987431.667 ops/s
# Warmup Iteration   5: 14709920.463 ops/s
# Warmup Iteration   6: 14713541.081 ops/s
# Warmup Iteration   7: 14756940.501 ops/s
# Warmup Iteration   8: 14699708.269 ops/s
# Warmup Iteration   9: 14758059.566 ops/s
# Warmup Iteration  10: 14759287.419 ops/s
# Warmup Iteration  11: 14848339.917 ops/s
# Warmup Iteration  12: 14725468.798 ops/s
# Warmup Iteration  13: 14819299.287 ops/s
# Warmup Iteration  14: 14859620.045 ops/s
# Warmup Iteration  15: 14905410.916 ops/s
# Warmup Iteration  16: 14835210.388 ops/s
# Warmup Iteration  17: 14729803.652 ops/s
# Warmup Iteration  18: 14601257.449 ops/s
# Warmup Iteration  19: 14634596.392 ops/s
# Warmup Iteration  20: 14812883.956 ops/s
# Warmup Iteration  21: 14767252.830 ops/s
# Warmup Iteration  22: 14605346.038 ops/s
# Warmup Iteration  23: 14731406.716 ops/s
# Warmup Iteration  24: 14674170.155 ops/s
# Warmup Iteration  25: 14712090.745 ops/s
# Warmup Iteration  26: 14740752.865 ops/s
# Warmup Iteration  27: 14615575.091 ops/s
# Warmup Iteration  28: 14719760.018 ops/s
# Warmup Iteration  29: 14704509.890 ops/s
# Warmup Iteration  30: 14848840.368 ops/s
Iteration   1: 14779405.920 ops/s
Iteration   2: 14699466.797 ops/s
Iteration   3: 14713228.870 ops/s
Iteration   4: 14625436.653 ops/s
Iteration   5: 14498324.113 ops/s
Iteration   6: 14665737.986 ops/s
Iteration   7: 14670786.989 ops/s
Iteration   8: 14665908.870 ops/s
Iteration   9: 14562550.419 ops/s
Iteration  10: 14923736.206 ops/s
Iteration  11: 14915622.834 ops/s
Iteration  12: 14688675.334 ops/s
Iteration  13: 14676793.440 ops/s
Iteration  14: 14676523.918 ops/s
Iteration  15: 14687250.034 ops/s
Iteration  16: 14606051.259 ops/s
Iteration  17: 14873958.685 ops/s
Iteration  18: 14758391.649 ops/s
Iteration  19: 14726678.479 ops/s
Iteration  20: 14791559.700 ops/s
Iteration  21: 14783710.065 ops/s
Iteration  22: 14690293.390 ops/s
Iteration  23: 14702667.679 ops/s
Iteration  24: 14766233.430 ops/s
Iteration  25: 14966884.185 ops/s
Iteration  26: 14466751.942 ops/s
Iteration  27: 14557304.576 ops/s
Iteration  28: 14643558.257 ops/s
Iteration  29: 14617148.851 ops/s
Iteration  30: 14526377.614 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetWithComparator":
  14697567.271 ±(99.9%) 80578.188 ops/s [Average]
  (min, avg, max) = (14466751.942, 14697567.271, 14966884.185), stdev = 120605.648
  CI (99.9%): [14616989.083, 14778145.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toSortedSetWithComparator  thrpt   30  14697567.271 ± 80578.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toStack$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toStack

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6176906.369 ops/s
# Warmup Iteration   2: 14055944.510 ops/s
# Warmup Iteration   3: 14624721.642 ops/s
# Warmup Iteration   4: 12255897.504 ops/s
# Warmup Iteration   5: 14637257.826 ops/s
# Warmup Iteration   6: 14505124.931 ops/s
# Warmup Iteration   7: 14558087.380 ops/s
# Warmup Iteration   8: 14664381.887 ops/s
# Warmup Iteration   9: 14604383.964 ops/s
# Warmup Iteration  10: 14693899.632 ops/s
# Warmup Iteration  11: 14723692.716 ops/s
# Warmup Iteration  12: 14676411.996 ops/s
# Warmup Iteration  13: 14662414.512 ops/s
# Warmup Iteration  14: 14726670.157 ops/s
# Warmup Iteration  15: 14718834.488 ops/s
# Warmup Iteration  16: 14692295.743 ops/s
# Warmup Iteration  17: 14692391.614 ops/s
# Warmup Iteration  18: 14573338.161 ops/s
# Warmup Iteration  19: 14659268.857 ops/s
# Warmup Iteration  20: 14670370.220 ops/s
# Warmup Iteration  21: 14657245.429 ops/s
# Warmup Iteration  22: 14668393.831 ops/s
# Warmup Iteration  23: 14752936.233 ops/s
# Warmup Iteration  24: 14737187.404 ops/s
# Warmup Iteration  25: 14647849.131 ops/s
# Warmup Iteration  26: 14683333.126 ops/s
# Warmup Iteration  27: 14691723.799 ops/s
# Warmup Iteration  28: 14679871.794 ops/s
# Warmup Iteration  29: 14666190.799 ops/s
# Warmup Iteration  30: 14739377.371 ops/s
Iteration   1: 14759586.010 ops/s
Iteration   2: 14708821.397 ops/s
Iteration   3: 14723348.161 ops/s
Iteration   4: 14648637.702 ops/s
Iteration   5: 14762168.220 ops/s
Iteration   6: 14780253.446 ops/s
Iteration   7: 14661293.579 ops/s
Iteration   8: 14706936.178 ops/s
Iteration   9: 14671310.063 ops/s
Iteration  10: 14681917.252 ops/s
Iteration  11: 14740108.949 ops/s
Iteration  12: 14719995.678 ops/s
Iteration  13: 14677012.519 ops/s
Iteration  14: 14753920.178 ops/s
Iteration  15: 14679353.782 ops/s
Iteration  16: 14683179.109 ops/s
Iteration  17: 14784314.317 ops/s
Iteration  18: 14730364.990 ops/s
Iteration  19: 14744383.561 ops/s
Iteration  20: 14693757.189 ops/s
Iteration  21: 14744742.699 ops/s
Iteration  22: 14740989.967 ops/s
Iteration  23: 14773012.203 ops/s
Iteration  24: 14712669.184 ops/s
Iteration  25: 14770972.473 ops/s
Iteration  26: 14732901.641 ops/s
Iteration  27: 14647922.504 ops/s
Iteration  28: 14731666.515 ops/s
Iteration  29: 14725818.112 ops/s
Iteration  30: 14571356.032 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_toStack":
  14715423.787 ±(99.9%) 31653.394 ops/s [Average]
  (min, avg, max) = (14571356.032, 14715423.787, 14784314.317), stdev = 47377.313
  CI (99.9%): [14683770.393, 14747077.181] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_toStack  thrpt   30  14715423.787 ± 31653.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20278108.753 ops/s
# Warmup Iteration   2: 42497842.103 ops/s
# Warmup Iteration   3: 39959514.517 ops/s
# Warmup Iteration   4: 47027548.427 ops/s
# Warmup Iteration   5: 47171827.723 ops/s
# Warmup Iteration   6: 47287114.479 ops/s
# Warmup Iteration   7: 47130059.101 ops/s
# Warmup Iteration   8: 47020043.740 ops/s
# Warmup Iteration   9: 47126539.880 ops/s
# Warmup Iteration  10: 47033661.471 ops/s
# Warmup Iteration  11: 47184241.225 ops/s
# Warmup Iteration  12: 47259090.159 ops/s
# Warmup Iteration  13: 47258563.577 ops/s
# Warmup Iteration  14: 47144886.840 ops/s
# Warmup Iteration  15: 47095190.537 ops/s
# Warmup Iteration  16: 46952998.787 ops/s
# Warmup Iteration  17: 47212718.392 ops/s
# Warmup Iteration  18: 47021950.417 ops/s
# Warmup Iteration  19: 47038870.526 ops/s
# Warmup Iteration  20: 47043066.837 ops/s
# Warmup Iteration  21: 47204015.955 ops/s
# Warmup Iteration  22: 47225724.725 ops/s
# Warmup Iteration  23: 47015204.973 ops/s
# Warmup Iteration  24: 47185996.143 ops/s
# Warmup Iteration  25: 47014477.488 ops/s
# Warmup Iteration  26: 46822079.758 ops/s
# Warmup Iteration  27: 46835296.797 ops/s
# Warmup Iteration  28: 47192168.795 ops/s
# Warmup Iteration  29: 47195748.339 ops/s
# Warmup Iteration  30: 47144236.331 ops/s
Iteration   1: 47143740.680 ops/s
Iteration   2: 47476347.142 ops/s
Iteration   3: 47239909.341 ops/s
Iteration   4: 47400650.885 ops/s
Iteration   5: 47072257.676 ops/s
Iteration   6: 47123200.400 ops/s
Iteration   7: 47040467.994 ops/s
Iteration   8: 46814613.581 ops/s
Iteration   9: 46904967.003 ops/s
Iteration  10: 46969116.696 ops/s
Iteration  11: 47000551.048 ops/s
Iteration  12: 46857674.770 ops/s
Iteration  13: 47331764.305 ops/s
Iteration  14: 47091853.780 ops/s
Iteration  15: 47077609.316 ops/s
Iteration  16: 46838244.071 ops/s
Iteration  17: 46519196.349 ops/s
Iteration  18: 47197659.091 ops/s
Iteration  19: 47157423.467 ops/s
Iteration  20: 47247380.113 ops/s
Iteration  21: 47120034.851 ops/s
Iteration  22: 47275347.211 ops/s
Iteration  23: 47041830.488 ops/s
Iteration  24: 47172945.786 ops/s
Iteration  25: 46880052.286 ops/s
Iteration  26: 47057640.499 ops/s
Iteration  27: 47196713.650 ops/s
Iteration  28: 47177900.980 ops/s
Iteration  29: 47212017.007 ops/s
Iteration  30: 46944406.152 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zip":
  47086117.221 ±(99.9%) 129807.203 ops/s [Average]
  (min, avg, max) = (46519196.349, 47086117.221, 47476347.142), stdev = 194289.326
  CI (99.9%): [46956310.017, 47215924.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_zip  thrpt   30  47086117.221 ± 129807.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54920187.468 ops/s
# Warmup Iteration   2: 115570511.881 ops/s
# Warmup Iteration   3: 93091375.601 ops/s
# Warmup Iteration   4: 108996510.142 ops/s
# Warmup Iteration   5: 109095057.046 ops/s
# Warmup Iteration   6: 106521435.584 ops/s
# Warmup Iteration   7: 109241928.622 ops/s
# Warmup Iteration   8: 108853804.677 ops/s
# Warmup Iteration   9: 108935045.609 ops/s
# Warmup Iteration  10: 109520698.428 ops/s
# Warmup Iteration  11: 109045565.611 ops/s
# Warmup Iteration  12: 109146213.622 ops/s
# Warmup Iteration  13: 108549727.745 ops/s
# Warmup Iteration  14: 108425421.811 ops/s
# Warmup Iteration  15: 108759165.348 ops/s
# Warmup Iteration  16: 108618623.670 ops/s
# Warmup Iteration  17: 108893548.180 ops/s
# Warmup Iteration  18: 109191092.338 ops/s
# Warmup Iteration  19: 109051853.143 ops/s
# Warmup Iteration  20: 108805096.072 ops/s
# Warmup Iteration  21: 108968229.818 ops/s
# Warmup Iteration  22: 108746696.195 ops/s
# Warmup Iteration  23: 108590447.748 ops/s
# Warmup Iteration  24: 109007313.382 ops/s
# Warmup Iteration  25: 108555638.793 ops/s
# Warmup Iteration  26: 108828012.540 ops/s
# Warmup Iteration  27: 109330737.283 ops/s
# Warmup Iteration  28: 109381310.694 ops/s
# Warmup Iteration  29: 109780784.557 ops/s
# Warmup Iteration  30: 109069683.259 ops/s
Iteration   1: 109552342.026 ops/s
Iteration   2: 109374180.996 ops/s
Iteration   3: 109573856.024 ops/s
Iteration   4: 109158113.152 ops/s
Iteration   5: 109315126.518 ops/s
Iteration   6: 109281681.904 ops/s
Iteration   7: 109301958.252 ops/s
Iteration   8: 108420355.399 ops/s
Iteration   9: 108974958.527 ops/s
Iteration  10: 109302598.320 ops/s
Iteration  11: 108301857.452 ops/s
Iteration  12: 108894672.807 ops/s
Iteration  13: 109451237.880 ops/s
Iteration  14: 108970790.369 ops/s
Iteration  15: 109592002.253 ops/s
Iteration  16: 109072773.978 ops/s
Iteration  17: 109451871.079 ops/s
Iteration  18: 109469909.788 ops/s
Iteration  19: 108932483.567 ops/s
Iteration  20: 109532718.727 ops/s
Iteration  21: 108948155.612 ops/s
Iteration  22: 109632874.066 ops/s
Iteration  23: 108592579.874 ops/s
Iteration  24: 109147932.400 ops/s
Iteration  25: 108795831.259 ops/s
Iteration  26: 108993949.020 ops/s
Iteration  27: 107851051.532 ops/s
Iteration  28: 109600212.156 ops/s
Iteration  29: 109017709.215 ops/s
Iteration  30: 109500496.955 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableEmptyListTest._Benchmark.benchmark_zipWithIndex":
  109133542.704 ±(99.9%) 285578.178 ops/s [Average]
  (min, avg, max) = (107851051.532, 109133542.704, 109632874.066), stdev = 427440.005
  CI (99.9%): [108847964.525, 109419120.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt          Score        Error  Units
ImmutableEmptyListTest._Benchmark.benchmark_zipWithIndex  thrpt   30  109133542.704 ± 285578.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725964.234 ops/s
# Warmup Iteration   2: 764975.753 ops/s
# Warmup Iteration   3: 978401.129 ops/s
# Warmup Iteration   4: 976263.895 ops/s
# Warmup Iteration   5: 975107.072 ops/s
# Warmup Iteration   6: 978984.365 ops/s
# Warmup Iteration   7: 980500.221 ops/s
# Warmup Iteration   8: 980138.884 ops/s
# Warmup Iteration   9: 978990.892 ops/s
# Warmup Iteration  10: 976592.660 ops/s
# Warmup Iteration  11: 972744.261 ops/s
# Warmup Iteration  12: 829092.945 ops/s
# Warmup Iteration  13: 981082.663 ops/s
# Warmup Iteration  14: 978332.771 ops/s
# Warmup Iteration  15: 975890.658 ops/s
# Warmup Iteration  16: 975240.686 ops/s
# Warmup Iteration  17: 1029174.201 ops/s
# Warmup Iteration  18: 1031231.310 ops/s
# Warmup Iteration  19: 1021460.674 ops/s
# Warmup Iteration  20: 1031458.388 ops/s
# Warmup Iteration  21: 1030673.122 ops/s
# Warmup Iteration  22: 1030099.482 ops/s
# Warmup Iteration  23: 1029750.704 ops/s
# Warmup Iteration  24: 1035410.431 ops/s
# Warmup Iteration  25: 1038786.861 ops/s
# Warmup Iteration  26: 1037551.573 ops/s
# Warmup Iteration  27: 1029595.229 ops/s
# Warmup Iteration  28: 1034474.164 ops/s
# Warmup Iteration  29: 1035259.083 ops/s
# Warmup Iteration  30: 1027787.490 ops/s
Iteration   1: 1037720.129 ops/s
Iteration   2: 1028717.438 ops/s
Iteration   3: 1034817.377 ops/s
Iteration   4: 1031066.087 ops/s
Iteration   5: 1027321.617 ops/s
Iteration   6: 1036709.730 ops/s
Iteration   7: 1035261.305 ops/s
Iteration   8: 1024513.116 ops/s
Iteration   9: 1026695.788 ops/s
Iteration  10: 1024307.632 ops/s
Iteration  11: 1028407.873 ops/s
Iteration  12: 1033150.475 ops/s
Iteration  13: 1024466.029 ops/s
Iteration  14: 1030326.633 ops/s
Iteration  15: 1037647.548 ops/s
Iteration  16: 1033076.741 ops/s
Iteration  17: 1029502.839 ops/s
Iteration  18: 1028128.932 ops/s
Iteration  19: 1032015.340 ops/s
Iteration  20: 1019232.796 ops/s
Iteration  21: 1033937.458 ops/s
Iteration  22: 1031095.756 ops/s
Iteration  23: 1026928.056 ops/s
Iteration  24: 1036537.391 ops/s
Iteration  25: 1031351.862 ops/s
Iteration  26: 1040459.979 ops/s
Iteration  27: 1022020.860 ops/s
Iteration  28: 1025439.057 ops/s
Iteration  29: 1019922.631 ops/s
Iteration  30: 1029276.026 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_add":
  1030001.817 ±(99.9%) 3596.701 ops/s [Average]
  (min, avg, max) = (1019232.796, 1030001.817, 1040459.979), stdev = 5383.373
  CI (99.9%): [1026405.116, 1033598.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_add  thrpt   30  1030001.817 ± 3596.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618243.736 ops/s
# Warmup Iteration   2: 756826.617 ops/s
# Warmup Iteration   3: 957663.335 ops/s
# Warmup Iteration   4: 947510.611 ops/s
# Warmup Iteration   5: 953178.882 ops/s
# Warmup Iteration   6: 948887.375 ops/s
# Warmup Iteration   7: 950101.755 ops/s
# Warmup Iteration   8: 956974.935 ops/s
# Warmup Iteration   9: 801016.543 ops/s
# Warmup Iteration  10: 953408.640 ops/s
# Warmup Iteration  11: 951677.051 ops/s
# Warmup Iteration  12: 949075.884 ops/s
# Warmup Iteration  13: 950313.819 ops/s
# Warmup Iteration  14: 958167.946 ops/s
# Warmup Iteration  15: 954896.075 ops/s
# Warmup Iteration  16: 954494.310 ops/s
# Warmup Iteration  17: 1012479.845 ops/s
# Warmup Iteration  18: 1014305.709 ops/s
# Warmup Iteration  19: 1013515.295 ops/s
# Warmup Iteration  20: 1014739.686 ops/s
# Warmup Iteration  21: 1016227.652 ops/s
# Warmup Iteration  22: 1016402.889 ops/s
# Warmup Iteration  23: 1019318.875 ops/s
# Warmup Iteration  24: 1017900.147 ops/s
# Warmup Iteration  25: 1008680.823 ops/s
# Warmup Iteration  26: 1018048.975 ops/s
# Warmup Iteration  27: 1016059.975 ops/s
# Warmup Iteration  28: 1014796.472 ops/s
# Warmup Iteration  29: 1015624.356 ops/s
# Warmup Iteration  30: 1016925.593 ops/s
Iteration   1: 1019897.825 ops/s
Iteration   2: 1009802.408 ops/s
Iteration   3: 1015514.675 ops/s
Iteration   4: 1017102.145 ops/s
Iteration   5: 1015322.779 ops/s
Iteration   6: 1013556.596 ops/s
Iteration   7: 1018068.305 ops/s
Iteration   8: 1017611.782 ops/s
Iteration   9: 1015071.544 ops/s
Iteration  10: 1012290.768 ops/s
Iteration  11: 1010470.910 ops/s
Iteration  12: 1018717.963 ops/s
Iteration  13: 1016820.580 ops/s
Iteration  14: 1008391.571 ops/s
Iteration  15: 1013165.232 ops/s
Iteration  16: 1018023.067 ops/s
Iteration  17: 1012666.451 ops/s
Iteration  18: 1003495.966 ops/s
Iteration  19: 1016373.591 ops/s
Iteration  20: 1016341.194 ops/s
Iteration  21: 1010021.294 ops/s
Iteration  22: 1017688.834 ops/s
Iteration  23: 1018604.121 ops/s
Iteration  24: 1016017.028 ops/s
Iteration  25: 1011483.659 ops/s
Iteration  26: 1011185.623 ops/s
Iteration  27: 1014631.838 ops/s
Iteration  28: 1007814.794 ops/s
Iteration  29: 1011722.033 ops/s
Iteration  30: 1005518.970 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAll":
  1013779.785 ±(99.9%) 2767.084 ops/s [Average]
  (min, avg, max) = (1003495.966, 1013779.785, 1019897.825), stdev = 4141.641
  CI (99.9%): [1011012.701, 1016546.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_addAll  thrpt   30  1013779.785 ± 2767.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 732148.347 ops/s
# Warmup Iteration   2: 789545.619 ops/s
# Warmup Iteration   3: 988070.583 ops/s
# Warmup Iteration   4: 983167.689 ops/s
# Warmup Iteration   5: 983443.994 ops/s
# Warmup Iteration   6: 987538.081 ops/s
# Warmup Iteration   7: 982152.818 ops/s
# Warmup Iteration   8: 987124.716 ops/s
# Warmup Iteration   9: 983585.910 ops/s
# Warmup Iteration  10: 985133.257 ops/s
# Warmup Iteration  11: 962032.188 ops/s
# Warmup Iteration  12: 870059.688 ops/s
# Warmup Iteration  13: 987443.839 ops/s
# Warmup Iteration  14: 985029.124 ops/s
# Warmup Iteration  15: 984805.698 ops/s
# Warmup Iteration  16: 987541.581 ops/s
# Warmup Iteration  17: 1044536.505 ops/s
# Warmup Iteration  18: 1043453.700 ops/s
# Warmup Iteration  19: 1046038.862 ops/s
# Warmup Iteration  20: 1048803.134 ops/s
# Warmup Iteration  21: 1046063.093 ops/s
# Warmup Iteration  22: 1044884.948 ops/s
# Warmup Iteration  23: 1045654.110 ops/s
# Warmup Iteration  24: 1044022.270 ops/s
# Warmup Iteration  25: 1048970.853 ops/s
# Warmup Iteration  26: 1047295.657 ops/s
# Warmup Iteration  27: 1047564.478 ops/s
# Warmup Iteration  28: 1046783.523 ops/s
# Warmup Iteration  29: 1052233.299 ops/s
# Warmup Iteration  30: 1051039.606 ops/s
Iteration   1: 1053362.134 ops/s
Iteration   2: 1050732.829 ops/s
Iteration   3: 1046347.750 ops/s
Iteration   4: 1046590.197 ops/s
Iteration   5: 1048596.032 ops/s
Iteration   6: 1049385.722 ops/s
Iteration   7: 1047964.678 ops/s
Iteration   8: 1049986.907 ops/s
Iteration   9: 1041291.035 ops/s
Iteration  10: 1042023.591 ops/s
Iteration  11: 1048794.674 ops/s
Iteration  12: 1046835.746 ops/s
Iteration  13: 1048707.317 ops/s
Iteration  14: 1045107.078 ops/s
Iteration  15: 1047262.916 ops/s
Iteration  16: 1048411.348 ops/s
Iteration  17: 1045659.209 ops/s
Iteration  18: 1045761.808 ops/s
Iteration  19: 1043265.478 ops/s
Iteration  20: 1048970.889 ops/s
Iteration  21: 1044267.962 ops/s
Iteration  22: 1049942.985 ops/s
Iteration  23: 1050137.736 ops/s
Iteration  24: 1049049.001 ops/s
Iteration  25: 1047437.088 ops/s
Iteration  26: 1046883.937 ops/s
Iteration  27: 1042625.676 ops/s
Iteration  28: 1039245.128 ops/s
Iteration  29: 1043637.627 ops/s
Iteration  30: 1052944.948 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAllAtIndex":
  1047040.981 ±(99.9%) 2218.188 ops/s [Average]
  (min, avg, max) = (1039245.128, 1047040.981, 1053362.134), stdev = 3320.080
  CI (99.9%): [1044822.793, 1049259.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1047040.981 ± 2218.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 745407.923 ops/s
# Warmup Iteration   2: 778856.720 ops/s
# Warmup Iteration   3: 1006891.360 ops/s
# Warmup Iteration   4: 1001123.154 ops/s
# Warmup Iteration   5: 999291.127 ops/s
# Warmup Iteration   6: 1004562.553 ops/s
# Warmup Iteration   7: 1004104.761 ops/s
# Warmup Iteration   8: 1007265.602 ops/s
# Warmup Iteration   9: 1005384.760 ops/s
# Warmup Iteration  10: 1003319.113 ops/s
# Warmup Iteration  11: 967066.925 ops/s
# Warmup Iteration  12: 886955.562 ops/s
# Warmup Iteration  13: 1001313.349 ops/s
# Warmup Iteration  14: 1002578.938 ops/s
# Warmup Iteration  15: 996820.359 ops/s
# Warmup Iteration  16: 1003178.547 ops/s
# Warmup Iteration  17: 1062083.380 ops/s
# Warmup Iteration  18: 1062458.004 ops/s
# Warmup Iteration  19: 1066517.243 ops/s
# Warmup Iteration  20: 1058323.233 ops/s
# Warmup Iteration  21: 1064655.367 ops/s
# Warmup Iteration  22: 1062274.945 ops/s
# Warmup Iteration  23: 1054118.099 ops/s
# Warmup Iteration  24: 1057845.595 ops/s
# Warmup Iteration  25: 1060310.319 ops/s
# Warmup Iteration  26: 1059719.504 ops/s
# Warmup Iteration  27: 1062307.707 ops/s
# Warmup Iteration  28: 1055224.453 ops/s
# Warmup Iteration  29: 1060040.012 ops/s
# Warmup Iteration  30: 1060745.601 ops/s
Iteration   1: 1063855.984 ops/s
Iteration   2: 1051808.506 ops/s
Iteration   3: 1048605.583 ops/s
Iteration   4: 1057865.528 ops/s
Iteration   5: 1064255.869 ops/s
Iteration   6: 1065266.607 ops/s
Iteration   7: 1061710.840 ops/s
Iteration   8: 1065008.802 ops/s
Iteration   9: 1062177.856 ops/s
Iteration  10: 1065107.248 ops/s
Iteration  11: 1066175.733 ops/s
Iteration  12: 1059029.574 ops/s
Iteration  13: 1052278.095 ops/s
Iteration  14: 1061939.488 ops/s
Iteration  15: 1063637.793 ops/s
Iteration  16: 1054384.728 ops/s
Iteration  17: 1055153.540 ops/s
Iteration  18: 1062273.229 ops/s
Iteration  19: 1055126.162 ops/s
Iteration  20: 1059041.000 ops/s
Iteration  21: 1056544.800 ops/s
Iteration  22: 1063105.891 ops/s
Iteration  23: 1059875.034 ops/s
Iteration  24: 1053604.619 ops/s
Iteration  25: 1065254.022 ops/s
Iteration  26: 1066567.469 ops/s
Iteration  27: 1064227.087 ops/s
Iteration  28: 1064766.946 ops/s
Iteration  29: 1062730.309 ops/s
Iteration  30: 1052699.111 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_addAtIndex":
  1060135.915 ±(99.9%) 3410.442 ops/s [Average]
  (min, avg, max) = (1048605.583, 1060135.915, 1066567.469), stdev = 5104.590
  CI (99.9%): [1056725.473, 1063546.357] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_addAtIndex  thrpt   30  1060135.915 ± 3410.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 378443.785 ops/s
# Warmup Iteration   2: 784606.904 ops/s
# Warmup Iteration   3: 815365.688 ops/s
# Warmup Iteration   4: 824603.139 ops/s
# Warmup Iteration   5: 700218.685 ops/s
# Warmup Iteration   6: 823266.263 ops/s
# Warmup Iteration   7: 826747.147 ops/s
# Warmup Iteration   8: 823342.587 ops/s
# Warmup Iteration   9: 831185.321 ops/s
# Warmup Iteration  10: 823479.936 ops/s
# Warmup Iteration  11: 825304.570 ops/s
# Warmup Iteration  12: 827554.476 ops/s
# Warmup Iteration  13: 823388.974 ops/s
# Warmup Iteration  14: 829218.315 ops/s
# Warmup Iteration  15: 828439.886 ops/s
# Warmup Iteration  16: 827577.495 ops/s
# Warmup Iteration  17: 825356.116 ops/s
# Warmup Iteration  18: 821813.789 ops/s
# Warmup Iteration  19: 830563.229 ops/s
# Warmup Iteration  20: 822328.625 ops/s
# Warmup Iteration  21: 825851.942 ops/s
# Warmup Iteration  22: 826242.337 ops/s
# Warmup Iteration  23: 828381.138 ops/s
# Warmup Iteration  24: 824505.291 ops/s
# Warmup Iteration  25: 823171.463 ops/s
# Warmup Iteration  26: 825487.128 ops/s
# Warmup Iteration  27: 821053.429 ops/s
# Warmup Iteration  28: 830126.172 ops/s
# Warmup Iteration  29: 818767.127 ops/s
# Warmup Iteration  30: 828242.997 ops/s
Iteration   1: 827055.135 ops/s
Iteration   2: 826314.765 ops/s
Iteration   3: 822250.741 ops/s
Iteration   4: 825763.501 ops/s
Iteration   5: 828798.281 ops/s
Iteration   6: 823061.925 ops/s
Iteration   7: 825044.385 ops/s
Iteration   8: 825059.388 ops/s
Iteration   9: 829392.012 ops/s
Iteration  10: 829118.028 ops/s
Iteration  11: 833781.560 ops/s
Iteration  12: 830959.988 ops/s
Iteration  13: 831237.222 ops/s
Iteration  14: 828855.993 ops/s
Iteration  15: 821672.001 ops/s
Iteration  16: 829980.689 ops/s
Iteration  17: 828756.835 ops/s
Iteration  18: 826046.679 ops/s
Iteration  19: 829833.544 ops/s
Iteration  20: 821766.682 ops/s
Iteration  21: 825219.912 ops/s
Iteration  22: 829014.178 ops/s
Iteration  23: 827465.257 ops/s
Iteration  24: 826828.622 ops/s
Iteration  25: 828538.084 ops/s
Iteration  26: 830856.247 ops/s
Iteration  27: 826329.585 ops/s
Iteration  28: 828351.596 ops/s
Iteration  29: 826417.965 ops/s
Iteration  30: 828879.016 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByMutating":
  827421.660 ±(99.9%) 1947.356 ops/s [Average]
  (min, avg, max) = (821672.001, 827421.660, 833781.560), stdev = 2914.712
  CI (99.9%): [825474.304, 829369.017] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  827421.660 ± 1947.356  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 367561.298 ops/s
# Warmup Iteration   2: 786087.477 ops/s
# Warmup Iteration   3: 872061.255 ops/s
# Warmup Iteration   4: 879961.666 ops/s
# Warmup Iteration   5: 728272.874 ops/s
# Warmup Iteration   6: 877249.724 ops/s
# Warmup Iteration   7: 870643.975 ops/s
# Warmup Iteration   8: 878730.961 ops/s
# Warmup Iteration   9: 882042.108 ops/s
# Warmup Iteration  10: 872689.318 ops/s
# Warmup Iteration  11: 879224.334 ops/s
# Warmup Iteration  12: 878975.534 ops/s
# Warmup Iteration  13: 877442.228 ops/s
# Warmup Iteration  14: 878505.657 ops/s
# Warmup Iteration  15: 879967.572 ops/s
# Warmup Iteration  16: 878433.495 ops/s
# Warmup Iteration  17: 876684.932 ops/s
# Warmup Iteration  18: 878276.980 ops/s
# Warmup Iteration  19: 880080.612 ops/s
# Warmup Iteration  20: 872365.828 ops/s
# Warmup Iteration  21: 876833.820 ops/s
# Warmup Iteration  22: 878720.393 ops/s
# Warmup Iteration  23: 876377.583 ops/s
# Warmup Iteration  24: 873873.770 ops/s
# Warmup Iteration  25: 879218.487 ops/s
# Warmup Iteration  26: 880690.518 ops/s
# Warmup Iteration  27: 877915.879 ops/s
# Warmup Iteration  28: 877522.125 ops/s
# Warmup Iteration  29: 873899.905 ops/s
# Warmup Iteration  30: 873288.255 ops/s
Iteration   1: 875174.701 ops/s
Iteration   2: 874698.270 ops/s
Iteration   3: 872630.363 ops/s
Iteration   4: 876392.058 ops/s
Iteration   5: 876193.116 ops/s
Iteration   6: 878380.538 ops/s
Iteration   7: 870973.929 ops/s
Iteration   8: 878546.726 ops/s
Iteration   9: 874013.182 ops/s
Iteration  10: 881361.068 ops/s
Iteration  11: 875856.679 ops/s
Iteration  12: 882404.616 ops/s
Iteration  13: 880307.968 ops/s
Iteration  14: 872845.410 ops/s
Iteration  15: 876872.370 ops/s
Iteration  16: 876098.553 ops/s
Iteration  17: 876218.442 ops/s
Iteration  18: 878438.662 ops/s
Iteration  19: 877885.193 ops/s
Iteration  20: 879111.567 ops/s
Iteration  21: 877437.677 ops/s
Iteration  22: 877857.250 ops/s
Iteration  23: 879827.552 ops/s
Iteration  24: 878814.326 ops/s
Iteration  25: 879802.694 ops/s
Iteration  26: 875193.389 ops/s
Iteration  27: 881993.733 ops/s
Iteration  28: 876543.967 ops/s
Iteration  29: 879098.372 ops/s
Iteration  30: 877288.020 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByNonMutating":
  877275.346 ±(99.9%) 1821.089 ops/s [Average]
  (min, avg, max) = (870973.929, 877275.346, 882404.616), stdev = 2725.721
  CI (99.9%): [875454.257, 879096.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  877275.346 ± 1821.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7806814.093 ops/s
# Warmup Iteration   2: 16925362.679 ops/s
# Warmup Iteration   3: 17183116.470 ops/s
# Warmup Iteration   4: 14442321.518 ops/s
# Warmup Iteration   5: 17146725.648 ops/s
# Warmup Iteration   6: 17192779.151 ops/s
# Warmup Iteration   7: 17078889.175 ops/s
# Warmup Iteration   8: 17270563.425 ops/s
# Warmup Iteration   9: 17224548.554 ops/s
# Warmup Iteration  10: 17214329.431 ops/s
# Warmup Iteration  11: 17118547.702 ops/s
# Warmup Iteration  12: 17277338.199 ops/s
# Warmup Iteration  13: 17198922.418 ops/s
# Warmup Iteration  14: 17207677.180 ops/s
# Warmup Iteration  15: 17174967.410 ops/s
# Warmup Iteration  16: 17142340.127 ops/s
# Warmup Iteration  17: 17216346.069 ops/s
# Warmup Iteration  18: 17101003.581 ops/s
# Warmup Iteration  19: 17214127.203 ops/s
# Warmup Iteration  20: 17168557.835 ops/s
# Warmup Iteration  21: 17204676.102 ops/s
# Warmup Iteration  22: 17113511.172 ops/s
# Warmup Iteration  23: 17231106.225 ops/s
# Warmup Iteration  24: 17255176.401 ops/s
# Warmup Iteration  25: 17229642.162 ops/s
# Warmup Iteration  26: 17218781.570 ops/s
# Warmup Iteration  27: 17082860.547 ops/s
# Warmup Iteration  28: 17252312.428 ops/s
# Warmup Iteration  29: 17240299.474 ops/s
# Warmup Iteration  30: 17208490.477 ops/s
Iteration   1: 17121518.380 ops/s
Iteration   2: 17244765.845 ops/s
Iteration   3: 17191434.149 ops/s
Iteration   4: 17208329.836 ops/s
Iteration   5: 17197151.357 ops/s
Iteration   6: 17186833.906 ops/s
Iteration   7: 17290143.298 ops/s
Iteration   8: 17163279.370 ops/s
Iteration   9: 17318429.604 ops/s
Iteration  10: 17189432.581 ops/s
Iteration  11: 17289622.395 ops/s
Iteration  12: 17263282.155 ops/s
Iteration  13: 17262555.533 ops/s
Iteration  14: 17233787.940 ops/s
Iteration  15: 17017811.846 ops/s
Iteration  16: 17271230.261 ops/s
Iteration  17: 17077288.829 ops/s
Iteration  18: 17156590.346 ops/s
Iteration  19: 17279578.910 ops/s
Iteration  20: 17206285.723 ops/s
Iteration  21: 17262495.161 ops/s
Iteration  22: 17271377.601 ops/s
Iteration  23: 17121566.521 ops/s
Iteration  24: 17264872.650 ops/s
Iteration  25: 17231568.179 ops/s
Iteration  26: 17194296.677 ops/s
Iteration  27: 17201178.578 ops/s
Iteration  28: 17221127.183 ops/s
Iteration  29: 17182207.339 ops/s
Iteration  30: 17307785.013 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfy":
  17214260.906 ±(99.9%) 45995.022 ops/s [Average]
  (min, avg, max) = (17017811.846, 17214260.906, 17318429.604), stdev = 68843.189
  CI (99.9%): [17168265.883, 17260255.928] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfy  thrpt   30  17214260.906 ± 45995.022  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7801077.559 ops/s
# Warmup Iteration   2: 16966197.302 ops/s
# Warmup Iteration   3: 17109863.521 ops/s
# Warmup Iteration   4: 14456101.304 ops/s
# Warmup Iteration   5: 17083696.466 ops/s
# Warmup Iteration   6: 17105026.179 ops/s
# Warmup Iteration   7: 17146187.905 ops/s
# Warmup Iteration   8: 17106482.857 ops/s
# Warmup Iteration   9: 16809059.100 ops/s
# Warmup Iteration  10: 17021727.045 ops/s
# Warmup Iteration  11: 17148613.659 ops/s
# Warmup Iteration  12: 17146970.976 ops/s
# Warmup Iteration  13: 17183795.175 ops/s
# Warmup Iteration  14: 17166889.585 ops/s
# Warmup Iteration  15: 17138587.964 ops/s
# Warmup Iteration  16: 17090203.142 ops/s
# Warmup Iteration  17: 17127871.112 ops/s
# Warmup Iteration  18: 17096370.388 ops/s
# Warmup Iteration  19: 17138837.269 ops/s
# Warmup Iteration  20: 17115244.001 ops/s
# Warmup Iteration  21: 17174146.306 ops/s
# Warmup Iteration  22: 17155056.096 ops/s
# Warmup Iteration  23: 17084001.556 ops/s
# Warmup Iteration  24: 17083507.308 ops/s
# Warmup Iteration  25: 17168635.026 ops/s
# Warmup Iteration  26: 17098861.176 ops/s
# Warmup Iteration  27: 17147890.834 ops/s
# Warmup Iteration  28: 17115250.097 ops/s
# Warmup Iteration  29: 17085216.936 ops/s
# Warmup Iteration  30: 17125094.905 ops/s
Iteration   1: 17144021.456 ops/s
Iteration   2: 17149867.339 ops/s
Iteration   3: 17147404.845 ops/s
Iteration   4: 17095290.823 ops/s
Iteration   5: 17121351.769 ops/s
Iteration   6: 17186759.934 ops/s
Iteration   7: 17134570.427 ops/s
Iteration   8: 17176096.505 ops/s
Iteration   9: 17079047.946 ops/s
Iteration  10: 17186001.526 ops/s
Iteration  11: 17123658.357 ops/s
Iteration  12: 17109875.370 ops/s
Iteration  13: 17073109.307 ops/s
Iteration  14: 17101026.866 ops/s
Iteration  15: 17216528.060 ops/s
Iteration  16: 17157629.542 ops/s
Iteration  17: 17233008.191 ops/s
Iteration  18: 17219989.179 ops/s
Iteration  19: 16974161.612 ops/s
Iteration  20: 17095275.206 ops/s
Iteration  21: 17110893.364 ops/s
Iteration  22: 17137043.471 ops/s
Iteration  23: 17076629.851 ops/s
Iteration  24: 16921753.478 ops/s
Iteration  25: 17229211.409 ops/s
Iteration  26: 17174349.224 ops/s
Iteration  27: 17179553.687 ops/s
Iteration  28: 17130331.492 ops/s
Iteration  29: 17187899.406 ops/s
Iteration  30: 17127454.699 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfyWith":
  17133326.478 ±(99.9%) 45443.757 ops/s [Average]
  (min, avg, max) = (16921753.478, 17133326.478, 17233008.191), stdev = 68018.081
  CI (99.9%): [17087882.721, 17178770.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  17133326.478 ± 45443.757  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7293466.448 ops/s
# Warmup Iteration   2: 15176594.947 ops/s
# Warmup Iteration   3: 15485300.091 ops/s
# Warmup Iteration   4: 14523066.543 ops/s
# Warmup Iteration   5: 13996202.817 ops/s
# Warmup Iteration   6: 15447963.571 ops/s
# Warmup Iteration   7: 15433976.283 ops/s
# Warmup Iteration   8: 15458947.606 ops/s
# Warmup Iteration   9: 15461625.495 ops/s
# Warmup Iteration  10: 15464186.772 ops/s
# Warmup Iteration  11: 15434718.364 ops/s
# Warmup Iteration  12: 15465850.498 ops/s
# Warmup Iteration  13: 15464638.946 ops/s
# Warmup Iteration  14: 15474259.192 ops/s
# Warmup Iteration  15: 15495585.739 ops/s
# Warmup Iteration  16: 15473840.614 ops/s
# Warmup Iteration  17: 15445372.713 ops/s
# Warmup Iteration  18: 15453312.963 ops/s
# Warmup Iteration  19: 15362570.800 ops/s
# Warmup Iteration  20: 15441829.734 ops/s
# Warmup Iteration  21: 15457628.813 ops/s
# Warmup Iteration  22: 15472269.806 ops/s
# Warmup Iteration  23: 15367345.187 ops/s
# Warmup Iteration  24: 15495871.919 ops/s
# Warmup Iteration  25: 15426479.572 ops/s
# Warmup Iteration  26: 15440253.197 ops/s
# Warmup Iteration  27: 15468243.897 ops/s
# Warmup Iteration  28: 15511692.964 ops/s
# Warmup Iteration  29: 15469037.650 ops/s
# Warmup Iteration  30: 15425748.925 ops/s
Iteration   1: 15530995.515 ops/s
Iteration   2: 15511144.446 ops/s
Iteration   3: 15287864.999 ops/s
Iteration   4: 15469345.409 ops/s
Iteration   5: 15523628.340 ops/s
Iteration   6: 15510079.466 ops/s
Iteration   7: 15482980.518 ops/s
Iteration   8: 15403046.002 ops/s
Iteration   9: 15391865.989 ops/s
Iteration  10: 15465576.021 ops/s
Iteration  11: 15482719.017 ops/s
Iteration  12: 15344256.283 ops/s
Iteration  13: 15408214.616 ops/s
Iteration  14: 15498407.153 ops/s
Iteration  15: 15479340.989 ops/s
Iteration  16: 15476822.184 ops/s
Iteration  17: 15510868.812 ops/s
Iteration  18: 15520410.832 ops/s
Iteration  19: 15503684.530 ops/s
Iteration  20: 15257366.042 ops/s
Iteration  21: 15443770.219 ops/s
Iteration  22: 15417652.899 ops/s
Iteration  23: 15428372.295 ops/s
Iteration  24: 15405257.315 ops/s
Iteration  25: 15422901.272 ops/s
Iteration  26: 15468495.825 ops/s
Iteration  27: 15489354.142 ops/s
Iteration  28: 15465933.510 ops/s
Iteration  29: 15423186.070 ops/s
Iteration  30: 15381356.502 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfy":
  15446829.907 ±(99.9%) 44911.675 ops/s [Average]
  (min, avg, max) = (15257366.042, 15446829.907, 15530995.515), stdev = 67221.686
  CI (99.9%): [15401918.232, 15491741.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfy  thrpt   30  15446829.907 ± 44911.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6763461.159 ops/s
# Warmup Iteration   2: 9257176.762 ops/s
# Warmup Iteration   3: 10803777.179 ops/s
# Warmup Iteration   4: 10719897.534 ops/s
# Warmup Iteration   5: 10779721.675 ops/s
# Warmup Iteration   6: 10702956.284 ops/s
# Warmup Iteration   7: 9577730.653 ops/s
# Warmup Iteration   8: 10256824.875 ops/s
# Warmup Iteration   9: 10756223.342 ops/s
# Warmup Iteration  10: 10738911.253 ops/s
# Warmup Iteration  11: 10738849.840 ops/s
# Warmup Iteration  12: 10803121.969 ops/s
# Warmup Iteration  13: 10804791.553 ops/s
# Warmup Iteration  14: 10777876.791 ops/s
# Warmup Iteration  15: 10767009.670 ops/s
# Warmup Iteration  16: 10793604.092 ops/s
# Warmup Iteration  17: 10727674.435 ops/s
# Warmup Iteration  18: 10702773.342 ops/s
# Warmup Iteration  19: 10728845.119 ops/s
# Warmup Iteration  20: 10722761.901 ops/s
# Warmup Iteration  21: 10694393.943 ops/s
# Warmup Iteration  22: 10701119.616 ops/s
# Warmup Iteration  23: 10661908.558 ops/s
# Warmup Iteration  24: 10682554.990 ops/s
# Warmup Iteration  25: 10771664.493 ops/s
# Warmup Iteration  26: 10736240.698 ops/s
# Warmup Iteration  27: 10728870.906 ops/s
# Warmup Iteration  28: 10745038.962 ops/s
# Warmup Iteration  29: 10738030.126 ops/s
# Warmup Iteration  30: 10702607.438 ops/s
Iteration   1: 10780990.987 ops/s
Iteration   2: 10724300.730 ops/s
Iteration   3: 10710375.326 ops/s
Iteration   4: 10644774.804 ops/s
Iteration   5: 10602946.653 ops/s
Iteration   6: 10773864.723 ops/s
Iteration   7: 10654114.277 ops/s
Iteration   8: 10726095.831 ops/s
Iteration   9: 10618525.625 ops/s
Iteration  10: 10782805.706 ops/s
Iteration  11: 10778572.445 ops/s
Iteration  12: 10727056.304 ops/s
Iteration  13: 10740365.165 ops/s
Iteration  14: 10768865.414 ops/s
Iteration  15: 10711826.210 ops/s
Iteration  16: 10693208.138 ops/s
Iteration  17: 10734431.491 ops/s
Iteration  18: 10697817.115 ops/s
Iteration  19: 10778061.743 ops/s
Iteration  20: 10701155.573 ops/s
Iteration  21: 10770028.084 ops/s
Iteration  22: 10741031.155 ops/s
Iteration  23: 10766111.644 ops/s
Iteration  24: 10775209.716 ops/s
Iteration  25: 10791726.583 ops/s
Iteration  26: 10735471.564 ops/s
Iteration  27: 10776269.145 ops/s
Iteration  28: 10748284.325 ops/s
Iteration  29: 10677165.234 ops/s
Iteration  30: 10707141.676 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfyWith":
  10727953.113 ±(99.9%) 33699.059 ops/s [Average]
  (min, avg, max) = (10602946.653, 10727953.113, 10791726.583), stdev = 50439.169
  CI (99.9%): [10694254.054, 10761652.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  10727953.113 ± 33699.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 222290.746 ops/s
# Warmup Iteration   2: 595850.352 ops/s
# Warmup Iteration   3: 591771.568 ops/s
# Warmup Iteration   4: 494405.528 ops/s
# Warmup Iteration   5: 594009.798 ops/s
# Warmup Iteration   6: 595294.823 ops/s
# Warmup Iteration   7: 594357.766 ops/s
# Warmup Iteration   8: 594564.539 ops/s
# Warmup Iteration   9: 593380.076 ops/s
# Warmup Iteration  10: 594433.710 ops/s
# Warmup Iteration  11: 594894.766 ops/s
# Warmup Iteration  12: 592746.346 ops/s
# Warmup Iteration  13: 591361.186 ops/s
# Warmup Iteration  14: 593840.114 ops/s
# Warmup Iteration  15: 595486.223 ops/s
# Warmup Iteration  16: 595450.479 ops/s
# Warmup Iteration  17: 595447.973 ops/s
# Warmup Iteration  18: 593676.459 ops/s
# Warmup Iteration  19: 594067.248 ops/s
# Warmup Iteration  20: 592739.580 ops/s
# Warmup Iteration  21: 592834.913 ops/s
# Warmup Iteration  22: 595253.625 ops/s
# Warmup Iteration  23: 594373.568 ops/s
# Warmup Iteration  24: 595470.878 ops/s
# Warmup Iteration  25: 594487.107 ops/s
# Warmup Iteration  26: 591033.726 ops/s
# Warmup Iteration  27: 595478.286 ops/s
# Warmup Iteration  28: 593653.758 ops/s
# Warmup Iteration  29: 592923.758 ops/s
# Warmup Iteration  30: 595306.635 ops/s
Iteration   1: 595250.884 ops/s
Iteration   2: 592004.841 ops/s
Iteration   3: 595134.140 ops/s
Iteration   4: 593167.951 ops/s
Iteration   5: 595317.508 ops/s
Iteration   6: 592199.481 ops/s
Iteration   7: 595228.059 ops/s
Iteration   8: 593981.417 ops/s
Iteration   9: 592900.185 ops/s
Iteration  10: 595633.932 ops/s
Iteration  11: 591845.927 ops/s
Iteration  12: 594745.270 ops/s
Iteration  13: 594857.494 ops/s
Iteration  14: 596194.210 ops/s
Iteration  15: 596235.326 ops/s
Iteration  16: 591854.843 ops/s
Iteration  17: 588068.814 ops/s
Iteration  18: 597313.833 ops/s
Iteration  19: 594038.823 ops/s
Iteration  20: 591512.097 ops/s
Iteration  21: 596721.626 ops/s
Iteration  22: 596680.442 ops/s
Iteration  23: 595460.586 ops/s
Iteration  24: 594092.069 ops/s
Iteration  25: 595210.136 ops/s
Iteration  26: 594901.147 ops/s
Iteration  27: 596485.289 ops/s
Iteration  28: 593245.896 ops/s
Iteration  29: 597535.049 ops/s
Iteration  30: 593923.022 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_appendString":
  594391.343 ±(99.9%) 1382.917 ops/s [Average]
  (min, avg, max) = (588068.814, 594391.343, 597535.049), stdev = 2069.886
  CI (99.9%): [593008.426, 595774.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_appendString  thrpt   30  594391.343 ± 1382.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2142018.489 ops/s
# Warmup Iteration   2: 5341070.704 ops/s
# Warmup Iteration   3: 5403654.161 ops/s
# Warmup Iteration   4: 4517907.138 ops/s
# Warmup Iteration   5: 5406187.432 ops/s
# Warmup Iteration   6: 5423441.799 ops/s
# Warmup Iteration   7: 5349418.379 ops/s
# Warmup Iteration   8: 5414995.889 ops/s
# Warmup Iteration   9: 5414030.393 ops/s
# Warmup Iteration  10: 5382485.582 ops/s
# Warmup Iteration  11: 5387729.010 ops/s
# Warmup Iteration  12: 5418541.127 ops/s
# Warmup Iteration  13: 5383920.036 ops/s
# Warmup Iteration  14: 5390698.773 ops/s
# Warmup Iteration  15: 5422788.458 ops/s
# Warmup Iteration  16: 5416539.774 ops/s
# Warmup Iteration  17: 5411464.026 ops/s
# Warmup Iteration  18: 5408922.098 ops/s
# Warmup Iteration  19: 5408140.698 ops/s
# Warmup Iteration  20: 5384697.483 ops/s
# Warmup Iteration  21: 5414831.979 ops/s
# Warmup Iteration  22: 5427901.346 ops/s
# Warmup Iteration  23: 5394174.101 ops/s
# Warmup Iteration  24: 5395159.759 ops/s
# Warmup Iteration  25: 5405418.380 ops/s
# Warmup Iteration  26: 5381423.069 ops/s
# Warmup Iteration  27: 5418265.657 ops/s
# Warmup Iteration  28: 5405793.463 ops/s
# Warmup Iteration  29: 5416766.425 ops/s
# Warmup Iteration  30: 5385871.917 ops/s
Iteration   1: 5416960.112 ops/s
Iteration   2: 5372341.146 ops/s
Iteration   3: 5420095.409 ops/s
Iteration   4: 5405404.293 ops/s
Iteration   5: 5415068.628 ops/s
Iteration   6: 5421291.943 ops/s
Iteration   7: 5388299.970 ops/s
Iteration   8: 5425029.729 ops/s
Iteration   9: 5430524.211 ops/s
Iteration  10: 5379702.971 ops/s
Iteration  11: 5427065.476 ops/s
Iteration  12: 5413867.570 ops/s
Iteration  13: 5424436.132 ops/s
Iteration  14: 5429605.251 ops/s
Iteration  15: 5365095.966 ops/s
Iteration  16: 5395445.156 ops/s
Iteration  17: 5397376.572 ops/s
Iteration  18: 5422143.209 ops/s
Iteration  19: 5394756.486 ops/s
Iteration  20: 5388730.830 ops/s
Iteration  21: 5389614.797 ops/s
Iteration  22: 5394514.406 ops/s
Iteration  23: 5399186.548 ops/s
Iteration  24: 5401620.413 ops/s
Iteration  25: 5437423.072 ops/s
Iteration  26: 5431165.447 ops/s
Iteration  27: 5414085.829 ops/s
Iteration  28: 5424055.271 ops/s
Iteration  29: 5418448.163 ops/s
Iteration  30: 5430108.610 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_asReversed":
  5409115.454 ±(99.9%) 12777.259 ops/s [Average]
  (min, avg, max) = (5365095.966, 5409115.454, 5437423.072), stdev = 19124.401
  CI (99.9%): [5396338.195, 5421892.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_asReversed  thrpt   30  5409115.454 ± 12777.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_castToCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_castToCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651467.886 ops/s
# Warmup Iteration   2: 791841.228 ops/s
# Warmup Iteration   3: 1003658.595 ops/s
# Warmup Iteration   4: 995325.252 ops/s
# Warmup Iteration   5: 1002106.464 ops/s
# Warmup Iteration   6: 1005890.562 ops/s
# Warmup Iteration   7: 998678.288 ops/s
# Warmup Iteration   8: 1004312.633 ops/s
# Warmup Iteration   9: 836467.982 ops/s
# Warmup Iteration  10: 1001396.957 ops/s
# Warmup Iteration  11: 996683.006 ops/s
# Warmup Iteration  12: 999033.568 ops/s
# Warmup Iteration  13: 994502.494 ops/s
# Warmup Iteration  14: 996639.710 ops/s
# Warmup Iteration  15: 1001952.913 ops/s
# Warmup Iteration  16: 1000251.645 ops/s
# Warmup Iteration  17: 1060003.224 ops/s
# Warmup Iteration  18: 1054241.506 ops/s
# Warmup Iteration  19: 1060325.866 ops/s
# Warmup Iteration  20: 1048695.648 ops/s
# Warmup Iteration  21: 1054798.998 ops/s
# Warmup Iteration  22: 1053528.356 ops/s
# Warmup Iteration  23: 1053612.460 ops/s
# Warmup Iteration  24: 1051846.574 ops/s
# Warmup Iteration  25: 1054612.175 ops/s
# Warmup Iteration  26: 1058602.341 ops/s
# Warmup Iteration  27: 1047896.621 ops/s
# Warmup Iteration  28: 1055055.418 ops/s
# Warmup Iteration  29: 1060131.681 ops/s
# Warmup Iteration  30: 1062642.568 ops/s
Iteration   1: 1052738.990 ops/s
Iteration   2: 1053289.280 ops/s
Iteration   3: 1055552.911 ops/s
Iteration   4: 1058807.977 ops/s
Iteration   5: 1054713.350 ops/s
Iteration   6: 1056443.125 ops/s
Iteration   7: 1057670.432 ops/s
Iteration   8: 1052405.109 ops/s
Iteration   9: 1056276.072 ops/s
Iteration  10: 1060267.921 ops/s
Iteration  11: 1056173.792 ops/s
Iteration  12: 1049543.729 ops/s
Iteration  13: 1058716.043 ops/s
Iteration  14: 1055864.748 ops/s
Iteration  15: 1061936.748 ops/s
Iteration  16: 1060445.096 ops/s
Iteration  17: 1058773.950 ops/s
Iteration  18: 1054578.900 ops/s
Iteration  19: 1052511.203 ops/s
Iteration  20: 1052830.126 ops/s
Iteration  21: 1048732.447 ops/s
Iteration  22: 1059559.756 ops/s
Iteration  23: 1064929.528 ops/s
Iteration  24: 1060879.022 ops/s
Iteration  25: 1058354.739 ops/s
Iteration  26: 1047715.510 ops/s
Iteration  27: 1052296.778 ops/s
Iteration  28: 1060585.042 ops/s
Iteration  29: 1054671.532 ops/s
Iteration  30: 1060549.060 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_castToCollection":
  1056260.431 ±(99.9%) 2764.013 ops/s [Average]
  (min, avg, max) = (1047715.510, 1056260.431, 1064929.528), stdev = 4137.045
  CI (99.9%): [1053496.418, 1059024.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_castToCollection  thrpt   30  1056260.431 ± 2764.013  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3379722.800 ops/s
# Warmup Iteration   2: 7439923.817 ops/s
# Warmup Iteration   3: 7660429.777 ops/s
# Warmup Iteration   4: 6721320.607 ops/s
# Warmup Iteration   5: 7281584.218 ops/s
# Warmup Iteration   6: 7655710.430 ops/s
# Warmup Iteration   7: 7625456.075 ops/s
# Warmup Iteration   8: 7596381.812 ops/s
# Warmup Iteration   9: 7630426.551 ops/s
# Warmup Iteration  10: 7626521.620 ops/s
# Warmup Iteration  11: 7650634.795 ops/s
# Warmup Iteration  12: 7602425.917 ops/s
# Warmup Iteration  13: 7641685.019 ops/s
# Warmup Iteration  14: 7660157.764 ops/s
# Warmup Iteration  15: 7651737.983 ops/s
# Warmup Iteration  16: 7634473.791 ops/s
# Warmup Iteration  17: 7646182.452 ops/s
# Warmup Iteration  18: 7660100.564 ops/s
# Warmup Iteration  19: 7652920.010 ops/s
# Warmup Iteration  20: 7648022.687 ops/s
# Warmup Iteration  21: 7642318.104 ops/s
# Warmup Iteration  22: 7618009.096 ops/s
# Warmup Iteration  23: 7654339.734 ops/s
# Warmup Iteration  24: 7629980.896 ops/s
# Warmup Iteration  25: 7574607.885 ops/s
# Warmup Iteration  26: 7572929.469 ops/s
# Warmup Iteration  27: 7643656.257 ops/s
# Warmup Iteration  28: 7621695.693 ops/s
# Warmup Iteration  29: 7655280.759 ops/s
# Warmup Iteration  30: 7651910.026 ops/s
Iteration   1: 7684246.205 ops/s
Iteration   2: 7659669.070 ops/s
Iteration   3: 7631097.092 ops/s
Iteration   4: 7633584.705 ops/s
Iteration   5: 7634428.008 ops/s
Iteration   6: 7676658.681 ops/s
Iteration   7: 7657180.200 ops/s
Iteration   8: 7658055.583 ops/s
Iteration   9: 7657840.836 ops/s
Iteration  10: 7612973.825 ops/s
Iteration  11: 7634426.474 ops/s
Iteration  12: 7613782.059 ops/s
Iteration  13: 7607852.091 ops/s
Iteration  14: 7604699.680 ops/s
Iteration  15: 7627892.849 ops/s
Iteration  16: 7646315.942 ops/s
Iteration  17: 7675836.704 ops/s
Iteration  18: 7642182.800 ops/s
Iteration  19: 7634780.148 ops/s
Iteration  20: 7577384.334 ops/s
Iteration  21: 7680629.936 ops/s
Iteration  22: 7669470.073 ops/s
Iteration  23: 7625507.493 ops/s
Iteration  24: 7606996.908 ops/s
Iteration  25: 7603228.425 ops/s
Iteration  26: 7662116.316 ops/s
Iteration  27: 7652920.525 ops/s
Iteration  28: 7639460.176 ops/s
Iteration  29: 7654466.032 ops/s
Iteration  30: 7600691.924 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_large_size":
  7638879.170 ±(99.9%) 18181.006 ops/s [Average]
  (min, avg, max) = (7577384.334, 7638879.170, 7684246.205), stdev = 27212.476
  CI (99.9%): [7620698.164, 7657060.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_chunk_large_size  thrpt   30  7638879.170 ± 18181.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756827.560 ops/s
# Warmup Iteration   2: 818154.965 ops/s
# Warmup Iteration   3: 1020145.560 ops/s
# Warmup Iteration   4: 1020648.421 ops/s
# Warmup Iteration   5: 1019774.131 ops/s
# Warmup Iteration   6: 1023173.159 ops/s
# Warmup Iteration   7: 1024360.753 ops/s
# Warmup Iteration   8: 1023609.778 ops/s
# Warmup Iteration   9: 1024917.582 ops/s
# Warmup Iteration  10: 1027996.487 ops/s
# Warmup Iteration  11: 944908.105 ops/s
# Warmup Iteration  12: 974218.761 ops/s
# Warmup Iteration  13: 1030822.406 ops/s
# Warmup Iteration  14: 1031670.562 ops/s
# Warmup Iteration  15: 1032501.151 ops/s
# Warmup Iteration  16: 1031408.081 ops/s
# Warmup Iteration  17: 1094174.950 ops/s
# Warmup Iteration  18: 1096966.998 ops/s
# Warmup Iteration  19: 1099572.877 ops/s
# Warmup Iteration  20: 1095495.193 ops/s
# Warmup Iteration  21: 1096991.830 ops/s
# Warmup Iteration  22: 1088777.346 ops/s
# Warmup Iteration  23: 1095355.060 ops/s
# Warmup Iteration  24: 1082896.241 ops/s
# Warmup Iteration  25: 1092627.316 ops/s
# Warmup Iteration  26: 1094116.671 ops/s
# Warmup Iteration  27: 1103322.603 ops/s
# Warmup Iteration  28: 1103712.291 ops/s
# Warmup Iteration  29: 1101884.052 ops/s
# Warmup Iteration  30: 1095149.521 ops/s
Iteration   1: 1094751.720 ops/s
Iteration   2: 1096440.462 ops/s
Iteration   3: 1102405.082 ops/s
Iteration   4: 1101428.473 ops/s
Iteration   5: 1102648.108 ops/s
Iteration   6: 1048378.904 ops/s
Iteration   7: 1099405.902 ops/s
Iteration   8: 1093896.139 ops/s
Iteration   9: 1102055.917 ops/s
Iteration  10: 1098754.796 ops/s
Iteration  11: 1101107.663 ops/s
Iteration  12: 1099402.073 ops/s
Iteration  13: 1102392.007 ops/s
Iteration  14: 1106938.746 ops/s
Iteration  15: 1099523.485 ops/s
Iteration  16: 1093741.594 ops/s
Iteration  17: 1097329.130 ops/s
Iteration  18: 1099271.193 ops/s
Iteration  19: 1099650.110 ops/s
Iteration  20: 1095823.905 ops/s
Iteration  21: 1097707.498 ops/s
Iteration  22: 1086639.540 ops/s
Iteration  23: 1101191.213 ops/s
Iteration  24: 1091857.402 ops/s
Iteration  25: 1097877.295 ops/s
Iteration  26: 1093904.410 ops/s
Iteration  27: 1098701.510 ops/s
Iteration  28: 1102436.421 ops/s
Iteration  29: 1092855.954 ops/s
Iteration  30: 1093610.000 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_chunk_zero_throws":
  1096404.222 ±(99.9%) 6667.285 ops/s [Average]
  (min, avg, max) = (1048378.904, 1096404.222, 1106938.746), stdev = 9979.280
  CI (99.9%): [1089736.936, 1103071.507] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1096404.222 ± 6667.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728670.879 ops/s
# Warmup Iteration   2: 765956.673 ops/s
# Warmup Iteration   3: 974975.347 ops/s
# Warmup Iteration   4: 965897.627 ops/s
# Warmup Iteration   5: 960620.819 ops/s
# Warmup Iteration   6: 966897.332 ops/s
# Warmup Iteration   7: 967237.384 ops/s
# Warmup Iteration   8: 962621.309 ops/s
# Warmup Iteration   9: 973853.118 ops/s
# Warmup Iteration  10: 961121.409 ops/s
# Warmup Iteration  11: 970444.148 ops/s
# Warmup Iteration  12: 829883.152 ops/s
# Warmup Iteration  13: 964948.667 ops/s
# Warmup Iteration  14: 961368.062 ops/s
# Warmup Iteration  15: 961465.271 ops/s
# Warmup Iteration  16: 965311.759 ops/s
# Warmup Iteration  17: 1013761.002 ops/s
# Warmup Iteration  18: 1015349.442 ops/s
# Warmup Iteration  19: 1019376.558 ops/s
# Warmup Iteration  20: 1018694.332 ops/s
# Warmup Iteration  21: 1013854.536 ops/s
# Warmup Iteration  22: 1017483.688 ops/s
# Warmup Iteration  23: 1016601.921 ops/s
# Warmup Iteration  24: 1023154.059 ops/s
# Warmup Iteration  25: 1022790.453 ops/s
# Warmup Iteration  26: 1026496.390 ops/s
# Warmup Iteration  27: 1015098.631 ops/s
# Warmup Iteration  28: 1021479.879 ops/s
# Warmup Iteration  29: 1025460.575 ops/s
# Warmup Iteration  30: 1025623.321 ops/s
Iteration   1: 1028998.655 ops/s
Iteration   2: 1020236.165 ops/s
Iteration   3: 1029485.170 ops/s
Iteration   4: 1021037.373 ops/s
Iteration   5: 1021084.476 ops/s
Iteration   6: 1018117.270 ops/s
Iteration   7: 1022335.951 ops/s
Iteration   8: 1016582.653 ops/s
Iteration   9: 1020365.719 ops/s
Iteration  10: 1015328.753 ops/s
Iteration  11: 1006501.161 ops/s
Iteration  12: 1025605.863 ops/s
Iteration  13: 1020712.077 ops/s
Iteration  14: 1025165.673 ops/s
Iteration  15: 1013223.446 ops/s
Iteration  16: 1017230.759 ops/s
Iteration  17: 1022908.886 ops/s
Iteration  18: 1016467.967 ops/s
Iteration  19: 1012831.746 ops/s
Iteration  20: 1010605.753 ops/s
Iteration  21: 1017336.479 ops/s
Iteration  22: 1023114.013 ops/s
Iteration  23: 1014354.972 ops/s
Iteration  24: 1020956.761 ops/s
Iteration  25: 1025355.906 ops/s
Iteration  26: 1023074.821 ops/s
Iteration  27: 1026148.559 ops/s
Iteration  28: 1024476.049 ops/s
Iteration  29: 1027182.809 ops/s
Iteration  30: 1025090.602 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_clear":
  1020397.216 ±(99.9%) 3699.588 ops/s [Average]
  (min, avg, max) = (1006501.161, 1020397.216, 1029485.170), stdev = 5537.370
  CI (99.9%): [1016697.628, 1024096.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_clear  thrpt   30  1020397.216 ± 3699.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5479956.080 ops/s
# Warmup Iteration   2: 8920833.479 ops/s
# Warmup Iteration   3: 10157522.778 ops/s
# Warmup Iteration   4: 10213575.995 ops/s
# Warmup Iteration   5: 10202489.314 ops/s
# Warmup Iteration   6: 8644903.925 ops/s
# Warmup Iteration   7: 10031824.604 ops/s
# Warmup Iteration   8: 10218303.733 ops/s
# Warmup Iteration   9: 10180071.903 ops/s
# Warmup Iteration  10: 10188682.535 ops/s
# Warmup Iteration  11: 10201027.223 ops/s
# Warmup Iteration  12: 10207318.754 ops/s
# Warmup Iteration  13: 10212146.846 ops/s
# Warmup Iteration  14: 10222641.380 ops/s
# Warmup Iteration  15: 10177056.036 ops/s
# Warmup Iteration  16: 10197955.294 ops/s
# Warmup Iteration  17: 10186747.637 ops/s
# Warmup Iteration  18: 10141447.345 ops/s
# Warmup Iteration  19: 10140312.919 ops/s
# Warmup Iteration  20: 10189365.075 ops/s
# Warmup Iteration  21: 10176417.778 ops/s
# Warmup Iteration  22: 10227304.475 ops/s
# Warmup Iteration  23: 10213394.025 ops/s
# Warmup Iteration  24: 10198778.456 ops/s
# Warmup Iteration  25: 10167350.642 ops/s
# Warmup Iteration  26: 10209350.527 ops/s
# Warmup Iteration  27: 10183621.253 ops/s
# Warmup Iteration  28: 10218046.714 ops/s
# Warmup Iteration  29: 10192590.311 ops/s
# Warmup Iteration  30: 10222392.779 ops/s
Iteration   1: 10047742.434 ops/s
Iteration   2: 10190592.993 ops/s
Iteration   3: 10178484.109 ops/s
Iteration   4: 10193120.707 ops/s
Iteration   5: 10170444.704 ops/s
Iteration   6: 10241706.036 ops/s
Iteration   7: 10225191.606 ops/s
Iteration   8: 10259855.876 ops/s
Iteration   9: 10234209.104 ops/s
Iteration  10: 10222552.791 ops/s
Iteration  11: 10134042.476 ops/s
Iteration  12: 10208132.336 ops/s
Iteration  13: 10133487.214 ops/s
Iteration  14: 10201276.224 ops/s
Iteration  15: 10197194.387 ops/s
Iteration  16: 10264504.519 ops/s
Iteration  17: 10232850.345 ops/s
Iteration  18: 10065148.759 ops/s
Iteration  19: 10206877.265 ops/s
Iteration  20: 10245563.690 ops/s
Iteration  21: 10186067.524 ops/s
Iteration  22: 10238000.136 ops/s
Iteration  23: 10222118.049 ops/s
Iteration  24: 10168910.500 ops/s
Iteration  25: 10201188.225 ops/s
Iteration  26: 10224338.618 ops/s
Iteration  27: 10160558.360 ops/s
Iteration  28: 10219153.107 ops/s
Iteration  29: 10203333.837 ops/s
Iteration  30: 10227315.351 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect":
  10196798.709 ±(99.9%) 33462.816 ops/s [Average]
  (min, avg, max) = (10047742.434, 10196798.709, 10264504.519), stdev = 50085.572
  CI (99.9%): [10163335.893, 10230261.526] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collect  thrpt   30  10196798.709 ± 33462.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6092797.997 ops/s
# Warmup Iteration   2: 5961692.422 ops/s
# Warmup Iteration   3: 6032147.348 ops/s
# Warmup Iteration   4: 5391067.067 ops/s
# Warmup Iteration   5: 5510740.013 ops/s
# Warmup Iteration   6: 6059840.945 ops/s
# Warmup Iteration   7: 6003842.824 ops/s
# Warmup Iteration   8: 6047126.152 ops/s
# Warmup Iteration   9: 6043997.832 ops/s
# Warmup Iteration  10: 6066972.487 ops/s
# Warmup Iteration  11: 6056373.788 ops/s
# Warmup Iteration  12: 6009217.454 ops/s
# Warmup Iteration  13: 6027874.844 ops/s
# Warmup Iteration  14: 6055375.634 ops/s
# Warmup Iteration  15: 6057247.521 ops/s
# Warmup Iteration  16: 6002265.004 ops/s
# Warmup Iteration  17: 6040315.112 ops/s
# Warmup Iteration  18: 6058041.542 ops/s
# Warmup Iteration  19: 6058358.400 ops/s
# Warmup Iteration  20: 6051406.501 ops/s
# Warmup Iteration  21: 6028878.694 ops/s
# Warmup Iteration  22: 6049530.086 ops/s
# Warmup Iteration  23: 6068785.173 ops/s
# Warmup Iteration  24: 6053987.583 ops/s
# Warmup Iteration  25: 6060112.933 ops/s
# Warmup Iteration  26: 6040796.792 ops/s
# Warmup Iteration  27: 6056512.113 ops/s
# Warmup Iteration  28: 6049712.013 ops/s
# Warmup Iteration  29: 6045429.142 ops/s
# Warmup Iteration  30: 6038519.378 ops/s
Iteration   1: 6029904.455 ops/s
Iteration   2: 6041652.695 ops/s
Iteration   3: 6046652.587 ops/s
Iteration   4: 6080136.962 ops/s
Iteration   5: 6049422.665 ops/s
Iteration   6: 6009478.268 ops/s
Iteration   7: 6032148.542 ops/s
Iteration   8: 6038450.383 ops/s
Iteration   9: 5987127.253 ops/s
Iteration  10: 6039949.493 ops/s
Iteration  11: 6047431.757 ops/s
Iteration  12: 6058336.565 ops/s
Iteration  13: 6004194.458 ops/s
Iteration  14: 6055119.410 ops/s
Iteration  15: 6012869.612 ops/s
Iteration  16: 5935137.746 ops/s
Iteration  17: 6057829.673 ops/s
Iteration  18: 6063358.603 ops/s
Iteration  19: 6066730.497 ops/s
Iteration  20: 6035804.218 ops/s
Iteration  21: 6065502.052 ops/s
Iteration  22: 6006285.061 ops/s
Iteration  23: 6059129.342 ops/s
Iteration  24: 6034414.848 ops/s
Iteration  25: 6047197.528 ops/s
Iteration  26: 6032587.285 ops/s
Iteration  27: 6061049.374 ops/s
Iteration  28: 6053549.087 ops/s
Iteration  29: 6000141.781 ops/s
Iteration  30: 6046420.949 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectBoolean":
  6036600.438 ±(99.9%) 19644.107 ops/s [Average]
  (min, avg, max) = (5935137.746, 6036600.438, 6080136.962), stdev = 29402.377
  CI (99.9%): [6016956.331, 6056244.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectBoolean  thrpt   30  6036600.438 ± 19644.107  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2358864.521 ops/s
# Warmup Iteration   2: 4256202.089 ops/s
# Warmup Iteration   3: 4963242.279 ops/s
# Warmup Iteration   4: 4999742.532 ops/s
# Warmup Iteration   5: 5007903.442 ops/s
# Warmup Iteration   6: 4098414.962 ops/s
# Warmup Iteration   7: 5015314.607 ops/s
# Warmup Iteration   8: 4988386.810 ops/s
# Warmup Iteration   9: 4979236.289 ops/s
# Warmup Iteration  10: 4969447.419 ops/s
# Warmup Iteration  11: 5009463.826 ops/s
# Warmup Iteration  12: 4958824.627 ops/s
# Warmup Iteration  13: 4975167.990 ops/s
# Warmup Iteration  14: 5001567.295 ops/s
# Warmup Iteration  15: 4994790.352 ops/s
# Warmup Iteration  16: 5002529.006 ops/s
# Warmup Iteration  17: 4959790.518 ops/s
# Warmup Iteration  18: 5002212.074 ops/s
# Warmup Iteration  19: 5009047.495 ops/s
# Warmup Iteration  20: 4991255.437 ops/s
# Warmup Iteration  21: 4969141.190 ops/s
# Warmup Iteration  22: 4974824.364 ops/s
# Warmup Iteration  23: 5002672.131 ops/s
# Warmup Iteration  24: 4997479.516 ops/s
# Warmup Iteration  25: 5012665.293 ops/s
# Warmup Iteration  26: 5011584.356 ops/s
# Warmup Iteration  27: 4988452.140 ops/s
# Warmup Iteration  28: 5008146.457 ops/s
# Warmup Iteration  29: 5001032.400 ops/s
# Warmup Iteration  30: 5013766.052 ops/s
Iteration   1: 4986313.366 ops/s
Iteration   2: 5002182.711 ops/s
Iteration   3: 5014632.355 ops/s
Iteration   4: 5022122.624 ops/s
Iteration   5: 4990756.744 ops/s
Iteration   6: 5003082.378 ops/s
Iteration   7: 5005952.362 ops/s
Iteration   8: 4974242.581 ops/s
Iteration   9: 4986600.841 ops/s
Iteration  10: 4991462.175 ops/s
Iteration  11: 5006141.400 ops/s
Iteration  12: 5018257.409 ops/s
Iteration  13: 5016569.188 ops/s
Iteration  14: 5014504.260 ops/s
Iteration  15: 4986399.107 ops/s
Iteration  16: 5001839.140 ops/s
Iteration  17: 5016995.877 ops/s
Iteration  18: 4983481.620 ops/s
Iteration  19: 5007698.863 ops/s
Iteration  20: 5013231.786 ops/s
Iteration  21: 5034016.395 ops/s
Iteration  22: 4985006.430 ops/s
Iteration  23: 5001866.577 ops/s
Iteration  24: 4976684.454 ops/s
Iteration  25: 5017524.394 ops/s
Iteration  26: 5020638.965 ops/s
Iteration  27: 5017547.671 ops/s
Iteration  28: 5025825.420 ops/s
Iteration  29: 4992865.803 ops/s
Iteration  30: 5010660.888 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectByte":
  5004170.126 ±(99.9%) 10425.977 ops/s [Average]
  (min, avg, max) = (4974242.581, 5004170.126, 5034016.395), stdev = 15605.112
  CI (99.9%): [4993744.149, 5014596.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectByte  thrpt   30  5004170.126 ± 10425.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2487105.353 ops/s
# Warmup Iteration   2: 5074765.896 ops/s
# Warmup Iteration   3: 5595349.232 ops/s
# Warmup Iteration   4: 5607896.431 ops/s
# Warmup Iteration   5: 4624413.762 ops/s
# Warmup Iteration   6: 5631593.476 ops/s
# Warmup Iteration   7: 5616846.069 ops/s
# Warmup Iteration   8: 5623798.051 ops/s
# Warmup Iteration   9: 5633749.342 ops/s
# Warmup Iteration  10: 5631024.420 ops/s
# Warmup Iteration  11: 5602611.457 ops/s
# Warmup Iteration  12: 5616763.575 ops/s
# Warmup Iteration  13: 5619355.326 ops/s
# Warmup Iteration  14: 5617726.829 ops/s
# Warmup Iteration  15: 5624435.970 ops/s
# Warmup Iteration  16: 5629475.840 ops/s
# Warmup Iteration  17: 5630054.393 ops/s
# Warmup Iteration  18: 5628235.219 ops/s
# Warmup Iteration  19: 5611233.631 ops/s
# Warmup Iteration  20: 5635520.946 ops/s
# Warmup Iteration  21: 5626189.380 ops/s
# Warmup Iteration  22: 5598152.909 ops/s
# Warmup Iteration  23: 5612000.719 ops/s
# Warmup Iteration  24: 5629514.030 ops/s
# Warmup Iteration  25: 5634575.188 ops/s
# Warmup Iteration  26: 5627864.971 ops/s
# Warmup Iteration  27: 5630199.716 ops/s
# Warmup Iteration  28: 5610692.415 ops/s
# Warmup Iteration  29: 5638491.532 ops/s
# Warmup Iteration  30: 5634614.882 ops/s
Iteration   1: 5634914.949 ops/s
Iteration   2: 5629619.331 ops/s
Iteration   3: 5627849.638 ops/s
Iteration   4: 5637077.492 ops/s
Iteration   5: 5604950.001 ops/s
Iteration   6: 5629986.422 ops/s
Iteration   7: 5570056.698 ops/s
Iteration   8: 5608305.598 ops/s
Iteration   9: 5627820.104 ops/s
Iteration  10: 5598376.036 ops/s
Iteration  11: 5626201.737 ops/s
Iteration  12: 5624872.675 ops/s
Iteration  13: 5637411.235 ops/s
Iteration  14: 5589129.137 ops/s
Iteration  15: 5629408.903 ops/s
Iteration  16: 5613843.122 ops/s
Iteration  17: 5620774.679 ops/s
Iteration  18: 5616090.503 ops/s
Iteration  19: 5644838.879 ops/s
Iteration  20: 5619467.579 ops/s
Iteration  21: 5630836.065 ops/s
Iteration  22: 5639298.623 ops/s
Iteration  23: 5618959.723 ops/s
Iteration  24: 5630173.534 ops/s
Iteration  25: 5635263.378 ops/s
Iteration  26: 5611990.296 ops/s
Iteration  27: 5625503.668 ops/s
Iteration  28: 5586895.919 ops/s
Iteration  29: 5628086.422 ops/s
Iteration  30: 5636318.198 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectChar":
  5621144.018 ±(99.9%) 11466.764 ops/s [Average]
  (min, avg, max) = (5570056.698, 5621144.018, 5644838.879), stdev = 17162.915
  CI (99.9%): [5609677.254, 5632610.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectChar  thrpt   30  5621144.018 ± 11466.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2085875.282 ops/s
# Warmup Iteration   2: 4792420.619 ops/s
# Warmup Iteration   3: 5085438.727 ops/s
# Warmup Iteration   4: 5100469.010 ops/s
# Warmup Iteration   5: 4237536.977 ops/s
# Warmup Iteration   6: 5118931.611 ops/s
# Warmup Iteration   7: 5116073.010 ops/s
# Warmup Iteration   8: 5115980.422 ops/s
# Warmup Iteration   9: 5102304.411 ops/s
# Warmup Iteration  10: 5108816.033 ops/s
# Warmup Iteration  11: 5117375.688 ops/s
# Warmup Iteration  12: 5117672.207 ops/s
# Warmup Iteration  13: 5111119.657 ops/s
# Warmup Iteration  14: 5123241.995 ops/s
# Warmup Iteration  15: 5114948.205 ops/s
# Warmup Iteration  16: 5093069.530 ops/s
# Warmup Iteration  17: 5108307.854 ops/s
# Warmup Iteration  18: 5103793.973 ops/s
# Warmup Iteration  19: 5110079.230 ops/s
# Warmup Iteration  20: 5095140.223 ops/s
# Warmup Iteration  21: 5104524.115 ops/s
# Warmup Iteration  22: 5119061.453 ops/s
# Warmup Iteration  23: 5110941.681 ops/s
# Warmup Iteration  24: 5107822.851 ops/s
# Warmup Iteration  25: 5103237.928 ops/s
# Warmup Iteration  26: 5114074.507 ops/s
# Warmup Iteration  27: 5114046.008 ops/s
# Warmup Iteration  28: 5112157.463 ops/s
# Warmup Iteration  29: 5103367.205 ops/s
# Warmup Iteration  30: 5123572.223 ops/s
Iteration   1: 5117986.369 ops/s
Iteration   2: 5114838.950 ops/s
Iteration   3: 5104902.589 ops/s
Iteration   4: 5113573.043 ops/s
Iteration   5: 5047829.533 ops/s
Iteration   6: 5128149.917 ops/s
Iteration   7: 5082868.969 ops/s
Iteration   8: 5128060.157 ops/s
Iteration   9: 5116990.540 ops/s
Iteration  10: 5116868.437 ops/s
Iteration  11: 5114741.095 ops/s
Iteration  12: 5107725.467 ops/s
Iteration  13: 5119152.723 ops/s
Iteration  14: 5106496.657 ops/s
Iteration  15: 5120306.379 ops/s
Iteration  16: 5078721.098 ops/s
Iteration  17: 5127564.964 ops/s
Iteration  18: 5117273.954 ops/s
Iteration  19: 5120632.537 ops/s
Iteration  20: 5122640.582 ops/s
Iteration  21: 5124217.646 ops/s
Iteration  22: 5119955.963 ops/s
Iteration  23: 5101819.440 ops/s
Iteration  24: 5116532.600 ops/s
Iteration  25: 5122370.521 ops/s
Iteration  26: 5119745.720 ops/s
Iteration  27: 5109162.666 ops/s
Iteration  28: 5094273.661 ops/s
Iteration  29: 5110768.057 ops/s
Iteration  30: 5118581.869 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectDouble":
  5111491.737 ±(99.9%) 11259.080 ops/s [Average]
  (min, avg, max) = (5047829.533, 5111491.737, 5128149.917), stdev = 16852.062
  CI (99.9%): [5100232.657, 5122750.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectDouble  thrpt   30  5111491.737 ± 11259.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2334851.389 ops/s
# Warmup Iteration   2: 4943817.272 ops/s
# Warmup Iteration   3: 5395265.188 ops/s
# Warmup Iteration   4: 5407904.150 ops/s
# Warmup Iteration   5: 4495799.897 ops/s
# Warmup Iteration   6: 5412217.649 ops/s
# Warmup Iteration   7: 5425724.946 ops/s
# Warmup Iteration   8: 5429425.260 ops/s
# Warmup Iteration   9: 5419763.678 ops/s
# Warmup Iteration  10: 5425794.539 ops/s
# Warmup Iteration  11: 5433499.080 ops/s
# Warmup Iteration  12: 5419558.781 ops/s
# Warmup Iteration  13: 5410850.193 ops/s
# Warmup Iteration  14: 5413833.636 ops/s
# Warmup Iteration  15: 5400513.205 ops/s
# Warmup Iteration  16: 5403689.893 ops/s
# Warmup Iteration  17: 5422884.824 ops/s
# Warmup Iteration  18: 5432494.983 ops/s
# Warmup Iteration  19: 5433090.907 ops/s
# Warmup Iteration  20: 5403260.966 ops/s
# Warmup Iteration  21: 5416248.566 ops/s
# Warmup Iteration  22: 5410764.332 ops/s
# Warmup Iteration  23: 5421408.945 ops/s
# Warmup Iteration  24: 5420806.931 ops/s
# Warmup Iteration  25: 5418355.741 ops/s
# Warmup Iteration  26: 5406230.551 ops/s
# Warmup Iteration  27: 5408157.080 ops/s
# Warmup Iteration  28: 5436448.151 ops/s
# Warmup Iteration  29: 5422427.616 ops/s
# Warmup Iteration  30: 5426471.288 ops/s
Iteration   1: 5425944.570 ops/s
Iteration   2: 5428381.395 ops/s
Iteration   3: 5397891.043 ops/s
Iteration   4: 5412138.477 ops/s
Iteration   5: 5421999.893 ops/s
Iteration   6: 5429605.470 ops/s
Iteration   7: 5434319.251 ops/s
Iteration   8: 5442495.857 ops/s
Iteration   9: 5421416.807 ops/s
Iteration  10: 5423793.968 ops/s
Iteration  11: 5411195.754 ops/s
Iteration  12: 5436723.296 ops/s
Iteration  13: 5419027.743 ops/s
Iteration  14: 5426282.757 ops/s
Iteration  15: 5437831.197 ops/s
Iteration  16: 5420993.857 ops/s
Iteration  17: 5424982.327 ops/s
Iteration  18: 5368132.314 ops/s
Iteration  19: 5429814.395 ops/s
Iteration  20: 5422819.131 ops/s
Iteration  21: 5429380.439 ops/s
Iteration  22: 5397938.285 ops/s
Iteration  23: 5396655.712 ops/s
Iteration  24: 5373821.764 ops/s
Iteration  25: 5386619.353 ops/s
Iteration  26: 5414650.488 ops/s
Iteration  27: 5421335.600 ops/s
Iteration  28: 5412391.307 ops/s
Iteration  29: 5380955.074 ops/s
Iteration  30: 5416661.922 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectFloat":
  5415539.982 ±(99.9%) 12657.966 ops/s [Average]
  (min, avg, max) = (5368132.314, 5415539.982, 5442495.857), stdev = 18945.850
  CI (99.9%): [5402882.015, 5428197.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectFloat  thrpt   30  5415539.982 ± 12657.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3591891.531 ops/s
# Warmup Iteration   2: 5408120.858 ops/s
# Warmup Iteration   3: 6254998.750 ops/s
# Warmup Iteration   4: 6289042.007 ops/s
# Warmup Iteration   5: 6279708.141 ops/s
# Warmup Iteration   6: 6303401.744 ops/s
# Warmup Iteration   7: 5255713.396 ops/s
# Warmup Iteration   8: 6294515.062 ops/s
# Warmup Iteration   9: 6279622.511 ops/s
# Warmup Iteration  10: 6281878.835 ops/s
# Warmup Iteration  11: 6290397.381 ops/s
# Warmup Iteration  12: 6294122.837 ops/s
# Warmup Iteration  13: 6297836.468 ops/s
# Warmup Iteration  14: 6281180.363 ops/s
# Warmup Iteration  15: 6287991.899 ops/s
# Warmup Iteration  16: 6298998.150 ops/s
# Warmup Iteration  17: 6300544.153 ops/s
# Warmup Iteration  18: 6292184.918 ops/s
# Warmup Iteration  19: 6300697.685 ops/s
# Warmup Iteration  20: 6263633.520 ops/s
# Warmup Iteration  21: 6286904.897 ops/s
# Warmup Iteration  22: 6293579.058 ops/s
# Warmup Iteration  23: 6275579.074 ops/s
# Warmup Iteration  24: 6281536.275 ops/s
# Warmup Iteration  25: 6297817.057 ops/s
# Warmup Iteration  26: 6284603.013 ops/s
# Warmup Iteration  27: 6260555.999 ops/s
# Warmup Iteration  28: 6297698.909 ops/s
# Warmup Iteration  29: 6292269.054 ops/s
# Warmup Iteration  30: 6291201.387 ops/s
Iteration   1: 6305226.006 ops/s
Iteration   2: 6277434.774 ops/s
Iteration   3: 6275865.751 ops/s
Iteration   4: 6272186.507 ops/s
Iteration   5: 6295237.333 ops/s
Iteration   6: 6281883.163 ops/s
Iteration   7: 6301183.794 ops/s
Iteration   8: 6280472.181 ops/s
Iteration   9: 6306464.944 ops/s
Iteration  10: 6287019.027 ops/s
Iteration  11: 6276499.780 ops/s
Iteration  12: 6294626.965 ops/s
Iteration  13: 6269415.256 ops/s
Iteration  14: 6292151.992 ops/s
Iteration  15: 6254878.290 ops/s
Iteration  16: 6275320.704 ops/s
Iteration  17: 6223147.941 ops/s
Iteration  18: 6228956.393 ops/s
Iteration  19: 6263434.796 ops/s
Iteration  20: 6307934.760 ops/s
Iteration  21: 6305414.948 ops/s
Iteration  22: 6298730.843 ops/s
Iteration  23: 6305982.375 ops/s
Iteration  24: 6291036.076 ops/s
Iteration  25: 6301974.732 ops/s
Iteration  26: 6258304.860 ops/s
Iteration  27: 6301923.140 ops/s
Iteration  28: 6294168.659 ops/s
Iteration  29: 6307926.316 ops/s
Iteration  30: 6294938.423 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIf":
  6284324.691 ±(99.9%) 14709.597 ops/s [Average]
  (min, avg, max) = (6223147.941, 6284324.691, 6307934.760), stdev = 22016.634
  CI (99.9%): [6269615.094, 6299034.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectIf  thrpt   30  6284324.691 ± 14709.597  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5205928.825 ops/s
# Warmup Iteration   2: 8651307.417 ops/s
# Warmup Iteration   3: 9898876.381 ops/s
# Warmup Iteration   4: 9943916.823 ops/s
# Warmup Iteration   5: 9946184.502 ops/s
# Warmup Iteration   6: 8225005.242 ops/s
# Warmup Iteration   7: 9962583.820 ops/s
# Warmup Iteration   8: 9923462.384 ops/s
# Warmup Iteration   9: 9949325.256 ops/s
# Warmup Iteration  10: 9943101.379 ops/s
# Warmup Iteration  11: 9960259.365 ops/s
# Warmup Iteration  12: 9886441.023 ops/s
# Warmup Iteration  13: 9914928.866 ops/s
# Warmup Iteration  14: 9921315.435 ops/s
# Warmup Iteration  15: 9930816.628 ops/s
# Warmup Iteration  16: 9954562.170 ops/s
# Warmup Iteration  17: 9911253.295 ops/s
# Warmup Iteration  18: 9929617.869 ops/s
# Warmup Iteration  19: 9934835.037 ops/s
# Warmup Iteration  20: 9903695.452 ops/s
# Warmup Iteration  21: 9871802.137 ops/s
# Warmup Iteration  22: 9932549.537 ops/s
# Warmup Iteration  23: 9900396.493 ops/s
# Warmup Iteration  24: 9894084.477 ops/s
# Warmup Iteration  25: 9914877.390 ops/s
# Warmup Iteration  26: 9903644.490 ops/s
# Warmup Iteration  27: 9917652.786 ops/s
# Warmup Iteration  28: 9929354.731 ops/s
# Warmup Iteration  29: 9904037.636 ops/s
# Warmup Iteration  30: 9894129.327 ops/s
Iteration   1: 9941046.673 ops/s
Iteration   2: 9920863.018 ops/s
Iteration   3: 9898107.175 ops/s
Iteration   4: 9926373.440 ops/s
Iteration   5: 9919599.850 ops/s
Iteration   6: 9868637.090 ops/s
Iteration   7: 9916929.964 ops/s
Iteration   8: 9880362.242 ops/s
Iteration   9: 9900112.326 ops/s
Iteration  10: 9900953.568 ops/s
Iteration  11: 9931442.315 ops/s
Iteration  12: 9913323.910 ops/s
Iteration  13: 9927491.466 ops/s
Iteration  14: 9929784.615 ops/s
Iteration  15: 9902899.962 ops/s
Iteration  16: 9902221.822 ops/s
Iteration  17: 9930890.288 ops/s
Iteration  18: 9886511.122 ops/s
Iteration  19: 9938132.244 ops/s
Iteration  20: 9926591.406 ops/s
Iteration  21: 9931877.364 ops/s
Iteration  22: 9914543.961 ops/s
Iteration  23: 9934047.634 ops/s
Iteration  24: 9930123.888 ops/s
Iteration  25: 9894363.957 ops/s
Iteration  26: 9925812.950 ops/s
Iteration  27: 9908610.463 ops/s
Iteration  28: 9936031.121 ops/s
Iteration  29: 9891758.919 ops/s
Iteration  30: 9928258.679 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectIfWithTarget":
  9915256.781 ±(99.9%) 12547.282 ops/s [Average]
  (min, avg, max) = (9868637.090, 9915256.781, 9941046.673), stdev = 18780.182
  CI (99.9%): [9902709.500, 9927804.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  9915256.781 ± 12547.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2361961.910 ops/s
# Warmup Iteration   2: 5013911.334 ops/s
# Warmup Iteration   3: 5469826.503 ops/s
# Warmup Iteration   4: 5504354.963 ops/s
# Warmup Iteration   5: 4547060.251 ops/s
# Warmup Iteration   6: 5494289.785 ops/s
# Warmup Iteration   7: 5493213.176 ops/s
# Warmup Iteration   8: 5491073.393 ops/s
# Warmup Iteration   9: 5497917.736 ops/s
# Warmup Iteration  10: 5498722.717 ops/s
# Warmup Iteration  11: 5494626.090 ops/s
# Warmup Iteration  12: 5498215.937 ops/s
# Warmup Iteration  13: 5493465.710 ops/s
# Warmup Iteration  14: 5497607.179 ops/s
# Warmup Iteration  15: 5492173.444 ops/s
# Warmup Iteration  16: 5496702.269 ops/s
# Warmup Iteration  17: 5510632.198 ops/s
# Warmup Iteration  18: 5496874.819 ops/s
# Warmup Iteration  19: 5506478.014 ops/s
# Warmup Iteration  20: 5499757.084 ops/s
# Warmup Iteration  21: 5490115.155 ops/s
# Warmup Iteration  22: 5511159.782 ops/s
# Warmup Iteration  23: 5493683.137 ops/s
# Warmup Iteration  24: 5507310.372 ops/s
# Warmup Iteration  25: 5501586.294 ops/s
# Warmup Iteration  26: 5501884.947 ops/s
# Warmup Iteration  27: 5508213.085 ops/s
# Warmup Iteration  28: 5497393.657 ops/s
# Warmup Iteration  29: 5482825.210 ops/s
# Warmup Iteration  30: 5508269.002 ops/s
Iteration   1: 5506187.937 ops/s
Iteration   2: 5472557.873 ops/s
Iteration   3: 5507906.209 ops/s
Iteration   4: 5500342.157 ops/s
Iteration   5: 5506145.575 ops/s
Iteration   6: 5492547.114 ops/s
Iteration   7: 5511215.281 ops/s
Iteration   8: 5469236.332 ops/s
Iteration   9: 5493017.719 ops/s
Iteration  10: 5513514.970 ops/s
Iteration  11: 5514983.870 ops/s
Iteration  12: 5489640.680 ops/s
Iteration  13: 5506435.499 ops/s
Iteration  14: 5504305.793 ops/s
Iteration  15: 5502752.243 ops/s
Iteration  16: 5491097.614 ops/s
Iteration  17: 5517082.349 ops/s
Iteration  18: 5488472.438 ops/s
Iteration  19: 5498076.836 ops/s
Iteration  20: 5495565.159 ops/s
Iteration  21: 5506679.838 ops/s
Iteration  22: 5451988.004 ops/s
Iteration  23: 5500746.357 ops/s
Iteration  24: 5523801.421 ops/s
Iteration  25: 5493535.647 ops/s
Iteration  26: 5493092.970 ops/s
Iteration  27: 5510308.343 ops/s
Iteration  28: 5513128.690 ops/s
Iteration  29: 5504742.204 ops/s
Iteration  30: 5497007.068 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectInt":
  5499203.806 ±(99.9%) 9983.183 ops/s [Average]
  (min, avg, max) = (5451988.004, 5499203.806, 5523801.421), stdev = 14942.359
  CI (99.9%): [5489220.623, 5509186.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectInt  thrpt   30  5499203.806 ± 9983.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2098485.716 ops/s
# Warmup Iteration   2: 4841104.970 ops/s
# Warmup Iteration   3: 5137254.117 ops/s
# Warmup Iteration   4: 5105329.846 ops/s
# Warmup Iteration   5: 4335431.501 ops/s
# Warmup Iteration   6: 5176786.329 ops/s
# Warmup Iteration   7: 5168787.000 ops/s
# Warmup Iteration   8: 5183677.799 ops/s
# Warmup Iteration   9: 5183529.918 ops/s
# Warmup Iteration  10: 5182881.387 ops/s
# Warmup Iteration  11: 5179623.894 ops/s
# Warmup Iteration  12: 5177602.716 ops/s
# Warmup Iteration  13: 5184571.107 ops/s
# Warmup Iteration  14: 5182066.901 ops/s
# Warmup Iteration  15: 5180705.124 ops/s
# Warmup Iteration  16: 5188467.299 ops/s
# Warmup Iteration  17: 5183611.288 ops/s
# Warmup Iteration  18: 5176193.461 ops/s
# Warmup Iteration  19: 5177744.397 ops/s
# Warmup Iteration  20: 5184600.304 ops/s
# Warmup Iteration  21: 5185477.281 ops/s
# Warmup Iteration  22: 5184610.206 ops/s
# Warmup Iteration  23: 5180190.620 ops/s
# Warmup Iteration  24: 5182205.284 ops/s
# Warmup Iteration  25: 5177873.306 ops/s
# Warmup Iteration  26: 5183985.796 ops/s
# Warmup Iteration  27: 5186973.545 ops/s
# Warmup Iteration  28: 5181455.270 ops/s
# Warmup Iteration  29: 5182346.458 ops/s
# Warmup Iteration  30: 5176082.593 ops/s
Iteration   1: 5168948.311 ops/s
Iteration   2: 5185331.220 ops/s
Iteration   3: 5201343.806 ops/s
Iteration   4: 5176190.620 ops/s
Iteration   5: 5184060.667 ops/s
Iteration   6: 5192368.124 ops/s
Iteration   7: 5176836.738 ops/s
Iteration   8: 5188517.591 ops/s
Iteration   9: 5169683.528 ops/s
Iteration  10: 5188695.397 ops/s
Iteration  11: 5188570.243 ops/s
Iteration  12: 5148228.957 ops/s
Iteration  13: 5179259.395 ops/s
Iteration  14: 5184490.579 ops/s
Iteration  15: 5179746.406 ops/s
Iteration  16: 5186794.224 ops/s
Iteration  17: 5183001.113 ops/s
Iteration  18: 5187064.299 ops/s
Iteration  19: 5178271.867 ops/s
Iteration  20: 5194032.458 ops/s
Iteration  21: 5180159.269 ops/s
Iteration  22: 5178984.031 ops/s
Iteration  23: 5180616.006 ops/s
Iteration  24: 5183158.708 ops/s
Iteration  25: 5189481.840 ops/s
Iteration  26: 5188943.340 ops/s
Iteration  27: 5170478.691 ops/s
Iteration  28: 5175640.318 ops/s
Iteration  29: 5188015.642 ops/s
Iteration  30: 5168723.005 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectLong":
  5181521.213 ±(99.9%) 6653.708 ops/s [Average]
  (min, avg, max) = (5148228.957, 5181521.213, 5201343.806), stdev = 9958.958
  CI (99.9%): [5174867.505, 5188174.921] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectLong  thrpt   30  5181521.213 ± 6653.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2269902.814 ops/s
# Warmup Iteration   2: 4301340.702 ops/s
# Warmup Iteration   3: 4836257.499 ops/s
# Warmup Iteration   4: 4855169.175 ops/s
# Warmup Iteration   5: 4866254.513 ops/s
# Warmup Iteration   6: 4016631.471 ops/s
# Warmup Iteration   7: 4873577.258 ops/s
# Warmup Iteration   8: 4875267.237 ops/s
# Warmup Iteration   9: 4873699.499 ops/s
# Warmup Iteration  10: 4866283.301 ops/s
# Warmup Iteration  11: 4867796.282 ops/s
# Warmup Iteration  12: 4872336.300 ops/s
# Warmup Iteration  13: 4877160.810 ops/s
# Warmup Iteration  14: 4875339.140 ops/s
# Warmup Iteration  15: 4871950.504 ops/s
# Warmup Iteration  16: 4868377.575 ops/s
# Warmup Iteration  17: 4880810.831 ops/s
# Warmup Iteration  18: 4877086.640 ops/s
# Warmup Iteration  19: 4879191.602 ops/s
# Warmup Iteration  20: 4869439.170 ops/s
# Warmup Iteration  21: 4871642.529 ops/s
# Warmup Iteration  22: 4876407.591 ops/s
# Warmup Iteration  23: 4872455.690 ops/s
# Warmup Iteration  24: 4876253.735 ops/s
# Warmup Iteration  25: 4864953.030 ops/s
# Warmup Iteration  26: 4872410.008 ops/s
# Warmup Iteration  27: 4872947.602 ops/s
# Warmup Iteration  28: 4870107.815 ops/s
# Warmup Iteration  29: 4878131.932 ops/s
# Warmup Iteration  30: 4859263.583 ops/s
Iteration   1: 4876916.461 ops/s
Iteration   2: 4869606.536 ops/s
Iteration   3: 4875663.892 ops/s
Iteration   4: 4875307.682 ops/s
Iteration   5: 4883757.537 ops/s
Iteration   6: 4874685.998 ops/s
Iteration   7: 4869709.032 ops/s
Iteration   8: 4881152.608 ops/s
Iteration   9: 4870011.473 ops/s
Iteration  10: 4878157.852 ops/s
Iteration  11: 4867837.450 ops/s
Iteration  12: 4872111.645 ops/s
Iteration  13: 4869116.352 ops/s
Iteration  14: 4875982.191 ops/s
Iteration  15: 4869788.954 ops/s
Iteration  16: 4870522.556 ops/s
Iteration  17: 4878264.504 ops/s
Iteration  18: 4866518.936 ops/s
Iteration  19: 4880469.781 ops/s
Iteration  20: 4854806.037 ops/s
Iteration  21: 4847544.965 ops/s
Iteration  22: 4879863.336 ops/s
Iteration  23: 4865435.285 ops/s
Iteration  24: 4874523.324 ops/s
Iteration  25: 4871427.678 ops/s
Iteration  26: 4878078.787 ops/s
Iteration  27: 4868333.996 ops/s
Iteration  28: 4864354.294 ops/s
Iteration  29: 4880649.173 ops/s
Iteration  30: 4872002.782 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectShort":
  4872086.703 ±(99.9%) 5128.802 ops/s [Average]
  (min, avg, max) = (4847544.965, 4872086.703, 4883757.537), stdev = 7676.550
  CI (99.9%): [4866957.901, 4877215.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectShort  thrpt   30  4872086.703 ± 5128.802  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 722935.796 ops/s
# Warmup Iteration   2: 1528177.537 ops/s
# Warmup Iteration   3: 1394914.251 ops/s
# Warmup Iteration   4: 1454207.666 ops/s
# Warmup Iteration   5: 1542091.645 ops/s
# Warmup Iteration   6: 1537957.285 ops/s
# Warmup Iteration   7: 1542554.047 ops/s
# Warmup Iteration   8: 1546692.080 ops/s
# Warmup Iteration   9: 1536381.232 ops/s
# Warmup Iteration  10: 1538438.001 ops/s
# Warmup Iteration  11: 1543998.837 ops/s
# Warmup Iteration  12: 1540085.374 ops/s
# Warmup Iteration  13: 1538769.416 ops/s
# Warmup Iteration  14: 1539113.614 ops/s
# Warmup Iteration  15: 1540591.469 ops/s
# Warmup Iteration  16: 1540677.924 ops/s
# Warmup Iteration  17: 1532585.253 ops/s
# Warmup Iteration  18: 1530199.285 ops/s
# Warmup Iteration  19: 1521036.857 ops/s
# Warmup Iteration  20: 1519316.201 ops/s
# Warmup Iteration  21: 1515807.998 ops/s
# Warmup Iteration  22: 1514402.832 ops/s
# Warmup Iteration  23: 1512064.960 ops/s
# Warmup Iteration  24: 1516583.286 ops/s
# Warmup Iteration  25: 1513970.657 ops/s
# Warmup Iteration  26: 1531980.815 ops/s
# Warmup Iteration  27: 1535618.883 ops/s
# Warmup Iteration  28: 1502272.851 ops/s
# Warmup Iteration  29: 1508679.711 ops/s
# Warmup Iteration  30: 1521438.750 ops/s
Iteration   1: 1529571.696 ops/s
Iteration   2: 1535298.407 ops/s
Iteration   3: 1534054.107 ops/s
Iteration   4: 1537619.739 ops/s
Iteration   5: 1527325.948 ops/s
Iteration   6: 1521291.723 ops/s
Iteration   7: 1538068.443 ops/s
Iteration   8: 1529119.616 ops/s
Iteration   9: 1529653.004 ops/s
Iteration  10: 1529913.256 ops/s
Iteration  11: 1528656.805 ops/s
Iteration  12: 1523699.169 ops/s
Iteration  13: 1524649.750 ops/s
Iteration  14: 1527343.617 ops/s
Iteration  15: 1522271.742 ops/s
Iteration  16: 1526519.126 ops/s
Iteration  17: 1538271.851 ops/s
Iteration  18: 1534586.501 ops/s
Iteration  19: 1538134.689 ops/s
Iteration  20: 1541038.285 ops/s
Iteration  21: 1527576.393 ops/s
Iteration  22: 1517015.914 ops/s
Iteration  23: 1532288.007 ops/s
Iteration  24: 1540568.985 ops/s
Iteration  25: 1533019.113 ops/s
Iteration  26: 1528098.127 ops/s
Iteration  27: 1541310.415 ops/s
Iteration  28: 1540119.944 ops/s
Iteration  29: 1540610.660 ops/s
Iteration  30: 1529550.634 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith":
  1531574.855 ±(99.9%) 4388.302 ops/s [Average]
  (min, avg, max) = (1517015.914, 1531574.855, 1541310.415), stdev = 6568.204
  CI (99.9%): [1527186.554, 1535963.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectWith  thrpt   30  1531574.855 ± 4388.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1274166.444 ops/s
# Warmup Iteration   2: 3418592.690 ops/s
# Warmup Iteration   3: 3466697.260 ops/s
# Warmup Iteration   4: 2911058.985 ops/s
# Warmup Iteration   5: 3478576.051 ops/s
# Warmup Iteration   6: 3470738.805 ops/s
# Warmup Iteration   7: 3475754.164 ops/s
# Warmup Iteration   8: 3474866.019 ops/s
# Warmup Iteration   9: 3475250.864 ops/s
# Warmup Iteration  10: 3476442.817 ops/s
# Warmup Iteration  11: 3476982.014 ops/s
# Warmup Iteration  12: 3479167.077 ops/s
# Warmup Iteration  13: 3480499.784 ops/s
# Warmup Iteration  14: 3474087.462 ops/s
# Warmup Iteration  15: 3479392.233 ops/s
# Warmup Iteration  16: 3476211.442 ops/s
# Warmup Iteration  17: 3703144.487 ops/s
# Warmup Iteration  18: 3699924.285 ops/s
# Warmup Iteration  19: 3694522.041 ops/s
# Warmup Iteration  20: 3700489.890 ops/s
# Warmup Iteration  21: 3698278.188 ops/s
# Warmup Iteration  22: 3698156.442 ops/s
# Warmup Iteration  23: 3702664.111 ops/s
# Warmup Iteration  24: 3701285.906 ops/s
# Warmup Iteration  25: 3705166.145 ops/s
# Warmup Iteration  26: 3699910.302 ops/s
# Warmup Iteration  27: 3698232.741 ops/s
# Warmup Iteration  28: 3694061.114 ops/s
# Warmup Iteration  29: 3701637.982 ops/s
# Warmup Iteration  30: 3703249.153 ops/s
Iteration   1: 3700718.755 ops/s
Iteration   2: 3701387.632 ops/s
Iteration   3: 3691212.447 ops/s
Iteration   4: 3700602.400 ops/s
Iteration   5: 3700762.610 ops/s
Iteration   6: 3704487.446 ops/s
Iteration   7: 3703017.079 ops/s
Iteration   8: 3698347.821 ops/s
Iteration   9: 3701462.469 ops/s
Iteration  10: 3702587.835 ops/s
Iteration  11: 3698750.005 ops/s
Iteration  12: 3688456.113 ops/s
Iteration  13: 3699648.916 ops/s
Iteration  14: 3695812.380 ops/s
Iteration  15: 3698513.445 ops/s
Iteration  16: 3700737.235 ops/s
Iteration  17: 3704958.340 ops/s
Iteration  18: 3699261.693 ops/s
Iteration  19: 3704509.747 ops/s
Iteration  20: 3706400.366 ops/s
Iteration  21: 3701152.183 ops/s
Iteration  22: 3702686.307 ops/s
Iteration  23: 3701906.965 ops/s
Iteration  24: 3683966.289 ops/s
Iteration  25: 3692651.748 ops/s
Iteration  26: 3706763.465 ops/s
Iteration  27: 3701576.182 ops/s
Iteration  28: 3698672.525 ops/s
Iteration  29: 3703258.030 ops/s
Iteration  30: 3698795.368 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndex":
  3699768.793 ±(99.9%) 3390.399 ops/s [Average]
  (min, avg, max) = (3683966.289, 3699768.793, 3706763.465), stdev = 5074.590
  CI (99.9%): [3696378.394, 3703159.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndex  thrpt   30  3699768.793 ± 3390.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 332130.808 ops/s
# Warmup Iteration   2: 852158.798 ops/s
# Warmup Iteration   3: 1104047.547 ops/s
# Warmup Iteration   4: 1112517.051 ops/s
# Warmup Iteration   5: 926857.534 ops/s
# Warmup Iteration   6: 1114165.303 ops/s
# Warmup Iteration   7: 1113676.820 ops/s
# Warmup Iteration   8: 1113841.585 ops/s
# Warmup Iteration   9: 1114965.483 ops/s
# Warmup Iteration  10: 1113798.449 ops/s
# Warmup Iteration  11: 1114770.129 ops/s
# Warmup Iteration  12: 1114136.690 ops/s
# Warmup Iteration  13: 1113825.072 ops/s
# Warmup Iteration  14: 1114795.645 ops/s
# Warmup Iteration  15: 1113390.215 ops/s
# Warmup Iteration  16: 1116010.258 ops/s
# Warmup Iteration  17: 1111419.013 ops/s
# Warmup Iteration  18: 1114357.138 ops/s
# Warmup Iteration  19: 1111447.288 ops/s
# Warmup Iteration  20: 1115001.064 ops/s
# Warmup Iteration  21: 1114795.343 ops/s
# Warmup Iteration  22: 1114481.221 ops/s
# Warmup Iteration  23: 1114112.647 ops/s
# Warmup Iteration  24: 1114881.108 ops/s
# Warmup Iteration  25: 1114541.346 ops/s
# Warmup Iteration  26: 1115298.222 ops/s
# Warmup Iteration  27: 1112779.051 ops/s
# Warmup Iteration  28: 1114376.644 ops/s
# Warmup Iteration  29: 1115099.670 ops/s
# Warmup Iteration  30: 1113532.958 ops/s
Iteration   1: 1115720.688 ops/s
Iteration   2: 1113701.158 ops/s
Iteration   3: 1115872.510 ops/s
Iteration   4: 1112300.084 ops/s
Iteration   5: 1112743.705 ops/s
Iteration   6: 1115792.996 ops/s
Iteration   7: 1113413.459 ops/s
Iteration   8: 1113523.349 ops/s
Iteration   9: 1114898.872 ops/s
Iteration  10: 1110490.640 ops/s
Iteration  11: 1115678.913 ops/s
Iteration  12: 1113459.043 ops/s
Iteration  13: 1115094.650 ops/s
Iteration  14: 1113544.248 ops/s
Iteration  15: 1111713.863 ops/s
Iteration  16: 1115393.265 ops/s
Iteration  17: 1112759.261 ops/s
Iteration  18: 1113161.681 ops/s
Iteration  19: 1112900.280 ops/s
Iteration  20: 1114756.024 ops/s
Iteration  21: 1113841.653 ops/s
Iteration  22: 1113178.429 ops/s
Iteration  23: 1117107.711 ops/s
Iteration  24: 1113289.325 ops/s
Iteration  25: 1114912.307 ops/s
Iteration  26: 1112756.240 ops/s
Iteration  27: 1113496.925 ops/s
Iteration  28: 1112354.644 ops/s
Iteration  29: 1118637.754 ops/s
Iteration  30: 1116261.864 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget":
  1114091.851 ±(99.9%) 1151.982 ops/s [Average]
  (min, avg, max) = (1110490.640, 1114091.851, 1118637.754), stdev = 1724.232
  CI (99.9%): [1112939.870, 1115243.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  1114091.851 ± 1151.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 609919.048 ops/s
# Warmup Iteration   2: 1606880.860 ops/s
# Warmup Iteration   3: 1353926.099 ops/s
# Warmup Iteration   4: 1609546.414 ops/s
# Warmup Iteration   5: 1608385.318 ops/s
# Warmup Iteration   6: 1608817.286 ops/s
# Warmup Iteration   7: 1602216.237 ops/s
# Warmup Iteration   8: 1613246.923 ops/s
# Warmup Iteration   9: 1606405.136 ops/s
# Warmup Iteration  10: 1603064.117 ops/s
# Warmup Iteration  11: 1609430.666 ops/s
# Warmup Iteration  12: 1607145.910 ops/s
# Warmup Iteration  13: 1612116.645 ops/s
# Warmup Iteration  14: 1610726.849 ops/s
# Warmup Iteration  15: 1609580.411 ops/s
# Warmup Iteration  16: 1605393.178 ops/s
# Warmup Iteration  17: 1611804.183 ops/s
# Warmup Iteration  18: 1611585.105 ops/s
# Warmup Iteration  19: 1610100.998 ops/s
# Warmup Iteration  20: 1612437.732 ops/s
# Warmup Iteration  21: 1609202.738 ops/s
# Warmup Iteration  22: 1608986.610 ops/s
# Warmup Iteration  23: 1609248.326 ops/s
# Warmup Iteration  24: 1613631.132 ops/s
# Warmup Iteration  25: 1612277.871 ops/s
# Warmup Iteration  26: 1610870.248 ops/s
# Warmup Iteration  27: 1606956.059 ops/s
# Warmup Iteration  28: 1604489.433 ops/s
# Warmup Iteration  29: 1612688.336 ops/s
# Warmup Iteration  30: 1609144.828 ops/s
Iteration   1: 1614863.516 ops/s
Iteration   2: 1609924.548 ops/s
Iteration   3: 1610843.733 ops/s
Iteration   4: 1615453.773 ops/s
Iteration   5: 1613438.089 ops/s
Iteration   6: 1614460.982 ops/s
Iteration   7: 1603162.843 ops/s
Iteration   8: 1606083.333 ops/s
Iteration   9: 1606947.348 ops/s
Iteration  10: 1610954.816 ops/s
Iteration  11: 1614034.485 ops/s
Iteration  12: 1602514.616 ops/s
Iteration  13: 1607969.192 ops/s
Iteration  14: 1610594.219 ops/s
Iteration  15: 1610493.062 ops/s
Iteration  16: 1610001.144 ops/s
Iteration  17: 1608492.460 ops/s
Iteration  18: 1612222.987 ops/s
Iteration  19: 1612108.759 ops/s
Iteration  20: 1614625.873 ops/s
Iteration  21: 1604693.883 ops/s
Iteration  22: 1601915.249 ops/s
Iteration  23: 1610434.774 ops/s
Iteration  24: 1610770.818 ops/s
Iteration  25: 1607286.193 ops/s
Iteration  26: 1608988.127 ops/s
Iteration  27: 1612189.804 ops/s
Iteration  28: 1605827.247 ops/s
Iteration  29: 1610995.581 ops/s
Iteration  30: 1613486.647 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collectWith_target":
  1609859.270 ±(99.9%) 2498.902 ops/s [Average]
  (min, avg, max) = (1601915.249, 1609859.270, 1615453.773), stdev = 3740.239
  CI (99.9%): [1607360.368, 1612358.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collectWith_target  thrpt   30  1609859.270 ± 2498.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1387078.708 ops/s
# Warmup Iteration   2: 3180389.118 ops/s
# Warmup Iteration   3: 2674181.534 ops/s
# Warmup Iteration   4: 3196247.404 ops/s
# Warmup Iteration   5: 3194972.465 ops/s
# Warmup Iteration   6: 3192671.275 ops/s
# Warmup Iteration   7: 3200982.601 ops/s
# Warmup Iteration   8: 3198650.232 ops/s
# Warmup Iteration   9: 3196567.353 ops/s
# Warmup Iteration  10: 3198073.606 ops/s
# Warmup Iteration  11: 3185332.856 ops/s
# Warmup Iteration  12: 3199416.943 ops/s
# Warmup Iteration  13: 3199113.695 ops/s
# Warmup Iteration  14: 3187482.823 ops/s
# Warmup Iteration  15: 3190373.933 ops/s
# Warmup Iteration  16: 3201347.353 ops/s
# Warmup Iteration  17: 3206793.373 ops/s
# Warmup Iteration  18: 3191138.412 ops/s
# Warmup Iteration  19: 3189633.620 ops/s
# Warmup Iteration  20: 3192410.467 ops/s
# Warmup Iteration  21: 3185516.511 ops/s
# Warmup Iteration  22: 3170880.404 ops/s
# Warmup Iteration  23: 3206074.682 ops/s
# Warmup Iteration  24: 3185958.744 ops/s
# Warmup Iteration  25: 3201705.646 ops/s
# Warmup Iteration  26: 3190862.067 ops/s
# Warmup Iteration  27: 3179989.123 ops/s
# Warmup Iteration  28: 3163883.103 ops/s
# Warmup Iteration  29: 3185270.268 ops/s
# Warmup Iteration  30: 3193526.442 ops/s
Iteration   1: 3184959.266 ops/s
Iteration   2: 3205515.921 ops/s
Iteration   3: 3198791.882 ops/s
Iteration   4: 3210426.498 ops/s
Iteration   5: 3201126.106 ops/s
Iteration   6: 3198253.357 ops/s
Iteration   7: 3192050.501 ops/s
Iteration   8: 3193806.260 ops/s
Iteration   9: 3184646.091 ops/s
Iteration  10: 3208491.588 ops/s
Iteration  11: 3176554.453 ops/s
Iteration  12: 3189094.886 ops/s
Iteration  13: 3204808.438 ops/s
Iteration  14: 3188683.711 ops/s
Iteration  15: 3173815.789 ops/s
Iteration  16: 3196448.706 ops/s
Iteration  17: 3197210.578 ops/s
Iteration  18: 3200684.217 ops/s
Iteration  19: 3188383.701 ops/s
Iteration  20: 3189451.678 ops/s
Iteration  21: 3201113.398 ops/s
Iteration  22: 3181041.825 ops/s
Iteration  23: 3201660.798 ops/s
Iteration  24: 3202167.502 ops/s
Iteration  25: 3185511.078 ops/s
Iteration  26: 3165098.054 ops/s
Iteration  27: 3196133.495 ops/s
Iteration  28: 3174936.828 ops/s
Iteration  29: 3200882.384 ops/s
Iteration  30: 3195325.353 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_collect_target":
  3192902.478 ±(99.9%) 7343.691 ops/s [Average]
  (min, avg, max) = (3165098.054, 3192902.478, 3210426.498), stdev = 10991.692
  CI (99.9%): [3185558.787, 3200246.169] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_collect_target  thrpt   30  3192902.478 ± 7343.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1417371.806 ops/s
# Warmup Iteration   2: 1910733.144 ops/s
# Warmup Iteration   3: 2119587.368 ops/s
# Warmup Iteration   4: 2132790.419 ops/s
# Warmup Iteration   5: 2129644.481 ops/s
# Warmup Iteration   6: 2128891.075 ops/s
# Warmup Iteration   7: 2086523.536 ops/s
# Warmup Iteration   8: 1841920.445 ops/s
# Warmup Iteration   9: 2128591.680 ops/s
# Warmup Iteration  10: 2131405.003 ops/s
# Warmup Iteration  11: 2132725.285 ops/s
# Warmup Iteration  12: 2129358.505 ops/s
# Warmup Iteration  13: 2133238.404 ops/s
# Warmup Iteration  14: 2130653.207 ops/s
# Warmup Iteration  15: 2096317.875 ops/s
# Warmup Iteration  16: 2134222.598 ops/s
# Warmup Iteration  17: 2130824.419 ops/s
# Warmup Iteration  18: 2131653.198 ops/s
# Warmup Iteration  19: 2126203.612 ops/s
# Warmup Iteration  20: 2129941.233 ops/s
# Warmup Iteration  21: 2128978.802 ops/s
# Warmup Iteration  22: 2130745.329 ops/s
# Warmup Iteration  23: 2132440.757 ops/s
# Warmup Iteration  24: 2129132.601 ops/s
# Warmup Iteration  25: 2130857.522 ops/s
# Warmup Iteration  26: 2127134.022 ops/s
# Warmup Iteration  27: 2130629.438 ops/s
# Warmup Iteration  28: 2131385.844 ops/s
# Warmup Iteration  29: 2130104.522 ops/s
# Warmup Iteration  30: 2129542.423 ops/s
Iteration   1: 2131991.510 ops/s
Iteration   2: 2125718.369 ops/s
Iteration   3: 2130143.206 ops/s
Iteration   4: 2131183.088 ops/s
Iteration   5: 2125315.162 ops/s
Iteration   6: 2132881.941 ops/s
Iteration   7: 2127365.743 ops/s
Iteration   8: 2130596.468 ops/s
Iteration   9: 2134066.482 ops/s
Iteration  10: 2126128.004 ops/s
Iteration  11: 2133085.046 ops/s
Iteration  12: 2126845.678 ops/s
Iteration  13: 2129672.870 ops/s
Iteration  14: 2129969.863 ops/s
Iteration  15: 2128776.302 ops/s
Iteration  16: 2129420.977 ops/s
Iteration  17: 2131492.880 ops/s
Iteration  18: 2134496.186 ops/s
Iteration  19: 2124308.087 ops/s
Iteration  20: 2128815.785 ops/s
Iteration  21: 2133802.239 ops/s
Iteration  22: 2129358.782 ops/s
Iteration  23: 2129280.970 ops/s
Iteration  24: 2125395.543 ops/s
Iteration  25: 2130403.445 ops/s
Iteration  26: 2132148.473 ops/s
Iteration  27: 2129647.018 ops/s
Iteration  28: 2132761.548 ops/s
Iteration  29: 2127373.138 ops/s
Iteration  30: 2135299.412 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_contains":
  2129924.807 ±(99.9%) 1978.750 ops/s [Average]
  (min, avg, max) = (2124308.087, 2129924.807, 2135299.412), stdev = 2961.700
  CI (99.9%): [2127946.057, 2131903.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_contains  thrpt   30  2129924.807 ± 1978.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1484345.311 ops/s
# Warmup Iteration   2: 2487457.024 ops/s
# Warmup Iteration   3: 2658759.598 ops/s
# Warmup Iteration   4: 2666065.841 ops/s
# Warmup Iteration   5: 2674449.654 ops/s
# Warmup Iteration   6: 2248624.521 ops/s
# Warmup Iteration   7: 2676766.535 ops/s
# Warmup Iteration   8: 2667826.806 ops/s
# Warmup Iteration   9: 2678527.330 ops/s
# Warmup Iteration  10: 2674051.204 ops/s
# Warmup Iteration  11: 2672320.239 ops/s
# Warmup Iteration  12: 2673389.027 ops/s
# Warmup Iteration  13: 2677361.741 ops/s
# Warmup Iteration  14: 2674661.551 ops/s
# Warmup Iteration  15: 2675296.904 ops/s
# Warmup Iteration  16: 2680070.048 ops/s
# Warmup Iteration  17: 2683069.652 ops/s
# Warmup Iteration  18: 2679705.691 ops/s
# Warmup Iteration  19: 2688023.502 ops/s
# Warmup Iteration  20: 2687113.606 ops/s
# Warmup Iteration  21: 2686367.417 ops/s
# Warmup Iteration  22: 2679258.933 ops/s
# Warmup Iteration  23: 2689999.985 ops/s
# Warmup Iteration  24: 2686029.336 ops/s
# Warmup Iteration  25: 2688472.366 ops/s
# Warmup Iteration  26: 2685102.492 ops/s
# Warmup Iteration  27: 2685316.627 ops/s
# Warmup Iteration  28: 2677550.000 ops/s
# Warmup Iteration  29: 2685790.285 ops/s
# Warmup Iteration  30: 2683784.089 ops/s
Iteration   1: 2682419.181 ops/s
Iteration   2: 2676706.329 ops/s
Iteration   3: 2691750.579 ops/s
Iteration   4: 2687671.998 ops/s
Iteration   5: 2687524.579 ops/s
Iteration   6: 2679649.809 ops/s
Iteration   7: 2685332.838 ops/s
Iteration   8: 2684402.967 ops/s
Iteration   9: 2687754.111 ops/s
Iteration  10: 2690045.829 ops/s
Iteration  11: 2686739.390 ops/s
Iteration  12: 2694959.380 ops/s
Iteration  13: 2686487.670 ops/s
Iteration  14: 2695852.796 ops/s
Iteration  15: 2691247.286 ops/s
Iteration  16: 2692738.543 ops/s
Iteration  17: 2688259.296 ops/s
Iteration  18: 2684338.583 ops/s
Iteration  19: 2683597.617 ops/s
Iteration  20: 2679069.497 ops/s
Iteration  21: 2691797.751 ops/s
Iteration  22: 2683935.552 ops/s
Iteration  23: 2686649.261 ops/s
Iteration  24: 2684193.698 ops/s
Iteration  25: 2695811.658 ops/s
Iteration  26: 2687736.666 ops/s
Iteration  27: 2688244.843 ops/s
Iteration  28: 2683042.073 ops/s
Iteration  29: 2688314.282 ops/s
Iteration  30: 2689419.554 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAll":
  2687189.787 ±(99.9%) 3143.798 ops/s [Average]
  (min, avg, max) = (2676706.329, 2687189.787, 2695852.796), stdev = 4705.490
  CI (99.9%): [2684045.989, 2690333.585] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_containsAll  thrpt   30  2687189.787 ± 3143.798  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2919407.770 ops/s
# Warmup Iteration   2: 5960390.379 ops/s
# Warmup Iteration   3: 6214208.151 ops/s
# Warmup Iteration   4: 6243448.906 ops/s
# Warmup Iteration   5: 5249256.941 ops/s
# Warmup Iteration   6: 6251878.615 ops/s
# Warmup Iteration   7: 6262340.420 ops/s
# Warmup Iteration   8: 6255358.842 ops/s
# Warmup Iteration   9: 6254125.852 ops/s
# Warmup Iteration  10: 6235582.848 ops/s
# Warmup Iteration  11: 6243393.236 ops/s
# Warmup Iteration  12: 6257308.724 ops/s
# Warmup Iteration  13: 6256300.733 ops/s
# Warmup Iteration  14: 6241175.270 ops/s
# Warmup Iteration  15: 6251905.211 ops/s
# Warmup Iteration  16: 6243944.603 ops/s
# Warmup Iteration  17: 6256659.041 ops/s
# Warmup Iteration  18: 6250593.223 ops/s
# Warmup Iteration  19: 6242575.169 ops/s
# Warmup Iteration  20: 6265723.501 ops/s
# Warmup Iteration  21: 6246925.297 ops/s
# Warmup Iteration  22: 6245836.868 ops/s
# Warmup Iteration  23: 6245453.252 ops/s
# Warmup Iteration  24: 6245112.317 ops/s
# Warmup Iteration  25: 6240474.202 ops/s
# Warmup Iteration  26: 6254990.286 ops/s
# Warmup Iteration  27: 6245484.461 ops/s
# Warmup Iteration  28: 6237349.795 ops/s
# Warmup Iteration  29: 6226531.576 ops/s
# Warmup Iteration  30: 6233834.654 ops/s
Iteration   1: 6268232.055 ops/s
Iteration   2: 6248169.036 ops/s
Iteration   3: 6255138.335 ops/s
Iteration   4: 6255726.139 ops/s
Iteration   5: 6250636.601 ops/s
Iteration   6: 6262974.415 ops/s
Iteration   7: 6257575.689 ops/s
Iteration   8: 6255646.759 ops/s
Iteration   9: 6247283.337 ops/s
Iteration  10: 6250686.770 ops/s
Iteration  11: 6252830.195 ops/s
Iteration  12: 6246245.321 ops/s
Iteration  13: 6268368.467 ops/s
Iteration  14: 6259496.082 ops/s
Iteration  15: 6254532.196 ops/s
Iteration  16: 6252982.313 ops/s
Iteration  17: 6250196.807 ops/s
Iteration  18: 6260863.860 ops/s
Iteration  19: 6229232.559 ops/s
Iteration  20: 6241632.948 ops/s
Iteration  21: 6250517.409 ops/s
Iteration  22: 6246381.454 ops/s
Iteration  23: 6262803.868 ops/s
Iteration  24: 6237797.110 ops/s
Iteration  25: 6260710.165 ops/s
Iteration  26: 6241597.447 ops/s
Iteration  27: 6242893.342 ops/s
Iteration  28: 6242982.439 ops/s
Iteration  29: 6249010.214 ops/s
Iteration  30: 6232249.863 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllArray":
  6251179.773 ±(99.9%) 6380.463 ops/s [Average]
  (min, avg, max) = (6229232.559, 6251179.773, 6268368.467), stdev = 9549.977
  CI (99.9%): [6244799.311, 6257560.236] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_containsAllArray  thrpt   30  6251179.773 ± 6380.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2876203.016 ops/s
# Warmup Iteration   2: 4625017.216 ops/s
# Warmup Iteration   3: 5244836.175 ops/s
# Warmup Iteration   4: 5269026.244 ops/s
# Warmup Iteration   5: 5266592.959 ops/s
# Warmup Iteration   6: 4454816.715 ops/s
# Warmup Iteration   7: 5217955.091 ops/s
# Warmup Iteration   8: 5253334.079 ops/s
# Warmup Iteration   9: 5266109.199 ops/s
# Warmup Iteration  10: 5274061.686 ops/s
# Warmup Iteration  11: 5267712.890 ops/s
# Warmup Iteration  12: 5261142.088 ops/s
# Warmup Iteration  13: 5276275.320 ops/s
# Warmup Iteration  14: 5269712.231 ops/s
# Warmup Iteration  15: 5275297.197 ops/s
# Warmup Iteration  16: 5271591.895 ops/s
# Warmup Iteration  17: 5265378.552 ops/s
# Warmup Iteration  18: 5269482.213 ops/s
# Warmup Iteration  19: 5272946.632 ops/s
# Warmup Iteration  20: 5268968.134 ops/s
# Warmup Iteration  21: 5268653.366 ops/s
# Warmup Iteration  22: 5260998.326 ops/s
# Warmup Iteration  23: 5260755.662 ops/s
# Warmup Iteration  24: 5264364.283 ops/s
# Warmup Iteration  25: 5259065.108 ops/s
# Warmup Iteration  26: 5264249.522 ops/s
# Warmup Iteration  27: 5266143.164 ops/s
# Warmup Iteration  28: 5266451.393 ops/s
# Warmup Iteration  29: 5271470.406 ops/s
# Warmup Iteration  30: 5273556.835 ops/s
Iteration   1: 5255235.413 ops/s
Iteration   2: 5271058.532 ops/s
Iteration   3: 5270875.748 ops/s
Iteration   4: 5265921.037 ops/s
Iteration   5: 5258635.439 ops/s
Iteration   6: 5271293.919 ops/s
Iteration   7: 5265696.435 ops/s
Iteration   8: 5272226.976 ops/s
Iteration   9: 5253877.146 ops/s
Iteration  10: 5273543.230 ops/s
Iteration  11: 5257202.695 ops/s
Iteration  12: 5272032.612 ops/s
Iteration  13: 5257220.933 ops/s
Iteration  14: 5271774.570 ops/s
Iteration  15: 5265033.578 ops/s
Iteration  16: 5261298.271 ops/s
Iteration  17: 5270738.922 ops/s
Iteration  18: 5266162.463 ops/s
Iteration  19: 5263817.619 ops/s
Iteration  20: 5260412.000 ops/s
Iteration  21: 5274971.208 ops/s
Iteration  22: 5264886.044 ops/s
Iteration  23: 5267405.143 ops/s
Iteration  24: 5273194.094 ops/s
Iteration  25: 5280858.575 ops/s
Iteration  26: 5263505.244 ops/s
Iteration  27: 5261997.004 ops/s
Iteration  28: 5263734.561 ops/s
Iteration  29: 5277688.184 ops/s
Iteration  30: 5253341.872 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_containsAllIterable":
  5266187.982 ±(99.9%) 4765.381 ops/s [Average]
  (min, avg, max) = (5253341.872, 5266187.982, 5280858.575), stdev = 7132.599
  CI (99.9%): [5261422.601, 5270953.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_containsAllIterable  thrpt   30  5266187.982 ± 4765.381  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3551496.031 ops/s
# Warmup Iteration   2: 6491648.996 ops/s
# Warmup Iteration   3: 7443339.853 ops/s
# Warmup Iteration   4: 7468613.849 ops/s
# Warmup Iteration   5: 6298909.052 ops/s
# Warmup Iteration   6: 7371264.899 ops/s
# Warmup Iteration   7: 7477245.723 ops/s
# Warmup Iteration   8: 7477627.057 ops/s
# Warmup Iteration   9: 7470760.323 ops/s
# Warmup Iteration  10: 7493338.580 ops/s
# Warmup Iteration  11: 7470784.722 ops/s
# Warmup Iteration  12: 7479955.691 ops/s
# Warmup Iteration  13: 7491929.508 ops/s
# Warmup Iteration  14: 7477759.385 ops/s
# Warmup Iteration  15: 7479295.859 ops/s
# Warmup Iteration  16: 7471692.908 ops/s
# Warmup Iteration  17: 7481027.860 ops/s
# Warmup Iteration  18: 7477676.902 ops/s
# Warmup Iteration  19: 7476158.166 ops/s
# Warmup Iteration  20: 7478761.441 ops/s
# Warmup Iteration  21: 7469713.684 ops/s
# Warmup Iteration  22: 7465963.374 ops/s
# Warmup Iteration  23: 7476503.674 ops/s
# Warmup Iteration  24: 7487872.557 ops/s
# Warmup Iteration  25: 7489479.228 ops/s
# Warmup Iteration  26: 7451636.409 ops/s
# Warmup Iteration  27: 7482533.566 ops/s
# Warmup Iteration  28: 7474170.285 ops/s
# Warmup Iteration  29: 7475405.686 ops/s
# Warmup Iteration  30: 7476157.200 ops/s
Iteration   1: 7466184.408 ops/s
Iteration   2: 7493033.352 ops/s
Iteration   3: 7469830.546 ops/s
Iteration   4: 7454216.178 ops/s
Iteration   5: 7496558.203 ops/s
Iteration   6: 7476169.986 ops/s
Iteration   7: 7486834.805 ops/s
Iteration   8: 7476799.335 ops/s
Iteration   9: 7479391.699 ops/s
Iteration  10: 7488974.961 ops/s
Iteration  11: 7479883.426 ops/s
Iteration  12: 7472168.002 ops/s
Iteration  13: 7487114.373 ops/s
Iteration  14: 7482835.735 ops/s
Iteration  15: 7495445.173 ops/s
Iteration  16: 7488575.398 ops/s
Iteration  17: 7478037.366 ops/s
Iteration  18: 7476940.561 ops/s
Iteration  19: 7495102.202 ops/s
Iteration  20: 7471185.392 ops/s
Iteration  21: 7480203.926 ops/s
Iteration  22: 7500034.940 ops/s
Iteration  23: 7466943.115 ops/s
Iteration  24: 7490474.305 ops/s
Iteration  25: 7494303.991 ops/s
Iteration  26: 7475157.628 ops/s
Iteration  27: 7486568.861 ops/s
Iteration  28: 7478412.678 ops/s
Iteration  29: 7494083.179 ops/s
Iteration  30: 7490889.421 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_corresponds":
  7482411.771 ±(99.9%) 7239.027 ops/s [Average]
  (min, avg, max) = (7454216.178, 7482411.771, 7500034.940), stdev = 10835.036
  CI (99.9%): [7475172.744, 7489650.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_corresponds  thrpt   30  7482411.771 ± 7239.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10636749.812 ops/s
# Warmup Iteration   2: 22400444.855 ops/s
# Warmup Iteration   3: 22813408.422 ops/s
# Warmup Iteration   4: 22185583.974 ops/s
# Warmup Iteration   5: 19896395.263 ops/s
# Warmup Iteration   6: 22921293.314 ops/s
# Warmup Iteration   7: 22913339.003 ops/s
# Warmup Iteration   8: 22928572.593 ops/s
# Warmup Iteration   9: 22916546.863 ops/s
# Warmup Iteration  10: 22920964.207 ops/s
# Warmup Iteration  11: 22857678.047 ops/s
# Warmup Iteration  12: 22915900.947 ops/s
# Warmup Iteration  13: 22923652.960 ops/s
# Warmup Iteration  14: 22888091.449 ops/s
# Warmup Iteration  15: 22904893.944 ops/s
# Warmup Iteration  16: 22871504.876 ops/s
# Warmup Iteration  17: 22886974.219 ops/s
# Warmup Iteration  18: 22885410.065 ops/s
# Warmup Iteration  19: 22881289.322 ops/s
# Warmup Iteration  20: 22864970.518 ops/s
# Warmup Iteration  21: 22873310.632 ops/s
# Warmup Iteration  22: 22866579.605 ops/s
# Warmup Iteration  23: 22860592.019 ops/s
# Warmup Iteration  24: 22871987.503 ops/s
# Warmup Iteration  25: 22929147.612 ops/s
# Warmup Iteration  26: 22851354.476 ops/s
# Warmup Iteration  27: 22849035.314 ops/s
# Warmup Iteration  28: 22878617.992 ops/s
# Warmup Iteration  29: 22870651.699 ops/s
# Warmup Iteration  30: 22912775.346 ops/s
Iteration   1: 22870369.259 ops/s
Iteration   2: 22848353.604 ops/s
Iteration   3: 22930459.641 ops/s
Iteration   4: 22817819.534 ops/s
Iteration   5: 22868873.620 ops/s
Iteration   6: 22873755.813 ops/s
Iteration   7: 22881927.928 ops/s
Iteration   8: 22906826.882 ops/s
Iteration   9: 22878624.696 ops/s
Iteration  10: 22874622.514 ops/s
Iteration  11: 22839515.121 ops/s
Iteration  12: 22915033.059 ops/s
Iteration  13: 22883118.008 ops/s
Iteration  14: 22866442.788 ops/s
Iteration  15: 22860636.324 ops/s
Iteration  16: 22941147.262 ops/s
Iteration  17: 22882927.938 ops/s
Iteration  18: 22858039.263 ops/s
Iteration  19: 22821464.009 ops/s
Iteration  20: 22939923.826 ops/s
Iteration  21: 22831069.151 ops/s
Iteration  22: 22860140.734 ops/s
Iteration  23: 22852675.059 ops/s
Iteration  24: 22862993.943 ops/s
Iteration  25: 22862197.818 ops/s
Iteration  26: 22870629.259 ops/s
Iteration  27: 22855384.681 ops/s
Iteration  28: 22842491.259 ops/s
Iteration  29: 22903020.329 ops/s
Iteration  30: 22820835.887 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_count":
  22870710.640 ±(99.9%) 21769.646 ops/s [Average]
  (min, avg, max) = (22817819.534, 22870710.640, 22941147.262), stdev = 32583.784
  CI (99.9%): [22848940.994, 22892480.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_count  thrpt   30  22870710.640 ± 21769.646  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495523.286 ops/s
# Warmup Iteration   2: 986021.371 ops/s
# Warmup Iteration   3: 1109666.630 ops/s
# Warmup Iteration   4: 1117916.850 ops/s
# Warmup Iteration   5: 957607.135 ops/s
# Warmup Iteration   6: 1080066.362 ops/s
# Warmup Iteration   7: 1117286.901 ops/s
# Warmup Iteration   8: 1116675.170 ops/s
# Warmup Iteration   9: 1114884.639 ops/s
# Warmup Iteration  10: 1115419.265 ops/s
# Warmup Iteration  11: 1114892.201 ops/s
# Warmup Iteration  12: 1116477.832 ops/s
# Warmup Iteration  13: 1115551.690 ops/s
# Warmup Iteration  14: 1116313.725 ops/s
# Warmup Iteration  15: 1116721.376 ops/s
# Warmup Iteration  16: 1115045.624 ops/s
# Warmup Iteration  17: 1114854.884 ops/s
# Warmup Iteration  18: 1115793.751 ops/s
# Warmup Iteration  19: 1116920.786 ops/s
# Warmup Iteration  20: 1115516.822 ops/s
# Warmup Iteration  21: 1116008.960 ops/s
# Warmup Iteration  22: 1114859.198 ops/s
# Warmup Iteration  23: 1116588.471 ops/s
# Warmup Iteration  24: 1116641.345 ops/s
# Warmup Iteration  25: 1115101.470 ops/s
# Warmup Iteration  26: 1115747.987 ops/s
# Warmup Iteration  27: 1116047.252 ops/s
# Warmup Iteration  28: 1116610.793 ops/s
# Warmup Iteration  29: 1116335.687 ops/s
# Warmup Iteration  30: 1114316.191 ops/s
Iteration   1: 1115731.345 ops/s
Iteration   2: 1117400.006 ops/s
Iteration   3: 1114844.825 ops/s
Iteration   4: 1117450.259 ops/s
Iteration   5: 1115212.076 ops/s
Iteration   6: 1116599.352 ops/s
Iteration   7: 1116909.033 ops/s
Iteration   8: 1116402.918 ops/s
Iteration   9: 1116289.620 ops/s
Iteration  10: 1112996.160 ops/s
Iteration  11: 1114903.575 ops/s
Iteration  12: 1114687.856 ops/s
Iteration  13: 1115609.226 ops/s
Iteration  14: 1115387.235 ops/s
Iteration  15: 1117045.856 ops/s
Iteration  16: 1113968.088 ops/s
Iteration  17: 1115281.872 ops/s
Iteration  18: 1120434.884 ops/s
Iteration  19: 1115626.800 ops/s
Iteration  20: 1116224.824 ops/s
Iteration  21: 1117522.035 ops/s
Iteration  22: 1116547.489 ops/s
Iteration  23: 1108584.705 ops/s
Iteration  24: 1115388.214 ops/s
Iteration  25: 1117010.848 ops/s
Iteration  26: 1117501.245 ops/s
Iteration  27: 1114374.166 ops/s
Iteration  28: 1114444.225 ops/s
Iteration  29: 1116157.606 ops/s
Iteration  30: 1117304.172 ops/s


Result "org.eclipse.collections.impl.list.immutable.ImmutableNonupletonListTest._Benchmark.benchmark_countBy":
  1115794.684 ±(99.9%) 1315.161 ops/s [Average]
  (min, avg, max) = (1108584.705, 1115794.684, 1120434.884), stdev = 1968.471
  CI (99.9%): [1114479.523, 1117109.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableNonupletonListTest._Benchmark.benchmark_countBy  thrpt   30  1115794.684 ± 1315.161  ops/s
----------------------------------------
