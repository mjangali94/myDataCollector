=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2542309.211 ops/s
# Warmup Iteration   2: 5462801.881 ops/s
# Warmup Iteration   3: 5196708.931 ops/s
# Warmup Iteration   4: 5263290.465 ops/s
# Warmup Iteration   5: 5699385.077 ops/s
# Warmup Iteration   6: 5669910.220 ops/s
# Warmup Iteration   7: 5722012.300 ops/s
# Warmup Iteration   8: 5677186.004 ops/s
# Warmup Iteration   9: 5707224.608 ops/s
# Warmup Iteration  10: 5659417.617 ops/s
# Warmup Iteration  11: 5690249.164 ops/s
# Warmup Iteration  12: 5754208.488 ops/s
# Warmup Iteration  13: 5750450.287 ops/s
# Warmup Iteration  14: 5744816.681 ops/s
# Warmup Iteration  15: 5808872.383 ops/s
# Warmup Iteration  16: 5674838.503 ops/s
# Warmup Iteration  17: 5750961.152 ops/s
# Warmup Iteration  18: 5662857.038 ops/s
# Warmup Iteration  19: 5721316.069 ops/s
# Warmup Iteration  20: 5702176.007 ops/s
# Warmup Iteration  21: 5704482.712 ops/s
# Warmup Iteration  22: 5721353.886 ops/s
# Warmup Iteration  23: 5787633.628 ops/s
# Warmup Iteration  24: 5812646.806 ops/s
# Warmup Iteration  25: 5639549.279 ops/s
# Warmup Iteration  26: 5750967.262 ops/s
# Warmup Iteration  27: 5705991.714 ops/s
# Warmup Iteration  28: 5549837.297 ops/s
# Warmup Iteration  29: 5675973.711 ops/s
# Warmup Iteration  30: 5730580.201 ops/s
Iteration   1: 5758361.912 ops/s
Iteration   2: 5556501.439 ops/s
Iteration   3: 5703195.822 ops/s
Iteration   4: 5717595.939 ops/s
Iteration   5: 5804760.884 ops/s
Iteration   6: 5725942.643 ops/s
Iteration   7: 5730402.839 ops/s
Iteration   8: 5820219.507 ops/s
Iteration   9: 5728711.121 ops/s
Iteration  10: 5697692.561 ops/s
Iteration  11: 5700146.273 ops/s
Iteration  12: 5741390.644 ops/s
Iteration  13: 5896200.996 ops/s
Iteration  14: 5673815.321 ops/s
Iteration  15: 5718535.411 ops/s
Iteration  16: 5710896.758 ops/s
Iteration  17: 5765879.644 ops/s
Iteration  18: 5738239.246 ops/s
Iteration  19: 5695152.736 ops/s
Iteration  20: 5735310.234 ops/s
Iteration  21: 5653284.624 ops/s
Iteration  22: 5690632.453 ops/s
Iteration  23: 5816857.331 ops/s
Iteration  24: 5698841.038 ops/s
Iteration  25: 5708130.007 ops/s
Iteration  26: 5757233.308 ops/s
Iteration  27: 5696645.298 ops/s
Iteration  28: 5703229.350 ops/s
Iteration  29: 5764779.144 ops/s
Iteration  30: 5735999.624 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfyWith":
  5728152.804 ±(99.9%) 39546.803 ops/s [Average]
  (min, avg, max) = (5556501.439, 5728152.804, 5896200.996), stdev = 59191.798
  CI (99.9%): [5688606.001, 5767699.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  5728152.804 ± 39546.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1712086.915 ops/s
# Warmup Iteration   2: 3908266.588 ops/s
# Warmup Iteration   3: 4001460.613 ops/s
# Warmup Iteration   4: 3322328.280 ops/s
# Warmup Iteration   5: 4012187.501 ops/s
# Warmup Iteration   6: 4016014.092 ops/s
# Warmup Iteration   7: 4024101.116 ops/s
# Warmup Iteration   8: 4002334.066 ops/s
# Warmup Iteration   9: 3971337.012 ops/s
# Warmup Iteration  10: 4003393.047 ops/s
# Warmup Iteration  11: 4003446.741 ops/s
# Warmup Iteration  12: 4015020.895 ops/s
# Warmup Iteration  13: 4016671.473 ops/s
# Warmup Iteration  14: 4005255.682 ops/s
# Warmup Iteration  15: 4017688.155 ops/s
# Warmup Iteration  16: 4023385.222 ops/s
# Warmup Iteration  17: 4011826.745 ops/s
# Warmup Iteration  18: 4025830.353 ops/s
# Warmup Iteration  19: 4018778.564 ops/s
# Warmup Iteration  20: 4020820.646 ops/s
# Warmup Iteration  21: 4018687.627 ops/s
# Warmup Iteration  22: 4012268.323 ops/s
# Warmup Iteration  23: 4011298.916 ops/s
# Warmup Iteration  24: 4013345.276 ops/s
# Warmup Iteration  25: 4001425.507 ops/s
# Warmup Iteration  26: 3998245.114 ops/s
# Warmup Iteration  27: 4035230.964 ops/s
# Warmup Iteration  28: 4009078.807 ops/s
# Warmup Iteration  29: 3992936.445 ops/s
# Warmup Iteration  30: 4008707.549 ops/s
Iteration   1: 4034937.648 ops/s
Iteration   2: 4013308.738 ops/s
Iteration   3: 4012036.400 ops/s
Iteration   4: 4016994.466 ops/s
Iteration   5: 4018328.963 ops/s
Iteration   6: 4019035.815 ops/s
Iteration   7: 4009368.608 ops/s
Iteration   8: 4016249.674 ops/s
Iteration   9: 4026879.082 ops/s
Iteration  10: 4025391.930 ops/s
Iteration  11: 4007891.953 ops/s
Iteration  12: 3995139.903 ops/s
Iteration  13: 3978384.808 ops/s
Iteration  14: 4018761.311 ops/s
Iteration  15: 4032171.294 ops/s
Iteration  16: 4017967.233 ops/s
Iteration  17: 4014027.603 ops/s
Iteration  18: 3972581.001 ops/s
Iteration  19: 4018589.638 ops/s
Iteration  20: 4010775.763 ops/s
Iteration  21: 4012164.020 ops/s
Iteration  22: 4018745.248 ops/s
Iteration  23: 4022838.806 ops/s
Iteration  24: 4006729.712 ops/s
Iteration  25: 4030046.405 ops/s
Iteration  26: 4014283.884 ops/s
Iteration  27: 4010518.001 ops/s
Iteration  28: 4032278.254 ops/s
Iteration  29: 4036573.472 ops/s
Iteration  30: 4023195.117 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfy":
  4015539.825 ±(99.9%) 9512.376 ops/s [Average]
  (min, avg, max) = (3972581.001, 4015539.825, 4036573.472), stdev = 14237.677
  CI (99.9%): [4006027.449, 4025052.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfy  thrpt   30  4015539.825 ± 9512.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2367364.446 ops/s
# Warmup Iteration   2: 4943554.566 ops/s
# Warmup Iteration   3: 4830591.858 ops/s
# Warmup Iteration   4: 4094242.648 ops/s
# Warmup Iteration   5: 5083877.093 ops/s
# Warmup Iteration   6: 4839351.972 ops/s
# Warmup Iteration   7: 4943683.859 ops/s
# Warmup Iteration   8: 4974679.136 ops/s
# Warmup Iteration   9: 4901986.588 ops/s
# Warmup Iteration  10: 4942104.202 ops/s
# Warmup Iteration  11: 4881048.869 ops/s
# Warmup Iteration  12: 4923511.627 ops/s
# Warmup Iteration  13: 4953888.020 ops/s
# Warmup Iteration  14: 4904234.590 ops/s
# Warmup Iteration  15: 4785461.095 ops/s
# Warmup Iteration  16: 5067921.578 ops/s
# Warmup Iteration  17: 5076814.068 ops/s
# Warmup Iteration  18: 4868897.697 ops/s
# Warmup Iteration  19: 4760067.386 ops/s
# Warmup Iteration  20: 4956067.895 ops/s
# Warmup Iteration  21: 4948259.321 ops/s
# Warmup Iteration  22: 4937571.982 ops/s
# Warmup Iteration  23: 5092636.144 ops/s
# Warmup Iteration  24: 4888406.483 ops/s
# Warmup Iteration  25: 4869522.864 ops/s
# Warmup Iteration  26: 4948419.946 ops/s
# Warmup Iteration  27: 4885043.968 ops/s
# Warmup Iteration  28: 5040092.552 ops/s
# Warmup Iteration  29: 5049242.235 ops/s
# Warmup Iteration  30: 4941088.283 ops/s
Iteration   1: 5007563.245 ops/s
Iteration   2: 5069150.306 ops/s
Iteration   3: 4958809.969 ops/s
Iteration   4: 4873169.251 ops/s
Iteration   5: 4955390.724 ops/s
Iteration   6: 4968296.308 ops/s
Iteration   7: 4883440.012 ops/s
Iteration   8: 4982537.775 ops/s
Iteration   9: 4957525.401 ops/s
Iteration  10: 5016988.002 ops/s
Iteration  11: 4932582.938 ops/s
Iteration  12: 4938625.439 ops/s
Iteration  13: 4960911.453 ops/s
Iteration  14: 5013052.060 ops/s
Iteration  15: 5315986.771 ops/s
Iteration  16: 4985584.982 ops/s
Iteration  17: 4925141.916 ops/s
Iteration  18: 4750026.409 ops/s
Iteration  19: 4838272.717 ops/s
Iteration  20: 4954521.171 ops/s
Iteration  21: 5049594.408 ops/s
Iteration  22: 4925366.969 ops/s
Iteration  23: 4884507.813 ops/s
Iteration  24: 5236787.544 ops/s
Iteration  25: 4918717.075 ops/s
Iteration  26: 4913523.223 ops/s
Iteration  27: 4900746.689 ops/s
Iteration  28: 4930072.282 ops/s
Iteration  29: 4932014.942 ops/s
Iteration  30: 4932977.822 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfyWith":
  4963729.521 ±(99.9%) 70607.411 ops/s [Average]
  (min, avg, max) = (4750026.409, 4963729.521, 5315986.771), stdev = 105681.857
  CI (99.9%): [4893122.110, 5034336.932] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  4963729.521 ± 70607.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 992682.936 ops/s
# Warmup Iteration   2: 2193263.962 ops/s
# Warmup Iteration   3: 2270429.503 ops/s
# Warmup Iteration   4: 2075504.772 ops/s
# Warmup Iteration   5: 2030694.731 ops/s
# Warmup Iteration   6: 2257589.581 ops/s
# Warmup Iteration   7: 2240966.671 ops/s
# Warmup Iteration   8: 2236699.697 ops/s
# Warmup Iteration   9: 2243438.424 ops/s
# Warmup Iteration  10: 2251097.763 ops/s
# Warmup Iteration  11: 2247185.871 ops/s
# Warmup Iteration  12: 2246582.364 ops/s
# Warmup Iteration  13: 2256083.375 ops/s
# Warmup Iteration  14: 2259904.713 ops/s
# Warmup Iteration  15: 2245540.128 ops/s
# Warmup Iteration  16: 2255153.139 ops/s
# Warmup Iteration  17: 2263955.022 ops/s
# Warmup Iteration  18: 2263412.027 ops/s
# Warmup Iteration  19: 2266132.508 ops/s
# Warmup Iteration  20: 2267835.496 ops/s
# Warmup Iteration  21: 2254165.504 ops/s
# Warmup Iteration  22: 2260249.355 ops/s
# Warmup Iteration  23: 2270056.092 ops/s
# Warmup Iteration  24: 2264741.824 ops/s
# Warmup Iteration  25: 2263308.599 ops/s
# Warmup Iteration  26: 2268899.771 ops/s
# Warmup Iteration  27: 2263427.830 ops/s
# Warmup Iteration  28: 2268606.396 ops/s
# Warmup Iteration  29: 2250127.037 ops/s
# Warmup Iteration  30: 2269176.299 ops/s
Iteration   1: 2271841.634 ops/s
Iteration   2: 2277624.527 ops/s
Iteration   3: 2260682.179 ops/s
Iteration   4: 2255581.358 ops/s
Iteration   5: 2267304.606 ops/s
Iteration   6: 2261054.308 ops/s
Iteration   7: 2281117.974 ops/s
Iteration   8: 2260951.632 ops/s
Iteration   9: 2262813.022 ops/s
Iteration  10: 2246775.043 ops/s
Iteration  11: 2269652.856 ops/s
Iteration  12: 2249872.103 ops/s
Iteration  13: 2265558.654 ops/s
Iteration  14: 2271975.927 ops/s
Iteration  15: 2234093.144 ops/s
Iteration  16: 2256928.600 ops/s
Iteration  17: 2260673.924 ops/s
Iteration  18: 2261191.349 ops/s
Iteration  19: 2270466.685 ops/s
Iteration  20: 2246379.839 ops/s
Iteration  21: 2268454.988 ops/s
Iteration  22: 2266337.596 ops/s
Iteration  23: 2264528.023 ops/s
Iteration  24: 2269049.782 ops/s
Iteration  25: 2267810.355 ops/s
Iteration  26: 2259044.870 ops/s
Iteration  27: 2279539.631 ops/s
Iteration  28: 2271217.588 ops/s
Iteration  29: 2274885.679 ops/s
Iteration  30: 2258858.034 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_appendString":
  2263742.197 ±(99.9%) 6895.366 ops/s [Average]
  (min, avg, max) = (2234093.144, 2263742.197, 2281117.974), stdev = 10320.660
  CI (99.9%): [2256846.831, 2270637.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_appendString  thrpt   30  2263742.197 ± 6895.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1300405.753 ops/s
# Warmup Iteration   2: 3237127.179 ops/s
# Warmup Iteration   3: 3275274.271 ops/s
# Warmup Iteration   4: 2696535.684 ops/s
# Warmup Iteration   5: 3274754.369 ops/s
# Warmup Iteration   6: 3287133.657 ops/s
# Warmup Iteration   7: 3302306.082 ops/s
# Warmup Iteration   8: 3292336.068 ops/s
# Warmup Iteration   9: 3268280.325 ops/s
# Warmup Iteration  10: 3285909.798 ops/s
# Warmup Iteration  11: 3293675.453 ops/s
# Warmup Iteration  12: 3291283.606 ops/s
# Warmup Iteration  13: 3284372.688 ops/s
# Warmup Iteration  14: 3299637.184 ops/s
# Warmup Iteration  15: 3286537.369 ops/s
# Warmup Iteration  16: 3270225.918 ops/s
# Warmup Iteration  17: 3265706.772 ops/s
# Warmup Iteration  18: 3281037.139 ops/s
# Warmup Iteration  19: 3292192.087 ops/s
# Warmup Iteration  20: 3299291.904 ops/s
# Warmup Iteration  21: 3295302.532 ops/s
# Warmup Iteration  22: 3287581.774 ops/s
# Warmup Iteration  23: 3272681.158 ops/s
# Warmup Iteration  24: 3282937.812 ops/s
# Warmup Iteration  25: 3293421.356 ops/s
# Warmup Iteration  26: 3293955.713 ops/s
# Warmup Iteration  27: 3280179.203 ops/s
# Warmup Iteration  28: 3280319.590 ops/s
# Warmup Iteration  29: 3284471.571 ops/s
# Warmup Iteration  30: 3295281.235 ops/s
Iteration   1: 3284709.081 ops/s
Iteration   2: 3299855.792 ops/s
Iteration   3: 3269392.671 ops/s
Iteration   4: 3269254.856 ops/s
Iteration   5: 3261482.337 ops/s
Iteration   6: 3278255.302 ops/s
Iteration   7: 3318002.082 ops/s
Iteration   8: 3266653.732 ops/s
Iteration   9: 3292718.273 ops/s
Iteration  10: 3292213.330 ops/s
Iteration  11: 3284709.052 ops/s
Iteration  12: 3293152.708 ops/s
Iteration  13: 3285024.703 ops/s
Iteration  14: 3281531.340 ops/s
Iteration  15: 3296197.112 ops/s
Iteration  16: 3275578.810 ops/s
Iteration  17: 3234638.800 ops/s
Iteration  18: 3279450.405 ops/s
Iteration  19: 3283028.535 ops/s
Iteration  20: 3302318.895 ops/s
Iteration  21: 3305440.064 ops/s
Iteration  22: 3295511.495 ops/s
Iteration  23: 3280792.172 ops/s
Iteration  24: 3293063.026 ops/s
Iteration  25: 3298652.856 ops/s
Iteration  26: 3308486.984 ops/s
Iteration  27: 3314745.763 ops/s
Iteration  28: 3284805.127 ops/s
Iteration  29: 3283191.934 ops/s
Iteration  30: 3295393.673 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asLazy":
  3286941.697 ±(99.9%) 11264.608 ops/s [Average]
  (min, avg, max) = (3234638.800, 3286941.697, 3318002.082), stdev = 16860.337
  CI (99.9%): [3275677.089, 3298206.305] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_asLazy  thrpt   30  3286941.697 ± 11264.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3105334.975 ops/s
# Warmup Iteration   2: 6798072.952 ops/s
# Warmup Iteration   3: 5724024.199 ops/s
# Warmup Iteration   4: 6906141.974 ops/s
# Warmup Iteration   5: 6919108.908 ops/s
# Warmup Iteration   6: 6919928.402 ops/s
# Warmup Iteration   7: 6859817.189 ops/s
# Warmup Iteration   8: 6908860.955 ops/s
# Warmup Iteration   9: 6946805.752 ops/s
# Warmup Iteration  10: 6949136.411 ops/s
# Warmup Iteration  11: 6927073.027 ops/s
# Warmup Iteration  12: 6925343.826 ops/s
# Warmup Iteration  13: 6901365.660 ops/s
# Warmup Iteration  14: 6915042.943 ops/s
# Warmup Iteration  15: 6904460.126 ops/s
# Warmup Iteration  16: 6857853.980 ops/s
# Warmup Iteration  17: 6927574.381 ops/s
# Warmup Iteration  18: 6912183.456 ops/s
# Warmup Iteration  19: 6913591.579 ops/s
# Warmup Iteration  20: 6893037.693 ops/s
# Warmup Iteration  21: 6899215.862 ops/s
# Warmup Iteration  22: 6862476.437 ops/s
# Warmup Iteration  23: 6837011.604 ops/s
# Warmup Iteration  24: 6849306.785 ops/s
# Warmup Iteration  25: 6871663.478 ops/s
# Warmup Iteration  26: 6915337.757 ops/s
# Warmup Iteration  27: 6876325.708 ops/s
# Warmup Iteration  28: 6827529.703 ops/s
# Warmup Iteration  29: 6864272.343 ops/s
# Warmup Iteration  30: 6883161.163 ops/s
Iteration   1: 6841292.651 ops/s
Iteration   2: 6843050.677 ops/s
Iteration   3: 6845347.282 ops/s
Iteration   4: 6873441.214 ops/s
Iteration   5: 6877121.849 ops/s
Iteration   6: 6859713.831 ops/s
Iteration   7: 6860549.996 ops/s
Iteration   8: 6848996.636 ops/s
Iteration   9: 6857895.187 ops/s
Iteration  10: 6893093.539 ops/s
Iteration  11: 6890862.856 ops/s
Iteration  12: 6934128.189 ops/s
Iteration  13: 6783266.659 ops/s
Iteration  14: 6810261.319 ops/s
Iteration  15: 6878339.809 ops/s
Iteration  16: 6896364.055 ops/s
Iteration  17: 6781780.054 ops/s
Iteration  18: 6852575.446 ops/s
Iteration  19: 6880848.138 ops/s
Iteration  20: 6912066.862 ops/s
Iteration  21: 6876198.692 ops/s
Iteration  22: 6861245.495 ops/s
Iteration  23: 6866649.017 ops/s
Iteration  24: 6816363.845 ops/s
Iteration  25: 6867111.951 ops/s
Iteration  26: 6889429.028 ops/s
Iteration  27: 6911086.400 ops/s
Iteration  28: 6857990.673 ops/s
Iteration  29: 6870727.032 ops/s
Iteration  30: 6803369.506 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asSynchronized":
  6861372.263 ±(99.9%) 23974.644 ops/s [Average]
  (min, avg, max) = (6781780.054, 6861372.263, 6934128.189), stdev = 35884.121
  CI (99.9%): [6837397.619, 6885346.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_asSynchronized  thrpt   30  6861372.263 ± 23974.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505970.621 ops/s
# Warmup Iteration   2: 601604.280 ops/s
# Warmup Iteration   3: 754079.469 ops/s
# Warmup Iteration   4: 754441.017 ops/s
# Warmup Iteration   5: 748487.461 ops/s
# Warmup Iteration   6: 752548.452 ops/s
# Warmup Iteration   7: 746401.325 ops/s
# Warmup Iteration   8: 749812.046 ops/s
# Warmup Iteration   9: 671441.658 ops/s
# Warmup Iteration  10: 705057.579 ops/s
# Warmup Iteration  11: 749063.180 ops/s
# Warmup Iteration  12: 750985.195 ops/s
# Warmup Iteration  13: 751055.457 ops/s
# Warmup Iteration  14: 751490.080 ops/s
# Warmup Iteration  15: 750943.191 ops/s
# Warmup Iteration  16: 744934.685 ops/s
# Warmup Iteration  17: 784936.611 ops/s
# Warmup Iteration  18: 787347.762 ops/s
# Warmup Iteration  19: 784398.441 ops/s
# Warmup Iteration  20: 788775.503 ops/s
# Warmup Iteration  21: 787334.953 ops/s
# Warmup Iteration  22: 788458.861 ops/s
# Warmup Iteration  23: 790114.683 ops/s
# Warmup Iteration  24: 786959.169 ops/s
# Warmup Iteration  25: 788239.484 ops/s
# Warmup Iteration  26: 784510.170 ops/s
# Warmup Iteration  27: 791551.929 ops/s
# Warmup Iteration  28: 786560.946 ops/s
# Warmup Iteration  29: 786641.552 ops/s
# Warmup Iteration  30: 786233.786 ops/s
Iteration   1: 788874.384 ops/s
Iteration   2: 794122.763 ops/s
Iteration   3: 790027.749 ops/s
Iteration   4: 791732.139 ops/s
Iteration   5: 790093.569 ops/s
Iteration   6: 794917.994 ops/s
Iteration   7: 784826.035 ops/s
Iteration   8: 793514.281 ops/s
Iteration   9: 789592.408 ops/s
Iteration  10: 787700.043 ops/s
Iteration  11: 793300.013 ops/s
Iteration  12: 788246.735 ops/s
Iteration  13: 780435.976 ops/s
Iteration  14: 789305.006 ops/s
Iteration  15: 787521.347 ops/s
Iteration  16: 791597.599 ops/s
Iteration  17: 786401.562 ops/s
Iteration  18: 794538.054 ops/s
Iteration  19: 787643.632 ops/s
Iteration  20: 786824.986 ops/s
Iteration  21: 792275.895 ops/s
Iteration  22: 792118.742 ops/s
Iteration  23: 795337.549 ops/s
Iteration  24: 788893.861 ops/s
Iteration  25: 787281.110 ops/s
Iteration  26: 792161.217 ops/s
Iteration  27: 786574.067 ops/s
Iteration  28: 794363.470 ops/s
Iteration  29: 793036.152 ops/s
Iteration  30: 791119.743 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_asUnmodifiable":
  790145.936 ±(99.9%) 2307.355 ops/s [Average]
  (min, avg, max) = (780435.976, 790145.936, 795337.549), stdev = 3453.540
  CI (99.9%): [787838.581, 792453.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  790145.936 ± 2307.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1285937.601 ops/s
# Warmup Iteration   2: 3389203.413 ops/s
# Warmup Iteration   3: 2815497.621 ops/s
# Warmup Iteration   4: 3403816.910 ops/s
# Warmup Iteration   5: 3389198.415 ops/s
# Warmup Iteration   6: 3371043.789 ops/s
# Warmup Iteration   7: 3391383.096 ops/s
# Warmup Iteration   8: 3391582.286 ops/s
# Warmup Iteration   9: 3395243.966 ops/s
# Warmup Iteration  10: 3392642.866 ops/s
# Warmup Iteration  11: 3411170.964 ops/s
# Warmup Iteration  12: 3423189.584 ops/s
# Warmup Iteration  13: 3412526.162 ops/s
# Warmup Iteration  14: 3416052.871 ops/s
# Warmup Iteration  15: 3412973.407 ops/s
# Warmup Iteration  16: 3419457.208 ops/s
# Warmup Iteration  17: 3415574.817 ops/s
# Warmup Iteration  18: 3420474.656 ops/s
# Warmup Iteration  19: 3410035.576 ops/s
# Warmup Iteration  20: 3417643.337 ops/s
# Warmup Iteration  21: 3416771.609 ops/s
# Warmup Iteration  22: 3412888.680 ops/s
# Warmup Iteration  23: 3373313.852 ops/s
# Warmup Iteration  24: 3390158.455 ops/s
# Warmup Iteration  25: 3417585.293 ops/s
# Warmup Iteration  26: 3399351.464 ops/s
# Warmup Iteration  27: 3390415.842 ops/s
# Warmup Iteration  28: 3410292.648 ops/s
# Warmup Iteration  29: 3402712.244 ops/s
# Warmup Iteration  30: 3410180.588 ops/s
Iteration   1: 3415131.877 ops/s
Iteration   2: 3398030.710 ops/s
Iteration   3: 3420975.128 ops/s
Iteration   4: 3388403.133 ops/s
Iteration   5: 3422816.371 ops/s
Iteration   6: 3432825.268 ops/s
Iteration   7: 3437771.465 ops/s
Iteration   8: 3403439.852 ops/s
Iteration   9: 3391119.686 ops/s
Iteration  10: 3421149.977 ops/s
Iteration  11: 3369339.677 ops/s
Iteration  12: 3399811.390 ops/s
Iteration  13: 3414653.534 ops/s
Iteration  14: 3410413.238 ops/s
Iteration  15: 3403897.386 ops/s
Iteration  16: 3427648.604 ops/s
Iteration  17: 3373875.017 ops/s
Iteration  18: 3436995.870 ops/s
Iteration  19: 3361561.508 ops/s
Iteration  20: 3422998.795 ops/s
Iteration  21: 3407630.298 ops/s
Iteration  22: 3411068.459 ops/s
Iteration  23: 3410572.318 ops/s
Iteration  24: 3405307.874 ops/s
Iteration  25: 3425967.663 ops/s
Iteration  26: 3390138.805 ops/s
Iteration  27: 3418130.226 ops/s
Iteration  28: 3405174.491 ops/s
Iteration  29: 3412220.335 ops/s
Iteration  30: 3427683.402 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_chunk":
  3408891.745 ±(99.9%) 12690.005 ops/s [Average]
  (min, avg, max) = (3361561.508, 3408891.745, 3437771.465), stdev = 18993.804
  CI (99.9%): [3396201.740, 3421581.750] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_chunk  thrpt   30  3408891.745 ± 12690.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 459686.664 ops/s
# Warmup Iteration   2: 678925.148 ops/s
# Warmup Iteration   3: 779000.922 ops/s
# Warmup Iteration   4: 781168.112 ops/s
# Warmup Iteration   5: 782081.565 ops/s
# Warmup Iteration   6: 781563.009 ops/s
# Warmup Iteration   7: 651113.925 ops/s
# Warmup Iteration   8: 784718.290 ops/s
# Warmup Iteration   9: 781532.003 ops/s
# Warmup Iteration  10: 781298.812 ops/s
# Warmup Iteration  11: 780703.185 ops/s
# Warmup Iteration  12: 784681.302 ops/s
# Warmup Iteration  13: 781583.624 ops/s
# Warmup Iteration  14: 784312.083 ops/s
# Warmup Iteration  15: 782793.177 ops/s
# Warmup Iteration  16: 782605.377 ops/s
# Warmup Iteration  17: 819512.478 ops/s
# Warmup Iteration  18: 818140.063 ops/s
# Warmup Iteration  19: 823462.092 ops/s
# Warmup Iteration  20: 818240.088 ops/s
# Warmup Iteration  21: 820572.928 ops/s
# Warmup Iteration  22: 818154.233 ops/s
# Warmup Iteration  23: 818061.390 ops/s
# Warmup Iteration  24: 820582.449 ops/s
# Warmup Iteration  25: 820463.508 ops/s
# Warmup Iteration  26: 817748.153 ops/s
# Warmup Iteration  27: 817438.806 ops/s
# Warmup Iteration  28: 821726.016 ops/s
# Warmup Iteration  29: 817298.988 ops/s
# Warmup Iteration  30: 822260.428 ops/s
Iteration   1: 823370.850 ops/s
Iteration   2: 821964.038 ops/s
Iteration   3: 815926.429 ops/s
Iteration   4: 821165.902 ops/s
Iteration   5: 823345.103 ops/s
Iteration   6: 816133.570 ops/s
Iteration   7: 823436.595 ops/s
Iteration   8: 823165.044 ops/s
Iteration   9: 820786.624 ops/s
Iteration  10: 819427.106 ops/s
Iteration  11: 819022.235 ops/s
Iteration  12: 809821.723 ops/s
Iteration  13: 815239.249 ops/s
Iteration  14: 821498.459 ops/s
Iteration  15: 819662.438 ops/s
Iteration  16: 819254.923 ops/s
Iteration  17: 816764.822 ops/s
Iteration  18: 819947.477 ops/s
Iteration  19: 811637.246 ops/s
Iteration  20: 817431.717 ops/s
Iteration  21: 808655.868 ops/s
Iteration  22: 818205.106 ops/s
Iteration  23: 814560.386 ops/s
Iteration  24: 814579.334 ops/s
Iteration  25: 818450.806 ops/s
Iteration  26: 814479.204 ops/s
Iteration  27: 815040.666 ops/s
Iteration  28: 817097.849 ops/s
Iteration  29: 816823.562 ops/s
Iteration  30: 819813.204 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clear":
  817890.251 ±(99.9%) 2580.426 ops/s [Average]
  (min, avg, max) = (808655.868, 817890.251, 823436.595), stdev = 3862.260
  CI (99.9%): [815309.825, 820470.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_clear  thrpt   30  817890.251 ± 2580.426  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552369.835 ops/s
# Warmup Iteration   2: 658773.118 ops/s
# Warmup Iteration   3: 828755.915 ops/s
# Warmup Iteration   4: 831748.457 ops/s
# Warmup Iteration   5: 831076.777 ops/s
# Warmup Iteration   6: 833902.981 ops/s
# Warmup Iteration   7: 834093.275 ops/s
# Warmup Iteration   8: 832297.635 ops/s
# Warmup Iteration   9: 695379.279 ops/s
# Warmup Iteration  10: 833985.996 ops/s
# Warmup Iteration  11: 833079.837 ops/s
# Warmup Iteration  12: 832182.843 ops/s
# Warmup Iteration  13: 835248.504 ops/s
# Warmup Iteration  14: 835659.050 ops/s
# Warmup Iteration  15: 833965.401 ops/s
# Warmup Iteration  16: 832939.967 ops/s
# Warmup Iteration  17: 875063.653 ops/s
# Warmup Iteration  18: 875963.283 ops/s
# Warmup Iteration  19: 877319.339 ops/s
# Warmup Iteration  20: 870913.752 ops/s
# Warmup Iteration  21: 868400.867 ops/s
# Warmup Iteration  22: 874292.920 ops/s
# Warmup Iteration  23: 875293.523 ops/s
# Warmup Iteration  24: 873511.953 ops/s
# Warmup Iteration  25: 878236.991 ops/s
# Warmup Iteration  26: 875074.988 ops/s
# Warmup Iteration  27: 874225.348 ops/s
# Warmup Iteration  28: 876681.789 ops/s
# Warmup Iteration  29: 875953.018 ops/s
# Warmup Iteration  30: 876229.952 ops/s
Iteration   1: 874774.385 ops/s
Iteration   2: 878043.023 ops/s
Iteration   3: 878809.439 ops/s
Iteration   4: 873753.464 ops/s
Iteration   5: 878719.031 ops/s
Iteration   6: 877743.232 ops/s
Iteration   7: 875050.469 ops/s
Iteration   8: 875887.510 ops/s
Iteration   9: 879150.304 ops/s
Iteration  10: 873658.976 ops/s
Iteration  11: 877494.527 ops/s
Iteration  12: 877962.424 ops/s
Iteration  13: 874634.003 ops/s
Iteration  14: 879276.148 ops/s
Iteration  15: 875927.581 ops/s
Iteration  16: 878388.581 ops/s
Iteration  17: 877606.101 ops/s
Iteration  18: 874450.343 ops/s
Iteration  19: 877185.909 ops/s
Iteration  20: 875927.147 ops/s
Iteration  21: 873145.721 ops/s
Iteration  22: 871406.533 ops/s
Iteration  23: 877339.843 ops/s
Iteration  24: 873760.411 ops/s
Iteration  25: 876897.514 ops/s
Iteration  26: 870325.752 ops/s
Iteration  27: 874112.464 ops/s
Iteration  28: 874208.808 ops/s
Iteration  29: 878223.743 ops/s
Iteration  30: 876071.286 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearEntrySet":
  875997.822 ±(99.9%) 1554.217 ops/s [Average]
  (min, avg, max) = (870325.752, 875997.822, 879276.148), stdev = 2326.279
  CI (99.9%): [874443.606, 877552.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_clearEntrySet  thrpt   30  875997.822 ± 1554.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553898.675 ops/s
# Warmup Iteration   2: 656292.511 ops/s
# Warmup Iteration   3: 834224.556 ops/s
# Warmup Iteration   4: 834003.734 ops/s
# Warmup Iteration   5: 830342.509 ops/s
# Warmup Iteration   6: 834294.948 ops/s
# Warmup Iteration   7: 840184.124 ops/s
# Warmup Iteration   8: 835087.317 ops/s
# Warmup Iteration   9: 698020.661 ops/s
# Warmup Iteration  10: 827992.597 ops/s
# Warmup Iteration  11: 834595.037 ops/s
# Warmup Iteration  12: 838924.402 ops/s
# Warmup Iteration  13: 836121.843 ops/s
# Warmup Iteration  14: 837611.332 ops/s
# Warmup Iteration  15: 838220.118 ops/s
# Warmup Iteration  16: 840009.484 ops/s
# Warmup Iteration  17: 877478.384 ops/s
# Warmup Iteration  18: 882308.012 ops/s
# Warmup Iteration  19: 876791.451 ops/s
# Warmup Iteration  20: 880543.406 ops/s
# Warmup Iteration  21: 875990.811 ops/s
# Warmup Iteration  22: 876412.805 ops/s
# Warmup Iteration  23: 877882.655 ops/s
# Warmup Iteration  24: 878018.241 ops/s
# Warmup Iteration  25: 881763.584 ops/s
# Warmup Iteration  26: 879260.966 ops/s
# Warmup Iteration  27: 880431.414 ops/s
# Warmup Iteration  28: 882129.070 ops/s
# Warmup Iteration  29: 876709.549 ops/s
# Warmup Iteration  30: 878162.883 ops/s
Iteration   1: 873920.326 ops/s
Iteration   2: 882424.026 ops/s
Iteration   3: 882144.152 ops/s
Iteration   4: 881524.429 ops/s
Iteration   5: 885922.083 ops/s
Iteration   6: 878221.900 ops/s
Iteration   7: 883338.566 ops/s
Iteration   8: 877700.381 ops/s
Iteration   9: 876621.674 ops/s
Iteration  10: 870276.470 ops/s
Iteration  11: 876149.796 ops/s
Iteration  12: 879426.178 ops/s
Iteration  13: 887094.297 ops/s
Iteration  14: 878450.392 ops/s
Iteration  15: 878684.003 ops/s
Iteration  16: 881658.126 ops/s
Iteration  17: 876620.688 ops/s
Iteration  18: 876462.537 ops/s
Iteration  19: 879421.092 ops/s
Iteration  20: 877868.475 ops/s
Iteration  21: 881540.808 ops/s
Iteration  22: 880483.499 ops/s
Iteration  23: 879058.541 ops/s
Iteration  24: 879422.738 ops/s
Iteration  25: 882298.780 ops/s
Iteration  26: 882598.042 ops/s
Iteration  27: 882456.538 ops/s
Iteration  28: 878856.015 ops/s
Iteration  29: 881062.432 ops/s
Iteration  30: 876104.512 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_clearKeySet":
  879593.716 ±(99.9%) 2308.151 ops/s [Average]
  (min, avg, max) = (870276.470, 879593.716, 887094.297), stdev = 3454.732
  CI (99.9%): [877285.565, 881901.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_clearKeySet  thrpt   30  879593.716 ± 2308.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503771.559 ops/s
# Warmup Iteration   2: 928386.442 ops/s
# Warmup Iteration   3: 1063862.384 ops/s
# Warmup Iteration   4: 1064624.452 ops/s
# Warmup Iteration   5: 1033923.870 ops/s
# Warmup Iteration   6: 897827.764 ops/s
# Warmup Iteration   7: 1060031.459 ops/s
# Warmup Iteration   8: 1060068.370 ops/s
# Warmup Iteration   9: 1058540.584 ops/s
# Warmup Iteration  10: 1061522.751 ops/s
# Warmup Iteration  11: 1059107.050 ops/s
# Warmup Iteration  12: 1060354.267 ops/s
# Warmup Iteration  13: 1056725.829 ops/s
# Warmup Iteration  14: 1060271.074 ops/s
# Warmup Iteration  15: 1060771.166 ops/s
# Warmup Iteration  16: 1060733.440 ops/s
# Warmup Iteration  17: 1054612.943 ops/s
# Warmup Iteration  18: 1065618.745 ops/s
# Warmup Iteration  19: 1063487.536 ops/s
# Warmup Iteration  20: 1065673.256 ops/s
# Warmup Iteration  21: 1056922.384 ops/s
# Warmup Iteration  22: 1060912.628 ops/s
# Warmup Iteration  23: 1061874.253 ops/s
# Warmup Iteration  24: 1065753.466 ops/s
# Warmup Iteration  25: 1057953.583 ops/s
# Warmup Iteration  26: 1062767.348 ops/s
# Warmup Iteration  27: 1059896.518 ops/s
# Warmup Iteration  28: 1059525.555 ops/s
# Warmup Iteration  29: 1061476.694 ops/s
# Warmup Iteration  30: 1059540.154 ops/s
Iteration   1: 1066833.845 ops/s
Iteration   2: 1070345.333 ops/s
Iteration   3: 1063981.110 ops/s
Iteration   4: 1063384.391 ops/s
Iteration   5: 1060201.607 ops/s
Iteration   6: 1063374.637 ops/s
Iteration   7: 1071812.899 ops/s
Iteration   8: 1049939.257 ops/s
Iteration   9: 1068258.255 ops/s
Iteration  10: 1058958.145 ops/s
Iteration  11: 1053561.524 ops/s
Iteration  12: 1066466.893 ops/s
Iteration  13: 1062558.399 ops/s
Iteration  14: 1061396.499 ops/s
Iteration  15: 1060742.042 ops/s
Iteration  16: 1062553.463 ops/s
Iteration  17: 1064299.797 ops/s
Iteration  18: 1064615.857 ops/s
Iteration  19: 1059568.983 ops/s
Iteration  20: 1065458.866 ops/s
Iteration  21: 1066842.614 ops/s
Iteration  22: 1057146.832 ops/s
Iteration  23: 1063161.028 ops/s
Iteration  24: 1057528.231 ops/s
Iteration  25: 1070385.934 ops/s
Iteration  26: 1054991.772 ops/s
Iteration  27: 1065645.662 ops/s
Iteration  28: 1068511.291 ops/s
Iteration  29: 1061372.856 ops/s
Iteration  30: 1063123.231 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect":
  1062900.708 ±(99.9%) 3371.917 ops/s [Average]
  (min, avg, max) = (1049939.257, 1062900.708, 1071812.899), stdev = 5046.927
  CI (99.9%): [1059528.792, 1066272.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collect  thrpt   30  1062900.708 ± 3371.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2242233.777 ops/s
# Warmup Iteration   2: 5232307.798 ops/s
# Warmup Iteration   3: 4444852.138 ops/s
# Warmup Iteration   4: 5088783.111 ops/s
# Warmup Iteration   5: 5246946.433 ops/s
# Warmup Iteration   6: 5250539.767 ops/s
# Warmup Iteration   7: 5252747.128 ops/s
# Warmup Iteration   8: 5274403.131 ops/s
# Warmup Iteration   9: 5249018.668 ops/s
# Warmup Iteration  10: 5254439.807 ops/s
# Warmup Iteration  11: 5262928.481 ops/s
# Warmup Iteration  12: 5253624.597 ops/s
# Warmup Iteration  13: 5264628.739 ops/s
# Warmup Iteration  14: 5261204.877 ops/s
# Warmup Iteration  15: 5252536.594 ops/s
# Warmup Iteration  16: 5236438.277 ops/s
# Warmup Iteration  17: 5252749.855 ops/s
# Warmup Iteration  18: 5227769.202 ops/s
# Warmup Iteration  19: 5237706.749 ops/s
# Warmup Iteration  20: 5270936.499 ops/s
# Warmup Iteration  21: 5244718.927 ops/s
# Warmup Iteration  22: 5261150.228 ops/s
# Warmup Iteration  23: 5259918.735 ops/s
# Warmup Iteration  24: 5252406.841 ops/s
# Warmup Iteration  25: 5248804.452 ops/s
# Warmup Iteration  26: 5236884.410 ops/s
# Warmup Iteration  27: 5240203.014 ops/s
# Warmup Iteration  28: 5258702.941 ops/s
# Warmup Iteration  29: 5239733.317 ops/s
# Warmup Iteration  30: 5248340.666 ops/s
Iteration   1: 5227795.317 ops/s
Iteration   2: 5252866.425 ops/s
Iteration   3: 5271513.281 ops/s
Iteration   4: 5249916.551 ops/s
Iteration   5: 5252512.915 ops/s
Iteration   6: 5291571.828 ops/s
Iteration   7: 5226870.539 ops/s
Iteration   8: 5230061.018 ops/s
Iteration   9: 5227661.339 ops/s
Iteration  10: 5246965.572 ops/s
Iteration  11: 5263048.669 ops/s
Iteration  12: 5226232.349 ops/s
Iteration  13: 5269376.841 ops/s
Iteration  14: 5275739.619 ops/s
Iteration  15: 5246628.598 ops/s
Iteration  16: 5266758.540 ops/s
Iteration  17: 5232470.333 ops/s
Iteration  18: 5228025.590 ops/s
Iteration  19: 5250082.084 ops/s
Iteration  20: 5238131.170 ops/s
Iteration  21: 5226013.545 ops/s
Iteration  22: 5236480.337 ops/s
Iteration  23: 5252544.718 ops/s
Iteration  24: 5215737.213 ops/s
Iteration  25: 5237298.971 ops/s
Iteration  26: 5240243.391 ops/s
Iteration  27: 5254108.086 ops/s
Iteration  28: 5246642.222 ops/s
Iteration  29: 5252342.832 ops/s
Iteration  30: 5243226.454 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBoolean":
  5245962.212 ±(99.9%) 11718.281 ops/s [Average]
  (min, avg, max) = (5215737.213, 5245962.212, 5291571.828), stdev = 17539.373
  CI (99.9%): [5234243.931, 5257680.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectBoolean  thrpt   30  5245962.212 ± 11718.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2161993.396 ops/s
# Warmup Iteration   2: 4242426.923 ops/s
# Warmup Iteration   3: 4203723.286 ops/s
# Warmup Iteration   4: 3612472.052 ops/s
# Warmup Iteration   5: 4243062.595 ops/s
# Warmup Iteration   6: 4223171.833 ops/s
# Warmup Iteration   7: 4237171.825 ops/s
# Warmup Iteration   8: 4207403.150 ops/s
# Warmup Iteration   9: 4232268.607 ops/s
# Warmup Iteration  10: 4250890.785 ops/s
# Warmup Iteration  11: 4261978.613 ops/s
# Warmup Iteration  12: 4255329.168 ops/s
# Warmup Iteration  13: 4231393.966 ops/s
# Warmup Iteration  14: 4237678.838 ops/s
# Warmup Iteration  15: 4225592.688 ops/s
# Warmup Iteration  16: 4234385.065 ops/s
# Warmup Iteration  17: 4233414.226 ops/s
# Warmup Iteration  18: 4225318.253 ops/s
# Warmup Iteration  19: 4225245.052 ops/s
# Warmup Iteration  20: 4246642.960 ops/s
# Warmup Iteration  21: 4235409.209 ops/s
# Warmup Iteration  22: 4227735.197 ops/s
# Warmup Iteration  23: 4231751.236 ops/s
# Warmup Iteration  24: 4227355.990 ops/s
# Warmup Iteration  25: 4241795.630 ops/s
# Warmup Iteration  26: 4246994.243 ops/s
# Warmup Iteration  27: 4224742.411 ops/s
# Warmup Iteration  28: 4225437.898 ops/s
# Warmup Iteration  29: 4227622.377 ops/s
# Warmup Iteration  30: 4234152.380 ops/s
Iteration   1: 4229528.711 ops/s
Iteration   2: 4239536.126 ops/s
Iteration   3: 4240399.539 ops/s
Iteration   4: 4228338.407 ops/s
Iteration   5: 4212327.808 ops/s
Iteration   6: 4238099.578 ops/s
Iteration   7: 4223325.425 ops/s
Iteration   8: 4220274.182 ops/s
Iteration   9: 4216360.770 ops/s
Iteration  10: 4241699.360 ops/s
Iteration  11: 4221419.860 ops/s
Iteration  12: 4234578.679 ops/s
Iteration  13: 4234735.734 ops/s
Iteration  14: 4233168.446 ops/s
Iteration  15: 4227917.558 ops/s
Iteration  16: 4249432.132 ops/s
Iteration  17: 4232781.791 ops/s
Iteration  18: 4218766.570 ops/s
Iteration  19: 4249025.377 ops/s
Iteration  20: 4251324.086 ops/s
Iteration  21: 4232898.068 ops/s
Iteration  22: 4229625.979 ops/s
Iteration  23: 4252492.546 ops/s
Iteration  24: 4251412.577 ops/s
Iteration  25: 4260076.688 ops/s
Iteration  26: 4238428.987 ops/s
Iteration  27: 4251059.216 ops/s
Iteration  28: 4203722.713 ops/s
Iteration  29: 4247324.028 ops/s
Iteration  30: 4241107.926 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectBooleanWithTarget":
  4235039.629 ±(99.9%) 8985.795 ops/s [Average]
  (min, avg, max) = (4203722.713, 4235039.629, 4260076.688), stdev = 13449.516
  CI (99.9%): [4226053.834, 4244025.424] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  4235039.629 ± 8985.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 846844.578 ops/s
# Warmup Iteration   2: 2247081.704 ops/s
# Warmup Iteration   3: 2252231.835 ops/s
# Warmup Iteration   4: 1863358.712 ops/s
# Warmup Iteration   5: 2265778.360 ops/s
# Warmup Iteration   6: 2264511.732 ops/s
# Warmup Iteration   7: 2265384.520 ops/s
# Warmup Iteration   8: 2267181.197 ops/s
# Warmup Iteration   9: 2276568.120 ops/s
# Warmup Iteration  10: 2260736.686 ops/s
# Warmup Iteration  11: 2262570.958 ops/s
# Warmup Iteration  12: 2255257.416 ops/s
# Warmup Iteration  13: 2254000.899 ops/s
# Warmup Iteration  14: 2256903.451 ops/s
# Warmup Iteration  15: 2265920.205 ops/s
# Warmup Iteration  16: 2250812.353 ops/s
# Warmup Iteration  17: 2241191.313 ops/s
# Warmup Iteration  18: 2248138.897 ops/s
# Warmup Iteration  19: 2254474.942 ops/s
# Warmup Iteration  20: 2250488.181 ops/s
# Warmup Iteration  21: 2258245.855 ops/s
# Warmup Iteration  22: 2263520.996 ops/s
# Warmup Iteration  23: 2255448.209 ops/s
# Warmup Iteration  24: 2238828.942 ops/s
# Warmup Iteration  25: 2255166.228 ops/s
# Warmup Iteration  26: 2252002.375 ops/s
# Warmup Iteration  27: 2257890.894 ops/s
# Warmup Iteration  28: 2252373.008 ops/s
# Warmup Iteration  29: 2255628.890 ops/s
# Warmup Iteration  30: 2258307.133 ops/s
Iteration   1: 2251000.679 ops/s
Iteration   2: 2248934.438 ops/s
Iteration   3: 2262316.175 ops/s
Iteration   4: 2253565.731 ops/s
Iteration   5: 2246272.785 ops/s
Iteration   6: 2240240.042 ops/s
Iteration   7: 2240920.295 ops/s
Iteration   8: 2257908.607 ops/s
Iteration   9: 2254484.526 ops/s
Iteration  10: 2244502.556 ops/s
Iteration  11: 2249800.323 ops/s
Iteration  12: 2258798.721 ops/s
Iteration  13: 2237734.528 ops/s
Iteration  14: 2251049.674 ops/s
Iteration  15: 2244949.230 ops/s
Iteration  16: 2246906.200 ops/s
Iteration  17: 2244935.731 ops/s
Iteration  18: 2252155.932 ops/s
Iteration  19: 2258830.539 ops/s
Iteration  20: 2249357.630 ops/s
Iteration  21: 2246528.974 ops/s
Iteration  22: 2251589.655 ops/s
Iteration  23: 2239008.311 ops/s
Iteration  24: 2249918.651 ops/s
Iteration  25: 2255545.152 ops/s
Iteration  26: 2244231.320 ops/s
Iteration  27: 2251104.745 ops/s
Iteration  28: 2246549.409 ops/s
Iteration  29: 2235483.475 ops/s
Iteration  30: 2261490.986 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByte":
  2249203.834 ±(99.9%) 4608.969 ops/s [Average]
  (min, avg, max) = (2235483.475, 2249203.834, 2262316.175), stdev = 6898.488
  CI (99.9%): [2244594.865, 2253812.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectByte  thrpt   30  2249203.834 ± 4608.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 800491.229 ops/s
# Warmup Iteration   2: 2248773.819 ops/s
# Warmup Iteration   3: 2240075.806 ops/s
# Warmup Iteration   4: 1857725.074 ops/s
# Warmup Iteration   5: 2247585.907 ops/s
# Warmup Iteration   6: 2248071.433 ops/s
# Warmup Iteration   7: 2244812.492 ops/s
# Warmup Iteration   8: 2244565.487 ops/s
# Warmup Iteration   9: 2240341.894 ops/s
# Warmup Iteration  10: 2246844.563 ops/s
# Warmup Iteration  11: 2261360.676 ops/s
# Warmup Iteration  12: 2252131.208 ops/s
# Warmup Iteration  13: 2250199.841 ops/s
# Warmup Iteration  14: 2254386.428 ops/s
# Warmup Iteration  15: 2256898.683 ops/s
# Warmup Iteration  16: 2244468.906 ops/s
# Warmup Iteration  17: 2244193.354 ops/s
# Warmup Iteration  18: 2241815.372 ops/s
# Warmup Iteration  19: 2259013.445 ops/s
# Warmup Iteration  20: 2252547.226 ops/s
# Warmup Iteration  21: 2248829.070 ops/s
# Warmup Iteration  22: 2255353.530 ops/s
# Warmup Iteration  23: 2263297.628 ops/s
# Warmup Iteration  24: 2255106.504 ops/s
# Warmup Iteration  25: 2258737.849 ops/s
# Warmup Iteration  26: 2262143.321 ops/s
# Warmup Iteration  27: 2263875.978 ops/s
# Warmup Iteration  28: 2263971.160 ops/s
# Warmup Iteration  29: 2256366.124 ops/s
# Warmup Iteration  30: 2255126.675 ops/s
Iteration   1: 2255658.186 ops/s
Iteration   2: 2240302.751 ops/s
Iteration   3: 2222597.522 ops/s
Iteration   4: 2267419.962 ops/s
Iteration   5: 2252521.235 ops/s
Iteration   6: 2267479.991 ops/s
Iteration   7: 2250572.333 ops/s
Iteration   8: 2256224.287 ops/s
Iteration   9: 2266477.650 ops/s
Iteration  10: 2246818.316 ops/s
Iteration  11: 2263528.730 ops/s
Iteration  12: 2271304.871 ops/s
Iteration  13: 2267838.039 ops/s
Iteration  14: 2258200.361 ops/s
Iteration  15: 2251415.132 ops/s
Iteration  16: 2262083.252 ops/s
Iteration  17: 2256051.306 ops/s
Iteration  18: 2251415.660 ops/s
Iteration  19: 2252439.509 ops/s
Iteration  20: 2255674.691 ops/s
Iteration  21: 2269201.776 ops/s
Iteration  22: 2259685.893 ops/s
Iteration  23: 2273569.997 ops/s
Iteration  24: 2273018.434 ops/s
Iteration  25: 2269030.099 ops/s
Iteration  26: 2259767.769 ops/s
Iteration  27: 2264274.983 ops/s
Iteration  28: 2273197.631 ops/s
Iteration  29: 2261160.786 ops/s
Iteration  30: 2273956.227 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectByteWithTarget":
  2259762.913 ±(99.9%) 7491.921 ops/s [Average]
  (min, avg, max) = (2222597.522, 2259762.913, 2273956.227), stdev = 11213.555
  CI (99.9%): [2252270.992, 2267254.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2259762.913 ± 7491.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 961034.140 ops/s
# Warmup Iteration   2: 2332215.055 ops/s
# Warmup Iteration   3: 2375468.905 ops/s
# Warmup Iteration   4: 1985670.587 ops/s
# Warmup Iteration   5: 2386196.689 ops/s
# Warmup Iteration   6: 2382916.886 ops/s
# Warmup Iteration   7: 2378208.083 ops/s
# Warmup Iteration   8: 2387162.513 ops/s
# Warmup Iteration   9: 2377345.038 ops/s
# Warmup Iteration  10: 2387181.152 ops/s
# Warmup Iteration  11: 2378275.290 ops/s
# Warmup Iteration  12: 2391866.537 ops/s
# Warmup Iteration  13: 2381228.699 ops/s
# Warmup Iteration  14: 2385321.289 ops/s
# Warmup Iteration  15: 2372059.471 ops/s
# Warmup Iteration  16: 2355050.392 ops/s
# Warmup Iteration  17: 2363447.298 ops/s
# Warmup Iteration  18: 2361374.670 ops/s
# Warmup Iteration  19: 2378149.336 ops/s
# Warmup Iteration  20: 2368293.770 ops/s
# Warmup Iteration  21: 2350178.845 ops/s
# Warmup Iteration  22: 2365242.338 ops/s
# Warmup Iteration  23: 2375389.640 ops/s
# Warmup Iteration  24: 2387909.687 ops/s
# Warmup Iteration  25: 2372339.655 ops/s
# Warmup Iteration  26: 2376961.339 ops/s
# Warmup Iteration  27: 2373596.730 ops/s
# Warmup Iteration  28: 2380280.484 ops/s
# Warmup Iteration  29: 2363191.399 ops/s
# Warmup Iteration  30: 2371891.282 ops/s
Iteration   1: 2378376.712 ops/s
Iteration   2: 2370506.685 ops/s
Iteration   3: 2365670.428 ops/s
Iteration   4: 2360556.631 ops/s
Iteration   5: 2370921.027 ops/s
Iteration   6: 2367701.344 ops/s
Iteration   7: 2354583.026 ops/s
Iteration   8: 2381161.270 ops/s
Iteration   9: 2369815.890 ops/s
Iteration  10: 2366177.648 ops/s
Iteration  11: 2353858.697 ops/s
Iteration  12: 2351280.660 ops/s
Iteration  13: 2353838.105 ops/s
Iteration  14: 2339375.617 ops/s
Iteration  15: 2365382.833 ops/s
Iteration  16: 2354393.172 ops/s
Iteration  17: 2362610.630 ops/s
Iteration  18: 2362506.396 ops/s
Iteration  19: 2368438.790 ops/s
Iteration  20: 2364021.387 ops/s
Iteration  21: 2356659.442 ops/s
Iteration  22: 2368561.007 ops/s
Iteration  23: 2383330.228 ops/s
Iteration  24: 2364688.444 ops/s
Iteration  25: 2382163.962 ops/s
Iteration  26: 2357358.711 ops/s
Iteration  27: 2365883.310 ops/s
Iteration  28: 2343200.200 ops/s
Iteration  29: 2347575.507 ops/s
Iteration  30: 2344851.038 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectChar":
  2362514.960 ±(99.9%) 7514.587 ops/s [Average]
  (min, avg, max) = (2339375.617, 2362514.960, 2383330.228), stdev = 11247.481
  CI (99.9%): [2355000.373, 2370029.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectChar  thrpt   30  2362514.960 ± 7514.587  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 921393.428 ops/s
# Warmup Iteration   2: 2352695.564 ops/s
# Warmup Iteration   3: 2375512.135 ops/s
# Warmup Iteration   4: 1971564.303 ops/s
# Warmup Iteration   5: 2375303.715 ops/s
# Warmup Iteration   6: 2371910.251 ops/s
# Warmup Iteration   7: 2351219.404 ops/s
# Warmup Iteration   8: 2381858.344 ops/s
# Warmup Iteration   9: 2379466.841 ops/s
# Warmup Iteration  10: 2376775.761 ops/s
# Warmup Iteration  11: 2379502.552 ops/s
# Warmup Iteration  12: 2392094.953 ops/s
# Warmup Iteration  13: 2393467.809 ops/s
# Warmup Iteration  14: 2383880.265 ops/s
# Warmup Iteration  15: 2379585.709 ops/s
# Warmup Iteration  16: 2364017.850 ops/s
# Warmup Iteration  17: 2382477.173 ops/s
# Warmup Iteration  18: 2385238.412 ops/s
# Warmup Iteration  19: 2389529.463 ops/s
# Warmup Iteration  20: 2387886.285 ops/s
# Warmup Iteration  21: 2378552.368 ops/s
# Warmup Iteration  22: 2368417.694 ops/s
# Warmup Iteration  23: 2375256.211 ops/s
# Warmup Iteration  24: 2376230.912 ops/s
# Warmup Iteration  25: 2374494.482 ops/s
# Warmup Iteration  26: 2380801.049 ops/s
# Warmup Iteration  27: 2376641.521 ops/s
# Warmup Iteration  28: 2382774.802 ops/s
# Warmup Iteration  29: 2382586.515 ops/s
# Warmup Iteration  30: 2361149.746 ops/s
Iteration   1: 2376570.463 ops/s
Iteration   2: 2385406.236 ops/s
Iteration   3: 2392021.817 ops/s
Iteration   4: 2390773.808 ops/s
Iteration   5: 2393667.126 ops/s
Iteration   6: 2386098.684 ops/s
Iteration   7: 2387651.685 ops/s
Iteration   8: 2378204.083 ops/s
Iteration   9: 2376312.213 ops/s
Iteration  10: 2388679.063 ops/s
Iteration  11: 2375188.880 ops/s
Iteration  12: 2392762.695 ops/s
Iteration  13: 2378788.679 ops/s
Iteration  14: 2386954.315 ops/s
Iteration  15: 2391676.025 ops/s
Iteration  16: 2379620.389 ops/s
Iteration  17: 2384699.907 ops/s
Iteration  18: 2390194.713 ops/s
Iteration  19: 2372291.047 ops/s
Iteration  20: 2401802.900 ops/s
Iteration  21: 2392234.049 ops/s
Iteration  22: 2373941.537 ops/s
Iteration  23: 2380144.770 ops/s
Iteration  24: 2385410.918 ops/s
Iteration  25: 2381988.368 ops/s
Iteration  26: 2386969.170 ops/s
Iteration  27: 2384875.681 ops/s
Iteration  28: 2361864.115 ops/s
Iteration  29: 2379815.309 ops/s
Iteration  30: 2381805.955 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectCharWithTarget":
  2383947.153 ±(99.9%) 5359.571 ops/s [Average]
  (min, avg, max) = (2361864.115, 2383947.153, 2401802.900), stdev = 8021.954
  CI (99.9%): [2378587.582, 2389306.724] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2383947.153 ± 5359.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 619290.264 ops/s
# Warmup Iteration   2: 1577726.861 ops/s
# Warmup Iteration   3: 1580297.872 ops/s
# Warmup Iteration   4: 1313784.123 ops/s
# Warmup Iteration   5: 1587608.564 ops/s
# Warmup Iteration   6: 1574215.726 ops/s
# Warmup Iteration   7: 1585685.830 ops/s
# Warmup Iteration   8: 1588062.477 ops/s
# Warmup Iteration   9: 1584148.441 ops/s
# Warmup Iteration  10: 1578316.338 ops/s
# Warmup Iteration  11: 1594994.534 ops/s
# Warmup Iteration  12: 1587530.899 ops/s
# Warmup Iteration  13: 1587429.218 ops/s
# Warmup Iteration  14: 1582671.050 ops/s
# Warmup Iteration  15: 1576136.976 ops/s
# Warmup Iteration  16: 1581755.163 ops/s
# Warmup Iteration  17: 1579446.221 ops/s
# Warmup Iteration  18: 1592520.214 ops/s
# Warmup Iteration  19: 1585323.964 ops/s
# Warmup Iteration  20: 1583453.253 ops/s
# Warmup Iteration  21: 1592962.181 ops/s
# Warmup Iteration  22: 1569567.394 ops/s
# Warmup Iteration  23: 1577932.415 ops/s
# Warmup Iteration  24: 1583469.625 ops/s
# Warmup Iteration  25: 1597250.064 ops/s
# Warmup Iteration  26: 1581476.029 ops/s
# Warmup Iteration  27: 1585982.280 ops/s
# Warmup Iteration  28: 1586496.092 ops/s
# Warmup Iteration  29: 1586906.213 ops/s
# Warmup Iteration  30: 1584893.023 ops/s
Iteration   1: 1576172.846 ops/s
Iteration   2: 1584609.963 ops/s
Iteration   3: 1579390.067 ops/s
Iteration   4: 1569455.093 ops/s
Iteration   5: 1570946.438 ops/s
Iteration   6: 1579408.280 ops/s
Iteration   7: 1583370.588 ops/s
Iteration   8: 1572059.826 ops/s
Iteration   9: 1581708.859 ops/s
Iteration  10: 1585317.572 ops/s
Iteration  11: 1585150.066 ops/s
Iteration  12: 1588376.585 ops/s
Iteration  13: 1582670.005 ops/s
Iteration  14: 1582756.148 ops/s
Iteration  15: 1583832.038 ops/s
Iteration  16: 1582583.594 ops/s
Iteration  17: 1589874.643 ops/s
Iteration  18: 1588743.582 ops/s
Iteration  19: 1586364.658 ops/s
Iteration  20: 1572400.600 ops/s
Iteration  21: 1579060.864 ops/s
Iteration  22: 1570022.254 ops/s
Iteration  23: 1588549.182 ops/s
Iteration  24: 1592734.374 ops/s
Iteration  25: 1577015.381 ops/s
Iteration  26: 1579350.250 ops/s
Iteration  27: 1576761.302 ops/s
Iteration  28: 1568531.117 ops/s
Iteration  29: 1575944.504 ops/s
Iteration  30: 1574544.996 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDouble":
  1580256.856 ±(99.9%) 4424.200 ops/s [Average]
  (min, avg, max) = (1568531.117, 1580256.856, 1592734.374), stdev = 6621.934
  CI (99.9%): [1575832.656, 1584681.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectDouble  thrpt   30  1580256.856 ± 4424.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651928.136 ops/s
# Warmup Iteration   2: 1611309.789 ops/s
# Warmup Iteration   3: 1634927.219 ops/s
# Warmup Iteration   4: 1349904.278 ops/s
# Warmup Iteration   5: 1634731.545 ops/s
# Warmup Iteration   6: 1631054.501 ops/s
# Warmup Iteration   7: 1636074.875 ops/s
# Warmup Iteration   8: 1635559.911 ops/s
# Warmup Iteration   9: 1636162.545 ops/s
# Warmup Iteration  10: 1625574.772 ops/s
# Warmup Iteration  11: 1626719.947 ops/s
# Warmup Iteration  12: 1634295.832 ops/s
# Warmup Iteration  13: 1638754.801 ops/s
# Warmup Iteration  14: 1626847.377 ops/s
# Warmup Iteration  15: 1618692.346 ops/s
# Warmup Iteration  16: 1631657.908 ops/s
# Warmup Iteration  17: 1633642.734 ops/s
# Warmup Iteration  18: 1631402.437 ops/s
# Warmup Iteration  19: 1629478.274 ops/s
# Warmup Iteration  20: 1640795.252 ops/s
# Warmup Iteration  21: 1624837.016 ops/s
# Warmup Iteration  22: 1632423.279 ops/s
# Warmup Iteration  23: 1620241.030 ops/s
# Warmup Iteration  24: 1644808.414 ops/s
# Warmup Iteration  25: 1643338.178 ops/s
# Warmup Iteration  26: 1638222.478 ops/s
# Warmup Iteration  27: 1639147.019 ops/s
# Warmup Iteration  28: 1633879.909 ops/s
# Warmup Iteration  29: 1622023.404 ops/s
# Warmup Iteration  30: 1628594.979 ops/s
Iteration   1: 1630132.571 ops/s
Iteration   2: 1626127.580 ops/s
Iteration   3: 1629107.216 ops/s
Iteration   4: 1627565.570 ops/s
Iteration   5: 1642865.670 ops/s
Iteration   6: 1634370.770 ops/s
Iteration   7: 1631534.591 ops/s
Iteration   8: 1618031.801 ops/s
Iteration   9: 1630364.173 ops/s
Iteration  10: 1634960.159 ops/s
Iteration  11: 1631435.773 ops/s
Iteration  12: 1639740.591 ops/s
Iteration  13: 1633665.571 ops/s
Iteration  14: 1634628.283 ops/s
Iteration  15: 1632758.443 ops/s
Iteration  16: 1639794.722 ops/s
Iteration  17: 1639898.171 ops/s
Iteration  18: 1643192.217 ops/s
Iteration  19: 1649260.439 ops/s
Iteration  20: 1641967.088 ops/s
Iteration  21: 1641423.335 ops/s
Iteration  22: 1640638.129 ops/s
Iteration  23: 1636530.984 ops/s
Iteration  24: 1646599.623 ops/s
Iteration  25: 1630863.769 ops/s
Iteration  26: 1641518.652 ops/s
Iteration  27: 1637870.210 ops/s
Iteration  28: 1626021.346 ops/s
Iteration  29: 1632983.342 ops/s
Iteration  30: 1601965.088 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectDoubleWithTarget":
  1634260.529 ±(99.9%) 6105.198 ops/s [Average]
  (min, avg, max) = (1601965.088, 1634260.529, 1649260.439), stdev = 9137.974
  CI (99.9%): [1628155.331, 1640365.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1634260.529 ± 6105.198  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711784.112 ops/s
# Warmup Iteration   2: 1772159.053 ops/s
# Warmup Iteration   3: 1795794.797 ops/s
# Warmup Iteration   4: 1494792.761 ops/s
# Warmup Iteration   5: 1802587.203 ops/s
# Warmup Iteration   6: 1792043.371 ops/s
# Warmup Iteration   7: 1797738.625 ops/s
# Warmup Iteration   8: 1799811.750 ops/s
# Warmup Iteration   9: 1809226.791 ops/s
# Warmup Iteration  10: 1797858.696 ops/s
# Warmup Iteration  11: 1798804.062 ops/s
# Warmup Iteration  12: 1803559.554 ops/s
# Warmup Iteration  13: 1795692.017 ops/s
# Warmup Iteration  14: 1795792.861 ops/s
# Warmup Iteration  15: 1793394.853 ops/s
# Warmup Iteration  16: 1788304.790 ops/s
# Warmup Iteration  17: 1795620.836 ops/s
# Warmup Iteration  18: 1798386.720 ops/s
# Warmup Iteration  19: 1796250.434 ops/s
# Warmup Iteration  20: 1791331.674 ops/s
# Warmup Iteration  21: 1798634.795 ops/s
# Warmup Iteration  22: 1802667.928 ops/s
# Warmup Iteration  23: 1815382.389 ops/s
# Warmup Iteration  24: 1803685.371 ops/s
# Warmup Iteration  25: 1794881.896 ops/s
# Warmup Iteration  26: 1804244.808 ops/s
# Warmup Iteration  27: 1800263.269 ops/s
# Warmup Iteration  28: 1804047.922 ops/s
# Warmup Iteration  29: 1799574.976 ops/s
# Warmup Iteration  30: 1790766.142 ops/s
Iteration   1: 1785521.161 ops/s
Iteration   2: 1801108.982 ops/s
Iteration   3: 1794684.654 ops/s
Iteration   4: 1801389.545 ops/s
Iteration   5: 1809114.483 ops/s
Iteration   6: 1803767.880 ops/s
Iteration   7: 1803112.090 ops/s
Iteration   8: 1813623.007 ops/s
Iteration   9: 1811644.277 ops/s
Iteration  10: 1797776.810 ops/s
Iteration  11: 1793408.175 ops/s
Iteration  12: 1800745.823 ops/s
Iteration  13: 1800192.312 ops/s
Iteration  14: 1809942.697 ops/s
Iteration  15: 1796821.308 ops/s
Iteration  16: 1805344.670 ops/s
Iteration  17: 1808130.720 ops/s
Iteration  18: 1812453.625 ops/s
Iteration  19: 1805741.991 ops/s
Iteration  20: 1800485.475 ops/s
Iteration  21: 1803458.370 ops/s
Iteration  22: 1804092.984 ops/s
Iteration  23: 1806375.636 ops/s
Iteration  24: 1802552.529 ops/s
Iteration  25: 1801716.918 ops/s
Iteration  26: 1783135.577 ops/s
Iteration  27: 1804123.253 ops/s
Iteration  28: 1809085.570 ops/s
Iteration  29: 1805369.508 ops/s
Iteration  30: 1800885.717 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloat":
  1802526.858 ±(99.9%) 4660.226 ops/s [Average]
  (min, avg, max) = (1783135.577, 1802526.858, 1813623.007), stdev = 6975.207
  CI (99.9%): [1797866.632, 1807187.084] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectFloat  thrpt   30  1802526.858 ± 4660.226  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 665700.280 ops/s
# Warmup Iteration   2: 1704448.577 ops/s
# Warmup Iteration   3: 1723391.874 ops/s
# Warmup Iteration   4: 1435689.932 ops/s
# Warmup Iteration   5: 1741922.870 ops/s
# Warmup Iteration   6: 1739862.589 ops/s
# Warmup Iteration   7: 1740562.126 ops/s
# Warmup Iteration   8: 1730748.435 ops/s
# Warmup Iteration   9: 1736287.651 ops/s
# Warmup Iteration  10: 1739312.999 ops/s
# Warmup Iteration  11: 1744467.192 ops/s
# Warmup Iteration  12: 1747651.070 ops/s
# Warmup Iteration  13: 1738531.769 ops/s
# Warmup Iteration  14: 1732419.612 ops/s
# Warmup Iteration  15: 1742365.447 ops/s
# Warmup Iteration  16: 1750571.069 ops/s
# Warmup Iteration  17: 1740458.362 ops/s
# Warmup Iteration  18: 1735643.932 ops/s
# Warmup Iteration  19: 1736198.295 ops/s
# Warmup Iteration  20: 1739302.058 ops/s
# Warmup Iteration  21: 1740673.944 ops/s
# Warmup Iteration  22: 1742242.681 ops/s
# Warmup Iteration  23: 1741041.320 ops/s
# Warmup Iteration  24: 1742938.787 ops/s
# Warmup Iteration  25: 1741547.335 ops/s
# Warmup Iteration  26: 1734749.006 ops/s
# Warmup Iteration  27: 1736637.900 ops/s
# Warmup Iteration  28: 1723646.944 ops/s
# Warmup Iteration  29: 1739009.415 ops/s
# Warmup Iteration  30: 1731946.034 ops/s
Iteration   1: 1742514.141 ops/s
Iteration   2: 1744649.590 ops/s
Iteration   3: 1743770.155 ops/s
Iteration   4: 1748483.616 ops/s
Iteration   5: 1742275.956 ops/s
Iteration   6: 1745953.519 ops/s
Iteration   7: 1736650.636 ops/s
Iteration   8: 1724663.978 ops/s
Iteration   9: 1741193.365 ops/s
Iteration  10: 1743065.220 ops/s
Iteration  11: 1732422.902 ops/s
Iteration  12: 1733200.553 ops/s
Iteration  13: 1738588.640 ops/s
Iteration  14: 1731222.189 ops/s
Iteration  15: 1742765.063 ops/s
Iteration  16: 1745438.133 ops/s
Iteration  17: 1744663.331 ops/s
Iteration  18: 1737410.240 ops/s
Iteration  19: 1733803.242 ops/s
Iteration  20: 1740327.860 ops/s
Iteration  21: 1744640.308 ops/s
Iteration  22: 1737057.700 ops/s
Iteration  23: 1744209.904 ops/s
Iteration  24: 1740476.871 ops/s
Iteration  25: 1736185.232 ops/s
Iteration  26: 1727096.330 ops/s
Iteration  27: 1722099.568 ops/s
Iteration  28: 1718300.495 ops/s
Iteration  29: 1739359.661 ops/s
Iteration  30: 1742002.446 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectFloatWithTarget":
  1738149.695 ±(99.9%) 4995.156 ops/s [Average]
  (min, avg, max) = (1718300.495, 1738149.695, 1748483.616), stdev = 7476.515
  CI (99.9%): [1733154.539, 1743144.851] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1738149.695 ± 4995.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 449246.779 ops/s
# Warmup Iteration   2: 936501.574 ops/s
# Warmup Iteration   3: 1046181.291 ops/s
# Warmup Iteration   4: 1056300.752 ops/s
# Warmup Iteration   5: 870266.658 ops/s
# Warmup Iteration   6: 1052195.559 ops/s
# Warmup Iteration   7: 1057883.318 ops/s
# Warmup Iteration   8: 1055254.169 ops/s
# Warmup Iteration   9: 1053095.683 ops/s
# Warmup Iteration  10: 1053073.123 ops/s
# Warmup Iteration  11: 1056733.422 ops/s
# Warmup Iteration  12: 1066976.475 ops/s
# Warmup Iteration  13: 1052121.424 ops/s
# Warmup Iteration  14: 1054027.172 ops/s
# Warmup Iteration  15: 1058663.395 ops/s
# Warmup Iteration  16: 1062190.676 ops/s
# Warmup Iteration  17: 1053292.996 ops/s
# Warmup Iteration  18: 1055230.524 ops/s
# Warmup Iteration  19: 1052726.921 ops/s
# Warmup Iteration  20: 1057278.439 ops/s
# Warmup Iteration  21: 1062391.380 ops/s
# Warmup Iteration  22: 1049407.656 ops/s
# Warmup Iteration  23: 1058057.648 ops/s
# Warmup Iteration  24: 1050936.753 ops/s
# Warmup Iteration  25: 1042062.660 ops/s
# Warmup Iteration  26: 1060548.661 ops/s
# Warmup Iteration  27: 1058181.802 ops/s
# Warmup Iteration  28: 1050813.067 ops/s
# Warmup Iteration  29: 1052036.415 ops/s
# Warmup Iteration  30: 1053382.305 ops/s
Iteration   1: 1056735.849 ops/s
Iteration   2: 1064907.118 ops/s
Iteration   3: 1060450.932 ops/s
Iteration   4: 1050768.760 ops/s
Iteration   5: 1057670.459 ops/s
Iteration   6: 1051817.958 ops/s
Iteration   7: 1062663.019 ops/s
Iteration   8: 1061727.474 ops/s
Iteration   9: 1054710.953 ops/s
Iteration  10: 1054220.061 ops/s
Iteration  11: 1058580.198 ops/s
Iteration  12: 1063326.669 ops/s
Iteration  13: 1067268.210 ops/s
Iteration  14: 1055728.902 ops/s
Iteration  15: 1057003.276 ops/s
Iteration  16: 1049696.799 ops/s
Iteration  17: 1058000.207 ops/s
Iteration  18: 1071862.419 ops/s
Iteration  19: 1060724.359 ops/s
Iteration  20: 1062093.450 ops/s
Iteration  21: 1059147.476 ops/s
Iteration  22: 1047061.961 ops/s
Iteration  23: 1058951.477 ops/s
Iteration  24: 1065881.641 ops/s
Iteration  25: 1056504.150 ops/s
Iteration  26: 1048923.123 ops/s
Iteration  27: 1060145.240 ops/s
Iteration  28: 1045689.077 ops/s
Iteration  29: 1045178.930 ops/s
Iteration  30: 1051310.965 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIf":
  1057291.704 ±(99.9%) 4353.914 ops/s [Average]
  (min, avg, max) = (1045178.930, 1057291.704, 1071862.419), stdev = 6516.735
  CI (99.9%): [1052937.789, 1061645.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectIf  thrpt   30  1057291.704 ± 4353.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 878300.625 ops/s
# Warmup Iteration   2: 2239627.011 ops/s
# Warmup Iteration   3: 2227176.026 ops/s
# Warmup Iteration   4: 1887928.116 ops/s
# Warmup Iteration   5: 2256940.237 ops/s
# Warmup Iteration   6: 2255853.562 ops/s
# Warmup Iteration   7: 2249739.064 ops/s
# Warmup Iteration   8: 2262058.569 ops/s
# Warmup Iteration   9: 2250172.363 ops/s
# Warmup Iteration  10: 2251823.885 ops/s
# Warmup Iteration  11: 2246521.033 ops/s
# Warmup Iteration  12: 2247261.588 ops/s
# Warmup Iteration  13: 2246468.320 ops/s
# Warmup Iteration  14: 2262603.634 ops/s
# Warmup Iteration  15: 2253816.511 ops/s
# Warmup Iteration  16: 2249717.648 ops/s
# Warmup Iteration  17: 2261467.681 ops/s
# Warmup Iteration  18: 2251846.591 ops/s
# Warmup Iteration  19: 2255427.408 ops/s
# Warmup Iteration  20: 2253489.447 ops/s
# Warmup Iteration  21: 2260444.587 ops/s
# Warmup Iteration  22: 2252894.934 ops/s
# Warmup Iteration  23: 2250508.280 ops/s
# Warmup Iteration  24: 2252386.086 ops/s
# Warmup Iteration  25: 2262557.186 ops/s
# Warmup Iteration  26: 2262502.645 ops/s
# Warmup Iteration  27: 2248083.055 ops/s
# Warmup Iteration  28: 2265123.533 ops/s
# Warmup Iteration  29: 2252413.767 ops/s
# Warmup Iteration  30: 2259663.708 ops/s
Iteration   1: 2248029.029 ops/s
Iteration   2: 2255884.811 ops/s
Iteration   3: 2231288.661 ops/s
Iteration   4: 2249644.804 ops/s
Iteration   5: 2263192.506 ops/s
Iteration   6: 2254948.902 ops/s
Iteration   7: 2247252.407 ops/s
Iteration   8: 2231739.627 ops/s
Iteration   9: 2233278.273 ops/s
Iteration  10: 2248891.396 ops/s
Iteration  11: 2218186.234 ops/s
Iteration  12: 2215707.362 ops/s
Iteration  13: 2217909.841 ops/s
Iteration  14: 2221573.031 ops/s
Iteration  15: 2236784.578 ops/s
Iteration  16: 2257882.347 ops/s
Iteration  17: 2250015.998 ops/s
Iteration  18: 2242173.536 ops/s
Iteration  19: 2258459.662 ops/s
Iteration  20: 2235036.825 ops/s
Iteration  21: 2243848.434 ops/s
Iteration  22: 2256201.508 ops/s
Iteration  23: 2258316.914 ops/s
Iteration  24: 2256497.576 ops/s
Iteration  25: 2251656.533 ops/s
Iteration  26: 2251189.735 ops/s
Iteration  27: 2258364.315 ops/s
Iteration  28: 2260978.308 ops/s
Iteration  29: 2265379.951 ops/s
Iteration  30: 2249171.818 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectInt":
  2245649.497 ±(99.9%) 9513.765 ops/s [Average]
  (min, avg, max) = (2215707.362, 2245649.497, 2265379.951), stdev = 14239.757
  CI (99.9%): [2236135.732, 2255163.262] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectInt  thrpt   30  2245649.497 ± 9513.765  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 935474.407 ops/s
# Warmup Iteration   2: 2327838.019 ops/s
# Warmup Iteration   3: 2212611.280 ops/s
# Warmup Iteration   4: 2072438.790 ops/s
# Warmup Iteration   5: 2349256.669 ops/s
# Warmup Iteration   6: 2344051.168 ops/s
# Warmup Iteration   7: 2355210.364 ops/s
# Warmup Iteration   8: 2331916.518 ops/s
# Warmup Iteration   9: 2336807.851 ops/s
# Warmup Iteration  10: 2335327.975 ops/s
# Warmup Iteration  11: 2324676.130 ops/s
# Warmup Iteration  12: 2337740.970 ops/s
# Warmup Iteration  13: 2335231.444 ops/s
# Warmup Iteration  14: 2349694.606 ops/s
# Warmup Iteration  15: 2346368.104 ops/s
# Warmup Iteration  16: 2346627.555 ops/s
# Warmup Iteration  17: 2350867.893 ops/s
# Warmup Iteration  18: 2342943.453 ops/s
# Warmup Iteration  19: 2349560.963 ops/s
# Warmup Iteration  20: 2338658.931 ops/s
# Warmup Iteration  21: 2341378.654 ops/s
# Warmup Iteration  22: 2344346.845 ops/s
# Warmup Iteration  23: 2348209.559 ops/s
# Warmup Iteration  24: 2354816.236 ops/s
# Warmup Iteration  25: 2347675.732 ops/s
# Warmup Iteration  26: 2335392.073 ops/s
# Warmup Iteration  27: 2339138.787 ops/s
# Warmup Iteration  28: 2345126.272 ops/s
# Warmup Iteration  29: 2337683.855 ops/s
# Warmup Iteration  30: 2334678.292 ops/s
Iteration   1: 2338695.775 ops/s
Iteration   2: 2351098.551 ops/s
Iteration   3: 2342426.870 ops/s
Iteration   4: 2345436.085 ops/s
Iteration   5: 2337547.110 ops/s
Iteration   6: 2349230.680 ops/s
Iteration   7: 2333017.229 ops/s
Iteration   8: 2341323.290 ops/s
Iteration   9: 2332284.780 ops/s
Iteration  10: 2355293.059 ops/s
Iteration  11: 2342728.485 ops/s
Iteration  12: 2340037.402 ops/s
Iteration  13: 2340228.048 ops/s
Iteration  14: 2343723.501 ops/s
Iteration  15: 2338019.972 ops/s
Iteration  16: 2337932.405 ops/s
Iteration  17: 2339022.933 ops/s
Iteration  18: 2318361.550 ops/s
Iteration  19: 2339920.608 ops/s
Iteration  20: 2334169.754 ops/s
Iteration  21: 2332824.722 ops/s
Iteration  22: 2334675.222 ops/s
Iteration  23: 2340050.601 ops/s
Iteration  24: 2340687.687 ops/s
Iteration  25: 2337004.175 ops/s
Iteration  26: 2345607.379 ops/s
Iteration  27: 2334038.815 ops/s
Iteration  28: 2347463.030 ops/s
Iteration  29: 2332632.812 ops/s
Iteration  30: 2344276.346 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectIntWithTarget":
  2339658.629 ±(99.9%) 4657.361 ops/s [Average]
  (min, avg, max) = (2318361.550, 2339658.629, 2355293.059), stdev = 6970.919
  CI (99.9%): [2335001.269, 2344315.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2339658.629 ± 4657.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 851289.891 ops/s
# Warmup Iteration   2: 2047409.161 ops/s
# Warmup Iteration   3: 1823629.494 ops/s
# Warmup Iteration   4: 1984335.144 ops/s
# Warmup Iteration   5: 2081530.929 ops/s
# Warmup Iteration   6: 2070698.591 ops/s
# Warmup Iteration   7: 2088167.356 ops/s
# Warmup Iteration   8: 2083257.231 ops/s
# Warmup Iteration   9: 2071988.365 ops/s
# Warmup Iteration  10: 2074216.637 ops/s
# Warmup Iteration  11: 2077747.123 ops/s
# Warmup Iteration  12: 2071341.019 ops/s
# Warmup Iteration  13: 2094469.957 ops/s
# Warmup Iteration  14: 2084939.193 ops/s
# Warmup Iteration  15: 2071156.578 ops/s
# Warmup Iteration  16: 2082027.301 ops/s
# Warmup Iteration  17: 2088621.027 ops/s
# Warmup Iteration  18: 2092093.700 ops/s
# Warmup Iteration  19: 2091180.208 ops/s
# Warmup Iteration  20: 2085389.792 ops/s
# Warmup Iteration  21: 2090011.981 ops/s
# Warmup Iteration  22: 2076887.945 ops/s
# Warmup Iteration  23: 2083898.501 ops/s
# Warmup Iteration  24: 2081286.569 ops/s
# Warmup Iteration  25: 2070745.769 ops/s
# Warmup Iteration  26: 2081077.010 ops/s
# Warmup Iteration  27: 2077360.359 ops/s
# Warmup Iteration  28: 2072889.758 ops/s
# Warmup Iteration  29: 2072998.346 ops/s
# Warmup Iteration  30: 2062723.794 ops/s
Iteration   1: 2070329.681 ops/s
Iteration   2: 2088270.132 ops/s
Iteration   3: 2075799.034 ops/s
Iteration   4: 2062793.671 ops/s
Iteration   5: 2062105.241 ops/s
Iteration   6: 2077309.340 ops/s
Iteration   7: 2069812.450 ops/s
Iteration   8: 2072912.160 ops/s
Iteration   9: 2078768.429 ops/s
Iteration  10: 2063941.011 ops/s
Iteration  11: 2091594.005 ops/s
Iteration  12: 2087087.344 ops/s
Iteration  13: 2080653.585 ops/s
Iteration  14: 2076558.338 ops/s
Iteration  15: 2095451.240 ops/s
Iteration  16: 2067729.321 ops/s
Iteration  17: 2076162.178 ops/s
Iteration  18: 2089843.058 ops/s
Iteration  19: 2083942.894 ops/s
Iteration  20: 2076012.511 ops/s
Iteration  21: 2091325.403 ops/s
Iteration  22: 2072188.055 ops/s
Iteration  23: 2059830.930 ops/s
Iteration  24: 2071437.934 ops/s
Iteration  25: 2073127.538 ops/s
Iteration  26: 2079165.482 ops/s
Iteration  27: 2084346.763 ops/s
Iteration  28: 2083763.106 ops/s
Iteration  29: 2085117.073 ops/s
Iteration  30: 2081402.162 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLong":
  2077626.002 ±(99.9%) 6271.448 ops/s [Average]
  (min, avg, max) = (2059830.930, 2077626.002, 2095451.240), stdev = 9386.809
  CI (99.9%): [2071354.554, 2083897.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectLong  thrpt   30  2077626.002 ± 6271.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 771539.791 ops/s
# Warmup Iteration   2: 2043666.091 ops/s
# Warmup Iteration   3: 1871755.966 ops/s
# Warmup Iteration   4: 1887520.572 ops/s
# Warmup Iteration   5: 2051234.966 ops/s
# Warmup Iteration   6: 2064447.445 ops/s
# Warmup Iteration   7: 2058130.271 ops/s
# Warmup Iteration   8: 2060696.416 ops/s
# Warmup Iteration   9: 2057495.530 ops/s
# Warmup Iteration  10: 2030759.159 ops/s
# Warmup Iteration  11: 2052639.970 ops/s
# Warmup Iteration  12: 2056513.657 ops/s
# Warmup Iteration  13: 2048628.954 ops/s
# Warmup Iteration  14: 2049588.448 ops/s
# Warmup Iteration  15: 2058023.917 ops/s
# Warmup Iteration  16: 2058188.754 ops/s
# Warmup Iteration  17: 2046951.276 ops/s
# Warmup Iteration  18: 2053435.365 ops/s
# Warmup Iteration  19: 2049764.750 ops/s
# Warmup Iteration  20: 2045418.744 ops/s
# Warmup Iteration  21: 2046350.474 ops/s
# Warmup Iteration  22: 2063783.992 ops/s
# Warmup Iteration  23: 2047923.997 ops/s
# Warmup Iteration  24: 2054978.048 ops/s
# Warmup Iteration  25: 2049974.044 ops/s
# Warmup Iteration  26: 2031017.801 ops/s
# Warmup Iteration  27: 2048302.215 ops/s
# Warmup Iteration  28: 2055867.882 ops/s
# Warmup Iteration  29: 2052089.193 ops/s
# Warmup Iteration  30: 2052637.720 ops/s
Iteration   1: 2048475.419 ops/s
Iteration   2: 2037086.828 ops/s
Iteration   3: 2054405.151 ops/s
Iteration   4: 2046698.464 ops/s
Iteration   5: 2059309.287 ops/s
Iteration   6: 2050076.758 ops/s
Iteration   7: 2049597.777 ops/s
Iteration   8: 2051112.548 ops/s
Iteration   9: 2047540.275 ops/s
Iteration  10: 2056203.217 ops/s
Iteration  11: 2066747.298 ops/s
Iteration  12: 2055663.883 ops/s
Iteration  13: 2071670.219 ops/s
Iteration  14: 2060045.215 ops/s
Iteration  15: 2057246.663 ops/s
Iteration  16: 2061332.802 ops/s
Iteration  17: 2064116.182 ops/s
Iteration  18: 2052651.504 ops/s
Iteration  19: 2042802.214 ops/s
Iteration  20: 2055873.916 ops/s
Iteration  21: 2053081.405 ops/s
Iteration  22: 2054331.188 ops/s
Iteration  23: 2065284.123 ops/s
Iteration  24: 2058067.996 ops/s
Iteration  25: 2057985.754 ops/s
Iteration  26: 2059028.200 ops/s
Iteration  27: 2043519.402 ops/s
Iteration  28: 2050846.242 ops/s
Iteration  29: 2064800.320 ops/s
Iteration  30: 2059145.502 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectLongWithTarget":
  2055158.192 ±(99.9%) 5127.397 ops/s [Average]
  (min, avg, max) = (2037086.828, 2055158.192, 2071670.219), stdev = 7674.447
  CI (99.9%): [2050030.795, 2060285.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2055158.192 ± 5127.397  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575523.789 ops/s
# Warmup Iteration   2: 1315247.829 ops/s
# Warmup Iteration   3: 1316721.875 ops/s
# Warmup Iteration   4: 1093847.061 ops/s
# Warmup Iteration   5: 1309564.253 ops/s
# Warmup Iteration   6: 1307333.899 ops/s
# Warmup Iteration   7: 1304314.406 ops/s
# Warmup Iteration   8: 1318686.184 ops/s
# Warmup Iteration   9: 1324050.499 ops/s
# Warmup Iteration  10: 1303780.838 ops/s
# Warmup Iteration  11: 1312515.850 ops/s
# Warmup Iteration  12: 1307550.634 ops/s
# Warmup Iteration  13: 1311890.422 ops/s
# Warmup Iteration  14: 1307851.059 ops/s
# Warmup Iteration  15: 1305012.498 ops/s
# Warmup Iteration  16: 1305070.359 ops/s
# Warmup Iteration  17: 1310418.048 ops/s
# Warmup Iteration  18: 1305349.158 ops/s
# Warmup Iteration  19: 1308664.235 ops/s
# Warmup Iteration  20: 1305652.078 ops/s
# Warmup Iteration  21: 1307079.462 ops/s
# Warmup Iteration  22: 1310551.561 ops/s
# Warmup Iteration  23: 1316947.661 ops/s
# Warmup Iteration  24: 1310638.969 ops/s
# Warmup Iteration  25: 1308261.301 ops/s
# Warmup Iteration  26: 1304176.132 ops/s
# Warmup Iteration  27: 1300311.056 ops/s
# Warmup Iteration  28: 1298221.716 ops/s
# Warmup Iteration  29: 1307175.499 ops/s
# Warmup Iteration  30: 1303933.613 ops/s
Iteration   1: 1292533.715 ops/s
Iteration   2: 1298917.558 ops/s
Iteration   3: 1330272.715 ops/s
Iteration   4: 1308385.745 ops/s
Iteration   5: 1301051.312 ops/s
Iteration   6: 1313724.680 ops/s
Iteration   7: 1308732.479 ops/s
Iteration   8: 1306795.557 ops/s
Iteration   9: 1306200.182 ops/s
Iteration  10: 1308667.762 ops/s
Iteration  11: 1309541.211 ops/s
Iteration  12: 1295686.727 ops/s
Iteration  13: 1316461.226 ops/s
Iteration  14: 1305319.429 ops/s
Iteration  15: 1320546.365 ops/s
Iteration  16: 1318992.985 ops/s
Iteration  17: 1314399.158 ops/s
Iteration  18: 1301250.342 ops/s
Iteration  19: 1312126.741 ops/s
Iteration  20: 1301312.057 ops/s
Iteration  21: 1299696.140 ops/s
Iteration  22: 1311135.426 ops/s
Iteration  23: 1304527.905 ops/s
Iteration  24: 1303960.366 ops/s
Iteration  25: 1314831.650 ops/s
Iteration  26: 1302252.077 ops/s
Iteration  27: 1306311.290 ops/s
Iteration  28: 1299611.860 ops/s
Iteration  29: 1303100.274 ops/s
Iteration  30: 1307051.538 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectMap":
  1307446.549 ±(99.9%) 5321.439 ops/s [Average]
  (min, avg, max) = (1292533.715, 1307446.549, 1330272.715), stdev = 7964.880
  CI (99.9%): [1302125.110, 1312767.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectMap  thrpt   30  1307446.549 ± 5321.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 933713.736 ops/s
# Warmup Iteration   2: 2333280.949 ops/s
# Warmup Iteration   3: 2241871.123 ops/s
# Warmup Iteration   4: 2018555.266 ops/s
# Warmup Iteration   5: 2332698.303 ops/s
# Warmup Iteration   6: 2321363.503 ops/s
# Warmup Iteration   7: 2329285.834 ops/s
# Warmup Iteration   8: 2331588.894 ops/s
# Warmup Iteration   9: 2318461.542 ops/s
# Warmup Iteration  10: 2325800.610 ops/s
# Warmup Iteration  11: 2330263.420 ops/s
# Warmup Iteration  12: 2325201.944 ops/s
# Warmup Iteration  13: 2337639.302 ops/s
# Warmup Iteration  14: 2332754.323 ops/s
# Warmup Iteration  15: 2329284.652 ops/s
# Warmup Iteration  16: 2322650.999 ops/s
# Warmup Iteration  17: 2339598.308 ops/s
# Warmup Iteration  18: 2329994.402 ops/s
# Warmup Iteration  19: 2321333.371 ops/s
# Warmup Iteration  20: 2319541.709 ops/s
# Warmup Iteration  21: 2325547.965 ops/s
# Warmup Iteration  22: 2325377.107 ops/s
# Warmup Iteration  23: 2325544.513 ops/s
# Warmup Iteration  24: 2323848.886 ops/s
# Warmup Iteration  25: 2301332.123 ops/s
# Warmup Iteration  26: 2317826.539 ops/s
# Warmup Iteration  27: 2333186.128 ops/s
# Warmup Iteration  28: 2337695.315 ops/s
# Warmup Iteration  29: 2329367.260 ops/s
# Warmup Iteration  30: 2332463.856 ops/s
Iteration   1: 2338107.941 ops/s
Iteration   2: 2327371.762 ops/s
Iteration   3: 2339229.280 ops/s
Iteration   4: 2325744.290 ops/s
Iteration   5: 2348824.308 ops/s
Iteration   6: 2320270.877 ops/s
Iteration   7: 2339376.876 ops/s
Iteration   8: 2329649.749 ops/s
Iteration   9: 2331433.533 ops/s
Iteration  10: 2316627.407 ops/s
Iteration  11: 2332029.575 ops/s
Iteration  12: 2317791.428 ops/s
Iteration  13: 2332326.091 ops/s
Iteration  14: 2327286.764 ops/s
Iteration  15: 2325408.152 ops/s
Iteration  16: 2320216.647 ops/s
Iteration  17: 2312725.394 ops/s
Iteration  18: 2323951.471 ops/s
Iteration  19: 2318351.323 ops/s
Iteration  20: 2328941.195 ops/s
Iteration  21: 2334892.521 ops/s
Iteration  22: 2341347.865 ops/s
Iteration  23: 2351098.108 ops/s
Iteration  24: 2331738.676 ops/s
Iteration  25: 2330863.291 ops/s
Iteration  26: 2323101.770 ops/s
Iteration  27: 2321994.373 ops/s
Iteration  28: 2335772.421 ops/s
Iteration  29: 2317639.540 ops/s
Iteration  30: 2329970.043 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShort":
  2329136.089 ±(99.9%) 6234.735 ops/s [Average]
  (min, avg, max) = (2312725.394, 2329136.089, 2351098.108), stdev = 9331.858
  CI (99.9%): [2322901.354, 2335370.824] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectShort  thrpt   30  2329136.089 ± 6234.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 885163.912 ops/s
# Warmup Iteration   2: 2261117.228 ops/s
# Warmup Iteration   3: 2271052.754 ops/s
# Warmup Iteration   4: 1905064.470 ops/s
# Warmup Iteration   5: 2282431.429 ops/s
# Warmup Iteration   6: 2287123.148 ops/s
# Warmup Iteration   7: 2284799.681 ops/s
# Warmup Iteration   8: 2296543.628 ops/s
# Warmup Iteration   9: 2288168.753 ops/s
# Warmup Iteration  10: 2264654.247 ops/s
# Warmup Iteration  11: 2282365.198 ops/s
# Warmup Iteration  12: 2283017.410 ops/s
# Warmup Iteration  13: 2289915.006 ops/s
# Warmup Iteration  14: 2290753.305 ops/s
# Warmup Iteration  15: 2290807.042 ops/s
# Warmup Iteration  16: 2295806.514 ops/s
# Warmup Iteration  17: 2285938.726 ops/s
# Warmup Iteration  18: 2282233.328 ops/s
# Warmup Iteration  19: 2272292.288 ops/s
# Warmup Iteration  20: 2294146.591 ops/s
# Warmup Iteration  21: 2306130.174 ops/s
# Warmup Iteration  22: 2303688.086 ops/s
# Warmup Iteration  23: 2281547.270 ops/s
# Warmup Iteration  24: 2287430.234 ops/s
# Warmup Iteration  25: 2293496.589 ops/s
# Warmup Iteration  26: 2281040.735 ops/s
# Warmup Iteration  27: 2302533.839 ops/s
# Warmup Iteration  28: 2297141.098 ops/s
# Warmup Iteration  29: 2291875.792 ops/s
# Warmup Iteration  30: 2297528.062 ops/s
Iteration   1: 2302872.382 ops/s
Iteration   2: 2289638.238 ops/s
Iteration   3: 2293745.817 ops/s
Iteration   4: 2304018.232 ops/s
Iteration   5: 2286226.841 ops/s
Iteration   6: 2278689.306 ops/s
Iteration   7: 2296512.875 ops/s
Iteration   8: 2288119.920 ops/s
Iteration   9: 2287339.879 ops/s
Iteration  10: 2282967.031 ops/s
Iteration  11: 2281015.897 ops/s
Iteration  12: 2297928.074 ops/s
Iteration  13: 2292673.151 ops/s
Iteration  14: 2316257.399 ops/s
Iteration  15: 2287618.885 ops/s
Iteration  16: 2288152.638 ops/s
Iteration  17: 2317742.942 ops/s
Iteration  18: 2282752.128 ops/s
Iteration  19: 2279906.627 ops/s
Iteration  20: 2295993.307 ops/s
Iteration  21: 2298597.204 ops/s
Iteration  22: 2311510.711 ops/s
Iteration  23: 2293493.309 ops/s
Iteration  24: 2289144.397 ops/s
Iteration  25: 2291080.901 ops/s
Iteration  26: 2318190.230 ops/s
Iteration  27: 2288195.089 ops/s
Iteration  28: 2285598.780 ops/s
Iteration  29: 2285006.564 ops/s
Iteration  30: 2311719.148 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectShortWithTarget":
  2294090.263 ±(99.9%) 7640.930 ops/s [Average]
  (min, avg, max) = (2278689.306, 2294090.263, 2318190.230), stdev = 11436.585
  CI (99.9%): [2286449.334, 2301731.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2294090.263 ± 7640.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 699019.860 ops/s
# Warmup Iteration   2: 1560858.126 ops/s
# Warmup Iteration   3: 1564463.373 ops/s
# Warmup Iteration   4: 1298737.202 ops/s
# Warmup Iteration   5: 1569261.531 ops/s
# Warmup Iteration   6: 1560618.957 ops/s
# Warmup Iteration   7: 1564248.499 ops/s
# Warmup Iteration   8: 1573151.484 ops/s
# Warmup Iteration   9: 1549173.956 ops/s
# Warmup Iteration  10: 1558906.656 ops/s
# Warmup Iteration  11: 1564701.730 ops/s
# Warmup Iteration  12: 1556484.685 ops/s
# Warmup Iteration  13: 1563491.635 ops/s
# Warmup Iteration  14: 1557203.376 ops/s
# Warmup Iteration  15: 1557084.642 ops/s
# Warmup Iteration  16: 1546948.681 ops/s
# Warmup Iteration  17: 1556822.626 ops/s
# Warmup Iteration  18: 1551448.463 ops/s
# Warmup Iteration  19: 1566974.912 ops/s
# Warmup Iteration  20: 1558903.912 ops/s
# Warmup Iteration  21: 1548239.641 ops/s
# Warmup Iteration  22: 1559226.218 ops/s
# Warmup Iteration  23: 1558537.722 ops/s
# Warmup Iteration  24: 1548992.080 ops/s
# Warmup Iteration  25: 1551242.916 ops/s
# Warmup Iteration  26: 1549816.388 ops/s
# Warmup Iteration  27: 1546680.034 ops/s
# Warmup Iteration  28: 1551100.407 ops/s
# Warmup Iteration  29: 1546695.464 ops/s
# Warmup Iteration  30: 1548857.821 ops/s
Iteration   1: 1554476.567 ops/s
Iteration   2: 1549740.287 ops/s
Iteration   3: 1550849.182 ops/s
Iteration   4: 1572663.417 ops/s
Iteration   5: 1559563.583 ops/s
Iteration   6: 1539206.318 ops/s
Iteration   7: 1558685.659 ops/s
Iteration   8: 1554003.793 ops/s
Iteration   9: 1572269.805 ops/s
Iteration  10: 1566746.073 ops/s
Iteration  11: 1562630.494 ops/s
Iteration  12: 1552931.643 ops/s
Iteration  13: 1552650.343 ops/s
Iteration  14: 1545413.391 ops/s
Iteration  15: 1574819.813 ops/s
Iteration  16: 1549400.317 ops/s
Iteration  17: 1551070.471 ops/s
Iteration  18: 1551605.064 ops/s
Iteration  19: 1543827.760 ops/s
Iteration  20: 1541509.848 ops/s
Iteration  21: 1564767.940 ops/s
Iteration  22: 1548386.531 ops/s
Iteration  23: 1542543.416 ops/s
Iteration  24: 1562436.166 ops/s
Iteration  25: 1555506.609 ops/s
Iteration  26: 1560055.525 ops/s
Iteration  27: 1561842.956 ops/s
Iteration  28: 1552636.596 ops/s
Iteration  29: 1555947.464 ops/s
Iteration  30: 1553104.840 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectValues":
  1555376.396 ±(99.9%) 6108.483 ops/s [Average]
  (min, avg, max) = (1539206.318, 1555376.396, 1574819.813), stdev = 9142.891
  CI (99.9%): [1549267.912, 1561484.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectValues  thrpt   30  1555376.396 ± 6108.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847709.526 ops/s
# Warmup Iteration   2: 2054098.168 ops/s
# Warmup Iteration   3: 2117579.919 ops/s
# Warmup Iteration   4: 1737837.651 ops/s
# Warmup Iteration   5: 2115288.986 ops/s
# Warmup Iteration   6: 2093849.700 ops/s
# Warmup Iteration   7: 2122106.519 ops/s
# Warmup Iteration   8: 2092663.802 ops/s
# Warmup Iteration   9: 2099850.354 ops/s
# Warmup Iteration  10: 2127871.908 ops/s
# Warmup Iteration  11: 2124232.932 ops/s
# Warmup Iteration  12: 2120108.253 ops/s
# Warmup Iteration  13: 2127473.764 ops/s
# Warmup Iteration  14: 2094507.159 ops/s
# Warmup Iteration  15: 2103272.549 ops/s
# Warmup Iteration  16: 2096565.583 ops/s
# Warmup Iteration  17: 2127633.068 ops/s
# Warmup Iteration  18: 2108915.263 ops/s
# Warmup Iteration  19: 2103704.487 ops/s
# Warmup Iteration  20: 2105485.613 ops/s
# Warmup Iteration  21: 2112805.977 ops/s
# Warmup Iteration  22: 2096085.251 ops/s
# Warmup Iteration  23: 2110230.700 ops/s
# Warmup Iteration  24: 2113078.363 ops/s
# Warmup Iteration  25: 2131989.974 ops/s
# Warmup Iteration  26: 2123162.592 ops/s
# Warmup Iteration  27: 2098749.119 ops/s
# Warmup Iteration  28: 2115563.792 ops/s
# Warmup Iteration  29: 2119203.459 ops/s
# Warmup Iteration  30: 2124676.073 ops/s
Iteration   1: 2092744.561 ops/s
Iteration   2: 2115463.471 ops/s
Iteration   3: 2134464.680 ops/s
Iteration   4: 2111303.698 ops/s
Iteration   5: 2113419.812 ops/s
Iteration   6: 2121968.837 ops/s
Iteration   7: 2118862.540 ops/s
Iteration   8: 2135713.548 ops/s
Iteration   9: 2099285.635 ops/s
Iteration  10: 2098085.390 ops/s
Iteration  11: 2122173.472 ops/s
Iteration  12: 2119002.116 ops/s
Iteration  13: 2101960.818 ops/s
Iteration  14: 2088662.750 ops/s
Iteration  15: 2110446.304 ops/s
Iteration  16: 2094851.667 ops/s
Iteration  17: 2128680.139 ops/s
Iteration  18: 2135622.512 ops/s
Iteration  19: 2125025.085 ops/s
Iteration  20: 2116299.876 ops/s
Iteration  21: 2139554.394 ops/s
Iteration  22: 2108513.355 ops/s
Iteration  23: 2085766.343 ops/s
Iteration  24: 2115429.394 ops/s
Iteration  25: 2110694.483 ops/s
Iteration  26: 2105616.855 ops/s
Iteration  27: 2118770.568 ops/s
Iteration  28: 2115327.672 ops/s
Iteration  29: 2139779.933 ops/s
Iteration  30: 2122149.379 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWith":
  2114854.643 ±(99.9%) 9826.903 ops/s [Average]
  (min, avg, max) = (2085766.343, 2114854.643, 2139779.933), stdev = 14708.447
  CI (99.9%): [2105027.740, 2124681.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectWith  thrpt   30  2114854.643 ± 9826.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1429837.904 ops/s
# Warmup Iteration   2: 3389512.085 ops/s
# Warmup Iteration   3: 3096917.458 ops/s
# Warmup Iteration   4: 3156846.889 ops/s
# Warmup Iteration   5: 3386964.580 ops/s
# Warmup Iteration   6: 3400290.445 ops/s
# Warmup Iteration   7: 3427985.723 ops/s
# Warmup Iteration   8: 3397881.877 ops/s
# Warmup Iteration   9: 3386517.670 ops/s
# Warmup Iteration  10: 3378343.905 ops/s
# Warmup Iteration  11: 3410204.208 ops/s
# Warmup Iteration  12: 3418134.946 ops/s
# Warmup Iteration  13: 3416805.609 ops/s
# Warmup Iteration  14: 3428539.003 ops/s
# Warmup Iteration  15: 3384266.122 ops/s
# Warmup Iteration  16: 3404772.644 ops/s
# Warmup Iteration  17: 3359205.306 ops/s
# Warmup Iteration  18: 3423668.212 ops/s
# Warmup Iteration  19: 3374912.051 ops/s
# Warmup Iteration  20: 3366093.620 ops/s
# Warmup Iteration  21: 3430664.273 ops/s
# Warmup Iteration  22: 3406980.153 ops/s
# Warmup Iteration  23: 3388690.302 ops/s
# Warmup Iteration  24: 3411460.663 ops/s
# Warmup Iteration  25: 3432771.480 ops/s
# Warmup Iteration  26: 3443119.233 ops/s
# Warmup Iteration  27: 3439948.847 ops/s
# Warmup Iteration  28: 3401717.034 ops/s
# Warmup Iteration  29: 3417470.018 ops/s
# Warmup Iteration  30: 3432922.036 ops/s
Iteration   1: 3429515.319 ops/s
Iteration   2: 3411488.952 ops/s
Iteration   3: 3406414.268 ops/s
Iteration   4: 3407191.546 ops/s
Iteration   5: 3379756.072 ops/s
Iteration   6: 3407225.339 ops/s
Iteration   7: 3419112.118 ops/s
Iteration   8: 3422066.885 ops/s
Iteration   9: 3439095.704 ops/s
Iteration  10: 3414733.852 ops/s
Iteration  11: 3425489.416 ops/s
Iteration  12: 3416315.608 ops/s
Iteration  13: 3386120.937 ops/s
Iteration  14: 3391113.985 ops/s
Iteration  15: 3429591.239 ops/s
Iteration  16: 3483353.534 ops/s
Iteration  17: 3413923.720 ops/s
Iteration  18: 3410628.225 ops/s
Iteration  19: 3412804.972 ops/s
Iteration  20: 3393350.757 ops/s
Iteration  21: 3423259.476 ops/s
Iteration  22: 3400039.067 ops/s
Iteration  23: 3387649.632 ops/s
Iteration  24: 3397482.519 ops/s
Iteration  25: 3489759.117 ops/s
Iteration  26: 3433301.908 ops/s
Iteration  27: 3433902.223 ops/s
Iteration  28: 3429252.470 ops/s
Iteration  29: 3388708.829 ops/s
Iteration  30: 3396532.106 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collectWithToTarget":
  3415972.660 ±(99.9%) 16662.768 ops/s [Average]
  (min, avg, max) = (3379756.072, 3415972.660, 3489759.117), stdev = 24940.048
  CI (99.9%): [3399309.892, 3432635.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collectWithToTarget  thrpt   30  3415972.660 ± 16662.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495743.351 ops/s
# Warmup Iteration   2: 1159556.569 ops/s
# Warmup Iteration   3: 1218020.840 ops/s
# Warmup Iteration   4: 1050438.155 ops/s
# Warmup Iteration   5: 1171970.414 ops/s
# Warmup Iteration   6: 1217114.339 ops/s
# Warmup Iteration   7: 1216508.508 ops/s
# Warmup Iteration   8: 1213196.438 ops/s
# Warmup Iteration   9: 1210453.172 ops/s
# Warmup Iteration  10: 1211366.891 ops/s
# Warmup Iteration  11: 1218897.677 ops/s
# Warmup Iteration  12: 1211502.743 ops/s
# Warmup Iteration  13: 1223756.740 ops/s
# Warmup Iteration  14: 1217902.666 ops/s
# Warmup Iteration  15: 1216865.504 ops/s
# Warmup Iteration  16: 1211274.664 ops/s
# Warmup Iteration  17: 1216188.098 ops/s
# Warmup Iteration  18: 1211546.853 ops/s
# Warmup Iteration  19: 1214454.096 ops/s
# Warmup Iteration  20: 1216849.509 ops/s
# Warmup Iteration  21: 1226092.591 ops/s
# Warmup Iteration  22: 1214246.284 ops/s
# Warmup Iteration  23: 1219277.911 ops/s
# Warmup Iteration  24: 1224428.705 ops/s
# Warmup Iteration  25: 1223078.944 ops/s
# Warmup Iteration  26: 1214796.087 ops/s
# Warmup Iteration  27: 1216877.217 ops/s
# Warmup Iteration  28: 1213451.161 ops/s
# Warmup Iteration  29: 1211587.404 ops/s
# Warmup Iteration  30: 1219888.116 ops/s
Iteration   1: 1215530.164 ops/s
Iteration   2: 1227229.012 ops/s
Iteration   3: 1226461.813 ops/s
Iteration   4: 1209685.436 ops/s
Iteration   5: 1211202.775 ops/s
Iteration   6: 1220176.698 ops/s
Iteration   7: 1211802.238 ops/s
Iteration   8: 1228779.034 ops/s
Iteration   9: 1230018.037 ops/s
Iteration  10: 1220242.452 ops/s
Iteration  11: 1212731.297 ops/s
Iteration  12: 1202013.780 ops/s
Iteration  13: 1205617.556 ops/s
Iteration  14: 1205814.080 ops/s
Iteration  15: 1224783.586 ops/s
Iteration  16: 1214198.880 ops/s
Iteration  17: 1210237.882 ops/s
Iteration  18: 1226992.427 ops/s
Iteration  19: 1224341.447 ops/s
Iteration  20: 1214417.226 ops/s
Iteration  21: 1220049.390 ops/s
Iteration  22: 1215074.969 ops/s
Iteration  23: 1217771.692 ops/s
Iteration  24: 1220979.049 ops/s
Iteration  25: 1232978.856 ops/s
Iteration  26: 1219106.880 ops/s
Iteration  27: 1226023.978 ops/s
Iteration  28: 1214206.020 ops/s
Iteration  29: 1208539.629 ops/s
Iteration  30: 1218713.792 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_collect_value":
  1217857.336 ±(99.9%) 5325.040 ops/s [Average]
  (min, avg, max) = (1202013.780, 1217857.336, 1232978.856), stdev = 7970.270
  CI (99.9%): [1212532.296, 1223182.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_collect_value  thrpt   30  1217857.336 ± 5325.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3148844.673 ops/s
# Warmup Iteration   2: 6739019.062 ops/s
# Warmup Iteration   3: 5675198.050 ops/s
# Warmup Iteration   4: 6793600.836 ops/s
# Warmup Iteration   5: 6748487.218 ops/s
# Warmup Iteration   6: 6745680.568 ops/s
# Warmup Iteration   7: 6738452.935 ops/s
# Warmup Iteration   8: 6779666.377 ops/s
# Warmup Iteration   9: 6744397.066 ops/s
# Warmup Iteration  10: 6742067.532 ops/s
# Warmup Iteration  11: 6745742.881 ops/s
# Warmup Iteration  12: 6759396.469 ops/s
# Warmup Iteration  13: 6806276.222 ops/s
# Warmup Iteration  14: 6743519.577 ops/s
# Warmup Iteration  15: 6714299.049 ops/s
# Warmup Iteration  16: 6730657.825 ops/s
# Warmup Iteration  17: 6808668.146 ops/s
# Warmup Iteration  18: 6802475.303 ops/s
# Warmup Iteration  19: 6807739.917 ops/s
# Warmup Iteration  20: 6799242.974 ops/s
# Warmup Iteration  21: 6827420.214 ops/s
# Warmup Iteration  22: 6775667.316 ops/s
# Warmup Iteration  23: 6812589.698 ops/s
# Warmup Iteration  24: 6819032.666 ops/s
# Warmup Iteration  25: 6819608.122 ops/s
# Warmup Iteration  26: 6811215.257 ops/s
# Warmup Iteration  27: 6799612.439 ops/s
# Warmup Iteration  28: 6817075.306 ops/s
# Warmup Iteration  29: 6827160.812 ops/s
# Warmup Iteration  30: 6814444.316 ops/s
Iteration   1: 6810458.353 ops/s
Iteration   2: 6801625.692 ops/s
Iteration   3: 6804196.128 ops/s
Iteration   4: 6780234.930 ops/s
Iteration   5: 6809340.072 ops/s
Iteration   6: 6826609.305 ops/s
Iteration   7: 6797940.818 ops/s
Iteration   8: 6779433.001 ops/s
Iteration   9: 6817886.725 ops/s
Iteration  10: 6767020.561 ops/s
Iteration  11: 6734787.837 ops/s
Iteration  12: 6794169.344 ops/s
Iteration  13: 6840716.941 ops/s
Iteration  14: 6835826.336 ops/s
Iteration  15: 6816506.412 ops/s
Iteration  16: 6775658.398 ops/s
Iteration  17: 6795266.889 ops/s
Iteration  18: 6792021.954 ops/s
Iteration  19: 6814962.040 ops/s
Iteration  20: 6815031.895 ops/s
Iteration  21: 6830193.183 ops/s
Iteration  22: 6776550.981 ops/s
Iteration  23: 6767177.494 ops/s
Iteration  24: 6840688.945 ops/s
Iteration  25: 6844161.562 ops/s
Iteration  26: 6822290.567 ops/s
Iteration  27: 6768378.813 ops/s
Iteration  28: 6798769.471 ops/s
Iteration  29: 6780284.637 ops/s
Iteration  30: 6774905.632 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_contains":
  6800436.497 ±(99.9%) 17735.237 ops/s [Average]
  (min, avg, max) = (6734787.837, 6800436.497, 6844161.562), stdev = 26545.270
  CI (99.9%): [6782701.260, 6818171.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_contains  thrpt   30  6800436.497 ± 17735.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519336.692 ops/s
# Warmup Iteration   2: 633827.023 ops/s
# Warmup Iteration   3: 824638.876 ops/s
# Warmup Iteration   4: 822294.505 ops/s
# Warmup Iteration   5: 819497.240 ops/s
# Warmup Iteration   6: 818232.438 ops/s
# Warmup Iteration   7: 822203.593 ops/s
# Warmup Iteration   8: 825074.508 ops/s
# Warmup Iteration   9: 731964.738 ops/s
# Warmup Iteration  10: 772177.730 ops/s
# Warmup Iteration  11: 823590.893 ops/s
# Warmup Iteration  12: 826390.685 ops/s
# Warmup Iteration  13: 822185.529 ops/s
# Warmup Iteration  14: 818059.024 ops/s
# Warmup Iteration  15: 825569.427 ops/s
# Warmup Iteration  16: 826192.655 ops/s
# Warmup Iteration  17: 825276.900 ops/s
# Warmup Iteration  18: 820233.390 ops/s
# Warmup Iteration  19: 822243.109 ops/s
# Warmup Iteration  20: 818617.705 ops/s
# Warmup Iteration  21: 820263.761 ops/s
# Warmup Iteration  22: 825508.588 ops/s
# Warmup Iteration  23: 824469.720 ops/s
# Warmup Iteration  24: 818375.411 ops/s
# Warmup Iteration  25: 825319.457 ops/s
# Warmup Iteration  26: 821305.007 ops/s
# Warmup Iteration  27: 822863.561 ops/s
# Warmup Iteration  28: 824766.004 ops/s
# Warmup Iteration  29: 821555.327 ops/s
# Warmup Iteration  30: 824190.931 ops/s
Iteration   1: 823694.566 ops/s
Iteration   2: 824649.952 ops/s
Iteration   3: 822779.524 ops/s
Iteration   4: 821524.236 ops/s
Iteration   5: 823516.277 ops/s
Iteration   6: 825027.656 ops/s
Iteration   7: 824174.023 ops/s
Iteration   8: 822978.591 ops/s
Iteration   9: 818914.002 ops/s
Iteration  10: 821419.091 ops/s
Iteration  11: 823620.673 ops/s
Iteration  12: 814730.118 ops/s
Iteration  13: 825278.196 ops/s
Iteration  14: 825995.868 ops/s
Iteration  15: 824326.504 ops/s
Iteration  16: 823694.851 ops/s
Iteration  17: 824371.591 ops/s
Iteration  18: 826472.612 ops/s
Iteration  19: 824273.092 ops/s
Iteration  20: 826074.614 ops/s
Iteration  21: 821142.801 ops/s
Iteration  22: 828607.577 ops/s
Iteration  23: 826169.892 ops/s
Iteration  24: 821483.844 ops/s
Iteration  25: 825107.312 ops/s
Iteration  26: 828252.135 ops/s
Iteration  27: 825927.269 ops/s
Iteration  28: 823104.196 ops/s
Iteration  29: 825551.942 ops/s
Iteration  30: 822057.142 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAll":
  823830.672 ±(99.9%) 1819.700 ops/s [Average]
  (min, avg, max) = (814730.118, 823830.672, 828607.577), stdev = 2723.641
  CI (99.9%): [822010.972, 825650.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsAll  thrpt   30  823830.672 ± 1819.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 868420.613 ops/s
# Warmup Iteration   2: 1333517.914 ops/s
# Warmup Iteration   3: 1567411.880 ops/s
# Warmup Iteration   4: 1575617.061 ops/s
# Warmup Iteration   5: 1576477.787 ops/s
# Warmup Iteration   6: 1580357.767 ops/s
# Warmup Iteration   7: 1304463.739 ops/s
# Warmup Iteration   8: 1576180.686 ops/s
# Warmup Iteration   9: 1580935.054 ops/s
# Warmup Iteration  10: 1579402.855 ops/s
# Warmup Iteration  11: 1577838.178 ops/s
# Warmup Iteration  12: 1586665.071 ops/s
# Warmup Iteration  13: 1581667.385 ops/s
# Warmup Iteration  14: 1583932.431 ops/s
# Warmup Iteration  15: 1583514.539 ops/s
# Warmup Iteration  16: 1586251.708 ops/s
# Warmup Iteration  17: 1585397.578 ops/s
# Warmup Iteration  18: 1582805.705 ops/s
# Warmup Iteration  19: 1578025.766 ops/s
# Warmup Iteration  20: 1580274.693 ops/s
# Warmup Iteration  21: 1572970.643 ops/s
# Warmup Iteration  22: 1584344.662 ops/s
# Warmup Iteration  23: 1589080.168 ops/s
# Warmup Iteration  24: 1579051.629 ops/s
# Warmup Iteration  25: 1580214.034 ops/s
# Warmup Iteration  26: 1583817.146 ops/s
# Warmup Iteration  27: 1579303.226 ops/s
# Warmup Iteration  28: 1584434.279 ops/s
# Warmup Iteration  29: 1583765.752 ops/s
# Warmup Iteration  30: 1586649.698 ops/s
Iteration   1: 1590483.211 ops/s
Iteration   2: 1586281.369 ops/s
Iteration   3: 1586543.350 ops/s
Iteration   4: 1582164.188 ops/s
Iteration   5: 1586791.940 ops/s
Iteration   6: 1582855.845 ops/s
Iteration   7: 1576300.653 ops/s
Iteration   8: 1574828.247 ops/s
Iteration   9: 1583181.796 ops/s
Iteration  10: 1585776.107 ops/s
Iteration  11: 1578298.796 ops/s
Iteration  12: 1585077.677 ops/s
Iteration  13: 1582868.531 ops/s
Iteration  14: 1582901.093 ops/s
Iteration  15: 1588524.466 ops/s
Iteration  16: 1583510.034 ops/s
Iteration  17: 1583441.248 ops/s
Iteration  18: 1571055.557 ops/s
Iteration  19: 1588051.475 ops/s
Iteration  20: 1578668.891 ops/s
Iteration  21: 1590717.283 ops/s
Iteration  22: 1589708.360 ops/s
Iteration  23: 1586849.419 ops/s
Iteration  24: 1579259.154 ops/s
Iteration  25: 1591321.709 ops/s
Iteration  26: 1578111.454 ops/s
Iteration  27: 1584259.920 ops/s
Iteration  28: 1575019.124 ops/s
Iteration  29: 1577323.500 ops/s
Iteration  30: 1583977.465 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllArguments":
  1583138.395 ±(99.9%) 3470.702 ops/s [Average]
  (min, avg, max) = (1571055.557, 1583138.395, 1591321.709), stdev = 5194.784
  CI (99.9%): [1579667.693, 1586609.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsAllArguments  thrpt   30  1583138.395 ± 3470.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 864681.815 ops/s
# Warmup Iteration   2: 1343278.858 ops/s
# Warmup Iteration   3: 1584499.968 ops/s
# Warmup Iteration   4: 1600245.938 ops/s
# Warmup Iteration   5: 1595485.693 ops/s
# Warmup Iteration   6: 1598112.283 ops/s
# Warmup Iteration   7: 1310894.716 ops/s
# Warmup Iteration   8: 1603132.122 ops/s
# Warmup Iteration   9: 1597560.052 ops/s
# Warmup Iteration  10: 1597778.193 ops/s
# Warmup Iteration  11: 1603312.345 ops/s
# Warmup Iteration  12: 1599115.853 ops/s
# Warmup Iteration  13: 1594074.676 ops/s
# Warmup Iteration  14: 1595972.364 ops/s
# Warmup Iteration  15: 1598341.701 ops/s
# Warmup Iteration  16: 1603825.240 ops/s
# Warmup Iteration  17: 1603255.011 ops/s
# Warmup Iteration  18: 1596364.727 ops/s
# Warmup Iteration  19: 1600580.432 ops/s
# Warmup Iteration  20: 1590456.975 ops/s
# Warmup Iteration  21: 1600290.306 ops/s
# Warmup Iteration  22: 1601551.616 ops/s
# Warmup Iteration  23: 1602587.454 ops/s
# Warmup Iteration  24: 1604212.773 ops/s
# Warmup Iteration  25: 1597438.933 ops/s
# Warmup Iteration  26: 1605534.095 ops/s
# Warmup Iteration  27: 1609469.938 ops/s
# Warmup Iteration  28: 1601438.066 ops/s
# Warmup Iteration  29: 1605365.725 ops/s
# Warmup Iteration  30: 1601522.650 ops/s
Iteration   1: 1603378.127 ops/s
Iteration   2: 1601258.876 ops/s
Iteration   3: 1572235.859 ops/s
Iteration   4: 1609638.007 ops/s
Iteration   5: 1590455.883 ops/s
Iteration   6: 1599377.571 ops/s
Iteration   7: 1604235.915 ops/s
Iteration   8: 1597144.207 ops/s
Iteration   9: 1577440.221 ops/s
Iteration  10: 1592683.587 ops/s
Iteration  11: 1596443.410 ops/s
Iteration  12: 1600197.055 ops/s
Iteration  13: 1602173.865 ops/s
Iteration  14: 1598450.937 ops/s
Iteration  15: 1601410.181 ops/s
Iteration  16: 1600187.556 ops/s
Iteration  17: 1598539.344 ops/s
Iteration  18: 1596575.141 ops/s
Iteration  19: 1601297.842 ops/s
Iteration  20: 1595477.549 ops/s
Iteration  21: 1601718.489 ops/s
Iteration  22: 1594920.799 ops/s
Iteration  23: 1584906.435 ops/s
Iteration  24: 1590571.700 ops/s
Iteration  25: 1604825.923 ops/s
Iteration  26: 1604330.677 ops/s
Iteration  27: 1586724.129 ops/s
Iteration  28: 1594621.968 ops/s
Iteration  29: 1599382.289 ops/s
Iteration  30: 1592957.793 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAllIterable":
  1596452.044 ±(99.9%) 5378.825 ops/s [Average]
  (min, avg, max) = (1572235.859, 1596452.044, 1609638.007), stdev = 8050.772
  CI (99.9%): [1591073.220, 1601830.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsAllIterable  thrpt   30  1596452.044 ± 5378.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451090.773 ops/s
# Warmup Iteration   2: 538561.234 ops/s
# Warmup Iteration   3: 707855.625 ops/s
# Warmup Iteration   4: 702016.048 ops/s
# Warmup Iteration   5: 706178.160 ops/s
# Warmup Iteration   6: 708962.067 ops/s
# Warmup Iteration   7: 709466.501 ops/s
# Warmup Iteration   8: 712902.954 ops/s
# Warmup Iteration   9: 704965.179 ops/s
# Warmup Iteration  10: 593981.969 ops/s
# Warmup Iteration  11: 714165.902 ops/s
# Warmup Iteration  12: 710815.658 ops/s
# Warmup Iteration  13: 707742.536 ops/s
# Warmup Iteration  14: 708606.555 ops/s
# Warmup Iteration  15: 708656.585 ops/s
# Warmup Iteration  16: 711230.077 ops/s
# Warmup Iteration  17: 713944.633 ops/s
# Warmup Iteration  18: 708330.658 ops/s
# Warmup Iteration  19: 707241.947 ops/s
# Warmup Iteration  20: 708550.640 ops/s
# Warmup Iteration  21: 710846.424 ops/s
# Warmup Iteration  22: 706627.382 ops/s
# Warmup Iteration  23: 708971.592 ops/s
# Warmup Iteration  24: 709969.117 ops/s
# Warmup Iteration  25: 707624.909 ops/s
# Warmup Iteration  26: 706812.073 ops/s
# Warmup Iteration  27: 707417.947 ops/s
# Warmup Iteration  28: 703922.771 ops/s
# Warmup Iteration  29: 707587.444 ops/s
# Warmup Iteration  30: 708722.816 ops/s
Iteration   1: 705322.093 ops/s
Iteration   2: 707062.281 ops/s
Iteration   3: 711874.349 ops/s
Iteration   4: 714421.928 ops/s
Iteration   5: 707866.231 ops/s
Iteration   6: 699516.017 ops/s
Iteration   7: 705703.110 ops/s
Iteration   8: 708155.901 ops/s
Iteration   9: 706772.960 ops/s
Iteration  10: 705911.335 ops/s
Iteration  11: 709117.116 ops/s
Iteration  12: 710314.782 ops/s
Iteration  13: 710534.458 ops/s
Iteration  14: 709754.740 ops/s
Iteration  15: 711009.588 ops/s
Iteration  16: 709258.108 ops/s
Iteration  17: 709017.886 ops/s
Iteration  18: 707723.212 ops/s
Iteration  19: 705331.547 ops/s
Iteration  20: 713888.752 ops/s
Iteration  21: 712286.696 ops/s
Iteration  22: 709894.903 ops/s
Iteration  23: 713262.389 ops/s
Iteration  24: 714344.044 ops/s
Iteration  25: 715192.959 ops/s
Iteration  26: 709411.802 ops/s
Iteration  27: 710909.009 ops/s
Iteration  28: 708494.810 ops/s
Iteration  29: 706338.825 ops/s
Iteration  30: 710596.645 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyCollection":
  709309.616 ±(99.9%) 2245.278 ops/s [Average]
  (min, avg, max) = (699516.017, 709309.616, 715192.959), stdev = 3360.627
  CI (99.9%): [707064.338, 711554.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  709309.616 ± 2245.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 318224.517 ops/s
# Warmup Iteration   2: 351830.163 ops/s
# Warmup Iteration   3: 420437.982 ops/s
# Warmup Iteration   4: 453980.012 ops/s
# Warmup Iteration   5: 457395.450 ops/s
# Warmup Iteration   6: 452332.686 ops/s
# Warmup Iteration   7: 453003.469 ops/s
# Warmup Iteration   8: 455980.472 ops/s
# Warmup Iteration   9: 455792.446 ops/s
# Warmup Iteration  10: 455327.701 ops/s
# Warmup Iteration  11: 456939.023 ops/s
# Warmup Iteration  12: 457268.730 ops/s
# Warmup Iteration  13: 440558.698 ops/s
# Warmup Iteration  14: 393872.833 ops/s
# Warmup Iteration  15: 454161.219 ops/s
# Warmup Iteration  16: 456596.308 ops/s
# Warmup Iteration  17: 452898.375 ops/s
# Warmup Iteration  18: 453692.184 ops/s
# Warmup Iteration  19: 455398.955 ops/s
# Warmup Iteration  20: 454556.390 ops/s
# Warmup Iteration  21: 453173.933 ops/s
# Warmup Iteration  22: 453586.911 ops/s
# Warmup Iteration  23: 455507.748 ops/s
# Warmup Iteration  24: 449465.826 ops/s
# Warmup Iteration  25: 455360.608 ops/s
# Warmup Iteration  26: 458158.367 ops/s
# Warmup Iteration  27: 455790.193 ops/s
# Warmup Iteration  28: 454743.526 ops/s
# Warmup Iteration  29: 454142.485 ops/s
# Warmup Iteration  30: 457135.905 ops/s
Iteration   1: 455113.198 ops/s
Iteration   2: 455225.747 ops/s
Iteration   3: 455135.534 ops/s
Iteration   4: 453928.004 ops/s
Iteration   5: 452975.710 ops/s
Iteration   6: 453270.025 ops/s
Iteration   7: 451347.273 ops/s
Iteration   8: 453986.565 ops/s
Iteration   9: 456763.519 ops/s
Iteration  10: 455270.174 ops/s
Iteration  11: 454349.525 ops/s
Iteration  12: 455378.969 ops/s
Iteration  13: 457558.201 ops/s
Iteration  14: 456299.614 ops/s
Iteration  15: 456613.053 ops/s
Iteration  16: 454568.912 ops/s
Iteration  17: 455749.378 ops/s
Iteration  18: 454870.284 ops/s
Iteration  19: 456509.551 ops/s
Iteration  20: 457387.799 ops/s
Iteration  21: 453989.225 ops/s
Iteration  22: 458234.563 ops/s
Iteration  23: 458639.892 ops/s
Iteration  24: 453797.564 ops/s
Iteration  25: 459045.075 ops/s
Iteration  26: 457420.340 ops/s
Iteration  27: 456756.037 ops/s
Iteration  28: 457097.194 ops/s
Iteration  29: 453945.301 ops/s
Iteration  30: 457811.298 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyIterable":
  455634.584 ±(99.9%) 1233.420 ops/s [Average]
  (min, avg, max) = (451347.273, 455634.584, 459045.075), stdev = 1846.125
  CI (99.9%): [454401.164, 456868.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  455634.584 ± 1233.420  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2401725.032 ops/s
# Warmup Iteration   2: 5118640.700 ops/s
# Warmup Iteration   3: 4394553.686 ops/s
# Warmup Iteration   4: 5307474.481 ops/s
# Warmup Iteration   5: 5278575.559 ops/s
# Warmup Iteration   6: 5287902.325 ops/s
# Warmup Iteration   7: 5297540.728 ops/s
# Warmup Iteration   8: 5294154.532 ops/s
# Warmup Iteration   9: 5329810.719 ops/s
# Warmup Iteration  10: 5270130.486 ops/s
# Warmup Iteration  11: 5217301.456 ops/s
# Warmup Iteration  12: 5238273.190 ops/s
# Warmup Iteration  13: 5274178.305 ops/s
# Warmup Iteration  14: 5254050.757 ops/s
# Warmup Iteration  15: 5296876.427 ops/s
# Warmup Iteration  16: 5312851.167 ops/s
# Warmup Iteration  17: 5274534.155 ops/s
# Warmup Iteration  18: 5192456.726 ops/s
# Warmup Iteration  19: 5290297.328 ops/s
# Warmup Iteration  20: 5358597.620 ops/s
# Warmup Iteration  21: 5304594.443 ops/s
# Warmup Iteration  22: 5250834.214 ops/s
# Warmup Iteration  23: 5325552.178 ops/s
# Warmup Iteration  24: 5301815.050 ops/s
# Warmup Iteration  25: 5297343.102 ops/s
# Warmup Iteration  26: 5297506.870 ops/s
# Warmup Iteration  27: 5271322.837 ops/s
# Warmup Iteration  28: 5354946.000 ops/s
# Warmup Iteration  29: 5280378.872 ops/s
# Warmup Iteration  30: 5262847.348 ops/s
Iteration   1: 5168719.669 ops/s
Iteration   2: 5256656.037 ops/s
Iteration   3: 5165989.337 ops/s
Iteration   4: 5140155.381 ops/s
Iteration   5: 5230902.938 ops/s
Iteration   6: 5319194.907 ops/s
Iteration   7: 5288743.762 ops/s
Iteration   8: 5312380.846 ops/s
Iteration   9: 5260212.518 ops/s
Iteration  10: 5286443.018 ops/s
Iteration  11: 5292356.638 ops/s
Iteration  12: 5264895.974 ops/s
Iteration  13: 5350345.990 ops/s
Iteration  14: 5280770.216 ops/s
Iteration  15: 5296845.171 ops/s
Iteration  16: 5271995.655 ops/s
Iteration  17: 5199006.623 ops/s
Iteration  18: 5297857.889 ops/s
Iteration  19: 5304634.930 ops/s
Iteration  20: 5321354.189 ops/s
Iteration  21: 5265612.733 ops/s
Iteration  22: 5274667.484 ops/s
Iteration  23: 5246650.431 ops/s
Iteration  24: 5254082.275 ops/s
Iteration  25: 5262472.835 ops/s
Iteration  26: 5331351.481 ops/s
Iteration  27: 5264857.165 ops/s
Iteration  28: 5319986.654 ops/s
Iteration  29: 5358840.528 ops/s
Iteration  30: 5296978.926 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsKey":
  5272832.073 ±(99.9%) 34564.237 ops/s [Average]
  (min, avg, max) = (5140155.381, 5272832.073, 5358840.528), stdev = 51734.126
  CI (99.9%): [5238267.836, 5307396.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsKey  thrpt   30  5272832.073 ± 34564.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478050.270 ops/s
# Warmup Iteration   2: 637535.379 ops/s
# Warmup Iteration   3: 813006.613 ops/s
# Warmup Iteration   4: 813471.056 ops/s
# Warmup Iteration   5: 815425.998 ops/s
# Warmup Iteration   6: 818797.867 ops/s
# Warmup Iteration   7: 819091.932 ops/s
# Warmup Iteration   8: 687106.449 ops/s
# Warmup Iteration   9: 802425.024 ops/s
# Warmup Iteration  10: 821503.624 ops/s
# Warmup Iteration  11: 813896.900 ops/s
# Warmup Iteration  12: 819080.320 ops/s
# Warmup Iteration  13: 814240.603 ops/s
# Warmup Iteration  14: 819008.442 ops/s
# Warmup Iteration  15: 819778.064 ops/s
# Warmup Iteration  16: 817967.529 ops/s
# Warmup Iteration  17: 815942.455 ops/s
# Warmup Iteration  18: 819226.668 ops/s
# Warmup Iteration  19: 818641.649 ops/s
# Warmup Iteration  20: 819302.030 ops/s
# Warmup Iteration  21: 819108.216 ops/s
# Warmup Iteration  22: 819004.037 ops/s
# Warmup Iteration  23: 822086.698 ops/s
# Warmup Iteration  24: 818659.009 ops/s
# Warmup Iteration  25: 815772.622 ops/s
# Warmup Iteration  26: 820731.561 ops/s
# Warmup Iteration  27: 819622.708 ops/s
# Warmup Iteration  28: 818305.183 ops/s
# Warmup Iteration  29: 821890.387 ops/s
# Warmup Iteration  30: 823670.957 ops/s
Iteration   1: 820268.420 ops/s
Iteration   2: 819434.901 ops/s
Iteration   3: 823792.984 ops/s
Iteration   4: 816884.380 ops/s
Iteration   5: 816429.128 ops/s
Iteration   6: 817782.898 ops/s
Iteration   7: 823650.031 ops/s
Iteration   8: 821590.753 ops/s
Iteration   9: 821523.098 ops/s
Iteration  10: 820691.032 ops/s
Iteration  11: 819725.497 ops/s
Iteration  12: 812023.799 ops/s
Iteration  13: 822908.682 ops/s
Iteration  14: 821286.743 ops/s
Iteration  15: 816986.358 ops/s
Iteration  16: 817879.723 ops/s
Iteration  17: 820734.681 ops/s
Iteration  18: 818741.135 ops/s
Iteration  19: 822278.798 ops/s
Iteration  20: 816630.745 ops/s
Iteration  21: 817397.209 ops/s
Iteration  22: 818782.381 ops/s
Iteration  23: 815665.167 ops/s
Iteration  24: 821507.059 ops/s
Iteration  25: 819891.329 ops/s
Iteration  26: 814437.210 ops/s
Iteration  27: 820094.346 ops/s
Iteration  28: 819530.506 ops/s
Iteration  29: 817505.005 ops/s
Iteration  30: 820110.467 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneCollection":
  819205.482 ±(99.9%) 1817.739 ops/s [Average]
  (min, avg, max) = (812023.799, 819205.482, 823792.984), stdev = 2720.706
  CI (99.9%): [817387.744, 821023.221] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  819205.482 ± 1817.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 341192.177 ops/s
# Warmup Iteration   2: 380035.358 ops/s
# Warmup Iteration   3: 527362.869 ops/s
# Warmup Iteration   4: 525208.868 ops/s
# Warmup Iteration   5: 523024.233 ops/s
# Warmup Iteration   6: 528204.222 ops/s
# Warmup Iteration   7: 526702.442 ops/s
# Warmup Iteration   8: 529775.859 ops/s
# Warmup Iteration   9: 529470.173 ops/s
# Warmup Iteration  10: 529147.708 ops/s
# Warmup Iteration  11: 432830.924 ops/s
# Warmup Iteration  12: 528738.167 ops/s
# Warmup Iteration  13: 529342.094 ops/s
# Warmup Iteration  14: 529972.164 ops/s
# Warmup Iteration  15: 527562.476 ops/s
# Warmup Iteration  16: 526861.224 ops/s
# Warmup Iteration  17: 525840.842 ops/s
# Warmup Iteration  18: 529236.030 ops/s
# Warmup Iteration  19: 528144.220 ops/s
# Warmup Iteration  20: 530106.023 ops/s
# Warmup Iteration  21: 529621.424 ops/s
# Warmup Iteration  22: 528504.876 ops/s
# Warmup Iteration  23: 529936.304 ops/s
# Warmup Iteration  24: 529649.148 ops/s
# Warmup Iteration  25: 528944.190 ops/s
# Warmup Iteration  26: 531316.379 ops/s
# Warmup Iteration  27: 528949.720 ops/s
# Warmup Iteration  28: 529662.736 ops/s
# Warmup Iteration  29: 526573.020 ops/s
# Warmup Iteration  30: 529041.104 ops/s
Iteration   1: 525752.503 ops/s
Iteration   2: 522823.387 ops/s
Iteration   3: 530171.270 ops/s
Iteration   4: 529942.099 ops/s
Iteration   5: 528092.060 ops/s
Iteration   6: 532255.545 ops/s
Iteration   7: 524386.875 ops/s
Iteration   8: 530317.417 ops/s
Iteration   9: 533304.081 ops/s
Iteration  10: 527916.692 ops/s
Iteration  11: 531088.756 ops/s
Iteration  12: 529001.541 ops/s
Iteration  13: 530229.337 ops/s
Iteration  14: 527945.163 ops/s
Iteration  15: 528334.868 ops/s
Iteration  16: 530954.118 ops/s
Iteration  17: 529006.185 ops/s
Iteration  18: 531367.658 ops/s
Iteration  19: 529346.194 ops/s
Iteration  20: 532329.824 ops/s
Iteration  21: 531392.824 ops/s
Iteration  22: 529103.373 ops/s
Iteration  23: 532623.037 ops/s
Iteration  24: 532090.271 ops/s
Iteration  25: 528400.840 ops/s
Iteration  26: 528547.909 ops/s
Iteration  27: 530956.585 ops/s
Iteration  28: 534573.340 ops/s
Iteration  29: 530068.495 ops/s
Iteration  30: 531163.661 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneIterable":
  529782.864 ±(99.9%) 1685.002 ops/s [Average]
  (min, avg, max) = (522823.387, 529782.864, 534573.340), stdev = 2522.031
  CI (99.9%): [528097.862, 531467.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  529782.864 ± 1685.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2529130.396 ops/s
# Warmup Iteration   2: 5444029.500 ops/s
# Warmup Iteration   3: 4541154.152 ops/s
# Warmup Iteration   4: 5494559.490 ops/s
# Warmup Iteration   5: 5422590.206 ops/s
# Warmup Iteration   6: 5428668.991 ops/s
# Warmup Iteration   7: 5510087.071 ops/s
# Warmup Iteration   8: 5502393.497 ops/s
# Warmup Iteration   9: 5521217.660 ops/s
# Warmup Iteration  10: 5455166.631 ops/s
# Warmup Iteration  11: 5485585.646 ops/s
# Warmup Iteration  12: 5458697.689 ops/s
# Warmup Iteration  13: 5432358.489 ops/s
# Warmup Iteration  14: 5448095.701 ops/s
# Warmup Iteration  15: 5356690.509 ops/s
# Warmup Iteration  16: 5402160.878 ops/s
# Warmup Iteration  17: 5452205.389 ops/s
# Warmup Iteration  18: 5467720.435 ops/s
# Warmup Iteration  19: 5333672.814 ops/s
# Warmup Iteration  20: 5436732.188 ops/s
# Warmup Iteration  21: 5403075.062 ops/s
# Warmup Iteration  22: 5443758.652 ops/s
# Warmup Iteration  23: 5456953.856 ops/s
# Warmup Iteration  24: 5497532.191 ops/s
# Warmup Iteration  25: 5415699.154 ops/s
# Warmup Iteration  26: 5453683.666 ops/s
# Warmup Iteration  27: 5498048.601 ops/s
# Warmup Iteration  28: 5487608.472 ops/s
# Warmup Iteration  29: 5470545.051 ops/s
# Warmup Iteration  30: 5459255.240 ops/s
Iteration   1: 5473141.073 ops/s
Iteration   2: 5400473.115 ops/s
Iteration   3: 5432419.332 ops/s
Iteration   4: 5474961.330 ops/s
Iteration   5: 5470220.020 ops/s
Iteration   6: 5487972.270 ops/s
Iteration   7: 5455920.510 ops/s
Iteration   8: 5501758.992 ops/s
Iteration   9: 5468900.106 ops/s
Iteration  10: 5496091.089 ops/s
Iteration  11: 5451423.800 ops/s
Iteration  12: 5460585.460 ops/s
Iteration  13: 5472456.076 ops/s
Iteration  14: 5491340.760 ops/s
Iteration  15: 5491701.506 ops/s
Iteration  16: 5476534.852 ops/s
Iteration  17: 5462449.543 ops/s
Iteration  18: 5503785.224 ops/s
Iteration  19: 5473647.078 ops/s
Iteration  20: 5498807.111 ops/s
Iteration  21: 5402131.820 ops/s
Iteration  22: 5413214.986 ops/s
Iteration  23: 5463861.304 ops/s
Iteration  24: 5448075.348 ops/s
Iteration  25: 5466073.270 ops/s
Iteration  26: 5511308.171 ops/s
Iteration  27: 5462154.335 ops/s
Iteration  28: 5477883.849 ops/s
Iteration  29: 5478903.820 ops/s
Iteration  30: 5408120.806 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_containsValue":
  5465877.232 ±(99.9%) 19825.631 ops/s [Average]
  (min, avg, max) = (5400473.115, 5465877.232, 5511308.171), stdev = 29674.074
  CI (99.9%): [5446051.601, 5485702.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_containsValue  thrpt   30  5465877.232 ± 19825.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2298854.261 ops/s
# Warmup Iteration   2: 4940917.088 ops/s
# Warmup Iteration   3: 4417938.252 ops/s
# Warmup Iteration   4: 4621938.225 ops/s
# Warmup Iteration   5: 4930990.543 ops/s
# Warmup Iteration   6: 4911701.939 ops/s
# Warmup Iteration   7: 4933590.541 ops/s
# Warmup Iteration   8: 4898258.918 ops/s
# Warmup Iteration   9: 4906498.980 ops/s
# Warmup Iteration  10: 4921943.624 ops/s
# Warmup Iteration  11: 4906196.176 ops/s
# Warmup Iteration  12: 4916054.442 ops/s
# Warmup Iteration  13: 4941252.211 ops/s
# Warmup Iteration  14: 4914168.843 ops/s
# Warmup Iteration  15: 4918075.181 ops/s
# Warmup Iteration  16: 4890691.401 ops/s
# Warmup Iteration  17: 4913881.974 ops/s
# Warmup Iteration  18: 4925381.833 ops/s
# Warmup Iteration  19: 4914731.065 ops/s
# Warmup Iteration  20: 4916252.762 ops/s
# Warmup Iteration  21: 4928123.111 ops/s
# Warmup Iteration  22: 4898591.899 ops/s
# Warmup Iteration  23: 4900349.975 ops/s
# Warmup Iteration  24: 4907058.345 ops/s
# Warmup Iteration  25: 4906361.830 ops/s
# Warmup Iteration  26: 4941635.363 ops/s
# Warmup Iteration  27: 4928521.346 ops/s
# Warmup Iteration  28: 4894936.922 ops/s
# Warmup Iteration  29: 4869669.691 ops/s
# Warmup Iteration  30: 4805743.292 ops/s
Iteration   1: 4890265.176 ops/s
Iteration   2: 4894058.466 ops/s
Iteration   3: 4907500.160 ops/s
Iteration   4: 4881320.975 ops/s
Iteration   5: 4880506.353 ops/s
Iteration   6: 4879544.241 ops/s
Iteration   7: 4914468.409 ops/s
Iteration   8: 4887382.484 ops/s
Iteration   9: 4890685.799 ops/s
Iteration  10: 4886954.453 ops/s
Iteration  11: 4912258.269 ops/s
Iteration  12: 4891670.601 ops/s
Iteration  13: 4928550.757 ops/s
Iteration  14: 4883973.557 ops/s
Iteration  15: 4918086.208 ops/s
Iteration  16: 4906172.807 ops/s
Iteration  17: 4887662.786 ops/s
Iteration  18: 4828843.897 ops/s
Iteration  19: 4884586.488 ops/s
Iteration  20: 4912807.287 ops/s
Iteration  21: 4904682.747 ops/s
Iteration  22: 4883453.277 ops/s
Iteration  23: 4897395.794 ops/s
Iteration  24: 4914117.396 ops/s
Iteration  25: 4939740.245 ops/s
Iteration  26: 4924225.083 ops/s
Iteration  27: 4921656.358 ops/s
Iteration  28: 4927973.957 ops/s
Iteration  29: 4889905.840 ops/s
Iteration  30: 4895354.630 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_count":
  4898860.150 ±(99.9%) 14273.986 ops/s [Average]
  (min, avg, max) = (4828843.897, 4898860.150, 4939740.245), stdev = 21364.632
  CI (99.9%): [4884586.164, 4913134.136] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_count  thrpt   30  4898860.150 ± 14273.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 775723.364 ops/s
# Warmup Iteration   2: 1641747.230 ops/s
# Warmup Iteration   3: 1838570.051 ops/s
# Warmup Iteration   4: 1844161.468 ops/s
# Warmup Iteration   5: 1522492.816 ops/s
# Warmup Iteration   6: 1850070.492 ops/s
# Warmup Iteration   7: 1849353.882 ops/s
# Warmup Iteration   8: 1848040.404 ops/s
# Warmup Iteration   9: 1842894.856 ops/s
# Warmup Iteration  10: 1842414.405 ops/s
# Warmup Iteration  11: 1839869.885 ops/s
# Warmup Iteration  12: 1847195.292 ops/s
# Warmup Iteration  13: 1856662.060 ops/s
# Warmup Iteration  14: 1832857.468 ops/s
# Warmup Iteration  15: 1838834.013 ops/s
# Warmup Iteration  16: 1847714.340 ops/s
# Warmup Iteration  17: 1854335.050 ops/s
# Warmup Iteration  18: 1847758.117 ops/s
# Warmup Iteration  19: 1851468.864 ops/s
# Warmup Iteration  20: 1851268.198 ops/s
# Warmup Iteration  21: 1853901.982 ops/s
# Warmup Iteration  22: 1849918.965 ops/s
# Warmup Iteration  23: 1842610.307 ops/s
# Warmup Iteration  24: 1854910.101 ops/s
# Warmup Iteration  25: 1850564.790 ops/s
# Warmup Iteration  26: 1845951.570 ops/s
# Warmup Iteration  27: 1850897.413 ops/s
# Warmup Iteration  28: 1852241.996 ops/s
# Warmup Iteration  29: 1838892.214 ops/s
# Warmup Iteration  30: 1849837.501 ops/s
Iteration   1: 1842163.640 ops/s
Iteration   2: 1841097.480 ops/s
Iteration   3: 1843417.419 ops/s
Iteration   4: 1844412.427 ops/s
Iteration   5: 1844744.795 ops/s
Iteration   6: 1845328.576 ops/s
Iteration   7: 1832486.325 ops/s
Iteration   8: 1842556.943 ops/s
Iteration   9: 1842008.215 ops/s
Iteration  10: 1846104.887 ops/s
Iteration  11: 1853583.932 ops/s
Iteration  12: 1847862.837 ops/s
Iteration  13: 1853537.483 ops/s
Iteration  14: 1850399.540 ops/s
Iteration  15: 1825632.083 ops/s
Iteration  16: 1846873.208 ops/s
Iteration  17: 1841651.283 ops/s
Iteration  18: 1853677.336 ops/s
Iteration  19: 1841796.176 ops/s
Iteration  20: 1869559.220 ops/s
Iteration  21: 1852129.825 ops/s
Iteration  22: 1853107.542 ops/s
Iteration  23: 1843992.545 ops/s
Iteration  24: 1853358.858 ops/s
Iteration  25: 1850223.078 ops/s
Iteration  26: 1833800.822 ops/s
Iteration  27: 1820815.012 ops/s
Iteration  28: 1823680.112 ops/s
Iteration  29: 1853157.173 ops/s
Iteration  30: 1848416.995 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countBy":
  1844719.192 ±(99.9%) 6700.641 ops/s [Average]
  (min, avg, max) = (1820815.012, 1844719.192, 1869559.220), stdev = 10029.204
  CI (99.9%): [1838018.551, 1851419.833] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_countBy  thrpt   30  1844719.192 ± 6700.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 219729.259 ops/s
# Warmup Iteration   2: 369608.022 ops/s
# Warmup Iteration   3: 447073.473 ops/s
# Warmup Iteration   4: 453433.535 ops/s
# Warmup Iteration   5: 451468.220 ops/s
# Warmup Iteration   6: 416138.816 ops/s
# Warmup Iteration   7: 405280.431 ops/s
# Warmup Iteration   8: 451826.492 ops/s
# Warmup Iteration   9: 451503.369 ops/s
# Warmup Iteration  10: 454079.316 ops/s
# Warmup Iteration  11: 452081.477 ops/s
# Warmup Iteration  12: 450418.253 ops/s
# Warmup Iteration  13: 448660.258 ops/s
# Warmup Iteration  14: 453387.392 ops/s
# Warmup Iteration  15: 450283.157 ops/s
# Warmup Iteration  16: 452154.487 ops/s
# Warmup Iteration  17: 450464.829 ops/s
# Warmup Iteration  18: 452604.223 ops/s
# Warmup Iteration  19: 449556.120 ops/s
# Warmup Iteration  20: 451283.107 ops/s
# Warmup Iteration  21: 450755.814 ops/s
# Warmup Iteration  22: 451447.826 ops/s
# Warmup Iteration  23: 452784.387 ops/s
# Warmup Iteration  24: 449975.142 ops/s
# Warmup Iteration  25: 451830.345 ops/s
# Warmup Iteration  26: 450051.778 ops/s
# Warmup Iteration  27: 450966.711 ops/s
# Warmup Iteration  28: 450982.789 ops/s
# Warmup Iteration  29: 448635.574 ops/s
# Warmup Iteration  30: 451216.630 ops/s
Iteration   1: 453770.569 ops/s
Iteration   2: 453217.686 ops/s
Iteration   3: 450877.274 ops/s
Iteration   4: 452510.572 ops/s
Iteration   5: 451898.016 ops/s
Iteration   6: 451774.673 ops/s
Iteration   7: 449937.195 ops/s
Iteration   8: 448660.321 ops/s
Iteration   9: 453090.775 ops/s
Iteration  10: 451859.260 ops/s
Iteration  11: 453409.214 ops/s
Iteration  12: 450654.735 ops/s
Iteration  13: 454303.955 ops/s
Iteration  14: 450723.109 ops/s
Iteration  15: 453619.256 ops/s
Iteration  16: 448882.248 ops/s
Iteration  17: 452617.891 ops/s
Iteration  18: 451648.269 ops/s
Iteration  19: 451011.651 ops/s
Iteration  20: 449766.176 ops/s
Iteration  21: 450595.055 ops/s
Iteration  22: 449955.440 ops/s
Iteration  23: 453935.284 ops/s
Iteration  24: 449521.172 ops/s
Iteration  25: 453170.125 ops/s
Iteration  26: 449494.580 ops/s
Iteration  27: 452996.615 ops/s
Iteration  28: 451919.598 ops/s
Iteration  29: 450611.424 ops/s
Iteration  30: 448947.083 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByEach":
  451512.641 ±(99.9%) 1117.830 ops/s [Average]
  (min, avg, max) = (448660.321, 451512.641, 454303.955), stdev = 1673.115
  CI (99.9%): [450394.811, 452630.471] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_countByEach  thrpt   30  451512.641 ± 1117.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 740607.778 ops/s
# Warmup Iteration   2: 1591718.104 ops/s
# Warmup Iteration   3: 1809728.966 ops/s
# Warmup Iteration   4: 1819717.441 ops/s
# Warmup Iteration   5: 1469152.087 ops/s
# Warmup Iteration   6: 1821798.096 ops/s
# Warmup Iteration   7: 1826377.234 ops/s
# Warmup Iteration   8: 1822838.133 ops/s
# Warmup Iteration   9: 1824501.686 ops/s
# Warmup Iteration  10: 1812133.908 ops/s
# Warmup Iteration  11: 1820179.920 ops/s
# Warmup Iteration  12: 1812258.564 ops/s
# Warmup Iteration  13: 1801609.737 ops/s
# Warmup Iteration  14: 1812138.360 ops/s
# Warmup Iteration  15: 1812805.255 ops/s
# Warmup Iteration  16: 1814824.542 ops/s
# Warmup Iteration  17: 1818400.257 ops/s
# Warmup Iteration  18: 1821254.513 ops/s
# Warmup Iteration  19: 1820190.942 ops/s
# Warmup Iteration  20: 1826699.620 ops/s
# Warmup Iteration  21: 1827290.918 ops/s
# Warmup Iteration  22: 1821081.592 ops/s
# Warmup Iteration  23: 1810954.488 ops/s
# Warmup Iteration  24: 1823076.077 ops/s
# Warmup Iteration  25: 1809745.125 ops/s
# Warmup Iteration  26: 1815964.388 ops/s
# Warmup Iteration  27: 1818727.061 ops/s
# Warmup Iteration  28: 1819072.969 ops/s
# Warmup Iteration  29: 1810533.842 ops/s
# Warmup Iteration  30: 1815807.788 ops/s
Iteration   1: 1806722.535 ops/s
Iteration   2: 1825448.332 ops/s
Iteration   3: 1805922.111 ops/s
Iteration   4: 1826781.394 ops/s
Iteration   5: 1819160.113 ops/s
Iteration   6: 1821958.518 ops/s
Iteration   7: 1822550.949 ops/s
Iteration   8: 1828077.896 ops/s
Iteration   9: 1838953.374 ops/s
Iteration  10: 1809789.803 ops/s
Iteration  11: 1824341.031 ops/s
Iteration  12: 1822784.270 ops/s
Iteration  13: 1828635.034 ops/s
Iteration  14: 1830318.606 ops/s
Iteration  15: 1817139.535 ops/s
Iteration  16: 1835449.781 ops/s
Iteration  17: 1811685.842 ops/s
Iteration  18: 1821499.553 ops/s
Iteration  19: 1831278.156 ops/s
Iteration  20: 1816265.913 ops/s
Iteration  21: 1826727.575 ops/s
Iteration  22: 1825899.863 ops/s
Iteration  23: 1822375.297 ops/s
Iteration  24: 1826243.882 ops/s
Iteration  25: 1813508.453 ops/s
Iteration  26: 1817155.851 ops/s
Iteration  27: 1821195.894 ops/s
Iteration  28: 1810297.198 ops/s
Iteration  29: 1823529.347 ops/s
Iteration  30: 1827390.896 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countByWith":
  1821969.567 ±(99.9%) 5376.719 ops/s [Average]
  (min, avg, max) = (1805922.111, 1821969.567, 1838953.374), stdev = 8047.621
  CI (99.9%): [1816592.847, 1827346.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_countByWith  thrpt   30  1821969.567 ± 5376.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2238057.233 ops/s
# Warmup Iteration   2: 4810031.128 ops/s
# Warmup Iteration   3: 4911775.805 ops/s
# Warmup Iteration   4: 4087094.660 ops/s
# Warmup Iteration   5: 4904545.728 ops/s
# Warmup Iteration   6: 4880939.675 ops/s
# Warmup Iteration   7: 4901651.936 ops/s
# Warmup Iteration   8: 4901481.905 ops/s
# Warmup Iteration   9: 4904387.750 ops/s
# Warmup Iteration  10: 4915817.116 ops/s
# Warmup Iteration  11: 4887635.905 ops/s
# Warmup Iteration  12: 4901524.445 ops/s
# Warmup Iteration  13: 4898768.429 ops/s
# Warmup Iteration  14: 4877990.069 ops/s
# Warmup Iteration  15: 4904108.320 ops/s
# Warmup Iteration  16: 4874139.094 ops/s
# Warmup Iteration  17: 4901932.616 ops/s
# Warmup Iteration  18: 4876458.603 ops/s
# Warmup Iteration  19: 4906558.604 ops/s
# Warmup Iteration  20: 4926790.250 ops/s
# Warmup Iteration  21: 4898202.603 ops/s
# Warmup Iteration  22: 4940570.883 ops/s
# Warmup Iteration  23: 4902985.844 ops/s
# Warmup Iteration  24: 4923297.227 ops/s
# Warmup Iteration  25: 4935254.910 ops/s
# Warmup Iteration  26: 4923682.374 ops/s
# Warmup Iteration  27: 4903072.457 ops/s
# Warmup Iteration  28: 4877583.788 ops/s
# Warmup Iteration  29: 4908224.920 ops/s
# Warmup Iteration  30: 4905224.278 ops/s
Iteration   1: 4942807.785 ops/s
Iteration   2: 4914756.066 ops/s
Iteration   3: 4903038.181 ops/s
Iteration   4: 4888142.652 ops/s
Iteration   5: 4890788.123 ops/s
Iteration   6: 4905707.059 ops/s
Iteration   7: 4883154.084 ops/s
Iteration   8: 4905222.735 ops/s
Iteration   9: 4903869.232 ops/s
Iteration  10: 4936199.343 ops/s
Iteration  11: 4911656.401 ops/s
Iteration  12: 4920760.670 ops/s
Iteration  13: 4908873.220 ops/s
Iteration  14: 4909530.601 ops/s
Iteration  15: 4917157.152 ops/s
Iteration  16: 4924346.546 ops/s
Iteration  17: 4904253.841 ops/s
Iteration  18: 4903753.633 ops/s
Iteration  19: 4901524.077 ops/s
Iteration  20: 4897233.054 ops/s
Iteration  21: 4913172.540 ops/s
Iteration  22: 4942044.966 ops/s
Iteration  23: 4892637.859 ops/s
Iteration  24: 4893124.606 ops/s
Iteration  25: 4905148.614 ops/s
Iteration  26: 4910026.894 ops/s
Iteration  27: 4840298.784 ops/s
Iteration  28: 4881434.752 ops/s
Iteration  29: 4868624.418 ops/s
Iteration  30: 4918683.115 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_countWith":
  4904599.033 ±(99.9%) 13813.856 ops/s [Average]
  (min, avg, max) = (4840298.784, 4904599.033, 4942807.785), stdev = 20675.931
  CI (99.9%): [4890785.178, 4918412.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_countWith  thrpt   30  4904599.033 ± 13813.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2077809.788 ops/s
# Warmup Iteration   2: 4587853.886 ops/s
# Warmup Iteration   3: 4575069.075 ops/s
# Warmup Iteration   4: 3825803.248 ops/s
# Warmup Iteration   5: 4580930.829 ops/s
# Warmup Iteration   6: 4566281.365 ops/s
# Warmup Iteration   7: 4607464.793 ops/s
# Warmup Iteration   8: 4628832.008 ops/s
# Warmup Iteration   9: 4640307.134 ops/s
# Warmup Iteration  10: 4617435.013 ops/s
# Warmup Iteration  11: 4593650.869 ops/s
# Warmup Iteration  12: 4576246.753 ops/s
# Warmup Iteration  13: 4528853.645 ops/s
# Warmup Iteration  14: 4615000.238 ops/s
# Warmup Iteration  15: 4626870.414 ops/s
# Warmup Iteration  16: 4589252.810 ops/s
# Warmup Iteration  17: 4598564.127 ops/s
# Warmup Iteration  18: 4582440.758 ops/s
# Warmup Iteration  19: 4616165.629 ops/s
# Warmup Iteration  20: 4581272.037 ops/s
# Warmup Iteration  21: 4611599.859 ops/s
# Warmup Iteration  22: 4557695.847 ops/s
# Warmup Iteration  23: 4556765.410 ops/s
# Warmup Iteration  24: 4582278.218 ops/s
# Warmup Iteration  25: 4599846.409 ops/s
# Warmup Iteration  26: 4606092.260 ops/s
# Warmup Iteration  27: 4586389.063 ops/s
# Warmup Iteration  28: 4569969.284 ops/s
# Warmup Iteration  29: 4562569.277 ops/s
# Warmup Iteration  30: 4609036.168 ops/s
Iteration   1: 4526701.481 ops/s
Iteration   2: 4561723.894 ops/s
Iteration   3: 4585932.487 ops/s
Iteration   4: 4656814.713 ops/s
Iteration   5: 4627832.348 ops/s
Iteration   6: 4612516.243 ops/s
Iteration   7: 4602979.016 ops/s
Iteration   8: 4597197.266 ops/s
Iteration   9: 4583921.383 ops/s
Iteration  10: 4598575.320 ops/s
Iteration  11: 4583286.205 ops/s
Iteration  12: 4575480.766 ops/s
Iteration  13: 4541595.877 ops/s
Iteration  14: 4547192.090 ops/s
Iteration  15: 4590512.678 ops/s
Iteration  16: 4576641.033 ops/s
Iteration  17: 4583527.120 ops/s
Iteration  18: 4569154.845 ops/s
Iteration  19: 4647037.343 ops/s
Iteration  20: 4539683.050 ops/s
Iteration  21: 4587491.533 ops/s
Iteration  22: 4575189.990 ops/s
Iteration  23: 4588060.431 ops/s
Iteration  24: 4568903.953 ops/s
Iteration  25: 4592248.516 ops/s
Iteration  26: 4599013.308 ops/s
Iteration  27: 4600310.945 ops/s
Iteration  28: 4587958.775 ops/s
Iteration  29: 4584185.693 ops/s
Iteration  30: 4573186.969 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect":
  4585495.176 ±(99.9%) 18818.095 ops/s [Average]
  (min, avg, max) = (4526701.481, 4585495.176, 4656814.713), stdev = 28166.041
  CI (99.9%): [4566677.081, 4604313.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detect  thrpt   30  4585495.176 ± 18818.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectIfNone_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectIfNone_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2209487.235 ops/s
# Warmup Iteration   2: 4942731.985 ops/s
# Warmup Iteration   3: 5018147.099 ops/s
# Warmup Iteration   4: 4126961.258 ops/s
# Warmup Iteration   5: 4930908.475 ops/s
# Warmup Iteration   6: 4969891.924 ops/s
# Warmup Iteration   7: 5001961.864 ops/s
# Warmup Iteration   8: 4956837.778 ops/s
# Warmup Iteration   9: 4983203.732 ops/s
# Warmup Iteration  10: 4999006.304 ops/s
# Warmup Iteration  11: 4983117.765 ops/s
# Warmup Iteration  12: 4958693.194 ops/s
# Warmup Iteration  13: 4966936.971 ops/s
# Warmup Iteration  14: 4883455.641 ops/s
# Warmup Iteration  15: 4942573.864 ops/s
# Warmup Iteration  16: 4979408.812 ops/s
# Warmup Iteration  17: 4991815.906 ops/s
# Warmup Iteration  18: 4927053.439 ops/s
# Warmup Iteration  19: 4976784.887 ops/s
# Warmup Iteration  20: 4960086.827 ops/s
# Warmup Iteration  21: 4956772.584 ops/s
# Warmup Iteration  22: 4923919.820 ops/s
# Warmup Iteration  23: 4998372.531 ops/s
# Warmup Iteration  24: 4943409.876 ops/s
# Warmup Iteration  25: 4886791.348 ops/s
# Warmup Iteration  26: 4981788.287 ops/s
# Warmup Iteration  27: 4950764.792 ops/s
# Warmup Iteration  28: 4940185.133 ops/s
# Warmup Iteration  29: 4927445.151 ops/s
# Warmup Iteration  30: 4953874.086 ops/s
Iteration   1: 4976518.663 ops/s
Iteration   2: 4928261.224 ops/s
Iteration   3: 4933607.374 ops/s
Iteration   4: 4902465.587 ops/s
Iteration   5: 4968390.150 ops/s
Iteration   6: 4935540.626 ops/s
Iteration   7: 4999795.603 ops/s
Iteration   8: 4930031.006 ops/s
Iteration   9: 4926467.556 ops/s
Iteration  10: 4986783.842 ops/s
Iteration  11: 4947526.861 ops/s
Iteration  12: 4850314.246 ops/s
Iteration  13: 4860602.482 ops/s
Iteration  14: 5007116.921 ops/s
Iteration  15: 4976565.982 ops/s
Iteration  16: 4957776.161 ops/s
Iteration  17: 4965959.989 ops/s
Iteration  18: 4914696.564 ops/s
Iteration  19: 4921803.114 ops/s
Iteration  20: 4973088.523 ops/s
Iteration  21: 4939775.456 ops/s
Iteration  22: 5000849.000 ops/s
Iteration  23: 5038565.341 ops/s
Iteration  24: 4987671.404 ops/s
Iteration  25: 4902025.155 ops/s
Iteration  26: 4950795.026 ops/s
Iteration  27: 4972801.916 ops/s
Iteration  28: 4934395.547 ops/s
Iteration  29: 4952369.219 ops/s
Iteration  30: 4944435.705 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectIfNone_value":
  4949566.541 ±(99.9%) 27429.200 ops/s [Average]
  (min, avg, max) = (4850314.246, 4949566.541, 5038565.341), stdev = 41054.738
  CI (99.9%): [4922137.341, 4976995.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectIfNone_value  thrpt   30  4949566.541 ± 27429.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2017203.550 ops/s
# Warmup Iteration   2: 4604022.735 ops/s
# Warmup Iteration   3: 4597668.462 ops/s
# Warmup Iteration   4: 3843379.318 ops/s
# Warmup Iteration   5: 4621732.693 ops/s
# Warmup Iteration   6: 4605346.717 ops/s
# Warmup Iteration   7: 4616274.564 ops/s
# Warmup Iteration   8: 4581743.316 ops/s
# Warmup Iteration   9: 4634623.149 ops/s
# Warmup Iteration  10: 4584988.316 ops/s
# Warmup Iteration  11: 4608038.351 ops/s
# Warmup Iteration  12: 4599469.448 ops/s
# Warmup Iteration  13: 4590489.168 ops/s
# Warmup Iteration  14: 4571304.536 ops/s
# Warmup Iteration  15: 4595142.276 ops/s
# Warmup Iteration  16: 4576624.758 ops/s
# Warmup Iteration  17: 4601481.934 ops/s
# Warmup Iteration  18: 4618623.516 ops/s
# Warmup Iteration  19: 4584597.443 ops/s
# Warmup Iteration  20: 4595094.869 ops/s
# Warmup Iteration  21: 4598003.203 ops/s
# Warmup Iteration  22: 4596177.672 ops/s
# Warmup Iteration  23: 4629576.486 ops/s
# Warmup Iteration  24: 4603328.544 ops/s
# Warmup Iteration  25: 4578733.589 ops/s
# Warmup Iteration  26: 4578906.028 ops/s
# Warmup Iteration  27: 4548962.300 ops/s
# Warmup Iteration  28: 4576283.639 ops/s
# Warmup Iteration  29: 4573362.624 ops/s
# Warmup Iteration  30: 4608446.063 ops/s
Iteration   1: 4609968.210 ops/s
Iteration   2: 4608097.224 ops/s
Iteration   3: 4578839.912 ops/s
Iteration   4: 4579113.562 ops/s
Iteration   5: 4577849.884 ops/s
Iteration   6: 4581094.819 ops/s
Iteration   7: 4623904.277 ops/s
Iteration   8: 4599472.517 ops/s
Iteration   9: 4584307.701 ops/s
Iteration  10: 4609373.743 ops/s
Iteration  11: 4620411.397 ops/s
Iteration  12: 4583758.556 ops/s
Iteration  13: 4612002.307 ops/s
Iteration  14: 4577594.613 ops/s
Iteration  15: 4546539.155 ops/s
Iteration  16: 4586974.419 ops/s
Iteration  17: 4587509.244 ops/s
Iteration  18: 4584517.327 ops/s
Iteration  19: 4622170.205 ops/s
Iteration  20: 4634077.044 ops/s
Iteration  21: 4573423.715 ops/s
Iteration  22: 4605516.015 ops/s
Iteration  23: 4644061.709 ops/s
Iteration  24: 4605308.248 ops/s
Iteration  25: 4601407.797 ops/s
Iteration  26: 4581011.807 ops/s
Iteration  27: 4560129.105 ops/s
Iteration  28: 4571738.234 ops/s
Iteration  29: 4630436.456 ops/s
Iteration  30: 4620307.332 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional":
  4596697.218 ±(99.9%) 15532.605 ops/s [Average]
  (min, avg, max) = (4546539.155, 4596697.218, 4644061.709), stdev = 23248.474
  CI (99.9%): [4581164.613, 4612229.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional  thrpt   30  4596697.218 ± 15532.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2338124.757 ops/s
# Warmup Iteration   2: 5061425.204 ops/s
# Warmup Iteration   3: 4775465.508 ops/s
# Warmup Iteration   4: 4643460.526 ops/s
# Warmup Iteration   5: 5160242.163 ops/s
# Warmup Iteration   6: 5199863.499 ops/s
# Warmup Iteration   7: 5155395.052 ops/s
# Warmup Iteration   8: 5080090.231 ops/s
# Warmup Iteration   9: 5257118.798 ops/s
# Warmup Iteration  10: 5200961.657 ops/s
# Warmup Iteration  11: 5180038.152 ops/s
# Warmup Iteration  12: 5160883.514 ops/s
# Warmup Iteration  13: 5190392.400 ops/s
# Warmup Iteration  14: 5189272.524 ops/s
# Warmup Iteration  15: 5172959.599 ops/s
# Warmup Iteration  16: 5173111.986 ops/s
# Warmup Iteration  17: 5205083.667 ops/s
# Warmup Iteration  18: 5160018.380 ops/s
# Warmup Iteration  19: 5186868.863 ops/s
# Warmup Iteration  20: 5162213.983 ops/s
# Warmup Iteration  21: 5222440.827 ops/s
# Warmup Iteration  22: 5294133.977 ops/s
# Warmup Iteration  23: 5185482.184 ops/s
# Warmup Iteration  24: 5238085.320 ops/s
# Warmup Iteration  25: 5127485.427 ops/s
# Warmup Iteration  26: 5167473.977 ops/s
# Warmup Iteration  27: 5167774.383 ops/s
# Warmup Iteration  28: 5190710.181 ops/s
# Warmup Iteration  29: 5229456.594 ops/s
# Warmup Iteration  30: 5152863.725 ops/s
Iteration   1: 5167620.649 ops/s
Iteration   2: 5192513.773 ops/s
Iteration   3: 5252206.376 ops/s
Iteration   4: 5202419.840 ops/s
Iteration   5: 5133451.854 ops/s
Iteration   6: 5164706.860 ops/s
Iteration   7: 5194759.335 ops/s
Iteration   8: 5196296.095 ops/s
Iteration   9: 5159744.407 ops/s
Iteration  10: 5167816.058 ops/s
Iteration  11: 5141705.828 ops/s
Iteration  12: 5218887.514 ops/s
Iteration  13: 5167305.170 ops/s
Iteration  14: 5121218.812 ops/s
Iteration  15: 5095927.337 ops/s
Iteration  16: 5134981.996 ops/s
Iteration  17: 5131911.889 ops/s
Iteration  18: 5173861.395 ops/s
Iteration  19: 5259734.306 ops/s
Iteration  20: 5133701.821 ops/s
Iteration  21: 5223177.635 ops/s
Iteration  22: 5174409.523 ops/s
Iteration  23: 5144032.429 ops/s
Iteration  24: 5196867.071 ops/s
Iteration  25: 5092217.509 ops/s
Iteration  26: 5191558.398 ops/s
Iteration  27: 5097786.643 ops/s
Iteration  28: 5163231.280 ops/s
Iteration  29: 5245516.817 ops/s
Iteration  30: 5183967.107 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional_value":
  5170784.524 ±(99.9%) 29391.702 ops/s [Average]
  (min, avg, max) = (5092217.509, 5170784.524, 5259734.306), stdev = 43992.119
  CI (99.9%): [5141392.823, 5200176.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectOptional_value  thrpt   30  5170784.524 ± 29391.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2315247.185 ops/s
# Warmup Iteration   2: 4741588.617 ops/s
# Warmup Iteration   3: 4648656.366 ops/s
# Warmup Iteration   4: 3958767.259 ops/s
# Warmup Iteration   5: 4577807.529 ops/s
# Warmup Iteration   6: 4656263.961 ops/s
# Warmup Iteration   7: 5037107.530 ops/s
# Warmup Iteration   8: 4594258.011 ops/s
# Warmup Iteration   9: 4617405.911 ops/s
# Warmup Iteration  10: 4620260.769 ops/s
# Warmup Iteration  11: 4799104.465 ops/s
# Warmup Iteration  12: 4629921.098 ops/s
# Warmup Iteration  13: 4687623.958 ops/s
# Warmup Iteration  14: 4774578.223 ops/s
# Warmup Iteration  15: 4644276.729 ops/s
# Warmup Iteration  16: 4672572.839 ops/s
# Warmup Iteration  17: 4795628.422 ops/s
# Warmup Iteration  18: 4498797.413 ops/s
# Warmup Iteration  19: 4543243.043 ops/s
# Warmup Iteration  20: 4527464.250 ops/s
# Warmup Iteration  21: 4684388.406 ops/s
# Warmup Iteration  22: 4848206.973 ops/s
# Warmup Iteration  23: 4554489.324 ops/s
# Warmup Iteration  24: 4756141.860 ops/s
# Warmup Iteration  25: 4709744.601 ops/s
# Warmup Iteration  26: 4911853.349 ops/s
# Warmup Iteration  27: 4649041.378 ops/s
# Warmup Iteration  28: 4654591.792 ops/s
# Warmup Iteration  29: 4883489.664 ops/s
# Warmup Iteration  30: 4501429.971 ops/s
Iteration   1: 4760451.571 ops/s
Iteration   2: 4705231.957 ops/s
Iteration   3: 4664103.592 ops/s
Iteration   4: 4530935.384 ops/s
Iteration   5: 4600808.839 ops/s
Iteration   6: 4643215.904 ops/s
Iteration   7: 4610008.496 ops/s
Iteration   8: 4287904.756 ops/s
Iteration   9: 4240252.463 ops/s
Iteration  10: 4781841.492 ops/s
Iteration  11: 5001470.106 ops/s
Iteration  12: 4642689.583 ops/s
Iteration  13: 4825044.146 ops/s
Iteration  14: 4628935.768 ops/s
Iteration  15: 4625495.649 ops/s
Iteration  16: 4536286.607 ops/s
Iteration  17: 4712748.656 ops/s
Iteration  18: 4483820.937 ops/s
Iteration  19: 4712863.389 ops/s
Iteration  20: 4526772.929 ops/s
Iteration  21: 4601111.074 ops/s
Iteration  22: 4916625.669 ops/s
Iteration  23: 4843333.919 ops/s
Iteration  24: 4690646.034 ops/s
Iteration  25: 4474893.837 ops/s
Iteration  26: 4622662.724 ops/s
Iteration  27: 4590123.230 ops/s
Iteration  28: 4525914.138 ops/s
Iteration  29: 4466953.027 ops/s
Iteration  30: 4622844.518 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWith":
  4629199.680 ±(99.9%) 107668.073 ops/s [Average]
  (min, avg, max) = (4240252.463, 4629199.680, 5001470.106), stdev = 161152.515
  CI (99.9%): [4521531.607, 4736867.752] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectWith  thrpt   30  4629199.680 ± 107668.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1933023.217 ops/s
# Warmup Iteration   2: 4591030.822 ops/s
# Warmup Iteration   3: 4378750.482 ops/s
# Warmup Iteration   4: 3659544.848 ops/s
# Warmup Iteration   5: 4387974.859 ops/s
# Warmup Iteration   6: 4444211.385 ops/s
# Warmup Iteration   7: 4390267.150 ops/s
# Warmup Iteration   8: 4395699.856 ops/s
# Warmup Iteration   9: 4434927.839 ops/s
# Warmup Iteration  10: 4359284.229 ops/s
# Warmup Iteration  11: 4392865.970 ops/s
# Warmup Iteration  12: 4417990.037 ops/s
# Warmup Iteration  13: 4412870.537 ops/s
# Warmup Iteration  14: 4403854.310 ops/s
# Warmup Iteration  15: 4393311.584 ops/s
# Warmup Iteration  16: 4424457.186 ops/s
# Warmup Iteration  17: 4396273.832 ops/s
# Warmup Iteration  18: 4380993.865 ops/s
# Warmup Iteration  19: 4403579.534 ops/s
# Warmup Iteration  20: 4406817.090 ops/s
# Warmup Iteration  21: 4422541.392 ops/s
# Warmup Iteration  22: 4390333.349 ops/s
# Warmup Iteration  23: 4409912.479 ops/s
# Warmup Iteration  24: 4459832.780 ops/s
# Warmup Iteration  25: 4391373.539 ops/s
# Warmup Iteration  26: 4370373.083 ops/s
# Warmup Iteration  27: 4425408.181 ops/s
# Warmup Iteration  28: 4406879.385 ops/s
# Warmup Iteration  29: 4384658.282 ops/s
# Warmup Iteration  30: 4408427.325 ops/s
Iteration   1: 4374052.822 ops/s
Iteration   2: 4391157.954 ops/s
Iteration   3: 4385088.316 ops/s
Iteration   4: 4403620.827 ops/s
Iteration   5: 4389503.804 ops/s
Iteration   6: 4422511.270 ops/s
Iteration   7: 4373351.074 ops/s
Iteration   8: 4419093.257 ops/s
Iteration   9: 4368801.661 ops/s
Iteration  10: 4434314.782 ops/s
Iteration  11: 4410744.563 ops/s
Iteration  12: 4414345.369 ops/s
Iteration  13: 4394674.078 ops/s
Iteration  14: 4426429.666 ops/s
Iteration  15: 4375235.913 ops/s
Iteration  16: 4393978.273 ops/s
Iteration  17: 4426360.097 ops/s
Iteration  18: 4427599.976 ops/s
Iteration  19: 4396465.864 ops/s
Iteration  20: 4394079.506 ops/s
Iteration  21: 4402133.351 ops/s
Iteration  22: 4402494.671 ops/s
Iteration  23: 4445213.221 ops/s
Iteration  24: 4454881.808 ops/s
Iteration  25: 4425977.551 ops/s
Iteration  26: 4388151.848 ops/s
Iteration  27: 4360165.008 ops/s
Iteration  28: 4367985.971 ops/s
Iteration  29: 4394835.502 ops/s
Iteration  30: 4424770.784 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithIfNone":
  4402933.960 ±(99.9%) 16131.933 ops/s [Average]
  (min, avg, max) = (4360165.008, 4402933.960, 4454881.808), stdev = 24145.519
  CI (99.9%): [4386802.027, 4419065.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  4402933.960 ± 16131.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2258687.226 ops/s
# Warmup Iteration   2: 5250192.564 ops/s
# Warmup Iteration   3: 5119122.693 ops/s
# Warmup Iteration   4: 4518453.492 ops/s
# Warmup Iteration   5: 5274453.940 ops/s
# Warmup Iteration   6: 5269236.654 ops/s
# Warmup Iteration   7: 5275031.139 ops/s
# Warmup Iteration   8: 5275218.151 ops/s
# Warmup Iteration   9: 5237423.701 ops/s
# Warmup Iteration  10: 5265878.215 ops/s
# Warmup Iteration  11: 5270462.603 ops/s
# Warmup Iteration  12: 5268890.004 ops/s
# Warmup Iteration  13: 5264630.791 ops/s
# Warmup Iteration  14: 5248652.440 ops/s
# Warmup Iteration  15: 5261655.520 ops/s
# Warmup Iteration  16: 5280727.966 ops/s
# Warmup Iteration  17: 5283449.514 ops/s
# Warmup Iteration  18: 5273070.131 ops/s
# Warmup Iteration  19: 5254879.376 ops/s
# Warmup Iteration  20: 5253342.450 ops/s
# Warmup Iteration  21: 5291881.426 ops/s
# Warmup Iteration  22: 5295187.873 ops/s
# Warmup Iteration  23: 5250502.380 ops/s
# Warmup Iteration  24: 5278579.674 ops/s
# Warmup Iteration  25: 5259361.299 ops/s
# Warmup Iteration  26: 5284100.616 ops/s
# Warmup Iteration  27: 5254449.663 ops/s
# Warmup Iteration  28: 5263331.090 ops/s
# Warmup Iteration  29: 5265014.512 ops/s
# Warmup Iteration  30: 5236215.048 ops/s
Iteration   1: 5270565.069 ops/s
Iteration   2: 5246984.299 ops/s
Iteration   3: 5264992.380 ops/s
Iteration   4: 5294626.643 ops/s
Iteration   5: 5258535.056 ops/s
Iteration   6: 5271573.295 ops/s
Iteration   7: 5279127.742 ops/s
Iteration   8: 5266050.582 ops/s
Iteration   9: 5238103.759 ops/s
Iteration  10: 5294682.370 ops/s
Iteration  11: 5229228.864 ops/s
Iteration  12: 5287089.118 ops/s
Iteration  13: 5262881.497 ops/s
Iteration  14: 5270581.460 ops/s
Iteration  15: 5246375.380 ops/s
Iteration  16: 5204559.914 ops/s
Iteration  17: 5233706.856 ops/s
Iteration  18: 5210105.366 ops/s
Iteration  19: 5220300.140 ops/s
Iteration  20: 5242870.162 ops/s
Iteration  21: 5252739.268 ops/s
Iteration  22: 5239598.400 ops/s
Iteration  23: 5247576.912 ops/s
Iteration  24: 5216089.542 ops/s
Iteration  25: 5237040.479 ops/s
Iteration  26: 5241568.358 ops/s
Iteration  27: 5217924.210 ops/s
Iteration  28: 5274846.651 ops/s
Iteration  29: 5283715.839 ops/s
Iteration  30: 5306375.765 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detectWithOptional":
  5253680.513 ±(99.9%) 17875.966 ops/s [Average]
  (min, avg, max) = (5204559.914, 5253680.513, 5306375.765), stdev = 26755.907
  CI (99.9%): [5235804.546, 5271556.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detectWithOptional  thrpt   30  5253680.513 ± 17875.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2392777.600 ops/s
# Warmup Iteration   2: 5330883.390 ops/s
# Warmup Iteration   3: 4786205.563 ops/s
# Warmup Iteration   4: 4852073.084 ops/s
# Warmup Iteration   5: 5253351.211 ops/s
# Warmup Iteration   6: 5313983.947 ops/s
# Warmup Iteration   7: 5279515.338 ops/s
# Warmup Iteration   8: 5341075.790 ops/s
# Warmup Iteration   9: 5294756.354 ops/s
# Warmup Iteration  10: 5288359.777 ops/s
# Warmup Iteration  11: 5321998.274 ops/s
# Warmup Iteration  12: 5322378.325 ops/s
# Warmup Iteration  13: 5262759.061 ops/s
# Warmup Iteration  14: 5229259.870 ops/s
# Warmup Iteration  15: 5283966.179 ops/s
# Warmup Iteration  16: 5283923.007 ops/s
# Warmup Iteration  17: 5318713.665 ops/s
# Warmup Iteration  18: 5265983.609 ops/s
# Warmup Iteration  19: 5299364.973 ops/s
# Warmup Iteration  20: 5263580.747 ops/s
# Warmup Iteration  21: 5314541.872 ops/s
# Warmup Iteration  22: 5316543.119 ops/s
# Warmup Iteration  23: 5249943.666 ops/s
# Warmup Iteration  24: 5327131.783 ops/s
# Warmup Iteration  25: 5304771.550 ops/s
# Warmup Iteration  26: 5302358.776 ops/s
# Warmup Iteration  27: 5324963.737 ops/s
# Warmup Iteration  28: 5292524.238 ops/s
# Warmup Iteration  29: 5325274.121 ops/s
# Warmup Iteration  30: 5330037.523 ops/s
Iteration   1: 5342324.655 ops/s
Iteration   2: 5311838.323 ops/s
Iteration   3: 5310797.047 ops/s
Iteration   4: 5305142.884 ops/s
Iteration   5: 5293434.731 ops/s
Iteration   6: 5304408.086 ops/s
Iteration   7: 5310016.679 ops/s
Iteration   8: 5252356.474 ops/s
Iteration   9: 5307608.072 ops/s
Iteration  10: 5285316.813 ops/s
Iteration  11: 5294609.932 ops/s
Iteration  12: 5294037.722 ops/s
Iteration  13: 5305556.885 ops/s
Iteration  14: 5330249.853 ops/s
Iteration  15: 5315860.942 ops/s
Iteration  16: 5282802.210 ops/s
Iteration  17: 5242708.469 ops/s
Iteration  18: 5286552.905 ops/s
Iteration  19: 5299796.492 ops/s
Iteration  20: 5320073.121 ops/s
Iteration  21: 5303693.958 ops/s
Iteration  22: 5302370.431 ops/s
Iteration  23: 5347321.378 ops/s
Iteration  24: 5320790.281 ops/s
Iteration  25: 5332500.146 ops/s
Iteration  26: 5310618.724 ops/s
Iteration  27: 5312310.508 ops/s
Iteration  28: 5298391.488 ops/s
Iteration  29: 5346114.967 ops/s
Iteration  30: 5291054.970 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_detect_value":
  5305355.305 ±(99.9%) 15478.364 ops/s [Average]
  (min, avg, max) = (5242708.469, 5305355.305, 5347321.378), stdev = 23167.288
  CI (99.9%): [5289876.941, 5320833.669] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_detect_value  thrpt   30  5305355.305 ± 15478.364  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607438.844 ops/s
# Warmup Iteration   2: 1380937.827 ops/s
# Warmup Iteration   3: 1438828.218 ops/s
# Warmup Iteration   4: 1371598.870 ops/s
# Warmup Iteration   5: 1272122.211 ops/s
# Warmup Iteration   6: 1451388.282 ops/s
# Warmup Iteration   7: 1451048.879 ops/s
# Warmup Iteration   8: 1439376.729 ops/s
# Warmup Iteration   9: 1451497.460 ops/s
# Warmup Iteration  10: 1451607.435 ops/s
# Warmup Iteration  11: 1454645.488 ops/s
# Warmup Iteration  12: 1453580.033 ops/s
# Warmup Iteration  13: 1455646.811 ops/s
# Warmup Iteration  14: 1444556.399 ops/s
# Warmup Iteration  15: 1452858.206 ops/s
# Warmup Iteration  16: 1450805.902 ops/s
# Warmup Iteration  17: 1452453.451 ops/s
# Warmup Iteration  18: 1453740.449 ops/s
# Warmup Iteration  19: 1451156.942 ops/s
# Warmup Iteration  20: 1445356.477 ops/s
# Warmup Iteration  21: 1447162.458 ops/s
# Warmup Iteration  22: 1451828.745 ops/s
# Warmup Iteration  23: 1444583.305 ops/s
# Warmup Iteration  24: 1444203.980 ops/s
# Warmup Iteration  25: 1452160.184 ops/s
# Warmup Iteration  26: 1454505.522 ops/s
# Warmup Iteration  27: 1448593.254 ops/s
# Warmup Iteration  28: 1447181.178 ops/s
# Warmup Iteration  29: 1449027.875 ops/s
# Warmup Iteration  30: 1455577.068 ops/s
Iteration   1: 1450369.994 ops/s
Iteration   2: 1441370.246 ops/s
Iteration   3: 1457666.321 ops/s
Iteration   4: 1449496.419 ops/s
Iteration   5: 1442039.889 ops/s
Iteration   6: 1452785.754 ops/s
Iteration   7: 1453682.854 ops/s
Iteration   8: 1441137.385 ops/s
Iteration   9: 1451788.217 ops/s
Iteration  10: 1450373.920 ops/s
Iteration  11: 1443501.381 ops/s
Iteration  12: 1445016.741 ops/s
Iteration  13: 1448251.468 ops/s
Iteration  14: 1450416.548 ops/s
Iteration  15: 1447921.090 ops/s
Iteration  16: 1454198.873 ops/s
Iteration  17: 1449190.344 ops/s
Iteration  18: 1452721.611 ops/s
Iteration  19: 1448822.251 ops/s
Iteration  20: 1451889.212 ops/s
Iteration  21: 1446775.349 ops/s
Iteration  22: 1448426.406 ops/s
Iteration  23: 1445283.374 ops/s
Iteration  24: 1450715.885 ops/s
Iteration  25: 1444804.780 ops/s
Iteration  26: 1443471.109 ops/s
Iteration  27: 1447184.232 ops/s
Iteration  28: 1450230.558 ops/s
Iteration  29: 1446422.246 ops/s
Iteration  30: 1455734.561 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode":
  1448722.967 ±(99.9%) 2816.768 ops/s [Average]
  (min, avg, max) = (1441137.385, 1448722.967, 1457666.321), stdev = 4216.007
  CI (99.9%): [1445906.199, 1451539.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_entrySetEqualsAndHashCode  thrpt   30  1448722.967 ± 2816.768  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20645.205 ops/s
# Warmup Iteration   2: 32171.163 ops/s
# Warmup Iteration   3: 45751.577 ops/s
# Warmup Iteration   4: 45610.253 ops/s
# Warmup Iteration   5: 45807.838 ops/s
# Warmup Iteration   6: 45677.278 ops/s
# Warmup Iteration   7: 45888.260 ops/s
# Warmup Iteration   8: 37368.823 ops/s
# Warmup Iteration   9: 46016.081 ops/s
# Warmup Iteration  10: 45566.172 ops/s
# Warmup Iteration  11: 45371.449 ops/s
# Warmup Iteration  12: 45494.847 ops/s
# Warmup Iteration  13: 45922.891 ops/s
# Warmup Iteration  14: 45505.896 ops/s
# Warmup Iteration  15: 44801.268 ops/s
# Warmup Iteration  16: 44819.779 ops/s
# Warmup Iteration  17: 45537.611 ops/s
# Warmup Iteration  18: 44810.102 ops/s
# Warmup Iteration  19: 45329.430 ops/s
# Warmup Iteration  20: 45045.149 ops/s
# Warmup Iteration  21: 45002.773 ops/s
# Warmup Iteration  22: 44773.883 ops/s
# Warmup Iteration  23: 45430.683 ops/s
# Warmup Iteration  24: 45378.867 ops/s
# Warmup Iteration  25: 45711.824 ops/s
# Warmup Iteration  26: 45637.263 ops/s
# Warmup Iteration  27: 45172.272 ops/s
# Warmup Iteration  28: 45749.822 ops/s
# Warmup Iteration  29: 45474.592 ops/s
# Warmup Iteration  30: 45636.206 ops/s
Iteration   1: 45831.289 ops/s
Iteration   2: 44632.430 ops/s
Iteration   3: 45010.628 ops/s
Iteration   4: 45001.750 ops/s
Iteration   5: 45540.365 ops/s
Iteration   6: 45821.150 ops/s
Iteration   7: 45341.597 ops/s
Iteration   8: 45873.082 ops/s
Iteration   9: 45663.270 ops/s
Iteration  10: 45865.527 ops/s
Iteration  11: 45878.477 ops/s
Iteration  12: 45857.151 ops/s
Iteration  13: 45424.589 ops/s
Iteration  14: 45456.063 ops/s
Iteration  15: 44837.612 ops/s
Iteration  16: 45580.752 ops/s
Iteration  17: 45559.749 ops/s
Iteration  18: 45557.219 ops/s
Iteration  19: 45743.644 ops/s
Iteration  20: 45739.538 ops/s
Iteration  21: 45943.745 ops/s
Iteration  22: 45159.026 ops/s
Iteration  23: 45653.517 ops/s
Iteration  24: 45415.923 ops/s
Iteration  25: 45223.487 ops/s
Iteration  26: 45308.654 ops/s
Iteration  27: 45192.754 ops/s
Iteration  28: 45437.798 ops/s
Iteration  29: 45472.568 ops/s
Iteration  30: 45061.610 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_equalsAndHashCode":
  45469.499 ±(99.9%) 226.974 ops/s [Average]
  (min, avg, max) = (44632.430, 45469.499, 45943.745), stdev = 339.723
  CI (99.9%): [45242.525, 45696.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  45469.499 ± 226.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399901.723 ops/s
# Warmup Iteration   2: 719446.403 ops/s
# Warmup Iteration   3: 843137.119 ops/s
# Warmup Iteration   4: 851245.492 ops/s
# Warmup Iteration   5: 845431.587 ops/s
# Warmup Iteration   6: 692120.904 ops/s
# Warmup Iteration   7: 839149.156 ops/s
# Warmup Iteration   8: 847844.110 ops/s
# Warmup Iteration   9: 853058.795 ops/s
# Warmup Iteration  10: 851088.803 ops/s
# Warmup Iteration  11: 847483.659 ops/s
# Warmup Iteration  12: 849837.334 ops/s
# Warmup Iteration  13: 852492.233 ops/s
# Warmup Iteration  14: 852099.325 ops/s
# Warmup Iteration  15: 852146.622 ops/s
# Warmup Iteration  16: 848956.680 ops/s
# Warmup Iteration  17: 850810.457 ops/s
# Warmup Iteration  18: 851784.454 ops/s
# Warmup Iteration  19: 854358.859 ops/s
# Warmup Iteration  20: 853459.288 ops/s
# Warmup Iteration  21: 852642.483 ops/s
# Warmup Iteration  22: 847535.323 ops/s
# Warmup Iteration  23: 856359.367 ops/s
# Warmup Iteration  24: 854548.562 ops/s
# Warmup Iteration  25: 852924.175 ops/s
# Warmup Iteration  26: 854600.081 ops/s
# Warmup Iteration  27: 856580.922 ops/s
# Warmup Iteration  28: 854606.535 ops/s
# Warmup Iteration  29: 853454.819 ops/s
# Warmup Iteration  30: 857592.367 ops/s
Iteration   1: 850816.744 ops/s
Iteration   2: 853193.182 ops/s
Iteration   3: 855735.476 ops/s
Iteration   4: 851581.309 ops/s
Iteration   5: 851345.734 ops/s
Iteration   6: 857490.734 ops/s
Iteration   7: 854886.091 ops/s
Iteration   8: 855762.211 ops/s
Iteration   9: 854981.722 ops/s
Iteration  10: 862225.157 ops/s
Iteration  11: 849308.223 ops/s
Iteration  12: 845406.164 ops/s
Iteration  13: 852356.012 ops/s
Iteration  14: 860171.594 ops/s
Iteration  15: 857497.056 ops/s
Iteration  16: 853553.142 ops/s
Iteration  17: 857541.806 ops/s
Iteration  18: 854694.000 ops/s
Iteration  19: 856129.965 ops/s
Iteration  20: 860534.742 ops/s
Iteration  21: 857150.988 ops/s
Iteration  22: 850896.685 ops/s
Iteration  23: 856715.556 ops/s
Iteration  24: 852551.896 ops/s
Iteration  25: 856999.786 ops/s
Iteration  26: 856177.981 ops/s
Iteration  27: 850743.098 ops/s
Iteration  28: 856013.263 ops/s
Iteration  29: 860530.596 ops/s
Iteration  30: 857326.277 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollect":
  855010.573 ±(99.9%) 2485.168 ops/s [Average]
  (min, avg, max) = (845406.164, 855010.573, 862225.157), stdev = 3719.683
  CI (99.9%): [852525.405, 857495.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_flatCollect  thrpt   30  855010.573 ± 2485.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 192013.849 ops/s
# Warmup Iteration   2: 335014.177 ops/s
# Warmup Iteration   3: 395537.140 ops/s
# Warmup Iteration   4: 396807.528 ops/s
# Warmup Iteration   5: 395807.326 ops/s
# Warmup Iteration   6: 327791.440 ops/s
# Warmup Iteration   7: 395395.515 ops/s
# Warmup Iteration   8: 399588.703 ops/s
# Warmup Iteration   9: 400518.274 ops/s
# Warmup Iteration  10: 397768.884 ops/s
# Warmup Iteration  11: 398888.320 ops/s
# Warmup Iteration  12: 400467.439 ops/s
# Warmup Iteration  13: 398419.828 ops/s
# Warmup Iteration  14: 399998.308 ops/s
# Warmup Iteration  15: 397307.979 ops/s
# Warmup Iteration  16: 399280.389 ops/s
# Warmup Iteration  17: 397348.483 ops/s
# Warmup Iteration  18: 398404.777 ops/s
# Warmup Iteration  19: 398831.889 ops/s
# Warmup Iteration  20: 397045.224 ops/s
# Warmup Iteration  21: 396138.044 ops/s
# Warmup Iteration  22: 397934.937 ops/s
# Warmup Iteration  23: 399410.168 ops/s
# Warmup Iteration  24: 397658.496 ops/s
# Warmup Iteration  25: 398402.238 ops/s
# Warmup Iteration  26: 399927.918 ops/s
# Warmup Iteration  27: 400807.513 ops/s
# Warmup Iteration  28: 400045.346 ops/s
# Warmup Iteration  29: 397734.325 ops/s
# Warmup Iteration  30: 399422.088 ops/s
Iteration   1: 398343.404 ops/s
Iteration   2: 401466.128 ops/s
Iteration   3: 398655.675 ops/s
Iteration   4: 399061.266 ops/s
Iteration   5: 400187.960 ops/s
Iteration   6: 401571.463 ops/s
Iteration   7: 400094.507 ops/s
Iteration   8: 401594.356 ops/s
Iteration   9: 399923.274 ops/s
Iteration  10: 399375.628 ops/s
Iteration  11: 397977.899 ops/s
Iteration  12: 400331.689 ops/s
Iteration  13: 398905.863 ops/s
Iteration  14: 398816.985 ops/s
Iteration  15: 400327.407 ops/s
Iteration  16: 399982.476 ops/s
Iteration  17: 401011.025 ops/s
Iteration  18: 399022.000 ops/s
Iteration  19: 401223.203 ops/s
Iteration  20: 400929.179 ops/s
Iteration  21: 400931.199 ops/s
Iteration  22: 401679.645 ops/s
Iteration  23: 400295.632 ops/s
Iteration  24: 401299.786 ops/s
Iteration  25: 401024.302 ops/s
Iteration  26: 400359.078 ops/s
Iteration  27: 399484.832 ops/s
Iteration  28: 400259.110 ops/s
Iteration  29: 400821.134 ops/s
Iteration  30: 401210.669 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatCollectWith":
  400205.559 ±(99.9%) 703.170 ops/s [Average]
  (min, avg, max) = (397977.899, 400205.559, 401679.645), stdev = 1052.472
  CI (99.9%): [399502.389, 400908.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_flatCollectWith  thrpt   30  400205.559 ± 703.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatten_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatten_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 328758.253 ops/s
# Warmup Iteration   2: 383303.453 ops/s
# Warmup Iteration   3: 507352.326 ops/s
# Warmup Iteration   4: 507803.718 ops/s
# Warmup Iteration   5: 502880.291 ops/s
# Warmup Iteration   6: 506373.540 ops/s
# Warmup Iteration   7: 507945.150 ops/s
# Warmup Iteration   8: 508789.860 ops/s
# Warmup Iteration   9: 507144.024 ops/s
# Warmup Iteration  10: 436608.149 ops/s
# Warmup Iteration  11: 494150.705 ops/s
# Warmup Iteration  12: 507475.148 ops/s
# Warmup Iteration  13: 507898.405 ops/s
# Warmup Iteration  14: 506379.309 ops/s
# Warmup Iteration  15: 509446.525 ops/s
# Warmup Iteration  16: 508075.263 ops/s
# Warmup Iteration  17: 508032.257 ops/s
# Warmup Iteration  18: 508161.342 ops/s
# Warmup Iteration  19: 508612.363 ops/s
# Warmup Iteration  20: 507213.652 ops/s
# Warmup Iteration  21: 506768.526 ops/s
# Warmup Iteration  22: 506123.679 ops/s
# Warmup Iteration  23: 508827.785 ops/s
# Warmup Iteration  24: 507187.254 ops/s
# Warmup Iteration  25: 508090.392 ops/s
# Warmup Iteration  26: 507173.181 ops/s
# Warmup Iteration  27: 508563.665 ops/s
# Warmup Iteration  28: 507551.350 ops/s
# Warmup Iteration  29: 508316.274 ops/s
# Warmup Iteration  30: 508973.277 ops/s
Iteration   1: 507911.889 ops/s
Iteration   2: 507156.290 ops/s
Iteration   3: 505417.638 ops/s
Iteration   4: 507589.946 ops/s
Iteration   5: 505803.595 ops/s
Iteration   6: 511378.378 ops/s
Iteration   7: 508742.373 ops/s
Iteration   8: 508212.516 ops/s
Iteration   9: 507249.723 ops/s
Iteration  10: 505826.967 ops/s
Iteration  11: 504917.096 ops/s
Iteration  12: 508188.957 ops/s
Iteration  13: 507235.218 ops/s
Iteration  14: 505832.775 ops/s
Iteration  15: 508233.203 ops/s
Iteration  16: 509140.491 ops/s
Iteration  17: 508055.104 ops/s
Iteration  18: 506658.705 ops/s
Iteration  19: 506118.815 ops/s
Iteration  20: 507054.670 ops/s
Iteration  21: 509394.434 ops/s
Iteration  22: 509028.119 ops/s
Iteration  23: 509642.134 ops/s
Iteration  24: 506087.670 ops/s
Iteration  25: 508869.525 ops/s
Iteration  26: 508104.463 ops/s
Iteration  27: 509467.160 ops/s
Iteration  28: 507603.026 ops/s
Iteration  29: 508617.825 ops/s
Iteration  30: 509502.873 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flatten_value":
  507768.053 ±(99.9%) 1004.434 ops/s [Average]
  (min, avg, max) = (504917.096, 507768.053, 511378.378), stdev = 1503.390
  CI (99.9%): [506763.618, 508772.487] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_flatten_value  thrpt   30  507768.053 ± 1004.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 230764.096 ops/s
# Warmup Iteration   2: 574129.244 ops/s
# Warmup Iteration   3: 602730.531 ops/s
# Warmup Iteration   4: 511521.192 ops/s
# Warmup Iteration   5: 596984.940 ops/s
# Warmup Iteration   6: 598516.885 ops/s
# Warmup Iteration   7: 602843.468 ops/s
# Warmup Iteration   8: 596279.700 ops/s
# Warmup Iteration   9: 600006.453 ops/s
# Warmup Iteration  10: 602717.754 ops/s
# Warmup Iteration  11: 602408.374 ops/s
# Warmup Iteration  12: 599431.392 ops/s
# Warmup Iteration  13: 600429.061 ops/s
# Warmup Iteration  14: 599118.298 ops/s
# Warmup Iteration  15: 603640.034 ops/s
# Warmup Iteration  16: 586990.137 ops/s
# Warmup Iteration  17: 595373.871 ops/s
# Warmup Iteration  18: 597171.262 ops/s
# Warmup Iteration  19: 599711.342 ops/s
# Warmup Iteration  20: 599327.418 ops/s
# Warmup Iteration  21: 603713.563 ops/s
# Warmup Iteration  22: 600956.385 ops/s
# Warmup Iteration  23: 603410.731 ops/s
# Warmup Iteration  24: 602837.305 ops/s
# Warmup Iteration  25: 600786.057 ops/s
# Warmup Iteration  26: 605735.099 ops/s
# Warmup Iteration  27: 604368.157 ops/s
# Warmup Iteration  28: 603295.421 ops/s
# Warmup Iteration  29: 602435.885 ops/s
# Warmup Iteration  30: 600111.658 ops/s
Iteration   1: 592847.133 ops/s
Iteration   2: 599833.635 ops/s
Iteration   3: 594931.707 ops/s
Iteration   4: 601795.660 ops/s
Iteration   5: 598249.311 ops/s
Iteration   6: 599446.336 ops/s
Iteration   7: 608308.891 ops/s
Iteration   8: 604208.984 ops/s
Iteration   9: 598343.077 ops/s
Iteration  10: 600726.670 ops/s
Iteration  11: 597234.115 ops/s
Iteration  12: 603011.611 ops/s
Iteration  13: 602695.267 ops/s
Iteration  14: 602218.542 ops/s
Iteration  15: 602341.673 ops/s
Iteration  16: 598470.998 ops/s
Iteration  17: 604183.863 ops/s
Iteration  18: 600156.313 ops/s
Iteration  19: 600823.063 ops/s
Iteration  20: 604806.487 ops/s
Iteration  21: 600914.922 ops/s
Iteration  22: 599832.362 ops/s
Iteration  23: 598356.907 ops/s
Iteration  24: 601075.693 ops/s
Iteration  25: 600849.274 ops/s
Iteration  26: 600783.700 ops/s
Iteration  27: 600655.122 ops/s
Iteration  28: 604074.238 ops/s
Iteration  29: 601754.593 ops/s
Iteration  30: 603579.570 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flip":
  600883.657 ±(99.9%) 2027.589 ops/s [Average]
  (min, avg, max) = (592847.133, 600883.657, 608308.891), stdev = 3034.800
  CI (99.9%): [598856.068, 602911.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_flip  thrpt   30  600883.657 ± 2027.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flipUniqueValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flipUniqueValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566866.939 ops/s
# Warmup Iteration   2: 1266513.820 ops/s
# Warmup Iteration   3: 1273398.752 ops/s
# Warmup Iteration   4: 1056911.451 ops/s
# Warmup Iteration   5: 1266021.635 ops/s
# Warmup Iteration   6: 1274846.938 ops/s
# Warmup Iteration   7: 1274001.344 ops/s
# Warmup Iteration   8: 1274489.059 ops/s
# Warmup Iteration   9: 1275403.061 ops/s
# Warmup Iteration  10: 1271664.035 ops/s
# Warmup Iteration  11: 1270387.181 ops/s
# Warmup Iteration  12: 1271615.608 ops/s
# Warmup Iteration  13: 1279554.404 ops/s
# Warmup Iteration  14: 1270053.401 ops/s
# Warmup Iteration  15: 1281089.764 ops/s
# Warmup Iteration  16: 1272752.147 ops/s
# Warmup Iteration  17: 1275351.600 ops/s
# Warmup Iteration  18: 1278577.590 ops/s
# Warmup Iteration  19: 1263357.557 ops/s
# Warmup Iteration  20: 1268102.907 ops/s
# Warmup Iteration  21: 1266917.436 ops/s
# Warmup Iteration  22: 1270563.402 ops/s
# Warmup Iteration  23: 1272638.195 ops/s
# Warmup Iteration  24: 1270281.642 ops/s
# Warmup Iteration  25: 1278096.429 ops/s
# Warmup Iteration  26: 1273072.229 ops/s
# Warmup Iteration  27: 1273524.944 ops/s
# Warmup Iteration  28: 1272356.014 ops/s
# Warmup Iteration  29: 1265887.872 ops/s
# Warmup Iteration  30: 1264702.076 ops/s
Iteration   1: 1266891.236 ops/s
Iteration   2: 1276839.022 ops/s
Iteration   3: 1229145.374 ops/s
Iteration   4: 1264761.227 ops/s
Iteration   5: 1273331.563 ops/s
Iteration   6: 1269931.331 ops/s
Iteration   7: 1257393.702 ops/s
Iteration   8: 1259305.579 ops/s
Iteration   9: 1257477.375 ops/s
Iteration  10: 1278745.876 ops/s
Iteration  11: 1267417.863 ops/s
Iteration  12: 1269811.928 ops/s
Iteration  13: 1279786.444 ops/s
Iteration  14: 1270560.875 ops/s
Iteration  15: 1266591.946 ops/s
Iteration  16: 1259681.967 ops/s
Iteration  17: 1270633.758 ops/s
Iteration  18: 1282714.568 ops/s
Iteration  19: 1273575.380 ops/s
Iteration  20: 1276690.228 ops/s
Iteration  21: 1283012.914 ops/s
Iteration  22: 1280128.196 ops/s
Iteration  23: 1277544.772 ops/s
Iteration  24: 1269657.248 ops/s
Iteration  25: 1281849.351 ops/s
Iteration  26: 1273487.979 ops/s
Iteration  27: 1277756.938 ops/s
Iteration  28: 1250638.490 ops/s
Iteration  29: 1265731.688 ops/s
Iteration  30: 1269667.827 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_flipUniqueValues":
  1269358.755 ±(99.9%) 7478.704 ops/s [Average]
  (min, avg, max) = (1229145.374, 1269358.755, 1283012.914), stdev = 11193.773
  CI (99.9%): [1261880.051, 1276837.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_flipUniqueValues  thrpt   30  1269358.755 ± 7478.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621010.527 ops/s
# Warmup Iteration   2: 1166930.678 ops/s
# Warmup Iteration   3: 1318764.713 ops/s
# Warmup Iteration   4: 1322578.051 ops/s
# Warmup Iteration   5: 1294201.646 ops/s
# Warmup Iteration   6: 1123540.926 ops/s
# Warmup Iteration   7: 1333337.533 ops/s
# Warmup Iteration   8: 1330702.808 ops/s
# Warmup Iteration   9: 1325644.567 ops/s
# Warmup Iteration  10: 1334318.459 ops/s
# Warmup Iteration  11: 1335194.558 ops/s
# Warmup Iteration  12: 1326081.224 ops/s
# Warmup Iteration  13: 1333555.315 ops/s
# Warmup Iteration  14: 1330286.154 ops/s
# Warmup Iteration  15: 1330274.330 ops/s
# Warmup Iteration  16: 1324697.965 ops/s
# Warmup Iteration  17: 1326121.313 ops/s
# Warmup Iteration  18: 1323822.851 ops/s
# Warmup Iteration  19: 1325650.001 ops/s
# Warmup Iteration  20: 1320889.484 ops/s
# Warmup Iteration  21: 1321194.649 ops/s
# Warmup Iteration  22: 1322762.836 ops/s
# Warmup Iteration  23: 1322769.744 ops/s
# Warmup Iteration  24: 1329562.931 ops/s
# Warmup Iteration  25: 1327289.531 ops/s
# Warmup Iteration  26: 1324235.120 ops/s
# Warmup Iteration  27: 1326636.121 ops/s
# Warmup Iteration  28: 1324134.490 ops/s
# Warmup Iteration  29: 1328805.933 ops/s
# Warmup Iteration  30: 1326953.158 ops/s
Iteration   1: 1327326.603 ops/s
Iteration   2: 1330388.794 ops/s
Iteration   3: 1333152.982 ops/s
Iteration   4: 1325308.431 ops/s
Iteration   5: 1326635.030 ops/s
Iteration   6: 1316855.933 ops/s
Iteration   7: 1321374.490 ops/s
Iteration   8: 1319452.337 ops/s
Iteration   9: 1316886.288 ops/s
Iteration  10: 1324671.679 ops/s
Iteration  11: 1323344.042 ops/s
Iteration  12: 1325520.732 ops/s
Iteration  13: 1325884.486 ops/s
Iteration  14: 1332374.594 ops/s
Iteration  15: 1329336.165 ops/s
Iteration  16: 1328234.749 ops/s
Iteration  17: 1327620.224 ops/s
Iteration  18: 1324907.875 ops/s
Iteration  19: 1326247.820 ops/s
Iteration  20: 1325924.612 ops/s
Iteration  21: 1329166.359 ops/s
Iteration  22: 1323645.089 ops/s
Iteration  23: 1330459.549 ops/s
Iteration  24: 1318342.446 ops/s
Iteration  25: 1324726.904 ops/s
Iteration  26: 1324057.449 ops/s
Iteration  27: 1320862.841 ops/s
Iteration  28: 1324206.793 ops/s
Iteration  29: 1321338.712 ops/s
Iteration  30: 1324327.592 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEach":
  1325086.053 ±(99.9%) 2780.501 ops/s [Average]
  (min, avg, max) = (1316855.933, 1325086.053, 1333152.982), stdev = 4161.723
  CI (99.9%): [1322305.553, 1327866.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEach  thrpt   30  1325086.053 ± 2780.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1620458.869 ops/s
# Warmup Iteration   2: 3846878.511 ops/s
# Warmup Iteration   3: 3127548.049 ops/s
# Warmup Iteration   4: 3839679.729 ops/s
# Warmup Iteration   5: 3826680.855 ops/s
# Warmup Iteration   6: 3840079.532 ops/s
# Warmup Iteration   7: 3836566.606 ops/s
# Warmup Iteration   8: 3809124.542 ops/s
# Warmup Iteration   9: 3850260.108 ops/s
# Warmup Iteration  10: 3828349.757 ops/s
# Warmup Iteration  11: 3826275.384 ops/s
# Warmup Iteration  12: 3831305.626 ops/s
# Warmup Iteration  13: 3847379.609 ops/s
# Warmup Iteration  14: 3829567.951 ops/s
# Warmup Iteration  15: 3852325.064 ops/s
# Warmup Iteration  16: 3827828.240 ops/s
# Warmup Iteration  17: 3823340.152 ops/s
# Warmup Iteration  18: 3862023.843 ops/s
# Warmup Iteration  19: 3825482.475 ops/s
# Warmup Iteration  20: 3825823.061 ops/s
# Warmup Iteration  21: 3833855.855 ops/s
# Warmup Iteration  22: 3841310.309 ops/s
# Warmup Iteration  23: 3844030.248 ops/s
# Warmup Iteration  24: 3839253.614 ops/s
# Warmup Iteration  25: 3841984.723 ops/s
# Warmup Iteration  26: 3846022.584 ops/s
# Warmup Iteration  27: 3843271.847 ops/s
# Warmup Iteration  28: 3840660.994 ops/s
# Warmup Iteration  29: 3846741.763 ops/s
# Warmup Iteration  30: 3851165.574 ops/s
Iteration   1: 3835591.188 ops/s
Iteration   2: 3830611.889 ops/s
Iteration   3: 3837631.009 ops/s
Iteration   4: 3833896.307 ops/s
Iteration   5: 3813399.087 ops/s
Iteration   6: 3818209.287 ops/s
Iteration   7: 3825650.103 ops/s
Iteration   8: 3824041.667 ops/s
Iteration   9: 3821291.677 ops/s
Iteration  10: 3854336.082 ops/s
Iteration  11: 3859758.952 ops/s
Iteration  12: 3842721.029 ops/s
Iteration  13: 3807708.505 ops/s
Iteration  14: 3847866.217 ops/s
Iteration  15: 3847428.461 ops/s
Iteration  16: 3842327.653 ops/s
Iteration  17: 3868205.066 ops/s
Iteration  18: 3852765.565 ops/s
Iteration  19: 3853080.437 ops/s
Iteration  20: 3832479.915 ops/s
Iteration  21: 3833507.867 ops/s
Iteration  22: 3836703.470 ops/s
Iteration  23: 3860034.348 ops/s
Iteration  24: 3837641.791 ops/s
Iteration  25: 3842241.476 ops/s
Iteration  26: 3826544.970 ops/s
Iteration  27: 3823872.202 ops/s
Iteration  28: 3826498.547 ops/s
Iteration  29: 3829713.704 ops/s
Iteration  30: 3831082.615 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKey":
  3836561.369 ±(99.9%) 9623.818 ops/s [Average]
  (min, avg, max) = (3807708.505, 3836561.369, 3868205.066), stdev = 14404.479
  CI (99.9%): [3826937.551, 3846185.188] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEachKey  thrpt   30  3836561.369 ± 9623.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366637.363 ops/s
# Warmup Iteration   2: 785275.667 ops/s
# Warmup Iteration   3: 836534.625 ops/s
# Warmup Iteration   4: 844744.915 ops/s
# Warmup Iteration   5: 704521.273 ops/s
# Warmup Iteration   6: 848823.853 ops/s
# Warmup Iteration   7: 851515.725 ops/s
# Warmup Iteration   8: 849226.026 ops/s
# Warmup Iteration   9: 850160.843 ops/s
# Warmup Iteration  10: 847030.577 ops/s
# Warmup Iteration  11: 851263.743 ops/s
# Warmup Iteration  12: 847538.248 ops/s
# Warmup Iteration  13: 850973.658 ops/s
# Warmup Iteration  14: 846227.880 ops/s
# Warmup Iteration  15: 848523.469 ops/s
# Warmup Iteration  16: 847052.998 ops/s
# Warmup Iteration  17: 848809.442 ops/s
# Warmup Iteration  18: 847648.539 ops/s
# Warmup Iteration  19: 846258.728 ops/s
# Warmup Iteration  20: 848634.524 ops/s
# Warmup Iteration  21: 848785.653 ops/s
# Warmup Iteration  22: 850373.511 ops/s
# Warmup Iteration  23: 847840.628 ops/s
# Warmup Iteration  24: 847840.799 ops/s
# Warmup Iteration  25: 847731.998 ops/s
# Warmup Iteration  26: 847880.213 ops/s
# Warmup Iteration  27: 847458.559 ops/s
# Warmup Iteration  28: 847121.239 ops/s
# Warmup Iteration  29: 846228.009 ops/s
# Warmup Iteration  30: 850888.637 ops/s
Iteration   1: 845887.977 ops/s
Iteration   2: 853218.108 ops/s
Iteration   3: 851827.347 ops/s
Iteration   4: 843739.919 ops/s
Iteration   5: 849103.821 ops/s
Iteration   6: 847615.748 ops/s
Iteration   7: 842761.254 ops/s
Iteration   8: 850055.448 ops/s
Iteration   9: 846420.515 ops/s
Iteration  10: 851502.681 ops/s
Iteration  11: 842119.107 ops/s
Iteration  12: 848067.215 ops/s
Iteration  13: 850448.613 ops/s
Iteration  14: 853540.637 ops/s
Iteration  15: 852265.969 ops/s
Iteration  16: 848192.112 ops/s
Iteration  17: 845874.097 ops/s
Iteration  18: 845431.649 ops/s
Iteration  19: 840571.070 ops/s
Iteration  20: 852140.427 ops/s
Iteration  21: 836213.785 ops/s
Iteration  22: 846045.053 ops/s
Iteration  23: 846896.349 ops/s
Iteration  24: 848214.131 ops/s
Iteration  25: 846509.622 ops/s
Iteration  26: 845264.603 ops/s
Iteration  27: 845559.906 ops/s
Iteration  28: 850220.548 ops/s
Iteration  29: 845071.608 ops/s
Iteration  30: 843772.786 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachKeyValue":
  847151.737 ±(99.9%) 2645.533 ops/s [Average]
  (min, avg, max) = (836213.785, 847151.737, 853540.637), stdev = 3959.710
  CI (99.9%): [844506.204, 849797.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEachKeyValue  thrpt   30  847151.737 ± 2645.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1283020.010 ops/s
# Warmup Iteration   2: 3389813.505 ops/s
# Warmup Iteration   3: 3414834.907 ops/s
# Warmup Iteration   4: 2813936.825 ops/s
# Warmup Iteration   5: 3423102.749 ops/s
# Warmup Iteration   6: 3396348.972 ops/s
# Warmup Iteration   7: 3418885.092 ops/s
# Warmup Iteration   8: 3411782.524 ops/s
# Warmup Iteration   9: 3412224.447 ops/s
# Warmup Iteration  10: 3421561.282 ops/s
# Warmup Iteration  11: 3421270.284 ops/s
# Warmup Iteration  12: 3416666.181 ops/s
# Warmup Iteration  13: 3417543.232 ops/s
# Warmup Iteration  14: 3424497.955 ops/s
# Warmup Iteration  15: 3408702.133 ops/s
# Warmup Iteration  16: 3404529.031 ops/s
# Warmup Iteration  17: 3396459.052 ops/s
# Warmup Iteration  18: 3396212.998 ops/s
# Warmup Iteration  19: 3411207.358 ops/s
# Warmup Iteration  20: 3427531.585 ops/s
# Warmup Iteration  21: 3413824.556 ops/s
# Warmup Iteration  22: 3415567.592 ops/s
# Warmup Iteration  23: 3419996.894 ops/s
# Warmup Iteration  24: 3407639.037 ops/s
# Warmup Iteration  25: 3413803.499 ops/s
# Warmup Iteration  26: 3421290.328 ops/s
# Warmup Iteration  27: 3414283.815 ops/s
# Warmup Iteration  28: 3418400.985 ops/s
# Warmup Iteration  29: 3403601.687 ops/s
# Warmup Iteration  30: 3419645.035 ops/s
Iteration   1: 3417331.959 ops/s
Iteration   2: 3420107.609 ops/s
Iteration   3: 3417092.586 ops/s
Iteration   4: 3423708.321 ops/s
Iteration   5: 3403388.329 ops/s
Iteration   6: 3424577.198 ops/s
Iteration   7: 3438594.877 ops/s
Iteration   8: 3405243.805 ops/s
Iteration   9: 3423545.257 ops/s
Iteration  10: 3427538.374 ops/s
Iteration  11: 3389400.612 ops/s
Iteration  12: 3419149.504 ops/s
Iteration  13: 3412232.192 ops/s
Iteration  14: 3406149.493 ops/s
Iteration  15: 3418990.196 ops/s
Iteration  16: 3424079.558 ops/s
Iteration  17: 3434333.205 ops/s
Iteration  18: 3404906.670 ops/s
Iteration  19: 3423555.761 ops/s
Iteration  20: 3418051.305 ops/s
Iteration  21: 3409967.210 ops/s
Iteration  22: 3415530.004 ops/s
Iteration  23: 3416318.603 ops/s
Iteration  24: 3404462.079 ops/s
Iteration  25: 3422065.937 ops/s
Iteration  26: 3420077.877 ops/s
Iteration  27: 3405749.826 ops/s
Iteration  28: 3422057.633 ops/s
Iteration  29: 3417983.433 ops/s
Iteration  30: 3432146.620 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachValue":
  3417277.868 ±(99.9%) 6943.474 ops/s [Average]
  (min, avg, max) = (3389400.612, 3417277.868, 3438594.877), stdev = 10392.666
  CI (99.9%): [3410334.394, 3424221.342] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEachValue  thrpt   30  3417277.868 ± 6943.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1249123.355 ops/s
# Warmup Iteration   2: 2958464.723 ops/s
# Warmup Iteration   3: 2994371.871 ops/s
# Warmup Iteration   4: 2513794.752 ops/s
# Warmup Iteration   5: 3024243.843 ops/s
# Warmup Iteration   6: 3030566.721 ops/s
# Warmup Iteration   7: 3018640.375 ops/s
# Warmup Iteration   8: 3032866.747 ops/s
# Warmup Iteration   9: 3006543.078 ops/s
# Warmup Iteration  10: 2961619.250 ops/s
# Warmup Iteration  11: 3007725.559 ops/s
# Warmup Iteration  12: 2998001.183 ops/s
# Warmup Iteration  13: 3011993.939 ops/s
# Warmup Iteration  14: 3012022.782 ops/s
# Warmup Iteration  15: 3005093.415 ops/s
# Warmup Iteration  16: 3005868.678 ops/s
# Warmup Iteration  17: 3044211.052 ops/s
# Warmup Iteration  18: 3049426.578 ops/s
# Warmup Iteration  19: 3050033.413 ops/s
# Warmup Iteration  20: 2997160.307 ops/s
# Warmup Iteration  21: 3027220.689 ops/s
# Warmup Iteration  22: 3037127.004 ops/s
# Warmup Iteration  23: 3035538.353 ops/s
# Warmup Iteration  24: 3030747.213 ops/s
# Warmup Iteration  25: 3020649.431 ops/s
# Warmup Iteration  26: 3037249.946 ops/s
# Warmup Iteration  27: 3041385.738 ops/s
# Warmup Iteration  28: 3056771.052 ops/s
# Warmup Iteration  29: 3025780.026 ops/s
# Warmup Iteration  30: 3011189.901 ops/s
Iteration   1: 3016075.378 ops/s
Iteration   2: 3025354.807 ops/s
Iteration   3: 3012024.206 ops/s
Iteration   4: 3017731.149 ops/s
Iteration   5: 3010507.686 ops/s
Iteration   6: 3037138.454 ops/s
Iteration   7: 3035930.258 ops/s
Iteration   8: 3023922.199 ops/s
Iteration   9: 3019383.989 ops/s
Iteration  10: 3039758.419 ops/s
Iteration  11: 3009118.424 ops/s
Iteration  12: 3023474.069 ops/s
Iteration  13: 3028748.975 ops/s
Iteration  14: 2996144.543 ops/s
Iteration  15: 2995177.943 ops/s
Iteration  16: 3058672.669 ops/s
Iteration  17: 3046036.939 ops/s
Iteration  18: 2996482.724 ops/s
Iteration  19: 3003737.073 ops/s
Iteration  20: 3016634.253 ops/s
Iteration  21: 3020756.808 ops/s
Iteration  22: 3024076.170 ops/s
Iteration  23: 3015716.091 ops/s
Iteration  24: 3000883.603 ops/s
Iteration  25: 3051798.195 ops/s
Iteration  26: 3069211.082 ops/s
Iteration  27: 3064270.330 ops/s
Iteration  28: 3025263.032 ops/s
Iteration  29: 3035416.791 ops/s
Iteration  30: 3036020.509 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWith":
  3025182.226 ±(99.9%) 13048.285 ops/s [Average]
  (min, avg, max) = (2995177.943, 3025182.226, 3069211.082), stdev = 19530.060
  CI (99.9%): [3012133.941, 3038230.511] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEachWith  thrpt   30  3025182.226 ± 13048.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 818008.689 ops/s
# Warmup Iteration   2: 1933448.389 ops/s
# Warmup Iteration   3: 1999758.197 ops/s
# Warmup Iteration   4: 1644370.879 ops/s
# Warmup Iteration   5: 1965568.406 ops/s
# Warmup Iteration   6: 1968136.863 ops/s
# Warmup Iteration   7: 2007253.394 ops/s
# Warmup Iteration   8: 1998460.730 ops/s
# Warmup Iteration   9: 2003641.184 ops/s
# Warmup Iteration  10: 2015123.731 ops/s
# Warmup Iteration  11: 2008843.386 ops/s
# Warmup Iteration  12: 1994568.639 ops/s
# Warmup Iteration  13: 2000371.673 ops/s
# Warmup Iteration  14: 1978432.490 ops/s
# Warmup Iteration  15: 2013397.262 ops/s
# Warmup Iteration  16: 1989944.619 ops/s
# Warmup Iteration  17: 2025149.804 ops/s
# Warmup Iteration  18: 1997192.094 ops/s
# Warmup Iteration  19: 2010969.440 ops/s
# Warmup Iteration  20: 1991359.921 ops/s
# Warmup Iteration  21: 2020406.515 ops/s
# Warmup Iteration  22: 1988715.045 ops/s
# Warmup Iteration  23: 1992278.938 ops/s
# Warmup Iteration  24: 1950654.667 ops/s
# Warmup Iteration  25: 1997938.514 ops/s
# Warmup Iteration  26: 1995766.636 ops/s
# Warmup Iteration  27: 1962359.439 ops/s
# Warmup Iteration  28: 1997296.386 ops/s
# Warmup Iteration  29: 2005025.145 ops/s
# Warmup Iteration  30: 1993550.908 ops/s
Iteration   1: 1980990.428 ops/s
Iteration   2: 1990538.796 ops/s
Iteration   3: 1954837.172 ops/s
Iteration   4: 1989738.297 ops/s
Iteration   5: 1992996.119 ops/s
Iteration   6: 1990881.863 ops/s
Iteration   7: 1989008.434 ops/s
Iteration   8: 1968314.179 ops/s
Iteration   9: 1998557.464 ops/s
Iteration  10: 1982654.365 ops/s
Iteration  11: 1983967.516 ops/s
Iteration  12: 1983608.464 ops/s
Iteration  13: 2000481.987 ops/s
Iteration  14: 1982147.078 ops/s
Iteration  15: 1981453.149 ops/s
Iteration  16: 1973265.340 ops/s
Iteration  17: 1986817.376 ops/s
Iteration  18: 1974286.544 ops/s
Iteration  19: 1977317.417 ops/s
Iteration  20: 1998716.511 ops/s
Iteration  21: 1992978.338 ops/s
Iteration  22: 1988508.939 ops/s
Iteration  23: 1983387.492 ops/s
Iteration  24: 1933810.085 ops/s
Iteration  25: 1987579.286 ops/s
Iteration  26: 1988694.063 ops/s
Iteration  27: 1969279.404 ops/s
Iteration  28: 1997338.649 ops/s
Iteration  29: 1997727.589 ops/s
Iteration  30: 1981250.855 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forEachWithIndex":
  1983371.107 ±(99.9%) 9236.663 ops/s [Average]
  (min, avg, max) = (1933810.085, 1983371.107, 2000481.987), stdev = 13825.003
  CI (99.9%): [1974134.444, 1992607.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1983371.107 ± 9236.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forcePut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forcePut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476217.041 ops/s
# Warmup Iteration   2: 647180.807 ops/s
# Warmup Iteration   3: 769425.917 ops/s
# Warmup Iteration   4: 774199.908 ops/s
# Warmup Iteration   5: 771779.947 ops/s
# Warmup Iteration   6: 770441.007 ops/s
# Warmup Iteration   7: 720082.740 ops/s
# Warmup Iteration   8: 701295.628 ops/s
# Warmup Iteration   9: 771567.088 ops/s
# Warmup Iteration  10: 773447.370 ops/s
# Warmup Iteration  11: 769164.132 ops/s
# Warmup Iteration  12: 769534.479 ops/s
# Warmup Iteration  13: 772373.148 ops/s
# Warmup Iteration  14: 774701.272 ops/s
# Warmup Iteration  15: 768377.700 ops/s
# Warmup Iteration  16: 771279.793 ops/s
# Warmup Iteration  17: 809593.196 ops/s
# Warmup Iteration  18: 806426.110 ops/s
# Warmup Iteration  19: 808736.662 ops/s
# Warmup Iteration  20: 808706.110 ops/s
# Warmup Iteration  21: 812212.182 ops/s
# Warmup Iteration  22: 812864.230 ops/s
# Warmup Iteration  23: 808485.214 ops/s
# Warmup Iteration  24: 813455.512 ops/s
# Warmup Iteration  25: 809109.044 ops/s
# Warmup Iteration  26: 812010.835 ops/s
# Warmup Iteration  27: 811165.618 ops/s
# Warmup Iteration  28: 810112.624 ops/s
# Warmup Iteration  29: 810622.889 ops/s
# Warmup Iteration  30: 806478.824 ops/s
Iteration   1: 804400.283 ops/s
Iteration   2: 803087.811 ops/s
Iteration   3: 810524.093 ops/s
Iteration   4: 809325.574 ops/s
Iteration   5: 807951.292 ops/s
Iteration   6: 807744.985 ops/s
Iteration   7: 811348.719 ops/s
Iteration   8: 810666.523 ops/s
Iteration   9: 806151.559 ops/s
Iteration  10: 811955.893 ops/s
Iteration  11: 807933.608 ops/s
Iteration  12: 810326.578 ops/s
Iteration  13: 811546.360 ops/s
Iteration  14: 802269.218 ops/s
Iteration  15: 807899.972 ops/s
Iteration  16: 808916.709 ops/s
Iteration  17: 809970.612 ops/s
Iteration  18: 807624.129 ops/s
Iteration  19: 813553.026 ops/s
Iteration  20: 806620.127 ops/s
Iteration  21: 812265.156 ops/s
Iteration  22: 807721.880 ops/s
Iteration  23: 807197.534 ops/s
Iteration  24: 810383.711 ops/s
Iteration  25: 809553.404 ops/s
Iteration  26: 812398.967 ops/s
Iteration  27: 807555.899 ops/s
Iteration  28: 809052.602 ops/s
Iteration  29: 804332.788 ops/s
Iteration  30: 805503.145 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_forcePut":
  808526.072 ±(99.9%) 1882.235 ops/s [Average]
  (min, avg, max) = (802269.218, 808526.072, 813553.026), stdev = 2817.241
  CI (99.9%): [806643.837, 810408.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_forcePut  thrpt   30  808526.072 ± 1882.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_get$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_get

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2950995.684 ops/s
# Warmup Iteration   2: 6286340.318 ops/s
# Warmup Iteration   3: 5365585.121 ops/s
# Warmup Iteration   4: 6391941.832 ops/s
# Warmup Iteration   5: 6389516.369 ops/s
# Warmup Iteration   6: 6393167.043 ops/s
# Warmup Iteration   7: 6388134.808 ops/s
# Warmup Iteration   8: 6428003.113 ops/s
# Warmup Iteration   9: 6380693.027 ops/s
# Warmup Iteration  10: 6404182.570 ops/s
# Warmup Iteration  11: 6427885.090 ops/s
# Warmup Iteration  12: 6396060.929 ops/s
# Warmup Iteration  13: 6398967.327 ops/s
# Warmup Iteration  14: 6358431.362 ops/s
# Warmup Iteration  15: 6361305.300 ops/s
# Warmup Iteration  16: 6355332.392 ops/s
# Warmup Iteration  17: 6455593.608 ops/s
# Warmup Iteration  18: 6392759.798 ops/s
# Warmup Iteration  19: 6380073.884 ops/s
# Warmup Iteration  20: 6394672.816 ops/s
# Warmup Iteration  21: 6376612.203 ops/s
# Warmup Iteration  22: 6412056.018 ops/s
# Warmup Iteration  23: 6434650.476 ops/s
# Warmup Iteration  24: 6437277.373 ops/s
# Warmup Iteration  25: 6405588.785 ops/s
# Warmup Iteration  26: 6467365.092 ops/s
# Warmup Iteration  27: 6414736.855 ops/s
# Warmup Iteration  28: 6395315.060 ops/s
# Warmup Iteration  29: 6382519.549 ops/s
# Warmup Iteration  30: 6258271.617 ops/s
Iteration   1: 6411521.991 ops/s
Iteration   2: 6368266.749 ops/s
Iteration   3: 6369018.078 ops/s
Iteration   4: 6423009.107 ops/s
Iteration   5: 6384062.142 ops/s
Iteration   6: 6404836.560 ops/s
Iteration   7: 6436658.900 ops/s
Iteration   8: 6363074.752 ops/s
Iteration   9: 6386932.176 ops/s
Iteration  10: 6425542.349 ops/s
Iteration  11: 6387175.270 ops/s
Iteration  12: 6439849.217 ops/s
Iteration  13: 6385611.042 ops/s
Iteration  14: 6430988.266 ops/s
Iteration  15: 6434244.535 ops/s
Iteration  16: 6403340.141 ops/s
Iteration  17: 6408323.983 ops/s
Iteration  18: 6416152.347 ops/s
Iteration  19: 6360995.189 ops/s
Iteration  20: 6436540.148 ops/s
Iteration  21: 6408487.368 ops/s
Iteration  22: 6330867.438 ops/s
Iteration  23: 6388902.998 ops/s
Iteration  24: 6412044.698 ops/s
Iteration  25: 6321773.532 ops/s
Iteration  26: 6342142.933 ops/s
Iteration  27: 6334387.996 ops/s
Iteration  28: 6301043.089 ops/s
Iteration  29: 6375074.971 ops/s
Iteration  30: 6358255.962 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_get":
  6388304.131 ±(99.9%) 25020.387 ops/s [Average]
  (min, avg, max) = (6301043.089, 6388304.131, 6439849.217), stdev = 37449.340
  CI (99.9%): [6363283.744, 6413324.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_get  thrpt   30  6388304.131 ± 25020.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1125667.639 ops/s
# Warmup Iteration   2: 2787384.017 ops/s
# Warmup Iteration   3: 2323909.890 ops/s
# Warmup Iteration   4: 2798840.799 ops/s
# Warmup Iteration   5: 2786908.277 ops/s
# Warmup Iteration   6: 2788771.390 ops/s
# Warmup Iteration   7: 2789578.461 ops/s
# Warmup Iteration   8: 2790858.434 ops/s
# Warmup Iteration   9: 2797328.314 ops/s
# Warmup Iteration  10: 2797192.726 ops/s
# Warmup Iteration  11: 2782839.462 ops/s
# Warmup Iteration  12: 2802818.843 ops/s
# Warmup Iteration  13: 2804635.876 ops/s
# Warmup Iteration  14: 2777058.610 ops/s
# Warmup Iteration  15: 2778075.468 ops/s
# Warmup Iteration  16: 2792916.104 ops/s
# Warmup Iteration  17: 2808473.541 ops/s
# Warmup Iteration  18: 2805163.879 ops/s
# Warmup Iteration  19: 2790679.295 ops/s
# Warmup Iteration  20: 2799127.790 ops/s
# Warmup Iteration  21: 2810895.130 ops/s
# Warmup Iteration  22: 2811776.030 ops/s
# Warmup Iteration  23: 2797541.943 ops/s
# Warmup Iteration  24: 2784091.336 ops/s
# Warmup Iteration  25: 2797307.392 ops/s
# Warmup Iteration  26: 2798808.135 ops/s
# Warmup Iteration  27: 2791604.162 ops/s
# Warmup Iteration  28: 2796391.959 ops/s
# Warmup Iteration  29: 2791827.205 ops/s
# Warmup Iteration  30: 2794678.388 ops/s
Iteration   1: 2804277.088 ops/s
Iteration   2: 2801020.939 ops/s
Iteration   3: 2790501.435 ops/s
Iteration   4: 2785380.809 ops/s
Iteration   5: 2797062.331 ops/s
Iteration   6: 2801270.086 ops/s
Iteration   7: 2814074.025 ops/s
Iteration   8: 2802807.893 ops/s
Iteration   9: 2806139.336 ops/s
Iteration  10: 2801177.847 ops/s
Iteration  11: 2780711.947 ops/s
Iteration  12: 2774440.792 ops/s
Iteration  13: 2806258.767 ops/s
Iteration  14: 2765560.097 ops/s
Iteration  15: 2822761.553 ops/s
Iteration  16: 2807014.791 ops/s
Iteration  17: 2793616.108 ops/s
Iteration  18: 2816480.234 ops/s
Iteration  19: 2819065.771 ops/s
Iteration  20: 2811405.331 ops/s
Iteration  21: 2798094.340 ops/s
Iteration  22: 2791291.175 ops/s
Iteration  23: 2772097.920 ops/s
Iteration  24: 2783685.740 ops/s
Iteration  25: 2801025.238 ops/s
Iteration  26: 2797709.648 ops/s
Iteration  27: 2771194.570 ops/s
Iteration  28: 2792991.842 ops/s
Iteration  29: 2775080.654 ops/s
Iteration  30: 2826893.632 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getFirst":
  2797036.398 ±(99.9%) 10594.674 ops/s [Average]
  (min, avg, max) = (2765560.097, 2797036.398, 2826893.632), stdev = 15857.611
  CI (99.9%): [2786441.724, 2807631.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getFirst  thrpt   30  2797036.398 ± 10594.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2899420.891 ops/s
# Warmup Iteration   2: 6405020.978 ops/s
# Warmup Iteration   3: 5347691.836 ops/s
# Warmup Iteration   4: 6486253.388 ops/s
# Warmup Iteration   5: 6510703.513 ops/s
# Warmup Iteration   6: 6517835.141 ops/s
# Warmup Iteration   7: 6444314.349 ops/s
# Warmup Iteration   8: 6435772.819 ops/s
# Warmup Iteration   9: 6460365.518 ops/s
# Warmup Iteration  10: 6496346.741 ops/s
# Warmup Iteration  11: 6525574.424 ops/s
# Warmup Iteration  12: 6527759.418 ops/s
# Warmup Iteration  13: 6505666.302 ops/s
# Warmup Iteration  14: 6513200.219 ops/s
# Warmup Iteration  15: 6526917.220 ops/s
# Warmup Iteration  16: 6499749.732 ops/s
# Warmup Iteration  17: 6438930.156 ops/s
# Warmup Iteration  18: 6502880.903 ops/s
# Warmup Iteration  19: 6428748.185 ops/s
# Warmup Iteration  20: 6439707.555 ops/s
# Warmup Iteration  21: 6504964.069 ops/s
# Warmup Iteration  22: 6494667.053 ops/s
# Warmup Iteration  23: 6484901.475 ops/s
# Warmup Iteration  24: 6514486.094 ops/s
# Warmup Iteration  25: 6503467.510 ops/s
# Warmup Iteration  26: 6507884.626 ops/s
# Warmup Iteration  27: 6584184.974 ops/s
# Warmup Iteration  28: 6356658.823 ops/s
# Warmup Iteration  29: 6416419.318 ops/s
# Warmup Iteration  30: 6468783.310 ops/s
Iteration   1: 6357464.602 ops/s
Iteration   2: 6481457.686 ops/s
Iteration   3: 6518346.583 ops/s
Iteration   4: 6522808.169 ops/s
Iteration   5: 6565349.980 ops/s
Iteration   6: 6489773.866 ops/s
Iteration   7: 6495143.579 ops/s
Iteration   8: 6377903.250 ops/s
Iteration   9: 6378692.726 ops/s
Iteration  10: 6311212.319 ops/s
Iteration  11: 6426506.042 ops/s
Iteration  12: 6498698.759 ops/s
Iteration  13: 6540448.161 ops/s
Iteration  14: 6531593.997 ops/s
Iteration  15: 6461696.263 ops/s
Iteration  16: 6480093.662 ops/s
Iteration  17: 6467959.734 ops/s
Iteration  18: 6499888.248 ops/s
Iteration  19: 6462177.989 ops/s
Iteration  20: 6468410.704 ops/s
Iteration  21: 6528336.671 ops/s
Iteration  22: 6521112.057 ops/s
Iteration  23: 6456075.302 ops/s
Iteration  24: 6573535.595 ops/s
Iteration  25: 6518498.412 ops/s
Iteration  26: 6491579.473 ops/s
Iteration  27: 6407431.972 ops/s
Iteration  28: 6547915.848 ops/s
Iteration  29: 6493758.876 ops/s
Iteration  30: 6643887.394 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent":
  6483925.264 ±(99.9%) 45986.185 ops/s [Average]
  (min, avg, max) = (6311212.319, 6483925.264, 6643887.394), stdev = 68829.962
  CI (99.9%): [6437939.079, 6529911.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent  thrpt   30  6483925.264 ± 45986.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259511.463 ops/s
# Warmup Iteration   2: 320783.980 ops/s
# Warmup Iteration   3: 395475.849 ops/s
# Warmup Iteration   4: 396900.937 ops/s
# Warmup Iteration   5: 396652.162 ops/s
# Warmup Iteration   6: 396201.707 ops/s
# Warmup Iteration   7: 394525.992 ops/s
# Warmup Iteration   8: 383985.492 ops/s
# Warmup Iteration   9: 345091.676 ops/s
# Warmup Iteration  10: 395632.828 ops/s
# Warmup Iteration  11: 395001.140 ops/s
# Warmup Iteration  12: 394150.777 ops/s
# Warmup Iteration  13: 393373.236 ops/s
# Warmup Iteration  14: 395944.910 ops/s
# Warmup Iteration  15: 393623.503 ops/s
# Warmup Iteration  16: 393891.494 ops/s
# Warmup Iteration  17: 414548.669 ops/s
# Warmup Iteration  18: 414692.519 ops/s
# Warmup Iteration  19: 413905.936 ops/s
# Warmup Iteration  20: 414876.689 ops/s
# Warmup Iteration  21: 413765.719 ops/s
# Warmup Iteration  22: 414267.598 ops/s
# Warmup Iteration  23: 414177.578 ops/s
# Warmup Iteration  24: 412639.016 ops/s
# Warmup Iteration  25: 411896.251 ops/s
# Warmup Iteration  26: 416277.421 ops/s
# Warmup Iteration  27: 413600.908 ops/s
# Warmup Iteration  28: 413140.068 ops/s
# Warmup Iteration  29: 413235.654 ops/s
# Warmup Iteration  30: 414018.810 ops/s
Iteration   1: 415618.096 ops/s
Iteration   2: 412815.450 ops/s
Iteration   3: 415554.724 ops/s
Iteration   4: 413401.570 ops/s
Iteration   5: 413550.171 ops/s
Iteration   6: 415251.754 ops/s
Iteration   7: 411132.745 ops/s
Iteration   8: 415262.695 ops/s
Iteration   9: 411754.831 ops/s
Iteration  10: 412768.125 ops/s
Iteration  11: 416460.735 ops/s
Iteration  12: 414084.834 ops/s
Iteration  13: 416498.642 ops/s
Iteration  14: 413496.869 ops/s
Iteration  15: 413925.821 ops/s
Iteration  16: 413191.884 ops/s
Iteration  17: 413963.760 ops/s
Iteration  18: 413112.313 ops/s
Iteration  19: 414856.516 ops/s
Iteration  20: 412369.051 ops/s
Iteration  21: 413852.887 ops/s
Iteration  22: 414462.710 ops/s
Iteration  23: 413916.896 ops/s
Iteration  24: 415272.560 ops/s
Iteration  25: 411057.365 ops/s
Iteration  26: 410434.976 ops/s
Iteration  27: 412393.335 ops/s
Iteration  28: 412729.975 ops/s
Iteration  29: 411148.963 ops/s
Iteration  30: 413925.326 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut":
  413608.853 ±(99.9%) 1062.257 ops/s [Average]
  (min, avg, max) = (410434.976, 413608.853, 416498.642), stdev = 1589.936
  CI (99.9%): [412546.596, 414671.109] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut  thrpt   30  413608.853 ± 1062.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 468800.421 ops/s
# Warmup Iteration   2: 632050.768 ops/s
# Warmup Iteration   3: 753325.690 ops/s
# Warmup Iteration   4: 752833.734 ops/s
# Warmup Iteration   5: 751764.354 ops/s
# Warmup Iteration   6: 752285.179 ops/s
# Warmup Iteration   7: 722334.465 ops/s
# Warmup Iteration   8: 657469.685 ops/s
# Warmup Iteration   9: 750443.986 ops/s
# Warmup Iteration  10: 750674.303 ops/s
# Warmup Iteration  11: 754043.288 ops/s
# Warmup Iteration  12: 751225.197 ops/s
# Warmup Iteration  13: 748496.865 ops/s
# Warmup Iteration  14: 756042.874 ops/s
# Warmup Iteration  15: 750247.890 ops/s
# Warmup Iteration  16: 752605.895 ops/s
# Warmup Iteration  17: 791402.600 ops/s
# Warmup Iteration  18: 791815.834 ops/s
# Warmup Iteration  19: 789240.544 ops/s
# Warmup Iteration  20: 788007.020 ops/s
# Warmup Iteration  21: 789471.396 ops/s
# Warmup Iteration  22: 787898.730 ops/s
# Warmup Iteration  23: 787862.066 ops/s
# Warmup Iteration  24: 790957.123 ops/s
# Warmup Iteration  25: 788518.618 ops/s
# Warmup Iteration  26: 791682.483 ops/s
# Warmup Iteration  27: 784730.698 ops/s
# Warmup Iteration  28: 788930.932 ops/s
# Warmup Iteration  29: 788734.131 ops/s
# Warmup Iteration  30: 787967.735 ops/s
Iteration   1: 792370.102 ops/s
Iteration   2: 787502.376 ops/s
Iteration   3: 787808.624 ops/s
Iteration   4: 790601.470 ops/s
Iteration   5: 790727.027 ops/s
Iteration   6: 790503.604 ops/s
Iteration   7: 789454.403 ops/s
Iteration   8: 791608.420 ops/s
Iteration   9: 789423.964 ops/s
Iteration  10: 792934.477 ops/s
Iteration  11: 794913.997 ops/s
Iteration  12: 781078.028 ops/s
Iteration  13: 797379.851 ops/s
Iteration  14: 790081.294 ops/s
Iteration  15: 792017.500 ops/s
Iteration  16: 791308.426 ops/s
Iteration  17: 794254.082 ops/s
Iteration  18: 790204.613 ops/s
Iteration  19: 794874.406 ops/s
Iteration  20: 790741.278 ops/s
Iteration  21: 790510.762 ops/s
Iteration  22: 792607.479 ops/s
Iteration  23: 782018.882 ops/s
Iteration  24: 787812.396 ops/s
Iteration  25: 786124.569 ops/s
Iteration  26: 781570.485 ops/s
Iteration  27: 785331.572 ops/s
Iteration  28: 789442.199 ops/s
Iteration  29: 792820.398 ops/s
Iteration  30: 790377.993 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutValue":
  789946.823 ±(99.9%) 2566.132 ops/s [Average]
  (min, avg, max) = (781078.028, 789946.823, 797379.851), stdev = 3840.865
  CI (99.9%): [787380.691, 792512.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutValue  thrpt   30  789946.823 ± 2566.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 521292.483 ops/s
# Warmup Iteration   2: 644154.280 ops/s
# Warmup Iteration   3: 802787.176 ops/s
# Warmup Iteration   4: 801123.199 ops/s
# Warmup Iteration   5: 794688.967 ops/s
# Warmup Iteration   6: 795976.150 ops/s
# Warmup Iteration   7: 798296.152 ops/s
# Warmup Iteration   8: 769175.131 ops/s
# Warmup Iteration   9: 697246.839 ops/s
# Warmup Iteration  10: 799557.691 ops/s
# Warmup Iteration  11: 798332.686 ops/s
# Warmup Iteration  12: 798415.242 ops/s
# Warmup Iteration  13: 804518.091 ops/s
# Warmup Iteration  14: 798141.399 ops/s
# Warmup Iteration  15: 798016.127 ops/s
# Warmup Iteration  16: 798543.270 ops/s
# Warmup Iteration  17: 837674.999 ops/s
# Warmup Iteration  18: 840580.424 ops/s
# Warmup Iteration  19: 840033.753 ops/s
# Warmup Iteration  20: 842546.058 ops/s
# Warmup Iteration  21: 835379.728 ops/s
# Warmup Iteration  22: 839559.936 ops/s
# Warmup Iteration  23: 835231.443 ops/s
# Warmup Iteration  24: 836653.564 ops/s
# Warmup Iteration  25: 836365.725 ops/s
# Warmup Iteration  26: 836791.915 ops/s
# Warmup Iteration  27: 839230.576 ops/s
# Warmup Iteration  28: 833442.467 ops/s
# Warmup Iteration  29: 835679.607 ops/s
# Warmup Iteration  30: 837048.742 ops/s
Iteration   1: 832369.613 ops/s
Iteration   2: 834737.850 ops/s
Iteration   3: 837024.922 ops/s
Iteration   4: 834605.261 ops/s
Iteration   5: 842407.163 ops/s
Iteration   6: 837113.005 ops/s
Iteration   7: 834673.794 ops/s
Iteration   8: 838447.229 ops/s
Iteration   9: 832368.007 ops/s
Iteration  10: 833303.200 ops/s
Iteration  11: 832458.720 ops/s
Iteration  12: 837708.423 ops/s
Iteration  13: 833945.247 ops/s
Iteration  14: 836042.934 ops/s
Iteration  15: 838147.049 ops/s
Iteration  16: 838943.977 ops/s
Iteration  17: 830533.567 ops/s
Iteration  18: 838099.424 ops/s
Iteration  19: 836354.663 ops/s
Iteration  20: 829079.964 ops/s
Iteration  21: 830586.904 ops/s
Iteration  22: 827670.285 ops/s
Iteration  23: 827040.069 ops/s
Iteration  24: 823950.546 ops/s
Iteration  25: 832969.936 ops/s
Iteration  26: 832969.023 ops/s
Iteration  27: 837465.633 ops/s
Iteration  28: 834463.364 ops/s
Iteration  29: 838630.858 ops/s
Iteration  30: 832999.722 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith":
  834237.012 ±(99.9%) 2698.945 ops/s [Average]
  (min, avg, max) = (823950.546, 834237.012, 842407.163), stdev = 4039.653
  CI (99.9%): [831538.067, 836935.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith  thrpt   30  834237.012 ± 2698.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 523505.647 ops/s
# Warmup Iteration   2: 666354.665 ops/s
# Warmup Iteration   3: 817424.770 ops/s
# Warmup Iteration   4: 812058.541 ops/s
# Warmup Iteration   5: 810495.304 ops/s
# Warmup Iteration   6: 815059.914 ops/s
# Warmup Iteration   7: 815186.926 ops/s
# Warmup Iteration   8: 745342.068 ops/s
# Warmup Iteration   9: 753524.264 ops/s
# Warmup Iteration  10: 813232.507 ops/s
# Warmup Iteration  11: 812622.487 ops/s
# Warmup Iteration  12: 813497.781 ops/s
# Warmup Iteration  13: 813311.724 ops/s
# Warmup Iteration  14: 817682.978 ops/s
# Warmup Iteration  15: 818319.596 ops/s
# Warmup Iteration  16: 816811.052 ops/s
# Warmup Iteration  17: 858422.185 ops/s
# Warmup Iteration  18: 854556.530 ops/s
# Warmup Iteration  19: 857765.256 ops/s
# Warmup Iteration  20: 856201.815 ops/s
# Warmup Iteration  21: 846524.166 ops/s
# Warmup Iteration  22: 860051.292 ops/s
# Warmup Iteration  23: 854700.696 ops/s
# Warmup Iteration  24: 858766.341 ops/s
# Warmup Iteration  25: 861282.086 ops/s
# Warmup Iteration  26: 849064.272 ops/s
# Warmup Iteration  27: 856176.330 ops/s
# Warmup Iteration  28: 858586.438 ops/s
# Warmup Iteration  29: 855129.011 ops/s
# Warmup Iteration  30: 852856.173 ops/s
Iteration   1: 857387.910 ops/s
Iteration   2: 857196.998 ops/s
Iteration   3: 839819.648 ops/s
Iteration   4: 859472.479 ops/s
Iteration   5: 862112.447 ops/s
Iteration   6: 861932.861 ops/s
Iteration   7: 859708.855 ops/s
Iteration   8: 860874.407 ops/s
Iteration   9: 864095.716 ops/s
Iteration  10: 858917.711 ops/s
Iteration  11: 854026.708 ops/s
Iteration  12: 859606.086 ops/s
Iteration  13: 859131.854 ops/s
Iteration  14: 851822.573 ops/s
Iteration  15: 858223.822 ops/s
Iteration  16: 855287.417 ops/s
Iteration  17: 860089.287 ops/s
Iteration  18: 854020.731 ops/s
Iteration  19: 862835.651 ops/s
Iteration  20: 860954.546 ops/s
Iteration  21: 852924.266 ops/s
Iteration  22: 848636.413 ops/s
Iteration  23: 853871.346 ops/s
Iteration  24: 849120.425 ops/s
Iteration  25: 857687.001 ops/s
Iteration  26: 856979.918 ops/s
Iteration  27: 849295.758 ops/s
Iteration  28: 849324.150 ops/s
Iteration  29: 856428.657 ops/s
Iteration  30: 849162.641 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey":
  856031.609 ±(99.9%) 3635.436 ops/s [Average]
  (min, avg, max) = (839819.648, 856031.609, 864095.716), stdev = 5441.350
  CI (99.9%): [852396.174, 859667.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWithKey  thrpt   30  856031.609 ± 3635.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 158957514.007 ops/s
# Warmup Iteration   2: 293537663.971 ops/s
# Warmup Iteration   3: 257441171.719 ops/s
# Warmup Iteration   4: 302112694.763 ops/s
# Warmup Iteration   5: 298978019.655 ops/s
# Warmup Iteration   6: 300325484.925 ops/s
# Warmup Iteration   7: 304490261.842 ops/s
# Warmup Iteration   8: 300977690.761 ops/s
# Warmup Iteration   9: 301801554.184 ops/s
# Warmup Iteration  10: 297772823.295 ops/s
# Warmup Iteration  11: 299012538.164 ops/s
# Warmup Iteration  12: 303243995.077 ops/s
# Warmup Iteration  13: 302025364.831 ops/s
# Warmup Iteration  14: 301522853.246 ops/s
# Warmup Iteration  15: 302260669.831 ops/s
# Warmup Iteration  16: 298906835.848 ops/s
# Warmup Iteration  17: 300017011.174 ops/s
# Warmup Iteration  18: 301217898.190 ops/s
# Warmup Iteration  19: 301884245.237 ops/s
# Warmup Iteration  20: 299609499.558 ops/s
# Warmup Iteration  21: 302194517.323 ops/s
# Warmup Iteration  22: 302028800.613 ops/s
# Warmup Iteration  23: 301443413.296 ops/s
# Warmup Iteration  24: 300445831.343 ops/s
# Warmup Iteration  25: 299069438.981 ops/s
# Warmup Iteration  26: 299287542.401 ops/s
# Warmup Iteration  27: 296286456.407 ops/s
# Warmup Iteration  28: 302459659.486 ops/s
# Warmup Iteration  29: 302206767.498 ops/s
# Warmup Iteration  30: 303502259.705 ops/s
Iteration   1: 300650427.156 ops/s
Iteration   2: 300327097.723 ops/s
Iteration   3: 301899107.312 ops/s
Iteration   4: 302891257.715 ops/s
Iteration   5: 303788968.842 ops/s
Iteration   6: 304228492.589 ops/s
Iteration   7: 304467254.167 ops/s
Iteration   8: 302471340.550 ops/s
Iteration   9: 299777293.871 ops/s
Iteration  10: 301256982.081 ops/s
Iteration  11: 302844354.201 ops/s
Iteration  12: 301000163.912 ops/s
Iteration  13: 299921560.945 ops/s
Iteration  14: 299798932.275 ops/s
Iteration  15: 300737108.153 ops/s
Iteration  16: 300467440.914 ops/s
Iteration  17: 302542145.017 ops/s
Iteration  18: 299137614.296 ops/s
Iteration  19: 301627854.828 ops/s
Iteration  20: 293989319.938 ops/s
Iteration  21: 292465584.508 ops/s
Iteration  22: 298749422.585 ops/s
Iteration  23: 301665776.994 ops/s
Iteration  24: 300478372.218 ops/s
Iteration  25: 304567699.018 ops/s
Iteration  26: 302466193.552 ops/s
Iteration  27: 302800778.660 ops/s
Iteration  28: 303914489.360 ops/s
Iteration  29: 302317099.105 ops/s
Iteration  30: 294609755.539 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws":
  300928662.934 ±(99.9%) 1955002.468 ops/s [Average]
  (min, avg, max) = (292465584.508, 300928662.934, 304567699.018), stdev = 2926155.881
  CI (99.9%): [298973660.466, 302883665.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt          Score         Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPutWith_block_throws  thrpt   30  300928662.934 ± 1955002.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160138426.727 ops/s
# Warmup Iteration   2: 291511313.363 ops/s
# Warmup Iteration   3: 256234557.450 ops/s
# Warmup Iteration   4: 300134316.622 ops/s
# Warmup Iteration   5: 303403526.099 ops/s
# Warmup Iteration   6: 304432279.121 ops/s
# Warmup Iteration   7: 304376677.446 ops/s
# Warmup Iteration   8: 304118011.743 ops/s
# Warmup Iteration   9: 303812266.819 ops/s
# Warmup Iteration  10: 300559352.537 ops/s
# Warmup Iteration  11: 300129370.277 ops/s
# Warmup Iteration  12: 304366706.131 ops/s
# Warmup Iteration  13: 304303057.207 ops/s
# Warmup Iteration  14: 305209939.200 ops/s
# Warmup Iteration  15: 304193537.534 ops/s
# Warmup Iteration  16: 304079874.487 ops/s
# Warmup Iteration  17: 306049471.154 ops/s
# Warmup Iteration  18: 304025148.970 ops/s
# Warmup Iteration  19: 304724030.436 ops/s
# Warmup Iteration  20: 304101576.271 ops/s
# Warmup Iteration  21: 303588049.223 ops/s
# Warmup Iteration  22: 303792414.230 ops/s
# Warmup Iteration  23: 305023887.666 ops/s
# Warmup Iteration  24: 304513029.044 ops/s
# Warmup Iteration  25: 298985659.518 ops/s
# Warmup Iteration  26: 302998766.719 ops/s
# Warmup Iteration  27: 302579821.792 ops/s
# Warmup Iteration  28: 299859260.481 ops/s
# Warmup Iteration  29: 302494086.011 ops/s
# Warmup Iteration  30: 300032427.782 ops/s
Iteration   1: 303467418.621 ops/s
Iteration   2: 304896240.206 ops/s
Iteration   3: 300718355.376 ops/s
Iteration   4: 301379678.827 ops/s
Iteration   5: 300344630.402 ops/s
Iteration   6: 301793918.014 ops/s
Iteration   7: 296712842.861 ops/s
Iteration   8: 302769486.999 ops/s
Iteration   9: 301728491.979 ops/s
Iteration  10: 301779795.778 ops/s
Iteration  11: 300970106.800 ops/s
Iteration  12: 301533525.324 ops/s
Iteration  13: 301027096.208 ops/s
Iteration  14: 301397980.002 ops/s
Iteration  15: 302518718.538 ops/s
Iteration  16: 302857370.443 ops/s
Iteration  17: 302781917.289 ops/s
Iteration  18: 302879795.987 ops/s
Iteration  19: 305885531.320 ops/s
Iteration  20: 302563447.740 ops/s
Iteration  21: 299297777.092 ops/s
Iteration  22: 296521936.140 ops/s
Iteration  23: 305753111.280 ops/s
Iteration  24: 306186427.433 ops/s
Iteration  25: 306079994.614 ops/s
Iteration  26: 304116098.700 ops/s
Iteration  27: 305100168.066 ops/s
Iteration  28: 302428482.022 ops/s
Iteration  29: 297763416.567 ops/s
Iteration  30: 300344905.303 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws":
  302119955.531 ±(99.9%) 1685236.507 ops/s [Average]
  (min, avg, max) = (296521936.140, 302119955.531, 306186427.433), stdev = 2522382.860
  CI (99.9%): [300434719.024, 303805192.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentPut_block_throws  thrpt   30  302119955.531 ± 1685236.507  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2422090.350 ops/s
# Warmup Iteration   2: 5486648.093 ops/s
# Warmup Iteration   3: 4556387.042 ops/s
# Warmup Iteration   4: 5498095.468 ops/s
# Warmup Iteration   5: 5472468.716 ops/s
# Warmup Iteration   6: 5495986.071 ops/s
# Warmup Iteration   7: 5503363.106 ops/s
# Warmup Iteration   8: 5493379.117 ops/s
# Warmup Iteration   9: 5530605.478 ops/s
# Warmup Iteration  10: 5533034.713 ops/s
# Warmup Iteration  11: 5529707.181 ops/s
# Warmup Iteration  12: 5496676.425 ops/s
# Warmup Iteration  13: 5500054.586 ops/s
# Warmup Iteration  14: 5486699.266 ops/s
# Warmup Iteration  15: 5505861.052 ops/s
# Warmup Iteration  16: 5474790.885 ops/s
# Warmup Iteration  17: 5529166.191 ops/s
# Warmup Iteration  18: 5493713.822 ops/s
# Warmup Iteration  19: 5498317.888 ops/s
# Warmup Iteration  20: 5459169.165 ops/s
# Warmup Iteration  21: 5481553.022 ops/s
# Warmup Iteration  22: 5490053.400 ops/s
# Warmup Iteration  23: 5474069.333 ops/s
# Warmup Iteration  24: 5482569.899 ops/s
# Warmup Iteration  25: 5533957.964 ops/s
# Warmup Iteration  26: 5491422.028 ops/s
# Warmup Iteration  27: 5521896.942 ops/s
# Warmup Iteration  28: 5533894.536 ops/s
# Warmup Iteration  29: 5539534.361 ops/s
# Warmup Iteration  30: 5527154.039 ops/s
Iteration   1: 5481468.242 ops/s
Iteration   2: 5526676.918 ops/s
Iteration   3: 5537467.736 ops/s
Iteration   4: 5600961.350 ops/s
Iteration   5: 5506570.576 ops/s
Iteration   6: 5569418.087 ops/s
Iteration   7: 5536648.284 ops/s
Iteration   8: 5527476.379 ops/s
Iteration   9: 5512146.533 ops/s
Iteration  10: 5427939.339 ops/s
Iteration  11: 5509559.910 ops/s
Iteration  12: 5455732.799 ops/s
Iteration  13: 5491929.932 ops/s
Iteration  14: 5442956.341 ops/s
Iteration  15: 5551796.672 ops/s
Iteration  16: 5534205.094 ops/s
Iteration  17: 5548395.096 ops/s
Iteration  18: 5520861.203 ops/s
Iteration  19: 5523786.390 ops/s
Iteration  20: 5524070.095 ops/s
Iteration  21: 5523178.912 ops/s
Iteration  22: 5506917.816 ops/s
Iteration  23: 5479616.591 ops/s
Iteration  24: 5484767.711 ops/s
Iteration  25: 5513060.240 ops/s
Iteration  26: 5553222.845 ops/s
Iteration  27: 5517740.993 ops/s
Iteration  28: 5481201.949 ops/s
Iteration  29: 5501808.969 ops/s
Iteration  30: 5437847.315 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentWith":
  5510981.011 ±(99.9%) 25801.619 ops/s [Average]
  (min, avg, max) = (5427939.339, 5510981.011, 5600961.350), stdev = 38618.651
  CI (99.9%): [5485179.392, 5536782.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsentWith  thrpt   30  5510981.011 ± 25801.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent_function$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent_function

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2899282.157 ops/s
# Warmup Iteration   2: 6252130.057 ops/s
# Warmup Iteration   3: 5260199.614 ops/s
# Warmup Iteration   4: 6286357.469 ops/s
# Warmup Iteration   5: 6276859.489 ops/s
# Warmup Iteration   6: 6302933.703 ops/s
# Warmup Iteration   7: 6237795.899 ops/s
# Warmup Iteration   8: 6298978.960 ops/s
# Warmup Iteration   9: 6308070.021 ops/s
# Warmup Iteration  10: 6264467.693 ops/s
# Warmup Iteration  11: 6277879.898 ops/s
# Warmup Iteration  12: 6248211.696 ops/s
# Warmup Iteration  13: 6294336.485 ops/s
# Warmup Iteration  14: 6280579.157 ops/s
# Warmup Iteration  15: 6357619.237 ops/s
# Warmup Iteration  16: 6239219.076 ops/s
# Warmup Iteration  17: 6304967.685 ops/s
# Warmup Iteration  18: 6294518.143 ops/s
# Warmup Iteration  19: 6283960.865 ops/s
# Warmup Iteration  20: 6294339.272 ops/s
# Warmup Iteration  21: 6313242.332 ops/s
# Warmup Iteration  22: 6311801.433 ops/s
# Warmup Iteration  23: 6268382.583 ops/s
# Warmup Iteration  24: 6213224.681 ops/s
# Warmup Iteration  25: 6400002.933 ops/s
# Warmup Iteration  26: 6279280.924 ops/s
# Warmup Iteration  27: 6332431.932 ops/s
# Warmup Iteration  28: 6199014.931 ops/s
# Warmup Iteration  29: 6224885.231 ops/s
# Warmup Iteration  30: 6291214.550 ops/s
Iteration   1: 6316773.489 ops/s
Iteration   2: 6255383.013 ops/s
Iteration   3: 6324366.673 ops/s
Iteration   4: 6315765.151 ops/s
Iteration   5: 6236702.393 ops/s
Iteration   6: 6334507.392 ops/s
Iteration   7: 6318380.070 ops/s
Iteration   8: 6403234.539 ops/s
Iteration   9: 6288178.594 ops/s
Iteration  10: 6262514.256 ops/s
Iteration  11: 6259673.187 ops/s
Iteration  12: 6277012.273 ops/s
Iteration  13: 6296368.166 ops/s
Iteration  14: 6321421.594 ops/s
Iteration  15: 6324500.435 ops/s
Iteration  16: 6360534.078 ops/s
Iteration  17: 6305626.139 ops/s
Iteration  18: 6299906.743 ops/s
Iteration  19: 6200851.310 ops/s
Iteration  20: 6251517.540 ops/s
Iteration  21: 6289298.683 ops/s
Iteration  22: 6304600.215 ops/s
Iteration  23: 6436407.640 ops/s
Iteration  24: 6294391.690 ops/s
Iteration  25: 6219001.269 ops/s
Iteration  26: 6289015.970 ops/s
Iteration  27: 6254293.065 ops/s
Iteration  28: 6297291.510 ops/s
Iteration  29: 6298836.007 ops/s
Iteration  30: 6314007.996 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent_function":
  6298345.369 ±(99.9%) 32262.594 ops/s [Average]
  (min, avg, max) = (6200851.310, 6298345.369, 6436407.640), stdev = 48289.136
  CI (99.9%): [6266082.775, 6330607.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getIfAbsent_function  thrpt   30  6298345.369 ± 32262.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getKeysAndGetValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getKeysAndGetValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1592707.457 ops/s
# Warmup Iteration   2: 3206502.708 ops/s
# Warmup Iteration   3: 2740393.854 ops/s
# Warmup Iteration   4: 3237477.435 ops/s
# Warmup Iteration   5: 3234576.132 ops/s
# Warmup Iteration   6: 3246954.044 ops/s
# Warmup Iteration   7: 3231656.134 ops/s
# Warmup Iteration   8: 3204531.057 ops/s
# Warmup Iteration   9: 3203819.539 ops/s
# Warmup Iteration  10: 3249970.585 ops/s
# Warmup Iteration  11: 3223957.327 ops/s
# Warmup Iteration  12: 3256118.116 ops/s
# Warmup Iteration  13: 3240227.920 ops/s
# Warmup Iteration  14: 3232601.172 ops/s
# Warmup Iteration  15: 3213998.470 ops/s
# Warmup Iteration  16: 3245241.043 ops/s
# Warmup Iteration  17: 3230566.886 ops/s
# Warmup Iteration  18: 3266328.526 ops/s
# Warmup Iteration  19: 3250063.237 ops/s
# Warmup Iteration  20: 3239569.106 ops/s
# Warmup Iteration  21: 3226477.172 ops/s
# Warmup Iteration  22: 3239364.566 ops/s
# Warmup Iteration  23: 3247085.334 ops/s
# Warmup Iteration  24: 3198518.398 ops/s
# Warmup Iteration  25: 3240666.563 ops/s
# Warmup Iteration  26: 3252851.401 ops/s
# Warmup Iteration  27: 3259329.211 ops/s
# Warmup Iteration  28: 3244146.464 ops/s
# Warmup Iteration  29: 3214524.166 ops/s
# Warmup Iteration  30: 3245818.644 ops/s
Iteration   1: 3230837.011 ops/s
Iteration   2: 3222459.375 ops/s
Iteration   3: 3231801.402 ops/s
Iteration   4: 3245931.722 ops/s
Iteration   5: 3223648.518 ops/s
Iteration   6: 3247728.468 ops/s
Iteration   7: 3227462.452 ops/s
Iteration   8: 3240038.563 ops/s
Iteration   9: 3229911.874 ops/s
Iteration  10: 3271758.063 ops/s
Iteration  11: 3239709.319 ops/s
Iteration  12: 3247827.114 ops/s
Iteration  13: 3245781.925 ops/s
Iteration  14: 3231545.419 ops/s
Iteration  15: 3232739.558 ops/s
Iteration  16: 3174602.093 ops/s
Iteration  17: 3234433.689 ops/s
Iteration  18: 3238240.885 ops/s
Iteration  19: 3254660.360 ops/s
Iteration  20: 3215431.161 ops/s
Iteration  21: 3198926.911 ops/s
Iteration  22: 3235836.648 ops/s
Iteration  23: 3238875.667 ops/s
Iteration  24: 3235666.856 ops/s
Iteration  25: 3225303.298 ops/s
Iteration  26: 3236527.365 ops/s
Iteration  27: 3258884.574 ops/s
Iteration  28: 3246014.013 ops/s
Iteration  29: 3213737.771 ops/s
Iteration  30: 3212857.508 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getKeysAndGetValues":
  3232972.653 ±(99.9%) 12236.210 ops/s [Average]
  (min, avg, max) = (3174602.093, 3232972.653, 3271758.063), stdev = 18314.584
  CI (99.9%): [3220736.443, 3245208.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getKeysAndGetValues  thrpt   30  3232972.653 ± 12236.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692489.160 ops/s
# Warmup Iteration   2: 1716721.670 ops/s
# Warmup Iteration   3: 1738213.920 ops/s
# Warmup Iteration   4: 1443273.032 ops/s
# Warmup Iteration   5: 1744872.353 ops/s
# Warmup Iteration   6: 1736606.621 ops/s
# Warmup Iteration   7: 1735938.535 ops/s
# Warmup Iteration   8: 1738596.858 ops/s
# Warmup Iteration   9: 1736845.601 ops/s
# Warmup Iteration  10: 1732146.736 ops/s
# Warmup Iteration  11: 1736491.207 ops/s
# Warmup Iteration  12: 1736019.020 ops/s
# Warmup Iteration  13: 1732057.218 ops/s
# Warmup Iteration  14: 1740265.324 ops/s
# Warmup Iteration  15: 1732273.065 ops/s
# Warmup Iteration  16: 1741898.996 ops/s
# Warmup Iteration  17: 1731942.879 ops/s
# Warmup Iteration  18: 1729298.947 ops/s
# Warmup Iteration  19: 1724417.661 ops/s
# Warmup Iteration  20: 1740449.781 ops/s
# Warmup Iteration  21: 1734858.443 ops/s
# Warmup Iteration  22: 1736643.949 ops/s
# Warmup Iteration  23: 1728241.811 ops/s
# Warmup Iteration  24: 1727720.445 ops/s
# Warmup Iteration  25: 1735435.050 ops/s
# Warmup Iteration  26: 1736842.419 ops/s
# Warmup Iteration  27: 1720757.478 ops/s
# Warmup Iteration  28: 1727642.933 ops/s
# Warmup Iteration  29: 1740245.904 ops/s
# Warmup Iteration  30: 1750860.466 ops/s
Iteration   1: 1743405.203 ops/s
Iteration   2: 1735755.113 ops/s
Iteration   3: 1741496.810 ops/s
Iteration   4: 1747259.389 ops/s
Iteration   5: 1734129.551 ops/s
Iteration   6: 1746252.190 ops/s
Iteration   7: 1730913.759 ops/s
Iteration   8: 1743275.355 ops/s
Iteration   9: 1731011.301 ops/s
Iteration  10: 1730317.961 ops/s
Iteration  11: 1733871.170 ops/s
Iteration  12: 1735062.387 ops/s
Iteration  13: 1739372.152 ops/s
Iteration  14: 1732473.962 ops/s
Iteration  15: 1734639.898 ops/s
Iteration  16: 1729095.779 ops/s
Iteration  17: 1733847.568 ops/s
Iteration  18: 1711596.773 ops/s
Iteration  19: 1735953.705 ops/s
Iteration  20: 1747861.737 ops/s
Iteration  21: 1726339.719 ops/s
Iteration  22: 1722803.339 ops/s
Iteration  23: 1738472.715 ops/s
Iteration  24: 1737337.593 ops/s
Iteration  25: 1732159.072 ops/s
Iteration  26: 1736085.195 ops/s
Iteration  27: 1735646.896 ops/s
Iteration  28: 1742804.583 ops/s
Iteration  29: 1746730.699 ops/s
Iteration  30: 1741321.706 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getLast":
  1735909.776 ±(99.9%) 5198.682 ops/s [Average]
  (min, avg, max) = (1711596.773, 1735909.776, 1747861.737), stdev = 7781.143
  CI (99.9%): [1730711.094, 1741108.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getLast  thrpt   30  1735909.776 ± 5198.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2403803.898 ops/s
# Warmup Iteration   2: 5722205.810 ops/s
# Warmup Iteration   3: 4816877.037 ops/s
# Warmup Iteration   4: 5759148.730 ops/s
# Warmup Iteration   5: 5772519.802 ops/s
# Warmup Iteration   6: 5727101.777 ops/s
# Warmup Iteration   7: 5710625.864 ops/s
# Warmup Iteration   8: 5729931.285 ops/s
# Warmup Iteration   9: 5740468.515 ops/s
# Warmup Iteration  10: 5734379.264 ops/s
# Warmup Iteration  11: 5746779.991 ops/s
# Warmup Iteration  12: 5727079.383 ops/s
# Warmup Iteration  13: 5769354.331 ops/s
# Warmup Iteration  14: 5734635.471 ops/s
# Warmup Iteration  15: 5718736.229 ops/s
# Warmup Iteration  16: 5698205.798 ops/s
# Warmup Iteration  17: 5792504.586 ops/s
# Warmup Iteration  18: 5790890.842 ops/s
# Warmup Iteration  19: 5777881.348 ops/s
# Warmup Iteration  20: 5767529.685 ops/s
# Warmup Iteration  21: 5787742.258 ops/s
# Warmup Iteration  22: 5781719.918 ops/s
# Warmup Iteration  23: 5748762.867 ops/s
# Warmup Iteration  24: 5748129.100 ops/s
# Warmup Iteration  25: 5766328.640 ops/s
# Warmup Iteration  26: 5763553.269 ops/s
# Warmup Iteration  27: 5767024.752 ops/s
# Warmup Iteration  28: 5808575.167 ops/s
# Warmup Iteration  29: 5802017.249 ops/s
# Warmup Iteration  30: 5779501.585 ops/s
Iteration   1: 5780049.110 ops/s
Iteration   2: 5780725.636 ops/s
Iteration   3: 5775423.134 ops/s
Iteration   4: 5734591.225 ops/s
Iteration   5: 5741421.161 ops/s
Iteration   6: 5761871.881 ops/s
Iteration   7: 5757329.289 ops/s
Iteration   8: 5776149.277 ops/s
Iteration   9: 5803381.610 ops/s
Iteration  10: 5745403.589 ops/s
Iteration  11: 5773788.162 ops/s
Iteration  12: 5757295.477 ops/s
Iteration  13: 5732032.689 ops/s
Iteration  14: 5743300.194 ops/s
Iteration  15: 5656152.961 ops/s
Iteration  16: 5740941.850 ops/s
Iteration  17: 5773564.227 ops/s
Iteration  18: 5798540.118 ops/s
Iteration  19: 5797693.431 ops/s
Iteration  20: 5741577.979 ops/s
Iteration  21: 5796285.416 ops/s
Iteration  22: 5762464.064 ops/s
Iteration  23: 5754031.545 ops/s
Iteration  24: 5745668.195 ops/s
Iteration  25: 5778253.600 ops/s
Iteration  26: 5764157.108 ops/s
Iteration  27: 5758628.700 ops/s
Iteration  28: 5744944.372 ops/s
Iteration  29: 5783951.377 ops/s
Iteration  30: 5783496.712 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly":
  5761437.136 ±(99.9%) 19006.155 ops/s [Average]
  (min, avg, max) = (5656152.961, 5761437.136, 5803381.610), stdev = 28447.520
  CI (99.9%): [5742430.982, 5780443.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getOnly  thrpt   30  5761437.136 ± 19006.155  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 505886.399 ops/s
# Warmup Iteration   2: 694510.043 ops/s
# Warmup Iteration   3: 847047.527 ops/s
# Warmup Iteration   4: 837954.385 ops/s
# Warmup Iteration   5: 850402.526 ops/s
# Warmup Iteration   6: 837630.016 ops/s
# Warmup Iteration   7: 842339.043 ops/s
# Warmup Iteration   8: 703008.244 ops/s
# Warmup Iteration   9: 848740.245 ops/s
# Warmup Iteration  10: 848160.299 ops/s
# Warmup Iteration  11: 842975.819 ops/s
# Warmup Iteration  12: 843364.928 ops/s
# Warmup Iteration  13: 844478.010 ops/s
# Warmup Iteration  14: 846217.875 ops/s
# Warmup Iteration  15: 845288.281 ops/s
# Warmup Iteration  16: 843877.291 ops/s
# Warmup Iteration  17: 890144.360 ops/s
# Warmup Iteration  18: 890163.566 ops/s
# Warmup Iteration  19: 881621.801 ops/s
# Warmup Iteration  20: 886714.470 ops/s
# Warmup Iteration  21: 892530.248 ops/s
# Warmup Iteration  22: 887816.929 ops/s
# Warmup Iteration  23: 885021.736 ops/s
# Warmup Iteration  24: 891360.753 ops/s
# Warmup Iteration  25: 888566.450 ops/s
# Warmup Iteration  26: 886063.763 ops/s
# Warmup Iteration  27: 883612.177 ops/s
# Warmup Iteration  28: 888796.477 ops/s
# Warmup Iteration  29: 890749.411 ops/s
# Warmup Iteration  30: 891161.446 ops/s
Iteration   1: 892352.323 ops/s
Iteration   2: 885789.056 ops/s
Iteration   3: 885344.361 ops/s
Iteration   4: 888273.204 ops/s
Iteration   5: 885895.262 ops/s
Iteration   6: 887037.415 ops/s
Iteration   7: 883626.358 ops/s
Iteration   8: 891328.185 ops/s
Iteration   9: 889530.003 ops/s
Iteration  10: 886992.531 ops/s
Iteration  11: 882997.549 ops/s
Iteration  12: 886428.978 ops/s
Iteration  13: 889585.926 ops/s
Iteration  14: 884077.168 ops/s
Iteration  15: 878633.634 ops/s
Iteration  16: 886146.831 ops/s
Iteration  17: 889097.848 ops/s
Iteration  18: 887101.817 ops/s
Iteration  19: 893885.823 ops/s
Iteration  20: 886242.941 ops/s
Iteration  21: 881707.383 ops/s
Iteration  22: 885219.221 ops/s
Iteration  23: 884121.229 ops/s
Iteration  24: 883476.739 ops/s
Iteration  25: 888201.315 ops/s
Iteration  26: 881305.118 ops/s
Iteration  27: 885345.116 ops/s
Iteration  28: 883893.816 ops/s
Iteration  29: 883362.681 ops/s
Iteration  30: 881605.100 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty":
  885953.498 ±(99.9%) 2269.203 ops/s [Average]
  (min, avg, max) = (878633.634, 885953.498, 893885.823), stdev = 3396.436
  CI (99.9%): [883684.295, 888222.700] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_empty  thrpt   30  885953.498 ± 2269.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 508829.438 ops/s
# Warmup Iteration   2: 625513.811 ops/s
# Warmup Iteration   3: 812207.603 ops/s
# Warmup Iteration   4: 807447.267 ops/s
# Warmup Iteration   5: 815297.257 ops/s
# Warmup Iteration   6: 811096.608 ops/s
# Warmup Iteration   7: 814310.850 ops/s
# Warmup Iteration   8: 810786.698 ops/s
# Warmup Iteration   9: 675914.203 ops/s
# Warmup Iteration  10: 810618.431 ops/s
# Warmup Iteration  11: 810644.987 ops/s
# Warmup Iteration  12: 812919.205 ops/s
# Warmup Iteration  13: 816259.013 ops/s
# Warmup Iteration  14: 811846.395 ops/s
# Warmup Iteration  15: 813777.147 ops/s
# Warmup Iteration  16: 813641.591 ops/s
# Warmup Iteration  17: 855004.979 ops/s
# Warmup Iteration  18: 859066.807 ops/s
# Warmup Iteration  19: 855621.868 ops/s
# Warmup Iteration  20: 855442.036 ops/s
# Warmup Iteration  21: 849512.882 ops/s
# Warmup Iteration  22: 854494.904 ops/s
# Warmup Iteration  23: 853944.474 ops/s
# Warmup Iteration  24: 856486.201 ops/s
# Warmup Iteration  25: 855879.911 ops/s
# Warmup Iteration  26: 851704.838 ops/s
# Warmup Iteration  27: 855256.148 ops/s
# Warmup Iteration  28: 852693.839 ops/s
# Warmup Iteration  29: 856990.993 ops/s
# Warmup Iteration  30: 855047.504 ops/s
Iteration   1: 857581.076 ops/s
Iteration   2: 855642.761 ops/s
Iteration   3: 851323.663 ops/s
Iteration   4: 855513.464 ops/s
Iteration   5: 859596.390 ops/s
Iteration   6: 857923.216 ops/s
Iteration   7: 856624.189 ops/s
Iteration   8: 855626.591 ops/s
Iteration   9: 853682.965 ops/s
Iteration  10: 855820.073 ops/s
Iteration  11: 851895.930 ops/s
Iteration  12: 853712.475 ops/s
Iteration  13: 856522.730 ops/s
Iteration  14: 859830.729 ops/s
Iteration  15: 855785.265 ops/s
Iteration  16: 858707.781 ops/s
Iteration  17: 855218.796 ops/s
Iteration  18: 853404.938 ops/s
Iteration  19: 849810.303 ops/s
Iteration  20: 858588.688 ops/s
Iteration  21: 858320.892 ops/s
Iteration  22: 858198.154 ops/s
Iteration  23: 860275.102 ops/s
Iteration  24: 856062.658 ops/s
Iteration  25: 856878.792 ops/s
Iteration  26: 852020.698 ops/s
Iteration  27: 855217.531 ops/s
Iteration  28: 849236.507 ops/s
Iteration  29: 865955.190 ops/s
Iteration  30: 855760.549 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values":
  856024.603 ±(99.9%) 2269.630 ops/s [Average]
  (min, avg, max) = (849236.507, 856024.603, 865955.190), stdev = 3397.076
  CI (99.9%): [853754.973, 858294.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getOnly_throws_when_multiple_values  thrpt   30  856024.603 ± 2269.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOrDefault$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOrDefault

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2564778.983 ops/s
# Warmup Iteration   2: 5969775.027 ops/s
# Warmup Iteration   3: 4929955.016 ops/s
# Warmup Iteration   4: 5711871.908 ops/s
# Warmup Iteration   5: 5751621.194 ops/s
# Warmup Iteration   6: 5674181.088 ops/s
# Warmup Iteration   7: 5741983.013 ops/s
# Warmup Iteration   8: 5757176.710 ops/s
# Warmup Iteration   9: 5792600.524 ops/s
# Warmup Iteration  10: 5748580.718 ops/s
# Warmup Iteration  11: 5757630.360 ops/s
# Warmup Iteration  12: 5901241.425 ops/s
# Warmup Iteration  13: 5711817.795 ops/s
# Warmup Iteration  14: 5799101.120 ops/s
# Warmup Iteration  15: 5740653.847 ops/s
# Warmup Iteration  16: 5815040.879 ops/s
# Warmup Iteration  17: 5807275.868 ops/s
# Warmup Iteration  18: 5770617.071 ops/s
# Warmup Iteration  19: 5840496.966 ops/s
# Warmup Iteration  20: 5855972.174 ops/s
# Warmup Iteration  21: 5775510.700 ops/s
# Warmup Iteration  22: 5862422.932 ops/s
# Warmup Iteration  23: 5741748.538 ops/s
# Warmup Iteration  24: 5824950.639 ops/s
# Warmup Iteration  25: 5966626.394 ops/s
# Warmup Iteration  26: 5784624.953 ops/s
# Warmup Iteration  27: 5796158.533 ops/s
# Warmup Iteration  28: 5837592.586 ops/s
# Warmup Iteration  29: 5757503.836 ops/s
# Warmup Iteration  30: 5742490.422 ops/s
Iteration   1: 5767920.581 ops/s
Iteration   2: 5848848.669 ops/s
Iteration   3: 5821785.163 ops/s
Iteration   4: 5819293.781 ops/s
Iteration   5: 5748529.302 ops/s
Iteration   6: 5722142.983 ops/s
Iteration   7: 5757660.345 ops/s
Iteration   8: 5707468.087 ops/s
Iteration   9: 5854607.739 ops/s
Iteration  10: 5908754.574 ops/s
Iteration  11: 5822004.339 ops/s
Iteration  12: 5816479.100 ops/s
Iteration  13: 5663036.370 ops/s
Iteration  14: 5849561.781 ops/s
Iteration  15: 5776996.842 ops/s
Iteration  16: 5804209.723 ops/s
Iteration  17: 5840404.544 ops/s
Iteration  18: 5860031.159 ops/s
Iteration  19: 5807476.371 ops/s
Iteration  20: 5810152.507 ops/s
Iteration  21: 5776540.092 ops/s
Iteration  22: 5865799.751 ops/s
Iteration  23: 5795182.986 ops/s
Iteration  24: 5878089.915 ops/s
Iteration  25: 5825239.574 ops/s
Iteration  26: 5842968.888 ops/s
Iteration  27: 5749250.814 ops/s
Iteration  28: 5804819.214 ops/s
Iteration  29: 5807736.824 ops/s
Iteration  30: 5866626.559 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_getOrDefault":
  5807320.619 ±(99.9%) 36176.343 ops/s [Average]
  (min, avg, max) = (5663036.370, 5807320.619, 5908754.574), stdev = 54147.051
  CI (99.9%): [5771144.277, 5843496.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_getOrDefault  thrpt   30  5807320.619 ± 36176.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 247519.592 ops/s
# Warmup Iteration   2: 572751.684 ops/s
# Warmup Iteration   3: 602953.785 ops/s
# Warmup Iteration   4: 553329.624 ops/s
# Warmup Iteration   5: 549828.616 ops/s
# Warmup Iteration   6: 600148.354 ops/s
# Warmup Iteration   7: 604547.048 ops/s
# Warmup Iteration   8: 601182.557 ops/s
# Warmup Iteration   9: 602482.661 ops/s
# Warmup Iteration  10: 600946.799 ops/s
# Warmup Iteration  11: 600226.692 ops/s
# Warmup Iteration  12: 600265.262 ops/s
# Warmup Iteration  13: 603504.810 ops/s
# Warmup Iteration  14: 601412.529 ops/s
# Warmup Iteration  15: 601958.899 ops/s
# Warmup Iteration  16: 602613.628 ops/s
# Warmup Iteration  17: 604081.386 ops/s
# Warmup Iteration  18: 602252.967 ops/s
# Warmup Iteration  19: 599906.217 ops/s
# Warmup Iteration  20: 601736.077 ops/s
# Warmup Iteration  21: 598643.465 ops/s
# Warmup Iteration  22: 603627.135 ops/s
# Warmup Iteration  23: 602552.599 ops/s
# Warmup Iteration  24: 599654.146 ops/s
# Warmup Iteration  25: 599715.612 ops/s
# Warmup Iteration  26: 601518.085 ops/s
# Warmup Iteration  27: 600422.374 ops/s
# Warmup Iteration  28: 601941.569 ops/s
# Warmup Iteration  29: 602689.533 ops/s
# Warmup Iteration  30: 603341.814 ops/s
Iteration   1: 604939.068 ops/s
Iteration   2: 604213.716 ops/s
Iteration   3: 603510.911 ops/s
Iteration   4: 602955.895 ops/s
Iteration   5: 601866.352 ops/s
Iteration   6: 604121.354 ops/s
Iteration   7: 601450.953 ops/s
Iteration   8: 604985.337 ops/s
Iteration   9: 595919.329 ops/s
Iteration  10: 603415.830 ops/s
Iteration  11: 603125.785 ops/s
Iteration  12: 601870.057 ops/s
Iteration  13: 606602.785 ops/s
Iteration  14: 600071.787 ops/s
Iteration  15: 601526.628 ops/s
Iteration  16: 601763.160 ops/s
Iteration  17: 600336.324 ops/s
Iteration  18: 603581.210 ops/s
Iteration  19: 598931.212 ops/s
Iteration  20: 601446.514 ops/s
Iteration  21: 606587.473 ops/s
Iteration  22: 600323.356 ops/s
Iteration  23: 602482.933 ops/s
Iteration  24: 601359.642 ops/s
Iteration  25: 602883.532 ops/s
Iteration  26: 601181.497 ops/s
Iteration  27: 601129.279 ops/s
Iteration  28: 601539.502 ops/s
Iteration  29: 599637.012 ops/s
Iteration  30: 605133.891 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupBy":
  602296.411 ±(99.9%) 1522.498 ops/s [Average]
  (min, avg, max) = (595919.329, 602296.411, 606602.785), stdev = 2278.803
  CI (99.9%): [600773.913, 603818.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupBy  thrpt   30  602296.411 ± 1522.498  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143809.642 ops/s
# Warmup Iteration   2: 307424.978 ops/s
# Warmup Iteration   3: 340441.211 ops/s
# Warmup Iteration   4: 342952.944 ops/s
# Warmup Iteration   5: 285529.305 ops/s
# Warmup Iteration   6: 341574.102 ops/s
# Warmup Iteration   7: 341464.937 ops/s
# Warmup Iteration   8: 343715.435 ops/s
# Warmup Iteration   9: 344378.749 ops/s
# Warmup Iteration  10: 343318.410 ops/s
# Warmup Iteration  11: 343366.311 ops/s
# Warmup Iteration  12: 344113.444 ops/s
# Warmup Iteration  13: 342666.684 ops/s
# Warmup Iteration  14: 342983.232 ops/s
# Warmup Iteration  15: 342800.134 ops/s
# Warmup Iteration  16: 344160.647 ops/s
# Warmup Iteration  17: 342764.892 ops/s
# Warmup Iteration  18: 344428.611 ops/s
# Warmup Iteration  19: 339880.045 ops/s
# Warmup Iteration  20: 342396.061 ops/s
# Warmup Iteration  21: 343997.583 ops/s
# Warmup Iteration  22: 341649.029 ops/s
# Warmup Iteration  23: 341844.247 ops/s
# Warmup Iteration  24: 342214.588 ops/s
# Warmup Iteration  25: 341669.302 ops/s
# Warmup Iteration  26: 343721.407 ops/s
# Warmup Iteration  27: 342692.557 ops/s
# Warmup Iteration  28: 343206.282 ops/s
# Warmup Iteration  29: 342745.745 ops/s
# Warmup Iteration  30: 341948.298 ops/s
Iteration   1: 340729.179 ops/s
Iteration   2: 341011.863 ops/s
Iteration   3: 343645.735 ops/s
Iteration   4: 341746.327 ops/s
Iteration   5: 344806.758 ops/s
Iteration   6: 343756.082 ops/s
Iteration   7: 341619.470 ops/s
Iteration   8: 340235.300 ops/s
Iteration   9: 342221.924 ops/s
Iteration  10: 342988.864 ops/s
Iteration  11: 342378.683 ops/s
Iteration  12: 343138.342 ops/s
Iteration  13: 344508.623 ops/s
Iteration  14: 342675.624 ops/s
Iteration  15: 342314.592 ops/s
Iteration  16: 343112.463 ops/s
Iteration  17: 344695.582 ops/s
Iteration  18: 342821.311 ops/s
Iteration  19: 343397.569 ops/s
Iteration  20: 342381.880 ops/s
Iteration  21: 343967.115 ops/s
Iteration  22: 342375.687 ops/s
Iteration  23: 342126.576 ops/s
Iteration  24: 342885.727 ops/s
Iteration  25: 342391.850 ops/s
Iteration  26: 342728.312 ops/s
Iteration  27: 340929.070 ops/s
Iteration  28: 340535.653 ops/s
Iteration  29: 339222.736 ops/s
Iteration  30: 343278.959 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByEach":
  342487.595 ±(99.9%) 887.567 ops/s [Average]
  (min, avg, max) = (339222.736, 342487.595, 344806.758), stdev = 1328.468
  CI (99.9%): [341600.028, 343375.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupByEach  thrpt   30  342487.595 ± 887.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 938424.553 ops/s
# Warmup Iteration   2: 2138055.632 ops/s
# Warmup Iteration   3: 2151498.731 ops/s
# Warmup Iteration   4: 1779387.162 ops/s
# Warmup Iteration   5: 2154602.530 ops/s
# Warmup Iteration   6: 2135532.398 ops/s
# Warmup Iteration   7: 2156003.245 ops/s
# Warmup Iteration   8: 2157891.929 ops/s
# Warmup Iteration   9: 2147581.617 ops/s
# Warmup Iteration  10: 2157868.790 ops/s
# Warmup Iteration  11: 2156206.740 ops/s
# Warmup Iteration  12: 2158477.829 ops/s
# Warmup Iteration  13: 2164706.964 ops/s
# Warmup Iteration  14: 2150366.902 ops/s
# Warmup Iteration  15: 2152257.385 ops/s
# Warmup Iteration  16: 2151508.913 ops/s
# Warmup Iteration  17: 2150365.739 ops/s
# Warmup Iteration  18: 2165016.141 ops/s
# Warmup Iteration  19: 2167622.321 ops/s
# Warmup Iteration  20: 2135760.790 ops/s
# Warmup Iteration  21: 2151961.372 ops/s
# Warmup Iteration  22: 2167171.265 ops/s
# Warmup Iteration  23: 2157838.903 ops/s
# Warmup Iteration  24: 2150998.827 ops/s
# Warmup Iteration  25: 2154565.451 ops/s
# Warmup Iteration  26: 2148491.917 ops/s
# Warmup Iteration  27: 2150958.881 ops/s
# Warmup Iteration  28: 2157792.810 ops/s
# Warmup Iteration  29: 2150298.457 ops/s
# Warmup Iteration  30: 2151696.051 ops/s
Iteration   1: 2159454.496 ops/s
Iteration   2: 2156289.732 ops/s
Iteration   3: 2161679.031 ops/s
Iteration   4: 2156073.130 ops/s
Iteration   5: 2154595.949 ops/s
Iteration   6: 2140525.567 ops/s
Iteration   7: 2128046.004 ops/s
Iteration   8: 2137919.272 ops/s
Iteration   9: 2162671.605 ops/s
Iteration  10: 2145698.612 ops/s
Iteration  11: 2165724.692 ops/s
Iteration  12: 2151069.412 ops/s
Iteration  13: 2153027.700 ops/s
Iteration  14: 2149931.833 ops/s
Iteration  15: 2150366.473 ops/s
Iteration  16: 2163215.884 ops/s
Iteration  17: 2138742.617 ops/s
Iteration  18: 2149786.292 ops/s
Iteration  19: 2149641.013 ops/s
Iteration  20: 2154994.277 ops/s
Iteration  21: 2150590.760 ops/s
Iteration  22: 2145329.922 ops/s
Iteration  23: 2144182.071 ops/s
Iteration  24: 2164023.114 ops/s
Iteration  25: 2146448.913 ops/s
Iteration  26: 2156581.179 ops/s
Iteration  27: 2150685.668 ops/s
Iteration  28: 2145982.798 ops/s
Iteration  29: 2166353.715 ops/s
Iteration  30: 2155950.076 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey":
  2151852.727 ±(99.9%) 5987.861 ops/s [Average]
  (min, avg, max) = (2128046.004, 2151852.727, 2166353.715), stdev = 8962.349
  CI (99.9%): [2145864.866, 2157840.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  2151852.727 ± 5987.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1174588.104 ops/s
# Warmup Iteration   2: 2645854.494 ops/s
# Warmup Iteration   3: 2656314.697 ops/s
# Warmup Iteration   4: 2212457.613 ops/s
# Warmup Iteration   5: 2634189.308 ops/s
# Warmup Iteration   6: 2658739.826 ops/s
# Warmup Iteration   7: 2646274.693 ops/s
# Warmup Iteration   8: 2665368.815 ops/s
# Warmup Iteration   9: 2648331.342 ops/s
# Warmup Iteration  10: 2662907.752 ops/s
# Warmup Iteration  11: 2672098.236 ops/s
# Warmup Iteration  12: 2676715.175 ops/s
# Warmup Iteration  13: 2674306.903 ops/s
# Warmup Iteration  14: 2671669.512 ops/s
# Warmup Iteration  15: 2661473.892 ops/s
# Warmup Iteration  16: 2642409.326 ops/s
# Warmup Iteration  17: 2651437.242 ops/s
# Warmup Iteration  18: 2653295.674 ops/s
# Warmup Iteration  19: 2651018.874 ops/s
# Warmup Iteration  20: 2654876.669 ops/s
# Warmup Iteration  21: 2676154.103 ops/s
# Warmup Iteration  22: 2661502.617 ops/s
# Warmup Iteration  23: 2660089.747 ops/s
# Warmup Iteration  24: 2681594.371 ops/s
# Warmup Iteration  25: 2670534.084 ops/s
# Warmup Iteration  26: 2672266.620 ops/s
# Warmup Iteration  27: 2668168.650 ops/s
# Warmup Iteration  28: 2663331.855 ops/s
# Warmup Iteration  29: 2666909.241 ops/s
# Warmup Iteration  30: 2677720.210 ops/s
Iteration   1: 2631705.208 ops/s
Iteration   2: 2662949.892 ops/s
Iteration   3: 2635338.149 ops/s
Iteration   4: 2664243.655 ops/s
Iteration   5: 2649358.324 ops/s
Iteration   6: 2645790.841 ops/s
Iteration   7: 2642199.045 ops/s
Iteration   8: 2635783.567 ops/s
Iteration   9: 2642471.854 ops/s
Iteration  10: 2686109.615 ops/s
Iteration  11: 2659137.623 ops/s
Iteration  12: 2645076.724 ops/s
Iteration  13: 2645124.541 ops/s
Iteration  14: 2628291.846 ops/s
Iteration  15: 2648281.893 ops/s
Iteration  16: 2660121.725 ops/s
Iteration  17: 2632333.683 ops/s
Iteration  18: 2703151.225 ops/s
Iteration  19: 2646751.436 ops/s
Iteration  20: 2672491.217 ops/s
Iteration  21: 2683233.693 ops/s
Iteration  22: 2673215.927 ops/s
Iteration  23: 2647107.153 ops/s
Iteration  24: 2675645.469 ops/s
Iteration  25: 2688155.715 ops/s
Iteration  26: 2677496.783 ops/s
Iteration  27: 2681948.462 ops/s
Iteration  28: 2681153.870 ops/s
Iteration  29: 2667155.848 ops/s
Iteration  30: 2687860.057 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target":
  2659989.501 ±(99.9%) 13686.813 ops/s [Average]
  (min, avg, max) = (2628291.846, 2659989.501, 2703151.225), stdev = 20485.779
  CI (99.9%): [2646302.689, 2673676.314] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2659989.501 ± 13686.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 418833.484 ops/s
# Warmup Iteration   2: 507820.543 ops/s
# Warmup Iteration   3: 646455.596 ops/s
# Warmup Iteration   4: 644555.681 ops/s
# Warmup Iteration   5: 646568.523 ops/s
# Warmup Iteration   6: 652523.081 ops/s
# Warmup Iteration   7: 645763.993 ops/s
# Warmup Iteration   8: 648541.721 ops/s
# Warmup Iteration   9: 536260.017 ops/s
# Warmup Iteration  10: 647918.491 ops/s
# Warmup Iteration  11: 647318.275 ops/s
# Warmup Iteration  12: 648462.057 ops/s
# Warmup Iteration  13: 649924.469 ops/s
# Warmup Iteration  14: 649165.298 ops/s
# Warmup Iteration  15: 648513.944 ops/s
# Warmup Iteration  16: 652582.714 ops/s
# Warmup Iteration  17: 672856.450 ops/s
# Warmup Iteration  18: 674737.095 ops/s
# Warmup Iteration  19: 672910.490 ops/s
# Warmup Iteration  20: 671018.213 ops/s
# Warmup Iteration  21: 674122.810 ops/s
# Warmup Iteration  22: 671717.706 ops/s
# Warmup Iteration  23: 675902.077 ops/s
# Warmup Iteration  24: 671665.551 ops/s
# Warmup Iteration  25: 675231.714 ops/s
# Warmup Iteration  26: 676632.655 ops/s
# Warmup Iteration  27: 672424.916 ops/s
# Warmup Iteration  28: 673200.220 ops/s
# Warmup Iteration  29: 670907.056 ops/s
# Warmup Iteration  30: 672813.914 ops/s
Iteration   1: 674724.428 ops/s
Iteration   2: 672408.638 ops/s
Iteration   3: 673615.059 ops/s
Iteration   4: 669824.505 ops/s
Iteration   5: 670223.075 ops/s
Iteration   6: 666167.463 ops/s
Iteration   7: 671110.455 ops/s
Iteration   8: 678620.866 ops/s
Iteration   9: 671201.986 ops/s
Iteration  10: 669753.706 ops/s
Iteration  11: 676786.704 ops/s
Iteration  12: 675334.708 ops/s
Iteration  13: 668533.619 ops/s
Iteration  14: 674039.689 ops/s
Iteration  15: 668744.212 ops/s
Iteration  16: 672164.388 ops/s
Iteration  17: 672238.832 ops/s
Iteration  18: 674741.173 ops/s
Iteration  19: 667447.769 ops/s
Iteration  20: 674268.238 ops/s
Iteration  21: 670621.647 ops/s
Iteration  22: 670967.774 ops/s
Iteration  23: 675768.599 ops/s
Iteration  24: 671601.696 ops/s
Iteration  25: 676462.575 ops/s
Iteration  26: 674941.154 ops/s
Iteration  27: 669825.304 ops/s
Iteration  28: 675921.736 ops/s
Iteration  29: 669971.313 ops/s
Iteration  30: 670895.305 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  672297.554 ±(99.9%) 2021.055 ops/s [Average]
  (min, avg, max) = (666167.463, 672297.554, 678620.866), stdev = 3025.021
  CI (99.9%): [670276.499, 674318.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  672297.554 ± 2021.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 380289.047 ops/s
# Warmup Iteration   2: 428422.074 ops/s
# Warmup Iteration   3: 567782.961 ops/s
# Warmup Iteration   4: 570126.997 ops/s
# Warmup Iteration   5: 565713.059 ops/s
# Warmup Iteration   6: 569850.210 ops/s
# Warmup Iteration   7: 568981.753 ops/s
# Warmup Iteration   8: 568195.561 ops/s
# Warmup Iteration   9: 568360.439 ops/s
# Warmup Iteration  10: 469487.937 ops/s
# Warmup Iteration  11: 572960.670 ops/s
# Warmup Iteration  12: 568772.965 ops/s
# Warmup Iteration  13: 569965.669 ops/s
# Warmup Iteration  14: 569083.017 ops/s
# Warmup Iteration  15: 569362.945 ops/s
# Warmup Iteration  16: 569781.421 ops/s
# Warmup Iteration  17: 584372.867 ops/s
# Warmup Iteration  18: 586967.512 ops/s
# Warmup Iteration  19: 586219.964 ops/s
# Warmup Iteration  20: 586862.683 ops/s
# Warmup Iteration  21: 587462.019 ops/s
# Warmup Iteration  22: 587442.823 ops/s
# Warmup Iteration  23: 588950.596 ops/s
# Warmup Iteration  24: 585280.164 ops/s
# Warmup Iteration  25: 588438.075 ops/s
# Warmup Iteration  26: 590811.916 ops/s
# Warmup Iteration  27: 586826.993 ops/s
# Warmup Iteration  28: 587137.008 ops/s
# Warmup Iteration  29: 589600.400 ops/s
# Warmup Iteration  30: 587495.581 ops/s
Iteration   1: 590252.963 ops/s
Iteration   2: 586527.002 ops/s
Iteration   3: 585965.561 ops/s
Iteration   4: 586271.068 ops/s
Iteration   5: 585168.761 ops/s
Iteration   6: 587289.421 ops/s
Iteration   7: 585722.439 ops/s
Iteration   8: 586761.934 ops/s
Iteration   9: 584146.723 ops/s
Iteration  10: 583462.771 ops/s
Iteration  11: 591570.845 ops/s
Iteration  12: 587211.485 ops/s
Iteration  13: 586555.673 ops/s
Iteration  14: 589250.725 ops/s
Iteration  15: 587551.765 ops/s
Iteration  16: 586644.493 ops/s
Iteration  17: 589303.959 ops/s
Iteration  18: 588314.100 ops/s
Iteration  19: 587314.452 ops/s
Iteration  20: 586301.919 ops/s
Iteration  21: 588289.256 ops/s
Iteration  22: 588598.775 ops/s
Iteration  23: 584046.518 ops/s
Iteration  24: 588618.816 ops/s
Iteration  25: 587238.074 ops/s
Iteration  26: 585515.900 ops/s
Iteration  27: 588735.849 ops/s
Iteration  28: 586599.814 ops/s
Iteration  29: 591145.224 ops/s
Iteration  30: 586292.131 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws":
  587222.281 ±(99.9%) 1299.048 ops/s [Average]
  (min, avg, max) = (583462.771, 587222.281, 591570.845), stdev = 1944.354
  CI (99.9%): [585923.232, 588521.329] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  587222.281 ± 1299.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_ifPresentApply$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_ifPresentApply

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2742249.077 ops/s
# Warmup Iteration   2: 6035150.880 ops/s
# Warmup Iteration   3: 4977885.942 ops/s
# Warmup Iteration   4: 5916326.972 ops/s
# Warmup Iteration   5: 6020242.102 ops/s
# Warmup Iteration   6: 5997920.714 ops/s
# Warmup Iteration   7: 5967267.900 ops/s
# Warmup Iteration   8: 5982354.192 ops/s
# Warmup Iteration   9: 6025595.266 ops/s
# Warmup Iteration  10: 5991831.026 ops/s
# Warmup Iteration  11: 5993985.791 ops/s
# Warmup Iteration  12: 5989974.953 ops/s
# Warmup Iteration  13: 6030869.020 ops/s
# Warmup Iteration  14: 5993898.755 ops/s
# Warmup Iteration  15: 5967826.019 ops/s
# Warmup Iteration  16: 5995403.495 ops/s
# Warmup Iteration  17: 5966844.875 ops/s
# Warmup Iteration  18: 6032834.564 ops/s
# Warmup Iteration  19: 6025652.063 ops/s
# Warmup Iteration  20: 6042797.827 ops/s
# Warmup Iteration  21: 6013693.796 ops/s
# Warmup Iteration  22: 5954565.955 ops/s
# Warmup Iteration  23: 5962567.819 ops/s
# Warmup Iteration  24: 5976203.615 ops/s
# Warmup Iteration  25: 5989841.400 ops/s
# Warmup Iteration  26: 6013063.287 ops/s
# Warmup Iteration  27: 5962260.574 ops/s
# Warmup Iteration  28: 5985721.508 ops/s
# Warmup Iteration  29: 6014249.938 ops/s
# Warmup Iteration  30: 5989794.281 ops/s
Iteration   1: 6003093.023 ops/s
Iteration   2: 6112620.988 ops/s
Iteration   3: 5961879.803 ops/s
Iteration   4: 6028427.176 ops/s
Iteration   5: 5963082.866 ops/s
Iteration   6: 5983357.377 ops/s
Iteration   7: 6052238.277 ops/s
Iteration   8: 6029610.943 ops/s
Iteration   9: 6018354.164 ops/s
Iteration  10: 5896445.933 ops/s
Iteration  11: 5978096.692 ops/s
Iteration  12: 6018420.704 ops/s
Iteration  13: 6019200.763 ops/s
Iteration  14: 6032770.718 ops/s
Iteration  15: 5988443.169 ops/s
Iteration  16: 5993775.670 ops/s
Iteration  17: 5972789.555 ops/s
Iteration  18: 5997454.141 ops/s
Iteration  19: 6012951.910 ops/s
Iteration  20: 6003113.175 ops/s
Iteration  21: 5964265.204 ops/s
Iteration  22: 6010360.965 ops/s
Iteration  23: 5958092.428 ops/s
Iteration  24: 5904653.072 ops/s
Iteration  25: 5960383.874 ops/s
Iteration  26: 5953911.431 ops/s
Iteration  27: 6029845.913 ops/s
Iteration  28: 5959542.075 ops/s
Iteration  29: 5981096.029 ops/s
Iteration  30: 5971344.524 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_ifPresentApply":
  5991987.419 ±(99.9%) 28379.196 ops/s [Average]
  (min, avg, max) = (5896445.933, 5991987.419, 6112620.988), stdev = 42476.648
  CI (99.9%): [5963608.223, 6020366.615] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_ifPresentApply  thrpt   30  5991987.419 ± 28379.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1810424.132 ops/s
# Warmup Iteration   2: 3902417.771 ops/s
# Warmup Iteration   3: 3957817.463 ops/s
# Warmup Iteration   4: 3315011.322 ops/s
# Warmup Iteration   5: 3966614.572 ops/s
# Warmup Iteration   6: 3977305.141 ops/s
# Warmup Iteration   7: 3949442.456 ops/s
# Warmup Iteration   8: 3946583.440 ops/s
# Warmup Iteration   9: 3943457.856 ops/s
# Warmup Iteration  10: 3927668.664 ops/s
# Warmup Iteration  11: 3954827.645 ops/s
# Warmup Iteration  12: 3970208.795 ops/s
# Warmup Iteration  13: 3956185.972 ops/s
# Warmup Iteration  14: 3960619.445 ops/s
# Warmup Iteration  15: 3980716.826 ops/s
# Warmup Iteration  16: 3921948.638 ops/s
# Warmup Iteration  17: 3915905.800 ops/s
# Warmup Iteration  18: 3992609.796 ops/s
# Warmup Iteration  19: 3909425.435 ops/s
# Warmup Iteration  20: 3929305.978 ops/s
# Warmup Iteration  21: 3916402.274 ops/s
# Warmup Iteration  22: 3921363.884 ops/s
# Warmup Iteration  23: 3969658.132 ops/s
# Warmup Iteration  24: 3951139.561 ops/s
# Warmup Iteration  25: 3951775.530 ops/s
# Warmup Iteration  26: 3951551.974 ops/s
# Warmup Iteration  27: 3939970.882 ops/s
# Warmup Iteration  28: 3967221.826 ops/s
# Warmup Iteration  29: 3983234.000 ops/s
# Warmup Iteration  30: 3972721.280 ops/s
Iteration   1: 3934296.832 ops/s
Iteration   2: 3949572.038 ops/s
Iteration   3: 3954306.888 ops/s
Iteration   4: 3956563.249 ops/s
Iteration   5: 3985107.456 ops/s
Iteration   6: 3948751.173 ops/s
Iteration   7: 3930997.194 ops/s
Iteration   8: 3910323.630 ops/s
Iteration   9: 3916267.112 ops/s
Iteration  10: 3941750.115 ops/s
Iteration  11: 3948372.696 ops/s
Iteration  12: 3962930.949 ops/s
Iteration  13: 3963737.694 ops/s
Iteration  14: 3973673.401 ops/s
Iteration  15: 3978661.096 ops/s
Iteration  16: 3987443.378 ops/s
Iteration  17: 3957172.589 ops/s
Iteration  18: 3946547.626 ops/s
Iteration  19: 3971618.213 ops/s
Iteration  20: 3969349.433 ops/s
Iteration  21: 3977523.435 ops/s
Iteration  22: 3933807.103 ops/s
Iteration  23: 3945765.932 ops/s
Iteration  24: 3960660.625 ops/s
Iteration  25: 3941222.617 ops/s
Iteration  26: 3932984.982 ops/s
Iteration  27: 3940978.046 ops/s
Iteration  28: 3943403.264 ops/s
Iteration  29: 3960127.613 ops/s
Iteration  30: 3978843.852 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectInto":
  3953425.341 ±(99.9%) 12986.464 ops/s [Average]
  (min, avg, max) = (3910323.630, 3953425.341, 3987443.378), stdev = 19437.529
  CI (99.9%): [3940438.877, 3966411.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectInto  thrpt   30  3953425.341 ± 12986.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2345759.887 ops/s
# Warmup Iteration   2: 4983928.488 ops/s
# Warmup Iteration   3: 4609117.954 ops/s
# Warmup Iteration   4: 4758518.670 ops/s
# Warmup Iteration   5: 5051815.928 ops/s
# Warmup Iteration   6: 5012508.784 ops/s
# Warmup Iteration   7: 5017230.701 ops/s
# Warmup Iteration   8: 4998050.761 ops/s
# Warmup Iteration   9: 5102346.619 ops/s
# Warmup Iteration  10: 5076206.177 ops/s
# Warmup Iteration  11: 5078623.307 ops/s
# Warmup Iteration  12: 5122278.437 ops/s
# Warmup Iteration  13: 5087750.884 ops/s
# Warmup Iteration  14: 5122347.514 ops/s
# Warmup Iteration  15: 5049935.687 ops/s
# Warmup Iteration  16: 4974793.212 ops/s
# Warmup Iteration  17: 5010440.955 ops/s
# Warmup Iteration  18: 5126500.973 ops/s
# Warmup Iteration  19: 5192399.585 ops/s
# Warmup Iteration  20: 5074790.014 ops/s
# Warmup Iteration  21: 5097835.076 ops/s
# Warmup Iteration  22: 5100226.204 ops/s
# Warmup Iteration  23: 5093417.260 ops/s
# Warmup Iteration  24: 5108344.018 ops/s
# Warmup Iteration  25: 5069969.564 ops/s
# Warmup Iteration  26: 5031519.990 ops/s
# Warmup Iteration  27: 5154654.065 ops/s
# Warmup Iteration  28: 5105282.302 ops/s
# Warmup Iteration  29: 5058875.594 ops/s
# Warmup Iteration  30: 5092692.790 ops/s
Iteration   1: 5079152.645 ops/s
Iteration   2: 5116090.038 ops/s
Iteration   3: 5091367.702 ops/s
Iteration   4: 5071922.313 ops/s
Iteration   5: 5111683.820 ops/s
Iteration   6: 5091327.747 ops/s
Iteration   7: 5062354.608 ops/s
Iteration   8: 5073000.423 ops/s
Iteration   9: 5081136.568 ops/s
Iteration  10: 5127380.370 ops/s
Iteration  11: 5084396.088 ops/s
Iteration  12: 5063682.259 ops/s
Iteration  13: 5077771.407 ops/s
Iteration  14: 5182044.265 ops/s
Iteration  15: 5097939.705 ops/s
Iteration  16: 5127199.110 ops/s
Iteration  17: 5088582.390 ops/s
Iteration  18: 5081623.581 ops/s
Iteration  19: 5094591.639 ops/s
Iteration  20: 5126922.658 ops/s
Iteration  21: 5106704.381 ops/s
Iteration  22: 5070371.507 ops/s
Iteration  23: 5114343.652 ops/s
Iteration  24: 5096697.595 ops/s
Iteration  25: 5097831.009 ops/s
Iteration  26: 5192413.628 ops/s
Iteration  27: 5097321.544 ops/s
Iteration  28: 5133042.281 ops/s
Iteration  29: 5052743.574 ops/s
Iteration  30: 5069862.993 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoDouble":
  5098716.717 ±(99.9%) 21362.745 ops/s [Average]
  (min, avg, max) = (5052743.574, 5098716.717, 5192413.628), stdev = 31974.753
  CI (99.9%): [5077353.972, 5120079.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  5098716.717 ± 21362.745  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2388465.989 ops/s
# Warmup Iteration   2: 5114412.759 ops/s
# Warmup Iteration   3: 4522391.307 ops/s
# Warmup Iteration   4: 5035475.496 ops/s
# Warmup Iteration   5: 5184963.007 ops/s
# Warmup Iteration   6: 5236225.378 ops/s
# Warmup Iteration   7: 5210699.270 ops/s
# Warmup Iteration   8: 5220933.121 ops/s
# Warmup Iteration   9: 5241974.508 ops/s
# Warmup Iteration  10: 5236562.211 ops/s
# Warmup Iteration  11: 5213365.065 ops/s
# Warmup Iteration  12: 5233946.334 ops/s
# Warmup Iteration  13: 5209260.494 ops/s
# Warmup Iteration  14: 5266044.941 ops/s
# Warmup Iteration  15: 5188223.188 ops/s
# Warmup Iteration  16: 5249757.258 ops/s
# Warmup Iteration  17: 5228383.946 ops/s
# Warmup Iteration  18: 5239638.605 ops/s
# Warmup Iteration  19: 5206080.873 ops/s
# Warmup Iteration  20: 5257196.177 ops/s
# Warmup Iteration  21: 5250185.404 ops/s
# Warmup Iteration  22: 5254225.769 ops/s
# Warmup Iteration  23: 5197308.441 ops/s
# Warmup Iteration  24: 5270208.129 ops/s
# Warmup Iteration  25: 5213148.369 ops/s
# Warmup Iteration  26: 5256424.897 ops/s
# Warmup Iteration  27: 5212545.823 ops/s
# Warmup Iteration  28: 5255004.962 ops/s
# Warmup Iteration  29: 5194972.692 ops/s
# Warmup Iteration  30: 5213356.535 ops/s
Iteration   1: 5181230.909 ops/s
Iteration   2: 5181986.349 ops/s
Iteration   3: 5230980.568 ops/s
Iteration   4: 5218522.412 ops/s
Iteration   5: 5221729.815 ops/s
Iteration   6: 5203170.687 ops/s
Iteration   7: 5242818.357 ops/s
Iteration   8: 5225872.636 ops/s
Iteration   9: 5210252.757 ops/s
Iteration  10: 5273106.005 ops/s
Iteration  11: 5226959.994 ops/s
Iteration  12: 5217176.059 ops/s
Iteration  13: 5258417.243 ops/s
Iteration  14: 5313683.550 ops/s
Iteration  15: 5244447.357 ops/s
Iteration  16: 5220570.744 ops/s
Iteration  17: 5282058.712 ops/s
Iteration  18: 5233351.946 ops/s
Iteration  19: 5215128.105 ops/s
Iteration  20: 5251690.971 ops/s
Iteration  21: 5254207.565 ops/s
Iteration  22: 5218236.090 ops/s
Iteration  23: 5238690.072 ops/s
Iteration  24: 5211602.573 ops/s
Iteration  25: 5236143.466 ops/s
Iteration  26: 5263023.691 ops/s
Iteration  27: 5227833.189 ops/s
Iteration  28: 5220946.959 ops/s
Iteration  29: 5215918.919 ops/s
Iteration  30: 5109125.532 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoFloat":
  5228296.108 ±(99.9%) 23801.188 ops/s [Average]
  (min, avg, max) = (5109125.532, 5228296.108, 5313683.550), stdev = 35624.500
  CI (99.9%): [5204494.920, 5252097.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  5228296.108 ± 23801.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2382851.680 ops/s
# Warmup Iteration   2: 5141485.783 ops/s
# Warmup Iteration   3: 4447623.769 ops/s
# Warmup Iteration   4: 4714765.629 ops/s
# Warmup Iteration   5: 5025592.981 ops/s
# Warmup Iteration   6: 4977539.389 ops/s
# Warmup Iteration   7: 4991603.611 ops/s
# Warmup Iteration   8: 4966931.291 ops/s
# Warmup Iteration   9: 4961109.165 ops/s
# Warmup Iteration  10: 4969099.290 ops/s
# Warmup Iteration  11: 4989494.808 ops/s
# Warmup Iteration  12: 4971176.495 ops/s
# Warmup Iteration  13: 4984747.535 ops/s
# Warmup Iteration  14: 4966480.833 ops/s
# Warmup Iteration  15: 4985533.835 ops/s
# Warmup Iteration  16: 4918748.574 ops/s
# Warmup Iteration  17: 5007701.203 ops/s
# Warmup Iteration  18: 4969310.853 ops/s
# Warmup Iteration  19: 4973822.637 ops/s
# Warmup Iteration  20: 4971472.486 ops/s
# Warmup Iteration  21: 4962513.423 ops/s
# Warmup Iteration  22: 4973197.672 ops/s
# Warmup Iteration  23: 4967029.747 ops/s
# Warmup Iteration  24: 5008821.908 ops/s
# Warmup Iteration  25: 4969675.383 ops/s
# Warmup Iteration  26: 4984043.621 ops/s
# Warmup Iteration  27: 4965618.624 ops/s
# Warmup Iteration  28: 4930166.424 ops/s
# Warmup Iteration  29: 4948533.778 ops/s
# Warmup Iteration  30: 4928794.580 ops/s
Iteration   1: 4831188.214 ops/s
Iteration   2: 4968537.993 ops/s
Iteration   3: 4933606.663 ops/s
Iteration   4: 4974015.350 ops/s
Iteration   5: 4998779.041 ops/s
Iteration   6: 4950110.424 ops/s
Iteration   7: 4984096.804 ops/s
Iteration   8: 4993547.096 ops/s
Iteration   9: 4984268.523 ops/s
Iteration  10: 4952720.840 ops/s
Iteration  11: 4977458.487 ops/s
Iteration  12: 4930965.517 ops/s
Iteration  13: 4931688.328 ops/s
Iteration  14: 4968762.601 ops/s
Iteration  15: 4949080.297 ops/s
Iteration  16: 4999744.873 ops/s
Iteration  17: 4960049.554 ops/s
Iteration  18: 4982362.444 ops/s
Iteration  19: 4968860.881 ops/s
Iteration  20: 4978924.615 ops/s
Iteration  21: 4979098.408 ops/s
Iteration  22: 4960720.037 ops/s
Iteration  23: 4946126.473 ops/s
Iteration  24: 4986122.068 ops/s
Iteration  25: 4971245.766 ops/s
Iteration  26: 4931491.205 ops/s
Iteration  27: 4977659.197 ops/s
Iteration  28: 4953987.780 ops/s
Iteration  29: 5027676.510 ops/s
Iteration  30: 4872939.430 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoInt":
  4960861.181 ±(99.9%) 25070.594 ops/s [Average]
  (min, avg, max) = (4831188.214, 4960861.181, 5027676.510), stdev = 37524.488
  CI (99.9%): [4935790.587, 4985931.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoInt  thrpt   30  4960861.181 ± 25070.594  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1037237.026 ops/s
# Warmup Iteration   2: 2464637.927 ops/s
# Warmup Iteration   3: 2478644.981 ops/s
# Warmup Iteration   4: 2055707.538 ops/s
# Warmup Iteration   5: 2494646.851 ops/s
# Warmup Iteration   6: 2465897.381 ops/s
# Warmup Iteration   7: 2473604.562 ops/s
# Warmup Iteration   8: 2472039.218 ops/s
# Warmup Iteration   9: 2477854.418 ops/s
# Warmup Iteration  10: 2485615.715 ops/s
# Warmup Iteration  11: 2460350.256 ops/s
# Warmup Iteration  12: 2461462.241 ops/s
# Warmup Iteration  13: 2493316.373 ops/s
# Warmup Iteration  14: 2473438.963 ops/s
# Warmup Iteration  15: 2472531.711 ops/s
# Warmup Iteration  16: 2471503.523 ops/s
# Warmup Iteration  17: 2441254.954 ops/s
# Warmup Iteration  18: 2459710.608 ops/s
# Warmup Iteration  19: 2463697.896 ops/s
# Warmup Iteration  20: 2471227.851 ops/s
# Warmup Iteration  21: 2483489.250 ops/s
# Warmup Iteration  22: 2480531.620 ops/s
# Warmup Iteration  23: 2481006.915 ops/s
# Warmup Iteration  24: 2475607.558 ops/s
# Warmup Iteration  25: 2478153.133 ops/s
# Warmup Iteration  26: 2473477.446 ops/s
# Warmup Iteration  27: 2486019.787 ops/s
# Warmup Iteration  28: 2501694.335 ops/s
# Warmup Iteration  29: 2488803.830 ops/s
# Warmup Iteration  30: 2463181.789 ops/s
Iteration   1: 2487445.558 ops/s
Iteration   2: 2448491.088 ops/s
Iteration   3: 2478040.118 ops/s
Iteration   4: 2476606.679 ops/s
Iteration   5: 2473122.272 ops/s
Iteration   6: 2491825.559 ops/s
Iteration   7: 2452308.722 ops/s
Iteration   8: 2493548.155 ops/s
Iteration   9: 2485311.747 ops/s
Iteration  10: 2466752.206 ops/s
Iteration  11: 2490945.263 ops/s
Iteration  12: 2473841.699 ops/s
Iteration  13: 2461142.836 ops/s
Iteration  14: 2470998.356 ops/s
Iteration  15: 2492827.831 ops/s
Iteration  16: 2470966.656 ops/s
Iteration  17: 2479820.615 ops/s
Iteration  18: 2478984.659 ops/s
Iteration  19: 2485859.967 ops/s
Iteration  20: 2456913.391 ops/s
Iteration  21: 2480121.478 ops/s
Iteration  22: 2472189.130 ops/s
Iteration  23: 2495681.546 ops/s
Iteration  24: 2486301.932 ops/s
Iteration  25: 2463182.323 ops/s
Iteration  26: 2487613.355 ops/s
Iteration  27: 2494447.430 ops/s
Iteration  28: 2492767.214 ops/s
Iteration  29: 2465870.342 ops/s
Iteration  30: 2519973.238 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoKeyValue":
  2479130.045 ±(99.9%) 10115.483 ops/s [Average]
  (min, avg, max) = (2448491.088, 2479130.045, 2519973.238), stdev = 15140.380
  CI (99.9%): [2469014.562, 2489245.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoKeyValue  thrpt   30  2479130.045 ± 10115.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2148494.238 ops/s
# Warmup Iteration   2: 4511660.005 ops/s
# Warmup Iteration   3: 4488170.765 ops/s
# Warmup Iteration   4: 3777714.911 ops/s
# Warmup Iteration   5: 4546931.336 ops/s
# Warmup Iteration   6: 4480433.744 ops/s
# Warmup Iteration   7: 4527860.187 ops/s
# Warmup Iteration   8: 4474577.872 ops/s
# Warmup Iteration   9: 4515704.958 ops/s
# Warmup Iteration  10: 4567226.021 ops/s
# Warmup Iteration  11: 4531492.074 ops/s
# Warmup Iteration  12: 4490045.274 ops/s
# Warmup Iteration  13: 4498013.365 ops/s
# Warmup Iteration  14: 4475745.020 ops/s
# Warmup Iteration  15: 4520806.417 ops/s
# Warmup Iteration  16: 4476867.201 ops/s
# Warmup Iteration  17: 4493794.493 ops/s
# Warmup Iteration  18: 4457258.693 ops/s
# Warmup Iteration  19: 4561274.745 ops/s
# Warmup Iteration  20: 4497630.581 ops/s
# Warmup Iteration  21: 4409973.583 ops/s
# Warmup Iteration  22: 4464169.179 ops/s
# Warmup Iteration  23: 4485594.238 ops/s
# Warmup Iteration  24: 4504146.369 ops/s
# Warmup Iteration  25: 4491951.243 ops/s
# Warmup Iteration  26: 4573998.914 ops/s
# Warmup Iteration  27: 4640022.825 ops/s
# Warmup Iteration  28: 4251294.009 ops/s
# Warmup Iteration  29: 4404019.932 ops/s
# Warmup Iteration  30: 4483281.935 ops/s
Iteration   1: 4462332.576 ops/s
Iteration   2: 4488026.578 ops/s
Iteration   3: 4558117.214 ops/s
Iteration   4: 4463174.161 ops/s
Iteration   5: 4511253.208 ops/s
Iteration   6: 4465436.154 ops/s
Iteration   7: 4515140.354 ops/s
Iteration   8: 4436187.739 ops/s
Iteration   9: 4567297.931 ops/s
Iteration  10: 4470950.546 ops/s
Iteration  11: 4444616.575 ops/s
Iteration  12: 4521181.493 ops/s
Iteration  13: 4467624.726 ops/s
Iteration  14: 4543489.863 ops/s
Iteration  15: 4333002.300 ops/s
Iteration  16: 4397988.175 ops/s
Iteration  17: 4471606.906 ops/s
Iteration  18: 4428268.938 ops/s
Iteration  19: 4415646.632 ops/s
Iteration  20: 4501572.699 ops/s
Iteration  21: 4474858.626 ops/s
Iteration  22: 4574195.245 ops/s
Iteration  23: 4490890.513 ops/s
Iteration  24: 4509022.333 ops/s
Iteration  25: 4501220.982 ops/s
Iteration  26: 4483976.183 ops/s
Iteration  27: 4448567.713 ops/s
Iteration  28: 4442305.842 ops/s
Iteration  29: 4451025.681 ops/s
Iteration  30: 4465862.540 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoLong":
  4476828.014 ±(99.9%) 33999.405 ops/s [Average]
  (min, avg, max) = (4333002.300, 4476828.014, 4574195.245), stdev = 50888.712
  CI (99.9%): [4442828.610, 4510827.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_injectIntoLong  thrpt   30  4476828.014 ± 33999.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_into$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_into

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1044962.703 ops/s
# Warmup Iteration   2: 2633405.342 ops/s
# Warmup Iteration   3: 2670929.877 ops/s
# Warmup Iteration   4: 2211606.105 ops/s
# Warmup Iteration   5: 2672214.786 ops/s
# Warmup Iteration   6: 2681695.984 ops/s
# Warmup Iteration   7: 2677342.631 ops/s
# Warmup Iteration   8: 2678044.050 ops/s
# Warmup Iteration   9: 2673698.146 ops/s
# Warmup Iteration  10: 2675522.639 ops/s
# Warmup Iteration  11: 2672340.717 ops/s
# Warmup Iteration  12: 2660860.797 ops/s
# Warmup Iteration  13: 2657632.604 ops/s
# Warmup Iteration  14: 2676487.938 ops/s
# Warmup Iteration  15: 2675192.551 ops/s
# Warmup Iteration  16: 2676316.937 ops/s
# Warmup Iteration  17: 2670825.254 ops/s
# Warmup Iteration  18: 2676592.644 ops/s
# Warmup Iteration  19: 2672189.583 ops/s
# Warmup Iteration  20: 2669868.504 ops/s
# Warmup Iteration  21: 2675432.405 ops/s
# Warmup Iteration  22: 2672528.659 ops/s
# Warmup Iteration  23: 2683195.596 ops/s
# Warmup Iteration  24: 2665553.727 ops/s
# Warmup Iteration  25: 2670891.333 ops/s
# Warmup Iteration  26: 2676031.914 ops/s
# Warmup Iteration  27: 2670037.385 ops/s
# Warmup Iteration  28: 2661438.007 ops/s
# Warmup Iteration  29: 2665215.829 ops/s
# Warmup Iteration  30: 2678359.874 ops/s
Iteration   1: 2669992.993 ops/s
Iteration   2: 2678065.961 ops/s
Iteration   3: 2670987.854 ops/s
Iteration   4: 2662824.231 ops/s
Iteration   5: 2671162.204 ops/s
Iteration   6: 2668979.856 ops/s
Iteration   7: 2686335.033 ops/s
Iteration   8: 2683707.280 ops/s
Iteration   9: 2662744.257 ops/s
Iteration  10: 2669711.339 ops/s
Iteration  11: 2687922.362 ops/s
Iteration  12: 2674917.836 ops/s
Iteration  13: 2674340.492 ops/s
Iteration  14: 2672412.983 ops/s
Iteration  15: 2689030.507 ops/s
Iteration  16: 2671055.963 ops/s
Iteration  17: 2686324.136 ops/s
Iteration  18: 2676965.169 ops/s
Iteration  19: 2688353.400 ops/s
Iteration  20: 2674081.627 ops/s
Iteration  21: 2680969.267 ops/s
Iteration  22: 2677429.432 ops/s
Iteration  23: 2686452.308 ops/s
Iteration  24: 2678125.769 ops/s
Iteration  25: 2671799.913 ops/s
Iteration  26: 2669381.135 ops/s
Iteration  27: 2683107.473 ops/s
Iteration  28: 2687185.785 ops/s
Iteration  29: 2674850.953 ops/s
Iteration  30: 2677513.772 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_into":
  2676891.043 ±(99.9%) 5066.375 ops/s [Average]
  (min, avg, max) = (2662744.257, 2676891.043, 2689030.507), stdev = 7583.113
  CI (99.9%): [2671824.668, 2681957.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_into  thrpt   30  2676891.043 ± 5066.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1688953.148 ops/s
# Warmup Iteration   2: 3629469.053 ops/s
# Warmup Iteration   3: 3018018.161 ops/s
# Warmup Iteration   4: 3595087.732 ops/s
# Warmup Iteration   5: 3573640.217 ops/s
# Warmup Iteration   6: 3583768.336 ops/s
# Warmup Iteration   7: 3570052.833 ops/s
# Warmup Iteration   8: 3619791.535 ops/s
# Warmup Iteration   9: 3606288.447 ops/s
# Warmup Iteration  10: 3613611.496 ops/s
# Warmup Iteration  11: 3587560.161 ops/s
# Warmup Iteration  12: 3549793.373 ops/s
# Warmup Iteration  13: 3567657.522 ops/s
# Warmup Iteration  14: 3583155.327 ops/s
# Warmup Iteration  15: 3558568.866 ops/s
# Warmup Iteration  16: 3603305.876 ops/s
# Warmup Iteration  17: 3551982.612 ops/s
# Warmup Iteration  18: 3566599.088 ops/s
# Warmup Iteration  19: 3572786.675 ops/s
# Warmup Iteration  20: 3589924.242 ops/s
# Warmup Iteration  21: 3608545.681 ops/s
# Warmup Iteration  22: 3605489.782 ops/s
# Warmup Iteration  23: 3604062.972 ops/s
# Warmup Iteration  24: 3608337.039 ops/s
# Warmup Iteration  25: 3584181.378 ops/s
# Warmup Iteration  26: 3599071.351 ops/s
# Warmup Iteration  27: 3578801.127 ops/s
# Warmup Iteration  28: 3590002.295 ops/s
# Warmup Iteration  29: 3591407.554 ops/s
# Warmup Iteration  30: 3609426.371 ops/s
Iteration   1: 3609371.506 ops/s
Iteration   2: 3624439.002 ops/s
Iteration   3: 3563134.337 ops/s
Iteration   4: 3567042.321 ops/s
Iteration   5: 3591215.350 ops/s
Iteration   6: 3605649.957 ops/s
Iteration   7: 3626381.348 ops/s
Iteration   8: 3597001.910 ops/s
Iteration   9: 3611149.709 ops/s
Iteration  10: 3594449.906 ops/s
Iteration  11: 3606873.538 ops/s
Iteration  12: 3582075.701 ops/s
Iteration  13: 3579270.404 ops/s
Iteration  14: 3603946.162 ops/s
Iteration  15: 3605482.030 ops/s
Iteration  16: 3599058.916 ops/s
Iteration  17: 3586863.488 ops/s
Iteration  18: 3635380.344 ops/s
Iteration  19: 3592629.996 ops/s
Iteration  20: 3614604.918 ops/s
Iteration  21: 3617130.554 ops/s
Iteration  22: 3576413.184 ops/s
Iteration  23: 3596502.380 ops/s
Iteration  24: 3593417.027 ops/s
Iteration  25: 3590349.129 ops/s
Iteration  26: 3568646.367 ops/s
Iteration  27: 3580707.592 ops/s
Iteration  28: 3613417.767 ops/s
Iteration  29: 3601349.703 ops/s
Iteration  30: 3587542.344 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_isEmpty":
  3597383.230 ±(99.9%) 11849.152 ops/s [Average]
  (min, avg, max) = (3563134.337, 3597383.230, 3635380.344), stdev = 17735.254
  CI (99.9%): [3585534.078, 3609232.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_isEmpty  thrpt   30  3597383.230 ± 11849.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 229267.479 ops/s
# Warmup Iteration   2: 300814.570 ops/s
# Warmup Iteration   3: 373111.265 ops/s
# Warmup Iteration   4: 371983.535 ops/s
# Warmup Iteration   5: 373675.072 ops/s
# Warmup Iteration   6: 374340.589 ops/s
# Warmup Iteration   7: 373679.910 ops/s
# Warmup Iteration   8: 333153.603 ops/s
# Warmup Iteration   9: 352902.586 ops/s
# Warmup Iteration  10: 372925.107 ops/s
# Warmup Iteration  11: 369918.442 ops/s
# Warmup Iteration  12: 372370.004 ops/s
# Warmup Iteration  13: 371415.113 ops/s
# Warmup Iteration  14: 373424.438 ops/s
# Warmup Iteration  15: 373317.447 ops/s
# Warmup Iteration  16: 371373.829 ops/s
# Warmup Iteration  17: 389404.224 ops/s
# Warmup Iteration  18: 387935.574 ops/s
# Warmup Iteration  19: 390145.176 ops/s
# Warmup Iteration  20: 389762.769 ops/s
# Warmup Iteration  21: 390160.584 ops/s
# Warmup Iteration  22: 389576.728 ops/s
# Warmup Iteration  23: 390945.018 ops/s
# Warmup Iteration  24: 390416.401 ops/s
# Warmup Iteration  25: 389297.001 ops/s
# Warmup Iteration  26: 387281.199 ops/s
# Warmup Iteration  27: 386984.368 ops/s
# Warmup Iteration  28: 386238.160 ops/s
# Warmup Iteration  29: 390436.575 ops/s
# Warmup Iteration  30: 390558.489 ops/s
Iteration   1: 390314.684 ops/s
Iteration   2: 390776.590 ops/s
Iteration   3: 389479.566 ops/s
Iteration   4: 388202.036 ops/s
Iteration   5: 388231.479 ops/s
Iteration   6: 391496.142 ops/s
Iteration   7: 388937.640 ops/s
Iteration   8: 391847.761 ops/s
Iteration   9: 389741.260 ops/s
Iteration  10: 390004.349 ops/s
Iteration  11: 392770.830 ops/s
Iteration  12: 389141.546 ops/s
Iteration  13: 388285.690 ops/s
Iteration  14: 389636.960 ops/s
Iteration  15: 390892.490 ops/s
Iteration  16: 388508.466 ops/s
Iteration  17: 388524.773 ops/s
Iteration  18: 389004.364 ops/s
Iteration  19: 388475.823 ops/s
Iteration  20: 389416.043 ops/s
Iteration  21: 389930.835 ops/s
Iteration  22: 385844.293 ops/s
Iteration  23: 388994.149 ops/s
Iteration  24: 387490.535 ops/s
Iteration  25: 390334.542 ops/s
Iteration  26: 391100.530 ops/s
Iteration  27: 389765.109 ops/s
Iteration  28: 386430.438 ops/s
Iteration  29: 390586.580 ops/s
Iteration  30: 392271.733 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_iterator":
  389547.908 ±(99.9%) 1057.083 ops/s [Average]
  (min, avg, max) = (385844.293, 389547.908, 392770.830), stdev = 1582.192
  CI (99.9%): [388490.825, 390604.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_iterator  thrpt   30  389547.908 ± 1057.083  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyPreservation$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyPreservation

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 119392.502 ops/s
# Warmup Iteration   2: 231633.298 ops/s
# Warmup Iteration   3: 267570.696 ops/s
# Warmup Iteration   4: 267391.109 ops/s
# Warmup Iteration   5: 268203.011 ops/s
# Warmup Iteration   6: 222097.154 ops/s
# Warmup Iteration   7: 267359.909 ops/s
# Warmup Iteration   8: 268712.361 ops/s
# Warmup Iteration   9: 267817.560 ops/s
# Warmup Iteration  10: 269035.999 ops/s
# Warmup Iteration  11: 268057.434 ops/s
# Warmup Iteration  12: 266980.103 ops/s
# Warmup Iteration  13: 267723.243 ops/s
# Warmup Iteration  14: 268893.134 ops/s
# Warmup Iteration  15: 268488.280 ops/s
# Warmup Iteration  16: 267890.552 ops/s
# Warmup Iteration  17: 268322.502 ops/s
# Warmup Iteration  18: 268179.065 ops/s
# Warmup Iteration  19: 267950.364 ops/s
# Warmup Iteration  20: 269390.023 ops/s
# Warmup Iteration  21: 267350.063 ops/s
# Warmup Iteration  22: 268113.362 ops/s
# Warmup Iteration  23: 268856.744 ops/s
# Warmup Iteration  24: 268600.836 ops/s
# Warmup Iteration  25: 269444.006 ops/s
# Warmup Iteration  26: 266863.726 ops/s
# Warmup Iteration  27: 268497.922 ops/s
# Warmup Iteration  28: 268445.880 ops/s
# Warmup Iteration  29: 268874.683 ops/s
# Warmup Iteration  30: 267621.872 ops/s
Iteration   1: 268719.553 ops/s
Iteration   2: 268816.900 ops/s
Iteration   3: 268392.133 ops/s
Iteration   4: 267643.863 ops/s
Iteration   5: 267535.726 ops/s
Iteration   6: 268104.139 ops/s
Iteration   7: 268717.989 ops/s
Iteration   8: 267210.244 ops/s
Iteration   9: 267398.472 ops/s
Iteration  10: 269321.336 ops/s
Iteration  11: 268069.302 ops/s
Iteration  12: 269965.530 ops/s
Iteration  13: 269770.315 ops/s
Iteration  14: 269150.457 ops/s
Iteration  15: 270084.579 ops/s
Iteration  16: 268043.932 ops/s
Iteration  17: 268132.939 ops/s
Iteration  18: 267814.523 ops/s
Iteration  19: 270730.816 ops/s
Iteration  20: 270537.992 ops/s
Iteration  21: 268697.489 ops/s
Iteration  22: 268397.081 ops/s
Iteration  23: 268558.000 ops/s
Iteration  24: 267074.936 ops/s
Iteration  25: 268774.786 ops/s
Iteration  26: 267824.494 ops/s
Iteration  27: 267616.859 ops/s
Iteration  28: 269168.885 ops/s
Iteration  29: 268060.399 ops/s
Iteration  30: 268511.448 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyPreservation":
  268561.504 ±(99.9%) 636.554 ops/s [Average]
  (min, avg, max) = (267074.936, 268561.504, 270730.816), stdev = 952.765
  CI (99.9%): [267924.949, 269198.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keyPreservation  thrpt   30  268561.504 ± 636.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692199.270 ops/s
# Warmup Iteration   2: 1504802.001 ops/s
# Warmup Iteration   3: 1567868.709 ops/s
# Warmup Iteration   4: 1578460.006 ops/s
# Warmup Iteration   5: 1312792.389 ops/s
# Warmup Iteration   6: 1574230.076 ops/s
# Warmup Iteration   7: 1581767.687 ops/s
# Warmup Iteration   8: 1575851.938 ops/s
# Warmup Iteration   9: 1574672.172 ops/s
# Warmup Iteration  10: 1561780.841 ops/s
# Warmup Iteration  11: 1570938.027 ops/s
# Warmup Iteration  12: 1571271.540 ops/s
# Warmup Iteration  13: 1569733.418 ops/s
# Warmup Iteration  14: 1566018.339 ops/s
# Warmup Iteration  15: 1566805.617 ops/s
# Warmup Iteration  16: 1571446.337 ops/s
# Warmup Iteration  17: 1574609.711 ops/s
# Warmup Iteration  18: 1566907.474 ops/s
# Warmup Iteration  19: 1578641.220 ops/s
# Warmup Iteration  20: 1577215.289 ops/s
# Warmup Iteration  21: 1578555.246 ops/s
# Warmup Iteration  22: 1569656.858 ops/s
# Warmup Iteration  23: 1571015.887 ops/s
# Warmup Iteration  24: 1576392.044 ops/s
# Warmup Iteration  25: 1573898.629 ops/s
# Warmup Iteration  26: 1565835.603 ops/s
# Warmup Iteration  27: 1572946.286 ops/s
# Warmup Iteration  28: 1573547.921 ops/s
# Warmup Iteration  29: 1566261.683 ops/s
# Warmup Iteration  30: 1572461.941 ops/s
Iteration   1: 1562879.911 ops/s
Iteration   2: 1558270.480 ops/s
Iteration   3: 1574143.939 ops/s
Iteration   4: 1566133.501 ops/s
Iteration   5: 1567989.958 ops/s
Iteration   6: 1571252.187 ops/s
Iteration   7: 1572715.101 ops/s
Iteration   8: 1571496.002 ops/s
Iteration   9: 1571866.991 ops/s
Iteration  10: 1568944.788 ops/s
Iteration  11: 1589153.584 ops/s
Iteration  12: 1555249.623 ops/s
Iteration  13: 1562710.781 ops/s
Iteration  14: 1555170.796 ops/s
Iteration  15: 1579041.610 ops/s
Iteration  16: 1576495.736 ops/s
Iteration  17: 1574938.505 ops/s
Iteration  18: 1573281.837 ops/s
Iteration  19: 1575732.656 ops/s
Iteration  20: 1559761.071 ops/s
Iteration  21: 1561423.995 ops/s
Iteration  22: 1561915.000 ops/s
Iteration  23: 1565484.696 ops/s
Iteration  24: 1563584.148 ops/s
Iteration  25: 1566188.128 ops/s
Iteration  26: 1567177.402 ops/s
Iteration  27: 1571117.129 ops/s
Iteration  28: 1571388.960 ops/s
Iteration  29: 1574315.710 ops/s
Iteration  30: 1569318.650 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode":
  1568638.096 ±(99.9%) 4937.865 ops/s [Average]
  (min, avg, max) = (1555170.796, 1568638.096, 1589153.584), stdev = 7390.764
  CI (99.9%): [1563700.231, 1573575.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keySetEqualsAndHashCode  thrpt   30  1568638.096 ± 4937.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetToArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetToArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1087936.169 ops/s
# Warmup Iteration   2: 2514249.288 ops/s
# Warmup Iteration   3: 2633640.171 ops/s
# Warmup Iteration   4: 2163097.785 ops/s
# Warmup Iteration   5: 2627789.187 ops/s
# Warmup Iteration   6: 2642431.854 ops/s
# Warmup Iteration   7: 2625887.223 ops/s
# Warmup Iteration   8: 2609661.959 ops/s
# Warmup Iteration   9: 2628717.631 ops/s
# Warmup Iteration  10: 2628276.012 ops/s
# Warmup Iteration  11: 2599089.294 ops/s
# Warmup Iteration  12: 2610708.944 ops/s
# Warmup Iteration  13: 2614971.078 ops/s
# Warmup Iteration  14: 2620493.417 ops/s
# Warmup Iteration  15: 2620718.291 ops/s
# Warmup Iteration  16: 2623414.717 ops/s
# Warmup Iteration  17: 2632873.565 ops/s
# Warmup Iteration  18: 2638223.672 ops/s
# Warmup Iteration  19: 2631224.047 ops/s
# Warmup Iteration  20: 2628913.553 ops/s
# Warmup Iteration  21: 2632857.292 ops/s
# Warmup Iteration  22: 2631095.910 ops/s
# Warmup Iteration  23: 2621695.598 ops/s
# Warmup Iteration  24: 2621214.617 ops/s
# Warmup Iteration  25: 2598857.900 ops/s
# Warmup Iteration  26: 2632316.005 ops/s
# Warmup Iteration  27: 2626006.942 ops/s
# Warmup Iteration  28: 2627399.232 ops/s
# Warmup Iteration  29: 2621591.360 ops/s
# Warmup Iteration  30: 2626217.268 ops/s
Iteration   1: 2623625.024 ops/s
Iteration   2: 2624185.746 ops/s
Iteration   3: 2617200.526 ops/s
Iteration   4: 2635943.007 ops/s
Iteration   5: 2634162.822 ops/s
Iteration   6: 2614402.582 ops/s
Iteration   7: 2618356.756 ops/s
Iteration   8: 2620793.513 ops/s
Iteration   9: 2622240.744 ops/s
Iteration  10: 2623283.257 ops/s
Iteration  11: 2618203.871 ops/s
Iteration  12: 2605355.069 ops/s
Iteration  13: 2636467.961 ops/s
Iteration  14: 2646206.550 ops/s
Iteration  15: 2616169.200 ops/s
Iteration  16: 2626993.649 ops/s
Iteration  17: 2622980.878 ops/s
Iteration  18: 2640288.015 ops/s
Iteration  19: 2630130.090 ops/s
Iteration  20: 2625022.940 ops/s
Iteration  21: 2624038.351 ops/s
Iteration  22: 2624138.865 ops/s
Iteration  23: 2629885.864 ops/s
Iteration  24: 2605129.933 ops/s
Iteration  25: 2619165.749 ops/s
Iteration  26: 2640357.615 ops/s
Iteration  27: 2647798.255 ops/s
Iteration  28: 2618300.639 ops/s
Iteration  29: 2599686.844 ops/s
Iteration  30: 2643313.323 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keySetToArray":
  2625127.588 ±(99.9%) 7887.425 ops/s [Average]
  (min, avg, max) = (2599686.844, 2625127.588, 2647798.255), stdev = 11805.527
  CI (99.9%): [2617240.163, 2633015.013] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keySetToArray  thrpt   30  2625127.588 ± 7887.425  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyValuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyValuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 736602.440 ops/s
# Warmup Iteration   2: 1926920.613 ops/s
# Warmup Iteration   3: 1964322.411 ops/s
# Warmup Iteration   4: 1623424.122 ops/s
# Warmup Iteration   5: 1951052.945 ops/s
# Warmup Iteration   6: 1967630.478 ops/s
# Warmup Iteration   7: 1968252.544 ops/s
# Warmup Iteration   8: 1966071.685 ops/s
# Warmup Iteration   9: 1946143.095 ops/s
# Warmup Iteration  10: 1964637.072 ops/s
# Warmup Iteration  11: 1965674.070 ops/s
# Warmup Iteration  12: 1961857.844 ops/s
# Warmup Iteration  13: 1960345.396 ops/s
# Warmup Iteration  14: 1960095.674 ops/s
# Warmup Iteration  15: 1954643.990 ops/s
# Warmup Iteration  16: 1957829.149 ops/s
# Warmup Iteration  17: 1967039.202 ops/s
# Warmup Iteration  18: 1960907.228 ops/s
# Warmup Iteration  19: 1965576.800 ops/s
# Warmup Iteration  20: 1965154.429 ops/s
# Warmup Iteration  21: 1960564.063 ops/s
# Warmup Iteration  22: 1969244.466 ops/s
# Warmup Iteration  23: 1961682.564 ops/s
# Warmup Iteration  24: 1966494.914 ops/s
# Warmup Iteration  25: 1951859.556 ops/s
# Warmup Iteration  26: 1949946.409 ops/s
# Warmup Iteration  27: 1964931.090 ops/s
# Warmup Iteration  28: 1963524.810 ops/s
# Warmup Iteration  29: 1962484.984 ops/s
# Warmup Iteration  30: 1959334.680 ops/s
Iteration   1: 1951388.020 ops/s
Iteration   2: 1965380.451 ops/s
Iteration   3: 1958839.748 ops/s
Iteration   4: 1952976.484 ops/s
Iteration   5: 1967442.545 ops/s
Iteration   6: 1962806.128 ops/s
Iteration   7: 1961509.452 ops/s
Iteration   8: 1960466.087 ops/s
Iteration   9: 1962688.290 ops/s
Iteration  10: 1965940.783 ops/s
Iteration  11: 1966058.853 ops/s
Iteration  12: 1969294.286 ops/s
Iteration  13: 1974013.193 ops/s
Iteration  14: 1962434.206 ops/s
Iteration  15: 1961447.130 ops/s
Iteration  16: 1969141.447 ops/s
Iteration  17: 1946682.862 ops/s
Iteration  18: 1958255.314 ops/s
Iteration  19: 1967817.222 ops/s
Iteration  20: 1956032.684 ops/s
Iteration  21: 1960797.722 ops/s
Iteration  22: 1959329.226 ops/s
Iteration  23: 1971239.209 ops/s
Iteration  24: 1949374.845 ops/s
Iteration  25: 1977167.676 ops/s
Iteration  26: 1959526.560 ops/s
Iteration  27: 1968756.822 ops/s
Iteration  28: 1967354.978 ops/s
Iteration  29: 1968633.837 ops/s
Iteration  30: 1957497.202 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keyValuesView":
  1962676.442 ±(99.9%) 4744.263 ops/s [Average]
  (min, avg, max) = (1946682.862, 1962676.442, 1977167.676), stdev = 7100.990
  CI (99.9%): [1957932.179, 1967420.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keyValuesView  thrpt   30  1962676.442 ± 4744.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysAndValues_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysAndValues_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 577531.769 ops/s
# Warmup Iteration   2: 1502544.398 ops/s
# Warmup Iteration   3: 1510600.977 ops/s
# Warmup Iteration   4: 1259158.757 ops/s
# Warmup Iteration   5: 1505947.982 ops/s
# Warmup Iteration   6: 1510652.362 ops/s
# Warmup Iteration   7: 1513879.085 ops/s
# Warmup Iteration   8: 1518577.998 ops/s
# Warmup Iteration   9: 1513340.336 ops/s
# Warmup Iteration  10: 1509240.149 ops/s
# Warmup Iteration  11: 1517952.796 ops/s
# Warmup Iteration  12: 1516769.244 ops/s
# Warmup Iteration  13: 1510578.124 ops/s
# Warmup Iteration  14: 1510643.595 ops/s
# Warmup Iteration  15: 1514705.888 ops/s
# Warmup Iteration  16: 1520139.560 ops/s
# Warmup Iteration  17: 1517682.902 ops/s
# Warmup Iteration  18: 1510300.520 ops/s
# Warmup Iteration  19: 1508585.654 ops/s
# Warmup Iteration  20: 1504860.861 ops/s
# Warmup Iteration  21: 1511830.231 ops/s
# Warmup Iteration  22: 1520750.605 ops/s
# Warmup Iteration  23: 1514498.211 ops/s
# Warmup Iteration  24: 1512857.584 ops/s
# Warmup Iteration  25: 1508928.664 ops/s
# Warmup Iteration  26: 1513002.896 ops/s
# Warmup Iteration  27: 1513510.562 ops/s
# Warmup Iteration  28: 1512704.730 ops/s
# Warmup Iteration  29: 1515473.454 ops/s
# Warmup Iteration  30: 1517468.683 ops/s
Iteration   1: 1509623.013 ops/s
Iteration   2: 1517487.465 ops/s
Iteration   3: 1513882.215 ops/s
Iteration   4: 1512334.416 ops/s
Iteration   5: 1513067.934 ops/s
Iteration   6: 1526958.629 ops/s
Iteration   7: 1516320.798 ops/s
Iteration   8: 1502404.979 ops/s
Iteration   9: 1519991.387 ops/s
Iteration  10: 1508802.071 ops/s
Iteration  11: 1514378.294 ops/s
Iteration  12: 1521392.033 ops/s
Iteration  13: 1514770.702 ops/s
Iteration  14: 1514435.057 ops/s
Iteration  15: 1512973.422 ops/s
Iteration  16: 1518962.936 ops/s
Iteration  17: 1512652.345 ops/s
Iteration  18: 1505246.879 ops/s
Iteration  19: 1508626.343 ops/s
Iteration  20: 1507804.877 ops/s
Iteration  21: 1522399.711 ops/s
Iteration  22: 1516028.377 ops/s
Iteration  23: 1514355.135 ops/s
Iteration  24: 1505745.347 ops/s
Iteration  25: 1514981.350 ops/s
Iteration  26: 1513866.359 ops/s
Iteration  27: 1516995.898 ops/s
Iteration  28: 1496256.384 ops/s
Iteration  29: 1522050.693 ops/s
Iteration  30: 1505497.093 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysAndValues_toString":
  1513343.071 ±(99.9%) 4341.377 ops/s [Average]
  (min, avg, max) = (1496256.384, 1513343.071, 1526958.629), stdev = 6497.970
  CI (99.9%): [1509001.694, 1517684.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keysAndValues_toString  thrpt   30  1513343.071 ± 4341.377  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1735030.126 ops/s
# Warmup Iteration   2: 4523275.632 ops/s
# Warmup Iteration   3: 4441683.044 ops/s
# Warmup Iteration   4: 3937822.374 ops/s
# Warmup Iteration   5: 4613478.416 ops/s
# Warmup Iteration   6: 4588407.375 ops/s
# Warmup Iteration   7: 4591578.981 ops/s
# Warmup Iteration   8: 4579312.233 ops/s
# Warmup Iteration   9: 4577198.319 ops/s
# Warmup Iteration  10: 4597275.977 ops/s
# Warmup Iteration  11: 4576856.167 ops/s
# Warmup Iteration  12: 4596899.008 ops/s
# Warmup Iteration  13: 4574334.193 ops/s
# Warmup Iteration  14: 4581987.334 ops/s
# Warmup Iteration  15: 4598162.496 ops/s
# Warmup Iteration  16: 4588814.619 ops/s
# Warmup Iteration  17: 4581267.364 ops/s
# Warmup Iteration  18: 4558302.419 ops/s
# Warmup Iteration  19: 4603110.432 ops/s
# Warmup Iteration  20: 4612193.840 ops/s
# Warmup Iteration  21: 4618025.236 ops/s
# Warmup Iteration  22: 4590318.650 ops/s
# Warmup Iteration  23: 4606936.521 ops/s
# Warmup Iteration  24: 4566201.851 ops/s
# Warmup Iteration  25: 4568425.026 ops/s
# Warmup Iteration  26: 4582987.579 ops/s
# Warmup Iteration  27: 4591104.997 ops/s
# Warmup Iteration  28: 4606890.265 ops/s
# Warmup Iteration  29: 4598507.721 ops/s
# Warmup Iteration  30: 4598389.007 ops/s
Iteration   1: 4618061.545 ops/s
Iteration   2: 4566878.177 ops/s
Iteration   3: 4581338.420 ops/s
Iteration   4: 4586164.636 ops/s
Iteration   5: 4599924.853 ops/s
Iteration   6: 4587845.342 ops/s
Iteration   7: 4583129.187 ops/s
Iteration   8: 4550930.616 ops/s
Iteration   9: 4614669.418 ops/s
Iteration  10: 4591568.819 ops/s
Iteration  11: 4598542.190 ops/s
Iteration  12: 4571457.935 ops/s
Iteration  13: 4604446.276 ops/s
Iteration  14: 4593066.093 ops/s
Iteration  15: 4543961.220 ops/s
Iteration  16: 4516019.552 ops/s
Iteration  17: 4581762.272 ops/s
Iteration  18: 4611742.477 ops/s
Iteration  19: 4592098.673 ops/s
Iteration  20: 4610131.347 ops/s
Iteration  21: 4587114.045 ops/s
Iteration  22: 4593612.480 ops/s
Iteration  23: 4586340.104 ops/s
Iteration  24: 4578020.854 ops/s
Iteration  25: 4580055.142 ops/s
Iteration  26: 4593645.216 ops/s
Iteration  27: 4596686.295 ops/s
Iteration  28: 4603849.875 ops/s
Iteration  29: 4588358.713 ops/s
Iteration  30: 4625306.292 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_keysView":
  4587890.935 ±(99.9%) 14949.863 ops/s [Average]
  (min, avg, max) = (4516019.552, 4587890.935, 4625306.292), stdev = 22376.253
  CI (99.9%): [4572941.072, 4602840.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_keysView  thrpt   30  4587890.935 ± 14949.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 975113.355 ops/s
# Warmup Iteration   2: 2289415.669 ops/s
# Warmup Iteration   3: 2316055.719 ops/s
# Warmup Iteration   4: 1916611.024 ops/s
# Warmup Iteration   5: 2324639.968 ops/s
# Warmup Iteration   6: 2327274.200 ops/s
# Warmup Iteration   7: 2308341.997 ops/s
# Warmup Iteration   8: 2309342.657 ops/s
# Warmup Iteration   9: 2301420.707 ops/s
# Warmup Iteration  10: 2323221.215 ops/s
# Warmup Iteration  11: 2324471.338 ops/s
# Warmup Iteration  12: 2326890.688 ops/s
# Warmup Iteration  13: 2319670.296 ops/s
# Warmup Iteration  14: 2320613.429 ops/s
# Warmup Iteration  15: 2315396.986 ops/s
# Warmup Iteration  16: 2324821.934 ops/s
# Warmup Iteration  17: 2328667.384 ops/s
# Warmup Iteration  18: 2320680.255 ops/s
# Warmup Iteration  19: 2313623.751 ops/s
# Warmup Iteration  20: 2312526.699 ops/s
# Warmup Iteration  21: 2304993.476 ops/s
# Warmup Iteration  22: 2319555.596 ops/s
# Warmup Iteration  23: 2318658.288 ops/s
# Warmup Iteration  24: 2326384.168 ops/s
# Warmup Iteration  25: 2325124.937 ops/s
# Warmup Iteration  26: 2317977.905 ops/s
# Warmup Iteration  27: 2318816.794 ops/s
# Warmup Iteration  28: 2309795.686 ops/s
# Warmup Iteration  29: 2329750.672 ops/s
# Warmup Iteration  30: 2320309.269 ops/s
Iteration   1: 2294956.135 ops/s
Iteration   2: 2326310.302 ops/s
Iteration   3: 2320859.583 ops/s
Iteration   4: 2305645.220 ops/s
Iteration   5: 2305794.651 ops/s
Iteration   6: 2314513.609 ops/s
Iteration   7: 2319530.376 ops/s
Iteration   8: 2327947.355 ops/s
Iteration   9: 2318624.163 ops/s
Iteration  10: 2315648.836 ops/s
Iteration  11: 2319703.648 ops/s
Iteration  12: 2327028.839 ops/s
Iteration  13: 2323902.758 ops/s
Iteration  14: 2312925.506 ops/s
Iteration  15: 2326578.656 ops/s
Iteration  16: 2323837.047 ops/s
Iteration  17: 2316819.691 ops/s
Iteration  18: 2320707.082 ops/s
Iteration  19: 2339807.873 ops/s
Iteration  20: 2324494.594 ops/s
Iteration  21: 2309496.497 ops/s
Iteration  22: 2315228.152 ops/s
Iteration  23: 2324835.153 ops/s
Iteration  24: 2314492.498 ops/s
Iteration  25: 2316807.224 ops/s
Iteration  26: 2316528.292 ops/s
Iteration  27: 2323930.659 ops/s
Iteration  28: 2323174.429 ops/s
Iteration  29: 2332728.825 ops/s
Iteration  30: 2326272.647 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_makeString":
  2319637.677 ±(99.9%) 5842.764 ops/s [Average]
  (min, avg, max) = (2294956.135, 2319637.677, 2339807.873), stdev = 8745.174
  CI (99.9%): [2313794.913, 2325480.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_makeString  thrpt   30  2319637.677 ± 5842.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2029036.612 ops/s
# Warmup Iteration   2: 4272530.095 ops/s
# Warmup Iteration   3: 4249219.974 ops/s
# Warmup Iteration   4: 3595415.713 ops/s
# Warmup Iteration   5: 4257991.650 ops/s
# Warmup Iteration   6: 4241085.120 ops/s
# Warmup Iteration   7: 4242988.176 ops/s
# Warmup Iteration   8: 4270839.144 ops/s
# Warmup Iteration   9: 4248009.300 ops/s
# Warmup Iteration  10: 4230084.082 ops/s
# Warmup Iteration  11: 4217789.379 ops/s
# Warmup Iteration  12: 4256882.883 ops/s
# Warmup Iteration  13: 4261827.802 ops/s
# Warmup Iteration  14: 4237635.132 ops/s
# Warmup Iteration  15: 4246552.060 ops/s
# Warmup Iteration  16: 4249414.950 ops/s
# Warmup Iteration  17: 4235482.679 ops/s
# Warmup Iteration  18: 4254136.859 ops/s
# Warmup Iteration  19: 4261234.819 ops/s
# Warmup Iteration  20: 4247231.027 ops/s
# Warmup Iteration  21: 4268153.469 ops/s
# Warmup Iteration  22: 4225492.962 ops/s
# Warmup Iteration  23: 4224143.601 ops/s
# Warmup Iteration  24: 4249504.721 ops/s
# Warmup Iteration  25: 4270971.090 ops/s
# Warmup Iteration  26: 4252683.089 ops/s
# Warmup Iteration  27: 4239457.211 ops/s
# Warmup Iteration  28: 4252527.835 ops/s
# Warmup Iteration  29: 4260969.557 ops/s
# Warmup Iteration  30: 4256482.816 ops/s
Iteration   1: 4254542.311 ops/s
Iteration   2: 4261454.710 ops/s
Iteration   3: 4259984.697 ops/s
Iteration   4: 4250080.935 ops/s
Iteration   5: 4235159.099 ops/s
Iteration   6: 4237606.085 ops/s
Iteration   7: 4258417.307 ops/s
Iteration   8: 4233465.736 ops/s
Iteration   9: 4265414.970 ops/s
Iteration  10: 4257645.501 ops/s
Iteration  11: 4278207.381 ops/s
Iteration  12: 4252056.114 ops/s
Iteration  13: 4245820.223 ops/s
Iteration  14: 4210518.730 ops/s
Iteration  15: 4218349.505 ops/s
Iteration  16: 4228959.982 ops/s
Iteration  17: 4254700.639 ops/s
Iteration  18: 4232347.203 ops/s
Iteration  19: 4272911.227 ops/s
Iteration  20: 4262502.273 ops/s
Iteration  21: 4231263.722 ops/s
Iteration  22: 4228115.077 ops/s
Iteration  23: 4226236.206 ops/s
Iteration  24: 4266674.093 ops/s
Iteration  25: 4260276.647 ops/s
Iteration  26: 4234862.557 ops/s
Iteration  27: 4246881.240 ops/s
Iteration  28: 4240779.367 ops/s
Iteration  29: 4279404.358 ops/s
Iteration  30: 4258134.538 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_max":
  4248092.414 ±(99.9%) 11786.272 ops/s [Average]
  (min, avg, max) = (4210518.730, 4248092.414, 4279404.358), stdev = 17641.138
  CI (99.9%): [4236306.143, 4259878.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_max  thrpt   30  4248092.414 ± 11786.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1842353.997 ops/s
# Warmup Iteration   2: 3867427.591 ops/s
# Warmup Iteration   3: 3313258.768 ops/s
# Warmup Iteration   4: 3960327.770 ops/s
# Warmup Iteration   5: 3982050.869 ops/s
# Warmup Iteration   6: 3991776.974 ops/s
# Warmup Iteration   7: 3968104.179 ops/s
# Warmup Iteration   8: 3935017.489 ops/s
# Warmup Iteration   9: 3995480.593 ops/s
# Warmup Iteration  10: 3985294.325 ops/s
# Warmup Iteration  11: 3953674.798 ops/s
# Warmup Iteration  12: 3991489.737 ops/s
# Warmup Iteration  13: 3989089.814 ops/s
# Warmup Iteration  14: 3997937.118 ops/s
# Warmup Iteration  15: 3976367.419 ops/s
# Warmup Iteration  16: 3951251.553 ops/s
# Warmup Iteration  17: 3973146.641 ops/s
# Warmup Iteration  18: 3979958.866 ops/s
# Warmup Iteration  19: 3984757.286 ops/s
# Warmup Iteration  20: 3967059.221 ops/s
# Warmup Iteration  21: 3952388.012 ops/s
# Warmup Iteration  22: 3949817.390 ops/s
# Warmup Iteration  23: 3992796.136 ops/s
# Warmup Iteration  24: 3963801.538 ops/s
# Warmup Iteration  25: 3944314.508 ops/s
# Warmup Iteration  26: 3948126.313 ops/s
# Warmup Iteration  27: 3978712.652 ops/s
# Warmup Iteration  28: 3972897.118 ops/s
# Warmup Iteration  29: 3958279.188 ops/s
# Warmup Iteration  30: 3973473.518 ops/s
Iteration   1: 3966648.128 ops/s
Iteration   2: 3995744.674 ops/s
Iteration   3: 3962068.697 ops/s
Iteration   4: 3964266.075 ops/s
Iteration   5: 3958618.950 ops/s
Iteration   6: 3953793.401 ops/s
Iteration   7: 3973994.029 ops/s
Iteration   8: 3993383.819 ops/s
Iteration   9: 4008856.788 ops/s
Iteration  10: 3985375.754 ops/s
Iteration  11: 3955487.845 ops/s
Iteration  12: 3981304.337 ops/s
Iteration  13: 3998163.640 ops/s
Iteration  14: 3967172.226 ops/s
Iteration  15: 3984762.965 ops/s
Iteration  16: 3983043.708 ops/s
Iteration  17: 3984059.989 ops/s
Iteration  18: 3975004.412 ops/s
Iteration  19: 3980893.302 ops/s
Iteration  20: 4032093.564 ops/s
Iteration  21: 3932395.655 ops/s
Iteration  22: 3951646.623 ops/s
Iteration  23: 3970596.317 ops/s
Iteration  24: 3937279.900 ops/s
Iteration  25: 3985503.992 ops/s
Iteration  26: 3992386.353 ops/s
Iteration  27: 3979357.609 ops/s
Iteration  28: 3995515.730 ops/s
Iteration  29: 3966001.041 ops/s
Iteration  30: 4001138.041 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_maxBy":
  3977218.585 ±(99.9%) 14102.064 ops/s [Average]
  (min, avg, max) = (3932395.655, 3977218.585, 4032093.564), stdev = 21107.308
  CI (99.9%): [3963116.521, 3991320.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_maxBy  thrpt   30  3977218.585 ± 14102.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1943744.772 ops/s
# Warmup Iteration   2: 4179055.842 ops/s
# Warmup Iteration   3: 4210525.514 ops/s
# Warmup Iteration   4: 3523761.473 ops/s
# Warmup Iteration   5: 4199381.147 ops/s
# Warmup Iteration   6: 4142736.303 ops/s
# Warmup Iteration   7: 4191652.473 ops/s
# Warmup Iteration   8: 4180836.467 ops/s
# Warmup Iteration   9: 4187945.642 ops/s
# Warmup Iteration  10: 4196978.124 ops/s
# Warmup Iteration  11: 4205111.168 ops/s
# Warmup Iteration  12: 4196352.411 ops/s
# Warmup Iteration  13: 4201446.972 ops/s
# Warmup Iteration  14: 4188730.542 ops/s
# Warmup Iteration  15: 4193031.248 ops/s
# Warmup Iteration  16: 4207850.151 ops/s
# Warmup Iteration  17: 4177538.833 ops/s
# Warmup Iteration  18: 4179398.950 ops/s
# Warmup Iteration  19: 4208410.012 ops/s
# Warmup Iteration  20: 4207183.852 ops/s
# Warmup Iteration  21: 4182430.650 ops/s
# Warmup Iteration  22: 4193602.013 ops/s
# Warmup Iteration  23: 4179843.552 ops/s
# Warmup Iteration  24: 4194210.898 ops/s
# Warmup Iteration  25: 4194290.279 ops/s
# Warmup Iteration  26: 4195018.646 ops/s
# Warmup Iteration  27: 4214508.909 ops/s
# Warmup Iteration  28: 4206770.580 ops/s
# Warmup Iteration  29: 4189815.533 ops/s
# Warmup Iteration  30: 4202234.071 ops/s
Iteration   1: 4186663.203 ops/s
Iteration   2: 4212334.680 ops/s
Iteration   3: 4229368.014 ops/s
Iteration   4: 4179195.906 ops/s
Iteration   5: 4202181.172 ops/s
Iteration   6: 4187435.441 ops/s
Iteration   7: 4189110.911 ops/s
Iteration   8: 4171611.405 ops/s
Iteration   9: 4217317.653 ops/s
Iteration  10: 4203806.876 ops/s
Iteration  11: 4136447.670 ops/s
Iteration  12: 4177388.854 ops/s
Iteration  13: 4160974.604 ops/s
Iteration  14: 4172043.125 ops/s
Iteration  15: 4194397.074 ops/s
Iteration  16: 4177032.614 ops/s
Iteration  17: 4169050.698 ops/s
Iteration  18: 4202461.496 ops/s
Iteration  19: 4181187.073 ops/s
Iteration  20: 4172108.460 ops/s
Iteration  21: 4129824.387 ops/s
Iteration  22: 4172251.804 ops/s
Iteration  23: 4144180.805 ops/s
Iteration  24: 4203470.137 ops/s
Iteration  25: 4232000.386 ops/s
Iteration  26: 4191146.732 ops/s
Iteration  27: 4219483.649 ops/s
Iteration  28: 4201142.123 ops/s
Iteration  29: 4190778.634 ops/s
Iteration  30: 4208070.921 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_min":
  4187148.883 ±(99.9%) 16662.493 ops/s [Average]
  (min, avg, max) = (4129824.387, 4187148.883, 4232000.386), stdev = 24939.637
  CI (99.9%): [4170486.391, 4203811.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_min  thrpt   30  4187148.883 ± 16662.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1846426.453 ops/s
# Warmup Iteration   2: 3931433.148 ops/s
# Warmup Iteration   3: 3333594.225 ops/s
# Warmup Iteration   4: 3988226.978 ops/s
# Warmup Iteration   5: 3991479.415 ops/s
# Warmup Iteration   6: 3949044.239 ops/s
# Warmup Iteration   7: 3981231.859 ops/s
# Warmup Iteration   8: 3994328.022 ops/s
# Warmup Iteration   9: 3983339.695 ops/s
# Warmup Iteration  10: 3981417.679 ops/s
# Warmup Iteration  11: 3981648.244 ops/s
# Warmup Iteration  12: 3977603.547 ops/s
# Warmup Iteration  13: 3982105.839 ops/s
# Warmup Iteration  14: 3983288.762 ops/s
# Warmup Iteration  15: 3984546.727 ops/s
# Warmup Iteration  16: 3985945.882 ops/s
# Warmup Iteration  17: 3983561.424 ops/s
# Warmup Iteration  18: 3952838.697 ops/s
# Warmup Iteration  19: 3985310.216 ops/s
# Warmup Iteration  20: 3931249.432 ops/s
# Warmup Iteration  21: 3932819.074 ops/s
# Warmup Iteration  22: 3993448.346 ops/s
# Warmup Iteration  23: 3949587.324 ops/s
# Warmup Iteration  24: 3949771.044 ops/s
# Warmup Iteration  25: 3985122.754 ops/s
# Warmup Iteration  26: 3947899.320 ops/s
# Warmup Iteration  27: 3943603.933 ops/s
# Warmup Iteration  28: 3945580.859 ops/s
# Warmup Iteration  29: 3942587.405 ops/s
# Warmup Iteration  30: 3945843.361 ops/s
Iteration   1: 3948430.123 ops/s
Iteration   2: 3987509.736 ops/s
Iteration   3: 3967658.838 ops/s
Iteration   4: 3950650.200 ops/s
Iteration   5: 3975847.259 ops/s
Iteration   6: 3958029.517 ops/s
Iteration   7: 3964859.241 ops/s
Iteration   8: 3992628.630 ops/s
Iteration   9: 3901869.805 ops/s
Iteration  10: 3957006.445 ops/s
Iteration  11: 3960082.399 ops/s
Iteration  12: 3948513.728 ops/s
Iteration  13: 3918677.413 ops/s
Iteration  14: 3963465.749 ops/s
Iteration  15: 3938167.626 ops/s
Iteration  16: 3964351.749 ops/s
Iteration  17: 3973683.047 ops/s
Iteration  18: 3951328.274 ops/s
Iteration  19: 3945985.907 ops/s
Iteration  20: 3966582.713 ops/s
Iteration  21: 3936270.933 ops/s
Iteration  22: 3969161.133 ops/s
Iteration  23: 3980688.501 ops/s
Iteration  24: 3975633.462 ops/s
Iteration  25: 3972538.627 ops/s
Iteration  26: 3953691.064 ops/s
Iteration  27: 3983832.632 ops/s
Iteration  28: 3930920.529 ops/s
Iteration  29: 3961204.967 ops/s
Iteration  30: 3964166.376 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_minBy":
  3958781.221 ±(99.9%) 13317.029 ops/s [Average]
  (min, avg, max) = (3901869.805, 3958781.221, 3992628.630), stdev = 19932.304
  CI (99.9%): [3945464.191, 3972098.250] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_minBy  thrpt   30  3958781.221 ± 13317.029  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1417379.315 ops/s
# Warmup Iteration   2: 2989044.602 ops/s
# Warmup Iteration   3: 2512214.244 ops/s
# Warmup Iteration   4: 2995759.005 ops/s
# Warmup Iteration   5: 2948405.689 ops/s
# Warmup Iteration   6: 2983509.689 ops/s
# Warmup Iteration   7: 2972237.332 ops/s
# Warmup Iteration   8: 3003509.878 ops/s
# Warmup Iteration   9: 2997421.683 ops/s
# Warmup Iteration  10: 2994817.366 ops/s
# Warmup Iteration  11: 3008674.556 ops/s
# Warmup Iteration  12: 3009912.801 ops/s
# Warmup Iteration  13: 3000072.072 ops/s
# Warmup Iteration  14: 3015871.808 ops/s
# Warmup Iteration  15: 2999098.661 ops/s
# Warmup Iteration  16: 3014161.087 ops/s
# Warmup Iteration  17: 3002188.211 ops/s
# Warmup Iteration  18: 3014071.704 ops/s
# Warmup Iteration  19: 3003278.164 ops/s
# Warmup Iteration  20: 3013959.526 ops/s
# Warmup Iteration  21: 2966107.527 ops/s
# Warmup Iteration  22: 3008355.529 ops/s
# Warmup Iteration  23: 3002105.727 ops/s
# Warmup Iteration  24: 3028449.040 ops/s
# Warmup Iteration  25: 3010295.194 ops/s
# Warmup Iteration  26: 3017928.852 ops/s
# Warmup Iteration  27: 3005541.340 ops/s
# Warmup Iteration  28: 3016849.628 ops/s
# Warmup Iteration  29: 3008910.981 ops/s
# Warmup Iteration  30: 3004854.845 ops/s
Iteration   1: 3006152.191 ops/s
Iteration   2: 2991322.200 ops/s
Iteration   3: 3004177.289 ops/s
Iteration   4: 3023283.247 ops/s
Iteration   5: 3004750.596 ops/s
Iteration   6: 3011681.498 ops/s
Iteration   7: 3026860.952 ops/s
Iteration   8: 3003023.327 ops/s
Iteration   9: 2977875.900 ops/s
Iteration  10: 2942615.531 ops/s
Iteration  11: 3000798.651 ops/s
Iteration  12: 2996836.399 ops/s
Iteration  13: 3009491.721 ops/s
Iteration  14: 3009968.054 ops/s
Iteration  15: 3021626.601 ops/s
Iteration  16: 3011935.320 ops/s
Iteration  17: 3006694.847 ops/s
Iteration  18: 2984268.656 ops/s
Iteration  19: 2995471.603 ops/s
Iteration  20: 2997306.703 ops/s
Iteration  21: 3017946.117 ops/s
Iteration  22: 3004843.096 ops/s
Iteration  23: 3001598.580 ops/s
Iteration  24: 3001712.716 ops/s
Iteration  25: 3013813.939 ops/s
Iteration  26: 3028146.834 ops/s
Iteration  27: 2999586.220 ops/s
Iteration  28: 2984039.862 ops/s
Iteration  29: 3003803.301 ops/s
Iteration  30: 2984025.651 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newEmpty":
  3002188.587 ±(99.9%) 11227.809 ops/s [Average]
  (min, avg, max) = (2942615.531, 3002188.587, 3028146.834), stdev = 16805.257
  CI (99.9%): [2990960.778, 3013416.396] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_newEmpty  thrpt   30  3002188.587 ± 11227.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415234.985 ops/s
# Warmup Iteration   2: 1016589.866 ops/s
# Warmup Iteration   3: 1018507.182 ops/s
# Warmup Iteration   4: 858813.921 ops/s
# Warmup Iteration   5: 1014575.775 ops/s
# Warmup Iteration   6: 1017292.271 ops/s
# Warmup Iteration   7: 1018109.680 ops/s
# Warmup Iteration   8: 1015607.263 ops/s
# Warmup Iteration   9: 1016980.305 ops/s
# Warmup Iteration  10: 1023592.067 ops/s
# Warmup Iteration  11: 1021642.502 ops/s
# Warmup Iteration  12: 1016246.931 ops/s
# Warmup Iteration  13: 1018009.668 ops/s
# Warmup Iteration  14: 1020379.796 ops/s
# Warmup Iteration  15: 1016306.363 ops/s
# Warmup Iteration  16: 1019063.383 ops/s
# Warmup Iteration  17: 1014275.457 ops/s
# Warmup Iteration  18: 1019167.805 ops/s
# Warmup Iteration  19: 1015296.410 ops/s
# Warmup Iteration  20: 1014737.726 ops/s
# Warmup Iteration  21: 1017303.057 ops/s
# Warmup Iteration  22: 1017917.440 ops/s
# Warmup Iteration  23: 1012621.535 ops/s
# Warmup Iteration  24: 1018068.060 ops/s
# Warmup Iteration  25: 1019016.015 ops/s
# Warmup Iteration  26: 1017786.260 ops/s
# Warmup Iteration  27: 1017339.450 ops/s
# Warmup Iteration  28: 1015798.225 ops/s
# Warmup Iteration  29: 1019106.353 ops/s
# Warmup Iteration  30: 1014807.747 ops/s
Iteration   1: 1017037.226 ops/s
Iteration   2: 1017224.819 ops/s
Iteration   3: 1017858.050 ops/s
Iteration   4: 1011822.242 ops/s
Iteration   5: 1012073.102 ops/s
Iteration   6: 1016011.523 ops/s
Iteration   7: 1011743.852 ops/s
Iteration   8: 1017702.051 ops/s
Iteration   9: 1009689.660 ops/s
Iteration  10: 1005417.525 ops/s
Iteration  11: 1008338.604 ops/s
Iteration  12: 1016624.765 ops/s
Iteration  13: 1020505.536 ops/s
Iteration  14: 1023924.215 ops/s
Iteration  15: 1018206.494 ops/s
Iteration  16: 1017560.863 ops/s
Iteration  17: 1021506.027 ops/s
Iteration  18: 1016572.237 ops/s
Iteration  19: 1020995.580 ops/s
Iteration  20: 1020948.829 ops/s
Iteration  21: 1023166.210 ops/s
Iteration  22: 1018961.277 ops/s
Iteration  23: 1015341.069 ops/s
Iteration  24: 1017066.888 ops/s
Iteration  25: 1018037.775 ops/s
Iteration  26: 1021659.375 ops/s
Iteration  27: 1015681.663 ops/s
Iteration  28: 1011978.394 ops/s
Iteration  29: 1025633.184 ops/s
Iteration  30: 1014285.050 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWith":
  1016785.803 ±(99.9%) 3120.600 ops/s [Average]
  (min, avg, max) = (1005417.525, 1016785.803, 1025633.184), stdev = 4670.767
  CI (99.9%): [1013665.203, 1019906.403] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWith  thrpt   30  1016785.803 ± 3120.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 375936.593 ops/s
# Warmup Iteration   2: 782996.548 ops/s
# Warmup Iteration   3: 807062.911 ops/s
# Warmup Iteration   4: 808824.676 ops/s
# Warmup Iteration   5: 682822.449 ops/s
# Warmup Iteration   6: 810764.437 ops/s
# Warmup Iteration   7: 815768.093 ops/s
# Warmup Iteration   8: 811626.315 ops/s
# Warmup Iteration   9: 811516.513 ops/s
# Warmup Iteration  10: 813994.824 ops/s
# Warmup Iteration  11: 809493.445 ops/s
# Warmup Iteration  12: 811520.785 ops/s
# Warmup Iteration  13: 813315.573 ops/s
# Warmup Iteration  14: 813613.802 ops/s
# Warmup Iteration  15: 811879.019 ops/s
# Warmup Iteration  16: 813511.353 ops/s
# Warmup Iteration  17: 821022.349 ops/s
# Warmup Iteration  18: 821840.621 ops/s
# Warmup Iteration  19: 818334.837 ops/s
# Warmup Iteration  20: 819584.752 ops/s
# Warmup Iteration  21: 823815.675 ops/s
# Warmup Iteration  22: 820490.133 ops/s
# Warmup Iteration  23: 824569.946 ops/s
# Warmup Iteration  24: 822935.752 ops/s
# Warmup Iteration  25: 824858.145 ops/s
# Warmup Iteration  26: 821231.210 ops/s
# Warmup Iteration  27: 821960.162 ops/s
# Warmup Iteration  28: 823139.491 ops/s
# Warmup Iteration  29: 819690.911 ops/s
# Warmup Iteration  30: 818287.788 ops/s
Iteration   1: 819186.862 ops/s
Iteration   2: 815020.490 ops/s
Iteration   3: 821015.162 ops/s
Iteration   4: 824197.640 ops/s
Iteration   5: 823379.801 ops/s
Iteration   6: 823593.684 ops/s
Iteration   7: 813128.848 ops/s
Iteration   8: 821093.121 ops/s
Iteration   9: 819949.772 ops/s
Iteration  10: 823165.510 ops/s
Iteration  11: 826516.777 ops/s
Iteration  12: 824518.086 ops/s
Iteration  13: 818084.900 ops/s
Iteration  14: 822866.623 ops/s
Iteration  15: 821121.405 ops/s
Iteration  16: 827285.345 ops/s
Iteration  17: 827020.270 ops/s
Iteration  18: 825926.565 ops/s
Iteration  19: 820905.309 ops/s
Iteration  20: 818645.507 ops/s
Iteration  21: 817268.443 ops/s
Iteration  22: 825494.713 ops/s
Iteration  23: 816551.139 ops/s
Iteration  24: 821398.133 ops/s
Iteration  25: 823789.447 ops/s
Iteration  26: 820650.577 ops/s
Iteration  27: 819765.183 ops/s
Iteration  28: 821963.144 ops/s
Iteration  29: 820400.600 ops/s
Iteration  30: 819977.318 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWith":
  821462.679 ±(99.9%) 2318.437 ops/s [Average]
  (min, avg, max) = (813128.848, 821462.679, 827285.345), stdev = 3470.127
  CI (99.9%): [819144.242, 823781.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWith  thrpt   30  821462.679 ± 2318.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 320099.539 ops/s
# Warmup Iteration   2: 613425.199 ops/s
# Warmup Iteration   3: 654327.914 ops/s
# Warmup Iteration   4: 654534.035 ops/s
# Warmup Iteration   5: 581977.075 ops/s
# Warmup Iteration   6: 620387.400 ops/s
# Warmup Iteration   7: 657389.417 ops/s
# Warmup Iteration   8: 657493.182 ops/s
# Warmup Iteration   9: 656267.647 ops/s
# Warmup Iteration  10: 656435.462 ops/s
# Warmup Iteration  11: 659877.641 ops/s
# Warmup Iteration  12: 657786.532 ops/s
# Warmup Iteration  13: 655944.711 ops/s
# Warmup Iteration  14: 649516.339 ops/s
# Warmup Iteration  15: 659289.954 ops/s
# Warmup Iteration  16: 657785.947 ops/s
# Warmup Iteration  17: 661518.678 ops/s
# Warmup Iteration  18: 659014.645 ops/s
# Warmup Iteration  19: 663988.991 ops/s
# Warmup Iteration  20: 664146.756 ops/s
# Warmup Iteration  21: 662222.195 ops/s
# Warmup Iteration  22: 665034.612 ops/s
# Warmup Iteration  23: 664042.353 ops/s
# Warmup Iteration  24: 664979.526 ops/s
# Warmup Iteration  25: 663586.480 ops/s
# Warmup Iteration  26: 661677.447 ops/s
# Warmup Iteration  27: 663221.645 ops/s
# Warmup Iteration  28: 662026.840 ops/s
# Warmup Iteration  29: 665472.938 ops/s
# Warmup Iteration  30: 662209.285 ops/s
Iteration   1: 663198.515 ops/s
Iteration   2: 662084.668 ops/s
Iteration   3: 659761.053 ops/s
Iteration   4: 663062.372 ops/s
Iteration   5: 659405.644 ops/s
Iteration   6: 663808.537 ops/s
Iteration   7: 657793.568 ops/s
Iteration   8: 657238.383 ops/s
Iteration   9: 661125.638 ops/s
Iteration  10: 662151.319 ops/s
Iteration  11: 659464.068 ops/s
Iteration  12: 664247.927 ops/s
Iteration  13: 664074.907 ops/s
Iteration  14: 667225.926 ops/s
Iteration  15: 662527.971 ops/s
Iteration  16: 663252.835 ops/s
Iteration  17: 662230.152 ops/s
Iteration  18: 663332.225 ops/s
Iteration  19: 660662.756 ops/s
Iteration  20: 662892.309 ops/s
Iteration  21: 665137.514 ops/s
Iteration  22: 664193.677 ops/s
Iteration  23: 666262.346 ops/s
Iteration  24: 661747.275 ops/s
Iteration  25: 663925.140 ops/s
Iteration  26: 662517.695 ops/s
Iteration  27: 665391.958 ops/s
Iteration  28: 663613.176 ops/s
Iteration  29: 664780.827 ops/s
Iteration  30: 667373.280 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWithWith":
  662816.122 ±(99.9%) 1644.485 ops/s [Average]
  (min, avg, max) = (657238.383, 662816.122, 667373.280), stdev = 2461.387
  CI (99.9%): [661171.637, 664460.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_newMapWithWithWithWith  thrpt   30  662816.122 ± 1644.485  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMap_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMap_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263101.419 ops/s
# Warmup Iteration   2: 267387.800 ops/s
# Warmup Iteration   3: 298458.372 ops/s
# Warmup Iteration   4: 333625.088 ops/s
# Warmup Iteration   5: 329930.338 ops/s
# Warmup Iteration   6: 333448.735 ops/s
# Warmup Iteration   7: 331880.602 ops/s
# Warmup Iteration   8: 333057.145 ops/s
# Warmup Iteration   9: 332593.660 ops/s
# Warmup Iteration  10: 332444.885 ops/s
# Warmup Iteration  11: 332462.350 ops/s
# Warmup Iteration  12: 332523.811 ops/s
# Warmup Iteration  13: 331657.894 ops/s
# Warmup Iteration  14: 332414.824 ops/s
# Warmup Iteration  15: 302337.814 ops/s
# Warmup Iteration  16: 308780.370 ops/s
# Warmup Iteration  17: 351587.164 ops/s
# Warmup Iteration  18: 350916.021 ops/s
# Warmup Iteration  19: 349824.594 ops/s
# Warmup Iteration  20: 352408.357 ops/s
# Warmup Iteration  21: 351391.334 ops/s
# Warmup Iteration  22: 351329.598 ops/s
# Warmup Iteration  23: 352018.364 ops/s
# Warmup Iteration  24: 351070.628 ops/s
# Warmup Iteration  25: 350940.012 ops/s
# Warmup Iteration  26: 350866.760 ops/s
# Warmup Iteration  27: 352446.643 ops/s
# Warmup Iteration  28: 353268.640 ops/s
# Warmup Iteration  29: 352644.985 ops/s
# Warmup Iteration  30: 351519.384 ops/s
Iteration   1: 353134.565 ops/s
Iteration   2: 351883.247 ops/s
Iteration   3: 353759.947 ops/s
Iteration   4: 352283.955 ops/s
Iteration   5: 350640.972 ops/s
Iteration   6: 352846.591 ops/s
Iteration   7: 352158.987 ops/s
Iteration   8: 352275.031 ops/s
Iteration   9: 349659.736 ops/s
Iteration  10: 353181.919 ops/s
Iteration  11: 349357.465 ops/s
Iteration  12: 352749.104 ops/s
Iteration  13: 352413.319 ops/s
Iteration  14: 353473.676 ops/s
Iteration  15: 350899.793 ops/s
Iteration  16: 351682.884 ops/s
Iteration  17: 352235.621 ops/s
Iteration  18: 353675.080 ops/s
Iteration  19: 353133.738 ops/s
Iteration  20: 350666.963 ops/s
Iteration  21: 351022.650 ops/s
Iteration  22: 354556.721 ops/s
Iteration  23: 353166.676 ops/s
Iteration  24: 353460.296 ops/s
Iteration  25: 352515.061 ops/s
Iteration  26: 352752.583 ops/s
Iteration  27: 352417.266 ops/s
Iteration  28: 351276.454 ops/s
Iteration  29: 353238.977 ops/s
Iteration  30: 352582.874 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_newMap_throws":
  352303.405 ±(99.9%) 811.343 ops/s [Average]
  (min, avg, max) = (349357.465, 352303.405, 354556.721), stdev = 1214.380
  CI (99.9%): [351492.062, 353114.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_newMap_throws  thrpt   30  352303.405 ± 811.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1433973.844 ops/s
# Warmup Iteration   2: 3583262.118 ops/s
# Warmup Iteration   3: 3579869.137 ops/s
# Warmup Iteration   4: 2988098.632 ops/s
# Warmup Iteration   5: 3609209.241 ops/s
# Warmup Iteration   6: 3597234.216 ops/s
# Warmup Iteration   7: 3607902.480 ops/s
# Warmup Iteration   8: 3591468.883 ops/s
# Warmup Iteration   9: 3613097.854 ops/s
# Warmup Iteration  10: 3599971.431 ops/s
# Warmup Iteration  11: 3602074.694 ops/s
# Warmup Iteration  12: 3593511.265 ops/s
# Warmup Iteration  13: 3612899.891 ops/s
# Warmup Iteration  14: 3605369.191 ops/s
# Warmup Iteration  15: 3593116.210 ops/s
# Warmup Iteration  16: 3606655.215 ops/s
# Warmup Iteration  17: 3580399.655 ops/s
# Warmup Iteration  18: 3572729.488 ops/s
# Warmup Iteration  19: 3586180.124 ops/s
# Warmup Iteration  20: 3591685.047 ops/s
# Warmup Iteration  21: 3591185.270 ops/s
# Warmup Iteration  22: 3569124.879 ops/s
# Warmup Iteration  23: 3587416.234 ops/s
# Warmup Iteration  24: 3601590.091 ops/s
# Warmup Iteration  25: 3587645.255 ops/s
# Warmup Iteration  26: 3599076.897 ops/s
# Warmup Iteration  27: 3610291.491 ops/s
# Warmup Iteration  28: 3602083.658 ops/s
# Warmup Iteration  29: 3600092.624 ops/s
# Warmup Iteration  30: 3609945.665 ops/s
Iteration   1: 3607648.341 ops/s
Iteration   2: 3604028.311 ops/s
Iteration   3: 3588168.020 ops/s
Iteration   4: 3601569.897 ops/s
Iteration   5: 3588411.378 ops/s
Iteration   6: 3605988.884 ops/s
Iteration   7: 3567269.087 ops/s
Iteration   8: 3619092.957 ops/s
Iteration   9: 3609094.211 ops/s
Iteration  10: 3591050.506 ops/s
Iteration  11: 3607335.581 ops/s
Iteration  12: 3608791.214 ops/s
Iteration  13: 3581128.254 ops/s
Iteration  14: 3593193.959 ops/s
Iteration  15: 3546427.082 ops/s
Iteration  16: 3598002.663 ops/s
Iteration  17: 3607469.182 ops/s
Iteration  18: 3605077.076 ops/s
Iteration  19: 3591326.120 ops/s
Iteration  20: 3613069.551 ops/s
Iteration  21: 3606114.046 ops/s
Iteration  22: 3611409.656 ops/s
Iteration  23: 3609261.957 ops/s
Iteration  24: 3603194.889 ops/s
Iteration  25: 3600390.544 ops/s
Iteration  26: 3596787.532 ops/s
Iteration  27: 3609581.490 ops/s
Iteration  28: 3605124.822 ops/s
Iteration  29: 3611201.759 ops/s
Iteration  30: 3582676.808 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfy":
  3598996.193 ±(99.9%) 10009.137 ops/s [Average]
  (min, avg, max) = (3546427.082, 3598996.193, 3619092.957), stdev = 14981.206
  CI (99.9%): [3588987.055, 3609005.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfy  thrpt   30  3598996.193 ± 10009.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2430834.218 ops/s
# Warmup Iteration   2: 5431705.689 ops/s
# Warmup Iteration   3: 5176585.492 ops/s
# Warmup Iteration   4: 4751703.928 ops/s
# Warmup Iteration   5: 5406002.648 ops/s
# Warmup Iteration   6: 5424983.726 ops/s
# Warmup Iteration   7: 5380693.411 ops/s
# Warmup Iteration   8: 5420749.054 ops/s
# Warmup Iteration   9: 5489049.432 ops/s
# Warmup Iteration  10: 5431562.259 ops/s
# Warmup Iteration  11: 5377241.565 ops/s
# Warmup Iteration  12: 5446639.336 ops/s
# Warmup Iteration  13: 5481861.675 ops/s
# Warmup Iteration  14: 5418189.260 ops/s
# Warmup Iteration  15: 5426691.868 ops/s
# Warmup Iteration  16: 5434627.232 ops/s
# Warmup Iteration  17: 5422433.483 ops/s
# Warmup Iteration  18: 5419871.190 ops/s
# Warmup Iteration  19: 5452112.363 ops/s
# Warmup Iteration  20: 5442841.829 ops/s
# Warmup Iteration  21: 5434354.352 ops/s
# Warmup Iteration  22: 5430704.334 ops/s
# Warmup Iteration  23: 5408990.124 ops/s
# Warmup Iteration  24: 5405282.874 ops/s
# Warmup Iteration  25: 5504872.643 ops/s
# Warmup Iteration  26: 5433492.812 ops/s
# Warmup Iteration  27: 5405238.637 ops/s
# Warmup Iteration  28: 5462168.757 ops/s
# Warmup Iteration  29: 5455867.095 ops/s
# Warmup Iteration  30: 5427545.618 ops/s
Iteration   1: 5475201.463 ops/s
Iteration   2: 5338661.652 ops/s
Iteration   3: 5384390.752 ops/s
Iteration   4: 5379314.170 ops/s
Iteration   5: 5527401.535 ops/s
Iteration   6: 5467474.749 ops/s
Iteration   7: 5494045.624 ops/s
Iteration   8: 5401432.278 ops/s
Iteration   9: 5466508.251 ops/s
Iteration  10: 5622571.033 ops/s
Iteration  11: 5517242.221 ops/s
Iteration  12: 5212738.081 ops/s
Iteration  13: 5391192.358 ops/s
Iteration  14: 5437779.637 ops/s
Iteration  15: 5479051.726 ops/s
Iteration  16: 5444189.586 ops/s
Iteration  17: 5388549.544 ops/s
Iteration  18: 5410365.266 ops/s
Iteration  19: 5437019.207 ops/s
Iteration  20: 5451221.472 ops/s
Iteration  21: 5417156.861 ops/s
Iteration  22: 5412167.459 ops/s
Iteration  23: 5449490.434 ops/s
Iteration  24: 5365021.291 ops/s
Iteration  25: 5422017.109 ops/s
Iteration  26: 5471498.074 ops/s
Iteration  27: 5459760.439 ops/s
Iteration  28: 5477570.949 ops/s
Iteration  29: 5401670.579 ops/s
Iteration  30: 5472224.222 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfyWith":
  5435830.934 ±(99.9%) 46823.351 ops/s [Average]
  (min, avg, max) = (5212738.081, 5435830.934, 5622571.033), stdev = 70082.993
  CI (99.9%): [5389007.583, 5482654.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  5435830.934 ± 46823.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1675937.346 ops/s
# Warmup Iteration   2: 3573675.206 ops/s
# Warmup Iteration   3: 3014610.268 ops/s
# Warmup Iteration   4: 3640417.692 ops/s
# Warmup Iteration   5: 3614959.604 ops/s
# Warmup Iteration   6: 3597821.103 ops/s
# Warmup Iteration   7: 3595496.750 ops/s
# Warmup Iteration   8: 3622375.845 ops/s
# Warmup Iteration   9: 3618099.258 ops/s
# Warmup Iteration  10: 3640267.234 ops/s
# Warmup Iteration  11: 3633901.661 ops/s
# Warmup Iteration  12: 3628168.764 ops/s
# Warmup Iteration  13: 3645424.014 ops/s
# Warmup Iteration  14: 3614845.164 ops/s
# Warmup Iteration  15: 3617122.482 ops/s
# Warmup Iteration  16: 3584765.242 ops/s
# Warmup Iteration  17: 3632476.748 ops/s
# Warmup Iteration  18: 3622570.071 ops/s
# Warmup Iteration  19: 3602517.765 ops/s
# Warmup Iteration  20: 3607525.899 ops/s
# Warmup Iteration  21: 3628909.618 ops/s
# Warmup Iteration  22: 3621723.220 ops/s
# Warmup Iteration  23: 3610503.126 ops/s
# Warmup Iteration  24: 3627371.942 ops/s
# Warmup Iteration  25: 3623748.585 ops/s
# Warmup Iteration  26: 3627235.179 ops/s
# Warmup Iteration  27: 3625764.159 ops/s
# Warmup Iteration  28: 3620007.340 ops/s
# Warmup Iteration  29: 3634357.960 ops/s
# Warmup Iteration  30: 3630294.936 ops/s
Iteration   1: 3630004.063 ops/s
Iteration   2: 3636847.263 ops/s
Iteration   3: 3577998.196 ops/s
Iteration   4: 3556974.478 ops/s
Iteration   5: 3611522.935 ops/s
Iteration   6: 3611224.581 ops/s
Iteration   7: 3623749.564 ops/s
Iteration   8: 3603156.825 ops/s
Iteration   9: 3611536.432 ops/s
Iteration  10: 3631518.414 ops/s
Iteration  11: 3578473.198 ops/s
Iteration  12: 3608852.684 ops/s
Iteration  13: 3616989.785 ops/s
Iteration  14: 3629883.940 ops/s
Iteration  15: 3633160.770 ops/s
Iteration  16: 3593384.348 ops/s
Iteration  17: 3657395.881 ops/s
Iteration  18: 3632028.328 ops/s
Iteration  19: 3627330.000 ops/s
Iteration  20: 3629140.862 ops/s
Iteration  21: 3637639.283 ops/s
Iteration  22: 3610109.211 ops/s
Iteration  23: 3632231.263 ops/s
Iteration  24: 3623404.971 ops/s
Iteration  25: 3634380.331 ops/s
Iteration  26: 3643873.850 ops/s
Iteration  27: 3620666.678 ops/s
Iteration  28: 3628986.707 ops/s
Iteration  29: 3628713.271 ops/s
Iteration  30: 3639738.835 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_notEmpty":
  3620030.565 ±(99.9%) 14244.506 ops/s [Average]
  (min, avg, max) = (3556974.478, 3620030.565, 3657395.881), stdev = 21320.508
  CI (99.9%): [3605786.059, 3634275.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_notEmpty  thrpt   30  3620030.565 ± 14244.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166614458.551 ops/s
# Warmup Iteration   2: 298848111.022 ops/s
# Warmup Iteration   3: 265533462.028 ops/s
# Warmup Iteration   4: 307138840.403 ops/s
# Warmup Iteration   5: 306236700.436 ops/s
# Warmup Iteration   6: 306390867.974 ops/s
# Warmup Iteration   7: 304926220.920 ops/s
# Warmup Iteration   8: 305960157.774 ops/s
# Warmup Iteration   9: 307384952.923 ops/s
# Warmup Iteration  10: 306041547.979 ops/s
# Warmup Iteration  11: 306909783.642 ops/s
# Warmup Iteration  12: 306069353.735 ops/s
# Warmup Iteration  13: 306567116.421 ops/s
# Warmup Iteration  14: 306348479.892 ops/s
# Warmup Iteration  15: 305798212.117 ops/s
# Warmup Iteration  16: 306250153.571 ops/s
# Warmup Iteration  17: 303586173.331 ops/s
# Warmup Iteration  18: 307338846.549 ops/s
# Warmup Iteration  19: 305753754.888 ops/s
# Warmup Iteration  20: 305683832.081 ops/s
# Warmup Iteration  21: 304752974.639 ops/s
# Warmup Iteration  22: 307053546.997 ops/s
# Warmup Iteration  23: 305855208.554 ops/s
# Warmup Iteration  24: 306913359.591 ops/s
# Warmup Iteration  25: 307556415.448 ops/s
# Warmup Iteration  26: 307364678.742 ops/s
# Warmup Iteration  27: 305555877.988 ops/s
# Warmup Iteration  28: 304917445.617 ops/s
# Warmup Iteration  29: 305943481.875 ops/s
# Warmup Iteration  30: 304103989.888 ops/s
Iteration   1: 301696720.346 ops/s
Iteration   2: 304385979.245 ops/s
Iteration   3: 306172978.554 ops/s
Iteration   4: 306631061.415 ops/s
Iteration   5: 307713184.714 ops/s
Iteration   6: 307872241.234 ops/s
Iteration   7: 306913369.935 ops/s
Iteration   8: 307126217.995 ops/s
Iteration   9: 307655786.966 ops/s
Iteration  10: 306468819.021 ops/s
Iteration  11: 305104710.979 ops/s
Iteration  12: 308512895.645 ops/s
Iteration  13: 307729130.464 ops/s
Iteration  14: 308735739.210 ops/s
Iteration  15: 305929328.059 ops/s
Iteration  16: 308440165.967 ops/s
Iteration  17: 304722388.883 ops/s
Iteration  18: 305912920.006 ops/s
Iteration  19: 304421228.850 ops/s
Iteration  20: 304085631.719 ops/s
Iteration  21: 306521075.525 ops/s
Iteration  22: 303534120.465 ops/s
Iteration  23: 307573828.519 ops/s
Iteration  24: 305974080.373 ops/s
Iteration  25: 303729234.460 ops/s
Iteration  26: 306461314.045 ops/s
Iteration  27: 304138147.509 ops/s
Iteration  28: 306297326.022 ops/s
Iteration  29: 306953739.895 ops/s
Iteration  30: 306930049.141 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals":
  306144780.505 ±(99.9%) 1132346.210 ops/s [Average]
  (min, avg, max) = (301696720.346, 306144780.505, 308735739.210), stdev = 1694842.628
  CI (99.9%): [305012434.295, 307277126.715] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt          Score         Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_nullCollisionWithCastInEquals  thrpt   30  306144780.505 ± 1132346.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_parallelStream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_parallelStream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604228.028 ops/s
# Warmup Iteration   2: 1412947.802 ops/s
# Warmup Iteration   3: 1457237.347 ops/s
# Warmup Iteration   4: 1246527.892 ops/s
# Warmup Iteration   5: 1423299.581 ops/s
# Warmup Iteration   6: 1464760.328 ops/s
# Warmup Iteration   7: 1466881.798 ops/s
# Warmup Iteration   8: 1464736.312 ops/s
# Warmup Iteration   9: 1460965.045 ops/s
# Warmup Iteration  10: 1462629.519 ops/s
# Warmup Iteration  11: 1468746.828 ops/s
# Warmup Iteration  12: 1467706.574 ops/s
# Warmup Iteration  13: 1466556.514 ops/s
# Warmup Iteration  14: 1469391.764 ops/s
# Warmup Iteration  15: 1458863.794 ops/s
# Warmup Iteration  16: 1464491.947 ops/s
# Warmup Iteration  17: 1464256.770 ops/s
# Warmup Iteration  18: 1462959.595 ops/s
# Warmup Iteration  19: 1470404.045 ops/s
# Warmup Iteration  20: 1462540.934 ops/s
# Warmup Iteration  21: 1465313.642 ops/s
# Warmup Iteration  22: 1467703.394 ops/s
# Warmup Iteration  23: 1465870.088 ops/s
# Warmup Iteration  24: 1470531.646 ops/s
# Warmup Iteration  25: 1462900.499 ops/s
# Warmup Iteration  26: 1468068.718 ops/s
# Warmup Iteration  27: 1464599.395 ops/s
# Warmup Iteration  28: 1472397.483 ops/s
# Warmup Iteration  29: 1468361.246 ops/s
# Warmup Iteration  30: 1473217.132 ops/s
Iteration   1: 1454387.334 ops/s
Iteration   2: 1467241.793 ops/s
Iteration   3: 1465234.861 ops/s
Iteration   4: 1476147.782 ops/s
Iteration   5: 1475471.331 ops/s
Iteration   6: 1461950.093 ops/s
Iteration   7: 1468491.171 ops/s
Iteration   8: 1473449.313 ops/s
Iteration   9: 1469997.672 ops/s
Iteration  10: 1466710.675 ops/s
Iteration  11: 1467852.753 ops/s
Iteration  12: 1471725.443 ops/s
Iteration  13: 1462650.489 ops/s
Iteration  14: 1462542.182 ops/s
Iteration  15: 1462493.938 ops/s
Iteration  16: 1470728.865 ops/s
Iteration  17: 1471270.274 ops/s
Iteration  18: 1480519.584 ops/s
Iteration  19: 1465956.625 ops/s
Iteration  20: 1461335.806 ops/s
Iteration  21: 1469619.147 ops/s
Iteration  22: 1482281.690 ops/s
Iteration  23: 1476819.584 ops/s
Iteration  24: 1462875.279 ops/s
Iteration  25: 1471538.696 ops/s
Iteration  26: 1464381.113 ops/s
Iteration  27: 1463411.233 ops/s
Iteration  28: 1465337.015 ops/s
Iteration  29: 1464572.427 ops/s
Iteration  30: 1467013.909 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_parallelStream":
  1468133.603 ±(99.9%) 4097.171 ops/s [Average]
  (min, avg, max) = (1454387.334, 1468133.603, 1482281.690), stdev = 6132.453
  CI (99.9%): [1464036.432, 1472230.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_parallelStream  thrpt   30  1468133.603 ± 4097.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partitionWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partitionWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 952628.301 ops/s
# Warmup Iteration   2: 2486723.233 ops/s
# Warmup Iteration   3: 2368073.204 ops/s
# Warmup Iteration   4: 2207273.612 ops/s
# Warmup Iteration   5: 2495554.751 ops/s
# Warmup Iteration   6: 2513003.584 ops/s
# Warmup Iteration   7: 2519635.883 ops/s
# Warmup Iteration   8: 2500438.841 ops/s
# Warmup Iteration   9: 2515568.746 ops/s
# Warmup Iteration  10: 2514807.844 ops/s
# Warmup Iteration  11: 2509731.287 ops/s
# Warmup Iteration  12: 2511881.414 ops/s
# Warmup Iteration  13: 2512092.547 ops/s
# Warmup Iteration  14: 2511639.451 ops/s
# Warmup Iteration  15: 2513697.237 ops/s
# Warmup Iteration  16: 2510902.869 ops/s
# Warmup Iteration  17: 2509708.539 ops/s
# Warmup Iteration  18: 2504459.763 ops/s
# Warmup Iteration  19: 2506232.287 ops/s
# Warmup Iteration  20: 2507412.269 ops/s
# Warmup Iteration  21: 2503782.737 ops/s
# Warmup Iteration  22: 2500818.740 ops/s
# Warmup Iteration  23: 2506810.990 ops/s
# Warmup Iteration  24: 2514638.913 ops/s
# Warmup Iteration  25: 2501928.439 ops/s
# Warmup Iteration  26: 2515045.030 ops/s
# Warmup Iteration  27: 2503151.862 ops/s
# Warmup Iteration  28: 2511392.038 ops/s
# Warmup Iteration  29: 2498472.868 ops/s
# Warmup Iteration  30: 2507843.727 ops/s
Iteration   1: 2521750.442 ops/s
Iteration   2: 2513496.911 ops/s
Iteration   3: 2515129.167 ops/s
Iteration   4: 2501244.479 ops/s
Iteration   5: 2508238.163 ops/s
Iteration   6: 2522159.063 ops/s
Iteration   7: 2518578.122 ops/s
Iteration   8: 2517555.125 ops/s
Iteration   9: 2521159.863 ops/s
Iteration  10: 2508229.060 ops/s
Iteration  11: 2521853.718 ops/s
Iteration  12: 2515291.167 ops/s
Iteration  13: 2505880.263 ops/s
Iteration  14: 2495051.024 ops/s
Iteration  15: 2513935.568 ops/s
Iteration  16: 2523427.178 ops/s
Iteration  17: 2503638.721 ops/s
Iteration  18: 2511053.207 ops/s
Iteration  19: 2510044.860 ops/s
Iteration  20: 2497045.622 ops/s
Iteration  21: 2510571.041 ops/s
Iteration  22: 2497541.548 ops/s
Iteration  23: 2504279.114 ops/s
Iteration  24: 2519725.182 ops/s
Iteration  25: 2511437.967 ops/s
Iteration  26: 2504379.995 ops/s
Iteration  27: 2502444.849 ops/s
Iteration  28: 2512584.874 ops/s
Iteration  29: 2493124.441 ops/s
Iteration  30: 2496473.069 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partitionWith_value":
  2509910.793 ±(99.9%) 5981.531 ops/s [Average]
  (min, avg, max) = (2493124.441, 2509910.793, 2523427.178), stdev = 8952.875
  CI (99.9%): [2503929.262, 2515892.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_partitionWith_value  thrpt   30  2509910.793 ± 5981.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partition_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partition_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1259035.184 ops/s
# Warmup Iteration   2: 3074429.664 ops/s
# Warmup Iteration   3: 2585417.268 ops/s
# Warmup Iteration   4: 3133280.564 ops/s
# Warmup Iteration   5: 3098567.761 ops/s
# Warmup Iteration   6: 3119658.641 ops/s
# Warmup Iteration   7: 3102061.181 ops/s
# Warmup Iteration   8: 3122441.311 ops/s
# Warmup Iteration   9: 3126857.513 ops/s
# Warmup Iteration  10: 3121063.136 ops/s
# Warmup Iteration  11: 3107410.594 ops/s
# Warmup Iteration  12: 3111898.335 ops/s
# Warmup Iteration  13: 3112954.723 ops/s
# Warmup Iteration  14: 3108514.287 ops/s
# Warmup Iteration  15: 3121455.455 ops/s
# Warmup Iteration  16: 3112184.364 ops/s
# Warmup Iteration  17: 3124952.175 ops/s
# Warmup Iteration  18: 3121193.223 ops/s
# Warmup Iteration  19: 3126191.396 ops/s
# Warmup Iteration  20: 3107535.746 ops/s
# Warmup Iteration  21: 3098386.047 ops/s
# Warmup Iteration  22: 3123013.948 ops/s
# Warmup Iteration  23: 3104109.989 ops/s
# Warmup Iteration  24: 3122162.152 ops/s
# Warmup Iteration  25: 3105800.731 ops/s
# Warmup Iteration  26: 3116311.058 ops/s
# Warmup Iteration  27: 3121336.851 ops/s
# Warmup Iteration  28: 3116057.534 ops/s
# Warmup Iteration  29: 3095282.443 ops/s
# Warmup Iteration  30: 3081546.885 ops/s
Iteration   1: 3117106.208 ops/s
Iteration   2: 3131649.579 ops/s
Iteration   3: 3130970.676 ops/s
Iteration   4: 3105585.836 ops/s
Iteration   5: 3137370.632 ops/s
Iteration   6: 3110506.275 ops/s
Iteration   7: 3126778.751 ops/s
Iteration   8: 3105215.322 ops/s
Iteration   9: 3114509.465 ops/s
Iteration  10: 3126912.540 ops/s
Iteration  11: 3144608.906 ops/s
Iteration  12: 3098825.750 ops/s
Iteration  13: 3134543.748 ops/s
Iteration  14: 3117460.900 ops/s
Iteration  15: 3135591.957 ops/s
Iteration  16: 3071834.690 ops/s
Iteration  17: 3116282.419 ops/s
Iteration  18: 3106792.923 ops/s
Iteration  19: 3137985.225 ops/s
Iteration  20: 3111932.488 ops/s
Iteration  21: 3112254.849 ops/s
Iteration  22: 3109600.516 ops/s
Iteration  23: 3115079.422 ops/s
Iteration  24: 3113695.629 ops/s
Iteration  25: 3112498.784 ops/s
Iteration  26: 3063749.013 ops/s
Iteration  27: 3090923.330 ops/s
Iteration  28: 3067764.067 ops/s
Iteration  29: 3110270.290 ops/s
Iteration  30: 3108075.433 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_partition_value":
  3112879.187 ±(99.9%) 13223.616 ops/s [Average]
  (min, avg, max) = (3063749.013, 3112879.187, 3144608.906), stdev = 19792.487
  CI (99.9%): [3099655.572, 3126102.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_partition_value  thrpt   30  3112879.187 ± 13223.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_put$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_put

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 500544.544 ops/s
# Warmup Iteration   2: 667413.695 ops/s
# Warmup Iteration   3: 804050.783 ops/s
# Warmup Iteration   4: 805188.677 ops/s
# Warmup Iteration   5: 803734.936 ops/s
# Warmup Iteration   6: 806523.129 ops/s
# Warmup Iteration   7: 805542.913 ops/s
# Warmup Iteration   8: 669169.138 ops/s
# Warmup Iteration   9: 803522.790 ops/s
# Warmup Iteration  10: 808788.702 ops/s
# Warmup Iteration  11: 809463.120 ops/s
# Warmup Iteration  12: 804738.297 ops/s
# Warmup Iteration  13: 804782.059 ops/s
# Warmup Iteration  14: 803174.637 ops/s
# Warmup Iteration  15: 803369.800 ops/s
# Warmup Iteration  16: 808079.905 ops/s
# Warmup Iteration  17: 846936.145 ops/s
# Warmup Iteration  18: 845822.577 ops/s
# Warmup Iteration  19: 846535.834 ops/s
# Warmup Iteration  20: 846361.788 ops/s
# Warmup Iteration  21: 845950.955 ops/s
# Warmup Iteration  22: 847204.114 ops/s
# Warmup Iteration  23: 843995.224 ops/s
# Warmup Iteration  24: 843320.264 ops/s
# Warmup Iteration  25: 846197.070 ops/s
# Warmup Iteration  26: 847846.805 ops/s
# Warmup Iteration  27: 848379.001 ops/s
# Warmup Iteration  28: 842593.961 ops/s
# Warmup Iteration  29: 843492.674 ops/s
# Warmup Iteration  30: 844587.823 ops/s
Iteration   1: 845630.522 ops/s
Iteration   2: 849040.577 ops/s
Iteration   3: 844610.917 ops/s
Iteration   4: 846043.445 ops/s
Iteration   5: 845963.794 ops/s
Iteration   6: 847016.524 ops/s
Iteration   7: 844040.910 ops/s
Iteration   8: 842651.342 ops/s
Iteration   9: 845043.461 ops/s
Iteration  10: 845033.885 ops/s
Iteration  11: 843005.707 ops/s
Iteration  12: 845130.369 ops/s
Iteration  13: 848643.931 ops/s
Iteration  14: 850842.992 ops/s
Iteration  15: 843002.121 ops/s
Iteration  16: 845237.268 ops/s
Iteration  17: 844113.344 ops/s
Iteration  18: 846696.584 ops/s
Iteration  19: 848577.438 ops/s
Iteration  20: 849148.124 ops/s
Iteration  21: 846430.265 ops/s
Iteration  22: 844464.839 ops/s
Iteration  23: 842753.120 ops/s
Iteration  24: 846865.581 ops/s
Iteration  25: 850353.834 ops/s
Iteration  26: 843973.723 ops/s
Iteration  27: 847378.900 ops/s
Iteration  28: 840630.886 ops/s
Iteration  29: 843808.988 ops/s
Iteration  30: 849660.386 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_put":
  845859.793 ±(99.9%) 1686.629 ops/s [Average]
  (min, avg, max) = (840630.886, 845859.793, 850842.992), stdev = 2524.467
  CI (99.9%): [844173.163, 847546.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_put  thrpt   30  845859.793 ± 1686.629  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504263.891 ops/s
# Warmup Iteration   2: 673213.036 ops/s
# Warmup Iteration   3: 812378.072 ops/s
# Warmup Iteration   4: 815629.804 ops/s
# Warmup Iteration   5: 813958.843 ops/s
# Warmup Iteration   6: 811667.004 ops/s
# Warmup Iteration   7: 813535.356 ops/s
# Warmup Iteration   8: 678068.816 ops/s
# Warmup Iteration   9: 810209.812 ops/s
# Warmup Iteration  10: 813398.048 ops/s
# Warmup Iteration  11: 816090.701 ops/s
# Warmup Iteration  12: 814368.480 ops/s
# Warmup Iteration  13: 811047.082 ops/s
# Warmup Iteration  14: 811705.310 ops/s
# Warmup Iteration  15: 814873.659 ops/s
# Warmup Iteration  16: 815612.941 ops/s
# Warmup Iteration  17: 857754.474 ops/s
# Warmup Iteration  18: 856278.529 ops/s
# Warmup Iteration  19: 854515.341 ops/s
# Warmup Iteration  20: 854347.639 ops/s
# Warmup Iteration  21: 858377.495 ops/s
# Warmup Iteration  22: 858912.491 ops/s
# Warmup Iteration  23: 852319.547 ops/s
# Warmup Iteration  24: 854067.485 ops/s
# Warmup Iteration  25: 856432.988 ops/s
# Warmup Iteration  26: 854843.485 ops/s
# Warmup Iteration  27: 855642.883 ops/s
# Warmup Iteration  28: 855316.989 ops/s
# Warmup Iteration  29: 852235.910 ops/s
# Warmup Iteration  30: 854203.006 ops/s
Iteration   1: 857123.840 ops/s
Iteration   2: 854194.281 ops/s
Iteration   3: 857287.557 ops/s
Iteration   4: 858327.969 ops/s
Iteration   5: 858644.035 ops/s
Iteration   6: 856393.422 ops/s
Iteration   7: 856128.018 ops/s
Iteration   8: 856830.652 ops/s
Iteration   9: 858580.507 ops/s
Iteration  10: 857989.272 ops/s
Iteration  11: 856870.771 ops/s
Iteration  12: 855317.667 ops/s
Iteration  13: 858007.123 ops/s
Iteration  14: 852089.948 ops/s
Iteration  15: 856923.112 ops/s
Iteration  16: 861177.652 ops/s
Iteration  17: 856032.877 ops/s
Iteration  18: 851590.911 ops/s
Iteration  19: 856120.368 ops/s
Iteration  20: 848612.666 ops/s
Iteration  21: 854724.018 ops/s
Iteration  22: 855130.179 ops/s
Iteration  23: 848496.262 ops/s
Iteration  24: 852395.874 ops/s
Iteration  25: 847189.756 ops/s
Iteration  26: 855876.818 ops/s
Iteration  27: 853844.139 ops/s
Iteration  28: 859322.815 ops/s
Iteration  29: 853384.829 ops/s
Iteration  30: 848391.150 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAll":
  855099.950 ±(99.9%) 2346.558 ops/s [Average]
  (min, avg, max) = (847189.756, 855099.950, 861177.652), stdev = 3512.218
  CI (99.9%): [852753.392, 857446.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAll  thrpt   30  855099.950 ± 2346.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497148.848 ops/s
# Warmup Iteration   2: 671294.631 ops/s
# Warmup Iteration   3: 812246.421 ops/s
# Warmup Iteration   4: 802666.623 ops/s
# Warmup Iteration   5: 809095.130 ops/s
# Warmup Iteration   6: 811126.757 ops/s
# Warmup Iteration   7: 809805.435 ops/s
# Warmup Iteration   8: 670317.440 ops/s
# Warmup Iteration   9: 809349.351 ops/s
# Warmup Iteration  10: 810151.365 ops/s
# Warmup Iteration  11: 810227.923 ops/s
# Warmup Iteration  12: 804801.862 ops/s
# Warmup Iteration  13: 805860.273 ops/s
# Warmup Iteration  14: 805002.346 ops/s
# Warmup Iteration  15: 806722.318 ops/s
# Warmup Iteration  16: 807237.297 ops/s
# Warmup Iteration  17: 847121.170 ops/s
# Warmup Iteration  18: 842597.635 ops/s
# Warmup Iteration  19: 850643.608 ops/s
# Warmup Iteration  20: 850435.831 ops/s
# Warmup Iteration  21: 847101.553 ops/s
# Warmup Iteration  22: 852167.501 ops/s
# Warmup Iteration  23: 852651.728 ops/s
# Warmup Iteration  24: 848784.401 ops/s
# Warmup Iteration  25: 847797.015 ops/s
# Warmup Iteration  26: 849301.803 ops/s
# Warmup Iteration  27: 843183.987 ops/s
# Warmup Iteration  28: 851207.559 ops/s
# Warmup Iteration  29: 847309.003 ops/s
# Warmup Iteration  30: 849774.752 ops/s
Iteration   1: 846720.459 ops/s
Iteration   2: 844451.312 ops/s
Iteration   3: 850799.655 ops/s
Iteration   4: 843345.089 ops/s
Iteration   5: 847028.821 ops/s
Iteration   6: 851650.771 ops/s
Iteration   7: 850587.008 ops/s
Iteration   8: 852603.237 ops/s
Iteration   9: 846320.840 ops/s
Iteration  10: 852008.262 ops/s
Iteration  11: 849922.362 ops/s
Iteration  12: 855176.588 ops/s
Iteration  13: 848664.220 ops/s
Iteration  14: 846481.874 ops/s
Iteration  15: 844981.580 ops/s
Iteration  16: 843787.145 ops/s
Iteration  17: 856509.833 ops/s
Iteration  18: 851149.773 ops/s
Iteration  19: 855446.120 ops/s
Iteration  20: 852102.269 ops/s
Iteration  21: 851485.018 ops/s
Iteration  22: 849322.615 ops/s
Iteration  23: 847998.736 ops/s
Iteration  24: 849317.932 ops/s
Iteration  25: 845869.101 ops/s
Iteration  26: 853268.449 ops/s
Iteration  27: 849182.785 ops/s
Iteration  28: 845127.398 ops/s
Iteration  29: 850693.021 ops/s
Iteration  30: 849650.517 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterable":
  849388.426 ±(99.9%) 2334.001 ops/s [Average]
  (min, avg, max) = (843345.089, 849388.426, 856509.833), stdev = 3493.422
  CI (99.9%): [847054.426, 851722.427] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterable  thrpt   30  849388.426 ± 2334.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475340.884 ops/s
# Warmup Iteration   2: 672974.082 ops/s
# Warmup Iteration   3: 779005.690 ops/s
# Warmup Iteration   4: 773629.763 ops/s
# Warmup Iteration   5: 780268.304 ops/s
# Warmup Iteration   6: 780407.467 ops/s
# Warmup Iteration   7: 654742.818 ops/s
# Warmup Iteration   8: 777914.772 ops/s
# Warmup Iteration   9: 780974.249 ops/s
# Warmup Iteration  10: 776179.850 ops/s
# Warmup Iteration  11: 776147.619 ops/s
# Warmup Iteration  12: 777769.003 ops/s
# Warmup Iteration  13: 776554.229 ops/s
# Warmup Iteration  14: 775934.177 ops/s
# Warmup Iteration  15: 775718.143 ops/s
# Warmup Iteration  16: 779027.144 ops/s
# Warmup Iteration  17: 817436.043 ops/s
# Warmup Iteration  18: 820291.041 ops/s
# Warmup Iteration  19: 819732.568 ops/s
# Warmup Iteration  20: 818322.950 ops/s
# Warmup Iteration  21: 815034.124 ops/s
# Warmup Iteration  22: 813911.408 ops/s
# Warmup Iteration  23: 818810.251 ops/s
# Warmup Iteration  24: 819471.673 ops/s
# Warmup Iteration  25: 822438.619 ops/s
# Warmup Iteration  26: 820129.074 ops/s
# Warmup Iteration  27: 814625.613 ops/s
# Warmup Iteration  28: 817878.214 ops/s
# Warmup Iteration  29: 815833.916 ops/s
# Warmup Iteration  30: 818883.724 ops/s
Iteration   1: 820776.971 ops/s
Iteration   2: 815064.772 ops/s
Iteration   3: 818155.809 ops/s
Iteration   4: 818745.763 ops/s
Iteration   5: 814404.608 ops/s
Iteration   6: 820515.188 ops/s
Iteration   7: 817590.256 ops/s
Iteration   8: 816681.256 ops/s
Iteration   9: 821768.111 ops/s
Iteration  10: 817924.563 ops/s
Iteration  11: 816627.091 ops/s
Iteration  12: 816792.354 ops/s
Iteration  13: 815962.554 ops/s
Iteration  14: 817689.402 ops/s
Iteration  15: 820573.308 ops/s
Iteration  16: 821535.640 ops/s
Iteration  17: 817672.918 ops/s
Iteration  18: 819244.034 ops/s
Iteration  19: 819325.121 ops/s
Iteration  20: 822157.148 ops/s
Iteration  21: 820688.922 ops/s
Iteration  22: 813882.037 ops/s
Iteration  23: 818177.768 ops/s
Iteration  24: 817099.581 ops/s
Iteration  25: 815543.372 ops/s
Iteration  26: 819630.632 ops/s
Iteration  27: 808597.025 ops/s
Iteration  28: 820998.571 ops/s
Iteration  29: 813130.876 ops/s
Iteration  30: 819439.562 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty":
  817879.840 ±(99.9%) 1985.656 ops/s [Average]
  (min, avg, max) = (808597.025, 817879.840, 822157.148), stdev = 2972.037
  CI (99.9%): [815894.184, 819865.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmpty  thrpt   30  817879.840 ± 1985.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433319.413 ops/s
# Warmup Iteration   2: 677673.288 ops/s
# Warmup Iteration   3: 760648.627 ops/s
# Warmup Iteration   4: 765636.718 ops/s
# Warmup Iteration   5: 762111.146 ops/s
# Warmup Iteration   6: 644699.532 ops/s
# Warmup Iteration   7: 755033.060 ops/s
# Warmup Iteration   8: 761981.197 ops/s
# Warmup Iteration   9: 763404.504 ops/s
# Warmup Iteration  10: 765781.284 ops/s
# Warmup Iteration  11: 764158.655 ops/s
# Warmup Iteration  12: 757109.324 ops/s
# Warmup Iteration  13: 760050.607 ops/s
# Warmup Iteration  14: 759563.775 ops/s
# Warmup Iteration  15: 758085.219 ops/s
# Warmup Iteration  16: 761753.823 ops/s
# Warmup Iteration  17: 800999.788 ops/s
# Warmup Iteration  18: 801915.613 ops/s
# Warmup Iteration  19: 805509.691 ops/s
# Warmup Iteration  20: 804340.622 ops/s
# Warmup Iteration  21: 799591.058 ops/s
# Warmup Iteration  22: 805031.761 ops/s
# Warmup Iteration  23: 804600.516 ops/s
# Warmup Iteration  24: 803856.567 ops/s
# Warmup Iteration  25: 805527.814 ops/s
# Warmup Iteration  26: 799863.201 ops/s
# Warmup Iteration  27: 808729.856 ops/s
# Warmup Iteration  28: 803541.715 ops/s
# Warmup Iteration  29: 803160.386 ops/s
# Warmup Iteration  30: 806526.565 ops/s
Iteration   1: 802532.367 ops/s
Iteration   2: 800288.725 ops/s
Iteration   3: 801528.356 ops/s
Iteration   4: 803719.896 ops/s
Iteration   5: 804297.902 ops/s
Iteration   6: 807808.269 ops/s
Iteration   7: 801169.884 ops/s
Iteration   8: 806746.453 ops/s
Iteration   9: 801300.604 ops/s
Iteration  10: 804994.648 ops/s
Iteration  11: 799763.576 ops/s
Iteration  12: 804911.938 ops/s
Iteration  13: 799397.374 ops/s
Iteration  14: 806789.096 ops/s
Iteration  15: 807665.862 ops/s
Iteration  16: 801276.175 ops/s
Iteration  17: 802902.726 ops/s
Iteration  18: 800265.463 ops/s
Iteration  19: 803485.783 ops/s
Iteration  20: 801469.771 ops/s
Iteration  21: 796805.808 ops/s
Iteration  22: 803779.800 ops/s
Iteration  23: 802742.139 ops/s
Iteration  24: 801856.408 ops/s
Iteration  25: 805043.585 ops/s
Iteration  26: 802671.772 ops/s
Iteration  27: 804644.654 ops/s
Iteration  28: 803679.815 ops/s
Iteration  29: 809392.754 ops/s
Iteration  30: 805448.745 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty":
  803279.345 ±(99.9%) 1872.962 ops/s [Average]
  (min, avg, max) = (796805.808, 803279.345, 809392.754), stdev = 2803.361
  CI (99.9%): [801406.383, 805152.307] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableEmptyAndTargetEmpty  thrpt   30  803279.345 ± 1872.962  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519842.844 ops/s
# Warmup Iteration   2: 710568.292 ops/s
# Warmup Iteration   3: 837759.064 ops/s
# Warmup Iteration   4: 832706.014 ops/s
# Warmup Iteration   5: 836729.177 ops/s
# Warmup Iteration   6: 837449.096 ops/s
# Warmup Iteration   7: 737686.757 ops/s
# Warmup Iteration   8: 806630.196 ops/s
# Warmup Iteration   9: 837213.850 ops/s
# Warmup Iteration  10: 833671.868 ops/s
# Warmup Iteration  11: 837717.142 ops/s
# Warmup Iteration  12: 835266.602 ops/s
# Warmup Iteration  13: 837510.177 ops/s
# Warmup Iteration  14: 839272.464 ops/s
# Warmup Iteration  15: 839380.064 ops/s
# Warmup Iteration  16: 838627.896 ops/s
# Warmup Iteration  17: 879427.057 ops/s
# Warmup Iteration  18: 877781.485 ops/s
# Warmup Iteration  19: 875342.117 ops/s
# Warmup Iteration  20: 880190.902 ops/s
# Warmup Iteration  21: 877787.748 ops/s
# Warmup Iteration  22: 882802.389 ops/s
# Warmup Iteration  23: 879847.520 ops/s
# Warmup Iteration  24: 878027.983 ops/s
# Warmup Iteration  25: 877281.675 ops/s
# Warmup Iteration  26: 871559.112 ops/s
# Warmup Iteration  27: 873520.938 ops/s
# Warmup Iteration  28: 879977.906 ops/s
# Warmup Iteration  29: 877351.205 ops/s
# Warmup Iteration  30: 879320.957 ops/s
Iteration   1: 872028.983 ops/s
Iteration   2: 877192.747 ops/s
Iteration   3: 877010.931 ops/s
Iteration   4: 881274.290 ops/s
Iteration   5: 878328.672 ops/s
Iteration   6: 883961.117 ops/s
Iteration   7: 877731.339 ops/s
Iteration   8: 884198.818 ops/s
Iteration   9: 881218.968 ops/s
Iteration  10: 878182.114 ops/s
Iteration  11: 881468.122 ops/s
Iteration  12: 877690.318 ops/s
Iteration  13: 879904.341 ops/s
Iteration  14: 878772.655 ops/s
Iteration  15: 878537.924 ops/s
Iteration  16: 878705.869 ops/s
Iteration  17: 876809.124 ops/s
Iteration  18: 876485.044 ops/s
Iteration  19: 878504.287 ops/s
Iteration  20: 877178.623 ops/s
Iteration  21: 877954.872 ops/s
Iteration  22: 877209.322 ops/s
Iteration  23: 877231.728 ops/s
Iteration  24: 882181.526 ops/s
Iteration  25: 878319.702 ops/s
Iteration  26: 877407.239 ops/s
Iteration  27: 878937.167 ops/s
Iteration  28: 878722.727 ops/s
Iteration  29: 879881.123 ops/s
Iteration  30: 881791.409 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableNull":
  878827.370 ±(99.9%) 1628.287 ops/s [Average]
  (min, avg, max) = (872028.983, 878827.370, 884198.818), stdev = 2437.144
  CI (99.9%): [877199.083, 880455.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableNull  thrpt   30  878827.370 ± 1628.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496384.773 ops/s
# Warmup Iteration   2: 672134.982 ops/s
# Warmup Iteration   3: 812722.295 ops/s
# Warmup Iteration   4: 802947.530 ops/s
# Warmup Iteration   5: 807752.285 ops/s
# Warmup Iteration   6: 809956.646 ops/s
# Warmup Iteration   7: 810666.878 ops/s
# Warmup Iteration   8: 671680.365 ops/s
# Warmup Iteration   9: 804524.960 ops/s
# Warmup Iteration  10: 805696.623 ops/s
# Warmup Iteration  11: 801624.905 ops/s
# Warmup Iteration  12: 807638.407 ops/s
# Warmup Iteration  13: 812324.750 ops/s
# Warmup Iteration  14: 805398.708 ops/s
# Warmup Iteration  15: 809000.453 ops/s
# Warmup Iteration  16: 812134.611 ops/s
# Warmup Iteration  17: 850566.974 ops/s
# Warmup Iteration  18: 850412.989 ops/s
# Warmup Iteration  19: 848248.589 ops/s
# Warmup Iteration  20: 852423.992 ops/s
# Warmup Iteration  21: 850241.200 ops/s
# Warmup Iteration  22: 850586.639 ops/s
# Warmup Iteration  23: 851951.249 ops/s
# Warmup Iteration  24: 854497.951 ops/s
# Warmup Iteration  25: 847176.083 ops/s
# Warmup Iteration  26: 850903.158 ops/s
# Warmup Iteration  27: 853701.422 ops/s
# Warmup Iteration  28: 856215.133 ops/s
# Warmup Iteration  29: 852460.909 ops/s
# Warmup Iteration  30: 851963.564 ops/s
Iteration   1: 849848.739 ops/s
Iteration   2: 850368.241 ops/s
Iteration   3: 849996.269 ops/s
Iteration   4: 848839.228 ops/s
Iteration   5: 854573.571 ops/s
Iteration   6: 852131.718 ops/s
Iteration   7: 855992.235 ops/s
Iteration   8: 853106.584 ops/s
Iteration   9: 853255.000 ops/s
Iteration  10: 854142.563 ops/s
Iteration  11: 848984.449 ops/s
Iteration  12: 855478.494 ops/s
Iteration  13: 848785.907 ops/s
Iteration  14: 850887.990 ops/s
Iteration  15: 853442.758 ops/s
Iteration  16: 849222.889 ops/s
Iteration  17: 849774.609 ops/s
Iteration  18: 853192.218 ops/s
Iteration  19: 850375.571 ops/s
Iteration  20: 847393.461 ops/s
Iteration  21: 849256.645 ops/s
Iteration  22: 850788.707 ops/s
Iteration  23: 851199.418 ops/s
Iteration  24: 858268.932 ops/s
Iteration  25: 855835.037 ops/s
Iteration  26: 851921.139 ops/s
Iteration  27: 845685.370 ops/s
Iteration  28: 859572.682 ops/s
Iteration  29: 848459.257 ops/s
Iteration  30: 847406.566 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty":
  851606.208 ±(99.9%) 2198.108 ops/s [Average]
  (min, avg, max) = (845685.370, 851606.208, 859572.682), stdev = 3290.024
  CI (99.9%): [849408.101, 853804.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putAllMapIterableTargetEmpty  thrpt   30  851606.208 ± 2198.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putPair$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putPair

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470965.694 ops/s
# Warmup Iteration   2: 698032.874 ops/s
# Warmup Iteration   3: 796306.659 ops/s
# Warmup Iteration   4: 799260.554 ops/s
# Warmup Iteration   5: 793589.866 ops/s
# Warmup Iteration   6: 794555.314 ops/s
# Warmup Iteration   7: 667930.530 ops/s
# Warmup Iteration   8: 798237.482 ops/s
# Warmup Iteration   9: 796144.540 ops/s
# Warmup Iteration  10: 800213.772 ops/s
# Warmup Iteration  11: 797735.433 ops/s
# Warmup Iteration  12: 794288.698 ops/s
# Warmup Iteration  13: 796731.667 ops/s
# Warmup Iteration  14: 796895.397 ops/s
# Warmup Iteration  15: 794598.596 ops/s
# Warmup Iteration  16: 794511.042 ops/s
# Warmup Iteration  17: 835492.092 ops/s
# Warmup Iteration  18: 838426.510 ops/s
# Warmup Iteration  19: 837933.753 ops/s
# Warmup Iteration  20: 834164.016 ops/s
# Warmup Iteration  21: 842337.561 ops/s
# Warmup Iteration  22: 834182.221 ops/s
# Warmup Iteration  23: 838077.275 ops/s
# Warmup Iteration  24: 833533.555 ops/s
# Warmup Iteration  25: 832041.411 ops/s
# Warmup Iteration  26: 837410.200 ops/s
# Warmup Iteration  27: 836729.071 ops/s
# Warmup Iteration  28: 836076.387 ops/s
# Warmup Iteration  29: 837814.750 ops/s
# Warmup Iteration  30: 835349.314 ops/s
Iteration   1: 832507.800 ops/s
Iteration   2: 841259.525 ops/s
Iteration   3: 839138.191 ops/s
Iteration   4: 839830.147 ops/s
Iteration   5: 836473.005 ops/s
Iteration   6: 838805.951 ops/s
Iteration   7: 833989.290 ops/s
Iteration   8: 836504.279 ops/s
Iteration   9: 836554.706 ops/s
Iteration  10: 836285.464 ops/s
Iteration  11: 837114.268 ops/s
Iteration  12: 840245.857 ops/s
Iteration  13: 837841.518 ops/s
Iteration  14: 840146.996 ops/s
Iteration  15: 831324.476 ops/s
Iteration  16: 835237.512 ops/s
Iteration  17: 841444.010 ops/s
Iteration  18: 837578.317 ops/s
Iteration  19: 833751.025 ops/s
Iteration  20: 837054.417 ops/s
Iteration  21: 838607.868 ops/s
Iteration  22: 833142.068 ops/s
Iteration  23: 838606.933 ops/s
Iteration  24: 836845.705 ops/s
Iteration  25: 834380.624 ops/s
Iteration  26: 835895.936 ops/s
Iteration  27: 834563.699 ops/s
Iteration  28: 842390.341 ops/s
Iteration  29: 830603.215 ops/s
Iteration  30: 837658.572 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_putPair":
  836859.391 ±(99.9%) 1983.068 ops/s [Average]
  (min, avg, max) = (830603.215, 836859.391, 842390.341), stdev = 2968.163
  CI (99.9%): [834876.323, 838842.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_putPair  thrpt   30  836859.391 ± 1983.068  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rehash_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rehash_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163370892.586 ops/s
# Warmup Iteration   2: 301867937.732 ops/s
# Warmup Iteration   3: 234731922.692 ops/s
# Warmup Iteration   4: 270515729.893 ops/s
# Warmup Iteration   5: 270482653.020 ops/s
# Warmup Iteration   6: 270859076.451 ops/s
# Warmup Iteration   7: 269469781.034 ops/s
# Warmup Iteration   8: 270827115.014 ops/s
# Warmup Iteration   9: 269762279.167 ops/s
# Warmup Iteration  10: 268748090.014 ops/s
# Warmup Iteration  11: 270304414.041 ops/s
# Warmup Iteration  12: 270043757.215 ops/s
# Warmup Iteration  13: 269707587.830 ops/s
# Warmup Iteration  14: 269820753.315 ops/s
# Warmup Iteration  15: 271160703.983 ops/s
# Warmup Iteration  16: 270427038.850 ops/s
# Warmup Iteration  17: 267845788.050 ops/s
# Warmup Iteration  18: 269863221.140 ops/s
# Warmup Iteration  19: 270818441.745 ops/s
# Warmup Iteration  20: 271512501.753 ops/s
# Warmup Iteration  21: 270394170.540 ops/s
# Warmup Iteration  22: 271064101.414 ops/s
# Warmup Iteration  23: 269964399.988 ops/s
# Warmup Iteration  24: 268058444.277 ops/s
# Warmup Iteration  25: 271043704.616 ops/s
# Warmup Iteration  26: 270191413.442 ops/s
# Warmup Iteration  27: 269383683.599 ops/s
# Warmup Iteration  28: 269529924.281 ops/s
# Warmup Iteration  29: 270347202.309 ops/s
# Warmup Iteration  30: 269625005.649 ops/s
Iteration   1: 271451597.077 ops/s
Iteration   2: 269629498.723 ops/s
Iteration   3: 269954496.631 ops/s
Iteration   4: 270528544.828 ops/s
Iteration   5: 270336958.715 ops/s
Iteration   6: 270351467.267 ops/s
Iteration   7: 270787352.132 ops/s
Iteration   8: 270858703.491 ops/s
Iteration   9: 270452538.901 ops/s
Iteration  10: 270961369.426 ops/s
Iteration  11: 271691966.148 ops/s
Iteration  12: 271468118.530 ops/s
Iteration  13: 272104207.675 ops/s
Iteration  14: 271230986.561 ops/s
Iteration  15: 270731171.356 ops/s
Iteration  16: 268982018.738 ops/s
Iteration  17: 270854614.528 ops/s
Iteration  18: 268912304.810 ops/s
Iteration  19: 268294442.870 ops/s
Iteration  20: 268310358.988 ops/s
Iteration  21: 271233382.979 ops/s
Iteration  22: 271475081.962 ops/s
Iteration  23: 269211127.431 ops/s
Iteration  24: 269969016.030 ops/s
Iteration  25: 272637341.687 ops/s
Iteration  26: 271725947.866 ops/s
Iteration  27: 270394502.628 ops/s
Iteration  28: 270412277.433 ops/s
Iteration  29: 269902160.466 ops/s
Iteration  30: 271293311.834 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rehash_null_collision":
  270538228.924 ±(99.9%) 713030.899 ops/s [Average]
  (min, avg, max) = (268294442.870, 270538228.924, 272637341.687), stdev = 1067231.164
  CI (99.9%): [269825198.024, 271251259.823] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt          Score        Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_rehash_null_collision  thrpt   30  270538228.924 ± 713030.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 890243.882 ops/s
# Warmup Iteration   2: 2095415.772 ops/s
# Warmup Iteration   3: 2184847.201 ops/s
# Warmup Iteration   4: 1872428.778 ops/s
# Warmup Iteration   5: 2144657.014 ops/s
# Warmup Iteration   6: 2195363.580 ops/s
# Warmup Iteration   7: 2190390.416 ops/s
# Warmup Iteration   8: 2190574.292 ops/s
# Warmup Iteration   9: 2199731.013 ops/s
# Warmup Iteration  10: 2195586.334 ops/s
# Warmup Iteration  11: 2190074.433 ops/s
# Warmup Iteration  12: 2200686.894 ops/s
# Warmup Iteration  13: 2181829.659 ops/s
# Warmup Iteration  14: 2198302.730 ops/s
# Warmup Iteration  15: 2197636.620 ops/s
# Warmup Iteration  16: 2187989.868 ops/s
# Warmup Iteration  17: 2198002.616 ops/s
# Warmup Iteration  18: 2193085.898 ops/s
# Warmup Iteration  19: 2196242.832 ops/s
# Warmup Iteration  20: 2196025.952 ops/s
# Warmup Iteration  21: 2194031.723 ops/s
# Warmup Iteration  22: 2191546.290 ops/s
# Warmup Iteration  23: 2183987.147 ops/s
# Warmup Iteration  24: 2196144.931 ops/s
# Warmup Iteration  25: 2187957.835 ops/s
# Warmup Iteration  26: 2203781.337 ops/s
# Warmup Iteration  27: 2193950.933 ops/s
# Warmup Iteration  28: 2189635.953 ops/s
# Warmup Iteration  29: 2184931.359 ops/s
# Warmup Iteration  30: 2198449.125 ops/s
Iteration   1: 2185236.721 ops/s
Iteration   2: 2187266.067 ops/s
Iteration   3: 2187260.968 ops/s
Iteration   4: 2209836.489 ops/s
Iteration   5: 2213977.166 ops/s
Iteration   6: 2195931.669 ops/s
Iteration   7: 2198266.707 ops/s
Iteration   8: 2194861.185 ops/s
Iteration   9: 2207800.247 ops/s
Iteration  10: 2191094.264 ops/s
Iteration  11: 2196040.405 ops/s
Iteration  12: 2185436.122 ops/s
Iteration  13: 2201514.641 ops/s
Iteration  14: 2197946.545 ops/s
Iteration  15: 2189245.259 ops/s
Iteration  16: 2192572.225 ops/s
Iteration  17: 2206410.597 ops/s
Iteration  18: 2183048.333 ops/s
Iteration  19: 2193588.900 ops/s
Iteration  20: 2194446.532 ops/s
Iteration  21: 2204189.400 ops/s
Iteration  22: 2190098.811 ops/s
Iteration  23: 2212102.492 ops/s
Iteration  24: 2203227.047 ops/s
Iteration  25: 2197749.484 ops/s
Iteration  26: 2180145.803 ops/s
Iteration  27: 2183896.479 ops/s
Iteration  28: 2187048.805 ops/s
Iteration  29: 2193858.079 ops/s
Iteration  30: 2192949.242 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject":
  2195234.889 ±(99.9%) 5990.171 ops/s [Average]
  (min, avg, max) = (2180145.803, 2195234.889, 2213977.166), stdev = 8965.806
  CI (99.9%): [2189244.719, 2201225.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_reject  thrpt   30  2195234.889 ± 5990.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1086824.288 ops/s
# Warmup Iteration   2: 2466328.145 ops/s
# Warmup Iteration   3: 2058543.450 ops/s
# Warmup Iteration   4: 2436543.183 ops/s
# Warmup Iteration   5: 2476031.081 ops/s
# Warmup Iteration   6: 2453140.962 ops/s
# Warmup Iteration   7: 2445150.962 ops/s
# Warmup Iteration   8: 2462214.264 ops/s
# Warmup Iteration   9: 2435410.992 ops/s
# Warmup Iteration  10: 2477592.774 ops/s
# Warmup Iteration  11: 2440122.158 ops/s
# Warmup Iteration  12: 2468221.233 ops/s
# Warmup Iteration  13: 2476455.809 ops/s
# Warmup Iteration  14: 2473220.294 ops/s
# Warmup Iteration  15: 2458966.189 ops/s
# Warmup Iteration  16: 2467817.517 ops/s
# Warmup Iteration  17: 2474449.075 ops/s
# Warmup Iteration  18: 2510417.993 ops/s
# Warmup Iteration  19: 2464342.953 ops/s
# Warmup Iteration  20: 2471402.663 ops/s
# Warmup Iteration  21: 2504945.377 ops/s
# Warmup Iteration  22: 2486129.772 ops/s
# Warmup Iteration  23: 2475960.316 ops/s
# Warmup Iteration  24: 2460326.133 ops/s
# Warmup Iteration  25: 2449220.020 ops/s
# Warmup Iteration  26: 2472146.765 ops/s
# Warmup Iteration  27: 2464347.712 ops/s
# Warmup Iteration  28: 2455845.192 ops/s
# Warmup Iteration  29: 2477804.632 ops/s
# Warmup Iteration  30: 2454443.788 ops/s
Iteration   1: 2411875.336 ops/s
Iteration   2: 2463861.969 ops/s
Iteration   3: 2475628.919 ops/s
Iteration   4: 2439329.400 ops/s
Iteration   5: 2481982.730 ops/s
Iteration   6: 2435498.281 ops/s
Iteration   7: 2444339.722 ops/s
Iteration   8: 2452883.989 ops/s
Iteration   9: 2465049.361 ops/s
Iteration  10: 2487679.103 ops/s
Iteration  11: 2477445.941 ops/s
Iteration  12: 2460065.772 ops/s
Iteration  13: 2492918.107 ops/s
Iteration  14: 2470738.987 ops/s
Iteration  15: 2485707.309 ops/s
Iteration  16: 2452356.840 ops/s
Iteration  17: 2453467.568 ops/s
Iteration  18: 2441135.984 ops/s
Iteration  19: 2469333.254 ops/s
Iteration  20: 2491965.750 ops/s
Iteration  21: 2445896.608 ops/s
Iteration  22: 2478165.878 ops/s
Iteration  23: 2487926.382 ops/s
Iteration  24: 2474242.336 ops/s
Iteration  25: 2462950.748 ops/s
Iteration  26: 2444285.243 ops/s
Iteration  27: 2460486.402 ops/s
Iteration  28: 2495751.881 ops/s
Iteration  29: 2446134.390 ops/s
Iteration  30: 2462685.820 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectMap":
  2463726.334 ±(99.9%) 13438.165 ops/s [Average]
  (min, avg, max) = (2411875.336, 2463726.334, 2495751.881), stdev = 20113.614
  CI (99.9%): [2450288.169, 2477164.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_rejectMap  thrpt   30  2463726.334 ± 13438.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 828610.028 ops/s
# Warmup Iteration   2: 1961560.316 ops/s
# Warmup Iteration   3: 2087095.444 ops/s
# Warmup Iteration   4: 1877409.319 ops/s
# Warmup Iteration   5: 1938929.143 ops/s
# Warmup Iteration   6: 2092697.689 ops/s
# Warmup Iteration   7: 2089104.707 ops/s
# Warmup Iteration   8: 2095632.304 ops/s
# Warmup Iteration   9: 2107252.085 ops/s
# Warmup Iteration  10: 2108637.651 ops/s
# Warmup Iteration  11: 2100464.614 ops/s
# Warmup Iteration  12: 2100541.680 ops/s
# Warmup Iteration  13: 2095597.406 ops/s
# Warmup Iteration  14: 2099645.370 ops/s
# Warmup Iteration  15: 2101486.323 ops/s
# Warmup Iteration  16: 2106242.153 ops/s
# Warmup Iteration  17: 2101578.848 ops/s
# Warmup Iteration  18: 2106394.651 ops/s
# Warmup Iteration  19: 2104614.221 ops/s
# Warmup Iteration  20: 2111683.022 ops/s
# Warmup Iteration  21: 2106171.795 ops/s
# Warmup Iteration  22: 2100351.746 ops/s
# Warmup Iteration  23: 2099789.372 ops/s
# Warmup Iteration  24: 2100056.843 ops/s
# Warmup Iteration  25: 2106901.965 ops/s
# Warmup Iteration  26: 2100270.391 ops/s
# Warmup Iteration  27: 2104011.067 ops/s
# Warmup Iteration  28: 2106856.269 ops/s
# Warmup Iteration  29: 2099977.746 ops/s
# Warmup Iteration  30: 2099253.574 ops/s
Iteration   1: 2107967.587 ops/s
Iteration   2: 2108574.016 ops/s
Iteration   3: 2101492.378 ops/s
Iteration   4: 2105998.119 ops/s
Iteration   5: 2111573.696 ops/s
Iteration   6: 2110745.343 ops/s
Iteration   7: 2108904.331 ops/s
Iteration   8: 2103173.102 ops/s
Iteration   9: 2113649.416 ops/s
Iteration  10: 2104554.010 ops/s
Iteration  11: 2111227.133 ops/s
Iteration  12: 2109647.346 ops/s
Iteration  13: 2095044.588 ops/s
Iteration  14: 2096387.091 ops/s
Iteration  15: 2105815.647 ops/s
Iteration  16: 2108016.429 ops/s
Iteration  17: 2100834.301 ops/s
Iteration  18: 2114007.428 ops/s
Iteration  19: 2113147.298 ops/s
Iteration  20: 2092403.320 ops/s
Iteration  21: 2103989.831 ops/s
Iteration  22: 2101325.066 ops/s
Iteration  23: 2096896.653 ops/s
Iteration  24: 2103498.376 ops/s
Iteration  25: 2089491.800 ops/s
Iteration  26: 2111252.945 ops/s
Iteration  27: 2095426.662 ops/s
Iteration  28: 2109602.130 ops/s
Iteration  29: 2106541.905 ops/s
Iteration  30: 2102194.081 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith":
  2104779.401 ±(99.9%) 4395.728 ops/s [Average]
  (min, avg, max) = (2089491.800, 2104779.401, 2114007.428), stdev = 6579.319
  CI (99.9%): [2100383.673, 2109175.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith  thrpt   30  2104779.401 ± 4395.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1578936.612 ops/s
# Warmup Iteration   2: 3552338.794 ops/s
# Warmup Iteration   3: 3024202.559 ops/s
# Warmup Iteration   4: 3634111.478 ops/s
# Warmup Iteration   5: 3637107.186 ops/s
# Warmup Iteration   6: 3652692.052 ops/s
# Warmup Iteration   7: 3627956.096 ops/s
# Warmup Iteration   8: 3611719.391 ops/s
# Warmup Iteration   9: 3643548.824 ops/s
# Warmup Iteration  10: 3620682.621 ops/s
# Warmup Iteration  11: 3646089.669 ops/s
# Warmup Iteration  12: 3641650.153 ops/s
# Warmup Iteration  13: 3643374.140 ops/s
# Warmup Iteration  14: 3640482.220 ops/s
# Warmup Iteration  15: 3624652.931 ops/s
# Warmup Iteration  16: 3624111.129 ops/s
# Warmup Iteration  17: 3621581.576 ops/s
# Warmup Iteration  18: 3618179.749 ops/s
# Warmup Iteration  19: 3639092.988 ops/s
# Warmup Iteration  20: 3637644.960 ops/s
# Warmup Iteration  21: 3614778.089 ops/s
# Warmup Iteration  22: 3619498.453 ops/s
# Warmup Iteration  23: 3631655.281 ops/s
# Warmup Iteration  24: 3632759.525 ops/s
# Warmup Iteration  25: 3616468.608 ops/s
# Warmup Iteration  26: 3644354.325 ops/s
# Warmup Iteration  27: 3624197.681 ops/s
# Warmup Iteration  28: 3622485.606 ops/s
# Warmup Iteration  29: 3633700.909 ops/s
# Warmup Iteration  30: 3621443.996 ops/s
Iteration   1: 3622576.948 ops/s
Iteration   2: 3591242.006 ops/s
Iteration   3: 3610091.104 ops/s
Iteration   4: 3641885.191 ops/s
Iteration   5: 3638427.262 ops/s
Iteration   6: 3635527.786 ops/s
Iteration   7: 3616755.028 ops/s
Iteration   8: 3627626.740 ops/s
Iteration   9: 3656756.349 ops/s
Iteration  10: 3611751.478 ops/s
Iteration  11: 3624478.049 ops/s
Iteration  12: 3627209.996 ops/s
Iteration  13: 3604929.464 ops/s
Iteration  14: 3606150.639 ops/s
Iteration  15: 3588909.347 ops/s
Iteration  16: 3632169.184 ops/s
Iteration  17: 3630054.170 ops/s
Iteration  18: 3646352.178 ops/s
Iteration  19: 3646211.465 ops/s
Iteration  20: 3627139.919 ops/s
Iteration  21: 3605834.523 ops/s
Iteration  22: 3618803.133 ops/s
Iteration  23: 3644581.553 ops/s
Iteration  24: 3637419.759 ops/s
Iteration  25: 3637206.781 ops/s
Iteration  26: 3637195.212 ops/s
Iteration  27: 3641192.646 ops/s
Iteration  28: 3642737.753 ops/s
Iteration  29: 3613375.499 ops/s
Iteration  30: 3639041.697 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith_value":
  3626787.762 ±(99.9%) 11309.986 ops/s [Average]
  (min, avg, max) = (3588909.347, 3626787.762, 3656756.349), stdev = 16928.256
  CI (99.9%): [3615477.776, 3638097.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_rejectWith_value  thrpt   30  3626787.762 ± 11309.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013461.698 ops/s
# Warmup Iteration   2: 2397258.988 ops/s
# Warmup Iteration   3: 2012137.463 ops/s
# Warmup Iteration   4: 2408855.132 ops/s
# Warmup Iteration   5: 2392625.831 ops/s
# Warmup Iteration   6: 2361853.565 ops/s
# Warmup Iteration   7: 2392000.352 ops/s
# Warmup Iteration   8: 2390304.875 ops/s
# Warmup Iteration   9: 2382082.531 ops/s
# Warmup Iteration  10: 2395895.759 ops/s
# Warmup Iteration  11: 2405062.502 ops/s
# Warmup Iteration  12: 2395774.167 ops/s
# Warmup Iteration  13: 2409114.645 ops/s
# Warmup Iteration  14: 2383792.497 ops/s
# Warmup Iteration  15: 2390040.953 ops/s
# Warmup Iteration  16: 2404796.968 ops/s
# Warmup Iteration  17: 2401878.630 ops/s
# Warmup Iteration  18: 2404661.731 ops/s
# Warmup Iteration  19: 2411732.926 ops/s
# Warmup Iteration  20: 2387832.429 ops/s
# Warmup Iteration  21: 2406044.506 ops/s
# Warmup Iteration  22: 2367421.810 ops/s
# Warmup Iteration  23: 2396158.017 ops/s
# Warmup Iteration  24: 2393580.292 ops/s
# Warmup Iteration  25: 2399149.496 ops/s
# Warmup Iteration  26: 2382978.651 ops/s
# Warmup Iteration  27: 2389825.406 ops/s
# Warmup Iteration  28: 2399358.394 ops/s
# Warmup Iteration  29: 2406338.394 ops/s
# Warmup Iteration  30: 2405613.970 ops/s
Iteration   1: 2418556.714 ops/s
Iteration   2: 2413216.985 ops/s
Iteration   3: 2405021.882 ops/s
Iteration   4: 2398917.503 ops/s
Iteration   5: 2392426.056 ops/s
Iteration   6: 2387519.086 ops/s
Iteration   7: 2392979.429 ops/s
Iteration   8: 2409983.126 ops/s
Iteration   9: 2392473.335 ops/s
Iteration  10: 2407305.367 ops/s
Iteration  11: 2363376.494 ops/s
Iteration  12: 2394597.836 ops/s
Iteration  13: 2381713.225 ops/s
Iteration  14: 2405731.054 ops/s
Iteration  15: 2410707.906 ops/s
Iteration  16: 2411093.758 ops/s
Iteration  17: 2388943.850 ops/s
Iteration  18: 2368793.464 ops/s
Iteration  19: 2384772.031 ops/s
Iteration  20: 2389066.584 ops/s
Iteration  21: 2388680.565 ops/s
Iteration  22: 2405642.324 ops/s
Iteration  23: 2397999.943 ops/s
Iteration  24: 2403030.053 ops/s
Iteration  25: 2400372.476 ops/s
Iteration  26: 2415258.495 ops/s
Iteration  27: 2415902.355 ops/s
Iteration  28: 2389275.748 ops/s
Iteration  29: 2357430.098 ops/s
Iteration  30: 2404793.832 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_reject_value":
  2396519.386 ±(99.9%) 10144.763 ops/s [Average]
  (min, avg, max) = (2357430.098, 2396519.386, 2418556.714), stdev = 15184.204
  CI (99.9%): [2386374.623, 2406664.149] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_reject_value  thrpt   30  2396519.386 ± 10144.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 475713.314 ops/s
# Warmup Iteration   2: 642391.756 ops/s
# Warmup Iteration   3: 769284.552 ops/s
# Warmup Iteration   4: 765450.506 ops/s
# Warmup Iteration   5: 769430.448 ops/s
# Warmup Iteration   6: 762595.653 ops/s
# Warmup Iteration   7: 722396.208 ops/s
# Warmup Iteration   8: 687246.544 ops/s
# Warmup Iteration   9: 768313.514 ops/s
# Warmup Iteration  10: 766049.957 ops/s
# Warmup Iteration  11: 768402.883 ops/s
# Warmup Iteration  12: 768475.686 ops/s
# Warmup Iteration  13: 764209.294 ops/s
# Warmup Iteration  14: 768162.174 ops/s
# Warmup Iteration  15: 768632.832 ops/s
# Warmup Iteration  16: 767777.148 ops/s
# Warmup Iteration  17: 805196.810 ops/s
# Warmup Iteration  18: 811009.440 ops/s
# Warmup Iteration  19: 799650.418 ops/s
# Warmup Iteration  20: 799623.168 ops/s
# Warmup Iteration  21: 797901.564 ops/s
# Warmup Iteration  22: 806545.764 ops/s
# Warmup Iteration  23: 804808.612 ops/s
# Warmup Iteration  24: 799418.178 ops/s
# Warmup Iteration  25: 801759.427 ops/s
# Warmup Iteration  26: 800667.729 ops/s
# Warmup Iteration  27: 804356.661 ops/s
# Warmup Iteration  28: 803242.222 ops/s
# Warmup Iteration  29: 804069.103 ops/s
# Warmup Iteration  30: 800358.918 ops/s
Iteration   1: 803268.298 ops/s
Iteration   2: 809122.326 ops/s
Iteration   3: 807206.219 ops/s
Iteration   4: 804507.961 ops/s
Iteration   5: 806963.429 ops/s
Iteration   6: 803991.271 ops/s
Iteration   7: 807151.375 ops/s
Iteration   8: 807615.336 ops/s
Iteration   9: 804300.641 ops/s
Iteration  10: 805074.242 ops/s
Iteration  11: 799430.598 ops/s
Iteration  12: 804598.453 ops/s
Iteration  13: 797678.273 ops/s
Iteration  14: 805814.181 ops/s
Iteration  15: 804669.312 ops/s
Iteration  16: 804489.331 ops/s
Iteration  17: 799636.624 ops/s
Iteration  18: 805806.222 ops/s
Iteration  19: 803827.385 ops/s
Iteration  20: 805287.648 ops/s
Iteration  21: 806124.767 ops/s
Iteration  22: 803862.533 ops/s
Iteration  23: 798309.237 ops/s
Iteration  24: 800847.380 ops/s
Iteration  25: 800854.605 ops/s
Iteration  26: 803001.307 ops/s
Iteration  27: 805689.199 ops/s
Iteration  28: 796789.302 ops/s
Iteration  29: 806326.395 ops/s
Iteration  30: 805979.547 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_remove":
  803940.780 ±(99.9%) 2080.940 ops/s [Average]
  (min, avg, max) = (796789.302, 803940.780, 809122.326), stdev = 3114.653
  CI (99.9%): [801859.840, 806021.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_remove  thrpt   30  803940.780 ± 2080.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511400.812 ops/s
# Warmup Iteration   2: 636890.164 ops/s
# Warmup Iteration   3: 793881.338 ops/s
# Warmup Iteration   4: 793180.615 ops/s
# Warmup Iteration   5: 787991.889 ops/s
# Warmup Iteration   6: 794506.682 ops/s
# Warmup Iteration   7: 796464.338 ops/s
# Warmup Iteration   8: 794799.719 ops/s
# Warmup Iteration   9: 662900.476 ops/s
# Warmup Iteration  10: 795431.369 ops/s
# Warmup Iteration  11: 795818.916 ops/s
# Warmup Iteration  12: 795374.552 ops/s
# Warmup Iteration  13: 801114.826 ops/s
# Warmup Iteration  14: 797388.549 ops/s
# Warmup Iteration  15: 795790.815 ops/s
# Warmup Iteration  16: 795875.117 ops/s
# Warmup Iteration  17: 835891.666 ops/s
# Warmup Iteration  18: 832335.222 ops/s
# Warmup Iteration  19: 831691.915 ops/s
# Warmup Iteration  20: 832576.694 ops/s
# Warmup Iteration  21: 831284.263 ops/s
# Warmup Iteration  22: 832873.221 ops/s
# Warmup Iteration  23: 830587.212 ops/s
# Warmup Iteration  24: 833331.238 ops/s
# Warmup Iteration  25: 837573.324 ops/s
# Warmup Iteration  26: 833707.770 ops/s
# Warmup Iteration  27: 833598.197 ops/s
# Warmup Iteration  28: 837432.582 ops/s
# Warmup Iteration  29: 835592.426 ops/s
# Warmup Iteration  30: 838598.349 ops/s
Iteration   1: 834812.566 ops/s
Iteration   2: 838642.958 ops/s
Iteration   3: 835004.563 ops/s
Iteration   4: 837717.578 ops/s
Iteration   5: 834927.274 ops/s
Iteration   6: 834739.946 ops/s
Iteration   7: 836196.066 ops/s
Iteration   8: 834384.985 ops/s
Iteration   9: 836723.058 ops/s
Iteration  10: 838294.448 ops/s
Iteration  11: 830233.062 ops/s
Iteration  12: 837004.150 ops/s
Iteration  13: 834010.325 ops/s
Iteration  14: 836625.936 ops/s
Iteration  15: 832754.538 ops/s
Iteration  16: 831043.946 ops/s
Iteration  17: 836709.474 ops/s
Iteration  18: 833676.836 ops/s
Iteration  19: 834087.721 ops/s
Iteration  20: 838884.382 ops/s
Iteration  21: 835221.821 ops/s
Iteration  22: 837992.993 ops/s
Iteration  23: 821671.081 ops/s
Iteration  24: 837819.551 ops/s
Iteration  25: 836690.436 ops/s
Iteration  26: 834566.596 ops/s
Iteration  27: 832656.563 ops/s
Iteration  28: 835074.461 ops/s
Iteration  29: 816567.422 ops/s
Iteration  30: 832129.613 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromEntrySet":
  834228.812 ±(99.9%) 3141.973 ops/s [Average]
  (min, avg, max) = (816567.422, 834228.812, 838884.382), stdev = 4702.758
  CI (99.9%): [831086.838, 837370.785] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromEntrySet  thrpt   30  834228.812 ± 3141.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530739.208 ops/s
# Warmup Iteration   2: 646485.621 ops/s
# Warmup Iteration   3: 820266.422 ops/s
# Warmup Iteration   4: 815176.619 ops/s
# Warmup Iteration   5: 821341.852 ops/s
# Warmup Iteration   6: 814280.057 ops/s
# Warmup Iteration   7: 818442.435 ops/s
# Warmup Iteration   8: 818156.199 ops/s
# Warmup Iteration   9: 685626.292 ops/s
# Warmup Iteration  10: 820296.785 ops/s
# Warmup Iteration  11: 823619.717 ops/s
# Warmup Iteration  12: 823322.295 ops/s
# Warmup Iteration  13: 819193.958 ops/s
# Warmup Iteration  14: 818751.254 ops/s
# Warmup Iteration  15: 819329.958 ops/s
# Warmup Iteration  16: 823193.127 ops/s
# Warmup Iteration  17: 858309.406 ops/s
# Warmup Iteration  18: 860771.387 ops/s
# Warmup Iteration  19: 860303.945 ops/s
# Warmup Iteration  20: 860092.832 ops/s
# Warmup Iteration  21: 862467.915 ops/s
# Warmup Iteration  22: 862455.254 ops/s
# Warmup Iteration  23: 860643.504 ops/s
# Warmup Iteration  24: 862354.443 ops/s
# Warmup Iteration  25: 861122.687 ops/s
# Warmup Iteration  26: 860551.711 ops/s
# Warmup Iteration  27: 859452.959 ops/s
# Warmup Iteration  28: 862586.130 ops/s
# Warmup Iteration  29: 861228.934 ops/s
# Warmup Iteration  30: 856815.026 ops/s
Iteration   1: 859677.656 ops/s
Iteration   2: 851664.123 ops/s
Iteration   3: 862743.791 ops/s
Iteration   4: 856721.011 ops/s
Iteration   5: 859940.601 ops/s
Iteration   6: 856358.394 ops/s
Iteration   7: 863657.161 ops/s
Iteration   8: 859947.220 ops/s
Iteration   9: 858601.606 ops/s
Iteration  10: 859541.120 ops/s
Iteration  11: 855306.179 ops/s
Iteration  12: 858245.854 ops/s
Iteration  13: 858976.228 ops/s
Iteration  14: 859121.423 ops/s
Iteration  15: 865267.452 ops/s
Iteration  16: 863431.774 ops/s
Iteration  17: 861776.178 ops/s
Iteration  18: 865183.179 ops/s
Iteration  19: 864614.001 ops/s
Iteration  20: 862610.549 ops/s
Iteration  21: 860586.206 ops/s
Iteration  22: 859954.460 ops/s
Iteration  23: 855774.304 ops/s
Iteration  24: 860061.043 ops/s
Iteration  25: 856186.535 ops/s
Iteration  26: 863173.812 ops/s
Iteration  27: 861377.124 ops/s
Iteration  28: 855516.282 ops/s
Iteration  29: 860485.806 ops/s
Iteration  30: 858930.693 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromKeySet":
  859847.726 ±(99.9%) 2172.957 ops/s [Average]
  (min, avg, max) = (851664.123, 859847.726, 865267.452), stdev = 3252.380
  CI (99.9%): [857674.769, 862020.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromKeySet  thrpt   30  859847.726 ± 2172.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538419.093 ops/s
# Warmup Iteration   2: 658054.525 ops/s
# Warmup Iteration   3: 821544.706 ops/s
# Warmup Iteration   4: 818866.037 ops/s
# Warmup Iteration   5: 827774.039 ops/s
# Warmup Iteration   6: 830873.135 ops/s
# Warmup Iteration   7: 827205.481 ops/s
# Warmup Iteration   8: 827990.757 ops/s
# Warmup Iteration   9: 692291.548 ops/s
# Warmup Iteration  10: 826017.931 ops/s
# Warmup Iteration  11: 825628.741 ops/s
# Warmup Iteration  12: 831439.280 ops/s
# Warmup Iteration  13: 829155.093 ops/s
# Warmup Iteration  14: 828082.513 ops/s
# Warmup Iteration  15: 826290.883 ops/s
# Warmup Iteration  16: 831574.102 ops/s
# Warmup Iteration  17: 871309.022 ops/s
# Warmup Iteration  18: 869089.553 ops/s
# Warmup Iteration  19: 868395.370 ops/s
# Warmup Iteration  20: 867924.569 ops/s
# Warmup Iteration  21: 872926.035 ops/s
# Warmup Iteration  22: 871349.386 ops/s
# Warmup Iteration  23: 862674.225 ops/s
# Warmup Iteration  24: 871176.936 ops/s
# Warmup Iteration  25: 872048.679 ops/s
# Warmup Iteration  26: 871572.552 ops/s
# Warmup Iteration  27: 870179.187 ops/s
# Warmup Iteration  28: 870820.798 ops/s
# Warmup Iteration  29: 874845.887 ops/s
# Warmup Iteration  30: 872111.524 ops/s
Iteration   1: 875137.647 ops/s
Iteration   2: 867403.749 ops/s
Iteration   3: 876383.640 ops/s
Iteration   4: 878253.770 ops/s
Iteration   5: 878306.942 ops/s
Iteration   6: 869009.902 ops/s
Iteration   7: 867530.014 ops/s
Iteration   8: 869894.246 ops/s
Iteration   9: 869649.387 ops/s
Iteration  10: 875649.940 ops/s
Iteration  11: 873715.942 ops/s
Iteration  12: 870766.121 ops/s
Iteration  13: 865919.757 ops/s
Iteration  14: 868147.542 ops/s
Iteration  15: 874700.262 ops/s
Iteration  16: 870179.453 ops/s
Iteration  17: 874779.320 ops/s
Iteration  18: 869587.130 ops/s
Iteration  19: 872370.522 ops/s
Iteration  20: 866594.776 ops/s
Iteration  21: 874340.814 ops/s
Iteration  22: 868197.368 ops/s
Iteration  23: 872141.018 ops/s
Iteration  24: 874878.802 ops/s
Iteration  25: 867148.194 ops/s
Iteration  26: 868538.242 ops/s
Iteration  27: 868550.355 ops/s
Iteration  28: 866637.951 ops/s
Iteration  29: 873624.894 ops/s
Iteration  30: 869160.786 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromValues":
  871239.950 ±(99.9%) 2446.494 ops/s [Average]
  (min, avg, max) = (865919.757, 871239.950, 878306.942), stdev = 3661.797
  CI (99.9%): [868793.455, 873686.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeAllFromValues  thrpt   30  871239.950 ± 2446.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 450288.899 ops/s
# Warmup Iteration   2: 641829.327 ops/s
# Warmup Iteration   3: 754463.285 ops/s
# Warmup Iteration   4: 744457.808 ops/s
# Warmup Iteration   5: 752928.829 ops/s
# Warmup Iteration   6: 750437.821 ops/s
# Warmup Iteration   7: 632560.885 ops/s
# Warmup Iteration   8: 754505.593 ops/s
# Warmup Iteration   9: 754137.658 ops/s
# Warmup Iteration  10: 755702.823 ops/s
# Warmup Iteration  11: 753867.102 ops/s
# Warmup Iteration  12: 754039.946 ops/s
# Warmup Iteration  13: 754377.901 ops/s
# Warmup Iteration  14: 753762.269 ops/s
# Warmup Iteration  15: 754060.561 ops/s
# Warmup Iteration  16: 755950.380 ops/s
# Warmup Iteration  17: 785364.483 ops/s
# Warmup Iteration  18: 788386.657 ops/s
# Warmup Iteration  19: 784363.699 ops/s
# Warmup Iteration  20: 785506.935 ops/s
# Warmup Iteration  21: 789309.872 ops/s
# Warmup Iteration  22: 791800.814 ops/s
# Warmup Iteration  23: 786052.492 ops/s
# Warmup Iteration  24: 786832.359 ops/s
# Warmup Iteration  25: 786565.713 ops/s
# Warmup Iteration  26: 786029.369 ops/s
# Warmup Iteration  27: 793160.840 ops/s
# Warmup Iteration  28: 789806.148 ops/s
# Warmup Iteration  29: 788403.503 ops/s
# Warmup Iteration  30: 790113.888 ops/s
Iteration   1: 787753.702 ops/s
Iteration   2: 790257.439 ops/s
Iteration   3: 788706.454 ops/s
Iteration   4: 791524.341 ops/s
Iteration   5: 787970.297 ops/s
Iteration   6: 793951.223 ops/s
Iteration   7: 789997.135 ops/s
Iteration   8: 784974.226 ops/s
Iteration   9: 783871.972 ops/s
Iteration  10: 791382.512 ops/s
Iteration  11: 787521.362 ops/s
Iteration  12: 786929.082 ops/s
Iteration  13: 790767.902 ops/s
Iteration  14: 789096.157 ops/s
Iteration  15: 790590.736 ops/s
Iteration  16: 789108.941 ops/s
Iteration  17: 788000.339 ops/s
Iteration  18: 780915.389 ops/s
Iteration  19: 791013.238 ops/s
Iteration  20: 786105.247 ops/s
Iteration  21: 784255.853 ops/s
Iteration  22: 792633.987 ops/s
Iteration  23: 786134.645 ops/s
Iteration  24: 787975.772 ops/s
Iteration  25: 786065.172 ops/s
Iteration  26: 785127.619 ops/s
Iteration  27: 790592.058 ops/s
Iteration  28: 790269.953 ops/s
Iteration  29: 789286.983 ops/s
Iteration  30: 787117.265 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeAllKeys":
  788329.900 ±(99.9%) 1914.677 ops/s [Average]
  (min, avg, max) = (780915.389, 788329.900, 793951.223), stdev = 2865.798
  CI (99.9%): [786415.224, 790244.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeAllKeys  thrpt   30  788329.900 ± 1914.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540630.930 ops/s
# Warmup Iteration   2: 645285.519 ops/s
# Warmup Iteration   3: 829103.565 ops/s
# Warmup Iteration   4: 830328.613 ops/s
# Warmup Iteration   5: 833158.024 ops/s
# Warmup Iteration   6: 833418.369 ops/s
# Warmup Iteration   7: 829191.878 ops/s
# Warmup Iteration   8: 832859.449 ops/s
# Warmup Iteration   9: 686578.450 ops/s
# Warmup Iteration  10: 831191.281 ops/s
# Warmup Iteration  11: 826356.497 ops/s
# Warmup Iteration  12: 830293.100 ops/s
# Warmup Iteration  13: 832120.117 ops/s
# Warmup Iteration  14: 828788.898 ops/s
# Warmup Iteration  15: 827888.599 ops/s
# Warmup Iteration  16: 833302.979 ops/s
# Warmup Iteration  17: 873653.184 ops/s
# Warmup Iteration  18: 877574.890 ops/s
# Warmup Iteration  19: 873359.407 ops/s
# Warmup Iteration  20: 870814.323 ops/s
# Warmup Iteration  21: 877600.971 ops/s
# Warmup Iteration  22: 875753.838 ops/s
# Warmup Iteration  23: 875897.252 ops/s
# Warmup Iteration  24: 874704.498 ops/s
# Warmup Iteration  25: 877452.365 ops/s
# Warmup Iteration  26: 874807.414 ops/s
# Warmup Iteration  27: 874834.902 ops/s
# Warmup Iteration  28: 877365.759 ops/s
# Warmup Iteration  29: 876865.246 ops/s
# Warmup Iteration  30: 878051.965 ops/s
Iteration   1: 872389.719 ops/s
Iteration   2: 868110.366 ops/s
Iteration   3: 880603.626 ops/s
Iteration   4: 872145.816 ops/s
Iteration   5: 872575.344 ops/s
Iteration   6: 876275.590 ops/s
Iteration   7: 875936.201 ops/s
Iteration   8: 876162.147 ops/s
Iteration   9: 880031.435 ops/s
Iteration  10: 879305.727 ops/s
Iteration  11: 880518.484 ops/s
Iteration  12: 872971.752 ops/s
Iteration  13: 871011.149 ops/s
Iteration  14: 876815.226 ops/s
Iteration  15: 877689.697 ops/s
Iteration  16: 874303.329 ops/s
Iteration  17: 873704.406 ops/s
Iteration  18: 874430.991 ops/s
Iteration  19: 873006.408 ops/s
Iteration  20: 877377.219 ops/s
Iteration  21: 877770.976 ops/s
Iteration  22: 876162.441 ops/s
Iteration  23: 875461.423 ops/s
Iteration  24: 874903.588 ops/s
Iteration  25: 875704.197 ops/s
Iteration  26: 874024.970 ops/s
Iteration  27: 871484.975 ops/s
Iteration  28: 876592.947 ops/s
Iteration  29: 874077.476 ops/s
Iteration  30: 875262.526 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromEntrySet":
  875227.005 ±(99.9%) 1943.919 ops/s [Average]
  (min, avg, max) = (868110.366, 875227.005, 880603.626), stdev = 2909.567
  CI (99.9%): [873283.086, 877170.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeFromEntrySet  thrpt   30  875227.005 ± 1943.919  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 547589.777 ops/s
# Warmup Iteration   2: 645313.336 ops/s
# Warmup Iteration   3: 823767.318 ops/s
# Warmup Iteration   4: 829362.980 ops/s
# Warmup Iteration   5: 831565.864 ops/s
# Warmup Iteration   6: 831016.644 ops/s
# Warmup Iteration   7: 828969.762 ops/s
# Warmup Iteration   8: 829271.458 ops/s
# Warmup Iteration   9: 697363.978 ops/s
# Warmup Iteration  10: 815029.489 ops/s
# Warmup Iteration  11: 827988.530 ops/s
# Warmup Iteration  12: 828770.764 ops/s
# Warmup Iteration  13: 829331.710 ops/s
# Warmup Iteration  14: 828552.548 ops/s
# Warmup Iteration  15: 831258.916 ops/s
# Warmup Iteration  16: 830978.089 ops/s
# Warmup Iteration  17: 868455.849 ops/s
# Warmup Iteration  18: 877022.609 ops/s
# Warmup Iteration  19: 877085.015 ops/s
# Warmup Iteration  20: 875942.559 ops/s
# Warmup Iteration  21: 875451.305 ops/s
# Warmup Iteration  22: 873537.967 ops/s
# Warmup Iteration  23: 871159.414 ops/s
# Warmup Iteration  24: 873891.226 ops/s
# Warmup Iteration  25: 873429.280 ops/s
# Warmup Iteration  26: 877633.208 ops/s
# Warmup Iteration  27: 876828.814 ops/s
# Warmup Iteration  28: 876672.252 ops/s
# Warmup Iteration  29: 876286.160 ops/s
# Warmup Iteration  30: 879269.716 ops/s
Iteration   1: 875381.209 ops/s
Iteration   2: 872575.557 ops/s
Iteration   3: 869308.923 ops/s
Iteration   4: 874102.790 ops/s
Iteration   5: 864520.465 ops/s
Iteration   6: 859766.265 ops/s
Iteration   7: 870927.655 ops/s
Iteration   8: 868331.225 ops/s
Iteration   9: 872801.801 ops/s
Iteration  10: 872670.350 ops/s
Iteration  11: 872216.335 ops/s
Iteration  12: 874317.153 ops/s
Iteration  13: 875644.757 ops/s
Iteration  14: 872666.146 ops/s
Iteration  15: 874693.273 ops/s
Iteration  16: 876849.041 ops/s
Iteration  17: 878232.235 ops/s
Iteration  18: 872649.016 ops/s
Iteration  19: 866240.844 ops/s
Iteration  20: 870997.042 ops/s
Iteration  21: 871840.590 ops/s
Iteration  22: 872437.507 ops/s
Iteration  23: 873004.650 ops/s
Iteration  24: 873836.257 ops/s
Iteration  25: 868297.216 ops/s
Iteration  26: 870959.081 ops/s
Iteration  27: 875042.327 ops/s
Iteration  28: 873433.382 ops/s
Iteration  29: 876112.137 ops/s
Iteration  30: 874672.840 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromKeySet":
  872150.936 ±(99.9%) 2549.105 ops/s [Average]
  (min, avg, max) = (859766.265, 872150.936, 878232.235), stdev = 3815.380
  CI (99.9%): [869601.831, 874700.040] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeFromKeySet  thrpt   30  872150.936 ± 2549.105  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 550250.945 ops/s
# Warmup Iteration   2: 650100.994 ops/s
# Warmup Iteration   3: 826242.439 ops/s
# Warmup Iteration   4: 823578.285 ops/s
# Warmup Iteration   5: 829516.724 ops/s
# Warmup Iteration   6: 828223.176 ops/s
# Warmup Iteration   7: 824208.904 ops/s
# Warmup Iteration   8: 831613.454 ops/s
# Warmup Iteration   9: 701693.403 ops/s
# Warmup Iteration  10: 822700.560 ops/s
# Warmup Iteration  11: 825984.553 ops/s
# Warmup Iteration  12: 826578.392 ops/s
# Warmup Iteration  13: 829884.162 ops/s
# Warmup Iteration  14: 818929.948 ops/s
# Warmup Iteration  15: 829739.735 ops/s
# Warmup Iteration  16: 826484.336 ops/s
# Warmup Iteration  17: 868220.251 ops/s
# Warmup Iteration  18: 870377.707 ops/s
# Warmup Iteration  19: 873602.791 ops/s
# Warmup Iteration  20: 871464.431 ops/s
# Warmup Iteration  21: 872451.976 ops/s
# Warmup Iteration  22: 870049.088 ops/s
# Warmup Iteration  23: 864463.050 ops/s
# Warmup Iteration  24: 871655.420 ops/s
# Warmup Iteration  25: 872077.910 ops/s
# Warmup Iteration  26: 869702.572 ops/s
# Warmup Iteration  27: 873871.663 ops/s
# Warmup Iteration  28: 870824.505 ops/s
# Warmup Iteration  29: 871115.488 ops/s
# Warmup Iteration  30: 870975.457 ops/s
Iteration   1: 870399.275 ops/s
Iteration   2: 866384.265 ops/s
Iteration   3: 866707.097 ops/s
Iteration   4: 872312.608 ops/s
Iteration   5: 867225.773 ops/s
Iteration   6: 871036.608 ops/s
Iteration   7: 875025.146 ops/s
Iteration   8: 876584.017 ops/s
Iteration   9: 869458.992 ops/s
Iteration  10: 876257.762 ops/s
Iteration  11: 872089.370 ops/s
Iteration  12: 877454.942 ops/s
Iteration  13: 873595.905 ops/s
Iteration  14: 870589.971 ops/s
Iteration  15: 870393.295 ops/s
Iteration  16: 879706.536 ops/s
Iteration  17: 871353.669 ops/s
Iteration  18: 871155.688 ops/s
Iteration  19: 876867.181 ops/s
Iteration  20: 877629.065 ops/s
Iteration  21: 870728.291 ops/s
Iteration  22: 867371.109 ops/s
Iteration  23: 871782.722 ops/s
Iteration  24: 878704.373 ops/s
Iteration  25: 869733.571 ops/s
Iteration  26: 877288.324 ops/s
Iteration  27: 877299.680 ops/s
Iteration  28: 871603.314 ops/s
Iteration  29: 873765.494 ops/s
Iteration  30: 873664.153 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeFromValues":
  872805.606 ±(99.9%) 2509.878 ops/s [Average]
  (min, avg, max) = (866384.265, 872805.606, 879706.536), stdev = 3756.667
  CI (99.9%): [870295.729, 875315.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeFromValues  thrpt   30  872805.606 ± 2509.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471366.200 ops/s
# Warmup Iteration   2: 637297.358 ops/s
# Warmup Iteration   3: 767457.810 ops/s
# Warmup Iteration   4: 768811.480 ops/s
# Warmup Iteration   5: 771983.994 ops/s
# Warmup Iteration   6: 772852.394 ops/s
# Warmup Iteration   7: 727888.163 ops/s
# Warmup Iteration   8: 691118.400 ops/s
# Warmup Iteration   9: 776242.511 ops/s
# Warmup Iteration  10: 774016.599 ops/s
# Warmup Iteration  11: 772198.695 ops/s
# Warmup Iteration  12: 770761.089 ops/s
# Warmup Iteration  13: 770191.303 ops/s
# Warmup Iteration  14: 769974.376 ops/s
# Warmup Iteration  15: 771130.318 ops/s
# Warmup Iteration  16: 762607.448 ops/s
# Warmup Iteration  17: 806376.854 ops/s
# Warmup Iteration  18: 812953.324 ops/s
# Warmup Iteration  19: 811241.753 ops/s
# Warmup Iteration  20: 811474.223 ops/s
# Warmup Iteration  21: 810086.177 ops/s
# Warmup Iteration  22: 807118.314 ops/s
# Warmup Iteration  23: 802135.486 ops/s
# Warmup Iteration  24: 811395.461 ops/s
# Warmup Iteration  25: 809113.457 ops/s
# Warmup Iteration  26: 809170.062 ops/s
# Warmup Iteration  27: 806552.340 ops/s
# Warmup Iteration  28: 808612.614 ops/s
# Warmup Iteration  29: 806981.285 ops/s
# Warmup Iteration  30: 808939.429 ops/s
Iteration   1: 813970.940 ops/s
Iteration   2: 807802.853 ops/s
Iteration   3: 796374.557 ops/s
Iteration   4: 800715.676 ops/s
Iteration   5: 809872.672 ops/s
Iteration   6: 807651.256 ops/s
Iteration   7: 809634.770 ops/s
Iteration   8: 812022.234 ops/s
Iteration   9: 813728.953 ops/s
Iteration  10: 811444.494 ops/s
Iteration  11: 804512.946 ops/s
Iteration  12: 807400.127 ops/s
Iteration  13: 802971.171 ops/s
Iteration  14: 800643.456 ops/s
Iteration  15: 808196.677 ops/s
Iteration  16: 809438.027 ops/s
Iteration  17: 805325.134 ops/s
Iteration  18: 804410.822 ops/s
Iteration  19: 803739.700 ops/s
Iteration  20: 812654.048 ops/s
Iteration  21: 806372.602 ops/s
Iteration  22: 809053.388 ops/s
Iteration  23: 807511.649 ops/s
Iteration  24: 809175.135 ops/s
Iteration  25: 806366.888 ops/s
Iteration  26: 811997.983 ops/s
Iteration  27: 810382.173 ops/s
Iteration  28: 811506.032 ops/s
Iteration  29: 805680.223 ops/s
Iteration  30: 805777.781 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeIf":
  807544.479 ±(99.9%) 2749.217 ops/s [Average]
  (min, avg, max) = (796374.557, 807544.479, 813970.940), stdev = 4114.899
  CI (99.9%): [804795.262, 810293.696] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeIf  thrpt   30  807544.479 ± 2749.217  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 469565.269 ops/s
# Warmup Iteration   2: 641740.281 ops/s
# Warmup Iteration   3: 769762.583 ops/s
# Warmup Iteration   4: 772141.260 ops/s
# Warmup Iteration   5: 770194.038 ops/s
# Warmup Iteration   6: 770160.622 ops/s
# Warmup Iteration   7: 724201.019 ops/s
# Warmup Iteration   8: 693878.809 ops/s
# Warmup Iteration   9: 770880.477 ops/s
# Warmup Iteration  10: 769818.991 ops/s
# Warmup Iteration  11: 771374.209 ops/s
# Warmup Iteration  12: 772381.752 ops/s
# Warmup Iteration  13: 769431.507 ops/s
# Warmup Iteration  14: 770471.876 ops/s
# Warmup Iteration  15: 767438.339 ops/s
# Warmup Iteration  16: 767999.617 ops/s
# Warmup Iteration  17: 809558.313 ops/s
# Warmup Iteration  18: 810385.377 ops/s
# Warmup Iteration  19: 814948.022 ops/s
# Warmup Iteration  20: 811968.364 ops/s
# Warmup Iteration  21: 809950.073 ops/s
# Warmup Iteration  22: 811725.728 ops/s
# Warmup Iteration  23: 811208.113 ops/s
# Warmup Iteration  24: 807411.410 ops/s
# Warmup Iteration  25: 808231.006 ops/s
# Warmup Iteration  26: 806987.011 ops/s
# Warmup Iteration  27: 809537.101 ops/s
# Warmup Iteration  28: 807633.777 ops/s
# Warmup Iteration  29: 806759.658 ops/s
# Warmup Iteration  30: 807102.127 ops/s
Iteration   1: 803595.455 ops/s
Iteration   2: 806390.140 ops/s
Iteration   3: 807599.766 ops/s
Iteration   4: 804707.086 ops/s
Iteration   5: 812987.093 ops/s
Iteration   6: 807877.108 ops/s
Iteration   7: 810240.545 ops/s
Iteration   8: 806556.847 ops/s
Iteration   9: 803564.641 ops/s
Iteration  10: 808351.557 ops/s
Iteration  11: 802865.627 ops/s
Iteration  12: 810551.466 ops/s
Iteration  13: 804236.456 ops/s
Iteration  14: 811126.638 ops/s
Iteration  15: 813271.445 ops/s
Iteration  16: 808731.407 ops/s
Iteration  17: 807154.036 ops/s
Iteration  18: 808684.358 ops/s
Iteration  19: 810699.757 ops/s
Iteration  20: 812054.363 ops/s
Iteration  21: 805578.354 ops/s
Iteration  22: 805331.233 ops/s
Iteration  23: 799720.620 ops/s
Iteration  24: 800599.220 ops/s
Iteration  25: 804416.797 ops/s
Iteration  26: 805608.401 ops/s
Iteration  27: 804456.386 ops/s
Iteration  28: 817420.486 ops/s
Iteration  29: 815589.176 ops/s
Iteration  30: 810417.372 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeKey":
  807679.461 ±(99.9%) 2805.500 ops/s [Average]
  (min, avg, max) = (799720.620, 807679.461, 817420.486), stdev = 4199.141
  CI (99.9%): [804873.961, 810484.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeKey  thrpt   30  807679.461 ± 2805.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 548605.683 ops/s
# Warmup Iteration   2: 647845.085 ops/s
# Warmup Iteration   3: 820751.703 ops/s
# Warmup Iteration   4: 816362.722 ops/s
# Warmup Iteration   5: 820512.258 ops/s
# Warmup Iteration   6: 818780.248 ops/s
# Warmup Iteration   7: 818856.090 ops/s
# Warmup Iteration   8: 819922.007 ops/s
# Warmup Iteration   9: 716468.038 ops/s
# Warmup Iteration  10: 794411.485 ops/s
# Warmup Iteration  11: 819432.663 ops/s
# Warmup Iteration  12: 819155.242 ops/s
# Warmup Iteration  13: 821543.798 ops/s
# Warmup Iteration  14: 817316.588 ops/s
# Warmup Iteration  15: 822087.976 ops/s
# Warmup Iteration  16: 816763.812 ops/s
# Warmup Iteration  17: 864343.143 ops/s
# Warmup Iteration  18: 863858.372 ops/s
# Warmup Iteration  19: 870192.824 ops/s
# Warmup Iteration  20: 866086.282 ops/s
# Warmup Iteration  21: 864825.675 ops/s
# Warmup Iteration  22: 862721.277 ops/s
# Warmup Iteration  23: 859418.627 ops/s
# Warmup Iteration  24: 859719.722 ops/s
# Warmup Iteration  25: 864729.361 ops/s
# Warmup Iteration  26: 865584.589 ops/s
# Warmup Iteration  27: 867788.591 ops/s
# Warmup Iteration  28: 860409.934 ops/s
# Warmup Iteration  29: 860799.224 ops/s
# Warmup Iteration  30: 859095.339 ops/s
Iteration   1: 860354.295 ops/s
Iteration   2: 866827.523 ops/s
Iteration   3: 867912.767 ops/s
Iteration   4: 868194.254 ops/s
Iteration   5: 865142.741 ops/s
Iteration   6: 864301.304 ops/s
Iteration   7: 868522.264 ops/s
Iteration   8: 870627.511 ops/s
Iteration   9: 869277.813 ops/s
Iteration  10: 864598.913 ops/s
Iteration  11: 866392.226 ops/s
Iteration  12: 864883.566 ops/s
Iteration  13: 868501.805 ops/s
Iteration  14: 867760.157 ops/s
Iteration  15: 868068.643 ops/s
Iteration  16: 870669.311 ops/s
Iteration  17: 872032.466 ops/s
Iteration  18: 865160.123 ops/s
Iteration  19: 867654.424 ops/s
Iteration  20: 866229.810 ops/s
Iteration  21: 862813.027 ops/s
Iteration  22: 872823.072 ops/s
Iteration  23: 860476.240 ops/s
Iteration  24: 857894.329 ops/s
Iteration  25: 868989.854 ops/s
Iteration  26: 867060.059 ops/s
Iteration  27: 865678.512 ops/s
Iteration  28: 866225.229 ops/s
Iteration  29: 861609.186 ops/s
Iteration  30: 863146.886 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromKeySet":
  866327.610 ±(99.9%) 2318.405 ops/s [Average]
  (min, avg, max) = (857894.329, 866327.610, 872823.072), stdev = 3470.080
  CI (99.9%): [864009.205, 868646.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromKeySet  thrpt   30  866327.610 ± 2318.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552047.912 ops/s
# Warmup Iteration   2: 647937.648 ops/s
# Warmup Iteration   3: 826325.309 ops/s
# Warmup Iteration   4: 827440.135 ops/s
# Warmup Iteration   5: 825873.460 ops/s
# Warmup Iteration   6: 822145.508 ops/s
# Warmup Iteration   7: 828696.745 ops/s
# Warmup Iteration   8: 827366.297 ops/s
# Warmup Iteration   9: 703549.727 ops/s
# Warmup Iteration  10: 810203.758 ops/s
# Warmup Iteration  11: 826656.705 ops/s
# Warmup Iteration  12: 826669.468 ops/s
# Warmup Iteration  13: 827183.492 ops/s
# Warmup Iteration  14: 827584.645 ops/s
# Warmup Iteration  15: 818415.584 ops/s
# Warmup Iteration  16: 823131.845 ops/s
# Warmup Iteration  17: 868920.308 ops/s
# Warmup Iteration  18: 868390.509 ops/s
# Warmup Iteration  19: 867069.638 ops/s
# Warmup Iteration  20: 863881.598 ops/s
# Warmup Iteration  21: 863256.911 ops/s
# Warmup Iteration  22: 866307.007 ops/s
# Warmup Iteration  23: 866324.355 ops/s
# Warmup Iteration  24: 864770.774 ops/s
# Warmup Iteration  25: 861297.991 ops/s
# Warmup Iteration  26: 861260.861 ops/s
# Warmup Iteration  27: 865654.419 ops/s
# Warmup Iteration  28: 870926.068 ops/s
# Warmup Iteration  29: 865890.724 ops/s
# Warmup Iteration  30: 864624.996 ops/s
Iteration   1: 869344.159 ops/s
Iteration   2: 868716.893 ops/s
Iteration   3: 863681.196 ops/s
Iteration   4: 868120.212 ops/s
Iteration   5: 870784.694 ops/s
Iteration   6: 864176.025 ops/s
Iteration   7: 864898.746 ops/s
Iteration   8: 869948.715 ops/s
Iteration   9: 865363.221 ops/s
Iteration  10: 861956.904 ops/s
Iteration  11: 866779.252 ops/s
Iteration  12: 871143.723 ops/s
Iteration  13: 871872.223 ops/s
Iteration  14: 872655.983 ops/s
Iteration  15: 868793.969 ops/s
Iteration  16: 874028.024 ops/s
Iteration  17: 870981.961 ops/s
Iteration  18: 865365.199 ops/s
Iteration  19: 868426.033 ops/s
Iteration  20: 872659.280 ops/s
Iteration  21: 872756.703 ops/s
Iteration  22: 876406.773 ops/s
Iteration  23: 868775.223 ops/s
Iteration  24: 870571.882 ops/s
Iteration  25: 871594.758 ops/s
Iteration  26: 869140.403 ops/s
Iteration  27: 871424.852 ops/s
Iteration  28: 869367.021 ops/s
Iteration  29: 871070.814 ops/s
Iteration  30: 862649.056 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromValues":
  869115.130 ±(99.9%) 2327.948 ops/s [Average]
  (min, avg, max) = (861956.904, 869115.130, 876406.773), stdev = 3484.363
  CI (99.9%): [866787.182, 871443.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeNullFromValues  thrpt   30  869115.130 ± 2327.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 470848.738 ops/s
# Warmup Iteration   2: 632607.930 ops/s
# Warmup Iteration   3: 756757.302 ops/s
# Warmup Iteration   4: 757226.802 ops/s
# Warmup Iteration   5: 754649.293 ops/s
# Warmup Iteration   6: 752511.874 ops/s
# Warmup Iteration   7: 734878.399 ops/s
# Warmup Iteration   8: 654691.716 ops/s
# Warmup Iteration   9: 758039.282 ops/s
# Warmup Iteration  10: 765364.408 ops/s
# Warmup Iteration  11: 757816.253 ops/s
# Warmup Iteration  12: 755017.868 ops/s
# Warmup Iteration  13: 751664.372 ops/s
# Warmup Iteration  14: 754392.363 ops/s
# Warmup Iteration  15: 759119.717 ops/s
# Warmup Iteration  16: 758782.254 ops/s
# Warmup Iteration  17: 795336.216 ops/s
# Warmup Iteration  18: 793316.757 ops/s
# Warmup Iteration  19: 796732.196 ops/s
# Warmup Iteration  20: 790771.053 ops/s
# Warmup Iteration  21: 793899.840 ops/s
# Warmup Iteration  22: 795015.659 ops/s
# Warmup Iteration  23: 791763.167 ops/s
# Warmup Iteration  24: 788084.583 ops/s
# Warmup Iteration  25: 789063.994 ops/s
# Warmup Iteration  26: 788106.348 ops/s
# Warmup Iteration  27: 792163.353 ops/s
# Warmup Iteration  28: 789780.781 ops/s
# Warmup Iteration  29: 788516.800 ops/s
# Warmup Iteration  30: 784788.832 ops/s
Iteration   1: 794416.127 ops/s
Iteration   2: 792106.447 ops/s
Iteration   3: 790898.535 ops/s
Iteration   4: 792017.704 ops/s
Iteration   5: 786846.761 ops/s
Iteration   6: 797487.941 ops/s
Iteration   7: 793015.918 ops/s
Iteration   8: 785985.372 ops/s
Iteration   9: 792204.902 ops/s
Iteration  10: 791038.427 ops/s
Iteration  11: 798054.071 ops/s
Iteration  12: 790320.874 ops/s
Iteration  13: 799761.167 ops/s
Iteration  14: 790897.373 ops/s
Iteration  15: 793408.829 ops/s
Iteration  16: 799063.697 ops/s
Iteration  17: 790430.702 ops/s
Iteration  18: 795929.571 ops/s
Iteration  19: 794809.953 ops/s
Iteration  20: 797566.365 ops/s
Iteration  21: 795882.546 ops/s
Iteration  22: 795611.065 ops/s
Iteration  23: 788863.968 ops/s
Iteration  24: 793228.908 ops/s
Iteration  25: 792249.224 ops/s
Iteration  26: 794371.796 ops/s
Iteration  27: 785210.607 ops/s
Iteration  28: 793599.340 ops/s
Iteration  29: 797461.781 ops/s
Iteration  30: 794945.184 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_removeObject":
  793256.172 ±(99.9%) 2470.319 ops/s [Average]
  (min, avg, max) = (785210.607, 793256.172, 799761.167), stdev = 3697.457
  CI (99.9%): [790785.853, 795726.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_removeObject  thrpt   30  793256.172 ± 2470.319  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromEntrySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromEntrySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502848.165 ops/s
# Warmup Iteration   2: 640877.919 ops/s
# Warmup Iteration   3: 788636.015 ops/s
# Warmup Iteration   4: 781379.730 ops/s
# Warmup Iteration   5: 784604.936 ops/s
# Warmup Iteration   6: 785671.649 ops/s
# Warmup Iteration   7: 784267.959 ops/s
# Warmup Iteration   8: 740120.436 ops/s
# Warmup Iteration   9: 702850.878 ops/s
# Warmup Iteration  10: 786789.800 ops/s
# Warmup Iteration  11: 791391.608 ops/s
# Warmup Iteration  12: 788976.960 ops/s
# Warmup Iteration  13: 787677.195 ops/s
# Warmup Iteration  14: 781201.787 ops/s
# Warmup Iteration  15: 788852.025 ops/s
# Warmup Iteration  16: 787486.646 ops/s
# Warmup Iteration  17: 830807.237 ops/s
# Warmup Iteration  18: 827852.167 ops/s
# Warmup Iteration  19: 828006.584 ops/s
# Warmup Iteration  20: 824900.083 ops/s
# Warmup Iteration  21: 821693.243 ops/s
# Warmup Iteration  22: 824724.654 ops/s
# Warmup Iteration  23: 824915.004 ops/s
# Warmup Iteration  24: 825414.360 ops/s
# Warmup Iteration  25: 827147.636 ops/s
# Warmup Iteration  26: 826211.377 ops/s
# Warmup Iteration  27: 824602.700 ops/s
# Warmup Iteration  28: 822641.361 ops/s
# Warmup Iteration  29: 820703.116 ops/s
# Warmup Iteration  30: 828019.729 ops/s
Iteration   1: 825299.907 ops/s
Iteration   2: 825141.103 ops/s
Iteration   3: 826777.673 ops/s
Iteration   4: 825845.404 ops/s
Iteration   5: 826701.383 ops/s
Iteration   6: 826592.908 ops/s
Iteration   7: 826789.029 ops/s
Iteration   8: 825767.939 ops/s
Iteration   9: 825557.195 ops/s
Iteration  10: 831604.956 ops/s
Iteration  11: 825974.351 ops/s
Iteration  12: 826096.505 ops/s
Iteration  13: 825592.519 ops/s
Iteration  14: 825452.245 ops/s
Iteration  15: 825281.985 ops/s
Iteration  16: 826211.048 ops/s
Iteration  17: 823848.683 ops/s
Iteration  18: 821906.140 ops/s
Iteration  19: 823540.270 ops/s
Iteration  20: 828678.923 ops/s
Iteration  21: 823112.081 ops/s
Iteration  22: 822867.728 ops/s
Iteration  23: 824159.993 ops/s
Iteration  24: 825086.419 ops/s
Iteration  25: 818554.977 ops/s
Iteration  26: 825182.406 ops/s
Iteration  27: 819423.751 ops/s
Iteration  28: 819707.394 ops/s
Iteration  29: 819349.756 ops/s
Iteration  30: 818736.911 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromEntrySet":
  824494.719 ±(99.9%) 2004.159 ops/s [Average]
  (min, avg, max) = (818554.977, 824494.719, 831604.956), stdev = 2999.731
  CI (99.9%): [822490.560, 826498.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromEntrySet  thrpt   30  824494.719 ± 2004.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539153.330 ops/s
# Warmup Iteration   2: 661802.987 ops/s
# Warmup Iteration   3: 839238.979 ops/s
# Warmup Iteration   4: 832168.913 ops/s
# Warmup Iteration   5: 837949.432 ops/s
# Warmup Iteration   6: 839794.621 ops/s
# Warmup Iteration   7: 839272.848 ops/s
# Warmup Iteration   8: 838604.013 ops/s
# Warmup Iteration   9: 700192.981 ops/s
# Warmup Iteration  10: 836061.024 ops/s
# Warmup Iteration  11: 838355.578 ops/s
# Warmup Iteration  12: 835208.449 ops/s
# Warmup Iteration  13: 841805.909 ops/s
# Warmup Iteration  14: 837837.225 ops/s
# Warmup Iteration  15: 836943.155 ops/s
# Warmup Iteration  16: 839391.955 ops/s
# Warmup Iteration  17: 851481.318 ops/s
# Warmup Iteration  18: 859349.968 ops/s
# Warmup Iteration  19: 851842.552 ops/s
# Warmup Iteration  20: 852185.510 ops/s
# Warmup Iteration  21: 853877.507 ops/s
# Warmup Iteration  22: 854603.750 ops/s
# Warmup Iteration  23: 853293.046 ops/s
# Warmup Iteration  24: 853555.790 ops/s
# Warmup Iteration  25: 855962.209 ops/s
# Warmup Iteration  26: 855695.089 ops/s
# Warmup Iteration  27: 852719.897 ops/s
# Warmup Iteration  28: 851302.595 ops/s
# Warmup Iteration  29: 850762.196 ops/s
# Warmup Iteration  30: 852673.792 ops/s
Iteration   1: 856712.051 ops/s
Iteration   2: 853348.280 ops/s
Iteration   3: 852370.029 ops/s
Iteration   4: 853781.300 ops/s
Iteration   5: 859308.256 ops/s
Iteration   6: 852732.648 ops/s
Iteration   7: 853588.853 ops/s
Iteration   8: 855698.790 ops/s
Iteration   9: 858014.335 ops/s
Iteration  10: 850656.673 ops/s
Iteration  11: 857167.133 ops/s
Iteration  12: 849933.637 ops/s
Iteration  13: 857558.343 ops/s
Iteration  14: 855096.309 ops/s
Iteration  15: 855958.825 ops/s
Iteration  16: 853800.131 ops/s
Iteration  17: 850421.521 ops/s
Iteration  18: 853223.787 ops/s
Iteration  19: 855058.218 ops/s
Iteration  20: 857004.682 ops/s
Iteration  21: 859223.441 ops/s
Iteration  22: 855718.742 ops/s
Iteration  23: 851652.823 ops/s
Iteration  24: 849639.192 ops/s
Iteration  25: 836307.093 ops/s
Iteration  26: 857503.340 ops/s
Iteration  27: 849652.942 ops/s
Iteration  28: 849832.067 ops/s
Iteration  29: 851215.901 ops/s
Iteration  30: 853749.897 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet":
  853530.975 ±(99.9%) 2925.520 ops/s [Average]
  (min, avg, max) = (836307.093, 853530.975, 859308.256), stdev = 4378.782
  CI (99.9%): [850605.454, 856456.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet  thrpt   30  853530.975 ± 2925.520  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160418463.050 ops/s
# Warmup Iteration   2: 303114238.020 ops/s
# Warmup Iteration   3: 242461217.856 ops/s
# Warmup Iteration   4: 307066763.641 ops/s
# Warmup Iteration   5: 306600683.780 ops/s
# Warmup Iteration   6: 306478821.205 ops/s
# Warmup Iteration   7: 306237116.813 ops/s
# Warmup Iteration   8: 303473992.799 ops/s
# Warmup Iteration   9: 306133982.746 ops/s
# Warmup Iteration  10: 303745161.426 ops/s
# Warmup Iteration  11: 306459099.758 ops/s
# Warmup Iteration  12: 302472454.303 ops/s
# Warmup Iteration  13: 300729189.447 ops/s
# Warmup Iteration  14: 305396224.473 ops/s
# Warmup Iteration  15: 305966554.781 ops/s
# Warmup Iteration  16: 303856282.959 ops/s
# Warmup Iteration  17: 304445130.680 ops/s
# Warmup Iteration  18: 301947228.220 ops/s
# Warmup Iteration  19: 303713363.477 ops/s
# Warmup Iteration  20: 302905134.161 ops/s
# Warmup Iteration  21: 303882684.619 ops/s
# Warmup Iteration  22: 303390795.957 ops/s
# Warmup Iteration  23: 301377296.688 ops/s
# Warmup Iteration  24: 302288701.288 ops/s
# Warmup Iteration  25: 302515698.397 ops/s
# Warmup Iteration  26: 302819409.754 ops/s
# Warmup Iteration  27: 296404658.841 ops/s
# Warmup Iteration  28: 301735941.380 ops/s
# Warmup Iteration  29: 303548004.597 ops/s
# Warmup Iteration  30: 301443296.856 ops/s
Iteration   1: 302881560.728 ops/s
Iteration   2: 304677056.222 ops/s
Iteration   3: 302303611.963 ops/s
Iteration   4: 304519618.793 ops/s
Iteration   5: 302728983.127 ops/s
Iteration   6: 304264187.622 ops/s
Iteration   7: 298378683.922 ops/s
Iteration   8: 303974545.215 ops/s
Iteration   9: 305325894.555 ops/s
Iteration  10: 304507531.760 ops/s
Iteration  11: 302218213.448 ops/s
Iteration  12: 302373625.388 ops/s
Iteration  13: 301777411.879 ops/s
Iteration  14: 306459580.914 ops/s
Iteration  15: 304051423.871 ops/s
Iteration  16: 304828167.120 ops/s
Iteration  17: 305306732.313 ops/s
Iteration  18: 303612721.617 ops/s
Iteration  19: 305629731.595 ops/s
Iteration  20: 301664692.759 ops/s
Iteration  21: 303439980.429 ops/s
Iteration  22: 305723745.857 ops/s
Iteration  23: 304809193.613 ops/s
Iteration  24: 305350271.497 ops/s
Iteration  25: 299589726.867 ops/s
Iteration  26: 299968945.189 ops/s
Iteration  27: 304568415.876 ops/s
Iteration  28: 303319826.787 ops/s
Iteration  29: 303340234.229 ops/s
Iteration  30: 303139332.557 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision":
  303491121.590 ±(99.9%) 1260829.054 ops/s [Average]
  (min, avg, max) = (298378683.922, 303491121.590, 306459580.914), stdev = 1887149.715
  CI (99.9%): [302230292.536, 304751950.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt          Score         Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromKeySet_null_collision  thrpt   30  303491121.590 ± 1260829.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525274.788 ops/s
# Warmup Iteration   2: 642053.438 ops/s
# Warmup Iteration   3: 810319.603 ops/s
# Warmup Iteration   4: 807297.567 ops/s
# Warmup Iteration   5: 809901.723 ops/s
# Warmup Iteration   6: 815760.565 ops/s
# Warmup Iteration   7: 811224.905 ops/s
# Warmup Iteration   8: 810635.748 ops/s
# Warmup Iteration   9: 673003.128 ops/s
# Warmup Iteration  10: 814360.352 ops/s
# Warmup Iteration  11: 809703.575 ops/s
# Warmup Iteration  12: 813505.100 ops/s
# Warmup Iteration  13: 813470.890 ops/s
# Warmup Iteration  14: 813769.087 ops/s
# Warmup Iteration  15: 815168.893 ops/s
# Warmup Iteration  16: 815202.638 ops/s
# Warmup Iteration  17: 854615.469 ops/s
# Warmup Iteration  18: 854190.455 ops/s
# Warmup Iteration  19: 854675.763 ops/s
# Warmup Iteration  20: 850596.258 ops/s
# Warmup Iteration  21: 852982.603 ops/s
# Warmup Iteration  22: 854890.007 ops/s
# Warmup Iteration  23: 855347.074 ops/s
# Warmup Iteration  24: 857198.088 ops/s
# Warmup Iteration  25: 854803.440 ops/s
# Warmup Iteration  26: 857395.410 ops/s
# Warmup Iteration  27: 855696.869 ops/s
# Warmup Iteration  28: 852822.331 ops/s
# Warmup Iteration  29: 856313.447 ops/s
# Warmup Iteration  30: 851231.379 ops/s
Iteration   1: 855540.348 ops/s
Iteration   2: 853066.408 ops/s
Iteration   3: 851703.801 ops/s
Iteration   4: 853345.821 ops/s
Iteration   5: 850993.863 ops/s
Iteration   6: 852796.968 ops/s
Iteration   7: 856207.947 ops/s
Iteration   8: 857325.909 ops/s
Iteration   9: 851367.338 ops/s
Iteration  10: 851272.305 ops/s
Iteration  11: 849647.852 ops/s
Iteration  12: 852179.872 ops/s
Iteration  13: 851603.258 ops/s
Iteration  14: 853557.927 ops/s
Iteration  15: 853873.644 ops/s
Iteration  16: 855611.235 ops/s
Iteration  17: 852015.483 ops/s
Iteration  18: 855097.981 ops/s
Iteration  19: 854146.484 ops/s
Iteration  20: 853246.114 ops/s
Iteration  21: 849230.183 ops/s
Iteration  22: 851339.162 ops/s
Iteration  23: 851711.638 ops/s
Iteration  24: 853870.887 ops/s
Iteration  25: 850535.899 ops/s
Iteration  26: 850299.748 ops/s
Iteration  27: 848964.298 ops/s
Iteration  28: 858482.932 ops/s
Iteration  29: 849736.655 ops/s
Iteration  30: 851562.033 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromValues":
  852677.800 ±(99.9%) 1589.690 ops/s [Average]
  (min, avg, max) = (848964.298, 852677.800, 858482.932), stdev = 2379.373
  CI (99.9%): [851088.110, 854267.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_retainAllFromValues  thrpt   30  852677.800 ± 1589.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 945825.259 ops/s
# Warmup Iteration   2: 2424346.904 ops/s
# Warmup Iteration   3: 2507253.077 ops/s
# Warmup Iteration   4: 2056963.432 ops/s
# Warmup Iteration   5: 2507676.822 ops/s
# Warmup Iteration   6: 2522715.287 ops/s
# Warmup Iteration   7: 2521991.072 ops/s
# Warmup Iteration   8: 2502167.359 ops/s
# Warmup Iteration   9: 2503894.832 ops/s
# Warmup Iteration  10: 2501811.054 ops/s
# Warmup Iteration  11: 2498976.520 ops/s
# Warmup Iteration  12: 2491183.089 ops/s
# Warmup Iteration  13: 2515176.697 ops/s
# Warmup Iteration  14: 2506494.670 ops/s
# Warmup Iteration  15: 2502386.022 ops/s
# Warmup Iteration  16: 2512265.415 ops/s
# Warmup Iteration  17: 2511025.693 ops/s
# Warmup Iteration  18: 2522945.889 ops/s
# Warmup Iteration  19: 2502114.239 ops/s
# Warmup Iteration  20: 2518566.077 ops/s
# Warmup Iteration  21: 2518756.575 ops/s
# Warmup Iteration  22: 2513443.331 ops/s
# Warmup Iteration  23: 2509690.189 ops/s
# Warmup Iteration  24: 2518033.905 ops/s
# Warmup Iteration  25: 2501477.443 ops/s
# Warmup Iteration  26: 2499989.960 ops/s
# Warmup Iteration  27: 2511908.667 ops/s
# Warmup Iteration  28: 2503061.407 ops/s
# Warmup Iteration  29: 2521706.873 ops/s
# Warmup Iteration  30: 2513314.517 ops/s
Iteration   1: 2517378.310 ops/s
Iteration   2: 2511620.565 ops/s
Iteration   3: 2515640.415 ops/s
Iteration   4: 2519677.654 ops/s
Iteration   5: 2498246.949 ops/s
Iteration   6: 2510337.872 ops/s
Iteration   7: 2510838.858 ops/s
Iteration   8: 2511073.399 ops/s
Iteration   9: 2519111.664 ops/s
Iteration  10: 2506940.346 ops/s
Iteration  11: 2514833.801 ops/s
Iteration  12: 2524530.894 ops/s
Iteration  13: 2527990.301 ops/s
Iteration  14: 2524699.510 ops/s
Iteration  15: 2525549.285 ops/s
Iteration  16: 2500301.889 ops/s
Iteration  17: 2525005.939 ops/s
Iteration  18: 2522979.302 ops/s
Iteration  19: 2502826.146 ops/s
Iteration  20: 2514230.125 ops/s
Iteration  21: 2519227.715 ops/s
Iteration  22: 2511488.620 ops/s
Iteration  23: 2517351.917 ops/s
Iteration  24: 2516815.287 ops/s
Iteration  25: 2505566.232 ops/s
Iteration  26: 2527657.670 ops/s
Iteration  27: 2519418.257 ops/s
Iteration  28: 2516336.855 ops/s
Iteration  29: 2503226.517 ops/s
Iteration  30: 2509263.725 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select":
  2515005.534 ±(99.9%) 5451.874 ops/s [Average]
  (min, avg, max) = (2498246.949, 2515005.534, 2527990.301), stdev = 8160.109
  CI (99.9%): [2509553.660, 2520457.408] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_select  thrpt   30  2515005.534 ± 5451.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectInstancesOf_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectInstancesOf_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718640.503 ops/s
# Warmup Iteration   2: 1513755.662 ops/s
# Warmup Iteration   3: 1639708.552 ops/s
# Warmup Iteration   4: 1646060.972 ops/s
# Warmup Iteration   5: 1343046.306 ops/s
# Warmup Iteration   6: 1632173.775 ops/s
# Warmup Iteration   7: 1633165.381 ops/s
# Warmup Iteration   8: 1636081.032 ops/s
# Warmup Iteration   9: 1627032.370 ops/s
# Warmup Iteration  10: 1619189.819 ops/s
# Warmup Iteration  11: 1636597.141 ops/s
# Warmup Iteration  12: 1635438.312 ops/s
# Warmup Iteration  13: 1632746.545 ops/s
# Warmup Iteration  14: 1640676.520 ops/s
# Warmup Iteration  15: 1642258.012 ops/s
# Warmup Iteration  16: 1636859.888 ops/s
# Warmup Iteration  17: 1641106.035 ops/s
# Warmup Iteration  18: 1644925.537 ops/s
# Warmup Iteration  19: 1641191.204 ops/s
# Warmup Iteration  20: 1641358.537 ops/s
# Warmup Iteration  21: 1641238.172 ops/s
# Warmup Iteration  22: 1632993.741 ops/s
# Warmup Iteration  23: 1631916.440 ops/s
# Warmup Iteration  24: 1642259.532 ops/s
# Warmup Iteration  25: 1628408.144 ops/s
# Warmup Iteration  26: 1634077.511 ops/s
# Warmup Iteration  27: 1633000.854 ops/s
# Warmup Iteration  28: 1633124.214 ops/s
# Warmup Iteration  29: 1640176.450 ops/s
# Warmup Iteration  30: 1631505.020 ops/s
Iteration   1: 1631754.420 ops/s
Iteration   2: 1637405.962 ops/s
Iteration   3: 1639620.904 ops/s
Iteration   4: 1629109.883 ops/s
Iteration   5: 1635385.347 ops/s
Iteration   6: 1625865.612 ops/s
Iteration   7: 1640429.397 ops/s
Iteration   8: 1638686.966 ops/s
Iteration   9: 1638075.687 ops/s
Iteration  10: 1647879.739 ops/s
Iteration  11: 1649229.651 ops/s
Iteration  12: 1636076.756 ops/s
Iteration  13: 1644061.772 ops/s
Iteration  14: 1630276.668 ops/s
Iteration  15: 1648279.960 ops/s
Iteration  16: 1634088.984 ops/s
Iteration  17: 1638746.297 ops/s
Iteration  18: 1648544.488 ops/s
Iteration  19: 1646107.083 ops/s
Iteration  20: 1631448.178 ops/s
Iteration  21: 1644678.753 ops/s
Iteration  22: 1640530.059 ops/s
Iteration  23: 1645779.321 ops/s
Iteration  24: 1644809.969 ops/s
Iteration  25: 1643348.889 ops/s
Iteration  26: 1640781.347 ops/s
Iteration  27: 1639677.502 ops/s
Iteration  28: 1644159.255 ops/s
Iteration  29: 1649272.525 ops/s
Iteration  30: 1648286.466 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectInstancesOf_value":
  1640413.261 ±(99.9%) 4368.480 ops/s [Average]
  (min, avg, max) = (1625865.612, 1640413.261, 1649272.525), stdev = 6538.535
  CI (99.9%): [1636044.782, 1644781.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_selectInstancesOf_value  thrpt   30  1640413.261 ± 4368.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561116.795 ops/s
# Warmup Iteration   2: 1131727.660 ops/s
# Warmup Iteration   3: 1227261.541 ops/s
# Warmup Iteration   4: 1222903.555 ops/s
# Warmup Iteration   5: 1022688.562 ops/s
# Warmup Iteration   6: 1234609.225 ops/s
# Warmup Iteration   7: 1235062.076 ops/s
# Warmup Iteration   8: 1237172.166 ops/s
# Warmup Iteration   9: 1233930.056 ops/s
# Warmup Iteration  10: 1228070.717 ops/s
# Warmup Iteration  11: 1233007.650 ops/s
# Warmup Iteration  12: 1234717.293 ops/s
# Warmup Iteration  13: 1235063.358 ops/s
# Warmup Iteration  14: 1229199.173 ops/s
# Warmup Iteration  15: 1233093.466 ops/s
# Warmup Iteration  16: 1236458.785 ops/s
# Warmup Iteration  17: 1234240.403 ops/s
# Warmup Iteration  18: 1227468.394 ops/s
# Warmup Iteration  19: 1228064.951 ops/s
# Warmup Iteration  20: 1238700.862 ops/s
# Warmup Iteration  21: 1233825.484 ops/s
# Warmup Iteration  22: 1231250.368 ops/s
# Warmup Iteration  23: 1239912.942 ops/s
# Warmup Iteration  24: 1226735.277 ops/s
# Warmup Iteration  25: 1229037.784 ops/s
# Warmup Iteration  26: 1237978.005 ops/s
# Warmup Iteration  27: 1231397.727 ops/s
# Warmup Iteration  28: 1236800.970 ops/s
# Warmup Iteration  29: 1231164.979 ops/s
# Warmup Iteration  30: 1240355.345 ops/s
Iteration   1: 1239011.431 ops/s
Iteration   2: 1232454.415 ops/s
Iteration   3: 1234226.510 ops/s
Iteration   4: 1239882.770 ops/s
Iteration   5: 1230891.975 ops/s
Iteration   6: 1237248.811 ops/s
Iteration   7: 1234436.953 ops/s
Iteration   8: 1234635.631 ops/s
Iteration   9: 1236822.965 ops/s
Iteration  10: 1247663.471 ops/s
Iteration  11: 1246189.043 ops/s
Iteration  12: 1240613.483 ops/s
Iteration  13: 1235086.260 ops/s
Iteration  14: 1242101.218 ops/s
Iteration  15: 1236035.645 ops/s
Iteration  16: 1235393.139 ops/s
Iteration  17: 1238954.570 ops/s
Iteration  18: 1227880.290 ops/s
Iteration  19: 1228493.097 ops/s
Iteration  20: 1228782.524 ops/s
Iteration  21: 1225096.483 ops/s
Iteration  22: 1236473.122 ops/s
Iteration  23: 1238314.211 ops/s
Iteration  24: 1238006.870 ops/s
Iteration  25: 1226160.569 ops/s
Iteration  26: 1242446.659 ops/s
Iteration  27: 1223585.250 ops/s
Iteration  28: 1239796.160 ops/s
Iteration  29: 1235032.253 ops/s
Iteration  30: 1237167.278 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectMap":
  1235629.435 ±(99.9%) 3901.162 ops/s [Average]
  (min, avg, max) = (1223585.250, 1235629.435, 1247663.471), stdev = 5839.077
  CI (99.9%): [1231728.273, 1239530.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_selectMap  thrpt   30  1235629.435 ± 3901.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 913419.676 ops/s
# Warmup Iteration   2: 2325082.861 ops/s
# Warmup Iteration   3: 2387868.714 ops/s
# Warmup Iteration   4: 1978380.989 ops/s
# Warmup Iteration   5: 2386431.423 ops/s
# Warmup Iteration   6: 2384284.641 ops/s
# Warmup Iteration   7: 2387101.309 ops/s
# Warmup Iteration   8: 2401141.930 ops/s
# Warmup Iteration   9: 2380088.948 ops/s
# Warmup Iteration  10: 2388190.005 ops/s
# Warmup Iteration  11: 2394414.243 ops/s
# Warmup Iteration  12: 2386929.258 ops/s
# Warmup Iteration  13: 2400380.556 ops/s
# Warmup Iteration  14: 2397737.512 ops/s
# Warmup Iteration  15: 2394342.467 ops/s
# Warmup Iteration  16: 2394171.527 ops/s
# Warmup Iteration  17: 2405945.078 ops/s
# Warmup Iteration  18: 2393871.703 ops/s
# Warmup Iteration  19: 2403574.138 ops/s
# Warmup Iteration  20: 2406578.527 ops/s
# Warmup Iteration  21: 2402039.249 ops/s
# Warmup Iteration  22: 2400352.444 ops/s
# Warmup Iteration  23: 2392961.138 ops/s
# Warmup Iteration  24: 2391930.302 ops/s
# Warmup Iteration  25: 2400290.790 ops/s
# Warmup Iteration  26: 2403191.545 ops/s
# Warmup Iteration  27: 2394262.257 ops/s
# Warmup Iteration  28: 2400382.009 ops/s
# Warmup Iteration  29: 2395886.357 ops/s
# Warmup Iteration  30: 2393636.257 ops/s
Iteration   1: 2397405.747 ops/s
Iteration   2: 2403184.216 ops/s
Iteration   3: 2409113.798 ops/s
Iteration   4: 2407640.212 ops/s
Iteration   5: 2390042.561 ops/s
Iteration   6: 2400861.511 ops/s
Iteration   7: 2375084.408 ops/s
Iteration   8: 2395468.405 ops/s
Iteration   9: 2406745.404 ops/s
Iteration  10: 2414996.026 ops/s
Iteration  11: 2376089.208 ops/s
Iteration  12: 2400200.981 ops/s
Iteration  13: 2400744.303 ops/s
Iteration  14: 2395441.197 ops/s
Iteration  15: 2398296.659 ops/s
Iteration  16: 2411250.889 ops/s
Iteration  17: 2392994.969 ops/s
Iteration  18: 2403706.185 ops/s
Iteration  19: 2408045.148 ops/s
Iteration  20: 2406659.176 ops/s
Iteration  21: 2392134.421 ops/s
Iteration  22: 2409326.867 ops/s
Iteration  23: 2389711.133 ops/s
Iteration  24: 2379815.055 ops/s
Iteration  25: 2399012.916 ops/s
Iteration  26: 2387730.121 ops/s
Iteration  27: 2393546.237 ops/s
Iteration  28: 2391959.057 ops/s
Iteration  29: 2392297.996 ops/s
Iteration  30: 2379057.433 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith":
  2396952.075 ±(99.9%) 7022.106 ops/s [Average]
  (min, avg, max) = (2375084.408, 2396952.075, 2414996.026), stdev = 10510.358
  CI (99.9%): [2389929.969, 2403974.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_selectWith  thrpt   30  2396952.075 ± 7022.106  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1596438.070 ops/s
# Warmup Iteration   2: 3636099.410 ops/s
# Warmup Iteration   3: 3062354.100 ops/s
# Warmup Iteration   4: 3680579.958 ops/s
# Warmup Iteration   5: 3660403.761 ops/s
# Warmup Iteration   6: 3679985.033 ops/s
# Warmup Iteration   7: 3667602.399 ops/s
# Warmup Iteration   8: 3657758.617 ops/s
# Warmup Iteration   9: 3669309.532 ops/s
# Warmup Iteration  10: 3654672.285 ops/s
# Warmup Iteration  11: 3664226.773 ops/s
# Warmup Iteration  12: 3667541.370 ops/s
# Warmup Iteration  13: 3659584.225 ops/s
# Warmup Iteration  14: 3667055.597 ops/s
# Warmup Iteration  15: 3669630.930 ops/s
# Warmup Iteration  16: 3684160.137 ops/s
# Warmup Iteration  17: 3678722.278 ops/s
# Warmup Iteration  18: 3682821.910 ops/s
# Warmup Iteration  19: 3667554.654 ops/s
# Warmup Iteration  20: 3678741.132 ops/s
# Warmup Iteration  21: 3672649.969 ops/s
# Warmup Iteration  22: 3662291.876 ops/s
# Warmup Iteration  23: 3618893.514 ops/s
# Warmup Iteration  24: 3627790.772 ops/s
# Warmup Iteration  25: 3655026.109 ops/s
# Warmup Iteration  26: 3677622.480 ops/s
# Warmup Iteration  27: 3685553.292 ops/s
# Warmup Iteration  28: 3641397.491 ops/s
# Warmup Iteration  29: 3671373.255 ops/s
# Warmup Iteration  30: 3683322.255 ops/s
Iteration   1: 3697263.587 ops/s
Iteration   2: 3676718.372 ops/s
Iteration   3: 3677878.782 ops/s
Iteration   4: 3674575.648 ops/s
Iteration   5: 3684849.243 ops/s
Iteration   6: 3667531.841 ops/s
Iteration   7: 3675216.362 ops/s
Iteration   8: 3692950.077 ops/s
Iteration   9: 3668862.365 ops/s
Iteration  10: 3674933.536 ops/s
Iteration  11: 3686788.767 ops/s
Iteration  12: 3646141.009 ops/s
Iteration  13: 3659739.931 ops/s
Iteration  14: 3659754.554 ops/s
Iteration  15: 3671602.468 ops/s
Iteration  16: 3655339.301 ops/s
Iteration  17: 3674957.336 ops/s
Iteration  18: 3647036.821 ops/s
Iteration  19: 3649021.611 ops/s
Iteration  20: 3624369.841 ops/s
Iteration  21: 3677629.082 ops/s
Iteration  22: 3677551.298 ops/s
Iteration  23: 3677186.466 ops/s
Iteration  24: 3691406.017 ops/s
Iteration  25: 3658298.386 ops/s
Iteration  26: 3671377.802 ops/s
Iteration  27: 3680112.216 ops/s
Iteration  28: 3661097.875 ops/s
Iteration  29: 3690683.900 ops/s
Iteration  30: 3698344.611 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_selectWith_value":
  3671640.637 ±(99.9%) 11184.103 ops/s [Average]
  (min, avg, max) = (3624369.841, 3671640.637, 3698344.611), stdev = 16739.841
  CI (99.9%): [3660456.533, 3682824.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_selectWith_value  thrpt   30  3671640.637 ± 11184.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select_value$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select_value

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1013843.137 ops/s
# Warmup Iteration   2: 2480116.342 ops/s
# Warmup Iteration   3: 2075876.453 ops/s
# Warmup Iteration   4: 2500911.086 ops/s
# Warmup Iteration   5: 2487759.239 ops/s
# Warmup Iteration   6: 2487198.002 ops/s
# Warmup Iteration   7: 2492190.801 ops/s
# Warmup Iteration   8: 2472453.741 ops/s
# Warmup Iteration   9: 2480920.859 ops/s
# Warmup Iteration  10: 2495951.418 ops/s
# Warmup Iteration  11: 2489972.144 ops/s
# Warmup Iteration  12: 2498892.450 ops/s
# Warmup Iteration  13: 2483230.934 ops/s
# Warmup Iteration  14: 2496229.498 ops/s
# Warmup Iteration  15: 2492982.158 ops/s
# Warmup Iteration  16: 2488389.879 ops/s
# Warmup Iteration  17: 2493587.267 ops/s
# Warmup Iteration  18: 2491152.097 ops/s
# Warmup Iteration  19: 2496937.176 ops/s
# Warmup Iteration  20: 2463079.132 ops/s
# Warmup Iteration  21: 2491265.684 ops/s
# Warmup Iteration  22: 2503423.555 ops/s
# Warmup Iteration  23: 2485747.408 ops/s
# Warmup Iteration  24: 2472155.785 ops/s
# Warmup Iteration  25: 2479816.979 ops/s
# Warmup Iteration  26: 2464532.076 ops/s
# Warmup Iteration  27: 2492165.843 ops/s
# Warmup Iteration  28: 2489296.128 ops/s
# Warmup Iteration  29: 2471487.703 ops/s
# Warmup Iteration  30: 2471232.348 ops/s
Iteration   1: 2484409.496 ops/s
Iteration   2: 2494488.985 ops/s
Iteration   3: 2499120.943 ops/s
Iteration   4: 2483258.354 ops/s
Iteration   5: 2472662.558 ops/s
Iteration   6: 2493231.499 ops/s
Iteration   7: 2480456.099 ops/s
Iteration   8: 2482570.223 ops/s
Iteration   9: 2488416.777 ops/s
Iteration  10: 2490921.365 ops/s
Iteration  11: 2484751.952 ops/s
Iteration  12: 2465218.350 ops/s
Iteration  13: 2482368.593 ops/s
Iteration  14: 2485821.489 ops/s
Iteration  15: 2437033.596 ops/s
Iteration  16: 2471858.341 ops/s
Iteration  17: 2467677.474 ops/s
Iteration  18: 2467559.264 ops/s
Iteration  19: 2487548.662 ops/s
Iteration  20: 2474180.256 ops/s
Iteration  21: 2472958.153 ops/s
Iteration  22: 2481334.422 ops/s
Iteration  23: 2486779.994 ops/s
Iteration  24: 2475535.440 ops/s
Iteration  25: 2466232.596 ops/s
Iteration  26: 2481600.300 ops/s
Iteration  27: 2494123.565 ops/s
Iteration  28: 2485413.136 ops/s
Iteration  29: 2480304.545 ops/s
Iteration  30: 2482446.258 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_select_value":
  2480009.423 ±(99.9%) 8007.858 ops/s [Average]
  (min, avg, max) = (2437033.596, 2480009.423, 2499120.943), stdev = 11985.785
  CI (99.9%): [2472001.565, 2488017.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_select_value  thrpt   30  2480009.423 ± 8007.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 37544.968 ops/s
# Warmup Iteration   2: 48913.099 ops/s
# Warmup Iteration   3: 71928.737 ops/s
# Warmup Iteration   4: 71506.632 ops/s
# Warmup Iteration   5: 71361.993 ops/s
# Warmup Iteration   6: 71984.208 ops/s
# Warmup Iteration   7: 71440.893 ops/s
# Warmup Iteration   8: 71570.217 ops/s
# Warmup Iteration   9: 62875.224 ops/s
# Warmup Iteration  10: 69504.711 ops/s
# Warmup Iteration  11: 71990.702 ops/s
# Warmup Iteration  12: 72270.294 ops/s
# Warmup Iteration  13: 72065.363 ops/s
# Warmup Iteration  14: 71930.707 ops/s
# Warmup Iteration  15: 72159.101 ops/s
# Warmup Iteration  16: 71790.836 ops/s
# Warmup Iteration  17: 71934.659 ops/s
# Warmup Iteration  18: 72590.562 ops/s
# Warmup Iteration  19: 72780.559 ops/s
# Warmup Iteration  20: 72284.203 ops/s
# Warmup Iteration  21: 72205.346 ops/s
# Warmup Iteration  22: 72120.931 ops/s
# Warmup Iteration  23: 71966.270 ops/s
# Warmup Iteration  24: 72428.198 ops/s
# Warmup Iteration  25: 72356.118 ops/s
# Warmup Iteration  26: 72058.308 ops/s
# Warmup Iteration  27: 72396.923 ops/s
# Warmup Iteration  28: 71869.841 ops/s
# Warmup Iteration  29: 72165.863 ops/s
# Warmup Iteration  30: 72294.611 ops/s
Iteration   1: 72363.098 ops/s
Iteration   2: 72317.172 ops/s
Iteration   3: 72375.817 ops/s
Iteration   4: 72047.312 ops/s
Iteration   5: 72546.311 ops/s
Iteration   6: 72070.427 ops/s
Iteration   7: 72252.855 ops/s
Iteration   8: 72337.797 ops/s
Iteration   9: 72221.539 ops/s
Iteration  10: 72322.796 ops/s
Iteration  11: 72893.921 ops/s
Iteration  12: 72381.603 ops/s
Iteration  13: 72846.646 ops/s
Iteration  14: 72322.691 ops/s
Iteration  15: 72539.420 ops/s
Iteration  16: 72281.284 ops/s
Iteration  17: 72592.178 ops/s
Iteration  18: 73059.122 ops/s
Iteration  19: 73545.187 ops/s
Iteration  20: 72852.216 ops/s
Iteration  21: 73076.546 ops/s
Iteration  22: 72648.773 ops/s
Iteration  23: 72628.336 ops/s
Iteration  24: 72529.036 ops/s
Iteration  25: 72998.653 ops/s
Iteration  26: 72342.543 ops/s
Iteration  27: 72732.756 ops/s
Iteration  28: 72926.807 ops/s
Iteration  29: 72820.512 ops/s
Iteration  30: 72635.623 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_serialization":
  72583.633 ±(99.9%) 227.288 ops/s [Average]
  (min, avg, max) = (72047.312, 72583.633, 73545.187), stdev = 340.194
  CI (99.9%): [72356.345, 72810.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_serialization  thrpt   30  72583.633 ± 227.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1312722.008 ops/s
# Warmup Iteration   2: 2923177.582 ops/s
# Warmup Iteration   3: 2469706.154 ops/s
# Warmup Iteration   4: 2977361.392 ops/s
# Warmup Iteration   5: 2956930.374 ops/s
# Warmup Iteration   6: 2952397.982 ops/s
# Warmup Iteration   7: 2930296.567 ops/s
# Warmup Iteration   8: 2954609.280 ops/s
# Warmup Iteration   9: 2943436.207 ops/s
# Warmup Iteration  10: 2941006.537 ops/s
# Warmup Iteration  11: 2949423.628 ops/s
# Warmup Iteration  12: 2963615.320 ops/s
# Warmup Iteration  13: 2959034.994 ops/s
# Warmup Iteration  14: 2962374.424 ops/s
# Warmup Iteration  15: 2955963.963 ops/s
# Warmup Iteration  16: 2941433.269 ops/s
# Warmup Iteration  17: 2936298.591 ops/s
# Warmup Iteration  18: 2934929.817 ops/s
# Warmup Iteration  19: 2948989.514 ops/s
# Warmup Iteration  20: 2926698.403 ops/s
# Warmup Iteration  21: 2940078.650 ops/s
# Warmup Iteration  22: 2927830.641 ops/s
# Warmup Iteration  23: 2910344.367 ops/s
# Warmup Iteration  24: 2949932.716 ops/s
# Warmup Iteration  25: 2929405.547 ops/s
# Warmup Iteration  26: 2944667.041 ops/s
# Warmup Iteration  27: 2939303.120 ops/s
# Warmup Iteration  28: 2947642.478 ops/s
# Warmup Iteration  29: 2948772.660 ops/s
# Warmup Iteration  30: 2925468.903 ops/s
Iteration   1: 2943827.778 ops/s
Iteration   2: 2937615.122 ops/s
Iteration   3: 2954089.723 ops/s
Iteration   4: 2935342.128 ops/s
Iteration   5: 2959051.620 ops/s
Iteration   6: 2942643.018 ops/s
Iteration   7: 2953203.340 ops/s
Iteration   8: 2940319.572 ops/s
Iteration   9: 2943656.276 ops/s
Iteration  10: 2936012.302 ops/s
Iteration  11: 2930161.358 ops/s
Iteration  12: 2923771.065 ops/s
Iteration  13: 2889229.017 ops/s
Iteration  14: 2919498.812 ops/s
Iteration  15: 2916875.354 ops/s
Iteration  16: 2943970.814 ops/s
Iteration  17: 2925195.700 ops/s
Iteration  18: 2930149.099 ops/s
Iteration  19: 2942624.453 ops/s
Iteration  20: 2948581.226 ops/s
Iteration  21: 2955738.127 ops/s
Iteration  22: 2954063.671 ops/s
Iteration  23: 2957106.463 ops/s
Iteration  24: 2949447.865 ops/s
Iteration  25: 2949082.294 ops/s
Iteration  26: 2938560.571 ops/s
Iteration  27: 2954382.181 ops/s
Iteration  28: 2955332.896 ops/s
Iteration  29: 2976158.268 ops/s
Iteration  30: 2961720.786 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_size":
  2942247.030 ±(99.9%) 11166.742 ops/s [Average]
  (min, avg, max) = (2889229.017, 2942247.030, 2976158.268), stdev = 16713.855
  CI (99.9%): [2931080.288, 2953413.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_size  thrpt   30  2942247.030 ± 11166.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_stream$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_stream

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615311.721 ops/s
# Warmup Iteration   2: 1450672.764 ops/s
# Warmup Iteration   3: 1480755.467 ops/s
# Warmup Iteration   4: 1233119.068 ops/s
# Warmup Iteration   5: 1480852.305 ops/s
# Warmup Iteration   6: 1488125.075 ops/s
# Warmup Iteration   7: 1483291.529 ops/s
# Warmup Iteration   8: 1486697.898 ops/s
# Warmup Iteration   9: 1490146.486 ops/s
# Warmup Iteration  10: 1485304.026 ops/s
# Warmup Iteration  11: 1491589.585 ops/s
# Warmup Iteration  12: 1485366.179 ops/s
# Warmup Iteration  13: 1482200.336 ops/s
# Warmup Iteration  14: 1487122.411 ops/s
# Warmup Iteration  15: 1482665.863 ops/s
# Warmup Iteration  16: 1483628.180 ops/s
# Warmup Iteration  17: 1485737.889 ops/s
# Warmup Iteration  18: 1478561.540 ops/s
# Warmup Iteration  19: 1479049.868 ops/s
# Warmup Iteration  20: 1477125.971 ops/s
# Warmup Iteration  21: 1480383.244 ops/s
# Warmup Iteration  22: 1481988.329 ops/s
# Warmup Iteration  23: 1477842.600 ops/s
# Warmup Iteration  24: 1481186.941 ops/s
# Warmup Iteration  25: 1481095.646 ops/s
# Warmup Iteration  26: 1483889.326 ops/s
# Warmup Iteration  27: 1481737.395 ops/s
# Warmup Iteration  28: 1479602.195 ops/s
# Warmup Iteration  29: 1483550.928 ops/s
# Warmup Iteration  30: 1486369.534 ops/s
Iteration   1: 1478694.889 ops/s
Iteration   2: 1473090.505 ops/s
Iteration   3: 1479334.010 ops/s
Iteration   4: 1480319.615 ops/s
Iteration   5: 1481855.199 ops/s
Iteration   6: 1487026.525 ops/s
Iteration   7: 1486629.401 ops/s
Iteration   8: 1492223.727 ops/s
Iteration   9: 1474957.270 ops/s
Iteration  10: 1479968.271 ops/s
Iteration  11: 1472044.981 ops/s
Iteration  12: 1484159.103 ops/s
Iteration  13: 1483932.852 ops/s
Iteration  14: 1473730.467 ops/s
Iteration  15: 1471330.677 ops/s
Iteration  16: 1479069.847 ops/s
Iteration  17: 1486059.153 ops/s
Iteration  18: 1478387.221 ops/s
Iteration  19: 1483197.166 ops/s
Iteration  20: 1491680.266 ops/s
Iteration  21: 1489219.966 ops/s
Iteration  22: 1487810.787 ops/s
Iteration  23: 1477387.828 ops/s
Iteration  24: 1475529.384 ops/s
Iteration  25: 1470968.854 ops/s
Iteration  26: 1495579.241 ops/s
Iteration  27: 1483159.904 ops/s
Iteration  28: 1486903.251 ops/s
Iteration  29: 1481610.079 ops/s
Iteration  30: 1471533.800 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_stream":
  1481246.475 ±(99.9%) 4475.553 ops/s [Average]
  (min, avg, max) = (1470968.854, 1481246.475, 1495579.241), stdev = 6698.798
  CI (99.9%): [1476770.922, 1485722.028] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_stream  thrpt   30  1481246.475 ± 4475.553  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 848369.425 ops/s
# Warmup Iteration   2: 1710208.473 ops/s
# Warmup Iteration   3: 1822065.999 ops/s
# Warmup Iteration   4: 1827640.022 ops/s
# Warmup Iteration   5: 1514823.845 ops/s
# Warmup Iteration   6: 1815379.840 ops/s
# Warmup Iteration   7: 1827867.126 ops/s
# Warmup Iteration   8: 1834171.552 ops/s
# Warmup Iteration   9: 1838617.892 ops/s
# Warmup Iteration  10: 1833161.433 ops/s
# Warmup Iteration  11: 1839387.938 ops/s
# Warmup Iteration  12: 1833303.559 ops/s
# Warmup Iteration  13: 1837636.850 ops/s
# Warmup Iteration  14: 1840735.959 ops/s
# Warmup Iteration  15: 1831363.300 ops/s
# Warmup Iteration  16: 1835354.136 ops/s
# Warmup Iteration  17: 1833847.973 ops/s
# Warmup Iteration  18: 1833306.357 ops/s
# Warmup Iteration  19: 1845233.066 ops/s
# Warmup Iteration  20: 1838902.466 ops/s
# Warmup Iteration  21: 1842237.303 ops/s
# Warmup Iteration  22: 1831941.512 ops/s
# Warmup Iteration  23: 1841742.443 ops/s
# Warmup Iteration  24: 1833532.285 ops/s
# Warmup Iteration  25: 1829932.701 ops/s
# Warmup Iteration  26: 1838960.397 ops/s
# Warmup Iteration  27: 1835160.377 ops/s
# Warmup Iteration  28: 1832902.433 ops/s
# Warmup Iteration  29: 1840414.919 ops/s
# Warmup Iteration  30: 1827967.530 ops/s
Iteration   1: 1830616.689 ops/s
Iteration   2: 1841690.396 ops/s
Iteration   3: 1833752.946 ops/s
Iteration   4: 1832123.881 ops/s
Iteration   5: 1844280.165 ops/s
Iteration   6: 1822237.113 ops/s
Iteration   7: 1830827.993 ops/s
Iteration   8: 1826109.853 ops/s
Iteration   9: 1836412.645 ops/s
Iteration  10: 1827220.982 ops/s
Iteration  11: 1831194.875 ops/s
Iteration  12: 1823621.141 ops/s
Iteration  13: 1843081.722 ops/s
Iteration  14: 1827516.416 ops/s
Iteration  15: 1834854.679 ops/s
Iteration  16: 1840182.224 ops/s
Iteration  17: 1832767.943 ops/s
Iteration  18: 1825002.667 ops/s
Iteration  19: 1833290.747 ops/s
Iteration  20: 1851548.209 ops/s
Iteration  21: 1839997.882 ops/s
Iteration  22: 1825855.535 ops/s
Iteration  23: 1829562.232 ops/s
Iteration  24: 1827120.406 ops/s
Iteration  25: 1845708.180 ops/s
Iteration  26: 1829791.530 ops/s
Iteration  27: 1840364.849 ops/s
Iteration  28: 1827004.801 ops/s
Iteration  29: 1833063.817 ops/s
Iteration  30: 1843683.199 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByDouble":
  1833682.857 ±(99.9%) 4989.631 ops/s [Average]
  (min, avg, max) = (1822237.113, 1833682.857, 1851548.209), stdev = 7468.245
  CI (99.9%): [1828693.226, 1838672.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumByDouble  thrpt   30  1833682.857 ± 4989.631  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 849270.526 ops/s
# Warmup Iteration   2: 1720985.691 ops/s
# Warmup Iteration   3: 1820589.603 ops/s
# Warmup Iteration   4: 1827863.088 ops/s
# Warmup Iteration   5: 1514260.850 ops/s
# Warmup Iteration   6: 1804130.003 ops/s
# Warmup Iteration   7: 1817002.377 ops/s
# Warmup Iteration   8: 1820418.323 ops/s
# Warmup Iteration   9: 1811217.045 ops/s
# Warmup Iteration  10: 1834668.875 ops/s
# Warmup Iteration  11: 1818878.764 ops/s
# Warmup Iteration  12: 1809506.159 ops/s
# Warmup Iteration  13: 1822958.632 ops/s
# Warmup Iteration  14: 1822952.807 ops/s
# Warmup Iteration  15: 1824433.523 ops/s
# Warmup Iteration  16: 1813349.640 ops/s
# Warmup Iteration  17: 1823082.768 ops/s
# Warmup Iteration  18: 1822064.878 ops/s
# Warmup Iteration  19: 1819015.444 ops/s
# Warmup Iteration  20: 1801262.870 ops/s
# Warmup Iteration  21: 1807247.667 ops/s
# Warmup Iteration  22: 1819798.449 ops/s
# Warmup Iteration  23: 1820211.081 ops/s
# Warmup Iteration  24: 1818253.611 ops/s
# Warmup Iteration  25: 1821841.845 ops/s
# Warmup Iteration  26: 1807980.474 ops/s
# Warmup Iteration  27: 1818218.140 ops/s
# Warmup Iteration  28: 1813629.542 ops/s
# Warmup Iteration  29: 1808445.520 ops/s
# Warmup Iteration  30: 1822620.087 ops/s
Iteration   1: 1820469.847 ops/s
Iteration   2: 1818924.266 ops/s
Iteration   3: 1816953.542 ops/s
Iteration   4: 1828970.653 ops/s
Iteration   5: 1815412.173 ops/s
Iteration   6: 1822747.494 ops/s
Iteration   7: 1813135.969 ops/s
Iteration   8: 1816349.867 ops/s
Iteration   9: 1798034.484 ops/s
Iteration  10: 1812391.567 ops/s
Iteration  11: 1827161.010 ops/s
Iteration  12: 1805615.029 ops/s
Iteration  13: 1803872.509 ops/s
Iteration  14: 1807548.560 ops/s
Iteration  15: 1824900.459 ops/s
Iteration  16: 1818281.349 ops/s
Iteration  17: 1805544.893 ops/s
Iteration  18: 1809088.211 ops/s
Iteration  19: 1816975.869 ops/s
Iteration  20: 1803074.967 ops/s
Iteration  21: 1829406.087 ops/s
Iteration  22: 1814807.327 ops/s
Iteration  23: 1828186.279 ops/s
Iteration  24: 1818195.698 ops/s
Iteration  25: 1818295.071 ops/s
Iteration  26: 1819230.056 ops/s
Iteration  27: 1818149.368 ops/s
Iteration  28: 1818530.476 ops/s
Iteration  29: 1821924.175 ops/s
Iteration  30: 1823885.059 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByFloat":
  1816535.411 ±(99.9%) 5404.978 ops/s [Average]
  (min, avg, max) = (1798034.484, 1816535.411, 1829406.087), stdev = 8089.917
  CI (99.9%): [1811130.433, 1821940.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumByFloat  thrpt   30  1816535.411 ± 5404.978  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1256763.530 ops/s
# Warmup Iteration   2: 2967932.937 ops/s
# Warmup Iteration   3: 3172515.242 ops/s
# Warmup Iteration   4: 2592272.216 ops/s
# Warmup Iteration   5: 3195268.115 ops/s
# Warmup Iteration   6: 3200956.168 ops/s
# Warmup Iteration   7: 3176654.980 ops/s
# Warmup Iteration   8: 3203943.540 ops/s
# Warmup Iteration   9: 3194289.827 ops/s
# Warmup Iteration  10: 3186718.424 ops/s
# Warmup Iteration  11: 3196820.673 ops/s
# Warmup Iteration  12: 3177566.234 ops/s
# Warmup Iteration  13: 3191987.344 ops/s
# Warmup Iteration  14: 3190700.830 ops/s
# Warmup Iteration  15: 3181017.411 ops/s
# Warmup Iteration  16: 3191544.809 ops/s
# Warmup Iteration  17: 3194742.850 ops/s
# Warmup Iteration  18: 3187863.950 ops/s
# Warmup Iteration  19: 3196157.161 ops/s
# Warmup Iteration  20: 3178842.349 ops/s
# Warmup Iteration  21: 3167024.779 ops/s
# Warmup Iteration  22: 3188879.249 ops/s
# Warmup Iteration  23: 3189146.368 ops/s
# Warmup Iteration  24: 3185563.687 ops/s
# Warmup Iteration  25: 3190275.218 ops/s
# Warmup Iteration  26: 3194645.285 ops/s
# Warmup Iteration  27: 3191505.759 ops/s
# Warmup Iteration  28: 3198280.926 ops/s
# Warmup Iteration  29: 3203006.973 ops/s
# Warmup Iteration  30: 3195173.001 ops/s
Iteration   1: 3174478.852 ops/s
Iteration   2: 3180426.695 ops/s
Iteration   3: 3205837.311 ops/s
Iteration   4: 3200403.050 ops/s
Iteration   5: 3196830.795 ops/s
Iteration   6: 3194807.426 ops/s
Iteration   7: 3219893.334 ops/s
Iteration   8: 3178283.850 ops/s
Iteration   9: 3204307.408 ops/s
Iteration  10: 3184335.483 ops/s
Iteration  11: 3175919.801 ops/s
Iteration  12: 3180503.408 ops/s
Iteration  13: 3188600.955 ops/s
Iteration  14: 3193858.580 ops/s
Iteration  15: 3174558.891 ops/s
Iteration  16: 3180097.740 ops/s
Iteration  17: 3191609.845 ops/s
Iteration  18: 3194507.452 ops/s
Iteration  19: 3186743.453 ops/s
Iteration  20: 3184590.256 ops/s
Iteration  21: 3192821.587 ops/s
Iteration  22: 3189432.296 ops/s
Iteration  23: 3201961.959 ops/s
Iteration  24: 3162741.328 ops/s
Iteration  25: 3198924.120 ops/s
Iteration  26: 3180622.109 ops/s
Iteration  27: 3191752.311 ops/s
Iteration  28: 3189230.565 ops/s
Iteration  29: 3166536.137 ops/s
Iteration  30: 3165645.802 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByInt":
  3187675.427 ±(99.9%) 8578.305 ops/s [Average]
  (min, avg, max) = (3162741.328, 3187675.427, 3219893.334), stdev = 12839.604
  CI (99.9%): [3179097.122, 3196253.732] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumByInt  thrpt   30  3187675.427 ± 8578.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1355955.806 ops/s
# Warmup Iteration   2: 3282972.663 ops/s
# Warmup Iteration   3: 3262433.305 ops/s
# Warmup Iteration   4: 2702527.238 ops/s
# Warmup Iteration   5: 3235441.683 ops/s
# Warmup Iteration   6: 3259791.949 ops/s
# Warmup Iteration   7: 3280019.570 ops/s
# Warmup Iteration   8: 3279957.739 ops/s
# Warmup Iteration   9: 3266263.326 ops/s
# Warmup Iteration  10: 3271018.697 ops/s
# Warmup Iteration  11: 3284589.464 ops/s
# Warmup Iteration  12: 3274935.628 ops/s
# Warmup Iteration  13: 3270220.297 ops/s
# Warmup Iteration  14: 3271137.303 ops/s
# Warmup Iteration  15: 3277891.537 ops/s
# Warmup Iteration  16: 3282716.383 ops/s
# Warmup Iteration  17: 3271532.951 ops/s
# Warmup Iteration  18: 3270055.969 ops/s
# Warmup Iteration  19: 3232054.379 ops/s
# Warmup Iteration  20: 3263306.394 ops/s
# Warmup Iteration  21: 3281202.765 ops/s
# Warmup Iteration  22: 3270396.828 ops/s
# Warmup Iteration  23: 3282461.195 ops/s
# Warmup Iteration  24: 3254754.093 ops/s
# Warmup Iteration  25: 3249214.814 ops/s
# Warmup Iteration  26: 3282167.910 ops/s
# Warmup Iteration  27: 3278820.009 ops/s
# Warmup Iteration  28: 3276214.798 ops/s
# Warmup Iteration  29: 3281321.917 ops/s
# Warmup Iteration  30: 3285008.852 ops/s
Iteration   1: 3294785.150 ops/s
Iteration   2: 3288766.038 ops/s
Iteration   3: 3266803.635 ops/s
Iteration   4: 3272310.749 ops/s
Iteration   5: 3261746.708 ops/s
Iteration   6: 3289603.157 ops/s
Iteration   7: 3267229.872 ops/s
Iteration   8: 3281395.377 ops/s
Iteration   9: 3270995.329 ops/s
Iteration  10: 3248736.215 ops/s
Iteration  11: 3289392.499 ops/s
Iteration  12: 3288734.836 ops/s
Iteration  13: 3271040.771 ops/s
Iteration  14: 3290242.550 ops/s
Iteration  15: 3276572.420 ops/s
Iteration  16: 3276410.336 ops/s
Iteration  17: 3290994.142 ops/s
Iteration  18: 3258444.629 ops/s
Iteration  19: 3262041.704 ops/s
Iteration  20: 3301561.456 ops/s
Iteration  21: 3312255.835 ops/s
Iteration  22: 3284052.864 ops/s
Iteration  23: 3285884.382 ops/s
Iteration  24: 3287683.986 ops/s
Iteration  25: 3294426.959 ops/s
Iteration  26: 3282048.658 ops/s
Iteration  27: 3269861.598 ops/s
Iteration  28: 3293350.086 ops/s
Iteration  29: 3267209.778 ops/s
Iteration  30: 3285629.095 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumByLong":
  3280340.360 ±(99.9%) 9416.363 ops/s [Average]
  (min, avg, max) = (3248736.215, 3280340.360, 3312255.835), stdev = 14093.969
  CI (99.9%): [3270923.998, 3289756.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumByLong  thrpt   30  3280340.360 ± 9416.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2079398.090 ops/s
# Warmup Iteration   2: 5000390.699 ops/s
# Warmup Iteration   3: 4714561.066 ops/s
# Warmup Iteration   4: 4454879.101 ops/s
# Warmup Iteration   5: 5039175.657 ops/s
# Warmup Iteration   6: 5038242.400 ops/s
# Warmup Iteration   7: 5055979.045 ops/s
# Warmup Iteration   8: 5047992.500 ops/s
# Warmup Iteration   9: 5019119.278 ops/s
# Warmup Iteration  10: 5049429.613 ops/s
# Warmup Iteration  11: 5051152.059 ops/s
# Warmup Iteration  12: 5034650.067 ops/s
# Warmup Iteration  13: 5038322.325 ops/s
# Warmup Iteration  14: 5059504.569 ops/s
# Warmup Iteration  15: 5054516.252 ops/s
# Warmup Iteration  16: 5062447.043 ops/s
# Warmup Iteration  17: 5023505.743 ops/s
# Warmup Iteration  18: 5043014.545 ops/s
# Warmup Iteration  19: 5024947.437 ops/s
# Warmup Iteration  20: 5002529.623 ops/s
# Warmup Iteration  21: 5043625.921 ops/s
# Warmup Iteration  22: 5055985.496 ops/s
# Warmup Iteration  23: 5050706.017 ops/s
# Warmup Iteration  24: 5047885.052 ops/s
# Warmup Iteration  25: 5024633.264 ops/s
# Warmup Iteration  26: 5057648.374 ops/s
# Warmup Iteration  27: 5038941.811 ops/s
# Warmup Iteration  28: 5057635.013 ops/s
# Warmup Iteration  29: 5044822.746 ops/s
# Warmup Iteration  30: 5038859.137 ops/s
Iteration   1: 5061984.513 ops/s
Iteration   2: 5054544.107 ops/s
Iteration   3: 5035893.236 ops/s
Iteration   4: 5069374.812 ops/s
Iteration   5: 5038150.795 ops/s
Iteration   6: 5028092.702 ops/s
Iteration   7: 5014497.525 ops/s
Iteration   8: 5021427.233 ops/s
Iteration   9: 5076037.517 ops/s
Iteration  10: 5047153.141 ops/s
Iteration  11: 5037478.700 ops/s
Iteration  12: 4996767.193 ops/s
Iteration  13: 5018851.519 ops/s
Iteration  14: 5019777.420 ops/s
Iteration  15: 5030948.094 ops/s
Iteration  16: 5038425.598 ops/s
Iteration  17: 5041683.139 ops/s
Iteration  18: 5033233.342 ops/s
Iteration  19: 5039058.594 ops/s
Iteration  20: 5040516.085 ops/s
Iteration  21: 5028360.883 ops/s
Iteration  22: 5047313.014 ops/s
Iteration  23: 5063381.261 ops/s
Iteration  24: 4996935.912 ops/s
Iteration  25: 5057245.002 ops/s
Iteration  26: 5046960.463 ops/s
Iteration  27: 5054525.374 ops/s
Iteration  28: 5049180.737 ops/s
Iteration  29: 5027379.035 ops/s
Iteration  30: 5046212.779 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfDouble":
  5038712.991 ±(99.9%) 12597.549 ops/s [Average]
  (min, avg, max) = (4996767.193, 5038712.991, 5076037.517), stdev = 18855.420
  CI (99.9%): [5026115.442, 5051310.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumOfDouble  thrpt   30  5038712.991 ± 12597.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2027140.385 ops/s
# Warmup Iteration   2: 4851134.682 ops/s
# Warmup Iteration   3: 4793781.506 ops/s
# Warmup Iteration   4: 4131622.151 ops/s
# Warmup Iteration   5: 4924699.649 ops/s
# Warmup Iteration   6: 4878958.174 ops/s
# Warmup Iteration   7: 4908486.733 ops/s
# Warmup Iteration   8: 4903755.399 ops/s
# Warmup Iteration   9: 4915188.023 ops/s
# Warmup Iteration  10: 4919774.667 ops/s
# Warmup Iteration  11: 4916031.187 ops/s
# Warmup Iteration  12: 4912655.587 ops/s
# Warmup Iteration  13: 4912113.664 ops/s
# Warmup Iteration  14: 4917821.656 ops/s
# Warmup Iteration  15: 4912941.972 ops/s
# Warmup Iteration  16: 4907538.882 ops/s
# Warmup Iteration  17: 4914781.018 ops/s
# Warmup Iteration  18: 4885810.347 ops/s
# Warmup Iteration  19: 4899777.228 ops/s
# Warmup Iteration  20: 4908055.867 ops/s
# Warmup Iteration  21: 4920785.203 ops/s
# Warmup Iteration  22: 4905787.977 ops/s
# Warmup Iteration  23: 4921016.681 ops/s
# Warmup Iteration  24: 4938916.054 ops/s
# Warmup Iteration  25: 4908548.447 ops/s
# Warmup Iteration  26: 4918106.109 ops/s
# Warmup Iteration  27: 4925897.761 ops/s
# Warmup Iteration  28: 4931261.017 ops/s
# Warmup Iteration  29: 4936519.373 ops/s
# Warmup Iteration  30: 4907524.550 ops/s
Iteration   1: 4923297.289 ops/s
Iteration   2: 4900567.371 ops/s
Iteration   3: 4940624.364 ops/s
Iteration   4: 4936447.488 ops/s
Iteration   5: 4930999.582 ops/s
Iteration   6: 4909543.578 ops/s
Iteration   7: 4924751.398 ops/s
Iteration   8: 4883799.424 ops/s
Iteration   9: 4930759.421 ops/s
Iteration  10: 4927350.952 ops/s
Iteration  11: 4922865.532 ops/s
Iteration  12: 4923459.023 ops/s
Iteration  13: 4906640.862 ops/s
Iteration  14: 4927921.272 ops/s
Iteration  15: 4907456.569 ops/s
Iteration  16: 4917915.293 ops/s
Iteration  17: 4949532.414 ops/s
Iteration  18: 4928707.898 ops/s
Iteration  19: 4945561.978 ops/s
Iteration  20: 4946207.395 ops/s
Iteration  21: 4926979.450 ops/s
Iteration  22: 4949272.399 ops/s
Iteration  23: 4934324.201 ops/s
Iteration  24: 4912486.109 ops/s
Iteration  25: 4903798.041 ops/s
Iteration  26: 4933409.124 ops/s
Iteration  27: 4944162.771 ops/s
Iteration  28: 4923877.333 ops/s
Iteration  29: 4947526.866 ops/s
Iteration  30: 4905388.277 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfFloat":
  4925521.123 ±(99.9%) 10952.971 ops/s [Average]
  (min, avg, max) = (4883799.424, 4925521.123, 4949532.414), stdev = 16393.893
  CI (99.9%): [4914568.151, 4936474.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumOfFloat  thrpt   30  4925521.123 ± 10952.971  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2402480.297 ops/s
# Warmup Iteration   2: 5150221.535 ops/s
# Warmup Iteration   3: 4501876.652 ops/s
# Warmup Iteration   4: 5098267.598 ops/s
# Warmup Iteration   5: 5292443.633 ops/s
# Warmup Iteration   6: 5244339.943 ops/s
# Warmup Iteration   7: 5274796.650 ops/s
# Warmup Iteration   8: 5295097.732 ops/s
# Warmup Iteration   9: 5270703.785 ops/s
# Warmup Iteration  10: 5307205.030 ops/s
# Warmup Iteration  11: 5337696.605 ops/s
# Warmup Iteration  12: 5293633.004 ops/s
# Warmup Iteration  13: 5315765.965 ops/s
# Warmup Iteration  14: 5295438.327 ops/s
# Warmup Iteration  15: 5297568.206 ops/s
# Warmup Iteration  16: 5297180.311 ops/s
# Warmup Iteration  17: 5267974.252 ops/s
# Warmup Iteration  18: 5260941.734 ops/s
# Warmup Iteration  19: 5227910.813 ops/s
# Warmup Iteration  20: 5280163.717 ops/s
# Warmup Iteration  21: 5256552.896 ops/s
# Warmup Iteration  22: 5300914.166 ops/s
# Warmup Iteration  23: 5264032.471 ops/s
# Warmup Iteration  24: 5294433.733 ops/s
# Warmup Iteration  25: 5281670.457 ops/s
# Warmup Iteration  26: 5306050.384 ops/s
# Warmup Iteration  27: 5273116.978 ops/s
# Warmup Iteration  28: 5239810.721 ops/s
# Warmup Iteration  29: 5250040.181 ops/s
# Warmup Iteration  30: 5229181.351 ops/s
Iteration   1: 5246515.977 ops/s
Iteration   2: 5302463.285 ops/s
Iteration   3: 5247461.538 ops/s
Iteration   4: 5268728.794 ops/s
Iteration   5: 5298334.702 ops/s
Iteration   6: 5326896.215 ops/s
Iteration   7: 5292787.467 ops/s
Iteration   8: 5438263.249 ops/s
Iteration   9: 5290741.814 ops/s
Iteration  10: 5290899.622 ops/s
Iteration  11: 5320982.081 ops/s
Iteration  12: 5297394.955 ops/s
Iteration  13: 5281751.145 ops/s
Iteration  14: 5242442.797 ops/s
Iteration  15: 5272230.752 ops/s
Iteration  16: 5308127.168 ops/s
Iteration  17: 5290106.409 ops/s
Iteration  18: 5211321.956 ops/s
Iteration  19: 5255941.697 ops/s
Iteration  20: 5253998.293 ops/s
Iteration  21: 5306365.453 ops/s
Iteration  22: 5318966.771 ops/s
Iteration  23: 5255591.485 ops/s
Iteration  24: 5266748.257 ops/s
Iteration  25: 5244945.259 ops/s
Iteration  26: 5338418.118 ops/s
Iteration  27: 5312868.137 ops/s
Iteration  28: 5327712.376 ops/s
Iteration  29: 5275311.337 ops/s
Iteration  30: 5300399.127 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfInt":
  5289490.541 ±(99.9%) 27695.261 ops/s [Average]
  (min, avg, max) = (5211321.956, 5289490.541, 5438263.249), stdev = 41452.966
  CI (99.9%): [5261795.280, 5317185.802] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumOfInt  thrpt   30  5289490.541 ± 27695.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2415255.813 ops/s
# Warmup Iteration   2: 5035655.048 ops/s
# Warmup Iteration   3: 4465632.095 ops/s
# Warmup Iteration   4: 4664084.078 ops/s
# Warmup Iteration   5: 5008798.661 ops/s
# Warmup Iteration   6: 4935918.957 ops/s
# Warmup Iteration   7: 5024735.325 ops/s
# Warmup Iteration   8: 4983859.534 ops/s
# Warmup Iteration   9: 5038007.475 ops/s
# Warmup Iteration  10: 4996286.034 ops/s
# Warmup Iteration  11: 4981745.163 ops/s
# Warmup Iteration  12: 4983216.714 ops/s
# Warmup Iteration  13: 4983138.224 ops/s
# Warmup Iteration  14: 5027297.186 ops/s
# Warmup Iteration  15: 4965649.828 ops/s
# Warmup Iteration  16: 5005730.543 ops/s
# Warmup Iteration  17: 4925028.679 ops/s
# Warmup Iteration  18: 4976228.181 ops/s
# Warmup Iteration  19: 5000080.130 ops/s
# Warmup Iteration  20: 4957869.498 ops/s
# Warmup Iteration  21: 4996213.641 ops/s
# Warmup Iteration  22: 4972419.855 ops/s
# Warmup Iteration  23: 4953309.732 ops/s
# Warmup Iteration  24: 4972283.451 ops/s
# Warmup Iteration  25: 4973717.431 ops/s
# Warmup Iteration  26: 4979094.732 ops/s
# Warmup Iteration  27: 4963758.832 ops/s
# Warmup Iteration  28: 4971777.317 ops/s
# Warmup Iteration  29: 5006076.970 ops/s
# Warmup Iteration  30: 4985147.443 ops/s
Iteration   1: 5004162.890 ops/s
Iteration   2: 4985973.868 ops/s
Iteration   3: 5006959.268 ops/s
Iteration   4: 4981435.941 ops/s
Iteration   5: 4893555.645 ops/s
Iteration   6: 4957881.342 ops/s
Iteration   7: 5019148.311 ops/s
Iteration   8: 5002533.702 ops/s
Iteration   9: 5022290.304 ops/s
Iteration  10: 4985848.924 ops/s
Iteration  11: 5011181.875 ops/s
Iteration  12: 4970628.446 ops/s
Iteration  13: 5054533.867 ops/s
Iteration  14: 4993019.222 ops/s
Iteration  15: 5009294.317 ops/s
Iteration  16: 5000636.143 ops/s
Iteration  17: 5013657.809 ops/s
Iteration  18: 4971922.734 ops/s
Iteration  19: 5024006.118 ops/s
Iteration  20: 4980706.245 ops/s
Iteration  21: 4976672.737 ops/s
Iteration  22: 4939079.482 ops/s
Iteration  23: 5005627.214 ops/s
Iteration  24: 5019490.170 ops/s
Iteration  25: 4965480.932 ops/s
Iteration  26: 4989942.724 ops/s
Iteration  27: 4977881.306 ops/s
Iteration  28: 4958571.008 ops/s
Iteration  29: 4981151.129 ops/s
Iteration  30: 4962717.716 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_sumOfLong":
  4988866.380 ±(99.9%) 20383.815 ops/s [Average]
  (min, avg, max) = (4893555.645, 4988866.380, 5054533.867), stdev = 30509.537
  CI (99.9%): [4968482.565, 5009250.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_sumOfLong  thrpt   30  4988866.380 ± 20383.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1383841.502 ops/s
# Warmup Iteration   2: 3260235.225 ops/s
# Warmup Iteration   3: 3296722.447 ops/s
# Warmup Iteration   4: 2755232.133 ops/s
# Warmup Iteration   5: 3292237.581 ops/s
# Warmup Iteration   6: 3289173.068 ops/s
# Warmup Iteration   7: 3303673.356 ops/s
# Warmup Iteration   8: 3305207.343 ops/s
# Warmup Iteration   9: 3292465.029 ops/s
# Warmup Iteration  10: 3311821.458 ops/s
# Warmup Iteration  11: 3285063.061 ops/s
# Warmup Iteration  12: 3300903.190 ops/s
# Warmup Iteration  13: 3308863.073 ops/s
# Warmup Iteration  14: 3293946.474 ops/s
# Warmup Iteration  15: 3277270.220 ops/s
# Warmup Iteration  16: 3279033.208 ops/s
# Warmup Iteration  17: 3292935.664 ops/s
# Warmup Iteration  18: 3303825.049 ops/s
# Warmup Iteration  19: 3308212.283 ops/s
# Warmup Iteration  20: 3318288.176 ops/s
# Warmup Iteration  21: 3322409.948 ops/s
# Warmup Iteration  22: 3301627.183 ops/s
# Warmup Iteration  23: 3322613.048 ops/s
# Warmup Iteration  24: 3303580.677 ops/s
# Warmup Iteration  25: 3318762.768 ops/s
# Warmup Iteration  26: 3332190.113 ops/s
# Warmup Iteration  27: 3322028.362 ops/s
# Warmup Iteration  28: 3317730.439 ops/s
# Warmup Iteration  29: 3305017.474 ops/s
# Warmup Iteration  30: 3308393.959 ops/s
Iteration   1: 3294005.688 ops/s
Iteration   2: 3283302.853 ops/s
Iteration   3: 3299862.052 ops/s
Iteration   4: 3313048.158 ops/s
Iteration   5: 3298254.883 ops/s
Iteration   6: 3327133.660 ops/s
Iteration   7: 3325875.896 ops/s
Iteration   8: 3314575.429 ops/s
Iteration   9: 3297704.126 ops/s
Iteration  10: 3320043.854 ops/s
Iteration  11: 3307576.307 ops/s
Iteration  12: 3309162.953 ops/s
Iteration  13: 3327177.586 ops/s
Iteration  14: 3314408.832 ops/s
Iteration  15: 3322411.076 ops/s
Iteration  16: 3283919.710 ops/s
Iteration  17: 3308503.452 ops/s
Iteration  18: 3325277.845 ops/s
Iteration  19: 3303861.281 ops/s
Iteration  20: 3303609.051 ops/s
Iteration  21: 3298985.037 ops/s
Iteration  22: 3342871.221 ops/s
Iteration  23: 3321995.247 ops/s
Iteration  24: 3308985.945 ops/s
Iteration  25: 3302195.588 ops/s
Iteration  26: 3315053.408 ops/s
Iteration  27: 3317407.731 ops/s
Iteration  28: 3305930.941 ops/s
Iteration  29: 3301999.524 ops/s
Iteration  30: 3323172.251 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_tap":
  3310610.386 ±(99.9%) 8978.805 ops/s [Average]
  (min, avg, max) = (3283302.853, 3310610.386, 3342871.221), stdev = 13439.054
  CI (99.9%): [3301631.581, 3319589.191] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_tap  thrpt   30  3310610.386 ± 8978.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testAggregateBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testAggregateBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1026623.107 ops/s
# Warmup Iteration   2: 1794194.889 ops/s
# Warmup Iteration   3: 2037206.862 ops/s
# Warmup Iteration   4: 2038765.389 ops/s
# Warmup Iteration   5: 2052357.680 ops/s
# Warmup Iteration   6: 1703025.177 ops/s
# Warmup Iteration   7: 2041794.749 ops/s
# Warmup Iteration   8: 2058263.695 ops/s
# Warmup Iteration   9: 2043547.872 ops/s
# Warmup Iteration  10: 2042426.630 ops/s
# Warmup Iteration  11: 2053956.792 ops/s
# Warmup Iteration  12: 2052843.749 ops/s
# Warmup Iteration  13: 2058312.674 ops/s
# Warmup Iteration  14: 2054216.113 ops/s
# Warmup Iteration  15: 2042041.717 ops/s
# Warmup Iteration  16: 2043822.144 ops/s
# Warmup Iteration  17: 2049341.531 ops/s
# Warmup Iteration  18: 2051598.962 ops/s
# Warmup Iteration  19: 2055361.531 ops/s
# Warmup Iteration  20: 2050571.122 ops/s
# Warmup Iteration  21: 2049708.814 ops/s
# Warmup Iteration  22: 2052229.917 ops/s
# Warmup Iteration  23: 2049786.807 ops/s
# Warmup Iteration  24: 2055506.941 ops/s
# Warmup Iteration  25: 2052683.559 ops/s
# Warmup Iteration  26: 2048946.080 ops/s
# Warmup Iteration  27: 2049349.790 ops/s
# Warmup Iteration  28: 2027836.940 ops/s
# Warmup Iteration  29: 2052515.595 ops/s
# Warmup Iteration  30: 2042739.677 ops/s
Iteration   1: 2054839.356 ops/s
Iteration   2: 2051198.849 ops/s
Iteration   3: 2042835.877 ops/s
Iteration   4: 2040614.408 ops/s
Iteration   5: 2064507.004 ops/s
Iteration   6: 2051032.446 ops/s
Iteration   7: 2043191.203 ops/s
Iteration   8: 2054981.413 ops/s
Iteration   9: 2041814.068 ops/s
Iteration  10: 2051629.567 ops/s
Iteration  11: 2045588.067 ops/s
Iteration  12: 2070286.707 ops/s
Iteration  13: 2048449.263 ops/s
Iteration  14: 2044524.366 ops/s
Iteration  15: 2051962.024 ops/s
Iteration  16: 2053257.764 ops/s
Iteration  17: 2043854.121 ops/s
Iteration  18: 2036997.762 ops/s
Iteration  19: 2051625.924 ops/s
Iteration  20: 2054441.263 ops/s
Iteration  21: 2042599.491 ops/s
Iteration  22: 2061922.367 ops/s
Iteration  23: 2041828.036 ops/s
Iteration  24: 2068278.867 ops/s
Iteration  25: 2049043.400 ops/s
Iteration  26: 2064047.090 ops/s
Iteration  27: 2056020.836 ops/s
Iteration  28: 2042894.333 ops/s
Iteration  29: 2056101.078 ops/s
Iteration  30: 2045741.369 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testAggregateBy":
  2050870.277 ±(99.9%) 5738.098 ops/s [Average]
  (min, avg, max) = (2036997.762, 2050870.277, 2070286.707), stdev = 8588.516
  CI (99.9%): [2045132.179, 2056608.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_testAggregateBy  thrpt   30  2050870.277 ± 5738.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3424371.275 ops/s
# Warmup Iteration   2: 6463183.513 ops/s
# Warmup Iteration   3: 6393616.178 ops/s
# Warmup Iteration   4: 6988534.117 ops/s
# Warmup Iteration   5: 6977885.024 ops/s
# Warmup Iteration   6: 6943501.699 ops/s
# Warmup Iteration   7: 6921646.027 ops/s
# Warmup Iteration   8: 7017555.038 ops/s
# Warmup Iteration   9: 6942880.750 ops/s
# Warmup Iteration  10: 6912486.039 ops/s
# Warmup Iteration  11: 7009500.577 ops/s
# Warmup Iteration  12: 6987735.874 ops/s
# Warmup Iteration  13: 6921449.557 ops/s
# Warmup Iteration  14: 6955716.357 ops/s
# Warmup Iteration  15: 6921449.199 ops/s
# Warmup Iteration  16: 6862640.156 ops/s
# Warmup Iteration  17: 6854367.699 ops/s
# Warmup Iteration  18: 7028225.293 ops/s
# Warmup Iteration  19: 6905207.958 ops/s
# Warmup Iteration  20: 6967231.987 ops/s
# Warmup Iteration  21: 6991085.047 ops/s
# Warmup Iteration  22: 6970184.247 ops/s
# Warmup Iteration  23: 7004785.213 ops/s
# Warmup Iteration  24: 6903054.784 ops/s
# Warmup Iteration  25: 6961266.171 ops/s
# Warmup Iteration  26: 6976221.551 ops/s
# Warmup Iteration  27: 6949878.386 ops/s
# Warmup Iteration  28: 6977402.469 ops/s
# Warmup Iteration  29: 6970244.991 ops/s
# Warmup Iteration  30: 6829012.403 ops/s
Iteration   1: 6951541.362 ops/s
Iteration   2: 7010772.109 ops/s
Iteration   3: 7081603.186 ops/s
Iteration   4: 6982451.282 ops/s
Iteration   5: 7009135.183 ops/s
Iteration   6: 6980974.120 ops/s
Iteration   7: 6967706.799 ops/s
Iteration   8: 6977617.182 ops/s
Iteration   9: 6966573.131 ops/s
Iteration  10: 6976500.202 ops/s
Iteration  11: 6981251.019 ops/s
Iteration  12: 6928102.331 ops/s
Iteration  13: 6994428.207 ops/s
Iteration  14: 6974066.144 ops/s
Iteration  15: 6949018.863 ops/s
Iteration  16: 6922281.645 ops/s
Iteration  17: 6933272.368 ops/s
Iteration  18: 6920609.902 ops/s
Iteration  19: 7025691.008 ops/s
Iteration  20: 6951125.754 ops/s
Iteration  21: 6930200.522 ops/s
Iteration  22: 6930802.117 ops/s
Iteration  23: 7000053.481 ops/s
Iteration  24: 7029009.571 ops/s
Iteration  25: 7030862.822 ops/s
Iteration  26: 6975534.965 ops/s
Iteration  27: 6865140.734 ops/s
Iteration  28: 6971889.116 ops/s
Iteration  29: 6886985.006 ops/s
Iteration  30: 6947794.005 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testClone":
  6968433.138 ±(99.9%) 29979.696 ops/s [Average]
  (min, avg, max) = (6865140.734, 6968433.138, 7081603.186), stdev = 44872.201
  CI (99.9%): [6938453.442, 6998412.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_testClone  thrpt   30  6968433.138 ± 29979.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2111016.400 ops/s
# Warmup Iteration   2: 4689688.391 ops/s
# Warmup Iteration   3: 3935389.066 ops/s
# Warmup Iteration   4: 4699191.442 ops/s
# Warmup Iteration   5: 4720204.412 ops/s
# Warmup Iteration   6: 4720865.409 ops/s
# Warmup Iteration   7: 4722124.177 ops/s
# Warmup Iteration   8: 4736095.991 ops/s
# Warmup Iteration   9: 4731165.601 ops/s
# Warmup Iteration  10: 4720538.989 ops/s
# Warmup Iteration  11: 4711946.834 ops/s
# Warmup Iteration  12: 4738150.620 ops/s
# Warmup Iteration  13: 4696411.563 ops/s
# Warmup Iteration  14: 4717310.635 ops/s
# Warmup Iteration  15: 4711837.149 ops/s
# Warmup Iteration  16: 4717938.877 ops/s
# Warmup Iteration  17: 4727745.966 ops/s
# Warmup Iteration  18: 4729263.057 ops/s
# Warmup Iteration  19: 4748877.030 ops/s
# Warmup Iteration  20: 4733549.270 ops/s
# Warmup Iteration  21: 4740683.542 ops/s
# Warmup Iteration  22: 4748473.373 ops/s
# Warmup Iteration  23: 4735015.369 ops/s
# Warmup Iteration  24: 4744691.598 ops/s
# Warmup Iteration  25: 4730774.338 ops/s
# Warmup Iteration  26: 4739692.395 ops/s
# Warmup Iteration  27: 4722962.005 ops/s
# Warmup Iteration  28: 4741309.114 ops/s
# Warmup Iteration  29: 4709187.606 ops/s
# Warmup Iteration  30: 4693558.840 ops/s
Iteration   1: 4679559.918 ops/s
Iteration   2: 4722001.652 ops/s
Iteration   3: 4705101.883 ops/s
Iteration   4: 4716134.905 ops/s
Iteration   5: 4731160.868 ops/s
Iteration   6: 4727118.181 ops/s
Iteration   7: 4704629.002 ops/s
Iteration   8: 4727494.325 ops/s
Iteration   9: 4726833.641 ops/s
Iteration  10: 4724689.621 ops/s
Iteration  11: 4721505.390 ops/s
Iteration  12: 4745782.724 ops/s
Iteration  13: 4712467.912 ops/s
Iteration  14: 4730741.024 ops/s
Iteration  15: 4708280.554 ops/s
Iteration  16: 4739479.227 ops/s
Iteration  17: 4732255.173 ops/s
Iteration  18: 4715300.281 ops/s
Iteration  19: 4706883.466 ops/s
Iteration  20: 4747069.091 ops/s
Iteration  21: 4731665.819 ops/s
Iteration  22: 4714497.127 ops/s
Iteration  23: 4727068.001 ops/s
Iteration  24: 4721564.741 ops/s
Iteration  25: 4743439.866 ops/s
Iteration  26: 4699569.594 ops/s
Iteration  27: 4749048.005 ops/s
Iteration  28: 4719295.632 ops/s
Iteration  29: 4698612.032 ops/s
Iteration  30: 4739466.630 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMap":
  4722290.543 ±(99.9%) 10783.352 ops/s [Average]
  (min, avg, max) = (4679559.918, 4722290.543, 4749048.005), stdev = 16140.015
  CI (99.9%): [4711507.191, 4733073.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_testNewMap  thrpt   30  4722290.543 ± 10783.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1660722.045 ops/s
# Warmup Iteration   2: 3731157.547 ops/s
# Warmup Iteration   3: 3173431.515 ops/s
# Warmup Iteration   4: 3807785.301 ops/s
# Warmup Iteration   5: 3790625.421 ops/s
# Warmup Iteration   6: 3806887.256 ops/s
# Warmup Iteration   7: 3791702.767 ops/s
# Warmup Iteration   8: 3823466.191 ops/s
# Warmup Iteration   9: 3812683.121 ops/s
# Warmup Iteration  10: 3801396.602 ops/s
# Warmup Iteration  11: 3811377.698 ops/s
# Warmup Iteration  12: 3811209.912 ops/s
# Warmup Iteration  13: 3817884.206 ops/s
# Warmup Iteration  14: 3805073.738 ops/s
# Warmup Iteration  15: 3782648.139 ops/s
# Warmup Iteration  16: 3805113.965 ops/s
# Warmup Iteration  17: 3793896.981 ops/s
# Warmup Iteration  18: 3809398.509 ops/s
# Warmup Iteration  19: 3819617.549 ops/s
# Warmup Iteration  20: 3812535.652 ops/s
# Warmup Iteration  21: 3829324.954 ops/s
# Warmup Iteration  22: 3824072.041 ops/s
# Warmup Iteration  23: 3816794.172 ops/s
# Warmup Iteration  24: 3794877.093 ops/s
# Warmup Iteration  25: 3821649.567 ops/s
# Warmup Iteration  26: 3792872.623 ops/s
# Warmup Iteration  27: 3792622.133 ops/s
# Warmup Iteration  28: 3812512.512 ops/s
# Warmup Iteration  29: 3804574.335 ops/s
# Warmup Iteration  30: 3833749.499 ops/s
Iteration   1: 3801419.911 ops/s
Iteration   2: 3829788.624 ops/s
Iteration   3: 3831665.552 ops/s
Iteration   4: 3806123.279 ops/s
Iteration   5: 3804693.212 ops/s
Iteration   6: 3834204.545 ops/s
Iteration   7: 3810517.743 ops/s
Iteration   8: 3817445.439 ops/s
Iteration   9: 3810298.730 ops/s
Iteration  10: 3792726.161 ops/s
Iteration  11: 3776181.573 ops/s
Iteration  12: 3787264.529 ops/s
Iteration  13: 3818997.495 ops/s
Iteration  14: 3795578.265 ops/s
Iteration  15: 3819036.640 ops/s
Iteration  16: 3806949.996 ops/s
Iteration  17: 3787005.758 ops/s
Iteration  18: 3817850.527 ops/s
Iteration  19: 3791248.575 ops/s
Iteration  20: 3799132.614 ops/s
Iteration  21: 3817808.232 ops/s
Iteration  22: 3817119.997 ops/s
Iteration  23: 3797553.826 ops/s
Iteration  24: 3805304.427 ops/s
Iteration  25: 3825365.763 ops/s
Iteration  26: 3810952.054 ops/s
Iteration  27: 3801612.477 ops/s
Iteration  28: 3773049.553 ops/s
Iteration  29: 3747658.723 ops/s
Iteration  30: 3773328.411 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue":
  3803596.088 ±(99.9%) 13000.651 ops/s [Average]
  (min, avg, max) = (3747658.723, 3803596.088, 3834204.545), stdev = 19458.764
  CI (99.9%): [3790595.437, 3816596.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_testNewMapWithKeyValue  thrpt   30  3803596.088 ± 13000.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 942062.674 ops/s
# Warmup Iteration   2: 2174444.263 ops/s
# Warmup Iteration   3: 1787523.167 ops/s
# Warmup Iteration   4: 2164243.753 ops/s
# Warmup Iteration   5: 2160527.979 ops/s
# Warmup Iteration   6: 2181614.787 ops/s
# Warmup Iteration   7: 2154745.383 ops/s
# Warmup Iteration   8: 2175158.761 ops/s
# Warmup Iteration   9: 2165200.038 ops/s
# Warmup Iteration  10: 2173796.529 ops/s
# Warmup Iteration  11: 2165499.473 ops/s
# Warmup Iteration  12: 2161277.340 ops/s
# Warmup Iteration  13: 2190948.031 ops/s
# Warmup Iteration  14: 2174146.721 ops/s
# Warmup Iteration  15: 2186912.576 ops/s
# Warmup Iteration  16: 2170133.507 ops/s
# Warmup Iteration  17: 2165772.906 ops/s
# Warmup Iteration  18: 2165917.100 ops/s
# Warmup Iteration  19: 2161881.905 ops/s
# Warmup Iteration  20: 2152982.722 ops/s
# Warmup Iteration  21: 2176364.422 ops/s
# Warmup Iteration  22: 2162349.606 ops/s
# Warmup Iteration  23: 2156202.297 ops/s
# Warmup Iteration  24: 2181284.144 ops/s
# Warmup Iteration  25: 2149000.868 ops/s
# Warmup Iteration  26: 2154943.586 ops/s
# Warmup Iteration  27: 2170711.903 ops/s
# Warmup Iteration  28: 2155933.151 ops/s
# Warmup Iteration  29: 2149233.712 ops/s
# Warmup Iteration  30: 2154212.918 ops/s
Iteration   1: 2145740.643 ops/s
Iteration   2: 2165017.327 ops/s
Iteration   3: 2159568.571 ops/s
Iteration   4: 2156316.099 ops/s
Iteration   5: 2186075.611 ops/s
Iteration   6: 2179649.887 ops/s
Iteration   7: 2156049.771 ops/s
Iteration   8: 2168916.060 ops/s
Iteration   9: 2158134.855 ops/s
Iteration  10: 2157474.693 ops/s
Iteration  11: 2173973.594 ops/s
Iteration  12: 2165113.641 ops/s
Iteration  13: 2136432.272 ops/s
Iteration  14: 2193654.268 ops/s
Iteration  15: 2183523.498 ops/s
Iteration  16: 2161878.894 ops/s
Iteration  17: 2173115.379 ops/s
Iteration  18: 2163872.237 ops/s
Iteration  19: 2160423.349 ops/s
Iteration  20: 2156003.335 ops/s
Iteration  21: 2170102.663 ops/s
Iteration  22: 2159941.650 ops/s
Iteration  23: 2175204.307 ops/s
Iteration  24: 2150686.152 ops/s
Iteration  25: 2187886.871 ops/s
Iteration  26: 2191513.768 ops/s
Iteration  27: 2176270.254 ops/s
Iteration  28: 2172122.866 ops/s
Iteration  29: 2163138.157 ops/s
Iteration  30: 2163971.461 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_testToString":
  2167059.071 ±(99.9%) 8960.195 ops/s [Average]
  (min, avg, max) = (2136432.272, 2167059.071, 2193654.268), stdev = 13411.199
  CI (99.9%): [2158098.876, 2176019.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_testToString  thrpt   30  2167059.071 ± 8960.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_test_toString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_test_toString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1215308.379 ops/s
# Warmup Iteration   2: 2709499.435 ops/s
# Warmup Iteration   3: 2699230.889 ops/s
# Warmup Iteration   4: 2254856.468 ops/s
# Warmup Iteration   5: 2697179.322 ops/s
# Warmup Iteration   6: 2674172.990 ops/s
# Warmup Iteration   7: 2692360.611 ops/s
# Warmup Iteration   8: 2703275.185 ops/s
# Warmup Iteration   9: 2693850.062 ops/s
# Warmup Iteration  10: 2705010.694 ops/s
# Warmup Iteration  11: 2690232.274 ops/s
# Warmup Iteration  12: 2698316.874 ops/s
# Warmup Iteration  13: 2695864.266 ops/s
# Warmup Iteration  14: 2667687.074 ops/s
# Warmup Iteration  15: 2685113.707 ops/s
# Warmup Iteration  16: 2684708.430 ops/s
# Warmup Iteration  17: 2700066.098 ops/s
# Warmup Iteration  18: 2693934.470 ops/s
# Warmup Iteration  19: 2715715.624 ops/s
# Warmup Iteration  20: 2724075.155 ops/s
# Warmup Iteration  21: 2700760.634 ops/s
# Warmup Iteration  22: 2714173.203 ops/s
# Warmup Iteration  23: 2715859.996 ops/s
# Warmup Iteration  24: 2726286.196 ops/s
# Warmup Iteration  25: 2702939.380 ops/s
# Warmup Iteration  26: 2712020.553 ops/s
# Warmup Iteration  27: 2712580.720 ops/s
# Warmup Iteration  28: 2702389.363 ops/s
# Warmup Iteration  29: 2694039.658 ops/s
# Warmup Iteration  30: 2723506.264 ops/s
Iteration   1: 2701305.723 ops/s
Iteration   2: 2705508.389 ops/s
Iteration   3: 2704135.266 ops/s
Iteration   4: 2747614.334 ops/s
Iteration   5: 2704707.146 ops/s
Iteration   6: 2710634.408 ops/s
Iteration   7: 2683912.495 ops/s
Iteration   8: 2689184.575 ops/s
Iteration   9: 2714545.469 ops/s
Iteration  10: 2708055.593 ops/s
Iteration  11: 2700307.780 ops/s
Iteration  12: 2723531.971 ops/s
Iteration  13: 2716238.605 ops/s
Iteration  14: 2727599.282 ops/s
Iteration  15: 2721458.429 ops/s
Iteration  16: 2711823.201 ops/s
Iteration  17: 2695213.119 ops/s
Iteration  18: 2691293.851 ops/s
Iteration  19: 2704399.282 ops/s
Iteration  20: 2709757.014 ops/s
Iteration  21: 2712715.914 ops/s
Iteration  22: 2700649.680 ops/s
Iteration  23: 2700076.047 ops/s
Iteration  24: 2681456.668 ops/s
Iteration  25: 2694503.609 ops/s
Iteration  26: 2711810.112 ops/s
Iteration  27: 2676314.629 ops/s
Iteration  28: 2709289.109 ops/s
Iteration  29: 2704027.575 ops/s
Iteration  30: 2692466.409 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_test_toString":
  2705151.189 ±(99.9%) 9686.983 ops/s [Average]
  (min, avg, max) = (2676314.629, 2705151.189, 2747614.334), stdev = 14499.022
  CI (99.9%): [2695464.206, 2714838.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_test_toString  thrpt   30  2705151.189 ± 9686.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661184.796 ops/s
# Warmup Iteration   2: 1560156.049 ops/s
# Warmup Iteration   3: 1622562.958 ops/s
# Warmup Iteration   4: 1362456.175 ops/s
# Warmup Iteration   5: 1616204.416 ops/s
# Warmup Iteration   6: 1627720.042 ops/s
# Warmup Iteration   7: 1629911.755 ops/s
# Warmup Iteration   8: 1633999.946 ops/s
# Warmup Iteration   9: 1628253.092 ops/s
# Warmup Iteration  10: 1634258.735 ops/s
# Warmup Iteration  11: 1632148.668 ops/s
# Warmup Iteration  12: 1626045.145 ops/s
# Warmup Iteration  13: 1630449.225 ops/s
# Warmup Iteration  14: 1635678.894 ops/s
# Warmup Iteration  15: 1638284.546 ops/s
# Warmup Iteration  16: 1642849.420 ops/s
# Warmup Iteration  17: 1635347.723 ops/s
# Warmup Iteration  18: 1635827.265 ops/s
# Warmup Iteration  19: 1622669.096 ops/s
# Warmup Iteration  20: 1638630.804 ops/s
# Warmup Iteration  21: 1638711.090 ops/s
# Warmup Iteration  22: 1633821.132 ops/s
# Warmup Iteration  23: 1631075.052 ops/s
# Warmup Iteration  24: 1634539.773 ops/s
# Warmup Iteration  25: 1633991.545 ops/s
# Warmup Iteration  26: 1630814.485 ops/s
# Warmup Iteration  27: 1638070.557 ops/s
# Warmup Iteration  28: 1633317.675 ops/s
# Warmup Iteration  29: 1639958.407 ops/s
# Warmup Iteration  30: 1636095.311 ops/s
Iteration   1: 1628294.659 ops/s
Iteration   2: 1630231.801 ops/s
Iteration   3: 1632772.458 ops/s
Iteration   4: 1628532.301 ops/s
Iteration   5: 1623529.144 ops/s
Iteration   6: 1631272.506 ops/s
Iteration   7: 1623532.860 ops/s
Iteration   8: 1643214.357 ops/s
Iteration   9: 1636300.395 ops/s
Iteration  10: 1631769.540 ops/s
Iteration  11: 1634800.078 ops/s
Iteration  12: 1639444.785 ops/s
Iteration  13: 1624388.929 ops/s
Iteration  14: 1625439.047 ops/s
Iteration  15: 1639342.689 ops/s
Iteration  16: 1627489.051 ops/s
Iteration  17: 1641119.070 ops/s
Iteration  18: 1634482.475 ops/s
Iteration  19: 1641337.577 ops/s
Iteration  20: 1635268.111 ops/s
Iteration  21: 1635794.149 ops/s
Iteration  22: 1636275.846 ops/s
Iteration  23: 1617900.567 ops/s
Iteration  24: 1625135.287 ops/s
Iteration  25: 1628355.084 ops/s
Iteration  26: 1631768.195 ops/s
Iteration  27: 1628367.549 ops/s
Iteration  28: 1625081.796 ops/s
Iteration  29: 1637055.107 ops/s
Iteration  30: 1633983.783 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toArray":
  1631742.640 ±(99.9%) 4159.343 ops/s [Average]
  (min, avg, max) = (1617900.567, 1631742.640, 1643214.357), stdev = 6225.510
  CI (99.9%): [1627583.297, 1635901.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toArray  thrpt   30  1631742.640 ± 4159.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694970.678 ops/s
# Warmup Iteration   2: 1358132.305 ops/s
# Warmup Iteration   3: 1487283.701 ops/s
# Warmup Iteration   4: 1496221.037 ops/s
# Warmup Iteration   5: 1238412.356 ops/s
# Warmup Iteration   6: 1505877.642 ops/s
# Warmup Iteration   7: 1515763.748 ops/s
# Warmup Iteration   8: 1506714.880 ops/s
# Warmup Iteration   9: 1507535.694 ops/s
# Warmup Iteration  10: 1514053.094 ops/s
# Warmup Iteration  11: 1507171.320 ops/s
# Warmup Iteration  12: 1498561.742 ops/s
# Warmup Iteration  13: 1502115.298 ops/s
# Warmup Iteration  14: 1498439.767 ops/s
# Warmup Iteration  15: 1499501.293 ops/s
# Warmup Iteration  16: 1497751.868 ops/s
# Warmup Iteration  17: 1501423.832 ops/s
# Warmup Iteration  18: 1503104.660 ops/s
# Warmup Iteration  19: 1499414.096 ops/s
# Warmup Iteration  20: 1506016.822 ops/s
# Warmup Iteration  21: 1505953.972 ops/s
# Warmup Iteration  22: 1501388.791 ops/s
# Warmup Iteration  23: 1508942.926 ops/s
# Warmup Iteration  24: 1506721.618 ops/s
# Warmup Iteration  25: 1509081.958 ops/s
# Warmup Iteration  26: 1507022.470 ops/s
# Warmup Iteration  27: 1501701.325 ops/s
# Warmup Iteration  28: 1506770.510 ops/s
# Warmup Iteration  29: 1495438.987 ops/s
# Warmup Iteration  30: 1505561.300 ops/s
Iteration   1: 1501503.211 ops/s
Iteration   2: 1502432.805 ops/s
Iteration   3: 1503969.001 ops/s
Iteration   4: 1502075.249 ops/s
Iteration   5: 1494817.199 ops/s
Iteration   6: 1502079.341 ops/s
Iteration   7: 1507480.479 ops/s
Iteration   8: 1498195.231 ops/s
Iteration   9: 1489157.689 ops/s
Iteration  10: 1496877.715 ops/s
Iteration  11: 1505393.821 ops/s
Iteration  12: 1498791.659 ops/s
Iteration  13: 1497518.288 ops/s
Iteration  14: 1493754.941 ops/s
Iteration  15: 1491391.071 ops/s
Iteration  16: 1500763.251 ops/s
Iteration  17: 1508914.275 ops/s
Iteration  18: 1504084.674 ops/s
Iteration  19: 1503528.051 ops/s
Iteration  20: 1487127.319 ops/s
Iteration  21: 1484783.087 ops/s
Iteration  22: 1498551.613 ops/s
Iteration  23: 1504085.882 ops/s
Iteration  24: 1490882.112 ops/s
Iteration  25: 1488121.866 ops/s
Iteration  26: 1493875.721 ops/s
Iteration  27: 1508385.920 ops/s
Iteration  28: 1494761.457 ops/s
Iteration  29: 1498854.798 ops/s
Iteration  30: 1495621.233 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toBag":
  1498259.299 ±(99.9%) 4315.770 ops/s [Average]
  (min, avg, max) = (1484783.087, 1498259.299, 1508914.275), stdev = 6459.643
  CI (99.9%): [1493943.528, 1502575.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toBag  thrpt   30  1498259.299 ± 4315.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 858280.405 ops/s
# Warmup Iteration   2: 2068350.999 ops/s
# Warmup Iteration   3: 1875064.998 ops/s
# Warmup Iteration   4: 1897363.038 ops/s
# Warmup Iteration   5: 2060527.113 ops/s
# Warmup Iteration   6: 2045014.219 ops/s
# Warmup Iteration   7: 2067868.121 ops/s
# Warmup Iteration   8: 2053246.736 ops/s
# Warmup Iteration   9: 2055044.798 ops/s
# Warmup Iteration  10: 2057878.559 ops/s
# Warmup Iteration  11: 2050504.410 ops/s
# Warmup Iteration  12: 2057322.823 ops/s
# Warmup Iteration  13: 2057273.546 ops/s
# Warmup Iteration  14: 2068378.738 ops/s
# Warmup Iteration  15: 2070321.828 ops/s
# Warmup Iteration  16: 2057633.000 ops/s
# Warmup Iteration  17: 2071333.744 ops/s
# Warmup Iteration  18: 2067231.007 ops/s
# Warmup Iteration  19: 2059581.555 ops/s
# Warmup Iteration  20: 2074104.882 ops/s
# Warmup Iteration  21: 2062561.965 ops/s
# Warmup Iteration  22: 2060043.690 ops/s
# Warmup Iteration  23: 2069233.285 ops/s
# Warmup Iteration  24: 2066693.285 ops/s
# Warmup Iteration  25: 2061855.230 ops/s
# Warmup Iteration  26: 2068402.756 ops/s
# Warmup Iteration  27: 2051648.641 ops/s
# Warmup Iteration  28: 2055763.976 ops/s
# Warmup Iteration  29: 2061864.739 ops/s
# Warmup Iteration  30: 2067216.958 ops/s
Iteration   1: 2056055.215 ops/s
Iteration   2: 2053275.883 ops/s
Iteration   3: 2070270.962 ops/s
Iteration   4: 2039634.830 ops/s
Iteration   5: 2067946.572 ops/s
Iteration   6: 2054760.458 ops/s
Iteration   7: 2066885.888 ops/s
Iteration   8: 2067297.734 ops/s
Iteration   9: 2070369.958 ops/s
Iteration  10: 2055237.295 ops/s
Iteration  11: 2069489.742 ops/s
Iteration  12: 2059520.928 ops/s
Iteration  13: 2079899.126 ops/s
Iteration  14: 2060462.745 ops/s
Iteration  15: 2071532.895 ops/s
Iteration  16: 2076048.787 ops/s
Iteration  17: 2072612.249 ops/s
Iteration  18: 2067065.764 ops/s
Iteration  19: 2068207.606 ops/s
Iteration  20: 2054605.544 ops/s
Iteration  21: 2043925.814 ops/s
Iteration  22: 2051693.217 ops/s
Iteration  23: 2063356.482 ops/s
Iteration  24: 2071455.777 ops/s
Iteration  25: 2075224.537 ops/s
Iteration  26: 2065130.789 ops/s
Iteration  27: 2064364.215 ops/s
Iteration  28: 2065171.806 ops/s
Iteration  29: 2067775.498 ops/s
Iteration  30: 2067248.942 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toImmutable":
  2063884.242 ±(99.9%) 6227.021 ops/s [Average]
  (min, avg, max) = (2039634.830, 2063884.242, 2079899.126), stdev = 9320.312
  CI (99.9%): [2057657.221, 2070111.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toImmutable  thrpt   30  2063884.242 ± 6227.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1753028.659 ops/s
# Warmup Iteration   2: 4129938.432 ops/s
# Warmup Iteration   3: 3515424.704 ops/s
# Warmup Iteration   4: 4177621.352 ops/s
# Warmup Iteration   5: 4210993.820 ops/s
# Warmup Iteration   6: 4249340.190 ops/s
# Warmup Iteration   7: 4217114.752 ops/s
# Warmup Iteration   8: 4220917.757 ops/s
# Warmup Iteration   9: 4222324.412 ops/s
# Warmup Iteration  10: 4221708.020 ops/s
# Warmup Iteration  11: 4209318.650 ops/s
# Warmup Iteration  12: 4207971.392 ops/s
# Warmup Iteration  13: 4211925.128 ops/s
# Warmup Iteration  14: 4226595.298 ops/s
# Warmup Iteration  15: 4229874.628 ops/s
# Warmup Iteration  16: 4209940.940 ops/s
# Warmup Iteration  17: 4186901.217 ops/s
# Warmup Iteration  18: 4182073.846 ops/s
# Warmup Iteration  19: 4211244.754 ops/s
# Warmup Iteration  20: 4190054.629 ops/s
# Warmup Iteration  21: 4213330.264 ops/s
# Warmup Iteration  22: 4204292.915 ops/s
# Warmup Iteration  23: 4200471.907 ops/s
# Warmup Iteration  24: 4226089.185 ops/s
# Warmup Iteration  25: 4201862.129 ops/s
# Warmup Iteration  26: 4189960.289 ops/s
# Warmup Iteration  27: 4217796.515 ops/s
# Warmup Iteration  28: 4223017.690 ops/s
# Warmup Iteration  29: 4208232.668 ops/s
# Warmup Iteration  30: 4211109.716 ops/s
Iteration   1: 4203009.035 ops/s
Iteration   2: 4196316.613 ops/s
Iteration   3: 4225448.693 ops/s
Iteration   4: 4245925.005 ops/s
Iteration   5: 4188960.851 ops/s
Iteration   6: 4198034.218 ops/s
Iteration   7: 4241720.518 ops/s
Iteration   8: 4204625.672 ops/s
Iteration   9: 4200215.429 ops/s
Iteration  10: 4215653.667 ops/s
Iteration  11: 4197894.005 ops/s
Iteration  12: 4187885.993 ops/s
Iteration  13: 4206131.867 ops/s
Iteration  14: 4211910.083 ops/s
Iteration  15: 4208552.490 ops/s
Iteration  16: 4227082.299 ops/s
Iteration  17: 4159551.356 ops/s
Iteration  18: 4222895.184 ops/s
Iteration  19: 4206492.216 ops/s
Iteration  20: 4193651.978 ops/s
Iteration  21: 4186402.152 ops/s
Iteration  22: 4210463.772 ops/s
Iteration  23: 4158637.675 ops/s
Iteration  24: 4183309.860 ops/s
Iteration  25: 4220460.967 ops/s
Iteration  26: 4200050.754 ops/s
Iteration  27: 4225440.090 ops/s
Iteration  28: 4204179.176 ops/s
Iteration  29: 4203376.238 ops/s
Iteration  30: 4208279.213 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toList":
  4204751.902 ±(99.9%) 13048.578 ops/s [Average]
  (min, avg, max) = (4158637.675, 4204751.902, 4245925.005), stdev = 19530.499
  CI (99.9%): [4191703.324, 4217800.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toList  thrpt   30  4204751.902 ± 13048.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1602870.831 ops/s
# Warmup Iteration   2: 3948264.875 ops/s
# Warmup Iteration   3: 3644725.728 ops/s
# Warmup Iteration   4: 3586248.796 ops/s
# Warmup Iteration   5: 3956125.884 ops/s
# Warmup Iteration   6: 3955852.245 ops/s
# Warmup Iteration   7: 3957917.526 ops/s
# Warmup Iteration   8: 3955637.550 ops/s
# Warmup Iteration   9: 3969039.469 ops/s
# Warmup Iteration  10: 3939123.234 ops/s
# Warmup Iteration  11: 3956052.876 ops/s
# Warmup Iteration  12: 3969776.474 ops/s
# Warmup Iteration  13: 3970889.626 ops/s
# Warmup Iteration  14: 3961197.612 ops/s
# Warmup Iteration  15: 3961889.865 ops/s
# Warmup Iteration  16: 3966859.195 ops/s
# Warmup Iteration  17: 3965488.472 ops/s
# Warmup Iteration  18: 3963259.086 ops/s
# Warmup Iteration  19: 3962874.712 ops/s
# Warmup Iteration  20: 3962148.810 ops/s
# Warmup Iteration  21: 3975024.080 ops/s
# Warmup Iteration  22: 3955548.594 ops/s
# Warmup Iteration  23: 3969729.607 ops/s
# Warmup Iteration  24: 3950909.969 ops/s
# Warmup Iteration  25: 3962649.063 ops/s
# Warmup Iteration  26: 3939585.180 ops/s
# Warmup Iteration  27: 3977269.519 ops/s
# Warmup Iteration  28: 3956433.158 ops/s
# Warmup Iteration  29: 3979712.895 ops/s
# Warmup Iteration  30: 3972827.219 ops/s
Iteration   1: 3988661.536 ops/s
Iteration   2: 3983859.450 ops/s
Iteration   3: 3966786.718 ops/s
Iteration   4: 3972391.240 ops/s
Iteration   5: 3962909.437 ops/s
Iteration   6: 3975489.063 ops/s
Iteration   7: 3983336.700 ops/s
Iteration   8: 3958915.802 ops/s
Iteration   9: 3974021.867 ops/s
Iteration  10: 3991395.038 ops/s
Iteration  11: 3955503.351 ops/s
Iteration  12: 3978678.469 ops/s
Iteration  13: 4007432.745 ops/s
Iteration  14: 3977566.798 ops/s
Iteration  15: 3974044.757 ops/s
Iteration  16: 3972073.290 ops/s
Iteration  17: 3977137.335 ops/s
Iteration  18: 3949025.252 ops/s
Iteration  19: 3974483.012 ops/s
Iteration  20: 3930776.299 ops/s
Iteration  21: 3972337.434 ops/s
Iteration  22: 3988934.823 ops/s
Iteration  23: 3973661.184 ops/s
Iteration  24: 3974366.652 ops/s
Iteration  25: 3974670.742 ops/s
Iteration  26: 3985582.902 ops/s
Iteration  27: 3961006.895 ops/s
Iteration  28: 3988732.335 ops/s
Iteration  29: 3959688.732 ops/s
Iteration  30: 3969678.374 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toMap":
  3973438.274 ±(99.9%) 9666.095 ops/s [Average]
  (min, avg, max) = (3930776.299, 3973438.274, 4007432.745), stdev = 14467.757
  CI (99.9%): [3963772.179, 3983104.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toMap  thrpt   30  3973438.274 ± 9666.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1663592.728 ops/s
# Warmup Iteration   2: 4105447.397 ops/s
# Warmup Iteration   3: 3430932.719 ops/s
# Warmup Iteration   4: 4172816.501 ops/s
# Warmup Iteration   5: 4158400.662 ops/s
# Warmup Iteration   6: 4162191.822 ops/s
# Warmup Iteration   7: 4138820.282 ops/s
# Warmup Iteration   8: 4142264.473 ops/s
# Warmup Iteration   9: 4130402.213 ops/s
# Warmup Iteration  10: 4144908.650 ops/s
# Warmup Iteration  11: 4122810.052 ops/s
# Warmup Iteration  12: 4151742.473 ops/s
# Warmup Iteration  13: 4151095.363 ops/s
# Warmup Iteration  14: 4162809.236 ops/s
# Warmup Iteration  15: 4129220.010 ops/s
# Warmup Iteration  16: 4131519.185 ops/s
# Warmup Iteration  17: 4142425.383 ops/s
# Warmup Iteration  18: 4133724.151 ops/s
# Warmup Iteration  19: 4128258.511 ops/s
# Warmup Iteration  20: 4114263.899 ops/s
# Warmup Iteration  21: 4132880.213 ops/s
# Warmup Iteration  22: 4125276.745 ops/s
# Warmup Iteration  23: 4131217.597 ops/s
# Warmup Iteration  24: 4123305.988 ops/s
# Warmup Iteration  25: 4125851.280 ops/s
# Warmup Iteration  26: 4162136.801 ops/s
# Warmup Iteration  27: 4129287.855 ops/s
# Warmup Iteration  28: 4124777.008 ops/s
# Warmup Iteration  29: 4154841.028 ops/s
# Warmup Iteration  30: 4145381.183 ops/s
Iteration   1: 4152994.959 ops/s
Iteration   2: 4163185.063 ops/s
Iteration   3: 4157410.799 ops/s
Iteration   4: 4156515.780 ops/s
Iteration   5: 4152013.897 ops/s
Iteration   6: 4150325.335 ops/s
Iteration   7: 4158726.427 ops/s
Iteration   8: 4148167.989 ops/s
Iteration   9: 4155666.096 ops/s
Iteration  10: 4140716.770 ops/s
Iteration  11: 4162261.576 ops/s
Iteration  12: 4171073.634 ops/s
Iteration  13: 4154573.565 ops/s
Iteration  14: 4125547.838 ops/s
Iteration  15: 4160353.278 ops/s
Iteration  16: 4144083.100 ops/s
Iteration  17: 4166824.178 ops/s
Iteration  18: 4132537.995 ops/s
Iteration  19: 4164932.771 ops/s
Iteration  20: 4134648.205 ops/s
Iteration  21: 4121931.828 ops/s
Iteration  22: 4141045.576 ops/s
Iteration  23: 4163701.180 ops/s
Iteration  24: 4151290.126 ops/s
Iteration  25: 4127133.626 ops/s
Iteration  26: 4133820.795 ops/s
Iteration  27: 4159141.705 ops/s
Iteration  28: 4148241.931 ops/s
Iteration  29: 4144417.764 ops/s
Iteration  30: 4151665.231 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSet":
  4149831.634 ±(99.9%) 8636.619 ops/s [Average]
  (min, avg, max) = (4121931.828, 4149831.634, 4171073.634), stdev = 12926.885
  CI (99.9%): [4141195.015, 4158468.252] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSet  thrpt   30  4149831.634 ± 8636.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 248494.107 ops/s
# Warmup Iteration   2: 446142.798 ops/s
# Warmup Iteration   3: 520251.773 ops/s
# Warmup Iteration   4: 520881.238 ops/s
# Warmup Iteration   5: 520300.887 ops/s
# Warmup Iteration   6: 439321.630 ops/s
# Warmup Iteration   7: 521108.534 ops/s
# Warmup Iteration   8: 520449.340 ops/s
# Warmup Iteration   9: 519658.287 ops/s
# Warmup Iteration  10: 522981.243 ops/s
# Warmup Iteration  11: 522474.823 ops/s
# Warmup Iteration  12: 521785.437 ops/s
# Warmup Iteration  13: 522721.773 ops/s
# Warmup Iteration  14: 523449.584 ops/s
# Warmup Iteration  15: 523324.936 ops/s
# Warmup Iteration  16: 524298.226 ops/s
# Warmup Iteration  17: 522232.990 ops/s
# Warmup Iteration  18: 521522.719 ops/s
# Warmup Iteration  19: 522550.016 ops/s
# Warmup Iteration  20: 519488.877 ops/s
# Warmup Iteration  21: 520770.487 ops/s
# Warmup Iteration  22: 523828.729 ops/s
# Warmup Iteration  23: 521285.399 ops/s
# Warmup Iteration  24: 520225.194 ops/s
# Warmup Iteration  25: 520238.461 ops/s
# Warmup Iteration  26: 523290.409 ops/s
# Warmup Iteration  27: 523178.459 ops/s
# Warmup Iteration  28: 524166.996 ops/s
# Warmup Iteration  29: 521144.669 ops/s
# Warmup Iteration  30: 522535.608 ops/s
Iteration   1: 522076.220 ops/s
Iteration   2: 525177.535 ops/s
Iteration   3: 523676.883 ops/s
Iteration   4: 524251.854 ops/s
Iteration   5: 525772.129 ops/s
Iteration   6: 525752.986 ops/s
Iteration   7: 521220.978 ops/s
Iteration   8: 522803.196 ops/s
Iteration   9: 524998.739 ops/s
Iteration  10: 524582.729 ops/s
Iteration  11: 523526.801 ops/s
Iteration  12: 522700.331 ops/s
Iteration  13: 526354.627 ops/s
Iteration  14: 523275.564 ops/s
Iteration  15: 522907.940 ops/s
Iteration  16: 522652.664 ops/s
Iteration  17: 522744.972 ops/s
Iteration  18: 524741.293 ops/s
Iteration  19: 519874.619 ops/s
Iteration  20: 526240.733 ops/s
Iteration  21: 522292.830 ops/s
Iteration  22: 524107.884 ops/s
Iteration  23: 524317.941 ops/s
Iteration  24: 523835.056 ops/s
Iteration  25: 525116.539 ops/s
Iteration  26: 525402.982 ops/s
Iteration  27: 524575.321 ops/s
Iteration  28: 525359.963 ops/s
Iteration  29: 522480.472 ops/s
Iteration  30: 522499.201 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBag":
  523844.033 ±(99.9%) 1033.525 ops/s [Average]
  (min, avg, max) = (519874.619, 523844.033, 526354.627), stdev = 1546.931
  CI (99.9%): [522810.508, 524877.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBag  thrpt   30  523844.033 ± 1033.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255193.499 ops/s
# Warmup Iteration   2: 586362.092 ops/s
# Warmup Iteration   3: 639521.651 ops/s
# Warmup Iteration   4: 639856.400 ops/s
# Warmup Iteration   5: 532939.936 ops/s
# Warmup Iteration   6: 642176.155 ops/s
# Warmup Iteration   7: 642635.956 ops/s
# Warmup Iteration   8: 643308.492 ops/s
# Warmup Iteration   9: 642709.915 ops/s
# Warmup Iteration  10: 641879.161 ops/s
# Warmup Iteration  11: 639767.588 ops/s
# Warmup Iteration  12: 641863.785 ops/s
# Warmup Iteration  13: 641173.139 ops/s
# Warmup Iteration  14: 643484.048 ops/s
# Warmup Iteration  15: 643494.938 ops/s
# Warmup Iteration  16: 641007.414 ops/s
# Warmup Iteration  17: 644199.852 ops/s
# Warmup Iteration  18: 642565.416 ops/s
# Warmup Iteration  19: 643143.433 ops/s
# Warmup Iteration  20: 642394.384 ops/s
# Warmup Iteration  21: 642015.677 ops/s
# Warmup Iteration  22: 637323.392 ops/s
# Warmup Iteration  23: 637765.599 ops/s
# Warmup Iteration  24: 637564.050 ops/s
# Warmup Iteration  25: 638613.230 ops/s
# Warmup Iteration  26: 641688.237 ops/s
# Warmup Iteration  27: 642883.973 ops/s
# Warmup Iteration  28: 640480.788 ops/s
# Warmup Iteration  29: 637889.382 ops/s
# Warmup Iteration  30: 640430.748 ops/s
Iteration   1: 638965.436 ops/s
Iteration   2: 641339.157 ops/s
Iteration   3: 638403.669 ops/s
Iteration   4: 631569.821 ops/s
Iteration   5: 639800.658 ops/s
Iteration   6: 638473.776 ops/s
Iteration   7: 638958.529 ops/s
Iteration   8: 640480.930 ops/s
Iteration   9: 636205.654 ops/s
Iteration  10: 641890.212 ops/s
Iteration  11: 640824.143 ops/s
Iteration  12: 638781.492 ops/s
Iteration  13: 637787.131 ops/s
Iteration  14: 644063.682 ops/s
Iteration  15: 642266.536 ops/s
Iteration  16: 641902.618 ops/s
Iteration  17: 642658.792 ops/s
Iteration  18: 642433.479 ops/s
Iteration  19: 641759.429 ops/s
Iteration  20: 638505.593 ops/s
Iteration  21: 639439.107 ops/s
Iteration  22: 642419.694 ops/s
Iteration  23: 642131.167 ops/s
Iteration  24: 644333.224 ops/s
Iteration  25: 638623.557 ops/s
Iteration  26: 641342.493 ops/s
Iteration  27: 643353.168 ops/s
Iteration  28: 644027.079 ops/s
Iteration  29: 639025.954 ops/s
Iteration  30: 640850.691 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBagBy":
  640420.562 ±(99.9%) 1779.803 ops/s [Average]
  (min, avg, max) = (631569.821, 640420.562, 644333.224), stdev = 2663.926
  CI (99.9%): [638640.759, 642200.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  640420.562 ± 1779.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1187165.968 ops/s
# Warmup Iteration   2: 2763093.167 ops/s
# Warmup Iteration   3: 2847504.256 ops/s
# Warmup Iteration   4: 2352787.392 ops/s
# Warmup Iteration   5: 2840011.259 ops/s
# Warmup Iteration   6: 2830268.958 ops/s
# Warmup Iteration   7: 2834436.438 ops/s
# Warmup Iteration   8: 2816121.304 ops/s
# Warmup Iteration   9: 2843779.726 ops/s
# Warmup Iteration  10: 2841164.573 ops/s
# Warmup Iteration  11: 2826359.733 ops/s
# Warmup Iteration  12: 2845116.679 ops/s
# Warmup Iteration  13: 2831124.398 ops/s
# Warmup Iteration  14: 2823528.968 ops/s
# Warmup Iteration  15: 2852143.791 ops/s
# Warmup Iteration  16: 2850673.141 ops/s
# Warmup Iteration  17: 2830117.921 ops/s
# Warmup Iteration  18: 2845730.462 ops/s
# Warmup Iteration  19: 2838309.308 ops/s
# Warmup Iteration  20: 2845761.626 ops/s
# Warmup Iteration  21: 2839778.433 ops/s
# Warmup Iteration  22: 2843915.555 ops/s
# Warmup Iteration  23: 2847811.062 ops/s
# Warmup Iteration  24: 2841138.285 ops/s
# Warmup Iteration  25: 2833325.801 ops/s
# Warmup Iteration  26: 2844847.913 ops/s
# Warmup Iteration  27: 2842642.789 ops/s
# Warmup Iteration  28: 2855809.953 ops/s
# Warmup Iteration  29: 2847049.578 ops/s
# Warmup Iteration  30: 2854558.238 ops/s
Iteration   1: 2884892.832 ops/s
Iteration   2: 2858917.965 ops/s
Iteration   3: 2845648.917 ops/s
Iteration   4: 2842149.801 ops/s
Iteration   5: 2843063.962 ops/s
Iteration   6: 2864534.831 ops/s
Iteration   7: 2863663.617 ops/s
Iteration   8: 2849384.628 ops/s
Iteration   9: 2858487.350 ops/s
Iteration  10: 2868475.873 ops/s
Iteration  11: 2848483.621 ops/s
Iteration  12: 2845404.766 ops/s
Iteration  13: 2865700.460 ops/s
Iteration  14: 2881755.184 ops/s
Iteration  15: 2802044.485 ops/s
Iteration  16: 2837933.353 ops/s
Iteration  17: 2842894.730 ops/s
Iteration  18: 2840019.536 ops/s
Iteration  19: 2824514.969 ops/s
Iteration  20: 2810647.542 ops/s
Iteration  21: 2836465.969 ops/s
Iteration  22: 2834158.117 ops/s
Iteration  23: 2839340.690 ops/s
Iteration  24: 2841195.944 ops/s
Iteration  25: 2845257.339 ops/s
Iteration  26: 2854425.255 ops/s
Iteration  27: 2845716.049 ops/s
Iteration  28: 2837403.586 ops/s
Iteration  29: 2855650.255 ops/s
Iteration  30: 2847823.243 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedList":
  2847201.829 ±(99.9%) 11740.692 ops/s [Average]
  (min, avg, max) = (2802044.485, 2847201.829, 2884892.832), stdev = 17572.916
  CI (99.9%): [2835461.137, 2858942.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedList  thrpt   30  2847201.829 ± 11740.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1066564.094 ops/s
# Warmup Iteration   2: 2785349.365 ops/s
# Warmup Iteration   3: 2810140.740 ops/s
# Warmup Iteration   4: 2324231.977 ops/s
# Warmup Iteration   5: 2807017.872 ops/s
# Warmup Iteration   6: 2810124.069 ops/s
# Warmup Iteration   7: 2818014.833 ops/s
# Warmup Iteration   8: 2800544.694 ops/s
# Warmup Iteration   9: 2809824.283 ops/s
# Warmup Iteration  10: 2809834.257 ops/s
# Warmup Iteration  11: 2808413.563 ops/s
# Warmup Iteration  12: 2798263.334 ops/s
# Warmup Iteration  13: 2810391.850 ops/s
# Warmup Iteration  14: 2808410.395 ops/s
# Warmup Iteration  15: 2814096.667 ops/s
# Warmup Iteration  16: 2818585.328 ops/s
# Warmup Iteration  17: 2816721.922 ops/s
# Warmup Iteration  18: 2810984.566 ops/s
# Warmup Iteration  19: 2801525.694 ops/s
# Warmup Iteration  20: 2828226.835 ops/s
# Warmup Iteration  21: 2802923.832 ops/s
# Warmup Iteration  22: 2793628.491 ops/s
# Warmup Iteration  23: 2816251.605 ops/s
# Warmup Iteration  24: 2822735.399 ops/s
# Warmup Iteration  25: 2815243.207 ops/s
# Warmup Iteration  26: 2821953.035 ops/s
# Warmup Iteration  27: 2803886.680 ops/s
# Warmup Iteration  28: 2833665.624 ops/s
# Warmup Iteration  29: 2810030.473 ops/s
# Warmup Iteration  30: 2833361.414 ops/s
Iteration   1: 2821329.976 ops/s
Iteration   2: 2802482.587 ops/s
Iteration   3: 2803652.199 ops/s
Iteration   4: 2810334.978 ops/s
Iteration   5: 2813046.547 ops/s
Iteration   6: 2825337.247 ops/s
Iteration   7: 2824948.531 ops/s
Iteration   8: 2810365.275 ops/s
Iteration   9: 2807788.322 ops/s
Iteration  10: 2821622.591 ops/s
Iteration  11: 2818530.103 ops/s
Iteration  12: 2822259.615 ops/s
Iteration  13: 2801817.196 ops/s
Iteration  14: 2817408.539 ops/s
Iteration  15: 2825316.025 ops/s
Iteration  16: 2810747.935 ops/s
Iteration  17: 2802777.527 ops/s
Iteration  18: 2829472.039 ops/s
Iteration  19: 2801494.576 ops/s
Iteration  20: 2822508.651 ops/s
Iteration  21: 2826564.031 ops/s
Iteration  22: 2813431.664 ops/s
Iteration  23: 2837078.281 ops/s
Iteration  24: 2824231.822 ops/s
Iteration  25: 2809702.688 ops/s
Iteration  26: 2809478.109 ops/s
Iteration  27: 2835911.459 ops/s
Iteration  28: 2819376.952 ops/s
Iteration  29: 2835276.276 ops/s
Iteration  30: 2817462.319 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedListBy":
  2817391.802 ±(99.9%) 6919.442 ops/s [Average]
  (min, avg, max) = (2801494.576, 2817391.802, 2837078.281), stdev = 10356.696
  CI (99.9%): [2810472.360, 2824311.244] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedListBy  thrpt   30  2817391.802 ± 6919.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 263381.841 ops/s
# Warmup Iteration   2: 439003.361 ops/s
# Warmup Iteration   3: 501150.858 ops/s
# Warmup Iteration   4: 505760.250 ops/s
# Warmup Iteration   5: 506041.616 ops/s
# Warmup Iteration   6: 441091.436 ops/s
# Warmup Iteration   7: 491015.124 ops/s
# Warmup Iteration   8: 505697.921 ops/s
# Warmup Iteration   9: 506353.658 ops/s
# Warmup Iteration  10: 506753.507 ops/s
# Warmup Iteration  11: 507636.611 ops/s
# Warmup Iteration  12: 504445.126 ops/s
# Warmup Iteration  13: 504926.203 ops/s
# Warmup Iteration  14: 505593.376 ops/s
# Warmup Iteration  15: 505939.135 ops/s
# Warmup Iteration  16: 505245.589 ops/s
# Warmup Iteration  17: 504962.994 ops/s
# Warmup Iteration  18: 505297.556 ops/s
# Warmup Iteration  19: 507837.165 ops/s
# Warmup Iteration  20: 507610.219 ops/s
# Warmup Iteration  21: 504495.883 ops/s
# Warmup Iteration  22: 504140.287 ops/s
# Warmup Iteration  23: 503771.030 ops/s
# Warmup Iteration  24: 505305.153 ops/s
# Warmup Iteration  25: 503714.736 ops/s
# Warmup Iteration  26: 505745.201 ops/s
# Warmup Iteration  27: 505989.569 ops/s
# Warmup Iteration  28: 507477.408 ops/s
# Warmup Iteration  29: 506290.466 ops/s
# Warmup Iteration  30: 506506.124 ops/s
Iteration   1: 507639.321 ops/s
Iteration   2: 506070.272 ops/s
Iteration   3: 503773.066 ops/s
Iteration   4: 506022.668 ops/s
Iteration   5: 503771.787 ops/s
Iteration   6: 504573.627 ops/s
Iteration   7: 503566.092 ops/s
Iteration   8: 507651.680 ops/s
Iteration   9: 505497.191 ops/s
Iteration  10: 503189.182 ops/s
Iteration  11: 503255.603 ops/s
Iteration  12: 503682.101 ops/s
Iteration  13: 500705.269 ops/s
Iteration  14: 507427.459 ops/s
Iteration  15: 506978.876 ops/s
Iteration  16: 503702.195 ops/s
Iteration  17: 507051.295 ops/s
Iteration  18: 507145.234 ops/s
Iteration  19: 507349.377 ops/s
Iteration  20: 500299.177 ops/s
Iteration  21: 502100.213 ops/s
Iteration  22: 505442.077 ops/s
Iteration  23: 505516.562 ops/s
Iteration  24: 501340.506 ops/s
Iteration  25: 504491.429 ops/s
Iteration  26: 506389.732 ops/s
Iteration  27: 508982.829 ops/s
Iteration  28: 507445.367 ops/s
Iteration  29: 504095.966 ops/s
Iteration  30: 505648.169 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedMap":
  505026.811 ±(99.9%) 1486.834 ops/s [Average]
  (min, avg, max) = (500299.177, 505026.811, 508982.829), stdev = 2225.423
  CI (99.9%): [503539.977, 506513.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedMap  thrpt   30  505026.811 ± 1486.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 399723.836 ops/s
# Warmup Iteration   2: 882444.412 ops/s
# Warmup Iteration   3: 915571.094 ops/s
# Warmup Iteration   4: 863821.074 ops/s
# Warmup Iteration   5: 827323.607 ops/s
# Warmup Iteration   6: 909367.597 ops/s
# Warmup Iteration   7: 912479.743 ops/s
# Warmup Iteration   8: 915720.065 ops/s
# Warmup Iteration   9: 921306.016 ops/s
# Warmup Iteration  10: 917021.632 ops/s
# Warmup Iteration  11: 913965.440 ops/s
# Warmup Iteration  12: 918995.560 ops/s
# Warmup Iteration  13: 916894.709 ops/s
# Warmup Iteration  14: 917621.376 ops/s
# Warmup Iteration  15: 919212.233 ops/s
# Warmup Iteration  16: 920258.905 ops/s
# Warmup Iteration  17: 920345.190 ops/s
# Warmup Iteration  18: 920613.521 ops/s
# Warmup Iteration  19: 918020.921 ops/s
# Warmup Iteration  20: 917185.322 ops/s
# Warmup Iteration  21: 912675.557 ops/s
# Warmup Iteration  22: 915343.262 ops/s
# Warmup Iteration  23: 913861.186 ops/s
# Warmup Iteration  24: 910292.297 ops/s
# Warmup Iteration  25: 915089.842 ops/s
# Warmup Iteration  26: 917175.358 ops/s
# Warmup Iteration  27: 910549.602 ops/s
# Warmup Iteration  28: 914715.007 ops/s
# Warmup Iteration  29: 912953.846 ops/s
# Warmup Iteration  30: 911545.580 ops/s
Iteration   1: 917252.092 ops/s
Iteration   2: 910316.926 ops/s
Iteration   3: 916868.919 ops/s
Iteration   4: 915902.274 ops/s
Iteration   5: 917072.456 ops/s
Iteration   6: 913055.583 ops/s
Iteration   7: 917365.011 ops/s
Iteration   8: 917203.742 ops/s
Iteration   9: 912092.660 ops/s
Iteration  10: 918314.052 ops/s
Iteration  11: 921432.181 ops/s
Iteration  12: 923552.361 ops/s
Iteration  13: 910504.072 ops/s
Iteration  14: 913752.741 ops/s
Iteration  15: 907350.496 ops/s
Iteration  16: 916969.347 ops/s
Iteration  17: 914172.296 ops/s
Iteration  18: 914369.781 ops/s
Iteration  19: 916892.178 ops/s
Iteration  20: 918840.144 ops/s
Iteration  21: 917917.816 ops/s
Iteration  22: 914393.903 ops/s
Iteration  23: 913386.911 ops/s
Iteration  24: 907919.263 ops/s
Iteration  25: 915430.561 ops/s
Iteration  26: 911705.850 ops/s
Iteration  27: 913824.430 ops/s
Iteration  28: 909800.166 ops/s
Iteration  29: 920477.228 ops/s
Iteration  30: 913352.739 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSet":
  915049.606 ±(99.9%) 2545.838 ops/s [Average]
  (min, avg, max) = (907350.496, 915049.606, 923552.361), stdev = 3810.490
  CI (99.9%): [912503.768, 917595.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSet  thrpt   30  915049.606 ± 2545.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 543590.897 ops/s
# Warmup Iteration   2: 1452266.104 ops/s
# Warmup Iteration   3: 1475505.536 ops/s
# Warmup Iteration   4: 1223227.949 ops/s
# Warmup Iteration   5: 1468602.066 ops/s
# Warmup Iteration   6: 1459344.406 ops/s
# Warmup Iteration   7: 1471460.628 ops/s
# Warmup Iteration   8: 1476908.851 ops/s
# Warmup Iteration   9: 1472430.237 ops/s
# Warmup Iteration  10: 1475693.938 ops/s
# Warmup Iteration  11: 1472257.648 ops/s
# Warmup Iteration  12: 1467855.736 ops/s
# Warmup Iteration  13: 1472037.774 ops/s
# Warmup Iteration  14: 1477703.012 ops/s
# Warmup Iteration  15: 1477611.330 ops/s
# Warmup Iteration  16: 1473698.787 ops/s
# Warmup Iteration  17: 1480473.316 ops/s
# Warmup Iteration  18: 1482157.762 ops/s
# Warmup Iteration  19: 1480705.810 ops/s
# Warmup Iteration  20: 1480365.590 ops/s
# Warmup Iteration  21: 1483001.913 ops/s
# Warmup Iteration  22: 1474735.542 ops/s
# Warmup Iteration  23: 1484368.743 ops/s
# Warmup Iteration  24: 1480335.651 ops/s
# Warmup Iteration  25: 1483388.034 ops/s
# Warmup Iteration  26: 1477102.659 ops/s
# Warmup Iteration  27: 1480447.424 ops/s
# Warmup Iteration  28: 1480560.134 ops/s
# Warmup Iteration  29: 1477732.655 ops/s
# Warmup Iteration  30: 1474619.710 ops/s
Iteration   1: 1481622.442 ops/s
Iteration   2: 1475792.439 ops/s
Iteration   3: 1486222.120 ops/s
Iteration   4: 1478984.550 ops/s
Iteration   5: 1479970.815 ops/s
Iteration   6: 1476849.271 ops/s
Iteration   7: 1488352.008 ops/s
Iteration   8: 1488845.677 ops/s
Iteration   9: 1484692.767 ops/s
Iteration  10: 1460709.757 ops/s
Iteration  11: 1476064.792 ops/s
Iteration  12: 1480213.734 ops/s
Iteration  13: 1486008.535 ops/s
Iteration  14: 1478022.593 ops/s
Iteration  15: 1489520.877 ops/s
Iteration  16: 1482601.743 ops/s
Iteration  17: 1482215.287 ops/s
Iteration  18: 1479207.601 ops/s
Iteration  19: 1481834.276 ops/s
Iteration  20: 1476511.415 ops/s
Iteration  21: 1482148.931 ops/s
Iteration  22: 1475881.308 ops/s
Iteration  23: 1486430.048 ops/s
Iteration  24: 1486013.993 ops/s
Iteration  25: 1480113.103 ops/s
Iteration  26: 1484214.789 ops/s
Iteration  27: 1483617.285 ops/s
Iteration  28: 1484647.482 ops/s
Iteration  29: 1484342.998 ops/s
Iteration  30: 1482642.805 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSetBy":
  1481476.515 ±(99.9%) 3718.193 ops/s [Average]
  (min, avg, max) = (1460709.757, 1481476.515, 1489520.877), stdev = 5565.216
  CI (99.9%): [1477758.322, 1485194.707] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1481476.515 ± 3718.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478675.633 ops/s
# Warmup Iteration   2: 660105.934 ops/s
# Warmup Iteration   3: 784331.853 ops/s
# Warmup Iteration   4: 782575.111 ops/s
# Warmup Iteration   5: 783949.103 ops/s
# Warmup Iteration   6: 782409.864 ops/s
# Warmup Iteration   7: 694445.764 ops/s
# Warmup Iteration   8: 744388.656 ops/s
# Warmup Iteration   9: 784320.251 ops/s
# Warmup Iteration  10: 784677.018 ops/s
# Warmup Iteration  11: 783340.788 ops/s
# Warmup Iteration  12: 784857.518 ops/s
# Warmup Iteration  13: 784039.227 ops/s
# Warmup Iteration  14: 784669.589 ops/s
# Warmup Iteration  15: 785984.602 ops/s
# Warmup Iteration  16: 786030.111 ops/s
# Warmup Iteration  17: 825387.962 ops/s
# Warmup Iteration  18: 823742.684 ops/s
# Warmup Iteration  19: 825118.814 ops/s
# Warmup Iteration  20: 819421.164 ops/s
# Warmup Iteration  21: 821295.405 ops/s
# Warmup Iteration  22: 818438.165 ops/s
# Warmup Iteration  23: 824643.541 ops/s
# Warmup Iteration  24: 821068.764 ops/s
# Warmup Iteration  25: 823076.283 ops/s
# Warmup Iteration  26: 822744.708 ops/s
# Warmup Iteration  27: 824813.307 ops/s
# Warmup Iteration  28: 822992.214 ops/s
# Warmup Iteration  29: 822839.118 ops/s
# Warmup Iteration  30: 817267.047 ops/s
Iteration   1: 815299.524 ops/s
Iteration   2: 820806.425 ops/s
Iteration   3: 825265.669 ops/s
Iteration   4: 822230.590 ops/s
Iteration   5: 825417.331 ops/s
Iteration   6: 830607.789 ops/s
Iteration   7: 826311.183 ops/s
Iteration   8: 820688.403 ops/s
Iteration   9: 824572.392 ops/s
Iteration  10: 827646.378 ops/s
Iteration  11: 825203.320 ops/s
Iteration  12: 819777.394 ops/s
Iteration  13: 827358.169 ops/s
Iteration  14: 824974.240 ops/s
Iteration  15: 827248.534 ops/s
Iteration  16: 823857.279 ops/s
Iteration  17: 825878.749 ops/s
Iteration  18: 826013.345 ops/s
Iteration  19: 824268.272 ops/s
Iteration  20: 825953.332 ops/s
Iteration  21: 823591.427 ops/s
Iteration  22: 828436.781 ops/s
Iteration  23: 824216.030 ops/s
Iteration  24: 824591.342 ops/s
Iteration  25: 823484.412 ops/s
Iteration  26: 823155.859 ops/s
Iteration  27: 825812.612 ops/s
Iteration  28: 816768.321 ops/s
Iteration  29: 822985.431 ops/s
Iteration  30: 822972.955 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue":
  824179.783 ±(99.9%) 2140.647 ops/s [Average]
  (min, avg, max) = (815299.524, 824179.783, 830607.789), stdev = 3204.019
  CI (99.9%): [822039.136, 826320.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_updateValue  thrpt   30  824179.783 ± 2140.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 506690.512 ops/s
# Warmup Iteration   2: 678046.681 ops/s
# Warmup Iteration   3: 811067.796 ops/s
# Warmup Iteration   4: 806483.834 ops/s
# Warmup Iteration   5: 809188.642 ops/s
# Warmup Iteration   6: 806045.386 ops/s
# Warmup Iteration   7: 770109.040 ops/s
# Warmup Iteration   8: 712662.053 ops/s
# Warmup Iteration   9: 804144.322 ops/s
# Warmup Iteration  10: 805079.673 ops/s
# Warmup Iteration  11: 807198.872 ops/s
# Warmup Iteration  12: 803829.153 ops/s
# Warmup Iteration  13: 810113.386 ops/s
# Warmup Iteration  14: 807893.737 ops/s
# Warmup Iteration  15: 803753.183 ops/s
# Warmup Iteration  16: 803699.538 ops/s
# Warmup Iteration  17: 848367.592 ops/s
# Warmup Iteration  18: 845084.779 ops/s
# Warmup Iteration  19: 846641.940 ops/s
# Warmup Iteration  20: 846681.377 ops/s
# Warmup Iteration  21: 845127.078 ops/s
# Warmup Iteration  22: 850168.344 ops/s
# Warmup Iteration  23: 848768.460 ops/s
# Warmup Iteration  24: 846562.643 ops/s
# Warmup Iteration  25: 849812.407 ops/s
# Warmup Iteration  26: 848364.867 ops/s
# Warmup Iteration  27: 852144.838 ops/s
# Warmup Iteration  28: 855725.559 ops/s
# Warmup Iteration  29: 852984.324 ops/s
# Warmup Iteration  30: 850475.974 ops/s
Iteration   1: 853946.862 ops/s
Iteration   2: 848035.304 ops/s
Iteration   3: 852235.650 ops/s
Iteration   4: 858526.595 ops/s
Iteration   5: 850266.650 ops/s
Iteration   6: 849622.277 ops/s
Iteration   7: 851001.752 ops/s
Iteration   8: 847845.515 ops/s
Iteration   9: 840122.577 ops/s
Iteration  10: 847975.892 ops/s
Iteration  11: 841109.312 ops/s
Iteration  12: 844633.716 ops/s
Iteration  13: 850674.624 ops/s
Iteration  14: 846887.599 ops/s
Iteration  15: 851644.298 ops/s
Iteration  16: 849116.390 ops/s
Iteration  17: 848748.487 ops/s
Iteration  18: 850244.645 ops/s
Iteration  19: 853497.715 ops/s
Iteration  20: 856465.301 ops/s
Iteration  21: 855132.132 ops/s
Iteration  22: 851247.193 ops/s
Iteration  23: 850280.215 ops/s
Iteration  24: 850317.898 ops/s
Iteration  25: 851591.242 ops/s
Iteration  26: 852585.901 ops/s
Iteration  27: 842565.934 ops/s
Iteration  28: 852825.692 ops/s
Iteration  29: 852065.953 ops/s
Iteration  30: 851647.263 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith":
  850095.353 ±(99.9%) 2743.609 ops/s [Average]
  (min, avg, max) = (840122.577, 850095.353, 858526.595), stdev = 4106.505
  CI (99.9%): [847351.744, 852838.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith  thrpt   30  850095.353 ± 2743.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166269247.770 ops/s
# Warmup Iteration   2: 299396858.033 ops/s
# Warmup Iteration   3: 263812272.255 ops/s
# Warmup Iteration   4: 305891449.237 ops/s
# Warmup Iteration   5: 302573513.297 ops/s
# Warmup Iteration   6: 306584904.015 ops/s
# Warmup Iteration   7: 303477472.391 ops/s
# Warmup Iteration   8: 302158772.434 ops/s
# Warmup Iteration   9: 301169762.726 ops/s
# Warmup Iteration  10: 305745581.033 ops/s
# Warmup Iteration  11: 304417873.561 ops/s
# Warmup Iteration  12: 304690951.165 ops/s
# Warmup Iteration  13: 305586404.843 ops/s
# Warmup Iteration  14: 305029089.879 ops/s
# Warmup Iteration  15: 306475141.307 ops/s
# Warmup Iteration  16: 305368143.303 ops/s
# Warmup Iteration  17: 306465394.668 ops/s
# Warmup Iteration  18: 305690125.111 ops/s
# Warmup Iteration  19: 302497753.629 ops/s
# Warmup Iteration  20: 305164343.210 ops/s
# Warmup Iteration  21: 307205064.378 ops/s
# Warmup Iteration  22: 306924729.755 ops/s
# Warmup Iteration  23: 305373270.509 ops/s
# Warmup Iteration  24: 306016436.882 ops/s
# Warmup Iteration  25: 305879177.917 ops/s
# Warmup Iteration  26: 307006588.869 ops/s
# Warmup Iteration  27: 302802813.487 ops/s
# Warmup Iteration  28: 306922264.519 ops/s
# Warmup Iteration  29: 305647448.764 ops/s
# Warmup Iteration  30: 307199200.021 ops/s
Iteration   1: 305509601.502 ops/s
Iteration   2: 304975443.171 ops/s
Iteration   3: 307761847.392 ops/s
Iteration   4: 307192127.524 ops/s
Iteration   5: 304330737.897 ops/s
Iteration   6: 307049395.828 ops/s
Iteration   7: 307490360.722 ops/s
Iteration   8: 306500244.313 ops/s
Iteration   9: 303261086.836 ops/s
Iteration  10: 302164519.354 ops/s
Iteration  11: 307964817.271 ops/s
Iteration  12: 306082779.001 ops/s
Iteration  13: 306788942.746 ops/s
Iteration  14: 305815080.748 ops/s
Iteration  15: 302614694.528 ops/s
Iteration  16: 306561098.563 ops/s
Iteration  17: 304208772.562 ops/s
Iteration  18: 306207144.448 ops/s
Iteration  19: 306927053.288 ops/s
Iteration  20: 305823499.086 ops/s
Iteration  21: 305353993.438 ops/s
Iteration  22: 305185297.642 ops/s
Iteration  23: 306273562.637 ops/s
Iteration  24: 305312307.985 ops/s
Iteration  25: 304905415.018 ops/s
Iteration  26: 304406650.531 ops/s
Iteration  27: 307561667.531 ops/s
Iteration  28: 304590417.944 ops/s
Iteration  29: 304057215.571 ops/s
Iteration  30: 305210024.731 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith_collisions":
  305602859.994 ±(99.9%) 994742.773 ops/s [Average]
  (min, avg, max) = (302164519.354, 305602859.994, 307964817.271), stdev = 1488884.266
  CI (99.9%): [304608117.221, 306597602.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_updateValueWith_collisions  thrpt   30  305602859.994 ± 994742.773  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue_collisions$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue_collisions

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163222813.782 ops/s
# Warmup Iteration   2: 297354561.023 ops/s
# Warmup Iteration   3: 257911208.410 ops/s
# Warmup Iteration   4: 305041064.836 ops/s
# Warmup Iteration   5: 304260781.370 ops/s
# Warmup Iteration   6: 305741045.880 ops/s
# Warmup Iteration   7: 308725258.434 ops/s
# Warmup Iteration   8: 309096702.783 ops/s
# Warmup Iteration   9: 308165850.151 ops/s
# Warmup Iteration  10: 308574504.620 ops/s
# Warmup Iteration  11: 309389599.600 ops/s
# Warmup Iteration  12: 309556855.236 ops/s
# Warmup Iteration  13: 309217332.953 ops/s
# Warmup Iteration  14: 305814307.681 ops/s
# Warmup Iteration  15: 307255519.887 ops/s
# Warmup Iteration  16: 307502672.970 ops/s
# Warmup Iteration  17: 303853106.354 ops/s
# Warmup Iteration  18: 304540385.802 ops/s
# Warmup Iteration  19: 303806809.700 ops/s
# Warmup Iteration  20: 303225682.447 ops/s
# Warmup Iteration  21: 308014195.898 ops/s
# Warmup Iteration  22: 309422070.135 ops/s
# Warmup Iteration  23: 307326068.437 ops/s
# Warmup Iteration  24: 309502830.594 ops/s
# Warmup Iteration  25: 311535071.952 ops/s
# Warmup Iteration  26: 308628149.076 ops/s
# Warmup Iteration  27: 309272221.695 ops/s
# Warmup Iteration  28: 305718104.627 ops/s
# Warmup Iteration  29: 306528665.468 ops/s
# Warmup Iteration  30: 310643353.069 ops/s
Iteration   1: 308449552.731 ops/s
Iteration   2: 309236915.031 ops/s
Iteration   3: 311504620.729 ops/s
Iteration   4: 308659928.969 ops/s
Iteration   5: 305309606.708 ops/s
Iteration   6: 305572414.595 ops/s
Iteration   7: 305438780.972 ops/s
Iteration   8: 307761056.778 ops/s
Iteration   9: 304706805.911 ops/s
Iteration  10: 306494691.120 ops/s
Iteration  11: 306939465.187 ops/s
Iteration  12: 307458670.013 ops/s
Iteration  13: 307602278.123 ops/s
Iteration  14: 307196853.280 ops/s
Iteration  15: 305141080.422 ops/s
Iteration  16: 309585036.569 ops/s
Iteration  17: 309473671.762 ops/s
Iteration  18: 309701505.094 ops/s
Iteration  19: 309090757.574 ops/s
Iteration  20: 308184520.555 ops/s
Iteration  21: 309152434.686 ops/s
Iteration  22: 309755600.717 ops/s
Iteration  23: 310628032.117 ops/s
Iteration  24: 311126599.504 ops/s
Iteration  25: 310780469.641 ops/s
Iteration  26: 310213206.387 ops/s
Iteration  27: 310673150.529 ops/s
Iteration  28: 310789618.291 ops/s
Iteration  29: 311116028.542 ops/s
Iteration  30: 312402658.488 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_updateValue_collisions":
  308671533.701 ±(99.9%) 1418478.050 ops/s [Average]
  (min, avg, max) = (304706805.911, 308671533.701, 312402658.488), stdev = 2123111.329
  CI (99.9%): [307253055.651, 310090011.751] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_updateValue_collisions  thrpt   30  308671533.701 ± 1418478.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_valuesView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_valuesView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1749292.771 ops/s
# Warmup Iteration   2: 4493189.208 ops/s
# Warmup Iteration   3: 4412763.945 ops/s
# Warmup Iteration   4: 3743603.637 ops/s
# Warmup Iteration   5: 4450346.010 ops/s
# Warmup Iteration   6: 4474286.010 ops/s
# Warmup Iteration   7: 4475538.714 ops/s
# Warmup Iteration   8: 4467898.306 ops/s
# Warmup Iteration   9: 4429389.923 ops/s
# Warmup Iteration  10: 4458436.524 ops/s
# Warmup Iteration  11: 4483825.428 ops/s
# Warmup Iteration  12: 4460016.189 ops/s
# Warmup Iteration  13: 4476529.789 ops/s
# Warmup Iteration  14: 4478980.908 ops/s
# Warmup Iteration  15: 4462366.576 ops/s
# Warmup Iteration  16: 4463197.261 ops/s
# Warmup Iteration  17: 4453173.596 ops/s
# Warmup Iteration  18: 4438370.210 ops/s
# Warmup Iteration  19: 4433125.285 ops/s
# Warmup Iteration  20: 4464200.432 ops/s
# Warmup Iteration  21: 4477362.173 ops/s
# Warmup Iteration  22: 4470614.989 ops/s
# Warmup Iteration  23: 4457500.878 ops/s
# Warmup Iteration  24: 4468984.822 ops/s
# Warmup Iteration  25: 4481280.387 ops/s
# Warmup Iteration  26: 4478940.243 ops/s
# Warmup Iteration  27: 4480644.708 ops/s
# Warmup Iteration  28: 4483296.008 ops/s
# Warmup Iteration  29: 4472512.831 ops/s
# Warmup Iteration  30: 4479161.980 ops/s
Iteration   1: 4465547.375 ops/s
Iteration   2: 4485777.343 ops/s
Iteration   3: 4494591.879 ops/s
Iteration   4: 4479065.963 ops/s
Iteration   5: 4484875.298 ops/s
Iteration   6: 4468302.390 ops/s
Iteration   7: 4460096.176 ops/s
Iteration   8: 4449804.451 ops/s
Iteration   9: 4462966.841 ops/s
Iteration  10: 4467394.665 ops/s
Iteration  11: 4490585.251 ops/s
Iteration  12: 4475722.059 ops/s
Iteration  13: 4489466.840 ops/s
Iteration  14: 4463540.122 ops/s
Iteration  15: 4517015.387 ops/s
Iteration  16: 4464023.380 ops/s
Iteration  17: 4466146.958 ops/s
Iteration  18: 4472106.621 ops/s
Iteration  19: 4461787.156 ops/s
Iteration  20: 4466942.287 ops/s
Iteration  21: 4477465.553 ops/s
Iteration  22: 4472120.400 ops/s
Iteration  23: 4460014.949 ops/s
Iteration  24: 4473130.728 ops/s
Iteration  25: 4480920.787 ops/s
Iteration  26: 4473530.313 ops/s
Iteration  27: 4490912.223 ops/s
Iteration  28: 4483359.109 ops/s
Iteration  29: 4479413.989 ops/s
Iteration  30: 4475042.391 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_valuesView":
  4475055.629 ±(99.9%) 8968.830 ops/s [Average]
  (min, avg, max) = (4449804.451, 4475055.629, 4517015.387), stdev = 13424.123
  CI (99.9%): [4466086.800, 4484024.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_valuesView  thrpt   30  4475055.629 ± 8968.830  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValueArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValueArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476864.651 ops/s
# Warmup Iteration   2: 662196.857 ops/s
# Warmup Iteration   3: 774935.680 ops/s
# Warmup Iteration   4: 775556.201 ops/s
# Warmup Iteration   5: 775494.037 ops/s
# Warmup Iteration   6: 775930.033 ops/s
# Warmup Iteration   7: 653713.631 ops/s
# Warmup Iteration   8: 774172.911 ops/s
# Warmup Iteration   9: 776970.321 ops/s
# Warmup Iteration  10: 772952.324 ops/s
# Warmup Iteration  11: 772587.828 ops/s
# Warmup Iteration  12: 772054.061 ops/s
# Warmup Iteration  13: 774127.964 ops/s
# Warmup Iteration  14: 774045.920 ops/s
# Warmup Iteration  15: 773603.883 ops/s
# Warmup Iteration  16: 772347.080 ops/s
# Warmup Iteration  17: 800287.439 ops/s
# Warmup Iteration  18: 799742.500 ops/s
# Warmup Iteration  19: 798319.841 ops/s
# Warmup Iteration  20: 803435.543 ops/s
# Warmup Iteration  21: 805812.004 ops/s
# Warmup Iteration  22: 806138.387 ops/s
# Warmup Iteration  23: 804601.328 ops/s
# Warmup Iteration  24: 804904.850 ops/s
# Warmup Iteration  25: 803871.767 ops/s
# Warmup Iteration  26: 805433.104 ops/s
# Warmup Iteration  27: 801211.654 ops/s
# Warmup Iteration  28: 803877.890 ops/s
# Warmup Iteration  29: 806107.984 ops/s
# Warmup Iteration  30: 807588.346 ops/s
Iteration   1: 804451.919 ops/s
Iteration   2: 804183.630 ops/s
Iteration   3: 803302.193 ops/s
Iteration   4: 793529.151 ops/s
Iteration   5: 805926.554 ops/s
Iteration   6: 806025.512 ops/s
Iteration   7: 806148.906 ops/s
Iteration   8: 807982.396 ops/s
Iteration   9: 807234.324 ops/s
Iteration  10: 809685.329 ops/s
Iteration  11: 804403.639 ops/s
Iteration  12: 802480.068 ops/s
Iteration  13: 801823.165 ops/s
Iteration  14: 809341.412 ops/s
Iteration  15: 806985.179 ops/s
Iteration  16: 810118.319 ops/s
Iteration  17: 808669.581 ops/s
Iteration  18: 803934.108 ops/s
Iteration  19: 805993.920 ops/s
Iteration  20: 808770.650 ops/s
Iteration  21: 804846.916 ops/s
Iteration  22: 808233.890 ops/s
Iteration  23: 806826.347 ops/s
Iteration  24: 807195.609 ops/s
Iteration  25: 805616.760 ops/s
Iteration  26: 800879.990 ops/s
Iteration  27: 804724.100 ops/s
Iteration  28: 806201.472 ops/s
Iteration  29: 804961.622 ops/s
Iteration  30: 807397.814 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValueArguments":
  805595.816 ±(99.9%) 2158.539 ops/s [Average]
  (min, avg, max) = (793529.151, 805595.816, 810118.319), stdev = 3230.800
  CI (99.9%): [803437.276, 807754.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValueArguments  thrpt   30  805595.816 ± 2158.539  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValues$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValues

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 496548.464 ops/s
# Warmup Iteration   2: 662092.555 ops/s
# Warmup Iteration   3: 805056.975 ops/s
# Warmup Iteration   4: 803010.852 ops/s
# Warmup Iteration   5: 807276.733 ops/s
# Warmup Iteration   6: 803953.033 ops/s
# Warmup Iteration   7: 808386.218 ops/s
# Warmup Iteration   8: 668623.182 ops/s
# Warmup Iteration   9: 807032.601 ops/s
# Warmup Iteration  10: 807936.556 ops/s
# Warmup Iteration  11: 804965.211 ops/s
# Warmup Iteration  12: 806757.377 ops/s
# Warmup Iteration  13: 810116.027 ops/s
# Warmup Iteration  14: 806879.407 ops/s
# Warmup Iteration  15: 805046.864 ops/s
# Warmup Iteration  16: 808081.483 ops/s
# Warmup Iteration  17: 856849.739 ops/s
# Warmup Iteration  18: 853645.228 ops/s
# Warmup Iteration  19: 854051.054 ops/s
# Warmup Iteration  20: 850133.253 ops/s
# Warmup Iteration  21: 852943.513 ops/s
# Warmup Iteration  22: 853944.196 ops/s
# Warmup Iteration  23: 853981.558 ops/s
# Warmup Iteration  24: 851205.039 ops/s
# Warmup Iteration  25: 851781.666 ops/s
# Warmup Iteration  26: 853342.891 ops/s
# Warmup Iteration  27: 856576.693 ops/s
# Warmup Iteration  28: 855688.553 ops/s
# Warmup Iteration  29: 854581.653 ops/s
# Warmup Iteration  30: 856270.463 ops/s
Iteration   1: 852201.572 ops/s
Iteration   2: 848428.601 ops/s
Iteration   3: 856095.767 ops/s
Iteration   4: 857384.977 ops/s
Iteration   5: 850259.966 ops/s
Iteration   6: 855397.074 ops/s
Iteration   7: 852454.353 ops/s
Iteration   8: 858642.632 ops/s
Iteration   9: 847719.084 ops/s
Iteration  10: 856931.132 ops/s
Iteration  11: 853926.364 ops/s
Iteration  12: 851100.944 ops/s
Iteration  13: 857938.922 ops/s
Iteration  14: 852933.421 ops/s
Iteration  15: 860061.484 ops/s
Iteration  16: 856840.690 ops/s
Iteration  17: 855680.334 ops/s
Iteration  18: 855651.730 ops/s
Iteration  19: 851354.559 ops/s
Iteration  20: 855780.971 ops/s
Iteration  21: 853819.946 ops/s
Iteration  22: 853509.102 ops/s
Iteration  23: 851720.387 ops/s
Iteration  24: 854982.537 ops/s
Iteration  25: 853653.622 ops/s
Iteration  26: 856858.099 ops/s
Iteration  27: 854199.063 ops/s
Iteration  28: 858101.213 ops/s
Iteration  29: 850549.355 ops/s
Iteration  30: 856961.565 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValues":
  854371.316 ±(99.9%) 2045.276 ops/s [Average]
  (min, avg, max) = (847719.084, 854371.316, 860061.484), stdev = 3061.272
  CI (99.9%): [852326.040, 856416.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withAllKeyValues  thrpt   30  854371.316 ± 2045.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withKeyValue$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withKeyValue

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522216.825 ops/s
# Warmup Iteration   2: 720564.645 ops/s
# Warmup Iteration   3: 839533.768 ops/s
# Warmup Iteration   4: 833394.916 ops/s
# Warmup Iteration   5: 837558.582 ops/s
# Warmup Iteration   6: 835934.294 ops/s
# Warmup Iteration   7: 738788.667 ops/s
# Warmup Iteration   8: 803716.424 ops/s
# Warmup Iteration   9: 838774.926 ops/s
# Warmup Iteration  10: 836701.975 ops/s
# Warmup Iteration  11: 838199.894 ops/s
# Warmup Iteration  12: 838181.503 ops/s
# Warmup Iteration  13: 843347.474 ops/s
# Warmup Iteration  14: 837990.627 ops/s
# Warmup Iteration  15: 837056.914 ops/s
# Warmup Iteration  16: 840563.810 ops/s
# Warmup Iteration  17: 874241.503 ops/s
# Warmup Iteration  18: 878675.093 ops/s
# Warmup Iteration  19: 873969.255 ops/s
# Warmup Iteration  20: 875380.171 ops/s
# Warmup Iteration  21: 874661.388 ops/s
# Warmup Iteration  22: 871727.198 ops/s
# Warmup Iteration  23: 873745.754 ops/s
# Warmup Iteration  24: 871179.485 ops/s
# Warmup Iteration  25: 875052.309 ops/s
# Warmup Iteration  26: 878023.033 ops/s
# Warmup Iteration  27: 878822.432 ops/s
# Warmup Iteration  28: 878457.287 ops/s
# Warmup Iteration  29: 870769.401 ops/s
# Warmup Iteration  30: 876508.316 ops/s
Iteration   1: 872270.899 ops/s
Iteration   2: 872771.665 ops/s
Iteration   3: 871759.290 ops/s
Iteration   4: 883062.600 ops/s
Iteration   5: 876657.518 ops/s
Iteration   6: 875684.262 ops/s
Iteration   7: 875074.534 ops/s
Iteration   8: 873707.996 ops/s
Iteration   9: 873674.474 ops/s
Iteration  10: 879849.819 ops/s
Iteration  11: 879865.898 ops/s
Iteration  12: 871318.720 ops/s
Iteration  13: 880471.235 ops/s
Iteration  14: 871465.184 ops/s
Iteration  15: 877436.007 ops/s
Iteration  16: 879657.367 ops/s
Iteration  17: 869744.906 ops/s
Iteration  18: 881105.674 ops/s
Iteration  19: 873252.152 ops/s
Iteration  20: 874536.959 ops/s
Iteration  21: 868231.435 ops/s
Iteration  22: 876366.032 ops/s
Iteration  23: 876800.251 ops/s
Iteration  24: 874038.689 ops/s
Iteration  25: 876587.695 ops/s
Iteration  26: 878468.188 ops/s
Iteration  27: 874710.463 ops/s
Iteration  28: 870034.262 ops/s
Iteration  29: 881119.436 ops/s
Iteration  30: 879264.833 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withKeyValue":
  875632.948 ±(99.9%) 2567.558 ops/s [Average]
  (min, avg, max) = (868231.435, 875632.948, 883062.600), stdev = 3843.001
  CI (99.9%): [873065.390, 878200.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withKeyValue  thrpt   30  875632.948 ± 2567.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 503020.089 ops/s
# Warmup Iteration   2: 671916.597 ops/s
# Warmup Iteration   3: 807286.431 ops/s
# Warmup Iteration   4: 816031.256 ops/s
# Warmup Iteration   5: 813125.295 ops/s
# Warmup Iteration   6: 814972.645 ops/s
# Warmup Iteration   7: 810989.393 ops/s
# Warmup Iteration   8: 675996.331 ops/s
# Warmup Iteration   9: 809969.091 ops/s
# Warmup Iteration  10: 813857.165 ops/s
# Warmup Iteration  11: 809785.800 ops/s
# Warmup Iteration  12: 812189.216 ops/s
# Warmup Iteration  13: 813913.506 ops/s
# Warmup Iteration  14: 809283.444 ops/s
# Warmup Iteration  15: 812205.763 ops/s
# Warmup Iteration  16: 809831.025 ops/s
# Warmup Iteration  17: 854077.463 ops/s
# Warmup Iteration  18: 851876.367 ops/s
# Warmup Iteration  19: 850038.227 ops/s
# Warmup Iteration  20: 851791.980 ops/s
# Warmup Iteration  21: 855645.392 ops/s
# Warmup Iteration  22: 851501.737 ops/s
# Warmup Iteration  23: 850571.013 ops/s
# Warmup Iteration  24: 850757.953 ops/s
# Warmup Iteration  25: 854145.390 ops/s
# Warmup Iteration  26: 851522.509 ops/s
# Warmup Iteration  27: 853382.089 ops/s
# Warmup Iteration  28: 855648.557 ops/s
# Warmup Iteration  29: 852239.761 ops/s
# Warmup Iteration  30: 851274.140 ops/s
Iteration   1: 856735.903 ops/s
Iteration   2: 849164.934 ops/s
Iteration   3: 850742.794 ops/s
Iteration   4: 848805.336 ops/s
Iteration   5: 857768.032 ops/s
Iteration   6: 855111.101 ops/s
Iteration   7: 850808.705 ops/s
Iteration   8: 857321.687 ops/s
Iteration   9: 847852.478 ops/s
Iteration  10: 854628.296 ops/s
Iteration  11: 853898.042 ops/s
Iteration  12: 848314.360 ops/s
Iteration  13: 845062.672 ops/s
Iteration  14: 855847.381 ops/s
Iteration  15: 852820.743 ops/s
Iteration  16: 847951.421 ops/s
Iteration  17: 855447.829 ops/s
Iteration  18: 851832.039 ops/s
Iteration  19: 854384.673 ops/s
Iteration  20: 850697.090 ops/s
Iteration  21: 853398.300 ops/s
Iteration  22: 856885.094 ops/s
Iteration  23: 848018.423 ops/s
Iteration  24: 857283.751 ops/s
Iteration  25: 862271.329 ops/s
Iteration  26: 853934.196 ops/s
Iteration  27: 855729.798 ops/s
Iteration  28: 853667.785 ops/s
Iteration  29: 856547.480 ops/s
Iteration  30: 855158.978 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMap":
  853269.688 ±(99.9%) 2582.682 ops/s [Average]
  (min, avg, max) = (845062.672, 853269.688, 862271.329), stdev = 3865.637
  CI (99.9%): [850687.006, 855852.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMap  thrpt   30  853269.688 ± 2582.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 440782.356 ops/s
# Warmup Iteration   2: 661799.623 ops/s
# Warmup Iteration   3: 758894.292 ops/s
# Warmup Iteration   4: 761975.771 ops/s
# Warmup Iteration   5: 761480.328 ops/s
# Warmup Iteration   6: 743898.593 ops/s
# Warmup Iteration   7: 656441.699 ops/s
# Warmup Iteration   8: 754449.533 ops/s
# Warmup Iteration   9: 759402.865 ops/s
# Warmup Iteration  10: 759577.518 ops/s
# Warmup Iteration  11: 760610.811 ops/s
# Warmup Iteration  12: 762277.476 ops/s
# Warmup Iteration  13: 761794.791 ops/s
# Warmup Iteration  14: 760959.903 ops/s
# Warmup Iteration  15: 759977.173 ops/s
# Warmup Iteration  16: 756481.763 ops/s
# Warmup Iteration  17: 793981.299 ops/s
# Warmup Iteration  18: 796415.007 ops/s
# Warmup Iteration  19: 793798.437 ops/s
# Warmup Iteration  20: 794891.853 ops/s
# Warmup Iteration  21: 793758.148 ops/s
# Warmup Iteration  22: 793848.509 ops/s
# Warmup Iteration  23: 798153.125 ops/s
# Warmup Iteration  24: 792083.565 ops/s
# Warmup Iteration  25: 794760.273 ops/s
# Warmup Iteration  26: 795104.544 ops/s
# Warmup Iteration  27: 791617.459 ops/s
# Warmup Iteration  28: 792871.187 ops/s
# Warmup Iteration  29: 790692.780 ops/s
# Warmup Iteration  30: 785698.754 ops/s
Iteration   1: 785461.416 ops/s
Iteration   2: 786428.886 ops/s
Iteration   3: 788614.759 ops/s
Iteration   4: 794327.495 ops/s
Iteration   5: 790341.304 ops/s
Iteration   6: 794839.259 ops/s
Iteration   7: 787973.360 ops/s
Iteration   8: 790432.053 ops/s
Iteration   9: 790995.554 ops/s
Iteration  10: 788008.682 ops/s
Iteration  11: 790760.574 ops/s
Iteration  12: 789266.088 ops/s
Iteration  13: 798719.099 ops/s
Iteration  14: 793068.005 ops/s
Iteration  15: 788697.786 ops/s
Iteration  16: 797050.784 ops/s
Iteration  17: 794618.946 ops/s
Iteration  18: 787710.239 ops/s
Iteration  19: 793941.842 ops/s
Iteration  20: 790390.161 ops/s
Iteration  21: 792151.338 ops/s
Iteration  22: 789252.270 ops/s
Iteration  23: 788850.681 ops/s
Iteration  24: 791139.343 ops/s
Iteration  25: 793814.432 ops/s
Iteration  26: 790413.375 ops/s
Iteration  27: 792305.594 ops/s
Iteration  28: 794313.701 ops/s
Iteration  29: 788149.733 ops/s
Iteration  30: 791450.651 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmpty":
  791116.247 ±(99.9%) 2081.977 ops/s [Average]
  (min, avg, max) = (785461.416, 791116.247, 798719.099), stdev = 3116.206
  CI (99.9%): [789034.270, 793198.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmpty  thrpt   30  791116.247 ± 2081.977  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481298.093 ops/s
# Warmup Iteration   2: 702778.892 ops/s
# Warmup Iteration   3: 818625.654 ops/s
# Warmup Iteration   4: 817254.265 ops/s
# Warmup Iteration   5: 815138.661 ops/s
# Warmup Iteration   6: 817856.744 ops/s
# Warmup Iteration   7: 679154.833 ops/s
# Warmup Iteration   8: 814418.920 ops/s
# Warmup Iteration   9: 814377.494 ops/s
# Warmup Iteration  10: 818025.357 ops/s
# Warmup Iteration  11: 823156.367 ops/s
# Warmup Iteration  12: 816520.861 ops/s
# Warmup Iteration  13: 818903.305 ops/s
# Warmup Iteration  14: 811347.298 ops/s
# Warmup Iteration  15: 815878.558 ops/s
# Warmup Iteration  16: 820535.218 ops/s
# Warmup Iteration  17: 865446.182 ops/s
# Warmup Iteration  18: 861351.079 ops/s
# Warmup Iteration  19: 864627.175 ops/s
# Warmup Iteration  20: 863264.981 ops/s
# Warmup Iteration  21: 863609.185 ops/s
# Warmup Iteration  22: 860063.039 ops/s
# Warmup Iteration  23: 862789.496 ops/s
# Warmup Iteration  24: 864346.439 ops/s
# Warmup Iteration  25: 859285.418 ops/s
# Warmup Iteration  26: 861140.415 ops/s
# Warmup Iteration  27: 860958.060 ops/s
# Warmup Iteration  28: 864010.083 ops/s
# Warmup Iteration  29: 862790.919 ops/s
# Warmup Iteration  30: 859308.796 ops/s
Iteration   1: 856001.645 ops/s
Iteration   2: 860566.450 ops/s
Iteration   3: 861667.937 ops/s
Iteration   4: 854051.889 ops/s
Iteration   5: 858802.690 ops/s
Iteration   6: 863765.446 ops/s
Iteration   7: 860719.416 ops/s
Iteration   8: 860439.198 ops/s
Iteration   9: 865168.079 ops/s
Iteration  10: 866829.212 ops/s
Iteration  11: 864770.344 ops/s
Iteration  12: 858502.215 ops/s
Iteration  13: 866686.736 ops/s
Iteration  14: 862569.147 ops/s
Iteration  15: 863308.318 ops/s
Iteration  16: 856351.440 ops/s
Iteration  17: 864104.495 ops/s
Iteration  18: 860191.187 ops/s
Iteration  19: 858400.397 ops/s
Iteration  20: 863824.251 ops/s
Iteration  21: 859860.211 ops/s
Iteration  22: 864371.091 ops/s
Iteration  23: 859504.414 ops/s
Iteration  24: 863972.259 ops/s
Iteration  25: 865077.437 ops/s
Iteration  26: 866574.792 ops/s
Iteration  27: 858551.572 ops/s
Iteration  28: 856406.995 ops/s
Iteration  29: 858929.143 ops/s
Iteration  30: 863844.298 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty":
  861460.423 ±(99.9%) 2320.663 ops/s [Average]
  (min, avg, max) = (854051.889, 861460.423, 866829.212), stdev = 3473.459
  CI (99.9%): [859139.761, 863781.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapEmptyAndTargetEmpty  thrpt   30  861460.423 ± 2320.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497843.538 ops/s
# Warmup Iteration   2: 669374.151 ops/s
# Warmup Iteration   3: 803232.051 ops/s
# Warmup Iteration   4: 801487.914 ops/s
# Warmup Iteration   5: 805316.212 ops/s
# Warmup Iteration   6: 806268.995 ops/s
# Warmup Iteration   7: 807092.643 ops/s
# Warmup Iteration   8: 665982.583 ops/s
# Warmup Iteration   9: 804400.389 ops/s
# Warmup Iteration  10: 804771.002 ops/s
# Warmup Iteration  11: 810250.431 ops/s
# Warmup Iteration  12: 804624.489 ops/s
# Warmup Iteration  13: 806523.963 ops/s
# Warmup Iteration  14: 806071.662 ops/s
# Warmup Iteration  15: 806089.711 ops/s
# Warmup Iteration  16: 809911.788 ops/s
# Warmup Iteration  17: 850785.827 ops/s
# Warmup Iteration  18: 854338.404 ops/s
# Warmup Iteration  19: 848720.076 ops/s
# Warmup Iteration  20: 848421.350 ops/s
# Warmup Iteration  21: 855141.986 ops/s
# Warmup Iteration  22: 853260.489 ops/s
# Warmup Iteration  23: 850247.941 ops/s
# Warmup Iteration  24: 851606.758 ops/s
# Warmup Iteration  25: 851386.856 ops/s
# Warmup Iteration  26: 852385.341 ops/s
# Warmup Iteration  27: 849854.986 ops/s
# Warmup Iteration  28: 852014.246 ops/s
# Warmup Iteration  29: 844249.702 ops/s
# Warmup Iteration  30: 848302.717 ops/s
Iteration   1: 847186.482 ops/s
Iteration   2: 846870.219 ops/s
Iteration   3: 851188.368 ops/s
Iteration   4: 848354.190 ops/s
Iteration   5: 851131.659 ops/s
Iteration   6: 851584.981 ops/s
Iteration   7: 849981.548 ops/s
Iteration   8: 849414.298 ops/s
Iteration   9: 845698.992 ops/s
Iteration  10: 844634.682 ops/s
Iteration  11: 847954.291 ops/s
Iteration  12: 851858.201 ops/s
Iteration  13: 844810.377 ops/s
Iteration  14: 845123.948 ops/s
Iteration  15: 846662.994 ops/s
Iteration  16: 845986.029 ops/s
Iteration  17: 852518.513 ops/s
Iteration  18: 849240.997 ops/s
Iteration  19: 847659.076 ops/s
Iteration  20: 850467.029 ops/s
Iteration  21: 853817.107 ops/s
Iteration  22: 846932.820 ops/s
Iteration  23: 845746.782 ops/s
Iteration  24: 852924.286 ops/s
Iteration  25: 849929.836 ops/s
Iteration  26: 848693.275 ops/s
Iteration  27: 852948.003 ops/s
Iteration  28: 849902.756 ops/s
Iteration  29: 843420.384 ops/s
Iteration  30: 841965.078 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterable":
  848486.907 ±(99.9%) 2044.875 ops/s [Average]
  (min, avg, max) = (841965.078, 848486.907, 853817.107), stdev = 3060.674
  CI (99.9%): [846442.031, 850531.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterable  thrpt   30  848486.907 ± 2044.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432375.343 ops/s
# Warmup Iteration   2: 662895.050 ops/s
# Warmup Iteration   3: 753593.166 ops/s
# Warmup Iteration   4: 762470.457 ops/s
# Warmup Iteration   5: 758753.303 ops/s
# Warmup Iteration   6: 729250.996 ops/s
# Warmup Iteration   7: 657148.600 ops/s
# Warmup Iteration   8: 756181.349 ops/s
# Warmup Iteration   9: 755728.807 ops/s
# Warmup Iteration  10: 761040.499 ops/s
# Warmup Iteration  11: 763324.365 ops/s
# Warmup Iteration  12: 756362.792 ops/s
# Warmup Iteration  13: 753277.165 ops/s
# Warmup Iteration  14: 752715.501 ops/s
# Warmup Iteration  15: 756385.706 ops/s
# Warmup Iteration  16: 756152.427 ops/s
# Warmup Iteration  17: 792324.671 ops/s
# Warmup Iteration  18: 791347.060 ops/s
# Warmup Iteration  19: 790882.653 ops/s
# Warmup Iteration  20: 792582.860 ops/s
# Warmup Iteration  21: 795358.700 ops/s
# Warmup Iteration  22: 797060.023 ops/s
# Warmup Iteration  23: 796705.112 ops/s
# Warmup Iteration  24: 790329.417 ops/s
# Warmup Iteration  25: 794176.423 ops/s
# Warmup Iteration  26: 792052.447 ops/s
# Warmup Iteration  27: 793427.904 ops/s
# Warmup Iteration  28: 795329.463 ops/s
# Warmup Iteration  29: 790804.246 ops/s
# Warmup Iteration  30: 792824.766 ops/s
Iteration   1: 787396.298 ops/s
Iteration   2: 796280.343 ops/s
Iteration   3: 793595.112 ops/s
Iteration   4: 793036.249 ops/s
Iteration   5: 788567.291 ops/s
Iteration   6: 792234.210 ops/s
Iteration   7: 793274.353 ops/s
Iteration   8: 788584.627 ops/s
Iteration   9: 792332.525 ops/s
Iteration  10: 791984.425 ops/s
Iteration  11: 788520.620 ops/s
Iteration  12: 788307.504 ops/s
Iteration  13: 791131.289 ops/s
Iteration  14: 790697.050 ops/s
Iteration  15: 792897.825 ops/s
Iteration  16: 792141.201 ops/s
Iteration  17: 791044.319 ops/s
Iteration  18: 789014.643 ops/s
Iteration  19: 792567.085 ops/s
Iteration  20: 791420.305 ops/s
Iteration  21: 793174.587 ops/s
Iteration  22: 791547.390 ops/s
Iteration  23: 788647.956 ops/s
Iteration  24: 787391.023 ops/s
Iteration  25: 788541.791 ops/s
Iteration  26: 785109.305 ops/s
Iteration  27: 786781.753 ops/s
Iteration  28: 791143.246 ops/s
Iteration  29: 791425.819 ops/s
Iteration  30: 793488.511 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmpty":
  790742.622 ±(99.9%) 1684.997 ops/s [Average]
  (min, avg, max) = (785109.305, 790742.622, 796280.343), stdev = 2522.024
  CI (99.9%): [789057.625, 792427.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmpty  thrpt   30  790742.622 ± 1684.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433961.592 ops/s
# Warmup Iteration   2: 679526.861 ops/s
# Warmup Iteration   3: 766442.310 ops/s
# Warmup Iteration   4: 765619.212 ops/s
# Warmup Iteration   5: 763607.111 ops/s
# Warmup Iteration   6: 641867.107 ops/s
# Warmup Iteration   7: 763830.544 ops/s
# Warmup Iteration   8: 767721.246 ops/s
# Warmup Iteration   9: 763347.164 ops/s
# Warmup Iteration  10: 762816.969 ops/s
# Warmup Iteration  11: 766452.837 ops/s
# Warmup Iteration  12: 762554.000 ops/s
# Warmup Iteration  13: 762487.905 ops/s
# Warmup Iteration  14: 761146.358 ops/s
# Warmup Iteration  15: 762616.698 ops/s
# Warmup Iteration  16: 769054.224 ops/s
# Warmup Iteration  17: 805335.049 ops/s
# Warmup Iteration  18: 801496.461 ops/s
# Warmup Iteration  19: 801409.672 ops/s
# Warmup Iteration  20: 804251.769 ops/s
# Warmup Iteration  21: 802293.058 ops/s
# Warmup Iteration  22: 800039.704 ops/s
# Warmup Iteration  23: 805956.020 ops/s
# Warmup Iteration  24: 801337.317 ops/s
# Warmup Iteration  25: 798234.882 ops/s
# Warmup Iteration  26: 810107.137 ops/s
# Warmup Iteration  27: 801055.945 ops/s
# Warmup Iteration  28: 801351.839 ops/s
# Warmup Iteration  29: 803758.694 ops/s
# Warmup Iteration  30: 801324.596 ops/s
Iteration   1: 802370.651 ops/s
Iteration   2: 801944.842 ops/s
Iteration   3: 797134.827 ops/s
Iteration   4: 799497.543 ops/s
Iteration   5: 805568.164 ops/s
Iteration   6: 807928.662 ops/s
Iteration   7: 797020.012 ops/s
Iteration   8: 800668.496 ops/s
Iteration   9: 796749.419 ops/s
Iteration  10: 802786.143 ops/s
Iteration  11: 803816.427 ops/s
Iteration  12: 796064.155 ops/s
Iteration  13: 798007.742 ops/s
Iteration  14: 797005.376 ops/s
Iteration  15: 807109.198 ops/s
Iteration  16: 798536.609 ops/s
Iteration  17: 801730.557 ops/s
Iteration  18: 798718.895 ops/s
Iteration  19: 804882.788 ops/s
Iteration  20: 796767.741 ops/s
Iteration  21: 797600.455 ops/s
Iteration  22: 800506.123 ops/s
Iteration  23: 805328.645 ops/s
Iteration  24: 798401.998 ops/s
Iteration  25: 808103.125 ops/s
Iteration  26: 802042.097 ops/s
Iteration  27: 799747.653 ops/s
Iteration  28: 791871.835 ops/s
Iteration  29: 800943.140 ops/s
Iteration  30: 800753.944 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty":
  800653.575 ±(99.9%) 2589.241 ops/s [Average]
  (min, avg, max) = (791871.835, 800653.575, 808103.125), stdev = 3875.454
  CI (99.9%): [798064.334, 803242.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableEmptyAndTargetEmpty  thrpt   30  800653.575 ± 2589.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 465304.464 ops/s
# Warmup Iteration   2: 694934.277 ops/s
# Warmup Iteration   3: 790243.955 ops/s
# Warmup Iteration   4: 792413.388 ops/s
# Warmup Iteration   5: 790507.384 ops/s
# Warmup Iteration   6: 765771.650 ops/s
# Warmup Iteration   7: 688139.667 ops/s
# Warmup Iteration   8: 791496.127 ops/s
# Warmup Iteration   9: 795301.515 ops/s
# Warmup Iteration  10: 792359.313 ops/s
# Warmup Iteration  11: 793863.700 ops/s
# Warmup Iteration  12: 794164.957 ops/s
# Warmup Iteration  13: 792158.564 ops/s
# Warmup Iteration  14: 792930.602 ops/s
# Warmup Iteration  15: 790594.219 ops/s
# Warmup Iteration  16: 793436.870 ops/s
# Warmup Iteration  17: 831360.379 ops/s
# Warmup Iteration  18: 834145.783 ops/s
# Warmup Iteration  19: 830860.687 ops/s
# Warmup Iteration  20: 830440.781 ops/s
# Warmup Iteration  21: 832354.798 ops/s
# Warmup Iteration  22: 831550.246 ops/s
# Warmup Iteration  23: 831795.989 ops/s
# Warmup Iteration  24: 834932.537 ops/s
# Warmup Iteration  25: 833637.929 ops/s
# Warmup Iteration  26: 832884.200 ops/s
# Warmup Iteration  27: 830040.390 ops/s
# Warmup Iteration  28: 828261.979 ops/s
# Warmup Iteration  29: 830341.490 ops/s
# Warmup Iteration  30: 833998.229 ops/s
Iteration   1: 830473.895 ops/s
Iteration   2: 830887.387 ops/s
Iteration   3: 832572.073 ops/s
Iteration   4: 829154.141 ops/s
Iteration   5: 830935.707 ops/s
Iteration   6: 836358.512 ops/s
Iteration   7: 831190.047 ops/s
Iteration   8: 836460.874 ops/s
Iteration   9: 833394.936 ops/s
Iteration  10: 830722.463 ops/s
Iteration  11: 830396.760 ops/s
Iteration  12: 836194.622 ops/s
Iteration  13: 836709.727 ops/s
Iteration  14: 838726.457 ops/s
Iteration  15: 837253.487 ops/s
Iteration  16: 836039.250 ops/s
Iteration  17: 835949.517 ops/s
Iteration  18: 837472.104 ops/s
Iteration  19: 837931.397 ops/s
Iteration  20: 838546.554 ops/s
Iteration  21: 836567.047 ops/s
Iteration  22: 828955.890 ops/s
Iteration  23: 837809.482 ops/s
Iteration  24: 830770.888 ops/s
Iteration  25: 833281.740 ops/s
Iteration  26: 835685.450 ops/s
Iteration  27: 834217.088 ops/s
Iteration  28: 834554.582 ops/s
Iteration  29: 834271.599 ops/s
Iteration  30: 830525.383 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableNull":
  834133.635 ±(99.9%) 2054.243 ops/s [Average]
  (min, avg, max) = (828955.890, 834133.635, 838726.457), stdev = 3074.695
  CI (99.9%): [832079.392, 836187.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableNull  thrpt   30  834133.635 ± 2054.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 446291.932 ops/s
# Warmup Iteration   2: 660273.301 ops/s
# Warmup Iteration   3: 769028.171 ops/s
# Warmup Iteration   4: 769344.328 ops/s
# Warmup Iteration   5: 774809.182 ops/s
# Warmup Iteration   6: 774042.918 ops/s
# Warmup Iteration   7: 637359.564 ops/s
# Warmup Iteration   8: 772524.620 ops/s
# Warmup Iteration   9: 775127.491 ops/s
# Warmup Iteration  10: 769942.307 ops/s
# Warmup Iteration  11: 771591.751 ops/s
# Warmup Iteration  12: 773021.819 ops/s
# Warmup Iteration  13: 769542.776 ops/s
# Warmup Iteration  14: 772197.592 ops/s
# Warmup Iteration  15: 770292.331 ops/s
# Warmup Iteration  16: 774132.353 ops/s
# Warmup Iteration  17: 806560.907 ops/s
# Warmup Iteration  18: 809371.622 ops/s
# Warmup Iteration  19: 810349.121 ops/s
# Warmup Iteration  20: 806869.994 ops/s
# Warmup Iteration  21: 807533.023 ops/s
# Warmup Iteration  22: 805822.225 ops/s
# Warmup Iteration  23: 806186.047 ops/s
# Warmup Iteration  24: 810678.719 ops/s
# Warmup Iteration  25: 808133.875 ops/s
# Warmup Iteration  26: 803480.380 ops/s
# Warmup Iteration  27: 799071.947 ops/s
# Warmup Iteration  28: 801500.935 ops/s
# Warmup Iteration  29: 805468.118 ops/s
# Warmup Iteration  30: 808576.916 ops/s
Iteration   1: 806371.895 ops/s
Iteration   2: 807893.125 ops/s
Iteration   3: 804849.146 ops/s
Iteration   4: 801979.088 ops/s
Iteration   5: 806100.232 ops/s
Iteration   6: 802913.620 ops/s
Iteration   7: 815124.245 ops/s
Iteration   8: 805117.817 ops/s
Iteration   9: 806959.067 ops/s
Iteration  10: 807441.337 ops/s
Iteration  11: 809381.368 ops/s
Iteration  12: 805758.201 ops/s
Iteration  13: 808127.439 ops/s
Iteration  14: 805761.575 ops/s
Iteration  15: 804400.432 ops/s
Iteration  16: 808138.746 ops/s
Iteration  17: 802139.823 ops/s
Iteration  18: 805382.536 ops/s
Iteration  19: 801135.537 ops/s
Iteration  20: 804228.529 ops/s
Iteration  21: 804847.230 ops/s
Iteration  22: 799625.263 ops/s
Iteration  23: 803636.622 ops/s
Iteration  24: 802465.829 ops/s
Iteration  25: 792200.673 ops/s
Iteration  26: 804276.569 ops/s
Iteration  27: 801643.144 ops/s
Iteration  28: 798272.318 ops/s
Iteration  29: 807641.967 ops/s
Iteration  30: 802624.242 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty":
  804547.920 ±(99.9%) 2678.313 ops/s [Average]
  (min, avg, max) = (792200.673, 804547.920, 815124.245), stdev = 4008.772
  CI (99.9%): [801869.608, 807226.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapIterableTargetEmpty  thrpt   30  804547.920 ± 2678.313  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapNull$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapNull

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 455715.957 ops/s
# Warmup Iteration   2: 676064.453 ops/s
# Warmup Iteration   3: 775289.718 ops/s
# Warmup Iteration   4: 782688.518 ops/s
# Warmup Iteration   5: 774965.947 ops/s
# Warmup Iteration   6: 774282.723 ops/s
# Warmup Iteration   7: 646700.664 ops/s
# Warmup Iteration   8: 773240.289 ops/s
# Warmup Iteration   9: 780487.565 ops/s
# Warmup Iteration  10: 776156.721 ops/s
# Warmup Iteration  11: 769022.933 ops/s
# Warmup Iteration  12: 780166.890 ops/s
# Warmup Iteration  13: 777607.032 ops/s
# Warmup Iteration  14: 774224.320 ops/s
# Warmup Iteration  15: 777810.270 ops/s
# Warmup Iteration  16: 774088.471 ops/s
# Warmup Iteration  17: 818904.121 ops/s
# Warmup Iteration  18: 819081.425 ops/s
# Warmup Iteration  19: 817100.377 ops/s
# Warmup Iteration  20: 818847.422 ops/s
# Warmup Iteration  21: 817571.088 ops/s
# Warmup Iteration  22: 817226.205 ops/s
# Warmup Iteration  23: 818481.295 ops/s
# Warmup Iteration  24: 818375.890 ops/s
# Warmup Iteration  25: 821101.484 ops/s
# Warmup Iteration  26: 819294.392 ops/s
# Warmup Iteration  27: 810412.663 ops/s
# Warmup Iteration  28: 815503.200 ops/s
# Warmup Iteration  29: 817332.993 ops/s
# Warmup Iteration  30: 817152.733 ops/s
Iteration   1: 810364.026 ops/s
Iteration   2: 821841.239 ops/s
Iteration   3: 816616.055 ops/s
Iteration   4: 820846.679 ops/s
Iteration   5: 820047.146 ops/s
Iteration   6: 818617.570 ops/s
Iteration   7: 815776.113 ops/s
Iteration   8: 824743.201 ops/s
Iteration   9: 817550.700 ops/s
Iteration  10: 822952.398 ops/s
Iteration  11: 819447.035 ops/s
Iteration  12: 827517.546 ops/s
Iteration  13: 815856.361 ops/s
Iteration  14: 817089.609 ops/s
Iteration  15: 814163.433 ops/s
Iteration  16: 820538.978 ops/s
Iteration  17: 815575.072 ops/s
Iteration  18: 818254.326 ops/s
Iteration  19: 818862.660 ops/s
Iteration  20: 819659.293 ops/s
Iteration  21: 820418.792 ops/s
Iteration  22: 816810.224 ops/s
Iteration  23: 819946.675 ops/s
Iteration  24: 816426.946 ops/s
Iteration  25: 816065.053 ops/s
Iteration  26: 821772.892 ops/s
Iteration  27: 811783.062 ops/s
Iteration  28: 814342.592 ops/s
Iteration  29: 819307.432 ops/s
Iteration  30: 820759.237 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapNull":
  818465.078 ±(99.9%) 2411.719 ops/s [Average]
  (min, avg, max) = (810364.026, 818465.078, 827517.546), stdev = 3609.748
  CI (99.9%): [816053.359, 820876.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapNull  thrpt   30  818465.078 ± 2411.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapTargetEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapTargetEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451129.850 ops/s
# Warmup Iteration   2: 651460.638 ops/s
# Warmup Iteration   3: 755716.953 ops/s
# Warmup Iteration   4: 753911.876 ops/s
# Warmup Iteration   5: 756259.486 ops/s
# Warmup Iteration   6: 758643.293 ops/s
# Warmup Iteration   7: 629427.103 ops/s
# Warmup Iteration   8: 761347.528 ops/s
# Warmup Iteration   9: 756912.256 ops/s
# Warmup Iteration  10: 756638.582 ops/s
# Warmup Iteration  11: 757323.752 ops/s
# Warmup Iteration  12: 754321.175 ops/s
# Warmup Iteration  13: 759132.879 ops/s
# Warmup Iteration  14: 763545.217 ops/s
# Warmup Iteration  15: 755773.711 ops/s
# Warmup Iteration  16: 759718.130 ops/s
# Warmup Iteration  17: 791949.828 ops/s
# Warmup Iteration  18: 790045.152 ops/s
# Warmup Iteration  19: 792118.862 ops/s
# Warmup Iteration  20: 792718.303 ops/s
# Warmup Iteration  21: 793140.701 ops/s
# Warmup Iteration  22: 790043.789 ops/s
# Warmup Iteration  23: 793384.162 ops/s
# Warmup Iteration  24: 786127.649 ops/s
# Warmup Iteration  25: 788900.668 ops/s
# Warmup Iteration  26: 788562.473 ops/s
# Warmup Iteration  27: 790292.262 ops/s
# Warmup Iteration  28: 790181.472 ops/s
# Warmup Iteration  29: 791076.248 ops/s
# Warmup Iteration  30: 788744.687 ops/s
Iteration   1: 788766.813 ops/s
Iteration   2: 788550.047 ops/s
Iteration   3: 788867.676 ops/s
Iteration   4: 788557.696 ops/s
Iteration   5: 788734.843 ops/s
Iteration   6: 787964.741 ops/s
Iteration   7: 788907.630 ops/s
Iteration   8: 792900.947 ops/s
Iteration   9: 794342.143 ops/s
Iteration  10: 790028.013 ops/s
Iteration  11: 792630.347 ops/s
Iteration  12: 789674.055 ops/s
Iteration  13: 790270.230 ops/s
Iteration  14: 797319.516 ops/s
Iteration  15: 790486.769 ops/s
Iteration  16: 787915.062 ops/s
Iteration  17: 786538.577 ops/s
Iteration  18: 790671.815 ops/s
Iteration  19: 791571.063 ops/s
Iteration  20: 782148.737 ops/s
Iteration  21: 786388.453 ops/s
Iteration  22: 788620.379 ops/s
Iteration  23: 780820.268 ops/s
Iteration  24: 792269.517 ops/s
Iteration  25: 784855.996 ops/s
Iteration  26: 793065.518 ops/s
Iteration  27: 782381.538 ops/s
Iteration  28: 793478.835 ops/s
Iteration  29: 787230.904 ops/s
Iteration  30: 791602.470 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withMapTargetEmpty":
  789252.020 ±(99.9%) 2440.057 ops/s [Average]
  (min, avg, max) = (780820.268, 789252.020, 797319.516), stdev = 3652.163
  CI (99.9%): [786811.963, 791692.077] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withMapTargetEmpty  thrpt   30  789252.020 ± 2440.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutAllKeys$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutAllKeys

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451748.432 ops/s
# Warmup Iteration   2: 632329.059 ops/s
# Warmup Iteration   3: 755271.733 ops/s
# Warmup Iteration   4: 750486.946 ops/s
# Warmup Iteration   5: 755620.886 ops/s
# Warmup Iteration   6: 754133.871 ops/s
# Warmup Iteration   7: 672953.004 ops/s
# Warmup Iteration   8: 711026.814 ops/s
# Warmup Iteration   9: 753363.779 ops/s
# Warmup Iteration  10: 747720.302 ops/s
# Warmup Iteration  11: 753807.249 ops/s
# Warmup Iteration  12: 752469.499 ops/s
# Warmup Iteration  13: 752698.209 ops/s
# Warmup Iteration  14: 754180.657 ops/s
# Warmup Iteration  15: 753511.186 ops/s
# Warmup Iteration  16: 754912.108 ops/s
# Warmup Iteration  17: 794535.288 ops/s
# Warmup Iteration  18: 794010.423 ops/s
# Warmup Iteration  19: 793145.749 ops/s
# Warmup Iteration  20: 795146.830 ops/s
# Warmup Iteration  21: 798773.280 ops/s
# Warmup Iteration  22: 793139.578 ops/s
# Warmup Iteration  23: 796055.712 ops/s
# Warmup Iteration  24: 795311.024 ops/s
# Warmup Iteration  25: 788852.872 ops/s
# Warmup Iteration  26: 794600.131 ops/s
# Warmup Iteration  27: 794335.906 ops/s
# Warmup Iteration  28: 799188.996 ops/s
# Warmup Iteration  29: 791049.655 ops/s
# Warmup Iteration  30: 794325.108 ops/s
Iteration   1: 789139.038 ops/s
Iteration   2: 798001.564 ops/s
Iteration   3: 789526.322 ops/s
Iteration   4: 799037.669 ops/s
Iteration   5: 794081.030 ops/s
Iteration   6: 797083.452 ops/s
Iteration   7: 798499.499 ops/s
Iteration   8: 791474.045 ops/s
Iteration   9: 794816.174 ops/s
Iteration  10: 794580.218 ops/s
Iteration  11: 795336.810 ops/s
Iteration  12: 795448.804 ops/s
Iteration  13: 797155.164 ops/s
Iteration  14: 794345.920 ops/s
Iteration  15: 803207.442 ops/s
Iteration  16: 799982.708 ops/s
Iteration  17: 795368.554 ops/s
Iteration  18: 792290.916 ops/s
Iteration  19: 790763.400 ops/s
Iteration  20: 786266.539 ops/s
Iteration  21: 788203.736 ops/s
Iteration  22: 794092.906 ops/s
Iteration  23: 798087.859 ops/s
Iteration  24: 789561.400 ops/s
Iteration  25: 789501.445 ops/s
Iteration  26: 794086.942 ops/s
Iteration  27: 791720.219 ops/s
Iteration  28: 790949.312 ops/s
Iteration  29: 791863.573 ops/s
Iteration  30: 789555.541 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutAllKeys":
  793800.940 ±(99.9%) 2659.974 ops/s [Average]
  (min, avg, max) = (786266.539, 793800.940, 803207.442), stdev = 3981.324
  CI (99.9%): [791140.966, 796460.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withoutAllKeys  thrpt   30  793800.940 ± 2659.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 477832.471 ops/s
# Warmup Iteration   2: 660210.061 ops/s
# Warmup Iteration   3: 780250.749 ops/s
# Warmup Iteration   4: 789508.658 ops/s
# Warmup Iteration   5: 787157.421 ops/s
# Warmup Iteration   6: 786757.941 ops/s
# Warmup Iteration   7: 693157.588 ops/s
# Warmup Iteration   8: 752157.886 ops/s
# Warmup Iteration   9: 785463.637 ops/s
# Warmup Iteration  10: 788004.988 ops/s
# Warmup Iteration  11: 788719.678 ops/s
# Warmup Iteration  12: 789905.420 ops/s
# Warmup Iteration  13: 790946.475 ops/s
# Warmup Iteration  14: 791166.416 ops/s
# Warmup Iteration  15: 788049.115 ops/s
# Warmup Iteration  16: 790985.656 ops/s
# Warmup Iteration  17: 821740.262 ops/s
# Warmup Iteration  18: 821146.112 ops/s
# Warmup Iteration  19: 821114.794 ops/s
# Warmup Iteration  20: 819862.984 ops/s
# Warmup Iteration  21: 822544.942 ops/s
# Warmup Iteration  22: 823338.360 ops/s
# Warmup Iteration  23: 821342.191 ops/s
# Warmup Iteration  24: 814200.408 ops/s
# Warmup Iteration  25: 818039.409 ops/s
# Warmup Iteration  26: 819132.424 ops/s
# Warmup Iteration  27: 820116.562 ops/s
# Warmup Iteration  28: 821254.020 ops/s
# Warmup Iteration  29: 823121.953 ops/s
# Warmup Iteration  30: 817025.587 ops/s
Iteration   1: 822184.147 ops/s
Iteration   2: 829024.644 ops/s
Iteration   3: 821587.527 ops/s
Iteration   4: 827614.478 ops/s
Iteration   5: 824628.020 ops/s
Iteration   6: 823480.362 ops/s
Iteration   7: 820293.314 ops/s
Iteration   8: 822878.546 ops/s
Iteration   9: 818256.269 ops/s
Iteration  10: 822532.162 ops/s
Iteration  11: 825896.289 ops/s
Iteration  12: 821346.459 ops/s
Iteration  13: 823897.738 ops/s
Iteration  14: 820601.619 ops/s
Iteration  15: 820443.243 ops/s
Iteration  16: 824467.788 ops/s
Iteration  17: 820652.308 ops/s
Iteration  18: 819416.730 ops/s
Iteration  19: 819826.521 ops/s
Iteration  20: 815996.485 ops/s
Iteration  21: 816432.964 ops/s
Iteration  22: 825125.141 ops/s
Iteration  23: 823689.669 ops/s
Iteration  24: 822248.748 ops/s
Iteration  25: 820972.256 ops/s
Iteration  26: 820786.161 ops/s
Iteration  27: 820037.390 ops/s
Iteration  28: 820287.389 ops/s
Iteration  29: 815944.065 ops/s
Iteration  30: 814451.935 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_withoutKey":
  821500.012 ±(99.9%) 2240.834 ops/s [Average]
  (min, avg, max) = (814451.935, 821500.012, 829024.644), stdev = 3353.976
  CI (99.9%): [819259.178, 823740.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_withoutKey  thrpt   30  821500.012 ± 2240.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 227000.984 ops/s
# Warmup Iteration   2: 364739.455 ops/s
# Warmup Iteration   3: 442798.533 ops/s
# Warmup Iteration   4: 445794.767 ops/s
# Warmup Iteration   5: 444775.367 ops/s
# Warmup Iteration   6: 426303.527 ops/s
# Warmup Iteration   7: 390113.435 ops/s
# Warmup Iteration   8: 444620.601 ops/s
# Warmup Iteration   9: 442089.215 ops/s
# Warmup Iteration  10: 445857.698 ops/s
# Warmup Iteration  11: 446215.947 ops/s
# Warmup Iteration  12: 447110.985 ops/s
# Warmup Iteration  13: 446048.889 ops/s
# Warmup Iteration  14: 444654.139 ops/s
# Warmup Iteration  15: 446101.577 ops/s
# Warmup Iteration  16: 446138.437 ops/s
# Warmup Iteration  17: 448387.746 ops/s
# Warmup Iteration  18: 447950.439 ops/s
# Warmup Iteration  19: 448453.862 ops/s
# Warmup Iteration  20: 449132.146 ops/s
# Warmup Iteration  21: 447785.416 ops/s
# Warmup Iteration  22: 448556.654 ops/s
# Warmup Iteration  23: 446646.102 ops/s
# Warmup Iteration  24: 451142.476 ops/s
# Warmup Iteration  25: 447354.267 ops/s
# Warmup Iteration  26: 447478.162 ops/s
# Warmup Iteration  27: 449194.471 ops/s
# Warmup Iteration  28: 449782.871 ops/s
# Warmup Iteration  29: 448460.962 ops/s
# Warmup Iteration  30: 447820.189 ops/s
Iteration   1: 445907.113 ops/s
Iteration   2: 450549.213 ops/s
Iteration   3: 449153.930 ops/s
Iteration   4: 448459.633 ops/s
Iteration   5: 448013.319 ops/s
Iteration   6: 451652.368 ops/s
Iteration   7: 448099.917 ops/s
Iteration   8: 447344.167 ops/s
Iteration   9: 449285.451 ops/s
Iteration  10: 447734.459 ops/s
Iteration  11: 446429.700 ops/s
Iteration  12: 450038.555 ops/s
Iteration  13: 448280.148 ops/s
Iteration  14: 450061.579 ops/s
Iteration  15: 448299.590 ops/s
Iteration  16: 446988.340 ops/s
Iteration  17: 447125.317 ops/s
Iteration  18: 450663.784 ops/s
Iteration  19: 447198.009 ops/s
Iteration  20: 450200.593 ops/s
Iteration  21: 450031.755 ops/s
Iteration  22: 447971.017 ops/s
Iteration  23: 449191.001 ops/s
Iteration  24: 446761.143 ops/s
Iteration  25: 450590.922 ops/s
Iteration  26: 447745.162 ops/s
Iteration  27: 450947.945 ops/s
Iteration  28: 446897.371 ops/s
Iteration  29: 452355.611 ops/s
Iteration  30: 448329.511 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zip":
  448743.554 ±(99.9%) 1106.858 ops/s [Average]
  (min, avg, max) = (445907.113, 448743.554, 452355.611), stdev = 1656.692
  CI (99.9%): [447636.696, 449850.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_zip  thrpt   30  448743.554 ± 1106.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487797.976 ops/s
# Warmup Iteration   2: 883461.654 ops/s
# Warmup Iteration   3: 991845.390 ops/s
# Warmup Iteration   4: 993528.207 ops/s
# Warmup Iteration   5: 993050.170 ops/s
# Warmup Iteration   6: 824785.315 ops/s
# Warmup Iteration   7: 995581.692 ops/s
# Warmup Iteration   8: 992813.973 ops/s
# Warmup Iteration   9: 991430.704 ops/s
# Warmup Iteration  10: 990398.471 ops/s
# Warmup Iteration  11: 997488.675 ops/s
# Warmup Iteration  12: 995277.927 ops/s
# Warmup Iteration  13: 996645.182 ops/s
# Warmup Iteration  14: 997825.971 ops/s
# Warmup Iteration  15: 997058.322 ops/s
# Warmup Iteration  16: 995513.989 ops/s
# Warmup Iteration  17: 993197.567 ops/s
# Warmup Iteration  18: 993812.124 ops/s
# Warmup Iteration  19: 999396.680 ops/s
# Warmup Iteration  20: 998529.848 ops/s
# Warmup Iteration  21: 995483.131 ops/s
# Warmup Iteration  22: 997909.160 ops/s
# Warmup Iteration  23: 992826.816 ops/s
# Warmup Iteration  24: 989357.538 ops/s
# Warmup Iteration  25: 995730.591 ops/s
# Warmup Iteration  26: 998929.717 ops/s
# Warmup Iteration  27: 994870.949 ops/s
# Warmup Iteration  28: 997653.729 ops/s
# Warmup Iteration  29: 994203.833 ops/s
# Warmup Iteration  30: 994328.396 ops/s
Iteration   1: 997438.961 ops/s
Iteration   2: 994957.977 ops/s
Iteration   3: 998091.216 ops/s
Iteration   4: 999915.074 ops/s
Iteration   5: 998654.630 ops/s
Iteration   6: 996509.461 ops/s
Iteration   7: 996706.464 ops/s
Iteration   8: 998637.686 ops/s
Iteration   9: 998818.639 ops/s
Iteration  10: 1004114.082 ops/s
Iteration  11: 995258.942 ops/s
Iteration  12: 998634.106 ops/s
Iteration  13: 999570.668 ops/s
Iteration  14: 990554.227 ops/s
Iteration  15: 995219.211 ops/s
Iteration  16: 992577.086 ops/s
Iteration  17: 995361.614 ops/s
Iteration  18: 993376.155 ops/s
Iteration  19: 990877.845 ops/s
Iteration  20: 1001083.579 ops/s
Iteration  21: 993185.417 ops/s
Iteration  22: 997856.800 ops/s
Iteration  23: 996951.075 ops/s
Iteration  24: 992730.945 ops/s
Iteration  25: 997276.776 ops/s
Iteration  26: 997974.072 ops/s
Iteration  27: 999324.445 ops/s
Iteration  28: 998784.297 ops/s
Iteration  29: 994633.356 ops/s
Iteration  30: 992604.573 ops/s


Result "org.eclipse.collections.impl.bimap.mutable.UnmodifiableBiMapTest._Benchmark.benchmark_zipWithIndex":
  996589.313 ±(99.9%) 2088.080 ops/s [Average]
  (min, avg, max) = (990554.227, 996589.313, 1004114.082), stdev = 3125.340
  CI (99.9%): [994501.232, 998677.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
UnmodifiableBiMapTest._Benchmark.benchmark_zipWithIndex  thrpt   30  996589.313 ± 2088.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710295.245 ops/s
# Warmup Iteration   2: 767401.775 ops/s
# Warmup Iteration   3: 1001683.687 ops/s
# Warmup Iteration   4: 1006689.291 ops/s
# Warmup Iteration   5: 1005520.185 ops/s
# Warmup Iteration   6: 1001199.703 ops/s
# Warmup Iteration   7: 999925.571 ops/s
# Warmup Iteration   8: 1002707.542 ops/s
# Warmup Iteration   9: 998709.578 ops/s
# Warmup Iteration  10: 968780.006 ops/s
# Warmup Iteration  11: 869807.674 ops/s
# Warmup Iteration  12: 1002965.171 ops/s
# Warmup Iteration  13: 1002120.909 ops/s
# Warmup Iteration  14: 1002372.766 ops/s
# Warmup Iteration  15: 1000753.643 ops/s
# Warmup Iteration  16: 1003924.012 ops/s
# Warmup Iteration  17: 1068273.743 ops/s
# Warmup Iteration  18: 1071671.704 ops/s
# Warmup Iteration  19: 1070253.510 ops/s
# Warmup Iteration  20: 1066848.635 ops/s
# Warmup Iteration  21: 1070207.086 ops/s
# Warmup Iteration  22: 1071826.614 ops/s
# Warmup Iteration  23: 1064576.967 ops/s
# Warmup Iteration  24: 1064359.089 ops/s
# Warmup Iteration  25: 1071102.952 ops/s
# Warmup Iteration  26: 1066740.234 ops/s
# Warmup Iteration  27: 1064941.475 ops/s
# Warmup Iteration  28: 1067098.701 ops/s
# Warmup Iteration  29: 1070433.188 ops/s
# Warmup Iteration  30: 1070549.917 ops/s
Iteration   1: 1069290.014 ops/s
Iteration   2: 1066716.236 ops/s
Iteration   3: 1068480.044 ops/s
Iteration   4: 1070383.789 ops/s
Iteration   5: 1070292.067 ops/s
Iteration   6: 1066333.742 ops/s
Iteration   7: 1069851.917 ops/s
Iteration   8: 1068406.877 ops/s
Iteration   9: 1074775.793 ops/s
Iteration  10: 1069730.744 ops/s
Iteration  11: 1071336.844 ops/s
Iteration  12: 1071074.634 ops/s
Iteration  13: 1063451.354 ops/s
Iteration  14: 1066980.202 ops/s
Iteration  15: 1067075.540 ops/s
Iteration  16: 1062784.536 ops/s
Iteration  17: 1071389.090 ops/s
Iteration  18: 1069582.410 ops/s
Iteration  19: 1058952.367 ops/s
Iteration  20: 1072751.848 ops/s
Iteration  21: 1066433.542 ops/s
Iteration  22: 1068216.744 ops/s
Iteration  23: 1069999.509 ops/s
Iteration  24: 1068238.927 ops/s
Iteration  25: 1075115.505 ops/s
Iteration  26: 1067219.267 ops/s
Iteration  27: 1064533.389 ops/s
Iteration  28: 1062453.644 ops/s
Iteration  29: 1072637.168 ops/s
Iteration  30: 1073614.475 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_add":
  1068603.407 ±(99.9%) 2485.147 ops/s [Average]
  (min, avg, max) = (1058952.367, 1068603.407, 1075115.505), stdev = 3719.652
  CI (99.9%): [1066118.260, 1071088.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  1068603.407 ± 2485.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707683.149 ops/s
# Warmup Iteration   2: 763224.431 ops/s
# Warmup Iteration   3: 1002442.237 ops/s
# Warmup Iteration   4: 998451.147 ops/s
# Warmup Iteration   5: 997480.201 ops/s
# Warmup Iteration   6: 1000441.653 ops/s
# Warmup Iteration   7: 1000056.015 ops/s
# Warmup Iteration   8: 990242.398 ops/s
# Warmup Iteration   9: 1001959.575 ops/s
# Warmup Iteration  10: 949906.345 ops/s
# Warmup Iteration  11: 884838.965 ops/s
# Warmup Iteration  12: 1001679.031 ops/s
# Warmup Iteration  13: 997863.564 ops/s
# Warmup Iteration  14: 1002864.773 ops/s
# Warmup Iteration  15: 995355.653 ops/s
# Warmup Iteration  16: 996690.873 ops/s
# Warmup Iteration  17: 1060133.692 ops/s
# Warmup Iteration  18: 1061565.547 ops/s
# Warmup Iteration  19: 1062618.401 ops/s
# Warmup Iteration  20: 1058001.350 ops/s
# Warmup Iteration  21: 1065542.569 ops/s
# Warmup Iteration  22: 1059180.892 ops/s
# Warmup Iteration  23: 1061458.066 ops/s
# Warmup Iteration  24: 1061092.309 ops/s
# Warmup Iteration  25: 1067492.738 ops/s
# Warmup Iteration  26: 1064658.147 ops/s
# Warmup Iteration  27: 1065557.990 ops/s
# Warmup Iteration  28: 1059549.124 ops/s
# Warmup Iteration  29: 1055320.276 ops/s
# Warmup Iteration  30: 1066398.049 ops/s
Iteration   1: 1057723.423 ops/s
Iteration   2: 1060253.892 ops/s
Iteration   3: 1058098.354 ops/s
Iteration   4: 1063449.619 ops/s
Iteration   5: 1062376.134 ops/s
Iteration   6: 1062593.799 ops/s
Iteration   7: 1068885.349 ops/s
Iteration   8: 1064683.548 ops/s
Iteration   9: 1061283.326 ops/s
Iteration  10: 1060217.612 ops/s
Iteration  11: 1057088.069 ops/s
Iteration  12: 1054429.943 ops/s
Iteration  13: 1062195.302 ops/s
Iteration  14: 1063496.460 ops/s
Iteration  15: 1063403.428 ops/s
Iteration  16: 1057223.862 ops/s
Iteration  17: 1054535.573 ops/s
Iteration  18: 1058344.295 ops/s
Iteration  19: 1064003.080 ops/s
Iteration  20: 1060642.734 ops/s
Iteration  21: 1064475.882 ops/s
Iteration  22: 1060347.153 ops/s
Iteration  23: 1071813.594 ops/s
Iteration  24: 1061674.378 ops/s
Iteration  25: 1065515.967 ops/s
Iteration  26: 1064828.334 ops/s
Iteration  27: 1063670.622 ops/s
Iteration  28: 1063613.883 ops/s
Iteration  29: 1061453.608 ops/s
Iteration  30: 1058173.029 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll":
  1061683.142 ±(99.9%) 2554.206 ops/s [Average]
  (min, avg, max) = (1054429.943, 1061683.142, 1071813.594), stdev = 3823.016
  CI (99.9%): [1059128.936, 1064237.348] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  1061683.142 ± 2554.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704728.923 ops/s
# Warmup Iteration   2: 777445.403 ops/s
# Warmup Iteration   3: 1014411.886 ops/s
# Warmup Iteration   4: 1010801.311 ops/s
# Warmup Iteration   5: 1011196.660 ops/s
# Warmup Iteration   6: 1003434.247 ops/s
# Warmup Iteration   7: 1009261.136 ops/s
# Warmup Iteration   8: 1011596.326 ops/s
# Warmup Iteration   9: 1008305.288 ops/s
# Warmup Iteration  10: 880968.353 ops/s
# Warmup Iteration  11: 969977.309 ops/s
# Warmup Iteration  12: 1013285.499 ops/s
# Warmup Iteration  13: 1013956.033 ops/s
# Warmup Iteration  14: 1011478.126 ops/s
# Warmup Iteration  15: 1012769.516 ops/s
# Warmup Iteration  16: 1013296.185 ops/s
# Warmup Iteration  17: 1078776.467 ops/s
# Warmup Iteration  18: 1072669.528 ops/s
# Warmup Iteration  19: 1072864.505 ops/s
# Warmup Iteration  20: 1076997.684 ops/s
# Warmup Iteration  21: 1071704.007 ops/s
# Warmup Iteration  22: 1074558.386 ops/s
# Warmup Iteration  23: 1070463.228 ops/s
# Warmup Iteration  24: 1081878.019 ops/s
# Warmup Iteration  25: 1075250.520 ops/s
# Warmup Iteration  26: 1077138.522 ops/s
# Warmup Iteration  27: 1075221.848 ops/s
# Warmup Iteration  28: 1070804.397 ops/s
# Warmup Iteration  29: 1072809.282 ops/s
# Warmup Iteration  30: 1073573.336 ops/s
Iteration   1: 1075690.314 ops/s
Iteration   2: 1070873.022 ops/s
Iteration   3: 1073156.049 ops/s
Iteration   4: 1077129.580 ops/s
Iteration   5: 1074127.651 ops/s
Iteration   6: 1070143.003 ops/s
Iteration   7: 1072208.045 ops/s
Iteration   8: 1080707.721 ops/s
Iteration   9: 1079143.001 ops/s
Iteration  10: 1074449.351 ops/s
Iteration  11: 1072853.040 ops/s
Iteration  12: 1076765.333 ops/s
Iteration  13: 1073402.184 ops/s
Iteration  14: 1069045.888 ops/s
Iteration  15: 1072898.431 ops/s
Iteration  16: 1076877.474 ops/s
Iteration  17: 1074383.482 ops/s
Iteration  18: 1069346.477 ops/s
Iteration  19: 1073753.791 ops/s
Iteration  20: 1070602.673 ops/s
Iteration  21: 1073859.651 ops/s
Iteration  22: 1070145.902 ops/s
Iteration  23: 1067183.160 ops/s
Iteration  24: 1074817.362 ops/s
Iteration  25: 1073539.613 ops/s
Iteration  26: 1074538.119 ops/s
Iteration  27: 1068616.916 ops/s
Iteration  28: 1071880.752 ops/s
Iteration  29: 1070262.056 ops/s
Iteration  30: 1074991.820 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  1073246.395 ±(99.9%) 2089.140 ops/s [Average]
  (min, avg, max) = (1067183.160, 1073246.395, 1080707.721), stdev = 3126.927
  CI (99.9%): [1071157.255, 1075335.536] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1073246.395 ± 2089.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708732.165 ops/s
# Warmup Iteration   2: 763382.691 ops/s
# Warmup Iteration   3: 1004354.554 ops/s
# Warmup Iteration   4: 1001048.294 ops/s
# Warmup Iteration   5: 993797.074 ops/s
# Warmup Iteration   6: 999849.853 ops/s
# Warmup Iteration   7: 997180.188 ops/s
# Warmup Iteration   8: 994953.681 ops/s
# Warmup Iteration   9: 1008038.945 ops/s
# Warmup Iteration  10: 974830.026 ops/s
# Warmup Iteration  11: 860550.460 ops/s
# Warmup Iteration  12: 1003188.190 ops/s
# Warmup Iteration  13: 998965.485 ops/s
# Warmup Iteration  14: 1000587.158 ops/s
# Warmup Iteration  15: 1000794.061 ops/s
# Warmup Iteration  16: 1001439.270 ops/s
# Warmup Iteration  17: 1061637.962 ops/s
# Warmup Iteration  18: 1067030.897 ops/s
# Warmup Iteration  19: 1066066.383 ops/s
# Warmup Iteration  20: 1061628.197 ops/s
# Warmup Iteration  21: 1060450.168 ops/s
# Warmup Iteration  22: 1060210.297 ops/s
# Warmup Iteration  23: 1064772.846 ops/s
# Warmup Iteration  24: 1061459.894 ops/s
# Warmup Iteration  25: 1057955.637 ops/s
# Warmup Iteration  26: 1064638.330 ops/s
# Warmup Iteration  27: 1061846.170 ops/s
# Warmup Iteration  28: 1064106.924 ops/s
# Warmup Iteration  29: 1063800.767 ops/s
# Warmup Iteration  30: 1059363.803 ops/s
Iteration   1: 1065814.680 ops/s
Iteration   2: 1064362.184 ops/s
Iteration   3: 1058784.900 ops/s
Iteration   4: 1060438.859 ops/s
Iteration   5: 1058481.619 ops/s
Iteration   6: 1058801.627 ops/s
Iteration   7: 1065615.669 ops/s
Iteration   8: 1058801.966 ops/s
Iteration   9: 1062934.956 ops/s
Iteration  10: 1061996.729 ops/s
Iteration  11: 1064264.562 ops/s
Iteration  12: 1069343.504 ops/s
Iteration  13: 1063006.456 ops/s
Iteration  14: 1057728.952 ops/s
Iteration  15: 1057780.600 ops/s
Iteration  16: 1065836.364 ops/s
Iteration  17: 1071765.363 ops/s
Iteration  18: 1067965.817 ops/s
Iteration  19: 1067687.802 ops/s
Iteration  20: 1057153.065 ops/s
Iteration  21: 1068293.968 ops/s
Iteration  22: 1062648.120 ops/s
Iteration  23: 1062613.335 ops/s
Iteration  24: 1061215.337 ops/s
Iteration  25: 1056941.630 ops/s
Iteration  26: 1070698.104 ops/s
Iteration  27: 1063208.902 ops/s
Iteration  28: 1063903.662 ops/s
Iteration  29: 1062337.007 ops/s
Iteration  30: 1060015.350 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_clear":
  1063014.703 ±(99.9%) 2768.179 ops/s [Average]
  (min, avg, max) = (1056941.630, 1063014.703, 1071765.363), stdev = 4143.281
  CI (99.9%): [1060246.524, 1065782.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  1063014.703 ± 2768.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1416907.188 ops/s
# Warmup Iteration   2: 3194163.635 ops/s
# Warmup Iteration   3: 3335557.765 ops/s
# Warmup Iteration   4: 3349227.756 ops/s
# Warmup Iteration   5: 2752205.568 ops/s
# Warmup Iteration   6: 3344570.418 ops/s
# Warmup Iteration   7: 3352287.377 ops/s
# Warmup Iteration   8: 3355596.758 ops/s
# Warmup Iteration   9: 3361381.586 ops/s
# Warmup Iteration  10: 3357203.422 ops/s
# Warmup Iteration  11: 3360710.638 ops/s
# Warmup Iteration  12: 3370903.019 ops/s
# Warmup Iteration  13: 3366086.552 ops/s
# Warmup Iteration  14: 3365826.710 ops/s
# Warmup Iteration  15: 3352777.519 ops/s
# Warmup Iteration  16: 3355225.866 ops/s
# Warmup Iteration  17: 3357095.511 ops/s
# Warmup Iteration  18: 3360551.248 ops/s
# Warmup Iteration  19: 3360885.079 ops/s
# Warmup Iteration  20: 3359458.310 ops/s
# Warmup Iteration  21: 3360004.279 ops/s
# Warmup Iteration  22: 3337579.795 ops/s
# Warmup Iteration  23: 3365129.268 ops/s
# Warmup Iteration  24: 3349378.984 ops/s
# Warmup Iteration  25: 3349979.357 ops/s
# Warmup Iteration  26: 3364902.033 ops/s
# Warmup Iteration  27: 3361590.539 ops/s
# Warmup Iteration  28: 3354515.233 ops/s
# Warmup Iteration  29: 3371987.033 ops/s
# Warmup Iteration  30: 3356389.045 ops/s
Iteration   1: 3369652.181 ops/s
Iteration   2: 3361753.774 ops/s
Iteration   3: 3363795.821 ops/s
Iteration   4: 3363784.960 ops/s
Iteration   5: 3365841.988 ops/s
Iteration   6: 3359182.701 ops/s
Iteration   7: 3361214.918 ops/s
Iteration   8: 3353651.229 ops/s
Iteration   9: 3360617.954 ops/s
Iteration  10: 3348225.670 ops/s
Iteration  11: 3333453.261 ops/s
Iteration  12: 3365542.238 ops/s
Iteration  13: 3367722.218 ops/s
Iteration  14: 3362525.556 ops/s
Iteration  15: 3355155.362 ops/s
Iteration  16: 3368270.781 ops/s
Iteration  17: 3346840.970 ops/s
Iteration  18: 3367719.051 ops/s
Iteration  19: 3346613.064 ops/s
Iteration  20: 3359177.312 ops/s
Iteration  21: 3337649.285 ops/s
Iteration  22: 3339820.822 ops/s
Iteration  23: 3359743.183 ops/s
Iteration  24: 3373236.292 ops/s
Iteration  25: 3357216.692 ops/s
Iteration  26: 3354875.922 ops/s
Iteration  27: 3351973.153 ops/s
Iteration  28: 3359103.805 ops/s
Iteration  29: 3380700.261 ops/s
Iteration  30: 3347336.475 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collect":
  3358079.897 ±(99.9%) 7133.550 ops/s [Average]
  (min, avg, max) = (3333453.261, 3358079.897, 3380700.261), stdev = 10677.162
  CI (99.9%): [3350946.347, 3365213.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  3358079.897 ± 7133.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4157795.738 ops/s
# Warmup Iteration   2: 9642928.428 ops/s
# Warmup Iteration   3: 8104436.941 ops/s
# Warmup Iteration   4: 9786459.865 ops/s
# Warmup Iteration   5: 9819007.547 ops/s
# Warmup Iteration   6: 9732455.346 ops/s
# Warmup Iteration   7: 9809622.941 ops/s
# Warmup Iteration   8: 9813208.412 ops/s
# Warmup Iteration   9: 9822379.224 ops/s
# Warmup Iteration  10: 9805639.873 ops/s
# Warmup Iteration  11: 9786302.297 ops/s
# Warmup Iteration  12: 9816199.076 ops/s
# Warmup Iteration  13: 9776087.078 ops/s
# Warmup Iteration  14: 9806677.799 ops/s
# Warmup Iteration  15: 9783375.041 ops/s
# Warmup Iteration  16: 9768636.904 ops/s
# Warmup Iteration  17: 9825802.696 ops/s
# Warmup Iteration  18: 9836475.894 ops/s
# Warmup Iteration  19: 9790314.188 ops/s
# Warmup Iteration  20: 9738085.496 ops/s
# Warmup Iteration  21: 9798315.061 ops/s
# Warmup Iteration  22: 9754304.212 ops/s
# Warmup Iteration  23: 9793703.170 ops/s
# Warmup Iteration  24: 9791399.355 ops/s
# Warmup Iteration  25: 9782931.247 ops/s
# Warmup Iteration  26: 9824407.501 ops/s
# Warmup Iteration  27: 9786277.746 ops/s
# Warmup Iteration  28: 9808559.515 ops/s
# Warmup Iteration  29: 9796376.320 ops/s
# Warmup Iteration  30: 9799619.145 ops/s
Iteration   1: 9854720.630 ops/s
Iteration   2: 9832394.040 ops/s
Iteration   3: 9799169.749 ops/s
Iteration   4: 9822487.605 ops/s
Iteration   5: 9753487.890 ops/s
Iteration   6: 9845508.918 ops/s
Iteration   7: 9829506.629 ops/s
Iteration   8: 9790553.277 ops/s
Iteration   9: 9813739.862 ops/s
Iteration  10: 9776439.834 ops/s
Iteration  11: 9754022.421 ops/s
Iteration  12: 9769772.177 ops/s
Iteration  13: 9732313.735 ops/s
Iteration  14: 9851927.425 ops/s
Iteration  15: 9803970.031 ops/s
Iteration  16: 9849917.975 ops/s
Iteration  17: 9849422.680 ops/s
Iteration  18: 9843704.069 ops/s
Iteration  19: 9781511.463 ops/s
Iteration  20: 9807689.693 ops/s
Iteration  21: 9751162.481 ops/s
Iteration  22: 9785864.704 ops/s
Iteration  23: 9776186.489 ops/s
Iteration  24: 9840820.579 ops/s
Iteration  25: 9773366.053 ops/s
Iteration  26: 9786397.498 ops/s
Iteration  27: 9757467.217 ops/s
Iteration  28: 9764139.298 ops/s
Iteration  29: 9711045.076 ops/s
Iteration  30: 9822211.238 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  9797697.358 ±(99.9%) 26350.401 ops/s [Average]
  (min, avg, max) = (9711045.076, 9797697.358, 9854720.630), stdev = 39440.043
  CI (99.9%): [9771346.957, 9824047.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  9797697.358 ± 26350.401  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5349749.945 ops/s
# Warmup Iteration   2: 12416888.540 ops/s
# Warmup Iteration   3: 10302882.845 ops/s
# Warmup Iteration   4: 12389499.428 ops/s
# Warmup Iteration   5: 12343829.067 ops/s
# Warmup Iteration   6: 12431497.395 ops/s
# Warmup Iteration   7: 12446905.618 ops/s
# Warmup Iteration   8: 12392672.469 ops/s
# Warmup Iteration   9: 12379979.454 ops/s
# Warmup Iteration  10: 12403988.796 ops/s
# Warmup Iteration  11: 12403276.519 ops/s
# Warmup Iteration  12: 12400428.743 ops/s
# Warmup Iteration  13: 12431667.183 ops/s
# Warmup Iteration  14: 12432759.325 ops/s
# Warmup Iteration  15: 12416099.423 ops/s
# Warmup Iteration  16: 12429983.272 ops/s
# Warmup Iteration  17: 12429107.636 ops/s
# Warmup Iteration  18: 12382551.693 ops/s
# Warmup Iteration  19: 12372293.743 ops/s
# Warmup Iteration  20: 12424625.779 ops/s
# Warmup Iteration  21: 12288798.455 ops/s
# Warmup Iteration  22: 12428638.260 ops/s
# Warmup Iteration  23: 12431380.143 ops/s
# Warmup Iteration  24: 12428777.498 ops/s
# Warmup Iteration  25: 12435755.733 ops/s
# Warmup Iteration  26: 12398525.559 ops/s
# Warmup Iteration  27: 12398058.076 ops/s
# Warmup Iteration  28: 12355656.351 ops/s
# Warmup Iteration  29: 12310302.498 ops/s
# Warmup Iteration  30: 12369447.635 ops/s
Iteration   1: 12319989.434 ops/s
Iteration   2: 12470056.003 ops/s
Iteration   3: 12320397.537 ops/s
Iteration   4: 12371963.013 ops/s
Iteration   5: 12246155.823 ops/s
Iteration   6: 12302422.482 ops/s
Iteration   7: 12278739.599 ops/s
Iteration   8: 12238846.566 ops/s
Iteration   9: 12261144.451 ops/s
Iteration  10: 12323292.886 ops/s
Iteration  11: 12356398.948 ops/s
Iteration  12: 12383609.068 ops/s
Iteration  13: 12458466.720 ops/s
Iteration  14: 12449991.670 ops/s
Iteration  15: 12413227.027 ops/s
Iteration  16: 12274978.842 ops/s
Iteration  17: 12326575.591 ops/s
Iteration  18: 12403471.082 ops/s
Iteration  19: 12437554.116 ops/s
Iteration  20: 12436043.137 ops/s
Iteration  21: 12417208.318 ops/s
Iteration  22: 12398915.645 ops/s
Iteration  23: 12443350.196 ops/s
Iteration  24: 12423595.666 ops/s
Iteration  25: 12409589.428 ops/s
Iteration  26: 12429758.478 ops/s
Iteration  27: 12415782.368 ops/s
Iteration  28: 12434786.645 ops/s
Iteration  29: 12448854.346 ops/s
Iteration  30: 12362281.303 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  12375248.213 ±(99.9%) 46431.973 ops/s [Average]
  (min, avg, max) = (12238846.566, 12375248.213, 12470056.003), stdev = 69497.196
  CI (99.9%): [12328816.240, 12421680.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  12375248.213 ± 46431.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5446751.266 ops/s
# Warmup Iteration   2: 12636027.192 ops/s
# Warmup Iteration   3: 10848139.194 ops/s
# Warmup Iteration   4: 13057372.391 ops/s
# Warmup Iteration   5: 12988998.733 ops/s
# Warmup Iteration   6: 13080911.707 ops/s
# Warmup Iteration   7: 13084866.450 ops/s
# Warmup Iteration   8: 13078008.388 ops/s
# Warmup Iteration   9: 13123326.316 ops/s
# Warmup Iteration  10: 13109365.692 ops/s
# Warmup Iteration  11: 13091564.006 ops/s
# Warmup Iteration  12: 13153504.457 ops/s
# Warmup Iteration  13: 13065335.637 ops/s
# Warmup Iteration  14: 13082288.806 ops/s
# Warmup Iteration  15: 13074490.361 ops/s
# Warmup Iteration  16: 13075002.082 ops/s
# Warmup Iteration  17: 13067518.673 ops/s
# Warmup Iteration  18: 13056250.217 ops/s
# Warmup Iteration  19: 12988484.609 ops/s
# Warmup Iteration  20: 13044528.368 ops/s
# Warmup Iteration  21: 13109773.662 ops/s
# Warmup Iteration  22: 13123576.960 ops/s
# Warmup Iteration  23: 13088362.321 ops/s
# Warmup Iteration  24: 13106677.664 ops/s
# Warmup Iteration  25: 13101942.120 ops/s
# Warmup Iteration  26: 13062291.790 ops/s
# Warmup Iteration  27: 13154158.101 ops/s
# Warmup Iteration  28: 13088835.177 ops/s
# Warmup Iteration  29: 13133884.178 ops/s
# Warmup Iteration  30: 13095756.712 ops/s
Iteration   1: 13063555.616 ops/s
Iteration   2: 13155617.405 ops/s
Iteration   3: 13172249.456 ops/s
Iteration   4: 13030300.921 ops/s
Iteration   5: 13096069.116 ops/s
Iteration   6: 13188997.286 ops/s
Iteration   7: 13097146.535 ops/s
Iteration   8: 13192024.656 ops/s
Iteration   9: 13080762.608 ops/s
Iteration  10: 12986872.073 ops/s
Iteration  11: 13025007.356 ops/s
Iteration  12: 13149563.352 ops/s
Iteration  13: 13023559.262 ops/s
Iteration  14: 13124659.096 ops/s
Iteration  15: 13028701.455 ops/s
Iteration  16: 13113906.846 ops/s
Iteration  17: 13064542.974 ops/s
Iteration  18: 13109319.868 ops/s
Iteration  19: 13089624.965 ops/s
Iteration  20: 13077230.705 ops/s
Iteration  21: 13096789.822 ops/s
Iteration  22: 13073433.188 ops/s
Iteration  23: 13039119.330 ops/s
Iteration  24: 13082567.199 ops/s
Iteration  25: 13124394.186 ops/s
Iteration  26: 13043818.301 ops/s
Iteration  27: 13118641.708 ops/s
Iteration  28: 13028994.448 ops/s
Iteration  29: 13101579.996 ops/s
Iteration  30: 13135255.677 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  13090476.847 ±(99.9%) 34705.247 ops/s [Average]
  (min, avg, max) = (12986872.073, 13090476.847, 13192024.656), stdev = 51945.183
  CI (99.9%): [13055771.600, 13125182.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  13090476.847 ± 34705.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5536688.242 ops/s
# Warmup Iteration   2: 12925832.799 ops/s
# Warmup Iteration   3: 10733747.071 ops/s
# Warmup Iteration   4: 12869490.887 ops/s
# Warmup Iteration   5: 12977838.143 ops/s
# Warmup Iteration   6: 13000837.925 ops/s
# Warmup Iteration   7: 12919639.641 ops/s
# Warmup Iteration   8: 12929889.428 ops/s
# Warmup Iteration   9: 12945938.943 ops/s
# Warmup Iteration  10: 12954765.434 ops/s
# Warmup Iteration  11: 12921607.288 ops/s
# Warmup Iteration  12: 12948103.071 ops/s
# Warmup Iteration  13: 13018593.850 ops/s
# Warmup Iteration  14: 12896499.946 ops/s
# Warmup Iteration  15: 12977912.791 ops/s
# Warmup Iteration  16: 12981218.223 ops/s
# Warmup Iteration  17: 13006604.412 ops/s
# Warmup Iteration  18: 13028896.264 ops/s
# Warmup Iteration  19: 12962489.908 ops/s
# Warmup Iteration  20: 12942181.465 ops/s
# Warmup Iteration  21: 13030292.228 ops/s
# Warmup Iteration  22: 13009775.019 ops/s
# Warmup Iteration  23: 13003988.861 ops/s
# Warmup Iteration  24: 13026654.507 ops/s
# Warmup Iteration  25: 13019583.501 ops/s
# Warmup Iteration  26: 13050635.746 ops/s
# Warmup Iteration  27: 13044058.369 ops/s
# Warmup Iteration  28: 12994250.314 ops/s
# Warmup Iteration  29: 13002293.172 ops/s
# Warmup Iteration  30: 13014892.892 ops/s
Iteration   1: 12999976.168 ops/s
Iteration   2: 13085384.448 ops/s
Iteration   3: 13030993.030 ops/s
Iteration   4: 13008203.002 ops/s
Iteration   5: 13024130.922 ops/s
Iteration   6: 12933082.326 ops/s
Iteration   7: 12923681.825 ops/s
Iteration   8: 12959767.435 ops/s
Iteration   9: 13028601.710 ops/s
Iteration  10: 13016999.787 ops/s
Iteration  11: 12938053.425 ops/s
Iteration  12: 13013874.971 ops/s
Iteration  13: 13091766.301 ops/s
Iteration  14: 12991195.767 ops/s
Iteration  15: 13069150.946 ops/s
Iteration  16: 12961935.256 ops/s
Iteration  17: 13015519.857 ops/s
Iteration  18: 13090800.282 ops/s
Iteration  19: 12980303.370 ops/s
Iteration  20: 12888821.345 ops/s
Iteration  21: 13072718.476 ops/s
Iteration  22: 13024354.974 ops/s
Iteration  23: 13046054.379 ops/s
Iteration  24: 13078537.812 ops/s
Iteration  25: 13053497.766 ops/s
Iteration  26: 12993716.900 ops/s
Iteration  27: 12992101.291 ops/s
Iteration  28: 13043458.523 ops/s
Iteration  29: 13007666.465 ops/s
Iteration  30: 12997175.668 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  13012050.814 ±(99.9%) 34349.599 ops/s [Average]
  (min, avg, max) = (12888821.345, 13012050.814, 13091766.301), stdev = 51412.867
  CI (99.9%): [12977701.215, 13046400.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  13012050.814 ± 34349.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5488488.070 ops/s
# Warmup Iteration   2: 12581523.998 ops/s
# Warmup Iteration   3: 10556325.795 ops/s
# Warmup Iteration   4: 12734619.195 ops/s
# Warmup Iteration   5: 12781183.763 ops/s
# Warmup Iteration   6: 12782232.186 ops/s
# Warmup Iteration   7: 12836223.734 ops/s
# Warmup Iteration   8: 12771881.511 ops/s
# Warmup Iteration   9: 12760233.796 ops/s
# Warmup Iteration  10: 12784870.447 ops/s
# Warmup Iteration  11: 12776522.795 ops/s
# Warmup Iteration  12: 12720430.347 ops/s
# Warmup Iteration  13: 12832785.656 ops/s
# Warmup Iteration  14: 12776951.587 ops/s
# Warmup Iteration  15: 12810772.400 ops/s
# Warmup Iteration  16: 12781277.795 ops/s
# Warmup Iteration  17: 12714172.078 ops/s
# Warmup Iteration  18: 12724598.994 ops/s
# Warmup Iteration  19: 12740215.268 ops/s
# Warmup Iteration  20: 12827671.734 ops/s
# Warmup Iteration  21: 12760348.331 ops/s
# Warmup Iteration  22: 12769739.210 ops/s
# Warmup Iteration  23: 12730010.598 ops/s
# Warmup Iteration  24: 12849439.619 ops/s
# Warmup Iteration  25: 12784511.159 ops/s
# Warmup Iteration  26: 12746456.689 ops/s
# Warmup Iteration  27: 12790524.928 ops/s
# Warmup Iteration  28: 12771234.397 ops/s
# Warmup Iteration  29: 12799821.458 ops/s
# Warmup Iteration  30: 12779829.061 ops/s
Iteration   1: 12800353.845 ops/s
Iteration   2: 12697983.193 ops/s
Iteration   3: 12787093.789 ops/s
Iteration   4: 12819450.482 ops/s
Iteration   5: 12756091.255 ops/s
Iteration   6: 12704569.334 ops/s
Iteration   7: 12652761.347 ops/s
Iteration   8: 12661155.301 ops/s
Iteration   9: 12699918.871 ops/s
Iteration  10: 12789098.265 ops/s
Iteration  11: 12739875.499 ops/s
Iteration  12: 12742193.255 ops/s
Iteration  13: 12758880.176 ops/s
Iteration  14: 12723907.705 ops/s
Iteration  15: 12754517.731 ops/s
Iteration  16: 12802414.048 ops/s
Iteration  17: 12832856.853 ops/s
Iteration  18: 12707435.516 ops/s
Iteration  19: 12759352.377 ops/s
Iteration  20: 12764183.232 ops/s
Iteration  21: 12817123.686 ops/s
Iteration  22: 12769727.983 ops/s
Iteration  23: 12762838.043 ops/s
Iteration  24: 12765127.371 ops/s
Iteration  25: 12688611.809 ops/s
Iteration  26: 12656418.797 ops/s
Iteration  27: 12578547.028 ops/s
Iteration  28: 12763285.360 ops/s
Iteration  29: 12829214.538 ops/s
Iteration  30: 12706096.446 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  12743036.105 ±(99.9%) 39568.542 ops/s [Average]
  (min, avg, max) = (12578547.028, 12743036.105, 12832856.853), stdev = 59224.336
  CI (99.9%): [12703467.562, 12782604.647] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  12743036.105 ± 39568.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1529918.939 ops/s
# Warmup Iteration   2: 3446566.309 ops/s
# Warmup Iteration   3: 3522710.712 ops/s
# Warmup Iteration   4: 3391999.267 ops/s
# Warmup Iteration   5: 3116581.199 ops/s
# Warmup Iteration   6: 3590865.247 ops/s
# Warmup Iteration   7: 3576617.999 ops/s
# Warmup Iteration   8: 3575544.431 ops/s
# Warmup Iteration   9: 3582436.809 ops/s
# Warmup Iteration  10: 3583008.067 ops/s
# Warmup Iteration  11: 3567415.065 ops/s
# Warmup Iteration  12: 3579313.932 ops/s
# Warmup Iteration  13: 3585164.563 ops/s
# Warmup Iteration  14: 3576372.396 ops/s
# Warmup Iteration  15: 3581642.991 ops/s
# Warmup Iteration  16: 3581401.210 ops/s
# Warmup Iteration  17: 3570345.684 ops/s
# Warmup Iteration  18: 3580540.361 ops/s
# Warmup Iteration  19: 3554109.720 ops/s
# Warmup Iteration  20: 3579665.042 ops/s
# Warmup Iteration  21: 3579980.765 ops/s
# Warmup Iteration  22: 3572056.483 ops/s
# Warmup Iteration  23: 3583868.056 ops/s
# Warmup Iteration  24: 3580055.902 ops/s
# Warmup Iteration  25: 3580362.077 ops/s
# Warmup Iteration  26: 3581659.299 ops/s
# Warmup Iteration  27: 3571350.357 ops/s
# Warmup Iteration  28: 3590235.843 ops/s
# Warmup Iteration  29: 3589363.108 ops/s
# Warmup Iteration  30: 3585278.517 ops/s
Iteration   1: 3594214.059 ops/s
Iteration   2: 3581691.303 ops/s
Iteration   3: 3582652.167 ops/s
Iteration   4: 3581566.528 ops/s
Iteration   5: 3588269.205 ops/s
Iteration   6: 3573600.256 ops/s
Iteration   7: 3596483.311 ops/s
Iteration   8: 3586299.425 ops/s
Iteration   9: 3583431.009 ops/s
Iteration  10: 3577452.423 ops/s
Iteration  11: 3564168.222 ops/s
Iteration  12: 3580081.025 ops/s
Iteration  13: 3594443.605 ops/s
Iteration  14: 3606664.184 ops/s
Iteration  15: 3595348.627 ops/s
Iteration  16: 3573808.019 ops/s
Iteration  17: 3597157.007 ops/s
Iteration  18: 3606771.835 ops/s
Iteration  19: 3612469.655 ops/s
Iteration  20: 3580358.378 ops/s
Iteration  21: 3589699.242 ops/s
Iteration  22: 3587602.538 ops/s
Iteration  23: 3592689.594 ops/s
Iteration  24: 3612287.742 ops/s
Iteration  25: 3595865.673 ops/s
Iteration  26: 3585934.800 ops/s
Iteration  27: 3584581.933 ops/s
Iteration  28: 3578572.943 ops/s
Iteration  29: 3601169.911 ops/s
Iteration  30: 3585738.503 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  3589035.771 ±(99.9%) 7708.199 ops/s [Average]
  (min, avg, max) = (3564168.222, 3589035.771, 3612469.655), stdev = 11537.271
  CI (99.9%): [3581327.571, 3596743.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  3589035.771 ± 7708.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5525873.553 ops/s
# Warmup Iteration   2: 12492347.909 ops/s
# Warmup Iteration   3: 10475741.128 ops/s
# Warmup Iteration   4: 12704780.099 ops/s
# Warmup Iteration   5: 12722227.266 ops/s
# Warmup Iteration   6: 12789773.354 ops/s
# Warmup Iteration   7: 12704429.341 ops/s
# Warmup Iteration   8: 12669112.208 ops/s
# Warmup Iteration   9: 12719556.533 ops/s
# Warmup Iteration  10: 12747848.751 ops/s
# Warmup Iteration  11: 12699171.722 ops/s
# Warmup Iteration  12: 12733536.141 ops/s
# Warmup Iteration  13: 12683334.761 ops/s
# Warmup Iteration  14: 12729881.418 ops/s
# Warmup Iteration  15: 12741783.185 ops/s
# Warmup Iteration  16: 12745588.327 ops/s
# Warmup Iteration  17: 12660222.445 ops/s
# Warmup Iteration  18: 12656037.801 ops/s
# Warmup Iteration  19: 12726135.704 ops/s
# Warmup Iteration  20: 12715652.044 ops/s
# Warmup Iteration  21: 12699512.332 ops/s
# Warmup Iteration  22: 12670444.909 ops/s
# Warmup Iteration  23: 12724895.100 ops/s
# Warmup Iteration  24: 12713878.132 ops/s
# Warmup Iteration  25: 12733970.055 ops/s
# Warmup Iteration  26: 12779214.578 ops/s
# Warmup Iteration  27: 12719437.906 ops/s
# Warmup Iteration  28: 12692033.007 ops/s
# Warmup Iteration  29: 12736708.367 ops/s
# Warmup Iteration  30: 12734312.918 ops/s
Iteration   1: 12720549.958 ops/s
Iteration   2: 12745959.022 ops/s
Iteration   3: 12616598.298 ops/s
Iteration   4: 12695645.409 ops/s
Iteration   5: 12668047.017 ops/s
Iteration   6: 12573372.023 ops/s
Iteration   7: 12637161.589 ops/s
Iteration   8: 12671047.491 ops/s
Iteration   9: 12782684.602 ops/s
Iteration  10: 12686044.978 ops/s
Iteration  11: 12779503.815 ops/s
Iteration  12: 12724764.445 ops/s
Iteration  13: 12754946.131 ops/s
Iteration  14: 12686332.705 ops/s
Iteration  15: 12624640.354 ops/s
Iteration  16: 12762341.113 ops/s
Iteration  17: 12672621.047 ops/s
Iteration  18: 12729595.330 ops/s
Iteration  19: 12824451.901 ops/s
Iteration  20: 12637924.127 ops/s
Iteration  21: 12737171.304 ops/s
Iteration  22: 12683656.000 ops/s
Iteration  23: 12729018.120 ops/s
Iteration  24: 12769031.311 ops/s
Iteration  25: 12743236.481 ops/s
Iteration  26: 12687274.443 ops/s
Iteration  27: 12660419.358 ops/s
Iteration  28: 12748194.161 ops/s
Iteration  29: 12731336.304 ops/s
Iteration  30: 12659813.061 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  12704779.397 ±(99.9%) 38066.986 ops/s [Average]
  (min, avg, max) = (12573372.023, 12704779.397, 12824451.901), stdev = 56976.877
  CI (99.9%): [12666712.410, 12742846.383] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  12704779.397 ± 38066.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5543873.234 ops/s
# Warmup Iteration   2: 13005047.554 ops/s
# Warmup Iteration   3: 10857795.169 ops/s
# Warmup Iteration   4: 13213929.587 ops/s
# Warmup Iteration   5: 13059895.094 ops/s
# Warmup Iteration   6: 13182900.236 ops/s
# Warmup Iteration   7: 13131515.988 ops/s
# Warmup Iteration   8: 13181458.399 ops/s
# Warmup Iteration   9: 13209729.392 ops/s
# Warmup Iteration  10: 13177677.620 ops/s
# Warmup Iteration  11: 13185307.790 ops/s
# Warmup Iteration  12: 13142447.375 ops/s
# Warmup Iteration  13: 13221330.685 ops/s
# Warmup Iteration  14: 13119758.842 ops/s
# Warmup Iteration  15: 13137839.035 ops/s
# Warmup Iteration  16: 13197216.539 ops/s
# Warmup Iteration  17: 13041713.054 ops/s
# Warmup Iteration  18: 13084271.123 ops/s
# Warmup Iteration  19: 13227620.972 ops/s
# Warmup Iteration  20: 13135413.311 ops/s
# Warmup Iteration  21: 13176137.999 ops/s
# Warmup Iteration  22: 13186153.156 ops/s
# Warmup Iteration  23: 13229226.911 ops/s
# Warmup Iteration  24: 13187718.288 ops/s
# Warmup Iteration  25: 13171757.449 ops/s
# Warmup Iteration  26: 13125948.183 ops/s
# Warmup Iteration  27: 13135671.074 ops/s
# Warmup Iteration  28: 13150647.154 ops/s
# Warmup Iteration  29: 13124909.737 ops/s
# Warmup Iteration  30: 13123866.979 ops/s
Iteration   1: 13206105.617 ops/s
Iteration   2: 13033352.489 ops/s
Iteration   3: 13161652.911 ops/s
Iteration   4: 13099072.503 ops/s
Iteration   5: 13117987.501 ops/s
Iteration   6: 13037760.990 ops/s
Iteration   7: 13200034.941 ops/s
Iteration   8: 13239548.247 ops/s
Iteration   9: 13222753.723 ops/s
Iteration  10: 13234249.463 ops/s
Iteration  11: 13224226.274 ops/s
Iteration  12: 13113114.301 ops/s
Iteration  13: 13178073.566 ops/s
Iteration  14: 13122831.515 ops/s
Iteration  15: 13110094.656 ops/s
Iteration  16: 13114465.167 ops/s
Iteration  17: 13244695.211 ops/s
Iteration  18: 13210033.758 ops/s
Iteration  19: 13225093.574 ops/s
Iteration  20: 13179064.858 ops/s
Iteration  21: 13168364.142 ops/s
Iteration  22: 13217401.570 ops/s
Iteration  23: 13203821.589 ops/s
Iteration  24: 13115654.376 ops/s
Iteration  25: 13139458.399 ops/s
Iteration  26: 13248367.869 ops/s
Iteration  27: 13173798.994 ops/s
Iteration  28: 13132027.049 ops/s
Iteration  29: 13160468.680 ops/s
Iteration  30: 13294452.198 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  13170934.204 ±(99.9%) 41850.437 ops/s [Average]
  (min, avg, max) = (13033352.489, 13170934.204, 13294452.198), stdev = 62639.768
  CI (99.9%): [13129083.768, 13212784.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  13170934.204 ± 41850.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5381451.461 ops/s
# Warmup Iteration   2: 12073323.060 ops/s
# Warmup Iteration   3: 10142343.264 ops/s
# Warmup Iteration   4: 12202821.871 ops/s
# Warmup Iteration   5: 12258484.158 ops/s
# Warmup Iteration   6: 12238575.242 ops/s
# Warmup Iteration   7: 12221028.821 ops/s
# Warmup Iteration   8: 12145476.321 ops/s
# Warmup Iteration   9: 12187101.718 ops/s
# Warmup Iteration  10: 12240938.886 ops/s
# Warmup Iteration  11: 12233214.357 ops/s
# Warmup Iteration  12: 12241382.850 ops/s
# Warmup Iteration  13: 12247721.000 ops/s
# Warmup Iteration  14: 12232476.538 ops/s
# Warmup Iteration  15: 12237858.147 ops/s
# Warmup Iteration  16: 12186477.587 ops/s
# Warmup Iteration  17: 12138331.010 ops/s
# Warmup Iteration  18: 12200429.231 ops/s
# Warmup Iteration  19: 12183398.553 ops/s
# Warmup Iteration  20: 12149211.997 ops/s
# Warmup Iteration  21: 12195029.137 ops/s
# Warmup Iteration  22: 12145395.289 ops/s
# Warmup Iteration  23: 12135123.633 ops/s
# Warmup Iteration  24: 12135093.837 ops/s
# Warmup Iteration  25: 12187875.133 ops/s
# Warmup Iteration  26: 12146033.872 ops/s
# Warmup Iteration  27: 12171811.633 ops/s
# Warmup Iteration  28: 12229746.278 ops/s
# Warmup Iteration  29: 12205367.562 ops/s
# Warmup Iteration  30: 12157281.459 ops/s
Iteration   1: 12165359.451 ops/s
Iteration   2: 12131749.085 ops/s
Iteration   3: 12118591.787 ops/s
Iteration   4: 12094887.128 ops/s
Iteration   5: 12216326.697 ops/s
Iteration   6: 12242278.885 ops/s
Iteration   7: 12172394.067 ops/s
Iteration   8: 12229081.100 ops/s
Iteration   9: 12254395.253 ops/s
Iteration  10: 12159802.726 ops/s
Iteration  11: 12242414.160 ops/s
Iteration  12: 12133174.125 ops/s
Iteration  13: 12151378.494 ops/s
Iteration  14: 12249221.204 ops/s
Iteration  15: 12231700.791 ops/s
Iteration  16: 12185140.223 ops/s
Iteration  17: 12249461.283 ops/s
Iteration  18: 12232324.345 ops/s
Iteration  19: 12187097.099 ops/s
Iteration  20: 12156388.937 ops/s
Iteration  21: 12220617.761 ops/s
Iteration  22: 12196196.171 ops/s
Iteration  23: 12178884.634 ops/s
Iteration  24: 12144199.766 ops/s
Iteration  25: 12228054.994 ops/s
Iteration  26: 12253046.393 ops/s
Iteration  27: 12225143.946 ops/s
Iteration  28: 12276437.431 ops/s
Iteration  29: 12153772.147 ops/s
Iteration  30: 12136716.422 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  12193874.550 ±(99.9%) 32518.109 ops/s [Average]
  (min, avg, max) = (12094887.128, 12193874.550, 12276437.431), stdev = 48671.579
  CI (99.9%): [12161356.441, 12226392.659] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  12193874.550 ± 32518.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1358684.308 ops/s
# Warmup Iteration   2: 2989518.772 ops/s
# Warmup Iteration   3: 3220089.936 ops/s
# Warmup Iteration   4: 3215490.340 ops/s
# Warmup Iteration   5: 2658519.569 ops/s
# Warmup Iteration   6: 3222735.569 ops/s
# Warmup Iteration   7: 3236108.990 ops/s
# Warmup Iteration   8: 3221691.251 ops/s
# Warmup Iteration   9: 3213126.838 ops/s
# Warmup Iteration  10: 3214946.966 ops/s
# Warmup Iteration  11: 3205122.736 ops/s
# Warmup Iteration  12: 3228518.142 ops/s
# Warmup Iteration  13: 3228959.262 ops/s
# Warmup Iteration  14: 3241577.520 ops/s
# Warmup Iteration  15: 3226286.842 ops/s
# Warmup Iteration  16: 3222038.023 ops/s
# Warmup Iteration  17: 3236654.273 ops/s
# Warmup Iteration  18: 3225135.411 ops/s
# Warmup Iteration  19: 3223795.055 ops/s
# Warmup Iteration  20: 3228661.261 ops/s
# Warmup Iteration  21: 3232084.516 ops/s
# Warmup Iteration  22: 3219300.603 ops/s
# Warmup Iteration  23: 3232154.717 ops/s
# Warmup Iteration  24: 3217980.948 ops/s
# Warmup Iteration  25: 3226526.597 ops/s
# Warmup Iteration  26: 3241068.962 ops/s
# Warmup Iteration  27: 3227075.779 ops/s
# Warmup Iteration  28: 3240086.067 ops/s
# Warmup Iteration  29: 3228675.215 ops/s
# Warmup Iteration  30: 3221638.915 ops/s
Iteration   1: 3213437.992 ops/s
Iteration   2: 3224301.574 ops/s
Iteration   3: 3221008.652 ops/s
Iteration   4: 3234008.098 ops/s
Iteration   5: 3233591.966 ops/s
Iteration   6: 3222901.829 ops/s
Iteration   7: 3221185.975 ops/s
Iteration   8: 3239468.520 ops/s
Iteration   9: 3242471.265 ops/s
Iteration  10: 3222163.490 ops/s
Iteration  11: 3228774.624 ops/s
Iteration  12: 3240679.579 ops/s
Iteration  13: 3235359.352 ops/s
Iteration  14: 3223397.519 ops/s
Iteration  15: 3217933.203 ops/s
Iteration  16: 3228550.539 ops/s
Iteration  17: 3231038.625 ops/s
Iteration  18: 3239229.128 ops/s
Iteration  19: 3227132.424 ops/s
Iteration  20: 3209728.294 ops/s
Iteration  21: 3229882.987 ops/s
Iteration  22: 3243267.109 ops/s
Iteration  23: 3247121.119 ops/s
Iteration  24: 3222019.952 ops/s
Iteration  25: 3223532.474 ops/s
Iteration  26: 3225048.744 ops/s
Iteration  27: 3230895.284 ops/s
Iteration  28: 3224725.115 ops/s
Iteration  29: 3230393.259 ops/s
Iteration  30: 3228742.207 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  3228733.030 ±(99.9%) 5915.781 ops/s [Average]
  (min, avg, max) = (3209728.294, 3228733.030, 3247121.119), stdev = 8854.463
  CI (99.9%): [3222817.249, 3234648.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  3228733.030 ± 5915.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1057124.509 ops/s
# Warmup Iteration   2: 2240909.863 ops/s
# Warmup Iteration   3: 2505572.711 ops/s
# Warmup Iteration   4: 2513194.209 ops/s
# Warmup Iteration   5: 2074096.869 ops/s
# Warmup Iteration   6: 2518188.643 ops/s
# Warmup Iteration   7: 2522617.614 ops/s
# Warmup Iteration   8: 2519279.960 ops/s
# Warmup Iteration   9: 2534619.782 ops/s
# Warmup Iteration  10: 2521432.617 ops/s
# Warmup Iteration  11: 2525569.622 ops/s
# Warmup Iteration  12: 2528654.246 ops/s
# Warmup Iteration  13: 2513896.163 ops/s
# Warmup Iteration  14: 2523948.592 ops/s
# Warmup Iteration  15: 2513440.672 ops/s
# Warmup Iteration  16: 2530214.814 ops/s
# Warmup Iteration  17: 2515382.068 ops/s
# Warmup Iteration  18: 2525890.732 ops/s
# Warmup Iteration  19: 2514482.911 ops/s
# Warmup Iteration  20: 2518243.855 ops/s
# Warmup Iteration  21: 2519193.922 ops/s
# Warmup Iteration  22: 2516790.244 ops/s
# Warmup Iteration  23: 2521950.377 ops/s
# Warmup Iteration  24: 2519598.549 ops/s
# Warmup Iteration  25: 2511808.914 ops/s
# Warmup Iteration  26: 2512215.955 ops/s
# Warmup Iteration  27: 2520308.267 ops/s
# Warmup Iteration  28: 2516615.815 ops/s
# Warmup Iteration  29: 2520122.746 ops/s
# Warmup Iteration  30: 2504505.630 ops/s
Iteration   1: 2505135.158 ops/s
Iteration   2: 2513300.695 ops/s
Iteration   3: 2516937.809 ops/s
Iteration   4: 2523456.424 ops/s
Iteration   5: 2525033.196 ops/s
Iteration   6: 2531774.485 ops/s
Iteration   7: 2525810.648 ops/s
Iteration   8: 2528925.114 ops/s
Iteration   9: 2526426.956 ops/s
Iteration  10: 2506578.146 ops/s
Iteration  11: 2532721.770 ops/s
Iteration  12: 2518076.308 ops/s
Iteration  13: 2532912.176 ops/s
Iteration  14: 2518872.483 ops/s
Iteration  15: 2525267.742 ops/s
Iteration  16: 2515276.025 ops/s
Iteration  17: 2520893.881 ops/s
Iteration  18: 2532800.407 ops/s
Iteration  19: 2515825.748 ops/s
Iteration  20: 2519876.099 ops/s
Iteration  21: 2511377.735 ops/s
Iteration  22: 2513421.955 ops/s
Iteration  23: 2533021.166 ops/s
Iteration  24: 2530706.111 ops/s
Iteration  25: 2518538.922 ops/s
Iteration  26: 2509537.911 ops/s
Iteration  27: 2527216.582 ops/s
Iteration  28: 2503532.805 ops/s
Iteration  29: 2514635.629 ops/s
Iteration  30: 2500492.152 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  2519946.075 ±(99.9%) 6323.171 ops/s [Average]
  (min, avg, max) = (2500492.152, 2519946.075, 2533021.166), stdev = 9464.226
  CI (99.9%): [2513622.904, 2526269.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  2519946.075 ± 6323.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3484519.668 ops/s
# Warmup Iteration   2: 8616721.412 ops/s
# Warmup Iteration   3: 7424690.095 ops/s
# Warmup Iteration   4: 8928483.442 ops/s
# Warmup Iteration   5: 8934353.086 ops/s
# Warmup Iteration   6: 8947591.914 ops/s
# Warmup Iteration   7: 8933602.629 ops/s
# Warmup Iteration   8: 8953496.882 ops/s
# Warmup Iteration   9: 8954825.403 ops/s
# Warmup Iteration  10: 8902730.401 ops/s
# Warmup Iteration  11: 8958963.687 ops/s
# Warmup Iteration  12: 8958307.625 ops/s
# Warmup Iteration  13: 8940330.195 ops/s
# Warmup Iteration  14: 8912524.705 ops/s
# Warmup Iteration  15: 8894478.705 ops/s
# Warmup Iteration  16: 8891077.918 ops/s
# Warmup Iteration  17: 8909300.222 ops/s
# Warmup Iteration  18: 8976196.809 ops/s
# Warmup Iteration  19: 8946212.243 ops/s
# Warmup Iteration  20: 8944411.244 ops/s
# Warmup Iteration  21: 8882844.500 ops/s
# Warmup Iteration  22: 8934815.719 ops/s
# Warmup Iteration  23: 8920830.785 ops/s
# Warmup Iteration  24: 8935085.233 ops/s
# Warmup Iteration  25: 8959645.608 ops/s
# Warmup Iteration  26: 8908329.742 ops/s
# Warmup Iteration  27: 8942540.195 ops/s
# Warmup Iteration  28: 8929137.383 ops/s
# Warmup Iteration  29: 8877752.122 ops/s
# Warmup Iteration  30: 8883965.425 ops/s
Iteration   1: 8939929.275 ops/s
Iteration   2: 8945388.333 ops/s
Iteration   3: 8901514.600 ops/s
Iteration   4: 8879685.792 ops/s
Iteration   5: 8883919.812 ops/s
Iteration   6: 8872790.558 ops/s
Iteration   7: 8876984.712 ops/s
Iteration   8: 8890580.500 ops/s
Iteration   9: 8852380.873 ops/s
Iteration  10: 8932770.002 ops/s
Iteration  11: 8913501.956 ops/s
Iteration  12: 8987313.696 ops/s
Iteration  13: 8916766.866 ops/s
Iteration  14: 8908593.339 ops/s
Iteration  15: 8926436.844 ops/s
Iteration  16: 8947009.396 ops/s
Iteration  17: 8956637.103 ops/s
Iteration  18: 8934904.900 ops/s
Iteration  19: 8856983.504 ops/s
Iteration  20: 8878483.745 ops/s
Iteration  21: 8912802.409 ops/s
Iteration  22: 8922470.030 ops/s
Iteration  23: 8947860.267 ops/s
Iteration  24: 8957785.402 ops/s
Iteration  25: 8945558.315 ops/s
Iteration  26: 8912616.533 ops/s
Iteration  27: 8917429.380 ops/s
Iteration  28: 8947371.263 ops/s
Iteration  29: 8935195.613 ops/s
Iteration  30: 8896778.832 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  8916614.795 ±(99.9%) 21803.821 ops/s [Average]
  (min, avg, max) = (8852380.873, 8916614.795, 8987313.696), stdev = 32634.936
  CI (99.9%): [8894810.974, 8938418.616] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  8916614.795 ± 21803.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701816.803 ops/s
# Warmup Iteration   2: 770588.875 ops/s
# Warmup Iteration   3: 1011163.057 ops/s
# Warmup Iteration   4: 1003416.120 ops/s
# Warmup Iteration   5: 1004843.794 ops/s
# Warmup Iteration   6: 1010789.582 ops/s
# Warmup Iteration   7: 1006030.247 ops/s
# Warmup Iteration   8: 1007157.862 ops/s
# Warmup Iteration   9: 1008179.287 ops/s
# Warmup Iteration  10: 858186.372 ops/s
# Warmup Iteration  11: 990420.858 ops/s
# Warmup Iteration  12: 1005822.113 ops/s
# Warmup Iteration  13: 1007959.572 ops/s
# Warmup Iteration  14: 1003568.573 ops/s
# Warmup Iteration  15: 1007960.500 ops/s
# Warmup Iteration  16: 1003202.810 ops/s
# Warmup Iteration  17: 1069344.011 ops/s
# Warmup Iteration  18: 1066630.706 ops/s
# Warmup Iteration  19: 1062553.558 ops/s
# Warmup Iteration  20: 1063238.752 ops/s
# Warmup Iteration  21: 1064988.328 ops/s
# Warmup Iteration  22: 1065875.686 ops/s
# Warmup Iteration  23: 1063848.641 ops/s
# Warmup Iteration  24: 1060699.588 ops/s
# Warmup Iteration  25: 1062715.615 ops/s
# Warmup Iteration  26: 1066294.741 ops/s
# Warmup Iteration  27: 1064416.340 ops/s
# Warmup Iteration  28: 1061294.956 ops/s
# Warmup Iteration  29: 1058884.138 ops/s
# Warmup Iteration  30: 1058718.195 ops/s
Iteration   1: 1063486.270 ops/s
Iteration   2: 1061590.345 ops/s
Iteration   3: 1062842.171 ops/s
Iteration   4: 1058693.701 ops/s
Iteration   5: 1061418.122 ops/s
Iteration   6: 1060509.136 ops/s
Iteration   7: 1062910.169 ops/s
Iteration   8: 1066158.422 ops/s
Iteration   9: 1062167.398 ops/s
Iteration  10: 1060692.152 ops/s
Iteration  11: 1066889.564 ops/s
Iteration  12: 1063846.035 ops/s
Iteration  13: 1063994.539 ops/s
Iteration  14: 1063570.806 ops/s
Iteration  15: 1066676.682 ops/s
Iteration  16: 1062739.648 ops/s
Iteration  17: 1066982.233 ops/s
Iteration  18: 1064470.870 ops/s
Iteration  19: 1055767.457 ops/s
Iteration  20: 1064796.861 ops/s
Iteration  21: 1067813.012 ops/s
Iteration  22: 1069455.836 ops/s
Iteration  23: 1064166.656 ops/s
Iteration  24: 1061167.492 ops/s
Iteration  25: 1066436.983 ops/s
Iteration  26: 1065246.905 ops/s
Iteration  27: 1054959.284 ops/s
Iteration  28: 1060919.009 ops/s
Iteration  29: 1061938.130 ops/s
Iteration  30: 1060132.911 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1063081.293 ±(99.9%) 2199.721 ops/s [Average]
  (min, avg, max) = (1054959.284, 1063081.293, 1069455.836), stdev = 3292.439
  CI (99.9%): [1060881.573, 1065281.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1063081.293 ± 2199.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4127798.998 ops/s
# Warmup Iteration   2: 8026645.030 ops/s
# Warmup Iteration   3: 8199728.765 ops/s
# Warmup Iteration   4: 8940569.469 ops/s
# Warmup Iteration   5: 8870896.945 ops/s
# Warmup Iteration   6: 8897078.594 ops/s
# Warmup Iteration   7: 8890709.457 ops/s
# Warmup Iteration   8: 8885275.940 ops/s
# Warmup Iteration   9: 8948533.059 ops/s
# Warmup Iteration  10: 8909423.522 ops/s
# Warmup Iteration  11: 8945039.153 ops/s
# Warmup Iteration  12: 8905471.720 ops/s
# Warmup Iteration  13: 8887431.394 ops/s
# Warmup Iteration  14: 8842009.728 ops/s
# Warmup Iteration  15: 8779677.888 ops/s
# Warmup Iteration  16: 8928585.115 ops/s
# Warmup Iteration  17: 8900753.139 ops/s
# Warmup Iteration  18: 8867377.386 ops/s
# Warmup Iteration  19: 8892768.170 ops/s
# Warmup Iteration  20: 8827480.028 ops/s
# Warmup Iteration  21: 8939103.465 ops/s
# Warmup Iteration  22: 8873713.164 ops/s
# Warmup Iteration  23: 8883008.081 ops/s
# Warmup Iteration  24: 8846419.946 ops/s
# Warmup Iteration  25: 8876841.245 ops/s
# Warmup Iteration  26: 8903780.175 ops/s
# Warmup Iteration  27: 8970499.661 ops/s
# Warmup Iteration  28: 8811379.489 ops/s
# Warmup Iteration  29: 8890300.884 ops/s
# Warmup Iteration  30: 8862406.911 ops/s
Iteration   1: 8881828.219 ops/s
Iteration   2: 8921462.729 ops/s
Iteration   3: 8927215.464 ops/s
Iteration   4: 8902134.536 ops/s
Iteration   5: 8911215.767 ops/s
Iteration   6: 8926721.984 ops/s
Iteration   7: 9004697.312 ops/s
Iteration   8: 8868672.317 ops/s
Iteration   9: 8880733.243 ops/s
Iteration  10: 8784321.042 ops/s
Iteration  11: 8854347.061 ops/s
Iteration  12: 8903126.588 ops/s
Iteration  13: 8919536.731 ops/s
Iteration  14: 8857298.318 ops/s
Iteration  15: 8955949.286 ops/s
Iteration  16: 8933388.994 ops/s
Iteration  17: 8899040.702 ops/s
Iteration  18: 8837494.712 ops/s
Iteration  19: 8931975.649 ops/s
Iteration  20: 8946523.259 ops/s
Iteration  21: 8895828.104 ops/s
Iteration  22: 8941969.893 ops/s
Iteration  23: 8824232.466 ops/s
Iteration  24: 8922716.725 ops/s
Iteration  25: 8890771.020 ops/s
Iteration  26: 8900771.166 ops/s
Iteration  27: 8911647.005 ops/s
Iteration  28: 8804534.817 ops/s
Iteration  29: 8733249.473 ops/s
Iteration  30: 8884005.200 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  8891913.659 ±(99.9%) 36632.145 ops/s [Average]
  (min, avg, max) = (8733249.473, 8891913.659, 9004697.312), stdev = 54829.274
  CI (99.9%): [8855281.515, 8928545.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  8891913.659 ± 36632.145  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3986813.954 ops/s
# Warmup Iteration   2: 9081819.993 ops/s
# Warmup Iteration   3: 7865398.978 ops/s
# Warmup Iteration   4: 9306241.282 ops/s
# Warmup Iteration   5: 9346734.826 ops/s
# Warmup Iteration   6: 9359994.881 ops/s
# Warmup Iteration   7: 9327122.116 ops/s
# Warmup Iteration   8: 9320712.433 ops/s
# Warmup Iteration   9: 9314900.123 ops/s
# Warmup Iteration  10: 9361161.391 ops/s
# Warmup Iteration  11: 9336643.182 ops/s
# Warmup Iteration  12: 9253212.183 ops/s
# Warmup Iteration  13: 9295182.956 ops/s
# Warmup Iteration  14: 9327368.109 ops/s
# Warmup Iteration  15: 9367532.105 ops/s
# Warmup Iteration  16: 9342807.305 ops/s
# Warmup Iteration  17: 9340159.858 ops/s
# Warmup Iteration  18: 9326474.329 ops/s
# Warmup Iteration  19: 9336614.502 ops/s
# Warmup Iteration  20: 9337573.946 ops/s
# Warmup Iteration  21: 9389425.036 ops/s
# Warmup Iteration  22: 9362458.800 ops/s
# Warmup Iteration  23: 9347035.648 ops/s
# Warmup Iteration  24: 9381585.708 ops/s
# Warmup Iteration  25: 9384372.257 ops/s
# Warmup Iteration  26: 9331642.355 ops/s
# Warmup Iteration  27: 9358921.205 ops/s
# Warmup Iteration  28: 9366682.632 ops/s
# Warmup Iteration  29: 9264754.997 ops/s
# Warmup Iteration  30: 9378006.335 ops/s
Iteration   1: 9424634.287 ops/s
Iteration   2: 9365785.303 ops/s
Iteration   3: 9266190.106 ops/s
Iteration   4: 9320773.829 ops/s
Iteration   5: 9347081.602 ops/s
Iteration   6: 9437152.009 ops/s
Iteration   7: 9334427.797 ops/s
Iteration   8: 9332390.138 ops/s
Iteration   9: 9339373.102 ops/s
Iteration  10: 9383102.743 ops/s
Iteration  11: 9340780.087 ops/s
Iteration  12: 9368535.294 ops/s
Iteration  13: 9373591.016 ops/s
Iteration  14: 9355801.844 ops/s
Iteration  15: 9291616.744 ops/s
Iteration  16: 9290820.424 ops/s
Iteration  17: 9332535.248 ops/s
Iteration  18: 9345734.872 ops/s
Iteration  19: 9336358.592 ops/s
Iteration  20: 9326913.935 ops/s
Iteration  21: 9324645.609 ops/s
Iteration  22: 9284804.269 ops/s
Iteration  23: 9377807.837 ops/s
Iteration  24: 9208302.314 ops/s
Iteration  25: 9259158.933 ops/s
Iteration  26: 9339998.310 ops/s
Iteration  27: 9388990.562 ops/s
Iteration  28: 9342636.695 ops/s
Iteration  29: 9368823.655 ops/s
Iteration  30: 9230777.784 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partition":
  9334651.498 ±(99.9%) 34023.648 ops/s [Average]
  (min, avg, max) = (9208302.314, 9334651.498, 9437152.009), stdev = 50924.999
  CI (99.9%): [9300627.850, 9368675.146] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  9334651.498 ± 34023.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4055932.117 ops/s
# Warmup Iteration   2: 9150541.027 ops/s
# Warmup Iteration   3: 7780287.498 ops/s
# Warmup Iteration   4: 9393160.984 ops/s
# Warmup Iteration   5: 9328347.917 ops/s
# Warmup Iteration   6: 9407940.174 ops/s
# Warmup Iteration   7: 9352356.796 ops/s
# Warmup Iteration   8: 9375081.217 ops/s
# Warmup Iteration   9: 9368221.649 ops/s
# Warmup Iteration  10: 9379584.953 ops/s
# Warmup Iteration  11: 9388359.360 ops/s
# Warmup Iteration  12: 9372233.121 ops/s
# Warmup Iteration  13: 9310420.316 ops/s
# Warmup Iteration  14: 9353172.248 ops/s
# Warmup Iteration  15: 9368576.877 ops/s
# Warmup Iteration  16: 9404624.526 ops/s
# Warmup Iteration  17: 9330547.420 ops/s
# Warmup Iteration  18: 9368529.159 ops/s
# Warmup Iteration  19: 9353822.892 ops/s
# Warmup Iteration  20: 9308748.033 ops/s
# Warmup Iteration  21: 9329922.328 ops/s
# Warmup Iteration  22: 9357952.821 ops/s
# Warmup Iteration  23: 9355356.436 ops/s
# Warmup Iteration  24: 9346617.142 ops/s
# Warmup Iteration  25: 9369112.350 ops/s
# Warmup Iteration  26: 9404886.077 ops/s
# Warmup Iteration  27: 9262909.793 ops/s
# Warmup Iteration  28: 9345326.280 ops/s
# Warmup Iteration  29: 9370888.899 ops/s
# Warmup Iteration  30: 9392898.748 ops/s
Iteration   1: 9378683.872 ops/s
Iteration   2: 9370838.391 ops/s
Iteration   3: 9339779.862 ops/s
Iteration   4: 9430289.239 ops/s
Iteration   5: 9428523.380 ops/s
Iteration   6: 9439034.281 ops/s
Iteration   7: 9374613.866 ops/s
Iteration   8: 9447117.953 ops/s
Iteration   9: 9380870.808 ops/s
Iteration  10: 9356250.232 ops/s
Iteration  11: 9416818.611 ops/s
Iteration  12: 9353522.664 ops/s
Iteration  13: 9356730.189 ops/s
Iteration  14: 9259588.065 ops/s
Iteration  15: 9388782.577 ops/s
Iteration  16: 9359929.762 ops/s
Iteration  17: 9365549.217 ops/s
Iteration  18: 9313022.541 ops/s
Iteration  19: 9385017.533 ops/s
Iteration  20: 9385468.529 ops/s
Iteration  21: 9484484.404 ops/s
Iteration  22: 9403341.137 ops/s
Iteration  23: 9344984.448 ops/s
Iteration  24: 9373719.236 ops/s
Iteration  25: 9391880.606 ops/s
Iteration  26: 9350165.176 ops/s
Iteration  27: 9315934.394 ops/s
Iteration  28: 9354483.467 ops/s
Iteration  29: 9430809.283 ops/s
Iteration  30: 9358947.423 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  9377972.705 ±(99.9%) 30113.203 ops/s [Average]
  (min, avg, max) = (9259588.065, 9377972.705, 9484484.404), stdev = 45072.028
  CI (99.9%): [9347859.502, 9408085.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  9377972.705 ± 30113.203  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1467611.510 ops/s
# Warmup Iteration   2: 3412828.076 ops/s
# Warmup Iteration   3: 3608631.293 ops/s
# Warmup Iteration   4: 3099825.318 ops/s
# Warmup Iteration   5: 3460914.875 ops/s
# Warmup Iteration   6: 3600212.723 ops/s
# Warmup Iteration   7: 3621233.812 ops/s
# Warmup Iteration   8: 3603830.329 ops/s
# Warmup Iteration   9: 3596379.975 ops/s
# Warmup Iteration  10: 3614434.423 ops/s
# Warmup Iteration  11: 3589570.090 ops/s
# Warmup Iteration  12: 3592423.262 ops/s
# Warmup Iteration  13: 3585567.831 ops/s
# Warmup Iteration  14: 3611828.834 ops/s
# Warmup Iteration  15: 3594390.563 ops/s
# Warmup Iteration  16: 3602754.753 ops/s
# Warmup Iteration  17: 3615482.263 ops/s
# Warmup Iteration  18: 3618598.273 ops/s
# Warmup Iteration  19: 3620807.497 ops/s
# Warmup Iteration  20: 3621354.206 ops/s
# Warmup Iteration  21: 3619444.236 ops/s
# Warmup Iteration  22: 3623585.363 ops/s
# Warmup Iteration  23: 3620043.569 ops/s
# Warmup Iteration  24: 3617221.988 ops/s
# Warmup Iteration  25: 3618520.422 ops/s
# Warmup Iteration  26: 3618608.473 ops/s
# Warmup Iteration  27: 3608470.094 ops/s
# Warmup Iteration  28: 3578246.968 ops/s
# Warmup Iteration  29: 3622246.046 ops/s
# Warmup Iteration  30: 3619718.823 ops/s
Iteration   1: 3603855.183 ops/s
Iteration   2: 3602328.092 ops/s
Iteration   3: 3618483.135 ops/s
Iteration   4: 3633658.873 ops/s
Iteration   5: 3632682.782 ops/s
Iteration   6: 3597537.965 ops/s
Iteration   7: 3601392.333 ops/s
Iteration   8: 3602824.894 ops/s
Iteration   9: 3606542.012 ops/s
Iteration  10: 3614761.439 ops/s
Iteration  11: 3613508.682 ops/s
Iteration  12: 3610209.451 ops/s
Iteration  13: 3616482.118 ops/s
Iteration  14: 3632104.235 ops/s
Iteration  15: 3635257.464 ops/s
Iteration  16: 3623025.346 ops/s
Iteration  17: 3621020.769 ops/s
Iteration  18: 3596661.779 ops/s
Iteration  19: 3630800.824 ops/s
Iteration  20: 3612117.474 ops/s
Iteration  21: 3619377.185 ops/s
Iteration  22: 3621343.012 ops/s
Iteration  23: 3601092.168 ops/s
Iteration  24: 3617370.405 ops/s
Iteration  25: 3614551.416 ops/s
Iteration  26: 3598374.129 ops/s
Iteration  27: 3611613.252 ops/s
Iteration  28: 3622434.469 ops/s
Iteration  29: 3616869.952 ops/s
Iteration  30: 3634095.572 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_reject":
  3615412.547 ±(99.9%) 7902.993 ops/s [Average]
  (min, avg, max) = (3596661.779, 3615412.547, 3635257.464), stdev = 11828.829
  CI (99.9%): [3607509.554, 3623315.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  3615412.547 ± 7902.993  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1466851.586 ops/s
# Warmup Iteration   2: 3366367.691 ops/s
# Warmup Iteration   3: 3554904.678 ops/s
# Warmup Iteration   4: 3132167.493 ops/s
# Warmup Iteration   5: 3325542.936 ops/s
# Warmup Iteration   6: 3532965.934 ops/s
# Warmup Iteration   7: 3545040.015 ops/s
# Warmup Iteration   8: 3558681.476 ops/s
# Warmup Iteration   9: 3533212.414 ops/s
# Warmup Iteration  10: 3547656.352 ops/s
# Warmup Iteration  11: 3559519.581 ops/s
# Warmup Iteration  12: 3536040.703 ops/s
# Warmup Iteration  13: 3546525.550 ops/s
# Warmup Iteration  14: 3538114.847 ops/s
# Warmup Iteration  15: 3544382.349 ops/s
# Warmup Iteration  16: 3537655.732 ops/s
# Warmup Iteration  17: 3551919.559 ops/s
# Warmup Iteration  18: 3541530.870 ops/s
# Warmup Iteration  19: 3540802.586 ops/s
# Warmup Iteration  20: 3541527.987 ops/s
# Warmup Iteration  21: 3545571.353 ops/s
# Warmup Iteration  22: 3562776.881 ops/s
# Warmup Iteration  23: 3553583.335 ops/s
# Warmup Iteration  24: 3557584.770 ops/s
# Warmup Iteration  25: 3537319.657 ops/s
# Warmup Iteration  26: 3522925.303 ops/s
# Warmup Iteration  27: 3529174.393 ops/s
# Warmup Iteration  28: 3542266.055 ops/s
# Warmup Iteration  29: 3543201.367 ops/s
# Warmup Iteration  30: 3551783.813 ops/s
Iteration   1: 3545197.860 ops/s
Iteration   2: 3543256.424 ops/s
Iteration   3: 3530073.687 ops/s
Iteration   4: 3546294.820 ops/s
Iteration   5: 3542924.383 ops/s
Iteration   6: 3550479.498 ops/s
Iteration   7: 3554053.771 ops/s
Iteration   8: 3548279.858 ops/s
Iteration   9: 3547659.643 ops/s
Iteration  10: 3538779.270 ops/s
Iteration  11: 3538693.140 ops/s
Iteration  12: 3529965.557 ops/s
Iteration  13: 3546875.455 ops/s
Iteration  14: 3542524.705 ops/s
Iteration  15: 3550325.242 ops/s
Iteration  16: 3535287.933 ops/s
Iteration  17: 3543727.275 ops/s
Iteration  18: 3546957.224 ops/s
Iteration  19: 3561712.176 ops/s
Iteration  20: 3509946.290 ops/s
Iteration  21: 3536522.789 ops/s
Iteration  22: 3533444.164 ops/s
Iteration  23: 3544985.433 ops/s
Iteration  24: 3537865.292 ops/s
Iteration  25: 3532017.277 ops/s
Iteration  26: 3548858.415 ops/s
Iteration  27: 3533897.468 ops/s
Iteration  28: 3538460.774 ops/s
Iteration  29: 3547847.532 ops/s
Iteration  30: 3547447.270 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  3541812.021 ±(99.9%) 6358.887 ops/s [Average]
  (min, avg, max) = (3509946.290, 3541812.021, 3561712.176), stdev = 9517.684
  CI (99.9%): [3535453.133, 3548170.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  3541812.021 ± 6358.887  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708247.540 ops/s
# Warmup Iteration   2: 763389.955 ops/s
# Warmup Iteration   3: 1008009.180 ops/s
# Warmup Iteration   4: 1009885.063 ops/s
# Warmup Iteration   5: 1009247.771 ops/s
# Warmup Iteration   6: 1004858.594 ops/s
# Warmup Iteration   7: 1004195.088 ops/s
# Warmup Iteration   8: 1006607.668 ops/s
# Warmup Iteration   9: 1001903.166 ops/s
# Warmup Iteration  10: 937158.929 ops/s
# Warmup Iteration  11: 900820.482 ops/s
# Warmup Iteration  12: 997966.469 ops/s
# Warmup Iteration  13: 1005596.992 ops/s
# Warmup Iteration  14: 1001245.587 ops/s
# Warmup Iteration  15: 1007404.251 ops/s
# Warmup Iteration  16: 1003539.126 ops/s
# Warmup Iteration  17: 1056448.721 ops/s
# Warmup Iteration  18: 1059349.481 ops/s
# Warmup Iteration  19: 1061332.067 ops/s
# Warmup Iteration  20: 1058513.839 ops/s
# Warmup Iteration  21: 1052943.508 ops/s
# Warmup Iteration  22: 1053530.015 ops/s
# Warmup Iteration  23: 1057936.114 ops/s
# Warmup Iteration  24: 1059106.005 ops/s
# Warmup Iteration  25: 1058190.347 ops/s
# Warmup Iteration  26: 1059219.192 ops/s
# Warmup Iteration  27: 1052948.779 ops/s
# Warmup Iteration  28: 1051414.656 ops/s
# Warmup Iteration  29: 1055003.828 ops/s
# Warmup Iteration  30: 1059379.536 ops/s
Iteration   1: 1058132.248 ops/s
Iteration   2: 1060613.025 ops/s
Iteration   3: 1064835.830 ops/s
Iteration   4: 1062265.394 ops/s
Iteration   5: 1056454.324 ops/s
Iteration   6: 1062213.479 ops/s
Iteration   7: 1060696.304 ops/s
Iteration   8: 1061396.363 ops/s
Iteration   9: 1047728.553 ops/s
Iteration  10: 1059396.966 ops/s
Iteration  11: 1062479.425 ops/s
Iteration  12: 1062348.839 ops/s
Iteration  13: 1055033.072 ops/s
Iteration  14: 1053380.820 ops/s
Iteration  15: 1057354.987 ops/s
Iteration  16: 1058150.094 ops/s
Iteration  17: 1062147.554 ops/s
Iteration  18: 1056719.859 ops/s
Iteration  19: 1057665.100 ops/s
Iteration  20: 1052501.078 ops/s
Iteration  21: 1056946.048 ops/s
Iteration  22: 1057869.860 ops/s
Iteration  23: 1056473.901 ops/s
Iteration  24: 1058619.268 ops/s
Iteration  25: 1059964.959 ops/s
Iteration  26: 1053146.183 ops/s
Iteration  27: 1053696.072 ops/s
Iteration  28: 1056134.892 ops/s
Iteration  29: 1051249.148 ops/s
Iteration  30: 1061682.312 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_remove":
  1057909.865 ±(99.9%) 2629.103 ops/s [Average]
  (min, avg, max) = (1047728.553, 1057909.865, 1064835.830), stdev = 3935.118
  CI (99.9%): [1055280.762, 1060538.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  1057909.865 ± 2629.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713255.708 ops/s
# Warmup Iteration   2: 768511.706 ops/s
# Warmup Iteration   3: 1007920.155 ops/s
# Warmup Iteration   4: 1010901.020 ops/s
# Warmup Iteration   5: 1016159.498 ops/s
# Warmup Iteration   6: 1012210.502 ops/s
# Warmup Iteration   7: 1010040.631 ops/s
# Warmup Iteration   8: 1010828.714 ops/s
# Warmup Iteration   9: 1012257.069 ops/s
# Warmup Iteration  10: 930805.269 ops/s
# Warmup Iteration  11: 923215.561 ops/s
# Warmup Iteration  12: 1007931.189 ops/s
# Warmup Iteration  13: 1013427.623 ops/s
# Warmup Iteration  14: 1013218.288 ops/s
# Warmup Iteration  15: 1012097.012 ops/s
# Warmup Iteration  16: 1013327.462 ops/s
# Warmup Iteration  17: 1068786.624 ops/s
# Warmup Iteration  18: 1070564.604 ops/s
# Warmup Iteration  19: 1071867.486 ops/s
# Warmup Iteration  20: 1071990.893 ops/s
# Warmup Iteration  21: 1073218.285 ops/s
# Warmup Iteration  22: 1070417.141 ops/s
# Warmup Iteration  23: 1068627.742 ops/s
# Warmup Iteration  24: 1068067.834 ops/s
# Warmup Iteration  25: 1068494.940 ops/s
# Warmup Iteration  26: 1071098.250 ops/s
# Warmup Iteration  27: 1065945.448 ops/s
# Warmup Iteration  28: 1070579.502 ops/s
# Warmup Iteration  29: 1070855.880 ops/s
# Warmup Iteration  30: 1077345.057 ops/s
Iteration   1: 1073749.823 ops/s
Iteration   2: 1069754.457 ops/s
Iteration   3: 1072156.249 ops/s
Iteration   4: 1072139.265 ops/s
Iteration   5: 1072624.902 ops/s
Iteration   6: 1077126.543 ops/s
Iteration   7: 1073869.795 ops/s
Iteration   8: 1075289.727 ops/s
Iteration   9: 1070773.017 ops/s
Iteration  10: 1067106.544 ops/s
Iteration  11: 1070152.410 ops/s
Iteration  12: 1077929.522 ops/s
Iteration  13: 1071952.259 ops/s
Iteration  14: 1079287.191 ops/s
Iteration  15: 1072780.156 ops/s
Iteration  16: 1076221.910 ops/s
Iteration  17: 1073263.705 ops/s
Iteration  18: 1059715.958 ops/s
Iteration  19: 1071307.818 ops/s
Iteration  20: 1074014.599 ops/s
Iteration  21: 1070220.226 ops/s
Iteration  22: 1066639.430 ops/s
Iteration  23: 1070439.840 ops/s
Iteration  24: 1071538.062 ops/s
Iteration  25: 1069684.538 ops/s
Iteration  26: 1069714.970 ops/s
Iteration  27: 1068074.291 ops/s
Iteration  28: 1068643.172 ops/s
Iteration  29: 1073355.204 ops/s
Iteration  30: 1073076.352 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  1071753.398 ±(99.9%) 2526.545 ops/s [Average]
  (min, avg, max) = (1059715.958, 1071753.398, 1079287.191), stdev = 3781.614
  CI (99.9%): [1069226.853, 1074279.943] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  1071753.398 ± 2526.545  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710646.148 ops/s
# Warmup Iteration   2: 779275.951 ops/s
# Warmup Iteration   3: 1011299.089 ops/s
# Warmup Iteration   4: 1011117.318 ops/s
# Warmup Iteration   5: 1008436.651 ops/s
# Warmup Iteration   6: 1004731.183 ops/s
# Warmup Iteration   7: 1004925.625 ops/s
# Warmup Iteration   8: 1006608.109 ops/s
# Warmup Iteration   9: 1005549.107 ops/s
# Warmup Iteration  10: 882178.101 ops/s
# Warmup Iteration  11: 966476.227 ops/s
# Warmup Iteration  12: 1009027.464 ops/s
# Warmup Iteration  13: 1009385.844 ops/s
# Warmup Iteration  14: 1006953.699 ops/s
# Warmup Iteration  15: 1012251.162 ops/s
# Warmup Iteration  16: 1011124.522 ops/s
# Warmup Iteration  17: 1072820.209 ops/s
# Warmup Iteration  18: 1073129.692 ops/s
# Warmup Iteration  19: 1076814.072 ops/s
# Warmup Iteration  20: 1077683.838 ops/s
# Warmup Iteration  21: 1072778.440 ops/s
# Warmup Iteration  22: 1074680.240 ops/s
# Warmup Iteration  23: 1070423.179 ops/s
# Warmup Iteration  24: 1070009.477 ops/s
# Warmup Iteration  25: 1069057.237 ops/s
# Warmup Iteration  26: 1071914.113 ops/s
# Warmup Iteration  27: 1073029.334 ops/s
# Warmup Iteration  28: 1075310.796 ops/s
# Warmup Iteration  29: 1070081.513 ops/s
# Warmup Iteration  30: 1075895.909 ops/s
Iteration   1: 1075668.216 ops/s
Iteration   2: 1071376.935 ops/s
Iteration   3: 1074483.792 ops/s
Iteration   4: 1073985.370 ops/s
Iteration   5: 1075705.401 ops/s
Iteration   6: 1074599.588 ops/s
Iteration   7: 1077572.221 ops/s
Iteration   8: 1070105.426 ops/s
Iteration   9: 1072911.245 ops/s
Iteration  10: 1078050.816 ops/s
Iteration  11: 1069555.272 ops/s
Iteration  12: 1072269.276 ops/s
Iteration  13: 1077192.418 ops/s
Iteration  14: 1072505.298 ops/s
Iteration  15: 1078257.306 ops/s
Iteration  16: 1076374.613 ops/s
Iteration  17: 1073657.738 ops/s
Iteration  18: 1075918.990 ops/s
Iteration  19: 1065676.116 ops/s
Iteration  20: 1062471.434 ops/s
Iteration  21: 1074182.102 ops/s
Iteration  22: 1077471.796 ops/s
Iteration  23: 1071661.832 ops/s
Iteration  24: 1077159.079 ops/s
Iteration  25: 1070868.789 ops/s
Iteration  26: 1075317.639 ops/s
Iteration  27: 1076827.533 ops/s
Iteration  28: 1076486.915 ops/s
Iteration  29: 1072852.500 ops/s
Iteration  30: 1071825.939 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  1073766.386 ±(99.9%) 2422.560 ops/s [Average]
  (min, avg, max) = (1062471.434, 1073766.386, 1078257.306), stdev = 3625.974
  CI (99.9%): [1071343.826, 1076188.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1073766.386 ± 2422.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700955.018 ops/s
# Warmup Iteration   2: 758287.696 ops/s
# Warmup Iteration   3: 1005105.744 ops/s
# Warmup Iteration   4: 1005530.136 ops/s
# Warmup Iteration   5: 1002076.788 ops/s
# Warmup Iteration   6: 1011299.970 ops/s
# Warmup Iteration   7: 1009771.164 ops/s
# Warmup Iteration   8: 1005675.198 ops/s
# Warmup Iteration   9: 1000369.744 ops/s
# Warmup Iteration  10: 948210.214 ops/s
# Warmup Iteration  11: 891584.429 ops/s
# Warmup Iteration  12: 1005371.503 ops/s
# Warmup Iteration  13: 1002840.821 ops/s
# Warmup Iteration  14: 1005117.099 ops/s
# Warmup Iteration  15: 1006155.226 ops/s
# Warmup Iteration  16: 1000067.509 ops/s
# Warmup Iteration  17: 1070545.664 ops/s
# Warmup Iteration  18: 1070964.256 ops/s
# Warmup Iteration  19: 1067919.076 ops/s
# Warmup Iteration  20: 1067572.798 ops/s
# Warmup Iteration  21: 1070745.572 ops/s
# Warmup Iteration  22: 1070498.183 ops/s
# Warmup Iteration  23: 1068796.358 ops/s
# Warmup Iteration  24: 1068664.038 ops/s
# Warmup Iteration  25: 1067702.632 ops/s
# Warmup Iteration  26: 1063851.743 ops/s
# Warmup Iteration  27: 1068428.398 ops/s
# Warmup Iteration  28: 1074293.796 ops/s
# Warmup Iteration  29: 1068859.191 ops/s
# Warmup Iteration  30: 1072702.218 ops/s
Iteration   1: 1066155.758 ops/s
Iteration   2: 1064061.537 ops/s
Iteration   3: 1071358.386 ops/s
Iteration   4: 1070209.477 ops/s
Iteration   5: 1069715.694 ops/s
Iteration   6: 1072533.754 ops/s
Iteration   7: 1074724.434 ops/s
Iteration   8: 1064401.008 ops/s
Iteration   9: 1067759.948 ops/s
Iteration  10: 1073125.060 ops/s
Iteration  11: 1069688.961 ops/s
Iteration  12: 1066484.534 ops/s
Iteration  13: 1067397.987 ops/s
Iteration  14: 1074506.736 ops/s
Iteration  15: 1073019.693 ops/s
Iteration  16: 1067166.174 ops/s
Iteration  17: 1068125.663 ops/s
Iteration  18: 1063736.374 ops/s
Iteration  19: 1063666.493 ops/s
Iteration  20: 1065952.084 ops/s
Iteration  21: 1063325.383 ops/s
Iteration  22: 1065031.315 ops/s
Iteration  23: 1071873.451 ops/s
Iteration  24: 1068805.907 ops/s
Iteration  25: 1064780.392 ops/s
Iteration  26: 1072684.721 ops/s
Iteration  27: 1068231.981 ops/s
Iteration  28: 1073873.201 ops/s
Iteration  29: 1067452.880 ops/s
Iteration  30: 1068314.589 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  1068605.453 ±(99.9%) 2355.793 ops/s [Average]
  (min, avg, max) = (1063325.383, 1068605.453, 1074724.434), stdev = 3526.041
  CI (99.9%): [1066249.659, 1070961.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  1068605.453 ± 2355.793  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708829.949 ops/s
# Warmup Iteration   2: 767519.761 ops/s
# Warmup Iteration   3: 995014.592 ops/s
# Warmup Iteration   4: 1005432.283 ops/s
# Warmup Iteration   5: 997795.687 ops/s
# Warmup Iteration   6: 1001299.344 ops/s
# Warmup Iteration   7: 1006749.707 ops/s
# Warmup Iteration   8: 1001217.510 ops/s
# Warmup Iteration   9: 1000378.355 ops/s
# Warmup Iteration  10: 917400.310 ops/s
# Warmup Iteration  11: 917964.006 ops/s
# Warmup Iteration  12: 1000365.649 ops/s
# Warmup Iteration  13: 999907.301 ops/s
# Warmup Iteration  14: 1001667.927 ops/s
# Warmup Iteration  15: 1006256.783 ops/s
# Warmup Iteration  16: 1000739.679 ops/s
# Warmup Iteration  17: 1059365.226 ops/s
# Warmup Iteration  18: 1060722.493 ops/s
# Warmup Iteration  19: 1055623.917 ops/s
# Warmup Iteration  20: 1062234.083 ops/s
# Warmup Iteration  21: 1058414.078 ops/s
# Warmup Iteration  22: 1065252.109 ops/s
# Warmup Iteration  23: 1066221.506 ops/s
# Warmup Iteration  24: 1059734.837 ops/s
# Warmup Iteration  25: 1061494.050 ops/s
# Warmup Iteration  26: 1063263.976 ops/s
# Warmup Iteration  27: 1064039.015 ops/s
# Warmup Iteration  28: 1061771.797 ops/s
# Warmup Iteration  29: 1059751.108 ops/s
# Warmup Iteration  30: 1063579.097 ops/s
Iteration   1: 1057301.777 ops/s
Iteration   2: 1063836.846 ops/s
Iteration   3: 1061230.524 ops/s
Iteration   4: 1068943.606 ops/s
Iteration   5: 1058911.614 ops/s
Iteration   6: 1062733.473 ops/s
Iteration   7: 1061791.261 ops/s
Iteration   8: 1053550.534 ops/s
Iteration   9: 1064535.575 ops/s
Iteration  10: 1062925.146 ops/s
Iteration  11: 1064202.689 ops/s
Iteration  12: 1066970.405 ops/s
Iteration  13: 1061000.269 ops/s
Iteration  14: 1064281.530 ops/s
Iteration  15: 1060136.103 ops/s
Iteration  16: 1058796.217 ops/s
Iteration  17: 1057756.257 ops/s
Iteration  18: 1056703.272 ops/s
Iteration  19: 1064676.088 ops/s
Iteration  20: 1059423.274 ops/s
Iteration  21: 1059915.535 ops/s
Iteration  22: 1062559.387 ops/s
Iteration  23: 1061972.635 ops/s
Iteration  24: 1061712.604 ops/s
Iteration  25: 1063094.969 ops/s
Iteration  26: 1064912.929 ops/s
Iteration  27: 1063905.782 ops/s
Iteration  28: 1063502.366 ops/s
Iteration  29: 1061918.382 ops/s
Iteration  30: 1058722.791 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  1061730.795 ±(99.9%) 2153.542 ops/s [Average]
  (min, avg, max) = (1053550.534, 1061730.795, 1068943.606), stdev = 3223.320
  CI (99.9%): [1059577.253, 1063884.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1061730.795 ± 2153.542  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709970.583 ops/s
# Warmup Iteration   2: 769041.992 ops/s
# Warmup Iteration   3: 1012463.891 ops/s
# Warmup Iteration   4: 1008240.145 ops/s
# Warmup Iteration   5: 1008469.135 ops/s
# Warmup Iteration   6: 1011356.623 ops/s
# Warmup Iteration   7: 1010003.340 ops/s
# Warmup Iteration   8: 1009388.565 ops/s
# Warmup Iteration   9: 1004202.421 ops/s
# Warmup Iteration  10: 933399.242 ops/s
# Warmup Iteration  11: 912471.517 ops/s
# Warmup Iteration  12: 1005925.171 ops/s
# Warmup Iteration  13: 1004085.771 ops/s
# Warmup Iteration  14: 1006914.058 ops/s
# Warmup Iteration  15: 1006219.754 ops/s
# Warmup Iteration  16: 1004371.105 ops/s
# Warmup Iteration  17: 1064759.542 ops/s
# Warmup Iteration  18: 1067089.109 ops/s
# Warmup Iteration  19: 1065095.230 ops/s
# Warmup Iteration  20: 1068954.477 ops/s
# Warmup Iteration  21: 1068110.847 ops/s
# Warmup Iteration  22: 1070453.043 ops/s
# Warmup Iteration  23: 1069467.173 ops/s
# Warmup Iteration  24: 1066287.246 ops/s
# Warmup Iteration  25: 1071265.817 ops/s
# Warmup Iteration  26: 1069766.024 ops/s
# Warmup Iteration  27: 1072157.066 ops/s
# Warmup Iteration  28: 1072913.433 ops/s
# Warmup Iteration  29: 1067891.499 ops/s
# Warmup Iteration  30: 1066166.934 ops/s
Iteration   1: 1072015.279 ops/s
Iteration   2: 1067252.055 ops/s
Iteration   3: 1064600.814 ops/s
Iteration   4: 1072560.921 ops/s
Iteration   5: 1071732.683 ops/s
Iteration   6: 1074876.038 ops/s
Iteration   7: 1075643.695 ops/s
Iteration   8: 1069248.545 ops/s
Iteration   9: 1068091.681 ops/s
Iteration  10: 1069582.842 ops/s
Iteration  11: 1074235.246 ops/s
Iteration  12: 1072395.214 ops/s
Iteration  13: 1072635.065 ops/s
Iteration  14: 1073043.327 ops/s
Iteration  15: 1064580.597 ops/s
Iteration  16: 1070664.643 ops/s
Iteration  17: 1069744.336 ops/s
Iteration  18: 1065875.522 ops/s
Iteration  19: 1066528.057 ops/s
Iteration  20: 1069557.920 ops/s
Iteration  21: 1072570.976 ops/s
Iteration  22: 1069854.692 ops/s
Iteration  23: 1071941.760 ops/s
Iteration  24: 1069434.243 ops/s
Iteration  25: 1061498.597 ops/s
Iteration  26: 1066592.805 ops/s
Iteration  27: 1075102.121 ops/s
Iteration  28: 1072219.658 ops/s
Iteration  29: 1070789.776 ops/s
Iteration  30: 1073226.861 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  1070269.866 ±(99.9%) 2300.282 ops/s [Average]
  (min, avg, max) = (1061498.597, 1070269.866, 1075643.695), stdev = 3442.954
  CI (99.9%): [1067969.583, 1072570.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  1070269.866 ± 2300.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 703822.638 ops/s
# Warmup Iteration   2: 768211.273 ops/s
# Warmup Iteration   3: 1002239.944 ops/s
# Warmup Iteration   4: 999792.400 ops/s
# Warmup Iteration   5: 997063.304 ops/s
# Warmup Iteration   6: 1000837.237 ops/s
# Warmup Iteration   7: 993840.879 ops/s
# Warmup Iteration   8: 1003625.018 ops/s
# Warmup Iteration   9: 1002100.147 ops/s
# Warmup Iteration  10: 895858.264 ops/s
# Warmup Iteration  11: 939844.257 ops/s
# Warmup Iteration  12: 999405.456 ops/s
# Warmup Iteration  13: 1002612.118 ops/s
# Warmup Iteration  14: 1002652.557 ops/s
# Warmup Iteration  15: 1005480.069 ops/s
# Warmup Iteration  16: 1005445.576 ops/s
# Warmup Iteration  17: 1060919.813 ops/s
# Warmup Iteration  18: 1069465.003 ops/s
# Warmup Iteration  19: 1067164.419 ops/s
# Warmup Iteration  20: 1075755.922 ops/s
# Warmup Iteration  21: 1070267.473 ops/s
# Warmup Iteration  22: 1071470.059 ops/s
# Warmup Iteration  23: 1066845.276 ops/s
# Warmup Iteration  24: 1066449.096 ops/s
# Warmup Iteration  25: 1069457.672 ops/s
# Warmup Iteration  26: 1064746.149 ops/s
# Warmup Iteration  27: 1068659.017 ops/s
# Warmup Iteration  28: 1068569.349 ops/s
# Warmup Iteration  29: 1066258.969 ops/s
# Warmup Iteration  30: 1070324.172 ops/s
Iteration   1: 1073134.837 ops/s
Iteration   2: 1066613.237 ops/s
Iteration   3: 1076024.158 ops/s
Iteration   4: 1071447.381 ops/s
Iteration   5: 1079150.170 ops/s
Iteration   6: 1069482.666 ops/s
Iteration   7: 1071528.711 ops/s
Iteration   8: 1075362.055 ops/s
Iteration   9: 1074838.683 ops/s
Iteration  10: 1070332.249 ops/s
Iteration  11: 1070604.039 ops/s
Iteration  12: 1073775.325 ops/s
Iteration  13: 1068917.896 ops/s
Iteration  14: 1064498.022 ops/s
Iteration  15: 1063681.278 ops/s
Iteration  16: 1074803.048 ops/s
Iteration  17: 1075122.561 ops/s
Iteration  18: 1065699.664 ops/s
Iteration  19: 1064482.318 ops/s
Iteration  20: 1062766.524 ops/s
Iteration  21: 1078734.683 ops/s
Iteration  22: 1069059.783 ops/s
Iteration  23: 1071573.899 ops/s
Iteration  24: 1069152.645 ops/s
Iteration  25: 1069895.674 ops/s
Iteration  26: 1066768.062 ops/s
Iteration  27: 1063703.621 ops/s
Iteration  28: 1071457.857 ops/s
Iteration  29: 1068201.774 ops/s
Iteration  30: 1070695.095 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  1070383.597 ±(99.9%) 2953.560 ops/s [Average]
  (min, avg, max) = (1062766.524, 1070383.597, 1079150.170), stdev = 4420.750
  CI (99.9%): [1067430.037, 1073337.157] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1070383.597 ± 2953.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1483135.761 ops/s
# Warmup Iteration   2: 3447316.420 ops/s
# Warmup Iteration   3: 3603816.758 ops/s
# Warmup Iteration   4: 3076225.446 ops/s
# Warmup Iteration   5: 3491230.235 ops/s
# Warmup Iteration   6: 3598906.506 ops/s
# Warmup Iteration   7: 3593879.328 ops/s
# Warmup Iteration   8: 3590709.312 ops/s
# Warmup Iteration   9: 3605111.820 ops/s
# Warmup Iteration  10: 3612567.541 ops/s
# Warmup Iteration  11: 3604423.462 ops/s
# Warmup Iteration  12: 3592903.611 ops/s
# Warmup Iteration  13: 3609177.442 ops/s
# Warmup Iteration  14: 3621478.062 ops/s
# Warmup Iteration  15: 3609724.357 ops/s
# Warmup Iteration  16: 3608829.236 ops/s
# Warmup Iteration  17: 3605210.136 ops/s
# Warmup Iteration  18: 3603655.635 ops/s
# Warmup Iteration  19: 3610890.789 ops/s
# Warmup Iteration  20: 3612565.355 ops/s
# Warmup Iteration  21: 3612823.554 ops/s
# Warmup Iteration  22: 3595936.110 ops/s
# Warmup Iteration  23: 3606992.774 ops/s
# Warmup Iteration  24: 3599127.550 ops/s
# Warmup Iteration  25: 3598193.808 ops/s
# Warmup Iteration  26: 3613022.596 ops/s
# Warmup Iteration  27: 3612867.146 ops/s
# Warmup Iteration  28: 3608321.967 ops/s
# Warmup Iteration  29: 3605430.699 ops/s
# Warmup Iteration  30: 3600568.227 ops/s
Iteration   1: 3617090.994 ops/s
Iteration   2: 3625430.609 ops/s
Iteration   3: 3597335.142 ops/s
Iteration   4: 3605521.224 ops/s
Iteration   5: 3620318.236 ops/s
Iteration   6: 3594152.296 ops/s
Iteration   7: 3618652.194 ops/s
Iteration   8: 3612720.890 ops/s
Iteration   9: 3603862.143 ops/s
Iteration  10: 3605873.895 ops/s
Iteration  11: 3620413.047 ops/s
Iteration  12: 3606427.077 ops/s
Iteration  13: 3606647.272 ops/s
Iteration  14: 3609232.195 ops/s
Iteration  15: 3600004.507 ops/s
Iteration  16: 3610925.077 ops/s
Iteration  17: 3610879.655 ops/s
Iteration  18: 3599133.164 ops/s
Iteration  19: 3620068.231 ops/s
Iteration  20: 3614679.311 ops/s
Iteration  21: 3597031.827 ops/s
Iteration  22: 3616007.871 ops/s
Iteration  23: 3615441.865 ops/s
Iteration  24: 3623908.928 ops/s
Iteration  25: 3624423.251 ops/s
Iteration  26: 3600218.157 ops/s
Iteration  27: 3598248.510 ops/s
Iteration  28: 3603526.682 ops/s
Iteration  29: 3608577.674 ops/s
Iteration  30: 3612768.871 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_select":
  3609984.027 ±(99.9%) 6027.181 ops/s [Average]
  (min, avg, max) = (3594152.296, 3609984.027, 3625430.609), stdev = 9021.201
  CI (99.9%): [3603956.846, 3616011.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  3609984.027 ± 6027.181  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1493793.197 ops/s
# Warmup Iteration   2: 3466320.386 ops/s
# Warmup Iteration   3: 3620908.925 ops/s
# Warmup Iteration   4: 3048807.496 ops/s
# Warmup Iteration   5: 3506917.733 ops/s
# Warmup Iteration   6: 3590267.273 ops/s
# Warmup Iteration   7: 3607172.566 ops/s
# Warmup Iteration   8: 3597993.550 ops/s
# Warmup Iteration   9: 3594771.306 ops/s
# Warmup Iteration  10: 3612324.288 ops/s
# Warmup Iteration  11: 3603434.742 ops/s
# Warmup Iteration  12: 3626284.143 ops/s
# Warmup Iteration  13: 3608074.680 ops/s
# Warmup Iteration  14: 3594478.998 ops/s
# Warmup Iteration  15: 3611918.121 ops/s
# Warmup Iteration  16: 3600985.516 ops/s
# Warmup Iteration  17: 3635808.786 ops/s
# Warmup Iteration  18: 3612420.883 ops/s
# Warmup Iteration  19: 3605179.350 ops/s
# Warmup Iteration  20: 3619371.053 ops/s
# Warmup Iteration  21: 3600325.122 ops/s
# Warmup Iteration  22: 3604669.695 ops/s
# Warmup Iteration  23: 3590063.219 ops/s
# Warmup Iteration  24: 3614874.467 ops/s
# Warmup Iteration  25: 3621166.538 ops/s
# Warmup Iteration  26: 3624290.204 ops/s
# Warmup Iteration  27: 3626281.951 ops/s
# Warmup Iteration  28: 3610184.132 ops/s
# Warmup Iteration  29: 3618571.224 ops/s
# Warmup Iteration  30: 3604931.242 ops/s
Iteration   1: 3607102.388 ops/s
Iteration   2: 3618866.918 ops/s
Iteration   3: 3620623.635 ops/s
Iteration   4: 3610976.586 ops/s
Iteration   5: 3618638.901 ops/s
Iteration   6: 3615355.065 ops/s
Iteration   7: 3619421.002 ops/s
Iteration   8: 3600804.643 ops/s
Iteration   9: 3618059.568 ops/s
Iteration  10: 3616876.180 ops/s
Iteration  11: 3607369.870 ops/s
Iteration  12: 3571962.845 ops/s
Iteration  13: 3596977.832 ops/s
Iteration  14: 3610694.207 ops/s
Iteration  15: 3610354.007 ops/s
Iteration  16: 3610758.947 ops/s
Iteration  17: 3604036.263 ops/s
Iteration  18: 3614652.206 ops/s
Iteration  19: 3613997.618 ops/s
Iteration  20: 3598809.036 ops/s
Iteration  21: 3606157.534 ops/s
Iteration  22: 3613389.703 ops/s
Iteration  23: 3623283.786 ops/s
Iteration  24: 3624117.140 ops/s
Iteration  25: 3603605.141 ops/s
Iteration  26: 3625686.601 ops/s
Iteration  27: 3611820.083 ops/s
Iteration  28: 3612484.779 ops/s
Iteration  29: 3614198.038 ops/s
Iteration  30: 3618301.359 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  3611312.729 ±(99.9%) 6958.641 ops/s [Average]
  (min, avg, max) = (3571962.845, 3611312.729, 3625686.601), stdev = 10415.367
  CI (99.9%): [3604354.088, 3618271.370] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  3611312.729 ± 6958.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4473638.700 ops/s
# Warmup Iteration   2: 9961060.340 ops/s
# Warmup Iteration   3: 10863714.979 ops/s
# Warmup Iteration   4: 9020430.457 ops/s
# Warmup Iteration   5: 10886631.660 ops/s
# Warmup Iteration   6: 10878956.563 ops/s
# Warmup Iteration   7: 10841673.503 ops/s
# Warmup Iteration   8: 10870233.829 ops/s
# Warmup Iteration   9: 10857522.812 ops/s
# Warmup Iteration  10: 10873310.132 ops/s
# Warmup Iteration  11: 10887264.338 ops/s
# Warmup Iteration  12: 10873256.705 ops/s
# Warmup Iteration  13: 10890036.709 ops/s
# Warmup Iteration  14: 10879894.040 ops/s
# Warmup Iteration  15: 10848698.088 ops/s
# Warmup Iteration  16: 10886148.841 ops/s
# Warmup Iteration  17: 10910893.121 ops/s
# Warmup Iteration  18: 10894066.877 ops/s
# Warmup Iteration  19: 10916529.721 ops/s
# Warmup Iteration  20: 10872965.553 ops/s
# Warmup Iteration  21: 10809387.017 ops/s
# Warmup Iteration  22: 10898542.778 ops/s
# Warmup Iteration  23: 10855055.897 ops/s
# Warmup Iteration  24: 10871360.769 ops/s
# Warmup Iteration  25: 10874119.668 ops/s
# Warmup Iteration  26: 10851932.857 ops/s
# Warmup Iteration  27: 10887105.270 ops/s
# Warmup Iteration  28: 10861203.872 ops/s
# Warmup Iteration  29: 10896070.509 ops/s
# Warmup Iteration  30: 10880910.763 ops/s
Iteration   1: 10899343.328 ops/s
Iteration   2: 10897666.524 ops/s
Iteration   3: 10926540.046 ops/s
Iteration   4: 10841312.332 ops/s
Iteration   5: 10885589.988 ops/s
Iteration   6: 10899140.678 ops/s
Iteration   7: 10871705.313 ops/s
Iteration   8: 10885480.448 ops/s
Iteration   9: 10840165.929 ops/s
Iteration  10: 10879863.435 ops/s
Iteration  11: 10817541.498 ops/s
Iteration  12: 10884729.821 ops/s
Iteration  13: 10869232.320 ops/s
Iteration  14: 10788902.123 ops/s
Iteration  15: 10858850.863 ops/s
Iteration  16: 10869036.878 ops/s
Iteration  17: 10892629.123 ops/s
Iteration  18: 10813493.148 ops/s
Iteration  19: 10869791.464 ops/s
Iteration  20: 10873704.026 ops/s
Iteration  21: 10935547.887 ops/s
Iteration  22: 10882364.564 ops/s
Iteration  23: 10872766.484 ops/s
Iteration  24: 10938183.704 ops/s
Iteration  25: 10897054.968 ops/s
Iteration  26: 10879435.251 ops/s
Iteration  27: 10843539.280 ops/s
Iteration  28: 10887182.340 ops/s
Iteration  29: 10846848.618 ops/s
Iteration  30: 10879986.951 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_tap":
  10874254.311 ±(99.9%) 22322.821 ops/s [Average]
  (min, avg, max) = (10788902.123, 10874254.311, 10938183.704), stdev = 33411.750
  CI (99.9%): [10851931.490, 10896577.132] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  10874254.311 ± 22322.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3669248.103 ops/s
# Warmup Iteration   2: 8018573.167 ops/s
# Warmup Iteration   3: 6692093.610 ops/s
# Warmup Iteration   4: 7941124.237 ops/s
# Warmup Iteration   5: 7945364.973 ops/s
# Warmup Iteration   6: 7861017.777 ops/s
# Warmup Iteration   7: 7963563.380 ops/s
# Warmup Iteration   8: 7979572.460 ops/s
# Warmup Iteration   9: 7967263.141 ops/s
# Warmup Iteration  10: 7929423.115 ops/s
# Warmup Iteration  11: 7964716.642 ops/s
# Warmup Iteration  12: 7958702.473 ops/s
# Warmup Iteration  13: 7943214.470 ops/s
# Warmup Iteration  14: 7935271.195 ops/s
# Warmup Iteration  15: 7940060.057 ops/s
# Warmup Iteration  16: 7946882.557 ops/s
# Warmup Iteration  17: 7972747.337 ops/s
# Warmup Iteration  18: 7960579.654 ops/s
# Warmup Iteration  19: 7998242.069 ops/s
# Warmup Iteration  20: 7934303.177 ops/s
# Warmup Iteration  21: 7933419.992 ops/s
# Warmup Iteration  22: 7891516.059 ops/s
# Warmup Iteration  23: 7938246.920 ops/s
# Warmup Iteration  24: 7964383.645 ops/s
# Warmup Iteration  25: 7975023.862 ops/s
# Warmup Iteration  26: 7973036.929 ops/s
# Warmup Iteration  27: 7955664.169 ops/s
# Warmup Iteration  28: 7898707.488 ops/s
# Warmup Iteration  29: 7988483.974 ops/s
# Warmup Iteration  30: 8010289.843 ops/s
Iteration   1: 7963625.189 ops/s
Iteration   2: 7941760.277 ops/s
Iteration   3: 7957679.809 ops/s
Iteration   4: 7973993.177 ops/s
Iteration   5: 7950752.969 ops/s
Iteration   6: 7962110.524 ops/s
Iteration   7: 7931709.903 ops/s
Iteration   8: 8007676.485 ops/s
Iteration   9: 7917283.376 ops/s
Iteration  10: 7926320.032 ops/s
Iteration  11: 7955327.512 ops/s
Iteration  12: 7949076.746 ops/s
Iteration  13: 7972176.171 ops/s
Iteration  14: 7911726.076 ops/s
Iteration  15: 7942981.911 ops/s
Iteration  16: 7980406.578 ops/s
Iteration  17: 7990369.924 ops/s
Iteration  18: 7965080.075 ops/s
Iteration  19: 7919822.865 ops/s
Iteration  20: 7991157.014 ops/s
Iteration  21: 7978204.552 ops/s
Iteration  22: 8012053.422 ops/s
Iteration  23: 7968468.669 ops/s
Iteration  24: 7989553.766 ops/s
Iteration  25: 7959099.368 ops/s
Iteration  26: 7983133.937 ops/s
Iteration  27: 8006600.922 ops/s
Iteration  28: 7940025.084 ops/s
Iteration  29: 7937277.581 ops/s
Iteration  30: 7933540.392 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  7960633.144 ±(99.9%) 18328.742 ops/s [Average]
  (min, avg, max) = (7911726.076, 7960633.144, 8012053.422), stdev = 27433.600
  CI (99.9%): [7942304.401, 7978961.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  7960633.144 ± 18328.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4237231.743 ops/s
# Warmup Iteration   2: 8820808.351 ops/s
# Warmup Iteration   3: 7406327.959 ops/s
# Warmup Iteration   4: 8836736.733 ops/s
# Warmup Iteration   5: 8803601.290 ops/s
# Warmup Iteration   6: 8790307.080 ops/s
# Warmup Iteration   7: 8848479.551 ops/s
# Warmup Iteration   8: 8806351.390 ops/s
# Warmup Iteration   9: 8825722.865 ops/s
# Warmup Iteration  10: 8836563.162 ops/s
# Warmup Iteration  11: 8784774.713 ops/s
# Warmup Iteration  12: 8840512.394 ops/s
# Warmup Iteration  13: 8816517.519 ops/s
# Warmup Iteration  14: 8870723.498 ops/s
# Warmup Iteration  15: 8768003.368 ops/s
# Warmup Iteration  16: 8821662.951 ops/s
# Warmup Iteration  17: 8803056.940 ops/s
# Warmup Iteration  18: 8817397.720 ops/s
# Warmup Iteration  19: 8822836.055 ops/s
# Warmup Iteration  20: 8781785.028 ops/s
# Warmup Iteration  21: 8760280.433 ops/s
# Warmup Iteration  22: 8768942.128 ops/s
# Warmup Iteration  23: 8792353.383 ops/s
# Warmup Iteration  24: 8808694.863 ops/s
# Warmup Iteration  25: 8840620.050 ops/s
# Warmup Iteration  26: 8841337.473 ops/s
# Warmup Iteration  27: 8834516.764 ops/s
# Warmup Iteration  28: 8867806.742 ops/s
# Warmup Iteration  29: 8836312.858 ops/s
# Warmup Iteration  30: 8828177.376 ops/s
Iteration   1: 8890137.991 ops/s
Iteration   2: 8804862.144 ops/s
Iteration   3: 8823609.923 ops/s
Iteration   4: 8812175.537 ops/s
Iteration   5: 8800188.118 ops/s
Iteration   6: 8828230.249 ops/s
Iteration   7: 8747164.618 ops/s
Iteration   8: 8825288.111 ops/s
Iteration   9: 8832588.720 ops/s
Iteration  10: 8868369.783 ops/s
Iteration  11: 8767991.960 ops/s
Iteration  12: 8736890.253 ops/s
Iteration  13: 8732478.870 ops/s
Iteration  14: 8858824.847 ops/s
Iteration  15: 8861341.763 ops/s
Iteration  16: 8810011.721 ops/s
Iteration  17: 8801074.064 ops/s
Iteration  18: 8886682.342 ops/s
Iteration  19: 8821909.527 ops/s
Iteration  20: 8829989.199 ops/s
Iteration  21: 8867734.428 ops/s
Iteration  22: 8832956.874 ops/s
Iteration  23: 8831093.558 ops/s
Iteration  24: 8804951.530 ops/s
Iteration  25: 8807754.019 ops/s
Iteration  26: 8765780.761 ops/s
Iteration  27: 8835315.514 ops/s
Iteration  28: 8807049.906 ops/s
Iteration  29: 8813573.403 ops/s
Iteration  30: 8844156.408 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  8818339.205 ±(99.9%) 26562.912 ops/s [Average]
  (min, avg, max) = (8732478.870, 8818339.205, 8890137.991), stdev = 39758.120
  CI (99.9%): [8791776.292, 8844902.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  8818339.205 ± 26562.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 711298.711 ops/s
# Warmup Iteration   2: 760340.018 ops/s
# Warmup Iteration   3: 1001320.943 ops/s
# Warmup Iteration   4: 995663.307 ops/s
# Warmup Iteration   5: 1002940.638 ops/s
# Warmup Iteration   6: 999578.010 ops/s
# Warmup Iteration   7: 1006034.640 ops/s
# Warmup Iteration   8: 1005181.266 ops/s
# Warmup Iteration   9: 1000216.041 ops/s
# Warmup Iteration  10: 974533.372 ops/s
# Warmup Iteration  11: 864451.855 ops/s
# Warmup Iteration  12: 1005726.800 ops/s
# Warmup Iteration  13: 1000697.102 ops/s
# Warmup Iteration  14: 1003267.176 ops/s
# Warmup Iteration  15: 1003790.984 ops/s
# Warmup Iteration  16: 1002646.178 ops/s
# Warmup Iteration  17: 1065953.273 ops/s
# Warmup Iteration  18: 1066276.110 ops/s
# Warmup Iteration  19: 1067760.024 ops/s
# Warmup Iteration  20: 1057915.307 ops/s
# Warmup Iteration  21: 1054692.814 ops/s
# Warmup Iteration  22: 1066753.504 ops/s
# Warmup Iteration  23: 1065996.787 ops/s
# Warmup Iteration  24: 1066909.075 ops/s
# Warmup Iteration  25: 1064808.520 ops/s
# Warmup Iteration  26: 1063257.121 ops/s
# Warmup Iteration  27: 1067556.608 ops/s
# Warmup Iteration  28: 1065332.492 ops/s
# Warmup Iteration  29: 1066677.593 ops/s
# Warmup Iteration  30: 1063439.398 ops/s
Iteration   1: 1069648.362 ops/s
Iteration   2: 1067398.273 ops/s
Iteration   3: 1065835.906 ops/s
Iteration   4: 1067534.204 ops/s
Iteration   5: 1060191.467 ops/s
Iteration   6: 1067609.381 ops/s
Iteration   7: 1069284.797 ops/s
Iteration   8: 1059034.798 ops/s
Iteration   9: 1068384.831 ops/s
Iteration  10: 1062127.085 ops/s
Iteration  11: 1059650.327 ops/s
Iteration  12: 1065079.998 ops/s
Iteration  13: 1060818.161 ops/s
Iteration  14: 1063372.390 ops/s
Iteration  15: 1061015.392 ops/s
Iteration  16: 1056869.860 ops/s
Iteration  17: 1060872.427 ops/s
Iteration  18: 1065131.682 ops/s
Iteration  19: 1063189.394 ops/s
Iteration  20: 1065774.554 ops/s
Iteration  21: 1067180.041 ops/s
Iteration  22: 1057192.606 ops/s
Iteration  23: 1059586.668 ops/s
Iteration  24: 1067914.108 ops/s
Iteration  25: 1069807.160 ops/s
Iteration  26: 1060848.397 ops/s
Iteration  27: 1068258.005 ops/s
Iteration  28: 1061991.961 ops/s
Iteration  29: 1061888.241 ops/s
Iteration  30: 1061577.002 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_with":
  1063835.583 ±(99.9%) 2584.528 ops/s [Average]
  (min, avg, max) = (1056869.860, 1063835.583, 1069807.160), stdev = 3868.401
  CI (99.9%): [1061251.054, 1066420.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  1063835.583 ± 2584.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687669.980 ops/s
# Warmup Iteration   2: 762169.372 ops/s
# Warmup Iteration   3: 999528.332 ops/s
# Warmup Iteration   4: 994872.922 ops/s
# Warmup Iteration   5: 993252.104 ops/s
# Warmup Iteration   6: 993186.648 ops/s
# Warmup Iteration   7: 995288.023 ops/s
# Warmup Iteration   8: 996535.808 ops/s
# Warmup Iteration   9: 996716.295 ops/s
# Warmup Iteration  10: 882687.563 ops/s
# Warmup Iteration  11: 943282.894 ops/s
# Warmup Iteration  12: 984202.186 ops/s
# Warmup Iteration  13: 996924.452 ops/s
# Warmup Iteration  14: 992659.174 ops/s
# Warmup Iteration  15: 995334.544 ops/s
# Warmup Iteration  16: 989593.487 ops/s
# Warmup Iteration  17: 1060757.351 ops/s
# Warmup Iteration  18: 1054392.333 ops/s
# Warmup Iteration  19: 1047057.291 ops/s
# Warmup Iteration  20: 1052700.283 ops/s
# Warmup Iteration  21: 1058082.955 ops/s
# Warmup Iteration  22: 1057144.004 ops/s
# Warmup Iteration  23: 1054085.996 ops/s
# Warmup Iteration  24: 1058220.226 ops/s
# Warmup Iteration  25: 1054309.194 ops/s
# Warmup Iteration  26: 1054830.856 ops/s
# Warmup Iteration  27: 1056979.582 ops/s
# Warmup Iteration  28: 1055269.127 ops/s
# Warmup Iteration  29: 1056488.459 ops/s
# Warmup Iteration  30: 1056296.879 ops/s
Iteration   1: 1053712.897 ops/s
Iteration   2: 1057418.329 ops/s
Iteration   3: 1055580.226 ops/s
Iteration   4: 1055767.386 ops/s
Iteration   5: 1050496.163 ops/s
Iteration   6: 1056982.606 ops/s
Iteration   7: 1051585.255 ops/s
Iteration   8: 1050311.910 ops/s
Iteration   9: 1055298.845 ops/s
Iteration  10: 1052791.377 ops/s
Iteration  11: 1051024.596 ops/s
Iteration  12: 1056613.350 ops/s
Iteration  13: 1056776.793 ops/s
Iteration  14: 1058789.578 ops/s
Iteration  15: 1055002.506 ops/s
Iteration  16: 1064331.768 ops/s
Iteration  17: 1060306.856 ops/s
Iteration  18: 1059706.778 ops/s
Iteration  19: 1058143.425 ops/s
Iteration  20: 1053491.151 ops/s
Iteration  21: 1058324.929 ops/s
Iteration  22: 1053277.780 ops/s
Iteration  23: 1061043.285 ops/s
Iteration  24: 1057455.726 ops/s
Iteration  25: 1062667.303 ops/s
Iteration  26: 1054139.399 ops/s
Iteration  27: 1052638.225 ops/s
Iteration  28: 1060996.405 ops/s
Iteration  29: 1055633.137 ops/s
Iteration  30: 1049442.290 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll":
  1055991.676 ±(99.9%) 2530.920 ops/s [Average]
  (min, avg, max) = (1049442.290, 1055991.676, 1064331.768), stdev = 3788.162
  CI (99.9%): [1053460.756, 1058522.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  1055991.676 ± 2530.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713171.045 ops/s
# Warmup Iteration   2: 768997.389 ops/s
# Warmup Iteration   3: 1012255.099 ops/s
# Warmup Iteration   4: 1010245.601 ops/s
# Warmup Iteration   5: 1008502.699 ops/s
# Warmup Iteration   6: 1007067.734 ops/s
# Warmup Iteration   7: 1008003.409 ops/s
# Warmup Iteration   8: 1014432.509 ops/s
# Warmup Iteration   9: 1011602.963 ops/s
# Warmup Iteration  10: 934153.452 ops/s
# Warmup Iteration  11: 920396.932 ops/s
# Warmup Iteration  12: 1004364.110 ops/s
# Warmup Iteration  13: 1009268.141 ops/s
# Warmup Iteration  14: 1011226.190 ops/s
# Warmup Iteration  15: 1012953.690 ops/s
# Warmup Iteration  16: 1012695.507 ops/s
# Warmup Iteration  17: 1079208.982 ops/s
# Warmup Iteration  18: 1073552.765 ops/s
# Warmup Iteration  19: 1072568.190 ops/s
# Warmup Iteration  20: 1077015.707 ops/s
# Warmup Iteration  21: 1076738.930 ops/s
# Warmup Iteration  22: 1078076.965 ops/s
# Warmup Iteration  23: 1075820.947 ops/s
# Warmup Iteration  24: 1074757.201 ops/s
# Warmup Iteration  25: 1077141.368 ops/s
# Warmup Iteration  26: 1077785.475 ops/s
# Warmup Iteration  27: 1075765.893 ops/s
# Warmup Iteration  28: 1073886.068 ops/s
# Warmup Iteration  29: 1077596.109 ops/s
# Warmup Iteration  30: 1071482.524 ops/s
Iteration   1: 1079485.029 ops/s
Iteration   2: 1078206.531 ops/s
Iteration   3: 1074904.584 ops/s
Iteration   4: 1075240.886 ops/s
Iteration   5: 1067927.136 ops/s
Iteration   6: 1070831.017 ops/s
Iteration   7: 1077398.158 ops/s
Iteration   8: 1065965.183 ops/s
Iteration   9: 1078201.195 ops/s
Iteration  10: 1082666.020 ops/s
Iteration  11: 1071327.266 ops/s
Iteration  12: 1077826.038 ops/s
Iteration  13: 1078379.750 ops/s
Iteration  14: 1077636.704 ops/s
Iteration  15: 1073611.950 ops/s
Iteration  16: 1074648.116 ops/s
Iteration  17: 1073936.741 ops/s
Iteration  18: 1079978.237 ops/s
Iteration  19: 1080995.717 ops/s
Iteration  20: 1071430.210 ops/s
Iteration  21: 1078520.258 ops/s
Iteration  22: 1076162.508 ops/s
Iteration  23: 1080466.815 ops/s
Iteration  24: 1080361.823 ops/s
Iteration  25: 1081010.351 ops/s
Iteration  26: 1081055.169 ops/s
Iteration  27: 1070163.557 ops/s
Iteration  28: 1073497.094 ops/s
Iteration  29: 1073449.913 ops/s
Iteration  30: 1073006.609 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_without":
  1075943.019 ±(99.9%) 2832.627 ops/s [Average]
  (min, avg, max) = (1065965.183, 1075943.019, 1082666.020), stdev = 4239.743
  CI (99.9%): [1073110.392, 1078775.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  1075943.019 ± 2832.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 684065.835 ops/s
# Warmup Iteration   2: 755302.895 ops/s
# Warmup Iteration   3: 989427.459 ops/s
# Warmup Iteration   4: 973761.650 ops/s
# Warmup Iteration   5: 979538.366 ops/s
# Warmup Iteration   6: 984187.964 ops/s
# Warmup Iteration   7: 981378.690 ops/s
# Warmup Iteration   8: 974870.745 ops/s
# Warmup Iteration   9: 982185.586 ops/s
# Warmup Iteration  10: 879383.912 ops/s
# Warmup Iteration  11: 915978.045 ops/s
# Warmup Iteration  12: 983160.133 ops/s
# Warmup Iteration  13: 981175.726 ops/s
# Warmup Iteration  14: 977321.104 ops/s
# Warmup Iteration  15: 970754.730 ops/s
# Warmup Iteration  16: 982184.856 ops/s
# Warmup Iteration  17: 1035089.861 ops/s
# Warmup Iteration  18: 1044337.291 ops/s
# Warmup Iteration  19: 1041809.496 ops/s
# Warmup Iteration  20: 1035489.092 ops/s
# Warmup Iteration  21: 1036640.676 ops/s
# Warmup Iteration  22: 1042164.736 ops/s
# Warmup Iteration  23: 1040186.908 ops/s
# Warmup Iteration  24: 1036144.445 ops/s
# Warmup Iteration  25: 1037870.150 ops/s
# Warmup Iteration  26: 1038435.685 ops/s
# Warmup Iteration  27: 1040247.516 ops/s
# Warmup Iteration  28: 1038614.065 ops/s
# Warmup Iteration  29: 1039298.893 ops/s
# Warmup Iteration  30: 1042336.026 ops/s
Iteration   1: 1040607.556 ops/s
Iteration   2: 1033004.239 ops/s
Iteration   3: 1037661.527 ops/s
Iteration   4: 1043354.573 ops/s
Iteration   5: 1034214.035 ops/s
Iteration   6: 1040884.370 ops/s
Iteration   7: 1040132.904 ops/s
Iteration   8: 1031337.189 ops/s
Iteration   9: 1040385.010 ops/s
Iteration  10: 1041036.665 ops/s
Iteration  11: 1033033.434 ops/s
Iteration  12: 1037201.301 ops/s
Iteration  13: 1038201.796 ops/s
Iteration  14: 1037489.494 ops/s
Iteration  15: 1036842.402 ops/s
Iteration  16: 1043266.692 ops/s
Iteration  17: 1038730.235 ops/s
Iteration  18: 1040059.313 ops/s
Iteration  19: 1044184.527 ops/s
Iteration  20: 1037222.076 ops/s
Iteration  21: 1037840.891 ops/s
Iteration  22: 1028210.261 ops/s
Iteration  23: 1044427.368 ops/s
Iteration  24: 1043225.402 ops/s
Iteration  25: 1036139.939 ops/s
Iteration  26: 1046169.106 ops/s
Iteration  27: 1039812.986 ops/s
Iteration  28: 1046318.391 ops/s
Iteration  29: 1040896.344 ops/s
Iteration  30: 1033719.080 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  1038853.637 ±(99.9%) 2929.024 ops/s [Average]
  (min, avg, max) = (1028210.261, 1038853.637, 1046318.391), stdev = 4384.026
  CI (99.9%): [1035924.613, 1041782.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  1038853.637 ± 2929.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 367516.327 ops/s
# Warmup Iteration   2: 435755.503 ops/s
# Warmup Iteration   3: 619685.851 ops/s
# Warmup Iteration   4: 622037.428 ops/s
# Warmup Iteration   5: 618087.958 ops/s
# Warmup Iteration   6: 621270.873 ops/s
# Warmup Iteration   7: 620201.176 ops/s
# Warmup Iteration   8: 621815.537 ops/s
# Warmup Iteration   9: 621260.680 ops/s
# Warmup Iteration  10: 552263.698 ops/s
# Warmup Iteration  11: 576317.015 ops/s
# Warmup Iteration  12: 621341.387 ops/s
# Warmup Iteration  13: 624681.896 ops/s
# Warmup Iteration  14: 623488.093 ops/s
# Warmup Iteration  15: 625075.315 ops/s
# Warmup Iteration  16: 622667.790 ops/s
# Warmup Iteration  17: 622392.749 ops/s
# Warmup Iteration  18: 623183.666 ops/s
# Warmup Iteration  19: 617720.111 ops/s
# Warmup Iteration  20: 627004.789 ops/s
# Warmup Iteration  21: 621330.388 ops/s
# Warmup Iteration  22: 621806.351 ops/s
# Warmup Iteration  23: 622377.325 ops/s
# Warmup Iteration  24: 620465.240 ops/s
# Warmup Iteration  25: 622172.513 ops/s
# Warmup Iteration  26: 621636.577 ops/s
# Warmup Iteration  27: 622439.909 ops/s
# Warmup Iteration  28: 622590.816 ops/s
# Warmup Iteration  29: 623985.604 ops/s
# Warmup Iteration  30: 622530.848 ops/s
Iteration   1: 624704.737 ops/s
Iteration   2: 618937.548 ops/s
Iteration   3: 622149.269 ops/s
Iteration   4: 618899.620 ops/s
Iteration   5: 618522.708 ops/s
Iteration   6: 620309.110 ops/s
Iteration   7: 621781.023 ops/s
Iteration   8: 623211.859 ops/s
Iteration   9: 621621.652 ops/s
Iteration  10: 624614.029 ops/s
Iteration  11: 622810.819 ops/s
Iteration  12: 621617.044 ops/s
Iteration  13: 622105.147 ops/s
Iteration  14: 623226.470 ops/s
Iteration  15: 622596.086 ops/s
Iteration  16: 621338.513 ops/s
Iteration  17: 624533.062 ops/s
Iteration  18: 622674.964 ops/s
Iteration  19: 619810.959 ops/s
Iteration  20: 623679.589 ops/s
Iteration  21: 621956.789 ops/s
Iteration  22: 624378.677 ops/s
Iteration  23: 621650.391 ops/s
Iteration  24: 622876.754 ops/s
Iteration  25: 619679.958 ops/s
Iteration  26: 620985.706 ops/s
Iteration  27: 620585.966 ops/s
Iteration  28: 621373.275 ops/s
Iteration  29: 618436.075 ops/s
Iteration  30: 620446.815 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zip":
  621717.154 ±(99.9%) 1212.025 ops/s [Average]
  (min, avg, max) = (618436.075, 621717.154, 624704.737), stdev = 1814.102
  CI (99.9%): [620505.129, 622929.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  621717.154 ± 1212.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 590080.950 ops/s
# Warmup Iteration   2: 746266.090 ops/s
# Warmup Iteration   3: 987857.008 ops/s
# Warmup Iteration   4: 998837.297 ops/s
# Warmup Iteration   5: 998539.915 ops/s
# Warmup Iteration   6: 998216.418 ops/s
# Warmup Iteration   7: 1000093.836 ops/s
# Warmup Iteration   8: 998862.664 ops/s
# Warmup Iteration   9: 825927.135 ops/s
# Warmup Iteration  10: 1003338.139 ops/s
# Warmup Iteration  11: 1002755.566 ops/s
# Warmup Iteration  12: 1000344.051 ops/s
# Warmup Iteration  13: 999750.069 ops/s
# Warmup Iteration  14: 1003219.148 ops/s
# Warmup Iteration  15: 997218.073 ops/s
# Warmup Iteration  16: 998463.740 ops/s
# Warmup Iteration  17: 998197.181 ops/s
# Warmup Iteration  18: 1002692.709 ops/s
# Warmup Iteration  19: 999501.569 ops/s
# Warmup Iteration  20: 998657.907 ops/s
# Warmup Iteration  21: 1001589.872 ops/s
# Warmup Iteration  22: 998733.387 ops/s
# Warmup Iteration  23: 1001124.394 ops/s
# Warmup Iteration  24: 1000337.417 ops/s
# Warmup Iteration  25: 1002402.035 ops/s
# Warmup Iteration  26: 999154.953 ops/s
# Warmup Iteration  27: 1000141.404 ops/s
# Warmup Iteration  28: 999936.823 ops/s
# Warmup Iteration  29: 1000800.394 ops/s
# Warmup Iteration  30: 1002095.675 ops/s
Iteration   1: 997964.089 ops/s
Iteration   2: 1002803.334 ops/s
Iteration   3: 1007049.562 ops/s
Iteration   4: 998525.154 ops/s
Iteration   5: 997430.361 ops/s
Iteration   6: 1000914.174 ops/s
Iteration   7: 995718.013 ops/s
Iteration   8: 1004782.736 ops/s
Iteration   9: 1000375.384 ops/s
Iteration  10: 1006549.763 ops/s
Iteration  11: 1001520.393 ops/s
Iteration  12: 1001775.373 ops/s
Iteration  13: 999220.393 ops/s
Iteration  14: 998740.467 ops/s
Iteration  15: 998228.788 ops/s
Iteration  16: 1000483.761 ops/s
Iteration  17: 1000780.278 ops/s
Iteration  18: 996858.181 ops/s
Iteration  19: 999454.328 ops/s
Iteration  20: 1000913.879 ops/s
Iteration  21: 1001673.309 ops/s
Iteration  22: 1003214.910 ops/s
Iteration  23: 1001381.381 ops/s
Iteration  24: 995086.607 ops/s
Iteration  25: 1000065.886 ops/s
Iteration  26: 999818.417 ops/s
Iteration  27: 996511.915 ops/s
Iteration  28: 1000010.632 ops/s
Iteration  29: 999641.065 ops/s
Iteration  30: 997728.420 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  1000174.032 ±(99.9%) 1897.738 ops/s [Average]
  (min, avg, max) = (995086.607, 1000174.032, 1007049.562), stdev = 2840.445
  CI (99.9%): [998276.294, 1002071.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CollectionAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1000174.032 ± 1897.738  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_adapt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_adapt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1794051.058 ops/s
# Warmup Iteration   2: 1988090.103 ops/s
# Warmup Iteration   3: 2679062.541 ops/s
# Warmup Iteration   4: 2682801.360 ops/s
# Warmup Iteration   5: 2660666.582 ops/s
# Warmup Iteration   6: 2670584.752 ops/s
# Warmup Iteration   7: 2673624.071 ops/s
# Warmup Iteration   8: 2663194.522 ops/s
# Warmup Iteration   9: 2666760.019 ops/s
# Warmup Iteration  10: 2623304.430 ops/s
# Warmup Iteration  11: 2244000.077 ops/s
# Warmup Iteration  12: 2680034.082 ops/s
# Warmup Iteration  13: 2684881.149 ops/s
# Warmup Iteration  14: 2691452.087 ops/s
# Warmup Iteration  15: 2680729.546 ops/s
# Warmup Iteration  16: 2676467.261 ops/s
# Warmup Iteration  17: 2681015.122 ops/s
# Warmup Iteration  18: 2684413.368 ops/s
# Warmup Iteration  19: 2678025.078 ops/s
# Warmup Iteration  20: 2676216.684 ops/s
# Warmup Iteration  21: 2678658.812 ops/s
# Warmup Iteration  22: 2683118.034 ops/s
# Warmup Iteration  23: 2680833.463 ops/s
# Warmup Iteration  24: 2684163.380 ops/s
# Warmup Iteration  25: 2687581.288 ops/s
# Warmup Iteration  26: 2677756.320 ops/s
# Warmup Iteration  27: 2683854.956 ops/s
# Warmup Iteration  28: 2672565.709 ops/s
# Warmup Iteration  29: 2679725.531 ops/s
# Warmup Iteration  30: 2678407.139 ops/s
Iteration   1: 2675280.900 ops/s
Iteration   2: 2677647.514 ops/s
Iteration   3: 2673638.127 ops/s
Iteration   4: 2669399.529 ops/s
Iteration   5: 2675769.547 ops/s
Iteration   6: 2683394.911 ops/s
Iteration   7: 2692201.726 ops/s
Iteration   8: 2680698.422 ops/s
Iteration   9: 2682470.926 ops/s
Iteration  10: 2673836.446 ops/s
Iteration  11: 2677914.686 ops/s
Iteration  12: 2677625.254 ops/s
Iteration  13: 2682653.527 ops/s
Iteration  14: 2673773.951 ops/s
Iteration  15: 2694411.139 ops/s
Iteration  16: 2689226.114 ops/s
Iteration  17: 2680109.492 ops/s
Iteration  18: 2671792.640 ops/s
Iteration  19: 2681996.739 ops/s
Iteration  20: 2680747.190 ops/s
Iteration  21: 2677441.660 ops/s
Iteration  22: 2679766.556 ops/s
Iteration  23: 2673123.747 ops/s
Iteration  24: 2689536.469 ops/s
Iteration  25: 2680594.922 ops/s
Iteration  26: 2670675.742 ops/s
Iteration  27: 2686824.444 ops/s
Iteration  28: 2674003.065 ops/s
Iteration  29: 2686815.850 ops/s
Iteration  30: 2673541.615 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_adapt":
  2679563.762 ±(99.9%) 4335.486 ops/s [Average]
  (min, avg, max) = (2669399.529, 2679563.762, 2694411.139), stdev = 6489.151
  CI (99.9%): [2675228.276, 2683899.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_adapt  thrpt   30  2679563.762 ± 4335.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1520737.782 ops/s
# Warmup Iteration   2: 3701415.307 ops/s
# Warmup Iteration   3: 3793172.877 ops/s
# Warmup Iteration   4: 3110304.691 ops/s
# Warmup Iteration   5: 3792210.451 ops/s
# Warmup Iteration   6: 3782138.027 ops/s
# Warmup Iteration   7: 3784632.163 ops/s
# Warmup Iteration   8: 3783546.577 ops/s
# Warmup Iteration   9: 3783831.342 ops/s
# Warmup Iteration  10: 3791728.415 ops/s
# Warmup Iteration  11: 3805633.433 ops/s
# Warmup Iteration  12: 3797910.238 ops/s
# Warmup Iteration  13: 3790807.977 ops/s
# Warmup Iteration  14: 3790392.316 ops/s
# Warmup Iteration  15: 3759541.619 ops/s
# Warmup Iteration  16: 3765108.400 ops/s
# Warmup Iteration  17: 3779591.021 ops/s
# Warmup Iteration  18: 3789623.884 ops/s
# Warmup Iteration  19: 3786930.599 ops/s
# Warmup Iteration  20: 3781835.973 ops/s
# Warmup Iteration  21: 3785677.637 ops/s
# Warmup Iteration  22: 3770346.293 ops/s
# Warmup Iteration  23: 3781082.964 ops/s
# Warmup Iteration  24: 3775256.893 ops/s
# Warmup Iteration  25: 3778800.774 ops/s
# Warmup Iteration  26: 3788825.806 ops/s
# Warmup Iteration  27: 3782598.448 ops/s
# Warmup Iteration  28: 3786998.841 ops/s
# Warmup Iteration  29: 3784570.202 ops/s
# Warmup Iteration  30: 3771001.683 ops/s
Iteration   1: 3787464.442 ops/s
Iteration   2: 3773523.891 ops/s
Iteration   3: 3758206.720 ops/s
Iteration   4: 3779302.800 ops/s
Iteration   5: 3765668.005 ops/s
Iteration   6: 3781861.426 ops/s
Iteration   7: 3781167.112 ops/s
Iteration   8: 3789651.260 ops/s
Iteration   9: 3790221.374 ops/s
Iteration  10: 3767150.869 ops/s
Iteration  11: 3794488.706 ops/s
Iteration  12: 3785691.628 ops/s
Iteration  13: 3794641.668 ops/s
Iteration  14: 3799557.827 ops/s
Iteration  15: 3774006.349 ops/s
Iteration  16: 3778386.863 ops/s
Iteration  17: 3787379.711 ops/s
Iteration  18: 3772025.540 ops/s
Iteration  19: 3782574.329 ops/s
Iteration  20: 3785158.333 ops/s
Iteration  21: 3785622.128 ops/s
Iteration  22: 3779012.361 ops/s
Iteration  23: 3792846.602 ops/s
Iteration  24: 3796361.396 ops/s
Iteration  25: 3779519.032 ops/s
Iteration  26: 3792897.460 ops/s
Iteration  27: 3806006.916 ops/s
Iteration  28: 3791416.517 ops/s
Iteration  29: 3799439.577 ops/s
Iteration  30: 3786151.962 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAll":
  3784580.094 ±(99.9%) 7234.280 ops/s [Average]
  (min, avg, max) = (3758206.720, 3784580.094, 3806006.916), stdev = 10827.931
  CI (99.9%): [3777345.814, 3791814.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_addAll  thrpt   30  3784580.094 ± 7234.280  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635407.606 ops/s
# Warmup Iteration   2: 1604770.064 ops/s
# Warmup Iteration   3: 1606844.846 ops/s
# Warmup Iteration   4: 1316374.595 ops/s
# Warmup Iteration   5: 1608491.852 ops/s
# Warmup Iteration   6: 1607439.489 ops/s
# Warmup Iteration   7: 1603720.673 ops/s
# Warmup Iteration   8: 1605305.389 ops/s
# Warmup Iteration   9: 1600849.131 ops/s
# Warmup Iteration  10: 1599346.705 ops/s
# Warmup Iteration  11: 1602781.477 ops/s
# Warmup Iteration  12: 1590236.372 ops/s
# Warmup Iteration  13: 1607685.303 ops/s
# Warmup Iteration  14: 1604356.036 ops/s
# Warmup Iteration  15: 1604395.101 ops/s
# Warmup Iteration  16: 1600221.460 ops/s
# Warmup Iteration  17: 1602878.425 ops/s
# Warmup Iteration  18: 1607835.963 ops/s
# Warmup Iteration  19: 1606108.490 ops/s
# Warmup Iteration  20: 1605498.939 ops/s
# Warmup Iteration  21: 1602614.505 ops/s
# Warmup Iteration  22: 1604745.491 ops/s
# Warmup Iteration  23: 1607820.595 ops/s
# Warmup Iteration  24: 1603199.880 ops/s
# Warmup Iteration  25: 1604193.224 ops/s
# Warmup Iteration  26: 1601191.850 ops/s
# Warmup Iteration  27: 1609727.492 ops/s
# Warmup Iteration  28: 1603538.600 ops/s
# Warmup Iteration  29: 1601161.228 ops/s
# Warmup Iteration  30: 1591825.467 ops/s
Iteration   1: 1599416.642 ops/s
Iteration   2: 1608239.893 ops/s
Iteration   3: 1598293.372 ops/s
Iteration   4: 1606891.901 ops/s
Iteration   5: 1600095.203 ops/s
Iteration   6: 1596872.809 ops/s
Iteration   7: 1604174.846 ops/s
Iteration   8: 1603615.418 ops/s
Iteration   9: 1606537.766 ops/s
Iteration  10: 1611629.675 ops/s
Iteration  11: 1601310.042 ops/s
Iteration  12: 1598181.666 ops/s
Iteration  13: 1603303.028 ops/s
Iteration  14: 1604045.981 ops/s
Iteration  15: 1607159.479 ops/s
Iteration  16: 1603625.100 ops/s
Iteration  17: 1602673.570 ops/s
Iteration  18: 1601514.345 ops/s
Iteration  19: 1601996.242 ops/s
Iteration  20: 1604122.611 ops/s
Iteration  21: 1605365.179 ops/s
Iteration  22: 1599618.913 ops/s
Iteration  23: 1609977.329 ops/s
Iteration  24: 1614030.335 ops/s
Iteration  25: 1598710.061 ops/s
Iteration  26: 1611730.204 ops/s
Iteration  27: 1598563.994 ops/s
Iteration  28: 1598535.549 ops/s
Iteration  29: 1606391.691 ops/s
Iteration  30: 1602553.426 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_addAllIterable":
  1603639.209 ±(99.9%) 2995.369 ops/s [Average]
  (min, avg, max) = (1596872.809, 1603639.209, 1614030.335), stdev = 4483.327
  CI (99.9%): [1600643.840, 1606634.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_addAllIterable  thrpt   30  1603639.209 ± 2995.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1450155.313 ops/s
# Warmup Iteration   2: 3287718.663 ops/s
# Warmup Iteration   3: 3365837.901 ops/s
# Warmup Iteration   4: 2877949.002 ops/s
# Warmup Iteration   5: 3308444.941 ops/s
# Warmup Iteration   6: 3362874.169 ops/s
# Warmup Iteration   7: 3375857.617 ops/s
# Warmup Iteration   8: 3368184.941 ops/s
# Warmup Iteration   9: 3384711.971 ops/s
# Warmup Iteration  10: 3388622.275 ops/s
# Warmup Iteration  11: 3373872.070 ops/s
# Warmup Iteration  12: 3380169.196 ops/s
# Warmup Iteration  13: 3401033.729 ops/s
# Warmup Iteration  14: 3387524.439 ops/s
# Warmup Iteration  15: 3343747.056 ops/s
# Warmup Iteration  16: 3396926.143 ops/s
# Warmup Iteration  17: 3319704.220 ops/s
# Warmup Iteration  18: 3323748.949 ops/s
# Warmup Iteration  19: 3304584.332 ops/s
# Warmup Iteration  20: 3304355.909 ops/s
# Warmup Iteration  21: 3339495.690 ops/s
# Warmup Iteration  22: 3331421.995 ops/s
# Warmup Iteration  23: 3303636.655 ops/s
# Warmup Iteration  24: 3322118.637 ops/s
# Warmup Iteration  25: 3337221.555 ops/s
# Warmup Iteration  26: 3305415.973 ops/s
# Warmup Iteration  27: 3316677.544 ops/s
# Warmup Iteration  28: 3347780.293 ops/s
# Warmup Iteration  29: 3315971.447 ops/s
# Warmup Iteration  30: 3318231.828 ops/s
Iteration   1: 3265201.013 ops/s
Iteration   2: 3312870.549 ops/s
Iteration   3: 3288052.906 ops/s
Iteration   4: 3325352.817 ops/s
Iteration   5: 3339306.015 ops/s
Iteration   6: 3307292.207 ops/s
Iteration   7: 3299292.740 ops/s
Iteration   8: 3311237.212 ops/s
Iteration   9: 3289685.546 ops/s
Iteration  10: 3309145.690 ops/s
Iteration  11: 3269138.276 ops/s
Iteration  12: 3334752.668 ops/s
Iteration  13: 3294159.230 ops/s
Iteration  14: 3327713.545 ops/s
Iteration  15: 3280123.623 ops/s
Iteration  16: 3347670.946 ops/s
Iteration  17: 3318630.122 ops/s
Iteration  18: 3282854.063 ops/s
Iteration  19: 3302227.916 ops/s
Iteration  20: 3331978.230 ops/s
Iteration  21: 3286662.683 ops/s
Iteration  22: 3346305.272 ops/s
Iteration  23: 3337368.683 ops/s
Iteration  24: 3313376.303 ops/s
Iteration  25: 3332065.870 ops/s
Iteration  26: 3342984.335 ops/s
Iteration  27: 3344565.512 ops/s
Iteration  28: 3382287.371 ops/s
Iteration  29: 3299394.933 ops/s
Iteration  30: 3307662.940 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByMutating":
  3314311.974 ±(99.9%) 17901.713 ops/s [Average]
  (min, avg, max) = (3265201.013, 3314311.974, 3382287.371), stdev = 26794.443
  CI (99.9%): [3296410.261, 3332213.687] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  3314311.974 ± 17901.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1374577.287 ops/s
# Warmup Iteration   2: 3270617.804 ops/s
# Warmup Iteration   3: 3332867.495 ops/s
# Warmup Iteration   4: 2733021.635 ops/s
# Warmup Iteration   5: 3289106.224 ops/s
# Warmup Iteration   6: 3332844.962 ops/s
# Warmup Iteration   7: 3343733.852 ops/s
# Warmup Iteration   8: 3328493.294 ops/s
# Warmup Iteration   9: 3353721.236 ops/s
# Warmup Iteration  10: 3338842.212 ops/s
# Warmup Iteration  11: 3280643.026 ops/s
# Warmup Iteration  12: 3323097.298 ops/s
# Warmup Iteration  13: 3314836.980 ops/s
# Warmup Iteration  14: 3344830.123 ops/s
# Warmup Iteration  15: 3343284.849 ops/s
# Warmup Iteration  16: 3311498.804 ops/s
# Warmup Iteration  17: 3339074.498 ops/s
# Warmup Iteration  18: 3338616.835 ops/s
# Warmup Iteration  19: 3321394.077 ops/s
# Warmup Iteration  20: 3344020.640 ops/s
# Warmup Iteration  21: 3315617.274 ops/s
# Warmup Iteration  22: 3324999.292 ops/s
# Warmup Iteration  23: 3315455.564 ops/s
# Warmup Iteration  24: 3338857.303 ops/s
# Warmup Iteration  25: 3315484.007 ops/s
# Warmup Iteration  26: 3332887.580 ops/s
# Warmup Iteration  27: 3345710.739 ops/s
# Warmup Iteration  28: 3319999.926 ops/s
# Warmup Iteration  29: 3364369.215 ops/s
# Warmup Iteration  30: 3350251.435 ops/s
Iteration   1: 3322962.277 ops/s
Iteration   2: 3358290.608 ops/s
Iteration   3: 3301010.731 ops/s
Iteration   4: 3301572.946 ops/s
Iteration   5: 3355407.698 ops/s
Iteration   6: 3287059.752 ops/s
Iteration   7: 3368608.821 ops/s
Iteration   8: 3321745.070 ops/s
Iteration   9: 3354598.996 ops/s
Iteration  10: 3352171.550 ops/s
Iteration  11: 3295049.441 ops/s
Iteration  12: 3336167.371 ops/s
Iteration  13: 3352933.022 ops/s
Iteration  14: 3305386.848 ops/s
Iteration  15: 3335498.842 ops/s
Iteration  16: 3338456.062 ops/s
Iteration  17: 3341518.974 ops/s
Iteration  18: 3301463.463 ops/s
Iteration  19: 3324007.022 ops/s
Iteration  20: 3294563.340 ops/s
Iteration  21: 3360522.745 ops/s
Iteration  22: 3285455.245 ops/s
Iteration  23: 3371819.806 ops/s
Iteration  24: 3282715.112 ops/s
Iteration  25: 3310941.757 ops/s
Iteration  26: 3338809.119 ops/s
Iteration  27: 3343100.805 ops/s
Iteration  28: 3333292.967 ops/s
Iteration  29: 3275028.900 ops/s
Iteration  30: 3317716.967 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_aggregateByNonMutating":
  3325595.875 ±(99.9%) 18605.567 ops/s [Average]
  (min, avg, max) = (3275028.900, 3325595.875, 3371819.806), stdev = 27847.939
  CI (99.9%): [3306990.308, 3344201.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  3325595.875 ± 18605.567  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5117383.760 ops/s
# Warmup Iteration   2: 11147512.770 ops/s
# Warmup Iteration   3: 11104618.556 ops/s
# Warmup Iteration   4: 9307897.223 ops/s
# Warmup Iteration   5: 11169091.271 ops/s
# Warmup Iteration   6: 11138485.178 ops/s
# Warmup Iteration   7: 11121960.460 ops/s
# Warmup Iteration   8: 11143139.686 ops/s
# Warmup Iteration   9: 11105948.599 ops/s
# Warmup Iteration  10: 11125342.716 ops/s
# Warmup Iteration  11: 11142638.068 ops/s
# Warmup Iteration  12: 11119795.244 ops/s
# Warmup Iteration  13: 11127002.394 ops/s
# Warmup Iteration  14: 11072858.610 ops/s
# Warmup Iteration  15: 11105851.192 ops/s
# Warmup Iteration  16: 11078354.314 ops/s
# Warmup Iteration  17: 11137406.003 ops/s
# Warmup Iteration  18: 11123985.298 ops/s
# Warmup Iteration  19: 11123339.452 ops/s
# Warmup Iteration  20: 11109681.788 ops/s
# Warmup Iteration  21: 11119558.033 ops/s
# Warmup Iteration  22: 11103538.520 ops/s
# Warmup Iteration  23: 11144485.315 ops/s
# Warmup Iteration  24: 11130534.121 ops/s
# Warmup Iteration  25: 11116352.597 ops/s
# Warmup Iteration  26: 11150820.775 ops/s
# Warmup Iteration  27: 11148672.993 ops/s
# Warmup Iteration  28: 11087447.334 ops/s
# Warmup Iteration  29: 11122362.969 ops/s
# Warmup Iteration  30: 11072836.131 ops/s
Iteration   1: 11182927.166 ops/s
Iteration   2: 11173072.012 ops/s
Iteration   3: 11171403.653 ops/s
Iteration   4: 11108555.310 ops/s
Iteration   5: 11156992.023 ops/s
Iteration   6: 11136762.614 ops/s
Iteration   7: 11140375.400 ops/s
Iteration   8: 11041470.932 ops/s
Iteration   9: 11133094.477 ops/s
Iteration  10: 11092644.522 ops/s
Iteration  11: 11170181.664 ops/s
Iteration  12: 11163491.284 ops/s
Iteration  13: 11184094.874 ops/s
Iteration  14: 11121904.419 ops/s
Iteration  15: 11188114.352 ops/s
Iteration  16: 11103109.472 ops/s
Iteration  17: 11117065.412 ops/s
Iteration  18: 11103355.405 ops/s
Iteration  19: 11146580.460 ops/s
Iteration  20: 11096440.191 ops/s
Iteration  21: 11159782.652 ops/s
Iteration  22: 11185488.496 ops/s
Iteration  23: 11159351.408 ops/s
Iteration  24: 11117769.743 ops/s
Iteration  25: 11107072.784 ops/s
Iteration  26: 11053149.136 ops/s
Iteration  27: 11085321.294 ops/s
Iteration  28: 11126635.819 ops/s
Iteration  29: 11126753.133 ops/s
Iteration  30: 11100911.837 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfy":
  11131795.731 ±(99.9%) 25797.857 ops/s [Average]
  (min, avg, max) = (11041470.932, 11131795.731, 11188114.352), stdev = 38613.020
  CI (99.9%): [11105997.875, 11157593.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_allSatisfy  thrpt   30  11131795.731 ± 25797.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5269358.434 ops/s
# Warmup Iteration   2: 11026134.386 ops/s
# Warmup Iteration   3: 10999943.561 ops/s
# Warmup Iteration   4: 9324433.608 ops/s
# Warmup Iteration   5: 11076209.378 ops/s
# Warmup Iteration   6: 10985648.278 ops/s
# Warmup Iteration   7: 11052201.818 ops/s
# Warmup Iteration   8: 11049213.668 ops/s
# Warmup Iteration   9: 11035445.300 ops/s
# Warmup Iteration  10: 11068584.368 ops/s
# Warmup Iteration  11: 11034090.739 ops/s
# Warmup Iteration  12: 11049369.555 ops/s
# Warmup Iteration  13: 11072111.374 ops/s
# Warmup Iteration  14: 10996985.743 ops/s
# Warmup Iteration  15: 11036034.936 ops/s
# Warmup Iteration  16: 11010158.165 ops/s
# Warmup Iteration  17: 11039553.928 ops/s
# Warmup Iteration  18: 11051363.443 ops/s
# Warmup Iteration  19: 11032656.716 ops/s
# Warmup Iteration  20: 11035997.293 ops/s
# Warmup Iteration  21: 11023829.760 ops/s
# Warmup Iteration  22: 11046226.028 ops/s
# Warmup Iteration  23: 10996141.184 ops/s
# Warmup Iteration  24: 11058650.524 ops/s
# Warmup Iteration  25: 11071314.839 ops/s
# Warmup Iteration  26: 11031010.698 ops/s
# Warmup Iteration  27: 11050695.786 ops/s
# Warmup Iteration  28: 10956646.739 ops/s
# Warmup Iteration  29: 11023082.550 ops/s
# Warmup Iteration  30: 11089134.505 ops/s
Iteration   1: 11030729.581 ops/s
Iteration   2: 10985884.326 ops/s
Iteration   3: 11046487.420 ops/s
Iteration   4: 11062802.779 ops/s
Iteration   5: 11074399.673 ops/s
Iteration   6: 10983615.951 ops/s
Iteration   7: 11084184.201 ops/s
Iteration   8: 11016809.362 ops/s
Iteration   9: 11102533.738 ops/s
Iteration  10: 11055934.526 ops/s
Iteration  11: 11049609.045 ops/s
Iteration  12: 11091225.689 ops/s
Iteration  13: 11047347.256 ops/s
Iteration  14: 11014481.172 ops/s
Iteration  15: 11076391.645 ops/s
Iteration  16: 11081393.516 ops/s
Iteration  17: 11075365.289 ops/s
Iteration  18: 11037240.498 ops/s
Iteration  19: 11094185.012 ops/s
Iteration  20: 11048816.259 ops/s
Iteration  21: 11026052.196 ops/s
Iteration  22: 11048337.192 ops/s
Iteration  23: 10997438.562 ops/s
Iteration  24: 10969714.919 ops/s
Iteration  25: 11050354.608 ops/s
Iteration  26: 11036771.867 ops/s
Iteration  27: 10978288.631 ops/s
Iteration  28: 11014374.347 ops/s
Iteration  29: 11062902.848 ops/s
Iteration  30: 11048136.870 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_allSatisfyWith":
  11043060.299 ±(99.9%) 23939.414 ops/s [Average]
  (min, avg, max) = (10969714.919, 11043060.299, 11102533.738), stdev = 35831.391
  CI (99.9%): [11019120.885, 11066999.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  11043060.299 ± 23939.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4502728.259 ops/s
# Warmup Iteration   2: 9514031.575 ops/s
# Warmup Iteration   3: 9493331.438 ops/s
# Warmup Iteration   4: 8217326.119 ops/s
# Warmup Iteration   5: 9785807.153 ops/s
# Warmup Iteration   6: 9786300.553 ops/s
# Warmup Iteration   7: 9764444.886 ops/s
# Warmup Iteration   8: 9742701.089 ops/s
# Warmup Iteration   9: 9784255.355 ops/s
# Warmup Iteration  10: 9774452.808 ops/s
# Warmup Iteration  11: 9787447.200 ops/s
# Warmup Iteration  12: 9709909.881 ops/s
# Warmup Iteration  13: 9740768.871 ops/s
# Warmup Iteration  14: 9803783.864 ops/s
# Warmup Iteration  15: 9805902.001 ops/s
# Warmup Iteration  16: 9802913.247 ops/s
# Warmup Iteration  17: 9607952.723 ops/s
# Warmup Iteration  18: 9622880.496 ops/s
# Warmup Iteration  19: 9576664.633 ops/s
# Warmup Iteration  20: 9578732.015 ops/s
# Warmup Iteration  21: 9648648.668 ops/s
# Warmup Iteration  22: 9603524.989 ops/s
# Warmup Iteration  23: 9646658.981 ops/s
# Warmup Iteration  24: 9625133.968 ops/s
# Warmup Iteration  25: 9640400.283 ops/s
# Warmup Iteration  26: 9634614.543 ops/s
# Warmup Iteration  27: 9593148.483 ops/s
# Warmup Iteration  28: 9597944.660 ops/s
# Warmup Iteration  29: 9559336.473 ops/s
# Warmup Iteration  30: 9599699.409 ops/s
Iteration   1: 9585212.979 ops/s
Iteration   2: 9664035.040 ops/s
Iteration   3: 9614922.940 ops/s
Iteration   4: 9634046.367 ops/s
Iteration   5: 9628121.888 ops/s
Iteration   6: 9620925.219 ops/s
Iteration   7: 9697285.614 ops/s
Iteration   8: 9634633.093 ops/s
Iteration   9: 9630229.712 ops/s
Iteration  10: 9622201.903 ops/s
Iteration  11: 9614727.380 ops/s
Iteration  12: 9649877.400 ops/s
Iteration  13: 9565333.349 ops/s
Iteration  14: 9629660.348 ops/s
Iteration  15: 9616313.970 ops/s
Iteration  16: 9607205.996 ops/s
Iteration  17: 9620107.193 ops/s
Iteration  18: 9609437.989 ops/s
Iteration  19: 9593935.401 ops/s
Iteration  20: 9599548.590 ops/s
Iteration  21: 9604771.836 ops/s
Iteration  22: 9619491.733 ops/s
Iteration  23: 9635127.436 ops/s
Iteration  24: 9570457.106 ops/s
Iteration  25: 9596430.558 ops/s
Iteration  26: 9624006.741 ops/s
Iteration  27: 9590574.590 ops/s
Iteration  28: 9666215.408 ops/s
Iteration  29: 9633010.363 ops/s
Iteration  30: 9635172.873 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfy":
  9620434.034 ±(99.9%) 18404.856 ops/s [Average]
  (min, avg, max) = (9565333.349, 9620434.034, 9697285.614), stdev = 27547.524
  CI (99.9%): [9602029.178, 9638838.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_anySatisfy  thrpt   30  9620434.034 ± 18404.856  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5242429.922 ops/s
# Warmup Iteration   2: 11122682.456 ops/s
# Warmup Iteration   3: 11182026.374 ops/s
# Warmup Iteration   4: 9398144.604 ops/s
# Warmup Iteration   5: 11175023.531 ops/s
# Warmup Iteration   6: 11164967.867 ops/s
# Warmup Iteration   7: 11153321.914 ops/s
# Warmup Iteration   8: 11179368.391 ops/s
# Warmup Iteration   9: 11170481.783 ops/s
# Warmup Iteration  10: 11127005.039 ops/s
# Warmup Iteration  11: 11190966.817 ops/s
# Warmup Iteration  12: 11198322.000 ops/s
# Warmup Iteration  13: 11146501.187 ops/s
# Warmup Iteration  14: 11194726.320 ops/s
# Warmup Iteration  15: 11171774.611 ops/s
# Warmup Iteration  16: 11181223.538 ops/s
# Warmup Iteration  17: 11177285.854 ops/s
# Warmup Iteration  18: 11231316.492 ops/s
# Warmup Iteration  19: 11144323.450 ops/s
# Warmup Iteration  20: 11159148.730 ops/s
# Warmup Iteration  21: 11206304.240 ops/s
# Warmup Iteration  22: 11188047.619 ops/s
# Warmup Iteration  23: 11185673.386 ops/s
# Warmup Iteration  24: 11178329.856 ops/s
# Warmup Iteration  25: 11163226.726 ops/s
# Warmup Iteration  26: 11112926.505 ops/s
# Warmup Iteration  27: 11110109.344 ops/s
# Warmup Iteration  28: 11160883.164 ops/s
# Warmup Iteration  29: 11189784.820 ops/s
# Warmup Iteration  30: 11138323.353 ops/s
Iteration   1: 11189469.825 ops/s
Iteration   2: 11167964.531 ops/s
Iteration   3: 11164966.934 ops/s
Iteration   4: 11148307.198 ops/s
Iteration   5: 11208163.651 ops/s
Iteration   6: 11212801.532 ops/s
Iteration   7: 11145814.160 ops/s
Iteration   8: 11185617.271 ops/s
Iteration   9: 11169783.256 ops/s
Iteration  10: 11182951.574 ops/s
Iteration  11: 11132716.905 ops/s
Iteration  12: 11228345.851 ops/s
Iteration  13: 11205245.653 ops/s
Iteration  14: 11205392.475 ops/s
Iteration  15: 11127196.989 ops/s
Iteration  16: 11146025.178 ops/s
Iteration  17: 11174280.536 ops/s
Iteration  18: 11197566.292 ops/s
Iteration  19: 11214425.136 ops/s
Iteration  20: 11211105.433 ops/s
Iteration  21: 11209493.805 ops/s
Iteration  22: 11099133.085 ops/s
Iteration  23: 11212774.954 ops/s
Iteration  24: 11171351.642 ops/s
Iteration  25: 11183282.660 ops/s
Iteration  26: 11147570.327 ops/s
Iteration  27: 11068381.963 ops/s
Iteration  28: 11202867.777 ops/s
Iteration  29: 11203633.707 ops/s
Iteration  30: 11194746.121 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_anySatisfyWith":
  11177045.881 ±(99.9%) 24830.274 ops/s [Average]
  (min, avg, max) = (11068381.963, 11177045.881, 11228345.851), stdev = 37164.788
  CI (99.9%): [11152215.607, 11201876.155] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  11177045.881 ± 24830.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1986711.360 ops/s
# Warmup Iteration   2: 4378705.939 ops/s
# Warmup Iteration   3: 3911612.524 ops/s
# Warmup Iteration   4: 4124365.001 ops/s
# Warmup Iteration   5: 4377170.696 ops/s
# Warmup Iteration   6: 4363278.114 ops/s
# Warmup Iteration   7: 4386830.258 ops/s
# Warmup Iteration   8: 4376771.129 ops/s
# Warmup Iteration   9: 4349937.192 ops/s
# Warmup Iteration  10: 4372141.938 ops/s
# Warmup Iteration  11: 4351270.537 ops/s
# Warmup Iteration  12: 4370257.485 ops/s
# Warmup Iteration  13: 4378139.672 ops/s
# Warmup Iteration  14: 4371992.400 ops/s
# Warmup Iteration  15: 4372044.578 ops/s
# Warmup Iteration  16: 4371727.217 ops/s
# Warmup Iteration  17: 4321085.210 ops/s
# Warmup Iteration  18: 4320123.807 ops/s
# Warmup Iteration  19: 4311611.445 ops/s
# Warmup Iteration  20: 4335075.574 ops/s
# Warmup Iteration  21: 4338948.040 ops/s
# Warmup Iteration  22: 4337455.237 ops/s
# Warmup Iteration  23: 4326077.042 ops/s
# Warmup Iteration  24: 4334294.028 ops/s
# Warmup Iteration  25: 4321737.403 ops/s
# Warmup Iteration  26: 4332749.264 ops/s
# Warmup Iteration  27: 4318215.721 ops/s
# Warmup Iteration  28: 4319280.422 ops/s
# Warmup Iteration  29: 4292499.043 ops/s
# Warmup Iteration  30: 4316224.768 ops/s
Iteration   1: 4329494.696 ops/s
Iteration   2: 4330470.007 ops/s
Iteration   3: 4311234.669 ops/s
Iteration   4: 4295978.627 ops/s
Iteration   5: 4328878.686 ops/s
Iteration   6: 4321975.766 ops/s
Iteration   7: 4298301.390 ops/s
Iteration   8: 4330835.652 ops/s
Iteration   9: 4340992.018 ops/s
Iteration  10: 4322655.844 ops/s
Iteration  11: 4341060.014 ops/s
Iteration  12: 4311130.506 ops/s
Iteration  13: 4337327.207 ops/s
Iteration  14: 4305333.714 ops/s
Iteration  15: 4313088.988 ops/s
Iteration  16: 4288022.709 ops/s
Iteration  17: 4310261.617 ops/s
Iteration  18: 4292828.135 ops/s
Iteration  19: 4316932.334 ops/s
Iteration  20: 4319132.901 ops/s
Iteration  21: 4298932.171 ops/s
Iteration  22: 4303697.424 ops/s
Iteration  23: 4318538.136 ops/s
Iteration  24: 4325009.076 ops/s
Iteration  25: 4253218.623 ops/s
Iteration  26: 4296060.244 ops/s
Iteration  27: 4318294.657 ops/s
Iteration  28: 4318283.781 ops/s
Iteration  29: 4330848.756 ops/s
Iteration  30: 4333016.290 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendString":
  4314727.821 ±(99.9%) 12500.652 ops/s [Average]
  (min, avg, max) = (4253218.623, 4314727.821, 4341060.014), stdev = 18710.388
  CI (99.9%): [4302227.170, 4327228.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_appendString  thrpt   30  4314727.821 ± 12500.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 112296.558 ops/s
# Warmup Iteration   2: 119124.388 ops/s
# Warmup Iteration   3: 133658.536 ops/s
# Warmup Iteration   4: 148587.171 ops/s
# Warmup Iteration   5: 148577.066 ops/s
# Warmup Iteration   6: 148303.220 ops/s
# Warmup Iteration   7: 147817.878 ops/s
# Warmup Iteration   8: 148734.914 ops/s
# Warmup Iteration   9: 148510.776 ops/s
# Warmup Iteration  10: 148577.483 ops/s
# Warmup Iteration  11: 148380.351 ops/s
# Warmup Iteration  12: 148146.148 ops/s
# Warmup Iteration  13: 148731.352 ops/s
# Warmup Iteration  14: 148326.840 ops/s
# Warmup Iteration  15: 134887.563 ops/s
# Warmup Iteration  16: 138183.861 ops/s
# Warmup Iteration  17: 155830.512 ops/s
# Warmup Iteration  18: 155405.621 ops/s
# Warmup Iteration  19: 155128.012 ops/s
# Warmup Iteration  20: 155547.501 ops/s
# Warmup Iteration  21: 154925.273 ops/s
# Warmup Iteration  22: 155409.963 ops/s
# Warmup Iteration  23: 155906.711 ops/s
# Warmup Iteration  24: 154432.833 ops/s
# Warmup Iteration  25: 155352.471 ops/s
# Warmup Iteration  26: 154496.963 ops/s
# Warmup Iteration  27: 155377.976 ops/s
# Warmup Iteration  28: 155374.187 ops/s
# Warmup Iteration  29: 154985.147 ops/s
# Warmup Iteration  30: 155020.769 ops/s
Iteration   1: 155599.764 ops/s
Iteration   2: 155912.752 ops/s
Iteration   3: 156023.244 ops/s
Iteration   4: 155136.735 ops/s
Iteration   5: 154726.526 ops/s
Iteration   6: 155753.185 ops/s
Iteration   7: 155377.313 ops/s
Iteration   8: 155699.529 ops/s
Iteration   9: 155363.761 ops/s
Iteration  10: 155552.270 ops/s
Iteration  11: 154794.160 ops/s
Iteration  12: 155058.128 ops/s
Iteration  13: 155352.663 ops/s
Iteration  14: 155185.507 ops/s
Iteration  15: 155077.145 ops/s
Iteration  16: 156184.490 ops/s
Iteration  17: 155812.270 ops/s
Iteration  18: 155531.040 ops/s
Iteration  19: 154922.826 ops/s
Iteration  20: 155356.739 ops/s
Iteration  21: 156132.351 ops/s
Iteration  22: 155111.373 ops/s
Iteration  23: 154108.047 ops/s
Iteration  24: 155054.953 ops/s
Iteration  25: 156152.831 ops/s
Iteration  26: 155847.205 ops/s
Iteration  27: 155069.423 ops/s
Iteration  28: 154668.488 ops/s
Iteration  29: 156037.241 ops/s
Iteration  30: 155630.280 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringThrows":
  155407.741 ±(99.9%) 337.459 ops/s [Average]
  (min, avg, max) = (154108.047, 155407.741, 156184.490), stdev = 505.092
  CI (99.9%): [155070.283, 155745.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_appendStringThrows  thrpt   30  155407.741 ± 337.459  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1992604.096 ops/s
# Warmup Iteration   2: 4379851.797 ops/s
# Warmup Iteration   3: 3915951.257 ops/s
# Warmup Iteration   4: 4153307.688 ops/s
# Warmup Iteration   5: 4389299.938 ops/s
# Warmup Iteration   6: 4368261.162 ops/s
# Warmup Iteration   7: 4399872.790 ops/s
# Warmup Iteration   8: 4387350.157 ops/s
# Warmup Iteration   9: 4392285.991 ops/s
# Warmup Iteration  10: 4368386.047 ops/s
# Warmup Iteration  11: 4399128.462 ops/s
# Warmup Iteration  12: 4402481.573 ops/s
# Warmup Iteration  13: 4372398.560 ops/s
# Warmup Iteration  14: 4403739.410 ops/s
# Warmup Iteration  15: 4426994.939 ops/s
# Warmup Iteration  16: 4392968.635 ops/s
# Warmup Iteration  17: 4405197.555 ops/s
# Warmup Iteration  18: 4394103.313 ops/s
# Warmup Iteration  19: 4381053.801 ops/s
# Warmup Iteration  20: 4381889.593 ops/s
# Warmup Iteration  21: 4396339.119 ops/s
# Warmup Iteration  22: 4407573.742 ops/s
# Warmup Iteration  23: 4386276.635 ops/s
# Warmup Iteration  24: 4409097.437 ops/s
# Warmup Iteration  25: 4378838.892 ops/s
# Warmup Iteration  26: 4374339.524 ops/s
# Warmup Iteration  27: 4374197.368 ops/s
# Warmup Iteration  28: 4383637.627 ops/s
# Warmup Iteration  29: 4396627.601 ops/s
# Warmup Iteration  30: 4402038.536 ops/s
Iteration   1: 4410801.028 ops/s
Iteration   2: 4394595.803 ops/s
Iteration   3: 4394965.564 ops/s
Iteration   4: 4391974.576 ops/s
Iteration   5: 4429190.437 ops/s
Iteration   6: 4374015.243 ops/s
Iteration   7: 4388597.277 ops/s
Iteration   8: 4422615.966 ops/s
Iteration   9: 4360168.606 ops/s
Iteration  10: 4377284.209 ops/s
Iteration  11: 4386311.894 ops/s
Iteration  12: 4368202.207 ops/s
Iteration  13: 4408809.117 ops/s
Iteration  14: 4359645.675 ops/s
Iteration  15: 4382511.102 ops/s
Iteration  16: 4399041.323 ops/s
Iteration  17: 4376483.885 ops/s
Iteration  18: 4375484.882 ops/s
Iteration  19: 4344951.498 ops/s
Iteration  20: 4370100.538 ops/s
Iteration  21: 4357627.407 ops/s
Iteration  22: 4372614.625 ops/s
Iteration  23: 4364805.468 ops/s
Iteration  24: 4411385.984 ops/s
Iteration  25: 4406190.380 ops/s
Iteration  26: 4388379.054 ops/s
Iteration  27: 4368644.731 ops/s
Iteration  28: 4405342.720 ops/s
Iteration  29: 4390074.245 ops/s
Iteration  30: 4380481.197 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparator":
  4385376.555 ±(99.9%) 13567.734 ops/s [Average]
  (min, avg, max) = (4344951.498, 4385376.555, 4429190.437), stdev = 20307.547
  CI (99.9%): [4371808.821, 4398944.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  4385376.555 ± 13567.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2122146.361 ops/s
# Warmup Iteration   2: 4711808.291 ops/s
# Warmup Iteration   3: 4490407.751 ops/s
# Warmup Iteration   4: 4164322.993 ops/s
# Warmup Iteration   5: 4704264.636 ops/s
# Warmup Iteration   6: 4721055.726 ops/s
# Warmup Iteration   7: 4716868.649 ops/s
# Warmup Iteration   8: 4725673.059 ops/s
# Warmup Iteration   9: 4697346.265 ops/s
# Warmup Iteration  10: 4727683.812 ops/s
# Warmup Iteration  11: 4687538.097 ops/s
# Warmup Iteration  12: 4691681.361 ops/s
# Warmup Iteration  13: 4741366.044 ops/s
# Warmup Iteration  14: 4701093.389 ops/s
# Warmup Iteration  15: 4707600.908 ops/s
# Warmup Iteration  16: 4703179.295 ops/s
# Warmup Iteration  17: 4709121.542 ops/s
# Warmup Iteration  18: 4708507.144 ops/s
# Warmup Iteration  19: 4711581.175 ops/s
# Warmup Iteration  20: 4715352.308 ops/s
# Warmup Iteration  21: 4691339.722 ops/s
# Warmup Iteration  22: 4716681.728 ops/s
# Warmup Iteration  23: 4701482.267 ops/s
# Warmup Iteration  24: 4702646.231 ops/s
# Warmup Iteration  25: 4689460.913 ops/s
# Warmup Iteration  26: 4693873.654 ops/s
# Warmup Iteration  27: 4724521.749 ops/s
# Warmup Iteration  28: 4710741.300 ops/s
# Warmup Iteration  29: 4693857.143 ops/s
# Warmup Iteration  30: 4674453.311 ops/s
Iteration   1: 4688311.858 ops/s
Iteration   2: 4693180.080 ops/s
Iteration   3: 4693000.168 ops/s
Iteration   4: 4657304.110 ops/s
Iteration   5: 4687910.122 ops/s
Iteration   6: 4698313.908 ops/s
Iteration   7: 4747038.580 ops/s
Iteration   8: 4710507.035 ops/s
Iteration   9: 4717608.876 ops/s
Iteration  10: 4740800.172 ops/s
Iteration  11: 4717091.074 ops/s
Iteration  12: 4722996.487 ops/s
Iteration  13: 4686488.491 ops/s
Iteration  14: 4705626.647 ops/s
Iteration  15: 4775939.840 ops/s
Iteration  16: 4727258.144 ops/s
Iteration  17: 4715542.050 ops/s
Iteration  18: 4719091.456 ops/s
Iteration  19: 4731134.174 ops/s
Iteration  20: 4702014.598 ops/s
Iteration  21: 4659526.931 ops/s
Iteration  22: 4695100.136 ops/s
Iteration  23: 4701675.071 ops/s
Iteration  24: 4718068.997 ops/s
Iteration  25: 4747661.906 ops/s
Iteration  26: 4707464.048 ops/s
Iteration  27: 4715336.107 ops/s
Iteration  28: 4702668.764 ops/s
Iteration  29: 4725497.515 ops/s
Iteration  30: 4706706.049 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  4710562.113 ±(99.9%) 16429.045 ops/s [Average]
  (min, avg, max) = (4657304.110, 4710562.113, 4775939.840), stdev = 24590.222
  CI (99.9%): [4694133.068, 4726991.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  4710562.113 ± 16429.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26017740.609 ops/s
# Warmup Iteration   2: 51372452.474 ops/s
# Warmup Iteration   3: 44544655.550 ops/s
# Warmup Iteration   4: 52200336.005 ops/s
# Warmup Iteration   5: 52255994.439 ops/s
# Warmup Iteration   6: 52171735.744 ops/s
# Warmup Iteration   7: 52195538.062 ops/s
# Warmup Iteration   8: 51973125.231 ops/s
# Warmup Iteration   9: 51573079.646 ops/s
# Warmup Iteration  10: 52018961.350 ops/s
# Warmup Iteration  11: 52226496.567 ops/s
# Warmup Iteration  12: 51988443.167 ops/s
# Warmup Iteration  13: 52539375.845 ops/s
# Warmup Iteration  14: 52015083.035 ops/s
# Warmup Iteration  15: 52182142.889 ops/s
# Warmup Iteration  16: 52299856.196 ops/s
# Warmup Iteration  17: 52051715.774 ops/s
# Warmup Iteration  18: 52055984.588 ops/s
# Warmup Iteration  19: 52172196.468 ops/s
# Warmup Iteration  20: 52362367.107 ops/s
# Warmup Iteration  21: 52224183.435 ops/s
# Warmup Iteration  22: 51773515.457 ops/s
# Warmup Iteration  23: 52131046.504 ops/s
# Warmup Iteration  24: 52028991.190 ops/s
# Warmup Iteration  25: 51874886.361 ops/s
# Warmup Iteration  26: 51954064.787 ops/s
# Warmup Iteration  27: 52068664.456 ops/s
# Warmup Iteration  28: 52188658.857 ops/s
# Warmup Iteration  29: 52318908.408 ops/s
# Warmup Iteration  30: 52219766.348 ops/s
Iteration   1: 52493476.346 ops/s
Iteration   2: 52326520.970 ops/s
Iteration   3: 52190494.001 ops/s
Iteration   4: 52436986.320 ops/s
Iteration   5: 52251547.349 ops/s
Iteration   6: 52449909.637 ops/s
Iteration   7: 52318642.034 ops/s
Iteration   8: 52373394.593 ops/s
Iteration   9: 52249468.328 ops/s
Iteration  10: 52236439.146 ops/s
Iteration  11: 52340342.840 ops/s
Iteration  12: 52100546.939 ops/s
Iteration  13: 52150845.512 ops/s
Iteration  14: 52287009.541 ops/s
Iteration  15: 52356719.922 ops/s
Iteration  16: 52271790.675 ops/s
Iteration  17: 51829227.796 ops/s
Iteration  18: 51955168.555 ops/s
Iteration  19: 51885001.815 ops/s
Iteration  20: 52010962.083 ops/s
Iteration  21: 52262682.663 ops/s
Iteration  22: 52250941.339 ops/s
Iteration  23: 52111376.787 ops/s
Iteration  24: 52208654.012 ops/s
Iteration  25: 52337874.912 ops/s
Iteration  26: 52278147.159 ops/s
Iteration  27: 52165693.852 ops/s
Iteration  28: 52362645.202 ops/s
Iteration  29: 52232297.880 ops/s
Iteration  30: 52379534.995 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asLazy":
  52236811.440 ±(99.9%) 106212.147 ops/s [Average]
  (min, avg, max) = (51829227.796, 52236811.440, 52493476.346), stdev = 158973.354
  CI (99.9%): [52130599.293, 52343023.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_asLazy  thrpt   30  52236811.440 ± 106212.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5347810.790 ops/s
# Warmup Iteration   2: 7335087.150 ops/s
# Warmup Iteration   3: 8465871.315 ops/s
# Warmup Iteration   4: 8476656.718 ops/s
# Warmup Iteration   5: 8456533.365 ops/s
# Warmup Iteration   6: 8428162.067 ops/s
# Warmup Iteration   7: 8307925.792 ops/s
# Warmup Iteration   8: 7109075.545 ops/s
# Warmup Iteration   9: 8455943.844 ops/s
# Warmup Iteration  10: 8431224.054 ops/s
# Warmup Iteration  11: 8491596.051 ops/s
# Warmup Iteration  12: 8455721.759 ops/s
# Warmup Iteration  13: 8447501.129 ops/s
# Warmup Iteration  14: 8462351.172 ops/s
# Warmup Iteration  15: 8456215.560 ops/s
# Warmup Iteration  16: 8478051.241 ops/s
# Warmup Iteration  17: 8443127.282 ops/s
# Warmup Iteration  18: 8434844.084 ops/s
# Warmup Iteration  19: 8448811.550 ops/s
# Warmup Iteration  20: 8458359.405 ops/s
# Warmup Iteration  21: 8475099.238 ops/s
# Warmup Iteration  22: 8462534.033 ops/s
# Warmup Iteration  23: 8389549.877 ops/s
# Warmup Iteration  24: 8427029.930 ops/s
# Warmup Iteration  25: 8476900.585 ops/s
# Warmup Iteration  26: 8472378.661 ops/s
# Warmup Iteration  27: 8444576.104 ops/s
# Warmup Iteration  28: 8462977.394 ops/s
# Warmup Iteration  29: 8457526.314 ops/s
# Warmup Iteration  30: 8475272.466 ops/s
Iteration   1: 8495921.481 ops/s
Iteration   2: 8404519.919 ops/s
Iteration   3: 8470362.998 ops/s
Iteration   4: 8503419.891 ops/s
Iteration   5: 8452887.259 ops/s
Iteration   6: 8493210.462 ops/s
Iteration   7: 8486291.957 ops/s
Iteration   8: 8486141.075 ops/s
Iteration   9: 8495992.809 ops/s
Iteration  10: 8440286.924 ops/s
Iteration  11: 8448357.130 ops/s
Iteration  12: 8457261.875 ops/s
Iteration  13: 8466366.379 ops/s
Iteration  14: 8470634.916 ops/s
Iteration  15: 8498826.291 ops/s
Iteration  16: 8484272.812 ops/s
Iteration  17: 8461328.184 ops/s
Iteration  18: 8473111.809 ops/s
Iteration  19: 8341363.977 ops/s
Iteration  20: 8432930.408 ops/s
Iteration  21: 8466497.853 ops/s
Iteration  22: 8460584.793 ops/s
Iteration  23: 8491060.385 ops/s
Iteration  24: 8486078.819 ops/s
Iteration  25: 8457942.186 ops/s
Iteration  26: 8456320.436 ops/s
Iteration  27: 8474253.938 ops/s
Iteration  28: 8511996.807 ops/s
Iteration  29: 8439081.711 ops/s
Iteration  30: 8511148.954 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asSynchronized":
  8467281.815 ±(99.9%) 22884.165 ops/s [Average]
  (min, avg, max) = (8341363.977, 8467281.815, 8511996.807), stdev = 34251.944
  CI (99.9%): [8444397.649, 8490165.980] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_asSynchronized  thrpt   30  8467281.815 ± 22884.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27574991.803 ops/s
# Warmup Iteration   2: 51337226.426 ops/s
# Warmup Iteration   3: 47975084.174 ops/s
# Warmup Iteration   4: 53589368.469 ops/s
# Warmup Iteration   5: 53676424.621 ops/s
# Warmup Iteration   6: 53622789.287 ops/s
# Warmup Iteration   7: 53621727.765 ops/s
# Warmup Iteration   8: 52853329.856 ops/s
# Warmup Iteration   9: 53507797.944 ops/s
# Warmup Iteration  10: 53421447.346 ops/s
# Warmup Iteration  11: 53261976.696 ops/s
# Warmup Iteration  12: 53183231.618 ops/s
# Warmup Iteration  13: 53455996.926 ops/s
# Warmup Iteration  14: 53072780.290 ops/s
# Warmup Iteration  15: 52729706.827 ops/s
# Warmup Iteration  16: 53194167.094 ops/s
# Warmup Iteration  17: 52764051.777 ops/s
# Warmup Iteration  18: 53539534.925 ops/s
# Warmup Iteration  19: 53390579.617 ops/s
# Warmup Iteration  20: 53590819.357 ops/s
# Warmup Iteration  21: 53521855.361 ops/s
# Warmup Iteration  22: 53289118.200 ops/s
# Warmup Iteration  23: 53569276.265 ops/s
# Warmup Iteration  24: 53237579.227 ops/s
# Warmup Iteration  25: 53374720.707 ops/s
# Warmup Iteration  26: 53664209.169 ops/s
# Warmup Iteration  27: 53280131.584 ops/s
# Warmup Iteration  28: 53451551.215 ops/s
# Warmup Iteration  29: 52667421.163 ops/s
# Warmup Iteration  30: 53493661.592 ops/s
Iteration   1: 53332861.969 ops/s
Iteration   2: 53862909.081 ops/s
Iteration   3: 53543399.729 ops/s
Iteration   4: 53697042.737 ops/s
Iteration   5: 53608459.441 ops/s
Iteration   6: 53677404.519 ops/s
Iteration   7: 53621460.690 ops/s
Iteration   8: 53658079.423 ops/s
Iteration   9: 53614574.889 ops/s
Iteration  10: 53699675.277 ops/s
Iteration  11: 53402962.722 ops/s
Iteration  12: 53710135.768 ops/s
Iteration  13: 53544206.998 ops/s
Iteration  14: 53561872.483 ops/s
Iteration  15: 52745942.465 ops/s
Iteration  16: 53258429.386 ops/s
Iteration  17: 53234348.867 ops/s
Iteration  18: 52047488.841 ops/s
Iteration  19: 53418918.496 ops/s
Iteration  20: 53808591.071 ops/s
Iteration  21: 53769175.850 ops/s
Iteration  22: 53793716.756 ops/s
Iteration  23: 53831652.261 ops/s
Iteration  24: 53430967.589 ops/s
Iteration  25: 53704347.308 ops/s
Iteration  26: 53344792.995 ops/s
Iteration  27: 53383916.175 ops/s
Iteration  28: 53402306.579 ops/s
Iteration  29: 53190314.962 ops/s
Iteration  30: 52966958.279 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_asUnmodifiable":
  53462230.454 ±(99.9%) 248267.084 ops/s [Average]
  (min, avg, max) = (52047488.841, 53462230.454, 53862909.081), stdev = 371594.512
  CI (99.9%): [53213963.370, 53710497.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  53462230.454 ± 248267.084  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1561627.188 ops/s
# Warmup Iteration   2: 3453124.307 ops/s
# Warmup Iteration   3: 3513140.902 ops/s
# Warmup Iteration   4: 3056086.479 ops/s
# Warmup Iteration   5: 3401136.223 ops/s
# Warmup Iteration   6: 3516508.592 ops/s
# Warmup Iteration   7: 3521164.391 ops/s
# Warmup Iteration   8: 3509044.349 ops/s
# Warmup Iteration   9: 3512307.396 ops/s
# Warmup Iteration  10: 3518867.047 ops/s
# Warmup Iteration  11: 3516851.613 ops/s
# Warmup Iteration  12: 3518064.197 ops/s
# Warmup Iteration  13: 3516375.581 ops/s
# Warmup Iteration  14: 3518255.758 ops/s
# Warmup Iteration  15: 3512941.895 ops/s
# Warmup Iteration  16: 3514253.337 ops/s
# Warmup Iteration  17: 3508222.371 ops/s
# Warmup Iteration  18: 3511122.198 ops/s
# Warmup Iteration  19: 3518855.718 ops/s
# Warmup Iteration  20: 3530055.520 ops/s
# Warmup Iteration  21: 3521497.633 ops/s
# Warmup Iteration  22: 3511676.529 ops/s
# Warmup Iteration  23: 3506821.826 ops/s
# Warmup Iteration  24: 3514242.597 ops/s
# Warmup Iteration  25: 3505829.735 ops/s
# Warmup Iteration  26: 3520455.489 ops/s
# Warmup Iteration  27: 3526227.596 ops/s
# Warmup Iteration  28: 3508021.327 ops/s
# Warmup Iteration  29: 3526221.989 ops/s
# Warmup Iteration  30: 3527696.292 ops/s
Iteration   1: 3518353.419 ops/s
Iteration   2: 3507267.244 ops/s
Iteration   3: 3496137.504 ops/s
Iteration   4: 3516006.791 ops/s
Iteration   5: 3509162.233 ops/s
Iteration   6: 3508915.751 ops/s
Iteration   7: 3496946.648 ops/s
Iteration   8: 3531555.588 ops/s
Iteration   9: 3516188.851 ops/s
Iteration  10: 3506544.403 ops/s
Iteration  11: 3504611.920 ops/s
Iteration  12: 3507529.966 ops/s
Iteration  13: 3512776.870 ops/s
Iteration  14: 3525537.438 ops/s
Iteration  15: 3517578.484 ops/s
Iteration  16: 3499715.506 ops/s
Iteration  17: 3518038.822 ops/s
Iteration  18: 3520134.326 ops/s
Iteration  19: 3523937.360 ops/s
Iteration  20: 3503992.967 ops/s
Iteration  21: 3516880.433 ops/s
Iteration  22: 3518187.328 ops/s
Iteration  23: 3516545.112 ops/s
Iteration  24: 3514049.746 ops/s
Iteration  25: 3508086.777 ops/s
Iteration  26: 3486670.165 ops/s
Iteration  27: 3507314.362 ops/s
Iteration  28: 3504044.970 ops/s
Iteration  29: 3522395.477 ops/s
Iteration  30: 3520230.714 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk":
  3511844.572 ±(99.9%) 6515.791 ops/s [Average]
  (min, avg, max) = (3486670.165, 3511844.572, 3531555.588), stdev = 9752.530
  CI (99.9%): [3505328.781, 3518360.363] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_chunk  thrpt   30  3511844.572 ± 6515.791  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27202438.796 ops/s
# Warmup Iteration   2: 46449750.280 ops/s
# Warmup Iteration   3: 48854422.397 ops/s
# Warmup Iteration   4: 52350826.657 ops/s
# Warmup Iteration   5: 52529845.901 ops/s
# Warmup Iteration   6: 52451942.128 ops/s
# Warmup Iteration   7: 51805788.576 ops/s
# Warmup Iteration   8: 52301874.837 ops/s
# Warmup Iteration   9: 52409154.672 ops/s
# Warmup Iteration  10: 52365550.823 ops/s
# Warmup Iteration  11: 52723166.980 ops/s
# Warmup Iteration  12: 52497403.473 ops/s
# Warmup Iteration  13: 52366544.226 ops/s
# Warmup Iteration  14: 52086980.064 ops/s
# Warmup Iteration  15: 52208430.462 ops/s
# Warmup Iteration  16: 52561619.945 ops/s
# Warmup Iteration  17: 52304486.176 ops/s
# Warmup Iteration  18: 52410124.921 ops/s
# Warmup Iteration  19: 52478511.755 ops/s
# Warmup Iteration  20: 52197587.232 ops/s
# Warmup Iteration  21: 52128478.657 ops/s
# Warmup Iteration  22: 52553269.508 ops/s
# Warmup Iteration  23: 51843934.226 ops/s
# Warmup Iteration  24: 52461924.208 ops/s
# Warmup Iteration  25: 52228493.067 ops/s
# Warmup Iteration  26: 52165532.723 ops/s
# Warmup Iteration  27: 52578216.859 ops/s
# Warmup Iteration  28: 52142338.705 ops/s
# Warmup Iteration  29: 52169704.498 ops/s
# Warmup Iteration  30: 52321032.360 ops/s
Iteration   1: 52250161.442 ops/s
Iteration   2: 52261535.238 ops/s
Iteration   3: 52407987.060 ops/s
Iteration   4: 52470169.803 ops/s
Iteration   5: 52206819.667 ops/s
Iteration   6: 52226421.870 ops/s
Iteration   7: 52461682.876 ops/s
Iteration   8: 52100579.651 ops/s
Iteration   9: 51690082.941 ops/s
Iteration  10: 51895891.378 ops/s
Iteration  11: 52182281.976 ops/s
Iteration  12: 52344673.686 ops/s
Iteration  13: 51825525.517 ops/s
Iteration  14: 51503793.848 ops/s
Iteration  15: 52301435.984 ops/s
Iteration  16: 52048981.602 ops/s
Iteration  17: 52824333.251 ops/s
Iteration  18: 52202743.488 ops/s
Iteration  19: 52264341.278 ops/s
Iteration  20: 52655007.890 ops/s
Iteration  21: 52542010.135 ops/s
Iteration  22: 52566859.999 ops/s
Iteration  23: 52693615.960 ops/s
Iteration  24: 52596125.923 ops/s
Iteration  25: 52431178.524 ops/s
Iteration  26: 52475828.195 ops/s
Iteration  27: 52472533.062 ops/s
Iteration  28: 52689797.581 ops/s
Iteration  29: 52576058.249 ops/s
Iteration  30: 52847548.631 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_empty":
  52333866.890 ±(99.9%) 213210.812 ops/s [Average]
  (min, avg, max) = (51503793.848, 52333866.890, 52847548.631), stdev = 319123.930
  CI (99.9%): [52120656.079, 52547077.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_chunk_empty  thrpt   30  52333866.890 ± 213210.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3767393.264 ops/s
# Warmup Iteration   2: 8058039.558 ops/s
# Warmup Iteration   3: 6868691.156 ops/s
# Warmup Iteration   4: 8232200.278 ops/s
# Warmup Iteration   5: 8228063.033 ops/s
# Warmup Iteration   6: 8173646.027 ops/s
# Warmup Iteration   7: 8172343.796 ops/s
# Warmup Iteration   8: 8147338.102 ops/s
# Warmup Iteration   9: 8171794.914 ops/s
# Warmup Iteration  10: 8252892.539 ops/s
# Warmup Iteration  11: 8219048.198 ops/s
# Warmup Iteration  12: 8228957.701 ops/s
# Warmup Iteration  13: 8208190.842 ops/s
# Warmup Iteration  14: 8223555.353 ops/s
# Warmup Iteration  15: 8214526.397 ops/s
# Warmup Iteration  16: 8185350.840 ops/s
# Warmup Iteration  17: 8251691.100 ops/s
# Warmup Iteration  18: 8222979.345 ops/s
# Warmup Iteration  19: 8171891.962 ops/s
# Warmup Iteration  20: 8191561.526 ops/s
# Warmup Iteration  21: 8152529.891 ops/s
# Warmup Iteration  22: 8209351.957 ops/s
# Warmup Iteration  23: 8229649.558 ops/s
# Warmup Iteration  24: 8194117.898 ops/s
# Warmup Iteration  25: 8200397.937 ops/s
# Warmup Iteration  26: 8217733.005 ops/s
# Warmup Iteration  27: 8200533.685 ops/s
# Warmup Iteration  28: 8209734.010 ops/s
# Warmup Iteration  29: 8225774.742 ops/s
# Warmup Iteration  30: 8209163.021 ops/s
Iteration   1: 8223332.015 ops/s
Iteration   2: 8229733.740 ops/s
Iteration   3: 8203479.745 ops/s
Iteration   4: 8171922.163 ops/s
Iteration   5: 8208983.775 ops/s
Iteration   6: 8188678.345 ops/s
Iteration   7: 8222446.420 ops/s
Iteration   8: 8173936.377 ops/s
Iteration   9: 8150692.630 ops/s
Iteration  10: 8177235.230 ops/s
Iteration  11: 8167636.968 ops/s
Iteration  12: 8230032.302 ops/s
Iteration  13: 8232587.139 ops/s
Iteration  14: 8227475.271 ops/s
Iteration  15: 8166607.223 ops/s
Iteration  16: 8233971.987 ops/s
Iteration  17: 8209704.848 ops/s
Iteration  18: 8203345.723 ops/s
Iteration  19: 8230576.794 ops/s
Iteration  20: 8232713.423 ops/s
Iteration  21: 8226390.303 ops/s
Iteration  22: 8197420.026 ops/s
Iteration  23: 8244699.788 ops/s
Iteration  24: 8248684.810 ops/s
Iteration  25: 8166340.492 ops/s
Iteration  26: 8173204.139 ops/s
Iteration  27: 8224586.407 ops/s
Iteration  28: 8180800.225 ops/s
Iteration  29: 8190261.865 ops/s
Iteration  30: 8253359.728 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_large_size":
  8206361.330 ±(99.9%) 19355.724 ops/s [Average]
  (min, avg, max) = (8150692.630, 8206361.330, 8253359.728), stdev = 28970.739
  CI (99.9%): [8187005.605, 8225717.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_chunk_large_size  thrpt   30  8206361.330 ± 19355.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6801872.403 ops/s
# Warmup Iteration   2: 14576245.447 ops/s
# Warmup Iteration   3: 12731743.987 ops/s
# Warmup Iteration   4: 15142218.504 ops/s
# Warmup Iteration   5: 15177175.032 ops/s
# Warmup Iteration   6: 15042524.188 ops/s
# Warmup Iteration   7: 15166241.798 ops/s
# Warmup Iteration   8: 15143352.907 ops/s
# Warmup Iteration   9: 15166111.406 ops/s
# Warmup Iteration  10: 15238036.975 ops/s
# Warmup Iteration  11: 15160380.123 ops/s
# Warmup Iteration  12: 15221512.664 ops/s
# Warmup Iteration  13: 15172602.201 ops/s
# Warmup Iteration  14: 15200511.732 ops/s
# Warmup Iteration  15: 15184718.992 ops/s
# Warmup Iteration  16: 15232301.110 ops/s
# Warmup Iteration  17: 15114778.228 ops/s
# Warmup Iteration  18: 15193044.918 ops/s
# Warmup Iteration  19: 15203387.622 ops/s
# Warmup Iteration  20: 15152461.221 ops/s
# Warmup Iteration  21: 15216049.595 ops/s
# Warmup Iteration  22: 15035465.432 ops/s
# Warmup Iteration  23: 15151743.118 ops/s
# Warmup Iteration  24: 15189838.873 ops/s
# Warmup Iteration  25: 15190632.455 ops/s
# Warmup Iteration  26: 15230871.296 ops/s
# Warmup Iteration  27: 15150678.719 ops/s
# Warmup Iteration  28: 15222570.074 ops/s
# Warmup Iteration  29: 15157413.164 ops/s
# Warmup Iteration  30: 15163454.768 ops/s
Iteration   1: 15181758.690 ops/s
Iteration   2: 15177988.227 ops/s
Iteration   3: 15134942.856 ops/s
Iteration   4: 15242373.472 ops/s
Iteration   5: 15305694.258 ops/s
Iteration   6: 15214073.103 ops/s
Iteration   7: 15225291.798 ops/s
Iteration   8: 15239580.212 ops/s
Iteration   9: 15270862.686 ops/s
Iteration  10: 15097246.819 ops/s
Iteration  11: 15121811.808 ops/s
Iteration  12: 15145833.719 ops/s
Iteration  13: 15184871.466 ops/s
Iteration  14: 15142015.049 ops/s
Iteration  15: 15146573.091 ops/s
Iteration  16: 15236541.354 ops/s
Iteration  17: 15130793.279 ops/s
Iteration  18: 15192212.570 ops/s
Iteration  19: 15263445.855 ops/s
Iteration  20: 15221530.826 ops/s
Iteration  21: 15205525.251 ops/s
Iteration  22: 15147642.154 ops/s
Iteration  23: 15120450.339 ops/s
Iteration  24: 15162467.198 ops/s
Iteration  25: 15166360.665 ops/s
Iteration  26: 15173884.635 ops/s
Iteration  27: 15226752.308 ops/s
Iteration  28: 15134452.820 ops/s
Iteration  29: 15159916.758 ops/s
Iteration  30: 15199661.726 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_single":
  15185751.833 ±(99.9%) 33980.994 ops/s [Average]
  (min, avg, max) = (15097246.819, 15185751.833, 15305694.258), stdev = 50861.156
  CI (99.9%): [15151770.839, 15219732.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_chunk_single  thrpt   30  15185751.833 ± 33980.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676522.977 ops/s
# Warmup Iteration   2: 749082.956 ops/s
# Warmup Iteration   3: 995801.326 ops/s
# Warmup Iteration   4: 992141.332 ops/s
# Warmup Iteration   5: 989196.585 ops/s
# Warmup Iteration   6: 987865.967 ops/s
# Warmup Iteration   7: 988355.403 ops/s
# Warmup Iteration   8: 991147.453 ops/s
# Warmup Iteration   9: 989132.321 ops/s
# Warmup Iteration  10: 822550.266 ops/s
# Warmup Iteration  11: 993002.113 ops/s
# Warmup Iteration  12: 994347.395 ops/s
# Warmup Iteration  13: 997682.855 ops/s
# Warmup Iteration  14: 990400.052 ops/s
# Warmup Iteration  15: 991552.393 ops/s
# Warmup Iteration  16: 993821.028 ops/s
# Warmup Iteration  17: 1050524.645 ops/s
# Warmup Iteration  18: 1049644.433 ops/s
# Warmup Iteration  19: 1051701.747 ops/s
# Warmup Iteration  20: 1050385.842 ops/s
# Warmup Iteration  21: 1048490.888 ops/s
# Warmup Iteration  22: 1047038.324 ops/s
# Warmup Iteration  23: 1048489.578 ops/s
# Warmup Iteration  24: 1055262.631 ops/s
# Warmup Iteration  25: 1050640.027 ops/s
# Warmup Iteration  26: 1048357.025 ops/s
# Warmup Iteration  27: 1053504.755 ops/s
# Warmup Iteration  28: 1050394.432 ops/s
# Warmup Iteration  29: 1050079.644 ops/s
# Warmup Iteration  30: 1053312.879 ops/s
Iteration   1: 1051984.937 ops/s
Iteration   2: 1045370.808 ops/s
Iteration   3: 1053443.672 ops/s
Iteration   4: 1053562.031 ops/s
Iteration   5: 1053370.564 ops/s
Iteration   6: 1050985.032 ops/s
Iteration   7: 1048417.294 ops/s
Iteration   8: 1047536.586 ops/s
Iteration   9: 1047436.498 ops/s
Iteration  10: 1053658.229 ops/s
Iteration  11: 1053668.263 ops/s
Iteration  12: 1043954.065 ops/s
Iteration  13: 1048148.768 ops/s
Iteration  14: 1054077.670 ops/s
Iteration  15: 1049209.100 ops/s
Iteration  16: 1053435.231 ops/s
Iteration  17: 1053261.428 ops/s
Iteration  18: 1047677.675 ops/s
Iteration  19: 1051362.658 ops/s
Iteration  20: 1053521.643 ops/s
Iteration  21: 1044296.936 ops/s
Iteration  22: 1047973.319 ops/s
Iteration  23: 1052185.892 ops/s
Iteration  24: 1053520.455 ops/s
Iteration  25: 1048219.255 ops/s
Iteration  26: 1050351.034 ops/s
Iteration  27: 1054946.974 ops/s
Iteration  28: 1044156.504 ops/s
Iteration  29: 1051495.651 ops/s
Iteration  30: 1052932.538 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_chunk_zero_throws":
  1050472.024 ±(99.9%) 2231.192 ops/s [Average]
  (min, avg, max) = (1043954.065, 1050472.024, 1054946.974), stdev = 3339.544
  CI (99.9%): [1048240.832, 1052703.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1050472.024 ± 2231.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8128238.188 ops/s
# Warmup Iteration   2: 13956792.955 ops/s
# Warmup Iteration   3: 16326653.149 ops/s
# Warmup Iteration   4: 16196944.933 ops/s
# Warmup Iteration   5: 16145011.719 ops/s
# Warmup Iteration   6: 16233981.620 ops/s
# Warmup Iteration   7: 16291230.431 ops/s
# Warmup Iteration   8: 16323982.899 ops/s
# Warmup Iteration   9: 16256488.277 ops/s
# Warmup Iteration  10: 16362557.609 ops/s
# Warmup Iteration  11: 16371578.601 ops/s
# Warmup Iteration  12: 16196415.978 ops/s
# Warmup Iteration  13: 16405368.786 ops/s
# Warmup Iteration  14: 16305526.309 ops/s
# Warmup Iteration  15: 16366861.219 ops/s
# Warmup Iteration  16: 16322716.808 ops/s
# Warmup Iteration  17: 16253863.057 ops/s
# Warmup Iteration  18: 16309282.210 ops/s
# Warmup Iteration  19: 16133027.050 ops/s
# Warmup Iteration  20: 16265826.091 ops/s
# Warmup Iteration  21: 16142041.266 ops/s
# Warmup Iteration  22: 16306758.175 ops/s
# Warmup Iteration  23: 16289878.680 ops/s
# Warmup Iteration  24: 16304634.210 ops/s
# Warmup Iteration  25: 16194396.442 ops/s
# Warmup Iteration  26: 16294211.595 ops/s
# Warmup Iteration  27: 16248007.042 ops/s
# Warmup Iteration  28: 16217991.591 ops/s
# Warmup Iteration  29: 16273162.413 ops/s
# Warmup Iteration  30: 16338766.194 ops/s
Iteration   1: 16308715.579 ops/s
Iteration   2: 16398142.298 ops/s
Iteration   3: 16223801.149 ops/s
Iteration   4: 16296169.456 ops/s
Iteration   5: 16307978.865 ops/s
Iteration   6: 16132558.142 ops/s
Iteration   7: 16411507.466 ops/s
Iteration   8: 15996843.154 ops/s
Iteration   9: 15987510.137 ops/s
Iteration  10: 16253774.649 ops/s
Iteration  11: 16192334.868 ops/s
Iteration  12: 16176743.793 ops/s
Iteration  13: 16140133.201 ops/s
Iteration  14: 16249247.374 ops/s
Iteration  15: 16159430.525 ops/s
Iteration  16: 16230191.343 ops/s
Iteration  17: 16306283.495 ops/s
Iteration  18: 16247692.675 ops/s
Iteration  19: 16455275.614 ops/s
Iteration  20: 16333501.312 ops/s
Iteration  21: 16278330.689 ops/s
Iteration  22: 16339129.208 ops/s
Iteration  23: 16343598.908 ops/s
Iteration  24: 16327935.577 ops/s
Iteration  25: 16299822.102 ops/s
Iteration  26: 16394647.047 ops/s
Iteration  27: 16347309.459 ops/s
Iteration  28: 16138196.447 ops/s
Iteration  29: 16293848.655 ops/s
Iteration  30: 16406117.019 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_clear":
  16265892.340 ±(99.9%) 75849.533 ops/s [Average]
  (min, avg, max) = (15987510.137, 16265892.340, 16455275.614), stdev = 113528.019
  CI (99.9%): [16190042.807, 16341741.873] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_clear  thrpt   30  16265892.340 ± 75849.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 366327.233 ops/s
# Warmup Iteration   2: 712091.231 ops/s
# Warmup Iteration   3: 768103.686 ops/s
# Warmup Iteration   4: 775684.617 ops/s
# Warmup Iteration   5: 642715.026 ops/s
# Warmup Iteration   6: 778266.456 ops/s
# Warmup Iteration   7: 777116.382 ops/s
# Warmup Iteration   8: 774520.472 ops/s
# Warmup Iteration   9: 774090.989 ops/s
# Warmup Iteration  10: 773743.678 ops/s
# Warmup Iteration  11: 772978.060 ops/s
# Warmup Iteration  12: 778438.954 ops/s
# Warmup Iteration  13: 778428.466 ops/s
# Warmup Iteration  14: 777894.508 ops/s
# Warmup Iteration  15: 776006.760 ops/s
# Warmup Iteration  16: 779639.863 ops/s
# Warmup Iteration  17: 775342.064 ops/s
# Warmup Iteration  18: 767461.112 ops/s
# Warmup Iteration  19: 773519.253 ops/s
# Warmup Iteration  20: 771399.570 ops/s
# Warmup Iteration  21: 775670.739 ops/s
# Warmup Iteration  22: 775966.842 ops/s
# Warmup Iteration  23: 776184.150 ops/s
# Warmup Iteration  24: 777403.194 ops/s
# Warmup Iteration  25: 775482.612 ops/s
# Warmup Iteration  26: 777486.765 ops/s
# Warmup Iteration  27: 775851.655 ops/s
# Warmup Iteration  28: 771255.041 ops/s
# Warmup Iteration  29: 775155.271 ops/s
# Warmup Iteration  30: 774269.280 ops/s
Iteration   1: 775888.229 ops/s
Iteration   2: 776894.157 ops/s
Iteration   3: 774587.764 ops/s
Iteration   4: 780708.200 ops/s
Iteration   5: 779172.076 ops/s
Iteration   6: 775844.165 ops/s
Iteration   7: 770005.138 ops/s
Iteration   8: 774586.759 ops/s
Iteration   9: 774367.864 ops/s
Iteration  10: 767107.747 ops/s
Iteration  11: 772801.021 ops/s
Iteration  12: 778993.972 ops/s
Iteration  13: 776227.954 ops/s
Iteration  14: 775360.451 ops/s
Iteration  15: 768942.208 ops/s
Iteration  16: 776351.453 ops/s
Iteration  17: 766857.571 ops/s
Iteration  18: 777864.977 ops/s
Iteration  19: 772140.160 ops/s
Iteration  20: 778191.810 ops/s
Iteration  21: 777882.550 ops/s
Iteration  22: 774509.238 ops/s
Iteration  23: 781192.510 ops/s
Iteration  24: 775662.936 ops/s
Iteration  25: 781101.627 ops/s
Iteration  26: 773015.071 ops/s
Iteration  27: 773426.792 ops/s
Iteration  28: 775680.535 ops/s
Iteration  29: 779048.699 ops/s
Iteration  30: 772973.771 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collect":
  775246.247 ±(99.9%) 2502.928 ops/s [Average]
  (min, avg, max) = (766857.571, 775246.247, 781192.510), stdev = 3746.266
  CI (99.9%): [772743.318, 777749.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collect  thrpt   30  775246.247 ± 2502.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3522907.685 ops/s
# Warmup Iteration   2: 6301050.531 ops/s
# Warmup Iteration   3: 6437268.772 ops/s
# Warmup Iteration   4: 6449802.717 ops/s
# Warmup Iteration   5: 5356499.523 ops/s
# Warmup Iteration   6: 6475403.452 ops/s
# Warmup Iteration   7: 6515396.914 ops/s
# Warmup Iteration   8: 6505346.137 ops/s
# Warmup Iteration   9: 6500794.305 ops/s
# Warmup Iteration  10: 6514750.943 ops/s
# Warmup Iteration  11: 6499630.701 ops/s
# Warmup Iteration  12: 6509185.416 ops/s
# Warmup Iteration  13: 6506695.313 ops/s
# Warmup Iteration  14: 6511184.018 ops/s
# Warmup Iteration  15: 6477902.274 ops/s
# Warmup Iteration  16: 6515011.195 ops/s
# Warmup Iteration  17: 6508227.731 ops/s
# Warmup Iteration  18: 6500884.764 ops/s
# Warmup Iteration  19: 6492904.592 ops/s
# Warmup Iteration  20: 6506280.649 ops/s
# Warmup Iteration  21: 6528797.270 ops/s
# Warmup Iteration  22: 6523776.597 ops/s
# Warmup Iteration  23: 6507206.952 ops/s
# Warmup Iteration  24: 6520825.974 ops/s
# Warmup Iteration  25: 6507511.664 ops/s
# Warmup Iteration  26: 6533756.229 ops/s
# Warmup Iteration  27: 6512842.187 ops/s
# Warmup Iteration  28: 6513723.832 ops/s
# Warmup Iteration  29: 6531831.730 ops/s
# Warmup Iteration  30: 6527182.526 ops/s
Iteration   1: 6487865.722 ops/s
Iteration   2: 6501414.922 ops/s
Iteration   3: 6492765.095 ops/s
Iteration   4: 6512076.073 ops/s
Iteration   5: 6475513.247 ops/s
Iteration   6: 6483647.599 ops/s
Iteration   7: 6509938.922 ops/s
Iteration   8: 6479231.444 ops/s
Iteration   9: 6522098.172 ops/s
Iteration  10: 6486900.283 ops/s
Iteration  11: 6476112.950 ops/s
Iteration  12: 6458350.968 ops/s
Iteration  13: 6507438.546 ops/s
Iteration  14: 6513362.363 ops/s
Iteration  15: 6493735.592 ops/s
Iteration  16: 6496869.039 ops/s
Iteration  17: 6466639.137 ops/s
Iteration  18: 6510402.748 ops/s
Iteration  19: 6534056.987 ops/s
Iteration  20: 6525765.228 ops/s
Iteration  21: 6543650.443 ops/s
Iteration  22: 6518242.410 ops/s
Iteration  23: 6467596.038 ops/s
Iteration  24: 6491228.961 ops/s
Iteration  25: 6490305.128 ops/s
Iteration  26: 6480570.369 ops/s
Iteration  27: 6490475.977 ops/s
Iteration  28: 6516330.117 ops/s
Iteration  29: 6509988.785 ops/s
Iteration  30: 6506389.582 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBoolean":
  6498298.762 ±(99.9%) 13751.284 ops/s [Average]
  (min, avg, max) = (6458350.968, 6498298.762, 6543650.443), stdev = 20582.276
  CI (99.9%): [6484547.478, 6512050.045] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectBoolean  thrpt   30  6498298.762 ± 13751.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7482384.998 ops/s
# Warmup Iteration   2: 15863667.803 ops/s
# Warmup Iteration   3: 13871272.984 ops/s
# Warmup Iteration   4: 15555188.535 ops/s
# Warmup Iteration   5: 16048977.543 ops/s
# Warmup Iteration   6: 16085853.580 ops/s
# Warmup Iteration   7: 16091370.900 ops/s
# Warmup Iteration   8: 16023750.904 ops/s
# Warmup Iteration   9: 16132216.936 ops/s
# Warmup Iteration  10: 15995806.735 ops/s
# Warmup Iteration  11: 16008011.176 ops/s
# Warmup Iteration  12: 16125892.850 ops/s
# Warmup Iteration  13: 16035786.395 ops/s
# Warmup Iteration  14: 16094187.223 ops/s
# Warmup Iteration  15: 16115785.605 ops/s
# Warmup Iteration  16: 16115202.399 ops/s
# Warmup Iteration  17: 16113509.980 ops/s
# Warmup Iteration  18: 15968431.353 ops/s
# Warmup Iteration  19: 16025621.074 ops/s
# Warmup Iteration  20: 16084245.867 ops/s
# Warmup Iteration  21: 16086283.048 ops/s
# Warmup Iteration  22: 16065120.761 ops/s
# Warmup Iteration  23: 16048878.107 ops/s
# Warmup Iteration  24: 16075381.662 ops/s
# Warmup Iteration  25: 16034915.507 ops/s
# Warmup Iteration  26: 16073901.743 ops/s
# Warmup Iteration  27: 16083721.606 ops/s
# Warmup Iteration  28: 16041400.624 ops/s
# Warmup Iteration  29: 16117344.103 ops/s
# Warmup Iteration  30: 16081933.177 ops/s
Iteration   1: 16060115.826 ops/s
Iteration   2: 16073342.590 ops/s
Iteration   3: 16056008.056 ops/s
Iteration   4: 16181954.805 ops/s
Iteration   5: 16042352.854 ops/s
Iteration   6: 16041411.734 ops/s
Iteration   7: 15889901.581 ops/s
Iteration   8: 15937016.603 ops/s
Iteration   9: 16071627.566 ops/s
Iteration  10: 15992194.334 ops/s
Iteration  11: 16034351.998 ops/s
Iteration  12: 16010409.769 ops/s
Iteration  13: 16193286.562 ops/s
Iteration  14: 16160975.663 ops/s
Iteration  15: 16012099.112 ops/s
Iteration  16: 16095117.814 ops/s
Iteration  17: 16088279.478 ops/s
Iteration  18: 16104530.271 ops/s
Iteration  19: 16147294.921 ops/s
Iteration  20: 16063514.152 ops/s
Iteration  21: 16139079.660 ops/s
Iteration  22: 16109709.280 ops/s
Iteration  23: 16008223.395 ops/s
Iteration  24: 16073093.124 ops/s
Iteration  25: 16078736.692 ops/s
Iteration  26: 16001860.707 ops/s
Iteration  27: 16109335.612 ops/s
Iteration  28: 16082203.375 ops/s
Iteration  29: 16053053.033 ops/s
Iteration  30: 16026174.650 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  16064575.174 ±(99.9%) 44445.261 ops/s [Average]
  (min, avg, max) = (15889901.581, 16064575.174, 16193286.562), stdev = 66523.579
  CI (99.9%): [16020129.913, 16109020.435] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  16064575.174 ± 44445.261  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4759745.134 ops/s
# Warmup Iteration   2: 10456387.385 ops/s
# Warmup Iteration   3: 10422523.585 ops/s
# Warmup Iteration   4: 8821907.048 ops/s
# Warmup Iteration   5: 10554483.617 ops/s
# Warmup Iteration   6: 10576090.365 ops/s
# Warmup Iteration   7: 10518960.231 ops/s
# Warmup Iteration   8: 10531244.383 ops/s
# Warmup Iteration   9: 10591038.139 ops/s
# Warmup Iteration  10: 10532313.700 ops/s
# Warmup Iteration  11: 10551872.864 ops/s
# Warmup Iteration  12: 10558562.347 ops/s
# Warmup Iteration  13: 10521952.455 ops/s
# Warmup Iteration  14: 10549097.233 ops/s
# Warmup Iteration  15: 10538895.019 ops/s
# Warmup Iteration  16: 10579728.470 ops/s
# Warmup Iteration  17: 10557825.333 ops/s
# Warmup Iteration  18: 10519048.860 ops/s
# Warmup Iteration  19: 10539197.591 ops/s
# Warmup Iteration  20: 10577233.364 ops/s
# Warmup Iteration  21: 10583197.783 ops/s
# Warmup Iteration  22: 10574873.273 ops/s
# Warmup Iteration  23: 10578764.497 ops/s
# Warmup Iteration  24: 10574753.829 ops/s
# Warmup Iteration  25: 10491469.918 ops/s
# Warmup Iteration  26: 10554600.285 ops/s
# Warmup Iteration  27: 10514474.112 ops/s
# Warmup Iteration  28: 10544059.271 ops/s
# Warmup Iteration  29: 10495411.294 ops/s
# Warmup Iteration  30: 10551221.090 ops/s
Iteration   1: 10510112.062 ops/s
Iteration   2: 10539734.138 ops/s
Iteration   3: 10514888.214 ops/s
Iteration   4: 10450444.443 ops/s
Iteration   5: 10523905.103 ops/s
Iteration   6: 10552486.540 ops/s
Iteration   7: 10527180.289 ops/s
Iteration   8: 10553019.389 ops/s
Iteration   9: 10557933.562 ops/s
Iteration  10: 10583061.631 ops/s
Iteration  11: 10530783.853 ops/s
Iteration  12: 10592381.112 ops/s
Iteration  13: 10553563.322 ops/s
Iteration  14: 10551306.339 ops/s
Iteration  15: 10545650.273 ops/s
Iteration  16: 10558604.235 ops/s
Iteration  17: 10529936.401 ops/s
Iteration  18: 10559915.324 ops/s
Iteration  19: 10558610.275 ops/s
Iteration  20: 10566972.697 ops/s
Iteration  21: 10649338.337 ops/s
Iteration  22: 10565120.762 ops/s
Iteration  23: 10602957.777 ops/s
Iteration  24: 10552710.587 ops/s
Iteration  25: 10591108.066 ops/s
Iteration  26: 10578154.283 ops/s
Iteration  27: 10597848.532 ops/s
Iteration  28: 10599124.128 ops/s
Iteration  29: 10541475.156 ops/s
Iteration  30: 10570455.633 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithTarget":
  10556959.415 ±(99.9%) 24019.193 ops/s [Average]
  (min, avg, max) = (10450444.443, 10556959.415, 10649338.337), stdev = 35950.800
  CI (99.9%): [10532940.222, 10580978.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  10556959.415 ± 24019.193  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 970116.752 ops/s
# Warmup Iteration   2: 2369395.498 ops/s
# Warmup Iteration   3: 2350606.728 ops/s
# Warmup Iteration   4: 1977976.637 ops/s
# Warmup Iteration   5: 2358888.840 ops/s
# Warmup Iteration   6: 2365291.104 ops/s
# Warmup Iteration   7: 2374162.884 ops/s
# Warmup Iteration   8: 2360075.142 ops/s
# Warmup Iteration   9: 2370399.861 ops/s
# Warmup Iteration  10: 2366491.027 ops/s
# Warmup Iteration  11: 2379586.896 ops/s
# Warmup Iteration  12: 2370393.266 ops/s
# Warmup Iteration  13: 2375985.776 ops/s
# Warmup Iteration  14: 2375050.254 ops/s
# Warmup Iteration  15: 2384039.599 ops/s
# Warmup Iteration  16: 2385855.196 ops/s
# Warmup Iteration  17: 2366328.186 ops/s
# Warmup Iteration  18: 2384601.764 ops/s
# Warmup Iteration  19: 2375586.142 ops/s
# Warmup Iteration  20: 2377371.596 ops/s
# Warmup Iteration  21: 2369721.366 ops/s
# Warmup Iteration  22: 2367480.064 ops/s
# Warmup Iteration  23: 2375209.476 ops/s
# Warmup Iteration  24: 2379731.390 ops/s
# Warmup Iteration  25: 2377686.613 ops/s
# Warmup Iteration  26: 2370038.005 ops/s
# Warmup Iteration  27: 2375146.226 ops/s
# Warmup Iteration  28: 2370287.500 ops/s
# Warmup Iteration  29: 2369493.423 ops/s
# Warmup Iteration  30: 2363365.747 ops/s
Iteration   1: 2363782.549 ops/s
Iteration   2: 2354133.723 ops/s
Iteration   3: 2347143.101 ops/s
Iteration   4: 2363775.672 ops/s
Iteration   5: 2351853.341 ops/s
Iteration   6: 2344054.503 ops/s
Iteration   7: 2360544.661 ops/s
Iteration   8: 2375421.033 ops/s
Iteration   9: 2376381.755 ops/s
Iteration  10: 2361836.035 ops/s
Iteration  11: 2372190.990 ops/s
Iteration  12: 2377249.228 ops/s
Iteration  13: 2353548.750 ops/s
Iteration  14: 2369989.055 ops/s
Iteration  15: 2357622.045 ops/s
Iteration  16: 2362593.828 ops/s
Iteration  17: 2372004.262 ops/s
Iteration  18: 2354624.921 ops/s
Iteration  19: 2360085.874 ops/s
Iteration  20: 2358106.610 ops/s
Iteration  21: 2360226.930 ops/s
Iteration  22: 2369153.525 ops/s
Iteration  23: 2369474.751 ops/s
Iteration  24: 2372579.856 ops/s
Iteration  25: 2367410.018 ops/s
Iteration  26: 2373302.965 ops/s
Iteration  27: 2354984.809 ops/s
Iteration  28: 2384303.969 ops/s
Iteration  29: 2370112.859 ops/s
Iteration  30: 2361027.561 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByte":
  2363983.973 ±(99.9%) 6377.018 ops/s [Average]
  (min, avg, max) = (2344054.503, 2363983.973, 2384303.969), stdev = 9544.822
  CI (99.9%): [2357606.954, 2370360.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectByte  thrpt   30  2363983.973 ± 6377.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2257092.159 ops/s
# Warmup Iteration   2: 5211229.162 ops/s
# Warmup Iteration   3: 4478619.332 ops/s
# Warmup Iteration   4: 5169588.235 ops/s
# Warmup Iteration   5: 5262961.278 ops/s
# Warmup Iteration   6: 5235858.723 ops/s
# Warmup Iteration   7: 5241675.306 ops/s
# Warmup Iteration   8: 5264110.588 ops/s
# Warmup Iteration   9: 5252796.272 ops/s
# Warmup Iteration  10: 5258697.555 ops/s
# Warmup Iteration  11: 5274870.882 ops/s
# Warmup Iteration  12: 5282563.536 ops/s
# Warmup Iteration  13: 5302390.726 ops/s
# Warmup Iteration  14: 5263248.256 ops/s
# Warmup Iteration  15: 5275334.174 ops/s
# Warmup Iteration  16: 5274280.696 ops/s
# Warmup Iteration  17: 5218221.453 ops/s
# Warmup Iteration  18: 5231327.360 ops/s
# Warmup Iteration  19: 5292559.069 ops/s
# Warmup Iteration  20: 5240903.010 ops/s
# Warmup Iteration  21: 5256744.090 ops/s
# Warmup Iteration  22: 5271743.421 ops/s
# Warmup Iteration  23: 5242757.874 ops/s
# Warmup Iteration  24: 5252872.638 ops/s
# Warmup Iteration  25: 5274697.295 ops/s
# Warmup Iteration  26: 5283052.893 ops/s
# Warmup Iteration  27: 5267226.088 ops/s
# Warmup Iteration  28: 5280593.836 ops/s
# Warmup Iteration  29: 5260462.860 ops/s
# Warmup Iteration  30: 5275830.010 ops/s
Iteration   1: 5209209.761 ops/s
Iteration   2: 5229097.945 ops/s
Iteration   3: 5249950.843 ops/s
Iteration   4: 5270376.808 ops/s
Iteration   5: 5235532.791 ops/s
Iteration   6: 5250991.765 ops/s
Iteration   7: 5244350.148 ops/s
Iteration   8: 5264084.998 ops/s
Iteration   9: 5239682.223 ops/s
Iteration  10: 5259044.000 ops/s
Iteration  11: 5241073.633 ops/s
Iteration  12: 5257479.492 ops/s
Iteration  13: 5274874.723 ops/s
Iteration  14: 5262055.008 ops/s
Iteration  15: 5276021.451 ops/s
Iteration  16: 5296119.092 ops/s
Iteration  17: 5276996.243 ops/s
Iteration  18: 5255284.760 ops/s
Iteration  19: 5292186.648 ops/s
Iteration  20: 5265915.257 ops/s
Iteration  21: 5282736.163 ops/s
Iteration  22: 5252945.672 ops/s
Iteration  23: 5266247.125 ops/s
Iteration  24: 5208830.713 ops/s
Iteration  25: 5251847.012 ops/s
Iteration  26: 5240120.725 ops/s
Iteration  27: 5265280.064 ops/s
Iteration  28: 5269789.858 ops/s
Iteration  29: 5290565.403 ops/s
Iteration  30: 5243128.953 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithBagTarget":
  5257393.976 ±(99.9%) 14391.751 ops/s [Average]
  (min, avg, max) = (5208830.713, 5257393.976, 5296119.092), stdev = 21540.897
  CI (99.9%): [5243002.225, 5271785.727] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  5257393.976 ± 14391.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1710104.898 ops/s
# Warmup Iteration   2: 4112492.992 ops/s
# Warmup Iteration   3: 4115739.594 ops/s
# Warmup Iteration   4: 3439623.542 ops/s
# Warmup Iteration   5: 4145406.702 ops/s
# Warmup Iteration   6: 4125649.883 ops/s
# Warmup Iteration   7: 4142681.715 ops/s
# Warmup Iteration   8: 4133461.708 ops/s
# Warmup Iteration   9: 4141703.058 ops/s
# Warmup Iteration  10: 4135573.031 ops/s
# Warmup Iteration  11: 4121800.676 ops/s
# Warmup Iteration  12: 4111758.927 ops/s
# Warmup Iteration  13: 4140220.424 ops/s
# Warmup Iteration  14: 4133126.430 ops/s
# Warmup Iteration  15: 4109769.913 ops/s
# Warmup Iteration  16: 4108958.761 ops/s
# Warmup Iteration  17: 4138086.906 ops/s
# Warmup Iteration  18: 4139978.553 ops/s
# Warmup Iteration  19: 4135209.462 ops/s
# Warmup Iteration  20: 4121351.606 ops/s
# Warmup Iteration  21: 4133458.063 ops/s
# Warmup Iteration  22: 4128079.483 ops/s
# Warmup Iteration  23: 4130342.564 ops/s
# Warmup Iteration  24: 4125955.630 ops/s
# Warmup Iteration  25: 4119733.331 ops/s
# Warmup Iteration  26: 4147839.596 ops/s
# Warmup Iteration  27: 4108259.830 ops/s
# Warmup Iteration  28: 4131668.119 ops/s
# Warmup Iteration  29: 4125691.500 ops/s
# Warmup Iteration  30: 4113288.036 ops/s
Iteration   1: 4117689.288 ops/s
Iteration   2: 4133163.894 ops/s
Iteration   3: 4095214.548 ops/s
Iteration   4: 4101403.996 ops/s
Iteration   5: 4143829.842 ops/s
Iteration   6: 4122336.225 ops/s
Iteration   7: 4130879.718 ops/s
Iteration   8: 4129638.378 ops/s
Iteration   9: 4149147.788 ops/s
Iteration  10: 4127823.417 ops/s
Iteration  11: 4118482.759 ops/s
Iteration  12: 4144003.564 ops/s
Iteration  13: 4147283.793 ops/s
Iteration  14: 4131977.474 ops/s
Iteration  15: 4138892.881 ops/s
Iteration  16: 4124238.064 ops/s
Iteration  17: 4137940.762 ops/s
Iteration  18: 4129549.176 ops/s
Iteration  19: 4114307.986 ops/s
Iteration  20: 4132881.453 ops/s
Iteration  21: 4120002.307 ops/s
Iteration  22: 4150268.731 ops/s
Iteration  23: 4125674.537 ops/s
Iteration  24: 4120761.295 ops/s
Iteration  25: 4136689.672 ops/s
Iteration  26: 4123532.410 ops/s
Iteration  27: 4121362.767 ops/s
Iteration  28: 4153417.953 ops/s
Iteration  29: 4114151.483 ops/s
Iteration  30: 4106656.391 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectByteWithTarget":
  4128106.752 ±(99.9%) 9518.385 ops/s [Average]
  (min, avg, max) = (4095214.548, 4128106.752, 4153417.953), stdev = 14246.672
  CI (99.9%): [4118588.367, 4137625.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  4128106.752 ± 9518.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 894567.521 ops/s
# Warmup Iteration   2: 2116262.348 ops/s
# Warmup Iteration   3: 2120969.818 ops/s
# Warmup Iteration   4: 1790932.577 ops/s
# Warmup Iteration   5: 2129360.325 ops/s
# Warmup Iteration   6: 2121613.859 ops/s
# Warmup Iteration   7: 2132996.698 ops/s
# Warmup Iteration   8: 2131702.859 ops/s
# Warmup Iteration   9: 2123249.192 ops/s
# Warmup Iteration  10: 2126762.454 ops/s
# Warmup Iteration  11: 2126309.390 ops/s
# Warmup Iteration  12: 2140954.496 ops/s
# Warmup Iteration  13: 2140052.159 ops/s
# Warmup Iteration  14: 2130483.345 ops/s
# Warmup Iteration  15: 2132966.592 ops/s
# Warmup Iteration  16: 2125106.864 ops/s
# Warmup Iteration  17: 2132281.586 ops/s
# Warmup Iteration  18: 2134687.703 ops/s
# Warmup Iteration  19: 2139875.036 ops/s
# Warmup Iteration  20: 2132275.488 ops/s
# Warmup Iteration  21: 2137177.106 ops/s
# Warmup Iteration  22: 2141431.162 ops/s
# Warmup Iteration  23: 2138207.295 ops/s
# Warmup Iteration  24: 2129530.387 ops/s
# Warmup Iteration  25: 2142627.071 ops/s
# Warmup Iteration  26: 2137035.966 ops/s
# Warmup Iteration  27: 2141287.140 ops/s
# Warmup Iteration  28: 2139861.780 ops/s
# Warmup Iteration  29: 2135348.723 ops/s
# Warmup Iteration  30: 2126078.324 ops/s
Iteration   1: 2113607.493 ops/s
Iteration   2: 2139802.268 ops/s
Iteration   3: 2138514.812 ops/s
Iteration   4: 2127651.184 ops/s
Iteration   5: 2140003.351 ops/s
Iteration   6: 2140031.896 ops/s
Iteration   7: 2130965.717 ops/s
Iteration   8: 2134797.315 ops/s
Iteration   9: 2135180.196 ops/s
Iteration  10: 2139105.622 ops/s
Iteration  11: 2132476.336 ops/s
Iteration  12: 2136332.086 ops/s
Iteration  13: 2131138.012 ops/s
Iteration  14: 2132031.828 ops/s
Iteration  15: 2132512.072 ops/s
Iteration  16: 2141448.916 ops/s
Iteration  17: 2145618.122 ops/s
Iteration  18: 2141667.511 ops/s
Iteration  19: 2128506.952 ops/s
Iteration  20: 2144071.090 ops/s
Iteration  21: 2130235.051 ops/s
Iteration  22: 2138242.284 ops/s
Iteration  23: 2144414.626 ops/s
Iteration  24: 2149166.954 ops/s
Iteration  25: 2147233.403 ops/s
Iteration  26: 2124585.254 ops/s
Iteration  27: 2126194.123 ops/s
Iteration  28: 2140219.073 ops/s
Iteration  29: 2123455.394 ops/s
Iteration  30: 2137257.168 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectChar":
  2135548.870 ±(99.9%) 5273.446 ops/s [Average]
  (min, avg, max) = (2113607.493, 2135548.870, 2149166.954), stdev = 7893.046
  CI (99.9%): [2130275.425, 2140822.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectChar  thrpt   30  2135548.870 ± 5273.446  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2277432.894 ops/s
# Warmup Iteration   2: 5343974.477 ops/s
# Warmup Iteration   3: 4542338.220 ops/s
# Warmup Iteration   4: 5383545.130 ops/s
# Warmup Iteration   5: 5397559.693 ops/s
# Warmup Iteration   6: 5409275.990 ops/s
# Warmup Iteration   7: 5389137.840 ops/s
# Warmup Iteration   8: 5416492.880 ops/s
# Warmup Iteration   9: 5386023.758 ops/s
# Warmup Iteration  10: 5395125.586 ops/s
# Warmup Iteration  11: 5393775.035 ops/s
# Warmup Iteration  12: 5417099.683 ops/s
# Warmup Iteration  13: 5420384.691 ops/s
# Warmup Iteration  14: 5386742.105 ops/s
# Warmup Iteration  15: 5402561.000 ops/s
# Warmup Iteration  16: 5415915.144 ops/s
# Warmup Iteration  17: 5387087.588 ops/s
# Warmup Iteration  18: 5434808.911 ops/s
# Warmup Iteration  19: 5409888.872 ops/s
# Warmup Iteration  20: 5401697.771 ops/s
# Warmup Iteration  21: 5428184.608 ops/s
# Warmup Iteration  22: 5413277.045 ops/s
# Warmup Iteration  23: 5422670.716 ops/s
# Warmup Iteration  24: 5411002.966 ops/s
# Warmup Iteration  25: 5427438.569 ops/s
# Warmup Iteration  26: 5399489.649 ops/s
# Warmup Iteration  27: 5404229.328 ops/s
# Warmup Iteration  28: 5420428.027 ops/s
# Warmup Iteration  29: 5421729.610 ops/s
# Warmup Iteration  30: 5438960.845 ops/s
Iteration   1: 5387127.990 ops/s
Iteration   2: 5412802.007 ops/s
Iteration   3: 5416502.244 ops/s
Iteration   4: 5451581.322 ops/s
Iteration   5: 5404949.507 ops/s
Iteration   6: 5445908.606 ops/s
Iteration   7: 5459474.197 ops/s
Iteration   8: 5413117.706 ops/s
Iteration   9: 5417708.735 ops/s
Iteration  10: 5445267.870 ops/s
Iteration  11: 5425128.636 ops/s
Iteration  12: 5437205.058 ops/s
Iteration  13: 5418763.903 ops/s
Iteration  14: 5403076.069 ops/s
Iteration  15: 5398252.449 ops/s
Iteration  16: 5427414.138 ops/s
Iteration  17: 5427064.827 ops/s
Iteration  18: 5400913.039 ops/s
Iteration  19: 5415881.788 ops/s
Iteration  20: 5430051.687 ops/s
Iteration  21: 5442922.716 ops/s
Iteration  22: 5420390.719 ops/s
Iteration  23: 5437138.502 ops/s
Iteration  24: 5401200.890 ops/s
Iteration  25: 5408773.910 ops/s
Iteration  26: 5432196.613 ops/s
Iteration  27: 5399855.442 ops/s
Iteration  28: 5350683.636 ops/s
Iteration  29: 5387023.285 ops/s
Iteration  30: 5397521.616 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithBagTarget":
  5417196.637 ±(99.9%) 15181.946 ops/s [Average]
  (min, avg, max) = (5350683.636, 5417196.637, 5459474.197), stdev = 22723.624
  CI (99.9%): [5402014.691, 5432378.583] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  5417196.637 ± 15181.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1775732.944 ops/s
# Warmup Iteration   2: 4282477.667 ops/s
# Warmup Iteration   3: 3876428.529 ops/s
# Warmup Iteration   4: 4032051.954 ops/s
# Warmup Iteration   5: 4271758.980 ops/s
# Warmup Iteration   6: 4316270.042 ops/s
# Warmup Iteration   7: 4288522.411 ops/s
# Warmup Iteration   8: 4302725.960 ops/s
# Warmup Iteration   9: 4295433.614 ops/s
# Warmup Iteration  10: 4262222.719 ops/s
# Warmup Iteration  11: 4280746.293 ops/s
# Warmup Iteration  12: 4296233.881 ops/s
# Warmup Iteration  13: 4305428.578 ops/s
# Warmup Iteration  14: 4296270.975 ops/s
# Warmup Iteration  15: 4266682.164 ops/s
# Warmup Iteration  16: 4275804.854 ops/s
# Warmup Iteration  17: 4280973.999 ops/s
# Warmup Iteration  18: 4309138.186 ops/s
# Warmup Iteration  19: 4297717.169 ops/s
# Warmup Iteration  20: 4295367.157 ops/s
# Warmup Iteration  21: 4285081.606 ops/s
# Warmup Iteration  22: 4317209.983 ops/s
# Warmup Iteration  23: 4308078.412 ops/s
# Warmup Iteration  24: 4296646.291 ops/s
# Warmup Iteration  25: 4291384.516 ops/s
# Warmup Iteration  26: 4297773.831 ops/s
# Warmup Iteration  27: 4294294.405 ops/s
# Warmup Iteration  28: 4293637.905 ops/s
# Warmup Iteration  29: 4250400.091 ops/s
# Warmup Iteration  30: 4271697.756 ops/s
Iteration   1: 4281683.768 ops/s
Iteration   2: 4301414.713 ops/s
Iteration   3: 4284856.156 ops/s
Iteration   4: 4306892.221 ops/s
Iteration   5: 4274872.632 ops/s
Iteration   6: 4316459.948 ops/s
Iteration   7: 4278508.076 ops/s
Iteration   8: 4312969.371 ops/s
Iteration   9: 4281105.942 ops/s
Iteration  10: 4316893.016 ops/s
Iteration  11: 4324895.698 ops/s
Iteration  12: 4316587.749 ops/s
Iteration  13: 4286246.408 ops/s
Iteration  14: 4282093.705 ops/s
Iteration  15: 4331648.217 ops/s
Iteration  16: 4299893.328 ops/s
Iteration  17: 4296461.097 ops/s
Iteration  18: 4301733.414 ops/s
Iteration  19: 4294364.067 ops/s
Iteration  20: 4307707.315 ops/s
Iteration  21: 4301965.970 ops/s
Iteration  22: 4302734.803 ops/s
Iteration  23: 4319561.127 ops/s
Iteration  24: 4277267.935 ops/s
Iteration  25: 4305624.435 ops/s
Iteration  26: 4308713.877 ops/s
Iteration  27: 4310992.723 ops/s
Iteration  28: 4294527.293 ops/s
Iteration  29: 4277270.869 ops/s
Iteration  30: 4267368.106 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectCharWithTarget":
  4298777.133 ±(99.9%) 11102.190 ops/s [Average]
  (min, avg, max) = (4267368.106, 4298777.133, 4331648.217), stdev = 16617.237
  CI (99.9%): [4287674.942, 4309879.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  4298777.133 ± 11102.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689069.403 ops/s
# Warmup Iteration   2: 1618896.182 ops/s
# Warmup Iteration   3: 1619003.435 ops/s
# Warmup Iteration   4: 1362880.543 ops/s
# Warmup Iteration   5: 1621348.233 ops/s
# Warmup Iteration   6: 1619281.206 ops/s
# Warmup Iteration   7: 1615563.004 ops/s
# Warmup Iteration   8: 1620624.331 ops/s
# Warmup Iteration   9: 1634389.804 ops/s
# Warmup Iteration  10: 1622386.336 ops/s
# Warmup Iteration  11: 1629372.488 ops/s
# Warmup Iteration  12: 1626913.448 ops/s
# Warmup Iteration  13: 1609202.531 ops/s
# Warmup Iteration  14: 1614652.714 ops/s
# Warmup Iteration  15: 1623917.228 ops/s
# Warmup Iteration  16: 1630529.021 ops/s
# Warmup Iteration  17: 1631634.330 ops/s
# Warmup Iteration  18: 1628695.506 ops/s
# Warmup Iteration  19: 1631173.625 ops/s
# Warmup Iteration  20: 1632553.552 ops/s
# Warmup Iteration  21: 1634883.123 ops/s
# Warmup Iteration  22: 1630498.741 ops/s
# Warmup Iteration  23: 1632278.121 ops/s
# Warmup Iteration  24: 1636632.495 ops/s
# Warmup Iteration  25: 1632769.378 ops/s
# Warmup Iteration  26: 1637129.104 ops/s
# Warmup Iteration  27: 1632860.900 ops/s
# Warmup Iteration  28: 1620091.502 ops/s
# Warmup Iteration  29: 1634514.671 ops/s
# Warmup Iteration  30: 1619333.708 ops/s
Iteration   1: 1637644.157 ops/s
Iteration   2: 1629999.866 ops/s
Iteration   3: 1628180.748 ops/s
Iteration   4: 1633938.377 ops/s
Iteration   5: 1642891.005 ops/s
Iteration   6: 1624129.900 ops/s
Iteration   7: 1634361.725 ops/s
Iteration   8: 1623054.203 ops/s
Iteration   9: 1635507.951 ops/s
Iteration  10: 1629252.158 ops/s
Iteration  11: 1641263.092 ops/s
Iteration  12: 1631512.768 ops/s
Iteration  13: 1628034.036 ops/s
Iteration  14: 1644639.682 ops/s
Iteration  15: 1646405.816 ops/s
Iteration  16: 1641054.093 ops/s
Iteration  17: 1630993.533 ops/s
Iteration  18: 1629260.312 ops/s
Iteration  19: 1637135.738 ops/s
Iteration  20: 1633962.296 ops/s
Iteration  21: 1629901.295 ops/s
Iteration  22: 1633151.300 ops/s
Iteration  23: 1639775.542 ops/s
Iteration  24: 1642533.298 ops/s
Iteration  25: 1634424.828 ops/s
Iteration  26: 1608028.049 ops/s
Iteration  27: 1608000.200 ops/s
Iteration  28: 1645087.158 ops/s
Iteration  29: 1641404.158 ops/s
Iteration  30: 1624242.850 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDouble":
  1632992.338 ±(99.9%) 6269.915 ops/s [Average]
  (min, avg, max) = (1608000.200, 1632992.338, 1646405.816), stdev = 9384.515
  CI (99.9%): [1626722.423, 1639262.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectDouble  thrpt   30  1632992.338 ± 6269.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1544819.321 ops/s
# Warmup Iteration   2: 3659588.726 ops/s
# Warmup Iteration   3: 3285621.922 ops/s
# Warmup Iteration   4: 3550099.723 ops/s
# Warmup Iteration   5: 3731493.872 ops/s
# Warmup Iteration   6: 3736690.986 ops/s
# Warmup Iteration   7: 3718955.244 ops/s
# Warmup Iteration   8: 3741878.236 ops/s
# Warmup Iteration   9: 3713039.133 ops/s
# Warmup Iteration  10: 3734226.466 ops/s
# Warmup Iteration  11: 3751316.609 ops/s
# Warmup Iteration  12: 3738955.576 ops/s
# Warmup Iteration  13: 3708469.689 ops/s
# Warmup Iteration  14: 3699447.043 ops/s
# Warmup Iteration  15: 3730407.488 ops/s
# Warmup Iteration  16: 3732412.360 ops/s
# Warmup Iteration  17: 3753566.207 ops/s
# Warmup Iteration  18: 3722538.488 ops/s
# Warmup Iteration  19: 3729791.494 ops/s
# Warmup Iteration  20: 3739240.828 ops/s
# Warmup Iteration  21: 3724971.886 ops/s
# Warmup Iteration  22: 3716162.936 ops/s
# Warmup Iteration  23: 3727825.847 ops/s
# Warmup Iteration  24: 3732373.047 ops/s
# Warmup Iteration  25: 3738392.839 ops/s
# Warmup Iteration  26: 3723346.861 ops/s
# Warmup Iteration  27: 3731342.279 ops/s
# Warmup Iteration  28: 3713695.008 ops/s
# Warmup Iteration  29: 3740207.447 ops/s
# Warmup Iteration  30: 3728622.032 ops/s
Iteration   1: 3738490.251 ops/s
Iteration   2: 3736075.654 ops/s
Iteration   3: 3750809.216 ops/s
Iteration   4: 3743166.351 ops/s
Iteration   5: 3720001.653 ops/s
Iteration   6: 3735974.219 ops/s
Iteration   7: 3731191.151 ops/s
Iteration   8: 3760948.342 ops/s
Iteration   9: 3741899.981 ops/s
Iteration  10: 3738213.853 ops/s
Iteration  11: 3723300.057 ops/s
Iteration  12: 3735472.477 ops/s
Iteration  13: 3724280.677 ops/s
Iteration  14: 3730039.765 ops/s
Iteration  15: 3746815.963 ops/s
Iteration  16: 3747270.803 ops/s
Iteration  17: 3726762.891 ops/s
Iteration  18: 3751665.045 ops/s
Iteration  19: 3748351.844 ops/s
Iteration  20: 3735201.476 ops/s
Iteration  21: 3749765.703 ops/s
Iteration  22: 3745436.967 ops/s
Iteration  23: 3761564.680 ops/s
Iteration  24: 3740333.776 ops/s
Iteration  25: 3732304.171 ops/s
Iteration  26: 3742502.224 ops/s
Iteration  27: 3720865.564 ops/s
Iteration  28: 3718767.217 ops/s
Iteration  29: 3744525.509 ops/s
Iteration  30: 3752749.785 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  3739158.242 ±(99.9%) 7715.337 ops/s [Average]
  (min, avg, max) = (3718767.217, 3739158.242, 3761564.680), stdev = 11547.953
  CI (99.9%): [3731442.906, 3746873.579] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  3739158.242 ± 7715.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1230603.809 ops/s
# Warmup Iteration   2: 3052370.771 ops/s
# Warmup Iteration   3: 2899716.880 ops/s
# Warmup Iteration   4: 2717026.786 ops/s
# Warmup Iteration   5: 3068166.243 ops/s
# Warmup Iteration   6: 3063435.911 ops/s
# Warmup Iteration   7: 3064572.591 ops/s
# Warmup Iteration   8: 3062954.650 ops/s
# Warmup Iteration   9: 3076504.304 ops/s
# Warmup Iteration  10: 3073960.963 ops/s
# Warmup Iteration  11: 3067254.994 ops/s
# Warmup Iteration  12: 3065709.834 ops/s
# Warmup Iteration  13: 3067152.718 ops/s
# Warmup Iteration  14: 3065706.362 ops/s
# Warmup Iteration  15: 3075794.188 ops/s
# Warmup Iteration  16: 3071751.182 ops/s
# Warmup Iteration  17: 3075458.725 ops/s
# Warmup Iteration  18: 3069608.797 ops/s
# Warmup Iteration  19: 3076304.713 ops/s
# Warmup Iteration  20: 3072240.467 ops/s
# Warmup Iteration  21: 3062467.702 ops/s
# Warmup Iteration  22: 3062460.261 ops/s
# Warmup Iteration  23: 3076031.630 ops/s
# Warmup Iteration  24: 3091659.063 ops/s
# Warmup Iteration  25: 3073020.660 ops/s
# Warmup Iteration  26: 3073883.128 ops/s
# Warmup Iteration  27: 3076375.348 ops/s
# Warmup Iteration  28: 3066956.795 ops/s
# Warmup Iteration  29: 3057992.127 ops/s
# Warmup Iteration  30: 3068820.834 ops/s
Iteration   1: 3062631.511 ops/s
Iteration   2: 3062293.413 ops/s
Iteration   3: 3068241.865 ops/s
Iteration   4: 3054882.844 ops/s
Iteration   5: 3064167.042 ops/s
Iteration   6: 3075999.611 ops/s
Iteration   7: 3063281.880 ops/s
Iteration   8: 3074488.154 ops/s
Iteration   9: 3073050.520 ops/s
Iteration  10: 3082314.542 ops/s
Iteration  11: 3075799.673 ops/s
Iteration  12: 3088110.934 ops/s
Iteration  13: 3064665.489 ops/s
Iteration  14: 3058262.490 ops/s
Iteration  15: 3077493.614 ops/s
Iteration  16: 3071444.641 ops/s
Iteration  17: 3061362.466 ops/s
Iteration  18: 3071111.160 ops/s
Iteration  19: 3074205.844 ops/s
Iteration  20: 3065753.693 ops/s
Iteration  21: 3077273.649 ops/s
Iteration  22: 3035605.348 ops/s
Iteration  23: 3065707.337 ops/s
Iteration  24: 3055054.825 ops/s
Iteration  25: 3038929.215 ops/s
Iteration  26: 3055394.343 ops/s
Iteration  27: 3077978.261 ops/s
Iteration  28: 3065204.043 ops/s
Iteration  29: 3075493.629 ops/s
Iteration  30: 3076072.019 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithTarget":
  3067075.802 ±(99.9%) 7740.733 ops/s [Average]
  (min, avg, max) = (3035605.348, 3067075.802, 3088110.934), stdev = 11585.965
  CI (99.9%): [3059335.069, 3074816.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  3067075.802 ± 7740.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 813897.812 ops/s
# Warmup Iteration   2: 1894105.419 ops/s
# Warmup Iteration   3: 1917613.195 ops/s
# Warmup Iteration   4: 1608560.552 ops/s
# Warmup Iteration   5: 1913121.447 ops/s
# Warmup Iteration   6: 1921659.655 ops/s
# Warmup Iteration   7: 1932047.629 ops/s
# Warmup Iteration   8: 1921867.602 ops/s
# Warmup Iteration   9: 1923299.662 ops/s
# Warmup Iteration  10: 1915812.079 ops/s
# Warmup Iteration  11: 1923659.651 ops/s
# Warmup Iteration  12: 1928303.225 ops/s
# Warmup Iteration  13: 1908223.680 ops/s
# Warmup Iteration  14: 1909418.018 ops/s
# Warmup Iteration  15: 1923974.870 ops/s
# Warmup Iteration  16: 1919678.550 ops/s
# Warmup Iteration  17: 1918416.720 ops/s
# Warmup Iteration  18: 1923865.837 ops/s
# Warmup Iteration  19: 1923222.772 ops/s
# Warmup Iteration  20: 1925440.478 ops/s
# Warmup Iteration  21: 1924984.664 ops/s
# Warmup Iteration  22: 1919702.610 ops/s
# Warmup Iteration  23: 1919095.562 ops/s
# Warmup Iteration  24: 1926142.472 ops/s
# Warmup Iteration  25: 1926172.387 ops/s
# Warmup Iteration  26: 1913952.726 ops/s
# Warmup Iteration  27: 1903811.390 ops/s
# Warmup Iteration  28: 1921233.858 ops/s
# Warmup Iteration  29: 1913387.429 ops/s
# Warmup Iteration  30: 1917602.173 ops/s
Iteration   1: 1923743.906 ops/s
Iteration   2: 1925522.014 ops/s
Iteration   3: 1915434.330 ops/s
Iteration   4: 1921148.374 ops/s
Iteration   5: 1917661.466 ops/s
Iteration   6: 1922154.157 ops/s
Iteration   7: 1911552.618 ops/s
Iteration   8: 1919736.166 ops/s
Iteration   9: 1915864.261 ops/s
Iteration  10: 1927697.292 ops/s
Iteration  11: 1911030.873 ops/s
Iteration  12: 1914513.416 ops/s
Iteration  13: 1921059.624 ops/s
Iteration  14: 1921203.020 ops/s
Iteration  15: 1909036.963 ops/s
Iteration  16: 1917599.930 ops/s
Iteration  17: 1913082.597 ops/s
Iteration  18: 1921013.399 ops/s
Iteration  19: 1908846.324 ops/s
Iteration  20: 1912551.110 ops/s
Iteration  21: 1918451.227 ops/s
Iteration  22: 1926168.484 ops/s
Iteration  23: 1920806.933 ops/s
Iteration  24: 1912666.348 ops/s
Iteration  25: 1911527.475 ops/s
Iteration  26: 1903313.026 ops/s
Iteration  27: 1920590.007 ops/s
Iteration  28: 1924742.907 ops/s
Iteration  29: 1918535.033 ops/s
Iteration  30: 1926333.085 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloat":
  1917786.212 ±(99.9%) 4030.868 ops/s [Average]
  (min, avg, max) = (1903313.026, 1917786.212, 1927697.292), stdev = 6033.214
  CI (99.9%): [1913755.344, 1921817.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectFloat  thrpt   30  1917786.212 ± 4030.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1707585.575 ops/s
# Warmup Iteration   2: 3945707.918 ops/s
# Warmup Iteration   3: 3971276.622 ops/s
# Warmup Iteration   4: 3342137.111 ops/s
# Warmup Iteration   5: 3982509.706 ops/s
# Warmup Iteration   6: 3976149.134 ops/s
# Warmup Iteration   7: 3982151.005 ops/s
# Warmup Iteration   8: 3996999.327 ops/s
# Warmup Iteration   9: 3991367.466 ops/s
# Warmup Iteration  10: 4000347.055 ops/s
# Warmup Iteration  11: 3944448.044 ops/s
# Warmup Iteration  12: 3987294.201 ops/s
# Warmup Iteration  13: 3991629.462 ops/s
# Warmup Iteration  14: 3996321.227 ops/s
# Warmup Iteration  15: 3985452.176 ops/s
# Warmup Iteration  16: 3994978.819 ops/s
# Warmup Iteration  17: 4005474.672 ops/s
# Warmup Iteration  18: 3982238.850 ops/s
# Warmup Iteration  19: 4006163.653 ops/s
# Warmup Iteration  20: 3998061.897 ops/s
# Warmup Iteration  21: 4005173.164 ops/s
# Warmup Iteration  22: 4006826.521 ops/s
# Warmup Iteration  23: 3999182.871 ops/s
# Warmup Iteration  24: 4005513.656 ops/s
# Warmup Iteration  25: 3996268.272 ops/s
# Warmup Iteration  26: 3986182.702 ops/s
# Warmup Iteration  27: 3971103.608 ops/s
# Warmup Iteration  28: 3994950.238 ops/s
# Warmup Iteration  29: 3993005.906 ops/s
# Warmup Iteration  30: 3986655.411 ops/s
Iteration   1: 3991189.337 ops/s
Iteration   2: 4019310.450 ops/s
Iteration   3: 3999025.704 ops/s
Iteration   4: 4007269.060 ops/s
Iteration   5: 3987452.828 ops/s
Iteration   6: 4011001.607 ops/s
Iteration   7: 3985735.386 ops/s
Iteration   8: 4004440.817 ops/s
Iteration   9: 3989119.384 ops/s
Iteration  10: 4029010.432 ops/s
Iteration  11: 3985348.601 ops/s
Iteration  12: 4000398.997 ops/s
Iteration  13: 3997497.135 ops/s
Iteration  14: 3993100.121 ops/s
Iteration  15: 4004855.745 ops/s
Iteration  16: 3993771.487 ops/s
Iteration  17: 3987336.278 ops/s
Iteration  18: 3990300.322 ops/s
Iteration  19: 3983011.355 ops/s
Iteration  20: 3992078.664 ops/s
Iteration  21: 3980636.277 ops/s
Iteration  22: 3957821.046 ops/s
Iteration  23: 3990153.203 ops/s
Iteration  24: 3962639.776 ops/s
Iteration  25: 3993755.388 ops/s
Iteration  26: 3991563.332 ops/s
Iteration  27: 3992216.554 ops/s
Iteration  28: 4003737.967 ops/s
Iteration  29: 4012030.260 ops/s
Iteration  30: 4013228.298 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget":
  3994967.860 ±(99.9%) 9843.001 ops/s [Average]
  (min, avg, max) = (3957821.046, 3994967.860, 4029010.432), stdev = 14732.542
  CI (99.9%): [3985124.859, 4004810.861] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  3994967.860 ± 9843.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1445644.993 ops/s
# Warmup Iteration   2: 3487770.282 ops/s
# Warmup Iteration   3: 3481208.169 ops/s
# Warmup Iteration   4: 2885851.538 ops/s
# Warmup Iteration   5: 3487089.835 ops/s
# Warmup Iteration   6: 3476838.452 ops/s
# Warmup Iteration   7: 3478726.929 ops/s
# Warmup Iteration   8: 3495576.777 ops/s
# Warmup Iteration   9: 3466938.304 ops/s
# Warmup Iteration  10: 3476273.907 ops/s
# Warmup Iteration  11: 3474023.498 ops/s
# Warmup Iteration  12: 3449719.697 ops/s
# Warmup Iteration  13: 3474121.563 ops/s
# Warmup Iteration  14: 3490034.330 ops/s
# Warmup Iteration  15: 3476411.680 ops/s
# Warmup Iteration  16: 3486518.004 ops/s
# Warmup Iteration  17: 3480429.640 ops/s
# Warmup Iteration  18: 3479934.302 ops/s
# Warmup Iteration  19: 3484403.642 ops/s
# Warmup Iteration  20: 3477027.640 ops/s
# Warmup Iteration  21: 3477375.534 ops/s
# Warmup Iteration  22: 3481765.016 ops/s
# Warmup Iteration  23: 3483001.309 ops/s
# Warmup Iteration  24: 3475498.116 ops/s
# Warmup Iteration  25: 3468764.056 ops/s
# Warmup Iteration  26: 3459264.217 ops/s
# Warmup Iteration  27: 3471681.750 ops/s
# Warmup Iteration  28: 3480770.480 ops/s
# Warmup Iteration  29: 3477187.792 ops/s
# Warmup Iteration  30: 3473742.656 ops/s
Iteration   1: 3496482.023 ops/s
Iteration   2: 3480672.321 ops/s
Iteration   3: 3457156.923 ops/s
Iteration   4: 3480135.814 ops/s
Iteration   5: 3475435.767 ops/s
Iteration   6: 3446061.689 ops/s
Iteration   7: 3456822.069 ops/s
Iteration   8: 3474005.697 ops/s
Iteration   9: 3465728.911 ops/s
Iteration  10: 3448951.969 ops/s
Iteration  11: 3471706.539 ops/s
Iteration  12: 3468388.907 ops/s
Iteration  13: 3468898.723 ops/s
Iteration  14: 3472404.951 ops/s
Iteration  15: 3483633.794 ops/s
Iteration  16: 3471943.538 ops/s
Iteration  17: 3481848.526 ops/s
Iteration  18: 3469193.089 ops/s
Iteration  19: 3487452.292 ops/s
Iteration  20: 3472716.669 ops/s
Iteration  21: 3491455.860 ops/s
Iteration  22: 3479385.065 ops/s
Iteration  23: 3468582.608 ops/s
Iteration  24: 3447303.245 ops/s
Iteration  25: 3483701.117 ops/s
Iteration  26: 3487365.402 ops/s
Iteration  27: 3472152.143 ops/s
Iteration  28: 3460797.820 ops/s
Iteration  29: 3455134.946 ops/s
Iteration  30: 3479697.929 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectFloatWithTarget":
  3471840.545 ±(99.9%) 8639.411 ops/s [Average]
  (min, avg, max) = (3446061.689, 3471840.545, 3496482.023), stdev = 12931.065
  CI (99.9%): [3463201.134, 3480479.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  3471840.545 ± 8639.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 941091.189 ops/s
# Warmup Iteration   2: 2217098.646 ops/s
# Warmup Iteration   3: 2225787.835 ops/s
# Warmup Iteration   4: 1850666.312 ops/s
# Warmup Iteration   5: 2253200.727 ops/s
# Warmup Iteration   6: 2239440.000 ops/s
# Warmup Iteration   7: 2222221.353 ops/s
# Warmup Iteration   8: 2227932.243 ops/s
# Warmup Iteration   9: 2252944.410 ops/s
# Warmup Iteration  10: 2239830.593 ops/s
# Warmup Iteration  11: 2226328.368 ops/s
# Warmup Iteration  12: 2222114.111 ops/s
# Warmup Iteration  13: 2239661.534 ops/s
# Warmup Iteration  14: 2237397.816 ops/s
# Warmup Iteration  15: 2245066.222 ops/s
# Warmup Iteration  16: 2249177.430 ops/s
# Warmup Iteration  17: 2237643.316 ops/s
# Warmup Iteration  18: 2210370.428 ops/s
# Warmup Iteration  19: 2221577.115 ops/s
# Warmup Iteration  20: 2224068.473 ops/s
# Warmup Iteration  21: 2225167.494 ops/s
# Warmup Iteration  22: 2219759.875 ops/s
# Warmup Iteration  23: 2222524.257 ops/s
# Warmup Iteration  24: 2206445.580 ops/s
# Warmup Iteration  25: 2231167.568 ops/s
# Warmup Iteration  26: 2209544.780 ops/s
# Warmup Iteration  27: 2214723.293 ops/s
# Warmup Iteration  28: 2216414.642 ops/s
# Warmup Iteration  29: 2224800.484 ops/s
# Warmup Iteration  30: 2205300.945 ops/s
Iteration   1: 2216082.258 ops/s
Iteration   2: 2230094.489 ops/s
Iteration   3: 2203960.289 ops/s
Iteration   4: 2229667.718 ops/s
Iteration   5: 2223984.528 ops/s
Iteration   6: 2222287.805 ops/s
Iteration   7: 2225779.311 ops/s
Iteration   8: 2199814.190 ops/s
Iteration   9: 2223752.523 ops/s
Iteration  10: 2228365.229 ops/s
Iteration  11: 2212255.145 ops/s
Iteration  12: 2210862.496 ops/s
Iteration  13: 2203942.585 ops/s
Iteration  14: 2222716.236 ops/s
Iteration  15: 2230232.599 ops/s
Iteration  16: 2231409.707 ops/s
Iteration  17: 2220640.214 ops/s
Iteration  18: 2231176.357 ops/s
Iteration  19: 2199881.722 ops/s
Iteration  20: 2201555.535 ops/s
Iteration  21: 2219660.056 ops/s
Iteration  22: 2242890.953 ops/s
Iteration  23: 2240081.948 ops/s
Iteration  24: 2227872.461 ops/s
Iteration  25: 2228002.548 ops/s
Iteration  26: 2218443.089 ops/s
Iteration  27: 2239241.330 ops/s
Iteration  28: 2214375.760 ops/s
Iteration  29: 2210376.569 ops/s
Iteration  30: 2211554.674 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIf":
  2220698.678 ±(99.9%) 7977.760 ops/s [Average]
  (min, avg, max) = (2199814.190, 2220698.678, 2242890.953), stdev = 11940.737
  CI (99.9%): [2212720.918, 2228676.438] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectIf  thrpt   30  2220698.678 ± 7977.760  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 972284.858 ops/s
# Warmup Iteration   2: 2331257.460 ops/s
# Warmup Iteration   3: 2314239.744 ops/s
# Warmup Iteration   4: 1942094.853 ops/s
# Warmup Iteration   5: 2333155.626 ops/s
# Warmup Iteration   6: 2321867.111 ops/s
# Warmup Iteration   7: 2312695.124 ops/s
# Warmup Iteration   8: 2320108.069 ops/s
# Warmup Iteration   9: 2329384.869 ops/s
# Warmup Iteration  10: 2308717.778 ops/s
# Warmup Iteration  11: 2313509.042 ops/s
# Warmup Iteration  12: 2315666.447 ops/s
# Warmup Iteration  13: 2317671.372 ops/s
# Warmup Iteration  14: 2325010.698 ops/s
# Warmup Iteration  15: 2325684.762 ops/s
# Warmup Iteration  16: 2315861.480 ops/s
# Warmup Iteration  17: 2315035.365 ops/s
# Warmup Iteration  18: 2322209.326 ops/s
# Warmup Iteration  19: 2321499.289 ops/s
# Warmup Iteration  20: 2315422.654 ops/s
# Warmup Iteration  21: 2315143.652 ops/s
# Warmup Iteration  22: 2314837.784 ops/s
# Warmup Iteration  23: 2317749.679 ops/s
# Warmup Iteration  24: 2311856.010 ops/s
# Warmup Iteration  25: 2318767.370 ops/s
# Warmup Iteration  26: 2296751.096 ops/s
# Warmup Iteration  27: 2326437.519 ops/s
# Warmup Iteration  28: 2323617.908 ops/s
# Warmup Iteration  29: 2316513.722 ops/s
# Warmup Iteration  30: 2320507.149 ops/s
Iteration   1: 2331745.579 ops/s
Iteration   2: 2319776.136 ops/s
Iteration   3: 2288876.148 ops/s
Iteration   4: 2318905.861 ops/s
Iteration   5: 2312725.287 ops/s
Iteration   6: 2332685.579 ops/s
Iteration   7: 2328650.929 ops/s
Iteration   8: 2298250.205 ops/s
Iteration   9: 2329545.232 ops/s
Iteration  10: 2311582.482 ops/s
Iteration  11: 2319271.540 ops/s
Iteration  12: 2310066.831 ops/s
Iteration  13: 2310586.477 ops/s
Iteration  14: 2318857.602 ops/s
Iteration  15: 2335212.819 ops/s
Iteration  16: 2317478.818 ops/s
Iteration  17: 2322497.148 ops/s
Iteration  18: 2322157.997 ops/s
Iteration  19: 2316469.503 ops/s
Iteration  20: 2294732.310 ops/s
Iteration  21: 2278090.185 ops/s
Iteration  22: 2301845.436 ops/s
Iteration  23: 2308457.387 ops/s
Iteration  24: 2318978.855 ops/s
Iteration  25: 2330310.185 ops/s
Iteration  26: 2318373.003 ops/s
Iteration  27: 2328627.681 ops/s
Iteration  28: 2319153.744 ops/s
Iteration  29: 2319020.384 ops/s
Iteration  30: 2322941.865 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectInt":
  2316195.774 ±(99.9%) 8860.190 ops/s [Average]
  (min, avg, max) = (2278090.185, 2316195.774, 2335212.819), stdev = 13261.516
  CI (99.9%): [2307335.584, 2325055.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectInt  thrpt   30  2316195.774 ± 8860.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2099708.373 ops/s
# Warmup Iteration   2: 4957900.355 ops/s
# Warmup Iteration   3: 4143829.939 ops/s
# Warmup Iteration   4: 5060731.595 ops/s
# Warmup Iteration   5: 5023760.233 ops/s
# Warmup Iteration   6: 4988214.367 ops/s
# Warmup Iteration   7: 5020714.181 ops/s
# Warmup Iteration   8: 5015137.861 ops/s
# Warmup Iteration   9: 4952624.779 ops/s
# Warmup Iteration  10: 5014471.889 ops/s
# Warmup Iteration  11: 4978843.302 ops/s
# Warmup Iteration  12: 4956916.899 ops/s
# Warmup Iteration  13: 4966339.315 ops/s
# Warmup Iteration  14: 4979618.609 ops/s
# Warmup Iteration  15: 4960078.521 ops/s
# Warmup Iteration  16: 5011072.300 ops/s
# Warmup Iteration  17: 4970773.513 ops/s
# Warmup Iteration  18: 4970750.825 ops/s
# Warmup Iteration  19: 4992952.024 ops/s
# Warmup Iteration  20: 4965812.755 ops/s
# Warmup Iteration  21: 5001881.071 ops/s
# Warmup Iteration  22: 5000348.256 ops/s
# Warmup Iteration  23: 4960662.320 ops/s
# Warmup Iteration  24: 4988012.709 ops/s
# Warmup Iteration  25: 4923217.259 ops/s
# Warmup Iteration  26: 4996020.197 ops/s
# Warmup Iteration  27: 5004816.561 ops/s
# Warmup Iteration  28: 4988773.114 ops/s
# Warmup Iteration  29: 4977641.458 ops/s
# Warmup Iteration  30: 4999262.731 ops/s
Iteration   1: 4961884.242 ops/s
Iteration   2: 4995308.966 ops/s
Iteration   3: 5047276.082 ops/s
Iteration   4: 5028282.291 ops/s
Iteration   5: 5003909.975 ops/s
Iteration   6: 4974058.125 ops/s
Iteration   7: 5006473.181 ops/s
Iteration   8: 4976009.139 ops/s
Iteration   9: 5000210.531 ops/s
Iteration  10: 4978655.411 ops/s
Iteration  11: 4983347.741 ops/s
Iteration  12: 4991860.701 ops/s
Iteration  13: 4997302.381 ops/s
Iteration  14: 4978948.126 ops/s
Iteration  15: 4977493.510 ops/s
Iteration  16: 4984861.706 ops/s
Iteration  17: 4942615.218 ops/s
Iteration  18: 4957321.535 ops/s
Iteration  19: 4989079.733 ops/s
Iteration  20: 5012263.332 ops/s
Iteration  21: 4985721.421 ops/s
Iteration  22: 5048656.720 ops/s
Iteration  23: 5013508.024 ops/s
Iteration  24: 5016724.334 ops/s
Iteration  25: 4949106.373 ops/s
Iteration  26: 4980257.248 ops/s
Iteration  27: 4989108.876 ops/s
Iteration  28: 5018316.050 ops/s
Iteration  29: 5053204.036 ops/s
Iteration  30: 4993652.308 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithBagTarget":
  4994513.911 ±(99.9%) 18242.484 ops/s [Average]
  (min, avg, max) = (4942615.218, 4994513.911, 5053204.036), stdev = 27304.493
  CI (99.9%): [4976271.427, 5012756.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  4994513.911 ± 18242.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1562212.161 ops/s
# Warmup Iteration   2: 4010122.866 ops/s
# Warmup Iteration   3: 3744482.383 ops/s
# Warmup Iteration   4: 3527955.390 ops/s
# Warmup Iteration   5: 3975810.364 ops/s
# Warmup Iteration   6: 3989729.440 ops/s
# Warmup Iteration   7: 3983907.389 ops/s
# Warmup Iteration   8: 3983897.328 ops/s
# Warmup Iteration   9: 3975556.675 ops/s
# Warmup Iteration  10: 3974576.808 ops/s
# Warmup Iteration  11: 3988020.594 ops/s
# Warmup Iteration  12: 3972654.609 ops/s
# Warmup Iteration  13: 3983915.064 ops/s
# Warmup Iteration  14: 3987072.089 ops/s
# Warmup Iteration  15: 3998928.346 ops/s
# Warmup Iteration  16: 3986926.158 ops/s
# Warmup Iteration  17: 3987182.358 ops/s
# Warmup Iteration  18: 3995515.687 ops/s
# Warmup Iteration  19: 3976854.900 ops/s
# Warmup Iteration  20: 3972491.573 ops/s
# Warmup Iteration  21: 3971890.020 ops/s
# Warmup Iteration  22: 3993021.712 ops/s
# Warmup Iteration  23: 3968435.807 ops/s
# Warmup Iteration  24: 3953020.065 ops/s
# Warmup Iteration  25: 3966867.303 ops/s
# Warmup Iteration  26: 3983140.814 ops/s
# Warmup Iteration  27: 3985396.401 ops/s
# Warmup Iteration  28: 3976531.801 ops/s
# Warmup Iteration  29: 3980413.025 ops/s
# Warmup Iteration  30: 3984783.606 ops/s
Iteration   1: 3991676.152 ops/s
Iteration   2: 3995587.555 ops/s
Iteration   3: 3987100.705 ops/s
Iteration   4: 3992843.531 ops/s
Iteration   5: 3976336.901 ops/s
Iteration   6: 4000215.907 ops/s
Iteration   7: 3976831.299 ops/s
Iteration   8: 4000951.992 ops/s
Iteration   9: 4004528.934 ops/s
Iteration  10: 3976641.702 ops/s
Iteration  11: 3990401.030 ops/s
Iteration  12: 3971948.811 ops/s
Iteration  13: 3967976.253 ops/s
Iteration  14: 3988353.175 ops/s
Iteration  15: 3991432.190 ops/s
Iteration  16: 3995176.965 ops/s
Iteration  17: 3965509.709 ops/s
Iteration  18: 3962397.214 ops/s
Iteration  19: 3963713.447 ops/s
Iteration  20: 3970075.061 ops/s
Iteration  21: 3990081.104 ops/s
Iteration  22: 3981262.694 ops/s
Iteration  23: 3986537.053 ops/s
Iteration  24: 3976045.613 ops/s
Iteration  25: 4002748.840 ops/s
Iteration  26: 3982050.902 ops/s
Iteration  27: 3964709.220 ops/s
Iteration  28: 3989831.149 ops/s
Iteration  29: 3990539.562 ops/s
Iteration  30: 3988722.230 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectIntWithTarget":
  3984074.230 ±(99.9%) 8242.345 ops/s [Average]
  (min, avg, max) = (3962397.214, 3984074.230, 4004528.934), stdev = 12336.755
  CI (99.9%): [3975831.885, 3992316.575] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  3984074.230 ± 8242.345  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 898741.169 ops/s
# Warmup Iteration   2: 1932057.550 ops/s
# Warmup Iteration   3: 1682339.599 ops/s
# Warmup Iteration   4: 1925388.173 ops/s
# Warmup Iteration   5: 1943522.220 ops/s
# Warmup Iteration   6: 1925232.964 ops/s
# Warmup Iteration   7: 1936658.284 ops/s
# Warmup Iteration   8: 1914530.899 ops/s
# Warmup Iteration   9: 1956158.926 ops/s
# Warmup Iteration  10: 1957268.656 ops/s
# Warmup Iteration  11: 1937177.072 ops/s
# Warmup Iteration  12: 1920289.576 ops/s
# Warmup Iteration  13: 1958877.685 ops/s
# Warmup Iteration  14: 1940815.190 ops/s
# Warmup Iteration  15: 1940293.655 ops/s
# Warmup Iteration  16: 1946365.017 ops/s
# Warmup Iteration  17: 1962887.368 ops/s
# Warmup Iteration  18: 1940438.496 ops/s
# Warmup Iteration  19: 1934575.366 ops/s
# Warmup Iteration  20: 1929671.652 ops/s
# Warmup Iteration  21: 1949032.161 ops/s
# Warmup Iteration  22: 1938556.257 ops/s
# Warmup Iteration  23: 1912854.482 ops/s
# Warmup Iteration  24: 1913558.203 ops/s
# Warmup Iteration  25: 1958477.626 ops/s
# Warmup Iteration  26: 1953926.973 ops/s
# Warmup Iteration  27: 1960369.835 ops/s
# Warmup Iteration  28: 1947702.215 ops/s
# Warmup Iteration  29: 1954763.761 ops/s
# Warmup Iteration  30: 1963083.193 ops/s
Iteration   1: 1938125.904 ops/s
Iteration   2: 1937500.499 ops/s
Iteration   3: 1960259.848 ops/s
Iteration   4: 1955847.428 ops/s
Iteration   5: 1946826.519 ops/s
Iteration   6: 1938803.684 ops/s
Iteration   7: 1950543.836 ops/s
Iteration   8: 1960936.995 ops/s
Iteration   9: 1940808.241 ops/s
Iteration  10: 1966019.523 ops/s
Iteration  11: 1944667.331 ops/s
Iteration  12: 1954019.667 ops/s
Iteration  13: 1931919.924 ops/s
Iteration  14: 1934656.116 ops/s
Iteration  15: 1916535.845 ops/s
Iteration  16: 1926699.807 ops/s
Iteration  17: 1949906.578 ops/s
Iteration  18: 1971820.108 ops/s
Iteration  19: 1947713.020 ops/s
Iteration  20: 1969869.177 ops/s
Iteration  21: 1953415.729 ops/s
Iteration  22: 1927266.970 ops/s
Iteration  23: 1962553.142 ops/s
Iteration  24: 1925106.138 ops/s
Iteration  25: 1940259.711 ops/s
Iteration  26: 1939335.359 ops/s
Iteration  27: 1950718.819 ops/s
Iteration  28: 1937176.399 ops/s
Iteration  29: 1952106.308 ops/s
Iteration  30: 1955636.992 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLong":
  1946235.187 ±(99.9%) 9175.194 ops/s [Average]
  (min, avg, max) = (1916535.845, 1946235.187, 1971820.108), stdev = 13732.999
  CI (99.9%): [1937059.993, 1955410.381] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectLong  thrpt   30  1946235.187 ± 9175.194  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1959352.925 ops/s
# Warmup Iteration   2: 4656516.132 ops/s
# Warmup Iteration   3: 3874129.747 ops/s
# Warmup Iteration   4: 4690366.222 ops/s
# Warmup Iteration   5: 4683519.879 ops/s
# Warmup Iteration   6: 4698168.605 ops/s
# Warmup Iteration   7: 4688542.902 ops/s
# Warmup Iteration   8: 4687599.678 ops/s
# Warmup Iteration   9: 4660464.035 ops/s
# Warmup Iteration  10: 4690246.741 ops/s
# Warmup Iteration  11: 4672637.981 ops/s
# Warmup Iteration  12: 4689016.329 ops/s
# Warmup Iteration  13: 4684572.466 ops/s
# Warmup Iteration  14: 4677492.092 ops/s
# Warmup Iteration  15: 4697391.187 ops/s
# Warmup Iteration  16: 4691681.563 ops/s
# Warmup Iteration  17: 4683620.767 ops/s
# Warmup Iteration  18: 4678879.397 ops/s
# Warmup Iteration  19: 4665035.572 ops/s
# Warmup Iteration  20: 4701033.550 ops/s
# Warmup Iteration  21: 4673906.824 ops/s
# Warmup Iteration  22: 4671989.359 ops/s
# Warmup Iteration  23: 4673860.100 ops/s
# Warmup Iteration  24: 4685236.594 ops/s
# Warmup Iteration  25: 4686387.124 ops/s
# Warmup Iteration  26: 4711327.349 ops/s
# Warmup Iteration  27: 4681958.517 ops/s
# Warmup Iteration  28: 4696351.661 ops/s
# Warmup Iteration  29: 4696086.428 ops/s
# Warmup Iteration  30: 4688056.902 ops/s
Iteration   1: 4682043.442 ops/s
Iteration   2: 4676482.576 ops/s
Iteration   3: 4684794.999 ops/s
Iteration   4: 4688482.985 ops/s
Iteration   5: 4713835.063 ops/s
Iteration   6: 4687610.427 ops/s
Iteration   7: 4697915.822 ops/s
Iteration   8: 4683720.082 ops/s
Iteration   9: 4698667.577 ops/s
Iteration  10: 4685152.731 ops/s
Iteration  11: 4706961.129 ops/s
Iteration  12: 4686915.086 ops/s
Iteration  13: 4682381.316 ops/s
Iteration  14: 4691444.834 ops/s
Iteration  15: 4707093.137 ops/s
Iteration  16: 4697866.502 ops/s
Iteration  17: 4670501.789 ops/s
Iteration  18: 4701434.044 ops/s
Iteration  19: 4686337.077 ops/s
Iteration  20: 4671758.042 ops/s
Iteration  21: 4673281.237 ops/s
Iteration  22: 4707919.681 ops/s
Iteration  23: 4690124.423 ops/s
Iteration  24: 4686842.189 ops/s
Iteration  25: 4693828.556 ops/s
Iteration  26: 4693423.895 ops/s
Iteration  27: 4685960.671 ops/s
Iteration  28: 4722141.655 ops/s
Iteration  29: 4687634.671 ops/s
Iteration  30: 4665926.994 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithBagTarget":
  4690282.754 ±(99.9%) 8673.550 ops/s [Average]
  (min, avg, max) = (4665926.994, 4690282.754, 4722141.655), stdev = 12982.162
  CI (99.9%): [4681609.205, 4698956.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  4690282.754 ± 8673.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1436484.805 ops/s
# Warmup Iteration   2: 3460862.759 ops/s
# Warmup Iteration   3: 2903997.732 ops/s
# Warmup Iteration   4: 3495519.115 ops/s
# Warmup Iteration   5: 3499756.208 ops/s
# Warmup Iteration   6: 3492326.268 ops/s
# Warmup Iteration   7: 3491896.595 ops/s
# Warmup Iteration   8: 3504361.742 ops/s
# Warmup Iteration   9: 3514809.356 ops/s
# Warmup Iteration  10: 3492377.877 ops/s
# Warmup Iteration  11: 3527156.690 ops/s
# Warmup Iteration  12: 3510128.872 ops/s
# Warmup Iteration  13: 3498965.031 ops/s
# Warmup Iteration  14: 3494324.628 ops/s
# Warmup Iteration  15: 3495830.249 ops/s
# Warmup Iteration  16: 3522888.724 ops/s
# Warmup Iteration  17: 3522187.207 ops/s
# Warmup Iteration  18: 3513840.727 ops/s
# Warmup Iteration  19: 3520791.553 ops/s
# Warmup Iteration  20: 3508912.486 ops/s
# Warmup Iteration  21: 3512015.861 ops/s
# Warmup Iteration  22: 3507557.617 ops/s
# Warmup Iteration  23: 3493669.363 ops/s
# Warmup Iteration  24: 3509147.069 ops/s
# Warmup Iteration  25: 3502575.706 ops/s
# Warmup Iteration  26: 3520824.160 ops/s
# Warmup Iteration  27: 3510087.644 ops/s
# Warmup Iteration  28: 3524692.193 ops/s
# Warmup Iteration  29: 3517902.249 ops/s
# Warmup Iteration  30: 3521372.953 ops/s
Iteration   1: 3529312.187 ops/s
Iteration   2: 3496660.685 ops/s
Iteration   3: 3514615.708 ops/s
Iteration   4: 3512939.096 ops/s
Iteration   5: 3517624.283 ops/s
Iteration   6: 3522948.373 ops/s
Iteration   7: 3501376.214 ops/s
Iteration   8: 3511750.290 ops/s
Iteration   9: 3509536.326 ops/s
Iteration  10: 3508204.432 ops/s
Iteration  11: 3537259.643 ops/s
Iteration  12: 3474652.030 ops/s
Iteration  13: 3470918.815 ops/s
Iteration  14: 3493163.040 ops/s
Iteration  15: 3521461.970 ops/s
Iteration  16: 3522480.736 ops/s
Iteration  17: 3537320.915 ops/s
Iteration  18: 3526277.849 ops/s
Iteration  19: 3515363.370 ops/s
Iteration  20: 3512748.678 ops/s
Iteration  21: 3529940.782 ops/s
Iteration  22: 3502129.792 ops/s
Iteration  23: 3538227.867 ops/s
Iteration  24: 3519462.159 ops/s
Iteration  25: 3518242.712 ops/s
Iteration  26: 3503240.613 ops/s
Iteration  27: 3506736.292 ops/s
Iteration  28: 3523796.045 ops/s
Iteration  29: 3500564.846 ops/s
Iteration  30: 3503656.746 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectLongWithTarget":
  3512753.750 ±(99.9%) 10807.275 ops/s [Average]
  (min, avg, max) = (3470918.815, 3512753.750, 3538227.867), stdev = 16175.822
  CI (99.9%): [3501946.475, 3523561.025] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  3512753.750 ± 10807.275  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 978489.067 ops/s
# Warmup Iteration   2: 2315554.006 ops/s
# Warmup Iteration   3: 2329034.697 ops/s
# Warmup Iteration   4: 1957316.122 ops/s
# Warmup Iteration   5: 2328813.162 ops/s
# Warmup Iteration   6: 2331744.341 ops/s
# Warmup Iteration   7: 2330275.954 ops/s
# Warmup Iteration   8: 2335676.336 ops/s
# Warmup Iteration   9: 2322679.280 ops/s
# Warmup Iteration  10: 2345155.282 ops/s
# Warmup Iteration  11: 2336181.509 ops/s
# Warmup Iteration  12: 2333053.708 ops/s
# Warmup Iteration  13: 2344690.900 ops/s
# Warmup Iteration  14: 2336709.980 ops/s
# Warmup Iteration  15: 2344696.816 ops/s
# Warmup Iteration  16: 2343688.620 ops/s
# Warmup Iteration  17: 2351788.655 ops/s
# Warmup Iteration  18: 2339020.004 ops/s
# Warmup Iteration  19: 2332309.944 ops/s
# Warmup Iteration  20: 2350711.600 ops/s
# Warmup Iteration  21: 2334262.661 ops/s
# Warmup Iteration  22: 2348528.262 ops/s
# Warmup Iteration  23: 2338540.231 ops/s
# Warmup Iteration  24: 2355226.523 ops/s
# Warmup Iteration  25: 2345889.049 ops/s
# Warmup Iteration  26: 2328259.306 ops/s
# Warmup Iteration  27: 2345724.025 ops/s
# Warmup Iteration  28: 2344650.277 ops/s
# Warmup Iteration  29: 2349707.712 ops/s
# Warmup Iteration  30: 2347593.346 ops/s
Iteration   1: 2354062.194 ops/s
Iteration   2: 2354095.084 ops/s
Iteration   3: 2327758.877 ops/s
Iteration   4: 2353953.651 ops/s
Iteration   5: 2338811.956 ops/s
Iteration   6: 2340172.015 ops/s
Iteration   7: 2328646.372 ops/s
Iteration   8: 2353859.667 ops/s
Iteration   9: 2339444.720 ops/s
Iteration  10: 2347245.135 ops/s
Iteration  11: 2341477.072 ops/s
Iteration  12: 2342300.024 ops/s
Iteration  13: 2340179.079 ops/s
Iteration  14: 2334255.747 ops/s
Iteration  15: 2330544.873 ops/s
Iteration  16: 2356859.886 ops/s
Iteration  17: 2354928.040 ops/s
Iteration  18: 2344568.352 ops/s
Iteration  19: 2344159.544 ops/s
Iteration  20: 2350419.123 ops/s
Iteration  21: 2332257.602 ops/s
Iteration  22: 2342489.097 ops/s
Iteration  23: 2339913.199 ops/s
Iteration  24: 2333974.919 ops/s
Iteration  25: 2341254.697 ops/s
Iteration  26: 2331267.431 ops/s
Iteration  27: 2348594.814 ops/s
Iteration  28: 2345433.653 ops/s
Iteration  29: 2350074.905 ops/s
Iteration  30: 2336695.095 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShort":
  2342656.561 ±(99.9%) 5664.125 ops/s [Average]
  (min, avg, max) = (2327758.877, 2342656.561, 2356859.886), stdev = 8477.797
  CI (99.9%): [2336992.436, 2348320.686] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectShort  thrpt   30  2342656.561 ± 5664.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2402910.274 ops/s
# Warmup Iteration   2: 5328549.738 ops/s
# Warmup Iteration   3: 4496002.042 ops/s
# Warmup Iteration   4: 5427804.744 ops/s
# Warmup Iteration   5: 5406064.447 ops/s
# Warmup Iteration   6: 5392192.740 ops/s
# Warmup Iteration   7: 5402916.689 ops/s
# Warmup Iteration   8: 5414627.085 ops/s
# Warmup Iteration   9: 5393493.492 ops/s
# Warmup Iteration  10: 5405509.060 ops/s
# Warmup Iteration  11: 5403294.489 ops/s
# Warmup Iteration  12: 5418364.330 ops/s
# Warmup Iteration  13: 5391889.640 ops/s
# Warmup Iteration  14: 5400526.759 ops/s
# Warmup Iteration  15: 5414045.902 ops/s
# Warmup Iteration  16: 5413287.994 ops/s
# Warmup Iteration  17: 5399367.386 ops/s
# Warmup Iteration  18: 5410578.488 ops/s
# Warmup Iteration  19: 5424229.625 ops/s
# Warmup Iteration  20: 5400468.964 ops/s
# Warmup Iteration  21: 5387570.021 ops/s
# Warmup Iteration  22: 5354647.067 ops/s
# Warmup Iteration  23: 5399171.320 ops/s
# Warmup Iteration  24: 5393292.950 ops/s
# Warmup Iteration  25: 5376754.960 ops/s
# Warmup Iteration  26: 5380977.936 ops/s
# Warmup Iteration  27: 5412190.549 ops/s
# Warmup Iteration  28: 5415072.298 ops/s
# Warmup Iteration  29: 5409329.690 ops/s
# Warmup Iteration  30: 5400482.072 ops/s
Iteration   1: 5403158.640 ops/s
Iteration   2: 5436579.964 ops/s
Iteration   3: 5419210.573 ops/s
Iteration   4: 5440094.496 ops/s
Iteration   5: 5419424.299 ops/s
Iteration   6: 5418743.473 ops/s
Iteration   7: 5427668.478 ops/s
Iteration   8: 5380977.101 ops/s
Iteration   9: 5403776.090 ops/s
Iteration  10: 5390576.644 ops/s
Iteration  11: 5381291.193 ops/s
Iteration  12: 5417518.015 ops/s
Iteration  13: 5407540.912 ops/s
Iteration  14: 5424781.490 ops/s
Iteration  15: 5389425.367 ops/s
Iteration  16: 5423996.908 ops/s
Iteration  17: 5439913.228 ops/s
Iteration  18: 5408480.844 ops/s
Iteration  19: 5388761.188 ops/s
Iteration  20: 5392253.157 ops/s
Iteration  21: 5394169.366 ops/s
Iteration  22: 5398755.717 ops/s
Iteration  23: 5377043.526 ops/s
Iteration  24: 5410480.550 ops/s
Iteration  25: 5425123.542 ops/s
Iteration  26: 5372307.803 ops/s
Iteration  27: 5395267.364 ops/s
Iteration  28: 5420104.616 ops/s
Iteration  29: 5399845.490 ops/s
Iteration  30: 5441913.136 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithBagTarget":
  5408306.106 ±(99.9%) 13208.561 ops/s [Average]
  (min, avg, max) = (5372307.803, 5408306.106, 5441913.136), stdev = 19769.953
  CI (99.9%): [5395097.545, 5421514.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  5408306.106 ± 13208.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1786202.178 ops/s
# Warmup Iteration   2: 4126037.297 ops/s
# Warmup Iteration   3: 3918253.476 ops/s
# Warmup Iteration   4: 3739451.383 ops/s
# Warmup Iteration   5: 4160046.243 ops/s
# Warmup Iteration   6: 4162196.659 ops/s
# Warmup Iteration   7: 4143204.610 ops/s
# Warmup Iteration   8: 4166200.930 ops/s
# Warmup Iteration   9: 4171536.704 ops/s
# Warmup Iteration  10: 4173326.884 ops/s
# Warmup Iteration  11: 4164161.470 ops/s
# Warmup Iteration  12: 4165779.738 ops/s
# Warmup Iteration  13: 4163334.456 ops/s
# Warmup Iteration  14: 4171653.980 ops/s
# Warmup Iteration  15: 4183923.136 ops/s
# Warmup Iteration  16: 4186876.161 ops/s
# Warmup Iteration  17: 4173236.319 ops/s
# Warmup Iteration  18: 4171764.797 ops/s
# Warmup Iteration  19: 4186781.441 ops/s
# Warmup Iteration  20: 4148706.361 ops/s
# Warmup Iteration  21: 4163428.901 ops/s
# Warmup Iteration  22: 4171052.818 ops/s
# Warmup Iteration  23: 4163666.178 ops/s
# Warmup Iteration  24: 4155267.761 ops/s
# Warmup Iteration  25: 4168986.850 ops/s
# Warmup Iteration  26: 4161008.158 ops/s
# Warmup Iteration  27: 4161045.714 ops/s
# Warmup Iteration  28: 4159868.188 ops/s
# Warmup Iteration  29: 4162688.643 ops/s
# Warmup Iteration  30: 4170143.838 ops/s
Iteration   1: 4159469.175 ops/s
Iteration   2: 4166626.079 ops/s
Iteration   3: 4150030.138 ops/s
Iteration   4: 4161080.330 ops/s
Iteration   5: 4171496.070 ops/s
Iteration   6: 4165311.177 ops/s
Iteration   7: 4182562.529 ops/s
Iteration   8: 4159484.036 ops/s
Iteration   9: 4172668.551 ops/s
Iteration  10: 4156496.424 ops/s
Iteration  11: 4161548.402 ops/s
Iteration  12: 4141534.540 ops/s
Iteration  13: 4164591.959 ops/s
Iteration  14: 4179649.616 ops/s
Iteration  15: 4171082.303 ops/s
Iteration  16: 4149509.264 ops/s
Iteration  17: 4176319.794 ops/s
Iteration  18: 4182582.688 ops/s
Iteration  19: 4147113.993 ops/s
Iteration  20: 4144804.569 ops/s
Iteration  21: 4161208.581 ops/s
Iteration  22: 4190506.611 ops/s
Iteration  23: 4163215.125 ops/s
Iteration  24: 4142986.748 ops/s
Iteration  25: 4166731.781 ops/s
Iteration  26: 4170106.138 ops/s
Iteration  27: 4163943.160 ops/s
Iteration  28: 4185680.711 ops/s
Iteration  29: 4184485.434 ops/s
Iteration  30: 4186135.044 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectShortWithTarget":
  4165965.366 ±(99.9%) 9128.159 ops/s [Average]
  (min, avg, max) = (4141534.540, 4165965.366, 4190506.611), stdev = 13662.599
  CI (99.9%): [4156837.207, 4175093.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  4165965.366 ± 9128.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 135508.323 ops/s
# Warmup Iteration   2: 238116.143 ops/s
# Warmup Iteration   3: 297159.902 ops/s
# Warmup Iteration   4: 297873.424 ops/s
# Warmup Iteration   5: 297961.510 ops/s
# Warmup Iteration   6: 282626.576 ops/s
# Warmup Iteration   7: 262173.807 ops/s
# Warmup Iteration   8: 299579.223 ops/s
# Warmup Iteration   9: 300332.960 ops/s
# Warmup Iteration  10: 298017.843 ops/s
# Warmup Iteration  11: 297590.177 ops/s
# Warmup Iteration  12: 300710.085 ops/s
# Warmup Iteration  13: 299387.136 ops/s
# Warmup Iteration  14: 299049.708 ops/s
# Warmup Iteration  15: 299543.473 ops/s
# Warmup Iteration  16: 300836.029 ops/s
# Warmup Iteration  17: 299112.748 ops/s
# Warmup Iteration  18: 300526.258 ops/s
# Warmup Iteration  19: 299216.337 ops/s
# Warmup Iteration  20: 300565.588 ops/s
# Warmup Iteration  21: 298168.942 ops/s
# Warmup Iteration  22: 299729.004 ops/s
# Warmup Iteration  23: 300903.431 ops/s
# Warmup Iteration  24: 299665.502 ops/s
# Warmup Iteration  25: 301228.433 ops/s
# Warmup Iteration  26: 300285.373 ops/s
# Warmup Iteration  27: 300274.329 ops/s
# Warmup Iteration  28: 300038.753 ops/s
# Warmup Iteration  29: 300714.694 ops/s
# Warmup Iteration  30: 299693.915 ops/s
Iteration   1: 299072.417 ops/s
Iteration   2: 300248.851 ops/s
Iteration   3: 300918.239 ops/s
Iteration   4: 299870.848 ops/s
Iteration   5: 301814.557 ops/s
Iteration   6: 301638.730 ops/s
Iteration   7: 300048.139 ops/s
Iteration   8: 297713.225 ops/s
Iteration   9: 299566.735 ops/s
Iteration  10: 299874.486 ops/s
Iteration  11: 299913.278 ops/s
Iteration  12: 300795.149 ops/s
Iteration  13: 300180.152 ops/s
Iteration  14: 299505.139 ops/s
Iteration  15: 301278.357 ops/s
Iteration  16: 299640.878 ops/s
Iteration  17: 300399.100 ops/s
Iteration  18: 298732.025 ops/s
Iteration  19: 301013.478 ops/s
Iteration  20: 298929.062 ops/s
Iteration  21: 300182.331 ops/s
Iteration  22: 300409.592 ops/s
Iteration  23: 298401.744 ops/s
Iteration  24: 299879.461 ops/s
Iteration  25: 299366.552 ops/s
Iteration  26: 298690.822 ops/s
Iteration  27: 299614.005 ops/s
Iteration  28: 298842.786 ops/s
Iteration  29: 299330.350 ops/s
Iteration  30: 299807.028 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectTarget":
  299855.917 ±(99.9%) 633.256 ops/s [Average]
  (min, avg, max) = (297713.225, 299855.917, 301814.557), stdev = 947.827
  CI (99.9%): [299222.662, 300489.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectTarget  thrpt   30  299855.917 ± 633.256  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881176.094 ops/s
# Warmup Iteration   2: 1515971.168 ops/s
# Warmup Iteration   3: 1799911.830 ops/s
# Warmup Iteration   4: 1814453.735 ops/s
# Warmup Iteration   5: 1811955.538 ops/s
# Warmup Iteration   6: 1473090.736 ops/s
# Warmup Iteration   7: 1814280.660 ops/s
# Warmup Iteration   8: 1820879.761 ops/s
# Warmup Iteration   9: 1816501.992 ops/s
# Warmup Iteration  10: 1820484.279 ops/s
# Warmup Iteration  11: 1818441.188 ops/s
# Warmup Iteration  12: 1814071.463 ops/s
# Warmup Iteration  13: 1812191.631 ops/s
# Warmup Iteration  14: 1812823.036 ops/s
# Warmup Iteration  15: 1825399.768 ops/s
# Warmup Iteration  16: 1825956.313 ops/s
# Warmup Iteration  17: 1811654.184 ops/s
# Warmup Iteration  18: 1820761.121 ops/s
# Warmup Iteration  19: 1810109.676 ops/s
# Warmup Iteration  20: 1813191.974 ops/s
# Warmup Iteration  21: 1816654.477 ops/s
# Warmup Iteration  22: 1809946.832 ops/s
# Warmup Iteration  23: 1822387.229 ops/s
# Warmup Iteration  24: 1819749.520 ops/s
# Warmup Iteration  25: 1822840.961 ops/s
# Warmup Iteration  26: 1819090.207 ops/s
# Warmup Iteration  27: 1814924.347 ops/s
# Warmup Iteration  28: 1811928.858 ops/s
# Warmup Iteration  29: 1815541.209 ops/s
# Warmup Iteration  30: 1821854.833 ops/s
Iteration   1: 1823175.905 ops/s
Iteration   2: 1819126.782 ops/s
Iteration   3: 1824963.532 ops/s
Iteration   4: 1818728.324 ops/s
Iteration   5: 1818909.355 ops/s
Iteration   6: 1820333.917 ops/s
Iteration   7: 1816585.488 ops/s
Iteration   8: 1812417.684 ops/s
Iteration   9: 1809787.691 ops/s
Iteration  10: 1810971.593 ops/s
Iteration  11: 1809724.917 ops/s
Iteration  12: 1824044.352 ops/s
Iteration  13: 1816192.167 ops/s
Iteration  14: 1821179.705 ops/s
Iteration  15: 1821005.270 ops/s
Iteration  16: 1819253.938 ops/s
Iteration  17: 1821403.193 ops/s
Iteration  18: 1825172.506 ops/s
Iteration  19: 1813568.961 ops/s
Iteration  20: 1810185.347 ops/s
Iteration  21: 1829336.614 ops/s
Iteration  22: 1804511.348 ops/s
Iteration  23: 1810542.561 ops/s
Iteration  24: 1811877.406 ops/s
Iteration  25: 1813022.325 ops/s
Iteration  26: 1809731.429 ops/s
Iteration  27: 1817970.632 ops/s
Iteration  28: 1814022.295 ops/s
Iteration  29: 1821315.674 ops/s
Iteration  30: 1816751.371 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith":
  1816860.409 ±(99.9%) 3907.976 ops/s [Average]
  (min, avg, max) = (1804511.348, 1816860.409, 1829336.614), stdev = 5849.275
  CI (99.9%): [1812952.433, 1820768.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectWith  thrpt   30  1816860.409 ± 3907.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 140587.353 ops/s
# Warmup Iteration   2: 245517.204 ops/s
# Warmup Iteration   3: 300918.318 ops/s
# Warmup Iteration   4: 303645.421 ops/s
# Warmup Iteration   5: 303628.378 ops/s
# Warmup Iteration   6: 273018.816 ops/s
# Warmup Iteration   7: 282116.249 ops/s
# Warmup Iteration   8: 303966.460 ops/s
# Warmup Iteration   9: 304325.232 ops/s
# Warmup Iteration  10: 303951.220 ops/s
# Warmup Iteration  11: 303419.117 ops/s
# Warmup Iteration  12: 304982.769 ops/s
# Warmup Iteration  13: 304259.912 ops/s
# Warmup Iteration  14: 304275.375 ops/s
# Warmup Iteration  15: 304569.105 ops/s
# Warmup Iteration  16: 304044.371 ops/s
# Warmup Iteration  17: 305169.012 ops/s
# Warmup Iteration  18: 302550.966 ops/s
# Warmup Iteration  19: 302483.784 ops/s
# Warmup Iteration  20: 303023.837 ops/s
# Warmup Iteration  21: 303806.980 ops/s
# Warmup Iteration  22: 303489.421 ops/s
# Warmup Iteration  23: 304297.472 ops/s
# Warmup Iteration  24: 303113.393 ops/s
# Warmup Iteration  25: 304342.241 ops/s
# Warmup Iteration  26: 304956.041 ops/s
# Warmup Iteration  27: 304215.766 ops/s
# Warmup Iteration  28: 304004.564 ops/s
# Warmup Iteration  29: 303873.340 ops/s
# Warmup Iteration  30: 303194.809 ops/s
Iteration   1: 303889.233 ops/s
Iteration   2: 304084.100 ops/s
Iteration   3: 305225.709 ops/s
Iteration   4: 304732.678 ops/s
Iteration   5: 302817.837 ops/s
Iteration   6: 301283.281 ops/s
Iteration   7: 303122.687 ops/s
Iteration   8: 303456.080 ops/s
Iteration   9: 303071.551 ops/s
Iteration  10: 304620.842 ops/s
Iteration  11: 302354.453 ops/s
Iteration  12: 303197.108 ops/s
Iteration  13: 304061.685 ops/s
Iteration  14: 305571.443 ops/s
Iteration  15: 302661.831 ops/s
Iteration  16: 302720.191 ops/s
Iteration  17: 303607.807 ops/s
Iteration  18: 302990.752 ops/s
Iteration  19: 302069.900 ops/s
Iteration  20: 303223.438 ops/s
Iteration  21: 303719.907 ops/s
Iteration  22: 303879.888 ops/s
Iteration  23: 304185.043 ops/s
Iteration  24: 305812.158 ops/s
Iteration  25: 303973.197 ops/s
Iteration  26: 303600.259 ops/s
Iteration  27: 305071.583 ops/s
Iteration  28: 304396.950 ops/s
Iteration  29: 304729.524 ops/s
Iteration  30: 303149.162 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_collectWith_target":
  303709.343 ±(99.9%) 696.357 ops/s [Average]
  (min, avg, max) = (301283.281, 303709.343, 305812.158), stdev = 1042.274
  CI (99.9%): [303012.986, 304405.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_collectWith_target  thrpt   30  303709.343 ± 696.357  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13707888.237 ops/s
# Warmup Iteration   2: 25755954.566 ops/s
# Warmup Iteration   3: 22801739.679 ops/s
# Warmup Iteration   4: 26615260.825 ops/s
# Warmup Iteration   5: 26887141.893 ops/s
# Warmup Iteration   6: 26859293.902 ops/s
# Warmup Iteration   7: 26874557.774 ops/s
# Warmup Iteration   8: 26935189.116 ops/s
# Warmup Iteration   9: 26879333.559 ops/s
# Warmup Iteration  10: 26917195.953 ops/s
# Warmup Iteration  11: 26919242.735 ops/s
# Warmup Iteration  12: 26940288.452 ops/s
# Warmup Iteration  13: 26845155.328 ops/s
# Warmup Iteration  14: 26857392.719 ops/s
# Warmup Iteration  15: 26935064.953 ops/s
# Warmup Iteration  16: 26884886.655 ops/s
# Warmup Iteration  17: 26906276.529 ops/s
# Warmup Iteration  18: 26874840.629 ops/s
# Warmup Iteration  19: 26773768.802 ops/s
# Warmup Iteration  20: 26928266.114 ops/s
# Warmup Iteration  21: 26883344.500 ops/s
# Warmup Iteration  22: 26867501.954 ops/s
# Warmup Iteration  23: 26933385.312 ops/s
# Warmup Iteration  24: 26965079.367 ops/s
# Warmup Iteration  25: 26873551.245 ops/s
# Warmup Iteration  26: 26834652.214 ops/s
# Warmup Iteration  27: 26898000.020 ops/s
# Warmup Iteration  28: 26932392.121 ops/s
# Warmup Iteration  29: 26857892.565 ops/s
# Warmup Iteration  30: 26893043.760 ops/s
Iteration   1: 26981791.270 ops/s
Iteration   2: 26861913.376 ops/s
Iteration   3: 26963697.066 ops/s
Iteration   4: 26933249.401 ops/s
Iteration   5: 26902444.091 ops/s
Iteration   6: 26833808.379 ops/s
Iteration   7: 26828522.344 ops/s
Iteration   8: 26751448.160 ops/s
Iteration   9: 26817241.516 ops/s
Iteration  10: 26958088.358 ops/s
Iteration  11: 26950501.497 ops/s
Iteration  12: 26923881.538 ops/s
Iteration  13: 26914265.080 ops/s
Iteration  14: 27020488.842 ops/s
Iteration  15: 26932290.154 ops/s
Iteration  16: 26874314.675 ops/s
Iteration  17: 26883163.131 ops/s
Iteration  18: 26928097.687 ops/s
Iteration  19: 26878767.397 ops/s
Iteration  20: 26809572.774 ops/s
Iteration  21: 26781494.468 ops/s
Iteration  22: 26883078.699 ops/s
Iteration  23: 26875187.557 ops/s
Iteration  24: 27060524.404 ops/s
Iteration  25: 26908331.985 ops/s
Iteration  26: 27015730.750 ops/s
Iteration  27: 26959307.717 ops/s
Iteration  28: 26879090.076 ops/s
Iteration  29: 26950613.891 ops/s
Iteration  30: 27000914.018 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_contains":
  26908727.343 ±(99.9%) 48516.922 ops/s [Average]
  (min, avg, max) = (26751448.160, 26908727.343, 27060524.404), stdev = 72617.851
  CI (99.9%): [26860210.421, 26957244.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_contains  thrpt   30  26908727.343 ± 48516.922  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9060981.420 ops/s
# Warmup Iteration   2: 28165019.309 ops/s
# Warmup Iteration   3: 24218370.298 ops/s
# Warmup Iteration   4: 28817182.662 ops/s
# Warmup Iteration   5: 28973449.055 ops/s
# Warmup Iteration   6: 28786972.402 ops/s
# Warmup Iteration   7: 28906200.579 ops/s
# Warmup Iteration   8: 28785883.344 ops/s
# Warmup Iteration   9: 28875040.567 ops/s
# Warmup Iteration  10: 28966077.810 ops/s
# Warmup Iteration  11: 28599555.994 ops/s
# Warmup Iteration  12: 28854207.891 ops/s
# Warmup Iteration  13: 28852225.888 ops/s
# Warmup Iteration  14: 28841644.666 ops/s
# Warmup Iteration  15: 29045027.030 ops/s
# Warmup Iteration  16: 28827707.466 ops/s
# Warmup Iteration  17: 28861336.750 ops/s
# Warmup Iteration  18: 28692612.185 ops/s
# Warmup Iteration  19: 28513489.891 ops/s
# Warmup Iteration  20: 28837624.319 ops/s
# Warmup Iteration  21: 28886536.026 ops/s
# Warmup Iteration  22: 28803067.583 ops/s
# Warmup Iteration  23: 28921286.101 ops/s
# Warmup Iteration  24: 28712231.275 ops/s
# Warmup Iteration  25: 28860874.116 ops/s
# Warmup Iteration  26: 28754311.482 ops/s
# Warmup Iteration  27: 28990272.370 ops/s
# Warmup Iteration  28: 28845989.171 ops/s
# Warmup Iteration  29: 28837459.317 ops/s
# Warmup Iteration  30: 28927520.836 ops/s
Iteration   1: 28857263.382 ops/s
Iteration   2: 29001342.676 ops/s
Iteration   3: 28627115.105 ops/s
Iteration   4: 28655859.063 ops/s
Iteration   5: 28634297.585 ops/s
Iteration   6: 28746275.235 ops/s
Iteration   7: 28797646.960 ops/s
Iteration   8: 29024729.548 ops/s
Iteration   9: 28911962.278 ops/s
Iteration  10: 28932976.832 ops/s
Iteration  11: 28894767.732 ops/s
Iteration  12: 28948975.334 ops/s
Iteration  13: 28880766.132 ops/s
Iteration  14: 28909376.124 ops/s
Iteration  15: 28812188.616 ops/s
Iteration  16: 28884891.585 ops/s
Iteration  17: 29014659.779 ops/s
Iteration  18: 28869058.925 ops/s
Iteration  19: 28810895.124 ops/s
Iteration  20: 28909857.290 ops/s
Iteration  21: 29009166.610 ops/s
Iteration  22: 28819815.661 ops/s
Iteration  23: 28744135.337 ops/s
Iteration  24: 28797168.692 ops/s
Iteration  25: 28996713.826 ops/s
Iteration  26: 28948258.014 ops/s
Iteration  27: 28998469.706 ops/s
Iteration  28: 28791471.725 ops/s
Iteration  29: 28981677.974 ops/s
Iteration  30: 28992057.740 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllArray":
  28873461.353 ±(99.9%) 76581.039 ops/s [Average]
  (min, avg, max) = (28627115.105, 28873461.353, 29024729.548), stdev = 114622.903
  CI (99.9%): [28796880.314, 28950042.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsAllArray  thrpt   30  28873461.353 ± 76581.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9562958.705 ops/s
# Warmup Iteration   2: 20182641.862 ops/s
# Warmup Iteration   3: 16805290.857 ops/s
# Warmup Iteration   4: 20223474.498 ops/s
# Warmup Iteration   5: 20226920.869 ops/s
# Warmup Iteration   6: 20202384.059 ops/s
# Warmup Iteration   7: 20185714.726 ops/s
# Warmup Iteration   8: 20144958.955 ops/s
# Warmup Iteration   9: 20243739.380 ops/s
# Warmup Iteration  10: 20199089.367 ops/s
# Warmup Iteration  11: 20219791.017 ops/s
# Warmup Iteration  12: 20228749.787 ops/s
# Warmup Iteration  13: 20269699.544 ops/s
# Warmup Iteration  14: 20146995.761 ops/s
# Warmup Iteration  15: 20175144.205 ops/s
# Warmup Iteration  16: 20104484.297 ops/s
# Warmup Iteration  17: 19999194.166 ops/s
# Warmup Iteration  18: 20216846.924 ops/s
# Warmup Iteration  19: 20208798.970 ops/s
# Warmup Iteration  20: 20225204.852 ops/s
# Warmup Iteration  21: 20138778.728 ops/s
# Warmup Iteration  22: 20261726.181 ops/s
# Warmup Iteration  23: 20179760.680 ops/s
# Warmup Iteration  24: 20174641.347 ops/s
# Warmup Iteration  25: 20236748.209 ops/s
# Warmup Iteration  26: 20288550.937 ops/s
# Warmup Iteration  27: 20148447.472 ops/s
# Warmup Iteration  28: 20198918.678 ops/s
# Warmup Iteration  29: 20146143.870 ops/s
# Warmup Iteration  30: 20212443.050 ops/s
Iteration   1: 20205610.172 ops/s
Iteration   2: 20155835.143 ops/s
Iteration   3: 20263993.308 ops/s
Iteration   4: 20126733.557 ops/s
Iteration   5: 19933139.170 ops/s
Iteration   6: 19936481.506 ops/s
Iteration   7: 20159656.406 ops/s
Iteration   8: 20231523.319 ops/s
Iteration   9: 20249264.717 ops/s
Iteration  10: 20147212.430 ops/s
Iteration  11: 20178635.816 ops/s
Iteration  12: 20151555.575 ops/s
Iteration  13: 20289321.361 ops/s
Iteration  14: 20224431.891 ops/s
Iteration  15: 20139851.046 ops/s
Iteration  16: 20078548.317 ops/s
Iteration  17: 20104572.775 ops/s
Iteration  18: 20191116.598 ops/s
Iteration  19: 20244775.669 ops/s
Iteration  20: 20183233.560 ops/s
Iteration  21: 20294807.202 ops/s
Iteration  22: 20113182.890 ops/s
Iteration  23: 20184951.840 ops/s
Iteration  24: 20275437.045 ops/s
Iteration  25: 20192648.386 ops/s
Iteration  26: 20159032.631 ops/s
Iteration  27: 20130225.614 ops/s
Iteration  28: 20145649.484 ops/s
Iteration  29: 20151082.829 ops/s
Iteration  30: 20200949.686 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllCollection":
  20168115.331 ±(99.9%) 56179.503 ops/s [Average]
  (min, avg, max) = (19933139.170, 20168115.331, 20294807.202), stdev = 84086.841
  CI (99.9%): [20111935.829, 20224294.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsAllCollection  thrpt   30  20168115.331 ± 56179.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7550167.207 ops/s
# Warmup Iteration   2: 15330579.666 ops/s
# Warmup Iteration   3: 13726060.340 ops/s
# Warmup Iteration   4: 16240465.260 ops/s
# Warmup Iteration   5: 16244033.997 ops/s
# Warmup Iteration   6: 16264535.791 ops/s
# Warmup Iteration   7: 16287314.755 ops/s
# Warmup Iteration   8: 16209327.038 ops/s
# Warmup Iteration   9: 16223016.194 ops/s
# Warmup Iteration  10: 16255298.918 ops/s
# Warmup Iteration  11: 16243353.914 ops/s
# Warmup Iteration  12: 16266607.542 ops/s
# Warmup Iteration  13: 16145648.108 ops/s
# Warmup Iteration  14: 16184423.099 ops/s
# Warmup Iteration  15: 16207343.193 ops/s
# Warmup Iteration  16: 16148137.782 ops/s
# Warmup Iteration  17: 16124311.865 ops/s
# Warmup Iteration  18: 16096238.759 ops/s
# Warmup Iteration  19: 16198737.251 ops/s
# Warmup Iteration  20: 16197740.097 ops/s
# Warmup Iteration  21: 16243891.483 ops/s
# Warmup Iteration  22: 16279898.121 ops/s
# Warmup Iteration  23: 16244859.970 ops/s
# Warmup Iteration  24: 16238358.470 ops/s
# Warmup Iteration  25: 16240186.957 ops/s
# Warmup Iteration  26: 16234044.588 ops/s
# Warmup Iteration  27: 16204078.500 ops/s
# Warmup Iteration  28: 16248099.467 ops/s
# Warmup Iteration  29: 16257177.490 ops/s
# Warmup Iteration  30: 16229641.674 ops/s
Iteration   1: 16066830.715 ops/s
Iteration   2: 15935224.209 ops/s
Iteration   3: 15949338.776 ops/s
Iteration   4: 16127599.131 ops/s
Iteration   5: 16073891.085 ops/s
Iteration   6: 16214232.069 ops/s
Iteration   7: 16193175.390 ops/s
Iteration   8: 16253431.267 ops/s
Iteration   9: 16180096.014 ops/s
Iteration  10: 16171657.518 ops/s
Iteration  11: 16165131.086 ops/s
Iteration  12: 16224001.381 ops/s
Iteration  13: 16093496.965 ops/s
Iteration  14: 16116624.636 ops/s
Iteration  15: 16171167.396 ops/s
Iteration  16: 16259584.925 ops/s
Iteration  17: 16126815.445 ops/s
Iteration  18: 16259208.458 ops/s
Iteration  19: 16022842.778 ops/s
Iteration  20: 16259112.385 ops/s
Iteration  21: 16244927.329 ops/s
Iteration  22: 16258391.289 ops/s
Iteration  23: 16244426.245 ops/s
Iteration  24: 16268701.791 ops/s
Iteration  25: 16263936.791 ops/s
Iteration  26: 16272514.256 ops/s
Iteration  27: 16340945.528 ops/s
Iteration  28: 16282984.847 ops/s
Iteration  29: 16327260.248 ops/s
Iteration  30: 16195227.418 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAllIterable":
  16185425.912 ±(99.9%) 68224.097 ops/s [Average]
  (min, avg, max) = (15935224.209, 16185425.912, 16340945.528), stdev = 102114.624
  CI (99.9%): [16117201.816, 16253650.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsAllIterable  thrpt   30  16185425.912 ± 68224.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132362.795 ops/s
# Warmup Iteration   2: 194518.533 ops/s
# Warmup Iteration   3: 231959.712 ops/s
# Warmup Iteration   4: 232666.901 ops/s
# Warmup Iteration   5: 232684.584 ops/s
# Warmup Iteration   6: 232876.069 ops/s
# Warmup Iteration   7: 200379.569 ops/s
# Warmup Iteration   8: 229423.374 ops/s
# Warmup Iteration   9: 232815.847 ops/s
# Warmup Iteration  10: 233439.466 ops/s
# Warmup Iteration  11: 233168.401 ops/s
# Warmup Iteration  12: 234104.504 ops/s
# Warmup Iteration  13: 233571.617 ops/s
# Warmup Iteration  14: 233119.699 ops/s
# Warmup Iteration  15: 232191.465 ops/s
# Warmup Iteration  16: 232813.978 ops/s
# Warmup Iteration  17: 233278.897 ops/s
# Warmup Iteration  18: 233358.958 ops/s
# Warmup Iteration  19: 232617.937 ops/s
# Warmup Iteration  20: 232844.563 ops/s
# Warmup Iteration  21: 233295.153 ops/s
# Warmup Iteration  22: 233822.211 ops/s
# Warmup Iteration  23: 233296.773 ops/s
# Warmup Iteration  24: 233322.626 ops/s
# Warmup Iteration  25: 232914.268 ops/s
# Warmup Iteration  26: 233805.373 ops/s
# Warmup Iteration  27: 232974.690 ops/s
# Warmup Iteration  28: 234277.629 ops/s
# Warmup Iteration  29: 232623.622 ops/s
# Warmup Iteration  30: 234138.243 ops/s
Iteration   1: 233696.803 ops/s
Iteration   2: 233061.880 ops/s
Iteration   3: 231744.921 ops/s
Iteration   4: 233516.970 ops/s
Iteration   5: 232653.661 ops/s
Iteration   6: 234142.131 ops/s
Iteration   7: 232499.843 ops/s
Iteration   8: 233132.463 ops/s
Iteration   9: 233230.302 ops/s
Iteration  10: 232776.149 ops/s
Iteration  11: 233244.419 ops/s
Iteration  12: 234078.898 ops/s
Iteration  13: 234790.082 ops/s
Iteration  14: 232547.219 ops/s
Iteration  15: 233427.211 ops/s
Iteration  16: 233699.774 ops/s
Iteration  17: 233175.292 ops/s
Iteration  18: 233764.453 ops/s
Iteration  19: 233869.375 ops/s
Iteration  20: 232159.510 ops/s
Iteration  21: 233260.221 ops/s
Iteration  22: 234158.374 ops/s
Iteration  23: 232623.479 ops/s
Iteration  24: 234036.353 ops/s
Iteration  25: 233904.751 ops/s
Iteration  26: 232933.919 ops/s
Iteration  27: 234854.827 ops/s
Iteration  28: 232428.829 ops/s
Iteration  29: 234207.776 ops/s
Iteration  30: 231389.829 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyCollection":
  233300.324 ±(99.9%) 555.811 ops/s [Average]
  (min, avg, max) = (231389.829, 233300.324, 234854.827), stdev = 831.912
  CI (99.9%): [232744.512, 233856.135] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  233300.324 ± 555.811  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117883.368 ops/s
# Warmup Iteration   2: 158039.108 ops/s
# Warmup Iteration   3: 192692.201 ops/s
# Warmup Iteration   4: 193039.832 ops/s
# Warmup Iteration   5: 193831.561 ops/s
# Warmup Iteration   6: 193739.199 ops/s
# Warmup Iteration   7: 193665.948 ops/s
# Warmup Iteration   8: 171343.233 ops/s
# Warmup Iteration   9: 185686.282 ops/s
# Warmup Iteration  10: 193476.766 ops/s
# Warmup Iteration  11: 193830.583 ops/s
# Warmup Iteration  12: 194386.498 ops/s
# Warmup Iteration  13: 193783.313 ops/s
# Warmup Iteration  14: 194104.437 ops/s
# Warmup Iteration  15: 193884.061 ops/s
# Warmup Iteration  16: 193655.889 ops/s
# Warmup Iteration  17: 193838.328 ops/s
# Warmup Iteration  18: 193909.017 ops/s
# Warmup Iteration  19: 194344.555 ops/s
# Warmup Iteration  20: 194087.262 ops/s
# Warmup Iteration  21: 193799.378 ops/s
# Warmup Iteration  22: 193545.454 ops/s
# Warmup Iteration  23: 193664.289 ops/s
# Warmup Iteration  24: 194286.753 ops/s
# Warmup Iteration  25: 193854.013 ops/s
# Warmup Iteration  26: 193668.085 ops/s
# Warmup Iteration  27: 193572.126 ops/s
# Warmup Iteration  28: 193792.601 ops/s
# Warmup Iteration  29: 194138.473 ops/s
# Warmup Iteration  30: 192474.826 ops/s
Iteration   1: 193590.312 ops/s
Iteration   2: 194323.609 ops/s
Iteration   3: 193708.219 ops/s
Iteration   4: 193404.605 ops/s
Iteration   5: 194213.484 ops/s
Iteration   6: 193659.750 ops/s
Iteration   7: 193024.863 ops/s
Iteration   8: 193897.142 ops/s
Iteration   9: 194879.448 ops/s
Iteration  10: 192910.492 ops/s
Iteration  11: 192728.690 ops/s
Iteration  12: 193548.376 ops/s
Iteration  13: 194483.072 ops/s
Iteration  14: 192893.820 ops/s
Iteration  15: 194020.138 ops/s
Iteration  16: 194654.344 ops/s
Iteration  17: 193913.245 ops/s
Iteration  18: 194389.815 ops/s
Iteration  19: 193755.552 ops/s
Iteration  20: 194396.226 ops/s
Iteration  21: 190531.208 ops/s
Iteration  22: 195194.912 ops/s
Iteration  23: 194421.782 ops/s
Iteration  24: 194261.173 ops/s
Iteration  25: 193357.762 ops/s
Iteration  26: 194242.221 ops/s
Iteration  27: 193669.373 ops/s
Iteration  28: 194484.331 ops/s
Iteration  29: 193704.598 ops/s
Iteration  30: 193297.657 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsAnyIterable":
  193785.341 ±(99.9%) 576.566 ops/s [Average]
  (min, avg, max) = (190531.208, 193785.341, 195194.912), stdev = 862.976
  CI (99.9%): [193208.775, 194361.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  193785.341 ± 576.566  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638606.880 ops/s
# Warmup Iteration   2: 687322.357 ops/s
# Warmup Iteration   3: 826548.389 ops/s
# Warmup Iteration   4: 885403.014 ops/s
# Warmup Iteration   5: 887146.223 ops/s
# Warmup Iteration   6: 883166.585 ops/s
# Warmup Iteration   7: 886750.906 ops/s
# Warmup Iteration   8: 884581.370 ops/s
# Warmup Iteration   9: 885177.316 ops/s
# Warmup Iteration  10: 886000.021 ops/s
# Warmup Iteration  11: 887371.208 ops/s
# Warmup Iteration  12: 887386.225 ops/s
# Warmup Iteration  13: 831801.000 ops/s
# Warmup Iteration  14: 793364.880 ops/s
# Warmup Iteration  15: 879524.436 ops/s
# Warmup Iteration  16: 886573.583 ops/s
# Warmup Iteration  17: 932757.119 ops/s
# Warmup Iteration  18: 932357.895 ops/s
# Warmup Iteration  19: 932788.258 ops/s
# Warmup Iteration  20: 935319.611 ops/s
# Warmup Iteration  21: 934665.104 ops/s
# Warmup Iteration  22: 930902.429 ops/s
# Warmup Iteration  23: 932467.263 ops/s
# Warmup Iteration  24: 936952.330 ops/s
# Warmup Iteration  25: 930689.021 ops/s
# Warmup Iteration  26: 938346.526 ops/s
# Warmup Iteration  27: 937617.020 ops/s
# Warmup Iteration  28: 931963.969 ops/s
# Warmup Iteration  29: 933361.521 ops/s
# Warmup Iteration  30: 929520.280 ops/s
Iteration   1: 931420.894 ops/s
Iteration   2: 935943.468 ops/s
Iteration   3: 932177.206 ops/s
Iteration   4: 935826.327 ops/s
Iteration   5: 932513.993 ops/s
Iteration   6: 937105.205 ops/s
Iteration   7: 935636.500 ops/s
Iteration   8: 932047.511 ops/s
Iteration   9: 936667.137 ops/s
Iteration  10: 939627.541 ops/s
Iteration  11: 942334.758 ops/s
Iteration  12: 933903.715 ops/s
Iteration  13: 934167.172 ops/s
Iteration  14: 934404.528 ops/s
Iteration  15: 936405.477 ops/s
Iteration  16: 932660.826 ops/s
Iteration  17: 936155.802 ops/s
Iteration  18: 932921.262 ops/s
Iteration  19: 931852.207 ops/s
Iteration  20: 937033.788 ops/s
Iteration  21: 939704.354 ops/s
Iteration  22: 937375.511 ops/s
Iteration  23: 937794.395 ops/s
Iteration  24: 940565.701 ops/s
Iteration  25: 932879.428 ops/s
Iteration  26: 930689.627 ops/s
Iteration  27: 938110.660 ops/s
Iteration  28: 930637.239 ops/s
Iteration  29: 929043.533 ops/s
Iteration  30: 927358.799 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsBy":
  934832.152 ±(99.9%) 2356.737 ops/s [Average]
  (min, avg, max) = (927358.799, 934832.152, 942334.758), stdev = 3527.453
  CI (99.9%): [932475.416, 937188.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsBy  thrpt   30  934832.152 ± 2356.737  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131465.604 ops/s
# Warmup Iteration   2: 189972.705 ops/s
# Warmup Iteration   3: 225709.109 ops/s
# Warmup Iteration   4: 225343.391 ops/s
# Warmup Iteration   5: 226025.991 ops/s
# Warmup Iteration   6: 225606.926 ops/s
# Warmup Iteration   7: 204493.042 ops/s
# Warmup Iteration   8: 212203.548 ops/s
# Warmup Iteration   9: 225840.685 ops/s
# Warmup Iteration  10: 225417.297 ops/s
# Warmup Iteration  11: 225505.809 ops/s
# Warmup Iteration  12: 226126.125 ops/s
# Warmup Iteration  13: 225992.845 ops/s
# Warmup Iteration  14: 225700.889 ops/s
# Warmup Iteration  15: 225242.560 ops/s
# Warmup Iteration  16: 225313.652 ops/s
# Warmup Iteration  17: 226458.103 ops/s
# Warmup Iteration  18: 225324.880 ops/s
# Warmup Iteration  19: 226052.260 ops/s
# Warmup Iteration  20: 225795.836 ops/s
# Warmup Iteration  21: 225873.240 ops/s
# Warmup Iteration  22: 225725.958 ops/s
# Warmup Iteration  23: 226187.756 ops/s
# Warmup Iteration  24: 224636.353 ops/s
# Warmup Iteration  25: 225387.379 ops/s
# Warmup Iteration  26: 225609.781 ops/s
# Warmup Iteration  27: 225750.009 ops/s
# Warmup Iteration  28: 225628.962 ops/s
# Warmup Iteration  29: 224179.086 ops/s
# Warmup Iteration  30: 224807.459 ops/s
Iteration   1: 225256.365 ops/s
Iteration   2: 225849.857 ops/s
Iteration   3: 225990.842 ops/s
Iteration   4: 226190.457 ops/s
Iteration   5: 224575.521 ops/s
Iteration   6: 226760.309 ops/s
Iteration   7: 226046.021 ops/s
Iteration   8: 225815.723 ops/s
Iteration   9: 225007.694 ops/s
Iteration  10: 227547.615 ops/s
Iteration  11: 225126.422 ops/s
Iteration  12: 224225.746 ops/s
Iteration  13: 225142.834 ops/s
Iteration  14: 225858.671 ops/s
Iteration  15: 226821.262 ops/s
Iteration  16: 225593.922 ops/s
Iteration  17: 225445.338 ops/s
Iteration  18: 226127.919 ops/s
Iteration  19: 224964.490 ops/s
Iteration  20: 225308.949 ops/s
Iteration  21: 225216.290 ops/s
Iteration  22: 226848.188 ops/s
Iteration  23: 226821.504 ops/s
Iteration  24: 225795.996 ops/s
Iteration  25: 226664.258 ops/s
Iteration  26: 224474.480 ops/s
Iteration  27: 224711.819 ops/s
Iteration  28: 225301.446 ops/s
Iteration  29: 223846.671 ops/s
Iteration  30: 224712.112 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneCollection":
  225601.624 ±(99.9%) 588.681 ops/s [Average]
  (min, avg, max) = (223846.671, 225601.624, 227547.615), stdev = 881.111
  CI (99.9%): [225012.943, 226190.306] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  225601.624 ± 588.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 116891.926 ops/s
# Warmup Iteration   2: 156039.580 ops/s
# Warmup Iteration   3: 190992.464 ops/s
# Warmup Iteration   4: 192135.276 ops/s
# Warmup Iteration   5: 192003.007 ops/s
# Warmup Iteration   6: 192139.928 ops/s
# Warmup Iteration   7: 192186.223 ops/s
# Warmup Iteration   8: 173268.418 ops/s
# Warmup Iteration   9: 181093.655 ops/s
# Warmup Iteration  10: 192512.831 ops/s
# Warmup Iteration  11: 191840.085 ops/s
# Warmup Iteration  12: 192433.991 ops/s
# Warmup Iteration  13: 191548.419 ops/s
# Warmup Iteration  14: 191560.379 ops/s
# Warmup Iteration  15: 191252.069 ops/s
# Warmup Iteration  16: 192660.070 ops/s
# Warmup Iteration  17: 191908.426 ops/s
# Warmup Iteration  18: 192659.280 ops/s
# Warmup Iteration  19: 192499.209 ops/s
# Warmup Iteration  20: 192418.860 ops/s
# Warmup Iteration  21: 191807.842 ops/s
# Warmup Iteration  22: 192973.677 ops/s
# Warmup Iteration  23: 192854.841 ops/s
# Warmup Iteration  24: 191980.467 ops/s
# Warmup Iteration  25: 191704.651 ops/s
# Warmup Iteration  26: 192295.374 ops/s
# Warmup Iteration  27: 192577.981 ops/s
# Warmup Iteration  28: 191277.976 ops/s
# Warmup Iteration  29: 191870.906 ops/s
# Warmup Iteration  30: 192014.765 ops/s
Iteration   1: 191891.785 ops/s
Iteration   2: 191401.516 ops/s
Iteration   3: 191367.880 ops/s
Iteration   4: 192959.330 ops/s
Iteration   5: 192758.283 ops/s
Iteration   6: 192314.234 ops/s
Iteration   7: 192913.041 ops/s
Iteration   8: 192900.032 ops/s
Iteration   9: 192253.817 ops/s
Iteration  10: 192115.363 ops/s
Iteration  11: 192168.235 ops/s
Iteration  12: 193126.366 ops/s
Iteration  13: 193794.219 ops/s
Iteration  14: 191718.727 ops/s
Iteration  15: 192515.619 ops/s
Iteration  16: 192532.565 ops/s
Iteration  17: 193100.711 ops/s
Iteration  18: 192008.036 ops/s
Iteration  19: 192811.884 ops/s
Iteration  20: 191558.836 ops/s
Iteration  21: 192504.586 ops/s
Iteration  22: 192544.331 ops/s
Iteration  23: 192054.501 ops/s
Iteration  24: 192870.350 ops/s
Iteration  25: 191622.901 ops/s
Iteration  26: 191376.438 ops/s
Iteration  27: 191534.403 ops/s
Iteration  28: 191526.851 ops/s
Iteration  29: 191433.786 ops/s
Iteration  30: 192329.472 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_containsNoneIterable":
  192266.937 ±(99.9%) 427.437 ops/s [Average]
  (min, avg, max) = (191367.880, 192266.937, 193794.219), stdev = 639.767
  CI (99.9%): [191839.500, 192694.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  192266.937 ± 427.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9550517.599 ops/s
# Warmup Iteration   2: 20086604.302 ops/s
# Warmup Iteration   3: 18252990.373 ops/s
# Warmup Iteration   4: 19636872.614 ops/s
# Warmup Iteration   5: 20637230.407 ops/s
# Warmup Iteration   6: 20630147.649 ops/s
# Warmup Iteration   7: 20572930.849 ops/s
# Warmup Iteration   8: 20704030.901 ops/s
# Warmup Iteration   9: 20642477.707 ops/s
# Warmup Iteration  10: 20544924.723 ops/s
# Warmup Iteration  11: 20630295.896 ops/s
# Warmup Iteration  12: 20629789.597 ops/s
# Warmup Iteration  13: 20635990.169 ops/s
# Warmup Iteration  14: 20528268.472 ops/s
# Warmup Iteration  15: 20628688.622 ops/s
# Warmup Iteration  16: 20614705.970 ops/s
# Warmup Iteration  17: 20693590.840 ops/s
# Warmup Iteration  18: 20668153.545 ops/s
# Warmup Iteration  19: 20696794.172 ops/s
# Warmup Iteration  20: 20567159.530 ops/s
# Warmup Iteration  21: 20641114.554 ops/s
# Warmup Iteration  22: 20659599.028 ops/s
# Warmup Iteration  23: 20656693.136 ops/s
# Warmup Iteration  24: 20640644.613 ops/s
# Warmup Iteration  25: 20657486.636 ops/s
# Warmup Iteration  26: 20688240.790 ops/s
# Warmup Iteration  27: 20586790.830 ops/s
# Warmup Iteration  28: 20517613.561 ops/s
# Warmup Iteration  29: 20648249.062 ops/s
# Warmup Iteration  30: 20650834.511 ops/s
Iteration   1: 20584946.799 ops/s
Iteration   2: 20585973.873 ops/s
Iteration   3: 20680904.839 ops/s
Iteration   4: 20663502.568 ops/s
Iteration   5: 20682152.315 ops/s
Iteration   6: 20581255.737 ops/s
Iteration   7: 20652693.446 ops/s
Iteration   8: 20765249.283 ops/s
Iteration   9: 20765735.957 ops/s
Iteration  10: 20531803.897 ops/s
Iteration  11: 20497884.443 ops/s
Iteration  12: 20631453.864 ops/s
Iteration  13: 20693689.184 ops/s
Iteration  14: 20625926.695 ops/s
Iteration  15: 20477462.423 ops/s
Iteration  16: 20712781.843 ops/s
Iteration  17: 20628274.291 ops/s
Iteration  18: 20677415.002 ops/s
Iteration  19: 20666328.246 ops/s
Iteration  20: 20686323.493 ops/s
Iteration  21: 20698914.087 ops/s
Iteration  22: 20690617.764 ops/s
Iteration  23: 20654419.868 ops/s
Iteration  24: 20643013.730 ops/s
Iteration  25: 20576723.493 ops/s
Iteration  26: 20665933.950 ops/s
Iteration  27: 20582672.315 ops/s
Iteration  28: 20565258.746 ops/s
Iteration  29: 20588090.127 ops/s
Iteration  30: 20828484.928 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_count":
  20642862.907 ±(99.9%) 51749.495 ops/s [Average]
  (min, avg, max) = (20477462.423, 20642862.907, 20828484.928), stdev = 77456.214
  CI (99.9%): [20591113.411, 20694612.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_count  thrpt   30  20642862.907 ± 51749.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1383998.877 ops/s
# Warmup Iteration   2: 2309773.411 ops/s
# Warmup Iteration   3: 2733795.515 ops/s
# Warmup Iteration   4: 2761668.042 ops/s
# Warmup Iteration   5: 2754092.932 ops/s
# Warmup Iteration   6: 2384049.764 ops/s
# Warmup Iteration   7: 2649944.342 ops/s
# Warmup Iteration   8: 2775308.852 ops/s
# Warmup Iteration   9: 2757826.018 ops/s
# Warmup Iteration  10: 2764120.228 ops/s
# Warmup Iteration  11: 2767895.988 ops/s
# Warmup Iteration  12: 2753493.097 ops/s
# Warmup Iteration  13: 2761291.938 ops/s
# Warmup Iteration  14: 2764172.810 ops/s
# Warmup Iteration  15: 2764903.235 ops/s
# Warmup Iteration  16: 2769300.673 ops/s
# Warmup Iteration  17: 2773441.314 ops/s
# Warmup Iteration  18: 2763798.557 ops/s
# Warmup Iteration  19: 2775844.185 ops/s
# Warmup Iteration  20: 2768743.643 ops/s
# Warmup Iteration  21: 2764271.600 ops/s
# Warmup Iteration  22: 2761555.330 ops/s
# Warmup Iteration  23: 2765295.500 ops/s
# Warmup Iteration  24: 2763856.252 ops/s
# Warmup Iteration  25: 2770164.744 ops/s
# Warmup Iteration  26: 2773994.117 ops/s
# Warmup Iteration  27: 2765701.242 ops/s
# Warmup Iteration  28: 2757417.197 ops/s
# Warmup Iteration  29: 2766142.397 ops/s
# Warmup Iteration  30: 2770174.918 ops/s
Iteration   1: 2755101.787 ops/s
Iteration   2: 2767170.454 ops/s
Iteration   3: 2768007.225 ops/s
Iteration   4: 2762118.837 ops/s
Iteration   5: 2776807.880 ops/s
Iteration   6: 2775186.677 ops/s
Iteration   7: 2770057.146 ops/s
Iteration   8: 2754395.458 ops/s
Iteration   9: 2767752.918 ops/s
Iteration  10: 2742064.588 ops/s
Iteration  11: 2774138.613 ops/s
Iteration  12: 2751650.122 ops/s
Iteration  13: 2763950.763 ops/s
Iteration  14: 2761571.046 ops/s
Iteration  15: 2764745.360 ops/s
Iteration  16: 2767571.725 ops/s
Iteration  17: 2770398.398 ops/s
Iteration  18: 2760924.741 ops/s
Iteration  19: 2764831.910 ops/s
Iteration  20: 2757847.271 ops/s
Iteration  21: 2765128.206 ops/s
Iteration  22: 2770472.150 ops/s
Iteration  23: 2755829.318 ops/s
Iteration  24: 2760549.064 ops/s
Iteration  25: 2764205.321 ops/s
Iteration  26: 2757439.032 ops/s
Iteration  27: 2767243.939 ops/s
Iteration  28: 2768309.785 ops/s
Iteration  29: 2772119.682 ops/s
Iteration  30: 2777317.621 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countBy":
  2764496.901 ±(99.9%) 5286.355 ops/s [Average]
  (min, avg, max) = (2742064.588, 2764496.901, 2777317.621), stdev = 7912.367
  CI (99.9%): [2759210.546, 2769783.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_countBy  thrpt   30  2764496.901 ± 5286.355  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 266605.163 ops/s
# Warmup Iteration   2: 442665.553 ops/s
# Warmup Iteration   3: 517936.780 ops/s
# Warmup Iteration   4: 526844.266 ops/s
# Warmup Iteration   5: 525162.661 ops/s
# Warmup Iteration   6: 490347.863 ops/s
# Warmup Iteration   7: 474011.162 ops/s
# Warmup Iteration   8: 528039.192 ops/s
# Warmup Iteration   9: 527523.875 ops/s
# Warmup Iteration  10: 524592.127 ops/s
# Warmup Iteration  11: 527098.966 ops/s
# Warmup Iteration  12: 525636.188 ops/s
# Warmup Iteration  13: 526979.570 ops/s
# Warmup Iteration  14: 527296.441 ops/s
# Warmup Iteration  15: 526998.656 ops/s
# Warmup Iteration  16: 526749.998 ops/s
# Warmup Iteration  17: 522366.733 ops/s
# Warmup Iteration  18: 525659.873 ops/s
# Warmup Iteration  19: 525692.699 ops/s
# Warmup Iteration  20: 525835.303 ops/s
# Warmup Iteration  21: 526325.963 ops/s
# Warmup Iteration  22: 527094.120 ops/s
# Warmup Iteration  23: 526275.394 ops/s
# Warmup Iteration  24: 525202.479 ops/s
# Warmup Iteration  25: 525491.344 ops/s
# Warmup Iteration  26: 523028.350 ops/s
# Warmup Iteration  27: 520483.970 ops/s
# Warmup Iteration  28: 525487.889 ops/s
# Warmup Iteration  29: 523696.568 ops/s
# Warmup Iteration  30: 526823.435 ops/s
Iteration   1: 527016.723 ops/s
Iteration   2: 525465.463 ops/s
Iteration   3: 524665.858 ops/s
Iteration   4: 526383.487 ops/s
Iteration   5: 527167.354 ops/s
Iteration   6: 523599.117 ops/s
Iteration   7: 524253.817 ops/s
Iteration   8: 528907.948 ops/s
Iteration   9: 528046.531 ops/s
Iteration  10: 527778.483 ops/s
Iteration  11: 523153.771 ops/s
Iteration  12: 525089.185 ops/s
Iteration  13: 526098.424 ops/s
Iteration  14: 526612.436 ops/s
Iteration  15: 526758.745 ops/s
Iteration  16: 527685.344 ops/s
Iteration  17: 526878.195 ops/s
Iteration  18: 523689.337 ops/s
Iteration  19: 525043.935 ops/s
Iteration  20: 525392.090 ops/s
Iteration  21: 526502.655 ops/s
Iteration  22: 527365.708 ops/s
Iteration  23: 524617.781 ops/s
Iteration  24: 528088.754 ops/s
Iteration  25: 524604.862 ops/s
Iteration  26: 523840.557 ops/s
Iteration  27: 528184.055 ops/s
Iteration  28: 529310.818 ops/s
Iteration  29: 523490.002 ops/s
Iteration  30: 524010.576 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByEach":
  525990.067 ±(99.9%) 1179.228 ops/s [Average]
  (min, avg, max) = (523153.771, 525990.067, 529310.818), stdev = 1765.013
  CI (99.9%): [524810.839, 527169.295] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_countByEach  thrpt   30  525990.067 ± 1179.228  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1351365.381 ops/s
# Warmup Iteration   2: 2272713.902 ops/s
# Warmup Iteration   3: 2661925.472 ops/s
# Warmup Iteration   4: 2697345.774 ops/s
# Warmup Iteration   5: 2663054.184 ops/s
# Warmup Iteration   6: 2299460.992 ops/s
# Warmup Iteration   7: 2611646.672 ops/s
# Warmup Iteration   8: 2679796.889 ops/s
# Warmup Iteration   9: 2689949.431 ops/s
# Warmup Iteration  10: 2687806.131 ops/s
# Warmup Iteration  11: 2670230.129 ops/s
# Warmup Iteration  12: 2678469.473 ops/s
# Warmup Iteration  13: 2683360.455 ops/s
# Warmup Iteration  14: 2688159.291 ops/s
# Warmup Iteration  15: 2683826.430 ops/s
# Warmup Iteration  16: 2685528.483 ops/s
# Warmup Iteration  17: 2677362.680 ops/s
# Warmup Iteration  18: 2691931.716 ops/s
# Warmup Iteration  19: 2672549.212 ops/s
# Warmup Iteration  20: 2670764.060 ops/s
# Warmup Iteration  21: 2685180.254 ops/s
# Warmup Iteration  22: 2675647.556 ops/s
# Warmup Iteration  23: 2681037.488 ops/s
# Warmup Iteration  24: 2676763.025 ops/s
# Warmup Iteration  25: 2677126.470 ops/s
# Warmup Iteration  26: 2675729.630 ops/s
# Warmup Iteration  27: 2672123.688 ops/s
# Warmup Iteration  28: 2677924.304 ops/s
# Warmup Iteration  29: 2685531.155 ops/s
# Warmup Iteration  30: 2681558.985 ops/s
Iteration   1: 2660249.478 ops/s
Iteration   2: 2675342.578 ops/s
Iteration   3: 2680024.077 ops/s
Iteration   4: 2672792.554 ops/s
Iteration   5: 2675462.482 ops/s
Iteration   6: 2679064.534 ops/s
Iteration   7: 2672486.872 ops/s
Iteration   8: 2676558.771 ops/s
Iteration   9: 2682883.156 ops/s
Iteration  10: 2675711.055 ops/s
Iteration  11: 2681781.159 ops/s
Iteration  12: 2694747.421 ops/s
Iteration  13: 2682640.788 ops/s
Iteration  14: 2685965.594 ops/s
Iteration  15: 2653922.355 ops/s
Iteration  16: 2672179.709 ops/s
Iteration  17: 2680557.768 ops/s
Iteration  18: 2666268.039 ops/s
Iteration  19: 2688036.848 ops/s
Iteration  20: 2683661.186 ops/s
Iteration  21: 2678128.144 ops/s
Iteration  22: 2658335.731 ops/s
Iteration  23: 2682188.715 ops/s
Iteration  24: 2679450.657 ops/s
Iteration  25: 2681618.476 ops/s
Iteration  26: 2683714.037 ops/s
Iteration  27: 2673803.630 ops/s
Iteration  28: 2667586.596 ops/s
Iteration  29: 2680600.097 ops/s
Iteration  30: 2679828.883 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countByWith":
  2676853.046 ±(99.9%) 5873.953 ops/s [Average]
  (min, avg, max) = (2653922.355, 2676853.046, 2694747.421), stdev = 8791.857
  CI (99.9%): [2670979.093, 2682726.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_countByWith  thrpt   30  2676853.046 ± 5873.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9689566.230 ops/s
# Warmup Iteration   2: 20193130.976 ops/s
# Warmup Iteration   3: 18067995.438 ops/s
# Warmup Iteration   4: 19489971.423 ops/s
# Warmup Iteration   5: 20426928.140 ops/s
# Warmup Iteration   6: 20477593.665 ops/s
# Warmup Iteration   7: 20463821.313 ops/s
# Warmup Iteration   8: 20453004.384 ops/s
# Warmup Iteration   9: 20428840.651 ops/s
# Warmup Iteration  10: 20488529.650 ops/s
# Warmup Iteration  11: 20427106.711 ops/s
# Warmup Iteration  12: 20341759.081 ops/s
# Warmup Iteration  13: 20360891.641 ops/s
# Warmup Iteration  14: 20454382.802 ops/s
# Warmup Iteration  15: 20504922.892 ops/s
# Warmup Iteration  16: 20444909.898 ops/s
# Warmup Iteration  17: 20401821.591 ops/s
# Warmup Iteration  18: 20395549.695 ops/s
# Warmup Iteration  19: 20430365.592 ops/s
# Warmup Iteration  20: 20373085.743 ops/s
# Warmup Iteration  21: 20457780.862 ops/s
# Warmup Iteration  22: 20437129.970 ops/s
# Warmup Iteration  23: 20490741.246 ops/s
# Warmup Iteration  24: 20436800.466 ops/s
# Warmup Iteration  25: 20257257.828 ops/s
# Warmup Iteration  26: 20300968.211 ops/s
# Warmup Iteration  27: 20379568.731 ops/s
# Warmup Iteration  28: 20459353.385 ops/s
# Warmup Iteration  29: 20372701.074 ops/s
# Warmup Iteration  30: 20464630.373 ops/s
Iteration   1: 20439691.167 ops/s
Iteration   2: 20379366.451 ops/s
Iteration   3: 20384112.668 ops/s
Iteration   4: 20415938.495 ops/s
Iteration   5: 20441725.198 ops/s
Iteration   6: 20415790.013 ops/s
Iteration   7: 20335202.995 ops/s
Iteration   8: 20349510.165 ops/s
Iteration   9: 20416569.127 ops/s
Iteration  10: 20377488.091 ops/s
Iteration  11: 20373903.998 ops/s
Iteration  12: 20348673.503 ops/s
Iteration  13: 20436413.653 ops/s
Iteration  14: 20384555.685 ops/s
Iteration  15: 20492959.246 ops/s
Iteration  16: 20407086.509 ops/s
Iteration  17: 20425513.504 ops/s
Iteration  18: 20356751.103 ops/s
Iteration  19: 20530797.019 ops/s
Iteration  20: 20368769.994 ops/s
Iteration  21: 20402047.316 ops/s
Iteration  22: 20349684.291 ops/s
Iteration  23: 20353452.770 ops/s
Iteration  24: 20204165.627 ops/s
Iteration  25: 20426957.244 ops/s
Iteration  26: 20403500.588 ops/s
Iteration  27: 20353024.073 ops/s
Iteration  28: 20447310.029 ops/s
Iteration  29: 20423098.195 ops/s
Iteration  30: 20357481.700 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_countWith":
  20393384.681 ±(99.9%) 38333.853 ops/s [Average]
  (min, avg, max) = (20204165.627, 20393384.681, 20530797.019), stdev = 57376.311
  CI (99.9%): [20355050.828, 20431718.534] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_countWith  thrpt   30  20393384.681 ± 38333.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4738272.892 ops/s
# Warmup Iteration   2: 10168042.817 ops/s
# Warmup Iteration   3: 9797743.450 ops/s
# Warmup Iteration   4: 9033468.069 ops/s
# Warmup Iteration   5: 10277857.159 ops/s
# Warmup Iteration   6: 10241522.400 ops/s
# Warmup Iteration   7: 10216074.068 ops/s
# Warmup Iteration   8: 10211495.500 ops/s
# Warmup Iteration   9: 10222020.191 ops/s
# Warmup Iteration  10: 10175253.856 ops/s
# Warmup Iteration  11: 10218761.223 ops/s
# Warmup Iteration  12: 10215476.651 ops/s
# Warmup Iteration  13: 10269865.170 ops/s
# Warmup Iteration  14: 10212866.270 ops/s
# Warmup Iteration  15: 10246862.583 ops/s
# Warmup Iteration  16: 10220421.705 ops/s
# Warmup Iteration  17: 10231144.017 ops/s
# Warmup Iteration  18: 10195926.566 ops/s
# Warmup Iteration  19: 10285236.161 ops/s
# Warmup Iteration  20: 10259731.898 ops/s
# Warmup Iteration  21: 10162095.513 ops/s
# Warmup Iteration  22: 10247360.196 ops/s
# Warmup Iteration  23: 10256277.182 ops/s
# Warmup Iteration  24: 10251325.656 ops/s
# Warmup Iteration  25: 10256278.296 ops/s
# Warmup Iteration  26: 10132483.804 ops/s
# Warmup Iteration  27: 10249315.178 ops/s
# Warmup Iteration  28: 10273912.881 ops/s
# Warmup Iteration  29: 10200148.775 ops/s
# Warmup Iteration  30: 10239569.580 ops/s
Iteration   1: 10193588.644 ops/s
Iteration   2: 10255063.878 ops/s
Iteration   3: 10288497.111 ops/s
Iteration   4: 10261595.731 ops/s
Iteration   5: 10240458.862 ops/s
Iteration   6: 10241692.489 ops/s
Iteration   7: 10264167.974 ops/s
Iteration   8: 10203735.092 ops/s
Iteration   9: 10187745.017 ops/s
Iteration  10: 10204203.315 ops/s
Iteration  11: 10228248.686 ops/s
Iteration  12: 10226933.656 ops/s
Iteration  13: 10258023.520 ops/s
Iteration  14: 10270074.264 ops/s
Iteration  15: 10213605.324 ops/s
Iteration  16: 10299424.967 ops/s
Iteration  17: 10286585.823 ops/s
Iteration  18: 10245019.733 ops/s
Iteration  19: 10121091.255 ops/s
Iteration  20: 10214997.412 ops/s
Iteration  21: 10202909.922 ops/s
Iteration  22: 10221077.445 ops/s
Iteration  23: 10272559.804 ops/s
Iteration  24: 10192343.455 ops/s
Iteration  25: 10277852.765 ops/s
Iteration  26: 10287037.125 ops/s
Iteration  27: 10273976.249 ops/s
Iteration  28: 10257102.092 ops/s
Iteration  29: 10265843.451 ops/s
Iteration  30: 10269089.668 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detect":
  10240818.158 ±(99.9%) 26461.387 ops/s [Average]
  (min, avg, max) = (10121091.255, 10240818.158, 10299424.967), stdev = 39606.162
  CI (99.9%): [10214356.770, 10267279.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_detect  thrpt   30  10240818.158 ± 26461.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4540457.618 ops/s
# Warmup Iteration   2: 10057033.552 ops/s
# Warmup Iteration   3: 9866430.994 ops/s
# Warmup Iteration   4: 8440931.781 ops/s
# Warmup Iteration   5: 9983061.199 ops/s
# Warmup Iteration   6: 9978323.335 ops/s
# Warmup Iteration   7: 9949565.777 ops/s
# Warmup Iteration   8: 9940787.456 ops/s
# Warmup Iteration   9: 9950308.614 ops/s
# Warmup Iteration  10: 9976688.296 ops/s
# Warmup Iteration  11: 9932139.726 ops/s
# Warmup Iteration  12: 9946116.198 ops/s
# Warmup Iteration  13: 9988322.267 ops/s
# Warmup Iteration  14: 9978009.452 ops/s
# Warmup Iteration  15: 9990590.111 ops/s
# Warmup Iteration  16: 9989976.399 ops/s
# Warmup Iteration  17: 10000603.484 ops/s
# Warmup Iteration  18: 9993388.560 ops/s
# Warmup Iteration  19: 10001112.530 ops/s
# Warmup Iteration  20: 10027021.892 ops/s
# Warmup Iteration  21: 9978235.582 ops/s
# Warmup Iteration  22: 9990433.542 ops/s
# Warmup Iteration  23: 9955733.410 ops/s
# Warmup Iteration  24: 9928281.069 ops/s
# Warmup Iteration  25: 9878504.551 ops/s
# Warmup Iteration  26: 9971520.901 ops/s
# Warmup Iteration  27: 9988315.347 ops/s
# Warmup Iteration  28: 9976194.923 ops/s
# Warmup Iteration  29: 9888548.461 ops/s
# Warmup Iteration  30: 9987310.867 ops/s
Iteration   1: 9997392.385 ops/s
Iteration   2: 9951949.848 ops/s
Iteration   3: 9968407.336 ops/s
Iteration   4: 9990742.099 ops/s
Iteration   5: 10016080.617 ops/s
Iteration   6: 9982685.300 ops/s
Iteration   7: 9923820.612 ops/s
Iteration   8: 9983529.638 ops/s
Iteration   9: 9985109.318 ops/s
Iteration  10: 9944565.765 ops/s
Iteration  11: 10010866.218 ops/s
Iteration  12: 9993968.706 ops/s
Iteration  13: 10018339.349 ops/s
Iteration  14: 9951290.035 ops/s
Iteration  15: 10000483.811 ops/s
Iteration  16: 9975889.728 ops/s
Iteration  17: 9972463.995 ops/s
Iteration  18: 9949587.286 ops/s
Iteration  19: 10033816.096 ops/s
Iteration  20: 9874080.084 ops/s
Iteration  21: 9899103.370 ops/s
Iteration  22: 9970677.063 ops/s
Iteration  23: 9957290.964 ops/s
Iteration  24: 9956332.045 ops/s
Iteration  25: 9935025.007 ops/s
Iteration  26: 9981881.373 ops/s
Iteration  27: 9991964.806 ops/s
Iteration  28: 9992385.241 ops/s
Iteration  29: 9987509.885 ops/s
Iteration  30: 10028487.241 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectIfNone":
  9974190.841 ±(99.9%) 24024.761 ops/s [Average]
  (min, avg, max) = (9874080.084, 9974190.841, 10033816.096), stdev = 35959.134
  CI (99.9%): [9950166.080, 9998215.602] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_detectIfNone  thrpt   30  9974190.841 ± 24024.761  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 545092.906 ops/s
# Warmup Iteration   2: 603042.370 ops/s
# Warmup Iteration   3: 792211.974 ops/s
# Warmup Iteration   4: 796135.663 ops/s
# Warmup Iteration   5: 789496.063 ops/s
# Warmup Iteration   6: 792833.404 ops/s
# Warmup Iteration   7: 795273.802 ops/s
# Warmup Iteration   8: 798022.078 ops/s
# Warmup Iteration   9: 794132.116 ops/s
# Warmup Iteration  10: 754424.483 ops/s
# Warmup Iteration  11: 707672.728 ops/s
# Warmup Iteration  12: 798626.434 ops/s
# Warmup Iteration  13: 797323.470 ops/s
# Warmup Iteration  14: 793252.439 ops/s
# Warmup Iteration  15: 798294.281 ops/s
# Warmup Iteration  16: 795416.112 ops/s
# Warmup Iteration  17: 836327.006 ops/s
# Warmup Iteration  18: 840549.185 ops/s
# Warmup Iteration  19: 834934.868 ops/s
# Warmup Iteration  20: 836958.414 ops/s
# Warmup Iteration  21: 835607.600 ops/s
# Warmup Iteration  22: 837802.832 ops/s
# Warmup Iteration  23: 834144.128 ops/s
# Warmup Iteration  24: 836935.898 ops/s
# Warmup Iteration  25: 835304.583 ops/s
# Warmup Iteration  26: 836097.055 ops/s
# Warmup Iteration  27: 836673.303 ops/s
# Warmup Iteration  28: 832758.612 ops/s
# Warmup Iteration  29: 834811.862 ops/s
# Warmup Iteration  30: 836850.070 ops/s
Iteration   1: 834795.998 ops/s
Iteration   2: 837039.625 ops/s
Iteration   3: 834734.748 ops/s
Iteration   4: 834038.922 ops/s
Iteration   5: 838622.629 ops/s
Iteration   6: 834374.312 ops/s
Iteration   7: 835810.277 ops/s
Iteration   8: 841107.538 ops/s
Iteration   9: 833578.344 ops/s
Iteration  10: 834714.268 ops/s
Iteration  11: 837063.064 ops/s
Iteration  12: 834074.597 ops/s
Iteration  13: 833109.887 ops/s
Iteration  14: 832331.747 ops/s
Iteration  15: 836475.843 ops/s
Iteration  16: 834792.323 ops/s
Iteration  17: 834913.320 ops/s
Iteration  18: 827941.342 ops/s
Iteration  19: 832629.879 ops/s
Iteration  20: 832009.303 ops/s
Iteration  21: 834556.532 ops/s
Iteration  22: 835711.734 ops/s
Iteration  23: 835663.505 ops/s
Iteration  24: 829359.817 ops/s
Iteration  25: 831153.991 ops/s
Iteration  26: 836339.272 ops/s
Iteration  27: 831864.494 ops/s
Iteration  28: 835100.017 ops/s
Iteration  29: 828298.179 ops/s
Iteration  30: 832549.155 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectOptional":
  834158.489 ±(99.9%) 1882.570 ops/s [Average]
  (min, avg, max) = (827941.342, 834158.489, 841107.538), stdev = 2817.743
  CI (99.9%): [832275.918, 836041.059] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_detectOptional  thrpt   30  834158.489 ± 1882.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4692823.972 ops/s
# Warmup Iteration   2: 10168086.999 ops/s
# Warmup Iteration   3: 9766666.394 ops/s
# Warmup Iteration   4: 8804596.464 ops/s
# Warmup Iteration   5: 10135899.587 ops/s
# Warmup Iteration   6: 10111337.967 ops/s
# Warmup Iteration   7: 10146276.446 ops/s
# Warmup Iteration   8: 10122155.525 ops/s
# Warmup Iteration   9: 10098752.919 ops/s
# Warmup Iteration  10: 10025985.619 ops/s
# Warmup Iteration  11: 10135274.316 ops/s
# Warmup Iteration  12: 10116072.127 ops/s
# Warmup Iteration  13: 10090976.965 ops/s
# Warmup Iteration  14: 10135365.354 ops/s
# Warmup Iteration  15: 10136549.646 ops/s
# Warmup Iteration  16: 10124119.370 ops/s
# Warmup Iteration  17: 10162337.437 ops/s
# Warmup Iteration  18: 10160335.605 ops/s
# Warmup Iteration  19: 10112683.295 ops/s
# Warmup Iteration  20: 10125668.384 ops/s
# Warmup Iteration  21: 10105017.511 ops/s
# Warmup Iteration  22: 10123854.242 ops/s
# Warmup Iteration  23: 10068270.976 ops/s
# Warmup Iteration  24: 10082442.816 ops/s
# Warmup Iteration  25: 10112223.758 ops/s
# Warmup Iteration  26: 10106814.346 ops/s
# Warmup Iteration  27: 10122620.739 ops/s
# Warmup Iteration  28: 10111843.974 ops/s
# Warmup Iteration  29: 10111922.141 ops/s
# Warmup Iteration  30: 10148165.630 ops/s
Iteration   1: 10063838.372 ops/s
Iteration   2: 10119071.002 ops/s
Iteration   3: 10146272.477 ops/s
Iteration   4: 10141369.023 ops/s
Iteration   5: 10092820.149 ops/s
Iteration   6: 10104058.842 ops/s
Iteration   7: 10113790.659 ops/s
Iteration   8: 10167216.171 ops/s
Iteration   9: 10171318.681 ops/s
Iteration  10: 10165602.152 ops/s
Iteration  11: 10210628.100 ops/s
Iteration  12: 10131723.538 ops/s
Iteration  13: 10133348.357 ops/s
Iteration  14: 10132855.748 ops/s
Iteration  15: 10135271.404 ops/s
Iteration  16: 10132928.960 ops/s
Iteration  17: 10063378.308 ops/s
Iteration  18: 10094851.152 ops/s
Iteration  19: 10092790.006 ops/s
Iteration  20: 10123010.735 ops/s
Iteration  21: 10168867.773 ops/s
Iteration  22: 10168450.143 ops/s
Iteration  23: 10168964.815 ops/s
Iteration  24: 10123087.805 ops/s
Iteration  25: 10171409.761 ops/s
Iteration  26: 10135757.800 ops/s
Iteration  27: 10162685.552 ops/s
Iteration  28: 10155783.769 ops/s
Iteration  29: 10116538.803 ops/s
Iteration  30: 10115017.824 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWith":
  10134090.263 ±(99.9%) 22597.483 ops/s [Average]
  (min, avg, max) = (10063378.308, 10134090.263, 10210628.100), stdev = 33822.851
  CI (99.9%): [10111492.780, 10156687.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_detectWith  thrpt   30  10134090.263 ± 22597.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4577376.262 ops/s
# Warmup Iteration   2: 8131107.035 ops/s
# Warmup Iteration   3: 8153211.920 ops/s
# Warmup Iteration   4: 6780520.987 ops/s
# Warmup Iteration   5: 8151436.219 ops/s
# Warmup Iteration   6: 8165702.710 ops/s
# Warmup Iteration   7: 8166875.882 ops/s
# Warmup Iteration   8: 8115878.544 ops/s
# Warmup Iteration   9: 8138741.637 ops/s
# Warmup Iteration  10: 8123151.810 ops/s
# Warmup Iteration  11: 8114982.610 ops/s
# Warmup Iteration  12: 8124347.146 ops/s
# Warmup Iteration  13: 8143221.270 ops/s
# Warmup Iteration  14: 8173525.756 ops/s
# Warmup Iteration  15: 8183438.249 ops/s
# Warmup Iteration  16: 8163643.359 ops/s
# Warmup Iteration  17: 8165252.144 ops/s
# Warmup Iteration  18: 8170021.603 ops/s
# Warmup Iteration  19: 8131028.898 ops/s
# Warmup Iteration  20: 8151314.550 ops/s
# Warmup Iteration  21: 8137192.234 ops/s
# Warmup Iteration  22: 8154142.592 ops/s
# Warmup Iteration  23: 8166684.084 ops/s
# Warmup Iteration  24: 8117564.436 ops/s
# Warmup Iteration  25: 8141914.558 ops/s
# Warmup Iteration  26: 8194252.245 ops/s
# Warmup Iteration  27: 8164801.207 ops/s
# Warmup Iteration  28: 8184723.861 ops/s
# Warmup Iteration  29: 8167232.824 ops/s
# Warmup Iteration  30: 8138181.926 ops/s
Iteration   1: 8156919.139 ops/s
Iteration   2: 8131204.399 ops/s
Iteration   3: 8120285.502 ops/s
Iteration   4: 8117458.206 ops/s
Iteration   5: 8167950.274 ops/s
Iteration   6: 8142013.394 ops/s
Iteration   7: 8140995.271 ops/s
Iteration   8: 8159948.536 ops/s
Iteration   9: 8143282.429 ops/s
Iteration  10: 8125829.368 ops/s
Iteration  11: 8119445.656 ops/s
Iteration  12: 8162282.671 ops/s
Iteration  13: 8178267.156 ops/s
Iteration  14: 8129383.956 ops/s
Iteration  15: 8113435.113 ops/s
Iteration  16: 8172212.927 ops/s
Iteration  17: 8168815.510 ops/s
Iteration  18: 8139258.338 ops/s
Iteration  19: 8154102.802 ops/s
Iteration  20: 8144614.201 ops/s
Iteration  21: 8154073.508 ops/s
Iteration  22: 8160964.615 ops/s
Iteration  23: 8096385.313 ops/s
Iteration  24: 8182330.793 ops/s
Iteration  25: 8171488.572 ops/s
Iteration  26: 8176003.896 ops/s
Iteration  27: 8181376.628 ops/s
Iteration  28: 8172318.986 ops/s
Iteration  29: 8118156.009 ops/s
Iteration  30: 8125127.281 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock":
  8147531.015 ±(99.9%) 15849.159 ops/s [Average]
  (min, avg, max) = (8096385.313, 8147531.015, 8182330.793), stdev = 23722.276
  CI (99.9%): [8131681.856, 8163380.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  8147531.015 ± 15849.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 548891.063 ops/s
# Warmup Iteration   2: 605428.708 ops/s
# Warmup Iteration   3: 789405.618 ops/s
# Warmup Iteration   4: 788250.639 ops/s
# Warmup Iteration   5: 784600.711 ops/s
# Warmup Iteration   6: 790286.681 ops/s
# Warmup Iteration   7: 791284.273 ops/s
# Warmup Iteration   8: 784204.753 ops/s
# Warmup Iteration   9: 785603.896 ops/s
# Warmup Iteration  10: 759302.552 ops/s
# Warmup Iteration  11: 689304.562 ops/s
# Warmup Iteration  12: 790204.136 ops/s
# Warmup Iteration  13: 787797.483 ops/s
# Warmup Iteration  14: 787222.083 ops/s
# Warmup Iteration  15: 783677.503 ops/s
# Warmup Iteration  16: 788218.514 ops/s
# Warmup Iteration  17: 826947.703 ops/s
# Warmup Iteration  18: 827393.138 ops/s
# Warmup Iteration  19: 825439.360 ops/s
# Warmup Iteration  20: 825716.561 ops/s
# Warmup Iteration  21: 823019.498 ops/s
# Warmup Iteration  22: 824344.517 ops/s
# Warmup Iteration  23: 821185.393 ops/s
# Warmup Iteration  24: 824090.061 ops/s
# Warmup Iteration  25: 824030.418 ops/s
# Warmup Iteration  26: 821838.825 ops/s
# Warmup Iteration  27: 821891.358 ops/s
# Warmup Iteration  28: 817681.510 ops/s
# Warmup Iteration  29: 823416.189 ops/s
# Warmup Iteration  30: 823209.135 ops/s
Iteration   1: 822385.206 ops/s
Iteration   2: 818623.516 ops/s
Iteration   3: 824536.668 ops/s
Iteration   4: 820170.171 ops/s
Iteration   5: 823673.682 ops/s
Iteration   6: 825354.975 ops/s
Iteration   7: 824944.025 ops/s
Iteration   8: 818811.236 ops/s
Iteration   9: 824303.074 ops/s
Iteration  10: 820270.514 ops/s
Iteration  11: 822597.663 ops/s
Iteration  12: 824219.388 ops/s
Iteration  13: 819847.235 ops/s
Iteration  14: 824552.928 ops/s
Iteration  15: 826698.509 ops/s
Iteration  16: 820248.464 ops/s
Iteration  17: 819135.019 ops/s
Iteration  18: 827913.913 ops/s
Iteration  19: 827463.789 ops/s
Iteration  20: 825356.637 ops/s
Iteration  21: 823651.234 ops/s
Iteration  22: 826827.170 ops/s
Iteration  23: 821838.209 ops/s
Iteration  24: 818351.598 ops/s
Iteration  25: 824764.115 ops/s
Iteration  26: 826772.222 ops/s
Iteration  27: 827658.842 ops/s
Iteration  28: 825365.342 ops/s
Iteration  29: 827285.208 ops/s
Iteration  30: 827153.357 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_detectWithOptional":
  823692.464 ±(99.9%) 2038.928 ops/s [Average]
  (min, avg, max) = (818351.598, 823692.464, 827913.913), stdev = 3051.772
  CI (99.9%): [821653.535, 825731.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_detectWithOptional  thrpt   30  823692.464 ± 2038.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10382744.615 ops/s
# Warmup Iteration   2: 17458832.591 ops/s
# Warmup Iteration   3: 19805074.756 ops/s
# Warmup Iteration   4: 20053572.377 ops/s
# Warmup Iteration   5: 19967335.183 ops/s
# Warmup Iteration   6: 19922223.298 ops/s
# Warmup Iteration   7: 19767022.929 ops/s
# Warmup Iteration   8: 20017203.957 ops/s
# Warmup Iteration   9: 20079384.199 ops/s
# Warmup Iteration  10: 19892158.522 ops/s
# Warmup Iteration  11: 19954626.945 ops/s
# Warmup Iteration  12: 20045360.171 ops/s
# Warmup Iteration  13: 20088513.536 ops/s
# Warmup Iteration  14: 20107584.336 ops/s
# Warmup Iteration  15: 20064007.064 ops/s
# Warmup Iteration  16: 19995680.021 ops/s
# Warmup Iteration  17: 19994594.326 ops/s
# Warmup Iteration  18: 20129803.922 ops/s
# Warmup Iteration  19: 20263167.548 ops/s
# Warmup Iteration  20: 20105655.192 ops/s
# Warmup Iteration  21: 20093892.191 ops/s
# Warmup Iteration  22: 19989204.931 ops/s
# Warmup Iteration  23: 19619894.122 ops/s
# Warmup Iteration  24: 20061206.389 ops/s
# Warmup Iteration  25: 20148909.380 ops/s
# Warmup Iteration  26: 20185043.153 ops/s
# Warmup Iteration  27: 20175389.405 ops/s
# Warmup Iteration  28: 20104266.428 ops/s
# Warmup Iteration  29: 20143650.444 ops/s
# Warmup Iteration  30: 20155113.002 ops/s
Iteration   1: 20125329.380 ops/s
Iteration   2: 20249660.367 ops/s
Iteration   3: 20138125.403 ops/s
Iteration   4: 20063589.280 ops/s
Iteration   5: 20214364.134 ops/s
Iteration   6: 20002225.154 ops/s
Iteration   7: 20147701.597 ops/s
Iteration   8: 20261946.691 ops/s
Iteration   9: 20244774.524 ops/s
Iteration  10: 20128728.062 ops/s
Iteration  11: 20088953.443 ops/s
Iteration  12: 20000964.203 ops/s
Iteration  13: 19569814.214 ops/s
Iteration  14: 20018232.972 ops/s
Iteration  15: 20049705.361 ops/s
Iteration  16: 20010055.599 ops/s
Iteration  17: 20045895.500 ops/s
Iteration  18: 20033549.572 ops/s
Iteration  19: 20110183.804 ops/s
Iteration  20: 19952047.409 ops/s
Iteration  21: 20239587.150 ops/s
Iteration  22: 20046495.532 ops/s
Iteration  23: 20095893.199 ops/s
Iteration  24: 19928367.669 ops/s
Iteration  25: 19924459.430 ops/s
Iteration  26: 19953285.905 ops/s
Iteration  27: 19996808.257 ops/s
Iteration  28: 20189886.950 ops/s
Iteration  29: 20142648.930 ops/s
Iteration  30: 20112891.558 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_empty":
  20069539.042 ±(99.9%) 90614.756 ops/s [Average]
  (min, avg, max) = (19569814.214, 20069539.042, 20261946.691), stdev = 135627.911
  CI (99.9%): [19978924.286, 20160153.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_empty  thrpt   30  20069539.042 ± 90614.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1017695.806 ops/s
# Warmup Iteration   2: 2329685.991 ops/s
# Warmup Iteration   3: 1940664.921 ops/s
# Warmup Iteration   4: 2328435.918 ops/s
# Warmup Iteration   5: 2323009.647 ops/s
# Warmup Iteration   6: 2332653.164 ops/s
# Warmup Iteration   7: 2309093.874 ops/s
# Warmup Iteration   8: 2320744.665 ops/s
# Warmup Iteration   9: 2322028.570 ops/s
# Warmup Iteration  10: 2320228.582 ops/s
# Warmup Iteration  11: 2318533.844 ops/s
# Warmup Iteration  12: 2318788.905 ops/s
# Warmup Iteration  13: 2323211.984 ops/s
# Warmup Iteration  14: 2327868.126 ops/s
# Warmup Iteration  15: 2329640.153 ops/s
# Warmup Iteration  16: 2334015.259 ops/s
# Warmup Iteration  17: 2321294.670 ops/s
# Warmup Iteration  18: 2314213.287 ops/s
# Warmup Iteration  19: 2318295.552 ops/s
# Warmup Iteration  20: 2322954.138 ops/s
# Warmup Iteration  21: 2305103.348 ops/s
# Warmup Iteration  22: 2313661.246 ops/s
# Warmup Iteration  23: 2339093.102 ops/s
# Warmup Iteration  24: 2330192.240 ops/s
# Warmup Iteration  25: 2318979.356 ops/s
# Warmup Iteration  26: 2327449.563 ops/s
# Warmup Iteration  27: 2314909.085 ops/s
# Warmup Iteration  28: 2331857.972 ops/s
# Warmup Iteration  29: 2317086.744 ops/s
# Warmup Iteration  30: 2328148.094 ops/s
Iteration   1: 2328999.178 ops/s
Iteration   2: 2322205.295 ops/s
Iteration   3: 2333243.000 ops/s
Iteration   4: 2326909.182 ops/s
Iteration   5: 2333765.079 ops/s
Iteration   6: 2333866.967 ops/s
Iteration   7: 2334631.998 ops/s
Iteration   8: 2315842.719 ops/s
Iteration   9: 2318551.100 ops/s
Iteration  10: 2317844.402 ops/s
Iteration  11: 2333306.981 ops/s
Iteration  12: 2318370.674 ops/s
Iteration  13: 2322730.260 ops/s
Iteration  14: 2312497.445 ops/s
Iteration  15: 2309805.784 ops/s
Iteration  16: 2322087.006 ops/s
Iteration  17: 2320651.968 ops/s
Iteration  18: 2324301.063 ops/s
Iteration  19: 2320434.164 ops/s
Iteration  20: 2335443.198 ops/s
Iteration  21: 2341894.965 ops/s
Iteration  22: 2323929.564 ops/s
Iteration  23: 2335974.659 ops/s
Iteration  24: 2324784.610 ops/s
Iteration  25: 2328496.812 ops/s
Iteration  26: 2322549.162 ops/s
Iteration  27: 2317013.387 ops/s
Iteration  28: 2330966.083 ops/s
Iteration  29: 2323531.219 ops/s
Iteration  30: 2320441.069 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_equalsAndHashCode":
  2325168.966 ±(99.9%) 5160.455 ops/s [Average]
  (min, avg, max) = (2309805.784, 2325168.966, 2341894.965), stdev = 7723.927
  CI (99.9%): [2320008.511, 2330329.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  2325168.966 ± 5160.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245714.943 ops/s
# Warmup Iteration   2: 393440.652 ops/s
# Warmup Iteration   3: 481097.657 ops/s
# Warmup Iteration   4: 476702.501 ops/s
# Warmup Iteration   5: 479907.420 ops/s
# Warmup Iteration   6: 481307.894 ops/s
# Warmup Iteration   7: 396748.796 ops/s
# Warmup Iteration   8: 480312.985 ops/s
# Warmup Iteration   9: 481182.684 ops/s
# Warmup Iteration  10: 482406.505 ops/s
# Warmup Iteration  11: 480516.711 ops/s
# Warmup Iteration  12: 479472.500 ops/s
# Warmup Iteration  13: 483644.374 ops/s
# Warmup Iteration  14: 481942.196 ops/s
# Warmup Iteration  15: 482374.064 ops/s
# Warmup Iteration  16: 481468.609 ops/s
# Warmup Iteration  17: 479736.605 ops/s
# Warmup Iteration  18: 480445.679 ops/s
# Warmup Iteration  19: 481632.127 ops/s
# Warmup Iteration  20: 480339.501 ops/s
# Warmup Iteration  21: 478807.055 ops/s
# Warmup Iteration  22: 479177.470 ops/s
# Warmup Iteration  23: 481770.409 ops/s
# Warmup Iteration  24: 481718.150 ops/s
# Warmup Iteration  25: 479493.339 ops/s
# Warmup Iteration  26: 479078.014 ops/s
# Warmup Iteration  27: 479718.847 ops/s
# Warmup Iteration  28: 481406.120 ops/s
# Warmup Iteration  29: 481932.053 ops/s
# Warmup Iteration  30: 482106.207 ops/s
Iteration   1: 481795.953 ops/s
Iteration   2: 479970.017 ops/s
Iteration   3: 478914.240 ops/s
Iteration   4: 481375.006 ops/s
Iteration   5: 479573.343 ops/s
Iteration   6: 479796.062 ops/s
Iteration   7: 479722.777 ops/s
Iteration   8: 476396.495 ops/s
Iteration   9: 481586.314 ops/s
Iteration  10: 481151.782 ops/s
Iteration  11: 476854.538 ops/s
Iteration  12: 480806.224 ops/s
Iteration  13: 482377.931 ops/s
Iteration  14: 480931.030 ops/s
Iteration  15: 478987.444 ops/s
Iteration  16: 479636.605 ops/s
Iteration  17: 480751.387 ops/s
Iteration  18: 479865.550 ops/s
Iteration  19: 477691.127 ops/s
Iteration  20: 480744.822 ops/s
Iteration  21: 481247.433 ops/s
Iteration  22: 481016.423 ops/s
Iteration  23: 482735.986 ops/s
Iteration  24: 478941.119 ops/s
Iteration  25: 483510.158 ops/s
Iteration  26: 481014.429 ops/s
Iteration  27: 483058.967 ops/s
Iteration  28: 479645.289 ops/s
Iteration  29: 481582.684 ops/s
Iteration  30: 482612.907 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollect":
  480476.468 ±(99.9%) 1141.581 ops/s [Average]
  (min, avg, max) = (476396.495, 480476.468, 483510.158), stdev = 1708.664
  CI (99.9%): [479334.887, 481618.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollect  thrpt   30  480476.468 ± 1141.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1300645.654 ops/s
# Warmup Iteration   2: 3046796.754 ops/s
# Warmup Iteration   3: 3128064.132 ops/s
# Warmup Iteration   4: 2584891.400 ops/s
# Warmup Iteration   5: 3148081.838 ops/s
# Warmup Iteration   6: 3140406.239 ops/s
# Warmup Iteration   7: 3129932.287 ops/s
# Warmup Iteration   8: 3130824.361 ops/s
# Warmup Iteration   9: 3133591.187 ops/s
# Warmup Iteration  10: 3134600.250 ops/s
# Warmup Iteration  11: 3128419.822 ops/s
# Warmup Iteration  12: 3125922.217 ops/s
# Warmup Iteration  13: 3120439.859 ops/s
# Warmup Iteration  14: 3138773.275 ops/s
# Warmup Iteration  15: 3143578.010 ops/s
# Warmup Iteration  16: 3143272.288 ops/s
# Warmup Iteration  17: 3150983.524 ops/s
# Warmup Iteration  18: 3136760.082 ops/s
# Warmup Iteration  19: 3130295.344 ops/s
# Warmup Iteration  20: 3107128.044 ops/s
# Warmup Iteration  21: 3130944.134 ops/s
# Warmup Iteration  22: 3117947.159 ops/s
# Warmup Iteration  23: 3116336.978 ops/s
# Warmup Iteration  24: 3139232.102 ops/s
# Warmup Iteration  25: 3138455.187 ops/s
# Warmup Iteration  26: 3135815.430 ops/s
# Warmup Iteration  27: 3128074.084 ops/s
# Warmup Iteration  28: 3130080.789 ops/s
# Warmup Iteration  29: 3141963.442 ops/s
# Warmup Iteration  30: 3131324.427 ops/s
Iteration   1: 3142016.714 ops/s
Iteration   2: 3129826.277 ops/s
Iteration   3: 3134340.304 ops/s
Iteration   4: 3140546.830 ops/s
Iteration   5: 3147361.741 ops/s
Iteration   6: 3133274.925 ops/s
Iteration   7: 3131841.005 ops/s
Iteration   8: 3121798.773 ops/s
Iteration   9: 3136148.471 ops/s
Iteration  10: 3133115.020 ops/s
Iteration  11: 3127608.358 ops/s
Iteration  12: 3134723.728 ops/s
Iteration  13: 3134889.503 ops/s
Iteration  14: 3123466.970 ops/s
Iteration  15: 3141903.232 ops/s
Iteration  16: 3114593.915 ops/s
Iteration  17: 3146725.336 ops/s
Iteration  18: 3140451.704 ops/s
Iteration  19: 3120008.236 ops/s
Iteration  20: 3137678.106 ops/s
Iteration  21: 3140983.337 ops/s
Iteration  22: 3159785.732 ops/s
Iteration  23: 3143545.009 ops/s
Iteration  24: 3130437.196 ops/s
Iteration  25: 3148084.740 ops/s
Iteration  26: 3145539.705 ops/s
Iteration  27: 3132949.175 ops/s
Iteration  28: 3137765.247 ops/s
Iteration  29: 3144989.100 ops/s
Iteration  30: 3142737.648 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectBoolean":
  3136637.868 ±(99.9%) 6350.815 ops/s [Average]
  (min, avg, max) = (3114593.915, 3136637.868, 3159785.732), stdev = 9505.602
  CI (99.9%): [3130287.053, 3142988.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3136637.868 ± 6350.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 626910.911 ops/s
# Warmup Iteration   2: 988890.138 ops/s
# Warmup Iteration   3: 1177535.970 ops/s
# Warmup Iteration   4: 1184470.080 ops/s
# Warmup Iteration   5: 1184804.324 ops/s
# Warmup Iteration   6: 1191448.621 ops/s
# Warmup Iteration   7: 978402.216 ops/s
# Warmup Iteration   8: 1192025.917 ops/s
# Warmup Iteration   9: 1186284.506 ops/s
# Warmup Iteration  10: 1189606.671 ops/s
# Warmup Iteration  11: 1189738.803 ops/s
# Warmup Iteration  12: 1191081.192 ops/s
# Warmup Iteration  13: 1195124.359 ops/s
# Warmup Iteration  14: 1190866.554 ops/s
# Warmup Iteration  15: 1193018.642 ops/s
# Warmup Iteration  16: 1194261.766 ops/s
# Warmup Iteration  17: 1192511.119 ops/s
# Warmup Iteration  18: 1194103.542 ops/s
# Warmup Iteration  19: 1190014.246 ops/s
# Warmup Iteration  20: 1188130.113 ops/s
# Warmup Iteration  21: 1185578.452 ops/s
# Warmup Iteration  22: 1194650.572 ops/s
# Warmup Iteration  23: 1193583.472 ops/s
# Warmup Iteration  24: 1196054.892 ops/s
# Warmup Iteration  25: 1195846.254 ops/s
# Warmup Iteration  26: 1192896.788 ops/s
# Warmup Iteration  27: 1189837.628 ops/s
# Warmup Iteration  28: 1191281.034 ops/s
# Warmup Iteration  29: 1193122.748 ops/s
# Warmup Iteration  30: 1190265.959 ops/s
Iteration   1: 1184480.210 ops/s
Iteration   2: 1198932.197 ops/s
Iteration   3: 1183138.985 ops/s
Iteration   4: 1186987.748 ops/s
Iteration   5: 1188621.366 ops/s
Iteration   6: 1192024.015 ops/s
Iteration   7: 1194508.792 ops/s
Iteration   8: 1186952.402 ops/s
Iteration   9: 1186293.164 ops/s
Iteration  10: 1199348.965 ops/s
Iteration  11: 1194231.845 ops/s
Iteration  12: 1187897.908 ops/s
Iteration  13: 1196304.995 ops/s
Iteration  14: 1192372.497 ops/s
Iteration  15: 1184925.381 ops/s
Iteration  16: 1192415.140 ops/s
Iteration  17: 1185158.317 ops/s
Iteration  18: 1190519.999 ops/s
Iteration  19: 1191556.102 ops/s
Iteration  20: 1191184.645 ops/s
Iteration  21: 1192309.812 ops/s
Iteration  22: 1189228.919 ops/s
Iteration  23: 1187096.235 ops/s
Iteration  24: 1188235.808 ops/s
Iteration  25: 1185108.347 ops/s
Iteration  26: 1191682.471 ops/s
Iteration  27: 1187233.171 ops/s
Iteration  28: 1192124.284 ops/s
Iteration  29: 1190530.911 ops/s
Iteration  30: 1188108.023 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectByte":
  1189983.755 ±(99.9%) 2746.986 ops/s [Average]
  (min, avg, max) = (1183138.985, 1189983.755, 1199348.965), stdev = 4111.560
  CI (99.9%): [1187236.769, 1192730.741] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1189983.755 ± 2746.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802065.347 ops/s
# Warmup Iteration   2: 1880668.631 ops/s
# Warmup Iteration   3: 1938483.588 ops/s
# Warmup Iteration   4: 1628527.784 ops/s
# Warmup Iteration   5: 1903059.330 ops/s
# Warmup Iteration   6: 1945291.392 ops/s
# Warmup Iteration   7: 1941725.454 ops/s
# Warmup Iteration   8: 1944310.071 ops/s
# Warmup Iteration   9: 1933221.415 ops/s
# Warmup Iteration  10: 1935512.150 ops/s
# Warmup Iteration  11: 1941105.593 ops/s
# Warmup Iteration  12: 1939413.360 ops/s
# Warmup Iteration  13: 1939337.364 ops/s
# Warmup Iteration  14: 1946368.263 ops/s
# Warmup Iteration  15: 1942098.892 ops/s
# Warmup Iteration  16: 1947942.898 ops/s
# Warmup Iteration  17: 1944188.805 ops/s
# Warmup Iteration  18: 1946395.065 ops/s
# Warmup Iteration  19: 1930607.374 ops/s
# Warmup Iteration  20: 1942677.933 ops/s
# Warmup Iteration  21: 1938634.776 ops/s
# Warmup Iteration  22: 1945457.866 ops/s
# Warmup Iteration  23: 1925170.495 ops/s
# Warmup Iteration  24: 1944000.867 ops/s
# Warmup Iteration  25: 1932472.501 ops/s
# Warmup Iteration  26: 1938064.251 ops/s
# Warmup Iteration  27: 1942566.274 ops/s
# Warmup Iteration  28: 1944461.550 ops/s
# Warmup Iteration  29: 1938611.300 ops/s
# Warmup Iteration  30: 1936360.898 ops/s
Iteration   1: 1941544.026 ops/s
Iteration   2: 1939694.455 ops/s
Iteration   3: 1937683.033 ops/s
Iteration   4: 1939848.980 ops/s
Iteration   5: 1933361.977 ops/s
Iteration   6: 1944221.259 ops/s
Iteration   7: 1935354.083 ops/s
Iteration   8: 1930681.454 ops/s
Iteration   9: 1936410.096 ops/s
Iteration  10: 1935978.972 ops/s
Iteration  11: 1933373.652 ops/s
Iteration  12: 1943508.870 ops/s
Iteration  13: 1934090.766 ops/s
Iteration  14: 1952482.381 ops/s
Iteration  15: 1939230.554 ops/s
Iteration  16: 1926379.843 ops/s
Iteration  17: 1932899.510 ops/s
Iteration  18: 1944605.205 ops/s
Iteration  19: 1936941.262 ops/s
Iteration  20: 1938218.495 ops/s
Iteration  21: 1941219.527 ops/s
Iteration  22: 1934868.032 ops/s
Iteration  23: 1947690.626 ops/s
Iteration  24: 1941911.287 ops/s
Iteration  25: 1933549.286 ops/s
Iteration  26: 1935218.979 ops/s
Iteration  27: 1936674.846 ops/s
Iteration  28: 1949321.921 ops/s
Iteration  29: 1934412.365 ops/s
Iteration  30: 1951091.175 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectChar":
  1938748.897 ±(99.9%) 4086.177 ops/s [Average]
  (min, avg, max) = (1926379.843, 1938748.897, 1952482.381), stdev = 6115.998
  CI (99.9%): [1934662.720, 1942835.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1938748.897 ± 4086.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 429130.101 ops/s
# Warmup Iteration   2: 1039465.191 ops/s
# Warmup Iteration   3: 1054552.791 ops/s
# Warmup Iteration   4: 875007.692 ops/s
# Warmup Iteration   5: 1052893.076 ops/s
# Warmup Iteration   6: 1061897.624 ops/s
# Warmup Iteration   7: 1057679.363 ops/s
# Warmup Iteration   8: 1054718.673 ops/s
# Warmup Iteration   9: 1060185.003 ops/s
# Warmup Iteration  10: 1060396.628 ops/s
# Warmup Iteration  11: 1056604.359 ops/s
# Warmup Iteration  12: 1052835.903 ops/s
# Warmup Iteration  13: 1056385.085 ops/s
# Warmup Iteration  14: 1054661.169 ops/s
# Warmup Iteration  15: 1054783.118 ops/s
# Warmup Iteration  16: 1058544.574 ops/s
# Warmup Iteration  17: 1055360.977 ops/s
# Warmup Iteration  18: 1059745.435 ops/s
# Warmup Iteration  19: 1050417.881 ops/s
# Warmup Iteration  20: 1048399.308 ops/s
# Warmup Iteration  21: 1058469.572 ops/s
# Warmup Iteration  22: 1053741.536 ops/s
# Warmup Iteration  23: 1055275.710 ops/s
# Warmup Iteration  24: 1060131.292 ops/s
# Warmup Iteration  25: 1058433.648 ops/s
# Warmup Iteration  26: 1057642.617 ops/s
# Warmup Iteration  27: 1053493.540 ops/s
# Warmup Iteration  28: 1056149.216 ops/s
# Warmup Iteration  29: 1048965.729 ops/s
# Warmup Iteration  30: 1052890.837 ops/s
Iteration   1: 1059577.786 ops/s
Iteration   2: 1057389.205 ops/s
Iteration   3: 1058577.369 ops/s
Iteration   4: 1063566.175 ops/s
Iteration   5: 1059961.878 ops/s
Iteration   6: 1052893.588 ops/s
Iteration   7: 1043907.191 ops/s
Iteration   8: 1053297.185 ops/s
Iteration   9: 1052698.080 ops/s
Iteration  10: 1050915.385 ops/s
Iteration  11: 1047810.851 ops/s
Iteration  12: 1062139.998 ops/s
Iteration  13: 1056747.569 ops/s
Iteration  14: 1058300.144 ops/s
Iteration  15: 1058989.585 ops/s
Iteration  16: 1062508.668 ops/s
Iteration  17: 1060500.673 ops/s
Iteration  18: 1058269.763 ops/s
Iteration  19: 1065298.301 ops/s
Iteration  20: 1058372.452 ops/s
Iteration  21: 1063429.768 ops/s
Iteration  22: 1059164.564 ops/s
Iteration  23: 1056458.099 ops/s
Iteration  24: 1063143.300 ops/s
Iteration  25: 1067896.535 ops/s
Iteration  26: 1065430.168 ops/s
Iteration  27: 1049281.741 ops/s
Iteration  28: 1055465.248 ops/s
Iteration  29: 1056654.287 ops/s
Iteration  30: 1061498.847 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectDouble":
  1058004.813 ±(99.9%) 3672.183 ops/s [Average]
  (min, avg, max) = (1043907.191, 1058004.813, 1067896.535), stdev = 5496.351
  CI (99.9%): [1054332.630, 1061676.997] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1058004.813 ± 3672.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631088.100 ops/s
# Warmup Iteration   2: 1355706.623 ops/s
# Warmup Iteration   3: 1442530.017 ops/s
# Warmup Iteration   4: 1450956.964 ops/s
# Warmup Iteration   5: 1208862.781 ops/s
# Warmup Iteration   6: 1455922.424 ops/s
# Warmup Iteration   7: 1455519.888 ops/s
# Warmup Iteration   8: 1455033.071 ops/s
# Warmup Iteration   9: 1464491.275 ops/s
# Warmup Iteration  10: 1454649.553 ops/s
# Warmup Iteration  11: 1461821.100 ops/s
# Warmup Iteration  12: 1459734.146 ops/s
# Warmup Iteration  13: 1457301.988 ops/s
# Warmup Iteration  14: 1459756.137 ops/s
# Warmup Iteration  15: 1460485.158 ops/s
# Warmup Iteration  16: 1460856.334 ops/s
# Warmup Iteration  17: 1462355.566 ops/s
# Warmup Iteration  18: 1458628.279 ops/s
# Warmup Iteration  19: 1458978.615 ops/s
# Warmup Iteration  20: 1460111.749 ops/s
# Warmup Iteration  21: 1460534.362 ops/s
# Warmup Iteration  22: 1458841.602 ops/s
# Warmup Iteration  23: 1462808.387 ops/s
# Warmup Iteration  24: 1454014.232 ops/s
# Warmup Iteration  25: 1453549.619 ops/s
# Warmup Iteration  26: 1462598.093 ops/s
# Warmup Iteration  27: 1458472.008 ops/s
# Warmup Iteration  28: 1464630.528 ops/s
# Warmup Iteration  29: 1458455.382 ops/s
# Warmup Iteration  30: 1460333.189 ops/s
Iteration   1: 1456768.668 ops/s
Iteration   2: 1434810.351 ops/s
Iteration   3: 1460051.112 ops/s
Iteration   4: 1460250.827 ops/s
Iteration   5: 1461685.108 ops/s
Iteration   6: 1472177.836 ops/s
Iteration   7: 1461819.879 ops/s
Iteration   8: 1444068.748 ops/s
Iteration   9: 1460623.569 ops/s
Iteration  10: 1462627.047 ops/s
Iteration  11: 1463345.923 ops/s
Iteration  12: 1460163.455 ops/s
Iteration  13: 1458767.393 ops/s
Iteration  14: 1457474.280 ops/s
Iteration  15: 1459282.926 ops/s
Iteration  16: 1463952.820 ops/s
Iteration  17: 1457195.553 ops/s
Iteration  18: 1453666.191 ops/s
Iteration  19: 1453395.210 ops/s
Iteration  20: 1448467.599 ops/s
Iteration  21: 1459356.184 ops/s
Iteration  22: 1453404.157 ops/s
Iteration  23: 1451597.203 ops/s
Iteration  24: 1454815.774 ops/s
Iteration  25: 1455774.135 ops/s
Iteration  26: 1452873.264 ops/s
Iteration  27: 1460556.476 ops/s
Iteration  28: 1456616.390 ops/s
Iteration  29: 1457090.677 ops/s
Iteration  30: 1461707.318 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectFloat":
  1457146.202 ±(99.9%) 4489.210 ops/s [Average]
  (min, avg, max) = (1434810.351, 1457146.202, 1472177.836), stdev = 6719.238
  CI (99.9%): [1452656.993, 1461635.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1457146.202 ± 4489.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 728268.302 ops/s
# Warmup Iteration   2: 1828986.850 ops/s
# Warmup Iteration   3: 1871676.689 ops/s
# Warmup Iteration   4: 1550071.395 ops/s
# Warmup Iteration   5: 1878438.912 ops/s
# Warmup Iteration   6: 1880583.402 ops/s
# Warmup Iteration   7: 1880195.206 ops/s
# Warmup Iteration   8: 1869596.346 ops/s
# Warmup Iteration   9: 1880620.664 ops/s
# Warmup Iteration  10: 1872893.933 ops/s
# Warmup Iteration  11: 1877413.597 ops/s
# Warmup Iteration  12: 1877649.714 ops/s
# Warmup Iteration  13: 1868809.908 ops/s
# Warmup Iteration  14: 1871751.921 ops/s
# Warmup Iteration  15: 1873882.662 ops/s
# Warmup Iteration  16: 1873650.071 ops/s
# Warmup Iteration  17: 1873116.692 ops/s
# Warmup Iteration  18: 1876741.394 ops/s
# Warmup Iteration  19: 1875581.164 ops/s
# Warmup Iteration  20: 1880426.457 ops/s
# Warmup Iteration  21: 1876865.652 ops/s
# Warmup Iteration  22: 1876382.079 ops/s
# Warmup Iteration  23: 1879229.344 ops/s
# Warmup Iteration  24: 1873743.565 ops/s
# Warmup Iteration  25: 1885100.930 ops/s
# Warmup Iteration  26: 1876101.864 ops/s
# Warmup Iteration  27: 1870498.286 ops/s
# Warmup Iteration  28: 1871846.712 ops/s
# Warmup Iteration  29: 1874006.383 ops/s
# Warmup Iteration  30: 1874622.386 ops/s
Iteration   1: 1870231.813 ops/s
Iteration   2: 1876250.815 ops/s
Iteration   3: 1869935.884 ops/s
Iteration   4: 1871378.576 ops/s
Iteration   5: 1856188.464 ops/s
Iteration   6: 1870662.322 ops/s
Iteration   7: 1855774.949 ops/s
Iteration   8: 1874993.424 ops/s
Iteration   9: 1870335.062 ops/s
Iteration  10: 1866322.900 ops/s
Iteration  11: 1877830.887 ops/s
Iteration  12: 1880360.464 ops/s
Iteration  13: 1874285.458 ops/s
Iteration  14: 1877489.971 ops/s
Iteration  15: 1885010.105 ops/s
Iteration  16: 1884973.468 ops/s
Iteration  17: 1875502.190 ops/s
Iteration  18: 1883788.994 ops/s
Iteration  19: 1874815.626 ops/s
Iteration  20: 1872966.091 ops/s
Iteration  21: 1878790.273 ops/s
Iteration  22: 1877582.727 ops/s
Iteration  23: 1866637.352 ops/s
Iteration  24: 1873841.849 ops/s
Iteration  25: 1876938.750 ops/s
Iteration  26: 1874674.551 ops/s
Iteration  27: 1880830.368 ops/s
Iteration  28: 1880445.242 ops/s
Iteration  29: 1871401.906 ops/s
Iteration  30: 1882873.639 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectInt":
  1874437.137 ±(99.9%) 4728.282 ops/s [Average]
  (min, avg, max) = (1855774.949, 1874437.137, 1885010.105), stdev = 7077.071
  CI (99.9%): [1869708.855, 1879165.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectInt  thrpt   30  1874437.137 ± 4728.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639295.425 ops/s
# Warmup Iteration   2: 1654390.628 ops/s
# Warmup Iteration   3: 1652057.853 ops/s
# Warmup Iteration   4: 1388795.020 ops/s
# Warmup Iteration   5: 1672238.720 ops/s
# Warmup Iteration   6: 1670461.656 ops/s
# Warmup Iteration   7: 1664420.155 ops/s
# Warmup Iteration   8: 1667203.849 ops/s
# Warmup Iteration   9: 1666578.751 ops/s
# Warmup Iteration  10: 1663840.246 ops/s
# Warmup Iteration  11: 1665112.457 ops/s
# Warmup Iteration  12: 1659601.671 ops/s
# Warmup Iteration  13: 1659692.826 ops/s
# Warmup Iteration  14: 1665466.300 ops/s
# Warmup Iteration  15: 1666255.600 ops/s
# Warmup Iteration  16: 1671130.222 ops/s
# Warmup Iteration  17: 1664120.543 ops/s
# Warmup Iteration  18: 1663940.630 ops/s
# Warmup Iteration  19: 1660362.730 ops/s
# Warmup Iteration  20: 1665077.194 ops/s
# Warmup Iteration  21: 1667561.057 ops/s
# Warmup Iteration  22: 1673531.556 ops/s
# Warmup Iteration  23: 1665125.416 ops/s
# Warmup Iteration  24: 1668695.356 ops/s
# Warmup Iteration  25: 1667572.167 ops/s
# Warmup Iteration  26: 1669728.992 ops/s
# Warmup Iteration  27: 1670733.562 ops/s
# Warmup Iteration  28: 1669091.779 ops/s
# Warmup Iteration  29: 1664857.741 ops/s
# Warmup Iteration  30: 1673786.626 ops/s
Iteration   1: 1657131.588 ops/s
Iteration   2: 1663837.031 ops/s
Iteration   3: 1655504.592 ops/s
Iteration   4: 1665985.638 ops/s
Iteration   5: 1664439.546 ops/s
Iteration   6: 1655893.634 ops/s
Iteration   7: 1670179.931 ops/s
Iteration   8: 1668963.919 ops/s
Iteration   9: 1655343.098 ops/s
Iteration  10: 1671846.225 ops/s
Iteration  11: 1680761.791 ops/s
Iteration  12: 1677141.325 ops/s
Iteration  13: 1677342.034 ops/s
Iteration  14: 1678982.395 ops/s
Iteration  15: 1674405.641 ops/s
Iteration  16: 1668558.170 ops/s
Iteration  17: 1675309.552 ops/s
Iteration  18: 1666063.062 ops/s
Iteration  19: 1669967.017 ops/s
Iteration  20: 1664114.227 ops/s
Iteration  21: 1668657.347 ops/s
Iteration  22: 1665956.248 ops/s
Iteration  23: 1674966.897 ops/s
Iteration  24: 1666060.910 ops/s
Iteration  25: 1669562.919 ops/s
Iteration  26: 1663511.688 ops/s
Iteration  27: 1679074.788 ops/s
Iteration  28: 1667042.731 ops/s
Iteration  29: 1667100.107 ops/s
Iteration  30: 1664055.720 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectLong":
  1668258.659 ±(99.9%) 4683.018 ops/s [Average]
  (min, avg, max) = (1655343.098, 1668258.659, 1680761.791), stdev = 7009.322
  CI (99.9%): [1663575.641, 1672941.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1668258.659 ± 4683.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 779618.167 ops/s
# Warmup Iteration   2: 1841304.665 ops/s
# Warmup Iteration   3: 1908532.938 ops/s
# Warmup Iteration   4: 1591121.610 ops/s
# Warmup Iteration   5: 1915051.487 ops/s
# Warmup Iteration   6: 1914070.671 ops/s
# Warmup Iteration   7: 1906631.796 ops/s
# Warmup Iteration   8: 1910172.120 ops/s
# Warmup Iteration   9: 1910871.112 ops/s
# Warmup Iteration  10: 1910249.981 ops/s
# Warmup Iteration  11: 1909637.822 ops/s
# Warmup Iteration  12: 1910144.509 ops/s
# Warmup Iteration  13: 1916285.346 ops/s
# Warmup Iteration  14: 1909512.363 ops/s
# Warmup Iteration  15: 1915955.442 ops/s
# Warmup Iteration  16: 1914589.079 ops/s
# Warmup Iteration  17: 1908169.269 ops/s
# Warmup Iteration  18: 1917626.551 ops/s
# Warmup Iteration  19: 1919885.737 ops/s
# Warmup Iteration  20: 1909936.364 ops/s
# Warmup Iteration  21: 1912912.301 ops/s
# Warmup Iteration  22: 1900255.277 ops/s
# Warmup Iteration  23: 1918618.703 ops/s
# Warmup Iteration  24: 1909568.740 ops/s
# Warmup Iteration  25: 1913383.403 ops/s
# Warmup Iteration  26: 1916682.783 ops/s
# Warmup Iteration  27: 1913864.937 ops/s
# Warmup Iteration  28: 1916148.553 ops/s
# Warmup Iteration  29: 1913266.113 ops/s
# Warmup Iteration  30: 1919669.433 ops/s
Iteration   1: 1909812.952 ops/s
Iteration   2: 1915395.475 ops/s
Iteration   3: 1905452.589 ops/s
Iteration   4: 1905493.403 ops/s
Iteration   5: 1917699.406 ops/s
Iteration   6: 1913109.691 ops/s
Iteration   7: 1915344.609 ops/s
Iteration   8: 1918666.450 ops/s
Iteration   9: 1914137.238 ops/s
Iteration  10: 1910832.998 ops/s
Iteration  11: 1905688.047 ops/s
Iteration  12: 1928296.307 ops/s
Iteration  13: 1914911.805 ops/s
Iteration  14: 1922359.987 ops/s
Iteration  15: 1924190.957 ops/s
Iteration  16: 1916434.986 ops/s
Iteration  17: 1921189.676 ops/s
Iteration  18: 1911784.734 ops/s
Iteration  19: 1906298.490 ops/s
Iteration  20: 1917286.586 ops/s
Iteration  21: 1883769.925 ops/s
Iteration  22: 1902372.711 ops/s
Iteration  23: 1914323.953 ops/s
Iteration  24: 1918626.604 ops/s
Iteration  25: 1908083.332 ops/s
Iteration  26: 1917798.640 ops/s
Iteration  27: 1911045.354 ops/s
Iteration  28: 1911236.930 ops/s
Iteration  29: 1919559.434 ops/s
Iteration  30: 1916032.853 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectShort":
  1913241.204 ±(99.9%) 5475.535 ops/s [Average]
  (min, avg, max) = (1883769.925, 1913241.204, 1928296.307), stdev = 8195.524
  CI (99.9%): [1907765.669, 1918716.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectShort  thrpt   30  1913241.204 ± 5475.535  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 208258.250 ops/s
# Warmup Iteration   2: 360295.665 ops/s
# Warmup Iteration   3: 434986.897 ops/s
# Warmup Iteration   4: 436568.082 ops/s
# Warmup Iteration   5: 438808.551 ops/s
# Warmup Iteration   6: 373545.448 ops/s
# Warmup Iteration   7: 426459.195 ops/s
# Warmup Iteration   8: 438606.670 ops/s
# Warmup Iteration   9: 438514.230 ops/s
# Warmup Iteration  10: 433264.157 ops/s
# Warmup Iteration  11: 438339.607 ops/s
# Warmup Iteration  12: 439302.823 ops/s
# Warmup Iteration  13: 438780.277 ops/s
# Warmup Iteration  14: 437172.831 ops/s
# Warmup Iteration  15: 436489.970 ops/s
# Warmup Iteration  16: 435569.209 ops/s
# Warmup Iteration  17: 437285.273 ops/s
# Warmup Iteration  18: 438340.719 ops/s
# Warmup Iteration  19: 437766.595 ops/s
# Warmup Iteration  20: 437797.044 ops/s
# Warmup Iteration  21: 438991.574 ops/s
# Warmup Iteration  22: 437944.219 ops/s
# Warmup Iteration  23: 438516.243 ops/s
# Warmup Iteration  24: 438484.329 ops/s
# Warmup Iteration  25: 437284.567 ops/s
# Warmup Iteration  26: 438405.318 ops/s
# Warmup Iteration  27: 439609.530 ops/s
# Warmup Iteration  28: 438148.576 ops/s
# Warmup Iteration  29: 435620.969 ops/s
# Warmup Iteration  30: 438510.540 ops/s
Iteration   1: 438319.202 ops/s
Iteration   2: 436015.059 ops/s
Iteration   3: 436565.430 ops/s
Iteration   4: 435277.731 ops/s
Iteration   5: 441004.421 ops/s
Iteration   6: 438821.484 ops/s
Iteration   7: 436646.950 ops/s
Iteration   8: 438672.539 ops/s
Iteration   9: 438343.840 ops/s
Iteration  10: 439818.643 ops/s
Iteration  11: 438696.731 ops/s
Iteration  12: 437615.517 ops/s
Iteration  13: 436720.987 ops/s
Iteration  14: 437889.245 ops/s
Iteration  15: 439381.250 ops/s
Iteration  16: 438846.852 ops/s
Iteration  17: 438402.132 ops/s
Iteration  18: 435363.600 ops/s
Iteration  19: 436750.676 ops/s
Iteration  20: 437883.371 ops/s
Iteration  21: 436103.010 ops/s
Iteration  22: 437909.356 ops/s
Iteration  23: 437865.359 ops/s
Iteration  24: 437961.671 ops/s
Iteration  25: 438397.672 ops/s
Iteration  26: 439531.086 ops/s
Iteration  27: 437176.866 ops/s
Iteration  28: 437022.463 ops/s
Iteration  29: 441146.829 ops/s
Iteration  30: 437664.505 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_flatCollectWith":
  437927.149 ±(99.9%) 962.060 ops/s [Average]
  (min, avg, max) = (435277.731, 437927.149, 441146.829), stdev = 1439.967
  CI (99.9%): [436965.089, 438889.210] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_flatCollectWith  thrpt   30  437927.149 ± 962.060  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1091249.589 ops/s
# Warmup Iteration   2: 2646026.075 ops/s
# Warmup Iteration   3: 2652755.249 ops/s
# Warmup Iteration   4: 2210847.795 ops/s
# Warmup Iteration   5: 2671125.604 ops/s
# Warmup Iteration   6: 2662920.364 ops/s
# Warmup Iteration   7: 2660705.037 ops/s
# Warmup Iteration   8: 2656860.642 ops/s
# Warmup Iteration   9: 2677430.084 ops/s
# Warmup Iteration  10: 2661724.526 ops/s
# Warmup Iteration  11: 2674558.216 ops/s
# Warmup Iteration  12: 2669003.127 ops/s
# Warmup Iteration  13: 2658132.881 ops/s
# Warmup Iteration  14: 2662314.310 ops/s
# Warmup Iteration  15: 2650677.749 ops/s
# Warmup Iteration  16: 2640930.474 ops/s
# Warmup Iteration  17: 2645627.945 ops/s
# Warmup Iteration  18: 2677427.667 ops/s
# Warmup Iteration  19: 2657758.253 ops/s
# Warmup Iteration  20: 2664261.347 ops/s
# Warmup Iteration  21: 2661963.947 ops/s
# Warmup Iteration  22: 2656584.670 ops/s
# Warmup Iteration  23: 2666426.983 ops/s
# Warmup Iteration  24: 2673538.209 ops/s
# Warmup Iteration  25: 2662302.594 ops/s
# Warmup Iteration  26: 2658581.320 ops/s
# Warmup Iteration  27: 2646935.238 ops/s
# Warmup Iteration  28: 2666331.343 ops/s
# Warmup Iteration  29: 2680441.128 ops/s
# Warmup Iteration  30: 2655977.978 ops/s
Iteration   1: 2667008.965 ops/s
Iteration   2: 2660984.332 ops/s
Iteration   3: 2669016.940 ops/s
Iteration   4: 2665544.803 ops/s
Iteration   5: 2675092.601 ops/s
Iteration   6: 2644978.590 ops/s
Iteration   7: 2665247.803 ops/s
Iteration   8: 2671669.275 ops/s
Iteration   9: 2669737.969 ops/s
Iteration  10: 2681183.319 ops/s
Iteration  11: 2674412.600 ops/s
Iteration  12: 2667023.741 ops/s
Iteration  13: 2680933.502 ops/s
Iteration  14: 2658541.828 ops/s
Iteration  15: 2665431.136 ops/s
Iteration  16: 2679352.904 ops/s
Iteration  17: 2670882.912 ops/s
Iteration  18: 2679699.758 ops/s
Iteration  19: 2664672.249 ops/s
Iteration  20: 2663860.046 ops/s
Iteration  21: 2672711.748 ops/s
Iteration  22: 2647419.542 ops/s
Iteration  23: 2665573.279 ops/s
Iteration  24: 2651094.530 ops/s
Iteration  25: 2657343.907 ops/s
Iteration  26: 2670013.022 ops/s
Iteration  27: 2667949.393 ops/s
Iteration  28: 2671288.111 ops/s
Iteration  29: 2663987.991 ops/s
Iteration  30: 2673231.573 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEach":
  2667196.279 ±(99.9%) 5992.581 ops/s [Average]
  (min, avg, max) = (2644978.590, 2667196.279, 2681183.319), stdev = 8969.414
  CI (99.9%): [2661203.698, 2673188.860] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_forEach  thrpt   30  2667196.279 ± 5992.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3152264.263 ops/s
# Warmup Iteration   2: 7169025.205 ops/s
# Warmup Iteration   3: 5973902.608 ops/s
# Warmup Iteration   4: 7124095.570 ops/s
# Warmup Iteration   5: 7141159.752 ops/s
# Warmup Iteration   6: 7118534.717 ops/s
# Warmup Iteration   7: 7123094.768 ops/s
# Warmup Iteration   8: 7117475.374 ops/s
# Warmup Iteration   9: 7093511.527 ops/s
# Warmup Iteration  10: 7119210.775 ops/s
# Warmup Iteration  11: 7130769.831 ops/s
# Warmup Iteration  12: 7117650.540 ops/s
# Warmup Iteration  13: 7148476.308 ops/s
# Warmup Iteration  14: 7084640.274 ops/s
# Warmup Iteration  15: 7105522.689 ops/s
# Warmup Iteration  16: 7110261.809 ops/s
# Warmup Iteration  17: 7135167.506 ops/s
# Warmup Iteration  18: 7153110.570 ops/s
# Warmup Iteration  19: 7113274.233 ops/s
# Warmup Iteration  20: 7145096.284 ops/s
# Warmup Iteration  21: 7151334.267 ops/s
# Warmup Iteration  22: 7169391.208 ops/s
# Warmup Iteration  23: 7121067.820 ops/s
# Warmup Iteration  24: 7137057.220 ops/s
# Warmup Iteration  25: 7137598.852 ops/s
# Warmup Iteration  26: 7141915.324 ops/s
# Warmup Iteration  27: 7148301.081 ops/s
# Warmup Iteration  28: 7122187.358 ops/s
# Warmup Iteration  29: 7140544.925 ops/s
# Warmup Iteration  30: 7135359.903 ops/s
Iteration   1: 7122008.166 ops/s
Iteration   2: 7137419.650 ops/s
Iteration   3: 7151928.137 ops/s
Iteration   4: 7173164.420 ops/s
Iteration   5: 7164527.926 ops/s
Iteration   6: 7177155.226 ops/s
Iteration   7: 7123755.949 ops/s
Iteration   8: 7131578.366 ops/s
Iteration   9: 7132780.944 ops/s
Iteration  10: 7124050.983 ops/s
Iteration  11: 7135184.383 ops/s
Iteration  12: 7140075.590 ops/s
Iteration  13: 7166602.688 ops/s
Iteration  14: 7145800.687 ops/s
Iteration  15: 7140788.203 ops/s
Iteration  16: 7142820.220 ops/s
Iteration  17: 7157747.394 ops/s
Iteration  18: 7146730.633 ops/s
Iteration  19: 7151885.614 ops/s
Iteration  20: 7157737.107 ops/s
Iteration  21: 7157017.798 ops/s
Iteration  22: 7145621.109 ops/s
Iteration  23: 7119920.588 ops/s
Iteration  24: 7096437.265 ops/s
Iteration  25: 7138551.820 ops/s
Iteration  26: 7149964.051 ops/s
Iteration  27: 7177144.847 ops/s
Iteration  28: 7107565.454 ops/s
Iteration  29: 7108119.588 ops/s
Iteration  30: 7130165.383 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWith":
  7141808.340 ±(99.9%) 13565.405 ops/s [Average]
  (min, avg, max) = (7096437.265, 7141808.340, 7177155.226), stdev = 20304.061
  CI (99.9%): [7128242.935, 7155373.745] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_forEachWith  thrpt   30  7141808.340 ± 13565.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 557411.756 ops/s
# Warmup Iteration   2: 971441.903 ops/s
# Warmup Iteration   3: 1126469.551 ops/s
# Warmup Iteration   4: 1125595.402 ops/s
# Warmup Iteration   5: 1132030.585 ops/s
# Warmup Iteration   6: 925637.865 ops/s
# Warmup Iteration   7: 1130888.407 ops/s
# Warmup Iteration   8: 1130587.403 ops/s
# Warmup Iteration   9: 1130659.970 ops/s
# Warmup Iteration  10: 1132046.707 ops/s
# Warmup Iteration  11: 1128553.811 ops/s
# Warmup Iteration  12: 1129536.149 ops/s
# Warmup Iteration  13: 1129733.068 ops/s
# Warmup Iteration  14: 1131030.290 ops/s
# Warmup Iteration  15: 1123177.031 ops/s
# Warmup Iteration  16: 1135597.240 ops/s
# Warmup Iteration  17: 1129147.947 ops/s
# Warmup Iteration  18: 1134432.387 ops/s
# Warmup Iteration  19: 1130521.707 ops/s
# Warmup Iteration  20: 1132426.090 ops/s
# Warmup Iteration  21: 1132653.596 ops/s
# Warmup Iteration  22: 1131089.839 ops/s
# Warmup Iteration  23: 1134563.175 ops/s
# Warmup Iteration  24: 1133423.632 ops/s
# Warmup Iteration  25: 1133608.071 ops/s
# Warmup Iteration  26: 1132972.274 ops/s
# Warmup Iteration  27: 1129851.667 ops/s
# Warmup Iteration  28: 1131493.366 ops/s
# Warmup Iteration  29: 1119157.105 ops/s
# Warmup Iteration  30: 1127465.222 ops/s
Iteration   1: 1132775.225 ops/s
Iteration   2: 1129784.516 ops/s
Iteration   3: 1130667.325 ops/s
Iteration   4: 1122711.352 ops/s
Iteration   5: 1127879.793 ops/s
Iteration   6: 1132100.769 ops/s
Iteration   7: 1129947.587 ops/s
Iteration   8: 1130516.331 ops/s
Iteration   9: 1135094.602 ops/s
Iteration  10: 1130100.632 ops/s
Iteration  11: 1131530.978 ops/s
Iteration  12: 1128347.963 ops/s
Iteration  13: 1127719.447 ops/s
Iteration  14: 1131703.887 ops/s
Iteration  15: 1129809.414 ops/s
Iteration  16: 1122239.487 ops/s
Iteration  17: 1136728.616 ops/s
Iteration  18: 1129117.128 ops/s
Iteration  19: 1130875.543 ops/s
Iteration  20: 1128204.649 ops/s
Iteration  21: 1133137.856 ops/s
Iteration  22: 1129824.017 ops/s
Iteration  23: 1130419.240 ops/s
Iteration  24: 1129918.795 ops/s
Iteration  25: 1134402.261 ops/s
Iteration  26: 1132292.390 ops/s
Iteration  27: 1132748.726 ops/s
Iteration  28: 1128939.582 ops/s
Iteration  29: 1120537.863 ops/s
Iteration  30: 1126914.363 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_forEachWithIndex":
  1129899.678 ±(99.9%) 2360.732 ops/s [Average]
  (min, avg, max) = (1120537.863, 1129899.678, 1136728.616), stdev = 3533.433
  CI (99.9%): [1127538.946, 1132260.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  1129899.678 ± 2360.732  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1185693.878 ops/s
# Warmup Iteration   2: 2727739.088 ops/s
# Warmup Iteration   3: 2759922.247 ops/s
# Warmup Iteration   4: 2306052.245 ops/s
# Warmup Iteration   5: 2751634.022 ops/s
# Warmup Iteration   6: 2762066.548 ops/s
# Warmup Iteration   7: 2758022.731 ops/s
# Warmup Iteration   8: 2759371.993 ops/s
# Warmup Iteration   9: 2762060.367 ops/s
# Warmup Iteration  10: 2762413.565 ops/s
# Warmup Iteration  11: 2760535.516 ops/s
# Warmup Iteration  12: 2758944.842 ops/s
# Warmup Iteration  13: 2751419.768 ops/s
# Warmup Iteration  14: 2766527.897 ops/s
# Warmup Iteration  15: 2763158.777 ops/s
# Warmup Iteration  16: 2755789.182 ops/s
# Warmup Iteration  17: 2760589.771 ops/s
# Warmup Iteration  18: 2748980.848 ops/s
# Warmup Iteration  19: 2760308.298 ops/s
# Warmup Iteration  20: 2754557.266 ops/s
# Warmup Iteration  21: 2756271.986 ops/s
# Warmup Iteration  22: 2757122.924 ops/s
# Warmup Iteration  23: 2757753.628 ops/s
# Warmup Iteration  24: 2745865.965 ops/s
# Warmup Iteration  25: 2749833.007 ops/s
# Warmup Iteration  26: 2765526.979 ops/s
# Warmup Iteration  27: 2752705.745 ops/s
# Warmup Iteration  28: 2758950.149 ops/s
# Warmup Iteration  29: 2748744.422 ops/s
# Warmup Iteration  30: 2748366.858 ops/s
Iteration   1: 2762058.832 ops/s
Iteration   2: 2764875.730 ops/s
Iteration   3: 2762649.022 ops/s
Iteration   4: 2750501.590 ops/s
Iteration   5: 2754853.342 ops/s
Iteration   6: 2749737.181 ops/s
Iteration   7: 2761470.980 ops/s
Iteration   8: 2758251.525 ops/s
Iteration   9: 2772236.710 ops/s
Iteration  10: 2754916.565 ops/s
Iteration  11: 2752273.903 ops/s
Iteration  12: 2750717.561 ops/s
Iteration  13: 2755705.738 ops/s
Iteration  14: 2752758.174 ops/s
Iteration  15: 2750987.685 ops/s
Iteration  16: 2755567.407 ops/s
Iteration  17: 2765087.985 ops/s
Iteration  18: 2763021.503 ops/s
Iteration  19: 2737304.328 ops/s
Iteration  20: 2762803.813 ops/s
Iteration  21: 2758270.797 ops/s
Iteration  22: 2755937.078 ops/s
Iteration  23: 2766028.681 ops/s
Iteration  24: 2765707.019 ops/s
Iteration  25: 2765596.247 ops/s
Iteration  26: 2756062.560 ops/s
Iteration  27: 2748363.962 ops/s
Iteration  28: 2749827.482 ops/s
Iteration  29: 2746546.397 ops/s
Iteration  30: 2749267.451 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_fusedCollectMakeString":
  2756646.242 ±(99.9%) 5033.927 ops/s [Average]
  (min, avg, max) = (2737304.328, 2756646.242, 2772236.710), stdev = 7534.545
  CI (99.9%): [2751612.315, 2761680.168] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2756646.242 ± 5033.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5354281.329 ops/s
# Warmup Iteration   2: 11309310.927 ops/s
# Warmup Iteration   3: 11329095.489 ops/s
# Warmup Iteration   4: 9523819.969 ops/s
# Warmup Iteration   5: 11338817.499 ops/s
# Warmup Iteration   6: 11342871.147 ops/s
# Warmup Iteration   7: 11358756.208 ops/s
# Warmup Iteration   8: 11375314.352 ops/s
# Warmup Iteration   9: 11332462.866 ops/s
# Warmup Iteration  10: 11349653.249 ops/s
# Warmup Iteration  11: 11375643.473 ops/s
# Warmup Iteration  12: 11399751.500 ops/s
# Warmup Iteration  13: 11320526.012 ops/s
# Warmup Iteration  14: 11318469.750 ops/s
# Warmup Iteration  15: 11323054.585 ops/s
# Warmup Iteration  16: 11327071.680 ops/s
# Warmup Iteration  17: 11353814.820 ops/s
# Warmup Iteration  18: 11369586.809 ops/s
# Warmup Iteration  19: 11325053.174 ops/s
# Warmup Iteration  20: 11341628.303 ops/s
# Warmup Iteration  21: 11298818.710 ops/s
# Warmup Iteration  22: 11351716.675 ops/s
# Warmup Iteration  23: 11305615.946 ops/s
# Warmup Iteration  24: 11334869.581 ops/s
# Warmup Iteration  25: 11372384.545 ops/s
# Warmup Iteration  26: 11365271.864 ops/s
# Warmup Iteration  27: 11374028.469 ops/s
# Warmup Iteration  28: 11270945.861 ops/s
# Warmup Iteration  29: 11353149.219 ops/s
# Warmup Iteration  30: 11384359.972 ops/s
Iteration   1: 11314806.893 ops/s
Iteration   2: 11339392.104 ops/s
Iteration   3: 11324900.915 ops/s
Iteration   4: 11262727.499 ops/s
Iteration   5: 11406125.219 ops/s
Iteration   6: 11369072.159 ops/s
Iteration   7: 11380576.463 ops/s
Iteration   8: 11351513.590 ops/s
Iteration   9: 11382429.465 ops/s
Iteration  10: 11363546.095 ops/s
Iteration  11: 11348696.471 ops/s
Iteration  12: 11319725.754 ops/s
Iteration  13: 11396504.577 ops/s
Iteration  14: 11396732.709 ops/s
Iteration  15: 11392231.863 ops/s
Iteration  16: 11369872.676 ops/s
Iteration  17: 11383757.031 ops/s
Iteration  18: 11360150.723 ops/s
Iteration  19: 11346195.930 ops/s
Iteration  20: 11391411.962 ops/s
Iteration  21: 11349362.378 ops/s
Iteration  22: 11391704.135 ops/s
Iteration  23: 11366284.988 ops/s
Iteration  24: 11392358.327 ops/s
Iteration  25: 11387683.788 ops/s
Iteration  26: 11387897.094 ops/s
Iteration  27: 11335944.547 ops/s
Iteration  28: 11228519.621 ops/s
Iteration  29: 11280350.653 ops/s
Iteration  30: 11409654.853 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getAny":
  11357671.016 ±(99.9%) 28817.860 ops/s [Average]
  (min, avg, max) = (11228519.621, 11357671.016, 11409654.853), stdev = 43133.220
  CI (99.9%): [11328853.156, 11386488.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_getAny  thrpt   30  11357671.016 ± 28817.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5299752.374 ops/s
# Warmup Iteration   2: 11222777.460 ops/s
# Warmup Iteration   3: 11120290.782 ops/s
# Warmup Iteration   4: 9394124.072 ops/s
# Warmup Iteration   5: 11112719.782 ops/s
# Warmup Iteration   6: 11179881.193 ops/s
# Warmup Iteration   7: 11186585.541 ops/s
# Warmup Iteration   8: 11137450.497 ops/s
# Warmup Iteration   9: 11182253.509 ops/s
# Warmup Iteration  10: 11178280.268 ops/s
# Warmup Iteration  11: 11152198.273 ops/s
# Warmup Iteration  12: 11152515.750 ops/s
# Warmup Iteration  13: 11172417.357 ops/s
# Warmup Iteration  14: 11169352.311 ops/s
# Warmup Iteration  15: 11210456.348 ops/s
# Warmup Iteration  16: 11122907.741 ops/s
# Warmup Iteration  17: 11083962.541 ops/s
# Warmup Iteration  18: 11151387.719 ops/s
# Warmup Iteration  19: 11174344.052 ops/s
# Warmup Iteration  20: 11153221.518 ops/s
# Warmup Iteration  21: 11073899.525 ops/s
# Warmup Iteration  22: 11167547.907 ops/s
# Warmup Iteration  23: 11166062.179 ops/s
# Warmup Iteration  24: 11181327.255 ops/s
# Warmup Iteration  25: 11120857.257 ops/s
# Warmup Iteration  26: 11111367.778 ops/s
# Warmup Iteration  27: 11139580.425 ops/s
# Warmup Iteration  28: 11100692.931 ops/s
# Warmup Iteration  29: 11093713.972 ops/s
# Warmup Iteration  30: 11085671.589 ops/s
Iteration   1: 11185448.785 ops/s
Iteration   2: 11181929.170 ops/s
Iteration   3: 11215232.036 ops/s
Iteration   4: 11213914.211 ops/s
Iteration   5: 11176618.646 ops/s
Iteration   6: 11180910.772 ops/s
Iteration   7: 11169745.014 ops/s
Iteration   8: 11193319.523 ops/s
Iteration   9: 11140068.358 ops/s
Iteration  10: 11157065.892 ops/s
Iteration  11: 11185958.464 ops/s
Iteration  12: 11187239.030 ops/s
Iteration  13: 11137370.154 ops/s
Iteration  14: 11152656.192 ops/s
Iteration  15: 11101855.337 ops/s
Iteration  16: 11182020.512 ops/s
Iteration  17: 11164570.101 ops/s
Iteration  18: 11153215.303 ops/s
Iteration  19: 11157697.033 ops/s
Iteration  20: 11153637.209 ops/s
Iteration  21: 11152989.560 ops/s
Iteration  22: 11176516.016 ops/s
Iteration  23: 11136102.911 ops/s
Iteration  24: 11103779.876 ops/s
Iteration  25: 11139695.459 ops/s
Iteration  26: 11129583.629 ops/s
Iteration  27: 11142343.527 ops/s
Iteration  28: 11204382.679 ops/s
Iteration  29: 11155722.137 ops/s
Iteration  30: 11144492.263 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getFirst":
  11162535.993 ±(99.9%) 18860.045 ops/s [Average]
  (min, avg, max) = (11101855.337, 11162535.993, 11215232.036), stdev = 28228.829
  CI (99.9%): [11143675.948, 11181396.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_getFirst  thrpt   30  11162535.993 ± 18860.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5346181.929 ops/s
# Warmup Iteration   2: 11257408.318 ops/s
# Warmup Iteration   3: 11269287.295 ops/s
# Warmup Iteration   4: 9431707.684 ops/s
# Warmup Iteration   5: 11277598.001 ops/s
# Warmup Iteration   6: 11245653.683 ops/s
# Warmup Iteration   7: 11249252.796 ops/s
# Warmup Iteration   8: 11304549.274 ops/s
# Warmup Iteration   9: 11268190.271 ops/s
# Warmup Iteration  10: 11237206.432 ops/s
# Warmup Iteration  11: 11263547.902 ops/s
# Warmup Iteration  12: 11218537.853 ops/s
# Warmup Iteration  13: 11234786.567 ops/s
# Warmup Iteration  14: 11241099.051 ops/s
# Warmup Iteration  15: 11152552.261 ops/s
# Warmup Iteration  16: 11245873.499 ops/s
# Warmup Iteration  17: 11239526.319 ops/s
# Warmup Iteration  18: 11210641.507 ops/s
# Warmup Iteration  19: 11259065.631 ops/s
# Warmup Iteration  20: 11292227.242 ops/s
# Warmup Iteration  21: 11267602.406 ops/s
# Warmup Iteration  22: 11259065.586 ops/s
# Warmup Iteration  23: 11230680.450 ops/s
# Warmup Iteration  24: 11254318.882 ops/s
# Warmup Iteration  25: 11260961.875 ops/s
# Warmup Iteration  26: 11240462.245 ops/s
# Warmup Iteration  27: 11178451.818 ops/s
# Warmup Iteration  28: 11262988.958 ops/s
# Warmup Iteration  29: 11280297.468 ops/s
# Warmup Iteration  30: 11251023.874 ops/s
Iteration   1: 11301925.248 ops/s
Iteration   2: 11281331.138 ops/s
Iteration   3: 11244434.140 ops/s
Iteration   4: 11269414.446 ops/s
Iteration   5: 11200699.692 ops/s
Iteration   6: 11252430.462 ops/s
Iteration   7: 11272782.232 ops/s
Iteration   8: 11270906.663 ops/s
Iteration   9: 11247895.002 ops/s
Iteration  10: 11310863.025 ops/s
Iteration  11: 11284946.240 ops/s
Iteration  12: 11309777.752 ops/s
Iteration  13: 11290079.518 ops/s
Iteration  14: 11284659.305 ops/s
Iteration  15: 11283574.971 ops/s
Iteration  16: 11203641.832 ops/s
Iteration  17: 11282347.945 ops/s
Iteration  18: 11215344.690 ops/s
Iteration  19: 11263552.340 ops/s
Iteration  20: 11259003.932 ops/s
Iteration  21: 11246503.651 ops/s
Iteration  22: 11298652.598 ops/s
Iteration  23: 11175387.617 ops/s
Iteration  24: 11157744.680 ops/s
Iteration  25: 11159796.904 ops/s
Iteration  26: 11114458.574 ops/s
Iteration  27: 11266633.155 ops/s
Iteration  28: 11247166.743 ops/s
Iteration  29: 11245241.744 ops/s
Iteration  30: 11243901.474 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getLast":
  11249503.257 ±(99.9%) 32323.832 ops/s [Average]
  (min, avg, max) = (11114458.574, 11249503.257, 11310863.025), stdev = 48380.793
  CI (99.9%): [11217179.425, 11281827.089] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_getLast  thrpt   30  11249503.257 ± 32323.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10549017.950 ops/s
# Warmup Iteration   2: 19439122.591 ops/s
# Warmup Iteration   3: 19844002.706 ops/s
# Warmup Iteration   4: 21297435.094 ops/s
# Warmup Iteration   5: 21375043.024 ops/s
# Warmup Iteration   6: 21292155.313 ops/s
# Warmup Iteration   7: 21216510.221 ops/s
# Warmup Iteration   8: 21238671.756 ops/s
# Warmup Iteration   9: 21273669.879 ops/s
# Warmup Iteration  10: 21250646.459 ops/s
# Warmup Iteration  11: 21282402.236 ops/s
# Warmup Iteration  12: 21327222.508 ops/s
# Warmup Iteration  13: 21350610.068 ops/s
# Warmup Iteration  14: 21244489.827 ops/s
# Warmup Iteration  15: 21321654.426 ops/s
# Warmup Iteration  16: 21404830.244 ops/s
# Warmup Iteration  17: 21399391.883 ops/s
# Warmup Iteration  18: 21389230.157 ops/s
# Warmup Iteration  19: 21251501.478 ops/s
# Warmup Iteration  20: 21337703.262 ops/s
# Warmup Iteration  21: 21262255.469 ops/s
# Warmup Iteration  22: 21359262.966 ops/s
# Warmup Iteration  23: 21436878.782 ops/s
# Warmup Iteration  24: 21391124.993 ops/s
# Warmup Iteration  25: 21377894.570 ops/s
# Warmup Iteration  26: 21133998.980 ops/s
# Warmup Iteration  27: 21139331.279 ops/s
# Warmup Iteration  28: 21064534.502 ops/s
# Warmup Iteration  29: 21307580.534 ops/s
# Warmup Iteration  30: 21301910.653 ops/s
Iteration   1: 21320384.471 ops/s
Iteration   2: 21270449.825 ops/s
Iteration   3: 21384488.545 ops/s
Iteration   4: 21400392.137 ops/s
Iteration   5: 21274034.862 ops/s
Iteration   6: 21295403.397 ops/s
Iteration   7: 21404602.918 ops/s
Iteration   8: 21382179.039 ops/s
Iteration   9: 21354367.637 ops/s
Iteration  10: 21222595.325 ops/s
Iteration  11: 21166859.673 ops/s
Iteration  12: 21124851.125 ops/s
Iteration  13: 21296032.583 ops/s
Iteration  14: 21178655.659 ops/s
Iteration  15: 21382989.764 ops/s
Iteration  16: 21342066.678 ops/s
Iteration  17: 21097135.664 ops/s
Iteration  18: 21081934.160 ops/s
Iteration  19: 21215040.318 ops/s
Iteration  20: 21130452.828 ops/s
Iteration  21: 21066372.991 ops/s
Iteration  22: 21064384.347 ops/s
Iteration  23: 21203916.445 ops/s
Iteration  24: 21241118.822 ops/s
Iteration  25: 21172198.514 ops/s
Iteration  26: 21171807.873 ops/s
Iteration  27: 21378652.737 ops/s
Iteration  28: 21228330.463 ops/s
Iteration  29: 21312727.582 ops/s
Iteration  30: 21377921.147 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly":
  21251411.584 ±(99.9%) 72830.572 ops/s [Average]
  (min, avg, max) = (21064384.347, 21251411.584, 21404602.918), stdev = 109009.379
  CI (99.9%): [21178581.013, 21324242.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_getOnly  thrpt   30  21251411.584 ± 72830.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760854.205 ops/s
# Warmup Iteration   2: 785431.668 ops/s
# Warmup Iteration   3: 966446.438 ops/s
# Warmup Iteration   4: 1013968.692 ops/s
# Warmup Iteration   5: 1020093.941 ops/s
# Warmup Iteration   6: 1022039.998 ops/s
# Warmup Iteration   7: 1023189.341 ops/s
# Warmup Iteration   8: 1022781.187 ops/s
# Warmup Iteration   9: 1018896.055 ops/s
# Warmup Iteration  10: 1025090.613 ops/s
# Warmup Iteration  11: 1026338.489 ops/s
# Warmup Iteration  12: 1015890.746 ops/s
# Warmup Iteration  13: 869303.438 ops/s
# Warmup Iteration  14: 1003441.281 ops/s
# Warmup Iteration  15: 1019780.799 ops/s
# Warmup Iteration  16: 1020352.007 ops/s
# Warmup Iteration  17: 1087292.275 ops/s
# Warmup Iteration  18: 1082028.851 ops/s
# Warmup Iteration  19: 1083845.492 ops/s
# Warmup Iteration  20: 1079716.872 ops/s
# Warmup Iteration  21: 1084222.544 ops/s
# Warmup Iteration  22: 1085179.113 ops/s
# Warmup Iteration  23: 1083275.014 ops/s
# Warmup Iteration  24: 1086601.459 ops/s
# Warmup Iteration  25: 1085822.774 ops/s
# Warmup Iteration  26: 1079058.628 ops/s
# Warmup Iteration  27: 1082915.815 ops/s
# Warmup Iteration  28: 1085048.369 ops/s
# Warmup Iteration  29: 1079984.132 ops/s
# Warmup Iteration  30: 1081922.136 ops/s
Iteration   1: 1086490.475 ops/s
Iteration   2: 1074570.527 ops/s
Iteration   3: 1079114.799 ops/s
Iteration   4: 1078711.089 ops/s
Iteration   5: 1085262.018 ops/s
Iteration   6: 1084037.084 ops/s
Iteration   7: 1081083.969 ops/s
Iteration   8: 1081645.883 ops/s
Iteration   9: 1080592.782 ops/s
Iteration  10: 1081919.227 ops/s
Iteration  11: 1081989.426 ops/s
Iteration  12: 1080905.170 ops/s
Iteration  13: 1090571.429 ops/s
Iteration  14: 1082923.630 ops/s
Iteration  15: 1087554.637 ops/s
Iteration  16: 1086464.643 ops/s
Iteration  17: 1088046.210 ops/s
Iteration  18: 1081507.583 ops/s
Iteration  19: 1087937.516 ops/s
Iteration  20: 1088180.140 ops/s
Iteration  21: 1082644.797 ops/s
Iteration  22: 1075808.001 ops/s
Iteration  23: 1075666.088 ops/s
Iteration  24: 1080317.250 ops/s
Iteration  25: 1078559.854 ops/s
Iteration  26: 1084720.251 ops/s
Iteration  27: 1088818.783 ops/s
Iteration  28: 1083364.152 ops/s
Iteration  29: 1083955.043 ops/s
Iteration  30: 1079461.770 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_empty_throws":
  1082760.808 ±(99.9%) 2749.101 ops/s [Average]
  (min, avg, max) = (1074570.527, 1082760.808, 1090571.429), stdev = 4114.725
  CI (99.9%): [1080011.707, 1085509.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1082760.808 ± 2749.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747900.429 ops/s
# Warmup Iteration   2: 774754.259 ops/s
# Warmup Iteration   3: 994153.188 ops/s
# Warmup Iteration   4: 1028213.394 ops/s
# Warmup Iteration   5: 1027968.092 ops/s
# Warmup Iteration   6: 1026928.761 ops/s
# Warmup Iteration   7: 1022710.549 ops/s
# Warmup Iteration   8: 1029334.902 ops/s
# Warmup Iteration   9: 1030771.205 ops/s
# Warmup Iteration  10: 1024042.770 ops/s
# Warmup Iteration  11: 1028163.797 ops/s
# Warmup Iteration  12: 915618.926 ops/s
# Warmup Iteration  13: 959773.667 ops/s
# Warmup Iteration  14: 1029136.928 ops/s
# Warmup Iteration  15: 1028347.758 ops/s
# Warmup Iteration  16: 1029851.581 ops/s
# Warmup Iteration  17: 1099997.163 ops/s
# Warmup Iteration  18: 1101769.868 ops/s
# Warmup Iteration  19: 1107425.925 ops/s
# Warmup Iteration  20: 1102749.973 ops/s
# Warmup Iteration  21: 1099379.032 ops/s
# Warmup Iteration  22: 1095798.093 ops/s
# Warmup Iteration  23: 1104728.296 ops/s
# Warmup Iteration  24: 1102249.197 ops/s
# Warmup Iteration  25: 1102654.706 ops/s
# Warmup Iteration  26: 1097613.569 ops/s
# Warmup Iteration  27: 1098466.716 ops/s
# Warmup Iteration  28: 1101186.323 ops/s
# Warmup Iteration  29: 1098634.789 ops/s
# Warmup Iteration  30: 1100106.824 ops/s
Iteration   1: 1096958.539 ops/s
Iteration   2: 1097870.895 ops/s
Iteration   3: 1097061.995 ops/s
Iteration   4: 1099654.918 ops/s
Iteration   5: 1093852.531 ops/s
Iteration   6: 1097972.486 ops/s
Iteration   7: 1095431.660 ops/s
Iteration   8: 1104156.648 ops/s
Iteration   9: 1108251.119 ops/s
Iteration  10: 1104488.590 ops/s
Iteration  11: 1101411.064 ops/s
Iteration  12: 1100365.970 ops/s
Iteration  13: 1102892.968 ops/s
Iteration  14: 1098754.119 ops/s
Iteration  15: 1101954.617 ops/s
Iteration  16: 1103490.648 ops/s
Iteration  17: 1100904.810 ops/s
Iteration  18: 1104508.305 ops/s
Iteration  19: 1099864.649 ops/s
Iteration  20: 1095836.389 ops/s
Iteration  21: 1097467.929 ops/s
Iteration  22: 1095819.284 ops/s
Iteration  23: 1097746.015 ops/s
Iteration  24: 1102998.194 ops/s
Iteration  25: 1094933.404 ops/s
Iteration  26: 1095726.236 ops/s
Iteration  27: 1080452.503 ops/s
Iteration  28: 1093398.337 ops/s
Iteration  29: 1103027.059 ops/s
Iteration  30: 1104755.995 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1099066.929 ±(99.9%) 3444.033 ops/s [Average]
  (min, avg, max) = (1080452.503, 1099066.929, 1108251.119), stdev = 5154.867
  CI (99.9%): [1095622.896, 1102510.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1099066.929 ± 3444.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843969.131 ops/s
# Warmup Iteration   2: 1754287.154 ops/s
# Warmup Iteration   3: 1904269.584 ops/s
# Warmup Iteration   4: 1907592.150 ops/s
# Warmup Iteration   5: 1554239.740 ops/s
# Warmup Iteration   6: 1905044.424 ops/s
# Warmup Iteration   7: 1907716.672 ops/s
# Warmup Iteration   8: 1902114.275 ops/s
# Warmup Iteration   9: 1896574.061 ops/s
# Warmup Iteration  10: 1910127.485 ops/s
# Warmup Iteration  11: 1902614.665 ops/s
# Warmup Iteration  12: 1897716.643 ops/s
# Warmup Iteration  13: 1909239.130 ops/s
# Warmup Iteration  14: 1905047.968 ops/s
# Warmup Iteration  15: 1908853.398 ops/s
# Warmup Iteration  16: 1908134.905 ops/s
# Warmup Iteration  17: 1934713.474 ops/s
# Warmup Iteration  18: 1930794.762 ops/s
# Warmup Iteration  19: 1925304.884 ops/s
# Warmup Iteration  20: 1942988.028 ops/s
# Warmup Iteration  21: 1929545.676 ops/s
# Warmup Iteration  22: 1928628.886 ops/s
# Warmup Iteration  23: 1927701.768 ops/s
# Warmup Iteration  24: 1914387.648 ops/s
# Warmup Iteration  25: 1919113.202 ops/s
# Warmup Iteration  26: 1908885.994 ops/s
# Warmup Iteration  27: 1891506.200 ops/s
# Warmup Iteration  28: 1922207.229 ops/s
# Warmup Iteration  29: 1923066.821 ops/s
# Warmup Iteration  30: 1924104.545 ops/s
Iteration   1: 1930022.232 ops/s
Iteration   2: 1929093.427 ops/s
Iteration   3: 1920937.203 ops/s
Iteration   4: 1952764.171 ops/s
Iteration   5: 1906336.871 ops/s
Iteration   6: 1937730.565 ops/s
Iteration   7: 1942256.330 ops/s
Iteration   8: 1922887.628 ops/s
Iteration   9: 1921806.617 ops/s
Iteration  10: 1920558.370 ops/s
Iteration  11: 1931874.717 ops/s
Iteration  12: 1931420.450 ops/s
Iteration  13: 1924785.557 ops/s
Iteration  14: 1914762.051 ops/s
Iteration  15: 1929349.509 ops/s
Iteration  16: 1930894.311 ops/s
Iteration  17: 1938948.730 ops/s
Iteration  18: 1930066.742 ops/s
Iteration  19: 1917017.147 ops/s
Iteration  20: 1940173.133 ops/s
Iteration  21: 1928228.663 ops/s
Iteration  22: 1928920.302 ops/s
Iteration  23: 1916821.085 ops/s
Iteration  24: 1926983.041 ops/s
Iteration  25: 1926779.321 ops/s
Iteration  26: 1929418.928 ops/s
Iteration  27: 1926347.472 ops/s
Iteration  28: 1930678.216 ops/s
Iteration  29: 1928434.967 ops/s
Iteration  30: 1928912.841 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupBy":
  1928173.686 ±(99.9%) 5964.684 ops/s [Average]
  (min, avg, max) = (1906336.871, 1928173.686, 1952764.171), stdev = 8927.660
  CI (99.9%): [1922209.002, 1934138.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupBy  thrpt   30  1928173.686 ± 5964.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 141367.783 ops/s
# Warmup Iteration   2: 222938.058 ops/s
# Warmup Iteration   3: 276534.687 ops/s
# Warmup Iteration   4: 276137.308 ops/s
# Warmup Iteration   5: 276680.201 ops/s
# Warmup Iteration   6: 277520.684 ops/s
# Warmup Iteration   7: 225628.754 ops/s
# Warmup Iteration   8: 278137.255 ops/s
# Warmup Iteration   9: 275972.040 ops/s
# Warmup Iteration  10: 276503.185 ops/s
# Warmup Iteration  11: 277752.837 ops/s
# Warmup Iteration  12: 276160.132 ops/s
# Warmup Iteration  13: 277213.439 ops/s
# Warmup Iteration  14: 277013.258 ops/s
# Warmup Iteration  15: 277397.171 ops/s
# Warmup Iteration  16: 278943.515 ops/s
# Warmup Iteration  17: 277220.061 ops/s
# Warmup Iteration  18: 277682.649 ops/s
# Warmup Iteration  19: 277768.748 ops/s
# Warmup Iteration  20: 278227.452 ops/s
# Warmup Iteration  21: 277232.360 ops/s
# Warmup Iteration  22: 277077.767 ops/s
# Warmup Iteration  23: 277288.302 ops/s
# Warmup Iteration  24: 277035.137 ops/s
# Warmup Iteration  25: 276071.999 ops/s
# Warmup Iteration  26: 277637.194 ops/s
# Warmup Iteration  27: 278143.121 ops/s
# Warmup Iteration  28: 277745.310 ops/s
# Warmup Iteration  29: 276305.023 ops/s
# Warmup Iteration  30: 277821.361 ops/s
Iteration   1: 277850.177 ops/s
Iteration   2: 278840.568 ops/s
Iteration   3: 278337.391 ops/s
Iteration   4: 278302.726 ops/s
Iteration   5: 277527.404 ops/s
Iteration   6: 277309.258 ops/s
Iteration   7: 277336.984 ops/s
Iteration   8: 278267.298 ops/s
Iteration   9: 275631.588 ops/s
Iteration  10: 276264.528 ops/s
Iteration  11: 277632.165 ops/s
Iteration  12: 277933.384 ops/s
Iteration  13: 277636.478 ops/s
Iteration  14: 277988.313 ops/s
Iteration  15: 275696.847 ops/s
Iteration  16: 276175.270 ops/s
Iteration  17: 276737.590 ops/s
Iteration  18: 274672.327 ops/s
Iteration  19: 278085.613 ops/s
Iteration  20: 277592.614 ops/s
Iteration  21: 276713.255 ops/s
Iteration  22: 277440.324 ops/s
Iteration  23: 278208.072 ops/s
Iteration  24: 278077.617 ops/s
Iteration  25: 277978.389 ops/s
Iteration  26: 277187.327 ops/s
Iteration  27: 276713.645 ops/s
Iteration  28: 273481.086 ops/s
Iteration  29: 277445.285 ops/s
Iteration  30: 277819.153 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByEach":
  277229.423 ±(99.9%) 782.645 ops/s [Average]
  (min, avg, max) = (273481.086, 277229.423, 278840.568), stdev = 1171.427
  CI (99.9%): [276446.777, 278012.068] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupByEach  thrpt   30  277229.423 ± 782.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3890110.799 ops/s
# Warmup Iteration   2: 9096407.966 ops/s
# Warmup Iteration   3: 9184806.569 ops/s
# Warmup Iteration   4: 7607261.530 ops/s
# Warmup Iteration   5: 9182576.542 ops/s
# Warmup Iteration   6: 9179043.462 ops/s
# Warmup Iteration   7: 9172163.351 ops/s
# Warmup Iteration   8: 9211646.740 ops/s
# Warmup Iteration   9: 9175292.269 ops/s
# Warmup Iteration  10: 9171700.019 ops/s
# Warmup Iteration  11: 9199117.775 ops/s
# Warmup Iteration  12: 9204313.730 ops/s
# Warmup Iteration  13: 9169361.038 ops/s
# Warmup Iteration  14: 9177964.627 ops/s
# Warmup Iteration  15: 9190275.500 ops/s
# Warmup Iteration  16: 9190019.014 ops/s
# Warmup Iteration  17: 9193264.951 ops/s
# Warmup Iteration  18: 9152800.682 ops/s
# Warmup Iteration  19: 9185405.782 ops/s
# Warmup Iteration  20: 9198545.189 ops/s
# Warmup Iteration  21: 9209125.528 ops/s
# Warmup Iteration  22: 9207661.932 ops/s
# Warmup Iteration  23: 9171861.744 ops/s
# Warmup Iteration  24: 9143621.995 ops/s
# Warmup Iteration  25: 9166530.173 ops/s
# Warmup Iteration  26: 9138951.237 ops/s
# Warmup Iteration  27: 9193894.837 ops/s
# Warmup Iteration  28: 9180947.825 ops/s
# Warmup Iteration  29: 9193250.119 ops/s
# Warmup Iteration  30: 9217148.849 ops/s
Iteration   1: 9198897.419 ops/s
Iteration   2: 9157835.236 ops/s
Iteration   3: 9196408.777 ops/s
Iteration   4: 9223551.314 ops/s
Iteration   5: 9199406.264 ops/s
Iteration   6: 9191321.137 ops/s
Iteration   7: 9198836.164 ops/s
Iteration   8: 9191133.745 ops/s
Iteration   9: 9168250.042 ops/s
Iteration  10: 9136551.015 ops/s
Iteration  11: 9184003.794 ops/s
Iteration  12: 9188356.384 ops/s
Iteration  13: 9205735.130 ops/s
Iteration  14: 9196209.464 ops/s
Iteration  15: 9186449.523 ops/s
Iteration  16: 9171024.097 ops/s
Iteration  17: 9203184.572 ops/s
Iteration  18: 9149600.637 ops/s
Iteration  19: 9117837.615 ops/s
Iteration  20: 9157585.431 ops/s
Iteration  21: 9210392.852 ops/s
Iteration  22: 9191311.494 ops/s
Iteration  23: 9233045.064 ops/s
Iteration  24: 9208840.480 ops/s
Iteration  25: 9211271.489 ops/s
Iteration  26: 9208016.368 ops/s
Iteration  27: 9184990.638 ops/s
Iteration  28: 9203351.049 ops/s
Iteration  29: 9189746.502 ops/s
Iteration  30: 9179343.390 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey":
  9188082.903 ±(99.9%) 16714.662 ops/s [Average]
  (min, avg, max) = (9117837.615, 9188082.903, 9233045.064), stdev = 25017.720
  CI (99.9%): [9171368.241, 9204797.564] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  9188082.903 ± 16714.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2232027.265 ops/s
# Warmup Iteration   2: 4718871.103 ops/s
# Warmup Iteration   3: 4908607.330 ops/s
# Warmup Iteration   4: 4924582.529 ops/s
# Warmup Iteration   5: 4069018.136 ops/s
# Warmup Iteration   6: 4943316.082 ops/s
# Warmup Iteration   7: 4957502.630 ops/s
# Warmup Iteration   8: 4957872.023 ops/s
# Warmup Iteration   9: 4926807.580 ops/s
# Warmup Iteration  10: 4963693.855 ops/s
# Warmup Iteration  11: 4941619.373 ops/s
# Warmup Iteration  12: 4946796.549 ops/s
# Warmup Iteration  13: 4941167.022 ops/s
# Warmup Iteration  14: 4963638.858 ops/s
# Warmup Iteration  15: 4943668.803 ops/s
# Warmup Iteration  16: 4951264.002 ops/s
# Warmup Iteration  17: 4957294.362 ops/s
# Warmup Iteration  18: 4942992.486 ops/s
# Warmup Iteration  19: 4958317.395 ops/s
# Warmup Iteration  20: 4944522.928 ops/s
# Warmup Iteration  21: 4941479.298 ops/s
# Warmup Iteration  22: 4962899.373 ops/s
# Warmup Iteration  23: 4952107.655 ops/s
# Warmup Iteration  24: 4933331.147 ops/s
# Warmup Iteration  25: 4953481.140 ops/s
# Warmup Iteration  26: 4933469.430 ops/s
# Warmup Iteration  27: 4957921.384 ops/s
# Warmup Iteration  28: 4934109.408 ops/s
# Warmup Iteration  29: 4942306.471 ops/s
# Warmup Iteration  30: 4939563.532 ops/s
Iteration   1: 4935419.771 ops/s
Iteration   2: 4956008.874 ops/s
Iteration   3: 4947812.718 ops/s
Iteration   4: 4948350.897 ops/s
Iteration   5: 4953364.112 ops/s
Iteration   6: 4952887.620 ops/s
Iteration   7: 4938751.522 ops/s
Iteration   8: 4946304.710 ops/s
Iteration   9: 4952459.545 ops/s
Iteration  10: 4935976.321 ops/s
Iteration  11: 4942886.703 ops/s
Iteration  12: 4940060.415 ops/s
Iteration  13: 4958403.002 ops/s
Iteration  14: 4966703.160 ops/s
Iteration  15: 4921164.367 ops/s
Iteration  16: 4945648.590 ops/s
Iteration  17: 4951139.024 ops/s
Iteration  18: 4954120.831 ops/s
Iteration  19: 4966933.651 ops/s
Iteration  20: 4937650.487 ops/s
Iteration  21: 4946710.645 ops/s
Iteration  22: 4957456.235 ops/s
Iteration  23: 4940276.135 ops/s
Iteration  24: 4957701.549 ops/s
Iteration  25: 4930451.459 ops/s
Iteration  26: 4947589.540 ops/s
Iteration  27: 4962094.580 ops/s
Iteration  28: 4951466.877 ops/s
Iteration  29: 4967214.066 ops/s
Iteration  30: 4964402.046 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target":
  4949246.982 ±(99.9%) 7515.042 ops/s [Average]
  (min, avg, max) = (4921164.367, 4949246.982, 4967214.066), stdev = 11248.161
  CI (99.9%): [4941731.940, 4956762.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  4949246.982 ± 7515.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 497578.923 ops/s
# Warmup Iteration   2: 614554.304 ops/s
# Warmup Iteration   3: 793562.741 ops/s
# Warmup Iteration   4: 788319.354 ops/s
# Warmup Iteration   5: 795619.423 ops/s
# Warmup Iteration   6: 793254.425 ops/s
# Warmup Iteration   7: 799062.065 ops/s
# Warmup Iteration   8: 795821.091 ops/s
# Warmup Iteration   9: 656158.833 ops/s
# Warmup Iteration  10: 796077.328 ops/s
# Warmup Iteration  11: 795070.131 ops/s
# Warmup Iteration  12: 799563.209 ops/s
# Warmup Iteration  13: 798383.831 ops/s
# Warmup Iteration  14: 796718.273 ops/s
# Warmup Iteration  15: 797056.091 ops/s
# Warmup Iteration  16: 795366.129 ops/s
# Warmup Iteration  17: 832735.892 ops/s
# Warmup Iteration  18: 830918.303 ops/s
# Warmup Iteration  19: 833680.810 ops/s
# Warmup Iteration  20: 835785.409 ops/s
# Warmup Iteration  21: 833912.054 ops/s
# Warmup Iteration  22: 832690.955 ops/s
# Warmup Iteration  23: 830640.476 ops/s
# Warmup Iteration  24: 828310.839 ops/s
# Warmup Iteration  25: 833076.734 ops/s
# Warmup Iteration  26: 835401.413 ops/s
# Warmup Iteration  27: 833502.104 ops/s
# Warmup Iteration  28: 829996.241 ops/s
# Warmup Iteration  29: 835950.575 ops/s
# Warmup Iteration  30: 832824.136 ops/s
Iteration   1: 835754.013 ops/s
Iteration   2: 837413.780 ops/s
Iteration   3: 838689.073 ops/s
Iteration   4: 831022.342 ops/s
Iteration   5: 836483.658 ops/s
Iteration   6: 832263.035 ops/s
Iteration   7: 828512.157 ops/s
Iteration   8: 829916.239 ops/s
Iteration   9: 835347.385 ops/s
Iteration  10: 834555.204 ops/s
Iteration  11: 833308.827 ops/s
Iteration  12: 832944.195 ops/s
Iteration  13: 831887.292 ops/s
Iteration  14: 826358.728 ops/s
Iteration  15: 828434.401 ops/s
Iteration  16: 824333.535 ops/s
Iteration  17: 822611.757 ops/s
Iteration  18: 825259.823 ops/s
Iteration  19: 832821.371 ops/s
Iteration  20: 837867.946 ops/s
Iteration  21: 829872.034 ops/s
Iteration  22: 830652.268 ops/s
Iteration  23: 836771.426 ops/s
Iteration  24: 832369.848 ops/s
Iteration  25: 834478.742 ops/s
Iteration  26: 835648.128 ops/s
Iteration  27: 836820.407 ops/s
Iteration  28: 833901.380 ops/s
Iteration  29: 837802.288 ops/s
Iteration  30: 834040.139 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  832604.714 ±(99.9%) 2830.573 ops/s [Average]
  (min, avg, max) = (822611.757, 832604.714, 838689.073), stdev = 4236.668
  CI (99.9%): [829774.141, 835435.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  832604.714 ± 2830.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535946.573 ops/s
# Warmup Iteration   2: 612091.528 ops/s
# Warmup Iteration   3: 794685.875 ops/s
# Warmup Iteration   4: 794808.304 ops/s
# Warmup Iteration   5: 790204.480 ops/s
# Warmup Iteration   6: 799312.520 ops/s
# Warmup Iteration   7: 794333.806 ops/s
# Warmup Iteration   8: 786549.299 ops/s
# Warmup Iteration   9: 794552.582 ops/s
# Warmup Iteration  10: 662691.947 ops/s
# Warmup Iteration  11: 800684.551 ops/s
# Warmup Iteration  12: 796566.132 ops/s
# Warmup Iteration  13: 797104.543 ops/s
# Warmup Iteration  14: 795471.629 ops/s
# Warmup Iteration  15: 795084.478 ops/s
# Warmup Iteration  16: 795352.623 ops/s
# Warmup Iteration  17: 845602.534 ops/s
# Warmup Iteration  18: 842221.739 ops/s
# Warmup Iteration  19: 845275.077 ops/s
# Warmup Iteration  20: 844410.632 ops/s
# Warmup Iteration  21: 843392.998 ops/s
# Warmup Iteration  22: 845021.864 ops/s
# Warmup Iteration  23: 840991.932 ops/s
# Warmup Iteration  24: 843439.734 ops/s
# Warmup Iteration  25: 845582.154 ops/s
# Warmup Iteration  26: 842470.987 ops/s
# Warmup Iteration  27: 845387.208 ops/s
# Warmup Iteration  28: 842922.023 ops/s
# Warmup Iteration  29: 844957.625 ops/s
# Warmup Iteration  30: 841484.362 ops/s
Iteration   1: 841504.702 ops/s
Iteration   2: 842190.538 ops/s
Iteration   3: 839102.029 ops/s
Iteration   4: 844611.926 ops/s
Iteration   5: 845515.502 ops/s
Iteration   6: 839289.439 ops/s
Iteration   7: 841781.158 ops/s
Iteration   8: 849692.414 ops/s
Iteration   9: 850133.327 ops/s
Iteration  10: 846999.348 ops/s
Iteration  11: 849224.320 ops/s
Iteration  12: 841515.646 ops/s
Iteration  13: 840867.178 ops/s
Iteration  14: 845824.632 ops/s
Iteration  15: 839895.666 ops/s
Iteration  16: 841257.953 ops/s
Iteration  17: 842711.419 ops/s
Iteration  18: 845860.748 ops/s
Iteration  19: 844473.876 ops/s
Iteration  20: 843266.127 ops/s
Iteration  21: 842067.380 ops/s
Iteration  22: 848394.442 ops/s
Iteration  23: 844441.290 ops/s
Iteration  24: 848374.517 ops/s
Iteration  25: 842952.481 ops/s
Iteration  26: 846725.485 ops/s
Iteration  27: 848402.364 ops/s
Iteration  28: 841427.731 ops/s
Iteration  29: 843838.443 ops/s
Iteration  30: 844101.784 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  844214.795 ±(99.9%) 2129.826 ops/s [Average]
  (min, avg, max) = (839102.029, 844214.795, 850133.327), stdev = 3187.823
  CI (99.9%): [842084.970, 846344.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  844214.795 ± 2129.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5859637.421 ops/s
# Warmup Iteration   2: 10587094.890 ops/s
# Warmup Iteration   3: 11178171.074 ops/s
# Warmup Iteration   4: 11200488.056 ops/s
# Warmup Iteration   5: 9532664.727 ops/s
# Warmup Iteration   6: 11007175.937 ops/s
# Warmup Iteration   7: 11188768.811 ops/s
# Warmup Iteration   8: 11173224.658 ops/s
# Warmup Iteration   9: 11225475.899 ops/s
# Warmup Iteration  10: 11213431.366 ops/s
# Warmup Iteration  11: 11196897.217 ops/s
# Warmup Iteration  12: 11236038.673 ops/s
# Warmup Iteration  13: 11225033.853 ops/s
# Warmup Iteration  14: 11159541.162 ops/s
# Warmup Iteration  15: 11206539.409 ops/s
# Warmup Iteration  16: 11236321.661 ops/s
# Warmup Iteration  17: 11161082.384 ops/s
# Warmup Iteration  18: 11204158.378 ops/s
# Warmup Iteration  19: 11167885.052 ops/s
# Warmup Iteration  20: 11201546.331 ops/s
# Warmup Iteration  21: 11189170.059 ops/s
# Warmup Iteration  22: 11201948.914 ops/s
# Warmup Iteration  23: 11236480.410 ops/s
# Warmup Iteration  24: 11193082.315 ops/s
# Warmup Iteration  25: 11204383.532 ops/s
# Warmup Iteration  26: 11254956.568 ops/s
# Warmup Iteration  27: 11194795.829 ops/s
# Warmup Iteration  28: 11255700.543 ops/s
# Warmup Iteration  29: 11192853.473 ops/s
# Warmup Iteration  30: 11232205.730 ops/s
Iteration   1: 11254492.767 ops/s
Iteration   2: 11194885.971 ops/s
Iteration   3: 11140243.845 ops/s
Iteration   4: 11152837.610 ops/s
Iteration   5: 11128173.229 ops/s
Iteration   6: 11161976.588 ops/s
Iteration   7: 11178095.823 ops/s
Iteration   8: 11157389.578 ops/s
Iteration   9: 11121936.751 ops/s
Iteration  10: 11157338.327 ops/s
Iteration  11: 11136772.074 ops/s
Iteration  12: 11189872.939 ops/s
Iteration  13: 11211526.480 ops/s
Iteration  14: 11120510.536 ops/s
Iteration  15: 11155459.423 ops/s
Iteration  16: 11196927.967 ops/s
Iteration  17: 11219808.549 ops/s
Iteration  18: 11168947.961 ops/s
Iteration  19: 11145107.877 ops/s
Iteration  20: 11221002.732 ops/s
Iteration  21: 11124492.509 ops/s
Iteration  22: 11190104.903 ops/s
Iteration  23: 11171396.912 ops/s
Iteration  24: 11205333.353 ops/s
Iteration  25: 11274810.244 ops/s
Iteration  26: 11237275.939 ops/s
Iteration  27: 11217219.635 ops/s
Iteration  28: 11240253.921 ops/s
Iteration  29: 11250863.528 ops/s
Iteration  30: 11185194.405 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectInto":
  11183675.079 ±(99.9%) 28648.343 ops/s [Average]
  (min, avg, max) = (11120510.536, 11183675.079, 11274810.244), stdev = 42879.495
  CI (99.9%): [11155026.736, 11212323.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectInto  thrpt   30  11183675.079 ± 28648.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4948666.572 ops/s
# Warmup Iteration   2: 7371267.525 ops/s
# Warmup Iteration   3: 8703153.518 ops/s
# Warmup Iteration   4: 8709043.897 ops/s
# Warmup Iteration   5: 8732287.045 ops/s
# Warmup Iteration   6: 8387314.719 ops/s
# Warmup Iteration   7: 7579136.329 ops/s
# Warmup Iteration   8: 8728410.065 ops/s
# Warmup Iteration   9: 8744522.425 ops/s
# Warmup Iteration  10: 8718487.017 ops/s
# Warmup Iteration  11: 8739404.738 ops/s
# Warmup Iteration  12: 8694372.654 ops/s
# Warmup Iteration  13: 8743737.732 ops/s
# Warmup Iteration  14: 8748212.272 ops/s
# Warmup Iteration  15: 8725203.691 ops/s
# Warmup Iteration  16: 8734113.898 ops/s
# Warmup Iteration  17: 8733207.379 ops/s
# Warmup Iteration  18: 8762631.892 ops/s
# Warmup Iteration  19: 8697677.262 ops/s
# Warmup Iteration  20: 8739821.197 ops/s
# Warmup Iteration  21: 8737126.949 ops/s
# Warmup Iteration  22: 8745187.343 ops/s
# Warmup Iteration  23: 8737541.107 ops/s
# Warmup Iteration  24: 8735258.705 ops/s
# Warmup Iteration  25: 8725090.586 ops/s
# Warmup Iteration  26: 8734769.308 ops/s
# Warmup Iteration  27: 8742638.992 ops/s
# Warmup Iteration  28: 8751783.380 ops/s
# Warmup Iteration  29: 8707947.427 ops/s
# Warmup Iteration  30: 8754241.837 ops/s
Iteration   1: 8752400.771 ops/s
Iteration   2: 8696324.612 ops/s
Iteration   3: 8745035.273 ops/s
Iteration   4: 8691777.473 ops/s
Iteration   5: 8696713.891 ops/s
Iteration   6: 8747980.246 ops/s
Iteration   7: 8727431.557 ops/s
Iteration   8: 8718607.501 ops/s
Iteration   9: 8736607.115 ops/s
Iteration  10: 8674630.886 ops/s
Iteration  11: 8624925.754 ops/s
Iteration  12: 8742552.603 ops/s
Iteration  13: 8761288.363 ops/s
Iteration  14: 8733054.767 ops/s
Iteration  15: 8752840.118 ops/s
Iteration  16: 8568588.156 ops/s
Iteration  17: 8722242.566 ops/s
Iteration  18: 8712713.406 ops/s
Iteration  19: 8724257.236 ops/s
Iteration  20: 8758226.257 ops/s
Iteration  21: 8708659.804 ops/s
Iteration  22: 8738204.589 ops/s
Iteration  23: 8734282.117 ops/s
Iteration  24: 8723785.284 ops/s
Iteration  25: 8713625.407 ops/s
Iteration  26: 8732616.128 ops/s
Iteration  27: 8734684.593 ops/s
Iteration  28: 8777757.868 ops/s
Iteration  29: 8742868.141 ops/s
Iteration  30: 8758818.355 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoDouble":
  8721783.361 ±(99.9%) 27763.674 ops/s [Average]
  (min, avg, max) = (8568588.156, 8721783.361, 8777757.868), stdev = 41555.364
  CI (99.9%): [8694019.687, 8749547.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  8721783.361 ± 27763.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5010784.104 ops/s
# Warmup Iteration   2: 7611400.985 ops/s
# Warmup Iteration   3: 8742911.606 ops/s
# Warmup Iteration   4: 8805887.383 ops/s
# Warmup Iteration   5: 8812322.683 ops/s
# Warmup Iteration   6: 8212758.951 ops/s
# Warmup Iteration   7: 7906033.161 ops/s
# Warmup Iteration   8: 8793083.082 ops/s
# Warmup Iteration   9: 8833468.037 ops/s
# Warmup Iteration  10: 8841326.825 ops/s
# Warmup Iteration  11: 8806517.914 ops/s
# Warmup Iteration  12: 8776802.453 ops/s
# Warmup Iteration  13: 8785464.149 ops/s
# Warmup Iteration  14: 8824997.040 ops/s
# Warmup Iteration  15: 8826448.372 ops/s
# Warmup Iteration  16: 8795166.275 ops/s
# Warmup Iteration  17: 8832906.867 ops/s
# Warmup Iteration  18: 8820249.932 ops/s
# Warmup Iteration  19: 8808173.368 ops/s
# Warmup Iteration  20: 8824897.393 ops/s
# Warmup Iteration  21: 8795295.893 ops/s
# Warmup Iteration  22: 8849295.673 ops/s
# Warmup Iteration  23: 8837219.329 ops/s
# Warmup Iteration  24: 8837387.417 ops/s
# Warmup Iteration  25: 8821688.981 ops/s
# Warmup Iteration  26: 8815771.124 ops/s
# Warmup Iteration  27: 8807043.711 ops/s
# Warmup Iteration  28: 8816241.962 ops/s
# Warmup Iteration  29: 8810571.267 ops/s
# Warmup Iteration  30: 8819388.446 ops/s
Iteration   1: 8837708.838 ops/s
Iteration   2: 8797480.000 ops/s
Iteration   3: 8860123.667 ops/s
Iteration   4: 8854948.257 ops/s
Iteration   5: 8860378.586 ops/s
Iteration   6: 8830116.670 ops/s
Iteration   7: 8785143.490 ops/s
Iteration   8: 8821444.259 ops/s
Iteration   9: 8840034.805 ops/s
Iteration  10: 8838828.608 ops/s
Iteration  11: 8824011.919 ops/s
Iteration  12: 8806361.301 ops/s
Iteration  13: 8834224.093 ops/s
Iteration  14: 8850160.758 ops/s
Iteration  15: 8807287.684 ops/s
Iteration  16: 8815634.073 ops/s
Iteration  17: 8814562.551 ops/s
Iteration  18: 8824103.075 ops/s
Iteration  19: 8801027.653 ops/s
Iteration  20: 8806273.771 ops/s
Iteration  21: 8750992.978 ops/s
Iteration  22: 8826925.785 ops/s
Iteration  23: 8842899.035 ops/s
Iteration  24: 8777312.732 ops/s
Iteration  25: 8826323.905 ops/s
Iteration  26: 8763970.164 ops/s
Iteration  27: 8875664.499 ops/s
Iteration  28: 8825171.005 ops/s
Iteration  29: 8789144.479 ops/s
Iteration  30: 8794055.700 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoFloat":
  8819410.478 ±(99.9%) 19428.499 ops/s [Average]
  (min, avg, max) = (8750992.978, 8819410.478, 8875664.499), stdev = 29079.665
  CI (99.9%): [8799981.979, 8838838.977] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  8819410.478 ± 19428.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5151677.790 ops/s
# Warmup Iteration   2: 8089151.867 ops/s
# Warmup Iteration   3: 9042270.522 ops/s
# Warmup Iteration   4: 9029709.384 ops/s
# Warmup Iteration   5: 9079759.447 ops/s
# Warmup Iteration   6: 7801588.872 ops/s
# Warmup Iteration   7: 8861863.325 ops/s
# Warmup Iteration   8: 9113234.605 ops/s
# Warmup Iteration   9: 9077657.781 ops/s
# Warmup Iteration  10: 9083988.144 ops/s
# Warmup Iteration  11: 9107693.031 ops/s
# Warmup Iteration  12: 9065787.925 ops/s
# Warmup Iteration  13: 9101286.648 ops/s
# Warmup Iteration  14: 9111118.050 ops/s
# Warmup Iteration  15: 9072375.320 ops/s
# Warmup Iteration  16: 9049904.461 ops/s
# Warmup Iteration  17: 9007778.990 ops/s
# Warmup Iteration  18: 9000749.534 ops/s
# Warmup Iteration  19: 9013419.796 ops/s
# Warmup Iteration  20: 8998496.932 ops/s
# Warmup Iteration  21: 9012414.510 ops/s
# Warmup Iteration  22: 9045163.188 ops/s
# Warmup Iteration  23: 9016137.941 ops/s
# Warmup Iteration  24: 9048294.608 ops/s
# Warmup Iteration  25: 9039014.409 ops/s
# Warmup Iteration  26: 9015775.065 ops/s
# Warmup Iteration  27: 8980238.902 ops/s
# Warmup Iteration  28: 9032642.760 ops/s
# Warmup Iteration  29: 9008840.728 ops/s
# Warmup Iteration  30: 9041604.553 ops/s
Iteration   1: 9022306.041 ops/s
Iteration   2: 8993354.417 ops/s
Iteration   3: 9028674.272 ops/s
Iteration   4: 8987214.528 ops/s
Iteration   5: 9025240.328 ops/s
Iteration   6: 9036628.439 ops/s
Iteration   7: 9007748.683 ops/s
Iteration   8: 8972989.125 ops/s
Iteration   9: 9039991.610 ops/s
Iteration  10: 8960757.798 ops/s
Iteration  11: 8977997.274 ops/s
Iteration  12: 8995529.087 ops/s
Iteration  13: 9060486.774 ops/s
Iteration  14: 9037351.196 ops/s
Iteration  15: 9004089.882 ops/s
Iteration  16: 9049889.100 ops/s
Iteration  17: 8993963.377 ops/s
Iteration  18: 9014176.283 ops/s
Iteration  19: 9020866.829 ops/s
Iteration  20: 9051553.862 ops/s
Iteration  21: 9005495.778 ops/s
Iteration  22: 8988950.220 ops/s
Iteration  23: 9010364.112 ops/s
Iteration  24: 8994281.639 ops/s
Iteration  25: 9047012.555 ops/s
Iteration  26: 9041829.208 ops/s
Iteration  27: 9025604.711 ops/s
Iteration  28: 9027459.798 ops/s
Iteration  29: 9051486.824 ops/s
Iteration  30: 8972293.930 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoInt":
  9014852.923 ±(99.9%) 18103.077 ops/s [Average]
  (min, avg, max) = (8960757.798, 9014852.923, 9060486.774), stdev = 27095.835
  CI (99.9%): [8996749.846, 9032956.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectIntoInt  thrpt   30  9014852.923 ± 18103.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5180379.284 ops/s
# Warmup Iteration   2: 8130998.968 ops/s
# Warmup Iteration   3: 8799460.459 ops/s
# Warmup Iteration   4: 8972905.793 ops/s
# Warmup Iteration   5: 8942992.513 ops/s
# Warmup Iteration   6: 7911982.993 ops/s
# Warmup Iteration   7: 8572642.773 ops/s
# Warmup Iteration   8: 8942242.791 ops/s
# Warmup Iteration   9: 8964152.516 ops/s
# Warmup Iteration  10: 8983072.707 ops/s
# Warmup Iteration  11: 8960412.151 ops/s
# Warmup Iteration  12: 8965944.999 ops/s
# Warmup Iteration  13: 8974864.582 ops/s
# Warmup Iteration  14: 8988435.191 ops/s
# Warmup Iteration  15: 8961635.554 ops/s
# Warmup Iteration  16: 8991663.759 ops/s
# Warmup Iteration  17: 9016740.248 ops/s
# Warmup Iteration  18: 8988028.228 ops/s
# Warmup Iteration  19: 8928780.932 ops/s
# Warmup Iteration  20: 8974492.071 ops/s
# Warmup Iteration  21: 8996230.152 ops/s
# Warmup Iteration  22: 9005378.942 ops/s
# Warmup Iteration  23: 8963985.702 ops/s
# Warmup Iteration  24: 8971639.000 ops/s
# Warmup Iteration  25: 9004364.396 ops/s
# Warmup Iteration  26: 9012503.301 ops/s
# Warmup Iteration  27: 8977965.654 ops/s
# Warmup Iteration  28: 9000088.452 ops/s
# Warmup Iteration  29: 8989783.194 ops/s
# Warmup Iteration  30: 8982471.256 ops/s
Iteration   1: 9005606.483 ops/s
Iteration   2: 8944538.901 ops/s
Iteration   3: 8948150.342 ops/s
Iteration   4: 9001218.689 ops/s
Iteration   5: 8998478.641 ops/s
Iteration   6: 8932634.241 ops/s
Iteration   7: 8972199.649 ops/s
Iteration   8: 8975059.310 ops/s
Iteration   9: 8897029.528 ops/s
Iteration  10: 8940991.366 ops/s
Iteration  11: 8948847.125 ops/s
Iteration  12: 8976869.105 ops/s
Iteration  13: 8984219.462 ops/s
Iteration  14: 8985851.454 ops/s
Iteration  15: 8981974.745 ops/s
Iteration  16: 8967636.419 ops/s
Iteration  17: 8980716.407 ops/s
Iteration  18: 8918598.029 ops/s
Iteration  19: 8966037.341 ops/s
Iteration  20: 8931843.239 ops/s
Iteration  21: 8979718.494 ops/s
Iteration  22: 8944157.193 ops/s
Iteration  23: 8944837.641 ops/s
Iteration  24: 8952495.191 ops/s
Iteration  25: 8986464.696 ops/s
Iteration  26: 8991743.739 ops/s
Iteration  27: 9002851.052 ops/s
Iteration  28: 8994301.293 ops/s
Iteration  29: 8974361.425 ops/s
Iteration  30: 8987086.842 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoLong":
  8967217.268 ±(99.9%) 18103.286 ops/s [Average]
  (min, avg, max) = (8897029.528, 8967217.268, 9005606.483), stdev = 27096.148
  CI (99.9%): [8949113.982, 8985320.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectIntoLong  thrpt   30  8967217.268 ± 18103.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7924480.710 ops/s
# Warmup Iteration   2: 17052358.905 ops/s
# Warmup Iteration   3: 17273340.111 ops/s
# Warmup Iteration   4: 14438583.465 ops/s
# Warmup Iteration   5: 17303475.356 ops/s
# Warmup Iteration   6: 17340990.672 ops/s
# Warmup Iteration   7: 17364964.639 ops/s
# Warmup Iteration   8: 17320142.218 ops/s
# Warmup Iteration   9: 17359898.942 ops/s
# Warmup Iteration  10: 17281500.928 ops/s
# Warmup Iteration  11: 17298082.368 ops/s
# Warmup Iteration  12: 17227656.562 ops/s
# Warmup Iteration  13: 17261384.256 ops/s
# Warmup Iteration  14: 17266313.251 ops/s
# Warmup Iteration  15: 17300124.123 ops/s
# Warmup Iteration  16: 17329592.699 ops/s
# Warmup Iteration  17: 17357699.427 ops/s
# Warmup Iteration  18: 17413357.070 ops/s
# Warmup Iteration  19: 17296007.045 ops/s
# Warmup Iteration  20: 17296668.199 ops/s
# Warmup Iteration  21: 17371651.921 ops/s
# Warmup Iteration  22: 17309024.359 ops/s
# Warmup Iteration  23: 17385978.629 ops/s
# Warmup Iteration  24: 17372360.552 ops/s
# Warmup Iteration  25: 17357235.742 ops/s
# Warmup Iteration  26: 17385703.481 ops/s
# Warmup Iteration  27: 17324923.778 ops/s
# Warmup Iteration  28: 17375569.831 ops/s
# Warmup Iteration  29: 17368220.735 ops/s
# Warmup Iteration  30: 17298483.993 ops/s
Iteration   1: 17349680.725 ops/s
Iteration   2: 17361616.405 ops/s
Iteration   3: 17405826.812 ops/s
Iteration   4: 17387213.821 ops/s
Iteration   5: 17360449.874 ops/s
Iteration   6: 17219221.499 ops/s
Iteration   7: 17413474.881 ops/s
Iteration   8: 17390059.283 ops/s
Iteration   9: 17379490.040 ops/s
Iteration  10: 17302273.618 ops/s
Iteration  11: 17388784.057 ops/s
Iteration  12: 17277687.582 ops/s
Iteration  13: 17191787.493 ops/s
Iteration  14: 17322155.748 ops/s
Iteration  15: 17314201.209 ops/s
Iteration  16: 17323951.486 ops/s
Iteration  17: 17379477.327 ops/s
Iteration  18: 17388736.133 ops/s
Iteration  19: 17391915.808 ops/s
Iteration  20: 17343326.357 ops/s
Iteration  21: 17313650.795 ops/s
Iteration  22: 17341853.200 ops/s
Iteration  23: 17339284.143 ops/s
Iteration  24: 17385834.701 ops/s
Iteration  25: 17382084.827 ops/s
Iteration  26: 17258629.453 ops/s
Iteration  27: 17298567.299 ops/s
Iteration  28: 17286293.128 ops/s
Iteration  29: 17426732.112 ops/s
Iteration  30: 17383787.827 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_injectIntoWith":
  17343601.588 ±(99.9%) 38031.780 ops/s [Average]
  (min, avg, max) = (17191787.493, 17343601.588, 17426732.112), stdev = 56924.182
  CI (99.9%): [17305569.808, 17381633.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_injectIntoWith  thrpt   30  17343601.588 ± 38031.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4421508.689 ops/s
# Warmup Iteration   2: 7524145.400 ops/s
# Warmup Iteration   3: 8869153.451 ops/s
# Warmup Iteration   4: 8809919.844 ops/s
# Warmup Iteration   5: 8926691.580 ops/s
# Warmup Iteration   6: 8961863.904 ops/s
# Warmup Iteration   7: 8851277.424 ops/s
# Warmup Iteration   8: 8902384.684 ops/s
# Warmup Iteration   9: 8953350.439 ops/s
# Warmup Iteration  10: 8951085.300 ops/s
# Warmup Iteration  11: 8959888.511 ops/s
# Warmup Iteration  12: 8909352.922 ops/s
# Warmup Iteration  13: 8875061.695 ops/s
# Warmup Iteration  14: 8838363.286 ops/s
# Warmup Iteration  15: 8881016.043 ops/s
# Warmup Iteration  16: 8877138.739 ops/s
# Warmup Iteration  17: 8911997.935 ops/s
# Warmup Iteration  18: 8821297.479 ops/s
# Warmup Iteration  19: 8909607.613 ops/s
# Warmup Iteration  20: 8885141.659 ops/s
# Warmup Iteration  21: 8905186.289 ops/s
# Warmup Iteration  22: 8932177.507 ops/s
# Warmup Iteration  23: 8946972.084 ops/s
# Warmup Iteration  24: 8921847.569 ops/s
# Warmup Iteration  25: 8944523.515 ops/s
# Warmup Iteration  26: 8912845.380 ops/s
# Warmup Iteration  27: 8927542.579 ops/s
# Warmup Iteration  28: 8901654.669 ops/s
# Warmup Iteration  29: 8916015.579 ops/s
# Warmup Iteration  30: 8876841.540 ops/s
Iteration   1: 8812804.030 ops/s
Iteration   2: 8924543.913 ops/s
Iteration   3: 8860365.053 ops/s
Iteration   4: 8946946.646 ops/s
Iteration   5: 8882874.685 ops/s
Iteration   6: 8948309.526 ops/s
Iteration   7: 8797188.576 ops/s
Iteration   8: 8752171.105 ops/s
Iteration   9: 8973315.732 ops/s
Iteration  10: 8935696.669 ops/s
Iteration  11: 8885514.804 ops/s
Iteration  12: 8925565.194 ops/s
Iteration  13: 8896266.177 ops/s
Iteration  14: 8897623.090 ops/s
Iteration  15: 8952461.897 ops/s
Iteration  16: 8936511.185 ops/s
Iteration  17: 8943057.595 ops/s
Iteration  18: 8926397.719 ops/s
Iteration  19: 8809307.557 ops/s
Iteration  20: 8906382.696 ops/s
Iteration  21: 8976574.872 ops/s
Iteration  22: 8928630.740 ops/s
Iteration  23: 8981954.893 ops/s
Iteration  24: 8992003.398 ops/s
Iteration  25: 8984096.760 ops/s
Iteration  26: 8915586.322 ops/s
Iteration  27: 8929529.993 ops/s
Iteration  28: 8901582.760 ops/s
Iteration  29: 8966373.664 ops/s
Iteration  30: 8897390.501 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_isEmpty":
  8912900.925 ±(99.9%) 39024.287 ops/s [Average]
  (min, avg, max) = (8752171.105, 8912900.925, 8992003.398), stdev = 58409.720
  CI (99.9%): [8873876.638, 8951925.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_isEmpty  thrpt   30  8912900.925 ± 39024.287  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17558063.315 ops/s
# Warmup Iteration   2: 30418190.510 ops/s
# Warmup Iteration   3: 31943325.033 ops/s
# Warmup Iteration   4: 33516827.589 ops/s
# Warmup Iteration   5: 33365695.590 ops/s
# Warmup Iteration   6: 33426145.115 ops/s
# Warmup Iteration   7: 33562302.514 ops/s
# Warmup Iteration   8: 33093855.933 ops/s
# Warmup Iteration   9: 33714492.216 ops/s
# Warmup Iteration  10: 33735533.861 ops/s
# Warmup Iteration  11: 33625831.429 ops/s
# Warmup Iteration  12: 33827456.462 ops/s
# Warmup Iteration  13: 33699721.125 ops/s
# Warmup Iteration  14: 33770121.147 ops/s
# Warmup Iteration  15: 33588289.802 ops/s
# Warmup Iteration  16: 33628942.949 ops/s
# Warmup Iteration  17: 33559297.500 ops/s
# Warmup Iteration  18: 33465631.238 ops/s
# Warmup Iteration  19: 33363545.151 ops/s
# Warmup Iteration  20: 33628288.228 ops/s
# Warmup Iteration  21: 33570969.104 ops/s
# Warmup Iteration  22: 33642889.963 ops/s
# Warmup Iteration  23: 33627368.673 ops/s
# Warmup Iteration  24: 33386790.609 ops/s
# Warmup Iteration  25: 33801345.576 ops/s
# Warmup Iteration  26: 33829264.791 ops/s
# Warmup Iteration  27: 33745402.938 ops/s
# Warmup Iteration  28: 33890260.294 ops/s
# Warmup Iteration  29: 33633984.242 ops/s
# Warmup Iteration  30: 33603252.375 ops/s
Iteration   1: 33503816.481 ops/s
Iteration   2: 33276353.420 ops/s
Iteration   3: 33672111.432 ops/s
Iteration   4: 33303191.932 ops/s
Iteration   5: 33654509.449 ops/s
Iteration   6: 33668968.994 ops/s
Iteration   7: 33653269.371 ops/s
Iteration   8: 33655815.616 ops/s
Iteration   9: 33664735.007 ops/s
Iteration  10: 33581707.257 ops/s
Iteration  11: 33672587.340 ops/s
Iteration  12: 33693685.189 ops/s
Iteration  13: 33455602.648 ops/s
Iteration  14: 33680613.653 ops/s
Iteration  15: 33502742.886 ops/s
Iteration  16: 33376737.746 ops/s
Iteration  17: 33672597.070 ops/s
Iteration  18: 33767168.849 ops/s
Iteration  19: 33617153.667 ops/s
Iteration  20: 33864463.347 ops/s
Iteration  21: 33802271.190 ops/s
Iteration  22: 33884261.918 ops/s
Iteration  23: 33697720.472 ops/s
Iteration  24: 33888425.250 ops/s
Iteration  25: 33879250.793 ops/s
Iteration  26: 33755349.937 ops/s
Iteration  27: 33806396.336 ops/s
Iteration  28: 33893684.059 ops/s
Iteration  29: 33722175.856 ops/s
Iteration  30: 33884909.046 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator":
  33671742.540 ±(99.9%) 112124.020 ops/s [Average]
  (min, avg, max) = (33276353.420, 33671742.540, 33893684.059), stdev = 167821.968
  CI (99.9%): [33559618.520, 33783866.561] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_iterator  thrpt   30  33671742.540 ± 112124.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 735480.540 ops/s
# Warmup Iteration   2: 763100.161 ops/s
# Warmup Iteration   3: 991361.788 ops/s
# Warmup Iteration   4: 1018138.997 ops/s
# Warmup Iteration   5: 1022800.564 ops/s
# Warmup Iteration   6: 1020866.363 ops/s
# Warmup Iteration   7: 1019007.375 ops/s
# Warmup Iteration   8: 1016531.489 ops/s
# Warmup Iteration   9: 1017894.733 ops/s
# Warmup Iteration  10: 1015779.492 ops/s
# Warmup Iteration  11: 1020906.157 ops/s
# Warmup Iteration  12: 849582.195 ops/s
# Warmup Iteration  13: 1018369.491 ops/s
# Warmup Iteration  14: 1016158.136 ops/s
# Warmup Iteration  15: 1018239.936 ops/s
# Warmup Iteration  16: 1018296.191 ops/s
# Warmup Iteration  17: 1082626.055 ops/s
# Warmup Iteration  18: 1079579.379 ops/s
# Warmup Iteration  19: 1085454.079 ops/s
# Warmup Iteration  20: 1083373.327 ops/s
# Warmup Iteration  21: 1080631.269 ops/s
# Warmup Iteration  22: 1084900.694 ops/s
# Warmup Iteration  23: 1086885.860 ops/s
# Warmup Iteration  24: 1087187.545 ops/s
# Warmup Iteration  25: 1090814.867 ops/s
# Warmup Iteration  26: 1081556.456 ops/s
# Warmup Iteration  27: 1089359.468 ops/s
# Warmup Iteration  28: 1081583.443 ops/s
# Warmup Iteration  29: 1088408.047 ops/s
# Warmup Iteration  30: 1083078.425 ops/s
Iteration   1: 1082904.830 ops/s
Iteration   2: 1084981.068 ops/s
Iteration   3: 1093249.743 ops/s
Iteration   4: 1084681.281 ops/s
Iteration   5: 1079829.711 ops/s
Iteration   6: 1084227.276 ops/s
Iteration   7: 1086162.695 ops/s
Iteration   8: 1087447.446 ops/s
Iteration   9: 1088740.540 ops/s
Iteration  10: 1090805.790 ops/s
Iteration  11: 1083568.125 ops/s
Iteration  12: 1084549.623 ops/s
Iteration  13: 1087528.514 ops/s
Iteration  14: 1091026.576 ops/s
Iteration  15: 1081322.540 ops/s
Iteration  16: 1086402.174 ops/s
Iteration  17: 1091174.257 ops/s
Iteration  18: 1081434.160 ops/s
Iteration  19: 1085820.740 ops/s
Iteration  20: 1082677.261 ops/s
Iteration  21: 1083874.014 ops/s
Iteration  22: 1085625.218 ops/s
Iteration  23: 1082529.688 ops/s
Iteration  24: 1087676.139 ops/s
Iteration  25: 1086680.531 ops/s
Iteration  26: 1086186.952 ops/s
Iteration  27: 1084082.109 ops/s
Iteration  28: 1089567.654 ops/s
Iteration  29: 1079842.369 ops/s
Iteration  30: 1087558.889 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_iterator_throws":
  1085738.597 ±(99.9%) 2253.509 ops/s [Average]
  (min, avg, max) = (1079829.711, 1085738.597, 1093249.743), stdev = 3372.946
  CI (99.9%): [1083485.089, 1087992.106] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_iterator_throws  thrpt   30  1085738.597 ± 2253.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5.193 ops/s
# Warmup Iteration   2: 6.405 ops/s
# Warmup Iteration   3: 7.695 ops/s
# Warmup Iteration   4: 8.035 ops/s
# Warmup Iteration   5: 8.158 ops/s
# Warmup Iteration   6: 8.044 ops/s
# Warmup Iteration   7: 8.173 ops/s
# Warmup Iteration   8: 8.148 ops/s
# Warmup Iteration   9: 8.096 ops/s
# Warmup Iteration  10: 8.154 ops/s
# Warmup Iteration  11: 8.130 ops/s
# Warmup Iteration  12: 8.155 ops/s
# Warmup Iteration  13: 7.363 ops/s
# Warmup Iteration  14: 7.955 ops/s
# Warmup Iteration  15: 8.124 ops/s
# Warmup Iteration  16: 8.092 ops/s
# Warmup Iteration  17: 8.150 ops/s
# Warmup Iteration  18: 8.145 ops/s
# Warmup Iteration  19: 8.106 ops/s
# Warmup Iteration  20: 8.159 ops/s
# Warmup Iteration  21: 8.140 ops/s
# Warmup Iteration  22: 8.174 ops/s
# Warmup Iteration  23: 8.146 ops/s
# Warmup Iteration  24: 8.151 ops/s
# Warmup Iteration  25: 8.145 ops/s
# Warmup Iteration  26: 8.181 ops/s
# Warmup Iteration  27: 8.129 ops/s
# Warmup Iteration  28: 8.119 ops/s
# Warmup Iteration  29: 8.084 ops/s
# Warmup Iteration  30: 7.980 ops/s
Iteration   1: 8.069 ops/s
Iteration   2: 8.083 ops/s
Iteration   3: 8.120 ops/s
Iteration   4: 8.116 ops/s
Iteration   5: 8.108 ops/s
Iteration   6: 8.153 ops/s
Iteration   7: 8.180 ops/s
Iteration   8: 8.151 ops/s
Iteration   9: 8.179 ops/s
Iteration  10: 8.109 ops/s
Iteration  11: 8.187 ops/s
Iteration  12: 8.142 ops/s
Iteration  13: 8.166 ops/s
Iteration  14: 8.098 ops/s
Iteration  15: 8.095 ops/s
Iteration  16: 8.167 ops/s
Iteration  17: 8.105 ops/s
Iteration  18: 8.165 ops/s
Iteration  19: 8.143 ops/s
Iteration  20: 8.090 ops/s
Iteration  21: 8.210 ops/s
Iteration  22: 8.166 ops/s
Iteration  23: 8.207 ops/s
Iteration  24: 8.115 ops/s
Iteration  25: 8.156 ops/s
Iteration  26: 8.194 ops/s
Iteration  27: 8.169 ops/s
Iteration  28: 8.111 ops/s
Iteration  29: 8.074 ops/s
Iteration  30: 8.170 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  8.140 ±(99.9%) 0.027 ops/s [Average]
  (min, avg, max) = (8.069, 8.140, 8.210), stdev = 0.040
  CI (99.9%): [8.113, 8.167] (assumes normal distribution)


# Run complete. Total time: 00:01:36

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt  Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  8.140 ± 0.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1424264.090 ops/s
# Warmup Iteration   2: 3517571.452 ops/s
# Warmup Iteration   3: 3540735.330 ops/s
# Warmup Iteration   4: 2899516.118 ops/s
# Warmup Iteration   5: 3497087.891 ops/s
# Warmup Iteration   6: 3511536.040 ops/s
# Warmup Iteration   7: 3508442.083 ops/s
# Warmup Iteration   8: 3505121.658 ops/s
# Warmup Iteration   9: 3499250.373 ops/s
# Warmup Iteration  10: 3499057.001 ops/s
# Warmup Iteration  11: 3496082.548 ops/s
# Warmup Iteration  12: 3495220.121 ops/s
# Warmup Iteration  13: 3487834.292 ops/s
# Warmup Iteration  14: 3500348.136 ops/s
# Warmup Iteration  15: 3488003.633 ops/s
# Warmup Iteration  16: 3498568.762 ops/s
# Warmup Iteration  17: 3550021.893 ops/s
# Warmup Iteration  18: 3560762.806 ops/s
# Warmup Iteration  19: 3551048.089 ops/s
# Warmup Iteration  20: 3560482.002 ops/s
# Warmup Iteration  21: 3558081.168 ops/s
# Warmup Iteration  22: 3553748.008 ops/s
# Warmup Iteration  23: 3564946.324 ops/s
# Warmup Iteration  24: 3549746.793 ops/s
# Warmup Iteration  25: 3563813.387 ops/s
# Warmup Iteration  26: 3553768.506 ops/s
# Warmup Iteration  27: 3542337.628 ops/s
# Warmup Iteration  28: 3577909.050 ops/s
# Warmup Iteration  29: 3542399.955 ops/s
# Warmup Iteration  30: 3557470.650 ops/s
Iteration   1: 3564432.226 ops/s
Iteration   2: 3563579.889 ops/s
Iteration   3: 3578117.794 ops/s
Iteration   4: 3566665.772 ops/s
Iteration   5: 3583609.794 ops/s
Iteration   6: 3572893.465 ops/s
Iteration   7: 3558430.677 ops/s
Iteration   8: 3577680.331 ops/s
Iteration   9: 3554558.198 ops/s
Iteration  10: 3545606.214 ops/s
Iteration  11: 3562080.972 ops/s
Iteration  12: 3549722.787 ops/s
Iteration  13: 3558491.567 ops/s
Iteration  14: 3568989.556 ops/s
Iteration  15: 3550203.048 ops/s
Iteration  16: 3577153.116 ops/s
Iteration  17: 3559222.437 ops/s
Iteration  18: 3567004.999 ops/s
Iteration  19: 3558503.223 ops/s
Iteration  20: 3565022.230 ops/s
Iteration  21: 3544006.718 ops/s
Iteration  22: 3534540.359 ops/s
Iteration  23: 3579762.288 ops/s
Iteration  24: 3579913.285 ops/s
Iteration  25: 3549905.466 ops/s
Iteration  26: 3555620.877 ops/s
Iteration  27: 3568193.346 ops/s
Iteration  28: 3534228.416 ops/s
Iteration  29: 3554755.313 ops/s
Iteration  30: 3534777.199 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeString":
  3560589.052 ±(99.9%) 9232.489 ops/s [Average]
  (min, avg, max) = (3534228.416, 3560589.052, 3583609.794), stdev = 13818.756
  CI (99.9%): [3551356.563, 3569821.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_makeString  thrpt   30  3560589.052 ± 9232.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2195372.831 ops/s
# Warmup Iteration   2: 4775044.844 ops/s
# Warmup Iteration   3: 3976096.870 ops/s
# Warmup Iteration   4: 4776816.767 ops/s
# Warmup Iteration   5: 4739649.114 ops/s
# Warmup Iteration   6: 4770001.868 ops/s
# Warmup Iteration   7: 4737469.537 ops/s
# Warmup Iteration   8: 4745126.562 ops/s
# Warmup Iteration   9: 4757199.712 ops/s
# Warmup Iteration  10: 4787199.533 ops/s
# Warmup Iteration  11: 4773844.771 ops/s
# Warmup Iteration  12: 4770687.325 ops/s
# Warmup Iteration  13: 4735940.325 ops/s
# Warmup Iteration  14: 4728987.882 ops/s
# Warmup Iteration  15: 4759260.952 ops/s
# Warmup Iteration  16: 4741973.072 ops/s
# Warmup Iteration  17: 4660731.835 ops/s
# Warmup Iteration  18: 4660794.017 ops/s
# Warmup Iteration  19: 4662084.923 ops/s
# Warmup Iteration  20: 4655604.948 ops/s
# Warmup Iteration  21: 4657139.673 ops/s
# Warmup Iteration  22: 4647429.997 ops/s
# Warmup Iteration  23: 4665871.663 ops/s
# Warmup Iteration  24: 4636010.051 ops/s
# Warmup Iteration  25: 4645307.309 ops/s
# Warmup Iteration  26: 4662990.922 ops/s
# Warmup Iteration  27: 4640080.783 ops/s
# Warmup Iteration  28: 4627011.509 ops/s
# Warmup Iteration  29: 4637046.058 ops/s
# Warmup Iteration  30: 4667950.211 ops/s
Iteration   1: 4659568.620 ops/s
Iteration   2: 4665521.540 ops/s
Iteration   3: 4650397.174 ops/s
Iteration   4: 4637726.511 ops/s
Iteration   5: 4655900.032 ops/s
Iteration   6: 4656700.126 ops/s
Iteration   7: 4647338.983 ops/s
Iteration   8: 4655923.868 ops/s
Iteration   9: 4629573.172 ops/s
Iteration  10: 4669021.057 ops/s
Iteration  11: 4674285.578 ops/s
Iteration  12: 4672712.927 ops/s
Iteration  13: 4645788.792 ops/s
Iteration  14: 4630972.554 ops/s
Iteration  15: 4627774.631 ops/s
Iteration  16: 4644966.044 ops/s
Iteration  17: 4627279.438 ops/s
Iteration  18: 4611130.061 ops/s
Iteration  19: 4640688.314 ops/s
Iteration  20: 4655994.249 ops/s
Iteration  21: 4661410.652 ops/s
Iteration  22: 4649080.560 ops/s
Iteration  23: 4640224.593 ops/s
Iteration  24: 4684911.589 ops/s
Iteration  25: 4620202.552 ops/s
Iteration  26: 4617647.739 ops/s
Iteration  27: 4616000.696 ops/s
Iteration  28: 4641407.233 ops/s
Iteration  29: 4654289.822 ops/s
Iteration  30: 4629529.745 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparator":
  4645798.962 ±(99.9%) 12441.503 ops/s [Average]
  (min, avg, max) = (4611130.061, 4645798.962, 4684911.589), stdev = 18621.858
  CI (99.9%): [4633357.458, 4658240.465] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  4645798.962 ± 12441.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2113367.013 ops/s
# Warmup Iteration   2: 4624315.799 ops/s
# Warmup Iteration   3: 4237458.568 ops/s
# Warmup Iteration   4: 4074561.670 ops/s
# Warmup Iteration   5: 4517435.997 ops/s
# Warmup Iteration   6: 4510520.418 ops/s
# Warmup Iteration   7: 4520689.049 ops/s
# Warmup Iteration   8: 4493445.035 ops/s
# Warmup Iteration   9: 4538952.869 ops/s
# Warmup Iteration  10: 4494906.918 ops/s
# Warmup Iteration  11: 4501429.660 ops/s
# Warmup Iteration  12: 4484343.049 ops/s
# Warmup Iteration  13: 4497781.703 ops/s
# Warmup Iteration  14: 4493746.713 ops/s
# Warmup Iteration  15: 4502356.509 ops/s
# Warmup Iteration  16: 4503489.592 ops/s
# Warmup Iteration  17: 4546710.693 ops/s
# Warmup Iteration  18: 4508240.318 ops/s
# Warmup Iteration  19: 4525784.238 ops/s
# Warmup Iteration  20: 4520230.848 ops/s
# Warmup Iteration  21: 4517396.711 ops/s
# Warmup Iteration  22: 4506859.253 ops/s
# Warmup Iteration  23: 4523581.544 ops/s
# Warmup Iteration  24: 4522305.596 ops/s
# Warmup Iteration  25: 4518979.583 ops/s
# Warmup Iteration  26: 4509040.542 ops/s
# Warmup Iteration  27: 4509068.858 ops/s
# Warmup Iteration  28: 4471581.832 ops/s
# Warmup Iteration  29: 4533077.599 ops/s
# Warmup Iteration  30: 4476417.558 ops/s
Iteration   1: 4513190.139 ops/s
Iteration   2: 4504077.180 ops/s
Iteration   3: 4538293.660 ops/s
Iteration   4: 4525515.515 ops/s
Iteration   5: 4508344.897 ops/s
Iteration   6: 4488527.807 ops/s
Iteration   7: 4477857.730 ops/s
Iteration   8: 4517167.613 ops/s
Iteration   9: 4507498.393 ops/s
Iteration  10: 4501667.859 ops/s
Iteration  11: 4496668.037 ops/s
Iteration  12: 4511925.919 ops/s
Iteration  13: 4531904.679 ops/s
Iteration  14: 4508401.005 ops/s
Iteration  15: 4523952.253 ops/s
Iteration  16: 4508037.266 ops/s
Iteration  17: 4535507.267 ops/s
Iteration  18: 4510522.874 ops/s
Iteration  19: 4529623.692 ops/s
Iteration  20: 4546038.123 ops/s
Iteration  21: 4490229.387 ops/s
Iteration  22: 4502427.122 ops/s
Iteration  23: 4505552.352 ops/s
Iteration  24: 4516354.862 ops/s
Iteration  25: 4501536.856 ops/s
Iteration  26: 4522961.564 ops/s
Iteration  27: 4542645.468 ops/s
Iteration  28: 4529879.150 ops/s
Iteration  29: 4530469.247 ops/s
Iteration  30: 4540198.769 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  4515565.889 ±(99.9%) 11450.423 ops/s [Average]
  (min, avg, max) = (4477857.730, 4515565.889, 4546038.123), stdev = 17138.456
  CI (99.9%): [4504115.466, 4527016.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  4515565.889 ± 11450.423  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5202280.364 ops/s
# Warmup Iteration   2: 10894866.686 ops/s
# Warmup Iteration   3: 11285754.221 ops/s
# Warmup Iteration   4: 10467946.918 ops/s
# Warmup Iteration   5: 10184446.320 ops/s
# Warmup Iteration   6: 11268359.231 ops/s
# Warmup Iteration   7: 11305396.918 ops/s
# Warmup Iteration   8: 11218703.978 ops/s
# Warmup Iteration   9: 11269123.071 ops/s
# Warmup Iteration  10: 11233803.636 ops/s
# Warmup Iteration  11: 11295834.603 ops/s
# Warmup Iteration  12: 11231619.077 ops/s
# Warmup Iteration  13: 11266513.462 ops/s
# Warmup Iteration  14: 11249114.922 ops/s
# Warmup Iteration  15: 11274732.933 ops/s
# Warmup Iteration  16: 11263286.377 ops/s
# Warmup Iteration  17: 11269760.772 ops/s
# Warmup Iteration  18: 11274790.500 ops/s
# Warmup Iteration  19: 11262494.646 ops/s
# Warmup Iteration  20: 11287082.213 ops/s
# Warmup Iteration  21: 11252317.449 ops/s
# Warmup Iteration  22: 11319252.779 ops/s
# Warmup Iteration  23: 11235665.999 ops/s
# Warmup Iteration  24: 11243246.932 ops/s
# Warmup Iteration  25: 11283112.240 ops/s
# Warmup Iteration  26: 11224838.595 ops/s
# Warmup Iteration  27: 11215855.256 ops/s
# Warmup Iteration  28: 11265898.236 ops/s
# Warmup Iteration  29: 11237399.564 ops/s
# Warmup Iteration  30: 11294892.161 ops/s
Iteration   1: 11299092.899 ops/s
Iteration   2: 11247904.185 ops/s
Iteration   3: 11328815.135 ops/s
Iteration   4: 11311480.783 ops/s
Iteration   5: 11283961.869 ops/s
Iteration   6: 11281265.291 ops/s
Iteration   7: 11261358.673 ops/s
Iteration   8: 11312744.968 ops/s
Iteration   9: 11325045.614 ops/s
Iteration  10: 11210880.493 ops/s
Iteration  11: 11275749.376 ops/s
Iteration  12: 11266649.004 ops/s
Iteration  13: 11261439.436 ops/s
Iteration  14: 11260020.911 ops/s
Iteration  15: 11258094.129 ops/s
Iteration  16: 11275992.154 ops/s
Iteration  17: 11260704.534 ops/s
Iteration  18: 11281239.218 ops/s
Iteration  19: 11281553.468 ops/s
Iteration  20: 11256716.712 ops/s
Iteration  21: 11239789.073 ops/s
Iteration  22: 11239224.739 ops/s
Iteration  23: 11336046.707 ops/s
Iteration  24: 11197669.401 ops/s
Iteration  25: 11225099.522 ops/s
Iteration  26: 11301131.999 ops/s
Iteration  27: 11325898.304 ops/s
Iteration  28: 11242347.521 ops/s
Iteration  29: 11281585.524 ops/s
Iteration  30: 11310972.470 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max":
  11274682.470 ±(99.9%) 23429.711 ops/s [Average]
  (min, avg, max) = (11197669.401, 11274682.470, 11336046.707), stdev = 35068.492
  CI (99.9%): [11251252.759, 11298112.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_max  thrpt   30  11274682.470 ± 23429.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7696351.630 ops/s
# Warmup Iteration   2: 14645563.834 ops/s
# Warmup Iteration   3: 13421749.973 ops/s
# Warmup Iteration   4: 15182501.746 ops/s
# Warmup Iteration   5: 15177664.496 ops/s
# Warmup Iteration   6: 15248613.714 ops/s
# Warmup Iteration   7: 15225692.672 ops/s
# Warmup Iteration   8: 15126808.111 ops/s
# Warmup Iteration   9: 15170436.114 ops/s
# Warmup Iteration  10: 15104469.539 ops/s
# Warmup Iteration  11: 14775840.594 ops/s
# Warmup Iteration  12: 15129291.948 ops/s
# Warmup Iteration  13: 15278501.707 ops/s
# Warmup Iteration  14: 15283066.492 ops/s
# Warmup Iteration  15: 15244287.507 ops/s
# Warmup Iteration  16: 15245013.765 ops/s
# Warmup Iteration  17: 15275156.825 ops/s
# Warmup Iteration  18: 15269725.662 ops/s
# Warmup Iteration  19: 15202816.506 ops/s
# Warmup Iteration  20: 15253716.804 ops/s
# Warmup Iteration  21: 15137379.896 ops/s
# Warmup Iteration  22: 15141440.258 ops/s
# Warmup Iteration  23: 15123468.789 ops/s
# Warmup Iteration  24: 15131576.983 ops/s
# Warmup Iteration  25: 15213777.326 ops/s
# Warmup Iteration  26: 15117668.112 ops/s
# Warmup Iteration  27: 15080130.908 ops/s
# Warmup Iteration  28: 15217072.784 ops/s
# Warmup Iteration  29: 15257991.901 ops/s
# Warmup Iteration  30: 15271575.760 ops/s
Iteration   1: 15178409.526 ops/s
Iteration   2: 15289401.847 ops/s
Iteration   3: 15220043.969 ops/s
Iteration   4: 15252343.139 ops/s
Iteration   5: 15324898.533 ops/s
Iteration   6: 15167095.714 ops/s
Iteration   7: 15294258.968 ops/s
Iteration   8: 15257360.031 ops/s
Iteration   9: 15215714.249 ops/s
Iteration  10: 15283059.336 ops/s
Iteration  11: 15259738.320 ops/s
Iteration  12: 14826477.652 ops/s
Iteration  13: 15280235.461 ops/s
Iteration  14: 15214272.211 ops/s
Iteration  15: 15195057.408 ops/s
Iteration  16: 15128658.575 ops/s
Iteration  17: 15236916.760 ops/s
Iteration  18: 15199850.320 ops/s
Iteration  19: 15065932.080 ops/s
Iteration  20: 15072605.928 ops/s
Iteration  21: 15075191.040 ops/s
Iteration  22: 14972422.140 ops/s
Iteration  23: 15125906.213 ops/s
Iteration  24: 15159894.189 ops/s
Iteration  25: 15181937.256 ops/s
Iteration  26: 15192688.444 ops/s
Iteration  27: 15102984.442 ops/s
Iteration  28: 15223480.223 ops/s
Iteration  29: 15233796.925 ops/s
Iteration  30: 15253278.927 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy":
  15182796.994 ±(99.9%) 69954.192 ops/s [Average]
  (min, avg, max) = (14826477.652, 15182796.994, 15324898.533), stdev = 104704.149
  CI (99.9%): [15112842.802, 15252751.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_maxBy  thrpt   30  15182796.994 ± 69954.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5715833.263 ops/s
# Warmup Iteration   2: 11615502.930 ops/s
# Warmup Iteration   3: 9905753.390 ops/s
# Warmup Iteration   4: 11659306.750 ops/s
# Warmup Iteration   5: 11612930.163 ops/s
# Warmup Iteration   6: 11620013.809 ops/s
# Warmup Iteration   7: 11639681.087 ops/s
# Warmup Iteration   8: 11693092.582 ops/s
# Warmup Iteration   9: 11705437.251 ops/s
# Warmup Iteration  10: 11683966.513 ops/s
# Warmup Iteration  11: 11600055.950 ops/s
# Warmup Iteration  12: 11645082.172 ops/s
# Warmup Iteration  13: 11731192.212 ops/s
# Warmup Iteration  14: 11658733.956 ops/s
# Warmup Iteration  15: 11702850.415 ops/s
# Warmup Iteration  16: 11661664.623 ops/s
# Warmup Iteration  17: 11671350.855 ops/s
# Warmup Iteration  18: 11617933.575 ops/s
# Warmup Iteration  19: 11674203.686 ops/s
# Warmup Iteration  20: 11664145.941 ops/s
# Warmup Iteration  21: 11645310.440 ops/s
# Warmup Iteration  22: 11676864.928 ops/s
# Warmup Iteration  23: 11678528.418 ops/s
# Warmup Iteration  24: 11680927.974 ops/s
# Warmup Iteration  25: 11580997.257 ops/s
# Warmup Iteration  26: 11661336.874 ops/s
# Warmup Iteration  27: 11645554.797 ops/s
# Warmup Iteration  28: 11662742.280 ops/s
# Warmup Iteration  29: 11720552.519 ops/s
# Warmup Iteration  30: 11634959.748 ops/s
Iteration   1: 11698006.139 ops/s
Iteration   2: 11669778.779 ops/s
Iteration   3: 11625964.927 ops/s
Iteration   4: 11705902.658 ops/s
Iteration   5: 11627355.112 ops/s
Iteration   6: 11712720.462 ops/s
Iteration   7: 11669284.834 ops/s
Iteration   8: 11725189.294 ops/s
Iteration   9: 11549058.873 ops/s
Iteration  10: 11665679.408 ops/s
Iteration  11: 11611865.830 ops/s
Iteration  12: 11619705.640 ops/s
Iteration  13: 11676240.863 ops/s
Iteration  14: 11652406.255 ops/s
Iteration  15: 11680663.065 ops/s
Iteration  16: 11610688.437 ops/s
Iteration  17: 11702678.543 ops/s
Iteration  18: 11701336.191 ops/s
Iteration  19: 11734910.348 ops/s
Iteration  20: 11684913.238 ops/s
Iteration  21: 11615336.904 ops/s
Iteration  22: 11530132.609 ops/s
Iteration  23: 11669234.144 ops/s
Iteration  24: 11645453.214 ops/s
Iteration  25: 11671800.625 ops/s
Iteration  26: 11713968.502 ops/s
Iteration  27: 11731676.786 ops/s
Iteration  28: 11729618.717 ops/s
Iteration  29: 11658707.414 ops/s
Iteration  30: 11703475.062 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxByOptional":
  11666458.429 ±(99.9%) 33986.560 ops/s [Average]
  (min, avg, max) = (11530132.609, 11666458.429, 11734910.348), stdev = 50869.487
  CI (99.9%): [11632471.869, 11700444.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_maxByOptional  thrpt   30  11666458.429 ± 33986.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14165863.198 ops/s
# Warmup Iteration   2: 29774943.687 ops/s
# Warmup Iteration   3: 25502342.339 ops/s
# Warmup Iteration   4: 30457378.657 ops/s
# Warmup Iteration   5: 30343350.606 ops/s
# Warmup Iteration   6: 30386755.718 ops/s
# Warmup Iteration   7: 30341833.784 ops/s
# Warmup Iteration   8: 30352469.403 ops/s
# Warmup Iteration   9: 30292994.641 ops/s
# Warmup Iteration  10: 30231215.360 ops/s
# Warmup Iteration  11: 30283561.438 ops/s
# Warmup Iteration  12: 30132168.997 ops/s
# Warmup Iteration  13: 30301221.979 ops/s
# Warmup Iteration  14: 30365811.951 ops/s
# Warmup Iteration  15: 30146257.918 ops/s
# Warmup Iteration  16: 30269055.377 ops/s
# Warmup Iteration  17: 30383903.348 ops/s
# Warmup Iteration  18: 30315653.251 ops/s
# Warmup Iteration  19: 30253275.746 ops/s
# Warmup Iteration  20: 30342587.491 ops/s
# Warmup Iteration  21: 30527026.812 ops/s
# Warmup Iteration  22: 30374472.570 ops/s
# Warmup Iteration  23: 30117284.266 ops/s
# Warmup Iteration  24: 30349989.306 ops/s
# Warmup Iteration  25: 30296027.606 ops/s
# Warmup Iteration  26: 30112438.586 ops/s
# Warmup Iteration  27: 30319001.790 ops/s
# Warmup Iteration  28: 30429588.106 ops/s
# Warmup Iteration  29: 30204078.668 ops/s
# Warmup Iteration  30: 30401081.323 ops/s
Iteration   1: 30410725.700 ops/s
Iteration   2: 30362127.828 ops/s
Iteration   3: 30265982.787 ops/s
Iteration   4: 30169882.364 ops/s
Iteration   5: 30442421.443 ops/s
Iteration   6: 30291331.857 ops/s
Iteration   7: 30548756.520 ops/s
Iteration   8: 30333377.836 ops/s
Iteration   9: 30449088.388 ops/s
Iteration  10: 30448532.143 ops/s
Iteration  11: 30259881.305 ops/s
Iteration  12: 30539617.994 ops/s
Iteration  13: 30434306.251 ops/s
Iteration  14: 30326120.543 ops/s
Iteration  15: 30375874.797 ops/s
Iteration  16: 30439074.177 ops/s
Iteration  17: 30373159.078 ops/s
Iteration  18: 30052146.513 ops/s
Iteration  19: 30193891.391 ops/s
Iteration  20: 30391913.644 ops/s
Iteration  21: 30367308.646 ops/s
Iteration  22: 30353340.160 ops/s
Iteration  23: 30358530.048 ops/s
Iteration  24: 30237604.342 ops/s
Iteration  25: 30578209.853 ops/s
Iteration  26: 30387322.277 ops/s
Iteration  27: 30245922.082 ops/s
Iteration  28: 30345893.698 ops/s
Iteration  29: 30400763.080 ops/s
Iteration  30: 30361832.577 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxBy_null_throws":
  30358164.644 ±(99.9%) 75304.746 ops/s [Average]
  (min, avg, max) = (30052146.513, 30358164.644, 30578209.853), stdev = 112712.607
  CI (99.9%): [30282859.898, 30433469.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  30358164.644 ± 75304.746  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2165602.723 ops/s
# Warmup Iteration   2: 4774276.088 ops/s
# Warmup Iteration   3: 4830089.430 ops/s
# Warmup Iteration   4: 4230966.609 ops/s
# Warmup Iteration   5: 4640726.508 ops/s
# Warmup Iteration   6: 4846234.371 ops/s
# Warmup Iteration   7: 4845717.581 ops/s
# Warmup Iteration   8: 4851277.089 ops/s
# Warmup Iteration   9: 4850035.997 ops/s
# Warmup Iteration  10: 4824807.920 ops/s
# Warmup Iteration  11: 4842511.801 ops/s
# Warmup Iteration  12: 4848479.813 ops/s
# Warmup Iteration  13: 4823723.066 ops/s
# Warmup Iteration  14: 4850639.993 ops/s
# Warmup Iteration  15: 4859966.694 ops/s
# Warmup Iteration  16: 4853604.870 ops/s
# Warmup Iteration  17: 4849529.330 ops/s
# Warmup Iteration  18: 4851925.521 ops/s
# Warmup Iteration  19: 4856814.687 ops/s
# Warmup Iteration  20: 4860529.095 ops/s
# Warmup Iteration  21: 4860646.923 ops/s
# Warmup Iteration  22: 4847086.216 ops/s
# Warmup Iteration  23: 4865825.047 ops/s
# Warmup Iteration  24: 4837094.630 ops/s
# Warmup Iteration  25: 4852768.754 ops/s
# Warmup Iteration  26: 4817865.261 ops/s
# Warmup Iteration  27: 4864136.215 ops/s
# Warmup Iteration  28: 4863962.338 ops/s
# Warmup Iteration  29: 4835775.992 ops/s
# Warmup Iteration  30: 4837000.729 ops/s
Iteration   1: 4849225.966 ops/s
Iteration   2: 4871292.484 ops/s
Iteration   3: 4822618.432 ops/s
Iteration   4: 4830744.876 ops/s
Iteration   5: 4860622.749 ops/s
Iteration   6: 4864404.409 ops/s
Iteration   7: 4854679.121 ops/s
Iteration   8: 4868210.044 ops/s
Iteration   9: 4889319.567 ops/s
Iteration  10: 4868670.401 ops/s
Iteration  11: 4845544.934 ops/s
Iteration  12: 4879271.613 ops/s
Iteration  13: 4844447.652 ops/s
Iteration  14: 4828757.381 ops/s
Iteration  15: 4800943.949 ops/s
Iteration  16: 4824370.027 ops/s
Iteration  17: 4807992.906 ops/s
Iteration  18: 4760677.034 ops/s
Iteration  19: 4800557.617 ops/s
Iteration  20: 4810660.579 ops/s
Iteration  21: 4805609.215 ops/s
Iteration  22: 4845151.830 ops/s
Iteration  23: 4868569.505 ops/s
Iteration  24: 4848725.597 ops/s
Iteration  25: 4843010.575 ops/s
Iteration  26: 4859306.130 ops/s
Iteration  27: 4854962.608 ops/s
Iteration  28: 4875184.299 ops/s
Iteration  29: 4861923.432 ops/s
Iteration  30: 4868773.331 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_maxOptional":
  4843807.609 ±(99.9%) 19529.753 ops/s [Average]
  (min, avg, max) = (4760677.034, 4843807.609, 4889319.567), stdev = 29231.217
  CI (99.9%): [4824277.856, 4863337.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_maxOptional  thrpt   30  4843807.609 ± 19529.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697852.252 ops/s
# Warmup Iteration   2: 726617.264 ops/s
# Warmup Iteration   3: 855806.468 ops/s
# Warmup Iteration   4: 910846.619 ops/s
# Warmup Iteration   5: 908435.338 ops/s
# Warmup Iteration   6: 910484.298 ops/s
# Warmup Iteration   7: 911742.691 ops/s
# Warmup Iteration   8: 911913.833 ops/s
# Warmup Iteration   9: 908445.010 ops/s
# Warmup Iteration  10: 914515.171 ops/s
# Warmup Iteration  11: 917022.586 ops/s
# Warmup Iteration  12: 909447.098 ops/s
# Warmup Iteration  13: 914379.453 ops/s
# Warmup Iteration  14: 764961.625 ops/s
# Warmup Iteration  15: 911866.293 ops/s
# Warmup Iteration  16: 909587.248 ops/s
# Warmup Iteration  17: 966226.818 ops/s
# Warmup Iteration  18: 966460.589 ops/s
# Warmup Iteration  19: 968362.269 ops/s
# Warmup Iteration  20: 969299.021 ops/s
# Warmup Iteration  21: 962811.295 ops/s
# Warmup Iteration  22: 964045.890 ops/s
# Warmup Iteration  23: 953727.959 ops/s
# Warmup Iteration  24: 958293.604 ops/s
# Warmup Iteration  25: 957102.201 ops/s
# Warmup Iteration  26: 957099.110 ops/s
# Warmup Iteration  27: 963219.637 ops/s
# Warmup Iteration  28: 962913.454 ops/s
# Warmup Iteration  29: 966369.195 ops/s
# Warmup Iteration  30: 967569.482 ops/s
Iteration   1: 965866.302 ops/s
Iteration   2: 970199.814 ops/s
Iteration   3: 968970.876 ops/s
Iteration   4: 969408.704 ops/s
Iteration   5: 968086.710 ops/s
Iteration   6: 963261.480 ops/s
Iteration   7: 959946.856 ops/s
Iteration   8: 964155.267 ops/s
Iteration   9: 964602.904 ops/s
Iteration  10: 964165.042 ops/s
Iteration  11: 965014.268 ops/s
Iteration  12: 967201.070 ops/s
Iteration  13: 963276.289 ops/s
Iteration  14: 964689.099 ops/s
Iteration  15: 965285.221 ops/s
Iteration  16: 962171.495 ops/s
Iteration  17: 964530.169 ops/s
Iteration  18: 964278.161 ops/s
Iteration  19: 961483.479 ops/s
Iteration  20: 970293.891 ops/s
Iteration  21: 961274.311 ops/s
Iteration  22: 969411.675 ops/s
Iteration  23: 969721.841 ops/s
Iteration  24: 963497.887 ops/s
Iteration  25: 970068.502 ops/s
Iteration  26: 962228.770 ops/s
Iteration  27: 960445.310 ops/s
Iteration  28: 967872.568 ops/s
Iteration  29: 962587.241 ops/s
Iteration  30: 970336.368 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_empty_throws":
  965477.719 ±(99.9%) 2175.527 ops/s [Average]
  (min, avg, max) = (959946.856, 965477.719, 970336.368), stdev = 3256.226
  CI (99.9%): [963302.192, 967653.246] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_max_empty_throws  thrpt   30  965477.719 ± 2175.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3086488.568 ops/s
# Warmup Iteration   2: 4801563.634 ops/s
# Warmup Iteration   3: 5516590.183 ops/s
# Warmup Iteration   4: 5549202.289 ops/s
# Warmup Iteration   5: 5539008.222 ops/s
# Warmup Iteration   6: 5094555.882 ops/s
# Warmup Iteration   7: 5028460.825 ops/s
# Warmup Iteration   8: 5553482.349 ops/s
# Warmup Iteration   9: 5538775.833 ops/s
# Warmup Iteration  10: 5557953.915 ops/s
# Warmup Iteration  11: 5557918.856 ops/s
# Warmup Iteration  12: 5554875.686 ops/s
# Warmup Iteration  13: 5563890.747 ops/s
# Warmup Iteration  14: 5567232.496 ops/s
# Warmup Iteration  15: 5567382.490 ops/s
# Warmup Iteration  16: 5566613.229 ops/s
# Warmup Iteration  17: 5580010.034 ops/s
# Warmup Iteration  18: 5572443.015 ops/s
# Warmup Iteration  19: 5563560.369 ops/s
# Warmup Iteration  20: 5563988.628 ops/s
# Warmup Iteration  21: 5569172.131 ops/s
# Warmup Iteration  22: 5569662.678 ops/s
# Warmup Iteration  23: 5561819.634 ops/s
# Warmup Iteration  24: 5568153.098 ops/s
# Warmup Iteration  25: 5578315.294 ops/s
# Warmup Iteration  26: 5574778.248 ops/s
# Warmup Iteration  27: 5560118.025 ops/s
# Warmup Iteration  28: 5550777.785 ops/s
# Warmup Iteration  29: 5565809.932 ops/s
# Warmup Iteration  30: 5562115.154 ops/s
Iteration   1: 5586731.920 ops/s
Iteration   2: 5563185.066 ops/s
Iteration   3: 5564154.790 ops/s
Iteration   4: 5564345.542 ops/s
Iteration   5: 5572540.721 ops/s
Iteration   6: 5565949.710 ops/s
Iteration   7: 5567579.887 ops/s
Iteration   8: 5598301.261 ops/s
Iteration   9: 5571287.064 ops/s
Iteration  10: 5597729.950 ops/s
Iteration  11: 5578027.903 ops/s
Iteration  12: 5556875.978 ops/s
Iteration  13: 5547144.016 ops/s
Iteration  14: 5576917.707 ops/s
Iteration  15: 5559967.747 ops/s
Iteration  16: 5586736.044 ops/s
Iteration  17: 5546379.690 ops/s
Iteration  18: 5560381.590 ops/s
Iteration  19: 5556433.724 ops/s
Iteration  20: 5588915.056 ops/s
Iteration  21: 5597584.491 ops/s
Iteration  22: 5557138.778 ops/s
Iteration  23: 5602909.218 ops/s
Iteration  24: 5590083.848 ops/s
Iteration  25: 5564186.903 ops/s
Iteration  26: 5574003.734 ops/s
Iteration  27: 5564330.228 ops/s
Iteration  28: 5543595.815 ops/s
Iteration  29: 5575412.223 ops/s
Iteration  30: 5589705.596 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_safe":
  5572284.540 ±(99.9%) 10975.152 ops/s [Average]
  (min, avg, max) = (5543595.815, 5572284.540, 5602909.218), stdev = 16427.092
  CI (99.9%): [5561309.388, 5583259.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_max_null_safe  thrpt   30  5572284.540 ± 10975.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3145861.335 ops/s
# Warmup Iteration   2: 4074749.757 ops/s
# Warmup Iteration   3: 5160465.694 ops/s
# Warmup Iteration   4: 5131582.304 ops/s
# Warmup Iteration   5: 5150522.765 ops/s
# Warmup Iteration   6: 5160566.103 ops/s
# Warmup Iteration   7: 5127880.256 ops/s
# Warmup Iteration   8: 4785560.357 ops/s
# Warmup Iteration   9: 4603478.227 ops/s
# Warmup Iteration  10: 5162245.460 ops/s
# Warmup Iteration  11: 5178791.747 ops/s
# Warmup Iteration  12: 5169541.150 ops/s
# Warmup Iteration  13: 5185452.767 ops/s
# Warmup Iteration  14: 5173801.324 ops/s
# Warmup Iteration  15: 5162095.622 ops/s
# Warmup Iteration  16: 5175578.205 ops/s
# Warmup Iteration  17: 5171251.222 ops/s
# Warmup Iteration  18: 5169286.161 ops/s
# Warmup Iteration  19: 5188782.633 ops/s
# Warmup Iteration  20: 5172639.290 ops/s
# Warmup Iteration  21: 5159118.894 ops/s
# Warmup Iteration  22: 5164460.294 ops/s
# Warmup Iteration  23: 5153335.038 ops/s
# Warmup Iteration  24: 5162671.751 ops/s
# Warmup Iteration  25: 5171576.387 ops/s
# Warmup Iteration  26: 5170697.527 ops/s
# Warmup Iteration  27: 5160949.104 ops/s
# Warmup Iteration  28: 5185914.097 ops/s
# Warmup Iteration  29: 5172312.377 ops/s
# Warmup Iteration  30: 5160379.904 ops/s
Iteration   1: 5154907.438 ops/s
Iteration   2: 5176908.176 ops/s
Iteration   3: 5144048.958 ops/s
Iteration   4: 5154288.640 ops/s
Iteration   5: 5189914.294 ops/s
Iteration   6: 5157708.665 ops/s
Iteration   7: 5150573.825 ops/s
Iteration   8: 5189194.908 ops/s
Iteration   9: 5178420.150 ops/s
Iteration  10: 5157114.711 ops/s
Iteration  11: 5151682.200 ops/s
Iteration  12: 5148632.360 ops/s
Iteration  13: 5154771.261 ops/s
Iteration  14: 5147154.283 ops/s
Iteration  15: 5147707.431 ops/s
Iteration  16: 5175464.681 ops/s
Iteration  17: 5169428.133 ops/s
Iteration  18: 5146112.893 ops/s
Iteration  19: 5186975.751 ops/s
Iteration  20: 5169770.712 ops/s
Iteration  21: 5161032.100 ops/s
Iteration  22: 5154363.597 ops/s
Iteration  23: 5195630.200 ops/s
Iteration  24: 5171665.875 ops/s
Iteration  25: 5173369.743 ops/s
Iteration  26: 5144678.573 ops/s
Iteration  27: 5170831.959 ops/s
Iteration  28: 5169609.084 ops/s
Iteration  29: 5159239.147 ops/s
Iteration  30: 5142491.233 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws":
  5163123.033 ±(99.9%) 10192.921 ops/s [Average]
  (min, avg, max) = (5142491.233, 5163123.033, 5195630.200), stdev = 15256.286
  CI (99.9%): [5152930.111, 5173315.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_max_null_throws  thrpt   30  5163123.033 ± 10192.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553446.415 ops/s
# Warmup Iteration   2: 577228.342 ops/s
# Warmup Iteration   3: 641188.575 ops/s
# Warmup Iteration   4: 729689.966 ops/s
# Warmup Iteration   5: 726295.632 ops/s
# Warmup Iteration   6: 726313.722 ops/s
# Warmup Iteration   7: 721292.773 ops/s
# Warmup Iteration   8: 725260.987 ops/s
# Warmup Iteration   9: 729088.440 ops/s
# Warmup Iteration  10: 727539.465 ops/s
# Warmup Iteration  11: 728435.822 ops/s
# Warmup Iteration  12: 733300.059 ops/s
# Warmup Iteration  13: 729852.535 ops/s
# Warmup Iteration  14: 729807.949 ops/s
# Warmup Iteration  15: 682722.351 ops/s
# Warmup Iteration  16: 644110.088 ops/s
# Warmup Iteration  17: 760422.438 ops/s
# Warmup Iteration  18: 761512.959 ops/s
# Warmup Iteration  19: 762063.222 ops/s
# Warmup Iteration  20: 763529.467 ops/s
# Warmup Iteration  21: 760939.870 ops/s
# Warmup Iteration  22: 757949.259 ops/s
# Warmup Iteration  23: 760465.344 ops/s
# Warmup Iteration  24: 760054.605 ops/s
# Warmup Iteration  25: 759607.923 ops/s
# Warmup Iteration  26: 762614.911 ops/s
# Warmup Iteration  27: 760878.142 ops/s
# Warmup Iteration  28: 761702.231 ops/s
# Warmup Iteration  29: 762411.563 ops/s
# Warmup Iteration  30: 764316.066 ops/s
Iteration   1: 762195.558 ops/s
Iteration   2: 764747.159 ops/s
Iteration   3: 758462.110 ops/s
Iteration   4: 763940.356 ops/s
Iteration   5: 761758.754 ops/s
Iteration   6: 766831.690 ops/s
Iteration   7: 765937.132 ops/s
Iteration   8: 762633.856 ops/s
Iteration   9: 763256.544 ops/s
Iteration  10: 764041.016 ops/s
Iteration  11: 762173.492 ops/s
Iteration  12: 759471.498 ops/s
Iteration  13: 751537.467 ops/s
Iteration  14: 757093.109 ops/s
Iteration  15: 758441.488 ops/s
Iteration  16: 758440.292 ops/s
Iteration  17: 761641.886 ops/s
Iteration  18: 762142.696 ops/s
Iteration  19: 762459.705 ops/s
Iteration  20: 765744.360 ops/s
Iteration  21: 761617.472 ops/s
Iteration  22: 764041.378 ops/s
Iteration  23: 762465.380 ops/s
Iteration  24: 762289.122 ops/s
Iteration  25: 763994.275 ops/s
Iteration  26: 764210.199 ops/s
Iteration  27: 761461.035 ops/s
Iteration  28: 764072.610 ops/s
Iteration  29: 762811.795 ops/s
Iteration  30: 765196.510 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator":
  762170.331 ±(99.9%) 2063.616 ops/s [Average]
  (min, avg, max) = (751537.467, 762170.331, 766831.690), stdev = 3088.724
  CI (99.9%): [760106.715, 764233.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  762170.331 ± 2063.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4885853.652 ops/s
# Warmup Iteration   2: 9615800.033 ops/s
# Warmup Iteration   3: 10105730.802 ops/s
# Warmup Iteration   4: 10161547.361 ops/s
# Warmup Iteration   5: 8508566.432 ops/s
# Warmup Iteration   6: 10089305.424 ops/s
# Warmup Iteration   7: 10199029.888 ops/s
# Warmup Iteration   8: 10203895.167 ops/s
# Warmup Iteration   9: 10184930.473 ops/s
# Warmup Iteration  10: 10230558.585 ops/s
# Warmup Iteration  11: 10175001.406 ops/s
# Warmup Iteration  12: 10208872.256 ops/s
# Warmup Iteration  13: 10192623.022 ops/s
# Warmup Iteration  14: 10226292.834 ops/s
# Warmup Iteration  15: 10204795.709 ops/s
# Warmup Iteration  16: 10201031.961 ops/s
# Warmup Iteration  17: 10209780.647 ops/s
# Warmup Iteration  18: 10197608.776 ops/s
# Warmup Iteration  19: 10213284.074 ops/s
# Warmup Iteration  20: 10175641.259 ops/s
# Warmup Iteration  21: 10174033.266 ops/s
# Warmup Iteration  22: 10134644.860 ops/s
# Warmup Iteration  23: 10142528.957 ops/s
# Warmup Iteration  24: 10200554.322 ops/s
# Warmup Iteration  25: 10184245.465 ops/s
# Warmup Iteration  26: 10191689.454 ops/s
# Warmup Iteration  27: 10209909.969 ops/s
# Warmup Iteration  28: 10226729.591 ops/s
# Warmup Iteration  29: 10207247.412 ops/s
# Warmup Iteration  30: 10192467.439 ops/s
Iteration   1: 10176563.024 ops/s
Iteration   2: 10226827.633 ops/s
Iteration   3: 10186993.904 ops/s
Iteration   4: 10182766.500 ops/s
Iteration   5: 10148900.654 ops/s
Iteration   6: 10219004.901 ops/s
Iteration   7: 10135762.807 ops/s
Iteration   8: 10198534.643 ops/s
Iteration   9: 10174282.835 ops/s
Iteration  10: 10175703.901 ops/s
Iteration  11: 10195241.727 ops/s
Iteration  12: 10164284.896 ops/s
Iteration  13: 10138946.592 ops/s
Iteration  14: 10154879.124 ops/s
Iteration  15: 10142978.055 ops/s
Iteration  16: 10178960.708 ops/s
Iteration  17: 10216584.170 ops/s
Iteration  18: 10220319.848 ops/s
Iteration  19: 10203085.123 ops/s
Iteration  20: 10206846.837 ops/s
Iteration  21: 10154131.539 ops/s
Iteration  22: 10204848.700 ops/s
Iteration  23: 10216577.212 ops/s
Iteration  24: 10229631.034 ops/s
Iteration  25: 10137669.463 ops/s
Iteration  26: 10248145.733 ops/s
Iteration  27: 10191586.321 ops/s
Iteration  28: 10190750.286 ops/s
Iteration  29: 10174724.945 ops/s
Iteration  30: 10169808.704 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_max_without_comparator":
  10185511.394 ±(99.9%) 20188.872 ops/s [Average]
  (min, avg, max) = (10135762.807, 10185511.394, 10248145.733), stdev = 30217.756
  CI (99.9%): [10165322.522, 10205700.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_max_without_comparator  thrpt   30  10185511.394 ± 20188.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5131233.505 ops/s
# Warmup Iteration   2: 10712014.334 ops/s
# Warmup Iteration   3: 11092206.370 ops/s
# Warmup Iteration   4: 10614643.269 ops/s
# Warmup Iteration   5: 9815678.552 ops/s
# Warmup Iteration   6: 11116055.186 ops/s
# Warmup Iteration   7: 11117002.056 ops/s
# Warmup Iteration   8: 11102044.569 ops/s
# Warmup Iteration   9: 11103418.290 ops/s
# Warmup Iteration  10: 11133874.893 ops/s
# Warmup Iteration  11: 11113124.743 ops/s
# Warmup Iteration  12: 11104508.538 ops/s
# Warmup Iteration  13: 11105551.720 ops/s
# Warmup Iteration  14: 11140851.852 ops/s
# Warmup Iteration  15: 11092237.109 ops/s
# Warmup Iteration  16: 11112333.478 ops/s
# Warmup Iteration  17: 11155404.969 ops/s
# Warmup Iteration  18: 11079411.399 ops/s
# Warmup Iteration  19: 11096439.835 ops/s
# Warmup Iteration  20: 11048461.746 ops/s
# Warmup Iteration  21: 11112530.856 ops/s
# Warmup Iteration  22: 11153445.731 ops/s
# Warmup Iteration  23: 11128944.705 ops/s
# Warmup Iteration  24: 11113730.739 ops/s
# Warmup Iteration  25: 11128205.250 ops/s
# Warmup Iteration  26: 11113210.416 ops/s
# Warmup Iteration  27: 11099814.213 ops/s
# Warmup Iteration  28: 11143748.589 ops/s
# Warmup Iteration  29: 11106004.967 ops/s
# Warmup Iteration  30: 11118184.495 ops/s
Iteration   1: 11122618.186 ops/s
Iteration   2: 11160160.030 ops/s
Iteration   3: 11104205.373 ops/s
Iteration   4: 11157937.918 ops/s
Iteration   5: 11097554.392 ops/s
Iteration   6: 11143479.345 ops/s
Iteration   7: 11095923.515 ops/s
Iteration   8: 11121188.350 ops/s
Iteration   9: 11076303.080 ops/s
Iteration  10: 11102342.010 ops/s
Iteration  11: 11069377.232 ops/s
Iteration  12: 11150676.012 ops/s
Iteration  13: 11051509.628 ops/s
Iteration  14: 11098602.068 ops/s
Iteration  15: 11152741.826 ops/s
Iteration  16: 11149780.237 ops/s
Iteration  17: 11167175.262 ops/s
Iteration  18: 11087875.522 ops/s
Iteration  19: 11095748.109 ops/s
Iteration  20: 11124868.016 ops/s
Iteration  21: 11137047.845 ops/s
Iteration  22: 11102221.156 ops/s
Iteration  23: 11071939.792 ops/s
Iteration  24: 11100055.258 ops/s
Iteration  25: 11116435.767 ops/s
Iteration  26: 11133442.242 ops/s
Iteration  27: 11087213.227 ops/s
Iteration  28: 11143811.159 ops/s
Iteration  29: 11107217.938 ops/s
Iteration  30: 11118886.483 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min":
  11114944.566 ±(99.9%) 20079.480 ops/s [Average]
  (min, avg, max) = (11051509.628, 11114944.566, 11167175.262), stdev = 30054.023
  CI (99.9%): [11094865.086, 11135024.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_min  thrpt   30  11114944.566 ± 20079.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10801626.739 ops/s
# Warmup Iteration   2: 22012415.413 ops/s
# Warmup Iteration   3: 18703316.984 ops/s
# Warmup Iteration   4: 22246175.083 ops/s
# Warmup Iteration   5: 21985659.712 ops/s
# Warmup Iteration   6: 22040211.593 ops/s
# Warmup Iteration   7: 22117369.999 ops/s
# Warmup Iteration   8: 22106923.976 ops/s
# Warmup Iteration   9: 22105254.419 ops/s
# Warmup Iteration  10: 22247679.802 ops/s
# Warmup Iteration  11: 22220650.712 ops/s
# Warmup Iteration  12: 22126126.143 ops/s
# Warmup Iteration  13: 22165775.757 ops/s
# Warmup Iteration  14: 22017363.544 ops/s
# Warmup Iteration  15: 22256624.668 ops/s
# Warmup Iteration  16: 22175233.740 ops/s
# Warmup Iteration  17: 22263964.658 ops/s
# Warmup Iteration  18: 22164643.406 ops/s
# Warmup Iteration  19: 22181532.133 ops/s
# Warmup Iteration  20: 22177852.952 ops/s
# Warmup Iteration  21: 21929435.958 ops/s
# Warmup Iteration  22: 22110750.963 ops/s
# Warmup Iteration  23: 22219992.889 ops/s
# Warmup Iteration  24: 22037383.582 ops/s
# Warmup Iteration  25: 22198931.824 ops/s
# Warmup Iteration  26: 22189280.236 ops/s
# Warmup Iteration  27: 22191918.629 ops/s
# Warmup Iteration  28: 22241826.005 ops/s
# Warmup Iteration  29: 22194959.475 ops/s
# Warmup Iteration  30: 22125380.630 ops/s
Iteration   1: 22264777.350 ops/s
Iteration   2: 22086240.826 ops/s
Iteration   3: 22199152.760 ops/s
Iteration   4: 22224257.819 ops/s
Iteration   5: 21830783.801 ops/s
Iteration   6: 22176296.846 ops/s
Iteration   7: 22241067.752 ops/s
Iteration   8: 22180548.545 ops/s
Iteration   9: 21993556.166 ops/s
Iteration  10: 21982632.919 ops/s
Iteration  11: 22154656.794 ops/s
Iteration  12: 22156975.996 ops/s
Iteration  13: 22028148.701 ops/s
Iteration  14: 22054242.562 ops/s
Iteration  15: 22078474.405 ops/s
Iteration  16: 22077910.810 ops/s
Iteration  17: 22109894.991 ops/s
Iteration  18: 22186238.765 ops/s
Iteration  19: 22048067.150 ops/s
Iteration  20: 22100239.237 ops/s
Iteration  21: 22052786.971 ops/s
Iteration  22: 22131419.593 ops/s
Iteration  23: 22079697.520 ops/s
Iteration  24: 22183866.189 ops/s
Iteration  25: 22195394.378 ops/s
Iteration  26: 22184633.897 ops/s
Iteration  27: 22131393.126 ops/s
Iteration  28: 22085647.763 ops/s
Iteration  29: 22109143.397 ops/s
Iteration  30: 22047548.432 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy":
  22112523.182 ±(99.9%) 59928.103 ops/s [Average]
  (min, avg, max) = (21830783.801, 22112523.182, 22264777.350), stdev = 89697.570
  CI (99.9%): [22052595.079, 22172451.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_minBy  thrpt   30  22112523.182 ± 59928.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6890500.811 ops/s
# Warmup Iteration   2: 13533518.274 ops/s
# Warmup Iteration   3: 11932249.155 ops/s
# Warmup Iteration   4: 14059778.287 ops/s
# Warmup Iteration   5: 14042268.138 ops/s
# Warmup Iteration   6: 13840045.009 ops/s
# Warmup Iteration   7: 14022558.104 ops/s
# Warmup Iteration   8: 13965056.317 ops/s
# Warmup Iteration   9: 14090262.114 ops/s
# Warmup Iteration  10: 14121624.041 ops/s
# Warmup Iteration  11: 14054088.914 ops/s
# Warmup Iteration  12: 14105883.557 ops/s
# Warmup Iteration  13: 14096840.763 ops/s
# Warmup Iteration  14: 14055246.598 ops/s
# Warmup Iteration  15: 13969024.252 ops/s
# Warmup Iteration  16: 13923517.542 ops/s
# Warmup Iteration  17: 14068782.297 ops/s
# Warmup Iteration  18: 14117694.724 ops/s
# Warmup Iteration  19: 14035607.828 ops/s
# Warmup Iteration  20: 14060438.921 ops/s
# Warmup Iteration  21: 14063949.917 ops/s
# Warmup Iteration  22: 14053715.774 ops/s
# Warmup Iteration  23: 14126560.908 ops/s
# Warmup Iteration  24: 14056273.595 ops/s
# Warmup Iteration  25: 14076889.224 ops/s
# Warmup Iteration  26: 14128531.506 ops/s
# Warmup Iteration  27: 14100944.356 ops/s
# Warmup Iteration  28: 14081532.823 ops/s
# Warmup Iteration  29: 14035155.606 ops/s
# Warmup Iteration  30: 14082926.093 ops/s
Iteration   1: 13989836.701 ops/s
Iteration   2: 14116384.961 ops/s
Iteration   3: 14127352.504 ops/s
Iteration   4: 14085775.535 ops/s
Iteration   5: 14113153.571 ops/s
Iteration   6: 14102849.333 ops/s
Iteration   7: 14103376.675 ops/s
Iteration   8: 13863378.720 ops/s
Iteration   9: 14158704.497 ops/s
Iteration  10: 13916644.755 ops/s
Iteration  11: 13886662.724 ops/s
Iteration  12: 14003763.442 ops/s
Iteration  13: 14150627.674 ops/s
Iteration  14: 14061057.145 ops/s
Iteration  15: 13988361.245 ops/s
Iteration  16: 13974491.628 ops/s
Iteration  17: 14082344.017 ops/s
Iteration  18: 14058275.276 ops/s
Iteration  19: 14123744.032 ops/s
Iteration  20: 14067588.840 ops/s
Iteration  21: 14106085.839 ops/s
Iteration  22: 14105856.751 ops/s
Iteration  23: 14107660.044 ops/s
Iteration  24: 14155032.903 ops/s
Iteration  25: 14092510.873 ops/s
Iteration  26: 14035496.257 ops/s
Iteration  27: 14095241.418 ops/s
Iteration  28: 14080639.265 ops/s
Iteration  29: 14082298.192 ops/s
Iteration  30: 14095234.773 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minByOptional":
  14064347.653 ±(99.9%) 50747.961 ops/s [Average]
  (min, avg, max) = (13863378.720, 14064347.653, 14158704.497), stdev = 75957.165
  CI (99.9%): [14013599.692, 14115095.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_minByOptional  thrpt   30  14064347.653 ± 50747.961  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14995413.870 ops/s
# Warmup Iteration   2: 30481131.044 ops/s
# Warmup Iteration   3: 26041465.050 ops/s
# Warmup Iteration   4: 30530078.088 ops/s
# Warmup Iteration   5: 30774948.454 ops/s
# Warmup Iteration   6: 30944498.889 ops/s
# Warmup Iteration   7: 30863890.178 ops/s
# Warmup Iteration   8: 30779030.185 ops/s
# Warmup Iteration   9: 30881730.670 ops/s
# Warmup Iteration  10: 30939665.542 ops/s
# Warmup Iteration  11: 30891764.203 ops/s
# Warmup Iteration  12: 30868903.593 ops/s
# Warmup Iteration  13: 30831259.488 ops/s
# Warmup Iteration  14: 31013170.349 ops/s
# Warmup Iteration  15: 30957585.241 ops/s
# Warmup Iteration  16: 31024942.050 ops/s
# Warmup Iteration  17: 30759357.762 ops/s
# Warmup Iteration  18: 30851570.720 ops/s
# Warmup Iteration  19: 30865720.593 ops/s
# Warmup Iteration  20: 30604377.209 ops/s
# Warmup Iteration  21: 30944157.256 ops/s
# Warmup Iteration  22: 30845624.635 ops/s
# Warmup Iteration  23: 30957182.852 ops/s
# Warmup Iteration  24: 30798653.621 ops/s
# Warmup Iteration  25: 30812408.331 ops/s
# Warmup Iteration  26: 30809061.947 ops/s
# Warmup Iteration  27: 30868121.691 ops/s
# Warmup Iteration  28: 30997551.206 ops/s
# Warmup Iteration  29: 30985575.513 ops/s
# Warmup Iteration  30: 30807335.781 ops/s
Iteration   1: 30862672.722 ops/s
Iteration   2: 31012021.864 ops/s
Iteration   3: 31019153.487 ops/s
Iteration   4: 30817937.956 ops/s
Iteration   5: 30883872.988 ops/s
Iteration   6: 30813031.527 ops/s
Iteration   7: 30671771.655 ops/s
Iteration   8: 30357539.254 ops/s
Iteration   9: 30775850.833 ops/s
Iteration  10: 30878482.861 ops/s
Iteration  11: 30919112.032 ops/s
Iteration  12: 30808250.792 ops/s
Iteration  13: 30889015.943 ops/s
Iteration  14: 30959864.839 ops/s
Iteration  15: 30772859.570 ops/s
Iteration  16: 30839268.388 ops/s
Iteration  17: 30911312.458 ops/s
Iteration  18: 30778140.675 ops/s
Iteration  19: 30777814.970 ops/s
Iteration  20: 30762816.630 ops/s
Iteration  21: 30989376.002 ops/s
Iteration  22: 30881652.006 ops/s
Iteration  23: 30798949.718 ops/s
Iteration  24: 30747806.798 ops/s
Iteration  25: 30809048.088 ops/s
Iteration  26: 30693634.387 ops/s
Iteration  27: 30852327.822 ops/s
Iteration  28: 30667782.927 ops/s
Iteration  29: 30859163.341 ops/s
Iteration  30: 30660742.717 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minBy_null_throws":
  30815709.175 ±(99.9%) 86000.772 ops/s [Average]
  (min, avg, max) = (30357539.254, 30815709.175, 31019153.487), stdev = 128721.917
  CI (99.9%): [30729708.402, 30901709.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  30815709.175 ± 86000.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2181439.627 ops/s
# Warmup Iteration   2: 4896609.897 ops/s
# Warmup Iteration   3: 4952791.911 ops/s
# Warmup Iteration   4: 4121536.772 ops/s
# Warmup Iteration   5: 4954798.916 ops/s
# Warmup Iteration   6: 4990807.973 ops/s
# Warmup Iteration   7: 4985137.027 ops/s
# Warmup Iteration   8: 4964023.532 ops/s
# Warmup Iteration   9: 4980369.512 ops/s
# Warmup Iteration  10: 4967467.077 ops/s
# Warmup Iteration  11: 4976423.445 ops/s
# Warmup Iteration  12: 4952937.696 ops/s
# Warmup Iteration  13: 4972749.874 ops/s
# Warmup Iteration  14: 4990340.823 ops/s
# Warmup Iteration  15: 4975754.999 ops/s
# Warmup Iteration  16: 4950088.814 ops/s
# Warmup Iteration  17: 4955002.002 ops/s
# Warmup Iteration  18: 4953886.780 ops/s
# Warmup Iteration  19: 4961725.845 ops/s
# Warmup Iteration  20: 4944637.787 ops/s
# Warmup Iteration  21: 4985167.506 ops/s
# Warmup Iteration  22: 4981383.160 ops/s
# Warmup Iteration  23: 4971808.645 ops/s
# Warmup Iteration  24: 4978360.148 ops/s
# Warmup Iteration  25: 4982365.346 ops/s
# Warmup Iteration  26: 4963979.749 ops/s
# Warmup Iteration  27: 4989522.328 ops/s
# Warmup Iteration  28: 4976851.272 ops/s
# Warmup Iteration  29: 4976580.405 ops/s
# Warmup Iteration  30: 4983913.330 ops/s
Iteration   1: 4975525.466 ops/s
Iteration   2: 4972188.397 ops/s
Iteration   3: 4977308.841 ops/s
Iteration   4: 4996290.195 ops/s
Iteration   5: 4968624.122 ops/s
Iteration   6: 4987211.876 ops/s
Iteration   7: 5005872.067 ops/s
Iteration   8: 4937772.290 ops/s
Iteration   9: 4954689.257 ops/s
Iteration  10: 4953254.261 ops/s
Iteration  11: 4969203.884 ops/s
Iteration  12: 4990026.768 ops/s
Iteration  13: 4971482.700 ops/s
Iteration  14: 4988142.443 ops/s
Iteration  15: 5010173.924 ops/s
Iteration  16: 4970975.087 ops/s
Iteration  17: 5001330.559 ops/s
Iteration  18: 4982470.831 ops/s
Iteration  19: 4963161.214 ops/s
Iteration  20: 4956010.026 ops/s
Iteration  21: 4964480.796 ops/s
Iteration  22: 4980164.962 ops/s
Iteration  23: 4984922.394 ops/s
Iteration  24: 4966033.187 ops/s
Iteration  25: 4970757.925 ops/s
Iteration  26: 4957127.530 ops/s
Iteration  27: 4980600.652 ops/s
Iteration  28: 4981805.720 ops/s
Iteration  29: 4992199.459 ops/s
Iteration  30: 4987992.143 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_minOptional":
  4976593.299 ±(99.9%) 11060.973 ops/s [Average]
  (min, avg, max) = (4937772.290, 4976593.299, 5010173.924), stdev = 16555.545
  CI (99.9%): [4965532.326, 4987654.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_minOptional  thrpt   30  4976593.299 ± 11060.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695098.178 ops/s
# Warmup Iteration   2: 720762.679 ops/s
# Warmup Iteration   3: 857392.166 ops/s
# Warmup Iteration   4: 918876.674 ops/s
# Warmup Iteration   5: 919513.497 ops/s
# Warmup Iteration   6: 916976.216 ops/s
# Warmup Iteration   7: 916357.216 ops/s
# Warmup Iteration   8: 913309.424 ops/s
# Warmup Iteration   9: 919194.919 ops/s
# Warmup Iteration  10: 918634.317 ops/s
# Warmup Iteration  11: 918608.127 ops/s
# Warmup Iteration  12: 913247.769 ops/s
# Warmup Iteration  13: 914124.724 ops/s
# Warmup Iteration  14: 763138.970 ops/s
# Warmup Iteration  15: 915016.212 ops/s
# Warmup Iteration  16: 914514.438 ops/s
# Warmup Iteration  17: 966754.633 ops/s
# Warmup Iteration  18: 971625.880 ops/s
# Warmup Iteration  19: 964911.445 ops/s
# Warmup Iteration  20: 969980.192 ops/s
# Warmup Iteration  21: 979630.073 ops/s
# Warmup Iteration  22: 972206.031 ops/s
# Warmup Iteration  23: 972900.880 ops/s
# Warmup Iteration  24: 975130.143 ops/s
# Warmup Iteration  25: 972682.250 ops/s
# Warmup Iteration  26: 969663.979 ops/s
# Warmup Iteration  27: 973153.450 ops/s
# Warmup Iteration  28: 971258.078 ops/s
# Warmup Iteration  29: 975812.467 ops/s
# Warmup Iteration  30: 972232.989 ops/s
Iteration   1: 974674.689 ops/s
Iteration   2: 977523.893 ops/s
Iteration   3: 975849.590 ops/s
Iteration   4: 971640.140 ops/s
Iteration   5: 967306.310 ops/s
Iteration   6: 971580.889 ops/s
Iteration   7: 966599.056 ops/s
Iteration   8: 969480.215 ops/s
Iteration   9: 971171.371 ops/s
Iteration  10: 976627.216 ops/s
Iteration  11: 972139.960 ops/s
Iteration  12: 970333.212 ops/s
Iteration  13: 973855.538 ops/s
Iteration  14: 975902.181 ops/s
Iteration  15: 971599.758 ops/s
Iteration  16: 983237.224 ops/s
Iteration  17: 974334.403 ops/s
Iteration  18: 963672.253 ops/s
Iteration  19: 974076.873 ops/s
Iteration  20: 973086.992 ops/s
Iteration  21: 976388.176 ops/s
Iteration  22: 970526.625 ops/s
Iteration  23: 974476.439 ops/s
Iteration  24: 966925.969 ops/s
Iteration  25: 979299.201 ops/s
Iteration  26: 969754.025 ops/s
Iteration  27: 966968.534 ops/s
Iteration  28: 969789.009 ops/s
Iteration  29: 972876.422 ops/s
Iteration  30: 973330.434 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_empty_throws":
  972500.887 ±(99.9%) 2767.195 ops/s [Average]
  (min, avg, max) = (963672.253, 972500.887, 983237.224), stdev = 4141.808
  CI (99.9%): [969733.691, 975268.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_min_empty_throws  thrpt   30  972500.887 ± 2767.195  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3227418.180 ops/s
# Warmup Iteration   2: 5130336.318 ops/s
# Warmup Iteration   3: 5762675.564 ops/s
# Warmup Iteration   4: 5814457.216 ops/s
# Warmup Iteration   5: 5808824.525 ops/s
# Warmup Iteration   6: 4851633.094 ops/s
# Warmup Iteration   7: 5816920.713 ops/s
# Warmup Iteration   8: 5817315.743 ops/s
# Warmup Iteration   9: 5829234.487 ops/s
# Warmup Iteration  10: 5809130.628 ops/s
# Warmup Iteration  11: 5825067.273 ops/s
# Warmup Iteration  12: 5826459.767 ops/s
# Warmup Iteration  13: 5818925.661 ops/s
# Warmup Iteration  14: 5830049.554 ops/s
# Warmup Iteration  15: 5818514.787 ops/s
# Warmup Iteration  16: 5821202.674 ops/s
# Warmup Iteration  17: 5825330.907 ops/s
# Warmup Iteration  18: 5808738.784 ops/s
# Warmup Iteration  19: 5823020.070 ops/s
# Warmup Iteration  20: 5818132.868 ops/s
# Warmup Iteration  21: 5796563.104 ops/s
# Warmup Iteration  22: 5816285.508 ops/s
# Warmup Iteration  23: 5797478.064 ops/s
# Warmup Iteration  24: 5801898.905 ops/s
# Warmup Iteration  25: 5835984.566 ops/s
# Warmup Iteration  26: 5803853.446 ops/s
# Warmup Iteration  27: 5816495.871 ops/s
# Warmup Iteration  28: 5815969.955 ops/s
# Warmup Iteration  29: 5814155.764 ops/s
# Warmup Iteration  30: 5802069.428 ops/s
Iteration   1: 5825700.329 ops/s
Iteration   2: 5851400.255 ops/s
Iteration   3: 5807571.514 ops/s
Iteration   4: 5822682.755 ops/s
Iteration   5: 5766458.593 ops/s
Iteration   6: 5769227.066 ops/s
Iteration   7: 5796971.103 ops/s
Iteration   8: 5792204.645 ops/s
Iteration   9: 5829769.162 ops/s
Iteration  10: 5816832.126 ops/s
Iteration  11: 5838987.191 ops/s
Iteration  12: 5808895.358 ops/s
Iteration  13: 5823380.850 ops/s
Iteration  14: 5843641.243 ops/s
Iteration  15: 5823811.504 ops/s
Iteration  16: 5832848.522 ops/s
Iteration  17: 5864753.653 ops/s
Iteration  18: 5867172.818 ops/s
Iteration  19: 5815328.961 ops/s
Iteration  20: 5803994.711 ops/s
Iteration  21: 5815351.112 ops/s
Iteration  22: 5825558.871 ops/s
Iteration  23: 5809653.650 ops/s
Iteration  24: 5813887.806 ops/s
Iteration  25: 5828940.710 ops/s
Iteration  26: 5831920.976 ops/s
Iteration  27: 5817599.499 ops/s
Iteration  28: 5825241.567 ops/s
Iteration  29: 5836999.726 ops/s
Iteration  30: 5836173.195 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_safe":
  5821431.982 ±(99.9%) 15049.434 ops/s [Average]
  (min, avg, max) = (5766458.593, 5821431.982, 5867172.818), stdev = 22525.287
  CI (99.9%): [5806382.548, 5836481.417] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_min_null_safe  thrpt   30  5821431.982 ± 15049.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3110497.416 ops/s
# Warmup Iteration   2: 3999391.794 ops/s
# Warmup Iteration   3: 5121506.228 ops/s
# Warmup Iteration   4: 5087654.861 ops/s
# Warmup Iteration   5: 5114187.417 ops/s
# Warmup Iteration   6: 5122600.298 ops/s
# Warmup Iteration   7: 5122309.385 ops/s
# Warmup Iteration   8: 4877587.992 ops/s
# Warmup Iteration   9: 4502113.800 ops/s
# Warmup Iteration  10: 5145560.217 ops/s
# Warmup Iteration  11: 5141668.390 ops/s
# Warmup Iteration  12: 5128848.654 ops/s
# Warmup Iteration  13: 5132380.403 ops/s
# Warmup Iteration  14: 5123915.895 ops/s
# Warmup Iteration  15: 5125674.160 ops/s
# Warmup Iteration  16: 5125993.865 ops/s
# Warmup Iteration  17: 5044640.570 ops/s
# Warmup Iteration  18: 5045478.170 ops/s
# Warmup Iteration  19: 5039990.565 ops/s
# Warmup Iteration  20: 5055562.475 ops/s
# Warmup Iteration  21: 5054190.660 ops/s
# Warmup Iteration  22: 5065055.697 ops/s
# Warmup Iteration  23: 5045108.430 ops/s
# Warmup Iteration  24: 5046453.316 ops/s
# Warmup Iteration  25: 5067219.680 ops/s
# Warmup Iteration  26: 5068073.429 ops/s
# Warmup Iteration  27: 5067504.161 ops/s
# Warmup Iteration  28: 5065495.343 ops/s
# Warmup Iteration  29: 5083509.503 ops/s
# Warmup Iteration  30: 5060434.249 ops/s
Iteration   1: 5047253.288 ops/s
Iteration   2: 5074526.793 ops/s
Iteration   3: 5062158.370 ops/s
Iteration   4: 5048079.098 ops/s
Iteration   5: 5031009.368 ops/s
Iteration   6: 5071425.825 ops/s
Iteration   7: 5076565.648 ops/s
Iteration   8: 5077118.286 ops/s
Iteration   9: 5060273.904 ops/s
Iteration  10: 5041152.221 ops/s
Iteration  11: 5058506.808 ops/s
Iteration  12: 5059550.627 ops/s
Iteration  13: 5068129.534 ops/s
Iteration  14: 5072590.054 ops/s
Iteration  15: 5064068.618 ops/s
Iteration  16: 5066606.143 ops/s
Iteration  17: 5056678.648 ops/s
Iteration  18: 5073486.567 ops/s
Iteration  19: 5085773.468 ops/s
Iteration  20: 5050051.415 ops/s
Iteration  21: 5061511.631 ops/s
Iteration  22: 5058807.284 ops/s
Iteration  23: 5071851.716 ops/s
Iteration  24: 5079576.426 ops/s
Iteration  25: 5050770.364 ops/s
Iteration  26: 5033394.496 ops/s
Iteration  27: 5036258.141 ops/s
Iteration  28: 5062300.096 ops/s
Iteration  29: 5052486.717 ops/s
Iteration  30: 5043146.779 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws":
  5059836.944 ±(99.9%) 9518.767 ops/s [Average]
  (min, avg, max) = (5031009.368, 5059836.944, 5085773.468), stdev = 14247.244
  CI (99.9%): [5050318.177, 5069355.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_min_null_throws  thrpt   30  5059836.944 ± 9518.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553235.257 ops/s
# Warmup Iteration   2: 571932.274 ops/s
# Warmup Iteration   3: 636948.132 ops/s
# Warmup Iteration   4: 725584.861 ops/s
# Warmup Iteration   5: 722338.266 ops/s
# Warmup Iteration   6: 722360.063 ops/s
# Warmup Iteration   7: 718675.380 ops/s
# Warmup Iteration   8: 725079.224 ops/s
# Warmup Iteration   9: 721622.385 ops/s
# Warmup Iteration  10: 717233.705 ops/s
# Warmup Iteration  11: 715906.520 ops/s
# Warmup Iteration  12: 722382.051 ops/s
# Warmup Iteration  13: 716909.715 ops/s
# Warmup Iteration  14: 722202.295 ops/s
# Warmup Iteration  15: 695542.721 ops/s
# Warmup Iteration  16: 617588.104 ops/s
# Warmup Iteration  17: 761005.221 ops/s
# Warmup Iteration  18: 757821.421 ops/s
# Warmup Iteration  19: 757749.163 ops/s
# Warmup Iteration  20: 760320.847 ops/s
# Warmup Iteration  21: 758649.131 ops/s
# Warmup Iteration  22: 760323.140 ops/s
# Warmup Iteration  23: 764391.846 ops/s
# Warmup Iteration  24: 760651.963 ops/s
# Warmup Iteration  25: 757995.596 ops/s
# Warmup Iteration  26: 760810.441 ops/s
# Warmup Iteration  27: 762189.908 ops/s
# Warmup Iteration  28: 763033.029 ops/s
# Warmup Iteration  29: 760438.295 ops/s
# Warmup Iteration  30: 758285.770 ops/s
Iteration   1: 758193.747 ops/s
Iteration   2: 759179.956 ops/s
Iteration   3: 754098.536 ops/s
Iteration   4: 752685.384 ops/s
Iteration   5: 755233.425 ops/s
Iteration   6: 759102.577 ops/s
Iteration   7: 757852.084 ops/s
Iteration   8: 751770.468 ops/s
Iteration   9: 763185.067 ops/s
Iteration  10: 765765.410 ops/s
Iteration  11: 759061.765 ops/s
Iteration  12: 761889.642 ops/s
Iteration  13: 762397.436 ops/s
Iteration  14: 759928.340 ops/s
Iteration  15: 759943.102 ops/s
Iteration  16: 763203.517 ops/s
Iteration  17: 761917.843 ops/s
Iteration  18: 762999.236 ops/s
Iteration  19: 760640.137 ops/s
Iteration  20: 763634.048 ops/s
Iteration  21: 763733.558 ops/s
Iteration  22: 765072.820 ops/s
Iteration  23: 762793.497 ops/s
Iteration  24: 756203.890 ops/s
Iteration  25: 760476.622 ops/s
Iteration  26: 758551.520 ops/s
Iteration  27: 761325.231 ops/s
Iteration  28: 762860.415 ops/s
Iteration  29: 765921.460 ops/s
Iteration  30: 760702.720 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator":
  760344.115 ±(99.9%) 2432.536 ops/s [Average]
  (min, avg, max) = (751770.468, 760344.115, 765921.460), stdev = 3640.906
  CI (99.9%): [757911.579, 762776.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  760344.115 ± 2432.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4917703.614 ops/s
# Warmup Iteration   2: 9776905.473 ops/s
# Warmup Iteration   3: 10361372.659 ops/s
# Warmup Iteration   4: 10433038.867 ops/s
# Warmup Iteration   5: 8665039.930 ops/s
# Warmup Iteration   6: 10441217.970 ops/s
# Warmup Iteration   7: 10478938.304 ops/s
# Warmup Iteration   8: 10444539.034 ops/s
# Warmup Iteration   9: 10460881.791 ops/s
# Warmup Iteration  10: 10477159.042 ops/s
# Warmup Iteration  11: 10480360.722 ops/s
# Warmup Iteration  12: 10413692.562 ops/s
# Warmup Iteration  13: 10498037.340 ops/s
# Warmup Iteration  14: 10425290.885 ops/s
# Warmup Iteration  15: 10420373.919 ops/s
# Warmup Iteration  16: 10422027.312 ops/s
# Warmup Iteration  17: 10369783.276 ops/s
# Warmup Iteration  18: 10467406.815 ops/s
# Warmup Iteration  19: 10428018.713 ops/s
# Warmup Iteration  20: 10447110.863 ops/s
# Warmup Iteration  21: 10453543.775 ops/s
# Warmup Iteration  22: 10454727.630 ops/s
# Warmup Iteration  23: 10405956.695 ops/s
# Warmup Iteration  24: 10483174.460 ops/s
# Warmup Iteration  25: 10464500.947 ops/s
# Warmup Iteration  26: 10433531.244 ops/s
# Warmup Iteration  27: 10440223.538 ops/s
# Warmup Iteration  28: 10466464.730 ops/s
# Warmup Iteration  29: 10420615.231 ops/s
# Warmup Iteration  30: 10430175.726 ops/s
Iteration   1: 10417412.556 ops/s
Iteration   2: 10400044.742 ops/s
Iteration   3: 10412196.354 ops/s
Iteration   4: 10399589.716 ops/s
Iteration   5: 10415634.447 ops/s
Iteration   6: 10413897.254 ops/s
Iteration   7: 10390905.731 ops/s
Iteration   8: 10401133.772 ops/s
Iteration   9: 10411694.150 ops/s
Iteration  10: 10416936.489 ops/s
Iteration  11: 10452482.557 ops/s
Iteration  12: 10444413.314 ops/s
Iteration  13: 10465038.462 ops/s
Iteration  14: 10406389.544 ops/s
Iteration  15: 10404382.959 ops/s
Iteration  16: 10416183.990 ops/s
Iteration  17: 10441651.169 ops/s
Iteration  18: 10433539.194 ops/s
Iteration  19: 10459334.705 ops/s
Iteration  20: 10481636.963 ops/s
Iteration  21: 10398075.418 ops/s
Iteration  22: 10461369.429 ops/s
Iteration  23: 10432466.281 ops/s
Iteration  24: 10497841.667 ops/s
Iteration  25: 10470840.657 ops/s
Iteration  26: 10385001.735 ops/s
Iteration  27: 10465706.823 ops/s
Iteration  28: 10415316.536 ops/s
Iteration  29: 10386633.474 ops/s
Iteration  30: 10391840.208 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_min_without_comparator":
  10426319.677 ±(99.9%) 20527.817 ops/s [Average]
  (min, avg, max) = (10385001.735, 10426319.677, 10497841.667), stdev = 30725.073
  CI (99.9%): [10405791.859, 10446847.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_min_without_comparator  thrpt   30  10426319.677 ± 20527.817  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5770385.583 ops/s
# Warmup Iteration   2: 6021151.561 ops/s
# Warmup Iteration   3: 8143146.231 ops/s
# Warmup Iteration   4: 8114840.291 ops/s
# Warmup Iteration   5: 8135009.956 ops/s
# Warmup Iteration   6: 8156995.473 ops/s
# Warmup Iteration   7: 8189856.411 ops/s
# Warmup Iteration   8: 8166215.768 ops/s
# Warmup Iteration   9: 8176045.044 ops/s
# Warmup Iteration  10: 8167951.230 ops/s
# Warmup Iteration  11: 7984222.616 ops/s
# Warmup Iteration  12: 6993160.106 ops/s
# Warmup Iteration  13: 8171708.311 ops/s
# Warmup Iteration  14: 8129907.105 ops/s
# Warmup Iteration  15: 8166183.373 ops/s
# Warmup Iteration  16: 8151231.711 ops/s
# Warmup Iteration  17: 8176741.509 ops/s
# Warmup Iteration  18: 8171465.838 ops/s
# Warmup Iteration  19: 8182419.159 ops/s
# Warmup Iteration  20: 8155225.127 ops/s
# Warmup Iteration  21: 8178269.989 ops/s
# Warmup Iteration  22: 8151891.230 ops/s
# Warmup Iteration  23: 8082774.459 ops/s
# Warmup Iteration  24: 8171104.752 ops/s
# Warmup Iteration  25: 8183626.316 ops/s
# Warmup Iteration  26: 8160438.892 ops/s
# Warmup Iteration  27: 8136270.956 ops/s
# Warmup Iteration  28: 8155030.462 ops/s
# Warmup Iteration  29: 8168148.686 ops/s
# Warmup Iteration  30: 8169969.045 ops/s
Iteration   1: 8165549.067 ops/s
Iteration   2: 8152430.489 ops/s
Iteration   3: 8144872.338 ops/s
Iteration   4: 8143098.529 ops/s
Iteration   5: 8187914.292 ops/s
Iteration   6: 8213292.332 ops/s
Iteration   7: 8184500.494 ops/s
Iteration   8: 8192783.958 ops/s
Iteration   9: 8175403.960 ops/s
Iteration  10: 8220751.499 ops/s
Iteration  11: 8156317.942 ops/s
Iteration  12: 8189722.103 ops/s
Iteration  13: 8174973.993 ops/s
Iteration  14: 8163125.953 ops/s
Iteration  15: 8164023.407 ops/s
Iteration  16: 8160356.389 ops/s
Iteration  17: 8146114.865 ops/s
Iteration  18: 8186471.572 ops/s
Iteration  19: 8168801.702 ops/s
Iteration  20: 8187177.688 ops/s
Iteration  21: 8178085.233 ops/s
Iteration  22: 8160482.677 ops/s
Iteration  23: 8192324.021 ops/s
Iteration  24: 8150475.533 ops/s
Iteration  25: 8195962.875 ops/s
Iteration  26: 8159390.764 ops/s
Iteration  27: 8161634.455 ops/s
Iteration  28: 8183425.953 ops/s
Iteration  29: 8142636.938 ops/s
Iteration  30: 8123455.474 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newEmpty":
  8170851.883 ±(99.9%) 14728.800 ops/s [Average]
  (min, avg, max) = (8123455.474, 8170851.883, 8220751.499), stdev = 22045.377
  CI (99.9%): [8156123.083, 8185580.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_newEmpty  thrpt   30  8170851.883 ± 14728.800  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6887519.837 ops/s
# Warmup Iteration   2: 13806832.296 ops/s
# Warmup Iteration   3: 12025421.049 ops/s
# Warmup Iteration   4: 14021331.280 ops/s
# Warmup Iteration   5: 13993442.825 ops/s
# Warmup Iteration   6: 13959900.401 ops/s
# Warmup Iteration   7: 13986715.210 ops/s
# Warmup Iteration   8: 13912071.535 ops/s
# Warmup Iteration   9: 13921264.482 ops/s
# Warmup Iteration  10: 13949308.604 ops/s
# Warmup Iteration  11: 13918336.110 ops/s
# Warmup Iteration  12: 13884204.180 ops/s
# Warmup Iteration  13: 13935427.809 ops/s
# Warmup Iteration  14: 13929495.262 ops/s
# Warmup Iteration  15: 13953024.950 ops/s
# Warmup Iteration  16: 13842598.489 ops/s
# Warmup Iteration  17: 14007934.455 ops/s
# Warmup Iteration  18: 13971956.890 ops/s
# Warmup Iteration  19: 14007986.761 ops/s
# Warmup Iteration  20: 14055112.342 ops/s
# Warmup Iteration  21: 13959568.370 ops/s
# Warmup Iteration  22: 13921436.418 ops/s
# Warmup Iteration  23: 14047673.181 ops/s
# Warmup Iteration  24: 14004106.732 ops/s
# Warmup Iteration  25: 13937623.894 ops/s
# Warmup Iteration  26: 13978749.585 ops/s
# Warmup Iteration  27: 13900521.896 ops/s
# Warmup Iteration  28: 14012422.848 ops/s
# Warmup Iteration  29: 13810530.335 ops/s
# Warmup Iteration  30: 13653667.610 ops/s
Iteration   1: 13891971.388 ops/s
Iteration   2: 13959357.802 ops/s
Iteration   3: 13912899.992 ops/s
Iteration   4: 13968861.957 ops/s
Iteration   5: 13962177.882 ops/s
Iteration   6: 13875672.014 ops/s
Iteration   7: 13892277.618 ops/s
Iteration   8: 13819729.335 ops/s
Iteration   9: 13816729.746 ops/s
Iteration  10: 13801683.613 ops/s
Iteration  11: 13930880.262 ops/s
Iteration  12: 13982775.733 ops/s
Iteration  13: 13716237.137 ops/s
Iteration  14: 13953179.603 ops/s
Iteration  15: 13925591.723 ops/s
Iteration  16: 13897069.211 ops/s
Iteration  17: 13930492.158 ops/s
Iteration  18: 13960626.759 ops/s
Iteration  19: 14017354.944 ops/s
Iteration  20: 13918244.614 ops/s
Iteration  21: 13979847.271 ops/s
Iteration  22: 13952529.661 ops/s
Iteration  23: 14021329.587 ops/s
Iteration  24: 13984423.264 ops/s
Iteration  25: 13907322.976 ops/s
Iteration  26: 13966188.064 ops/s
Iteration  27: 13881536.568 ops/s
Iteration  28: 13980872.768 ops/s
Iteration  29: 13926556.362 ops/s
Iteration  30: 13982147.423 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_newListWithSize":
  13923885.581 ±(99.9%) 45155.413 ops/s [Average]
  (min, avg, max) = (13716237.137, 13923885.581, 14021329.587), stdev = 67586.501
  CI (99.9%): [13878730.169, 13969040.994] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_newListWithSize  thrpt   30  13923885.581 ± 45155.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3421015.612 ops/s
# Warmup Iteration   2: 7511724.904 ops/s
# Warmup Iteration   3: 7526935.869 ops/s
# Warmup Iteration   4: 6325406.035 ops/s
# Warmup Iteration   5: 7524767.530 ops/s
# Warmup Iteration   6: 7547348.069 ops/s
# Warmup Iteration   7: 7529087.003 ops/s
# Warmup Iteration   8: 7504817.270 ops/s
# Warmup Iteration   9: 7560674.564 ops/s
# Warmup Iteration  10: 7524754.423 ops/s
# Warmup Iteration  11: 7543643.119 ops/s
# Warmup Iteration  12: 7549827.125 ops/s
# Warmup Iteration  13: 7526961.882 ops/s
# Warmup Iteration  14: 7521368.815 ops/s
# Warmup Iteration  15: 7544170.550 ops/s
# Warmup Iteration  16: 7523716.645 ops/s
# Warmup Iteration  17: 7516323.149 ops/s
# Warmup Iteration  18: 7539900.122 ops/s
# Warmup Iteration  19: 7547356.325 ops/s
# Warmup Iteration  20: 7531595.483 ops/s
# Warmup Iteration  21: 7533684.538 ops/s
# Warmup Iteration  22: 7564946.857 ops/s
# Warmup Iteration  23: 7504581.347 ops/s
# Warmup Iteration  24: 7544311.344 ops/s
# Warmup Iteration  25: 7525012.930 ops/s
# Warmup Iteration  26: 7518998.135 ops/s
# Warmup Iteration  27: 7531423.223 ops/s
# Warmup Iteration  28: 7573042.311 ops/s
# Warmup Iteration  29: 7508672.024 ops/s
# Warmup Iteration  30: 7463253.966 ops/s
Iteration   1: 7505350.057 ops/s
Iteration   2: 7531677.959 ops/s
Iteration   3: 7446744.768 ops/s
Iteration   4: 7571274.761 ops/s
Iteration   5: 7574010.882 ops/s
Iteration   6: 7495823.204 ops/s
Iteration   7: 7542910.269 ops/s
Iteration   8: 7510076.145 ops/s
Iteration   9: 7541593.003 ops/s
Iteration  10: 7559901.270 ops/s
Iteration  11: 7551143.577 ops/s
Iteration  12: 7532515.608 ops/s
Iteration  13: 7500035.393 ops/s
Iteration  14: 7487968.319 ops/s
Iteration  15: 7556372.653 ops/s
Iteration  16: 7563813.468 ops/s
Iteration  17: 7546910.128 ops/s
Iteration  18: 7558683.947 ops/s
Iteration  19: 7582875.271 ops/s
Iteration  20: 7521315.408 ops/s
Iteration  21: 7517296.989 ops/s
Iteration  22: 7537290.940 ops/s
Iteration  23: 7554479.642 ops/s
Iteration  24: 7590842.561 ops/s
Iteration  25: 7561095.229 ops/s
Iteration  26: 7504017.885 ops/s
Iteration  27: 7465613.035 ops/s
Iteration  28: 7521497.026 ops/s
Iteration  29: 7530966.431 ops/s
Iteration  30: 7536404.912 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfy":
  7533350.025 ±(99.9%) 22524.001 ops/s [Average]
  (min, avg, max) = (7446744.768, 7533350.025, 7590842.561), stdev = 33712.867
  CI (99.9%): [7510826.023, 7555874.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_noneSatisfy  thrpt   30  7533350.025 ± 22524.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5281789.955 ops/s
# Warmup Iteration   2: 11114034.732 ops/s
# Warmup Iteration   3: 11218905.085 ops/s
# Warmup Iteration   4: 9208099.320 ops/s
# Warmup Iteration   5: 11010660.323 ops/s
# Warmup Iteration   6: 10937280.032 ops/s
# Warmup Iteration   7: 10951935.460 ops/s
# Warmup Iteration   8: 10950225.236 ops/s
# Warmup Iteration   9: 10953354.915 ops/s
# Warmup Iteration  10: 11003031.547 ops/s
# Warmup Iteration  11: 10943531.903 ops/s
# Warmup Iteration  12: 10981320.554 ops/s
# Warmup Iteration  13: 10968197.131 ops/s
# Warmup Iteration  14: 10904552.310 ops/s
# Warmup Iteration  15: 10931928.267 ops/s
# Warmup Iteration  16: 10931270.026 ops/s
# Warmup Iteration  17: 11006968.018 ops/s
# Warmup Iteration  18: 10983018.736 ops/s
# Warmup Iteration  19: 10952381.848 ops/s
# Warmup Iteration  20: 10944498.349 ops/s
# Warmup Iteration  21: 10958795.807 ops/s
# Warmup Iteration  22: 10967682.065 ops/s
# Warmup Iteration  23: 10949118.945 ops/s
# Warmup Iteration  24: 10969380.477 ops/s
# Warmup Iteration  25: 10982819.107 ops/s
# Warmup Iteration  26: 10931372.079 ops/s
# Warmup Iteration  27: 10964230.147 ops/s
# Warmup Iteration  28: 10941716.487 ops/s
# Warmup Iteration  29: 10930789.363 ops/s
# Warmup Iteration  30: 10912839.319 ops/s
Iteration   1: 10888432.614 ops/s
Iteration   2: 10946292.867 ops/s
Iteration   3: 10992435.873 ops/s
Iteration   4: 10957301.569 ops/s
Iteration   5: 10982158.100 ops/s
Iteration   6: 10992904.926 ops/s
Iteration   7: 10911964.997 ops/s
Iteration   8: 10957856.731 ops/s
Iteration   9: 10856701.254 ops/s
Iteration  10: 10992219.883 ops/s
Iteration  11: 10977278.983 ops/s
Iteration  12: 10983191.106 ops/s
Iteration  13: 10972230.858 ops/s
Iteration  14: 10926097.268 ops/s
Iteration  15: 10962268.722 ops/s
Iteration  16: 10949208.601 ops/s
Iteration  17: 10804884.248 ops/s
Iteration  18: 10922501.967 ops/s
Iteration  19: 10986502.433 ops/s
Iteration  20: 10943679.687 ops/s
Iteration  21: 10925691.052 ops/s
Iteration  22: 10957601.625 ops/s
Iteration  23: 10915499.672 ops/s
Iteration  24: 10933541.325 ops/s
Iteration  25: 10987615.859 ops/s
Iteration  26: 10917638.123 ops/s
Iteration  27: 10908633.017 ops/s
Iteration  28: 10933831.499 ops/s
Iteration  29: 10883468.516 ops/s
Iteration  30: 10998471.152 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_noneSatisfyWith":
  10942270.151 ±(99.9%) 29957.803 ops/s [Average]
  (min, avg, max) = (10804884.248, 10942270.151, 10998471.152), stdev = 44839.433
  CI (99.9%): [10912312.348, 10972227.954] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  10942270.151 ± 29957.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6093295.107 ops/s
# Warmup Iteration   2: 10407061.587 ops/s
# Warmup Iteration   3: 12204606.575 ops/s
# Warmup Iteration   4: 12195790.751 ops/s
# Warmup Iteration   5: 12265356.116 ops/s
# Warmup Iteration   6: 12230823.845 ops/s
# Warmup Iteration   7: 12179425.422 ops/s
# Warmup Iteration   8: 12188421.376 ops/s
# Warmup Iteration   9: 12205283.127 ops/s
# Warmup Iteration  10: 12121500.191 ops/s
# Warmup Iteration  11: 12118942.606 ops/s
# Warmup Iteration  12: 12206728.080 ops/s
# Warmup Iteration  13: 12029495.326 ops/s
# Warmup Iteration  14: 12206906.478 ops/s
# Warmup Iteration  15: 12215184.714 ops/s
# Warmup Iteration  16: 12088821.926 ops/s
# Warmup Iteration  17: 12119582.567 ops/s
# Warmup Iteration  18: 12196868.579 ops/s
# Warmup Iteration  19: 12176297.507 ops/s
# Warmup Iteration  20: 11987816.691 ops/s
# Warmup Iteration  21: 12197269.622 ops/s
# Warmup Iteration  22: 12169916.499 ops/s
# Warmup Iteration  23: 12042802.978 ops/s
# Warmup Iteration  24: 12072723.391 ops/s
# Warmup Iteration  25: 12210640.949 ops/s
# Warmup Iteration  26: 12267398.859 ops/s
# Warmup Iteration  27: 12155086.609 ops/s
# Warmup Iteration  28: 12148638.803 ops/s
# Warmup Iteration  29: 11857002.447 ops/s
# Warmup Iteration  30: 12169079.520 ops/s
Iteration   1: 12130653.604 ops/s
Iteration   2: 12346502.853 ops/s
Iteration   3: 12150590.209 ops/s
Iteration   4: 12202922.094 ops/s
Iteration   5: 12210782.011 ops/s
Iteration   6: 12124665.043 ops/s
Iteration   7: 12191213.296 ops/s
Iteration   8: 12185485.737 ops/s
Iteration   9: 12144977.045 ops/s
Iteration  10: 12003799.171 ops/s
Iteration  11: 12147237.838 ops/s
Iteration  12: 12194047.838 ops/s
Iteration  13: 12237140.154 ops/s
Iteration  14: 12252635.648 ops/s
Iteration  15: 12255574.210 ops/s
Iteration  16: 12172540.580 ops/s
Iteration  17: 12193695.869 ops/s
Iteration  18: 12153161.378 ops/s
Iteration  19: 12244779.494 ops/s
Iteration  20: 12215858.791 ops/s
Iteration  21: 12147577.750 ops/s
Iteration  22: 12204678.056 ops/s
Iteration  23: 12233761.221 ops/s
Iteration  24: 12007659.055 ops/s
Iteration  25: 11783607.646 ops/s
Iteration  26: 12049343.318 ops/s
Iteration  27: 12123824.760 ops/s
Iteration  28: 12192954.186 ops/s
Iteration  29: 12303424.268 ops/s
Iteration  30: 12125839.930 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_notEmpty":
  12164364.435 ±(99.9%) 69361.608 ops/s [Average]
  (min, avg, max) = (11783607.646, 12164364.435, 12346502.853), stdev = 103817.197
  CI (99.9%): [12095002.827, 12233726.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_notEmpty  thrpt   30  12164364.435 ± 69361.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843149.242 ops/s
# Warmup Iteration   2: 856063.344 ops/s
# Warmup Iteration   3: 982599.536 ops/s
# Warmup Iteration   4: 1059520.927 ops/s
# Warmup Iteration   5: 1061694.977 ops/s
# Warmup Iteration   6: 1065855.100 ops/s
# Warmup Iteration   7: 1068343.882 ops/s
# Warmup Iteration   8: 1065999.292 ops/s
# Warmup Iteration   9: 1069707.787 ops/s
# Warmup Iteration  10: 1069384.300 ops/s
# Warmup Iteration  11: 1060387.398 ops/s
# Warmup Iteration  12: 1067051.321 ops/s
# Warmup Iteration  13: 1064128.550 ops/s
# Warmup Iteration  14: 945505.427 ops/s
# Warmup Iteration  15: 1005355.798 ops/s
# Warmup Iteration  16: 1066365.351 ops/s
# Warmup Iteration  17: 1129800.090 ops/s
# Warmup Iteration  18: 1129701.525 ops/s
# Warmup Iteration  19: 1132517.576 ops/s
# Warmup Iteration  20: 1129265.956 ops/s
# Warmup Iteration  21: 1129826.950 ops/s
# Warmup Iteration  22: 1131316.394 ops/s
# Warmup Iteration  23: 1131268.874 ops/s
# Warmup Iteration  24: 1127532.872 ops/s
# Warmup Iteration  25: 1129038.186 ops/s
# Warmup Iteration  26: 1131448.870 ops/s
# Warmup Iteration  27: 1129872.887 ops/s
# Warmup Iteration  28: 1132503.887 ops/s
# Warmup Iteration  29: 1127462.520 ops/s
# Warmup Iteration  30: 1127580.130 ops/s
Iteration   1: 1133157.301 ops/s
Iteration   2: 1129770.941 ops/s
Iteration   3: 1126868.718 ops/s
Iteration   4: 1129189.082 ops/s
Iteration   5: 1123575.539 ops/s
Iteration   6: 1120077.852 ops/s
Iteration   7: 1129318.818 ops/s
Iteration   8: 1120349.142 ops/s
Iteration   9: 1122238.176 ops/s
Iteration  10: 1128094.303 ops/s
Iteration  11: 1123295.183 ops/s
Iteration  12: 1129815.316 ops/s
Iteration  13: 1139210.834 ops/s
Iteration  14: 1129036.913 ops/s
Iteration  15: 1130839.379 ops/s
Iteration  16: 1128539.585 ops/s
Iteration  17: 1128704.559 ops/s
Iteration  18: 1139974.331 ops/s
Iteration  19: 1134278.085 ops/s
Iteration  20: 1138514.787 ops/s
Iteration  21: 1126685.357 ops/s
Iteration  22: 1126183.689 ops/s
Iteration  23: 1126583.543 ops/s
Iteration  24: 1135794.222 ops/s
Iteration  25: 1131977.532 ops/s
Iteration  26: 1129378.095 ops/s
Iteration  27: 1134796.735 ops/s
Iteration  28: 1134671.839 ops/s
Iteration  29: 1139139.732 ops/s
Iteration  30: 1138978.363 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_null_throws":
  1130301.265 ±(99.9%) 3772.488 ops/s [Average]
  (min, avg, max) = (1120077.852, 1130301.265, 1139974.331), stdev = 5646.483
  CI (99.9%): [1126528.777, 1134073.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_null_throws  thrpt   30  1130301.265 ± 3772.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2534000.446 ops/s
# Warmup Iteration   2: 5649637.529 ops/s
# Warmup Iteration   3: 5682563.399 ops/s
# Warmup Iteration   4: 4776431.109 ops/s
# Warmup Iteration   5: 5688124.748 ops/s
# Warmup Iteration   6: 5704573.236 ops/s
# Warmup Iteration   7: 5674667.070 ops/s
# Warmup Iteration   8: 5680925.692 ops/s
# Warmup Iteration   9: 5677690.971 ops/s
# Warmup Iteration  10: 5677266.555 ops/s
# Warmup Iteration  11: 5701267.187 ops/s
# Warmup Iteration  12: 5673161.082 ops/s
# Warmup Iteration  13: 5659393.479 ops/s
# Warmup Iteration  14: 5667760.190 ops/s
# Warmup Iteration  15: 5683702.469 ops/s
# Warmup Iteration  16: 5689181.676 ops/s
# Warmup Iteration  17: 5683036.155 ops/s
# Warmup Iteration  18: 5671646.715 ops/s
# Warmup Iteration  19: 5683291.831 ops/s
# Warmup Iteration  20: 5667221.733 ops/s
# Warmup Iteration  21: 5684330.388 ops/s
# Warmup Iteration  22: 5688073.586 ops/s
# Warmup Iteration  23: 5665626.219 ops/s
# Warmup Iteration  24: 5709498.745 ops/s
# Warmup Iteration  25: 5646446.407 ops/s
# Warmup Iteration  26: 5678570.908 ops/s
# Warmup Iteration  27: 5667186.249 ops/s
# Warmup Iteration  28: 5661138.734 ops/s
# Warmup Iteration  29: 5675642.050 ops/s
# Warmup Iteration  30: 5676446.531 ops/s
Iteration   1: 5703234.179 ops/s
Iteration   2: 5609239.119 ops/s
Iteration   3: 5664815.477 ops/s
Iteration   4: 5684841.637 ops/s
Iteration   5: 5731195.656 ops/s
Iteration   6: 5683911.563 ops/s
Iteration   7: 5695287.441 ops/s
Iteration   8: 5677706.562 ops/s
Iteration   9: 5647641.490 ops/s
Iteration  10: 5709903.055 ops/s
Iteration  11: 5685156.214 ops/s
Iteration  12: 5709593.687 ops/s
Iteration  13: 5686656.533 ops/s
Iteration  14: 5677016.657 ops/s
Iteration  15: 5669306.335 ops/s
Iteration  16: 5701091.049 ops/s
Iteration  17: 5660190.780 ops/s
Iteration  18: 5702066.529 ops/s
Iteration  19: 5693303.294 ops/s
Iteration  20: 5689919.004 ops/s
Iteration  21: 5700904.788 ops/s
Iteration  22: 5626140.800 ops/s
Iteration  23: 5655102.668 ops/s
Iteration  24: 5676125.854 ops/s
Iteration  25: 5692782.014 ops/s
Iteration  26: 5700868.991 ops/s
Iteration  27: 5691685.304 ops/s
Iteration  28: 5667752.118 ops/s
Iteration  29: 5692431.467 ops/s
Iteration  30: 5676118.798 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partition":
  5682066.302 ±(99.9%) 16731.189 ops/s [Average]
  (min, avg, max) = (5609239.119, 5682066.302, 5731195.656), stdev = 25042.458
  CI (99.9%): [5665335.113, 5698797.491] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_partition  thrpt   30  5682066.302 ± 16731.189  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1341782.154 ops/s
# Warmup Iteration   2: 2336029.038 ops/s
# Warmup Iteration   3: 2617251.063 ops/s
# Warmup Iteration   4: 2620411.827 ops/s
# Warmup Iteration   5: 2620464.664 ops/s
# Warmup Iteration   6: 2179920.079 ops/s
# Warmup Iteration   7: 2625701.494 ops/s
# Warmup Iteration   8: 2628622.345 ops/s
# Warmup Iteration   9: 2634101.141 ops/s
# Warmup Iteration  10: 2629906.767 ops/s
# Warmup Iteration  11: 2622170.189 ops/s
# Warmup Iteration  12: 2613740.407 ops/s
# Warmup Iteration  13: 2623239.749 ops/s
# Warmup Iteration  14: 2625929.527 ops/s
# Warmup Iteration  15: 2627156.492 ops/s
# Warmup Iteration  16: 2623871.403 ops/s
# Warmup Iteration  17: 2620381.279 ops/s
# Warmup Iteration  18: 2615583.006 ops/s
# Warmup Iteration  19: 2636604.880 ops/s
# Warmup Iteration  20: 2621413.346 ops/s
# Warmup Iteration  21: 2623457.545 ops/s
# Warmup Iteration  22: 2620149.389 ops/s
# Warmup Iteration  23: 2632182.495 ops/s
# Warmup Iteration  24: 2626789.445 ops/s
# Warmup Iteration  25: 2621926.075 ops/s
# Warmup Iteration  26: 2606832.752 ops/s
# Warmup Iteration  27: 2617168.925 ops/s
# Warmup Iteration  28: 2618763.289 ops/s
# Warmup Iteration  29: 2629313.209 ops/s
# Warmup Iteration  30: 2626935.523 ops/s
Iteration   1: 2614717.662 ops/s
Iteration   2: 2614443.244 ops/s
Iteration   3: 2617683.432 ops/s
Iteration   4: 2627828.446 ops/s
Iteration   5: 2625331.903 ops/s
Iteration   6: 2633982.004 ops/s
Iteration   7: 2619265.395 ops/s
Iteration   8: 2618646.830 ops/s
Iteration   9: 2645784.213 ops/s
Iteration  10: 2605132.266 ops/s
Iteration  11: 2637252.992 ops/s
Iteration  12: 2625029.381 ops/s
Iteration  13: 2622107.490 ops/s
Iteration  14: 2631757.885 ops/s
Iteration  15: 2631710.888 ops/s
Iteration  16: 2619939.067 ops/s
Iteration  17: 2619369.665 ops/s
Iteration  18: 2623158.779 ops/s
Iteration  19: 2622453.701 ops/s
Iteration  20: 2625259.500 ops/s
Iteration  21: 2627467.117 ops/s
Iteration  22: 2625939.905 ops/s
Iteration  23: 2623593.866 ops/s
Iteration  24: 2606035.492 ops/s
Iteration  25: 2625906.156 ops/s
Iteration  26: 2620982.251 ops/s
Iteration  27: 2631375.181 ops/s
Iteration  28: 2616973.188 ops/s
Iteration  29: 2626221.849 ops/s
Iteration  30: 2628644.937 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_partitionWith":
  2623799.823 ±(99.9%) 5600.994 ops/s [Average]
  (min, avg, max) = (2605132.266, 2623799.823, 2645784.213), stdev = 8383.304
  CI (99.9%): [2618198.829, 2629400.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_partitionWith  thrpt   30  2623799.823 ± 5600.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 935429.119 ops/s
# Warmup Iteration   2: 1437678.150 ops/s
# Warmup Iteration   3: 1696966.720 ops/s
# Warmup Iteration   4: 1699278.908 ops/s
# Warmup Iteration   5: 1699841.102 ops/s
# Warmup Iteration   6: 1681997.245 ops/s
# Warmup Iteration   7: 1398764.498 ops/s
# Warmup Iteration   8: 1707360.979 ops/s
# Warmup Iteration   9: 1706552.395 ops/s
# Warmup Iteration  10: 1705630.634 ops/s
# Warmup Iteration  11: 1700104.715 ops/s
# Warmup Iteration  12: 1705276.799 ops/s
# Warmup Iteration  13: 1703560.794 ops/s
# Warmup Iteration  14: 1701308.147 ops/s
# Warmup Iteration  15: 1709282.187 ops/s
# Warmup Iteration  16: 1700673.823 ops/s
# Warmup Iteration  17: 1705119.370 ops/s
# Warmup Iteration  18: 1703363.821 ops/s
# Warmup Iteration  19: 1705462.999 ops/s
# Warmup Iteration  20: 1707607.408 ops/s
# Warmup Iteration  21: 1707291.669 ops/s
# Warmup Iteration  22: 1710837.798 ops/s
# Warmup Iteration  23: 1705214.148 ops/s
# Warmup Iteration  24: 1710107.651 ops/s
# Warmup Iteration  25: 1702396.967 ops/s
# Warmup Iteration  26: 1700475.559 ops/s
# Warmup Iteration  27: 1703562.856 ops/s
# Warmup Iteration  28: 1703088.934 ops/s
# Warmup Iteration  29: 1706985.268 ops/s
# Warmup Iteration  30: 1707381.697 ops/s
Iteration   1: 1696328.302 ops/s
Iteration   2: 1697445.098 ops/s
Iteration   3: 1708513.589 ops/s
Iteration   4: 1697430.775 ops/s
Iteration   5: 1705889.211 ops/s
Iteration   6: 1696335.786 ops/s
Iteration   7: 1691654.947 ops/s
Iteration   8: 1711812.395 ops/s
Iteration   9: 1707718.047 ops/s
Iteration  10: 1711075.164 ops/s
Iteration  11: 1700389.930 ops/s
Iteration  12: 1702759.073 ops/s
Iteration  13: 1709519.190 ops/s
Iteration  14: 1697804.755 ops/s
Iteration  15: 1708597.173 ops/s
Iteration  16: 1707668.285 ops/s
Iteration  17: 1705215.848 ops/s
Iteration  18: 1703177.442 ops/s
Iteration  19: 1708642.777 ops/s
Iteration  20: 1685239.545 ops/s
Iteration  21: 1700481.220 ops/s
Iteration  22: 1711630.944 ops/s
Iteration  23: 1710702.565 ops/s
Iteration  24: 1700939.883 ops/s
Iteration  25: 1706542.937 ops/s
Iteration  26: 1701432.327 ops/s
Iteration  27: 1717057.691 ops/s
Iteration  28: 1707785.128 ops/s
Iteration  29: 1706409.473 ops/s
Iteration  30: 1701945.060 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reduceOptional":
  1703938.152 ±(99.9%) 4526.858 ops/s [Average]
  (min, avg, max) = (1685239.545, 1703938.152, 1717057.691), stdev = 6775.589
  CI (99.9%): [1699411.294, 1708465.010] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_reduceOptional  thrpt   30  1703938.152 ± 4526.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 535341.443 ops/s
# Warmup Iteration   2: 1285977.542 ops/s
# Warmup Iteration   3: 1312090.487 ops/s
# Warmup Iteration   4: 1091299.089 ops/s
# Warmup Iteration   5: 1314413.724 ops/s
# Warmup Iteration   6: 1309650.451 ops/s
# Warmup Iteration   7: 1315331.860 ops/s
# Warmup Iteration   8: 1312390.322 ops/s
# Warmup Iteration   9: 1316276.800 ops/s
# Warmup Iteration  10: 1309189.598 ops/s
# Warmup Iteration  11: 1298323.109 ops/s
# Warmup Iteration  12: 1318481.048 ops/s
# Warmup Iteration  13: 1314562.779 ops/s
# Warmup Iteration  14: 1313077.837 ops/s
# Warmup Iteration  15: 1313355.203 ops/s
# Warmup Iteration  16: 1317006.025 ops/s
# Warmup Iteration  17: 1310761.517 ops/s
# Warmup Iteration  18: 1311187.622 ops/s
# Warmup Iteration  19: 1314280.468 ops/s
# Warmup Iteration  20: 1314219.463 ops/s
# Warmup Iteration  21: 1315792.862 ops/s
# Warmup Iteration  22: 1311240.818 ops/s
# Warmup Iteration  23: 1314408.601 ops/s
# Warmup Iteration  24: 1312435.191 ops/s
# Warmup Iteration  25: 1306425.112 ops/s
# Warmup Iteration  26: 1312734.565 ops/s
# Warmup Iteration  27: 1309481.371 ops/s
# Warmup Iteration  28: 1312736.358 ops/s
# Warmup Iteration  29: 1307372.401 ops/s
# Warmup Iteration  30: 1317216.868 ops/s
Iteration   1: 1311486.421 ops/s
Iteration   2: 1319642.587 ops/s
Iteration   3: 1310756.729 ops/s
Iteration   4: 1317774.822 ops/s
Iteration   5: 1319985.733 ops/s
Iteration   6: 1312138.413 ops/s
Iteration   7: 1311256.837 ops/s
Iteration   8: 1314815.261 ops/s
Iteration   9: 1317664.827 ops/s
Iteration  10: 1312980.659 ops/s
Iteration  11: 1300173.480 ops/s
Iteration  12: 1303666.137 ops/s
Iteration  13: 1309800.658 ops/s
Iteration  14: 1311173.864 ops/s
Iteration  15: 1322410.988 ops/s
Iteration  16: 1322534.683 ops/s
Iteration  17: 1318454.832 ops/s
Iteration  18: 1311075.629 ops/s
Iteration  19: 1323599.005 ops/s
Iteration  20: 1314673.338 ops/s
Iteration  21: 1309500.135 ops/s
Iteration  22: 1300967.984 ops/s
Iteration  23: 1311498.878 ops/s
Iteration  24: 1306728.634 ops/s
Iteration  25: 1318348.412 ops/s
Iteration  26: 1310832.088 ops/s
Iteration  27: 1315452.965 ops/s
Iteration  28: 1307082.803 ops/s
Iteration  29: 1315905.754 ops/s
Iteration  30: 1316392.151 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_reject":
  1313292.490 ±(99.9%) 3992.306 ops/s [Average]
  (min, avg, max) = (1300173.480, 1313292.490, 1323599.005), stdev = 5975.496
  CI (99.9%): [1309300.184, 1317284.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_reject  thrpt   30  1313292.490 ± 3992.306  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1471966.065 ops/s
# Warmup Iteration   2: 3492982.296 ops/s
# Warmup Iteration   3: 3478768.143 ops/s
# Warmup Iteration   4: 2946955.494 ops/s
# Warmup Iteration   5: 3493958.078 ops/s
# Warmup Iteration   6: 3505351.795 ops/s
# Warmup Iteration   7: 3499984.008 ops/s
# Warmup Iteration   8: 3508792.925 ops/s
# Warmup Iteration   9: 3498553.086 ops/s
# Warmup Iteration  10: 3489509.375 ops/s
# Warmup Iteration  11: 3501718.042 ops/s
# Warmup Iteration  12: 3495356.836 ops/s
# Warmup Iteration  13: 3502781.187 ops/s
# Warmup Iteration  14: 3504438.143 ops/s
# Warmup Iteration  15: 3512326.633 ops/s
# Warmup Iteration  16: 3515221.483 ops/s
# Warmup Iteration  17: 3500754.969 ops/s
# Warmup Iteration  18: 3506629.775 ops/s
# Warmup Iteration  19: 3511313.396 ops/s
# Warmup Iteration  20: 3507407.072 ops/s
# Warmup Iteration  21: 3496510.323 ops/s
# Warmup Iteration  22: 3492235.576 ops/s
# Warmup Iteration  23: 3505642.970 ops/s
# Warmup Iteration  24: 3494606.177 ops/s
# Warmup Iteration  25: 3490557.985 ops/s
# Warmup Iteration  26: 3495760.154 ops/s
# Warmup Iteration  27: 3504090.878 ops/s
# Warmup Iteration  28: 3497535.524 ops/s
# Warmup Iteration  29: 3513159.754 ops/s
# Warmup Iteration  30: 3515442.372 ops/s
Iteration   1: 3492864.829 ops/s
Iteration   2: 3515602.057 ops/s
Iteration   3: 3523720.505 ops/s
Iteration   4: 3499856.620 ops/s
Iteration   5: 3494758.725 ops/s
Iteration   6: 3513337.568 ops/s
Iteration   7: 3513478.412 ops/s
Iteration   8: 3513492.213 ops/s
Iteration   9: 3519840.917 ops/s
Iteration  10: 3522398.857 ops/s
Iteration  11: 3507962.082 ops/s
Iteration  12: 3498410.516 ops/s
Iteration  13: 3512592.870 ops/s
Iteration  14: 3530017.969 ops/s
Iteration  15: 3506687.255 ops/s
Iteration  16: 3497797.878 ops/s
Iteration  17: 3514718.921 ops/s
Iteration  18: 3465188.866 ops/s
Iteration  19: 3483490.500 ops/s
Iteration  20: 3511423.604 ops/s
Iteration  21: 3482168.143 ops/s
Iteration  22: 3501112.482 ops/s
Iteration  23: 3511812.579 ops/s
Iteration  24: 3491097.559 ops/s
Iteration  25: 3505320.373 ops/s
Iteration  26: 3488929.592 ops/s
Iteration  27: 3488943.513 ops/s
Iteration  28: 3504614.783 ops/s
Iteration  29: 3511385.886 ops/s
Iteration  30: 3498879.990 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith":
  3504063.535 ±(99.9%) 9445.333 ops/s [Average]
  (min, avg, max) = (3465188.866, 3504063.535, 3530017.969), stdev = 14137.331
  CI (99.9%): [3494618.203, 3513508.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_rejectWith  thrpt   30  3504063.535 ± 9445.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1372393.533 ops/s
# Warmup Iteration   2: 3502542.448 ops/s
# Warmup Iteration   3: 2999579.174 ops/s
# Warmup Iteration   4: 3592738.984 ops/s
# Warmup Iteration   5: 3596159.152 ops/s
# Warmup Iteration   6: 3592080.378 ops/s
# Warmup Iteration   7: 3594860.555 ops/s
# Warmup Iteration   8: 3598716.529 ops/s
# Warmup Iteration   9: 3575656.984 ops/s
# Warmup Iteration  10: 3558887.851 ops/s
# Warmup Iteration  11: 3595389.195 ops/s
# Warmup Iteration  12: 3566714.616 ops/s
# Warmup Iteration  13: 3592366.842 ops/s
# Warmup Iteration  14: 3590128.308 ops/s
# Warmup Iteration  15: 3579881.574 ops/s
# Warmup Iteration  16: 3586647.499 ops/s
# Warmup Iteration  17: 3593329.007 ops/s
# Warmup Iteration  18: 3580982.603 ops/s
# Warmup Iteration  19: 3593340.149 ops/s
# Warmup Iteration  20: 3583832.761 ops/s
# Warmup Iteration  21: 3590661.286 ops/s
# Warmup Iteration  22: 3604689.653 ops/s
# Warmup Iteration  23: 3587889.683 ops/s
# Warmup Iteration  24: 3589750.131 ops/s
# Warmup Iteration  25: 3583159.890 ops/s
# Warmup Iteration  26: 3581145.889 ops/s
# Warmup Iteration  27: 3582947.170 ops/s
# Warmup Iteration  28: 3597485.385 ops/s
# Warmup Iteration  29: 3580810.689 ops/s
# Warmup Iteration  30: 3601866.338 ops/s
Iteration   1: 3609356.147 ops/s
Iteration   2: 3599420.700 ops/s
Iteration   3: 3592103.648 ops/s
Iteration   4: 3598679.787 ops/s
Iteration   5: 3596200.480 ops/s
Iteration   6: 3609329.912 ops/s
Iteration   7: 3589414.068 ops/s
Iteration   8: 3592750.729 ops/s
Iteration   9: 3582380.623 ops/s
Iteration  10: 3592078.072 ops/s
Iteration  11: 3610397.837 ops/s
Iteration  12: 3590541.725 ops/s
Iteration  13: 3591081.530 ops/s
Iteration  14: 3594429.967 ops/s
Iteration  15: 3607939.949 ops/s
Iteration  16: 3596081.488 ops/s
Iteration  17: 3602642.203 ops/s
Iteration  18: 3593358.322 ops/s
Iteration  19: 3563058.258 ops/s
Iteration  20: 3567171.156 ops/s
Iteration  21: 3602215.141 ops/s
Iteration  22: 3597258.957 ops/s
Iteration  23: 3595153.050 ops/s
Iteration  24: 3603588.102 ops/s
Iteration  25: 3596422.579 ops/s
Iteration  26: 3578054.204 ops/s
Iteration  27: 3592262.407 ops/s
Iteration  28: 3560636.726 ops/s
Iteration  29: 3563562.630 ops/s
Iteration  30: 3571188.177 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_rejectWith_target":
  3591291.953 ±(99.9%) 9372.290 ops/s [Average]
  (min, avg, max) = (3560636.726, 3591291.953, 3610397.837), stdev = 14028.003
  CI (99.9%): [3581919.663, 3600664.242] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_rejectWith_target  thrpt   30  3591291.953 ± 9372.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 567841.166 ops/s
# Warmup Iteration   2: 1070264.749 ops/s
# Warmup Iteration   3: 1209369.612 ops/s
# Warmup Iteration   4: 1212444.117 ops/s
# Warmup Iteration   5: 1128376.008 ops/s
# Warmup Iteration   6: 1087257.654 ops/s
# Warmup Iteration   7: 1212654.082 ops/s
# Warmup Iteration   8: 1208556.433 ops/s
# Warmup Iteration   9: 1211095.909 ops/s
# Warmup Iteration  10: 1215039.165 ops/s
# Warmup Iteration  11: 1206587.776 ops/s
# Warmup Iteration  12: 1212787.390 ops/s
# Warmup Iteration  13: 1213013.644 ops/s
# Warmup Iteration  14: 1216858.561 ops/s
# Warmup Iteration  15: 1210870.060 ops/s
# Warmup Iteration  16: 1212758.851 ops/s
# Warmup Iteration  17: 1211338.448 ops/s
# Warmup Iteration  18: 1212382.536 ops/s
# Warmup Iteration  19: 1209930.979 ops/s
# Warmup Iteration  20: 1212646.687 ops/s
# Warmup Iteration  21: 1217795.612 ops/s
# Warmup Iteration  22: 1212076.708 ops/s
# Warmup Iteration  23: 1213371.293 ops/s
# Warmup Iteration  24: 1212747.660 ops/s
# Warmup Iteration  25: 1212621.474 ops/s
# Warmup Iteration  26: 1216459.599 ops/s
# Warmup Iteration  27: 1215534.939 ops/s
# Warmup Iteration  28: 1214700.786 ops/s
# Warmup Iteration  29: 1219738.324 ops/s
# Warmup Iteration  30: 1217492.676 ops/s
Iteration   1: 1208468.776 ops/s
Iteration   2: 1208452.866 ops/s
Iteration   3: 1212945.853 ops/s
Iteration   4: 1209880.296 ops/s
Iteration   5: 1219303.331 ops/s
Iteration   6: 1211199.740 ops/s
Iteration   7: 1216278.868 ops/s
Iteration   8: 1215904.878 ops/s
Iteration   9: 1213860.898 ops/s
Iteration  10: 1207696.617 ops/s
Iteration  11: 1220745.105 ops/s
Iteration  12: 1214802.123 ops/s
Iteration  13: 1217158.514 ops/s
Iteration  14: 1216576.533 ops/s
Iteration  15: 1218839.123 ops/s
Iteration  16: 1211698.148 ops/s
Iteration  17: 1187517.681 ops/s
Iteration  18: 1208560.182 ops/s
Iteration  19: 1208336.263 ops/s
Iteration  20: 1206113.000 ops/s
Iteration  21: 1212951.009 ops/s
Iteration  22: 1213980.966 ops/s
Iteration  23: 1217468.052 ops/s
Iteration  24: 1209603.412 ops/s
Iteration  25: 1212882.522 ops/s
Iteration  26: 1217804.825 ops/s
Iteration  27: 1213256.605 ops/s
Iteration  28: 1220455.109 ops/s
Iteration  29: 1214152.740 ops/s
Iteration  30: 1219743.101 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAll":
  1212887.905 ±(99.9%) 4238.166 ops/s [Average]
  (min, avg, max) = (1187517.681, 1212887.905, 1220745.105), stdev = 6343.487
  CI (99.9%): [1208649.739, 1217126.070] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_removeAll  thrpt   30  1212887.905 ± 4238.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 456131.563 ops/s
# Warmup Iteration   2: 813422.217 ops/s
# Warmup Iteration   3: 953244.618 ops/s
# Warmup Iteration   4: 953991.550 ops/s
# Warmup Iteration   5: 951834.502 ops/s
# Warmup Iteration   6: 784029.074 ops/s
# Warmup Iteration   7: 951622.126 ops/s
# Warmup Iteration   8: 957239.805 ops/s
# Warmup Iteration   9: 950046.691 ops/s
# Warmup Iteration  10: 953250.583 ops/s
# Warmup Iteration  11: 957283.281 ops/s
# Warmup Iteration  12: 954096.640 ops/s
# Warmup Iteration  13: 958801.029 ops/s
# Warmup Iteration  14: 962142.476 ops/s
# Warmup Iteration  15: 956112.668 ops/s
# Warmup Iteration  16: 954065.967 ops/s
# Warmup Iteration  17: 953091.506 ops/s
# Warmup Iteration  18: 951725.248 ops/s
# Warmup Iteration  19: 957043.257 ops/s
# Warmup Iteration  20: 952611.154 ops/s
# Warmup Iteration  21: 952657.554 ops/s
# Warmup Iteration  22: 954980.861 ops/s
# Warmup Iteration  23: 951307.829 ops/s
# Warmup Iteration  24: 954091.701 ops/s
# Warmup Iteration  25: 952928.650 ops/s
# Warmup Iteration  26: 951402.614 ops/s
# Warmup Iteration  27: 952819.495 ops/s
# Warmup Iteration  28: 950073.202 ops/s
# Warmup Iteration  29: 954855.682 ops/s
# Warmup Iteration  30: 954652.761 ops/s
Iteration   1: 954454.811 ops/s
Iteration   2: 951908.709 ops/s
Iteration   3: 950015.846 ops/s
Iteration   4: 954543.649 ops/s
Iteration   5: 951329.281 ops/s
Iteration   6: 951257.647 ops/s
Iteration   7: 950783.431 ops/s
Iteration   8: 960296.025 ops/s
Iteration   9: 959403.200 ops/s
Iteration  10: 958454.451 ops/s
Iteration  11: 954391.935 ops/s
Iteration  12: 955451.327 ops/s
Iteration  13: 959028.805 ops/s
Iteration  14: 958543.881 ops/s
Iteration  15: 951311.575 ops/s
Iteration  16: 960278.382 ops/s
Iteration  17: 956212.701 ops/s
Iteration  18: 954507.937 ops/s
Iteration  19: 954442.285 ops/s
Iteration  20: 954317.560 ops/s
Iteration  21: 953961.654 ops/s
Iteration  22: 954333.789 ops/s
Iteration  23: 950610.093 ops/s
Iteration  24: 952620.187 ops/s
Iteration  25: 953220.334 ops/s
Iteration  26: 953700.558 ops/s
Iteration  27: 952464.037 ops/s
Iteration  28: 955970.640 ops/s
Iteration  29: 953835.400 ops/s
Iteration  30: 954772.134 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeAllIterable":
  954547.409 ±(99.9%) 1949.050 ops/s [Average]
  (min, avg, max) = (950015.846, 954547.409, 960296.025), stdev = 2917.246
  CI (99.9%): [952598.359, 956496.459] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_removeAllIterable  thrpt   30  954547.409 ± 1949.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1222915.063 ops/s
# Warmup Iteration   2: 2758607.862 ops/s
# Warmup Iteration   3: 2862146.828 ops/s
# Warmup Iteration   4: 2624672.588 ops/s
# Warmup Iteration   5: 2606016.490 ops/s
# Warmup Iteration   6: 2861888.328 ops/s
# Warmup Iteration   7: 2848963.524 ops/s
# Warmup Iteration   8: 2857306.788 ops/s
# Warmup Iteration   9: 2858297.339 ops/s
# Warmup Iteration  10: 2855950.115 ops/s
# Warmup Iteration  11: 2873396.603 ops/s
# Warmup Iteration  12: 2864412.825 ops/s
# Warmup Iteration  13: 2847709.311 ops/s
# Warmup Iteration  14: 2884264.623 ops/s
# Warmup Iteration  15: 2874545.565 ops/s
# Warmup Iteration  16: 2869265.795 ops/s
# Warmup Iteration  17: 2874108.974 ops/s
# Warmup Iteration  18: 2867934.386 ops/s
# Warmup Iteration  19: 2868562.489 ops/s
# Warmup Iteration  20: 2874061.824 ops/s
# Warmup Iteration  21: 2862779.968 ops/s
# Warmup Iteration  22: 2866917.363 ops/s
# Warmup Iteration  23: 2860382.926 ops/s
# Warmup Iteration  24: 2866599.110 ops/s
# Warmup Iteration  25: 2876970.229 ops/s
# Warmup Iteration  26: 2872766.777 ops/s
# Warmup Iteration  27: 2874466.570 ops/s
# Warmup Iteration  28: 2867626.171 ops/s
# Warmup Iteration  29: 2881199.352 ops/s
# Warmup Iteration  30: 2857262.967 ops/s
Iteration   1: 2867198.520 ops/s
Iteration   2: 2869696.800 ops/s
Iteration   3: 2865289.141 ops/s
Iteration   4: 2851522.272 ops/s
Iteration   5: 2881243.726 ops/s
Iteration   6: 2870356.633 ops/s
Iteration   7: 2851875.001 ops/s
Iteration   8: 2873889.289 ops/s
Iteration   9: 2872283.417 ops/s
Iteration  10: 2855029.150 ops/s
Iteration  11: 2864771.334 ops/s
Iteration  12: 2864202.367 ops/s
Iteration  13: 2870254.612 ops/s
Iteration  14: 2826983.842 ops/s
Iteration  15: 2846325.154 ops/s
Iteration  16: 2850727.621 ops/s
Iteration  17: 2853674.086 ops/s
Iteration  18: 2882823.233 ops/s
Iteration  19: 2878251.608 ops/s
Iteration  20: 2842057.503 ops/s
Iteration  21: 2866292.304 ops/s
Iteration  22: 2875214.854 ops/s
Iteration  23: 2862429.654 ops/s
Iteration  24: 2867137.751 ops/s
Iteration  25: 2858748.444 ops/s
Iteration  26: 2863023.884 ops/s
Iteration  27: 2848197.578 ops/s
Iteration  28: 2884073.084 ops/s
Iteration  29: 2872054.752 ops/s
Iteration  30: 2871857.335 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIf":
  2863582.832 ±(99.9%) 8703.735 ops/s [Average]
  (min, avg, max) = (2826983.842, 2863582.832, 2884073.084), stdev = 13027.342
  CI (99.9%): [2854879.097, 2872286.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_removeIf  thrpt   30  2863582.832 ± 8703.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1730985.661 ops/s
# Warmup Iteration   2: 3817199.764 ops/s
# Warmup Iteration   3: 3949533.441 ops/s
# Warmup Iteration   4: 3644322.706 ops/s
# Warmup Iteration   5: 3572132.758 ops/s
# Warmup Iteration   6: 3944353.090 ops/s
# Warmup Iteration   7: 3941900.691 ops/s
# Warmup Iteration   8: 3939150.524 ops/s
# Warmup Iteration   9: 3964039.513 ops/s
# Warmup Iteration  10: 3955114.583 ops/s
# Warmup Iteration  11: 3949570.797 ops/s
# Warmup Iteration  12: 3944819.115 ops/s
# Warmup Iteration  13: 3950185.753 ops/s
# Warmup Iteration  14: 3948617.540 ops/s
# Warmup Iteration  15: 3956304.585 ops/s
# Warmup Iteration  16: 3940413.539 ops/s
# Warmup Iteration  17: 3941348.945 ops/s
# Warmup Iteration  18: 3952790.920 ops/s
# Warmup Iteration  19: 3965756.012 ops/s
# Warmup Iteration  20: 3963469.680 ops/s
# Warmup Iteration  21: 3958059.758 ops/s
# Warmup Iteration  22: 3941544.958 ops/s
# Warmup Iteration  23: 3952362.516 ops/s
# Warmup Iteration  24: 3956609.705 ops/s
# Warmup Iteration  25: 3934284.408 ops/s
# Warmup Iteration  26: 3966874.191 ops/s
# Warmup Iteration  27: 3943603.209 ops/s
# Warmup Iteration  28: 3949175.476 ops/s
# Warmup Iteration  29: 3942060.343 ops/s
# Warmup Iteration  30: 3940947.456 ops/s
Iteration   1: 3933645.907 ops/s
Iteration   2: 3969789.857 ops/s
Iteration   3: 3953145.468 ops/s
Iteration   4: 3939444.312 ops/s
Iteration   5: 3951225.201 ops/s
Iteration   6: 3932625.114 ops/s
Iteration   7: 3942350.342 ops/s
Iteration   8: 3952454.390 ops/s
Iteration   9: 3948332.995 ops/s
Iteration  10: 3943060.192 ops/s
Iteration  11: 3952945.310 ops/s
Iteration  12: 3941856.686 ops/s
Iteration  13: 3937557.974 ops/s
Iteration  14: 3930928.065 ops/s
Iteration  15: 3975044.628 ops/s
Iteration  16: 3923634.134 ops/s
Iteration  17: 3954554.076 ops/s
Iteration  18: 3970064.436 ops/s
Iteration  19: 3960143.366 ops/s
Iteration  20: 3939558.677 ops/s
Iteration  21: 3968060.971 ops/s
Iteration  22: 3935267.654 ops/s
Iteration  23: 3949992.055 ops/s
Iteration  24: 3981471.590 ops/s
Iteration  25: 3977024.270 ops/s
Iteration  26: 3934651.730 ops/s
Iteration  27: 3968312.106 ops/s
Iteration  28: 3950500.068 ops/s
Iteration  29: 3930052.284 ops/s
Iteration  30: 3946083.073 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeIfWith":
  3949792.564 ±(99.9%) 10378.253 ops/s [Average]
  (min, avg, max) = (3923634.134, 3949792.564, 3981471.590), stdev = 15533.681
  CI (99.9%): [3939414.312, 3960170.817] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_removeIfWith  thrpt   30  3949792.564 ± 10378.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12568617.658 ops/s
# Warmup Iteration   2: 20904792.262 ops/s
# Warmup Iteration   3: 24798274.866 ops/s
# Warmup Iteration   4: 24801553.839 ops/s
# Warmup Iteration   5: 24762821.002 ops/s
# Warmup Iteration   6: 24237953.141 ops/s
# Warmup Iteration   7: 24644299.824 ops/s
# Warmup Iteration   8: 24531282.046 ops/s
# Warmup Iteration   9: 24726678.615 ops/s
# Warmup Iteration  10: 24946767.789 ops/s
# Warmup Iteration  11: 24882917.750 ops/s
# Warmup Iteration  12: 24670694.462 ops/s
# Warmup Iteration  13: 24899120.137 ops/s
# Warmup Iteration  14: 24676670.202 ops/s
# Warmup Iteration  15: 24815475.604 ops/s
# Warmup Iteration  16: 24819349.005 ops/s
# Warmup Iteration  17: 24549590.294 ops/s
# Warmup Iteration  18: 24767774.658 ops/s
# Warmup Iteration  19: 25018165.445 ops/s
# Warmup Iteration  20: 24862336.974 ops/s
# Warmup Iteration  21: 24793585.327 ops/s
# Warmup Iteration  22: 24600266.501 ops/s
# Warmup Iteration  23: 24589724.947 ops/s
# Warmup Iteration  24: 24816890.102 ops/s
# Warmup Iteration  25: 24891314.774 ops/s
# Warmup Iteration  26: 25040146.779 ops/s
# Warmup Iteration  27: 25033714.923 ops/s
# Warmup Iteration  28: 24993387.845 ops/s
# Warmup Iteration  29: 24905543.697 ops/s
# Warmup Iteration  30: 25023719.185 ops/s
Iteration   1: 24986642.267 ops/s
Iteration   2: 24916706.613 ops/s
Iteration   3: 25055217.006 ops/s
Iteration   4: 24984123.425 ops/s
Iteration   5: 24719174.604 ops/s
Iteration   6: 24762194.494 ops/s
Iteration   7: 24984789.314 ops/s
Iteration   8: 25000306.074 ops/s
Iteration   9: 24796409.709 ops/s
Iteration  10: 24889995.353 ops/s
Iteration  11: 24814934.471 ops/s
Iteration  12: 24713315.761 ops/s
Iteration  13: 24829926.687 ops/s
Iteration  14: 24816953.915 ops/s
Iteration  15: 24531818.617 ops/s
Iteration  16: 25048350.409 ops/s
Iteration  17: 24872551.019 ops/s
Iteration  18: 24960798.947 ops/s
Iteration  19: 25000458.918 ops/s
Iteration  20: 24728324.466 ops/s
Iteration  21: 24715988.723 ops/s
Iteration  22: 25000547.365 ops/s
Iteration  23: 24770426.303 ops/s
Iteration  24: 24956464.320 ops/s
Iteration  25: 24954635.080 ops/s
Iteration  26: 24916542.652 ops/s
Iteration  27: 25003579.008 ops/s
Iteration  28: 24917493.823 ops/s
Iteration  29: 24964371.780 ops/s
Iteration  30: 25082454.100 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_removeObject":
  24889849.841 ±(99.9%) 86560.166 ops/s [Average]
  (min, avg, max) = (24531818.617, 24889849.841, 25082454.100), stdev = 129559.192
  CI (99.9%): [24803289.674, 24976410.007] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_removeObject  thrpt   30  24889849.841 ± 86560.166  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 364182.428 ops/s
# Warmup Iteration   2: 555101.396 ops/s
# Warmup Iteration   3: 698039.381 ops/s
# Warmup Iteration   4: 696638.640 ops/s
# Warmup Iteration   5: 700239.096 ops/s
# Warmup Iteration   6: 698748.398 ops/s
# Warmup Iteration   7: 664251.649 ops/s
# Warmup Iteration   8: 614466.183 ops/s
# Warmup Iteration   9: 698569.771 ops/s
# Warmup Iteration  10: 700321.183 ops/s
# Warmup Iteration  11: 699177.242 ops/s
# Warmup Iteration  12: 703077.408 ops/s
# Warmup Iteration  13: 700433.590 ops/s
# Warmup Iteration  14: 698918.620 ops/s
# Warmup Iteration  15: 701926.637 ops/s
# Warmup Iteration  16: 700489.918 ops/s
# Warmup Iteration  17: 702600.111 ops/s
# Warmup Iteration  18: 701331.436 ops/s
# Warmup Iteration  19: 699458.340 ops/s
# Warmup Iteration  20: 696930.785 ops/s
# Warmup Iteration  21: 697475.829 ops/s
# Warmup Iteration  22: 697172.441 ops/s
# Warmup Iteration  23: 700458.214 ops/s
# Warmup Iteration  24: 700763.775 ops/s
# Warmup Iteration  25: 697113.131 ops/s
# Warmup Iteration  26: 700327.520 ops/s
# Warmup Iteration  27: 697661.810 ops/s
# Warmup Iteration  28: 698056.873 ops/s
# Warmup Iteration  29: 702737.201 ops/s
# Warmup Iteration  30: 701957.947 ops/s
Iteration   1: 702060.087 ops/s
Iteration   2: 700634.608 ops/s
Iteration   3: 702098.796 ops/s
Iteration   4: 705356.967 ops/s
Iteration   5: 698658.076 ops/s
Iteration   6: 700212.451 ops/s
Iteration   7: 701531.974 ops/s
Iteration   8: 702521.062 ops/s
Iteration   9: 707198.589 ops/s
Iteration  10: 697367.484 ops/s
Iteration  11: 700509.964 ops/s
Iteration  12: 699869.067 ops/s
Iteration  13: 699375.968 ops/s
Iteration  14: 702602.659 ops/s
Iteration  15: 700991.325 ops/s
Iteration  16: 699287.360 ops/s
Iteration  17: 700625.315 ops/s
Iteration  18: 700659.155 ops/s
Iteration  19: 699279.873 ops/s
Iteration  20: 697771.336 ops/s
Iteration  21: 702052.106 ops/s
Iteration  22: 696307.628 ops/s
Iteration  23: 704119.943 ops/s
Iteration  24: 701374.634 ops/s
Iteration  25: 700171.433 ops/s
Iteration  26: 703079.826 ops/s
Iteration  27: 701282.012 ops/s
Iteration  28: 699323.407 ops/s
Iteration  29: 699208.637 ops/s
Iteration  30: 699228.210 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAll":
  700825.332 ±(99.9%) 1526.561 ops/s [Average]
  (min, avg, max) = (696307.628, 700825.332, 707198.589), stdev = 2284.885
  CI (99.9%): [699298.771, 702351.893] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_retainAll  thrpt   30  700825.332 ± 1526.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 536417.906 ops/s
# Warmup Iteration   2: 862820.040 ops/s
# Warmup Iteration   3: 1062881.944 ops/s
# Warmup Iteration   4: 1050788.496 ops/s
# Warmup Iteration   5: 1053544.462 ops/s
# Warmup Iteration   6: 1058466.607 ops/s
# Warmup Iteration   7: 878542.393 ops/s
# Warmup Iteration   8: 1060579.164 ops/s
# Warmup Iteration   9: 1059864.486 ops/s
# Warmup Iteration  10: 1058377.237 ops/s
# Warmup Iteration  11: 1056551.742 ops/s
# Warmup Iteration  12: 1057088.112 ops/s
# Warmup Iteration  13: 1061400.791 ops/s
# Warmup Iteration  14: 1057777.852 ops/s
# Warmup Iteration  15: 1055415.343 ops/s
# Warmup Iteration  16: 1056313.788 ops/s
# Warmup Iteration  17: 1062695.029 ops/s
# Warmup Iteration  18: 1057963.924 ops/s
# Warmup Iteration  19: 1059255.916 ops/s
# Warmup Iteration  20: 1058796.273 ops/s
# Warmup Iteration  21: 1063576.390 ops/s
# Warmup Iteration  22: 1062673.862 ops/s
# Warmup Iteration  23: 1060797.975 ops/s
# Warmup Iteration  24: 1056465.100 ops/s
# Warmup Iteration  25: 1062457.159 ops/s
# Warmup Iteration  26: 1062253.947 ops/s
# Warmup Iteration  27: 1065790.714 ops/s
# Warmup Iteration  28: 1064588.841 ops/s
# Warmup Iteration  29: 1056409.240 ops/s
# Warmup Iteration  30: 1065820.596 ops/s
Iteration   1: 1059416.061 ops/s
Iteration   2: 1064444.484 ops/s
Iteration   3: 1061107.752 ops/s
Iteration   4: 1063772.727 ops/s
Iteration   5: 1067561.203 ops/s
Iteration   6: 1070248.674 ops/s
Iteration   7: 1061751.390 ops/s
Iteration   8: 1063471.795 ops/s
Iteration   9: 1061295.410 ops/s
Iteration  10: 1058520.004 ops/s
Iteration  11: 1061501.181 ops/s
Iteration  12: 1059652.206 ops/s
Iteration  13: 1070359.616 ops/s
Iteration  14: 1064263.557 ops/s
Iteration  15: 1062107.416 ops/s
Iteration  16: 1066010.213 ops/s
Iteration  17: 1059538.809 ops/s
Iteration  18: 1062752.871 ops/s
Iteration  19: 1063691.132 ops/s
Iteration  20: 1060287.648 ops/s
Iteration  21: 1058207.493 ops/s
Iteration  22: 1067897.050 ops/s
Iteration  23: 1067195.733 ops/s
Iteration  24: 1063811.518 ops/s
Iteration  25: 1066139.133 ops/s
Iteration  26: 1067458.360 ops/s
Iteration  27: 1062614.951 ops/s
Iteration  28: 1063160.042 ops/s
Iteration  29: 1063429.032 ops/s
Iteration  30: 1057823.324 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_retainAllIterable":
  1063316.359 ±(99.9%) 2271.648 ops/s [Average]
  (min, avg, max) = (1057823.324, 1063316.359, 1070359.616), stdev = 3400.097
  CI (99.9%): [1061044.711, 1065588.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1063316.359 ± 2271.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 392107.339 ops/s
# Warmup Iteration   2: 902074.138 ops/s
# Warmup Iteration   3: 941012.553 ops/s
# Warmup Iteration   4: 832080.526 ops/s
# Warmup Iteration   5: 880666.566 ops/s
# Warmup Iteration   6: 938606.515 ops/s
# Warmup Iteration   7: 940265.876 ops/s
# Warmup Iteration   8: 942567.220 ops/s
# Warmup Iteration   9: 939924.616 ops/s
# Warmup Iteration  10: 940863.097 ops/s
# Warmup Iteration  11: 944862.467 ops/s
# Warmup Iteration  12: 941039.287 ops/s
# Warmup Iteration  13: 940142.902 ops/s
# Warmup Iteration  14: 939722.508 ops/s
# Warmup Iteration  15: 937107.035 ops/s
# Warmup Iteration  16: 940858.905 ops/s
# Warmup Iteration  17: 936228.725 ops/s
# Warmup Iteration  18: 940202.669 ops/s
# Warmup Iteration  19: 938345.171 ops/s
# Warmup Iteration  20: 938877.772 ops/s
# Warmup Iteration  21: 942233.998 ops/s
# Warmup Iteration  22: 942025.545 ops/s
# Warmup Iteration  23: 941886.256 ops/s
# Warmup Iteration  24: 940689.672 ops/s
# Warmup Iteration  25: 940681.922 ops/s
# Warmup Iteration  26: 938884.631 ops/s
# Warmup Iteration  27: 939163.283 ops/s
# Warmup Iteration  28: 939063.874 ops/s
# Warmup Iteration  29: 938886.937 ops/s
# Warmup Iteration  30: 942235.834 ops/s
Iteration   1: 941485.606 ops/s
Iteration   2: 930276.979 ops/s
Iteration   3: 939491.837 ops/s
Iteration   4: 937127.909 ops/s
Iteration   5: 940192.734 ops/s
Iteration   6: 938836.590 ops/s
Iteration   7: 940631.155 ops/s
Iteration   8: 934171.890 ops/s
Iteration   9: 936709.310 ops/s
Iteration  10: 934856.680 ops/s
Iteration  11: 933249.502 ops/s
Iteration  12: 938669.308 ops/s
Iteration  13: 936417.906 ops/s
Iteration  14: 930404.455 ops/s
Iteration  15: 944634.023 ops/s
Iteration  16: 938311.865 ops/s
Iteration  17: 937476.160 ops/s
Iteration  18: 941241.349 ops/s
Iteration  19: 939669.252 ops/s
Iteration  20: 929396.085 ops/s
Iteration  21: 936329.842 ops/s
Iteration  22: 936555.974 ops/s
Iteration  23: 939059.888 ops/s
Iteration  24: 945381.300 ops/s
Iteration  25: 947385.885 ops/s
Iteration  26: 943743.248 ops/s
Iteration  27: 938564.376 ops/s
Iteration  28: 940184.069 ops/s
Iteration  29: 938217.261 ops/s
Iteration  30: 943286.026 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_select":
  938398.615 ±(99.9%) 2878.204 ops/s [Average]
  (min, avg, max) = (929396.085, 938398.615, 947385.885), stdev = 4307.961
  CI (99.9%): [935520.411, 941276.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_select  thrpt   30  938398.615 ± 2878.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4668277.082 ops/s
# Warmup Iteration   2: 9879056.454 ops/s
# Warmup Iteration   3: 8387096.212 ops/s
# Warmup Iteration   4: 9983620.037 ops/s
# Warmup Iteration   5: 9947835.784 ops/s
# Warmup Iteration   6: 10019880.182 ops/s
# Warmup Iteration   7: 10004502.680 ops/s
# Warmup Iteration   8: 10012473.672 ops/s
# Warmup Iteration   9: 9993299.572 ops/s
# Warmup Iteration  10: 9942592.016 ops/s
# Warmup Iteration  11: 10031506.831 ops/s
# Warmup Iteration  12: 9984586.770 ops/s
# Warmup Iteration  13: 10036376.499 ops/s
# Warmup Iteration  14: 10005809.751 ops/s
# Warmup Iteration  15: 9938235.491 ops/s
# Warmup Iteration  16: 10092415.457 ops/s
# Warmup Iteration  17: 9967471.054 ops/s
# Warmup Iteration  18: 9990547.500 ops/s
# Warmup Iteration  19: 10014000.721 ops/s
# Warmup Iteration  20: 9886878.602 ops/s
# Warmup Iteration  21: 10003913.713 ops/s
# Warmup Iteration  22: 9990971.703 ops/s
# Warmup Iteration  23: 9995462.784 ops/s
# Warmup Iteration  24: 10019125.680 ops/s
# Warmup Iteration  25: 10040629.933 ops/s
# Warmup Iteration  26: 10007545.469 ops/s
# Warmup Iteration  27: 10035490.685 ops/s
# Warmup Iteration  28: 10010434.791 ops/s
# Warmup Iteration  29: 9979676.033 ops/s
# Warmup Iteration  30: 9922836.175 ops/s
Iteration   1: 9955871.869 ops/s
Iteration   2: 9990506.104 ops/s
Iteration   3: 9942199.430 ops/s
Iteration   4: 10044233.901 ops/s
Iteration   5: 10003215.222 ops/s
Iteration   6: 10023319.645 ops/s
Iteration   7: 9916900.711 ops/s
Iteration   8: 9922004.194 ops/s
Iteration   9: 9999520.932 ops/s
Iteration  10: 9942532.519 ops/s
Iteration  11: 9993161.965 ops/s
Iteration  12: 9995043.685 ops/s
Iteration  13: 9997034.354 ops/s
Iteration  14: 9920558.443 ops/s
Iteration  15: 10015845.894 ops/s
Iteration  16: 10030892.986 ops/s
Iteration  17: 9999101.359 ops/s
Iteration  18: 9990827.149 ops/s
Iteration  19: 10033968.742 ops/s
Iteration  20: 9964725.105 ops/s
Iteration  21: 9996821.455 ops/s
Iteration  22: 10048423.901 ops/s
Iteration  23: 9980019.429 ops/s
Iteration  24: 9985235.454 ops/s
Iteration  25: 10046648.944 ops/s
Iteration  26: 10042149.569 ops/s
Iteration  27: 9951451.609 ops/s
Iteration  28: 9986941.138 ops/s
Iteration  29: 9992701.018 ops/s
Iteration  30: 10040214.137 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectAndRejectWith":
  9991735.695 ±(99.9%) 25826.558 ops/s [Average]
  (min, avg, max) = (9916900.711, 9991735.695, 10048423.901), stdev = 38655.979
  CI (99.9%): [9965909.138, 10017562.253] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  9991735.695 ± 25826.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 245952.126 ops/s
# Warmup Iteration   2: 463568.412 ops/s
# Warmup Iteration   3: 527388.559 ops/s
# Warmup Iteration   4: 529660.681 ops/s
# Warmup Iteration   5: 503884.932 ops/s
# Warmup Iteration   6: 464740.723 ops/s
# Warmup Iteration   7: 532614.323 ops/s
# Warmup Iteration   8: 531668.684 ops/s
# Warmup Iteration   9: 530599.948 ops/s
# Warmup Iteration  10: 532294.571 ops/s
# Warmup Iteration  11: 534184.280 ops/s
# Warmup Iteration  12: 531836.562 ops/s
# Warmup Iteration  13: 533636.213 ops/s
# Warmup Iteration  14: 531840.846 ops/s
# Warmup Iteration  15: 528514.181 ops/s
# Warmup Iteration  16: 534696.431 ops/s
# Warmup Iteration  17: 531961.047 ops/s
# Warmup Iteration  18: 530296.003 ops/s
# Warmup Iteration  19: 530488.355 ops/s
# Warmup Iteration  20: 530085.173 ops/s
# Warmup Iteration  21: 531287.591 ops/s
# Warmup Iteration  22: 532913.907 ops/s
# Warmup Iteration  23: 532166.291 ops/s
# Warmup Iteration  24: 532788.547 ops/s
# Warmup Iteration  25: 534510.566 ops/s
# Warmup Iteration  26: 533815.313 ops/s
# Warmup Iteration  27: 533608.115 ops/s
# Warmup Iteration  28: 531670.892 ops/s
# Warmup Iteration  29: 531294.845 ops/s
# Warmup Iteration  30: 533899.150 ops/s
Iteration   1: 532135.892 ops/s
Iteration   2: 535760.204 ops/s
Iteration   3: 532805.135 ops/s
Iteration   4: 533745.729 ops/s
Iteration   5: 535721.115 ops/s
Iteration   6: 536578.144 ops/s
Iteration   7: 532467.186 ops/s
Iteration   8: 530455.496 ops/s
Iteration   9: 529790.065 ops/s
Iteration  10: 533541.265 ops/s
Iteration  11: 533468.030 ops/s
Iteration  12: 536749.868 ops/s
Iteration  13: 531994.311 ops/s
Iteration  14: 533475.102 ops/s
Iteration  15: 532340.756 ops/s
Iteration  16: 531221.243 ops/s
Iteration  17: 534232.226 ops/s
Iteration  18: 533154.299 ops/s
Iteration  19: 531754.769 ops/s
Iteration  20: 534922.763 ops/s
Iteration  21: 534892.916 ops/s
Iteration  22: 534237.421 ops/s
Iteration  23: 532358.549 ops/s
Iteration  24: 533169.481 ops/s
Iteration  25: 532445.625 ops/s
Iteration  26: 537306.601 ops/s
Iteration  27: 533898.373 ops/s
Iteration  28: 533346.712 ops/s
Iteration  29: 535332.428 ops/s
Iteration  30: 532484.258 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectInstancesOf":
  533526.199 ±(99.9%) 1210.283 ops/s [Average]
  (min, avg, max) = (529790.065, 533526.199, 537306.601), stdev = 1811.494
  CI (99.9%): [532315.916, 534736.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  533526.199 ± 1210.283  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 716594.985 ops/s
# Warmup Iteration   2: 1596218.969 ops/s
# Warmup Iteration   3: 1620805.653 ops/s
# Warmup Iteration   4: 1458748.420 ops/s
# Warmup Iteration   5: 1535002.762 ops/s
# Warmup Iteration   6: 1635845.181 ops/s
# Warmup Iteration   7: 1642626.199 ops/s
# Warmup Iteration   8: 1631106.646 ops/s
# Warmup Iteration   9: 1635471.186 ops/s
# Warmup Iteration  10: 1635086.542 ops/s
# Warmup Iteration  11: 1635938.341 ops/s
# Warmup Iteration  12: 1643613.445 ops/s
# Warmup Iteration  13: 1631576.607 ops/s
# Warmup Iteration  14: 1634396.418 ops/s
# Warmup Iteration  15: 1634320.901 ops/s
# Warmup Iteration  16: 1636861.812 ops/s
# Warmup Iteration  17: 1632697.936 ops/s
# Warmup Iteration  18: 1640780.153 ops/s
# Warmup Iteration  19: 1624435.337 ops/s
# Warmup Iteration  20: 1635969.992 ops/s
# Warmup Iteration  21: 1636133.909 ops/s
# Warmup Iteration  22: 1635843.316 ops/s
# Warmup Iteration  23: 1643170.515 ops/s
# Warmup Iteration  24: 1635949.419 ops/s
# Warmup Iteration  25: 1641975.877 ops/s
# Warmup Iteration  26: 1636917.588 ops/s
# Warmup Iteration  27: 1630970.357 ops/s
# Warmup Iteration  28: 1635402.486 ops/s
# Warmup Iteration  29: 1628820.755 ops/s
# Warmup Iteration  30: 1636345.093 ops/s
Iteration   1: 1641358.212 ops/s
Iteration   2: 1640979.357 ops/s
Iteration   3: 1643534.337 ops/s
Iteration   4: 1639768.072 ops/s
Iteration   5: 1631531.655 ops/s
Iteration   6: 1636465.665 ops/s
Iteration   7: 1642943.240 ops/s
Iteration   8: 1625010.025 ops/s
Iteration   9: 1639532.987 ops/s
Iteration  10: 1629639.957 ops/s
Iteration  11: 1641012.573 ops/s
Iteration  12: 1638397.042 ops/s
Iteration  13: 1626245.395 ops/s
Iteration  14: 1640916.713 ops/s
Iteration  15: 1632534.292 ops/s
Iteration  16: 1638753.987 ops/s
Iteration  17: 1629350.820 ops/s
Iteration  18: 1638778.279 ops/s
Iteration  19: 1633391.112 ops/s
Iteration  20: 1632473.658 ops/s
Iteration  21: 1643696.789 ops/s
Iteration  22: 1653367.669 ops/s
Iteration  23: 1631066.518 ops/s
Iteration  24: 1640641.486 ops/s
Iteration  25: 1639838.003 ops/s
Iteration  26: 1636382.430 ops/s
Iteration  27: 1637225.227 ops/s
Iteration  28: 1631397.780 ops/s
Iteration  29: 1638102.563 ops/s
Iteration  30: 1631287.680 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith":
  1636854.117 ±(99.9%) 4032.788 ops/s [Average]
  (min, avg, max) = (1625010.025, 1636854.117, 1653367.669), stdev = 6036.087
  CI (99.9%): [1632821.329, 1640886.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_selectWith  thrpt   30  1636854.117 ± 4032.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471591.682 ops/s
# Warmup Iteration   2: 1091637.710 ops/s
# Warmup Iteration   3: 1143983.972 ops/s
# Warmup Iteration   4: 1094224.303 ops/s
# Warmup Iteration   5: 1024622.784 ops/s
# Warmup Iteration   6: 1161365.669 ops/s
# Warmup Iteration   7: 1151440.455 ops/s
# Warmup Iteration   8: 1158833.217 ops/s
# Warmup Iteration   9: 1160419.608 ops/s
# Warmup Iteration  10: 1162482.972 ops/s
# Warmup Iteration  11: 1162968.530 ops/s
# Warmup Iteration  12: 1156435.025 ops/s
# Warmup Iteration  13: 1155028.224 ops/s
# Warmup Iteration  14: 1159153.122 ops/s
# Warmup Iteration  15: 1153914.686 ops/s
# Warmup Iteration  16: 1158014.811 ops/s
# Warmup Iteration  17: 1150712.024 ops/s
# Warmup Iteration  18: 1160484.543 ops/s
# Warmup Iteration  19: 1160788.194 ops/s
# Warmup Iteration  20: 1165671.925 ops/s
# Warmup Iteration  21: 1158356.508 ops/s
# Warmup Iteration  22: 1158314.796 ops/s
# Warmup Iteration  23: 1158961.743 ops/s
# Warmup Iteration  24: 1161825.468 ops/s
# Warmup Iteration  25: 1159689.235 ops/s
# Warmup Iteration  26: 1161649.770 ops/s
# Warmup Iteration  27: 1158827.608 ops/s
# Warmup Iteration  28: 1151649.308 ops/s
# Warmup Iteration  29: 1162250.407 ops/s
# Warmup Iteration  30: 1163104.246 ops/s
Iteration   1: 1156009.846 ops/s
Iteration   2: 1156360.456 ops/s
Iteration   3: 1161391.137 ops/s
Iteration   4: 1158066.605 ops/s
Iteration   5: 1159526.061 ops/s
Iteration   6: 1153346.837 ops/s
Iteration   7: 1152943.640 ops/s
Iteration   8: 1163297.075 ops/s
Iteration   9: 1157740.217 ops/s
Iteration  10: 1161239.431 ops/s
Iteration  11: 1156233.009 ops/s
Iteration  12: 1163760.133 ops/s
Iteration  13: 1161228.700 ops/s
Iteration  14: 1164608.651 ops/s
Iteration  15: 1155016.966 ops/s
Iteration  16: 1161530.913 ops/s
Iteration  17: 1164635.182 ops/s
Iteration  18: 1150713.582 ops/s
Iteration  19: 1156291.185 ops/s
Iteration  20: 1161929.837 ops/s
Iteration  21: 1160993.370 ops/s
Iteration  22: 1163857.330 ops/s
Iteration  23: 1165722.080 ops/s
Iteration  24: 1157631.110 ops/s
Iteration  25: 1159483.602 ops/s
Iteration  26: 1165624.356 ops/s
Iteration  27: 1160392.676 ops/s
Iteration  28: 1155354.683 ops/s
Iteration  29: 1165755.248 ops/s
Iteration  30: 1159912.553 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_selectWith_target":
  1159686.549 ±(99.9%) 2741.050 ops/s [Average]
  (min, avg, max) = (1150713.582, 1159686.549, 1165755.248), stdev = 4102.674
  CI (99.9%): [1156945.499, 1162427.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_selectWith_target  thrpt   30  1159686.549 ± 2741.050  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 40748.351 ops/s
# Warmup Iteration   2: 50570.370 ops/s
# Warmup Iteration   3: 77555.241 ops/s
# Warmup Iteration   4: 78073.346 ops/s
# Warmup Iteration   5: 77334.367 ops/s
# Warmup Iteration   6: 77654.546 ops/s
# Warmup Iteration   7: 77525.767 ops/s
# Warmup Iteration   8: 77526.548 ops/s
# Warmup Iteration   9: 77363.009 ops/s
# Warmup Iteration  10: 64869.470 ops/s
# Warmup Iteration  11: 78244.110 ops/s
# Warmup Iteration  12: 77907.338 ops/s
# Warmup Iteration  13: 77983.530 ops/s
# Warmup Iteration  14: 77689.537 ops/s
# Warmup Iteration  15: 77483.235 ops/s
# Warmup Iteration  16: 77781.241 ops/s
# Warmup Iteration  17: 76905.645 ops/s
# Warmup Iteration  18: 77431.997 ops/s
# Warmup Iteration  19: 77812.254 ops/s
# Warmup Iteration  20: 77847.138 ops/s
# Warmup Iteration  21: 77876.288 ops/s
# Warmup Iteration  22: 78307.703 ops/s
# Warmup Iteration  23: 77869.117 ops/s
# Warmup Iteration  24: 78160.014 ops/s
# Warmup Iteration  25: 77722.466 ops/s
# Warmup Iteration  26: 77825.365 ops/s
# Warmup Iteration  27: 77710.659 ops/s
# Warmup Iteration  28: 77810.042 ops/s
# Warmup Iteration  29: 78227.770 ops/s
# Warmup Iteration  30: 78006.755 ops/s
Iteration   1: 78153.213 ops/s
Iteration   2: 77316.469 ops/s
Iteration   3: 77419.594 ops/s
Iteration   4: 78016.518 ops/s
Iteration   5: 77649.438 ops/s
Iteration   6: 78069.693 ops/s
Iteration   7: 78143.289 ops/s
Iteration   8: 78179.594 ops/s
Iteration   9: 77980.046 ops/s
Iteration  10: 78075.685 ops/s
Iteration  11: 77603.871 ops/s
Iteration  12: 78061.911 ops/s
Iteration  13: 77905.025 ops/s
Iteration  14: 77564.614 ops/s
Iteration  15: 77628.430 ops/s
Iteration  16: 78052.923 ops/s
Iteration  17: 78379.090 ops/s
Iteration  18: 78129.710 ops/s
Iteration  19: 78340.243 ops/s
Iteration  20: 78704.462 ops/s
Iteration  21: 78850.503 ops/s
Iteration  22: 78135.031 ops/s
Iteration  23: 78281.364 ops/s
Iteration  24: 78311.931 ops/s
Iteration  25: 77971.296 ops/s
Iteration  26: 78098.445 ops/s
Iteration  27: 77939.449 ops/s
Iteration  28: 78120.899 ops/s
Iteration  29: 77664.170 ops/s
Iteration  30: 77804.046 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_serialization":
  78018.365 ±(99.9%) 227.929 ops/s [Average]
  (min, avg, max) = (77316.469, 78018.365, 78850.503), stdev = 341.153
  CI (99.9%): [77790.436, 78246.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_serialization  thrpt   30  78018.365 ± 227.929  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1429824.712 ops/s
# Warmup Iteration   2: 2418354.920 ops/s
# Warmup Iteration   3: 2815470.293 ops/s
# Warmup Iteration   4: 2840024.782 ops/s
# Warmup Iteration   5: 2829338.296 ops/s
# Warmup Iteration   6: 2318955.306 ops/s
# Warmup Iteration   7: 2832907.087 ops/s
# Warmup Iteration   8: 2831166.390 ops/s
# Warmup Iteration   9: 2828867.176 ops/s
# Warmup Iteration  10: 2834315.945 ops/s
# Warmup Iteration  11: 2822955.284 ops/s
# Warmup Iteration  12: 2826843.051 ops/s
# Warmup Iteration  13: 2831671.138 ops/s
# Warmup Iteration  14: 2829408.383 ops/s
# Warmup Iteration  15: 2829923.339 ops/s
# Warmup Iteration  16: 2830948.093 ops/s
# Warmup Iteration  17: 2818028.242 ops/s
# Warmup Iteration  18: 2831701.770 ops/s
# Warmup Iteration  19: 2834569.812 ops/s
# Warmup Iteration  20: 2831567.639 ops/s
# Warmup Iteration  21: 2829519.919 ops/s
# Warmup Iteration  22: 2825829.310 ops/s
# Warmup Iteration  23: 2844753.427 ops/s
# Warmup Iteration  24: 2827597.625 ops/s
# Warmup Iteration  25: 2837573.414 ops/s
# Warmup Iteration  26: 2841368.822 ops/s
# Warmup Iteration  27: 2827062.885 ops/s
# Warmup Iteration  28: 2843827.803 ops/s
# Warmup Iteration  29: 2820320.514 ops/s
# Warmup Iteration  30: 2840043.980 ops/s
Iteration   1: 2860706.060 ops/s
Iteration   2: 2835120.483 ops/s
Iteration   3: 2835963.609 ops/s
Iteration   4: 2817946.679 ops/s
Iteration   5: 2815436.367 ops/s
Iteration   6: 2827420.397 ops/s
Iteration   7: 2842130.256 ops/s
Iteration   8: 2842314.357 ops/s
Iteration   9: 2830775.599 ops/s
Iteration  10: 2848445.343 ops/s
Iteration  11: 2826812.969 ops/s
Iteration  12: 2825960.180 ops/s
Iteration  13: 2810341.224 ops/s
Iteration  14: 2834250.944 ops/s
Iteration  15: 2814003.629 ops/s
Iteration  16: 2820920.106 ops/s
Iteration  17: 2824517.079 ops/s
Iteration  18: 2811375.887 ops/s
Iteration  19: 2848506.736 ops/s
Iteration  20: 2832512.706 ops/s
Iteration  21: 2822078.044 ops/s
Iteration  22: 2842137.964 ops/s
Iteration  23: 2837419.835 ops/s
Iteration  24: 2834061.651 ops/s
Iteration  25: 2825087.917 ops/s
Iteration  26: 2839399.253 ops/s
Iteration  27: 2818216.439 ops/s
Iteration  28: 2843438.717 ops/s
Iteration  29: 2836656.033 ops/s
Iteration  30: 2828363.927 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDouble":
  2831077.346 ±(99.9%) 8068.168 ops/s [Average]
  (min, avg, max) = (2810341.224, 2831077.346, 2860706.060), stdev = 12076.054
  CI (99.9%): [2823009.179, 2839145.514] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByDouble  thrpt   30  2831077.346 ± 8068.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 54.627 ops/s
# Warmup Iteration   2: 60.232 ops/s
# Warmup Iteration   3: 81.704 ops/s
# Warmup Iteration   4: 87.339 ops/s
# Warmup Iteration   5: 88.332 ops/s
# Warmup Iteration   6: 85.219 ops/s
# Warmup Iteration   7: 88.416 ops/s
# Warmup Iteration   8: 84.934 ops/s
# Warmup Iteration   9: 88.892 ops/s
# Warmup Iteration  10: 88.084 ops/s
# Warmup Iteration  11: 83.393 ops/s
# Warmup Iteration  12: 76.165 ops/s
# Warmup Iteration  13: 87.319 ops/s
# Warmup Iteration  14: 80.105 ops/s
# Warmup Iteration  15: 88.062 ops/s
# Warmup Iteration  16: 81.411 ops/s
# Warmup Iteration  17: 82.776 ops/s
# Warmup Iteration  18: 87.766 ops/s
# Warmup Iteration  19: 88.278 ops/s
# Warmup Iteration  20: 88.040 ops/s
# Warmup Iteration  21: 87.270 ops/s
# Warmup Iteration  22: 88.397 ops/s
# Warmup Iteration  23: 86.712 ops/s
# Warmup Iteration  24: 81.528 ops/s
# Warmup Iteration  25: 84.627 ops/s
# Warmup Iteration  26: 85.645 ops/s
# Warmup Iteration  27: 83.212 ops/s
# Warmup Iteration  28: 83.644 ops/s
# Warmup Iteration  29: 87.332 ops/s
# Warmup Iteration  30: 82.516 ops/s
Iteration   1: 78.569 ops/s
Iteration   2: 88.036 ops/s
Iteration   3: 81.315 ops/s
Iteration   4: 82.125 ops/s
Iteration   5: 83.622 ops/s
Iteration   6: 76.716 ops/s
Iteration   7: 83.820 ops/s
Iteration   8: 85.865 ops/s
Iteration   9: 87.957 ops/s
Iteration  10: 84.796 ops/s
Iteration  11: 85.764 ops/s
Iteration  12: 84.341 ops/s
Iteration  13: 81.047 ops/s
Iteration  14: 83.961 ops/s
Iteration  15: 80.316 ops/s
Iteration  16: 87.524 ops/s
Iteration  17: 87.644 ops/s
Iteration  18: 87.331 ops/s
Iteration  19: 87.899 ops/s
Iteration  20: 87.470 ops/s
Iteration  21: 86.382 ops/s
Iteration  22: 86.766 ops/s
Iteration  23: 86.528 ops/s
Iteration  24: 85.737 ops/s
Iteration  25: 85.075 ops/s
Iteration  26: 85.649 ops/s
Iteration  27: 84.566 ops/s
Iteration  28: 86.494 ops/s
Iteration  29: 83.741 ops/s
Iteration  30: 82.824 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  84.663 ±(99.9%) 1.924 ops/s [Average]
  (min, avg, max) = (76.716, 84.663, 88.036), stdev = 2.880
  CI (99.9%): [82.739, 86.587] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  84.663 ± 1.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1423813.113 ops/s
# Warmup Iteration   2: 2401160.062 ops/s
# Warmup Iteration   3: 2787391.416 ops/s
# Warmup Iteration   4: 2814571.035 ops/s
# Warmup Iteration   5: 2802716.676 ops/s
# Warmup Iteration   6: 2297440.850 ops/s
# Warmup Iteration   7: 2819172.867 ops/s
# Warmup Iteration   8: 2808334.921 ops/s
# Warmup Iteration   9: 2811293.294 ops/s
# Warmup Iteration  10: 2805210.009 ops/s
# Warmup Iteration  11: 2808742.001 ops/s
# Warmup Iteration  12: 2817015.054 ops/s
# Warmup Iteration  13: 2814535.487 ops/s
# Warmup Iteration  14: 2810997.689 ops/s
# Warmup Iteration  15: 2803992.727 ops/s
# Warmup Iteration  16: 2808276.705 ops/s
# Warmup Iteration  17: 2810519.237 ops/s
# Warmup Iteration  18: 2806975.798 ops/s
# Warmup Iteration  19: 2807327.610 ops/s
# Warmup Iteration  20: 2808910.389 ops/s
# Warmup Iteration  21: 2804881.780 ops/s
# Warmup Iteration  22: 2814980.112 ops/s
# Warmup Iteration  23: 2816129.511 ops/s
# Warmup Iteration  24: 2808940.489 ops/s
# Warmup Iteration  25: 2808667.281 ops/s
# Warmup Iteration  26: 2803661.588 ops/s
# Warmup Iteration  27: 2803390.109 ops/s
# Warmup Iteration  28: 2808417.160 ops/s
# Warmup Iteration  29: 2803876.881 ops/s
# Warmup Iteration  30: 2796132.844 ops/s
Iteration   1: 2810428.250 ops/s
Iteration   2: 2796125.818 ops/s
Iteration   3: 2816916.826 ops/s
Iteration   4: 2805470.256 ops/s
Iteration   5: 2841048.423 ops/s
Iteration   6: 2800550.155 ops/s
Iteration   7: 2815951.429 ops/s
Iteration   8: 2821188.813 ops/s
Iteration   9: 2798879.109 ops/s
Iteration  10: 2811856.241 ops/s
Iteration  11: 2798293.205 ops/s
Iteration  12: 2800386.482 ops/s
Iteration  13: 2806903.077 ops/s
Iteration  14: 2811202.372 ops/s
Iteration  15: 2802345.069 ops/s
Iteration  16: 2799815.423 ops/s
Iteration  17: 2802166.362 ops/s
Iteration  18: 2798219.116 ops/s
Iteration  19: 2798616.033 ops/s
Iteration  20: 2797553.344 ops/s
Iteration  21: 2813137.997 ops/s
Iteration  22: 2812872.968 ops/s
Iteration  23: 2815771.233 ops/s
Iteration  24: 2806023.021 ops/s
Iteration  25: 2812355.378 ops/s
Iteration  26: 2809150.648 ops/s
Iteration  27: 2791256.193 ops/s
Iteration  28: 2792250.063 ops/s
Iteration  29: 2802948.063 ops/s
Iteration  30: 2797675.143 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloat":
  2806245.217 ±(99.9%) 6804.549 ops/s [Average]
  (min, avg, max) = (2791256.193, 2806245.217, 2841048.423), stdev = 10184.730
  CI (99.9%): [2799440.668, 2813049.766] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByFloat  thrpt   30  2806245.217 ± 6804.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55.139 ops/s
# Warmup Iteration   2: 59.730 ops/s
# Warmup Iteration   3: 81.112 ops/s
# Warmup Iteration   4: 82.388 ops/s
# Warmup Iteration   5: 86.881 ops/s
# Warmup Iteration   6: 82.807 ops/s
# Warmup Iteration   7: 84.589 ops/s
# Warmup Iteration   8: 87.429 ops/s
# Warmup Iteration   9: 88.330 ops/s
# Warmup Iteration  10: 89.612 ops/s
# Warmup Iteration  11: 85.816 ops/s
# Warmup Iteration  12: 77.224 ops/s
# Warmup Iteration  13: 87.956 ops/s
# Warmup Iteration  14: 86.340 ops/s
# Warmup Iteration  15: 80.900 ops/s
# Warmup Iteration  16: 86.483 ops/s
# Warmup Iteration  17: 88.793 ops/s
# Warmup Iteration  18: 89.865 ops/s
# Warmup Iteration  19: 88.911 ops/s
# Warmup Iteration  20: 88.527 ops/s
# Warmup Iteration  21: 91.177 ops/s
# Warmup Iteration  22: 90.597 ops/s
# Warmup Iteration  23: 88.369 ops/s
# Warmup Iteration  24: 83.730 ops/s
# Warmup Iteration  25: 87.338 ops/s
# Warmup Iteration  26: 90.134 ops/s
# Warmup Iteration  27: 90.116 ops/s
# Warmup Iteration  28: 92.366 ops/s
# Warmup Iteration  29: 83.971 ops/s
# Warmup Iteration  30: 83.944 ops/s
Iteration   1: 85.371 ops/s
Iteration   2: 82.855 ops/s
Iteration   3: 82.467 ops/s
Iteration   4: 81.758 ops/s
Iteration   5: 80.419 ops/s
Iteration   6: 82.932 ops/s
Iteration   7: 88.954 ops/s
Iteration   8: 85.893 ops/s
Iteration   9: 77.693 ops/s
Iteration  10: 79.948 ops/s
Iteration  11: 89.285 ops/s
Iteration  12: 88.358 ops/s
Iteration  13: 89.380 ops/s
Iteration  14: 81.559 ops/s
Iteration  15: 85.157 ops/s
Iteration  16: 85.947 ops/s
Iteration  17: 85.608 ops/s
Iteration  18: 86.085 ops/s
Iteration  19: 81.337 ops/s
Iteration  20: 80.383 ops/s
Iteration  21: 86.281 ops/s
Iteration  22: 83.705 ops/s
Iteration  23: 81.770 ops/s
Iteration  24: 85.113 ops/s
Iteration  25: 88.713 ops/s
Iteration  26: 86.138 ops/s
Iteration  27: 86.313 ops/s
Iteration  28: 81.227 ops/s
Iteration  29: 81.931 ops/s
Iteration  30: 79.735 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  84.077 ±(99.9%) 2.136 ops/s [Average]
  (min, avg, max) = (77.693, 84.077, 89.380), stdev = 3.198
  CI (99.9%): [81.941, 86.214] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt   Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  84.077 ± 2.136  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2398597.442 ops/s
# Warmup Iteration   2: 4816708.170 ops/s
# Warmup Iteration   3: 5103153.673 ops/s
# Warmup Iteration   4: 5119585.247 ops/s
# Warmup Iteration   5: 4216468.424 ops/s
# Warmup Iteration   6: 5092133.992 ops/s
# Warmup Iteration   7: 5075896.806 ops/s
# Warmup Iteration   8: 5093247.940 ops/s
# Warmup Iteration   9: 5097526.142 ops/s
# Warmup Iteration  10: 5067952.526 ops/s
# Warmup Iteration  11: 5082476.104 ops/s
# Warmup Iteration  12: 5085163.881 ops/s
# Warmup Iteration  13: 5082898.794 ops/s
# Warmup Iteration  14: 5055640.429 ops/s
# Warmup Iteration  15: 5087357.868 ops/s
# Warmup Iteration  16: 5070882.289 ops/s
# Warmup Iteration  17: 5113398.093 ops/s
# Warmup Iteration  18: 5145570.451 ops/s
# Warmup Iteration  19: 5116327.850 ops/s
# Warmup Iteration  20: 5129833.692 ops/s
# Warmup Iteration  21: 5130885.790 ops/s
# Warmup Iteration  22: 5139681.118 ops/s
# Warmup Iteration  23: 5124904.022 ops/s
# Warmup Iteration  24: 5134334.222 ops/s
# Warmup Iteration  25: 5123250.601 ops/s
# Warmup Iteration  26: 5143586.386 ops/s
# Warmup Iteration  27: 5114116.252 ops/s
# Warmup Iteration  28: 5130900.060 ops/s
# Warmup Iteration  29: 5120202.430 ops/s
# Warmup Iteration  30: 5116208.241 ops/s
Iteration   1: 5121720.758 ops/s
Iteration   2: 5131986.902 ops/s
Iteration   3: 5146467.493 ops/s
Iteration   4: 5105853.727 ops/s
Iteration   5: 5124845.966 ops/s
Iteration   6: 5153261.014 ops/s
Iteration   7: 5137748.359 ops/s
Iteration   8: 5117644.797 ops/s
Iteration   9: 5130259.912 ops/s
Iteration  10: 5139491.780 ops/s
Iteration  11: 5112609.473 ops/s
Iteration  12: 5138134.677 ops/s
Iteration  13: 5151783.060 ops/s
Iteration  14: 5104676.874 ops/s
Iteration  15: 5106393.617 ops/s
Iteration  16: 5136300.458 ops/s
Iteration  17: 5138905.223 ops/s
Iteration  18: 5114102.810 ops/s
Iteration  19: 5129339.523 ops/s
Iteration  20: 5106234.482 ops/s
Iteration  21: 5112377.268 ops/s
Iteration  22: 5107763.680 ops/s
Iteration  23: 5142675.555 ops/s
Iteration  24: 5126322.182 ops/s
Iteration  25: 5138993.207 ops/s
Iteration  26: 5131765.040 ops/s
Iteration  27: 5104538.198 ops/s
Iteration  28: 5117303.888 ops/s
Iteration  29: 5119196.029 ops/s
Iteration  30: 5124310.613 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByInt":
  5125766.885 ±(99.9%) 9816.079 ops/s [Average]
  (min, avg, max) = (5104538.198, 5125766.885, 5153261.014), stdev = 14692.246
  CI (99.9%): [5115950.806, 5135582.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByInt  thrpt   30  5125766.885 ± 9816.079  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2390461.334 ops/s
# Warmup Iteration   2: 4807684.382 ops/s
# Warmup Iteration   3: 5117128.551 ops/s
# Warmup Iteration   4: 5144417.822 ops/s
# Warmup Iteration   5: 4239420.271 ops/s
# Warmup Iteration   6: 5127103.283 ops/s
# Warmup Iteration   7: 5116357.315 ops/s
# Warmup Iteration   8: 5125942.356 ops/s
# Warmup Iteration   9: 5131902.002 ops/s
# Warmup Iteration  10: 5138343.093 ops/s
# Warmup Iteration  11: 5114905.720 ops/s
# Warmup Iteration  12: 5122820.462 ops/s
# Warmup Iteration  13: 5116441.985 ops/s
# Warmup Iteration  14: 5082365.338 ops/s
# Warmup Iteration  15: 5100513.644 ops/s
# Warmup Iteration  16: 5138426.337 ops/s
# Warmup Iteration  17: 5136239.846 ops/s
# Warmup Iteration  18: 5167802.166 ops/s
# Warmup Iteration  19: 5135337.010 ops/s
# Warmup Iteration  20: 5170180.102 ops/s
# Warmup Iteration  21: 5155077.134 ops/s
# Warmup Iteration  22: 5157586.317 ops/s
# Warmup Iteration  23: 5165808.536 ops/s
# Warmup Iteration  24: 5167542.133 ops/s
# Warmup Iteration  25: 5159470.519 ops/s
# Warmup Iteration  26: 5144881.342 ops/s
# Warmup Iteration  27: 5133222.220 ops/s
# Warmup Iteration  28: 5114073.014 ops/s
# Warmup Iteration  29: 5131948.656 ops/s
# Warmup Iteration  30: 5160002.730 ops/s
Iteration   1: 5154253.491 ops/s
Iteration   2: 5163625.818 ops/s
Iteration   3: 5176398.489 ops/s
Iteration   4: 5129833.721 ops/s
Iteration   5: 5147474.048 ops/s
Iteration   6: 5163429.294 ops/s
Iteration   7: 5144643.583 ops/s
Iteration   8: 5176752.757 ops/s
Iteration   9: 5159204.512 ops/s
Iteration  10: 5168389.803 ops/s
Iteration  11: 5151212.639 ops/s
Iteration  12: 5139081.899 ops/s
Iteration  13: 5170413.318 ops/s
Iteration  14: 5167987.385 ops/s
Iteration  15: 5118918.912 ops/s
Iteration  16: 5150147.836 ops/s
Iteration  17: 5165236.700 ops/s
Iteration  18: 5148510.511 ops/s
Iteration  19: 5163247.892 ops/s
Iteration  20: 5154419.823 ops/s
Iteration  21: 5177690.444 ops/s
Iteration  22: 5124486.771 ops/s
Iteration  23: 5168260.572 ops/s
Iteration  24: 5167505.997 ops/s
Iteration  25: 5183375.665 ops/s
Iteration  26: 5152780.949 ops/s
Iteration  27: 5096461.667 ops/s
Iteration  28: 5134756.737 ops/s
Iteration  29: 5131059.808 ops/s
Iteration  30: 5181837.159 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumByLong":
  5154379.940 ±(99.9%) 13586.464 ops/s [Average]
  (min, avg, max) = (5096461.667, 5154379.940, 5183375.665), stdev = 20335.581
  CI (99.9%): [5140793.476, 5167966.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumByLong  thrpt   30  5154379.940 ± 13586.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8355600.953 ops/s
# Warmup Iteration   2: 17683600.801 ops/s
# Warmup Iteration   3: 17707149.264 ops/s
# Warmup Iteration   4: 14945939.836 ops/s
# Warmup Iteration   5: 17759938.835 ops/s
# Warmup Iteration   6: 17801254.209 ops/s
# Warmup Iteration   7: 17817301.700 ops/s
# Warmup Iteration   8: 17757059.724 ops/s
# Warmup Iteration   9: 17895191.669 ops/s
# Warmup Iteration  10: 17736203.187 ops/s
# Warmup Iteration  11: 17787765.155 ops/s
# Warmup Iteration  12: 17702368.081 ops/s
# Warmup Iteration  13: 17811198.395 ops/s
# Warmup Iteration  14: 17824642.284 ops/s
# Warmup Iteration  15: 17804137.834 ops/s
# Warmup Iteration  16: 17803381.465 ops/s
# Warmup Iteration  17: 17793328.278 ops/s
# Warmup Iteration  18: 17860383.481 ops/s
# Warmup Iteration  19: 17904963.643 ops/s
# Warmup Iteration  20: 17832995.523 ops/s
# Warmup Iteration  21: 17848244.316 ops/s
# Warmup Iteration  22: 17887589.371 ops/s
# Warmup Iteration  23: 17854672.114 ops/s
# Warmup Iteration  24: 17825900.748 ops/s
# Warmup Iteration  25: 17882190.324 ops/s
# Warmup Iteration  26: 17914007.027 ops/s
# Warmup Iteration  27: 17866382.724 ops/s
# Warmup Iteration  28: 17765446.792 ops/s
# Warmup Iteration  29: 17777337.577 ops/s
# Warmup Iteration  30: 17854823.698 ops/s
Iteration   1: 18028609.878 ops/s
Iteration   2: 17880824.419 ops/s
Iteration   3: 17879032.339 ops/s
Iteration   4: 17999037.988 ops/s
Iteration   5: 17888984.008 ops/s
Iteration   6: 17798293.361 ops/s
Iteration   7: 17830948.378 ops/s
Iteration   8: 17948215.192 ops/s
Iteration   9: 17860810.384 ops/s
Iteration  10: 17896114.943 ops/s
Iteration  11: 17900339.475 ops/s
Iteration  12: 17909667.393 ops/s
Iteration  13: 17844991.103 ops/s
Iteration  14: 17775059.380 ops/s
Iteration  15: 17849251.517 ops/s
Iteration  16: 17981010.414 ops/s
Iteration  17: 17856874.088 ops/s
Iteration  18: 17896364.051 ops/s
Iteration  19: 18040611.191 ops/s
Iteration  20: 17912637.111 ops/s
Iteration  21: 17900053.874 ops/s
Iteration  22: 17882409.961 ops/s
Iteration  23: 17895454.040 ops/s
Iteration  24: 17791604.451 ops/s
Iteration  25: 17889071.931 ops/s
Iteration  26: 17984793.852 ops/s
Iteration  27: 17831665.817 ops/s
Iteration  28: 17952110.801 ops/s
Iteration  29: 17880331.485 ops/s
Iteration  30: 17971071.246 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDouble":
  17898541.469 ±(99.9%) 44401.936 ops/s [Average]
  (min, avg, max) = (17775059.380, 17898541.469, 18040611.191), stdev = 66458.732
  CI (99.9%): [17854139.533, 17942943.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumDouble  thrpt   30  17898541.469 ± 44401.936  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 161.269 ops/s
# Warmup Iteration   2: 181.924 ops/s
# Warmup Iteration   3: 245.650 ops/s
# Warmup Iteration   4: 243.243 ops/s
# Warmup Iteration   5: 244.141 ops/s
# Warmup Iteration   6: 242.525 ops/s
# Warmup Iteration   7: 245.435 ops/s
# Warmup Iteration   8: 245.318 ops/s
# Warmup Iteration   9: 245.134 ops/s
# Warmup Iteration  10: 243.552 ops/s
# Warmup Iteration  11: 204.171 ops/s
# Warmup Iteration  12: 245.494 ops/s
# Warmup Iteration  13: 240.428 ops/s
# Warmup Iteration  14: 244.397 ops/s
# Warmup Iteration  15: 244.821 ops/s
# Warmup Iteration  16: 245.786 ops/s
# Warmup Iteration  17: 244.083 ops/s
# Warmup Iteration  18: 241.703 ops/s
# Warmup Iteration  19: 242.963 ops/s
# Warmup Iteration  20: 243.076 ops/s
# Warmup Iteration  21: 243.361 ops/s
# Warmup Iteration  22: 239.525 ops/s
# Warmup Iteration  23: 241.846 ops/s
# Warmup Iteration  24: 240.798 ops/s
# Warmup Iteration  25: 242.306 ops/s
# Warmup Iteration  26: 242.653 ops/s
# Warmup Iteration  27: 241.599 ops/s
# Warmup Iteration  28: 241.430 ops/s
# Warmup Iteration  29: 242.533 ops/s
# Warmup Iteration  30: 243.377 ops/s
Iteration   1: 245.161 ops/s
Iteration   2: 241.465 ops/s
Iteration   3: 242.672 ops/s
Iteration   4: 242.732 ops/s
Iteration   5: 244.131 ops/s
Iteration   6: 242.872 ops/s
Iteration   7: 243.549 ops/s
Iteration   8: 241.485 ops/s
Iteration   9: 243.617 ops/s
Iteration  10: 244.742 ops/s
Iteration  11: 242.822 ops/s
Iteration  12: 243.450 ops/s
Iteration  13: 243.244 ops/s
Iteration  14: 243.693 ops/s
Iteration  15: 239.632 ops/s
Iteration  16: 241.100 ops/s
Iteration  17: 241.981 ops/s
Iteration  18: 245.501 ops/s
Iteration  19: 243.640 ops/s
Iteration  20: 242.449 ops/s
Iteration  21: 244.586 ops/s
Iteration  22: 243.765 ops/s
Iteration  23: 240.474 ops/s
Iteration  24: 239.819 ops/s
Iteration  25: 239.527 ops/s
Iteration  26: 236.612 ops/s
Iteration  27: 240.859 ops/s
Iteration  28: 240.816 ops/s
Iteration  29: 243.740 ops/s
Iteration  30: 244.164 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  242.477 ±(99.9%) 1.323 ops/s [Average]
  (min, avg, max) = (236.612, 242.477, 245.501), stdev = 1.981
  CI (99.9%): [241.153, 243.800] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  242.477 ± 1.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 186.889 ops/s
# Warmup Iteration   2: 238.237 ops/s
# Warmup Iteration   3: 304.984 ops/s
# Warmup Iteration   4: 305.811 ops/s
# Warmup Iteration   5: 305.418 ops/s
# Warmup Iteration   6: 303.926 ops/s
# Warmup Iteration   7: 306.445 ops/s
# Warmup Iteration   8: 308.733 ops/s
# Warmup Iteration   9: 255.504 ops/s
# Warmup Iteration  10: 299.316 ops/s
# Warmup Iteration  11: 289.410 ops/s
# Warmup Iteration  12: 290.705 ops/s
# Warmup Iteration  13: 294.260 ops/s
# Warmup Iteration  14: 291.151 ops/s
# Warmup Iteration  15: 293.175 ops/s
# Warmup Iteration  16: 293.109 ops/s
# Warmup Iteration  17: 290.452 ops/s
# Warmup Iteration  18: 293.314 ops/s
# Warmup Iteration  19: 295.458 ops/s
# Warmup Iteration  20: 295.101 ops/s
# Warmup Iteration  21: 295.386 ops/s
# Warmup Iteration  22: 296.403 ops/s
# Warmup Iteration  23: 296.166 ops/s
# Warmup Iteration  24: 295.654 ops/s
# Warmup Iteration  25: 296.594 ops/s
# Warmup Iteration  26: 295.780 ops/s
# Warmup Iteration  27: 293.280 ops/s
# Warmup Iteration  28: 293.439 ops/s
# Warmup Iteration  29: 293.681 ops/s
# Warmup Iteration  30: 292.748 ops/s
Iteration   1: 297.825 ops/s
Iteration   2: 297.227 ops/s
Iteration   3: 294.436 ops/s
Iteration   4: 294.792 ops/s
Iteration   5: 295.173 ops/s
Iteration   6: 295.688 ops/s
Iteration   7: 295.202 ops/s
Iteration   8: 295.256 ops/s
Iteration   9: 295.791 ops/s
Iteration  10: 294.604 ops/s
Iteration  11: 295.844 ops/s
Iteration  12: 296.602 ops/s
Iteration  13: 294.566 ops/s
Iteration  14: 296.474 ops/s
Iteration  15: 294.860 ops/s
Iteration  16: 294.881 ops/s
Iteration  17: 296.096 ops/s
Iteration  18: 292.222 ops/s
Iteration  19: 295.768 ops/s
Iteration  20: 293.852 ops/s
Iteration  21: 290.669 ops/s
Iteration  22: 291.320 ops/s
Iteration  23: 291.833 ops/s
Iteration  24: 293.909 ops/s
Iteration  25: 296.823 ops/s
Iteration  26: 294.185 ops/s
Iteration  27: 290.114 ops/s
Iteration  28: 293.327 ops/s
Iteration  29: 296.265 ops/s
Iteration  30: 295.410 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  294.700 ±(99.9%) 1.268 ops/s [Average]
  (min, avg, max) = (290.114, 294.700, 297.825), stdev = 1.898
  CI (99.9%): [293.432, 295.968] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt    Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  294.700 ± 1.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8008136.901 ops/s
# Warmup Iteration   2: 17197836.329 ops/s
# Warmup Iteration   3: 17447790.599 ops/s
# Warmup Iteration   4: 14630612.740 ops/s
# Warmup Iteration   5: 17350045.278 ops/s
# Warmup Iteration   6: 17368194.466 ops/s
# Warmup Iteration   7: 17392189.578 ops/s
# Warmup Iteration   8: 17411173.998 ops/s
# Warmup Iteration   9: 17418552.493 ops/s
# Warmup Iteration  10: 17360121.127 ops/s
# Warmup Iteration  11: 17339889.123 ops/s
# Warmup Iteration  12: 17350913.966 ops/s
# Warmup Iteration  13: 17418426.369 ops/s
# Warmup Iteration  14: 17443341.308 ops/s
# Warmup Iteration  15: 17431798.724 ops/s
# Warmup Iteration  16: 17402749.551 ops/s
# Warmup Iteration  17: 17504567.929 ops/s
# Warmup Iteration  18: 17506911.818 ops/s
# Warmup Iteration  19: 17470413.293 ops/s
# Warmup Iteration  20: 17442807.533 ops/s
# Warmup Iteration  21: 17462022.045 ops/s
# Warmup Iteration  22: 17537007.066 ops/s
# Warmup Iteration  23: 17488745.771 ops/s
# Warmup Iteration  24: 17497421.980 ops/s
# Warmup Iteration  25: 17440956.418 ops/s
# Warmup Iteration  26: 17389293.556 ops/s
# Warmup Iteration  27: 17560708.707 ops/s
# Warmup Iteration  28: 17461396.270 ops/s
# Warmup Iteration  29: 17457538.128 ops/s
# Warmup Iteration  30: 17520481.365 ops/s
Iteration   1: 17492373.691 ops/s
Iteration   2: 17407654.137 ops/s
Iteration   3: 17469004.725 ops/s
Iteration   4: 17343985.619 ops/s
Iteration   5: 17464360.655 ops/s
Iteration   6: 17451620.753 ops/s
Iteration   7: 17423043.633 ops/s
Iteration   8: 17489898.528 ops/s
Iteration   9: 17467782.590 ops/s
Iteration  10: 17527867.810 ops/s
Iteration  11: 17520451.204 ops/s
Iteration  12: 17504157.980 ops/s
Iteration  13: 17570843.721 ops/s
Iteration  14: 17451348.359 ops/s
Iteration  15: 17535128.090 ops/s
Iteration  16: 17364781.847 ops/s
Iteration  17: 17373884.455 ops/s
Iteration  18: 17447364.974 ops/s
Iteration  19: 17553633.260 ops/s
Iteration  20: 17417431.791 ops/s
Iteration  21: 17580935.859 ops/s
Iteration  22: 17326147.035 ops/s
Iteration  23: 17369309.125 ops/s
Iteration  24: 17449727.610 ops/s
Iteration  25: 17388138.443 ops/s
Iteration  26: 17482366.344 ops/s
Iteration  27: 17442329.846 ops/s
Iteration  28: 17538495.753 ops/s
Iteration  29: 17460364.734 ops/s
Iteration  30: 17480773.903 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloat":
  17459840.216 ±(99.9%) 44493.783 ops/s [Average]
  (min, avg, max) = (17326147.035, 17459840.216, 17580935.859), stdev = 66596.205
  CI (99.9%): [17415346.433, 17504333.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumFloat  thrpt   30  17459840.216 ± 44493.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160.857 ops/s
# Warmup Iteration   2: 183.930 ops/s
# Warmup Iteration   3: 244.811 ops/s
# Warmup Iteration   4: 245.617 ops/s
# Warmup Iteration   5: 246.461 ops/s
# Warmup Iteration   6: 246.100 ops/s
# Warmup Iteration   7: 245.630 ops/s
# Warmup Iteration   8: 245.237 ops/s
# Warmup Iteration   9: 247.306 ops/s
# Warmup Iteration  10: 242.888 ops/s
# Warmup Iteration  11: 206.134 ops/s
# Warmup Iteration  12: 241.669 ops/s
# Warmup Iteration  13: 230.840 ops/s
# Warmup Iteration  14: 230.163 ops/s
# Warmup Iteration  15: 228.929 ops/s
# Warmup Iteration  16: 230.082 ops/s
# Warmup Iteration  17: 231.392 ops/s
# Warmup Iteration  18: 230.141 ops/s
# Warmup Iteration  19: 231.135 ops/s
# Warmup Iteration  20: 231.254 ops/s
# Warmup Iteration  21: 231.136 ops/s
# Warmup Iteration  22: 231.564 ops/s
# Warmup Iteration  23: 230.936 ops/s
# Warmup Iteration  24: 230.873 ops/s
# Warmup Iteration  25: 230.650 ops/s
# Warmup Iteration  26: 227.953 ops/s
# Warmup Iteration  27: 231.900 ops/s
# Warmup Iteration  28: 231.972 ops/s
# Warmup Iteration  29: 230.561 ops/s
# Warmup Iteration  30: 230.675 ops/s
Iteration   1: 231.469 ops/s
Iteration   2: 232.633 ops/s
Iteration   3: 231.650 ops/s
Iteration   4: 232.421 ops/s
Iteration   5: 231.024 ops/s
Iteration   6: 228.845 ops/s
Iteration   7: 231.870 ops/s
Iteration   8: 230.721 ops/s
Iteration   9: 230.757 ops/s
Iteration  10: 231.669 ops/s
Iteration  11: 231.701 ops/s
Iteration  12: 231.866 ops/s
Iteration  13: 231.184 ops/s
Iteration  14: 230.815 ops/s
Iteration  15: 229.196 ops/s
Iteration  16: 230.101 ops/s
Iteration  17: 231.033 ops/s
Iteration  18: 231.744 ops/s
Iteration  19: 224.666 ops/s
Iteration  20: 227.484 ops/s
Iteration  21: 229.751 ops/s
Iteration  22: 230.893 ops/s
Iteration  23: 230.590 ops/s
Iteration  24: 231.476 ops/s
Iteration  25: 231.366 ops/s
Iteration  26: 230.526 ops/s
Iteration  27: 231.242 ops/s
Iteration  28: 232.045 ops/s
Iteration  29: 229.229 ops/s
Iteration  30: 230.723 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  230.690 ±(99.9%) 1.064 ops/s [Average]
  (min, avg, max) = (224.666, 230.690, 232.633), stdev = 1.592
  CI (99.9%): [229.626, 231.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  230.690 ± 1.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 186.552 ops/s
# Warmup Iteration   2: 239.786 ops/s
# Warmup Iteration   3: 305.075 ops/s
# Warmup Iteration   4: 307.957 ops/s
# Warmup Iteration   5: 306.148 ops/s
# Warmup Iteration   6: 306.916 ops/s
# Warmup Iteration   7: 308.855 ops/s
# Warmup Iteration   8: 304.136 ops/s
# Warmup Iteration   9: 257.310 ops/s
# Warmup Iteration  10: 298.267 ops/s
# Warmup Iteration  11: 290.278 ops/s
# Warmup Iteration  12: 291.317 ops/s
# Warmup Iteration  13: 294.370 ops/s
# Warmup Iteration  14: 293.437 ops/s
# Warmup Iteration  15: 293.273 ops/s
# Warmup Iteration  16: 292.168 ops/s
# Warmup Iteration  17: 293.735 ops/s
# Warmup Iteration  18: 292.774 ops/s
# Warmup Iteration  19: 292.842 ops/s
# Warmup Iteration  20: 292.166 ops/s
# Warmup Iteration  21: 295.572 ops/s
# Warmup Iteration  22: 293.677 ops/s
# Warmup Iteration  23: 293.172 ops/s
# Warmup Iteration  24: 289.966 ops/s
# Warmup Iteration  25: 291.637 ops/s
# Warmup Iteration  26: 292.500 ops/s
# Warmup Iteration  27: 293.246 ops/s
# Warmup Iteration  28: 292.742 ops/s
# Warmup Iteration  29: 293.513 ops/s
# Warmup Iteration  30: 293.587 ops/s
Iteration   1: 294.020 ops/s
Iteration   2: 292.754 ops/s
Iteration   3: 294.622 ops/s
Iteration   4: 295.086 ops/s
Iteration   5: 292.602 ops/s
Iteration   6: 290.761 ops/s
Iteration   7: 292.612 ops/s
Iteration   8: 293.267 ops/s
Iteration   9: 293.698 ops/s
Iteration  10: 295.441 ops/s
Iteration  11: 291.685 ops/s
Iteration  12: 293.406 ops/s
Iteration  13: 295.946 ops/s
Iteration  14: 295.777 ops/s
Iteration  15: 294.064 ops/s
Iteration  16: 292.637 ops/s
Iteration  17: 293.835 ops/s
Iteration  18: 293.686 ops/s
Iteration  19: 293.334 ops/s
Iteration  20: 286.976 ops/s
Iteration  21: 288.214 ops/s
Iteration  22: 294.123 ops/s
Iteration  23: 292.366 ops/s
Iteration  24: 291.294 ops/s
Iteration  25: 294.222 ops/s
Iteration  26: 293.475 ops/s
Iteration  27: 292.513 ops/s
Iteration  28: 290.180 ops/s
Iteration  29: 293.397 ops/s
Iteration  30: 293.289 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  292.976 ±(99.9%) 1.328 ops/s [Average]
  (min, avg, max) = (286.976, 292.976, 295.946), stdev = 1.988
  CI (99.9%): [291.648, 294.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt    Score   Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  292.976 ± 1.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5888349.134 ops/s
# Warmup Iteration   2: 10446932.796 ops/s
# Warmup Iteration   3: 11334015.842 ops/s
# Warmup Iteration   4: 11417067.389 ops/s
# Warmup Iteration   5: 9508652.211 ops/s
# Warmup Iteration   6: 11385493.525 ops/s
# Warmup Iteration   7: 11421932.162 ops/s
# Warmup Iteration   8: 11433889.477 ops/s
# Warmup Iteration   9: 11382621.916 ops/s
# Warmup Iteration  10: 11358518.048 ops/s
# Warmup Iteration  11: 11378100.829 ops/s
# Warmup Iteration  12: 11418054.538 ops/s
# Warmup Iteration  13: 11410502.958 ops/s
# Warmup Iteration  14: 11413718.726 ops/s
# Warmup Iteration  15: 11392633.065 ops/s
# Warmup Iteration  16: 11424944.000 ops/s
# Warmup Iteration  17: 11374875.216 ops/s
# Warmup Iteration  18: 11423414.461 ops/s
# Warmup Iteration  19: 11442419.437 ops/s
# Warmup Iteration  20: 11432209.286 ops/s
# Warmup Iteration  21: 11450759.048 ops/s
# Warmup Iteration  22: 11445053.377 ops/s
# Warmup Iteration  23: 11359821.902 ops/s
# Warmup Iteration  24: 11451636.180 ops/s
# Warmup Iteration  25: 11399470.282 ops/s
# Warmup Iteration  26: 11428112.624 ops/s
# Warmup Iteration  27: 11406342.381 ops/s
# Warmup Iteration  28: 11419217.270 ops/s
# Warmup Iteration  29: 11451091.976 ops/s
# Warmup Iteration  30: 11422752.558 ops/s
Iteration   1: 11433293.005 ops/s
Iteration   2: 11411473.599 ops/s
Iteration   3: 11434883.023 ops/s
Iteration   4: 11344125.155 ops/s
Iteration   5: 11393447.300 ops/s
Iteration   6: 11376446.287 ops/s
Iteration   7: 11450126.986 ops/s
Iteration   8: 11437247.526 ops/s
Iteration   9: 11403629.894 ops/s
Iteration  10: 11458706.191 ops/s
Iteration  11: 11425018.009 ops/s
Iteration  12: 11413175.164 ops/s
Iteration  13: 11357966.090 ops/s
Iteration  14: 11422484.533 ops/s
Iteration  15: 11397454.311 ops/s
Iteration  16: 11403720.155 ops/s
Iteration  17: 11412403.438 ops/s
Iteration  18: 11367768.417 ops/s
Iteration  19: 11357866.875 ops/s
Iteration  20: 11403703.091 ops/s
Iteration  21: 11400713.100 ops/s
Iteration  22: 11391051.248 ops/s
Iteration  23: 11437227.658 ops/s
Iteration  24: 11443768.127 ops/s
Iteration  25: 11456687.490 ops/s
Iteration  26: 11467882.726 ops/s
Iteration  27: 11479358.226 ops/s
Iteration  28: 11379501.178 ops/s
Iteration  29: 11378368.681 ops/s
Iteration  30: 11354196.375 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumInteger":
  11409789.795 ±(99.9%) 23936.087 ops/s [Average]
  (min, avg, max) = (11344125.155, 11409789.795, 11479358.226), stdev = 35826.411
  CI (99.9%): [11385853.708, 11433725.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumInteger  thrpt   30  11409789.795 ± 23936.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5889093.246 ops/s
# Warmup Iteration   2: 10703654.312 ops/s
# Warmup Iteration   3: 11379487.021 ops/s
# Warmup Iteration   4: 11437042.382 ops/s
# Warmup Iteration   5: 9567748.967 ops/s
# Warmup Iteration   6: 11455931.272 ops/s
# Warmup Iteration   7: 11459698.040 ops/s
# Warmup Iteration   8: 11419072.389 ops/s
# Warmup Iteration   9: 11380095.727 ops/s
# Warmup Iteration  10: 11462412.067 ops/s
# Warmup Iteration  11: 11444277.980 ops/s
# Warmup Iteration  12: 11428286.393 ops/s
# Warmup Iteration  13: 11396119.071 ops/s
# Warmup Iteration  14: 11433295.883 ops/s
# Warmup Iteration  15: 11434675.689 ops/s
# Warmup Iteration  16: 11426980.154 ops/s
# Warmup Iteration  17: 11456385.057 ops/s
# Warmup Iteration  18: 11406783.325 ops/s
# Warmup Iteration  19: 11379364.615 ops/s
# Warmup Iteration  20: 11407958.459 ops/s
# Warmup Iteration  21: 11438101.709 ops/s
# Warmup Iteration  22: 11382180.837 ops/s
# Warmup Iteration  23: 11425217.633 ops/s
# Warmup Iteration  24: 11436279.527 ops/s
# Warmup Iteration  25: 11417669.336 ops/s
# Warmup Iteration  26: 11481114.177 ops/s
# Warmup Iteration  27: 11432521.280 ops/s
# Warmup Iteration  28: 11467517.291 ops/s
# Warmup Iteration  29: 11483189.938 ops/s
# Warmup Iteration  30: 11433953.845 ops/s
Iteration   1: 11474596.127 ops/s
Iteration   2: 11434641.188 ops/s
Iteration   3: 11446992.491 ops/s
Iteration   4: 11426897.173 ops/s
Iteration   5: 11452440.926 ops/s
Iteration   6: 11458556.069 ops/s
Iteration   7: 11402349.366 ops/s
Iteration   8: 11452192.824 ops/s
Iteration   9: 11460066.760 ops/s
Iteration  10: 11470100.141 ops/s
Iteration  11: 11440223.968 ops/s
Iteration  12: 11457109.379 ops/s
Iteration  13: 11414282.682 ops/s
Iteration  14: 11483284.715 ops/s
Iteration  15: 11460124.918 ops/s
Iteration  16: 11442892.539 ops/s
Iteration  17: 11351889.118 ops/s
Iteration  18: 11407823.906 ops/s
Iteration  19: 11455486.508 ops/s
Iteration  20: 11404928.239 ops/s
Iteration  21: 11419683.280 ops/s
Iteration  22: 11451727.703 ops/s
Iteration  23: 11464311.849 ops/s
Iteration  24: 11445051.372 ops/s
Iteration  25: 11357129.557 ops/s
Iteration  26: 11431961.318 ops/s
Iteration  27: 11366837.097 ops/s
Iteration  28: 11429253.070 ops/s
Iteration  29: 11441629.229 ops/s
Iteration  30: 11469055.276 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_sumLong":
  11435783.960 ±(99.9%) 22266.537 ops/s [Average]
  (min, avg, max) = (11351889.118, 11435783.960, 11483284.715), stdev = 33327.507
  CI (99.9%): [11413517.423, 11458050.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_sumLong  thrpt   30  11435783.960 ± 22266.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5232193.882 ops/s
# Warmup Iteration   2: 11027697.040 ops/s
# Warmup Iteration   3: 11167945.978 ops/s
# Warmup Iteration   4: 10402337.547 ops/s
# Warmup Iteration   5: 10059550.011 ops/s
# Warmup Iteration   6: 11165911.347 ops/s
# Warmup Iteration   7: 11158379.493 ops/s
# Warmup Iteration   8: 11074923.777 ops/s
# Warmup Iteration   9: 11150823.696 ops/s
# Warmup Iteration  10: 11087104.695 ops/s
# Warmup Iteration  11: 11135040.569 ops/s
# Warmup Iteration  12: 11137101.737 ops/s
# Warmup Iteration  13: 11193429.978 ops/s
# Warmup Iteration  14: 11106706.172 ops/s
# Warmup Iteration  15: 11059531.263 ops/s
# Warmup Iteration  16: 11194675.633 ops/s
# Warmup Iteration  17: 11157183.416 ops/s
# Warmup Iteration  18: 11120116.063 ops/s
# Warmup Iteration  19: 11117328.663 ops/s
# Warmup Iteration  20: 11131892.510 ops/s
# Warmup Iteration  21: 11172012.134 ops/s
# Warmup Iteration  22: 11199263.348 ops/s
# Warmup Iteration  23: 11128589.428 ops/s
# Warmup Iteration  24: 11155954.085 ops/s
# Warmup Iteration  25: 11147925.575 ops/s
# Warmup Iteration  26: 11143217.712 ops/s
# Warmup Iteration  27: 11166548.920 ops/s
# Warmup Iteration  28: 11179397.865 ops/s
# Warmup Iteration  29: 11189843.900 ops/s
# Warmup Iteration  30: 11184515.420 ops/s
Iteration   1: 11077447.907 ops/s
Iteration   2: 11183080.874 ops/s
Iteration   3: 11149261.659 ops/s
Iteration   4: 11148711.248 ops/s
Iteration   5: 11119041.054 ops/s
Iteration   6: 11182535.239 ops/s
Iteration   7: 11208945.609 ops/s
Iteration   8: 11143979.072 ops/s
Iteration   9: 11173246.646 ops/s
Iteration  10: 11180095.010 ops/s
Iteration  11: 11143130.265 ops/s
Iteration  12: 11176557.415 ops/s
Iteration  13: 11147866.926 ops/s
Iteration  14: 11172781.067 ops/s
Iteration  15: 11130016.163 ops/s
Iteration  16: 11077961.453 ops/s
Iteration  17: 11171809.277 ops/s
Iteration  18: 11149706.060 ops/s
Iteration  19: 11146349.949 ops/s
Iteration  20: 11150915.421 ops/s
Iteration  21: 11182939.674 ops/s
Iteration  22: 11076569.379 ops/s
Iteration  23: 11200629.485 ops/s
Iteration  24: 11169574.543 ops/s
Iteration  25: 11131907.960 ops/s
Iteration  26: 11143661.903 ops/s
Iteration  27: 11181272.757 ops/s
Iteration  28: 11034465.642 ops/s
Iteration  29: 11188246.351 ops/s
Iteration  30: 11139601.832 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeDouble":
  11149410.261 ±(99.9%) 26714.966 ops/s [Average]
  (min, avg, max) = (11034465.642, 11149410.261, 11208945.609), stdev = 39985.707
  CI (99.9%): [11122695.295, 11176125.227] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_summarizeDouble  thrpt   30  11149410.261 ± 26714.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5214724.308 ops/s
# Warmup Iteration   2: 10727367.893 ops/s
# Warmup Iteration   3: 10964779.969 ops/s
# Warmup Iteration   4: 10554864.172 ops/s
# Warmup Iteration   5: 9533461.917 ops/s
# Warmup Iteration   6: 10993084.904 ops/s
# Warmup Iteration   7: 10996359.032 ops/s
# Warmup Iteration   8: 10959392.339 ops/s
# Warmup Iteration   9: 10997280.647 ops/s
# Warmup Iteration  10: 10973138.615 ops/s
# Warmup Iteration  11: 10985794.542 ops/s
# Warmup Iteration  12: 10959155.189 ops/s
# Warmup Iteration  13: 10989853.524 ops/s
# Warmup Iteration  14: 10980529.487 ops/s
# Warmup Iteration  15: 10970302.155 ops/s
# Warmup Iteration  16: 10997674.380 ops/s
# Warmup Iteration  17: 10988854.239 ops/s
# Warmup Iteration  18: 10912339.738 ops/s
# Warmup Iteration  19: 10961109.611 ops/s
# Warmup Iteration  20: 10937499.247 ops/s
# Warmup Iteration  21: 10959131.161 ops/s
# Warmup Iteration  22: 10922265.838 ops/s
# Warmup Iteration  23: 10978474.354 ops/s
# Warmup Iteration  24: 10949270.976 ops/s
# Warmup Iteration  25: 10930238.669 ops/s
# Warmup Iteration  26: 10924684.844 ops/s
# Warmup Iteration  27: 10993566.040 ops/s
# Warmup Iteration  28: 10956822.430 ops/s
# Warmup Iteration  29: 10958928.457 ops/s
# Warmup Iteration  30: 10966615.530 ops/s
Iteration   1: 10948845.319 ops/s
Iteration   2: 10901515.053 ops/s
Iteration   3: 10999757.328 ops/s
Iteration   4: 10978093.804 ops/s
Iteration   5: 10989358.361 ops/s
Iteration   6: 10962921.932 ops/s
Iteration   7: 10980668.648 ops/s
Iteration   8: 10950964.699 ops/s
Iteration   9: 10954807.847 ops/s
Iteration  10: 11014451.070 ops/s
Iteration  11: 10973524.963 ops/s
Iteration  12: 10923009.329 ops/s
Iteration  13: 11024708.895 ops/s
Iteration  14: 10990683.995 ops/s
Iteration  15: 10961824.653 ops/s
Iteration  16: 10972785.794 ops/s
Iteration  17: 10994424.107 ops/s
Iteration  18: 10967250.783 ops/s
Iteration  19: 10977925.291 ops/s
Iteration  20: 10968598.582 ops/s
Iteration  21: 11001997.438 ops/s
Iteration  22: 10959388.247 ops/s
Iteration  23: 11018816.815 ops/s
Iteration  24: 11014229.151 ops/s
Iteration  25: 10968882.017 ops/s
Iteration  26: 10911596.924 ops/s
Iteration  27: 10942945.510 ops/s
Iteration  28: 10916047.440 ops/s
Iteration  29: 10966338.863 ops/s
Iteration  30: 10990301.320 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeFloat":
  10970888.806 ±(99.9%) 20949.771 ops/s [Average]
  (min, avg, max) = (10901515.053, 10970888.806, 11024708.895), stdev = 31356.634
  CI (99.9%): [10949939.035, 10991838.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_summarizeFloat  thrpt   30  10970888.806 ± 20949.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5014949.172 ops/s
# Warmup Iteration   2: 10013492.150 ops/s
# Warmup Iteration   3: 10208977.650 ops/s
# Warmup Iteration   4: 10254850.786 ops/s
# Warmup Iteration   5: 8514138.327 ops/s
# Warmup Iteration   6: 10200259.927 ops/s
# Warmup Iteration   7: 10208910.679 ops/s
# Warmup Iteration   8: 10268730.896 ops/s
# Warmup Iteration   9: 10241800.708 ops/s
# Warmup Iteration  10: 10229514.316 ops/s
# Warmup Iteration  11: 10226326.634 ops/s
# Warmup Iteration  12: 10226760.667 ops/s
# Warmup Iteration  13: 10226992.714 ops/s
# Warmup Iteration  14: 10283298.075 ops/s
# Warmup Iteration  15: 10213316.928 ops/s
# Warmup Iteration  16: 10213976.220 ops/s
# Warmup Iteration  17: 10243732.004 ops/s
# Warmup Iteration  18: 10258040.492 ops/s
# Warmup Iteration  19: 10227936.806 ops/s
# Warmup Iteration  20: 10215149.650 ops/s
# Warmup Iteration  21: 10247265.295 ops/s
# Warmup Iteration  22: 10229209.757 ops/s
# Warmup Iteration  23: 10188373.536 ops/s
# Warmup Iteration  24: 10292197.667 ops/s
# Warmup Iteration  25: 10257347.080 ops/s
# Warmup Iteration  26: 10230851.284 ops/s
# Warmup Iteration  27: 10212198.766 ops/s
# Warmup Iteration  28: 10255194.793 ops/s
# Warmup Iteration  29: 10240084.839 ops/s
# Warmup Iteration  30: 10267693.709 ops/s
Iteration   1: 10229906.255 ops/s
Iteration   2: 10206480.507 ops/s
Iteration   3: 10230210.284 ops/s
Iteration   4: 10278104.056 ops/s
Iteration   5: 10136410.295 ops/s
Iteration   6: 10264078.885 ops/s
Iteration   7: 10220971.925 ops/s
Iteration   8: 10248422.375 ops/s
Iteration   9: 10247166.856 ops/s
Iteration  10: 10308030.014 ops/s
Iteration  11: 10281096.926 ops/s
Iteration  12: 10205482.921 ops/s
Iteration  13: 10262403.829 ops/s
Iteration  14: 10262548.229 ops/s
Iteration  15: 10224943.283 ops/s
Iteration  16: 10257894.887 ops/s
Iteration  17: 10221293.594 ops/s
Iteration  18: 10229961.960 ops/s
Iteration  19: 10199986.364 ops/s
Iteration  20: 10292085.034 ops/s
Iteration  21: 10215337.781 ops/s
Iteration  22: 10227403.486 ops/s
Iteration  23: 10253041.155 ops/s
Iteration  24: 10239037.020 ops/s
Iteration  25: 10207999.889 ops/s
Iteration  26: 10228496.560 ops/s
Iteration  27: 10259387.344 ops/s
Iteration  28: 10213457.936 ops/s
Iteration  29: 10272913.893 ops/s
Iteration  30: 10173679.360 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeInt":
  10236607.763 ±(99.9%) 23770.658 ops/s [Average]
  (min, avg, max) = (10136410.295, 10236607.763, 10308030.014), stdev = 35578.805
  CI (99.9%): [10212837.105, 10260378.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_summarizeInt  thrpt   30  10236607.763 ± 23770.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4974441.761 ops/s
# Warmup Iteration   2: 10140039.743 ops/s
# Warmup Iteration   3: 10375270.673 ops/s
# Warmup Iteration   4: 10307702.303 ops/s
# Warmup Iteration   5: 8820004.093 ops/s
# Warmup Iteration   6: 10408698.538 ops/s
# Warmup Iteration   7: 10336900.563 ops/s
# Warmup Iteration   8: 10376508.149 ops/s
# Warmup Iteration   9: 10290836.801 ops/s
# Warmup Iteration  10: 10397738.950 ops/s
# Warmup Iteration  11: 10423151.048 ops/s
# Warmup Iteration  12: 10451610.248 ops/s
# Warmup Iteration  13: 10403967.740 ops/s
# Warmup Iteration  14: 10400220.087 ops/s
# Warmup Iteration  15: 10427096.584 ops/s
# Warmup Iteration  16: 10473809.648 ops/s
# Warmup Iteration  17: 10382185.637 ops/s
# Warmup Iteration  18: 10358481.482 ops/s
# Warmup Iteration  19: 10397810.731 ops/s
# Warmup Iteration  20: 10393966.389 ops/s
# Warmup Iteration  21: 10362946.644 ops/s
# Warmup Iteration  22: 10400932.540 ops/s
# Warmup Iteration  23: 10376940.190 ops/s
# Warmup Iteration  24: 10364812.491 ops/s
# Warmup Iteration  25: 10298225.742 ops/s
# Warmup Iteration  26: 10384431.366 ops/s
# Warmup Iteration  27: 10409183.313 ops/s
# Warmup Iteration  28: 10445877.256 ops/s
# Warmup Iteration  29: 10430519.306 ops/s
# Warmup Iteration  30: 10416402.088 ops/s
Iteration   1: 10386331.387 ops/s
Iteration   2: 10417601.510 ops/s
Iteration   3: 10456625.589 ops/s
Iteration   4: 10353830.028 ops/s
Iteration   5: 10366335.534 ops/s
Iteration   6: 10332072.575 ops/s
Iteration   7: 10404629.704 ops/s
Iteration   8: 10408014.633 ops/s
Iteration   9: 10369857.802 ops/s
Iteration  10: 10370509.504 ops/s
Iteration  11: 10411463.555 ops/s
Iteration  12: 10434684.228 ops/s
Iteration  13: 10314787.483 ops/s
Iteration  14: 10265534.022 ops/s
Iteration  15: 10390411.291 ops/s
Iteration  16: 10449182.021 ops/s
Iteration  17: 10335556.771 ops/s
Iteration  18: 10406892.305 ops/s
Iteration  19: 10442771.979 ops/s
Iteration  20: 10410937.693 ops/s
Iteration  21: 10408890.477 ops/s
Iteration  22: 10405941.322 ops/s
Iteration  23: 10386176.157 ops/s
Iteration  24: 10374532.523 ops/s
Iteration  25: 10377909.149 ops/s
Iteration  26: 10338102.550 ops/s
Iteration  27: 10374014.332 ops/s
Iteration  28: 10432539.824 ops/s
Iteration  29: 10421637.935 ops/s
Iteration  30: 10373320.023 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_summarizeLong":
  10387369.797 ±(99.9%) 28341.529 ops/s [Average]
  (min, avg, max) = (10265534.022, 10387369.797, 10456625.589), stdev = 42420.270
  CI (99.9%): [10359028.268, 10415711.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_summarizeLong  thrpt   30  10387369.797 ± 28341.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3833858.780 ops/s
# Warmup Iteration   2: 8327487.339 ops/s
# Warmup Iteration   3: 8364151.758 ops/s
# Warmup Iteration   4: 7528916.004 ops/s
# Warmup Iteration   5: 7781979.874 ops/s
# Warmup Iteration   6: 8352574.037 ops/s
# Warmup Iteration   7: 8328864.167 ops/s
# Warmup Iteration   8: 8361907.722 ops/s
# Warmup Iteration   9: 8371505.150 ops/s
# Warmup Iteration  10: 8346704.190 ops/s
# Warmup Iteration  11: 8395295.656 ops/s
# Warmup Iteration  12: 8381257.630 ops/s
# Warmup Iteration  13: 8385659.518 ops/s
# Warmup Iteration  14: 8386033.428 ops/s
# Warmup Iteration  15: 8389006.761 ops/s
# Warmup Iteration  16: 8389071.595 ops/s
# Warmup Iteration  17: 8351097.779 ops/s
# Warmup Iteration  18: 8344395.271 ops/s
# Warmup Iteration  19: 8374133.424 ops/s
# Warmup Iteration  20: 8393546.466 ops/s
# Warmup Iteration  21: 8319649.451 ops/s
# Warmup Iteration  22: 8356690.804 ops/s
# Warmup Iteration  23: 8354693.683 ops/s
# Warmup Iteration  24: 8372001.179 ops/s
# Warmup Iteration  25: 8370181.565 ops/s
# Warmup Iteration  26: 8391331.456 ops/s
# Warmup Iteration  27: 8395729.134 ops/s
# Warmup Iteration  28: 8361240.909 ops/s
# Warmup Iteration  29: 8345160.310 ops/s
# Warmup Iteration  30: 8378592.626 ops/s
Iteration   1: 8338548.153 ops/s
Iteration   2: 8358728.435 ops/s
Iteration   3: 8374956.912 ops/s
Iteration   4: 8341268.678 ops/s
Iteration   5: 8393243.053 ops/s
Iteration   6: 8372346.544 ops/s
Iteration   7: 8370494.677 ops/s
Iteration   8: 8368041.325 ops/s
Iteration   9: 8362794.155 ops/s
Iteration  10: 8318958.876 ops/s
Iteration  11: 8301569.803 ops/s
Iteration  12: 8371721.665 ops/s
Iteration  13: 8342511.033 ops/s
Iteration  14: 8376256.044 ops/s
Iteration  15: 8362835.960 ops/s
Iteration  16: 8373307.799 ops/s
Iteration  17: 8354962.684 ops/s
Iteration  18: 8375359.788 ops/s
Iteration  19: 8341952.457 ops/s
Iteration  20: 8401366.637 ops/s
Iteration  21: 8352567.248 ops/s
Iteration  22: 8381627.562 ops/s
Iteration  23: 8333716.151 ops/s
Iteration  24: 8351456.500 ops/s
Iteration  25: 8387341.717 ops/s
Iteration  26: 8369936.291 ops/s
Iteration  27: 8321098.975 ops/s
Iteration  28: 8339984.823 ops/s
Iteration  29: 8405288.774 ops/s
Iteration  30: 8324555.359 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_tap":
  8358959.936 ±(99.9%) 16685.681 ops/s [Average]
  (min, avg, max) = (8301569.803, 8358959.936, 8405288.774), stdev = 24974.344
  CI (99.9%): [8342274.255, 8375645.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_tap  thrpt   30  8358959.936 ± 16685.681  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6780377.824 ops/s
# Warmup Iteration   2: 12583177.776 ops/s
# Warmup Iteration   3: 12555130.134 ops/s
# Warmup Iteration   4: 13579512.357 ops/s
# Warmup Iteration   5: 13570396.154 ops/s
# Warmup Iteration   6: 13401410.140 ops/s
# Warmup Iteration   7: 13570574.633 ops/s
# Warmup Iteration   8: 13609983.304 ops/s
# Warmup Iteration   9: 13620842.572 ops/s
# Warmup Iteration  10: 13608495.469 ops/s
# Warmup Iteration  11: 13673322.961 ops/s
# Warmup Iteration  12: 13632413.284 ops/s
# Warmup Iteration  13: 13593601.788 ops/s
# Warmup Iteration  14: 13605531.488 ops/s
# Warmup Iteration  15: 13554371.813 ops/s
# Warmup Iteration  16: 13613130.187 ops/s
# Warmup Iteration  17: 13593942.798 ops/s
# Warmup Iteration  18: 13623027.361 ops/s
# Warmup Iteration  19: 13608801.822 ops/s
# Warmup Iteration  20: 13539917.377 ops/s
# Warmup Iteration  21: 13502397.625 ops/s
# Warmup Iteration  22: 13608137.458 ops/s
# Warmup Iteration  23: 13585170.743 ops/s
# Warmup Iteration  24: 13546435.874 ops/s
# Warmup Iteration  25: 13619183.335 ops/s
# Warmup Iteration  26: 13626806.736 ops/s
# Warmup Iteration  27: 13647434.321 ops/s
# Warmup Iteration  28: 13631343.444 ops/s
# Warmup Iteration  29: 13570193.557 ops/s
# Warmup Iteration  30: 13580471.305 ops/s
Iteration   1: 13638472.014 ops/s
Iteration   2: 13513147.877 ops/s
Iteration   3: 13641800.505 ops/s
Iteration   4: 13563389.153 ops/s
Iteration   5: 13493623.194 ops/s
Iteration   6: 13612441.245 ops/s
Iteration   7: 13622129.914 ops/s
Iteration   8: 13526728.526 ops/s
Iteration   9: 13616647.332 ops/s
Iteration  10: 13683447.298 ops/s
Iteration  11: 13512026.202 ops/s
Iteration  12: 13426111.151 ops/s
Iteration  13: 13582598.809 ops/s
Iteration  14: 13656850.744 ops/s
Iteration  15: 13686374.634 ops/s
Iteration  16: 13634711.467 ops/s
Iteration  17: 13580944.039 ops/s
Iteration  18: 13590770.600 ops/s
Iteration  19: 13662828.897 ops/s
Iteration  20: 13692854.066 ops/s
Iteration  21: 13563606.374 ops/s
Iteration  22: 13533951.709 ops/s
Iteration  23: 13637304.180 ops/s
Iteration  24: 13628129.192 ops/s
Iteration  25: 13566801.850 ops/s
Iteration  26: 13520306.177 ops/s
Iteration  27: 13674102.991 ops/s
Iteration  28: 13627090.108 ops/s
Iteration  29: 13521974.416 ops/s
Iteration  30: 13556328.430 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testEquals":
  13592249.770 ±(99.9%) 44320.514 ops/s [Average]
  (min, avg, max) = (13426111.151, 13592249.770, 13692854.066), stdev = 66336.863
  CI (99.9%): [13547929.256, 13636570.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testEquals  thrpt   30  13592249.770 ± 44320.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13366389.696 ops/s
# Warmup Iteration   2: 22804225.858 ops/s
# Warmup Iteration   3: 27255380.677 ops/s
# Warmup Iteration   4: 26814735.570 ops/s
# Warmup Iteration   5: 26924415.647 ops/s
# Warmup Iteration   6: 26899902.437 ops/s
# Warmup Iteration   7: 27363121.418 ops/s
# Warmup Iteration   8: 26962320.506 ops/s
# Warmup Iteration   9: 27269884.108 ops/s
# Warmup Iteration  10: 26649812.100 ops/s
# Warmup Iteration  11: 27256272.749 ops/s
# Warmup Iteration  12: 27243004.191 ops/s
# Warmup Iteration  13: 26862488.253 ops/s
# Warmup Iteration  14: 27386475.903 ops/s
# Warmup Iteration  15: 27267117.101 ops/s
# Warmup Iteration  16: 27320673.787 ops/s
# Warmup Iteration  17: 27324039.649 ops/s
# Warmup Iteration  18: 27132204.853 ops/s
# Warmup Iteration  19: 27310214.046 ops/s
# Warmup Iteration  20: 26572500.576 ops/s
# Warmup Iteration  21: 26526525.660 ops/s
# Warmup Iteration  22: 27248191.830 ops/s
# Warmup Iteration  23: 26986617.262 ops/s
# Warmup Iteration  24: 27314398.007 ops/s
# Warmup Iteration  25: 27467452.885 ops/s
# Warmup Iteration  26: 27079844.722 ops/s
# Warmup Iteration  27: 27015483.125 ops/s
# Warmup Iteration  28: 27266308.814 ops/s
# Warmup Iteration  29: 27156752.148 ops/s
# Warmup Iteration  30: 27204405.943 ops/s
Iteration   1: 27450809.227 ops/s
Iteration   2: 27091315.736 ops/s
Iteration   3: 27538266.897 ops/s
Iteration   4: 27151784.412 ops/s
Iteration   5: 27111306.193 ops/s
Iteration   6: 27292291.458 ops/s
Iteration   7: 27096609.348 ops/s
Iteration   8: 26647380.949 ops/s
Iteration   9: 27195957.629 ops/s
Iteration  10: 26968804.963 ops/s
Iteration  11: 27289351.615 ops/s
Iteration  12: 27217475.669 ops/s
Iteration  13: 27257754.578 ops/s
Iteration  14: 27409822.836 ops/s
Iteration  15: 27337202.139 ops/s
Iteration  16: 27446531.685 ops/s
Iteration  17: 27500336.983 ops/s
Iteration  18: 27431299.703 ops/s
Iteration  19: 27275759.509 ops/s
Iteration  20: 27120893.340 ops/s
Iteration  21: 27357749.546 ops/s
Iteration  22: 27125700.966 ops/s
Iteration  23: 27458740.719 ops/s
Iteration  24: 27416437.073 ops/s
Iteration  25: 27349605.520 ops/s
Iteration  26: 27309808.803 ops/s
Iteration  27: 27471504.275 ops/s
Iteration  28: 27330096.397 ops/s
Iteration  29: 26937227.041 ops/s
Iteration  30: 27308432.731 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewCollection":
  27263208.598 ±(99.9%) 130036.441 ops/s [Average]
  (min, avg, max) = (26647380.949, 27263208.598, 27538266.897), stdev = 194632.438
  CI (99.9%): [27133172.157, 27393245.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewCollection  thrpt   30  27263208.598 ± 130036.441  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8576885.440 ops/s
# Warmup Iteration   2: 17200887.045 ops/s
# Warmup Iteration   3: 14878123.956 ops/s
# Warmup Iteration   4: 17413030.692 ops/s
# Warmup Iteration   5: 17477664.992 ops/s
# Warmup Iteration   6: 17612874.000 ops/s
# Warmup Iteration   7: 17451325.006 ops/s
# Warmup Iteration   8: 17571480.441 ops/s
# Warmup Iteration   9: 17531523.810 ops/s
# Warmup Iteration  10: 17554471.827 ops/s
# Warmup Iteration  11: 17688836.715 ops/s
# Warmup Iteration  12: 17575925.607 ops/s
# Warmup Iteration  13: 17571433.878 ops/s
# Warmup Iteration  14: 17591285.494 ops/s
# Warmup Iteration  15: 17550060.997 ops/s
# Warmup Iteration  16: 17564327.972 ops/s
# Warmup Iteration  17: 17608718.697 ops/s
# Warmup Iteration  18: 17571068.085 ops/s
# Warmup Iteration  19: 17460989.330 ops/s
# Warmup Iteration  20: 17485655.718 ops/s
# Warmup Iteration  21: 17539009.668 ops/s
# Warmup Iteration  22: 17581437.277 ops/s
# Warmup Iteration  23: 17583990.758 ops/s
# Warmup Iteration  24: 17491482.555 ops/s
# Warmup Iteration  25: 17574891.877 ops/s
# Warmup Iteration  26: 17617071.629 ops/s
# Warmup Iteration  27: 17599524.287 ops/s
# Warmup Iteration  28: 17443211.562 ops/s
# Warmup Iteration  29: 17502887.066 ops/s
# Warmup Iteration  30: 17528251.270 ops/s
Iteration   1: 17543361.129 ops/s
Iteration   2: 17658025.359 ops/s
Iteration   3: 17607805.867 ops/s
Iteration   4: 17468675.215 ops/s
Iteration   5: 17416613.305 ops/s
Iteration   6: 17783137.906 ops/s
Iteration   7: 17609170.806 ops/s
Iteration   8: 17700276.946 ops/s
Iteration   9: 17369910.495 ops/s
Iteration  10: 17455890.220 ops/s
Iteration  11: 17616214.098 ops/s
Iteration  12: 17641471.192 ops/s
Iteration  13: 17568014.496 ops/s
Iteration  14: 17627311.369 ops/s
Iteration  15: 17534164.919 ops/s
Iteration  16: 17596731.844 ops/s
Iteration  17: 17623659.356 ops/s
Iteration  18: 17596110.673 ops/s
Iteration  19: 17673719.317 ops/s
Iteration  20: 17593638.374 ops/s
Iteration  21: 17648989.938 ops/s
Iteration  22: 17568172.567 ops/s
Iteration  23: 17534052.436 ops/s
Iteration  24: 17522521.537 ops/s
Iteration  25: 17744102.764 ops/s
Iteration  26: 17535496.052 ops/s
Iteration  27: 17509359.492 ops/s
Iteration  28: 17690373.923 ops/s
Iteration  29: 17626372.951 ops/s
Iteration  30: 17545538.752 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewEmpty":
  17586962.777 ±(99.9%) 61118.342 ops/s [Average]
  (min, avg, max) = (17369910.495, 17586962.777, 17783137.906), stdev = 91479.064
  CI (99.9%): [17525844.435, 17648081.119] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewEmpty  thrpt   30  17586962.777 ± 61118.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4871949.884 ops/s
# Warmup Iteration   2: 8212395.748 ops/s
# Warmup Iteration   3: 9594569.722 ops/s
# Warmup Iteration   4: 9596870.373 ops/s
# Warmup Iteration   5: 9637936.673 ops/s
# Warmup Iteration   6: 9642772.236 ops/s
# Warmup Iteration   7: 9656805.901 ops/s
# Warmup Iteration   8: 9604626.013 ops/s
# Warmup Iteration   9: 9640638.202 ops/s
# Warmup Iteration  10: 9596952.430 ops/s
# Warmup Iteration  11: 9661585.350 ops/s
# Warmup Iteration  12: 9615731.954 ops/s
# Warmup Iteration  13: 9635212.666 ops/s
# Warmup Iteration  14: 9661995.712 ops/s
# Warmup Iteration  15: 9685205.884 ops/s
# Warmup Iteration  16: 9618090.621 ops/s
# Warmup Iteration  17: 9627854.390 ops/s
# Warmup Iteration  18: 9678980.928 ops/s
# Warmup Iteration  19: 9601816.552 ops/s
# Warmup Iteration  20: 9464366.679 ops/s
# Warmup Iteration  21: 9715535.476 ops/s
# Warmup Iteration  22: 9712922.015 ops/s
# Warmup Iteration  23: 9657899.996 ops/s
# Warmup Iteration  24: 9680166.785 ops/s
# Warmup Iteration  25: 9714493.594 ops/s
# Warmup Iteration  26: 9672443.142 ops/s
# Warmup Iteration  27: 9692447.671 ops/s
# Warmup Iteration  28: 9666566.191 ops/s
# Warmup Iteration  29: 9661938.994 ops/s
# Warmup Iteration  30: 9634664.204 ops/s
Iteration   1: 9719774.188 ops/s
Iteration   2: 9612694.415 ops/s
Iteration   3: 9695730.538 ops/s
Iteration   4: 9677523.550 ops/s
Iteration   5: 9610450.152 ops/s
Iteration   6: 9485606.459 ops/s
Iteration   7: 9602485.002 ops/s
Iteration   8: 9587116.250 ops/s
Iteration   9: 9619837.121 ops/s
Iteration  10: 9731276.891 ops/s
Iteration  11: 9601382.175 ops/s
Iteration  12: 9672758.542 ops/s
Iteration  13: 9761239.985 ops/s
Iteration  14: 9709695.447 ops/s
Iteration  15: 9642530.475 ops/s
Iteration  16: 9708339.389 ops/s
Iteration  17: 9619762.552 ops/s
Iteration  18: 9633927.358 ops/s
Iteration  19: 9576057.424 ops/s
Iteration  20: 9665430.474 ops/s
Iteration  21: 9660742.830 ops/s
Iteration  22: 9630309.634 ops/s
Iteration  23: 9603994.512 ops/s
Iteration  24: 9608426.133 ops/s
Iteration  25: 9715256.837 ops/s
Iteration  26: 9634014.129 ops/s
Iteration  27: 9489803.246 ops/s
Iteration  28: 9591235.919 ops/s
Iteration  29: 9638239.646 ops/s
Iteration  30: 9679441.644 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWith":
  9639502.764 ±(99.9%) 42302.643 ops/s [Average]
  (min, avg, max) = (9485606.459, 9639502.764, 9761239.985), stdev = 63316.610
  CI (99.9%): [9597200.121, 9681805.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewWith  thrpt   30  9639502.764 ± 42302.643  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3248660.166 ops/s
# Warmup Iteration   2: 6025787.192 ops/s
# Warmup Iteration   3: 6275231.429 ops/s
# Warmup Iteration   4: 6633815.401 ops/s
# Warmup Iteration   5: 6710237.727 ops/s
# Warmup Iteration   6: 6668044.031 ops/s
# Warmup Iteration   7: 6706207.582 ops/s
# Warmup Iteration   8: 6669120.076 ops/s
# Warmup Iteration   9: 6675330.732 ops/s
# Warmup Iteration  10: 6684475.656 ops/s
# Warmup Iteration  11: 6717929.279 ops/s
# Warmup Iteration  12: 6720554.421 ops/s
# Warmup Iteration  13: 6727345.772 ops/s
# Warmup Iteration  14: 6700676.516 ops/s
# Warmup Iteration  15: 6703369.304 ops/s
# Warmup Iteration  16: 6688971.501 ops/s
# Warmup Iteration  17: 6668303.081 ops/s
# Warmup Iteration  18: 6646147.987 ops/s
# Warmup Iteration  19: 6690895.182 ops/s
# Warmup Iteration  20: 6674894.643 ops/s
# Warmup Iteration  21: 6631697.890 ops/s
# Warmup Iteration  22: 6676768.801 ops/s
# Warmup Iteration  23: 6668562.882 ops/s
# Warmup Iteration  24: 6657251.861 ops/s
# Warmup Iteration  25: 6711566.097 ops/s
# Warmup Iteration  26: 6675946.874 ops/s
# Warmup Iteration  27: 6683109.830 ops/s
# Warmup Iteration  28: 6669063.167 ops/s
# Warmup Iteration  29: 6649115.683 ops/s
# Warmup Iteration  30: 6692704.312 ops/s
Iteration   1: 6545434.919 ops/s
Iteration   2: 6570310.565 ops/s
Iteration   3: 6589111.002 ops/s
Iteration   4: 6591057.280 ops/s
Iteration   5: 6666416.326 ops/s
Iteration   6: 6642228.748 ops/s
Iteration   7: 6519773.480 ops/s
Iteration   8: 6672052.934 ops/s
Iteration   9: 6667217.277 ops/s
Iteration  10: 6718699.221 ops/s
Iteration  11: 6726627.511 ops/s
Iteration  12: 6696698.603 ops/s
Iteration  13: 6701481.007 ops/s
Iteration  14: 6691420.015 ops/s
Iteration  15: 6702116.871 ops/s
Iteration  16: 6693550.981 ops/s
Iteration  17: 6703310.784 ops/s
Iteration  18: 6705952.825 ops/s
Iteration  19: 6727711.460 ops/s
Iteration  20: 6727216.185 ops/s
Iteration  21: 6677186.688 ops/s
Iteration  22: 6683124.928 ops/s
Iteration  23: 6649578.263 ops/s
Iteration  24: 6721526.475 ops/s
Iteration  25: 6683419.313 ops/s
Iteration  26: 6660008.146 ops/s
Iteration  27: 6677549.653 ops/s
Iteration  28: 6663879.039 ops/s
Iteration  29: 6686466.892 ops/s
Iteration  30: 6733994.918 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithVarArgs":
  6669837.410 ±(99.9%) 36796.052 ops/s [Average]
  (min, avg, max) = (6519773.480, 6669837.410, 6733994.918), stdev = 55074.602
  CI (99.9%): [6633041.358, 6706633.462] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  6669837.410 ± 36796.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3683623.323 ops/s
# Warmup Iteration   2: 6306630.535 ops/s
# Warmup Iteration   3: 7601893.474 ops/s
# Warmup Iteration   4: 7576708.262 ops/s
# Warmup Iteration   5: 7587140.741 ops/s
# Warmup Iteration   6: 7556071.354 ops/s
# Warmup Iteration   7: 7564622.696 ops/s
# Warmup Iteration   8: 7562485.422 ops/s
# Warmup Iteration   9: 7547302.033 ops/s
# Warmup Iteration  10: 7585962.745 ops/s
# Warmup Iteration  11: 7594101.556 ops/s
# Warmup Iteration  12: 7528686.858 ops/s
# Warmup Iteration  13: 7578377.252 ops/s
# Warmup Iteration  14: 7623057.258 ops/s
# Warmup Iteration  15: 7613142.744 ops/s
# Warmup Iteration  16: 7596891.077 ops/s
# Warmup Iteration  17: 7592565.549 ops/s
# Warmup Iteration  18: 7514873.009 ops/s
# Warmup Iteration  19: 7559217.696 ops/s
# Warmup Iteration  20: 7601291.092 ops/s
# Warmup Iteration  21: 7612270.047 ops/s
# Warmup Iteration  22: 7535903.773 ops/s
# Warmup Iteration  23: 7620752.440 ops/s
# Warmup Iteration  24: 7616978.474 ops/s
# Warmup Iteration  25: 7626266.247 ops/s
# Warmup Iteration  26: 7635753.407 ops/s
# Warmup Iteration  27: 7630457.748 ops/s
# Warmup Iteration  28: 7575866.017 ops/s
# Warmup Iteration  29: 7639960.407 ops/s
# Warmup Iteration  30: 7540419.703 ops/s
Iteration   1: 7633387.714 ops/s
Iteration   2: 7623532.875 ops/s
Iteration   3: 7562919.765 ops/s
Iteration   4: 7526688.826 ops/s
Iteration   5: 7623352.706 ops/s
Iteration   6: 7555280.092 ops/s
Iteration   7: 7634013.793 ops/s
Iteration   8: 7601258.804 ops/s
Iteration   9: 7589066.038 ops/s
Iteration  10: 7601682.471 ops/s
Iteration  11: 7561978.575 ops/s
Iteration  12: 7542334.152 ops/s
Iteration  13: 7545139.983 ops/s
Iteration  14: 7571420.712 ops/s
Iteration  15: 7604358.404 ops/s
Iteration  16: 7611755.772 ops/s
Iteration  17: 7594377.526 ops/s
Iteration  18: 7533412.549 ops/s
Iteration  19: 7500398.967 ops/s
Iteration  20: 7525312.757 ops/s
Iteration  21: 7529096.987 ops/s
Iteration  22: 7430321.096 ops/s
Iteration  23: 7465329.653 ops/s
Iteration  24: 7528410.978 ops/s
Iteration  25: 7583357.829 ops/s
Iteration  26: 7376711.307 ops/s
Iteration  27: 7554149.033 ops/s
Iteration  28: 7461906.831 ops/s
Iteration  29: 7558706.051 ops/s
Iteration  30: 7580481.715 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWith":
  7553671.465 ±(99.9%) 40591.403 ops/s [Average]
  (min, avg, max) = (7376711.307, 7553671.465, 7634013.793), stdev = 60755.306
  CI (99.9%): [7513080.062, 7594262.868] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewWithWith  thrpt   30  7553671.465 ± 40591.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3389086.195 ops/s
# Warmup Iteration   2: 5998429.108 ops/s
# Warmup Iteration   3: 6865674.655 ops/s
# Warmup Iteration   4: 7009039.350 ops/s
# Warmup Iteration   5: 6986868.056 ops/s
# Warmup Iteration   6: 7063376.707 ops/s
# Warmup Iteration   7: 7109882.828 ops/s
# Warmup Iteration   8: 7042437.262 ops/s
# Warmup Iteration   9: 7069891.849 ops/s
# Warmup Iteration  10: 6949361.601 ops/s
# Warmup Iteration  11: 7048382.555 ops/s
# Warmup Iteration  12: 7070889.011 ops/s
# Warmup Iteration  13: 7068753.290 ops/s
# Warmup Iteration  14: 7046367.887 ops/s
# Warmup Iteration  15: 7062228.719 ops/s
# Warmup Iteration  16: 7002192.680 ops/s
# Warmup Iteration  17: 6920693.694 ops/s
# Warmup Iteration  18: 7021497.341 ops/s
# Warmup Iteration  19: 7083112.508 ops/s
# Warmup Iteration  20: 6989155.868 ops/s
# Warmup Iteration  21: 7063656.931 ops/s
# Warmup Iteration  22: 7007012.556 ops/s
# Warmup Iteration  23: 7061152.968 ops/s
# Warmup Iteration  24: 7037049.223 ops/s
# Warmup Iteration  25: 7022730.007 ops/s
# Warmup Iteration  26: 7001286.438 ops/s
# Warmup Iteration  27: 7060958.019 ops/s
# Warmup Iteration  28: 7033832.808 ops/s
# Warmup Iteration  29: 7094371.488 ops/s
# Warmup Iteration  30: 7002908.612 ops/s
Iteration   1: 7003345.050 ops/s
Iteration   2: 7082990.618 ops/s
Iteration   3: 6949707.328 ops/s
Iteration   4: 6972039.334 ops/s
Iteration   5: 6877556.701 ops/s
Iteration   6: 6902547.793 ops/s
Iteration   7: 6978318.437 ops/s
Iteration   8: 7084274.811 ops/s
Iteration   9: 7090116.402 ops/s
Iteration  10: 7016049.777 ops/s
Iteration  11: 7131984.342 ops/s
Iteration  12: 7086784.531 ops/s
Iteration  13: 7075544.273 ops/s
Iteration  14: 7032804.165 ops/s
Iteration  15: 7060312.514 ops/s
Iteration  16: 7024065.074 ops/s
Iteration  17: 7100215.337 ops/s
Iteration  18: 7055576.495 ops/s
Iteration  19: 7007407.473 ops/s
Iteration  20: 7094457.821 ops/s
Iteration  21: 7062001.608 ops/s
Iteration  22: 7054784.440 ops/s
Iteration  23: 7117911.679 ops/s
Iteration  24: 7096502.536 ops/s
Iteration  25: 7054848.056 ops/s
Iteration  26: 7114375.549 ops/s
Iteration  27: 7006121.483 ops/s
Iteration  28: 7006250.663 ops/s
Iteration  29: 7021479.719 ops/s
Iteration  30: 7052180.011 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testNewWithWithWith":
  7040418.467 ±(99.9%) 40981.580 ops/s [Average]
  (min, avg, max) = (6877556.701, 7040418.467, 7131984.342), stdev = 61339.304
  CI (99.9%): [6999436.887, 7081400.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  7040418.467 ± 40981.580  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3842258.937 ops/s
# Warmup Iteration   2: 8482403.057 ops/s
# Warmup Iteration   3: 7381067.023 ops/s
# Warmup Iteration   4: 8346230.639 ops/s
# Warmup Iteration   5: 8420730.735 ops/s
# Warmup Iteration   6: 8475576.051 ops/s
# Warmup Iteration   7: 8552750.471 ops/s
# Warmup Iteration   8: 8475331.669 ops/s
# Warmup Iteration   9: 8531030.950 ops/s
# Warmup Iteration  10: 8524210.574 ops/s
# Warmup Iteration  11: 8500445.166 ops/s
# Warmup Iteration  12: 8537758.501 ops/s
# Warmup Iteration  13: 8495198.247 ops/s
# Warmup Iteration  14: 8492290.559 ops/s
# Warmup Iteration  15: 8558771.918 ops/s
# Warmup Iteration  16: 8534180.515 ops/s
# Warmup Iteration  17: 8479146.882 ops/s
# Warmup Iteration  18: 8471679.441 ops/s
# Warmup Iteration  19: 8519554.178 ops/s
# Warmup Iteration  20: 8576187.732 ops/s
# Warmup Iteration  21: 8533021.865 ops/s
# Warmup Iteration  22: 8527876.920 ops/s
# Warmup Iteration  23: 8574397.473 ops/s
# Warmup Iteration  24: 8516318.503 ops/s
# Warmup Iteration  25: 8494552.996 ops/s
# Warmup Iteration  26: 8543678.717 ops/s
# Warmup Iteration  27: 8569837.179 ops/s
# Warmup Iteration  28: 8541815.792 ops/s
# Warmup Iteration  29: 8500159.910 ops/s
# Warmup Iteration  30: 8502905.862 ops/s
Iteration   1: 8476169.452 ops/s
Iteration   2: 8510204.159 ops/s
Iteration   3: 8442791.797 ops/s
Iteration   4: 8524076.114 ops/s
Iteration   5: 8561131.803 ops/s
Iteration   6: 8591194.356 ops/s
Iteration   7: 8456672.219 ops/s
Iteration   8: 8495106.293 ops/s
Iteration   9: 8500887.077 ops/s
Iteration  10: 8549223.451 ops/s
Iteration  11: 8484762.149 ops/s
Iteration  12: 8474760.393 ops/s
Iteration  13: 8522733.300 ops/s
Iteration  14: 8552903.358 ops/s
Iteration  15: 8535499.118 ops/s
Iteration  16: 8560592.882 ops/s
Iteration  17: 8539198.517 ops/s
Iteration  18: 8503354.558 ops/s
Iteration  19: 8484539.266 ops/s
Iteration  20: 8548527.569 ops/s
Iteration  21: 8533148.389 ops/s
Iteration  22: 8472484.155 ops/s
Iteration  23: 8550371.221 ops/s
Iteration  24: 8561343.680 ops/s
Iteration  25: 8500502.183 ops/s
Iteration  26: 8545025.170 ops/s
Iteration  27: 8498605.426 ops/s
Iteration  28: 8533213.526 ops/s
Iteration  29: 8466477.498 ops/s
Iteration  30: 8560007.265 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_testToString":
  8517850.211 ±(99.9%) 25003.340 ops/s [Average]
  (min, avg, max) = (8442791.797, 8517850.211, 8591194.356), stdev = 37423.825
  CI (99.9%): [8492846.871, 8542853.552] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_testToString  thrpt   30  8517850.211 ± 25003.340  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9019584.984 ops/s
# Warmup Iteration   2: 15228831.923 ops/s
# Warmup Iteration   3: 18227383.632 ops/s
# Warmup Iteration   4: 18353787.254 ops/s
# Warmup Iteration   5: 18303727.383 ops/s
# Warmup Iteration   6: 18337614.045 ops/s
# Warmup Iteration   7: 18322804.006 ops/s
# Warmup Iteration   8: 18323210.840 ops/s
# Warmup Iteration   9: 18446906.123 ops/s
# Warmup Iteration  10: 18325403.617 ops/s
# Warmup Iteration  11: 18269551.630 ops/s
# Warmup Iteration  12: 18170710.193 ops/s
# Warmup Iteration  13: 18042117.704 ops/s
# Warmup Iteration  14: 18058873.749 ops/s
# Warmup Iteration  15: 18097944.011 ops/s
# Warmup Iteration  16: 18159175.701 ops/s
# Warmup Iteration  17: 18398198.837 ops/s
# Warmup Iteration  18: 18368306.764 ops/s
# Warmup Iteration  19: 18258628.719 ops/s
# Warmup Iteration  20: 18361125.492 ops/s
# Warmup Iteration  21: 18306715.221 ops/s
# Warmup Iteration  22: 18271191.642 ops/s
# Warmup Iteration  23: 18365231.007 ops/s
# Warmup Iteration  24: 18275033.474 ops/s
# Warmup Iteration  25: 18377890.456 ops/s
# Warmup Iteration  26: 18381082.702 ops/s
# Warmup Iteration  27: 18373442.304 ops/s
# Warmup Iteration  28: 18284653.650 ops/s
# Warmup Iteration  29: 18364413.141 ops/s
# Warmup Iteration  30: 18173423.871 ops/s
Iteration   1: 18130840.196 ops/s
Iteration   2: 18018335.996 ops/s
Iteration   3: 17688652.794 ops/s
Iteration   4: 18321965.768 ops/s
Iteration   5: 18308669.648 ops/s
Iteration   6: 18330195.903 ops/s
Iteration   7: 18384791.090 ops/s
Iteration   8: 18388868.184 ops/s
Iteration   9: 18404220.294 ops/s
Iteration  10: 18419414.779 ops/s
Iteration  11: 18312239.085 ops/s
Iteration  12: 18380148.250 ops/s
Iteration  13: 18414800.172 ops/s
Iteration  14: 18398738.395 ops/s
Iteration  15: 18303753.398 ops/s
Iteration  16: 18270357.745 ops/s
Iteration  17: 18328165.318 ops/s
Iteration  18: 18414653.895 ops/s
Iteration  19: 18124745.481 ops/s
Iteration  20: 18256435.582 ops/s
Iteration  21: 18120575.807 ops/s
Iteration  22: 18124856.417 ops/s
Iteration  23: 18164592.486 ops/s
Iteration  24: 18285748.368 ops/s
Iteration  25: 18379082.381 ops/s
Iteration  26: 18058957.635 ops/s
Iteration  27: 18412332.184 ops/s
Iteration  28: 18369290.423 ops/s
Iteration  29: 18121689.260 ops/s
Iteration  30: 17556694.170 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toArray":
  18239793.703 ±(99.9%) 138100.777 ops/s [Average]
  (min, avg, max) = (17556694.170, 18239793.703, 18419414.779), stdev = 206702.758
  CI (99.9%): [18101692.926, 18377894.481] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
CollectionAdapterTest._Benchmark.benchmark_toArray  thrpt   30  18239793.703 ± 138100.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 975995.826 ops/s
# Warmup Iteration   2: 1641875.074 ops/s
# Warmup Iteration   3: 1941560.673 ops/s
# Warmup Iteration   4: 1946079.330 ops/s
# Warmup Iteration   5: 1950739.837 ops/s
# Warmup Iteration   6: 1587746.201 ops/s
# Warmup Iteration   7: 1951920.296 ops/s
# Warmup Iteration   8: 1944305.075 ops/s
# Warmup Iteration   9: 1942590.401 ops/s
# Warmup Iteration  10: 1938643.824 ops/s
# Warmup Iteration  11: 1941679.444 ops/s
# Warmup Iteration  12: 1950313.441 ops/s
# Warmup Iteration  13: 1956340.331 ops/s
# Warmup Iteration  14: 1950752.972 ops/s
# Warmup Iteration  15: 1937362.065 ops/s
# Warmup Iteration  16: 1943711.835 ops/s
# Warmup Iteration  17: 1944801.724 ops/s
# Warmup Iteration  18: 1946839.197 ops/s
# Warmup Iteration  19: 1944938.427 ops/s
# Warmup Iteration  20: 1949725.869 ops/s
# Warmup Iteration  21: 1948044.646 ops/s
# Warmup Iteration  22: 1931643.985 ops/s
# Warmup Iteration  23: 1944328.637 ops/s
# Warmup Iteration  24: 1949948.634 ops/s
# Warmup Iteration  25: 1943968.507 ops/s
# Warmup Iteration  26: 1940452.230 ops/s
# Warmup Iteration  27: 1944035.923 ops/s
# Warmup Iteration  28: 1948408.127 ops/s
# Warmup Iteration  29: 1945018.501 ops/s
# Warmup Iteration  30: 1937917.376 ops/s
Iteration   1: 1940630.801 ops/s
Iteration   2: 1941574.373 ops/s
Iteration   3: 1942453.271 ops/s
Iteration   4: 1948438.186 ops/s
Iteration   5: 1943517.562 ops/s
Iteration   6: 1943042.823 ops/s
Iteration   7: 1947897.494 ops/s
Iteration   8: 1952290.321 ops/s
Iteration   9: 1943101.517 ops/s
Iteration  10: 1944145.508 ops/s
Iteration  11: 1947497.566 ops/s
Iteration  12: 1947483.102 ops/s
Iteration  13: 1938681.527 ops/s
Iteration  14: 1943842.774 ops/s
Iteration  15: 1952281.188 ops/s
Iteration  16: 1953444.860 ops/s
Iteration  17: 1952669.119 ops/s
Iteration  18: 1954111.943 ops/s
Iteration  19: 1943511.962 ops/s
Iteration  20: 1953016.064 ops/s
Iteration  21: 1937027.337 ops/s
Iteration  22: 1941609.729 ops/s
Iteration  23: 1950884.054 ops/s
Iteration  24: 1947161.149 ops/s
Iteration  25: 1937651.804 ops/s
Iteration  26: 1944604.577 ops/s
Iteration  27: 1951945.050 ops/s
Iteration  28: 1937731.522 ops/s
Iteration  29: 1943303.110 ops/s
Iteration  30: 1943699.964 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBag":
  1945641.675 ±(99.9%) 3440.740 ops/s [Average]
  (min, avg, max) = (1937027.337, 1945641.675, 1954111.943), stdev = 5149.939
  CI (99.9%): [1942200.935, 1949082.416] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toBag  thrpt   30  1945641.675 ± 3440.740  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 100265.348 ops/s
# Warmup Iteration   2: 132644.142 ops/s
# Warmup Iteration   3: 173666.572 ops/s
# Warmup Iteration   4: 171855.354 ops/s
# Warmup Iteration   5: 172337.030 ops/s
# Warmup Iteration   6: 173269.731 ops/s
# Warmup Iteration   7: 172263.683 ops/s
# Warmup Iteration   8: 146826.785 ops/s
# Warmup Iteration   9: 169284.577 ops/s
# Warmup Iteration  10: 173323.870 ops/s
# Warmup Iteration  11: 172984.614 ops/s
# Warmup Iteration  12: 174345.942 ops/s
# Warmup Iteration  13: 173414.780 ops/s
# Warmup Iteration  14: 173051.922 ops/s
# Warmup Iteration  15: 173267.351 ops/s
# Warmup Iteration  16: 173496.017 ops/s
# Warmup Iteration  17: 179654.807 ops/s
# Warmup Iteration  18: 179209.884 ops/s
# Warmup Iteration  19: 179780.125 ops/s
# Warmup Iteration  20: 180005.922 ops/s
# Warmup Iteration  21: 180125.759 ops/s
# Warmup Iteration  22: 179450.013 ops/s
# Warmup Iteration  23: 179483.702 ops/s
# Warmup Iteration  24: 179812.045 ops/s
# Warmup Iteration  25: 179551.451 ops/s
# Warmup Iteration  26: 179597.662 ops/s
# Warmup Iteration  27: 179959.313 ops/s
# Warmup Iteration  28: 179771.784 ops/s
# Warmup Iteration  29: 179495.718 ops/s
# Warmup Iteration  30: 178659.364 ops/s
Iteration   1: 179131.034 ops/s
Iteration   2: 179905.536 ops/s
Iteration   3: 179860.976 ops/s
Iteration   4: 179826.388 ops/s
Iteration   5: 178783.560 ops/s
Iteration   6: 179911.004 ops/s
Iteration   7: 179726.048 ops/s
Iteration   8: 180163.207 ops/s
Iteration   9: 178692.363 ops/s
Iteration  10: 181208.254 ops/s
Iteration  11: 180243.481 ops/s
Iteration  12: 179190.414 ops/s
Iteration  13: 180146.187 ops/s
Iteration  14: 180074.886 ops/s
Iteration  15: 180106.699 ops/s
Iteration  16: 179553.326 ops/s
Iteration  17: 179256.384 ops/s
Iteration  18: 180087.293 ops/s
Iteration  19: 179634.654 ops/s
Iteration  20: 179518.119 ops/s
Iteration  21: 180470.500 ops/s
Iteration  22: 180453.095 ops/s
Iteration  23: 181244.492 ops/s
Iteration  24: 179356.851 ops/s
Iteration  25: 180817.066 ops/s
Iteration  26: 180159.078 ops/s
Iteration  27: 180585.770 ops/s
Iteration  28: 180365.491 ops/s
Iteration  29: 179168.138 ops/s
Iteration  30: 178490.517 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toBiMap":
  179871.027 ±(99.9%) 455.536 ops/s [Average]
  (min, avg, max) = (178490.517, 179871.027, 181244.492), stdev = 681.825
  CI (99.9%): [179415.491, 180326.563] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_toBiMap  thrpt   30  179871.027 ± 455.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3782673.064 ops/s
# Warmup Iteration   2: 8801570.093 ops/s
# Warmup Iteration   3: 7355893.278 ops/s
# Warmup Iteration   4: 8874757.818 ops/s
# Warmup Iteration   5: 8833985.626 ops/s
# Warmup Iteration   6: 8829894.332 ops/s
# Warmup Iteration   7: 8842180.956 ops/s
# Warmup Iteration   8: 8849395.812 ops/s
# Warmup Iteration   9: 8853446.770 ops/s
# Warmup Iteration  10: 8852878.541 ops/s
# Warmup Iteration  11: 8772318.860 ops/s
# Warmup Iteration  12: 8840400.416 ops/s
# Warmup Iteration  13: 8855276.371 ops/s
# Warmup Iteration  14: 8814495.261 ops/s
# Warmup Iteration  15: 8839336.727 ops/s
# Warmup Iteration  16: 8873143.674 ops/s
# Warmup Iteration  17: 8880667.591 ops/s
# Warmup Iteration  18: 8862798.704 ops/s
# Warmup Iteration  19: 8850569.790 ops/s
# Warmup Iteration  20: 8842408.185 ops/s
# Warmup Iteration  21: 8817135.942 ops/s
# Warmup Iteration  22: 8832658.731 ops/s
# Warmup Iteration  23: 8809153.140 ops/s
# Warmup Iteration  24: 8780307.563 ops/s
# Warmup Iteration  25: 8815777.366 ops/s
# Warmup Iteration  26: 8821871.351 ops/s
# Warmup Iteration  27: 8854742.159 ops/s
# Warmup Iteration  28: 8836175.813 ops/s
# Warmup Iteration  29: 8780985.245 ops/s
# Warmup Iteration  30: 8801478.695 ops/s
Iteration   1: 8785735.162 ops/s
Iteration   2: 8793045.102 ops/s
Iteration   3: 8935365.148 ops/s
Iteration   4: 8820775.249 ops/s
Iteration   5: 8798847.886 ops/s
Iteration   6: 8817228.497 ops/s
Iteration   7: 8822679.239 ops/s
Iteration   8: 8873882.701 ops/s
Iteration   9: 8817840.833 ops/s
Iteration  10: 8886144.894 ops/s
Iteration  11: 8822171.263 ops/s
Iteration  12: 8854123.058 ops/s
Iteration  13: 8871602.128 ops/s
Iteration  14: 8838904.585 ops/s
Iteration  15: 8807413.937 ops/s
Iteration  16: 8806122.324 ops/s
Iteration  17: 8828640.392 ops/s
Iteration  18: 8873105.861 ops/s
Iteration  19: 8816667.976 ops/s
Iteration  20: 8806598.424 ops/s
Iteration  21: 8863746.634 ops/s
Iteration  22: 8806400.565 ops/s
Iteration  23: 8794533.458 ops/s
Iteration  24: 8743695.236 ops/s
Iteration  25: 8810293.057 ops/s
Iteration  26: 8824665.792 ops/s
Iteration  27: 8816234.511 ops/s
Iteration  28: 8837970.274 ops/s
Iteration  29: 8800448.581 ops/s
Iteration  30: 8788652.865 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toCollection":
  8825451.188 ±(99.9%) 24837.227 ops/s [Average]
  (min, avg, max) = (8743695.236, 8825451.188, 8935365.148), stdev = 37175.195
  CI (99.9%): [8800613.961, 8850288.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toCollection  thrpt   30  8825451.188 ± 24837.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2411189.786 ops/s
# Warmup Iteration   2: 2702869.875 ops/s
# Warmup Iteration   3: 3720946.216 ops/s
# Warmup Iteration   4: 3717610.753 ops/s
# Warmup Iteration   5: 3708673.982 ops/s
# Warmup Iteration   6: 3717879.303 ops/s
# Warmup Iteration   7: 3723426.439 ops/s
# Warmup Iteration   8: 3724644.300 ops/s
# Warmup Iteration   9: 3709211.408 ops/s
# Warmup Iteration  10: 3555987.031 ops/s
# Warmup Iteration  11: 3234878.090 ops/s
# Warmup Iteration  12: 3715199.214 ops/s
# Warmup Iteration  13: 3709269.005 ops/s
# Warmup Iteration  14: 3731698.168 ops/s
# Warmup Iteration  15: 3730508.531 ops/s
# Warmup Iteration  16: 3713252.787 ops/s
# Warmup Iteration  17: 3711908.027 ops/s
# Warmup Iteration  18: 3715221.241 ops/s
# Warmup Iteration  19: 3728950.692 ops/s
# Warmup Iteration  20: 3707942.912 ops/s
# Warmup Iteration  21: 3715833.546 ops/s
# Warmup Iteration  22: 3717350.266 ops/s
# Warmup Iteration  23: 3707349.867 ops/s
# Warmup Iteration  24: 3711167.891 ops/s
# Warmup Iteration  25: 3717793.378 ops/s
# Warmup Iteration  26: 3724735.796 ops/s
# Warmup Iteration  27: 3730284.602 ops/s
# Warmup Iteration  28: 3718415.800 ops/s
# Warmup Iteration  29: 3699972.784 ops/s
# Warmup Iteration  30: 3715448.323 ops/s
Iteration   1: 3727801.797 ops/s
Iteration   2: 3724423.163 ops/s
Iteration   3: 3736886.552 ops/s
Iteration   4: 3720515.594 ops/s
Iteration   5: 3702506.950 ops/s
Iteration   6: 3744308.248 ops/s
Iteration   7: 3710434.271 ops/s
Iteration   8: 3721022.670 ops/s
Iteration   9: 3719179.516 ops/s
Iteration  10: 3736098.714 ops/s
Iteration  11: 3724642.621 ops/s
Iteration  12: 3717406.865 ops/s
Iteration  13: 3714931.338 ops/s
Iteration  14: 3729865.998 ops/s
Iteration  15: 3727476.757 ops/s
Iteration  16: 3722830.801 ops/s
Iteration  17: 3707121.439 ops/s
Iteration  18: 3722424.616 ops/s
Iteration  19: 3725190.687 ops/s
Iteration  20: 3724566.646 ops/s
Iteration  21: 3733003.184 ops/s
Iteration  22: 3713522.816 ops/s
Iteration  23: 3734833.324 ops/s
Iteration  24: 3725780.036 ops/s
Iteration  25: 3716931.671 ops/s
Iteration  26: 3692206.805 ops/s
Iteration  27: 3709100.859 ops/s
Iteration  28: 3715544.236 ops/s
Iteration  29: 3722688.816 ops/s
Iteration  30: 3710186.205 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutable":
  3721114.440 ±(99.9%) 7341.042 ops/s [Average]
  (min, avg, max) = (3692206.805, 3721114.440, 3744308.248), stdev = 10987.727
  CI (99.9%): [3713773.398, 3728455.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutable  thrpt   30  3721114.440 ± 7341.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 608060.425 ops/s
# Warmup Iteration   2: 1251484.320 ops/s
# Warmup Iteration   3: 1439207.346 ops/s
# Warmup Iteration   4: 1455317.460 ops/s
# Warmup Iteration   5: 1175978.118 ops/s
# Warmup Iteration   6: 1445622.198 ops/s
# Warmup Iteration   7: 1451296.915 ops/s
# Warmup Iteration   8: 1453887.815 ops/s
# Warmup Iteration   9: 1454419.765 ops/s
# Warmup Iteration  10: 1450378.994 ops/s
# Warmup Iteration  11: 1446038.023 ops/s
# Warmup Iteration  12: 1456182.894 ops/s
# Warmup Iteration  13: 1452162.844 ops/s
# Warmup Iteration  14: 1441759.907 ops/s
# Warmup Iteration  15: 1450939.995 ops/s
# Warmup Iteration  16: 1449588.821 ops/s
# Warmup Iteration  17: 1454816.533 ops/s
# Warmup Iteration  18: 1456781.606 ops/s
# Warmup Iteration  19: 1453513.360 ops/s
# Warmup Iteration  20: 1450799.772 ops/s
# Warmup Iteration  21: 1458791.749 ops/s
# Warmup Iteration  22: 1457412.558 ops/s
# Warmup Iteration  23: 1455197.631 ops/s
# Warmup Iteration  24: 1458610.549 ops/s
# Warmup Iteration  25: 1453237.285 ops/s
# Warmup Iteration  26: 1454261.378 ops/s
# Warmup Iteration  27: 1451576.647 ops/s
# Warmup Iteration  28: 1442341.760 ops/s
# Warmup Iteration  29: 1452090.891 ops/s
# Warmup Iteration  30: 1447266.885 ops/s
Iteration   1: 1449623.607 ops/s
Iteration   2: 1447622.034 ops/s
Iteration   3: 1457889.694 ops/s
Iteration   4: 1453560.911 ops/s
Iteration   5: 1449796.072 ops/s
Iteration   6: 1452893.998 ops/s
Iteration   7: 1460308.937 ops/s
Iteration   8: 1434491.113 ops/s
Iteration   9: 1453534.871 ops/s
Iteration  10: 1458940.250 ops/s
Iteration  11: 1444207.762 ops/s
Iteration  12: 1455239.981 ops/s
Iteration  13: 1450715.406 ops/s
Iteration  14: 1451460.743 ops/s
Iteration  15: 1457450.525 ops/s
Iteration  16: 1442912.461 ops/s
Iteration  17: 1449261.510 ops/s
Iteration  18: 1451714.970 ops/s
Iteration  19: 1452758.925 ops/s
Iteration  20: 1452341.541 ops/s
Iteration  21: 1458785.498 ops/s
Iteration  22: 1452498.114 ops/s
Iteration  23: 1451834.860 ops/s
Iteration  24: 1455149.535 ops/s
Iteration  25: 1450412.265 ops/s
Iteration  26: 1449904.795 ops/s
Iteration  27: 1453887.135 ops/s
Iteration  28: 1457937.270 ops/s
Iteration  29: 1456142.885 ops/s
Iteration  30: 1456652.403 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBag":
  1452331.002 ±(99.9%) 3563.342 ops/s [Average]
  (min, avg, max) = (1434491.113, 1452331.002, 1460308.937), stdev = 5333.442
  CI (99.9%): [1448767.661, 1455894.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1452331.002 ± 3563.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89206.239 ops/s
# Warmup Iteration   2: 121177.535 ops/s
# Warmup Iteration   3: 152408.594 ops/s
# Warmup Iteration   4: 151331.945 ops/s
# Warmup Iteration   5: 151528.373 ops/s
# Warmup Iteration   6: 152208.173 ops/s
# Warmup Iteration   7: 151496.884 ops/s
# Warmup Iteration   8: 129433.988 ops/s
# Warmup Iteration   9: 148583.251 ops/s
# Warmup Iteration  10: 151400.359 ops/s
# Warmup Iteration  11: 151687.184 ops/s
# Warmup Iteration  12: 150766.237 ops/s
# Warmup Iteration  13: 151464.280 ops/s
# Warmup Iteration  14: 151094.823 ops/s
# Warmup Iteration  15: 152125.201 ops/s
# Warmup Iteration  16: 151514.782 ops/s
# Warmup Iteration  17: 155250.314 ops/s
# Warmup Iteration  18: 155729.220 ops/s
# Warmup Iteration  19: 155715.548 ops/s
# Warmup Iteration  20: 155161.296 ops/s
# Warmup Iteration  21: 155363.673 ops/s
# Warmup Iteration  22: 155548.221 ops/s
# Warmup Iteration  23: 155850.204 ops/s
# Warmup Iteration  24: 155406.607 ops/s
# Warmup Iteration  25: 155845.818 ops/s
# Warmup Iteration  26: 155025.922 ops/s
# Warmup Iteration  27: 156063.805 ops/s
# Warmup Iteration  28: 154319.050 ops/s
# Warmup Iteration  29: 156074.369 ops/s
# Warmup Iteration  30: 156408.147 ops/s
Iteration   1: 155921.502 ops/s
Iteration   2: 156430.691 ops/s
Iteration   3: 156512.827 ops/s
Iteration   4: 155386.738 ops/s
Iteration   5: 156407.955 ops/s
Iteration   6: 154969.998 ops/s
Iteration   7: 154917.583 ops/s
Iteration   8: 155582.414 ops/s
Iteration   9: 155798.683 ops/s
Iteration  10: 154886.913 ops/s
Iteration  11: 155502.284 ops/s
Iteration  12: 155633.228 ops/s
Iteration  13: 155948.090 ops/s
Iteration  14: 155338.195 ops/s
Iteration  15: 155863.798 ops/s
Iteration  16: 155383.094 ops/s
Iteration  17: 155509.916 ops/s
Iteration  18: 156362.449 ops/s
Iteration  19: 155204.739 ops/s
Iteration  20: 156161.315 ops/s
Iteration  21: 155765.827 ops/s
Iteration  22: 155375.542 ops/s
Iteration  23: 154608.518 ops/s
Iteration  24: 154799.671 ops/s
Iteration  25: 156141.357 ops/s
Iteration  26: 156837.101 ops/s
Iteration  27: 156370.907 ops/s
Iteration  28: 156000.637 ops/s
Iteration  29: 156550.157 ops/s
Iteration  30: 155090.225 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableBiMap":
  155708.745 ±(99.9%) 396.257 ops/s [Average]
  (min, avg, max) = (154608.518, 155708.745, 156837.101), stdev = 593.098
  CI (99.9%): [155312.489, 156105.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  155708.745 ± 396.257  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1916739.017 ops/s
# Warmup Iteration   2: 4578738.732 ops/s
# Warmup Iteration   3: 4574697.351 ops/s
# Warmup Iteration   4: 3850292.508 ops/s
# Warmup Iteration   5: 4571914.300 ops/s
# Warmup Iteration   6: 4608524.950 ops/s
# Warmup Iteration   7: 4600037.060 ops/s
# Warmup Iteration   8: 4597835.028 ops/s
# Warmup Iteration   9: 4591626.504 ops/s
# Warmup Iteration  10: 4575860.698 ops/s
# Warmup Iteration  11: 4584153.591 ops/s
# Warmup Iteration  12: 4589574.427 ops/s
# Warmup Iteration  13: 4554785.875 ops/s
# Warmup Iteration  14: 4590527.436 ops/s
# Warmup Iteration  15: 4596265.014 ops/s
# Warmup Iteration  16: 4603574.056 ops/s
# Warmup Iteration  17: 4597408.438 ops/s
# Warmup Iteration  18: 4573140.597 ops/s
# Warmup Iteration  19: 4576948.646 ops/s
# Warmup Iteration  20: 4582706.339 ops/s
# Warmup Iteration  21: 4609895.164 ops/s
# Warmup Iteration  22: 4608942.535 ops/s
# Warmup Iteration  23: 4605971.341 ops/s
# Warmup Iteration  24: 4611177.692 ops/s
# Warmup Iteration  25: 4593003.823 ops/s
# Warmup Iteration  26: 4591854.597 ops/s
# Warmup Iteration  27: 4582974.870 ops/s
# Warmup Iteration  28: 4593390.414 ops/s
# Warmup Iteration  29: 4603678.571 ops/s
# Warmup Iteration  30: 4608846.713 ops/s
Iteration   1: 4608242.661 ops/s
Iteration   2: 4584814.830 ops/s
Iteration   3: 4588287.562 ops/s
Iteration   4: 4604774.275 ops/s
Iteration   5: 4585174.976 ops/s
Iteration   6: 4560600.458 ops/s
Iteration   7: 4585614.602 ops/s
Iteration   8: 4573191.138 ops/s
Iteration   9: 4608296.142 ops/s
Iteration  10: 4593791.490 ops/s
Iteration  11: 4589582.091 ops/s
Iteration  12: 4554062.366 ops/s
Iteration  13: 4583052.727 ops/s
Iteration  14: 4581844.384 ops/s
Iteration  15: 4600630.209 ops/s
Iteration  16: 4603700.081 ops/s
Iteration  17: 4596685.466 ops/s
Iteration  18: 4578306.783 ops/s
Iteration  19: 4601102.972 ops/s
Iteration  20: 4584728.745 ops/s
Iteration  21: 4602128.758 ops/s
Iteration  22: 4593163.410 ops/s
Iteration  23: 4594254.673 ops/s
Iteration  24: 4549502.776 ops/s
Iteration  25: 4551697.025 ops/s
Iteration  26: 4589354.549 ops/s
Iteration  27: 4607566.571 ops/s
Iteration  28: 4582172.857 ops/s
Iteration  29: 4574496.503 ops/s
Iteration  30: 4602853.682 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableList":
  4587122.492 ±(99.9%) 11075.124 ops/s [Average]
  (min, avg, max) = (4549502.776, 4587122.492, 4608296.142), stdev = 16576.726
  CI (99.9%): [4576047.368, 4598197.617] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableList  thrpt   30  4587122.492 ± 11075.124  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 843376.055 ops/s
# Warmup Iteration   2: 1820778.352 ops/s
# Warmup Iteration   3: 1862564.435 ops/s
# Warmup Iteration   4: 1899318.620 ops/s
# Warmup Iteration   5: 1569377.906 ops/s
# Warmup Iteration   6: 1905016.840 ops/s
# Warmup Iteration   7: 1910901.668 ops/s
# Warmup Iteration   8: 1903595.090 ops/s
# Warmup Iteration   9: 1905325.147 ops/s
# Warmup Iteration  10: 1907169.226 ops/s
# Warmup Iteration  11: 1899890.384 ops/s
# Warmup Iteration  12: 1899067.000 ops/s
# Warmup Iteration  13: 1900382.820 ops/s
# Warmup Iteration  14: 1898714.442 ops/s
# Warmup Iteration  15: 1892637.259 ops/s
# Warmup Iteration  16: 1905705.840 ops/s
# Warmup Iteration  17: 1888330.629 ops/s
# Warmup Iteration  18: 1910333.758 ops/s
# Warmup Iteration  19: 1887819.475 ops/s
# Warmup Iteration  20: 1893794.053 ops/s
# Warmup Iteration  21: 1893609.810 ops/s
# Warmup Iteration  22: 1894855.413 ops/s
# Warmup Iteration  23: 1897778.987 ops/s
# Warmup Iteration  24: 1901377.643 ops/s
# Warmup Iteration  25: 1894175.110 ops/s
# Warmup Iteration  26: 1889192.576 ops/s
# Warmup Iteration  27: 1906788.142 ops/s
# Warmup Iteration  28: 1916408.373 ops/s
# Warmup Iteration  29: 1922403.711 ops/s
# Warmup Iteration  30: 1894997.219 ops/s
Iteration   1: 1905193.836 ops/s
Iteration   2: 1911551.966 ops/s
Iteration   3: 1916257.417 ops/s
Iteration   4: 1889375.080 ops/s
Iteration   5: 1902198.981 ops/s
Iteration   6: 1897749.316 ops/s
Iteration   7: 1893825.019 ops/s
Iteration   8: 1892131.558 ops/s
Iteration   9: 1905781.990 ops/s
Iteration  10: 1893028.920 ops/s
Iteration  11: 1894665.474 ops/s
Iteration  12: 1904283.937 ops/s
Iteration  13: 1892500.191 ops/s
Iteration  14: 1886425.516 ops/s
Iteration  15: 1909359.329 ops/s
Iteration  16: 1880256.117 ops/s
Iteration  17: 1896833.077 ops/s
Iteration  18: 1903930.877 ops/s
Iteration  19: 1901698.699 ops/s
Iteration  20: 1902246.599 ops/s
Iteration  21: 1917211.502 ops/s
Iteration  22: 1899949.895 ops/s
Iteration  23: 1895245.136 ops/s
Iteration  24: 1895681.225 ops/s
Iteration  25: 1913082.795 ops/s
Iteration  26: 1904869.279 ops/s
Iteration  27: 1895761.072 ops/s
Iteration  28: 1911044.218 ops/s
Iteration  29: 1895283.764 ops/s
Iteration  30: 1905159.167 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableMap":
  1900419.398 ±(99.9%) 5876.614 ops/s [Average]
  (min, avg, max) = (1880256.117, 1900419.398, 1917211.502), stdev = 8795.840
  CI (99.9%): [1894542.784, 1906296.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1900419.398 ± 5876.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1275534.576 ops/s
# Warmup Iteration   2: 2344392.793 ops/s
# Warmup Iteration   3: 2645598.221 ops/s
# Warmup Iteration   4: 2663619.460 ops/s
# Warmup Iteration   5: 2460549.278 ops/s
# Warmup Iteration   6: 2404906.293 ops/s
# Warmup Iteration   7: 2665522.805 ops/s
# Warmup Iteration   8: 2653199.538 ops/s
# Warmup Iteration   9: 2660069.641 ops/s
# Warmup Iteration  10: 2671037.230 ops/s
# Warmup Iteration  11: 2646873.605 ops/s
# Warmup Iteration  12: 2654432.000 ops/s
# Warmup Iteration  13: 2654224.200 ops/s
# Warmup Iteration  14: 2654609.532 ops/s
# Warmup Iteration  15: 2657818.446 ops/s
# Warmup Iteration  16: 2650678.136 ops/s
# Warmup Iteration  17: 2645365.703 ops/s
# Warmup Iteration  18: 2661212.468 ops/s
# Warmup Iteration  19: 2653880.554 ops/s
# Warmup Iteration  20: 2655927.264 ops/s
# Warmup Iteration  21: 2660786.440 ops/s
# Warmup Iteration  22: 2666813.740 ops/s
# Warmup Iteration  23: 2659095.421 ops/s
# Warmup Iteration  24: 2662561.015 ops/s
# Warmup Iteration  25: 2639790.185 ops/s
# Warmup Iteration  26: 2654338.546 ops/s
# Warmup Iteration  27: 2660502.117 ops/s
# Warmup Iteration  28: 2649041.456 ops/s
# Warmup Iteration  29: 2651210.566 ops/s
# Warmup Iteration  30: 2662650.832 ops/s
Iteration   1: 2665770.599 ops/s
Iteration   2: 2676717.204 ops/s
Iteration   3: 2652309.185 ops/s
Iteration   4: 2663480.891 ops/s
Iteration   5: 2656806.659 ops/s
Iteration   6: 2656457.492 ops/s
Iteration   7: 2659995.569 ops/s
Iteration   8: 2665424.251 ops/s
Iteration   9: 2664035.266 ops/s
Iteration  10: 2668673.754 ops/s
Iteration  11: 2655524.980 ops/s
Iteration  12: 2671692.105 ops/s
Iteration  13: 2666301.533 ops/s
Iteration  14: 2667967.968 ops/s
Iteration  15: 2674952.531 ops/s
Iteration  16: 2682214.779 ops/s
Iteration  17: 2668837.104 ops/s
Iteration  18: 2670216.041 ops/s
Iteration  19: 2670378.697 ops/s
Iteration  20: 2655699.856 ops/s
Iteration  21: 2652403.447 ops/s
Iteration  22: 2661353.606 ops/s
Iteration  23: 2652068.671 ops/s
Iteration  24: 2663287.619 ops/s
Iteration  25: 2677050.371 ops/s
Iteration  26: 2646902.376 ops/s
Iteration  27: 2655286.360 ops/s
Iteration  28: 2688663.855 ops/s
Iteration  29: 2659917.884 ops/s
Iteration  30: 2678709.507 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSet":
  2664970.005 ±(99.9%) 6636.941 ops/s [Average]
  (min, avg, max) = (2646902.376, 2664970.005, 2688663.855), stdev = 9933.862
  CI (99.9%): [2658333.064, 2671606.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSet  thrpt   30  2664970.005 ± 6636.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1038988.109 ops/s
# Warmup Iteration   2: 2664161.018 ops/s
# Warmup Iteration   3: 2691143.551 ops/s
# Warmup Iteration   4: 2228607.540 ops/s
# Warmup Iteration   5: 2676327.114 ops/s
# Warmup Iteration   6: 2688252.239 ops/s
# Warmup Iteration   7: 2704795.671 ops/s
# Warmup Iteration   8: 2682910.781 ops/s
# Warmup Iteration   9: 2674292.952 ops/s
# Warmup Iteration  10: 2670011.627 ops/s
# Warmup Iteration  11: 2678700.348 ops/s
# Warmup Iteration  12: 2683480.111 ops/s
# Warmup Iteration  13: 2692703.357 ops/s
# Warmup Iteration  14: 2687309.988 ops/s
# Warmup Iteration  15: 2685095.277 ops/s
# Warmup Iteration  16: 2667582.748 ops/s
# Warmup Iteration  17: 2666238.375 ops/s
# Warmup Iteration  18: 2695770.837 ops/s
# Warmup Iteration  19: 2685471.125 ops/s
# Warmup Iteration  20: 2687271.410 ops/s
# Warmup Iteration  21: 2690533.691 ops/s
# Warmup Iteration  22: 2692030.833 ops/s
# Warmup Iteration  23: 2690875.155 ops/s
# Warmup Iteration  24: 2687407.166 ops/s
# Warmup Iteration  25: 2683936.432 ops/s
# Warmup Iteration  26: 2684953.483 ops/s
# Warmup Iteration  27: 2701986.469 ops/s
# Warmup Iteration  28: 2693596.358 ops/s
# Warmup Iteration  29: 2695229.086 ops/s
# Warmup Iteration  30: 2690939.209 ops/s
Iteration   1: 2693090.824 ops/s
Iteration   2: 2677942.102 ops/s
Iteration   3: 2680707.695 ops/s
Iteration   4: 2670192.749 ops/s
Iteration   5: 2687667.330 ops/s
Iteration   6: 2700422.641 ops/s
Iteration   7: 2697945.959 ops/s
Iteration   8: 2702443.795 ops/s
Iteration   9: 2674566.694 ops/s
Iteration  10: 2694962.754 ops/s
Iteration  11: 2676146.396 ops/s
Iteration  12: 2687078.520 ops/s
Iteration  13: 2687177.340 ops/s
Iteration  14: 2670538.364 ops/s
Iteration  15: 2696746.698 ops/s
Iteration  16: 2705356.972 ops/s
Iteration  17: 2692213.412 ops/s
Iteration  18: 2685365.355 ops/s
Iteration  19: 2663062.721 ops/s
Iteration  20: 2678976.347 ops/s
Iteration  21: 2686545.121 ops/s
Iteration  22: 2686777.797 ops/s
Iteration  23: 2687674.165 ops/s
Iteration  24: 2683065.009 ops/s
Iteration  25: 2688811.122 ops/s
Iteration  26: 2658857.857 ops/s
Iteration  27: 2669474.634 ops/s
Iteration  28: 2676602.020 ops/s
Iteration  29: 2648098.614 ops/s
Iteration  30: 2659302.132 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  2682260.438 ±(99.9%) 9217.214 ops/s [Average]
  (min, avg, max) = (2648098.614, 2682260.438, 2705356.972), stdev = 13795.893
  CI (99.9%): [2673043.224, 2691477.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  2682260.438 ± 9217.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 327875.604 ops/s
# Warmup Iteration   2: 767858.612 ops/s
# Warmup Iteration   3: 819764.730 ops/s
# Warmup Iteration   4: 786763.048 ops/s
# Warmup Iteration   5: 720559.491 ops/s
# Warmup Iteration   6: 831554.436 ops/s
# Warmup Iteration   7: 825072.522 ops/s
# Warmup Iteration   8: 827299.101 ops/s
# Warmup Iteration   9: 829122.401 ops/s
# Warmup Iteration  10: 828056.158 ops/s
# Warmup Iteration  11: 826796.753 ops/s
# Warmup Iteration  12: 827266.597 ops/s
# Warmup Iteration  13: 828280.199 ops/s
# Warmup Iteration  14: 828432.398 ops/s
# Warmup Iteration  15: 826564.501 ops/s
# Warmup Iteration  16: 828476.503 ops/s
# Warmup Iteration  17: 829317.265 ops/s
# Warmup Iteration  18: 829409.475 ops/s
# Warmup Iteration  19: 823657.554 ops/s
# Warmup Iteration  20: 822912.532 ops/s
# Warmup Iteration  21: 829107.921 ops/s
# Warmup Iteration  22: 826087.640 ops/s
# Warmup Iteration  23: 823497.634 ops/s
# Warmup Iteration  24: 819083.008 ops/s
# Warmup Iteration  25: 825104.580 ops/s
# Warmup Iteration  26: 827911.794 ops/s
# Warmup Iteration  27: 825881.667 ops/s
# Warmup Iteration  28: 817434.784 ops/s
# Warmup Iteration  29: 820125.061 ops/s
# Warmup Iteration  30: 818609.674 ops/s
Iteration   1: 823228.521 ops/s
Iteration   2: 822265.536 ops/s
Iteration   3: 817532.436 ops/s
Iteration   4: 819348.926 ops/s
Iteration   5: 820205.841 ops/s
Iteration   6: 822808.826 ops/s
Iteration   7: 819370.679 ops/s
Iteration   8: 823009.600 ops/s
Iteration   9: 826829.843 ops/s
Iteration  10: 823502.161 ops/s
Iteration  11: 820747.303 ops/s
Iteration  12: 822116.545 ops/s
Iteration  13: 822922.437 ops/s
Iteration  14: 824364.597 ops/s
Iteration  15: 822343.483 ops/s
Iteration  16: 820309.646 ops/s
Iteration  17: 828307.587 ops/s
Iteration  18: 831549.119 ops/s
Iteration  19: 825341.932 ops/s
Iteration  20: 822032.783 ops/s
Iteration  21: 823162.696 ops/s
Iteration  22: 827898.521 ops/s
Iteration  23: 828461.069 ops/s
Iteration  24: 829766.443 ops/s
Iteration  25: 827969.471 ops/s
Iteration  26: 833334.037 ops/s
Iteration  27: 830070.972 ops/s
Iteration  28: 833253.474 ops/s
Iteration  29: 830361.869 ops/s
Iteration  30: 832662.872 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy":
  825169.307 ±(99.9%) 3027.462 ops/s [Average]
  (min, avg, max) = (817532.436, 825169.307, 833334.037), stdev = 4531.362
  CI (99.9%): [822141.846, 828196.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  825169.307 ± 3027.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345451.827 ops/s
# Warmup Iteration   2: 561018.623 ops/s
# Warmup Iteration   3: 686298.245 ops/s
# Warmup Iteration   4: 681128.858 ops/s
# Warmup Iteration   5: 687104.934 ops/s
# Warmup Iteration   6: 689304.491 ops/s
# Warmup Iteration   7: 568611.146 ops/s
# Warmup Iteration   8: 682117.553 ops/s
# Warmup Iteration   9: 686234.236 ops/s
# Warmup Iteration  10: 685641.908 ops/s
# Warmup Iteration  11: 688174.971 ops/s
# Warmup Iteration  12: 688917.620 ops/s
# Warmup Iteration  13: 690104.620 ops/s
# Warmup Iteration  14: 687511.540 ops/s
# Warmup Iteration  15: 690873.015 ops/s
# Warmup Iteration  16: 688377.933 ops/s
# Warmup Iteration  17: 686898.723 ops/s
# Warmup Iteration  18: 686366.049 ops/s
# Warmup Iteration  19: 685802.754 ops/s
# Warmup Iteration  20: 685947.346 ops/s
# Warmup Iteration  21: 687423.051 ops/s
# Warmup Iteration  22: 690038.995 ops/s
# Warmup Iteration  23: 686208.432 ops/s
# Warmup Iteration  24: 687617.292 ops/s
# Warmup Iteration  25: 687873.139 ops/s
# Warmup Iteration  26: 686215.719 ops/s
# Warmup Iteration  27: 688000.657 ops/s
# Warmup Iteration  28: 687411.510 ops/s
# Warmup Iteration  29: 688879.922 ops/s
# Warmup Iteration  30: 689007.520 ops/s
Iteration   1: 684712.788 ops/s
Iteration   2: 688228.516 ops/s
Iteration   3: 687551.601 ops/s
Iteration   4: 686284.355 ops/s
Iteration   5: 687423.677 ops/s
Iteration   6: 685136.123 ops/s
Iteration   7: 688569.110 ops/s
Iteration   8: 689659.462 ops/s
Iteration   9: 688471.956 ops/s
Iteration  10: 685929.153 ops/s
Iteration  11: 685794.010 ops/s
Iteration  12: 687255.782 ops/s
Iteration  13: 685012.967 ops/s
Iteration  14: 689961.548 ops/s
Iteration  15: 685354.784 ops/s
Iteration  16: 685913.772 ops/s
Iteration  17: 687301.653 ops/s
Iteration  18: 685319.164 ops/s
Iteration  19: 686479.437 ops/s
Iteration  20: 688498.472 ops/s
Iteration  21: 686912.531 ops/s
Iteration  22: 685957.116 ops/s
Iteration  23: 686485.737 ops/s
Iteration  24: 691428.639 ops/s
Iteration  25: 688049.341 ops/s
Iteration  26: 690506.527 ops/s
Iteration  27: 690040.609 ops/s
Iteration  28: 687780.712 ops/s
Iteration  29: 683448.437 ops/s
Iteration  30: 689901.019 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  687312.300 ±(99.9%) 1300.882 ops/s [Average]
  (min, avg, max) = (683448.437, 687312.300, 691428.639), stdev = 1947.099
  CI (99.9%): [686011.418, 688613.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  687312.300 ± 1300.882  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 566877.024 ops/s
# Warmup Iteration   2: 1069531.932 ops/s
# Warmup Iteration   3: 1247355.617 ops/s
# Warmup Iteration   4: 1250057.628 ops/s
# Warmup Iteration   5: 1255117.246 ops/s
# Warmup Iteration   6: 1031113.478 ops/s
# Warmup Iteration   7: 1249969.987 ops/s
# Warmup Iteration   8: 1244781.085 ops/s
# Warmup Iteration   9: 1242644.300 ops/s
# Warmup Iteration  10: 1253390.497 ops/s
# Warmup Iteration  11: 1253407.724 ops/s
# Warmup Iteration  12: 1249859.900 ops/s
# Warmup Iteration  13: 1252760.111 ops/s
# Warmup Iteration  14: 1254928.162 ops/s
# Warmup Iteration  15: 1251984.491 ops/s
# Warmup Iteration  16: 1257514.348 ops/s
# Warmup Iteration  17: 1249081.173 ops/s
# Warmup Iteration  18: 1251121.999 ops/s
# Warmup Iteration  19: 1246299.518 ops/s
# Warmup Iteration  20: 1246791.331 ops/s
# Warmup Iteration  21: 1258483.729 ops/s
# Warmup Iteration  22: 1254510.571 ops/s
# Warmup Iteration  23: 1246750.934 ops/s
# Warmup Iteration  24: 1247339.489 ops/s
# Warmup Iteration  25: 1253731.807 ops/s
# Warmup Iteration  26: 1255543.486 ops/s
# Warmup Iteration  27: 1254695.529 ops/s
# Warmup Iteration  28: 1257448.771 ops/s
# Warmup Iteration  29: 1247851.151 ops/s
# Warmup Iteration  30: 1253152.638 ops/s
Iteration   1: 1254794.220 ops/s
Iteration   2: 1259445.687 ops/s
Iteration   3: 1253338.473 ops/s
Iteration   4: 1253409.153 ops/s
Iteration   5: 1250918.815 ops/s
Iteration   6: 1249622.719 ops/s
Iteration   7: 1258795.671 ops/s
Iteration   8: 1252240.705 ops/s
Iteration   9: 1255032.456 ops/s
Iteration  10: 1249477.218 ops/s
Iteration  11: 1252097.433 ops/s
Iteration  12: 1258115.672 ops/s
Iteration  13: 1249393.522 ops/s
Iteration  14: 1250821.484 ops/s
Iteration  15: 1248761.821 ops/s
Iteration  16: 1250660.813 ops/s
Iteration  17: 1249714.351 ops/s
Iteration  18: 1245243.085 ops/s
Iteration  19: 1251347.581 ops/s
Iteration  20: 1250965.761 ops/s
Iteration  21: 1246147.331 ops/s
Iteration  22: 1248777.866 ops/s
Iteration  23: 1248221.214 ops/s
Iteration  24: 1258070.428 ops/s
Iteration  25: 1238419.866 ops/s
Iteration  26: 1241502.646 ops/s
Iteration  27: 1245320.193 ops/s
Iteration  28: 1246038.041 ops/s
Iteration  29: 1246487.620 ops/s
Iteration  30: 1249990.285 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1250439.071 ±(99.9%) 3229.912 ops/s [Average]
  (min, avg, max) = (1238419.866, 1250439.071, 1259445.687), stdev = 4834.380
  CI (99.9%): [1247209.159, 1253668.983] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1250439.071 ± 3229.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3087336.916 ops/s
# Warmup Iteration   2: 6645576.024 ops/s
# Warmup Iteration   3: 5803382.690 ops/s
# Warmup Iteration   4: 7060259.227 ops/s
# Warmup Iteration   5: 7046258.904 ops/s
# Warmup Iteration   6: 6995509.074 ops/s
# Warmup Iteration   7: 7019874.285 ops/s
# Warmup Iteration   8: 7030191.031 ops/s
# Warmup Iteration   9: 7005614.898 ops/s
# Warmup Iteration  10: 7032146.823 ops/s
# Warmup Iteration  11: 7009699.767 ops/s
# Warmup Iteration  12: 7014313.405 ops/s
# Warmup Iteration  13: 7054260.205 ops/s
# Warmup Iteration  14: 7006715.423 ops/s
# Warmup Iteration  15: 6989599.271 ops/s
# Warmup Iteration  16: 7018756.293 ops/s
# Warmup Iteration  17: 7005843.481 ops/s
# Warmup Iteration  18: 7027825.180 ops/s
# Warmup Iteration  19: 7020228.474 ops/s
# Warmup Iteration  20: 7020812.972 ops/s
# Warmup Iteration  21: 7008269.120 ops/s
# Warmup Iteration  22: 7023457.924 ops/s
# Warmup Iteration  23: 7000536.243 ops/s
# Warmup Iteration  24: 6928183.527 ops/s
# Warmup Iteration  25: 7001397.313 ops/s
# Warmup Iteration  26: 7022629.955 ops/s
# Warmup Iteration  27: 7039827.997 ops/s
# Warmup Iteration  28: 7033249.375 ops/s
# Warmup Iteration  29: 7000450.675 ops/s
# Warmup Iteration  30: 7027470.376 ops/s
Iteration   1: 7053353.652 ops/s
Iteration   2: 7061488.420 ops/s
Iteration   3: 7004781.989 ops/s
Iteration   4: 7030529.952 ops/s
Iteration   5: 7030870.008 ops/s
Iteration   6: 7064578.505 ops/s
Iteration   7: 7059465.956 ops/s
Iteration   8: 7002911.617 ops/s
Iteration   9: 7076483.883 ops/s
Iteration  10: 7028316.059 ops/s
Iteration  11: 7046514.315 ops/s
Iteration  12: 7004556.422 ops/s
Iteration  13: 7072251.275 ops/s
Iteration  14: 7023801.631 ops/s
Iteration  15: 6972160.349 ops/s
Iteration  16: 7019357.090 ops/s
Iteration  17: 7045347.965 ops/s
Iteration  18: 7039776.071 ops/s
Iteration  19: 7056351.844 ops/s
Iteration  20: 7028918.190 ops/s
Iteration  21: 7038753.536 ops/s
Iteration  22: 7034498.826 ops/s
Iteration  23: 7069332.354 ops/s
Iteration  24: 7019855.327 ops/s
Iteration  25: 7023973.787 ops/s
Iteration  26: 7069385.551 ops/s
Iteration  27: 7053205.081 ops/s
Iteration  28: 6980858.325 ops/s
Iteration  29: 7070493.442 ops/s
Iteration  30: 7060352.648 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedListBy":
  7038084.136 ±(99.9%) 18086.523 ops/s [Average]
  (min, avg, max) = (6972160.349, 7038084.136, 7076483.883), stdev = 27071.058
  CI (99.9%): [7019997.613, 7056170.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  7038084.136 ± 18086.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1892822.259 ops/s
# Warmup Iteration   2: 3143046.021 ops/s
# Warmup Iteration   3: 3627737.061 ops/s
# Warmup Iteration   4: 3657977.055 ops/s
# Warmup Iteration   5: 3664576.880 ops/s
# Warmup Iteration   6: 3022104.988 ops/s
# Warmup Iteration   7: 3647719.802 ops/s
# Warmup Iteration   8: 3648980.196 ops/s
# Warmup Iteration   9: 3646302.117 ops/s
# Warmup Iteration  10: 3648247.912 ops/s
# Warmup Iteration  11: 3639445.057 ops/s
# Warmup Iteration  12: 3652919.404 ops/s
# Warmup Iteration  13: 3641644.902 ops/s
# Warmup Iteration  14: 3641148.063 ops/s
# Warmup Iteration  15: 3653917.638 ops/s
# Warmup Iteration  16: 3654647.182 ops/s
# Warmup Iteration  17: 3660461.447 ops/s
# Warmup Iteration  18: 3654792.652 ops/s
# Warmup Iteration  19: 3642419.509 ops/s
# Warmup Iteration  20: 3660539.397 ops/s
# Warmup Iteration  21: 3661489.738 ops/s
# Warmup Iteration  22: 3627948.224 ops/s
# Warmup Iteration  23: 3635707.659 ops/s
# Warmup Iteration  24: 3644865.553 ops/s
# Warmup Iteration  25: 3636725.614 ops/s
# Warmup Iteration  26: 3641488.528 ops/s
# Warmup Iteration  27: 3659573.540 ops/s
# Warmup Iteration  28: 3628403.366 ops/s
# Warmup Iteration  29: 3657703.943 ops/s
# Warmup Iteration  30: 3637062.197 ops/s
Iteration   1: 3635877.559 ops/s
Iteration   2: 3656286.228 ops/s
Iteration   3: 3658509.876 ops/s
Iteration   4: 3653590.805 ops/s
Iteration   5: 3669814.900 ops/s
Iteration   6: 3641422.033 ops/s
Iteration   7: 3637151.918 ops/s
Iteration   8: 3638455.103 ops/s
Iteration   9: 3645230.357 ops/s
Iteration  10: 3650930.335 ops/s
Iteration  11: 3657249.580 ops/s
Iteration  12: 3640274.559 ops/s
Iteration  13: 3642555.977 ops/s
Iteration  14: 3647272.637 ops/s
Iteration  15: 3656775.781 ops/s
Iteration  16: 3621157.151 ops/s
Iteration  17: 3652938.886 ops/s
Iteration  18: 3648440.982 ops/s
Iteration  19: 3640628.375 ops/s
Iteration  20: 3647058.713 ops/s
Iteration  21: 3652578.920 ops/s
Iteration  22: 3671949.733 ops/s
Iteration  23: 3649853.015 ops/s
Iteration  24: 3656165.101 ops/s
Iteration  25: 3631254.611 ops/s
Iteration  26: 3634640.879 ops/s
Iteration  27: 3648008.960 ops/s
Iteration  28: 3652063.712 ops/s
Iteration  29: 3652040.273 ops/s
Iteration  30: 3653594.625 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  3648125.719 ±(99.9%) 7171.691 ops/s [Average]
  (min, avg, max) = (3621157.151, 3648125.719, 3671949.733), stdev = 10734.250
  CI (99.9%): [3640954.029, 3655297.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  3648125.719 ± 7171.691  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6137967.440 ops/s
# Warmup Iteration   2: 13896247.379 ops/s
# Warmup Iteration   3: 11808104.879 ops/s
# Warmup Iteration   4: 14108629.022 ops/s
# Warmup Iteration   5: 14111528.300 ops/s
# Warmup Iteration   6: 14004361.514 ops/s
# Warmup Iteration   7: 14032407.599 ops/s
# Warmup Iteration   8: 14096423.984 ops/s
# Warmup Iteration   9: 14115939.178 ops/s
# Warmup Iteration  10: 14092221.717 ops/s
# Warmup Iteration  11: 14093937.433 ops/s
# Warmup Iteration  12: 14063914.569 ops/s
# Warmup Iteration  13: 14116956.587 ops/s
# Warmup Iteration  14: 14034479.367 ops/s
# Warmup Iteration  15: 14074198.070 ops/s
# Warmup Iteration  16: 14096887.503 ops/s
# Warmup Iteration  17: 14089788.316 ops/s
# Warmup Iteration  18: 14092335.002 ops/s
# Warmup Iteration  19: 14078179.071 ops/s
# Warmup Iteration  20: 14179545.640 ops/s
# Warmup Iteration  21: 14069160.120 ops/s
# Warmup Iteration  22: 14059595.118 ops/s
# Warmup Iteration  23: 13914310.526 ops/s
# Warmup Iteration  24: 14136660.712 ops/s
# Warmup Iteration  25: 14116759.032 ops/s
# Warmup Iteration  26: 14060229.651 ops/s
# Warmup Iteration  27: 14176057.126 ops/s
# Warmup Iteration  28: 14061180.073 ops/s
# Warmup Iteration  29: 14090417.468 ops/s
# Warmup Iteration  30: 14080742.877 ops/s
Iteration   1: 14133177.290 ops/s
Iteration   2: 14153044.639 ops/s
Iteration   3: 14123450.885 ops/s
Iteration   4: 14109110.724 ops/s
Iteration   5: 13944085.630 ops/s
Iteration   6: 13946099.793 ops/s
Iteration   7: 14051342.604 ops/s
Iteration   8: 14176977.958 ops/s
Iteration   9: 14149501.396 ops/s
Iteration  10: 14130746.483 ops/s
Iteration  11: 14168995.122 ops/s
Iteration  12: 13958164.101 ops/s
Iteration  13: 13988286.144 ops/s
Iteration  14: 14125290.661 ops/s
Iteration  15: 14007591.021 ops/s
Iteration  16: 14064616.265 ops/s
Iteration  17: 14094930.451 ops/s
Iteration  18: 14098740.558 ops/s
Iteration  19: 14088837.983 ops/s
Iteration  20: 14063347.125 ops/s
Iteration  21: 14042072.859 ops/s
Iteration  22: 14116308.568 ops/s
Iteration  23: 14064738.078 ops/s
Iteration  24: 14008047.846 ops/s
Iteration  25: 14020350.170 ops/s
Iteration  26: 14040294.382 ops/s
Iteration  27: 14074414.760 ops/s
Iteration  28: 14048712.965 ops/s
Iteration  29: 14096119.278 ops/s
Iteration  30: 14048552.390 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  14071198.271 ±(99.9%) 42582.586 ops/s [Average]
  (min, avg, max) = (13944085.630, 14071198.271, 14176977.958), stdev = 63735.614
  CI (99.9%): [14028615.685, 14113780.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  14071198.271 ± 42582.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691421.949 ops/s
# Warmup Iteration   2: 1831988.255 ops/s
# Warmup Iteration   3: 1872412.169 ops/s
# Warmup Iteration   4: 1547505.443 ops/s
# Warmup Iteration   5: 1882543.679 ops/s
# Warmup Iteration   6: 1872932.753 ops/s
# Warmup Iteration   7: 1860516.499 ops/s
# Warmup Iteration   8: 1879818.928 ops/s
# Warmup Iteration   9: 1877317.943 ops/s
# Warmup Iteration  10: 1877743.600 ops/s
# Warmup Iteration  11: 1874025.412 ops/s
# Warmup Iteration  12: 1875013.583 ops/s
# Warmup Iteration  13: 1886048.961 ops/s
# Warmup Iteration  14: 1876442.891 ops/s
# Warmup Iteration  15: 1875377.914 ops/s
# Warmup Iteration  16: 1874137.538 ops/s
# Warmup Iteration  17: 1882128.808 ops/s
# Warmup Iteration  18: 1875726.041 ops/s
# Warmup Iteration  19: 1875149.553 ops/s
# Warmup Iteration  20: 1873713.159 ops/s
# Warmup Iteration  21: 1874502.127 ops/s
# Warmup Iteration  22: 1881708.942 ops/s
# Warmup Iteration  23: 1878167.634 ops/s
# Warmup Iteration  24: 1885579.051 ops/s
# Warmup Iteration  25: 1878660.114 ops/s
# Warmup Iteration  26: 1879102.745 ops/s
# Warmup Iteration  27: 1877652.388 ops/s
# Warmup Iteration  28: 1868651.441 ops/s
# Warmup Iteration  29: 1883125.894 ops/s
# Warmup Iteration  30: 1869731.073 ops/s
Iteration   1: 1868599.196 ops/s
Iteration   2: 1881280.079 ops/s
Iteration   3: 1883406.563 ops/s
Iteration   4: 1884511.270 ops/s
Iteration   5: 1880233.455 ops/s
Iteration   6: 1876167.875 ops/s
Iteration   7: 1879728.799 ops/s
Iteration   8: 1879531.004 ops/s
Iteration   9: 1872301.751 ops/s
Iteration  10: 1871812.072 ops/s
Iteration  11: 1879790.382 ops/s
Iteration  12: 1884774.743 ops/s
Iteration  13: 1881567.135 ops/s
Iteration  14: 1852948.421 ops/s
Iteration  15: 1874013.749 ops/s
Iteration  16: 1886591.011 ops/s
Iteration  17: 1871515.591 ops/s
Iteration  18: 1887563.516 ops/s
Iteration  19: 1882349.471 ops/s
Iteration  20: 1885858.141 ops/s
Iteration  21: 1880072.910 ops/s
Iteration  22: 1869572.571 ops/s
Iteration  23: 1874234.912 ops/s
Iteration  24: 1864607.694 ops/s
Iteration  25: 1883583.519 ops/s
Iteration  26: 1881394.544 ops/s
Iteration  27: 1887614.470 ops/s
Iteration  28: 1894613.544 ops/s
Iteration  29: 1876809.846 ops/s
Iteration  30: 1879926.066 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1878565.810 ±(99.9%) 5441.932 ops/s [Average]
  (min, avg, max) = (1852948.421, 1878565.810, 1894613.544), stdev = 8145.228
  CI (99.9%): [1873123.878, 1884007.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1878565.810 ± 5441.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 994673.353 ops/s
# Warmup Iteration   2: 2597959.755 ops/s
# Warmup Iteration   3: 2609302.670 ops/s
# Warmup Iteration   4: 2183913.380 ops/s
# Warmup Iteration   5: 2617599.693 ops/s
# Warmup Iteration   6: 2624021.042 ops/s
# Warmup Iteration   7: 2612108.307 ops/s
# Warmup Iteration   8: 2617893.721 ops/s
# Warmup Iteration   9: 2627558.826 ops/s
# Warmup Iteration  10: 2618580.723 ops/s
# Warmup Iteration  11: 2612706.874 ops/s
# Warmup Iteration  12: 2629479.776 ops/s
# Warmup Iteration  13: 2627667.388 ops/s
# Warmup Iteration  14: 2627912.792 ops/s
# Warmup Iteration  15: 2618207.651 ops/s
# Warmup Iteration  16: 2611534.299 ops/s
# Warmup Iteration  17: 2614264.757 ops/s
# Warmup Iteration  18: 2610009.258 ops/s
# Warmup Iteration  19: 2622146.861 ops/s
# Warmup Iteration  20: 2634268.104 ops/s
# Warmup Iteration  21: 2604787.985 ops/s
# Warmup Iteration  22: 2606124.078 ops/s
# Warmup Iteration  23: 2606265.275 ops/s
# Warmup Iteration  24: 2608387.893 ops/s
# Warmup Iteration  25: 2603312.663 ops/s
# Warmup Iteration  26: 2617091.815 ops/s
# Warmup Iteration  27: 2613224.719 ops/s
# Warmup Iteration  28: 2614947.299 ops/s
# Warmup Iteration  29: 2616540.278 ops/s
# Warmup Iteration  30: 2608612.874 ops/s
Iteration   1: 2611474.662 ops/s
Iteration   2: 2621638.604 ops/s
Iteration   3: 2607823.738 ops/s
Iteration   4: 2616791.243 ops/s
Iteration   5: 2616333.402 ops/s
Iteration   6: 2628186.535 ops/s
Iteration   7: 2628788.977 ops/s
Iteration   8: 2614579.550 ops/s
Iteration   9: 2614793.021 ops/s
Iteration  10: 2595772.731 ops/s
Iteration  11: 2592230.627 ops/s
Iteration  12: 2603251.612 ops/s
Iteration  13: 2599418.844 ops/s
Iteration  14: 2624820.918 ops/s
Iteration  15: 2616695.087 ops/s
Iteration  16: 2619035.073 ops/s
Iteration  17: 2606977.755 ops/s
Iteration  18: 2616119.839 ops/s
Iteration  19: 2608566.573 ops/s
Iteration  20: 2603338.969 ops/s
Iteration  21: 2608476.621 ops/s
Iteration  22: 2617416.385 ops/s
Iteration  23: 2609179.193 ops/s
Iteration  24: 2601939.563 ops/s
Iteration  25: 2617853.857 ops/s
Iteration  26: 2607695.963 ops/s
Iteration  27: 2604152.990 ops/s
Iteration  28: 2614179.844 ops/s
Iteration  29: 2619382.589 ops/s
Iteration  30: 2615715.542 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  2612087.677 ±(99.9%) 5953.439 ops/s [Average]
  (min, avg, max) = (2592230.627, 2612087.677, 2628788.977), stdev = 8910.828
  CI (99.9%): [2606134.238, 2618041.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  2612087.677 ± 5953.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7260219.218 ops/s
# Warmup Iteration   2: 15291511.804 ops/s
# Warmup Iteration   3: 13035061.089 ops/s
# Warmup Iteration   4: 15493593.500 ops/s
# Warmup Iteration   5: 15418000.340 ops/s
# Warmup Iteration   6: 15316453.605 ops/s
# Warmup Iteration   7: 15397669.645 ops/s
# Warmup Iteration   8: 15396913.756 ops/s
# Warmup Iteration   9: 15454985.186 ops/s
# Warmup Iteration  10: 15475034.588 ops/s
# Warmup Iteration  11: 15455862.672 ops/s
# Warmup Iteration  12: 15456383.136 ops/s
# Warmup Iteration  13: 15422661.516 ops/s
# Warmup Iteration  14: 15426112.987 ops/s
# Warmup Iteration  15: 15387847.847 ops/s
# Warmup Iteration  16: 15428569.812 ops/s
# Warmup Iteration  17: 15422480.884 ops/s
# Warmup Iteration  18: 15531181.217 ops/s
# Warmup Iteration  19: 15443722.523 ops/s
# Warmup Iteration  20: 15325069.362 ops/s
# Warmup Iteration  21: 15362352.763 ops/s
# Warmup Iteration  22: 15394721.515 ops/s
# Warmup Iteration  23: 15377939.765 ops/s
# Warmup Iteration  24: 15542527.141 ops/s
# Warmup Iteration  25: 15402041.171 ops/s
# Warmup Iteration  26: 15456690.398 ops/s
# Warmup Iteration  27: 15401909.665 ops/s
# Warmup Iteration  28: 15429516.735 ops/s
# Warmup Iteration  29: 15377537.655 ops/s
# Warmup Iteration  30: 15450246.970 ops/s
Iteration   1: 15302944.959 ops/s
Iteration   2: 15387576.270 ops/s
Iteration   3: 15414950.570 ops/s
Iteration   4: 15419642.251 ops/s
Iteration   5: 15434127.093 ops/s
Iteration   6: 15339102.247 ops/s
Iteration   7: 15421950.798 ops/s
Iteration   8: 15473308.044 ops/s
Iteration   9: 15497431.345 ops/s
Iteration  10: 15256039.010 ops/s
Iteration  11: 15335504.180 ops/s
Iteration  12: 15360954.173 ops/s
Iteration  13: 15532990.662 ops/s
Iteration  14: 15455426.238 ops/s
Iteration  15: 15435797.696 ops/s
Iteration  16: 15463994.233 ops/s
Iteration  17: 15544661.367 ops/s
Iteration  18: 15466712.503 ops/s
Iteration  19: 15542554.751 ops/s
Iteration  20: 15486961.093 ops/s
Iteration  21: 15463827.509 ops/s
Iteration  22: 15495009.209 ops/s
Iteration  23: 15511386.061 ops/s
Iteration  24: 15422672.092 ops/s
Iteration  25: 15477366.209 ops/s
Iteration  26: 15428806.856 ops/s
Iteration  27: 15434610.774 ops/s
Iteration  28: 15287513.700 ops/s
Iteration  29: 15486853.289 ops/s
Iteration  30: 15295216.466 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toList":
  15429196.388 ±(99.9%) 52026.118 ops/s [Average]
  (min, avg, max) = (15256039.010, 15429196.388, 15544661.367), stdev = 77870.249
  CI (99.9%): [15377170.271, 15481222.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toList  thrpt   30  15429196.388 ± 52026.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1426968.542 ops/s
# Warmup Iteration   2: 3481953.576 ops/s
# Warmup Iteration   3: 3540472.302 ops/s
# Warmup Iteration   4: 2899491.444 ops/s
# Warmup Iteration   5: 3492635.265 ops/s
# Warmup Iteration   6: 3537913.561 ops/s
# Warmup Iteration   7: 3544810.294 ops/s
# Warmup Iteration   8: 3517139.436 ops/s
# Warmup Iteration   9: 3507558.907 ops/s
# Warmup Iteration  10: 3526270.503 ops/s
# Warmup Iteration  11: 3564702.132 ops/s
# Warmup Iteration  12: 3531004.937 ops/s
# Warmup Iteration  13: 3507807.026 ops/s
# Warmup Iteration  14: 3549409.366 ops/s
# Warmup Iteration  15: 3536178.871 ops/s
# Warmup Iteration  16: 3521414.206 ops/s
# Warmup Iteration  17: 3541551.766 ops/s
# Warmup Iteration  18: 3515272.111 ops/s
# Warmup Iteration  19: 3542164.184 ops/s
# Warmup Iteration  20: 3503771.676 ops/s
# Warmup Iteration  21: 3519853.417 ops/s
# Warmup Iteration  22: 3555473.266 ops/s
# Warmup Iteration  23: 3537993.993 ops/s
# Warmup Iteration  24: 3524255.182 ops/s
# Warmup Iteration  25: 3541980.026 ops/s
# Warmup Iteration  26: 3531229.143 ops/s
# Warmup Iteration  27: 3537312.152 ops/s
# Warmup Iteration  28: 3502963.981 ops/s
# Warmup Iteration  29: 3522853.284 ops/s
# Warmup Iteration  30: 3544433.939 ops/s
Iteration   1: 3545846.519 ops/s
Iteration   2: 3475149.737 ops/s
Iteration   3: 3521912.032 ops/s
Iteration   4: 3479634.854 ops/s
Iteration   5: 3453356.986 ops/s
Iteration   6: 3464966.937 ops/s
Iteration   7: 3564702.950 ops/s
Iteration   8: 3531051.767 ops/s
Iteration   9: 3501287.921 ops/s
Iteration  10: 3471491.235 ops/s
Iteration  11: 3513068.158 ops/s
Iteration  12: 3494620.461 ops/s
Iteration  13: 3495676.613 ops/s
Iteration  14: 3544445.797 ops/s
Iteration  15: 3528468.879 ops/s
Iteration  16: 3500327.844 ops/s
Iteration  17: 3475153.806 ops/s
Iteration  18: 3492242.476 ops/s
Iteration  19: 3556828.821 ops/s
Iteration  20: 3540977.672 ops/s
Iteration  21: 3488901.303 ops/s
Iteration  22: 3503124.466 ops/s
Iteration  23: 3524000.166 ops/s
Iteration  24: 3544370.258 ops/s
Iteration  25: 3546572.626 ops/s
Iteration  26: 3528642.098 ops/s
Iteration  27: 3534046.979 ops/s
Iteration  28: 3479947.231 ops/s
Iteration  29: 3507789.241 ops/s
Iteration  30: 3536417.306 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMap":
  3511500.771 ±(99.9%) 20089.462 ops/s [Average]
  (min, avg, max) = (3453356.986, 3511500.771, 3564702.950), stdev = 30068.963
  CI (99.9%): [3491411.310, 3531590.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toMap  thrpt   30  3511500.771 ± 20089.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1350101.276 ops/s
# Warmup Iteration   2: 2989107.958 ops/s
# Warmup Iteration   3: 2765014.843 ops/s
# Warmup Iteration   4: 2804323.303 ops/s
# Warmup Iteration   5: 3008011.351 ops/s
# Warmup Iteration   6: 3027190.080 ops/s
# Warmup Iteration   7: 3034326.436 ops/s
# Warmup Iteration   8: 3033596.960 ops/s
# Warmup Iteration   9: 3044465.092 ops/s
# Warmup Iteration  10: 3023311.719 ops/s
# Warmup Iteration  11: 3038808.477 ops/s
# Warmup Iteration  12: 3048775.423 ops/s
# Warmup Iteration  13: 3030320.580 ops/s
# Warmup Iteration  14: 3027138.289 ops/s
# Warmup Iteration  15: 3036242.254 ops/s
# Warmup Iteration  16: 3020629.428 ops/s
# Warmup Iteration  17: 3013347.001 ops/s
# Warmup Iteration  18: 2999223.777 ops/s
# Warmup Iteration  19: 3006137.824 ops/s
# Warmup Iteration  20: 3008277.525 ops/s
# Warmup Iteration  21: 3003993.944 ops/s
# Warmup Iteration  22: 3007733.449 ops/s
# Warmup Iteration  23: 3032243.877 ops/s
# Warmup Iteration  24: 3050073.807 ops/s
# Warmup Iteration  25: 3016230.959 ops/s
# Warmup Iteration  26: 3023395.508 ops/s
# Warmup Iteration  27: 3018889.056 ops/s
# Warmup Iteration  28: 3039930.148 ops/s
# Warmup Iteration  29: 3023334.540 ops/s
# Warmup Iteration  30: 3036346.444 ops/s
Iteration   1: 3041535.093 ops/s
Iteration   2: 3034284.148 ops/s
Iteration   3: 3020491.579 ops/s
Iteration   4: 3027772.426 ops/s
Iteration   5: 3022226.610 ops/s
Iteration   6: 3022832.254 ops/s
Iteration   7: 3024798.242 ops/s
Iteration   8: 3027713.895 ops/s
Iteration   9: 3011633.269 ops/s
Iteration  10: 3039300.816 ops/s
Iteration  11: 3020781.652 ops/s
Iteration  12: 3055056.313 ops/s
Iteration  13: 3058909.250 ops/s
Iteration  14: 3047917.424 ops/s
Iteration  15: 3029423.657 ops/s
Iteration  16: 2995048.683 ops/s
Iteration  17: 3011898.378 ops/s
Iteration  18: 2986974.758 ops/s
Iteration  19: 3025507.007 ops/s
Iteration  20: 3055930.872 ops/s
Iteration  21: 3031753.217 ops/s
Iteration  22: 3049700.005 ops/s
Iteration  23: 3009318.317 ops/s
Iteration  24: 3026939.548 ops/s
Iteration  25: 3061124.349 ops/s
Iteration  26: 3066992.371 ops/s
Iteration  27: 3028373.065 ops/s
Iteration  28: 2998888.329 ops/s
Iteration  29: 3028552.386 ops/s
Iteration  30: 2988887.142 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toMapTarget":
  3028352.169 ±(99.9%) 13884.560 ops/s [Average]
  (min, avg, max) = (2986974.758, 3028352.169, 3066992.371), stdev = 20781.757
  CI (99.9%): [3014467.609, 3042236.728] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toMapTarget  thrpt   30  3028352.169 ± 13884.560  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5951952.041 ops/s
# Warmup Iteration   2: 14130039.586 ops/s
# Warmup Iteration   3: 11921404.497 ops/s
# Warmup Iteration   4: 14328455.317 ops/s
# Warmup Iteration   5: 14333077.872 ops/s
# Warmup Iteration   6: 14377484.847 ops/s
# Warmup Iteration   7: 14322831.275 ops/s
# Warmup Iteration   8: 14374283.391 ops/s
# Warmup Iteration   9: 14357558.212 ops/s
# Warmup Iteration  10: 14383795.771 ops/s
# Warmup Iteration  11: 14369674.229 ops/s
# Warmup Iteration  12: 14374241.340 ops/s
# Warmup Iteration  13: 14399074.283 ops/s
# Warmup Iteration  14: 14502413.122 ops/s
# Warmup Iteration  15: 14439450.202 ops/s
# Warmup Iteration  16: 14408003.566 ops/s
# Warmup Iteration  17: 14427490.286 ops/s
# Warmup Iteration  18: 14355862.354 ops/s
# Warmup Iteration  19: 14274998.055 ops/s
# Warmup Iteration  20: 14471636.478 ops/s
# Warmup Iteration  21: 14396736.288 ops/s
# Warmup Iteration  22: 14460187.260 ops/s
# Warmup Iteration  23: 14412193.507 ops/s
# Warmup Iteration  24: 14424760.713 ops/s
# Warmup Iteration  25: 14351722.838 ops/s
# Warmup Iteration  26: 14380931.134 ops/s
# Warmup Iteration  27: 14410768.309 ops/s
# Warmup Iteration  28: 14434473.725 ops/s
# Warmup Iteration  29: 14418778.304 ops/s
# Warmup Iteration  30: 14373684.435 ops/s
Iteration   1: 14288659.285 ops/s
Iteration   2: 14471628.873 ops/s
Iteration   3: 14424133.020 ops/s
Iteration   4: 14502227.013 ops/s
Iteration   5: 14380686.603 ops/s
Iteration   6: 14333293.192 ops/s
Iteration   7: 14433033.986 ops/s
Iteration   8: 14432002.474 ops/s
Iteration   9: 14373144.165 ops/s
Iteration  10: 14538806.906 ops/s
Iteration  11: 14449165.204 ops/s
Iteration  12: 14400450.851 ops/s
Iteration  13: 14384800.320 ops/s
Iteration  14: 14491909.893 ops/s
Iteration  15: 14471903.275 ops/s
Iteration  16: 14423512.959 ops/s
Iteration  17: 14342676.780 ops/s
Iteration  18: 14395891.008 ops/s
Iteration  19: 14408922.579 ops/s
Iteration  20: 14404308.142 ops/s
Iteration  21: 14307756.796 ops/s
Iteration  22: 14348783.921 ops/s
Iteration  23: 14385138.073 ops/s
Iteration  24: 14271329.919 ops/s
Iteration  25: 14340823.809 ops/s
Iteration  26: 14403211.672 ops/s
Iteration  27: 14337616.692 ops/s
Iteration  28: 14364320.108 ops/s
Iteration  29: 14342025.675 ops/s
Iteration  30: 14309821.822 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSet":
  14392066.167 ±(99.9%) 43315.943 ops/s [Average]
  (min, avg, max) = (14271329.919, 14392066.167, 14538806.906), stdev = 64833.269
  CI (99.9%): [14348750.225, 14435382.110] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSet  thrpt   30  14392066.167 ± 43315.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 322188.495 ops/s
# Warmup Iteration   2: 720190.517 ops/s
# Warmup Iteration   3: 777301.350 ops/s
# Warmup Iteration   4: 779444.686 ops/s
# Warmup Iteration   5: 651208.271 ops/s
# Warmup Iteration   6: 789975.969 ops/s
# Warmup Iteration   7: 788028.447 ops/s
# Warmup Iteration   8: 788914.423 ops/s
# Warmup Iteration   9: 786094.057 ops/s
# Warmup Iteration  10: 788341.596 ops/s
# Warmup Iteration  11: 784212.260 ops/s
# Warmup Iteration  12: 787555.528 ops/s
# Warmup Iteration  13: 787354.732 ops/s
# Warmup Iteration  14: 785014.005 ops/s
# Warmup Iteration  15: 786830.446 ops/s
# Warmup Iteration  16: 786220.550 ops/s
# Warmup Iteration  17: 784140.137 ops/s
# Warmup Iteration  18: 785413.118 ops/s
# Warmup Iteration  19: 784623.725 ops/s
# Warmup Iteration  20: 785840.270 ops/s
# Warmup Iteration  21: 789243.311 ops/s
# Warmup Iteration  22: 791124.720 ops/s
# Warmup Iteration  23: 789115.540 ops/s
# Warmup Iteration  24: 788395.509 ops/s
# Warmup Iteration  25: 787646.179 ops/s
# Warmup Iteration  26: 787841.604 ops/s
# Warmup Iteration  27: 788331.114 ops/s
# Warmup Iteration  28: 787397.673 ops/s
# Warmup Iteration  29: 784369.897 ops/s
# Warmup Iteration  30: 788267.432 ops/s
Iteration   1: 781791.049 ops/s
Iteration   2: 782502.678 ops/s
Iteration   3: 786684.971 ops/s
Iteration   4: 790321.926 ops/s
Iteration   5: 780530.130 ops/s
Iteration   6: 785534.105 ops/s
Iteration   7: 770640.753 ops/s
Iteration   8: 788649.594 ops/s
Iteration   9: 781718.867 ops/s
Iteration  10: 787026.853 ops/s
Iteration  11: 785865.798 ops/s
Iteration  12: 789719.702 ops/s
Iteration  13: 791273.767 ops/s
Iteration  14: 784490.949 ops/s
Iteration  15: 785730.567 ops/s
Iteration  16: 791950.238 ops/s
Iteration  17: 789594.573 ops/s
Iteration  18: 788437.601 ops/s
Iteration  19: 788937.488 ops/s
Iteration  20: 785956.853 ops/s
Iteration  21: 790807.351 ops/s
Iteration  22: 790447.405 ops/s
Iteration  23: 793419.596 ops/s
Iteration  24: 789694.033 ops/s
Iteration  25: 791637.551 ops/s
Iteration  26: 786626.685 ops/s
Iteration  27: 789829.623 ops/s
Iteration  28: 788960.863 ops/s
Iteration  29: 785199.566 ops/s
Iteration  30: 787815.876 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBagBy":
  787059.900 ±(99.9%) 3003.015 ops/s [Average]
  (min, avg, max) = (770640.753, 787059.900, 793419.596), stdev = 4494.772
  CI (99.9%): [784056.885, 790062.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  787059.900 ± 3003.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520402.419 ops/s
# Warmup Iteration   2: 994313.451 ops/s
# Warmup Iteration   3: 1143517.529 ops/s
# Warmup Iteration   4: 1141000.252 ops/s
# Warmup Iteration   5: 1113452.236 ops/s
# Warmup Iteration   6: 988037.957 ops/s
# Warmup Iteration   7: 1146144.346 ops/s
# Warmup Iteration   8: 1146487.672 ops/s
# Warmup Iteration   9: 1142250.645 ops/s
# Warmup Iteration  10: 1139751.234 ops/s
# Warmup Iteration  11: 1147206.927 ops/s
# Warmup Iteration  12: 1145463.142 ops/s
# Warmup Iteration  13: 1147651.503 ops/s
# Warmup Iteration  14: 1147556.296 ops/s
# Warmup Iteration  15: 1145151.352 ops/s
# Warmup Iteration  16: 1148100.757 ops/s
# Warmup Iteration  17: 1143844.472 ops/s
# Warmup Iteration  18: 1141779.219 ops/s
# Warmup Iteration  19: 1146272.401 ops/s
# Warmup Iteration  20: 1148588.791 ops/s
# Warmup Iteration  21: 1146973.831 ops/s
# Warmup Iteration  22: 1145512.174 ops/s
# Warmup Iteration  23: 1144336.825 ops/s
# Warmup Iteration  24: 1149696.426 ops/s
# Warmup Iteration  25: 1145901.129 ops/s
# Warmup Iteration  26: 1147068.609 ops/s
# Warmup Iteration  27: 1148647.840 ops/s
# Warmup Iteration  28: 1146081.337 ops/s
# Warmup Iteration  29: 1152116.751 ops/s
# Warmup Iteration  30: 1148175.607 ops/s
Iteration   1: 1150461.045 ops/s
Iteration   2: 1152761.893 ops/s
Iteration   3: 1142962.142 ops/s
Iteration   4: 1150705.072 ops/s
Iteration   5: 1148068.149 ops/s
Iteration   6: 1147538.399 ops/s
Iteration   7: 1148804.607 ops/s
Iteration   8: 1147225.096 ops/s
Iteration   9: 1150244.972 ops/s
Iteration  10: 1150357.707 ops/s
Iteration  11: 1153776.530 ops/s
Iteration  12: 1151688.767 ops/s
Iteration  13: 1155018.031 ops/s
Iteration  14: 1150372.846 ops/s
Iteration  15: 1152557.763 ops/s
Iteration  16: 1152689.253 ops/s
Iteration  17: 1155463.919 ops/s
Iteration  18: 1156710.816 ops/s
Iteration  19: 1161991.320 ops/s
Iteration  20: 1151757.684 ops/s
Iteration  21: 1159687.910 ops/s
Iteration  22: 1154274.442 ops/s
Iteration  23: 1154932.206 ops/s
Iteration  24: 1152646.932 ops/s
Iteration  25: 1150838.700 ops/s
Iteration  26: 1159924.116 ops/s
Iteration  27: 1160599.902 ops/s
Iteration  28: 1154506.212 ops/s
Iteration  29: 1159153.372 ops/s
Iteration  30: 1151866.149 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1152986.198 ±(99.9%) 2909.636 ops/s [Average]
  (min, avg, max) = (1142962.142, 1152986.198, 1161991.320), stdev = 4355.007
  CI (99.9%): [1150076.562, 1155895.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1152986.198 ± 2909.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 603515.538 ops/s
# Warmup Iteration   2: 1169995.563 ops/s
# Warmup Iteration   3: 1324264.718 ops/s
# Warmup Iteration   4: 1329887.764 ops/s
# Warmup Iteration   5: 1247590.795 ops/s
# Warmup Iteration   6: 1195297.317 ops/s
# Warmup Iteration   7: 1334337.301 ops/s
# Warmup Iteration   8: 1341660.126 ops/s
# Warmup Iteration   9: 1333743.899 ops/s
# Warmup Iteration  10: 1334867.785 ops/s
# Warmup Iteration  11: 1339359.433 ops/s
# Warmup Iteration  12: 1337305.714 ops/s
# Warmup Iteration  13: 1335329.009 ops/s
# Warmup Iteration  14: 1337954.700 ops/s
# Warmup Iteration  15: 1339418.936 ops/s
# Warmup Iteration  16: 1334344.626 ops/s
# Warmup Iteration  17: 1332025.054 ops/s
# Warmup Iteration  18: 1336284.590 ops/s
# Warmup Iteration  19: 1338334.528 ops/s
# Warmup Iteration  20: 1335260.452 ops/s
# Warmup Iteration  21: 1339471.716 ops/s
# Warmup Iteration  22: 1343146.738 ops/s
# Warmup Iteration  23: 1337382.282 ops/s
# Warmup Iteration  24: 1336929.523 ops/s
# Warmup Iteration  25: 1339097.090 ops/s
# Warmup Iteration  26: 1339496.414 ops/s
# Warmup Iteration  27: 1338068.696 ops/s
# Warmup Iteration  28: 1340599.963 ops/s
# Warmup Iteration  29: 1330914.924 ops/s
# Warmup Iteration  30: 1344826.870 ops/s
Iteration   1: 1338049.776 ops/s
Iteration   2: 1327721.103 ops/s
Iteration   3: 1333177.199 ops/s
Iteration   4: 1324984.680 ops/s
Iteration   5: 1327649.421 ops/s
Iteration   6: 1333664.334 ops/s
Iteration   7: 1328843.686 ops/s
Iteration   8: 1336492.177 ops/s
Iteration   9: 1337670.447 ops/s
Iteration  10: 1335988.140 ops/s
Iteration  11: 1334760.800 ops/s
Iteration  12: 1346390.511 ops/s
Iteration  13: 1341439.902 ops/s
Iteration  14: 1338841.151 ops/s
Iteration  15: 1338305.402 ops/s
Iteration  16: 1338874.750 ops/s
Iteration  17: 1334755.146 ops/s
Iteration  18: 1331259.518 ops/s
Iteration  19: 1338091.634 ops/s
Iteration  20: 1342360.486 ops/s
Iteration  21: 1338985.793 ops/s
Iteration  22: 1328699.853 ops/s
Iteration  23: 1341128.307 ops/s
Iteration  24: 1345367.276 ops/s
Iteration  25: 1340244.614 ops/s
Iteration  26: 1343271.980 ops/s
Iteration  27: 1331173.833 ops/s
Iteration  28: 1342298.756 ops/s
Iteration  29: 1333328.735 ops/s
Iteration  30: 1335363.030 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1336306.081 ±(99.9%) 3671.840 ops/s [Average]
  (min, avg, max) = (1324984.680, 1336306.081, 1346390.511), stdev = 5495.838
  CI (99.9%): [1332634.241, 1339977.922] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1336306.081 ± 3671.840  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 353378.354 ops/s
# Warmup Iteration   2: 387361.566 ops/s
# Warmup Iteration   3: 513691.047 ops/s
# Warmup Iteration   4: 515765.189 ops/s
# Warmup Iteration   5: 509512.845 ops/s
# Warmup Iteration   6: 516851.009 ops/s
# Warmup Iteration   7: 515857.533 ops/s
# Warmup Iteration   8: 517656.065 ops/s
# Warmup Iteration   9: 515926.040 ops/s
# Warmup Iteration  10: 514287.581 ops/s
# Warmup Iteration  11: 500295.171 ops/s
# Warmup Iteration  12: 447612.410 ops/s
# Warmup Iteration  13: 515068.512 ops/s
# Warmup Iteration  14: 513798.261 ops/s
# Warmup Iteration  15: 516519.171 ops/s
# Warmup Iteration  16: 512678.297 ops/s
# Warmup Iteration  17: 526558.205 ops/s
# Warmup Iteration  18: 529529.951 ops/s
# Warmup Iteration  19: 532686.012 ops/s
# Warmup Iteration  20: 533068.550 ops/s
# Warmup Iteration  21: 530591.043 ops/s
# Warmup Iteration  22: 529080.872 ops/s
# Warmup Iteration  23: 530623.789 ops/s
# Warmup Iteration  24: 531696.175 ops/s
# Warmup Iteration  25: 531860.763 ops/s
# Warmup Iteration  26: 531807.907 ops/s
# Warmup Iteration  27: 531973.533 ops/s
# Warmup Iteration  28: 531566.098 ops/s
# Warmup Iteration  29: 533367.834 ops/s
# Warmup Iteration  30: 532515.209 ops/s
Iteration   1: 531726.075 ops/s
Iteration   2: 529324.495 ops/s
Iteration   3: 533051.915 ops/s
Iteration   4: 533642.779 ops/s
Iteration   5: 532506.722 ops/s
Iteration   6: 528663.016 ops/s
Iteration   7: 533362.822 ops/s
Iteration   8: 530603.181 ops/s
Iteration   9: 536203.136 ops/s
Iteration  10: 528228.200 ops/s
Iteration  11: 535600.191 ops/s
Iteration  12: 533777.174 ops/s
Iteration  13: 531467.078 ops/s
Iteration  14: 529058.290 ops/s
Iteration  15: 533885.266 ops/s
Iteration  16: 534383.915 ops/s
Iteration  17: 531740.330 ops/s
Iteration  18: 531566.222 ops/s
Iteration  19: 531904.842 ops/s
Iteration  20: 532980.862 ops/s
Iteration  21: 533745.663 ops/s
Iteration  22: 531837.102 ops/s
Iteration  23: 527412.048 ops/s
Iteration  24: 532907.780 ops/s
Iteration  25: 531062.779 ops/s
Iteration  26: 528648.972 ops/s
Iteration  27: 529197.897 ops/s
Iteration  28: 534761.196 ops/s
Iteration  29: 531681.631 ops/s
Iteration  30: 530591.029 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_null":
  531850.754 ±(99.9%) 1507.295 ops/s [Average]
  (min, avg, max) = (527412.048, 531850.754, 536203.136), stdev = 2256.048
  CI (99.9%): [530343.459, 533358.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  531850.754 ± 1507.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3340666.951 ops/s
# Warmup Iteration   2: 7733386.938 ops/s
# Warmup Iteration   3: 6547413.436 ops/s
# Warmup Iteration   4: 7922663.236 ops/s
# Warmup Iteration   5: 7916313.021 ops/s
# Warmup Iteration   6: 7896888.480 ops/s
# Warmup Iteration   7: 7860712.127 ops/s
# Warmup Iteration   8: 7890614.992 ops/s
# Warmup Iteration   9: 7889132.024 ops/s
# Warmup Iteration  10: 7885062.646 ops/s
# Warmup Iteration  11: 7866888.751 ops/s
# Warmup Iteration  12: 7868657.006 ops/s
# Warmup Iteration  13: 7888486.361 ops/s
# Warmup Iteration  14: 7864911.903 ops/s
# Warmup Iteration  15: 7827812.148 ops/s
# Warmup Iteration  16: 7883432.002 ops/s
# Warmup Iteration  17: 7873229.091 ops/s
# Warmup Iteration  18: 7856351.301 ops/s
# Warmup Iteration  19: 7885649.531 ops/s
# Warmup Iteration  20: 7854786.834 ops/s
# Warmup Iteration  21: 7854547.892 ops/s
# Warmup Iteration  22: 7829348.595 ops/s
# Warmup Iteration  23: 7856346.153 ops/s
# Warmup Iteration  24: 7874628.368 ops/s
# Warmup Iteration  25: 7888276.672 ops/s
# Warmup Iteration  26: 7880283.008 ops/s
# Warmup Iteration  27: 7853770.921 ops/s
# Warmup Iteration  28: 7876630.324 ops/s
# Warmup Iteration  29: 7843720.335 ops/s
# Warmup Iteration  30: 7884449.777 ops/s
Iteration   1: 7812082.969 ops/s
Iteration   2: 7800811.886 ops/s
Iteration   3: 7783268.729 ops/s
Iteration   4: 7906690.992 ops/s
Iteration   5: 7852815.023 ops/s
Iteration   6: 7881033.229 ops/s
Iteration   7: 7869005.874 ops/s
Iteration   8: 7884622.697 ops/s
Iteration   9: 7850284.040 ops/s
Iteration  10: 7891237.116 ops/s
Iteration  11: 7881003.030 ops/s
Iteration  12: 7823418.061 ops/s
Iteration  13: 7828656.446 ops/s
Iteration  14: 7863445.578 ops/s
Iteration  15: 7901336.721 ops/s
Iteration  16: 7820122.604 ops/s
Iteration  17: 7895115.710 ops/s
Iteration  18: 7859513.210 ops/s
Iteration  19: 7874088.466 ops/s
Iteration  20: 7850597.073 ops/s
Iteration  21: 7883379.047 ops/s
Iteration  22: 7829254.263 ops/s
Iteration  23: 7865318.010 ops/s
Iteration  24: 7819871.078 ops/s
Iteration  25: 7912348.828 ops/s
Iteration  26: 7887928.558 ops/s
Iteration  27: 7878230.027 ops/s
Iteration  28: 7843572.416 ops/s
Iteration  29: 7857599.993 ops/s
Iteration  30: 7823658.825 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy":
  7857677.017 ±(99.9%) 22238.211 ops/s [Average]
  (min, avg, max) = (7783268.729, 7857677.017, 7912348.828), stdev = 33285.110
  CI (99.9%): [7835438.805, 7879915.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedListBy  thrpt   30  7857677.017 ± 22238.211  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539777.976 ops/s
# Warmup Iteration   2: 579027.159 ops/s
# Warmup Iteration   3: 680520.995 ops/s
# Warmup Iteration   4: 744533.662 ops/s
# Warmup Iteration   5: 742924.946 ops/s
# Warmup Iteration   6: 741985.394 ops/s
# Warmup Iteration   7: 745006.997 ops/s
# Warmup Iteration   8: 743443.713 ops/s
# Warmup Iteration   9: 745085.774 ops/s
# Warmup Iteration  10: 744538.501 ops/s
# Warmup Iteration  11: 742988.014 ops/s
# Warmup Iteration  12: 741205.721 ops/s
# Warmup Iteration  13: 740597.731 ops/s
# Warmup Iteration  14: 614807.116 ops/s
# Warmup Iteration  15: 742194.748 ops/s
# Warmup Iteration  16: 739046.554 ops/s
# Warmup Iteration  17: 780986.125 ops/s
# Warmup Iteration  18: 779133.992 ops/s
# Warmup Iteration  19: 779377.760 ops/s
# Warmup Iteration  20: 782942.612 ops/s
# Warmup Iteration  21: 781889.122 ops/s
# Warmup Iteration  22: 782203.547 ops/s
# Warmup Iteration  23: 780314.559 ops/s
# Warmup Iteration  24: 778494.262 ops/s
# Warmup Iteration  25: 780570.470 ops/s
# Warmup Iteration  26: 777409.688 ops/s
# Warmup Iteration  27: 779781.480 ops/s
# Warmup Iteration  28: 779421.015 ops/s
# Warmup Iteration  29: 774773.327 ops/s
# Warmup Iteration  30: 774696.809 ops/s
Iteration   1: 773774.523 ops/s
Iteration   2: 774677.507 ops/s
Iteration   3: 779260.022 ops/s
Iteration   4: 779156.060 ops/s
Iteration   5: 777442.545 ops/s
Iteration   6: 776668.983 ops/s
Iteration   7: 776744.840 ops/s
Iteration   8: 776966.703 ops/s
Iteration   9: 779254.026 ops/s
Iteration  10: 777378.547 ops/s
Iteration  11: 779839.028 ops/s
Iteration  12: 776948.535 ops/s
Iteration  13: 780115.994 ops/s
Iteration  14: 781846.524 ops/s
Iteration  15: 779484.984 ops/s
Iteration  16: 778445.253 ops/s
Iteration  17: 774492.391 ops/s
Iteration  18: 778874.497 ops/s
Iteration  19: 777617.805 ops/s
Iteration  20: 784348.195 ops/s
Iteration  21: 774449.356 ops/s
Iteration  22: 774100.401 ops/s
Iteration  23: 782786.551 ops/s
Iteration  24: 784612.300 ops/s
Iteration  25: 780502.609 ops/s
Iteration  26: 779553.294 ops/s
Iteration  27: 780860.725 ops/s
Iteration  28: 782390.955 ops/s
Iteration  29: 783730.480 ops/s
Iteration  30: 778068.749 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedListBy_with_null":
  778813.079 ±(99.9%) 2007.323 ops/s [Average]
  (min, avg, max) = (773774.523, 778813.079, 784612.300), stdev = 3004.466
  CI (99.9%): [776805.757, 780820.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  778813.079 ± 2007.323  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2839715.701 ops/s
# Warmup Iteration   2: 5907968.308 ops/s
# Warmup Iteration   3: 5066202.301 ops/s
# Warmup Iteration   4: 6018138.326 ops/s
# Warmup Iteration   5: 6014047.530 ops/s
# Warmup Iteration   6: 6049579.087 ops/s
# Warmup Iteration   7: 6053666.256 ops/s
# Warmup Iteration   8: 6015591.200 ops/s
# Warmup Iteration   9: 6025094.696 ops/s
# Warmup Iteration  10: 6023037.559 ops/s
# Warmup Iteration  11: 6049376.330 ops/s
# Warmup Iteration  12: 6041196.831 ops/s
# Warmup Iteration  13: 6007093.363 ops/s
# Warmup Iteration  14: 6000875.709 ops/s
# Warmup Iteration  15: 6043851.475 ops/s
# Warmup Iteration  16: 5997877.771 ops/s
# Warmup Iteration  17: 6049815.908 ops/s
# Warmup Iteration  18: 6014677.284 ops/s
# Warmup Iteration  19: 6038415.856 ops/s
# Warmup Iteration  20: 6013201.162 ops/s
# Warmup Iteration  21: 5971899.431 ops/s
# Warmup Iteration  22: 6036899.989 ops/s
# Warmup Iteration  23: 6065823.377 ops/s
# Warmup Iteration  24: 6023985.184 ops/s
# Warmup Iteration  25: 6035255.832 ops/s
# Warmup Iteration  26: 6037816.671 ops/s
# Warmup Iteration  27: 6056315.686 ops/s
# Warmup Iteration  28: 6022789.332 ops/s
# Warmup Iteration  29: 6041791.729 ops/s
# Warmup Iteration  30: 6004539.310 ops/s
Iteration   1: 5988951.542 ops/s
Iteration   2: 6054585.062 ops/s
Iteration   3: 6030226.898 ops/s
Iteration   4: 6052099.239 ops/s
Iteration   5: 6007216.730 ops/s
Iteration   6: 6035428.677 ops/s
Iteration   7: 6053386.078 ops/s
Iteration   8: 6074718.949 ops/s
Iteration   9: 6069487.224 ops/s
Iteration  10: 6073447.674 ops/s
Iteration  11: 6026697.407 ops/s
Iteration  12: 6026049.983 ops/s
Iteration  13: 6045666.103 ops/s
Iteration  14: 6048277.808 ops/s
Iteration  15: 6050679.034 ops/s
Iteration  16: 6061591.228 ops/s
Iteration  17: 6054587.661 ops/s
Iteration  18: 6027257.403 ops/s
Iteration  19: 6025615.467 ops/s
Iteration  20: 6060371.292 ops/s
Iteration  21: 6052605.626 ops/s
Iteration  22: 6035171.496 ops/s
Iteration  23: 6044756.375 ops/s
Iteration  24: 5998819.700 ops/s
Iteration  25: 6002442.955 ops/s
Iteration  26: 6031922.157 ops/s
Iteration  27: 5997427.475 ops/s
Iteration  28: 5979742.467 ops/s
Iteration  29: 6004910.506 ops/s
Iteration  30: 5996456.165 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering":
  6033686.546 ±(99.9%) 17689.626 ops/s [Average]
  (min, avg, max) = (5979742.467, 6033686.546, 6074718.949), stdev = 26477.001
  CI (99.9%): [6015996.920, 6051376.172] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  6033686.546 ± 17689.626  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5362258.791 ops/s
# Warmup Iteration   2: 11802654.895 ops/s
# Warmup Iteration   3: 11035997.768 ops/s
# Warmup Iteration   4: 11706152.289 ops/s
# Warmup Iteration   5: 12299661.519 ops/s
# Warmup Iteration   6: 12336272.245 ops/s
# Warmup Iteration   7: 12366131.002 ops/s
# Warmup Iteration   8: 12324538.634 ops/s
# Warmup Iteration   9: 12329743.531 ops/s
# Warmup Iteration  10: 12346737.651 ops/s
# Warmup Iteration  11: 12330415.805 ops/s
# Warmup Iteration  12: 12410463.848 ops/s
# Warmup Iteration  13: 12352598.138 ops/s
# Warmup Iteration  14: 12341209.831 ops/s
# Warmup Iteration  15: 12301208.654 ops/s
# Warmup Iteration  16: 12317953.963 ops/s
# Warmup Iteration  17: 12342428.442 ops/s
# Warmup Iteration  18: 12379645.886 ops/s
# Warmup Iteration  19: 12359415.370 ops/s
# Warmup Iteration  20: 12365540.619 ops/s
# Warmup Iteration  21: 12344112.468 ops/s
# Warmup Iteration  22: 12323339.438 ops/s
# Warmup Iteration  23: 12391469.481 ops/s
# Warmup Iteration  24: 12320016.548 ops/s
# Warmup Iteration  25: 12304235.394 ops/s
# Warmup Iteration  26: 12331380.689 ops/s
# Warmup Iteration  27: 12320982.559 ops/s
# Warmup Iteration  28: 12285518.645 ops/s
# Warmup Iteration  29: 12339394.580 ops/s
# Warmup Iteration  30: 12317668.056 ops/s
Iteration   1: 12354752.140 ops/s
Iteration   2: 12352038.720 ops/s
Iteration   3: 12382002.976 ops/s
Iteration   4: 12355385.651 ops/s
Iteration   5: 12353225.935 ops/s
Iteration   6: 12335559.699 ops/s
Iteration   7: 12407507.854 ops/s
Iteration   8: 12375210.770 ops/s
Iteration   9: 12427525.313 ops/s
Iteration  10: 12407606.039 ops/s
Iteration  11: 12358782.669 ops/s
Iteration  12: 12270622.439 ops/s
Iteration  13: 12288248.025 ops/s
Iteration  14: 12375346.582 ops/s
Iteration  15: 12397618.664 ops/s
Iteration  16: 12371735.541 ops/s
Iteration  17: 12306614.583 ops/s
Iteration  18: 12383532.127 ops/s
Iteration  19: 12397299.977 ops/s
Iteration  20: 12347261.001 ops/s
Iteration  21: 12359419.968 ops/s
Iteration  22: 12358898.437 ops/s
Iteration  23: 12339301.554 ops/s
Iteration  24: 12413452.745 ops/s
Iteration  25: 12358318.548 ops/s
Iteration  26: 12402680.921 ops/s
Iteration  27: 12335524.763 ops/s
Iteration  28: 12295221.261 ops/s
Iteration  29: 12202970.836 ops/s
Iteration  30: 12333287.937 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_comparator":
  12354898.456 ±(99.9%) 31614.969 ops/s [Average]
  (min, avg, max) = (12202970.836, 12354898.456, 12427525.313), stdev = 47319.802
  CI (99.9%): [12323283.486, 12386513.425] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  12354898.456 ± 31614.969  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3396025.713 ops/s
# Warmup Iteration   2: 6070245.003 ops/s
# Warmup Iteration   3: 6850080.590 ops/s
# Warmup Iteration   4: 6842248.210 ops/s
# Warmup Iteration   5: 6813622.651 ops/s
# Warmup Iteration   6: 5764723.759 ops/s
# Warmup Iteration   7: 6873999.834 ops/s
# Warmup Iteration   8: 6881222.460 ops/s
# Warmup Iteration   9: 6859754.062 ops/s
# Warmup Iteration  10: 6866429.963 ops/s
# Warmup Iteration  11: 6885362.207 ops/s
# Warmup Iteration  12: 6867022.881 ops/s
# Warmup Iteration  13: 6847771.150 ops/s
# Warmup Iteration  14: 6869615.409 ops/s
# Warmup Iteration  15: 6867488.622 ops/s
# Warmup Iteration  16: 6891477.721 ops/s
# Warmup Iteration  17: 6807689.442 ops/s
# Warmup Iteration  18: 6807103.341 ops/s
# Warmup Iteration  19: 6814773.507 ops/s
# Warmup Iteration  20: 6784421.005 ops/s
# Warmup Iteration  21: 6825168.889 ops/s
# Warmup Iteration  22: 6792521.523 ops/s
# Warmup Iteration  23: 6827964.969 ops/s
# Warmup Iteration  24: 6824672.591 ops/s
# Warmup Iteration  25: 6783608.179 ops/s
# Warmup Iteration  26: 6816788.197 ops/s
# Warmup Iteration  27: 6797889.773 ops/s
# Warmup Iteration  28: 6798995.008 ops/s
# Warmup Iteration  29: 6800377.962 ops/s
# Warmup Iteration  30: 6807444.424 ops/s
Iteration   1: 6838843.046 ops/s
Iteration   2: 6783513.127 ops/s
Iteration   3: 6821345.926 ops/s
Iteration   4: 6811618.184 ops/s
Iteration   5: 6790136.307 ops/s
Iteration   6: 6833520.201 ops/s
Iteration   7: 6804093.973 ops/s
Iteration   8: 6784742.073 ops/s
Iteration   9: 6804720.244 ops/s
Iteration  10: 6805796.069 ops/s
Iteration  11: 6831235.695 ops/s
Iteration  12: 6796143.713 ops/s
Iteration  13: 6810884.548 ops/s
Iteration  14: 6835901.847 ops/s
Iteration  15: 6849482.206 ops/s
Iteration  16: 6822477.987 ops/s
Iteration  17: 6841442.952 ops/s
Iteration  18: 6834756.344 ops/s
Iteration  19: 6841521.762 ops/s
Iteration  20: 6825179.371 ops/s
Iteration  21: 6833948.657 ops/s
Iteration  22: 6800742.517 ops/s
Iteration  23: 6826511.266 ops/s
Iteration  24: 6824273.975 ops/s
Iteration  25: 6792734.475 ops/s
Iteration  26: 6796622.507 ops/s
Iteration  27: 6820545.920 ops/s
Iteration  28: 6839147.160 ops/s
Iteration  29: 6808456.700 ops/s
Iteration  30: 6797576.380 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_null":
  6816930.504 ±(99.9%) 12697.749 ops/s [Average]
  (min, avg, max) = (6783513.127, 6816930.504, 6849482.206), stdev = 19005.395
  CI (99.9%): [6804232.755, 6829628.254] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  6816930.504 ± 12697.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 593337.478 ops/s
# Warmup Iteration   2: 1304731.516 ops/s
# Warmup Iteration   3: 1371406.007 ops/s
# Warmup Iteration   4: 1375201.827 ops/s
# Warmup Iteration   5: 1144002.792 ops/s
# Warmup Iteration   6: 1374312.702 ops/s
# Warmup Iteration   7: 1375412.630 ops/s
# Warmup Iteration   8: 1367629.534 ops/s
# Warmup Iteration   9: 1376847.241 ops/s
# Warmup Iteration  10: 1378289.238 ops/s
# Warmup Iteration  11: 1375988.805 ops/s
# Warmup Iteration  12: 1377244.209 ops/s
# Warmup Iteration  13: 1370649.969 ops/s
# Warmup Iteration  14: 1377400.875 ops/s
# Warmup Iteration  15: 1381550.591 ops/s
# Warmup Iteration  16: 1374405.630 ops/s
# Warmup Iteration  17: 1374847.711 ops/s
# Warmup Iteration  18: 1378107.450 ops/s
# Warmup Iteration  19: 1380716.165 ops/s
# Warmup Iteration  20: 1382635.278 ops/s
# Warmup Iteration  21: 1373585.323 ops/s
# Warmup Iteration  22: 1370661.137 ops/s
# Warmup Iteration  23: 1380191.334 ops/s
# Warmup Iteration  24: 1371993.910 ops/s
# Warmup Iteration  25: 1373118.403 ops/s
# Warmup Iteration  26: 1381334.099 ops/s
# Warmup Iteration  27: 1379141.303 ops/s
# Warmup Iteration  28: 1370946.929 ops/s
# Warmup Iteration  29: 1371932.870 ops/s
# Warmup Iteration  30: 1372420.969 ops/s
Iteration   1: 1360062.239 ops/s
Iteration   2: 1372030.985 ops/s
Iteration   3: 1368952.436 ops/s
Iteration   4: 1372661.798 ops/s
Iteration   5: 1367750.153 ops/s
Iteration   6: 1369935.976 ops/s
Iteration   7: 1369522.649 ops/s
Iteration   8: 1369405.852 ops/s
Iteration   9: 1369323.939 ops/s
Iteration  10: 1375000.389 ops/s
Iteration  11: 1371426.948 ops/s
Iteration  12: 1380824.850 ops/s
Iteration  13: 1372165.681 ops/s
Iteration  14: 1374562.190 ops/s
Iteration  15: 1379156.103 ops/s
Iteration  16: 1371007.916 ops/s
Iteration  17: 1377168.974 ops/s
Iteration  18: 1376995.964 ops/s
Iteration  19: 1377956.937 ops/s
Iteration  20: 1378451.413 ops/s
Iteration  21: 1375166.289 ops/s
Iteration  22: 1374523.301 ops/s
Iteration  23: 1375709.021 ops/s
Iteration  24: 1370373.407 ops/s
Iteration  25: 1376948.809 ops/s
Iteration  26: 1360033.905 ops/s
Iteration  27: 1368046.950 ops/s
Iteration  28: 1360747.905 ops/s
Iteration  29: 1371058.523 ops/s
Iteration  30: 1368454.394 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap":
  1371847.530 ±(99.9%) 3563.152 ops/s [Average]
  (min, avg, max) = (1360033.905, 1371847.530, 1380824.850), stdev = 5333.158
  CI (99.9%): [1368284.378, 1375410.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedMap  thrpt   30  1371847.530 ± 3563.152  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565024.962 ops/s
# Warmup Iteration   2: 1151378.466 ops/s
# Warmup Iteration   3: 1236842.368 ops/s
# Warmup Iteration   4: 1243305.430 ops/s
# Warmup Iteration   5: 1040082.049 ops/s
# Warmup Iteration   6: 1246230.121 ops/s
# Warmup Iteration   7: 1241943.818 ops/s
# Warmup Iteration   8: 1246980.390 ops/s
# Warmup Iteration   9: 1244242.082 ops/s
# Warmup Iteration  10: 1249496.978 ops/s
# Warmup Iteration  11: 1248214.015 ops/s
# Warmup Iteration  12: 1239204.553 ops/s
# Warmup Iteration  13: 1254812.079 ops/s
# Warmup Iteration  14: 1243454.336 ops/s
# Warmup Iteration  15: 1236778.116 ops/s
# Warmup Iteration  16: 1238751.687 ops/s
# Warmup Iteration  17: 1246050.011 ops/s
# Warmup Iteration  18: 1236026.120 ops/s
# Warmup Iteration  19: 1243385.290 ops/s
# Warmup Iteration  20: 1245649.234 ops/s
# Warmup Iteration  21: 1243393.965 ops/s
# Warmup Iteration  22: 1241596.854 ops/s
# Warmup Iteration  23: 1242073.530 ops/s
# Warmup Iteration  24: 1241205.238 ops/s
# Warmup Iteration  25: 1244852.859 ops/s
# Warmup Iteration  26: 1248486.285 ops/s
# Warmup Iteration  27: 1240021.036 ops/s
# Warmup Iteration  28: 1239608.814 ops/s
# Warmup Iteration  29: 1242925.153 ops/s
# Warmup Iteration  30: 1248557.911 ops/s
Iteration   1: 1250205.127 ops/s
Iteration   2: 1247797.651 ops/s
Iteration   3: 1238814.784 ops/s
Iteration   4: 1240845.084 ops/s
Iteration   5: 1231323.525 ops/s
Iteration   6: 1246711.466 ops/s
Iteration   7: 1250650.907 ops/s
Iteration   8: 1252336.332 ops/s
Iteration   9: 1241547.775 ops/s
Iteration  10: 1228271.630 ops/s
Iteration  11: 1235088.343 ops/s
Iteration  12: 1236869.384 ops/s
Iteration  13: 1247918.583 ops/s
Iteration  14: 1242975.577 ops/s
Iteration  15: 1238641.723 ops/s
Iteration  16: 1232852.635 ops/s
Iteration  17: 1249463.649 ops/s
Iteration  18: 1241990.200 ops/s
Iteration  19: 1248450.892 ops/s
Iteration  20: 1240999.780 ops/s
Iteration  21: 1250249.733 ops/s
Iteration  22: 1247491.565 ops/s
Iteration  23: 1245013.372 ops/s
Iteration  24: 1241961.136 ops/s
Iteration  25: 1243425.795 ops/s
Iteration  26: 1245646.513 ops/s
Iteration  27: 1250122.843 ops/s
Iteration  28: 1247211.494 ops/s
Iteration  29: 1246882.784 ops/s
Iteration  30: 1239417.250 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMapBy":
  1243372.584 ±(99.9%) 4137.281 ops/s [Average]
  (min, avg, max) = (1228271.630, 1243372.584, 1252336.332), stdev = 6192.488
  CI (99.9%): [1239235.303, 1247509.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  1243372.584 ± 4137.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 582530.617 ops/s
# Warmup Iteration   2: 1236116.355 ops/s
# Warmup Iteration   3: 1316084.703 ops/s
# Warmup Iteration   4: 1321172.286 ops/s
# Warmup Iteration   5: 1098032.799 ops/s
# Warmup Iteration   6: 1321812.845 ops/s
# Warmup Iteration   7: 1321913.403 ops/s
# Warmup Iteration   8: 1326457.438 ops/s
# Warmup Iteration   9: 1315144.521 ops/s
# Warmup Iteration  10: 1318481.301 ops/s
# Warmup Iteration  11: 1318034.012 ops/s
# Warmup Iteration  12: 1311243.849 ops/s
# Warmup Iteration  13: 1314002.613 ops/s
# Warmup Iteration  14: 1321904.878 ops/s
# Warmup Iteration  15: 1319975.831 ops/s
# Warmup Iteration  16: 1323954.635 ops/s
# Warmup Iteration  17: 1320015.629 ops/s
# Warmup Iteration  18: 1316498.604 ops/s
# Warmup Iteration  19: 1326675.554 ops/s
# Warmup Iteration  20: 1322694.019 ops/s
# Warmup Iteration  21: 1327087.282 ops/s
# Warmup Iteration  22: 1324196.975 ops/s
# Warmup Iteration  23: 1327686.863 ops/s
# Warmup Iteration  24: 1330541.767 ops/s
# Warmup Iteration  25: 1325077.494 ops/s
# Warmup Iteration  26: 1323664.523 ops/s
# Warmup Iteration  27: 1321226.398 ops/s
# Warmup Iteration  28: 1316527.228 ops/s
# Warmup Iteration  29: 1329788.842 ops/s
# Warmup Iteration  30: 1327584.570 ops/s
Iteration   1: 1334176.566 ops/s
Iteration   2: 1321402.388 ops/s
Iteration   3: 1319813.121 ops/s
Iteration   4: 1325378.065 ops/s
Iteration   5: 1316490.349 ops/s
Iteration   6: 1328347.235 ops/s
Iteration   7: 1323244.241 ops/s
Iteration   8: 1329715.047 ops/s
Iteration   9: 1322830.312 ops/s
Iteration  10: 1326384.474 ops/s
Iteration  11: 1331257.360 ops/s
Iteration  12: 1320548.100 ops/s
Iteration  13: 1323235.738 ops/s
Iteration  14: 1327826.329 ops/s
Iteration  15: 1325845.680 ops/s
Iteration  16: 1323803.162 ops/s
Iteration  17: 1329806.885 ops/s
Iteration  18: 1321596.018 ops/s
Iteration  19: 1312156.669 ops/s
Iteration  20: 1326211.654 ops/s
Iteration  21: 1322092.013 ops/s
Iteration  22: 1328499.117 ops/s
Iteration  23: 1329933.624 ops/s
Iteration  24: 1318926.140 ops/s
Iteration  25: 1325690.173 ops/s
Iteration  26: 1321538.274 ops/s
Iteration  27: 1325560.724 ops/s
Iteration  28: 1323697.069 ops/s
Iteration  29: 1320441.531 ops/s
Iteration  30: 1319244.705 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1324189.759 ±(99.9%) 3147.703 ops/s [Average]
  (min, avg, max) = (1312156.669, 1324189.759, 1334176.566), stdev = 4711.334
  CI (99.9%): [1321042.056, 1327337.462] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1324189.759 ± 3147.703  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 853188.982 ops/s
# Warmup Iteration   2: 2052267.123 ops/s
# Warmup Iteration   3: 2071185.018 ops/s
# Warmup Iteration   4: 1744588.344 ops/s
# Warmup Iteration   5: 2074300.373 ops/s
# Warmup Iteration   6: 2089308.467 ops/s
# Warmup Iteration   7: 2077092.918 ops/s
# Warmup Iteration   8: 2080825.586 ops/s
# Warmup Iteration   9: 2072600.092 ops/s
# Warmup Iteration  10: 2077539.048 ops/s
# Warmup Iteration  11: 2065827.590 ops/s
# Warmup Iteration  12: 2075955.191 ops/s
# Warmup Iteration  13: 2076019.369 ops/s
# Warmup Iteration  14: 2070290.875 ops/s
# Warmup Iteration  15: 2080707.147 ops/s
# Warmup Iteration  16: 2085565.495 ops/s
# Warmup Iteration  17: 2072330.207 ops/s
# Warmup Iteration  18: 2074282.638 ops/s
# Warmup Iteration  19: 2063216.715 ops/s
# Warmup Iteration  20: 2062691.138 ops/s
# Warmup Iteration  21: 2079938.738 ops/s
# Warmup Iteration  22: 2072739.687 ops/s
# Warmup Iteration  23: 2072472.724 ops/s
# Warmup Iteration  24: 2070376.326 ops/s
# Warmup Iteration  25: 2066746.918 ops/s
# Warmup Iteration  26: 2071949.228 ops/s
# Warmup Iteration  27: 2062515.678 ops/s
# Warmup Iteration  28: 2075206.594 ops/s
# Warmup Iteration  29: 2072568.876 ops/s
# Warmup Iteration  30: 2069951.654 ops/s
Iteration   1: 2075521.320 ops/s
Iteration   2: 2068257.208 ops/s
Iteration   3: 2067036.030 ops/s
Iteration   4: 2084781.047 ops/s
Iteration   5: 2077903.902 ops/s
Iteration   6: 2063322.301 ops/s
Iteration   7: 2069407.414 ops/s
Iteration   8: 2076499.103 ops/s
Iteration   9: 2084627.130 ops/s
Iteration  10: 2085233.666 ops/s
Iteration  11: 2075791.439 ops/s
Iteration  12: 2078845.642 ops/s
Iteration  13: 2076972.452 ops/s
Iteration  14: 2078983.808 ops/s
Iteration  15: 2080328.587 ops/s
Iteration  16: 2076016.641 ops/s
Iteration  17: 2071248.935 ops/s
Iteration  18: 2085034.445 ops/s
Iteration  19: 2084752.866 ops/s
Iteration  20: 2078144.508 ops/s
Iteration  21: 2084651.691 ops/s
Iteration  22: 2083998.845 ops/s
Iteration  23: 2080276.305 ops/s
Iteration  24: 2088915.931 ops/s
Iteration  25: 2072307.895 ops/s
Iteration  26: 2089061.457 ops/s
Iteration  27: 2071518.418 ops/s
Iteration  28: 2081630.451 ops/s
Iteration  29: 2083800.690 ops/s
Iteration  30: 2082191.870 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSetBy":
  2078568.733 ±(99.9%) 4419.098 ops/s [Average]
  (min, avg, max) = (2063322.301, 2078568.733, 2089061.457), stdev = 6614.299
  CI (99.9%): [2074149.635, 2082987.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  2078568.733 ± 4419.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 926894.106 ops/s
# Warmup Iteration   2: 2274194.797 ops/s
# Warmup Iteration   3: 2315841.688 ops/s
# Warmup Iteration   4: 1922452.479 ops/s
# Warmup Iteration   5: 2312493.381 ops/s
# Warmup Iteration   6: 2315717.299 ops/s
# Warmup Iteration   7: 2313088.275 ops/s
# Warmup Iteration   8: 2309417.529 ops/s
# Warmup Iteration   9: 2305292.464 ops/s
# Warmup Iteration  10: 2316709.739 ops/s
# Warmup Iteration  11: 2299123.853 ops/s
# Warmup Iteration  12: 2295536.502 ops/s
# Warmup Iteration  13: 2304128.219 ops/s
# Warmup Iteration  14: 2299930.091 ops/s
# Warmup Iteration  15: 2312459.628 ops/s
# Warmup Iteration  16: 2297894.277 ops/s
# Warmup Iteration  17: 2304225.555 ops/s
# Warmup Iteration  18: 2308327.864 ops/s
# Warmup Iteration  19: 2312988.803 ops/s
# Warmup Iteration  20: 2304558.427 ops/s
# Warmup Iteration  21: 2318901.488 ops/s
# Warmup Iteration  22: 2307349.731 ops/s
# Warmup Iteration  23: 2307310.591 ops/s
# Warmup Iteration  24: 2307356.241 ops/s
# Warmup Iteration  25: 2299091.489 ops/s
# Warmup Iteration  26: 2306468.856 ops/s
# Warmup Iteration  27: 2308087.223 ops/s
# Warmup Iteration  28: 2305561.866 ops/s
# Warmup Iteration  29: 2303604.227 ops/s
# Warmup Iteration  30: 2311487.828 ops/s
Iteration   1: 2300834.631 ops/s
Iteration   2: 2311954.423 ops/s
Iteration   3: 2315380.971 ops/s
Iteration   4: 2305000.413 ops/s
Iteration   5: 2307112.206 ops/s
Iteration   6: 2311476.864 ops/s
Iteration   7: 2313579.662 ops/s
Iteration   8: 2310969.818 ops/s
Iteration   9: 2315644.294 ops/s
Iteration  10: 2316170.737 ops/s
Iteration  11: 2309123.043 ops/s
Iteration  12: 2304787.642 ops/s
Iteration  13: 2314611.608 ops/s
Iteration  14: 2313942.111 ops/s
Iteration  15: 2322159.793 ops/s
Iteration  16: 2315728.826 ops/s
Iteration  17: 2309230.059 ops/s
Iteration  18: 2301956.006 ops/s
Iteration  19: 2310808.178 ops/s
Iteration  20: 2327297.459 ops/s
Iteration  21: 2319271.495 ops/s
Iteration  22: 2303613.247 ops/s
Iteration  23: 2300788.677 ops/s
Iteration  24: 2310416.979 ops/s
Iteration  25: 2317976.617 ops/s
Iteration  26: 2311988.646 ops/s
Iteration  27: 2306811.917 ops/s
Iteration  28: 2284146.538 ops/s
Iteration  29: 2316799.622 ops/s
Iteration  30: 2321633.466 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  2311040.532 ±(99.9%) 5483.603 ops/s [Average]
  (min, avg, max) = (2284146.538, 2311040.532, 2327297.459), stdev = 8207.599
  CI (99.9%): [2305556.929, 2316524.134] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  2311040.532 ± 5483.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 913725.533 ops/s
# Warmup Iteration   2: 2313251.053 ops/s
# Warmup Iteration   3: 2311990.313 ops/s
# Warmup Iteration   4: 1920372.830 ops/s
# Warmup Iteration   5: 2322844.598 ops/s
# Warmup Iteration   6: 2320214.976 ops/s
# Warmup Iteration   7: 2322019.920 ops/s
# Warmup Iteration   8: 2311759.478 ops/s
# Warmup Iteration   9: 2308574.379 ops/s
# Warmup Iteration  10: 2313110.091 ops/s
# Warmup Iteration  11: 2320684.201 ops/s
# Warmup Iteration  12: 2324734.960 ops/s
# Warmup Iteration  13: 2325336.392 ops/s
# Warmup Iteration  14: 2324164.239 ops/s
# Warmup Iteration  15: 2321130.121 ops/s
# Warmup Iteration  16: 2317585.063 ops/s
# Warmup Iteration  17: 2315668.228 ops/s
# Warmup Iteration  18: 2321644.093 ops/s
# Warmup Iteration  19: 2311107.182 ops/s
# Warmup Iteration  20: 2322372.345 ops/s
# Warmup Iteration  21: 2320937.568 ops/s
# Warmup Iteration  22: 2325304.819 ops/s
# Warmup Iteration  23: 2321297.510 ops/s
# Warmup Iteration  24: 2315244.957 ops/s
# Warmup Iteration  25: 2314243.887 ops/s
# Warmup Iteration  26: 2300168.037 ops/s
# Warmup Iteration  27: 2312413.671 ops/s
# Warmup Iteration  28: 2318225.764 ops/s
# Warmup Iteration  29: 2313611.667 ops/s
# Warmup Iteration  30: 2325001.500 ops/s
Iteration   1: 2310716.441 ops/s
Iteration   2: 2322103.059 ops/s
Iteration   3: 2326368.247 ops/s
Iteration   4: 2322130.930 ops/s
Iteration   5: 2304726.633 ops/s
Iteration   6: 2317719.247 ops/s
Iteration   7: 2331966.483 ops/s
Iteration   8: 2307932.345 ops/s
Iteration   9: 2317599.331 ops/s
Iteration  10: 2304920.046 ops/s
Iteration  11: 2314311.527 ops/s
Iteration  12: 2315893.862 ops/s
Iteration  13: 2316070.451 ops/s
Iteration  14: 2321147.115 ops/s
Iteration  15: 2315490.759 ops/s
Iteration  16: 2331827.872 ops/s
Iteration  17: 2318995.612 ops/s
Iteration  18: 2307457.480 ops/s
Iteration  19: 2298833.453 ops/s
Iteration  20: 2324719.104 ops/s
Iteration  21: 2317340.330 ops/s
Iteration  22: 2312247.113 ops/s
Iteration  23: 2321362.610 ops/s
Iteration  24: 2310995.231 ops/s
Iteration  25: 2322119.293 ops/s
Iteration  26: 2322371.581 ops/s
Iteration  27: 2323329.849 ops/s
Iteration  28: 2320821.709 ops/s
Iteration  29: 2315341.424 ops/s
Iteration  30: 2312308.889 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator":
  2316972.268 ±(99.9%) 5158.559 ops/s [Average]
  (min, avg, max) = (2298833.453, 2316972.268, 2331966.483), stdev = 7721.089
  CI (99.9%): [2311813.709, 2322130.826] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  2316972.268 ± 5158.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5983599.003 ops/s
# Warmup Iteration   2: 13202363.973 ops/s
# Warmup Iteration   3: 11170676.693 ops/s
# Warmup Iteration   4: 13509889.744 ops/s
# Warmup Iteration   5: 13438981.518 ops/s
# Warmup Iteration   6: 13448427.298 ops/s
# Warmup Iteration   7: 13427898.127 ops/s
# Warmup Iteration   8: 13401900.167 ops/s
# Warmup Iteration   9: 13471772.328 ops/s
# Warmup Iteration  10: 13296063.623 ops/s
# Warmup Iteration  11: 13395467.930 ops/s
# Warmup Iteration  12: 13417152.189 ops/s
# Warmup Iteration  13: 13477019.349 ops/s
# Warmup Iteration  14: 13496597.090 ops/s
# Warmup Iteration  15: 13463047.086 ops/s
# Warmup Iteration  16: 13434708.572 ops/s
# Warmup Iteration  17: 13464051.221 ops/s
# Warmup Iteration  18: 13402725.414 ops/s
# Warmup Iteration  19: 13400020.918 ops/s
# Warmup Iteration  20: 13414552.125 ops/s
# Warmup Iteration  21: 13427861.379 ops/s
# Warmup Iteration  22: 13484207.500 ops/s
# Warmup Iteration  23: 13460295.494 ops/s
# Warmup Iteration  24: 13420817.711 ops/s
# Warmup Iteration  25: 13384795.187 ops/s
# Warmup Iteration  26: 13412457.894 ops/s
# Warmup Iteration  27: 13435418.638 ops/s
# Warmup Iteration  28: 13459215.183 ops/s
# Warmup Iteration  29: 13406025.853 ops/s
# Warmup Iteration  30: 13427833.613 ops/s
Iteration   1: 13427097.499 ops/s
Iteration   2: 13452189.543 ops/s
Iteration   3: 13453115.741 ops/s
Iteration   4: 13468830.089 ops/s
Iteration   5: 13398692.920 ops/s
Iteration   6: 13491036.956 ops/s
Iteration   7: 13393326.574 ops/s
Iteration   8: 13432769.778 ops/s
Iteration   9: 13428950.984 ops/s
Iteration  10: 13358988.332 ops/s
Iteration  11: 13394854.432 ops/s
Iteration  12: 13380251.291 ops/s
Iteration  13: 13370919.547 ops/s
Iteration  14: 13464178.054 ops/s
Iteration  15: 13438469.854 ops/s
Iteration  16: 13511379.218 ops/s
Iteration  17: 13473530.029 ops/s
Iteration  18: 13461897.565 ops/s
Iteration  19: 13365397.474 ops/s
Iteration  20: 13389108.131 ops/s
Iteration  21: 13434301.169 ops/s
Iteration  22: 13455116.419 ops/s
Iteration  23: 13437705.015 ops/s
Iteration  24: 13510288.037 ops/s
Iteration  25: 13436064.873 ops/s
Iteration  26: 13433070.880 ops/s
Iteration  27: 13393723.432 ops/s
Iteration  28: 13464525.953 ops/s
Iteration  29: 13406334.894 ops/s
Iteration  30: 13390206.301 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_with":
  13430544.033 ±(99.9%) 27549.734 ops/s [Average]
  (min, avg, max) = (13358988.332, 13430544.033, 13511379.218), stdev = 41235.148
  CI (99.9%): [13402994.299, 13458093.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_with  thrpt   30  13430544.033 ± 27549.734  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3730000.475 ops/s
# Warmup Iteration   2: 8822819.927 ops/s
# Warmup Iteration   3: 7803316.435 ops/s
# Warmup Iteration   4: 8343335.522 ops/s
# Warmup Iteration   5: 8858635.149 ops/s
# Warmup Iteration   6: 8908909.668 ops/s
# Warmup Iteration   7: 8854831.826 ops/s
# Warmup Iteration   8: 8806493.329 ops/s
# Warmup Iteration   9: 8875509.164 ops/s
# Warmup Iteration  10: 8868906.447 ops/s
# Warmup Iteration  11: 8855722.196 ops/s
# Warmup Iteration  12: 8872911.004 ops/s
# Warmup Iteration  13: 8794906.751 ops/s
# Warmup Iteration  14: 8909602.253 ops/s
# Warmup Iteration  15: 8885800.637 ops/s
# Warmup Iteration  16: 8883886.599 ops/s
# Warmup Iteration  17: 8838083.866 ops/s
# Warmup Iteration  18: 8811758.866 ops/s
# Warmup Iteration  19: 8849307.925 ops/s
# Warmup Iteration  20: 8855609.589 ops/s
# Warmup Iteration  21: 8893535.807 ops/s
# Warmup Iteration  22: 8874238.474 ops/s
# Warmup Iteration  23: 8878643.470 ops/s
# Warmup Iteration  24: 8826903.900 ops/s
# Warmup Iteration  25: 8800296.177 ops/s
# Warmup Iteration  26: 8862176.077 ops/s
# Warmup Iteration  27: 8863894.798 ops/s
# Warmup Iteration  28: 8878021.045 ops/s
# Warmup Iteration  29: 8889639.684 ops/s
# Warmup Iteration  30: 8923445.857 ops/s
Iteration   1: 8902953.671 ops/s
Iteration   2: 8888164.815 ops/s
Iteration   3: 8850149.134 ops/s
Iteration   4: 8918810.553 ops/s
Iteration   5: 8927746.905 ops/s
Iteration   6: 8810297.858 ops/s
Iteration   7: 8843780.261 ops/s
Iteration   8: 8840840.524 ops/s
Iteration   9: 8878880.790 ops/s
Iteration  10: 8811273.533 ops/s
Iteration  11: 8913735.367 ops/s
Iteration  12: 8917909.097 ops/s
Iteration  13: 8875125.929 ops/s
Iteration  14: 8809854.146 ops/s
Iteration  15: 8852330.218 ops/s
Iteration  16: 8833314.954 ops/s
Iteration  17: 8850139.023 ops/s
Iteration  18: 8865495.577 ops/s
Iteration  19: 8909152.467 ops/s
Iteration  20: 8827723.844 ops/s
Iteration  21: 8874622.729 ops/s
Iteration  22: 8870886.167 ops/s
Iteration  23: 8926099.838 ops/s
Iteration  24: 8915449.481 ops/s
Iteration  25: 8899272.704 ops/s
Iteration  26: 8852996.220 ops/s
Iteration  27: 8846367.987 ops/s
Iteration  28: 8878313.254 ops/s
Iteration  29: 8877992.496 ops/s
Iteration  30: 8843656.562 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withAll":
  8870444.537 ±(99.9%) 23916.731 ops/s [Average]
  (min, avg, max) = (8809854.146, 8870444.537, 8927746.905), stdev = 35797.440
  CI (99.9%): [8846527.805, 8894361.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_withAll  thrpt   30  8870444.537 ± 23916.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6976441.074 ops/s
# Warmup Iteration   2: 14467335.167 ops/s
# Warmup Iteration   3: 12297242.687 ops/s
# Warmup Iteration   4: 14445828.268 ops/s
# Warmup Iteration   5: 14526404.631 ops/s
# Warmup Iteration   6: 14493890.783 ops/s
# Warmup Iteration   7: 14489729.564 ops/s
# Warmup Iteration   8: 14520640.893 ops/s
# Warmup Iteration   9: 14350489.890 ops/s
# Warmup Iteration  10: 14416576.646 ops/s
# Warmup Iteration  11: 14447016.796 ops/s
# Warmup Iteration  12: 14577586.742 ops/s
# Warmup Iteration  13: 14528081.917 ops/s
# Warmup Iteration  14: 14474683.258 ops/s
# Warmup Iteration  15: 14519906.108 ops/s
# Warmup Iteration  16: 14468642.460 ops/s
# Warmup Iteration  17: 14576503.586 ops/s
# Warmup Iteration  18: 14506336.201 ops/s
# Warmup Iteration  19: 14524966.171 ops/s
# Warmup Iteration  20: 14514684.529 ops/s
# Warmup Iteration  21: 14530570.702 ops/s
# Warmup Iteration  22: 14504274.033 ops/s
# Warmup Iteration  23: 14433076.089 ops/s
# Warmup Iteration  24: 14543303.871 ops/s
# Warmup Iteration  25: 14478613.236 ops/s
# Warmup Iteration  26: 14491466.632 ops/s
# Warmup Iteration  27: 14517166.359 ops/s
# Warmup Iteration  28: 14491644.559 ops/s
# Warmup Iteration  29: 14531046.999 ops/s
# Warmup Iteration  30: 14491690.920 ops/s
Iteration   1: 14532269.176 ops/s
Iteration   2: 14450103.953 ops/s
Iteration   3: 14545017.950 ops/s
Iteration   4: 14499393.664 ops/s
Iteration   5: 14532129.622 ops/s
Iteration   6: 14524843.681 ops/s
Iteration   7: 14466076.137 ops/s
Iteration   8: 14494427.142 ops/s
Iteration   9: 14438125.161 ops/s
Iteration  10: 14514703.466 ops/s
Iteration  11: 14558220.380 ops/s
Iteration  12: 14585723.884 ops/s
Iteration  13: 14545176.315 ops/s
Iteration  14: 14542003.311 ops/s
Iteration  15: 14478385.842 ops/s
Iteration  16: 14475668.944 ops/s
Iteration  17: 14338141.510 ops/s
Iteration  18: 14314160.030 ops/s
Iteration  19: 14469445.554 ops/s
Iteration  20: 14445647.503 ops/s
Iteration  21: 14446063.333 ops/s
Iteration  22: 14484420.239 ops/s
Iteration  23: 14582298.669 ops/s
Iteration  24: 14499149.369 ops/s
Iteration  25: 14466376.335 ops/s
Iteration  26: 14479974.456 ops/s
Iteration  27: 14504646.122 ops/s
Iteration  28: 14601760.620 ops/s
Iteration  29: 14421030.053 ops/s
Iteration  30: 14589051.549 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_without":
  14494147.799 ±(99.9%) 44323.157 ops/s [Average]
  (min, avg, max) = (14314160.030, 14494147.799, 14601760.620), stdev = 66340.820
  CI (99.9%): [14449824.642, 14538470.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_without  thrpt   30  14494147.799 ± 44323.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6403892.113 ops/s
# Warmup Iteration   2: 13526055.197 ops/s
# Warmup Iteration   3: 11462478.724 ops/s
# Warmup Iteration   4: 13701148.172 ops/s
# Warmup Iteration   5: 13609971.436 ops/s
# Warmup Iteration   6: 13668422.356 ops/s
# Warmup Iteration   7: 13595088.788 ops/s
# Warmup Iteration   8: 13637894.071 ops/s
# Warmup Iteration   9: 13593126.986 ops/s
# Warmup Iteration  10: 13669713.756 ops/s
# Warmup Iteration  11: 13601959.604 ops/s
# Warmup Iteration  12: 13690407.843 ops/s
# Warmup Iteration  13: 13673932.704 ops/s
# Warmup Iteration  14: 13710981.298 ops/s
# Warmup Iteration  15: 13632453.617 ops/s
# Warmup Iteration  16: 13558329.999 ops/s
# Warmup Iteration  17: 13731247.646 ops/s
# Warmup Iteration  18: 13625397.853 ops/s
# Warmup Iteration  19: 13626084.075 ops/s
# Warmup Iteration  20: 13632207.684 ops/s
# Warmup Iteration  21: 13591854.281 ops/s
# Warmup Iteration  22: 13629327.655 ops/s
# Warmup Iteration  23: 13526644.392 ops/s
# Warmup Iteration  24: 13578098.292 ops/s
# Warmup Iteration  25: 13669694.916 ops/s
# Warmup Iteration  26: 13683609.640 ops/s
# Warmup Iteration  27: 13710785.871 ops/s
# Warmup Iteration  28: 13640871.352 ops/s
# Warmup Iteration  29: 13635261.971 ops/s
# Warmup Iteration  30: 13638577.532 ops/s
Iteration   1: 13656347.465 ops/s
Iteration   2: 13718750.344 ops/s
Iteration   3: 13712929.294 ops/s
Iteration   4: 13711981.613 ops/s
Iteration   5: 13706452.312 ops/s
Iteration   6: 13664799.651 ops/s
Iteration   7: 13621076.118 ops/s
Iteration   8: 13673955.456 ops/s
Iteration   9: 13684644.332 ops/s
Iteration  10: 13687448.387 ops/s
Iteration  11: 13637894.393 ops/s
Iteration  12: 13650938.451 ops/s
Iteration  13: 13645566.885 ops/s
Iteration  14: 13652517.110 ops/s
Iteration  15: 13564531.793 ops/s
Iteration  16: 13670669.317 ops/s
Iteration  17: 13583637.428 ops/s
Iteration  18: 13596834.277 ops/s
Iteration  19: 13590379.164 ops/s
Iteration  20: 13720217.522 ops/s
Iteration  21: 13667787.491 ops/s
Iteration  22: 13735675.351 ops/s
Iteration  23: 13654259.859 ops/s
Iteration  24: 13637457.470 ops/s
Iteration  25: 13617641.068 ops/s
Iteration  26: 13639113.299 ops/s
Iteration  27: 13657493.603 ops/s
Iteration  28: 13634660.855 ops/s
Iteration  29: 13529489.292 ops/s
Iteration  30: 13641587.524 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_withoutAll":
  13652224.571 ±(99.9%) 32195.685 ops/s [Average]
  (min, avg, max) = (13529489.292, 13652224.571, 13735675.351), stdev = 48188.989
  CI (99.9%): [13620028.886, 13684420.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_withoutAll  thrpt   30  13652224.571 ± 32195.685  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4510133.128 ops/s
# Warmup Iteration   2: 7279220.614 ops/s
# Warmup Iteration   3: 7964739.701 ops/s
# Warmup Iteration   4: 8033321.088 ops/s
# Warmup Iteration   5: 8030442.060 ops/s
# Warmup Iteration   6: 6721084.594 ops/s
# Warmup Iteration   7: 8058942.697 ops/s
# Warmup Iteration   8: 8010073.318 ops/s
# Warmup Iteration   9: 8032905.130 ops/s
# Warmup Iteration  10: 8028126.097 ops/s
# Warmup Iteration  11: 8011344.833 ops/s
# Warmup Iteration  12: 8014901.263 ops/s
# Warmup Iteration  13: 8036439.720 ops/s
# Warmup Iteration  14: 8008683.188 ops/s
# Warmup Iteration  15: 8036096.112 ops/s
# Warmup Iteration  16: 8038116.365 ops/s
# Warmup Iteration  17: 8039659.083 ops/s
# Warmup Iteration  18: 8050913.541 ops/s
# Warmup Iteration  19: 8063373.730 ops/s
# Warmup Iteration  20: 8039415.862 ops/s
# Warmup Iteration  21: 8047921.896 ops/s
# Warmup Iteration  22: 8031201.254 ops/s
# Warmup Iteration  23: 8015775.561 ops/s
# Warmup Iteration  24: 7995764.995 ops/s
# Warmup Iteration  25: 8049880.313 ops/s
# Warmup Iteration  26: 8049336.944 ops/s
# Warmup Iteration  27: 8018805.447 ops/s
# Warmup Iteration  28: 8018243.529 ops/s
# Warmup Iteration  29: 8055830.176 ops/s
# Warmup Iteration  30: 8036747.317 ops/s
Iteration   1: 8043413.607 ops/s
Iteration   2: 8059329.848 ops/s
Iteration   3: 8036907.834 ops/s
Iteration   4: 8044274.396 ops/s
Iteration   5: 8024101.250 ops/s
Iteration   6: 8002296.876 ops/s
Iteration   7: 8060626.358 ops/s
Iteration   8: 8046656.210 ops/s
Iteration   9: 8017125.661 ops/s
Iteration  10: 8049314.299 ops/s
Iteration  11: 8006582.813 ops/s
Iteration  12: 8007756.186 ops/s
Iteration  13: 8064800.133 ops/s
Iteration  14: 8003322.194 ops/s
Iteration  15: 8039433.039 ops/s
Iteration  16: 7991398.828 ops/s
Iteration  17: 8023043.507 ops/s
Iteration  18: 8062855.342 ops/s
Iteration  19: 8039355.340 ops/s
Iteration  20: 8030382.732 ops/s
Iteration  21: 8071774.003 ops/s
Iteration  22: 8031895.478 ops/s
Iteration  23: 8025041.509 ops/s
Iteration  24: 8033314.715 ops/s
Iteration  25: 8045749.215 ops/s
Iteration  26: 8030263.088 ops/s
Iteration  27: 8050428.250 ops/s
Iteration  28: 8031434.450 ops/s
Iteration  29: 8034787.825 ops/s
Iteration  30: 7996949.567 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapList":
  8033487.152 ±(99.9%) 14042.284 ops/s [Average]
  (min, avg, max) = (7991398.828, 8033487.152, 8071774.003), stdev = 21017.831
  CI (99.9%): [8019444.868, 8047529.436] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_wrapList  thrpt   30  8033487.152 ± 14042.284  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4066399.530 ops/s
# Warmup Iteration   2: 7040314.316 ops/s
# Warmup Iteration   3: 7767010.492 ops/s
# Warmup Iteration   4: 7830969.329 ops/s
# Warmup Iteration   5: 7737154.936 ops/s
# Warmup Iteration   6: 6543328.261 ops/s
# Warmup Iteration   7: 7818462.701 ops/s
# Warmup Iteration   8: 7837019.659 ops/s
# Warmup Iteration   9: 7855303.349 ops/s
# Warmup Iteration  10: 7798277.382 ops/s
# Warmup Iteration  11: 7830216.255 ops/s
# Warmup Iteration  12: 7843627.990 ops/s
# Warmup Iteration  13: 7792660.265 ops/s
# Warmup Iteration  14: 7824914.142 ops/s
# Warmup Iteration  15: 7783511.854 ops/s
# Warmup Iteration  16: 7844841.500 ops/s
# Warmup Iteration  17: 7817140.535 ops/s
# Warmup Iteration  18: 7851312.664 ops/s
# Warmup Iteration  19: 7790372.415 ops/s
# Warmup Iteration  20: 7811940.619 ops/s
# Warmup Iteration  21: 7717134.562 ops/s
# Warmup Iteration  22: 7757926.139 ops/s
# Warmup Iteration  23: 7820372.461 ops/s
# Warmup Iteration  24: 7842117.267 ops/s
# Warmup Iteration  25: 7828962.924 ops/s
# Warmup Iteration  26: 7836663.899 ops/s
# Warmup Iteration  27: 7830420.897 ops/s
# Warmup Iteration  28: 7837112.711 ops/s
# Warmup Iteration  29: 7829573.125 ops/s
# Warmup Iteration  30: 7803460.648 ops/s
Iteration   1: 7813681.090 ops/s
Iteration   2: 7790832.195 ops/s
Iteration   3: 7843745.510 ops/s
Iteration   4: 7831462.277 ops/s
Iteration   5: 7827788.720 ops/s
Iteration   6: 7824467.420 ops/s
Iteration   7: 7800022.092 ops/s
Iteration   8: 7795714.925 ops/s
Iteration   9: 7823621.656 ops/s
Iteration  10: 7803702.454 ops/s
Iteration  11: 7765152.716 ops/s
Iteration  12: 7764269.217 ops/s
Iteration  13: 7817668.390 ops/s
Iteration  14: 7780606.964 ops/s
Iteration  15: 7822759.745 ops/s
Iteration  16: 7814738.824 ops/s
Iteration  17: 7831384.850 ops/s
Iteration  18: 7853661.574 ops/s
Iteration  19: 7796275.464 ops/s
Iteration  20: 7850638.711 ops/s
Iteration  21: 7851350.172 ops/s
Iteration  22: 7818672.351 ops/s
Iteration  23: 7851107.247 ops/s
Iteration  24: 7813002.252 ops/s
Iteration  25: 7834994.172 ops/s
Iteration  26: 7821403.575 ops/s
Iteration  27: 7815178.126 ops/s
Iteration  28: 7861812.979 ops/s
Iteration  29: 7828025.396 ops/s
Iteration  30: 7836475.161 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_wrapSet":
  7819473.874 ±(99.9%) 16520.875 ops/s [Average]
  (min, avg, max) = (7764269.217, 7819473.874, 7861812.979), stdev = 24727.670
  CI (99.9%): [7802952.999, 7835994.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
CollectionAdapterTest._Benchmark.benchmark_wrapSet  thrpt   30  7819473.874 ± 16520.875  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 160377.124 ops/s
# Warmup Iteration   2: 177116.211 ops/s
# Warmup Iteration   3: 205646.979 ops/s
# Warmup Iteration   4: 230880.460 ops/s
# Warmup Iteration   5: 230394.814 ops/s
# Warmup Iteration   6: 230417.839 ops/s
# Warmup Iteration   7: 228506.416 ops/s
# Warmup Iteration   8: 230563.040 ops/s
# Warmup Iteration   9: 230434.804 ops/s
# Warmup Iteration  10: 230161.813 ops/s
# Warmup Iteration  11: 229795.572 ops/s
# Warmup Iteration  12: 230262.640 ops/s
# Warmup Iteration  13: 230438.085 ops/s
# Warmup Iteration  14: 201058.154 ops/s
# Warmup Iteration  15: 217734.284 ops/s
# Warmup Iteration  16: 230833.039 ops/s
# Warmup Iteration  17: 229060.964 ops/s
# Warmup Iteration  18: 231290.795 ops/s
# Warmup Iteration  19: 230514.603 ops/s
# Warmup Iteration  20: 230023.167 ops/s
# Warmup Iteration  21: 228922.719 ops/s
# Warmup Iteration  22: 229914.785 ops/s
# Warmup Iteration  23: 230669.031 ops/s
# Warmup Iteration  24: 230283.422 ops/s
# Warmup Iteration  25: 230801.303 ops/s
# Warmup Iteration  26: 230894.960 ops/s
# Warmup Iteration  27: 230814.785 ops/s
# Warmup Iteration  28: 230650.799 ops/s
# Warmup Iteration  29: 230270.987 ops/s
# Warmup Iteration  30: 231130.429 ops/s
Iteration   1: 230978.879 ops/s
Iteration   2: 230302.447 ops/s
Iteration   3: 230369.458 ops/s
Iteration   4: 231448.180 ops/s
Iteration   5: 230148.093 ops/s
Iteration   6: 231079.701 ops/s
Iteration   7: 230842.357 ops/s
Iteration   8: 230173.664 ops/s
Iteration   9: 230516.144 ops/s
Iteration  10: 230640.355 ops/s
Iteration  11: 231279.976 ops/s
Iteration  12: 231076.407 ops/s
Iteration  13: 229986.992 ops/s
Iteration  14: 229789.740 ops/s
Iteration  15: 230445.978 ops/s
Iteration  16: 231359.689 ops/s
Iteration  17: 230348.576 ops/s
Iteration  18: 229306.694 ops/s
Iteration  19: 229669.596 ops/s
Iteration  20: 230643.555 ops/s
Iteration  21: 230673.380 ops/s
Iteration  22: 230643.198 ops/s
Iteration  23: 230292.091 ops/s
Iteration  24: 230158.527 ops/s
Iteration  25: 231486.416 ops/s
Iteration  26: 230897.361 ops/s
Iteration  27: 229775.002 ops/s
Iteration  28: 231481.089 ops/s
Iteration  29: 231158.855 ops/s
Iteration  30: 230495.805 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zip":
  230582.273 ±(99.9%) 383.517 ops/s [Average]
  (min, avg, max) = (229306.694, 230582.273, 231486.416), stdev = 574.031
  CI (99.9%): [230198.756, 230965.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
CollectionAdapterTest._Benchmark.benchmark_zip  thrpt   30  230582.273 ± 383.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 361530.274 ops/s
# Warmup Iteration   2: 492400.735 ops/s
# Warmup Iteration   3: 621820.941 ops/s
# Warmup Iteration   4: 619693.849 ops/s
# Warmup Iteration   5: 620396.307 ops/s
# Warmup Iteration   6: 622359.166 ops/s
# Warmup Iteration   7: 622376.404 ops/s
# Warmup Iteration   8: 528532.866 ops/s
# Warmup Iteration   9: 613736.917 ops/s
# Warmup Iteration  10: 622927.362 ops/s
# Warmup Iteration  11: 620837.198 ops/s
# Warmup Iteration  12: 625413.733 ops/s
# Warmup Iteration  13: 620415.599 ops/s
# Warmup Iteration  14: 621726.696 ops/s
# Warmup Iteration  15: 621910.355 ops/s
# Warmup Iteration  16: 624800.274 ops/s
# Warmup Iteration  17: 619680.086 ops/s
# Warmup Iteration  18: 621464.295 ops/s
# Warmup Iteration  19: 621399.552 ops/s
# Warmup Iteration  20: 621794.175 ops/s
# Warmup Iteration  21: 622187.098 ops/s
# Warmup Iteration  22: 623021.349 ops/s
# Warmup Iteration  23: 625466.818 ops/s
# Warmup Iteration  24: 625264.613 ops/s
# Warmup Iteration  25: 624988.913 ops/s
# Warmup Iteration  26: 623129.684 ops/s
# Warmup Iteration  27: 619009.701 ops/s
# Warmup Iteration  28: 622395.209 ops/s
# Warmup Iteration  29: 625495.697 ops/s
# Warmup Iteration  30: 622012.605 ops/s
Iteration   1: 624575.858 ops/s
Iteration   2: 623554.092 ops/s
Iteration   3: 623225.704 ops/s
Iteration   4: 624765.159 ops/s
Iteration   5: 618707.938 ops/s
Iteration   6: 621639.673 ops/s
Iteration   7: 622923.971 ops/s
Iteration   8: 622341.963 ops/s
Iteration   9: 620721.359 ops/s
Iteration  10: 621885.822 ops/s
Iteration  11: 622159.553 ops/s
Iteration  12: 627583.246 ops/s
Iteration  13: 625292.790 ops/s
Iteration  14: 620751.375 ops/s
Iteration  15: 613370.534 ops/s
Iteration  16: 623224.779 ops/s
Iteration  17: 623229.769 ops/s
Iteration  18: 625304.385 ops/s
Iteration  19: 623061.335 ops/s
Iteration  20: 622676.736 ops/s
Iteration  21: 622164.003 ops/s
Iteration  22: 622184.676 ops/s
Iteration  23: 623625.846 ops/s
Iteration  24: 623158.475 ops/s
Iteration  25: 623459.486 ops/s
Iteration  26: 623468.015 ops/s
Iteration  27: 624452.138 ops/s
Iteration  28: 620897.743 ops/s
Iteration  29: 625126.035 ops/s
Iteration  30: 626799.296 ops/s


Result "org.eclipse.collections.impl.collection.mutable.CollectionAdapterTest._Benchmark.benchmark_zipWithIndex":
  622877.725 ±(99.9%) 1712.916 ops/s [Average]
  (min, avg, max) = (613370.534, 622877.725, 627583.246), stdev = 2563.812
  CI (99.9%): [621164.810, 624590.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
CollectionAdapterTest._Benchmark.benchmark_zipWithIndex  thrpt   30  622877.725 ± 1712.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718382.827 ops/s
# Warmup Iteration   2: 774495.407 ops/s
# Warmup Iteration   3: 1020832.937 ops/s
# Warmup Iteration   4: 1018193.648 ops/s
# Warmup Iteration   5: 1018936.296 ops/s
# Warmup Iteration   6: 1020232.080 ops/s
# Warmup Iteration   7: 1021178.742 ops/s
# Warmup Iteration   8: 1018255.012 ops/s
# Warmup Iteration   9: 1019370.214 ops/s
# Warmup Iteration  10: 1020570.026 ops/s
# Warmup Iteration  11: 861378.581 ops/s
# Warmup Iteration  12: 1019236.020 ops/s
# Warmup Iteration  13: 1017994.765 ops/s
# Warmup Iteration  14: 1020769.002 ops/s
# Warmup Iteration  15: 1019797.556 ops/s
# Warmup Iteration  16: 1018149.648 ops/s
# Warmup Iteration  17: 1085227.855 ops/s
# Warmup Iteration  18: 1092158.787 ops/s
# Warmup Iteration  19: 1087841.035 ops/s
# Warmup Iteration  20: 1083016.622 ops/s
# Warmup Iteration  21: 1084535.404 ops/s
# Warmup Iteration  22: 1081259.095 ops/s
# Warmup Iteration  23: 1083425.859 ops/s
# Warmup Iteration  24: 1085074.445 ops/s
# Warmup Iteration  25: 1084394.228 ops/s
# Warmup Iteration  26: 1081141.788 ops/s
# Warmup Iteration  27: 1086189.075 ops/s
# Warmup Iteration  28: 1086982.629 ops/s
# Warmup Iteration  29: 1077880.537 ops/s
# Warmup Iteration  30: 1085871.626 ops/s
Iteration   1: 1083731.671 ops/s
Iteration   2: 1091597.736 ops/s
Iteration   3: 1088347.653 ops/s
Iteration   4: 1086164.966 ops/s
Iteration   5: 1084361.206 ops/s
Iteration   6: 1078012.529 ops/s
Iteration   7: 1081593.850 ops/s
Iteration   8: 1085686.340 ops/s
Iteration   9: 1081446.628 ops/s
Iteration  10: 1077021.877 ops/s
Iteration  11: 1080871.407 ops/s
Iteration  12: 1090259.903 ops/s
Iteration  13: 1084996.510 ops/s
Iteration  14: 1084518.946 ops/s
Iteration  15: 1091385.165 ops/s
Iteration  16: 1086813.641 ops/s
Iteration  17: 1087935.794 ops/s
Iteration  18: 1086128.721 ops/s
Iteration  19: 1087525.936 ops/s
Iteration  20: 1089878.309 ops/s
Iteration  21: 1091956.569 ops/s
Iteration  22: 1088130.135 ops/s
Iteration  23: 1085260.721 ops/s
Iteration  24: 1081635.050 ops/s
Iteration  25: 1087407.037 ops/s
Iteration  26: 1089102.602 ops/s
Iteration  27: 1082425.314 ops/s
Iteration  28: 1084143.509 ops/s
Iteration  29: 1082476.359 ops/s
Iteration  30: 1081733.793 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_add":
  1085418.329 ±(99.9%) 2589.720 ops/s [Average]
  (min, avg, max) = (1077021.877, 1085418.329, 1091956.569), stdev = 3876.172
  CI (99.9%): [1082828.609, 1088008.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  1085418.329 ± 2589.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 717066.445 ops/s
# Warmup Iteration   2: 776904.212 ops/s
# Warmup Iteration   3: 1016330.156 ops/s
# Warmup Iteration   4: 1017786.552 ops/s
# Warmup Iteration   5: 1019517.591 ops/s
# Warmup Iteration   6: 1017560.517 ops/s
# Warmup Iteration   7: 1021666.132 ops/s
# Warmup Iteration   8: 1017328.888 ops/s
# Warmup Iteration   9: 1012939.964 ops/s
# Warmup Iteration  10: 1017466.526 ops/s
# Warmup Iteration  11: 851725.214 ops/s
# Warmup Iteration  12: 1016807.712 ops/s
# Warmup Iteration  13: 1015446.338 ops/s
# Warmup Iteration  14: 1018786.108 ops/s
# Warmup Iteration  15: 1023118.308 ops/s
# Warmup Iteration  16: 1010125.395 ops/s
# Warmup Iteration  17: 1083955.987 ops/s
# Warmup Iteration  18: 1078696.454 ops/s
# Warmup Iteration  19: 1076879.436 ops/s
# Warmup Iteration  20: 1078457.393 ops/s
# Warmup Iteration  21: 1073678.083 ops/s
# Warmup Iteration  22: 1078053.849 ops/s
# Warmup Iteration  23: 1083801.771 ops/s
# Warmup Iteration  24: 1076520.446 ops/s
# Warmup Iteration  25: 1082552.007 ops/s
# Warmup Iteration  26: 1077923.894 ops/s
# Warmup Iteration  27: 1077229.834 ops/s
# Warmup Iteration  28: 1081720.135 ops/s
# Warmup Iteration  29: 1082827.455 ops/s
# Warmup Iteration  30: 1084219.528 ops/s
Iteration   1: 1079394.589 ops/s
Iteration   2: 1079885.144 ops/s
Iteration   3: 1075119.034 ops/s
Iteration   4: 1081106.559 ops/s
Iteration   5: 1078977.195 ops/s
Iteration   6: 1083672.403 ops/s
Iteration   7: 1085745.344 ops/s
Iteration   8: 1084931.886 ops/s
Iteration   9: 1092663.529 ops/s
Iteration  10: 1079428.895 ops/s
Iteration  11: 1085283.620 ops/s
Iteration  12: 1078753.513 ops/s
Iteration  13: 1080773.975 ops/s
Iteration  14: 1083870.226 ops/s
Iteration  15: 1079193.653 ops/s
Iteration  16: 1088288.325 ops/s
Iteration  17: 1090959.451 ops/s
Iteration  18: 1080512.914 ops/s
Iteration  19: 1080483.543 ops/s
Iteration  20: 1085001.405 ops/s
Iteration  21: 1079880.485 ops/s
Iteration  22: 1086224.624 ops/s
Iteration  23: 1081172.771 ops/s
Iteration  24: 1084838.663 ops/s
Iteration  25: 1080047.741 ops/s
Iteration  26: 1077667.268 ops/s
Iteration  27: 1082818.303 ops/s
Iteration  28: 1086166.855 ops/s
Iteration  29: 1086859.633 ops/s
Iteration  30: 1086401.529 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll":
  1082870.769 ±(99.9%) 2700.410 ops/s [Average]
  (min, avg, max) = (1075119.034, 1082870.769, 1092663.529), stdev = 4041.847
  CI (99.9%): [1080170.359, 1085571.179] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  1082870.769 ± 2700.410  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704878.952 ops/s
# Warmup Iteration   2: 755881.847 ops/s
# Warmup Iteration   3: 974859.612 ops/s
# Warmup Iteration   4: 975231.476 ops/s
# Warmup Iteration   5: 976541.461 ops/s
# Warmup Iteration   6: 974139.411 ops/s
# Warmup Iteration   7: 980215.092 ops/s
# Warmup Iteration   8: 978573.939 ops/s
# Warmup Iteration   9: 980044.638 ops/s
# Warmup Iteration  10: 981756.435 ops/s
# Warmup Iteration  11: 880664.916 ops/s
# Warmup Iteration  12: 920919.380 ops/s
# Warmup Iteration  13: 976453.953 ops/s
# Warmup Iteration  14: 975297.527 ops/s
# Warmup Iteration  15: 977872.771 ops/s
# Warmup Iteration  16: 974042.113 ops/s
# Warmup Iteration  17: 1043944.466 ops/s
# Warmup Iteration  18: 1032160.273 ops/s
# Warmup Iteration  19: 1031980.971 ops/s
# Warmup Iteration  20: 1039228.932 ops/s
# Warmup Iteration  21: 1035934.496 ops/s
# Warmup Iteration  22: 1038186.598 ops/s
# Warmup Iteration  23: 1032959.007 ops/s
# Warmup Iteration  24: 1038667.047 ops/s
# Warmup Iteration  25: 1039412.283 ops/s
# Warmup Iteration  26: 1039551.093 ops/s
# Warmup Iteration  27: 1039157.822 ops/s
# Warmup Iteration  28: 1034832.708 ops/s
# Warmup Iteration  29: 1038472.826 ops/s
# Warmup Iteration  30: 1044420.883 ops/s
Iteration   1: 1038758.168 ops/s
Iteration   2: 1035408.865 ops/s
Iteration   3: 1035082.526 ops/s
Iteration   4: 1034883.655 ops/s
Iteration   5: 1043789.000 ops/s
Iteration   6: 1041686.829 ops/s
Iteration   7: 1035458.308 ops/s
Iteration   8: 1027220.923 ops/s
Iteration   9: 1029483.919 ops/s
Iteration  10: 1038475.991 ops/s
Iteration  11: 1037076.175 ops/s
Iteration  12: 1032827.168 ops/s
Iteration  13: 1040082.577 ops/s
Iteration  14: 1039070.892 ops/s
Iteration  15: 1040399.590 ops/s
Iteration  16: 1045195.103 ops/s
Iteration  17: 1037319.209 ops/s
Iteration  18: 1034557.027 ops/s
Iteration  19: 1034586.023 ops/s
Iteration  20: 1034915.918 ops/s
Iteration  21: 1042449.687 ops/s
Iteration  22: 1037738.098 ops/s
Iteration  23: 1039036.404 ops/s
Iteration  24: 1034858.342 ops/s
Iteration  25: 1043197.007 ops/s
Iteration  26: 1038978.197 ops/s
Iteration  27: 1041626.142 ops/s
Iteration  28: 1043739.294 ops/s
Iteration  29: 1037614.862 ops/s
Iteration  30: 1021384.711 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex":
  1037230.020 ±(99.9%) 3409.928 ops/s [Average]
  (min, avg, max) = (1021384.711, 1037230.020, 1045195.103), stdev = 5103.820
  CI (99.9%): [1033820.092, 1040639.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1037230.020 ± 3409.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710969.200 ops/s
# Warmup Iteration   2: 778507.184 ops/s
# Warmup Iteration   3: 1015810.044 ops/s
# Warmup Iteration   4: 1015741.783 ops/s
# Warmup Iteration   5: 1002119.671 ops/s
# Warmup Iteration   6: 1019761.064 ops/s
# Warmup Iteration   7: 1018433.977 ops/s
# Warmup Iteration   8: 1016242.264 ops/s
# Warmup Iteration   9: 1015123.131 ops/s
# Warmup Iteration  10: 1013769.947 ops/s
# Warmup Iteration  11: 855779.893 ops/s
# Warmup Iteration  12: 1025183.773 ops/s
# Warmup Iteration  13: 1018134.623 ops/s
# Warmup Iteration  14: 1027664.971 ops/s
# Warmup Iteration  15: 1017928.808 ops/s
# Warmup Iteration  16: 1023625.618 ops/s
# Warmup Iteration  17: 1079447.695 ops/s
# Warmup Iteration  18: 1079063.600 ops/s
# Warmup Iteration  19: 1084805.660 ops/s
# Warmup Iteration  20: 1087856.442 ops/s
# Warmup Iteration  21: 1087996.296 ops/s
# Warmup Iteration  22: 1082825.544 ops/s
# Warmup Iteration  23: 1080161.832 ops/s
# Warmup Iteration  24: 1084785.527 ops/s
# Warmup Iteration  25: 1081367.354 ops/s
# Warmup Iteration  26: 1089748.799 ops/s
# Warmup Iteration  27: 1083919.923 ops/s
# Warmup Iteration  28: 1079652.054 ops/s
# Warmup Iteration  29: 1083516.073 ops/s
# Warmup Iteration  30: 1086157.681 ops/s
Iteration   1: 1086414.016 ops/s
Iteration   2: 1081650.167 ops/s
Iteration   3: 1087166.034 ops/s
Iteration   4: 1076455.817 ops/s
Iteration   5: 1086351.169 ops/s
Iteration   6: 1083511.743 ops/s
Iteration   7: 1086093.692 ops/s
Iteration   8: 1083245.966 ops/s
Iteration   9: 1079430.963 ops/s
Iteration  10: 1077216.194 ops/s
Iteration  11: 1097254.862 ops/s
Iteration  12: 1083228.493 ops/s
Iteration  13: 1094791.661 ops/s
Iteration  14: 1081425.661 ops/s
Iteration  15: 1093250.357 ops/s
Iteration  16: 1080941.136 ops/s
Iteration  17: 1078030.497 ops/s
Iteration  18: 1087324.569 ops/s
Iteration  19: 1090918.698 ops/s
Iteration  20: 1084430.928 ops/s
Iteration  21: 1081304.018 ops/s
Iteration  22: 1080691.619 ops/s
Iteration  23: 1088278.304 ops/s
Iteration  24: 1077247.935 ops/s
Iteration  25: 1092615.388 ops/s
Iteration  26: 1086114.093 ops/s
Iteration  27: 1079128.691 ops/s
Iteration  28: 1074810.337 ops/s
Iteration  29: 1091285.003 ops/s
Iteration  30: 1076356.607 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  1084232.154 ±(99.9%) 3969.709 ops/s [Average]
  (min, avg, max) = (1074810.337, 1084232.154, 1097254.862), stdev = 5941.674
  CI (99.9%): [1080262.445, 1088201.863] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  1084232.154 ± 3969.709  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708397.033 ops/s
# Warmup Iteration   2: 760376.608 ops/s
# Warmup Iteration   3: 971365.414 ops/s
# Warmup Iteration   4: 971681.340 ops/s
# Warmup Iteration   5: 975823.047 ops/s
# Warmup Iteration   6: 984645.518 ops/s
# Warmup Iteration   7: 981599.370 ops/s
# Warmup Iteration   8: 986947.063 ops/s
# Warmup Iteration   9: 987048.001 ops/s
# Warmup Iteration  10: 981613.023 ops/s
# Warmup Iteration  11: 902209.992 ops/s
# Warmup Iteration  12: 904599.347 ops/s
# Warmup Iteration  13: 977705.664 ops/s
# Warmup Iteration  14: 979163.330 ops/s
# Warmup Iteration  15: 982275.077 ops/s
# Warmup Iteration  16: 981719.853 ops/s
# Warmup Iteration  17: 1036172.680 ops/s
# Warmup Iteration  18: 1031431.326 ops/s
# Warmup Iteration  19: 1039092.982 ops/s
# Warmup Iteration  20: 1039453.076 ops/s
# Warmup Iteration  21: 1039334.464 ops/s
# Warmup Iteration  22: 1040270.058 ops/s
# Warmup Iteration  23: 1036887.261 ops/s
# Warmup Iteration  24: 1036597.903 ops/s
# Warmup Iteration  25: 1034836.965 ops/s
# Warmup Iteration  26: 1040211.976 ops/s
# Warmup Iteration  27: 1036463.313 ops/s
# Warmup Iteration  28: 1037457.903 ops/s
# Warmup Iteration  29: 1034461.260 ops/s
# Warmup Iteration  30: 1040329.553 ops/s
Iteration   1: 1033053.122 ops/s
Iteration   2: 1037511.094 ops/s
Iteration   3: 1037670.705 ops/s
Iteration   4: 1029757.055 ops/s
Iteration   5: 1040429.338 ops/s
Iteration   6: 1038342.228 ops/s
Iteration   7: 1030294.060 ops/s
Iteration   8: 1035330.900 ops/s
Iteration   9: 1035246.655 ops/s
Iteration  10: 1031407.432 ops/s
Iteration  11: 1040431.559 ops/s
Iteration  12: 1037946.407 ops/s
Iteration  13: 1036381.210 ops/s
Iteration  14: 1042891.577 ops/s
Iteration  15: 1039845.376 ops/s
Iteration  16: 1037673.599 ops/s
Iteration  17: 1038571.108 ops/s
Iteration  18: 1034841.509 ops/s
Iteration  19: 1033053.646 ops/s
Iteration  20: 1033799.086 ops/s
Iteration  21: 1027746.715 ops/s
Iteration  22: 1036836.099 ops/s
Iteration  23: 1032683.542 ops/s
Iteration  24: 1034138.367 ops/s
Iteration  25: 1032914.111 ops/s
Iteration  26: 1039052.289 ops/s
Iteration  27: 1040064.208 ops/s
Iteration  28: 1036643.902 ops/s
Iteration  29: 1028921.140 ops/s
Iteration  30: 1028684.906 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex":
  1035405.431 ±(99.9%) 2645.540 ops/s [Average]
  (min, avg, max) = (1027746.715, 1035405.431, 1042891.577), stdev = 3959.720
  CI (99.9%): [1032759.891, 1038050.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_addAtIndex  thrpt   30  1035405.431 ± 2645.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 714776.136 ops/s
# Warmup Iteration   2: 757706.257 ops/s
# Warmup Iteration   3: 1009363.433 ops/s
# Warmup Iteration   4: 1005720.717 ops/s
# Warmup Iteration   5: 1002872.386 ops/s
# Warmup Iteration   6: 1009055.197 ops/s
# Warmup Iteration   7: 1005422.641 ops/s
# Warmup Iteration   8: 1007547.045 ops/s
# Warmup Iteration   9: 1002948.014 ops/s
# Warmup Iteration  10: 1005475.221 ops/s
# Warmup Iteration  11: 845181.899 ops/s
# Warmup Iteration  12: 1002651.218 ops/s
# Warmup Iteration  13: 1008478.524 ops/s
# Warmup Iteration  14: 1007290.665 ops/s
# Warmup Iteration  15: 1008767.849 ops/s
# Warmup Iteration  16: 1005584.859 ops/s
# Warmup Iteration  17: 1076811.218 ops/s
# Warmup Iteration  18: 1065199.652 ops/s
# Warmup Iteration  19: 1075501.519 ops/s
# Warmup Iteration  20: 1074273.810 ops/s
# Warmup Iteration  21: 1077914.913 ops/s
# Warmup Iteration  22: 1072860.877 ops/s
# Warmup Iteration  23: 1078888.309 ops/s
# Warmup Iteration  24: 1069911.053 ops/s
# Warmup Iteration  25: 1076532.334 ops/s
# Warmup Iteration  26: 1074410.529 ops/s
# Warmup Iteration  27: 1078216.701 ops/s
# Warmup Iteration  28: 1080815.340 ops/s
# Warmup Iteration  29: 1073845.556 ops/s
# Warmup Iteration  30: 1072201.394 ops/s
Iteration   1: 1063872.838 ops/s
Iteration   2: 1069721.494 ops/s
Iteration   3: 1072854.751 ops/s
Iteration   4: 1062952.320 ops/s
Iteration   5: 1064640.922 ops/s
Iteration   6: 1074380.569 ops/s
Iteration   7: 1073586.380 ops/s
Iteration   8: 1067310.503 ops/s
Iteration   9: 1076726.573 ops/s
Iteration  10: 1069345.905 ops/s
Iteration  11: 1072346.594 ops/s
Iteration  12: 1068405.365 ops/s
Iteration  13: 1071617.100 ops/s
Iteration  14: 1078246.411 ops/s
Iteration  15: 1075805.743 ops/s
Iteration  16: 1067310.631 ops/s
Iteration  17: 1075155.957 ops/s
Iteration  18: 1076079.552 ops/s
Iteration  19: 1077181.138 ops/s
Iteration  20: 1075473.227 ops/s
Iteration  21: 1076075.919 ops/s
Iteration  22: 1080038.383 ops/s
Iteration  23: 1071423.631 ops/s
Iteration  24: 1068112.465 ops/s
Iteration  25: 1073897.134 ops/s
Iteration  26: 1073110.375 ops/s
Iteration  27: 1075214.835 ops/s
Iteration  28: 1077297.403 ops/s
Iteration  29: 1078345.036 ops/s
Iteration  30: 1077306.111 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_clear":
  1072794.509 ±(99.9%) 3067.002 ops/s [Average]
  (min, avg, max) = (1062952.320, 1072794.509, 1080038.383), stdev = 4590.544
  CI (99.9%): [1069727.507, 1075861.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  1072794.509 ± 3067.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3590205.802 ops/s
# Warmup Iteration   2: 15580051.159 ops/s
# Warmup Iteration   3: 14815967.278 ops/s
# Warmup Iteration   4: 13491220.707 ops/s
# Warmup Iteration   5: 15703552.062 ops/s
# Warmup Iteration   6: 15647083.680 ops/s
# Warmup Iteration   7: 15683866.845 ops/s
# Warmup Iteration   8: 15642371.925 ops/s
# Warmup Iteration   9: 15638160.500 ops/s
# Warmup Iteration  10: 15652854.192 ops/s
# Warmup Iteration  11: 15683222.203 ops/s
# Warmup Iteration  12: 15606435.181 ops/s
# Warmup Iteration  13: 15755879.565 ops/s
# Warmup Iteration  14: 15660477.069 ops/s
# Warmup Iteration  15: 15703810.904 ops/s
# Warmup Iteration  16: 15629474.556 ops/s
# Warmup Iteration  17: 15625514.375 ops/s
# Warmup Iteration  18: 15614313.665 ops/s
# Warmup Iteration  19: 15616562.181 ops/s
# Warmup Iteration  20: 15599248.793 ops/s
# Warmup Iteration  21: 15699642.457 ops/s
# Warmup Iteration  22: 15724778.635 ops/s
# Warmup Iteration  23: 15653851.669 ops/s
# Warmup Iteration  24: 15577250.946 ops/s
# Warmup Iteration  25: 15722206.149 ops/s
# Warmup Iteration  26: 15661051.557 ops/s
# Warmup Iteration  27: 15681466.527 ops/s
# Warmup Iteration  28: 15606597.178 ops/s
# Warmup Iteration  29: 15687291.434 ops/s
# Warmup Iteration  30: 15637859.614 ops/s
Iteration   1: 15646175.844 ops/s
Iteration   2: 15589983.340 ops/s
Iteration   3: 15654440.524 ops/s
Iteration   4: 15528430.734 ops/s
Iteration   5: 15473155.080 ops/s
Iteration   6: 15664446.103 ops/s
Iteration   7: 15627575.586 ops/s
Iteration   8: 15786609.428 ops/s
Iteration   9: 15606828.207 ops/s
Iteration  10: 15683307.425 ops/s
Iteration  11: 15648769.508 ops/s
Iteration  12: 15582306.927 ops/s
Iteration  13: 15659118.052 ops/s
Iteration  14: 15648221.202 ops/s
Iteration  15: 15690721.044 ops/s
Iteration  16: 15671375.473 ops/s
Iteration  17: 15782173.692 ops/s
Iteration  18: 15675236.077 ops/s
Iteration  19: 15608486.054 ops/s
Iteration  20: 15705075.851 ops/s
Iteration  21: 15575038.237 ops/s
Iteration  22: 15600486.861 ops/s
Iteration  23: 15684280.451 ops/s
Iteration  24: 15563748.478 ops/s
Iteration  25: 15702960.524 ops/s
Iteration  26: 15683999.991 ops/s
Iteration  27: 15761859.233 ops/s
Iteration  28: 15689427.193 ops/s
Iteration  29: 15653411.827 ops/s
Iteration  30: 15633869.754 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collect":
  15649383.957 ±(99.9%) 45863.751 ops/s [Average]
  (min, avg, max) = (15473155.080, 15649383.957, 15786609.428), stdev = 68646.708
  CI (99.9%): [15603520.206, 15695247.708] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  15649383.957 ± 45863.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7648902.667 ops/s
# Warmup Iteration   2: 18135700.296 ops/s
# Warmup Iteration   3: 15204162.779 ops/s
# Warmup Iteration   4: 18255113.055 ops/s
# Warmup Iteration   5: 18206419.949 ops/s
# Warmup Iteration   6: 18250704.266 ops/s
# Warmup Iteration   7: 18259186.634 ops/s
# Warmup Iteration   8: 18313603.211 ops/s
# Warmup Iteration   9: 18278733.034 ops/s
# Warmup Iteration  10: 18299264.333 ops/s
# Warmup Iteration  11: 18145168.241 ops/s
# Warmup Iteration  12: 18202917.236 ops/s
# Warmup Iteration  13: 18222780.057 ops/s
# Warmup Iteration  14: 18180833.990 ops/s
# Warmup Iteration  15: 18344724.525 ops/s
# Warmup Iteration  16: 18194342.850 ops/s
# Warmup Iteration  17: 17904404.192 ops/s
# Warmup Iteration  18: 18290959.915 ops/s
# Warmup Iteration  19: 18143662.955 ops/s
# Warmup Iteration  20: 18086318.898 ops/s
# Warmup Iteration  21: 18229583.551 ops/s
# Warmup Iteration  22: 18135513.789 ops/s
# Warmup Iteration  23: 18054313.261 ops/s
# Warmup Iteration  24: 18262977.746 ops/s
# Warmup Iteration  25: 18194537.559 ops/s
# Warmup Iteration  26: 18174975.290 ops/s
# Warmup Iteration  27: 17788407.082 ops/s
# Warmup Iteration  28: 18051912.426 ops/s
# Warmup Iteration  29: 18276908.946 ops/s
# Warmup Iteration  30: 18223167.897 ops/s
Iteration   1: 18029332.868 ops/s
Iteration   2: 18128838.464 ops/s
Iteration   3: 18219472.198 ops/s
Iteration   4: 18225470.365 ops/s
Iteration   5: 18023254.223 ops/s
Iteration   6: 18267751.300 ops/s
Iteration   7: 18083997.077 ops/s
Iteration   8: 18186996.120 ops/s
Iteration   9: 18347506.596 ops/s
Iteration  10: 18257495.927 ops/s
Iteration  11: 18277849.141 ops/s
Iteration  12: 18268125.270 ops/s
Iteration  13: 18257335.166 ops/s
Iteration  14: 18395153.454 ops/s
Iteration  15: 18342089.685 ops/s
Iteration  16: 18327463.891 ops/s
Iteration  17: 18195923.443 ops/s
Iteration  18: 18196409.499 ops/s
Iteration  19: 18289218.306 ops/s
Iteration  20: 18293023.730 ops/s
Iteration  21: 18221666.001 ops/s
Iteration  22: 18094719.752 ops/s
Iteration  23: 17960476.498 ops/s
Iteration  24: 17915712.090 ops/s
Iteration  25: 18386008.187 ops/s
Iteration  26: 18253558.106 ops/s
Iteration  27: 18300153.647 ops/s
Iteration  28: 18123464.844 ops/s
Iteration  29: 18245926.095 ops/s
Iteration  30: 18381482.287 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  18216529.141 ±(99.9%) 82747.127 ops/s [Average]
  (min, avg, max) = (17915712.090, 18216529.141, 18395153.454), stdev = 123852.013
  CI (99.9%): [18133782.015, 18299276.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  18216529.141 ± 82747.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6213693.012 ops/s
# Warmup Iteration   2: 14657171.795 ops/s
# Warmup Iteration   3: 12302933.472 ops/s
# Warmup Iteration   4: 14839703.805 ops/s
# Warmup Iteration   5: 14808766.826 ops/s
# Warmup Iteration   6: 14819567.074 ops/s
# Warmup Iteration   7: 14785768.961 ops/s
# Warmup Iteration   8: 14734107.725 ops/s
# Warmup Iteration   9: 14760026.300 ops/s
# Warmup Iteration  10: 14809716.266 ops/s
# Warmup Iteration  11: 14712380.168 ops/s
# Warmup Iteration  12: 14849369.923 ops/s
# Warmup Iteration  13: 14783249.217 ops/s
# Warmup Iteration  14: 14793210.105 ops/s
# Warmup Iteration  15: 14706061.808 ops/s
# Warmup Iteration  16: 14775024.286 ops/s
# Warmup Iteration  17: 14804963.907 ops/s
# Warmup Iteration  18: 14873323.144 ops/s
# Warmup Iteration  19: 14809880.535 ops/s
# Warmup Iteration  20: 14829824.010 ops/s
# Warmup Iteration  21: 14833644.703 ops/s
# Warmup Iteration  22: 14865329.921 ops/s
# Warmup Iteration  23: 14825442.843 ops/s
# Warmup Iteration  24: 14763173.834 ops/s
# Warmup Iteration  25: 14769125.113 ops/s
# Warmup Iteration  26: 14815252.324 ops/s
# Warmup Iteration  27: 14836874.516 ops/s
# Warmup Iteration  28: 14751661.275 ops/s
# Warmup Iteration  29: 14832866.936 ops/s
# Warmup Iteration  30: 14867055.067 ops/s
Iteration   1: 14726356.775 ops/s
Iteration   2: 14665907.563 ops/s
Iteration   3: 14673517.692 ops/s
Iteration   4: 14891446.640 ops/s
Iteration   5: 14782754.937 ops/s
Iteration   6: 14941236.554 ops/s
Iteration   7: 14860693.260 ops/s
Iteration   8: 14853991.192 ops/s
Iteration   9: 14760454.073 ops/s
Iteration  10: 14846129.151 ops/s
Iteration  11: 14814722.076 ops/s
Iteration  12: 14811646.800 ops/s
Iteration  13: 14906343.918 ops/s
Iteration  14: 14851718.618 ops/s
Iteration  15: 14811407.809 ops/s
Iteration  16: 14903211.546 ops/s
Iteration  17: 14758326.399 ops/s
Iteration  18: 14856672.506 ops/s
Iteration  19: 14759719.131 ops/s
Iteration  20: 14802243.634 ops/s
Iteration  21: 14848618.673 ops/s
Iteration  22: 14960886.464 ops/s
Iteration  23: 14874292.055 ops/s
Iteration  24: 14795850.081 ops/s
Iteration  25: 14920384.138 ops/s
Iteration  26: 14776284.179 ops/s
Iteration  27: 14813623.940 ops/s
Iteration  28: 14839776.570 ops/s
Iteration  29: 14746226.653 ops/s
Iteration  30: 14669631.796 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  14817469.161 ±(99.9%) 51353.908 ops/s [Average]
  (min, avg, max) = (14665907.563, 14817469.161, 14960886.464), stdev = 76864.118
  CI (99.9%): [14766115.253, 14868823.069] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  14817469.161 ± 51353.908  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6310122.659 ops/s
# Warmup Iteration   2: 14649593.096 ops/s
# Warmup Iteration   3: 12298624.410 ops/s
# Warmup Iteration   4: 14840765.282 ops/s
# Warmup Iteration   5: 14776618.413 ops/s
# Warmup Iteration   6: 14818236.054 ops/s
# Warmup Iteration   7: 14768126.255 ops/s
# Warmup Iteration   8: 14758226.009 ops/s
# Warmup Iteration   9: 14896473.842 ops/s
# Warmup Iteration  10: 14860825.931 ops/s
# Warmup Iteration  11: 14843125.547 ops/s
# Warmup Iteration  12: 14780647.819 ops/s
# Warmup Iteration  13: 14779066.910 ops/s
# Warmup Iteration  14: 14852933.667 ops/s
# Warmup Iteration  15: 14858372.840 ops/s
# Warmup Iteration  16: 14671144.442 ops/s
# Warmup Iteration  17: 14812655.790 ops/s
# Warmup Iteration  18: 14797549.138 ops/s
# Warmup Iteration  19: 14878573.547 ops/s
# Warmup Iteration  20: 14767756.897 ops/s
# Warmup Iteration  21: 14810536.253 ops/s
# Warmup Iteration  22: 14904644.146 ops/s
# Warmup Iteration  23: 14810106.400 ops/s
# Warmup Iteration  24: 14808871.221 ops/s
# Warmup Iteration  25: 14741707.505 ops/s
# Warmup Iteration  26: 14764543.845 ops/s
# Warmup Iteration  27: 14768032.983 ops/s
# Warmup Iteration  28: 14751401.996 ops/s
# Warmup Iteration  29: 14801297.544 ops/s
# Warmup Iteration  30: 14756043.415 ops/s
Iteration   1: 14745502.278 ops/s
Iteration   2: 14806487.281 ops/s
Iteration   3: 14789064.404 ops/s
Iteration   4: 14811836.230 ops/s
Iteration   5: 14789999.472 ops/s
Iteration   6: 14825694.631 ops/s
Iteration   7: 14853783.590 ops/s
Iteration   8: 14831063.650 ops/s
Iteration   9: 14767735.275 ops/s
Iteration  10: 14798867.760 ops/s
Iteration  11: 14824597.832 ops/s
Iteration  12: 14767563.800 ops/s
Iteration  13: 14774065.239 ops/s
Iteration  14: 14805309.470 ops/s
Iteration  15: 14779065.936 ops/s
Iteration  16: 14780872.310 ops/s
Iteration  17: 14765237.650 ops/s
Iteration  18: 14791116.155 ops/s
Iteration  19: 14763160.436 ops/s
Iteration  20: 14796778.452 ops/s
Iteration  21: 14734121.116 ops/s
Iteration  22: 14838033.469 ops/s
Iteration  23: 14866615.423 ops/s
Iteration  24: 14836565.984 ops/s
Iteration  25: 14718777.019 ops/s
Iteration  26: 14671052.557 ops/s
Iteration  27: 14791269.501 ops/s
Iteration  28: 14721517.210 ops/s
Iteration  29: 14715384.489 ops/s
Iteration  30: 14806623.045 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  14785592.055 ±(99.9%) 29554.276 ops/s [Average]
  (min, avg, max) = (14671052.557, 14785592.055, 14866615.423), stdev = 44235.453
  CI (99.9%): [14756037.779, 14815146.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  14785592.055 ± 29554.276  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6343752.839 ops/s
# Warmup Iteration   2: 14724865.371 ops/s
# Warmup Iteration   3: 12175658.699 ops/s
# Warmup Iteration   4: 14773480.458 ops/s
# Warmup Iteration   5: 14737302.435 ops/s
# Warmup Iteration   6: 14800740.530 ops/s
# Warmup Iteration   7: 14793343.333 ops/s
# Warmup Iteration   8: 14786269.115 ops/s
# Warmup Iteration   9: 14832551.814 ops/s
# Warmup Iteration  10: 14873496.050 ops/s
# Warmup Iteration  11: 14781967.157 ops/s
# Warmup Iteration  12: 14792143.506 ops/s
# Warmup Iteration  13: 14845620.035 ops/s
# Warmup Iteration  14: 14828306.155 ops/s
# Warmup Iteration  15: 14821970.825 ops/s
# Warmup Iteration  16: 14872910.393 ops/s
# Warmup Iteration  17: 14875336.004 ops/s
# Warmup Iteration  18: 14841813.223 ops/s
# Warmup Iteration  19: 14843176.646 ops/s
# Warmup Iteration  20: 14813717.663 ops/s
# Warmup Iteration  21: 14856354.020 ops/s
# Warmup Iteration  22: 14693478.527 ops/s
# Warmup Iteration  23: 14888442.121 ops/s
# Warmup Iteration  24: 14844883.592 ops/s
# Warmup Iteration  25: 14813852.501 ops/s
# Warmup Iteration  26: 14862079.497 ops/s
# Warmup Iteration  27: 14897252.422 ops/s
# Warmup Iteration  28: 14851861.491 ops/s
# Warmup Iteration  29: 14851778.003 ops/s
# Warmup Iteration  30: 14785597.312 ops/s
Iteration   1: 14733093.028 ops/s
Iteration   2: 14918226.123 ops/s
Iteration   3: 14870638.744 ops/s
Iteration   4: 14860073.399 ops/s
Iteration   5: 14794409.890 ops/s
Iteration   6: 14813641.314 ops/s
Iteration   7: 14912921.914 ops/s
Iteration   8: 14821574.712 ops/s
Iteration   9: 14881103.840 ops/s
Iteration  10: 14836090.037 ops/s
Iteration  11: 14833839.975 ops/s
Iteration  12: 14861523.041 ops/s
Iteration  13: 14840746.281 ops/s
Iteration  14: 14756312.162 ops/s
Iteration  15: 14910312.334 ops/s
Iteration  16: 14918145.992 ops/s
Iteration  17: 14896405.675 ops/s
Iteration  18: 14953400.000 ops/s
Iteration  19: 14825064.384 ops/s
Iteration  20: 14745050.720 ops/s
Iteration  21: 14830899.743 ops/s
Iteration  22: 14906298.446 ops/s
Iteration  23: 14803641.835 ops/s
Iteration  24: 14807686.207 ops/s
Iteration  25: 14888834.634 ops/s
Iteration  26: 14780465.586 ops/s
Iteration  27: 14692629.609 ops/s
Iteration  28: 14773050.189 ops/s
Iteration  29: 14736167.871 ops/s
Iteration  30: 14816063.295 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  14833943.699 ±(99.9%) 43349.905 ops/s [Average]
  (min, avg, max) = (14692629.609, 14833943.699, 14953400.000), stdev = 64884.102
  CI (99.9%): [14790593.794, 14877293.604] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  14833943.699 ± 43349.905  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6378992.737 ops/s
# Warmup Iteration   2: 14640403.629 ops/s
# Warmup Iteration   3: 12270513.742 ops/s
# Warmup Iteration   4: 14638164.301 ops/s
# Warmup Iteration   5: 14679471.686 ops/s
# Warmup Iteration   6: 14605313.114 ops/s
# Warmup Iteration   7: 14651198.959 ops/s
# Warmup Iteration   8: 14557519.993 ops/s
# Warmup Iteration   9: 14728061.801 ops/s
# Warmup Iteration  10: 14701512.821 ops/s
# Warmup Iteration  11: 14683183.548 ops/s
# Warmup Iteration  12: 14647662.922 ops/s
# Warmup Iteration  13: 14623284.014 ops/s
# Warmup Iteration  14: 14694207.282 ops/s
# Warmup Iteration  15: 14572254.471 ops/s
# Warmup Iteration  16: 14620507.707 ops/s
# Warmup Iteration  17: 14685092.859 ops/s
# Warmup Iteration  18: 14719327.200 ops/s
# Warmup Iteration  19: 14686805.723 ops/s
# Warmup Iteration  20: 14681837.232 ops/s
# Warmup Iteration  21: 14665492.763 ops/s
# Warmup Iteration  22: 14665366.526 ops/s
# Warmup Iteration  23: 14694911.778 ops/s
# Warmup Iteration  24: 14703233.187 ops/s
# Warmup Iteration  25: 14701765.811 ops/s
# Warmup Iteration  26: 14724230.881 ops/s
# Warmup Iteration  27: 14698693.701 ops/s
# Warmup Iteration  28: 14596482.768 ops/s
# Warmup Iteration  29: 14639950.871 ops/s
# Warmup Iteration  30: 14717006.543 ops/s
Iteration   1: 14621583.980 ops/s
Iteration   2: 14735941.778 ops/s
Iteration   3: 14732414.910 ops/s
Iteration   4: 14741521.795 ops/s
Iteration   5: 14687650.799 ops/s
Iteration   6: 14683939.741 ops/s
Iteration   7: 14759867.812 ops/s
Iteration   8: 14628567.706 ops/s
Iteration   9: 14707979.241 ops/s
Iteration  10: 14655081.298 ops/s
Iteration  11: 14680522.241 ops/s
Iteration  12: 14555543.517 ops/s
Iteration  13: 14570477.326 ops/s
Iteration  14: 14723891.847 ops/s
Iteration  15: 14699966.474 ops/s
Iteration  16: 14661949.553 ops/s
Iteration  17: 14692500.497 ops/s
Iteration  18: 14771798.782 ops/s
Iteration  19: 14671472.579 ops/s
Iteration  20: 14717539.602 ops/s
Iteration  21: 14674908.589 ops/s
Iteration  22: 14759000.698 ops/s
Iteration  23: 14724726.553 ops/s
Iteration  24: 14719327.586 ops/s
Iteration  25: 14720386.217 ops/s
Iteration  26: 14717873.359 ops/s
Iteration  27: 14763883.551 ops/s
Iteration  28: 14575787.413 ops/s
Iteration  29: 14528417.949 ops/s
Iteration  30: 14521982.709 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  14680216.870 ±(99.9%) 46833.471 ops/s [Average]
  (min, avg, max) = (14521982.709, 14680216.870, 14771798.782), stdev = 70098.140
  CI (99.9%): [14633383.399, 14727050.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  14680216.870 ± 46833.471  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5363679.554 ops/s
# Warmup Iteration   2: 17059472.777 ops/s
# Warmup Iteration   3: 15030859.293 ops/s
# Warmup Iteration   4: 17773190.309 ops/s
# Warmup Iteration   5: 17725570.987 ops/s
# Warmup Iteration   6: 17678517.135 ops/s
# Warmup Iteration   7: 17607274.668 ops/s
# Warmup Iteration   8: 17704688.459 ops/s
# Warmup Iteration   9: 17712723.669 ops/s
# Warmup Iteration  10: 17664691.816 ops/s
# Warmup Iteration  11: 17687060.271 ops/s
# Warmup Iteration  12: 17706917.129 ops/s
# Warmup Iteration  13: 17527812.265 ops/s
# Warmup Iteration  14: 17626911.358 ops/s
# Warmup Iteration  15: 17702401.487 ops/s
# Warmup Iteration  16: 17603686.378 ops/s
# Warmup Iteration  17: 17669786.357 ops/s
# Warmup Iteration  18: 17615649.054 ops/s
# Warmup Iteration  19: 17552118.256 ops/s
# Warmup Iteration  20: 17474048.014 ops/s
# Warmup Iteration  21: 17348944.613 ops/s
# Warmup Iteration  22: 17537329.871 ops/s
# Warmup Iteration  23: 17648362.937 ops/s
# Warmup Iteration  24: 17714642.265 ops/s
# Warmup Iteration  25: 17669875.720 ops/s
# Warmup Iteration  26: 17515836.203 ops/s
# Warmup Iteration  27: 17613221.704 ops/s
# Warmup Iteration  28: 17681063.999 ops/s
# Warmup Iteration  29: 17451282.539 ops/s
# Warmup Iteration  30: 17468193.822 ops/s
Iteration   1: 17498774.217 ops/s
Iteration   2: 17545752.555 ops/s
Iteration   3: 17692377.017 ops/s
Iteration   4: 17532336.352 ops/s
Iteration   5: 17804771.157 ops/s
Iteration   6: 17457308.117 ops/s
Iteration   7: 17571892.586 ops/s
Iteration   8: 17554814.534 ops/s
Iteration   9: 17612896.381 ops/s
Iteration  10: 17585804.107 ops/s
Iteration  11: 17472288.402 ops/s
Iteration  12: 17451817.021 ops/s
Iteration  13: 17482748.124 ops/s
Iteration  14: 17423397.727 ops/s
Iteration  15: 17587249.834 ops/s
Iteration  16: 17656850.159 ops/s
Iteration  17: 17657487.310 ops/s
Iteration  18: 17730271.499 ops/s
Iteration  19: 17713224.501 ops/s
Iteration  20: 17675845.188 ops/s
Iteration  21: 17706618.018 ops/s
Iteration  22: 17656775.156 ops/s
Iteration  23: 17724970.738 ops/s
Iteration  24: 17605076.685 ops/s
Iteration  25: 17426888.032 ops/s
Iteration  26: 17379725.790 ops/s
Iteration  27: 17453870.262 ops/s
Iteration  28: 17503808.286 ops/s
Iteration  29: 17419056.073 ops/s
Iteration  30: 17441120.882 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  17567527.224 ±(99.9%) 76772.210 ops/s [Average]
  (min, avg, max) = (17379725.790, 17567527.224, 17804771.157), stdev = 114909.038
  CI (99.9%): [17490755.014, 17644299.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  17567527.224 ± 76772.210  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6222998.482 ops/s
# Warmup Iteration   2: 14749787.758 ops/s
# Warmup Iteration   3: 12390844.230 ops/s
# Warmup Iteration   4: 14854653.851 ops/s
# Warmup Iteration   5: 14755718.280 ops/s
# Warmup Iteration   6: 14835163.266 ops/s
# Warmup Iteration   7: 14730625.444 ops/s
# Warmup Iteration   8: 14796397.565 ops/s
# Warmup Iteration   9: 14820360.200 ops/s
# Warmup Iteration  10: 14852570.669 ops/s
# Warmup Iteration  11: 14785953.951 ops/s
# Warmup Iteration  12: 14848674.611 ops/s
# Warmup Iteration  13: 14851155.189 ops/s
# Warmup Iteration  14: 14702361.104 ops/s
# Warmup Iteration  15: 14801072.107 ops/s
# Warmup Iteration  16: 14713959.639 ops/s
# Warmup Iteration  17: 14848361.809 ops/s
# Warmup Iteration  18: 14827671.452 ops/s
# Warmup Iteration  19: 14830469.343 ops/s
# Warmup Iteration  20: 14870514.282 ops/s
# Warmup Iteration  21: 14833580.938 ops/s
# Warmup Iteration  22: 14895025.398 ops/s
# Warmup Iteration  23: 14813871.018 ops/s
# Warmup Iteration  24: 14859237.663 ops/s
# Warmup Iteration  25: 14803091.982 ops/s
# Warmup Iteration  26: 14831097.252 ops/s
# Warmup Iteration  27: 14832513.343 ops/s
# Warmup Iteration  28: 14722375.895 ops/s
# Warmup Iteration  29: 14811276.592 ops/s
# Warmup Iteration  30: 14830987.138 ops/s
Iteration   1: 14851697.985 ops/s
Iteration   2: 14910309.475 ops/s
Iteration   3: 14866375.459 ops/s
Iteration   4: 14836491.253 ops/s
Iteration   5: 14762821.550 ops/s
Iteration   6: 14789077.803 ops/s
Iteration   7: 14807537.028 ops/s
Iteration   8: 14875623.267 ops/s
Iteration   9: 14898194.531 ops/s
Iteration  10: 14840013.652 ops/s
Iteration  11: 14872564.370 ops/s
Iteration  12: 14740445.601 ops/s
Iteration  13: 14751502.551 ops/s
Iteration  14: 14803419.034 ops/s
Iteration  15: 14745365.444 ops/s
Iteration  16: 14808959.063 ops/s
Iteration  17: 14887890.233 ops/s
Iteration  18: 14912365.006 ops/s
Iteration  19: 14797439.460 ops/s
Iteration  20: 14801980.217 ops/s
Iteration  21: 14864411.637 ops/s
Iteration  22: 14811044.908 ops/s
Iteration  23: 14767023.592 ops/s
Iteration  24: 14860912.895 ops/s
Iteration  25: 14734976.008 ops/s
Iteration  26: 14758567.009 ops/s
Iteration  27: 14773668.269 ops/s
Iteration  28: 14881536.831 ops/s
Iteration  29: 14841517.832 ops/s
Iteration  30: 14868881.987 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  14824087.132 ±(99.9%) 36196.248 ops/s [Average]
  (min, avg, max) = (14734976.008, 14824087.132, 14912365.006), stdev = 54176.844
  CI (99.9%): [14787890.884, 14860283.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  14824087.132 ± 36196.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6465201.103 ops/s
# Warmup Iteration   2: 14798809.469 ops/s
# Warmup Iteration   3: 12406116.005 ops/s
# Warmup Iteration   4: 14838728.941 ops/s
# Warmup Iteration   5: 14931776.895 ops/s
# Warmup Iteration   6: 14875170.544 ops/s
# Warmup Iteration   7: 14922203.746 ops/s
# Warmup Iteration   8: 14881859.291 ops/s
# Warmup Iteration   9: 14904767.967 ops/s
# Warmup Iteration  10: 14890021.390 ops/s
# Warmup Iteration  11: 14921744.671 ops/s
# Warmup Iteration  12: 14824401.394 ops/s
# Warmup Iteration  13: 14774490.391 ops/s
# Warmup Iteration  14: 14858301.521 ops/s
# Warmup Iteration  15: 14878802.439 ops/s
# Warmup Iteration  16: 14843383.525 ops/s
# Warmup Iteration  17: 14923293.138 ops/s
# Warmup Iteration  18: 14878403.053 ops/s
# Warmup Iteration  19: 14960806.829 ops/s
# Warmup Iteration  20: 14982037.465 ops/s
# Warmup Iteration  21: 14990695.798 ops/s
# Warmup Iteration  22: 14949702.110 ops/s
# Warmup Iteration  23: 14977625.454 ops/s
# Warmup Iteration  24: 14987757.453 ops/s
# Warmup Iteration  25: 14936715.466 ops/s
# Warmup Iteration  26: 14966524.050 ops/s
# Warmup Iteration  27: 14951398.523 ops/s
# Warmup Iteration  28: 14887122.791 ops/s
# Warmup Iteration  29: 14957709.518 ops/s
# Warmup Iteration  30: 14939220.180 ops/s
Iteration   1: 14888618.780 ops/s
Iteration   2: 14985795.702 ops/s
Iteration   3: 15024295.692 ops/s
Iteration   4: 14987613.687 ops/s
Iteration   5: 14971733.371 ops/s
Iteration   6: 15062485.545 ops/s
Iteration   7: 14903056.775 ops/s
Iteration   8: 14957079.776 ops/s
Iteration   9: 14927285.628 ops/s
Iteration  10: 14967225.597 ops/s
Iteration  11: 14960350.275 ops/s
Iteration  12: 14946423.926 ops/s
Iteration  13: 14923982.731 ops/s
Iteration  14: 14891537.225 ops/s
Iteration  15: 14943752.539 ops/s
Iteration  16: 14935943.030 ops/s
Iteration  17: 15013943.897 ops/s
Iteration  18: 14942194.770 ops/s
Iteration  19: 14944295.528 ops/s
Iteration  20: 14952310.023 ops/s
Iteration  21: 14884932.371 ops/s
Iteration  22: 14971509.662 ops/s
Iteration  23: 14901994.911 ops/s
Iteration  24: 14790196.128 ops/s
Iteration  25: 14858088.340 ops/s
Iteration  26: 14946995.858 ops/s
Iteration  27: 14935157.887 ops/s
Iteration  28: 15035707.952 ops/s
Iteration  29: 14869969.901 ops/s
Iteration  30: 14852869.854 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  14939244.912 ±(99.9%) 38787.957 ops/s [Average]
  (min, avg, max) = (14790196.128, 14939244.912, 15062485.545), stdev = 58055.992
  CI (99.9%): [14900456.955, 14978032.869] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  14939244.912 ± 38787.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6313421.645 ops/s
# Warmup Iteration   2: 14733882.447 ops/s
# Warmup Iteration   3: 12109352.208 ops/s
# Warmup Iteration   4: 14417716.426 ops/s
# Warmup Iteration   5: 14464626.031 ops/s
# Warmup Iteration   6: 14461666.138 ops/s
# Warmup Iteration   7: 14419638.584 ops/s
# Warmup Iteration   8: 14374345.028 ops/s
# Warmup Iteration   9: 14479914.391 ops/s
# Warmup Iteration  10: 14523932.501 ops/s
# Warmup Iteration  11: 14486517.858 ops/s
# Warmup Iteration  12: 14528272.662 ops/s
# Warmup Iteration  13: 14400098.290 ops/s
# Warmup Iteration  14: 14416472.172 ops/s
# Warmup Iteration  15: 14389187.652 ops/s
# Warmup Iteration  16: 14414600.848 ops/s
# Warmup Iteration  17: 14437566.944 ops/s
# Warmup Iteration  18: 14454078.093 ops/s
# Warmup Iteration  19: 14481327.193 ops/s
# Warmup Iteration  20: 14516564.384 ops/s
# Warmup Iteration  21: 14443267.988 ops/s
# Warmup Iteration  22: 14547453.076 ops/s
# Warmup Iteration  23: 14466478.534 ops/s
# Warmup Iteration  24: 14505137.413 ops/s
# Warmup Iteration  25: 14496550.049 ops/s
# Warmup Iteration  26: 14434822.969 ops/s
# Warmup Iteration  27: 14416720.711 ops/s
# Warmup Iteration  28: 14459631.493 ops/s
# Warmup Iteration  29: 14453314.669 ops/s
# Warmup Iteration  30: 14487603.453 ops/s
Iteration   1: 14380742.858 ops/s
Iteration   2: 14421194.068 ops/s
Iteration   3: 14451210.933 ops/s
Iteration   4: 14480107.795 ops/s
Iteration   5: 14463880.624 ops/s
Iteration   6: 14421286.622 ops/s
Iteration   7: 14476118.586 ops/s
Iteration   8: 14531793.723 ops/s
Iteration   9: 14544971.327 ops/s
Iteration  10: 14519318.513 ops/s
Iteration  11: 14538618.537 ops/s
Iteration  12: 14533860.129 ops/s
Iteration  13: 14522774.327 ops/s
Iteration  14: 14523544.800 ops/s
Iteration  15: 14567732.301 ops/s
Iteration  16: 14442064.958 ops/s
Iteration  17: 14466210.544 ops/s
Iteration  18: 14275577.194 ops/s
Iteration  19: 14478404.822 ops/s
Iteration  20: 14413270.878 ops/s
Iteration  21: 14486485.404 ops/s
Iteration  22: 14513912.905 ops/s
Iteration  23: 14389227.455 ops/s
Iteration  24: 14341833.605 ops/s
Iteration  25: 14324227.312 ops/s
Iteration  26: 14421614.654 ops/s
Iteration  27: 14385277.133 ops/s
Iteration  28: 14489698.895 ops/s
Iteration  29: 14377306.888 ops/s
Iteration  30: 14399902.264 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  14452739.002 ±(99.9%) 48349.375 ops/s [Average]
  (min, avg, max) = (14275577.194, 14452739.002, 14567732.301), stdev = 72367.074
  CI (99.9%): [14404389.627, 14501088.377] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  14452739.002 ± 48349.375  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4460895.321 ops/s
# Warmup Iteration   2: 12487947.001 ops/s
# Warmup Iteration   3: 11041836.180 ops/s
# Warmup Iteration   4: 11361158.835 ops/s
# Warmup Iteration   5: 12337954.279 ops/s
# Warmup Iteration   6: 12376358.270 ops/s
# Warmup Iteration   7: 12316459.436 ops/s
# Warmup Iteration   8: 12304068.155 ops/s
# Warmup Iteration   9: 12275938.420 ops/s
# Warmup Iteration  10: 12371793.625 ops/s
# Warmup Iteration  11: 12307332.030 ops/s
# Warmup Iteration  12: 12336850.709 ops/s
# Warmup Iteration  13: 12294154.101 ops/s
# Warmup Iteration  14: 12330045.323 ops/s
# Warmup Iteration  15: 12366932.507 ops/s
# Warmup Iteration  16: 12397417.686 ops/s
# Warmup Iteration  17: 12337305.703 ops/s
# Warmup Iteration  18: 12284104.437 ops/s
# Warmup Iteration  19: 12273599.056 ops/s
# Warmup Iteration  20: 12316343.607 ops/s
# Warmup Iteration  21: 12250393.868 ops/s
# Warmup Iteration  22: 12287766.944 ops/s
# Warmup Iteration  23: 12278759.459 ops/s
# Warmup Iteration  24: 12310550.148 ops/s
# Warmup Iteration  25: 12313312.448 ops/s
# Warmup Iteration  26: 12274248.285 ops/s
# Warmup Iteration  27: 12203228.279 ops/s
# Warmup Iteration  28: 12259755.539 ops/s
# Warmup Iteration  29: 12246306.356 ops/s
# Warmup Iteration  30: 12298463.468 ops/s
Iteration   1: 12224751.044 ops/s
Iteration   2: 12294994.443 ops/s
Iteration   3: 12376570.938 ops/s
Iteration   4: 12296416.579 ops/s
Iteration   5: 12323576.648 ops/s
Iteration   6: 12299062.385 ops/s
Iteration   7: 12286091.047 ops/s
Iteration   8: 12240761.520 ops/s
Iteration   9: 12376709.671 ops/s
Iteration  10: 12348201.479 ops/s
Iteration  11: 12245286.943 ops/s
Iteration  12: 12201787.101 ops/s
Iteration  13: 12243123.143 ops/s
Iteration  14: 12306656.975 ops/s
Iteration  15: 12334772.042 ops/s
Iteration  16: 12285104.835 ops/s
Iteration  17: 12296076.292 ops/s
Iteration  18: 12341136.775 ops/s
Iteration  19: 12284421.807 ops/s
Iteration  20: 12306861.468 ops/s
Iteration  21: 12257363.552 ops/s
Iteration  22: 12207685.654 ops/s
Iteration  23: 12277447.209 ops/s
Iteration  24: 12259748.582 ops/s
Iteration  25: 12308770.335 ops/s
Iteration  26: 12305868.202 ops/s
Iteration  27: 12298424.021 ops/s
Iteration  28: 12309394.218 ops/s
Iteration  29: 12353719.854 ops/s
Iteration  30: 12273630.687 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  12292147.182 ±(99.9%) 29822.030 ops/s [Average]
  (min, avg, max) = (12201787.101, 12292147.182, 12376709.671), stdev = 44636.214
  CI (99.9%): [12262325.152, 12321969.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  12292147.182 ± 29822.030  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3052541.584 ops/s
# Warmup Iteration   2: 7845639.668 ops/s
# Warmup Iteration   3: 7730635.628 ops/s
# Warmup Iteration   4: 6258615.104 ops/s
# Warmup Iteration   5: 7755958.747 ops/s
# Warmup Iteration   6: 7740645.665 ops/s
# Warmup Iteration   7: 7775269.425 ops/s
# Warmup Iteration   8: 7764298.828 ops/s
# Warmup Iteration   9: 7732878.096 ops/s
# Warmup Iteration  10: 7789396.974 ops/s
# Warmup Iteration  11: 7712377.461 ops/s
# Warmup Iteration  12: 7724942.631 ops/s
# Warmup Iteration  13: 7744669.039 ops/s
# Warmup Iteration  14: 7787657.865 ops/s
# Warmup Iteration  15: 7810112.644 ops/s
# Warmup Iteration  16: 7762053.751 ops/s
# Warmup Iteration  17: 7784568.414 ops/s
# Warmup Iteration  18: 7701019.708 ops/s
# Warmup Iteration  19: 7721501.176 ops/s
# Warmup Iteration  20: 7755476.456 ops/s
# Warmup Iteration  21: 7769585.661 ops/s
# Warmup Iteration  22: 7770424.872 ops/s
# Warmup Iteration  23: 7737579.848 ops/s
# Warmup Iteration  24: 7711984.116 ops/s
# Warmup Iteration  25: 7707975.263 ops/s
# Warmup Iteration  26: 7747789.510 ops/s
# Warmup Iteration  27: 7701637.687 ops/s
# Warmup Iteration  28: 7729549.867 ops/s
# Warmup Iteration  29: 7736201.580 ops/s
# Warmup Iteration  30: 7761138.361 ops/s
Iteration   1: 7805904.729 ops/s
Iteration   2: 7738758.557 ops/s
Iteration   3: 7770098.828 ops/s
Iteration   4: 7735424.496 ops/s
Iteration   5: 7754987.072 ops/s
Iteration   6: 7762795.206 ops/s
Iteration   7: 7747680.868 ops/s
Iteration   8: 7738883.792 ops/s
Iteration   9: 7778454.170 ops/s
Iteration  10: 7770735.990 ops/s
Iteration  11: 7792503.878 ops/s
Iteration  12: 7782264.788 ops/s
Iteration  13: 7772285.188 ops/s
Iteration  14: 7769459.202 ops/s
Iteration  15: 7783860.125 ops/s
Iteration  16: 7797221.351 ops/s
Iteration  17: 7756461.731 ops/s
Iteration  18: 7762193.253 ops/s
Iteration  19: 7755150.774 ops/s
Iteration  20: 7704984.022 ops/s
Iteration  21: 7728764.530 ops/s
Iteration  22: 7761939.402 ops/s
Iteration  23: 7714048.062 ops/s
Iteration  24: 7727185.609 ops/s
Iteration  25: 7732231.838 ops/s
Iteration  26: 7771478.893 ops/s
Iteration  27: 7743133.142 ops/s
Iteration  28: 7760744.318 ops/s
Iteration  29: 7733625.423 ops/s
Iteration  30: 7765050.372 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds":
  7757276.987 ±(99.9%) 16185.718 ops/s [Average]
  (min, avg, max) = (7704984.022, 7757276.987, 7805904.729), stdev = 24226.023
  CI (99.9%): [7741091.269, 7773462.705] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_corresponds  thrpt   30  7757276.987 ± 16185.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13864952.421 ops/s
# Warmup Iteration   2: 32391147.337 ops/s
# Warmup Iteration   3: 28227750.794 ops/s
# Warmup Iteration   4: 33889007.264 ops/s
# Warmup Iteration   5: 33780172.900 ops/s
# Warmup Iteration   6: 33574724.862 ops/s
# Warmup Iteration   7: 33643476.956 ops/s
# Warmup Iteration   8: 33647604.914 ops/s
# Warmup Iteration   9: 33792847.677 ops/s
# Warmup Iteration  10: 33563933.770 ops/s
# Warmup Iteration  11: 33710586.957 ops/s
# Warmup Iteration  12: 33835944.230 ops/s
# Warmup Iteration  13: 33845318.102 ops/s
# Warmup Iteration  14: 33699239.494 ops/s
# Warmup Iteration  15: 33914262.174 ops/s
# Warmup Iteration  16: 33609338.468 ops/s
# Warmup Iteration  17: 33743939.518 ops/s
# Warmup Iteration  18: 33739534.347 ops/s
# Warmup Iteration  19: 33765446.887 ops/s
# Warmup Iteration  20: 33748452.723 ops/s
# Warmup Iteration  21: 33846919.466 ops/s
# Warmup Iteration  22: 33775102.091 ops/s
# Warmup Iteration  23: 33552408.618 ops/s
# Warmup Iteration  24: 33762826.081 ops/s
# Warmup Iteration  25: 33411905.556 ops/s
# Warmup Iteration  26: 33239850.004 ops/s
# Warmup Iteration  27: 33568397.762 ops/s
# Warmup Iteration  28: 33514341.257 ops/s
# Warmup Iteration  29: 33701896.361 ops/s
# Warmup Iteration  30: 33547218.767 ops/s
Iteration   1: 33628611.249 ops/s
Iteration   2: 33868469.326 ops/s
Iteration   3: 33920184.450 ops/s
Iteration   4: 33688670.150 ops/s
Iteration   5: 33426679.127 ops/s
Iteration   6: 33708958.984 ops/s
Iteration   7: 33792944.576 ops/s
Iteration   8: 33600568.970 ops/s
Iteration   9: 33508754.615 ops/s
Iteration  10: 33691325.532 ops/s
Iteration  11: 33719666.996 ops/s
Iteration  12: 33649717.103 ops/s
Iteration  13: 33609617.454 ops/s
Iteration  14: 33528981.967 ops/s
Iteration  15: 33407864.353 ops/s
Iteration  16: 33521751.982 ops/s
Iteration  17: 33833714.237 ops/s
Iteration  18: 33654842.706 ops/s
Iteration  19: 33692419.698 ops/s
Iteration  20: 33363170.922 ops/s
Iteration  21: 33655299.989 ops/s
Iteration  22: 33845433.804 ops/s
Iteration  23: 33801794.000 ops/s
Iteration  24: 33832805.618 ops/s
Iteration  25: 33739444.491 ops/s
Iteration  26: 33945952.512 ops/s
Iteration  27: 33572391.146 ops/s
Iteration  28: 33854654.228 ops/s
Iteration  29: 33688629.847 ops/s
Iteration  30: 33741268.893 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex":
  33683152.964 ±(99.9%) 99997.149 ops/s [Average]
  (min, avg, max) = (33363170.922, 33683152.964, 33945952.512), stdev = 149671.037
  CI (99.9%): [33583155.815, 33783150.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectIndex  thrpt   30  33683152.964 ± 99997.149  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13722095.415 ops/s
# Warmup Iteration   2: 30751710.335 ops/s
# Warmup Iteration   3: 25372396.706 ops/s
# Warmup Iteration   4: 29562589.215 ops/s
# Warmup Iteration   5: 29657424.844 ops/s
# Warmup Iteration   6: 29503289.090 ops/s
# Warmup Iteration   7: 29562798.193 ops/s
# Warmup Iteration   8: 29581336.205 ops/s
# Warmup Iteration   9: 29589867.215 ops/s
# Warmup Iteration  10: 29347169.437 ops/s
# Warmup Iteration  11: 29546538.716 ops/s
# Warmup Iteration  12: 29628969.761 ops/s
# Warmup Iteration  13: 29544134.877 ops/s
# Warmup Iteration  14: 29743335.500 ops/s
# Warmup Iteration  15: 29523955.039 ops/s
# Warmup Iteration  16: 29585107.553 ops/s
# Warmup Iteration  17: 30133990.050 ops/s
# Warmup Iteration  18: 30095486.859 ops/s
# Warmup Iteration  19: 30076721.840 ops/s
# Warmup Iteration  20: 30008970.266 ops/s
# Warmup Iteration  21: 30101905.168 ops/s
# Warmup Iteration  22: 30229141.323 ops/s
# Warmup Iteration  23: 30101786.594 ops/s
# Warmup Iteration  24: 30226441.352 ops/s
# Warmup Iteration  25: 30222524.596 ops/s
# Warmup Iteration  26: 30375343.085 ops/s
# Warmup Iteration  27: 30089440.352 ops/s
# Warmup Iteration  28: 30275855.313 ops/s
# Warmup Iteration  29: 30172623.504 ops/s
# Warmup Iteration  30: 30316619.492 ops/s
Iteration   1: 30318473.232 ops/s
Iteration   2: 30183855.757 ops/s
Iteration   3: 30271663.688 ops/s
Iteration   4: 30233474.775 ops/s
Iteration   5: 30145176.419 ops/s
Iteration   6: 30312141.276 ops/s
Iteration   7: 30248119.573 ops/s
Iteration   8: 30067304.164 ops/s
Iteration   9: 30263888.228 ops/s
Iteration  10: 30421522.010 ops/s
Iteration  11: 30240501.777 ops/s
Iteration  12: 30057005.540 ops/s
Iteration  13: 30121778.555 ops/s
Iteration  14: 30083835.611 ops/s
Iteration  15: 30157746.822 ops/s
Iteration  16: 30157360.693 ops/s
Iteration  17: 30134097.298 ops/s
Iteration  18: 30027987.774 ops/s
Iteration  19: 30081403.033 ops/s
Iteration  20: 29955503.644 ops/s
Iteration  21: 29886939.252 ops/s
Iteration  22: 30180526.115 ops/s
Iteration  23: 30268552.094 ops/s
Iteration  24: 30181391.855 ops/s
Iteration  25: 30324590.204 ops/s
Iteration  26: 29747976.654 ops/s
Iteration  27: 30204063.259 ops/s
Iteration  28: 30260155.696 ops/s
Iteration  29: 29921637.725 ops/s
Iteration  30: 29964053.107 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex":
  30147424.194 ±(99.9%) 99208.582 ops/s [Average]
  (min, avg, max) = (29747976.654, 30147424.194, 30421522.010), stdev = 148490.746
  CI (99.9%): [30048215.613, 30246632.776] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_detectLastIndex  thrpt   30  30147424.194 ± 99208.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1862785.472 ops/s
# Warmup Iteration   2: 5131703.257 ops/s
# Warmup Iteration   3: 5360636.588 ops/s
# Warmup Iteration   4: 4374624.410 ops/s
# Warmup Iteration   5: 5337542.517 ops/s
# Warmup Iteration   6: 5346557.791 ops/s
# Warmup Iteration   7: 5340801.001 ops/s
# Warmup Iteration   8: 5331482.271 ops/s
# Warmup Iteration   9: 5338888.617 ops/s
# Warmup Iteration  10: 5324993.613 ops/s
# Warmup Iteration  11: 5339300.943 ops/s
# Warmup Iteration  12: 5326542.303 ops/s
# Warmup Iteration  13: 5336349.450 ops/s
# Warmup Iteration  14: 5359778.443 ops/s
# Warmup Iteration  15: 5356395.596 ops/s
# Warmup Iteration  16: 5321733.016 ops/s
# Warmup Iteration  17: 5357624.420 ops/s
# Warmup Iteration  18: 5355664.247 ops/s
# Warmup Iteration  19: 5335765.980 ops/s
# Warmup Iteration  20: 5343626.748 ops/s
# Warmup Iteration  21: 5320102.951 ops/s
# Warmup Iteration  22: 5323224.098 ops/s
# Warmup Iteration  23: 5332181.279 ops/s
# Warmup Iteration  24: 5347774.744 ops/s
# Warmup Iteration  25: 5328967.700 ops/s
# Warmup Iteration  26: 5324140.368 ops/s
# Warmup Iteration  27: 5335720.852 ops/s
# Warmup Iteration  28: 5331851.861 ops/s
# Warmup Iteration  29: 5352897.918 ops/s
# Warmup Iteration  30: 5374969.605 ops/s
Iteration   1: 5328866.326 ops/s
Iteration   2: 5367437.304 ops/s
Iteration   3: 5352751.488 ops/s
Iteration   4: 5398268.682 ops/s
Iteration   5: 5375029.715 ops/s
Iteration   6: 5359150.072 ops/s
Iteration   7: 5340473.304 ops/s
Iteration   8: 5332427.672 ops/s
Iteration   9: 5364490.655 ops/s
Iteration  10: 5374534.061 ops/s
Iteration  11: 5341611.150 ops/s
Iteration  12: 5380695.862 ops/s
Iteration  13: 5369439.688 ops/s
Iteration  14: 5349585.824 ops/s
Iteration  15: 5352744.414 ops/s
Iteration  16: 5358704.025 ops/s
Iteration  17: 5347997.819 ops/s
Iteration  18: 5332027.176 ops/s
Iteration  19: 5363452.505 ops/s
Iteration  20: 5332377.419 ops/s
Iteration  21: 5358674.001 ops/s
Iteration  22: 5366794.784 ops/s
Iteration  23: 5325028.515 ops/s
Iteration  24: 5333874.563 ops/s
Iteration  25: 5380891.219 ops/s
Iteration  26: 5321300.361 ops/s
Iteration  27: 5341865.514 ops/s
Iteration  28: 5331258.187 ops/s
Iteration  29: 5296003.913 ops/s
Iteration  30: 5356024.388 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  5351126.020 ±(99.9%) 14496.248 ops/s [Average]
  (min, avg, max) = (5296003.913, 5351126.020, 5398268.682), stdev = 21697.303
  CI (99.9%): [5336629.773, 5365622.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  5351126.020 ± 14496.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4717325.090 ops/s
# Warmup Iteration   2: 11791734.817 ops/s
# Warmup Iteration   3: 9846891.793 ops/s
# Warmup Iteration   4: 11801341.309 ops/s
# Warmup Iteration   5: 11859629.553 ops/s
# Warmup Iteration   6: 11800046.846 ops/s
# Warmup Iteration   7: 11825457.426 ops/s
# Warmup Iteration   8: 11768463.980 ops/s
# Warmup Iteration   9: 11666808.222 ops/s
# Warmup Iteration  10: 11735456.974 ops/s
# Warmup Iteration  11: 11812063.636 ops/s
# Warmup Iteration  12: 11824314.997 ops/s
# Warmup Iteration  13: 11805479.430 ops/s
# Warmup Iteration  14: 11680797.271 ops/s
# Warmup Iteration  15: 11764455.837 ops/s
# Warmup Iteration  16: 11800142.714 ops/s
# Warmup Iteration  17: 11865961.775 ops/s
# Warmup Iteration  18: 11853946.567 ops/s
# Warmup Iteration  19: 11858301.353 ops/s
# Warmup Iteration  20: 11867359.000 ops/s
# Warmup Iteration  21: 11894084.579 ops/s
# Warmup Iteration  22: 11833702.687 ops/s
# Warmup Iteration  23: 11807994.745 ops/s
# Warmup Iteration  24: 11746065.354 ops/s
# Warmup Iteration  25: 11856712.033 ops/s
# Warmup Iteration  26: 11820929.742 ops/s
# Warmup Iteration  27: 11847299.677 ops/s
# Warmup Iteration  28: 11838010.442 ops/s
# Warmup Iteration  29: 11824455.871 ops/s
# Warmup Iteration  30: 11870198.176 ops/s
Iteration   1: 11814329.121 ops/s
Iteration   2: 11837840.736 ops/s
Iteration   3: 11803595.062 ops/s
Iteration   4: 11767441.109 ops/s
Iteration   5: 11820914.171 ops/s
Iteration   6: 11741594.303 ops/s
Iteration   7: 11690660.128 ops/s
Iteration   8: 11813296.703 ops/s
Iteration   9: 11878957.691 ops/s
Iteration  10: 11920444.278 ops/s
Iteration  11: 11871183.467 ops/s
Iteration  12: 11903592.676 ops/s
Iteration  13: 11883277.598 ops/s
Iteration  14: 11827523.032 ops/s
Iteration  15: 11821492.067 ops/s
Iteration  16: 11942363.641 ops/s
Iteration  17: 11732365.682 ops/s
Iteration  18: 11722831.943 ops/s
Iteration  19: 11677901.063 ops/s
Iteration  20: 11820844.118 ops/s
Iteration  21: 11757329.865 ops/s
Iteration  22: 11773260.990 ops/s
Iteration  23: 11803729.643 ops/s
Iteration  24: 11802045.438 ops/s
Iteration  25: 11767193.653 ops/s
Iteration  26: 11937608.514 ops/s
Iteration  27: 11821176.194 ops/s
Iteration  28: 11825217.338 ops/s
Iteration  29: 11833682.755 ops/s
Iteration  30: 11789450.979 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  11813438.132 ±(99.9%) 44560.625 ops/s [Average]
  (min, avg, max) = (11677901.063, 11813438.132, 11942363.641), stdev = 66696.251
  CI (99.9%): [11768877.507, 11857998.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  11813438.132 ± 44560.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 690737.490 ops/s
# Warmup Iteration   2: 768509.633 ops/s
# Warmup Iteration   3: 1007484.701 ops/s
# Warmup Iteration   4: 1006114.989 ops/s
# Warmup Iteration   5: 1011173.453 ops/s
# Warmup Iteration   6: 1008935.282 ops/s
# Warmup Iteration   7: 1008747.122 ops/s
# Warmup Iteration   8: 1001182.963 ops/s
# Warmup Iteration   9: 1002398.626 ops/s
# Warmup Iteration  10: 967905.456 ops/s
# Warmup Iteration  11: 873883.961 ops/s
# Warmup Iteration  12: 1000643.276 ops/s
# Warmup Iteration  13: 1004948.491 ops/s
# Warmup Iteration  14: 1002453.993 ops/s
# Warmup Iteration  15: 1002603.088 ops/s
# Warmup Iteration  16: 998154.847 ops/s
# Warmup Iteration  17: 1061716.254 ops/s
# Warmup Iteration  18: 1059370.440 ops/s
# Warmup Iteration  19: 1062920.959 ops/s
# Warmup Iteration  20: 1058925.750 ops/s
# Warmup Iteration  21: 1062100.247 ops/s
# Warmup Iteration  22: 1064684.163 ops/s
# Warmup Iteration  23: 1064503.824 ops/s
# Warmup Iteration  24: 1059092.539 ops/s
# Warmup Iteration  25: 1063622.310 ops/s
# Warmup Iteration  26: 1064829.215 ops/s
# Warmup Iteration  27: 1063760.905 ops/s
# Warmup Iteration  28: 1063503.084 ops/s
# Warmup Iteration  29: 1065440.454 ops/s
# Warmup Iteration  30: 1061262.909 ops/s
Iteration   1: 1061154.042 ops/s
Iteration   2: 1070171.392 ops/s
Iteration   3: 1064266.017 ops/s
Iteration   4: 1068539.149 ops/s
Iteration   5: 1070190.098 ops/s
Iteration   6: 1064608.958 ops/s
Iteration   7: 1062370.230 ops/s
Iteration   8: 1071675.613 ops/s
Iteration   9: 1061693.400 ops/s
Iteration  10: 1059482.373 ops/s
Iteration  11: 1075513.659 ops/s
Iteration  12: 1066861.402 ops/s
Iteration  13: 1058795.855 ops/s
Iteration  14: 1067189.424 ops/s
Iteration  15: 1071969.092 ops/s
Iteration  16: 1067216.394 ops/s
Iteration  17: 1061285.186 ops/s
Iteration  18: 1064642.652 ops/s
Iteration  19: 1068027.981 ops/s
Iteration  20: 1058863.770 ops/s
Iteration  21: 1062471.040 ops/s
Iteration  22: 1066900.443 ops/s
Iteration  23: 1059743.756 ops/s
Iteration  24: 1065097.817 ops/s
Iteration  25: 1066729.316 ops/s
Iteration  26: 1067076.067 ops/s
Iteration  27: 1058212.175 ops/s
Iteration  28: 1070330.993 ops/s
Iteration  29: 1059226.642 ops/s
Iteration  30: 1056440.992 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  1064891.531 ±(99.9%) 3215.518 ops/s [Average]
  (min, avg, max) = (1056440.992, 1064891.531, 1075513.659), stdev = 4812.836
  CI (99.9%): [1061676.013, 1068107.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1064891.531 ± 3215.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 225407.627 ops/s
# Warmup Iteration   2: 243439.220 ops/s
# Warmup Iteration   3: 296575.264 ops/s
# Warmup Iteration   4: 306652.508 ops/s
# Warmup Iteration   5: 309040.158 ops/s
# Warmup Iteration   6: 308084.968 ops/s
# Warmup Iteration   7: 310114.303 ops/s
# Warmup Iteration   8: 307827.817 ops/s
# Warmup Iteration   9: 309632.895 ops/s
# Warmup Iteration  10: 308277.250 ops/s
# Warmup Iteration  11: 309513.305 ops/s
# Warmup Iteration  12: 302367.367 ops/s
# Warmup Iteration  13: 273170.563 ops/s
# Warmup Iteration  14: 309383.110 ops/s
# Warmup Iteration  15: 308723.293 ops/s
# Warmup Iteration  16: 307625.185 ops/s
# Warmup Iteration  17: 327122.467 ops/s
# Warmup Iteration  18: 325682.646 ops/s
# Warmup Iteration  19: 325840.791 ops/s
# Warmup Iteration  20: 326123.131 ops/s
# Warmup Iteration  21: 326537.800 ops/s
# Warmup Iteration  22: 324292.613 ops/s
# Warmup Iteration  23: 325676.784 ops/s
# Warmup Iteration  24: 324936.583 ops/s
# Warmup Iteration  25: 324140.645 ops/s
# Warmup Iteration  26: 324905.429 ops/s
# Warmup Iteration  27: 325594.821 ops/s
# Warmup Iteration  28: 324638.197 ops/s
# Warmup Iteration  29: 324968.823 ops/s
# Warmup Iteration  30: 325032.441 ops/s
Iteration   1: 326392.388 ops/s
Iteration   2: 327198.105 ops/s
Iteration   3: 322470.989 ops/s
Iteration   4: 325671.974 ops/s
Iteration   5: 327007.663 ops/s
Iteration   6: 325058.034 ops/s
Iteration   7: 324897.176 ops/s
Iteration   8: 326974.930 ops/s
Iteration   9: 324901.534 ops/s
Iteration  10: 325552.413 ops/s
Iteration  11: 327375.544 ops/s
Iteration  12: 326222.108 ops/s
Iteration  13: 324669.215 ops/s
Iteration  14: 327137.296 ops/s
Iteration  15: 325871.490 ops/s
Iteration  16: 324249.645 ops/s
Iteration  17: 325198.451 ops/s
Iteration  18: 326437.791 ops/s
Iteration  19: 326044.296 ops/s
Iteration  20: 324927.771 ops/s
Iteration  21: 325473.451 ops/s
Iteration  22: 324302.035 ops/s
Iteration  23: 326103.302 ops/s
Iteration  24: 326698.086 ops/s
Iteration  25: 326423.781 ops/s
Iteration  26: 324760.452 ops/s
Iteration  27: 326253.656 ops/s
Iteration  28: 326791.767 ops/s
Iteration  29: 325446.668 ops/s
Iteration  30: 324232.595 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator":
  325691.487 ±(99.9%) 747.893 ops/s [Average]
  (min, avg, max) = (322470.989, 325691.487, 327375.544), stdev = 1119.411
  CI (99.9%): [324943.594, 326439.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_listIterator  thrpt   30  325691.487 ± 747.893  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12282491.600 ops/s
# Warmup Iteration   2: 21577154.736 ops/s
# Warmup Iteration   3: 24940885.412 ops/s
# Warmup Iteration   4: 24958662.456 ops/s
# Warmup Iteration   5: 24933207.950 ops/s
# Warmup Iteration   6: 24913130.359 ops/s
# Warmup Iteration   7: 24588539.481 ops/s
# Warmup Iteration   8: 24995653.859 ops/s
# Warmup Iteration   9: 24710007.674 ops/s
# Warmup Iteration  10: 24741753.407 ops/s
# Warmup Iteration  11: 24751879.885 ops/s
# Warmup Iteration  12: 24787277.850 ops/s
# Warmup Iteration  13: 24759600.105 ops/s
# Warmup Iteration  14: 24960790.176 ops/s
# Warmup Iteration  15: 24900777.648 ops/s
# Warmup Iteration  16: 24662859.976 ops/s
# Warmup Iteration  17: 25017534.534 ops/s
# Warmup Iteration  18: 24795537.636 ops/s
# Warmup Iteration  19: 24629313.488 ops/s
# Warmup Iteration  20: 24946652.771 ops/s
# Warmup Iteration  21: 24888410.815 ops/s
# Warmup Iteration  22: 24766438.846 ops/s
# Warmup Iteration  23: 24628521.632 ops/s
# Warmup Iteration  24: 24730184.573 ops/s
# Warmup Iteration  25: 24841475.318 ops/s
# Warmup Iteration  26: 24856259.875 ops/s
# Warmup Iteration  27: 24881679.452 ops/s
# Warmup Iteration  28: 24703678.795 ops/s
# Warmup Iteration  29: 24876967.557 ops/s
# Warmup Iteration  30: 25057798.744 ops/s
Iteration   1: 24895531.836 ops/s
Iteration   2: 25148571.597 ops/s
Iteration   3: 25024079.058 ops/s
Iteration   4: 25049763.895 ops/s
Iteration   5: 24960272.624 ops/s
Iteration   6: 25039034.515 ops/s
Iteration   7: 25048329.750 ops/s
Iteration   8: 24916299.477 ops/s
Iteration   9: 24964257.304 ops/s
Iteration  10: 25102152.145 ops/s
Iteration  11: 24994872.198 ops/s
Iteration  12: 24914307.793 ops/s
Iteration  13: 24650718.546 ops/s
Iteration  14: 25047450.489 ops/s
Iteration  15: 24898444.614 ops/s
Iteration  16: 25022818.851 ops/s
Iteration  17: 25073686.974 ops/s
Iteration  18: 24878873.329 ops/s
Iteration  19: 24898107.796 ops/s
Iteration  20: 25058069.874 ops/s
Iteration  21: 25064410.330 ops/s
Iteration  22: 24969595.344 ops/s
Iteration  23: 25150666.962 ops/s
Iteration  24: 25012463.741 ops/s
Iteration  25: 25159580.674 ops/s
Iteration  26: 25175915.917 ops/s
Iteration  27: 24989600.764 ops/s
Iteration  28: 24821387.938 ops/s
Iteration  29: 24912811.569 ops/s
Iteration  30: 24928557.947 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  24992354.462 ±(99.9%) 74832.321 ops/s [Average]
  (min, avg, max) = (24650718.546, 24992354.462, 25175915.917), stdev = 112005.504
  CI (99.9%): [24917522.141, 25067186.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  24992354.462 ± 74832.321  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11548352.557 ops/s
# Warmup Iteration   2: 20728466.154 ops/s
# Warmup Iteration   3: 22945699.991 ops/s
# Warmup Iteration   4: 23448915.457 ops/s
# Warmup Iteration   5: 23342305.515 ops/s
# Warmup Iteration   6: 23578286.745 ops/s
# Warmup Iteration   7: 22985856.922 ops/s
# Warmup Iteration   8: 23135179.281 ops/s
# Warmup Iteration   9: 23330133.240 ops/s
# Warmup Iteration  10: 23487605.105 ops/s
# Warmup Iteration  11: 23403314.696 ops/s
# Warmup Iteration  12: 23280504.445 ops/s
# Warmup Iteration  13: 23306126.481 ops/s
# Warmup Iteration  14: 23501112.138 ops/s
# Warmup Iteration  15: 23266196.582 ops/s
# Warmup Iteration  16: 23278610.986 ops/s
# Warmup Iteration  17: 23554638.931 ops/s
# Warmup Iteration  18: 23258744.481 ops/s
# Warmup Iteration  19: 23401445.703 ops/s
# Warmup Iteration  20: 23363508.018 ops/s
# Warmup Iteration  21: 23017556.362 ops/s
# Warmup Iteration  22: 23292909.239 ops/s
# Warmup Iteration  23: 23594923.786 ops/s
# Warmup Iteration  24: 23287870.556 ops/s
# Warmup Iteration  25: 23432467.540 ops/s
# Warmup Iteration  26: 23314118.919 ops/s
# Warmup Iteration  27: 23277425.116 ops/s
# Warmup Iteration  28: 23191043.976 ops/s
# Warmup Iteration  29: 23466976.972 ops/s
# Warmup Iteration  30: 23120493.268 ops/s
Iteration   1: 23357896.757 ops/s
Iteration   2: 22932677.780 ops/s
Iteration   3: 23195702.490 ops/s
Iteration   4: 23183713.339 ops/s
Iteration   5: 23326229.522 ops/s
Iteration   6: 23430363.709 ops/s
Iteration   7: 23210798.467 ops/s
Iteration   8: 23104228.278 ops/s
Iteration   9: 23115719.050 ops/s
Iteration  10: 23133873.501 ops/s
Iteration  11: 22948201.807 ops/s
Iteration  12: 23096900.238 ops/s
Iteration  13: 23064128.334 ops/s
Iteration  14: 22763975.132 ops/s
Iteration  15: 22832155.078 ops/s
Iteration  16: 23185613.040 ops/s
Iteration  17: 23167720.252 ops/s
Iteration  18: 23168462.586 ops/s
Iteration  19: 23220306.790 ops/s
Iteration  20: 23332351.546 ops/s
Iteration  21: 22841481.443 ops/s
Iteration  22: 23074056.991 ops/s
Iteration  23: 23276914.773 ops/s
Iteration  24: 23177865.680 ops/s
Iteration  25: 23180167.432 ops/s
Iteration  26: 23255140.209 ops/s
Iteration  27: 23136807.175 ops/s
Iteration  28: 23221474.057 ops/s
Iteration  29: 23164539.965 ops/s
Iteration  30: 23265157.075 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partition":
  23145487.417 ±(99.9%) 103769.556 ops/s [Average]
  (min, avg, max) = (22763975.132, 23145487.417, 23430363.709), stdev = 155317.398
  CI (99.9%): [23041717.860, 23249256.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  23145487.417 ± 103769.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10342234.204 ops/s
# Warmup Iteration   2: 18790198.362 ops/s
# Warmup Iteration   3: 20759436.270 ops/s
# Warmup Iteration   4: 21585503.146 ops/s
# Warmup Iteration   5: 21549249.226 ops/s
# Warmup Iteration   6: 21436808.096 ops/s
# Warmup Iteration   7: 21652851.168 ops/s
# Warmup Iteration   8: 21521793.997 ops/s
# Warmup Iteration   9: 21558652.204 ops/s
# Warmup Iteration  10: 21522313.811 ops/s
# Warmup Iteration  11: 21683527.367 ops/s
# Warmup Iteration  12: 21806685.006 ops/s
# Warmup Iteration  13: 21626916.396 ops/s
# Warmup Iteration  14: 21539241.982 ops/s
# Warmup Iteration  15: 21692438.167 ops/s
# Warmup Iteration  16: 21635037.401 ops/s
# Warmup Iteration  17: 21576474.256 ops/s
# Warmup Iteration  18: 21571087.654 ops/s
# Warmup Iteration  19: 21833209.727 ops/s
# Warmup Iteration  20: 21876324.239 ops/s
# Warmup Iteration  21: 21606480.358 ops/s
# Warmup Iteration  22: 21406486.248 ops/s
# Warmup Iteration  23: 21828652.387 ops/s
# Warmup Iteration  24: 21730668.583 ops/s
# Warmup Iteration  25: 21674370.137 ops/s
# Warmup Iteration  26: 21424339.843 ops/s
# Warmup Iteration  27: 21573759.099 ops/s
# Warmup Iteration  28: 21893805.926 ops/s
# Warmup Iteration  29: 21741948.296 ops/s
# Warmup Iteration  30: 21836937.723 ops/s
Iteration   1: 21718574.040 ops/s
Iteration   2: 21705483.905 ops/s
Iteration   3: 21477445.600 ops/s
Iteration   4: 21669480.144 ops/s
Iteration   5: 21720592.704 ops/s
Iteration   6: 21520933.370 ops/s
Iteration   7: 21552742.551 ops/s
Iteration   8: 21876690.376 ops/s
Iteration   9: 21702916.654 ops/s
Iteration  10: 21666291.005 ops/s
Iteration  11: 21298561.079 ops/s
Iteration  12: 21568075.219 ops/s
Iteration  13: 21551946.203 ops/s
Iteration  14: 21589655.385 ops/s
Iteration  15: 21833087.192 ops/s
Iteration  16: 21780052.075 ops/s
Iteration  17: 21906472.048 ops/s
Iteration  18: 21680697.196 ops/s
Iteration  19: 21601807.586 ops/s
Iteration  20: 21786110.323 ops/s
Iteration  21: 21566297.178 ops/s
Iteration  22: 21342076.644 ops/s
Iteration  23: 21619544.029 ops/s
Iteration  24: 21617237.651 ops/s
Iteration  25: 21454681.908 ops/s
Iteration  26: 21770900.041 ops/s
Iteration  27: 21573677.515 ops/s
Iteration  28: 21680157.679 ops/s
Iteration  29: 21720673.683 ops/s
Iteration  30: 21536918.343 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  21636325.978 ±(99.9%) 94523.508 ops/s [Average]
  (min, avg, max) = (21298561.079, 21636325.978, 21906472.048), stdev = 141478.347
  CI (99.9%): [21541802.470, 21730849.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  21636325.978 ± 94523.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5543027.828 ops/s
# Warmup Iteration   2: 18058965.703 ops/s
# Warmup Iteration   3: 15578025.099 ops/s
# Warmup Iteration   4: 18527011.755 ops/s
# Warmup Iteration   5: 18710551.260 ops/s
# Warmup Iteration   6: 18282850.770 ops/s
# Warmup Iteration   7: 18328829.099 ops/s
# Warmup Iteration   8: 18486085.339 ops/s
# Warmup Iteration   9: 18427291.779 ops/s
# Warmup Iteration  10: 18462884.942 ops/s
# Warmup Iteration  11: 18410459.186 ops/s
# Warmup Iteration  12: 18318028.306 ops/s
# Warmup Iteration  13: 18362915.703 ops/s
# Warmup Iteration  14: 18579838.994 ops/s
# Warmup Iteration  15: 18571932.279 ops/s
# Warmup Iteration  16: 18553519.653 ops/s
# Warmup Iteration  17: 18479471.639 ops/s
# Warmup Iteration  18: 18599452.170 ops/s
# Warmup Iteration  19: 18346980.261 ops/s
# Warmup Iteration  20: 18374085.237 ops/s
# Warmup Iteration  21: 18479351.399 ops/s
# Warmup Iteration  22: 18443030.978 ops/s
# Warmup Iteration  23: 18392767.140 ops/s
# Warmup Iteration  24: 18521987.914 ops/s
# Warmup Iteration  25: 18672619.366 ops/s
# Warmup Iteration  26: 18162605.712 ops/s
# Warmup Iteration  27: 18461598.835 ops/s
# Warmup Iteration  28: 18689685.599 ops/s
# Warmup Iteration  29: 18576503.397 ops/s
# Warmup Iteration  30: 18499835.402 ops/s
Iteration   1: 18632998.381 ops/s
Iteration   2: 18483422.984 ops/s
Iteration   3: 18501763.354 ops/s
Iteration   4: 18467365.504 ops/s
Iteration   5: 18398819.210 ops/s
Iteration   6: 18578753.941 ops/s
Iteration   7: 18614884.251 ops/s
Iteration   8: 18633916.505 ops/s
Iteration   9: 18626861.040 ops/s
Iteration  10: 18373072.805 ops/s
Iteration  11: 18382550.312 ops/s
Iteration  12: 18306206.448 ops/s
Iteration  13: 18449436.652 ops/s
Iteration  14: 18335734.242 ops/s
Iteration  15: 18376385.517 ops/s
Iteration  16: 18364230.201 ops/s
Iteration  17: 18558589.855 ops/s
Iteration  18: 18515351.533 ops/s
Iteration  19: 18590967.820 ops/s
Iteration  20: 18637172.603 ops/s
Iteration  21: 18507628.787 ops/s
Iteration  22: 18510052.794 ops/s
Iteration  23: 18419120.298 ops/s
Iteration  24: 18491190.419 ops/s
Iteration  25: 18527579.722 ops/s
Iteration  26: 18363625.521 ops/s
Iteration  27: 18569861.843 ops/s
Iteration  28: 18481040.538 ops/s
Iteration  29: 18635211.130 ops/s
Iteration  30: 18664577.309 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reject":
  18499945.717 ±(99.9%) 70282.442 ops/s [Average]
  (min, avg, max) = (18306206.448, 18499945.717, 18664577.309), stdev = 105195.458
  CI (99.9%): [18429663.275, 18570228.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  18499945.717 ± 70282.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5577909.485 ops/s
# Warmup Iteration   2: 18242816.106 ops/s
# Warmup Iteration   3: 15773532.735 ops/s
# Warmup Iteration   4: 18611541.539 ops/s
# Warmup Iteration   5: 18579572.842 ops/s
# Warmup Iteration   6: 18740046.323 ops/s
# Warmup Iteration   7: 18701884.840 ops/s
# Warmup Iteration   8: 18686864.266 ops/s
# Warmup Iteration   9: 18655840.139 ops/s
# Warmup Iteration  10: 18720155.123 ops/s
# Warmup Iteration  11: 18674735.307 ops/s
# Warmup Iteration  12: 18558521.744 ops/s
# Warmup Iteration  13: 18761648.435 ops/s
# Warmup Iteration  14: 18632865.042 ops/s
# Warmup Iteration  15: 18592103.906 ops/s
# Warmup Iteration  16: 18692536.813 ops/s
# Warmup Iteration  17: 18699615.945 ops/s
# Warmup Iteration  18: 18745826.128 ops/s
# Warmup Iteration  19: 18761531.249 ops/s
# Warmup Iteration  20: 18667514.592 ops/s
# Warmup Iteration  21: 18417079.792 ops/s
# Warmup Iteration  22: 18659923.483 ops/s
# Warmup Iteration  23: 18713546.050 ops/s
# Warmup Iteration  24: 18480976.750 ops/s
# Warmup Iteration  25: 18642109.706 ops/s
# Warmup Iteration  26: 18777016.623 ops/s
# Warmup Iteration  27: 18611740.824 ops/s
# Warmup Iteration  28: 18674611.556 ops/s
# Warmup Iteration  29: 18622792.934 ops/s
# Warmup Iteration  30: 18670622.795 ops/s
Iteration   1: 18737935.916 ops/s
Iteration   2: 18874384.019 ops/s
Iteration   3: 18560831.461 ops/s
Iteration   4: 18722576.841 ops/s
Iteration   5: 18391767.106 ops/s
Iteration   6: 18763121.440 ops/s
Iteration   7: 18670670.134 ops/s
Iteration   8: 18694609.064 ops/s
Iteration   9: 18555277.191 ops/s
Iteration  10: 18506492.248 ops/s
Iteration  11: 18750188.822 ops/s
Iteration  12: 18674626.816 ops/s
Iteration  13: 18533225.568 ops/s
Iteration  14: 18294201.051 ops/s
Iteration  15: 18122795.197 ops/s
Iteration  16: 18337984.070 ops/s
Iteration  17: 18459925.260 ops/s
Iteration  18: 18594671.373 ops/s
Iteration  19: 18512390.968 ops/s
Iteration  20: 18584307.445 ops/s
Iteration  21: 18709407.656 ops/s
Iteration  22: 18418817.205 ops/s
Iteration  23: 18310313.628 ops/s
Iteration  24: 18232523.894 ops/s
Iteration  25: 18567548.433 ops/s
Iteration  26: 18621091.361 ops/s
Iteration  27: 18451495.573 ops/s
Iteration  28: 18579683.113 ops/s
Iteration  29: 18682337.062 ops/s
Iteration  30: 18543847.835 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  18548634.925 ±(99.9%) 115991.295 ops/s [Average]
  (min, avg, max) = (18122795.197, 18548634.925, 18874384.019), stdev = 173610.323
  CI (99.9%): [18432643.630, 18664626.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  18548634.925 ± 115991.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710380.058 ops/s
# Warmup Iteration   2: 768453.920 ops/s
# Warmup Iteration   3: 1017283.066 ops/s
# Warmup Iteration   4: 1013780.462 ops/s
# Warmup Iteration   5: 1012706.523 ops/s
# Warmup Iteration   6: 1017427.058 ops/s
# Warmup Iteration   7: 1009280.429 ops/s
# Warmup Iteration   8: 1011848.667 ops/s
# Warmup Iteration   9: 1013166.636 ops/s
# Warmup Iteration  10: 1016440.925 ops/s
# Warmup Iteration  11: 854193.017 ops/s
# Warmup Iteration  12: 1012940.583 ops/s
# Warmup Iteration  13: 1017932.377 ops/s
# Warmup Iteration  14: 1017131.876 ops/s
# Warmup Iteration  15: 1012781.938 ops/s
# Warmup Iteration  16: 1023838.409 ops/s
# Warmup Iteration  17: 1082869.869 ops/s
# Warmup Iteration  18: 1084353.615 ops/s
# Warmup Iteration  19: 1081575.449 ops/s
# Warmup Iteration  20: 1081739.975 ops/s
# Warmup Iteration  21: 1081915.203 ops/s
# Warmup Iteration  22: 1081964.419 ops/s
# Warmup Iteration  23: 1082894.286 ops/s
# Warmup Iteration  24: 1084236.627 ops/s
# Warmup Iteration  25: 1079270.951 ops/s
# Warmup Iteration  26: 1075664.953 ops/s
# Warmup Iteration  27: 1086319.530 ops/s
# Warmup Iteration  28: 1075294.626 ops/s
# Warmup Iteration  29: 1084187.867 ops/s
# Warmup Iteration  30: 1084437.645 ops/s
Iteration   1: 1084718.408 ops/s
Iteration   2: 1078141.525 ops/s
Iteration   3: 1086204.020 ops/s
Iteration   4: 1077790.033 ops/s
Iteration   5: 1082548.618 ops/s
Iteration   6: 1087363.590 ops/s
Iteration   7: 1078929.701 ops/s
Iteration   8: 1080497.769 ops/s
Iteration   9: 1084870.710 ops/s
Iteration  10: 1072152.775 ops/s
Iteration  11: 1083804.139 ops/s
Iteration  12: 1081824.240 ops/s
Iteration  13: 1081096.865 ops/s
Iteration  14: 1084231.759 ops/s
Iteration  15: 1073797.886 ops/s
Iteration  16: 1088965.885 ops/s
Iteration  17: 1080162.996 ops/s
Iteration  18: 1081068.948 ops/s
Iteration  19: 1080763.283 ops/s
Iteration  20: 1074730.302 ops/s
Iteration  21: 1074115.525 ops/s
Iteration  22: 1079791.892 ops/s
Iteration  23: 1082138.442 ops/s
Iteration  24: 1074135.619 ops/s
Iteration  25: 1071981.862 ops/s
Iteration  26: 1077439.481 ops/s
Iteration  27: 1082946.713 ops/s
Iteration  28: 1089333.781 ops/s
Iteration  29: 1078065.984 ops/s
Iteration  30: 1081656.035 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_remove":
  1080508.959 ±(99.9%) 3140.561 ops/s [Average]
  (min, avg, max) = (1071981.862, 1080508.959, 1089333.781), stdev = 4700.644
  CI (99.9%): [1077368.399, 1083649.520] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  1080508.959 ± 3140.561  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713120.801 ops/s
# Warmup Iteration   2: 768885.730 ops/s
# Warmup Iteration   3: 994858.504 ops/s
# Warmup Iteration   4: 992127.695 ops/s
# Warmup Iteration   5: 991184.325 ops/s
# Warmup Iteration   6: 1000831.194 ops/s
# Warmup Iteration   7: 995246.378 ops/s
# Warmup Iteration   8: 994473.006 ops/s
# Warmup Iteration   9: 994111.767 ops/s
# Warmup Iteration  10: 989314.496 ops/s
# Warmup Iteration  11: 847285.143 ops/s
# Warmup Iteration  12: 999171.842 ops/s
# Warmup Iteration  13: 983632.120 ops/s
# Warmup Iteration  14: 994842.593 ops/s
# Warmup Iteration  15: 993178.972 ops/s
# Warmup Iteration  16: 1000328.064 ops/s
# Warmup Iteration  17: 1063108.892 ops/s
# Warmup Iteration  18: 1062866.296 ops/s
# Warmup Iteration  19: 1058775.920 ops/s
# Warmup Iteration  20: 1058167.481 ops/s
# Warmup Iteration  21: 1055986.061 ops/s
# Warmup Iteration  22: 1062885.706 ops/s
# Warmup Iteration  23: 1060499.505 ops/s
# Warmup Iteration  24: 1065145.520 ops/s
# Warmup Iteration  25: 1065292.623 ops/s
# Warmup Iteration  26: 1062866.258 ops/s
# Warmup Iteration  27: 1064473.175 ops/s
# Warmup Iteration  28: 1062397.281 ops/s
# Warmup Iteration  29: 1059148.245 ops/s
# Warmup Iteration  30: 1062650.439 ops/s
Iteration   1: 1064216.250 ops/s
Iteration   2: 1063689.664 ops/s
Iteration   3: 1065781.634 ops/s
Iteration   4: 1064846.932 ops/s
Iteration   5: 1064154.698 ops/s
Iteration   6: 1060387.953 ops/s
Iteration   7: 1065316.857 ops/s
Iteration   8: 1064862.645 ops/s
Iteration   9: 1067983.258 ops/s
Iteration  10: 1064305.772 ops/s
Iteration  11: 1067078.251 ops/s
Iteration  12: 1054458.414 ops/s
Iteration  13: 1055279.370 ops/s
Iteration  14: 1066398.146 ops/s
Iteration  15: 1056213.304 ops/s
Iteration  16: 1062330.409 ops/s
Iteration  17: 1064806.419 ops/s
Iteration  18: 1063739.363 ops/s
Iteration  19: 1057695.034 ops/s
Iteration  20: 1038773.089 ops/s
Iteration  21: 1060104.138 ops/s
Iteration  22: 1061267.689 ops/s
Iteration  23: 1071604.177 ops/s
Iteration  24: 1062247.167 ops/s
Iteration  25: 1060434.666 ops/s
Iteration  26: 1064921.568 ops/s
Iteration  27: 1057607.481 ops/s
Iteration  28: 1063442.730 ops/s
Iteration  29: 1059876.485 ops/s
Iteration  30: 1058013.525 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  1061727.903 ±(99.9%) 3912.279 ops/s [Average]
  (min, avg, max) = (1038773.089, 1061727.903, 1071604.177), stdev = 5855.716
  CI (99.9%): [1057815.624, 1065640.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  1061727.903 ± 3912.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704592.355 ops/s
# Warmup Iteration   2: 771213.806 ops/s
# Warmup Iteration   3: 1005833.650 ops/s
# Warmup Iteration   4: 1004063.112 ops/s
# Warmup Iteration   5: 1007106.173 ops/s
# Warmup Iteration   6: 1004491.044 ops/s
# Warmup Iteration   7: 1003115.381 ops/s
# Warmup Iteration   8: 999486.611 ops/s
# Warmup Iteration   9: 1006879.830 ops/s
# Warmup Iteration  10: 1010323.451 ops/s
# Warmup Iteration  11: 850196.578 ops/s
# Warmup Iteration  12: 1009255.268 ops/s
# Warmup Iteration  13: 1009367.220 ops/s
# Warmup Iteration  14: 1010551.318 ops/s
# Warmup Iteration  15: 1012083.962 ops/s
# Warmup Iteration  16: 1016320.350 ops/s
# Warmup Iteration  17: 1077840.089 ops/s
# Warmup Iteration  18: 1070576.908 ops/s
# Warmup Iteration  19: 1069683.083 ops/s
# Warmup Iteration  20: 1073699.376 ops/s
# Warmup Iteration  21: 1069716.078 ops/s
# Warmup Iteration  22: 1075106.275 ops/s
# Warmup Iteration  23: 1072497.386 ops/s
# Warmup Iteration  24: 1077425.393 ops/s
# Warmup Iteration  25: 1075835.483 ops/s
# Warmup Iteration  26: 1075686.106 ops/s
# Warmup Iteration  27: 1074818.267 ops/s
# Warmup Iteration  28: 1077691.793 ops/s
# Warmup Iteration  29: 1075310.197 ops/s
# Warmup Iteration  30: 1078994.132 ops/s
Iteration   1: 1074353.426 ops/s
Iteration   2: 1080215.281 ops/s
Iteration   3: 1080252.651 ops/s
Iteration   4: 1078249.585 ops/s
Iteration   5: 1076721.379 ops/s
Iteration   6: 1080500.376 ops/s
Iteration   7: 1069203.918 ops/s
Iteration   8: 1073645.762 ops/s
Iteration   9: 1078561.721 ops/s
Iteration  10: 1077897.498 ops/s
Iteration  11: 1073566.890 ops/s
Iteration  12: 1072898.375 ops/s
Iteration  13: 1076481.341 ops/s
Iteration  14: 1075480.962 ops/s
Iteration  15: 1079914.908 ops/s
Iteration  16: 1078893.031 ops/s
Iteration  17: 1070060.050 ops/s
Iteration  18: 1074903.823 ops/s
Iteration  19: 1077748.995 ops/s
Iteration  20: 1075532.188 ops/s
Iteration  21: 1074735.802 ops/s
Iteration  22: 1079407.129 ops/s
Iteration  23: 1080850.620 ops/s
Iteration  24: 1083536.369 ops/s
Iteration  25: 1077447.681 ops/s
Iteration  26: 1076500.036 ops/s
Iteration  27: 1072002.698 ops/s
Iteration  28: 1079545.095 ops/s
Iteration  29: 1067806.540 ops/s
Iteration  30: 1076776.172 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  1076456.343 ±(99.9%) 2455.439 ops/s [Average]
  (min, avg, max) = (1067806.540, 1076456.343, 1083536.369), stdev = 3675.186
  CI (99.9%): [1074000.904, 1078911.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1076456.343 ± 2455.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 705391.049 ops/s
# Warmup Iteration   2: 756127.193 ops/s
# Warmup Iteration   3: 979563.151 ops/s
# Warmup Iteration   4: 981843.264 ops/s
# Warmup Iteration   5: 978191.705 ops/s
# Warmup Iteration   6: 979051.743 ops/s
# Warmup Iteration   7: 979082.043 ops/s
# Warmup Iteration   8: 978255.667 ops/s
# Warmup Iteration   9: 985393.126 ops/s
# Warmup Iteration  10: 985105.001 ops/s
# Warmup Iteration  11: 874665.601 ops/s
# Warmup Iteration  12: 925615.000 ops/s
# Warmup Iteration  13: 984828.684 ops/s
# Warmup Iteration  14: 975861.483 ops/s
# Warmup Iteration  15: 975226.606 ops/s
# Warmup Iteration  16: 977902.961 ops/s
# Warmup Iteration  17: 1036898.103 ops/s
# Warmup Iteration  18: 1038769.816 ops/s
# Warmup Iteration  19: 1037304.927 ops/s
# Warmup Iteration  20: 1044337.969 ops/s
# Warmup Iteration  21: 1046318.027 ops/s
# Warmup Iteration  22: 1047763.656 ops/s
# Warmup Iteration  23: 1040601.324 ops/s
# Warmup Iteration  24: 1045215.910 ops/s
# Warmup Iteration  25: 1040164.666 ops/s
# Warmup Iteration  26: 1043150.661 ops/s
# Warmup Iteration  27: 1041096.710 ops/s
# Warmup Iteration  28: 1037778.545 ops/s
# Warmup Iteration  29: 1040714.612 ops/s
# Warmup Iteration  30: 1042287.148 ops/s
Iteration   1: 1047174.515 ops/s
Iteration   2: 1052764.818 ops/s
Iteration   3: 1045249.461 ops/s
Iteration   4: 1046505.586 ops/s
Iteration   5: 1034038.964 ops/s
Iteration   6: 1038066.266 ops/s
Iteration   7: 1041369.314 ops/s
Iteration   8: 1047985.259 ops/s
Iteration   9: 1044322.579 ops/s
Iteration  10: 1048366.249 ops/s
Iteration  11: 1039359.829 ops/s
Iteration  12: 1042064.797 ops/s
Iteration  13: 1037963.443 ops/s
Iteration  14: 1043398.632 ops/s
Iteration  15: 1046821.272 ops/s
Iteration  16: 1039793.714 ops/s
Iteration  17: 1041919.425 ops/s
Iteration  18: 1039690.396 ops/s
Iteration  19: 1038224.443 ops/s
Iteration  20: 1050879.298 ops/s
Iteration  21: 1046940.932 ops/s
Iteration  22: 1034059.484 ops/s
Iteration  23: 1043300.025 ops/s
Iteration  24: 1038694.105 ops/s
Iteration  25: 1039181.943 ops/s
Iteration  26: 1039580.387 ops/s
Iteration  27: 1040285.447 ops/s
Iteration  28: 1042265.909 ops/s
Iteration  29: 1035643.708 ops/s
Iteration  30: 1041940.190 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex":
  1042261.680 ±(99.9%) 3142.383 ops/s [Average]
  (min, avg, max) = (1034038.964, 1042261.680, 1052764.818), stdev = 4703.372
  CI (99.9%): [1039119.296, 1045404.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeAtIndex  thrpt   30  1042261.680 ± 3142.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704946.135 ops/s
# Warmup Iteration   2: 756021.870 ops/s
# Warmup Iteration   3: 976111.325 ops/s
# Warmup Iteration   4: 980158.876 ops/s
# Warmup Iteration   5: 981690.337 ops/s
# Warmup Iteration   6: 973453.913 ops/s
# Warmup Iteration   7: 974920.512 ops/s
# Warmup Iteration   8: 977148.393 ops/s
# Warmup Iteration   9: 982389.479 ops/s
# Warmup Iteration  10: 979958.871 ops/s
# Warmup Iteration  11: 877334.238 ops/s
# Warmup Iteration  12: 920790.262 ops/s
# Warmup Iteration  13: 985123.596 ops/s
# Warmup Iteration  14: 981037.021 ops/s
# Warmup Iteration  15: 980821.983 ops/s
# Warmup Iteration  16: 978363.777 ops/s
# Warmup Iteration  17: 1037217.531 ops/s
# Warmup Iteration  18: 1046565.399 ops/s
# Warmup Iteration  19: 1036943.326 ops/s
# Warmup Iteration  20: 1043510.321 ops/s
# Warmup Iteration  21: 1041592.023 ops/s
# Warmup Iteration  22: 1046407.346 ops/s
# Warmup Iteration  23: 1040693.342 ops/s
# Warmup Iteration  24: 1038070.829 ops/s
# Warmup Iteration  25: 1036811.154 ops/s
# Warmup Iteration  26: 1041658.546 ops/s
# Warmup Iteration  27: 1039704.956 ops/s
# Warmup Iteration  28: 1043587.737 ops/s
# Warmup Iteration  29: 1048177.335 ops/s
# Warmup Iteration  30: 1042322.947 ops/s
Iteration   1: 1045749.790 ops/s
Iteration   2: 1043271.141 ops/s
Iteration   3: 1037355.476 ops/s
Iteration   4: 1036308.507 ops/s
Iteration   5: 1038190.729 ops/s
Iteration   6: 1034777.988 ops/s
Iteration   7: 1036102.809 ops/s
Iteration   8: 1045295.520 ops/s
Iteration   9: 1039964.565 ops/s
Iteration  10: 1042322.608 ops/s
Iteration  11: 1037239.407 ops/s
Iteration  12: 1042496.614 ops/s
Iteration  13: 1039325.605 ops/s
Iteration  14: 1039370.945 ops/s
Iteration  15: 1034741.370 ops/s
Iteration  16: 1036319.344 ops/s
Iteration  17: 1032768.692 ops/s
Iteration  18: 1040124.680 ops/s
Iteration  19: 1040328.069 ops/s
Iteration  20: 1047436.480 ops/s
Iteration  21: 1033398.789 ops/s
Iteration  22: 1033168.409 ops/s
Iteration  23: 1036224.599 ops/s
Iteration  24: 1034893.108 ops/s
Iteration  25: 1044991.327 ops/s
Iteration  26: 1041948.962 ops/s
Iteration  27: 1043844.781 ops/s
Iteration  28: 1040117.608 ops/s
Iteration  29: 1029789.751 ops/s
Iteration  30: 1035783.573 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex":
  1038788.375 ±(99.9%) 2933.948 ops/s [Average]
  (min, avg, max) = (1029789.751, 1038788.375, 1047436.480), stdev = 4391.396
  CI (99.9%): [1035854.427, 1041722.323] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeFromIndex  thrpt   30  1038788.375 ± 2933.948  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706557.585 ops/s
# Warmup Iteration   2: 760176.572 ops/s
# Warmup Iteration   3: 1008831.907 ops/s
# Warmup Iteration   4: 1008923.534 ops/s
# Warmup Iteration   5: 1010654.526 ops/s
# Warmup Iteration   6: 1012613.831 ops/s
# Warmup Iteration   7: 1011545.297 ops/s
# Warmup Iteration   8: 1011865.360 ops/s
# Warmup Iteration   9: 1006238.633 ops/s
# Warmup Iteration  10: 1009732.127 ops/s
# Warmup Iteration  11: 849588.613 ops/s
# Warmup Iteration  12: 1008400.166 ops/s
# Warmup Iteration  13: 1010242.013 ops/s
# Warmup Iteration  14: 1006318.422 ops/s
# Warmup Iteration  15: 1009330.975 ops/s
# Warmup Iteration  16: 1012060.783 ops/s
# Warmup Iteration  17: 1076066.969 ops/s
# Warmup Iteration  18: 1072443.864 ops/s
# Warmup Iteration  19: 1074839.994 ops/s
# Warmup Iteration  20: 1074085.711 ops/s
# Warmup Iteration  21: 1076116.625 ops/s
# Warmup Iteration  22: 1076685.557 ops/s
# Warmup Iteration  23: 1081328.151 ops/s
# Warmup Iteration  24: 1077949.786 ops/s
# Warmup Iteration  25: 1078323.411 ops/s
# Warmup Iteration  26: 1076730.217 ops/s
# Warmup Iteration  27: 1073864.069 ops/s
# Warmup Iteration  28: 1075933.843 ops/s
# Warmup Iteration  29: 1075746.746 ops/s
# Warmup Iteration  30: 1083029.049 ops/s
Iteration   1: 1074505.853 ops/s
Iteration   2: 1074411.090 ops/s
Iteration   3: 1080170.600 ops/s
Iteration   4: 1078720.010 ops/s
Iteration   5: 1081872.201 ops/s
Iteration   6: 1078754.972 ops/s
Iteration   7: 1078500.179 ops/s
Iteration   8: 1077266.149 ops/s
Iteration   9: 1069916.717 ops/s
Iteration  10: 1075933.388 ops/s
Iteration  11: 1072955.726 ops/s
Iteration  12: 1078939.599 ops/s
Iteration  13: 1078392.424 ops/s
Iteration  14: 1071889.557 ops/s
Iteration  15: 1072155.818 ops/s
Iteration  16: 1078321.256 ops/s
Iteration  17: 1077471.609 ops/s
Iteration  18: 1072969.851 ops/s
Iteration  19: 1073215.827 ops/s
Iteration  20: 1075550.573 ops/s
Iteration  21: 1080989.865 ops/s
Iteration  22: 1075951.186 ops/s
Iteration  23: 1083412.342 ops/s
Iteration  24: 1075211.410 ops/s
Iteration  25: 1077026.978 ops/s
Iteration  26: 1075580.783 ops/s
Iteration  27: 1076175.275 ops/s
Iteration  28: 1071594.966 ops/s
Iteration  29: 1078423.163 ops/s
Iteration  30: 1077500.309 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  1076459.323 ±(99.9%) 2146.751 ops/s [Average]
  (min, avg, max) = (1069916.717, 1076459.323, 1083412.342), stdev = 3213.156
  CI (99.9%): [1074312.572, 1078606.074] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  1076459.323 ± 2146.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707564.020 ops/s
# Warmup Iteration   2: 762986.258 ops/s
# Warmup Iteration   3: 1005292.520 ops/s
# Warmup Iteration   4: 1005212.750 ops/s
# Warmup Iteration   5: 1004594.270 ops/s
# Warmup Iteration   6: 1009393.047 ops/s
# Warmup Iteration   7: 1003800.454 ops/s
# Warmup Iteration   8: 1006114.016 ops/s
# Warmup Iteration   9: 1002343.266 ops/s
# Warmup Iteration  10: 1004151.637 ops/s
# Warmup Iteration  11: 847691.187 ops/s
# Warmup Iteration  12: 1003411.109 ops/s
# Warmup Iteration  13: 1007108.711 ops/s
# Warmup Iteration  14: 1000048.739 ops/s
# Warmup Iteration  15: 1007611.650 ops/s
# Warmup Iteration  16: 1005534.361 ops/s
# Warmup Iteration  17: 1069504.361 ops/s
# Warmup Iteration  18: 1068980.338 ops/s
# Warmup Iteration  19: 1067022.551 ops/s
# Warmup Iteration  20: 1067937.333 ops/s
# Warmup Iteration  21: 1074979.266 ops/s
# Warmup Iteration  22: 1072846.573 ops/s
# Warmup Iteration  23: 1068369.412 ops/s
# Warmup Iteration  24: 1067644.669 ops/s
# Warmup Iteration  25: 1067647.494 ops/s
# Warmup Iteration  26: 1071920.497 ops/s
# Warmup Iteration  27: 1065994.283 ops/s
# Warmup Iteration  28: 1066041.125 ops/s
# Warmup Iteration  29: 1065291.757 ops/s
# Warmup Iteration  30: 1068151.990 ops/s
Iteration   1: 1064117.408 ops/s
Iteration   2: 1069659.910 ops/s
Iteration   3: 1066533.125 ops/s
Iteration   4: 1064498.306 ops/s
Iteration   5: 1064595.466 ops/s
Iteration   6: 1078506.498 ops/s
Iteration   7: 1069275.186 ops/s
Iteration   8: 1069365.174 ops/s
Iteration   9: 1074201.677 ops/s
Iteration  10: 1067505.647 ops/s
Iteration  11: 1064116.265 ops/s
Iteration  12: 1059576.993 ops/s
Iteration  13: 1064887.536 ops/s
Iteration  14: 1071470.044 ops/s
Iteration  15: 1071781.879 ops/s
Iteration  16: 1068506.618 ops/s
Iteration  17: 1067966.452 ops/s
Iteration  18: 1062492.960 ops/s
Iteration  19: 1076042.905 ops/s
Iteration  20: 1059452.030 ops/s
Iteration  21: 1069447.315 ops/s
Iteration  22: 1065060.715 ops/s
Iteration  23: 1066035.537 ops/s
Iteration  24: 1066495.467 ops/s
Iteration  25: 1063205.116 ops/s
Iteration  26: 1072330.683 ops/s
Iteration  27: 1072851.627 ops/s
Iteration  28: 1064892.733 ops/s
Iteration  29: 1067374.222 ops/s
Iteration  30: 1070948.598 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  1067773.136 ±(99.9%) 3003.708 ops/s [Average]
  (min, avg, max) = (1059452.030, 1067773.136, 1078506.498), stdev = 4495.809
  CI (99.9%): [1064769.428, 1070776.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  1067773.136 ± 3003.708  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712458.636 ops/s
# Warmup Iteration   2: 770915.061 ops/s
# Warmup Iteration   3: 1017856.259 ops/s
# Warmup Iteration   4: 1020910.644 ops/s
# Warmup Iteration   5: 1024254.964 ops/s
# Warmup Iteration   6: 1019977.346 ops/s
# Warmup Iteration   7: 1019745.596 ops/s
# Warmup Iteration   8: 1014102.612 ops/s
# Warmup Iteration   9: 1017981.111 ops/s
# Warmup Iteration  10: 1010290.381 ops/s
# Warmup Iteration  11: 850561.473 ops/s
# Warmup Iteration  12: 1022679.332 ops/s
# Warmup Iteration  13: 1015944.053 ops/s
# Warmup Iteration  14: 1015733.635 ops/s
# Warmup Iteration  15: 1014720.078 ops/s
# Warmup Iteration  16: 1014160.834 ops/s
# Warmup Iteration  17: 1064760.879 ops/s
# Warmup Iteration  18: 1075149.467 ops/s
# Warmup Iteration  19: 1073237.825 ops/s
# Warmup Iteration  20: 1075733.295 ops/s
# Warmup Iteration  21: 1073045.655 ops/s
# Warmup Iteration  22: 1075647.594 ops/s
# Warmup Iteration  23: 1076975.846 ops/s
# Warmup Iteration  24: 1077674.611 ops/s
# Warmup Iteration  25: 1073360.415 ops/s
# Warmup Iteration  26: 1072973.667 ops/s
# Warmup Iteration  27: 1069767.188 ops/s
# Warmup Iteration  28: 1075763.759 ops/s
# Warmup Iteration  29: 1072414.709 ops/s
# Warmup Iteration  30: 1063301.679 ops/s
Iteration   1: 1060136.937 ops/s
Iteration   2: 1059119.594 ops/s
Iteration   3: 1076368.010 ops/s
Iteration   4: 1076145.107 ops/s
Iteration   5: 1073288.006 ops/s
Iteration   6: 1071390.265 ops/s
Iteration   7: 1070096.359 ops/s
Iteration   8: 1073330.918 ops/s
Iteration   9: 1074557.070 ops/s
Iteration  10: 1071575.452 ops/s
Iteration  11: 1071791.424 ops/s
Iteration  12: 1070698.366 ops/s
Iteration  13: 1063651.029 ops/s
Iteration  14: 1073409.336 ops/s
Iteration  15: 1065168.398 ops/s
Iteration  16: 1069016.734 ops/s
Iteration  17: 1070881.856 ops/s
Iteration  18: 1075988.404 ops/s
Iteration  19: 1075437.442 ops/s
Iteration  20: 1068683.700 ops/s
Iteration  21: 1073172.680 ops/s
Iteration  22: 1072543.501 ops/s
Iteration  23: 1077312.105 ops/s
Iteration  24: 1078584.265 ops/s
Iteration  25: 1077382.423 ops/s
Iteration  26: 1077548.380 ops/s
Iteration  27: 1068088.273 ops/s
Iteration  28: 1073401.358 ops/s
Iteration  29: 1068037.212 ops/s
Iteration  30: 1073695.255 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  1071683.329 ±(99.9%) 3263.289 ops/s [Average]
  (min, avg, max) = (1059119.594, 1071683.329, 1078584.265), stdev = 4884.338
  CI (99.9%): [1068420.040, 1074946.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  1071683.329 ± 3263.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 707223.362 ops/s
# Warmup Iteration   2: 783166.851 ops/s
# Warmup Iteration   3: 1014018.188 ops/s
# Warmup Iteration   4: 1006555.063 ops/s
# Warmup Iteration   5: 1011417.202 ops/s
# Warmup Iteration   6: 1015832.437 ops/s
# Warmup Iteration   7: 1011661.861 ops/s
# Warmup Iteration   8: 1016635.885 ops/s
# Warmup Iteration   9: 1012513.883 ops/s
# Warmup Iteration  10: 1003640.751 ops/s
# Warmup Iteration  11: 860223.394 ops/s
# Warmup Iteration  12: 1010086.923 ops/s
# Warmup Iteration  13: 1009688.418 ops/s
# Warmup Iteration  14: 1013169.341 ops/s
# Warmup Iteration  15: 1009554.218 ops/s
# Warmup Iteration  16: 1011040.486 ops/s
# Warmup Iteration  17: 1076907.893 ops/s
# Warmup Iteration  18: 1072921.173 ops/s
# Warmup Iteration  19: 1071980.983 ops/s
# Warmup Iteration  20: 1074894.148 ops/s
# Warmup Iteration  21: 1077687.861 ops/s
# Warmup Iteration  22: 1072703.166 ops/s
# Warmup Iteration  23: 1070720.070 ops/s
# Warmup Iteration  24: 1083509.402 ops/s
# Warmup Iteration  25: 1076709.862 ops/s
# Warmup Iteration  26: 1073253.601 ops/s
# Warmup Iteration  27: 1077067.518 ops/s
# Warmup Iteration  28: 1075401.764 ops/s
# Warmup Iteration  29: 1077687.174 ops/s
# Warmup Iteration  30: 1072921.786 ops/s
Iteration   1: 1060117.335 ops/s
Iteration   2: 1076321.485 ops/s
Iteration   3: 1081561.184 ops/s
Iteration   4: 1072550.769 ops/s
Iteration   5: 1075432.913 ops/s
Iteration   6: 1075708.234 ops/s
Iteration   7: 1076572.380 ops/s
Iteration   8: 1071996.433 ops/s
Iteration   9: 1073670.070 ops/s
Iteration  10: 1074179.231 ops/s
Iteration  11: 1076355.663 ops/s
Iteration  12: 1081504.811 ops/s
Iteration  13: 1077850.984 ops/s
Iteration  14: 1072916.932 ops/s
Iteration  15: 1070943.484 ops/s
Iteration  16: 1080536.022 ops/s
Iteration  17: 1079310.123 ops/s
Iteration  18: 1080905.062 ops/s
Iteration  19: 1083085.490 ops/s
Iteration  20: 1081750.722 ops/s
Iteration  21: 1079976.762 ops/s
Iteration  22: 1082566.204 ops/s
Iteration  23: 1076415.784 ops/s
Iteration  24: 1084230.274 ops/s
Iteration  25: 1073257.196 ops/s
Iteration  26: 1085902.150 ops/s
Iteration  27: 1079834.197 ops/s
Iteration  28: 1074162.323 ops/s
Iteration  29: 1075095.227 ops/s
Iteration  30: 1075519.844 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  1077007.643 ±(99.9%) 3396.702 ops/s [Average]
  (min, avg, max) = (1060117.335, 1077007.643, 1085902.150), stdev = 5084.024
  CI (99.9%): [1073610.941, 1080404.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1077007.643 ± 3396.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698629.635 ops/s
# Warmup Iteration   2: 758260.848 ops/s
# Warmup Iteration   3: 982420.907 ops/s
# Warmup Iteration   4: 977224.325 ops/s
# Warmup Iteration   5: 979353.395 ops/s
# Warmup Iteration   6: 981123.576 ops/s
# Warmup Iteration   7: 980704.256 ops/s
# Warmup Iteration   8: 978430.514 ops/s
# Warmup Iteration   9: 980960.236 ops/s
# Warmup Iteration  10: 980359.151 ops/s
# Warmup Iteration  11: 855172.798 ops/s
# Warmup Iteration  12: 954216.726 ops/s
# Warmup Iteration  13: 982352.874 ops/s
# Warmup Iteration  14: 982189.422 ops/s
# Warmup Iteration  15: 975769.807 ops/s
# Warmup Iteration  16: 978001.337 ops/s
# Warmup Iteration  17: 1040278.768 ops/s
# Warmup Iteration  18: 1041197.633 ops/s
# Warmup Iteration  19: 1040702.658 ops/s
# Warmup Iteration  20: 1041771.914 ops/s
# Warmup Iteration  21: 1041738.134 ops/s
# Warmup Iteration  22: 1041867.597 ops/s
# Warmup Iteration  23: 1041600.268 ops/s
# Warmup Iteration  24: 1041862.992 ops/s
# Warmup Iteration  25: 1037351.188 ops/s
# Warmup Iteration  26: 1046636.303 ops/s
# Warmup Iteration  27: 1045180.448 ops/s
# Warmup Iteration  28: 1041829.310 ops/s
# Warmup Iteration  29: 1041816.745 ops/s
# Warmup Iteration  30: 1033563.387 ops/s
Iteration   1: 1039659.842 ops/s
Iteration   2: 1037474.569 ops/s
Iteration   3: 1035510.607 ops/s
Iteration   4: 1041012.162 ops/s
Iteration   5: 1040383.380 ops/s
Iteration   6: 1037626.693 ops/s
Iteration   7: 1038467.516 ops/s
Iteration   8: 1039205.052 ops/s
Iteration   9: 1039094.666 ops/s
Iteration  10: 1039142.689 ops/s
Iteration  11: 1041102.002 ops/s
Iteration  12: 1035043.592 ops/s
Iteration  13: 1043794.104 ops/s
Iteration  14: 1037579.458 ops/s
Iteration  15: 1038059.513 ops/s
Iteration  16: 1043082.832 ops/s
Iteration  17: 1042189.621 ops/s
Iteration  18: 1041204.914 ops/s
Iteration  19: 1038866.465 ops/s
Iteration  20: 1041223.622 ops/s
Iteration  21: 1038409.686 ops/s
Iteration  22: 1038599.464 ops/s
Iteration  23: 1037256.511 ops/s
Iteration  24: 1038970.223 ops/s
Iteration  25: 1041790.472 ops/s
Iteration  26: 1040640.239 ops/s
Iteration  27: 1035933.267 ops/s
Iteration  28: 1031828.716 ops/s
Iteration  29: 1041239.277 ops/s
Iteration  30: 1032753.289 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis":
  1038904.815 ±(99.9%) 1858.453 ops/s [Average]
  (min, avg, max) = (1031828.716, 1038904.815, 1043794.104), stdev = 2781.646
  CI (99.9%): [1037046.361, 1040763.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_reverseThis  thrpt   30  1038904.815 ± 1858.453  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5642668.488 ops/s
# Warmup Iteration   2: 18244252.866 ops/s
# Warmup Iteration   3: 15733232.574 ops/s
# Warmup Iteration   4: 18603508.520 ops/s
# Warmup Iteration   5: 18592081.533 ops/s
# Warmup Iteration   6: 18520916.372 ops/s
# Warmup Iteration   7: 18497963.322 ops/s
# Warmup Iteration   8: 18465963.113 ops/s
# Warmup Iteration   9: 18441401.748 ops/s
# Warmup Iteration  10: 18452485.031 ops/s
# Warmup Iteration  11: 18511809.611 ops/s
# Warmup Iteration  12: 18416441.689 ops/s
# Warmup Iteration  13: 18477287.091 ops/s
# Warmup Iteration  14: 18373636.167 ops/s
# Warmup Iteration  15: 18591082.514 ops/s
# Warmup Iteration  16: 18634446.325 ops/s
# Warmup Iteration  17: 18576492.607 ops/s
# Warmup Iteration  18: 18621303.710 ops/s
# Warmup Iteration  19: 18398932.644 ops/s
# Warmup Iteration  20: 18531048.088 ops/s
# Warmup Iteration  21: 18589562.258 ops/s
# Warmup Iteration  22: 18558841.032 ops/s
# Warmup Iteration  23: 18659920.617 ops/s
# Warmup Iteration  24: 18456112.042 ops/s
# Warmup Iteration  25: 18573844.982 ops/s
# Warmup Iteration  26: 18601749.821 ops/s
# Warmup Iteration  27: 18684026.468 ops/s
# Warmup Iteration  28: 18564492.048 ops/s
# Warmup Iteration  29: 18463916.819 ops/s
# Warmup Iteration  30: 18275450.872 ops/s
Iteration   1: 18536400.286 ops/s
Iteration   2: 18614874.598 ops/s
Iteration   3: 18630294.048 ops/s
Iteration   4: 18577121.335 ops/s
Iteration   5: 18470384.374 ops/s
Iteration   6: 18548498.765 ops/s
Iteration   7: 18576241.821 ops/s
Iteration   8: 18368372.031 ops/s
Iteration   9: 18296628.692 ops/s
Iteration  10: 18502545.978 ops/s
Iteration  11: 18423166.365 ops/s
Iteration  12: 18493237.697 ops/s
Iteration  13: 18448588.895 ops/s
Iteration  14: 18548832.884 ops/s
Iteration  15: 18508493.933 ops/s
Iteration  16: 18560595.078 ops/s
Iteration  17: 18469088.098 ops/s
Iteration  18: 18462477.932 ops/s
Iteration  19: 18427039.230 ops/s
Iteration  20: 18525545.832 ops/s
Iteration  21: 18452107.250 ops/s
Iteration  22: 18578225.460 ops/s
Iteration  23: 18494355.236 ops/s
Iteration  24: 18600834.115 ops/s
Iteration  25: 18622916.908 ops/s
Iteration  26: 18517754.906 ops/s
Iteration  27: 18390622.052 ops/s
Iteration  28: 18246896.971 ops/s
Iteration  29: 18346215.777 ops/s
Iteration  30: 18442971.548 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_select":
  18489377.603 ±(99.9%) 63481.928 ops/s [Average]
  (min, avg, max) = (18246896.971, 18489377.603, 18630294.048), stdev = 95016.769
  CI (99.9%): [18425895.675, 18552859.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  18489377.603 ± 63481.928  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5795208.090 ops/s
# Warmup Iteration   2: 18395392.002 ops/s
# Warmup Iteration   3: 16097817.241 ops/s
# Warmup Iteration   4: 18894443.325 ops/s
# Warmup Iteration   5: 18804303.212 ops/s
# Warmup Iteration   6: 18872706.982 ops/s
# Warmup Iteration   7: 18888178.337 ops/s
# Warmup Iteration   8: 18849444.591 ops/s
# Warmup Iteration   9: 18980239.013 ops/s
# Warmup Iteration  10: 18944881.496 ops/s
# Warmup Iteration  11: 18834855.200 ops/s
# Warmup Iteration  12: 18876657.702 ops/s
# Warmup Iteration  13: 18788759.103 ops/s
# Warmup Iteration  14: 18834793.040 ops/s
# Warmup Iteration  15: 18707527.645 ops/s
# Warmup Iteration  16: 18898685.696 ops/s
# Warmup Iteration  17: 18856242.815 ops/s
# Warmup Iteration  18: 18942113.067 ops/s
# Warmup Iteration  19: 18964166.628 ops/s
# Warmup Iteration  20: 18794373.214 ops/s
# Warmup Iteration  21: 18733402.002 ops/s
# Warmup Iteration  22: 18637613.883 ops/s
# Warmup Iteration  23: 18874647.232 ops/s
# Warmup Iteration  24: 18842768.926 ops/s
# Warmup Iteration  25: 18777549.333 ops/s
# Warmup Iteration  26: 18830164.278 ops/s
# Warmup Iteration  27: 18831390.195 ops/s
# Warmup Iteration  28: 18699490.263 ops/s
# Warmup Iteration  29: 18856188.947 ops/s
# Warmup Iteration  30: 18829633.013 ops/s
Iteration   1: 18810794.763 ops/s
Iteration   2: 18878826.066 ops/s
Iteration   3: 18891292.523 ops/s
Iteration   4: 18995015.963 ops/s
Iteration   5: 18807774.586 ops/s
Iteration   6: 18818104.551 ops/s
Iteration   7: 18826322.468 ops/s
Iteration   8: 18912430.343 ops/s
Iteration   9: 18913791.248 ops/s
Iteration  10: 18821853.590 ops/s
Iteration  11: 18804457.820 ops/s
Iteration  12: 18935333.242 ops/s
Iteration  13: 18893621.735 ops/s
Iteration  14: 18978612.208 ops/s
Iteration  15: 18787850.082 ops/s
Iteration  16: 18998072.595 ops/s
Iteration  17: 18975113.882 ops/s
Iteration  18: 18860747.731 ops/s
Iteration  19: 18886049.041 ops/s
Iteration  20: 18813039.031 ops/s
Iteration  21: 18859899.795 ops/s
Iteration  22: 18881690.564 ops/s
Iteration  23: 18854776.324 ops/s
Iteration  24: 18921508.826 ops/s
Iteration  25: 18929738.702 ops/s
Iteration  26: 18915797.984 ops/s
Iteration  27: 18834124.907 ops/s
Iteration  28: 18648531.830 ops/s
Iteration  29: 18738909.173 ops/s
Iteration  30: 18932121.414 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  18870873.433 ±(99.9%) 51606.912 ops/s [Average]
  (min, avg, max) = (18648531.830, 18870873.433, 18998072.595), stdev = 77242.803
  CI (99.9%): [18819266.520, 18922480.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  18870873.433 ± 51606.912  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49999.298 ops/s
# Warmup Iteration   2: 67927.598 ops/s
# Warmup Iteration   3: 93974.414 ops/s
# Warmup Iteration   4: 92651.859 ops/s
# Warmup Iteration   5: 93546.810 ops/s
# Warmup Iteration   6: 93115.828 ops/s
# Warmup Iteration   7: 93100.222 ops/s
# Warmup Iteration   8: 93151.167 ops/s
# Warmup Iteration   9: 78905.956 ops/s
# Warmup Iteration  10: 93222.525 ops/s
# Warmup Iteration  11: 93350.480 ops/s
# Warmup Iteration  12: 92925.620 ops/s
# Warmup Iteration  13: 93114.274 ops/s
# Warmup Iteration  14: 93253.583 ops/s
# Warmup Iteration  15: 92407.322 ops/s
# Warmup Iteration  16: 93517.466 ops/s
# Warmup Iteration  17: 93483.881 ops/s
# Warmup Iteration  18: 93648.702 ops/s
# Warmup Iteration  19: 93335.193 ops/s
# Warmup Iteration  20: 93452.570 ops/s
# Warmup Iteration  21: 93642.546 ops/s
# Warmup Iteration  22: 93793.556 ops/s
# Warmup Iteration  23: 93442.831 ops/s
# Warmup Iteration  24: 93170.194 ops/s
# Warmup Iteration  25: 93357.507 ops/s
# Warmup Iteration  26: 93294.616 ops/s
# Warmup Iteration  27: 93118.310 ops/s
# Warmup Iteration  28: 93368.266 ops/s
# Warmup Iteration  29: 93400.098 ops/s
# Warmup Iteration  30: 93014.753 ops/s
Iteration   1: 93239.845 ops/s
Iteration   2: 94134.071 ops/s
Iteration   3: 93668.063 ops/s
Iteration   4: 93786.486 ops/s
Iteration   5: 93275.092 ops/s
Iteration   6: 93915.349 ops/s
Iteration   7: 93432.509 ops/s
Iteration   8: 93547.119 ops/s
Iteration   9: 93884.509 ops/s
Iteration  10: 93950.798 ops/s
Iteration  11: 93854.848 ops/s
Iteration  12: 93473.115 ops/s
Iteration  13: 93534.321 ops/s
Iteration  14: 93960.425 ops/s
Iteration  15: 93519.677 ops/s
Iteration  16: 93413.886 ops/s
Iteration  17: 94077.700 ops/s
Iteration  18: 93414.504 ops/s
Iteration  19: 94181.545 ops/s
Iteration  20: 93806.825 ops/s
Iteration  21: 94023.367 ops/s
Iteration  22: 93714.654 ops/s
Iteration  23: 93885.531 ops/s
Iteration  24: 92838.523 ops/s
Iteration  25: 93470.229 ops/s
Iteration  26: 93419.232 ops/s
Iteration  27: 93376.220 ops/s
Iteration  28: 93373.531 ops/s
Iteration  29: 93189.487 ops/s
Iteration  30: 93761.403 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization":
  93637.429 ±(99.9%) 213.138 ops/s [Average]
  (min, avg, max) = (92838.523, 93637.429, 94181.545), stdev = 319.015
  CI (99.9%): [93424.291, 93850.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt      Score     Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_serialization  thrpt   30  93637.429 ± 213.138  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 708922.298 ops/s
# Warmup Iteration   2: 758400.184 ops/s
# Warmup Iteration   3: 972877.360 ops/s
# Warmup Iteration   4: 977514.212 ops/s
# Warmup Iteration   5: 977454.288 ops/s
# Warmup Iteration   6: 981339.443 ops/s
# Warmup Iteration   7: 980067.959 ops/s
# Warmup Iteration   8: 982697.303 ops/s
# Warmup Iteration   9: 980962.221 ops/s
# Warmup Iteration  10: 980528.921 ops/s
# Warmup Iteration  11: 904319.646 ops/s
# Warmup Iteration  12: 903133.580 ops/s
# Warmup Iteration  13: 980294.353 ops/s
# Warmup Iteration  14: 977704.573 ops/s
# Warmup Iteration  15: 978474.371 ops/s
# Warmup Iteration  16: 980214.339 ops/s
# Warmup Iteration  17: 1042139.175 ops/s
# Warmup Iteration  18: 1041710.604 ops/s
# Warmup Iteration  19: 1040061.482 ops/s
# Warmup Iteration  20: 1045872.182 ops/s
# Warmup Iteration  21: 1048287.201 ops/s
# Warmup Iteration  22: 1043415.796 ops/s
# Warmup Iteration  23: 1036335.709 ops/s
# Warmup Iteration  24: 1040511.159 ops/s
# Warmup Iteration  25: 1043256.917 ops/s
# Warmup Iteration  26: 1044354.199 ops/s
# Warmup Iteration  27: 1040168.825 ops/s
# Warmup Iteration  28: 1036637.470 ops/s
# Warmup Iteration  29: 1040369.579 ops/s
# Warmup Iteration  30: 1041800.555 ops/s
Iteration   1: 1040481.910 ops/s
Iteration   2: 1041377.325 ops/s
Iteration   3: 1042551.059 ops/s
Iteration   4: 1044178.729 ops/s
Iteration   5: 1042485.035 ops/s
Iteration   6: 1037436.869 ops/s
Iteration   7: 1040277.804 ops/s
Iteration   8: 1045697.373 ops/s
Iteration   9: 1038430.975 ops/s
Iteration  10: 1038261.139 ops/s
Iteration  11: 1039976.161 ops/s
Iteration  12: 1035418.009 ops/s
Iteration  13: 1049375.418 ops/s
Iteration  14: 1042461.116 ops/s
Iteration  15: 1040228.112 ops/s
Iteration  16: 1036526.280 ops/s
Iteration  17: 1037360.198 ops/s
Iteration  18: 1038153.198 ops/s
Iteration  19: 1042481.238 ops/s
Iteration  20: 1046426.043 ops/s
Iteration  21: 1042981.309 ops/s
Iteration  22: 1042420.095 ops/s
Iteration  23: 1045457.640 ops/s
Iteration  24: 1040139.370 ops/s
Iteration  25: 1039268.428 ops/s
Iteration  26: 1045040.837 ops/s
Iteration  27: 1040474.357 ops/s
Iteration  28: 1044239.491 ops/s
Iteration  29: 1041624.237 ops/s
Iteration  30: 1030245.669 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_set":
  1041049.181 ±(99.9%) 2528.080 ops/s [Average]
  (min, avg, max) = (1030245.669, 1041049.181, 1049375.418), stdev = 3783.911
  CI (99.9%): [1038521.101, 1043577.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_set  thrpt   30  1041049.181 ± 2528.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 706805.617 ops/s
# Warmup Iteration   2: 757744.341 ops/s
# Warmup Iteration   3: 974148.106 ops/s
# Warmup Iteration   4: 968046.935 ops/s
# Warmup Iteration   5: 966058.226 ops/s
# Warmup Iteration   6: 974795.483 ops/s
# Warmup Iteration   7: 970359.240 ops/s
# Warmup Iteration   8: 973727.434 ops/s
# Warmup Iteration   9: 973458.511 ops/s
# Warmup Iteration  10: 968996.618 ops/s
# Warmup Iteration  11: 912548.180 ops/s
# Warmup Iteration  12: 881395.450 ops/s
# Warmup Iteration  13: 973872.685 ops/s
# Warmup Iteration  14: 964847.566 ops/s
# Warmup Iteration  15: 972885.833 ops/s
# Warmup Iteration  16: 972721.731 ops/s
# Warmup Iteration  17: 1033144.398 ops/s
# Warmup Iteration  18: 1032154.339 ops/s
# Warmup Iteration  19: 1034074.679 ops/s
# Warmup Iteration  20: 1034936.959 ops/s
# Warmup Iteration  21: 1034051.284 ops/s
# Warmup Iteration  22: 1033732.523 ops/s
# Warmup Iteration  23: 1030991.017 ops/s
# Warmup Iteration  24: 1033801.887 ops/s
# Warmup Iteration  25: 1028523.911 ops/s
# Warmup Iteration  26: 1030289.252 ops/s
# Warmup Iteration  27: 1028967.645 ops/s
# Warmup Iteration  28: 1038518.841 ops/s
# Warmup Iteration  29: 1036111.093 ops/s
# Warmup Iteration  30: 1033166.786 ops/s
Iteration   1: 1026790.052 ops/s
Iteration   2: 1030847.627 ops/s
Iteration   3: 1039253.596 ops/s
Iteration   4: 1018295.475 ops/s
Iteration   5: 1029035.353 ops/s
Iteration   6: 1035666.526 ops/s
Iteration   7: 1034771.836 ops/s
Iteration   8: 1027819.730 ops/s
Iteration   9: 1033300.741 ops/s
Iteration  10: 1036899.714 ops/s
Iteration  11: 1031160.528 ops/s
Iteration  12: 1029840.730 ops/s
Iteration  13: 1023211.000 ops/s
Iteration  14: 1036336.398 ops/s
Iteration  15: 1031680.073 ops/s
Iteration  16: 1030341.466 ops/s
Iteration  17: 1027943.574 ops/s
Iteration  18: 1033029.542 ops/s
Iteration  19: 1034612.538 ops/s
Iteration  20: 1036392.832 ops/s
Iteration  21: 1040515.471 ops/s
Iteration  22: 1025230.983 ops/s
Iteration  23: 1023778.450 ops/s
Iteration  24: 1034273.205 ops/s
Iteration  25: 1028459.935 ops/s
Iteration  26: 1034646.347 ops/s
Iteration  27: 1032012.115 ops/s
Iteration  28: 1035524.384 ops/s
Iteration  29: 1037155.578 ops/s
Iteration  30: 1035421.015 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex":
  1031808.227 ±(99.9%) 3397.963 ops/s [Average]
  (min, avg, max) = (1018295.475, 1031808.227, 1040515.471), stdev = 5085.912
  CI (99.9%): [1028410.264, 1035206.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_setAtIndex  thrpt   30  1031808.227 ± 3397.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587397.865 ops/s
# Warmup Iteration   2: 695959.721 ops/s
# Warmup Iteration   3: 893477.913 ops/s
# Warmup Iteration   4: 886599.455 ops/s
# Warmup Iteration   5: 886347.307 ops/s
# Warmup Iteration   6: 882364.697 ops/s
# Warmup Iteration   7: 890103.597 ops/s
# Warmup Iteration   8: 888914.585 ops/s
# Warmup Iteration   9: 734099.024 ops/s
# Warmup Iteration  10: 883154.701 ops/s
# Warmup Iteration  11: 881967.638 ops/s
# Warmup Iteration  12: 883816.542 ops/s
# Warmup Iteration  13: 879599.095 ops/s
# Warmup Iteration  14: 880501.059 ops/s
# Warmup Iteration  15: 884244.926 ops/s
# Warmup Iteration  16: 881380.665 ops/s
# Warmup Iteration  17: 923000.209 ops/s
# Warmup Iteration  18: 927885.738 ops/s
# Warmup Iteration  19: 927748.319 ops/s
# Warmup Iteration  20: 930504.456 ops/s
# Warmup Iteration  21: 928679.581 ops/s
# Warmup Iteration  22: 930038.258 ops/s
# Warmup Iteration  23: 930279.508 ops/s
# Warmup Iteration  24: 923042.775 ops/s
# Warmup Iteration  25: 933912.480 ops/s
# Warmup Iteration  26: 927376.423 ops/s
# Warmup Iteration  27: 924901.490 ops/s
# Warmup Iteration  28: 929703.315 ops/s
# Warmup Iteration  29: 928521.073 ops/s
# Warmup Iteration  30: 923731.966 ops/s
Iteration   1: 928693.466 ops/s
Iteration   2: 932225.805 ops/s
Iteration   3: 929381.509 ops/s
Iteration   4: 923288.025 ops/s
Iteration   5: 924964.613 ops/s
Iteration   6: 925326.816 ops/s
Iteration   7: 924893.668 ops/s
Iteration   8: 935794.833 ops/s
Iteration   9: 932843.696 ops/s
Iteration  10: 932138.743 ops/s
Iteration  11: 920557.174 ops/s
Iteration  12: 927353.697 ops/s
Iteration  13: 932496.005 ops/s
Iteration  14: 925498.376 ops/s
Iteration  15: 929074.001 ops/s
Iteration  16: 920291.015 ops/s
Iteration  17: 922962.226 ops/s
Iteration  18: 927066.531 ops/s
Iteration  19: 924230.312 ops/s
Iteration  20: 930727.079 ops/s
Iteration  21: 925248.900 ops/s
Iteration  22: 935495.365 ops/s
Iteration  23: 925339.912 ops/s
Iteration  24: 927084.348 ops/s
Iteration  25: 927825.371 ops/s
Iteration  26: 930961.224 ops/s
Iteration  27: 925507.714 ops/s
Iteration  28: 928041.742 ops/s
Iteration  29: 927524.080 ops/s
Iteration  30: 924844.340 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis":
  927589.353 ±(99.9%) 2638.764 ops/s [Average]
  (min, avg, max) = (920291.015, 927589.353, 935794.833), stdev = 3949.578
  CI (99.9%): [924950.589, 930228.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThis  thrpt   30  927589.353 ± 2638.764  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 701425.511 ops/s
# Warmup Iteration   2: 753309.470 ops/s
# Warmup Iteration   3: 979017.743 ops/s
# Warmup Iteration   4: 975931.984 ops/s
# Warmup Iteration   5: 979475.317 ops/s
# Warmup Iteration   6: 983078.552 ops/s
# Warmup Iteration   7: 981493.798 ops/s
# Warmup Iteration   8: 975752.934 ops/s
# Warmup Iteration   9: 978568.613 ops/s
# Warmup Iteration  10: 978721.999 ops/s
# Warmup Iteration  11: 848496.598 ops/s
# Warmup Iteration  12: 942596.685 ops/s
# Warmup Iteration  13: 978285.852 ops/s
# Warmup Iteration  14: 975481.814 ops/s
# Warmup Iteration  15: 981680.672 ops/s
# Warmup Iteration  16: 980266.135 ops/s
# Warmup Iteration  17: 1039015.097 ops/s
# Warmup Iteration  18: 1041732.618 ops/s
# Warmup Iteration  19: 1037841.978 ops/s
# Warmup Iteration  20: 1038211.714 ops/s
# Warmup Iteration  21: 1034559.173 ops/s
# Warmup Iteration  22: 1037389.622 ops/s
# Warmup Iteration  23: 1036435.065 ops/s
# Warmup Iteration  24: 1039526.648 ops/s
# Warmup Iteration  25: 1031391.957 ops/s
# Warmup Iteration  26: 1036317.796 ops/s
# Warmup Iteration  27: 1041323.135 ops/s
# Warmup Iteration  28: 1036224.673 ops/s
# Warmup Iteration  29: 1031295.571 ops/s
# Warmup Iteration  30: 1033278.183 ops/s
Iteration   1: 1033544.754 ops/s
Iteration   2: 1034002.059 ops/s
Iteration   3: 1037712.815 ops/s
Iteration   4: 1035961.042 ops/s
Iteration   5: 1034003.571 ops/s
Iteration   6: 1041127.033 ops/s
Iteration   7: 1039783.742 ops/s
Iteration   8: 1039146.041 ops/s
Iteration   9: 1036202.607 ops/s
Iteration  10: 1034258.800 ops/s
Iteration  11: 1037334.507 ops/s
Iteration  12: 1033808.751 ops/s
Iteration  13: 1035486.656 ops/s
Iteration  14: 1035692.543 ops/s
Iteration  15: 1031933.751 ops/s
Iteration  16: 1034362.635 ops/s
Iteration  17: 1038055.726 ops/s
Iteration  18: 1035997.840 ops/s
Iteration  19: 1035406.085 ops/s
Iteration  20: 1032959.832 ops/s
Iteration  21: 1028616.705 ops/s
Iteration  22: 1036241.767 ops/s
Iteration  23: 1037134.514 ops/s
Iteration  24: 1029371.359 ops/s
Iteration  25: 1034211.388 ops/s
Iteration  26: 1039913.747 ops/s
Iteration  27: 1035843.657 ops/s
Iteration  28: 1036312.775 ops/s
Iteration  29: 1035546.385 ops/s
Iteration  30: 1036577.545 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy":
  1035551.688 ±(99.9%) 1854.510 ops/s [Average]
  (min, avg, max) = (1028616.705, 1035551.688, 1041127.033), stdev = 2775.744
  CI (99.9%): [1033697.177, 1037406.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisBy  thrpt   30  1035551.688 ± 1854.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696945.408 ops/s
# Warmup Iteration   2: 762489.188 ops/s
# Warmup Iteration   3: 975287.021 ops/s
# Warmup Iteration   4: 973483.960 ops/s
# Warmup Iteration   5: 979353.534 ops/s
# Warmup Iteration   6: 981315.893 ops/s
# Warmup Iteration   7: 975424.635 ops/s
# Warmup Iteration   8: 976196.075 ops/s
# Warmup Iteration   9: 975440.776 ops/s
# Warmup Iteration  10: 976164.795 ops/s
# Warmup Iteration  11: 825342.777 ops/s
# Warmup Iteration  12: 971043.497 ops/s
# Warmup Iteration  13: 978054.182 ops/s
# Warmup Iteration  14: 979772.353 ops/s
# Warmup Iteration  15: 973294.108 ops/s
# Warmup Iteration  16: 975539.428 ops/s
# Warmup Iteration  17: 1036689.166 ops/s
# Warmup Iteration  18: 1034069.437 ops/s
# Warmup Iteration  19: 1035458.939 ops/s
# Warmup Iteration  20: 1029361.849 ops/s
# Warmup Iteration  21: 1035372.658 ops/s
# Warmup Iteration  22: 1036704.999 ops/s
# Warmup Iteration  23: 1039418.540 ops/s
# Warmup Iteration  24: 1034350.632 ops/s
# Warmup Iteration  25: 1034241.673 ops/s
# Warmup Iteration  26: 1031777.234 ops/s
# Warmup Iteration  27: 1035174.289 ops/s
# Warmup Iteration  28: 1028867.672 ops/s
# Warmup Iteration  29: 1038762.535 ops/s
# Warmup Iteration  30: 1039449.179 ops/s
Iteration   1: 1035674.950 ops/s
Iteration   2: 1035834.961 ops/s
Iteration   3: 1034879.623 ops/s
Iteration   4: 1035729.476 ops/s
Iteration   5: 1038105.348 ops/s
Iteration   6: 1028767.577 ops/s
Iteration   7: 1040636.618 ops/s
Iteration   8: 1034324.564 ops/s
Iteration   9: 1033230.622 ops/s
Iteration  10: 1036336.308 ops/s
Iteration  11: 1035501.753 ops/s
Iteration  12: 1033648.938 ops/s
Iteration  13: 1031864.408 ops/s
Iteration  14: 1035639.126 ops/s
Iteration  15: 1038022.515 ops/s
Iteration  16: 1036466.322 ops/s
Iteration  17: 1035396.292 ops/s
Iteration  18: 1038503.331 ops/s
Iteration  19: 1022695.169 ops/s
Iteration  20: 1037828.044 ops/s
Iteration  21: 1037091.075 ops/s
Iteration  22: 1031454.303 ops/s
Iteration  23: 1036850.195 ops/s
Iteration  24: 1042810.036 ops/s
Iteration  25: 1034259.715 ops/s
Iteration  26: 1040242.132 ops/s
Iteration  27: 1030236.023 ops/s
Iteration  28: 1039343.351 ops/s
Iteration  29: 1039051.653 ops/s
Iteration  30: 1044628.260 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean":
  1035835.090 ±(99.9%) 2834.348 ops/s [Average]
  (min, avg, max) = (1022695.169, 1035835.090, 1044628.260), stdev = 4242.318
  CI (99.9%): [1033000.742, 1038669.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  1035835.090 ± 2834.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691338.370 ops/s
# Warmup Iteration   2: 746445.268 ops/s
# Warmup Iteration   3: 979314.141 ops/s
# Warmup Iteration   4: 971985.979 ops/s
# Warmup Iteration   5: 980826.222 ops/s
# Warmup Iteration   6: 976234.444 ops/s
# Warmup Iteration   7: 976481.396 ops/s
# Warmup Iteration   8: 982422.387 ops/s
# Warmup Iteration   9: 978291.694 ops/s
# Warmup Iteration  10: 977175.682 ops/s
# Warmup Iteration  11: 834972.304 ops/s
# Warmup Iteration  12: 968522.985 ops/s
# Warmup Iteration  13: 978949.666 ops/s
# Warmup Iteration  14: 975013.408 ops/s
# Warmup Iteration  15: 974805.776 ops/s
# Warmup Iteration  16: 971773.545 ops/s
# Warmup Iteration  17: 1029308.245 ops/s
# Warmup Iteration  18: 1035591.264 ops/s
# Warmup Iteration  19: 1028834.506 ops/s
# Warmup Iteration  20: 1032910.805 ops/s
# Warmup Iteration  21: 1030857.569 ops/s
# Warmup Iteration  22: 1035307.190 ops/s
# Warmup Iteration  23: 1033845.774 ops/s
# Warmup Iteration  24: 1032492.390 ops/s
# Warmup Iteration  25: 1034927.424 ops/s
# Warmup Iteration  26: 1032147.731 ops/s
# Warmup Iteration  27: 1040610.371 ops/s
# Warmup Iteration  28: 1027469.543 ops/s
# Warmup Iteration  29: 1033458.622 ops/s
# Warmup Iteration  30: 1035020.658 ops/s
Iteration   1: 1034030.626 ops/s
Iteration   2: 1035950.920 ops/s
Iteration   3: 1024928.279 ops/s
Iteration   4: 1030336.091 ops/s
Iteration   5: 1032658.792 ops/s
Iteration   6: 1031389.749 ops/s
Iteration   7: 1031794.672 ops/s
Iteration   8: 1039754.896 ops/s
Iteration   9: 1025526.363 ops/s
Iteration  10: 1024344.603 ops/s
Iteration  11: 1025779.898 ops/s
Iteration  12: 1025682.542 ops/s
Iteration  13: 1027656.059 ops/s
Iteration  14: 1024785.554 ops/s
Iteration  15: 1025736.479 ops/s
Iteration  16: 1032166.084 ops/s
Iteration  17: 1026719.781 ops/s
Iteration  18: 1032701.294 ops/s
Iteration  19: 1025954.461 ops/s
Iteration  20: 1038275.444 ops/s
Iteration  21: 1025430.834 ops/s
Iteration  22: 1026249.204 ops/s
Iteration  23: 1026934.968 ops/s
Iteration  24: 1031976.702 ops/s
Iteration  25: 1037023.010 ops/s
Iteration  26: 1028159.753 ops/s
Iteration  27: 1030292.923 ops/s
Iteration  28: 1029288.710 ops/s
Iteration  29: 1032480.824 ops/s
Iteration  30: 1034882.257 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte":
  1029963.059 ±(99.9%) 2944.508 ops/s [Average]
  (min, avg, max) = (1024344.603, 1029963.059, 1039754.896), stdev = 4407.202
  CI (99.9%): [1027018.551, 1032907.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1029963.059 ± 2944.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 700831.202 ops/s
# Warmup Iteration   2: 764266.904 ops/s
# Warmup Iteration   3: 985954.397 ops/s
# Warmup Iteration   4: 984773.600 ops/s
# Warmup Iteration   5: 990040.976 ops/s
# Warmup Iteration   6: 981130.488 ops/s
# Warmup Iteration   7: 986979.271 ops/s
# Warmup Iteration   8: 983612.012 ops/s
# Warmup Iteration   9: 984654.520 ops/s
# Warmup Iteration  10: 985650.574 ops/s
# Warmup Iteration  11: 825305.776 ops/s
# Warmup Iteration  12: 988455.565 ops/s
# Warmup Iteration  13: 988239.189 ops/s
# Warmup Iteration  14: 988520.810 ops/s
# Warmup Iteration  15: 986514.234 ops/s
# Warmup Iteration  16: 986772.772 ops/s
# Warmup Iteration  17: 1050378.207 ops/s
# Warmup Iteration  18: 1054602.682 ops/s
# Warmup Iteration  19: 1044491.319 ops/s
# Warmup Iteration  20: 1048300.799 ops/s
# Warmup Iteration  21: 1052310.974 ops/s
# Warmup Iteration  22: 1055543.892 ops/s
# Warmup Iteration  23: 1052305.442 ops/s
# Warmup Iteration  24: 1049367.302 ops/s
# Warmup Iteration  25: 1044199.226 ops/s
# Warmup Iteration  26: 1050477.536 ops/s
# Warmup Iteration  27: 1051038.520 ops/s
# Warmup Iteration  28: 1049315.309 ops/s
# Warmup Iteration  29: 1051187.363 ops/s
# Warmup Iteration  30: 1047715.096 ops/s
Iteration   1: 1042158.835 ops/s
Iteration   2: 1045345.269 ops/s
Iteration   3: 1051844.611 ops/s
Iteration   4: 1049718.394 ops/s
Iteration   5: 1052550.129 ops/s
Iteration   6: 1053046.023 ops/s
Iteration   7: 1051154.593 ops/s
Iteration   8: 1056964.738 ops/s
Iteration   9: 1043138.236 ops/s
Iteration  10: 1059940.658 ops/s
Iteration  11: 1050245.060 ops/s
Iteration  12: 1049124.858 ops/s
Iteration  13: 1047078.510 ops/s
Iteration  14: 1048111.004 ops/s
Iteration  15: 1059652.529 ops/s
Iteration  16: 1042981.055 ops/s
Iteration  17: 1041370.998 ops/s
Iteration  18: 1044877.081 ops/s
Iteration  19: 1048060.165 ops/s
Iteration  20: 1049256.091 ops/s
Iteration  21: 1048359.306 ops/s
Iteration  22: 1051117.347 ops/s
Iteration  23: 1050836.850 ops/s
Iteration  24: 1052217.722 ops/s
Iteration  25: 1061329.659 ops/s
Iteration  26: 1051042.917 ops/s
Iteration  27: 1047126.907 ops/s
Iteration  28: 1047729.129 ops/s
Iteration  29: 1052845.989 ops/s
Iteration  30: 1045013.791 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar":
  1049807.948 ±(99.9%) 3381.361 ops/s [Average]
  (min, avg, max) = (1041370.998, 1049807.948, 1061329.659), stdev = 5061.062
  CI (99.9%): [1046426.588, 1053189.309] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByChar  thrpt   30  1049807.948 ± 3381.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 695097.998 ops/s
# Warmup Iteration   2: 752158.965 ops/s
# Warmup Iteration   3: 976009.217 ops/s
# Warmup Iteration   4: 976812.235 ops/s
# Warmup Iteration   5: 975932.281 ops/s
# Warmup Iteration   6: 971859.203 ops/s
# Warmup Iteration   7: 974373.010 ops/s
# Warmup Iteration   8: 972127.593 ops/s
# Warmup Iteration   9: 970376.409 ops/s
# Warmup Iteration  10: 974558.741 ops/s
# Warmup Iteration  11: 821655.421 ops/s
# Warmup Iteration  12: 972314.045 ops/s
# Warmup Iteration  13: 974273.255 ops/s
# Warmup Iteration  14: 976013.801 ops/s
# Warmup Iteration  15: 971153.378 ops/s
# Warmup Iteration  16: 976016.100 ops/s
# Warmup Iteration  17: 1028131.546 ops/s
# Warmup Iteration  18: 1030863.757 ops/s
# Warmup Iteration  19: 1023061.084 ops/s
# Warmup Iteration  20: 1027516.935 ops/s
# Warmup Iteration  21: 1024794.981 ops/s
# Warmup Iteration  22: 1030166.061 ops/s
# Warmup Iteration  23: 1028178.207 ops/s
# Warmup Iteration  24: 1021419.379 ops/s
# Warmup Iteration  25: 1027184.495 ops/s
# Warmup Iteration  26: 1027170.409 ops/s
# Warmup Iteration  27: 1023636.426 ops/s
# Warmup Iteration  28: 1025734.492 ops/s
# Warmup Iteration  29: 1026877.421 ops/s
# Warmup Iteration  30: 1026266.568 ops/s
Iteration   1: 1025866.829 ops/s
Iteration   2: 1028656.307 ops/s
Iteration   3: 1022381.226 ops/s
Iteration   4: 1033138.538 ops/s
Iteration   5: 1031390.036 ops/s
Iteration   6: 1023363.571 ops/s
Iteration   7: 1030482.534 ops/s
Iteration   8: 1032509.629 ops/s
Iteration   9: 1033127.086 ops/s
Iteration  10: 1029897.177 ops/s
Iteration  11: 1026130.679 ops/s
Iteration  12: 1027712.216 ops/s
Iteration  13: 1027347.336 ops/s
Iteration  14: 1030264.505 ops/s
Iteration  15: 1026930.619 ops/s
Iteration  16: 1022788.248 ops/s
Iteration  17: 1027015.279 ops/s
Iteration  18: 1023064.643 ops/s
Iteration  19: 1029930.053 ops/s
Iteration  20: 1026684.700 ops/s
Iteration  21: 1031011.910 ops/s
Iteration  22: 1022468.567 ops/s
Iteration  23: 1027004.674 ops/s
Iteration  24: 1031869.048 ops/s
Iteration  25: 1025486.951 ops/s
Iteration  26: 1027483.760 ops/s
Iteration  27: 1029102.663 ops/s
Iteration  28: 1028000.272 ops/s
Iteration  29: 1028048.767 ops/s
Iteration  30: 1029946.214 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble":
  1027970.135 ±(99.9%) 2104.512 ops/s [Average]
  (min, avg, max) = (1022381.226, 1027970.135, 1033138.538), stdev = 3149.934
  CI (99.9%): [1025865.623, 1030074.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  1027970.135 ± 2104.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693244.098 ops/s
# Warmup Iteration   2: 752820.263 ops/s
# Warmup Iteration   3: 977746.547 ops/s
# Warmup Iteration   4: 973435.305 ops/s
# Warmup Iteration   5: 975885.954 ops/s
# Warmup Iteration   6: 978953.671 ops/s
# Warmup Iteration   7: 977612.364 ops/s
# Warmup Iteration   8: 978952.399 ops/s
# Warmup Iteration   9: 973218.056 ops/s
# Warmup Iteration  10: 978203.728 ops/s
# Warmup Iteration  11: 820977.866 ops/s
# Warmup Iteration  12: 962516.520 ops/s
# Warmup Iteration  13: 972402.167 ops/s
# Warmup Iteration  14: 976304.571 ops/s
# Warmup Iteration  15: 976821.224 ops/s
# Warmup Iteration  16: 975064.053 ops/s
# Warmup Iteration  17: 1037101.360 ops/s
# Warmup Iteration  18: 1044849.542 ops/s
# Warmup Iteration  19: 1039946.787 ops/s
# Warmup Iteration  20: 1037767.731 ops/s
# Warmup Iteration  21: 1042857.093 ops/s
# Warmup Iteration  22: 1046012.135 ops/s
# Warmup Iteration  23: 1043554.503 ops/s
# Warmup Iteration  24: 1041980.571 ops/s
# Warmup Iteration  25: 1041497.831 ops/s
# Warmup Iteration  26: 1037688.155 ops/s
# Warmup Iteration  27: 1042431.028 ops/s
# Warmup Iteration  28: 1045431.535 ops/s
# Warmup Iteration  29: 1044025.530 ops/s
# Warmup Iteration  30: 1037833.258 ops/s
Iteration   1: 1037075.982 ops/s
Iteration   2: 1029524.905 ops/s
Iteration   3: 1034956.191 ops/s
Iteration   4: 1035464.461 ops/s
Iteration   5: 1038923.770 ops/s
Iteration   6: 1035135.410 ops/s
Iteration   7: 1042333.746 ops/s
Iteration   8: 1044511.871 ops/s
Iteration   9: 1041869.335 ops/s
Iteration  10: 1039600.648 ops/s
Iteration  11: 1039672.820 ops/s
Iteration  12: 1040138.947 ops/s
Iteration  13: 1040626.494 ops/s
Iteration  14: 1045534.918 ops/s
Iteration  15: 1035929.669 ops/s
Iteration  16: 1043405.230 ops/s
Iteration  17: 1037266.777 ops/s
Iteration  18: 1040523.446 ops/s
Iteration  19: 1038531.492 ops/s
Iteration  20: 1045320.277 ops/s
Iteration  21: 1049802.144 ops/s
Iteration  22: 1041718.388 ops/s
Iteration  23: 1043101.406 ops/s
Iteration  24: 1037933.356 ops/s
Iteration  25: 1049256.122 ops/s
Iteration  26: 1047699.287 ops/s
Iteration  27: 1048650.734 ops/s
Iteration  28: 1039743.090 ops/s
Iteration  29: 1039829.068 ops/s
Iteration  30: 1043809.216 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat":
  1040929.640 ±(99.9%) 3132.463 ops/s [Average]
  (min, avg, max) = (1029524.905, 1040929.640, 1049802.144), stdev = 4688.523
  CI (99.9%): [1037797.177, 1044062.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  1040929.640 ± 3132.463  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 696829.798 ops/s
# Warmup Iteration   2: 751450.329 ops/s
# Warmup Iteration   3: 981222.574 ops/s
# Warmup Iteration   4: 980410.632 ops/s
# Warmup Iteration   5: 982427.018 ops/s
# Warmup Iteration   6: 987941.458 ops/s
# Warmup Iteration   7: 975561.622 ops/s
# Warmup Iteration   8: 978268.558 ops/s
# Warmup Iteration   9: 982243.823 ops/s
# Warmup Iteration  10: 983152.499 ops/s
# Warmup Iteration  11: 825500.257 ops/s
# Warmup Iteration  12: 979203.368 ops/s
# Warmup Iteration  13: 985140.913 ops/s
# Warmup Iteration  14: 983483.522 ops/s
# Warmup Iteration  15: 978677.088 ops/s
# Warmup Iteration  16: 975307.144 ops/s
# Warmup Iteration  17: 1043455.726 ops/s
# Warmup Iteration  18: 1044016.648 ops/s
# Warmup Iteration  19: 1036120.864 ops/s
# Warmup Iteration  20: 1041461.261 ops/s
# Warmup Iteration  21: 1032610.473 ops/s
# Warmup Iteration  22: 1037946.273 ops/s
# Warmup Iteration  23: 1031867.717 ops/s
# Warmup Iteration  24: 1040584.656 ops/s
# Warmup Iteration  25: 1040403.126 ops/s
# Warmup Iteration  26: 1036608.354 ops/s
# Warmup Iteration  27: 1035451.102 ops/s
# Warmup Iteration  28: 1037297.701 ops/s
# Warmup Iteration  29: 1039954.584 ops/s
# Warmup Iteration  30: 1035775.954 ops/s
Iteration   1: 1038024.742 ops/s
Iteration   2: 1039577.223 ops/s
Iteration   3: 1038050.958 ops/s
Iteration   4: 1038465.029 ops/s
Iteration   5: 1040878.359 ops/s
Iteration   6: 1027141.838 ops/s
Iteration   7: 1039633.770 ops/s
Iteration   8: 1035260.614 ops/s
Iteration   9: 1034558.004 ops/s
Iteration  10: 1032375.402 ops/s
Iteration  11: 1034872.148 ops/s
Iteration  12: 1041416.720 ops/s
Iteration  13: 1034317.428 ops/s
Iteration  14: 1040885.085 ops/s
Iteration  15: 1030599.439 ops/s
Iteration  16: 1033518.252 ops/s
Iteration  17: 1035511.996 ops/s
Iteration  18: 1042162.369 ops/s
Iteration  19: 1036898.142 ops/s
Iteration  20: 1040650.214 ops/s
Iteration  21: 1033591.566 ops/s
Iteration  22: 1041278.968 ops/s
Iteration  23: 1040204.540 ops/s
Iteration  24: 1045329.257 ops/s
Iteration  25: 1046479.464 ops/s
Iteration  26: 1038857.302 ops/s
Iteration  27: 1035711.061 ops/s
Iteration  28: 1041375.157 ops/s
Iteration  29: 1046298.607 ops/s
Iteration  30: 1042738.421 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt":
  1038222.069 ±(99.9%) 3039.907 ops/s [Average]
  (min, avg, max) = (1027141.838, 1038222.069, 1046479.464), stdev = 4549.990
  CI (99.9%): [1035182.162, 1041261.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1038222.069 ± 3039.907  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697038.327 ops/s
# Warmup Iteration   2: 758590.732 ops/s
# Warmup Iteration   3: 987147.804 ops/s
# Warmup Iteration   4: 982599.199 ops/s
# Warmup Iteration   5: 982802.161 ops/s
# Warmup Iteration   6: 985875.958 ops/s
# Warmup Iteration   7: 985007.844 ops/s
# Warmup Iteration   8: 984798.504 ops/s
# Warmup Iteration   9: 980280.675 ops/s
# Warmup Iteration  10: 982970.626 ops/s
# Warmup Iteration  11: 830231.718 ops/s
# Warmup Iteration  12: 978960.280 ops/s
# Warmup Iteration  13: 983805.604 ops/s
# Warmup Iteration  14: 980511.750 ops/s
# Warmup Iteration  15: 985155.334 ops/s
# Warmup Iteration  16: 989462.802 ops/s
# Warmup Iteration  17: 1046324.695 ops/s
# Warmup Iteration  18: 1045603.896 ops/s
# Warmup Iteration  19: 1044931.058 ops/s
# Warmup Iteration  20: 1053406.822 ops/s
# Warmup Iteration  21: 1045833.602 ops/s
# Warmup Iteration  22: 1034502.553 ops/s
# Warmup Iteration  23: 1043234.321 ops/s
# Warmup Iteration  24: 1046836.392 ops/s
# Warmup Iteration  25: 1046666.282 ops/s
# Warmup Iteration  26: 1048844.952 ops/s
# Warmup Iteration  27: 1050529.927 ops/s
# Warmup Iteration  28: 1047347.898 ops/s
# Warmup Iteration  29: 1046554.609 ops/s
# Warmup Iteration  30: 1044965.098 ops/s
Iteration   1: 1049690.832 ops/s
Iteration   2: 1042418.474 ops/s
Iteration   3: 1052314.874 ops/s
Iteration   4: 1055713.421 ops/s
Iteration   5: 1046869.185 ops/s
Iteration   6: 1043564.533 ops/s
Iteration   7: 1044882.927 ops/s
Iteration   8: 1048195.108 ops/s
Iteration   9: 1051164.979 ops/s
Iteration  10: 1046632.693 ops/s
Iteration  11: 1048885.372 ops/s
Iteration  12: 1046795.226 ops/s
Iteration  13: 1049244.705 ops/s
Iteration  14: 1047209.395 ops/s
Iteration  15: 1044506.864 ops/s
Iteration  16: 1046585.220 ops/s
Iteration  17: 1056637.569 ops/s
Iteration  18: 1051059.110 ops/s
Iteration  19: 1048426.258 ops/s
Iteration  20: 1051216.021 ops/s
Iteration  21: 1040722.379 ops/s
Iteration  22: 1045600.116 ops/s
Iteration  23: 1041223.982 ops/s
Iteration  24: 1049018.817 ops/s
Iteration  25: 1039345.061 ops/s
Iteration  26: 1043514.921 ops/s
Iteration  27: 1046549.305 ops/s
Iteration  28: 1046960.993 ops/s
Iteration  29: 1041732.196 ops/s
Iteration  30: 1049080.737 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong":
  1047192.042 ±(99.9%) 2753.518 ops/s [Average]
  (min, avg, max) = (1039345.061, 1047192.042, 1056637.569), stdev = 4121.336
  CI (99.9%): [1044438.525, 1049945.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1047192.042 ± 2753.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691807.644 ops/s
# Warmup Iteration   2: 742150.073 ops/s
# Warmup Iteration   3: 968228.490 ops/s
# Warmup Iteration   4: 968054.337 ops/s
# Warmup Iteration   5: 971831.113 ops/s
# Warmup Iteration   6: 970389.198 ops/s
# Warmup Iteration   7: 970049.500 ops/s
# Warmup Iteration   8: 972092.460 ops/s
# Warmup Iteration   9: 971398.543 ops/s
# Warmup Iteration  10: 971994.094 ops/s
# Warmup Iteration  11: 843320.644 ops/s
# Warmup Iteration  12: 939911.600 ops/s
# Warmup Iteration  13: 968672.741 ops/s
# Warmup Iteration  14: 970525.044 ops/s
# Warmup Iteration  15: 964482.600 ops/s
# Warmup Iteration  16: 970627.777 ops/s
# Warmup Iteration  17: 1023545.351 ops/s
# Warmup Iteration  18: 1025366.839 ops/s
# Warmup Iteration  19: 1025014.432 ops/s
# Warmup Iteration  20: 1026427.972 ops/s
# Warmup Iteration  21: 1024451.035 ops/s
# Warmup Iteration  22: 1022911.894 ops/s
# Warmup Iteration  23: 1025910.000 ops/s
# Warmup Iteration  24: 1022745.546 ops/s
# Warmup Iteration  25: 1026210.096 ops/s
# Warmup Iteration  26: 1020977.387 ops/s
# Warmup Iteration  27: 1026383.541 ops/s
# Warmup Iteration  28: 1024274.243 ops/s
# Warmup Iteration  29: 1028573.903 ops/s
# Warmup Iteration  30: 1026016.289 ops/s
Iteration   1: 1023046.424 ops/s
Iteration   2: 1016067.593 ops/s
Iteration   3: 1019824.834 ops/s
Iteration   4: 1025527.232 ops/s
Iteration   5: 1023041.193 ops/s
Iteration   6: 1022150.604 ops/s
Iteration   7: 1027912.168 ops/s
Iteration   8: 1023805.035 ops/s
Iteration   9: 1025776.153 ops/s
Iteration  10: 1012855.852 ops/s
Iteration  11: 1024999.771 ops/s
Iteration  12: 1022737.311 ops/s
Iteration  13: 1019932.333 ops/s
Iteration  14: 1018812.996 ops/s
Iteration  15: 1032117.353 ops/s
Iteration  16: 1024830.855 ops/s
Iteration  17: 1027419.192 ops/s
Iteration  18: 1021561.803 ops/s
Iteration  19: 1026404.946 ops/s
Iteration  20: 1025736.322 ops/s
Iteration  21: 1021178.193 ops/s
Iteration  22: 1028173.579 ops/s
Iteration  23: 1019677.756 ops/s
Iteration  24: 1021602.300 ops/s
Iteration  25: 1023102.631 ops/s
Iteration  26: 1022304.307 ops/s
Iteration  27: 1024766.123 ops/s
Iteration  28: 1025837.480 ops/s
Iteration  29: 1029412.389 ops/s
Iteration  30: 1020330.841 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort":
  1023364.852 ±(99.9%) 2654.529 ops/s [Average]
  (min, avg, max) = (1012855.852, 1023364.852, 1032117.353), stdev = 3973.175
  CI (99.9%): [1020710.323, 1026019.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1023364.852 ± 2654.529  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 587671.958 ops/s
# Warmup Iteration   2: 712278.945 ops/s
# Warmup Iteration   3: 904079.394 ops/s
# Warmup Iteration   4: 895897.946 ops/s
# Warmup Iteration   5: 898240.891 ops/s
# Warmup Iteration   6: 901849.136 ops/s
# Warmup Iteration   7: 897275.444 ops/s
# Warmup Iteration   8: 895973.198 ops/s
# Warmup Iteration   9: 747980.524 ops/s
# Warmup Iteration  10: 896914.357 ops/s
# Warmup Iteration  11: 894537.148 ops/s
# Warmup Iteration  12: 892851.314 ops/s
# Warmup Iteration  13: 896452.850 ops/s
# Warmup Iteration  14: 896741.073 ops/s
# Warmup Iteration  15: 894643.205 ops/s
# Warmup Iteration  16: 895816.627 ops/s
# Warmup Iteration  17: 943391.136 ops/s
# Warmup Iteration  18: 939918.750 ops/s
# Warmup Iteration  19: 938254.467 ops/s
# Warmup Iteration  20: 944372.589 ops/s
# Warmup Iteration  21: 936046.229 ops/s
# Warmup Iteration  22: 937130.042 ops/s
# Warmup Iteration  23: 940803.553 ops/s
# Warmup Iteration  24: 936807.929 ops/s
# Warmup Iteration  25: 936848.898 ops/s
# Warmup Iteration  26: 939292.451 ops/s
# Warmup Iteration  27: 943885.610 ops/s
# Warmup Iteration  28: 942223.744 ops/s
# Warmup Iteration  29: 942988.292 ops/s
# Warmup Iteration  30: 941166.091 ops/s
Iteration   1: 941443.560 ops/s
Iteration   2: 942945.640 ops/s
Iteration   3: 944580.379 ops/s
Iteration   4: 938564.376 ops/s
Iteration   5: 949236.500 ops/s
Iteration   6: 940045.369 ops/s
Iteration   7: 941063.328 ops/s
Iteration   8: 945579.511 ops/s
Iteration   9: 938101.893 ops/s
Iteration  10: 942245.174 ops/s
Iteration  11: 948279.728 ops/s
Iteration  12: 934418.652 ops/s
Iteration  13: 950588.857 ops/s
Iteration  14: 945377.112 ops/s
Iteration  15: 940938.679 ops/s
Iteration  16: 945454.841 ops/s
Iteration  17: 943725.230 ops/s
Iteration  18: 946886.200 ops/s
Iteration  19: 942057.081 ops/s
Iteration  20: 944280.534 ops/s
Iteration  21: 942023.057 ops/s
Iteration  22: 941747.380 ops/s
Iteration  23: 945164.509 ops/s
Iteration  24: 944887.511 ops/s
Iteration  25: 947620.651 ops/s
Iteration  26: 949949.056 ops/s
Iteration  27: 943661.677 ops/s
Iteration  28: 944263.759 ops/s
Iteration  29: 940784.116 ops/s
Iteration  30: 945768.437 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator":
  943722.760 ±(99.9%) 2417.607 ops/s [Average]
  (min, avg, max) = (934418.652, 943722.760, 950588.857), stdev = 3618.560
  CI (99.9%): [941305.153, 946140.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_sortThisWithComparator  thrpt   30  943722.760 ± 2417.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 92715.052 ops/s
# Warmup Iteration   2: 102925.878 ops/s
# Warmup Iteration   3: 128070.510 ops/s
# Warmup Iteration   4: 132124.111 ops/s
# Warmup Iteration   5: 132829.772 ops/s
# Warmup Iteration   6: 131960.830 ops/s
# Warmup Iteration   7: 132415.049 ops/s
# Warmup Iteration   8: 132997.988 ops/s
# Warmup Iteration   9: 132445.918 ops/s
# Warmup Iteration  10: 132797.421 ops/s
# Warmup Iteration  11: 132215.954 ops/s
# Warmup Iteration  12: 125593.723 ops/s
# Warmup Iteration  13: 118402.099 ops/s
# Warmup Iteration  14: 131430.426 ops/s
# Warmup Iteration  15: 131833.062 ops/s
# Warmup Iteration  16: 132011.926 ops/s
# Warmup Iteration  17: 138944.599 ops/s
# Warmup Iteration  18: 139337.541 ops/s
# Warmup Iteration  19: 139431.686 ops/s
# Warmup Iteration  20: 139702.551 ops/s
# Warmup Iteration  21: 139739.165 ops/s
# Warmup Iteration  22: 140043.006 ops/s
# Warmup Iteration  23: 139724.561 ops/s
# Warmup Iteration  24: 140038.363 ops/s
# Warmup Iteration  25: 139812.865 ops/s
# Warmup Iteration  26: 139536.390 ops/s
# Warmup Iteration  27: 139585.795 ops/s
# Warmup Iteration  28: 139844.123 ops/s
# Warmup Iteration  29: 139418.787 ops/s
# Warmup Iteration  30: 139633.185 ops/s
Iteration   1: 139709.799 ops/s
Iteration   2: 140636.543 ops/s
Iteration   3: 139473.653 ops/s
Iteration   4: 140126.328 ops/s
Iteration   5: 139235.530 ops/s
Iteration   6: 140211.792 ops/s
Iteration   7: 139385.703 ops/s
Iteration   8: 140417.743 ops/s
Iteration   9: 139659.054 ops/s
Iteration  10: 141076.856 ops/s
Iteration  11: 138748.446 ops/s
Iteration  12: 139722.219 ops/s
Iteration  13: 139924.882 ops/s
Iteration  14: 140084.994 ops/s
Iteration  15: 139742.879 ops/s
Iteration  16: 140221.829 ops/s
Iteration  17: 139187.036 ops/s
Iteration  18: 138998.648 ops/s
Iteration  19: 139477.390 ops/s
Iteration  20: 139940.369 ops/s
Iteration  21: 139378.280 ops/s
Iteration  22: 140497.884 ops/s
Iteration  23: 139564.761 ops/s
Iteration  24: 140137.246 ops/s
Iteration  25: 140993.434 ops/s
Iteration  26: 140069.182 ops/s
Iteration  27: 139478.970 ops/s
Iteration  28: 139798.222 ops/s
Iteration  29: 140773.117 ops/s
Iteration  30: 139019.221 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subList":
  139856.400 ±(99.9%) 393.094 ops/s [Average]
  (min, avg, max) = (138748.446, 139856.400, 141076.856), stdev = 588.365
  CI (99.9%): [139463.306, 140249.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subList  thrpt   30  139856.400 ± 393.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217734.040 ops/s
# Warmup Iteration   2: 236265.758 ops/s
# Warmup Iteration   3: 288793.143 ops/s
# Warmup Iteration   4: 298796.422 ops/s
# Warmup Iteration   5: 299285.482 ops/s
# Warmup Iteration   6: 296824.912 ops/s
# Warmup Iteration   7: 297023.691 ops/s
# Warmup Iteration   8: 298110.050 ops/s
# Warmup Iteration   9: 296894.932 ops/s
# Warmup Iteration  10: 300054.193 ops/s
# Warmup Iteration  11: 299044.722 ops/s
# Warmup Iteration  12: 291547.614 ops/s
# Warmup Iteration  13: 263442.928 ops/s
# Warmup Iteration  14: 297978.599 ops/s
# Warmup Iteration  15: 299024.261 ops/s
# Warmup Iteration  16: 299500.367 ops/s
# Warmup Iteration  17: 314779.460 ops/s
# Warmup Iteration  18: 315899.820 ops/s
# Warmup Iteration  19: 314216.454 ops/s
# Warmup Iteration  20: 314131.552 ops/s
# Warmup Iteration  21: 312652.613 ops/s
# Warmup Iteration  22: 313764.251 ops/s
# Warmup Iteration  23: 313933.665 ops/s
# Warmup Iteration  24: 315027.733 ops/s
# Warmup Iteration  25: 314891.338 ops/s
# Warmup Iteration  26: 315409.978 ops/s
# Warmup Iteration  27: 314692.746 ops/s
# Warmup Iteration  28: 314818.827 ops/s
# Warmup Iteration  29: 314051.525 ops/s
# Warmup Iteration  30: 314838.491 ops/s
Iteration   1: 315092.056 ops/s
Iteration   2: 315912.415 ops/s
Iteration   3: 315328.395 ops/s
Iteration   4: 313963.953 ops/s
Iteration   5: 313484.731 ops/s
Iteration   6: 316008.797 ops/s
Iteration   7: 314130.271 ops/s
Iteration   8: 315949.292 ops/s
Iteration   9: 310517.495 ops/s
Iteration  10: 318377.333 ops/s
Iteration  11: 314083.670 ops/s
Iteration  12: 315378.737 ops/s
Iteration  13: 315029.535 ops/s
Iteration  14: 317494.883 ops/s
Iteration  15: 313662.229 ops/s
Iteration  16: 315155.597 ops/s
Iteration  17: 314920.470 ops/s
Iteration  18: 314321.969 ops/s
Iteration  19: 314857.999 ops/s
Iteration  20: 316543.682 ops/s
Iteration  21: 314519.550 ops/s
Iteration  22: 315184.385 ops/s
Iteration  23: 316127.314 ops/s
Iteration  24: 315348.688 ops/s
Iteration  25: 316384.353 ops/s
Iteration  26: 315268.175 ops/s
Iteration  27: 316659.842 ops/s
Iteration  28: 313660.104 ops/s
Iteration  29: 314599.053 ops/s
Iteration  30: 314624.841 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator":
  315086.327 ±(99.9%) 950.200 ops/s [Average]
  (min, avg, max) = (310517.495, 315086.327, 318377.333), stdev = 1422.214
  CI (99.9%): [314136.128, 316036.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score     Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_subListListIterator  thrpt   30  315086.327 ± 950.200  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9023723.437 ops/s
# Warmup Iteration   2: 19519456.822 ops/s
# Warmup Iteration   3: 15890617.984 ops/s
# Warmup Iteration   4: 18781300.446 ops/s
# Warmup Iteration   5: 18818361.199 ops/s
# Warmup Iteration   6: 18750928.936 ops/s
# Warmup Iteration   7: 18740343.544 ops/s
# Warmup Iteration   8: 18730852.606 ops/s
# Warmup Iteration   9: 18848680.085 ops/s
# Warmup Iteration  10: 18490221.505 ops/s
# Warmup Iteration  11: 18815389.381 ops/s
# Warmup Iteration  12: 18865119.203 ops/s
# Warmup Iteration  13: 18708999.977 ops/s
# Warmup Iteration  14: 18780661.374 ops/s
# Warmup Iteration  15: 18889152.558 ops/s
# Warmup Iteration  16: 18860080.524 ops/s
# Warmup Iteration  17: 18908108.421 ops/s
# Warmup Iteration  18: 18787290.584 ops/s
# Warmup Iteration  19: 18844483.971 ops/s
# Warmup Iteration  20: 18820180.928 ops/s
# Warmup Iteration  21: 18755881.042 ops/s
# Warmup Iteration  22: 18759206.365 ops/s
# Warmup Iteration  23: 18755738.809 ops/s
# Warmup Iteration  24: 18700436.170 ops/s
# Warmup Iteration  25: 18871146.596 ops/s
# Warmup Iteration  26: 18537255.496 ops/s
# Warmup Iteration  27: 18823022.499 ops/s
# Warmup Iteration  28: 18774226.073 ops/s
# Warmup Iteration  29: 18795523.412 ops/s
# Warmup Iteration  30: 18653819.487 ops/s
Iteration   1: 18721511.895 ops/s
Iteration   2: 18678907.777 ops/s
Iteration   3: 18686691.671 ops/s
Iteration   4: 18655572.542 ops/s
Iteration   5: 18668636.070 ops/s
Iteration   6: 18805106.556 ops/s
Iteration   7: 18845974.717 ops/s
Iteration   8: 18760984.242 ops/s
Iteration   9: 18672023.214 ops/s
Iteration  10: 18736159.969 ops/s
Iteration  11: 18700700.536 ops/s
Iteration  12: 18762454.705 ops/s
Iteration  13: 18723390.905 ops/s
Iteration  14: 18838982.798 ops/s
Iteration  15: 18799731.019 ops/s
Iteration  16: 18744340.742 ops/s
Iteration  17: 18799752.078 ops/s
Iteration  18: 18742190.901 ops/s
Iteration  19: 18858740.050 ops/s
Iteration  20: 18844612.113 ops/s
Iteration  21: 18702620.477 ops/s
Iteration  22: 18802776.314 ops/s
Iteration  23: 18798397.191 ops/s
Iteration  24: 18738217.151 ops/s
Iteration  25: 18793831.343 ops/s
Iteration  26: 18637295.064 ops/s
Iteration  27: 18794770.250 ops/s
Iteration  28: 18827508.168 ops/s
Iteration  29: 18762886.411 ops/s
Iteration  30: 18738480.204 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_tap":
  18754774.902 ±(99.9%) 41304.869 ops/s [Average]
  (min, avg, max) = (18637295.064, 18754774.902, 18858740.050), stdev = 61823.188
  CI (99.9%): [18713470.033, 18796079.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  18754774.902 ± 41304.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4525628.059 ops/s
# Warmup Iteration   2: 10116568.843 ops/s
# Warmup Iteration   3: 8448505.264 ops/s
# Warmup Iteration   4: 10125337.951 ops/s
# Warmup Iteration   5: 10090470.676 ops/s
# Warmup Iteration   6: 10076038.885 ops/s
# Warmup Iteration   7: 10111087.231 ops/s
# Warmup Iteration   8: 10083720.779 ops/s
# Warmup Iteration   9: 10032991.572 ops/s
# Warmup Iteration  10: 10066505.269 ops/s
# Warmup Iteration  11: 10058275.693 ops/s
# Warmup Iteration  12: 10107605.547 ops/s
# Warmup Iteration  13: 10092454.100 ops/s
# Warmup Iteration  14: 10045566.958 ops/s
# Warmup Iteration  15: 10088447.449 ops/s
# Warmup Iteration  16: 10097828.161 ops/s
# Warmup Iteration  17: 10096709.423 ops/s
# Warmup Iteration  18: 10080600.255 ops/s
# Warmup Iteration  19: 10035809.783 ops/s
# Warmup Iteration  20: 10122936.088 ops/s
# Warmup Iteration  21: 10073228.627 ops/s
# Warmup Iteration  22: 10065787.261 ops/s
# Warmup Iteration  23: 10077603.681 ops/s
# Warmup Iteration  24: 10088512.901 ops/s
# Warmup Iteration  25: 10071660.119 ops/s
# Warmup Iteration  26: 10141036.382 ops/s
# Warmup Iteration  27: 10124999.631 ops/s
# Warmup Iteration  28: 10090400.709 ops/s
# Warmup Iteration  29: 10081561.249 ops/s
# Warmup Iteration  30: 10156576.881 ops/s
Iteration   1: 10119185.676 ops/s
Iteration   2: 10142298.540 ops/s
Iteration   3: 10153337.225 ops/s
Iteration   4: 10136419.862 ops/s
Iteration   5: 10129732.416 ops/s
Iteration   6: 10150862.519 ops/s
Iteration   7: 10135154.226 ops/s
Iteration   8: 10088752.178 ops/s
Iteration   9: 10170171.639 ops/s
Iteration  10: 10097825.862 ops/s
Iteration  11: 10138331.310 ops/s
Iteration  12: 10085183.016 ops/s
Iteration  13: 10095953.044 ops/s
Iteration  14: 10090747.667 ops/s
Iteration  15: 10088154.418 ops/s
Iteration  16: 10052495.675 ops/s
Iteration  17: 9991478.891 ops/s
Iteration  18: 10099037.507 ops/s
Iteration  19: 10063707.809 ops/s
Iteration  20: 10131351.116 ops/s
Iteration  21: 10052639.399 ops/s
Iteration  22: 10090000.867 ops/s
Iteration  23: 10108021.059 ops/s
Iteration  24: 10122703.436 ops/s
Iteration  25: 10038309.835 ops/s
Iteration  26: 10120438.560 ops/s
Iteration  27: 10102146.977 ops/s
Iteration  28: 10073825.723 ops/s
Iteration  29: 10125631.860 ops/s
Iteration  30: 10054350.599 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  10101608.297 ±(99.9%) 26275.934 ops/s [Average]
  (min, avg, max) = (9991478.891, 10101608.297, 10170171.639), stdev = 39328.584
  CI (99.9%): [10075332.363, 10127884.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  10101608.297 ± 26275.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9005399.596 ops/s
# Warmup Iteration   2: 18775040.137 ops/s
# Warmup Iteration   3: 16161694.116 ops/s
# Warmup Iteration   4: 18994468.948 ops/s
# Warmup Iteration   5: 18946817.146 ops/s
# Warmup Iteration   6: 18997605.605 ops/s
# Warmup Iteration   7: 19110383.318 ops/s
# Warmup Iteration   8: 19109784.502 ops/s
# Warmup Iteration   9: 19085174.458 ops/s
# Warmup Iteration  10: 19074376.131 ops/s
# Warmup Iteration  11: 19145252.202 ops/s
# Warmup Iteration  12: 19144316.632 ops/s
# Warmup Iteration  13: 19015422.670 ops/s
# Warmup Iteration  14: 19078189.368 ops/s
# Warmup Iteration  15: 19128293.572 ops/s
# Warmup Iteration  16: 19197439.194 ops/s
# Warmup Iteration  17: 19080516.164 ops/s
# Warmup Iteration  18: 18992227.168 ops/s
# Warmup Iteration  19: 19023442.587 ops/s
# Warmup Iteration  20: 18935866.558 ops/s
# Warmup Iteration  21: 19005322.841 ops/s
# Warmup Iteration  22: 19076030.286 ops/s
# Warmup Iteration  23: 19095693.617 ops/s
# Warmup Iteration  24: 19102836.703 ops/s
# Warmup Iteration  25: 19137332.581 ops/s
# Warmup Iteration  26: 19122941.704 ops/s
# Warmup Iteration  27: 19036153.255 ops/s
# Warmup Iteration  28: 19084753.537 ops/s
# Warmup Iteration  29: 19024625.171 ops/s
# Warmup Iteration  30: 19088887.063 ops/s
Iteration   1: 19064925.948 ops/s
Iteration   2: 18989278.863 ops/s
Iteration   3: 19123765.421 ops/s
Iteration   4: 19090569.602 ops/s
Iteration   5: 18985025.671 ops/s
Iteration   6: 19057753.845 ops/s
Iteration   7: 19122864.340 ops/s
Iteration   8: 19003702.391 ops/s
Iteration   9: 18940366.058 ops/s
Iteration  10: 19073242.508 ops/s
Iteration  11: 18995102.347 ops/s
Iteration  12: 18984277.615 ops/s
Iteration  13: 19184367.201 ops/s
Iteration  14: 19029886.323 ops/s
Iteration  15: 19085320.541 ops/s
Iteration  16: 19120935.711 ops/s
Iteration  17: 19031623.377 ops/s
Iteration  18: 19097057.203 ops/s
Iteration  19: 19134160.662 ops/s
Iteration  20: 19091317.329 ops/s
Iteration  21: 19068068.516 ops/s
Iteration  22: 19146396.575 ops/s
Iteration  23: 19091994.994 ops/s
Iteration  24: 19109318.320 ops/s
Iteration  25: 19094878.747 ops/s
Iteration  26: 19127133.315 ops/s
Iteration  27: 18956235.896 ops/s
Iteration  28: 19233306.577 ops/s
Iteration  29: 19219190.714 ops/s
Iteration  30: 19107836.249 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone":
  19078663.429 ±(99.9%) 48255.832 ops/s [Average]
  (min, avg, max) = (18940366.058, 19078663.429, 19233306.577), stdev = 72227.064
  CI (99.9%): [19030407.596, 19126919.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testClone  thrpt   30  19078663.429 ± 48255.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15419291.218 ops/s
# Warmup Iteration   2: 33278338.990 ops/s
# Warmup Iteration   3: 27329688.633 ops/s
# Warmup Iteration   4: 31939945.613 ops/s
# Warmup Iteration   5: 31916015.774 ops/s
# Warmup Iteration   6: 31811822.462 ops/s
# Warmup Iteration   7: 31878116.721 ops/s
# Warmup Iteration   8: 31948653.472 ops/s
# Warmup Iteration   9: 32029336.061 ops/s
# Warmup Iteration  10: 31998579.766 ops/s
# Warmup Iteration  11: 31837629.183 ops/s
# Warmup Iteration  12: 31800991.200 ops/s
# Warmup Iteration  13: 31795395.292 ops/s
# Warmup Iteration  14: 31795271.045 ops/s
# Warmup Iteration  15: 31799331.697 ops/s
# Warmup Iteration  16: 31848433.783 ops/s
# Warmup Iteration  17: 31847659.968 ops/s
# Warmup Iteration  18: 31689451.264 ops/s
# Warmup Iteration  19: 31787802.863 ops/s
# Warmup Iteration  20: 31843322.717 ops/s
# Warmup Iteration  21: 31750936.994 ops/s
# Warmup Iteration  22: 31641472.130 ops/s
# Warmup Iteration  23: 31477602.583 ops/s
# Warmup Iteration  24: 31706990.906 ops/s
# Warmup Iteration  25: 31797048.552 ops/s
# Warmup Iteration  26: 31626296.189 ops/s
# Warmup Iteration  27: 31779983.061 ops/s
# Warmup Iteration  28: 31755696.886 ops/s
# Warmup Iteration  29: 31809148.354 ops/s
# Warmup Iteration  30: 31858406.575 ops/s
Iteration   1: 31714526.892 ops/s
Iteration   2: 31473408.339 ops/s
Iteration   3: 31639123.950 ops/s
Iteration   4: 31906781.336 ops/s
Iteration   5: 31546503.713 ops/s
Iteration   6: 31767681.506 ops/s
Iteration   7: 31663769.397 ops/s
Iteration   8: 31900896.442 ops/s
Iteration   9: 31770441.508 ops/s
Iteration  10: 31685774.202 ops/s
Iteration  11: 31647511.208 ops/s
Iteration  12: 31869121.657 ops/s
Iteration  13: 31937983.353 ops/s
Iteration  14: 31821172.675 ops/s
Iteration  15: 31801595.104 ops/s
Iteration  16: 31689589.232 ops/s
Iteration  17: 31750280.839 ops/s
Iteration  18: 31760767.435 ops/s
Iteration  19: 31569513.177 ops/s
Iteration  20: 31781549.762 ops/s
Iteration  21: 31877899.029 ops/s
Iteration  22: 31728254.153 ops/s
Iteration  23: 31999920.998 ops/s
Iteration  24: 31563025.146 ops/s
Iteration  25: 31835503.383 ops/s
Iteration  26: 31715140.961 ops/s
Iteration  27: 31900544.257 ops/s
Iteration  28: 31711934.595 ops/s
Iteration  29: 31916551.675 ops/s
Iteration  30: 31895834.834 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals":
  31761420.025 ±(99.9%) 86684.988 ops/s [Average]
  (min, avg, max) = (31473408.339, 31761420.025, 31999920.998), stdev = 129746.020
  CI (99.9%): [31674735.037, 31848105.014] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testEquals  thrpt   30  31761420.025 ± 86684.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4223013.549 ops/s
# Warmup Iteration   2: 9067219.697 ops/s
# Warmup Iteration   3: 7715555.014 ops/s
# Warmup Iteration   4: 9055475.054 ops/s
# Warmup Iteration   5: 9048752.754 ops/s
# Warmup Iteration   6: 9085428.509 ops/s
# Warmup Iteration   7: 9062466.679 ops/s
# Warmup Iteration   8: 9032523.291 ops/s
# Warmup Iteration   9: 9097329.711 ops/s
# Warmup Iteration  10: 9062223.880 ops/s
# Warmup Iteration  11: 9064682.285 ops/s
# Warmup Iteration  12: 9000262.068 ops/s
# Warmup Iteration  13: 9009280.721 ops/s
# Warmup Iteration  14: 9067193.321 ops/s
# Warmup Iteration  15: 9094180.978 ops/s
# Warmup Iteration  16: 9120082.608 ops/s
# Warmup Iteration  17: 8912632.949 ops/s
# Warmup Iteration  18: 9026546.783 ops/s
# Warmup Iteration  19: 9080670.152 ops/s
# Warmup Iteration  20: 9011658.854 ops/s
# Warmup Iteration  21: 9036711.987 ops/s
# Warmup Iteration  22: 9030078.179 ops/s
# Warmup Iteration  23: 8971279.906 ops/s
# Warmup Iteration  24: 9009015.081 ops/s
# Warmup Iteration  25: 9046388.394 ops/s
# Warmup Iteration  26: 9037672.695 ops/s
# Warmup Iteration  27: 9042887.435 ops/s
# Warmup Iteration  28: 9058050.124 ops/s
# Warmup Iteration  29: 9069561.757 ops/s
# Warmup Iteration  30: 9074110.208 ops/s
Iteration   1: 9076895.552 ops/s
Iteration   2: 9059739.689 ops/s
Iteration   3: 9063661.219 ops/s
Iteration   4: 9033504.181 ops/s
Iteration   5: 8950820.330 ops/s
Iteration   6: 9029233.031 ops/s
Iteration   7: 9010981.109 ops/s
Iteration   8: 9031214.249 ops/s
Iteration   9: 9014680.112 ops/s
Iteration  10: 9025858.029 ops/s
Iteration  11: 9017533.488 ops/s
Iteration  12: 8980869.939 ops/s
Iteration  13: 9005948.502 ops/s
Iteration  14: 9052020.174 ops/s
Iteration  15: 9005148.930 ops/s
Iteration  16: 8980215.116 ops/s
Iteration  17: 8992523.564 ops/s
Iteration  18: 9095925.096 ops/s
Iteration  19: 9031361.167 ops/s
Iteration  20: 9009051.082 ops/s
Iteration  21: 9007631.522 ops/s
Iteration  22: 8980963.575 ops/s
Iteration  23: 8948471.175 ops/s
Iteration  24: 9031283.580 ops/s
Iteration  25: 9077934.433 ops/s
Iteration  26: 9082271.665 ops/s
Iteration  27: 9010838.061 ops/s
Iteration  28: 8979377.058 ops/s
Iteration  29: 8955505.412 ops/s
Iteration  30: 8943445.037 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  9016163.536 ±(99.9%) 27419.644 ops/s [Average]
  (min, avg, max) = (8943445.037, 9016163.536, 9095925.096), stdev = 41040.436
  CI (99.9%): [8988743.891, 9043583.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  9016163.536 ± 27419.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704046.354 ops/s
# Warmup Iteration   2: 756775.289 ops/s
# Warmup Iteration   3: 993751.575 ops/s
# Warmup Iteration   4: 996187.024 ops/s
# Warmup Iteration   5: 993712.911 ops/s
# Warmup Iteration   6: 992315.610 ops/s
# Warmup Iteration   7: 993073.524 ops/s
# Warmup Iteration   8: 994863.978 ops/s
# Warmup Iteration   9: 986586.770 ops/s
# Warmup Iteration  10: 988566.439 ops/s
# Warmup Iteration  11: 867903.383 ops/s
# Warmup Iteration  12: 969895.489 ops/s
# Warmup Iteration  13: 994224.254 ops/s
# Warmup Iteration  14: 993832.739 ops/s
# Warmup Iteration  15: 994659.216 ops/s
# Warmup Iteration  16: 996466.614 ops/s
# Warmup Iteration  17: 1041850.399 ops/s
# Warmup Iteration  18: 1039014.096 ops/s
# Warmup Iteration  19: 1037637.619 ops/s
# Warmup Iteration  20: 1040262.315 ops/s
# Warmup Iteration  21: 1037000.929 ops/s
# Warmup Iteration  22: 1045311.789 ops/s
# Warmup Iteration  23: 1035032.097 ops/s
# Warmup Iteration  24: 1038181.946 ops/s
# Warmup Iteration  25: 1038744.131 ops/s
# Warmup Iteration  26: 1041177.251 ops/s
# Warmup Iteration  27: 1035450.298 ops/s
# Warmup Iteration  28: 1028017.553 ops/s
# Warmup Iteration  29: 1039526.235 ops/s
# Warmup Iteration  30: 1041013.343 ops/s
Iteration   1: 1045375.925 ops/s
Iteration   2: 1040226.456 ops/s
Iteration   3: 1037371.588 ops/s
Iteration   4: 1042038.969 ops/s
Iteration   5: 1040000.852 ops/s
Iteration   6: 1033488.809 ops/s
Iteration   7: 1035139.223 ops/s
Iteration   8: 1047582.359 ops/s
Iteration   9: 1044140.699 ops/s
Iteration  10: 1040917.904 ops/s
Iteration  11: 1036753.208 ops/s
Iteration  12: 1040214.541 ops/s
Iteration  13: 1039829.758 ops/s
Iteration  14: 1034572.656 ops/s
Iteration  15: 1041704.653 ops/s
Iteration  16: 1043051.617 ops/s
Iteration  17: 1036717.025 ops/s
Iteration  18: 1039872.550 ops/s
Iteration  19: 1035763.231 ops/s
Iteration  20: 1043564.028 ops/s
Iteration  21: 1034899.674 ops/s
Iteration  22: 1033238.997 ops/s
Iteration  23: 1041325.706 ops/s
Iteration  24: 1041815.063 ops/s
Iteration  25: 1037370.754 ops/s
Iteration  26: 1045778.591 ops/s
Iteration  27: 1035829.673 ops/s
Iteration  28: 1041455.693 ops/s
Iteration  29: 1033346.798 ops/s
Iteration  30: 1036761.036 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_with":
  1039338.268 ±(99.9%) 2641.952 ops/s [Average]
  (min, avg, max) = (1033238.997, 1039338.268, 1047582.359), stdev = 3954.350
  CI (99.9%): [1036696.315, 1041980.220] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  1039338.268 ± 2641.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691749.741 ops/s
# Warmup Iteration   2: 757436.182 ops/s
# Warmup Iteration   3: 996480.581 ops/s
# Warmup Iteration   4: 989847.838 ops/s
# Warmup Iteration   5: 992229.677 ops/s
# Warmup Iteration   6: 988015.812 ops/s
# Warmup Iteration   7: 990647.528 ops/s
# Warmup Iteration   8: 996278.826 ops/s
# Warmup Iteration   9: 990024.560 ops/s
# Warmup Iteration  10: 986659.334 ops/s
# Warmup Iteration  11: 837011.364 ops/s
# Warmup Iteration  12: 994528.627 ops/s
# Warmup Iteration  13: 993545.127 ops/s
# Warmup Iteration  14: 988738.794 ops/s
# Warmup Iteration  15: 988922.238 ops/s
# Warmup Iteration  16: 990638.718 ops/s
# Warmup Iteration  17: 1044223.620 ops/s
# Warmup Iteration  18: 1053167.318 ops/s
# Warmup Iteration  19: 1044450.774 ops/s
# Warmup Iteration  20: 1051421.092 ops/s
# Warmup Iteration  21: 1053981.593 ops/s
# Warmup Iteration  22: 1048957.561 ops/s
# Warmup Iteration  23: 1049263.223 ops/s
# Warmup Iteration  24: 1047621.852 ops/s
# Warmup Iteration  25: 1048284.823 ops/s
# Warmup Iteration  26: 1049521.899 ops/s
# Warmup Iteration  27: 1050505.275 ops/s
# Warmup Iteration  28: 1047822.031 ops/s
# Warmup Iteration  29: 1047585.499 ops/s
# Warmup Iteration  30: 1045774.978 ops/s
Iteration   1: 1053149.379 ops/s
Iteration   2: 1044817.623 ops/s
Iteration   3: 1048905.380 ops/s
Iteration   4: 1049199.254 ops/s
Iteration   5: 1044604.272 ops/s
Iteration   6: 1046438.565 ops/s
Iteration   7: 1048143.334 ops/s
Iteration   8: 1053491.835 ops/s
Iteration   9: 1051603.273 ops/s
Iteration  10: 1048225.786 ops/s
Iteration  11: 1054070.691 ops/s
Iteration  12: 1048768.781 ops/s
Iteration  13: 1052044.973 ops/s
Iteration  14: 1049690.737 ops/s
Iteration  15: 1050096.276 ops/s
Iteration  16: 1055343.399 ops/s
Iteration  17: 1053238.560 ops/s
Iteration  18: 1053619.394 ops/s
Iteration  19: 1050206.995 ops/s
Iteration  20: 1050015.632 ops/s
Iteration  21: 1048601.190 ops/s
Iteration  22: 1049474.798 ops/s
Iteration  23: 1050210.391 ops/s
Iteration  24: 1050992.475 ops/s
Iteration  25: 1056940.517 ops/s
Iteration  26: 1050361.782 ops/s
Iteration  27: 1049200.213 ops/s
Iteration  28: 1050331.972 ops/s
Iteration  29: 1047440.383 ops/s
Iteration  30: 1045168.107 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll":
  1050146.532 ±(99.9%) 1992.383 ops/s [Average]
  (min, avg, max) = (1044604.272, 1050146.532, 1056940.517), stdev = 2982.106
  CI (99.9%): [1048154.149, 1052138.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  1050146.532 ± 1992.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710535.610 ops/s
# Warmup Iteration   2: 762574.440 ops/s
# Warmup Iteration   3: 989315.156 ops/s
# Warmup Iteration   4: 993386.265 ops/s
# Warmup Iteration   5: 990275.995 ops/s
# Warmup Iteration   6: 987084.095 ops/s
# Warmup Iteration   7: 991292.138 ops/s
# Warmup Iteration   8: 992574.792 ops/s
# Warmup Iteration   9: 998800.928 ops/s
# Warmup Iteration  10: 989696.059 ops/s
# Warmup Iteration  11: 860953.608 ops/s
# Warmup Iteration  12: 973069.766 ops/s
# Warmup Iteration  13: 993326.888 ops/s
# Warmup Iteration  14: 994300.783 ops/s
# Warmup Iteration  15: 995303.008 ops/s
# Warmup Iteration  16: 993875.538 ops/s
# Warmup Iteration  17: 1051554.205 ops/s
# Warmup Iteration  18: 1056641.780 ops/s
# Warmup Iteration  19: 1048540.556 ops/s
# Warmup Iteration  20: 1052482.509 ops/s
# Warmup Iteration  21: 1054983.803 ops/s
# Warmup Iteration  22: 1057642.526 ops/s
# Warmup Iteration  23: 1055103.773 ops/s
# Warmup Iteration  24: 1060449.892 ops/s
# Warmup Iteration  25: 1057879.845 ops/s
# Warmup Iteration  26: 1050690.399 ops/s
# Warmup Iteration  27: 1055520.113 ops/s
# Warmup Iteration  28: 1054792.005 ops/s
# Warmup Iteration  29: 1055303.725 ops/s
# Warmup Iteration  30: 1050676.423 ops/s
Iteration   1: 1055545.402 ops/s
Iteration   2: 1053607.148 ops/s
Iteration   3: 1051967.237 ops/s
Iteration   4: 1055853.640 ops/s
Iteration   5: 1053014.435 ops/s
Iteration   6: 1047390.218 ops/s
Iteration   7: 1047316.942 ops/s
Iteration   8: 1056350.022 ops/s
Iteration   9: 1049755.511 ops/s
Iteration  10: 1053109.781 ops/s
Iteration  11: 1058896.451 ops/s
Iteration  12: 1055127.006 ops/s
Iteration  13: 1053187.793 ops/s
Iteration  14: 1059529.965 ops/s
Iteration  15: 1057585.470 ops/s
Iteration  16: 1059283.757 ops/s
Iteration  17: 1053780.383 ops/s
Iteration  18: 1057416.817 ops/s
Iteration  19: 1057686.776 ops/s
Iteration  20: 1058367.807 ops/s
Iteration  21: 1047540.946 ops/s
Iteration  22: 1058257.493 ops/s
Iteration  23: 1051873.118 ops/s
Iteration  24: 1052795.756 ops/s
Iteration  25: 1054602.712 ops/s
Iteration  26: 1054253.816 ops/s
Iteration  27: 1058072.336 ops/s
Iteration  28: 1057791.402 ops/s
Iteration  29: 1056461.061 ops/s
Iteration  30: 1057036.876 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_without":
  1054781.936 ±(99.9%) 2352.537 ops/s [Average]
  (min, avg, max) = (1047316.942, 1054781.936, 1059529.965), stdev = 3521.167
  CI (99.9%): [1052429.399, 1057134.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  1054781.936 ± 2352.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 687283.297 ops/s
# Warmup Iteration   2: 755559.500 ops/s
# Warmup Iteration   3: 988237.225 ops/s
# Warmup Iteration   4: 985105.334 ops/s
# Warmup Iteration   5: 983464.237 ops/s
# Warmup Iteration   6: 986516.939 ops/s
# Warmup Iteration   7: 984685.923 ops/s
# Warmup Iteration   8: 983330.059 ops/s
# Warmup Iteration   9: 983735.755 ops/s
# Warmup Iteration  10: 988709.914 ops/s
# Warmup Iteration  11: 831311.892 ops/s
# Warmup Iteration  12: 985987.475 ops/s
# Warmup Iteration  13: 984778.599 ops/s
# Warmup Iteration  14: 983386.933 ops/s
# Warmup Iteration  15: 981964.655 ops/s
# Warmup Iteration  16: 982570.908 ops/s
# Warmup Iteration  17: 1043222.174 ops/s
# Warmup Iteration  18: 1046079.001 ops/s
# Warmup Iteration  19: 1045398.083 ops/s
# Warmup Iteration  20: 1041016.820 ops/s
# Warmup Iteration  21: 1050079.567 ops/s
# Warmup Iteration  22: 1044046.282 ops/s
# Warmup Iteration  23: 1044472.234 ops/s
# Warmup Iteration  24: 1042322.753 ops/s
# Warmup Iteration  25: 1048752.349 ops/s
# Warmup Iteration  26: 1044121.583 ops/s
# Warmup Iteration  27: 1044551.734 ops/s
# Warmup Iteration  28: 1043188.538 ops/s
# Warmup Iteration  29: 1042228.460 ops/s
# Warmup Iteration  30: 1044842.624 ops/s
Iteration   1: 1039099.553 ops/s
Iteration   2: 1045861.329 ops/s
Iteration   3: 1038339.403 ops/s
Iteration   4: 1034559.109 ops/s
Iteration   5: 1042225.446 ops/s
Iteration   6: 1037791.853 ops/s
Iteration   7: 1043315.976 ops/s
Iteration   8: 1043153.731 ops/s
Iteration   9: 1039650.185 ops/s
Iteration  10: 1045007.696 ops/s
Iteration  11: 1042485.840 ops/s
Iteration  12: 1042300.790 ops/s
Iteration  13: 1043040.018 ops/s
Iteration  14: 1039133.376 ops/s
Iteration  15: 1043336.169 ops/s
Iteration  16: 1044435.687 ops/s
Iteration  17: 1039871.591 ops/s
Iteration  18: 1046863.998 ops/s
Iteration  19: 1041901.156 ops/s
Iteration  20: 1037585.769 ops/s
Iteration  21: 1046799.235 ops/s
Iteration  22: 1046599.847 ops/s
Iteration  23: 1050094.109 ops/s
Iteration  24: 1047250.211 ops/s
Iteration  25: 1046301.614 ops/s
Iteration  26: 1046143.854 ops/s
Iteration  27: 1050185.777 ops/s
Iteration  28: 1040196.378 ops/s
Iteration  29: 1045918.057 ops/s
Iteration  30: 1044401.593 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  1043128.312 ±(99.9%) 2538.462 ops/s [Average]
  (min, avg, max) = (1034559.109, 1043128.312, 1050185.777), stdev = 3799.451
  CI (99.9%): [1040589.850, 1045666.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  1043128.312 ± 2538.462  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575009.703 ops/s
# Warmup Iteration   2: 1317358.487 ops/s
# Warmup Iteration   3: 1465365.436 ops/s
# Warmup Iteration   4: 1477883.040 ops/s
# Warmup Iteration   5: 1215109.510 ops/s
# Warmup Iteration   6: 1479769.240 ops/s
# Warmup Iteration   7: 1486110.676 ops/s
# Warmup Iteration   8: 1477664.555 ops/s
# Warmup Iteration   9: 1482626.068 ops/s
# Warmup Iteration  10: 1482805.935 ops/s
# Warmup Iteration  11: 1479420.350 ops/s
# Warmup Iteration  12: 1481819.499 ops/s
# Warmup Iteration  13: 1476440.503 ops/s
# Warmup Iteration  14: 1478402.231 ops/s
# Warmup Iteration  15: 1483385.516 ops/s
# Warmup Iteration  16: 1484343.557 ops/s
# Warmup Iteration  17: 1475612.504 ops/s
# Warmup Iteration  18: 1468946.891 ops/s
# Warmup Iteration  19: 1483794.742 ops/s
# Warmup Iteration  20: 1477745.701 ops/s
# Warmup Iteration  21: 1482085.942 ops/s
# Warmup Iteration  22: 1482353.315 ops/s
# Warmup Iteration  23: 1481080.254 ops/s
# Warmup Iteration  24: 1479947.337 ops/s
# Warmup Iteration  25: 1482440.432 ops/s
# Warmup Iteration  26: 1484502.096 ops/s
# Warmup Iteration  27: 1477138.217 ops/s
# Warmup Iteration  28: 1474731.735 ops/s
# Warmup Iteration  29: 1480300.442 ops/s
# Warmup Iteration  30: 1477482.067 ops/s
Iteration   1: 1489508.696 ops/s
Iteration   2: 1479532.463 ops/s
Iteration   3: 1480263.145 ops/s
Iteration   4: 1490099.027 ops/s
Iteration   5: 1479781.304 ops/s
Iteration   6: 1480780.977 ops/s
Iteration   7: 1479489.916 ops/s
Iteration   8: 1482974.381 ops/s
Iteration   9: 1483978.374 ops/s
Iteration  10: 1482057.124 ops/s
Iteration  11: 1484046.289 ops/s
Iteration  12: 1488263.613 ops/s
Iteration  13: 1477773.255 ops/s
Iteration  14: 1478637.254 ops/s
Iteration  15: 1487144.986 ops/s
Iteration  16: 1484293.906 ops/s
Iteration  17: 1483454.519 ops/s
Iteration  18: 1479982.882 ops/s
Iteration  19: 1477854.199 ops/s
Iteration  20: 1477686.549 ops/s
Iteration  21: 1481772.187 ops/s
Iteration  22: 1486440.570 ops/s
Iteration  23: 1479315.173 ops/s
Iteration  24: 1483902.192 ops/s
Iteration  25: 1482851.006 ops/s
Iteration  26: 1482131.579 ops/s
Iteration  27: 1482392.306 ops/s
Iteration  28: 1474789.997 ops/s
Iteration  29: 1480996.550 ops/s
Iteration  30: 1484913.774 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zip":
  1482236.940 ±(99.9%) 2438.288 ops/s [Average]
  (min, avg, max) = (1474789.997, 1482236.940, 1490099.027), stdev = 3649.515
  CI (99.9%): [1479798.652, 1484675.228] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  1482236.940 ± 2438.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1028261.918 ops/s
# Warmup Iteration   2: 2482554.890 ops/s
# Warmup Iteration   3: 2691028.436 ops/s
# Warmup Iteration   4: 2315018.840 ops/s
# Warmup Iteration   5: 2606907.116 ops/s
# Warmup Iteration   6: 2702148.909 ops/s
# Warmup Iteration   7: 2686260.443 ops/s
# Warmup Iteration   8: 2714731.941 ops/s
# Warmup Iteration   9: 2693031.524 ops/s
# Warmup Iteration  10: 2697238.393 ops/s
# Warmup Iteration  11: 2691446.606 ops/s
# Warmup Iteration  12: 2697949.475 ops/s
# Warmup Iteration  13: 2706766.726 ops/s
# Warmup Iteration  14: 2719578.754 ops/s
# Warmup Iteration  15: 2708244.371 ops/s
# Warmup Iteration  16: 2702543.134 ops/s
# Warmup Iteration  17: 2685902.239 ops/s
# Warmup Iteration  18: 2700748.844 ops/s
# Warmup Iteration  19: 2685264.370 ops/s
# Warmup Iteration  20: 2698077.464 ops/s
# Warmup Iteration  21: 2671575.575 ops/s
# Warmup Iteration  22: 2700996.226 ops/s
# Warmup Iteration  23: 2705944.911 ops/s
# Warmup Iteration  24: 2706482.648 ops/s
# Warmup Iteration  25: 2698454.996 ops/s
# Warmup Iteration  26: 2701789.588 ops/s
# Warmup Iteration  27: 2694695.784 ops/s
# Warmup Iteration  28: 2698576.101 ops/s
# Warmup Iteration  29: 2698693.116 ops/s
# Warmup Iteration  30: 2708532.214 ops/s
Iteration   1: 2711205.020 ops/s
Iteration   2: 2700663.034 ops/s
Iteration   3: 2711782.192 ops/s
Iteration   4: 2704427.546 ops/s
Iteration   5: 2707932.561 ops/s
Iteration   6: 2702909.339 ops/s
Iteration   7: 2714578.981 ops/s
Iteration   8: 2702769.598 ops/s
Iteration   9: 2712045.946 ops/s
Iteration  10: 2709481.341 ops/s
Iteration  11: 2694776.481 ops/s
Iteration  12: 2700649.113 ops/s
Iteration  13: 2703495.618 ops/s
Iteration  14: 2698229.527 ops/s
Iteration  15: 2685584.481 ops/s
Iteration  16: 2694924.982 ops/s
Iteration  17: 2690431.154 ops/s
Iteration  18: 2706530.670 ops/s
Iteration  19: 2698422.239 ops/s
Iteration  20: 2693506.967 ops/s
Iteration  21: 2707385.606 ops/s
Iteration  22: 2700678.840 ops/s
Iteration  23: 2699395.976 ops/s
Iteration  24: 2707575.154 ops/s
Iteration  25: 2698098.199 ops/s
Iteration  26: 2699207.215 ops/s
Iteration  27: 2695290.863 ops/s
Iteration  28: 2698693.094 ops/s
Iteration  29: 2695946.594 ops/s
Iteration  30: 2703616.040 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  2701674.479 ±(99.9%) 4563.151 ops/s [Average]
  (min, avg, max) = (2685584.481, 2701674.479, 2714578.981), stdev = 6829.910
  CI (99.9%): [2697111.328, 2706237.630] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayAdapterAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  2701674.479 ± 4563.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_adapt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_adapt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20776419.479 ops/s
# Warmup Iteration   2: 35755776.752 ops/s
# Warmup Iteration   3: 39596230.008 ops/s
# Warmup Iteration   4: 41115547.745 ops/s
# Warmup Iteration   5: 41496137.367 ops/s
# Warmup Iteration   6: 41610863.643 ops/s
# Warmup Iteration   7: 41511040.866 ops/s
# Warmup Iteration   8: 41167993.699 ops/s
# Warmup Iteration   9: 41289228.304 ops/s
# Warmup Iteration  10: 41452149.565 ops/s
# Warmup Iteration  11: 41556266.091 ops/s
# Warmup Iteration  12: 41397826.415 ops/s
# Warmup Iteration  13: 41346385.747 ops/s
# Warmup Iteration  14: 41263286.041 ops/s
# Warmup Iteration  15: 41031458.099 ops/s
# Warmup Iteration  16: 41184149.734 ops/s
# Warmup Iteration  17: 41503423.255 ops/s
# Warmup Iteration  18: 41546619.437 ops/s
# Warmup Iteration  19: 41552700.718 ops/s
# Warmup Iteration  20: 41476670.582 ops/s
# Warmup Iteration  21: 41557127.647 ops/s
# Warmup Iteration  22: 41263340.047 ops/s
# Warmup Iteration  23: 41443093.315 ops/s
# Warmup Iteration  24: 41478795.614 ops/s
# Warmup Iteration  25: 41344321.112 ops/s
# Warmup Iteration  26: 41271449.212 ops/s
# Warmup Iteration  27: 41602895.837 ops/s
# Warmup Iteration  28: 41409783.924 ops/s
# Warmup Iteration  29: 41333288.953 ops/s
# Warmup Iteration  30: 41537291.378 ops/s
Iteration   1: 41404565.627 ops/s
Iteration   2: 41448087.277 ops/s
Iteration   3: 41410557.180 ops/s
Iteration   4: 41617883.204 ops/s
Iteration   5: 41470531.118 ops/s
Iteration   6: 41796028.869 ops/s
Iteration   7: 41837401.641 ops/s
Iteration   8: 41671850.662 ops/s
Iteration   9: 41744390.299 ops/s
Iteration  10: 41858534.825 ops/s
Iteration  11: 41872596.997 ops/s
Iteration  12: 41862928.185 ops/s
Iteration  13: 41798922.835 ops/s
Iteration  14: 41709627.292 ops/s
Iteration  15: 41662148.585 ops/s
Iteration  16: 41504345.801 ops/s
Iteration  17: 41622813.096 ops/s
Iteration  18: 41089197.990 ops/s
Iteration  19: 41244556.861 ops/s
Iteration  20: 41493212.316 ops/s
Iteration  21: 41448178.147 ops/s
Iteration  22: 41325155.756 ops/s
Iteration  23: 41057845.971 ops/s
Iteration  24: 41388838.092 ops/s
Iteration  25: 41511056.642 ops/s
Iteration  26: 41755316.664 ops/s
Iteration  27: 41569103.948 ops/s
Iteration  28: 41815236.240 ops/s
Iteration  29: 41697763.502 ops/s
Iteration  30: 41870601.050 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_adapt":
  41585309.222 ±(99.9%) 152041.558 ops/s [Average]
  (min, avg, max) = (41057845.971, 41585309.222, 41872596.997), stdev = 227568.663
  CI (99.9%): [41433267.665, 41737350.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_adapt  thrpt   30  41585309.222 ± 152041.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677438.399 ops/s
# Warmup Iteration   2: 731837.007 ops/s
# Warmup Iteration   3: 963283.952 ops/s
# Warmup Iteration   4: 966704.812 ops/s
# Warmup Iteration   5: 964839.247 ops/s
# Warmup Iteration   6: 969743.238 ops/s
# Warmup Iteration   7: 973713.422 ops/s
# Warmup Iteration   8: 975255.792 ops/s
# Warmup Iteration   9: 971664.119 ops/s
# Warmup Iteration  10: 951207.313 ops/s
# Warmup Iteration  11: 834357.062 ops/s
# Warmup Iteration  12: 978856.747 ops/s
# Warmup Iteration  13: 974324.936 ops/s
# Warmup Iteration  14: 975696.173 ops/s
# Warmup Iteration  15: 976518.006 ops/s
# Warmup Iteration  16: 973192.712 ops/s
# Warmup Iteration  17: 1028911.994 ops/s
# Warmup Iteration  18: 1032712.498 ops/s
# Warmup Iteration  19: 1035861.741 ops/s
# Warmup Iteration  20: 1034049.155 ops/s
# Warmup Iteration  21: 1033582.974 ops/s
# Warmup Iteration  22: 1033285.920 ops/s
# Warmup Iteration  23: 1032993.480 ops/s
# Warmup Iteration  24: 1033069.306 ops/s
# Warmup Iteration  25: 1036468.133 ops/s
# Warmup Iteration  26: 1034423.035 ops/s
# Warmup Iteration  27: 1031266.600 ops/s
# Warmup Iteration  28: 1032727.148 ops/s
# Warmup Iteration  29: 1032174.388 ops/s
# Warmup Iteration  30: 1032848.324 ops/s
Iteration   1: 1031901.482 ops/s
Iteration   2: 1027070.666 ops/s
Iteration   3: 1033335.888 ops/s
Iteration   4: 1025731.879 ops/s
Iteration   5: 1026297.138 ops/s
Iteration   6: 1026812.974 ops/s
Iteration   7: 1029974.925 ops/s
Iteration   8: 1034825.694 ops/s
Iteration   9: 1031738.271 ops/s
Iteration  10: 1029216.427 ops/s
Iteration  11: 1029092.555 ops/s
Iteration  12: 1026202.161 ops/s
Iteration  13: 1023311.718 ops/s
Iteration  14: 1035757.559 ops/s
Iteration  15: 1031900.238 ops/s
Iteration  16: 1030730.639 ops/s
Iteration  17: 1033326.127 ops/s
Iteration  18: 1037838.747 ops/s
Iteration  19: 1031292.522 ops/s
Iteration  20: 1034764.609 ops/s
Iteration  21: 1035188.435 ops/s
Iteration  22: 1038909.453 ops/s
Iteration  23: 1029179.869 ops/s
Iteration  24: 1031307.362 ops/s
Iteration  25: 1037193.027 ops/s
Iteration  26: 1031020.235 ops/s
Iteration  27: 1028247.826 ops/s
Iteration  28: 1030297.783 ops/s
Iteration  29: 1030844.318 ops/s
Iteration  30: 1030855.990 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_add":
  1031138.884 ±(99.9%) 2523.268 ops/s [Average]
  (min, avg, max) = (1023311.718, 1031138.884, 1038909.453), stdev = 3776.708
  CI (99.9%): [1028615.616, 1033662.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_add  thrpt   30  1031138.884 ± 2523.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646123.636 ops/s
# Warmup Iteration   2: 781466.914 ops/s
# Warmup Iteration   3: 979926.899 ops/s
# Warmup Iteration   4: 969788.265 ops/s
# Warmup Iteration   5: 975473.949 ops/s
# Warmup Iteration   6: 974973.080 ops/s
# Warmup Iteration   7: 979001.448 ops/s
# Warmup Iteration   8: 978773.891 ops/s
# Warmup Iteration   9: 812181.026 ops/s
# Warmup Iteration  10: 973051.875 ops/s
# Warmup Iteration  11: 977886.710 ops/s
# Warmup Iteration  12: 980292.818 ops/s
# Warmup Iteration  13: 978800.815 ops/s
# Warmup Iteration  14: 978728.129 ops/s
# Warmup Iteration  15: 976904.706 ops/s
# Warmup Iteration  16: 984255.909 ops/s
# Warmup Iteration  17: 1038259.701 ops/s
# Warmup Iteration  18: 1031878.837 ops/s
# Warmup Iteration  19: 1036176.990 ops/s
# Warmup Iteration  20: 1035485.490 ops/s
# Warmup Iteration  21: 1032634.336 ops/s
# Warmup Iteration  22: 1034373.721 ops/s
# Warmup Iteration  23: 1025077.720 ops/s
# Warmup Iteration  24: 1035549.605 ops/s
# Warmup Iteration  25: 1030416.504 ops/s
# Warmup Iteration  26: 1035754.720 ops/s
# Warmup Iteration  27: 1031909.155 ops/s
# Warmup Iteration  28: 1036940.438 ops/s
# Warmup Iteration  29: 1039105.677 ops/s
# Warmup Iteration  30: 1033315.475 ops/s
Iteration   1: 1032480.751 ops/s
Iteration   2: 1038853.375 ops/s
Iteration   3: 1026588.749 ops/s
Iteration   4: 1036051.868 ops/s
Iteration   5: 1034844.871 ops/s
Iteration   6: 1027180.453 ops/s
Iteration   7: 1036031.536 ops/s
Iteration   8: 1037206.480 ops/s
Iteration   9: 1035820.534 ops/s
Iteration  10: 1032851.854 ops/s
Iteration  11: 1030511.412 ops/s
Iteration  12: 1029592.313 ops/s
Iteration  13: 1034040.050 ops/s
Iteration  14: 1034901.060 ops/s
Iteration  15: 1032122.630 ops/s
Iteration  16: 1037617.199 ops/s
Iteration  17: 1035704.166 ops/s
Iteration  18: 1038782.671 ops/s
Iteration  19: 1029018.717 ops/s
Iteration  20: 1037421.224 ops/s
Iteration  21: 1029446.553 ops/s
Iteration  22: 1038125.256 ops/s
Iteration  23: 1031991.610 ops/s
Iteration  24: 1029463.720 ops/s
Iteration  25: 1028477.876 ops/s
Iteration  26: 1030704.902 ops/s
Iteration  27: 1037285.766 ops/s
Iteration  28: 1039874.827 ops/s
Iteration  29: 1035038.375 ops/s
Iteration  30: 1028208.861 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAll":
  1033541.322 ±(99.9%) 2602.141 ops/s [Average]
  (min, avg, max) = (1026588.749, 1033541.322, 1039874.827), stdev = 3894.762
  CI (99.9%): [1030939.181, 1036143.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_addAll  thrpt   30  1033541.322 ± 2602.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 634608.431 ops/s
# Warmup Iteration   2: 753946.553 ops/s
# Warmup Iteration   3: 955875.806 ops/s
# Warmup Iteration   4: 950368.777 ops/s
# Warmup Iteration   5: 952528.616 ops/s
# Warmup Iteration   6: 954818.330 ops/s
# Warmup Iteration   7: 955079.757 ops/s
# Warmup Iteration   8: 945417.544 ops/s
# Warmup Iteration   9: 812768.368 ops/s
# Warmup Iteration  10: 936898.660 ops/s
# Warmup Iteration  11: 953351.960 ops/s
# Warmup Iteration  12: 957703.830 ops/s
# Warmup Iteration  13: 955522.712 ops/s
# Warmup Iteration  14: 953669.371 ops/s
# Warmup Iteration  15: 951719.169 ops/s
# Warmup Iteration  16: 951474.647 ops/s
# Warmup Iteration  17: 1012435.983 ops/s
# Warmup Iteration  18: 1007736.039 ops/s
# Warmup Iteration  19: 1010222.723 ops/s
# Warmup Iteration  20: 1014574.924 ops/s
# Warmup Iteration  21: 1018383.768 ops/s
# Warmup Iteration  22: 1008806.802 ops/s
# Warmup Iteration  23: 1014631.626 ops/s
# Warmup Iteration  24: 1010532.772 ops/s
# Warmup Iteration  25: 1014212.061 ops/s
# Warmup Iteration  26: 1012040.124 ops/s
# Warmup Iteration  27: 1011207.273 ops/s
# Warmup Iteration  28: 1012430.277 ops/s
# Warmup Iteration  29: 1015536.468 ops/s
# Warmup Iteration  30: 1009004.411 ops/s
Iteration   1: 1015357.230 ops/s
Iteration   2: 1011303.849 ops/s
Iteration   3: 1013265.555 ops/s
Iteration   4: 1014671.233 ops/s
Iteration   5: 1009376.057 ops/s
Iteration   6: 1008481.184 ops/s
Iteration   7: 1017790.866 ops/s
Iteration   8: 1009198.421 ops/s
Iteration   9: 1012099.006 ops/s
Iteration  10: 1008191.505 ops/s
Iteration  11: 1005085.001 ops/s
Iteration  12: 1016984.901 ops/s
Iteration  13: 1014417.158 ops/s
Iteration  14: 1010537.302 ops/s
Iteration  15: 1014858.245 ops/s
Iteration  16: 1008282.047 ops/s
Iteration  17: 1001798.768 ops/s
Iteration  18: 1020606.991 ops/s
Iteration  19: 1007422.335 ops/s
Iteration  20: 1007495.133 ops/s
Iteration  21: 1011792.736 ops/s
Iteration  22: 1014011.375 ops/s
Iteration  23: 1007951.095 ops/s
Iteration  24: 1007980.211 ops/s
Iteration  25: 1006558.211 ops/s
Iteration  26: 1012549.507 ops/s
Iteration  27: 1018865.130 ops/s
Iteration  28: 1013364.100 ops/s
Iteration  29: 1012805.741 ops/s
Iteration  30: 1014148.348 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllAtIndex":
  1011574.975 ±(99.9%) 2864.501 ops/s [Average]
  (min, avg, max) = (1001798.768, 1011574.975, 1020606.991), stdev = 4287.451
  CI (99.9%): [1008710.473, 1014439.476] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_addAllAtIndex  thrpt   30  1011574.975 ± 2864.501  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734993.579 ops/s
# Warmup Iteration   2: 768335.579 ops/s
# Warmup Iteration   3: 1002677.732 ops/s
# Warmup Iteration   4: 999492.284 ops/s
# Warmup Iteration   5: 990443.684 ops/s
# Warmup Iteration   6: 1000232.300 ops/s
# Warmup Iteration   7: 1000958.155 ops/s
# Warmup Iteration   8: 1003479.881 ops/s
# Warmup Iteration   9: 998252.524 ops/s
# Warmup Iteration  10: 997943.094 ops/s
# Warmup Iteration  11: 952127.348 ops/s
# Warmup Iteration  12: 900489.629 ops/s
# Warmup Iteration  13: 1003040.636 ops/s
# Warmup Iteration  14: 998833.170 ops/s
# Warmup Iteration  15: 999912.063 ops/s
# Warmup Iteration  16: 999424.663 ops/s
# Warmup Iteration  17: 1060142.588 ops/s
# Warmup Iteration  18: 1061213.791 ops/s
# Warmup Iteration  19: 1066166.629 ops/s
# Warmup Iteration  20: 1056288.182 ops/s
# Warmup Iteration  21: 1060448.294 ops/s
# Warmup Iteration  22: 1054660.513 ops/s
# Warmup Iteration  23: 1060292.581 ops/s
# Warmup Iteration  24: 1060854.929 ops/s
# Warmup Iteration  25: 1062854.144 ops/s
# Warmup Iteration  26: 1066262.931 ops/s
# Warmup Iteration  27: 1060457.037 ops/s
# Warmup Iteration  28: 1064976.416 ops/s
# Warmup Iteration  29: 1059707.731 ops/s
# Warmup Iteration  30: 1063011.354 ops/s
Iteration   1: 1057712.854 ops/s
Iteration   2: 1065473.874 ops/s
Iteration   3: 1062387.386 ops/s
Iteration   4: 1063358.106 ops/s
Iteration   5: 1060317.959 ops/s
Iteration   6: 1061607.692 ops/s
Iteration   7: 1059910.621 ops/s
Iteration   8: 1055608.316 ops/s
Iteration   9: 1060236.232 ops/s
Iteration  10: 1064169.421 ops/s
Iteration  11: 1061851.304 ops/s
Iteration  12: 1059899.178 ops/s
Iteration  13: 1061673.346 ops/s
Iteration  14: 1069648.359 ops/s
Iteration  15: 1059813.549 ops/s
Iteration  16: 1062774.044 ops/s
Iteration  17: 1055572.702 ops/s
Iteration  18: 1061554.227 ops/s
Iteration  19: 1045680.052 ops/s
Iteration  20: 1058044.580 ops/s
Iteration  21: 1056694.739 ops/s
Iteration  22: 1055678.555 ops/s
Iteration  23: 1044951.555 ops/s
Iteration  24: 1059598.590 ops/s
Iteration  25: 1062628.905 ops/s
Iteration  26: 1062463.677 ops/s
Iteration  27: 1059516.167 ops/s
Iteration  28: 1059461.971 ops/s
Iteration  29: 1060912.434 ops/s
Iteration  30: 1058625.431 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAllIterable":
  1059594.194 ±(99.9%) 3275.548 ops/s [Average]
  (min, avg, max) = (1044951.555, 1059594.194, 1069648.359), stdev = 4902.686
  CI (99.9%): [1056318.647, 1062869.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_addAllIterable  thrpt   30  1059594.194 ± 3275.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAtIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAtIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 651628.424 ops/s
# Warmup Iteration   2: 672298.993 ops/s
# Warmup Iteration   3: 894801.127 ops/s
# Warmup Iteration   4: 897020.446 ops/s
# Warmup Iteration   5: 895028.804 ops/s
# Warmup Iteration   6: 897426.104 ops/s
# Warmup Iteration   7: 899789.273 ops/s
# Warmup Iteration   8: 897093.195 ops/s
# Warmup Iteration   9: 902525.386 ops/s
# Warmup Iteration  10: 898859.228 ops/s
# Warmup Iteration  11: 863334.818 ops/s
# Warmup Iteration  12: 784729.665 ops/s
# Warmup Iteration  13: 893848.197 ops/s
# Warmup Iteration  14: 895811.258 ops/s
# Warmup Iteration  15: 891083.119 ops/s
# Warmup Iteration  16: 895370.212 ops/s
# Warmup Iteration  17: 949403.385 ops/s
# Warmup Iteration  18: 953968.018 ops/s
# Warmup Iteration  19: 954475.851 ops/s
# Warmup Iteration  20: 951097.461 ops/s
# Warmup Iteration  21: 951725.204 ops/s
# Warmup Iteration  22: 950820.662 ops/s
# Warmup Iteration  23: 954737.287 ops/s
# Warmup Iteration  24: 950074.720 ops/s
# Warmup Iteration  25: 949847.871 ops/s
# Warmup Iteration  26: 949199.734 ops/s
# Warmup Iteration  27: 948568.641 ops/s
# Warmup Iteration  28: 952290.984 ops/s
# Warmup Iteration  29: 946638.066 ops/s
# Warmup Iteration  30: 946683.784 ops/s
Iteration   1: 944902.372 ops/s
Iteration   2: 952481.568 ops/s
Iteration   3: 948682.775 ops/s
Iteration   4: 947425.886 ops/s
Iteration   5: 945768.992 ops/s
Iteration   6: 951280.152 ops/s
Iteration   7: 944202.642 ops/s
Iteration   8: 952175.466 ops/s
Iteration   9: 950636.568 ops/s
Iteration  10: 953384.097 ops/s
Iteration  11: 949743.692 ops/s
Iteration  12: 946486.078 ops/s
Iteration  13: 946855.560 ops/s
Iteration  14: 954328.968 ops/s
Iteration  15: 950963.916 ops/s
Iteration  16: 952771.444 ops/s
Iteration  17: 951403.165 ops/s
Iteration  18: 947820.132 ops/s
Iteration  19: 949681.373 ops/s
Iteration  20: 950944.695 ops/s
Iteration  21: 950844.932 ops/s
Iteration  22: 947980.984 ops/s
Iteration  23: 949694.234 ops/s
Iteration  24: 947212.370 ops/s
Iteration  25: 943353.109 ops/s
Iteration  26: 944840.349 ops/s
Iteration  27: 951402.320 ops/s
Iteration  28: 952731.636 ops/s
Iteration  29: 949569.871 ops/s
Iteration  30: 949434.031 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_addAtIndex":
  949300.113 ±(99.9%) 1947.102 ops/s [Average]
  (min, avg, max) = (943353.109, 949300.113, 954328.968), stdev = 2914.331
  CI (99.9%): [947353.010, 951247.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_addAtIndex  thrpt   30  949300.113 ± 1947.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1864166.296 ops/s
# Warmup Iteration   2: 4249032.841 ops/s
# Warmup Iteration   3: 4231990.727 ops/s
# Warmup Iteration   4: 3562001.982 ops/s
# Warmup Iteration   5: 4262414.974 ops/s
# Warmup Iteration   6: 4280675.098 ops/s
# Warmup Iteration   7: 4299877.550 ops/s
# Warmup Iteration   8: 4315421.950 ops/s
# Warmup Iteration   9: 4262875.700 ops/s
# Warmup Iteration  10: 4326277.256 ops/s
# Warmup Iteration  11: 4293943.434 ops/s
# Warmup Iteration  12: 4258304.066 ops/s
# Warmup Iteration  13: 4293980.223 ops/s
# Warmup Iteration  14: 4337531.106 ops/s
# Warmup Iteration  15: 4255197.672 ops/s
# Warmup Iteration  16: 4293223.339 ops/s
# Warmup Iteration  17: 4312686.228 ops/s
# Warmup Iteration  18: 4301032.146 ops/s
# Warmup Iteration  19: 4319286.721 ops/s
# Warmup Iteration  20: 4274908.414 ops/s
# Warmup Iteration  21: 4290556.724 ops/s
# Warmup Iteration  22: 4333155.277 ops/s
# Warmup Iteration  23: 4340763.407 ops/s
# Warmup Iteration  24: 4324067.967 ops/s
# Warmup Iteration  25: 4316260.226 ops/s
# Warmup Iteration  26: 4307047.354 ops/s
# Warmup Iteration  27: 4342876.832 ops/s
# Warmup Iteration  28: 4314912.543 ops/s
# Warmup Iteration  29: 4345802.483 ops/s
# Warmup Iteration  30: 4338905.436 ops/s
Iteration   1: 4341191.461 ops/s
Iteration   2: 4367967.401 ops/s
Iteration   3: 4282789.710 ops/s
Iteration   4: 4346081.940 ops/s
Iteration   5: 4304123.013 ops/s
Iteration   6: 4351408.891 ops/s
Iteration   7: 4325200.712 ops/s
Iteration   8: 4304027.543 ops/s
Iteration   9: 4360410.369 ops/s
Iteration  10: 4270770.633 ops/s
Iteration  11: 4234259.418 ops/s
Iteration  12: 4376595.581 ops/s
Iteration  13: 4256110.595 ops/s
Iteration  14: 4309811.923 ops/s
Iteration  15: 4300645.629 ops/s
Iteration  16: 4338920.028 ops/s
Iteration  17: 4289117.475 ops/s
Iteration  18: 4304558.328 ops/s
Iteration  19: 4315099.817 ops/s
Iteration  20: 4282526.669 ops/s
Iteration  21: 4259142.403 ops/s
Iteration  22: 4218136.177 ops/s
Iteration  23: 4288216.599 ops/s
Iteration  24: 4292576.717 ops/s
Iteration  25: 4300102.622 ops/s
Iteration  26: 4256433.716 ops/s
Iteration  27: 4293416.279 ops/s
Iteration  28: 4338340.706 ops/s
Iteration  29: 4304670.200 ops/s
Iteration  30: 4269147.951 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByMutating":
  4302726.684 ±(99.9%) 25928.475 ops/s [Average]
  (min, avg, max) = (4218136.177, 4302726.684, 4376595.581), stdev = 38808.523
  CI (99.9%): [4276798.209, 4328655.158] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  4302726.684 ± 25928.475  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2016387.355 ops/s
# Warmup Iteration   2: 4657050.156 ops/s
# Warmup Iteration   3: 4487078.535 ops/s
# Warmup Iteration   4: 4000330.932 ops/s
# Warmup Iteration   5: 4739568.302 ops/s
# Warmup Iteration   6: 4660285.927 ops/s
# Warmup Iteration   7: 4690285.682 ops/s
# Warmup Iteration   8: 4699524.363 ops/s
# Warmup Iteration   9: 4674057.807 ops/s
# Warmup Iteration  10: 4700622.169 ops/s
# Warmup Iteration  11: 4682797.093 ops/s
# Warmup Iteration  12: 4677717.233 ops/s
# Warmup Iteration  13: 4686626.263 ops/s
# Warmup Iteration  14: 4640559.722 ops/s
# Warmup Iteration  15: 4643256.621 ops/s
# Warmup Iteration  16: 4691213.589 ops/s
# Warmup Iteration  17: 4684583.580 ops/s
# Warmup Iteration  18: 4643869.265 ops/s
# Warmup Iteration  19: 4680130.118 ops/s
# Warmup Iteration  20: 4640981.873 ops/s
# Warmup Iteration  21: 4695266.730 ops/s
# Warmup Iteration  22: 4686469.962 ops/s
# Warmup Iteration  23: 4665409.245 ops/s
# Warmup Iteration  24: 4726315.042 ops/s
# Warmup Iteration  25: 4697085.791 ops/s
# Warmup Iteration  26: 4672593.274 ops/s
# Warmup Iteration  27: 4667600.540 ops/s
# Warmup Iteration  28: 4722038.712 ops/s
# Warmup Iteration  29: 4678071.697 ops/s
# Warmup Iteration  30: 4734340.205 ops/s
Iteration   1: 4687754.355 ops/s
Iteration   2: 4653122.301 ops/s
Iteration   3: 4628296.026 ops/s
Iteration   4: 4625987.363 ops/s
Iteration   5: 4692631.251 ops/s
Iteration   6: 4655675.598 ops/s
Iteration   7: 4682377.116 ops/s
Iteration   8: 4638807.721 ops/s
Iteration   9: 4724540.782 ops/s
Iteration  10: 4673509.141 ops/s
Iteration  11: 4735509.604 ops/s
Iteration  12: 4755802.077 ops/s
Iteration  13: 4724549.791 ops/s
Iteration  14: 4693718.897 ops/s
Iteration  15: 4721194.819 ops/s
Iteration  16: 4731513.519 ops/s
Iteration  17: 4661834.604 ops/s
Iteration  18: 4611953.978 ops/s
Iteration  19: 4740485.123 ops/s
Iteration  20: 4648923.044 ops/s
Iteration  21: 4644349.552 ops/s
Iteration  22: 4678975.277 ops/s
Iteration  23: 4681465.619 ops/s
Iteration  24: 4684647.145 ops/s
Iteration  25: 4681875.605 ops/s
Iteration  26: 4651564.772 ops/s
Iteration  27: 4641862.380 ops/s
Iteration  28: 4700130.523 ops/s
Iteration  29: 4681247.688 ops/s
Iteration  30: 4643770.410 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_aggregateByNonMutating":
  4679269.203 ±(99.9%) 25137.831 ops/s [Average]
  (min, avg, max) = (4611953.978, 4679269.203, 4755802.077), stdev = 37625.125
  CI (99.9%): [4654131.372, 4704407.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  4679269.203 ± 25137.831  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7204680.066 ops/s
# Warmup Iteration   2: 14613062.518 ops/s
# Warmup Iteration   3: 12903127.726 ops/s
# Warmup Iteration   4: 15394598.352 ops/s
# Warmup Iteration   5: 15463101.128 ops/s
# Warmup Iteration   6: 15316332.318 ops/s
# Warmup Iteration   7: 15409140.047 ops/s
# Warmup Iteration   8: 15416809.723 ops/s
# Warmup Iteration   9: 15347354.659 ops/s
# Warmup Iteration  10: 15339819.005 ops/s
# Warmup Iteration  11: 15404378.463 ops/s
# Warmup Iteration  12: 15295866.251 ops/s
# Warmup Iteration  13: 15361230.439 ops/s
# Warmup Iteration  14: 15405113.585 ops/s
# Warmup Iteration  15: 15426526.104 ops/s
# Warmup Iteration  16: 15357872.497 ops/s
# Warmup Iteration  17: 15382865.631 ops/s
# Warmup Iteration  18: 15388587.772 ops/s
# Warmup Iteration  19: 15355234.172 ops/s
# Warmup Iteration  20: 15339273.924 ops/s
# Warmup Iteration  21: 15355272.210 ops/s
# Warmup Iteration  22: 15468784.694 ops/s
# Warmup Iteration  23: 15430856.225 ops/s
# Warmup Iteration  24: 15341541.575 ops/s
# Warmup Iteration  25: 15320463.819 ops/s
# Warmup Iteration  26: 15311332.617 ops/s
# Warmup Iteration  27: 15384717.479 ops/s
# Warmup Iteration  28: 15325286.261 ops/s
# Warmup Iteration  29: 15345605.857 ops/s
# Warmup Iteration  30: 15415089.920 ops/s
Iteration   1: 15416890.764 ops/s
Iteration   2: 15443687.210 ops/s
Iteration   3: 15374767.808 ops/s
Iteration   4: 15452996.532 ops/s
Iteration   5: 15299992.225 ops/s
Iteration   6: 15506005.144 ops/s
Iteration   7: 15445270.191 ops/s
Iteration   8: 15464982.476 ops/s
Iteration   9: 15370002.117 ops/s
Iteration  10: 15464101.869 ops/s
Iteration  11: 15339280.752 ops/s
Iteration  12: 15459298.607 ops/s
Iteration  13: 15418676.163 ops/s
Iteration  14: 15369609.943 ops/s
Iteration  15: 15447432.980 ops/s
Iteration  16: 15394598.632 ops/s
Iteration  17: 15407034.249 ops/s
Iteration  18: 15396247.089 ops/s
Iteration  19: 15375028.059 ops/s
Iteration  20: 15309634.592 ops/s
Iteration  21: 15205059.097 ops/s
Iteration  22: 15347198.842 ops/s
Iteration  23: 15345513.944 ops/s
Iteration  24: 15487609.985 ops/s
Iteration  25: 15325210.040 ops/s
Iteration  26: 15422685.202 ops/s
Iteration  27: 15469129.831 ops/s
Iteration  28: 15375437.244 ops/s
Iteration  29: 15392134.572 ops/s
Iteration  30: 15378635.459 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfy":
  15396805.054 ±(99.9%) 43138.957 ops/s [Average]
  (min, avg, max) = (15205059.097, 15396805.054, 15506005.144), stdev = 64568.365
  CI (99.9%): [15353666.096, 15439944.011] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_allSatisfy  thrpt   30  15396805.054 ± 43138.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10059690.828 ops/s
# Warmup Iteration   2: 20829800.129 ops/s
# Warmup Iteration   3: 17419942.936 ops/s
# Warmup Iteration   4: 20622544.030 ops/s
# Warmup Iteration   5: 20641991.616 ops/s
# Warmup Iteration   6: 20597543.183 ops/s
# Warmup Iteration   7: 20647760.294 ops/s
# Warmup Iteration   8: 20533300.811 ops/s
# Warmup Iteration   9: 20561585.038 ops/s
# Warmup Iteration  10: 20594723.473 ops/s
# Warmup Iteration  11: 20675771.865 ops/s
# Warmup Iteration  12: 20621933.327 ops/s
# Warmup Iteration  13: 20697451.112 ops/s
# Warmup Iteration  14: 20737166.673 ops/s
# Warmup Iteration  15: 20638827.383 ops/s
# Warmup Iteration  16: 20607484.130 ops/s
# Warmup Iteration  17: 20643205.246 ops/s
# Warmup Iteration  18: 20650838.283 ops/s
# Warmup Iteration  19: 20611043.142 ops/s
# Warmup Iteration  20: 20587733.194 ops/s
# Warmup Iteration  21: 20808498.931 ops/s
# Warmup Iteration  22: 20702709.977 ops/s
# Warmup Iteration  23: 20632073.470 ops/s
# Warmup Iteration  24: 20608517.400 ops/s
# Warmup Iteration  25: 20682905.400 ops/s
# Warmup Iteration  26: 20778141.685 ops/s
# Warmup Iteration  27: 20659250.774 ops/s
# Warmup Iteration  28: 20690386.634 ops/s
# Warmup Iteration  29: 20692358.448 ops/s
# Warmup Iteration  30: 20729541.701 ops/s
Iteration   1: 20775750.944 ops/s
Iteration   2: 20855075.830 ops/s
Iteration   3: 20618970.114 ops/s
Iteration   4: 20802857.325 ops/s
Iteration   5: 20641490.932 ops/s
Iteration   6: 20593609.652 ops/s
Iteration   7: 20768927.392 ops/s
Iteration   8: 20678457.782 ops/s
Iteration   9: 20602351.720 ops/s
Iteration  10: 20845073.278 ops/s
Iteration  11: 20660686.354 ops/s
Iteration  12: 20730498.755 ops/s
Iteration  13: 20774564.170 ops/s
Iteration  14: 20767650.698 ops/s
Iteration  15: 20707886.078 ops/s
Iteration  16: 20754850.467 ops/s
Iteration  17: 20185378.455 ops/s
Iteration  18: 20734651.838 ops/s
Iteration  19: 20728784.963 ops/s
Iteration  20: 20689137.757 ops/s
Iteration  21: 20779111.187 ops/s
Iteration  22: 20854577.313 ops/s
Iteration  23: 20640867.855 ops/s
Iteration  24: 20640877.879 ops/s
Iteration  25: 20694432.972 ops/s
Iteration  26: 20743548.625 ops/s
Iteration  27: 20711544.189 ops/s
Iteration  28: 20780302.133 ops/s
Iteration  29: 20662306.067 ops/s
Iteration  30: 20532056.731 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_allSatisfyWith":
  20698542.648 ±(99.9%) 83719.130 ops/s [Average]
  (min, avg, max) = (20185378.455, 20698542.648, 20855075.830), stdev = 125306.862
  CI (99.9%): [20614823.519, 20782261.778] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  20698542.648 ± 83719.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7525753.263 ops/s
# Warmup Iteration   2: 15549623.937 ops/s
# Warmup Iteration   3: 13394554.072 ops/s
# Warmup Iteration   4: 15857489.438 ops/s
# Warmup Iteration   5: 15870525.879 ops/s
# Warmup Iteration   6: 15860241.728 ops/s
# Warmup Iteration   7: 15844298.540 ops/s
# Warmup Iteration   8: 15717255.309 ops/s
# Warmup Iteration   9: 15881246.526 ops/s
# Warmup Iteration  10: 15881175.652 ops/s
# Warmup Iteration  11: 15886648.309 ops/s
# Warmup Iteration  12: 15723699.818 ops/s
# Warmup Iteration  13: 15648439.766 ops/s
# Warmup Iteration  14: 15727790.879 ops/s
# Warmup Iteration  15: 15775708.513 ops/s
# Warmup Iteration  16: 15752298.460 ops/s
# Warmup Iteration  17: 15847293.502 ops/s
# Warmup Iteration  18: 15839618.384 ops/s
# Warmup Iteration  19: 15826953.567 ops/s
# Warmup Iteration  20: 15824339.872 ops/s
# Warmup Iteration  21: 15819465.805 ops/s
# Warmup Iteration  22: 15805485.047 ops/s
# Warmup Iteration  23: 15699528.766 ops/s
# Warmup Iteration  24: 15828427.256 ops/s
# Warmup Iteration  25: 15853647.530 ops/s
# Warmup Iteration  26: 15817775.196 ops/s
# Warmup Iteration  27: 15858723.720 ops/s
# Warmup Iteration  28: 15913923.726 ops/s
# Warmup Iteration  29: 15934059.762 ops/s
# Warmup Iteration  30: 15901433.169 ops/s
Iteration   1: 15818714.701 ops/s
Iteration   2: 15872386.774 ops/s
Iteration   3: 15806040.165 ops/s
Iteration   4: 15793769.623 ops/s
Iteration   5: 15770635.343 ops/s
Iteration   6: 15771089.028 ops/s
Iteration   7: 15863817.486 ops/s
Iteration   8: 15883446.049 ops/s
Iteration   9: 15964801.839 ops/s
Iteration  10: 15852640.084 ops/s
Iteration  11: 15856054.148 ops/s
Iteration  12: 15900409.476 ops/s
Iteration  13: 15897590.676 ops/s
Iteration  14: 15814574.459 ops/s
Iteration  15: 15681590.284 ops/s
Iteration  16: 15687702.641 ops/s
Iteration  17: 15747757.080 ops/s
Iteration  18: 15925993.277 ops/s
Iteration  19: 15793233.347 ops/s
Iteration  20: 15780454.764 ops/s
Iteration  21: 15885215.072 ops/s
Iteration  22: 15762740.226 ops/s
Iteration  23: 15606627.802 ops/s
Iteration  24: 15658237.799 ops/s
Iteration  25: 15852802.622 ops/s
Iteration  26: 15781377.325 ops/s
Iteration  27: 15831287.179 ops/s
Iteration  28: 15824075.148 ops/s
Iteration  29: 15724944.620 ops/s
Iteration  30: 15761283.111 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfy":
  15805709.738 ±(99.9%) 54636.775 ops/s [Average]
  (min, avg, max) = (15606627.802, 15805709.738, 15964801.839), stdev = 81777.758
  CI (99.9%): [15751072.963, 15860346.513] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_anySatisfy  thrpt   30  15805709.738 ± 54636.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10658733.733 ops/s
# Warmup Iteration   2: 20526443.625 ops/s
# Warmup Iteration   3: 18964462.734 ops/s
# Warmup Iteration   4: 21761880.679 ops/s
# Warmup Iteration   5: 21622782.080 ops/s
# Warmup Iteration   6: 21708048.193 ops/s
# Warmup Iteration   7: 21759070.491 ops/s
# Warmup Iteration   8: 21628221.590 ops/s
# Warmup Iteration   9: 21641733.944 ops/s
# Warmup Iteration  10: 21618643.268 ops/s
# Warmup Iteration  11: 21666645.218 ops/s
# Warmup Iteration  12: 21588868.066 ops/s
# Warmup Iteration  13: 21680987.449 ops/s
# Warmup Iteration  14: 21713223.101 ops/s
# Warmup Iteration  15: 21802015.692 ops/s
# Warmup Iteration  16: 21808024.803 ops/s
# Warmup Iteration  17: 21708049.551 ops/s
# Warmup Iteration  18: 21773793.480 ops/s
# Warmup Iteration  19: 21590620.546 ops/s
# Warmup Iteration  20: 21705431.305 ops/s
# Warmup Iteration  21: 21813892.623 ops/s
# Warmup Iteration  22: 21688000.306 ops/s
# Warmup Iteration  23: 21718023.059 ops/s
# Warmup Iteration  24: 21732290.951 ops/s
# Warmup Iteration  25: 21727369.556 ops/s
# Warmup Iteration  26: 21834220.895 ops/s
# Warmup Iteration  27: 21693359.998 ops/s
# Warmup Iteration  28: 21912324.022 ops/s
# Warmup Iteration  29: 21724445.544 ops/s
# Warmup Iteration  30: 21865757.307 ops/s
Iteration   1: 21806001.849 ops/s
Iteration   2: 21771276.016 ops/s
Iteration   3: 21834213.203 ops/s
Iteration   4: 21824700.946 ops/s
Iteration   5: 21749468.676 ops/s
Iteration   6: 21785305.308 ops/s
Iteration   7: 21760481.594 ops/s
Iteration   8: 21719747.534 ops/s
Iteration   9: 21741722.229 ops/s
Iteration  10: 21534009.567 ops/s
Iteration  11: 21589892.714 ops/s
Iteration  12: 21805618.660 ops/s
Iteration  13: 21549751.096 ops/s
Iteration  14: 21729595.892 ops/s
Iteration  15: 21823887.139 ops/s
Iteration  16: 21785556.933 ops/s
Iteration  17: 21740008.076 ops/s
Iteration  18: 21698304.140 ops/s
Iteration  19: 21549916.107 ops/s
Iteration  20: 21753265.502 ops/s
Iteration  21: 21847074.535 ops/s
Iteration  22: 21821516.815 ops/s
Iteration  23: 21708640.507 ops/s
Iteration  24: 21626522.533 ops/s
Iteration  25: 21721856.156 ops/s
Iteration  26: 21765674.069 ops/s
Iteration  27: 21791107.417 ops/s
Iteration  28: 21759412.706 ops/s
Iteration  29: 21832814.902 ops/s
Iteration  30: 21542503.841 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_anySatisfyWith":
  21732328.222 ±(99.9%) 63126.378 ops/s [Average]
  (min, avg, max) = (21534009.567, 21732328.222, 21847074.535), stdev = 94484.598
  CI (99.9%): [21669201.844, 21795454.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  21732328.222 ± 63126.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1984316.189 ops/s
# Warmup Iteration   2: 4381077.856 ops/s
# Warmup Iteration   3: 3691934.631 ops/s
# Warmup Iteration   4: 4436778.036 ops/s
# Warmup Iteration   5: 4410520.465 ops/s
# Warmup Iteration   6: 4419016.622 ops/s
# Warmup Iteration   7: 4410255.380 ops/s
# Warmup Iteration   8: 4408924.349 ops/s
# Warmup Iteration   9: 4434574.523 ops/s
# Warmup Iteration  10: 4413404.242 ops/s
# Warmup Iteration  11: 4432650.378 ops/s
# Warmup Iteration  12: 4417229.280 ops/s
# Warmup Iteration  13: 4416276.208 ops/s
# Warmup Iteration  14: 4436182.436 ops/s
# Warmup Iteration  15: 4416262.830 ops/s
# Warmup Iteration  16: 4435472.681 ops/s
# Warmup Iteration  17: 4449648.706 ops/s
# Warmup Iteration  18: 4441600.080 ops/s
# Warmup Iteration  19: 4424646.135 ops/s
# Warmup Iteration  20: 4429188.540 ops/s
# Warmup Iteration  21: 4428425.259 ops/s
# Warmup Iteration  22: 4413664.524 ops/s
# Warmup Iteration  23: 4417185.907 ops/s
# Warmup Iteration  24: 4408256.998 ops/s
# Warmup Iteration  25: 4405153.649 ops/s
# Warmup Iteration  26: 4412342.806 ops/s
# Warmup Iteration  27: 4416277.074 ops/s
# Warmup Iteration  28: 4406440.558 ops/s
# Warmup Iteration  29: 4416038.189 ops/s
# Warmup Iteration  30: 4379056.502 ops/s
Iteration   1: 4428522.047 ops/s
Iteration   2: 4427172.555 ops/s
Iteration   3: 4406912.813 ops/s
Iteration   4: 4399992.990 ops/s
Iteration   5: 4420217.517 ops/s
Iteration   6: 4413675.270 ops/s
Iteration   7: 4418991.026 ops/s
Iteration   8: 4432623.679 ops/s
Iteration   9: 4414129.412 ops/s
Iteration  10: 4424050.693 ops/s
Iteration  11: 4413257.868 ops/s
Iteration  12: 4432829.228 ops/s
Iteration  13: 4427141.673 ops/s
Iteration  14: 4417128.829 ops/s
Iteration  15: 4417565.358 ops/s
Iteration  16: 4439922.892 ops/s
Iteration  17: 4411610.967 ops/s
Iteration  18: 4405715.495 ops/s
Iteration  19: 4393349.958 ops/s
Iteration  20: 4440299.839 ops/s
Iteration  21: 4407736.447 ops/s
Iteration  22: 4391410.243 ops/s
Iteration  23: 4465630.129 ops/s
Iteration  24: 4399069.191 ops/s
Iteration  25: 4428713.274 ops/s
Iteration  26: 4432527.259 ops/s
Iteration  27: 4435769.174 ops/s
Iteration  28: 4435678.848 ops/s
Iteration  29: 4428919.003 ops/s
Iteration  30: 4450621.326 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendString":
  4422039.500 ±(99.9%) 11182.108 ops/s [Average]
  (min, avg, max) = (4391410.243, 4422039.500, 4465630.129), stdev = 16736.853
  CI (99.9%): [4410857.393, 4433221.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_appendString  thrpt   30  4422039.500 ± 11182.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 116800.367 ops/s
# Warmup Iteration   2: 124288.066 ops/s
# Warmup Iteration   3: 135162.690 ops/s
# Warmup Iteration   4: 151902.426 ops/s
# Warmup Iteration   5: 152079.910 ops/s
# Warmup Iteration   6: 151367.823 ops/s
# Warmup Iteration   7: 151926.560 ops/s
# Warmup Iteration   8: 151770.719 ops/s
# Warmup Iteration   9: 151779.161 ops/s
# Warmup Iteration  10: 151705.514 ops/s
# Warmup Iteration  11: 151908.456 ops/s
# Warmup Iteration  12: 151908.758 ops/s
# Warmup Iteration  13: 152047.048 ops/s
# Warmup Iteration  14: 152218.223 ops/s
# Warmup Iteration  15: 152374.093 ops/s
# Warmup Iteration  16: 129203.455 ops/s
# Warmup Iteration  17: 160961.269 ops/s
# Warmup Iteration  18: 161342.307 ops/s
# Warmup Iteration  19: 160973.311 ops/s
# Warmup Iteration  20: 161002.434 ops/s
# Warmup Iteration  21: 159730.245 ops/s
# Warmup Iteration  22: 161176.288 ops/s
# Warmup Iteration  23: 160599.021 ops/s
# Warmup Iteration  24: 160779.489 ops/s
# Warmup Iteration  25: 160804.982 ops/s
# Warmup Iteration  26: 161302.379 ops/s
# Warmup Iteration  27: 160571.946 ops/s
# Warmup Iteration  28: 160814.524 ops/s
# Warmup Iteration  29: 160863.167 ops/s
# Warmup Iteration  30: 161005.611 ops/s
Iteration   1: 161342.573 ops/s
Iteration   2: 161241.209 ops/s
Iteration   3: 160862.730 ops/s
Iteration   4: 161456.904 ops/s
Iteration   5: 162142.054 ops/s
Iteration   6: 160498.232 ops/s
Iteration   7: 161071.287 ops/s
Iteration   8: 161203.153 ops/s
Iteration   9: 160990.218 ops/s
Iteration  10: 161128.016 ops/s
Iteration  11: 159131.022 ops/s
Iteration  12: 161641.162 ops/s
Iteration  13: 160630.046 ops/s
Iteration  14: 160288.227 ops/s
Iteration  15: 161942.074 ops/s
Iteration  16: 160819.228 ops/s
Iteration  17: 163056.329 ops/s
Iteration  18: 161371.227 ops/s
Iteration  19: 160842.257 ops/s
Iteration  20: 161014.195 ops/s
Iteration  21: 160991.975 ops/s
Iteration  22: 160017.020 ops/s
Iteration  23: 160549.913 ops/s
Iteration  24: 161336.656 ops/s
Iteration  25: 160088.185 ops/s
Iteration  26: 161078.869 ops/s
Iteration  27: 160912.697 ops/s
Iteration  28: 160977.835 ops/s
Iteration  29: 160526.312 ops/s
Iteration  30: 161270.053 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringThrows":
  161014.055 ±(99.9%) 469.168 ops/s [Average]
  (min, avg, max) = (159131.022, 161014.055, 163056.329), stdev = 702.228
  CI (99.9%): [160544.887, 161483.223] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_appendStringThrows  thrpt   30  161014.055 ± 469.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3827948.761 ops/s
# Warmup Iteration   2: 8190853.609 ops/s
# Warmup Iteration   3: 8197649.787 ops/s
# Warmup Iteration   4: 6841294.486 ops/s
# Warmup Iteration   5: 8177035.672 ops/s
# Warmup Iteration   6: 8173543.474 ops/s
# Warmup Iteration   7: 8173654.148 ops/s
# Warmup Iteration   8: 8155655.784 ops/s
# Warmup Iteration   9: 8197856.450 ops/s
# Warmup Iteration  10: 8193613.965 ops/s
# Warmup Iteration  11: 8206888.975 ops/s
# Warmup Iteration  12: 8212628.104 ops/s
# Warmup Iteration  13: 8197445.939 ops/s
# Warmup Iteration  14: 8191034.759 ops/s
# Warmup Iteration  15: 8209544.697 ops/s
# Warmup Iteration  16: 8171865.891 ops/s
# Warmup Iteration  17: 8150705.694 ops/s
# Warmup Iteration  18: 8177160.897 ops/s
# Warmup Iteration  19: 8181967.412 ops/s
# Warmup Iteration  20: 8214871.986 ops/s
# Warmup Iteration  21: 8101344.122 ops/s
# Warmup Iteration  22: 8184039.819 ops/s
# Warmup Iteration  23: 8204719.184 ops/s
# Warmup Iteration  24: 8145071.782 ops/s
# Warmup Iteration  25: 8157698.967 ops/s
# Warmup Iteration  26: 8214292.118 ops/s
# Warmup Iteration  27: 8197201.632 ops/s
# Warmup Iteration  28: 8209060.962 ops/s
# Warmup Iteration  29: 8162164.513 ops/s
# Warmup Iteration  30: 8216614.750 ops/s
Iteration   1: 8194360.596 ops/s
Iteration   2: 8175585.215 ops/s
Iteration   3: 8201973.672 ops/s
Iteration   4: 8202791.457 ops/s
Iteration   5: 8250358.767 ops/s
Iteration   6: 8219348.279 ops/s
Iteration   7: 8167065.937 ops/s
Iteration   8: 8222950.909 ops/s
Iteration   9: 8228625.811 ops/s
Iteration  10: 8188962.334 ops/s
Iteration  11: 8217535.388 ops/s
Iteration  12: 8203559.588 ops/s
Iteration  13: 8173083.953 ops/s
Iteration  14: 8184489.380 ops/s
Iteration  15: 8226950.056 ops/s
Iteration  16: 8234985.274 ops/s
Iteration  17: 8218417.871 ops/s
Iteration  18: 8186560.820 ops/s
Iteration  19: 8198067.534 ops/s
Iteration  20: 8248544.234 ops/s
Iteration  21: 8229538.102 ops/s
Iteration  22: 8166295.638 ops/s
Iteration  23: 8207432.392 ops/s
Iteration  24: 8236932.368 ops/s
Iteration  25: 8162665.441 ops/s
Iteration  26: 8236006.269 ops/s
Iteration  27: 8208332.173 ops/s
Iteration  28: 8192791.383 ops/s
Iteration  29: 8196207.272 ops/s
Iteration  30: 8219941.737 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparator":
  8206678.662 ±(99.9%) 16427.103 ops/s [Average]
  (min, avg, max) = (8162665.441, 8206678.662, 8250358.767), stdev = 24587.317
  CI (99.9%): [8190251.558, 8223105.765] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  8206678.662 ± 16427.103  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4433765.194 ops/s
# Warmup Iteration   2: 11503634.086 ops/s
# Warmup Iteration   3: 9755026.024 ops/s
# Warmup Iteration   4: 11597770.337 ops/s
# Warmup Iteration   5: 11662497.385 ops/s
# Warmup Iteration   6: 11512190.456 ops/s
# Warmup Iteration   7: 11631196.774 ops/s
# Warmup Iteration   8: 11640613.297 ops/s
# Warmup Iteration   9: 11658998.406 ops/s
# Warmup Iteration  10: 11560001.579 ops/s
# Warmup Iteration  11: 11677522.595 ops/s
# Warmup Iteration  12: 11600735.870 ops/s
# Warmup Iteration  13: 11697242.507 ops/s
# Warmup Iteration  14: 11653109.703 ops/s
# Warmup Iteration  15: 11661797.866 ops/s
# Warmup Iteration  16: 11664889.373 ops/s
# Warmup Iteration  17: 11681931.714 ops/s
# Warmup Iteration  18: 11635518.892 ops/s
# Warmup Iteration  19: 11636410.574 ops/s
# Warmup Iteration  20: 11578730.385 ops/s
# Warmup Iteration  21: 11627207.644 ops/s
# Warmup Iteration  22: 11657902.137 ops/s
# Warmup Iteration  23: 11674281.024 ops/s
# Warmup Iteration  24: 11707308.539 ops/s
# Warmup Iteration  25: 11642155.293 ops/s
# Warmup Iteration  26: 11567727.107 ops/s
# Warmup Iteration  27: 11660751.120 ops/s
# Warmup Iteration  28: 11619083.443 ops/s
# Warmup Iteration  29: 11633877.511 ops/s
# Warmup Iteration  30: 11555956.456 ops/s
Iteration   1: 11635047.957 ops/s
Iteration   2: 11607751.648 ops/s
Iteration   3: 11612255.795 ops/s
Iteration   4: 11636743.041 ops/s
Iteration   5: 11600141.202 ops/s
Iteration   6: 11736487.343 ops/s
Iteration   7: 11563947.846 ops/s
Iteration   8: 11588971.879 ops/s
Iteration   9: 11653508.069 ops/s
Iteration  10: 11596652.259 ops/s
Iteration  11: 11584060.408 ops/s
Iteration  12: 11595592.958 ops/s
Iteration  13: 11687153.263 ops/s
Iteration  14: 11664115.902 ops/s
Iteration  15: 11697883.592 ops/s
Iteration  16: 11649257.598 ops/s
Iteration  17: 11623097.899 ops/s
Iteration  18: 11662837.422 ops/s
Iteration  19: 11654509.342 ops/s
Iteration  20: 11633483.556 ops/s
Iteration  21: 11618992.231 ops/s
Iteration  22: 11544842.110 ops/s
Iteration  23: 11569448.671 ops/s
Iteration  24: 11666453.625 ops/s
Iteration  25: 11692653.068 ops/s
Iteration  26: 11487915.574 ops/s
Iteration  27: 11670650.632 ops/s
Iteration  28: 11641749.054 ops/s
Iteration  29: 11657938.226 ops/s
Iteration  30: 11696470.887 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  11631020.435 ±(99.9%) 34805.886 ops/s [Average]
  (min, avg, max) = (11487915.574, 11631020.435, 11736487.343), stdev = 52095.816
  CI (99.9%): [11596214.549, 11665826.321] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  11631020.435 ± 34805.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 35265997.752 ops/s
# Warmup Iteration   2: 79965485.928 ops/s
# Warmup Iteration   3: 63092536.660 ops/s
# Warmup Iteration   4: 73926696.655 ops/s
# Warmup Iteration   5: 74372539.939 ops/s
# Warmup Iteration   6: 74696813.243 ops/s
# Warmup Iteration   7: 74565340.493 ops/s
# Warmup Iteration   8: 74566357.705 ops/s
# Warmup Iteration   9: 74429930.901 ops/s
# Warmup Iteration  10: 74632531.290 ops/s
# Warmup Iteration  11: 74640895.482 ops/s
# Warmup Iteration  12: 74287653.889 ops/s
# Warmup Iteration  13: 74695809.181 ops/s
# Warmup Iteration  14: 74388682.414 ops/s
# Warmup Iteration  15: 74553037.328 ops/s
# Warmup Iteration  16: 74164869.884 ops/s
# Warmup Iteration  17: 74786684.728 ops/s
# Warmup Iteration  18: 75109578.809 ops/s
# Warmup Iteration  19: 74695208.348 ops/s
# Warmup Iteration  20: 74121845.745 ops/s
# Warmup Iteration  21: 74644006.713 ops/s
# Warmup Iteration  22: 74656083.912 ops/s
# Warmup Iteration  23: 74385756.812 ops/s
# Warmup Iteration  24: 75049315.437 ops/s
# Warmup Iteration  25: 74939903.745 ops/s
# Warmup Iteration  26: 74878927.929 ops/s
# Warmup Iteration  27: 74953542.037 ops/s
# Warmup Iteration  28: 74699486.736 ops/s
# Warmup Iteration  29: 74223372.319 ops/s
# Warmup Iteration  30: 73740570.652 ops/s
Iteration   1: 74655040.120 ops/s
Iteration   2: 74048928.413 ops/s
Iteration   3: 74460301.720 ops/s
Iteration   4: 74782974.528 ops/s
Iteration   5: 74261438.703 ops/s
Iteration   6: 74873661.023 ops/s
Iteration   7: 74111389.411 ops/s
Iteration   8: 73661300.368 ops/s
Iteration   9: 73761657.475 ops/s
Iteration  10: 74644321.157 ops/s
Iteration  11: 74192965.602 ops/s
Iteration  12: 74607179.394 ops/s
Iteration  13: 74159214.740 ops/s
Iteration  14: 75175444.598 ops/s
Iteration  15: 74436998.344 ops/s
Iteration  16: 74333515.187 ops/s
Iteration  17: 74962392.973 ops/s
Iteration  18: 75268380.623 ops/s
Iteration  19: 74763447.388 ops/s
Iteration  20: 74450533.131 ops/s
Iteration  21: 75063402.740 ops/s
Iteration  22: 74767352.045 ops/s
Iteration  23: 74397486.173 ops/s
Iteration  24: 74746425.672 ops/s
Iteration  25: 74922862.910 ops/s
Iteration  26: 75311135.482 ops/s
Iteration  27: 74681613.797 ops/s
Iteration  28: 74451257.777 ops/s
Iteration  29: 74522753.050 ops/s
Iteration  30: 74827097.382 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asLazy":
  74576749.064 ±(99.9%) 271105.523 ops/s [Average]
  (min, avg, max) = (73661300.368, 74576749.064, 75311135.482), stdev = 405778.014
  CI (99.9%): [74305643.541, 74847854.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_asLazy  thrpt   30  74576749.064 ± 271105.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asReversed$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asReversed

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4001648.983 ops/s
# Warmup Iteration   2: 9101162.948 ops/s
# Warmup Iteration   3: 7783116.542 ops/s
# Warmup Iteration   4: 9217890.251 ops/s
# Warmup Iteration   5: 9250769.293 ops/s
# Warmup Iteration   6: 9267998.940 ops/s
# Warmup Iteration   7: 9257543.686 ops/s
# Warmup Iteration   8: 9267372.486 ops/s
# Warmup Iteration   9: 9256749.755 ops/s
# Warmup Iteration  10: 9290231.239 ops/s
# Warmup Iteration  11: 9181288.469 ops/s
# Warmup Iteration  12: 9270030.428 ops/s
# Warmup Iteration  13: 9268380.215 ops/s
# Warmup Iteration  14: 9240851.301 ops/s
# Warmup Iteration  15: 9287898.909 ops/s
# Warmup Iteration  16: 9203905.503 ops/s
# Warmup Iteration  17: 9241404.629 ops/s
# Warmup Iteration  18: 9243615.677 ops/s
# Warmup Iteration  19: 9207793.969 ops/s
# Warmup Iteration  20: 9195307.455 ops/s
# Warmup Iteration  21: 9230934.921 ops/s
# Warmup Iteration  22: 9187367.016 ops/s
# Warmup Iteration  23: 9182425.288 ops/s
# Warmup Iteration  24: 9177074.562 ops/s
# Warmup Iteration  25: 9200570.410 ops/s
# Warmup Iteration  26: 9270600.178 ops/s
# Warmup Iteration  27: 9296376.796 ops/s
# Warmup Iteration  28: 9240006.827 ops/s
# Warmup Iteration  29: 9177270.362 ops/s
# Warmup Iteration  30: 9227382.065 ops/s
Iteration   1: 9254554.160 ops/s
Iteration   2: 9238311.561 ops/s
Iteration   3: 9265557.761 ops/s
Iteration   4: 9204823.924 ops/s
Iteration   5: 9249239.914 ops/s
Iteration   6: 9216765.344 ops/s
Iteration   7: 9253287.106 ops/s
Iteration   8: 9209598.709 ops/s
Iteration   9: 9135239.851 ops/s
Iteration  10: 9234027.194 ops/s
Iteration  11: 9198311.932 ops/s
Iteration  12: 9179565.608 ops/s
Iteration  13: 9209932.788 ops/s
Iteration  14: 9205064.778 ops/s
Iteration  15: 9186519.881 ops/s
Iteration  16: 9190159.640 ops/s
Iteration  17: 9233497.501 ops/s
Iteration  18: 9139645.457 ops/s
Iteration  19: 9202019.158 ops/s
Iteration  20: 9175093.205 ops/s
Iteration  21: 9217155.293 ops/s
Iteration  22: 9152117.039 ops/s
Iteration  23: 9108042.104 ops/s
Iteration  24: 9102296.331 ops/s
Iteration  25: 9205064.722 ops/s
Iteration  26: 9176137.661 ops/s
Iteration  27: 9081700.026 ops/s
Iteration  28: 9184836.720 ops/s
Iteration  29: 9215052.766 ops/s
Iteration  30: 9227609.061 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asReversed":
  9195040.906 ±(99.9%) 30798.927 ops/s [Average]
  (min, avg, max) = (9081700.026, 9195040.906, 9265557.761), stdev = 46098.388
  CI (99.9%): [9164241.979, 9225839.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_asReversed  thrpt   30  9195040.906 ± 30798.927  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27669121.346 ops/s
# Warmup Iteration   2: 54115653.734 ops/s
# Warmup Iteration   3: 45094477.291 ops/s
# Warmup Iteration   4: 54625572.249 ops/s
# Warmup Iteration   5: 55442755.560 ops/s
# Warmup Iteration   6: 55364195.201 ops/s
# Warmup Iteration   7: 55576047.375 ops/s
# Warmup Iteration   8: 55513516.867 ops/s
# Warmup Iteration   9: 55186314.355 ops/s
# Warmup Iteration  10: 55237121.507 ops/s
# Warmup Iteration  11: 55460133.188 ops/s
# Warmup Iteration  12: 55311979.160 ops/s
# Warmup Iteration  13: 55042963.114 ops/s
# Warmup Iteration  14: 55283198.576 ops/s
# Warmup Iteration  15: 55635155.027 ops/s
# Warmup Iteration  16: 55236715.732 ops/s
# Warmup Iteration  17: 56830507.033 ops/s
# Warmup Iteration  18: 56685116.506 ops/s
# Warmup Iteration  19: 56430036.570 ops/s
# Warmup Iteration  20: 56582650.663 ops/s
# Warmup Iteration  21: 56656946.600 ops/s
# Warmup Iteration  22: 56334844.920 ops/s
# Warmup Iteration  23: 56518032.540 ops/s
# Warmup Iteration  24: 56683237.090 ops/s
# Warmup Iteration  25: 56686886.407 ops/s
# Warmup Iteration  26: 56537875.951 ops/s
# Warmup Iteration  27: 56548719.143 ops/s
# Warmup Iteration  28: 56516679.223 ops/s
# Warmup Iteration  29: 56760290.454 ops/s
# Warmup Iteration  30: 56586885.775 ops/s
Iteration   1: 56964651.083 ops/s
Iteration   2: 56900172.240 ops/s
Iteration   3: 56595851.371 ops/s
Iteration   4: 56422788.812 ops/s
Iteration   5: 56439247.758 ops/s
Iteration   6: 56832324.935 ops/s
Iteration   7: 56646392.128 ops/s
Iteration   8: 56647779.959 ops/s
Iteration   9: 56705446.109 ops/s
Iteration  10: 56644161.932 ops/s
Iteration  11: 56505042.566 ops/s
Iteration  12: 56756712.580 ops/s
Iteration  13: 56184369.290 ops/s
Iteration  14: 56349760.154 ops/s
Iteration  15: 56318169.319 ops/s
Iteration  16: 56314901.565 ops/s
Iteration  17: 56736099.943 ops/s
Iteration  18: 56549463.948 ops/s
Iteration  19: 56443725.427 ops/s
Iteration  20: 56528230.290 ops/s
Iteration  21: 56779128.999 ops/s
Iteration  22: 56544525.964 ops/s
Iteration  23: 56464586.585 ops/s
Iteration  24: 56924987.348 ops/s
Iteration  25: 56540834.546 ops/s
Iteration  26: 56902401.030 ops/s
Iteration  27: 56892193.143 ops/s
Iteration  28: 56384158.077 ops/s
Iteration  29: 56240514.654 ops/s
Iteration  30: 56207847.886 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asSynchronized":
  56578882.321 ±(99.9%) 151328.483 ops/s [Average]
  (min, avg, max) = (56184369.290, 56578882.321, 56964651.083), stdev = 226501.366
  CI (99.9%): [56427553.838, 56730210.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_asSynchronized  thrpt   30  56578882.321 ± 151328.483  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17195334.073 ops/s
# Warmup Iteration   2: 35083708.176 ops/s
# Warmup Iteration   3: 29259605.113 ops/s
# Warmup Iteration   4: 34269107.336 ops/s
# Warmup Iteration   5: 34176444.515 ops/s
# Warmup Iteration   6: 34228581.300 ops/s
# Warmup Iteration   7: 34328627.302 ops/s
# Warmup Iteration   8: 34325724.281 ops/s
# Warmup Iteration   9: 34371203.179 ops/s
# Warmup Iteration  10: 34310256.327 ops/s
# Warmup Iteration  11: 34239592.446 ops/s
# Warmup Iteration  12: 34220096.662 ops/s
# Warmup Iteration  13: 34066144.804 ops/s
# Warmup Iteration  14: 34074916.593 ops/s
# Warmup Iteration  15: 34196444.993 ops/s
# Warmup Iteration  16: 34198537.757 ops/s
# Warmup Iteration  17: 34072568.600 ops/s
# Warmup Iteration  18: 34253454.359 ops/s
# Warmup Iteration  19: 34406903.048 ops/s
# Warmup Iteration  20: 34236510.309 ops/s
# Warmup Iteration  21: 34196900.698 ops/s
# Warmup Iteration  22: 34466792.751 ops/s
# Warmup Iteration  23: 34319121.684 ops/s
# Warmup Iteration  24: 34088282.212 ops/s
# Warmup Iteration  25: 34063729.346 ops/s
# Warmup Iteration  26: 34105810.934 ops/s
# Warmup Iteration  27: 34334341.661 ops/s
# Warmup Iteration  28: 34341528.491 ops/s
# Warmup Iteration  29: 34178700.872 ops/s
# Warmup Iteration  30: 34385135.014 ops/s
Iteration   1: 34254523.984 ops/s
Iteration   2: 34303201.191 ops/s
Iteration   3: 34343548.367 ops/s
Iteration   4: 34328209.920 ops/s
Iteration   5: 34275012.764 ops/s
Iteration   6: 34218389.128 ops/s
Iteration   7: 34340207.621 ops/s
Iteration   8: 34318700.867 ops/s
Iteration   9: 34289911.201 ops/s
Iteration  10: 34157175.081 ops/s
Iteration  11: 34170406.828 ops/s
Iteration  12: 34210705.451 ops/s
Iteration  13: 34386423.701 ops/s
Iteration  14: 34122761.536 ops/s
Iteration  15: 34318146.009 ops/s
Iteration  16: 34086636.089 ops/s
Iteration  17: 34204728.734 ops/s
Iteration  18: 34256922.572 ops/s
Iteration  19: 34294227.708 ops/s
Iteration  20: 34398184.311 ops/s
Iteration  21: 34157291.498 ops/s
Iteration  22: 34253131.511 ops/s
Iteration  23: 34256441.630 ops/s
Iteration  24: 34161533.614 ops/s
Iteration  25: 34058204.916 ops/s
Iteration  26: 34240932.792 ops/s
Iteration  27: 33960406.919 ops/s
Iteration  28: 34110590.689 ops/s
Iteration  29: 34018121.583 ops/s
Iteration  30: 33946675.283 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_asUnmodifiable":
  34214711.783 ±(99.9%) 79197.032 ops/s [Average]
  (min, avg, max) = (33946675.283, 34214711.783, 34398184.311), stdev = 118538.399
  CI (99.9%): [34135514.751, 34293908.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  34214711.783 ± 79197.032  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearch$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearch

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6172595.571 ops/s
# Warmup Iteration   2: 8512637.894 ops/s
# Warmup Iteration   3: 9924945.512 ops/s
# Warmup Iteration   4: 9932215.586 ops/s
# Warmup Iteration   5: 10045930.514 ops/s
# Warmup Iteration   6: 10043466.445 ops/s
# Warmup Iteration   7: 9009064.167 ops/s
# Warmup Iteration   8: 9412783.169 ops/s
# Warmup Iteration   9: 10030244.515 ops/s
# Warmup Iteration  10: 10033401.707 ops/s
# Warmup Iteration  11: 10047961.054 ops/s
# Warmup Iteration  12: 10034271.330 ops/s
# Warmup Iteration  13: 10000714.144 ops/s
# Warmup Iteration  14: 9967925.247 ops/s
# Warmup Iteration  15: 10024813.181 ops/s
# Warmup Iteration  16: 10064425.626 ops/s
# Warmup Iteration  17: 10078681.384 ops/s
# Warmup Iteration  18: 10006634.778 ops/s
# Warmup Iteration  19: 10038562.429 ops/s
# Warmup Iteration  20: 10013542.493 ops/s
# Warmup Iteration  21: 10013304.572 ops/s
# Warmup Iteration  22: 10080940.452 ops/s
# Warmup Iteration  23: 10020151.001 ops/s
# Warmup Iteration  24: 9991921.451 ops/s
# Warmup Iteration  25: 10002400.515 ops/s
# Warmup Iteration  26: 10046605.072 ops/s
# Warmup Iteration  27: 10018283.268 ops/s
# Warmup Iteration  28: 10020071.933 ops/s
# Warmup Iteration  29: 10012600.797 ops/s
# Warmup Iteration  30: 10024394.588 ops/s
Iteration   1: 9988336.471 ops/s
Iteration   2: 9990131.066 ops/s
Iteration   3: 9952606.572 ops/s
Iteration   4: 10020280.545 ops/s
Iteration   5: 10024246.061 ops/s
Iteration   6: 10097597.253 ops/s
Iteration   7: 9996770.597 ops/s
Iteration   8: 10018497.198 ops/s
Iteration   9: 9986742.452 ops/s
Iteration  10: 10064001.822 ops/s
Iteration  11: 10036395.280 ops/s
Iteration  12: 10061901.192 ops/s
Iteration  13: 10017416.477 ops/s
Iteration  14: 10031472.328 ops/s
Iteration  15: 10023281.755 ops/s
Iteration  16: 10051852.454 ops/s
Iteration  17: 10014631.691 ops/s
Iteration  18: 10047220.161 ops/s
Iteration  19: 9987349.713 ops/s
Iteration  20: 10035758.807 ops/s
Iteration  21: 10015299.072 ops/s
Iteration  22: 9990389.465 ops/s
Iteration  23: 10001302.612 ops/s
Iteration  24: 9981930.035 ops/s
Iteration  25: 10011120.161 ops/s
Iteration  26: 10027076.750 ops/s
Iteration  27: 10021910.467 ops/s
Iteration  28: 10055857.727 ops/s
Iteration  29: 10088828.013 ops/s
Iteration  30: 9965081.438 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearch":
  10020176.188 ±(99.9%) 22606.139 ops/s [Average]
  (min, avg, max) = (9952606.572, 10020176.188, 10097597.253), stdev = 33835.808
  CI (99.9%): [9997570.049, 10042782.327] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_binarySearch  thrpt   30  10020176.188 ± 22606.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearchWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearchWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5616641.965 ops/s
# Warmup Iteration   2: 9255972.098 ops/s
# Warmup Iteration   3: 10357196.092 ops/s
# Warmup Iteration   4: 10340667.931 ops/s
# Warmup Iteration   5: 10369219.228 ops/s
# Warmup Iteration   6: 8572757.234 ops/s
# Warmup Iteration   7: 10353466.524 ops/s
# Warmup Iteration   8: 10408746.894 ops/s
# Warmup Iteration   9: 10409887.598 ops/s
# Warmup Iteration  10: 10422093.125 ops/s
# Warmup Iteration  11: 10383713.205 ops/s
# Warmup Iteration  12: 10351170.688 ops/s
# Warmup Iteration  13: 10387660.876 ops/s
# Warmup Iteration  14: 10350481.579 ops/s
# Warmup Iteration  15: 10384718.778 ops/s
# Warmup Iteration  16: 10344646.313 ops/s
# Warmup Iteration  17: 10345637.424 ops/s
# Warmup Iteration  18: 10377599.437 ops/s
# Warmup Iteration  19: 10362820.577 ops/s
# Warmup Iteration  20: 10407014.710 ops/s
# Warmup Iteration  21: 10382641.948 ops/s
# Warmup Iteration  22: 10340073.533 ops/s
# Warmup Iteration  23: 10410215.272 ops/s
# Warmup Iteration  24: 10384737.210 ops/s
# Warmup Iteration  25: 10334157.918 ops/s
# Warmup Iteration  26: 10345932.370 ops/s
# Warmup Iteration  27: 10383015.659 ops/s
# Warmup Iteration  28: 10330425.965 ops/s
# Warmup Iteration  29: 10399685.175 ops/s
# Warmup Iteration  30: 10394294.987 ops/s
Iteration   1: 10360448.310 ops/s
Iteration   2: 10314166.350 ops/s
Iteration   3: 10366668.670 ops/s
Iteration   4: 10407858.835 ops/s
Iteration   5: 10456037.051 ops/s
Iteration   6: 10438301.630 ops/s
Iteration   7: 10440661.677 ops/s
Iteration   8: 10370670.118 ops/s
Iteration   9: 10438603.195 ops/s
Iteration  10: 10342387.762 ops/s
Iteration  11: 10376863.253 ops/s
Iteration  12: 10421749.555 ops/s
Iteration  13: 10339916.316 ops/s
Iteration  14: 10409651.357 ops/s
Iteration  15: 10415911.124 ops/s
Iteration  16: 10361076.528 ops/s
Iteration  17: 10372084.872 ops/s
Iteration  18: 10392796.316 ops/s
Iteration  19: 10380228.739 ops/s
Iteration  20: 10409917.846 ops/s
Iteration  21: 10362303.090 ops/s
Iteration  22: 10390153.150 ops/s
Iteration  23: 10389274.878 ops/s
Iteration  24: 10384827.866 ops/s
Iteration  25: 10422002.410 ops/s
Iteration  26: 10458728.811 ops/s
Iteration  27: 10423782.607 ops/s
Iteration  28: 10434297.648 ops/s
Iteration  29: 10383093.079 ops/s
Iteration  30: 10368473.742 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_binarySearchWithComparator":
  10394431.226 ±(99.9%) 24096.367 ops/s [Average]
  (min, avg, max) = (10314166.350, 10394431.226, 10458728.811), stdev = 36066.310
  CI (99.9%): [10370334.860, 10418527.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_binarySearchWithComparator  thrpt   30  10394431.226 ± 24096.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1016761.426 ops/s
# Warmup Iteration   2: 2643982.140 ops/s
# Warmup Iteration   3: 2666938.027 ops/s
# Warmup Iteration   4: 2180992.253 ops/s
# Warmup Iteration   5: 2676020.742 ops/s
# Warmup Iteration   6: 2674348.689 ops/s
# Warmup Iteration   7: 2664379.024 ops/s
# Warmup Iteration   8: 2668594.766 ops/s
# Warmup Iteration   9: 2659356.197 ops/s
# Warmup Iteration  10: 2651759.542 ops/s
# Warmup Iteration  11: 2666330.707 ops/s
# Warmup Iteration  12: 2670326.292 ops/s
# Warmup Iteration  13: 2660206.548 ops/s
# Warmup Iteration  14: 2672738.384 ops/s
# Warmup Iteration  15: 2665464.821 ops/s
# Warmup Iteration  16: 2666540.371 ops/s
# Warmup Iteration  17: 2672673.895 ops/s
# Warmup Iteration  18: 2672482.392 ops/s
# Warmup Iteration  19: 2683590.647 ops/s
# Warmup Iteration  20: 2659504.893 ops/s
# Warmup Iteration  21: 2659359.522 ops/s
# Warmup Iteration  22: 2681820.285 ops/s
# Warmup Iteration  23: 2669995.339 ops/s
# Warmup Iteration  24: 2680438.939 ops/s
# Warmup Iteration  25: 2676359.131 ops/s
# Warmup Iteration  26: 2673850.352 ops/s
# Warmup Iteration  27: 2641544.959 ops/s
# Warmup Iteration  28: 2663194.877 ops/s
# Warmup Iteration  29: 2680301.070 ops/s
# Warmup Iteration  30: 2669424.550 ops/s
Iteration   1: 2662315.481 ops/s
Iteration   2: 2668472.894 ops/s
Iteration   3: 2664818.266 ops/s
Iteration   4: 2673313.963 ops/s
Iteration   5: 2683418.195 ops/s
Iteration   6: 2665956.670 ops/s
Iteration   7: 2663532.041 ops/s
Iteration   8: 2670533.099 ops/s
Iteration   9: 2667369.565 ops/s
Iteration  10: 2682311.693 ops/s
Iteration  11: 2673974.548 ops/s
Iteration  12: 2686610.389 ops/s
Iteration  13: 2684919.991 ops/s
Iteration  14: 2685347.448 ops/s
Iteration  15: 2688884.745 ops/s
Iteration  16: 2634106.023 ops/s
Iteration  17: 2687835.101 ops/s
Iteration  18: 2676851.662 ops/s
Iteration  19: 2675548.025 ops/s
Iteration  20: 2684390.232 ops/s
Iteration  21: 2662808.969 ops/s
Iteration  22: 2689505.581 ops/s
Iteration  23: 2667733.492 ops/s
Iteration  24: 2677647.832 ops/s
Iteration  25: 2672869.111 ops/s
Iteration  26: 2676412.900 ops/s
Iteration  27: 2673688.904 ops/s
Iteration  28: 2668040.520 ops/s
Iteration  29: 2672934.067 ops/s
Iteration  30: 2671671.233 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk":
  2673794.088 ±(99.9%) 7481.204 ops/s [Average]
  (min, avg, max) = (2634106.023, 2673794.088, 2689505.581), stdev = 11197.515
  CI (99.9%): [2666312.884, 2681275.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_chunk  thrpt   30  2673794.088 ± 7481.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29275404.028 ops/s
# Warmup Iteration   2: 56316792.217 ops/s
# Warmup Iteration   3: 51040344.914 ops/s
# Warmup Iteration   4: 57536436.467 ops/s
# Warmup Iteration   5: 57589577.993 ops/s
# Warmup Iteration   6: 57496290.233 ops/s
# Warmup Iteration   7: 57870806.299 ops/s
# Warmup Iteration   8: 57247864.133 ops/s
# Warmup Iteration   9: 57517339.521 ops/s
# Warmup Iteration  10: 57754029.025 ops/s
# Warmup Iteration  11: 57199195.836 ops/s
# Warmup Iteration  12: 57694832.471 ops/s
# Warmup Iteration  13: 57321245.585 ops/s
# Warmup Iteration  14: 57346951.380 ops/s
# Warmup Iteration  15: 56916036.515 ops/s
# Warmup Iteration  16: 56730586.268 ops/s
# Warmup Iteration  17: 57178239.686 ops/s
# Warmup Iteration  18: 57265336.571 ops/s
# Warmup Iteration  19: 57628659.219 ops/s
# Warmup Iteration  20: 57542116.990 ops/s
# Warmup Iteration  21: 57681523.016 ops/s
# Warmup Iteration  22: 57558560.111 ops/s
# Warmup Iteration  23: 57426815.518 ops/s
# Warmup Iteration  24: 57427701.694 ops/s
# Warmup Iteration  25: 57621517.809 ops/s
# Warmup Iteration  26: 57389687.501 ops/s
# Warmup Iteration  27: 57413477.521 ops/s
# Warmup Iteration  28: 57416887.083 ops/s
# Warmup Iteration  29: 57226671.752 ops/s
# Warmup Iteration  30: 57648279.785 ops/s
Iteration   1: 57610531.900 ops/s
Iteration   2: 57568608.884 ops/s
Iteration   3: 57909475.219 ops/s
Iteration   4: 57443013.561 ops/s
Iteration   5: 57402470.358 ops/s
Iteration   6: 57736486.161 ops/s
Iteration   7: 57848809.661 ops/s
Iteration   8: 57496408.389 ops/s
Iteration   9: 57144913.144 ops/s
Iteration  10: 56929680.781 ops/s
Iteration  11: 56383369.159 ops/s
Iteration  12: 56057095.000 ops/s
Iteration  13: 57228757.251 ops/s
Iteration  14: 57133231.397 ops/s
Iteration  15: 57374874.400 ops/s
Iteration  16: 56900026.497 ops/s
Iteration  17: 57328566.687 ops/s
Iteration  18: 57334519.127 ops/s
Iteration  19: 57781842.343 ops/s
Iteration  20: 57311877.120 ops/s
Iteration  21: 56817532.302 ops/s
Iteration  22: 56767770.443 ops/s
Iteration  23: 57433669.918 ops/s
Iteration  24: 57213109.318 ops/s
Iteration  25: 57484261.222 ops/s
Iteration  26: 57313825.553 ops/s
Iteration  27: 57500932.193 ops/s
Iteration  28: 57554400.796 ops/s
Iteration  29: 57437290.363 ops/s
Iteration  30: 57344921.386 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_empty":
  57293075.684 ±(99.9%) 271258.675 ops/s [Average]
  (min, avg, max) = (56057095.000, 57293075.684, 57909475.219), stdev = 406007.246
  CI (99.9%): [57021817.009, 57564334.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_chunk_empty  thrpt   30  57293075.684 ± 271258.675  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5097402.122 ops/s
# Warmup Iteration   2: 11435600.938 ops/s
# Warmup Iteration   3: 10580083.192 ops/s
# Warmup Iteration   4: 10591051.368 ops/s
# Warmup Iteration   5: 11571045.070 ops/s
# Warmup Iteration   6: 11576584.529 ops/s
# Warmup Iteration   7: 11543562.186 ops/s
# Warmup Iteration   8: 11542519.333 ops/s
# Warmup Iteration   9: 11592573.973 ops/s
# Warmup Iteration  10: 11594657.548 ops/s
# Warmup Iteration  11: 11539574.619 ops/s
# Warmup Iteration  12: 11555534.384 ops/s
# Warmup Iteration  13: 11560803.381 ops/s
# Warmup Iteration  14: 11575275.116 ops/s
# Warmup Iteration  15: 11606403.954 ops/s
# Warmup Iteration  16: 11585005.959 ops/s
# Warmup Iteration  17: 11373076.328 ops/s
# Warmup Iteration  18: 11409548.864 ops/s
# Warmup Iteration  19: 11347109.931 ops/s
# Warmup Iteration  20: 11319746.995 ops/s
# Warmup Iteration  21: 11368173.468 ops/s
# Warmup Iteration  22: 11423119.258 ops/s
# Warmup Iteration  23: 11417892.206 ops/s
# Warmup Iteration  24: 11346901.193 ops/s
# Warmup Iteration  25: 11378465.966 ops/s
# Warmup Iteration  26: 11381746.441 ops/s
# Warmup Iteration  27: 11375134.161 ops/s
# Warmup Iteration  28: 11372983.194 ops/s
# Warmup Iteration  29: 11378523.518 ops/s
# Warmup Iteration  30: 11292066.809 ops/s
Iteration   1: 11377308.383 ops/s
Iteration   2: 11191272.024 ops/s
Iteration   3: 11293569.881 ops/s
Iteration   4: 11310528.260 ops/s
Iteration   5: 11287660.934 ops/s
Iteration   6: 11183358.759 ops/s
Iteration   7: 11136383.164 ops/s
Iteration   8: 11501452.050 ops/s
Iteration   9: 11586490.359 ops/s
Iteration  10: 11351005.388 ops/s
Iteration  11: 11317612.619 ops/s
Iteration  12: 11355476.839 ops/s
Iteration  13: 11306090.895 ops/s
Iteration  14: 11258149.652 ops/s
Iteration  15: 11203737.425 ops/s
Iteration  16: 11160575.790 ops/s
Iteration  17: 11498736.902 ops/s
Iteration  18: 11450580.431 ops/s
Iteration  19: 11197718.392 ops/s
Iteration  20: 11288855.941 ops/s
Iteration  21: 11332764.690 ops/s
Iteration  22: 11276872.919 ops/s
Iteration  23: 11238829.438 ops/s
Iteration  24: 11178761.323 ops/s
Iteration  25: 11266541.378 ops/s
Iteration  26: 11493685.434 ops/s
Iteration  27: 11468784.952 ops/s
Iteration  28: 11411364.605 ops/s
Iteration  29: 11406592.243 ops/s
Iteration  30: 11372465.105 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_large_size":
  11323440.872 ±(99.9%) 77486.803 ops/s [Average]
  (min, avg, max) = (11136383.164, 11323440.872, 11586490.359), stdev = 115978.608
  CI (99.9%): [11245954.069, 11400927.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_chunk_large_size  thrpt   30  11323440.872 ± 77486.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4699845.113 ops/s
# Warmup Iteration   2: 14361129.726 ops/s
# Warmup Iteration   3: 11792847.619 ops/s
# Warmup Iteration   4: 14476083.682 ops/s
# Warmup Iteration   5: 14543668.443 ops/s
# Warmup Iteration   6: 14540884.690 ops/s
# Warmup Iteration   7: 14499530.605 ops/s
# Warmup Iteration   8: 14478789.181 ops/s
# Warmup Iteration   9: 14402216.912 ops/s
# Warmup Iteration  10: 14389737.479 ops/s
# Warmup Iteration  11: 14413002.736 ops/s
# Warmup Iteration  12: 14539826.335 ops/s
# Warmup Iteration  13: 14513865.267 ops/s
# Warmup Iteration  14: 14477474.772 ops/s
# Warmup Iteration  15: 14488750.178 ops/s
# Warmup Iteration  16: 14503488.659 ops/s
# Warmup Iteration  17: 14499543.461 ops/s
# Warmup Iteration  18: 14483053.889 ops/s
# Warmup Iteration  19: 14424027.856 ops/s
# Warmup Iteration  20: 14438418.577 ops/s
# Warmup Iteration  21: 14459489.446 ops/s
# Warmup Iteration  22: 14529458.655 ops/s
# Warmup Iteration  23: 14496591.107 ops/s
# Warmup Iteration  24: 14515185.471 ops/s
# Warmup Iteration  25: 14496650.207 ops/s
# Warmup Iteration  26: 14539747.787 ops/s
# Warmup Iteration  27: 14540238.123 ops/s
# Warmup Iteration  28: 14519465.108 ops/s
# Warmup Iteration  29: 14528378.730 ops/s
# Warmup Iteration  30: 14505883.895 ops/s
Iteration   1: 14466958.182 ops/s
Iteration   2: 14524652.486 ops/s
Iteration   3: 14477211.682 ops/s
Iteration   4: 14451631.209 ops/s
Iteration   5: 14504730.973 ops/s
Iteration   6: 14496544.390 ops/s
Iteration   7: 14555834.816 ops/s
Iteration   8: 14445681.084 ops/s
Iteration   9: 14514258.839 ops/s
Iteration  10: 14541234.542 ops/s
Iteration  11: 14515274.874 ops/s
Iteration  12: 14540419.953 ops/s
Iteration  13: 14550221.085 ops/s
Iteration  14: 14464561.050 ops/s
Iteration  15: 14546137.561 ops/s
Iteration  16: 14525803.019 ops/s
Iteration  17: 14501825.844 ops/s
Iteration  18: 14454712.599 ops/s
Iteration  19: 14359951.771 ops/s
Iteration  20: 14492447.652 ops/s
Iteration  21: 14583774.248 ops/s
Iteration  22: 14549821.048 ops/s
Iteration  23: 14470285.640 ops/s
Iteration  24: 14505170.667 ops/s
Iteration  25: 14549085.885 ops/s
Iteration  26: 14411367.414 ops/s
Iteration  27: 14419092.545 ops/s
Iteration  28: 14272785.937 ops/s
Iteration  29: 14468933.526 ops/s
Iteration  30: 14498868.994 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_single":
  14488642.650 ±(99.9%) 42739.222 ops/s [Average]
  (min, avg, max) = (14272785.937, 14488642.650, 14583774.248), stdev = 63970.060
  CI (99.9%): [14445903.429, 14531381.872] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_chunk_single  thrpt   30  14488642.650 ± 42739.222  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 725166.672 ops/s
# Warmup Iteration   2: 783434.195 ops/s
# Warmup Iteration   3: 1010034.559 ops/s
# Warmup Iteration   4: 1008333.010 ops/s
# Warmup Iteration   5: 1013125.187 ops/s
# Warmup Iteration   6: 1007223.706 ops/s
# Warmup Iteration   7: 1004658.764 ops/s
# Warmup Iteration   8: 1014282.487 ops/s
# Warmup Iteration   9: 1008090.152 ops/s
# Warmup Iteration  10: 1009663.894 ops/s
# Warmup Iteration  11: 850456.398 ops/s
# Warmup Iteration  12: 1009955.505 ops/s
# Warmup Iteration  13: 1004282.830 ops/s
# Warmup Iteration  14: 1001380.862 ops/s
# Warmup Iteration  15: 1000164.217 ops/s
# Warmup Iteration  16: 1006018.001 ops/s
# Warmup Iteration  17: 1084308.895 ops/s
# Warmup Iteration  18: 1085028.859 ops/s
# Warmup Iteration  19: 1080565.801 ops/s
# Warmup Iteration  20: 1075660.394 ops/s
# Warmup Iteration  21: 1088902.348 ops/s
# Warmup Iteration  22: 1085033.837 ops/s
# Warmup Iteration  23: 1081730.616 ops/s
# Warmup Iteration  24: 1080787.705 ops/s
# Warmup Iteration  25: 1085213.772 ops/s
# Warmup Iteration  26: 1086162.646 ops/s
# Warmup Iteration  27: 1084602.322 ops/s
# Warmup Iteration  28: 1078686.117 ops/s
# Warmup Iteration  29: 1082714.199 ops/s
# Warmup Iteration  30: 1085543.217 ops/s
Iteration   1: 1084733.811 ops/s
Iteration   2: 1087486.349 ops/s
Iteration   3: 1083117.827 ops/s
Iteration   4: 1084468.807 ops/s
Iteration   5: 1086701.638 ops/s
Iteration   6: 1082989.490 ops/s
Iteration   7: 1081653.163 ops/s
Iteration   8: 1086394.966 ops/s
Iteration   9: 1084745.147 ops/s
Iteration  10: 1084267.891 ops/s
Iteration  11: 1088783.358 ops/s
Iteration  12: 1080941.415 ops/s
Iteration  13: 1077526.134 ops/s
Iteration  14: 1080073.835 ops/s
Iteration  15: 1082351.252 ops/s
Iteration  16: 1084564.942 ops/s
Iteration  17: 1088910.004 ops/s
Iteration  18: 1083880.777 ops/s
Iteration  19: 1095984.826 ops/s
Iteration  20: 1084298.212 ops/s
Iteration  21: 1085322.113 ops/s
Iteration  22: 1090380.465 ops/s
Iteration  23: 1089078.899 ops/s
Iteration  24: 1084830.453 ops/s
Iteration  25: 1085491.206 ops/s
Iteration  26: 1082545.395 ops/s
Iteration  27: 1088940.821 ops/s
Iteration  28: 1085406.161 ops/s
Iteration  29: 1084105.685 ops/s
Iteration  30: 1084382.756 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_chunk_zero_throws":
  1085145.260 ±(99.9%) 2336.942 ops/s [Average]
  (min, avg, max) = (1077526.134, 1085145.260, 1095984.826), stdev = 3497.824
  CI (99.9%): [1082808.318, 1087482.201] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  1085145.260 ± 2336.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606964.464 ops/s
# Warmup Iteration   2: 669814.711 ops/s
# Warmup Iteration   3: 874339.754 ops/s
# Warmup Iteration   4: 872649.279 ops/s
# Warmup Iteration   5: 873768.517 ops/s
# Warmup Iteration   6: 871054.443 ops/s
# Warmup Iteration   7: 871522.161 ops/s
# Warmup Iteration   8: 875989.012 ops/s
# Warmup Iteration   9: 876291.387 ops/s
# Warmup Iteration  10: 723544.904 ops/s
# Warmup Iteration  11: 873360.410 ops/s
# Warmup Iteration  12: 870061.706 ops/s
# Warmup Iteration  13: 876274.037 ops/s
# Warmup Iteration  14: 868984.629 ops/s
# Warmup Iteration  15: 875768.653 ops/s
# Warmup Iteration  16: 876095.516 ops/s
# Warmup Iteration  17: 923369.444 ops/s
# Warmup Iteration  18: 922019.950 ops/s
# Warmup Iteration  19: 917626.895 ops/s
# Warmup Iteration  20: 920245.428 ops/s
# Warmup Iteration  21: 923753.166 ops/s
# Warmup Iteration  22: 920585.477 ops/s
# Warmup Iteration  23: 923382.296 ops/s
# Warmup Iteration  24: 920418.990 ops/s
# Warmup Iteration  25: 921783.450 ops/s
# Warmup Iteration  26: 922690.748 ops/s
# Warmup Iteration  27: 921338.899 ops/s
# Warmup Iteration  28: 925020.476 ops/s
# Warmup Iteration  29: 922575.725 ops/s
# Warmup Iteration  30: 924688.161 ops/s
Iteration   1: 928438.943 ops/s
Iteration   2: 922687.155 ops/s
Iteration   3: 917000.190 ops/s
Iteration   4: 920606.363 ops/s
Iteration   5: 923352.522 ops/s
Iteration   6: 918784.210 ops/s
Iteration   7: 920302.343 ops/s
Iteration   8: 925022.636 ops/s
Iteration   9: 919434.651 ops/s
Iteration  10: 924495.396 ops/s
Iteration  11: 920945.961 ops/s
Iteration  12: 925582.108 ops/s
Iteration  13: 920142.774 ops/s
Iteration  14: 920090.623 ops/s
Iteration  15: 918714.396 ops/s
Iteration  16: 919468.636 ops/s
Iteration  17: 922571.049 ops/s
Iteration  18: 923940.455 ops/s
Iteration  19: 914847.176 ops/s
Iteration  20: 921359.063 ops/s
Iteration  21: 925328.887 ops/s
Iteration  22: 920369.445 ops/s
Iteration  23: 919876.191 ops/s
Iteration  24: 924665.413 ops/s
Iteration  25: 918905.896 ops/s
Iteration  26: 915847.786 ops/s
Iteration  27: 922057.894 ops/s
Iteration  28: 920455.968 ops/s
Iteration  29: 921786.399 ops/s
Iteration  30: 921023.579 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_clear":
  921270.137 ±(99.9%) 2000.337 ops/s [Average]
  (min, avg, max) = (914847.176, 921270.137, 928438.943), stdev = 2994.011
  CI (99.9%): [919269.800, 923270.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_clear  thrpt   30  921270.137 ± 2000.337  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1232744.652 ops/s
# Warmup Iteration   2: 2920593.354 ops/s
# Warmup Iteration   3: 2419496.255 ops/s
# Warmup Iteration   4: 2940172.624 ops/s
# Warmup Iteration   5: 2914708.004 ops/s
# Warmup Iteration   6: 2929886.799 ops/s
# Warmup Iteration   7: 2924687.466 ops/s
# Warmup Iteration   8: 2933931.813 ops/s
# Warmup Iteration   9: 2917915.975 ops/s
# Warmup Iteration  10: 2950095.396 ops/s
# Warmup Iteration  11: 2938302.084 ops/s
# Warmup Iteration  12: 2937785.080 ops/s
# Warmup Iteration  13: 2961583.641 ops/s
# Warmup Iteration  14: 2928527.790 ops/s
# Warmup Iteration  15: 2923405.423 ops/s
# Warmup Iteration  16: 2949656.309 ops/s
# Warmup Iteration  17: 2979732.382 ops/s
# Warmup Iteration  18: 2940194.968 ops/s
# Warmup Iteration  19: 2969259.808 ops/s
# Warmup Iteration  20: 2959529.415 ops/s
# Warmup Iteration  21: 2962706.323 ops/s
# Warmup Iteration  22: 2924209.111 ops/s
# Warmup Iteration  23: 2922669.462 ops/s
# Warmup Iteration  24: 2921856.646 ops/s
# Warmup Iteration  25: 2927911.863 ops/s
# Warmup Iteration  26: 2949728.688 ops/s
# Warmup Iteration  27: 2968940.456 ops/s
# Warmup Iteration  28: 2943255.135 ops/s
# Warmup Iteration  29: 2943610.478 ops/s
# Warmup Iteration  30: 2985718.321 ops/s
Iteration   1: 2934718.765 ops/s
Iteration   2: 2919726.574 ops/s
Iteration   3: 2945238.006 ops/s
Iteration   4: 2959173.117 ops/s
Iteration   5: 2959270.226 ops/s
Iteration   6: 2918244.621 ops/s
Iteration   7: 2964762.159 ops/s
Iteration   8: 2943963.914 ops/s
Iteration   9: 2939181.650 ops/s
Iteration  10: 2946013.531 ops/s
Iteration  11: 2930595.011 ops/s
Iteration  12: 2947970.628 ops/s
Iteration  13: 2936157.199 ops/s
Iteration  14: 2942209.229 ops/s
Iteration  15: 2925943.995 ops/s
Iteration  16: 2934137.551 ops/s
Iteration  17: 2932311.330 ops/s
Iteration  18: 2931000.450 ops/s
Iteration  19: 2951067.487 ops/s
Iteration  20: 2920912.407 ops/s
Iteration  21: 2963127.274 ops/s
Iteration  22: 2923100.575 ops/s
Iteration  23: 2964622.735 ops/s
Iteration  24: 2986460.993 ops/s
Iteration  25: 2950066.076 ops/s
Iteration  26: 2959074.038 ops/s
Iteration  27: 2973128.719 ops/s
Iteration  28: 2930046.911 ops/s
Iteration  29: 2953809.622 ops/s
Iteration  30: 2956781.893 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collect":
  2944760.556 ±(99.9%) 11380.486 ops/s [Average]
  (min, avg, max) = (2918244.621, 2944760.556, 2986460.993), stdev = 17033.777
  CI (99.9%): [2933380.070, 2956141.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collect  thrpt   30  2944760.556 ± 11380.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1808584.529 ops/s
# Warmup Iteration   2: 4573829.066 ops/s
# Warmup Iteration   3: 4574742.338 ops/s
# Warmup Iteration   4: 3779564.567 ops/s
# Warmup Iteration   5: 4575940.107 ops/s
# Warmup Iteration   6: 4568864.085 ops/s
# Warmup Iteration   7: 4567882.297 ops/s
# Warmup Iteration   8: 4582376.903 ops/s
# Warmup Iteration   9: 4585891.783 ops/s
# Warmup Iteration  10: 4591626.116 ops/s
# Warmup Iteration  11: 4576605.799 ops/s
# Warmup Iteration  12: 4540005.481 ops/s
# Warmup Iteration  13: 4579821.292 ops/s
# Warmup Iteration  14: 4573764.003 ops/s
# Warmup Iteration  15: 4584984.291 ops/s
# Warmup Iteration  16: 4575926.527 ops/s
# Warmup Iteration  17: 4572588.497 ops/s
# Warmup Iteration  18: 4601883.774 ops/s
# Warmup Iteration  19: 4571432.496 ops/s
# Warmup Iteration  20: 4589966.337 ops/s
# Warmup Iteration  21: 4579714.571 ops/s
# Warmup Iteration  22: 4570388.817 ops/s
# Warmup Iteration  23: 4561803.991 ops/s
# Warmup Iteration  24: 4562906.767 ops/s
# Warmup Iteration  25: 4559276.246 ops/s
# Warmup Iteration  26: 4557057.815 ops/s
# Warmup Iteration  27: 4580189.086 ops/s
# Warmup Iteration  28: 4569361.980 ops/s
# Warmup Iteration  29: 4570609.821 ops/s
# Warmup Iteration  30: 4569871.871 ops/s
Iteration   1: 4570278.556 ops/s
Iteration   2: 4579547.320 ops/s
Iteration   3: 4549887.860 ops/s
Iteration   4: 4551887.240 ops/s
Iteration   5: 4570581.607 ops/s
Iteration   6: 4563366.373 ops/s
Iteration   7: 4546170.200 ops/s
Iteration   8: 4554484.241 ops/s
Iteration   9: 4552768.658 ops/s
Iteration  10: 4554388.948 ops/s
Iteration  11: 4560901.007 ops/s
Iteration  12: 4538482.220 ops/s
Iteration  13: 4588405.756 ops/s
Iteration  14: 4557845.167 ops/s
Iteration  15: 4599579.450 ops/s
Iteration  16: 4582072.510 ops/s
Iteration  17: 4572354.101 ops/s
Iteration  18: 4580536.999 ops/s
Iteration  19: 4589881.143 ops/s
Iteration  20: 4579662.843 ops/s
Iteration  21: 4542949.333 ops/s
Iteration  22: 4542882.571 ops/s
Iteration  23: 4562453.259 ops/s
Iteration  24: 4503134.302 ops/s
Iteration  25: 4564503.441 ops/s
Iteration  26: 4564308.864 ops/s
Iteration  27: 4566669.580 ops/s
Iteration  28: 4565258.308 ops/s
Iteration  29: 4557054.887 ops/s
Iteration  30: 4554104.714 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBoolean":
  4562213.382 ±(99.9%) 12467.477 ops/s [Average]
  (min, avg, max) = (4503134.302, 4562213.382, 4599579.450), stdev = 18660.734
  CI (99.9%): [4549745.905, 4574680.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectBoolean  thrpt   30  4562213.382 ± 12467.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13765304.722 ops/s
# Warmup Iteration   2: 28155293.177 ops/s
# Warmup Iteration   3: 23794713.562 ops/s
# Warmup Iteration   4: 28212915.832 ops/s
# Warmup Iteration   5: 28000894.393 ops/s
# Warmup Iteration   6: 28057435.326 ops/s
# Warmup Iteration   7: 28192441.622 ops/s
# Warmup Iteration   8: 27994691.910 ops/s
# Warmup Iteration   9: 28033040.687 ops/s
# Warmup Iteration  10: 28070385.042 ops/s
# Warmup Iteration  11: 28111037.003 ops/s
# Warmup Iteration  12: 28145038.957 ops/s
# Warmup Iteration  13: 28174693.243 ops/s
# Warmup Iteration  14: 28160341.753 ops/s
# Warmup Iteration  15: 27983319.666 ops/s
# Warmup Iteration  16: 27978230.561 ops/s
# Warmup Iteration  17: 28145836.657 ops/s
# Warmup Iteration  18: 28082706.891 ops/s
# Warmup Iteration  19: 28188450.305 ops/s
# Warmup Iteration  20: 28111436.807 ops/s
# Warmup Iteration  21: 28212475.928 ops/s
# Warmup Iteration  22: 28041955.196 ops/s
# Warmup Iteration  23: 28209382.619 ops/s
# Warmup Iteration  24: 28151386.994 ops/s
# Warmup Iteration  25: 28084507.538 ops/s
# Warmup Iteration  26: 27993546.801 ops/s
# Warmup Iteration  27: 28070694.503 ops/s
# Warmup Iteration  28: 28090791.045 ops/s
# Warmup Iteration  29: 28239152.973 ops/s
# Warmup Iteration  30: 28136392.149 ops/s
Iteration   1: 28207925.754 ops/s
Iteration   2: 27938367.235 ops/s
Iteration   3: 28056129.775 ops/s
Iteration   4: 27912914.978 ops/s
Iteration   5: 28124853.370 ops/s
Iteration   6: 28115330.293 ops/s
Iteration   7: 28117675.047 ops/s
Iteration   8: 27951506.469 ops/s
Iteration   9: 27753881.574 ops/s
Iteration  10: 28022878.367 ops/s
Iteration  11: 28008042.912 ops/s
Iteration  12: 27919520.206 ops/s
Iteration  13: 28047129.890 ops/s
Iteration  14: 28191285.858 ops/s
Iteration  15: 28209919.669 ops/s
Iteration  16: 27954968.619 ops/s
Iteration  17: 28047543.040 ops/s
Iteration  18: 28212529.155 ops/s
Iteration  19: 27972174.517 ops/s
Iteration  20: 28073544.076 ops/s
Iteration  21: 28121514.690 ops/s
Iteration  22: 28071826.491 ops/s
Iteration  23: 28109789.467 ops/s
Iteration  24: 27961925.952 ops/s
Iteration  25: 28018625.106 ops/s
Iteration  26: 28220405.827 ops/s
Iteration  27: 28166943.944 ops/s
Iteration  28: 28318258.051 ops/s
Iteration  29: 28279307.593 ops/s
Iteration  30: 28025477.576 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  28071073.183 ±(99.9%) 83007.457 ops/s [Average]
  (min, avg, max) = (27753881.574, 28071073.183, 28318258.051), stdev = 124241.663
  CI (99.9%): [27988065.726, 28154080.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  28071073.183 ± 83007.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7152479.398 ops/s
# Warmup Iteration   2: 15975556.618 ops/s
# Warmup Iteration   3: 16087435.214 ops/s
# Warmup Iteration   4: 13518490.021 ops/s
# Warmup Iteration   5: 16078283.950 ops/s
# Warmup Iteration   6: 16073305.737 ops/s
# Warmup Iteration   7: 16005967.805 ops/s
# Warmup Iteration   8: 16077769.758 ops/s
# Warmup Iteration   9: 16130952.964 ops/s
# Warmup Iteration  10: 16097212.191 ops/s
# Warmup Iteration  11: 16085493.796 ops/s
# Warmup Iteration  12: 16137065.159 ops/s
# Warmup Iteration  13: 16106637.098 ops/s
# Warmup Iteration  14: 16093720.265 ops/s
# Warmup Iteration  15: 16081113.955 ops/s
# Warmup Iteration  16: 15993993.957 ops/s
# Warmup Iteration  17: 16099532.573 ops/s
# Warmup Iteration  18: 16077670.877 ops/s
# Warmup Iteration  19: 16062152.864 ops/s
# Warmup Iteration  20: 16118198.810 ops/s
# Warmup Iteration  21: 16120992.520 ops/s
# Warmup Iteration  22: 16067644.844 ops/s
# Warmup Iteration  23: 16093901.371 ops/s
# Warmup Iteration  24: 16077290.319 ops/s
# Warmup Iteration  25: 16083595.828 ops/s
# Warmup Iteration  26: 16125317.551 ops/s
# Warmup Iteration  27: 16082552.339 ops/s
# Warmup Iteration  28: 16147134.350 ops/s
# Warmup Iteration  29: 16129606.508 ops/s
# Warmup Iteration  30: 16158388.586 ops/s
Iteration   1: 16143582.105 ops/s
Iteration   2: 16168094.030 ops/s
Iteration   3: 16117990.569 ops/s
Iteration   4: 16178118.544 ops/s
Iteration   5: 16122802.550 ops/s
Iteration   6: 16097408.556 ops/s
Iteration   7: 16069332.158 ops/s
Iteration   8: 16143673.682 ops/s
Iteration   9: 16157114.390 ops/s
Iteration  10: 16156574.298 ops/s
Iteration  11: 16068382.180 ops/s
Iteration  12: 16157350.941 ops/s
Iteration  13: 16147187.041 ops/s
Iteration  14: 16175506.071 ops/s
Iteration  15: 16104684.112 ops/s
Iteration  16: 16183693.380 ops/s
Iteration  17: 16167865.234 ops/s
Iteration  18: 16171068.726 ops/s
Iteration  19: 16183405.295 ops/s
Iteration  20: 16115302.243 ops/s
Iteration  21: 16165870.418 ops/s
Iteration  22: 16090937.951 ops/s
Iteration  23: 16137626.004 ops/s
Iteration  24: 16127924.072 ops/s
Iteration  25: 16177875.369 ops/s
Iteration  26: 16177404.320 ops/s
Iteration  27: 16150701.241 ops/s
Iteration  28: 16146989.851 ops/s
Iteration  29: 16090737.279 ops/s
Iteration  30: 16083242.921 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithTarget":
  16139281.518 ±(99.9%) 23675.531 ops/s [Average]
  (min, avg, max) = (16068382.180, 16139281.518, 16183693.380), stdev = 35436.423
  CI (99.9%): [16115605.987, 16162957.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  16139281.518 ± 23675.531  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 815502.748 ops/s
# Warmup Iteration   2: 1926128.176 ops/s
# Warmup Iteration   3: 1941360.197 ops/s
# Warmup Iteration   4: 1627371.648 ops/s
# Warmup Iteration   5: 1954608.031 ops/s
# Warmup Iteration   6: 1943174.608 ops/s
# Warmup Iteration   7: 1938846.574 ops/s
# Warmup Iteration   8: 1947774.285 ops/s
# Warmup Iteration   9: 1941114.998 ops/s
# Warmup Iteration  10: 1931273.330 ops/s
# Warmup Iteration  11: 1944757.195 ops/s
# Warmup Iteration  12: 1946103.637 ops/s
# Warmup Iteration  13: 1944267.194 ops/s
# Warmup Iteration  14: 1935336.037 ops/s
# Warmup Iteration  15: 1941624.704 ops/s
# Warmup Iteration  16: 1952237.238 ops/s
# Warmup Iteration  17: 1942475.229 ops/s
# Warmup Iteration  18: 1947420.596 ops/s
# Warmup Iteration  19: 1943063.948 ops/s
# Warmup Iteration  20: 1942458.040 ops/s
# Warmup Iteration  21: 1944563.456 ops/s
# Warmup Iteration  22: 1946237.832 ops/s
# Warmup Iteration  23: 1950230.777 ops/s
# Warmup Iteration  24: 1941286.931 ops/s
# Warmup Iteration  25: 1937608.723 ops/s
# Warmup Iteration  26: 1946057.906 ops/s
# Warmup Iteration  27: 1948031.418 ops/s
# Warmup Iteration  28: 1943791.029 ops/s
# Warmup Iteration  29: 1947865.034 ops/s
# Warmup Iteration  30: 1946300.269 ops/s
Iteration   1: 1935257.186 ops/s
Iteration   2: 1948629.987 ops/s
Iteration   3: 1943831.821 ops/s
Iteration   4: 1949627.263 ops/s
Iteration   5: 1939401.933 ops/s
Iteration   6: 1933063.522 ops/s
Iteration   7: 1949605.044 ops/s
Iteration   8: 1944554.758 ops/s
Iteration   9: 1952707.714 ops/s
Iteration  10: 1947186.047 ops/s
Iteration  11: 1941134.592 ops/s
Iteration  12: 1944453.777 ops/s
Iteration  13: 1948853.433 ops/s
Iteration  14: 1943740.496 ops/s
Iteration  15: 1943413.522 ops/s
Iteration  16: 1930697.866 ops/s
Iteration  17: 1952358.440 ops/s
Iteration  18: 1936496.035 ops/s
Iteration  19: 1950772.303 ops/s
Iteration  20: 1951960.650 ops/s
Iteration  21: 1941743.364 ops/s
Iteration  22: 1950660.189 ops/s
Iteration  23: 1945690.336 ops/s
Iteration  24: 1945199.498 ops/s
Iteration  25: 1936531.188 ops/s
Iteration  26: 1937892.061 ops/s
Iteration  27: 1938938.664 ops/s
Iteration  28: 1945482.578 ops/s
Iteration  29: 1956532.196 ops/s
Iteration  30: 1944369.565 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByte":
  1944359.534 ±(99.9%) 4226.832 ops/s [Average]
  (min, avg, max) = (1930697.866, 1944359.534, 1956532.196), stdev = 6326.523
  CI (99.9%): [1940132.703, 1948586.366] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectByte  thrpt   30  1944359.534 ± 4226.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2680723.194 ops/s
# Warmup Iteration   2: 6023137.991 ops/s
# Warmup Iteration   3: 5150408.305 ops/s
# Warmup Iteration   4: 6121478.168 ops/s
# Warmup Iteration   5: 6109802.255 ops/s
# Warmup Iteration   6: 6147713.296 ops/s
# Warmup Iteration   7: 6092807.380 ops/s
# Warmup Iteration   8: 6098269.784 ops/s
# Warmup Iteration   9: 6095673.405 ops/s
# Warmup Iteration  10: 6090326.928 ops/s
# Warmup Iteration  11: 6112930.157 ops/s
# Warmup Iteration  12: 6107244.081 ops/s
# Warmup Iteration  13: 6123560.702 ops/s
# Warmup Iteration  14: 6094830.721 ops/s
# Warmup Iteration  15: 6060716.077 ops/s
# Warmup Iteration  16: 6092361.780 ops/s
# Warmup Iteration  17: 6103558.139 ops/s
# Warmup Iteration  18: 6120114.987 ops/s
# Warmup Iteration  19: 6102036.179 ops/s
# Warmup Iteration  20: 6102023.777 ops/s
# Warmup Iteration  21: 6108244.611 ops/s
# Warmup Iteration  22: 6100436.150 ops/s
# Warmup Iteration  23: 6103702.912 ops/s
# Warmup Iteration  24: 6109020.020 ops/s
# Warmup Iteration  25: 6140875.292 ops/s
# Warmup Iteration  26: 6112851.244 ops/s
# Warmup Iteration  27: 6129023.211 ops/s
# Warmup Iteration  28: 6098800.011 ops/s
# Warmup Iteration  29: 6115438.295 ops/s
# Warmup Iteration  30: 6132310.731 ops/s
Iteration   1: 6114764.457 ops/s
Iteration   2: 6047199.933 ops/s
Iteration   3: 6122455.096 ops/s
Iteration   4: 6136501.908 ops/s
Iteration   5: 6137990.809 ops/s
Iteration   6: 6095355.508 ops/s
Iteration   7: 6110434.133 ops/s
Iteration   8: 6096070.384 ops/s
Iteration   9: 6067328.280 ops/s
Iteration  10: 6117017.217 ops/s
Iteration  11: 6144992.682 ops/s
Iteration  12: 6139425.001 ops/s
Iteration  13: 6119252.472 ops/s
Iteration  14: 6131537.143 ops/s
Iteration  15: 6143266.426 ops/s
Iteration  16: 6089756.750 ops/s
Iteration  17: 6105904.902 ops/s
Iteration  18: 6113133.953 ops/s
Iteration  19: 6105311.677 ops/s
Iteration  20: 6110037.698 ops/s
Iteration  21: 6123911.533 ops/s
Iteration  22: 6096823.026 ops/s
Iteration  23: 6106626.263 ops/s
Iteration  24: 6118212.825 ops/s
Iteration  25: 6093810.695 ops/s
Iteration  26: 6109867.604 ops/s
Iteration  27: 6115396.677 ops/s
Iteration  28: 6094753.038 ops/s
Iteration  29: 6151907.413 ops/s
Iteration  30: 6122167.714 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithBagTarget":
  6112707.107 ±(99.9%) 15065.265 ops/s [Average]
  (min, avg, max) = (6047199.933, 6112707.107, 6151907.413), stdev = 22548.982
  CI (99.9%): [6097641.842, 6127772.373] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  6112707.107 ± 15065.265  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1960767.581 ops/s
# Warmup Iteration   2: 4603858.576 ops/s
# Warmup Iteration   3: 4565290.499 ops/s
# Warmup Iteration   4: 3833012.550 ops/s
# Warmup Iteration   5: 4566849.128 ops/s
# Warmup Iteration   6: 4544616.084 ops/s
# Warmup Iteration   7: 4568660.989 ops/s
# Warmup Iteration   8: 4578661.192 ops/s
# Warmup Iteration   9: 4566673.917 ops/s
# Warmup Iteration  10: 4543869.941 ops/s
# Warmup Iteration  11: 4571223.154 ops/s
# Warmup Iteration  12: 4583382.338 ops/s
# Warmup Iteration  13: 4559219.006 ops/s
# Warmup Iteration  14: 4565625.941 ops/s
# Warmup Iteration  15: 4563088.846 ops/s
# Warmup Iteration  16: 4567672.491 ops/s
# Warmup Iteration  17: 4569421.736 ops/s
# Warmup Iteration  18: 4595418.824 ops/s
# Warmup Iteration  19: 4566267.918 ops/s
# Warmup Iteration  20: 4571297.127 ops/s
# Warmup Iteration  21: 4559324.251 ops/s
# Warmup Iteration  22: 4590808.154 ops/s
# Warmup Iteration  23: 4591924.424 ops/s
# Warmup Iteration  24: 4567961.604 ops/s
# Warmup Iteration  25: 4573805.657 ops/s
# Warmup Iteration  26: 4606033.776 ops/s
# Warmup Iteration  27: 4574537.279 ops/s
# Warmup Iteration  28: 4572280.131 ops/s
# Warmup Iteration  29: 4568405.079 ops/s
# Warmup Iteration  30: 4584758.797 ops/s
Iteration   1: 4574836.770 ops/s
Iteration   2: 4594869.052 ops/s
Iteration   3: 4552673.016 ops/s
Iteration   4: 4583889.388 ops/s
Iteration   5: 4584929.904 ops/s
Iteration   6: 4604057.319 ops/s
Iteration   7: 4568090.881 ops/s
Iteration   8: 4580127.888 ops/s
Iteration   9: 4528643.663 ops/s
Iteration  10: 4594147.940 ops/s
Iteration  11: 4589411.927 ops/s
Iteration  12: 4580849.700 ops/s
Iteration  13: 4564935.994 ops/s
Iteration  14: 4578290.340 ops/s
Iteration  15: 4556872.978 ops/s
Iteration  16: 4568222.021 ops/s
Iteration  17: 4539988.842 ops/s
Iteration  18: 4586654.698 ops/s
Iteration  19: 4570664.662 ops/s
Iteration  20: 4577010.618 ops/s
Iteration  21: 4560672.051 ops/s
Iteration  22: 4575493.512 ops/s
Iteration  23: 4594684.022 ops/s
Iteration  24: 4581104.733 ops/s
Iteration  25: 4570118.063 ops/s
Iteration  26: 4569174.797 ops/s
Iteration  27: 4576819.819 ops/s
Iteration  28: 4541280.341 ops/s
Iteration  29: 4574540.270 ops/s
Iteration  30: 4587311.159 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectByteWithTarget":
  4573678.879 ±(99.9%) 11468.924 ops/s [Average]
  (min, avg, max) = (4528643.663, 4573678.879, 4604057.319), stdev = 17166.147
  CI (99.9%): [4562209.955, 4585147.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  4573678.879 ± 11468.924  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847121.465 ops/s
# Warmup Iteration   2: 2040844.079 ops/s
# Warmup Iteration   3: 2026768.194 ops/s
# Warmup Iteration   4: 1700275.633 ops/s
# Warmup Iteration   5: 2037720.739 ops/s
# Warmup Iteration   6: 2033185.326 ops/s
# Warmup Iteration   7: 2037134.469 ops/s
# Warmup Iteration   8: 2031598.960 ops/s
# Warmup Iteration   9: 2028190.159 ops/s
# Warmup Iteration  10: 2037084.216 ops/s
# Warmup Iteration  11: 2040783.571 ops/s
# Warmup Iteration  12: 2040847.751 ops/s
# Warmup Iteration  13: 2031793.648 ops/s
# Warmup Iteration  14: 2033495.015 ops/s
# Warmup Iteration  15: 2034668.427 ops/s
# Warmup Iteration  16: 2029384.067 ops/s
# Warmup Iteration  17: 2052897.601 ops/s
# Warmup Iteration  18: 2047708.558 ops/s
# Warmup Iteration  19: 2043026.181 ops/s
# Warmup Iteration  20: 2059700.422 ops/s
# Warmup Iteration  21: 2054337.634 ops/s
# Warmup Iteration  22: 2047769.563 ops/s
# Warmup Iteration  23: 2052539.425 ops/s
# Warmup Iteration  24: 2056831.974 ops/s
# Warmup Iteration  25: 2052367.175 ops/s
# Warmup Iteration  26: 2037314.150 ops/s
# Warmup Iteration  27: 2049251.294 ops/s
# Warmup Iteration  28: 2056662.188 ops/s
# Warmup Iteration  29: 2054611.254 ops/s
# Warmup Iteration  30: 2054748.434 ops/s
Iteration   1: 2047081.952 ops/s
Iteration   2: 2049338.768 ops/s
Iteration   3: 2053348.109 ops/s
Iteration   4: 2043288.770 ops/s
Iteration   5: 2052403.441 ops/s
Iteration   6: 2060436.747 ops/s
Iteration   7: 2048259.229 ops/s
Iteration   8: 2053304.195 ops/s
Iteration   9: 2046101.280 ops/s
Iteration  10: 2061903.387 ops/s
Iteration  11: 2053886.365 ops/s
Iteration  12: 2051372.367 ops/s
Iteration  13: 2046370.739 ops/s
Iteration  14: 2036988.882 ops/s
Iteration  15: 2061009.578 ops/s
Iteration  16: 2048722.807 ops/s
Iteration  17: 2055650.513 ops/s
Iteration  18: 2051963.135 ops/s
Iteration  19: 2055988.250 ops/s
Iteration  20: 2046274.346 ops/s
Iteration  21: 2048809.136 ops/s
Iteration  22: 2044579.931 ops/s
Iteration  23: 2059164.294 ops/s
Iteration  24: 2056141.851 ops/s
Iteration  25: 2056250.000 ops/s
Iteration  26: 2053055.143 ops/s
Iteration  27: 2062104.573 ops/s
Iteration  28: 2046091.410 ops/s
Iteration  29: 2055338.730 ops/s
Iteration  30: 2042626.335 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectChar":
  2051595.142 ±(99.9%) 4166.439 ops/s [Average]
  (min, avg, max) = (2036988.882, 2051595.142, 2062104.573), stdev = 6236.130
  CI (99.9%): [2047428.703, 2055761.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectChar  thrpt   30  2051595.142 ± 4166.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2945831.762 ops/s
# Warmup Iteration   2: 6472827.362 ops/s
# Warmup Iteration   3: 5474231.327 ops/s
# Warmup Iteration   4: 6469054.441 ops/s
# Warmup Iteration   5: 6546996.773 ops/s
# Warmup Iteration   6: 6518739.146 ops/s
# Warmup Iteration   7: 6561197.220 ops/s
# Warmup Iteration   8: 6579166.688 ops/s
# Warmup Iteration   9: 6545674.100 ops/s
# Warmup Iteration  10: 6560153.009 ops/s
# Warmup Iteration  11: 6542973.929 ops/s
# Warmup Iteration  12: 6535342.883 ops/s
# Warmup Iteration  13: 6518611.215 ops/s
# Warmup Iteration  14: 6526554.084 ops/s
# Warmup Iteration  15: 6532055.562 ops/s
# Warmup Iteration  16: 6548776.270 ops/s
# Warmup Iteration  17: 6552257.507 ops/s
# Warmup Iteration  18: 6549276.756 ops/s
# Warmup Iteration  19: 6519744.491 ops/s
# Warmup Iteration  20: 6519932.804 ops/s
# Warmup Iteration  21: 6531517.863 ops/s
# Warmup Iteration  22: 6553052.686 ops/s
# Warmup Iteration  23: 6519289.690 ops/s
# Warmup Iteration  24: 6529331.181 ops/s
# Warmup Iteration  25: 6547725.116 ops/s
# Warmup Iteration  26: 6541944.081 ops/s
# Warmup Iteration  27: 6562033.713 ops/s
# Warmup Iteration  28: 6487766.287 ops/s
# Warmup Iteration  29: 6534612.592 ops/s
# Warmup Iteration  30: 6560909.327 ops/s
Iteration   1: 6557012.318 ops/s
Iteration   2: 6531222.225 ops/s
Iteration   3: 6542999.429 ops/s
Iteration   4: 6564851.069 ops/s
Iteration   5: 6541851.085 ops/s
Iteration   6: 6568433.739 ops/s
Iteration   7: 6500414.761 ops/s
Iteration   8: 6529961.705 ops/s
Iteration   9: 6573398.162 ops/s
Iteration  10: 6533205.013 ops/s
Iteration  11: 6529055.539 ops/s
Iteration  12: 6551575.004 ops/s
Iteration  13: 6515550.779 ops/s
Iteration  14: 6577601.369 ops/s
Iteration  15: 6544268.936 ops/s
Iteration  16: 6524192.119 ops/s
Iteration  17: 6520616.883 ops/s
Iteration  18: 6566949.810 ops/s
Iteration  19: 6533728.078 ops/s
Iteration  20: 6591991.154 ops/s
Iteration  21: 6520663.585 ops/s
Iteration  22: 6563660.660 ops/s
Iteration  23: 6575550.058 ops/s
Iteration  24: 6523087.734 ops/s
Iteration  25: 6545266.021 ops/s
Iteration  26: 6531036.724 ops/s
Iteration  27: 6554627.533 ops/s
Iteration  28: 6562070.530 ops/s
Iteration  29: 6513219.881 ops/s
Iteration  30: 6559134.053 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithBagTarget":
  6544906.532 ±(99.9%) 15024.727 ops/s [Average]
  (min, avg, max) = (6500414.761, 6544906.532, 6591991.154), stdev = 22488.306
  CI (99.9%): [6529881.805, 6559931.259] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  6544906.532 ± 15024.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2119939.845 ops/s
# Warmup Iteration   2: 4904209.550 ops/s
# Warmup Iteration   3: 4120159.957 ops/s
# Warmup Iteration   4: 4972986.967 ops/s
# Warmup Iteration   5: 4964618.044 ops/s
# Warmup Iteration   6: 4975582.143 ops/s
# Warmup Iteration   7: 4946297.868 ops/s
# Warmup Iteration   8: 4970655.513 ops/s
# Warmup Iteration   9: 4965432.418 ops/s
# Warmup Iteration  10: 4985617.691 ops/s
# Warmup Iteration  11: 4981377.637 ops/s
# Warmup Iteration  12: 4965458.225 ops/s
# Warmup Iteration  13: 4958427.034 ops/s
# Warmup Iteration  14: 4967946.348 ops/s
# Warmup Iteration  15: 4977299.132 ops/s
# Warmup Iteration  16: 4965339.746 ops/s
# Warmup Iteration  17: 4959200.289 ops/s
# Warmup Iteration  18: 4946008.320 ops/s
# Warmup Iteration  19: 4969031.528 ops/s
# Warmup Iteration  20: 4991165.591 ops/s
# Warmup Iteration  21: 4963717.880 ops/s
# Warmup Iteration  22: 4969312.083 ops/s
# Warmup Iteration  23: 4935438.292 ops/s
# Warmup Iteration  24: 4964806.932 ops/s
# Warmup Iteration  25: 4971592.015 ops/s
# Warmup Iteration  26: 4950222.565 ops/s
# Warmup Iteration  27: 4966534.684 ops/s
# Warmup Iteration  28: 4960443.061 ops/s
# Warmup Iteration  29: 4961725.093 ops/s
# Warmup Iteration  30: 4960533.428 ops/s
Iteration   1: 4950208.975 ops/s
Iteration   2: 4968974.924 ops/s
Iteration   3: 4947570.852 ops/s
Iteration   4: 4942773.813 ops/s
Iteration   5: 4977104.824 ops/s
Iteration   6: 4949238.085 ops/s
Iteration   7: 4944763.893 ops/s
Iteration   8: 4976575.810 ops/s
Iteration   9: 4952849.589 ops/s
Iteration  10: 4963687.092 ops/s
Iteration  11: 4994207.235 ops/s
Iteration  12: 4975846.638 ops/s
Iteration  13: 4966857.808 ops/s
Iteration  14: 4964885.812 ops/s
Iteration  15: 4964895.211 ops/s
Iteration  16: 4967036.140 ops/s
Iteration  17: 4951393.954 ops/s
Iteration  18: 4961451.806 ops/s
Iteration  19: 4988836.071 ops/s
Iteration  20: 4944751.629 ops/s
Iteration  21: 4958522.339 ops/s
Iteration  22: 4959743.678 ops/s
Iteration  23: 4979520.807 ops/s
Iteration  24: 4936323.572 ops/s
Iteration  25: 4942155.289 ops/s
Iteration  26: 4966065.969 ops/s
Iteration  27: 4976401.217 ops/s
Iteration  28: 4939023.097 ops/s
Iteration  29: 4963314.814 ops/s
Iteration  30: 4931314.677 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectCharWithTarget":
  4960209.854 ±(99.9%) 10493.720 ops/s [Average]
  (min, avg, max) = (4931314.677, 4960209.854, 4994207.235), stdev = 15706.507
  CI (99.9%): [4949716.134, 4970703.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  4960209.854 ± 10493.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631355.120 ops/s
# Warmup Iteration   2: 1379893.348 ops/s
# Warmup Iteration   3: 1381381.811 ops/s
# Warmup Iteration   4: 1177656.131 ops/s
# Warmup Iteration   5: 1385151.015 ops/s
# Warmup Iteration   6: 1389898.006 ops/s
# Warmup Iteration   7: 1387935.238 ops/s
# Warmup Iteration   8: 1384753.707 ops/s
# Warmup Iteration   9: 1389566.653 ops/s
# Warmup Iteration  10: 1384771.319 ops/s
# Warmup Iteration  11: 1384723.157 ops/s
# Warmup Iteration  12: 1380502.122 ops/s
# Warmup Iteration  13: 1386763.362 ops/s
# Warmup Iteration  14: 1388614.673 ops/s
# Warmup Iteration  15: 1383808.353 ops/s
# Warmup Iteration  16: 1387186.474 ops/s
# Warmup Iteration  17: 1384410.705 ops/s
# Warmup Iteration  18: 1383697.177 ops/s
# Warmup Iteration  19: 1376730.082 ops/s
# Warmup Iteration  20: 1382905.930 ops/s
# Warmup Iteration  21: 1387990.486 ops/s
# Warmup Iteration  22: 1381126.435 ops/s
# Warmup Iteration  23: 1386982.067 ops/s
# Warmup Iteration  24: 1388790.487 ops/s
# Warmup Iteration  25: 1388790.047 ops/s
# Warmup Iteration  26: 1388106.839 ops/s
# Warmup Iteration  27: 1380659.787 ops/s
# Warmup Iteration  28: 1382358.904 ops/s
# Warmup Iteration  29: 1389339.791 ops/s
# Warmup Iteration  30: 1381990.802 ops/s
Iteration   1: 1385265.838 ops/s
Iteration   2: 1382194.344 ops/s
Iteration   3: 1389441.107 ops/s
Iteration   4: 1380507.674 ops/s
Iteration   5: 1395403.909 ops/s
Iteration   6: 1389847.948 ops/s
Iteration   7: 1391208.908 ops/s
Iteration   8: 1390199.858 ops/s
Iteration   9: 1385754.918 ops/s
Iteration  10: 1382161.207 ops/s
Iteration  11: 1391250.966 ops/s
Iteration  12: 1390720.858 ops/s
Iteration  13: 1390536.942 ops/s
Iteration  14: 1390056.796 ops/s
Iteration  15: 1384224.498 ops/s
Iteration  16: 1394482.367 ops/s
Iteration  17: 1389576.526 ops/s
Iteration  18: 1390369.481 ops/s
Iteration  19: 1388817.272 ops/s
Iteration  20: 1381852.371 ops/s
Iteration  21: 1389195.882 ops/s
Iteration  22: 1389116.206 ops/s
Iteration  23: 1392451.189 ops/s
Iteration  24: 1384410.661 ops/s
Iteration  25: 1381015.602 ops/s
Iteration  26: 1382329.886 ops/s
Iteration  27: 1388799.984 ops/s
Iteration  28: 1389773.199 ops/s
Iteration  29: 1390378.785 ops/s
Iteration  30: 1371706.598 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDouble":
  1387435.059 ±(99.9%) 3340.603 ops/s [Average]
  (min, avg, max) = (1371706.598, 1387435.059, 1395403.909), stdev = 5000.058
  CI (99.9%): [1384094.457, 1390775.662] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectDouble  thrpt   30  1387435.059 ± 3340.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1892759.526 ops/s
# Warmup Iteration   2: 4433395.853 ops/s
# Warmup Iteration   3: 3678779.092 ops/s
# Warmup Iteration   4: 4422616.115 ops/s
# Warmup Iteration   5: 4417390.938 ops/s
# Warmup Iteration   6: 4387439.195 ops/s
# Warmup Iteration   7: 4425364.468 ops/s
# Warmup Iteration   8: 4427384.807 ops/s
# Warmup Iteration   9: 4424410.822 ops/s
# Warmup Iteration  10: 4420886.425 ops/s
# Warmup Iteration  11: 4413544.488 ops/s
# Warmup Iteration  12: 4433213.554 ops/s
# Warmup Iteration  13: 4414309.214 ops/s
# Warmup Iteration  14: 4419337.140 ops/s
# Warmup Iteration  15: 4388184.648 ops/s
# Warmup Iteration  16: 4408530.590 ops/s
# Warmup Iteration  17: 4411198.203 ops/s
# Warmup Iteration  18: 4419750.159 ops/s
# Warmup Iteration  19: 4411057.729 ops/s
# Warmup Iteration  20: 4423490.961 ops/s
# Warmup Iteration  21: 4408550.137 ops/s
# Warmup Iteration  22: 4408898.077 ops/s
# Warmup Iteration  23: 4425101.317 ops/s
# Warmup Iteration  24: 4427890.880 ops/s
# Warmup Iteration  25: 4413948.126 ops/s
# Warmup Iteration  26: 4427690.975 ops/s
# Warmup Iteration  27: 4418650.726 ops/s
# Warmup Iteration  28: 4431180.539 ops/s
# Warmup Iteration  29: 4442672.738 ops/s
# Warmup Iteration  30: 4428901.549 ops/s
Iteration   1: 4422988.980 ops/s
Iteration   2: 4392022.554 ops/s
Iteration   3: 4412635.877 ops/s
Iteration   4: 4408871.488 ops/s
Iteration   5: 4429917.073 ops/s
Iteration   6: 4431344.533 ops/s
Iteration   7: 4442735.819 ops/s
Iteration   8: 4421995.295 ops/s
Iteration   9: 4418487.320 ops/s
Iteration  10: 4424968.663 ops/s
Iteration  11: 4407175.749 ops/s
Iteration  12: 4424008.026 ops/s
Iteration  13: 4439317.861 ops/s
Iteration  14: 4446193.214 ops/s
Iteration  15: 4399195.715 ops/s
Iteration  16: 4446710.493 ops/s
Iteration  17: 4437228.946 ops/s
Iteration  18: 4438267.178 ops/s
Iteration  19: 4406284.979 ops/s
Iteration  20: 4433901.560 ops/s
Iteration  21: 4405982.422 ops/s
Iteration  22: 4461874.518 ops/s
Iteration  23: 4418182.683 ops/s
Iteration  24: 4440505.570 ops/s
Iteration  25: 4435841.863 ops/s
Iteration  26: 4445145.469 ops/s
Iteration  27: 4414161.402 ops/s
Iteration  28: 4424064.040 ops/s
Iteration  29: 4430580.411 ops/s
Iteration  30: 4441406.804 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  4426733.217 ±(99.9%) 10858.619 ops/s [Average]
  (min, avg, max) = (4392022.554, 4426733.217, 4461874.518), stdev = 16252.672
  CI (99.9%): [4415874.597, 4437591.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  4426733.217 ± 10858.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1384606.421 ops/s
# Warmup Iteration   2: 3397221.369 ops/s
# Warmup Iteration   3: 2953950.240 ops/s
# Warmup Iteration   4: 3261340.079 ops/s
# Warmup Iteration   5: 3388669.442 ops/s
# Warmup Iteration   6: 3394118.151 ops/s
# Warmup Iteration   7: 3401241.965 ops/s
# Warmup Iteration   8: 3406783.092 ops/s
# Warmup Iteration   9: 3401697.168 ops/s
# Warmup Iteration  10: 3412915.532 ops/s
# Warmup Iteration  11: 3405890.359 ops/s
# Warmup Iteration  12: 3406441.103 ops/s
# Warmup Iteration  13: 3410278.481 ops/s
# Warmup Iteration  14: 3415409.790 ops/s
# Warmup Iteration  15: 3400641.925 ops/s
# Warmup Iteration  16: 3407076.211 ops/s
# Warmup Iteration  17: 3412821.007 ops/s
# Warmup Iteration  18: 3401580.174 ops/s
# Warmup Iteration  19: 3389647.615 ops/s
# Warmup Iteration  20: 3399211.007 ops/s
# Warmup Iteration  21: 3400296.011 ops/s
# Warmup Iteration  22: 3413131.290 ops/s
# Warmup Iteration  23: 3398910.292 ops/s
# Warmup Iteration  24: 3397596.519 ops/s
# Warmup Iteration  25: 3408489.930 ops/s
# Warmup Iteration  26: 3400997.162 ops/s
# Warmup Iteration  27: 3416355.629 ops/s
# Warmup Iteration  28: 3403835.789 ops/s
# Warmup Iteration  29: 3398833.002 ops/s
# Warmup Iteration  30: 3404704.584 ops/s
Iteration   1: 3394294.019 ops/s
Iteration   2: 3405050.353 ops/s
Iteration   3: 3413741.221 ops/s
Iteration   4: 3424982.902 ops/s
Iteration   5: 3388658.087 ops/s
Iteration   6: 3401009.635 ops/s
Iteration   7: 3390809.495 ops/s
Iteration   8: 3389126.272 ops/s
Iteration   9: 3422028.559 ops/s
Iteration  10: 3393051.472 ops/s
Iteration  11: 3390243.522 ops/s
Iteration  12: 3390979.589 ops/s
Iteration  13: 3393228.702 ops/s
Iteration  14: 3396414.360 ops/s
Iteration  15: 3401390.221 ops/s
Iteration  16: 3400515.432 ops/s
Iteration  17: 3403756.639 ops/s
Iteration  18: 3402330.579 ops/s
Iteration  19: 3380899.952 ops/s
Iteration  20: 3411459.132 ops/s
Iteration  21: 3394032.684 ops/s
Iteration  22: 3382752.852 ops/s
Iteration  23: 3400498.571 ops/s
Iteration  24: 3381511.874 ops/s
Iteration  25: 3392988.412 ops/s
Iteration  26: 3396134.436 ops/s
Iteration  27: 3391123.226 ops/s
Iteration  28: 3395013.977 ops/s
Iteration  29: 3384732.555 ops/s
Iteration  30: 3412724.816 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithTarget":
  3397516.118 ±(99.9%) 7384.638 ops/s [Average]
  (min, avg, max) = (3380899.952, 3397516.118, 3424982.902), stdev = 11052.980
  CI (99.9%): [3390131.480, 3404900.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  3397516.118 ± 7384.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 724768.853 ops/s
# Warmup Iteration   2: 1706557.682 ops/s
# Warmup Iteration   3: 1712869.330 ops/s
# Warmup Iteration   4: 1441845.227 ops/s
# Warmup Iteration   5: 1712919.641 ops/s
# Warmup Iteration   6: 1703554.653 ops/s
# Warmup Iteration   7: 1712171.864 ops/s
# Warmup Iteration   8: 1712271.204 ops/s
# Warmup Iteration   9: 1715115.564 ops/s
# Warmup Iteration  10: 1719047.853 ops/s
# Warmup Iteration  11: 1709346.072 ops/s
# Warmup Iteration  12: 1716713.742 ops/s
# Warmup Iteration  13: 1715239.246 ops/s
# Warmup Iteration  14: 1705699.898 ops/s
# Warmup Iteration  15: 1709678.065 ops/s
# Warmup Iteration  16: 1704847.181 ops/s
# Warmup Iteration  17: 1707420.365 ops/s
# Warmup Iteration  18: 1712295.481 ops/s
# Warmup Iteration  19: 1700338.350 ops/s
# Warmup Iteration  20: 1706832.474 ops/s
# Warmup Iteration  21: 1707347.432 ops/s
# Warmup Iteration  22: 1706471.108 ops/s
# Warmup Iteration  23: 1706700.471 ops/s
# Warmup Iteration  24: 1705921.303 ops/s
# Warmup Iteration  25: 1706527.668 ops/s
# Warmup Iteration  26: 1705119.345 ops/s
# Warmup Iteration  27: 1707084.795 ops/s
# Warmup Iteration  28: 1716218.316 ops/s
# Warmup Iteration  29: 1717880.645 ops/s
# Warmup Iteration  30: 1710802.141 ops/s
Iteration   1: 1704700.975 ops/s
Iteration   2: 1711719.123 ops/s
Iteration   3: 1716866.208 ops/s
Iteration   4: 1718155.060 ops/s
Iteration   5: 1715272.303 ops/s
Iteration   6: 1713982.787 ops/s
Iteration   7: 1713237.926 ops/s
Iteration   8: 1707424.742 ops/s
Iteration   9: 1707242.297 ops/s
Iteration  10: 1704356.209 ops/s
Iteration  11: 1706273.262 ops/s
Iteration  12: 1713323.948 ops/s
Iteration  13: 1717910.228 ops/s
Iteration  14: 1718368.407 ops/s
Iteration  15: 1709049.643 ops/s
Iteration  16: 1717014.588 ops/s
Iteration  17: 1713411.665 ops/s
Iteration  18: 1708169.959 ops/s
Iteration  19: 1704010.233 ops/s
Iteration  20: 1708801.860 ops/s
Iteration  21: 1721820.871 ops/s
Iteration  22: 1712151.452 ops/s
Iteration  23: 1715462.976 ops/s
Iteration  24: 1722756.512 ops/s
Iteration  25: 1714561.711 ops/s
Iteration  26: 1717775.059 ops/s
Iteration  27: 1711606.910 ops/s
Iteration  28: 1711198.043 ops/s
Iteration  29: 1716824.787 ops/s
Iteration  30: 1712334.715 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloat":
  1712859.482 ±(99.9%) 3360.796 ops/s [Average]
  (min, avg, max) = (1704010.233, 1712859.482, 1722756.512), stdev = 5030.282
  CI (99.9%): [1709498.686, 1716220.278] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectFloat  thrpt   30  1712859.482 ± 3360.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2205280.136 ops/s
# Warmup Iteration   2: 4934981.576 ops/s
# Warmup Iteration   3: 4138208.555 ops/s
# Warmup Iteration   4: 4933989.402 ops/s
# Warmup Iteration   5: 4970807.289 ops/s
# Warmup Iteration   6: 4950832.891 ops/s
# Warmup Iteration   7: 4940974.451 ops/s
# Warmup Iteration   8: 4962722.434 ops/s
# Warmup Iteration   9: 4965218.015 ops/s
# Warmup Iteration  10: 4950298.309 ops/s
# Warmup Iteration  11: 4955795.059 ops/s
# Warmup Iteration  12: 4962470.548 ops/s
# Warmup Iteration  13: 4951195.886 ops/s
# Warmup Iteration  14: 4968402.739 ops/s
# Warmup Iteration  15: 4934210.183 ops/s
# Warmup Iteration  16: 4949803.598 ops/s
# Warmup Iteration  17: 4960383.249 ops/s
# Warmup Iteration  18: 4942142.247 ops/s
# Warmup Iteration  19: 4936009.675 ops/s
# Warmup Iteration  20: 4955660.284 ops/s
# Warmup Iteration  21: 4941856.229 ops/s
# Warmup Iteration  22: 4963486.397 ops/s
# Warmup Iteration  23: 4942580.763 ops/s
# Warmup Iteration  24: 4968668.521 ops/s
# Warmup Iteration  25: 4976772.088 ops/s
# Warmup Iteration  26: 4966217.102 ops/s
# Warmup Iteration  27: 4950087.030 ops/s
# Warmup Iteration  28: 4972119.955 ops/s
# Warmup Iteration  29: 4942086.884 ops/s
# Warmup Iteration  30: 4958630.591 ops/s
Iteration   1: 4951220.692 ops/s
Iteration   2: 4947974.958 ops/s
Iteration   3: 4939211.792 ops/s
Iteration   4: 4989952.043 ops/s
Iteration   5: 4953148.843 ops/s
Iteration   6: 4925944.601 ops/s
Iteration   7: 4957703.128 ops/s
Iteration   8: 4934726.141 ops/s
Iteration   9: 4945668.187 ops/s
Iteration  10: 4938899.551 ops/s
Iteration  11: 4941893.603 ops/s
Iteration  12: 4972945.889 ops/s
Iteration  13: 4955464.060 ops/s
Iteration  14: 4969797.532 ops/s
Iteration  15: 4950613.242 ops/s
Iteration  16: 4980269.847 ops/s
Iteration  17: 4997435.832 ops/s
Iteration  18: 4944824.893 ops/s
Iteration  19: 4938312.504 ops/s
Iteration  20: 4971107.141 ops/s
Iteration  21: 4970633.468 ops/s
Iteration  22: 4966380.162 ops/s
Iteration  23: 4960777.760 ops/s
Iteration  24: 4975826.000 ops/s
Iteration  25: 4958426.565 ops/s
Iteration  26: 4974335.749 ops/s
Iteration  27: 4956764.941 ops/s
Iteration  28: 4958572.929 ops/s
Iteration  29: 4947377.544 ops/s
Iteration  30: 4965935.338 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget":
  4958071.498 ±(99.9%) 11163.874 ops/s [Average]
  (min, avg, max) = (4925944.601, 4958071.498, 4997435.832), stdev = 16709.562
  CI (99.9%): [4946907.624, 4969235.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  4958071.498 ± 11163.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1708114.968 ops/s
# Warmup Iteration   2: 4024821.340 ops/s
# Warmup Iteration   3: 3740166.600 ops/s
# Warmup Iteration   4: 3660492.302 ops/s
# Warmup Iteration   5: 4041881.641 ops/s
# Warmup Iteration   6: 4041563.056 ops/s
# Warmup Iteration   7: 4052009.662 ops/s
# Warmup Iteration   8: 4039544.168 ops/s
# Warmup Iteration   9: 4056365.495 ops/s
# Warmup Iteration  10: 4045108.376 ops/s
# Warmup Iteration  11: 4033956.658 ops/s
# Warmup Iteration  12: 4038281.272 ops/s
# Warmup Iteration  13: 4028662.919 ops/s
# Warmup Iteration  14: 4040397.513 ops/s
# Warmup Iteration  15: 4033041.640 ops/s
# Warmup Iteration  16: 4047434.014 ops/s
# Warmup Iteration  17: 4043597.782 ops/s
# Warmup Iteration  18: 4058813.376 ops/s
# Warmup Iteration  19: 4055609.945 ops/s
# Warmup Iteration  20: 4026842.936 ops/s
# Warmup Iteration  21: 4047231.407 ops/s
# Warmup Iteration  22: 4058239.717 ops/s
# Warmup Iteration  23: 4037807.229 ops/s
# Warmup Iteration  24: 4062495.973 ops/s
# Warmup Iteration  25: 4048099.282 ops/s
# Warmup Iteration  26: 4061087.446 ops/s
# Warmup Iteration  27: 4044927.761 ops/s
# Warmup Iteration  28: 4045020.494 ops/s
# Warmup Iteration  29: 4035431.385 ops/s
# Warmup Iteration  30: 4047488.595 ops/s
Iteration   1: 4055337.354 ops/s
Iteration   2: 4040100.997 ops/s
Iteration   3: 4027526.760 ops/s
Iteration   4: 4023623.766 ops/s
Iteration   5: 4034774.458 ops/s
Iteration   6: 4062331.447 ops/s
Iteration   7: 4034023.989 ops/s
Iteration   8: 4064392.538 ops/s
Iteration   9: 4037753.550 ops/s
Iteration  10: 4040090.892 ops/s
Iteration  11: 4010717.213 ops/s
Iteration  12: 4033554.964 ops/s
Iteration  13: 4051327.810 ops/s
Iteration  14: 4033982.022 ops/s
Iteration  15: 4051792.496 ops/s
Iteration  16: 4059103.163 ops/s
Iteration  17: 4039610.703 ops/s
Iteration  18: 4041561.625 ops/s
Iteration  19: 4024444.015 ops/s
Iteration  20: 4031748.114 ops/s
Iteration  21: 4053408.432 ops/s
Iteration  22: 4022343.272 ops/s
Iteration  23: 4033834.126 ops/s
Iteration  24: 4051288.048 ops/s
Iteration  25: 4039134.335 ops/s
Iteration  26: 4039371.650 ops/s
Iteration  27: 4047342.962 ops/s
Iteration  28: 4070793.623 ops/s
Iteration  29: 4035246.540 ops/s
Iteration  30: 4028666.792 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectFloatWithTarget":
  4040640.922 ±(99.9%) 9200.940 ops/s [Average]
  (min, avg, max) = (4010717.213, 4040640.922, 4070793.623), stdev = 13771.536
  CI (99.9%): [4031439.981, 4049841.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  4040640.922 ± 9200.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 373417.358 ops/s
# Warmup Iteration   2: 1111310.420 ops/s
# Warmup Iteration   3: 1262458.099 ops/s
# Warmup Iteration   4: 1042144.046 ops/s
# Warmup Iteration   5: 1260878.587 ops/s
# Warmup Iteration   6: 1276426.189 ops/s
# Warmup Iteration   7: 1264585.416 ops/s
# Warmup Iteration   8: 1270081.876 ops/s
# Warmup Iteration   9: 1267267.230 ops/s
# Warmup Iteration  10: 1266726.484 ops/s
# Warmup Iteration  11: 1265502.683 ops/s
# Warmup Iteration  12: 1268826.982 ops/s
# Warmup Iteration  13: 1262790.105 ops/s
# Warmup Iteration  14: 1265149.523 ops/s
# Warmup Iteration  15: 1260958.097 ops/s
# Warmup Iteration  16: 1263638.550 ops/s
# Warmup Iteration  17: 1254623.216 ops/s
# Warmup Iteration  18: 1255661.229 ops/s
# Warmup Iteration  19: 1257244.733 ops/s
# Warmup Iteration  20: 1262044.694 ops/s
# Warmup Iteration  21: 1263474.810 ops/s
# Warmup Iteration  22: 1257619.892 ops/s
# Warmup Iteration  23: 1267513.078 ops/s
# Warmup Iteration  24: 1260762.693 ops/s
# Warmup Iteration  25: 1255316.904 ops/s
# Warmup Iteration  26: 1264696.903 ops/s
# Warmup Iteration  27: 1263063.992 ops/s
# Warmup Iteration  28: 1268385.808 ops/s
# Warmup Iteration  29: 1268717.499 ops/s
# Warmup Iteration  30: 1272249.902 ops/s
Iteration   1: 1267399.044 ops/s
Iteration   2: 1268109.291 ops/s
Iteration   3: 1272200.375 ops/s
Iteration   4: 1263010.513 ops/s
Iteration   5: 1261471.352 ops/s
Iteration   6: 1260885.073 ops/s
Iteration   7: 1258614.946 ops/s
Iteration   8: 1252081.927 ops/s
Iteration   9: 1255425.189 ops/s
Iteration  10: 1263760.898 ops/s
Iteration  11: 1245801.091 ops/s
Iteration  12: 1261873.866 ops/s
Iteration  13: 1256487.503 ops/s
Iteration  14: 1267050.965 ops/s
Iteration  15: 1267540.234 ops/s
Iteration  16: 1272931.598 ops/s
Iteration  17: 1270615.207 ops/s
Iteration  18: 1264497.497 ops/s
Iteration  19: 1272655.080 ops/s
Iteration  20: 1267548.875 ops/s
Iteration  21: 1260509.510 ops/s
Iteration  22: 1265030.722 ops/s
Iteration  23: 1268196.303 ops/s
Iteration  24: 1268370.971 ops/s
Iteration  25: 1273744.271 ops/s
Iteration  26: 1257685.476 ops/s
Iteration  27: 1266864.405 ops/s
Iteration  28: 1262922.507 ops/s
Iteration  29: 1254690.189 ops/s
Iteration  30: 1273985.225 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIf":
  1264065.337 ±(99.9%) 4580.472 ops/s [Average]
  (min, avg, max) = (1245801.091, 1264065.337, 1273985.225), stdev = 6855.835
  CI (99.9%): [1259484.865, 1268645.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectIf  thrpt   30  1264065.337 ± 4580.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756533.679 ops/s
# Warmup Iteration   2: 1815798.350 ops/s
# Warmup Iteration   3: 1830904.329 ops/s
# Warmup Iteration   4: 1520921.479 ops/s
# Warmup Iteration   5: 1842571.773 ops/s
# Warmup Iteration   6: 1836845.093 ops/s
# Warmup Iteration   7: 1839390.793 ops/s
# Warmup Iteration   8: 1836477.990 ops/s
# Warmup Iteration   9: 1842479.932 ops/s
# Warmup Iteration  10: 1837809.074 ops/s
# Warmup Iteration  11: 1831475.234 ops/s
# Warmup Iteration  12: 1836427.173 ops/s
# Warmup Iteration  13: 1828744.604 ops/s
# Warmup Iteration  14: 1831472.125 ops/s
# Warmup Iteration  15: 1831284.316 ops/s
# Warmup Iteration  16: 1827697.644 ops/s
# Warmup Iteration  17: 1838873.214 ops/s
# Warmup Iteration  18: 1836413.756 ops/s
# Warmup Iteration  19: 1831773.992 ops/s
# Warmup Iteration  20: 1832138.330 ops/s
# Warmup Iteration  21: 1835683.274 ops/s
# Warmup Iteration  22: 1827258.613 ops/s
# Warmup Iteration  23: 1829933.944 ops/s
# Warmup Iteration  24: 1837139.347 ops/s
# Warmup Iteration  25: 1836107.039 ops/s
# Warmup Iteration  26: 1836243.293 ops/s
# Warmup Iteration  27: 1833187.170 ops/s
# Warmup Iteration  28: 1831157.449 ops/s
# Warmup Iteration  29: 1826343.356 ops/s
# Warmup Iteration  30: 1834415.155 ops/s
Iteration   1: 1831492.436 ops/s
Iteration   2: 1846694.591 ops/s
Iteration   3: 1843012.355 ops/s
Iteration   4: 1833181.652 ops/s
Iteration   5: 1836879.311 ops/s
Iteration   6: 1827088.490 ops/s
Iteration   7: 1823667.342 ops/s
Iteration   8: 1822965.962 ops/s
Iteration   9: 1833794.653 ops/s
Iteration  10: 1822397.693 ops/s
Iteration  11: 1828545.512 ops/s
Iteration  12: 1820729.538 ops/s
Iteration  13: 1826479.533 ops/s
Iteration  14: 1846023.963 ops/s
Iteration  15: 1839310.695 ops/s
Iteration  16: 1825583.220 ops/s
Iteration  17: 1830143.081 ops/s
Iteration  18: 1826564.012 ops/s
Iteration  19: 1828863.708 ops/s
Iteration  20: 1830989.855 ops/s
Iteration  21: 1829306.386 ops/s
Iteration  22: 1828522.799 ops/s
Iteration  23: 1830315.645 ops/s
Iteration  24: 1833736.309 ops/s
Iteration  25: 1836146.804 ops/s
Iteration  26: 1838333.818 ops/s
Iteration  27: 1814153.369 ops/s
Iteration  28: 1823150.675 ops/s
Iteration  29: 1816422.491 ops/s
Iteration  30: 1831377.334 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectInt":
  1830195.774 ±(99.9%) 5208.612 ops/s [Average]
  (min, avg, max) = (1814153.369, 1830195.774, 1846694.591), stdev = 7796.006
  CI (99.9%): [1824987.162, 1835404.387] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectInt  thrpt   30  1830195.774 ± 5208.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2554872.600 ops/s
# Warmup Iteration   2: 5978045.895 ops/s
# Warmup Iteration   3: 5070396.811 ops/s
# Warmup Iteration   4: 6147226.918 ops/s
# Warmup Iteration   5: 6102095.009 ops/s
# Warmup Iteration   6: 6095371.166 ops/s
# Warmup Iteration   7: 6137886.346 ops/s
# Warmup Iteration   8: 6105880.821 ops/s
# Warmup Iteration   9: 6125679.494 ops/s
# Warmup Iteration  10: 6131388.213 ops/s
# Warmup Iteration  11: 6164084.662 ops/s
# Warmup Iteration  12: 6142429.347 ops/s
# Warmup Iteration  13: 6144748.947 ops/s
# Warmup Iteration  14: 6106908.379 ops/s
# Warmup Iteration  15: 6158193.135 ops/s
# Warmup Iteration  16: 6156289.493 ops/s
# Warmup Iteration  17: 6112893.940 ops/s
# Warmup Iteration  18: 6134749.622 ops/s
# Warmup Iteration  19: 6156930.456 ops/s
# Warmup Iteration  20: 6171881.108 ops/s
# Warmup Iteration  21: 6156744.578 ops/s
# Warmup Iteration  22: 6155229.505 ops/s
# Warmup Iteration  23: 6128331.460 ops/s
# Warmup Iteration  24: 6126033.355 ops/s
# Warmup Iteration  25: 6130520.028 ops/s
# Warmup Iteration  26: 6127785.228 ops/s
# Warmup Iteration  27: 6123274.190 ops/s
# Warmup Iteration  28: 6130748.196 ops/s
# Warmup Iteration  29: 6144141.365 ops/s
# Warmup Iteration  30: 6141557.064 ops/s
Iteration   1: 6143817.703 ops/s
Iteration   2: 6138911.645 ops/s
Iteration   3: 6148349.128 ops/s
Iteration   4: 6016455.061 ops/s
Iteration   5: 6120792.029 ops/s
Iteration   6: 6091552.267 ops/s
Iteration   7: 6113693.333 ops/s
Iteration   8: 6107669.873 ops/s
Iteration   9: 6138834.265 ops/s
Iteration  10: 6139465.613 ops/s
Iteration  11: 6119212.055 ops/s
Iteration  12: 6143105.128 ops/s
Iteration  13: 6171086.676 ops/s
Iteration  14: 6149329.894 ops/s
Iteration  15: 6120361.254 ops/s
Iteration  16: 6167224.581 ops/s
Iteration  17: 6143626.051 ops/s
Iteration  18: 6170543.116 ops/s
Iteration  19: 6125114.598 ops/s
Iteration  20: 6172337.555 ops/s
Iteration  21: 6143627.747 ops/s
Iteration  22: 6147036.175 ops/s
Iteration  23: 6152376.880 ops/s
Iteration  24: 6117168.356 ops/s
Iteration  25: 6167531.748 ops/s
Iteration  26: 6168679.719 ops/s
Iteration  27: 6145776.055 ops/s
Iteration  28: 6090226.968 ops/s
Iteration  29: 6145854.835 ops/s
Iteration  30: 6203517.936 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithBagTarget":
  6137442.608 ±(99.9%) 22653.495 ops/s [Average]
  (min, avg, max) = (6016455.061, 6137442.608, 6203517.936), stdev = 33906.688
  CI (99.9%): [6114789.113, 6160096.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  6137442.608 ± 22653.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1880386.265 ops/s
# Warmup Iteration   2: 4576689.546 ops/s
# Warmup Iteration   3: 3828732.002 ops/s
# Warmup Iteration   4: 4460460.491 ops/s
# Warmup Iteration   5: 4500662.388 ops/s
# Warmup Iteration   6: 4519449.261 ops/s
# Warmup Iteration   7: 4519397.075 ops/s
# Warmup Iteration   8: 4550525.606 ops/s
# Warmup Iteration   9: 4533095.865 ops/s
# Warmup Iteration  10: 4528689.977 ops/s
# Warmup Iteration  11: 4522250.763 ops/s
# Warmup Iteration  12: 4540567.881 ops/s
# Warmup Iteration  13: 4515598.381 ops/s
# Warmup Iteration  14: 4530153.853 ops/s
# Warmup Iteration  15: 4553796.871 ops/s
# Warmup Iteration  16: 4552248.623 ops/s
# Warmup Iteration  17: 4522870.740 ops/s
# Warmup Iteration  18: 4533308.949 ops/s
# Warmup Iteration  19: 4541703.036 ops/s
# Warmup Iteration  20: 4558232.953 ops/s
# Warmup Iteration  21: 4516391.279 ops/s
# Warmup Iteration  22: 4534124.805 ops/s
# Warmup Iteration  23: 4490407.118 ops/s
# Warmup Iteration  24: 4540385.103 ops/s
# Warmup Iteration  25: 4519842.565 ops/s
# Warmup Iteration  26: 4532624.241 ops/s
# Warmup Iteration  27: 4536145.565 ops/s
# Warmup Iteration  28: 4533809.611 ops/s
# Warmup Iteration  29: 4528537.545 ops/s
# Warmup Iteration  30: 4539937.729 ops/s
Iteration   1: 4547512.422 ops/s
Iteration   2: 4490966.768 ops/s
Iteration   3: 4518452.509 ops/s
Iteration   4: 4537163.724 ops/s
Iteration   5: 4544996.235 ops/s
Iteration   6: 4546001.661 ops/s
Iteration   7: 4538805.107 ops/s
Iteration   8: 4547186.801 ops/s
Iteration   9: 4541773.322 ops/s
Iteration  10: 4533352.182 ops/s
Iteration  11: 4530951.576 ops/s
Iteration  12: 4578148.346 ops/s
Iteration  13: 4595771.457 ops/s
Iteration  14: 4515069.593 ops/s
Iteration  15: 4526319.238 ops/s
Iteration  16: 4565062.435 ops/s
Iteration  17: 4545027.047 ops/s
Iteration  18: 4556028.348 ops/s
Iteration  19: 4514393.862 ops/s
Iteration  20: 4523934.770 ops/s
Iteration  21: 4531416.029 ops/s
Iteration  22: 4541912.252 ops/s
Iteration  23: 4535426.670 ops/s
Iteration  24: 4545323.214 ops/s
Iteration  25: 4561008.341 ops/s
Iteration  26: 4531999.286 ops/s
Iteration  27: 4526118.757 ops/s
Iteration  28: 4551868.697 ops/s
Iteration  29: 4549287.446 ops/s
Iteration  30: 4527917.774 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectIntWithTarget":
  4539973.196 ±(99.9%) 13346.433 ops/s [Average]
  (min, avg, max) = (4490966.768, 4539973.196, 4595771.457), stdev = 19976.315
  CI (99.9%): [4526626.762, 4553319.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  4539973.196 ± 13346.433  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 747008.410 ops/s
# Warmup Iteration   2: 1599296.762 ops/s
# Warmup Iteration   3: 1512465.910 ops/s
# Warmup Iteration   4: 1474031.846 ops/s
# Warmup Iteration   5: 1608679.195 ops/s
# Warmup Iteration   6: 1612518.072 ops/s
# Warmup Iteration   7: 1604583.817 ops/s
# Warmup Iteration   8: 1616053.290 ops/s
# Warmup Iteration   9: 1612268.981 ops/s
# Warmup Iteration  10: 1611400.432 ops/s
# Warmup Iteration  11: 1613585.590 ops/s
# Warmup Iteration  12: 1612821.751 ops/s
# Warmup Iteration  13: 1619517.137 ops/s
# Warmup Iteration  14: 1615347.194 ops/s
# Warmup Iteration  15: 1609398.237 ops/s
# Warmup Iteration  16: 1615673.084 ops/s
# Warmup Iteration  17: 1611147.122 ops/s
# Warmup Iteration  18: 1605820.122 ops/s
# Warmup Iteration  19: 1617209.223 ops/s
# Warmup Iteration  20: 1616603.518 ops/s
# Warmup Iteration  21: 1617992.857 ops/s
# Warmup Iteration  22: 1621590.555 ops/s
# Warmup Iteration  23: 1618264.889 ops/s
# Warmup Iteration  24: 1612026.180 ops/s
# Warmup Iteration  25: 1616073.134 ops/s
# Warmup Iteration  26: 1623222.154 ops/s
# Warmup Iteration  27: 1613192.924 ops/s
# Warmup Iteration  28: 1604920.447 ops/s
# Warmup Iteration  29: 1609413.618 ops/s
# Warmup Iteration  30: 1612457.510 ops/s
Iteration   1: 1623741.696 ops/s
Iteration   2: 1615362.249 ops/s
Iteration   3: 1617001.824 ops/s
Iteration   4: 1623287.144 ops/s
Iteration   5: 1622067.318 ops/s
Iteration   6: 1611987.744 ops/s
Iteration   7: 1616554.518 ops/s
Iteration   8: 1620387.197 ops/s
Iteration   9: 1614322.638 ops/s
Iteration  10: 1610508.428 ops/s
Iteration  11: 1623328.845 ops/s
Iteration  12: 1624296.476 ops/s
Iteration  13: 1606238.394 ops/s
Iteration  14: 1611411.332 ops/s
Iteration  15: 1617718.743 ops/s
Iteration  16: 1628339.561 ops/s
Iteration  17: 1620112.971 ops/s
Iteration  18: 1606200.584 ops/s
Iteration  19: 1617542.836 ops/s
Iteration  20: 1622738.701 ops/s
Iteration  21: 1615565.630 ops/s
Iteration  22: 1615241.337 ops/s
Iteration  23: 1618346.200 ops/s
Iteration  24: 1600512.752 ops/s
Iteration  25: 1612752.009 ops/s
Iteration  26: 1614922.630 ops/s
Iteration  27: 1612200.160 ops/s
Iteration  28: 1608926.941 ops/s
Iteration  29: 1616783.600 ops/s
Iteration  30: 1618926.956 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLong":
  1616244.247 ±(99.9%) 4123.041 ops/s [Average]
  (min, avg, max) = (1600512.752, 1616244.247, 1628339.561), stdev = 6171.173
  CI (99.9%): [1612121.207, 1620367.288] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectLong  thrpt   30  1616244.247 ± 4123.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2461811.975 ops/s
# Warmup Iteration   2: 5712504.527 ops/s
# Warmup Iteration   3: 4793595.994 ops/s
# Warmup Iteration   4: 5732089.918 ops/s
# Warmup Iteration   5: 5759238.124 ops/s
# Warmup Iteration   6: 5747845.654 ops/s
# Warmup Iteration   7: 5797931.872 ops/s
# Warmup Iteration   8: 5780337.381 ops/s
# Warmup Iteration   9: 5758993.014 ops/s
# Warmup Iteration  10: 5764052.460 ops/s
# Warmup Iteration  11: 5760846.873 ops/s
# Warmup Iteration  12: 5726683.482 ops/s
# Warmup Iteration  13: 5736924.600 ops/s
# Warmup Iteration  14: 5763124.485 ops/s
# Warmup Iteration  15: 5748766.776 ops/s
# Warmup Iteration  16: 5729619.759 ops/s
# Warmup Iteration  17: 5741777.961 ops/s
# Warmup Iteration  18: 5732077.534 ops/s
# Warmup Iteration  19: 5722098.209 ops/s
# Warmup Iteration  20: 5751761.256 ops/s
# Warmup Iteration  21: 5724332.202 ops/s
# Warmup Iteration  22: 5760595.858 ops/s
# Warmup Iteration  23: 5726897.355 ops/s
# Warmup Iteration  24: 5766902.196 ops/s
# Warmup Iteration  25: 5754577.631 ops/s
# Warmup Iteration  26: 5750312.660 ops/s
# Warmup Iteration  27: 5722768.035 ops/s
# Warmup Iteration  28: 5758175.805 ops/s
# Warmup Iteration  29: 5735785.289 ops/s
# Warmup Iteration  30: 5716375.837 ops/s
Iteration   1: 5733633.793 ops/s
Iteration   2: 5776797.628 ops/s
Iteration   3: 5742591.375 ops/s
Iteration   4: 5725545.363 ops/s
Iteration   5: 5762813.010 ops/s
Iteration   6: 5742566.810 ops/s
Iteration   7: 5707980.491 ops/s
Iteration   8: 5733448.879 ops/s
Iteration   9: 5716537.582 ops/s
Iteration  10: 5766293.082 ops/s
Iteration  11: 5753368.366 ops/s
Iteration  12: 5696263.629 ops/s
Iteration  13: 5736929.527 ops/s
Iteration  14: 5700768.744 ops/s
Iteration  15: 5741272.287 ops/s
Iteration  16: 5690755.171 ops/s
Iteration  17: 5710557.543 ops/s
Iteration  18: 5733666.936 ops/s
Iteration  19: 5753853.650 ops/s
Iteration  20: 5751707.312 ops/s
Iteration  21: 5728979.013 ops/s
Iteration  22: 5767316.529 ops/s
Iteration  23: 5743295.160 ops/s
Iteration  24: 5784004.515 ops/s
Iteration  25: 5774234.360 ops/s
Iteration  26: 5719403.733 ops/s
Iteration  27: 5739974.912 ops/s
Iteration  28: 5783827.273 ops/s
Iteration  29: 5735876.254 ops/s
Iteration  30: 5766524.999 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithBagTarget":
  5740692.931 ±(99.9%) 17005.606 ops/s [Average]
  (min, avg, max) = (5690755.171, 5740692.931, 5784004.515), stdev = 25453.192
  CI (99.9%): [5723687.325, 5757698.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  5740692.931 ± 17005.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1709834.650 ops/s
# Warmup Iteration   2: 4153113.008 ops/s
# Warmup Iteration   3: 3510334.105 ops/s
# Warmup Iteration   4: 4282495.067 ops/s
# Warmup Iteration   5: 4265127.328 ops/s
# Warmup Iteration   6: 4237516.009 ops/s
# Warmup Iteration   7: 4277845.042 ops/s
# Warmup Iteration   8: 4267148.216 ops/s
# Warmup Iteration   9: 4262066.702 ops/s
# Warmup Iteration  10: 4265139.294 ops/s
# Warmup Iteration  11: 4234561.546 ops/s
# Warmup Iteration  12: 4276310.289 ops/s
# Warmup Iteration  13: 4266291.560 ops/s
# Warmup Iteration  14: 4267913.584 ops/s
# Warmup Iteration  15: 4237324.388 ops/s
# Warmup Iteration  16: 4268929.404 ops/s
# Warmup Iteration  17: 4266079.211 ops/s
# Warmup Iteration  18: 4271324.746 ops/s
# Warmup Iteration  19: 4281013.490 ops/s
# Warmup Iteration  20: 4257533.149 ops/s
# Warmup Iteration  21: 4257720.933 ops/s
# Warmup Iteration  22: 4268538.895 ops/s
# Warmup Iteration  23: 4263690.182 ops/s
# Warmup Iteration  24: 4269811.045 ops/s
# Warmup Iteration  25: 4270241.095 ops/s
# Warmup Iteration  26: 4265504.457 ops/s
# Warmup Iteration  27: 4258756.142 ops/s
# Warmup Iteration  28: 4257480.627 ops/s
# Warmup Iteration  29: 4254622.936 ops/s
# Warmup Iteration  30: 4270701.642 ops/s
Iteration   1: 4258095.514 ops/s
Iteration   2: 4265585.633 ops/s
Iteration   3: 4236924.342 ops/s
Iteration   4: 4292809.929 ops/s
Iteration   5: 4269895.559 ops/s
Iteration   6: 4262388.950 ops/s
Iteration   7: 4243209.839 ops/s
Iteration   8: 4265860.556 ops/s
Iteration   9: 4264524.875 ops/s
Iteration  10: 4270451.230 ops/s
Iteration  11: 4250896.458 ops/s
Iteration  12: 4279404.803 ops/s
Iteration  13: 4277300.615 ops/s
Iteration  14: 4279589.156 ops/s
Iteration  15: 4244391.839 ops/s
Iteration  16: 4294781.491 ops/s
Iteration  17: 4258709.816 ops/s
Iteration  18: 4262573.202 ops/s
Iteration  19: 4271517.475 ops/s
Iteration  20: 4237339.983 ops/s
Iteration  21: 4258774.884 ops/s
Iteration  22: 4274777.972 ops/s
Iteration  23: 4276132.378 ops/s
Iteration  24: 4264708.257 ops/s
Iteration  25: 4266866.998 ops/s
Iteration  26: 4274267.125 ops/s
Iteration  27: 4266748.617 ops/s
Iteration  28: 4248450.647 ops/s
Iteration  29: 4256470.388 ops/s
Iteration  30: 4248541.607 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectLongWithTarget":
  4264066.338 ±(99.9%) 9628.700 ops/s [Average]
  (min, avg, max) = (4236924.342, 4264066.338, 4294781.491), stdev = 14411.787
  CI (99.9%): [4254437.637, 4273695.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  4264066.338 ± 9628.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768409.146 ops/s
# Warmup Iteration   2: 1811788.917 ops/s
# Warmup Iteration   3: 1814908.261 ops/s
# Warmup Iteration   4: 1510752.942 ops/s
# Warmup Iteration   5: 1816874.516 ops/s
# Warmup Iteration   6: 1814758.046 ops/s
# Warmup Iteration   7: 1822401.023 ops/s
# Warmup Iteration   8: 1815203.981 ops/s
# Warmup Iteration   9: 1819248.974 ops/s
# Warmup Iteration  10: 1823553.486 ops/s
# Warmup Iteration  11: 1817659.239 ops/s
# Warmup Iteration  12: 1813640.351 ops/s
# Warmup Iteration  13: 1814830.055 ops/s
# Warmup Iteration  14: 1808808.145 ops/s
# Warmup Iteration  15: 1821871.968 ops/s
# Warmup Iteration  16: 1817281.508 ops/s
# Warmup Iteration  17: 1829038.074 ops/s
# Warmup Iteration  18: 1828530.752 ops/s
# Warmup Iteration  19: 1825829.860 ops/s
# Warmup Iteration  20: 1830947.709 ops/s
# Warmup Iteration  21: 1819423.870 ops/s
# Warmup Iteration  22: 1834532.977 ops/s
# Warmup Iteration  23: 1824540.680 ops/s
# Warmup Iteration  24: 1833060.199 ops/s
# Warmup Iteration  25: 1834541.344 ops/s
# Warmup Iteration  26: 1833325.535 ops/s
# Warmup Iteration  27: 1829702.390 ops/s
# Warmup Iteration  28: 1825907.833 ops/s
# Warmup Iteration  29: 1817196.780 ops/s
# Warmup Iteration  30: 1833273.322 ops/s
Iteration   1: 1835453.281 ops/s
Iteration   2: 1828020.058 ops/s
Iteration   3: 1839975.837 ops/s
Iteration   4: 1836494.239 ops/s
Iteration   5: 1834963.789 ops/s
Iteration   6: 1835054.308 ops/s
Iteration   7: 1834049.610 ops/s
Iteration   8: 1840146.982 ops/s
Iteration   9: 1803768.057 ops/s
Iteration  10: 1839419.729 ops/s
Iteration  11: 1837957.847 ops/s
Iteration  12: 1838388.762 ops/s
Iteration  13: 1831036.974 ops/s
Iteration  14: 1829057.365 ops/s
Iteration  15: 1831008.441 ops/s
Iteration  16: 1833773.952 ops/s
Iteration  17: 1835737.558 ops/s
Iteration  18: 1837283.490 ops/s
Iteration  19: 1837858.227 ops/s
Iteration  20: 1826569.675 ops/s
Iteration  21: 1832925.286 ops/s
Iteration  22: 1829863.174 ops/s
Iteration  23: 1834330.487 ops/s
Iteration  24: 1839866.492 ops/s
Iteration  25: 1824571.712 ops/s
Iteration  26: 1844317.152 ops/s
Iteration  27: 1834969.765 ops/s
Iteration  28: 1826847.123 ops/s
Iteration  29: 1829732.647 ops/s
Iteration  30: 1832003.289 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShort":
  1833181.510 ±(99.9%) 4847.039 ops/s [Average]
  (min, avg, max) = (1803768.057, 1833181.510, 1844317.152), stdev = 7254.821
  CI (99.9%): [1828334.471, 1838028.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectShort  thrpt   30  1833181.510 ± 4847.039  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2866328.690 ops/s
# Warmup Iteration   2: 6247764.207 ops/s
# Warmup Iteration   3: 5383411.190 ops/s
# Warmup Iteration   4: 6382216.627 ops/s
# Warmup Iteration   5: 6382541.740 ops/s
# Warmup Iteration   6: 6403092.418 ops/s
# Warmup Iteration   7: 6389262.851 ops/s
# Warmup Iteration   8: 6408901.113 ops/s
# Warmup Iteration   9: 6411913.593 ops/s
# Warmup Iteration  10: 6376436.036 ops/s
# Warmup Iteration  11: 6408432.508 ops/s
# Warmup Iteration  12: 6395004.140 ops/s
# Warmup Iteration  13: 6394730.051 ops/s
# Warmup Iteration  14: 6393192.699 ops/s
# Warmup Iteration  15: 6375557.097 ops/s
# Warmup Iteration  16: 6421622.242 ops/s
# Warmup Iteration  17: 6387221.718 ops/s
# Warmup Iteration  18: 6363864.860 ops/s
# Warmup Iteration  19: 6381006.392 ops/s
# Warmup Iteration  20: 6379085.182 ops/s
# Warmup Iteration  21: 6386877.467 ops/s
# Warmup Iteration  22: 6407059.661 ops/s
# Warmup Iteration  23: 6364939.361 ops/s
# Warmup Iteration  24: 6381050.839 ops/s
# Warmup Iteration  25: 6381955.757 ops/s
# Warmup Iteration  26: 6380687.476 ops/s
# Warmup Iteration  27: 6404120.229 ops/s
# Warmup Iteration  28: 6399157.751 ops/s
# Warmup Iteration  29: 6402069.877 ops/s
# Warmup Iteration  30: 6395989.258 ops/s
Iteration   1: 6397084.858 ops/s
Iteration   2: 6350257.098 ops/s
Iteration   3: 6394458.787 ops/s
Iteration   4: 6419149.843 ops/s
Iteration   5: 6372573.519 ops/s
Iteration   6: 6370407.701 ops/s
Iteration   7: 6395004.269 ops/s
Iteration   8: 6407711.836 ops/s
Iteration   9: 6370966.233 ops/s
Iteration  10: 6417623.220 ops/s
Iteration  11: 6406223.474 ops/s
Iteration  12: 6418789.214 ops/s
Iteration  13: 6395192.776 ops/s
Iteration  14: 6380286.384 ops/s
Iteration  15: 6412186.283 ops/s
Iteration  16: 6369327.553 ops/s
Iteration  17: 6327946.521 ops/s
Iteration  18: 6373191.424 ops/s
Iteration  19: 6380619.402 ops/s
Iteration  20: 6379645.812 ops/s
Iteration  21: 6359506.353 ops/s
Iteration  22: 6426644.992 ops/s
Iteration  23: 6420340.049 ops/s
Iteration  24: 6419184.089 ops/s
Iteration  25: 6371641.642 ops/s
Iteration  26: 6340440.515 ops/s
Iteration  27: 6329875.891 ops/s
Iteration  28: 6346926.673 ops/s
Iteration  29: 6422608.401 ops/s
Iteration  30: 6370145.012 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithBagTarget":
  6384865.327 ±(99.9%) 19254.988 ops/s [Average]
  (min, avg, max) = (6327946.521, 6384865.327, 6426644.992), stdev = 28819.962
  CI (99.9%): [6365610.339, 6404120.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  6384865.327 ± 19254.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2085936.862 ops/s
# Warmup Iteration   2: 4837827.361 ops/s
# Warmup Iteration   3: 4056939.126 ops/s
# Warmup Iteration   4: 4863633.418 ops/s
# Warmup Iteration   5: 4891542.148 ops/s
# Warmup Iteration   6: 4868450.620 ops/s
# Warmup Iteration   7: 4887868.448 ops/s
# Warmup Iteration   8: 4874978.826 ops/s
# Warmup Iteration   9: 4864037.957 ops/s
# Warmup Iteration  10: 4871230.523 ops/s
# Warmup Iteration  11: 4860486.228 ops/s
# Warmup Iteration  12: 4854584.290 ops/s
# Warmup Iteration  13: 4885471.595 ops/s
# Warmup Iteration  14: 4865967.316 ops/s
# Warmup Iteration  15: 4878392.724 ops/s
# Warmup Iteration  16: 4874515.384 ops/s
# Warmup Iteration  17: 4880139.391 ops/s
# Warmup Iteration  18: 4878091.631 ops/s
# Warmup Iteration  19: 4882370.049 ops/s
# Warmup Iteration  20: 4849289.702 ops/s
# Warmup Iteration  21: 4886953.634 ops/s
# Warmup Iteration  22: 4871601.576 ops/s
# Warmup Iteration  23: 4858717.232 ops/s
# Warmup Iteration  24: 4872257.039 ops/s
# Warmup Iteration  25: 4890276.005 ops/s
# Warmup Iteration  26: 4879156.761 ops/s
# Warmup Iteration  27: 4857255.311 ops/s
# Warmup Iteration  28: 4837295.199 ops/s
# Warmup Iteration  29: 4842744.306 ops/s
# Warmup Iteration  30: 4869820.451 ops/s
Iteration   1: 4901084.091 ops/s
Iteration   2: 4899241.350 ops/s
Iteration   3: 4861386.718 ops/s
Iteration   4: 4887275.973 ops/s
Iteration   5: 4897611.115 ops/s
Iteration   6: 4893249.660 ops/s
Iteration   7: 4852180.032 ops/s
Iteration   8: 4859721.712 ops/s
Iteration   9: 4872326.317 ops/s
Iteration  10: 4888695.825 ops/s
Iteration  11: 4897296.464 ops/s
Iteration  12: 4862936.054 ops/s
Iteration  13: 4884920.560 ops/s
Iteration  14: 4844344.096 ops/s
Iteration  15: 4832812.205 ops/s
Iteration  16: 4877470.534 ops/s
Iteration  17: 4863399.411 ops/s
Iteration  18: 4883952.126 ops/s
Iteration  19: 4902952.994 ops/s
Iteration  20: 4878790.264 ops/s
Iteration  21: 4882067.913 ops/s
Iteration  22: 4904412.741 ops/s
Iteration  23: 4880509.091 ops/s
Iteration  24: 4868003.487 ops/s
Iteration  25: 4857863.030 ops/s
Iteration  26: 4899294.100 ops/s
Iteration  27: 4853687.190 ops/s
Iteration  28: 4885357.498 ops/s
Iteration  29: 4876848.055 ops/s
Iteration  30: 4893526.772 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectShortWithTarget":
  4878107.246 ±(99.9%) 12634.749 ops/s [Average]
  (min, avg, max) = (4832812.205, 4878107.246, 4904412.741), stdev = 18911.099
  CI (99.9%): [4865472.497, 4890741.995] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  4878107.246 ± 12634.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150546.653 ops/s
# Warmup Iteration   2: 274581.008 ops/s
# Warmup Iteration   3: 349854.126 ops/s
# Warmup Iteration   4: 351102.657 ops/s
# Warmup Iteration   5: 351483.056 ops/s
# Warmup Iteration   6: 322544.070 ops/s
# Warmup Iteration   7: 317936.508 ops/s
# Warmup Iteration   8: 351641.761 ops/s
# Warmup Iteration   9: 352437.085 ops/s
# Warmup Iteration  10: 353371.992 ops/s
# Warmup Iteration  11: 351112.952 ops/s
# Warmup Iteration  12: 351753.947 ops/s
# Warmup Iteration  13: 350830.675 ops/s
# Warmup Iteration  14: 352115.684 ops/s
# Warmup Iteration  15: 353147.046 ops/s
# Warmup Iteration  16: 353290.527 ops/s
# Warmup Iteration  17: 352996.641 ops/s
# Warmup Iteration  18: 353137.400 ops/s
# Warmup Iteration  19: 352100.274 ops/s
# Warmup Iteration  20: 352322.045 ops/s
# Warmup Iteration  21: 351732.006 ops/s
# Warmup Iteration  22: 352762.630 ops/s
# Warmup Iteration  23: 353428.907 ops/s
# Warmup Iteration  24: 353621.240 ops/s
# Warmup Iteration  25: 353000.509 ops/s
# Warmup Iteration  26: 353599.575 ops/s
# Warmup Iteration  27: 353232.571 ops/s
# Warmup Iteration  28: 354368.305 ops/s
# Warmup Iteration  29: 353369.946 ops/s
# Warmup Iteration  30: 352067.068 ops/s
Iteration   1: 352443.935 ops/s
Iteration   2: 353068.371 ops/s
Iteration   3: 353161.604 ops/s
Iteration   4: 353734.424 ops/s
Iteration   5: 351116.932 ops/s
Iteration   6: 352388.036 ops/s
Iteration   7: 354270.204 ops/s
Iteration   8: 352668.856 ops/s
Iteration   9: 350903.963 ops/s
Iteration  10: 352852.910 ops/s
Iteration  11: 351883.746 ops/s
Iteration  12: 352148.550 ops/s
Iteration  13: 353651.209 ops/s
Iteration  14: 353232.395 ops/s
Iteration  15: 353975.901 ops/s
Iteration  16: 351868.228 ops/s
Iteration  17: 353622.591 ops/s
Iteration  18: 350435.918 ops/s
Iteration  19: 353439.743 ops/s
Iteration  20: 353299.420 ops/s
Iteration  21: 353808.811 ops/s
Iteration  22: 353412.704 ops/s
Iteration  23: 353552.468 ops/s
Iteration  24: 350978.771 ops/s
Iteration  25: 352491.562 ops/s
Iteration  26: 354396.801 ops/s
Iteration  27: 353145.070 ops/s
Iteration  28: 352213.706 ops/s
Iteration  29: 353866.537 ops/s
Iteration  30: 351017.211 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectTarget":
  352768.353 ±(99.9%) 723.440 ops/s [Average]
  (min, avg, max) = (350435.918, 352768.353, 354396.801), stdev = 1082.811
  CI (99.9%): [352044.913, 353491.792] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectTarget  thrpt   30  352768.353 ± 723.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788690.938 ops/s
# Warmup Iteration   2: 1772678.289 ops/s
# Warmup Iteration   3: 1937791.811 ops/s
# Warmup Iteration   4: 1949823.900 ops/s
# Warmup Iteration   5: 1591957.665 ops/s
# Warmup Iteration   6: 1939419.172 ops/s
# Warmup Iteration   7: 1950940.262 ops/s
# Warmup Iteration   8: 1950357.692 ops/s
# Warmup Iteration   9: 1951767.672 ops/s
# Warmup Iteration  10: 1949949.340 ops/s
# Warmup Iteration  11: 1950680.080 ops/s
# Warmup Iteration  12: 1941875.012 ops/s
# Warmup Iteration  13: 1951544.005 ops/s
# Warmup Iteration  14: 1951067.938 ops/s
# Warmup Iteration  15: 1942224.821 ops/s
# Warmup Iteration  16: 1952840.452 ops/s
# Warmup Iteration  17: 1943753.123 ops/s
# Warmup Iteration  18: 1948501.869 ops/s
# Warmup Iteration  19: 1941065.145 ops/s
# Warmup Iteration  20: 1942918.715 ops/s
# Warmup Iteration  21: 1932310.007 ops/s
# Warmup Iteration  22: 1946621.766 ops/s
# Warmup Iteration  23: 1942194.207 ops/s
# Warmup Iteration  24: 1948299.100 ops/s
# Warmup Iteration  25: 1947896.806 ops/s
# Warmup Iteration  26: 1948047.729 ops/s
# Warmup Iteration  27: 1945048.769 ops/s
# Warmup Iteration  28: 1949855.456 ops/s
# Warmup Iteration  29: 1950686.157 ops/s
# Warmup Iteration  30: 1957817.330 ops/s
Iteration   1: 1945659.175 ops/s
Iteration   2: 1949574.556 ops/s
Iteration   3: 1952411.592 ops/s
Iteration   4: 1953740.076 ops/s
Iteration   5: 1954150.278 ops/s
Iteration   6: 1949226.229 ops/s
Iteration   7: 1948977.391 ops/s
Iteration   8: 1940336.574 ops/s
Iteration   9: 1947228.601 ops/s
Iteration  10: 1946296.291 ops/s
Iteration  11: 1943167.265 ops/s
Iteration  12: 1942226.270 ops/s
Iteration  13: 1934430.125 ops/s
Iteration  14: 1955660.067 ops/s
Iteration  15: 1944645.991 ops/s
Iteration  16: 1956900.007 ops/s
Iteration  17: 1952372.633 ops/s
Iteration  18: 1949735.239 ops/s
Iteration  19: 1958251.253 ops/s
Iteration  20: 1944085.800 ops/s
Iteration  21: 1926049.800 ops/s
Iteration  22: 1947492.592 ops/s
Iteration  23: 1950881.874 ops/s
Iteration  24: 1938401.263 ops/s
Iteration  25: 1934990.912 ops/s
Iteration  26: 1960614.178 ops/s
Iteration  27: 1950311.787 ops/s
Iteration  28: 1951080.552 ops/s
Iteration  29: 1943842.346 ops/s
Iteration  30: 1945040.283 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith":
  1947259.367 ±(99.9%) 5009.966 ops/s [Average]
  (min, avg, max) = (1926049.800, 1947259.367, 1960614.178), stdev = 7498.682
  CI (99.9%): [1942249.401, 1952269.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectWith  thrpt   30  1947259.367 ± 5009.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3893602.172 ops/s
# Warmup Iteration   2: 8644205.254 ops/s
# Warmup Iteration   3: 7295665.974 ops/s
# Warmup Iteration   4: 8740472.762 ops/s
# Warmup Iteration   5: 8706292.494 ops/s
# Warmup Iteration   6: 8692533.821 ops/s
# Warmup Iteration   7: 8686669.561 ops/s
# Warmup Iteration   8: 8679737.427 ops/s
# Warmup Iteration   9: 8717301.655 ops/s
# Warmup Iteration  10: 8699414.383 ops/s
# Warmup Iteration  11: 8720274.108 ops/s
# Warmup Iteration  12: 8688699.517 ops/s
# Warmup Iteration  13: 8711301.178 ops/s
# Warmup Iteration  14: 8715101.801 ops/s
# Warmup Iteration  15: 8699659.518 ops/s
# Warmup Iteration  16: 8712568.374 ops/s
# Warmup Iteration  17: 8737694.956 ops/s
# Warmup Iteration  18: 8717020.139 ops/s
# Warmup Iteration  19: 8710679.509 ops/s
# Warmup Iteration  20: 8711761.005 ops/s
# Warmup Iteration  21: 8717506.985 ops/s
# Warmup Iteration  22: 8703632.185 ops/s
# Warmup Iteration  23: 8720142.628 ops/s
# Warmup Iteration  24: 8715988.813 ops/s
# Warmup Iteration  25: 8745546.806 ops/s
# Warmup Iteration  26: 8731451.866 ops/s
# Warmup Iteration  27: 8717282.515 ops/s
# Warmup Iteration  28: 8728287.549 ops/s
# Warmup Iteration  29: 8751517.299 ops/s
# Warmup Iteration  30: 8729753.351 ops/s
Iteration   1: 8741870.305 ops/s
Iteration   2: 8736515.417 ops/s
Iteration   3: 8717524.478 ops/s
Iteration   4: 8741609.061 ops/s
Iteration   5: 8745323.020 ops/s
Iteration   6: 8769506.751 ops/s
Iteration   7: 8767760.132 ops/s
Iteration   8: 8713957.134 ops/s
Iteration   9: 8725668.789 ops/s
Iteration  10: 8760682.607 ops/s
Iteration  11: 8656607.693 ops/s
Iteration  12: 8752452.416 ops/s
Iteration  13: 8654975.616 ops/s
Iteration  14: 8726206.733 ops/s
Iteration  15: 8732825.367 ops/s
Iteration  16: 8733762.426 ops/s
Iteration  17: 8710155.886 ops/s
Iteration  18: 8720251.418 ops/s
Iteration  19: 8698175.715 ops/s
Iteration  20: 8689938.960 ops/s
Iteration  21: 8716916.707 ops/s
Iteration  22: 8721112.561 ops/s
Iteration  23: 8684526.630 ops/s
Iteration  24: 8681491.074 ops/s
Iteration  25: 8695327.025 ops/s
Iteration  26: 8715850.792 ops/s
Iteration  27: 8684242.909 ops/s
Iteration  28: 8768991.564 ops/s
Iteration  29: 8693558.352 ops/s
Iteration  30: 8671821.157 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndex":
  8717653.623 ±(99.9%) 21273.625 ops/s [Average]
  (min, avg, max) = (8654975.616, 8717653.623, 8769506.751), stdev = 31841.363
  CI (99.9%): [8696379.998, 8738927.249] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectWithIndex  thrpt   30  8717653.623 ± 21273.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763608.056 ops/s
# Warmup Iteration   2: 2153212.084 ops/s
# Warmup Iteration   3: 2203507.479 ops/s
# Warmup Iteration   4: 1825926.538 ops/s
# Warmup Iteration   5: 2211617.918 ops/s
# Warmup Iteration   6: 2207027.971 ops/s
# Warmup Iteration   7: 2217567.789 ops/s
# Warmup Iteration   8: 2225142.835 ops/s
# Warmup Iteration   9: 2214897.352 ops/s
# Warmup Iteration  10: 2226570.367 ops/s
# Warmup Iteration  11: 2218239.400 ops/s
# Warmup Iteration  12: 2210090.705 ops/s
# Warmup Iteration  13: 2206929.435 ops/s
# Warmup Iteration  14: 2202443.227 ops/s
# Warmup Iteration  15: 2218149.594 ops/s
# Warmup Iteration  16: 2205395.544 ops/s
# Warmup Iteration  17: 2208070.092 ops/s
# Warmup Iteration  18: 2218042.409 ops/s
# Warmup Iteration  19: 2213899.634 ops/s
# Warmup Iteration  20: 2219824.946 ops/s
# Warmup Iteration  21: 2212406.833 ops/s
# Warmup Iteration  22: 2224167.233 ops/s
# Warmup Iteration  23: 2216393.112 ops/s
# Warmup Iteration  24: 2226266.450 ops/s
# Warmup Iteration  25: 2217286.309 ops/s
# Warmup Iteration  26: 2211983.556 ops/s
# Warmup Iteration  27: 2218149.464 ops/s
# Warmup Iteration  28: 2209483.149 ops/s
# Warmup Iteration  29: 2216874.404 ops/s
# Warmup Iteration  30: 2212725.122 ops/s
Iteration   1: 2222765.456 ops/s
Iteration   2: 2204469.066 ops/s
Iteration   3: 2214362.427 ops/s
Iteration   4: 2223117.457 ops/s
Iteration   5: 2209755.527 ops/s
Iteration   6: 2210681.879 ops/s
Iteration   7: 2224115.328 ops/s
Iteration   8: 2209980.610 ops/s
Iteration   9: 2211965.104 ops/s
Iteration  10: 2199305.925 ops/s
Iteration  11: 2217132.363 ops/s
Iteration  12: 2218094.670 ops/s
Iteration  13: 2203335.150 ops/s
Iteration  14: 2211488.387 ops/s
Iteration  15: 2207532.603 ops/s
Iteration  16: 2225762.920 ops/s
Iteration  17: 2217747.556 ops/s
Iteration  18: 2203930.879 ops/s
Iteration  19: 2212516.996 ops/s
Iteration  20: 2208523.850 ops/s
Iteration  21: 2217081.590 ops/s
Iteration  22: 2213548.866 ops/s
Iteration  23: 2216583.148 ops/s
Iteration  24: 2213047.098 ops/s
Iteration  25: 2214095.622 ops/s
Iteration  26: 2218466.126 ops/s
Iteration  27: 2211716.235 ops/s
Iteration  28: 2198556.059 ops/s
Iteration  29: 2191936.205 ops/s
Iteration  30: 2213703.735 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget":
  2212177.295 ±(99.9%) 5206.500 ops/s [Average]
  (min, avg, max) = (2191936.205, 2212177.295, 2225762.920), stdev = 7792.844
  CI (99.9%): [2206970.795, 2217383.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectWithIndexWithTarget  thrpt   30  2212177.295 ± 5206.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 151802.447 ops/s
# Warmup Iteration   2: 273744.331 ops/s
# Warmup Iteration   3: 339429.678 ops/s
# Warmup Iteration   4: 343690.369 ops/s
# Warmup Iteration   5: 341878.546 ops/s
# Warmup Iteration   6: 289495.223 ops/s
# Warmup Iteration   7: 330538.403 ops/s
# Warmup Iteration   8: 341587.168 ops/s
# Warmup Iteration   9: 342386.220 ops/s
# Warmup Iteration  10: 342959.244 ops/s
# Warmup Iteration  11: 341368.091 ops/s
# Warmup Iteration  12: 343289.470 ops/s
# Warmup Iteration  13: 342867.075 ops/s
# Warmup Iteration  14: 343054.410 ops/s
# Warmup Iteration  15: 343185.091 ops/s
# Warmup Iteration  16: 342344.815 ops/s
# Warmup Iteration  17: 344371.897 ops/s
# Warmup Iteration  18: 342097.652 ops/s
# Warmup Iteration  19: 342427.950 ops/s
# Warmup Iteration  20: 341603.803 ops/s
# Warmup Iteration  21: 341930.528 ops/s
# Warmup Iteration  22: 343060.675 ops/s
# Warmup Iteration  23: 342278.237 ops/s
# Warmup Iteration  24: 342736.163 ops/s
# Warmup Iteration  25: 343312.931 ops/s
# Warmup Iteration  26: 341382.360 ops/s
# Warmup Iteration  27: 343011.065 ops/s
# Warmup Iteration  28: 343184.685 ops/s
# Warmup Iteration  29: 340181.995 ops/s
# Warmup Iteration  30: 343490.289 ops/s
Iteration   1: 341822.129 ops/s
Iteration   2: 342766.500 ops/s
Iteration   3: 338944.775 ops/s
Iteration   4: 343757.014 ops/s
Iteration   5: 342523.554 ops/s
Iteration   6: 342673.154 ops/s
Iteration   7: 341960.515 ops/s
Iteration   8: 343034.322 ops/s
Iteration   9: 340467.680 ops/s
Iteration  10: 342228.151 ops/s
Iteration  11: 343345.975 ops/s
Iteration  12: 342362.405 ops/s
Iteration  13: 342810.379 ops/s
Iteration  14: 342157.844 ops/s
Iteration  15: 341217.279 ops/s
Iteration  16: 342417.738 ops/s
Iteration  17: 343487.163 ops/s
Iteration  18: 342163.549 ops/s
Iteration  19: 341003.189 ops/s
Iteration  20: 341268.765 ops/s
Iteration  21: 341873.782 ops/s
Iteration  22: 337120.630 ops/s
Iteration  23: 341777.086 ops/s
Iteration  24: 343146.874 ops/s
Iteration  25: 342568.544 ops/s
Iteration  26: 343489.891 ops/s
Iteration  27: 341354.349 ops/s
Iteration  28: 343627.707 ops/s
Iteration  29: 344347.387 ops/s
Iteration  30: 342320.265 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_collectWith_target":
  342134.620 ±(99.9%) 963.290 ops/s [Average]
  (min, avg, max) = (337120.630, 342134.620, 344347.387), stdev = 1441.808
  CI (99.9%): [341171.329, 343097.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_collectWith_target  thrpt   30  342134.620 ± 963.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16924307.645 ops/s
# Warmup Iteration   2: 35952353.996 ops/s
# Warmup Iteration   3: 30631975.776 ops/s
# Warmup Iteration   4: 36270395.892 ops/s
# Warmup Iteration   5: 36376464.203 ops/s
# Warmup Iteration   6: 36411048.120 ops/s
# Warmup Iteration   7: 36323928.487 ops/s
# Warmup Iteration   8: 36236236.204 ops/s
# Warmup Iteration   9: 36339265.258 ops/s
# Warmup Iteration  10: 36277980.738 ops/s
# Warmup Iteration  11: 36335100.533 ops/s
# Warmup Iteration  12: 36308081.618 ops/s
# Warmup Iteration  13: 36216895.612 ops/s
# Warmup Iteration  14: 36282592.443 ops/s
# Warmup Iteration  15: 36201083.218 ops/s
# Warmup Iteration  16: 36225357.656 ops/s
# Warmup Iteration  17: 36304897.782 ops/s
# Warmup Iteration  18: 36259687.013 ops/s
# Warmup Iteration  19: 36335792.644 ops/s
# Warmup Iteration  20: 36481732.968 ops/s
# Warmup Iteration  21: 36245154.741 ops/s
# Warmup Iteration  22: 36463425.682 ops/s
# Warmup Iteration  23: 36381141.977 ops/s
# Warmup Iteration  24: 36282162.478 ops/s
# Warmup Iteration  25: 36272292.897 ops/s
# Warmup Iteration  26: 36430945.603 ops/s
# Warmup Iteration  27: 36347231.426 ops/s
# Warmup Iteration  28: 36412965.278 ops/s
# Warmup Iteration  29: 36430172.313 ops/s
# Warmup Iteration  30: 36373221.885 ops/s
Iteration   1: 36371664.603 ops/s
Iteration   2: 36381600.449 ops/s
Iteration   3: 36507695.722 ops/s
Iteration   4: 36410139.280 ops/s
Iteration   5: 36459706.243 ops/s
Iteration   6: 36025403.612 ops/s
Iteration   7: 36177666.170 ops/s
Iteration   8: 36585290.173 ops/s
Iteration   9: 35967012.080 ops/s
Iteration  10: 36383373.436 ops/s
Iteration  11: 36408188.596 ops/s
Iteration  12: 36260313.086 ops/s
Iteration  13: 36479893.145 ops/s
Iteration  14: 36351520.705 ops/s
Iteration  15: 36232549.946 ops/s
Iteration  16: 36229657.313 ops/s
Iteration  17: 36325851.183 ops/s
Iteration  18: 36396513.778 ops/s
Iteration  19: 36319663.218 ops/s
Iteration  20: 36377592.467 ops/s
Iteration  21: 36280945.936 ops/s
Iteration  22: 36531180.405 ops/s
Iteration  23: 36109977.777 ops/s
Iteration  24: 36297260.382 ops/s
Iteration  25: 36421904.018 ops/s
Iteration  26: 36386322.542 ops/s
Iteration  27: 36395345.165 ops/s
Iteration  28: 36496965.698 ops/s
Iteration  29: 36263201.284 ops/s
Iteration  30: 36513319.654 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_contains":
  36344923.936 ±(99.9%) 96323.073 ops/s [Average]
  (min, avg, max) = (35967012.080, 36344923.936, 36585290.173), stdev = 144171.852
  CI (99.9%): [36248600.863, 36441247.008] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_contains  thrpt   30  36344923.936 ± 96323.073  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12040261.762 ops/s
# Warmup Iteration   2: 23926713.558 ops/s
# Warmup Iteration   3: 21012886.336 ops/s
# Warmup Iteration   4: 24194948.461 ops/s
# Warmup Iteration   5: 24315858.217 ops/s
# Warmup Iteration   6: 24281436.509 ops/s
# Warmup Iteration   7: 24247784.514 ops/s
# Warmup Iteration   8: 24321737.137 ops/s
# Warmup Iteration   9: 24136838.593 ops/s
# Warmup Iteration  10: 24295486.573 ops/s
# Warmup Iteration  11: 24277141.601 ops/s
# Warmup Iteration  12: 24243416.315 ops/s
# Warmup Iteration  13: 24261849.384 ops/s
# Warmup Iteration  14: 24232859.754 ops/s
# Warmup Iteration  15: 24393959.146 ops/s
# Warmup Iteration  16: 24373754.459 ops/s
# Warmup Iteration  17: 24392016.641 ops/s
# Warmup Iteration  18: 24335059.325 ops/s
# Warmup Iteration  19: 24360455.363 ops/s
# Warmup Iteration  20: 24201088.235 ops/s
# Warmup Iteration  21: 24390274.314 ops/s
# Warmup Iteration  22: 24233919.298 ops/s
# Warmup Iteration  23: 24301765.960 ops/s
# Warmup Iteration  24: 24320638.004 ops/s
# Warmup Iteration  25: 24215085.616 ops/s
# Warmup Iteration  26: 24238210.978 ops/s
# Warmup Iteration  27: 24281464.480 ops/s
# Warmup Iteration  28: 24232549.036 ops/s
# Warmup Iteration  29: 24288472.505 ops/s
# Warmup Iteration  30: 24272675.241 ops/s
Iteration   1: 24378642.193 ops/s
Iteration   2: 24344581.554 ops/s
Iteration   3: 24159256.319 ops/s
Iteration   4: 24121024.595 ops/s
Iteration   5: 24295457.493 ops/s
Iteration   6: 24179351.103 ops/s
Iteration   7: 24346686.399 ops/s
Iteration   8: 24343193.799 ops/s
Iteration   9: 24142078.904 ops/s
Iteration  10: 24114828.009 ops/s
Iteration  11: 23496782.960 ops/s
Iteration  12: 24237536.523 ops/s
Iteration  13: 24093870.718 ops/s
Iteration  14: 24021170.307 ops/s
Iteration  15: 24015370.325 ops/s
Iteration  16: 24038746.429 ops/s
Iteration  17: 23863919.284 ops/s
Iteration  18: 23958432.534 ops/s
Iteration  19: 24105447.618 ops/s
Iteration  20: 24409750.329 ops/s
Iteration  21: 24325556.784 ops/s
Iteration  22: 24209584.865 ops/s
Iteration  23: 24230147.664 ops/s
Iteration  24: 24178022.467 ops/s
Iteration  25: 24174122.174 ops/s
Iteration  26: 24342466.496 ops/s
Iteration  27: 24189482.102 ops/s
Iteration  28: 24303699.272 ops/s
Iteration  29: 24153711.216 ops/s
Iteration  30: 24204040.719 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllArray":
  24165898.705 ±(99.9%) 121731.651 ops/s [Average]
  (min, avg, max) = (23496782.960, 24165898.705, 24409750.329), stdev = 182202.218
  CI (99.9%): [24044167.055, 24287630.356] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsAllArray  thrpt   30  24165898.705 ± 121731.651  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8970707.614 ops/s
# Warmup Iteration   2: 19669187.364 ops/s
# Warmup Iteration   3: 16125951.157 ops/s
# Warmup Iteration   4: 18925318.826 ops/s
# Warmup Iteration   5: 18874525.419 ops/s
# Warmup Iteration   6: 18901853.049 ops/s
# Warmup Iteration   7: 18976609.667 ops/s
# Warmup Iteration   8: 18925399.962 ops/s
# Warmup Iteration   9: 19011910.271 ops/s
# Warmup Iteration  10: 18903460.070 ops/s
# Warmup Iteration  11: 19043486.012 ops/s
# Warmup Iteration  12: 18936586.388 ops/s
# Warmup Iteration  13: 19042398.355 ops/s
# Warmup Iteration  14: 18895425.685 ops/s
# Warmup Iteration  15: 18930421.766 ops/s
# Warmup Iteration  16: 18989264.956 ops/s
# Warmup Iteration  17: 19014296.092 ops/s
# Warmup Iteration  18: 18977313.833 ops/s
# Warmup Iteration  19: 18958408.722 ops/s
# Warmup Iteration  20: 18974473.893 ops/s
# Warmup Iteration  21: 18962183.177 ops/s
# Warmup Iteration  22: 18947840.659 ops/s
# Warmup Iteration  23: 18892583.166 ops/s
# Warmup Iteration  24: 18926743.936 ops/s
# Warmup Iteration  25: 18971311.537 ops/s
# Warmup Iteration  26: 18955767.614 ops/s
# Warmup Iteration  27: 18938495.912 ops/s
# Warmup Iteration  28: 19000387.695 ops/s
# Warmup Iteration  29: 18942549.655 ops/s
# Warmup Iteration  30: 18924914.379 ops/s
Iteration   1: 18895367.981 ops/s
Iteration   2: 18910694.542 ops/s
Iteration   3: 18832377.485 ops/s
Iteration   4: 18921646.488 ops/s
Iteration   5: 18952015.716 ops/s
Iteration   6: 19001993.753 ops/s
Iteration   7: 18992030.557 ops/s
Iteration   8: 18855762.272 ops/s
Iteration   9: 18945093.917 ops/s
Iteration  10: 18981412.940 ops/s
Iteration  11: 18914809.298 ops/s
Iteration  12: 18999184.638 ops/s
Iteration  13: 19082126.105 ops/s
Iteration  14: 18905422.791 ops/s
Iteration  15: 18936148.807 ops/s
Iteration  16: 18982438.714 ops/s
Iteration  17: 18935687.381 ops/s
Iteration  18: 18825101.717 ops/s
Iteration  19: 18933382.794 ops/s
Iteration  20: 19005599.015 ops/s
Iteration  21: 19037892.265 ops/s
Iteration  22: 18917348.577 ops/s
Iteration  23: 18978904.613 ops/s
Iteration  24: 18933066.918 ops/s
Iteration  25: 18955206.496 ops/s
Iteration  26: 19040304.180 ops/s
Iteration  27: 19020644.781 ops/s
Iteration  28: 18950120.735 ops/s
Iteration  29: 19024079.769 ops/s
Iteration  30: 18966396.228 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllCollection":
  18954408.716 ±(99.9%) 40261.405 ops/s [Average]
  (min, avg, max) = (18825101.717, 18954408.716, 19082126.105), stdev = 60261.381
  CI (99.9%): [18914147.311, 18994670.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsAllCollection  thrpt   30  18954408.716 ± 40261.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9037261.078 ops/s
# Warmup Iteration   2: 19455563.001 ops/s
# Warmup Iteration   3: 16430407.449 ops/s
# Warmup Iteration   4: 19538939.095 ops/s
# Warmup Iteration   5: 19493974.797 ops/s
# Warmup Iteration   6: 19419997.886 ops/s
# Warmup Iteration   7: 19438900.728 ops/s
# Warmup Iteration   8: 19485879.673 ops/s
# Warmup Iteration   9: 19537363.666 ops/s
# Warmup Iteration  10: 19599639.489 ops/s
# Warmup Iteration  11: 19486169.729 ops/s
# Warmup Iteration  12: 19545876.366 ops/s
# Warmup Iteration  13: 19455281.208 ops/s
# Warmup Iteration  14: 19329474.987 ops/s
# Warmup Iteration  15: 19445801.806 ops/s
# Warmup Iteration  16: 19434843.913 ops/s
# Warmup Iteration  17: 19411339.442 ops/s
# Warmup Iteration  18: 19499822.711 ops/s
# Warmup Iteration  19: 19373908.620 ops/s
# Warmup Iteration  20: 19278494.361 ops/s
# Warmup Iteration  21: 19525033.478 ops/s
# Warmup Iteration  22: 19544338.735 ops/s
# Warmup Iteration  23: 19453048.547 ops/s
# Warmup Iteration  24: 19466395.044 ops/s
# Warmup Iteration  25: 19472887.776 ops/s
# Warmup Iteration  26: 19447265.575 ops/s
# Warmup Iteration  27: 19438544.220 ops/s
# Warmup Iteration  28: 19500663.547 ops/s
# Warmup Iteration  29: 19379410.455 ops/s
# Warmup Iteration  30: 19494835.245 ops/s
Iteration   1: 19468137.616 ops/s
Iteration   2: 19234488.652 ops/s
Iteration   3: 19544110.236 ops/s
Iteration   4: 19560961.152 ops/s
Iteration   5: 19507695.872 ops/s
Iteration   6: 19457953.439 ops/s
Iteration   7: 19335083.221 ops/s
Iteration   8: 19368739.299 ops/s
Iteration   9: 19538471.837 ops/s
Iteration  10: 19575496.785 ops/s
Iteration  11: 19535192.551 ops/s
Iteration  12: 19562123.793 ops/s
Iteration  13: 19465812.187 ops/s
Iteration  14: 19520799.349 ops/s
Iteration  15: 19320087.095 ops/s
Iteration  16: 19428802.180 ops/s
Iteration  17: 19512137.294 ops/s
Iteration  18: 19620849.883 ops/s
Iteration  19: 19401977.592 ops/s
Iteration  20: 19626573.106 ops/s
Iteration  21: 19519107.703 ops/s
Iteration  22: 19601142.025 ops/s
Iteration  23: 19531498.784 ops/s
Iteration  24: 19572251.568 ops/s
Iteration  25: 19477912.304 ops/s
Iteration  26: 19624653.971 ops/s
Iteration  27: 19550383.593 ops/s
Iteration  28: 19570701.844 ops/s
Iteration  29: 19453677.010 ops/s
Iteration  30: 19580537.760 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAllIterable":
  19502245.323 ±(99.9%) 63743.268 ops/s [Average]
  (min, avg, max) = (19234488.652, 19502245.323, 19626573.106), stdev = 95407.930
  CI (99.9%): [19438502.056, 19565988.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsAllIterable  thrpt   30  19502245.323 ± 63743.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149779.944 ops/s
# Warmup Iteration   2: 208967.866 ops/s
# Warmup Iteration   3: 253987.171 ops/s
# Warmup Iteration   4: 251595.794 ops/s
# Warmup Iteration   5: 254000.018 ops/s
# Warmup Iteration   6: 254282.069 ops/s
# Warmup Iteration   7: 254459.740 ops/s
# Warmup Iteration   8: 214555.166 ops/s
# Warmup Iteration   9: 253440.058 ops/s
# Warmup Iteration  10: 254591.106 ops/s
# Warmup Iteration  11: 252979.239 ops/s
# Warmup Iteration  12: 253123.293 ops/s
# Warmup Iteration  13: 253015.344 ops/s
# Warmup Iteration  14: 253117.756 ops/s
# Warmup Iteration  15: 253920.520 ops/s
# Warmup Iteration  16: 254163.884 ops/s
# Warmup Iteration  17: 252550.913 ops/s
# Warmup Iteration  18: 253482.396 ops/s
# Warmup Iteration  19: 253795.088 ops/s
# Warmup Iteration  20: 254714.503 ops/s
# Warmup Iteration  21: 253132.114 ops/s
# Warmup Iteration  22: 252904.649 ops/s
# Warmup Iteration  23: 253129.504 ops/s
# Warmup Iteration  24: 254598.426 ops/s
# Warmup Iteration  25: 253024.036 ops/s
# Warmup Iteration  26: 252882.782 ops/s
# Warmup Iteration  27: 253539.180 ops/s
# Warmup Iteration  28: 254247.487 ops/s
# Warmup Iteration  29: 253276.938 ops/s
# Warmup Iteration  30: 253607.124 ops/s
Iteration   1: 254484.758 ops/s
Iteration   2: 252610.454 ops/s
Iteration   3: 253355.785 ops/s
Iteration   4: 253799.014 ops/s
Iteration   5: 252875.247 ops/s
Iteration   6: 252786.916 ops/s
Iteration   7: 252135.526 ops/s
Iteration   8: 253128.787 ops/s
Iteration   9: 254145.681 ops/s
Iteration  10: 252170.368 ops/s
Iteration  11: 252632.899 ops/s
Iteration  12: 252932.429 ops/s
Iteration  13: 253483.431 ops/s
Iteration  14: 252777.511 ops/s
Iteration  15: 252413.292 ops/s
Iteration  16: 253268.424 ops/s
Iteration  17: 253955.249 ops/s
Iteration  18: 254344.493 ops/s
Iteration  19: 254171.834 ops/s
Iteration  20: 255085.037 ops/s
Iteration  21: 253708.696 ops/s
Iteration  22: 253090.800 ops/s
Iteration  23: 253937.522 ops/s
Iteration  24: 255042.877 ops/s
Iteration  25: 252817.122 ops/s
Iteration  26: 255469.841 ops/s
Iteration  27: 253596.636 ops/s
Iteration  28: 253421.767 ops/s
Iteration  29: 253663.115 ops/s
Iteration  30: 254366.814 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyCollection":
  253522.411 ±(99.9%) 576.301 ops/s [Average]
  (min, avg, max) = (252135.526, 253522.411, 255469.841), stdev = 862.580
  CI (99.9%): [252946.110, 254098.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  253522.411 ± 576.301  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 132762.667 ops/s
# Warmup Iteration   2: 173162.151 ops/s
# Warmup Iteration   3: 219588.071 ops/s
# Warmup Iteration   4: 217887.072 ops/s
# Warmup Iteration   5: 220063.424 ops/s
# Warmup Iteration   6: 220034.092 ops/s
# Warmup Iteration   7: 219219.286 ops/s
# Warmup Iteration   8: 218826.275 ops/s
# Warmup Iteration   9: 184170.168 ops/s
# Warmup Iteration  10: 220224.209 ops/s
# Warmup Iteration  11: 219809.710 ops/s
# Warmup Iteration  12: 219153.059 ops/s
# Warmup Iteration  13: 219061.466 ops/s
# Warmup Iteration  14: 219386.241 ops/s
# Warmup Iteration  15: 219616.754 ops/s
# Warmup Iteration  16: 219777.899 ops/s
# Warmup Iteration  17: 219272.354 ops/s
# Warmup Iteration  18: 218679.593 ops/s
# Warmup Iteration  19: 218466.879 ops/s
# Warmup Iteration  20: 220147.628 ops/s
# Warmup Iteration  21: 219651.036 ops/s
# Warmup Iteration  22: 219548.870 ops/s
# Warmup Iteration  23: 219298.568 ops/s
# Warmup Iteration  24: 219630.106 ops/s
# Warmup Iteration  25: 219869.510 ops/s
# Warmup Iteration  26: 218887.253 ops/s
# Warmup Iteration  27: 219735.096 ops/s
# Warmup Iteration  28: 219429.012 ops/s
# Warmup Iteration  29: 219565.612 ops/s
# Warmup Iteration  30: 218780.133 ops/s
Iteration   1: 218961.323 ops/s
Iteration   2: 219877.342 ops/s
Iteration   3: 219689.094 ops/s
Iteration   4: 218778.735 ops/s
Iteration   5: 218681.707 ops/s
Iteration   6: 219495.352 ops/s
Iteration   7: 218605.910 ops/s
Iteration   8: 219882.493 ops/s
Iteration   9: 218540.526 ops/s
Iteration  10: 218953.418 ops/s
Iteration  11: 218986.006 ops/s
Iteration  12: 219172.593 ops/s
Iteration  13: 217618.976 ops/s
Iteration  14: 219252.544 ops/s
Iteration  15: 218022.649 ops/s
Iteration  16: 219222.923 ops/s
Iteration  17: 219433.668 ops/s
Iteration  18: 217240.575 ops/s
Iteration  19: 218070.883 ops/s
Iteration  20: 219798.082 ops/s
Iteration  21: 219199.018 ops/s
Iteration  22: 219852.896 ops/s
Iteration  23: 218954.823 ops/s
Iteration  24: 219418.572 ops/s
Iteration  25: 220324.610 ops/s
Iteration  26: 218650.170 ops/s
Iteration  27: 218686.400 ops/s
Iteration  28: 219162.588 ops/s
Iteration  29: 218883.653 ops/s
Iteration  30: 218284.178 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsAnyIterable":
  218990.057 ±(99.9%) 465.003 ops/s [Average]
  (min, avg, max) = (217240.575, 218990.057, 220324.610), stdev = 695.995
  CI (99.9%): [218525.054, 219455.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  218990.057 ± 465.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637151.312 ops/s
# Warmup Iteration   2: 684640.476 ops/s
# Warmup Iteration   3: 824409.307 ops/s
# Warmup Iteration   4: 878859.244 ops/s
# Warmup Iteration   5: 882035.244 ops/s
# Warmup Iteration   6: 879965.526 ops/s
# Warmup Iteration   7: 882756.492 ops/s
# Warmup Iteration   8: 883746.589 ops/s
# Warmup Iteration   9: 881480.857 ops/s
# Warmup Iteration  10: 881976.431 ops/s
# Warmup Iteration  11: 885548.971 ops/s
# Warmup Iteration  12: 883386.671 ops/s
# Warmup Iteration  13: 838825.678 ops/s
# Warmup Iteration  14: 785266.394 ops/s
# Warmup Iteration  15: 885894.385 ops/s
# Warmup Iteration  16: 881628.282 ops/s
# Warmup Iteration  17: 932287.267 ops/s
# Warmup Iteration  18: 936855.899 ops/s
# Warmup Iteration  19: 933420.362 ops/s
# Warmup Iteration  20: 935069.227 ops/s
# Warmup Iteration  21: 934418.942 ops/s
# Warmup Iteration  22: 932631.315 ops/s
# Warmup Iteration  23: 935532.111 ops/s
# Warmup Iteration  24: 931622.285 ops/s
# Warmup Iteration  25: 933224.066 ops/s
# Warmup Iteration  26: 940008.289 ops/s
# Warmup Iteration  27: 938430.149 ops/s
# Warmup Iteration  28: 935104.261 ops/s
# Warmup Iteration  29: 934149.496 ops/s
# Warmup Iteration  30: 933989.318 ops/s
Iteration   1: 936148.218 ops/s
Iteration   2: 938521.296 ops/s
Iteration   3: 934703.927 ops/s
Iteration   4: 934449.641 ops/s
Iteration   5: 935250.624 ops/s
Iteration   6: 933150.280 ops/s
Iteration   7: 928367.796 ops/s
Iteration   8: 934628.142 ops/s
Iteration   9: 926300.536 ops/s
Iteration  10: 937750.121 ops/s
Iteration  11: 931609.701 ops/s
Iteration  12: 931964.802 ops/s
Iteration  13: 933445.916 ops/s
Iteration  14: 933318.680 ops/s
Iteration  15: 934447.428 ops/s
Iteration  16: 932210.340 ops/s
Iteration  17: 928096.481 ops/s
Iteration  18: 936123.444 ops/s
Iteration  19: 938366.443 ops/s
Iteration  20: 934396.113 ops/s
Iteration  21: 930646.310 ops/s
Iteration  22: 938493.280 ops/s
Iteration  23: 936581.102 ops/s
Iteration  24: 944075.132 ops/s
Iteration  25: 928508.298 ops/s
Iteration  26: 932997.691 ops/s
Iteration  27: 940784.594 ops/s
Iteration  28: 939927.163 ops/s
Iteration  29: 940006.593 ops/s
Iteration  30: 935567.703 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsBy":
  934694.593 ±(99.9%) 2724.108 ops/s [Average]
  (min, avg, max) = (926300.536, 934694.593, 944075.132), stdev = 4077.317
  CI (99.9%): [931970.485, 937418.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsBy  thrpt   30  934694.593 ± 2724.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 149506.018 ops/s
# Warmup Iteration   2: 207700.540 ops/s
# Warmup Iteration   3: 250414.206 ops/s
# Warmup Iteration   4: 249433.030 ops/s
# Warmup Iteration   5: 250420.247 ops/s
# Warmup Iteration   6: 251235.170 ops/s
# Warmup Iteration   7: 250940.627 ops/s
# Warmup Iteration   8: 211584.311 ops/s
# Warmup Iteration   9: 250217.159 ops/s
# Warmup Iteration  10: 249991.371 ops/s
# Warmup Iteration  11: 249079.331 ops/s
# Warmup Iteration  12: 249771.407 ops/s
# Warmup Iteration  13: 251297.681 ops/s
# Warmup Iteration  14: 250619.962 ops/s
# Warmup Iteration  15: 250159.873 ops/s
# Warmup Iteration  16: 250769.401 ops/s
# Warmup Iteration  17: 247394.030 ops/s
# Warmup Iteration  18: 249026.981 ops/s
# Warmup Iteration  19: 249745.488 ops/s
# Warmup Iteration  20: 249102.516 ops/s
# Warmup Iteration  21: 249438.609 ops/s
# Warmup Iteration  22: 249731.669 ops/s
# Warmup Iteration  23: 250214.646 ops/s
# Warmup Iteration  24: 249892.364 ops/s
# Warmup Iteration  25: 250009.729 ops/s
# Warmup Iteration  26: 250461.587 ops/s
# Warmup Iteration  27: 250861.922 ops/s
# Warmup Iteration  28: 249298.648 ops/s
# Warmup Iteration  29: 248476.973 ops/s
# Warmup Iteration  30: 249379.850 ops/s
Iteration   1: 250369.251 ops/s
Iteration   2: 248888.780 ops/s
Iteration   3: 248884.199 ops/s
Iteration   4: 248571.064 ops/s
Iteration   5: 248304.793 ops/s
Iteration   6: 251054.686 ops/s
Iteration   7: 250268.487 ops/s
Iteration   8: 249291.472 ops/s
Iteration   9: 250502.690 ops/s
Iteration  10: 248494.751 ops/s
Iteration  11: 249582.881 ops/s
Iteration  12: 248233.096 ops/s
Iteration  13: 249801.716 ops/s
Iteration  14: 251145.679 ops/s
Iteration  15: 249229.396 ops/s
Iteration  16: 250229.008 ops/s
Iteration  17: 248718.294 ops/s
Iteration  18: 249550.635 ops/s
Iteration  19: 248738.397 ops/s
Iteration  20: 249653.207 ops/s
Iteration  21: 250795.775 ops/s
Iteration  22: 249358.117 ops/s
Iteration  23: 248304.203 ops/s
Iteration  24: 250898.417 ops/s
Iteration  25: 251527.405 ops/s
Iteration  26: 248552.174 ops/s
Iteration  27: 250035.936 ops/s
Iteration  28: 249776.978 ops/s
Iteration  29: 251006.831 ops/s
Iteration  30: 250058.448 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneCollection":
  249660.892 ±(99.9%) 648.983 ops/s [Average]
  (min, avg, max) = (248233.096, 249660.892, 251527.405), stdev = 971.367
  CI (99.9%): [249011.910, 250309.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  249660.892 ± 648.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131292.307 ops/s
# Warmup Iteration   2: 168253.564 ops/s
# Warmup Iteration   3: 214791.089 ops/s
# Warmup Iteration   4: 213455.938 ops/s
# Warmup Iteration   5: 214431.099 ops/s
# Warmup Iteration   6: 215999.181 ops/s
# Warmup Iteration   7: 215538.588 ops/s
# Warmup Iteration   8: 215093.432 ops/s
# Warmup Iteration   9: 180216.939 ops/s
# Warmup Iteration  10: 215629.198 ops/s
# Warmup Iteration  11: 216549.817 ops/s
# Warmup Iteration  12: 216567.232 ops/s
# Warmup Iteration  13: 216496.773 ops/s
# Warmup Iteration  14: 215992.039 ops/s
# Warmup Iteration  15: 216129.284 ops/s
# Warmup Iteration  16: 216331.093 ops/s
# Warmup Iteration  17: 215117.735 ops/s
# Warmup Iteration  18: 216376.742 ops/s
# Warmup Iteration  19: 215327.549 ops/s
# Warmup Iteration  20: 215760.680 ops/s
# Warmup Iteration  21: 216839.186 ops/s
# Warmup Iteration  22: 215403.861 ops/s
# Warmup Iteration  23: 216111.192 ops/s
# Warmup Iteration  24: 216282.707 ops/s
# Warmup Iteration  25: 216601.248 ops/s
# Warmup Iteration  26: 216432.024 ops/s
# Warmup Iteration  27: 216200.753 ops/s
# Warmup Iteration  28: 216027.906 ops/s
# Warmup Iteration  29: 215868.785 ops/s
# Warmup Iteration  30: 215792.354 ops/s
Iteration   1: 216213.468 ops/s
Iteration   2: 215494.047 ops/s
Iteration   3: 215971.961 ops/s
Iteration   4: 215760.441 ops/s
Iteration   5: 215839.767 ops/s
Iteration   6: 216086.929 ops/s
Iteration   7: 216169.455 ops/s
Iteration   8: 215323.740 ops/s
Iteration   9: 216151.217 ops/s
Iteration  10: 216280.654 ops/s
Iteration  11: 218174.269 ops/s
Iteration  12: 216957.697 ops/s
Iteration  13: 215724.203 ops/s
Iteration  14: 216118.297 ops/s
Iteration  15: 215536.510 ops/s
Iteration  16: 217696.148 ops/s
Iteration  17: 216257.277 ops/s
Iteration  18: 215272.063 ops/s
Iteration  19: 216688.872 ops/s
Iteration  20: 216936.472 ops/s
Iteration  21: 216673.003 ops/s
Iteration  22: 216316.822 ops/s
Iteration  23: 217424.652 ops/s
Iteration  24: 216385.883 ops/s
Iteration  25: 216715.478 ops/s
Iteration  26: 216674.188 ops/s
Iteration  27: 216932.299 ops/s
Iteration  28: 216646.642 ops/s
Iteration  29: 216286.077 ops/s
Iteration  30: 214887.467 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_containsNoneIterable":
  216319.867 ±(99.9%) 480.350 ops/s [Average]
  (min, avg, max) = (214887.467, 216319.867, 218174.269), stdev = 718.965
  CI (99.9%): [215839.517, 216800.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  216319.867 ± 480.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_corresponds$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_corresponds

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 798375.081 ops/s
# Warmup Iteration   2: 1145082.392 ops/s
# Warmup Iteration   3: 1384753.935 ops/s
# Warmup Iteration   4: 1371813.166 ops/s
# Warmup Iteration   5: 1384065.358 ops/s
# Warmup Iteration   6: 1381559.499 ops/s
# Warmup Iteration   7: 1197611.587 ops/s
# Warmup Iteration   8: 1337001.654 ops/s
# Warmup Iteration   9: 1385377.919 ops/s
# Warmup Iteration  10: 1381059.433 ops/s
# Warmup Iteration  11: 1386589.853 ops/s
# Warmup Iteration  12: 1382838.035 ops/s
# Warmup Iteration  13: 1387282.977 ops/s
# Warmup Iteration  14: 1379366.353 ops/s
# Warmup Iteration  15: 1386762.408 ops/s
# Warmup Iteration  16: 1388533.023 ops/s
# Warmup Iteration  17: 1383901.024 ops/s
# Warmup Iteration  18: 1386092.949 ops/s
# Warmup Iteration  19: 1384502.613 ops/s
# Warmup Iteration  20: 1377524.242 ops/s
# Warmup Iteration  21: 1377008.849 ops/s
# Warmup Iteration  22: 1379265.500 ops/s
# Warmup Iteration  23: 1387715.741 ops/s
# Warmup Iteration  24: 1383577.877 ops/s
# Warmup Iteration  25: 1383096.885 ops/s
# Warmup Iteration  26: 1380801.262 ops/s
# Warmup Iteration  27: 1377784.216 ops/s
# Warmup Iteration  28: 1379587.329 ops/s
# Warmup Iteration  29: 1388806.804 ops/s
# Warmup Iteration  30: 1385530.069 ops/s
Iteration   1: 1382106.122 ops/s
Iteration   2: 1383819.139 ops/s
Iteration   3: 1374672.041 ops/s
Iteration   4: 1382257.351 ops/s
Iteration   5: 1385553.575 ops/s
Iteration   6: 1387429.290 ops/s
Iteration   7: 1388364.598 ops/s
Iteration   8: 1376055.164 ops/s
Iteration   9: 1385745.832 ops/s
Iteration  10: 1381566.224 ops/s
Iteration  11: 1376893.416 ops/s
Iteration  12: 1379052.893 ops/s
Iteration  13: 1382293.591 ops/s
Iteration  14: 1383823.554 ops/s
Iteration  15: 1389412.625 ops/s
Iteration  16: 1394174.151 ops/s
Iteration  17: 1383348.275 ops/s
Iteration  18: 1389981.378 ops/s
Iteration  19: 1391722.535 ops/s
Iteration  20: 1386577.017 ops/s
Iteration  21: 1374286.528 ops/s
Iteration  22: 1382313.622 ops/s
Iteration  23: 1386018.962 ops/s
Iteration  24: 1388540.045 ops/s
Iteration  25: 1384249.244 ops/s
Iteration  26: 1385645.509 ops/s
Iteration  27: 1387816.224 ops/s
Iteration  28: 1386558.333 ops/s
Iteration  29: 1388003.380 ops/s
Iteration  30: 1389397.554 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_corresponds":
  1384589.272 ±(99.9%) 3265.298 ops/s [Average]
  (min, avg, max) = (1374286.528, 1384589.272, 1394174.151), stdev = 4887.345
  CI (99.9%): [1381323.974, 1387854.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_corresponds  thrpt   30  1384589.272 ± 3265.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10947979.274 ops/s
# Warmup Iteration   2: 23573066.051 ops/s
# Warmup Iteration   3: 19580398.881 ops/s
# Warmup Iteration   4: 23154227.328 ops/s
# Warmup Iteration   5: 23082128.135 ops/s
# Warmup Iteration   6: 23122524.632 ops/s
# Warmup Iteration   7: 23095180.162 ops/s
# Warmup Iteration   8: 23203655.727 ops/s
# Warmup Iteration   9: 23083183.092 ops/s
# Warmup Iteration  10: 23022656.275 ops/s
# Warmup Iteration  11: 23131914.310 ops/s
# Warmup Iteration  12: 23140795.066 ops/s
# Warmup Iteration  13: 23092962.029 ops/s
# Warmup Iteration  14: 23151604.823 ops/s
# Warmup Iteration  15: 23179331.956 ops/s
# Warmup Iteration  16: 23197973.410 ops/s
# Warmup Iteration  17: 23062335.799 ops/s
# Warmup Iteration  18: 23217034.018 ops/s
# Warmup Iteration  19: 22869373.709 ops/s
# Warmup Iteration  20: 22875512.526 ops/s
# Warmup Iteration  21: 23052289.087 ops/s
# Warmup Iteration  22: 23134318.104 ops/s
# Warmup Iteration  23: 23132727.247 ops/s
# Warmup Iteration  24: 23110664.019 ops/s
# Warmup Iteration  25: 23135392.840 ops/s
# Warmup Iteration  26: 23090990.490 ops/s
# Warmup Iteration  27: 23008501.312 ops/s
# Warmup Iteration  28: 22953857.919 ops/s
# Warmup Iteration  29: 23062681.277 ops/s
# Warmup Iteration  30: 23111375.914 ops/s
Iteration   1: 23266286.535 ops/s
Iteration   2: 23110678.914 ops/s
Iteration   3: 23256447.658 ops/s
Iteration   4: 23082272.563 ops/s
Iteration   5: 23175630.315 ops/s
Iteration   6: 23159389.471 ops/s
Iteration   7: 23290246.233 ops/s
Iteration   8: 23159853.441 ops/s
Iteration   9: 22908820.745 ops/s
Iteration  10: 23120096.800 ops/s
Iteration  11: 23144326.914 ops/s
Iteration  12: 23176173.961 ops/s
Iteration  13: 23187298.320 ops/s
Iteration  14: 23224820.404 ops/s
Iteration  15: 23187468.339 ops/s
Iteration  16: 23209840.648 ops/s
Iteration  17: 22935134.609 ops/s
Iteration  18: 23249065.678 ops/s
Iteration  19: 22998669.968 ops/s
Iteration  20: 23105006.894 ops/s
Iteration  21: 23265537.492 ops/s
Iteration  22: 23095848.043 ops/s
Iteration  23: 23248208.906 ops/s
Iteration  24: 23086367.545 ops/s
Iteration  25: 23212718.144 ops/s
Iteration  26: 23159480.839 ops/s
Iteration  27: 23092666.483 ops/s
Iteration  28: 22878138.677 ops/s
Iteration  29: 22940527.329 ops/s
Iteration  30: 22538816.335 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_count":
  23115527.940 ±(99.9%) 103587.325 ops/s [Average]
  (min, avg, max) = (22538816.335, 23115527.940, 23290246.233), stdev = 155044.643
  CI (99.9%): [23011940.615, 23219115.265] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_count  thrpt   30  23115527.940 ± 103587.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1866453.029 ops/s
# Warmup Iteration   2: 3431504.028 ops/s
# Warmup Iteration   3: 3945644.007 ops/s
# Warmup Iteration   4: 3956670.872 ops/s
# Warmup Iteration   5: 3994801.335 ops/s
# Warmup Iteration   6: 3327577.283 ops/s
# Warmup Iteration   7: 4015297.355 ops/s
# Warmup Iteration   8: 4025934.900 ops/s
# Warmup Iteration   9: 4015519.277 ops/s
# Warmup Iteration  10: 4027128.978 ops/s
# Warmup Iteration  11: 4029356.967 ops/s
# Warmup Iteration  12: 4040074.307 ops/s
# Warmup Iteration  13: 4033426.421 ops/s
# Warmup Iteration  14: 4040217.935 ops/s
# Warmup Iteration  15: 4023808.373 ops/s
# Warmup Iteration  16: 4038018.520 ops/s
# Warmup Iteration  17: 4018118.944 ops/s
# Warmup Iteration  18: 4036650.801 ops/s
# Warmup Iteration  19: 4029286.933 ops/s
# Warmup Iteration  20: 4036727.063 ops/s
# Warmup Iteration  21: 4017173.558 ops/s
# Warmup Iteration  22: 4021141.292 ops/s
# Warmup Iteration  23: 4029042.913 ops/s
# Warmup Iteration  24: 4048767.711 ops/s
# Warmup Iteration  25: 4030694.523 ops/s
# Warmup Iteration  26: 4024891.007 ops/s
# Warmup Iteration  27: 4012415.592 ops/s
# Warmup Iteration  28: 4038348.503 ops/s
# Warmup Iteration  29: 4030785.964 ops/s
# Warmup Iteration  30: 4026111.920 ops/s
Iteration   1: 4051949.599 ops/s
Iteration   2: 4038457.734 ops/s
Iteration   3: 4025161.594 ops/s
Iteration   4: 4028822.043 ops/s
Iteration   5: 4009162.575 ops/s
Iteration   6: 4002647.529 ops/s
Iteration   7: 4011594.157 ops/s
Iteration   8: 4039909.946 ops/s
Iteration   9: 4011563.330 ops/s
Iteration  10: 4031523.160 ops/s
Iteration  11: 4045320.924 ops/s
Iteration  12: 4012705.463 ops/s
Iteration  13: 4023879.974 ops/s
Iteration  14: 4028319.989 ops/s
Iteration  15: 4019576.755 ops/s
Iteration  16: 4046817.396 ops/s
Iteration  17: 4036009.516 ops/s
Iteration  18: 4047950.041 ops/s
Iteration  19: 4029315.061 ops/s
Iteration  20: 4034541.727 ops/s
Iteration  21: 4029245.858 ops/s
Iteration  22: 4043711.182 ops/s
Iteration  23: 4037154.633 ops/s
Iteration  24: 4045512.664 ops/s
Iteration  25: 4016276.122 ops/s
Iteration  26: 4035066.342 ops/s
Iteration  27: 4032646.724 ops/s
Iteration  28: 4038293.469 ops/s
Iteration  29: 4022029.699 ops/s
Iteration  30: 4027596.114 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countBy":
  4030092.044 ±(99.9%) 8527.118 ops/s [Average]
  (min, avg, max) = (4002647.529, 4030092.044, 4051949.599), stdev = 12762.990
  CI (99.9%): [4021564.926, 4038619.162] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_countBy  thrpt   30  4030092.044 ± 8527.118  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 284743.439 ops/s
# Warmup Iteration   2: 471094.064 ops/s
# Warmup Iteration   3: 556980.931 ops/s
# Warmup Iteration   4: 561173.714 ops/s
# Warmup Iteration   5: 560781.872 ops/s
# Warmup Iteration   6: 494934.599 ops/s
# Warmup Iteration   7: 528068.188 ops/s
# Warmup Iteration   8: 563298.705 ops/s
# Warmup Iteration   9: 562842.487 ops/s
# Warmup Iteration  10: 563844.883 ops/s
# Warmup Iteration  11: 562355.973 ops/s
# Warmup Iteration  12: 562965.556 ops/s
# Warmup Iteration  13: 562879.358 ops/s
# Warmup Iteration  14: 561566.431 ops/s
# Warmup Iteration  15: 561708.634 ops/s
# Warmup Iteration  16: 561652.991 ops/s
# Warmup Iteration  17: 562332.611 ops/s
# Warmup Iteration  18: 560738.042 ops/s
# Warmup Iteration  19: 561886.593 ops/s
# Warmup Iteration  20: 561810.259 ops/s
# Warmup Iteration  21: 559721.072 ops/s
# Warmup Iteration  22: 560328.633 ops/s
# Warmup Iteration  23: 561334.608 ops/s
# Warmup Iteration  24: 561120.991 ops/s
# Warmup Iteration  25: 561708.818 ops/s
# Warmup Iteration  26: 560977.790 ops/s
# Warmup Iteration  27: 563037.291 ops/s
# Warmup Iteration  28: 563005.898 ops/s
# Warmup Iteration  29: 562572.123 ops/s
# Warmup Iteration  30: 562249.140 ops/s
Iteration   1: 559565.440 ops/s
Iteration   2: 562810.208 ops/s
Iteration   3: 559977.596 ops/s
Iteration   4: 560612.873 ops/s
Iteration   5: 561086.962 ops/s
Iteration   6: 561524.995 ops/s
Iteration   7: 559086.131 ops/s
Iteration   8: 562493.524 ops/s
Iteration   9: 560272.328 ops/s
Iteration  10: 562323.885 ops/s
Iteration  11: 562013.590 ops/s
Iteration  12: 561950.481 ops/s
Iteration  13: 563796.284 ops/s
Iteration  14: 560498.528 ops/s
Iteration  15: 563440.038 ops/s
Iteration  16: 562143.462 ops/s
Iteration  17: 564152.727 ops/s
Iteration  18: 564684.329 ops/s
Iteration  19: 560005.279 ops/s
Iteration  20: 562285.205 ops/s
Iteration  21: 561150.913 ops/s
Iteration  22: 562341.967 ops/s
Iteration  23: 563677.930 ops/s
Iteration  24: 561999.317 ops/s
Iteration  25: 561051.087 ops/s
Iteration  26: 560054.653 ops/s
Iteration  27: 559236.764 ops/s
Iteration  28: 563237.697 ops/s
Iteration  29: 561475.414 ops/s
Iteration  30: 562321.004 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByEach":
  561709.020 ±(99.9%) 994.868 ops/s [Average]
  (min, avg, max) = (559086.131, 561709.020, 564684.329), stdev = 1489.072
  CI (99.9%): [560714.152, 562703.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_countByEach  thrpt   30  561709.020 ± 994.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1878848.723 ops/s
# Warmup Iteration   2: 3328479.964 ops/s
# Warmup Iteration   3: 3765973.477 ops/s
# Warmup Iteration   4: 3800719.399 ops/s
# Warmup Iteration   5: 3806412.887 ops/s
# Warmup Iteration   6: 3098269.802 ops/s
# Warmup Iteration   7: 3812506.899 ops/s
# Warmup Iteration   8: 3810938.281 ops/s
# Warmup Iteration   9: 3802884.935 ops/s
# Warmup Iteration  10: 3781629.258 ops/s
# Warmup Iteration  11: 3799609.980 ops/s
# Warmup Iteration  12: 3803213.278 ops/s
# Warmup Iteration  13: 3809876.001 ops/s
# Warmup Iteration  14: 3811517.760 ops/s
# Warmup Iteration  15: 3797539.314 ops/s
# Warmup Iteration  16: 3790790.549 ops/s
# Warmup Iteration  17: 3805612.050 ops/s
# Warmup Iteration  18: 3792154.883 ops/s
# Warmup Iteration  19: 3797230.591 ops/s
# Warmup Iteration  20: 3798051.380 ops/s
# Warmup Iteration  21: 3810446.338 ops/s
# Warmup Iteration  22: 3798599.202 ops/s
# Warmup Iteration  23: 3804870.700 ops/s
# Warmup Iteration  24: 3811983.246 ops/s
# Warmup Iteration  25: 3818589.920 ops/s
# Warmup Iteration  26: 3771432.875 ops/s
# Warmup Iteration  27: 3815698.678 ops/s
# Warmup Iteration  28: 3802061.096 ops/s
# Warmup Iteration  29: 3797567.449 ops/s
# Warmup Iteration  30: 3809110.070 ops/s
Iteration   1: 3822621.394 ops/s
Iteration   2: 3782008.898 ops/s
Iteration   3: 3789413.855 ops/s
Iteration   4: 3786880.819 ops/s
Iteration   5: 3780080.885 ops/s
Iteration   6: 3785570.832 ops/s
Iteration   7: 3796695.502 ops/s
Iteration   8: 3811539.564 ops/s
Iteration   9: 3786336.221 ops/s
Iteration  10: 3811447.269 ops/s
Iteration  11: 3797308.006 ops/s
Iteration  12: 3787560.398 ops/s
Iteration  13: 3791408.429 ops/s
Iteration  14: 3750222.925 ops/s
Iteration  15: 3794178.974 ops/s
Iteration  16: 3763249.289 ops/s
Iteration  17: 3801813.430 ops/s
Iteration  18: 3779055.748 ops/s
Iteration  19: 3788065.540 ops/s
Iteration  20: 3797406.105 ops/s
Iteration  21: 3809634.414 ops/s
Iteration  22: 3805013.682 ops/s
Iteration  23: 3789695.527 ops/s
Iteration  24: 3799051.675 ops/s
Iteration  25: 3793738.621 ops/s
Iteration  26: 3793452.701 ops/s
Iteration  27: 3802789.971 ops/s
Iteration  28: 3799303.159 ops/s
Iteration  29: 3803631.335 ops/s
Iteration  30: 3803092.761 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countByWith":
  3793408.931 ±(99.9%) 9538.058 ops/s [Average]
  (min, avg, max) = (3750222.925, 3793408.931, 3822621.394), stdev = 14276.117
  CI (99.9%): [3783870.873, 3802946.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_countByWith  thrpt   30  3793408.931 ± 9538.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16161093.166 ops/s
# Warmup Iteration   2: 31828862.848 ops/s
# Warmup Iteration   3: 27067761.410 ops/s
# Warmup Iteration   4: 31986435.474 ops/s
# Warmup Iteration   5: 31871494.455 ops/s
# Warmup Iteration   6: 31798972.195 ops/s
# Warmup Iteration   7: 31559027.846 ops/s
# Warmup Iteration   8: 31361135.685 ops/s
# Warmup Iteration   9: 31513661.862 ops/s
# Warmup Iteration  10: 31388860.677 ops/s
# Warmup Iteration  11: 31569817.402 ops/s
# Warmup Iteration  12: 31365578.290 ops/s
# Warmup Iteration  13: 31203167.284 ops/s
# Warmup Iteration  14: 31142161.733 ops/s
# Warmup Iteration  15: 31496309.519 ops/s
# Warmup Iteration  16: 31683611.107 ops/s
# Warmup Iteration  17: 31486059.559 ops/s
# Warmup Iteration  18: 31497338.565 ops/s
# Warmup Iteration  19: 31533991.037 ops/s
# Warmup Iteration  20: 31758713.693 ops/s
# Warmup Iteration  21: 31570666.511 ops/s
# Warmup Iteration  22: 31576667.975 ops/s
# Warmup Iteration  23: 31436741.086 ops/s
# Warmup Iteration  24: 31554608.355 ops/s
# Warmup Iteration  25: 31467153.728 ops/s
# Warmup Iteration  26: 31731614.652 ops/s
# Warmup Iteration  27: 31549935.615 ops/s
# Warmup Iteration  28: 31650480.259 ops/s
# Warmup Iteration  29: 31686961.264 ops/s
# Warmup Iteration  30: 31589252.705 ops/s
Iteration   1: 31504828.283 ops/s
Iteration   2: 31218704.910 ops/s
Iteration   3: 31588696.082 ops/s
Iteration   4: 31192237.146 ops/s
Iteration   5: 31285933.680 ops/s
Iteration   6: 31164704.905 ops/s
Iteration   7: 31272736.493 ops/s
Iteration   8: 31274516.894 ops/s
Iteration   9: 30930282.325 ops/s
Iteration  10: 31177933.620 ops/s
Iteration  11: 31127545.876 ops/s
Iteration  12: 31296998.616 ops/s
Iteration  13: 31396442.366 ops/s
Iteration  14: 31568163.035 ops/s
Iteration  15: 31252001.036 ops/s
Iteration  16: 31291272.125 ops/s
Iteration  17: 31350933.787 ops/s
Iteration  18: 31239052.910 ops/s
Iteration  19: 31078930.556 ops/s
Iteration  20: 30978375.601 ops/s
Iteration  21: 31010068.040 ops/s
Iteration  22: 31289886.063 ops/s
Iteration  23: 31314718.100 ops/s
Iteration  24: 31410778.029 ops/s
Iteration  25: 31207964.624 ops/s
Iteration  26: 31238628.722 ops/s
Iteration  27: 31445042.922 ops/s
Iteration  28: 31395270.436 ops/s
Iteration  29: 31570219.890 ops/s
Iteration  30: 31344793.779 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_countWith":
  31280588.695 ±(99.9%) 110250.609 ops/s [Average]
  (min, avg, max) = (30930282.325, 31280588.695, 31588696.082), stdev = 165017.934
  CI (99.9%): [31170338.086, 31390839.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_countWith  thrpt   30  31280588.695 ± 110250.609  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10971914.337 ops/s
# Warmup Iteration   2: 22664823.382 ops/s
# Warmup Iteration   3: 19607070.818 ops/s
# Warmup Iteration   4: 22888160.713 ops/s
# Warmup Iteration   5: 22755039.716 ops/s
# Warmup Iteration   6: 22761783.702 ops/s
# Warmup Iteration   7: 23021640.971 ops/s
# Warmup Iteration   8: 22991503.194 ops/s
# Warmup Iteration   9: 23083117.153 ops/s
# Warmup Iteration  10: 22900707.518 ops/s
# Warmup Iteration  11: 22978653.136 ops/s
# Warmup Iteration  12: 22794175.266 ops/s
# Warmup Iteration  13: 23089965.055 ops/s
# Warmup Iteration  14: 22805777.522 ops/s
# Warmup Iteration  15: 22966861.006 ops/s
# Warmup Iteration  16: 23061507.489 ops/s
# Warmup Iteration  17: 23028380.182 ops/s
# Warmup Iteration  18: 22962759.556 ops/s
# Warmup Iteration  19: 23212907.869 ops/s
# Warmup Iteration  20: 23049921.203 ops/s
# Warmup Iteration  21: 23001057.911 ops/s
# Warmup Iteration  22: 23171639.953 ops/s
# Warmup Iteration  23: 23213012.792 ops/s
# Warmup Iteration  24: 23137282.613 ops/s
# Warmup Iteration  25: 23177956.643 ops/s
# Warmup Iteration  26: 23133006.758 ops/s
# Warmup Iteration  27: 23082754.165 ops/s
# Warmup Iteration  28: 23153617.337 ops/s
# Warmup Iteration  29: 22927198.083 ops/s
# Warmup Iteration  30: 23073448.949 ops/s
Iteration   1: 22881102.855 ops/s
Iteration   2: 22884530.644 ops/s
Iteration   3: 23018406.067 ops/s
Iteration   4: 23071580.512 ops/s
Iteration   5: 23116419.022 ops/s
Iteration   6: 23272527.087 ops/s
Iteration   7: 23104304.096 ops/s
Iteration   8: 23126011.293 ops/s
Iteration   9: 23089415.956 ops/s
Iteration  10: 23107776.128 ops/s
Iteration  11: 23245220.696 ops/s
Iteration  12: 23248172.431 ops/s
Iteration  13: 23164466.192 ops/s
Iteration  14: 23031505.194 ops/s
Iteration  15: 23323832.003 ops/s
Iteration  16: 23166944.859 ops/s
Iteration  17: 23076714.377 ops/s
Iteration  18: 23228721.617 ops/s
Iteration  19: 23091423.078 ops/s
Iteration  20: 23212620.818 ops/s
Iteration  21: 23075730.007 ops/s
Iteration  22: 23171692.172 ops/s
Iteration  23: 23113262.865 ops/s
Iteration  24: 23086203.181 ops/s
Iteration  25: 23041266.216 ops/s
Iteration  26: 23068526.390 ops/s
Iteration  27: 23138875.617 ops/s
Iteration  28: 23093854.821 ops/s
Iteration  29: 22993228.650 ops/s
Iteration  30: 23200587.699 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detect":
  23114830.751 ±(99.9%) 67505.434 ops/s [Average]
  (min, avg, max) = (22881102.855, 23114830.751, 23323832.003), stdev = 101038.963
  CI (99.9%): [23047325.318, 23182336.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detect  thrpt   30  23114830.751 ± 67505.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11099040.346 ops/s
# Warmup Iteration   2: 22508644.208 ops/s
# Warmup Iteration   3: 19495658.089 ops/s
# Warmup Iteration   4: 22931670.567 ops/s
# Warmup Iteration   5: 22809419.850 ops/s
# Warmup Iteration   6: 22846881.802 ops/s
# Warmup Iteration   7: 22982938.497 ops/s
# Warmup Iteration   8: 22984174.250 ops/s
# Warmup Iteration   9: 22970527.011 ops/s
# Warmup Iteration  10: 22915752.681 ops/s
# Warmup Iteration  11: 23015213.330 ops/s
# Warmup Iteration  12: 22966102.435 ops/s
# Warmup Iteration  13: 23009739.326 ops/s
# Warmup Iteration  14: 22972735.122 ops/s
# Warmup Iteration  15: 22748867.600 ops/s
# Warmup Iteration  16: 22770355.039 ops/s
# Warmup Iteration  17: 22866587.009 ops/s
# Warmup Iteration  18: 23015585.426 ops/s
# Warmup Iteration  19: 22890791.194 ops/s
# Warmup Iteration  20: 23037181.828 ops/s
# Warmup Iteration  21: 22946359.780 ops/s
# Warmup Iteration  22: 22851848.530 ops/s
# Warmup Iteration  23: 22963914.772 ops/s
# Warmup Iteration  24: 23006293.682 ops/s
# Warmup Iteration  25: 22992347.162 ops/s
# Warmup Iteration  26: 22992888.058 ops/s
# Warmup Iteration  27: 22939056.914 ops/s
# Warmup Iteration  28: 22960049.600 ops/s
# Warmup Iteration  29: 22856990.840 ops/s
# Warmup Iteration  30: 22934529.900 ops/s
Iteration   1: 22848114.591 ops/s
Iteration   2: 22821206.429 ops/s
Iteration   3: 22963724.011 ops/s
Iteration   4: 23000988.341 ops/s
Iteration   5: 23074697.705 ops/s
Iteration   6: 23000654.696 ops/s
Iteration   7: 22832452.269 ops/s
Iteration   8: 22913969.142 ops/s
Iteration   9: 22921302.904 ops/s
Iteration  10: 22981309.033 ops/s
Iteration  11: 22891151.397 ops/s
Iteration  12: 22975960.816 ops/s
Iteration  13: 22938562.830 ops/s
Iteration  14: 22860036.042 ops/s
Iteration  15: 22959576.332 ops/s
Iteration  16: 22934348.677 ops/s
Iteration  17: 23007904.588 ops/s
Iteration  18: 22734205.419 ops/s
Iteration  19: 23098362.078 ops/s
Iteration  20: 22985294.150 ops/s
Iteration  21: 22778686.377 ops/s
Iteration  22: 22897917.806 ops/s
Iteration  23: 22951977.544 ops/s
Iteration  24: 22778308.064 ops/s
Iteration  25: 22973527.295 ops/s
Iteration  26: 22738756.386 ops/s
Iteration  27: 22804320.453 ops/s
Iteration  28: 22924266.549 ops/s
Iteration  29: 22958562.959 ops/s
Iteration  30: 22783471.259 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIfNone":
  22911120.538 ±(99.9%) 63471.168 ops/s [Average]
  (min, avg, max) = (22734205.419, 22911120.538, 23098362.078), stdev = 95000.664
  CI (99.9%): [22847649.370, 22974591.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectIfNone  thrpt   30  22911120.538 ± 63471.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4231267.682 ops/s
# Warmup Iteration   2: 9007306.587 ops/s
# Warmup Iteration   3: 7643457.650 ops/s
# Warmup Iteration   4: 9023856.958 ops/s
# Warmup Iteration   5: 9054083.264 ops/s
# Warmup Iteration   6: 9079712.299 ops/s
# Warmup Iteration   7: 9110485.119 ops/s
# Warmup Iteration   8: 9077391.122 ops/s
# Warmup Iteration   9: 9092657.894 ops/s
# Warmup Iteration  10: 9051906.103 ops/s
# Warmup Iteration  11: 9015199.656 ops/s
# Warmup Iteration  12: 9056765.611 ops/s
# Warmup Iteration  13: 9039996.181 ops/s
# Warmup Iteration  14: 9069031.881 ops/s
# Warmup Iteration  15: 9090727.465 ops/s
# Warmup Iteration  16: 9066139.892 ops/s
# Warmup Iteration  17: 9116323.227 ops/s
# Warmup Iteration  18: 9130738.233 ops/s
# Warmup Iteration  19: 9123800.094 ops/s
# Warmup Iteration  20: 9098946.260 ops/s
# Warmup Iteration  21: 9070982.725 ops/s
# Warmup Iteration  22: 9072081.275 ops/s
# Warmup Iteration  23: 9126873.902 ops/s
# Warmup Iteration  24: 9120062.763 ops/s
# Warmup Iteration  25: 9119033.939 ops/s
# Warmup Iteration  26: 9059487.702 ops/s
# Warmup Iteration  27: 9110758.817 ops/s
# Warmup Iteration  28: 9025243.503 ops/s
# Warmup Iteration  29: 9031840.895 ops/s
# Warmup Iteration  30: 8991737.540 ops/s
Iteration   1: 9005020.538 ops/s
Iteration   2: 9050574.674 ops/s
Iteration   3: 9035086.826 ops/s
Iteration   4: 9061689.905 ops/s
Iteration   5: 9037521.509 ops/s
Iteration   6: 9045837.919 ops/s
Iteration   7: 9034561.802 ops/s
Iteration   8: 9019639.172 ops/s
Iteration   9: 9078422.777 ops/s
Iteration  10: 9059341.236 ops/s
Iteration  11: 9132020.118 ops/s
Iteration  12: 9035335.450 ops/s
Iteration  13: 9071283.273 ops/s
Iteration  14: 9047612.115 ops/s
Iteration  15: 9078327.473 ops/s
Iteration  16: 9052165.826 ops/s
Iteration  17: 9099548.607 ops/s
Iteration  18: 9060609.758 ops/s
Iteration  19: 9093428.319 ops/s
Iteration  20: 9100491.502 ops/s
Iteration  21: 9010372.347 ops/s
Iteration  22: 9097545.424 ops/s
Iteration  23: 9091850.952 ops/s
Iteration  24: 9086161.557 ops/s
Iteration  25: 9079508.357 ops/s
Iteration  26: 9122520.911 ops/s
Iteration  27: 9142703.557 ops/s
Iteration  28: 9090781.960 ops/s
Iteration  29: 9160328.371 ops/s
Iteration  30: 9126256.649 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectIndex":
  9073551.630 ±(99.9%) 26155.834 ops/s [Average]
  (min, avg, max) = (9005020.538, 9073551.630, 9160328.371), stdev = 39148.824
  CI (99.9%): [9047395.795, 9099707.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectIndex  thrpt   30  9073551.630 ± 26155.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectLastIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectLastIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4088229.999 ops/s
# Warmup Iteration   2: 8809012.554 ops/s
# Warmup Iteration   3: 7386085.757 ops/s
# Warmup Iteration   4: 8814741.226 ops/s
# Warmup Iteration   5: 8775599.748 ops/s
# Warmup Iteration   6: 8802115.531 ops/s
# Warmup Iteration   7: 8757426.027 ops/s
# Warmup Iteration   8: 8752407.439 ops/s
# Warmup Iteration   9: 8723914.737 ops/s
# Warmup Iteration  10: 8774385.107 ops/s
# Warmup Iteration  11: 8792838.596 ops/s
# Warmup Iteration  12: 8810039.288 ops/s
# Warmup Iteration  13: 8762759.887 ops/s
# Warmup Iteration  14: 8754072.423 ops/s
# Warmup Iteration  15: 8707075.920 ops/s
# Warmup Iteration  16: 8741210.240 ops/s
# Warmup Iteration  17: 8799784.987 ops/s
# Warmup Iteration  18: 8803311.179 ops/s
# Warmup Iteration  19: 8814220.331 ops/s
# Warmup Iteration  20: 8756667.022 ops/s
# Warmup Iteration  21: 8844337.517 ops/s
# Warmup Iteration  22: 8823236.131 ops/s
# Warmup Iteration  23: 8816963.886 ops/s
# Warmup Iteration  24: 8865376.716 ops/s
# Warmup Iteration  25: 8802051.430 ops/s
# Warmup Iteration  26: 8793989.067 ops/s
# Warmup Iteration  27: 8817343.564 ops/s
# Warmup Iteration  28: 8799038.725 ops/s
# Warmup Iteration  29: 8802464.010 ops/s
# Warmup Iteration  30: 8835510.098 ops/s
Iteration   1: 8817174.395 ops/s
Iteration   2: 8871175.615 ops/s
Iteration   3: 8859972.988 ops/s
Iteration   4: 8830397.450 ops/s
Iteration   5: 8835439.843 ops/s
Iteration   6: 8837527.886 ops/s
Iteration   7: 8822062.250 ops/s
Iteration   8: 8837951.909 ops/s
Iteration   9: 8880460.244 ops/s
Iteration  10: 8797122.406 ops/s
Iteration  11: 8785827.494 ops/s
Iteration  12: 8883430.598 ops/s
Iteration  13: 8807484.883 ops/s
Iteration  14: 8841556.622 ops/s
Iteration  15: 8902156.471 ops/s
Iteration  16: 8854535.293 ops/s
Iteration  17: 8845099.585 ops/s
Iteration  18: 8887654.814 ops/s
Iteration  19: 8884317.311 ops/s
Iteration  20: 8850447.138 ops/s
Iteration  21: 8764728.297 ops/s
Iteration  22: 8838478.493 ops/s
Iteration  23: 8786681.943 ops/s
Iteration  24: 8796315.489 ops/s
Iteration  25: 8813299.037 ops/s
Iteration  26: 8867393.507 ops/s
Iteration  27: 8823102.264 ops/s
Iteration  28: 8764598.374 ops/s
Iteration  29: 8814394.160 ops/s
Iteration  30: 8797329.986 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectLastIndex":
  8833270.558 ±(99.9%) 24535.252 ops/s [Average]
  (min, avg, max) = (8764598.374, 8833270.558, 8902156.471), stdev = 36723.213
  CI (99.9%): [8808735.306, 8857805.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectLastIndex  thrpt   30  8833270.558 ± 24535.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637734.852 ops/s
# Warmup Iteration   2: 676101.325 ops/s
# Warmup Iteration   3: 928314.293 ops/s
# Warmup Iteration   4: 920916.585 ops/s
# Warmup Iteration   5: 912681.992 ops/s
# Warmup Iteration   6: 925107.253 ops/s
# Warmup Iteration   7: 922002.159 ops/s
# Warmup Iteration   8: 923397.866 ops/s
# Warmup Iteration   9: 927967.131 ops/s
# Warmup Iteration  10: 927248.329 ops/s
# Warmup Iteration  11: 802557.469 ops/s
# Warmup Iteration  12: 888832.088 ops/s
# Warmup Iteration  13: 923609.318 ops/s
# Warmup Iteration  14: 925895.051 ops/s
# Warmup Iteration  15: 926419.371 ops/s
# Warmup Iteration  16: 923287.788 ops/s
# Warmup Iteration  17: 981536.197 ops/s
# Warmup Iteration  18: 976502.182 ops/s
# Warmup Iteration  19: 984625.025 ops/s
# Warmup Iteration  20: 978203.072 ops/s
# Warmup Iteration  21: 979890.660 ops/s
# Warmup Iteration  22: 981332.056 ops/s
# Warmup Iteration  23: 981652.094 ops/s
# Warmup Iteration  24: 985598.094 ops/s
# Warmup Iteration  25: 977178.012 ops/s
# Warmup Iteration  26: 979461.016 ops/s
# Warmup Iteration  27: 983965.602 ops/s
# Warmup Iteration  28: 980646.393 ops/s
# Warmup Iteration  29: 976925.045 ops/s
# Warmup Iteration  30: 980382.158 ops/s
Iteration   1: 979201.285 ops/s
Iteration   2: 982275.977 ops/s
Iteration   3: 977044.771 ops/s
Iteration   4: 977961.005 ops/s
Iteration   5: 979093.246 ops/s
Iteration   6: 983581.050 ops/s
Iteration   7: 987450.295 ops/s
Iteration   8: 986652.103 ops/s
Iteration   9: 985277.811 ops/s
Iteration  10: 978260.632 ops/s
Iteration  11: 982615.300 ops/s
Iteration  12: 985583.349 ops/s
Iteration  13: 982029.681 ops/s
Iteration  14: 972895.406 ops/s
Iteration  15: 978768.209 ops/s
Iteration  16: 985723.055 ops/s
Iteration  17: 978316.850 ops/s
Iteration  18: 976684.315 ops/s
Iteration  19: 979927.648 ops/s
Iteration  20: 978652.513 ops/s
Iteration  21: 977113.344 ops/s
Iteration  22: 973548.894 ops/s
Iteration  23: 981939.481 ops/s
Iteration  24: 977945.326 ops/s
Iteration  25: 980652.144 ops/s
Iteration  26: 976792.507 ops/s
Iteration  27: 982978.047 ops/s
Iteration  28: 976346.717 ops/s
Iteration  29: 980224.872 ops/s
Iteration  30: 976422.406 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectOptional":
  980065.275 ±(99.9%) 2509.385 ops/s [Average]
  (min, avg, max) = (972895.406, 980065.275, 987450.295), stdev = 3755.929
  CI (99.9%): [977555.890, 982574.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectOptional  thrpt   30  980065.275 ± 2509.385  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 17414116.403 ops/s
# Warmup Iteration   2: 34616699.805 ops/s
# Warmup Iteration   3: 29139373.354 ops/s
# Warmup Iteration   4: 34286048.840 ops/s
# Warmup Iteration   5: 34475480.624 ops/s
# Warmup Iteration   6: 34638048.409 ops/s
# Warmup Iteration   7: 34174616.843 ops/s
# Warmup Iteration   8: 34377170.666 ops/s
# Warmup Iteration   9: 34350070.284 ops/s
# Warmup Iteration  10: 34351908.084 ops/s
# Warmup Iteration  11: 34434515.255 ops/s
# Warmup Iteration  12: 34354349.596 ops/s
# Warmup Iteration  13: 33955937.046 ops/s
# Warmup Iteration  14: 34160267.142 ops/s
# Warmup Iteration  15: 34499581.218 ops/s
# Warmup Iteration  16: 34352652.624 ops/s
# Warmup Iteration  17: 34369013.401 ops/s
# Warmup Iteration  18: 34508903.761 ops/s
# Warmup Iteration  19: 34196352.747 ops/s
# Warmup Iteration  20: 34314263.768 ops/s
# Warmup Iteration  21: 34331884.686 ops/s
# Warmup Iteration  22: 34204652.620 ops/s
# Warmup Iteration  23: 34229318.289 ops/s
# Warmup Iteration  24: 34493438.459 ops/s
# Warmup Iteration  25: 34638172.561 ops/s
# Warmup Iteration  26: 34513934.290 ops/s
# Warmup Iteration  27: 34443883.644 ops/s
# Warmup Iteration  28: 34499915.942 ops/s
# Warmup Iteration  29: 34343203.579 ops/s
# Warmup Iteration  30: 34373503.994 ops/s
Iteration   1: 34152613.566 ops/s
Iteration   2: 34205848.372 ops/s
Iteration   3: 34349164.910 ops/s
Iteration   4: 34067365.356 ops/s
Iteration   5: 34460542.719 ops/s
Iteration   6: 34534729.370 ops/s
Iteration   7: 34315221.782 ops/s
Iteration   8: 34426961.103 ops/s
Iteration   9: 34674298.891 ops/s
Iteration  10: 34686458.527 ops/s
Iteration  11: 34705171.714 ops/s
Iteration  12: 34571014.861 ops/s
Iteration  13: 34402201.507 ops/s
Iteration  14: 34551864.396 ops/s
Iteration  15: 34369809.352 ops/s
Iteration  16: 34448847.461 ops/s
Iteration  17: 34536732.757 ops/s
Iteration  18: 34394235.354 ops/s
Iteration  19: 34300030.844 ops/s
Iteration  20: 34514973.954 ops/s
Iteration  21: 34499946.999 ops/s
Iteration  22: 34647613.764 ops/s
Iteration  23: 34408196.045 ops/s
Iteration  24: 34391029.144 ops/s
Iteration  25: 34216511.703 ops/s
Iteration  26: 33915015.714 ops/s
Iteration  27: 34143053.662 ops/s
Iteration  28: 34125857.693 ops/s
Iteration  29: 34574706.856 ops/s
Iteration  30: 34432109.822 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWith":
  34400737.607 ±(99.9%) 130291.046 ops/s [Average]
  (min, avg, max) = (33915015.714, 34400737.607, 34705171.714), stdev = 195013.518
  CI (99.9%): [34270446.561, 34531028.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectWith  thrpt   30  34400737.607 ± 130291.046  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16886595.396 ops/s
# Warmup Iteration   2: 35389434.735 ops/s
# Warmup Iteration   3: 30137734.527 ops/s
# Warmup Iteration   4: 36141278.371 ops/s
# Warmup Iteration   5: 36149656.741 ops/s
# Warmup Iteration   6: 35948175.083 ops/s
# Warmup Iteration   7: 36011273.053 ops/s
# Warmup Iteration   8: 36107136.616 ops/s
# Warmup Iteration   9: 36120566.703 ops/s
# Warmup Iteration  10: 36202154.708 ops/s
# Warmup Iteration  11: 36020780.668 ops/s
# Warmup Iteration  12: 36214063.957 ops/s
# Warmup Iteration  13: 36138214.576 ops/s
# Warmup Iteration  14: 35965147.703 ops/s
# Warmup Iteration  15: 36056725.764 ops/s
# Warmup Iteration  16: 36060461.274 ops/s
# Warmup Iteration  17: 36141427.017 ops/s
# Warmup Iteration  18: 36256114.970 ops/s
# Warmup Iteration  19: 36214655.547 ops/s
# Warmup Iteration  20: 36184871.408 ops/s
# Warmup Iteration  21: 36287182.756 ops/s
# Warmup Iteration  22: 36258400.113 ops/s
# Warmup Iteration  23: 36221895.756 ops/s
# Warmup Iteration  24: 36066240.265 ops/s
# Warmup Iteration  25: 36209261.936 ops/s
# Warmup Iteration  26: 36116768.802 ops/s
# Warmup Iteration  27: 35929782.461 ops/s
# Warmup Iteration  28: 36054690.355 ops/s
# Warmup Iteration  29: 35978951.988 ops/s
# Warmup Iteration  30: 36232966.079 ops/s
Iteration   1: 36142111.945 ops/s
Iteration   2: 35836732.274 ops/s
Iteration   3: 36019014.267 ops/s
Iteration   4: 35994564.187 ops/s
Iteration   5: 36251642.718 ops/s
Iteration   6: 36136848.640 ops/s
Iteration   7: 36189262.342 ops/s
Iteration   8: 36073542.072 ops/s
Iteration   9: 36344767.100 ops/s
Iteration  10: 36434998.034 ops/s
Iteration  11: 36230302.620 ops/s
Iteration  12: 36273145.133 ops/s
Iteration  13: 36236203.098 ops/s
Iteration  14: 36147661.224 ops/s
Iteration  15: 36251739.717 ops/s
Iteration  16: 36211738.300 ops/s
Iteration  17: 36051623.230 ops/s
Iteration  18: 36011459.033 ops/s
Iteration  19: 35890605.607 ops/s
Iteration  20: 36104406.390 ops/s
Iteration  21: 36156471.613 ops/s
Iteration  22: 35926857.935 ops/s
Iteration  23: 36041083.663 ops/s
Iteration  24: 36320267.844 ops/s
Iteration  25: 36292484.337 ops/s
Iteration  26: 36265490.962 ops/s
Iteration  27: 35969621.766 ops/s
Iteration  28: 36225089.350 ops/s
Iteration  29: 36098136.431 ops/s
Iteration  30: 36174889.392 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNone":
  36143425.374 ±(99.9%) 94691.247 ops/s [Average]
  (min, avg, max) = (35836732.274, 36143425.374, 36434998.034), stdev = 141729.411
  CI (99.9%): [36048734.127, 36238116.621] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  36143425.374 ± 94691.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7056578.363 ops/s
# Warmup Iteration   2: 14083977.180 ops/s
# Warmup Iteration   3: 14408428.096 ops/s
# Warmup Iteration   4: 12087665.350 ops/s
# Warmup Iteration   5: 14322780.257 ops/s
# Warmup Iteration   6: 14384867.026 ops/s
# Warmup Iteration   7: 14390901.298 ops/s
# Warmup Iteration   8: 14421382.421 ops/s
# Warmup Iteration   9: 14364366.513 ops/s
# Warmup Iteration  10: 14388158.854 ops/s
# Warmup Iteration  11: 14341152.241 ops/s
# Warmup Iteration  12: 14329591.893 ops/s
# Warmup Iteration  13: 14321837.861 ops/s
# Warmup Iteration  14: 14347162.065 ops/s
# Warmup Iteration  15: 14328344.347 ops/s
# Warmup Iteration  16: 14315238.865 ops/s
# Warmup Iteration  17: 14221220.004 ops/s
# Warmup Iteration  18: 14187749.513 ops/s
# Warmup Iteration  19: 14269128.235 ops/s
# Warmup Iteration  20: 14238694.537 ops/s
# Warmup Iteration  21: 14286333.001 ops/s
# Warmup Iteration  22: 14241052.526 ops/s
# Warmup Iteration  23: 14151756.201 ops/s
# Warmup Iteration  24: 14244929.489 ops/s
# Warmup Iteration  25: 14226638.648 ops/s
# Warmup Iteration  26: 14198004.554 ops/s
# Warmup Iteration  27: 14230162.232 ops/s
# Warmup Iteration  28: 14248565.896 ops/s
# Warmup Iteration  29: 14280137.256 ops/s
# Warmup Iteration  30: 14233099.959 ops/s
Iteration   1: 14287706.868 ops/s
Iteration   2: 14233024.445 ops/s
Iteration   3: 14322072.122 ops/s
Iteration   4: 14286580.117 ops/s
Iteration   5: 14259626.881 ops/s
Iteration   6: 14254710.300 ops/s
Iteration   7: 14239109.868 ops/s
Iteration   8: 14270416.823 ops/s
Iteration   9: 14284247.728 ops/s
Iteration  10: 14265750.454 ops/s
Iteration  11: 14256629.501 ops/s
Iteration  12: 14204615.339 ops/s
Iteration  13: 14275680.181 ops/s
Iteration  14: 14237385.474 ops/s
Iteration  15: 14153658.209 ops/s
Iteration  16: 14225082.417 ops/s
Iteration  17: 14164830.071 ops/s
Iteration  18: 14197346.677 ops/s
Iteration  19: 14152619.902 ops/s
Iteration  20: 14121864.138 ops/s
Iteration  21: 14153641.934 ops/s
Iteration  22: 14165962.252 ops/s
Iteration  23: 14166153.072 ops/s
Iteration  24: 14147088.619 ops/s
Iteration  25: 14102307.174 ops/s
Iteration  26: 14116339.506 ops/s
Iteration  27: 14153901.636 ops/s
Iteration  28: 14065803.548 ops/s
Iteration  29: 14132139.598 ops/s
Iteration  30: 14177423.687 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock":
  14202457.285 ±(99.9%) 44252.528 ops/s [Average]
  (min, avg, max) = (14065803.548, 14202457.285, 14322072.122), stdev = 66235.105
  CI (99.9%): [14158204.757, 14246709.812] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  14202457.285 ± 44252.528  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642458.762 ops/s
# Warmup Iteration   2: 692442.993 ops/s
# Warmup Iteration   3: 942826.018 ops/s
# Warmup Iteration   4: 945205.318 ops/s
# Warmup Iteration   5: 943749.764 ops/s
# Warmup Iteration   6: 950226.353 ops/s
# Warmup Iteration   7: 949485.010 ops/s
# Warmup Iteration   8: 945281.371 ops/s
# Warmup Iteration   9: 945676.284 ops/s
# Warmup Iteration  10: 944569.739 ops/s
# Warmup Iteration  11: 781712.568 ops/s
# Warmup Iteration  12: 951822.948 ops/s
# Warmup Iteration  13: 951282.399 ops/s
# Warmup Iteration  14: 943683.749 ops/s
# Warmup Iteration  15: 947069.787 ops/s
# Warmup Iteration  16: 946066.387 ops/s
# Warmup Iteration  17: 1006854.478 ops/s
# Warmup Iteration  18: 1008477.700 ops/s
# Warmup Iteration  19: 1003373.537 ops/s
# Warmup Iteration  20: 1003735.348 ops/s
# Warmup Iteration  21: 1003958.274 ops/s
# Warmup Iteration  22: 1008572.126 ops/s
# Warmup Iteration  23: 1007049.513 ops/s
# Warmup Iteration  24: 1008098.684 ops/s
# Warmup Iteration  25: 1007121.870 ops/s
# Warmup Iteration  26: 1001887.046 ops/s
# Warmup Iteration  27: 1003542.207 ops/s
# Warmup Iteration  28: 1005499.333 ops/s
# Warmup Iteration  29: 1007117.913 ops/s
# Warmup Iteration  30: 1005635.135 ops/s
Iteration   1: 1005176.437 ops/s
Iteration   2: 1007331.306 ops/s
Iteration   3: 1003607.257 ops/s
Iteration   4: 1010820.568 ops/s
Iteration   5: 1000186.615 ops/s
Iteration   6: 1007243.398 ops/s
Iteration   7: 1001498.958 ops/s
Iteration   8: 1010110.940 ops/s
Iteration   9: 1012512.930 ops/s
Iteration  10: 1013331.570 ops/s
Iteration  11: 1008464.768 ops/s
Iteration  12: 1008090.643 ops/s
Iteration  13: 1011360.347 ops/s
Iteration  14: 1014783.994 ops/s
Iteration  15: 1007898.943 ops/s
Iteration  16: 1004703.879 ops/s
Iteration  17: 1011810.634 ops/s
Iteration  18: 1012799.597 ops/s
Iteration  19: 1005156.565 ops/s
Iteration  20: 1008872.595 ops/s
Iteration  21: 1007083.158 ops/s
Iteration  22: 997602.045 ops/s
Iteration  23: 1008507.961 ops/s
Iteration  24: 1000475.305 ops/s
Iteration  25: 1010908.674 ops/s
Iteration  26: 1003913.126 ops/s
Iteration  27: 1007300.724 ops/s
Iteration  28: 1010582.688 ops/s
Iteration  29: 1011556.196 ops/s
Iteration  30: 1010045.484 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_detectWithOptional":
  1007791.243 ±(99.9%) 2832.673 ops/s [Average]
  (min, avg, max) = (997602.045, 1007791.243, 1014783.994), stdev = 4239.812
  CI (99.9%): [1004958.571, 1010623.916] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_detectWithOptional  thrpt   30  1007791.243 ± 2832.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4444034.561 ops/s
# Warmup Iteration   2: 9689552.955 ops/s
# Warmup Iteration   3: 8165285.157 ops/s
# Warmup Iteration   4: 9619472.151 ops/s
# Warmup Iteration   5: 9618689.238 ops/s
# Warmup Iteration   6: 9660113.897 ops/s
# Warmup Iteration   7: 9629827.913 ops/s
# Warmup Iteration   8: 9635122.399 ops/s
# Warmup Iteration   9: 9631525.509 ops/s
# Warmup Iteration  10: 9660975.920 ops/s
# Warmup Iteration  11: 9670950.625 ops/s
# Warmup Iteration  12: 9662763.294 ops/s
# Warmup Iteration  13: 9558830.739 ops/s
# Warmup Iteration  14: 9632228.613 ops/s
# Warmup Iteration  15: 9636060.075 ops/s
# Warmup Iteration  16: 9644791.091 ops/s
# Warmup Iteration  17: 9602939.682 ops/s
# Warmup Iteration  18: 9641341.697 ops/s
# Warmup Iteration  19: 9637933.091 ops/s
# Warmup Iteration  20: 9652516.020 ops/s
# Warmup Iteration  21: 9621144.744 ops/s
# Warmup Iteration  22: 9650036.073 ops/s
# Warmup Iteration  23: 9662313.396 ops/s
# Warmup Iteration  24: 9650504.495 ops/s
# Warmup Iteration  25: 9674821.342 ops/s
# Warmup Iteration  26: 9574284.771 ops/s
# Warmup Iteration  27: 9630937.232 ops/s
# Warmup Iteration  28: 9634773.460 ops/s
# Warmup Iteration  29: 9570359.525 ops/s
# Warmup Iteration  30: 9568895.162 ops/s
Iteration   1: 9709230.014 ops/s
Iteration   2: 9664116.205 ops/s
Iteration   3: 9643729.225 ops/s
Iteration   4: 9696945.783 ops/s
Iteration   5: 9630427.330 ops/s
Iteration   6: 9683820.131 ops/s
Iteration   7: 9646107.157 ops/s
Iteration   8: 9609261.458 ops/s
Iteration   9: 9627972.402 ops/s
Iteration  10: 9610283.901 ops/s
Iteration  11: 9614854.693 ops/s
Iteration  12: 9658765.067 ops/s
Iteration  13: 9637679.513 ops/s
Iteration  14: 9627609.803 ops/s
Iteration  15: 9580332.455 ops/s
Iteration  16: 9633984.158 ops/s
Iteration  17: 9677393.284 ops/s
Iteration  18: 9636481.252 ops/s
Iteration  19: 9664927.773 ops/s
Iteration  20: 9685293.807 ops/s
Iteration  21: 9670798.634 ops/s
Iteration  22: 9613970.461 ops/s
Iteration  23: 9694808.205 ops/s
Iteration  24: 9656536.213 ops/s
Iteration  25: 9612165.205 ops/s
Iteration  26: 9647619.551 ops/s
Iteration  27: 9712123.790 ops/s
Iteration  28: 9680973.570 ops/s
Iteration  29: 9656272.598 ops/s
Iteration  30: 9658973.200 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinct":
  9651448.561 ±(99.9%) 21768.373 ops/s [Average]
  (min, avg, max) = (9580332.455, 9651448.561, 9712123.790), stdev = 32581.878
  CI (99.9%): [9629680.189, 9673216.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_distinct  thrpt   30  9651448.561 ± 21768.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1162687.631 ops/s
# Warmup Iteration   2: 2574378.588 ops/s
# Warmup Iteration   3: 2704485.622 ops/s
# Warmup Iteration   4: 2494090.423 ops/s
# Warmup Iteration   5: 2407374.443 ops/s
# Warmup Iteration   6: 2696367.415 ops/s
# Warmup Iteration   7: 2687421.141 ops/s
# Warmup Iteration   8: 2689764.706 ops/s
# Warmup Iteration   9: 2689716.101 ops/s
# Warmup Iteration  10: 2692318.251 ops/s
# Warmup Iteration  11: 2692816.479 ops/s
# Warmup Iteration  12: 2685141.216 ops/s
# Warmup Iteration  13: 2703134.448 ops/s
# Warmup Iteration  14: 2702191.457 ops/s
# Warmup Iteration  15: 2690990.672 ops/s
# Warmup Iteration  16: 2691595.843 ops/s
# Warmup Iteration  17: 2687358.775 ops/s
# Warmup Iteration  18: 2698293.881 ops/s
# Warmup Iteration  19: 2689705.564 ops/s
# Warmup Iteration  20: 2684167.925 ops/s
# Warmup Iteration  21: 2693912.586 ops/s
# Warmup Iteration  22: 2688452.190 ops/s
# Warmup Iteration  23: 2691680.512 ops/s
# Warmup Iteration  24: 2693521.785 ops/s
# Warmup Iteration  25: 2686288.132 ops/s
# Warmup Iteration  26: 2691521.493 ops/s
# Warmup Iteration  27: 2681355.692 ops/s
# Warmup Iteration  28: 2699774.688 ops/s
# Warmup Iteration  29: 2693553.555 ops/s
# Warmup Iteration  30: 2699329.711 ops/s
Iteration   1: 2694520.443 ops/s
Iteration   2: 2702494.380 ops/s
Iteration   3: 2680292.896 ops/s
Iteration   4: 2695097.022 ops/s
Iteration   5: 2686647.665 ops/s
Iteration   6: 2691013.026 ops/s
Iteration   7: 2694941.142 ops/s
Iteration   8: 2697968.393 ops/s
Iteration   9: 2692034.355 ops/s
Iteration  10: 2684974.092 ops/s
Iteration  11: 2691265.513 ops/s
Iteration  12: 2700568.828 ops/s
Iteration  13: 2685363.518 ops/s
Iteration  14: 2690565.501 ops/s
Iteration  15: 2679893.896 ops/s
Iteration  16: 2666274.053 ops/s
Iteration  17: 2704696.708 ops/s
Iteration  18: 2678921.362 ops/s
Iteration  19: 2672948.183 ops/s
Iteration  20: 2675447.878 ops/s
Iteration  21: 2686974.551 ops/s
Iteration  22: 2697006.263 ops/s
Iteration  23: 2690957.325 ops/s
Iteration  24: 2695952.938 ops/s
Iteration  25: 2687937.756 ops/s
Iteration  26: 2698819.937 ops/s
Iteration  27: 2702377.596 ops/s
Iteration  28: 2700266.164 ops/s
Iteration  29: 2686850.553 ops/s
Iteration  30: 2683257.943 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctBy":
  2689877.663 ±(99.9%) 6274.718 ops/s [Average]
  (min, avg, max) = (2666274.053, 2689877.663, 2704696.708), stdev = 9391.703
  CI (99.9%): [2683602.945, 2696152.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_distinctBy  thrpt   30  2689877.663 ± 6274.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1166823.620 ops/s
# Warmup Iteration   2: 2651907.039 ops/s
# Warmup Iteration   3: 2767633.213 ops/s
# Warmup Iteration   4: 2440750.939 ops/s
# Warmup Iteration   5: 2591414.977 ops/s
# Warmup Iteration   6: 2764160.199 ops/s
# Warmup Iteration   7: 2777904.314 ops/s
# Warmup Iteration   8: 2780287.876 ops/s
# Warmup Iteration   9: 2775503.976 ops/s
# Warmup Iteration  10: 2772377.752 ops/s
# Warmup Iteration  11: 2765202.293 ops/s
# Warmup Iteration  12: 2777751.154 ops/s
# Warmup Iteration  13: 2763420.363 ops/s
# Warmup Iteration  14: 2767843.882 ops/s
# Warmup Iteration  15: 2763345.816 ops/s
# Warmup Iteration  16: 2772166.855 ops/s
# Warmup Iteration  17: 2773174.719 ops/s
# Warmup Iteration  18: 2771654.952 ops/s
# Warmup Iteration  19: 2765130.293 ops/s
# Warmup Iteration  20: 2755115.426 ops/s
# Warmup Iteration  21: 2774960.522 ops/s
# Warmup Iteration  22: 2778504.033 ops/s
# Warmup Iteration  23: 2774171.381 ops/s
# Warmup Iteration  24: 2767830.199 ops/s
# Warmup Iteration  25: 2774752.055 ops/s
# Warmup Iteration  26: 2773394.373 ops/s
# Warmup Iteration  27: 2770962.598 ops/s
# Warmup Iteration  28: 2764667.982 ops/s
# Warmup Iteration  29: 2767170.085 ops/s
# Warmup Iteration  30: 2770043.224 ops/s
Iteration   1: 2756708.083 ops/s
Iteration   2: 2779905.325 ops/s
Iteration   3: 2775920.566 ops/s
Iteration   4: 2765776.228 ops/s
Iteration   5: 2769403.576 ops/s
Iteration   6: 2781195.381 ops/s
Iteration   7: 2787371.539 ops/s
Iteration   8: 2770764.229 ops/s
Iteration   9: 2776531.529 ops/s
Iteration  10: 2759292.322 ops/s
Iteration  11: 2772633.001 ops/s
Iteration  12: 2760906.732 ops/s
Iteration  13: 2763086.804 ops/s
Iteration  14: 2768593.659 ops/s
Iteration  15: 2780643.387 ops/s
Iteration  16: 2773663.152 ops/s
Iteration  17: 2773461.627 ops/s
Iteration  18: 2761748.971 ops/s
Iteration  19: 2760322.239 ops/s
Iteration  20: 2770697.621 ops/s
Iteration  21: 2789453.428 ops/s
Iteration  22: 2752307.078 ops/s
Iteration  23: 2766522.476 ops/s
Iteration  24: 2767438.059 ops/s
Iteration  25: 2771694.971 ops/s
Iteration  26: 2777972.682 ops/s
Iteration  27: 2771879.398 ops/s
Iteration  28: 2770596.064 ops/s
Iteration  29: 2767109.343 ops/s
Iteration  30: 2757928.142 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy":
  2770050.920 ±(99.9%) 5934.180 ops/s [Average]
  (min, avg, max) = (2752307.078, 2770050.920, 2789453.428), stdev = 8882.001
  CI (99.9%): [2764116.741, 2775985.100] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_distinctWithHashingStrategy  thrpt   30  2770050.920 ± 5934.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1274779.547 ops/s
# Warmup Iteration   2: 2553859.998 ops/s
# Warmup Iteration   3: 2781026.696 ops/s
# Warmup Iteration   4: 2796884.295 ops/s
# Warmup Iteration   5: 2293240.820 ops/s
# Warmup Iteration   6: 2800872.244 ops/s
# Warmup Iteration   7: 2792246.377 ops/s
# Warmup Iteration   8: 2818136.666 ops/s
# Warmup Iteration   9: 2801023.858 ops/s
# Warmup Iteration  10: 2811402.227 ops/s
# Warmup Iteration  11: 2813683.268 ops/s
# Warmup Iteration  12: 2801134.155 ops/s
# Warmup Iteration  13: 2806040.530 ops/s
# Warmup Iteration  14: 2807228.900 ops/s
# Warmup Iteration  15: 2810203.341 ops/s
# Warmup Iteration  16: 2803244.350 ops/s
# Warmup Iteration  17: 2806675.450 ops/s
# Warmup Iteration  18: 2814908.681 ops/s
# Warmup Iteration  19: 2802981.033 ops/s
# Warmup Iteration  20: 2817224.398 ops/s
# Warmup Iteration  21: 2811912.427 ops/s
# Warmup Iteration  22: 2822371.042 ops/s
# Warmup Iteration  23: 2805097.379 ops/s
# Warmup Iteration  24: 2803951.350 ops/s
# Warmup Iteration  25: 2810245.986 ops/s
# Warmup Iteration  26: 2809131.820 ops/s
# Warmup Iteration  27: 2808896.547 ops/s
# Warmup Iteration  28: 2811052.744 ops/s
# Warmup Iteration  29: 2815719.096 ops/s
# Warmup Iteration  30: 2810582.565 ops/s
Iteration   1: 2813160.314 ops/s
Iteration   2: 2798702.810 ops/s
Iteration   3: 2805290.571 ops/s
Iteration   4: 2801889.545 ops/s
Iteration   5: 2806861.827 ops/s
Iteration   6: 2815103.494 ops/s
Iteration   7: 2748877.112 ops/s
Iteration   8: 2803225.930 ops/s
Iteration   9: 2807540.519 ops/s
Iteration  10: 2766457.020 ops/s
Iteration  11: 2795609.706 ops/s
Iteration  12: 2796499.144 ops/s
Iteration  13: 2813401.192 ops/s
Iteration  14: 2808673.179 ops/s
Iteration  15: 2817428.264 ops/s
Iteration  16: 2808860.435 ops/s
Iteration  17: 2814955.859 ops/s
Iteration  18: 2798428.996 ops/s
Iteration  19: 2789195.003 ops/s
Iteration  20: 2767313.155 ops/s
Iteration  21: 2794481.110 ops/s
Iteration  22: 2787170.954 ops/s
Iteration  23: 2809378.684 ops/s
Iteration  24: 2793785.554 ops/s
Iteration  25: 2800642.963 ops/s
Iteration  26: 2786096.573 ops/s
Iteration  27: 2791500.040 ops/s
Iteration  28: 2809935.890 ops/s
Iteration  29: 2802759.844 ops/s
Iteration  30: 2807160.896 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop":
  2798679.553 ±(99.9%) 10424.751 ops/s [Average]
  (min, avg, max) = (2748877.112, 2798679.553, 2817428.264), stdev = 15603.277
  CI (99.9%): [2788254.802, 2809104.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_drop  thrpt   30  2798679.553 ± 10424.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_dropWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_dropWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3312869.824 ops/s
# Warmup Iteration   2: 7850669.390 ops/s
# Warmup Iteration   3: 6640306.289 ops/s
# Warmup Iteration   4: 7894074.714 ops/s
# Warmup Iteration   5: 7953452.573 ops/s
# Warmup Iteration   6: 7951281.322 ops/s
# Warmup Iteration   7: 7927180.593 ops/s
# Warmup Iteration   8: 7910244.008 ops/s
# Warmup Iteration   9: 7900442.239 ops/s
# Warmup Iteration  10: 7965278.392 ops/s
# Warmup Iteration  11: 7987744.979 ops/s
# Warmup Iteration  12: 7938591.833 ops/s
# Warmup Iteration  13: 7978544.420 ops/s
# Warmup Iteration  14: 8011653.069 ops/s
# Warmup Iteration  15: 7928697.521 ops/s
# Warmup Iteration  16: 7924380.685 ops/s
# Warmup Iteration  17: 7918243.299 ops/s
# Warmup Iteration  18: 7973742.166 ops/s
# Warmup Iteration  19: 7960279.542 ops/s
# Warmup Iteration  20: 8020266.407 ops/s
# Warmup Iteration  21: 7986159.508 ops/s
# Warmup Iteration  22: 8009280.270 ops/s
# Warmup Iteration  23: 7988681.049 ops/s
# Warmup Iteration  24: 7981035.953 ops/s
# Warmup Iteration  25: 7979109.563 ops/s
# Warmup Iteration  26: 8006888.390 ops/s
# Warmup Iteration  27: 7956451.623 ops/s
# Warmup Iteration  28: 7920851.375 ops/s
# Warmup Iteration  29: 7929232.345 ops/s
# Warmup Iteration  30: 7887474.568 ops/s
Iteration   1: 7935101.635 ops/s
Iteration   2: 7905994.600 ops/s
Iteration   3: 7915104.919 ops/s
Iteration   4: 7894318.502 ops/s
Iteration   5: 7924808.877 ops/s
Iteration   6: 7940826.623 ops/s
Iteration   7: 7903424.322 ops/s
Iteration   8: 7888191.135 ops/s
Iteration   9: 7925166.096 ops/s
Iteration  10: 7924137.039 ops/s
Iteration  11: 7810829.995 ops/s
Iteration  12: 7862961.742 ops/s
Iteration  13: 7923873.449 ops/s
Iteration  14: 7884961.381 ops/s
Iteration  15: 7865939.391 ops/s
Iteration  16: 7800746.370 ops/s
Iteration  17: 7806791.498 ops/s
Iteration  18: 7874943.025 ops/s
Iteration  19: 7907861.805 ops/s
Iteration  20: 7910157.389 ops/s
Iteration  21: 7905321.575 ops/s
Iteration  22: 7829847.823 ops/s
Iteration  23: 7877070.161 ops/s
Iteration  24: 7918437.871 ops/s
Iteration  25: 7882008.009 ops/s
Iteration  26: 7892243.230 ops/s
Iteration  27: 7802856.529 ops/s
Iteration  28: 7855683.089 ops/s
Iteration  29: 7820254.381 ops/s
Iteration  30: 7893169.308 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_dropWhile":
  7882767.726 ±(99.9%) 27986.804 ops/s [Average]
  (min, avg, max) = (7800746.370, 7882767.726, 7940826.623), stdev = 41889.333
  CI (99.9%): [7854780.922, 7910754.529] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_dropWhile  thrpt   30  7882767.726 ± 27986.804  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 710388.414 ops/s
# Warmup Iteration   2: 755897.382 ops/s
# Warmup Iteration   3: 987180.445 ops/s
# Warmup Iteration   4: 987413.948 ops/s
# Warmup Iteration   5: 982592.281 ops/s
# Warmup Iteration   6: 984455.252 ops/s
# Warmup Iteration   7: 985600.563 ops/s
# Warmup Iteration   8: 983969.442 ops/s
# Warmup Iteration   9: 985424.435 ops/s
# Warmup Iteration  10: 991559.380 ops/s
# Warmup Iteration  11: 835720.283 ops/s
# Warmup Iteration  12: 974257.665 ops/s
# Warmup Iteration  13: 984174.586 ops/s
# Warmup Iteration  14: 992301.236 ops/s
# Warmup Iteration  15: 988324.271 ops/s
# Warmup Iteration  16: 990553.899 ops/s
# Warmup Iteration  17: 1054788.425 ops/s
# Warmup Iteration  18: 1057257.850 ops/s
# Warmup Iteration  19: 1057808.433 ops/s
# Warmup Iteration  20: 1056004.092 ops/s
# Warmup Iteration  21: 1054048.591 ops/s
# Warmup Iteration  22: 1057354.258 ops/s
# Warmup Iteration  23: 1049243.369 ops/s
# Warmup Iteration  24: 1051645.251 ops/s
# Warmup Iteration  25: 1050903.215 ops/s
# Warmup Iteration  26: 1054825.878 ops/s
# Warmup Iteration  27: 1049708.336 ops/s
# Warmup Iteration  28: 1056680.273 ops/s
# Warmup Iteration  29: 1055237.347 ops/s
# Warmup Iteration  30: 1052685.261 ops/s
Iteration   1: 1054582.360 ops/s
Iteration   2: 1051153.642 ops/s
Iteration   3: 1059809.801 ops/s
Iteration   4: 1056145.042 ops/s
Iteration   5: 1060612.027 ops/s
Iteration   6: 1052766.402 ops/s
Iteration   7: 1051562.886 ops/s
Iteration   8: 1057593.377 ops/s
Iteration   9: 1059081.637 ops/s
Iteration  10: 1058851.631 ops/s
Iteration  11: 1058110.061 ops/s
Iteration  12: 1057308.611 ops/s
Iteration  13: 1056909.985 ops/s
Iteration  14: 1056662.843 ops/s
Iteration  15: 1053536.749 ops/s
Iteration  16: 1063487.761 ops/s
Iteration  17: 1050410.835 ops/s
Iteration  18: 1056952.001 ops/s
Iteration  19: 1056069.025 ops/s
Iteration  20: 1052861.236 ops/s
Iteration  21: 1063123.190 ops/s
Iteration  22: 1052332.542 ops/s
Iteration  23: 1056535.618 ops/s
Iteration  24: 1057812.792 ops/s
Iteration  25: 1056976.156 ops/s
Iteration  26: 1058793.982 ops/s
Iteration  27: 1053663.991 ops/s
Iteration  28: 1062881.732 ops/s
Iteration  29: 1059378.314 ops/s
Iteration  30: 1056661.150 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_drop_throws":
  1056754.246 ±(99.9%) 2312.095 ops/s [Average]
  (min, avg, max) = (1050410.835, 1056754.246, 1063487.761), stdev = 3460.635
  CI (99.9%): [1054442.151, 1059066.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_drop_throws  thrpt   30  1056754.246 ± 2312.095  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11575914.389 ops/s
# Warmup Iteration   2: 21271057.881 ops/s
# Warmup Iteration   3: 21274407.296 ops/s
# Warmup Iteration   4: 22970066.807 ops/s
# Warmup Iteration   5: 23177201.736 ops/s
# Warmup Iteration   6: 23110421.214 ops/s
# Warmup Iteration   7: 22889962.038 ops/s
# Warmup Iteration   8: 22965998.907 ops/s
# Warmup Iteration   9: 23124519.113 ops/s
# Warmup Iteration  10: 23195843.130 ops/s
# Warmup Iteration  11: 23175261.612 ops/s
# Warmup Iteration  12: 23131441.943 ops/s
# Warmup Iteration  13: 23093661.848 ops/s
# Warmup Iteration  14: 22994978.307 ops/s
# Warmup Iteration  15: 22932717.421 ops/s
# Warmup Iteration  16: 22794483.115 ops/s
# Warmup Iteration  17: 22907694.541 ops/s
# Warmup Iteration  18: 23045985.952 ops/s
# Warmup Iteration  19: 23074562.908 ops/s
# Warmup Iteration  20: 23000867.037 ops/s
# Warmup Iteration  21: 23185782.324 ops/s
# Warmup Iteration  22: 23105371.016 ops/s
# Warmup Iteration  23: 22956673.931 ops/s
# Warmup Iteration  24: 23065051.431 ops/s
# Warmup Iteration  25: 23033431.612 ops/s
# Warmup Iteration  26: 23008284.923 ops/s
# Warmup Iteration  27: 23056700.607 ops/s
# Warmup Iteration  28: 23056941.740 ops/s
# Warmup Iteration  29: 22960372.401 ops/s
# Warmup Iteration  30: 23265561.656 ops/s
Iteration   1: 23189325.325 ops/s
Iteration   2: 23170540.322 ops/s
Iteration   3: 23281396.012 ops/s
Iteration   4: 22954631.831 ops/s
Iteration   5: 23111940.956 ops/s
Iteration   6: 23155846.461 ops/s
Iteration   7: 23088768.441 ops/s
Iteration   8: 22830862.850 ops/s
Iteration   9: 23022779.772 ops/s
Iteration  10: 23083330.947 ops/s
Iteration  11: 23181765.517 ops/s
Iteration  12: 23071197.829 ops/s
Iteration  13: 23213965.375 ops/s
Iteration  14: 22851914.997 ops/s
Iteration  15: 23042527.298 ops/s
Iteration  16: 23168209.160 ops/s
Iteration  17: 23180340.507 ops/s
Iteration  18: 23093592.643 ops/s
Iteration  19: 23057481.306 ops/s
Iteration  20: 23115044.034 ops/s
Iteration  21: 22907539.841 ops/s
Iteration  22: 22992360.273 ops/s
Iteration  23: 23050619.518 ops/s
Iteration  24: 22988397.904 ops/s
Iteration  25: 22972170.266 ops/s
Iteration  26: 23057681.347 ops/s
Iteration  27: 23119124.049 ops/s
Iteration  28: 23114023.749 ops/s
Iteration  29: 23079530.870 ops/s
Iteration  30: 22972984.299 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_empty":
  23070663.123 ±(99.9%) 70240.792 ops/s [Average]
  (min, avg, max) = (22830862.850, 23070663.123, 23281396.012), stdev = 105133.118
  CI (99.9%): [23000422.332, 23140903.915] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_empty  thrpt   30  23070663.123 ± 70240.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 91810.144 ops/s
# Warmup Iteration   2: 198527.128 ops/s
# Warmup Iteration   3: 208134.871 ops/s
# Warmup Iteration   4: 208623.693 ops/s
# Warmup Iteration   5: 173863.268 ops/s
# Warmup Iteration   6: 210345.105 ops/s
# Warmup Iteration   7: 210588.789 ops/s
# Warmup Iteration   8: 210751.245 ops/s
# Warmup Iteration   9: 210126.178 ops/s
# Warmup Iteration  10: 208586.831 ops/s
# Warmup Iteration  11: 210342.849 ops/s
# Warmup Iteration  12: 209995.276 ops/s
# Warmup Iteration  13: 209985.942 ops/s
# Warmup Iteration  14: 208826.283 ops/s
# Warmup Iteration  15: 209398.055 ops/s
# Warmup Iteration  16: 210108.833 ops/s
# Warmup Iteration  17: 210107.147 ops/s
# Warmup Iteration  18: 210068.363 ops/s
# Warmup Iteration  19: 210108.159 ops/s
# Warmup Iteration  20: 210261.537 ops/s
# Warmup Iteration  21: 209666.130 ops/s
# Warmup Iteration  22: 208443.949 ops/s
# Warmup Iteration  23: 209403.471 ops/s
# Warmup Iteration  24: 208783.815 ops/s
# Warmup Iteration  25: 209691.790 ops/s
# Warmup Iteration  26: 209848.690 ops/s
# Warmup Iteration  27: 209935.386 ops/s
# Warmup Iteration  28: 210130.646 ops/s
# Warmup Iteration  29: 209438.956 ops/s
# Warmup Iteration  30: 209628.649 ops/s
Iteration   1: 209934.331 ops/s
Iteration   2: 209547.499 ops/s
Iteration   3: 209328.401 ops/s
Iteration   4: 209511.328 ops/s
Iteration   5: 210388.596 ops/s
Iteration   6: 210852.306 ops/s
Iteration   7: 209614.897 ops/s
Iteration   8: 208757.660 ops/s
Iteration   9: 208765.514 ops/s
Iteration  10: 209343.199 ops/s
Iteration  11: 209874.420 ops/s
Iteration  12: 209511.508 ops/s
Iteration  13: 209133.217 ops/s
Iteration  14: 210491.492 ops/s
Iteration  15: 208381.768 ops/s
Iteration  16: 209479.177 ops/s
Iteration  17: 208973.693 ops/s
Iteration  18: 208530.685 ops/s
Iteration  19: 209809.115 ops/s
Iteration  20: 208820.900 ops/s
Iteration  21: 210476.684 ops/s
Iteration  22: 209767.535 ops/s
Iteration  23: 209459.651 ops/s
Iteration  24: 210914.723 ops/s
Iteration  25: 209784.182 ops/s
Iteration  26: 210498.183 ops/s
Iteration  27: 209797.444 ops/s
Iteration  28: 209562.802 ops/s
Iteration  29: 210025.665 ops/s
Iteration  30: 211081.002 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_equalsAndHashCode":
  209680.586 ±(99.9%) 468.253 ops/s [Average]
  (min, avg, max) = (208381.768, 209680.586, 211081.002), stdev = 700.859
  CI (99.9%): [209212.333, 210148.839] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  209680.586 ± 468.253  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 479484.751 ops/s
# Warmup Iteration   2: 691963.795 ops/s
# Warmup Iteration   3: 834266.570 ops/s
# Warmup Iteration   4: 829101.144 ops/s
# Warmup Iteration   5: 831951.259 ops/s
# Warmup Iteration   6: 834424.444 ops/s
# Warmup Iteration   7: 772558.443 ops/s
# Warmup Iteration   8: 760377.266 ops/s
# Warmup Iteration   9: 833365.658 ops/s
# Warmup Iteration  10: 830527.497 ops/s
# Warmup Iteration  11: 830718.023 ops/s
# Warmup Iteration  12: 835780.656 ops/s
# Warmup Iteration  13: 834511.019 ops/s
# Warmup Iteration  14: 835455.096 ops/s
# Warmup Iteration  15: 833498.921 ops/s
# Warmup Iteration  16: 834136.503 ops/s
# Warmup Iteration  17: 830779.314 ops/s
# Warmup Iteration  18: 839211.102 ops/s
# Warmup Iteration  19: 835086.806 ops/s
# Warmup Iteration  20: 834019.792 ops/s
# Warmup Iteration  21: 839195.289 ops/s
# Warmup Iteration  22: 835818.941 ops/s
# Warmup Iteration  23: 834000.078 ops/s
# Warmup Iteration  24: 833432.297 ops/s
# Warmup Iteration  25: 832900.099 ops/s
# Warmup Iteration  26: 831794.190 ops/s
# Warmup Iteration  27: 834411.670 ops/s
# Warmup Iteration  28: 835511.239 ops/s
# Warmup Iteration  29: 834455.569 ops/s
# Warmup Iteration  30: 834106.643 ops/s
Iteration   1: 832682.904 ops/s
Iteration   2: 835136.978 ops/s
Iteration   3: 833473.117 ops/s
Iteration   4: 837106.329 ops/s
Iteration   5: 831232.622 ops/s
Iteration   6: 828762.813 ops/s
Iteration   7: 835859.447 ops/s
Iteration   8: 831400.751 ops/s
Iteration   9: 830528.150 ops/s
Iteration  10: 833260.354 ops/s
Iteration  11: 840596.330 ops/s
Iteration  12: 831141.252 ops/s
Iteration  13: 835357.587 ops/s
Iteration  14: 832289.421 ops/s
Iteration  15: 831954.451 ops/s
Iteration  16: 835725.800 ops/s
Iteration  17: 832533.950 ops/s
Iteration  18: 833099.218 ops/s
Iteration  19: 833323.278 ops/s
Iteration  20: 826489.356 ops/s
Iteration  21: 832457.146 ops/s
Iteration  22: 828971.801 ops/s
Iteration  23: 830376.385 ops/s
Iteration  24: 835925.395 ops/s
Iteration  25: 831375.518 ops/s
Iteration  26: 836831.944 ops/s
Iteration  27: 833957.825 ops/s
Iteration  28: 833626.571 ops/s
Iteration  29: 832666.654 ops/s
Iteration  30: 830716.317 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollect":
  832961.989 ±(99.9%) 1898.185 ops/s [Average]
  (min, avg, max) = (826489.356, 832961.989, 840596.330), stdev = 2841.114
  CI (99.9%): [831063.804, 834860.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollect  thrpt   30  832961.989 ± 1898.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1899159.066 ops/s
# Warmup Iteration   2: 4774813.143 ops/s
# Warmup Iteration   3: 3983199.369 ops/s
# Warmup Iteration   4: 4793889.702 ops/s
# Warmup Iteration   5: 4822884.694 ops/s
# Warmup Iteration   6: 4816784.314 ops/s
# Warmup Iteration   7: 4797291.899 ops/s
# Warmup Iteration   8: 4817388.260 ops/s
# Warmup Iteration   9: 4824141.022 ops/s
# Warmup Iteration  10: 4806870.268 ops/s
# Warmup Iteration  11: 4804900.383 ops/s
# Warmup Iteration  12: 4797594.403 ops/s
# Warmup Iteration  13: 4797968.294 ops/s
# Warmup Iteration  14: 4787887.831 ops/s
# Warmup Iteration  15: 4794971.192 ops/s
# Warmup Iteration  16: 4760786.095 ops/s
# Warmup Iteration  17: 4804345.833 ops/s
# Warmup Iteration  18: 4797440.565 ops/s
# Warmup Iteration  19: 4817007.861 ops/s
# Warmup Iteration  20: 4811630.764 ops/s
# Warmup Iteration  21: 4786670.344 ops/s
# Warmup Iteration  22: 4815016.919 ops/s
# Warmup Iteration  23: 4814244.291 ops/s
# Warmup Iteration  24: 4798338.414 ops/s
# Warmup Iteration  25: 4816537.789 ops/s
# Warmup Iteration  26: 4833169.685 ops/s
# Warmup Iteration  27: 4794327.030 ops/s
# Warmup Iteration  28: 4814675.622 ops/s
# Warmup Iteration  29: 4828124.057 ops/s
# Warmup Iteration  30: 4825750.768 ops/s
Iteration   1: 4830395.313 ops/s
Iteration   2: 4818100.942 ops/s
Iteration   3: 4822993.964 ops/s
Iteration   4: 4847323.046 ops/s
Iteration   5: 4835049.339 ops/s
Iteration   6: 4847395.079 ops/s
Iteration   7: 4827453.953 ops/s
Iteration   8: 4827016.878 ops/s
Iteration   9: 4825558.435 ops/s
Iteration  10: 4833267.670 ops/s
Iteration  11: 4828271.622 ops/s
Iteration  12: 4842027.047 ops/s
Iteration  13: 4814451.740 ops/s
Iteration  14: 4825062.838 ops/s
Iteration  15: 4842162.917 ops/s
Iteration  16: 4851479.968 ops/s
Iteration  17: 4845321.101 ops/s
Iteration  18: 4822013.673 ops/s
Iteration  19: 4836548.328 ops/s
Iteration  20: 4826453.475 ops/s
Iteration  21: 4813644.451 ops/s
Iteration  22: 4826800.267 ops/s
Iteration  23: 4848933.668 ops/s
Iteration  24: 4838107.223 ops/s
Iteration  25: 4818035.370 ops/s
Iteration  26: 4819724.858 ops/s
Iteration  27: 4807565.641 ops/s
Iteration  28: 4842729.914 ops/s
Iteration  29: 4822899.397 ops/s
Iteration  30: 4834623.513 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectBoolean":
  4830713.721 ±(99.9%) 7762.174 ops/s [Average]
  (min, avg, max) = (4807565.641, 4830713.721, 4851479.968), stdev = 11618.058
  CI (99.9%): [4822951.547, 4838475.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4830713.721 ± 7762.174  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712919.290 ops/s
# Warmup Iteration   2: 1212717.270 ops/s
# Warmup Iteration   3: 1379299.850 ops/s
# Warmup Iteration   4: 1387110.591 ops/s
# Warmup Iteration   5: 1384814.191 ops/s
# Warmup Iteration   6: 1150110.097 ops/s
# Warmup Iteration   7: 1390882.827 ops/s
# Warmup Iteration   8: 1393150.154 ops/s
# Warmup Iteration   9: 1389168.358 ops/s
# Warmup Iteration  10: 1387378.426 ops/s
# Warmup Iteration  11: 1382982.090 ops/s
# Warmup Iteration  12: 1381929.450 ops/s
# Warmup Iteration  13: 1383144.286 ops/s
# Warmup Iteration  14: 1385386.704 ops/s
# Warmup Iteration  15: 1386905.357 ops/s
# Warmup Iteration  16: 1386904.220 ops/s
# Warmup Iteration  17: 1380931.189 ops/s
# Warmup Iteration  18: 1387310.978 ops/s
# Warmup Iteration  19: 1383991.499 ops/s
# Warmup Iteration  20: 1389471.071 ops/s
# Warmup Iteration  21: 1388190.197 ops/s
# Warmup Iteration  22: 1391853.493 ops/s
# Warmup Iteration  23: 1390392.525 ops/s
# Warmup Iteration  24: 1389215.972 ops/s
# Warmup Iteration  25: 1390086.712 ops/s
# Warmup Iteration  26: 1389933.979 ops/s
# Warmup Iteration  27: 1391885.683 ops/s
# Warmup Iteration  28: 1389217.545 ops/s
# Warmup Iteration  29: 1387968.657 ops/s
# Warmup Iteration  30: 1392279.416 ops/s
Iteration   1: 1394928.284 ops/s
Iteration   2: 1382160.735 ops/s
Iteration   3: 1392587.663 ops/s
Iteration   4: 1379481.202 ops/s
Iteration   5: 1385903.126 ops/s
Iteration   6: 1394241.908 ops/s
Iteration   7: 1389381.408 ops/s
Iteration   8: 1395326.748 ops/s
Iteration   9: 1398021.330 ops/s
Iteration  10: 1392214.977 ops/s
Iteration  11: 1394158.797 ops/s
Iteration  12: 1388976.626 ops/s
Iteration  13: 1396521.121 ops/s
Iteration  14: 1389722.558 ops/s
Iteration  15: 1395216.628 ops/s
Iteration  16: 1390514.700 ops/s
Iteration  17: 1393531.707 ops/s
Iteration  18: 1389894.939 ops/s
Iteration  19: 1388711.083 ops/s
Iteration  20: 1390554.516 ops/s
Iteration  21: 1389823.578 ops/s
Iteration  22: 1398078.920 ops/s
Iteration  23: 1386613.182 ops/s
Iteration  24: 1393319.369 ops/s
Iteration  25: 1397634.345 ops/s
Iteration  26: 1395844.948 ops/s
Iteration  27: 1387493.651 ops/s
Iteration  28: 1395481.171 ops/s
Iteration  29: 1396664.988 ops/s
Iteration  30: 1392159.291 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectByte":
  1391838.783 ±(99.9%) 3046.440 ops/s [Average]
  (min, avg, max) = (1379481.202, 1391838.783, 1398078.920), stdev = 4559.769
  CI (99.9%): [1388792.343, 1394885.224] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1391838.783 ± 3046.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 886684.054 ops/s
# Warmup Iteration   2: 2361590.741 ops/s
# Warmup Iteration   3: 2415330.908 ops/s
# Warmup Iteration   4: 2001480.907 ops/s
# Warmup Iteration   5: 2421024.609 ops/s
# Warmup Iteration   6: 2427525.702 ops/s
# Warmup Iteration   7: 2428669.886 ops/s
# Warmup Iteration   8: 2417732.379 ops/s
# Warmup Iteration   9: 2425779.579 ops/s
# Warmup Iteration  10: 2415930.972 ops/s
# Warmup Iteration  11: 2417772.353 ops/s
# Warmup Iteration  12: 2425712.867 ops/s
# Warmup Iteration  13: 2411120.831 ops/s
# Warmup Iteration  14: 2421401.586 ops/s
# Warmup Iteration  15: 2421947.056 ops/s
# Warmup Iteration  16: 2424784.961 ops/s
# Warmup Iteration  17: 2432591.025 ops/s
# Warmup Iteration  18: 2416291.772 ops/s
# Warmup Iteration  19: 2416915.607 ops/s
# Warmup Iteration  20: 2420569.214 ops/s
# Warmup Iteration  21: 2429444.225 ops/s
# Warmup Iteration  22: 2424077.291 ops/s
# Warmup Iteration  23: 2425452.836 ops/s
# Warmup Iteration  24: 2412820.952 ops/s
# Warmup Iteration  25: 2419401.062 ops/s
# Warmup Iteration  26: 2418848.857 ops/s
# Warmup Iteration  27: 2413817.238 ops/s
# Warmup Iteration  28: 2419195.285 ops/s
# Warmup Iteration  29: 2416812.540 ops/s
# Warmup Iteration  30: 2426773.255 ops/s
Iteration   1: 2429758.773 ops/s
Iteration   2: 2413465.944 ops/s
Iteration   3: 2427791.275 ops/s
Iteration   4: 2423249.161 ops/s
Iteration   5: 2437554.804 ops/s
Iteration   6: 2414579.946 ops/s
Iteration   7: 2417229.854 ops/s
Iteration   8: 2425426.726 ops/s
Iteration   9: 2442386.627 ops/s
Iteration  10: 2427732.158 ops/s
Iteration  11: 2434446.380 ops/s
Iteration  12: 2430845.069 ops/s
Iteration  13: 2412281.997 ops/s
Iteration  14: 2418028.647 ops/s
Iteration  15: 2414854.459 ops/s
Iteration  16: 2420899.172 ops/s
Iteration  17: 2435489.303 ops/s
Iteration  18: 2434394.631 ops/s
Iteration  19: 2439132.635 ops/s
Iteration  20: 2431836.614 ops/s
Iteration  21: 2425654.360 ops/s
Iteration  22: 2433747.191 ops/s
Iteration  23: 2425737.997 ops/s
Iteration  24: 2432501.739 ops/s
Iteration  25: 2435547.491 ops/s
Iteration  26: 2431718.435 ops/s
Iteration  27: 2421816.367 ops/s
Iteration  28: 2428058.321 ops/s
Iteration  29: 2415835.807 ops/s
Iteration  30: 2431397.533 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectChar":
  2427113.314 ±(99.9%) 5550.970 ops/s [Average]
  (min, avg, max) = (2412281.997, 2427113.314, 2442386.627), stdev = 8308.431
  CI (99.9%): [2421562.344, 2432664.284] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2427113.314 ± 5550.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441715.329 ops/s
# Warmup Iteration   2: 1107818.378 ops/s
# Warmup Iteration   3: 1116181.445 ops/s
# Warmup Iteration   4: 937448.795 ops/s
# Warmup Iteration   5: 1123367.981 ops/s
# Warmup Iteration   6: 1114477.014 ops/s
# Warmup Iteration   7: 1118123.831 ops/s
# Warmup Iteration   8: 1114548.000 ops/s
# Warmup Iteration   9: 1118840.448 ops/s
# Warmup Iteration  10: 1121962.578 ops/s
# Warmup Iteration  11: 1118558.722 ops/s
# Warmup Iteration  12: 1123088.279 ops/s
# Warmup Iteration  13: 1127558.318 ops/s
# Warmup Iteration  14: 1123426.980 ops/s
# Warmup Iteration  15: 1120132.773 ops/s
# Warmup Iteration  16: 1120330.292 ops/s
# Warmup Iteration  17: 1123030.451 ops/s
# Warmup Iteration  18: 1121806.218 ops/s
# Warmup Iteration  19: 1126722.570 ops/s
# Warmup Iteration  20: 1122105.094 ops/s
# Warmup Iteration  21: 1123704.668 ops/s
# Warmup Iteration  22: 1124630.863 ops/s
# Warmup Iteration  23: 1132017.922 ops/s
# Warmup Iteration  24: 1122930.526 ops/s
# Warmup Iteration  25: 1126634.955 ops/s
# Warmup Iteration  26: 1122204.420 ops/s
# Warmup Iteration  27: 1125440.008 ops/s
# Warmup Iteration  28: 1123687.486 ops/s
# Warmup Iteration  29: 1124042.403 ops/s
# Warmup Iteration  30: 1129329.471 ops/s
Iteration   1: 1133295.675 ops/s
Iteration   2: 1129048.195 ops/s
Iteration   3: 1127888.345 ops/s
Iteration   4: 1124449.592 ops/s
Iteration   5: 1129986.478 ops/s
Iteration   6: 1124849.386 ops/s
Iteration   7: 1116270.231 ops/s
Iteration   8: 1127406.481 ops/s
Iteration   9: 1123063.734 ops/s
Iteration  10: 1128284.171 ops/s
Iteration  11: 1129641.189 ops/s
Iteration  12: 1126916.199 ops/s
Iteration  13: 1124903.184 ops/s
Iteration  14: 1125878.687 ops/s
Iteration  15: 1123069.679 ops/s
Iteration  16: 1124954.628 ops/s
Iteration  17: 1124821.534 ops/s
Iteration  18: 1127458.725 ops/s
Iteration  19: 1129211.352 ops/s
Iteration  20: 1121810.001 ops/s
Iteration  21: 1119230.541 ops/s
Iteration  22: 1129442.398 ops/s
Iteration  23: 1132311.181 ops/s
Iteration  24: 1127473.944 ops/s
Iteration  25: 1123872.520 ops/s
Iteration  26: 1130609.068 ops/s
Iteration  27: 1123303.451 ops/s
Iteration  28: 1126168.085 ops/s
Iteration  29: 1127714.917 ops/s
Iteration  30: 1128515.195 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectDouble":
  1126394.959 ±(99.9%) 2449.801 ops/s [Average]
  (min, avg, max) = (1116270.231, 1126394.959, 1133295.675), stdev = 3666.747
  CI (99.9%): [1123945.158, 1128844.760] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1126394.959 ± 2449.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 718051.554 ops/s
# Warmup Iteration   2: 1679304.294 ops/s
# Warmup Iteration   3: 1742733.695 ops/s
# Warmup Iteration   4: 1497020.059 ops/s
# Warmup Iteration   5: 1690752.868 ops/s
# Warmup Iteration   6: 1745802.138 ops/s
# Warmup Iteration   7: 1739559.643 ops/s
# Warmup Iteration   8: 1742194.205 ops/s
# Warmup Iteration   9: 1733441.698 ops/s
# Warmup Iteration  10: 1741647.379 ops/s
# Warmup Iteration  11: 1738559.198 ops/s
# Warmup Iteration  12: 1742730.985 ops/s
# Warmup Iteration  13: 1743248.829 ops/s
# Warmup Iteration  14: 1745911.021 ops/s
# Warmup Iteration  15: 1736663.197 ops/s
# Warmup Iteration  16: 1737690.130 ops/s
# Warmup Iteration  17: 1742484.366 ops/s
# Warmup Iteration  18: 1733301.280 ops/s
# Warmup Iteration  19: 1742698.206 ops/s
# Warmup Iteration  20: 1737346.280 ops/s
# Warmup Iteration  21: 1739826.015 ops/s
# Warmup Iteration  22: 1746888.170 ops/s
# Warmup Iteration  23: 1740070.883 ops/s
# Warmup Iteration  24: 1736514.587 ops/s
# Warmup Iteration  25: 1749021.910 ops/s
# Warmup Iteration  26: 1741752.115 ops/s
# Warmup Iteration  27: 1746309.436 ops/s
# Warmup Iteration  28: 1747499.075 ops/s
# Warmup Iteration  29: 1742230.301 ops/s
# Warmup Iteration  30: 1743249.654 ops/s
Iteration   1: 1743849.938 ops/s
Iteration   2: 1738742.053 ops/s
Iteration   3: 1742125.542 ops/s
Iteration   4: 1744394.683 ops/s
Iteration   5: 1739166.466 ops/s
Iteration   6: 1742821.902 ops/s
Iteration   7: 1753700.328 ops/s
Iteration   8: 1746342.398 ops/s
Iteration   9: 1745882.043 ops/s
Iteration  10: 1743138.381 ops/s
Iteration  11: 1745063.036 ops/s
Iteration  12: 1728709.829 ops/s
Iteration  13: 1741836.146 ops/s
Iteration  14: 1740070.832 ops/s
Iteration  15: 1745732.980 ops/s
Iteration  16: 1741282.327 ops/s
Iteration  17: 1741860.795 ops/s
Iteration  18: 1737240.821 ops/s
Iteration  19: 1742047.701 ops/s
Iteration  20: 1748500.065 ops/s
Iteration  21: 1743184.060 ops/s
Iteration  22: 1743989.102 ops/s
Iteration  23: 1742165.853 ops/s
Iteration  24: 1739160.914 ops/s
Iteration  25: 1747053.348 ops/s
Iteration  26: 1743465.968 ops/s
Iteration  27: 1744686.066 ops/s
Iteration  28: 1744897.208 ops/s
Iteration  29: 1739200.205 ops/s
Iteration  30: 1732120.479 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectFloat":
  1742414.382 ±(99.9%) 3106.041 ops/s [Average]
  (min, avg, max) = (1728709.829, 1742414.382, 1753700.328), stdev = 4648.976
  CI (99.9%): [1739308.342, 1745520.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1742414.382 ± 3106.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909305.032 ops/s
# Warmup Iteration   2: 2374797.330 ops/s
# Warmup Iteration   3: 2363504.878 ops/s
# Warmup Iteration   4: 2049941.999 ops/s
# Warmup Iteration   5: 2414678.476 ops/s
# Warmup Iteration   6: 2410322.881 ops/s
# Warmup Iteration   7: 2412819.778 ops/s
# Warmup Iteration   8: 2411211.721 ops/s
# Warmup Iteration   9: 2405926.011 ops/s
# Warmup Iteration  10: 2415516.670 ops/s
# Warmup Iteration  11: 2417791.819 ops/s
# Warmup Iteration  12: 2407820.599 ops/s
# Warmup Iteration  13: 2418861.133 ops/s
# Warmup Iteration  14: 2416568.934 ops/s
# Warmup Iteration  15: 2414022.411 ops/s
# Warmup Iteration  16: 2400624.735 ops/s
# Warmup Iteration  17: 2407322.245 ops/s
# Warmup Iteration  18: 2414484.565 ops/s
# Warmup Iteration  19: 2419955.702 ops/s
# Warmup Iteration  20: 2418504.986 ops/s
# Warmup Iteration  21: 2408892.439 ops/s
# Warmup Iteration  22: 2412368.809 ops/s
# Warmup Iteration  23: 2408506.554 ops/s
# Warmup Iteration  24: 2409529.697 ops/s
# Warmup Iteration  25: 2409497.499 ops/s
# Warmup Iteration  26: 2418294.082 ops/s
# Warmup Iteration  27: 2420686.050 ops/s
# Warmup Iteration  28: 2410001.034 ops/s
# Warmup Iteration  29: 2415674.356 ops/s
# Warmup Iteration  30: 2420894.161 ops/s
Iteration   1: 2419868.042 ops/s
Iteration   2: 2418847.375 ops/s
Iteration   3: 2418712.015 ops/s
Iteration   4: 2425797.407 ops/s
Iteration   5: 2414865.680 ops/s
Iteration   6: 2422731.240 ops/s
Iteration   7: 2424004.408 ops/s
Iteration   8: 2427393.500 ops/s
Iteration   9: 2420951.027 ops/s
Iteration  10: 2427578.502 ops/s
Iteration  11: 2410931.937 ops/s
Iteration  12: 2406990.197 ops/s
Iteration  13: 2422173.718 ops/s
Iteration  14: 2419807.581 ops/s
Iteration  15: 2430251.655 ops/s
Iteration  16: 2402797.850 ops/s
Iteration  17: 2414537.595 ops/s
Iteration  18: 2419009.030 ops/s
Iteration  19: 2420084.722 ops/s
Iteration  20: 2423234.038 ops/s
Iteration  21: 2423084.820 ops/s
Iteration  22: 2429579.259 ops/s
Iteration  23: 2411609.249 ops/s
Iteration  24: 2428635.099 ops/s
Iteration  25: 2414700.461 ops/s
Iteration  26: 2429317.507 ops/s
Iteration  27: 2406923.655 ops/s
Iteration  28: 2415095.994 ops/s
Iteration  29: 2418260.048 ops/s
Iteration  30: 2417907.080 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectInt":
  2419522.690 ±(99.9%) 4732.049 ops/s [Average]
  (min, avg, max) = (2402797.850, 2419522.690, 2430251.655), stdev = 7082.709
  CI (99.9%): [2414790.640, 2424254.739] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2419522.690 ± 4732.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821332.022 ops/s
# Warmup Iteration   2: 2056745.163 ops/s
# Warmup Iteration   3: 1726783.155 ops/s
# Warmup Iteration   4: 2069180.684 ops/s
# Warmup Iteration   5: 2075830.301 ops/s
# Warmup Iteration   6: 2070843.360 ops/s
# Warmup Iteration   7: 2069192.042 ops/s
# Warmup Iteration   8: 2070341.300 ops/s
# Warmup Iteration   9: 2076352.228 ops/s
# Warmup Iteration  10: 2070291.774 ops/s
# Warmup Iteration  11: 2079766.948 ops/s
# Warmup Iteration  12: 2068812.908 ops/s
# Warmup Iteration  13: 2064255.727 ops/s
# Warmup Iteration  14: 2075531.225 ops/s
# Warmup Iteration  15: 2077967.838 ops/s
# Warmup Iteration  16: 2064270.861 ops/s
# Warmup Iteration  17: 2073115.691 ops/s
# Warmup Iteration  18: 2056321.918 ops/s
# Warmup Iteration  19: 2078850.317 ops/s
# Warmup Iteration  20: 2071906.607 ops/s
# Warmup Iteration  21: 2068927.386 ops/s
# Warmup Iteration  22: 2064241.894 ops/s
# Warmup Iteration  23: 2075751.385 ops/s
# Warmup Iteration  24: 2064333.806 ops/s
# Warmup Iteration  25: 2071612.635 ops/s
# Warmup Iteration  26: 2068940.141 ops/s
# Warmup Iteration  27: 2064857.924 ops/s
# Warmup Iteration  28: 2064103.865 ops/s
# Warmup Iteration  29: 2075582.494 ops/s
# Warmup Iteration  30: 2070248.179 ops/s
Iteration   1: 2077407.390 ops/s
Iteration   2: 2064990.618 ops/s
Iteration   3: 2078391.263 ops/s
Iteration   4: 2049233.016 ops/s
Iteration   5: 2067272.687 ops/s
Iteration   6: 2076450.671 ops/s
Iteration   7: 2070725.311 ops/s
Iteration   8: 2073176.969 ops/s
Iteration   9: 2071776.322 ops/s
Iteration  10: 2073734.208 ops/s
Iteration  11: 2074324.817 ops/s
Iteration  12: 2067738.761 ops/s
Iteration  13: 2083374.481 ops/s
Iteration  14: 2074071.435 ops/s
Iteration  15: 2073259.190 ops/s
Iteration  16: 2084070.931 ops/s
Iteration  17: 2081298.572 ops/s
Iteration  18: 2087479.926 ops/s
Iteration  19: 2078215.270 ops/s
Iteration  20: 2082568.687 ops/s
Iteration  21: 2081193.447 ops/s
Iteration  22: 2072002.080 ops/s
Iteration  23: 2075079.572 ops/s
Iteration  24: 2076005.124 ops/s
Iteration  25: 2065848.630 ops/s
Iteration  26: 2072912.409 ops/s
Iteration  27: 2079558.165 ops/s
Iteration  28: 2077570.488 ops/s
Iteration  29: 2068712.536 ops/s
Iteration  30: 2079086.846 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectLong":
  2074584.327 ±(99.9%) 4906.884 ops/s [Average]
  (min, avg, max) = (2049233.016, 2074584.327, 2087479.926), stdev = 7344.393
  CI (99.9%): [2069677.444, 2079491.211] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectLong  thrpt   30  2074584.327 ± 4906.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 938637.470 ops/s
# Warmup Iteration   2: 2446783.286 ops/s
# Warmup Iteration   3: 2474767.849 ops/s
# Warmup Iteration   4: 2063000.891 ops/s
# Warmup Iteration   5: 2476871.828 ops/s
# Warmup Iteration   6: 2480285.568 ops/s
# Warmup Iteration   7: 2473741.986 ops/s
# Warmup Iteration   8: 2476611.117 ops/s
# Warmup Iteration   9: 2476920.761 ops/s
# Warmup Iteration  10: 2480479.897 ops/s
# Warmup Iteration  11: 2474478.166 ops/s
# Warmup Iteration  12: 2486752.774 ops/s
# Warmup Iteration  13: 2473650.751 ops/s
# Warmup Iteration  14: 2475832.593 ops/s
# Warmup Iteration  15: 2481733.481 ops/s
# Warmup Iteration  16: 2473900.180 ops/s
# Warmup Iteration  17: 2494815.654 ops/s
# Warmup Iteration  18: 2480024.746 ops/s
# Warmup Iteration  19: 2477525.986 ops/s
# Warmup Iteration  20: 2473800.100 ops/s
# Warmup Iteration  21: 2469182.816 ops/s
# Warmup Iteration  22: 2482263.875 ops/s
# Warmup Iteration  23: 2477796.768 ops/s
# Warmup Iteration  24: 2475839.721 ops/s
# Warmup Iteration  25: 2477413.851 ops/s
# Warmup Iteration  26: 2483477.322 ops/s
# Warmup Iteration  27: 2480372.486 ops/s
# Warmup Iteration  28: 2477615.959 ops/s
# Warmup Iteration  29: 2470107.638 ops/s
# Warmup Iteration  30: 2492992.661 ops/s
Iteration   1: 2467522.034 ops/s
Iteration   2: 2470572.243 ops/s
Iteration   3: 2488619.854 ops/s
Iteration   4: 2478923.589 ops/s
Iteration   5: 2476806.017 ops/s
Iteration   6: 2472225.682 ops/s
Iteration   7: 2484286.727 ops/s
Iteration   8: 2481064.175 ops/s
Iteration   9: 2478163.562 ops/s
Iteration  10: 2476364.772 ops/s
Iteration  11: 2452207.081 ops/s
Iteration  12: 2469883.909 ops/s
Iteration  13: 2480105.640 ops/s
Iteration  14: 2474502.397 ops/s
Iteration  15: 2478445.008 ops/s
Iteration  16: 2480624.774 ops/s
Iteration  17: 2476123.561 ops/s
Iteration  18: 2487860.556 ops/s
Iteration  19: 2484626.337 ops/s
Iteration  20: 2472110.926 ops/s
Iteration  21: 2470940.213 ops/s
Iteration  22: 2480733.459 ops/s
Iteration  23: 2479148.501 ops/s
Iteration  24: 2476255.413 ops/s
Iteration  25: 2467319.772 ops/s
Iteration  26: 2475032.711 ops/s
Iteration  27: 2466084.133 ops/s
Iteration  28: 2475319.240 ops/s
Iteration  29: 2476610.212 ops/s
Iteration  30: 2488283.765 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectShort":
  2476225.542 ±(99.9%) 5033.700 ops/s [Average]
  (min, avg, max) = (2452207.081, 2476225.542, 2488619.854), stdev = 7534.206
  CI (99.9%): [2471191.842, 2481259.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2476225.542 ± 5033.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 221550.914 ops/s
# Warmup Iteration   2: 380935.582 ops/s
# Warmup Iteration   3: 459350.220 ops/s
# Warmup Iteration   4: 461962.993 ops/s
# Warmup Iteration   5: 461038.831 ops/s
# Warmup Iteration   6: 412558.138 ops/s
# Warmup Iteration   7: 429836.678 ops/s
# Warmup Iteration   8: 460494.286 ops/s
# Warmup Iteration   9: 463696.925 ops/s
# Warmup Iteration  10: 462545.084 ops/s
# Warmup Iteration  11: 462567.589 ops/s
# Warmup Iteration  12: 460876.129 ops/s
# Warmup Iteration  13: 461090.582 ops/s
# Warmup Iteration  14: 460781.289 ops/s
# Warmup Iteration  15: 461337.983 ops/s
# Warmup Iteration  16: 460972.953 ops/s
# Warmup Iteration  17: 459774.955 ops/s
# Warmup Iteration  18: 459291.790 ops/s
# Warmup Iteration  19: 458974.589 ops/s
# Warmup Iteration  20: 456362.896 ops/s
# Warmup Iteration  21: 458035.207 ops/s
# Warmup Iteration  22: 457777.262 ops/s
# Warmup Iteration  23: 456498.567 ops/s
# Warmup Iteration  24: 459300.503 ops/s
# Warmup Iteration  25: 458692.298 ops/s
# Warmup Iteration  26: 459267.652 ops/s
# Warmup Iteration  27: 460110.272 ops/s
# Warmup Iteration  28: 458482.252 ops/s
# Warmup Iteration  29: 458935.468 ops/s
# Warmup Iteration  30: 458377.203 ops/s
Iteration   1: 457962.097 ops/s
Iteration   2: 458525.000 ops/s
Iteration   3: 457390.391 ops/s
Iteration   4: 455140.798 ops/s
Iteration   5: 458571.961 ops/s
Iteration   6: 453991.217 ops/s
Iteration   7: 458892.897 ops/s
Iteration   8: 455789.820 ops/s
Iteration   9: 458890.354 ops/s
Iteration  10: 456216.606 ops/s
Iteration  11: 457492.998 ops/s
Iteration  12: 459365.520 ops/s
Iteration  13: 459438.972 ops/s
Iteration  14: 457629.946 ops/s
Iteration  15: 459214.946 ops/s
Iteration  16: 458157.591 ops/s
Iteration  17: 457306.494 ops/s
Iteration  18: 459469.706 ops/s
Iteration  19: 456874.257 ops/s
Iteration  20: 457656.275 ops/s
Iteration  21: 456951.262 ops/s
Iteration  22: 458422.276 ops/s
Iteration  23: 457607.263 ops/s
Iteration  24: 458659.613 ops/s
Iteration  25: 457679.973 ops/s
Iteration  26: 457657.399 ops/s
Iteration  27: 460577.097 ops/s
Iteration  28: 458303.310 ops/s
Iteration  29: 458855.510 ops/s
Iteration  30: 456963.051 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_flatCollectWith":
  457855.153 ±(99.9%) 917.847 ops/s [Average]
  (min, avg, max) = (453991.217, 457855.153, 460577.097), stdev = 1373.790
  CI (99.9%): [456937.306, 458773.000] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_flatCollectWith  thrpt   30  457855.153 ± 917.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1053129.102 ops/s
# Warmup Iteration   2: 2526113.529 ops/s
# Warmup Iteration   3: 2083611.869 ops/s
# Warmup Iteration   4: 2496950.096 ops/s
# Warmup Iteration   5: 2494446.174 ops/s
# Warmup Iteration   6: 2482274.397 ops/s
# Warmup Iteration   7: 2477709.503 ops/s
# Warmup Iteration   8: 2481678.800 ops/s
# Warmup Iteration   9: 2496155.956 ops/s
# Warmup Iteration  10: 2486060.776 ops/s
# Warmup Iteration  11: 2485420.077 ops/s
# Warmup Iteration  12: 2487447.932 ops/s
# Warmup Iteration  13: 2480978.903 ops/s
# Warmup Iteration  14: 2496790.954 ops/s
# Warmup Iteration  15: 2484036.674 ops/s
# Warmup Iteration  16: 2487541.979 ops/s
# Warmup Iteration  17: 2490240.671 ops/s
# Warmup Iteration  18: 2489410.800 ops/s
# Warmup Iteration  19: 2476833.815 ops/s
# Warmup Iteration  20: 2489944.273 ops/s
# Warmup Iteration  21: 2492996.381 ops/s
# Warmup Iteration  22: 2490611.342 ops/s
# Warmup Iteration  23: 2496956.061 ops/s
# Warmup Iteration  24: 2500161.437 ops/s
# Warmup Iteration  25: 2498036.210 ops/s
# Warmup Iteration  26: 2491086.298 ops/s
# Warmup Iteration  27: 2493273.795 ops/s
# Warmup Iteration  28: 2494199.097 ops/s
# Warmup Iteration  29: 2495314.090 ops/s
# Warmup Iteration  30: 2485079.316 ops/s
Iteration   1: 2492771.383 ops/s
Iteration   2: 2483351.909 ops/s
Iteration   3: 2493554.442 ops/s
Iteration   4: 2487604.753 ops/s
Iteration   5: 2490087.541 ops/s
Iteration   6: 2501517.094 ops/s
Iteration   7: 2481400.645 ops/s
Iteration   8: 2480746.344 ops/s
Iteration   9: 2497018.245 ops/s
Iteration  10: 2485725.119 ops/s
Iteration  11: 2495793.007 ops/s
Iteration  12: 2488380.553 ops/s
Iteration  13: 2491972.497 ops/s
Iteration  14: 2484374.343 ops/s
Iteration  15: 2483220.775 ops/s
Iteration  16: 2493800.066 ops/s
Iteration  17: 2517295.005 ops/s
Iteration  18: 2484896.474 ops/s
Iteration  19: 2500359.956 ops/s
Iteration  20: 2500088.523 ops/s
Iteration  21: 2504061.076 ops/s
Iteration  22: 2502287.126 ops/s
Iteration  23: 2480269.225 ops/s
Iteration  24: 2496871.548 ops/s
Iteration  25: 2482579.253 ops/s
Iteration  26: 2497159.010 ops/s
Iteration  27: 2493621.423 ops/s
Iteration  28: 2490633.784 ops/s
Iteration  29: 2503623.479 ops/s
Iteration  30: 2501339.436 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEach":
  2492880.134 ±(99.9%) 5843.014 ops/s [Average]
  (min, avg, max) = (2480269.225, 2492880.134, 2517295.005), stdev = 8745.548
  CI (99.9%): [2487037.121, 2498723.148] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEach  thrpt   30  2492880.134 ± 5843.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 229949.885 ops/s
# Warmup Iteration   2: 264896.483 ops/s
# Warmup Iteration   3: 337089.658 ops/s
# Warmup Iteration   4: 335635.493 ops/s
# Warmup Iteration   5: 333662.344 ops/s
# Warmup Iteration   6: 335602.724 ops/s
# Warmup Iteration   7: 335859.953 ops/s
# Warmup Iteration   8: 335578.551 ops/s
# Warmup Iteration   9: 335176.935 ops/s
# Warmup Iteration  10: 315401.178 ops/s
# Warmup Iteration  11: 308653.774 ops/s
# Warmup Iteration  12: 337356.274 ops/s
# Warmup Iteration  13: 336120.709 ops/s
# Warmup Iteration  14: 336050.546 ops/s
# Warmup Iteration  15: 335651.363 ops/s
# Warmup Iteration  16: 335088.503 ops/s
# Warmup Iteration  17: 351991.228 ops/s
# Warmup Iteration  18: 352818.450 ops/s
# Warmup Iteration  19: 350285.790 ops/s
# Warmup Iteration  20: 352165.663 ops/s
# Warmup Iteration  21: 350429.089 ops/s
# Warmup Iteration  22: 351184.640 ops/s
# Warmup Iteration  23: 352019.623 ops/s
# Warmup Iteration  24: 351646.852 ops/s
# Warmup Iteration  25: 351412.341 ops/s
# Warmup Iteration  26: 351615.524 ops/s
# Warmup Iteration  27: 351452.066 ops/s
# Warmup Iteration  28: 351277.845 ops/s
# Warmup Iteration  29: 352477.988 ops/s
# Warmup Iteration  30: 350680.763 ops/s
Iteration   1: 351262.254 ops/s
Iteration   2: 349492.434 ops/s
Iteration   3: 349968.555 ops/s
Iteration   4: 352016.483 ops/s
Iteration   5: 351969.828 ops/s
Iteration   6: 351950.062 ops/s
Iteration   7: 352036.599 ops/s
Iteration   8: 352689.657 ops/s
Iteration   9: 351578.427 ops/s
Iteration  10: 352144.370 ops/s
Iteration  11: 352547.285 ops/s
Iteration  12: 352075.370 ops/s
Iteration  13: 349959.072 ops/s
Iteration  14: 352042.445 ops/s
Iteration  15: 351160.971 ops/s
Iteration  16: 351681.944 ops/s
Iteration  17: 350982.878 ops/s
Iteration  18: 352354.724 ops/s
Iteration  19: 352614.824 ops/s
Iteration  20: 352890.315 ops/s
Iteration  21: 351277.402 ops/s
Iteration  22: 353385.322 ops/s
Iteration  23: 351654.770 ops/s
Iteration  24: 353759.866 ops/s
Iteration  25: 350986.192 ops/s
Iteration  26: 352354.471 ops/s
Iteration  27: 351941.692 ops/s
Iteration  28: 350934.268 ops/s
Iteration  29: 350227.350 ops/s
Iteration  30: 351275.714 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromTo":
  351707.185 ±(99.9%) 659.902 ops/s [Average]
  (min, avg, max) = (349492.434, 351707.185, 353759.866), stdev = 987.710
  CI (99.9%): [351047.283, 352367.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachFromTo  thrpt   30  351707.185 ± 659.902  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8803555.150 ops/s
# Warmup Iteration   2: 17700305.702 ops/s
# Warmup Iteration   3: 15170440.765 ops/s
# Warmup Iteration   4: 17985358.837 ops/s
# Warmup Iteration   5: 17974549.942 ops/s
# Warmup Iteration   6: 17901840.856 ops/s
# Warmup Iteration   7: 17930566.172 ops/s
# Warmup Iteration   8: 17989521.086 ops/s
# Warmup Iteration   9: 17926216.031 ops/s
# Warmup Iteration  10: 17892161.772 ops/s
# Warmup Iteration  11: 17926872.986 ops/s
# Warmup Iteration  12: 17900582.216 ops/s
# Warmup Iteration  13: 17930222.003 ops/s
# Warmup Iteration  14: 17937953.763 ops/s
# Warmup Iteration  15: 17942309.740 ops/s
# Warmup Iteration  16: 17931369.295 ops/s
# Warmup Iteration  17: 17907470.430 ops/s
# Warmup Iteration  18: 17895266.813 ops/s
# Warmup Iteration  19: 17896374.860 ops/s
# Warmup Iteration  20: 17879528.824 ops/s
# Warmup Iteration  21: 17959535.328 ops/s
# Warmup Iteration  22: 17854491.868 ops/s
# Warmup Iteration  23: 17881427.869 ops/s
# Warmup Iteration  24: 17894623.768 ops/s
# Warmup Iteration  25: 17904004.458 ops/s
# Warmup Iteration  26: 17931608.855 ops/s
# Warmup Iteration  27: 17955993.908 ops/s
# Warmup Iteration  28: 17925266.844 ops/s
# Warmup Iteration  29: 17934551.778 ops/s
# Warmup Iteration  30: 17839353.492 ops/s
Iteration   1: 17901727.265 ops/s
Iteration   2: 17987414.383 ops/s
Iteration   3: 17955555.192 ops/s
Iteration   4: 17924004.887 ops/s
Iteration   5: 17747045.627 ops/s
Iteration   6: 17990870.442 ops/s
Iteration   7: 17912666.116 ops/s
Iteration   8: 17884649.346 ops/s
Iteration   9: 17961220.339 ops/s
Iteration  10: 17921613.707 ops/s
Iteration  11: 17925489.202 ops/s
Iteration  12: 17987900.972 ops/s
Iteration  13: 17852683.020 ops/s
Iteration  14: 17994750.769 ops/s
Iteration  15: 17945841.879 ops/s
Iteration  16: 17872422.366 ops/s
Iteration  17: 17864708.671 ops/s
Iteration  18: 17815751.018 ops/s
Iteration  19: 17917383.798 ops/s
Iteration  20: 17894681.174 ops/s
Iteration  21: 17916278.758 ops/s
Iteration  22: 17963739.816 ops/s
Iteration  23: 17856627.364 ops/s
Iteration  24: 17813420.847 ops/s
Iteration  25: 18027545.884 ops/s
Iteration  26: 17862178.801 ops/s
Iteration  27: 17987073.036 ops/s
Iteration  28: 17949607.853 ops/s
Iteration  29: 17999824.758 ops/s
Iteration  30: 17935011.407 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachFromToInReverse":
  17918989.623 ±(99.9%) 43070.157 ops/s [Average]
  (min, avg, max) = (17747045.627, 17918989.623, 18027545.884), stdev = 64465.388
  CI (99.9%): [17875919.466, 17962059.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachFromToInReverse  thrpt   30  17918989.623 ± 43070.157  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBoth$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBoth

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3853493.483 ops/s
# Warmup Iteration   2: 8828371.784 ops/s
# Warmup Iteration   3: 7488105.237 ops/s
# Warmup Iteration   4: 8899968.276 ops/s
# Warmup Iteration   5: 8891123.722 ops/s
# Warmup Iteration   6: 8908382.949 ops/s
# Warmup Iteration   7: 8920407.258 ops/s
# Warmup Iteration   8: 8897431.299 ops/s
# Warmup Iteration   9: 8882563.626 ops/s
# Warmup Iteration  10: 8889968.812 ops/s
# Warmup Iteration  11: 8910291.023 ops/s
# Warmup Iteration  12: 8932737.620 ops/s
# Warmup Iteration  13: 8929504.565 ops/s
# Warmup Iteration  14: 8898992.794 ops/s
# Warmup Iteration  15: 8922094.464 ops/s
# Warmup Iteration  16: 8926383.206 ops/s
# Warmup Iteration  17: 8931809.248 ops/s
# Warmup Iteration  18: 8903476.339 ops/s
# Warmup Iteration  19: 8939465.584 ops/s
# Warmup Iteration  20: 8913292.544 ops/s
# Warmup Iteration  21: 8934138.367 ops/s
# Warmup Iteration  22: 8916577.555 ops/s
# Warmup Iteration  23: 8924095.419 ops/s
# Warmup Iteration  24: 8945058.640 ops/s
# Warmup Iteration  25: 8853034.714 ops/s
# Warmup Iteration  26: 8891954.303 ops/s
# Warmup Iteration  27: 8873224.526 ops/s
# Warmup Iteration  28: 8909228.225 ops/s
# Warmup Iteration  29: 8903243.328 ops/s
# Warmup Iteration  30: 8939678.455 ops/s
Iteration   1: 8923941.155 ops/s
Iteration   2: 8945146.473 ops/s
Iteration   3: 8924829.982 ops/s
Iteration   4: 8882833.484 ops/s
Iteration   5: 8945223.712 ops/s
Iteration   6: 8892793.824 ops/s
Iteration   7: 8899883.814 ops/s
Iteration   8: 8929197.615 ops/s
Iteration   9: 8962755.274 ops/s
Iteration  10: 8901079.098 ops/s
Iteration  11: 8939090.933 ops/s
Iteration  12: 8873528.518 ops/s
Iteration  13: 8928040.745 ops/s
Iteration  14: 8867693.648 ops/s
Iteration  15: 8897003.629 ops/s
Iteration  16: 8886845.985 ops/s
Iteration  17: 8956504.942 ops/s
Iteration  18: 8915648.663 ops/s
Iteration  19: 8940281.177 ops/s
Iteration  20: 8920478.523 ops/s
Iteration  21: 8921419.419 ops/s
Iteration  22: 8911314.412 ops/s
Iteration  23: 8898557.346 ops/s
Iteration  24: 8867039.997 ops/s
Iteration  25: 8894181.887 ops/s
Iteration  26: 8900589.069 ops/s
Iteration  27: 8908012.440 ops/s
Iteration  28: 8935801.356 ops/s
Iteration  29: 8851526.246 ops/s
Iteration  30: 8885437.753 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBoth":
  8910222.704 ±(99.9%) 18656.951 ops/s [Average]
  (min, avg, max) = (8851526.246, 8910222.704, 8962755.274), stdev = 27924.848
  CI (99.9%): [8891565.753, 8928879.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachInBoth  thrpt   30  8910222.704 ± 18656.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646291.438 ops/s
# Warmup Iteration   2: 730602.254 ops/s
# Warmup Iteration   3: 952455.019 ops/s
# Warmup Iteration   4: 947628.750 ops/s
# Warmup Iteration   5: 942967.298 ops/s
# Warmup Iteration   6: 948025.702 ops/s
# Warmup Iteration   7: 952483.618 ops/s
# Warmup Iteration   8: 951336.619 ops/s
# Warmup Iteration   9: 946537.314 ops/s
# Warmup Iteration  10: 838717.038 ops/s
# Warmup Iteration  11: 903063.727 ops/s
# Warmup Iteration  12: 949954.005 ops/s
# Warmup Iteration  13: 954403.653 ops/s
# Warmup Iteration  14: 949124.450 ops/s
# Warmup Iteration  15: 951683.064 ops/s
# Warmup Iteration  16: 949792.241 ops/s
# Warmup Iteration  17: 1011209.887 ops/s
# Warmup Iteration  18: 1007105.316 ops/s
# Warmup Iteration  19: 1006936.070 ops/s
# Warmup Iteration  20: 1011037.677 ops/s
# Warmup Iteration  21: 1008686.196 ops/s
# Warmup Iteration  22: 1007704.401 ops/s
# Warmup Iteration  23: 1012345.678 ops/s
# Warmup Iteration  24: 1010431.796 ops/s
# Warmup Iteration  25: 1013789.286 ops/s
# Warmup Iteration  26: 1011123.367 ops/s
# Warmup Iteration  27: 1008651.944 ops/s
# Warmup Iteration  28: 1004444.546 ops/s
# Warmup Iteration  29: 1012730.239 ops/s
# Warmup Iteration  30: 1010434.974 ops/s
Iteration   1: 1006455.702 ops/s
Iteration   2: 1004338.435 ops/s
Iteration   3: 1013898.470 ops/s
Iteration   4: 1004564.922 ops/s
Iteration   5: 1008986.749 ops/s
Iteration   6: 1005954.478 ops/s
Iteration   7: 1005053.141 ops/s
Iteration   8: 1010445.249 ops/s
Iteration   9: 1009380.655 ops/s
Iteration  10: 1009695.285 ops/s
Iteration  11: 1004614.691 ops/s
Iteration  12: 1009132.147 ops/s
Iteration  13: 1011190.490 ops/s
Iteration  14: 1009652.974 ops/s
Iteration  15: 1012415.400 ops/s
Iteration  16: 1015192.647 ops/s
Iteration  17: 1010017.841 ops/s
Iteration  18: 1001883.585 ops/s
Iteration  19: 1007319.456 ops/s
Iteration  20: 1001480.902 ops/s
Iteration  21: 1010678.154 ops/s
Iteration  22: 1007263.270 ops/s
Iteration  23: 1007117.235 ops/s
Iteration  24: 1012248.952 ops/s
Iteration  25: 1012891.127 ops/s
Iteration  26: 1009857.568 ops/s
Iteration  27: 1007769.072 ops/s
Iteration  28: 1015424.321 ops/s
Iteration  29: 1014145.173 ops/s
Iteration  30: 1009535.585 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes":
  1008953.456 ±(99.9%) 2450.903 ops/s [Average]
  (min, avg, max) = (1001480.902, 1008953.456, 1015424.321), stdev = 3668.397
  CI (99.9%): [1006502.553, 1011404.359] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnDifferentListSizes  thrpt   30  1008953.456 ± 2450.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757858.090 ops/s
# Warmup Iteration   2: 785042.807 ops/s
# Warmup Iteration   3: 989326.251 ops/s
# Warmup Iteration   4: 1027596.373 ops/s
# Warmup Iteration   5: 1019196.587 ops/s
# Warmup Iteration   6: 1020047.915 ops/s
# Warmup Iteration   7: 1027806.257 ops/s
# Warmup Iteration   8: 1023809.779 ops/s
# Warmup Iteration   9: 1024668.667 ops/s
# Warmup Iteration  10: 1024004.756 ops/s
# Warmup Iteration  11: 1025192.709 ops/s
# Warmup Iteration  12: 982707.421 ops/s
# Warmup Iteration  13: 897226.089 ops/s
# Warmup Iteration  14: 1020900.789 ops/s
# Warmup Iteration  15: 1021791.967 ops/s
# Warmup Iteration  16: 1024782.471 ops/s
# Warmup Iteration  17: 1093366.979 ops/s
# Warmup Iteration  18: 1073198.878 ops/s
# Warmup Iteration  19: 1091760.217 ops/s
# Warmup Iteration  20: 1094570.082 ops/s
# Warmup Iteration  21: 1082484.385 ops/s
# Warmup Iteration  22: 1094932.113 ops/s
# Warmup Iteration  23: 1096133.456 ops/s
# Warmup Iteration  24: 1093081.931 ops/s
# Warmup Iteration  25: 1089825.326 ops/s
# Warmup Iteration  26: 1086116.868 ops/s
# Warmup Iteration  27: 1085664.250 ops/s
# Warmup Iteration  28: 1091165.028 ops/s
# Warmup Iteration  29: 1096834.344 ops/s
# Warmup Iteration  30: 1091894.375 ops/s
Iteration   1: 1091448.546 ops/s
Iteration   2: 1091037.214 ops/s
Iteration   3: 1092468.147 ops/s
Iteration   4: 1085277.709 ops/s
Iteration   5: 1087925.871 ops/s
Iteration   6: 1087408.634 ops/s
Iteration   7: 1086467.536 ops/s
Iteration   8: 1085370.254 ops/s
Iteration   9: 1091078.453 ops/s
Iteration  10: 1090231.895 ops/s
Iteration  11: 1095969.640 ops/s
Iteration  12: 1093920.826 ops/s
Iteration  13: 1094556.687 ops/s
Iteration  14: 1094418.873 ops/s
Iteration  15: 1094461.408 ops/s
Iteration  16: 1094369.515 ops/s
Iteration  17: 1095896.141 ops/s
Iteration  18: 1093786.175 ops/s
Iteration  19: 1091907.668 ops/s
Iteration  20: 1087293.004 ops/s
Iteration  21: 1096995.842 ops/s
Iteration  22: 1090243.489 ops/s
Iteration  23: 1094695.849 ops/s
Iteration  24: 1095103.358 ops/s
Iteration  25: 1082754.573 ops/s
Iteration  26: 1087719.066 ops/s
Iteration  27: 1082862.792 ops/s
Iteration  28: 1095424.444 ops/s
Iteration  29: 1090429.319 ops/s
Iteration  30: 1098412.552 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList":
  1091331.183 ±(99.9%) 2831.925 ops/s [Average]
  (min, avg, max) = (1082754.573, 1091331.183, 1098412.552), stdev = 4238.693
  CI (99.9%): [1088499.257, 1094163.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachInBothThrowsOnNullList  thrpt   30  1091331.183 ± 2831.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 428692.586 ops/s
# Warmup Iteration   2: 546135.380 ops/s
# Warmup Iteration   3: 687546.925 ops/s
# Warmup Iteration   4: 685096.168 ops/s
# Warmup Iteration   5: 688993.434 ops/s
# Warmup Iteration   6: 687567.306 ops/s
# Warmup Iteration   7: 686452.712 ops/s
# Warmup Iteration   8: 672227.957 ops/s
# Warmup Iteration   9: 584373.988 ops/s
# Warmup Iteration  10: 690120.963 ops/s
# Warmup Iteration  11: 689037.294 ops/s
# Warmup Iteration  12: 689004.379 ops/s
# Warmup Iteration  13: 684036.377 ops/s
# Warmup Iteration  14: 686865.690 ops/s
# Warmup Iteration  15: 685343.456 ops/s
# Warmup Iteration  16: 689265.294 ops/s
# Warmup Iteration  17: 719889.237 ops/s
# Warmup Iteration  18: 718908.165 ops/s
# Warmup Iteration  19: 721566.000 ops/s
# Warmup Iteration  20: 717340.011 ops/s
# Warmup Iteration  21: 718766.073 ops/s
# Warmup Iteration  22: 720343.061 ops/s
# Warmup Iteration  23: 715861.896 ops/s
# Warmup Iteration  24: 719584.781 ops/s
# Warmup Iteration  25: 720251.427 ops/s
# Warmup Iteration  26: 720474.376 ops/s
# Warmup Iteration  27: 718947.564 ops/s
# Warmup Iteration  28: 718815.318 ops/s
# Warmup Iteration  29: 721145.492 ops/s
# Warmup Iteration  30: 715589.345 ops/s
Iteration   1: 720720.645 ops/s
Iteration   2: 717183.933 ops/s
Iteration   3: 715253.870 ops/s
Iteration   4: 715283.657 ops/s
Iteration   5: 718052.789 ops/s
Iteration   6: 715591.000 ops/s
Iteration   7: 714106.936 ops/s
Iteration   8: 721238.264 ops/s
Iteration   9: 718784.854 ops/s
Iteration  10: 720692.826 ops/s
Iteration  11: 716052.848 ops/s
Iteration  12: 716359.650 ops/s
Iteration  13: 721953.265 ops/s
Iteration  14: 724310.479 ops/s
Iteration  15: 715850.248 ops/s
Iteration  16: 718575.165 ops/s
Iteration  17: 715998.663 ops/s
Iteration  18: 719532.974 ops/s
Iteration  19: 718323.049 ops/s
Iteration  20: 720784.257 ops/s
Iteration  21: 718026.472 ops/s
Iteration  22: 715311.436 ops/s
Iteration  23: 717584.763 ops/s
Iteration  24: 719592.673 ops/s
Iteration  25: 719281.261 ops/s
Iteration  26: 715798.543 ops/s
Iteration  27: 719999.339 ops/s
Iteration  28: 719027.809 ops/s
Iteration  29: 717460.484 ops/s
Iteration  30: 719420.009 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachOnRange":
  718205.072 ±(99.9%) 1598.114 ops/s [Average]
  (min, avg, max) = (714106.936, 718205.072, 724310.479), stdev = 2391.982
  CI (99.9%): [716606.958, 719803.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachOnRange  thrpt   30  718205.072 ± 1598.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1690204.662 ops/s
# Warmup Iteration   2: 4107949.543 ops/s
# Warmup Iteration   3: 3412397.190 ops/s
# Warmup Iteration   4: 4117961.136 ops/s
# Warmup Iteration   5: 4099606.149 ops/s
# Warmup Iteration   6: 4116961.429 ops/s
# Warmup Iteration   7: 4100729.282 ops/s
# Warmup Iteration   8: 4075032.019 ops/s
# Warmup Iteration   9: 4113543.031 ops/s
# Warmup Iteration  10: 4095715.685 ops/s
# Warmup Iteration  11: 4101137.035 ops/s
# Warmup Iteration  12: 4087805.807 ops/s
# Warmup Iteration  13: 4104033.194 ops/s
# Warmup Iteration  14: 4089672.362 ops/s
# Warmup Iteration  15: 4093831.943 ops/s
# Warmup Iteration  16: 4098753.567 ops/s
# Warmup Iteration  17: 4111350.734 ops/s
# Warmup Iteration  18: 4101481.297 ops/s
# Warmup Iteration  19: 4112517.425 ops/s
# Warmup Iteration  20: 4096481.669 ops/s
# Warmup Iteration  21: 4111143.595 ops/s
# Warmup Iteration  22: 4121192.446 ops/s
# Warmup Iteration  23: 4116144.460 ops/s
# Warmup Iteration  24: 4095142.074 ops/s
# Warmup Iteration  25: 4109043.236 ops/s
# Warmup Iteration  26: 4120597.221 ops/s
# Warmup Iteration  27: 4098851.818 ops/s
# Warmup Iteration  28: 4104004.546 ops/s
# Warmup Iteration  29: 4104220.603 ops/s
# Warmup Iteration  30: 4078270.208 ops/s
Iteration   1: 4092753.818 ops/s
Iteration   2: 4116922.205 ops/s
Iteration   3: 4100038.590 ops/s
Iteration   4: 4097346.282 ops/s
Iteration   5: 4099233.194 ops/s
Iteration   6: 4065811.889 ops/s
Iteration   7: 4090042.506 ops/s
Iteration   8: 4083974.615 ops/s
Iteration   9: 4114220.360 ops/s
Iteration  10: 4099443.342 ops/s
Iteration  11: 4116304.486 ops/s
Iteration  12: 4113461.871 ops/s
Iteration  13: 4096964.187 ops/s
Iteration  14: 4129216.160 ops/s
Iteration  15: 4102827.943 ops/s
Iteration  16: 4119675.736 ops/s
Iteration  17: 4103694.860 ops/s
Iteration  18: 4106193.737 ops/s
Iteration  19: 4085953.554 ops/s
Iteration  20: 4107962.736 ops/s
Iteration  21: 4107072.450 ops/s
Iteration  22: 4113053.632 ops/s
Iteration  23: 4115002.478 ops/s
Iteration  24: 4102509.533 ops/s
Iteration  25: 4106955.064 ops/s
Iteration  26: 4089207.043 ops/s
Iteration  27: 4090714.170 ops/s
Iteration  28: 4101283.066 ops/s
Iteration  29: 4080059.344 ops/s
Iteration  30: 4056560.942 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWith":
  4100148.660 ±(99.9%) 10439.187 ops/s [Average]
  (min, avg, max) = (4056560.942, 4100148.660, 4129216.160), stdev = 15624.885
  CI (99.9%): [4089709.473, 4110587.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachWith  thrpt   30  4100148.660 ± 10439.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410676.200 ops/s
# Warmup Iteration   2: 867481.212 ops/s
# Warmup Iteration   3: 974681.949 ops/s
# Warmup Iteration   4: 970842.880 ops/s
# Warmup Iteration   5: 808959.536 ops/s
# Warmup Iteration   6: 977996.919 ops/s
# Warmup Iteration   7: 978697.756 ops/s
# Warmup Iteration   8: 978688.350 ops/s
# Warmup Iteration   9: 974640.126 ops/s
# Warmup Iteration  10: 983841.946 ops/s
# Warmup Iteration  11: 981609.206 ops/s
# Warmup Iteration  12: 979730.358 ops/s
# Warmup Iteration  13: 980327.678 ops/s
# Warmup Iteration  14: 980986.061 ops/s
# Warmup Iteration  15: 978803.038 ops/s
# Warmup Iteration  16: 980211.697 ops/s
# Warmup Iteration  17: 980477.855 ops/s
# Warmup Iteration  18: 978206.126 ops/s
# Warmup Iteration  19: 978232.682 ops/s
# Warmup Iteration  20: 977522.894 ops/s
# Warmup Iteration  21: 974341.229 ops/s
# Warmup Iteration  22: 977056.085 ops/s
# Warmup Iteration  23: 978351.138 ops/s
# Warmup Iteration  24: 978340.206 ops/s
# Warmup Iteration  25: 978591.527 ops/s
# Warmup Iteration  26: 976911.040 ops/s
# Warmup Iteration  27: 979061.183 ops/s
# Warmup Iteration  28: 976956.735 ops/s
# Warmup Iteration  29: 977276.007 ops/s
# Warmup Iteration  30: 983797.815 ops/s
Iteration   1: 979588.528 ops/s
Iteration   2: 975593.859 ops/s
Iteration   3: 977494.496 ops/s
Iteration   4: 978237.227 ops/s
Iteration   5: 977879.570 ops/s
Iteration   6: 980993.494 ops/s
Iteration   7: 983799.565 ops/s
Iteration   8: 974539.601 ops/s
Iteration   9: 972802.107 ops/s
Iteration  10: 981182.063 ops/s
Iteration  11: 979035.910 ops/s
Iteration  12: 976146.655 ops/s
Iteration  13: 982391.710 ops/s
Iteration  14: 982993.816 ops/s
Iteration  15: 979098.853 ops/s
Iteration  16: 978574.451 ops/s
Iteration  17: 975178.583 ops/s
Iteration  18: 977056.217 ops/s
Iteration  19: 974165.093 ops/s
Iteration  20: 979078.842 ops/s
Iteration  21: 981507.085 ops/s
Iteration  22: 980357.768 ops/s
Iteration  23: 980676.779 ops/s
Iteration  24: 975015.443 ops/s
Iteration  25: 977776.239 ops/s
Iteration  26: 978848.365 ops/s
Iteration  27: 980295.320 ops/s
Iteration  28: 978797.485 ops/s
Iteration  29: 975057.434 ops/s
Iteration  30: 973712.405 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndex":
  978262.499 ±(99.9%) 1925.719 ops/s [Average]
  (min, avg, max) = (972802.107, 978262.499, 983799.565), stdev = 2882.326
  CI (99.9%): [976336.780, 980188.218] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  978262.499 ± 1925.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 396310.835 ops/s
# Warmup Iteration   2: 483726.977 ops/s
# Warmup Iteration   3: 597234.888 ops/s
# Warmup Iteration   4: 594161.571 ops/s
# Warmup Iteration   5: 597129.997 ops/s
# Warmup Iteration   6: 600402.920 ops/s
# Warmup Iteration   7: 593019.665 ops/s
# Warmup Iteration   8: 591779.177 ops/s
# Warmup Iteration   9: 501385.584 ops/s
# Warmup Iteration  10: 595610.367 ops/s
# Warmup Iteration  11: 595051.168 ops/s
# Warmup Iteration  12: 596752.736 ops/s
# Warmup Iteration  13: 595469.449 ops/s
# Warmup Iteration  14: 599562.390 ops/s
# Warmup Iteration  15: 596617.018 ops/s
# Warmup Iteration  16: 596769.073 ops/s
# Warmup Iteration  17: 621753.394 ops/s
# Warmup Iteration  18: 622402.739 ops/s
# Warmup Iteration  19: 620671.224 ops/s
# Warmup Iteration  20: 621617.895 ops/s
# Warmup Iteration  21: 625888.857 ops/s
# Warmup Iteration  22: 621758.580 ops/s
# Warmup Iteration  23: 623141.559 ops/s
# Warmup Iteration  24: 620669.899 ops/s
# Warmup Iteration  25: 618179.264 ops/s
# Warmup Iteration  26: 620406.685 ops/s
# Warmup Iteration  27: 621889.576 ops/s
# Warmup Iteration  28: 621628.100 ops/s
# Warmup Iteration  29: 621286.319 ops/s
# Warmup Iteration  30: 621504.216 ops/s
Iteration   1: 624237.707 ops/s
Iteration   2: 622006.139 ops/s
Iteration   3: 620109.166 ops/s
Iteration   4: 623694.076 ops/s
Iteration   5: 620633.573 ops/s
Iteration   6: 621606.292 ops/s
Iteration   7: 619976.317 ops/s
Iteration   8: 623221.592 ops/s
Iteration   9: 619799.004 ops/s
Iteration  10: 620916.902 ops/s
Iteration  11: 621050.537 ops/s
Iteration  12: 623537.272 ops/s
Iteration  13: 622210.895 ops/s
Iteration  14: 621317.873 ops/s
Iteration  15: 622612.676 ops/s
Iteration  16: 619764.105 ops/s
Iteration  17: 622621.181 ops/s
Iteration  18: 620443.988 ops/s
Iteration  19: 618792.144 ops/s
Iteration  20: 616874.953 ops/s
Iteration  21: 620379.714 ops/s
Iteration  22: 621328.811 ops/s
Iteration  23: 621336.995 ops/s
Iteration  24: 620292.284 ops/s
Iteration  25: 623601.227 ops/s
Iteration  26: 616545.732 ops/s
Iteration  27: 622444.148 ops/s
Iteration  28: 623089.079 ops/s
Iteration  29: 620283.620 ops/s
Iteration  30: 621989.302 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange":
  621223.910 ±(99.9%) 1231.920 ops/s [Average]
  (min, avg, max) = (616545.732, 621223.910, 624237.707), stdev = 1843.880
  CI (99.9%): [619991.990, 622455.830] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexOnRange  thrpt   30  621223.910 ± 1231.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 176044.349 ops/s
# Warmup Iteration   2: 190021.046 ops/s
# Warmup Iteration   3: 259484.178 ops/s
# Warmup Iteration   4: 260068.660 ops/s
# Warmup Iteration   5: 257289.950 ops/s
# Warmup Iteration   6: 261065.816 ops/s
# Warmup Iteration   7: 259036.306 ops/s
# Warmup Iteration   8: 258644.929 ops/s
# Warmup Iteration   9: 259703.245 ops/s
# Warmup Iteration  10: 260228.252 ops/s
# Warmup Iteration  11: 234121.581 ops/s
# Warmup Iteration  12: 239096.528 ops/s
# Warmup Iteration  13: 260362.220 ops/s
# Warmup Iteration  14: 260284.824 ops/s
# Warmup Iteration  15: 260874.203 ops/s
# Warmup Iteration  16: 260107.463 ops/s
# Warmup Iteration  17: 268767.016 ops/s
# Warmup Iteration  18: 267857.092 ops/s
# Warmup Iteration  19: 268529.544 ops/s
# Warmup Iteration  20: 268707.099 ops/s
# Warmup Iteration  21: 267913.277 ops/s
# Warmup Iteration  22: 268611.707 ops/s
# Warmup Iteration  23: 267797.847 ops/s
# Warmup Iteration  24: 268251.154 ops/s
# Warmup Iteration  25: 266373.078 ops/s
# Warmup Iteration  26: 267444.417 ops/s
# Warmup Iteration  27: 268693.977 ops/s
# Warmup Iteration  28: 268039.882 ops/s
# Warmup Iteration  29: 268467.673 ops/s
# Warmup Iteration  30: 267271.506 ops/s
Iteration   1: 268425.010 ops/s
Iteration   2: 267263.303 ops/s
Iteration   3: 270075.248 ops/s
Iteration   4: 269571.103 ops/s
Iteration   5: 267431.698 ops/s
Iteration   6: 268480.018 ops/s
Iteration   7: 267272.607 ops/s
Iteration   8: 266905.507 ops/s
Iteration   9: 267746.191 ops/s
Iteration  10: 267621.770 ops/s
Iteration  11: 267429.863 ops/s
Iteration  12: 267821.210 ops/s
Iteration  13: 268149.421 ops/s
Iteration  14: 268746.124 ops/s
Iteration  15: 266691.509 ops/s
Iteration  16: 266835.858 ops/s
Iteration  17: 269205.853 ops/s
Iteration  18: 269585.737 ops/s
Iteration  19: 269269.894 ops/s
Iteration  20: 269005.634 ops/s
Iteration  21: 268696.495 ops/s
Iteration  22: 268647.214 ops/s
Iteration  23: 268916.758 ops/s
Iteration  24: 268840.979 ops/s
Iteration  25: 268859.639 ops/s
Iteration  26: 269259.002 ops/s
Iteration  27: 269298.796 ops/s
Iteration  28: 267494.279 ops/s
Iteration  29: 267854.594 ops/s
Iteration  30: 268368.544 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo":
  268325.662 ±(99.9%) 611.278 ops/s [Average]
  (min, avg, max) = (266691.509, 268325.662, 270075.248), stdev = 914.932
  CI (99.9%): [267714.384, 268936.940] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromTo  thrpt   30  268325.662 ± 611.278  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9147057.741 ops/s
# Warmup Iteration   2: 18558329.472 ops/s
# Warmup Iteration   3: 15798038.717 ops/s
# Warmup Iteration   4: 18447898.849 ops/s
# Warmup Iteration   5: 18508875.842 ops/s
# Warmup Iteration   6: 18514828.657 ops/s
# Warmup Iteration   7: 18535668.479 ops/s
# Warmup Iteration   8: 18550388.705 ops/s
# Warmup Iteration   9: 18452952.293 ops/s
# Warmup Iteration  10: 18423093.835 ops/s
# Warmup Iteration  11: 18495089.318 ops/s
# Warmup Iteration  12: 18367270.487 ops/s
# Warmup Iteration  13: 18372587.036 ops/s
# Warmup Iteration  14: 18483835.777 ops/s
# Warmup Iteration  15: 18378114.039 ops/s
# Warmup Iteration  16: 18437330.171 ops/s
# Warmup Iteration  17: 18413633.594 ops/s
# Warmup Iteration  18: 18484390.144 ops/s
# Warmup Iteration  19: 18508458.881 ops/s
# Warmup Iteration  20: 18497672.561 ops/s
# Warmup Iteration  21: 18377703.254 ops/s
# Warmup Iteration  22: 18569116.275 ops/s
# Warmup Iteration  23: 18524915.428 ops/s
# Warmup Iteration  24: 18403145.263 ops/s
# Warmup Iteration  25: 18539454.957 ops/s
# Warmup Iteration  26: 18531199.869 ops/s
# Warmup Iteration  27: 18545164.581 ops/s
# Warmup Iteration  28: 18550374.492 ops/s
# Warmup Iteration  29: 18571856.571 ops/s
# Warmup Iteration  30: 18543503.906 ops/s
Iteration   1: 18488220.670 ops/s
Iteration   2: 18577063.220 ops/s
Iteration   3: 18552445.776 ops/s
Iteration   4: 18572515.304 ops/s
Iteration   5: 18511656.065 ops/s
Iteration   6: 18487853.650 ops/s
Iteration   7: 18525244.464 ops/s
Iteration   8: 18499200.476 ops/s
Iteration   9: 18524960.697 ops/s
Iteration  10: 18421664.625 ops/s
Iteration  11: 18610301.741 ops/s
Iteration  12: 18606981.584 ops/s
Iteration  13: 18545005.814 ops/s
Iteration  14: 18614259.698 ops/s
Iteration  15: 18563264.638 ops/s
Iteration  16: 18545057.038 ops/s
Iteration  17: 18566784.598 ops/s
Iteration  18: 18458588.793 ops/s
Iteration  19: 18508937.424 ops/s
Iteration  20: 18423052.985 ops/s
Iteration  21: 18536371.304 ops/s
Iteration  22: 18529931.066 ops/s
Iteration  23: 18659295.993 ops/s
Iteration  24: 18465461.238 ops/s
Iteration  25: 18544046.408 ops/s
Iteration  26: 18593445.033 ops/s
Iteration  27: 18480552.348 ops/s
Iteration  28: 18641747.350 ops/s
Iteration  29: 18517069.360 ops/s
Iteration  30: 18510379.944 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse":
  18536045.310 ±(99.9%) 39236.593 ops/s [Average]
  (min, avg, max) = (18421664.625, 18536045.310, 18659295.993), stdev = 58727.490
  CI (99.9%): [18496808.717, 18575281.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_forEachWithIndexWithFromToInReverse  thrpt   30  18536045.310 ± 39236.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1924776.599 ops/s
# Warmup Iteration   2: 4343684.873 ops/s
# Warmup Iteration   3: 3626804.670 ops/s
# Warmup Iteration   4: 4350655.202 ops/s
# Warmup Iteration   5: 4311979.740 ops/s
# Warmup Iteration   6: 4345767.462 ops/s
# Warmup Iteration   7: 4323598.958 ops/s
# Warmup Iteration   8: 4330621.970 ops/s
# Warmup Iteration   9: 4327705.746 ops/s
# Warmup Iteration  10: 4331212.786 ops/s
# Warmup Iteration  11: 4331597.492 ops/s
# Warmup Iteration  12: 4336913.382 ops/s
# Warmup Iteration  13: 4347050.357 ops/s
# Warmup Iteration  14: 4332727.856 ops/s
# Warmup Iteration  15: 4330044.991 ops/s
# Warmup Iteration  16: 4331505.928 ops/s
# Warmup Iteration  17: 4326738.055 ops/s
# Warmup Iteration  18: 4326331.455 ops/s
# Warmup Iteration  19: 4321452.695 ops/s
# Warmup Iteration  20: 4328266.930 ops/s
# Warmup Iteration  21: 4331907.426 ops/s
# Warmup Iteration  22: 4354305.695 ops/s
# Warmup Iteration  23: 4333172.907 ops/s
# Warmup Iteration  24: 4329464.397 ops/s
# Warmup Iteration  25: 4334570.727 ops/s
# Warmup Iteration  26: 4323080.793 ops/s
# Warmup Iteration  27: 4290665.839 ops/s
# Warmup Iteration  28: 4336224.320 ops/s
# Warmup Iteration  29: 4331604.495 ops/s
# Warmup Iteration  30: 4342746.395 ops/s
Iteration   1: 4338265.971 ops/s
Iteration   2: 4323800.682 ops/s
Iteration   3: 4328581.413 ops/s
Iteration   4: 4326849.149 ops/s
Iteration   5: 4309900.702 ops/s
Iteration   6: 4334655.786 ops/s
Iteration   7: 4352164.705 ops/s
Iteration   8: 4293579.710 ops/s
Iteration   9: 4321828.663 ops/s
Iteration  10: 4326414.597 ops/s
Iteration  11: 4334358.499 ops/s
Iteration  12: 4316025.117 ops/s
Iteration  13: 4351146.262 ops/s
Iteration  14: 4326952.516 ops/s
Iteration  15: 4355669.922 ops/s
Iteration  16: 4345874.762 ops/s
Iteration  17: 4338076.401 ops/s
Iteration  18: 4310592.208 ops/s
Iteration  19: 4323434.812 ops/s
Iteration  20: 4312188.352 ops/s
Iteration  21: 4342901.723 ops/s
Iteration  22: 4359459.627 ops/s
Iteration  23: 4330364.501 ops/s
Iteration  24: 4344767.642 ops/s
Iteration  25: 4321835.437 ops/s
Iteration  26: 4323255.581 ops/s
Iteration  27: 4330173.491 ops/s
Iteration  28: 4353838.161 ops/s
Iteration  29: 4341761.742 ops/s
Iteration  30: 4356676.697 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_fusedCollectMakeString":
  4332513.161 ±(99.9%) 10686.292 ops/s [Average]
  (min, avg, max) = (4293579.710, 4332513.161, 4359459.627), stdev = 15994.741
  CI (99.9%): [4321826.869, 4343199.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  4332513.161 ± 10686.292  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14883424.745 ops/s
# Warmup Iteration   2: 27905014.735 ops/s
# Warmup Iteration   3: 26336455.352 ops/s
# Warmup Iteration   4: 29797738.188 ops/s
# Warmup Iteration   5: 29675158.990 ops/s
# Warmup Iteration   6: 29629014.681 ops/s
# Warmup Iteration   7: 29745908.518 ops/s
# Warmup Iteration   8: 29603405.686 ops/s
# Warmup Iteration   9: 29702867.641 ops/s
# Warmup Iteration  10: 29663484.657 ops/s
# Warmup Iteration  11: 29678320.416 ops/s
# Warmup Iteration  12: 29721337.736 ops/s
# Warmup Iteration  13: 29825036.004 ops/s
# Warmup Iteration  14: 29524278.159 ops/s
# Warmup Iteration  15: 29520105.788 ops/s
# Warmup Iteration  16: 29600991.254 ops/s
# Warmup Iteration  17: 29536712.116 ops/s
# Warmup Iteration  18: 29818679.582 ops/s
# Warmup Iteration  19: 29498217.167 ops/s
# Warmup Iteration  20: 29491244.156 ops/s
# Warmup Iteration  21: 29670964.379 ops/s
# Warmup Iteration  22: 29738668.119 ops/s
# Warmup Iteration  23: 29570774.471 ops/s
# Warmup Iteration  24: 29424252.370 ops/s
# Warmup Iteration  25: 29622152.480 ops/s
# Warmup Iteration  26: 29742565.842 ops/s
# Warmup Iteration  27: 29731918.480 ops/s
# Warmup Iteration  28: 29676955.668 ops/s
# Warmup Iteration  29: 29619484.243 ops/s
# Warmup Iteration  30: 29586736.324 ops/s
Iteration   1: 29745528.960 ops/s
Iteration   2: 29413782.567 ops/s
Iteration   3: 29753294.450 ops/s
Iteration   4: 29883035.220 ops/s
Iteration   5: 29635151.334 ops/s
Iteration   6: 29555197.897 ops/s
Iteration   7: 29824701.444 ops/s
Iteration   8: 29807723.503 ops/s
Iteration   9: 29761173.676 ops/s
Iteration  10: 29747570.391 ops/s
Iteration  11: 29772858.089 ops/s
Iteration  12: 29824976.872 ops/s
Iteration  13: 29651696.238 ops/s
Iteration  14: 29838632.110 ops/s
Iteration  15: 29543890.089 ops/s
Iteration  16: 29605791.876 ops/s
Iteration  17: 29568215.463 ops/s
Iteration  18: 29617150.492 ops/s
Iteration  19: 29555433.763 ops/s
Iteration  20: 29721779.356 ops/s
Iteration  21: 29653012.857 ops/s
Iteration  22: 29737486.407 ops/s
Iteration  23: 29200968.062 ops/s
Iteration  24: 29690964.628 ops/s
Iteration  25: 29658656.176 ops/s
Iteration  26: 29620702.082 ops/s
Iteration  27: 29491147.900 ops/s
Iteration  28: 29595090.319 ops/s
Iteration  29: 29622293.121 ops/s
Iteration  30: 29628529.467 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getAny":
  29657547.827 ±(99.9%) 93866.770 ops/s [Average]
  (min, avg, max) = (29200968.062, 29657547.827, 29883035.220), stdev = 140495.373
  CI (99.9%): [29563681.057, 29751414.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getAny  thrpt   30  29657547.827 ± 93866.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7589620.865 ops/s
# Warmup Iteration   2: 15209742.013 ops/s
# Warmup Iteration   3: 12961466.544 ops/s
# Warmup Iteration   4: 15326079.021 ops/s
# Warmup Iteration   5: 15320393.156 ops/s
# Warmup Iteration   6: 15281567.942 ops/s
# Warmup Iteration   7: 15271294.980 ops/s
# Warmup Iteration   8: 15323809.852 ops/s
# Warmup Iteration   9: 15247183.668 ops/s
# Warmup Iteration  10: 15374865.889 ops/s
# Warmup Iteration  11: 15362814.633 ops/s
# Warmup Iteration  12: 15326052.518 ops/s
# Warmup Iteration  13: 15273687.930 ops/s
# Warmup Iteration  14: 15323635.060 ops/s
# Warmup Iteration  15: 15375359.085 ops/s
# Warmup Iteration  16: 15290451.525 ops/s
# Warmup Iteration  17: 15281428.761 ops/s
# Warmup Iteration  18: 15272133.106 ops/s
# Warmup Iteration  19: 15251038.561 ops/s
# Warmup Iteration  20: 15283505.826 ops/s
# Warmup Iteration  21: 15310834.808 ops/s
# Warmup Iteration  22: 15291171.138 ops/s
# Warmup Iteration  23: 15313473.013 ops/s
# Warmup Iteration  24: 15296255.684 ops/s
# Warmup Iteration  25: 15209215.595 ops/s
# Warmup Iteration  26: 15278477.608 ops/s
# Warmup Iteration  27: 15289532.979 ops/s
# Warmup Iteration  28: 15347877.790 ops/s
# Warmup Iteration  29: 15343289.673 ops/s
# Warmup Iteration  30: 15323748.856 ops/s
Iteration   1: 15235044.586 ops/s
Iteration   2: 15202487.353 ops/s
Iteration   3: 15365275.404 ops/s
Iteration   4: 15325672.509 ops/s
Iteration   5: 15301759.396 ops/s
Iteration   6: 15386538.585 ops/s
Iteration   7: 15232914.065 ops/s
Iteration   8: 15239732.364 ops/s
Iteration   9: 15279049.538 ops/s
Iteration  10: 15296788.561 ops/s
Iteration  11: 15240396.561 ops/s
Iteration  12: 15239552.475 ops/s
Iteration  13: 15320019.933 ops/s
Iteration  14: 15332029.310 ops/s
Iteration  15: 15316864.190 ops/s
Iteration  16: 15286834.206 ops/s
Iteration  17: 15288260.573 ops/s
Iteration  18: 15306021.286 ops/s
Iteration  19: 15288514.917 ops/s
Iteration  20: 15323283.262 ops/s
Iteration  21: 15214479.430 ops/s
Iteration  22: 15365215.299 ops/s
Iteration  23: 15293585.941 ops/s
Iteration  24: 15257728.488 ops/s
Iteration  25: 15299356.125 ops/s
Iteration  26: 15291247.094 ops/s
Iteration  27: 15298995.940 ops/s
Iteration  28: 15348705.723 ops/s
Iteration  29: 15345394.720 ops/s
Iteration  30: 15333237.475 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirst":
  15295166.177 ±(99.9%) 31132.855 ops/s [Average]
  (min, avg, max) = (15202487.353, 15295166.177, 15386538.585), stdev = 46598.195
  CI (99.9%): [15264033.322, 15326299.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getFirst  thrpt   30  15295166.177 ± 31132.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirstOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirstOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10480255.399 ops/s
# Warmup Iteration   2: 19066302.720 ops/s
# Warmup Iteration   3: 18392452.381 ops/s
# Warmup Iteration   4: 20441343.048 ops/s
# Warmup Iteration   5: 20346794.165 ops/s
# Warmup Iteration   6: 20409337.749 ops/s
# Warmup Iteration   7: 20458241.454 ops/s
# Warmup Iteration   8: 20305872.723 ops/s
# Warmup Iteration   9: 20464481.287 ops/s
# Warmup Iteration  10: 20294250.635 ops/s
# Warmup Iteration  11: 20436103.761 ops/s
# Warmup Iteration  12: 20458411.786 ops/s
# Warmup Iteration  13: 20443840.818 ops/s
# Warmup Iteration  14: 20409387.276 ops/s
# Warmup Iteration  15: 20502034.094 ops/s
# Warmup Iteration  16: 20461595.389 ops/s
# Warmup Iteration  17: 20406583.713 ops/s
# Warmup Iteration  18: 20524212.628 ops/s
# Warmup Iteration  19: 20471143.059 ops/s
# Warmup Iteration  20: 20468015.107 ops/s
# Warmup Iteration  21: 20470861.364 ops/s
# Warmup Iteration  22: 20442558.548 ops/s
# Warmup Iteration  23: 20474981.973 ops/s
# Warmup Iteration  24: 20542178.155 ops/s
# Warmup Iteration  25: 20457578.947 ops/s
# Warmup Iteration  26: 20485045.604 ops/s
# Warmup Iteration  27: 20411753.961 ops/s
# Warmup Iteration  28: 20339125.079 ops/s
# Warmup Iteration  29: 20500722.419 ops/s
# Warmup Iteration  30: 20389264.649 ops/s
Iteration   1: 20473812.913 ops/s
Iteration   2: 20527534.774 ops/s
Iteration   3: 20564648.516 ops/s
Iteration   4: 20320688.188 ops/s
Iteration   5: 20560697.129 ops/s
Iteration   6: 20455216.620 ops/s
Iteration   7: 20467078.257 ops/s
Iteration   8: 20484486.127 ops/s
Iteration   9: 20524388.114 ops/s
Iteration  10: 20515886.483 ops/s
Iteration  11: 20426354.250 ops/s
Iteration  12: 20547648.789 ops/s
Iteration  13: 20365621.402 ops/s
Iteration  14: 20395605.358 ops/s
Iteration  15: 20282855.886 ops/s
Iteration  16: 20540147.497 ops/s
Iteration  17: 20403233.046 ops/s
Iteration  18: 20405842.390 ops/s
Iteration  19: 20499616.465 ops/s
Iteration  20: 20530765.729 ops/s
Iteration  21: 20542444.743 ops/s
Iteration  22: 20435255.409 ops/s
Iteration  23: 20301553.817 ops/s
Iteration  24: 20500370.711 ops/s
Iteration  25: 20415542.872 ops/s
Iteration  26: 20433977.156 ops/s
Iteration  27: 20467549.450 ops/s
Iteration  28: 20359336.360 ops/s
Iteration  29: 20352545.227 ops/s
Iteration  30: 20428857.897 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getFirstOptional":
  20450985.386 ±(99.9%) 53024.574 ops/s [Average]
  (min, avg, max) = (20282855.886, 20450985.386, 20564648.516), stdev = 79364.692
  CI (99.9%): [20397960.812, 20504009.960] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getFirstOptional  thrpt   30  20450985.386 ± 53024.574  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7531016.444 ops/s
# Warmup Iteration   2: 15224518.970 ops/s
# Warmup Iteration   3: 13081143.982 ops/s
# Warmup Iteration   4: 15358565.596 ops/s
# Warmup Iteration   5: 15382573.918 ops/s
# Warmup Iteration   6: 15392646.604 ops/s
# Warmup Iteration   7: 15402564.978 ops/s
# Warmup Iteration   8: 15329368.086 ops/s
# Warmup Iteration   9: 15312436.169 ops/s
# Warmup Iteration  10: 15412876.177 ops/s
# Warmup Iteration  11: 15360314.035 ops/s
# Warmup Iteration  12: 15413898.931 ops/s
# Warmup Iteration  13: 15409208.397 ops/s
# Warmup Iteration  14: 15411124.312 ops/s
# Warmup Iteration  15: 15360748.633 ops/s
# Warmup Iteration  16: 15384396.442 ops/s
# Warmup Iteration  17: 15391399.140 ops/s
# Warmup Iteration  18: 15381109.331 ops/s
# Warmup Iteration  19: 15366936.462 ops/s
# Warmup Iteration  20: 15338346.371 ops/s
# Warmup Iteration  21: 15370513.206 ops/s
# Warmup Iteration  22: 15388286.639 ops/s
# Warmup Iteration  23: 15430451.219 ops/s
# Warmup Iteration  24: 15372799.548 ops/s
# Warmup Iteration  25: 15518293.713 ops/s
# Warmup Iteration  26: 15212618.984 ops/s
# Warmup Iteration  27: 15384108.929 ops/s
# Warmup Iteration  28: 15427825.703 ops/s
# Warmup Iteration  29: 15339212.326 ops/s
# Warmup Iteration  30: 15295768.684 ops/s
Iteration   1: 15275916.928 ops/s
Iteration   2: 15258658.007 ops/s
Iteration   3: 15316085.198 ops/s
Iteration   4: 15372567.890 ops/s
Iteration   5: 15375502.175 ops/s
Iteration   6: 15444831.914 ops/s
Iteration   7: 15429933.926 ops/s
Iteration   8: 15311886.168 ops/s
Iteration   9: 15386140.162 ops/s
Iteration  10: 15310189.514 ops/s
Iteration  11: 15480824.239 ops/s
Iteration  12: 15423992.168 ops/s
Iteration  13: 15501513.714 ops/s
Iteration  14: 15473241.530 ops/s
Iteration  15: 15380619.574 ops/s
Iteration  16: 15401906.317 ops/s
Iteration  17: 15388161.026 ops/s
Iteration  18: 15386778.374 ops/s
Iteration  19: 15386612.758 ops/s
Iteration  20: 15356370.472 ops/s
Iteration  21: 15328874.495 ops/s
Iteration  22: 15447778.768 ops/s
Iteration  23: 15401224.243 ops/s
Iteration  24: 15218934.906 ops/s
Iteration  25: 15347914.810 ops/s
Iteration  26: 15310490.012 ops/s
Iteration  27: 15387466.965 ops/s
Iteration  28: 15447254.458 ops/s
Iteration  29: 15298090.704 ops/s
Iteration  30: 15407553.186 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLast":
  15375243.820 ±(99.9%) 45339.126 ops/s [Average]
  (min, avg, max) = (15218934.906, 15375243.820, 15501513.714), stdev = 67861.475
  CI (99.9%): [15329904.694, 15420582.946] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getLast  thrpt   30  15375243.820 ± 45339.126  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLastOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLastOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10297566.746 ops/s
# Warmup Iteration   2: 19180786.672 ops/s
# Warmup Iteration   3: 17803572.058 ops/s
# Warmup Iteration   4: 19919756.705 ops/s
# Warmup Iteration   5: 19677546.334 ops/s
# Warmup Iteration   6: 19792442.288 ops/s
# Warmup Iteration   7: 19878146.810 ops/s
# Warmup Iteration   8: 19912692.000 ops/s
# Warmup Iteration   9: 19921950.826 ops/s
# Warmup Iteration  10: 19885343.537 ops/s
# Warmup Iteration  11: 19832689.715 ops/s
# Warmup Iteration  12: 19940180.161 ops/s
# Warmup Iteration  13: 19922143.063 ops/s
# Warmup Iteration  14: 19829825.265 ops/s
# Warmup Iteration  15: 19909966.250 ops/s
# Warmup Iteration  16: 19848938.551 ops/s
# Warmup Iteration  17: 19936964.782 ops/s
# Warmup Iteration  18: 19857435.454 ops/s
# Warmup Iteration  19: 19852632.802 ops/s
# Warmup Iteration  20: 19893641.122 ops/s
# Warmup Iteration  21: 19863465.803 ops/s
# Warmup Iteration  22: 19870619.106 ops/s
# Warmup Iteration  23: 19808226.523 ops/s
# Warmup Iteration  24: 19912182.015 ops/s
# Warmup Iteration  25: 19882996.021 ops/s
# Warmup Iteration  26: 19857637.775 ops/s
# Warmup Iteration  27: 19877748.735 ops/s
# Warmup Iteration  28: 19770540.610 ops/s
# Warmup Iteration  29: 19918180.975 ops/s
# Warmup Iteration  30: 19746626.525 ops/s
Iteration   1: 19875708.733 ops/s
Iteration   2: 19820476.267 ops/s
Iteration   3: 19899559.184 ops/s
Iteration   4: 19850145.162 ops/s
Iteration   5: 19893781.457 ops/s
Iteration   6: 19971125.571 ops/s
Iteration   7: 19917356.383 ops/s
Iteration   8: 19882028.478 ops/s
Iteration   9: 19812901.293 ops/s
Iteration  10: 20000951.923 ops/s
Iteration  11: 19675387.588 ops/s
Iteration  12: 19691620.443 ops/s
Iteration  13: 19826538.746 ops/s
Iteration  14: 19817987.452 ops/s
Iteration  15: 19909196.558 ops/s
Iteration  16: 19906342.763 ops/s
Iteration  17: 19852991.692 ops/s
Iteration  18: 19830537.953 ops/s
Iteration  19: 19823442.309 ops/s
Iteration  20: 19782078.734 ops/s
Iteration  21: 19693417.548 ops/s
Iteration  22: 19817651.368 ops/s
Iteration  23: 19988800.877 ops/s
Iteration  24: 19754243.999 ops/s
Iteration  25: 19990168.670 ops/s
Iteration  26: 19955024.488 ops/s
Iteration  27: 19766765.159 ops/s
Iteration  28: 19798208.557 ops/s
Iteration  29: 19852453.994 ops/s
Iteration  30: 19832773.091 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getLastOptional":
  19849655.548 ±(99.9%) 57449.503 ops/s [Average]
  (min, avg, max) = (19675387.588, 19849655.548, 20000951.923), stdev = 85987.718
  CI (99.9%): [19792206.045, 19907105.051] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getLastOptional  thrpt   30  19849655.548 ± 57449.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15149295.851 ops/s
# Warmup Iteration   2: 29705398.377 ops/s
# Warmup Iteration   3: 25535646.711 ops/s
# Warmup Iteration   4: 29918471.821 ops/s
# Warmup Iteration   5: 30099003.025 ops/s
# Warmup Iteration   6: 30115474.880 ops/s
# Warmup Iteration   7: 30033456.135 ops/s
# Warmup Iteration   8: 30066306.337 ops/s
# Warmup Iteration   9: 30098737.734 ops/s
# Warmup Iteration  10: 30048668.462 ops/s
# Warmup Iteration  11: 30052935.987 ops/s
# Warmup Iteration  12: 30045246.106 ops/s
# Warmup Iteration  13: 30039362.988 ops/s
# Warmup Iteration  14: 30022026.133 ops/s
# Warmup Iteration  15: 30018425.396 ops/s
# Warmup Iteration  16: 29925091.061 ops/s
# Warmup Iteration  17: 30144801.012 ops/s
# Warmup Iteration  18: 30033739.426 ops/s
# Warmup Iteration  19: 30081655.092 ops/s
# Warmup Iteration  20: 30040449.615 ops/s
# Warmup Iteration  21: 29957516.269 ops/s
# Warmup Iteration  22: 30139818.502 ops/s
# Warmup Iteration  23: 29999441.025 ops/s
# Warmup Iteration  24: 30088025.684 ops/s
# Warmup Iteration  25: 29963990.973 ops/s
# Warmup Iteration  26: 30100960.904 ops/s
# Warmup Iteration  27: 30087027.901 ops/s
# Warmup Iteration  28: 30058142.486 ops/s
# Warmup Iteration  29: 29963876.166 ops/s
# Warmup Iteration  30: 30017858.698 ops/s
Iteration   1: 29912908.959 ops/s
Iteration   2: 30026162.188 ops/s
Iteration   3: 30066813.078 ops/s
Iteration   4: 30017924.807 ops/s
Iteration   5: 30050080.721 ops/s
Iteration   6: 30083944.542 ops/s
Iteration   7: 29946640.665 ops/s
Iteration   8: 30009226.320 ops/s
Iteration   9: 30171486.270 ops/s
Iteration  10: 29986995.934 ops/s
Iteration  11: 30089630.448 ops/s
Iteration  12: 30163223.043 ops/s
Iteration  13: 29933786.380 ops/s
Iteration  14: 30027093.548 ops/s
Iteration  15: 29920106.642 ops/s
Iteration  16: 30082594.553 ops/s
Iteration  17: 30007336.738 ops/s
Iteration  18: 30069130.908 ops/s
Iteration  19: 29957209.205 ops/s
Iteration  20: 30048853.469 ops/s
Iteration  21: 29973699.737 ops/s
Iteration  22: 30061401.861 ops/s
Iteration  23: 30058028.310 ops/s
Iteration  24: 29981407.614 ops/s
Iteration  25: 30156304.617 ops/s
Iteration  26: 30157151.366 ops/s
Iteration  27: 30017488.349 ops/s
Iteration  28: 30078509.954 ops/s
Iteration  29: 29981439.923 ops/s
Iteration  30: 30214506.965 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly":
  30041702.904 ±(99.9%) 51918.598 ops/s [Average]
  (min, avg, max) = (29912908.959, 30041702.904, 30214506.965), stdev = 77709.319
  CI (99.9%): [29989784.306, 30093621.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_getOnly  thrpt   30  30041702.904 ± 51918.598  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762718.868 ops/s
# Warmup Iteration   2: 781270.991 ops/s
# Warmup Iteration   3: 1020585.136 ops/s
# Warmup Iteration   4: 1022384.827 ops/s
# Warmup Iteration   5: 1023286.811 ops/s
# Warmup Iteration   6: 1020682.561 ops/s
# Warmup Iteration   7: 1025696.619 ops/s
# Warmup Iteration   8: 1025747.807 ops/s
# Warmup Iteration   9: 1023977.766 ops/s
# Warmup Iteration  10: 1025745.361 ops/s
# Warmup Iteration  11: 1025686.116 ops/s
# Warmup Iteration  12: 868783.690 ops/s
# Warmup Iteration  13: 1026573.726 ops/s
# Warmup Iteration  14: 1029584.361 ops/s
# Warmup Iteration  15: 1027289.878 ops/s
# Warmup Iteration  16: 1028900.612 ops/s
# Warmup Iteration  17: 1087811.404 ops/s
# Warmup Iteration  18: 1086594.850 ops/s
# Warmup Iteration  19: 1089021.377 ops/s
# Warmup Iteration  20: 1088254.849 ops/s
# Warmup Iteration  21: 1082913.619 ops/s
# Warmup Iteration  22: 1088716.145 ops/s
# Warmup Iteration  23: 1089748.832 ops/s
# Warmup Iteration  24: 1083573.344 ops/s
# Warmup Iteration  25: 1082667.140 ops/s
# Warmup Iteration  26: 1085497.405 ops/s
# Warmup Iteration  27: 1088272.259 ops/s
# Warmup Iteration  28: 1081081.938 ops/s
# Warmup Iteration  29: 1087168.695 ops/s
# Warmup Iteration  30: 1089598.774 ops/s
Iteration   1: 1087827.985 ops/s
Iteration   2: 1090896.881 ops/s
Iteration   3: 1088213.455 ops/s
Iteration   4: 1089040.825 ops/s
Iteration   5: 1089248.662 ops/s
Iteration   6: 1087388.434 ops/s
Iteration   7: 1090500.288 ops/s
Iteration   8: 1085736.377 ops/s
Iteration   9: 1092005.552 ops/s
Iteration  10: 1097185.322 ops/s
Iteration  11: 1087289.941 ops/s
Iteration  12: 1082950.563 ops/s
Iteration  13: 1094237.101 ops/s
Iteration  14: 1095345.963 ops/s
Iteration  15: 1095557.556 ops/s
Iteration  16: 1087466.918 ops/s
Iteration  17: 1088729.605 ops/s
Iteration  18: 1090582.477 ops/s
Iteration  19: 1087472.387 ops/s
Iteration  20: 1090118.921 ops/s
Iteration  21: 1086625.015 ops/s
Iteration  22: 1091391.474 ops/s
Iteration  23: 1092118.994 ops/s
Iteration  24: 1084274.325 ops/s
Iteration  25: 1082572.572 ops/s
Iteration  26: 1085572.955 ops/s
Iteration  27: 1091216.179 ops/s
Iteration  28: 1085178.992 ops/s
Iteration  29: 1088010.545 ops/s
Iteration  30: 1092946.980 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_empty_throws":
  1089256.775 ±(99.9%) 2439.036 ops/s [Average]
  (min, avg, max) = (1082572.572, 1089256.775, 1097185.322), stdev = 3650.634
  CI (99.9%): [1086817.739, 1091695.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1089256.775 ± 2439.036  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 758540.088 ops/s
# Warmup Iteration   2: 787053.396 ops/s
# Warmup Iteration   3: 1014086.106 ops/s
# Warmup Iteration   4: 1013382.522 ops/s
# Warmup Iteration   5: 1012532.604 ops/s
# Warmup Iteration   6: 1021895.851 ops/s
# Warmup Iteration   7: 1011368.692 ops/s
# Warmup Iteration   8: 1015688.368 ops/s
# Warmup Iteration   9: 1018438.489 ops/s
# Warmup Iteration  10: 1014358.187 ops/s
# Warmup Iteration  11: 1014232.877 ops/s
# Warmup Iteration  12: 856292.147 ops/s
# Warmup Iteration  13: 1017579.582 ops/s
# Warmup Iteration  14: 1015769.017 ops/s
# Warmup Iteration  15: 1016008.532 ops/s
# Warmup Iteration  16: 1018633.170 ops/s
# Warmup Iteration  17: 1079254.864 ops/s
# Warmup Iteration  18: 1081143.293 ops/s
# Warmup Iteration  19: 1081728.032 ops/s
# Warmup Iteration  20: 1082736.727 ops/s
# Warmup Iteration  21: 1082828.559 ops/s
# Warmup Iteration  22: 1080302.850 ops/s
# Warmup Iteration  23: 1085449.103 ops/s
# Warmup Iteration  24: 1086530.579 ops/s
# Warmup Iteration  25: 1083912.508 ops/s
# Warmup Iteration  26: 1085135.018 ops/s
# Warmup Iteration  27: 1087220.840 ops/s
# Warmup Iteration  28: 1086367.303 ops/s
# Warmup Iteration  29: 1082824.749 ops/s
# Warmup Iteration  30: 1081190.287 ops/s
Iteration   1: 1078906.523 ops/s
Iteration   2: 1085344.956 ops/s
Iteration   3: 1080529.430 ops/s
Iteration   4: 1082025.433 ops/s
Iteration   5: 1085454.484 ops/s
Iteration   6: 1082898.258 ops/s
Iteration   7: 1078518.257 ops/s
Iteration   8: 1076914.063 ops/s
Iteration   9: 1083657.533 ops/s
Iteration  10: 1078561.168 ops/s
Iteration  11: 1079305.535 ops/s
Iteration  12: 1085783.874 ops/s
Iteration  13: 1088257.084 ops/s
Iteration  14: 1089104.056 ops/s
Iteration  15: 1083238.113 ops/s
Iteration  16: 1085254.164 ops/s
Iteration  17: 1087145.131 ops/s
Iteration  18: 1082016.895 ops/s
Iteration  19: 1084483.912 ops/s
Iteration  20: 1086021.047 ops/s
Iteration  21: 1083543.062 ops/s
Iteration  22: 1081930.385 ops/s
Iteration  23: 1077125.957 ops/s
Iteration  24: 1084708.047 ops/s
Iteration  25: 1076502.071 ops/s
Iteration  26: 1085216.102 ops/s
Iteration  27: 1071829.823 ops/s
Iteration  28: 1076391.075 ops/s
Iteration  29: 1082082.603 ops/s
Iteration  30: 1081807.519 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1082151.885 ±(99.9%) 2685.795 ops/s [Average]
  (min, avg, max) = (1071829.823, 1082151.885, 1089104.056), stdev = 4019.972
  CI (99.9%): [1079466.090, 1084837.680] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1082151.885 ± 2685.795  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 24433142.202 ops/s
# Warmup Iteration   2: 48235066.577 ops/s
# Warmup Iteration   3: 40606032.824 ops/s
# Warmup Iteration   4: 47460135.992 ops/s
# Warmup Iteration   5: 47287137.339 ops/s
# Warmup Iteration   6: 47256663.369 ops/s
# Warmup Iteration   7: 47751115.419 ops/s
# Warmup Iteration   8: 47657495.087 ops/s
# Warmup Iteration   9: 47839331.575 ops/s
# Warmup Iteration  10: 47882177.733 ops/s
# Warmup Iteration  11: 47534141.759 ops/s
# Warmup Iteration  12: 47606031.016 ops/s
# Warmup Iteration  13: 48021750.963 ops/s
# Warmup Iteration  14: 47760796.500 ops/s
# Warmup Iteration  15: 47843973.665 ops/s
# Warmup Iteration  16: 48028069.632 ops/s
# Warmup Iteration  17: 48158352.221 ops/s
# Warmup Iteration  18: 48213298.521 ops/s
# Warmup Iteration  19: 48067523.045 ops/s
# Warmup Iteration  20: 48160233.000 ops/s
# Warmup Iteration  21: 47991089.252 ops/s
# Warmup Iteration  22: 48119795.809 ops/s
# Warmup Iteration  23: 48218318.239 ops/s
# Warmup Iteration  24: 48099105.620 ops/s
# Warmup Iteration  25: 47681572.380 ops/s
# Warmup Iteration  26: 48186583.341 ops/s
# Warmup Iteration  27: 48073189.521 ops/s
# Warmup Iteration  28: 48451378.559 ops/s
# Warmup Iteration  29: 48257977.427 ops/s
# Warmup Iteration  30: 48332540.624 ops/s
Iteration   1: 48346770.162 ops/s
Iteration   2: 48060384.167 ops/s
Iteration   3: 48237337.254 ops/s
Iteration   4: 48463381.565 ops/s
Iteration   5: 48340810.682 ops/s
Iteration   6: 48053179.959 ops/s
Iteration   7: 47539575.853 ops/s
Iteration   8: 47993859.427 ops/s
Iteration   9: 48168257.783 ops/s
Iteration  10: 47714456.329 ops/s
Iteration  11: 48255334.047 ops/s
Iteration  12: 47978451.407 ops/s
Iteration  13: 48349853.822 ops/s
Iteration  14: 48027084.796 ops/s
Iteration  15: 48261010.343 ops/s
Iteration  16: 48061249.581 ops/s
Iteration  17: 48212767.047 ops/s
Iteration  18: 48053263.330 ops/s
Iteration  19: 48282130.170 ops/s
Iteration  20: 48321218.258 ops/s
Iteration  21: 47888532.131 ops/s
Iteration  22: 48159286.987 ops/s
Iteration  23: 47883595.833 ops/s
Iteration  24: 48058282.723 ops/s
Iteration  25: 48225485.588 ops/s
Iteration  26: 48277096.452 ops/s
Iteration  27: 48415563.256 ops/s
Iteration  28: 48149018.525 ops/s
Iteration  29: 47813251.388 ops/s
Iteration  30: 48081985.191 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException":
  48122415.802 ±(99.9%) 141274.171 ops/s [Average]
  (min, avg, max) = (47539575.853, 48122415.802, 48463381.565), stdev = 211452.545
  CI (99.9%): [47981141.631, 48263689.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_getWithArrayIndexOutOfBoundsException  thrpt   30  48122415.802 ± 141274.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 721435.744 ops/s
# Warmup Iteration   2: 746187.190 ops/s
# Warmup Iteration   3: 949800.953 ops/s
# Warmup Iteration   4: 961709.576 ops/s
# Warmup Iteration   5: 968536.232 ops/s
# Warmup Iteration   6: 959893.894 ops/s
# Warmup Iteration   7: 970957.769 ops/s
# Warmup Iteration   8: 971827.791 ops/s
# Warmup Iteration   9: 972156.899 ops/s
# Warmup Iteration  10: 967891.097 ops/s
# Warmup Iteration  11: 966712.012 ops/s
# Warmup Iteration  12: 859804.338 ops/s
# Warmup Iteration  13: 929261.938 ops/s
# Warmup Iteration  14: 966849.118 ops/s
# Warmup Iteration  15: 968306.061 ops/s
# Warmup Iteration  16: 967982.128 ops/s
# Warmup Iteration  17: 1021560.123 ops/s
# Warmup Iteration  18: 1021444.952 ops/s
# Warmup Iteration  19: 1019225.137 ops/s
# Warmup Iteration  20: 1024090.992 ops/s
# Warmup Iteration  21: 1024041.081 ops/s
# Warmup Iteration  22: 1024749.753 ops/s
# Warmup Iteration  23: 1026846.114 ops/s
# Warmup Iteration  24: 1025739.402 ops/s
# Warmup Iteration  25: 1025264.748 ops/s
# Warmup Iteration  26: 1020959.004 ops/s
# Warmup Iteration  27: 1020311.525 ops/s
# Warmup Iteration  28: 1025329.605 ops/s
# Warmup Iteration  29: 1021893.949 ops/s
# Warmup Iteration  30: 1028473.523 ops/s
Iteration   1: 1018573.486 ops/s
Iteration   2: 1021239.924 ops/s
Iteration   3: 1019215.627 ops/s
Iteration   4: 1026150.216 ops/s
Iteration   5: 1020699.768 ops/s
Iteration   6: 1025478.804 ops/s
Iteration   7: 1022691.651 ops/s
Iteration   8: 1027520.436 ops/s
Iteration   9: 1020641.705 ops/s
Iteration  10: 1020922.465 ops/s
Iteration  11: 1022810.640 ops/s
Iteration  12: 1027205.750 ops/s
Iteration  13: 1020300.807 ops/s
Iteration  14: 1019653.449 ops/s
Iteration  15: 1023275.828 ops/s
Iteration  16: 1023926.097 ops/s
Iteration  17: 1020267.573 ops/s
Iteration  18: 1021675.359 ops/s
Iteration  19: 1020954.573 ops/s
Iteration  20: 1022925.913 ops/s
Iteration  21: 1022948.515 ops/s
Iteration  22: 1024275.465 ops/s
Iteration  23: 1028889.374 ops/s
Iteration  24: 1022727.137 ops/s
Iteration  25: 1016649.044 ops/s
Iteration  26: 1024564.408 ops/s
Iteration  27: 1027667.134 ops/s
Iteration  28: 1022577.074 ops/s
Iteration  29: 1017863.343 ops/s
Iteration  30: 1022162.792 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException":
  1022548.479 ±(99.9%) 2006.007 ops/s [Average]
  (min, avg, max) = (1016649.044, 1022548.479, 1028889.374), stdev = 3002.497
  CI (99.9%): [1020542.472, 1024554.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_getWithIndexOutOfBoundsException  thrpt   30  1022548.479 ± 2006.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 415982.339 ops/s
# Warmup Iteration   2: 893650.018 ops/s
# Warmup Iteration   3: 962217.871 ops/s
# Warmup Iteration   4: 965398.904 ops/s
# Warmup Iteration   5: 803437.399 ops/s
# Warmup Iteration   6: 972696.962 ops/s
# Warmup Iteration   7: 969434.967 ops/s
# Warmup Iteration   8: 969104.832 ops/s
# Warmup Iteration   9: 966702.435 ops/s
# Warmup Iteration  10: 965680.961 ops/s
# Warmup Iteration  11: 968879.037 ops/s
# Warmup Iteration  12: 966863.167 ops/s
# Warmup Iteration  13: 973640.339 ops/s
# Warmup Iteration  14: 974521.624 ops/s
# Warmup Iteration  15: 972148.556 ops/s
# Warmup Iteration  16: 968090.223 ops/s
# Warmup Iteration  17: 969181.481 ops/s
# Warmup Iteration  18: 968836.812 ops/s
# Warmup Iteration  19: 969038.376 ops/s
# Warmup Iteration  20: 971501.631 ops/s
# Warmup Iteration  21: 968742.467 ops/s
# Warmup Iteration  22: 967592.627 ops/s
# Warmup Iteration  23: 971321.328 ops/s
# Warmup Iteration  24: 975650.313 ops/s
# Warmup Iteration  25: 963953.659 ops/s
# Warmup Iteration  26: 965253.516 ops/s
# Warmup Iteration  27: 973774.537 ops/s
# Warmup Iteration  28: 971001.337 ops/s
# Warmup Iteration  29: 977101.103 ops/s
# Warmup Iteration  30: 971081.738 ops/s
Iteration   1: 974261.729 ops/s
Iteration   2: 966415.910 ops/s
Iteration   3: 974209.349 ops/s
Iteration   4: 972711.781 ops/s
Iteration   5: 968395.727 ops/s
Iteration   6: 966319.736 ops/s
Iteration   7: 962061.859 ops/s
Iteration   8: 965709.096 ops/s
Iteration   9: 969597.339 ops/s
Iteration  10: 967513.917 ops/s
Iteration  11: 973108.787 ops/s
Iteration  12: 961362.441 ops/s
Iteration  13: 973134.845 ops/s
Iteration  14: 972342.803 ops/s
Iteration  15: 967712.496 ops/s
Iteration  16: 970923.151 ops/s
Iteration  17: 975734.814 ops/s
Iteration  18: 969176.767 ops/s
Iteration  19: 971067.453 ops/s
Iteration  20: 970580.449 ops/s
Iteration  21: 966497.933 ops/s
Iteration  22: 969657.939 ops/s
Iteration  23: 965525.874 ops/s
Iteration  24: 968842.695 ops/s
Iteration  25: 962637.947 ops/s
Iteration  26: 965978.582 ops/s
Iteration  27: 963870.793 ops/s
Iteration  28: 978000.397 ops/s
Iteration  29: 971296.576 ops/s
Iteration  30: 970672.147 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupBy":
  969177.378 ±(99.9%) 2741.250 ops/s [Average]
  (min, avg, max) = (961362.441, 969177.378, 978000.397), stdev = 4102.975
  CI (99.9%): [966436.128, 971918.628] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupBy  thrpt   30  969177.378 ± 2741.250  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 125068.159 ops/s
# Warmup Iteration   2: 216868.606 ops/s
# Warmup Iteration   3: 257519.120 ops/s
# Warmup Iteration   4: 258101.841 ops/s
# Warmup Iteration   5: 259457.228 ops/s
# Warmup Iteration   6: 210850.981 ops/s
# Warmup Iteration   7: 259334.554 ops/s
# Warmup Iteration   8: 260303.242 ops/s
# Warmup Iteration   9: 260537.414 ops/s
# Warmup Iteration  10: 259800.406 ops/s
# Warmup Iteration  11: 260299.853 ops/s
# Warmup Iteration  12: 260278.241 ops/s
# Warmup Iteration  13: 261244.294 ops/s
# Warmup Iteration  14: 259876.911 ops/s
# Warmup Iteration  15: 259825.474 ops/s
# Warmup Iteration  16: 259348.563 ops/s
# Warmup Iteration  17: 259753.057 ops/s
# Warmup Iteration  18: 259549.544 ops/s
# Warmup Iteration  19: 260727.823 ops/s
# Warmup Iteration  20: 259772.633 ops/s
# Warmup Iteration  21: 259887.665 ops/s
# Warmup Iteration  22: 259380.330 ops/s
# Warmup Iteration  23: 259907.867 ops/s
# Warmup Iteration  24: 260584.699 ops/s
# Warmup Iteration  25: 259813.431 ops/s
# Warmup Iteration  26: 261187.305 ops/s
# Warmup Iteration  27: 260458.627 ops/s
# Warmup Iteration  28: 260736.633 ops/s
# Warmup Iteration  29: 260651.294 ops/s
# Warmup Iteration  30: 260168.075 ops/s
Iteration   1: 260290.303 ops/s
Iteration   2: 261228.469 ops/s
Iteration   3: 261387.981 ops/s
Iteration   4: 262089.880 ops/s
Iteration   5: 260224.235 ops/s
Iteration   6: 262176.314 ops/s
Iteration   7: 260221.809 ops/s
Iteration   8: 261398.674 ops/s
Iteration   9: 260876.637 ops/s
Iteration  10: 262380.055 ops/s
Iteration  11: 261103.423 ops/s
Iteration  12: 261204.820 ops/s
Iteration  13: 259988.528 ops/s
Iteration  14: 259491.795 ops/s
Iteration  15: 259996.185 ops/s
Iteration  16: 261171.092 ops/s
Iteration  17: 260203.042 ops/s
Iteration  18: 259890.130 ops/s
Iteration  19: 260957.584 ops/s
Iteration  20: 259005.363 ops/s
Iteration  21: 261105.728 ops/s
Iteration  22: 259925.105 ops/s
Iteration  23: 260371.486 ops/s
Iteration  24: 261629.404 ops/s
Iteration  25: 260757.358 ops/s
Iteration  26: 260110.445 ops/s
Iteration  27: 261251.924 ops/s
Iteration  28: 260055.608 ops/s
Iteration  29: 259979.250 ops/s
Iteration  30: 261394.084 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByEach":
  260728.890 ±(99.9%) 548.619 ops/s [Average]
  (min, avg, max) = (259005.363, 260728.890, 262380.055), stdev = 821.147
  CI (99.9%): [260180.271, 261277.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupByEach  thrpt   30  260728.890 ± 548.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5252252.427 ops/s
# Warmup Iteration   2: 12155710.615 ops/s
# Warmup Iteration   3: 12166007.658 ops/s
# Warmup Iteration   4: 10135949.645 ops/s
# Warmup Iteration   5: 12208434.559 ops/s
# Warmup Iteration   6: 12242809.541 ops/s
# Warmup Iteration   7: 12208036.198 ops/s
# Warmup Iteration   8: 12181579.065 ops/s
# Warmup Iteration   9: 12244957.174 ops/s
# Warmup Iteration  10: 12191993.425 ops/s
# Warmup Iteration  11: 12249274.295 ops/s
# Warmup Iteration  12: 12179456.072 ops/s
# Warmup Iteration  13: 12220437.810 ops/s
# Warmup Iteration  14: 12174859.395 ops/s
# Warmup Iteration  15: 12173904.714 ops/s
# Warmup Iteration  16: 12226051.781 ops/s
# Warmup Iteration  17: 12223246.617 ops/s
# Warmup Iteration  18: 12269268.591 ops/s
# Warmup Iteration  19: 12204044.079 ops/s
# Warmup Iteration  20: 12206731.719 ops/s
# Warmup Iteration  21: 12171771.513 ops/s
# Warmup Iteration  22: 12198253.893 ops/s
# Warmup Iteration  23: 12225262.307 ops/s
# Warmup Iteration  24: 12227636.678 ops/s
# Warmup Iteration  25: 12223617.204 ops/s
# Warmup Iteration  26: 12229296.093 ops/s
# Warmup Iteration  27: 12250219.968 ops/s
# Warmup Iteration  28: 12261573.179 ops/s
# Warmup Iteration  29: 12209363.333 ops/s
# Warmup Iteration  30: 12210892.344 ops/s
Iteration   1: 12197138.494 ops/s
Iteration   2: 12060181.435 ops/s
Iteration   3: 12240087.640 ops/s
Iteration   4: 12268290.643 ops/s
Iteration   5: 12260933.150 ops/s
Iteration   6: 12199042.592 ops/s
Iteration   7: 12182339.399 ops/s
Iteration   8: 12206604.069 ops/s
Iteration   9: 12199804.393 ops/s
Iteration  10: 12173472.903 ops/s
Iteration  11: 12203365.149 ops/s
Iteration  12: 12173450.078 ops/s
Iteration  13: 12207991.543 ops/s
Iteration  14: 12168305.926 ops/s
Iteration  15: 12201122.689 ops/s
Iteration  16: 12256232.629 ops/s
Iteration  17: 12228126.405 ops/s
Iteration  18: 12237006.523 ops/s
Iteration  19: 12204050.499 ops/s
Iteration  20: 12158314.924 ops/s
Iteration  21: 12313729.204 ops/s
Iteration  22: 12193585.120 ops/s
Iteration  23: 12207182.920 ops/s
Iteration  24: 12270558.251 ops/s
Iteration  25: 12247565.604 ops/s
Iteration  26: 12296607.983 ops/s
Iteration  27: 12257951.283 ops/s
Iteration  28: 12236253.242 ops/s
Iteration  29: 12308870.256 ops/s
Iteration  30: 12294983.615 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey":
  12221771.619 ±(99.9%) 35176.865 ops/s [Average]
  (min, avg, max) = (12060181.435, 12221771.619, 12313729.204), stdev = 52651.080
  CI (99.9%): [12186594.753, 12256948.484] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  12221771.619 ± 35176.865  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2364568.905 ops/s
# Warmup Iteration   2: 4776003.697 ops/s
# Warmup Iteration   3: 5079722.334 ops/s
# Warmup Iteration   4: 5111866.295 ops/s
# Warmup Iteration   5: 4180260.246 ops/s
# Warmup Iteration   6: 5092215.981 ops/s
# Warmup Iteration   7: 5108719.192 ops/s
# Warmup Iteration   8: 5101433.753 ops/s
# Warmup Iteration   9: 5087498.807 ops/s
# Warmup Iteration  10: 5106865.671 ops/s
# Warmup Iteration  11: 5096199.584 ops/s
# Warmup Iteration  12: 5090171.794 ops/s
# Warmup Iteration  13: 5099906.299 ops/s
# Warmup Iteration  14: 5120023.937 ops/s
# Warmup Iteration  15: 5098401.647 ops/s
# Warmup Iteration  16: 5103367.636 ops/s
# Warmup Iteration  17: 5116895.527 ops/s
# Warmup Iteration  18: 5090627.694 ops/s
# Warmup Iteration  19: 5104301.766 ops/s
# Warmup Iteration  20: 5081615.857 ops/s
# Warmup Iteration  21: 5108210.354 ops/s
# Warmup Iteration  22: 5094187.474 ops/s
# Warmup Iteration  23: 5108169.406 ops/s
# Warmup Iteration  24: 5097406.057 ops/s
# Warmup Iteration  25: 5093174.648 ops/s
# Warmup Iteration  26: 5112872.186 ops/s
# Warmup Iteration  27: 5113881.197 ops/s
# Warmup Iteration  28: 5100851.921 ops/s
# Warmup Iteration  29: 5111041.989 ops/s
# Warmup Iteration  30: 5081399.886 ops/s
Iteration   1: 5120053.325 ops/s
Iteration   2: 5110821.646 ops/s
Iteration   3: 5104833.606 ops/s
Iteration   4: 5091116.895 ops/s
Iteration   5: 5090398.486 ops/s
Iteration   6: 5075693.810 ops/s
Iteration   7: 5109467.346 ops/s
Iteration   8: 5103945.434 ops/s
Iteration   9: 5109238.632 ops/s
Iteration  10: 5071265.139 ops/s
Iteration  11: 5130056.266 ops/s
Iteration  12: 5114784.250 ops/s
Iteration  13: 5096744.950 ops/s
Iteration  14: 5075085.786 ops/s
Iteration  15: 5098243.839 ops/s
Iteration  16: 5116417.906 ops/s
Iteration  17: 5064750.450 ops/s
Iteration  18: 5102143.168 ops/s
Iteration  19: 5095817.507 ops/s
Iteration  20: 5102241.315 ops/s
Iteration  21: 5097767.807 ops/s
Iteration  22: 5123592.917 ops/s
Iteration  23: 5086900.184 ops/s
Iteration  24: 5077189.034 ops/s
Iteration  25: 5076586.886 ops/s
Iteration  26: 5123863.124 ops/s
Iteration  27: 5101380.683 ops/s
Iteration  28: 5069578.282 ops/s
Iteration  29: 5102618.186 ops/s
Iteration  30: 5067970.111 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target":
  5097018.899 ±(99.9%) 12207.057 ops/s [Average]
  (min, avg, max) = (5064750.450, 5097018.899, 5130056.266), stdev = 18270.950
  CI (99.9%): [5084811.842, 5109225.956] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  5097018.899 ± 12207.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493139.932 ops/s
# Warmup Iteration   2: 558817.346 ops/s
# Warmup Iteration   3: 744328.283 ops/s
# Warmup Iteration   4: 743888.815 ops/s
# Warmup Iteration   5: 741489.374 ops/s
# Warmup Iteration   6: 743569.556 ops/s
# Warmup Iteration   7: 745116.895 ops/s
# Warmup Iteration   8: 746671.768 ops/s
# Warmup Iteration   9: 746203.173 ops/s
# Warmup Iteration  10: 634809.774 ops/s
# Warmup Iteration  11: 731559.165 ops/s
# Warmup Iteration  12: 744084.028 ops/s
# Warmup Iteration  13: 742023.083 ops/s
# Warmup Iteration  14: 738635.685 ops/s
# Warmup Iteration  15: 745373.214 ops/s
# Warmup Iteration  16: 741898.457 ops/s
# Warmup Iteration  17: 781959.987 ops/s
# Warmup Iteration  18: 783977.979 ops/s
# Warmup Iteration  19: 777504.873 ops/s
# Warmup Iteration  20: 774720.692 ops/s
# Warmup Iteration  21: 781244.576 ops/s
# Warmup Iteration  22: 779288.880 ops/s
# Warmup Iteration  23: 778952.118 ops/s
# Warmup Iteration  24: 780153.216 ops/s
# Warmup Iteration  25: 780832.069 ops/s
# Warmup Iteration  26: 779384.554 ops/s
# Warmup Iteration  27: 779437.580 ops/s
# Warmup Iteration  28: 779744.561 ops/s
# Warmup Iteration  29: 778943.261 ops/s
# Warmup Iteration  30: 778172.255 ops/s
Iteration   1: 774040.224 ops/s
Iteration   2: 771090.383 ops/s
Iteration   3: 780552.955 ops/s
Iteration   4: 776467.603 ops/s
Iteration   5: 774132.031 ops/s
Iteration   6: 776202.464 ops/s
Iteration   7: 780696.531 ops/s
Iteration   8: 775356.217 ops/s
Iteration   9: 778453.775 ops/s
Iteration  10: 772269.366 ops/s
Iteration  11: 773156.563 ops/s
Iteration  12: 778361.930 ops/s
Iteration  13: 773908.282 ops/s
Iteration  14: 777377.499 ops/s
Iteration  15: 776739.093 ops/s
Iteration  16: 784486.039 ops/s
Iteration  17: 782411.502 ops/s
Iteration  18: 778049.188 ops/s
Iteration  19: 782651.306 ops/s
Iteration  20: 780824.994 ops/s
Iteration  21: 779819.836 ops/s
Iteration  22: 779086.184 ops/s
Iteration  23: 779594.715 ops/s
Iteration  24: 779653.033 ops/s
Iteration  25: 777735.514 ops/s
Iteration  26: 780500.837 ops/s
Iteration  27: 776817.138 ops/s
Iteration  28: 784182.096 ops/s
Iteration  29: 778084.893 ops/s
Iteration  30: 780688.009 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  778113.007 ±(99.9%) 2266.711 ops/s [Average]
  (min, avg, max) = (771090.383, 778113.007, 784486.039), stdev = 3392.706
  CI (99.9%): [775846.296, 780379.717] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  778113.007 ± 2266.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531472.688 ops/s
# Warmup Iteration   2: 560923.143 ops/s
# Warmup Iteration   3: 763898.742 ops/s
# Warmup Iteration   4: 762435.984 ops/s
# Warmup Iteration   5: 759018.828 ops/s
# Warmup Iteration   6: 763337.106 ops/s
# Warmup Iteration   7: 760839.475 ops/s
# Warmup Iteration   8: 759374.749 ops/s
# Warmup Iteration   9: 765017.279 ops/s
# Warmup Iteration  10: 762613.746 ops/s
# Warmup Iteration  11: 648480.826 ops/s
# Warmup Iteration  12: 746259.026 ops/s
# Warmup Iteration  13: 758243.102 ops/s
# Warmup Iteration  14: 762748.531 ops/s
# Warmup Iteration  15: 759942.329 ops/s
# Warmup Iteration  16: 765253.982 ops/s
# Warmup Iteration  17: 802227.400 ops/s
# Warmup Iteration  18: 800394.432 ops/s
# Warmup Iteration  19: 803511.312 ops/s
# Warmup Iteration  20: 802209.118 ops/s
# Warmup Iteration  21: 804063.898 ops/s
# Warmup Iteration  22: 801857.760 ops/s
# Warmup Iteration  23: 804240.318 ops/s
# Warmup Iteration  24: 805868.712 ops/s
# Warmup Iteration  25: 803361.188 ops/s
# Warmup Iteration  26: 798821.457 ops/s
# Warmup Iteration  27: 802390.674 ops/s
# Warmup Iteration  28: 802648.343 ops/s
# Warmup Iteration  29: 805282.271 ops/s
# Warmup Iteration  30: 800502.568 ops/s
Iteration   1: 800458.151 ops/s
Iteration   2: 806699.566 ops/s
Iteration   3: 800792.927 ops/s
Iteration   4: 797658.350 ops/s
Iteration   5: 802975.344 ops/s
Iteration   6: 802102.770 ops/s
Iteration   7: 799206.638 ops/s
Iteration   8: 796861.692 ops/s
Iteration   9: 803103.116 ops/s
Iteration  10: 796053.014 ops/s
Iteration  11: 801458.058 ops/s
Iteration  12: 799407.700 ops/s
Iteration  13: 802166.298 ops/s
Iteration  14: 799770.574 ops/s
Iteration  15: 803299.756 ops/s
Iteration  16: 797033.229 ops/s
Iteration  17: 797408.657 ops/s
Iteration  18: 789970.520 ops/s
Iteration  19: 800765.642 ops/s
Iteration  20: 795367.978 ops/s
Iteration  21: 798842.525 ops/s
Iteration  22: 797601.020 ops/s
Iteration  23: 801605.216 ops/s
Iteration  24: 801503.039 ops/s
Iteration  25: 798722.577 ops/s
Iteration  26: 800193.177 ops/s
Iteration  27: 799514.298 ops/s
Iteration  28: 797270.102 ops/s
Iteration  29: 802908.105 ops/s
Iteration  30: 792404.838 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  799437.496 ±(99.9%) 2268.620 ops/s [Average]
  (min, avg, max) = (789970.520, 799437.496, 806699.566), stdev = 3395.565
  CI (99.9%): [797168.875, 801706.116] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  799437.496 ± 2268.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_indexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_indexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13971367.086 ops/s
# Warmup Iteration   2: 29327620.869 ops/s
# Warmup Iteration   3: 25238359.380 ops/s
# Warmup Iteration   4: 30042905.293 ops/s
# Warmup Iteration   5: 30073295.247 ops/s
# Warmup Iteration   6: 30187327.786 ops/s
# Warmup Iteration   7: 30032750.926 ops/s
# Warmup Iteration   8: 30038843.692 ops/s
# Warmup Iteration   9: 29950598.382 ops/s
# Warmup Iteration  10: 29980975.845 ops/s
# Warmup Iteration  11: 30066684.514 ops/s
# Warmup Iteration  12: 30064623.537 ops/s
# Warmup Iteration  13: 30128589.762 ops/s
# Warmup Iteration  14: 30171359.388 ops/s
# Warmup Iteration  15: 30161418.126 ops/s
# Warmup Iteration  16: 30061961.241 ops/s
# Warmup Iteration  17: 30077876.939 ops/s
# Warmup Iteration  18: 30056433.874 ops/s
# Warmup Iteration  19: 29994832.654 ops/s
# Warmup Iteration  20: 30104464.030 ops/s
# Warmup Iteration  21: 29954175.959 ops/s
# Warmup Iteration  22: 29896200.916 ops/s
# Warmup Iteration  23: 29894980.829 ops/s
# Warmup Iteration  24: 29889384.357 ops/s
# Warmup Iteration  25: 30039899.196 ops/s
# Warmup Iteration  26: 30057973.216 ops/s
# Warmup Iteration  27: 30037260.929 ops/s
# Warmup Iteration  28: 29924174.078 ops/s
# Warmup Iteration  29: 29978174.251 ops/s
# Warmup Iteration  30: 30033378.104 ops/s
Iteration   1: 29961877.671 ops/s
Iteration   2: 30074483.360 ops/s
Iteration   3: 30036959.547 ops/s
Iteration   4: 30088609.680 ops/s
Iteration   5: 30258041.861 ops/s
Iteration   6: 30002139.402 ops/s
Iteration   7: 30052564.935 ops/s
Iteration   8: 30168067.461 ops/s
Iteration   9: 30082938.837 ops/s
Iteration  10: 29921646.846 ops/s
Iteration  11: 30097168.412 ops/s
Iteration  12: 30082659.253 ops/s
Iteration  13: 29988687.339 ops/s
Iteration  14: 30131708.819 ops/s
Iteration  15: 30206687.652 ops/s
Iteration  16: 30057082.083 ops/s
Iteration  17: 30140906.350 ops/s
Iteration  18: 30148297.712 ops/s
Iteration  19: 30054247.244 ops/s
Iteration  20: 30168185.320 ops/s
Iteration  21: 30115022.349 ops/s
Iteration  22: 30043673.562 ops/s
Iteration  23: 30148592.067 ops/s
Iteration  24: 30080651.702 ops/s
Iteration  25: 30077214.564 ops/s
Iteration  26: 30120019.200 ops/s
Iteration  27: 29990843.146 ops/s
Iteration  28: 30191792.680 ops/s
Iteration  29: 30096626.764 ops/s
Iteration  30: 29868665.411 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_indexOf":
  30081868.708 ±(99.9%) 56324.617 ops/s [Average]
  (min, avg, max) = (29868665.411, 30081868.708, 30258041.861), stdev = 84304.041
  CI (99.9%): [30025544.091, 30138193.324] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_indexOf  thrpt   30  30081868.708 ± 56324.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8938163.988 ops/s
# Warmup Iteration   2: 18609814.022 ops/s
# Warmup Iteration   3: 18738819.867 ops/s
# Warmup Iteration   4: 15678046.722 ops/s
# Warmup Iteration   5: 18749080.548 ops/s
# Warmup Iteration   6: 18623875.416 ops/s
# Warmup Iteration   7: 18684001.364 ops/s
# Warmup Iteration   8: 18684365.611 ops/s
# Warmup Iteration   9: 18708163.147 ops/s
# Warmup Iteration  10: 18679048.720 ops/s
# Warmup Iteration  11: 18667663.706 ops/s
# Warmup Iteration  12: 18619082.608 ops/s
# Warmup Iteration  13: 18714216.615 ops/s
# Warmup Iteration  14: 18683328.712 ops/s
# Warmup Iteration  15: 18609720.601 ops/s
# Warmup Iteration  16: 18732149.394 ops/s
# Warmup Iteration  17: 18705951.745 ops/s
# Warmup Iteration  18: 18676865.789 ops/s
# Warmup Iteration  19: 18707541.664 ops/s
# Warmup Iteration  20: 18691557.600 ops/s
# Warmup Iteration  21: 18694872.874 ops/s
# Warmup Iteration  22: 18653031.169 ops/s
# Warmup Iteration  23: 18670100.624 ops/s
# Warmup Iteration  24: 18759560.021 ops/s
# Warmup Iteration  25: 18689110.185 ops/s
# Warmup Iteration  26: 18723335.079 ops/s
# Warmup Iteration  27: 18655950.385 ops/s
# Warmup Iteration  28: 18643067.529 ops/s
# Warmup Iteration  29: 18686002.297 ops/s
# Warmup Iteration  30: 18617646.843 ops/s
Iteration   1: 18698107.769 ops/s
Iteration   2: 18685363.908 ops/s
Iteration   3: 18581765.143 ops/s
Iteration   4: 18771918.848 ops/s
Iteration   5: 18702799.113 ops/s
Iteration   6: 18672384.676 ops/s
Iteration   7: 18580994.237 ops/s
Iteration   8: 18695748.662 ops/s
Iteration   9: 18725679.898 ops/s
Iteration  10: 18716286.660 ops/s
Iteration  11: 18715084.752 ops/s
Iteration  12: 18720869.186 ops/s
Iteration  13: 18691558.501 ops/s
Iteration  14: 18599175.715 ops/s
Iteration  15: 18761017.571 ops/s
Iteration  16: 18638128.269 ops/s
Iteration  17: 18629860.455 ops/s
Iteration  18: 18674402.244 ops/s
Iteration  19: 18782940.038 ops/s
Iteration  20: 18762853.308 ops/s
Iteration  21: 18650661.189 ops/s
Iteration  22: 18590606.815 ops/s
Iteration  23: 18668069.949 ops/s
Iteration  24: 18694509.145 ops/s
Iteration  25: 18651434.632 ops/s
Iteration  26: 18632336.951 ops/s
Iteration  27: 18618185.084 ops/s
Iteration  28: 18632278.844 ops/s
Iteration  29: 18558757.620 ops/s
Iteration  30: 18595683.384 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectInto":
  18669982.086 ±(99.9%) 40690.328 ops/s [Average]
  (min, avg, max) = (18558757.620, 18669982.086, 18782940.038), stdev = 60903.373
  CI (99.9%): [18629291.757, 18710672.414] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectInto  thrpt   30  18669982.086 ± 40690.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12679680.625 ops/s
# Warmup Iteration   2: 26051569.965 ops/s
# Warmup Iteration   3: 26396765.646 ops/s
# Warmup Iteration   4: 22177733.241 ops/s
# Warmup Iteration   5: 26462301.021 ops/s
# Warmup Iteration   6: 26483929.054 ops/s
# Warmup Iteration   7: 26325811.216 ops/s
# Warmup Iteration   8: 26408208.826 ops/s
# Warmup Iteration   9: 26525261.848 ops/s
# Warmup Iteration  10: 26376799.766 ops/s
# Warmup Iteration  11: 26452916.969 ops/s
# Warmup Iteration  12: 26557550.268 ops/s
# Warmup Iteration  13: 26338554.909 ops/s
# Warmup Iteration  14: 26434831.055 ops/s
# Warmup Iteration  15: 26510913.139 ops/s
# Warmup Iteration  16: 26464134.557 ops/s
# Warmup Iteration  17: 26489703.931 ops/s
# Warmup Iteration  18: 26384128.851 ops/s
# Warmup Iteration  19: 26331784.869 ops/s
# Warmup Iteration  20: 26332158.556 ops/s
# Warmup Iteration  21: 26418146.450 ops/s
# Warmup Iteration  22: 26348621.758 ops/s
# Warmup Iteration  23: 26520763.338 ops/s
# Warmup Iteration  24: 26427730.944 ops/s
# Warmup Iteration  25: 26453441.442 ops/s
# Warmup Iteration  26: 26446781.392 ops/s
# Warmup Iteration  27: 26529591.351 ops/s
# Warmup Iteration  28: 26395844.431 ops/s
# Warmup Iteration  29: 26431206.743 ops/s
# Warmup Iteration  30: 26403126.345 ops/s
Iteration   1: 26367549.692 ops/s
Iteration   2: 26515256.291 ops/s
Iteration   3: 26378204.515 ops/s
Iteration   4: 26370728.496 ops/s
Iteration   5: 26319569.148 ops/s
Iteration   6: 26520997.231 ops/s
Iteration   7: 26372411.063 ops/s
Iteration   8: 26272643.272 ops/s
Iteration   9: 26358746.817 ops/s
Iteration  10: 26489800.433 ops/s
Iteration  11: 26348983.104 ops/s
Iteration  12: 26455446.576 ops/s
Iteration  13: 26560506.500 ops/s
Iteration  14: 26474272.716 ops/s
Iteration  15: 26577360.152 ops/s
Iteration  16: 26427951.526 ops/s
Iteration  17: 26347357.040 ops/s
Iteration  18: 26439639.765 ops/s
Iteration  19: 26454557.224 ops/s
Iteration  20: 26451140.388 ops/s
Iteration  21: 26648594.867 ops/s
Iteration  22: 26310619.434 ops/s
Iteration  23: 26461242.046 ops/s
Iteration  24: 26492428.633 ops/s
Iteration  25: 26405846.702 ops/s
Iteration  26: 26461471.331 ops/s
Iteration  27: 26253280.686 ops/s
Iteration  28: 26311517.689 ops/s
Iteration  29: 26513236.570 ops/s
Iteration  30: 26320837.602 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoDouble":
  26422739.917 ±(99.9%) 63441.003 ops/s [Average]
  (min, avg, max) = (26253280.686, 26422739.917, 26648594.867), stdev = 94955.515
  CI (99.9%): [26359298.914, 26486180.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  26422739.917 ± 63441.003  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15989870.876 ops/s
# Warmup Iteration   2: 29855391.268 ops/s
# Warmup Iteration   3: 31966358.176 ops/s
# Warmup Iteration   4: 28062754.870 ops/s
# Warmup Iteration   5: 32860920.094 ops/s
# Warmup Iteration   6: 32738958.021 ops/s
# Warmup Iteration   7: 32825742.457 ops/s
# Warmup Iteration   8: 32767464.847 ops/s
# Warmup Iteration   9: 32669540.192 ops/s
# Warmup Iteration  10: 32732279.616 ops/s
# Warmup Iteration  11: 32783429.243 ops/s
# Warmup Iteration  12: 32702073.391 ops/s
# Warmup Iteration  13: 32793359.883 ops/s
# Warmup Iteration  14: 32797170.370 ops/s
# Warmup Iteration  15: 32851884.162 ops/s
# Warmup Iteration  16: 32468691.797 ops/s
# Warmup Iteration  17: 32642413.464 ops/s
# Warmup Iteration  18: 32599597.469 ops/s
# Warmup Iteration  19: 32843718.017 ops/s
# Warmup Iteration  20: 32799810.945 ops/s
# Warmup Iteration  21: 32696308.772 ops/s
# Warmup Iteration  22: 32785661.365 ops/s
# Warmup Iteration  23: 32933055.513 ops/s
# Warmup Iteration  24: 32877454.814 ops/s
# Warmup Iteration  25: 32814899.400 ops/s
# Warmup Iteration  26: 32922516.798 ops/s
# Warmup Iteration  27: 32861720.657 ops/s
# Warmup Iteration  28: 32839111.192 ops/s
# Warmup Iteration  29: 32895381.491 ops/s
# Warmup Iteration  30: 32812517.299 ops/s
Iteration   1: 32785928.977 ops/s
Iteration   2: 32747715.913 ops/s
Iteration   3: 32731410.721 ops/s
Iteration   4: 32787190.248 ops/s
Iteration   5: 32544012.217 ops/s
Iteration   6: 32777594.555 ops/s
Iteration   7: 32868506.647 ops/s
Iteration   8: 33040577.182 ops/s
Iteration   9: 32828749.140 ops/s
Iteration  10: 32803849.224 ops/s
Iteration  11: 32625498.307 ops/s
Iteration  12: 32778868.349 ops/s
Iteration  13: 32935280.472 ops/s
Iteration  14: 32823053.063 ops/s
Iteration  15: 32855423.960 ops/s
Iteration  16: 32840788.222 ops/s
Iteration  17: 32816069.962 ops/s
Iteration  18: 32764165.641 ops/s
Iteration  19: 32915850.969 ops/s
Iteration  20: 32582973.595 ops/s
Iteration  21: 32784625.877 ops/s
Iteration  22: 32956179.999 ops/s
Iteration  23: 32932534.609 ops/s
Iteration  24: 32865970.645 ops/s
Iteration  25: 32772965.251 ops/s
Iteration  26: 32794517.050 ops/s
Iteration  27: 32809326.279 ops/s
Iteration  28: 32814371.136 ops/s
Iteration  29: 32653020.096 ops/s
Iteration  30: 32927024.948 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoFloat":
  32805468.109 ±(99.9%) 72151.838 ops/s [Average]
  (min, avg, max) = (32544012.217, 32805468.109, 33040577.182), stdev = 107993.483
  CI (99.9%): [32733316.270, 32877619.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  32805468.109 ± 72151.838  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20579027.147 ops/s
# Warmup Iteration   2: 39852091.631 ops/s
# Warmup Iteration   3: 32624380.001 ops/s
# Warmup Iteration   4: 38205477.837 ops/s
# Warmup Iteration   5: 38460308.281 ops/s
# Warmup Iteration   6: 38273355.564 ops/s
# Warmup Iteration   7: 38423825.791 ops/s
# Warmup Iteration   8: 38241398.929 ops/s
# Warmup Iteration   9: 38398297.909 ops/s
# Warmup Iteration  10: 38531699.415 ops/s
# Warmup Iteration  11: 38234958.022 ops/s
# Warmup Iteration  12: 38077730.923 ops/s
# Warmup Iteration  13: 38297629.209 ops/s
# Warmup Iteration  14: 38247972.402 ops/s
# Warmup Iteration  15: 38578384.543 ops/s
# Warmup Iteration  16: 38517004.782 ops/s
# Warmup Iteration  17: 38625127.796 ops/s
# Warmup Iteration  18: 38720023.375 ops/s
# Warmup Iteration  19: 38312253.150 ops/s
# Warmup Iteration  20: 38446185.279 ops/s
# Warmup Iteration  21: 38426333.383 ops/s
# Warmup Iteration  22: 38558684.143 ops/s
# Warmup Iteration  23: 38492021.900 ops/s
# Warmup Iteration  24: 38647124.902 ops/s
# Warmup Iteration  25: 38523915.254 ops/s
# Warmup Iteration  26: 38500212.782 ops/s
# Warmup Iteration  27: 38293888.163 ops/s
# Warmup Iteration  28: 38449138.077 ops/s
# Warmup Iteration  29: 38470707.657 ops/s
# Warmup Iteration  30: 38544314.985 ops/s
Iteration   1: 38591515.387 ops/s
Iteration   2: 38505945.715 ops/s
Iteration   3: 38754734.938 ops/s
Iteration   4: 38812326.377 ops/s
Iteration   5: 38654975.831 ops/s
Iteration   6: 38440271.126 ops/s
Iteration   7: 38342631.418 ops/s
Iteration   8: 38553125.456 ops/s
Iteration   9: 38202029.535 ops/s
Iteration  10: 38393090.465 ops/s
Iteration  11: 38439732.427 ops/s
Iteration  12: 38478708.345 ops/s
Iteration  13: 38432481.549 ops/s
Iteration  14: 38610314.669 ops/s
Iteration  15: 38666391.833 ops/s
Iteration  16: 38593559.826 ops/s
Iteration  17: 38461385.639 ops/s
Iteration  18: 38600599.671 ops/s
Iteration  19: 38492041.038 ops/s
Iteration  20: 38331970.593 ops/s
Iteration  21: 38482351.874 ops/s
Iteration  22: 38669937.145 ops/s
Iteration  23: 38540630.299 ops/s
Iteration  24: 38452917.044 ops/s
Iteration  25: 38476869.821 ops/s
Iteration  26: 38503675.899 ops/s
Iteration  27: 38173752.758 ops/s
Iteration  28: 38516909.374 ops/s
Iteration  29: 38583537.226 ops/s
Iteration  30: 38354339.094 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoInt":
  38503758.412 ±(99.9%) 95417.496 ops/s [Average]
  (min, avg, max) = (38173752.758, 38503758.412, 38812326.377), stdev = 142816.427
  CI (99.9%): [38408340.916, 38599175.909] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectIntoInt  thrpt   30  38503758.412 ± 95417.496  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12456484.079 ops/s
# Warmup Iteration   2: 25881918.097 ops/s
# Warmup Iteration   3: 27426275.028 ops/s
# Warmup Iteration   4: 22951813.345 ops/s
# Warmup Iteration   5: 27465382.720 ops/s
# Warmup Iteration   6: 27400803.900 ops/s
# Warmup Iteration   7: 27393988.313 ops/s
# Warmup Iteration   8: 27613398.294 ops/s
# Warmup Iteration   9: 27428263.496 ops/s
# Warmup Iteration  10: 27461510.835 ops/s
# Warmup Iteration  11: 27442373.190 ops/s
# Warmup Iteration  12: 27490921.805 ops/s
# Warmup Iteration  13: 27572505.534 ops/s
# Warmup Iteration  14: 27588929.981 ops/s
# Warmup Iteration  15: 27499102.209 ops/s
# Warmup Iteration  16: 27438631.439 ops/s
# Warmup Iteration  17: 27359246.207 ops/s
# Warmup Iteration  18: 27486586.249 ops/s
# Warmup Iteration  19: 27556029.690 ops/s
# Warmup Iteration  20: 27532474.766 ops/s
# Warmup Iteration  21: 27604290.035 ops/s
# Warmup Iteration  22: 27561708.416 ops/s
# Warmup Iteration  23: 27432902.654 ops/s
# Warmup Iteration  24: 27579508.728 ops/s
# Warmup Iteration  25: 27595615.085 ops/s
# Warmup Iteration  26: 27489605.973 ops/s
# Warmup Iteration  27: 27559604.869 ops/s
# Warmup Iteration  28: 27569166.963 ops/s
# Warmup Iteration  29: 27559222.187 ops/s
# Warmup Iteration  30: 27500514.342 ops/s
Iteration   1: 27544300.364 ops/s
Iteration   2: 27675122.209 ops/s
Iteration   3: 27728335.327 ops/s
Iteration   4: 27476926.173 ops/s
Iteration   5: 27604732.477 ops/s
Iteration   6: 27068845.039 ops/s
Iteration   7: 27377776.114 ops/s
Iteration   8: 27515866.519 ops/s
Iteration   9: 27467450.123 ops/s
Iteration  10: 27472941.335 ops/s
Iteration  11: 27377938.431 ops/s
Iteration  12: 27497305.206 ops/s
Iteration  13: 27406317.964 ops/s
Iteration  14: 27567890.967 ops/s
Iteration  15: 27628002.696 ops/s
Iteration  16: 27532900.689 ops/s
Iteration  17: 27478763.302 ops/s
Iteration  18: 27562992.772 ops/s
Iteration  19: 27576197.821 ops/s
Iteration  20: 27495400.127 ops/s
Iteration  21: 27424739.668 ops/s
Iteration  22: 27320289.317 ops/s
Iteration  23: 27543983.416 ops/s
Iteration  24: 27543478.197 ops/s
Iteration  25: 27462547.424 ops/s
Iteration  26: 27592045.190 ops/s
Iteration  27: 27560591.167 ops/s
Iteration  28: 27653506.598 ops/s
Iteration  29: 27757837.194 ops/s
Iteration  30: 27551217.787 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoLong":
  27515541.387 ±(99.9%) 87367.394 ops/s [Average]
  (min, avg, max) = (27068845.039, 27515541.387, 27757837.194), stdev = 130767.412
  CI (99.9%): [27428173.993, 27602908.781] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectIntoLong  thrpt   30  27515541.387 ± 87367.394  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15520695.544 ops/s
# Warmup Iteration   2: 31025886.321 ops/s
# Warmup Iteration   3: 27059539.178 ops/s
# Warmup Iteration   4: 32124437.149 ops/s
# Warmup Iteration   5: 32224361.133 ops/s
# Warmup Iteration   6: 32335895.433 ops/s
# Warmup Iteration   7: 32418733.468 ops/s
# Warmup Iteration   8: 32460223.918 ops/s
# Warmup Iteration   9: 32314740.768 ops/s
# Warmup Iteration  10: 32478830.584 ops/s
# Warmup Iteration  11: 32306183.777 ops/s
# Warmup Iteration  12: 32347603.042 ops/s
# Warmup Iteration  13: 32278727.274 ops/s
# Warmup Iteration  14: 32113798.590 ops/s
# Warmup Iteration  15: 32213523.174 ops/s
# Warmup Iteration  16: 32070133.554 ops/s
# Warmup Iteration  17: 31946173.835 ops/s
# Warmup Iteration  18: 31932070.151 ops/s
# Warmup Iteration  19: 31917655.809 ops/s
# Warmup Iteration  20: 31754648.946 ops/s
# Warmup Iteration  21: 31943000.062 ops/s
# Warmup Iteration  22: 32048226.882 ops/s
# Warmup Iteration  23: 32158563.456 ops/s
# Warmup Iteration  24: 32031472.906 ops/s
# Warmup Iteration  25: 31990636.256 ops/s
# Warmup Iteration  26: 31719569.857 ops/s
# Warmup Iteration  27: 31784116.663 ops/s
# Warmup Iteration  28: 31971162.242 ops/s
# Warmup Iteration  29: 31872126.342 ops/s
# Warmup Iteration  30: 31963962.894 ops/s
Iteration   1: 32086996.775 ops/s
Iteration   2: 32134677.614 ops/s
Iteration   3: 31712241.670 ops/s
Iteration   4: 32119449.406 ops/s
Iteration   5: 32095886.189 ops/s
Iteration   6: 32055826.336 ops/s
Iteration   7: 32030704.783 ops/s
Iteration   8: 31924956.972 ops/s
Iteration   9: 32244168.478 ops/s
Iteration  10: 31964601.596 ops/s
Iteration  11: 31963857.752 ops/s
Iteration  12: 32149426.381 ops/s
Iteration  13: 31980970.134 ops/s
Iteration  14: 32179872.103 ops/s
Iteration  15: 31977796.077 ops/s
Iteration  16: 32132927.108 ops/s
Iteration  17: 32055487.289 ops/s
Iteration  18: 31867352.642 ops/s
Iteration  19: 31873794.096 ops/s
Iteration  20: 31934640.695 ops/s
Iteration  21: 31955234.885 ops/s
Iteration  22: 31996679.178 ops/s
Iteration  23: 31746963.612 ops/s
Iteration  24: 31708403.453 ops/s
Iteration  25: 31700847.718 ops/s
Iteration  26: 31793976.935 ops/s
Iteration  27: 31968041.869 ops/s
Iteration  28: 31840946.366 ops/s
Iteration  29: 31914453.917 ops/s
Iteration  30: 31987213.786 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_injectIntoWith":
  31969946.527 ±(99.9%) 96710.281 ops/s [Average]
  (min, avg, max) = (31700847.718, 31969946.527, 32244168.478), stdev = 144751.407
  CI (99.9%): [31873236.246, 32066656.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_injectIntoWith  thrpt   30  31969946.527 ± 96710.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2330918.023 ops/s
# Warmup Iteration   2: 4208116.526 ops/s
# Warmup Iteration   3: 4943453.565 ops/s
# Warmup Iteration   4: 4988885.352 ops/s
# Warmup Iteration   5: 5012824.386 ops/s
# Warmup Iteration   6: 4975166.548 ops/s
# Warmup Iteration   7: 5049001.567 ops/s
# Warmup Iteration   8: 5044836.460 ops/s
# Warmup Iteration   9: 5086016.388 ops/s
# Warmup Iteration  10: 5025399.144 ops/s
# Warmup Iteration  11: 5041837.028 ops/s
# Warmup Iteration  12: 5026239.803 ops/s
# Warmup Iteration  13: 4974562.490 ops/s
# Warmup Iteration  14: 5006827.708 ops/s
# Warmup Iteration  15: 4982529.863 ops/s
# Warmup Iteration  16: 5031863.186 ops/s
# Warmup Iteration  17: 5053500.040 ops/s
# Warmup Iteration  18: 5020563.051 ops/s
# Warmup Iteration  19: 5043339.252 ops/s
# Warmup Iteration  20: 5015745.985 ops/s
# Warmup Iteration  21: 5005921.368 ops/s
# Warmup Iteration  22: 4996050.941 ops/s
# Warmup Iteration  23: 5033943.470 ops/s
# Warmup Iteration  24: 5010032.156 ops/s
# Warmup Iteration  25: 4996569.546 ops/s
# Warmup Iteration  26: 5047364.544 ops/s
# Warmup Iteration  27: 5021749.411 ops/s
# Warmup Iteration  28: 5067437.455 ops/s
# Warmup Iteration  29: 5047880.574 ops/s
# Warmup Iteration  30: 5006952.059 ops/s
Iteration   1: 5041093.489 ops/s
Iteration   2: 5059899.190 ops/s
Iteration   3: 5061579.828 ops/s
Iteration   4: 5049060.138 ops/s
Iteration   5: 5048553.620 ops/s
Iteration   6: 5013835.628 ops/s
Iteration   7: 5046944.737 ops/s
Iteration   8: 4998009.055 ops/s
Iteration   9: 5030662.546 ops/s
Iteration  10: 5022965.763 ops/s
Iteration  11: 4971653.542 ops/s
Iteration  12: 5007584.927 ops/s
Iteration  13: 5022800.098 ops/s
Iteration  14: 5071239.208 ops/s
Iteration  15: 5018545.137 ops/s
Iteration  16: 5001853.026 ops/s
Iteration  17: 4962581.546 ops/s
Iteration  18: 5030921.568 ops/s
Iteration  19: 5015538.696 ops/s
Iteration  20: 4977501.414 ops/s
Iteration  21: 5004152.077 ops/s
Iteration  22: 5002918.124 ops/s
Iteration  23: 5073118.581 ops/s
Iteration  24: 5081758.651 ops/s
Iteration  25: 4980478.570 ops/s
Iteration  26: 5019677.831 ops/s
Iteration  27: 5046390.354 ops/s
Iteration  28: 5018952.436 ops/s
Iteration  29: 4957209.752 ops/s
Iteration  30: 5000837.356 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_isEmpty":
  5021277.230 ±(99.9%) 21911.954 ops/s [Average]
  (min, avg, max) = (4957209.752, 5021277.230, 5081758.651), stdev = 32796.784
  CI (99.9%): [4999365.275, 5043189.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_isEmpty  thrpt   30  5021277.230 ± 21911.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9864096.498 ops/s
# Warmup Iteration   2: 19193436.123 ops/s
# Warmup Iteration   3: 16791497.935 ops/s
# Warmup Iteration   4: 19689512.766 ops/s
# Warmup Iteration   5: 19829860.588 ops/s
# Warmup Iteration   6: 19567468.230 ops/s
# Warmup Iteration   7: 19840315.873 ops/s
# Warmup Iteration   8: 19744109.856 ops/s
# Warmup Iteration   9: 19710945.444 ops/s
# Warmup Iteration  10: 19769232.373 ops/s
# Warmup Iteration  11: 19850514.356 ops/s
# Warmup Iteration  12: 19798515.696 ops/s
# Warmup Iteration  13: 19578673.492 ops/s
# Warmup Iteration  14: 19491372.028 ops/s
# Warmup Iteration  15: 19539360.855 ops/s
# Warmup Iteration  16: 19505105.891 ops/s
# Warmup Iteration  17: 19554627.230 ops/s
# Warmup Iteration  18: 19604650.009 ops/s
# Warmup Iteration  19: 19562702.531 ops/s
# Warmup Iteration  20: 19414230.518 ops/s
# Warmup Iteration  21: 19542511.798 ops/s
# Warmup Iteration  22: 19549114.614 ops/s
# Warmup Iteration  23: 19451241.380 ops/s
# Warmup Iteration  24: 19482928.923 ops/s
# Warmup Iteration  25: 19426873.295 ops/s
# Warmup Iteration  26: 19506961.646 ops/s
# Warmup Iteration  27: 19499107.476 ops/s
# Warmup Iteration  28: 19569022.111 ops/s
# Warmup Iteration  29: 19592576.233 ops/s
# Warmup Iteration  30: 19653222.909 ops/s
Iteration   1: 19526955.979 ops/s
Iteration   2: 19433470.442 ops/s
Iteration   3: 19809120.643 ops/s
Iteration   4: 19737823.492 ops/s
Iteration   5: 19753088.924 ops/s
Iteration   6: 19433239.029 ops/s
Iteration   7: 19720985.620 ops/s
Iteration   8: 19634248.481 ops/s
Iteration   9: 19466392.484 ops/s
Iteration  10: 19372137.374 ops/s
Iteration  11: 19406427.176 ops/s
Iteration  12: 19511252.566 ops/s
Iteration  13: 19567063.153 ops/s
Iteration  14: 19700111.000 ops/s
Iteration  15: 19721794.854 ops/s
Iteration  16: 19767135.650 ops/s
Iteration  17: 19655515.714 ops/s
Iteration  18: 19610453.869 ops/s
Iteration  19: 19581116.481 ops/s
Iteration  20: 19426154.875 ops/s
Iteration  21: 19484178.865 ops/s
Iteration  22: 19574132.660 ops/s
Iteration  23: 19520024.363 ops/s
Iteration  24: 19591787.934 ops/s
Iteration  25: 19663226.243 ops/s
Iteration  26: 19666875.260 ops/s
Iteration  27: 19744905.885 ops/s
Iteration  28: 19813214.170 ops/s
Iteration  29: 19598506.352 ops/s
Iteration  30: 19089136.988 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator":
  19586015.884 ±(99.9%) 104995.299 ops/s [Average]
  (min, avg, max) = (19089136.988, 19586015.884, 19813214.170), stdev = 157152.032
  CI (99.9%): [19481020.585, 19691011.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_iterator  thrpt   30  19586015.884 ± 104995.299  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 742721.386 ops/s
# Warmup Iteration   2: 775151.978 ops/s
# Warmup Iteration   3: 972085.831 ops/s
# Warmup Iteration   4: 1016050.976 ops/s
# Warmup Iteration   5: 1013832.073 ops/s
# Warmup Iteration   6: 1008160.439 ops/s
# Warmup Iteration   7: 1012381.823 ops/s
# Warmup Iteration   8: 1014123.074 ops/s
# Warmup Iteration   9: 1018091.843 ops/s
# Warmup Iteration  10: 1018559.875 ops/s
# Warmup Iteration  11: 1014576.663 ops/s
# Warmup Iteration  12: 996404.972 ops/s
# Warmup Iteration  13: 865552.639 ops/s
# Warmup Iteration  14: 1015149.971 ops/s
# Warmup Iteration  15: 1014176.521 ops/s
# Warmup Iteration  16: 1015128.474 ops/s
# Warmup Iteration  17: 1076642.565 ops/s
# Warmup Iteration  18: 1081690.391 ops/s
# Warmup Iteration  19: 1085848.189 ops/s
# Warmup Iteration  20: 1083101.576 ops/s
# Warmup Iteration  21: 1081618.679 ops/s
# Warmup Iteration  22: 1074115.414 ops/s
# Warmup Iteration  23: 1078696.971 ops/s
# Warmup Iteration  24: 1083086.269 ops/s
# Warmup Iteration  25: 1080554.643 ops/s
# Warmup Iteration  26: 1084151.274 ops/s
# Warmup Iteration  27: 1075068.348 ops/s
# Warmup Iteration  28: 1077452.185 ops/s
# Warmup Iteration  29: 1082750.123 ops/s
# Warmup Iteration  30: 1072661.317 ops/s
Iteration   1: 1079881.579 ops/s
Iteration   2: 1078290.811 ops/s
Iteration   3: 1075173.640 ops/s
Iteration   4: 1075969.069 ops/s
Iteration   5: 1076973.574 ops/s
Iteration   6: 1085042.863 ops/s
Iteration   7: 1073084.936 ops/s
Iteration   8: 1080708.994 ops/s
Iteration   9: 1076391.752 ops/s
Iteration  10: 1077616.138 ops/s
Iteration  11: 1080821.197 ops/s
Iteration  12: 1082295.752 ops/s
Iteration  13: 1076777.042 ops/s
Iteration  14: 1078950.396 ops/s
Iteration  15: 1085397.323 ops/s
Iteration  16: 1088343.595 ops/s
Iteration  17: 1080409.459 ops/s
Iteration  18: 1081689.510 ops/s
Iteration  19: 1085715.274 ops/s
Iteration  20: 1086894.722 ops/s
Iteration  21: 1075318.168 ops/s
Iteration  22: 1086012.011 ops/s
Iteration  23: 1075149.823 ops/s
Iteration  24: 1075058.835 ops/s
Iteration  25: 1075149.962 ops/s
Iteration  26: 1071297.740 ops/s
Iteration  27: 1064046.832 ops/s
Iteration  28: 1079913.703 ops/s
Iteration  29: 1082393.713 ops/s
Iteration  30: 1091641.998 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_iterator_throws":
  1079413.680 ±(99.9%) 3792.049 ops/s [Average]
  (min, avg, max) = (1064046.832, 1079413.680, 1091641.998), stdev = 5675.761
  CI (99.9%): [1075621.631, 1083205.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_iterator_throws  thrpt   30  1079413.680 ± 3792.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13.277 ops/s
# Warmup Iteration   2: 16.145 ops/s
# Warmup Iteration   3: 19.373 ops/s
# Warmup Iteration   4: 19.410 ops/s
# Warmup Iteration   5: 19.805 ops/s
# Warmup Iteration   6: 19.749 ops/s
# Warmup Iteration   7: 19.881 ops/s
# Warmup Iteration   8: 19.789 ops/s
# Warmup Iteration   9: 19.643 ops/s
# Warmup Iteration  10: 19.796 ops/s
# Warmup Iteration  11: 19.916 ops/s
# Warmup Iteration  12: 18.952 ops/s
# Warmup Iteration  13: 18.285 ops/s
# Warmup Iteration  14: 19.721 ops/s
# Warmup Iteration  15: 19.716 ops/s
# Warmup Iteration  16: 19.791 ops/s
# Warmup Iteration  17: 19.827 ops/s
# Warmup Iteration  18: 19.821 ops/s
# Warmup Iteration  19: 19.818 ops/s
# Warmup Iteration  20: 19.866 ops/s
# Warmup Iteration  21: 19.949 ops/s
# Warmup Iteration  22: 19.759 ops/s
# Warmup Iteration  23: 19.523 ops/s
# Warmup Iteration  24: 19.707 ops/s
# Warmup Iteration  25: 19.708 ops/s
# Warmup Iteration  26: 19.675 ops/s
# Warmup Iteration  27: 19.793 ops/s
# Warmup Iteration  28: 19.779 ops/s
# Warmup Iteration  29: 20.042 ops/s
# Warmup Iteration  30: 19.831 ops/s
Iteration   1: 19.756 ops/s
Iteration   2: 19.900 ops/s
Iteration   3: 19.963 ops/s
Iteration   4: 19.877 ops/s
Iteration   5: 20.022 ops/s
Iteration   6: 20.043 ops/s
Iteration   7: 19.787 ops/s
Iteration   8: 19.932 ops/s
Iteration   9: 19.918 ops/s
Iteration  10: 20.217 ops/s
Iteration  11: 19.910 ops/s
Iteration  12: 19.976 ops/s
Iteration  13: 19.887 ops/s
Iteration  14: 19.906 ops/s
Iteration  15: 20.065 ops/s
Iteration  16: 19.883 ops/s
Iteration  17: 19.803 ops/s
Iteration  18: 19.700 ops/s
Iteration  19: 19.860 ops/s
Iteration  20: 19.904 ops/s
Iteration  21: 19.725 ops/s
Iteration  22: 19.813 ops/s
Iteration  23: 19.925 ops/s
Iteration  24: 20.040 ops/s
Iteration  25: 20.230 ops/s
Iteration  26: 19.679 ops/s
Iteration  27: 19.783 ops/s
Iteration  28: 19.791 ops/s
Iteration  29: 19.650 ops/s
Iteration  30: 19.912 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  19.895 ±(99.9%) 0.093 ops/s [Average]
  (min, avg, max) = (19.650, 19.895, 20.230), stdev = 0.139
  CI (99.9%): [19.802, 19.988] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt   Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  19.895 ± 0.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_lastIndexOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_lastIndexOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14617711.171 ops/s
# Warmup Iteration   2: 29449465.078 ops/s
# Warmup Iteration   3: 24311011.274 ops/s
# Warmup Iteration   4: 29010913.689 ops/s
# Warmup Iteration   5: 28873661.555 ops/s
# Warmup Iteration   6: 28963248.594 ops/s
# Warmup Iteration   7: 28750677.485 ops/s
# Warmup Iteration   8: 28772554.652 ops/s
# Warmup Iteration   9: 28766035.067 ops/s
# Warmup Iteration  10: 28882057.143 ops/s
# Warmup Iteration  11: 28851951.652 ops/s
# Warmup Iteration  12: 28810716.513 ops/s
# Warmup Iteration  13: 28747158.977 ops/s
# Warmup Iteration  14: 28850302.427 ops/s
# Warmup Iteration  15: 28748836.765 ops/s
# Warmup Iteration  16: 28817668.686 ops/s
# Warmup Iteration  17: 28962366.337 ops/s
# Warmup Iteration  18: 28680798.074 ops/s
# Warmup Iteration  19: 28767781.124 ops/s
# Warmup Iteration  20: 28684657.260 ops/s
# Warmup Iteration  21: 29032849.629 ops/s
# Warmup Iteration  22: 29059446.733 ops/s
# Warmup Iteration  23: 28911486.531 ops/s
# Warmup Iteration  24: 28897378.324 ops/s
# Warmup Iteration  25: 28966128.102 ops/s
# Warmup Iteration  26: 28907529.343 ops/s
# Warmup Iteration  27: 28771754.705 ops/s
# Warmup Iteration  28: 28812701.530 ops/s
# Warmup Iteration  29: 28890468.813 ops/s
# Warmup Iteration  30: 28943751.614 ops/s
Iteration   1: 28736377.467 ops/s
Iteration   2: 28735277.919 ops/s
Iteration   3: 28738178.187 ops/s
Iteration   4: 28899851.576 ops/s
Iteration   5: 28785417.397 ops/s
Iteration   6: 28895219.429 ops/s
Iteration   7: 29014981.623 ops/s
Iteration   8: 28929478.951 ops/s
Iteration   9: 28936224.930 ops/s
Iteration  10: 29124470.533 ops/s
Iteration  11: 28803436.444 ops/s
Iteration  12: 28962549.160 ops/s
Iteration  13: 28909871.704 ops/s
Iteration  14: 28926755.073 ops/s
Iteration  15: 28769572.999 ops/s
Iteration  16: 28884579.870 ops/s
Iteration  17: 28781510.192 ops/s
Iteration  18: 28957708.820 ops/s
Iteration  19: 29042870.718 ops/s
Iteration  20: 28849374.970 ops/s
Iteration  21: 28900246.945 ops/s
Iteration  22: 28870569.011 ops/s
Iteration  23: 28621809.083 ops/s
Iteration  24: 29065408.279 ops/s
Iteration  25: 28996512.486 ops/s
Iteration  26: 28875063.223 ops/s
Iteration  27: 29128784.344 ops/s
Iteration  28: 29025177.073 ops/s
Iteration  29: 29042429.953 ops/s
Iteration  30: 28723757.990 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_lastIndexOf":
  28897782.212 ±(99.9%) 84641.533 ops/s [Average]
  (min, avg, max) = (28621809.083, 28897782.212, 29128784.344), stdev = 126687.471
  CI (99.9%): [28813140.679, 28982423.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_lastIndexOf  thrpt   30  28897782.212 ± 84641.533  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13480454.896 ops/s
# Warmup Iteration   2: 28610140.750 ops/s
# Warmup Iteration   3: 22721382.512 ops/s
# Warmup Iteration   4: 26875854.744 ops/s
# Warmup Iteration   5: 26893319.188 ops/s
# Warmup Iteration   6: 26845765.054 ops/s
# Warmup Iteration   7: 26822951.415 ops/s
# Warmup Iteration   8: 27079234.967 ops/s
# Warmup Iteration   9: 26960763.636 ops/s
# Warmup Iteration  10: 26903362.897 ops/s
# Warmup Iteration  11: 26970513.215 ops/s
# Warmup Iteration  12: 26861584.629 ops/s
# Warmup Iteration  13: 26964708.792 ops/s
# Warmup Iteration  14: 26845135.700 ops/s
# Warmup Iteration  15: 27107396.324 ops/s
# Warmup Iteration  16: 27064337.153 ops/s
# Warmup Iteration  17: 27067726.744 ops/s
# Warmup Iteration  18: 27019794.627 ops/s
# Warmup Iteration  19: 27073100.810 ops/s
# Warmup Iteration  20: 26946773.066 ops/s
# Warmup Iteration  21: 27012695.594 ops/s
# Warmup Iteration  22: 26951436.514 ops/s
# Warmup Iteration  23: 26924583.849 ops/s
# Warmup Iteration  24: 27066949.750 ops/s
# Warmup Iteration  25: 26955792.957 ops/s
# Warmup Iteration  26: 26992842.394 ops/s
# Warmup Iteration  27: 26985094.481 ops/s
# Warmup Iteration  28: 26936610.057 ops/s
# Warmup Iteration  29: 27086590.259 ops/s
# Warmup Iteration  30: 26968042.002 ops/s
Iteration   1: 26884928.102 ops/s
Iteration   2: 27005167.707 ops/s
Iteration   3: 27026770.973 ops/s
Iteration   4: 26840809.987 ops/s
Iteration   5: 26950540.563 ops/s
Iteration   6: 27019536.024 ops/s
Iteration   7: 26845294.110 ops/s
Iteration   8: 26896215.969 ops/s
Iteration   9: 27127821.998 ops/s
Iteration  10: 26923661.274 ops/s
Iteration  11: 27026123.077 ops/s
Iteration  12: 27123899.838 ops/s
Iteration  13: 26811777.714 ops/s
Iteration  14: 26925324.788 ops/s
Iteration  15: 26865678.701 ops/s
Iteration  16: 26865285.465 ops/s
Iteration  17: 27017534.110 ops/s
Iteration  18: 27029898.664 ops/s
Iteration  19: 26996547.255 ops/s
Iteration  20: 27076872.216 ops/s
Iteration  21: 26801123.008 ops/s
Iteration  22: 26867284.642 ops/s
Iteration  23: 27049203.779 ops/s
Iteration  24: 27071391.182 ops/s
Iteration  25: 27035789.895 ops/s
Iteration  26: 27093079.844 ops/s
Iteration  27: 26967244.177 ops/s
Iteration  28: 26953178.449 ops/s
Iteration  29: 26615346.336 ops/s
Iteration  30: 27031715.860 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIterator":
  26958168.190 ±(99.9%) 75846.140 ops/s [Average]
  (min, avg, max) = (26615346.336, 26958168.190, 27127821.998), stdev = 113522.940
  CI (99.9%): [26882322.051, 27034014.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_listIterator  thrpt   30  26958168.190 ± 75846.140  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 715394.339 ops/s
# Warmup Iteration   2: 741059.521 ops/s
# Warmup Iteration   3: 933952.821 ops/s
# Warmup Iteration   4: 952174.163 ops/s
# Warmup Iteration   5: 953608.751 ops/s
# Warmup Iteration   6: 948392.280 ops/s
# Warmup Iteration   7: 954568.277 ops/s
# Warmup Iteration   8: 956002.203 ops/s
# Warmup Iteration   9: 955684.743 ops/s
# Warmup Iteration  10: 957502.163 ops/s
# Warmup Iteration  11: 959173.525 ops/s
# Warmup Iteration  12: 853761.276 ops/s
# Warmup Iteration  13: 910405.049 ops/s
# Warmup Iteration  14: 952358.212 ops/s
# Warmup Iteration  15: 953366.589 ops/s
# Warmup Iteration  16: 958233.469 ops/s
# Warmup Iteration  17: 1012272.972 ops/s
# Warmup Iteration  18: 1011593.948 ops/s
# Warmup Iteration  19: 1009368.706 ops/s
# Warmup Iteration  20: 1011701.822 ops/s
# Warmup Iteration  21: 1012607.746 ops/s
# Warmup Iteration  22: 1011704.019 ops/s
# Warmup Iteration  23: 1004938.091 ops/s
# Warmup Iteration  24: 1005882.851 ops/s
# Warmup Iteration  25: 1010198.480 ops/s
# Warmup Iteration  26: 1014539.016 ops/s
# Warmup Iteration  27: 1013899.280 ops/s
# Warmup Iteration  28: 1000399.370 ops/s
# Warmup Iteration  29: 1005617.055 ops/s
# Warmup Iteration  30: 1010720.793 ops/s
Iteration   1: 1008449.213 ops/s
Iteration   2: 1015525.699 ops/s
Iteration   3: 1014853.524 ops/s
Iteration   4: 1000306.931 ops/s
Iteration   5: 1006994.480 ops/s
Iteration   6: 1011627.188 ops/s
Iteration   7: 1010824.167 ops/s
Iteration   8: 1007133.864 ops/s
Iteration   9: 1008472.986 ops/s
Iteration  10: 1014298.327 ops/s
Iteration  11: 1012060.917 ops/s
Iteration  12: 1006605.357 ops/s
Iteration  13: 1010314.275 ops/s
Iteration  14: 1011599.024 ops/s
Iteration  15: 1012117.242 ops/s
Iteration  16: 1014893.997 ops/s
Iteration  17: 1009145.099 ops/s
Iteration  18: 1015767.413 ops/s
Iteration  19: 1017190.829 ops/s
Iteration  20: 1014290.120 ops/s
Iteration  21: 1005498.167 ops/s
Iteration  22: 1006346.903 ops/s
Iteration  23: 1008382.019 ops/s
Iteration  24: 1015103.029 ops/s
Iteration  25: 1008416.335 ops/s
Iteration  26: 1013517.342 ops/s
Iteration  27: 1010827.842 ops/s
Iteration  28: 1010410.714 ops/s
Iteration  29: 1007177.981 ops/s
Iteration  30: 1010968.697 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig":
  1010637.323 ±(99.9%) 2535.071 ops/s [Average]
  (min, avg, max) = (1000306.931, 1010637.323, 1017190.829), stdev = 3794.375
  CI (99.9%): [1008102.251, 1013172.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooBig  thrpt   30  1010637.323 ± 2535.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 712675.898 ops/s
# Warmup Iteration   2: 739333.368 ops/s
# Warmup Iteration   3: 958113.283 ops/s
# Warmup Iteration   4: 967665.501 ops/s
# Warmup Iteration   5: 971510.296 ops/s
# Warmup Iteration   6: 964644.770 ops/s
# Warmup Iteration   7: 970178.360 ops/s
# Warmup Iteration   8: 972104.672 ops/s
# Warmup Iteration   9: 970150.243 ops/s
# Warmup Iteration  10: 964330.314 ops/s
# Warmup Iteration  11: 968464.752 ops/s
# Warmup Iteration  12: 830996.671 ops/s
# Warmup Iteration  13: 961212.221 ops/s
# Warmup Iteration  14: 961340.468 ops/s
# Warmup Iteration  15: 974147.913 ops/s
# Warmup Iteration  16: 967305.939 ops/s
# Warmup Iteration  17: 1031550.122 ops/s
# Warmup Iteration  18: 1032002.413 ops/s
# Warmup Iteration  19: 1037154.795 ops/s
# Warmup Iteration  20: 1036376.220 ops/s
# Warmup Iteration  21: 1028263.893 ops/s
# Warmup Iteration  22: 1018094.722 ops/s
# Warmup Iteration  23: 1032913.938 ops/s
# Warmup Iteration  24: 1031263.249 ops/s
# Warmup Iteration  25: 1030155.832 ops/s
# Warmup Iteration  26: 1032949.263 ops/s
# Warmup Iteration  27: 1035929.616 ops/s
# Warmup Iteration  28: 1029652.111 ops/s
# Warmup Iteration  29: 1030191.059 ops/s
# Warmup Iteration  30: 1031875.763 ops/s
Iteration   1: 1034362.646 ops/s
Iteration   2: 1027495.091 ops/s
Iteration   3: 1025562.166 ops/s
Iteration   4: 1029148.191 ops/s
Iteration   5: 1024530.999 ops/s
Iteration   6: 1016564.458 ops/s
Iteration   7: 1034838.653 ops/s
Iteration   8: 1031884.570 ops/s
Iteration   9: 1020304.964 ops/s
Iteration  10: 1021851.853 ops/s
Iteration  11: 1031811.414 ops/s
Iteration  12: 1029304.505 ops/s
Iteration  13: 1009040.279 ops/s
Iteration  14: 1030488.679 ops/s
Iteration  15: 1040092.768 ops/s
Iteration  16: 1030281.715 ops/s
Iteration  17: 1032990.359 ops/s
Iteration  18: 1030601.525 ops/s
Iteration  19: 1028630.669 ops/s
Iteration  20: 1029175.563 ops/s
Iteration  21: 1029778.202 ops/s
Iteration  22: 1033567.485 ops/s
Iteration  23: 1026231.280 ops/s
Iteration  24: 1030957.487 ops/s
Iteration  25: 1029699.207 ops/s
Iteration  26: 1030752.072 ops/s
Iteration  27: 1028396.421 ops/s
Iteration  28: 1031425.309 ops/s
Iteration  29: 1032218.430 ops/s
Iteration  30: 1030748.872 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall":
  1028757.861 ±(99.9%) 3909.474 ops/s [Average]
  (min, avg, max) = (1009040.279, 1028757.861, 1040092.768), stdev = 5851.517
  CI (99.9%): [1024848.387, 1032667.335] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_listIteratorIndexTooSmall  thrpt   30  1028757.861 ± 3909.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1402565.326 ops/s
# Warmup Iteration   2: 3099387.295 ops/s
# Warmup Iteration   3: 3102868.324 ops/s
# Warmup Iteration   4: 2611573.322 ops/s
# Warmup Iteration   5: 3100565.843 ops/s
# Warmup Iteration   6: 3108208.152 ops/s
# Warmup Iteration   7: 3117285.991 ops/s
# Warmup Iteration   8: 3125195.004 ops/s
# Warmup Iteration   9: 3119561.090 ops/s
# Warmup Iteration  10: 3130032.931 ops/s
# Warmup Iteration  11: 3099780.322 ops/s
# Warmup Iteration  12: 3116142.016 ops/s
# Warmup Iteration  13: 3117565.720 ops/s
# Warmup Iteration  14: 3110406.636 ops/s
# Warmup Iteration  15: 3125459.825 ops/s
# Warmup Iteration  16: 3105044.981 ops/s
# Warmup Iteration  17: 3113471.821 ops/s
# Warmup Iteration  18: 3110606.054 ops/s
# Warmup Iteration  19: 3102768.490 ops/s
# Warmup Iteration  20: 3120702.837 ops/s
# Warmup Iteration  21: 3107274.415 ops/s
# Warmup Iteration  22: 3112197.344 ops/s
# Warmup Iteration  23: 3133980.690 ops/s
# Warmup Iteration  24: 3117359.946 ops/s
# Warmup Iteration  25: 3117000.588 ops/s
# Warmup Iteration  26: 3132165.628 ops/s
# Warmup Iteration  27: 3120260.090 ops/s
# Warmup Iteration  28: 3112450.966 ops/s
# Warmup Iteration  29: 3114508.000 ops/s
# Warmup Iteration  30: 3116048.800 ops/s
Iteration   1: 3112133.099 ops/s
Iteration   2: 3110618.427 ops/s
Iteration   3: 3106601.333 ops/s
Iteration   4: 3124090.750 ops/s
Iteration   5: 3128505.675 ops/s
Iteration   6: 3113348.090 ops/s
Iteration   7: 3119337.382 ops/s
Iteration   8: 3109373.029 ops/s
Iteration   9: 3116827.029 ops/s
Iteration  10: 3125412.881 ops/s
Iteration  11: 3115806.063 ops/s
Iteration  12: 3110883.397 ops/s
Iteration  13: 3101160.106 ops/s
Iteration  14: 3110033.635 ops/s
Iteration  15: 3102877.068 ops/s
Iteration  16: 3107139.324 ops/s
Iteration  17: 3115655.106 ops/s
Iteration  18: 3113311.534 ops/s
Iteration  19: 3115649.147 ops/s
Iteration  20: 3106782.355 ops/s
Iteration  21: 3106380.202 ops/s
Iteration  22: 3112590.733 ops/s
Iteration  23: 3097716.973 ops/s
Iteration  24: 3112374.470 ops/s
Iteration  25: 3095643.254 ops/s
Iteration  26: 3110677.721 ops/s
Iteration  27: 3117760.024 ops/s
Iteration  28: 3105783.775 ops/s
Iteration  29: 3136116.266 ops/s
Iteration  30: 3094573.204 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeString":
  3111838.735 ±(99.9%) 6174.332 ops/s [Average]
  (min, avg, max) = (3094573.204, 3111838.735, 3136116.266), stdev = 9241.451
  CI (99.9%): [3105664.403, 3118013.067] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_makeString  thrpt   30  3111838.735 ± 6174.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4378517.423 ops/s
# Warmup Iteration   2: 9358188.348 ops/s
# Warmup Iteration   3: 9134320.638 ops/s
# Warmup Iteration   4: 8290341.652 ops/s
# Warmup Iteration   5: 9464023.010 ops/s
# Warmup Iteration   6: 9477265.233 ops/s
# Warmup Iteration   7: 9467712.383 ops/s
# Warmup Iteration   8: 9449676.537 ops/s
# Warmup Iteration   9: 9513585.045 ops/s
# Warmup Iteration  10: 9488153.128 ops/s
# Warmup Iteration  11: 9530526.782 ops/s
# Warmup Iteration  12: 9485944.228 ops/s
# Warmup Iteration  13: 9487290.210 ops/s
# Warmup Iteration  14: 9491527.777 ops/s
# Warmup Iteration  15: 9484672.801 ops/s
# Warmup Iteration  16: 9450948.111 ops/s
# Warmup Iteration  17: 9487997.345 ops/s
# Warmup Iteration  18: 9434239.948 ops/s
# Warmup Iteration  19: 9473061.205 ops/s
# Warmup Iteration  20: 9439483.425 ops/s
# Warmup Iteration  21: 9454656.153 ops/s
# Warmup Iteration  22: 9505297.068 ops/s
# Warmup Iteration  23: 9428731.991 ops/s
# Warmup Iteration  24: 9474616.589 ops/s
# Warmup Iteration  25: 9462894.475 ops/s
# Warmup Iteration  26: 9463827.914 ops/s
# Warmup Iteration  27: 9471653.898 ops/s
# Warmup Iteration  28: 9473040.720 ops/s
# Warmup Iteration  29: 9486501.265 ops/s
# Warmup Iteration  30: 9490130.403 ops/s
Iteration   1: 9424166.077 ops/s
Iteration   2: 9546719.898 ops/s
Iteration   3: 9504701.136 ops/s
Iteration   4: 9469007.681 ops/s
Iteration   5: 9458408.477 ops/s
Iteration   6: 9506052.042 ops/s
Iteration   7: 9471740.673 ops/s
Iteration   8: 9434336.593 ops/s
Iteration   9: 9455516.473 ops/s
Iteration  10: 9485187.043 ops/s
Iteration  11: 9421079.787 ops/s
Iteration  12: 9424546.557 ops/s
Iteration  13: 9446561.129 ops/s
Iteration  14: 9485666.506 ops/s
Iteration  15: 9414834.076 ops/s
Iteration  16: 9506927.255 ops/s
Iteration  17: 9483781.988 ops/s
Iteration  18: 9478937.688 ops/s
Iteration  19: 9480232.688 ops/s
Iteration  20: 9445874.505 ops/s
Iteration  21: 9413408.098 ops/s
Iteration  22: 9481144.234 ops/s
Iteration  23: 9498573.937 ops/s
Iteration  24: 9470209.800 ops/s
Iteration  25: 9436782.921 ops/s
Iteration  26: 9419112.334 ops/s
Iteration  27: 9455388.106 ops/s
Iteration  28: 9436406.474 ops/s
Iteration  29: 9499265.960 ops/s
Iteration  30: 9508522.394 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparator":
  9465436.418 ±(99.9%) 22826.956 ops/s [Average]
  (min, avg, max) = (9413408.098, 9465436.418, 9546719.898), stdev = 34166.316
  CI (99.9%): [9442609.461, 9488263.374] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  9465436.418 ± 22826.956  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3651802.629 ops/s
# Warmup Iteration   2: 7991352.359 ops/s
# Warmup Iteration   3: 8072776.887 ops/s
# Warmup Iteration   4: 6723520.947 ops/s
# Warmup Iteration   5: 8070570.161 ops/s
# Warmup Iteration   6: 8059298.614 ops/s
# Warmup Iteration   7: 8046993.498 ops/s
# Warmup Iteration   8: 7988173.904 ops/s
# Warmup Iteration   9: 8077286.777 ops/s
# Warmup Iteration  10: 8059143.066 ops/s
# Warmup Iteration  11: 8024311.214 ops/s
# Warmup Iteration  12: 8040927.908 ops/s
# Warmup Iteration  13: 8011401.261 ops/s
# Warmup Iteration  14: 8056278.925 ops/s
# Warmup Iteration  15: 8053869.302 ops/s
# Warmup Iteration  16: 8011725.774 ops/s
# Warmup Iteration  17: 8040531.627 ops/s
# Warmup Iteration  18: 8075071.912 ops/s
# Warmup Iteration  19: 8022564.997 ops/s
# Warmup Iteration  20: 8053447.982 ops/s
# Warmup Iteration  21: 8062397.598 ops/s
# Warmup Iteration  22: 8033559.530 ops/s
# Warmup Iteration  23: 8047161.244 ops/s
# Warmup Iteration  24: 8035224.977 ops/s
# Warmup Iteration  25: 8055010.990 ops/s
# Warmup Iteration  26: 8044666.015 ops/s
# Warmup Iteration  27: 8059127.089 ops/s
# Warmup Iteration  28: 8045555.767 ops/s
# Warmup Iteration  29: 8037540.459 ops/s
# Warmup Iteration  30: 8053048.756 ops/s
Iteration   1: 8080354.945 ops/s
Iteration   2: 8034441.161 ops/s
Iteration   3: 8058324.778 ops/s
Iteration   4: 8058173.796 ops/s
Iteration   5: 8064649.971 ops/s
Iteration   6: 8021504.164 ops/s
Iteration   7: 8018480.468 ops/s
Iteration   8: 8050835.810 ops/s
Iteration   9: 7953893.071 ops/s
Iteration  10: 8056225.669 ops/s
Iteration  11: 8053719.365 ops/s
Iteration  12: 8059448.204 ops/s
Iteration  13: 8064190.030 ops/s
Iteration  14: 8060558.535 ops/s
Iteration  15: 8073331.418 ops/s
Iteration  16: 7990512.644 ops/s
Iteration  17: 7932161.732 ops/s
Iteration  18: 8066070.711 ops/s
Iteration  19: 8038192.817 ops/s
Iteration  20: 8074386.361 ops/s
Iteration  21: 8004536.896 ops/s
Iteration  22: 8065557.804 ops/s
Iteration  23: 8062014.866 ops/s
Iteration  24: 8054733.333 ops/s
Iteration  25: 8014547.061 ops/s
Iteration  26: 8052035.585 ops/s
Iteration  27: 8032012.112 ops/s
Iteration  28: 8089003.964 ops/s
Iteration  29: 8060745.205 ops/s
Iteration  30: 8047704.301 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  8043078.226 ±(99.9%) 23617.457 ops/s [Average]
  (min, avg, max) = (7932161.732, 8043078.226, 8089003.964), stdev = 35349.501
  CI (99.9%): [8019460.769, 8066695.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  8043078.226 ± 23617.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22141209.075 ops/s
# Warmup Iteration   2: 44187246.092 ops/s
# Warmup Iteration   3: 37155122.660 ops/s
# Warmup Iteration   4: 44165049.275 ops/s
# Warmup Iteration   5: 44236697.905 ops/s
# Warmup Iteration   6: 44328035.421 ops/s
# Warmup Iteration   7: 44241021.620 ops/s
# Warmup Iteration   8: 44240816.213 ops/s
# Warmup Iteration   9: 44348268.417 ops/s
# Warmup Iteration  10: 44097839.558 ops/s
# Warmup Iteration  11: 44510792.554 ops/s
# Warmup Iteration  12: 44132058.209 ops/s
# Warmup Iteration  13: 44342900.171 ops/s
# Warmup Iteration  14: 44207908.162 ops/s
# Warmup Iteration  15: 44266916.821 ops/s
# Warmup Iteration  16: 44303540.983 ops/s
# Warmup Iteration  17: 44086068.425 ops/s
# Warmup Iteration  18: 44178383.599 ops/s
# Warmup Iteration  19: 44087964.182 ops/s
# Warmup Iteration  20: 44386585.012 ops/s
# Warmup Iteration  21: 44244957.635 ops/s
# Warmup Iteration  22: 44370005.589 ops/s
# Warmup Iteration  23: 44353225.549 ops/s
# Warmup Iteration  24: 44167639.898 ops/s
# Warmup Iteration  25: 44302191.657 ops/s
# Warmup Iteration  26: 44366214.710 ops/s
# Warmup Iteration  27: 44248203.576 ops/s
# Warmup Iteration  28: 44422570.871 ops/s
# Warmup Iteration  29: 44430129.123 ops/s
# Warmup Iteration  30: 44203582.964 ops/s
Iteration   1: 44488129.826 ops/s
Iteration   2: 44354236.825 ops/s
Iteration   3: 44568027.427 ops/s
Iteration   4: 44391484.160 ops/s
Iteration   5: 44417160.809 ops/s
Iteration   6: 44325638.558 ops/s
Iteration   7: 44376130.762 ops/s
Iteration   8: 44491356.992 ops/s
Iteration   9: 44606025.245 ops/s
Iteration  10: 44188266.241 ops/s
Iteration  11: 44214524.105 ops/s
Iteration  12: 44387403.008 ops/s
Iteration  13: 44227097.899 ops/s
Iteration  14: 44322040.094 ops/s
Iteration  15: 44309588.011 ops/s
Iteration  16: 44658137.453 ops/s
Iteration  17: 44558696.826 ops/s
Iteration  18: 44227872.308 ops/s
Iteration  19: 44046565.544 ops/s
Iteration  20: 44299654.664 ops/s
Iteration  21: 44392750.323 ops/s
Iteration  22: 44268718.746 ops/s
Iteration  23: 44168180.170 ops/s
Iteration  24: 44208120.049 ops/s
Iteration  25: 44421634.143 ops/s
Iteration  26: 44086926.234 ops/s
Iteration  27: 44391716.134 ops/s
Iteration  28: 44335656.362 ops/s
Iteration  29: 44391612.922 ops/s
Iteration  30: 44641166.841 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max":
  44358817.289 ±(99.9%) 103296.183 ops/s [Average]
  (min, avg, max) = (44046565.544, 44358817.289, 44658137.453), stdev = 154608.876
  CI (99.9%): [44255521.106, 44462113.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_max  thrpt   30  44358817.289 ± 103296.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10731449.502 ops/s
# Warmup Iteration   2: 21696822.204 ops/s
# Warmup Iteration   3: 18457873.776 ops/s
# Warmup Iteration   4: 21853132.097 ops/s
# Warmup Iteration   5: 21950312.484 ops/s
# Warmup Iteration   6: 21961318.066 ops/s
# Warmup Iteration   7: 22075047.256 ops/s
# Warmup Iteration   8: 22040919.952 ops/s
# Warmup Iteration   9: 22017099.056 ops/s
# Warmup Iteration  10: 22063088.083 ops/s
# Warmup Iteration  11: 21868665.630 ops/s
# Warmup Iteration  12: 21910475.999 ops/s
# Warmup Iteration  13: 21988181.211 ops/s
# Warmup Iteration  14: 22010797.239 ops/s
# Warmup Iteration  15: 21887030.965 ops/s
# Warmup Iteration  16: 21955033.508 ops/s
# Warmup Iteration  17: 22023728.784 ops/s
# Warmup Iteration  18: 21819742.192 ops/s
# Warmup Iteration  19: 21888502.127 ops/s
# Warmup Iteration  20: 22030561.172 ops/s
# Warmup Iteration  21: 21891017.401 ops/s
# Warmup Iteration  22: 21972117.775 ops/s
# Warmup Iteration  23: 22013383.466 ops/s
# Warmup Iteration  24: 22121974.475 ops/s
# Warmup Iteration  25: 21955537.861 ops/s
# Warmup Iteration  26: 21989628.956 ops/s
# Warmup Iteration  27: 22017267.229 ops/s
# Warmup Iteration  28: 21984757.363 ops/s
# Warmup Iteration  29: 22043758.295 ops/s
# Warmup Iteration  30: 21979348.573 ops/s
Iteration   1: 22016257.642 ops/s
Iteration   2: 21976200.861 ops/s
Iteration   3: 21898899.324 ops/s
Iteration   4: 21837413.241 ops/s
Iteration   5: 21853162.323 ops/s
Iteration   6: 21847923.243 ops/s
Iteration   7: 21901719.230 ops/s
Iteration   8: 21747418.300 ops/s
Iteration   9: 21959828.935 ops/s
Iteration  10: 21909349.198 ops/s
Iteration  11: 22048685.424 ops/s
Iteration  12: 21879656.036 ops/s
Iteration  13: 21769892.943 ops/s
Iteration  14: 21840014.106 ops/s
Iteration  15: 21915568.431 ops/s
Iteration  16: 21931177.073 ops/s
Iteration  17: 21953461.401 ops/s
Iteration  18: 21829051.937 ops/s
Iteration  19: 22017639.264 ops/s
Iteration  20: 21917114.455 ops/s
Iteration  21: 21858742.257 ops/s
Iteration  22: 21930668.365 ops/s
Iteration  23: 22000289.711 ops/s
Iteration  24: 22046002.325 ops/s
Iteration  25: 21961608.081 ops/s
Iteration  26: 22080432.122 ops/s
Iteration  27: 22070171.829 ops/s
Iteration  28: 22052173.860 ops/s
Iteration  29: 22044969.271 ops/s
Iteration  30: 21906575.616 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy":
  21933402.227 ±(99.9%) 59687.616 ops/s [Average]
  (min, avg, max) = (21747418.300, 21933402.227, 22080432.122), stdev = 89337.621
  CI (99.9%): [21873714.611, 21993089.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_maxBy  thrpt   30  21933402.227 ± 59687.616  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7758549.007 ops/s
# Warmup Iteration   2: 15852929.011 ops/s
# Warmup Iteration   3: 13224422.358 ops/s
# Warmup Iteration   4: 15885009.420 ops/s
# Warmup Iteration   5: 15845534.683 ops/s
# Warmup Iteration   6: 15692274.400 ops/s
# Warmup Iteration   7: 15880035.972 ops/s
# Warmup Iteration   8: 15811265.500 ops/s
# Warmup Iteration   9: 15863032.376 ops/s
# Warmup Iteration  10: 15811385.601 ops/s
# Warmup Iteration  11: 15783021.818 ops/s
# Warmup Iteration  12: 15851811.457 ops/s
# Warmup Iteration  13: 15931635.742 ops/s
# Warmup Iteration  14: 15740531.745 ops/s
# Warmup Iteration  15: 15819645.325 ops/s
# Warmup Iteration  16: 15662106.111 ops/s
# Warmup Iteration  17: 15894808.991 ops/s
# Warmup Iteration  18: 15871956.736 ops/s
# Warmup Iteration  19: 15797606.111 ops/s
# Warmup Iteration  20: 15803016.247 ops/s
# Warmup Iteration  21: 15910279.294 ops/s
# Warmup Iteration  22: 15826489.146 ops/s
# Warmup Iteration  23: 15950189.020 ops/s
# Warmup Iteration  24: 15894993.094 ops/s
# Warmup Iteration  25: 15903006.927 ops/s
# Warmup Iteration  26: 15925534.237 ops/s
# Warmup Iteration  27: 15991359.589 ops/s
# Warmup Iteration  28: 15916251.464 ops/s
# Warmup Iteration  29: 15972208.954 ops/s
# Warmup Iteration  30: 15888210.781 ops/s
Iteration   1: 15952530.472 ops/s
Iteration   2: 16049347.943 ops/s
Iteration   3: 15813983.626 ops/s
Iteration   4: 15866415.840 ops/s
Iteration   5: 16105207.179 ops/s
Iteration   6: 15959824.978 ops/s
Iteration   7: 16009389.342 ops/s
Iteration   8: 15962628.401 ops/s
Iteration   9: 15930321.978 ops/s
Iteration  10: 15936220.308 ops/s
Iteration  11: 15942040.747 ops/s
Iteration  12: 16012518.612 ops/s
Iteration  13: 15901922.883 ops/s
Iteration  14: 15871846.539 ops/s
Iteration  15: 15951531.109 ops/s
Iteration  16: 15887935.718 ops/s
Iteration  17: 15909669.264 ops/s
Iteration  18: 15753375.771 ops/s
Iteration  19: 15931767.180 ops/s
Iteration  20: 15928472.576 ops/s
Iteration  21: 15882516.049 ops/s
Iteration  22: 15942678.905 ops/s
Iteration  23: 15841616.262 ops/s
Iteration  24: 15924271.542 ops/s
Iteration  25: 15931090.698 ops/s
Iteration  26: 15881635.405 ops/s
Iteration  27: 15906394.227 ops/s
Iteration  28: 15963174.788 ops/s
Iteration  29: 15945262.932 ops/s
Iteration  30: 16003298.735 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxByOptional":
  15929963.000 ±(99.9%) 45767.127 ops/s [Average]
  (min, avg, max) = (15753375.771, 15929963.000, 16105207.179), stdev = 68502.086
  CI (99.9%): [15884195.873, 15975730.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_maxByOptional  thrpt   30  15929963.000 ± 45767.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19077986.775 ops/s
# Warmup Iteration   2: 40996472.069 ops/s
# Warmup Iteration   3: 35246187.212 ops/s
# Warmup Iteration   4: 42070187.074 ops/s
# Warmup Iteration   5: 41941270.470 ops/s
# Warmup Iteration   6: 41863691.413 ops/s
# Warmup Iteration   7: 41801471.436 ops/s
# Warmup Iteration   8: 41773009.415 ops/s
# Warmup Iteration   9: 41846195.903 ops/s
# Warmup Iteration  10: 41823115.928 ops/s
# Warmup Iteration  11: 41903189.431 ops/s
# Warmup Iteration  12: 41993599.059 ops/s
# Warmup Iteration  13: 41980512.745 ops/s
# Warmup Iteration  14: 41891728.942 ops/s
# Warmup Iteration  15: 41808876.027 ops/s
# Warmup Iteration  16: 41869536.167 ops/s
# Warmup Iteration  17: 41720518.089 ops/s
# Warmup Iteration  18: 41648781.820 ops/s
# Warmup Iteration  19: 41740858.728 ops/s
# Warmup Iteration  20: 41713772.624 ops/s
# Warmup Iteration  21: 41810282.656 ops/s
# Warmup Iteration  22: 41790991.726 ops/s
# Warmup Iteration  23: 41974816.065 ops/s
# Warmup Iteration  24: 41614962.699 ops/s
# Warmup Iteration  25: 41845337.154 ops/s
# Warmup Iteration  26: 41585462.302 ops/s
# Warmup Iteration  27: 41714335.140 ops/s
# Warmup Iteration  28: 41842881.308 ops/s
# Warmup Iteration  29: 41617063.929 ops/s
# Warmup Iteration  30: 41538783.123 ops/s
Iteration   1: 41403082.360 ops/s
Iteration   2: 41516462.065 ops/s
Iteration   3: 41355986.069 ops/s
Iteration   4: 41394672.384 ops/s
Iteration   5: 41518884.247 ops/s
Iteration   6: 41334727.695 ops/s
Iteration   7: 41838029.080 ops/s
Iteration   8: 41608115.595 ops/s
Iteration   9: 41665813.613 ops/s
Iteration  10: 41500916.014 ops/s
Iteration  11: 41400698.898 ops/s
Iteration  12: 41732240.452 ops/s
Iteration  13: 41527018.439 ops/s
Iteration  14: 41260226.572 ops/s
Iteration  15: 41396251.640 ops/s
Iteration  16: 41671805.014 ops/s
Iteration  17: 41361730.888 ops/s
Iteration  18: 41616203.311 ops/s
Iteration  19: 41080470.900 ops/s
Iteration  20: 41429783.199 ops/s
Iteration  21: 41394129.735 ops/s
Iteration  22: 41227899.293 ops/s
Iteration  23: 41525873.551 ops/s
Iteration  24: 41359306.958 ops/s
Iteration  25: 41726160.055 ops/s
Iteration  26: 41630880.349 ops/s
Iteration  27: 41475376.247 ops/s
Iteration  28: 41616833.371 ops/s
Iteration  29: 41168480.578 ops/s
Iteration  30: 41619721.552 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxBy_null_throws":
  41478592.671 ±(99.9%) 117516.108 ops/s [Average]
  (min, avg, max) = (41080470.900, 41478592.671, 41838029.080), stdev = 175892.592
  CI (99.9%): [41361076.563, 41596108.779] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  41478592.671 ± 117516.108  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9957197.700 ops/s
# Warmup Iteration   2: 20413486.635 ops/s
# Warmup Iteration   3: 17502808.626 ops/s
# Warmup Iteration   4: 20539977.501 ops/s
# Warmup Iteration   5: 20558957.277 ops/s
# Warmup Iteration   6: 20476752.795 ops/s
# Warmup Iteration   7: 20558215.253 ops/s
# Warmup Iteration   8: 20527854.729 ops/s
# Warmup Iteration   9: 20636788.340 ops/s
# Warmup Iteration  10: 20599826.782 ops/s
# Warmup Iteration  11: 20697101.705 ops/s
# Warmup Iteration  12: 20545744.608 ops/s
# Warmup Iteration  13: 20610115.208 ops/s
# Warmup Iteration  14: 20498035.020 ops/s
# Warmup Iteration  15: 20452157.570 ops/s
# Warmup Iteration  16: 20607270.201 ops/s
# Warmup Iteration  17: 20572144.373 ops/s
# Warmup Iteration  18: 20493324.596 ops/s
# Warmup Iteration  19: 20592487.360 ops/s
# Warmup Iteration  20: 20648061.801 ops/s
# Warmup Iteration  21: 20518685.138 ops/s
# Warmup Iteration  22: 20667466.795 ops/s
# Warmup Iteration  23: 20589039.069 ops/s
# Warmup Iteration  24: 20686362.544 ops/s
# Warmup Iteration  25: 20645518.464 ops/s
# Warmup Iteration  26: 20694523.470 ops/s
# Warmup Iteration  27: 20617922.125 ops/s
# Warmup Iteration  28: 20647717.436 ops/s
# Warmup Iteration  29: 20684362.083 ops/s
# Warmup Iteration  30: 20715326.098 ops/s
Iteration   1: 20561019.680 ops/s
Iteration   2: 20771440.682 ops/s
Iteration   3: 20641704.594 ops/s
Iteration   4: 20641328.135 ops/s
Iteration   5: 20591141.481 ops/s
Iteration   6: 20730298.451 ops/s
Iteration   7: 20679453.623 ops/s
Iteration   8: 20697162.514 ops/s
Iteration   9: 20661755.609 ops/s
Iteration  10: 20659865.447 ops/s
Iteration  11: 20687923.537 ops/s
Iteration  12: 20580764.417 ops/s
Iteration  13: 20827254.153 ops/s
Iteration  14: 20439488.112 ops/s
Iteration  15: 20519348.555 ops/s
Iteration  16: 20804552.404 ops/s
Iteration  17: 20561192.800 ops/s
Iteration  18: 20610727.202 ops/s
Iteration  19: 20737473.913 ops/s
Iteration  20: 20618875.395 ops/s
Iteration  21: 20820083.976 ops/s
Iteration  22: 20746520.683 ops/s
Iteration  23: 20617086.866 ops/s
Iteration  24: 20652738.424 ops/s
Iteration  25: 20677322.440 ops/s
Iteration  26: 20797963.303 ops/s
Iteration  27: 20704885.465 ops/s
Iteration  28: 20628648.670 ops/s
Iteration  29: 20652228.653 ops/s
Iteration  30: 20749136.999 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_maxOptional":
  20668979.539 ±(99.9%) 60967.862 ops/s [Average]
  (min, avg, max) = (20439488.112, 20668979.539, 20827254.153), stdev = 91253.833
  CI (99.9%): [20608011.677, 20729947.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_maxOptional  thrpt   30  20668979.539 ± 60967.862  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757500.142 ops/s
# Warmup Iteration   2: 795618.009 ops/s
# Warmup Iteration   3: 945121.178 ops/s
# Warmup Iteration   4: 1016779.724 ops/s
# Warmup Iteration   5: 1013400.020 ops/s
# Warmup Iteration   6: 1010296.592 ops/s
# Warmup Iteration   7: 1012037.231 ops/s
# Warmup Iteration   8: 1016186.867 ops/s
# Warmup Iteration   9: 1015159.964 ops/s
# Warmup Iteration  10: 1015548.791 ops/s
# Warmup Iteration  11: 1012754.031 ops/s
# Warmup Iteration  12: 1011683.209 ops/s
# Warmup Iteration  13: 1014726.726 ops/s
# Warmup Iteration  14: 857062.760 ops/s
# Warmup Iteration  15: 1017499.344 ops/s
# Warmup Iteration  16: 1014784.813 ops/s
# Warmup Iteration  17: 1074777.364 ops/s
# Warmup Iteration  18: 1074295.865 ops/s
# Warmup Iteration  19: 1076326.215 ops/s
# Warmup Iteration  20: 1074970.064 ops/s
# Warmup Iteration  21: 1074310.286 ops/s
# Warmup Iteration  22: 1071664.887 ops/s
# Warmup Iteration  23: 1070915.448 ops/s
# Warmup Iteration  24: 1073745.637 ops/s
# Warmup Iteration  25: 1071614.517 ops/s
# Warmup Iteration  26: 1071783.759 ops/s
# Warmup Iteration  27: 1075818.076 ops/s
# Warmup Iteration  28: 1072968.863 ops/s
# Warmup Iteration  29: 1076239.274 ops/s
# Warmup Iteration  30: 1070241.221 ops/s
Iteration   1: 1067514.246 ops/s
Iteration   2: 1063923.466 ops/s
Iteration   3: 1069941.348 ops/s
Iteration   4: 1070399.481 ops/s
Iteration   5: 1071977.997 ops/s
Iteration   6: 1073178.339 ops/s
Iteration   7: 1070428.618 ops/s
Iteration   8: 1069671.350 ops/s
Iteration   9: 1071511.831 ops/s
Iteration  10: 1072260.650 ops/s
Iteration  11: 1075774.091 ops/s
Iteration  12: 1075270.350 ops/s
Iteration  13: 1080393.212 ops/s
Iteration  14: 1072320.590 ops/s
Iteration  15: 1075389.427 ops/s
Iteration  16: 1072301.187 ops/s
Iteration  17: 1072268.554 ops/s
Iteration  18: 1076508.709 ops/s
Iteration  19: 1078009.573 ops/s
Iteration  20: 1070436.630 ops/s
Iteration  21: 1064767.607 ops/s
Iteration  22: 1073511.220 ops/s
Iteration  23: 1076024.620 ops/s
Iteration  24: 1077122.720 ops/s
Iteration  25: 1075482.875 ops/s
Iteration  26: 1078064.388 ops/s
Iteration  27: 1072742.583 ops/s
Iteration  28: 1080500.329 ops/s
Iteration  29: 1076366.962 ops/s
Iteration  30: 1074972.790 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_empty_throws":
  1073301.191 ±(99.9%) 2671.373 ops/s [Average]
  (min, avg, max) = (1063923.466, 1073301.191, 1080500.329), stdev = 3998.386
  CI (99.9%): [1070629.818, 1075972.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1073301.191 ± 2671.373  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10850803.888 ops/s
# Warmup Iteration   2: 35062817.925 ops/s
# Warmup Iteration   3: 30368251.626 ops/s
# Warmup Iteration   4: 35654967.147 ops/s
# Warmup Iteration   5: 35747482.729 ops/s
# Warmup Iteration   6: 35655319.673 ops/s
# Warmup Iteration   7: 35710980.893 ops/s
# Warmup Iteration   8: 35737856.364 ops/s
# Warmup Iteration   9: 35593121.839 ops/s
# Warmup Iteration  10: 35747708.576 ops/s
# Warmup Iteration  11: 35766037.484 ops/s
# Warmup Iteration  12: 35649718.051 ops/s
# Warmup Iteration  13: 35771050.706 ops/s
# Warmup Iteration  14: 35878370.098 ops/s
# Warmup Iteration  15: 35751895.156 ops/s
# Warmup Iteration  16: 35842230.160 ops/s
# Warmup Iteration  17: 35697064.078 ops/s
# Warmup Iteration  18: 35529481.078 ops/s
# Warmup Iteration  19: 35700365.384 ops/s
# Warmup Iteration  20: 35685058.446 ops/s
# Warmup Iteration  21: 35362351.174 ops/s
# Warmup Iteration  22: 35639045.607 ops/s
# Warmup Iteration  23: 35379264.038 ops/s
# Warmup Iteration  24: 35734825.873 ops/s
# Warmup Iteration  25: 35607206.823 ops/s
# Warmup Iteration  26: 35738493.050 ops/s
# Warmup Iteration  27: 35628198.946 ops/s
# Warmup Iteration  28: 35596277.899 ops/s
# Warmup Iteration  29: 35649292.552 ops/s
# Warmup Iteration  30: 35817736.463 ops/s
Iteration   1: 35463396.233 ops/s
Iteration   2: 35493894.500 ops/s
Iteration   3: 35598422.755 ops/s
Iteration   4: 35672463.275 ops/s
Iteration   5: 35692677.942 ops/s
Iteration   6: 35486787.791 ops/s
Iteration   7: 35753951.342 ops/s
Iteration   8: 35632972.079 ops/s
Iteration   9: 35469162.200 ops/s
Iteration  10: 35466410.551 ops/s
Iteration  11: 35393445.879 ops/s
Iteration  12: 35694193.380 ops/s
Iteration  13: 35583850.783 ops/s
Iteration  14: 35714872.704 ops/s
Iteration  15: 35470138.799 ops/s
Iteration  16: 35285456.218 ops/s
Iteration  17: 35576295.995 ops/s
Iteration  18: 35519332.031 ops/s
Iteration  19: 35499342.288 ops/s
Iteration  20: 35620529.211 ops/s
Iteration  21: 35391243.586 ops/s
Iteration  22: 35025803.872 ops/s
Iteration  23: 35694661.957 ops/s
Iteration  24: 35687055.051 ops/s
Iteration  25: 35591556.411 ops/s
Iteration  26: 35686985.471 ops/s
Iteration  27: 35731434.113 ops/s
Iteration  28: 35768920.179 ops/s
Iteration  29: 35418132.854 ops/s
Iteration  30: 35586867.732 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_safe":
  35555675.239 ±(99.9%) 106170.128 ops/s [Average]
  (min, avg, max) = (35025803.872, 35555675.239, 35768920.179), stdev = 158910.462
  CI (99.9%): [35449505.111, 35661845.368] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_max_null_safe  thrpt   30  35555675.239 ± 106170.128  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20454757.515 ops/s
# Warmup Iteration   2: 42825697.584 ops/s
# Warmup Iteration   3: 36680181.582 ops/s
# Warmup Iteration   4: 46942249.386 ops/s
# Warmup Iteration   5: 46915357.512 ops/s
# Warmup Iteration   6: 47260030.631 ops/s
# Warmup Iteration   7: 46236416.394 ops/s
# Warmup Iteration   8: 46524648.687 ops/s
# Warmup Iteration   9: 47137119.873 ops/s
# Warmup Iteration  10: 47012006.797 ops/s
# Warmup Iteration  11: 47211219.645 ops/s
# Warmup Iteration  12: 47254647.116 ops/s
# Warmup Iteration  13: 47049745.973 ops/s
# Warmup Iteration  14: 47277546.258 ops/s
# Warmup Iteration  15: 46878664.145 ops/s
# Warmup Iteration  16: 46560580.525 ops/s
# Warmup Iteration  17: 47086302.161 ops/s
# Warmup Iteration  18: 46985055.080 ops/s
# Warmup Iteration  19: 47168315.315 ops/s
# Warmup Iteration  20: 46780782.119 ops/s
# Warmup Iteration  21: 47220806.001 ops/s
# Warmup Iteration  22: 47081405.457 ops/s
# Warmup Iteration  23: 46871537.819 ops/s
# Warmup Iteration  24: 47103323.773 ops/s
# Warmup Iteration  25: 47288508.993 ops/s
# Warmup Iteration  26: 47187978.666 ops/s
# Warmup Iteration  27: 47135656.512 ops/s
# Warmup Iteration  28: 46760562.714 ops/s
# Warmup Iteration  29: 47029934.026 ops/s
# Warmup Iteration  30: 46996643.453 ops/s
Iteration   1: 47048352.607 ops/s
Iteration   2: 47315725.316 ops/s
Iteration   3: 47250615.384 ops/s
Iteration   4: 47122675.050 ops/s
Iteration   5: 46786485.006 ops/s
Iteration   6: 47329147.726 ops/s
Iteration   7: 47260679.281 ops/s
Iteration   8: 47330124.229 ops/s
Iteration   9: 46994273.998 ops/s
Iteration  10: 46746566.126 ops/s
Iteration  11: 47352408.943 ops/s
Iteration  12: 47358226.238 ops/s
Iteration  13: 47070736.477 ops/s
Iteration  14: 47033570.780 ops/s
Iteration  15: 46929428.545 ops/s
Iteration  16: 47127051.846 ops/s
Iteration  17: 46942751.269 ops/s
Iteration  18: 46952685.446 ops/s
Iteration  19: 47103641.297 ops/s
Iteration  20: 46764646.404 ops/s
Iteration  21: 46731518.172 ops/s
Iteration  22: 47017679.726 ops/s
Iteration  23: 46569921.278 ops/s
Iteration  24: 46646827.383 ops/s
Iteration  25: 46537100.303 ops/s
Iteration  26: 46839594.322 ops/s
Iteration  27: 47090151.502 ops/s
Iteration  28: 47075806.332 ops/s
Iteration  29: 46539136.381 ops/s
Iteration  30: 46773566.691 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws":
  46988036.469 ±(99.9%) 167454.771 ops/s [Average]
  (min, avg, max) = (46537100.303, 46988036.469, 47358226.238), stdev = 250638.437
  CI (99.9%): [46820581.698, 47155491.239] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_max_null_throws  thrpt   30  46988036.469 ± 167454.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 145081.267 ops/s
# Warmup Iteration   2: 150114.957 ops/s
# Warmup Iteration   3: 151142.311 ops/s
# Warmup Iteration   4: 151113.417 ops/s
# Warmup Iteration   5: 152774.172 ops/s
# Warmup Iteration   6: 152110.191 ops/s
# Warmup Iteration   7: 151710.161 ops/s
# Warmup Iteration   8: 151752.236 ops/s
# Warmup Iteration   9: 151537.320 ops/s
# Warmup Iteration  10: 151540.121 ops/s
# Warmup Iteration  11: 151458.084 ops/s
# Warmup Iteration  12: 154745.417 ops/s
# Warmup Iteration  13: 159479.962 ops/s
# Warmup Iteration  14: 157968.037 ops/s
# Warmup Iteration  15: 159048.122 ops/s
# Warmup Iteration  16: 158403.302 ops/s
# Warmup Iteration  17: 160659.151 ops/s
# Warmup Iteration  18: 160469.026 ops/s
# Warmup Iteration  19: 159693.755 ops/s
# Warmup Iteration  20: 160525.283 ops/s
# Warmup Iteration  21: 160325.514 ops/s
# Warmup Iteration  22: 160327.001 ops/s
# Warmup Iteration  23: 159776.566 ops/s
# Warmup Iteration  24: 160114.782 ops/s
# Warmup Iteration  25: 160422.566 ops/s
# Warmup Iteration  26: 159921.189 ops/s
# Warmup Iteration  27: 159647.858 ops/s
# Warmup Iteration  28: 160294.430 ops/s
# Warmup Iteration  29: 159115.305 ops/s
# Warmup Iteration  30: 160649.608 ops/s
Iteration   1: 160476.916 ops/s
Iteration   2: 160341.412 ops/s
Iteration   3: 160300.379 ops/s
Iteration   4: 160707.421 ops/s
Iteration   5: 159448.117 ops/s
Iteration   6: 159379.905 ops/s
Iteration   7: 160181.446 ops/s
Iteration   8: 160009.827 ops/s
Iteration   9: 160232.579 ops/s
Iteration  10: 160129.751 ops/s
Iteration  11: 160325.682 ops/s
Iteration  12: 160320.443 ops/s
Iteration  13: 160666.386 ops/s
Iteration  14: 161441.355 ops/s
Iteration  15: 161566.584 ops/s
Iteration  16: 160150.187 ops/s
Iteration  17: 160311.278 ops/s
Iteration  18: 160664.308 ops/s
Iteration  19: 159720.003 ops/s
Iteration  20: 161968.168 ops/s
Iteration  21: 160260.830 ops/s
Iteration  22: 160273.391 ops/s
Iteration  23: 160499.155 ops/s
Iteration  24: 161131.386 ops/s
Iteration  25: 161257.956 ops/s
Iteration  26: 159360.728 ops/s
Iteration  27: 159971.742 ops/s
Iteration  28: 159685.319 ops/s
Iteration  29: 160335.749 ops/s
Iteration  30: 160263.759 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator":
  160379.405 ±(99.9%) 412.447 ops/s [Average]
  (min, avg, max) = (159360.728, 160379.405, 161968.168), stdev = 617.331
  CI (99.9%): [159966.959, 160791.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  160379.405 ± 412.447  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22287628.134 ops/s
# Warmup Iteration   2: 44827275.711 ops/s
# Warmup Iteration   3: 37778037.215 ops/s
# Warmup Iteration   4: 44908439.314 ops/s
# Warmup Iteration   5: 44669924.234 ops/s
# Warmup Iteration   6: 44481547.188 ops/s
# Warmup Iteration   7: 44750644.990 ops/s
# Warmup Iteration   8: 44625342.910 ops/s
# Warmup Iteration   9: 44767648.873 ops/s
# Warmup Iteration  10: 44590295.665 ops/s
# Warmup Iteration  11: 44716428.765 ops/s
# Warmup Iteration  12: 44647271.661 ops/s
# Warmup Iteration  13: 44984731.370 ops/s
# Warmup Iteration  14: 44672895.842 ops/s
# Warmup Iteration  15: 44977813.423 ops/s
# Warmup Iteration  16: 44770322.347 ops/s
# Warmup Iteration  17: 44915086.512 ops/s
# Warmup Iteration  18: 44925017.421 ops/s
# Warmup Iteration  19: 44765446.705 ops/s
# Warmup Iteration  20: 44958097.834 ops/s
# Warmup Iteration  21: 44680564.834 ops/s
# Warmup Iteration  22: 44783078.383 ops/s
# Warmup Iteration  23: 44923705.372 ops/s
# Warmup Iteration  24: 44787912.075 ops/s
# Warmup Iteration  25: 44789180.148 ops/s
# Warmup Iteration  26: 45067710.863 ops/s
# Warmup Iteration  27: 44867076.417 ops/s
# Warmup Iteration  28: 44579091.621 ops/s
# Warmup Iteration  29: 44874090.424 ops/s
# Warmup Iteration  30: 44939434.432 ops/s
Iteration   1: 44888776.858 ops/s
Iteration   2: 45154051.080 ops/s
Iteration   3: 45269667.053 ops/s
Iteration   4: 44907693.788 ops/s
Iteration   5: 44892636.602 ops/s
Iteration   6: 45062394.624 ops/s
Iteration   7: 45127061.647 ops/s
Iteration   8: 45217608.325 ops/s
Iteration   9: 45156681.959 ops/s
Iteration  10: 44929761.132 ops/s
Iteration  11: 45232568.754 ops/s
Iteration  12: 45177577.966 ops/s
Iteration  13: 45184764.420 ops/s
Iteration  14: 45016872.285 ops/s
Iteration  15: 44981913.220 ops/s
Iteration  16: 45014401.060 ops/s
Iteration  17: 45127624.062 ops/s
Iteration  18: 45057158.847 ops/s
Iteration  19: 44903375.063 ops/s
Iteration  20: 45149087.866 ops/s
Iteration  21: 44966060.143 ops/s
Iteration  22: 45041726.968 ops/s
Iteration  23: 44942660.387 ops/s
Iteration  24: 44676365.451 ops/s
Iteration  25: 44738691.831 ops/s
Iteration  26: 45040434.886 ops/s
Iteration  27: 44977719.576 ops/s
Iteration  28: 45031203.122 ops/s
Iteration  29: 45083531.298 ops/s
Iteration  30: 45011674.484 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_max_without_comparator":
  45032058.158 ±(99.9%) 92512.479 ops/s [Average]
  (min, avg, max) = (44676365.451, 45032058.158, 45269667.053), stdev = 138468.333
  CI (99.9%): [44939545.680, 45124570.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_max_without_comparator  thrpt   30  45032058.158 ± 92512.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22811274.832 ops/s
# Warmup Iteration   2: 41836945.702 ops/s
# Warmup Iteration   3: 38075041.419 ops/s
# Warmup Iteration   4: 45072849.117 ops/s
# Warmup Iteration   5: 44981472.728 ops/s
# Warmup Iteration   6: 45109796.283 ops/s
# Warmup Iteration   7: 45029089.359 ops/s
# Warmup Iteration   8: 45178736.382 ops/s
# Warmup Iteration   9: 45169477.618 ops/s
# Warmup Iteration  10: 45031748.861 ops/s
# Warmup Iteration  11: 45131164.015 ops/s
# Warmup Iteration  12: 45087580.713 ops/s
# Warmup Iteration  13: 44798865.254 ops/s
# Warmup Iteration  14: 45080284.518 ops/s
# Warmup Iteration  15: 45013701.016 ops/s
# Warmup Iteration  16: 45365995.094 ops/s
# Warmup Iteration  17: 45049001.398 ops/s
# Warmup Iteration  18: 45158733.989 ops/s
# Warmup Iteration  19: 45222331.084 ops/s
# Warmup Iteration  20: 45259330.304 ops/s
# Warmup Iteration  21: 45029301.518 ops/s
# Warmup Iteration  22: 44935376.506 ops/s
# Warmup Iteration  23: 44813203.206 ops/s
# Warmup Iteration  24: 44883129.862 ops/s
# Warmup Iteration  25: 44922359.989 ops/s
# Warmup Iteration  26: 45030033.490 ops/s
# Warmup Iteration  27: 44964480.127 ops/s
# Warmup Iteration  28: 45196382.487 ops/s
# Warmup Iteration  29: 45161786.982 ops/s
# Warmup Iteration  30: 45109008.851 ops/s
Iteration   1: 44968769.884 ops/s
Iteration   2: 44973118.241 ops/s
Iteration   3: 45079550.765 ops/s
Iteration   4: 44877217.721 ops/s
Iteration   5: 45301304.097 ops/s
Iteration   6: 45348509.239 ops/s
Iteration   7: 45164591.790 ops/s
Iteration   8: 45086588.520 ops/s
Iteration   9: 45188374.835 ops/s
Iteration  10: 45212339.152 ops/s
Iteration  11: 45050132.453 ops/s
Iteration  12: 45202298.375 ops/s
Iteration  13: 45413367.621 ops/s
Iteration  14: 45168742.655 ops/s
Iteration  15: 45088239.221 ops/s
Iteration  16: 45070712.288 ops/s
Iteration  17: 45312301.998 ops/s
Iteration  18: 45177153.399 ops/s
Iteration  19: 44980296.807 ops/s
Iteration  20: 44994973.690 ops/s
Iteration  21: 45057936.774 ops/s
Iteration  22: 45180679.715 ops/s
Iteration  23: 44968033.076 ops/s
Iteration  24: 45284947.720 ops/s
Iteration  25: 45053140.969 ops/s
Iteration  26: 44718309.623 ops/s
Iteration  27: 44822329.125 ops/s
Iteration  28: 45152694.305 ops/s
Iteration  29: 45274155.153 ops/s
Iteration  30: 45104304.327 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min":
  45109170.451 ±(99.9%) 105212.753 ops/s [Average]
  (min, avg, max) = (44718309.623, 45109170.451, 45413367.621), stdev = 157477.507
  CI (99.9%): [45003957.699, 45214383.204] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_min  thrpt   30  45109170.451 ± 105212.753  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 13994294.613 ops/s
# Warmup Iteration   2: 28873344.466 ops/s
# Warmup Iteration   3: 24455733.985 ops/s
# Warmup Iteration   4: 29025775.792 ops/s
# Warmup Iteration   5: 28929740.131 ops/s
# Warmup Iteration   6: 28875494.732 ops/s
# Warmup Iteration   7: 28989710.969 ops/s
# Warmup Iteration   8: 28729836.016 ops/s
# Warmup Iteration   9: 29058963.992 ops/s
# Warmup Iteration  10: 29006416.365 ops/s
# Warmup Iteration  11: 28953859.778 ops/s
# Warmup Iteration  12: 29060050.830 ops/s
# Warmup Iteration  13: 28844403.668 ops/s
# Warmup Iteration  14: 28947709.604 ops/s
# Warmup Iteration  15: 28786004.690 ops/s
# Warmup Iteration  16: 28868497.538 ops/s
# Warmup Iteration  17: 29284148.831 ops/s
# Warmup Iteration  18: 29232929.619 ops/s
# Warmup Iteration  19: 29265079.398 ops/s
# Warmup Iteration  20: 29359755.770 ops/s
# Warmup Iteration  21: 29389134.702 ops/s
# Warmup Iteration  22: 29329954.100 ops/s
# Warmup Iteration  23: 29207722.102 ops/s
# Warmup Iteration  24: 29418564.004 ops/s
# Warmup Iteration  25: 29315454.345 ops/s
# Warmup Iteration  26: 29335773.973 ops/s
# Warmup Iteration  27: 29111666.717 ops/s
# Warmup Iteration  28: 29309929.584 ops/s
# Warmup Iteration  29: 29170507.093 ops/s
# Warmup Iteration  30: 29266259.410 ops/s
Iteration   1: 29171218.467 ops/s
Iteration   2: 29333281.746 ops/s
Iteration   3: 29378845.651 ops/s
Iteration   4: 29223445.033 ops/s
Iteration   5: 29282153.957 ops/s
Iteration   6: 29280548.064 ops/s
Iteration   7: 29329144.387 ops/s
Iteration   8: 29218571.676 ops/s
Iteration   9: 29133250.891 ops/s
Iteration  10: 29109742.804 ops/s
Iteration  11: 29321405.000 ops/s
Iteration  12: 29312010.118 ops/s
Iteration  13: 29191888.558 ops/s
Iteration  14: 29190287.719 ops/s
Iteration  15: 29127269.886 ops/s
Iteration  16: 29069969.056 ops/s
Iteration  17: 29132045.339 ops/s
Iteration  18: 29178085.792 ops/s
Iteration  19: 29564053.289 ops/s
Iteration  20: 29017133.925 ops/s
Iteration  21: 29186784.377 ops/s
Iteration  22: 29232965.219 ops/s
Iteration  23: 29349828.677 ops/s
Iteration  24: 29365429.480 ops/s
Iteration  25: 29291243.009 ops/s
Iteration  26: 29284796.851 ops/s
Iteration  27: 29300009.754 ops/s
Iteration  28: 29232219.767 ops/s
Iteration  29: 29369081.101 ops/s
Iteration  30: 29127040.675 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy":
  29243458.342 ±(99.9%) 75424.411 ops/s [Average]
  (min, avg, max) = (29017133.925, 29243458.342, 29564053.289), stdev = 112891.716
  CI (99.9%): [29168033.931, 29318882.753] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_minBy  thrpt   30  29243458.342 ± 75424.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9145818.378 ops/s
# Warmup Iteration   2: 18368962.024 ops/s
# Warmup Iteration   3: 15799448.469 ops/s
# Warmup Iteration   4: 18571750.133 ops/s
# Warmup Iteration   5: 18607358.226 ops/s
# Warmup Iteration   6: 18603395.884 ops/s
# Warmup Iteration   7: 18558595.381 ops/s
# Warmup Iteration   8: 18687738.607 ops/s
# Warmup Iteration   9: 18612343.399 ops/s
# Warmup Iteration  10: 18700780.311 ops/s
# Warmup Iteration  11: 18675160.924 ops/s
# Warmup Iteration  12: 18686798.434 ops/s
# Warmup Iteration  13: 18618663.414 ops/s
# Warmup Iteration  14: 18662165.566 ops/s
# Warmup Iteration  15: 18729120.485 ops/s
# Warmup Iteration  16: 18698316.903 ops/s
# Warmup Iteration  17: 18549711.522 ops/s
# Warmup Iteration  18: 18572197.973 ops/s
# Warmup Iteration  19: 18555307.008 ops/s
# Warmup Iteration  20: 18618520.763 ops/s
# Warmup Iteration  21: 18611260.805 ops/s
# Warmup Iteration  22: 18557765.125 ops/s
# Warmup Iteration  23: 18579103.540 ops/s
# Warmup Iteration  24: 18604534.683 ops/s
# Warmup Iteration  25: 18469691.642 ops/s
# Warmup Iteration  26: 18619452.324 ops/s
# Warmup Iteration  27: 18508817.422 ops/s
# Warmup Iteration  28: 18654381.295 ops/s
# Warmup Iteration  29: 18567853.532 ops/s
# Warmup Iteration  30: 18588266.527 ops/s
Iteration   1: 18650415.509 ops/s
Iteration   2: 18537900.245 ops/s
Iteration   3: 18515299.316 ops/s
Iteration   4: 18537468.334 ops/s
Iteration   5: 18649145.580 ops/s
Iteration   6: 18523158.968 ops/s
Iteration   7: 18607875.138 ops/s
Iteration   8: 18598280.763 ops/s
Iteration   9: 18664206.522 ops/s
Iteration  10: 18548129.938 ops/s
Iteration  11: 18586638.600 ops/s
Iteration  12: 18606525.664 ops/s
Iteration  13: 18617913.355 ops/s
Iteration  14: 18562947.315 ops/s
Iteration  15: 18622113.129 ops/s
Iteration  16: 18608938.568 ops/s
Iteration  17: 18724417.648 ops/s
Iteration  18: 18569726.839 ops/s
Iteration  19: 18564089.789 ops/s
Iteration  20: 18501170.769 ops/s
Iteration  21: 18573896.202 ops/s
Iteration  22: 18500712.442 ops/s
Iteration  23: 18517638.447 ops/s
Iteration  24: 18607098.240 ops/s
Iteration  25: 18580327.024 ops/s
Iteration  26: 18477644.707 ops/s
Iteration  27: 18481305.952 ops/s
Iteration  28: 18447607.378 ops/s
Iteration  29: 18447506.407 ops/s
Iteration  30: 18439922.018 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minByOptional":
  18562334.027 ±(99.9%) 46251.199 ops/s [Average]
  (min, avg, max) = (18439922.018, 18562334.027, 18724417.648), stdev = 69226.622
  CI (99.9%): [18516082.828, 18608585.225] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_minByOptional  thrpt   30  18562334.027 ± 46251.199  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 19047483.102 ops/s
# Warmup Iteration   2: 40677279.673 ops/s
# Warmup Iteration   3: 34424735.522 ops/s
# Warmup Iteration   4: 39131117.687 ops/s
# Warmup Iteration   5: 39204041.316 ops/s
# Warmup Iteration   6: 39131425.127 ops/s
# Warmup Iteration   7: 39180876.322 ops/s
# Warmup Iteration   8: 39238877.838 ops/s
# Warmup Iteration   9: 38997032.453 ops/s
# Warmup Iteration  10: 39195207.293 ops/s
# Warmup Iteration  11: 39126627.016 ops/s
# Warmup Iteration  12: 39135595.642 ops/s
# Warmup Iteration  13: 39262105.210 ops/s
# Warmup Iteration  14: 39182275.753 ops/s
# Warmup Iteration  15: 39366494.913 ops/s
# Warmup Iteration  16: 39147674.810 ops/s
# Warmup Iteration  17: 39265238.588 ops/s
# Warmup Iteration  18: 39378087.553 ops/s
# Warmup Iteration  19: 39437625.569 ops/s
# Warmup Iteration  20: 39533757.052 ops/s
# Warmup Iteration  21: 39550226.276 ops/s
# Warmup Iteration  22: 39482661.456 ops/s
# Warmup Iteration  23: 39494342.930 ops/s
# Warmup Iteration  24: 39524718.964 ops/s
# Warmup Iteration  25: 39325189.896 ops/s
# Warmup Iteration  26: 39422599.228 ops/s
# Warmup Iteration  27: 39438165.782 ops/s
# Warmup Iteration  28: 39572392.382 ops/s
# Warmup Iteration  29: 39198881.540 ops/s
# Warmup Iteration  30: 39443772.921 ops/s
Iteration   1: 39582950.508 ops/s
Iteration   2: 39614044.198 ops/s
Iteration   3: 39572191.639 ops/s
Iteration   4: 39393868.848 ops/s
Iteration   5: 39193920.136 ops/s
Iteration   6: 39514288.734 ops/s
Iteration   7: 39509920.866 ops/s
Iteration   8: 39531238.172 ops/s
Iteration   9: 39533708.730 ops/s
Iteration  10: 39563035.552 ops/s
Iteration  11: 39388566.698 ops/s
Iteration  12: 39515658.517 ops/s
Iteration  13: 39743262.442 ops/s
Iteration  14: 39617136.139 ops/s
Iteration  15: 39415993.037 ops/s
Iteration  16: 39503425.303 ops/s
Iteration  17: 39518963.583 ops/s
Iteration  18: 39365474.746 ops/s
Iteration  19: 39341308.104 ops/s
Iteration  20: 39300766.407 ops/s
Iteration  21: 39384734.482 ops/s
Iteration  22: 39458474.615 ops/s
Iteration  23: 38981260.727 ops/s
Iteration  24: 39498938.137 ops/s
Iteration  25: 39333184.772 ops/s
Iteration  26: 39568844.418 ops/s
Iteration  27: 39378752.604 ops/s
Iteration  28: 39493836.843 ops/s
Iteration  29: 39258342.418 ops/s
Iteration  30: 39434537.487 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minBy_null_throws":
  39450354.295 ±(99.9%) 98672.898 ops/s [Average]
  (min, avg, max) = (38981260.727, 39450354.295, 39743262.442), stdev = 147688.960
  CI (99.9%): [39351681.397, 39549027.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  39450354.295 ± 98672.898  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9674210.631 ops/s
# Warmup Iteration   2: 19537802.937 ops/s
# Warmup Iteration   3: 16785227.925 ops/s
# Warmup Iteration   4: 19758105.061 ops/s
# Warmup Iteration   5: 19795166.006 ops/s
# Warmup Iteration   6: 19862521.777 ops/s
# Warmup Iteration   7: 19814544.171 ops/s
# Warmup Iteration   8: 19736778.211 ops/s
# Warmup Iteration   9: 19726823.393 ops/s
# Warmup Iteration  10: 19753201.532 ops/s
# Warmup Iteration  11: 19739027.827 ops/s
# Warmup Iteration  12: 19802620.253 ops/s
# Warmup Iteration  13: 19568369.137 ops/s
# Warmup Iteration  14: 19730321.445 ops/s
# Warmup Iteration  15: 19816565.396 ops/s
# Warmup Iteration  16: 19742401.204 ops/s
# Warmup Iteration  17: 19800214.800 ops/s
# Warmup Iteration  18: 19880240.770 ops/s
# Warmup Iteration  19: 19765864.258 ops/s
# Warmup Iteration  20: 19842347.903 ops/s
# Warmup Iteration  21: 19844494.872 ops/s
# Warmup Iteration  22: 19835653.395 ops/s
# Warmup Iteration  23: 19647407.936 ops/s
# Warmup Iteration  24: 19827896.985 ops/s
# Warmup Iteration  25: 19966850.457 ops/s
# Warmup Iteration  26: 19907026.602 ops/s
# Warmup Iteration  27: 19884189.070 ops/s
# Warmup Iteration  28: 19881864.965 ops/s
# Warmup Iteration  29: 19760442.316 ops/s
# Warmup Iteration  30: 19863395.657 ops/s
Iteration   1: 19866288.418 ops/s
Iteration   2: 19793662.639 ops/s
Iteration   3: 19794188.362 ops/s
Iteration   4: 19909831.423 ops/s
Iteration   5: 19685957.114 ops/s
Iteration   6: 19736071.911 ops/s
Iteration   7: 19928426.399 ops/s
Iteration   8: 19872078.946 ops/s
Iteration   9: 19848945.854 ops/s
Iteration  10: 19808191.040 ops/s
Iteration  11: 19869238.507 ops/s
Iteration  12: 19789058.346 ops/s
Iteration  13: 19809795.726 ops/s
Iteration  14: 19765244.499 ops/s
Iteration  15: 19896580.732 ops/s
Iteration  16: 19893194.391 ops/s
Iteration  17: 19706362.835 ops/s
Iteration  18: 19741878.766 ops/s
Iteration  19: 19826503.199 ops/s
Iteration  20: 19753561.131 ops/s
Iteration  21: 19972114.964 ops/s
Iteration  22: 19804765.215 ops/s
Iteration  23: 19881509.219 ops/s
Iteration  24: 19928640.866 ops/s
Iteration  25: 19603740.003 ops/s
Iteration  26: 19831526.785 ops/s
Iteration  27: 19791083.959 ops/s
Iteration  28: 19978331.982 ops/s
Iteration  29: 19669145.593 ops/s
Iteration  30: 19878337.409 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_minOptional":
  19821141.875 ±(99.9%) 59640.934 ops/s [Average]
  (min, avg, max) = (19603740.003, 19821141.875, 19978331.982), stdev = 89267.748
  CI (99.9%): [19761500.941, 19880782.808] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_minOptional  thrpt   30  19821141.875 ± 59640.934  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 770618.419 ops/s
# Warmup Iteration   2: 797948.016 ops/s
# Warmup Iteration   3: 940180.318 ops/s
# Warmup Iteration   4: 1011605.889 ops/s
# Warmup Iteration   5: 1012646.743 ops/s
# Warmup Iteration   6: 1013588.990 ops/s
# Warmup Iteration   7: 1012335.745 ops/s
# Warmup Iteration   8: 1010917.380 ops/s
# Warmup Iteration   9: 1014433.986 ops/s
# Warmup Iteration  10: 1014917.577 ops/s
# Warmup Iteration  11: 1014004.687 ops/s
# Warmup Iteration  12: 1011728.972 ops/s
# Warmup Iteration  13: 1009928.693 ops/s
# Warmup Iteration  14: 852075.056 ops/s
# Warmup Iteration  15: 1012675.482 ops/s
# Warmup Iteration  16: 1014903.575 ops/s
# Warmup Iteration  17: 1066826.834 ops/s
# Warmup Iteration  18: 1067922.556 ops/s
# Warmup Iteration  19: 1068444.609 ops/s
# Warmup Iteration  20: 1066596.870 ops/s
# Warmup Iteration  21: 1068982.964 ops/s
# Warmup Iteration  22: 1070993.026 ops/s
# Warmup Iteration  23: 1063914.200 ops/s
# Warmup Iteration  24: 1065076.434 ops/s
# Warmup Iteration  25: 1069583.065 ops/s
# Warmup Iteration  26: 1070599.867 ops/s
# Warmup Iteration  27: 1067607.005 ops/s
# Warmup Iteration  28: 1064801.176 ops/s
# Warmup Iteration  29: 1067632.318 ops/s
# Warmup Iteration  30: 1066701.560 ops/s
Iteration   1: 1065850.638 ops/s
Iteration   2: 1062748.465 ops/s
Iteration   3: 1066826.942 ops/s
Iteration   4: 1067724.385 ops/s
Iteration   5: 1062838.042 ops/s
Iteration   6: 1070795.104 ops/s
Iteration   7: 1058206.366 ops/s
Iteration   8: 1066204.317 ops/s
Iteration   9: 1065656.581 ops/s
Iteration  10: 1064625.449 ops/s
Iteration  11: 1069740.465 ops/s
Iteration  12: 1068814.926 ops/s
Iteration  13: 1068030.755 ops/s
Iteration  14: 1065643.102 ops/s
Iteration  15: 1064979.563 ops/s
Iteration  16: 1067173.158 ops/s
Iteration  17: 1064964.643 ops/s
Iteration  18: 1068759.492 ops/s
Iteration  19: 1064324.842 ops/s
Iteration  20: 1069491.471 ops/s
Iteration  21: 1069288.356 ops/s
Iteration  22: 1064398.535 ops/s
Iteration  23: 1063344.322 ops/s
Iteration  24: 1066645.247 ops/s
Iteration  25: 1073071.253 ops/s
Iteration  26: 1072412.088 ops/s
Iteration  27: 1065720.319 ops/s
Iteration  28: 1067614.547 ops/s
Iteration  29: 1070366.511 ops/s
Iteration  30: 1072809.787 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_empty_throws":
  1066968.989 ±(99.9%) 2199.218 ops/s [Average]
  (min, avg, max) = (1058206.366, 1066968.989, 1073071.253), stdev = 3291.687
  CI (99.9%): [1064769.771, 1069168.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1066968.989 ± 2199.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12915883.396 ops/s
# Warmup Iteration   2: 27007363.281 ops/s
# Warmup Iteration   3: 22455017.750 ops/s
# Warmup Iteration   4: 26539837.752 ops/s
# Warmup Iteration   5: 26700033.048 ops/s
# Warmup Iteration   6: 26746432.425 ops/s
# Warmup Iteration   7: 26654490.400 ops/s
# Warmup Iteration   8: 26727606.329 ops/s
# Warmup Iteration   9: 26580050.300 ops/s
# Warmup Iteration  10: 26614629.271 ops/s
# Warmup Iteration  11: 26711874.245 ops/s
# Warmup Iteration  12: 26697670.740 ops/s
# Warmup Iteration  13: 26680428.383 ops/s
# Warmup Iteration  14: 26751393.318 ops/s
# Warmup Iteration  15: 26753937.800 ops/s
# Warmup Iteration  16: 26651936.449 ops/s
# Warmup Iteration  17: 26790109.523 ops/s
# Warmup Iteration  18: 26685550.608 ops/s
# Warmup Iteration  19: 26760966.668 ops/s
# Warmup Iteration  20: 26662738.677 ops/s
# Warmup Iteration  21: 26520967.981 ops/s
# Warmup Iteration  22: 26642304.151 ops/s
# Warmup Iteration  23: 26675606.612 ops/s
# Warmup Iteration  24: 26558482.796 ops/s
# Warmup Iteration  25: 26729749.690 ops/s
# Warmup Iteration  26: 26665107.584 ops/s
# Warmup Iteration  27: 26715123.551 ops/s
# Warmup Iteration  28: 26700860.106 ops/s
# Warmup Iteration  29: 26581414.191 ops/s
# Warmup Iteration  30: 26734719.317 ops/s
Iteration   1: 26712044.481 ops/s
Iteration   2: 26826538.972 ops/s
Iteration   3: 26727218.186 ops/s
Iteration   4: 26629658.892 ops/s
Iteration   5: 26721531.997 ops/s
Iteration   6: 26711318.037 ops/s
Iteration   7: 26805700.653 ops/s
Iteration   8: 26804595.392 ops/s
Iteration   9: 26743315.244 ops/s
Iteration  10: 26833241.562 ops/s
Iteration  11: 26728563.294 ops/s
Iteration  12: 26725869.402 ops/s
Iteration  13: 26738618.227 ops/s
Iteration  14: 26894214.039 ops/s
Iteration  15: 26696170.123 ops/s
Iteration  16: 26651114.130 ops/s
Iteration  17: 26473754.556 ops/s
Iteration  18: 26666243.478 ops/s
Iteration  19: 26542325.035 ops/s
Iteration  20: 26779130.179 ops/s
Iteration  21: 26703196.830 ops/s
Iteration  22: 26689779.512 ops/s
Iteration  23: 26735493.154 ops/s
Iteration  24: 26613060.267 ops/s
Iteration  25: 26671731.973 ops/s
Iteration  26: 26676868.747 ops/s
Iteration  27: 26548671.010 ops/s
Iteration  28: 26640056.590 ops/s
Iteration  29: 26524935.758 ops/s
Iteration  30: 26689952.814 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_safe":
  26696830.418 ±(99.9%) 63009.775 ops/s [Average]
  (min, avg, max) = (26473754.556, 26696830.418, 26894214.039), stdev = 94310.072
  CI (99.9%): [26633820.643, 26759840.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_min_null_safe  thrpt   30  26696830.418 ± 63009.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20358662.808 ops/s
# Warmup Iteration   2: 42803124.960 ops/s
# Warmup Iteration   3: 38233154.246 ops/s
# Warmup Iteration   4: 45295335.796 ops/s
# Warmup Iteration   5: 45048490.240 ops/s
# Warmup Iteration   6: 45126261.846 ops/s
# Warmup Iteration   7: 44764039.441 ops/s
# Warmup Iteration   8: 45085509.527 ops/s
# Warmup Iteration   9: 44832120.620 ops/s
# Warmup Iteration  10: 44993498.683 ops/s
# Warmup Iteration  11: 45009703.573 ops/s
# Warmup Iteration  12: 45173420.341 ops/s
# Warmup Iteration  13: 45047285.116 ops/s
# Warmup Iteration  14: 45066306.169 ops/s
# Warmup Iteration  15: 44780903.048 ops/s
# Warmup Iteration  16: 45095459.651 ops/s
# Warmup Iteration  17: 45202810.258 ops/s
# Warmup Iteration  18: 44990549.351 ops/s
# Warmup Iteration  19: 45291749.283 ops/s
# Warmup Iteration  20: 45211828.005 ops/s
# Warmup Iteration  21: 45214859.022 ops/s
# Warmup Iteration  22: 45204211.273 ops/s
# Warmup Iteration  23: 45172518.431 ops/s
# Warmup Iteration  24: 44884914.336 ops/s
# Warmup Iteration  25: 44721761.818 ops/s
# Warmup Iteration  26: 45317511.053 ops/s
# Warmup Iteration  27: 44937342.667 ops/s
# Warmup Iteration  28: 45032367.973 ops/s
# Warmup Iteration  29: 45217521.372 ops/s
# Warmup Iteration  30: 45259131.045 ops/s
Iteration   1: 45315369.093 ops/s
Iteration   2: 45164387.071 ops/s
Iteration   3: 45010651.298 ops/s
Iteration   4: 45244059.193 ops/s
Iteration   5: 45227056.738 ops/s
Iteration   6: 45162691.235 ops/s
Iteration   7: 45435379.414 ops/s
Iteration   8: 45463699.198 ops/s
Iteration   9: 45402638.638 ops/s
Iteration  10: 45207729.953 ops/s
Iteration  11: 45061222.350 ops/s
Iteration  12: 45198753.880 ops/s
Iteration  13: 45167452.185 ops/s
Iteration  14: 45386781.181 ops/s
Iteration  15: 45447505.395 ops/s
Iteration  16: 45134442.366 ops/s
Iteration  17: 45032542.411 ops/s
Iteration  18: 45091336.804 ops/s
Iteration  19: 44963124.474 ops/s
Iteration  20: 44992099.814 ops/s
Iteration  21: 45260458.201 ops/s
Iteration  22: 45035863.618 ops/s
Iteration  23: 45200830.568 ops/s
Iteration  24: 44905619.488 ops/s
Iteration  25: 44707217.405 ops/s
Iteration  26: 45032860.078 ops/s
Iteration  27: 44903187.892 ops/s
Iteration  28: 44933288.572 ops/s
Iteration  29: 45058062.074 ops/s
Iteration  30: 45261160.868 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws":
  45146915.715 ±(99.9%) 122008.378 ops/s [Average]
  (min, avg, max) = (44707217.405, 45146915.715, 45463699.198), stdev = 182616.411
  CI (99.9%): [45024907.337, 45268924.093] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_min_null_throws  thrpt   30  45146915.715 ± 122008.378  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 143147.410 ops/s
# Warmup Iteration   2: 150466.305 ops/s
# Warmup Iteration   3: 150118.524 ops/s
# Warmup Iteration   4: 152469.900 ops/s
# Warmup Iteration   5: 150570.508 ops/s
# Warmup Iteration   6: 151173.197 ops/s
# Warmup Iteration   7: 150520.472 ops/s
# Warmup Iteration   8: 150879.227 ops/s
# Warmup Iteration   9: 151031.897 ops/s
# Warmup Iteration  10: 151838.069 ops/s
# Warmup Iteration  11: 152462.249 ops/s
# Warmup Iteration  12: 155348.070 ops/s
# Warmup Iteration  13: 159243.161 ops/s
# Warmup Iteration  14: 159748.776 ops/s
# Warmup Iteration  15: 158873.280 ops/s
# Warmup Iteration  16: 158758.027 ops/s
# Warmup Iteration  17: 161071.563 ops/s
# Warmup Iteration  18: 161005.709 ops/s
# Warmup Iteration  19: 160263.400 ops/s
# Warmup Iteration  20: 160070.795 ops/s
# Warmup Iteration  21: 160084.359 ops/s
# Warmup Iteration  22: 160887.406 ops/s
# Warmup Iteration  23: 159780.353 ops/s
# Warmup Iteration  24: 161197.171 ops/s
# Warmup Iteration  25: 161307.434 ops/s
# Warmup Iteration  26: 161085.745 ops/s
# Warmup Iteration  27: 160365.587 ops/s
# Warmup Iteration  28: 160336.261 ops/s
# Warmup Iteration  29: 160773.176 ops/s
# Warmup Iteration  30: 161387.299 ops/s
Iteration   1: 160744.962 ops/s
Iteration   2: 160324.745 ops/s
Iteration   3: 158539.217 ops/s
Iteration   4: 160992.910 ops/s
Iteration   5: 158910.620 ops/s
Iteration   6: 159049.833 ops/s
Iteration   7: 156802.661 ops/s
Iteration   8: 159732.368 ops/s
Iteration   9: 160102.975 ops/s
Iteration  10: 160112.173 ops/s
Iteration  11: 159738.368 ops/s
Iteration  12: 159760.048 ops/s
Iteration  13: 159974.996 ops/s
Iteration  14: 162110.424 ops/s
Iteration  15: 159073.356 ops/s
Iteration  16: 160382.089 ops/s
Iteration  17: 158746.567 ops/s
Iteration  18: 160734.054 ops/s
Iteration  19: 160247.440 ops/s
Iteration  20: 160213.821 ops/s
Iteration  21: 159204.201 ops/s
Iteration  22: 160980.859 ops/s
Iteration  23: 160045.718 ops/s
Iteration  24: 162478.310 ops/s
Iteration  25: 159188.632 ops/s
Iteration  26: 159957.083 ops/s
Iteration  27: 159174.992 ops/s
Iteration  28: 160256.945 ops/s
Iteration  29: 160218.343 ops/s
Iteration  30: 161077.730 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator":
  159962.548 ±(99.9%) 726.636 ops/s [Average]
  (min, avg, max) = (156802.661, 159962.548, 162478.310), stdev = 1087.595
  CI (99.9%): [159235.912, 160689.184] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  159962.548 ± 726.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22652943.898 ops/s
# Warmup Iteration   2: 45169971.851 ops/s
# Warmup Iteration   3: 38611711.627 ops/s
# Warmup Iteration   4: 45723950.097 ops/s
# Warmup Iteration   5: 45830105.836 ops/s
# Warmup Iteration   6: 45530190.009 ops/s
# Warmup Iteration   7: 45657986.332 ops/s
# Warmup Iteration   8: 45452331.500 ops/s
# Warmup Iteration   9: 45637669.164 ops/s
# Warmup Iteration  10: 45619662.738 ops/s
# Warmup Iteration  11: 45548495.529 ops/s
# Warmup Iteration  12: 45540830.955 ops/s
# Warmup Iteration  13: 45795887.399 ops/s
# Warmup Iteration  14: 45642400.072 ops/s
# Warmup Iteration  15: 45642087.214 ops/s
# Warmup Iteration  16: 45715851.612 ops/s
# Warmup Iteration  17: 45627011.349 ops/s
# Warmup Iteration  18: 45565209.531 ops/s
# Warmup Iteration  19: 45454910.540 ops/s
# Warmup Iteration  20: 45515689.654 ops/s
# Warmup Iteration  21: 45461647.638 ops/s
# Warmup Iteration  22: 45613916.659 ops/s
# Warmup Iteration  23: 45511459.771 ops/s
# Warmup Iteration  24: 45270946.323 ops/s
# Warmup Iteration  25: 45602456.136 ops/s
# Warmup Iteration  26: 45782456.263 ops/s
# Warmup Iteration  27: 45696974.064 ops/s
# Warmup Iteration  28: 45530224.300 ops/s
# Warmup Iteration  29: 45785848.053 ops/s
# Warmup Iteration  30: 45526373.701 ops/s
Iteration   1: 45396472.576 ops/s
Iteration   2: 45651945.326 ops/s
Iteration   3: 45393776.005 ops/s
Iteration   4: 45597403.540 ops/s
Iteration   5: 45661420.811 ops/s
Iteration   6: 45256854.849 ops/s
Iteration   7: 45405270.397 ops/s
Iteration   8: 45860671.378 ops/s
Iteration   9: 45509046.420 ops/s
Iteration  10: 45886513.977 ops/s
Iteration  11: 45615948.254 ops/s
Iteration  12: 45870684.687 ops/s
Iteration  13: 45725231.538 ops/s
Iteration  14: 45807828.938 ops/s
Iteration  15: 45320750.776 ops/s
Iteration  16: 45315111.911 ops/s
Iteration  17: 45531948.363 ops/s
Iteration  18: 45575055.406 ops/s
Iteration  19: 45477959.388 ops/s
Iteration  20: 45125374.376 ops/s
Iteration  21: 45156220.478 ops/s
Iteration  22: 45385911.407 ops/s
Iteration  23: 45008366.820 ops/s
Iteration  24: 45377649.372 ops/s
Iteration  25: 45273073.419 ops/s
Iteration  26: 45127953.715 ops/s
Iteration  27: 45291423.535 ops/s
Iteration  28: 45077623.652 ops/s
Iteration  29: 45322204.720 ops/s
Iteration  30: 45400668.139 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_min_without_comparator":
  45446878.806 ±(99.9%) 161520.525 ops/s [Average]
  (min, avg, max) = (45008366.820, 45446878.806, 45886513.977), stdev = 241756.336
  CI (99.9%): [45285358.281, 45608399.331] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_min_without_comparator  thrpt   30  45446878.806 ± 161520.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28434826.563 ops/s
# Warmup Iteration   2: 56449674.686 ops/s
# Warmup Iteration   3: 50766328.223 ops/s
# Warmup Iteration   4: 59237248.373 ops/s
# Warmup Iteration   5: 58894020.443 ops/s
# Warmup Iteration   6: 58604942.721 ops/s
# Warmup Iteration   7: 57936262.220 ops/s
# Warmup Iteration   8: 57626016.386 ops/s
# Warmup Iteration   9: 58118862.921 ops/s
# Warmup Iteration  10: 58836811.128 ops/s
# Warmup Iteration  11: 58328725.153 ops/s
# Warmup Iteration  12: 58364929.283 ops/s
# Warmup Iteration  13: 58883923.057 ops/s
# Warmup Iteration  14: 58891129.449 ops/s
# Warmup Iteration  15: 58332447.557 ops/s
# Warmup Iteration  16: 58789475.601 ops/s
# Warmup Iteration  17: 59210061.340 ops/s
# Warmup Iteration  18: 58912329.648 ops/s
# Warmup Iteration  19: 58565004.577 ops/s
# Warmup Iteration  20: 58864411.007 ops/s
# Warmup Iteration  21: 58824108.790 ops/s
# Warmup Iteration  22: 59116243.171 ops/s
# Warmup Iteration  23: 58288978.389 ops/s
# Warmup Iteration  24: 58613669.589 ops/s
# Warmup Iteration  25: 58811601.200 ops/s
# Warmup Iteration  26: 59090502.642 ops/s
# Warmup Iteration  27: 58479994.768 ops/s
# Warmup Iteration  28: 59177317.500 ops/s
# Warmup Iteration  29: 58989234.829 ops/s
# Warmup Iteration  30: 58953592.244 ops/s
Iteration   1: 58933200.236 ops/s
Iteration   2: 58877875.274 ops/s
Iteration   3: 59815636.672 ops/s
Iteration   4: 59715930.510 ops/s
Iteration   5: 59538841.213 ops/s
Iteration   6: 59099388.112 ops/s
Iteration   7: 59074193.455 ops/s
Iteration   8: 58769441.625 ops/s
Iteration   9: 59049976.299 ops/s
Iteration  10: 58895979.382 ops/s
Iteration  11: 58840109.510 ops/s
Iteration  12: 58607226.006 ops/s
Iteration  13: 59071592.692 ops/s
Iteration  14: 58911900.019 ops/s
Iteration  15: 59156959.095 ops/s
Iteration  16: 58863348.286 ops/s
Iteration  17: 58929386.423 ops/s
Iteration  18: 59179223.679 ops/s
Iteration  19: 59175139.970 ops/s
Iteration  20: 58662305.352 ops/s
Iteration  21: 58843082.821 ops/s
Iteration  22: 58463703.699 ops/s
Iteration  23: 58918351.677 ops/s
Iteration  24: 59267197.266 ops/s
Iteration  25: 58850659.227 ops/s
Iteration  26: 59094048.302 ops/s
Iteration  27: 59133155.073 ops/s
Iteration  28: 59168984.760 ops/s
Iteration  29: 59041421.589 ops/s
Iteration  30: 59198770.488 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newEmpty":
  59038234.290 ±(99.9%) 194286.550 ops/s [Average]
  (min, avg, max) = (58463703.699, 59038234.290, 59815636.672), stdev = 290798.984
  CI (99.9%): [58843947.740, 59232520.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_newEmpty  thrpt   30  59038234.290 ± 194286.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5439535.112 ops/s
# Warmup Iteration   2: 9219282.890 ops/s
# Warmup Iteration   3: 11023396.211 ops/s
# Warmup Iteration   4: 10945206.761 ops/s
# Warmup Iteration   5: 10856332.004 ops/s
# Warmup Iteration   6: 10998485.779 ops/s
# Warmup Iteration   7: 10978332.821 ops/s
# Warmup Iteration   8: 10865745.081 ops/s
# Warmup Iteration   9: 10917868.931 ops/s
# Warmup Iteration  10: 10875879.048 ops/s
# Warmup Iteration  11: 10718319.330 ops/s
# Warmup Iteration  12: 10959697.060 ops/s
# Warmup Iteration  13: 11030408.152 ops/s
# Warmup Iteration  14: 10963930.592 ops/s
# Warmup Iteration  15: 11049546.592 ops/s
# Warmup Iteration  16: 10982284.217 ops/s
# Warmup Iteration  17: 11008180.202 ops/s
# Warmup Iteration  18: 10995498.202 ops/s
# Warmup Iteration  19: 11025793.124 ops/s
# Warmup Iteration  20: 10998399.013 ops/s
# Warmup Iteration  21: 10900699.975 ops/s
# Warmup Iteration  22: 10879201.862 ops/s
# Warmup Iteration  23: 10861840.718 ops/s
# Warmup Iteration  24: 10965819.772 ops/s
# Warmup Iteration  25: 10923717.087 ops/s
# Warmup Iteration  26: 10809402.858 ops/s
# Warmup Iteration  27: 11013850.843 ops/s
# Warmup Iteration  28: 10997322.704 ops/s
# Warmup Iteration  29: 11008865.617 ops/s
# Warmup Iteration  30: 10954090.344 ops/s
Iteration   1: 10944851.317 ops/s
Iteration   2: 10961966.608 ops/s
Iteration   3: 10910809.729 ops/s
Iteration   4: 11013053.497 ops/s
Iteration   5: 10851538.938 ops/s
Iteration   6: 10922831.246 ops/s
Iteration   7: 10926028.756 ops/s
Iteration   8: 10979675.758 ops/s
Iteration   9: 11015169.534 ops/s
Iteration  10: 11068532.830 ops/s
Iteration  11: 10994083.376 ops/s
Iteration  12: 10959465.297 ops/s
Iteration  13: 11097194.023 ops/s
Iteration  14: 10953025.665 ops/s
Iteration  15: 11068259.213 ops/s
Iteration  16: 11046204.833 ops/s
Iteration  17: 10968667.441 ops/s
Iteration  18: 11015138.468 ops/s
Iteration  19: 10857930.439 ops/s
Iteration  20: 10953512.889 ops/s
Iteration  21: 10995111.634 ops/s
Iteration  22: 11005426.735 ops/s
Iteration  23: 10966374.533 ops/s
Iteration  24: 10885805.568 ops/s
Iteration  25: 11051380.909 ops/s
Iteration  26: 10929802.468 ops/s
Iteration  27: 10949271.641 ops/s
Iteration  28: 11033967.707 ops/s
Iteration  29: 10969312.428 ops/s
Iteration  30: 11024079.227 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWith":
  10977282.424 ±(99.9%) 40518.339 ops/s [Average]
  (min, avg, max) = (10851538.938, 10977282.424, 11097194.023), stdev = 60645.946
  CI (99.9%): [10936764.085, 11017800.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_newListWith  thrpt   30  10977282.424 ± 40518.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7958809.469 ops/s
# Warmup Iteration   2: 15906525.763 ops/s
# Warmup Iteration   3: 13799382.926 ops/s
# Warmup Iteration   4: 16413752.124 ops/s
# Warmup Iteration   5: 16295695.348 ops/s
# Warmup Iteration   6: 16291079.987 ops/s
# Warmup Iteration   7: 16367604.449 ops/s
# Warmup Iteration   8: 16292821.944 ops/s
# Warmup Iteration   9: 16386080.748 ops/s
# Warmup Iteration  10: 16404691.997 ops/s
# Warmup Iteration  11: 16368217.052 ops/s
# Warmup Iteration  12: 16298071.576 ops/s
# Warmup Iteration  13: 16327035.721 ops/s
# Warmup Iteration  14: 16255202.235 ops/s
# Warmup Iteration  15: 16418283.725 ops/s
# Warmup Iteration  16: 16489062.765 ops/s
# Warmup Iteration  17: 16316464.542 ops/s
# Warmup Iteration  18: 16287075.229 ops/s
# Warmup Iteration  19: 16317477.440 ops/s
# Warmup Iteration  20: 16398480.390 ops/s
# Warmup Iteration  21: 16147917.462 ops/s
# Warmup Iteration  22: 16306620.381 ops/s
# Warmup Iteration  23: 16271066.919 ops/s
# Warmup Iteration  24: 16256353.858 ops/s
# Warmup Iteration  25: 16207883.718 ops/s
# Warmup Iteration  26: 16223358.137 ops/s
# Warmup Iteration  27: 16278237.402 ops/s
# Warmup Iteration  28: 16423643.970 ops/s
# Warmup Iteration  29: 16005525.987 ops/s
# Warmup Iteration  30: 16218807.997 ops/s
Iteration   1: 16320855.073 ops/s
Iteration   2: 16365218.739 ops/s
Iteration   3: 16285819.771 ops/s
Iteration   4: 16260993.932 ops/s
Iteration   5: 16324746.714 ops/s
Iteration   6: 16464658.698 ops/s
Iteration   7: 16378420.211 ops/s
Iteration   8: 16348797.954 ops/s
Iteration   9: 16425594.035 ops/s
Iteration  10: 16329038.490 ops/s
Iteration  11: 16436658.971 ops/s
Iteration  12: 16330386.636 ops/s
Iteration  13: 16333482.112 ops/s
Iteration  14: 16479458.069 ops/s
Iteration  15: 16407589.779 ops/s
Iteration  16: 16337743.892 ops/s
Iteration  17: 16457043.680 ops/s
Iteration  18: 16354058.585 ops/s
Iteration  19: 16319863.620 ops/s
Iteration  20: 16408343.208 ops/s
Iteration  21: 16409977.116 ops/s
Iteration  22: 16221000.544 ops/s
Iteration  23: 16375898.464 ops/s
Iteration  24: 16366612.131 ops/s
Iteration  25: 16428864.887 ops/s
Iteration  26: 16505166.528 ops/s
Iteration  27: 16480263.965 ops/s
Iteration  28: 16345305.471 ops/s
Iteration  29: 16405263.905 ops/s
Iteration  30: 16291290.660 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithSize":
  16373280.528 ±(99.9%) 45881.286 ops/s [Average]
  (min, avg, max) = (16221000.544, 16373280.528, 16505166.528), stdev = 68672.955
  CI (99.9%): [16327399.242, 16419161.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_newListWithSize  thrpt   30  16373280.528 ± 45881.286  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3207022.831 ops/s
# Warmup Iteration   2: 6527409.625 ops/s
# Warmup Iteration   3: 5905735.605 ops/s
# Warmup Iteration   4: 6735914.370 ops/s
# Warmup Iteration   5: 6725647.774 ops/s
# Warmup Iteration   6: 6770581.127 ops/s
# Warmup Iteration   7: 6686941.110 ops/s
# Warmup Iteration   8: 6762369.024 ops/s
# Warmup Iteration   9: 6796819.581 ops/s
# Warmup Iteration  10: 6730709.098 ops/s
# Warmup Iteration  11: 6767061.341 ops/s
# Warmup Iteration  12: 6791099.348 ops/s
# Warmup Iteration  13: 6798380.291 ops/s
# Warmup Iteration  14: 6787720.580 ops/s
# Warmup Iteration  15: 6772996.578 ops/s
# Warmup Iteration  16: 6805235.757 ops/s
# Warmup Iteration  17: 6804377.454 ops/s
# Warmup Iteration  18: 6789510.391 ops/s
# Warmup Iteration  19: 6817556.910 ops/s
# Warmup Iteration  20: 6729111.147 ops/s
# Warmup Iteration  21: 6758242.510 ops/s
# Warmup Iteration  22: 6787696.518 ops/s
# Warmup Iteration  23: 6783642.062 ops/s
# Warmup Iteration  24: 6763052.826 ops/s
# Warmup Iteration  25: 6819771.665 ops/s
# Warmup Iteration  26: 6795190.559 ops/s
# Warmup Iteration  27: 6784703.738 ops/s
# Warmup Iteration  28: 6806088.106 ops/s
# Warmup Iteration  29: 6742019.486 ops/s
# Warmup Iteration  30: 6800803.516 ops/s
Iteration   1: 6838321.199 ops/s
Iteration   2: 6839186.455 ops/s
Iteration   3: 6785949.139 ops/s
Iteration   4: 6818986.072 ops/s
Iteration   5: 6833860.752 ops/s
Iteration   6: 6825241.943 ops/s
Iteration   7: 6811646.960 ops/s
Iteration   8: 6845437.371 ops/s
Iteration   9: 6825657.628 ops/s
Iteration  10: 6762281.913 ops/s
Iteration  11: 6840357.207 ops/s
Iteration  12: 6820289.497 ops/s
Iteration  13: 6764190.561 ops/s
Iteration  14: 6857163.312 ops/s
Iteration  15: 6847834.302 ops/s
Iteration  16: 6787604.120 ops/s
Iteration  17: 6782161.843 ops/s
Iteration  18: 6801162.969 ops/s
Iteration  19: 6700678.375 ops/s
Iteration  20: 6759470.725 ops/s
Iteration  21: 6796902.476 ops/s
Iteration  22: 6786915.039 ops/s
Iteration  23: 6836390.649 ops/s
Iteration  24: 6871222.160 ops/s
Iteration  25: 6823153.553 ops/s
Iteration  26: 6789909.852 ops/s
Iteration  27: 6781229.470 ops/s
Iteration  28: 6784354.470 ops/s
Iteration  29: 6864669.723 ops/s
Iteration  30: 6804728.774 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithVarArgs":
  6809565.284 ±(99.9%) 24738.019 ops/s [Average]
  (min, avg, max) = (6700678.375, 6809565.284, 6871222.160), stdev = 37026.706
  CI (99.9%): [6784827.264, 6834303.303] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_newListWithVarArgs  thrpt   30  6809565.284 ± 24738.019  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4222507.432 ops/s
# Warmup Iteration   2: 7233464.215 ops/s
# Warmup Iteration   3: 8508896.427 ops/s
# Warmup Iteration   4: 8439842.439 ops/s
# Warmup Iteration   5: 8445277.527 ops/s
# Warmup Iteration   6: 8431435.319 ops/s
# Warmup Iteration   7: 8413098.185 ops/s
# Warmup Iteration   8: 8425902.793 ops/s
# Warmup Iteration   9: 8459005.037 ops/s
# Warmup Iteration  10: 8417865.535 ops/s
# Warmup Iteration  11: 8488557.511 ops/s
# Warmup Iteration  12: 8481919.363 ops/s
# Warmup Iteration  13: 8487239.190 ops/s
# Warmup Iteration  14: 8499686.557 ops/s
# Warmup Iteration  15: 8490544.807 ops/s
# Warmup Iteration  16: 8482436.357 ops/s
# Warmup Iteration  17: 8495828.881 ops/s
# Warmup Iteration  18: 8542636.049 ops/s
# Warmup Iteration  19: 8532550.709 ops/s
# Warmup Iteration  20: 8540214.919 ops/s
# Warmup Iteration  21: 8525207.906 ops/s
# Warmup Iteration  22: 8512784.597 ops/s
# Warmup Iteration  23: 8558215.803 ops/s
# Warmup Iteration  24: 8498209.385 ops/s
# Warmup Iteration  25: 8494288.457 ops/s
# Warmup Iteration  26: 8542307.018 ops/s
# Warmup Iteration  27: 8570048.979 ops/s
# Warmup Iteration  28: 8490390.365 ops/s
# Warmup Iteration  29: 8545017.694 ops/s
# Warmup Iteration  30: 8520056.805 ops/s
Iteration   1: 8482891.339 ops/s
Iteration   2: 8505538.109 ops/s
Iteration   3: 8500078.970 ops/s
Iteration   4: 8508636.911 ops/s
Iteration   5: 8530715.560 ops/s
Iteration   6: 8544856.463 ops/s
Iteration   7: 8588667.926 ops/s
Iteration   8: 8494315.055 ops/s
Iteration   9: 8410135.732 ops/s
Iteration  10: 8519905.065 ops/s
Iteration  11: 8484509.898 ops/s
Iteration  12: 8572692.841 ops/s
Iteration  13: 8504642.970 ops/s
Iteration  14: 8527285.099 ops/s
Iteration  15: 8492917.113 ops/s
Iteration  16: 8530465.652 ops/s
Iteration  17: 8558582.853 ops/s
Iteration  18: 8526056.154 ops/s
Iteration  19: 8443575.717 ops/s
Iteration  20: 8500791.580 ops/s
Iteration  21: 8531900.431 ops/s
Iteration  22: 8523883.047 ops/s
Iteration  23: 8533927.474 ops/s
Iteration  24: 8567884.077 ops/s
Iteration  25: 8482219.305 ops/s
Iteration  26: 8488166.819 ops/s
Iteration  27: 8524105.904 ops/s
Iteration  28: 8396409.478 ops/s
Iteration  29: 8349808.959 ops/s
Iteration  30: 8373710.960 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWith":
  8499975.915 ±(99.9%) 37611.536 ops/s [Average]
  (min, avg, max) = (8349808.959, 8499975.915, 8588667.926), stdev = 56295.181
  CI (99.9%): [8462364.379, 8537587.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_newListWithWith  thrpt   30  8499975.915 ± 37611.536  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4015395.030 ops/s
# Warmup Iteration   2: 6808380.244 ops/s
# Warmup Iteration   3: 8106522.688 ops/s
# Warmup Iteration   4: 8147789.463 ops/s
# Warmup Iteration   5: 8072366.448 ops/s
# Warmup Iteration   6: 8123329.688 ops/s
# Warmup Iteration   7: 8110517.720 ops/s
# Warmup Iteration   8: 8106789.727 ops/s
# Warmup Iteration   9: 8144466.302 ops/s
# Warmup Iteration  10: 8079100.786 ops/s
# Warmup Iteration  11: 8142171.216 ops/s
# Warmup Iteration  12: 8117478.346 ops/s
# Warmup Iteration  13: 8203248.936 ops/s
# Warmup Iteration  14: 8162451.886 ops/s
# Warmup Iteration  15: 8173536.563 ops/s
# Warmup Iteration  16: 8108133.891 ops/s
# Warmup Iteration  17: 8136873.171 ops/s
# Warmup Iteration  18: 8128993.890 ops/s
# Warmup Iteration  19: 8053747.233 ops/s
# Warmup Iteration  20: 8095479.121 ops/s
# Warmup Iteration  21: 8083759.939 ops/s
# Warmup Iteration  22: 8092415.576 ops/s
# Warmup Iteration  23: 8136580.978 ops/s
# Warmup Iteration  24: 8142442.829 ops/s
# Warmup Iteration  25: 8115672.932 ops/s
# Warmup Iteration  26: 8091278.110 ops/s
# Warmup Iteration  27: 8100719.308 ops/s
# Warmup Iteration  28: 8100188.821 ops/s
# Warmup Iteration  29: 8099407.348 ops/s
# Warmup Iteration  30: 8138935.490 ops/s
Iteration   1: 8117169.129 ops/s
Iteration   2: 8099296.045 ops/s
Iteration   3: 8006348.196 ops/s
Iteration   4: 7969024.875 ops/s
Iteration   5: 8038883.443 ops/s
Iteration   6: 8084897.005 ops/s
Iteration   7: 8057022.579 ops/s
Iteration   8: 8037944.943 ops/s
Iteration   9: 8034047.541 ops/s
Iteration  10: 7998730.018 ops/s
Iteration  11: 8041131.798 ops/s
Iteration  12: 8056561.078 ops/s
Iteration  13: 8017085.717 ops/s
Iteration  14: 8082106.813 ops/s
Iteration  15: 8122768.341 ops/s
Iteration  16: 8079959.192 ops/s
Iteration  17: 8115173.432 ops/s
Iteration  18: 8174184.561 ops/s
Iteration  19: 8142410.793 ops/s
Iteration  20: 8149859.697 ops/s
Iteration  21: 8077345.025 ops/s
Iteration  22: 8130758.899 ops/s
Iteration  23: 8083429.678 ops/s
Iteration  24: 8079090.745 ops/s
Iteration  25: 8158387.903 ops/s
Iteration  26: 8061578.351 ops/s
Iteration  27: 8060516.173 ops/s
Iteration  28: 8089544.848 ops/s
Iteration  29: 8112103.385 ops/s
Iteration  30: 8213340.361 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_newListWithWithWith":
  8083023.352 ±(99.9%) 36603.244 ops/s [Average]
  (min, avg, max) = (7969024.875, 8083023.352, 8213340.361), stdev = 54786.016
  CI (99.9%): [8046420.108, 8119626.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_newListWithWithWith  thrpt   30  8083023.352 ± 36603.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5510839.953 ops/s
# Warmup Iteration   2: 11610261.118 ops/s
# Warmup Iteration   3: 9959037.603 ops/s
# Warmup Iteration   4: 11734811.891 ops/s
# Warmup Iteration   5: 11895668.617 ops/s
# Warmup Iteration   6: 11834268.756 ops/s
# Warmup Iteration   7: 11874477.955 ops/s
# Warmup Iteration   8: 11766995.519 ops/s
# Warmup Iteration   9: 11847484.720 ops/s
# Warmup Iteration  10: 11722145.545 ops/s
# Warmup Iteration  11: 11759962.263 ops/s
# Warmup Iteration  12: 11748881.465 ops/s
# Warmup Iteration  13: 11825128.885 ops/s
# Warmup Iteration  14: 11866046.719 ops/s
# Warmup Iteration  15: 11883856.554 ops/s
# Warmup Iteration  16: 11854444.245 ops/s
# Warmup Iteration  17: 11768691.756 ops/s
# Warmup Iteration  18: 11842668.530 ops/s
# Warmup Iteration  19: 11843833.683 ops/s
# Warmup Iteration  20: 11858404.815 ops/s
# Warmup Iteration  21: 11818132.760 ops/s
# Warmup Iteration  22: 11904825.720 ops/s
# Warmup Iteration  23: 11846980.991 ops/s
# Warmup Iteration  24: 11735411.976 ops/s
# Warmup Iteration  25: 11781451.167 ops/s
# Warmup Iteration  26: 11817091.989 ops/s
# Warmup Iteration  27: 11755234.237 ops/s
# Warmup Iteration  28: 11832903.905 ops/s
# Warmup Iteration  29: 11822424.055 ops/s
# Warmup Iteration  30: 11915544.484 ops/s
Iteration   1: 11848067.671 ops/s
Iteration   2: 11818011.660 ops/s
Iteration   3: 11890243.352 ops/s
Iteration   4: 11904590.329 ops/s
Iteration   5: 11795246.852 ops/s
Iteration   6: 11734624.990 ops/s
Iteration   7: 11672293.052 ops/s
Iteration   8: 11879403.042 ops/s
Iteration   9: 11946249.041 ops/s
Iteration  10: 11773774.254 ops/s
Iteration  11: 11808388.893 ops/s
Iteration  12: 11819207.679 ops/s
Iteration  13: 11804290.010 ops/s
Iteration  14: 11880735.933 ops/s
Iteration  15: 11851047.059 ops/s
Iteration  16: 11868664.943 ops/s
Iteration  17: 11755516.993 ops/s
Iteration  18: 11870763.118 ops/s
Iteration  19: 11832474.957 ops/s
Iteration  20: 11872450.349 ops/s
Iteration  21: 11854900.325 ops/s
Iteration  22: 11925682.678 ops/s
Iteration  23: 11830964.553 ops/s
Iteration  24: 11789731.456 ops/s
Iteration  25: 11801206.036 ops/s
Iteration  26: 11838895.189 ops/s
Iteration  27: 11784423.977 ops/s
Iteration  28: 11832493.059 ops/s
Iteration  29: 11854275.187 ops/s
Iteration  30: 11817843.441 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfy":
  11831882.003 ±(99.9%) 37986.897 ops/s [Average]
  (min, avg, max) = (11672293.052, 11831882.003, 11946249.041), stdev = 56857.004
  CI (99.9%): [11793895.105, 11869868.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_noneSatisfy  thrpt   30  11831882.003 ± 37986.897  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10346979.230 ops/s
# Warmup Iteration   2: 20635449.967 ops/s
# Warmup Iteration   3: 18252144.696 ops/s
# Warmup Iteration   4: 21295796.787 ops/s
# Warmup Iteration   5: 21393626.476 ops/s
# Warmup Iteration   6: 21519507.951 ops/s
# Warmup Iteration   7: 21454810.524 ops/s
# Warmup Iteration   8: 21270299.539 ops/s
# Warmup Iteration   9: 21400438.234 ops/s
# Warmup Iteration  10: 21310385.055 ops/s
# Warmup Iteration  11: 21241691.105 ops/s
# Warmup Iteration  12: 21323931.427 ops/s
# Warmup Iteration  13: 21372572.256 ops/s
# Warmup Iteration  14: 21216261.368 ops/s
# Warmup Iteration  15: 21467368.608 ops/s
# Warmup Iteration  16: 21490878.016 ops/s
# Warmup Iteration  17: 21298671.793 ops/s
# Warmup Iteration  18: 21074846.549 ops/s
# Warmup Iteration  19: 21321546.367 ops/s
# Warmup Iteration  20: 21369096.972 ops/s
# Warmup Iteration  21: 21444888.407 ops/s
# Warmup Iteration  22: 21496731.608 ops/s
# Warmup Iteration  23: 21493065.710 ops/s
# Warmup Iteration  24: 21637438.337 ops/s
# Warmup Iteration  25: 21573884.126 ops/s
# Warmup Iteration  26: 21483887.315 ops/s
# Warmup Iteration  27: 21487518.781 ops/s
# Warmup Iteration  28: 21584485.789 ops/s
# Warmup Iteration  29: 21578672.411 ops/s
# Warmup Iteration  30: 21529352.851 ops/s
Iteration   1: 21429521.803 ops/s
Iteration   2: 21569913.917 ops/s
Iteration   3: 21442910.422 ops/s
Iteration   4: 21550530.030 ops/s
Iteration   5: 21621322.814 ops/s
Iteration   6: 21663557.896 ops/s
Iteration   7: 21507915.562 ops/s
Iteration   8: 21720522.427 ops/s
Iteration   9: 21726374.363 ops/s
Iteration  10: 21485600.818 ops/s
Iteration  11: 21392815.236 ops/s
Iteration  12: 21364766.414 ops/s
Iteration  13: 21179129.756 ops/s
Iteration  14: 21490820.287 ops/s
Iteration  15: 21366360.393 ops/s
Iteration  16: 21557935.432 ops/s
Iteration  17: 21567608.321 ops/s
Iteration  18: 21434349.579 ops/s
Iteration  19: 21358345.219 ops/s
Iteration  20: 21499876.321 ops/s
Iteration  21: 21572186.494 ops/s
Iteration  22: 21302786.010 ops/s
Iteration  23: 21279203.027 ops/s
Iteration  24: 21335235.937 ops/s
Iteration  25: 21522011.269 ops/s
Iteration  26: 21520070.221 ops/s
Iteration  27: 21383507.721 ops/s
Iteration  28: 21363587.587 ops/s
Iteration  29: 21406543.111 ops/s
Iteration  30: 21519644.845 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_noneSatisfyWith":
  21471165.108 ±(99.9%) 85731.888 ops/s [Average]
  (min, avg, max) = (21179129.756, 21471165.108, 21726374.363), stdev = 128319.463
  CI (99.9%): [21385433.220, 21556896.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  21471165.108 ± 85731.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6819038.584 ops/s
# Warmup Iteration   2: 11323587.300 ops/s
# Warmup Iteration   3: 13461762.057 ops/s
# Warmup Iteration   4: 13491098.077 ops/s
# Warmup Iteration   5: 13454432.262 ops/s
# Warmup Iteration   6: 13488409.496 ops/s
# Warmup Iteration   7: 13449638.910 ops/s
# Warmup Iteration   8: 13461694.754 ops/s
# Warmup Iteration   9: 13495317.619 ops/s
# Warmup Iteration  10: 13505622.580 ops/s
# Warmup Iteration  11: 13522213.108 ops/s
# Warmup Iteration  12: 13428775.375 ops/s
# Warmup Iteration  13: 13530651.204 ops/s
# Warmup Iteration  14: 13489501.729 ops/s
# Warmup Iteration  15: 13416254.067 ops/s
# Warmup Iteration  16: 13426875.288 ops/s
# Warmup Iteration  17: 13421223.861 ops/s
# Warmup Iteration  18: 13382355.806 ops/s
# Warmup Iteration  19: 13471340.255 ops/s
# Warmup Iteration  20: 13369855.496 ops/s
# Warmup Iteration  21: 13370293.543 ops/s
# Warmup Iteration  22: 13334402.269 ops/s
# Warmup Iteration  23: 13360439.928 ops/s
# Warmup Iteration  24: 13445412.899 ops/s
# Warmup Iteration  25: 13413426.426 ops/s
# Warmup Iteration  26: 13438793.164 ops/s
# Warmup Iteration  27: 13231653.569 ops/s
# Warmup Iteration  28: 13441469.275 ops/s
# Warmup Iteration  29: 13273492.755 ops/s
# Warmup Iteration  30: 13328790.762 ops/s
Iteration   1: 13358516.861 ops/s
Iteration   2: 13243369.887 ops/s
Iteration   3: 13247796.259 ops/s
Iteration   4: 13130677.107 ops/s
Iteration   5: 13461668.641 ops/s
Iteration   6: 13508309.924 ops/s
Iteration   7: 13298059.010 ops/s
Iteration   8: 13356893.665 ops/s
Iteration   9: 13204176.395 ops/s
Iteration  10: 13293352.019 ops/s
Iteration  11: 13356172.868 ops/s
Iteration  12: 13366080.503 ops/s
Iteration  13: 13442013.018 ops/s
Iteration  14: 13272091.522 ops/s
Iteration  15: 13340534.583 ops/s
Iteration  16: 13273922.036 ops/s
Iteration  17: 13351022.646 ops/s
Iteration  18: 13324527.226 ops/s
Iteration  19: 13380261.895 ops/s
Iteration  20: 13394960.726 ops/s
Iteration  21: 13323320.948 ops/s
Iteration  22: 13375762.976 ops/s
Iteration  23: 13463781.780 ops/s
Iteration  24: 13408805.127 ops/s
Iteration  25: 13371004.606 ops/s
Iteration  26: 13403000.876 ops/s
Iteration  27: 13471920.300 ops/s
Iteration  28: 13563113.487 ops/s
Iteration  29: 13465191.943 ops/s
Iteration  30: 13541289.733 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_notEmpty":
  13366386.619 ±(99.9%) 65901.559 ops/s [Average]
  (min, avg, max) = (13130677.107, 13366386.619, 13563113.487), stdev = 98638.359
  CI (99.9%): [13300485.060, 13432288.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_notEmpty  thrpt   30  13366386.619 ± 65901.559  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3163235.898 ops/s
# Warmup Iteration   2: 6775143.848 ops/s
# Warmup Iteration   3: 5761707.216 ops/s
# Warmup Iteration   4: 6870069.964 ops/s
# Warmup Iteration   5: 6835423.282 ops/s
# Warmup Iteration   6: 6834074.593 ops/s
# Warmup Iteration   7: 6817168.364 ops/s
# Warmup Iteration   8: 6823002.774 ops/s
# Warmup Iteration   9: 6839353.306 ops/s
# Warmup Iteration  10: 6826707.146 ops/s
# Warmup Iteration  11: 6861412.709 ops/s
# Warmup Iteration  12: 6847462.609 ops/s
# Warmup Iteration  13: 6884632.008 ops/s
# Warmup Iteration  14: 6848253.198 ops/s
# Warmup Iteration  15: 6806794.139 ops/s
# Warmup Iteration  16: 6831762.518 ops/s
# Warmup Iteration  17: 6711058.566 ops/s
# Warmup Iteration  18: 6757525.706 ops/s
# Warmup Iteration  19: 6747485.242 ops/s
# Warmup Iteration  20: 6797997.487 ops/s
# Warmup Iteration  21: 6772527.135 ops/s
# Warmup Iteration  22: 6789011.222 ops/s
# Warmup Iteration  23: 6789146.805 ops/s
# Warmup Iteration  24: 6795377.617 ops/s
# Warmup Iteration  25: 6792233.645 ops/s
# Warmup Iteration  26: 6771147.789 ops/s
# Warmup Iteration  27: 6752345.017 ops/s
# Warmup Iteration  28: 6749773.463 ops/s
# Warmup Iteration  29: 6788058.845 ops/s
# Warmup Iteration  30: 6741296.180 ops/s
Iteration   1: 6765678.353 ops/s
Iteration   2: 6749768.935 ops/s
Iteration   3: 6775568.794 ops/s
Iteration   4: 6771410.864 ops/s
Iteration   5: 6728126.127 ops/s
Iteration   6: 6793463.218 ops/s
Iteration   7: 6757922.486 ops/s
Iteration   8: 6810655.619 ops/s
Iteration   9: 6749214.631 ops/s
Iteration  10: 6765190.558 ops/s
Iteration  11: 6828886.879 ops/s
Iteration  12: 6754312.486 ops/s
Iteration  13: 6758089.022 ops/s
Iteration  14: 6776154.679 ops/s
Iteration  15: 6746438.178 ops/s
Iteration  16: 6750782.968 ops/s
Iteration  17: 6747784.242 ops/s
Iteration  18: 6737823.150 ops/s
Iteration  19: 6773381.808 ops/s
Iteration  20: 6770399.512 ops/s
Iteration  21: 6767173.008 ops/s
Iteration  22: 6714693.636 ops/s
Iteration  23: 6784501.389 ops/s
Iteration  24: 6744084.998 ops/s
Iteration  25: 6767952.089 ops/s
Iteration  26: 6758091.775 ops/s
Iteration  27: 6775360.388 ops/s
Iteration  28: 6789607.138 ops/s
Iteration  29: 6753613.064 ops/s
Iteration  30: 6712404.505 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partition":
  6762617.817 ±(99.9%) 16569.121 ops/s [Average]
  (min, avg, max) = (6712404.505, 6762617.817, 6828886.879), stdev = 24799.882
  CI (99.9%): [6746048.696, 6779186.938] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_partition  thrpt   30  6762617.817 ± 16569.121  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWhile$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWhile

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1546927.363 ops/s
# Warmup Iteration   2: 3843261.840 ops/s
# Warmup Iteration   3: 3239639.187 ops/s
# Warmup Iteration   4: 3848656.240 ops/s
# Warmup Iteration   5: 3841873.172 ops/s
# Warmup Iteration   6: 3847838.606 ops/s
# Warmup Iteration   7: 3834113.641 ops/s
# Warmup Iteration   8: 3825772.976 ops/s
# Warmup Iteration   9: 3800869.246 ops/s
# Warmup Iteration  10: 3817621.543 ops/s
# Warmup Iteration  11: 3858069.095 ops/s
# Warmup Iteration  12: 3814071.040 ops/s
# Warmup Iteration  13: 3815156.537 ops/s
# Warmup Iteration  14: 3855066.181 ops/s
# Warmup Iteration  15: 3845257.960 ops/s
# Warmup Iteration  16: 3815120.513 ops/s
# Warmup Iteration  17: 3824075.755 ops/s
# Warmup Iteration  18: 3821546.591 ops/s
# Warmup Iteration  19: 3822902.660 ops/s
# Warmup Iteration  20: 3818292.466 ops/s
# Warmup Iteration  21: 3804733.666 ops/s
# Warmup Iteration  22: 3779227.644 ops/s
# Warmup Iteration  23: 3794298.645 ops/s
# Warmup Iteration  24: 3785430.522 ops/s
# Warmup Iteration  25: 3778791.659 ops/s
# Warmup Iteration  26: 3821835.782 ops/s
# Warmup Iteration  27: 3832238.134 ops/s
# Warmup Iteration  28: 3828667.938 ops/s
# Warmup Iteration  29: 3825200.931 ops/s
# Warmup Iteration  30: 3830189.522 ops/s
Iteration   1: 3818009.060 ops/s
Iteration   2: 3796901.028 ops/s
Iteration   3: 3824984.881 ops/s
Iteration   4: 3808239.628 ops/s
Iteration   5: 3836504.208 ops/s
Iteration   6: 3830675.308 ops/s
Iteration   7: 3821874.164 ops/s
Iteration   8: 3827980.158 ops/s
Iteration   9: 3794553.597 ops/s
Iteration  10: 3801388.898 ops/s
Iteration  11: 3783558.770 ops/s
Iteration  12: 3790710.148 ops/s
Iteration  13: 3806449.425 ops/s
Iteration  14: 3806148.382 ops/s
Iteration  15: 3796070.690 ops/s
Iteration  16: 3793255.195 ops/s
Iteration  17: 3787571.071 ops/s
Iteration  18: 3792846.872 ops/s
Iteration  19: 3805972.697 ops/s
Iteration  20: 3786770.046 ops/s
Iteration  21: 3817874.185 ops/s
Iteration  22: 3795125.262 ops/s
Iteration  23: 3823660.328 ops/s
Iteration  24: 3816361.513 ops/s
Iteration  25: 3816843.163 ops/s
Iteration  26: 3802716.679 ops/s
Iteration  27: 3799030.653 ops/s
Iteration  28: 3806209.576 ops/s
Iteration  29: 3799515.846 ops/s
Iteration  30: 3841454.468 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWhile":
  3807641.863 ±(99.9%) 10360.727 ops/s [Average]
  (min, avg, max) = (3783558.770, 3807641.863, 3841454.468), stdev = 15507.450
  CI (99.9%): [3797281.136, 3818002.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_partitionWhile  thrpt   30  3807641.863 ± 10360.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1797065.277 ops/s
# Warmup Iteration   2: 3954170.366 ops/s
# Warmup Iteration   3: 4002094.793 ops/s
# Warmup Iteration   4: 3305594.989 ops/s
# Warmup Iteration   5: 3973461.895 ops/s
# Warmup Iteration   6: 3972871.190 ops/s
# Warmup Iteration   7: 3949375.421 ops/s
# Warmup Iteration   8: 3965352.114 ops/s
# Warmup Iteration   9: 3964721.687 ops/s
# Warmup Iteration  10: 3972202.968 ops/s
# Warmup Iteration  11: 3998417.567 ops/s
# Warmup Iteration  12: 3992595.714 ops/s
# Warmup Iteration  13: 3976873.526 ops/s
# Warmup Iteration  14: 3961255.231 ops/s
# Warmup Iteration  15: 3965224.085 ops/s
# Warmup Iteration  16: 3972268.436 ops/s
# Warmup Iteration  17: 3993031.768 ops/s
# Warmup Iteration  18: 4011833.139 ops/s
# Warmup Iteration  19: 4020666.847 ops/s
# Warmup Iteration  20: 4022238.929 ops/s
# Warmup Iteration  21: 4013256.364 ops/s
# Warmup Iteration  22: 4031112.207 ops/s
# Warmup Iteration  23: 4005299.914 ops/s
# Warmup Iteration  24: 4006847.573 ops/s
# Warmup Iteration  25: 4001007.594 ops/s
# Warmup Iteration  26: 4023521.654 ops/s
# Warmup Iteration  27: 4035143.756 ops/s
# Warmup Iteration  28: 4045074.116 ops/s
# Warmup Iteration  29: 4046887.864 ops/s
# Warmup Iteration  30: 4042712.186 ops/s
Iteration   1: 4033639.175 ops/s
Iteration   2: 4015352.435 ops/s
Iteration   3: 4042922.841 ops/s
Iteration   4: 4024981.407 ops/s
Iteration   5: 4022460.586 ops/s
Iteration   6: 4036345.281 ops/s
Iteration   7: 4034582.376 ops/s
Iteration   8: 4032868.320 ops/s
Iteration   9: 4042145.860 ops/s
Iteration  10: 3992022.787 ops/s
Iteration  11: 4025160.720 ops/s
Iteration  12: 4042566.392 ops/s
Iteration  13: 4048631.914 ops/s
Iteration  14: 4029559.850 ops/s
Iteration  15: 4035773.323 ops/s
Iteration  16: 4051204.226 ops/s
Iteration  17: 4012231.479 ops/s
Iteration  18: 4037134.398 ops/s
Iteration  19: 4023004.375 ops/s
Iteration  20: 4053636.656 ops/s
Iteration  21: 4027319.937 ops/s
Iteration  22: 4044755.750 ops/s
Iteration  23: 4053273.599 ops/s
Iteration  24: 4054872.291 ops/s
Iteration  25: 4047944.649 ops/s
Iteration  26: 4042328.578 ops/s
Iteration  27: 4041090.097 ops/s
Iteration  28: 4003816.596 ops/s
Iteration  29: 4009753.429 ops/s
Iteration  30: 3996047.546 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_partitionWith":
  4031914.229 ±(99.9%) 11263.690 ops/s [Average]
  (min, avg, max) = (3992022.787, 4031914.229, 4054872.291), stdev = 16858.962
  CI (99.9%): [4020650.539, 4043177.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_partitionWith  thrpt   30  4031914.229 ± 11263.690  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_randomAccess_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_randomAccess_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756136.831 ops/s
# Warmup Iteration   2: 777574.340 ops/s
# Warmup Iteration   3: 931743.777 ops/s
# Warmup Iteration   4: 988704.477 ops/s
# Warmup Iteration   5: 985593.593 ops/s
# Warmup Iteration   6: 987918.008 ops/s
# Warmup Iteration   7: 990549.346 ops/s
# Warmup Iteration   8: 991177.468 ops/s
# Warmup Iteration   9: 990156.092 ops/s
# Warmup Iteration  10: 983039.794 ops/s
# Warmup Iteration  11: 993469.365 ops/s
# Warmup Iteration  12: 988767.432 ops/s
# Warmup Iteration  13: 960819.298 ops/s
# Warmup Iteration  14: 866967.095 ops/s
# Warmup Iteration  15: 988400.209 ops/s
# Warmup Iteration  16: 992888.838 ops/s
# Warmup Iteration  17: 1050536.466 ops/s
# Warmup Iteration  18: 1046232.557 ops/s
# Warmup Iteration  19: 1045944.438 ops/s
# Warmup Iteration  20: 1045152.614 ops/s
# Warmup Iteration  21: 1044085.392 ops/s
# Warmup Iteration  22: 1047160.687 ops/s
# Warmup Iteration  23: 1045683.123 ops/s
# Warmup Iteration  24: 1046278.435 ops/s
# Warmup Iteration  25: 1050800.217 ops/s
# Warmup Iteration  26: 1053327.595 ops/s
# Warmup Iteration  27: 1044589.164 ops/s
# Warmup Iteration  28: 1043900.253 ops/s
# Warmup Iteration  29: 1038279.202 ops/s
# Warmup Iteration  30: 1047001.923 ops/s
Iteration   1: 1049946.186 ops/s
Iteration   2: 1040683.867 ops/s
Iteration   3: 1048100.070 ops/s
Iteration   4: 1044576.138 ops/s
Iteration   5: 1055631.418 ops/s
Iteration   6: 1046297.169 ops/s
Iteration   7: 1045619.422 ops/s
Iteration   8: 1045730.144 ops/s
Iteration   9: 1050961.699 ops/s
Iteration  10: 1045924.765 ops/s
Iteration  11: 1040593.189 ops/s
Iteration  12: 1054107.787 ops/s
Iteration  13: 1051302.022 ops/s
Iteration  14: 1050176.930 ops/s
Iteration  15: 1045435.102 ops/s
Iteration  16: 1052678.463 ops/s
Iteration  17: 1045786.067 ops/s
Iteration  18: 1047307.714 ops/s
Iteration  19: 1048715.106 ops/s
Iteration  20: 1048923.636 ops/s
Iteration  21: 1048568.800 ops/s
Iteration  22: 1046746.867 ops/s
Iteration  23: 1051487.974 ops/s
Iteration  24: 1045486.451 ops/s
Iteration  25: 1046132.069 ops/s
Iteration  26: 1047458.834 ops/s
Iteration  27: 1041662.077 ops/s
Iteration  28: 1048960.858 ops/s
Iteration  29: 1045902.928 ops/s
Iteration  30: 1035434.793 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_randomAccess_throws":
  1047211.285 ±(99.9%) 2790.713 ops/s [Average]
  (min, avg, max) = (1035434.793, 1047211.285, 1055631.418), stdev = 4177.009
  CI (99.9%): [1044420.571, 1050001.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_randomAccess_throws  thrpt   30  1047211.285 ± 2790.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2206492.623 ops/s
# Warmup Iteration   2: 4116282.754 ops/s
# Warmup Iteration   3: 4700944.971 ops/s
# Warmup Iteration   4: 4754362.109 ops/s
# Warmup Iteration   5: 4073957.651 ops/s
# Warmup Iteration   6: 4381033.136 ops/s
# Warmup Iteration   7: 4767755.639 ops/s
# Warmup Iteration   8: 4763092.285 ops/s
# Warmup Iteration   9: 4751722.049 ops/s
# Warmup Iteration  10: 4762967.593 ops/s
# Warmup Iteration  11: 4741448.058 ops/s
# Warmup Iteration  12: 4753061.122 ops/s
# Warmup Iteration  13: 4744005.678 ops/s
# Warmup Iteration  14: 4742984.846 ops/s
# Warmup Iteration  15: 4707869.892 ops/s
# Warmup Iteration  16: 4752728.455 ops/s
# Warmup Iteration  17: 4741225.174 ops/s
# Warmup Iteration  18: 4743717.540 ops/s
# Warmup Iteration  19: 4752584.832 ops/s
# Warmup Iteration  20: 4762491.843 ops/s
# Warmup Iteration  21: 4747570.705 ops/s
# Warmup Iteration  22: 4743511.674 ops/s
# Warmup Iteration  23: 4738930.794 ops/s
# Warmup Iteration  24: 4751638.934 ops/s
# Warmup Iteration  25: 4778244.373 ops/s
# Warmup Iteration  26: 4774855.769 ops/s
# Warmup Iteration  27: 4775840.502 ops/s
# Warmup Iteration  28: 4780226.479 ops/s
# Warmup Iteration  29: 4762149.354 ops/s
# Warmup Iteration  30: 4774070.107 ops/s
Iteration   1: 4753263.421 ops/s
Iteration   2: 4756671.088 ops/s
Iteration   3: 4780761.339 ops/s
Iteration   4: 4781750.268 ops/s
Iteration   5: 4721764.432 ops/s
Iteration   6: 4753508.713 ops/s
Iteration   7: 4724111.528 ops/s
Iteration   8: 4750820.512 ops/s
Iteration   9: 4734041.763 ops/s
Iteration  10: 4787855.023 ops/s
Iteration  11: 4753522.155 ops/s
Iteration  12: 4763441.855 ops/s
Iteration  13: 4758738.687 ops/s
Iteration  14: 4770013.672 ops/s
Iteration  15: 4742179.503 ops/s
Iteration  16: 4746341.561 ops/s
Iteration  17: 4749276.853 ops/s
Iteration  18: 4747591.451 ops/s
Iteration  19: 4724962.555 ops/s
Iteration  20: 4769890.720 ops/s
Iteration  21: 4734640.002 ops/s
Iteration  22: 4745628.040 ops/s
Iteration  23: 4774291.068 ops/s
Iteration  24: 4764339.162 ops/s
Iteration  25: 4775760.285 ops/s
Iteration  26: 4752330.667 ops/s
Iteration  27: 4733290.801 ops/s
Iteration  28: 4770191.059 ops/s
Iteration  29: 4752698.374 ops/s
Iteration  30: 4769090.535 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reduceOptional":
  4754758.903 ±(99.9%) 11802.476 ops/s [Average]
  (min, avg, max) = (4721764.432, 4754758.903, 4787855.023), stdev = 17665.392
  CI (99.9%): [4742956.427, 4766561.379] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_reduceOptional  thrpt   30  4754758.903 ± 11802.476  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2723951.170 ops/s
# Warmup Iteration   2: 6420358.663 ops/s
# Warmup Iteration   3: 5593273.626 ops/s
# Warmup Iteration   4: 6550017.795 ops/s
# Warmup Iteration   5: 6526470.067 ops/s
# Warmup Iteration   6: 6521759.829 ops/s
# Warmup Iteration   7: 6525678.888 ops/s
# Warmup Iteration   8: 6522208.110 ops/s
# Warmup Iteration   9: 6537909.410 ops/s
# Warmup Iteration  10: 6544279.175 ops/s
# Warmup Iteration  11: 6523693.944 ops/s
# Warmup Iteration  12: 6524668.367 ops/s
# Warmup Iteration  13: 6492376.463 ops/s
# Warmup Iteration  14: 6535636.556 ops/s
# Warmup Iteration  15: 6541865.582 ops/s
# Warmup Iteration  16: 6528595.468 ops/s
# Warmup Iteration  17: 6530627.633 ops/s
# Warmup Iteration  18: 6543709.039 ops/s
# Warmup Iteration  19: 6525587.755 ops/s
# Warmup Iteration  20: 6523876.897 ops/s
# Warmup Iteration  21: 6516371.586 ops/s
# Warmup Iteration  22: 6515479.436 ops/s
# Warmup Iteration  23: 6571201.676 ops/s
# Warmup Iteration  24: 6508953.726 ops/s
# Warmup Iteration  25: 6507543.469 ops/s
# Warmup Iteration  26: 6531210.221 ops/s
# Warmup Iteration  27: 6512099.533 ops/s
# Warmup Iteration  28: 6537560.851 ops/s
# Warmup Iteration  29: 6483986.795 ops/s
# Warmup Iteration  30: 6529736.363 ops/s
Iteration   1: 6511239.197 ops/s
Iteration   2: 6554798.639 ops/s
Iteration   3: 6536457.401 ops/s
Iteration   4: 6561397.919 ops/s
Iteration   5: 6541332.223 ops/s
Iteration   6: 6558379.177 ops/s
Iteration   7: 6560856.556 ops/s
Iteration   8: 6566523.991 ops/s
Iteration   9: 6512662.190 ops/s
Iteration  10: 6564302.600 ops/s
Iteration  11: 6617352.129 ops/s
Iteration  12: 6560363.570 ops/s
Iteration  13: 6570922.121 ops/s
Iteration  14: 6592033.018 ops/s
Iteration  15: 6532064.576 ops/s
Iteration  16: 6592975.158 ops/s
Iteration  17: 6493437.778 ops/s
Iteration  18: 6433642.383 ops/s
Iteration  19: 6527144.081 ops/s
Iteration  20: 6558239.840 ops/s
Iteration  21: 6540494.162 ops/s
Iteration  22: 6549369.897 ops/s
Iteration  23: 6560316.448 ops/s
Iteration  24: 6545063.212 ops/s
Iteration  25: 6532820.126 ops/s
Iteration  26: 6557942.509 ops/s
Iteration  27: 6548208.144 ops/s
Iteration  28: 6540497.691 ops/s
Iteration  29: 6553998.963 ops/s
Iteration  30: 6548110.294 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reject":
  6547431.533 ±(99.9%) 21778.363 ops/s [Average]
  (min, avg, max) = (6433642.383, 6547431.533, 6617352.129), stdev = 32596.830
  CI (99.9%): [6525653.171, 6569209.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_reject  thrpt   30  6547431.533 ± 21778.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1435333.469 ops/s
# Warmup Iteration   2: 3163756.804 ops/s
# Warmup Iteration   3: 2702196.005 ops/s
# Warmup Iteration   4: 3197022.562 ops/s
# Warmup Iteration   5: 3192407.636 ops/s
# Warmup Iteration   6: 3201660.829 ops/s
# Warmup Iteration   7: 3194752.871 ops/s
# Warmup Iteration   8: 3188906.921 ops/s
# Warmup Iteration   9: 3200310.283 ops/s
# Warmup Iteration  10: 3188423.115 ops/s
# Warmup Iteration  11: 3166456.177 ops/s
# Warmup Iteration  12: 3207670.471 ops/s
# Warmup Iteration  13: 3193599.478 ops/s
# Warmup Iteration  14: 3178141.394 ops/s
# Warmup Iteration  15: 3191437.107 ops/s
# Warmup Iteration  16: 3206508.477 ops/s
# Warmup Iteration  17: 3191178.759 ops/s
# Warmup Iteration  18: 3183066.443 ops/s
# Warmup Iteration  19: 3150512.073 ops/s
# Warmup Iteration  20: 3203791.639 ops/s
# Warmup Iteration  21: 3200095.615 ops/s
# Warmup Iteration  22: 3212202.981 ops/s
# Warmup Iteration  23: 3205235.782 ops/s
# Warmup Iteration  24: 3205303.406 ops/s
# Warmup Iteration  25: 3207910.880 ops/s
# Warmup Iteration  26: 3190555.509 ops/s
# Warmup Iteration  27: 3204079.223 ops/s
# Warmup Iteration  28: 3213133.790 ops/s
# Warmup Iteration  29: 3175871.543 ops/s
# Warmup Iteration  30: 3189733.180 ops/s
Iteration   1: 3178360.530 ops/s
Iteration   2: 3187979.421 ops/s
Iteration   3: 3210087.856 ops/s
Iteration   4: 3202435.484 ops/s
Iteration   5: 3197152.745 ops/s
Iteration   6: 3190342.189 ops/s
Iteration   7: 3168312.362 ops/s
Iteration   8: 3193160.707 ops/s
Iteration   9: 3227070.013 ops/s
Iteration  10: 3215256.434 ops/s
Iteration  11: 3212403.143 ops/s
Iteration  12: 3201310.486 ops/s
Iteration  13: 3187753.924 ops/s
Iteration  14: 3185859.638 ops/s
Iteration  15: 3190866.022 ops/s
Iteration  16: 3179274.293 ops/s
Iteration  17: 3188306.699 ops/s
Iteration  18: 3201040.530 ops/s
Iteration  19: 3180863.639 ops/s
Iteration  20: 3210233.005 ops/s
Iteration  21: 3192152.646 ops/s
Iteration  22: 3209496.019 ops/s
Iteration  23: 3207551.223 ops/s
Iteration  24: 3208295.856 ops/s
Iteration  25: 3157812.107 ops/s
Iteration  26: 3166262.363 ops/s
Iteration  27: 3174711.017 ops/s
Iteration  28: 3182337.641 ops/s
Iteration  29: 3182900.787 ops/s
Iteration  30: 3203458.222 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith":
  3193101.567 ±(99.9%) 10736.700 ops/s [Average]
  (min, avg, max) = (3157812.107, 3193101.567, 3227070.013), stdev = 16070.188
  CI (99.9%): [3182364.867, 3203838.267] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_rejectWith  thrpt   30  3193101.567 ± 10736.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4664014.275 ops/s
# Warmup Iteration   2: 14522514.349 ops/s
# Warmup Iteration   3: 12314794.653 ops/s
# Warmup Iteration   4: 14729590.303 ops/s
# Warmup Iteration   5: 14648416.846 ops/s
# Warmup Iteration   6: 14630317.126 ops/s
# Warmup Iteration   7: 14746891.640 ops/s
# Warmup Iteration   8: 14632254.906 ops/s
# Warmup Iteration   9: 14669782.270 ops/s
# Warmup Iteration  10: 14538077.954 ops/s
# Warmup Iteration  11: 14537404.231 ops/s
# Warmup Iteration  12: 14556601.181 ops/s
# Warmup Iteration  13: 14634895.849 ops/s
# Warmup Iteration  14: 14746338.565 ops/s
# Warmup Iteration  15: 14669655.731 ops/s
# Warmup Iteration  16: 14654112.327 ops/s
# Warmup Iteration  17: 14701295.958 ops/s
# Warmup Iteration  18: 14694257.450 ops/s
# Warmup Iteration  19: 14676964.618 ops/s
# Warmup Iteration  20: 14721597.962 ops/s
# Warmup Iteration  21: 14725987.425 ops/s
# Warmup Iteration  22: 14717147.615 ops/s
# Warmup Iteration  23: 14674163.269 ops/s
# Warmup Iteration  24: 14656511.368 ops/s
# Warmup Iteration  25: 14648866.020 ops/s
# Warmup Iteration  26: 14694774.597 ops/s
# Warmup Iteration  27: 14622842.398 ops/s
# Warmup Iteration  28: 14591523.814 ops/s
# Warmup Iteration  29: 14651326.082 ops/s
# Warmup Iteration  30: 14554113.659 ops/s
Iteration   1: 14688970.410 ops/s
Iteration   2: 14676320.840 ops/s
Iteration   3: 14670282.295 ops/s
Iteration   4: 14710852.275 ops/s
Iteration   5: 14597041.845 ops/s
Iteration   6: 14700909.254 ops/s
Iteration   7: 14744101.142 ops/s
Iteration   8: 14705857.440 ops/s
Iteration   9: 14634774.794 ops/s
Iteration  10: 14674980.694 ops/s
Iteration  11: 14545469.259 ops/s
Iteration  12: 14664617.850 ops/s
Iteration  13: 14704170.564 ops/s
Iteration  14: 14685657.271 ops/s
Iteration  15: 14615190.347 ops/s
Iteration  16: 14737634.377 ops/s
Iteration  17: 14697955.905 ops/s
Iteration  18: 14680444.733 ops/s
Iteration  19: 14547509.579 ops/s
Iteration  20: 14715057.044 ops/s
Iteration  21: 14675417.375 ops/s
Iteration  22: 14564687.377 ops/s
Iteration  23: 14571343.427 ops/s
Iteration  24: 14541211.454 ops/s
Iteration  25: 14517392.384 ops/s
Iteration  26: 14688334.889 ops/s
Iteration  27: 14652937.090 ops/s
Iteration  28: 14722631.642 ops/s
Iteration  29: 14672577.270 ops/s
Iteration  30: 14686204.149 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndex":
  14656351.166 ±(99.9%) 42554.442 ops/s [Average]
  (min, avg, max) = (14517392.384, 14656351.166, 14744101.142), stdev = 63693.490
  CI (99.9%): [14613796.724, 14698905.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_rejectWithIndex  thrpt   30  14656351.166 ± 42554.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2911122.342 ops/s
# Warmup Iteration   2: 6863078.899 ops/s
# Warmup Iteration   3: 5770922.074 ops/s
# Warmup Iteration   4: 6900612.738 ops/s
# Warmup Iteration   5: 6914056.524 ops/s
# Warmup Iteration   6: 6926239.529 ops/s
# Warmup Iteration   7: 6888792.451 ops/s
# Warmup Iteration   8: 6872604.354 ops/s
# Warmup Iteration   9: 6890985.548 ops/s
# Warmup Iteration  10: 6896493.116 ops/s
# Warmup Iteration  11: 6892279.637 ops/s
# Warmup Iteration  12: 6871345.397 ops/s
# Warmup Iteration  13: 6863660.217 ops/s
# Warmup Iteration  14: 6840890.287 ops/s
# Warmup Iteration  15: 6846603.573 ops/s
# Warmup Iteration  16: 6829621.481 ops/s
# Warmup Iteration  17: 6861137.307 ops/s
# Warmup Iteration  18: 6857219.090 ops/s
# Warmup Iteration  19: 6873013.913 ops/s
# Warmup Iteration  20: 6862137.618 ops/s
# Warmup Iteration  21: 6921996.675 ops/s
# Warmup Iteration  22: 6868598.642 ops/s
# Warmup Iteration  23: 6903263.946 ops/s
# Warmup Iteration  24: 6890400.080 ops/s
# Warmup Iteration  25: 6883271.909 ops/s
# Warmup Iteration  26: 6907479.265 ops/s
# Warmup Iteration  27: 6901482.041 ops/s
# Warmup Iteration  28: 6864536.291 ops/s
# Warmup Iteration  29: 6909138.613 ops/s
# Warmup Iteration  30: 6871905.735 ops/s
Iteration   1: 6903096.956 ops/s
Iteration   2: 6925887.427 ops/s
Iteration   3: 6885175.932 ops/s
Iteration   4: 6853035.077 ops/s
Iteration   5: 6921909.348 ops/s
Iteration   6: 6912086.016 ops/s
Iteration   7: 6920179.275 ops/s
Iteration   8: 6931781.990 ops/s
Iteration   9: 6930421.186 ops/s
Iteration  10: 6865163.634 ops/s
Iteration  11: 6839574.515 ops/s
Iteration  12: 6906788.156 ops/s
Iteration  13: 6897167.538 ops/s
Iteration  14: 6858360.856 ops/s
Iteration  15: 6926704.935 ops/s
Iteration  16: 6911495.138 ops/s
Iteration  17: 6843044.757 ops/s
Iteration  18: 6885602.355 ops/s
Iteration  19: 6834159.242 ops/s
Iteration  20: 6911513.437 ops/s
Iteration  21: 6877361.648 ops/s
Iteration  22: 6835487.678 ops/s
Iteration  23: 6812877.040 ops/s
Iteration  24: 6884212.634 ops/s
Iteration  25: 6890883.115 ops/s
Iteration  26: 6850059.196 ops/s
Iteration  27: 6881123.663 ops/s
Iteration  28: 6891068.892 ops/s
Iteration  29: 6898762.535 ops/s
Iteration  30: 6926257.972 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget":
  6887041.405 ±(99.9%) 22425.100 ops/s [Average]
  (min, avg, max) = (6812877.040, 6887041.405, 6931781.990), stdev = 33564.837
  CI (99.9%): [6864616.305, 6909466.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_rejectWithIndexWithTarget  thrpt   30  6887041.405 ± 22425.100  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1898197.436 ops/s
# Warmup Iteration   2: 4682535.578 ops/s
# Warmup Iteration   3: 3978629.597 ops/s
# Warmup Iteration   4: 4796984.720 ops/s
# Warmup Iteration   5: 4759086.662 ops/s
# Warmup Iteration   6: 4820127.436 ops/s
# Warmup Iteration   7: 4793694.429 ops/s
# Warmup Iteration   8: 4806272.119 ops/s
# Warmup Iteration   9: 4810806.118 ops/s
# Warmup Iteration  10: 4820762.419 ops/s
# Warmup Iteration  11: 4811348.684 ops/s
# Warmup Iteration  12: 4801598.215 ops/s
# Warmup Iteration  13: 4812670.119 ops/s
# Warmup Iteration  14: 4797435.763 ops/s
# Warmup Iteration  15: 4799491.906 ops/s
# Warmup Iteration  16: 4783919.511 ops/s
# Warmup Iteration  17: 4815252.027 ops/s
# Warmup Iteration  18: 4800270.418 ops/s
# Warmup Iteration  19: 4801239.288 ops/s
# Warmup Iteration  20: 4803059.571 ops/s
# Warmup Iteration  21: 4794740.820 ops/s
# Warmup Iteration  22: 4805023.900 ops/s
# Warmup Iteration  23: 4804553.367 ops/s
# Warmup Iteration  24: 4808522.606 ops/s
# Warmup Iteration  25: 4817162.842 ops/s
# Warmup Iteration  26: 4785599.041 ops/s
# Warmup Iteration  27: 4787004.740 ops/s
# Warmup Iteration  28: 4823559.870 ops/s
# Warmup Iteration  29: 4800420.539 ops/s
# Warmup Iteration  30: 4801192.246 ops/s
Iteration   1: 4799694.750 ops/s
Iteration   2: 4792929.492 ops/s
Iteration   3: 4821800.832 ops/s
Iteration   4: 4809907.117 ops/s
Iteration   5: 4812502.495 ops/s
Iteration   6: 4822101.689 ops/s
Iteration   7: 4849881.680 ops/s
Iteration   8: 4820175.813 ops/s
Iteration   9: 4772410.672 ops/s
Iteration  10: 4783198.698 ops/s
Iteration  11: 4841764.411 ops/s
Iteration  12: 4824865.228 ops/s
Iteration  13: 4803603.500 ops/s
Iteration  14: 4834814.664 ops/s
Iteration  15: 4801698.335 ops/s
Iteration  16: 4830102.515 ops/s
Iteration  17: 4829895.154 ops/s
Iteration  18: 4820692.273 ops/s
Iteration  19: 4836596.663 ops/s
Iteration  20: 4804849.911 ops/s
Iteration  21: 4824488.129 ops/s
Iteration  22: 4804635.427 ops/s
Iteration  23: 4822670.939 ops/s
Iteration  24: 4788898.963 ops/s
Iteration  25: 4829518.481 ops/s
Iteration  26: 4808909.979 ops/s
Iteration  27: 4843446.845 ops/s
Iteration  28: 4815877.486 ops/s
Iteration  29: 4806381.152 ops/s
Iteration  30: 4803879.016 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_rejectWith_target":
  4815406.410 ±(99.9%) 12201.525 ops/s [Average]
  (min, avg, max) = (4772410.672, 4815406.410, 4849881.680), stdev = 18262.669
  CI (99.9%): [4803204.885, 4827607.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_rejectWith_target  thrpt   30  4815406.410 ± 12201.525  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631472.209 ops/s
# Warmup Iteration   2: 749645.853 ops/s
# Warmup Iteration   3: 939940.660 ops/s
# Warmup Iteration   4: 935816.546 ops/s
# Warmup Iteration   5: 939846.413 ops/s
# Warmup Iteration   6: 941040.524 ops/s
# Warmup Iteration   7: 941083.683 ops/s
# Warmup Iteration   8: 943566.660 ops/s
# Warmup Iteration   9: 810992.691 ops/s
# Warmup Iteration  10: 914052.518 ops/s
# Warmup Iteration  11: 939671.573 ops/s
# Warmup Iteration  12: 942954.841 ops/s
# Warmup Iteration  13: 941279.468 ops/s
# Warmup Iteration  14: 937995.926 ops/s
# Warmup Iteration  15: 939403.228 ops/s
# Warmup Iteration  16: 937886.719 ops/s
# Warmup Iteration  17: 996077.690 ops/s
# Warmup Iteration  18: 989715.677 ops/s
# Warmup Iteration  19: 991860.679 ops/s
# Warmup Iteration  20: 995333.708 ops/s
# Warmup Iteration  21: 984710.589 ops/s
# Warmup Iteration  22: 985563.868 ops/s
# Warmup Iteration  23: 987367.719 ops/s
# Warmup Iteration  24: 988672.909 ops/s
# Warmup Iteration  25: 992232.409 ops/s
# Warmup Iteration  26: 993873.278 ops/s
# Warmup Iteration  27: 991282.659 ops/s
# Warmup Iteration  28: 993418.501 ops/s
# Warmup Iteration  29: 990662.210 ops/s
# Warmup Iteration  30: 991504.500 ops/s
Iteration   1: 992975.021 ops/s
Iteration   2: 995764.606 ops/s
Iteration   3: 989198.790 ops/s
Iteration   4: 992048.492 ops/s
Iteration   5: 995542.860 ops/s
Iteration   6: 997433.593 ops/s
Iteration   7: 988290.375 ops/s
Iteration   8: 1000176.743 ops/s
Iteration   9: 993132.866 ops/s
Iteration  10: 991750.610 ops/s
Iteration  11: 990012.359 ops/s
Iteration  12: 994149.173 ops/s
Iteration  13: 990948.590 ops/s
Iteration  14: 991471.656 ops/s
Iteration  15: 988087.383 ops/s
Iteration  16: 997926.650 ops/s
Iteration  17: 986887.958 ops/s
Iteration  18: 991599.549 ops/s
Iteration  19: 990198.087 ops/s
Iteration  20: 989766.423 ops/s
Iteration  21: 991730.903 ops/s
Iteration  22: 986379.125 ops/s
Iteration  23: 1001032.512 ops/s
Iteration  24: 984768.154 ops/s
Iteration  25: 990156.155 ops/s
Iteration  26: 992240.026 ops/s
Iteration  27: 990762.509 ops/s
Iteration  28: 989077.134 ops/s
Iteration  29: 992990.422 ops/s
Iteration  30: 987529.139 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAll":
  991800.929 ±(99.9%) 2604.772 ops/s [Average]
  (min, avg, max) = (984768.154, 991800.929, 1001032.512), stdev = 3898.700
  CI (99.9%): [989196.157, 994405.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeAll  thrpt   30  991800.929 ± 2604.772  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 631569.223 ops/s
# Warmup Iteration   2: 752107.202 ops/s
# Warmup Iteration   3: 945639.138 ops/s
# Warmup Iteration   4: 940234.480 ops/s
# Warmup Iteration   5: 941391.716 ops/s
# Warmup Iteration   6: 940145.712 ops/s
# Warmup Iteration   7: 948430.140 ops/s
# Warmup Iteration   8: 945258.261 ops/s
# Warmup Iteration   9: 786783.696 ops/s
# Warmup Iteration  10: 940771.646 ops/s
# Warmup Iteration  11: 943678.517 ops/s
# Warmup Iteration  12: 941175.841 ops/s
# Warmup Iteration  13: 942387.890 ops/s
# Warmup Iteration  14: 947217.099 ops/s
# Warmup Iteration  15: 941678.082 ops/s
# Warmup Iteration  16: 945883.097 ops/s
# Warmup Iteration  17: 1000768.335 ops/s
# Warmup Iteration  18: 995893.187 ops/s
# Warmup Iteration  19: 1001458.913 ops/s
# Warmup Iteration  20: 1000354.655 ops/s
# Warmup Iteration  21: 998883.118 ops/s
# Warmup Iteration  22: 1003733.378 ops/s
# Warmup Iteration  23: 994521.279 ops/s
# Warmup Iteration  24: 1004278.370 ops/s
# Warmup Iteration  25: 995902.723 ops/s
# Warmup Iteration  26: 997493.887 ops/s
# Warmup Iteration  27: 994406.696 ops/s
# Warmup Iteration  28: 996188.515 ops/s
# Warmup Iteration  29: 993771.337 ops/s
# Warmup Iteration  30: 994732.416 ops/s
Iteration   1: 999208.321 ops/s
Iteration   2: 995133.976 ops/s
Iteration   3: 997974.323 ops/s
Iteration   4: 992733.700 ops/s
Iteration   5: 1000363.859 ops/s
Iteration   6: 999511.343 ops/s
Iteration   7: 996414.790 ops/s
Iteration   8: 997374.300 ops/s
Iteration   9: 992796.490 ops/s
Iteration  10: 1000990.130 ops/s
Iteration  11: 996762.705 ops/s
Iteration  12: 998691.214 ops/s
Iteration  13: 999826.894 ops/s
Iteration  14: 1000165.030 ops/s
Iteration  15: 1002993.106 ops/s
Iteration  16: 1002567.954 ops/s
Iteration  17: 999933.362 ops/s
Iteration  18: 1000826.113 ops/s
Iteration  19: 1005107.422 ops/s
Iteration  20: 1000358.613 ops/s
Iteration  21: 993927.194 ops/s
Iteration  22: 1003829.515 ops/s
Iteration  23: 998647.540 ops/s
Iteration  24: 995348.808 ops/s
Iteration  25: 1001905.662 ops/s
Iteration  26: 999149.922 ops/s
Iteration  27: 1001516.950 ops/s
Iteration  28: 995066.032 ops/s
Iteration  29: 993328.958 ops/s
Iteration  30: 996107.668 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeAllIterable":
  998618.730 ±(99.9%) 2210.052 ops/s [Average]
  (min, avg, max) = (992733.700, 998618.730, 1005107.422), stdev = 3307.902
  CI (99.9%): [996408.678, 1000828.782] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeAllIterable  thrpt   30  998618.730 ± 2210.052  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 618082.944 ops/s
# Warmup Iteration   2: 731511.099 ops/s
# Warmup Iteration   3: 926490.716 ops/s
# Warmup Iteration   4: 921898.893 ops/s
# Warmup Iteration   5: 925822.024 ops/s
# Warmup Iteration   6: 924660.279 ops/s
# Warmup Iteration   7: 933428.490 ops/s
# Warmup Iteration   8: 930630.903 ops/s
# Warmup Iteration   9: 796871.196 ops/s
# Warmup Iteration  10: 903350.760 ops/s
# Warmup Iteration  11: 928241.050 ops/s
# Warmup Iteration  12: 927686.901 ops/s
# Warmup Iteration  13: 931978.406 ops/s
# Warmup Iteration  14: 926197.905 ops/s
# Warmup Iteration  15: 926915.043 ops/s
# Warmup Iteration  16: 929158.960 ops/s
# Warmup Iteration  17: 977614.265 ops/s
# Warmup Iteration  18: 971981.115 ops/s
# Warmup Iteration  19: 975344.451 ops/s
# Warmup Iteration  20: 974777.681 ops/s
# Warmup Iteration  21: 976128.964 ops/s
# Warmup Iteration  22: 975770.326 ops/s
# Warmup Iteration  23: 974453.045 ops/s
# Warmup Iteration  24: 978985.257 ops/s
# Warmup Iteration  25: 976550.333 ops/s
# Warmup Iteration  26: 978190.216 ops/s
# Warmup Iteration  27: 973552.195 ops/s
# Warmup Iteration  28: 977671.270 ops/s
# Warmup Iteration  29: 976121.161 ops/s
# Warmup Iteration  30: 967374.379 ops/s
Iteration   1: 978084.047 ops/s
Iteration   2: 978472.978 ops/s
Iteration   3: 976058.693 ops/s
Iteration   4: 982666.908 ops/s
Iteration   5: 977354.845 ops/s
Iteration   6: 971303.962 ops/s
Iteration   7: 974971.193 ops/s
Iteration   8: 975276.183 ops/s
Iteration   9: 975416.188 ops/s
Iteration  10: 973914.127 ops/s
Iteration  11: 978243.387 ops/s
Iteration  12: 969079.343 ops/s
Iteration  13: 979876.871 ops/s
Iteration  14: 975912.652 ops/s
Iteration  15: 967885.941 ops/s
Iteration  16: 971202.033 ops/s
Iteration  17: 977856.569 ops/s
Iteration  18: 971669.627 ops/s
Iteration  19: 973094.703 ops/s
Iteration  20: 965096.184 ops/s
Iteration  21: 969292.135 ops/s
Iteration  22: 971198.601 ops/s
Iteration  23: 974988.999 ops/s
Iteration  24: 970948.232 ops/s
Iteration  25: 976926.400 ops/s
Iteration  26: 974180.288 ops/s
Iteration  27: 970933.319 ops/s
Iteration  28: 977375.436 ops/s
Iteration  29: 971700.712 ops/s
Iteration  30: 971414.906 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIf":
  974079.849 ±(99.9%) 2622.015 ops/s [Average]
  (min, avg, max) = (965096.184, 974079.849, 982666.908), stdev = 3924.509
  CI (99.9%): [971457.834, 976701.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeIf  thrpt   30  974079.849 ± 2622.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 611155.018 ops/s
# Warmup Iteration   2: 727722.496 ops/s
# Warmup Iteration   3: 915598.645 ops/s
# Warmup Iteration   4: 912812.716 ops/s
# Warmup Iteration   5: 925640.728 ops/s
# Warmup Iteration   6: 918106.960 ops/s
# Warmup Iteration   7: 921002.503 ops/s
# Warmup Iteration   8: 924502.102 ops/s
# Warmup Iteration   9: 790171.437 ops/s
# Warmup Iteration  10: 894100.372 ops/s
# Warmup Iteration  11: 922106.923 ops/s
# Warmup Iteration  12: 926323.607 ops/s
# Warmup Iteration  13: 921976.688 ops/s
# Warmup Iteration  14: 922412.171 ops/s
# Warmup Iteration  15: 921030.389 ops/s
# Warmup Iteration  16: 922252.427 ops/s
# Warmup Iteration  17: 974438.805 ops/s
# Warmup Iteration  18: 977552.118 ops/s
# Warmup Iteration  19: 975617.416 ops/s
# Warmup Iteration  20: 973833.022 ops/s
# Warmup Iteration  21: 973308.621 ops/s
# Warmup Iteration  22: 977158.433 ops/s
# Warmup Iteration  23: 977907.285 ops/s
# Warmup Iteration  24: 976848.005 ops/s
# Warmup Iteration  25: 974300.990 ops/s
# Warmup Iteration  26: 976003.332 ops/s
# Warmup Iteration  27: 977219.722 ops/s
# Warmup Iteration  28: 977125.958 ops/s
# Warmup Iteration  29: 979977.172 ops/s
# Warmup Iteration  30: 975659.004 ops/s
Iteration   1: 976316.052 ops/s
Iteration   2: 982024.647 ops/s
Iteration   3: 972681.779 ops/s
Iteration   4: 977488.052 ops/s
Iteration   5: 972941.766 ops/s
Iteration   6: 973949.278 ops/s
Iteration   7: 976136.759 ops/s
Iteration   8: 978845.867 ops/s
Iteration   9: 977115.939 ops/s
Iteration  10: 980246.354 ops/s
Iteration  11: 977353.623 ops/s
Iteration  12: 976670.352 ops/s
Iteration  13: 971097.554 ops/s
Iteration  14: 984487.728 ops/s
Iteration  15: 970457.487 ops/s
Iteration  16: 968268.959 ops/s
Iteration  17: 974289.089 ops/s
Iteration  18: 977566.697 ops/s
Iteration  19: 974326.307 ops/s
Iteration  20: 973677.821 ops/s
Iteration  21: 977652.565 ops/s
Iteration  22: 976260.480 ops/s
Iteration  23: 978448.493 ops/s
Iteration  24: 981191.504 ops/s
Iteration  25: 977599.549 ops/s
Iteration  26: 972382.483 ops/s
Iteration  27: 980503.607 ops/s
Iteration  28: 975626.678 ops/s
Iteration  29: 974081.236 ops/s
Iteration  30: 975354.291 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIfWith":
  976168.100 ±(99.9%) 2380.177 ops/s [Average]
  (min, avg, max) = (968268.959, 976168.100, 984487.728), stdev = 3562.537
  CI (99.9%): [973787.923, 978548.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeIfWith  thrpt   30  976168.100 ± 2380.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624495.364 ops/s
# Warmup Iteration   2: 734872.200 ops/s
# Warmup Iteration   3: 932375.804 ops/s
# Warmup Iteration   4: 926584.619 ops/s
# Warmup Iteration   5: 930993.806 ops/s
# Warmup Iteration   6: 934190.549 ops/s
# Warmup Iteration   7: 936149.887 ops/s
# Warmup Iteration   8: 930292.492 ops/s
# Warmup Iteration   9: 803100.848 ops/s
# Warmup Iteration  10: 895203.303 ops/s
# Warmup Iteration  11: 932126.744 ops/s
# Warmup Iteration  12: 928795.175 ops/s
# Warmup Iteration  13: 925010.978 ops/s
# Warmup Iteration  14: 930628.227 ops/s
# Warmup Iteration  15: 936054.711 ops/s
# Warmup Iteration  16: 933276.183 ops/s
# Warmup Iteration  17: 986862.981 ops/s
# Warmup Iteration  18: 991606.808 ops/s
# Warmup Iteration  19: 981613.436 ops/s
# Warmup Iteration  20: 991200.715 ops/s
# Warmup Iteration  21: 989637.470 ops/s
# Warmup Iteration  22: 986898.813 ops/s
# Warmup Iteration  23: 984382.424 ops/s
# Warmup Iteration  24: 990963.758 ops/s
# Warmup Iteration  25: 990805.460 ops/s
# Warmup Iteration  26: 991153.101 ops/s
# Warmup Iteration  27: 991579.532 ops/s
# Warmup Iteration  28: 989251.912 ops/s
# Warmup Iteration  29: 988991.366 ops/s
# Warmup Iteration  30: 982092.515 ops/s
Iteration   1: 983392.758 ops/s
Iteration   2: 986423.215 ops/s
Iteration   3: 988067.459 ops/s
Iteration   4: 985292.540 ops/s
Iteration   5: 987206.490 ops/s
Iteration   6: 986423.653 ops/s
Iteration   7: 988186.340 ops/s
Iteration   8: 983496.027 ops/s
Iteration   9: 985581.440 ops/s
Iteration  10: 992624.825 ops/s
Iteration  11: 989333.265 ops/s
Iteration  12: 986752.604 ops/s
Iteration  13: 989880.571 ops/s
Iteration  14: 982736.850 ops/s
Iteration  15: 989672.867 ops/s
Iteration  16: 981261.887 ops/s
Iteration  17: 984210.732 ops/s
Iteration  18: 988881.579 ops/s
Iteration  19: 983950.252 ops/s
Iteration  20: 988236.815 ops/s
Iteration  21: 981037.980 ops/s
Iteration  22: 986212.040 ops/s
Iteration  23: 978178.088 ops/s
Iteration  24: 986178.891 ops/s
Iteration  25: 995219.393 ops/s
Iteration  26: 988535.979 ops/s
Iteration  27: 987580.390 ops/s
Iteration  28: 987964.142 ops/s
Iteration  29: 993017.271 ops/s
Iteration  30: 994040.121 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeIndex":
  986985.882 ±(99.9%) 2575.442 ops/s [Average]
  (min, avg, max) = (978178.088, 986985.882, 995219.393), stdev = 3854.801
  CI (99.9%): [984410.440, 989561.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeIndex  thrpt   30  986985.882 ± 2575.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638276.923 ops/s
# Warmup Iteration   2: 757973.182 ops/s
# Warmup Iteration   3: 965296.584 ops/s
# Warmup Iteration   4: 961673.517 ops/s
# Warmup Iteration   5: 968990.152 ops/s
# Warmup Iteration   6: 962868.917 ops/s
# Warmup Iteration   7: 963239.464 ops/s
# Warmup Iteration   8: 963104.616 ops/s
# Warmup Iteration   9: 807282.676 ops/s
# Warmup Iteration  10: 961947.152 ops/s
# Warmup Iteration  11: 963764.671 ops/s
# Warmup Iteration  12: 963275.824 ops/s
# Warmup Iteration  13: 963690.899 ops/s
# Warmup Iteration  14: 965318.787 ops/s
# Warmup Iteration  15: 965737.609 ops/s
# Warmup Iteration  16: 965355.544 ops/s
# Warmup Iteration  17: 1019478.927 ops/s
# Warmup Iteration  18: 1024059.399 ops/s
# Warmup Iteration  19: 1022560.306 ops/s
# Warmup Iteration  20: 1027347.651 ops/s
# Warmup Iteration  21: 1023082.557 ops/s
# Warmup Iteration  22: 1023369.819 ops/s
# Warmup Iteration  23: 1021685.630 ops/s
# Warmup Iteration  24: 1018777.593 ops/s
# Warmup Iteration  25: 1017591.191 ops/s
# Warmup Iteration  26: 1019571.142 ops/s
# Warmup Iteration  27: 1019468.662 ops/s
# Warmup Iteration  28: 1015547.535 ops/s
# Warmup Iteration  29: 1021170.857 ops/s
# Warmup Iteration  30: 1021769.714 ops/s
Iteration   1: 1022937.240 ops/s
Iteration   2: 1017016.684 ops/s
Iteration   3: 1024919.075 ops/s
Iteration   4: 1025500.071 ops/s
Iteration   5: 1022853.633 ops/s
Iteration   6: 1020701.568 ops/s
Iteration   7: 1020538.746 ops/s
Iteration   8: 1019495.665 ops/s
Iteration   9: 1020034.049 ops/s
Iteration  10: 1017369.206 ops/s
Iteration  11: 1014176.354 ops/s
Iteration  12: 1024570.837 ops/s
Iteration  13: 1016633.171 ops/s
Iteration  14: 1022274.393 ops/s
Iteration  15: 1019061.735 ops/s
Iteration  16: 1022585.194 ops/s
Iteration  17: 1021002.737 ops/s
Iteration  18: 1026279.817 ops/s
Iteration  19: 1018399.629 ops/s
Iteration  20: 1029281.085 ops/s
Iteration  21: 1014708.481 ops/s
Iteration  22: 1027401.922 ops/s
Iteration  23: 1018296.738 ops/s
Iteration  24: 1020397.327 ops/s
Iteration  25: 1017526.802 ops/s
Iteration  26: 1026194.845 ops/s
Iteration  27: 1014967.068 ops/s
Iteration  28: 1020680.629 ops/s
Iteration  29: 1016337.280 ops/s
Iteration  30: 1023523.348 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_removeObject":
  1020855.511 ±(99.9%) 2649.619 ops/s [Average]
  (min, avg, max) = (1014176.354, 1020855.511, 1029281.085), stdev = 3965.825
  CI (99.9%): [1018205.892, 1023505.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_removeObject  thrpt   30  1020855.511 ± 2649.619  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_replaceAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_replaceAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10481067.926 ops/s
# Warmup Iteration   2: 24419761.652 ops/s
# Warmup Iteration   3: 23719137.981 ops/s
# Warmup Iteration   4: 20900910.134 ops/s
# Warmup Iteration   5: 24142641.105 ops/s
# Warmup Iteration   6: 24070450.018 ops/s
# Warmup Iteration   7: 24136724.277 ops/s
# Warmup Iteration   8: 24043844.552 ops/s
# Warmup Iteration   9: 24019530.839 ops/s
# Warmup Iteration  10: 24205501.314 ops/s
# Warmup Iteration  11: 24197663.466 ops/s
# Warmup Iteration  12: 24192638.620 ops/s
# Warmup Iteration  13: 24182914.725 ops/s
# Warmup Iteration  14: 24144909.813 ops/s
# Warmup Iteration  15: 24237527.172 ops/s
# Warmup Iteration  16: 24177702.832 ops/s
# Warmup Iteration  17: 25095921.336 ops/s
# Warmup Iteration  18: 25054824.369 ops/s
# Warmup Iteration  19: 25019463.003 ops/s
# Warmup Iteration  20: 25006818.081 ops/s
# Warmup Iteration  21: 25058350.809 ops/s
# Warmup Iteration  22: 25031452.896 ops/s
# Warmup Iteration  23: 25002332.375 ops/s
# Warmup Iteration  24: 24944648.338 ops/s
# Warmup Iteration  25: 25021968.935 ops/s
# Warmup Iteration  26: 25068005.986 ops/s
# Warmup Iteration  27: 24962286.643 ops/s
# Warmup Iteration  28: 24999192.004 ops/s
# Warmup Iteration  29: 25081781.616 ops/s
# Warmup Iteration  30: 25122804.089 ops/s
Iteration   1: 24863202.335 ops/s
Iteration   2: 25052628.005 ops/s
Iteration   3: 25129702.452 ops/s
Iteration   4: 25063267.531 ops/s
Iteration   5: 24847567.443 ops/s
Iteration   6: 25131762.634 ops/s
Iteration   7: 25101819.824 ops/s
Iteration   8: 24944846.001 ops/s
Iteration   9: 24865019.995 ops/s
Iteration  10: 24799718.212 ops/s
Iteration  11: 24836355.652 ops/s
Iteration  12: 25182219.919 ops/s
Iteration  13: 24948940.337 ops/s
Iteration  14: 24731369.828 ops/s
Iteration  15: 24772950.995 ops/s
Iteration  16: 24922544.317 ops/s
Iteration  17: 25069991.527 ops/s
Iteration  18: 25019573.978 ops/s
Iteration  19: 24939908.830 ops/s
Iteration  20: 24778258.925 ops/s
Iteration  21: 24742189.534 ops/s
Iteration  22: 25047383.798 ops/s
Iteration  23: 24888329.601 ops/s
Iteration  24: 24977942.432 ops/s
Iteration  25: 24996155.432 ops/s
Iteration  26: 24948312.828 ops/s
Iteration  27: 25089091.679 ops/s
Iteration  28: 25008891.842 ops/s
Iteration  29: 24888285.828 ops/s
Iteration  30: 24935560.396 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_replaceAll":
  24950793.070 ±(99.9%) 82424.370 ops/s [Average]
  (min, avg, max) = (24731369.828, 24950793.070, 25182219.919), stdev = 123368.927
  CI (99.9%): [24868368.700, 25033217.441] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_replaceAll  thrpt   30  24950793.070 ± 82424.370  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636665.992 ops/s
# Warmup Iteration   2: 762472.607 ops/s
# Warmup Iteration   3: 963639.084 ops/s
# Warmup Iteration   4: 955289.569 ops/s
# Warmup Iteration   5: 959197.812 ops/s
# Warmup Iteration   6: 964253.875 ops/s
# Warmup Iteration   7: 964183.516 ops/s
# Warmup Iteration   8: 960288.579 ops/s
# Warmup Iteration   9: 802962.511 ops/s
# Warmup Iteration  10: 967914.042 ops/s
# Warmup Iteration  11: 967584.730 ops/s
# Warmup Iteration  12: 966523.492 ops/s
# Warmup Iteration  13: 963225.592 ops/s
# Warmup Iteration  14: 952261.346 ops/s
# Warmup Iteration  15: 964861.644 ops/s
# Warmup Iteration  16: 963688.715 ops/s
# Warmup Iteration  17: 1017237.782 ops/s
# Warmup Iteration  18: 1017679.708 ops/s
# Warmup Iteration  19: 1018010.469 ops/s
# Warmup Iteration  20: 1015385.639 ops/s
# Warmup Iteration  21: 1012641.915 ops/s
# Warmup Iteration  22: 1014547.681 ops/s
# Warmup Iteration  23: 1017838.007 ops/s
# Warmup Iteration  24: 1019023.598 ops/s
# Warmup Iteration  25: 1015417.008 ops/s
# Warmup Iteration  26: 1019739.560 ops/s
# Warmup Iteration  27: 1015443.205 ops/s
# Warmup Iteration  28: 1017014.999 ops/s
# Warmup Iteration  29: 1022957.333 ops/s
# Warmup Iteration  30: 1017428.509 ops/s
Iteration   1: 1018842.208 ops/s
Iteration   2: 1021031.327 ops/s
Iteration   3: 1013549.182 ops/s
Iteration   4: 1018765.706 ops/s
Iteration   5: 1020714.311 ops/s
Iteration   6: 1022729.528 ops/s
Iteration   7: 1025148.923 ops/s
Iteration   8: 1016698.353 ops/s
Iteration   9: 1019100.877 ops/s
Iteration  10: 1020889.350 ops/s
Iteration  11: 1016020.869 ops/s
Iteration  12: 1021571.211 ops/s
Iteration  13: 1015973.737 ops/s
Iteration  14: 1020574.769 ops/s
Iteration  15: 1022838.406 ops/s
Iteration  16: 1014727.957 ops/s
Iteration  17: 1021473.261 ops/s
Iteration  18: 1019097.648 ops/s
Iteration  19: 1018361.497 ops/s
Iteration  20: 1023764.982 ops/s
Iteration  21: 1019647.582 ops/s
Iteration  22: 1015686.968 ops/s
Iteration  23: 1023065.182 ops/s
Iteration  24: 1017663.655 ops/s
Iteration  25: 1016239.293 ops/s
Iteration  26: 1024196.329 ops/s
Iteration  27: 1017206.633 ops/s
Iteration  28: 1015902.887 ops/s
Iteration  29: 1020173.739 ops/s
Iteration  30: 1017218.878 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAll":
  1019295.842 ±(99.9%) 2022.925 ops/s [Average]
  (min, avg, max) = (1013549.182, 1019295.842, 1025148.923), stdev = 3027.819
  CI (99.9%): [1017272.916, 1021318.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_retainAll  thrpt   30  1019295.842 ± 2022.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 597183.522 ops/s
# Warmup Iteration   2: 674023.594 ops/s
# Warmup Iteration   3: 859375.691 ops/s
# Warmup Iteration   4: 862323.024 ops/s
# Warmup Iteration   5: 856454.591 ops/s
# Warmup Iteration   6: 857247.928 ops/s
# Warmup Iteration   7: 859731.927 ops/s
# Warmup Iteration   8: 860146.185 ops/s
# Warmup Iteration   9: 864426.041 ops/s
# Warmup Iteration  10: 718221.733 ops/s
# Warmup Iteration  11: 864450.451 ops/s
# Warmup Iteration  12: 865758.057 ops/s
# Warmup Iteration  13: 865909.734 ops/s
# Warmup Iteration  14: 861756.262 ops/s
# Warmup Iteration  15: 862671.369 ops/s
# Warmup Iteration  16: 864158.359 ops/s
# Warmup Iteration  17: 907466.179 ops/s
# Warmup Iteration  18: 908169.546 ops/s
# Warmup Iteration  19: 908697.248 ops/s
# Warmup Iteration  20: 908641.042 ops/s
# Warmup Iteration  21: 903171.101 ops/s
# Warmup Iteration  22: 903779.653 ops/s
# Warmup Iteration  23: 907288.815 ops/s
# Warmup Iteration  24: 906701.533 ops/s
# Warmup Iteration  25: 908463.753 ops/s
# Warmup Iteration  26: 906333.796 ops/s
# Warmup Iteration  27: 905847.115 ops/s
# Warmup Iteration  28: 904032.718 ops/s
# Warmup Iteration  29: 908712.481 ops/s
# Warmup Iteration  30: 906534.458 ops/s
Iteration   1: 908435.295 ops/s
Iteration   2: 906730.875 ops/s
Iteration   3: 909623.622 ops/s
Iteration   4: 896666.373 ops/s
Iteration   5: 907296.741 ops/s
Iteration   6: 901275.047 ops/s
Iteration   7: 906057.121 ops/s
Iteration   8: 908428.045 ops/s
Iteration   9: 909311.654 ops/s
Iteration  10: 907381.410 ops/s
Iteration  11: 903685.780 ops/s
Iteration  12: 900301.985 ops/s
Iteration  13: 896421.406 ops/s
Iteration  14: 907842.786 ops/s
Iteration  15: 909789.849 ops/s
Iteration  16: 907655.242 ops/s
Iteration  17: 906826.514 ops/s
Iteration  18: 907867.119 ops/s
Iteration  19: 911855.407 ops/s
Iteration  20: 908725.779 ops/s
Iteration  21: 909034.023 ops/s
Iteration  22: 911818.858 ops/s
Iteration  23: 911033.442 ops/s
Iteration  24: 907005.774 ops/s
Iteration  25: 908814.969 ops/s
Iteration  26: 907727.179 ops/s
Iteration  27: 910098.146 ops/s
Iteration  28: 902514.633 ops/s
Iteration  29: 910528.010 ops/s
Iteration  30: 911925.135 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_retainAllIterable":
  907089.274 ±(99.9%) 2703.160 ops/s [Average]
  (min, avg, max) = (896421.406, 907089.274, 911925.135), stdev = 4045.963
  CI (99.9%): [904386.114, 909792.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_retainAllIterable  thrpt   30  907089.274 ± 2703.160  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6802391.723 ops/s
# Warmup Iteration   2: 14338824.471 ops/s
# Warmup Iteration   3: 11768861.474 ops/s
# Warmup Iteration   4: 14030216.902 ops/s
# Warmup Iteration   5: 13980511.672 ops/s
# Warmup Iteration   6: 13961152.721 ops/s
# Warmup Iteration   7: 13935614.043 ops/s
# Warmup Iteration   8: 14050457.311 ops/s
# Warmup Iteration   9: 13967111.150 ops/s
# Warmup Iteration  10: 14038187.373 ops/s
# Warmup Iteration  11: 13933051.212 ops/s
# Warmup Iteration  12: 14063857.951 ops/s
# Warmup Iteration  13: 14040994.359 ops/s
# Warmup Iteration  14: 13919038.787 ops/s
# Warmup Iteration  15: 13998305.304 ops/s
# Warmup Iteration  16: 14001773.798 ops/s
# Warmup Iteration  17: 13958270.438 ops/s
# Warmup Iteration  18: 13995926.700 ops/s
# Warmup Iteration  19: 13911786.335 ops/s
# Warmup Iteration  20: 13938880.294 ops/s
# Warmup Iteration  21: 13907361.219 ops/s
# Warmup Iteration  22: 13944773.421 ops/s
# Warmup Iteration  23: 13887678.465 ops/s
# Warmup Iteration  24: 13909244.352 ops/s
# Warmup Iteration  25: 14018767.547 ops/s
# Warmup Iteration  26: 13945841.512 ops/s
# Warmup Iteration  27: 13985124.109 ops/s
# Warmup Iteration  28: 13998815.876 ops/s
# Warmup Iteration  29: 13922524.659 ops/s
# Warmup Iteration  30: 13880484.448 ops/s
Iteration   1: 13848290.350 ops/s
Iteration   2: 13831523.711 ops/s
Iteration   3: 13918688.853 ops/s
Iteration   4: 13802843.754 ops/s
Iteration   5: 13959157.114 ops/s
Iteration   6: 13870661.960 ops/s
Iteration   7: 13998634.594 ops/s
Iteration   8: 13978260.555 ops/s
Iteration   9: 14017034.066 ops/s
Iteration  10: 14012131.838 ops/s
Iteration  11: 13984182.851 ops/s
Iteration  12: 14062055.243 ops/s
Iteration  13: 13961774.258 ops/s
Iteration  14: 14005307.914 ops/s
Iteration  15: 14043963.636 ops/s
Iteration  16: 14003411.147 ops/s
Iteration  17: 13945219.747 ops/s
Iteration  18: 14035053.229 ops/s
Iteration  19: 13951724.851 ops/s
Iteration  20: 13985058.932 ops/s
Iteration  21: 13962688.672 ops/s
Iteration  22: 14049929.870 ops/s
Iteration  23: 13987709.680 ops/s
Iteration  24: 13994985.009 ops/s
Iteration  25: 14024420.415 ops/s
Iteration  26: 14031443.580 ops/s
Iteration  27: 13910445.554 ops/s
Iteration  28: 14003493.673 ops/s
Iteration  29: 14015167.251 ops/s
Iteration  30: 13940590.743 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach":
  13971195.102 ±(99.9%) 43521.173 ops/s [Average]
  (min, avg, max) = (13802843.754, 13971195.102, 14062055.243), stdev = 65140.447
  CI (99.9%): [13927673.929, 14014716.274] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_reverseForEach  thrpt   30  13971195.102 ± 43521.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6353221.205 ops/s
# Warmup Iteration   2: 13437277.277 ops/s
# Warmup Iteration   3: 11305987.311 ops/s
# Warmup Iteration   4: 12433678.456 ops/s
# Warmup Iteration   5: 12811357.841 ops/s
# Warmup Iteration   6: 12872576.314 ops/s
# Warmup Iteration   7: 12919264.091 ops/s
# Warmup Iteration   8: 12917872.391 ops/s
# Warmup Iteration   9: 12948199.823 ops/s
# Warmup Iteration  10: 12881202.161 ops/s
# Warmup Iteration  11: 12878125.086 ops/s
# Warmup Iteration  12: 12962890.762 ops/s
# Warmup Iteration  13: 12916026.985 ops/s
# Warmup Iteration  14: 12943459.555 ops/s
# Warmup Iteration  15: 12948696.874 ops/s
# Warmup Iteration  16: 12923234.585 ops/s
# Warmup Iteration  17: 12898793.469 ops/s
# Warmup Iteration  18: 12899883.599 ops/s
# Warmup Iteration  19: 12949757.162 ops/s
# Warmup Iteration  20: 12965415.304 ops/s
# Warmup Iteration  21: 12836108.147 ops/s
# Warmup Iteration  22: 12932506.516 ops/s
# Warmup Iteration  23: 12882740.035 ops/s
# Warmup Iteration  24: 12911930.008 ops/s
# Warmup Iteration  25: 12902195.858 ops/s
# Warmup Iteration  26: 12911326.281 ops/s
# Warmup Iteration  27: 12895071.486 ops/s
# Warmup Iteration  28: 12885160.936 ops/s
# Warmup Iteration  29: 12817966.541 ops/s
# Warmup Iteration  30: 12875677.221 ops/s
Iteration   1: 12879536.537 ops/s
Iteration   2: 12939086.644 ops/s
Iteration   3: 12877949.970 ops/s
Iteration   4: 12914672.638 ops/s
Iteration   5: 12928539.083 ops/s
Iteration   6: 12879867.674 ops/s
Iteration   7: 12899214.150 ops/s
Iteration   8: 12919677.498 ops/s
Iteration   9: 12887233.746 ops/s
Iteration  10: 12926895.091 ops/s
Iteration  11: 12720713.967 ops/s
Iteration  12: 12886820.513 ops/s
Iteration  13: 12972799.752 ops/s
Iteration  14: 12886556.605 ops/s
Iteration  15: 12927100.174 ops/s
Iteration  16: 12999747.034 ops/s
Iteration  17: 12852531.037 ops/s
Iteration  18: 12898866.638 ops/s
Iteration  19: 12938609.730 ops/s
Iteration  20: 12891068.208 ops/s
Iteration  21: 12832911.248 ops/s
Iteration  22: 12859622.135 ops/s
Iteration  23: 12933065.532 ops/s
Iteration  24: 12955770.090 ops/s
Iteration  25: 12894612.718 ops/s
Iteration  26: 12937657.116 ops/s
Iteration  27: 13002218.170 ops/s
Iteration  28: 12876437.896 ops/s
Iteration  29: 12875321.295 ops/s
Iteration  30: 12912076.958 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex":
  12903572.662 ±(99.9%) 35223.731 ops/s [Average]
  (min, avg, max) = (12720713.967, 12903572.662, 13002218.170), stdev = 52721.227
  CI (99.9%): [12868348.930, 12938796.393] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex  thrpt   30  12903572.662 ± 35223.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55695224.535 ops/s
# Warmup Iteration   2: 107798395.771 ops/s
# Warmup Iteration   3: 97399855.441 ops/s
# Warmup Iteration   4: 113586216.353 ops/s
# Warmup Iteration   5: 113577960.003 ops/s
# Warmup Iteration   6: 113151382.225 ops/s
# Warmup Iteration   7: 113800220.350 ops/s
# Warmup Iteration   8: 113284309.242 ops/s
# Warmup Iteration   9: 113096285.413 ops/s
# Warmup Iteration  10: 112624912.145 ops/s
# Warmup Iteration  11: 113143782.531 ops/s
# Warmup Iteration  12: 113167049.041 ops/s
# Warmup Iteration  13: 113577469.765 ops/s
# Warmup Iteration  14: 114167214.087 ops/s
# Warmup Iteration  15: 113627201.382 ops/s
# Warmup Iteration  16: 113723109.660 ops/s
# Warmup Iteration  17: 113671099.012 ops/s
# Warmup Iteration  18: 114088418.715 ops/s
# Warmup Iteration  19: 114042401.943 ops/s
# Warmup Iteration  20: 112898011.695 ops/s
# Warmup Iteration  21: 114264507.011 ops/s
# Warmup Iteration  22: 114662297.344 ops/s
# Warmup Iteration  23: 114085794.369 ops/s
# Warmup Iteration  24: 113992343.678 ops/s
# Warmup Iteration  25: 114520672.058 ops/s
# Warmup Iteration  26: 114242358.957 ops/s
# Warmup Iteration  27: 114039583.978 ops/s
# Warmup Iteration  28: 114093797.081 ops/s
# Warmup Iteration  29: 114484670.288 ops/s
# Warmup Iteration  30: 114088766.183 ops/s
Iteration   1: 113854788.004 ops/s
Iteration   2: 113803705.697 ops/s
Iteration   3: 113929540.154 ops/s
Iteration   4: 113650048.515 ops/s
Iteration   5: 113902252.345 ops/s
Iteration   6: 109067524.166 ops/s
Iteration   7: 113650167.629 ops/s
Iteration   8: 113382800.575 ops/s
Iteration   9: 113738192.243 ops/s
Iteration  10: 112754580.341 ops/s
Iteration  11: 112737694.319 ops/s
Iteration  12: 114046010.585 ops/s
Iteration  13: 113483165.166 ops/s
Iteration  14: 114389279.313 ops/s
Iteration  15: 114173418.806 ops/s
Iteration  16: 113799023.215 ops/s
Iteration  17: 113484529.385 ops/s
Iteration  18: 113920944.082 ops/s
Iteration  19: 113169968.268 ops/s
Iteration  20: 113555642.900 ops/s
Iteration  21: 114319687.639 ops/s
Iteration  22: 114394341.676 ops/s
Iteration  23: 113936128.996 ops/s
Iteration  24: 114584225.859 ops/s
Iteration  25: 114209472.615 ops/s
Iteration  26: 113733303.782 ops/s
Iteration  27: 114623887.068 ops/s
Iteration  28: 113298993.119 ops/s
Iteration  29: 115032047.827 ops/s
Iteration  30: 114178825.124 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList":
  113693472.980 ±(99.9%) 676912.803 ops/s [Average]
  (min, avg, max) = (109067524.166, 113693472.980, 115032047.827), stdev = 1013171.293
  CI (99.9%): [113016560.178, 114370385.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt          Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_reverseForEachWithIndex_emptyList  thrpt   30  113693472.980 ± 676912.803  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34993471.974 ops/s
# Warmup Iteration   2: 66678935.232 ops/s
# Warmup Iteration   3: 59490762.687 ops/s
# Warmup Iteration   4: 67584450.206 ops/s
# Warmup Iteration   5: 68776897.139 ops/s
# Warmup Iteration   6: 69042712.059 ops/s
# Warmup Iteration   7: 68724267.148 ops/s
# Warmup Iteration   8: 68827844.689 ops/s
# Warmup Iteration   9: 68318280.524 ops/s
# Warmup Iteration  10: 68910150.831 ops/s
# Warmup Iteration  11: 68952068.710 ops/s
# Warmup Iteration  12: 68927757.103 ops/s
# Warmup Iteration  13: 68958398.044 ops/s
# Warmup Iteration  14: 68640072.398 ops/s
# Warmup Iteration  15: 68867723.329 ops/s
# Warmup Iteration  16: 68779040.578 ops/s
# Warmup Iteration  17: 68237172.210 ops/s
# Warmup Iteration  18: 68285910.918 ops/s
# Warmup Iteration  19: 68099929.030 ops/s
# Warmup Iteration  20: 68067178.474 ops/s
# Warmup Iteration  21: 68428064.886 ops/s
# Warmup Iteration  22: 68085391.747 ops/s
# Warmup Iteration  23: 68479309.516 ops/s
# Warmup Iteration  24: 68418702.533 ops/s
# Warmup Iteration  25: 68107539.790 ops/s
# Warmup Iteration  26: 68452177.130 ops/s
# Warmup Iteration  27: 68072875.095 ops/s
# Warmup Iteration  28: 67880924.407 ops/s
# Warmup Iteration  29: 68137994.089 ops/s
# Warmup Iteration  30: 67712280.293 ops/s
Iteration   1: 67997386.234 ops/s
Iteration   2: 68390419.484 ops/s
Iteration   3: 68465804.868 ops/s
Iteration   4: 68380286.169 ops/s
Iteration   5: 68098448.439 ops/s
Iteration   6: 68429706.407 ops/s
Iteration   7: 67642670.544 ops/s
Iteration   8: 68211239.276 ops/s
Iteration   9: 67917142.214 ops/s
Iteration  10: 67969568.581 ops/s
Iteration  11: 68102065.990 ops/s
Iteration  12: 68073489.042 ops/s
Iteration  13: 68029188.974 ops/s
Iteration  14: 68177701.570 ops/s
Iteration  15: 68504081.590 ops/s
Iteration  16: 68597932.809 ops/s
Iteration  17: 68827710.929 ops/s
Iteration  18: 67964707.451 ops/s
Iteration  19: 68106261.231 ops/s
Iteration  20: 68039507.616 ops/s
Iteration  21: 68658788.720 ops/s
Iteration  22: 68232145.030 ops/s
Iteration  23: 68686742.473 ops/s
Iteration  24: 68280797.280 ops/s
Iteration  25: 68520195.932 ops/s
Iteration  26: 68133874.681 ops/s
Iteration  27: 68294651.301 ops/s
Iteration  28: 68274605.737 ops/s
Iteration  29: 67904652.129 ops/s
Iteration  30: 68051876.448 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseForEach_emptyList":
  68232121.638 ±(99.9%) 181153.209 ops/s [Average]
  (min, avg, max) = (67642670.544, 68232121.638, 68827710.929), stdev = 271141.615
  CI (99.9%): [68050968.430, 68413274.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ArrayAdapterTest._Benchmark.benchmark_reverseForEach_emptyList  thrpt   30  68232121.638 ± 181153.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11265072.605 ops/s
# Warmup Iteration   2: 23100106.156 ops/s
# Warmup Iteration   3: 18628449.590 ops/s
# Warmup Iteration   4: 22103010.923 ops/s
# Warmup Iteration   5: 22220849.174 ops/s
# Warmup Iteration   6: 22059472.028 ops/s
# Warmup Iteration   7: 22128679.500 ops/s
# Warmup Iteration   8: 22085496.106 ops/s
# Warmup Iteration   9: 22120687.597 ops/s
# Warmup Iteration  10: 22085862.820 ops/s
# Warmup Iteration  11: 22112206.723 ops/s
# Warmup Iteration  12: 22194005.915 ops/s
# Warmup Iteration  13: 22079280.017 ops/s
# Warmup Iteration  14: 22134671.495 ops/s
# Warmup Iteration  15: 22138915.817 ops/s
# Warmup Iteration  16: 22097942.076 ops/s
# Warmup Iteration  17: 22136779.481 ops/s
# Warmup Iteration  18: 22133271.808 ops/s
# Warmup Iteration  19: 22154673.398 ops/s
# Warmup Iteration  20: 22131507.659 ops/s
# Warmup Iteration  21: 22005675.657 ops/s
# Warmup Iteration  22: 22078157.406 ops/s
# Warmup Iteration  23: 22036301.233 ops/s
# Warmup Iteration  24: 22056481.108 ops/s
# Warmup Iteration  25: 22133650.870 ops/s
# Warmup Iteration  26: 22135764.308 ops/s
# Warmup Iteration  27: 22128329.127 ops/s
# Warmup Iteration  28: 22113522.836 ops/s
# Warmup Iteration  29: 22098528.192 ops/s
# Warmup Iteration  30: 22174290.460 ops/s
Iteration   1: 22113802.164 ops/s
Iteration   2: 22081062.923 ops/s
Iteration   3: 22176734.083 ops/s
Iteration   4: 22081966.922 ops/s
Iteration   5: 22061903.180 ops/s
Iteration   6: 22049217.896 ops/s
Iteration   7: 22221561.784 ops/s
Iteration   8: 22009946.752 ops/s
Iteration   9: 22124713.282 ops/s
Iteration  10: 22089963.415 ops/s
Iteration  11: 22108636.727 ops/s
Iteration  12: 22153084.738 ops/s
Iteration  13: 22163393.195 ops/s
Iteration  14: 22121109.604 ops/s
Iteration  15: 22216084.024 ops/s
Iteration  16: 22086677.187 ops/s
Iteration  17: 22184454.944 ops/s
Iteration  18: 22165530.966 ops/s
Iteration  19: 22133627.566 ops/s
Iteration  20: 22168030.029 ops/s
Iteration  21: 22176374.694 ops/s
Iteration  22: 22071050.642 ops/s
Iteration  23: 22190883.232 ops/s
Iteration  24: 22106083.297 ops/s
Iteration  25: 22097197.726 ops/s
Iteration  26: 22013261.195 ops/s
Iteration  27: 22160955.687 ops/s
Iteration  28: 21916047.121 ops/s
Iteration  29: 22185090.551 ops/s
Iteration  30: 22226587.168 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_reverseThis":
  22121834.423 ±(99.9%) 46686.011 ops/s [Average]
  (min, avg, max) = (21916047.121, 22121834.423, 22226587.168), stdev = 69877.428
  CI (99.9%): [22075148.413, 22168520.434] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_reverseThis  thrpt   30  22121834.423 ± 46686.011  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1697011.787 ops/s
# Warmup Iteration   2: 3980184.692 ops/s
# Warmup Iteration   3: 3379078.276 ops/s
# Warmup Iteration   4: 3992291.050 ops/s
# Warmup Iteration   5: 4003517.528 ops/s
# Warmup Iteration   6: 3987989.967 ops/s
# Warmup Iteration   7: 3976189.989 ops/s
# Warmup Iteration   8: 3985822.169 ops/s
# Warmup Iteration   9: 3999800.417 ops/s
# Warmup Iteration  10: 3989724.940 ops/s
# Warmup Iteration  11: 3972254.332 ops/s
# Warmup Iteration  12: 3992615.329 ops/s
# Warmup Iteration  13: 3964304.725 ops/s
# Warmup Iteration  14: 3983187.801 ops/s
# Warmup Iteration  15: 3999789.703 ops/s
# Warmup Iteration  16: 4009928.912 ops/s
# Warmup Iteration  17: 3976436.394 ops/s
# Warmup Iteration  18: 3990826.447 ops/s
# Warmup Iteration  19: 3982724.664 ops/s
# Warmup Iteration  20: 3988125.188 ops/s
# Warmup Iteration  21: 3979795.165 ops/s
# Warmup Iteration  22: 4006777.924 ops/s
# Warmup Iteration  23: 3996453.637 ops/s
# Warmup Iteration  24: 3985279.667 ops/s
# Warmup Iteration  25: 3994001.503 ops/s
# Warmup Iteration  26: 4005648.100 ops/s
# Warmup Iteration  27: 3994077.220 ops/s
# Warmup Iteration  28: 3999715.363 ops/s
# Warmup Iteration  29: 3976348.218 ops/s
# Warmup Iteration  30: 3995273.850 ops/s
Iteration   1: 3977330.644 ops/s
Iteration   2: 3992873.378 ops/s
Iteration   3: 3990748.043 ops/s
Iteration   4: 3994706.987 ops/s
Iteration   5: 4023603.901 ops/s
Iteration   6: 3987819.667 ops/s
Iteration   7: 3995348.504 ops/s
Iteration   8: 3990055.812 ops/s
Iteration   9: 4006668.267 ops/s
Iteration  10: 4004461.585 ops/s
Iteration  11: 4001587.797 ops/s
Iteration  12: 4006579.207 ops/s
Iteration  13: 3990385.367 ops/s
Iteration  14: 3997886.173 ops/s
Iteration  15: 3988680.844 ops/s
Iteration  16: 3994925.080 ops/s
Iteration  17: 4008647.937 ops/s
Iteration  18: 3993348.570 ops/s
Iteration  19: 3997231.816 ops/s
Iteration  20: 3998838.928 ops/s
Iteration  21: 4010744.635 ops/s
Iteration  22: 3929271.087 ops/s
Iteration  23: 4009429.296 ops/s
Iteration  24: 3986216.235 ops/s
Iteration  25: 4009835.579 ops/s
Iteration  26: 4002272.055 ops/s
Iteration  27: 3991483.590 ops/s
Iteration  28: 3999891.873 ops/s
Iteration  29: 3989275.504 ops/s
Iteration  30: 4006539.764 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_select":
  3995889.604 ±(99.9%) 10538.724 ops/s [Average]
  (min, avg, max) = (3929271.087, 3995889.604, 4023603.901), stdev = 15773.867
  CI (99.9%): [3985350.881, 4006428.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_select  thrpt   30  3995889.604 ± 10538.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3909832.378 ops/s
# Warmup Iteration   2: 6911183.887 ops/s
# Warmup Iteration   3: 8222217.299 ops/s
# Warmup Iteration   4: 8199931.449 ops/s
# Warmup Iteration   5: 8301533.302 ops/s
# Warmup Iteration   6: 8166428.753 ops/s
# Warmup Iteration   7: 8189821.212 ops/s
# Warmup Iteration   8: 8224062.001 ops/s
# Warmup Iteration   9: 8274410.926 ops/s
# Warmup Iteration  10: 8324370.421 ops/s
# Warmup Iteration  11: 8317839.865 ops/s
# Warmup Iteration  12: 8298979.419 ops/s
# Warmup Iteration  13: 8320165.145 ops/s
# Warmup Iteration  14: 8343981.976 ops/s
# Warmup Iteration  15: 8395111.310 ops/s
# Warmup Iteration  16: 8354038.644 ops/s
# Warmup Iteration  17: 8271946.859 ops/s
# Warmup Iteration  18: 8300780.537 ops/s
# Warmup Iteration  19: 8322052.110 ops/s
# Warmup Iteration  20: 8295673.400 ops/s
# Warmup Iteration  21: 8265956.268 ops/s
# Warmup Iteration  22: 8256570.652 ops/s
# Warmup Iteration  23: 8303782.547 ops/s
# Warmup Iteration  24: 8260643.911 ops/s
# Warmup Iteration  25: 8247696.847 ops/s
# Warmup Iteration  26: 8301777.663 ops/s
# Warmup Iteration  27: 8260373.796 ops/s
# Warmup Iteration  28: 8343774.417 ops/s
# Warmup Iteration  29: 8343529.679 ops/s
# Warmup Iteration  30: 8355922.665 ops/s
Iteration   1: 8338202.365 ops/s
Iteration   2: 8328779.701 ops/s
Iteration   3: 8191102.993 ops/s
Iteration   4: 8268374.557 ops/s
Iteration   5: 8313265.553 ops/s
Iteration   6: 8323055.138 ops/s
Iteration   7: 8330729.803 ops/s
Iteration   8: 8291835.433 ops/s
Iteration   9: 8431540.807 ops/s
Iteration  10: 8396917.566 ops/s
Iteration  11: 8397993.840 ops/s
Iteration  12: 8261707.823 ops/s
Iteration  13: 8338787.509 ops/s
Iteration  14: 8311397.814 ops/s
Iteration  15: 8326732.389 ops/s
Iteration  16: 8375696.277 ops/s
Iteration  17: 8342743.450 ops/s
Iteration  18: 8301804.786 ops/s
Iteration  19: 8355061.709 ops/s
Iteration  20: 8356443.295 ops/s
Iteration  21: 8334159.455 ops/s
Iteration  22: 8350467.501 ops/s
Iteration  23: 8257414.564 ops/s
Iteration  24: 8323816.478 ops/s
Iteration  25: 8357826.121 ops/s
Iteration  26: 8288413.406 ops/s
Iteration  27: 8322130.514 ops/s
Iteration  28: 8351299.694 ops/s
Iteration  29: 8319481.887 ops/s
Iteration  30: 8349331.110 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectAndRejectWith":
  8327883.785 ±(99.9%) 31125.069 ops/s [Average]
  (min, avg, max) = (8191102.993, 8327883.785, 8431540.807), stdev = 46586.541
  CI (99.9%): [8296758.716, 8359008.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  8327883.785 ± 31125.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 421469.814 ops/s
# Warmup Iteration   2: 775657.959 ops/s
# Warmup Iteration   3: 891738.058 ops/s
# Warmup Iteration   4: 895085.518 ops/s
# Warmup Iteration   5: 894723.517 ops/s
# Warmup Iteration   6: 738465.492 ops/s
# Warmup Iteration   7: 891398.901 ops/s
# Warmup Iteration   8: 894686.548 ops/s
# Warmup Iteration   9: 896715.790 ops/s
# Warmup Iteration  10: 897214.538 ops/s
# Warmup Iteration  11: 895495.537 ops/s
# Warmup Iteration  12: 894779.546 ops/s
# Warmup Iteration  13: 894551.841 ops/s
# Warmup Iteration  14: 895111.212 ops/s
# Warmup Iteration  15: 897054.127 ops/s
# Warmup Iteration  16: 898908.460 ops/s
# Warmup Iteration  17: 894651.429 ops/s
# Warmup Iteration  18: 899248.534 ops/s
# Warmup Iteration  19: 896508.982 ops/s
# Warmup Iteration  20: 896092.323 ops/s
# Warmup Iteration  21: 897324.401 ops/s
# Warmup Iteration  22: 896134.163 ops/s
# Warmup Iteration  23: 897617.760 ops/s
# Warmup Iteration  24: 895391.320 ops/s
# Warmup Iteration  25: 895940.071 ops/s
# Warmup Iteration  26: 898996.429 ops/s
# Warmup Iteration  27: 900150.958 ops/s
# Warmup Iteration  28: 895548.332 ops/s
# Warmup Iteration  29: 897850.895 ops/s
# Warmup Iteration  30: 900967.014 ops/s
Iteration   1: 889817.885 ops/s
Iteration   2: 900206.166 ops/s
Iteration   3: 890785.325 ops/s
Iteration   4: 897976.297 ops/s
Iteration   5: 892329.700 ops/s
Iteration   6: 896192.131 ops/s
Iteration   7: 897383.630 ops/s
Iteration   8: 898118.492 ops/s
Iteration   9: 896337.436 ops/s
Iteration  10: 895243.432 ops/s
Iteration  11: 897672.608 ops/s
Iteration  12: 895911.691 ops/s
Iteration  13: 897425.106 ops/s
Iteration  14: 895778.216 ops/s
Iteration  15: 894758.495 ops/s
Iteration  16: 898932.912 ops/s
Iteration  17: 897104.688 ops/s
Iteration  18: 898839.618 ops/s
Iteration  19: 901702.338 ops/s
Iteration  20: 895334.127 ops/s
Iteration  21: 896585.149 ops/s
Iteration  22: 899234.992 ops/s
Iteration  23: 902133.853 ops/s
Iteration  24: 904994.520 ops/s
Iteration  25: 894241.368 ops/s
Iteration  26: 897781.343 ops/s
Iteration  27: 897830.273 ops/s
Iteration  28: 896631.001 ops/s
Iteration  29: 899751.604 ops/s
Iteration  30: 896350.145 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectInstancesOf":
  897112.818 ±(99.9%) 2080.721 ops/s [Average]
  (min, avg, max) = (889817.885, 897112.818, 904994.520), stdev = 3114.326
  CI (99.9%): [895032.097, 899193.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  897112.818 ± 2080.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410873.443 ops/s
# Warmup Iteration   2: 1043735.537 ops/s
# Warmup Iteration   3: 1057462.291 ops/s
# Warmup Iteration   4: 884942.308 ops/s
# Warmup Iteration   5: 1055067.714 ops/s
# Warmup Iteration   6: 1057652.451 ops/s
# Warmup Iteration   7: 1056953.270 ops/s
# Warmup Iteration   8: 1053700.432 ops/s
# Warmup Iteration   9: 1055578.388 ops/s
# Warmup Iteration  10: 1060978.240 ops/s
# Warmup Iteration  11: 1050421.838 ops/s
# Warmup Iteration  12: 1053745.485 ops/s
# Warmup Iteration  13: 1055307.449 ops/s
# Warmup Iteration  14: 1054885.678 ops/s
# Warmup Iteration  15: 1060652.166 ops/s
# Warmup Iteration  16: 1062588.018 ops/s
# Warmup Iteration  17: 1061927.806 ops/s
# Warmup Iteration  18: 1054728.621 ops/s
# Warmup Iteration  19: 1057264.285 ops/s
# Warmup Iteration  20: 1056798.777 ops/s
# Warmup Iteration  21: 1057413.954 ops/s
# Warmup Iteration  22: 1058093.885 ops/s
# Warmup Iteration  23: 1056290.691 ops/s
# Warmup Iteration  24: 1057793.948 ops/s
# Warmup Iteration  25: 1056052.212 ops/s
# Warmup Iteration  26: 1057671.816 ops/s
# Warmup Iteration  27: 1055995.840 ops/s
# Warmup Iteration  28: 1059809.607 ops/s
# Warmup Iteration  29: 1061185.188 ops/s
# Warmup Iteration  30: 1057897.883 ops/s
Iteration   1: 1056128.865 ops/s
Iteration   2: 1060519.128 ops/s
Iteration   3: 1058185.649 ops/s
Iteration   4: 1058210.558 ops/s
Iteration   5: 1057737.859 ops/s
Iteration   6: 1053545.513 ops/s
Iteration   7: 1058254.828 ops/s
Iteration   8: 1060747.107 ops/s
Iteration   9: 1059334.824 ops/s
Iteration  10: 1059701.448 ops/s
Iteration  11: 1053372.556 ops/s
Iteration  12: 1049053.610 ops/s
Iteration  13: 1060365.358 ops/s
Iteration  14: 1058461.879 ops/s
Iteration  15: 1062020.435 ops/s
Iteration  16: 1058803.220 ops/s
Iteration  17: 1055846.173 ops/s
Iteration  18: 1054032.242 ops/s
Iteration  19: 1058318.084 ops/s
Iteration  20: 1056364.684 ops/s
Iteration  21: 1057984.466 ops/s
Iteration  22: 1058937.033 ops/s
Iteration  23: 1053630.609 ops/s
Iteration  24: 1056415.482 ops/s
Iteration  25: 1060840.072 ops/s
Iteration  26: 1056482.351 ops/s
Iteration  27: 1059323.090 ops/s
Iteration  28: 1062164.291 ops/s
Iteration  29: 1063905.651 ops/s
Iteration  30: 1057970.136 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith":
  1057888.573 ±(99.9%) 2060.376 ops/s [Average]
  (min, avg, max) = (1049053.610, 1057888.573, 1063905.651), stdev = 3083.874
  CI (99.9%): [1055828.197, 1059948.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectWith  thrpt   30  1057888.573 ± 2060.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3658590.162 ops/s
# Warmup Iteration   2: 10482897.902 ops/s
# Warmup Iteration   3: 8829616.217 ops/s
# Warmup Iteration   4: 10465512.900 ops/s
# Warmup Iteration   5: 10473420.568 ops/s
# Warmup Iteration   6: 10463044.190 ops/s
# Warmup Iteration   7: 10426787.957 ops/s
# Warmup Iteration   8: 10482153.769 ops/s
# Warmup Iteration   9: 10473254.964 ops/s
# Warmup Iteration  10: 10414124.471 ops/s
# Warmup Iteration  11: 10480342.239 ops/s
# Warmup Iteration  12: 10477309.492 ops/s
# Warmup Iteration  13: 10440403.437 ops/s
# Warmup Iteration  14: 10429584.108 ops/s
# Warmup Iteration  15: 10442166.555 ops/s
# Warmup Iteration  16: 10469819.791 ops/s
# Warmup Iteration  17: 10470113.808 ops/s
# Warmup Iteration  18: 10435279.947 ops/s
# Warmup Iteration  19: 10532923.442 ops/s
# Warmup Iteration  20: 10525857.301 ops/s
# Warmup Iteration  21: 10495836.815 ops/s
# Warmup Iteration  22: 10454671.113 ops/s
# Warmup Iteration  23: 10530578.786 ops/s
# Warmup Iteration  24: 10475471.213 ops/s
# Warmup Iteration  25: 10373028.901 ops/s
# Warmup Iteration  26: 10461472.642 ops/s
# Warmup Iteration  27: 10475932.918 ops/s
# Warmup Iteration  28: 10482471.810 ops/s
# Warmup Iteration  29: 10510106.412 ops/s
# Warmup Iteration  30: 10451278.279 ops/s
Iteration   1: 10453768.777 ops/s
Iteration   2: 10502242.678 ops/s
Iteration   3: 10476414.238 ops/s
Iteration   4: 10482060.585 ops/s
Iteration   5: 10411628.106 ops/s
Iteration   6: 10496903.939 ops/s
Iteration   7: 10482152.651 ops/s
Iteration   8: 10481627.189 ops/s
Iteration   9: 10460287.888 ops/s
Iteration  10: 10450974.798 ops/s
Iteration  11: 10520243.986 ops/s
Iteration  12: 10497501.316 ops/s
Iteration  13: 10469347.405 ops/s
Iteration  14: 10530041.051 ops/s
Iteration  15: 10412286.208 ops/s
Iteration  16: 10270368.708 ops/s
Iteration  17: 10546995.848 ops/s
Iteration  18: 10444385.285 ops/s
Iteration  19: 10479522.664 ops/s
Iteration  20: 10474478.768 ops/s
Iteration  21: 10464594.491 ops/s
Iteration  22: 10478513.191 ops/s
Iteration  23: 10497151.802 ops/s
Iteration  24: 10473035.517 ops/s
Iteration  25: 10476028.713 ops/s
Iteration  26: 10549984.096 ops/s
Iteration  27: 10487189.425 ops/s
Iteration  28: 10451391.126 ops/s
Iteration  29: 10499480.635 ops/s
Iteration  30: 10494685.111 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndex":
  10473842.873 ±(99.9%) 33309.648 ops/s [Average]
  (min, avg, max) = (10270368.708, 10473842.873, 10549984.096), stdev = 49856.317
  CI (99.9%): [10440533.225, 10507152.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectWithIndex  thrpt   30  10473842.873 ± 33309.648  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2019257.291 ops/s
# Warmup Iteration   2: 5087601.196 ops/s
# Warmup Iteration   3: 5041658.270 ops/s
# Warmup Iteration   4: 4158484.634 ops/s
# Warmup Iteration   5: 5045470.687 ops/s
# Warmup Iteration   6: 5060042.674 ops/s
# Warmup Iteration   7: 5037407.168 ops/s
# Warmup Iteration   8: 5022879.372 ops/s
# Warmup Iteration   9: 5018297.352 ops/s
# Warmup Iteration  10: 5036091.423 ops/s
# Warmup Iteration  11: 5046520.207 ops/s
# Warmup Iteration  12: 5030011.827 ops/s
# Warmup Iteration  13: 4975920.163 ops/s
# Warmup Iteration  14: 5030791.975 ops/s
# Warmup Iteration  15: 5032731.960 ops/s
# Warmup Iteration  16: 5007415.314 ops/s
# Warmup Iteration  17: 5022442.575 ops/s
# Warmup Iteration  18: 5042191.445 ops/s
# Warmup Iteration  19: 5041331.602 ops/s
# Warmup Iteration  20: 5043964.458 ops/s
# Warmup Iteration  21: 5002391.062 ops/s
# Warmup Iteration  22: 5050560.379 ops/s
# Warmup Iteration  23: 5031282.323 ops/s
# Warmup Iteration  24: 5042789.738 ops/s
# Warmup Iteration  25: 5048996.930 ops/s
# Warmup Iteration  26: 5046998.397 ops/s
# Warmup Iteration  27: 5037155.340 ops/s
# Warmup Iteration  28: 5034914.288 ops/s
# Warmup Iteration  29: 5047128.013 ops/s
# Warmup Iteration  30: 5043282.584 ops/s
Iteration   1: 5035834.717 ops/s
Iteration   2: 5052016.547 ops/s
Iteration   3: 5025003.406 ops/s
Iteration   4: 5030771.531 ops/s
Iteration   5: 5035398.793 ops/s
Iteration   6: 5044446.057 ops/s
Iteration   7: 5040865.465 ops/s
Iteration   8: 5056273.120 ops/s
Iteration   9: 5026365.068 ops/s
Iteration  10: 5054915.385 ops/s
Iteration  11: 5008695.905 ops/s
Iteration  12: 5041700.750 ops/s
Iteration  13: 5046208.022 ops/s
Iteration  14: 5065805.297 ops/s
Iteration  15: 5018614.020 ops/s
Iteration  16: 5040747.697 ops/s
Iteration  17: 5073744.771 ops/s
Iteration  18: 5048293.634 ops/s
Iteration  19: 5056165.283 ops/s
Iteration  20: 5078747.730 ops/s
Iteration  21: 5045547.747 ops/s
Iteration  22: 5046211.986 ops/s
Iteration  23: 5033606.726 ops/s
Iteration  24: 5066286.255 ops/s
Iteration  25: 5047371.295 ops/s
Iteration  26: 5062595.241 ops/s
Iteration  27: 5051180.941 ops/s
Iteration  28: 5047118.093 ops/s
Iteration  29: 5077845.185 ops/s
Iteration  30: 5051239.963 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget":
  5046987.221 ±(99.9%) 11053.546 ops/s [Average]
  (min, avg, max) = (5008695.905, 5046987.221, 5078747.730), stdev = 16544.429
  CI (99.9%): [5035933.675, 5058040.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectWithIndexWithTarget  thrpt   30  5046987.221 ± 11053.546  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 531885.163 ops/s
# Warmup Iteration   2: 1295121.659 ops/s
# Warmup Iteration   3: 1370464.112 ops/s
# Warmup Iteration   4: 1142714.210 ops/s
# Warmup Iteration   5: 1372014.402 ops/s
# Warmup Iteration   6: 1373491.075 ops/s
# Warmup Iteration   7: 1377955.464 ops/s
# Warmup Iteration   8: 1381816.919 ops/s
# Warmup Iteration   9: 1381114.689 ops/s
# Warmup Iteration  10: 1372576.242 ops/s
# Warmup Iteration  11: 1371936.109 ops/s
# Warmup Iteration  12: 1371353.662 ops/s
# Warmup Iteration  13: 1383511.134 ops/s
# Warmup Iteration  14: 1382276.061 ops/s
# Warmup Iteration  15: 1379108.489 ops/s
# Warmup Iteration  16: 1374777.419 ops/s
# Warmup Iteration  17: 1375203.129 ops/s
# Warmup Iteration  18: 1377354.177 ops/s
# Warmup Iteration  19: 1378412.386 ops/s
# Warmup Iteration  20: 1378506.035 ops/s
# Warmup Iteration  21: 1376175.928 ops/s
# Warmup Iteration  22: 1374285.775 ops/s
# Warmup Iteration  23: 1378578.047 ops/s
# Warmup Iteration  24: 1375390.559 ops/s
# Warmup Iteration  25: 1373929.031 ops/s
# Warmup Iteration  26: 1381281.778 ops/s
# Warmup Iteration  27: 1373439.830 ops/s
# Warmup Iteration  28: 1376269.435 ops/s
# Warmup Iteration  29: 1372280.734 ops/s
# Warmup Iteration  30: 1373211.962 ops/s
Iteration   1: 1372787.127 ops/s
Iteration   2: 1362925.540 ops/s
Iteration   3: 1371859.359 ops/s
Iteration   4: 1374067.456 ops/s
Iteration   5: 1378783.342 ops/s
Iteration   6: 1378292.363 ops/s
Iteration   7: 1379550.148 ops/s
Iteration   8: 1373048.630 ops/s
Iteration   9: 1372282.190 ops/s
Iteration  10: 1376472.394 ops/s
Iteration  11: 1370054.979 ops/s
Iteration  12: 1376751.398 ops/s
Iteration  13: 1379187.582 ops/s
Iteration  14: 1366105.283 ops/s
Iteration  15: 1370920.158 ops/s
Iteration  16: 1366854.125 ops/s
Iteration  17: 1377695.904 ops/s
Iteration  18: 1372690.662 ops/s
Iteration  19: 1377060.546 ops/s
Iteration  20: 1378666.883 ops/s
Iteration  21: 1376091.279 ops/s
Iteration  22: 1375175.363 ops/s
Iteration  23: 1372640.135 ops/s
Iteration  24: 1364548.507 ops/s
Iteration  25: 1378224.528 ops/s
Iteration  26: 1378785.063 ops/s
Iteration  27: 1370529.523 ops/s
Iteration  28: 1377162.262 ops/s
Iteration  29: 1379523.804 ops/s
Iteration  30: 1382707.243 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_selectWith_target":
  1374381.459 ±(99.9%) 3263.430 ops/s [Average]
  (min, avg, max) = (1362925.540, 1374381.459, 1382707.243), stdev = 4884.548
  CI (99.9%): [1371118.030, 1377644.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_selectWith_target  thrpt   30  1374381.459 ± 3263.430  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28029.921 ops/s
# Warmup Iteration   2: 38144.085 ops/s
# Warmup Iteration   3: 54372.736 ops/s
# Warmup Iteration   4: 54423.960 ops/s
# Warmup Iteration   5: 54862.547 ops/s
# Warmup Iteration   6: 54524.919 ops/s
# Warmup Iteration   7: 54621.656 ops/s
# Warmup Iteration   8: 54786.901 ops/s
# Warmup Iteration   9: 46499.178 ops/s
# Warmup Iteration  10: 54760.655 ops/s
# Warmup Iteration  11: 54649.431 ops/s
# Warmup Iteration  12: 54550.015 ops/s
# Warmup Iteration  13: 54886.391 ops/s
# Warmup Iteration  14: 54893.597 ops/s
# Warmup Iteration  15: 54621.082 ops/s
# Warmup Iteration  16: 54712.795 ops/s
# Warmup Iteration  17: 55053.163 ops/s
# Warmup Iteration  18: 54840.739 ops/s
# Warmup Iteration  19: 54724.602 ops/s
# Warmup Iteration  20: 54783.738 ops/s
# Warmup Iteration  21: 54966.884 ops/s
# Warmup Iteration  22: 54302.118 ops/s
# Warmup Iteration  23: 54660.007 ops/s
# Warmup Iteration  24: 54723.915 ops/s
# Warmup Iteration  25: 54890.747 ops/s
# Warmup Iteration  26: 55028.532 ops/s
# Warmup Iteration  27: 54780.469 ops/s
# Warmup Iteration  28: 54840.992 ops/s
# Warmup Iteration  29: 54855.083 ops/s
# Warmup Iteration  30: 54509.274 ops/s
Iteration   1: 54727.249 ops/s
Iteration   2: 54860.059 ops/s
Iteration   3: 55059.040 ops/s
Iteration   4: 53809.790 ops/s
Iteration   5: 54711.910 ops/s
Iteration   6: 54744.255 ops/s
Iteration   7: 54708.592 ops/s
Iteration   8: 54902.131 ops/s
Iteration   9: 54944.575 ops/s
Iteration  10: 54847.659 ops/s
Iteration  11: 54125.732 ops/s
Iteration  12: 54607.465 ops/s
Iteration  13: 55106.989 ops/s
Iteration  14: 54845.522 ops/s
Iteration  15: 53757.713 ops/s
Iteration  16: 54607.617 ops/s
Iteration  17: 54636.376 ops/s
Iteration  18: 54679.933 ops/s
Iteration  19: 54681.393 ops/s
Iteration  20: 54458.761 ops/s
Iteration  21: 54278.907 ops/s
Iteration  22: 54691.117 ops/s
Iteration  23: 54655.866 ops/s
Iteration  24: 54899.998 ops/s
Iteration  25: 54638.490 ops/s
Iteration  26: 54652.303 ops/s
Iteration  27: 54694.759 ops/s
Iteration  28: 54325.966 ops/s
Iteration  29: 54644.022 ops/s
Iteration  30: 54730.389 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_serialization":
  54634.486 ±(99.9%) 207.513 ops/s [Average]
  (min, avg, max) = (53757.713, 54634.486, 55106.989), stdev = 310.595
  CI (99.9%): [54426.973, 54841.999] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_serialization  thrpt   30  54634.486 ± 207.513  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_set$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_set

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11611017.044 ops/s
# Warmup Iteration   2: 24265444.084 ops/s
# Warmup Iteration   3: 21099386.848 ops/s
# Warmup Iteration   4: 24852485.105 ops/s
# Warmup Iteration   5: 24832030.619 ops/s
# Warmup Iteration   6: 24932594.739 ops/s
# Warmup Iteration   7: 25038627.205 ops/s
# Warmup Iteration   8: 24946696.080 ops/s
# Warmup Iteration   9: 24753667.609 ops/s
# Warmup Iteration  10: 24888846.408 ops/s
# Warmup Iteration  11: 24847281.546 ops/s
# Warmup Iteration  12: 24883517.188 ops/s
# Warmup Iteration  13: 24887685.269 ops/s
# Warmup Iteration  14: 24760245.351 ops/s
# Warmup Iteration  15: 24927668.052 ops/s
# Warmup Iteration  16: 24944806.760 ops/s
# Warmup Iteration  17: 24908911.185 ops/s
# Warmup Iteration  18: 24773968.733 ops/s
# Warmup Iteration  19: 24719834.731 ops/s
# Warmup Iteration  20: 24732016.952 ops/s
# Warmup Iteration  21: 24768878.086 ops/s
# Warmup Iteration  22: 24828205.875 ops/s
# Warmup Iteration  23: 24784280.486 ops/s
# Warmup Iteration  24: 24934574.194 ops/s
# Warmup Iteration  25: 24771680.361 ops/s
# Warmup Iteration  26: 24738270.281 ops/s
# Warmup Iteration  27: 24892461.225 ops/s
# Warmup Iteration  28: 24918431.439 ops/s
# Warmup Iteration  29: 24841626.893 ops/s
# Warmup Iteration  30: 24846263.390 ops/s
Iteration   1: 24949374.099 ops/s
Iteration   2: 24915180.969 ops/s
Iteration   3: 24908656.892 ops/s
Iteration   4: 24896281.757 ops/s
Iteration   5: 24787872.166 ops/s
Iteration   6: 24813247.922 ops/s
Iteration   7: 24650280.782 ops/s
Iteration   8: 24954911.091 ops/s
Iteration   9: 24973694.435 ops/s
Iteration  10: 24746004.320 ops/s
Iteration  11: 24992152.643 ops/s
Iteration  12: 24749979.448 ops/s
Iteration  13: 24552692.839 ops/s
Iteration  14: 25094274.441 ops/s
Iteration  15: 24866063.514 ops/s
Iteration  16: 24721539.084 ops/s
Iteration  17: 24914406.655 ops/s
Iteration  18: 24797865.540 ops/s
Iteration  19: 24771037.634 ops/s
Iteration  20: 24713295.759 ops/s
Iteration  21: 24782910.957 ops/s
Iteration  22: 24662950.455 ops/s
Iteration  23: 24794173.219 ops/s
Iteration  24: 24866954.955 ops/s
Iteration  25: 25030218.110 ops/s
Iteration  26: 24938677.232 ops/s
Iteration  27: 24745775.009 ops/s
Iteration  28: 24850324.830 ops/s
Iteration  29: 24965779.631 ops/s
Iteration  30: 24947155.047 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_set":
  24845124.381 ±(99.9%) 82759.906 ops/s [Average]
  (min, avg, max) = (24552692.839, 24845124.381, 25094274.441), stdev = 123871.141
  CI (99.9%): [24762364.475, 24927884.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_set  thrpt   30  24845124.381 ± 82759.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8264022.003 ops/s
# Warmup Iteration   2: 18742780.361 ops/s
# Warmup Iteration   3: 18441888.534 ops/s
# Warmup Iteration   4: 15055429.988 ops/s
# Warmup Iteration   5: 18042697.791 ops/s
# Warmup Iteration   6: 17975601.228 ops/s
# Warmup Iteration   7: 17973558.229 ops/s
# Warmup Iteration   8: 17983209.432 ops/s
# Warmup Iteration   9: 17924085.900 ops/s
# Warmup Iteration  10: 17984414.203 ops/s
# Warmup Iteration  11: 17931046.161 ops/s
# Warmup Iteration  12: 17963894.126 ops/s
# Warmup Iteration  13: 17896334.829 ops/s
# Warmup Iteration  14: 18026828.842 ops/s
# Warmup Iteration  15: 17654116.801 ops/s
# Warmup Iteration  16: 18056644.572 ops/s
# Warmup Iteration  17: 18337215.154 ops/s
# Warmup Iteration  18: 18352219.552 ops/s
# Warmup Iteration  19: 18386362.591 ops/s
# Warmup Iteration  20: 18287210.007 ops/s
# Warmup Iteration  21: 18282047.734 ops/s
# Warmup Iteration  22: 18350832.739 ops/s
# Warmup Iteration  23: 18308913.762 ops/s
# Warmup Iteration  24: 18315599.316 ops/s
# Warmup Iteration  25: 18148463.882 ops/s
# Warmup Iteration  26: 18237274.888 ops/s
# Warmup Iteration  27: 18206931.158 ops/s
# Warmup Iteration  28: 18377100.617 ops/s
# Warmup Iteration  29: 18233951.537 ops/s
# Warmup Iteration  30: 18239518.318 ops/s
Iteration   1: 18439674.509 ops/s
Iteration   2: 18388447.893 ops/s
Iteration   3: 18488791.838 ops/s
Iteration   4: 18480967.153 ops/s
Iteration   5: 18431089.236 ops/s
Iteration   6: 18346546.189 ops/s
Iteration   7: 18442293.362 ops/s
Iteration   8: 18498925.908 ops/s
Iteration   9: 18471974.985 ops/s
Iteration  10: 18320960.978 ops/s
Iteration  11: 18169162.122 ops/s
Iteration  12: 18194020.009 ops/s
Iteration  13: 18198460.173 ops/s
Iteration  14: 18352597.454 ops/s
Iteration  15: 18442233.427 ops/s
Iteration  16: 18351367.526 ops/s
Iteration  17: 18281392.684 ops/s
Iteration  18: 18363109.254 ops/s
Iteration  19: 18330512.980 ops/s
Iteration  20: 18221678.568 ops/s
Iteration  21: 18229811.706 ops/s
Iteration  22: 18266474.770 ops/s
Iteration  23: 18305746.366 ops/s
Iteration  24: 18281874.626 ops/s
Iteration  25: 18154331.880 ops/s
Iteration  26: 18279585.433 ops/s
Iteration  27: 18147519.312 ops/s
Iteration  28: 18318515.503 ops/s
Iteration  29: 18308739.925 ops/s
Iteration  30: 18263721.365 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sort":
  18325684.238 ±(99.9%) 69503.413 ops/s [Average]
  (min, avg, max) = (18147519.312, 18325684.238, 18498925.908), stdev = 104029.445
  CI (99.9%): [18256180.825, 18395187.651] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sort  thrpt   30  18325684.238 ± 69503.413  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1736143.086 ops/s
# Warmup Iteration   2: 1853329.027 ops/s
# Warmup Iteration   3: 1927636.328 ops/s
# Warmup Iteration   4: 2266116.736 ops/s
# Warmup Iteration   5: 2280450.202 ops/s
# Warmup Iteration   6: 2274122.503 ops/s
# Warmup Iteration   7: 2288060.701 ops/s
# Warmup Iteration   8: 2281997.543 ops/s
# Warmup Iteration   9: 2292737.604 ops/s
# Warmup Iteration  10: 2282068.819 ops/s
# Warmup Iteration  11: 2296353.104 ops/s
# Warmup Iteration  12: 2286345.819 ops/s
# Warmup Iteration  13: 2278979.946 ops/s
# Warmup Iteration  14: 2283064.491 ops/s
# Warmup Iteration  15: 2288741.080 ops/s
# Warmup Iteration  16: 2298819.179 ops/s
# Warmup Iteration  17: 2203148.729 ops/s
# Warmup Iteration  18: 1978919.496 ops/s
# Warmup Iteration  19: 2294063.157 ops/s
# Warmup Iteration  20: 2288514.913 ops/s
# Warmup Iteration  21: 2297963.121 ops/s
# Warmup Iteration  22: 2298533.896 ops/s
# Warmup Iteration  23: 2294866.942 ops/s
# Warmup Iteration  24: 2290533.538 ops/s
# Warmup Iteration  25: 2290115.224 ops/s
# Warmup Iteration  26: 2292384.207 ops/s
# Warmup Iteration  27: 2288121.503 ops/s
# Warmup Iteration  28: 2283399.562 ops/s
# Warmup Iteration  29: 2283365.049 ops/s
# Warmup Iteration  30: 2288884.420 ops/s
Iteration   1: 2282771.636 ops/s
Iteration   2: 2286792.564 ops/s
Iteration   3: 2283034.693 ops/s
Iteration   4: 2290776.835 ops/s
Iteration   5: 2293893.432 ops/s
Iteration   6: 2300337.781 ops/s
Iteration   7: 2283296.464 ops/s
Iteration   8: 2286818.446 ops/s
Iteration   9: 2282469.670 ops/s
Iteration  10: 2294696.125 ops/s
Iteration  11: 2295932.518 ops/s
Iteration  12: 2299165.201 ops/s
Iteration  13: 2286482.185 ops/s
Iteration  14: 2284227.929 ops/s
Iteration  15: 2277999.408 ops/s
Iteration  16: 2282907.386 ops/s
Iteration  17: 2290500.292 ops/s
Iteration  18: 2295703.522 ops/s
Iteration  19: 2292201.607 ops/s
Iteration  20: 2298826.213 ops/s
Iteration  21: 2293881.886 ops/s
Iteration  22: 2297933.498 ops/s
Iteration  23: 2310935.507 ops/s
Iteration  24: 2282047.925 ops/s
Iteration  25: 2295777.030 ops/s
Iteration  26: 2282199.534 ops/s
Iteration  27: 2291178.332 ops/s
Iteration  28: 2297068.276 ops/s
Iteration  29: 2284606.186 ops/s
Iteration  30: 2301225.221 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis":
  2290856.243 ±(99.9%) 5116.034 ops/s [Average]
  (min, avg, max) = (2277999.408, 2290856.243, 2310935.507), stdev = 7657.439
  CI (99.9%): [2285740.210, 2295972.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis  thrpt   30  2290856.243 ± 5116.034  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 426591.126 ops/s
# Warmup Iteration   2: 505981.330 ops/s
# Warmup Iteration   3: 752100.333 ops/s
# Warmup Iteration   4: 746460.709 ops/s
# Warmup Iteration   5: 753712.226 ops/s
# Warmup Iteration   6: 749721.403 ops/s
# Warmup Iteration   7: 750598.637 ops/s
# Warmup Iteration   8: 747119.510 ops/s
# Warmup Iteration   9: 576223.679 ops/s
# Warmup Iteration  10: 751609.086 ops/s
# Warmup Iteration  11: 747899.751 ops/s
# Warmup Iteration  12: 752562.667 ops/s
# Warmup Iteration  13: 749099.081 ops/s
# Warmup Iteration  14: 748458.874 ops/s
# Warmup Iteration  15: 749798.563 ops/s
# Warmup Iteration  16: 751327.730 ops/s
# Warmup Iteration  17: 743608.384 ops/s
# Warmup Iteration  18: 748676.802 ops/s
# Warmup Iteration  19: 746603.828 ops/s
# Warmup Iteration  20: 747128.054 ops/s
# Warmup Iteration  21: 743416.523 ops/s
# Warmup Iteration  22: 747701.144 ops/s
# Warmup Iteration  23: 743500.319 ops/s
# Warmup Iteration  24: 747958.794 ops/s
# Warmup Iteration  25: 748051.982 ops/s
# Warmup Iteration  26: 746075.377 ops/s
# Warmup Iteration  27: 747268.955 ops/s
# Warmup Iteration  28: 748549.399 ops/s
# Warmup Iteration  29: 749936.259 ops/s
# Warmup Iteration  30: 748412.238 ops/s
Iteration   1: 752872.464 ops/s
Iteration   2: 756700.966 ops/s
Iteration   3: 758719.775 ops/s
Iteration   4: 757725.090 ops/s
Iteration   5: 754153.655 ops/s
Iteration   6: 755966.085 ops/s
Iteration   7: 754980.279 ops/s
Iteration   8: 756731.494 ops/s
Iteration   9: 759077.597 ops/s
Iteration  10: 755118.682 ops/s
Iteration  11: 758272.773 ops/s
Iteration  12: 757021.868 ops/s
Iteration  13: 758327.290 ops/s
Iteration  14: 753507.512 ops/s
Iteration  15: 755315.706 ops/s
Iteration  16: 758558.545 ops/s
Iteration  17: 754436.072 ops/s
Iteration  18: 755768.652 ops/s
Iteration  19: 755351.879 ops/s
Iteration  20: 755678.147 ops/s
Iteration  21: 758133.028 ops/s
Iteration  22: 752672.581 ops/s
Iteration  23: 755086.836 ops/s
Iteration  24: 756172.585 ops/s
Iteration  25: 755730.310 ops/s
Iteration  26: 754151.298 ops/s
Iteration  27: 754116.645 ops/s
Iteration  28: 760253.592 ops/s
Iteration  29: 757623.475 ops/s
Iteration  30: 759585.314 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisBy":
  756260.340 ±(99.9%) 1352.415 ops/s [Average]
  (min, avg, max) = (752672.581, 756260.340, 760253.592), stdev = 2024.231
  CI (99.9%): [754907.925, 757612.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisBy  thrpt   30  756260.340 ± 1352.415  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3443552.252 ops/s
# Warmup Iteration   2: 5741938.001 ops/s
# Warmup Iteration   3: 6529983.733 ops/s
# Warmup Iteration   4: 6532261.069 ops/s
# Warmup Iteration   5: 6547354.767 ops/s
# Warmup Iteration   6: 5368732.411 ops/s
# Warmup Iteration   7: 6424010.486 ops/s
# Warmup Iteration   8: 6401833.383 ops/s
# Warmup Iteration   9: 6446952.941 ops/s
# Warmup Iteration  10: 6423715.318 ops/s
# Warmup Iteration  11: 6435956.407 ops/s
# Warmup Iteration  12: 6412125.101 ops/s
# Warmup Iteration  13: 6443004.780 ops/s
# Warmup Iteration  14: 6407031.452 ops/s
# Warmup Iteration  15: 6421492.256 ops/s
# Warmup Iteration  16: 6427950.863 ops/s
# Warmup Iteration  17: 6422507.676 ops/s
# Warmup Iteration  18: 6416029.681 ops/s
# Warmup Iteration  19: 6396798.953 ops/s
# Warmup Iteration  20: 6426844.187 ops/s
# Warmup Iteration  21: 6416872.318 ops/s
# Warmup Iteration  22: 6407962.194 ops/s
# Warmup Iteration  23: 6397697.065 ops/s
# Warmup Iteration  24: 6404836.774 ops/s
# Warmup Iteration  25: 6414222.642 ops/s
# Warmup Iteration  26: 6396365.699 ops/s
# Warmup Iteration  27: 6430109.343 ops/s
# Warmup Iteration  28: 6418936.327 ops/s
# Warmup Iteration  29: 6418828.414 ops/s
# Warmup Iteration  30: 6445958.851 ops/s
Iteration   1: 6411192.395 ops/s
Iteration   2: 6398292.163 ops/s
Iteration   3: 6442361.204 ops/s
Iteration   4: 6435205.639 ops/s
Iteration   5: 6433568.453 ops/s
Iteration   6: 6462914.897 ops/s
Iteration   7: 6450569.827 ops/s
Iteration   8: 6458802.731 ops/s
Iteration   9: 6415756.022 ops/s
Iteration  10: 6461909.202 ops/s
Iteration  11: 6409165.321 ops/s
Iteration  12: 6446866.625 ops/s
Iteration  13: 6451105.514 ops/s
Iteration  14: 6397918.216 ops/s
Iteration  15: 6440657.089 ops/s
Iteration  16: 6444726.946 ops/s
Iteration  17: 6398813.635 ops/s
Iteration  18: 6445805.847 ops/s
Iteration  19: 6447080.397 ops/s
Iteration  20: 6442981.897 ops/s
Iteration  21: 6446824.479 ops/s
Iteration  22: 6427303.610 ops/s
Iteration  23: 6444331.479 ops/s
Iteration  24: 6413290.691 ops/s
Iteration  25: 6417226.476 ops/s
Iteration  26: 6411398.350 ops/s
Iteration  27: 6464141.814 ops/s
Iteration  28: 6434135.092 ops/s
Iteration  29: 6466450.733 ops/s
Iteration  30: 6454569.701 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByBoolean":
  6435845.548 ±(99.9%) 13975.638 ops/s [Average]
  (min, avg, max) = (6397918.216, 6435845.548, 6466450.733), stdev = 20918.079
  CI (99.9%): [6421869.910, 6449821.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByBoolean  thrpt   30  6435845.548 ± 13975.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1071287.000 ops/s
# Warmup Iteration   2: 1159427.435 ops/s
# Warmup Iteration   3: 1159001.852 ops/s
# Warmup Iteration   4: 1155652.333 ops/s
# Warmup Iteration   5: 1255915.287 ops/s
# Warmup Iteration   6: 1302276.467 ops/s
# Warmup Iteration   7: 1304614.294 ops/s
# Warmup Iteration   8: 1304163.904 ops/s
# Warmup Iteration   9: 1310151.968 ops/s
# Warmup Iteration  10: 1307970.304 ops/s
# Warmup Iteration  11: 1311941.819 ops/s
# Warmup Iteration  12: 1299357.085 ops/s
# Warmup Iteration  13: 1316092.832 ops/s
# Warmup Iteration  14: 1312979.884 ops/s
# Warmup Iteration  15: 1317719.492 ops/s
# Warmup Iteration  16: 1317290.422 ops/s
# Warmup Iteration  17: 1319097.447 ops/s
# Warmup Iteration  18: 1319481.415 ops/s
# Warmup Iteration  19: 1316275.816 ops/s
# Warmup Iteration  20: 1317066.544 ops/s
# Warmup Iteration  21: 1321817.948 ops/s
# Warmup Iteration  22: 1320934.657 ops/s
# Warmup Iteration  23: 1318194.337 ops/s
# Warmup Iteration  24: 1320667.229 ops/s
# Warmup Iteration  25: 1320313.017 ops/s
# Warmup Iteration  26: 1320387.185 ops/s
# Warmup Iteration  27: 1258871.595 ops/s
# Warmup Iteration  28: 1156963.821 ops/s
# Warmup Iteration  29: 1306426.445 ops/s
# Warmup Iteration  30: 1322754.924 ops/s
Iteration   1: 1321893.210 ops/s
Iteration   2: 1313001.199 ops/s
Iteration   3: 1318460.285 ops/s
Iteration   4: 1314490.846 ops/s
Iteration   5: 1318272.905 ops/s
Iteration   6: 1320737.114 ops/s
Iteration   7: 1319384.697 ops/s
Iteration   8: 1317796.667 ops/s
Iteration   9: 1319352.191 ops/s
Iteration  10: 1318339.570 ops/s
Iteration  11: 1309614.047 ops/s
Iteration  12: 1317149.631 ops/s
Iteration  13: 1320387.714 ops/s
Iteration  14: 1319069.887 ops/s
Iteration  15: 1317731.160 ops/s
Iteration  16: 1316659.973 ops/s
Iteration  17: 1314847.468 ops/s
Iteration  18: 1312657.717 ops/s
Iteration  19: 1319039.311 ops/s
Iteration  20: 1317866.866 ops/s
Iteration  21: 1325254.305 ops/s
Iteration  22: 1323080.833 ops/s
Iteration  23: 1315738.601 ops/s
Iteration  24: 1316746.641 ops/s
Iteration  25: 1324856.750 ops/s
Iteration  26: 1321858.434 ops/s
Iteration  27: 1319341.627 ops/s
Iteration  28: 1320004.409 ops/s
Iteration  29: 1314276.962 ops/s
Iteration  30: 1320610.413 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByByte":
  1318284.048 ±(99.9%) 2336.179 ops/s [Average]
  (min, avg, max) = (1309614.047, 1318284.048, 1325254.305), stdev = 3496.682
  CI (99.9%): [1315947.869, 1320620.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByByte  thrpt   30  1318284.048 ± 2336.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1702787.399 ops/s
# Warmup Iteration   2: 1853745.326 ops/s
# Warmup Iteration   3: 2115832.438 ops/s
# Warmup Iteration   4: 2344842.275 ops/s
# Warmup Iteration   5: 2339096.325 ops/s
# Warmup Iteration   6: 2342814.180 ops/s
# Warmup Iteration   7: 2326967.528 ops/s
# Warmup Iteration   8: 2333171.399 ops/s
# Warmup Iteration   9: 2352351.417 ops/s
# Warmup Iteration  10: 2348120.408 ops/s
# Warmup Iteration  11: 2344529.385 ops/s
# Warmup Iteration  12: 2346444.588 ops/s
# Warmup Iteration  13: 2345228.029 ops/s
# Warmup Iteration  14: 2225589.813 ops/s
# Warmup Iteration  15: 2072273.646 ops/s
# Warmup Iteration  16: 2338817.547 ops/s
# Warmup Iteration  17: 2343921.893 ops/s
# Warmup Iteration  18: 2334095.190 ops/s
# Warmup Iteration  19: 2351815.896 ops/s
# Warmup Iteration  20: 2344146.179 ops/s
# Warmup Iteration  21: 2333261.747 ops/s
# Warmup Iteration  22: 2343170.432 ops/s
# Warmup Iteration  23: 2335322.156 ops/s
# Warmup Iteration  24: 2347783.272 ops/s
# Warmup Iteration  25: 2341457.532 ops/s
# Warmup Iteration  26: 2350457.719 ops/s
# Warmup Iteration  27: 2343584.541 ops/s
# Warmup Iteration  28: 2336386.666 ops/s
# Warmup Iteration  29: 2341543.207 ops/s
# Warmup Iteration  30: 2339518.406 ops/s
Iteration   1: 2328933.303 ops/s
Iteration   2: 2340165.962 ops/s
Iteration   3: 2348266.401 ops/s
Iteration   4: 2347277.088 ops/s
Iteration   5: 2351140.866 ops/s
Iteration   6: 2334877.505 ops/s
Iteration   7: 2345306.795 ops/s
Iteration   8: 2343666.286 ops/s
Iteration   9: 2339968.187 ops/s
Iteration  10: 2343222.429 ops/s
Iteration  11: 2346961.361 ops/s
Iteration  12: 2351980.484 ops/s
Iteration  13: 2339061.444 ops/s
Iteration  14: 2350753.097 ops/s
Iteration  15: 2344548.360 ops/s
Iteration  16: 2330264.482 ops/s
Iteration  17: 2341513.286 ops/s
Iteration  18: 2359337.981 ops/s
Iteration  19: 2348273.925 ops/s
Iteration  20: 2325082.299 ops/s
Iteration  21: 2340720.529 ops/s
Iteration  22: 2354279.441 ops/s
Iteration  23: 2357044.284 ops/s
Iteration  24: 2343957.307 ops/s
Iteration  25: 2347745.989 ops/s
Iteration  26: 2344413.206 ops/s
Iteration  27: 2345228.211 ops/s
Iteration  28: 2340643.804 ops/s
Iteration  29: 2344095.795 ops/s
Iteration  30: 2332131.365 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByChar":
  2343695.382 ±(99.9%) 5298.888 ops/s [Average]
  (min, avg, max) = (2325082.299, 2343695.382, 2359337.981), stdev = 7931.127
  CI (99.9%): [2338396.495, 2348994.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByChar  thrpt   30  2343695.382 ± 5298.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 271410.170 ops/s
# Warmup Iteration   2: 439707.295 ops/s
# Warmup Iteration   3: 525729.235 ops/s
# Warmup Iteration   4: 530156.865 ops/s
# Warmup Iteration   5: 530398.735 ops/s
# Warmup Iteration   6: 443372.016 ops/s
# Warmup Iteration   7: 509277.662 ops/s
# Warmup Iteration   8: 530490.585 ops/s
# Warmup Iteration   9: 529641.582 ops/s
# Warmup Iteration  10: 528851.387 ops/s
# Warmup Iteration  11: 528219.207 ops/s
# Warmup Iteration  12: 529262.914 ops/s
# Warmup Iteration  13: 527059.024 ops/s
# Warmup Iteration  14: 526847.337 ops/s
# Warmup Iteration  15: 529009.688 ops/s
# Warmup Iteration  16: 530546.285 ops/s
# Warmup Iteration  17: 529605.469 ops/s
# Warmup Iteration  18: 528819.066 ops/s
# Warmup Iteration  19: 529571.380 ops/s
# Warmup Iteration  20: 528372.672 ops/s
# Warmup Iteration  21: 528786.699 ops/s
# Warmup Iteration  22: 529564.149 ops/s
# Warmup Iteration  23: 526043.307 ops/s
# Warmup Iteration  24: 531211.335 ops/s
# Warmup Iteration  25: 529824.915 ops/s
# Warmup Iteration  26: 532645.882 ops/s
# Warmup Iteration  27: 529944.803 ops/s
# Warmup Iteration  28: 529752.188 ops/s
# Warmup Iteration  29: 529131.520 ops/s
# Warmup Iteration  30: 532241.172 ops/s
Iteration   1: 531818.267 ops/s
Iteration   2: 529831.059 ops/s
Iteration   3: 527704.735 ops/s
Iteration   4: 526731.065 ops/s
Iteration   5: 531140.087 ops/s
Iteration   6: 531272.976 ops/s
Iteration   7: 529734.332 ops/s
Iteration   8: 529783.670 ops/s
Iteration   9: 529583.828 ops/s
Iteration  10: 529439.273 ops/s
Iteration  11: 531245.281 ops/s
Iteration  12: 527621.384 ops/s
Iteration  13: 529563.498 ops/s
Iteration  14: 531634.411 ops/s
Iteration  15: 531470.019 ops/s
Iteration  16: 529859.147 ops/s
Iteration  17: 530080.616 ops/s
Iteration  18: 527551.278 ops/s
Iteration  19: 525998.067 ops/s
Iteration  20: 529266.740 ops/s
Iteration  21: 527782.846 ops/s
Iteration  22: 530376.131 ops/s
Iteration  23: 529777.122 ops/s
Iteration  24: 529194.232 ops/s
Iteration  25: 530034.358 ops/s
Iteration  26: 531675.563 ops/s
Iteration  27: 530444.453 ops/s
Iteration  28: 524951.231 ops/s
Iteration  29: 526250.172 ops/s
Iteration  30: 527939.703 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByDouble":
  529325.185 ±(99.9%) 1218.866 ops/s [Average]
  (min, avg, max) = (524951.231, 529325.185, 531818.267), stdev = 1824.341
  CI (99.9%): [528106.319, 530544.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByDouble  thrpt   30  529325.185 ± 1218.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 273100.774 ops/s
# Warmup Iteration   2: 448719.844 ops/s
# Warmup Iteration   3: 534894.790 ops/s
# Warmup Iteration   4: 538845.894 ops/s
# Warmup Iteration   5: 539025.815 ops/s
# Warmup Iteration   6: 443104.344 ops/s
# Warmup Iteration   7: 532602.039 ops/s
# Warmup Iteration   8: 541082.303 ops/s
# Warmup Iteration   9: 542593.157 ops/s
# Warmup Iteration  10: 541730.622 ops/s
# Warmup Iteration  11: 540070.120 ops/s
# Warmup Iteration  12: 540637.818 ops/s
# Warmup Iteration  13: 542839.836 ops/s
# Warmup Iteration  14: 541664.973 ops/s
# Warmup Iteration  15: 541322.261 ops/s
# Warmup Iteration  16: 541835.215 ops/s
# Warmup Iteration  17: 540813.806 ops/s
# Warmup Iteration  18: 540534.636 ops/s
# Warmup Iteration  19: 542003.096 ops/s
# Warmup Iteration  20: 540871.609 ops/s
# Warmup Iteration  21: 542017.520 ops/s
# Warmup Iteration  22: 540641.305 ops/s
# Warmup Iteration  23: 539487.129 ops/s
# Warmup Iteration  24: 540329.175 ops/s
# Warmup Iteration  25: 542035.872 ops/s
# Warmup Iteration  26: 540881.816 ops/s
# Warmup Iteration  27: 543759.398 ops/s
# Warmup Iteration  28: 546628.281 ops/s
# Warmup Iteration  29: 545709.176 ops/s
# Warmup Iteration  30: 545964.862 ops/s
Iteration   1: 547706.106 ops/s
Iteration   2: 545941.014 ops/s
Iteration   3: 545795.468 ops/s
Iteration   4: 543340.298 ops/s
Iteration   5: 546544.863 ops/s
Iteration   6: 546400.479 ops/s
Iteration   7: 547580.246 ops/s
Iteration   8: 546218.592 ops/s
Iteration   9: 546607.450 ops/s
Iteration  10: 546394.710 ops/s
Iteration  11: 547387.152 ops/s
Iteration  12: 546617.884 ops/s
Iteration  13: 546646.661 ops/s
Iteration  14: 544258.873 ops/s
Iteration  15: 546317.776 ops/s
Iteration  16: 547943.743 ops/s
Iteration  17: 545130.383 ops/s
Iteration  18: 541934.922 ops/s
Iteration  19: 547091.829 ops/s
Iteration  20: 545506.382 ops/s
Iteration  21: 544970.126 ops/s
Iteration  22: 547952.909 ops/s
Iteration  23: 547956.592 ops/s
Iteration  24: 544518.006 ops/s
Iteration  25: 546711.270 ops/s
Iteration  26: 545515.274 ops/s
Iteration  27: 548560.556 ops/s
Iteration  28: 544413.382 ops/s
Iteration  29: 545172.511 ops/s
Iteration  30: 546468.276 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByFloat":
  546120.124 ±(99.9%) 985.470 ops/s [Average]
  (min, avg, max) = (541934.922, 546120.124, 548560.556), stdev = 1475.006
  CI (99.9%): [545134.654, 547105.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByFloat  thrpt   30  546120.124 ± 985.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1085767.035 ops/s
# Warmup Iteration   2: 1151451.835 ops/s
# Warmup Iteration   3: 1156527.497 ops/s
# Warmup Iteration   4: 1161229.798 ops/s
# Warmup Iteration   5: 1277214.869 ops/s
# Warmup Iteration   6: 1331201.406 ops/s
# Warmup Iteration   7: 1343864.379 ops/s
# Warmup Iteration   8: 1341835.344 ops/s
# Warmup Iteration   9: 1339426.119 ops/s
# Warmup Iteration  10: 1335808.495 ops/s
# Warmup Iteration  11: 1342763.538 ops/s
# Warmup Iteration  12: 1332332.464 ops/s
# Warmup Iteration  13: 1343457.473 ops/s
# Warmup Iteration  14: 1345461.544 ops/s
# Warmup Iteration  15: 1340703.303 ops/s
# Warmup Iteration  16: 1332592.091 ops/s
# Warmup Iteration  17: 1336809.526 ops/s
# Warmup Iteration  18: 1336175.432 ops/s
# Warmup Iteration  19: 1334002.154 ops/s
# Warmup Iteration  20: 1340209.007 ops/s
# Warmup Iteration  21: 1336180.876 ops/s
# Warmup Iteration  22: 1340142.950 ops/s
# Warmup Iteration  23: 1339508.883 ops/s
# Warmup Iteration  24: 1337982.903 ops/s
# Warmup Iteration  25: 1345684.808 ops/s
# Warmup Iteration  26: 1340615.305 ops/s
# Warmup Iteration  27: 1211978.386 ops/s
# Warmup Iteration  28: 1222023.256 ops/s
# Warmup Iteration  29: 1334992.286 ops/s
# Warmup Iteration  30: 1330062.993 ops/s
Iteration   1: 1334456.849 ops/s
Iteration   2: 1325753.398 ops/s
Iteration   3: 1336864.503 ops/s
Iteration   4: 1334717.332 ops/s
Iteration   5: 1317858.167 ops/s
Iteration   6: 1328709.557 ops/s
Iteration   7: 1320265.085 ops/s
Iteration   8: 1315371.869 ops/s
Iteration   9: 1320961.076 ops/s
Iteration  10: 1323503.182 ops/s
Iteration  11: 1322128.076 ops/s
Iteration  12: 1318270.082 ops/s
Iteration  13: 1321014.470 ops/s
Iteration  14: 1321799.079 ops/s
Iteration  15: 1315782.176 ops/s
Iteration  16: 1316637.972 ops/s
Iteration  17: 1310044.480 ops/s
Iteration  18: 1330252.036 ops/s
Iteration  19: 1321946.542 ops/s
Iteration  20: 1326918.059 ops/s
Iteration  21: 1324677.801 ops/s
Iteration  22: 1326027.964 ops/s
Iteration  23: 1324284.491 ops/s
Iteration  24: 1325091.110 ops/s
Iteration  25: 1327893.551 ops/s
Iteration  26: 1326506.922 ops/s
Iteration  27: 1326829.246 ops/s
Iteration  28: 1329486.547 ops/s
Iteration  29: 1322938.795 ops/s
Iteration  30: 1329100.773 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByInt":
  1324203.040 ±(99.9%) 4039.771 ops/s [Average]
  (min, avg, max) = (1310044.480, 1324203.040, 1336864.503), stdev = 6046.540
  CI (99.9%): [1320163.268, 1328242.811] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByInt  thrpt   30  1324203.040 ± 4039.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009699.186 ops/s
# Warmup Iteration   2: 1096503.417 ops/s
# Warmup Iteration   3: 1084895.791 ops/s
# Warmup Iteration   4: 1088177.153 ops/s
# Warmup Iteration   5: 1234761.405 ops/s
# Warmup Iteration   6: 1252099.591 ops/s
# Warmup Iteration   7: 1258082.171 ops/s
# Warmup Iteration   8: 1248431.089 ops/s
# Warmup Iteration   9: 1255686.471 ops/s
# Warmup Iteration  10: 1257713.852 ops/s
# Warmup Iteration  11: 1253624.482 ops/s
# Warmup Iteration  12: 1249624.614 ops/s
# Warmup Iteration  13: 1262716.470 ops/s
# Warmup Iteration  14: 1258855.233 ops/s
# Warmup Iteration  15: 1257588.586 ops/s
# Warmup Iteration  16: 1262985.276 ops/s
# Warmup Iteration  17: 1261157.375 ops/s
# Warmup Iteration  18: 1252202.308 ops/s
# Warmup Iteration  19: 1254108.872 ops/s
# Warmup Iteration  20: 1262401.652 ops/s
# Warmup Iteration  21: 1259487.293 ops/s
# Warmup Iteration  22: 1254020.845 ops/s
# Warmup Iteration  23: 1259196.167 ops/s
# Warmup Iteration  24: 1261750.486 ops/s
# Warmup Iteration  25: 1257036.628 ops/s
# Warmup Iteration  26: 1117883.028 ops/s
# Warmup Iteration  27: 1165261.222 ops/s
# Warmup Iteration  28: 1255448.112 ops/s
# Warmup Iteration  29: 1260302.899 ops/s
# Warmup Iteration  30: 1254463.195 ops/s
Iteration   1: 1257419.454 ops/s
Iteration   2: 1252525.015 ops/s
Iteration   3: 1250754.998 ops/s
Iteration   4: 1258344.942 ops/s
Iteration   5: 1259657.251 ops/s
Iteration   6: 1254177.538 ops/s
Iteration   7: 1256986.367 ops/s
Iteration   8: 1256015.594 ops/s
Iteration   9: 1259879.095 ops/s
Iteration  10: 1251298.039 ops/s
Iteration  11: 1250804.574 ops/s
Iteration  12: 1253812.799 ops/s
Iteration  13: 1257050.528 ops/s
Iteration  14: 1263869.319 ops/s
Iteration  15: 1262940.658 ops/s
Iteration  16: 1261710.464 ops/s
Iteration  17: 1244956.473 ops/s
Iteration  18: 1258623.661 ops/s
Iteration  19: 1265084.832 ops/s
Iteration  20: 1254234.260 ops/s
Iteration  21: 1262249.925 ops/s
Iteration  22: 1253896.741 ops/s
Iteration  23: 1254406.403 ops/s
Iteration  24: 1252878.912 ops/s
Iteration  25: 1258751.976 ops/s
Iteration  26: 1255140.419 ops/s
Iteration  27: 1255471.482 ops/s
Iteration  28: 1256344.132 ops/s
Iteration  29: 1247935.019 ops/s
Iteration  30: 1256913.114 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByLong":
  1256137.799 ±(99.9%) 3093.667 ops/s [Average]
  (min, avg, max) = (1244956.473, 1256137.799, 1265084.832), stdev = 4630.455
  CI (99.9%): [1253044.133, 1259231.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByLong  thrpt   30  1256137.799 ± 3093.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1066179.301 ops/s
# Warmup Iteration   2: 1133445.671 ops/s
# Warmup Iteration   3: 1111953.368 ops/s
# Warmup Iteration   4: 1115127.179 ops/s
# Warmup Iteration   5: 1264735.433 ops/s
# Warmup Iteration   6: 1261341.181 ops/s
# Warmup Iteration   7: 1263525.035 ops/s
# Warmup Iteration   8: 1286629.393 ops/s
# Warmup Iteration   9: 1292617.079 ops/s
# Warmup Iteration  10: 1306845.542 ops/s
# Warmup Iteration  11: 1298400.097 ops/s
# Warmup Iteration  12: 1308212.633 ops/s
# Warmup Iteration  13: 1301463.996 ops/s
# Warmup Iteration  14: 1311432.275 ops/s
# Warmup Iteration  15: 1309793.650 ops/s
# Warmup Iteration  16: 1307747.523 ops/s
# Warmup Iteration  17: 1306814.322 ops/s
# Warmup Iteration  18: 1302069.942 ops/s
# Warmup Iteration  19: 1310320.163 ops/s
# Warmup Iteration  20: 1304370.048 ops/s
# Warmup Iteration  21: 1304934.138 ops/s
# Warmup Iteration  22: 1310847.305 ops/s
# Warmup Iteration  23: 1306186.704 ops/s
# Warmup Iteration  24: 1303270.680 ops/s
# Warmup Iteration  25: 1193380.088 ops/s
# Warmup Iteration  26: 1192943.836 ops/s
# Warmup Iteration  27: 1307274.070 ops/s
# Warmup Iteration  28: 1303822.150 ops/s
# Warmup Iteration  29: 1302610.952 ops/s
# Warmup Iteration  30: 1307794.912 ops/s
Iteration   1: 1305667.067 ops/s
Iteration   2: 1311987.642 ops/s
Iteration   3: 1307790.122 ops/s
Iteration   4: 1306905.599 ops/s
Iteration   5: 1306709.474 ops/s
Iteration   6: 1303283.828 ops/s
Iteration   7: 1308651.006 ops/s
Iteration   8: 1311250.961 ops/s
Iteration   9: 1310403.595 ops/s
Iteration  10: 1302907.398 ops/s
Iteration  11: 1304006.781 ops/s
Iteration  12: 1306651.631 ops/s
Iteration  13: 1304987.421 ops/s
Iteration  14: 1297785.190 ops/s
Iteration  15: 1311915.898 ops/s
Iteration  16: 1301381.869 ops/s
Iteration  17: 1311278.821 ops/s
Iteration  18: 1307561.047 ops/s
Iteration  19: 1310608.518 ops/s
Iteration  20: 1295791.254 ops/s
Iteration  21: 1301859.998 ops/s
Iteration  22: 1306225.810 ops/s
Iteration  23: 1300003.077 ops/s
Iteration  24: 1305199.735 ops/s
Iteration  25: 1310413.489 ops/s
Iteration  26: 1305318.559 ops/s
Iteration  27: 1306908.189 ops/s
Iteration  28: 1301992.177 ops/s
Iteration  29: 1304330.844 ops/s
Iteration  30: 1308220.675 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisByShort":
  1305933.256 ±(99.9%) 2759.233 ops/s [Average]
  (min, avg, max) = (1295791.254, 1305933.256, 1311987.642), stdev = 4129.891
  CI (99.9%): [1303174.023, 1308692.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisByShort  thrpt   30  1305933.256 ± 2759.233  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6266405.785 ops/s
# Warmup Iteration   2: 8833530.210 ops/s
# Warmup Iteration   3: 10291487.572 ops/s
# Warmup Iteration   4: 10245734.822 ops/s
# Warmup Iteration   5: 10292572.749 ops/s
# Warmup Iteration   6: 10261149.255 ops/s
# Warmup Iteration   7: 10162651.977 ops/s
# Warmup Iteration   8: 8633046.267 ops/s
# Warmup Iteration   9: 10220463.984 ops/s
# Warmup Iteration  10: 10256145.432 ops/s
# Warmup Iteration  11: 10283129.060 ops/s
# Warmup Iteration  12: 10294972.638 ops/s
# Warmup Iteration  13: 10267364.540 ops/s
# Warmup Iteration  14: 10244468.651 ops/s
# Warmup Iteration  15: 10261396.079 ops/s
# Warmup Iteration  16: 10321151.559 ops/s
# Warmup Iteration  17: 10315250.414 ops/s
# Warmup Iteration  18: 10265272.119 ops/s
# Warmup Iteration  19: 10280736.821 ops/s
# Warmup Iteration  20: 10285690.270 ops/s
# Warmup Iteration  21: 10289192.502 ops/s
# Warmup Iteration  22: 10283624.007 ops/s
# Warmup Iteration  23: 10283651.128 ops/s
# Warmup Iteration  24: 10288640.156 ops/s
# Warmup Iteration  25: 10253715.721 ops/s
# Warmup Iteration  26: 10251933.595 ops/s
# Warmup Iteration  27: 10234620.403 ops/s
# Warmup Iteration  28: 10247436.249 ops/s
# Warmup Iteration  29: 10317122.966 ops/s
# Warmup Iteration  30: 10289189.383 ops/s
Iteration   1: 10333491.910 ops/s
Iteration   2: 10320260.838 ops/s
Iteration   3: 10289817.668 ops/s
Iteration   4: 10317570.313 ops/s
Iteration   5: 10336408.462 ops/s
Iteration   6: 10255619.750 ops/s
Iteration   7: 10250705.422 ops/s
Iteration   8: 10302571.030 ops/s
Iteration   9: 10329536.703 ops/s
Iteration  10: 10248678.271 ops/s
Iteration  11: 10307771.215 ops/s
Iteration  12: 10243028.868 ops/s
Iteration  13: 10308479.864 ops/s
Iteration  14: 10282942.702 ops/s
Iteration  15: 10303885.986 ops/s
Iteration  16: 10362551.073 ops/s
Iteration  17: 10347691.303 ops/s
Iteration  18: 10276437.156 ops/s
Iteration  19: 10295966.975 ops/s
Iteration  20: 10305087.964 ops/s
Iteration  21: 10267710.228 ops/s
Iteration  22: 10301060.913 ops/s
Iteration  23: 10302978.419 ops/s
Iteration  24: 10352211.108 ops/s
Iteration  25: 10264055.211 ops/s
Iteration  26: 10338667.866 ops/s
Iteration  27: 10247735.384 ops/s
Iteration  28: 10318290.328 ops/s
Iteration  29: 10162395.695 ops/s
Iteration  30: 10279268.593 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator":
  10295095.907 ±(99.9%) 27721.460 ops/s [Average]
  (min, avg, max) = (10162395.695, 10295095.907, 10362551.073), stdev = 41492.179
  CI (99.9%): [10267374.448, 10322817.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparator  thrpt   30  10295095.907 ± 27721.460  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5330899.284 ops/s
# Warmup Iteration   2: 9263655.957 ops/s
# Warmup Iteration   3: 9825666.282 ops/s
# Warmup Iteration   4: 9854098.328 ops/s
# Warmup Iteration   5: 9852869.675 ops/s
# Warmup Iteration   6: 8162323.587 ops/s
# Warmup Iteration   7: 9898868.016 ops/s
# Warmup Iteration   8: 9883522.329 ops/s
# Warmup Iteration   9: 9926747.569 ops/s
# Warmup Iteration  10: 9882148.850 ops/s
# Warmup Iteration  11: 9898501.020 ops/s
# Warmup Iteration  12: 9876215.335 ops/s
# Warmup Iteration  13: 9865991.344 ops/s
# Warmup Iteration  14: 9882756.120 ops/s
# Warmup Iteration  15: 9874043.500 ops/s
# Warmup Iteration  16: 9837394.520 ops/s
# Warmup Iteration  17: 9852706.373 ops/s
# Warmup Iteration  18: 9905165.061 ops/s
# Warmup Iteration  19: 9888957.943 ops/s
# Warmup Iteration  20: 9872007.395 ops/s
# Warmup Iteration  21: 9867519.773 ops/s
# Warmup Iteration  22: 9886894.598 ops/s
# Warmup Iteration  23: 9846894.280 ops/s
# Warmup Iteration  24: 9874479.844 ops/s
# Warmup Iteration  25: 9887672.063 ops/s
# Warmup Iteration  26: 9863792.127 ops/s
# Warmup Iteration  27: 9884368.735 ops/s
# Warmup Iteration  28: 9888568.590 ops/s
# Warmup Iteration  29: 9859611.633 ops/s
# Warmup Iteration  30: 9890557.408 ops/s
Iteration   1: 9851248.864 ops/s
Iteration   2: 9859185.338 ops/s
Iteration   3: 9882167.173 ops/s
Iteration   4: 9879021.879 ops/s
Iteration   5: 9916376.928 ops/s
Iteration   6: 9915262.102 ops/s
Iteration   7: 9862718.023 ops/s
Iteration   8: 9866656.731 ops/s
Iteration   9: 9868152.740 ops/s
Iteration  10: 9902315.031 ops/s
Iteration  11: 9916106.638 ops/s
Iteration  12: 9893452.493 ops/s
Iteration  13: 9837424.186 ops/s
Iteration  14: 9926103.610 ops/s
Iteration  15: 9847513.587 ops/s
Iteration  16: 9930316.941 ops/s
Iteration  17: 9899432.944 ops/s
Iteration  18: 9916890.070 ops/s
Iteration  19: 9848196.462 ops/s
Iteration  20: 9789978.624 ops/s
Iteration  21: 9874120.910 ops/s
Iteration  22: 9859891.049 ops/s
Iteration  23: 9919869.540 ops/s
Iteration  24: 9885335.871 ops/s
Iteration  25: 9894531.791 ops/s
Iteration  26: 9889849.686 ops/s
Iteration  27: 9859674.837 ops/s
Iteration  28: 9872476.725 ops/s
Iteration  29: 9913585.867 ops/s
Iteration  30: 9879546.463 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements":
  9881913.437 ±(99.9%) 21004.986 ops/s [Average]
  (min, avg, max) = (9789978.624, 9881913.437, 9930316.941), stdev = 31439.276
  CI (99.9%): [9860908.451, 9902918.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThisWithNullWithNoComparatorOnListWithMoreThan10Elements  thrpt   30  9881913.437 ± 21004.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5447.638 ops/s
# Warmup Iteration   2: 6063.114 ops/s
# Warmup Iteration   3: 6067.048 ops/s
# Warmup Iteration   4: 6046.814 ops/s
# Warmup Iteration   5: 6791.035 ops/s
# Warmup Iteration   6: 7171.102 ops/s
# Warmup Iteration   7: 7207.928 ops/s
# Warmup Iteration   8: 7184.200 ops/s
# Warmup Iteration   9: 7157.528 ops/s
# Warmup Iteration  10: 7189.280 ops/s
# Warmup Iteration  11: 7089.348 ops/s
# Warmup Iteration  12: 7161.209 ops/s
# Warmup Iteration  13: 7150.160 ops/s
# Warmup Iteration  14: 7145.777 ops/s
# Warmup Iteration  15: 7138.436 ops/s
# Warmup Iteration  16: 7131.861 ops/s
# Warmup Iteration  17: 7167.794 ops/s
# Warmup Iteration  18: 7077.987 ops/s
# Warmup Iteration  19: 7164.929 ops/s
# Warmup Iteration  20: 7165.178 ops/s
# Warmup Iteration  21: 7165.063 ops/s
# Warmup Iteration  22: 7161.213 ops/s
# Warmup Iteration  23: 7176.626 ops/s
# Warmup Iteration  24: 7187.044 ops/s
# Warmup Iteration  25: 6795.110 ops/s
# Warmup Iteration  26: 6446.766 ops/s
# Warmup Iteration  27: 7179.150 ops/s
# Warmup Iteration  28: 7157.493 ops/s
# Warmup Iteration  29: 7193.671 ops/s
# Warmup Iteration  30: 7182.622 ops/s
Iteration   1: 7132.121 ops/s
Iteration   2: 7160.631 ops/s
Iteration   3: 7190.499 ops/s
Iteration   4: 7160.875 ops/s
Iteration   5: 7151.101 ops/s
Iteration   6: 7165.520 ops/s
Iteration   7: 7163.192 ops/s
Iteration   8: 7146.284 ops/s
Iteration   9: 7177.117 ops/s
Iteration  10: 7200.113 ops/s
Iteration  11: 7161.170 ops/s
Iteration  12: 7157.207 ops/s
Iteration  13: 7182.353 ops/s
Iteration  14: 7170.785 ops/s
Iteration  15: 7134.474 ops/s
Iteration  16: 7168.212 ops/s
Iteration  17: 7183.120 ops/s
Iteration  18: 7150.826 ops/s
Iteration  19: 7150.087 ops/s
Iteration  20: 7161.526 ops/s
Iteration  21: 7189.428 ops/s
Iteration  22: 7190.618 ops/s
Iteration  23: 7184.755 ops/s
Iteration  24: 7172.266 ops/s
Iteration  25: 7170.656 ops/s
Iteration  26: 7175.432 ops/s
Iteration  27: 7142.586 ops/s
Iteration  28: 7155.279 ops/s
Iteration  29: 7137.468 ops/s
Iteration  30: 7159.614 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_large":
  7164.844 ±(99.9%) 11.789 ops/s [Average]
  (min, avg, max) = (7132.121, 7164.844, 7200.113), stdev = 17.646
  CI (99.9%): [7153.054, 7176.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt     Score    Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_large  thrpt   30  7164.844 ± 11.789  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5640733.354 ops/s
# Warmup Iteration   2: 9222698.926 ops/s
# Warmup Iteration   3: 10732795.301 ops/s
# Warmup Iteration   4: 10797312.780 ops/s
# Warmup Iteration   5: 10753487.401 ops/s
# Warmup Iteration   6: 8955031.909 ops/s
# Warmup Iteration   7: 10821240.315 ops/s
# Warmup Iteration   8: 10865481.116 ops/s
# Warmup Iteration   9: 10816799.786 ops/s
# Warmup Iteration  10: 10859465.882 ops/s
# Warmup Iteration  11: 10753894.503 ops/s
# Warmup Iteration  12: 10771355.422 ops/s
# Warmup Iteration  13: 10829866.091 ops/s
# Warmup Iteration  14: 10869947.829 ops/s
# Warmup Iteration  15: 10835408.108 ops/s
# Warmup Iteration  16: 10768342.855 ops/s
# Warmup Iteration  17: 10794089.381 ops/s
# Warmup Iteration  18: 10844013.454 ops/s
# Warmup Iteration  19: 10824012.633 ops/s
# Warmup Iteration  20: 10811236.511 ops/s
# Warmup Iteration  21: 10835276.353 ops/s
# Warmup Iteration  22: 10790234.862 ops/s
# Warmup Iteration  23: 10800714.718 ops/s
# Warmup Iteration  24: 10780209.647 ops/s
# Warmup Iteration  25: 10818491.273 ops/s
# Warmup Iteration  26: 10793116.313 ops/s
# Warmup Iteration  27: 10795723.358 ops/s
# Warmup Iteration  28: 10821345.064 ops/s
# Warmup Iteration  29: 10843551.445 ops/s
# Warmup Iteration  30: 10811055.997 ops/s
Iteration   1: 10815623.203 ops/s
Iteration   2: 10843300.838 ops/s
Iteration   3: 10792194.486 ops/s
Iteration   4: 10777688.846 ops/s
Iteration   5: 10849491.144 ops/s
Iteration   6: 10750076.798 ops/s
Iteration   7: 10849627.889 ops/s
Iteration   8: 10794008.508 ops/s
Iteration   9: 10768926.162 ops/s
Iteration  10: 10738606.672 ops/s
Iteration  11: 10794877.862 ops/s
Iteration  12: 10774452.595 ops/s
Iteration  13: 10748067.230 ops/s
Iteration  14: 10814752.506 ops/s
Iteration  15: 10764249.163 ops/s
Iteration  16: 10814099.827 ops/s
Iteration  17: 10782894.115 ops/s
Iteration  18: 10824920.946 ops/s
Iteration  19: 10805130.479 ops/s
Iteration  20: 10815594.663 ops/s
Iteration  21: 10819540.588 ops/s
Iteration  22: 10848604.139 ops/s
Iteration  23: 10819878.354 ops/s
Iteration  24: 10852630.052 ops/s
Iteration  25: 10753195.573 ops/s
Iteration  26: 10840473.105 ops/s
Iteration  27: 10845771.137 ops/s
Iteration  28: 10835541.609 ops/s
Iteration  29: 10849244.507 ops/s
Iteration  30: 10831556.231 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_small":
  10807167.308 ±(99.9%) 23566.747 ops/s [Average]
  (min, avg, max) = (10738606.672, 10807167.308, 10852630.052), stdev = 35273.600
  CI (99.9%): [10783600.561, 10830734.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_small  thrpt   30  10807167.308 ± 23566.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1687062.066 ops/s
# Warmup Iteration   2: 1794707.337 ops/s
# Warmup Iteration   3: 1791420.585 ops/s
# Warmup Iteration   4: 2177904.667 ops/s
# Warmup Iteration   5: 2177471.960 ops/s
# Warmup Iteration   6: 2191154.976 ops/s
# Warmup Iteration   7: 2190374.142 ops/s
# Warmup Iteration   8: 2185027.283 ops/s
# Warmup Iteration   9: 2200278.735 ops/s
# Warmup Iteration  10: 2200632.902 ops/s
# Warmup Iteration  11: 2200750.840 ops/s
# Warmup Iteration  12: 2200527.765 ops/s
# Warmup Iteration  13: 2200294.471 ops/s
# Warmup Iteration  14: 2208953.973 ops/s
# Warmup Iteration  15: 2193043.555 ops/s
# Warmup Iteration  16: 2199017.453 ops/s
# Warmup Iteration  17: 2203001.600 ops/s
# Warmup Iteration  18: 2013864.820 ops/s
# Warmup Iteration  19: 2036171.688 ops/s
# Warmup Iteration  20: 2199658.139 ops/s
# Warmup Iteration  21: 2199983.691 ops/s
# Warmup Iteration  22: 2196412.842 ops/s
# Warmup Iteration  23: 2207599.581 ops/s
# Warmup Iteration  24: 2201369.894 ops/s
# Warmup Iteration  25: 2202766.200 ops/s
# Warmup Iteration  26: 2195694.484 ops/s
# Warmup Iteration  27: 2204689.739 ops/s
# Warmup Iteration  28: 2210247.436 ops/s
# Warmup Iteration  29: 2207734.894 ops/s
# Warmup Iteration  30: 2213786.535 ops/s
Iteration   1: 2198232.713 ops/s
Iteration   2: 2199144.435 ops/s
Iteration   3: 2199200.396 ops/s
Iteration   4: 2196510.428 ops/s
Iteration   5: 2217825.206 ops/s
Iteration   6: 2204711.598 ops/s
Iteration   7: 2202767.654 ops/s
Iteration   8: 2189044.992 ops/s
Iteration   9: 2200961.540 ops/s
Iteration  10: 2205896.108 ops/s
Iteration  11: 2195351.472 ops/s
Iteration  12: 2203579.905 ops/s
Iteration  13: 2204250.106 ops/s
Iteration  14: 2206642.703 ops/s
Iteration  15: 2205152.346 ops/s
Iteration  16: 2201447.956 ops/s
Iteration  17: 2202991.215 ops/s
Iteration  18: 2204147.387 ops/s
Iteration  19: 2198338.697 ops/s
Iteration  20: 2203351.285 ops/s
Iteration  21: 2193046.745 ops/s
Iteration  22: 2207424.150 ops/s
Iteration  23: 2202735.869 ops/s
Iteration  24: 2213544.046 ops/s
Iteration  25: 2214047.273 ops/s
Iteration  26: 2203548.875 ops/s
Iteration  27: 2213796.918 ops/s
Iteration  28: 2193379.784 ops/s
Iteration  29: 2203423.388 ops/s
Iteration  30: 2214775.703 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator":
  2203309.030 ±(99.9%) 4516.750 ops/s [Average]
  (min, avg, max) = (2189044.992, 2203309.030, 2217825.206), stdev = 6760.460
  CI (99.9%): [2198792.279, 2207825.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator  thrpt   30  2203309.030 ± 4516.750  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5174.665 ops/s
# Warmup Iteration   2: 5939.811 ops/s
# Warmup Iteration   3: 5932.501 ops/s
# Warmup Iteration   4: 5925.536 ops/s
# Warmup Iteration   5: 6521.609 ops/s
# Warmup Iteration   6: 6929.772 ops/s
# Warmup Iteration   7: 6951.103 ops/s
# Warmup Iteration   8: 6953.035 ops/s
# Warmup Iteration   9: 6948.365 ops/s
# Warmup Iteration  10: 6957.220 ops/s
# Warmup Iteration  11: 6962.882 ops/s
# Warmup Iteration  12: 6936.735 ops/s
# Warmup Iteration  13: 6989.697 ops/s
# Warmup Iteration  14: 6890.679 ops/s
# Warmup Iteration  15: 6982.212 ops/s
# Warmup Iteration  16: 6952.864 ops/s
# Warmup Iteration  17: 6937.737 ops/s
# Warmup Iteration  18: 6955.154 ops/s
# Warmup Iteration  19: 6945.176 ops/s
# Warmup Iteration  20: 6982.251 ops/s
# Warmup Iteration  21: 6948.117 ops/s
# Warmup Iteration  22: 6947.770 ops/s
# Warmup Iteration  23: 6972.603 ops/s
# Warmup Iteration  24: 6932.525 ops/s
# Warmup Iteration  25: 6967.693 ops/s
# Warmup Iteration  26: 6479.220 ops/s
# Warmup Iteration  27: 6438.709 ops/s
# Warmup Iteration  28: 6947.735 ops/s
# Warmup Iteration  29: 6919.048 ops/s
# Warmup Iteration  30: 6955.535 ops/s
Iteration   1: 6925.668 ops/s
Iteration   2: 6956.192 ops/s
Iteration   3: 6917.140 ops/s
Iteration   4: 6938.743 ops/s
Iteration   5: 6954.978 ops/s
Iteration   6: 6923.665 ops/s
Iteration   7: 6908.038 ops/s
Iteration   8: 6926.576 ops/s
Iteration   9: 6968.197 ops/s
Iteration  10: 6916.779 ops/s
Iteration  11: 6952.386 ops/s
Iteration  12: 6952.783 ops/s
Iteration  13: 6938.119 ops/s
Iteration  14: 6920.014 ops/s
Iteration  15: 6955.307 ops/s
Iteration  16: 6964.715 ops/s
Iteration  17: 6956.516 ops/s
Iteration  18: 6970.806 ops/s
Iteration  19: 6948.063 ops/s
Iteration  20: 6932.783 ops/s
Iteration  21: 6966.934 ops/s
Iteration  22: 6943.761 ops/s
Iteration  23: 6917.724 ops/s
Iteration  24: 6987.083 ops/s
Iteration  25: 6930.804 ops/s
Iteration  26: 6889.364 ops/s
Iteration  27: 6932.670 ops/s
Iteration  28: 6938.557 ops/s
Iteration  29: 6929.752 ops/s
Iteration  30: 6962.649 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large":
  6940.892 ±(99.9%) 14.508 ops/s [Average]
  (min, avg, max) = (6889.364, 6940.892, 6987.083), stdev = 21.714
  CI (99.9%): [6926.385, 6955.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt     Score    Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_large  thrpt   30  6940.892 ± 14.508  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6255923.886 ops/s
# Warmup Iteration   2: 10418336.354 ops/s
# Warmup Iteration   3: 11895962.851 ops/s
# Warmup Iteration   4: 11865241.305 ops/s
# Warmup Iteration   5: 11851267.340 ops/s
# Warmup Iteration   6: 9888410.068 ops/s
# Warmup Iteration   7: 11907563.153 ops/s
# Warmup Iteration   8: 11908194.993 ops/s
# Warmup Iteration   9: 11876544.254 ops/s
# Warmup Iteration  10: 11863414.345 ops/s
# Warmup Iteration  11: 11884199.793 ops/s
# Warmup Iteration  12: 11814029.555 ops/s
# Warmup Iteration  13: 11888407.847 ops/s
# Warmup Iteration  14: 11865206.897 ops/s
# Warmup Iteration  15: 11869367.143 ops/s
# Warmup Iteration  16: 11862995.655 ops/s
# Warmup Iteration  17: 11874609.155 ops/s
# Warmup Iteration  18: 11809092.382 ops/s
# Warmup Iteration  19: 11819558.578 ops/s
# Warmup Iteration  20: 11861582.133 ops/s
# Warmup Iteration  21: 11872247.288 ops/s
# Warmup Iteration  22: 11908399.841 ops/s
# Warmup Iteration  23: 11917178.047 ops/s
# Warmup Iteration  24: 11896453.965 ops/s
# Warmup Iteration  25: 11898900.862 ops/s
# Warmup Iteration  26: 11875794.092 ops/s
# Warmup Iteration  27: 11870185.106 ops/s
# Warmup Iteration  28: 11883735.586 ops/s
# Warmup Iteration  29: 11902275.324 ops/s
# Warmup Iteration  30: 11900464.976 ops/s
Iteration   1: 11879885.611 ops/s
Iteration   2: 11856298.121 ops/s
Iteration   3: 11889686.596 ops/s
Iteration   4: 11866327.922 ops/s
Iteration   5: 11940159.746 ops/s
Iteration   6: 11861900.946 ops/s
Iteration   7: 11858317.811 ops/s
Iteration   8: 11922518.354 ops/s
Iteration   9: 11914575.364 ops/s
Iteration  10: 11880198.958 ops/s
Iteration  11: 11901087.223 ops/s
Iteration  12: 11825451.992 ops/s
Iteration  13: 11934015.778 ops/s
Iteration  14: 11859167.987 ops/s
Iteration  15: 11918044.069 ops/s
Iteration  16: 11936216.258 ops/s
Iteration  17: 11980520.436 ops/s
Iteration  18: 11925130.823 ops/s
Iteration  19: 11871604.075 ops/s
Iteration  20: 11844544.989 ops/s
Iteration  21: 11817990.289 ops/s
Iteration  22: 11910427.288 ops/s
Iteration  23: 11933642.912 ops/s
Iteration  24: 11903894.808 ops/s
Iteration  25: 11918918.426 ops/s
Iteration  26: 11878892.636 ops/s
Iteration  27: 11883680.909 ops/s
Iteration  28: 11863518.941 ops/s
Iteration  29: 11862602.950 ops/s
Iteration  30: 11820575.855 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small":
  11888659.936 ±(99.9%) 26234.940 ops/s [Average]
  (min, avg, max) = (11817990.289, 11888659.936, 11980520.436), stdev = 39267.226
  CI (99.9%): [11862424.996, 11914894.876] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_with_comparator_small  thrpt   30  11888659.936 ± 26234.940  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3047981.852 ops/s
# Warmup Iteration   2: 6752777.020 ops/s
# Warmup Iteration   3: 5765312.344 ops/s
# Warmup Iteration   4: 6880103.289 ops/s
# Warmup Iteration   5: 6870904.098 ops/s
# Warmup Iteration   6: 6891473.294 ops/s
# Warmup Iteration   7: 6848304.657 ops/s
# Warmup Iteration   8: 6855269.491 ops/s
# Warmup Iteration   9: 6869391.348 ops/s
# Warmup Iteration  10: 6895698.044 ops/s
# Warmup Iteration  11: 6837958.075 ops/s
# Warmup Iteration  12: 6896611.408 ops/s
# Warmup Iteration  13: 6885244.455 ops/s
# Warmup Iteration  14: 6865889.595 ops/s
# Warmup Iteration  15: 6873732.799 ops/s
# Warmup Iteration  16: 6897593.439 ops/s
# Warmup Iteration  17: 6821515.022 ops/s
# Warmup Iteration  18: 6821094.547 ops/s
# Warmup Iteration  19: 6800097.951 ops/s
# Warmup Iteration  20: 6770361.658 ops/s
# Warmup Iteration  21: 6817884.158 ops/s
# Warmup Iteration  22: 6808196.694 ops/s
# Warmup Iteration  23: 6828663.988 ops/s
# Warmup Iteration  24: 6852745.783 ops/s
# Warmup Iteration  25: 6803961.943 ops/s
# Warmup Iteration  26: 6811481.553 ops/s
# Warmup Iteration  27: 6820553.105 ops/s
# Warmup Iteration  28: 6808206.285 ops/s
# Warmup Iteration  29: 6773159.491 ops/s
# Warmup Iteration  30: 6835911.063 ops/s
Iteration   1: 6852821.926 ops/s
Iteration   2: 6845022.780 ops/s
Iteration   3: 6870878.610 ops/s
Iteration   4: 6746632.530 ops/s
Iteration   5: 6800079.675 ops/s
Iteration   6: 6848523.861 ops/s
Iteration   7: 6815575.484 ops/s
Iteration   8: 6792215.632 ops/s
Iteration   9: 6770349.184 ops/s
Iteration  10: 6838562.806 ops/s
Iteration  11: 6840816.979 ops/s
Iteration  12: 6823674.149 ops/s
Iteration  13: 6820230.527 ops/s
Iteration  14: 6847193.627 ops/s
Iteration  15: 6793653.571 ops/s
Iteration  16: 6867274.786 ops/s
Iteration  17: 6804388.322 ops/s
Iteration  18: 6851587.692 ops/s
Iteration  19: 6801330.602 ops/s
Iteration  20: 6839078.161 ops/s
Iteration  21: 6714114.783 ops/s
Iteration  22: 6818066.237 ops/s
Iteration  23: 6842312.717 ops/s
Iteration  24: 6841592.660 ops/s
Iteration  25: 6797076.106 ops/s
Iteration  26: 6861219.037 ops/s
Iteration  27: 6795744.034 ops/s
Iteration  28: 6816655.082 ops/s
Iteration  29: 6807746.752 ops/s
Iteration  30: 6860220.648 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sortThis_with_null":
  6820821.299 ±(99.9%) 23963.343 ops/s [Average]
  (min, avg, max) = (6714114.783, 6820821.299, 6870878.610), stdev = 35867.206
  CI (99.9%): [6796857.956, 6844784.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sortThis_with_null  thrpt   30  6820821.299 ± 23963.343  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3589107.322 ops/s
# Warmup Iteration   2: 7990835.015 ops/s
# Warmup Iteration   3: 6747536.790 ops/s
# Warmup Iteration   4: 8079998.827 ops/s
# Warmup Iteration   5: 8032232.598 ops/s
# Warmup Iteration   6: 8073297.606 ops/s
# Warmup Iteration   7: 8051887.567 ops/s
# Warmup Iteration   8: 8074254.876 ops/s
# Warmup Iteration   9: 8072586.710 ops/s
# Warmup Iteration  10: 8070343.994 ops/s
# Warmup Iteration  11: 8065169.619 ops/s
# Warmup Iteration  12: 8040338.753 ops/s
# Warmup Iteration  13: 8059158.985 ops/s
# Warmup Iteration  14: 8070260.400 ops/s
# Warmup Iteration  15: 8048677.462 ops/s
# Warmup Iteration  16: 8092389.519 ops/s
# Warmup Iteration  17: 8023427.232 ops/s
# Warmup Iteration  18: 8061657.911 ops/s
# Warmup Iteration  19: 8108733.859 ops/s
# Warmup Iteration  20: 8083520.801 ops/s
# Warmup Iteration  21: 8048546.784 ops/s
# Warmup Iteration  22: 8084258.333 ops/s
# Warmup Iteration  23: 8051664.439 ops/s
# Warmup Iteration  24: 8069309.690 ops/s
# Warmup Iteration  25: 8024131.929 ops/s
# Warmup Iteration  26: 8073395.458 ops/s
# Warmup Iteration  27: 8074513.912 ops/s
# Warmup Iteration  28: 8044116.606 ops/s
# Warmup Iteration  29: 8124469.820 ops/s
# Warmup Iteration  30: 8058517.047 ops/s
Iteration   1: 8090885.535 ops/s
Iteration   2: 8112037.204 ops/s
Iteration   3: 8060814.786 ops/s
Iteration   4: 8138479.698 ops/s
Iteration   5: 8085431.226 ops/s
Iteration   6: 8119620.215 ops/s
Iteration   7: 8082254.408 ops/s
Iteration   8: 7986033.539 ops/s
Iteration   9: 8031089.981 ops/s
Iteration  10: 8003477.795 ops/s
Iteration  11: 8067881.586 ops/s
Iteration  12: 8021744.324 ops/s
Iteration  13: 8035094.597 ops/s
Iteration  14: 8017038.616 ops/s
Iteration  15: 8082902.705 ops/s
Iteration  16: 8033212.715 ops/s
Iteration  17: 8005742.466 ops/s
Iteration  18: 8022777.598 ops/s
Iteration  19: 7993836.419 ops/s
Iteration  20: 8054292.148 ops/s
Iteration  21: 8026369.124 ops/s
Iteration  22: 8001478.156 ops/s
Iteration  23: 8084554.878 ops/s
Iteration  24: 8050237.016 ops/s
Iteration  25: 8052979.936 ops/s
Iteration  26: 8045247.692 ops/s
Iteration  27: 8076266.021 ops/s
Iteration  28: 8055853.519 ops/s
Iteration  29: 7972727.851 ops/s
Iteration  30: 8060225.926 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subList":
  8049019.589 ±(99.9%) 27123.305 ops/s [Average]
  (min, avg, max) = (7972727.851, 8049019.589, 8138479.698), stdev = 40596.889
  CI (99.9%): [8021896.284, 8076142.894] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_subList  thrpt   30  8049019.589 ± 27123.305  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 677733.936 ops/s
# Warmup Iteration   2: 704467.178 ops/s
# Warmup Iteration   3: 934590.979 ops/s
# Warmup Iteration   4: 933788.774 ops/s
# Warmup Iteration   5: 934508.726 ops/s
# Warmup Iteration   6: 922506.587 ops/s
# Warmup Iteration   7: 933783.203 ops/s
# Warmup Iteration   8: 932981.706 ops/s
# Warmup Iteration   9: 933531.586 ops/s
# Warmup Iteration  10: 940594.034 ops/s
# Warmup Iteration  11: 933219.081 ops/s
# Warmup Iteration  12: 782150.367 ops/s
# Warmup Iteration  13: 931011.710 ops/s
# Warmup Iteration  14: 935240.417 ops/s
# Warmup Iteration  15: 934667.725 ops/s
# Warmup Iteration  16: 925104.394 ops/s
# Warmup Iteration  17: 982748.373 ops/s
# Warmup Iteration  18: 980097.287 ops/s
# Warmup Iteration  19: 990223.048 ops/s
# Warmup Iteration  20: 984913.706 ops/s
# Warmup Iteration  21: 983142.855 ops/s
# Warmup Iteration  22: 980054.683 ops/s
# Warmup Iteration  23: 986438.891 ops/s
# Warmup Iteration  24: 980085.343 ops/s
# Warmup Iteration  25: 977828.251 ops/s
# Warmup Iteration  26: 986154.299 ops/s
# Warmup Iteration  27: 986644.078 ops/s
# Warmup Iteration  28: 979434.359 ops/s
# Warmup Iteration  29: 984073.434 ops/s
# Warmup Iteration  30: 985123.587 ops/s
Iteration   1: 975919.553 ops/s
Iteration   2: 980771.132 ops/s
Iteration   3: 979378.359 ops/s
Iteration   4: 978242.774 ops/s
Iteration   5: 979333.468 ops/s
Iteration   6: 978558.723 ops/s
Iteration   7: 964362.853 ops/s
Iteration   8: 986068.003 ops/s
Iteration   9: 986291.567 ops/s
Iteration  10: 992294.759 ops/s
Iteration  11: 983243.491 ops/s
Iteration  12: 988892.676 ops/s
Iteration  13: 982541.623 ops/s
Iteration  14: 982178.994 ops/s
Iteration  15: 991356.459 ops/s
Iteration  16: 988675.124 ops/s
Iteration  17: 987833.576 ops/s
Iteration  18: 985137.227 ops/s
Iteration  19: 988294.764 ops/s
Iteration  20: 985906.827 ops/s
Iteration  21: 989646.556 ops/s
Iteration  22: 987559.577 ops/s
Iteration  23: 985518.430 ops/s
Iteration  24: 980264.236 ops/s
Iteration  25: 984477.258 ops/s
Iteration  26: 987936.450 ops/s
Iteration  27: 982179.281 ops/s
Iteration  28: 985781.199 ops/s
Iteration  29: 990454.423 ops/s
Iteration  30: 984808.372 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException":
  984130.258 ±(99.9%) 3751.593 ops/s [Average]
  (min, avg, max) = (964362.853, 984130.258, 992294.759), stdev = 5615.208
  CI (99.9%): [980378.665, 987881.850] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_subListFromGreaterThanToException  thrpt   30  984130.258 ± 3751.593  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698186.797 ops/s
# Warmup Iteration   2: 728206.811 ops/s
# Warmup Iteration   3: 951580.188 ops/s
# Warmup Iteration   4: 952278.540 ops/s
# Warmup Iteration   5: 945584.400 ops/s
# Warmup Iteration   6: 938098.138 ops/s
# Warmup Iteration   7: 948638.507 ops/s
# Warmup Iteration   8: 947157.904 ops/s
# Warmup Iteration   9: 948468.975 ops/s
# Warmup Iteration  10: 948205.135 ops/s
# Warmup Iteration  11: 953003.427 ops/s
# Warmup Iteration  12: 797856.878 ops/s
# Warmup Iteration  13: 948570.648 ops/s
# Warmup Iteration  14: 949122.906 ops/s
# Warmup Iteration  15: 949218.929 ops/s
# Warmup Iteration  16: 949994.495 ops/s
# Warmup Iteration  17: 1000629.736 ops/s
# Warmup Iteration  18: 1003733.659 ops/s
# Warmup Iteration  19: 1006864.903 ops/s
# Warmup Iteration  20: 1004302.390 ops/s
# Warmup Iteration  21: 1006565.423 ops/s
# Warmup Iteration  22: 1010889.379 ops/s
# Warmup Iteration  23: 1011088.900 ops/s
# Warmup Iteration  24: 1008776.726 ops/s
# Warmup Iteration  25: 1007520.807 ops/s
# Warmup Iteration  26: 1004346.512 ops/s
# Warmup Iteration  27: 1011027.368 ops/s
# Warmup Iteration  28: 1008079.461 ops/s
# Warmup Iteration  29: 1008404.393 ops/s
# Warmup Iteration  30: 1004569.976 ops/s
Iteration   1: 1004584.166 ops/s
Iteration   2: 1010068.970 ops/s
Iteration   3: 1007144.922 ops/s
Iteration   4: 1008996.179 ops/s
Iteration   5: 1004583.894 ops/s
Iteration   6: 1011715.874 ops/s
Iteration   7: 1009612.663 ops/s
Iteration   8: 1011035.230 ops/s
Iteration   9: 1004737.248 ops/s
Iteration  10: 1012578.434 ops/s
Iteration  11: 999902.792 ops/s
Iteration  12: 1007731.994 ops/s
Iteration  13: 1004574.405 ops/s
Iteration  14: 1004375.933 ops/s
Iteration  15: 1005145.151 ops/s
Iteration  16: 1004254.357 ops/s
Iteration  17: 1006049.837 ops/s
Iteration  18: 1008382.126 ops/s
Iteration  19: 999549.765 ops/s
Iteration  20: 1007931.189 ops/s
Iteration  21: 1001460.587 ops/s
Iteration  22: 1007522.023 ops/s
Iteration  23: 1009208.523 ops/s
Iteration  24: 1002025.419 ops/s
Iteration  25: 1008500.012 ops/s
Iteration  26: 1006725.861 ops/s
Iteration  27: 1005685.943 ops/s
Iteration  28: 1005148.833 ops/s
Iteration  29: 1011948.353 ops/s
Iteration  30: 1007220.479 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException":
  1006613.372 ±(99.9%) 2249.102 ops/s [Average]
  (min, avg, max) = (999549.765, 1006613.372, 1012578.434), stdev = 3366.350
  CI (99.9%): [1004364.270, 1008862.474] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_subListFromOutOfBoundsException  thrpt   30  1006613.372 ± 2249.102  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697709.531 ops/s
# Warmup Iteration   2: 723545.339 ops/s
# Warmup Iteration   3: 942532.661 ops/s
# Warmup Iteration   4: 952742.478 ops/s
# Warmup Iteration   5: 952311.402 ops/s
# Warmup Iteration   6: 946917.711 ops/s
# Warmup Iteration   7: 952970.873 ops/s
# Warmup Iteration   8: 952950.294 ops/s
# Warmup Iteration   9: 952371.386 ops/s
# Warmup Iteration  10: 949623.479 ops/s
# Warmup Iteration  11: 947500.344 ops/s
# Warmup Iteration  12: 801549.704 ops/s
# Warmup Iteration  13: 948789.731 ops/s
# Warmup Iteration  14: 952711.475 ops/s
# Warmup Iteration  15: 953254.665 ops/s
# Warmup Iteration  16: 953289.208 ops/s
# Warmup Iteration  17: 1016032.346 ops/s
# Warmup Iteration  18: 1013999.879 ops/s
# Warmup Iteration  19: 1020241.773 ops/s
# Warmup Iteration  20: 1011685.038 ops/s
# Warmup Iteration  21: 1016102.328 ops/s
# Warmup Iteration  22: 1018632.319 ops/s
# Warmup Iteration  23: 1010094.948 ops/s
# Warmup Iteration  24: 1009065.132 ops/s
# Warmup Iteration  25: 1010172.126 ops/s
# Warmup Iteration  26: 1014124.303 ops/s
# Warmup Iteration  27: 1010400.004 ops/s
# Warmup Iteration  28: 1010715.066 ops/s
# Warmup Iteration  29: 1016177.274 ops/s
# Warmup Iteration  30: 1012722.066 ops/s
Iteration   1: 1008685.657 ops/s
Iteration   2: 1010454.842 ops/s
Iteration   3: 1014827.654 ops/s
Iteration   4: 1016343.488 ops/s
Iteration   5: 1011166.866 ops/s
Iteration   6: 1001498.717 ops/s
Iteration   7: 1015265.990 ops/s
Iteration   8: 1016361.057 ops/s
Iteration   9: 1011947.162 ops/s
Iteration  10: 999013.893 ops/s
Iteration  11: 1005477.021 ops/s
Iteration  12: 1009770.966 ops/s
Iteration  13: 1009447.051 ops/s
Iteration  14: 1006762.415 ops/s
Iteration  15: 1010458.405 ops/s
Iteration  16: 1009997.080 ops/s
Iteration  17: 1007049.351 ops/s
Iteration  18: 1016931.060 ops/s
Iteration  19: 1015396.859 ops/s
Iteration  20: 1014826.265 ops/s
Iteration  21: 1001054.771 ops/s
Iteration  22: 1012091.572 ops/s
Iteration  23: 1012550.949 ops/s
Iteration  24: 1014649.734 ops/s
Iteration  25: 1010797.762 ops/s
Iteration  26: 1014159.050 ops/s
Iteration  27: 1012838.016 ops/s
Iteration  28: 1009561.236 ops/s
Iteration  29: 1012875.010 ops/s
Iteration  30: 1012328.903 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException":
  1010819.627 ±(99.9%) 3050.855 ops/s [Average]
  (min, avg, max) = (999013.893, 1010819.627, 1016931.060), stdev = 4566.376
  CI (99.9%): [1007768.772, 1013870.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_subListToGreaterThanSizeException  thrpt   30  1010819.627 ± 3050.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1569838.303 ops/s
# Warmup Iteration   2: 2333765.432 ops/s
# Warmup Iteration   3: 2757956.827 ops/s
# Warmup Iteration   4: 2742614.317 ops/s
# Warmup Iteration   5: 2754791.395 ops/s
# Warmup Iteration   6: 2762846.349 ops/s
# Warmup Iteration   7: 2274254.243 ops/s
# Warmup Iteration   8: 2765679.663 ops/s
# Warmup Iteration   9: 2756935.163 ops/s
# Warmup Iteration  10: 2724431.472 ops/s
# Warmup Iteration  11: 2757197.152 ops/s
# Warmup Iteration  12: 2767856.636 ops/s
# Warmup Iteration  13: 2760478.391 ops/s
# Warmup Iteration  14: 2746959.520 ops/s
# Warmup Iteration  15: 2755257.137 ops/s
# Warmup Iteration  16: 2754132.031 ops/s
# Warmup Iteration  17: 2756509.724 ops/s
# Warmup Iteration  18: 2750388.013 ops/s
# Warmup Iteration  19: 2771719.634 ops/s
# Warmup Iteration  20: 2763486.818 ops/s
# Warmup Iteration  21: 2760847.981 ops/s
# Warmup Iteration  22: 2759955.177 ops/s
# Warmup Iteration  23: 2755292.123 ops/s
# Warmup Iteration  24: 2760230.818 ops/s
# Warmup Iteration  25: 2752113.911 ops/s
# Warmup Iteration  26: 2763304.141 ops/s
# Warmup Iteration  27: 2757420.813 ops/s
# Warmup Iteration  28: 2772132.010 ops/s
# Warmup Iteration  29: 2758034.302 ops/s
# Warmup Iteration  30: 2767115.529 ops/s
Iteration   1: 2782578.323 ops/s
Iteration   2: 2746432.496 ops/s
Iteration   3: 2759016.076 ops/s
Iteration   4: 2770998.095 ops/s
Iteration   5: 2775594.499 ops/s
Iteration   6: 2775750.529 ops/s
Iteration   7: 2758308.861 ops/s
Iteration   8: 2769939.813 ops/s
Iteration   9: 2768663.518 ops/s
Iteration  10: 2753481.635 ops/s
Iteration  11: 2760739.550 ops/s
Iteration  12: 2765600.194 ops/s
Iteration  13: 2772634.333 ops/s
Iteration  14: 2763415.161 ops/s
Iteration  15: 2753160.404 ops/s
Iteration  16: 2771305.180 ops/s
Iteration  17: 2776779.251 ops/s
Iteration  18: 2762447.471 ops/s
Iteration  19: 2771671.764 ops/s
Iteration  20: 2740726.089 ops/s
Iteration  21: 2767417.234 ops/s
Iteration  22: 2761937.720 ops/s
Iteration  23: 2754955.230 ops/s
Iteration  24: 2768297.906 ops/s
Iteration  25: 2767136.057 ops/s
Iteration  26: 2743129.689 ops/s
Iteration  27: 2746972.719 ops/s
Iteration  28: 2758269.849 ops/s
Iteration  29: 2757935.886 ops/s
Iteration  30: 2756085.919 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDouble":
  2762712.715 ±(99.9%) 6973.555 ops/s [Average]
  (min, avg, max) = (2740726.089, 2762712.715, 2782578.323), stdev = 10437.689
  CI (99.9%): [2755739.160, 2769686.270] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByDouble  thrpt   30  2762712.715 ± 6973.555  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52.099 ops/s
# Warmup Iteration   2: 56.380 ops/s
# Warmup Iteration   3: 72.753 ops/s
# Warmup Iteration   4: 79.855 ops/s
# Warmup Iteration   5: 82.833 ops/s
# Warmup Iteration   6: 80.820 ops/s
# Warmup Iteration   7: 78.291 ops/s
# Warmup Iteration   8: 78.120 ops/s
# Warmup Iteration   9: 78.271 ops/s
# Warmup Iteration  10: 78.465 ops/s
# Warmup Iteration  11: 78.489 ops/s
# Warmup Iteration  12: 73.955 ops/s
# Warmup Iteration  13: 69.281 ops/s
# Warmup Iteration  14: 77.749 ops/s
# Warmup Iteration  15: 78.581 ops/s
# Warmup Iteration  16: 77.479 ops/s
# Warmup Iteration  17: 78.101 ops/s
# Warmup Iteration  18: 77.819 ops/s
# Warmup Iteration  19: 74.583 ops/s
# Warmup Iteration  20: 77.306 ops/s
# Warmup Iteration  21: 79.250 ops/s
# Warmup Iteration  22: 77.107 ops/s
# Warmup Iteration  23: 78.207 ops/s
# Warmup Iteration  24: 76.069 ops/s
# Warmup Iteration  25: 79.079 ops/s
# Warmup Iteration  26: 78.359 ops/s
# Warmup Iteration  27: 79.657 ops/s
# Warmup Iteration  28: 76.491 ops/s
# Warmup Iteration  29: 74.572 ops/s
# Warmup Iteration  30: 77.729 ops/s
Iteration   1: 78.893 ops/s
Iteration   2: 75.402 ops/s
Iteration   3: 77.721 ops/s
Iteration   4: 80.574 ops/s
Iteration   5: 79.408 ops/s
Iteration   6: 81.361 ops/s
Iteration   7: 79.185 ops/s
Iteration   8: 78.887 ops/s
Iteration   9: 82.538 ops/s
Iteration  10: 82.583 ops/s
Iteration  11: 80.495 ops/s
Iteration  12: 80.353 ops/s
Iteration  13: 77.103 ops/s
Iteration  14: 78.081 ops/s
Iteration  15: 76.383 ops/s
Iteration  16: 76.825 ops/s
Iteration  17: 76.805 ops/s
Iteration  18: 79.677 ops/s
Iteration  19: 78.467 ops/s
Iteration  20: 79.050 ops/s
Iteration  21: 79.576 ops/s
Iteration  22: 80.124 ops/s
Iteration  23: 80.117 ops/s
Iteration  24: 77.895 ops/s
Iteration  25: 77.140 ops/s
Iteration  26: 80.295 ops/s
Iteration  27: 79.195 ops/s
Iteration  28: 75.095 ops/s
Iteration  29: 76.559 ops/s
Iteration  30: 75.055 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  78.695 ±(99.9%) 1.342 ops/s [Average]
  (min, avg, max) = (75.055, 78.695, 82.583), stdev = 2.009
  CI (99.9%): [77.352, 80.037] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt   Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  78.695 ± 1.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1666349.248 ops/s
# Warmup Iteration   2: 2798058.817 ops/s
# Warmup Iteration   3: 3242654.314 ops/s
# Warmup Iteration   4: 3242369.398 ops/s
# Warmup Iteration   5: 3253416.227 ops/s
# Warmup Iteration   6: 2652069.409 ops/s
# Warmup Iteration   7: 3261442.377 ops/s
# Warmup Iteration   8: 3257810.247 ops/s
# Warmup Iteration   9: 3256274.746 ops/s
# Warmup Iteration  10: 3259965.393 ops/s
# Warmup Iteration  11: 3266630.147 ops/s
# Warmup Iteration  12: 3265387.610 ops/s
# Warmup Iteration  13: 3265130.538 ops/s
# Warmup Iteration  14: 3250323.508 ops/s
# Warmup Iteration  15: 3264968.619 ops/s
# Warmup Iteration  16: 3270113.327 ops/s
# Warmup Iteration  17: 3287738.067 ops/s
# Warmup Iteration  18: 3278234.206 ops/s
# Warmup Iteration  19: 3278922.654 ops/s
# Warmup Iteration  20: 3291017.719 ops/s
# Warmup Iteration  21: 3282430.043 ops/s
# Warmup Iteration  22: 3281094.519 ops/s
# Warmup Iteration  23: 3276874.268 ops/s
# Warmup Iteration  24: 3266160.536 ops/s
# Warmup Iteration  25: 3282463.585 ops/s
# Warmup Iteration  26: 3286432.896 ops/s
# Warmup Iteration  27: 3278038.947 ops/s
# Warmup Iteration  28: 3278733.432 ops/s
# Warmup Iteration  29: 3262105.825 ops/s
# Warmup Iteration  30: 3276598.843 ops/s
Iteration   1: 3287870.471 ops/s
Iteration   2: 3282982.064 ops/s
Iteration   3: 3289960.290 ops/s
Iteration   4: 3285725.047 ops/s
Iteration   5: 3278056.425 ops/s
Iteration   6: 3283506.414 ops/s
Iteration   7: 3290141.337 ops/s
Iteration   8: 3268277.221 ops/s
Iteration   9: 3275357.557 ops/s
Iteration  10: 3279901.771 ops/s
Iteration  11: 3280365.308 ops/s
Iteration  12: 3296254.418 ops/s
Iteration  13: 3280217.771 ops/s
Iteration  14: 3283409.943 ops/s
Iteration  15: 3284873.489 ops/s
Iteration  16: 3282719.798 ops/s
Iteration  17: 3275748.339 ops/s
Iteration  18: 3284438.345 ops/s
Iteration  19: 3292968.944 ops/s
Iteration  20: 3281682.292 ops/s
Iteration  21: 3264350.452 ops/s
Iteration  22: 3282757.036 ops/s
Iteration  23: 3277262.637 ops/s
Iteration  24: 3273268.077 ops/s
Iteration  25: 3252110.338 ops/s
Iteration  26: 3230621.629 ops/s
Iteration  27: 3257597.184 ops/s
Iteration  28: 3256593.818 ops/s
Iteration  29: 3282648.591 ops/s
Iteration  30: 3268653.935 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloat":
  3277010.698 ±(99.9%) 9146.806 ops/s [Average]
  (min, avg, max) = (3230621.629, 3277010.698, 3296254.418), stdev = 13690.510
  CI (99.9%): [3267863.892, 3286157.504] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByFloat  thrpt   30  3277010.698 ± 9146.806  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53.048 ops/s
# Warmup Iteration   2: 58.405 ops/s
# Warmup Iteration   3: 73.335 ops/s
# Warmup Iteration   4: 79.630 ops/s
# Warmup Iteration   5: 80.407 ops/s
# Warmup Iteration   6: 78.529 ops/s
# Warmup Iteration   7: 78.409 ops/s
# Warmup Iteration   8: 79.760 ops/s
# Warmup Iteration   9: 78.965 ops/s
# Warmup Iteration  10: 79.552 ops/s
# Warmup Iteration  11: 80.810 ops/s
# Warmup Iteration  12: 72.933 ops/s
# Warmup Iteration  13: 74.241 ops/s
# Warmup Iteration  14: 81.844 ops/s
# Warmup Iteration  15: 84.733 ops/s
# Warmup Iteration  16: 83.510 ops/s
# Warmup Iteration  17: 85.778 ops/s
# Warmup Iteration  18: 83.196 ops/s
# Warmup Iteration  19: 83.162 ops/s
# Warmup Iteration  20: 82.787 ops/s
# Warmup Iteration  21: 80.787 ops/s
# Warmup Iteration  22: 81.468 ops/s
# Warmup Iteration  23: 79.485 ops/s
# Warmup Iteration  24: 82.239 ops/s
# Warmup Iteration  25: 82.046 ops/s
# Warmup Iteration  26: 81.951 ops/s
# Warmup Iteration  27: 77.618 ops/s
# Warmup Iteration  28: 77.446 ops/s
# Warmup Iteration  29: 81.820 ops/s
# Warmup Iteration  30: 83.976 ops/s
Iteration   1: 81.142 ops/s
Iteration   2: 83.625 ops/s
Iteration   3: 82.039 ops/s
Iteration   4: 82.521 ops/s
Iteration   5: 79.608 ops/s
Iteration   6: 80.947 ops/s
Iteration   7: 82.891 ops/s
Iteration   8: 85.239 ops/s
Iteration   9: 83.675 ops/s
Iteration  10: 83.126 ops/s
Iteration  11: 81.474 ops/s
Iteration  12: 83.211 ops/s
Iteration  13: 78.614 ops/s
Iteration  14: 80.695 ops/s
Iteration  15: 82.254 ops/s
Iteration  16: 80.758 ops/s
Iteration  17: 83.049 ops/s
Iteration  18: 81.963 ops/s
Iteration  19: 84.795 ops/s
Iteration  20: 84.116 ops/s
Iteration  21: 82.166 ops/s
Iteration  22: 81.650 ops/s
Iteration  23: 81.432 ops/s
Iteration  24: 85.475 ops/s
Iteration  25: 81.832 ops/s
Iteration  26: 81.227 ops/s
Iteration  27: 83.542 ops/s
Iteration  28: 84.602 ops/s
Iteration  29: 83.838 ops/s
Iteration  30: 83.283 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  82.493 ±(99.9%) 1.080 ops/s [Average]
  (min, avg, max) = (78.614, 82.493, 85.475), stdev = 1.617
  CI (99.9%): [81.413, 83.573] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt   Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  82.493 ± 1.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3084956.773 ops/s
# Warmup Iteration   2: 6323838.632 ops/s
# Warmup Iteration   3: 6599359.641 ops/s
# Warmup Iteration   4: 6637330.068 ops/s
# Warmup Iteration   5: 5494422.628 ops/s
# Warmup Iteration   6: 6636610.684 ops/s
# Warmup Iteration   7: 6615651.206 ops/s
# Warmup Iteration   8: 6658800.363 ops/s
# Warmup Iteration   9: 6675546.295 ops/s
# Warmup Iteration  10: 6662340.534 ops/s
# Warmup Iteration  11: 6621354.909 ops/s
# Warmup Iteration  12: 6634435.071 ops/s
# Warmup Iteration  13: 6650189.095 ops/s
# Warmup Iteration  14: 6640270.271 ops/s
# Warmup Iteration  15: 6640375.962 ops/s
# Warmup Iteration  16: 6650410.272 ops/s
# Warmup Iteration  17: 6659257.334 ops/s
# Warmup Iteration  18: 6647560.070 ops/s
# Warmup Iteration  19: 6661811.022 ops/s
# Warmup Iteration  20: 6644963.003 ops/s
# Warmup Iteration  21: 6626078.888 ops/s
# Warmup Iteration  22: 6638877.185 ops/s
# Warmup Iteration  23: 6649391.101 ops/s
# Warmup Iteration  24: 6641440.664 ops/s
# Warmup Iteration  25: 6644069.542 ops/s
# Warmup Iteration  26: 6651504.831 ops/s
# Warmup Iteration  27: 6634166.060 ops/s
# Warmup Iteration  28: 6628725.257 ops/s
# Warmup Iteration  29: 6663151.429 ops/s
# Warmup Iteration  30: 6635923.690 ops/s
Iteration   1: 6645177.847 ops/s
Iteration   2: 6655359.745 ops/s
Iteration   3: 6657347.950 ops/s
Iteration   4: 6677494.625 ops/s
Iteration   5: 6681786.213 ops/s
Iteration   6: 6602619.521 ops/s
Iteration   7: 6650064.909 ops/s
Iteration   8: 6649738.567 ops/s
Iteration   9: 6656743.529 ops/s
Iteration  10: 6665466.456 ops/s
Iteration  11: 6710667.612 ops/s
Iteration  12: 6684764.752 ops/s
Iteration  13: 6680544.122 ops/s
Iteration  14: 6670168.741 ops/s
Iteration  15: 6700065.693 ops/s
Iteration  16: 6640699.719 ops/s
Iteration  17: 6667400.756 ops/s
Iteration  18: 6655646.349 ops/s
Iteration  19: 6622733.560 ops/s
Iteration  20: 6640156.489 ops/s
Iteration  21: 6662262.431 ops/s
Iteration  22: 6647089.002 ops/s
Iteration  23: 6659287.172 ops/s
Iteration  24: 6668931.686 ops/s
Iteration  25: 6659012.983 ops/s
Iteration  26: 6665304.021 ops/s
Iteration  27: 6686301.090 ops/s
Iteration  28: 6683820.688 ops/s
Iteration  29: 6690745.721 ops/s
Iteration  30: 6658356.981 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByInt":
  6663191.964 ±(99.9%) 14830.201 ops/s [Average]
  (min, avg, max) = (6602619.521, 6663191.964, 6710667.612), stdev = 22197.149
  CI (99.9%): [6648361.763, 6678022.166] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByInt  thrpt   30  6663191.964 ± 14830.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3069074.937 ops/s
# Warmup Iteration   2: 6271064.155 ops/s
# Warmup Iteration   3: 6606907.292 ops/s
# Warmup Iteration   4: 6631341.549 ops/s
# Warmup Iteration   5: 5476917.414 ops/s
# Warmup Iteration   6: 6594897.234 ops/s
# Warmup Iteration   7: 6597074.485 ops/s
# Warmup Iteration   8: 6646240.324 ops/s
# Warmup Iteration   9: 6653485.080 ops/s
# Warmup Iteration  10: 6639954.099 ops/s
# Warmup Iteration  11: 6627080.121 ops/s
# Warmup Iteration  12: 6640320.462 ops/s
# Warmup Iteration  13: 6597764.912 ops/s
# Warmup Iteration  14: 6604098.058 ops/s
# Warmup Iteration  15: 6636132.618 ops/s
# Warmup Iteration  16: 6629876.798 ops/s
# Warmup Iteration  17: 6615607.381 ops/s
# Warmup Iteration  18: 6641315.837 ops/s
# Warmup Iteration  19: 6642541.409 ops/s
# Warmup Iteration  20: 6659309.742 ops/s
# Warmup Iteration  21: 6631987.233 ops/s
# Warmup Iteration  22: 6661441.903 ops/s
# Warmup Iteration  23: 6650894.042 ops/s
# Warmup Iteration  24: 6654525.266 ops/s
# Warmup Iteration  25: 6661547.942 ops/s
# Warmup Iteration  26: 6635197.483 ops/s
# Warmup Iteration  27: 6649866.347 ops/s
# Warmup Iteration  28: 6646417.457 ops/s
# Warmup Iteration  29: 6654169.534 ops/s
# Warmup Iteration  30: 6637644.225 ops/s
Iteration   1: 6645858.251 ops/s
Iteration   2: 6626696.802 ops/s
Iteration   3: 6624657.926 ops/s
Iteration   4: 6622537.282 ops/s
Iteration   5: 6607502.523 ops/s
Iteration   6: 6667275.912 ops/s
Iteration   7: 6643966.677 ops/s
Iteration   8: 6660255.804 ops/s
Iteration   9: 6654684.824 ops/s
Iteration  10: 6674071.912 ops/s
Iteration  11: 6667719.711 ops/s
Iteration  12: 6654441.996 ops/s
Iteration  13: 6633970.022 ops/s
Iteration  14: 6663057.429 ops/s
Iteration  15: 6633262.214 ops/s
Iteration  16: 6653682.925 ops/s
Iteration  17: 6635613.416 ops/s
Iteration  18: 6618182.760 ops/s
Iteration  19: 6641001.331 ops/s
Iteration  20: 6614974.892 ops/s
Iteration  21: 6637595.471 ops/s
Iteration  22: 6646490.344 ops/s
Iteration  23: 6589085.473 ops/s
Iteration  24: 6657159.982 ops/s
Iteration  25: 6651308.518 ops/s
Iteration  26: 6707168.078 ops/s
Iteration  27: 6678442.025 ops/s
Iteration  28: 6658477.371 ops/s
Iteration  29: 6693676.665 ops/s
Iteration  30: 6644420.512 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumByLong":
  6646907.968 ±(99.9%) 16699.018 ops/s [Average]
  (min, avg, max) = (6589085.473, 6646907.968, 6707168.078), stdev = 24994.307
  CI (99.9%): [6630208.950, 6663606.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumByLong  thrpt   30  6646907.968 ± 16699.018  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12331101.059 ops/s
# Warmup Iteration   2: 25990230.201 ops/s
# Warmup Iteration   3: 25565170.396 ops/s
# Warmup Iteration   4: 21530527.066 ops/s
# Warmup Iteration   5: 25535085.774 ops/s
# Warmup Iteration   6: 25558186.453 ops/s
# Warmup Iteration   7: 25533702.347 ops/s
# Warmup Iteration   8: 25340948.776 ops/s
# Warmup Iteration   9: 25455869.909 ops/s
# Warmup Iteration  10: 25404865.811 ops/s
# Warmup Iteration  11: 25448847.276 ops/s
# Warmup Iteration  12: 25575886.441 ops/s
# Warmup Iteration  13: 25515975.543 ops/s
# Warmup Iteration  14: 25409917.634 ops/s
# Warmup Iteration  15: 25423068.684 ops/s
# Warmup Iteration  16: 25498305.850 ops/s
# Warmup Iteration  17: 25418304.488 ops/s
# Warmup Iteration  18: 25460802.398 ops/s
# Warmup Iteration  19: 25458294.085 ops/s
# Warmup Iteration  20: 25507034.267 ops/s
# Warmup Iteration  21: 25483477.802 ops/s
# Warmup Iteration  22: 25526785.716 ops/s
# Warmup Iteration  23: 25454549.958 ops/s
# Warmup Iteration  24: 25459208.165 ops/s
# Warmup Iteration  25: 25445948.803 ops/s
# Warmup Iteration  26: 25466780.155 ops/s
# Warmup Iteration  27: 25425439.476 ops/s
# Warmup Iteration  28: 25473870.892 ops/s
# Warmup Iteration  29: 25578813.839 ops/s
# Warmup Iteration  30: 25485543.922 ops/s
Iteration   1: 25347947.656 ops/s
Iteration   2: 25564967.484 ops/s
Iteration   3: 25559298.574 ops/s
Iteration   4: 25563896.454 ops/s
Iteration   5: 25465983.023 ops/s
Iteration   6: 25625676.804 ops/s
Iteration   7: 25620541.600 ops/s
Iteration   8: 25510873.083 ops/s
Iteration   9: 25518260.193 ops/s
Iteration  10: 25518816.302 ops/s
Iteration  11: 25535632.998 ops/s
Iteration  12: 25504114.800 ops/s
Iteration  13: 25542219.310 ops/s
Iteration  14: 25471714.453 ops/s
Iteration  15: 25459965.535 ops/s
Iteration  16: 25434494.546 ops/s
Iteration  17: 25487525.395 ops/s
Iteration  18: 25413569.749 ops/s
Iteration  19: 25550689.298 ops/s
Iteration  20: 25548415.331 ops/s
Iteration  21: 25476502.131 ops/s
Iteration  22: 25541522.165 ops/s
Iteration  23: 25467869.202 ops/s
Iteration  24: 25646820.212 ops/s
Iteration  25: 25371359.477 ops/s
Iteration  26: 25510422.858 ops/s
Iteration  27: 25583784.309 ops/s
Iteration  28: 25558498.965 ops/s
Iteration  29: 25469463.987 ops/s
Iteration  30: 25491637.724 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDouble":
  25512082.787 ±(99.9%) 46107.645 ops/s [Average]
  (min, avg, max) = (25347947.656, 25512082.787, 25646820.212), stdev = 69011.757
  CI (99.9%): [25465975.143, 25558190.432] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumDouble  thrpt   30  25512082.787 ± 46107.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166.232 ops/s
# Warmup Iteration   2: 187.457 ops/s
# Warmup Iteration   3: 240.787 ops/s
# Warmup Iteration   4: 248.314 ops/s
# Warmup Iteration   5: 247.925 ops/s
# Warmup Iteration   6: 247.201 ops/s
# Warmup Iteration   7: 247.585 ops/s
# Warmup Iteration   8: 248.868 ops/s
# Warmup Iteration   9: 247.263 ops/s
# Warmup Iteration  10: 246.913 ops/s
# Warmup Iteration  11: 249.463 ops/s
# Warmup Iteration  12: 208.842 ops/s
# Warmup Iteration  13: 250.171 ops/s
# Warmup Iteration  14: 249.372 ops/s
# Warmup Iteration  15: 249.547 ops/s
# Warmup Iteration  16: 249.058 ops/s
# Warmup Iteration  17: 248.810 ops/s
# Warmup Iteration  18: 248.767 ops/s
# Warmup Iteration  19: 248.893 ops/s
# Warmup Iteration  20: 249.378 ops/s
# Warmup Iteration  21: 249.379 ops/s
# Warmup Iteration  22: 248.619 ops/s
# Warmup Iteration  23: 249.108 ops/s
# Warmup Iteration  24: 247.131 ops/s
# Warmup Iteration  25: 247.548 ops/s
# Warmup Iteration  26: 247.939 ops/s
# Warmup Iteration  27: 248.671 ops/s
# Warmup Iteration  28: 248.040 ops/s
# Warmup Iteration  29: 247.467 ops/s
# Warmup Iteration  30: 247.871 ops/s
Iteration   1: 249.103 ops/s
Iteration   2: 249.814 ops/s
Iteration   3: 249.835 ops/s
Iteration   4: 249.214 ops/s
Iteration   5: 246.029 ops/s
Iteration   6: 249.116 ops/s
Iteration   7: 249.198 ops/s
Iteration   8: 248.771 ops/s
Iteration   9: 247.929 ops/s
Iteration  10: 249.452 ops/s
Iteration  11: 248.877 ops/s
Iteration  12: 247.515 ops/s
Iteration  13: 250.181 ops/s
Iteration  14: 248.460 ops/s
Iteration  15: 251.366 ops/s
Iteration  16: 247.474 ops/s
Iteration  17: 249.963 ops/s
Iteration  18: 248.931 ops/s
Iteration  19: 250.336 ops/s
Iteration  20: 248.743 ops/s
Iteration  21: 248.819 ops/s
Iteration  22: 249.423 ops/s
Iteration  23: 247.556 ops/s
Iteration  24: 249.704 ops/s
Iteration  25: 249.793 ops/s
Iteration  26: 245.925 ops/s
Iteration  27: 248.710 ops/s
Iteration  28: 247.048 ops/s
Iteration  29: 247.880 ops/s
Iteration  30: 248.912 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  248.803 ±(99.9%) 0.815 ops/s [Average]
  (min, avg, max) = (245.925, 248.803, 251.366), stdev = 1.220
  CI (99.9%): [247.987, 249.618] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt    Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  248.803 ± 0.815  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 196.231 ops/s
# Warmup Iteration   2: 236.724 ops/s
# Warmup Iteration   3: 311.886 ops/s
# Warmup Iteration   4: 311.204 ops/s
# Warmup Iteration   5: 308.981 ops/s
# Warmup Iteration   6: 314.243 ops/s
# Warmup Iteration   7: 315.016 ops/s
# Warmup Iteration   8: 313.183 ops/s
# Warmup Iteration   9: 312.131 ops/s
# Warmup Iteration  10: 247.704 ops/s
# Warmup Iteration  11: 297.279 ops/s
# Warmup Iteration  12: 295.245 ops/s
# Warmup Iteration  13: 294.739 ops/s
# Warmup Iteration  14: 294.989 ops/s
# Warmup Iteration  15: 296.079 ops/s
# Warmup Iteration  16: 298.176 ops/s
# Warmup Iteration  17: 295.831 ops/s
# Warmup Iteration  18: 293.425 ops/s
# Warmup Iteration  19: 294.334 ops/s
# Warmup Iteration  20: 292.791 ops/s
# Warmup Iteration  21: 295.378 ops/s
# Warmup Iteration  22: 295.774 ops/s
# Warmup Iteration  23: 295.787 ops/s
# Warmup Iteration  24: 296.755 ops/s
# Warmup Iteration  25: 296.829 ops/s
# Warmup Iteration  26: 295.921 ops/s
# Warmup Iteration  27: 295.512 ops/s
# Warmup Iteration  28: 295.607 ops/s
# Warmup Iteration  29: 294.685 ops/s
# Warmup Iteration  30: 292.405 ops/s
Iteration   1: 296.212 ops/s
Iteration   2: 298.834 ops/s
Iteration   3: 299.034 ops/s
Iteration   4: 295.674 ops/s
Iteration   5: 297.243 ops/s
Iteration   6: 298.454 ops/s
Iteration   7: 296.559 ops/s
Iteration   8: 295.488 ops/s
Iteration   9: 296.934 ops/s
Iteration  10: 296.465 ops/s
Iteration  11: 293.870 ops/s
Iteration  12: 298.374 ops/s
Iteration  13: 296.139 ops/s
Iteration  14: 298.019 ops/s
Iteration  15: 295.516 ops/s
Iteration  16: 295.879 ops/s
Iteration  17: 292.323 ops/s
Iteration  18: 291.776 ops/s
Iteration  19: 293.599 ops/s
Iteration  20: 296.389 ops/s
Iteration  21: 295.402 ops/s
Iteration  22: 296.639 ops/s
Iteration  23: 297.855 ops/s
Iteration  24: 296.943 ops/s
Iteration  25: 294.849 ops/s
Iteration  26: 297.171 ops/s
Iteration  27: 297.680 ops/s
Iteration  28: 297.054 ops/s
Iteration  29: 298.288 ops/s
Iteration  30: 298.235 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  296.430 ±(99.9%) 1.208 ops/s [Average]
  (min, avg, max) = (291.776, 296.430, 299.034), stdev = 1.808
  CI (99.9%): [295.222, 297.638] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt    Score   Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  296.430 ± 1.208  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11302073.715 ops/s
# Warmup Iteration   2: 21709185.266 ops/s
# Warmup Iteration   3: 21530799.746 ops/s
# Warmup Iteration   4: 21446540.247 ops/s
# Warmup Iteration   5: 17963772.452 ops/s
# Warmup Iteration   6: 21365310.812 ops/s
# Warmup Iteration   7: 21377404.224 ops/s
# Warmup Iteration   8: 21283737.673 ops/s
# Warmup Iteration   9: 21423886.940 ops/s
# Warmup Iteration  10: 21364912.682 ops/s
# Warmup Iteration  11: 21402223.944 ops/s
# Warmup Iteration  12: 21296404.877 ops/s
# Warmup Iteration  13: 21276167.947 ops/s
# Warmup Iteration  14: 21398014.227 ops/s
# Warmup Iteration  15: 21325391.565 ops/s
# Warmup Iteration  16: 21449179.551 ops/s
# Warmup Iteration  17: 21596892.916 ops/s
# Warmup Iteration  18: 21494647.554 ops/s
# Warmup Iteration  19: 21482836.556 ops/s
# Warmup Iteration  20: 21484355.355 ops/s
# Warmup Iteration  21: 21591643.634 ops/s
# Warmup Iteration  22: 21540452.753 ops/s
# Warmup Iteration  23: 21540809.703 ops/s
# Warmup Iteration  24: 21492367.268 ops/s
# Warmup Iteration  25: 21577324.060 ops/s
# Warmup Iteration  26: 21465716.037 ops/s
# Warmup Iteration  27: 21513001.010 ops/s
# Warmup Iteration  28: 21481473.299 ops/s
# Warmup Iteration  29: 21604083.581 ops/s
# Warmup Iteration  30: 21542466.562 ops/s
Iteration   1: 21602693.547 ops/s
Iteration   2: 21586779.448 ops/s
Iteration   3: 21629849.675 ops/s
Iteration   4: 21672128.934 ops/s
Iteration   5: 21493953.052 ops/s
Iteration   6: 21510578.512 ops/s
Iteration   7: 21661026.314 ops/s
Iteration   8: 21438772.697 ops/s
Iteration   9: 21514013.542 ops/s
Iteration  10: 21502872.972 ops/s
Iteration  11: 21626185.099 ops/s
Iteration  12: 21468516.891 ops/s
Iteration  13: 21617552.162 ops/s
Iteration  14: 21678745.605 ops/s
Iteration  15: 21600786.174 ops/s
Iteration  16: 21608140.711 ops/s
Iteration  17: 21646993.746 ops/s
Iteration  18: 21621719.448 ops/s
Iteration  19: 21610185.579 ops/s
Iteration  20: 21543251.214 ops/s
Iteration  21: 21589342.758 ops/s
Iteration  22: 21692314.341 ops/s
Iteration  23: 21585359.891 ops/s
Iteration  24: 21595766.961 ops/s
Iteration  25: 21635109.870 ops/s
Iteration  26: 21613909.375 ops/s
Iteration  27: 21533969.074 ops/s
Iteration  28: 21592082.586 ops/s
Iteration  29: 21499569.410 ops/s
Iteration  30: 21606038.974 ops/s


Result "org.eclipse.collections.impl.list.fixed.ArrayAdapterTest._Benchmark.benchmark_sumFloat":
  21585940.285 ±(99.9%) 43250.006 ops/s [Average]
  (min, avg, max) = (21438772.697, 21585940.285, 21692314.341), stdev = 64734.578
  CI (99.9%): [21542690.279, 21629190.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
ArrayAdapterTest._Benchmark.benchmark_sumFloat  thrpt   30  21585940.285 ± 43250.006  ops/s
----------------------------------------
