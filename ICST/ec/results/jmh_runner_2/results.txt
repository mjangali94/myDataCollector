=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 347499.460 ops/s
# Warmup Iteration   2: 561958.939 ops/s
# Warmup Iteration   3: 705728.876 ops/s
# Warmup Iteration   4: 701181.666 ops/s
# Warmup Iteration   5: 703935.616 ops/s
# Warmup Iteration   6: 706432.416 ops/s
# Warmup Iteration   7: 578209.473 ops/s
# Warmup Iteration   8: 705678.845 ops/s
# Warmup Iteration   9: 706800.026 ops/s
# Warmup Iteration  10: 706422.271 ops/s
# Warmup Iteration  11: 708923.479 ops/s
# Warmup Iteration  12: 709499.841 ops/s
# Warmup Iteration  13: 707773.465 ops/s
# Warmup Iteration  14: 708438.023 ops/s
# Warmup Iteration  15: 708313.868 ops/s
# Warmup Iteration  16: 710905.108 ops/s
# Warmup Iteration  17: 710727.882 ops/s
# Warmup Iteration  18: 707558.000 ops/s
# Warmup Iteration  19: 710390.308 ops/s
# Warmup Iteration  20: 705546.379 ops/s
# Warmup Iteration  21: 710605.295 ops/s
# Warmup Iteration  22: 707222.078 ops/s
# Warmup Iteration  23: 708310.824 ops/s
# Warmup Iteration  24: 708683.358 ops/s
# Warmup Iteration  25: 708122.439 ops/s
# Warmup Iteration  26: 705730.489 ops/s
# Warmup Iteration  27: 707494.570 ops/s
# Warmup Iteration  28: 702657.982 ops/s
# Warmup Iteration  29: 710465.507 ops/s
# Warmup Iteration  30: 706664.899 ops/s
Iteration   1: 708980.732 ops/s
Iteration   2: 706571.577 ops/s
Iteration   3: 709534.754 ops/s
Iteration   4: 714341.670 ops/s
Iteration   5: 705972.451 ops/s
Iteration   6: 702448.152 ops/s
Iteration   7: 708134.821 ops/s
Iteration   8: 710452.738 ops/s
Iteration   9: 711246.101 ops/s
Iteration  10: 705513.298 ops/s
Iteration  11: 706336.013 ops/s
Iteration  12: 706885.880 ops/s
Iteration  13: 705333.791 ops/s
Iteration  14: 709553.235 ops/s
Iteration  15: 707133.221 ops/s
Iteration  16: 707505.141 ops/s
Iteration  17: 705280.190 ops/s
Iteration  18: 713341.035 ops/s
Iteration  19: 709678.121 ops/s
Iteration  20: 710390.192 ops/s
Iteration  21: 709630.665 ops/s
Iteration  22: 708812.096 ops/s
Iteration  23: 707806.230 ops/s
Iteration  24: 706773.546 ops/s
Iteration  25: 703756.876 ops/s
Iteration  26: 707439.218 ops/s
Iteration  27: 710967.965 ops/s
Iteration  28: 709780.756 ops/s
Iteration  29: 704210.928 ops/s
Iteration  30: 705669.462 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_large_size":
  707982.695 ±(99.9%) 1828.366 ops/s [Average]
  (min, avg, max) = (702448.152, 707982.695, 714341.670), stdev = 2736.612
  CI (99.9%): [706154.329, 709811.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  707982.695 ± 1828.366  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1189189.285 ops/s
# Warmup Iteration   2: 2615964.853 ops/s
# Warmup Iteration   3: 2864588.484 ops/s
# Warmup Iteration   4: 2876504.515 ops/s
# Warmup Iteration   5: 2370305.876 ops/s
# Warmup Iteration   6: 2883427.639 ops/s
# Warmup Iteration   7: 2881536.731 ops/s
# Warmup Iteration   8: 2878960.995 ops/s
# Warmup Iteration   9: 2874603.131 ops/s
# Warmup Iteration  10: 2874069.929 ops/s
# Warmup Iteration  11: 2877634.414 ops/s
# Warmup Iteration  12: 2876351.143 ops/s
# Warmup Iteration  13: 2877631.886 ops/s
# Warmup Iteration  14: 2884147.119 ops/s
# Warmup Iteration  15: 2883007.161 ops/s
# Warmup Iteration  16: 2878217.672 ops/s
# Warmup Iteration  17: 2877516.266 ops/s
# Warmup Iteration  18: 2878958.351 ops/s
# Warmup Iteration  19: 2883777.937 ops/s
# Warmup Iteration  20: 2884003.134 ops/s
# Warmup Iteration  21: 2885073.677 ops/s
# Warmup Iteration  22: 2884777.065 ops/s
# Warmup Iteration  23: 2878418.694 ops/s
# Warmup Iteration  24: 2880129.846 ops/s
# Warmup Iteration  25: 2886316.694 ops/s
# Warmup Iteration  26: 2889441.268 ops/s
# Warmup Iteration  27: 2883603.233 ops/s
# Warmup Iteration  28: 2877366.980 ops/s
# Warmup Iteration  29: 2879758.446 ops/s
# Warmup Iteration  30: 2881409.312 ops/s
Iteration   1: 2879292.022 ops/s
Iteration   2: 2881775.895 ops/s
Iteration   3: 2880128.221 ops/s
Iteration   4: 2887940.962 ops/s
Iteration   5: 2877384.486 ops/s
Iteration   6: 2872850.961 ops/s
Iteration   7: 2881608.428 ops/s
Iteration   8: 2884736.450 ops/s
Iteration   9: 2874482.800 ops/s
Iteration  10: 2868068.622 ops/s
Iteration  11: 2880145.459 ops/s
Iteration  12: 2883383.910 ops/s
Iteration  13: 2881977.598 ops/s
Iteration  14: 2885086.399 ops/s
Iteration  15: 2880197.899 ops/s
Iteration  16: 2872307.378 ops/s
Iteration  17: 2879663.665 ops/s
Iteration  18: 2872714.615 ops/s
Iteration  19: 2875336.437 ops/s
Iteration  20: 2882389.208 ops/s
Iteration  21: 2886875.615 ops/s
Iteration  22: 2867372.769 ops/s
Iteration  23: 2880681.156 ops/s
Iteration  24: 2878562.940 ops/s
Iteration  25: 2873315.889 ops/s
Iteration  26: 2869843.330 ops/s
Iteration  27: 2872096.148 ops/s
Iteration  28: 2873908.473 ops/s
Iteration  29: 2884385.024 ops/s
Iteration  30: 2878668.288 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_single":
  2878239.368 ±(99.9%) 3697.661 ops/s [Average]
  (min, avg, max) = (2867372.769, 2878239.368, 2887940.962), stdev = 5534.486
  CI (99.9%): [2874541.707, 2881937.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_chunk_single  thrpt   30  2878239.368 ± 3697.661  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 486810.731 ops/s
# Warmup Iteration   2: 572565.944 ops/s
# Warmup Iteration   3: 725335.989 ops/s
# Warmup Iteration   4: 728920.407 ops/s
# Warmup Iteration   5: 721308.447 ops/s
# Warmup Iteration   6: 727987.061 ops/s
# Warmup Iteration   7: 726186.237 ops/s
# Warmup Iteration   8: 725880.978 ops/s
# Warmup Iteration   9: 697820.878 ops/s
# Warmup Iteration  10: 625774.064 ops/s
# Warmup Iteration  11: 724541.274 ops/s
# Warmup Iteration  12: 725873.537 ops/s
# Warmup Iteration  13: 722406.418 ops/s
# Warmup Iteration  14: 723796.482 ops/s
# Warmup Iteration  15: 724203.457 ops/s
# Warmup Iteration  16: 722462.602 ops/s
# Warmup Iteration  17: 758064.897 ops/s
# Warmup Iteration  18: 757188.448 ops/s
# Warmup Iteration  19: 757636.926 ops/s
# Warmup Iteration  20: 760236.241 ops/s
# Warmup Iteration  21: 755812.195 ops/s
# Warmup Iteration  22: 758067.108 ops/s
# Warmup Iteration  23: 758741.107 ops/s
# Warmup Iteration  24: 757511.038 ops/s
# Warmup Iteration  25: 756697.215 ops/s
# Warmup Iteration  26: 758699.162 ops/s
# Warmup Iteration  27: 758285.054 ops/s
# Warmup Iteration  28: 757412.977 ops/s
# Warmup Iteration  29: 756321.092 ops/s
# Warmup Iteration  30: 759292.657 ops/s
Iteration   1: 761293.805 ops/s
Iteration   2: 760362.931 ops/s
Iteration   3: 758353.568 ops/s
Iteration   4: 759344.652 ops/s
Iteration   5: 756392.692 ops/s
Iteration   6: 755442.159 ops/s
Iteration   7: 761295.324 ops/s
Iteration   8: 752289.604 ops/s
Iteration   9: 754503.448 ops/s
Iteration  10: 756514.681 ops/s
Iteration  11: 757687.423 ops/s
Iteration  12: 760344.814 ops/s
Iteration  13: 756417.099 ops/s
Iteration  14: 760737.539 ops/s
Iteration  15: 760449.761 ops/s
Iteration  16: 757854.028 ops/s
Iteration  17: 756821.314 ops/s
Iteration  18: 752596.288 ops/s
Iteration  19: 757189.252 ops/s
Iteration  20: 757190.398 ops/s
Iteration  21: 754916.177 ops/s
Iteration  22: 753104.528 ops/s
Iteration  23: 751814.927 ops/s
Iteration  24: 757739.811 ops/s
Iteration  25: 755618.257 ops/s
Iteration  26: 753318.380 ops/s
Iteration  27: 748936.942 ops/s
Iteration  28: 753032.776 ops/s
Iteration  29: 756210.966 ops/s
Iteration  30: 756732.814 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_chunk_zero_throws":
  756483.545 ±(99.9%) 2079.458 ops/s [Average]
  (min, avg, max) = (748936.942, 756483.545, 761295.324), stdev = 3112.435
  CI (99.9%): [754404.087, 758563.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  756483.545 ± 2079.458  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 637172.653 ops/s
# Warmup Iteration   2: 733242.985 ops/s
# Warmup Iteration   3: 931835.193 ops/s
# Warmup Iteration   4: 928529.494 ops/s
# Warmup Iteration   5: 933176.798 ops/s
# Warmup Iteration   6: 928904.096 ops/s
# Warmup Iteration   7: 930628.116 ops/s
# Warmup Iteration   8: 928198.830 ops/s
# Warmup Iteration   9: 850548.312 ops/s
# Warmup Iteration  10: 863064.128 ops/s
# Warmup Iteration  11: 934371.519 ops/s
# Warmup Iteration  12: 930543.617 ops/s
# Warmup Iteration  13: 929153.170 ops/s
# Warmup Iteration  14: 932846.524 ops/s
# Warmup Iteration  15: 935018.890 ops/s
# Warmup Iteration  16: 927355.583 ops/s
# Warmup Iteration  17: 987955.087 ops/s
# Warmup Iteration  18: 983687.040 ops/s
# Warmup Iteration  19: 985697.501 ops/s
# Warmup Iteration  20: 983492.564 ops/s
# Warmup Iteration  21: 987792.949 ops/s
# Warmup Iteration  22: 988144.539 ops/s
# Warmup Iteration  23: 982401.027 ops/s
# Warmup Iteration  24: 987963.170 ops/s
# Warmup Iteration  25: 987322.761 ops/s
# Warmup Iteration  26: 987505.398 ops/s
# Warmup Iteration  27: 987924.455 ops/s
# Warmup Iteration  28: 983984.743 ops/s
# Warmup Iteration  29: 980483.110 ops/s
# Warmup Iteration  30: 987389.568 ops/s
Iteration   1: 979923.016 ops/s
Iteration   2: 983990.273 ops/s
Iteration   3: 979412.763 ops/s
Iteration   4: 989677.392 ops/s
Iteration   5: 988242.917 ops/s
Iteration   6: 989321.566 ops/s
Iteration   7: 988028.929 ops/s
Iteration   8: 988860.149 ops/s
Iteration   9: 988930.562 ops/s
Iteration  10: 984038.384 ops/s
Iteration  11: 983662.341 ops/s
Iteration  12: 987961.710 ops/s
Iteration  13: 979765.701 ops/s
Iteration  14: 989581.280 ops/s
Iteration  15: 983316.378 ops/s
Iteration  16: 988536.161 ops/s
Iteration  17: 989199.035 ops/s
Iteration  18: 986728.547 ops/s
Iteration  19: 985085.579 ops/s
Iteration  20: 981634.391 ops/s
Iteration  21: 991335.223 ops/s
Iteration  22: 985388.337 ops/s
Iteration  23: 992392.817 ops/s
Iteration  24: 993383.132 ops/s
Iteration  25: 987328.631 ops/s
Iteration  26: 989496.216 ops/s
Iteration  27: 982892.190 ops/s
Iteration  28: 985300.405 ops/s
Iteration  29: 990543.570 ops/s
Iteration  30: 988343.634 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_clear":
  986743.374 ±(99.9%) 2487.168 ops/s [Average]
  (min, avg, max) = (979412.763, 986743.374, 993383.132), stdev = 3722.676
  CI (99.9%): [984256.206, 989230.542] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_clear  thrpt   30  986743.374 ± 2487.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 405838.944 ops/s
# Warmup Iteration   2: 817037.803 ops/s
# Warmup Iteration   3: 888690.236 ops/s
# Warmup Iteration   4: 892621.078 ops/s
# Warmup Iteration   5: 735351.455 ops/s
# Warmup Iteration   6: 896493.747 ops/s
# Warmup Iteration   7: 895588.597 ops/s
# Warmup Iteration   8: 895445.733 ops/s
# Warmup Iteration   9: 900162.053 ops/s
# Warmup Iteration  10: 894730.691 ops/s
# Warmup Iteration  11: 893559.167 ops/s
# Warmup Iteration  12: 895467.313 ops/s
# Warmup Iteration  13: 897565.392 ops/s
# Warmup Iteration  14: 891323.027 ops/s
# Warmup Iteration  15: 898313.747 ops/s
# Warmup Iteration  16: 897358.927 ops/s
# Warmup Iteration  17: 898269.759 ops/s
# Warmup Iteration  18: 897555.059 ops/s
# Warmup Iteration  19: 897514.136 ops/s
# Warmup Iteration  20: 896607.605 ops/s
# Warmup Iteration  21: 892163.546 ops/s
# Warmup Iteration  22: 897558.823 ops/s
# Warmup Iteration  23: 898552.245 ops/s
# Warmup Iteration  24: 893666.816 ops/s
# Warmup Iteration  25: 891598.602 ops/s
# Warmup Iteration  26: 898184.807 ops/s
# Warmup Iteration  27: 898971.620 ops/s
# Warmup Iteration  28: 895491.064 ops/s
# Warmup Iteration  29: 894672.415 ops/s
# Warmup Iteration  30: 897496.406 ops/s
Iteration   1: 898226.030 ops/s
Iteration   2: 896485.264 ops/s
Iteration   3: 891969.025 ops/s
Iteration   4: 904384.942 ops/s
Iteration   5: 899395.750 ops/s
Iteration   6: 894585.326 ops/s
Iteration   7: 899040.087 ops/s
Iteration   8: 897789.787 ops/s
Iteration   9: 897801.850 ops/s
Iteration  10: 894605.702 ops/s
Iteration  11: 897198.313 ops/s
Iteration  12: 895355.877 ops/s
Iteration  13: 900642.861 ops/s
Iteration  14: 897029.882 ops/s
Iteration  15: 894688.986 ops/s
Iteration  16: 896086.329 ops/s
Iteration  17: 902170.192 ops/s
Iteration  18: 897735.235 ops/s
Iteration  19: 901026.662 ops/s
Iteration  20: 898883.625 ops/s
Iteration  21: 898380.744 ops/s
Iteration  22: 895209.157 ops/s
Iteration  23: 898220.140 ops/s
Iteration  24: 895425.682 ops/s
Iteration  25: 897867.815 ops/s
Iteration  26: 897000.743 ops/s
Iteration  27: 895697.522 ops/s
Iteration  28: 899907.384 ops/s
Iteration  29: 894406.785 ops/s
Iteration  30: 895864.747 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect":
  897436.082 ±(99.9%) 1736.307 ops/s [Average]
  (min, avg, max) = (891969.025, 897436.082, 904384.942), stdev = 2598.822
  CI (99.9%): [895699.775, 899172.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collect  thrpt   30  897436.082 ± 1736.307  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6995240.955 ops/s
# Warmup Iteration   2: 13738805.478 ops/s
# Warmup Iteration   3: 14544046.747 ops/s
# Warmup Iteration   4: 14599123.129 ops/s
# Warmup Iteration   5: 12016772.789 ops/s
# Warmup Iteration   6: 14689834.533 ops/s
# Warmup Iteration   7: 14642722.057 ops/s
# Warmup Iteration   8: 14643798.301 ops/s
# Warmup Iteration   9: 14663165.917 ops/s
# Warmup Iteration  10: 14698737.005 ops/s
# Warmup Iteration  11: 14645470.246 ops/s
# Warmup Iteration  12: 14647607.669 ops/s
# Warmup Iteration  13: 14614748.566 ops/s
# Warmup Iteration  14: 14661583.354 ops/s
# Warmup Iteration  15: 14678059.993 ops/s
# Warmup Iteration  16: 14633138.787 ops/s
# Warmup Iteration  17: 14693800.657 ops/s
# Warmup Iteration  18: 14649911.426 ops/s
# Warmup Iteration  19: 14613376.155 ops/s
# Warmup Iteration  20: 14668064.485 ops/s
# Warmup Iteration  21: 14744126.274 ops/s
# Warmup Iteration  22: 14646010.767 ops/s
# Warmup Iteration  23: 14652093.668 ops/s
# Warmup Iteration  24: 14635595.056 ops/s
# Warmup Iteration  25: 14652918.187 ops/s
# Warmup Iteration  26: 14630947.959 ops/s
# Warmup Iteration  27: 14717553.418 ops/s
# Warmup Iteration  28: 14664600.808 ops/s
# Warmup Iteration  29: 14653300.277 ops/s
# Warmup Iteration  30: 14727301.936 ops/s
Iteration   1: 14701820.807 ops/s
Iteration   2: 14670631.975 ops/s
Iteration   3: 14734151.685 ops/s
Iteration   4: 14684442.393 ops/s
Iteration   5: 14772289.610 ops/s
Iteration   6: 14622501.089 ops/s
Iteration   7: 14685586.236 ops/s
Iteration   8: 14710822.261 ops/s
Iteration   9: 14731528.091 ops/s
Iteration  10: 14748081.521 ops/s
Iteration  11: 14703089.305 ops/s
Iteration  12: 14738598.069 ops/s
Iteration  13: 14703907.108 ops/s
Iteration  14: 14688970.914 ops/s
Iteration  15: 14728695.670 ops/s
Iteration  16: 14666610.827 ops/s
Iteration  17: 14581814.148 ops/s
Iteration  18: 14658663.078 ops/s
Iteration  19: 14642046.484 ops/s
Iteration  20: 14731790.346 ops/s
Iteration  21: 14723842.545 ops/s
Iteration  22: 14730295.835 ops/s
Iteration  23: 14620740.367 ops/s
Iteration  24: 14655732.020 ops/s
Iteration  25: 14676042.979 ops/s
Iteration  26: 14634030.397 ops/s
Iteration  27: 14752204.237 ops/s
Iteration  28: 14696141.024 ops/s
Iteration  29: 14605603.213 ops/s
Iteration  30: 14754235.727 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBoolean":
  14691830.332 ±(99.9%) 32352.620 ops/s [Average]
  (min, avg, max) = (14581814.148, 14691830.332, 14772289.610), stdev = 48423.882
  CI (99.9%): [14659477.712, 14724182.952] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  14691830.332 ± 32352.620  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3353241.120 ops/s
# Warmup Iteration   2: 7571919.364 ops/s
# Warmup Iteration   3: 7825795.649 ops/s
# Warmup Iteration   4: 7021663.957 ops/s
# Warmup Iteration   5: 7244383.095 ops/s
# Warmup Iteration   6: 7779777.089 ops/s
# Warmup Iteration   7: 7784244.168 ops/s
# Warmup Iteration   8: 7799226.736 ops/s
# Warmup Iteration   9: 7793039.573 ops/s
# Warmup Iteration  10: 7785961.701 ops/s
# Warmup Iteration  11: 7763064.544 ops/s
# Warmup Iteration  12: 7770969.817 ops/s
# Warmup Iteration  13: 7756615.447 ops/s
# Warmup Iteration  14: 7771470.787 ops/s
# Warmup Iteration  15: 7755101.934 ops/s
# Warmup Iteration  16: 7774305.910 ops/s
# Warmup Iteration  17: 7801793.328 ops/s
# Warmup Iteration  18: 7764759.027 ops/s
# Warmup Iteration  19: 7814007.595 ops/s
# Warmup Iteration  20: 7816273.921 ops/s
# Warmup Iteration  21: 7813590.918 ops/s
# Warmup Iteration  22: 7826330.131 ops/s
# Warmup Iteration  23: 7819276.242 ops/s
# Warmup Iteration  24: 7842200.783 ops/s
# Warmup Iteration  25: 7827154.134 ops/s
# Warmup Iteration  26: 7835389.091 ops/s
# Warmup Iteration  27: 7835996.387 ops/s
# Warmup Iteration  28: 7817573.081 ops/s
# Warmup Iteration  29: 7822606.837 ops/s
# Warmup Iteration  30: 7849340.311 ops/s
Iteration   1: 7846178.486 ops/s
Iteration   2: 7837292.478 ops/s
Iteration   3: 7785315.305 ops/s
Iteration   4: 7862587.593 ops/s
Iteration   5: 7858416.948 ops/s
Iteration   6: 7850524.710 ops/s
Iteration   7: 7843827.961 ops/s
Iteration   8: 7851340.621 ops/s
Iteration   9: 7858786.314 ops/s
Iteration  10: 7856728.041 ops/s
Iteration  11: 7859644.016 ops/s
Iteration  12: 7840675.744 ops/s
Iteration  13: 7826011.808 ops/s
Iteration  14: 7868069.805 ops/s
Iteration  15: 7859166.182 ops/s
Iteration  16: 7871105.584 ops/s
Iteration  17: 7862385.550 ops/s
Iteration  18: 7875045.612 ops/s
Iteration  19: 7851353.618 ops/s
Iteration  20: 7845557.946 ops/s
Iteration  21: 7835930.636 ops/s
Iteration  22: 7869735.632 ops/s
Iteration  23: 7872847.125 ops/s
Iteration  24: 7844361.909 ops/s
Iteration  25: 7833277.676 ops/s
Iteration  26: 7856861.496 ops/s
Iteration  27: 7832344.840 ops/s
Iteration  28: 7833521.047 ops/s
Iteration  29: 7865628.900 ops/s
Iteration  30: 7824251.714 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  7849292.510 ±(99.9%) 12474.071 ops/s [Average]
  (min, avg, max) = (7785315.305, 7849292.510, 7875045.612), stdev = 18670.604
  CI (99.9%): [7836818.439, 7861766.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  7849292.510 ± 12474.071  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27221672.943 ops/s
# Warmup Iteration   2: 54774273.450 ops/s
# Warmup Iteration   3: 45944064.441 ops/s
# Warmup Iteration   4: 52965471.451 ops/s
# Warmup Iteration   5: 53490304.539 ops/s
# Warmup Iteration   6: 54043697.465 ops/s
# Warmup Iteration   7: 53377075.646 ops/s
# Warmup Iteration   8: 53404482.625 ops/s
# Warmup Iteration   9: 52565270.480 ops/s
# Warmup Iteration  10: 53207839.844 ops/s
# Warmup Iteration  11: 53488135.817 ops/s
# Warmup Iteration  12: 53646781.392 ops/s
# Warmup Iteration  13: 53089737.130 ops/s
# Warmup Iteration  14: 53492761.485 ops/s
# Warmup Iteration  15: 53338882.717 ops/s
# Warmup Iteration  16: 53566744.923 ops/s
# Warmup Iteration  17: 53102994.892 ops/s
# Warmup Iteration  18: 53356880.660 ops/s
# Warmup Iteration  19: 53518549.224 ops/s
# Warmup Iteration  20: 53538088.533 ops/s
# Warmup Iteration  21: 53281800.502 ops/s
# Warmup Iteration  22: 53486989.969 ops/s
# Warmup Iteration  23: 53299937.404 ops/s
# Warmup Iteration  24: 53233937.466 ops/s
# Warmup Iteration  25: 53457565.715 ops/s
# Warmup Iteration  26: 53202984.413 ops/s
# Warmup Iteration  27: 54864354.252 ops/s
# Warmup Iteration  28: 54025900.240 ops/s
# Warmup Iteration  29: 53741398.598 ops/s
# Warmup Iteration  30: 53718740.602 ops/s
Iteration   1: 53691171.764 ops/s
Iteration   2: 53136573.169 ops/s
Iteration   3: 53415516.592 ops/s
Iteration   4: 53343502.808 ops/s
Iteration   5: 53026746.166 ops/s
Iteration   6: 53061477.911 ops/s
Iteration   7: 53312702.083 ops/s
Iteration   8: 53471673.536 ops/s
Iteration   9: 53523630.599 ops/s
Iteration  10: 53441179.442 ops/s
Iteration  11: 53253996.822 ops/s
Iteration  12: 53549967.888 ops/s
Iteration  13: 53934309.333 ops/s
Iteration  14: 54211056.063 ops/s
Iteration  15: 53027421.726 ops/s
Iteration  16: 53431672.704 ops/s
Iteration  17: 53754239.927 ops/s
Iteration  18: 53857731.558 ops/s
Iteration  19: 52756045.394 ops/s
Iteration  20: 53152769.963 ops/s
Iteration  21: 53686763.529 ops/s
Iteration  22: 52687275.632 ops/s
Iteration  23: 53252968.688 ops/s
Iteration  24: 53548294.353 ops/s
Iteration  25: 52959531.538 ops/s
Iteration  26: 54128527.230 ops/s
Iteration  27: 53827949.648 ops/s
Iteration  28: 52868354.339 ops/s
Iteration  29: 54098169.932 ops/s
Iteration  30: 53364851.753 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  53425869.070 ±(99.9%) 268163.979 ops/s [Average]
  (min, avg, max) = (52687275.632, 53425869.070, 54211056.063), stdev = 401375.249
  CI (99.9%): [53157705.091, 53694033.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  53425869.070 ± 268163.979  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 437688.687 ops/s
# Warmup Iteration   2: 991254.685 ops/s
# Warmup Iteration   3: 1038041.564 ops/s
# Warmup Iteration   4: 956144.216 ops/s
# Warmup Iteration   5: 954324.128 ops/s
# Warmup Iteration   6: 1043328.823 ops/s
# Warmup Iteration   7: 1041023.427 ops/s
# Warmup Iteration   8: 1040944.260 ops/s
# Warmup Iteration   9: 1040275.187 ops/s
# Warmup Iteration  10: 1037211.189 ops/s
# Warmup Iteration  11: 1039342.136 ops/s
# Warmup Iteration  12: 1039126.817 ops/s
# Warmup Iteration  13: 1037850.344 ops/s
# Warmup Iteration  14: 1041403.785 ops/s
# Warmup Iteration  15: 1043177.473 ops/s
# Warmup Iteration  16: 1039402.171 ops/s
# Warmup Iteration  17: 1037772.432 ops/s
# Warmup Iteration  18: 1037501.320 ops/s
# Warmup Iteration  19: 1037528.365 ops/s
# Warmup Iteration  20: 1034837.690 ops/s
# Warmup Iteration  21: 1039129.712 ops/s
# Warmup Iteration  22: 1039081.669 ops/s
# Warmup Iteration  23: 1036837.821 ops/s
# Warmup Iteration  24: 1036993.415 ops/s
# Warmup Iteration  25: 1040272.524 ops/s
# Warmup Iteration  26: 1042492.944 ops/s
# Warmup Iteration  27: 1043535.351 ops/s
# Warmup Iteration  28: 1038595.461 ops/s
# Warmup Iteration  29: 1042196.433 ops/s
# Warmup Iteration  30: 1040366.821 ops/s
Iteration   1: 1042026.995 ops/s
Iteration   2: 1043963.020 ops/s
Iteration   3: 1042844.882 ops/s
Iteration   4: 1044571.645 ops/s
Iteration   5: 1042631.857 ops/s
Iteration   6: 1043410.136 ops/s
Iteration   7: 1045910.444 ops/s
Iteration   8: 1039160.107 ops/s
Iteration   9: 1045991.363 ops/s
Iteration  10: 1039512.531 ops/s
Iteration  11: 1042434.654 ops/s
Iteration  12: 1038470.018 ops/s
Iteration  13: 1040393.739 ops/s
Iteration  14: 1045152.009 ops/s
Iteration  15: 1039573.353 ops/s
Iteration  16: 1038205.911 ops/s
Iteration  17: 1042983.628 ops/s
Iteration  18: 1042132.944 ops/s
Iteration  19: 1034737.691 ops/s
Iteration  20: 1037677.467 ops/s
Iteration  21: 1037121.060 ops/s
Iteration  22: 1039688.032 ops/s
Iteration  23: 1037512.981 ops/s
Iteration  24: 1043638.101 ops/s
Iteration  25: 1041255.342 ops/s
Iteration  26: 1040558.644 ops/s
Iteration  27: 1033366.182 ops/s
Iteration  28: 1038136.870 ops/s
Iteration  29: 1038604.730 ops/s
Iteration  30: 1040364.820 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByte":
  1040734.372 ±(99.9%) 2102.224 ops/s [Average]
  (min, avg, max) = (1033366.182, 1040734.372, 1045991.363), stdev = 3146.510
  CI (99.9%): [1038632.148, 1042836.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectByte  thrpt   30  1040734.372 ± 2102.224  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1101235.082 ops/s
# Warmup Iteration   2: 2465388.368 ops/s
# Warmup Iteration   3: 2548838.438 ops/s
# Warmup Iteration   4: 2476755.175 ops/s
# Warmup Iteration   5: 2220275.692 ops/s
# Warmup Iteration   6: 2575254.975 ops/s
# Warmup Iteration   7: 2582587.388 ops/s
# Warmup Iteration   8: 2584020.303 ops/s
# Warmup Iteration   9: 2573841.065 ops/s
# Warmup Iteration  10: 2575629.476 ops/s
# Warmup Iteration  11: 2581111.964 ops/s
# Warmup Iteration  12: 2580697.145 ops/s
# Warmup Iteration  13: 2585304.383 ops/s
# Warmup Iteration  14: 2576753.518 ops/s
# Warmup Iteration  15: 2583692.644 ops/s
# Warmup Iteration  16: 2571439.754 ops/s
# Warmup Iteration  17: 2556508.819 ops/s
# Warmup Iteration  18: 2570984.713 ops/s
# Warmup Iteration  19: 2562900.305 ops/s
# Warmup Iteration  20: 2564212.616 ops/s
# Warmup Iteration  21: 2562762.672 ops/s
# Warmup Iteration  22: 2565564.673 ops/s
# Warmup Iteration  23: 2566369.879 ops/s
# Warmup Iteration  24: 2564308.410 ops/s
# Warmup Iteration  25: 2559017.354 ops/s
# Warmup Iteration  26: 2560782.981 ops/s
# Warmup Iteration  27: 2563546.561 ops/s
# Warmup Iteration  28: 2556752.761 ops/s
# Warmup Iteration  29: 2559017.273 ops/s
# Warmup Iteration  30: 2558034.209 ops/s
Iteration   1: 2564429.247 ops/s
Iteration   2: 2566238.810 ops/s
Iteration   3: 2564622.425 ops/s
Iteration   4: 2562078.367 ops/s
Iteration   5: 2551467.013 ops/s
Iteration   6: 2562557.263 ops/s
Iteration   7: 2554320.641 ops/s
Iteration   8: 2565202.474 ops/s
Iteration   9: 2565819.236 ops/s
Iteration  10: 2554893.414 ops/s
Iteration  11: 2565084.633 ops/s
Iteration  12: 2560520.274 ops/s
Iteration  13: 2559393.751 ops/s
Iteration  14: 2563256.145 ops/s
Iteration  15: 2564319.595 ops/s
Iteration  16: 2571037.382 ops/s
Iteration  17: 2567950.005 ops/s
Iteration  18: 2550564.649 ops/s
Iteration  19: 2554140.010 ops/s
Iteration  20: 2566123.650 ops/s
Iteration  21: 2561605.256 ops/s
Iteration  22: 2552357.363 ops/s
Iteration  23: 2551594.481 ops/s
Iteration  24: 2559286.020 ops/s
Iteration  25: 2568068.424 ops/s
Iteration  26: 2566903.489 ops/s
Iteration  27: 2549839.249 ops/s
Iteration  28: 2553104.594 ops/s
Iteration  29: 2557908.216 ops/s
Iteration  30: 2562857.868 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  2560584.798 ±(99.9%) 4081.851 ops/s [Average]
  (min, avg, max) = (2549839.249, 2560584.798, 2571037.382), stdev = 6109.524
  CI (99.9%): [2556502.947, 2564666.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2560584.798 ± 4081.851  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 805318.942 ops/s
# Warmup Iteration   2: 1888882.945 ops/s
# Warmup Iteration   3: 2011271.260 ops/s
# Warmup Iteration   4: 1818496.835 ops/s
# Warmup Iteration   5: 1858479.340 ops/s
# Warmup Iteration   6: 2012947.723 ops/s
# Warmup Iteration   7: 2016539.407 ops/s
# Warmup Iteration   8: 2016914.562 ops/s
# Warmup Iteration   9: 2016815.043 ops/s
# Warmup Iteration  10: 2008618.082 ops/s
# Warmup Iteration  11: 2013182.412 ops/s
# Warmup Iteration  12: 2010372.889 ops/s
# Warmup Iteration  13: 2009543.676 ops/s
# Warmup Iteration  14: 2008784.713 ops/s
# Warmup Iteration  15: 2010083.637 ops/s
# Warmup Iteration  16: 2009846.906 ops/s
# Warmup Iteration  17: 2008213.025 ops/s
# Warmup Iteration  18: 2010727.405 ops/s
# Warmup Iteration  19: 2007261.385 ops/s
# Warmup Iteration  20: 2006874.518 ops/s
# Warmup Iteration  21: 2013207.809 ops/s
# Warmup Iteration  22: 2013894.126 ops/s
# Warmup Iteration  23: 2010616.852 ops/s
# Warmup Iteration  24: 2010295.330 ops/s
# Warmup Iteration  25: 2000732.472 ops/s
# Warmup Iteration  26: 2006997.834 ops/s
# Warmup Iteration  27: 2005238.132 ops/s
# Warmup Iteration  28: 2008740.082 ops/s
# Warmup Iteration  29: 2011921.387 ops/s
# Warmup Iteration  30: 2009630.380 ops/s
Iteration   1: 2011857.812 ops/s
Iteration   2: 2011363.451 ops/s
Iteration   3: 2008860.179 ops/s
Iteration   4: 2013104.517 ops/s
Iteration   5: 2014643.915 ops/s
Iteration   6: 2012734.812 ops/s
Iteration   7: 2010788.972 ops/s
Iteration   8: 2007496.682 ops/s
Iteration   9: 2011809.726 ops/s
Iteration  10: 2013448.562 ops/s
Iteration  11: 2008139.759 ops/s
Iteration  12: 2009164.305 ops/s
Iteration  13: 2012065.905 ops/s
Iteration  14: 2010631.184 ops/s
Iteration  15: 2013670.268 ops/s
Iteration  16: 2007612.620 ops/s
Iteration  17: 2008342.970 ops/s
Iteration  18: 2009244.974 ops/s
Iteration  19: 2009337.055 ops/s
Iteration  20: 2012127.932 ops/s
Iteration  21: 2004004.376 ops/s
Iteration  22: 2010102.738 ops/s
Iteration  23: 2007837.594 ops/s
Iteration  24: 2003345.940 ops/s
Iteration  25: 2013459.266 ops/s
Iteration  26: 2010903.928 ops/s
Iteration  27: 2004549.989 ops/s
Iteration  28: 2008535.764 ops/s
Iteration  29: 2006881.980 ops/s
Iteration  30: 2007968.043 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithTarget":
  2009801.174 ±(99.9%) 1945.236 ops/s [Average]
  (min, avg, max) = (2003345.940, 2009801.174, 2014643.915), stdev = 2911.537
  CI (99.9%): [2007855.938, 2011746.409] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2009801.174 ± 1945.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 424165.739 ops/s
# Warmup Iteration   2: 1013026.623 ops/s
# Warmup Iteration   3: 1060979.577 ops/s
# Warmup Iteration   4: 882762.134 ops/s
# Warmup Iteration   5: 1068121.366 ops/s
# Warmup Iteration   6: 1062027.013 ops/s
# Warmup Iteration   7: 1065770.176 ops/s
# Warmup Iteration   8: 1068839.786 ops/s
# Warmup Iteration   9: 1062122.743 ops/s
# Warmup Iteration  10: 1068171.711 ops/s
# Warmup Iteration  11: 1068297.412 ops/s
# Warmup Iteration  12: 1069153.046 ops/s
# Warmup Iteration  13: 1060653.967 ops/s
# Warmup Iteration  14: 1065824.009 ops/s
# Warmup Iteration  15: 1067683.160 ops/s
# Warmup Iteration  16: 1063759.204 ops/s
# Warmup Iteration  17: 1062165.329 ops/s
# Warmup Iteration  18: 1057664.707 ops/s
# Warmup Iteration  19: 1060755.668 ops/s
# Warmup Iteration  20: 1058762.950 ops/s
# Warmup Iteration  21: 1057366.531 ops/s
# Warmup Iteration  22: 1059611.053 ops/s
# Warmup Iteration  23: 1057317.851 ops/s
# Warmup Iteration  24: 1057496.770 ops/s
# Warmup Iteration  25: 1057933.425 ops/s
# Warmup Iteration  26: 1059236.748 ops/s
# Warmup Iteration  27: 1060279.793 ops/s
# Warmup Iteration  28: 1061406.972 ops/s
# Warmup Iteration  29: 1060993.232 ops/s
# Warmup Iteration  30: 1059601.876 ops/s
Iteration   1: 1062701.841 ops/s
Iteration   2: 1061919.236 ops/s
Iteration   3: 1064390.386 ops/s
Iteration   4: 1061390.483 ops/s
Iteration   5: 1058169.044 ops/s
Iteration   6: 1062188.180 ops/s
Iteration   7: 1058491.942 ops/s
Iteration   8: 1057989.834 ops/s
Iteration   9: 1063710.808 ops/s
Iteration  10: 1059794.298 ops/s
Iteration  11: 1061843.827 ops/s
Iteration  12: 1060180.563 ops/s
Iteration  13: 1062784.123 ops/s
Iteration  14: 1060470.467 ops/s
Iteration  15: 1067875.942 ops/s
Iteration  16: 1058466.102 ops/s
Iteration  17: 1060947.083 ops/s
Iteration  18: 1061064.484 ops/s
Iteration  19: 1058632.399 ops/s
Iteration  20: 1058242.917 ops/s
Iteration  21: 1059090.440 ops/s
Iteration  22: 1061295.442 ops/s
Iteration  23: 1060317.834 ops/s
Iteration  24: 1062090.769 ops/s
Iteration  25: 1060561.520 ops/s
Iteration  26: 1061138.720 ops/s
Iteration  27: 1062261.142 ops/s
Iteration  28: 1059876.453 ops/s
Iteration  29: 1061827.813 ops/s
Iteration  30: 1062828.567 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectChar":
  1061084.755 ±(99.9%) 1430.766 ops/s [Average]
  (min, avg, max) = (1057989.834, 1061084.755, 1067875.942), stdev = 2141.503
  CI (99.9%): [1059653.989, 1062515.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectChar  thrpt   30  1061084.755 ± 1430.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1142507.207 ops/s
# Warmup Iteration   2: 2852239.239 ops/s
# Warmup Iteration   3: 2931814.039 ops/s
# Warmup Iteration   4: 2417039.231 ops/s
# Warmup Iteration   5: 2929542.249 ops/s
# Warmup Iteration   6: 2923722.949 ops/s
# Warmup Iteration   7: 2915276.043 ops/s
# Warmup Iteration   8: 2924356.905 ops/s
# Warmup Iteration   9: 2938863.475 ops/s
# Warmup Iteration  10: 2927328.452 ops/s
# Warmup Iteration  11: 2930295.510 ops/s
# Warmup Iteration  12: 2923841.351 ops/s
# Warmup Iteration  13: 2936987.358 ops/s
# Warmup Iteration  14: 2922566.063 ops/s
# Warmup Iteration  15: 2930575.376 ops/s
# Warmup Iteration  16: 2932626.266 ops/s
# Warmup Iteration  17: 2937794.240 ops/s
# Warmup Iteration  18: 2936518.731 ops/s
# Warmup Iteration  19: 2942516.710 ops/s
# Warmup Iteration  20: 2949971.778 ops/s
# Warmup Iteration  21: 2951997.838 ops/s
# Warmup Iteration  22: 2948759.255 ops/s
# Warmup Iteration  23: 2950795.538 ops/s
# Warmup Iteration  24: 2954043.835 ops/s
# Warmup Iteration  25: 2946690.155 ops/s
# Warmup Iteration  26: 2944196.300 ops/s
# Warmup Iteration  27: 2949809.542 ops/s
# Warmup Iteration  28: 2949245.466 ops/s
# Warmup Iteration  29: 2944404.685 ops/s
# Warmup Iteration  30: 2935347.515 ops/s
Iteration   1: 2942567.638 ops/s
Iteration   2: 2932061.527 ops/s
Iteration   3: 2938876.731 ops/s
Iteration   4: 2942246.984 ops/s
Iteration   5: 2940200.284 ops/s
Iteration   6: 2946112.277 ops/s
Iteration   7: 2931066.508 ops/s
Iteration   8: 2930844.530 ops/s
Iteration   9: 2946682.994 ops/s
Iteration  10: 2947879.649 ops/s
Iteration  11: 2946443.679 ops/s
Iteration  12: 2945513.257 ops/s
Iteration  13: 2950005.602 ops/s
Iteration  14: 2934753.184 ops/s
Iteration  15: 2942788.447 ops/s
Iteration  16: 2935161.956 ops/s
Iteration  17: 2929725.290 ops/s
Iteration  18: 2945271.852 ops/s
Iteration  19: 2955388.444 ops/s
Iteration  20: 2941969.884 ops/s
Iteration  21: 2941248.768 ops/s
Iteration  22: 2945633.622 ops/s
Iteration  23: 2928860.565 ops/s
Iteration  24: 2941287.791 ops/s
Iteration  25: 2945860.313 ops/s
Iteration  26: 2954047.233 ops/s
Iteration  27: 2952541.488 ops/s
Iteration  28: 2935530.249 ops/s
Iteration  29: 2938978.950 ops/s
Iteration  30: 2931871.482 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2941380.706 ±(99.9%) 4910.225 ops/s [Average]
  (min, avg, max) = (2928860.565, 2941380.706, 2955388.444), stdev = 7349.394
  CI (99.9%): [2936470.481, 2946290.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2941380.706 ± 4910.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 811761.397 ops/s
# Warmup Iteration   2: 1928017.193 ops/s
# Warmup Iteration   3: 2025391.514 ops/s
# Warmup Iteration   4: 1696951.213 ops/s
# Warmup Iteration   5: 2023409.536 ops/s
# Warmup Iteration   6: 2026331.497 ops/s
# Warmup Iteration   7: 2034360.260 ops/s
# Warmup Iteration   8: 2037628.996 ops/s
# Warmup Iteration   9: 2030695.265 ops/s
# Warmup Iteration  10: 2038888.279 ops/s
# Warmup Iteration  11: 2036049.333 ops/s
# Warmup Iteration  12: 2037686.354 ops/s
# Warmup Iteration  13: 2038238.882 ops/s
# Warmup Iteration  14: 2039967.415 ops/s
# Warmup Iteration  15: 2035332.348 ops/s
# Warmup Iteration  16: 2036701.414 ops/s
# Warmup Iteration  17: 2041379.160 ops/s
# Warmup Iteration  18: 2041847.487 ops/s
# Warmup Iteration  19: 2034796.075 ops/s
# Warmup Iteration  20: 2033645.843 ops/s
# Warmup Iteration  21: 2037543.671 ops/s
# Warmup Iteration  22: 2033074.618 ops/s
# Warmup Iteration  23: 2044507.074 ops/s
# Warmup Iteration  24: 2035766.612 ops/s
# Warmup Iteration  25: 2042003.928 ops/s
# Warmup Iteration  26: 2038410.181 ops/s
# Warmup Iteration  27: 2036701.821 ops/s
# Warmup Iteration  28: 2039941.531 ops/s
# Warmup Iteration  29: 2045919.087 ops/s
# Warmup Iteration  30: 2036291.012 ops/s
Iteration   1: 2044155.100 ops/s
Iteration   2: 2033843.652 ops/s
Iteration   3: 2032994.878 ops/s
Iteration   4: 2050047.401 ops/s
Iteration   5: 2032871.805 ops/s
Iteration   6: 2036041.838 ops/s
Iteration   7: 2032295.223 ops/s
Iteration   8: 2037266.234 ops/s
Iteration   9: 2043093.769 ops/s
Iteration  10: 2040940.164 ops/s
Iteration  11: 2034578.480 ops/s
Iteration  12: 2041689.074 ops/s
Iteration  13: 2043593.477 ops/s
Iteration  14: 2045038.607 ops/s
Iteration  15: 2046334.543 ops/s
Iteration  16: 2044990.677 ops/s
Iteration  17: 2042839.920 ops/s
Iteration  18: 2042189.285 ops/s
Iteration  19: 2039683.714 ops/s
Iteration  20: 2043463.483 ops/s
Iteration  21: 2044474.002 ops/s
Iteration  22: 2041471.801 ops/s
Iteration  23: 2036829.273 ops/s
Iteration  24: 2028932.326 ops/s
Iteration  25: 2030079.473 ops/s
Iteration  26: 2033486.777 ops/s
Iteration  27: 2038391.098 ops/s
Iteration  28: 2043874.241 ops/s
Iteration  29: 2044095.464 ops/s
Iteration  30: 2043601.698 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithTarget":
  2039772.916 ±(99.9%) 3618.921 ops/s [Average]
  (min, avg, max) = (2028932.326, 2039772.916, 2050047.401), stdev = 5416.631
  CI (99.9%): [2036153.995, 2043391.837] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2039772.916 ± 3618.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 317571.845 ops/s
# Warmup Iteration   2: 737861.578 ops/s
# Warmup Iteration   3: 767875.896 ops/s
# Warmup Iteration   4: 664767.516 ops/s
# Warmup Iteration   5: 749378.272 ops/s
# Warmup Iteration   6: 770792.875 ops/s
# Warmup Iteration   7: 772610.135 ops/s
# Warmup Iteration   8: 771453.248 ops/s
# Warmup Iteration   9: 772911.275 ops/s
# Warmup Iteration  10: 775130.339 ops/s
# Warmup Iteration  11: 773898.786 ops/s
# Warmup Iteration  12: 771323.478 ops/s
# Warmup Iteration  13: 766162.161 ops/s
# Warmup Iteration  14: 771874.248 ops/s
# Warmup Iteration  15: 770286.805 ops/s
# Warmup Iteration  16: 769410.442 ops/s
# Warmup Iteration  17: 770464.202 ops/s
# Warmup Iteration  18: 769865.288 ops/s
# Warmup Iteration  19: 770205.291 ops/s
# Warmup Iteration  20: 769806.878 ops/s
# Warmup Iteration  21: 772218.377 ops/s
# Warmup Iteration  22: 769748.382 ops/s
# Warmup Iteration  23: 770086.510 ops/s
# Warmup Iteration  24: 771873.274 ops/s
# Warmup Iteration  25: 770229.573 ops/s
# Warmup Iteration  26: 771049.424 ops/s
# Warmup Iteration  27: 771282.910 ops/s
# Warmup Iteration  28: 772017.252 ops/s
# Warmup Iteration  29: 774732.915 ops/s
# Warmup Iteration  30: 773230.172 ops/s
Iteration   1: 769971.949 ops/s
Iteration   2: 767523.653 ops/s
Iteration   3: 767348.803 ops/s
Iteration   4: 769428.685 ops/s
Iteration   5: 768533.672 ops/s
Iteration   6: 769546.160 ops/s
Iteration   7: 770348.139 ops/s
Iteration   8: 771741.409 ops/s
Iteration   9: 774093.854 ops/s
Iteration  10: 772928.032 ops/s
Iteration  11: 770589.612 ops/s
Iteration  12: 769530.244 ops/s
Iteration  13: 771233.156 ops/s
Iteration  14: 770109.906 ops/s
Iteration  15: 770297.295 ops/s
Iteration  16: 771683.523 ops/s
Iteration  17: 768808.119 ops/s
Iteration  18: 774556.534 ops/s
Iteration  19: 770121.977 ops/s
Iteration  20: 770749.212 ops/s
Iteration  21: 768441.134 ops/s
Iteration  22: 770114.053 ops/s
Iteration  23: 766613.385 ops/s
Iteration  24: 773299.600 ops/s
Iteration  25: 774341.015 ops/s
Iteration  26: 767664.643 ops/s
Iteration  27: 774630.898 ops/s
Iteration  28: 771500.752 ops/s
Iteration  29: 768964.269 ops/s
Iteration  30: 773132.628 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDouble":
  770594.877 ±(99.9%) 1494.866 ops/s [Average]
  (min, avg, max) = (766613.385, 770594.877, 774630.898), stdev = 2237.446
  CI (99.9%): [769100.011, 772089.743] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectDouble  thrpt   30  770594.877 ± 1494.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 877380.778 ops/s
# Warmup Iteration   2: 2104793.957 ops/s
# Warmup Iteration   3: 2161180.956 ops/s
# Warmup Iteration   4: 1800277.151 ops/s
# Warmup Iteration   5: 2175044.331 ops/s
# Warmup Iteration   6: 2167399.869 ops/s
# Warmup Iteration   7: 2176366.022 ops/s
# Warmup Iteration   8: 2166380.446 ops/s
# Warmup Iteration   9: 2175088.927 ops/s
# Warmup Iteration  10: 2175319.150 ops/s
# Warmup Iteration  11: 2161583.049 ops/s
# Warmup Iteration  12: 2168402.283 ops/s
# Warmup Iteration  13: 2168553.556 ops/s
# Warmup Iteration  14: 2164415.720 ops/s
# Warmup Iteration  15: 2160440.900 ops/s
# Warmup Iteration  16: 2158374.550 ops/s
# Warmup Iteration  17: 2166436.722 ops/s
# Warmup Iteration  18: 2167871.254 ops/s
# Warmup Iteration  19: 2167877.789 ops/s
# Warmup Iteration  20: 2162807.814 ops/s
# Warmup Iteration  21: 2167824.287 ops/s
# Warmup Iteration  22: 2163664.417 ops/s
# Warmup Iteration  23: 2166241.744 ops/s
# Warmup Iteration  24: 2170162.731 ops/s
# Warmup Iteration  25: 2168766.740 ops/s
# Warmup Iteration  26: 2170670.350 ops/s
# Warmup Iteration  27: 2170715.025 ops/s
# Warmup Iteration  28: 2163562.654 ops/s
# Warmup Iteration  29: 2167210.017 ops/s
# Warmup Iteration  30: 2168224.949 ops/s
Iteration   1: 2163558.356 ops/s
Iteration   2: 2166825.225 ops/s
Iteration   3: 2166129.154 ops/s
Iteration   4: 2165343.549 ops/s
Iteration   5: 2172778.836 ops/s
Iteration   6: 2180352.483 ops/s
Iteration   7: 2171122.386 ops/s
Iteration   8: 2169092.042 ops/s
Iteration   9: 2179243.113 ops/s
Iteration  10: 2157806.915 ops/s
Iteration  11: 2159986.646 ops/s
Iteration  12: 2164715.168 ops/s
Iteration  13: 2172886.682 ops/s
Iteration  14: 2162209.007 ops/s
Iteration  15: 2165596.987 ops/s
Iteration  16: 2155120.584 ops/s
Iteration  17: 2173195.596 ops/s
Iteration  18: 2168766.850 ops/s
Iteration  19: 2177080.119 ops/s
Iteration  20: 2165535.783 ops/s
Iteration  21: 2165475.722 ops/s
Iteration  22: 2157566.744 ops/s
Iteration  23: 2165285.000 ops/s
Iteration  24: 2167099.390 ops/s
Iteration  25: 2171750.988 ops/s
Iteration  26: 2165439.309 ops/s
Iteration  27: 2162126.150 ops/s
Iteration  28: 2150596.645 ops/s
Iteration  29: 2175675.197 ops/s
Iteration  30: 2166263.580 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2166820.807 ±(99.9%) 4592.320 ops/s [Average]
  (min, avg, max) = (2150596.645, 2166820.807, 2180352.483), stdev = 6873.570
  CI (99.9%): [2162228.486, 2171413.127] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2166820.807 ± 4592.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 604250.808 ops/s
# Warmup Iteration   2: 1504928.554 ops/s
# Warmup Iteration   3: 1559724.026 ops/s
# Warmup Iteration   4: 1289567.170 ops/s
# Warmup Iteration   5: 1558982.654 ops/s
# Warmup Iteration   6: 1556525.641 ops/s
# Warmup Iteration   7: 1556683.552 ops/s
# Warmup Iteration   8: 1556404.687 ops/s
# Warmup Iteration   9: 1559098.289 ops/s
# Warmup Iteration  10: 1556082.026 ops/s
# Warmup Iteration  11: 1556153.228 ops/s
# Warmup Iteration  12: 1562097.840 ops/s
# Warmup Iteration  13: 1561366.593 ops/s
# Warmup Iteration  14: 1555597.608 ops/s
# Warmup Iteration  15: 1559875.767 ops/s
# Warmup Iteration  16: 1558403.402 ops/s
# Warmup Iteration  17: 1560456.856 ops/s
# Warmup Iteration  18: 1555650.555 ops/s
# Warmup Iteration  19: 1561750.155 ops/s
# Warmup Iteration  20: 1555409.661 ops/s
# Warmup Iteration  21: 1557498.093 ops/s
# Warmup Iteration  22: 1558795.280 ops/s
# Warmup Iteration  23: 1554903.839 ops/s
# Warmup Iteration  24: 1560370.187 ops/s
# Warmup Iteration  25: 1561534.307 ops/s
# Warmup Iteration  26: 1563178.407 ops/s
# Warmup Iteration  27: 1553300.125 ops/s
# Warmup Iteration  28: 1553347.495 ops/s
# Warmup Iteration  29: 1552844.465 ops/s
# Warmup Iteration  30: 1562093.113 ops/s
Iteration   1: 1556775.129 ops/s
Iteration   2: 1561291.026 ops/s
Iteration   3: 1560342.189 ops/s
Iteration   4: 1553568.590 ops/s
Iteration   5: 1553945.319 ops/s
Iteration   6: 1560634.946 ops/s
Iteration   7: 1558493.873 ops/s
Iteration   8: 1555601.519 ops/s
Iteration   9: 1551647.885 ops/s
Iteration  10: 1561474.813 ops/s
Iteration  11: 1553421.204 ops/s
Iteration  12: 1562376.076 ops/s
Iteration  13: 1557031.093 ops/s
Iteration  14: 1565644.655 ops/s
Iteration  15: 1559518.496 ops/s
Iteration  16: 1556717.951 ops/s
Iteration  17: 1563330.829 ops/s
Iteration  18: 1554965.784 ops/s
Iteration  19: 1557535.710 ops/s
Iteration  20: 1562891.987 ops/s
Iteration  21: 1562471.014 ops/s
Iteration  22: 1558734.761 ops/s
Iteration  23: 1556588.261 ops/s
Iteration  24: 1561483.458 ops/s
Iteration  25: 1554775.204 ops/s
Iteration  26: 1554704.522 ops/s
Iteration  27: 1558322.173 ops/s
Iteration  28: 1555604.910 ops/s
Iteration  29: 1559987.956 ops/s
Iteration  30: 1557283.900 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1558238.841 ±(99.9%) 2317.682 ops/s [Average]
  (min, avg, max) = (1551647.885, 1558238.841, 1565644.655), stdev = 3468.997
  CI (99.9%): [1555921.159, 1560556.523] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1558238.841 ± 2317.682  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 365842.613 ops/s
# Warmup Iteration   2: 836623.197 ops/s
# Warmup Iteration   3: 879327.167 ops/s
# Warmup Iteration   4: 806993.181 ops/s
# Warmup Iteration   5: 814678.590 ops/s
# Warmup Iteration   6: 881666.428 ops/s
# Warmup Iteration   7: 882041.323 ops/s
# Warmup Iteration   8: 884263.492 ops/s
# Warmup Iteration   9: 883606.224 ops/s
# Warmup Iteration  10: 881137.557 ops/s
# Warmup Iteration  11: 878889.194 ops/s
# Warmup Iteration  12: 879454.585 ops/s
# Warmup Iteration  13: 882990.299 ops/s
# Warmup Iteration  14: 882582.993 ops/s
# Warmup Iteration  15: 882054.843 ops/s
# Warmup Iteration  16: 881334.466 ops/s
# Warmup Iteration  17: 881010.879 ops/s
# Warmup Iteration  18: 883307.925 ops/s
# Warmup Iteration  19: 883617.247 ops/s
# Warmup Iteration  20: 883112.674 ops/s
# Warmup Iteration  21: 884190.681 ops/s
# Warmup Iteration  22: 881467.415 ops/s
# Warmup Iteration  23: 885419.585 ops/s
# Warmup Iteration  24: 884379.334 ops/s
# Warmup Iteration  25: 881605.576 ops/s
# Warmup Iteration  26: 883785.700 ops/s
# Warmup Iteration  27: 884124.677 ops/s
# Warmup Iteration  28: 883007.307 ops/s
# Warmup Iteration  29: 881167.877 ops/s
# Warmup Iteration  30: 882896.575 ops/s
Iteration   1: 885008.875 ops/s
Iteration   2: 885261.966 ops/s
Iteration   3: 886872.374 ops/s
Iteration   4: 884719.549 ops/s
Iteration   5: 882591.499 ops/s
Iteration   6: 888591.666 ops/s
Iteration   7: 884446.160 ops/s
Iteration   8: 885646.472 ops/s
Iteration   9: 883409.548 ops/s
Iteration  10: 884256.920 ops/s
Iteration  11: 886448.374 ops/s
Iteration  12: 884212.774 ops/s
Iteration  13: 880743.247 ops/s
Iteration  14: 887013.837 ops/s
Iteration  15: 884857.842 ops/s
Iteration  16: 887221.858 ops/s
Iteration  17: 889027.439 ops/s
Iteration  18: 882968.899 ops/s
Iteration  19: 885322.896 ops/s
Iteration  20: 887382.081 ops/s
Iteration  21: 885800.072 ops/s
Iteration  22: 885885.793 ops/s
Iteration  23: 882789.209 ops/s
Iteration  24: 878932.234 ops/s
Iteration  25: 877802.957 ops/s
Iteration  26: 880140.785 ops/s
Iteration  27: 882055.307 ops/s
Iteration  28: 881552.520 ops/s
Iteration  29: 879462.696 ops/s
Iteration  30: 881461.666 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloat":
  884062.917 ±(99.9%) 1914.263 ops/s [Average]
  (min, avg, max) = (877802.957, 884062.917, 889027.439), stdev = 2865.179
  CI (99.9%): [882148.654, 885977.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectFloat  thrpt   30  884062.917 ± 1914.263  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 997967.165 ops/s
# Warmup Iteration   2: 2372831.969 ops/s
# Warmup Iteration   3: 2454432.566 ops/s
# Warmup Iteration   4: 2027859.719 ops/s
# Warmup Iteration   5: 2465033.828 ops/s
# Warmup Iteration   6: 2464655.918 ops/s
# Warmup Iteration   7: 2465137.063 ops/s
# Warmup Iteration   8: 2460800.779 ops/s
# Warmup Iteration   9: 2462575.035 ops/s
# Warmup Iteration  10: 2454460.964 ops/s
# Warmup Iteration  11: 2456875.608 ops/s
# Warmup Iteration  12: 2463423.807 ops/s
# Warmup Iteration  13: 2461122.624 ops/s
# Warmup Iteration  14: 2460754.574 ops/s
# Warmup Iteration  15: 2451464.160 ops/s
# Warmup Iteration  16: 2465890.619 ops/s
# Warmup Iteration  17: 2458051.815 ops/s
# Warmup Iteration  18: 2457403.978 ops/s
# Warmup Iteration  19: 2461534.249 ops/s
# Warmup Iteration  20: 2467561.807 ops/s
# Warmup Iteration  21: 2464475.651 ops/s
# Warmup Iteration  22: 2459374.542 ops/s
# Warmup Iteration  23: 2462238.071 ops/s
# Warmup Iteration  24: 2465283.403 ops/s
# Warmup Iteration  25: 2456687.653 ops/s
# Warmup Iteration  26: 2463792.429 ops/s
# Warmup Iteration  27: 2464828.160 ops/s
# Warmup Iteration  28: 2463079.313 ops/s
# Warmup Iteration  29: 2460532.557 ops/s
# Warmup Iteration  30: 2451849.100 ops/s
Iteration   1: 2460441.795 ops/s
Iteration   2: 2455615.263 ops/s
Iteration   3: 2462668.355 ops/s
Iteration   4: 2458463.834 ops/s
Iteration   5: 2459124.590 ops/s
Iteration   6: 2463210.893 ops/s
Iteration   7: 2462304.017 ops/s
Iteration   8: 2464320.797 ops/s
Iteration   9: 2443693.929 ops/s
Iteration  10: 2457304.388 ops/s
Iteration  11: 2453180.400 ops/s
Iteration  12: 2455922.634 ops/s
Iteration  13: 2455226.467 ops/s
Iteration  14: 2461242.858 ops/s
Iteration  15: 2465502.670 ops/s
Iteration  16: 2462051.844 ops/s
Iteration  17: 2458883.673 ops/s
Iteration  18: 2449832.131 ops/s
Iteration  19: 2452215.876 ops/s
Iteration  20: 2449644.700 ops/s
Iteration  21: 2461955.544 ops/s
Iteration  22: 2458781.875 ops/s
Iteration  23: 2465244.767 ops/s
Iteration  24: 2460050.897 ops/s
Iteration  25: 2465185.937 ops/s
Iteration  26: 2453273.764 ops/s
Iteration  27: 2448440.881 ops/s
Iteration  28: 2453919.181 ops/s
Iteration  29: 2460416.061 ops/s
Iteration  30: 2473240.209 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2458378.674 ±(99.9%) 4121.658 ops/s [Average]
  (min, avg, max) = (2443693.929, 2458378.674, 2473240.209), stdev = 6169.105
  CI (99.9%): [2454257.016, 2462500.333] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2458378.674 ± 4121.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694420.180 ops/s
# Warmup Iteration   2: 1620442.467 ops/s
# Warmup Iteration   3: 1699884.066 ops/s
# Warmup Iteration   4: 1475482.612 ops/s
# Warmup Iteration   5: 1640391.777 ops/s
# Warmup Iteration   6: 1702076.051 ops/s
# Warmup Iteration   7: 1712126.287 ops/s
# Warmup Iteration   8: 1709457.333 ops/s
# Warmup Iteration   9: 1713204.952 ops/s
# Warmup Iteration  10: 1713960.938 ops/s
# Warmup Iteration  11: 1714267.151 ops/s
# Warmup Iteration  12: 1708113.202 ops/s
# Warmup Iteration  13: 1714803.423 ops/s
# Warmup Iteration  14: 1707971.089 ops/s
# Warmup Iteration  15: 1706964.872 ops/s
# Warmup Iteration  16: 1708039.819 ops/s
# Warmup Iteration  17: 1723866.702 ops/s
# Warmup Iteration  18: 1719861.660 ops/s
# Warmup Iteration  19: 1713823.986 ops/s
# Warmup Iteration  20: 1721163.916 ops/s
# Warmup Iteration  21: 1716227.659 ops/s
# Warmup Iteration  22: 1713736.904 ops/s
# Warmup Iteration  23: 1711016.076 ops/s
# Warmup Iteration  24: 1712378.878 ops/s
# Warmup Iteration  25: 1713767.361 ops/s
# Warmup Iteration  26: 1717716.293 ops/s
# Warmup Iteration  27: 1722341.573 ops/s
# Warmup Iteration  28: 1714500.248 ops/s
# Warmup Iteration  29: 1713235.987 ops/s
# Warmup Iteration  30: 1716509.859 ops/s
Iteration   1: 1717084.182 ops/s
Iteration   2: 1713405.453 ops/s
Iteration   3: 1720089.183 ops/s
Iteration   4: 1720536.205 ops/s
Iteration   5: 1721655.433 ops/s
Iteration   6: 1720997.951 ops/s
Iteration   7: 1719126.873 ops/s
Iteration   8: 1715546.703 ops/s
Iteration   9: 1716947.594 ops/s
Iteration  10: 1715093.630 ops/s
Iteration  11: 1717127.819 ops/s
Iteration  12: 1711273.285 ops/s
Iteration  13: 1719384.018 ops/s
Iteration  14: 1718585.709 ops/s
Iteration  15: 1727154.615 ops/s
Iteration  16: 1723316.524 ops/s
Iteration  17: 1723304.650 ops/s
Iteration  18: 1719637.890 ops/s
Iteration  19: 1722720.132 ops/s
Iteration  20: 1719980.363 ops/s
Iteration  21: 1713767.277 ops/s
Iteration  22: 1715580.813 ops/s
Iteration  23: 1713202.553 ops/s
Iteration  24: 1719805.092 ops/s
Iteration  25: 1717871.377 ops/s
Iteration  26: 1715545.373 ops/s
Iteration  27: 1726589.318 ops/s
Iteration  28: 1720533.602 ops/s
Iteration  29: 1727807.977 ops/s
Iteration  30: 1724635.685 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithTarget":
  1719276.909 ±(99.9%) 2820.670 ops/s [Average]
  (min, avg, max) = (1711273.285, 1719276.909, 1727807.977), stdev = 4221.847
  CI (99.9%): [1716456.239, 1722097.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1719276.909 ± 2820.670  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 406711.763 ops/s
# Warmup Iteration   2: 827802.721 ops/s
# Warmup Iteration   3: 915686.063 ops/s
# Warmup Iteration   4: 922898.069 ops/s
# Warmup Iteration   5: 764614.138 ops/s
# Warmup Iteration   6: 922587.963 ops/s
# Warmup Iteration   7: 924012.906 ops/s
# Warmup Iteration   8: 919428.365 ops/s
# Warmup Iteration   9: 922571.576 ops/s
# Warmup Iteration  10: 923344.743 ops/s
# Warmup Iteration  11: 923225.565 ops/s
# Warmup Iteration  12: 925251.973 ops/s
# Warmup Iteration  13: 924651.563 ops/s
# Warmup Iteration  14: 921812.944 ops/s
# Warmup Iteration  15: 920505.796 ops/s
# Warmup Iteration  16: 923549.249 ops/s
# Warmup Iteration  17: 923013.630 ops/s
# Warmup Iteration  18: 923296.872 ops/s
# Warmup Iteration  19: 924517.280 ops/s
# Warmup Iteration  20: 921193.567 ops/s
# Warmup Iteration  21: 923435.562 ops/s
# Warmup Iteration  22: 922074.953 ops/s
# Warmup Iteration  23: 921358.125 ops/s
# Warmup Iteration  24: 920644.793 ops/s
# Warmup Iteration  25: 922959.468 ops/s
# Warmup Iteration  26: 922289.602 ops/s
# Warmup Iteration  27: 921546.620 ops/s
# Warmup Iteration  28: 921216.202 ops/s
# Warmup Iteration  29: 925986.559 ops/s
# Warmup Iteration  30: 923122.452 ops/s
Iteration   1: 925039.744 ops/s
Iteration   2: 925320.948 ops/s
Iteration   3: 917823.050 ops/s
Iteration   4: 922342.926 ops/s
Iteration   5: 922386.509 ops/s
Iteration   6: 918731.997 ops/s
Iteration   7: 921849.674 ops/s
Iteration   8: 918043.605 ops/s
Iteration   9: 923329.734 ops/s
Iteration  10: 922171.780 ops/s
Iteration  11: 927288.872 ops/s
Iteration  12: 917565.142 ops/s
Iteration  13: 926359.845 ops/s
Iteration  14: 923578.214 ops/s
Iteration  15: 926121.322 ops/s
Iteration  16: 925853.910 ops/s
Iteration  17: 921052.304 ops/s
Iteration  18: 926078.648 ops/s
Iteration  19: 926695.259 ops/s
Iteration  20: 926033.575 ops/s
Iteration  21: 921988.975 ops/s
Iteration  22: 929963.031 ops/s
Iteration  23: 926275.305 ops/s
Iteration  24: 920861.548 ops/s
Iteration  25: 923606.126 ops/s
Iteration  26: 922395.319 ops/s
Iteration  27: 918140.038 ops/s
Iteration  28: 922699.970 ops/s
Iteration  29: 920325.050 ops/s
Iteration  30: 921428.321 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIf":
  923045.025 ±(99.9%) 2128.874 ops/s [Average]
  (min, avg, max) = (917565.142, 923045.025, 929963.031), stdev = 3186.399
  CI (99.9%): [920916.150, 925173.899] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectIf  thrpt   30  923045.025 ± 2128.874  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIfWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIfWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2796590.003 ops/s
# Warmup Iteration   2: 6921588.043 ops/s
# Warmup Iteration   3: 6284685.138 ops/s
# Warmup Iteration   4: 6940521.778 ops/s
# Warmup Iteration   5: 7195532.598 ops/s
# Warmup Iteration   6: 7233927.736 ops/s
# Warmup Iteration   7: 7230392.236 ops/s
# Warmup Iteration   8: 7211254.301 ops/s
# Warmup Iteration   9: 7245315.896 ops/s
# Warmup Iteration  10: 7233025.747 ops/s
# Warmup Iteration  11: 7260100.199 ops/s
# Warmup Iteration  12: 7239432.803 ops/s
# Warmup Iteration  13: 7248602.548 ops/s
# Warmup Iteration  14: 7245895.836 ops/s
# Warmup Iteration  15: 7246817.413 ops/s
# Warmup Iteration  16: 7254699.149 ops/s
# Warmup Iteration  17: 7252190.970 ops/s
# Warmup Iteration  18: 7236804.535 ops/s
# Warmup Iteration  19: 7234440.394 ops/s
# Warmup Iteration  20: 7234335.346 ops/s
# Warmup Iteration  21: 7259316.489 ops/s
# Warmup Iteration  22: 7245694.754 ops/s
# Warmup Iteration  23: 7224814.341 ops/s
# Warmup Iteration  24: 7258580.811 ops/s
# Warmup Iteration  25: 7237661.714 ops/s
# Warmup Iteration  26: 7250590.260 ops/s
# Warmup Iteration  27: 7247013.586 ops/s
# Warmup Iteration  28: 7249597.960 ops/s
# Warmup Iteration  29: 7244476.904 ops/s
# Warmup Iteration  30: 7235582.605 ops/s
Iteration   1: 7229303.995 ops/s
Iteration   2: 7217449.572 ops/s
Iteration   3: 7215774.775 ops/s
Iteration   4: 7275824.493 ops/s
Iteration   5: 7267856.073 ops/s
Iteration   6: 7252285.819 ops/s
Iteration   7: 7243522.193 ops/s
Iteration   8: 7273664.312 ops/s
Iteration   9: 7251191.558 ops/s
Iteration  10: 7240298.323 ops/s
Iteration  11: 7259638.059 ops/s
Iteration  12: 7232160.399 ops/s
Iteration  13: 7258071.075 ops/s
Iteration  14: 7250858.744 ops/s
Iteration  15: 7227426.491 ops/s
Iteration  16: 7261269.027 ops/s
Iteration  17: 7245997.213 ops/s
Iteration  18: 7264931.761 ops/s
Iteration  19: 7284595.690 ops/s
Iteration  20: 7249284.733 ops/s
Iteration  21: 7262180.501 ops/s
Iteration  22: 7279605.792 ops/s
Iteration  23: 7279320.772 ops/s
Iteration  24: 7266785.223 ops/s
Iteration  25: 7234774.424 ops/s
Iteration  26: 7204238.080 ops/s
Iteration  27: 7281493.020 ops/s
Iteration  28: 7248259.187 ops/s
Iteration  29: 7220054.472 ops/s
Iteration  30: 7175313.325 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIfWithTarget":
  7248447.637 ±(99.9%) 17005.248 ops/s [Average]
  (min, avg, max) = (7175313.325, 7248447.637, 7284595.690), stdev = 25452.657
  CI (99.9%): [7231442.388, 7265452.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectIfWithTarget  thrpt   30  7248447.637 ± 17005.248  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 407391.095 ops/s
# Warmup Iteration   2: 931735.115 ops/s
# Warmup Iteration   3: 976268.359 ops/s
# Warmup Iteration   4: 865160.880 ops/s
# Warmup Iteration   5: 924380.033 ops/s
# Warmup Iteration   6: 975619.672 ops/s
# Warmup Iteration   7: 977849.475 ops/s
# Warmup Iteration   8: 980862.878 ops/s
# Warmup Iteration   9: 975742.409 ops/s
# Warmup Iteration  10: 978687.042 ops/s
# Warmup Iteration  11: 979603.872 ops/s
# Warmup Iteration  12: 973448.124 ops/s
# Warmup Iteration  13: 979257.647 ops/s
# Warmup Iteration  14: 975859.343 ops/s
# Warmup Iteration  15: 977731.270 ops/s
# Warmup Iteration  16: 980248.499 ops/s
# Warmup Iteration  17: 979319.496 ops/s
# Warmup Iteration  18: 975366.492 ops/s
# Warmup Iteration  19: 973309.310 ops/s
# Warmup Iteration  20: 978372.048 ops/s
# Warmup Iteration  21: 978413.929 ops/s
# Warmup Iteration  22: 977448.371 ops/s
# Warmup Iteration  23: 977776.517 ops/s
# Warmup Iteration  24: 978724.688 ops/s
# Warmup Iteration  25: 981243.636 ops/s
# Warmup Iteration  26: 979274.406 ops/s
# Warmup Iteration  27: 979699.992 ops/s
# Warmup Iteration  28: 976386.551 ops/s
# Warmup Iteration  29: 974683.473 ops/s
# Warmup Iteration  30: 978640.448 ops/s
Iteration   1: 979420.137 ops/s
Iteration   2: 978432.062 ops/s
Iteration   3: 970813.429 ops/s
Iteration   4: 971741.371 ops/s
Iteration   5: 964269.404 ops/s
Iteration   6: 964846.541 ops/s
Iteration   7: 972755.503 ops/s
Iteration   8: 975480.482 ops/s
Iteration   9: 970371.246 ops/s
Iteration  10: 972595.046 ops/s
Iteration  11: 973751.010 ops/s
Iteration  12: 973986.333 ops/s
Iteration  13: 974842.091 ops/s
Iteration  14: 975241.883 ops/s
Iteration  15: 970374.815 ops/s
Iteration  16: 976683.035 ops/s
Iteration  17: 974135.245 ops/s
Iteration  18: 976728.085 ops/s
Iteration  19: 977289.255 ops/s
Iteration  20: 971080.404 ops/s
Iteration  21: 973140.507 ops/s
Iteration  22: 975624.818 ops/s
Iteration  23: 978762.225 ops/s
Iteration  24: 975639.622 ops/s
Iteration  25: 975365.577 ops/s
Iteration  26: 970929.515 ops/s
Iteration  27: 971156.118 ops/s
Iteration  28: 974661.733 ops/s
Iteration  29: 976093.518 ops/s
Iteration  30: 977635.880 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectInt":
  973794.896 ±(99.9%) 2405.693 ops/s [Average]
  (min, avg, max) = (964269.404, 973794.896, 979420.137), stdev = 3600.728
  CI (99.9%): [971389.203, 976200.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectInt  thrpt   30  973794.896 ± 2405.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1041634.623 ops/s
# Warmup Iteration   2: 2237136.978 ops/s
# Warmup Iteration   3: 2330459.511 ops/s
# Warmup Iteration   4: 2333534.788 ops/s
# Warmup Iteration   5: 1938928.576 ops/s
# Warmup Iteration   6: 2336672.954 ops/s
# Warmup Iteration   7: 2323462.987 ops/s
# Warmup Iteration   8: 2340251.000 ops/s
# Warmup Iteration   9: 2333044.001 ops/s
# Warmup Iteration  10: 2337219.154 ops/s
# Warmup Iteration  11: 2328540.614 ops/s
# Warmup Iteration  12: 2337230.533 ops/s
# Warmup Iteration  13: 2341858.619 ops/s
# Warmup Iteration  14: 2351763.775 ops/s
# Warmup Iteration  15: 2344120.710 ops/s
# Warmup Iteration  16: 2335906.984 ops/s
# Warmup Iteration  17: 2329087.995 ops/s
# Warmup Iteration  18: 2346654.824 ops/s
# Warmup Iteration  19: 2335677.271 ops/s
# Warmup Iteration  20: 2341799.678 ops/s
# Warmup Iteration  21: 2348699.530 ops/s
# Warmup Iteration  22: 2339661.401 ops/s
# Warmup Iteration  23: 2345749.735 ops/s
# Warmup Iteration  24: 2346402.453 ops/s
# Warmup Iteration  25: 2349787.441 ops/s
# Warmup Iteration  26: 2341582.877 ops/s
# Warmup Iteration  27: 2352512.709 ops/s
# Warmup Iteration  28: 2350076.997 ops/s
# Warmup Iteration  29: 2340153.197 ops/s
# Warmup Iteration  30: 2349932.741 ops/s
Iteration   1: 2360063.686 ops/s
Iteration   2: 2343687.411 ops/s
Iteration   3: 2347463.574 ops/s
Iteration   4: 2340834.513 ops/s
Iteration   5: 2340286.568 ops/s
Iteration   6: 2354645.813 ops/s
Iteration   7: 2354905.887 ops/s
Iteration   8: 2343019.537 ops/s
Iteration   9: 2347783.572 ops/s
Iteration  10: 2350229.960 ops/s
Iteration  11: 2348061.003 ops/s
Iteration  12: 2346621.988 ops/s
Iteration  13: 2358890.206 ops/s
Iteration  14: 2358535.326 ops/s
Iteration  15: 2354184.633 ops/s
Iteration  16: 2350292.049 ops/s
Iteration  17: 2344424.450 ops/s
Iteration  18: 2339075.955 ops/s
Iteration  19: 2345710.211 ops/s
Iteration  20: 2348509.856 ops/s
Iteration  21: 2348651.001 ops/s
Iteration  22: 2351316.153 ops/s
Iteration  23: 2346438.613 ops/s
Iteration  24: 2351234.178 ops/s
Iteration  25: 2342455.676 ops/s
Iteration  26: 2357867.948 ops/s
Iteration  27: 2345160.000 ops/s
Iteration  28: 2342794.705 ops/s
Iteration  29: 2343604.768 ops/s
Iteration  30: 2343594.631 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2348344.796 ±(99.9%) 3908.787 ops/s [Average]
  (min, avg, max) = (2339075.955, 2348344.796, 2360063.686), stdev = 5850.488
  CI (99.9%): [2344436.009, 2352253.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2348344.796 ± 3908.787  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 755300.064 ops/s
# Warmup Iteration   2: 1840488.358 ops/s
# Warmup Iteration   3: 1934484.575 ops/s
# Warmup Iteration   4: 1594883.584 ops/s
# Warmup Iteration   5: 1935352.452 ops/s
# Warmup Iteration   6: 1936117.410 ops/s
# Warmup Iteration   7: 1921303.346 ops/s
# Warmup Iteration   8: 1933102.030 ops/s
# Warmup Iteration   9: 1933184.013 ops/s
# Warmup Iteration  10: 1936599.754 ops/s
# Warmup Iteration  11: 1930439.681 ops/s
# Warmup Iteration  12: 1921019.743 ops/s
# Warmup Iteration  13: 1936202.341 ops/s
# Warmup Iteration  14: 1927840.494 ops/s
# Warmup Iteration  15: 1929104.328 ops/s
# Warmup Iteration  16: 1933632.278 ops/s
# Warmup Iteration  17: 1934254.010 ops/s
# Warmup Iteration  18: 1938416.836 ops/s
# Warmup Iteration  19: 1939825.505 ops/s
# Warmup Iteration  20: 1932798.180 ops/s
# Warmup Iteration  21: 1937669.001 ops/s
# Warmup Iteration  22: 1931275.142 ops/s
# Warmup Iteration  23: 1922440.429 ops/s
# Warmup Iteration  24: 1928487.909 ops/s
# Warmup Iteration  25: 1934309.223 ops/s
# Warmup Iteration  26: 1930353.680 ops/s
# Warmup Iteration  27: 1930615.478 ops/s
# Warmup Iteration  28: 1937952.592 ops/s
# Warmup Iteration  29: 1939266.762 ops/s
# Warmup Iteration  30: 1935748.772 ops/s
Iteration   1: 1923255.668 ops/s
Iteration   2: 1932417.640 ops/s
Iteration   3: 1930354.215 ops/s
Iteration   4: 1931818.336 ops/s
Iteration   5: 1939055.307 ops/s
Iteration   6: 1945407.531 ops/s
Iteration   7: 1931166.576 ops/s
Iteration   8: 1938771.179 ops/s
Iteration   9: 1927257.167 ops/s
Iteration  10: 1935486.566 ops/s
Iteration  11: 1942196.189 ops/s
Iteration  12: 1932305.960 ops/s
Iteration  13: 1934460.685 ops/s
Iteration  14: 1937538.411 ops/s
Iteration  15: 1937178.197 ops/s
Iteration  16: 1940260.109 ops/s
Iteration  17: 1937684.067 ops/s
Iteration  18: 1932558.960 ops/s
Iteration  19: 1932545.766 ops/s
Iteration  20: 1932735.040 ops/s
Iteration  21: 1924871.841 ops/s
Iteration  22: 1924716.341 ops/s
Iteration  23: 1929528.139 ops/s
Iteration  24: 1925076.768 ops/s
Iteration  25: 1924896.420 ops/s
Iteration  26: 1926043.050 ops/s
Iteration  27: 1932617.697 ops/s
Iteration  28: 1927104.650 ops/s
Iteration  29: 1940566.244 ops/s
Iteration  30: 1939270.945 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithTarget":
  1932971.522 ±(99.9%) 3973.053 ops/s [Average]
  (min, avg, max) = (1923255.668, 1932971.522, 1945407.531), stdev = 5946.680
  CI (99.9%): [1928998.469, 1936944.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1932971.522 ± 3973.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 349552.645 ops/s
# Warmup Iteration   2: 886910.605 ops/s
# Warmup Iteration   3: 896550.797 ops/s
# Warmup Iteration   4: 748691.502 ops/s
# Warmup Iteration   5: 894470.568 ops/s
# Warmup Iteration   6: 890537.119 ops/s
# Warmup Iteration   7: 888637.927 ops/s
# Warmup Iteration   8: 894997.317 ops/s
# Warmup Iteration   9: 893453.767 ops/s
# Warmup Iteration  10: 897571.683 ops/s
# Warmup Iteration  11: 887737.716 ops/s
# Warmup Iteration  12: 892221.854 ops/s
# Warmup Iteration  13: 896726.047 ops/s
# Warmup Iteration  14: 898059.940 ops/s
# Warmup Iteration  15: 895169.283 ops/s
# Warmup Iteration  16: 895526.183 ops/s
# Warmup Iteration  17: 898264.552 ops/s
# Warmup Iteration  18: 900851.809 ops/s
# Warmup Iteration  19: 897684.532 ops/s
# Warmup Iteration  20: 896085.408 ops/s
# Warmup Iteration  21: 899319.315 ops/s
# Warmup Iteration  22: 898563.378 ops/s
# Warmup Iteration  23: 898476.487 ops/s
# Warmup Iteration  24: 897122.508 ops/s
# Warmup Iteration  25: 897790.381 ops/s
# Warmup Iteration  26: 893699.845 ops/s
# Warmup Iteration  27: 897203.891 ops/s
# Warmup Iteration  28: 898076.212 ops/s
# Warmup Iteration  29: 900051.501 ops/s
# Warmup Iteration  30: 897604.722 ops/s
Iteration   1: 899662.049 ops/s
Iteration   2: 900197.887 ops/s
Iteration   3: 897908.126 ops/s
Iteration   4: 899719.123 ops/s
Iteration   5: 895777.455 ops/s
Iteration   6: 896393.727 ops/s
Iteration   7: 899063.956 ops/s
Iteration   8: 893143.655 ops/s
Iteration   9: 897622.859 ops/s
Iteration  10: 898928.146 ops/s
Iteration  11: 895641.535 ops/s
Iteration  12: 898285.028 ops/s
Iteration  13: 895474.511 ops/s
Iteration  14: 900348.597 ops/s
Iteration  15: 898453.864 ops/s
Iteration  16: 900273.062 ops/s
Iteration  17: 901311.124 ops/s
Iteration  18: 901609.615 ops/s
Iteration  19: 900236.788 ops/s
Iteration  20: 897915.515 ops/s
Iteration  21: 896126.150 ops/s
Iteration  22: 900705.004 ops/s
Iteration  23: 899477.196 ops/s
Iteration  24: 898152.756 ops/s
Iteration  25: 901488.613 ops/s
Iteration  26: 899047.337 ops/s
Iteration  27: 898118.762 ops/s
Iteration  28: 900745.655 ops/s
Iteration  29: 898304.868 ops/s
Iteration  30: 896944.861 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLong":
  898569.261 ±(99.9%) 1364.994 ops/s [Average]
  (min, avg, max) = (893143.655, 898569.261, 901609.615), stdev = 2043.058
  CI (99.9%): [897204.267, 899934.255] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectLong  thrpt   30  898569.261 ± 1364.994  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927053.067 ops/s
# Warmup Iteration   2: 2384878.831 ops/s
# Warmup Iteration   3: 2385534.991 ops/s
# Warmup Iteration   4: 1969574.798 ops/s
# Warmup Iteration   5: 2385591.410 ops/s
# Warmup Iteration   6: 2379532.443 ops/s
# Warmup Iteration   7: 2388509.872 ops/s
# Warmup Iteration   8: 2386499.733 ops/s
# Warmup Iteration   9: 2399068.578 ops/s
# Warmup Iteration  10: 2392905.670 ops/s
# Warmup Iteration  11: 2378977.109 ops/s
# Warmup Iteration  12: 2404004.927 ops/s
# Warmup Iteration  13: 2401715.740 ops/s
# Warmup Iteration  14: 2398265.118 ops/s
# Warmup Iteration  15: 2386807.218 ops/s
# Warmup Iteration  16: 2390681.809 ops/s
# Warmup Iteration  17: 2396399.228 ops/s
# Warmup Iteration  18: 2401007.552 ops/s
# Warmup Iteration  19: 2401298.378 ops/s
# Warmup Iteration  20: 2404463.592 ops/s
# Warmup Iteration  21: 2402023.031 ops/s
# Warmup Iteration  22: 2404241.800 ops/s
# Warmup Iteration  23: 2399504.985 ops/s
# Warmup Iteration  24: 2403409.507 ops/s
# Warmup Iteration  25: 2403487.629 ops/s
# Warmup Iteration  26: 2400035.780 ops/s
# Warmup Iteration  27: 2407810.607 ops/s
# Warmup Iteration  28: 2394520.018 ops/s
# Warmup Iteration  29: 2393285.089 ops/s
# Warmup Iteration  30: 2396552.507 ops/s
Iteration   1: 2383841.396 ops/s
Iteration   2: 2394863.467 ops/s
Iteration   3: 2394796.220 ops/s
Iteration   4: 2388280.473 ops/s
Iteration   5: 2394169.847 ops/s
Iteration   6: 2406840.446 ops/s
Iteration   7: 2392617.794 ops/s
Iteration   8: 2395100.716 ops/s
Iteration   9: 2398225.081 ops/s
Iteration  10: 2400601.493 ops/s
Iteration  11: 2393546.508 ops/s
Iteration  12: 2391328.507 ops/s
Iteration  13: 2387791.298 ops/s
Iteration  14: 2403637.135 ops/s
Iteration  15: 2399118.679 ops/s
Iteration  16: 2409202.128 ops/s
Iteration  17: 2405031.399 ops/s
Iteration  18: 2390931.160 ops/s
Iteration  19: 2391442.141 ops/s
Iteration  20: 2399436.301 ops/s
Iteration  21: 2392514.798 ops/s
Iteration  22: 2408861.736 ops/s
Iteration  23: 2407327.048 ops/s
Iteration  24: 2401988.442 ops/s
Iteration  25: 2389519.185 ops/s
Iteration  26: 2403450.047 ops/s
Iteration  27: 2397775.497 ops/s
Iteration  28: 2395880.383 ops/s
Iteration  29: 2385440.504 ops/s
Iteration  30: 2394647.539 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2396606.912 ±(99.9%) 4627.995 ops/s [Average]
  (min, avg, max) = (2383841.396, 2396606.912, 2409202.128), stdev = 6926.966
  CI (99.9%): [2391978.917, 2401234.908] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2396606.912 ± 4627.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 656537.011 ops/s
# Warmup Iteration   2: 1757662.490 ops/s
# Warmup Iteration   3: 1772612.096 ops/s
# Warmup Iteration   4: 1471040.778 ops/s
# Warmup Iteration   5: 1762010.919 ops/s
# Warmup Iteration   6: 1772672.446 ops/s
# Warmup Iteration   7: 1771796.007 ops/s
# Warmup Iteration   8: 1772734.063 ops/s
# Warmup Iteration   9: 1769934.896 ops/s
# Warmup Iteration  10: 1765434.185 ops/s
# Warmup Iteration  11: 1772178.643 ops/s
# Warmup Iteration  12: 1761598.163 ops/s
# Warmup Iteration  13: 1765314.594 ops/s
# Warmup Iteration  14: 1761216.859 ops/s
# Warmup Iteration  15: 1768941.888 ops/s
# Warmup Iteration  16: 1763892.125 ops/s
# Warmup Iteration  17: 1767538.498 ops/s
# Warmup Iteration  18: 1766811.304 ops/s
# Warmup Iteration  19: 1768157.372 ops/s
# Warmup Iteration  20: 1766399.831 ops/s
# Warmup Iteration  21: 1763831.315 ops/s
# Warmup Iteration  22: 1764707.554 ops/s
# Warmup Iteration  23: 1760907.870 ops/s
# Warmup Iteration  24: 1766162.302 ops/s
# Warmup Iteration  25: 1763665.879 ops/s
# Warmup Iteration  26: 1762631.602 ops/s
# Warmup Iteration  27: 1765543.091 ops/s
# Warmup Iteration  28: 1762631.379 ops/s
# Warmup Iteration  29: 1764510.497 ops/s
# Warmup Iteration  30: 1770090.715 ops/s
Iteration   1: 1765740.524 ops/s
Iteration   2: 1771109.141 ops/s
Iteration   3: 1772040.790 ops/s
Iteration   4: 1777005.115 ops/s
Iteration   5: 1768036.960 ops/s
Iteration   6: 1768003.034 ops/s
Iteration   7: 1767592.400 ops/s
Iteration   8: 1770084.583 ops/s
Iteration   9: 1781036.726 ops/s
Iteration  10: 1761033.046 ops/s
Iteration  11: 1774785.959 ops/s
Iteration  12: 1771597.323 ops/s
Iteration  13: 1767018.120 ops/s
Iteration  14: 1778353.837 ops/s
Iteration  15: 1757573.362 ops/s
Iteration  16: 1774690.085 ops/s
Iteration  17: 1772671.366 ops/s
Iteration  18: 1762487.395 ops/s
Iteration  19: 1765249.907 ops/s
Iteration  20: 1768350.715 ops/s
Iteration  21: 1771065.527 ops/s
Iteration  22: 1772506.285 ops/s
Iteration  23: 1772586.372 ops/s
Iteration  24: 1768058.005 ops/s
Iteration  25: 1772743.501 ops/s
Iteration  26: 1766954.144 ops/s
Iteration  27: 1770048.529 ops/s
Iteration  28: 1763514.540 ops/s
Iteration  29: 1768762.720 ops/s
Iteration  30: 1769473.888 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithTarget":
  1769672.463 ±(99.9%) 3359.442 ops/s [Average]
  (min, avg, max) = (1757573.362, 1769672.463, 1781036.726), stdev = 5028.255
  CI (99.9%): [1766313.022, 1773031.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1769672.463 ± 3359.442  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 435139.156 ops/s
# Warmup Iteration   2: 1029844.597 ops/s
# Warmup Iteration   3: 1074553.391 ops/s
# Warmup Iteration   4: 904268.169 ops/s
# Warmup Iteration   5: 1065295.118 ops/s
# Warmup Iteration   6: 1079243.335 ops/s
# Warmup Iteration   7: 1080616.735 ops/s
# Warmup Iteration   8: 1080252.532 ops/s
# Warmup Iteration   9: 1078804.992 ops/s
# Warmup Iteration  10: 1079384.727 ops/s
# Warmup Iteration  11: 1080341.503 ops/s
# Warmup Iteration  12: 1079389.500 ops/s
# Warmup Iteration  13: 1076721.424 ops/s
# Warmup Iteration  14: 1074635.614 ops/s
# Warmup Iteration  15: 1076073.251 ops/s
# Warmup Iteration  16: 1077737.312 ops/s
# Warmup Iteration  17: 1077489.172 ops/s
# Warmup Iteration  18: 1076343.253 ops/s
# Warmup Iteration  19: 1080638.209 ops/s
# Warmup Iteration  20: 1079861.521 ops/s
# Warmup Iteration  21: 1072367.505 ops/s
# Warmup Iteration  22: 1080009.967 ops/s
# Warmup Iteration  23: 1075425.145 ops/s
# Warmup Iteration  24: 1075973.715 ops/s
# Warmup Iteration  25: 1079733.310 ops/s
# Warmup Iteration  26: 1076786.454 ops/s
# Warmup Iteration  27: 1079716.567 ops/s
# Warmup Iteration  28: 1079679.023 ops/s
# Warmup Iteration  29: 1077075.611 ops/s
# Warmup Iteration  30: 1079794.570 ops/s
Iteration   1: 1078581.465 ops/s
Iteration   2: 1080354.023 ops/s
Iteration   3: 1080271.230 ops/s
Iteration   4: 1080045.529 ops/s
Iteration   5: 1077354.264 ops/s
Iteration   6: 1079104.632 ops/s
Iteration   7: 1079025.638 ops/s
Iteration   8: 1080801.111 ops/s
Iteration   9: 1076546.754 ops/s
Iteration  10: 1075913.193 ops/s
Iteration  11: 1079672.179 ops/s
Iteration  12: 1077330.287 ops/s
Iteration  13: 1084901.043 ops/s
Iteration  14: 1073999.173 ops/s
Iteration  15: 1076043.073 ops/s
Iteration  16: 1073170.130 ops/s
Iteration  17: 1078896.596 ops/s
Iteration  18: 1077256.500 ops/s
Iteration  19: 1072054.517 ops/s
Iteration  20: 1075778.965 ops/s
Iteration  21: 1080423.328 ops/s
Iteration  22: 1077211.257 ops/s
Iteration  23: 1084517.745 ops/s
Iteration  24: 1079011.237 ops/s
Iteration  25: 1078918.823 ops/s
Iteration  26: 1080598.003 ops/s
Iteration  27: 1074986.231 ops/s
Iteration  28: 1075822.604 ops/s
Iteration  29: 1079107.564 ops/s
Iteration  30: 1081307.084 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShort":
  1078300.139 ±(99.9%) 1956.825 ops/s [Average]
  (min, avg, max) = (1072054.517, 1078300.139, 1084901.043), stdev = 2928.884
  CI (99.9%): [1076343.314, 1080256.965] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectShort  thrpt   30  1078300.139 ± 1956.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1072700.300 ops/s
# Warmup Iteration   2: 2453178.640 ops/s
# Warmup Iteration   3: 2577822.040 ops/s
# Warmup Iteration   4: 2325744.210 ops/s
# Warmup Iteration   5: 2400877.279 ops/s
# Warmup Iteration   6: 2580898.944 ops/s
# Warmup Iteration   7: 2592688.549 ops/s
# Warmup Iteration   8: 2587620.518 ops/s
# Warmup Iteration   9: 2593886.249 ops/s
# Warmup Iteration  10: 2586784.340 ops/s
# Warmup Iteration  11: 2585522.386 ops/s
# Warmup Iteration  12: 2589548.519 ops/s
# Warmup Iteration  13: 2576095.170 ops/s
# Warmup Iteration  14: 2581783.431 ops/s
# Warmup Iteration  15: 2578086.616 ops/s
# Warmup Iteration  16: 2579829.731 ops/s
# Warmup Iteration  17: 2570680.761 ops/s
# Warmup Iteration  18: 2586207.857 ops/s
# Warmup Iteration  19: 2568793.349 ops/s
# Warmup Iteration  20: 2583980.123 ops/s
# Warmup Iteration  21: 2579331.826 ops/s
# Warmup Iteration  22: 2577818.142 ops/s
# Warmup Iteration  23: 2579574.776 ops/s
# Warmup Iteration  24: 2582045.349 ops/s
# Warmup Iteration  25: 2581981.147 ops/s
# Warmup Iteration  26: 2583603.530 ops/s
# Warmup Iteration  27: 2579530.164 ops/s
# Warmup Iteration  28: 2578378.157 ops/s
# Warmup Iteration  29: 2579047.974 ops/s
# Warmup Iteration  30: 2575973.365 ops/s
Iteration   1: 2583993.060 ops/s
Iteration   2: 2584527.535 ops/s
Iteration   3: 2587586.859 ops/s
Iteration   4: 2593227.947 ops/s
Iteration   5: 2577185.193 ops/s
Iteration   6: 2580005.894 ops/s
Iteration   7: 2596367.284 ops/s
Iteration   8: 2586697.559 ops/s
Iteration   9: 2586978.000 ops/s
Iteration  10: 2582415.785 ops/s
Iteration  11: 2585291.131 ops/s
Iteration  12: 2584397.305 ops/s
Iteration  13: 2583080.592 ops/s
Iteration  14: 2588546.523 ops/s
Iteration  15: 2582090.534 ops/s
Iteration  16: 2583972.890 ops/s
Iteration  17: 2576746.162 ops/s
Iteration  18: 2585128.353 ops/s
Iteration  19: 2571074.014 ops/s
Iteration  20: 2578584.850 ops/s
Iteration  21: 2572255.057 ops/s
Iteration  22: 2580542.254 ops/s
Iteration  23: 2585856.090 ops/s
Iteration  24: 2587378.839 ops/s
Iteration  25: 2586889.147 ops/s
Iteration  26: 2586100.947 ops/s
Iteration  27: 2573426.274 ops/s
Iteration  28: 2580325.573 ops/s
Iteration  29: 2584297.967 ops/s
Iteration  30: 2569981.388 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2582831.700 ±(99.9%) 4054.630 ops/s [Average]
  (min, avg, max) = (2569981.388, 2582831.700, 2596367.284), stdev = 6068.779
  CI (99.9%): [2578777.071, 2586886.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2582831.700 ± 4054.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804143.222 ops/s
# Warmup Iteration   2: 1956952.510 ops/s
# Warmup Iteration   3: 2050123.342 ops/s
# Warmup Iteration   4: 1692665.753 ops/s
# Warmup Iteration   5: 2054634.178 ops/s
# Warmup Iteration   6: 2051839.326 ops/s
# Warmup Iteration   7: 2056135.904 ops/s
# Warmup Iteration   8: 2047881.914 ops/s
# Warmup Iteration   9: 2053373.469 ops/s
# Warmup Iteration  10: 2057761.276 ops/s
# Warmup Iteration  11: 2053539.514 ops/s
# Warmup Iteration  12: 2054003.816 ops/s
# Warmup Iteration  13: 2061911.593 ops/s
# Warmup Iteration  14: 2054475.272 ops/s
# Warmup Iteration  15: 2050375.869 ops/s
# Warmup Iteration  16: 2051398.092 ops/s
# Warmup Iteration  17: 2036522.116 ops/s
# Warmup Iteration  18: 2032643.054 ops/s
# Warmup Iteration  19: 2035682.179 ops/s
# Warmup Iteration  20: 2040002.131 ops/s
# Warmup Iteration  21: 2039851.661 ops/s
# Warmup Iteration  22: 2035273.550 ops/s
# Warmup Iteration  23: 2036421.894 ops/s
# Warmup Iteration  24: 2036036.334 ops/s
# Warmup Iteration  25: 2039509.141 ops/s
# Warmup Iteration  26: 2038849.345 ops/s
# Warmup Iteration  27: 2039601.793 ops/s
# Warmup Iteration  28: 2039774.002 ops/s
# Warmup Iteration  29: 2041686.412 ops/s
# Warmup Iteration  30: 2038103.021 ops/s
Iteration   1: 2037441.229 ops/s
Iteration   2: 2039127.165 ops/s
Iteration   3: 2034057.557 ops/s
Iteration   4: 2038638.106 ops/s
Iteration   5: 2038738.396 ops/s
Iteration   6: 2047385.349 ops/s
Iteration   7: 2036351.858 ops/s
Iteration   8: 2036722.097 ops/s
Iteration   9: 2038555.850 ops/s
Iteration  10: 2037008.814 ops/s
Iteration  11: 2035248.242 ops/s
Iteration  12: 2035024.087 ops/s
Iteration  13: 2031465.009 ops/s
Iteration  14: 2023495.184 ops/s
Iteration  15: 2029481.800 ops/s
Iteration  16: 2033896.904 ops/s
Iteration  17: 2033667.908 ops/s
Iteration  18: 2040076.526 ops/s
Iteration  19: 2034928.647 ops/s
Iteration  20: 2040377.780 ops/s
Iteration  21: 2032202.570 ops/s
Iteration  22: 2042566.436 ops/s
Iteration  23: 2042537.836 ops/s
Iteration  24: 2036477.832 ops/s
Iteration  25: 2039465.533 ops/s
Iteration  26: 2041341.464 ops/s
Iteration  27: 2040521.808 ops/s
Iteration  28: 2030000.267 ops/s
Iteration  29: 2038493.067 ops/s
Iteration  30: 2039513.942 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithTarget":
  2036826.975 ±(99.9%) 3116.943 ops/s [Average]
  (min, avg, max) = (2023495.184, 2036826.975, 2047385.349), stdev = 4665.294
  CI (99.9%): [2033710.032, 2039943.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2036826.975 ± 3116.943  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99635.313 ops/s
# Warmup Iteration   2: 164943.891 ops/s
# Warmup Iteration   3: 207815.508 ops/s
# Warmup Iteration   4: 206228.721 ops/s
# Warmup Iteration   5: 207329.782 ops/s
# Warmup Iteration   6: 207218.685 ops/s
# Warmup Iteration   7: 170519.538 ops/s
# Warmup Iteration   8: 207842.853 ops/s
# Warmup Iteration   9: 208150.023 ops/s
# Warmup Iteration  10: 207757.654 ops/s
# Warmup Iteration  11: 208428.720 ops/s
# Warmup Iteration  12: 207403.397 ops/s
# Warmup Iteration  13: 207468.401 ops/s
# Warmup Iteration  14: 207960.908 ops/s
# Warmup Iteration  15: 207910.300 ops/s
# Warmup Iteration  16: 208035.467 ops/s
# Warmup Iteration  17: 208330.690 ops/s
# Warmup Iteration  18: 207877.099 ops/s
# Warmup Iteration  19: 207437.496 ops/s
# Warmup Iteration  20: 207972.834 ops/s
# Warmup Iteration  21: 207515.010 ops/s
# Warmup Iteration  22: 207598.028 ops/s
# Warmup Iteration  23: 208088.970 ops/s
# Warmup Iteration  24: 207769.827 ops/s
# Warmup Iteration  25: 207808.272 ops/s
# Warmup Iteration  26: 207705.245 ops/s
# Warmup Iteration  27: 207039.506 ops/s
# Warmup Iteration  28: 208316.282 ops/s
# Warmup Iteration  29: 208158.940 ops/s
# Warmup Iteration  30: 208293.600 ops/s
Iteration   1: 208369.822 ops/s
Iteration   2: 207299.951 ops/s
Iteration   3: 207074.284 ops/s
Iteration   4: 206721.114 ops/s
Iteration   5: 207725.807 ops/s
Iteration   6: 207604.821 ops/s
Iteration   7: 208283.341 ops/s
Iteration   8: 207458.150 ops/s
Iteration   9: 207463.383 ops/s
Iteration  10: 208033.290 ops/s
Iteration  11: 207696.469 ops/s
Iteration  12: 207312.262 ops/s
Iteration  13: 207106.803 ops/s
Iteration  14: 206976.844 ops/s
Iteration  15: 207651.615 ops/s
Iteration  16: 207843.010 ops/s
Iteration  17: 208211.287 ops/s
Iteration  18: 207799.244 ops/s
Iteration  19: 207467.516 ops/s
Iteration  20: 207840.688 ops/s
Iteration  21: 207814.922 ops/s
Iteration  22: 207936.007 ops/s
Iteration  23: 208122.490 ops/s
Iteration  24: 207691.802 ops/s
Iteration  25: 208291.607 ops/s
Iteration  26: 208381.452 ops/s
Iteration  27: 208296.767 ops/s
Iteration  28: 207442.003 ops/s
Iteration  29: 207809.674 ops/s
Iteration  30: 207763.303 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectTarget":
  207716.324 ±(99.9%) 288.827 ops/s [Average]
  (min, avg, max) = (206721.114, 207716.324, 208381.452), stdev = 432.303
  CI (99.9%): [207427.497, 208005.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectTarget  thrpt   30  207716.324 ± 288.827  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 575694.407 ops/s
# Warmup Iteration   2: 1073554.823 ops/s
# Warmup Iteration   3: 1222451.904 ops/s
# Warmup Iteration   4: 1226343.635 ops/s
# Warmup Iteration   5: 1214969.720 ops/s
# Warmup Iteration   6: 1017406.043 ops/s
# Warmup Iteration   7: 1229294.339 ops/s
# Warmup Iteration   8: 1228158.910 ops/s
# Warmup Iteration   9: 1230531.299 ops/s
# Warmup Iteration  10: 1229491.760 ops/s
# Warmup Iteration  11: 1230706.722 ops/s
# Warmup Iteration  12: 1225801.842 ops/s
# Warmup Iteration  13: 1232466.359 ops/s
# Warmup Iteration  14: 1232721.737 ops/s
# Warmup Iteration  15: 1233207.763 ops/s
# Warmup Iteration  16: 1231613.616 ops/s
# Warmup Iteration  17: 1230090.890 ops/s
# Warmup Iteration  18: 1231208.402 ops/s
# Warmup Iteration  19: 1230265.578 ops/s
# Warmup Iteration  20: 1233216.698 ops/s
# Warmup Iteration  21: 1231455.653 ops/s
# Warmup Iteration  22: 1229781.862 ops/s
# Warmup Iteration  23: 1233730.611 ops/s
# Warmup Iteration  24: 1232161.987 ops/s
# Warmup Iteration  25: 1227459.299 ops/s
# Warmup Iteration  26: 1232807.371 ops/s
# Warmup Iteration  27: 1225709.391 ops/s
# Warmup Iteration  28: 1232130.457 ops/s
# Warmup Iteration  29: 1226192.198 ops/s
# Warmup Iteration  30: 1225826.577 ops/s
Iteration   1: 1226662.885 ops/s
Iteration   2: 1230826.957 ops/s
Iteration   3: 1224989.553 ops/s
Iteration   4: 1233871.886 ops/s
Iteration   5: 1229952.844 ops/s
Iteration   6: 1231052.256 ops/s
Iteration   7: 1232851.645 ops/s
Iteration   8: 1226860.022 ops/s
Iteration   9: 1229424.121 ops/s
Iteration  10: 1227482.696 ops/s
Iteration  11: 1228387.215 ops/s
Iteration  12: 1234334.299 ops/s
Iteration  13: 1229130.155 ops/s
Iteration  14: 1225310.540 ops/s
Iteration  15: 1231031.745 ops/s
Iteration  16: 1231572.122 ops/s
Iteration  17: 1232118.893 ops/s
Iteration  18: 1229224.391 ops/s
Iteration  19: 1224744.896 ops/s
Iteration  20: 1232893.578 ops/s
Iteration  21: 1228218.738 ops/s
Iteration  22: 1232895.544 ops/s
Iteration  23: 1230779.145 ops/s
Iteration  24: 1231215.503 ops/s
Iteration  25: 1228554.109 ops/s
Iteration  26: 1228162.853 ops/s
Iteration  27: 1228803.444 ops/s
Iteration  28: 1228150.130 ops/s
Iteration  29: 1230823.771 ops/s
Iteration  30: 1234026.839 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith":
  1229811.759 ±(99.9%) 1781.663 ops/s [Average]
  (min, avg, max) = (1224744.896, 1229811.759, 1234334.299), stdev = 2666.709
  CI (99.9%): [1228030.097, 1231593.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectWith  thrpt   30  1229811.759 ± 1781.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2985586.585 ops/s
# Warmup Iteration   2: 7368191.734 ops/s
# Warmup Iteration   3: 6825112.242 ops/s
# Warmup Iteration   4: 6590475.476 ops/s
# Warmup Iteration   5: 7334389.994 ops/s
# Warmup Iteration   6: 7322300.568 ops/s
# Warmup Iteration   7: 7344583.271 ops/s
# Warmup Iteration   8: 7342021.819 ops/s
# Warmup Iteration   9: 7335681.068 ops/s
# Warmup Iteration  10: 7345412.144 ops/s
# Warmup Iteration  11: 7332819.052 ops/s
# Warmup Iteration  12: 7324694.134 ops/s
# Warmup Iteration  13: 7321363.203 ops/s
# Warmup Iteration  14: 7347173.584 ops/s
# Warmup Iteration  15: 7374635.826 ops/s
# Warmup Iteration  16: 7329202.431 ops/s
# Warmup Iteration  17: 7336483.530 ops/s
# Warmup Iteration  18: 7324545.778 ops/s
# Warmup Iteration  19: 7330694.354 ops/s
# Warmup Iteration  20: 7301232.326 ops/s
# Warmup Iteration  21: 7303020.823 ops/s
# Warmup Iteration  22: 7322316.857 ops/s
# Warmup Iteration  23: 7305009.614 ops/s
# Warmup Iteration  24: 7325526.223 ops/s
# Warmup Iteration  25: 7346056.164 ops/s
# Warmup Iteration  26: 7332269.091 ops/s
# Warmup Iteration  27: 7351446.706 ops/s
# Warmup Iteration  28: 7338997.201 ops/s
# Warmup Iteration  29: 7314273.313 ops/s
# Warmup Iteration  30: 7318825.839 ops/s
Iteration   1: 7361138.112 ops/s
Iteration   2: 7373579.851 ops/s
Iteration   3: 7353426.607 ops/s
Iteration   4: 7316139.952 ops/s
Iteration   5: 7347646.140 ops/s
Iteration   6: 7325296.097 ops/s
Iteration   7: 7349837.557 ops/s
Iteration   8: 7363058.445 ops/s
Iteration   9: 7353093.467 ops/s
Iteration  10: 7368748.594 ops/s
Iteration  11: 7372238.304 ops/s
Iteration  12: 7344289.603 ops/s
Iteration  13: 7346870.502 ops/s
Iteration  14: 7358469.572 ops/s
Iteration  15: 7348432.154 ops/s
Iteration  16: 7376638.581 ops/s
Iteration  17: 7334560.867 ops/s
Iteration  18: 7339787.870 ops/s
Iteration  19: 7316027.911 ops/s
Iteration  20: 7343933.078 ops/s
Iteration  21: 7361852.460 ops/s
Iteration  22: 7328122.855 ops/s
Iteration  23: 7317436.104 ops/s
Iteration  24: 7366409.357 ops/s
Iteration  25: 7359602.522 ops/s
Iteration  26: 7344142.912 ops/s
Iteration  27: 7295104.760 ops/s
Iteration  28: 7323200.359 ops/s
Iteration  29: 7334205.509 ops/s
Iteration  30: 7364241.999 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWithOccurrences":
  7346251.070 ±(99.9%) 13406.953 ops/s [Average]
  (min, avg, max) = (7295104.760, 7346251.070, 7376638.581), stdev = 20066.898
  CI (99.9%): [7332844.117, 7359658.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  7346251.070 ± 13406.953  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 99562.546 ops/s
# Warmup Iteration   2: 173214.941 ops/s
# Warmup Iteration   3: 213782.755 ops/s
# Warmup Iteration   4: 215056.422 ops/s
# Warmup Iteration   5: 215331.203 ops/s
# Warmup Iteration   6: 196337.990 ops/s
# Warmup Iteration   7: 196389.153 ops/s
# Warmup Iteration   8: 215521.098 ops/s
# Warmup Iteration   9: 215756.401 ops/s
# Warmup Iteration  10: 215549.233 ops/s
# Warmup Iteration  11: 215712.634 ops/s
# Warmup Iteration  12: 215639.665 ops/s
# Warmup Iteration  13: 215730.749 ops/s
# Warmup Iteration  14: 215114.582 ops/s
# Warmup Iteration  15: 215710.917 ops/s
# Warmup Iteration  16: 215762.147 ops/s
# Warmup Iteration  17: 215369.179 ops/s
# Warmup Iteration  18: 215893.463 ops/s
# Warmup Iteration  19: 216209.251 ops/s
# Warmup Iteration  20: 215275.598 ops/s
# Warmup Iteration  21: 215498.420 ops/s
# Warmup Iteration  22: 215668.411 ops/s
# Warmup Iteration  23: 215469.267 ops/s
# Warmup Iteration  24: 216101.415 ops/s
# Warmup Iteration  25: 215628.411 ops/s
# Warmup Iteration  26: 215244.291 ops/s
# Warmup Iteration  27: 215330.447 ops/s
# Warmup Iteration  28: 215649.128 ops/s
# Warmup Iteration  29: 215300.922 ops/s
# Warmup Iteration  30: 215752.522 ops/s
Iteration   1: 215373.657 ops/s
Iteration   2: 214927.169 ops/s
Iteration   3: 215939.530 ops/s
Iteration   4: 214723.093 ops/s
Iteration   5: 215808.191 ops/s
Iteration   6: 216060.358 ops/s
Iteration   7: 216212.414 ops/s
Iteration   8: 215280.697 ops/s
Iteration   9: 216107.128 ops/s
Iteration  10: 215775.887 ops/s
Iteration  11: 215312.531 ops/s
Iteration  12: 214750.884 ops/s
Iteration  13: 214959.854 ops/s
Iteration  14: 215936.409 ops/s
Iteration  15: 215756.758 ops/s
Iteration  16: 215881.816 ops/s
Iteration  17: 216138.219 ops/s
Iteration  18: 215244.892 ops/s
Iteration  19: 215453.047 ops/s
Iteration  20: 215358.515 ops/s
Iteration  21: 215150.986 ops/s
Iteration  22: 214668.988 ops/s
Iteration  23: 215481.949 ops/s
Iteration  24: 216015.645 ops/s
Iteration  25: 215310.330 ops/s
Iteration  26: 216304.909 ops/s
Iteration  27: 215667.473 ops/s
Iteration  28: 216403.711 ops/s
Iteration  29: 215976.506 ops/s
Iteration  30: 215764.494 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collectWith_target":
  215591.535 ±(99.9%) 327.963 ops/s [Average]
  (min, avg, max) = (214668.988, 215591.535, 216403.711), stdev = 490.879
  CI (99.9%): [215263.572, 215919.498] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  215591.535 ± 327.963  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1479866.355 ops/s
# Warmup Iteration   2: 3268657.074 ops/s
# Warmup Iteration   3: 3423921.325 ops/s
# Warmup Iteration   4: 3424646.315 ops/s
# Warmup Iteration   5: 2866129.255 ops/s
# Warmup Iteration   6: 3450193.142 ops/s
# Warmup Iteration   7: 3437682.323 ops/s
# Warmup Iteration   8: 3441582.318 ops/s
# Warmup Iteration   9: 3453420.358 ops/s
# Warmup Iteration  10: 3444383.060 ops/s
# Warmup Iteration  11: 3443461.896 ops/s
# Warmup Iteration  12: 3442083.112 ops/s
# Warmup Iteration  13: 3441762.243 ops/s
# Warmup Iteration  14: 3456886.874 ops/s
# Warmup Iteration  15: 3445579.551 ops/s
# Warmup Iteration  16: 3447456.849 ops/s
# Warmup Iteration  17: 3445650.243 ops/s
# Warmup Iteration  18: 3449378.846 ops/s
# Warmup Iteration  19: 3443343.404 ops/s
# Warmup Iteration  20: 3434759.052 ops/s
# Warmup Iteration  21: 3451660.945 ops/s
# Warmup Iteration  22: 3446313.996 ops/s
# Warmup Iteration  23: 3447964.418 ops/s
# Warmup Iteration  24: 3447960.475 ops/s
# Warmup Iteration  25: 3454132.160 ops/s
# Warmup Iteration  26: 3447881.745 ops/s
# Warmup Iteration  27: 3449238.511 ops/s
# Warmup Iteration  28: 3443844.068 ops/s
# Warmup Iteration  29: 3456492.877 ops/s
# Warmup Iteration  30: 3447177.304 ops/s
Iteration   1: 3447864.246 ops/s
Iteration   2: 3443197.162 ops/s
Iteration   3: 3451643.243 ops/s
Iteration   4: 3455696.268 ops/s
Iteration   5: 3441806.936 ops/s
Iteration   6: 3442535.563 ops/s
Iteration   7: 3448039.193 ops/s
Iteration   8: 3456746.515 ops/s
Iteration   9: 3442339.606 ops/s
Iteration  10: 3443124.641 ops/s
Iteration  11: 3448255.714 ops/s
Iteration  12: 3456130.569 ops/s
Iteration  13: 3446283.033 ops/s
Iteration  14: 3451073.117 ops/s
Iteration  15: 3441741.831 ops/s
Iteration  16: 3444591.130 ops/s
Iteration  17: 3443041.367 ops/s
Iteration  18: 3459263.200 ops/s
Iteration  19: 3436671.034 ops/s
Iteration  20: 3442002.870 ops/s
Iteration  21: 3434097.739 ops/s
Iteration  22: 3447492.492 ops/s
Iteration  23: 3430897.240 ops/s
Iteration  24: 3444361.227 ops/s
Iteration  25: 3441492.676 ops/s
Iteration  26: 3438097.687 ops/s
Iteration  27: 3441655.491 ops/s
Iteration  28: 3440961.619 ops/s
Iteration  29: 3453046.047 ops/s
Iteration  30: 3454294.095 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_collect_target":
  3445614.785 ±(99.9%) 4583.868 ops/s [Average]
  (min, avg, max) = (3430897.240, 3445614.785, 3459263.200), stdev = 6860.919
  CI (99.9%): [3441030.917, 3450198.653] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_collect_target  thrpt   30  3445614.785 ± 4583.868  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2063505.913 ops/s
# Warmup Iteration   2: 3755390.495 ops/s
# Warmup Iteration   3: 4184944.057 ops/s
# Warmup Iteration   4: 4187154.797 ops/s
# Warmup Iteration   5: 3944535.923 ops/s
# Warmup Iteration   6: 3716259.851 ops/s
# Warmup Iteration   7: 4213185.932 ops/s
# Warmup Iteration   8: 4210489.961 ops/s
# Warmup Iteration   9: 4233552.081 ops/s
# Warmup Iteration  10: 4220596.093 ops/s
# Warmup Iteration  11: 4191261.291 ops/s
# Warmup Iteration  12: 4217589.420 ops/s
# Warmup Iteration  13: 4219826.214 ops/s
# Warmup Iteration  14: 4198907.961 ops/s
# Warmup Iteration  15: 4213173.750 ops/s
# Warmup Iteration  16: 4199230.710 ops/s
# Warmup Iteration  17: 4207484.850 ops/s
# Warmup Iteration  18: 4210072.504 ops/s
# Warmup Iteration  19: 4219344.174 ops/s
# Warmup Iteration  20: 4220990.863 ops/s
# Warmup Iteration  21: 4196296.109 ops/s
# Warmup Iteration  22: 4208953.645 ops/s
# Warmup Iteration  23: 4201558.497 ops/s
# Warmup Iteration  24: 4207754.434 ops/s
# Warmup Iteration  25: 4208716.281 ops/s
# Warmup Iteration  26: 4207286.202 ops/s
# Warmup Iteration  27: 4212782.621 ops/s
# Warmup Iteration  28: 4228389.667 ops/s
# Warmup Iteration  29: 4224288.163 ops/s
# Warmup Iteration  30: 4231019.805 ops/s
Iteration   1: 4228470.637 ops/s
Iteration   2: 4228719.242 ops/s
Iteration   3: 4217691.055 ops/s
Iteration   4: 4228674.758 ops/s
Iteration   5: 4218029.601 ops/s
Iteration   6: 4232951.613 ops/s
Iteration   7: 4221072.639 ops/s
Iteration   8: 4223696.383 ops/s
Iteration   9: 4234627.703 ops/s
Iteration  10: 4227112.457 ops/s
Iteration  11: 4226688.475 ops/s
Iteration  12: 4228600.839 ops/s
Iteration  13: 4230785.513 ops/s
Iteration  14: 4205429.579 ops/s
Iteration  15: 4237869.524 ops/s
Iteration  16: 4220097.484 ops/s
Iteration  17: 4215584.356 ops/s
Iteration  18: 4213868.941 ops/s
Iteration  19: 4225196.041 ops/s
Iteration  20: 4211059.035 ops/s
Iteration  21: 4195608.163 ops/s
Iteration  22: 4229253.463 ops/s
Iteration  23: 4235805.348 ops/s
Iteration  24: 4226360.331 ops/s
Iteration  25: 4227996.868 ops/s
Iteration  26: 4213711.441 ops/s
Iteration  27: 4218374.850 ops/s
Iteration  28: 4196781.302 ops/s
Iteration  29: 4239246.218 ops/s
Iteration  30: 4231507.813 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_contains":
  4223029.056 ±(99.9%) 7291.139 ops/s [Average]
  (min, avg, max) = (4195608.163, 4223029.056, 4239246.218), stdev = 10913.035
  CI (99.9%): [4215737.916, 4230320.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_contains  thrpt   30  4223029.056 ± 7291.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1906315.105 ops/s
# Warmup Iteration   2: 3833657.876 ops/s
# Warmup Iteration   3: 4148513.771 ops/s
# Warmup Iteration   4: 4162792.567 ops/s
# Warmup Iteration   5: 3433937.958 ops/s
# Warmup Iteration   6: 4171374.043 ops/s
# Warmup Iteration   7: 4172940.571 ops/s
# Warmup Iteration   8: 4188456.281 ops/s
# Warmup Iteration   9: 4183285.504 ops/s
# Warmup Iteration  10: 4167990.010 ops/s
# Warmup Iteration  11: 4180643.789 ops/s
# Warmup Iteration  12: 4164281.237 ops/s
# Warmup Iteration  13: 4183857.804 ops/s
# Warmup Iteration  14: 4180470.728 ops/s
# Warmup Iteration  15: 4177086.207 ops/s
# Warmup Iteration  16: 4182437.954 ops/s
# Warmup Iteration  17: 4177234.869 ops/s
# Warmup Iteration  18: 4181709.567 ops/s
# Warmup Iteration  19: 4179211.124 ops/s
# Warmup Iteration  20: 4162425.581 ops/s
# Warmup Iteration  21: 4185790.520 ops/s
# Warmup Iteration  22: 4179465.851 ops/s
# Warmup Iteration  23: 4185180.773 ops/s
# Warmup Iteration  24: 4179321.018 ops/s
# Warmup Iteration  25: 4185541.477 ops/s
# Warmup Iteration  26: 4180606.186 ops/s
# Warmup Iteration  27: 4181206.815 ops/s
# Warmup Iteration  28: 4150304.655 ops/s
# Warmup Iteration  29: 4185272.653 ops/s
# Warmup Iteration  30: 4181636.853 ops/s
Iteration   1: 4189220.293 ops/s
Iteration   2: 4174040.311 ops/s
Iteration   3: 4180132.097 ops/s
Iteration   4: 4182028.500 ops/s
Iteration   5: 4169796.873 ops/s
Iteration   6: 4170922.861 ops/s
Iteration   7: 4174087.274 ops/s
Iteration   8: 4185583.411 ops/s
Iteration   9: 4176657.878 ops/s
Iteration  10: 4183640.920 ops/s
Iteration  11: 4181087.386 ops/s
Iteration  12: 4189371.816 ops/s
Iteration  13: 4198693.430 ops/s
Iteration  14: 4187265.018 ops/s
Iteration  15: 4178757.483 ops/s
Iteration  16: 4205878.242 ops/s
Iteration  17: 4169376.562 ops/s
Iteration  18: 4169430.477 ops/s
Iteration  19: 4166467.899 ops/s
Iteration  20: 4183323.698 ops/s
Iteration  21: 4181279.161 ops/s
Iteration  22: 4175989.075 ops/s
Iteration  23: 4187204.903 ops/s
Iteration  24: 4183683.707 ops/s
Iteration  25: 4191138.574 ops/s
Iteration  26: 4195116.415 ops/s
Iteration  27: 4193894.300 ops/s
Iteration  28: 4180801.972 ops/s
Iteration  29: 4180079.514 ops/s
Iteration  30: 4185742.481 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllArray":
  4182356.418 ±(99.9%) 6176.914 ops/s [Average]
  (min, avg, max) = (4166467.899, 4182356.418, 4205878.242), stdev = 9245.315
  CI (99.9%): [4176179.504, 4188533.332] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  4182356.418 ± 6176.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1852945.321 ops/s
# Warmup Iteration   2: 3688837.918 ops/s
# Warmup Iteration   3: 4042585.554 ops/s
# Warmup Iteration   4: 4078650.449 ops/s
# Warmup Iteration   5: 3342465.751 ops/s
# Warmup Iteration   6: 4068288.803 ops/s
# Warmup Iteration   7: 4068465.910 ops/s
# Warmup Iteration   8: 4073479.199 ops/s
# Warmup Iteration   9: 4073223.258 ops/s
# Warmup Iteration  10: 4079448.277 ops/s
# Warmup Iteration  11: 4086182.533 ops/s
# Warmup Iteration  12: 4085536.794 ops/s
# Warmup Iteration  13: 4074737.597 ops/s
# Warmup Iteration  14: 4080346.976 ops/s
# Warmup Iteration  15: 4076999.627 ops/s
# Warmup Iteration  16: 4087372.391 ops/s
# Warmup Iteration  17: 4074676.185 ops/s
# Warmup Iteration  18: 4079543.678 ops/s
# Warmup Iteration  19: 4090152.641 ops/s
# Warmup Iteration  20: 4084705.714 ops/s
# Warmup Iteration  21: 4079394.354 ops/s
# Warmup Iteration  22: 4095498.195 ops/s
# Warmup Iteration  23: 4080437.060 ops/s
# Warmup Iteration  24: 4097444.249 ops/s
# Warmup Iteration  25: 4089873.782 ops/s
# Warmup Iteration  26: 4088318.240 ops/s
# Warmup Iteration  27: 4086148.651 ops/s
# Warmup Iteration  28: 4096409.246 ops/s
# Warmup Iteration  29: 4084991.537 ops/s
# Warmup Iteration  30: 4086248.343 ops/s
Iteration   1: 4083165.636 ops/s
Iteration   2: 4082834.234 ops/s
Iteration   3: 4108752.546 ops/s
Iteration   4: 4067420.491 ops/s
Iteration   5: 4083812.837 ops/s
Iteration   6: 4102336.990 ops/s
Iteration   7: 4083734.691 ops/s
Iteration   8: 4073865.413 ops/s
Iteration   9: 4076628.876 ops/s
Iteration  10: 4096405.147 ops/s
Iteration  11: 4073427.652 ops/s
Iteration  12: 4086896.762 ops/s
Iteration  13: 4069696.554 ops/s
Iteration  14: 4083245.668 ops/s
Iteration  15: 4097258.865 ops/s
Iteration  16: 4086371.672 ops/s
Iteration  17: 4098265.770 ops/s
Iteration  18: 4095632.410 ops/s
Iteration  19: 4084187.972 ops/s
Iteration  20: 4077874.006 ops/s
Iteration  21: 4077519.148 ops/s
Iteration  22: 4084393.124 ops/s
Iteration  23: 4092618.026 ops/s
Iteration  24: 4086096.317 ops/s
Iteration  25: 4097701.490 ops/s
Iteration  26: 4084649.738 ops/s
Iteration  27: 4088802.289 ops/s
Iteration  28: 4094506.069 ops/s
Iteration  29: 4097243.378 ops/s
Iteration  30: 4075628.100 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllCollection":
  4086365.729 ±(99.9%) 6727.080 ops/s [Average]
  (min, avg, max) = (4067420.491, 4086365.729, 4108752.546), stdev = 10068.778
  CI (99.9%): [4079638.649, 4093092.809] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4086365.729 ± 6727.080  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1560683.272 ops/s
# Warmup Iteration   2: 3541921.938 ops/s
# Warmup Iteration   3: 3748434.048 ops/s
# Warmup Iteration   4: 3717713.230 ops/s
# Warmup Iteration   5: 3180880.175 ops/s
# Warmup Iteration   6: 3787467.720 ops/s
# Warmup Iteration   7: 3772179.731 ops/s
# Warmup Iteration   8: 3792988.631 ops/s
# Warmup Iteration   9: 3783793.599 ops/s
# Warmup Iteration  10: 3781524.605 ops/s
# Warmup Iteration  11: 3765688.008 ops/s
# Warmup Iteration  12: 3784892.643 ops/s
# Warmup Iteration  13: 3795913.374 ops/s
# Warmup Iteration  14: 3775705.979 ops/s
# Warmup Iteration  15: 3794424.134 ops/s
# Warmup Iteration  16: 3781178.298 ops/s
# Warmup Iteration  17: 3770409.762 ops/s
# Warmup Iteration  18: 3780606.798 ops/s
# Warmup Iteration  19: 3795188.864 ops/s
# Warmup Iteration  20: 3772252.470 ops/s
# Warmup Iteration  21: 3770111.600 ops/s
# Warmup Iteration  22: 3777404.540 ops/s
# Warmup Iteration  23: 3782589.124 ops/s
# Warmup Iteration  24: 3781604.638 ops/s
# Warmup Iteration  25: 3779325.290 ops/s
# Warmup Iteration  26: 3780737.965 ops/s
# Warmup Iteration  27: 3791772.215 ops/s
# Warmup Iteration  28: 3785362.106 ops/s
# Warmup Iteration  29: 3789885.005 ops/s
# Warmup Iteration  30: 3779356.924 ops/s
Iteration   1: 3791983.560 ops/s
Iteration   2: 3802714.794 ops/s
Iteration   3: 3774194.828 ops/s
Iteration   4: 3787263.766 ops/s
Iteration   5: 3784352.634 ops/s
Iteration   6: 3787294.408 ops/s
Iteration   7: 3790954.702 ops/s
Iteration   8: 3789901.022 ops/s
Iteration   9: 3794202.795 ops/s
Iteration  10: 3784220.774 ops/s
Iteration  11: 3785392.710 ops/s
Iteration  12: 3782573.240 ops/s
Iteration  13: 3792916.710 ops/s
Iteration  14: 3807619.366 ops/s
Iteration  15: 3791317.300 ops/s
Iteration  16: 3797672.314 ops/s
Iteration  17: 3776241.593 ops/s
Iteration  18: 3785997.508 ops/s
Iteration  19: 3791222.935 ops/s
Iteration  20: 3802471.942 ops/s
Iteration  21: 3787736.728 ops/s
Iteration  22: 3784051.805 ops/s
Iteration  23: 3768357.481 ops/s
Iteration  24: 3793149.881 ops/s
Iteration  25: 3798178.872 ops/s
Iteration  26: 3779698.789 ops/s
Iteration  27: 3795635.806 ops/s
Iteration  28: 3796137.683 ops/s
Iteration  29: 3785370.070 ops/s
Iteration  30: 3794245.107 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAllIterable":
  3789435.704 ±(99.9%) 5717.183 ops/s [Average]
  (min, avg, max) = (3768357.481, 3789435.704, 3807619.366), stdev = 8557.211
  CI (99.9%): [3783718.521, 3795152.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3789435.704 ± 5717.183  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50554.103 ops/s
# Warmup Iteration   2: 76321.251 ops/s
# Warmup Iteration   3: 90230.678 ops/s
# Warmup Iteration   4: 89318.262 ops/s
# Warmup Iteration   5: 89465.938 ops/s
# Warmup Iteration   6: 90086.612 ops/s
# Warmup Iteration   7: 77440.659 ops/s
# Warmup Iteration   8: 89753.371 ops/s
# Warmup Iteration   9: 90481.136 ops/s
# Warmup Iteration  10: 90255.679 ops/s
# Warmup Iteration  11: 90147.011 ops/s
# Warmup Iteration  12: 90387.966 ops/s
# Warmup Iteration  13: 90411.914 ops/s
# Warmup Iteration  14: 90337.106 ops/s
# Warmup Iteration  15: 90469.723 ops/s
# Warmup Iteration  16: 90500.341 ops/s
# Warmup Iteration  17: 90270.309 ops/s
# Warmup Iteration  18: 90303.946 ops/s
# Warmup Iteration  19: 90235.073 ops/s
# Warmup Iteration  20: 90185.796 ops/s
# Warmup Iteration  21: 90106.479 ops/s
# Warmup Iteration  22: 90124.147 ops/s
# Warmup Iteration  23: 90228.321 ops/s
# Warmup Iteration  24: 89961.463 ops/s
# Warmup Iteration  25: 90188.395 ops/s
# Warmup Iteration  26: 90240.698 ops/s
# Warmup Iteration  27: 90132.502 ops/s
# Warmup Iteration  28: 90130.797 ops/s
# Warmup Iteration  29: 90201.764 ops/s
# Warmup Iteration  30: 90204.717 ops/s
Iteration   1: 90123.804 ops/s
Iteration   2: 90145.364 ops/s
Iteration   3: 90462.397 ops/s
Iteration   4: 90268.996 ops/s
Iteration   5: 89987.712 ops/s
Iteration   6: 90314.305 ops/s
Iteration   7: 90023.070 ops/s
Iteration   8: 90422.867 ops/s
Iteration   9: 90337.072 ops/s
Iteration  10: 90376.005 ops/s
Iteration  11: 90166.406 ops/s
Iteration  12: 90320.947 ops/s
Iteration  13: 90118.609 ops/s
Iteration  14: 89663.429 ops/s
Iteration  15: 90396.323 ops/s
Iteration  16: 90302.809 ops/s
Iteration  17: 90299.833 ops/s
Iteration  18: 90307.391 ops/s
Iteration  19: 90308.866 ops/s
Iteration  20: 89950.703 ops/s
Iteration  21: 90245.955 ops/s
Iteration  22: 89986.545 ops/s
Iteration  23: 90418.286 ops/s
Iteration  24: 89875.549 ops/s
Iteration  25: 89985.556 ops/s
Iteration  26: 90126.287 ops/s
Iteration  27: 90323.098 ops/s
Iteration  28: 90393.440 ops/s
Iteration  29: 90369.777 ops/s
Iteration  30: 90051.764 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyCollection":
  90202.439 ±(99.9%) 129.015 ops/s [Average]
  (min, avg, max) = (89663.429, 90202.439, 90462.397), stdev = 193.104
  CI (99.9%): [90073.424, 90331.454] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt      Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  90202.439 ± 129.015  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51249.276 ops/s
# Warmup Iteration   2: 77399.568 ops/s
# Warmup Iteration   3: 91465.692 ops/s
# Warmup Iteration   4: 90755.741 ops/s
# Warmup Iteration   5: 90747.465 ops/s
# Warmup Iteration   6: 91029.438 ops/s
# Warmup Iteration   7: 77458.401 ops/s
# Warmup Iteration   8: 91385.465 ops/s
# Warmup Iteration   9: 91297.970 ops/s
# Warmup Iteration  10: 91121.476 ops/s
# Warmup Iteration  11: 91084.961 ops/s
# Warmup Iteration  12: 91295.063 ops/s
# Warmup Iteration  13: 91190.404 ops/s
# Warmup Iteration  14: 91393.581 ops/s
# Warmup Iteration  15: 91634.354 ops/s
# Warmup Iteration  16: 91521.947 ops/s
# Warmup Iteration  17: 90949.683 ops/s
# Warmup Iteration  18: 91025.194 ops/s
# Warmup Iteration  19: 90895.946 ops/s
# Warmup Iteration  20: 91102.985 ops/s
# Warmup Iteration  21: 91125.591 ops/s
# Warmup Iteration  22: 90703.715 ops/s
# Warmup Iteration  23: 91002.539 ops/s
# Warmup Iteration  24: 91180.957 ops/s
# Warmup Iteration  25: 90953.994 ops/s
# Warmup Iteration  26: 91025.462 ops/s
# Warmup Iteration  27: 90944.825 ops/s
# Warmup Iteration  28: 90981.093 ops/s
# Warmup Iteration  29: 91100.967 ops/s
# Warmup Iteration  30: 90904.132 ops/s
Iteration   1: 90966.938 ops/s
Iteration   2: 91445.313 ops/s
Iteration   3: 91175.839 ops/s
Iteration   4: 91102.885 ops/s
Iteration   5: 90754.982 ops/s
Iteration   6: 91101.628 ops/s
Iteration   7: 90994.132 ops/s
Iteration   8: 91068.124 ops/s
Iteration   9: 91122.231 ops/s
Iteration  10: 91119.366 ops/s
Iteration  11: 90961.740 ops/s
Iteration  12: 90639.614 ops/s
Iteration  13: 90967.751 ops/s
Iteration  14: 91154.519 ops/s
Iteration  15: 91148.785 ops/s
Iteration  16: 91300.136 ops/s
Iteration  17: 90721.953 ops/s
Iteration  18: 91291.136 ops/s
Iteration  19: 90874.256 ops/s
Iteration  20: 91143.041 ops/s
Iteration  21: 90431.851 ops/s
Iteration  22: 90959.325 ops/s
Iteration  23: 90997.842 ops/s
Iteration  24: 91381.567 ops/s
Iteration  25: 91302.387 ops/s
Iteration  26: 90950.863 ops/s
Iteration  27: 91051.244 ops/s
Iteration  28: 90977.971 ops/s
Iteration  29: 90894.621 ops/s
Iteration  30: 91321.478 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyIterable":
  91044.117 ±(99.9%) 148.621 ops/s [Average]
  (min, avg, max) = (90431.851, 91044.117, 91445.313), stdev = 222.449
  CI (99.9%): [90895.496, 91192.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt      Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  91044.117 ± 148.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 647502.550 ops/s
# Warmup Iteration   2: 696600.034 ops/s
# Warmup Iteration   3: 839088.056 ops/s
# Warmup Iteration   4: 896094.383 ops/s
# Warmup Iteration   5: 896985.071 ops/s
# Warmup Iteration   6: 895088.810 ops/s
# Warmup Iteration   7: 899777.577 ops/s
# Warmup Iteration   8: 898579.382 ops/s
# Warmup Iteration   9: 896776.894 ops/s
# Warmup Iteration  10: 895320.368 ops/s
# Warmup Iteration  11: 897031.630 ops/s
# Warmup Iteration  12: 898260.414 ops/s
# Warmup Iteration  13: 807180.775 ops/s
# Warmup Iteration  14: 836057.737 ops/s
# Warmup Iteration  15: 899355.086 ops/s
# Warmup Iteration  16: 899213.720 ops/s
# Warmup Iteration  17: 950592.080 ops/s
# Warmup Iteration  18: 952618.307 ops/s
# Warmup Iteration  19: 952631.686 ops/s
# Warmup Iteration  20: 950751.060 ops/s
# Warmup Iteration  21: 945865.203 ops/s
# Warmup Iteration  22: 945951.423 ops/s
# Warmup Iteration  23: 947965.251 ops/s
# Warmup Iteration  24: 947068.316 ops/s
# Warmup Iteration  25: 946999.205 ops/s
# Warmup Iteration  26: 947798.226 ops/s
# Warmup Iteration  27: 948391.295 ops/s
# Warmup Iteration  28: 949686.005 ops/s
# Warmup Iteration  29: 947179.068 ops/s
# Warmup Iteration  30: 938528.716 ops/s
Iteration   1: 944987.537 ops/s
Iteration   2: 941047.801 ops/s
Iteration   3: 948613.125 ops/s
Iteration   4: 949626.504 ops/s
Iteration   5: 950519.560 ops/s
Iteration   6: 949948.909 ops/s
Iteration   7: 952794.022 ops/s
Iteration   8: 947372.970 ops/s
Iteration   9: 951681.623 ops/s
Iteration  10: 952501.908 ops/s
Iteration  11: 941581.626 ops/s
Iteration  12: 951752.057 ops/s
Iteration  13: 946738.076 ops/s
Iteration  14: 951012.289 ops/s
Iteration  15: 950608.461 ops/s
Iteration  16: 952669.049 ops/s
Iteration  17: 952640.294 ops/s
Iteration  18: 954143.351 ops/s
Iteration  19: 945855.254 ops/s
Iteration  20: 949925.827 ops/s
Iteration  21: 946512.366 ops/s
Iteration  22: 954338.615 ops/s
Iteration  23: 950528.251 ops/s
Iteration  24: 949429.683 ops/s
Iteration  25: 953628.132 ops/s
Iteration  26: 947983.722 ops/s
Iteration  27: 946107.924 ops/s
Iteration  28: 950137.419 ops/s
Iteration  29: 948009.646 ops/s
Iteration  30: 956161.440 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsBy":
  949628.581 ±(99.9%) 2378.667 ops/s [Average]
  (min, avg, max) = (941047.801, 949628.581, 956161.440), stdev = 3560.277
  CI (99.9%): [947249.914, 952007.248] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsBy  thrpt   30  949628.581 ± 2378.667  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52541.136 ops/s
# Warmup Iteration   2: 81585.326 ops/s
# Warmup Iteration   3: 95035.712 ops/s
# Warmup Iteration   4: 95328.276 ops/s
# Warmup Iteration   5: 95291.731 ops/s
# Warmup Iteration   6: 95300.436 ops/s
# Warmup Iteration   7: 81294.713 ops/s
# Warmup Iteration   8: 95585.491 ops/s
# Warmup Iteration   9: 95640.259 ops/s
# Warmup Iteration  10: 95454.126 ops/s
# Warmup Iteration  11: 95799.878 ops/s
# Warmup Iteration  12: 95453.761 ops/s
# Warmup Iteration  13: 95330.472 ops/s
# Warmup Iteration  14: 95467.818 ops/s
# Warmup Iteration  15: 95592.692 ops/s
# Warmup Iteration  16: 95648.135 ops/s
# Warmup Iteration  17: 95454.555 ops/s
# Warmup Iteration  18: 95112.880 ops/s
# Warmup Iteration  19: 95070.803 ops/s
# Warmup Iteration  20: 95277.633 ops/s
# Warmup Iteration  21: 95358.906 ops/s
# Warmup Iteration  22: 95129.026 ops/s
# Warmup Iteration  23: 95589.066 ops/s
# Warmup Iteration  24: 95463.590 ops/s
# Warmup Iteration  25: 95472.027 ops/s
# Warmup Iteration  26: 95405.910 ops/s
# Warmup Iteration  27: 95371.199 ops/s
# Warmup Iteration  28: 95286.200 ops/s
# Warmup Iteration  29: 95531.827 ops/s
# Warmup Iteration  30: 95501.372 ops/s
Iteration   1: 95531.657 ops/s
Iteration   2: 95597.460 ops/s
Iteration   3: 95593.311 ops/s
Iteration   4: 95550.702 ops/s
Iteration   5: 95425.528 ops/s
Iteration   6: 95491.954 ops/s
Iteration   7: 95357.395 ops/s
Iteration   8: 95008.879 ops/s
Iteration   9: 95015.514 ops/s
Iteration  10: 95234.918 ops/s
Iteration  11: 95210.478 ops/s
Iteration  12: 95394.906 ops/s
Iteration  13: 94379.351 ops/s
Iteration  14: 95453.412 ops/s
Iteration  15: 95190.167 ops/s
Iteration  16: 95664.416 ops/s
Iteration  17: 95866.927 ops/s
Iteration  18: 95698.990 ops/s
Iteration  19: 95325.523 ops/s
Iteration  20: 95301.150 ops/s
Iteration  21: 95243.916 ops/s
Iteration  22: 95235.290 ops/s
Iteration  23: 95531.976 ops/s
Iteration  24: 95536.218 ops/s
Iteration  25: 95481.768 ops/s
Iteration  26: 95848.154 ops/s
Iteration  27: 95259.440 ops/s
Iteration  28: 95042.991 ops/s
Iteration  29: 94957.764 ops/s
Iteration  30: 95332.897 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneCollection":
  95358.768 ±(99.9%) 198.654 ops/s [Average]
  (min, avg, max) = (94379.351, 95358.768, 95866.927), stdev = 297.337
  CI (99.9%): [95160.114, 95557.423] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt      Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  95358.768 ± 198.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49049.193 ops/s
# Warmup Iteration   2: 74158.383 ops/s
# Warmup Iteration   3: 89388.850 ops/s
# Warmup Iteration   4: 89114.107 ops/s
# Warmup Iteration   5: 89131.912 ops/s
# Warmup Iteration   6: 89305.640 ops/s
# Warmup Iteration   7: 80139.159 ops/s
# Warmup Iteration   8: 85118.982 ops/s
# Warmup Iteration   9: 89332.014 ops/s
# Warmup Iteration  10: 89403.786 ops/s
# Warmup Iteration  11: 89449.024 ops/s
# Warmup Iteration  12: 89452.246 ops/s
# Warmup Iteration  13: 89436.657 ops/s
# Warmup Iteration  14: 89500.258 ops/s
# Warmup Iteration  15: 89351.550 ops/s
# Warmup Iteration  16: 89531.045 ops/s
# Warmup Iteration  17: 89365.736 ops/s
# Warmup Iteration  18: 89430.837 ops/s
# Warmup Iteration  19: 89363.666 ops/s
# Warmup Iteration  20: 89069.548 ops/s
# Warmup Iteration  21: 89434.477 ops/s
# Warmup Iteration  22: 89283.340 ops/s
# Warmup Iteration  23: 89317.955 ops/s
# Warmup Iteration  24: 89074.471 ops/s
# Warmup Iteration  25: 89232.442 ops/s
# Warmup Iteration  26: 89032.167 ops/s
# Warmup Iteration  27: 89428.719 ops/s
# Warmup Iteration  28: 89447.926 ops/s
# Warmup Iteration  29: 89207.431 ops/s
# Warmup Iteration  30: 89229.271 ops/s
Iteration   1: 89373.733 ops/s
Iteration   2: 89193.379 ops/s
Iteration   3: 89132.868 ops/s
Iteration   4: 89304.798 ops/s
Iteration   5: 89161.477 ops/s
Iteration   6: 89121.922 ops/s
Iteration   7: 89496.450 ops/s
Iteration   8: 89496.357 ops/s
Iteration   9: 89152.783 ops/s
Iteration  10: 89050.425 ops/s
Iteration  11: 89194.980 ops/s
Iteration  12: 89097.666 ops/s
Iteration  13: 89224.095 ops/s
Iteration  14: 89435.139 ops/s
Iteration  15: 89630.463 ops/s
Iteration  16: 89240.039 ops/s
Iteration  17: 89384.193 ops/s
Iteration  18: 89104.218 ops/s
Iteration  19: 89321.525 ops/s
Iteration  20: 89170.392 ops/s
Iteration  21: 89532.227 ops/s
Iteration  22: 89721.941 ops/s
Iteration  23: 89437.281 ops/s
Iteration  24: 89689.109 ops/s
Iteration  25: 89622.095 ops/s
Iteration  26: 89347.356 ops/s
Iteration  27: 89458.661 ops/s
Iteration  28: 89530.493 ops/s
Iteration  29: 89485.863 ops/s
Iteration  30: 89586.879 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneIterable":
  89356.627 ±(99.9%) 131.028 ops/s [Average]
  (min, avg, max) = (89050.425, 89356.627, 89721.941), stdev = 196.117
  CI (99.9%): [89225.599, 89487.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt      Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  89356.627 ± 131.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2175346.746 ops/s
# Warmup Iteration   2: 4281523.378 ops/s
# Warmup Iteration   3: 4582406.188 ops/s
# Warmup Iteration   4: 4602516.693 ops/s
# Warmup Iteration   5: 3792016.794 ops/s
# Warmup Iteration   6: 4617744.050 ops/s
# Warmup Iteration   7: 4627957.537 ops/s
# Warmup Iteration   8: 4628692.426 ops/s
# Warmup Iteration   9: 4628202.698 ops/s
# Warmup Iteration  10: 4625300.873 ops/s
# Warmup Iteration  11: 4619934.051 ops/s
# Warmup Iteration  12: 4628847.718 ops/s
# Warmup Iteration  13: 4622699.603 ops/s
# Warmup Iteration  14: 4621343.993 ops/s
# Warmup Iteration  15: 4621334.016 ops/s
# Warmup Iteration  16: 4604777.454 ops/s
# Warmup Iteration  17: 4666788.788 ops/s
# Warmup Iteration  18: 4665350.310 ops/s
# Warmup Iteration  19: 4669015.269 ops/s
# Warmup Iteration  20: 4669306.353 ops/s
# Warmup Iteration  21: 4666474.143 ops/s
# Warmup Iteration  22: 4654317.413 ops/s
# Warmup Iteration  23: 4674808.547 ops/s
# Warmup Iteration  24: 4659031.270 ops/s
# Warmup Iteration  25: 4652035.628 ops/s
# Warmup Iteration  26: 4667512.787 ops/s
# Warmup Iteration  27: 4652985.062 ops/s
# Warmup Iteration  28: 4663246.700 ops/s
# Warmup Iteration  29: 4675256.402 ops/s
# Warmup Iteration  30: 4666626.844 ops/s
Iteration   1: 4680136.218 ops/s
Iteration   2: 4665257.776 ops/s
Iteration   3: 4654119.176 ops/s
Iteration   4: 4672563.981 ops/s
Iteration   5: 4668965.244 ops/s
Iteration   6: 4665284.422 ops/s
Iteration   7: 4670247.856 ops/s
Iteration   8: 4673813.819 ops/s
Iteration   9: 4644668.062 ops/s
Iteration  10: 4674451.070 ops/s
Iteration  11: 4661986.537 ops/s
Iteration  12: 4655944.543 ops/s
Iteration  13: 4663671.606 ops/s
Iteration  14: 4675557.400 ops/s
Iteration  15: 4646321.315 ops/s
Iteration  16: 4666181.251 ops/s
Iteration  17: 4663425.797 ops/s
Iteration  18: 4683151.739 ops/s
Iteration  19: 4675333.197 ops/s
Iteration  20: 4679466.285 ops/s
Iteration  21: 4669493.851 ops/s
Iteration  22: 4668483.534 ops/s
Iteration  23: 4689947.840 ops/s
Iteration  24: 4663066.004 ops/s
Iteration  25: 4669995.025 ops/s
Iteration  26: 4663306.719 ops/s
Iteration  27: 4665847.617 ops/s
Iteration  28: 4655554.934 ops/s
Iteration  29: 4666652.067 ops/s
Iteration  30: 4655662.941 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_count":
  4666951.928 ±(99.9%) 6775.997 ops/s [Average]
  (min, avg, max) = (4644668.062, 4666951.928, 4689947.840), stdev = 10141.994
  CI (99.9%): [4660175.931, 4673727.925] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_count  thrpt   30  4666951.928 ± 6775.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 563302.048 ops/s
# Warmup Iteration   2: 1066873.348 ops/s
# Warmup Iteration   3: 1189804.763 ops/s
# Warmup Iteration   4: 1201312.192 ops/s
# Warmup Iteration   5: 1071541.252 ops/s
# Warmup Iteration   6: 1110831.776 ops/s
# Warmup Iteration   7: 1201115.158 ops/s
# Warmup Iteration   8: 1197076.388 ops/s
# Warmup Iteration   9: 1200048.749 ops/s
# Warmup Iteration  10: 1200427.416 ops/s
# Warmup Iteration  11: 1200917.670 ops/s
# Warmup Iteration  12: 1202714.096 ops/s
# Warmup Iteration  13: 1201903.061 ops/s
# Warmup Iteration  14: 1198368.541 ops/s
# Warmup Iteration  15: 1202163.243 ops/s
# Warmup Iteration  16: 1201329.934 ops/s
# Warmup Iteration  17: 1201134.221 ops/s
# Warmup Iteration  18: 1202127.260 ops/s
# Warmup Iteration  19: 1201118.769 ops/s
# Warmup Iteration  20: 1201866.359 ops/s
# Warmup Iteration  21: 1205157.282 ops/s
# Warmup Iteration  22: 1199999.366 ops/s
# Warmup Iteration  23: 1203244.011 ops/s
# Warmup Iteration  24: 1203976.496 ops/s
# Warmup Iteration  25: 1204598.405 ops/s
# Warmup Iteration  26: 1199630.653 ops/s
# Warmup Iteration  27: 1203625.578 ops/s
# Warmup Iteration  28: 1201876.902 ops/s
# Warmup Iteration  29: 1199628.193 ops/s
# Warmup Iteration  30: 1201940.286 ops/s
Iteration   1: 1201941.711 ops/s
Iteration   2: 1202366.744 ops/s
Iteration   3: 1200777.570 ops/s
Iteration   4: 1203934.549 ops/s
Iteration   5: 1199760.169 ops/s
Iteration   6: 1202084.951 ops/s
Iteration   7: 1201604.412 ops/s
Iteration   8: 1201535.177 ops/s
Iteration   9: 1204198.339 ops/s
Iteration  10: 1199543.454 ops/s
Iteration  11: 1197492.748 ops/s
Iteration  12: 1205389.811 ops/s
Iteration  13: 1200255.399 ops/s
Iteration  14: 1200916.922 ops/s
Iteration  15: 1195339.270 ops/s
Iteration  16: 1202821.678 ops/s
Iteration  17: 1204423.753 ops/s
Iteration  18: 1202669.315 ops/s
Iteration  19: 1200369.769 ops/s
Iteration  20: 1203800.886 ops/s
Iteration  21: 1201973.449 ops/s
Iteration  22: 1203365.165 ops/s
Iteration  23: 1203186.673 ops/s
Iteration  24: 1201467.845 ops/s
Iteration  25: 1194149.438 ops/s
Iteration  26: 1204485.030 ops/s
Iteration  27: 1203172.448 ops/s
Iteration  28: 1201000.454 ops/s
Iteration  29: 1201330.170 ops/s
Iteration  30: 1203369.205 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countBy":
  1201624.217 ±(99.9%) 1695.428 ops/s [Average]
  (min, avg, max) = (1194149.438, 1201624.217, 1205389.811), stdev = 2537.638
  CI (99.9%): [1199928.788, 1203319.645] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_countBy  thrpt   30  1201624.217 ± 1695.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126748.711 ops/s
# Warmup Iteration   2: 220291.306 ops/s
# Warmup Iteration   3: 263028.481 ops/s
# Warmup Iteration   4: 264326.590 ops/s
# Warmup Iteration   5: 263603.829 ops/s
# Warmup Iteration   6: 229687.616 ops/s
# Warmup Iteration   7: 252923.384 ops/s
# Warmup Iteration   8: 264605.310 ops/s
# Warmup Iteration   9: 264011.797 ops/s
# Warmup Iteration  10: 264626.372 ops/s
# Warmup Iteration  11: 265040.024 ops/s
# Warmup Iteration  12: 264844.834 ops/s
# Warmup Iteration  13: 265126.698 ops/s
# Warmup Iteration  14: 264445.484 ops/s
# Warmup Iteration  15: 264515.734 ops/s
# Warmup Iteration  16: 264204.467 ops/s
# Warmup Iteration  17: 264579.919 ops/s
# Warmup Iteration  18: 265122.774 ops/s
# Warmup Iteration  19: 264462.703 ops/s
# Warmup Iteration  20: 264002.086 ops/s
# Warmup Iteration  21: 264139.282 ops/s
# Warmup Iteration  22: 263789.549 ops/s
# Warmup Iteration  23: 263979.679 ops/s
# Warmup Iteration  24: 264240.501 ops/s
# Warmup Iteration  25: 264457.315 ops/s
# Warmup Iteration  26: 263664.650 ops/s
# Warmup Iteration  27: 264024.747 ops/s
# Warmup Iteration  28: 264818.035 ops/s
# Warmup Iteration  29: 264523.132 ops/s
# Warmup Iteration  30: 264535.602 ops/s
Iteration   1: 263127.089 ops/s
Iteration   2: 264510.864 ops/s
Iteration   3: 263735.211 ops/s
Iteration   4: 264278.376 ops/s
Iteration   5: 264578.315 ops/s
Iteration   6: 264338.972 ops/s
Iteration   7: 264781.218 ops/s
Iteration   8: 264369.219 ops/s
Iteration   9: 264772.435 ops/s
Iteration  10: 264564.978 ops/s
Iteration  11: 265138.847 ops/s
Iteration  12: 264428.480 ops/s
Iteration  13: 265226.194 ops/s
Iteration  14: 264021.747 ops/s
Iteration  15: 265420.876 ops/s
Iteration  16: 264865.978 ops/s
Iteration  17: 264841.648 ops/s
Iteration  18: 264449.711 ops/s
Iteration  19: 265173.503 ops/s
Iteration  20: 263964.946 ops/s
Iteration  21: 264932.477 ops/s
Iteration  22: 260659.009 ops/s
Iteration  23: 265111.876 ops/s
Iteration  24: 264785.388 ops/s
Iteration  25: 264987.020 ops/s
Iteration  26: 264637.529 ops/s
Iteration  27: 264581.656 ops/s
Iteration  28: 264821.820 ops/s
Iteration  29: 264220.443 ops/s
Iteration  30: 265029.748 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByEach":
  264478.519 ±(99.9%) 579.845 ops/s [Average]
  (min, avg, max) = (260659.009, 264478.519, 265420.876), stdev = 867.885
  CI (99.9%): [263898.674, 265058.364] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_countByEach  thrpt   30  264478.519 ± 579.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537340.638 ops/s
# Warmup Iteration   2: 1008923.906 ops/s
# Warmup Iteration   3: 1128714.974 ops/s
# Warmup Iteration   4: 1133802.537 ops/s
# Warmup Iteration   5: 1063792.950 ops/s
# Warmup Iteration   6: 999504.924 ops/s
# Warmup Iteration   7: 1134312.714 ops/s
# Warmup Iteration   8: 1138362.309 ops/s
# Warmup Iteration   9: 1136807.647 ops/s
# Warmup Iteration  10: 1137999.457 ops/s
# Warmup Iteration  11: 1139993.959 ops/s
# Warmup Iteration  12: 1138490.981 ops/s
# Warmup Iteration  13: 1137258.051 ops/s
# Warmup Iteration  14: 1139551.270 ops/s
# Warmup Iteration  15: 1137393.831 ops/s
# Warmup Iteration  16: 1139482.503 ops/s
# Warmup Iteration  17: 1124956.928 ops/s
# Warmup Iteration  18: 1125198.479 ops/s
# Warmup Iteration  19: 1128561.122 ops/s
# Warmup Iteration  20: 1127988.963 ops/s
# Warmup Iteration  21: 1128761.440 ops/s
# Warmup Iteration  22: 1126893.807 ops/s
# Warmup Iteration  23: 1129760.207 ops/s
# Warmup Iteration  24: 1123625.207 ops/s
# Warmup Iteration  25: 1124555.331 ops/s
# Warmup Iteration  26: 1125180.484 ops/s
# Warmup Iteration  27: 1126692.953 ops/s
# Warmup Iteration  28: 1124903.873 ops/s
# Warmup Iteration  29: 1125026.727 ops/s
# Warmup Iteration  30: 1127302.727 ops/s
Iteration   1: 1126165.938 ops/s
Iteration   2: 1129199.907 ops/s
Iteration   3: 1126311.487 ops/s
Iteration   4: 1127639.252 ops/s
Iteration   5: 1128620.498 ops/s
Iteration   6: 1130709.045 ops/s
Iteration   7: 1124854.611 ops/s
Iteration   8: 1126235.825 ops/s
Iteration   9: 1127727.466 ops/s
Iteration  10: 1127458.033 ops/s
Iteration  11: 1130977.184 ops/s
Iteration  12: 1129071.416 ops/s
Iteration  13: 1129352.012 ops/s
Iteration  14: 1130203.468 ops/s
Iteration  15: 1128972.470 ops/s
Iteration  16: 1123177.109 ops/s
Iteration  17: 1131050.380 ops/s
Iteration  18: 1128920.524 ops/s
Iteration  19: 1126618.496 ops/s
Iteration  20: 1127148.177 ops/s
Iteration  21: 1127454.933 ops/s
Iteration  22: 1131964.587 ops/s
Iteration  23: 1128669.519 ops/s
Iteration  24: 1127859.412 ops/s
Iteration  25: 1130162.257 ops/s
Iteration  26: 1133188.209 ops/s
Iteration  27: 1127133.063 ops/s
Iteration  28: 1125016.691 ops/s
Iteration  29: 1133042.404 ops/s
Iteration  30: 1129554.333 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countByWith":
  1128481.957 ±(99.9%) 1575.048 ops/s [Average]
  (min, avg, max) = (1123177.109, 1128481.957, 1133188.209), stdev = 2357.457
  CI (99.9%): [1126906.909, 1130057.004] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_countByWith  thrpt   30  1128481.957 ± 1575.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2099861.730 ops/s
# Warmup Iteration   2: 4101575.764 ops/s
# Warmup Iteration   3: 4526860.712 ops/s
# Warmup Iteration   4: 4549999.506 ops/s
# Warmup Iteration   5: 3727966.155 ops/s
# Warmup Iteration   6: 4566339.786 ops/s
# Warmup Iteration   7: 4547179.687 ops/s
# Warmup Iteration   8: 4556452.304 ops/s
# Warmup Iteration   9: 4557598.558 ops/s
# Warmup Iteration  10: 4555364.372 ops/s
# Warmup Iteration  11: 4550821.553 ops/s
# Warmup Iteration  12: 4556768.830 ops/s
# Warmup Iteration  13: 4553138.312 ops/s
# Warmup Iteration  14: 4550896.716 ops/s
# Warmup Iteration  15: 4558177.175 ops/s
# Warmup Iteration  16: 4538289.147 ops/s
# Warmup Iteration  17: 4506399.324 ops/s
# Warmup Iteration  18: 4510671.246 ops/s
# Warmup Iteration  19: 4507940.791 ops/s
# Warmup Iteration  20: 4512799.961 ops/s
# Warmup Iteration  21: 4517819.346 ops/s
# Warmup Iteration  22: 4504481.505 ops/s
# Warmup Iteration  23: 4518210.744 ops/s
# Warmup Iteration  24: 4504606.622 ops/s
# Warmup Iteration  25: 4505827.938 ops/s
# Warmup Iteration  26: 4512274.455 ops/s
# Warmup Iteration  27: 4501558.841 ops/s
# Warmup Iteration  28: 4516196.521 ops/s
# Warmup Iteration  29: 4505748.346 ops/s
# Warmup Iteration  30: 4503712.515 ops/s
Iteration   1: 4511515.782 ops/s
Iteration   2: 4494921.839 ops/s
Iteration   3: 4511076.427 ops/s
Iteration   4: 4504990.535 ops/s
Iteration   5: 4499399.628 ops/s
Iteration   6: 4523218.442 ops/s
Iteration   7: 4503772.766 ops/s
Iteration   8: 4506115.525 ops/s
Iteration   9: 4512826.028 ops/s
Iteration  10: 4504989.141 ops/s
Iteration  11: 4506398.178 ops/s
Iteration  12: 4511402.768 ops/s
Iteration  13: 4512302.497 ops/s
Iteration  14: 4487609.447 ops/s
Iteration  15: 4521447.743 ops/s
Iteration  16: 4512617.857 ops/s
Iteration  17: 4501139.488 ops/s
Iteration  18: 4519168.395 ops/s
Iteration  19: 4501823.338 ops/s
Iteration  20: 4492156.242 ops/s
Iteration  21: 4505305.598 ops/s
Iteration  22: 4497015.665 ops/s
Iteration  23: 4501072.924 ops/s
Iteration  24: 4518490.274 ops/s
Iteration  25: 4500742.690 ops/s
Iteration  26: 4502341.281 ops/s
Iteration  27: 4520173.661 ops/s
Iteration  28: 4511127.415 ops/s
Iteration  29: 4510296.910 ops/s
Iteration  30: 4516245.158 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_countWith":
  4507390.121 ±(99.9%) 5902.636 ops/s [Average]
  (min, avg, max) = (4487609.447, 4507390.121, 4523218.442), stdev = 8834.788
  CI (99.9%): [4501487.486, 4513292.757] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_countWith  thrpt   30  4507390.121 ± 5902.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731080.557 ops/s
# Warmup Iteration   2: 1404362.254 ops/s
# Warmup Iteration   3: 1551043.503 ops/s
# Warmup Iteration   4: 1562432.271 ops/s
# Warmup Iteration   5: 1292582.860 ops/s
# Warmup Iteration   6: 1546082.838 ops/s
# Warmup Iteration   7: 1562849.956 ops/s
# Warmup Iteration   8: 1564333.219 ops/s
# Warmup Iteration   9: 1562158.193 ops/s
# Warmup Iteration  10: 1566577.876 ops/s
# Warmup Iteration  11: 1563026.952 ops/s
# Warmup Iteration  12: 1562538.964 ops/s
# Warmup Iteration  13: 1564108.778 ops/s
# Warmup Iteration  14: 1560189.876 ops/s
# Warmup Iteration  15: 1562329.884 ops/s
# Warmup Iteration  16: 1560361.999 ops/s
# Warmup Iteration  17: 1560603.625 ops/s
# Warmup Iteration  18: 1562725.435 ops/s
# Warmup Iteration  19: 1562046.548 ops/s
# Warmup Iteration  20: 1562113.623 ops/s
# Warmup Iteration  21: 1567182.452 ops/s
# Warmup Iteration  22: 1562231.525 ops/s
# Warmup Iteration  23: 1564087.379 ops/s
# Warmup Iteration  24: 1561966.381 ops/s
# Warmup Iteration  25: 1565091.349 ops/s
# Warmup Iteration  26: 1559062.471 ops/s
# Warmup Iteration  27: 1566507.016 ops/s
# Warmup Iteration  28: 1564268.718 ops/s
# Warmup Iteration  29: 1563713.557 ops/s
# Warmup Iteration  30: 1564119.200 ops/s
Iteration   1: 1561230.397 ops/s
Iteration   2: 1570157.256 ops/s
Iteration   3: 1563819.575 ops/s
Iteration   4: 1564203.115 ops/s
Iteration   5: 1559050.640 ops/s
Iteration   6: 1562317.554 ops/s
Iteration   7: 1560700.959 ops/s
Iteration   8: 1560875.168 ops/s
Iteration   9: 1564261.393 ops/s
Iteration  10: 1562511.142 ops/s
Iteration  11: 1562328.671 ops/s
Iteration  12: 1557565.568 ops/s
Iteration  13: 1559182.433 ops/s
Iteration  14: 1561855.053 ops/s
Iteration  15: 1564676.208 ops/s
Iteration  16: 1567250.361 ops/s
Iteration  17: 1560898.973 ops/s
Iteration  18: 1559934.313 ops/s
Iteration  19: 1566587.500 ops/s
Iteration  20: 1562332.621 ops/s
Iteration  21: 1566926.327 ops/s
Iteration  22: 1564686.295 ops/s
Iteration  23: 1564044.248 ops/s
Iteration  24: 1561252.200 ops/s
Iteration  25: 1562383.431 ops/s
Iteration  26: 1560891.504 ops/s
Iteration  27: 1566656.181 ops/s
Iteration  28: 1567333.839 ops/s
Iteration  29: 1562697.243 ops/s
Iteration  30: 1563550.363 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detect":
  1563072.018 ±(99.9%) 1912.630 ops/s [Average]
  (min, avg, max) = (1557565.568, 1563072.018, 1570157.256), stdev = 2862.735
  CI (99.9%): [1561159.387, 1564984.648] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detect  thrpt   30  1563072.018 ± 1912.630  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 662625.498 ops/s
# Warmup Iteration   2: 1261249.470 ops/s
# Warmup Iteration   3: 1381900.666 ops/s
# Warmup Iteration   4: 1391011.260 ops/s
# Warmup Iteration   5: 1196818.466 ops/s
# Warmup Iteration   6: 1335888.022 ops/s
# Warmup Iteration   7: 1385475.757 ops/s
# Warmup Iteration   8: 1388713.718 ops/s
# Warmup Iteration   9: 1391108.267 ops/s
# Warmup Iteration  10: 1387963.172 ops/s
# Warmup Iteration  11: 1388549.700 ops/s
# Warmup Iteration  12: 1386941.948 ops/s
# Warmup Iteration  13: 1387854.976 ops/s
# Warmup Iteration  14: 1389960.103 ops/s
# Warmup Iteration  15: 1391199.387 ops/s
# Warmup Iteration  16: 1386589.020 ops/s
# Warmup Iteration  17: 1390265.036 ops/s
# Warmup Iteration  18: 1387329.632 ops/s
# Warmup Iteration  19: 1395436.627 ops/s
# Warmup Iteration  20: 1388449.543 ops/s
# Warmup Iteration  21: 1387578.179 ops/s
# Warmup Iteration  22: 1388215.440 ops/s
# Warmup Iteration  23: 1390024.336 ops/s
# Warmup Iteration  24: 1388391.828 ops/s
# Warmup Iteration  25: 1386980.074 ops/s
# Warmup Iteration  26: 1393726.493 ops/s
# Warmup Iteration  27: 1392933.952 ops/s
# Warmup Iteration  28: 1390801.143 ops/s
# Warmup Iteration  29: 1391918.753 ops/s
# Warmup Iteration  30: 1389895.295 ops/s
Iteration   1: 1389481.079 ops/s
Iteration   2: 1391991.888 ops/s
Iteration   3: 1393274.903 ops/s
Iteration   4: 1388279.074 ops/s
Iteration   5: 1390677.963 ops/s
Iteration   6: 1387220.206 ops/s
Iteration   7: 1385498.934 ops/s
Iteration   8: 1394191.370 ops/s
Iteration   9: 1389375.343 ops/s
Iteration  10: 1389607.645 ops/s
Iteration  11: 1391644.101 ops/s
Iteration  12: 1393760.914 ops/s
Iteration  13: 1393289.634 ops/s
Iteration  14: 1388322.195 ops/s
Iteration  15: 1389425.076 ops/s
Iteration  16: 1392559.089 ops/s
Iteration  17: 1390435.583 ops/s
Iteration  18: 1392517.883 ops/s
Iteration  19: 1390927.108 ops/s
Iteration  20: 1387469.656 ops/s
Iteration  21: 1389589.377 ops/s
Iteration  22: 1392257.628 ops/s
Iteration  23: 1390975.788 ops/s
Iteration  24: 1388611.370 ops/s
Iteration  25: 1390233.357 ops/s
Iteration  26: 1392886.821 ops/s
Iteration  27: 1392054.897 ops/s
Iteration  28: 1387616.537 ops/s
Iteration  29: 1390782.082 ops/s
Iteration  30: 1390091.243 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectIfNone":
  1390501.625 ±(99.9%) 1442.289 ops/s [Average]
  (min, avg, max) = (1385498.934, 1390501.625, 1394191.370), stdev = 2158.750
  CI (99.9%): [1389059.336, 1391943.914] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  1390501.625 ± 1442.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 750845.917 ops/s
# Warmup Iteration   2: 774113.065 ops/s
# Warmup Iteration   3: 915055.263 ops/s
# Warmup Iteration   4: 980100.917 ops/s
# Warmup Iteration   5: 977022.145 ops/s
# Warmup Iteration   6: 975987.717 ops/s
# Warmup Iteration   7: 976902.291 ops/s
# Warmup Iteration   8: 978644.538 ops/s
# Warmup Iteration   9: 977117.111 ops/s
# Warmup Iteration  10: 977929.228 ops/s
# Warmup Iteration  11: 976707.320 ops/s
# Warmup Iteration  12: 976875.214 ops/s
# Warmup Iteration  13: 978436.468 ops/s
# Warmup Iteration  14: 822894.819 ops/s
# Warmup Iteration  15: 976286.952 ops/s
# Warmup Iteration  16: 976155.962 ops/s
# Warmup Iteration  17: 1030595.617 ops/s
# Warmup Iteration  18: 1034219.969 ops/s
# Warmup Iteration  19: 1033111.283 ops/s
# Warmup Iteration  20: 1034923.739 ops/s
# Warmup Iteration  21: 1032412.340 ops/s
# Warmup Iteration  22: 1034762.640 ops/s
# Warmup Iteration  23: 1036425.068 ops/s
# Warmup Iteration  24: 1032308.930 ops/s
# Warmup Iteration  25: 1033293.540 ops/s
# Warmup Iteration  26: 1033133.382 ops/s
# Warmup Iteration  27: 1037863.240 ops/s
# Warmup Iteration  28: 1034913.218 ops/s
# Warmup Iteration  29: 1030964.412 ops/s
# Warmup Iteration  30: 1029390.730 ops/s
Iteration   1: 1028289.461 ops/s
Iteration   2: 1032066.641 ops/s
Iteration   3: 1030228.322 ops/s
Iteration   4: 1029161.890 ops/s
Iteration   5: 1033598.236 ops/s
Iteration   6: 1034708.410 ops/s
Iteration   7: 1031826.329 ops/s
Iteration   8: 1033501.103 ops/s
Iteration   9: 1029489.189 ops/s
Iteration  10: 1033140.633 ops/s
Iteration  11: 1032825.620 ops/s
Iteration  12: 1038953.191 ops/s
Iteration  13: 1034947.332 ops/s
Iteration  14: 1028699.091 ops/s
Iteration  15: 1030580.165 ops/s
Iteration  16: 1036296.889 ops/s
Iteration  17: 1034639.509 ops/s
Iteration  18: 1030648.945 ops/s
Iteration  19: 1038013.015 ops/s
Iteration  20: 1032532.113 ops/s
Iteration  21: 1041595.619 ops/s
Iteration  22: 1036774.831 ops/s
Iteration  23: 1039429.855 ops/s
Iteration  24: 1032034.864 ops/s
Iteration  25: 1036933.916 ops/s
Iteration  26: 1028633.658 ops/s
Iteration  27: 1038263.356 ops/s
Iteration  28: 1028700.120 ops/s
Iteration  29: 1033016.799 ops/s
Iteration  30: 1031874.645 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectOptional":
  1033380.125 ±(99.9%) 2414.812 ops/s [Average]
  (min, avg, max) = (1028289.461, 1033380.125, 1041595.619), stdev = 3614.377
  CI (99.9%): [1030965.313, 1035794.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectOptional  thrpt   30  1033380.125 ± 2414.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698091.732 ops/s
# Warmup Iteration   2: 1231732.689 ops/s
# Warmup Iteration   3: 1396811.214 ops/s
# Warmup Iteration   4: 1403173.393 ops/s
# Warmup Iteration   5: 1403821.847 ops/s
# Warmup Iteration   6: 1149356.195 ops/s
# Warmup Iteration   7: 1406445.585 ops/s
# Warmup Iteration   8: 1408553.128 ops/s
# Warmup Iteration   9: 1403252.062 ops/s
# Warmup Iteration  10: 1402420.919 ops/s
# Warmup Iteration  11: 1402207.602 ops/s
# Warmup Iteration  12: 1404495.309 ops/s
# Warmup Iteration  13: 1404378.517 ops/s
# Warmup Iteration  14: 1407617.972 ops/s
# Warmup Iteration  15: 1403722.262 ops/s
# Warmup Iteration  16: 1404893.031 ops/s
# Warmup Iteration  17: 1405016.715 ops/s
# Warmup Iteration  18: 1407684.219 ops/s
# Warmup Iteration  19: 1403780.074 ops/s
# Warmup Iteration  20: 1403280.979 ops/s
# Warmup Iteration  21: 1403741.106 ops/s
# Warmup Iteration  22: 1405220.889 ops/s
# Warmup Iteration  23: 1404666.814 ops/s
# Warmup Iteration  24: 1404748.575 ops/s
# Warmup Iteration  25: 1408479.457 ops/s
# Warmup Iteration  26: 1403013.825 ops/s
# Warmup Iteration  27: 1405056.897 ops/s
# Warmup Iteration  28: 1403482.699 ops/s
# Warmup Iteration  29: 1401840.680 ops/s
# Warmup Iteration  30: 1404880.161 ops/s
Iteration   1: 1405306.960 ops/s
Iteration   2: 1406982.595 ops/s
Iteration   3: 1400470.599 ops/s
Iteration   4: 1405956.589 ops/s
Iteration   5: 1401682.131 ops/s
Iteration   6: 1403894.970 ops/s
Iteration   7: 1404710.260 ops/s
Iteration   8: 1401654.470 ops/s
Iteration   9: 1405284.444 ops/s
Iteration  10: 1408372.101 ops/s
Iteration  11: 1406351.468 ops/s
Iteration  12: 1402779.678 ops/s
Iteration  13: 1406118.973 ops/s
Iteration  14: 1408150.821 ops/s
Iteration  15: 1398745.589 ops/s
Iteration  16: 1405338.145 ops/s
Iteration  17: 1401680.858 ops/s
Iteration  18: 1404546.220 ops/s
Iteration  19: 1408536.002 ops/s
Iteration  20: 1401002.252 ops/s
Iteration  21: 1407649.605 ops/s
Iteration  22: 1405268.002 ops/s
Iteration  23: 1408695.510 ops/s
Iteration  24: 1404794.104 ops/s
Iteration  25: 1405622.860 ops/s
Iteration  26: 1400452.027 ops/s
Iteration  27: 1404059.263 ops/s
Iteration  28: 1406685.385 ops/s
Iteration  29: 1404034.550 ops/s
Iteration  30: 1400920.120 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWith":
  1404524.885 ±(99.9%) 1813.579 ops/s [Average]
  (min, avg, max) = (1398745.589, 1404524.885, 1408695.510), stdev = 2714.480
  CI (99.9%): [1402711.306, 1406338.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectWith  thrpt   30  1404524.885 ± 1813.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16671898.614 ops/s
# Warmup Iteration   2: 32798102.456 ops/s
# Warmup Iteration   3: 33697078.085 ops/s
# Warmup Iteration   4: 33638329.660 ops/s
# Warmup Iteration   5: 28714618.458 ops/s
# Warmup Iteration   6: 33975484.518 ops/s
# Warmup Iteration   7: 33953461.640 ops/s
# Warmup Iteration   8: 34026917.546 ops/s
# Warmup Iteration   9: 33947058.711 ops/s
# Warmup Iteration  10: 33992528.703 ops/s
# Warmup Iteration  11: 34028704.947 ops/s
# Warmup Iteration  12: 34052282.901 ops/s
# Warmup Iteration  13: 33961228.154 ops/s
# Warmup Iteration  14: 33953552.037 ops/s
# Warmup Iteration  15: 33978493.078 ops/s
# Warmup Iteration  16: 33937246.514 ops/s
# Warmup Iteration  17: 34037467.083 ops/s
# Warmup Iteration  18: 33925740.440 ops/s
# Warmup Iteration  19: 33851630.878 ops/s
# Warmup Iteration  20: 33970777.503 ops/s
# Warmup Iteration  21: 34026018.551 ops/s
# Warmup Iteration  22: 33960599.360 ops/s
# Warmup Iteration  23: 34056152.212 ops/s
# Warmup Iteration  24: 33971722.982 ops/s
# Warmup Iteration  25: 34009645.441 ops/s
# Warmup Iteration  26: 33981769.992 ops/s
# Warmup Iteration  27: 33990680.290 ops/s
# Warmup Iteration  28: 33926681.640 ops/s
# Warmup Iteration  29: 33982079.131 ops/s
# Warmup Iteration  30: 34031572.843 ops/s
Iteration   1: 33989093.393 ops/s
Iteration   2: 33987380.670 ops/s
Iteration   3: 34056326.498 ops/s
Iteration   4: 33992166.524 ops/s
Iteration   5: 34074055.825 ops/s
Iteration   6: 33946523.676 ops/s
Iteration   7: 33970454.943 ops/s
Iteration   8: 33983562.660 ops/s
Iteration   9: 34071916.128 ops/s
Iteration  10: 33919551.913 ops/s
Iteration  11: 33944995.286 ops/s
Iteration  12: 33948627.917 ops/s
Iteration  13: 34028032.829 ops/s
Iteration  14: 33990190.017 ops/s
Iteration  15: 33928700.902 ops/s
Iteration  16: 33914732.704 ops/s
Iteration  17: 34082526.908 ops/s
Iteration  18: 33955809.417 ops/s
Iteration  19: 33876739.274 ops/s
Iteration  20: 33971026.539 ops/s
Iteration  21: 33918794.198 ops/s
Iteration  22: 33999503.973 ops/s
Iteration  23: 34019456.834 ops/s
Iteration  24: 33873021.814 ops/s
Iteration  25: 33959192.745 ops/s
Iteration  26: 34071112.127 ops/s
Iteration  27: 33899160.619 ops/s
Iteration  28: 33920837.939 ops/s
Iteration  29: 34010496.090 ops/s
Iteration  30: 34065400.869 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNone":
  33978979.708 ±(99.9%) 40340.537 ops/s [Average]
  (min, avg, max) = (33873021.814, 33978979.708, 34082526.908), stdev = 60379.822
  CI (99.9%): [33938639.170, 34019320.245] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNone  thrpt   30  33978979.708 ± 40340.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 737533.279 ops/s
# Warmup Iteration   2: 1366244.647 ops/s
# Warmup Iteration   3: 1490406.690 ops/s
# Warmup Iteration   4: 1493748.247 ops/s
# Warmup Iteration   5: 1425535.894 ops/s
# Warmup Iteration   6: 1301398.803 ops/s
# Warmup Iteration   7: 1498547.700 ops/s
# Warmup Iteration   8: 1498065.201 ops/s
# Warmup Iteration   9: 1497554.260 ops/s
# Warmup Iteration  10: 1497715.358 ops/s
# Warmup Iteration  11: 1497507.003 ops/s
# Warmup Iteration  12: 1494610.495 ops/s
# Warmup Iteration  13: 1498028.964 ops/s
# Warmup Iteration  14: 1497249.448 ops/s
# Warmup Iteration  15: 1499470.507 ops/s
# Warmup Iteration  16: 1499492.859 ops/s
# Warmup Iteration  17: 1490892.924 ops/s
# Warmup Iteration  18: 1493973.828 ops/s
# Warmup Iteration  19: 1494721.376 ops/s
# Warmup Iteration  20: 1493287.785 ops/s
# Warmup Iteration  21: 1490690.446 ops/s
# Warmup Iteration  22: 1495565.058 ops/s
# Warmup Iteration  23: 1490029.486 ops/s
# Warmup Iteration  24: 1491530.833 ops/s
# Warmup Iteration  25: 1495569.651 ops/s
# Warmup Iteration  26: 1490315.617 ops/s
# Warmup Iteration  27: 1493465.175 ops/s
# Warmup Iteration  28: 1487718.179 ops/s
# Warmup Iteration  29: 1492880.609 ops/s
# Warmup Iteration  30: 1491859.499 ops/s
Iteration   1: 1491902.031 ops/s
Iteration   2: 1489905.942 ops/s
Iteration   3: 1491231.532 ops/s
Iteration   4: 1489549.726 ops/s
Iteration   5: 1492516.001 ops/s
Iteration   6: 1484781.307 ops/s
Iteration   7: 1490998.027 ops/s
Iteration   8: 1494741.240 ops/s
Iteration   9: 1490493.077 ops/s
Iteration  10: 1497102.769 ops/s
Iteration  11: 1490155.822 ops/s
Iteration  12: 1489248.846 ops/s
Iteration  13: 1487884.780 ops/s
Iteration  14: 1490127.410 ops/s
Iteration  15: 1488212.703 ops/s
Iteration  16: 1487519.298 ops/s
Iteration  17: 1486818.843 ops/s
Iteration  18: 1491133.772 ops/s
Iteration  19: 1497997.392 ops/s
Iteration  20: 1495225.082 ops/s
Iteration  21: 1494459.202 ops/s
Iteration  22: 1494897.950 ops/s
Iteration  23: 1490510.497 ops/s
Iteration  24: 1491719.109 ops/s
Iteration  25: 1497411.542 ops/s
Iteration  26: 1484991.110 ops/s
Iteration  27: 1484930.813 ops/s
Iteration  28: 1488723.029 ops/s
Iteration  29: 1491282.906 ops/s
Iteration  30: 1489152.701 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1490854.149 ±(99.9%) 2370.544 ops/s [Average]
  (min, avg, max) = (1484781.307, 1490854.149, 1497997.392), stdev = 3548.119
  CI (99.9%): [1488483.605, 1493224.693] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1490854.149 ± 2370.544  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29471242.472 ops/s
# Warmup Iteration   2: 51608156.986 ops/s
# Warmup Iteration   3: 55584947.019 ops/s
# Warmup Iteration   4: 56665485.053 ops/s
# Warmup Iteration   5: 48393707.320 ops/s
# Warmup Iteration   6: 54615965.967 ops/s
# Warmup Iteration   7: 55867250.654 ops/s
# Warmup Iteration   8: 55843379.636 ops/s
# Warmup Iteration   9: 56161041.688 ops/s
# Warmup Iteration  10: 56882500.585 ops/s
# Warmup Iteration  11: 56538480.808 ops/s
# Warmup Iteration  12: 56208202.157 ops/s
# Warmup Iteration  13: 56502200.020 ops/s
# Warmup Iteration  14: 57064715.576 ops/s
# Warmup Iteration  15: 56087182.894 ops/s
# Warmup Iteration  16: 56207168.199 ops/s
# Warmup Iteration  17: 56512159.401 ops/s
# Warmup Iteration  18: 56592036.432 ops/s
# Warmup Iteration  19: 56653888.146 ops/s
# Warmup Iteration  20: 56587027.953 ops/s
# Warmup Iteration  21: 56132689.681 ops/s
# Warmup Iteration  22: 57256138.549 ops/s
# Warmup Iteration  23: 56112832.236 ops/s
# Warmup Iteration  24: 57132595.719 ops/s
# Warmup Iteration  25: 56485657.139 ops/s
# Warmup Iteration  26: 56086371.045 ops/s
# Warmup Iteration  27: 56231617.375 ops/s
# Warmup Iteration  28: 56022154.385 ops/s
# Warmup Iteration  29: 56553623.448 ops/s
# Warmup Iteration  30: 56970550.738 ops/s
Iteration   1: 57502789.408 ops/s
Iteration   2: 56771219.971 ops/s
Iteration   3: 55884743.165 ops/s
Iteration   4: 56708549.502 ops/s
Iteration   5: 57139452.864 ops/s
Iteration   6: 56442468.823 ops/s
Iteration   7: 56717227.076 ops/s
Iteration   8: 56858794.486 ops/s
Iteration   9: 56406334.814 ops/s
Iteration  10: 55860066.744 ops/s
Iteration  11: 56257677.614 ops/s
Iteration  12: 56711671.780 ops/s
Iteration  13: 56680342.091 ops/s
Iteration  14: 56615263.746 ops/s
Iteration  15: 56800163.543 ops/s
Iteration  16: 56716354.848 ops/s
Iteration  17: 56801121.031 ops/s
Iteration  18: 56285801.126 ops/s
Iteration  19: 56282184.804 ops/s
Iteration  20: 56595814.849 ops/s
Iteration  21: 56764385.686 ops/s
Iteration  22: 56439909.677 ops/s
Iteration  23: 57796658.189 ops/s
Iteration  24: 55324518.699 ops/s
Iteration  25: 55757482.935 ops/s
Iteration  26: 55474373.402 ops/s
Iteration  27: 56307190.157 ops/s
Iteration  28: 56325332.020 ops/s
Iteration  29: 56446081.627 ops/s
Iteration  30: 57178562.165 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOccurrences":
  56528417.895 ±(99.9%) 355997.845 ops/s [Average]
  (min, avg, max) = (55324518.699, 56528417.895, 57796658.189), stdev = 532840.855
  CI (99.9%): [56172420.050, 56884415.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  56528417.895 ± 355997.845  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726469.789 ops/s
# Warmup Iteration   2: 744896.023 ops/s
# Warmup Iteration   3: 898110.206 ops/s
# Warmup Iteration   4: 951767.932 ops/s
# Warmup Iteration   5: 953760.755 ops/s
# Warmup Iteration   6: 947765.019 ops/s
# Warmup Iteration   7: 949452.154 ops/s
# Warmup Iteration   8: 951690.987 ops/s
# Warmup Iteration   9: 955656.883 ops/s
# Warmup Iteration  10: 954697.254 ops/s
# Warmup Iteration  11: 954907.253 ops/s
# Warmup Iteration  12: 953321.058 ops/s
# Warmup Iteration  13: 949375.491 ops/s
# Warmup Iteration  14: 802455.139 ops/s
# Warmup Iteration  15: 952322.514 ops/s
# Warmup Iteration  16: 949571.889 ops/s
# Warmup Iteration  17: 1006495.960 ops/s
# Warmup Iteration  18: 1008158.382 ops/s
# Warmup Iteration  19: 1005633.871 ops/s
# Warmup Iteration  20: 1009961.499 ops/s
# Warmup Iteration  21: 1008241.397 ops/s
# Warmup Iteration  22: 1007745.113 ops/s
# Warmup Iteration  23: 1007346.652 ops/s
# Warmup Iteration  24: 1003168.245 ops/s
# Warmup Iteration  25: 1011363.771 ops/s
# Warmup Iteration  26: 1009693.540 ops/s
# Warmup Iteration  27: 1009317.081 ops/s
# Warmup Iteration  28: 1008833.182 ops/s
# Warmup Iteration  29: 1012427.569 ops/s
# Warmup Iteration  30: 1006077.324 ops/s
Iteration   1: 1006350.502 ops/s
Iteration   2: 1008326.984 ops/s
Iteration   3: 1010821.936 ops/s
Iteration   4: 1003356.926 ops/s
Iteration   5: 1000931.777 ops/s
Iteration   6: 1010044.818 ops/s
Iteration   7: 1005784.012 ops/s
Iteration   8: 1004837.122 ops/s
Iteration   9: 1006591.354 ops/s
Iteration  10: 1011898.557 ops/s
Iteration  11: 1005614.139 ops/s
Iteration  12: 1005185.397 ops/s
Iteration  13: 1005835.903 ops/s
Iteration  14: 1004889.173 ops/s
Iteration  15: 1007213.170 ops/s
Iteration  16: 1003879.344 ops/s
Iteration  17: 1009525.930 ops/s
Iteration  18: 1011737.395 ops/s
Iteration  19: 1005179.897 ops/s
Iteration  20: 1008230.711 ops/s
Iteration  21: 1007963.164 ops/s
Iteration  22: 1008652.371 ops/s
Iteration  23: 1004123.732 ops/s
Iteration  24: 1002080.746 ops/s
Iteration  25: 1000650.429 ops/s
Iteration  26: 1011312.412 ops/s
Iteration  27: 1000748.798 ops/s
Iteration  28: 1011195.490 ops/s
Iteration  29: 1012295.350 ops/s
Iteration  30: 1010217.223 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOptional":
  1006849.159 ±(99.9%) 2322.267 ops/s [Average]
  (min, avg, max) = (1000650.429, 1006849.159, 1012295.350), stdev = 3475.861
  CI (99.9%): [1004526.891, 1009171.426] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  1006849.159 ± 2322.267  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6099702.435 ops/s
# Warmup Iteration   2: 7729879.944 ops/s
# Warmup Iteration   3: 10089273.168 ops/s
# Warmup Iteration   4: 10035806.726 ops/s
# Warmup Iteration   5: 10088879.702 ops/s
# Warmup Iteration   6: 10111904.834 ops/s
# Warmup Iteration   7: 10108739.191 ops/s
# Warmup Iteration   8: 9005146.439 ops/s
# Warmup Iteration   9: 9415363.075 ops/s
# Warmup Iteration  10: 10118293.375 ops/s
# Warmup Iteration  11: 10108244.437 ops/s
# Warmup Iteration  12: 10095444.907 ops/s
# Warmup Iteration  13: 10132569.333 ops/s
# Warmup Iteration  14: 10152324.599 ops/s
# Warmup Iteration  15: 10133536.618 ops/s
# Warmup Iteration  16: 10133537.315 ops/s
# Warmup Iteration  17: 10086511.007 ops/s
# Warmup Iteration  18: 10099152.306 ops/s
# Warmup Iteration  19: 10102171.612 ops/s
# Warmup Iteration  20: 10113644.406 ops/s
# Warmup Iteration  21: 10102416.175 ops/s
# Warmup Iteration  22: 10081678.628 ops/s
# Warmup Iteration  23: 10129995.295 ops/s
# Warmup Iteration  24: 10101927.662 ops/s
# Warmup Iteration  25: 10095616.803 ops/s
# Warmup Iteration  26: 10109168.653 ops/s
# Warmup Iteration  27: 9952764.366 ops/s
# Warmup Iteration  28: 10069617.323 ops/s
# Warmup Iteration  29: 10087113.934 ops/s
# Warmup Iteration  30: 10088938.559 ops/s
Iteration   1: 10072755.534 ops/s
Iteration   2: 10094674.851 ops/s
Iteration   3: 10002937.949 ops/s
Iteration   4: 10091864.375 ops/s
Iteration   5: 10095278.430 ops/s
Iteration   6: 10089812.339 ops/s
Iteration   7: 9944922.254 ops/s
Iteration   8: 10115806.424 ops/s
Iteration   9: 10115239.064 ops/s
Iteration  10: 10104467.201 ops/s
Iteration  11: 10085183.147 ops/s
Iteration  12: 10077710.088 ops/s
Iteration  13: 10098889.675 ops/s
Iteration  14: 10103012.648 ops/s
Iteration  15: 10099485.754 ops/s
Iteration  16: 10122307.604 ops/s
Iteration  17: 10118374.064 ops/s
Iteration  18: 10079488.927 ops/s
Iteration  19: 10048987.106 ops/s
Iteration  20: 10094804.055 ops/s
Iteration  21: 10107843.465 ops/s
Iteration  22: 10102935.919 ops/s
Iteration  23: 10115390.164 ops/s
Iteration  24: 10118754.003 ops/s
Iteration  25: 10107611.917 ops/s
Iteration  26: 10133613.177 ops/s
Iteration  27: 9934319.916 ops/s
Iteration  28: 10073244.037 ops/s
Iteration  29: 10087746.897 ops/s
Iteration  30: 10064581.723 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_distinctView":
  10083401.424 ±(99.9%) 31065.639 ops/s [Average]
  (min, avg, max) = (9934319.916, 10083401.424, 10133613.177), stdev = 46497.590
  CI (99.9%): [10052335.784, 10114467.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_distinctView  thrpt   30  10083401.424 ± 31065.639  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2868535.730 ops/s
# Warmup Iteration   2: 6155316.202 ops/s
# Warmup Iteration   3: 5239371.471 ops/s
# Warmup Iteration   4: 6229366.095 ops/s
# Warmup Iteration   5: 6215343.482 ops/s
# Warmup Iteration   6: 6226141.053 ops/s
# Warmup Iteration   7: 6221953.926 ops/s
# Warmup Iteration   8: 6247858.791 ops/s
# Warmup Iteration   9: 6217214.288 ops/s
# Warmup Iteration  10: 6236405.192 ops/s
# Warmup Iteration  11: 6201346.445 ops/s
# Warmup Iteration  12: 6201408.630 ops/s
# Warmup Iteration  13: 6208550.821 ops/s
# Warmup Iteration  14: 6235448.280 ops/s
# Warmup Iteration  15: 6227109.716 ops/s
# Warmup Iteration  16: 6231077.212 ops/s
# Warmup Iteration  17: 6235107.288 ops/s
# Warmup Iteration  18: 6240967.315 ops/s
# Warmup Iteration  19: 6234757.061 ops/s
# Warmup Iteration  20: 6232183.247 ops/s
# Warmup Iteration  21: 6220002.896 ops/s
# Warmup Iteration  22: 6248974.733 ops/s
# Warmup Iteration  23: 6225667.115 ops/s
# Warmup Iteration  24: 6233322.353 ops/s
# Warmup Iteration  25: 6238072.804 ops/s
# Warmup Iteration  26: 6242857.373 ops/s
# Warmup Iteration  27: 6237476.268 ops/s
# Warmup Iteration  28: 6236001.271 ops/s
# Warmup Iteration  29: 6227519.178 ops/s
# Warmup Iteration  30: 6223352.815 ops/s
Iteration   1: 6230182.853 ops/s
Iteration   2: 6210749.866 ops/s
Iteration   3: 6234080.297 ops/s
Iteration   4: 6235609.714 ops/s
Iteration   5: 6241315.151 ops/s
Iteration   6: 6248645.856 ops/s
Iteration   7: 6242980.898 ops/s
Iteration   8: 6234652.320 ops/s
Iteration   9: 6231816.447 ops/s
Iteration  10: 6244628.696 ops/s
Iteration  11: 6249595.232 ops/s
Iteration  12: 6247281.917 ops/s
Iteration  13: 6234555.040 ops/s
Iteration  14: 6244979.179 ops/s
Iteration  15: 6250087.874 ops/s
Iteration  16: 6221904.502 ops/s
Iteration  17: 6229894.957 ops/s
Iteration  18: 6228440.673 ops/s
Iteration  19: 6239299.551 ops/s
Iteration  20: 6242027.116 ops/s
Iteration  21: 6235168.755 ops/s
Iteration  22: 6229701.075 ops/s
Iteration  23: 6249445.910 ops/s
Iteration  24: 6255457.571 ops/s
Iteration  25: 6234229.811 ops/s
Iteration  26: 6243196.865 ops/s
Iteration  27: 6262016.847 ops/s
Iteration  28: 6245737.336 ops/s
Iteration  29: 6220653.666 ops/s
Iteration  30: 6246575.274 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_empty":
  6238830.375 ±(99.9%) 7311.360 ops/s [Average]
  (min, avg, max) = (6210749.866, 6238830.375, 6262016.847), stdev = 10943.300
  CI (99.9%): [6231519.015, 6246141.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_empty  thrpt   30  6238830.375 ± 7311.360  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 180787.766 ops/s
# Warmup Iteration   2: 344218.072 ops/s
# Warmup Iteration   3: 393883.422 ops/s
# Warmup Iteration   4: 395862.871 ops/s
# Warmup Iteration   5: 396551.791 ops/s
# Warmup Iteration   6: 328678.696 ops/s
# Warmup Iteration   7: 396693.668 ops/s
# Warmup Iteration   8: 396944.171 ops/s
# Warmup Iteration   9: 396390.100 ops/s
# Warmup Iteration  10: 395553.199 ops/s
# Warmup Iteration  11: 396643.402 ops/s
# Warmup Iteration  12: 396690.702 ops/s
# Warmup Iteration  13: 395014.928 ops/s
# Warmup Iteration  14: 396275.118 ops/s
# Warmup Iteration  15: 396050.107 ops/s
# Warmup Iteration  16: 396716.683 ops/s
# Warmup Iteration  17: 395379.701 ops/s
# Warmup Iteration  18: 395245.409 ops/s
# Warmup Iteration  19: 395249.644 ops/s
# Warmup Iteration  20: 394358.221 ops/s
# Warmup Iteration  21: 394007.154 ops/s
# Warmup Iteration  22: 395349.929 ops/s
# Warmup Iteration  23: 395240.227 ops/s
# Warmup Iteration  24: 395555.856 ops/s
# Warmup Iteration  25: 394443.731 ops/s
# Warmup Iteration  26: 395617.012 ops/s
# Warmup Iteration  27: 395404.904 ops/s
# Warmup Iteration  28: 395037.905 ops/s
# Warmup Iteration  29: 395619.237 ops/s
# Warmup Iteration  30: 395132.296 ops/s
Iteration   1: 394518.580 ops/s
Iteration   2: 393789.520 ops/s
Iteration   3: 394180.754 ops/s
Iteration   4: 394160.574 ops/s
Iteration   5: 395986.061 ops/s
Iteration   6: 395409.107 ops/s
Iteration   7: 394652.643 ops/s
Iteration   8: 394498.680 ops/s
Iteration   9: 394717.793 ops/s
Iteration  10: 395838.039 ops/s
Iteration  11: 395832.778 ops/s
Iteration  12: 393958.109 ops/s
Iteration  13: 395919.121 ops/s
Iteration  14: 395334.798 ops/s
Iteration  15: 395565.872 ops/s
Iteration  16: 393289.941 ops/s
Iteration  17: 395004.822 ops/s
Iteration  18: 396093.609 ops/s
Iteration  19: 395540.020 ops/s
Iteration  20: 393711.477 ops/s
Iteration  21: 395585.185 ops/s
Iteration  22: 395813.974 ops/s
Iteration  23: 395084.854 ops/s
Iteration  24: 395217.100 ops/s
Iteration  25: 395025.453 ops/s
Iteration  26: 396157.578 ops/s
Iteration  27: 393681.944 ops/s
Iteration  28: 395555.507 ops/s
Iteration  29: 395121.244 ops/s
Iteration  30: 394791.431 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_equalsAndHashCode":
  395001.219 ±(99.9%) 540.771 ops/s [Average]
  (min, avg, max) = (393289.941, 395001.219, 396157.578), stdev = 809.401
  CI (99.9%): [394460.448, 395541.990] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  395001.219 ± 540.771  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171240.190 ops/s
# Warmup Iteration   2: 312979.507 ops/s
# Warmup Iteration   3: 379880.345 ops/s
# Warmup Iteration   4: 380354.277 ops/s
# Warmup Iteration   5: 379736.308 ops/s
# Warmup Iteration   6: 314045.523 ops/s
# Warmup Iteration   7: 381501.553 ops/s
# Warmup Iteration   8: 382292.563 ops/s
# Warmup Iteration   9: 381159.905 ops/s
# Warmup Iteration  10: 380897.715 ops/s
# Warmup Iteration  11: 381625.739 ops/s
# Warmup Iteration  12: 381881.083 ops/s
# Warmup Iteration  13: 381926.222 ops/s
# Warmup Iteration  14: 381361.583 ops/s
# Warmup Iteration  15: 381828.292 ops/s
# Warmup Iteration  16: 381370.924 ops/s
# Warmup Iteration  17: 381092.393 ops/s
# Warmup Iteration  18: 382417.741 ops/s
# Warmup Iteration  19: 380389.921 ops/s
# Warmup Iteration  20: 382206.464 ops/s
# Warmup Iteration  21: 381207.618 ops/s
# Warmup Iteration  22: 381816.941 ops/s
# Warmup Iteration  23: 381248.791 ops/s
# Warmup Iteration  24: 381412.530 ops/s
# Warmup Iteration  25: 380924.990 ops/s
# Warmup Iteration  26: 381825.830 ops/s
# Warmup Iteration  27: 381394.296 ops/s
# Warmup Iteration  28: 381252.823 ops/s
# Warmup Iteration  29: 381266.212 ops/s
# Warmup Iteration  30: 381303.946 ops/s
Iteration   1: 380710.939 ops/s
Iteration   2: 379983.842 ops/s
Iteration   3: 381885.729 ops/s
Iteration   4: 380290.146 ops/s
Iteration   5: 380944.313 ops/s
Iteration   6: 379669.173 ops/s
Iteration   7: 381247.430 ops/s
Iteration   8: 380701.633 ops/s
Iteration   9: 382591.659 ops/s
Iteration  10: 382444.331 ops/s
Iteration  11: 381345.642 ops/s
Iteration  12: 381866.616 ops/s
Iteration  13: 382807.507 ops/s
Iteration  14: 381551.331 ops/s
Iteration  15: 382865.201 ops/s
Iteration  16: 381353.980 ops/s
Iteration  17: 380828.078 ops/s
Iteration  18: 382665.400 ops/s
Iteration  19: 381172.476 ops/s
Iteration  20: 380594.216 ops/s
Iteration  21: 380825.020 ops/s
Iteration  22: 381559.451 ops/s
Iteration  23: 381937.829 ops/s
Iteration  24: 381063.358 ops/s
Iteration  25: 383011.452 ops/s
Iteration  26: 379880.054 ops/s
Iteration  27: 380561.744 ops/s
Iteration  28: 381072.266 ops/s
Iteration  29: 380973.161 ops/s
Iteration  30: 381787.651 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollect":
  381339.721 ±(99.9%) 606.212 ops/s [Average]
  (min, avg, max) = (379669.173, 381339.721, 383011.452), stdev = 907.350
  CI (99.9%): [380733.508, 381945.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollect  thrpt   30  381339.721 ± 606.212  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1647243.640 ops/s
# Warmup Iteration   2: 4371030.230 ops/s
# Warmup Iteration   3: 4243766.299 ops/s
# Warmup Iteration   4: 3744486.955 ops/s
# Warmup Iteration   5: 4395754.937 ops/s
# Warmup Iteration   6: 4362433.481 ops/s
# Warmup Iteration   7: 4382059.785 ops/s
# Warmup Iteration   8: 4379440.382 ops/s
# Warmup Iteration   9: 4383607.369 ops/s
# Warmup Iteration  10: 4359980.126 ops/s
# Warmup Iteration  11: 4360422.411 ops/s
# Warmup Iteration  12: 4365240.443 ops/s
# Warmup Iteration  13: 4379546.377 ops/s
# Warmup Iteration  14: 4375809.738 ops/s
# Warmup Iteration  15: 4356294.627 ops/s
# Warmup Iteration  16: 4357007.675 ops/s
# Warmup Iteration  17: 4362902.383 ops/s
# Warmup Iteration  18: 4383989.802 ops/s
# Warmup Iteration  19: 4375643.816 ops/s
# Warmup Iteration  20: 4363696.187 ops/s
# Warmup Iteration  21: 4388822.829 ops/s
# Warmup Iteration  22: 4386172.512 ops/s
# Warmup Iteration  23: 4381246.145 ops/s
# Warmup Iteration  24: 4379877.631 ops/s
# Warmup Iteration  25: 4373896.373 ops/s
# Warmup Iteration  26: 4380746.986 ops/s
# Warmup Iteration  27: 4373600.370 ops/s
# Warmup Iteration  28: 4389390.923 ops/s
# Warmup Iteration  29: 4342416.457 ops/s
# Warmup Iteration  30: 4374210.482 ops/s
Iteration   1: 4375523.028 ops/s
Iteration   2: 4367114.557 ops/s
Iteration   3: 4381898.082 ops/s
Iteration   4: 4345717.373 ops/s
Iteration   5: 4388681.730 ops/s
Iteration   6: 4375127.686 ops/s
Iteration   7: 4395412.202 ops/s
Iteration   8: 4370843.733 ops/s
Iteration   9: 4388259.865 ops/s
Iteration  10: 4361365.104 ops/s
Iteration  11: 4371326.047 ops/s
Iteration  12: 4380929.856 ops/s
Iteration  13: 4392333.789 ops/s
Iteration  14: 4380388.363 ops/s
Iteration  15: 4386972.350 ops/s
Iteration  16: 4376868.530 ops/s
Iteration  17: 4389444.387 ops/s
Iteration  18: 4377114.937 ops/s
Iteration  19: 4384214.680 ops/s
Iteration  20: 4379615.830 ops/s
Iteration  21: 4371999.502 ops/s
Iteration  22: 4386791.431 ops/s
Iteration  23: 4388801.943 ops/s
Iteration  24: 4390497.582 ops/s
Iteration  25: 4386866.059 ops/s
Iteration  26: 4382145.956 ops/s
Iteration  27: 4375141.648 ops/s
Iteration  28: 4388121.036 ops/s
Iteration  29: 4396365.022 ops/s
Iteration  30: 4388042.102 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectBoolean":
  4380797.480 ±(99.9%) 7186.906 ops/s [Average]
  (min, avg, max) = (4345717.373, 4380797.480, 4396365.022), stdev = 10757.023
  CI (99.9%): [4373610.574, 4387984.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4380797.480 ± 7186.906  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 676691.221 ops/s
# Warmup Iteration   2: 1145888.659 ops/s
# Warmup Iteration   3: 1352105.791 ops/s
# Warmup Iteration   4: 1362327.721 ops/s
# Warmup Iteration   5: 1360828.328 ops/s
# Warmup Iteration   6: 1193323.933 ops/s
# Warmup Iteration   7: 1298772.916 ops/s
# Warmup Iteration   8: 1364472.033 ops/s
# Warmup Iteration   9: 1365192.460 ops/s
# Warmup Iteration  10: 1363233.138 ops/s
# Warmup Iteration  11: 1361078.643 ops/s
# Warmup Iteration  12: 1366587.319 ops/s
# Warmup Iteration  13: 1364595.437 ops/s
# Warmup Iteration  14: 1365542.396 ops/s
# Warmup Iteration  15: 1362464.847 ops/s
# Warmup Iteration  16: 1368373.287 ops/s
# Warmup Iteration  17: 1363526.210 ops/s
# Warmup Iteration  18: 1361211.294 ops/s
# Warmup Iteration  19: 1365320.783 ops/s
# Warmup Iteration  20: 1365350.234 ops/s
# Warmup Iteration  21: 1364561.402 ops/s
# Warmup Iteration  22: 1364545.935 ops/s
# Warmup Iteration  23: 1361242.362 ops/s
# Warmup Iteration  24: 1362310.510 ops/s
# Warmup Iteration  25: 1364265.450 ops/s
# Warmup Iteration  26: 1363775.957 ops/s
# Warmup Iteration  27: 1361882.479 ops/s
# Warmup Iteration  28: 1364828.279 ops/s
# Warmup Iteration  29: 1366703.484 ops/s
# Warmup Iteration  30: 1365686.423 ops/s
Iteration   1: 1363523.184 ops/s
Iteration   2: 1364174.104 ops/s
Iteration   3: 1362429.176 ops/s
Iteration   4: 1365616.790 ops/s
Iteration   5: 1359060.457 ops/s
Iteration   6: 1368682.074 ops/s
Iteration   7: 1359892.503 ops/s
Iteration   8: 1367495.326 ops/s
Iteration   9: 1361534.389 ops/s
Iteration  10: 1368093.324 ops/s
Iteration  11: 1362950.116 ops/s
Iteration  12: 1363870.553 ops/s
Iteration  13: 1364572.671 ops/s
Iteration  14: 1367567.057 ops/s
Iteration  15: 1362588.071 ops/s
Iteration  16: 1369092.055 ops/s
Iteration  17: 1365353.835 ops/s
Iteration  18: 1362500.254 ops/s
Iteration  19: 1365183.516 ops/s
Iteration  20: 1366684.305 ops/s
Iteration  21: 1360307.785 ops/s
Iteration  22: 1365227.140 ops/s
Iteration  23: 1365342.840 ops/s
Iteration  24: 1362014.894 ops/s
Iteration  25: 1369402.253 ops/s
Iteration  26: 1359346.390 ops/s
Iteration  27: 1366793.457 ops/s
Iteration  28: 1362074.233 ops/s
Iteration  29: 1365001.498 ops/s
Iteration  30: 1366410.057 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectByte":
  1364426.144 ±(99.9%) 1933.843 ops/s [Average]
  (min, avg, max) = (1359060.457, 1364426.144, 1369402.253), stdev = 2894.485
  CI (99.9%): [1362492.301, 1366359.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1364426.144 ± 1933.843  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 763895.464 ops/s
# Warmup Iteration   2: 2005473.344 ops/s
# Warmup Iteration   3: 2048244.156 ops/s
# Warmup Iteration   4: 1708838.157 ops/s
# Warmup Iteration   5: 2053150.895 ops/s
# Warmup Iteration   6: 2056662.408 ops/s
# Warmup Iteration   7: 2052579.117 ops/s
# Warmup Iteration   8: 2040283.762 ops/s
# Warmup Iteration   9: 2046431.375 ops/s
# Warmup Iteration  10: 2053708.403 ops/s
# Warmup Iteration  11: 2047052.007 ops/s
# Warmup Iteration  12: 2049329.127 ops/s
# Warmup Iteration  13: 2047671.113 ops/s
# Warmup Iteration  14: 2052389.912 ops/s
# Warmup Iteration  15: 2047059.555 ops/s
# Warmup Iteration  16: 2053236.026 ops/s
# Warmup Iteration  17: 2048759.274 ops/s
# Warmup Iteration  18: 2045125.396 ops/s
# Warmup Iteration  19: 2047911.037 ops/s
# Warmup Iteration  20: 2054458.543 ops/s
# Warmup Iteration  21: 2049901.490 ops/s
# Warmup Iteration  22: 2048958.199 ops/s
# Warmup Iteration  23: 2044591.780 ops/s
# Warmup Iteration  24: 2049124.384 ops/s
# Warmup Iteration  25: 2046906.754 ops/s
# Warmup Iteration  26: 2048706.188 ops/s
# Warmup Iteration  27: 2044754.700 ops/s
# Warmup Iteration  28: 2053338.584 ops/s
# Warmup Iteration  29: 2051823.327 ops/s
# Warmup Iteration  30: 2055821.314 ops/s
Iteration   1: 2043938.121 ops/s
Iteration   2: 2050320.166 ops/s
Iteration   3: 2055231.086 ops/s
Iteration   4: 2042127.169 ops/s
Iteration   5: 2048784.109 ops/s
Iteration   6: 2045664.628 ops/s
Iteration   7: 2050029.997 ops/s
Iteration   8: 2051268.251 ops/s
Iteration   9: 2050052.363 ops/s
Iteration  10: 2055491.174 ops/s
Iteration  11: 2048891.382 ops/s
Iteration  12: 2055253.396 ops/s
Iteration  13: 2044314.081 ops/s
Iteration  14: 2035553.618 ops/s
Iteration  15: 2054657.757 ops/s
Iteration  16: 2045712.107 ops/s
Iteration  17: 2047021.428 ops/s
Iteration  18: 2048937.830 ops/s
Iteration  19: 2033105.787 ops/s
Iteration  20: 2056101.887 ops/s
Iteration  21: 2046562.801 ops/s
Iteration  22: 2050511.109 ops/s
Iteration  23: 2049044.701 ops/s
Iteration  24: 2049740.323 ops/s
Iteration  25: 2040407.641 ops/s
Iteration  26: 2054084.287 ops/s
Iteration  27: 2048402.671 ops/s
Iteration  28: 2050475.542 ops/s
Iteration  29: 2057817.000 ops/s
Iteration  30: 2052161.369 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectChar":
  2048722.126 ±(99.9%) 3848.295 ops/s [Average]
  (min, avg, max) = (2033105.787, 2048722.126, 2057817.000), stdev = 5759.947
  CI (99.9%): [2044873.831, 2052570.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2048722.126 ± 3848.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 388255.589 ops/s
# Warmup Iteration   2: 886056.488 ops/s
# Warmup Iteration   3: 930623.805 ops/s
# Warmup Iteration   4: 850099.576 ops/s
# Warmup Iteration   5: 858651.690 ops/s
# Warmup Iteration   6: 930594.924 ops/s
# Warmup Iteration   7: 933140.839 ops/s
# Warmup Iteration   8: 930671.895 ops/s
# Warmup Iteration   9: 928068.852 ops/s
# Warmup Iteration  10: 931414.862 ops/s
# Warmup Iteration  11: 931289.518 ops/s
# Warmup Iteration  12: 931252.383 ops/s
# Warmup Iteration  13: 927332.871 ops/s
# Warmup Iteration  14: 930252.838 ops/s
# Warmup Iteration  15: 930025.868 ops/s
# Warmup Iteration  16: 928314.957 ops/s
# Warmup Iteration  17: 930489.375 ops/s
# Warmup Iteration  18: 927914.370 ops/s
# Warmup Iteration  19: 927379.483 ops/s
# Warmup Iteration  20: 931446.787 ops/s
# Warmup Iteration  21: 931045.942 ops/s
# Warmup Iteration  22: 931512.972 ops/s
# Warmup Iteration  23: 925746.990 ops/s
# Warmup Iteration  24: 929828.615 ops/s
# Warmup Iteration  25: 932958.094 ops/s
# Warmup Iteration  26: 928997.722 ops/s
# Warmup Iteration  27: 930921.711 ops/s
# Warmup Iteration  28: 928596.224 ops/s
# Warmup Iteration  29: 926009.806 ops/s
# Warmup Iteration  30: 932945.728 ops/s
Iteration   1: 930112.141 ops/s
Iteration   2: 930736.874 ops/s
Iteration   3: 932211.320 ops/s
Iteration   4: 929977.135 ops/s
Iteration   5: 932206.660 ops/s
Iteration   6: 927978.501 ops/s
Iteration   7: 931556.915 ops/s
Iteration   8: 931249.073 ops/s
Iteration   9: 931550.423 ops/s
Iteration  10: 934230.647 ops/s
Iteration  11: 931899.871 ops/s
Iteration  12: 932259.880 ops/s
Iteration  13: 930792.574 ops/s
Iteration  14: 930138.088 ops/s
Iteration  15: 932036.992 ops/s
Iteration  16: 934733.962 ops/s
Iteration  17: 933145.073 ops/s
Iteration  18: 929287.939 ops/s
Iteration  19: 929781.294 ops/s
Iteration  20: 929767.256 ops/s
Iteration  21: 930993.974 ops/s
Iteration  22: 931552.056 ops/s
Iteration  23: 932332.279 ops/s
Iteration  24: 931473.488 ops/s
Iteration  25: 930130.603 ops/s
Iteration  26: 935028.079 ops/s
Iteration  27: 933269.047 ops/s
Iteration  28: 929055.113 ops/s
Iteration  29: 932159.583 ops/s
Iteration  30: 931379.216 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectDouble":
  931434.202 ±(99.9%) 1094.704 ops/s [Average]
  (min, avg, max) = (927978.501, 931434.202, 935028.079), stdev = 1638.501
  CI (99.9%): [930339.498, 932528.906] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  931434.202 ± 1094.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 650489.889 ops/s
# Warmup Iteration   2: 1435931.436 ops/s
# Warmup Iteration   3: 1536145.327 ops/s
# Warmup Iteration   4: 1544122.877 ops/s
# Warmup Iteration   5: 1277646.457 ops/s
# Warmup Iteration   6: 1543915.648 ops/s
# Warmup Iteration   7: 1543407.953 ops/s
# Warmup Iteration   8: 1540567.788 ops/s
# Warmup Iteration   9: 1540115.486 ops/s
# Warmup Iteration  10: 1547797.903 ops/s
# Warmup Iteration  11: 1542261.501 ops/s
# Warmup Iteration  12: 1544572.992 ops/s
# Warmup Iteration  13: 1543041.927 ops/s
# Warmup Iteration  14: 1547016.996 ops/s
# Warmup Iteration  15: 1545334.941 ops/s
# Warmup Iteration  16: 1545802.930 ops/s
# Warmup Iteration  17: 1540776.910 ops/s
# Warmup Iteration  18: 1548877.451 ops/s
# Warmup Iteration  19: 1544621.886 ops/s
# Warmup Iteration  20: 1549673.559 ops/s
# Warmup Iteration  21: 1545839.924 ops/s
# Warmup Iteration  22: 1541459.400 ops/s
# Warmup Iteration  23: 1546020.416 ops/s
# Warmup Iteration  24: 1545486.589 ops/s
# Warmup Iteration  25: 1546074.615 ops/s
# Warmup Iteration  26: 1546427.807 ops/s
# Warmup Iteration  27: 1541057.288 ops/s
# Warmup Iteration  28: 1541154.837 ops/s
# Warmup Iteration  29: 1541284.678 ops/s
# Warmup Iteration  30: 1543506.084 ops/s
Iteration   1: 1549648.823 ops/s
Iteration   2: 1541710.370 ops/s
Iteration   3: 1541019.796 ops/s
Iteration   4: 1547624.305 ops/s
Iteration   5: 1545663.669 ops/s
Iteration   6: 1547221.981 ops/s
Iteration   7: 1546659.362 ops/s
Iteration   8: 1548498.432 ops/s
Iteration   9: 1545666.240 ops/s
Iteration  10: 1542358.298 ops/s
Iteration  11: 1544154.775 ops/s
Iteration  12: 1550882.840 ops/s
Iteration  13: 1548760.390 ops/s
Iteration  14: 1544447.964 ops/s
Iteration  15: 1547445.792 ops/s
Iteration  16: 1545731.254 ops/s
Iteration  17: 1549231.181 ops/s
Iteration  18: 1545957.487 ops/s
Iteration  19: 1542005.209 ops/s
Iteration  20: 1544813.739 ops/s
Iteration  21: 1549782.378 ops/s
Iteration  22: 1549528.661 ops/s
Iteration  23: 1545939.183 ops/s
Iteration  24: 1550702.669 ops/s
Iteration  25: 1545892.884 ops/s
Iteration  26: 1553277.512 ops/s
Iteration  27: 1547170.253 ops/s
Iteration  28: 1545719.499 ops/s
Iteration  29: 1548070.101 ops/s
Iteration  30: 1549595.811 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectFloat":
  1546839.362 ±(99.9%) 1951.562 ops/s [Average]
  (min, avg, max) = (1541019.796, 1546839.362, 1553277.512), stdev = 2921.006
  CI (99.9%): [1544887.800, 1548790.924] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1546839.362 ± 1951.562  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 762466.047 ops/s
# Warmup Iteration   2: 2124058.984 ops/s
# Warmup Iteration   3: 2172308.453 ops/s
# Warmup Iteration   4: 1801696.576 ops/s
# Warmup Iteration   5: 2183388.187 ops/s
# Warmup Iteration   6: 2178764.188 ops/s
# Warmup Iteration   7: 2173013.762 ops/s
# Warmup Iteration   8: 2178531.291 ops/s
# Warmup Iteration   9: 2171744.853 ops/s
# Warmup Iteration  10: 2176896.511 ops/s
# Warmup Iteration  11: 2179132.522 ops/s
# Warmup Iteration  12: 2179381.992 ops/s
# Warmup Iteration  13: 2180159.169 ops/s
# Warmup Iteration  14: 2176845.792 ops/s
# Warmup Iteration  15: 2173662.001 ops/s
# Warmup Iteration  16: 2174150.246 ops/s
# Warmup Iteration  17: 2176517.070 ops/s
# Warmup Iteration  18: 2180117.368 ops/s
# Warmup Iteration  19: 2181334.784 ops/s
# Warmup Iteration  20: 2186043.235 ops/s
# Warmup Iteration  21: 2176415.874 ops/s
# Warmup Iteration  22: 2184555.083 ops/s
# Warmup Iteration  23: 2175928.965 ops/s
# Warmup Iteration  24: 2178466.730 ops/s
# Warmup Iteration  25: 2182092.117 ops/s
# Warmup Iteration  26: 2175453.072 ops/s
# Warmup Iteration  27: 2174477.632 ops/s
# Warmup Iteration  28: 2176668.393 ops/s
# Warmup Iteration  29: 2177938.759 ops/s
# Warmup Iteration  30: 2180026.483 ops/s
Iteration   1: 2171097.439 ops/s
Iteration   2: 2168233.492 ops/s
Iteration   3: 2175346.639 ops/s
Iteration   4: 2178852.368 ops/s
Iteration   5: 2178011.669 ops/s
Iteration   6: 2171905.493 ops/s
Iteration   7: 2179494.929 ops/s
Iteration   8: 2180745.670 ops/s
Iteration   9: 2179116.832 ops/s
Iteration  10: 2180902.751 ops/s
Iteration  11: 2178463.118 ops/s
Iteration  12: 2175818.776 ops/s
Iteration  13: 2190046.539 ops/s
Iteration  14: 2179844.484 ops/s
Iteration  15: 2176274.921 ops/s
Iteration  16: 2179887.851 ops/s
Iteration  17: 2177703.094 ops/s
Iteration  18: 2174715.927 ops/s
Iteration  19: 2183673.594 ops/s
Iteration  20: 2177226.540 ops/s
Iteration  21: 2171620.530 ops/s
Iteration  22: 2168020.854 ops/s
Iteration  23: 2171665.104 ops/s
Iteration  24: 2165482.761 ops/s
Iteration  25: 2167901.126 ops/s
Iteration  26: 2181000.670 ops/s
Iteration  27: 2180613.843 ops/s
Iteration  28: 2172087.273 ops/s
Iteration  29: 2162713.419 ops/s
Iteration  30: 2172127.644 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectInt":
  2175686.512 ±(99.9%) 3940.041 ops/s [Average]
  (min, avg, max) = (2162713.419, 2175686.512, 2190046.539), stdev = 5897.269
  CI (99.9%): [2171746.470, 2179626.553] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2175686.512 ± 3940.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 692467.186 ops/s
# Warmup Iteration   2: 1925367.929 ops/s
# Warmup Iteration   3: 1735775.761 ops/s
# Warmup Iteration   4: 1801746.259 ops/s
# Warmup Iteration   5: 1940399.334 ops/s
# Warmup Iteration   6: 1938482.307 ops/s
# Warmup Iteration   7: 1931385.455 ops/s
# Warmup Iteration   8: 1929567.087 ops/s
# Warmup Iteration   9: 1934380.094 ops/s
# Warmup Iteration  10: 1934270.279 ops/s
# Warmup Iteration  11: 1936370.679 ops/s
# Warmup Iteration  12: 1936620.776 ops/s
# Warmup Iteration  13: 1934130.551 ops/s
# Warmup Iteration  14: 1935850.811 ops/s
# Warmup Iteration  15: 1932028.870 ops/s
# Warmup Iteration  16: 1937355.151 ops/s
# Warmup Iteration  17: 1939250.644 ops/s
# Warmup Iteration  18: 1945435.403 ops/s
# Warmup Iteration  19: 1947022.277 ops/s
# Warmup Iteration  20: 1940754.156 ops/s
# Warmup Iteration  21: 1942323.694 ops/s
# Warmup Iteration  22: 1933194.012 ops/s
# Warmup Iteration  23: 1938759.268 ops/s
# Warmup Iteration  24: 1946209.145 ops/s
# Warmup Iteration  25: 1941918.909 ops/s
# Warmup Iteration  26: 1942309.439 ops/s
# Warmup Iteration  27: 1942879.734 ops/s
# Warmup Iteration  28: 1940281.255 ops/s
# Warmup Iteration  29: 1947905.575 ops/s
# Warmup Iteration  30: 1945176.309 ops/s
Iteration   1: 1941300.914 ops/s
Iteration   2: 1944679.458 ops/s
Iteration   3: 1946665.355 ops/s
Iteration   4: 1947012.566 ops/s
Iteration   5: 1940156.930 ops/s
Iteration   6: 1941552.336 ops/s
Iteration   7: 1942513.862 ops/s
Iteration   8: 1944316.077 ops/s
Iteration   9: 1947143.513 ops/s
Iteration  10: 1947783.360 ops/s
Iteration  11: 1935842.215 ops/s
Iteration  12: 1933578.072 ops/s
Iteration  13: 1946422.592 ops/s
Iteration  14: 1951337.669 ops/s
Iteration  15: 1937571.234 ops/s
Iteration  16: 1941511.753 ops/s
Iteration  17: 1939737.117 ops/s
Iteration  18: 1943666.533 ops/s
Iteration  19: 1935562.619 ops/s
Iteration  20: 1936398.712 ops/s
Iteration  21: 1934354.838 ops/s
Iteration  22: 1938880.813 ops/s
Iteration  23: 1938752.566 ops/s
Iteration  24: 1940333.386 ops/s
Iteration  25: 1944090.435 ops/s
Iteration  26: 1942166.406 ops/s
Iteration  27: 1931613.358 ops/s
Iteration  28: 1944640.166 ops/s
Iteration  29: 1943134.478 ops/s
Iteration  30: 1938378.378 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectLong":
  1941369.924 ±(99.9%) 3146.218 ops/s [Average]
  (min, avg, max) = (1931613.358, 1941369.924, 1951337.669), stdev = 4709.112
  CI (99.9%): [1938223.705, 1944516.142] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1941369.924 ± 3146.218  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 831422.698 ops/s
# Warmup Iteration   2: 2251579.848 ops/s
# Warmup Iteration   3: 2278176.229 ops/s
# Warmup Iteration   4: 1894590.879 ops/s
# Warmup Iteration   5: 2261797.916 ops/s
# Warmup Iteration   6: 2263296.019 ops/s
# Warmup Iteration   7: 2261982.853 ops/s
# Warmup Iteration   8: 2267508.169 ops/s
# Warmup Iteration   9: 2271909.498 ops/s
# Warmup Iteration  10: 2270823.700 ops/s
# Warmup Iteration  11: 2276404.851 ops/s
# Warmup Iteration  12: 2275865.069 ops/s
# Warmup Iteration  13: 2270719.377 ops/s
# Warmup Iteration  14: 2274377.267 ops/s
# Warmup Iteration  15: 2275801.162 ops/s
# Warmup Iteration  16: 2272957.095 ops/s
# Warmup Iteration  17: 2278974.252 ops/s
# Warmup Iteration  18: 2274712.425 ops/s
# Warmup Iteration  19: 2280412.386 ops/s
# Warmup Iteration  20: 2279492.544 ops/s
# Warmup Iteration  21: 2282350.980 ops/s
# Warmup Iteration  22: 2279726.548 ops/s
# Warmup Iteration  23: 2286479.050 ops/s
# Warmup Iteration  24: 2283183.933 ops/s
# Warmup Iteration  25: 2284519.228 ops/s
# Warmup Iteration  26: 2288867.512 ops/s
# Warmup Iteration  27: 2280487.303 ops/s
# Warmup Iteration  28: 2283010.406 ops/s
# Warmup Iteration  29: 2277306.496 ops/s
# Warmup Iteration  30: 2279599.949 ops/s
Iteration   1: 2273527.920 ops/s
Iteration   2: 2281167.466 ops/s
Iteration   3: 2275625.254 ops/s
Iteration   4: 2279873.401 ops/s
Iteration   5: 2276790.384 ops/s
Iteration   6: 2272745.046 ops/s
Iteration   7: 2275087.783 ops/s
Iteration   8: 2280720.557 ops/s
Iteration   9: 2280159.888 ops/s
Iteration  10: 2286560.099 ops/s
Iteration  11: 2279656.598 ops/s
Iteration  12: 2276846.985 ops/s
Iteration  13: 2284168.894 ops/s
Iteration  14: 2288318.058 ops/s
Iteration  15: 2282755.798 ops/s
Iteration  16: 2283056.345 ops/s
Iteration  17: 2282437.596 ops/s
Iteration  18: 2287771.575 ops/s
Iteration  19: 2284062.591 ops/s
Iteration  20: 2273462.258 ops/s
Iteration  21: 2275020.444 ops/s
Iteration  22: 2283389.261 ops/s
Iteration  23: 2278928.751 ops/s
Iteration  24: 2285278.847 ops/s
Iteration  25: 2279141.389 ops/s
Iteration  26: 2292786.430 ops/s
Iteration  27: 2285037.440 ops/s
Iteration  28: 2282265.041 ops/s
Iteration  29: 2289480.252 ops/s
Iteration  30: 2279998.148 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectShort":
  2281204.017 ±(99.9%) 3371.797 ops/s [Average]
  (min, avg, max) = (2272745.046, 2281204.017, 2292786.430), stdev = 5046.748
  CI (99.9%): [2277832.219, 2284575.814] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2281204.017 ± 3371.797  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168588.931 ops/s
# Warmup Iteration   2: 330644.080 ops/s
# Warmup Iteration   3: 370585.151 ops/s
# Warmup Iteration   4: 373507.905 ops/s
# Warmup Iteration   5: 325882.796 ops/s
# Warmup Iteration   6: 354690.784 ops/s
# Warmup Iteration   7: 373174.501 ops/s
# Warmup Iteration   8: 373249.216 ops/s
# Warmup Iteration   9: 373085.328 ops/s
# Warmup Iteration  10: 373592.048 ops/s
# Warmup Iteration  11: 372535.951 ops/s
# Warmup Iteration  12: 373825.453 ops/s
# Warmup Iteration  13: 373438.552 ops/s
# Warmup Iteration  14: 372579.171 ops/s
# Warmup Iteration  15: 372474.484 ops/s
# Warmup Iteration  16: 372429.723 ops/s
# Warmup Iteration  17: 369897.904 ops/s
# Warmup Iteration  18: 373322.196 ops/s
# Warmup Iteration  19: 373805.672 ops/s
# Warmup Iteration  20: 372906.455 ops/s
# Warmup Iteration  21: 372720.993 ops/s
# Warmup Iteration  22: 373010.327 ops/s
# Warmup Iteration  23: 373026.603 ops/s
# Warmup Iteration  24: 372762.337 ops/s
# Warmup Iteration  25: 373250.022 ops/s
# Warmup Iteration  26: 373395.170 ops/s
# Warmup Iteration  27: 373594.596 ops/s
# Warmup Iteration  28: 372374.837 ops/s
# Warmup Iteration  29: 372471.764 ops/s
# Warmup Iteration  30: 372144.612 ops/s
Iteration   1: 373462.166 ops/s
Iteration   2: 372817.053 ops/s
Iteration   3: 373552.801 ops/s
Iteration   4: 372893.081 ops/s
Iteration   5: 373580.936 ops/s
Iteration   6: 373275.205 ops/s
Iteration   7: 372784.321 ops/s
Iteration   8: 373809.961 ops/s
Iteration   9: 373806.790 ops/s
Iteration  10: 373782.563 ops/s
Iteration  11: 374224.369 ops/s
Iteration  12: 373390.368 ops/s
Iteration  13: 373375.613 ops/s
Iteration  14: 373157.971 ops/s
Iteration  15: 373058.048 ops/s
Iteration  16: 372581.197 ops/s
Iteration  17: 372922.807 ops/s
Iteration  18: 373467.523 ops/s
Iteration  19: 374033.618 ops/s
Iteration  20: 372032.823 ops/s
Iteration  21: 372511.704 ops/s
Iteration  22: 373814.497 ops/s
Iteration  23: 372898.405 ops/s
Iteration  24: 373253.140 ops/s
Iteration  25: 373528.326 ops/s
Iteration  26: 373394.038 ops/s
Iteration  27: 373005.037 ops/s
Iteration  28: 373426.067 ops/s
Iteration  29: 373044.403 ops/s
Iteration  30: 373616.099 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWith":
  373283.364 ±(99.9%) 321.917 ops/s [Average]
  (min, avg, max) = (372032.823, 373283.364, 374224.369), stdev = 481.831
  CI (99.9%): [372961.447, 373605.282] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  373283.364 ± 321.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 419707.100 ops/s
# Warmup Iteration   2: 667687.634 ops/s
# Warmup Iteration   3: 797908.629 ops/s
# Warmup Iteration   4: 801937.389 ops/s
# Warmup Iteration   5: 801801.890 ops/s
# Warmup Iteration   6: 803434.110 ops/s
# Warmup Iteration   7: 658903.569 ops/s
# Warmup Iteration   8: 803343.649 ops/s
# Warmup Iteration   9: 801965.669 ops/s
# Warmup Iteration  10: 802611.126 ops/s
# Warmup Iteration  11: 800604.196 ops/s
# Warmup Iteration  12: 804169.941 ops/s
# Warmup Iteration  13: 803014.735 ops/s
# Warmup Iteration  14: 804355.996 ops/s
# Warmup Iteration  15: 803046.525 ops/s
# Warmup Iteration  16: 803640.456 ops/s
# Warmup Iteration  17: 803440.989 ops/s
# Warmup Iteration  18: 803114.064 ops/s
# Warmup Iteration  19: 803899.317 ops/s
# Warmup Iteration  20: 804739.044 ops/s
# Warmup Iteration  21: 801571.404 ops/s
# Warmup Iteration  22: 802903.980 ops/s
# Warmup Iteration  23: 803218.130 ops/s
# Warmup Iteration  24: 799536.033 ops/s
# Warmup Iteration  25: 803560.317 ops/s
# Warmup Iteration  26: 802693.732 ops/s
# Warmup Iteration  27: 803679.592 ops/s
# Warmup Iteration  28: 802913.745 ops/s
# Warmup Iteration  29: 805038.759 ops/s
# Warmup Iteration  30: 801810.029 ops/s
Iteration   1: 802866.209 ops/s
Iteration   2: 803782.304 ops/s
Iteration   3: 803985.509 ops/s
Iteration   4: 804720.822 ops/s
Iteration   5: 799425.158 ops/s
Iteration   6: 807018.841 ops/s
Iteration   7: 804689.891 ops/s
Iteration   8: 806228.965 ops/s
Iteration   9: 801663.711 ops/s
Iteration  10: 802155.771 ops/s
Iteration  11: 800291.859 ops/s
Iteration  12: 805644.327 ops/s
Iteration  13: 801238.213 ops/s
Iteration  14: 806629.340 ops/s
Iteration  15: 803925.109 ops/s
Iteration  16: 803461.223 ops/s
Iteration  17: 801759.675 ops/s
Iteration  18: 804962.867 ops/s
Iteration  19: 801482.616 ops/s
Iteration  20: 801492.585 ops/s
Iteration  21: 804889.103 ops/s
Iteration  22: 799921.516 ops/s
Iteration  23: 802047.836 ops/s
Iteration  24: 801686.628 ops/s
Iteration  25: 801863.348 ops/s
Iteration  26: 804000.296 ops/s
Iteration  27: 803354.830 ops/s
Iteration  28: 800508.957 ops/s
Iteration  29: 806522.933 ops/s
Iteration  30: 803615.342 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWithTarget":
  803194.526 ±(99.9%) 1397.408 ops/s [Average]
  (min, avg, max) = (799425.158, 803194.526, 807018.841), stdev = 2091.575
  CI (99.9%): [801797.118, 804591.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_flatCollectWithTarget  thrpt   30  803194.526 ± 1397.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527674.517 ops/s
# Warmup Iteration   2: 1110631.174 ops/s
# Warmup Iteration   3: 1192857.725 ops/s
# Warmup Iteration   4: 1195661.596 ops/s
# Warmup Iteration   5: 990590.561 ops/s
# Warmup Iteration   6: 1201397.718 ops/s
# Warmup Iteration   7: 1197657.889 ops/s
# Warmup Iteration   8: 1198567.239 ops/s
# Warmup Iteration   9: 1199128.477 ops/s
# Warmup Iteration  10: 1199664.369 ops/s
# Warmup Iteration  11: 1197356.053 ops/s
# Warmup Iteration  12: 1199184.686 ops/s
# Warmup Iteration  13: 1199832.322 ops/s
# Warmup Iteration  14: 1201106.238 ops/s
# Warmup Iteration  15: 1200712.026 ops/s
# Warmup Iteration  16: 1196518.680 ops/s
# Warmup Iteration  17: 1202544.552 ops/s
# Warmup Iteration  18: 1203809.941 ops/s
# Warmup Iteration  19: 1198874.385 ops/s
# Warmup Iteration  20: 1199936.649 ops/s
# Warmup Iteration  21: 1199734.509 ops/s
# Warmup Iteration  22: 1197808.187 ops/s
# Warmup Iteration  23: 1199738.710 ops/s
# Warmup Iteration  24: 1198008.524 ops/s
# Warmup Iteration  25: 1203129.561 ops/s
# Warmup Iteration  26: 1201835.764 ops/s
# Warmup Iteration  27: 1202810.735 ops/s
# Warmup Iteration  28: 1202148.059 ops/s
# Warmup Iteration  29: 1203855.675 ops/s
# Warmup Iteration  30: 1203710.628 ops/s
Iteration   1: 1205124.250 ops/s
Iteration   2: 1202356.733 ops/s
Iteration   3: 1201853.616 ops/s
Iteration   4: 1201545.165 ops/s
Iteration   5: 1202114.323 ops/s
Iteration   6: 1203888.378 ops/s
Iteration   7: 1204308.431 ops/s
Iteration   8: 1202765.475 ops/s
Iteration   9: 1198557.420 ops/s
Iteration  10: 1204207.350 ops/s
Iteration  11: 1201967.679 ops/s
Iteration  12: 1202542.991 ops/s
Iteration  13: 1200141.643 ops/s
Iteration  14: 1201405.005 ops/s
Iteration  15: 1206813.540 ops/s
Iteration  16: 1199701.980 ops/s
Iteration  17: 1199010.769 ops/s
Iteration  18: 1200640.165 ops/s
Iteration  19: 1203846.482 ops/s
Iteration  20: 1201928.407 ops/s
Iteration  21: 1202239.432 ops/s
Iteration  22: 1199500.653 ops/s
Iteration  23: 1201990.177 ops/s
Iteration  24: 1205954.935 ops/s
Iteration  25: 1198029.321 ops/s
Iteration  26: 1201256.530 ops/s
Iteration  27: 1202804.093 ops/s
Iteration  28: 1202276.440 ops/s
Iteration  29: 1202156.504 ops/s
Iteration  30: 1197783.810 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEach":
  1201957.057 ±(99.9%) 1467.023 ops/s [Average]
  (min, avg, max) = (1197783.810, 1201957.057, 1206813.540), stdev = 2195.771
  CI (99.9%): [1200490.033, 1203424.080] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_forEach  thrpt   30  1201957.057 ± 1467.023  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 893418.137 ops/s
# Warmup Iteration   2: 2081232.179 ops/s
# Warmup Iteration   3: 2173354.650 ops/s
# Warmup Iteration   4: 2037847.723 ops/s
# Warmup Iteration   5: 1946464.428 ops/s
# Warmup Iteration   6: 2187790.541 ops/s
# Warmup Iteration   7: 2173151.968 ops/s
# Warmup Iteration   8: 2181768.477 ops/s
# Warmup Iteration   9: 2185701.208 ops/s
# Warmup Iteration  10: 2188701.753 ops/s
# Warmup Iteration  11: 2178900.304 ops/s
# Warmup Iteration  12: 2181094.686 ops/s
# Warmup Iteration  13: 2179090.752 ops/s
# Warmup Iteration  14: 2190306.528 ops/s
# Warmup Iteration  15: 2184628.594 ops/s
# Warmup Iteration  16: 2185183.637 ops/s
# Warmup Iteration  17: 2181826.817 ops/s
# Warmup Iteration  18: 2176078.590 ops/s
# Warmup Iteration  19: 2181443.867 ops/s
# Warmup Iteration  20: 2184480.081 ops/s
# Warmup Iteration  21: 2181887.711 ops/s
# Warmup Iteration  22: 2179092.726 ops/s
# Warmup Iteration  23: 2178542.389 ops/s
# Warmup Iteration  24: 2181332.984 ops/s
# Warmup Iteration  25: 2180480.578 ops/s
# Warmup Iteration  26: 2177854.746 ops/s
# Warmup Iteration  27: 2179002.456 ops/s
# Warmup Iteration  28: 2178152.052 ops/s
# Warmup Iteration  29: 2182181.125 ops/s
# Warmup Iteration  30: 2182407.477 ops/s
Iteration   1: 2179638.735 ops/s
Iteration   2: 2186445.325 ops/s
Iteration   3: 2191389.843 ops/s
Iteration   4: 2181894.055 ops/s
Iteration   5: 2172772.442 ops/s
Iteration   6: 2182505.514 ops/s
Iteration   7: 2183224.821 ops/s
Iteration   8: 2187893.417 ops/s
Iteration   9: 2187198.241 ops/s
Iteration  10: 2173347.378 ops/s
Iteration  11: 2176227.744 ops/s
Iteration  12: 2188178.904 ops/s
Iteration  13: 2178052.774 ops/s
Iteration  14: 2178804.011 ops/s
Iteration  15: 2179456.543 ops/s
Iteration  16: 2189257.751 ops/s
Iteration  17: 2190175.739 ops/s
Iteration  18: 2186037.343 ops/s
Iteration  19: 2182598.595 ops/s
Iteration  20: 2187493.353 ops/s
Iteration  21: 2183373.074 ops/s
Iteration  22: 2169278.339 ops/s
Iteration  23: 2182560.431 ops/s
Iteration  24: 2184656.707 ops/s
Iteration  25: 2180360.587 ops/s
Iteration  26: 2184698.786 ops/s
Iteration  27: 2184782.427 ops/s
Iteration  28: 2186888.353 ops/s
Iteration  29: 2185717.382 ops/s
Iteration  30: 2180421.371 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWith":
  2182844.333 ±(99.9%) 3541.386 ops/s [Average]
  (min, avg, max) = (2169278.339, 2182844.333, 2191389.843), stdev = 5300.581
  CI (99.9%): [2179302.946, 2186385.719] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_forEachWith  thrpt   30  2182844.333 ± 3541.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 431295.204 ops/s
# Warmup Iteration   2: 799385.902 ops/s
# Warmup Iteration   3: 915475.760 ops/s
# Warmup Iteration   4: 921884.858 ops/s
# Warmup Iteration   5: 884168.192 ops/s
# Warmup Iteration   6: 787495.939 ops/s
# Warmup Iteration   7: 920310.320 ops/s
# Warmup Iteration   8: 923719.912 ops/s
# Warmup Iteration   9: 922937.584 ops/s
# Warmup Iteration  10: 918293.036 ops/s
# Warmup Iteration  11: 921813.164 ops/s
# Warmup Iteration  12: 919278.263 ops/s
# Warmup Iteration  13: 921901.605 ops/s
# Warmup Iteration  14: 921890.926 ops/s
# Warmup Iteration  15: 923099.286 ops/s
# Warmup Iteration  16: 920282.396 ops/s
# Warmup Iteration  17: 921915.821 ops/s
# Warmup Iteration  18: 923245.922 ops/s
# Warmup Iteration  19: 920641.070 ops/s
# Warmup Iteration  20: 920104.342 ops/s
# Warmup Iteration  21: 922175.272 ops/s
# Warmup Iteration  22: 921296.273 ops/s
# Warmup Iteration  23: 923020.518 ops/s
# Warmup Iteration  24: 921504.977 ops/s
# Warmup Iteration  25: 922280.478 ops/s
# Warmup Iteration  26: 922762.171 ops/s
# Warmup Iteration  27: 921749.398 ops/s
# Warmup Iteration  28: 922293.012 ops/s
# Warmup Iteration  29: 920401.640 ops/s
# Warmup Iteration  30: 923937.099 ops/s
Iteration   1: 921297.334 ops/s
Iteration   2: 922273.229 ops/s
Iteration   3: 923516.768 ops/s
Iteration   4: 923248.326 ops/s
Iteration   5: 918665.258 ops/s
Iteration   6: 923267.055 ops/s
Iteration   7: 923843.149 ops/s
Iteration   8: 919948.639 ops/s
Iteration   9: 924928.014 ops/s
Iteration  10: 920439.640 ops/s
Iteration  11: 921957.827 ops/s
Iteration  12: 920187.997 ops/s
Iteration  13: 924818.626 ops/s
Iteration  14: 920117.967 ops/s
Iteration  15: 922315.542 ops/s
Iteration  16: 921242.201 ops/s
Iteration  17: 921784.974 ops/s
Iteration  18: 921720.296 ops/s
Iteration  19: 924076.997 ops/s
Iteration  20: 923320.157 ops/s
Iteration  21: 920743.589 ops/s
Iteration  22: 925381.605 ops/s
Iteration  23: 921399.056 ops/s
Iteration  24: 924189.529 ops/s
Iteration  25: 922624.796 ops/s
Iteration  26: 922224.345 ops/s
Iteration  27: 923261.466 ops/s
Iteration  28: 921832.096 ops/s
Iteration  29: 924761.882 ops/s
Iteration  30: 923673.390 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forEachWithIndex":
  922435.392 ±(99.9%) 1125.950 ops/s [Average]
  (min, avg, max) = (918665.258, 922435.392, 925381.605), stdev = 1685.269
  CI (99.9%): [921309.442, 923561.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  922435.392 ± 1125.950  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forLoop$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forLoop

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 59926369.293 ops/s
# Warmup Iteration   2: 112513983.186 ops/s
# Warmup Iteration   3: 107268859.410 ops/s
# Warmup Iteration   4: 125287195.502 ops/s
# Warmup Iteration   5: 125108638.739 ops/s
# Warmup Iteration   6: 125417948.816 ops/s
# Warmup Iteration   7: 125391750.861 ops/s
# Warmup Iteration   8: 125201350.970 ops/s
# Warmup Iteration   9: 125556203.745 ops/s
# Warmup Iteration  10: 125068188.763 ops/s
# Warmup Iteration  11: 125012752.952 ops/s
# Warmup Iteration  12: 124950026.296 ops/s
# Warmup Iteration  13: 125218687.919 ops/s
# Warmup Iteration  14: 125147941.027 ops/s
# Warmup Iteration  15: 125070556.166 ops/s
# Warmup Iteration  16: 125507191.799 ops/s
# Warmup Iteration  17: 127364496.931 ops/s
# Warmup Iteration  18: 125543687.073 ops/s
# Warmup Iteration  19: 127057572.263 ops/s
# Warmup Iteration  20: 127173531.873 ops/s
# Warmup Iteration  21: 126304929.367 ops/s
# Warmup Iteration  22: 125294955.548 ops/s
# Warmup Iteration  23: 127278214.304 ops/s
# Warmup Iteration  24: 126665647.875 ops/s
# Warmup Iteration  25: 126923309.772 ops/s
# Warmup Iteration  26: 126991951.886 ops/s
# Warmup Iteration  27: 126921632.120 ops/s
# Warmup Iteration  28: 126820041.394 ops/s
# Warmup Iteration  29: 126940361.573 ops/s
# Warmup Iteration  30: 127192931.670 ops/s
Iteration   1: 126642835.971 ops/s
Iteration   2: 127908791.928 ops/s
Iteration   3: 127302361.217 ops/s
Iteration   4: 126972669.921 ops/s
Iteration   5: 126501973.225 ops/s
Iteration   6: 126940581.341 ops/s
Iteration   7: 126923056.162 ops/s
Iteration   8: 126392883.943 ops/s
Iteration   9: 127397318.059 ops/s
Iteration  10: 126905760.847 ops/s
Iteration  11: 127067923.034 ops/s
Iteration  12: 127296284.585 ops/s
Iteration  13: 127238119.731 ops/s
Iteration  14: 126720875.004 ops/s
Iteration  15: 126327620.802 ops/s
Iteration  16: 127482750.656 ops/s
Iteration  17: 126848996.307 ops/s
Iteration  18: 127565698.068 ops/s
Iteration  19: 126953085.207 ops/s
Iteration  20: 127143253.850 ops/s
Iteration  21: 127233456.436 ops/s
Iteration  22: 127056136.530 ops/s
Iteration  23: 126815317.083 ops/s
Iteration  24: 126914795.437 ops/s
Iteration  25: 127140313.274 ops/s
Iteration  26: 127125199.520 ops/s
Iteration  27: 126998676.732 ops/s
Iteration  28: 127118835.463 ops/s
Iteration  29: 126648840.553 ops/s
Iteration  30: 126850862.482 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_forLoop":
  127014509.112 ±(99.9%) 228896.213 ops/s [Average]
  (min, avg, max) = (126327620.802, 127014509.112, 127908791.928), stdev = 342601.102
  CI (99.9%): [126785612.899, 127243405.325] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_forLoop  thrpt   30  127014509.112 ± 228896.213  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 842091.183 ops/s
# Warmup Iteration   2: 1889941.875 ops/s
# Warmup Iteration   3: 1981493.550 ops/s
# Warmup Iteration   4: 1841558.455 ops/s
# Warmup Iteration   5: 1807243.106 ops/s
# Warmup Iteration   6: 1992260.875 ops/s
# Warmup Iteration   7: 1997411.595 ops/s
# Warmup Iteration   8: 1997105.311 ops/s
# Warmup Iteration   9: 2000094.682 ops/s
# Warmup Iteration  10: 1993909.276 ops/s
# Warmup Iteration  11: 1988226.015 ops/s
# Warmup Iteration  12: 1996574.419 ops/s
# Warmup Iteration  13: 1995384.599 ops/s
# Warmup Iteration  14: 1994160.318 ops/s
# Warmup Iteration  15: 1990850.215 ops/s
# Warmup Iteration  16: 1995052.717 ops/s
# Warmup Iteration  17: 1993455.508 ops/s
# Warmup Iteration  18: 1992232.602 ops/s
# Warmup Iteration  19: 1994435.729 ops/s
# Warmup Iteration  20: 1988505.898 ops/s
# Warmup Iteration  21: 1991687.746 ops/s
# Warmup Iteration  22: 1994068.525 ops/s
# Warmup Iteration  23: 1991992.833 ops/s
# Warmup Iteration  24: 1994282.579 ops/s
# Warmup Iteration  25: 1995233.340 ops/s
# Warmup Iteration  26: 1991137.102 ops/s
# Warmup Iteration  27: 1993397.877 ops/s
# Warmup Iteration  28: 2000399.197 ops/s
# Warmup Iteration  29: 1994111.422 ops/s
# Warmup Iteration  30: 1987470.328 ops/s
Iteration   1: 1993749.819 ops/s
Iteration   2: 1995050.476 ops/s
Iteration   3: 1999050.909 ops/s
Iteration   4: 1988012.079 ops/s
Iteration   5: 1999996.667 ops/s
Iteration   6: 1994243.460 ops/s
Iteration   7: 1994237.652 ops/s
Iteration   8: 1992769.357 ops/s
Iteration   9: 1997142.212 ops/s
Iteration  10: 1989422.434 ops/s
Iteration  11: 1993753.281 ops/s
Iteration  12: 1989352.169 ops/s
Iteration  13: 1995178.181 ops/s
Iteration  14: 2003449.629 ops/s
Iteration  15: 2002113.899 ops/s
Iteration  16: 1993721.354 ops/s
Iteration  17: 1987803.031 ops/s
Iteration  18: 1998589.439 ops/s
Iteration  19: 1999835.605 ops/s
Iteration  20: 1987198.759 ops/s
Iteration  21: 1994550.507 ops/s
Iteration  22: 1981435.897 ops/s
Iteration  23: 1992384.911 ops/s
Iteration  24: 1999951.010 ops/s
Iteration  25: 1991751.091 ops/s
Iteration  26: 1999557.292 ops/s
Iteration  27: 1998681.798 ops/s
Iteration  28: 1997542.475 ops/s
Iteration  29: 1999566.316 ops/s
Iteration  30: 1988978.762 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_fusedCollectMakeString":
  1994635.682 ±(99.9%) 3419.468 ops/s [Average]
  (min, avg, max) = (1981435.897, 1994635.682, 2003449.629), stdev = 5118.099
  CI (99.9%): [1991216.214, 1998055.151] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  1994635.682 ± 3419.468  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1328946.200 ops/s
# Warmup Iteration   2: 2459417.232 ops/s
# Warmup Iteration   3: 2781225.713 ops/s
# Warmup Iteration   4: 2766937.415 ops/s
# Warmup Iteration   5: 2539285.205 ops/s
# Warmup Iteration   6: 2505341.125 ops/s
# Warmup Iteration   7: 2771675.489 ops/s
# Warmup Iteration   8: 2776044.452 ops/s
# Warmup Iteration   9: 2776715.264 ops/s
# Warmup Iteration  10: 2773421.755 ops/s
# Warmup Iteration  11: 2764706.085 ops/s
# Warmup Iteration  12: 2775481.755 ops/s
# Warmup Iteration  13: 2766897.141 ops/s
# Warmup Iteration  14: 2770400.516 ops/s
# Warmup Iteration  15: 2774268.361 ops/s
# Warmup Iteration  16: 2773923.776 ops/s
# Warmup Iteration  17: 2781175.863 ops/s
# Warmup Iteration  18: 2778917.877 ops/s
# Warmup Iteration  19: 2777226.880 ops/s
# Warmup Iteration  20: 2783476.414 ops/s
# Warmup Iteration  21: 2777288.347 ops/s
# Warmup Iteration  22: 2782067.941 ops/s
# Warmup Iteration  23: 2786609.084 ops/s
# Warmup Iteration  24: 2781361.853 ops/s
# Warmup Iteration  25: 2776082.654 ops/s
# Warmup Iteration  26: 2779840.097 ops/s
# Warmup Iteration  27: 2774465.427 ops/s
# Warmup Iteration  28: 2781076.360 ops/s
# Warmup Iteration  29: 2782118.645 ops/s
# Warmup Iteration  30: 2783286.582 ops/s
Iteration   1: 2780898.674 ops/s
Iteration   2: 2775935.137 ops/s
Iteration   3: 2779003.672 ops/s
Iteration   4: 2783706.596 ops/s
Iteration   5: 2777702.880 ops/s
Iteration   6: 2781448.042 ops/s
Iteration   7: 2780690.458 ops/s
Iteration   8: 2776701.727 ops/s
Iteration   9: 2785191.244 ops/s
Iteration  10: 2775751.378 ops/s
Iteration  11: 2788363.604 ops/s
Iteration  12: 2782893.501 ops/s
Iteration  13: 2780986.230 ops/s
Iteration  14: 2782485.008 ops/s
Iteration  15: 2789451.099 ops/s
Iteration  16: 2783059.396 ops/s
Iteration  17: 2782382.273 ops/s
Iteration  18: 2782097.690 ops/s
Iteration  19: 2783342.987 ops/s
Iteration  20: 2780351.180 ops/s
Iteration  21: 2786636.133 ops/s
Iteration  22: 2773326.023 ops/s
Iteration  23: 2775478.084 ops/s
Iteration  24: 2785115.702 ops/s
Iteration  25: 2772285.086 ops/s
Iteration  26: 2782029.669 ops/s
Iteration  27: 2789667.225 ops/s
Iteration  28: 2790992.065 ops/s
Iteration  29: 2786222.757 ops/s
Iteration  30: 2780819.149 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getAny":
  2781833.822 ±(99.9%) 3170.215 ops/s [Average]
  (min, avg, max) = (2772285.086, 2781833.822, 2790992.065), stdev = 4745.029
  CI (99.9%): [2778663.607, 2785004.038] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getAny  thrpt   30  2781833.822 ± 3170.215  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1065741.973 ops/s
# Warmup Iteration   2: 2156105.363 ops/s
# Warmup Iteration   3: 2354540.332 ops/s
# Warmup Iteration   4: 2352853.075 ops/s
# Warmup Iteration   5: 1928825.176 ops/s
# Warmup Iteration   6: 2365540.517 ops/s
# Warmup Iteration   7: 2354957.051 ops/s
# Warmup Iteration   8: 2368003.773 ops/s
# Warmup Iteration   9: 2367558.299 ops/s
# Warmup Iteration  10: 2361095.520 ops/s
# Warmup Iteration  11: 2368032.692 ops/s
# Warmup Iteration  12: 2368807.983 ops/s
# Warmup Iteration  13: 2367851.498 ops/s
# Warmup Iteration  14: 2369017.717 ops/s
# Warmup Iteration  15: 2371404.069 ops/s
# Warmup Iteration  16: 2368302.981 ops/s
# Warmup Iteration  17: 2371375.449 ops/s
# Warmup Iteration  18: 2366049.324 ops/s
# Warmup Iteration  19: 2365830.034 ops/s
# Warmup Iteration  20: 2366549.809 ops/s
# Warmup Iteration  21: 2367317.756 ops/s
# Warmup Iteration  22: 2367452.122 ops/s
# Warmup Iteration  23: 2368705.569 ops/s
# Warmup Iteration  24: 2365644.328 ops/s
# Warmup Iteration  25: 2363381.842 ops/s
# Warmup Iteration  26: 2370259.279 ops/s
# Warmup Iteration  27: 2370937.207 ops/s
# Warmup Iteration  28: 2368026.493 ops/s
# Warmup Iteration  29: 2366325.282 ops/s
# Warmup Iteration  30: 2367273.254 ops/s
Iteration   1: 2354387.228 ops/s
Iteration   2: 2363498.065 ops/s
Iteration   3: 2369681.418 ops/s
Iteration   4: 2367198.881 ops/s
Iteration   5: 2358074.885 ops/s
Iteration   6: 2375676.939 ops/s
Iteration   7: 2358416.709 ops/s
Iteration   8: 2354321.777 ops/s
Iteration   9: 2361834.130 ops/s
Iteration  10: 2366231.660 ops/s
Iteration  11: 2361506.086 ops/s
Iteration  12: 2361313.979 ops/s
Iteration  13: 2371103.507 ops/s
Iteration  14: 2364590.707 ops/s
Iteration  15: 2364242.137 ops/s
Iteration  16: 2367835.109 ops/s
Iteration  17: 2354774.793 ops/s
Iteration  18: 2360821.665 ops/s
Iteration  19: 2356865.633 ops/s
Iteration  20: 2358668.554 ops/s
Iteration  21: 2363156.792 ops/s
Iteration  22: 2365573.951 ops/s
Iteration  23: 2361879.803 ops/s
Iteration  24: 2357222.449 ops/s
Iteration  25: 2352514.589 ops/s
Iteration  26: 2359408.963 ops/s
Iteration  27: 2362361.827 ops/s
Iteration  28: 2356734.409 ops/s
Iteration  29: 2369861.160 ops/s
Iteration  30: 2360645.650 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getFirst":
  2362013.449 ±(99.9%) 3688.679 ops/s [Average]
  (min, avg, max) = (2352514.589, 2362013.449, 2375676.939), stdev = 5521.042
  CI (99.9%): [2358324.769, 2365702.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getFirst  thrpt   30  2362013.449 ± 3688.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1180732.378 ops/s
# Warmup Iteration   2: 2221667.449 ops/s
# Warmup Iteration   3: 2398165.493 ops/s
# Warmup Iteration   4: 2409360.714 ops/s
# Warmup Iteration   5: 1969823.368 ops/s
# Warmup Iteration   6: 2416113.946 ops/s
# Warmup Iteration   7: 2414280.650 ops/s
# Warmup Iteration   8: 2410910.156 ops/s
# Warmup Iteration   9: 2409950.529 ops/s
# Warmup Iteration  10: 2412290.578 ops/s
# Warmup Iteration  11: 2413229.863 ops/s
# Warmup Iteration  12: 2411796.858 ops/s
# Warmup Iteration  13: 2417359.241 ops/s
# Warmup Iteration  14: 2415876.184 ops/s
# Warmup Iteration  15: 2415770.576 ops/s
# Warmup Iteration  16: 2418746.943 ops/s
# Warmup Iteration  17: 2414886.531 ops/s
# Warmup Iteration  18: 2421981.595 ops/s
# Warmup Iteration  19: 2419011.686 ops/s
# Warmup Iteration  20: 2414766.313 ops/s
# Warmup Iteration  21: 2413336.929 ops/s
# Warmup Iteration  22: 2418423.253 ops/s
# Warmup Iteration  23: 2423719.089 ops/s
# Warmup Iteration  24: 2414512.227 ops/s
# Warmup Iteration  25: 2418925.186 ops/s
# Warmup Iteration  26: 2414034.165 ops/s
# Warmup Iteration  27: 2418789.881 ops/s
# Warmup Iteration  28: 2417307.848 ops/s
# Warmup Iteration  29: 2417613.973 ops/s
# Warmup Iteration  30: 2418613.830 ops/s
Iteration   1: 2414738.996 ops/s
Iteration   2: 2417329.032 ops/s
Iteration   3: 2424432.041 ops/s
Iteration   4: 2411818.070 ops/s
Iteration   5: 2418630.744 ops/s
Iteration   6: 2419262.162 ops/s
Iteration   7: 2408682.879 ops/s
Iteration   8: 2414813.922 ops/s
Iteration   9: 2413760.368 ops/s
Iteration  10: 2416664.430 ops/s
Iteration  11: 2416545.675 ops/s
Iteration  12: 2410433.886 ops/s
Iteration  13: 2422959.912 ops/s
Iteration  14: 2413594.071 ops/s
Iteration  15: 2414066.068 ops/s
Iteration  16: 2415963.857 ops/s
Iteration  17: 2408311.090 ops/s
Iteration  18: 2418478.566 ops/s
Iteration  19: 2412984.501 ops/s
Iteration  20: 2411815.977 ops/s
Iteration  21: 2417372.280 ops/s
Iteration  22: 2412012.525 ops/s
Iteration  23: 2418398.038 ops/s
Iteration  24: 2413788.631 ops/s
Iteration  25: 2413543.202 ops/s
Iteration  26: 2417224.281 ops/s
Iteration  27: 2416041.486 ops/s
Iteration  28: 2414590.297 ops/s
Iteration  29: 2408120.909 ops/s
Iteration  30: 2419468.452 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getLast":
  2415194.878 ±(99.9%) 2613.144 ops/s [Average]
  (min, avg, max) = (2408120.909, 2415194.878, 2424432.041), stdev = 3911.230
  CI (99.9%): [2412581.735, 2417808.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getLast  thrpt   30  2415194.878 ± 2613.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1608335.249 ops/s
# Warmup Iteration   2: 3605967.350 ops/s
# Warmup Iteration   3: 3745302.651 ops/s
# Warmup Iteration   4: 3478664.353 ops/s
# Warmup Iteration   5: 3366834.835 ops/s
# Warmup Iteration   6: 3782930.079 ops/s
# Warmup Iteration   7: 3767246.798 ops/s
# Warmup Iteration   8: 3742960.093 ops/s
# Warmup Iteration   9: 3771884.679 ops/s
# Warmup Iteration  10: 3765341.813 ops/s
# Warmup Iteration  11: 3768459.713 ops/s
# Warmup Iteration  12: 3775849.855 ops/s
# Warmup Iteration  13: 3763860.804 ops/s
# Warmup Iteration  14: 3765799.287 ops/s
# Warmup Iteration  15: 3764094.143 ops/s
# Warmup Iteration  16: 3770677.734 ops/s
# Warmup Iteration  17: 3765837.028 ops/s
# Warmup Iteration  18: 3769924.055 ops/s
# Warmup Iteration  19: 3762212.593 ops/s
# Warmup Iteration  20: 3759696.902 ops/s
# Warmup Iteration  21: 3764921.996 ops/s
# Warmup Iteration  22: 3772607.276 ops/s
# Warmup Iteration  23: 3766153.876 ops/s
# Warmup Iteration  24: 3767597.528 ops/s
# Warmup Iteration  25: 3752405.771 ops/s
# Warmup Iteration  26: 3774273.409 ops/s
# Warmup Iteration  27: 3762477.823 ops/s
# Warmup Iteration  28: 3759801.257 ops/s
# Warmup Iteration  29: 3763078.925 ops/s
# Warmup Iteration  30: 3771565.346 ops/s
Iteration   1: 3766570.171 ops/s
Iteration   2: 3771441.848 ops/s
Iteration   3: 3782755.656 ops/s
Iteration   4: 3776582.710 ops/s
Iteration   5: 3771749.735 ops/s
Iteration   6: 3774083.753 ops/s
Iteration   7: 3779353.937 ops/s
Iteration   8: 3763005.363 ops/s
Iteration   9: 3772365.547 ops/s
Iteration  10: 3763703.993 ops/s
Iteration  11: 3764330.210 ops/s
Iteration  12: 3763482.294 ops/s
Iteration  13: 3774936.922 ops/s
Iteration  14: 3761994.917 ops/s
Iteration  15: 3786614.908 ops/s
Iteration  16: 3756283.988 ops/s
Iteration  17: 3758452.323 ops/s
Iteration  18: 3764073.705 ops/s
Iteration  19: 3770265.822 ops/s
Iteration  20: 3765283.632 ops/s
Iteration  21: 3763390.588 ops/s
Iteration  22: 3766107.896 ops/s
Iteration  23: 3775014.370 ops/s
Iteration  24: 3772275.813 ops/s
Iteration  25: 3768724.931 ops/s
Iteration  26: 3761542.766 ops/s
Iteration  27: 3768526.514 ops/s
Iteration  28: 3772560.901 ops/s
Iteration  29: 3776412.358 ops/s
Iteration  30: 3779600.585 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly":
  3769716.272 ±(99.9%) 4870.636 ops/s [Average]
  (min, avg, max) = (3756283.988, 3769716.272, 3786614.908), stdev = 7290.139
  CI (99.9%): [3764845.636, 3774586.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getOnly  thrpt   30  3769716.272 ± 4870.636  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 679445.353 ops/s
# Warmup Iteration   2: 739157.232 ops/s
# Warmup Iteration   3: 973973.940 ops/s
# Warmup Iteration   4: 969761.269 ops/s
# Warmup Iteration   5: 966232.906 ops/s
# Warmup Iteration   6: 970483.662 ops/s
# Warmup Iteration   7: 970919.333 ops/s
# Warmup Iteration   8: 973440.478 ops/s
# Warmup Iteration   9: 973231.082 ops/s
# Warmup Iteration  10: 973759.095 ops/s
# Warmup Iteration  11: 812056.197 ops/s
# Warmup Iteration  12: 972677.835 ops/s
# Warmup Iteration  13: 973909.473 ops/s
# Warmup Iteration  14: 971316.550 ops/s
# Warmup Iteration  15: 972961.138 ops/s
# Warmup Iteration  16: 971835.525 ops/s
# Warmup Iteration  17: 1030987.963 ops/s
# Warmup Iteration  18: 1032318.186 ops/s
# Warmup Iteration  19: 1031785.028 ops/s
# Warmup Iteration  20: 1032205.022 ops/s
# Warmup Iteration  21: 1033378.383 ops/s
# Warmup Iteration  22: 1033487.413 ops/s
# Warmup Iteration  23: 1032852.724 ops/s
# Warmup Iteration  24: 1029807.059 ops/s
# Warmup Iteration  25: 1033420.627 ops/s
# Warmup Iteration  26: 1034402.607 ops/s
# Warmup Iteration  27: 1027719.295 ops/s
# Warmup Iteration  28: 1031150.915 ops/s
# Warmup Iteration  29: 1030442.681 ops/s
# Warmup Iteration  30: 1034767.075 ops/s
Iteration   1: 1033210.448 ops/s
Iteration   2: 1034349.894 ops/s
Iteration   3: 1033428.502 ops/s
Iteration   4: 1029971.138 ops/s
Iteration   5: 1032340.308 ops/s
Iteration   6: 1033790.308 ops/s
Iteration   7: 1032181.379 ops/s
Iteration   8: 1032401.047 ops/s
Iteration   9: 1035904.176 ops/s
Iteration  10: 1031838.326 ops/s
Iteration  11: 1030687.389 ops/s
Iteration  12: 1034166.292 ops/s
Iteration  13: 1033224.942 ops/s
Iteration  14: 1029371.439 ops/s
Iteration  15: 1031487.527 ops/s
Iteration  16: 1035794.883 ops/s
Iteration  17: 1031278.789 ops/s
Iteration  18: 1028666.944 ops/s
Iteration  19: 1033009.185 ops/s
Iteration  20: 1034346.828 ops/s
Iteration  21: 1031574.305 ops/s
Iteration  22: 1034807.253 ops/s
Iteration  23: 1036069.095 ops/s
Iteration  24: 1031422.406 ops/s
Iteration  25: 1028690.197 ops/s
Iteration  26: 1035387.198 ops/s
Iteration  27: 1026908.700 ops/s
Iteration  28: 1028261.925 ops/s
Iteration  29: 1031094.421 ops/s
Iteration  30: 1036614.900 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_empty_throws":
  1032409.338 ±(99.9%) 1682.625 ops/s [Average]
  (min, avg, max) = (1026908.700, 1032409.338, 1036614.900), stdev = 2518.473
  CI (99.9%): [1030726.714, 1034091.963] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1032409.338 ± 1682.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 613429.008 ops/s
# Warmup Iteration   2: 678264.757 ops/s
# Warmup Iteration   3: 899956.407 ops/s
# Warmup Iteration   4: 895830.033 ops/s
# Warmup Iteration   5: 888754.140 ops/s
# Warmup Iteration   6: 894042.238 ops/s
# Warmup Iteration   7: 898970.625 ops/s
# Warmup Iteration   8: 891709.258 ops/s
# Warmup Iteration   9: 892994.072 ops/s
# Warmup Iteration  10: 888340.355 ops/s
# Warmup Iteration  11: 755737.186 ops/s
# Warmup Iteration  12: 898468.396 ops/s
# Warmup Iteration  13: 899208.769 ops/s
# Warmup Iteration  14: 898456.420 ops/s
# Warmup Iteration  15: 896755.836 ops/s
# Warmup Iteration  16: 898342.618 ops/s
# Warmup Iteration  17: 947590.502 ops/s
# Warmup Iteration  18: 949698.939 ops/s
# Warmup Iteration  19: 949355.252 ops/s
# Warmup Iteration  20: 948036.139 ops/s
# Warmup Iteration  21: 946272.933 ops/s
# Warmup Iteration  22: 948418.714 ops/s
# Warmup Iteration  23: 950400.492 ops/s
# Warmup Iteration  24: 946692.890 ops/s
# Warmup Iteration  25: 946720.407 ops/s
# Warmup Iteration  26: 947887.559 ops/s
# Warmup Iteration  27: 947530.047 ops/s
# Warmup Iteration  28: 943792.559 ops/s
# Warmup Iteration  29: 948843.068 ops/s
# Warmup Iteration  30: 946471.913 ops/s
Iteration   1: 948258.956 ops/s
Iteration   2: 947615.865 ops/s
Iteration   3: 948305.173 ops/s
Iteration   4: 947617.262 ops/s
Iteration   5: 945867.171 ops/s
Iteration   6: 949827.153 ops/s
Iteration   7: 945234.666 ops/s
Iteration   8: 945345.455 ops/s
Iteration   9: 946864.403 ops/s
Iteration  10: 947132.477 ops/s
Iteration  11: 949909.294 ops/s
Iteration  12: 946021.055 ops/s
Iteration  13: 948563.656 ops/s
Iteration  14: 947388.641 ops/s
Iteration  15: 947341.976 ops/s
Iteration  16: 949868.500 ops/s
Iteration  17: 946238.291 ops/s
Iteration  18: 948999.840 ops/s
Iteration  19: 948329.375 ops/s
Iteration  20: 948710.518 ops/s
Iteration  21: 945997.601 ops/s
Iteration  22: 950783.109 ops/s
Iteration  23: 945819.166 ops/s
Iteration  24: 950058.694 ops/s
Iteration  25: 949721.963 ops/s
Iteration  26: 950128.698 ops/s
Iteration  27: 948726.870 ops/s
Iteration  28: 948352.457 ops/s
Iteration  29: 949783.511 ops/s
Iteration  30: 950559.725 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  948112.384 ±(99.9%) 1111.230 ops/s [Average]
  (min, avg, max) = (945234.666, 948112.384, 950783.109), stdev = 1663.237
  CI (99.9%): [947001.154, 949223.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  948112.384 ± 1111.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 89840.358 ops/s
# Warmup Iteration   2: 136700.751 ops/s
# Warmup Iteration   3: 179235.762 ops/s
# Warmup Iteration   4: 178715.341 ops/s
# Warmup Iteration   5: 179945.828 ops/s
# Warmup Iteration   6: 179795.807 ops/s
# Warmup Iteration   7: 179725.072 ops/s
# Warmup Iteration   8: 148718.518 ops/s
# Warmup Iteration   9: 179713.855 ops/s
# Warmup Iteration  10: 179489.923 ops/s
# Warmup Iteration  11: 179650.491 ops/s
# Warmup Iteration  12: 179567.088 ops/s
# Warmup Iteration  13: 179382.555 ops/s
# Warmup Iteration  14: 179533.989 ops/s
# Warmup Iteration  15: 179879.792 ops/s
# Warmup Iteration  16: 179516.653 ops/s
# Warmup Iteration  17: 178522.720 ops/s
# Warmup Iteration  18: 178371.462 ops/s
# Warmup Iteration  19: 178990.262 ops/s
# Warmup Iteration  20: 178842.528 ops/s
# Warmup Iteration  21: 178920.392 ops/s
# Warmup Iteration  22: 179142.328 ops/s
# Warmup Iteration  23: 178908.159 ops/s
# Warmup Iteration  24: 179189.873 ops/s
# Warmup Iteration  25: 178817.367 ops/s
# Warmup Iteration  26: 178837.989 ops/s
# Warmup Iteration  27: 178968.295 ops/s
# Warmup Iteration  28: 178912.829 ops/s
# Warmup Iteration  29: 178892.403 ops/s
# Warmup Iteration  30: 179546.156 ops/s
Iteration   1: 178745.063 ops/s
Iteration   2: 179204.950 ops/s
Iteration   3: 178631.099 ops/s
Iteration   4: 179525.785 ops/s
Iteration   5: 179293.648 ops/s
Iteration   6: 178541.413 ops/s
Iteration   7: 179225.885 ops/s
Iteration   8: 179238.753 ops/s
Iteration   9: 179188.437 ops/s
Iteration  10: 179235.433 ops/s
Iteration  11: 178939.718 ops/s
Iteration  12: 179429.985 ops/s
Iteration  13: 179002.564 ops/s
Iteration  14: 179174.323 ops/s
Iteration  15: 179299.938 ops/s
Iteration  16: 179288.505 ops/s
Iteration  17: 179103.162 ops/s
Iteration  18: 179176.905 ops/s
Iteration  19: 178802.812 ops/s
Iteration  20: 178709.674 ops/s
Iteration  21: 179042.280 ops/s
Iteration  22: 179235.816 ops/s
Iteration  23: 178584.211 ops/s
Iteration  24: 179110.722 ops/s
Iteration  25: 179221.236 ops/s
Iteration  26: 179108.401 ops/s
Iteration  27: 178827.838 ops/s
Iteration  28: 179097.614 ops/s
Iteration  29: 178568.917 ops/s
Iteration  30: 179112.789 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy":
  179055.596 ±(99.9%) 176.351 ops/s [Average]
  (min, avg, max) = (178541.413, 179055.596, 179525.785), stdev = 263.954
  CI (99.9%): [178879.245, 179231.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupBy  thrpt   30  179055.596 ± 176.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29238.586 ops/s
# Warmup Iteration   2: 42026.011 ops/s
# Warmup Iteration   3: 56726.178 ops/s
# Warmup Iteration   4: 56209.319 ops/s
# Warmup Iteration   5: 56491.679 ops/s
# Warmup Iteration   6: 56602.275 ops/s
# Warmup Iteration   7: 56607.052 ops/s
# Warmup Iteration   8: 50036.962 ops/s
# Warmup Iteration   9: 53049.383 ops/s
# Warmup Iteration  10: 56564.921 ops/s
# Warmup Iteration  11: 56592.905 ops/s
# Warmup Iteration  12: 56599.353 ops/s
# Warmup Iteration  13: 56629.796 ops/s
# Warmup Iteration  14: 56704.732 ops/s
# Warmup Iteration  15: 56671.453 ops/s
# Warmup Iteration  16: 56626.150 ops/s
# Warmup Iteration  17: 56641.037 ops/s
# Warmup Iteration  18: 56870.148 ops/s
# Warmup Iteration  19: 56889.536 ops/s
# Warmup Iteration  20: 56814.584 ops/s
# Warmup Iteration  21: 56967.666 ops/s
# Warmup Iteration  22: 56740.629 ops/s
# Warmup Iteration  23: 56740.462 ops/s
# Warmup Iteration  24: 56900.174 ops/s
# Warmup Iteration  25: 56772.402 ops/s
# Warmup Iteration  26: 56969.816 ops/s
# Warmup Iteration  27: 56789.202 ops/s
# Warmup Iteration  28: 56874.580 ops/s
# Warmup Iteration  29: 56875.355 ops/s
# Warmup Iteration  30: 56645.512 ops/s
Iteration   1: 56924.900 ops/s
Iteration   2: 56942.383 ops/s
Iteration   3: 56607.402 ops/s
Iteration   4: 56755.764 ops/s
Iteration   5: 56654.431 ops/s
Iteration   6: 56969.991 ops/s
Iteration   7: 56721.650 ops/s
Iteration   8: 56736.860 ops/s
Iteration   9: 56953.989 ops/s
Iteration  10: 56857.153 ops/s
Iteration  11: 56884.053 ops/s
Iteration  12: 56930.199 ops/s
Iteration  13: 56661.260 ops/s
Iteration  14: 56913.842 ops/s
Iteration  15: 56819.803 ops/s
Iteration  16: 56697.236 ops/s
Iteration  17: 56994.714 ops/s
Iteration  18: 56835.193 ops/s
Iteration  19: 56830.404 ops/s
Iteration  20: 57052.339 ops/s
Iteration  21: 56879.314 ops/s
Iteration  22: 56736.153 ops/s
Iteration  23: 56726.494 ops/s
Iteration  24: 56810.105 ops/s
Iteration  25: 56571.608 ops/s
Iteration  26: 56720.748 ops/s
Iteration  27: 56943.127 ops/s
Iteration  28: 56688.416 ops/s
Iteration  29: 56695.163 ops/s
Iteration  30: 56739.030 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByEach":
  56808.458 ±(99.9%) 83.490 ops/s [Average]
  (min, avg, max) = (56571.608, 56808.458, 57052.339), stdev = 124.963
  CI (99.9%): [56724.968, 56891.947] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt      Score    Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByEach  thrpt   30  56808.458 ± 83.490  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3246934.289 ops/s
# Warmup Iteration   2: 7516423.766 ops/s
# Warmup Iteration   3: 6833532.348 ops/s
# Warmup Iteration   4: 6891483.462 ops/s
# Warmup Iteration   5: 7522751.960 ops/s
# Warmup Iteration   6: 7539748.444 ops/s
# Warmup Iteration   7: 7535735.616 ops/s
# Warmup Iteration   8: 7533808.683 ops/s
# Warmup Iteration   9: 7534742.214 ops/s
# Warmup Iteration  10: 7543287.033 ops/s
# Warmup Iteration  11: 7539954.128 ops/s
# Warmup Iteration  12: 7476069.846 ops/s
# Warmup Iteration  13: 7527608.519 ops/s
# Warmup Iteration  14: 7503347.352 ops/s
# Warmup Iteration  15: 7534482.172 ops/s
# Warmup Iteration  16: 7511319.343 ops/s
# Warmup Iteration  17: 7524483.195 ops/s
# Warmup Iteration  18: 7526961.085 ops/s
# Warmup Iteration  19: 7536357.614 ops/s
# Warmup Iteration  20: 7527369.295 ops/s
# Warmup Iteration  21: 7508345.872 ops/s
# Warmup Iteration  22: 7518169.633 ops/s
# Warmup Iteration  23: 7539461.491 ops/s
# Warmup Iteration  24: 7515166.998 ops/s
# Warmup Iteration  25: 7517313.245 ops/s
# Warmup Iteration  26: 7531021.191 ops/s
# Warmup Iteration  27: 7524717.754 ops/s
# Warmup Iteration  28: 7526207.801 ops/s
# Warmup Iteration  29: 7532429.104 ops/s
# Warmup Iteration  30: 7533265.984 ops/s
Iteration   1: 7525512.358 ops/s
Iteration   2: 7535807.467 ops/s
Iteration   3: 7504379.979 ops/s
Iteration   4: 7527436.666 ops/s
Iteration   5: 7546922.991 ops/s
Iteration   6: 7527762.859 ops/s
Iteration   7: 7567025.367 ops/s
Iteration   8: 7531560.764 ops/s
Iteration   9: 7490597.093 ops/s
Iteration  10: 7527347.985 ops/s
Iteration  11: 7553499.564 ops/s
Iteration  12: 7534071.004 ops/s
Iteration  13: 7526072.412 ops/s
Iteration  14: 7517780.431 ops/s
Iteration  15: 7538349.998 ops/s
Iteration  16: 7539361.689 ops/s
Iteration  17: 7558654.111 ops/s
Iteration  18: 7534505.476 ops/s
Iteration  19: 7560247.738 ops/s
Iteration  20: 7559375.322 ops/s
Iteration  21: 7526705.900 ops/s
Iteration  22: 7540013.703 ops/s
Iteration  23: 7548613.902 ops/s
Iteration  24: 7546350.803 ops/s
Iteration  25: 7543683.935 ops/s
Iteration  26: 7537050.137 ops/s
Iteration  27: 7525141.386 ops/s
Iteration  28: 7534048.353 ops/s
Iteration  29: 7530249.993 ops/s
Iteration  30: 7520718.980 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey":
  7535294.946 ±(99.9%) 10885.469 ops/s [Average]
  (min, avg, max) = (7490597.093, 7535294.946, 7567025.367), stdev = 16292.859
  CI (99.9%): [7524409.476, 7546180.415] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  7535294.946 ± 10885.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4310045.211 ops/s
# Warmup Iteration   2: 13163730.457 ops/s
# Warmup Iteration   3: 13849691.652 ops/s
# Warmup Iteration   4: 11587297.644 ops/s
# Warmup Iteration   5: 13840336.382 ops/s
# Warmup Iteration   6: 13921405.203 ops/s
# Warmup Iteration   7: 13893250.125 ops/s
# Warmup Iteration   8: 13881934.101 ops/s
# Warmup Iteration   9: 13880056.016 ops/s
# Warmup Iteration  10: 13841940.208 ops/s
# Warmup Iteration  11: 13875617.713 ops/s
# Warmup Iteration  12: 13906017.533 ops/s
# Warmup Iteration  13: 13927473.584 ops/s
# Warmup Iteration  14: 13907308.882 ops/s
# Warmup Iteration  15: 13884762.483 ops/s
# Warmup Iteration  16: 13891941.572 ops/s
# Warmup Iteration  17: 13869356.959 ops/s
# Warmup Iteration  18: 13901780.972 ops/s
# Warmup Iteration  19: 13862131.625 ops/s
# Warmup Iteration  20: 13897021.835 ops/s
# Warmup Iteration  21: 13873926.955 ops/s
# Warmup Iteration  22: 13850105.170 ops/s
# Warmup Iteration  23: 13887805.216 ops/s
# Warmup Iteration  24: 13860232.459 ops/s
# Warmup Iteration  25: 13883993.472 ops/s
# Warmup Iteration  26: 13854539.928 ops/s
# Warmup Iteration  27: 13860941.694 ops/s
# Warmup Iteration  28: 13901121.313 ops/s
# Warmup Iteration  29: 13907663.020 ops/s
# Warmup Iteration  30: 13862200.626 ops/s
Iteration   1: 13885983.309 ops/s
Iteration   2: 13904984.212 ops/s
Iteration   3: 13857564.213 ops/s
Iteration   4: 13826722.736 ops/s
Iteration   5: 13870983.398 ops/s
Iteration   6: 13854252.524 ops/s
Iteration   7: 13881781.951 ops/s
Iteration   8: 13896433.809 ops/s
Iteration   9: 13819945.575 ops/s
Iteration  10: 13883900.360 ops/s
Iteration  11: 13848498.507 ops/s
Iteration  12: 13887825.009 ops/s
Iteration  13: 13851817.794 ops/s
Iteration  14: 13866855.665 ops/s
Iteration  15: 13908754.354 ops/s
Iteration  16: 13890274.128 ops/s
Iteration  17: 13864373.126 ops/s
Iteration  18: 13825720.641 ops/s
Iteration  19: 13879319.053 ops/s
Iteration  20: 13901325.887 ops/s
Iteration  21: 13820585.065 ops/s
Iteration  22: 13868271.105 ops/s
Iteration  23: 13866625.532 ops/s
Iteration  24: 13882793.630 ops/s
Iteration  25: 13907605.631 ops/s
Iteration  26: 13855923.863 ops/s
Iteration  27: 13921433.117 ops/s
Iteration  28: 13835340.269 ops/s
Iteration  29: 13881525.762 ops/s
Iteration  30: 13810497.373 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  13868597.253 ±(99.9%) 19647.557 ops/s [Average]
  (min, avg, max) = (13810497.373, 13868597.253, 13921433.117), stdev = 29407.540
  CI (99.9%): [13848949.696, 13888244.810] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  13868597.253 ± 19647.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 653248.455 ops/s
# Warmup Iteration   2: 706885.638 ops/s
# Warmup Iteration   3: 946267.064 ops/s
# Warmup Iteration   4: 946793.034 ops/s
# Warmup Iteration   5: 948019.380 ops/s
# Warmup Iteration   6: 946903.699 ops/s
# Warmup Iteration   7: 947259.979 ops/s
# Warmup Iteration   8: 950296.321 ops/s
# Warmup Iteration   9: 948742.575 ops/s
# Warmup Iteration  10: 870427.917 ops/s
# Warmup Iteration  11: 862575.245 ops/s
# Warmup Iteration  12: 945833.439 ops/s
# Warmup Iteration  13: 949147.859 ops/s
# Warmup Iteration  14: 949571.482 ops/s
# Warmup Iteration  15: 947526.375 ops/s
# Warmup Iteration  16: 948008.183 ops/s
# Warmup Iteration  17: 1002845.136 ops/s
# Warmup Iteration  18: 1006606.942 ops/s
# Warmup Iteration  19: 1002373.180 ops/s
# Warmup Iteration  20: 1003653.005 ops/s
# Warmup Iteration  21: 1002557.673 ops/s
# Warmup Iteration  22: 1004509.285 ops/s
# Warmup Iteration  23: 1004470.585 ops/s
# Warmup Iteration  24: 1004024.031 ops/s
# Warmup Iteration  25: 1002576.412 ops/s
# Warmup Iteration  26: 1001922.022 ops/s
# Warmup Iteration  27: 1003830.710 ops/s
# Warmup Iteration  28: 1004921.590 ops/s
# Warmup Iteration  29: 1006639.972 ops/s
# Warmup Iteration  30: 1001555.547 ops/s
Iteration   1: 1001677.793 ops/s
Iteration   2: 1002139.461 ops/s
Iteration   3: 1002088.666 ops/s
Iteration   4: 1004142.223 ops/s
Iteration   5: 1002162.092 ops/s
Iteration   6: 1001895.052 ops/s
Iteration   7: 1001725.934 ops/s
Iteration   8: 1000488.681 ops/s
Iteration   9: 1003600.705 ops/s
Iteration  10: 1001728.041 ops/s
Iteration  11: 1007375.557 ops/s
Iteration  12: 1002751.289 ops/s
Iteration  13: 1008813.043 ops/s
Iteration  14: 1003063.209 ops/s
Iteration  15: 1002536.597 ops/s
Iteration  16: 1010849.309 ops/s
Iteration  17: 1004786.043 ops/s
Iteration  18: 1004192.036 ops/s
Iteration  19: 1003147.308 ops/s
Iteration  20: 1001808.089 ops/s
Iteration  21: 998933.161 ops/s
Iteration  22: 1003907.290 ops/s
Iteration  23: 1005812.808 ops/s
Iteration  24: 1006336.976 ops/s
Iteration  25: 1002603.784 ops/s
Iteration  26: 999510.326 ops/s
Iteration  27: 1007385.878 ops/s
Iteration  28: 1000750.326 ops/s
Iteration  29: 1003969.916 ops/s
Iteration  30: 1005439.915 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws":
  1003520.717 ±(99.9%) 1794.190 ops/s [Average]
  (min, avg, max) = (998933.161, 1003520.717, 1010849.309), stdev = 2685.459
  CI (99.9%): [1001726.527, 1005314.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws  thrpt   30  1003520.717 ± 1794.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 374569.427 ops/s
# Warmup Iteration   2: 435930.088 ops/s
# Warmup Iteration   3: 584105.556 ops/s
# Warmup Iteration   4: 582187.251 ops/s
# Warmup Iteration   5: 581603.869 ops/s
# Warmup Iteration   6: 583505.414 ops/s
# Warmup Iteration   7: 585554.399 ops/s
# Warmup Iteration   8: 583264.841 ops/s
# Warmup Iteration   9: 582817.309 ops/s
# Warmup Iteration  10: 479445.916 ops/s
# Warmup Iteration  11: 584338.685 ops/s
# Warmup Iteration  12: 583172.075 ops/s
# Warmup Iteration  13: 583007.699 ops/s
# Warmup Iteration  14: 581986.757 ops/s
# Warmup Iteration  15: 583067.723 ops/s
# Warmup Iteration  16: 583721.409 ops/s
# Warmup Iteration  17: 603453.453 ops/s
# Warmup Iteration  18: 603539.857 ops/s
# Warmup Iteration  19: 604471.371 ops/s
# Warmup Iteration  20: 604150.561 ops/s
# Warmup Iteration  21: 603882.163 ops/s
# Warmup Iteration  22: 603267.831 ops/s
# Warmup Iteration  23: 604990.347 ops/s
# Warmup Iteration  24: 603565.959 ops/s
# Warmup Iteration  25: 600402.011 ops/s
# Warmup Iteration  26: 602832.060 ops/s
# Warmup Iteration  27: 602773.735 ops/s
# Warmup Iteration  28: 605388.088 ops/s
# Warmup Iteration  29: 602569.988 ops/s
# Warmup Iteration  30: 603879.008 ops/s
Iteration   1: 605151.465 ops/s
Iteration   2: 602753.321 ops/s
Iteration   3: 603073.709 ops/s
Iteration   4: 602845.120 ops/s
Iteration   5: 605329.069 ops/s
Iteration   6: 603148.730 ops/s
Iteration   7: 602784.902 ops/s
Iteration   8: 600340.657 ops/s
Iteration   9: 601843.744 ops/s
Iteration  10: 599827.966 ops/s
Iteration  11: 601339.516 ops/s
Iteration  12: 603337.329 ops/s
Iteration  13: 604107.683 ops/s
Iteration  14: 602250.765 ops/s
Iteration  15: 602677.201 ops/s
Iteration  16: 605978.909 ops/s
Iteration  17: 605356.628 ops/s
Iteration  18: 604599.438 ops/s
Iteration  19: 605263.893 ops/s
Iteration  20: 602874.831 ops/s
Iteration  21: 601700.956 ops/s
Iteration  22: 604323.514 ops/s
Iteration  23: 602958.011 ops/s
Iteration  24: 605153.072 ops/s
Iteration  25: 603041.739 ops/s
Iteration  26: 603207.761 ops/s
Iteration  27: 606187.180 ops/s
Iteration  28: 604025.214 ops/s
Iteration  29: 602853.285 ops/s
Iteration  30: 601692.842 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  603334.282 ±(99.9%) 1062.059 ops/s [Average]
  (min, avg, max) = (599827.966, 603334.282, 606187.180), stdev = 1589.640
  CI (99.9%): [602272.223, 604396.340] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  603334.282 ± 1062.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2743395.196 ops/s
# Warmup Iteration   2: 6078088.420 ops/s
# Warmup Iteration   3: 5159302.091 ops/s
# Warmup Iteration   4: 6194291.928 ops/s
# Warmup Iteration   5: 6215909.432 ops/s
# Warmup Iteration   6: 6197603.731 ops/s
# Warmup Iteration   7: 6220377.800 ops/s
# Warmup Iteration   8: 6203867.695 ops/s
# Warmup Iteration   9: 6213586.216 ops/s
# Warmup Iteration  10: 6205721.067 ops/s
# Warmup Iteration  11: 6224979.442 ops/s
# Warmup Iteration  12: 6217471.080 ops/s
# Warmup Iteration  13: 6217646.279 ops/s
# Warmup Iteration  14: 6206649.896 ops/s
# Warmup Iteration  15: 6216278.241 ops/s
# Warmup Iteration  16: 6221121.488 ops/s
# Warmup Iteration  17: 6166624.487 ops/s
# Warmup Iteration  18: 6161279.174 ops/s
# Warmup Iteration  19: 6170378.688 ops/s
# Warmup Iteration  20: 6162352.687 ops/s
# Warmup Iteration  21: 6159620.184 ops/s
# Warmup Iteration  22: 6184758.866 ops/s
# Warmup Iteration  23: 6156816.755 ops/s
# Warmup Iteration  24: 6169124.543 ops/s
# Warmup Iteration  25: 6157261.678 ops/s
# Warmup Iteration  26: 6188133.514 ops/s
# Warmup Iteration  27: 6168767.267 ops/s
# Warmup Iteration  28: 6149202.824 ops/s
# Warmup Iteration  29: 6152180.305 ops/s
# Warmup Iteration  30: 6173794.894 ops/s
Iteration   1: 6155281.819 ops/s
Iteration   2: 6163802.886 ops/s
Iteration   3: 6148313.924 ops/s
Iteration   4: 6167531.600 ops/s
Iteration   5: 6164034.108 ops/s
Iteration   6: 6152364.108 ops/s
Iteration   7: 6152901.819 ops/s
Iteration   8: 6153867.741 ops/s
Iteration   9: 6178147.490 ops/s
Iteration  10: 6155495.136 ops/s
Iteration  11: 6179404.610 ops/s
Iteration  12: 6174820.959 ops/s
Iteration  13: 6184549.682 ops/s
Iteration  14: 6162722.659 ops/s
Iteration  15: 6176046.781 ops/s
Iteration  16: 6179305.122 ops/s
Iteration  17: 6153129.559 ops/s
Iteration  18: 6170614.519 ops/s
Iteration  19: 6174132.882 ops/s
Iteration  20: 6144680.909 ops/s
Iteration  21: 6183426.518 ops/s
Iteration  22: 6166355.531 ops/s
Iteration  23: 6157962.831 ops/s
Iteration  24: 6174438.035 ops/s
Iteration  25: 6179529.108 ops/s
Iteration  26: 6175810.010 ops/s
Iteration  27: 6197662.065 ops/s
Iteration  28: 6160540.593 ops/s
Iteration  29: 6151820.952 ops/s
Iteration  30: 6158950.506 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws":
  6166588.149 ±(99.9%) 8587.204 ops/s [Average]
  (min, avg, max) = (6144680.909, 6166588.149, 6197662.065), stdev = 12852.924
  CI (99.9%): [6158000.944, 6175175.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws  thrpt   30  6166588.149 ± 8587.204  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 417215.349 ops/s
# Warmup Iteration   2: 463794.223 ops/s
# Warmup Iteration   3: 617039.325 ops/s
# Warmup Iteration   4: 615941.887 ops/s
# Warmup Iteration   5: 612910.350 ops/s
# Warmup Iteration   6: 616616.993 ops/s
# Warmup Iteration   7: 617846.143 ops/s
# Warmup Iteration   8: 614996.058 ops/s
# Warmup Iteration   9: 615985.227 ops/s
# Warmup Iteration  10: 611779.029 ops/s
# Warmup Iteration  11: 521325.449 ops/s
# Warmup Iteration  12: 616897.591 ops/s
# Warmup Iteration  13: 616417.876 ops/s
# Warmup Iteration  14: 617699.266 ops/s
# Warmup Iteration  15: 617038.646 ops/s
# Warmup Iteration  16: 617034.374 ops/s
# Warmup Iteration  17: 642276.710 ops/s
# Warmup Iteration  18: 642961.889 ops/s
# Warmup Iteration  19: 641852.779 ops/s
# Warmup Iteration  20: 641398.366 ops/s
# Warmup Iteration  21: 641256.721 ops/s
# Warmup Iteration  22: 640760.236 ops/s
# Warmup Iteration  23: 640080.452 ops/s
# Warmup Iteration  24: 642004.607 ops/s
# Warmup Iteration  25: 642302.195 ops/s
# Warmup Iteration  26: 641148.146 ops/s
# Warmup Iteration  27: 641683.183 ops/s
# Warmup Iteration  28: 641285.377 ops/s
# Warmup Iteration  29: 641581.921 ops/s
# Warmup Iteration  30: 640439.680 ops/s
Iteration   1: 640476.008 ops/s
Iteration   2: 642011.873 ops/s
Iteration   3: 642438.299 ops/s
Iteration   4: 639526.023 ops/s
Iteration   5: 644453.828 ops/s
Iteration   6: 643283.397 ops/s
Iteration   7: 639700.516 ops/s
Iteration   8: 640345.464 ops/s
Iteration   9: 643295.309 ops/s
Iteration  10: 641927.893 ops/s
Iteration  11: 640457.432 ops/s
Iteration  12: 641130.345 ops/s
Iteration  13: 639617.788 ops/s
Iteration  14: 640004.964 ops/s
Iteration  15: 642966.060 ops/s
Iteration  16: 642158.043 ops/s
Iteration  17: 644101.987 ops/s
Iteration  18: 642030.496 ops/s
Iteration  19: 644499.512 ops/s
Iteration  20: 641334.195 ops/s
Iteration  21: 640515.831 ops/s
Iteration  22: 644129.081 ops/s
Iteration  23: 641585.641 ops/s
Iteration  24: 642313.334 ops/s
Iteration  25: 641017.292 ops/s
Iteration  26: 642249.325 ops/s
Iteration  27: 644075.980 ops/s
Iteration  28: 639175.813 ops/s
Iteration  29: 640946.549 ops/s
Iteration  30: 643009.461 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  641825.925 ±(99.9%) 1055.724 ops/s [Average]
  (min, avg, max) = (639175.813, 641825.925, 644499.512), stdev = 1580.158
  CI (99.9%): [640770.200, 642881.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  641825.925 ± 1055.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy_with_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy_with_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 922351.391 ops/s
# Warmup Iteration   2: 1510307.715 ops/s
# Warmup Iteration   3: 1846556.100 ops/s
# Warmup Iteration   4: 1854881.964 ops/s
# Warmup Iteration   5: 1854696.655 ops/s
# Warmup Iteration   6: 1859849.582 ops/s
# Warmup Iteration   7: 1533214.346 ops/s
# Warmup Iteration   8: 1862504.385 ops/s
# Warmup Iteration   9: 1860727.322 ops/s
# Warmup Iteration  10: 1860966.397 ops/s
# Warmup Iteration  11: 1858235.887 ops/s
# Warmup Iteration  12: 1859635.920 ops/s
# Warmup Iteration  13: 1857917.094 ops/s
# Warmup Iteration  14: 1859658.793 ops/s
# Warmup Iteration  15: 1859458.726 ops/s
# Warmup Iteration  16: 1858146.167 ops/s
# Warmup Iteration  17: 1863063.577 ops/s
# Warmup Iteration  18: 1864384.656 ops/s
# Warmup Iteration  19: 1866745.446 ops/s
# Warmup Iteration  20: 1863262.015 ops/s
# Warmup Iteration  21: 1861951.236 ops/s
# Warmup Iteration  22: 1862662.640 ops/s
# Warmup Iteration  23: 1864626.002 ops/s
# Warmup Iteration  24: 1866759.398 ops/s
# Warmup Iteration  25: 1865904.172 ops/s
# Warmup Iteration  26: 1860046.278 ops/s
# Warmup Iteration  27: 1863991.286 ops/s
# Warmup Iteration  28: 1865667.524 ops/s
# Warmup Iteration  29: 1863405.618 ops/s
# Warmup Iteration  30: 1865843.414 ops/s
Iteration   1: 1861938.128 ops/s
Iteration   2: 1862770.232 ops/s
Iteration   3: 1862491.578 ops/s
Iteration   4: 1858721.510 ops/s
Iteration   5: 1866851.219 ops/s
Iteration   6: 1866196.352 ops/s
Iteration   7: 1866776.591 ops/s
Iteration   8: 1868299.239 ops/s
Iteration   9: 1863110.551 ops/s
Iteration  10: 1873828.409 ops/s
Iteration  11: 1869740.979 ops/s
Iteration  12: 1867248.126 ops/s
Iteration  13: 1860584.676 ops/s
Iteration  14: 1870249.055 ops/s
Iteration  15: 1864594.816 ops/s
Iteration  16: 1866585.958 ops/s
Iteration  17: 1856506.353 ops/s
Iteration  18: 1869691.925 ops/s
Iteration  19: 1869858.293 ops/s
Iteration  20: 1857341.730 ops/s
Iteration  21: 1859460.378 ops/s
Iteration  22: 1868744.155 ops/s
Iteration  23: 1857754.913 ops/s
Iteration  24: 1866016.251 ops/s
Iteration  25: 1860835.200 ops/s
Iteration  26: 1870790.207 ops/s
Iteration  27: 1860777.869 ops/s
Iteration  28: 1864584.107 ops/s
Iteration  29: 1866204.600 ops/s
Iteration  30: 1868220.825 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_groupBy_with_target":
  1864892.474 ±(99.9%) 3020.464 ops/s [Average]
  (min, avg, max) = (1856506.353, 1864892.474, 1873828.409), stdev = 4520.889
  CI (99.9%): [1861872.010, 1867912.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_groupBy_with_target  thrpt   30  1864892.474 ± 3020.464  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 652769.407 ops/s
# Warmup Iteration   2: 1026523.131 ops/s
# Warmup Iteration   3: 1237906.018 ops/s
# Warmup Iteration   4: 1246738.604 ops/s
# Warmup Iteration   5: 1251005.606 ops/s
# Warmup Iteration   6: 1248822.679 ops/s
# Warmup Iteration   7: 1018740.532 ops/s
# Warmup Iteration   8: 1242184.121 ops/s
# Warmup Iteration   9: 1243465.837 ops/s
# Warmup Iteration  10: 1242884.631 ops/s
# Warmup Iteration  11: 1248123.547 ops/s
# Warmup Iteration  12: 1243077.589 ops/s
# Warmup Iteration  13: 1246077.840 ops/s
# Warmup Iteration  14: 1245077.763 ops/s
# Warmup Iteration  15: 1245736.747 ops/s
# Warmup Iteration  16: 1247329.528 ops/s
# Warmup Iteration  17: 1245803.421 ops/s
# Warmup Iteration  18: 1242530.912 ops/s
# Warmup Iteration  19: 1245313.257 ops/s
# Warmup Iteration  20: 1244596.519 ops/s
# Warmup Iteration  21: 1243900.873 ops/s
# Warmup Iteration  22: 1245025.629 ops/s
# Warmup Iteration  23: 1242312.020 ops/s
# Warmup Iteration  24: 1246167.522 ops/s
# Warmup Iteration  25: 1248099.003 ops/s
# Warmup Iteration  26: 1246522.396 ops/s
# Warmup Iteration  27: 1244036.853 ops/s
# Warmup Iteration  28: 1243876.068 ops/s
# Warmup Iteration  29: 1245543.552 ops/s
# Warmup Iteration  30: 1245155.826 ops/s
Iteration   1: 1249160.074 ops/s
Iteration   2: 1246729.801 ops/s
Iteration   3: 1242340.579 ops/s
Iteration   4: 1244303.528 ops/s
Iteration   5: 1244003.221 ops/s
Iteration   6: 1249122.988 ops/s
Iteration   7: 1244688.712 ops/s
Iteration   8: 1247808.744 ops/s
Iteration   9: 1244306.869 ops/s
Iteration  10: 1243639.694 ops/s
Iteration  11: 1247577.907 ops/s
Iteration  12: 1244893.122 ops/s
Iteration  13: 1245056.408 ops/s
Iteration  14: 1251063.956 ops/s
Iteration  15: 1246478.250 ops/s
Iteration  16: 1248896.853 ops/s
Iteration  17: 1245056.835 ops/s
Iteration  18: 1245554.651 ops/s
Iteration  19: 1241771.183 ops/s
Iteration  20: 1242711.230 ops/s
Iteration  21: 1243996.946 ops/s
Iteration  22: 1246767.438 ops/s
Iteration  23: 1245261.267 ops/s
Iteration  24: 1244517.770 ops/s
Iteration  25: 1246021.924 ops/s
Iteration  26: 1246345.523 ops/s
Iteration  27: 1248857.040 ops/s
Iteration  28: 1250499.081 ops/s
Iteration  29: 1247343.820 ops/s
Iteration  30: 1244786.013 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectInto":
  1245985.381 ±(99.9%) 1577.899 ops/s [Average]
  (min, avg, max) = (1241771.183, 1245985.381, 1251063.956), stdev = 2361.726
  CI (99.9%): [1244407.482, 1247563.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_injectInto  thrpt   30  1245985.381 ± 1577.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799468.636 ops/s
# Warmup Iteration   2: 1311528.667 ops/s
# Warmup Iteration   3: 1563322.914 ops/s
# Warmup Iteration   4: 1573017.157 ops/s
# Warmup Iteration   5: 1574326.206 ops/s
# Warmup Iteration   6: 1332902.705 ops/s
# Warmup Iteration   7: 1524905.870 ops/s
# Warmup Iteration   8: 1565335.544 ops/s
# Warmup Iteration   9: 1576507.121 ops/s
# Warmup Iteration  10: 1574336.187 ops/s
# Warmup Iteration  11: 1576324.699 ops/s
# Warmup Iteration  12: 1576005.972 ops/s
# Warmup Iteration  13: 1575591.299 ops/s
# Warmup Iteration  14: 1577643.274 ops/s
# Warmup Iteration  15: 1578624.157 ops/s
# Warmup Iteration  16: 1575009.653 ops/s
# Warmup Iteration  17: 1572598.310 ops/s
# Warmup Iteration  18: 1574552.154 ops/s
# Warmup Iteration  19: 1576640.281 ops/s
# Warmup Iteration  20: 1576597.248 ops/s
# Warmup Iteration  21: 1569137.530 ops/s
# Warmup Iteration  22: 1570095.389 ops/s
# Warmup Iteration  23: 1576083.718 ops/s
# Warmup Iteration  24: 1574615.277 ops/s
# Warmup Iteration  25: 1575290.228 ops/s
# Warmup Iteration  26: 1570689.180 ops/s
# Warmup Iteration  27: 1575813.344 ops/s
# Warmup Iteration  28: 1572552.200 ops/s
# Warmup Iteration  29: 1573591.105 ops/s
# Warmup Iteration  30: 1572654.430 ops/s
Iteration   1: 1569519.698 ops/s
Iteration   2: 1573378.107 ops/s
Iteration   3: 1575223.886 ops/s
Iteration   4: 1571519.250 ops/s
Iteration   5: 1572715.321 ops/s
Iteration   6: 1565480.105 ops/s
Iteration   7: 1578218.883 ops/s
Iteration   8: 1570558.858 ops/s
Iteration   9: 1573750.420 ops/s
Iteration  10: 1571938.713 ops/s
Iteration  11: 1575117.025 ops/s
Iteration  12: 1571138.096 ops/s
Iteration  13: 1576096.378 ops/s
Iteration  14: 1567896.905 ops/s
Iteration  15: 1570907.393 ops/s
Iteration  16: 1575654.910 ops/s
Iteration  17: 1576941.654 ops/s
Iteration  18: 1573104.493 ops/s
Iteration  19: 1576099.381 ops/s
Iteration  20: 1571447.317 ops/s
Iteration  21: 1575760.187 ops/s
Iteration  22: 1574811.077 ops/s
Iteration  23: 1571044.007 ops/s
Iteration  24: 1572509.626 ops/s
Iteration  25: 1577891.440 ops/s
Iteration  26: 1567727.320 ops/s
Iteration  27: 1568878.148 ops/s
Iteration  28: 1574152.926 ops/s
Iteration  29: 1573938.392 ops/s
Iteration  30: 1574199.887 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoDouble":
  1572920.660 ±(99.9%) 2078.315 ops/s [Average]
  (min, avg, max) = (1565480.105, 1572920.660, 1578218.883), stdev = 3110.724
  CI (99.9%): [1570842.346, 1574998.975] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  1572920.660 ± 2078.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807831.953 ops/s
# Warmup Iteration   2: 1287925.536 ops/s
# Warmup Iteration   3: 1534368.370 ops/s
# Warmup Iteration   4: 1546436.918 ops/s
# Warmup Iteration   5: 1547455.466 ops/s
# Warmup Iteration   6: 1453754.355 ops/s
# Warmup Iteration   7: 1355854.504 ops/s
# Warmup Iteration   8: 1544402.165 ops/s
# Warmup Iteration   9: 1547506.456 ops/s
# Warmup Iteration  10: 1543356.013 ops/s
# Warmup Iteration  11: 1545532.235 ops/s
# Warmup Iteration  12: 1543925.385 ops/s
# Warmup Iteration  13: 1545919.632 ops/s
# Warmup Iteration  14: 1549237.236 ops/s
# Warmup Iteration  15: 1546836.533 ops/s
# Warmup Iteration  16: 1545508.171 ops/s
# Warmup Iteration  17: 1547171.581 ops/s
# Warmup Iteration  18: 1547094.874 ops/s
# Warmup Iteration  19: 1548187.902 ops/s
# Warmup Iteration  20: 1549051.453 ops/s
# Warmup Iteration  21: 1550231.597 ops/s
# Warmup Iteration  22: 1549491.822 ops/s
# Warmup Iteration  23: 1543253.265 ops/s
# Warmup Iteration  24: 1547634.726 ops/s
# Warmup Iteration  25: 1548262.553 ops/s
# Warmup Iteration  26: 1548809.976 ops/s
# Warmup Iteration  27: 1545199.912 ops/s
# Warmup Iteration  28: 1546701.350 ops/s
# Warmup Iteration  29: 1549328.115 ops/s
# Warmup Iteration  30: 1550215.750 ops/s
Iteration   1: 1546517.303 ops/s
Iteration   2: 1545077.373 ops/s
Iteration   3: 1551428.410 ops/s
Iteration   4: 1548577.286 ops/s
Iteration   5: 1542902.077 ops/s
Iteration   6: 1545102.234 ops/s
Iteration   7: 1547503.666 ops/s
Iteration   8: 1550879.840 ops/s
Iteration   9: 1548972.092 ops/s
Iteration  10: 1545137.036 ops/s
Iteration  11: 1543833.248 ops/s
Iteration  12: 1548819.853 ops/s
Iteration  13: 1545815.228 ops/s
Iteration  14: 1545973.832 ops/s
Iteration  15: 1545354.751 ops/s
Iteration  16: 1548504.460 ops/s
Iteration  17: 1541238.066 ops/s
Iteration  18: 1546876.240 ops/s
Iteration  19: 1543704.426 ops/s
Iteration  20: 1548134.400 ops/s
Iteration  21: 1544345.464 ops/s
Iteration  22: 1547387.335 ops/s
Iteration  23: 1546744.950 ops/s
Iteration  24: 1552902.567 ops/s
Iteration  25: 1547689.925 ops/s
Iteration  26: 1549069.869 ops/s
Iteration  27: 1544961.308 ops/s
Iteration  28: 1546434.847 ops/s
Iteration  29: 1543874.382 ops/s
Iteration  30: 1545760.071 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoFloat":
  1546650.751 ±(99.9%) 1728.944 ops/s [Average]
  (min, avg, max) = (1541238.066, 1546650.751, 1552902.567), stdev = 2587.802
  CI (99.9%): [1544921.807, 1548379.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  1546650.751 ± 1728.944  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802521.177 ops/s
# Warmup Iteration   2: 1350077.751 ops/s
# Warmup Iteration   3: 1609705.382 ops/s
# Warmup Iteration   4: 1624866.313 ops/s
# Warmup Iteration   5: 1617471.707 ops/s
# Warmup Iteration   6: 1310693.723 ops/s
# Warmup Iteration   7: 1622674.000 ops/s
# Warmup Iteration   8: 1625170.425 ops/s
# Warmup Iteration   9: 1623092.252 ops/s
# Warmup Iteration  10: 1620560.831 ops/s
# Warmup Iteration  11: 1625437.751 ops/s
# Warmup Iteration  12: 1623534.511 ops/s
# Warmup Iteration  13: 1625349.001 ops/s
# Warmup Iteration  14: 1622098.251 ops/s
# Warmup Iteration  15: 1622784.145 ops/s
# Warmup Iteration  16: 1621588.673 ops/s
# Warmup Iteration  17: 1622722.015 ops/s
# Warmup Iteration  18: 1628173.985 ops/s
# Warmup Iteration  19: 1621344.233 ops/s
# Warmup Iteration  20: 1618765.583 ops/s
# Warmup Iteration  21: 1623429.351 ops/s
# Warmup Iteration  22: 1623980.457 ops/s
# Warmup Iteration  23: 1622713.921 ops/s
# Warmup Iteration  24: 1627435.736 ops/s
# Warmup Iteration  25: 1625483.926 ops/s
# Warmup Iteration  26: 1624013.054 ops/s
# Warmup Iteration  27: 1625126.231 ops/s
# Warmup Iteration  28: 1623738.954 ops/s
# Warmup Iteration  29: 1621547.637 ops/s
# Warmup Iteration  30: 1621007.590 ops/s
Iteration   1: 1625203.630 ops/s
Iteration   2: 1626394.079 ops/s
Iteration   3: 1629009.583 ops/s
Iteration   4: 1622617.801 ops/s
Iteration   5: 1620129.574 ops/s
Iteration   6: 1622100.217 ops/s
Iteration   7: 1625848.700 ops/s
Iteration   8: 1622243.306 ops/s
Iteration   9: 1623322.824 ops/s
Iteration  10: 1619916.518 ops/s
Iteration  11: 1623949.465 ops/s
Iteration  12: 1619149.886 ops/s
Iteration  13: 1625354.344 ops/s
Iteration  14: 1628200.949 ops/s
Iteration  15: 1618544.234 ops/s
Iteration  16: 1621310.920 ops/s
Iteration  17: 1626501.072 ops/s
Iteration  18: 1621719.576 ops/s
Iteration  19: 1622636.554 ops/s
Iteration  20: 1627367.218 ops/s
Iteration  21: 1622489.455 ops/s
Iteration  22: 1625648.253 ops/s
Iteration  23: 1622552.415 ops/s
Iteration  24: 1624109.777 ops/s
Iteration  25: 1623991.693 ops/s
Iteration  26: 1629538.988 ops/s
Iteration  27: 1624617.136 ops/s
Iteration  28: 1627845.121 ops/s
Iteration  29: 1618778.548 ops/s
Iteration  30: 1627362.316 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoInt":
  1623948.472 ±(99.9%) 2048.066 ops/s [Average]
  (min, avg, max) = (1618544.234, 1623948.472, 1629538.988), stdev = 3065.449
  CI (99.9%): [1621900.406, 1625996.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  1623948.472 ± 2048.066  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 807982.177 ops/s
# Warmup Iteration   2: 1325526.771 ops/s
# Warmup Iteration   3: 1574494.344 ops/s
# Warmup Iteration   4: 1586695.953 ops/s
# Warmup Iteration   5: 1583569.318 ops/s
# Warmup Iteration   6: 1314494.125 ops/s
# Warmup Iteration   7: 1564838.284 ops/s
# Warmup Iteration   8: 1589477.292 ops/s
# Warmup Iteration   9: 1589376.385 ops/s
# Warmup Iteration  10: 1591581.473 ops/s
# Warmup Iteration  11: 1589593.428 ops/s
# Warmup Iteration  12: 1587174.500 ops/s
# Warmup Iteration  13: 1583862.495 ops/s
# Warmup Iteration  14: 1589069.092 ops/s
# Warmup Iteration  15: 1585917.177 ops/s
# Warmup Iteration  16: 1586314.888 ops/s
# Warmup Iteration  17: 1588043.196 ops/s
# Warmup Iteration  18: 1584427.660 ops/s
# Warmup Iteration  19: 1587092.022 ops/s
# Warmup Iteration  20: 1584491.032 ops/s
# Warmup Iteration  21: 1589842.754 ops/s
# Warmup Iteration  22: 1587480.874 ops/s
# Warmup Iteration  23: 1588244.478 ops/s
# Warmup Iteration  24: 1588802.981 ops/s
# Warmup Iteration  25: 1587839.507 ops/s
# Warmup Iteration  26: 1584122.488 ops/s
# Warmup Iteration  27: 1583652.338 ops/s
# Warmup Iteration  28: 1584728.317 ops/s
# Warmup Iteration  29: 1584791.650 ops/s
# Warmup Iteration  30: 1584573.487 ops/s
Iteration   1: 1582176.593 ops/s
Iteration   2: 1586182.599 ops/s
Iteration   3: 1585686.503 ops/s
Iteration   4: 1582708.567 ops/s
Iteration   5: 1586490.372 ops/s
Iteration   6: 1580435.743 ops/s
Iteration   7: 1589889.428 ops/s
Iteration   8: 1580604.832 ops/s
Iteration   9: 1590772.481 ops/s
Iteration  10: 1589607.780 ops/s
Iteration  11: 1588271.727 ops/s
Iteration  12: 1587953.751 ops/s
Iteration  13: 1591806.448 ops/s
Iteration  14: 1589199.240 ops/s
Iteration  15: 1586907.433 ops/s
Iteration  16: 1587711.976 ops/s
Iteration  17: 1585899.155 ops/s
Iteration  18: 1593991.270 ops/s
Iteration  19: 1581688.115 ops/s
Iteration  20: 1584364.504 ops/s
Iteration  21: 1592916.140 ops/s
Iteration  22: 1589088.528 ops/s
Iteration  23: 1586816.580 ops/s
Iteration  24: 1589155.500 ops/s
Iteration  25: 1589072.328 ops/s
Iteration  26: 1591158.941 ops/s
Iteration  27: 1583550.832 ops/s
Iteration  28: 1584578.841 ops/s
Iteration  29: 1594751.603 ops/s
Iteration  30: 1591595.906 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoLong":
  1587501.124 ±(99.9%) 2575.679 ops/s [Average]
  (min, avg, max) = (1580435.743, 1587501.124, 1594751.603), stdev = 3855.156
  CI (99.9%): [1584925.444, 1590076.803] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  1587501.124 ± 2575.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1182045.258 ops/s
# Warmup Iteration   2: 2745252.054 ops/s
# Warmup Iteration   3: 2576834.873 ops/s
# Warmup Iteration   4: 2490388.248 ops/s
# Warmup Iteration   5: 2769736.604 ops/s
# Warmup Iteration   6: 2769041.613 ops/s
# Warmup Iteration   7: 2777658.283 ops/s
# Warmup Iteration   8: 2776099.425 ops/s
# Warmup Iteration   9: 2773257.310 ops/s
# Warmup Iteration  10: 2774236.279 ops/s
# Warmup Iteration  11: 2776698.492 ops/s
# Warmup Iteration  12: 2770933.018 ops/s
# Warmup Iteration  13: 2767913.103 ops/s
# Warmup Iteration  14: 2776628.673 ops/s
# Warmup Iteration  15: 2764286.536 ops/s
# Warmup Iteration  16: 2766150.355 ops/s
# Warmup Iteration  17: 2767833.910 ops/s
# Warmup Iteration  18: 2771941.475 ops/s
# Warmup Iteration  19: 2769382.421 ops/s
# Warmup Iteration  20: 2767889.885 ops/s
# Warmup Iteration  21: 2767755.982 ops/s
# Warmup Iteration  22: 2762194.160 ops/s
# Warmup Iteration  23: 2767014.484 ops/s
# Warmup Iteration  24: 2769424.367 ops/s
# Warmup Iteration  25: 2755544.010 ops/s
# Warmup Iteration  26: 2764421.325 ops/s
# Warmup Iteration  27: 2774500.005 ops/s
# Warmup Iteration  28: 2772145.836 ops/s
# Warmup Iteration  29: 2775099.127 ops/s
# Warmup Iteration  30: 2765278.064 ops/s
Iteration   1: 2777637.427 ops/s
Iteration   2: 2774764.851 ops/s
Iteration   3: 2772677.985 ops/s
Iteration   4: 2765367.473 ops/s
Iteration   5: 2769916.447 ops/s
Iteration   6: 2757401.755 ops/s
Iteration   7: 2773563.017 ops/s
Iteration   8: 2760635.143 ops/s
Iteration   9: 2763327.742 ops/s
Iteration  10: 2763116.134 ops/s
Iteration  11: 2761983.359 ops/s
Iteration  12: 2770935.788 ops/s
Iteration  13: 2766602.500 ops/s
Iteration  14: 2772928.765 ops/s
Iteration  15: 2766025.164 ops/s
Iteration  16: 2776888.463 ops/s
Iteration  17: 2768847.151 ops/s
Iteration  18: 2772082.545 ops/s
Iteration  19: 2766591.948 ops/s
Iteration  20: 2766751.169 ops/s
Iteration  21: 2753952.125 ops/s
Iteration  22: 2768307.383 ops/s
Iteration  23: 2765896.155 ops/s
Iteration  24: 2767670.330 ops/s
Iteration  25: 2770961.513 ops/s
Iteration  26: 2758319.648 ops/s
Iteration  27: 2778737.665 ops/s
Iteration  28: 2772887.027 ops/s
Iteration  29: 2762115.866 ops/s
Iteration  30: 2754349.709 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_isEmpty":
  2767374.742 ±(99.9%) 4372.452 ops/s [Average]
  (min, avg, max) = (2753952.125, 2767374.742, 2778737.665), stdev = 6544.481
  CI (99.9%): [2763002.289, 2771747.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_isEmpty  thrpt   30  2767374.742 ± 4372.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 447593.326 ops/s
# Warmup Iteration   2: 528574.589 ops/s
# Warmup Iteration   3: 689021.197 ops/s
# Warmup Iteration   4: 691866.282 ops/s
# Warmup Iteration   5: 685875.517 ops/s
# Warmup Iteration   6: 689212.038 ops/s
# Warmup Iteration   7: 689934.621 ops/s
# Warmup Iteration   8: 691092.574 ops/s
# Warmup Iteration   9: 690937.781 ops/s
# Warmup Iteration  10: 575941.483 ops/s
# Warmup Iteration  11: 692463.098 ops/s
# Warmup Iteration  12: 690495.204 ops/s
# Warmup Iteration  13: 690325.120 ops/s
# Warmup Iteration  14: 691547.580 ops/s
# Warmup Iteration  15: 690408.215 ops/s
# Warmup Iteration  16: 692026.478 ops/s
# Warmup Iteration  17: 728633.774 ops/s
# Warmup Iteration  18: 724858.450 ops/s
# Warmup Iteration  19: 723302.505 ops/s
# Warmup Iteration  20: 725039.666 ops/s
# Warmup Iteration  21: 723302.848 ops/s
# Warmup Iteration  22: 727622.813 ops/s
# Warmup Iteration  23: 724231.067 ops/s
# Warmup Iteration  24: 726550.484 ops/s
# Warmup Iteration  25: 727147.104 ops/s
# Warmup Iteration  26: 727541.309 ops/s
# Warmup Iteration  27: 726688.922 ops/s
# Warmup Iteration  28: 724807.043 ops/s
# Warmup Iteration  29: 723947.131 ops/s
# Warmup Iteration  30: 725003.758 ops/s
Iteration   1: 725372.843 ops/s
Iteration   2: 725410.171 ops/s
Iteration   3: 725475.650 ops/s
Iteration   4: 725308.787 ops/s
Iteration   5: 725662.873 ops/s
Iteration   6: 725850.133 ops/s
Iteration   7: 724731.328 ops/s
Iteration   8: 727309.127 ops/s
Iteration   9: 725215.708 ops/s
Iteration  10: 726014.623 ops/s
Iteration  11: 726545.818 ops/s
Iteration  12: 729254.455 ops/s
Iteration  13: 728301.155 ops/s
Iteration  14: 727843.219 ops/s
Iteration  15: 727522.703 ops/s
Iteration  16: 726561.801 ops/s
Iteration  17: 725855.197 ops/s
Iteration  18: 728071.934 ops/s
Iteration  19: 723980.240 ops/s
Iteration  20: 727425.391 ops/s
Iteration  21: 727952.706 ops/s
Iteration  22: 727512.287 ops/s
Iteration  23: 725216.392 ops/s
Iteration  24: 726011.477 ops/s
Iteration  25: 724050.052 ops/s
Iteration  26: 725246.441 ops/s
Iteration  27: 726091.638 ops/s
Iteration  28: 726877.428 ops/s
Iteration  29: 727241.902 ops/s
Iteration  30: 725244.297 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator":
  726305.259 ±(99.9%) 871.914 ops/s [Average]
  (min, avg, max) = (723980.240, 726305.259, 729254.455), stdev = 1305.040
  CI (99.9%): [725433.345, 727177.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_iterator  thrpt   30  726305.259 ± 871.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 800399.499 ops/s
# Warmup Iteration   2: 819463.291 ops/s
# Warmup Iteration   3: 964228.972 ops/s
# Warmup Iteration   4: 1024577.042 ops/s
# Warmup Iteration   5: 1025391.702 ops/s
# Warmup Iteration   6: 1027255.509 ops/s
# Warmup Iteration   7: 1027343.096 ops/s
# Warmup Iteration   8: 1022598.393 ops/s
# Warmup Iteration   9: 1029960.351 ops/s
# Warmup Iteration  10: 1024736.537 ops/s
# Warmup Iteration  11: 1030432.491 ops/s
# Warmup Iteration  12: 1029958.421 ops/s
# Warmup Iteration  13: 1023399.653 ops/s
# Warmup Iteration  14: 863380.058 ops/s
# Warmup Iteration  15: 1029785.796 ops/s
# Warmup Iteration  16: 1031099.290 ops/s
# Warmup Iteration  17: 1091076.256 ops/s
# Warmup Iteration  18: 1091662.320 ops/s
# Warmup Iteration  19: 1092053.901 ops/s
# Warmup Iteration  20: 1089734.983 ops/s
# Warmup Iteration  21: 1093785.421 ops/s
# Warmup Iteration  22: 1088843.216 ops/s
# Warmup Iteration  23: 1090442.601 ops/s
# Warmup Iteration  24: 1090577.081 ops/s
# Warmup Iteration  25: 1092525.496 ops/s
# Warmup Iteration  26: 1090514.425 ops/s
# Warmup Iteration  27: 1089345.230 ops/s
# Warmup Iteration  28: 1093600.589 ops/s
# Warmup Iteration  29: 1093067.146 ops/s
# Warmup Iteration  30: 1087871.535 ops/s
Iteration   1: 1089219.032 ops/s
Iteration   2: 1087989.324 ops/s
Iteration   3: 1085910.259 ops/s
Iteration   4: 1091979.410 ops/s
Iteration   5: 1087143.885 ops/s
Iteration   6: 1090860.144 ops/s
Iteration   7: 1089123.795 ops/s
Iteration   8: 1091263.941 ops/s
Iteration   9: 1092609.667 ops/s
Iteration  10: 1094150.146 ops/s
Iteration  11: 1090158.496 ops/s
Iteration  12: 1093141.953 ops/s
Iteration  13: 1096781.902 ops/s
Iteration  14: 1091031.105 ops/s
Iteration  15: 1086524.088 ops/s
Iteration  16: 1098546.976 ops/s
Iteration  17: 1093021.541 ops/s
Iteration  18: 1086871.170 ops/s
Iteration  19: 1091949.464 ops/s
Iteration  20: 1092254.389 ops/s
Iteration  21: 1094034.211 ops/s
Iteration  22: 1091759.648 ops/s
Iteration  23: 1090054.270 ops/s
Iteration  24: 1090392.826 ops/s
Iteration  25: 1087845.977 ops/s
Iteration  26: 1091688.882 ops/s
Iteration  27: 1088908.018 ops/s
Iteration  28: 1091734.594 ops/s
Iteration  29: 1092143.901 ops/s
Iteration  30: 1088570.835 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iteratorRemove":
  1090922.128 ±(99.9%) 1933.326 ops/s [Average]
  (min, avg, max) = (1085910.259, 1090922.128, 1098546.976), stdev = 2893.712
  CI (99.9%): [1088988.802, 1092855.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  1090922.128 ± 1933.326  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 509987.872 ops/s
# Warmup Iteration   2: 545390.466 ops/s
# Warmup Iteration   3: 693331.143 ops/s
# Warmup Iteration   4: 717827.377 ops/s
# Warmup Iteration   5: 720911.750 ops/s
# Warmup Iteration   6: 713532.068 ops/s
# Warmup Iteration   7: 717607.572 ops/s
# Warmup Iteration   8: 717138.650 ops/s
# Warmup Iteration   9: 717196.964 ops/s
# Warmup Iteration  10: 719509.520 ops/s
# Warmup Iteration  11: 719982.035 ops/s
# Warmup Iteration  12: 663589.345 ops/s
# Warmup Iteration  13: 654988.842 ops/s
# Warmup Iteration  14: 720858.546 ops/s
# Warmup Iteration  15: 720666.931 ops/s
# Warmup Iteration  16: 722705.208 ops/s
# Warmup Iteration  17: 753954.548 ops/s
# Warmup Iteration  18: 753712.075 ops/s
# Warmup Iteration  19: 753723.808 ops/s
# Warmup Iteration  20: 754830.951 ops/s
# Warmup Iteration  21: 753095.300 ops/s
# Warmup Iteration  22: 753703.429 ops/s
# Warmup Iteration  23: 753522.911 ops/s
# Warmup Iteration  24: 753642.855 ops/s
# Warmup Iteration  25: 756041.519 ops/s
# Warmup Iteration  26: 757807.178 ops/s
# Warmup Iteration  27: 752766.030 ops/s
# Warmup Iteration  28: 753380.543 ops/s
# Warmup Iteration  29: 753358.541 ops/s
# Warmup Iteration  30: 754498.082 ops/s
Iteration   1: 753827.431 ops/s
Iteration   2: 753576.956 ops/s
Iteration   3: 755323.622 ops/s
Iteration   4: 752785.115 ops/s
Iteration   5: 754734.059 ops/s
Iteration   6: 753903.210 ops/s
Iteration   7: 756381.053 ops/s
Iteration   8: 752711.226 ops/s
Iteration   9: 755335.298 ops/s
Iteration  10: 755094.385 ops/s
Iteration  11: 755681.939 ops/s
Iteration  12: 756523.603 ops/s
Iteration  13: 754174.033 ops/s
Iteration  14: 753763.698 ops/s
Iteration  15: 752404.300 ops/s
Iteration  16: 755923.823 ops/s
Iteration  17: 754936.377 ops/s
Iteration  18: 755253.219 ops/s
Iteration  19: 756685.892 ops/s
Iteration  20: 755318.205 ops/s
Iteration  21: 755369.312 ops/s
Iteration  22: 756820.446 ops/s
Iteration  23: 753604.215 ops/s
Iteration  24: 756469.510 ops/s
Iteration  25: 755544.973 ops/s
Iteration  26: 754487.356 ops/s
Iteration  27: 756830.745 ops/s
Iteration  28: 757000.102 ops/s
Iteration  29: 754601.617 ops/s
Iteration  30: 754108.289 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_iterator_throws":
  754972.467 ±(99.9%) 868.033 ops/s [Average]
  (min, avg, max) = (752404.300, 754972.467, 757000.102), stdev = 1299.232
  CI (99.9%): [754104.433, 755840.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  754972.467 ± 868.033  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 458201.608 ops/s
# Warmup Iteration   2: 1121637.646 ops/s
# Warmup Iteration   3: 1127980.127 ops/s
# Warmup Iteration   4: 945286.659 ops/s
# Warmup Iteration   5: 1124263.163 ops/s
# Warmup Iteration   6: 1128571.568 ops/s
# Warmup Iteration   7: 1126807.719 ops/s
# Warmup Iteration   8: 1126773.000 ops/s
# Warmup Iteration   9: 1125807.191 ops/s
# Warmup Iteration  10: 1127247.178 ops/s
# Warmup Iteration  11: 1125503.076 ops/s
# Warmup Iteration  12: 1125561.675 ops/s
# Warmup Iteration  13: 1123776.180 ops/s
# Warmup Iteration  14: 1124988.146 ops/s
# Warmup Iteration  15: 1125362.652 ops/s
# Warmup Iteration  16: 1127741.358 ops/s
# Warmup Iteration  17: 1126500.780 ops/s
# Warmup Iteration  18: 1127052.543 ops/s
# Warmup Iteration  19: 1124885.925 ops/s
# Warmup Iteration  20: 1128030.628 ops/s
# Warmup Iteration  21: 1127628.774 ops/s
# Warmup Iteration  22: 1124540.611 ops/s
# Warmup Iteration  23: 1124489.732 ops/s
# Warmup Iteration  24: 1121160.492 ops/s
# Warmup Iteration  25: 1124940.131 ops/s
# Warmup Iteration  26: 1126088.304 ops/s
# Warmup Iteration  27: 1125218.868 ops/s
# Warmup Iteration  28: 1123059.510 ops/s
# Warmup Iteration  29: 1122527.474 ops/s
# Warmup Iteration  30: 1122840.567 ops/s
Iteration   1: 1128798.266 ops/s
Iteration   2: 1126242.933 ops/s
Iteration   3: 1125497.493 ops/s
Iteration   4: 1123601.710 ops/s
Iteration   5: 1123321.401 ops/s
Iteration   6: 1121834.865 ops/s
Iteration   7: 1123871.673 ops/s
Iteration   8: 1118541.919 ops/s
Iteration   9: 1120298.069 ops/s
Iteration  10: 1118561.778 ops/s
Iteration  11: 1123824.273 ops/s
Iteration  12: 1124790.850 ops/s
Iteration  13: 1119913.953 ops/s
Iteration  14: 1124763.911 ops/s
Iteration  15: 1123800.780 ops/s
Iteration  16: 1126752.877 ops/s
Iteration  17: 1124315.223 ops/s
Iteration  18: 1129264.394 ops/s
Iteration  19: 1120593.476 ops/s
Iteration  20: 1126544.780 ops/s
Iteration  21: 1129827.652 ops/s
Iteration  22: 1124116.281 ops/s
Iteration  23: 1127653.522 ops/s
Iteration  24: 1119500.598 ops/s
Iteration  25: 1119662.770 ops/s
Iteration  26: 1117022.493 ops/s
Iteration  27: 1124094.141 ops/s
Iteration  28: 1123797.304 ops/s
Iteration  29: 1124668.186 ops/s
Iteration  30: 1127786.909 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeString":
  1123775.483 ±(99.9%) 2248.723 ops/s [Average]
  (min, avg, max) = (1117022.493, 1123775.483, 1129827.652), stdev = 3365.783
  CI (99.9%): [1121526.760, 1126024.206] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_makeString  thrpt   30  1123775.483 ± 2248.723  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 970789.959 ops/s
# Warmup Iteration   2: 2277347.809 ops/s
# Warmup Iteration   3: 2287401.586 ops/s
# Warmup Iteration   4: 1895909.118 ops/s
# Warmup Iteration   5: 2284624.649 ops/s
# Warmup Iteration   6: 2281395.213 ops/s
# Warmup Iteration   7: 2276493.964 ops/s
# Warmup Iteration   8: 2281370.697 ops/s
# Warmup Iteration   9: 2283641.669 ops/s
# Warmup Iteration  10: 2290526.601 ops/s
# Warmup Iteration  11: 2276065.456 ops/s
# Warmup Iteration  12: 2286931.690 ops/s
# Warmup Iteration  13: 2286874.088 ops/s
# Warmup Iteration  14: 2290915.447 ops/s
# Warmup Iteration  15: 2279413.863 ops/s
# Warmup Iteration  16: 2290931.471 ops/s
# Warmup Iteration  17: 2285099.505 ops/s
# Warmup Iteration  18: 2287550.020 ops/s
# Warmup Iteration  19: 2282650.899 ops/s
# Warmup Iteration  20: 2283115.018 ops/s
# Warmup Iteration  21: 2285651.266 ops/s
# Warmup Iteration  22: 2285658.886 ops/s
# Warmup Iteration  23: 2277570.999 ops/s
# Warmup Iteration  24: 2281229.279 ops/s
# Warmup Iteration  25: 2278981.615 ops/s
# Warmup Iteration  26: 2275266.405 ops/s
# Warmup Iteration  27: 2287456.933 ops/s
# Warmup Iteration  28: 2282611.909 ops/s
# Warmup Iteration  29: 2283036.762 ops/s
# Warmup Iteration  30: 2280563.182 ops/s
Iteration   1: 2289294.539 ops/s
Iteration   2: 2288071.816 ops/s
Iteration   3: 2278186.232 ops/s
Iteration   4: 2283621.119 ops/s
Iteration   5: 2288783.053 ops/s
Iteration   6: 2277935.567 ops/s
Iteration   7: 2276560.254 ops/s
Iteration   8: 2285202.388 ops/s
Iteration   9: 2287047.185 ops/s
Iteration  10: 2275547.514 ops/s
Iteration  11: 2283786.561 ops/s
Iteration  12: 2275220.060 ops/s
Iteration  13: 2282842.625 ops/s
Iteration  14: 2282640.760 ops/s
Iteration  15: 2276894.188 ops/s
Iteration  16: 2289050.277 ops/s
Iteration  17: 2278560.016 ops/s
Iteration  18: 2277131.228 ops/s
Iteration  19: 2286476.468 ops/s
Iteration  20: 2285126.185 ops/s
Iteration  21: 2282774.731 ops/s
Iteration  22: 2271897.842 ops/s
Iteration  23: 2280347.657 ops/s
Iteration  24: 2281597.919 ops/s
Iteration  25: 2282038.707 ops/s
Iteration  26: 2289174.624 ops/s
Iteration  27: 2287396.144 ops/s
Iteration  28: 2274737.186 ops/s
Iteration  29: 2283767.023 ops/s
Iteration  30: 2278486.569 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2282006.548 ±(99.9%) 3334.788 ops/s [Average]
  (min, avg, max) = (2271897.842, 2282006.548, 2289294.539), stdev = 4991.354
  CI (99.9%): [2278671.760, 2285341.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2282006.548 ± 3334.788  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033302.720 ops/s
# Warmup Iteration   2: 2343452.970 ops/s
# Warmup Iteration   3: 2390424.244 ops/s
# Warmup Iteration   4: 1989293.093 ops/s
# Warmup Iteration   5: 2387939.935 ops/s
# Warmup Iteration   6: 2387900.170 ops/s
# Warmup Iteration   7: 2393727.817 ops/s
# Warmup Iteration   8: 2386467.663 ops/s
# Warmup Iteration   9: 2387989.137 ops/s
# Warmup Iteration  10: 2392464.696 ops/s
# Warmup Iteration  11: 2385423.147 ops/s
# Warmup Iteration  12: 2388248.478 ops/s
# Warmup Iteration  13: 2388400.755 ops/s
# Warmup Iteration  14: 2388532.455 ops/s
# Warmup Iteration  15: 2386331.361 ops/s
# Warmup Iteration  16: 2390862.115 ops/s
# Warmup Iteration  17: 2383289.262 ops/s
# Warmup Iteration  18: 2388304.588 ops/s
# Warmup Iteration  19: 2386398.422 ops/s
# Warmup Iteration  20: 2383184.238 ops/s
# Warmup Iteration  21: 2389554.177 ops/s
# Warmup Iteration  22: 2391359.655 ops/s
# Warmup Iteration  23: 2394064.191 ops/s
# Warmup Iteration  24: 2386419.361 ops/s
# Warmup Iteration  25: 2390554.654 ops/s
# Warmup Iteration  26: 2391651.929 ops/s
# Warmup Iteration  27: 2389820.293 ops/s
# Warmup Iteration  28: 2389408.239 ops/s
# Warmup Iteration  29: 2386293.479 ops/s
# Warmup Iteration  30: 2387105.586 ops/s
Iteration   1: 2384029.762 ops/s
Iteration   2: 2386634.912 ops/s
Iteration   3: 2376642.075 ops/s
Iteration   4: 2386290.552 ops/s
Iteration   5: 2390633.759 ops/s
Iteration   6: 2389558.265 ops/s
Iteration   7: 2373954.708 ops/s
Iteration   8: 2387661.635 ops/s
Iteration   9: 2396268.888 ops/s
Iteration  10: 2391298.206 ops/s
Iteration  11: 2386860.503 ops/s
Iteration  12: 2397764.084 ops/s
Iteration  13: 2388325.714 ops/s
Iteration  14: 2387653.969 ops/s
Iteration  15: 2396900.145 ops/s
Iteration  16: 2392769.250 ops/s
Iteration  17: 2389608.281 ops/s
Iteration  18: 2388916.238 ops/s
Iteration  19: 2383779.936 ops/s
Iteration  20: 2388640.091 ops/s
Iteration  21: 2386733.682 ops/s
Iteration  22: 2393194.055 ops/s
Iteration  23: 2397147.596 ops/s
Iteration  24: 2383764.281 ops/s
Iteration  25: 2383770.262 ops/s
Iteration  26: 2396892.458 ops/s
Iteration  27: 2378215.042 ops/s
Iteration  28: 2395850.959 ops/s
Iteration  29: 2395447.620 ops/s
Iteration  30: 2394590.337 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2388993.242 ±(99.9%) 4133.209 ops/s [Average]
  (min, avg, max) = (2373954.708, 2388993.242, 2397764.084), stdev = 6186.394
  CI (99.9%): [2384860.033, 2393126.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2388993.242 ± 4133.209  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2116217.019 ops/s
# Warmup Iteration   2: 4157246.116 ops/s
# Warmup Iteration   3: 4491078.615 ops/s
# Warmup Iteration   4: 4507081.110 ops/s
# Warmup Iteration   5: 3681667.001 ops/s
# Warmup Iteration   6: 4518767.020 ops/s
# Warmup Iteration   7: 4521359.669 ops/s
# Warmup Iteration   8: 4519755.213 ops/s
# Warmup Iteration   9: 4512140.672 ops/s
# Warmup Iteration  10: 4532488.238 ops/s
# Warmup Iteration  11: 4509515.746 ops/s
# Warmup Iteration  12: 4526445.045 ops/s
# Warmup Iteration  13: 4531768.738 ops/s
# Warmup Iteration  14: 4504761.375 ops/s
# Warmup Iteration  15: 4521364.325 ops/s
# Warmup Iteration  16: 4522083.619 ops/s
# Warmup Iteration  17: 4500191.059 ops/s
# Warmup Iteration  18: 4524869.874 ops/s
# Warmup Iteration  19: 4522593.091 ops/s
# Warmup Iteration  20: 4513130.453 ops/s
# Warmup Iteration  21: 4510055.003 ops/s
# Warmup Iteration  22: 4514353.760 ops/s
# Warmup Iteration  23: 4520581.332 ops/s
# Warmup Iteration  24: 4530897.156 ops/s
# Warmup Iteration  25: 4508268.554 ops/s
# Warmup Iteration  26: 4518905.892 ops/s
# Warmup Iteration  27: 4518956.646 ops/s
# Warmup Iteration  28: 4511238.963 ops/s
# Warmup Iteration  29: 4514455.196 ops/s
# Warmup Iteration  30: 4523534.068 ops/s
Iteration   1: 4520821.615 ops/s
Iteration   2: 4506431.710 ops/s
Iteration   3: 4524309.116 ops/s
Iteration   4: 4506082.867 ops/s
Iteration   5: 4518685.821 ops/s
Iteration   6: 4508167.508 ops/s
Iteration   7: 4489927.469 ops/s
Iteration   8: 4519139.528 ops/s
Iteration   9: 4526628.622 ops/s
Iteration  10: 4519497.486 ops/s
Iteration  11: 4512780.424 ops/s
Iteration  12: 4527102.685 ops/s
Iteration  13: 4493160.343 ops/s
Iteration  14: 4511142.791 ops/s
Iteration  15: 4524143.515 ops/s
Iteration  16: 4525885.802 ops/s
Iteration  17: 4531365.894 ops/s
Iteration  18: 4527341.276 ops/s
Iteration  19: 4515362.660 ops/s
Iteration  20: 4516609.874 ops/s
Iteration  21: 4517853.846 ops/s
Iteration  22: 4521046.615 ops/s
Iteration  23: 4479918.781 ops/s
Iteration  24: 4513877.436 ops/s
Iteration  25: 4522435.088 ops/s
Iteration  26: 4530342.040 ops/s
Iteration  27: 4525478.835 ops/s
Iteration  28: 4526728.059 ops/s
Iteration  29: 4509824.270 ops/s
Iteration  30: 4523550.518 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max":
  4516521.416 ±(99.9%) 8086.484 ops/s [Average]
  (min, avg, max) = (4479918.781, 4516521.416, 4531365.894), stdev = 12103.470
  CI (99.9%): [4508434.932, 4524607.901] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max  thrpt   30  4516521.416 ± 8086.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1648943.890 ops/s
# Warmup Iteration   2: 3576842.047 ops/s
# Warmup Iteration   3: 3636119.129 ops/s
# Warmup Iteration   4: 3400381.311 ops/s
# Warmup Iteration   5: 3253464.534 ops/s
# Warmup Iteration   6: 3652326.051 ops/s
# Warmup Iteration   7: 3653456.473 ops/s
# Warmup Iteration   8: 3659492.007 ops/s
# Warmup Iteration   9: 3655169.399 ops/s
# Warmup Iteration  10: 3648471.508 ops/s
# Warmup Iteration  11: 3649026.808 ops/s
# Warmup Iteration  12: 3650951.430 ops/s
# Warmup Iteration  13: 3663377.494 ops/s
# Warmup Iteration  14: 3658302.704 ops/s
# Warmup Iteration  15: 3649689.755 ops/s
# Warmup Iteration  16: 3658338.639 ops/s
# Warmup Iteration  17: 3657249.802 ops/s
# Warmup Iteration  18: 3652573.822 ops/s
# Warmup Iteration  19: 3649898.592 ops/s
# Warmup Iteration  20: 3664483.295 ops/s
# Warmup Iteration  21: 3656035.138 ops/s
# Warmup Iteration  22: 3658121.737 ops/s
# Warmup Iteration  23: 3663744.920 ops/s
# Warmup Iteration  24: 3662030.713 ops/s
# Warmup Iteration  25: 3665345.017 ops/s
# Warmup Iteration  26: 3665570.802 ops/s
# Warmup Iteration  27: 3665799.233 ops/s
# Warmup Iteration  28: 3660383.453 ops/s
# Warmup Iteration  29: 3662614.841 ops/s
# Warmup Iteration  30: 3654322.411 ops/s
Iteration   1: 3656801.831 ops/s
Iteration   2: 3651370.536 ops/s
Iteration   3: 3656054.610 ops/s
Iteration   4: 3673380.922 ops/s
Iteration   5: 3666443.082 ops/s
Iteration   6: 3662128.134 ops/s
Iteration   7: 3647543.575 ops/s
Iteration   8: 3653817.266 ops/s
Iteration   9: 3659008.964 ops/s
Iteration  10: 3652231.535 ops/s
Iteration  11: 3651267.878 ops/s
Iteration  12: 3668951.577 ops/s
Iteration  13: 3669941.937 ops/s
Iteration  14: 3657116.711 ops/s
Iteration  15: 3662112.095 ops/s
Iteration  16: 3663989.649 ops/s
Iteration  17: 3649947.656 ops/s
Iteration  18: 3659730.389 ops/s
Iteration  19: 3653780.283 ops/s
Iteration  20: 3655099.713 ops/s
Iteration  21: 3672973.801 ops/s
Iteration  22: 3658075.167 ops/s
Iteration  23: 3649807.214 ops/s
Iteration  24: 3657280.352 ops/s
Iteration  25: 3654184.903 ops/s
Iteration  26: 3651076.032 ops/s
Iteration  27: 3658424.228 ops/s
Iteration  28: 3651763.722 ops/s
Iteration  29: 3659228.891 ops/s
Iteration  30: 3656170.323 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy":
  3657990.099 ±(99.9%) 4623.770 ops/s [Average]
  (min, avg, max) = (3647543.575, 3657990.099, 3673380.922), stdev = 6920.642
  CI (99.9%): [3653366.329, 3662613.870] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_maxBy  thrpt   30  3657990.099 ± 4623.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1435774.003 ops/s
# Warmup Iteration   2: 3408249.074 ops/s
# Warmup Iteration   3: 3469982.508 ops/s
# Warmup Iteration   4: 2860596.787 ops/s
# Warmup Iteration   5: 3484438.438 ops/s
# Warmup Iteration   6: 3470783.291 ops/s
# Warmup Iteration   7: 3466535.063 ops/s
# Warmup Iteration   8: 3464611.567 ops/s
# Warmup Iteration   9: 3461105.527 ops/s
# Warmup Iteration  10: 3459192.120 ops/s
# Warmup Iteration  11: 3458164.900 ops/s
# Warmup Iteration  12: 3460980.363 ops/s
# Warmup Iteration  13: 3458631.180 ops/s
# Warmup Iteration  14: 3462335.634 ops/s
# Warmup Iteration  15: 3469409.990 ops/s
# Warmup Iteration  16: 3469928.255 ops/s
# Warmup Iteration  17: 3470230.433 ops/s
# Warmup Iteration  18: 3466268.907 ops/s
# Warmup Iteration  19: 3458327.309 ops/s
# Warmup Iteration  20: 3470437.387 ops/s
# Warmup Iteration  21: 3465339.340 ops/s
# Warmup Iteration  22: 3473275.169 ops/s
# Warmup Iteration  23: 3460343.616 ops/s
# Warmup Iteration  24: 3467134.443 ops/s
# Warmup Iteration  25: 3475699.079 ops/s
# Warmup Iteration  26: 3470925.841 ops/s
# Warmup Iteration  27: 3465910.167 ops/s
# Warmup Iteration  28: 3471093.796 ops/s
# Warmup Iteration  29: 3468919.100 ops/s
# Warmup Iteration  30: 3462759.588 ops/s
Iteration   1: 3474652.986 ops/s
Iteration   2: 3464029.403 ops/s
Iteration   3: 3469949.747 ops/s
Iteration   4: 3459885.727 ops/s
Iteration   5: 3451642.946 ops/s
Iteration   6: 3471590.971 ops/s
Iteration   7: 3482357.857 ops/s
Iteration   8: 3477136.603 ops/s
Iteration   9: 3476468.840 ops/s
Iteration  10: 3475576.142 ops/s
Iteration  11: 3469816.133 ops/s
Iteration  12: 3464150.241 ops/s
Iteration  13: 3472857.425 ops/s
Iteration  14: 3469323.610 ops/s
Iteration  15: 3476541.449 ops/s
Iteration  16: 3459344.068 ops/s
Iteration  17: 3456800.155 ops/s
Iteration  18: 3468753.038 ops/s
Iteration  19: 3465114.469 ops/s
Iteration  20: 3469168.218 ops/s
Iteration  21: 3469640.338 ops/s
Iteration  22: 3472568.345 ops/s
Iteration  23: 3475199.466 ops/s
Iteration  24: 3469047.947 ops/s
Iteration  25: 3467340.415 ops/s
Iteration  26: 3468058.018 ops/s
Iteration  27: 3461634.726 ops/s
Iteration  28: 3454245.605 ops/s
Iteration  29: 3465169.232 ops/s
Iteration  30: 3471169.674 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxByOptional":
  3468307.793 ±(99.9%) 4769.268 ops/s [Average]
  (min, avg, max) = (3451642.946, 3468307.793, 3482357.857), stdev = 7138.417
  CI (99.9%): [3463538.525, 3473077.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  3468307.793 ± 4769.268  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2183763.907 ops/s
# Warmup Iteration   2: 4465559.436 ops/s
# Warmup Iteration   3: 4906826.337 ops/s
# Warmup Iteration   4: 4953041.486 ops/s
# Warmup Iteration   5: 4059067.232 ops/s
# Warmup Iteration   6: 4955149.078 ops/s
# Warmup Iteration   7: 4952689.605 ops/s
# Warmup Iteration   8: 4954385.112 ops/s
# Warmup Iteration   9: 4961399.606 ops/s
# Warmup Iteration  10: 4950104.416 ops/s
# Warmup Iteration  11: 4951031.764 ops/s
# Warmup Iteration  12: 4945963.905 ops/s
# Warmup Iteration  13: 4950158.924 ops/s
# Warmup Iteration  14: 4953336.320 ops/s
# Warmup Iteration  15: 4943955.306 ops/s
# Warmup Iteration  16: 4963822.875 ops/s
# Warmup Iteration  17: 4956516.669 ops/s
# Warmup Iteration  18: 4958181.331 ops/s
# Warmup Iteration  19: 4953183.299 ops/s
# Warmup Iteration  20: 4968097.272 ops/s
# Warmup Iteration  21: 4954200.034 ops/s
# Warmup Iteration  22: 4965315.296 ops/s
# Warmup Iteration  23: 4952991.408 ops/s
# Warmup Iteration  24: 4959090.441 ops/s
# Warmup Iteration  25: 4955911.194 ops/s
# Warmup Iteration  26: 4970547.112 ops/s
# Warmup Iteration  27: 4956422.577 ops/s
# Warmup Iteration  28: 4963087.170 ops/s
# Warmup Iteration  29: 4945180.317 ops/s
# Warmup Iteration  30: 4950583.159 ops/s
Iteration   1: 4972450.530 ops/s
Iteration   2: 4951685.008 ops/s
Iteration   3: 4964348.871 ops/s
Iteration   4: 4965757.221 ops/s
Iteration   5: 4955674.314 ops/s
Iteration   6: 4973578.286 ops/s
Iteration   7: 4974032.788 ops/s
Iteration   8: 4963715.579 ops/s
Iteration   9: 4956214.014 ops/s
Iteration  10: 4961945.368 ops/s
Iteration  11: 4942156.420 ops/s
Iteration  12: 4958216.646 ops/s
Iteration  13: 4943712.949 ops/s
Iteration  14: 4968627.472 ops/s
Iteration  15: 4958763.235 ops/s
Iteration  16: 4966025.400 ops/s
Iteration  17: 4967520.623 ops/s
Iteration  18: 4962672.958 ops/s
Iteration  19: 4962502.353 ops/s
Iteration  20: 4952075.094 ops/s
Iteration  21: 4977396.449 ops/s
Iteration  22: 4961949.637 ops/s
Iteration  23: 4962360.757 ops/s
Iteration  24: 4964250.371 ops/s
Iteration  25: 4985967.034 ops/s
Iteration  26: 4964213.831 ops/s
Iteration  27: 4958743.118 ops/s
Iteration  28: 4975190.085 ops/s
Iteration  29: 4953875.983 ops/s
Iteration  30: 4969617.655 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxBy_null_throws":
  4963174.668 ±(99.9%) 6352.954 ops/s [Average]
  (min, avg, max) = (4942156.420, 4963174.668, 4985967.034), stdev = 9508.804
  CI (99.9%): [4956821.714, 4969527.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  4963174.668 ± 6352.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 840279.899 ops/s
# Warmup Iteration   2: 1648484.433 ops/s
# Warmup Iteration   3: 1770502.088 ops/s
# Warmup Iteration   4: 1776046.473 ops/s
# Warmup Iteration   5: 1463304.391 ops/s
# Warmup Iteration   6: 1781161.965 ops/s
# Warmup Iteration   7: 1780445.657 ops/s
# Warmup Iteration   8: 1777952.722 ops/s
# Warmup Iteration   9: 1778892.827 ops/s
# Warmup Iteration  10: 1781203.388 ops/s
# Warmup Iteration  11: 1777580.612 ops/s
# Warmup Iteration  12: 1781311.346 ops/s
# Warmup Iteration  13: 1780425.229 ops/s
# Warmup Iteration  14: 1776478.507 ops/s
# Warmup Iteration  15: 1777978.323 ops/s
# Warmup Iteration  16: 1779861.967 ops/s
# Warmup Iteration  17: 1775948.728 ops/s
# Warmup Iteration  18: 1780660.674 ops/s
# Warmup Iteration  19: 1782318.237 ops/s
# Warmup Iteration  20: 1772291.823 ops/s
# Warmup Iteration  21: 1774588.815 ops/s
# Warmup Iteration  22: 1779729.947 ops/s
# Warmup Iteration  23: 1777920.491 ops/s
# Warmup Iteration  24: 1779935.662 ops/s
# Warmup Iteration  25: 1773657.149 ops/s
# Warmup Iteration  26: 1780295.206 ops/s
# Warmup Iteration  27: 1778825.207 ops/s
# Warmup Iteration  28: 1776442.490 ops/s
# Warmup Iteration  29: 1774985.667 ops/s
# Warmup Iteration  30: 1769854.843 ops/s
Iteration   1: 1777381.042 ops/s
Iteration   2: 1776752.874 ops/s
Iteration   3: 1775889.481 ops/s
Iteration   4: 1777404.462 ops/s
Iteration   5: 1790308.419 ops/s
Iteration   6: 1773380.899 ops/s
Iteration   7: 1777833.359 ops/s
Iteration   8: 1784036.338 ops/s
Iteration   9: 1783248.658 ops/s
Iteration  10: 1787011.342 ops/s
Iteration  11: 1782448.569 ops/s
Iteration  12: 1781290.938 ops/s
Iteration  13: 1774491.228 ops/s
Iteration  14: 1779161.524 ops/s
Iteration  15: 1779939.808 ops/s
Iteration  16: 1779948.609 ops/s
Iteration  17: 1781749.503 ops/s
Iteration  18: 1785605.497 ops/s
Iteration  19: 1781085.597 ops/s
Iteration  20: 1783946.749 ops/s
Iteration  21: 1777844.785 ops/s
Iteration  22: 1779505.991 ops/s
Iteration  23: 1780603.459 ops/s
Iteration  24: 1781640.432 ops/s
Iteration  25: 1778670.749 ops/s
Iteration  26: 1785285.200 ops/s
Iteration  27: 1784496.640 ops/s
Iteration  28: 1785176.515 ops/s
Iteration  29: 1785212.892 ops/s
Iteration  30: 1782665.926 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_maxOptional":
  1781133.916 ±(99.9%) 2608.727 ops/s [Average]
  (min, avg, max) = (1773380.899, 1781133.916, 1790308.419), stdev = 3904.620
  CI (99.9%): [1778525.190, 1783742.643] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_maxOptional  thrpt   30  1781133.916 ± 2608.727  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670905.475 ops/s
# Warmup Iteration   2: 710071.823 ops/s
# Warmup Iteration   3: 953385.707 ops/s
# Warmup Iteration   4: 951081.713 ops/s
# Warmup Iteration   5: 941455.777 ops/s
# Warmup Iteration   6: 952501.154 ops/s
# Warmup Iteration   7: 950317.848 ops/s
# Warmup Iteration   8: 948226.910 ops/s
# Warmup Iteration   9: 952111.889 ops/s
# Warmup Iteration  10: 948824.391 ops/s
# Warmup Iteration  11: 932886.335 ops/s
# Warmup Iteration  12: 812725.229 ops/s
# Warmup Iteration  13: 952973.950 ops/s
# Warmup Iteration  14: 952202.724 ops/s
# Warmup Iteration  15: 949658.559 ops/s
# Warmup Iteration  16: 951181.688 ops/s
# Warmup Iteration  17: 998964.226 ops/s
# Warmup Iteration  18: 997124.208 ops/s
# Warmup Iteration  19: 996970.416 ops/s
# Warmup Iteration  20: 995074.618 ops/s
# Warmup Iteration  21: 994372.145 ops/s
# Warmup Iteration  22: 994060.285 ops/s
# Warmup Iteration  23: 997125.898 ops/s
# Warmup Iteration  24: 996257.407 ops/s
# Warmup Iteration  25: 997527.109 ops/s
# Warmup Iteration  26: 998947.679 ops/s
# Warmup Iteration  27: 990821.626 ops/s
# Warmup Iteration  28: 993869.514 ops/s
# Warmup Iteration  29: 999920.729 ops/s
# Warmup Iteration  30: 994352.839 ops/s
Iteration   1: 1000686.654 ops/s
Iteration   2: 997375.687 ops/s
Iteration   3: 998063.269 ops/s
Iteration   4: 991604.486 ops/s
Iteration   5: 999504.669 ops/s
Iteration   6: 1000151.418 ops/s
Iteration   7: 996356.376 ops/s
Iteration   8: 996615.669 ops/s
Iteration   9: 994472.145 ops/s
Iteration  10: 995216.222 ops/s
Iteration  11: 995467.008 ops/s
Iteration  12: 997742.587 ops/s
Iteration  13: 993917.734 ops/s
Iteration  14: 993128.493 ops/s
Iteration  15: 993367.949 ops/s
Iteration  16: 996057.499 ops/s
Iteration  17: 997026.754 ops/s
Iteration  18: 995332.912 ops/s
Iteration  19: 995930.869 ops/s
Iteration  20: 997255.551 ops/s
Iteration  21: 994893.611 ops/s
Iteration  22: 998573.442 ops/s
Iteration  23: 998028.973 ops/s
Iteration  24: 991182.659 ops/s
Iteration  25: 997458.577 ops/s
Iteration  26: 995593.139 ops/s
Iteration  27: 996452.463 ops/s
Iteration  28: 996277.130 ops/s
Iteration  29: 998040.671 ops/s
Iteration  30: 996184.738 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_empty_throws":
  996265.312 ±(99.9%) 1499.866 ops/s [Average]
  (min, avg, max) = (991182.659, 996265.312, 1000686.654), stdev = 2244.929
  CI (99.9%): [994765.446, 997765.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  996265.312 ± 1499.866  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2009105.903 ops/s
# Warmup Iteration   2: 3338932.176 ops/s
# Warmup Iteration   3: 3858154.349 ops/s
# Warmup Iteration   4: 3886103.149 ops/s
# Warmup Iteration   5: 3876341.081 ops/s
# Warmup Iteration   6: 3177155.717 ops/s
# Warmup Iteration   7: 3889666.403 ops/s
# Warmup Iteration   8: 3889643.783 ops/s
# Warmup Iteration   9: 3885964.205 ops/s
# Warmup Iteration  10: 3879834.494 ops/s
# Warmup Iteration  11: 3890003.519 ops/s
# Warmup Iteration  12: 3883921.141 ops/s
# Warmup Iteration  13: 3884083.411 ops/s
# Warmup Iteration  14: 3886117.093 ops/s
# Warmup Iteration  15: 3886086.117 ops/s
# Warmup Iteration  16: 3884514.234 ops/s
# Warmup Iteration  17: 3888484.994 ops/s
# Warmup Iteration  18: 3883006.877 ops/s
# Warmup Iteration  19: 3883840.138 ops/s
# Warmup Iteration  20: 3877289.680 ops/s
# Warmup Iteration  21: 3874558.475 ops/s
# Warmup Iteration  22: 3882439.278 ops/s
# Warmup Iteration  23: 3881580.912 ops/s
# Warmup Iteration  24: 3892891.077 ops/s
# Warmup Iteration  25: 3880725.843 ops/s
# Warmup Iteration  26: 3882968.557 ops/s
# Warmup Iteration  27: 3883691.583 ops/s
# Warmup Iteration  28: 3881105.550 ops/s
# Warmup Iteration  29: 3879915.642 ops/s
# Warmup Iteration  30: 3881453.194 ops/s
Iteration   1: 3866761.107 ops/s
Iteration   2: 3892456.087 ops/s
Iteration   3: 3886409.883 ops/s
Iteration   4: 3874391.670 ops/s
Iteration   5: 3868795.902 ops/s
Iteration   6: 3882675.840 ops/s
Iteration   7: 3869097.885 ops/s
Iteration   8: 3875159.988 ops/s
Iteration   9: 3874648.793 ops/s
Iteration  10: 3879099.283 ops/s
Iteration  11: 3894176.443 ops/s
Iteration  12: 3868271.080 ops/s
Iteration  13: 3903182.930 ops/s
Iteration  14: 3879071.015 ops/s
Iteration  15: 3881999.334 ops/s
Iteration  16: 3878827.422 ops/s
Iteration  17: 3875308.168 ops/s
Iteration  18: 3887989.933 ops/s
Iteration  19: 3881337.640 ops/s
Iteration  20: 3886293.433 ops/s
Iteration  21: 3886511.025 ops/s
Iteration  22: 3890862.329 ops/s
Iteration  23: 3892651.081 ops/s
Iteration  24: 3876925.770 ops/s
Iteration  25: 3878839.185 ops/s
Iteration  26: 3883969.923 ops/s
Iteration  27: 3883035.219 ops/s
Iteration  28: 3893069.684 ops/s
Iteration  29: 3888081.293 ops/s
Iteration  30: 3885738.134 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_safe":
  3882187.916 ±(99.9%) 5817.201 ops/s [Average]
  (min, avg, max) = (3866761.107, 3882187.916, 3903182.930), stdev = 8706.914
  CI (99.9%): [3876370.715, 3888005.117] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  3882187.916 ± 5817.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62285723.386 ops/s
# Warmup Iteration   2: 120760880.732 ops/s
# Warmup Iteration   3: 113089842.503 ops/s
# Warmup Iteration   4: 133276695.155 ops/s
# Warmup Iteration   5: 133076868.970 ops/s
# Warmup Iteration   6: 132736326.536 ops/s
# Warmup Iteration   7: 133099339.640 ops/s
# Warmup Iteration   8: 133250650.683 ops/s
# Warmup Iteration   9: 132769656.683 ops/s
# Warmup Iteration  10: 133080516.017 ops/s
# Warmup Iteration  11: 133268405.462 ops/s
# Warmup Iteration  12: 133196879.336 ops/s
# Warmup Iteration  13: 132717464.368 ops/s
# Warmup Iteration  14: 132730246.765 ops/s
# Warmup Iteration  15: 133387363.179 ops/s
# Warmup Iteration  16: 132926713.717 ops/s
# Warmup Iteration  17: 128231946.368 ops/s
# Warmup Iteration  18: 128829166.164 ops/s
# Warmup Iteration  19: 128210567.726 ops/s
# Warmup Iteration  20: 128246663.227 ops/s
# Warmup Iteration  21: 128072087.798 ops/s
# Warmup Iteration  22: 128630331.354 ops/s
# Warmup Iteration  23: 128563153.364 ops/s
# Warmup Iteration  24: 128584874.345 ops/s
# Warmup Iteration  25: 128640062.852 ops/s
# Warmup Iteration  26: 128905883.700 ops/s
# Warmup Iteration  27: 127749421.255 ops/s
# Warmup Iteration  28: 128032304.987 ops/s
# Warmup Iteration  29: 127601194.027 ops/s
# Warmup Iteration  30: 128505446.319 ops/s
Iteration   1: 128182853.518 ops/s
Iteration   2: 127824467.367 ops/s
Iteration   3: 128788312.365 ops/s
Iteration   4: 128627952.399 ops/s
Iteration   5: 127919594.476 ops/s
Iteration   6: 129103233.767 ops/s
Iteration   7: 129006296.248 ops/s
Iteration   8: 128470646.139 ops/s
Iteration   9: 128238590.332 ops/s
Iteration  10: 128319106.243 ops/s
Iteration  11: 127620914.287 ops/s
Iteration  12: 128257324.875 ops/s
Iteration  13: 127998962.411 ops/s
Iteration  14: 127707278.834 ops/s
Iteration  15: 128234831.403 ops/s
Iteration  16: 128467351.595 ops/s
Iteration  17: 128566678.676 ops/s
Iteration  18: 128567140.518 ops/s
Iteration  19: 128374186.464 ops/s
Iteration  20: 127719656.508 ops/s
Iteration  21: 128037316.553 ops/s
Iteration  22: 128460431.335 ops/s
Iteration  23: 127425527.945 ops/s
Iteration  24: 128228416.709 ops/s
Iteration  25: 128016069.395 ops/s
Iteration  26: 128038756.374 ops/s
Iteration  27: 127636445.379 ops/s
Iteration  28: 128140133.202 ops/s
Iteration  29: 127752208.061 ops/s
Iteration  30: 128511131.453 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws":
  128208060.494 ±(99.9%) 274635.549 ops/s [Average]
  (min, avg, max) = (127425527.945, 128208060.494, 129103233.767), stdev = 411061.592
  CI (99.9%): [127933424.945, 128482696.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  128208060.494 ± 274635.549  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64468602.013 ops/s
# Warmup Iteration   2: 120820586.249 ops/s
# Warmup Iteration   3: 115312973.636 ops/s
# Warmup Iteration   4: 134864245.451 ops/s
# Warmup Iteration   5: 133604869.925 ops/s
# Warmup Iteration   6: 134858080.497 ops/s
# Warmup Iteration   7: 134853156.023 ops/s
# Warmup Iteration   8: 134428771.002 ops/s
# Warmup Iteration   9: 134385792.847 ops/s
# Warmup Iteration  10: 134243932.239 ops/s
# Warmup Iteration  11: 134662263.472 ops/s
# Warmup Iteration  12: 134821235.395 ops/s
# Warmup Iteration  13: 134560906.603 ops/s
# Warmup Iteration  14: 135019603.716 ops/s
# Warmup Iteration  15: 134676518.433 ops/s
# Warmup Iteration  16: 134808888.706 ops/s
# Warmup Iteration  17: 134038474.393 ops/s
# Warmup Iteration  18: 133685596.869 ops/s
# Warmup Iteration  19: 132680278.997 ops/s
# Warmup Iteration  20: 133452523.363 ops/s
# Warmup Iteration  21: 133289673.194 ops/s
# Warmup Iteration  22: 133082800.793 ops/s
# Warmup Iteration  23: 133236998.280 ops/s
# Warmup Iteration  24: 133739183.967 ops/s
# Warmup Iteration  25: 133757451.056 ops/s
# Warmup Iteration  26: 133838317.603 ops/s
# Warmup Iteration  27: 133514651.948 ops/s
# Warmup Iteration  28: 133451972.580 ops/s
# Warmup Iteration  29: 133582143.162 ops/s
# Warmup Iteration  30: 133761359.442 ops/s
Iteration   1: 133758143.655 ops/s
Iteration   2: 132722742.970 ops/s
Iteration   3: 133483422.694 ops/s
Iteration   4: 133583922.271 ops/s
Iteration   5: 134217157.025 ops/s
Iteration   6: 133997595.049 ops/s
Iteration   7: 133824972.789 ops/s
Iteration   8: 133264057.960 ops/s
Iteration   9: 133734123.533 ops/s
Iteration  10: 133685782.892 ops/s
Iteration  11: 134008468.842 ops/s
Iteration  12: 133550593.306 ops/s
Iteration  13: 134171214.511 ops/s
Iteration  14: 133816367.289 ops/s
Iteration  15: 133587292.168 ops/s
Iteration  16: 133259186.111 ops/s
Iteration  17: 133400659.138 ops/s
Iteration  18: 133468742.568 ops/s
Iteration  19: 133684395.371 ops/s
Iteration  20: 133265747.287 ops/s
Iteration  21: 133315487.407 ops/s
Iteration  22: 133400360.754 ops/s
Iteration  23: 133467022.052 ops/s
Iteration  24: 133415700.467 ops/s
Iteration  25: 133569988.288 ops/s
Iteration  26: 133202918.617 ops/s
Iteration  27: 133512824.431 ops/s
Iteration  28: 133579978.487 ops/s
Iteration  29: 133677496.663 ops/s
Iteration  30: 133131693.724 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  133558601.944 ±(99.9%) 210680.058 ops/s [Average]
  (min, avg, max) = (132722742.970, 133558601.944, 134217157.025), stdev = 315336.017
  CI (99.9%): [133347921.886, 133769282.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  133558601.944 ± 210680.058  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2123956.921 ops/s
# Warmup Iteration   2: 4178325.775 ops/s
# Warmup Iteration   3: 4483304.242 ops/s
# Warmup Iteration   4: 4505497.941 ops/s
# Warmup Iteration   5: 3694363.375 ops/s
# Warmup Iteration   6: 4514963.344 ops/s
# Warmup Iteration   7: 4494141.721 ops/s
# Warmup Iteration   8: 4502182.476 ops/s
# Warmup Iteration   9: 4522999.641 ops/s
# Warmup Iteration  10: 4497223.169 ops/s
# Warmup Iteration  11: 4498558.833 ops/s
# Warmup Iteration  12: 4507235.218 ops/s
# Warmup Iteration  13: 4508712.118 ops/s
# Warmup Iteration  14: 4505911.322 ops/s
# Warmup Iteration  15: 4498463.257 ops/s
# Warmup Iteration  16: 4506891.788 ops/s
# Warmup Iteration  17: 4514570.354 ops/s
# Warmup Iteration  18: 4502966.140 ops/s
# Warmup Iteration  19: 4501156.721 ops/s
# Warmup Iteration  20: 4502490.856 ops/s
# Warmup Iteration  21: 4515927.972 ops/s
# Warmup Iteration  22: 4512280.826 ops/s
# Warmup Iteration  23: 4497179.020 ops/s
# Warmup Iteration  24: 4518792.802 ops/s
# Warmup Iteration  25: 4517747.227 ops/s
# Warmup Iteration  26: 4506527.143 ops/s
# Warmup Iteration  27: 4495307.453 ops/s
# Warmup Iteration  28: 4517795.539 ops/s
# Warmup Iteration  29: 4505942.496 ops/s
# Warmup Iteration  30: 4506128.016 ops/s
Iteration   1: 4507831.124 ops/s
Iteration   2: 4502727.001 ops/s
Iteration   3: 4502140.166 ops/s
Iteration   4: 4501967.122 ops/s
Iteration   5: 4515960.399 ops/s
Iteration   6: 4513696.189 ops/s
Iteration   7: 4509943.923 ops/s
Iteration   8: 4504091.811 ops/s
Iteration   9: 4522538.981 ops/s
Iteration  10: 4508663.087 ops/s
Iteration  11: 4509285.462 ops/s
Iteration  12: 4522411.911 ops/s
Iteration  13: 4506073.802 ops/s
Iteration  14: 4493002.195 ops/s
Iteration  15: 4514511.272 ops/s
Iteration  16: 4495886.376 ops/s
Iteration  17: 4504892.756 ops/s
Iteration  18: 4514958.444 ops/s
Iteration  19: 4511059.413 ops/s
Iteration  20: 4513656.578 ops/s
Iteration  21: 4525628.643 ops/s
Iteration  22: 4526257.515 ops/s
Iteration  23: 4522333.637 ops/s
Iteration  24: 4513203.328 ops/s
Iteration  25: 4526048.163 ops/s
Iteration  26: 4515178.767 ops/s
Iteration  27: 4515230.217 ops/s
Iteration  28: 4508057.921 ops/s
Iteration  29: 4523896.830 ops/s
Iteration  30: 4526038.536 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_max_without_comparator":
  4512572.386 ±(99.9%) 6089.205 ops/s [Average]
  (min, avg, max) = (4493002.195, 4512572.386, 4526257.515), stdev = 9114.037
  CI (99.9%): [4506483.180, 4518661.591] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  4512572.386 ± 6089.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2183868.084 ops/s
# Warmup Iteration   2: 4162226.425 ops/s
# Warmup Iteration   3: 4503022.053 ops/s
# Warmup Iteration   4: 4526173.588 ops/s
# Warmup Iteration   5: 3860484.921 ops/s
# Warmup Iteration   6: 4355568.048 ops/s
# Warmup Iteration   7: 4539588.118 ops/s
# Warmup Iteration   8: 4535993.709 ops/s
# Warmup Iteration   9: 4531974.906 ops/s
# Warmup Iteration  10: 4528366.062 ops/s
# Warmup Iteration  11: 4537635.059 ops/s
# Warmup Iteration  12: 4531731.041 ops/s
# Warmup Iteration  13: 4526092.860 ops/s
# Warmup Iteration  14: 4535862.066 ops/s
# Warmup Iteration  15: 4523602.899 ops/s
# Warmup Iteration  16: 4532201.370 ops/s
# Warmup Iteration  17: 4539237.973 ops/s
# Warmup Iteration  18: 4534803.338 ops/s
# Warmup Iteration  19: 4544036.826 ops/s
# Warmup Iteration  20: 4542873.393 ops/s
# Warmup Iteration  21: 4530752.273 ops/s
# Warmup Iteration  22: 4526598.035 ops/s
# Warmup Iteration  23: 4530778.836 ops/s
# Warmup Iteration  24: 4534470.888 ops/s
# Warmup Iteration  25: 4537525.612 ops/s
# Warmup Iteration  26: 4539091.003 ops/s
# Warmup Iteration  27: 4533087.039 ops/s
# Warmup Iteration  28: 4527578.362 ops/s
# Warmup Iteration  29: 4536135.846 ops/s
# Warmup Iteration  30: 4541871.942 ops/s
Iteration   1: 4539204.366 ops/s
Iteration   2: 4531863.735 ops/s
Iteration   3: 4520677.806 ops/s
Iteration   4: 4532855.221 ops/s
Iteration   5: 4550065.607 ops/s
Iteration   6: 4532753.410 ops/s
Iteration   7: 4528000.970 ops/s
Iteration   8: 4545979.932 ops/s
Iteration   9: 4537557.660 ops/s
Iteration  10: 4534551.653 ops/s
Iteration  11: 4551156.321 ops/s
Iteration  12: 4523355.942 ops/s
Iteration  13: 4542489.291 ops/s
Iteration  14: 4528528.019 ops/s
Iteration  15: 4526221.527 ops/s
Iteration  16: 4544411.555 ops/s
Iteration  17: 4524138.572 ops/s
Iteration  18: 4534279.496 ops/s
Iteration  19: 4546352.503 ops/s
Iteration  20: 4521511.369 ops/s
Iteration  21: 4529213.058 ops/s
Iteration  22: 4533961.301 ops/s
Iteration  23: 4533344.039 ops/s
Iteration  24: 4530798.203 ops/s
Iteration  25: 4531483.651 ops/s
Iteration  26: 4535958.632 ops/s
Iteration  27: 4541640.042 ops/s
Iteration  28: 4525852.405 ops/s
Iteration  29: 4538374.572 ops/s
Iteration  30: 4533520.427 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min":
  4534336.709 ±(99.9%) 5452.503 ops/s [Average]
  (min, avg, max) = (4520677.806, 4534336.709, 4551156.321), stdev = 8161.050
  CI (99.9%): [4528884.207, 4539789.212] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min  thrpt   30  4534336.709 ± 5452.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1785997.890 ops/s
# Warmup Iteration   2: 3865300.573 ops/s
# Warmup Iteration   3: 4124201.247 ops/s
# Warmup Iteration   4: 4001035.290 ops/s
# Warmup Iteration   5: 3556798.819 ops/s
# Warmup Iteration   6: 4172478.809 ops/s
# Warmup Iteration   7: 4174070.067 ops/s
# Warmup Iteration   8: 4169943.384 ops/s
# Warmup Iteration   9: 4155413.518 ops/s
# Warmup Iteration  10: 4141563.469 ops/s
# Warmup Iteration  11: 4158907.935 ops/s
# Warmup Iteration  12: 4156846.283 ops/s
# Warmup Iteration  13: 4161060.925 ops/s
# Warmup Iteration  14: 4156717.825 ops/s
# Warmup Iteration  15: 4172414.182 ops/s
# Warmup Iteration  16: 4168887.858 ops/s
# Warmup Iteration  17: 4179703.305 ops/s
# Warmup Iteration  18: 4170645.461 ops/s
# Warmup Iteration  19: 4177795.545 ops/s
# Warmup Iteration  20: 4167324.952 ops/s
# Warmup Iteration  21: 4169535.839 ops/s
# Warmup Iteration  22: 4163918.985 ops/s
# Warmup Iteration  23: 4161618.332 ops/s
# Warmup Iteration  24: 4163480.619 ops/s
# Warmup Iteration  25: 4178651.060 ops/s
# Warmup Iteration  26: 4163899.572 ops/s
# Warmup Iteration  27: 4173896.978 ops/s
# Warmup Iteration  28: 4171501.002 ops/s
# Warmup Iteration  29: 4166471.646 ops/s
# Warmup Iteration  30: 4161060.761 ops/s
Iteration   1: 4175870.636 ops/s
Iteration   2: 4175837.424 ops/s
Iteration   3: 4174306.410 ops/s
Iteration   4: 4169087.318 ops/s
Iteration   5: 4184341.741 ops/s
Iteration   6: 4167349.350 ops/s
Iteration   7: 4158879.612 ops/s
Iteration   8: 4165815.994 ops/s
Iteration   9: 4186248.456 ops/s
Iteration  10: 4158139.681 ops/s
Iteration  11: 4169600.704 ops/s
Iteration  12: 4167006.277 ops/s
Iteration  13: 4154771.475 ops/s
Iteration  14: 4175594.130 ops/s
Iteration  15: 4171756.106 ops/s
Iteration  16: 4158458.322 ops/s
Iteration  17: 4161442.380 ops/s
Iteration  18: 4155696.122 ops/s
Iteration  19: 4184359.353 ops/s
Iteration  20: 4164945.850 ops/s
Iteration  21: 4178232.267 ops/s
Iteration  22: 4168787.293 ops/s
Iteration  23: 4161337.332 ops/s
Iteration  24: 4172802.393 ops/s
Iteration  25: 4170076.691 ops/s
Iteration  26: 4174658.507 ops/s
Iteration  27: 4153598.828 ops/s
Iteration  28: 4155064.659 ops/s
Iteration  29: 4171207.494 ops/s
Iteration  30: 4169469.523 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy":
  4168491.411 ±(99.9%) 6032.230 ops/s [Average]
  (min, avg, max) = (4153598.828, 4168491.411, 4186248.456), stdev = 9028.759
  CI (99.9%): [4162459.181, 4174523.641] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_minBy  thrpt   30  4168491.411 ± 6032.230  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1501238.042 ops/s
# Warmup Iteration   2: 3422461.132 ops/s
# Warmup Iteration   3: 3540155.535 ops/s
# Warmup Iteration   4: 3015609.222 ops/s
# Warmup Iteration   5: 3432673.711 ops/s
# Warmup Iteration   6: 3542648.152 ops/s
# Warmup Iteration   7: 3544071.146 ops/s
# Warmup Iteration   8: 3533349.913 ops/s
# Warmup Iteration   9: 3527592.972 ops/s
# Warmup Iteration  10: 3539448.218 ops/s
# Warmup Iteration  11: 3535949.864 ops/s
# Warmup Iteration  12: 3541227.534 ops/s
# Warmup Iteration  13: 3540228.030 ops/s
# Warmup Iteration  14: 3546642.589 ops/s
# Warmup Iteration  15: 3538816.267 ops/s
# Warmup Iteration  16: 3542988.160 ops/s
# Warmup Iteration  17: 3541793.056 ops/s
# Warmup Iteration  18: 3536655.034 ops/s
# Warmup Iteration  19: 3541764.801 ops/s
# Warmup Iteration  20: 3540785.941 ops/s
# Warmup Iteration  21: 3539073.932 ops/s
# Warmup Iteration  22: 3535369.660 ops/s
# Warmup Iteration  23: 3548022.019 ops/s
# Warmup Iteration  24: 3542218.272 ops/s
# Warmup Iteration  25: 3543614.699 ops/s
# Warmup Iteration  26: 3539185.225 ops/s
# Warmup Iteration  27: 3547056.918 ops/s
# Warmup Iteration  28: 3545501.711 ops/s
# Warmup Iteration  29: 3540379.964 ops/s
# Warmup Iteration  30: 3537226.520 ops/s
Iteration   1: 3535681.919 ops/s
Iteration   2: 3550448.205 ops/s
Iteration   3: 3549132.363 ops/s
Iteration   4: 3530268.215 ops/s
Iteration   5: 3533604.529 ops/s
Iteration   6: 3530788.352 ops/s
Iteration   7: 3545658.743 ops/s
Iteration   8: 3544942.235 ops/s
Iteration   9: 3545852.749 ops/s
Iteration  10: 3535527.244 ops/s
Iteration  11: 3545342.707 ops/s
Iteration  12: 3544550.069 ops/s
Iteration  13: 3526415.945 ops/s
Iteration  14: 3538044.590 ops/s
Iteration  15: 3541159.981 ops/s
Iteration  16: 3537444.224 ops/s
Iteration  17: 3542625.975 ops/s
Iteration  18: 3533969.744 ops/s
Iteration  19: 3541808.097 ops/s
Iteration  20: 3543850.056 ops/s
Iteration  21: 3545992.608 ops/s
Iteration  22: 3539989.048 ops/s
Iteration  23: 3541582.470 ops/s
Iteration  24: 3536570.568 ops/s
Iteration  25: 3534796.310 ops/s
Iteration  26: 3534836.513 ops/s
Iteration  27: 3529276.378 ops/s
Iteration  28: 3526570.911 ops/s
Iteration  29: 3539199.305 ops/s
Iteration  30: 3532033.211 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minByOptional":
  3538598.775 ±(99.9%) 4392.812 ops/s [Average]
  (min, avg, max) = (3526415.945, 3538598.775, 3550448.205), stdev = 6574.954
  CI (99.9%): [3534205.964, 3542991.587] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_minByOptional  thrpt   30  3538598.775 ± 4392.812  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1716021.839 ops/s
# Warmup Iteration   2: 2813779.180 ops/s
# Warmup Iteration   3: 3266540.179 ops/s
# Warmup Iteration   4: 3290844.831 ops/s
# Warmup Iteration   5: 3281768.198 ops/s
# Warmup Iteration   6: 3078019.450 ops/s
# Warmup Iteration   7: 2910956.155 ops/s
# Warmup Iteration   8: 3290585.335 ops/s
# Warmup Iteration   9: 3288625.963 ops/s
# Warmup Iteration  10: 3263468.887 ops/s
# Warmup Iteration  11: 3291508.466 ops/s
# Warmup Iteration  12: 3292813.293 ops/s
# Warmup Iteration  13: 3296613.337 ops/s
# Warmup Iteration  14: 3283811.881 ops/s
# Warmup Iteration  15: 3289628.499 ops/s
# Warmup Iteration  16: 3293637.035 ops/s
# Warmup Iteration  17: 3292177.893 ops/s
# Warmup Iteration  18: 3286835.852 ops/s
# Warmup Iteration  19: 3290177.760 ops/s
# Warmup Iteration  20: 3289585.435 ops/s
# Warmup Iteration  21: 3289343.612 ops/s
# Warmup Iteration  22: 3283029.040 ops/s
# Warmup Iteration  23: 3288201.420 ops/s
# Warmup Iteration  24: 3279835.455 ops/s
# Warmup Iteration  25: 3286201.575 ops/s
# Warmup Iteration  26: 3290668.333 ops/s
# Warmup Iteration  27: 3283335.793 ops/s
# Warmup Iteration  28: 3289233.565 ops/s
# Warmup Iteration  29: 3292283.756 ops/s
# Warmup Iteration  30: 3285188.974 ops/s
Iteration   1: 3276370.486 ops/s
Iteration   2: 3286190.446 ops/s
Iteration   3: 3308008.132 ops/s
Iteration   4: 3283168.642 ops/s
Iteration   5: 3284885.548 ops/s
Iteration   6: 3285348.007 ops/s
Iteration   7: 3271744.110 ops/s
Iteration   8: 3287505.551 ops/s
Iteration   9: 3287139.017 ops/s
Iteration  10: 3294098.820 ops/s
Iteration  11: 3283238.011 ops/s
Iteration  12: 3289526.606 ops/s
Iteration  13: 3280843.154 ops/s
Iteration  14: 3282716.496 ops/s
Iteration  15: 3293308.461 ops/s
Iteration  16: 3283190.610 ops/s
Iteration  17: 3281037.202 ops/s
Iteration  18: 3291491.723 ops/s
Iteration  19: 3284513.662 ops/s
Iteration  20: 3290286.112 ops/s
Iteration  21: 3293782.752 ops/s
Iteration  22: 3295315.844 ops/s
Iteration  23: 3283464.411 ops/s
Iteration  24: 3295514.962 ops/s
Iteration  25: 3285425.721 ops/s
Iteration  26: 3282508.250 ops/s
Iteration  27: 3279645.201 ops/s
Iteration  28: 3294439.940 ops/s
Iteration  29: 3287305.419 ops/s
Iteration  30: 3293749.400 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minBy_null_throws":
  3287192.090 ±(99.9%) 4709.405 ops/s [Average]
  (min, avg, max) = (3271744.110, 3287192.090, 3308008.132), stdev = 7048.816
  CI (99.9%): [3282482.685, 3291901.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  3287192.090 ± 4709.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847708.150 ops/s
# Warmup Iteration   2: 1679597.442 ops/s
# Warmup Iteration   3: 1816858.721 ops/s
# Warmup Iteration   4: 1832580.997 ops/s
# Warmup Iteration   5: 1506436.568 ops/s
# Warmup Iteration   6: 1833076.237 ops/s
# Warmup Iteration   7: 1828306.077 ops/s
# Warmup Iteration   8: 1832668.230 ops/s
# Warmup Iteration   9: 1832251.106 ops/s
# Warmup Iteration  10: 1833857.130 ops/s
# Warmup Iteration  11: 1833006.913 ops/s
# Warmup Iteration  12: 1831808.406 ops/s
# Warmup Iteration  13: 1834633.969 ops/s
# Warmup Iteration  14: 1833808.032 ops/s
# Warmup Iteration  15: 1832903.428 ops/s
# Warmup Iteration  16: 1835070.946 ops/s
# Warmup Iteration  17: 1806255.952 ops/s
# Warmup Iteration  18: 1809317.750 ops/s
# Warmup Iteration  19: 1812630.354 ops/s
# Warmup Iteration  20: 1815511.436 ops/s
# Warmup Iteration  21: 1811075.037 ops/s
# Warmup Iteration  22: 1815207.450 ops/s
# Warmup Iteration  23: 1811507.143 ops/s
# Warmup Iteration  24: 1812711.728 ops/s
# Warmup Iteration  25: 1812798.384 ops/s
# Warmup Iteration  26: 1810755.748 ops/s
# Warmup Iteration  27: 1811960.384 ops/s
# Warmup Iteration  28: 1812061.042 ops/s
# Warmup Iteration  29: 1815428.618 ops/s
# Warmup Iteration  30: 1812988.286 ops/s
Iteration   1: 1809877.113 ops/s
Iteration   2: 1818218.731 ops/s
Iteration   3: 1811944.343 ops/s
Iteration   4: 1813260.410 ops/s
Iteration   5: 1815460.227 ops/s
Iteration   6: 1809362.056 ops/s
Iteration   7: 1816274.534 ops/s
Iteration   8: 1818851.725 ops/s
Iteration   9: 1811801.322 ops/s
Iteration  10: 1811127.011 ops/s
Iteration  11: 1811958.794 ops/s
Iteration  12: 1812432.537 ops/s
Iteration  13: 1813102.389 ops/s
Iteration  14: 1806911.965 ops/s
Iteration  15: 1814473.594 ops/s
Iteration  16: 1812078.811 ops/s
Iteration  17: 1816639.110 ops/s
Iteration  18: 1816710.698 ops/s
Iteration  19: 1816867.330 ops/s
Iteration  20: 1814614.887 ops/s
Iteration  21: 1817833.074 ops/s
Iteration  22: 1811325.826 ops/s
Iteration  23: 1812874.858 ops/s
Iteration  24: 1814173.005 ops/s
Iteration  25: 1814142.861 ops/s
Iteration  26: 1813206.870 ops/s
Iteration  27: 1821319.969 ops/s
Iteration  28: 1818086.177 ops/s
Iteration  29: 1815288.527 ops/s
Iteration  30: 1818722.092 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_minOptional":
  1814298.028 ±(99.9%) 2166.252 ops/s [Average]
  (min, avg, max) = (1806911.965, 1814298.028, 1821319.969), stdev = 3242.344
  CI (99.9%): [1812131.776, 1816464.280] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_minOptional  thrpt   30  1814298.028 ± 2166.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 670534.617 ops/s
# Warmup Iteration   2: 709610.369 ops/s
# Warmup Iteration   3: 949889.549 ops/s
# Warmup Iteration   4: 949293.569 ops/s
# Warmup Iteration   5: 937649.583 ops/s
# Warmup Iteration   6: 951709.049 ops/s
# Warmup Iteration   7: 950989.295 ops/s
# Warmup Iteration   8: 946196.778 ops/s
# Warmup Iteration   9: 951878.927 ops/s
# Warmup Iteration  10: 950387.416 ops/s
# Warmup Iteration  11: 935864.280 ops/s
# Warmup Iteration  12: 807643.239 ops/s
# Warmup Iteration  13: 947601.319 ops/s
# Warmup Iteration  14: 950643.315 ops/s
# Warmup Iteration  15: 950131.048 ops/s
# Warmup Iteration  16: 949930.344 ops/s
# Warmup Iteration  17: 1004102.461 ops/s
# Warmup Iteration  18: 1006438.300 ops/s
# Warmup Iteration  19: 1004839.051 ops/s
# Warmup Iteration  20: 1002496.552 ops/s
# Warmup Iteration  21: 1002057.434 ops/s
# Warmup Iteration  22: 1000573.026 ops/s
# Warmup Iteration  23: 1003011.319 ops/s
# Warmup Iteration  24: 1002979.555 ops/s
# Warmup Iteration  25: 1006012.337 ops/s
# Warmup Iteration  26: 1003158.911 ops/s
# Warmup Iteration  27: 1002172.288 ops/s
# Warmup Iteration  28: 1002423.892 ops/s
# Warmup Iteration  29: 1004928.215 ops/s
# Warmup Iteration  30: 1003381.498 ops/s
Iteration   1: 1003113.621 ops/s
Iteration   2: 1001510.785 ops/s
Iteration   3: 1005419.027 ops/s
Iteration   4: 1004576.965 ops/s
Iteration   5: 1002707.172 ops/s
Iteration   6: 1000936.679 ops/s
Iteration   7: 1000394.417 ops/s
Iteration   8: 1004664.069 ops/s
Iteration   9: 1005183.550 ops/s
Iteration  10: 1002461.334 ops/s
Iteration  11: 1003386.294 ops/s
Iteration  12: 1002121.789 ops/s
Iteration  13: 1002089.306 ops/s
Iteration  14: 999512.245 ops/s
Iteration  15: 1002540.057 ops/s
Iteration  16: 1003998.571 ops/s
Iteration  17: 1000844.987 ops/s
Iteration  18: 1005242.721 ops/s
Iteration  19: 1005779.108 ops/s
Iteration  20: 1006215.946 ops/s
Iteration  21: 1001386.731 ops/s
Iteration  22: 1003608.965 ops/s
Iteration  23: 1006448.641 ops/s
Iteration  24: 1003032.103 ops/s
Iteration  25: 999994.647 ops/s
Iteration  26: 1007205.552 ops/s
Iteration  27: 1009132.402 ops/s
Iteration  28: 1006030.027 ops/s
Iteration  29: 1001311.035 ops/s
Iteration  30: 1006364.584 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_empty_throws":
  1003573.778 ±(99.9%) 1593.946 ops/s [Average]
  (min, avg, max) = (999512.245, 1003573.778, 1009132.402), stdev = 2385.743
  CI (99.9%): [1001979.832, 1005167.723] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1003573.778 ± 1593.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1994623.254 ops/s
# Warmup Iteration   2: 3191702.708 ops/s
# Warmup Iteration   3: 3742947.795 ops/s
# Warmup Iteration   4: 3776065.600 ops/s
# Warmup Iteration   5: 3759435.455 ops/s
# Warmup Iteration   6: 3192054.289 ops/s
# Warmup Iteration   7: 3657476.338 ops/s
# Warmup Iteration   8: 3763522.737 ops/s
# Warmup Iteration   9: 3766285.057 ops/s
# Warmup Iteration  10: 3773476.135 ops/s
# Warmup Iteration  11: 3767551.793 ops/s
# Warmup Iteration  12: 3769250.280 ops/s
# Warmup Iteration  13: 3766081.027 ops/s
# Warmup Iteration  14: 3766812.141 ops/s
# Warmup Iteration  15: 3772588.600 ops/s
# Warmup Iteration  16: 3767780.351 ops/s
# Warmup Iteration  17: 3759209.228 ops/s
# Warmup Iteration  18: 3761511.636 ops/s
# Warmup Iteration  19: 3772346.808 ops/s
# Warmup Iteration  20: 3761825.685 ops/s
# Warmup Iteration  21: 3761118.695 ops/s
# Warmup Iteration  22: 3760858.252 ops/s
# Warmup Iteration  23: 3766340.700 ops/s
# Warmup Iteration  24: 3771124.599 ops/s
# Warmup Iteration  25: 3766742.595 ops/s
# Warmup Iteration  26: 3768023.715 ops/s
# Warmup Iteration  27: 3767567.889 ops/s
# Warmup Iteration  28: 3767206.199 ops/s
# Warmup Iteration  29: 3763617.882 ops/s
# Warmup Iteration  30: 3757867.290 ops/s
Iteration   1: 3766063.300 ops/s
Iteration   2: 3770881.997 ops/s
Iteration   3: 3759072.102 ops/s
Iteration   4: 3772998.136 ops/s
Iteration   5: 3779262.486 ops/s
Iteration   6: 3767313.132 ops/s
Iteration   7: 3768603.537 ops/s
Iteration   8: 3769432.228 ops/s
Iteration   9: 3767150.806 ops/s
Iteration  10: 3773835.562 ops/s
Iteration  11: 3754579.669 ops/s
Iteration  12: 3767832.656 ops/s
Iteration  13: 3767972.602 ops/s
Iteration  14: 3762984.557 ops/s
Iteration  15: 3771175.927 ops/s
Iteration  16: 3762574.234 ops/s
Iteration  17: 3775318.717 ops/s
Iteration  18: 3762641.414 ops/s
Iteration  19: 3770605.682 ops/s
Iteration  20: 3757446.947 ops/s
Iteration  21: 3779194.089 ops/s
Iteration  22: 3758790.282 ops/s
Iteration  23: 3766493.645 ops/s
Iteration  24: 3754987.272 ops/s
Iteration  25: 3765393.363 ops/s
Iteration  26: 3761708.796 ops/s
Iteration  27: 3762116.743 ops/s
Iteration  28: 3768621.919 ops/s
Iteration  29: 3777486.770 ops/s
Iteration  30: 3754631.452 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_safe":
  3766572.334 ±(99.9%) 4637.410 ops/s [Average]
  (min, avg, max) = (3754579.669, 3766572.334, 3779262.486), stdev = 6941.057
  CI (99.9%): [3761934.924, 3771209.744] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  3766572.334 ± 4637.410  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 62679458.480 ops/s
# Warmup Iteration   2: 120397750.752 ops/s
# Warmup Iteration   3: 113087837.498 ops/s
# Warmup Iteration   4: 132917558.675 ops/s
# Warmup Iteration   5: 133151897.752 ops/s
# Warmup Iteration   6: 132657079.359 ops/s
# Warmup Iteration   7: 133098185.794 ops/s
# Warmup Iteration   8: 133001423.962 ops/s
# Warmup Iteration   9: 133259981.587 ops/s
# Warmup Iteration  10: 133042639.302 ops/s
# Warmup Iteration  11: 132947089.803 ops/s
# Warmup Iteration  12: 133150172.439 ops/s
# Warmup Iteration  13: 132860385.457 ops/s
# Warmup Iteration  14: 132972325.165 ops/s
# Warmup Iteration  15: 133557463.558 ops/s
# Warmup Iteration  16: 132892252.938 ops/s
# Warmup Iteration  17: 128477156.783 ops/s
# Warmup Iteration  18: 128007762.108 ops/s
# Warmup Iteration  19: 128459978.058 ops/s
# Warmup Iteration  20: 128493169.339 ops/s
# Warmup Iteration  21: 128205359.212 ops/s
# Warmup Iteration  22: 127775358.786 ops/s
# Warmup Iteration  23: 128350898.322 ops/s
# Warmup Iteration  24: 127951025.315 ops/s
# Warmup Iteration  25: 127680034.785 ops/s
# Warmup Iteration  26: 127977693.332 ops/s
# Warmup Iteration  27: 128193798.445 ops/s
# Warmup Iteration  28: 127905028.813 ops/s
# Warmup Iteration  29: 128479273.594 ops/s
# Warmup Iteration  30: 128317678.536 ops/s
Iteration   1: 128170150.907 ops/s
Iteration   2: 128279852.156 ops/s
Iteration   3: 127994351.422 ops/s
Iteration   4: 127919341.355 ops/s
Iteration   5: 127735052.822 ops/s
Iteration   6: 127868158.707 ops/s
Iteration   7: 128026896.077 ops/s
Iteration   8: 128285159.174 ops/s
Iteration   9: 129090860.887 ops/s
Iteration  10: 127970333.350 ops/s
Iteration  11: 128299203.706 ops/s
Iteration  12: 127580925.946 ops/s
Iteration  13: 128087458.927 ops/s
Iteration  14: 127112536.559 ops/s
Iteration  15: 127867581.748 ops/s
Iteration  16: 128539788.843 ops/s
Iteration  17: 127753555.875 ops/s
Iteration  18: 128540314.510 ops/s
Iteration  19: 128536479.017 ops/s
Iteration  20: 128325714.524 ops/s
Iteration  21: 128626866.547 ops/s
Iteration  22: 128212369.004 ops/s
Iteration  23: 127725064.819 ops/s
Iteration  24: 128388820.756 ops/s
Iteration  25: 128911627.504 ops/s
Iteration  26: 128253328.172 ops/s
Iteration  27: 128740498.858 ops/s
Iteration  28: 128560502.783 ops/s
Iteration  29: 129058041.823 ops/s
Iteration  30: 128335017.067 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws":
  128226528.461 ±(99.9%) 296331.017 ops/s [Average]
  (min, avg, max) = (127112536.559, 128226528.461, 129090860.887), stdev = 443534.350
  CI (99.9%): [127930197.444, 128522859.479] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  128226528.461 ± 296331.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64619052.467 ops/s
# Warmup Iteration   2: 120571451.220 ops/s
# Warmup Iteration   3: 114711180.931 ops/s
# Warmup Iteration   4: 134789994.552 ops/s
# Warmup Iteration   5: 134887059.002 ops/s
# Warmup Iteration   6: 134126784.506 ops/s
# Warmup Iteration   7: 134787169.735 ops/s
# Warmup Iteration   8: 134770880.860 ops/s
# Warmup Iteration   9: 134344604.392 ops/s
# Warmup Iteration  10: 135073863.103 ops/s
# Warmup Iteration  11: 135160609.329 ops/s
# Warmup Iteration  12: 135001304.289 ops/s
# Warmup Iteration  13: 135091333.910 ops/s
# Warmup Iteration  14: 134916399.659 ops/s
# Warmup Iteration  15: 135165778.300 ops/s
# Warmup Iteration  16: 135074234.048 ops/s
# Warmup Iteration  17: 133991840.666 ops/s
# Warmup Iteration  18: 133280165.105 ops/s
# Warmup Iteration  19: 133808217.939 ops/s
# Warmup Iteration  20: 134069384.859 ops/s
# Warmup Iteration  21: 133720463.647 ops/s
# Warmup Iteration  22: 134216354.155 ops/s
# Warmup Iteration  23: 133389642.054 ops/s
# Warmup Iteration  24: 133831211.250 ops/s
# Warmup Iteration  25: 133751095.840 ops/s
# Warmup Iteration  26: 133864374.434 ops/s
# Warmup Iteration  27: 133880720.451 ops/s
# Warmup Iteration  28: 133767879.022 ops/s
# Warmup Iteration  29: 133832044.472 ops/s
# Warmup Iteration  30: 133692665.601 ops/s
Iteration   1: 133730601.970 ops/s
Iteration   2: 133816715.297 ops/s
Iteration   3: 134351230.465 ops/s
Iteration   4: 133917088.407 ops/s
Iteration   5: 132695849.880 ops/s
Iteration   6: 133028423.104 ops/s
Iteration   7: 133267476.307 ops/s
Iteration   8: 133465381.562 ops/s
Iteration   9: 133776620.588 ops/s
Iteration  10: 133397792.123 ops/s
Iteration  11: 133403584.036 ops/s
Iteration  12: 133493531.695 ops/s
Iteration  13: 133412273.925 ops/s
Iteration  14: 132575054.345 ops/s
Iteration  15: 132894136.178 ops/s
Iteration  16: 132904420.174 ops/s
Iteration  17: 134077876.082 ops/s
Iteration  18: 133774579.567 ops/s
Iteration  19: 133754790.180 ops/s
Iteration  20: 133346815.110 ops/s
Iteration  21: 134081126.071 ops/s
Iteration  22: 134196808.438 ops/s
Iteration  23: 134238352.565 ops/s
Iteration  24: 133250296.835 ops/s
Iteration  25: 133635741.288 ops/s
Iteration  26: 134158033.787 ops/s
Iteration  27: 134456649.309 ops/s
Iteration  28: 133808613.695 ops/s
Iteration  29: 134033589.232 ops/s
Iteration  30: 133131398.492 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  133602495.024 ±(99.9%) 331824.075 ops/s [Average]
  (min, avg, max) = (132575054.345, 133602495.024, 134456649.309), stdev = 496658.692
  CI (99.9%): [133270670.948, 133934319.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  133602495.024 ± 331824.075  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2191600.337 ops/s
# Warmup Iteration   2: 4267428.747 ops/s
# Warmup Iteration   3: 4652090.185 ops/s
# Warmup Iteration   4: 4675054.908 ops/s
# Warmup Iteration   5: 3821003.761 ops/s
# Warmup Iteration   6: 4695354.058 ops/s
# Warmup Iteration   7: 4693948.105 ops/s
# Warmup Iteration   8: 4692946.667 ops/s
# Warmup Iteration   9: 4707346.279 ops/s
# Warmup Iteration  10: 4692314.219 ops/s
# Warmup Iteration  11: 4697887.646 ops/s
# Warmup Iteration  12: 4687548.979 ops/s
# Warmup Iteration  13: 4686243.644 ops/s
# Warmup Iteration  14: 4685236.150 ops/s
# Warmup Iteration  15: 4680315.612 ops/s
# Warmup Iteration  16: 4690521.068 ops/s
# Warmup Iteration  17: 4690868.958 ops/s
# Warmup Iteration  18: 4687002.195 ops/s
# Warmup Iteration  19: 4692084.268 ops/s
# Warmup Iteration  20: 4698245.305 ops/s
# Warmup Iteration  21: 4690275.024 ops/s
# Warmup Iteration  22: 4692525.147 ops/s
# Warmup Iteration  23: 4689069.744 ops/s
# Warmup Iteration  24: 4696726.012 ops/s
# Warmup Iteration  25: 4685896.137 ops/s
# Warmup Iteration  26: 4701392.145 ops/s
# Warmup Iteration  27: 4692265.253 ops/s
# Warmup Iteration  28: 4689489.766 ops/s
# Warmup Iteration  29: 4685871.011 ops/s
# Warmup Iteration  30: 4702418.174 ops/s
Iteration   1: 4691139.081 ops/s
Iteration   2: 4703725.055 ops/s
Iteration   3: 4685217.239 ops/s
Iteration   4: 4690499.218 ops/s
Iteration   5: 4690463.421 ops/s
Iteration   6: 4695695.690 ops/s
Iteration   7: 4689177.715 ops/s
Iteration   8: 4700324.474 ops/s
Iteration   9: 4704314.010 ops/s
Iteration  10: 4681644.465 ops/s
Iteration  11: 4671634.051 ops/s
Iteration  12: 4716227.226 ops/s
Iteration  13: 4685226.725 ops/s
Iteration  14: 4699175.862 ops/s
Iteration  15: 4700828.512 ops/s
Iteration  16: 4689006.442 ops/s
Iteration  17: 4692445.558 ops/s
Iteration  18: 4705482.845 ops/s
Iteration  19: 4700827.393 ops/s
Iteration  20: 4692958.235 ops/s
Iteration  21: 4689045.957 ops/s
Iteration  22: 4690513.629 ops/s
Iteration  23: 4697006.936 ops/s
Iteration  24: 4702204.515 ops/s
Iteration  25: 4683485.610 ops/s
Iteration  26: 4689102.836 ops/s
Iteration  27: 4688256.170 ops/s
Iteration  28: 4695971.109 ops/s
Iteration  29: 4697823.566 ops/s
Iteration  30: 4706097.403 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_min_without_comparator":
  4694184.032 ±(99.9%) 5983.279 ops/s [Average]
  (min, avg, max) = (4671634.051, 4694184.032, 4716227.226), stdev = 8955.490
  CI (99.9%): [4688200.753, 4700167.310] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  4694184.032 ± 5983.279  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804647.785 ops/s
# Warmup Iteration   2: 1522169.563 ops/s
# Warmup Iteration   3: 1742139.016 ops/s
# Warmup Iteration   4: 1748490.090 ops/s
# Warmup Iteration   5: 1588688.860 ops/s
# Warmup Iteration   6: 1572716.468 ops/s
# Warmup Iteration   7: 1752645.396 ops/s
# Warmup Iteration   8: 1753544.712 ops/s
# Warmup Iteration   9: 1756431.886 ops/s
# Warmup Iteration  10: 1749317.952 ops/s
# Warmup Iteration  11: 1756643.735 ops/s
# Warmup Iteration  12: 1753519.606 ops/s
# Warmup Iteration  13: 1754030.480 ops/s
# Warmup Iteration  14: 1751904.294 ops/s
# Warmup Iteration  15: 1759011.019 ops/s
# Warmup Iteration  16: 1752001.256 ops/s
# Warmup Iteration  17: 1754303.527 ops/s
# Warmup Iteration  18: 1749797.523 ops/s
# Warmup Iteration  19: 1756687.730 ops/s
# Warmup Iteration  20: 1754146.812 ops/s
# Warmup Iteration  21: 1754136.573 ops/s
# Warmup Iteration  22: 1754873.202 ops/s
# Warmup Iteration  23: 1752371.548 ops/s
# Warmup Iteration  24: 1754426.599 ops/s
# Warmup Iteration  25: 1754183.849 ops/s
# Warmup Iteration  26: 1755432.300 ops/s
# Warmup Iteration  27: 1754861.771 ops/s
# Warmup Iteration  28: 1756387.236 ops/s
# Warmup Iteration  29: 1750345.233 ops/s
# Warmup Iteration  30: 1753417.125 ops/s
Iteration   1: 1756748.630 ops/s
Iteration   2: 1752148.794 ops/s
Iteration   3: 1755014.153 ops/s
Iteration   4: 1761655.817 ops/s
Iteration   5: 1756768.356 ops/s
Iteration   6: 1760655.766 ops/s
Iteration   7: 1753509.927 ops/s
Iteration   8: 1754643.477 ops/s
Iteration   9: 1749781.534 ops/s
Iteration  10: 1749505.331 ops/s
Iteration  11: 1755666.592 ops/s
Iteration  12: 1759479.227 ops/s
Iteration  13: 1751304.771 ops/s
Iteration  14: 1744200.384 ops/s
Iteration  15: 1755515.717 ops/s
Iteration  16: 1743063.000 ops/s
Iteration  17: 1754074.384 ops/s
Iteration  18: 1751097.664 ops/s
Iteration  19: 1749802.338 ops/s
Iteration  20: 1755324.735 ops/s
Iteration  21: 1755841.943 ops/s
Iteration  22: 1758002.272 ops/s
Iteration  23: 1751133.323 ops/s
Iteration  24: 1758577.564 ops/s
Iteration  25: 1751557.137 ops/s
Iteration  26: 1747093.254 ops/s
Iteration  27: 1750410.781 ops/s
Iteration  28: 1745388.140 ops/s
Iteration  29: 1746171.875 ops/s
Iteration  30: 1751154.751 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWith":
  1752843.054 ±(99.9%) 3200.726 ops/s [Average]
  (min, avg, max) = (1743063.000, 1752843.054, 1761655.817), stdev = 4790.696
  CI (99.9%): [1749642.329, 1756043.780] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_newWith  thrpt   30  1752843.054 ± 3200.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 442157.194 ops/s
# Warmup Iteration   2: 727858.485 ops/s
# Warmup Iteration   3: 880577.035 ops/s
# Warmup Iteration   4: 888659.715 ops/s
# Warmup Iteration   5: 887397.198 ops/s
# Warmup Iteration   6: 828162.234 ops/s
# Warmup Iteration   7: 775923.460 ops/s
# Warmup Iteration   8: 890039.277 ops/s
# Warmup Iteration   9: 885490.820 ops/s
# Warmup Iteration  10: 891353.017 ops/s
# Warmup Iteration  11: 887886.083 ops/s
# Warmup Iteration  12: 889984.035 ops/s
# Warmup Iteration  13: 882149.318 ops/s
# Warmup Iteration  14: 887852.162 ops/s
# Warmup Iteration  15: 887599.574 ops/s
# Warmup Iteration  16: 887771.919 ops/s
# Warmup Iteration  17: 880802.224 ops/s
# Warmup Iteration  18: 889644.211 ops/s
# Warmup Iteration  19: 888387.965 ops/s
# Warmup Iteration  20: 889623.925 ops/s
# Warmup Iteration  21: 882387.296 ops/s
# Warmup Iteration  22: 887375.140 ops/s
# Warmup Iteration  23: 884334.890 ops/s
# Warmup Iteration  24: 892562.809 ops/s
# Warmup Iteration  25: 889474.458 ops/s
# Warmup Iteration  26: 887956.403 ops/s
# Warmup Iteration  27: 889195.015 ops/s
# Warmup Iteration  28: 892224.464 ops/s
# Warmup Iteration  29: 885447.351 ops/s
# Warmup Iteration  30: 888270.644 ops/s
Iteration   1: 882769.686 ops/s
Iteration   2: 891320.149 ops/s
Iteration   3: 888361.110 ops/s
Iteration   4: 886271.716 ops/s
Iteration   5: 896017.458 ops/s
Iteration   6: 895744.902 ops/s
Iteration   7: 879849.842 ops/s
Iteration   8: 894709.468 ops/s
Iteration   9: 877215.115 ops/s
Iteration  10: 875895.630 ops/s
Iteration  11: 878975.689 ops/s
Iteration  12: 887363.351 ops/s
Iteration  13: 897523.408 ops/s
Iteration  14: 897391.888 ops/s
Iteration  15: 887810.762 ops/s
Iteration  16: 878421.768 ops/s
Iteration  17: 893303.256 ops/s
Iteration  18: 883199.567 ops/s
Iteration  19: 893773.317 ops/s
Iteration  20: 889320.826 ops/s
Iteration  21: 887611.130 ops/s
Iteration  22: 888509.068 ops/s
Iteration  23: 891978.598 ops/s
Iteration  24: 899645.503 ops/s
Iteration  25: 893819.206 ops/s
Iteration  26: 888022.907 ops/s
Iteration  27: 893867.771 ops/s
Iteration  28: 884711.633 ops/s
Iteration  29: 892441.480 ops/s
Iteration  30: 885378.000 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithAll":
  888707.473 ±(99.9%) 4335.820 ops/s [Average]
  (min, avg, max) = (875895.630, 888707.473, 899645.503), stdev = 6489.652
  CI (99.9%): [884371.653, 893043.294] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_newWithAll  thrpt   30  888707.473 ± 4335.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16078211.723 ops/s
# Warmup Iteration   2: 36412664.754 ops/s
# Warmup Iteration   3: 37043792.371 ops/s
# Warmup Iteration   4: 31381001.035 ops/s
# Warmup Iteration   5: 36511275.207 ops/s
# Warmup Iteration   6: 37105958.587 ops/s
# Warmup Iteration   7: 36691946.939 ops/s
# Warmup Iteration   8: 37183518.516 ops/s
# Warmup Iteration   9: 37647159.164 ops/s
# Warmup Iteration  10: 37326366.205 ops/s
# Warmup Iteration  11: 37503593.056 ops/s
# Warmup Iteration  12: 37504528.847 ops/s
# Warmup Iteration  13: 37152468.489 ops/s
# Warmup Iteration  14: 37158089.811 ops/s
# Warmup Iteration  15: 36974645.162 ops/s
# Warmup Iteration  16: 37303394.089 ops/s
# Warmup Iteration  17: 37215396.658 ops/s
# Warmup Iteration  18: 37401544.025 ops/s
# Warmup Iteration  19: 37245724.859 ops/s
# Warmup Iteration  20: 37183655.799 ops/s
# Warmup Iteration  21: 37572260.121 ops/s
# Warmup Iteration  22: 37095367.801 ops/s
# Warmup Iteration  23: 37263731.953 ops/s
# Warmup Iteration  24: 37299123.476 ops/s
# Warmup Iteration  25: 37176521.555 ops/s
# Warmup Iteration  26: 36806971.227 ops/s
# Warmup Iteration  27: 37309748.754 ops/s
# Warmup Iteration  28: 37135878.434 ops/s
# Warmup Iteration  29: 37269729.466 ops/s
# Warmup Iteration  30: 36970427.545 ops/s
Iteration   1: 36665175.841 ops/s
Iteration   2: 36938497.447 ops/s
Iteration   3: 37210730.082 ops/s
Iteration   4: 37439318.112 ops/s
Iteration   5: 37967733.467 ops/s
Iteration   6: 37223304.514 ops/s
Iteration   7: 37031149.106 ops/s
Iteration   8: 37678261.871 ops/s
Iteration   9: 37129434.960 ops/s
Iteration  10: 37414928.166 ops/s
Iteration  11: 37099616.789 ops/s
Iteration  12: 37357128.130 ops/s
Iteration  13: 37333022.621 ops/s
Iteration  14: 37516992.982 ops/s
Iteration  15: 36705733.443 ops/s
Iteration  16: 37405313.325 ops/s
Iteration  17: 37515041.831 ops/s
Iteration  18: 37276536.392 ops/s
Iteration  19: 37461018.494 ops/s
Iteration  20: 37743241.972 ops/s
Iteration  21: 37929178.571 ops/s
Iteration  22: 37593865.375 ops/s
Iteration  23: 36219381.246 ops/s
Iteration  24: 37336685.930 ops/s
Iteration  25: 36695081.635 ops/s
Iteration  26: 37039054.689 ops/s
Iteration  27: 37416885.940 ops/s
Iteration  28: 37535395.373 ops/s
Iteration  29: 37806065.945 ops/s
Iteration  30: 37034865.953 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithout":
  37290621.340 ±(99.9%) 262411.089 ops/s [Average]
  (min, avg, max) = (36219381.246, 37290621.340, 37967733.467), stdev = 392764.594
  CI (99.9%): [37028210.251, 37553032.429] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_newWithout  thrpt   30  37290621.340 ± 262411.089  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 666694.497 ops/s
# Warmup Iteration   2: 966212.144 ops/s
# Warmup Iteration   3: 1237276.095 ops/s
# Warmup Iteration   4: 1245178.591 ops/s
# Warmup Iteration   5: 1244884.090 ops/s
# Warmup Iteration   6: 1245878.114 ops/s
# Warmup Iteration   7: 1242662.755 ops/s
# Warmup Iteration   8: 1020391.454 ops/s
# Warmup Iteration   9: 1243947.335 ops/s
# Warmup Iteration  10: 1240727.424 ops/s
# Warmup Iteration  11: 1242929.617 ops/s
# Warmup Iteration  12: 1244107.465 ops/s
# Warmup Iteration  13: 1242494.962 ops/s
# Warmup Iteration  14: 1238570.588 ops/s
# Warmup Iteration  15: 1242538.851 ops/s
# Warmup Iteration  16: 1243258.408 ops/s
# Warmup Iteration  17: 1247271.808 ops/s
# Warmup Iteration  18: 1240532.178 ops/s
# Warmup Iteration  19: 1247113.246 ops/s
# Warmup Iteration  20: 1243762.927 ops/s
# Warmup Iteration  21: 1247186.678 ops/s
# Warmup Iteration  22: 1241505.596 ops/s
# Warmup Iteration  23: 1246120.877 ops/s
# Warmup Iteration  24: 1243520.977 ops/s
# Warmup Iteration  25: 1244851.475 ops/s
# Warmup Iteration  26: 1245087.510 ops/s
# Warmup Iteration  27: 1241435.456 ops/s
# Warmup Iteration  28: 1242886.811 ops/s
# Warmup Iteration  29: 1245188.370 ops/s
# Warmup Iteration  30: 1246400.357 ops/s
Iteration   1: 1245807.829 ops/s
Iteration   2: 1242365.599 ops/s
Iteration   3: 1245954.644 ops/s
Iteration   4: 1245134.005 ops/s
Iteration   5: 1245056.725 ops/s
Iteration   6: 1254256.990 ops/s
Iteration   7: 1246331.174 ops/s
Iteration   8: 1242551.328 ops/s
Iteration   9: 1241548.366 ops/s
Iteration  10: 1244413.287 ops/s
Iteration  11: 1241926.004 ops/s
Iteration  12: 1248061.808 ops/s
Iteration  13: 1249495.204 ops/s
Iteration  14: 1249041.259 ops/s
Iteration  15: 1247579.587 ops/s
Iteration  16: 1249618.597 ops/s
Iteration  17: 1247235.961 ops/s
Iteration  18: 1244930.091 ops/s
Iteration  19: 1249564.034 ops/s
Iteration  20: 1245108.703 ops/s
Iteration  21: 1249078.855 ops/s
Iteration  22: 1244324.438 ops/s
Iteration  23: 1246796.348 ops/s
Iteration  24: 1246872.509 ops/s
Iteration  25: 1243204.394 ops/s
Iteration  26: 1250093.713 ops/s
Iteration  27: 1238099.786 ops/s
Iteration  28: 1247251.905 ops/s
Iteration  29: 1245412.815 ops/s
Iteration  30: 1253392.226 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_newWithoutAll":
  1246350.273 ±(99.9%) 2304.486 ops/s [Average]
  (min, avg, max) = (1238099.786, 1246350.273, 1254256.990), stdev = 3449.246
  CI (99.9%): [1244045.787, 1248654.759] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  1246350.273 ± 2304.486  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 734720.128 ops/s
# Warmup Iteration   2: 1344482.410 ops/s
# Warmup Iteration   3: 1509710.093 ops/s
# Warmup Iteration   4: 1518121.133 ops/s
# Warmup Iteration   5: 1451333.250 ops/s
# Warmup Iteration   6: 1315903.934 ops/s
# Warmup Iteration   7: 1519843.642 ops/s
# Warmup Iteration   8: 1523180.938 ops/s
# Warmup Iteration   9: 1525780.002 ops/s
# Warmup Iteration  10: 1527026.684 ops/s
# Warmup Iteration  11: 1522443.924 ops/s
# Warmup Iteration  12: 1519551.465 ops/s
# Warmup Iteration  13: 1527982.278 ops/s
# Warmup Iteration  14: 1520389.313 ops/s
# Warmup Iteration  15: 1526503.888 ops/s
# Warmup Iteration  16: 1523953.360 ops/s
# Warmup Iteration  17: 1522529.366 ops/s
# Warmup Iteration  18: 1521416.757 ops/s
# Warmup Iteration  19: 1519613.871 ops/s
# Warmup Iteration  20: 1524348.758 ops/s
# Warmup Iteration  21: 1519323.442 ops/s
# Warmup Iteration  22: 1523535.674 ops/s
# Warmup Iteration  23: 1528354.469 ops/s
# Warmup Iteration  24: 1524911.367 ops/s
# Warmup Iteration  25: 1525848.604 ops/s
# Warmup Iteration  26: 1521132.636 ops/s
# Warmup Iteration  27: 1523744.816 ops/s
# Warmup Iteration  28: 1523357.840 ops/s
# Warmup Iteration  29: 1519172.820 ops/s
# Warmup Iteration  30: 1522361.061 ops/s
Iteration   1: 1527122.356 ops/s
Iteration   2: 1521548.120 ops/s
Iteration   3: 1518950.698 ops/s
Iteration   4: 1525359.197 ops/s
Iteration   5: 1520584.819 ops/s
Iteration   6: 1528390.504 ops/s
Iteration   7: 1519185.822 ops/s
Iteration   8: 1523373.724 ops/s
Iteration   9: 1525415.042 ops/s
Iteration  10: 1521138.057 ops/s
Iteration  11: 1525576.894 ops/s
Iteration  12: 1527366.173 ops/s
Iteration  13: 1522940.458 ops/s
Iteration  14: 1524122.490 ops/s
Iteration  15: 1517459.247 ops/s
Iteration  16: 1530819.432 ops/s
Iteration  17: 1518710.452 ops/s
Iteration  18: 1522370.032 ops/s
Iteration  19: 1521527.337 ops/s
Iteration  20: 1520978.878 ops/s
Iteration  21: 1523806.445 ops/s
Iteration  22: 1522856.697 ops/s
Iteration  23: 1524959.461 ops/s
Iteration  24: 1516753.979 ops/s
Iteration  25: 1523294.520 ops/s
Iteration  26: 1524754.206 ops/s
Iteration  27: 1522527.053 ops/s
Iteration  28: 1523447.423 ops/s
Iteration  29: 1524963.886 ops/s
Iteration  30: 1524424.972 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfy":
  1523157.613 ±(99.9%) 2134.707 ops/s [Average]
  (min, avg, max) = (1516753.979, 1523157.613, 1530819.432), stdev = 3195.129
  CI (99.9%): [1521022.905, 1525292.320] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  1523157.613 ± 2134.707  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1158373.767 ops/s
# Warmup Iteration   2: 2154021.836 ops/s
# Warmup Iteration   3: 2438125.005 ops/s
# Warmup Iteration   4: 2452925.171 ops/s
# Warmup Iteration   5: 2170755.532 ops/s
# Warmup Iteration   6: 2282355.022 ops/s
# Warmup Iteration   7: 2453360.319 ops/s
# Warmup Iteration   8: 2452596.809 ops/s
# Warmup Iteration   9: 2456702.188 ops/s
# Warmup Iteration  10: 2446230.708 ops/s
# Warmup Iteration  11: 2446598.339 ops/s
# Warmup Iteration  12: 2452404.119 ops/s
# Warmup Iteration  13: 2452206.445 ops/s
# Warmup Iteration  14: 2450655.478 ops/s
# Warmup Iteration  15: 2445260.381 ops/s
# Warmup Iteration  16: 2448083.173 ops/s
# Warmup Iteration  17: 2442422.331 ops/s
# Warmup Iteration  18: 2450758.274 ops/s
# Warmup Iteration  19: 2444223.233 ops/s
# Warmup Iteration  20: 2447861.573 ops/s
# Warmup Iteration  21: 2441797.585 ops/s
# Warmup Iteration  22: 2450801.604 ops/s
# Warmup Iteration  23: 2449880.133 ops/s
# Warmup Iteration  24: 2448543.931 ops/s
# Warmup Iteration  25: 2456309.477 ops/s
# Warmup Iteration  26: 2448105.820 ops/s
# Warmup Iteration  27: 2449656.360 ops/s
# Warmup Iteration  28: 2447482.373 ops/s
# Warmup Iteration  29: 2447897.217 ops/s
# Warmup Iteration  30: 2446670.158 ops/s
Iteration   1: 2448197.625 ops/s
Iteration   2: 2450108.750 ops/s
Iteration   3: 2446814.629 ops/s
Iteration   4: 2445691.522 ops/s
Iteration   5: 2446178.675 ops/s
Iteration   6: 2442802.861 ops/s
Iteration   7: 2446860.263 ops/s
Iteration   8: 2451306.613 ops/s
Iteration   9: 2440684.303 ops/s
Iteration  10: 2451000.284 ops/s
Iteration  11: 2445467.118 ops/s
Iteration  12: 2445937.088 ops/s
Iteration  13: 2444024.998 ops/s
Iteration  14: 2445667.843 ops/s
Iteration  15: 2441448.954 ops/s
Iteration  16: 2446078.445 ops/s
Iteration  17: 2446338.561 ops/s
Iteration  18: 2450807.838 ops/s
Iteration  19: 2443394.016 ops/s
Iteration  20: 2454316.016 ops/s
Iteration  21: 2445158.244 ops/s
Iteration  22: 2452357.127 ops/s
Iteration  23: 2440443.663 ops/s
Iteration  24: 2447036.994 ops/s
Iteration  25: 2444072.771 ops/s
Iteration  26: 2457970.557 ops/s
Iteration  27: 2447434.628 ops/s
Iteration  28: 2449441.846 ops/s
Iteration  29: 2461219.996 ops/s
Iteration  30: 2452394.700 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWith":
  2447688.564 ±(99.9%) 3187.452 ops/s [Average]
  (min, avg, max) = (2440443.663, 2447688.564, 2461219.996), stdev = 4770.829
  CI (99.9%): [2444501.112, 2450876.016] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2447688.564 ± 3187.452  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29762518.234 ops/s
# Warmup Iteration   2: 52515188.248 ops/s
# Warmup Iteration   3: 57085238.010 ops/s
# Warmup Iteration   4: 56635500.121 ops/s
# Warmup Iteration   5: 47292179.178 ops/s
# Warmup Iteration   6: 56430662.923 ops/s
# Warmup Iteration   7: 57402175.006 ops/s
# Warmup Iteration   8: 57282268.182 ops/s
# Warmup Iteration   9: 56954284.593 ops/s
# Warmup Iteration  10: 56294563.928 ops/s
# Warmup Iteration  11: 56562134.872 ops/s
# Warmup Iteration  12: 56417792.648 ops/s
# Warmup Iteration  13: 57148606.539 ops/s
# Warmup Iteration  14: 56540451.138 ops/s
# Warmup Iteration  15: 56310640.858 ops/s
# Warmup Iteration  16: 56492774.401 ops/s
# Warmup Iteration  17: 56742211.450 ops/s
# Warmup Iteration  18: 56636360.124 ops/s
# Warmup Iteration  19: 57090028.804 ops/s
# Warmup Iteration  20: 55890148.213 ops/s
# Warmup Iteration  21: 56445588.607 ops/s
# Warmup Iteration  22: 55664675.292 ops/s
# Warmup Iteration  23: 56273274.013 ops/s
# Warmup Iteration  24: 56506412.464 ops/s
# Warmup Iteration  25: 56143609.675 ops/s
# Warmup Iteration  26: 56271091.274 ops/s
# Warmup Iteration  27: 56621080.949 ops/s
# Warmup Iteration  28: 56445811.873 ops/s
# Warmup Iteration  29: 56669118.783 ops/s
# Warmup Iteration  30: 56818944.261 ops/s
Iteration   1: 56717383.791 ops/s
Iteration   2: 57550788.467 ops/s
Iteration   3: 56581123.997 ops/s
Iteration   4: 56859074.795 ops/s
Iteration   5: 55805203.824 ops/s
Iteration   6: 56794252.018 ops/s
Iteration   7: 56823584.036 ops/s
Iteration   8: 56740912.268 ops/s
Iteration   9: 56902822.618 ops/s
Iteration  10: 55754711.613 ops/s
Iteration  11: 57211224.309 ops/s
Iteration  12: 56257139.996 ops/s
Iteration  13: 56450619.517 ops/s
Iteration  14: 55387539.850 ops/s
Iteration  15: 56669436.455 ops/s
Iteration  16: 56550301.602 ops/s
Iteration  17: 56852056.690 ops/s
Iteration  18: 56414436.625 ops/s
Iteration  19: 56800779.362 ops/s
Iteration  20: 56756391.170 ops/s
Iteration  21: 56969954.759 ops/s
Iteration  22: 56223614.518 ops/s
Iteration  23: 56366789.054 ops/s
Iteration  24: 56701609.210 ops/s
Iteration  25: 55601527.190 ops/s
Iteration  26: 56689118.109 ops/s
Iteration  27: 56732989.854 ops/s
Iteration  28: 57134164.246 ops/s
Iteration  29: 55870406.068 ops/s
Iteration  30: 55541407.834 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  56523712.128 ±(99.9%) 346801.895 ops/s [Average]
  (min, avg, max) = (55387539.850, 56523712.128, 57550788.467), stdev = 519076.790
  CI (99.9%): [56176910.233, 56870514.023] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  56523712.128 ± 346801.895  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2561845.777 ops/s
# Warmup Iteration   2: 5790560.446 ops/s
# Warmup Iteration   3: 4902165.024 ops/s
# Warmup Iteration   4: 5883994.551 ops/s
# Warmup Iteration   5: 5889245.243 ops/s
# Warmup Iteration   6: 5879986.531 ops/s
# Warmup Iteration   7: 5880870.859 ops/s
# Warmup Iteration   8: 5863228.866 ops/s
# Warmup Iteration   9: 5876968.803 ops/s
# Warmup Iteration  10: 5893855.608 ops/s
# Warmup Iteration  11: 5882764.562 ops/s
# Warmup Iteration  12: 5881508.193 ops/s
# Warmup Iteration  13: 5894747.402 ops/s
# Warmup Iteration  14: 5881002.375 ops/s
# Warmup Iteration  15: 5871976.998 ops/s
# Warmup Iteration  16: 5854854.140 ops/s
# Warmup Iteration  17: 5852631.464 ops/s
# Warmup Iteration  18: 5851406.840 ops/s
# Warmup Iteration  19: 5829899.876 ops/s
# Warmup Iteration  20: 5846502.303 ops/s
# Warmup Iteration  21: 5858242.165 ops/s
# Warmup Iteration  22: 5866161.554 ops/s
# Warmup Iteration  23: 5854738.153 ops/s
# Warmup Iteration  24: 5851964.872 ops/s
# Warmup Iteration  25: 5856899.500 ops/s
# Warmup Iteration  26: 5862853.507 ops/s
# Warmup Iteration  27: 5875631.869 ops/s
# Warmup Iteration  28: 5855839.325 ops/s
# Warmup Iteration  29: 5877421.429 ops/s
# Warmup Iteration  30: 5848396.285 ops/s
Iteration   1: 5858819.377 ops/s
Iteration   2: 5859792.394 ops/s
Iteration   3: 5873820.748 ops/s
Iteration   4: 5879847.046 ops/s
Iteration   5: 5885226.099 ops/s
Iteration   6: 5880537.372 ops/s
Iteration   7: 5878564.773 ops/s
Iteration   8: 5869374.867 ops/s
Iteration   9: 5889510.822 ops/s
Iteration  10: 5882389.529 ops/s
Iteration  11: 5869135.068 ops/s
Iteration  12: 5862337.200 ops/s
Iteration  13: 5886435.382 ops/s
Iteration  14: 5863345.872 ops/s
Iteration  15: 5906408.292 ops/s
Iteration  16: 5906587.290 ops/s
Iteration  17: 5872188.293 ops/s
Iteration  18: 5881330.416 ops/s
Iteration  19: 5889709.353 ops/s
Iteration  20: 5900167.892 ops/s
Iteration  21: 5890940.820 ops/s
Iteration  22: 5879662.655 ops/s
Iteration  23: 5880632.479 ops/s
Iteration  24: 5878311.206 ops/s
Iteration  25: 5878113.126 ops/s
Iteration  26: 5882657.222 ops/s
Iteration  27: 5874996.035 ops/s
Iteration  28: 5855323.957 ops/s
Iteration  29: 5889768.046 ops/s
Iteration  30: 5874163.122 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_notEmpty":
  5879336.558 ±(99.9%) 8536.832 ops/s [Average]
  (min, avg, max) = (5855323.957, 5879336.558, 5906587.290), stdev = 12777.529
  CI (99.9%): [5870799.726, 5887873.390] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_notEmpty  thrpt   30  5879336.558 ± 8536.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 168657.927 ops/s
# Warmup Iteration   2: 304492.820 ops/s
# Warmup Iteration   3: 360326.034 ops/s
# Warmup Iteration   4: 361354.697 ops/s
# Warmup Iteration   5: 361709.996 ops/s
# Warmup Iteration   6: 297078.295 ops/s
# Warmup Iteration   7: 363346.270 ops/s
# Warmup Iteration   8: 362684.432 ops/s
# Warmup Iteration   9: 362079.357 ops/s
# Warmup Iteration  10: 362637.230 ops/s
# Warmup Iteration  11: 362390.702 ops/s
# Warmup Iteration  12: 362973.215 ops/s
# Warmup Iteration  13: 362589.274 ops/s
# Warmup Iteration  14: 362921.612 ops/s
# Warmup Iteration  15: 362921.650 ops/s
# Warmup Iteration  16: 363162.262 ops/s
# Warmup Iteration  17: 362112.690 ops/s
# Warmup Iteration  18: 362575.499 ops/s
# Warmup Iteration  19: 361992.430 ops/s
# Warmup Iteration  20: 361197.868 ops/s
# Warmup Iteration  21: 361460.843 ops/s
# Warmup Iteration  22: 361808.541 ops/s
# Warmup Iteration  23: 362596.483 ops/s
# Warmup Iteration  24: 361359.071 ops/s
# Warmup Iteration  25: 362229.911 ops/s
# Warmup Iteration  26: 362244.737 ops/s
# Warmup Iteration  27: 362586.724 ops/s
# Warmup Iteration  28: 362277.608 ops/s
# Warmup Iteration  29: 362898.001 ops/s
# Warmup Iteration  30: 362440.797 ops/s
Iteration   1: 363658.140 ops/s
Iteration   2: 361385.296 ops/s
Iteration   3: 363199.999 ops/s
Iteration   4: 363183.694 ops/s
Iteration   5: 363269.429 ops/s
Iteration   6: 363181.327 ops/s
Iteration   7: 363512.581 ops/s
Iteration   8: 362421.116 ops/s
Iteration   9: 362226.966 ops/s
Iteration  10: 362016.291 ops/s
Iteration  11: 362350.909 ops/s
Iteration  12: 362416.651 ops/s
Iteration  13: 362638.226 ops/s
Iteration  14: 362393.228 ops/s
Iteration  15: 363451.005 ops/s
Iteration  16: 363049.904 ops/s
Iteration  17: 363292.550 ops/s
Iteration  18: 361640.912 ops/s
Iteration  19: 362804.069 ops/s
Iteration  20: 362139.302 ops/s
Iteration  21: 362376.195 ops/s
Iteration  22: 361902.594 ops/s
Iteration  23: 361955.752 ops/s
Iteration  24: 361932.042 ops/s
Iteration  25: 362521.542 ops/s
Iteration  26: 362604.704 ops/s
Iteration  27: 361376.446 ops/s
Iteration  28: 363157.287 ops/s
Iteration  29: 362013.137 ops/s
Iteration  30: 363109.310 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partition":
  362572.687 ±(99.9%) 428.689 ops/s [Average]
  (min, avg, max) = (361376.446, 362572.687, 363658.140), stdev = 641.642
  CI (99.9%): [362143.998, 363001.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_partition  thrpt   30  362572.687 ± 428.689  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166809.523 ops/s
# Warmup Iteration   2: 299308.029 ops/s
# Warmup Iteration   3: 353355.901 ops/s
# Warmup Iteration   4: 354990.607 ops/s
# Warmup Iteration   5: 355668.638 ops/s
# Warmup Iteration   6: 292719.802 ops/s
# Warmup Iteration   7: 355377.487 ops/s
# Warmup Iteration   8: 356109.283 ops/s
# Warmup Iteration   9: 355271.230 ops/s
# Warmup Iteration  10: 357368.035 ops/s
# Warmup Iteration  11: 356032.294 ops/s
# Warmup Iteration  12: 355823.218 ops/s
# Warmup Iteration  13: 355503.432 ops/s
# Warmup Iteration  14: 355620.544 ops/s
# Warmup Iteration  15: 355137.802 ops/s
# Warmup Iteration  16: 355981.598 ops/s
# Warmup Iteration  17: 355717.558 ops/s
# Warmup Iteration  18: 355658.100 ops/s
# Warmup Iteration  19: 355590.887 ops/s
# Warmup Iteration  20: 355751.811 ops/s
# Warmup Iteration  21: 355500.557 ops/s
# Warmup Iteration  22: 355264.777 ops/s
# Warmup Iteration  23: 355402.655 ops/s
# Warmup Iteration  24: 355363.919 ops/s
# Warmup Iteration  25: 356282.134 ops/s
# Warmup Iteration  26: 355866.225 ops/s
# Warmup Iteration  27: 355751.106 ops/s
# Warmup Iteration  28: 355690.326 ops/s
# Warmup Iteration  29: 356806.156 ops/s
# Warmup Iteration  30: 355136.012 ops/s
Iteration   1: 356711.456 ops/s
Iteration   2: 355323.989 ops/s
Iteration   3: 356554.281 ops/s
Iteration   4: 355744.611 ops/s
Iteration   5: 355978.518 ops/s
Iteration   6: 355002.504 ops/s
Iteration   7: 355518.118 ops/s
Iteration   8: 353902.220 ops/s
Iteration   9: 354609.135 ops/s
Iteration  10: 355726.509 ops/s
Iteration  11: 355853.037 ops/s
Iteration  12: 357029.665 ops/s
Iteration  13: 355845.684 ops/s
Iteration  14: 356676.842 ops/s
Iteration  15: 357802.916 ops/s
Iteration  16: 357384.336 ops/s
Iteration  17: 355126.343 ops/s
Iteration  18: 355109.924 ops/s
Iteration  19: 356277.688 ops/s
Iteration  20: 355144.876 ops/s
Iteration  21: 357283.968 ops/s
Iteration  22: 356565.637 ops/s
Iteration  23: 356954.271 ops/s
Iteration  24: 355357.312 ops/s
Iteration  25: 355846.390 ops/s
Iteration  26: 354825.561 ops/s
Iteration  27: 354889.884 ops/s
Iteration  28: 355251.019 ops/s
Iteration  29: 354764.246 ops/s
Iteration  30: 355571.423 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_partitionWith":
  355821.079 ±(99.9%) 624.119 ops/s [Average]
  (min, avg, max) = (353902.220, 355821.079, 357802.916), stdev = 934.152
  CI (99.9%): [355196.960, 356445.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_partitionWith  thrpt   30  355821.079 ± 624.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 345025.448 ops/s
# Warmup Iteration   2: 613094.860 ops/s
# Warmup Iteration   3: 677114.709 ops/s
# Warmup Iteration   4: 676564.826 ops/s
# Warmup Iteration   5: 675920.918 ops/s
# Warmup Iteration   6: 567104.249 ops/s
# Warmup Iteration   7: 676982.313 ops/s
# Warmup Iteration   8: 676611.479 ops/s
# Warmup Iteration   9: 678375.176 ops/s
# Warmup Iteration  10: 677496.998 ops/s
# Warmup Iteration  11: 677912.253 ops/s
# Warmup Iteration  12: 677015.806 ops/s
# Warmup Iteration  13: 678394.123 ops/s
# Warmup Iteration  14: 679069.382 ops/s
# Warmup Iteration  15: 677802.845 ops/s
# Warmup Iteration  16: 679611.125 ops/s
# Warmup Iteration  17: 678031.442 ops/s
# Warmup Iteration  18: 678328.254 ops/s
# Warmup Iteration  19: 678239.936 ops/s
# Warmup Iteration  20: 677537.394 ops/s
# Warmup Iteration  21: 677117.776 ops/s
# Warmup Iteration  22: 679292.571 ops/s
# Warmup Iteration  23: 679061.315 ops/s
# Warmup Iteration  24: 676642.630 ops/s
# Warmup Iteration  25: 677370.880 ops/s
# Warmup Iteration  26: 676802.801 ops/s
# Warmup Iteration  27: 677436.135 ops/s
# Warmup Iteration  28: 678413.301 ops/s
# Warmup Iteration  29: 676907.464 ops/s
# Warmup Iteration  30: 676198.686 ops/s
Iteration   1: 681383.668 ops/s
Iteration   2: 675535.360 ops/s
Iteration   3: 678115.962 ops/s
Iteration   4: 676960.520 ops/s
Iteration   5: 676404.741 ops/s
Iteration   6: 677535.367 ops/s
Iteration   7: 679893.999 ops/s
Iteration   8: 677325.474 ops/s
Iteration   9: 677361.574 ops/s
Iteration  10: 676042.837 ops/s
Iteration  11: 681257.593 ops/s
Iteration  12: 678227.618 ops/s
Iteration  13: 677570.126 ops/s
Iteration  14: 677906.879 ops/s
Iteration  15: 676312.882 ops/s
Iteration  16: 678311.333 ops/s
Iteration  17: 676732.946 ops/s
Iteration  18: 675941.678 ops/s
Iteration  19: 674733.126 ops/s
Iteration  20: 678011.436 ops/s
Iteration  21: 677149.494 ops/s
Iteration  22: 676946.624 ops/s
Iteration  23: 677627.676 ops/s
Iteration  24: 679253.876 ops/s
Iteration  25: 678804.566 ops/s
Iteration  26: 674709.669 ops/s
Iteration  27: 674412.723 ops/s
Iteration  28: 679020.399 ops/s
Iteration  29: 677313.024 ops/s
Iteration  30: 677357.722 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reduceOptional":
  677472.030 ±(99.9%) 1119.500 ops/s [Average]
  (min, avg, max) = (674412.723, 677472.030, 681383.668), stdev = 1675.615
  CI (99.9%): [676352.530, 678591.530] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  677472.030 ± 1119.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 483045.893 ops/s
# Warmup Iteration   2: 994788.480 ops/s
# Warmup Iteration   3: 1098905.527 ops/s
# Warmup Iteration   4: 1104696.435 ops/s
# Warmup Iteration   5: 914528.335 ops/s
# Warmup Iteration   6: 1110558.849 ops/s
# Warmup Iteration   7: 1106763.629 ops/s
# Warmup Iteration   8: 1107489.165 ops/s
# Warmup Iteration   9: 1107579.298 ops/s
# Warmup Iteration  10: 1106777.752 ops/s
# Warmup Iteration  11: 1106408.390 ops/s
# Warmup Iteration  12: 1105607.569 ops/s
# Warmup Iteration  13: 1105121.102 ops/s
# Warmup Iteration  14: 1103606.429 ops/s
# Warmup Iteration  15: 1108736.820 ops/s
# Warmup Iteration  16: 1103895.300 ops/s
# Warmup Iteration  17: 1108612.069 ops/s
# Warmup Iteration  18: 1110182.080 ops/s
# Warmup Iteration  19: 1107666.114 ops/s
# Warmup Iteration  20: 1109051.846 ops/s
# Warmup Iteration  21: 1108816.799 ops/s
# Warmup Iteration  22: 1109380.165 ops/s
# Warmup Iteration  23: 1108474.112 ops/s
# Warmup Iteration  24: 1108563.179 ops/s
# Warmup Iteration  25: 1107358.130 ops/s
# Warmup Iteration  26: 1108774.528 ops/s
# Warmup Iteration  27: 1109371.255 ops/s
# Warmup Iteration  28: 1109149.843 ops/s
# Warmup Iteration  29: 1110264.307 ops/s
# Warmup Iteration  30: 1106455.220 ops/s
Iteration   1: 1110079.244 ops/s
Iteration   2: 1107423.167 ops/s
Iteration   3: 1107689.275 ops/s
Iteration   4: 1110388.436 ops/s
Iteration   5: 1110554.437 ops/s
Iteration   6: 1109999.008 ops/s
Iteration   7: 1109060.364 ops/s
Iteration   8: 1110621.946 ops/s
Iteration   9: 1108302.101 ops/s
Iteration  10: 1115789.073 ops/s
Iteration  11: 1110377.953 ops/s
Iteration  12: 1109639.557 ops/s
Iteration  13: 1112865.109 ops/s
Iteration  14: 1111136.317 ops/s
Iteration  15: 1109094.925 ops/s
Iteration  16: 1114023.957 ops/s
Iteration  17: 1110397.497 ops/s
Iteration  18: 1109223.870 ops/s
Iteration  19: 1105695.521 ops/s
Iteration  20: 1107246.608 ops/s
Iteration  21: 1107115.156 ops/s
Iteration  22: 1109248.703 ops/s
Iteration  23: 1110294.025 ops/s
Iteration  24: 1106736.227 ops/s
Iteration  25: 1110450.467 ops/s
Iteration  26: 1108843.314 ops/s
Iteration  27: 1108831.563 ops/s
Iteration  28: 1110543.981 ops/s
Iteration  29: 1111186.490 ops/s
Iteration  30: 1107691.821 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_reject":
  1109685.004 ±(99.9%) 1416.470 ops/s [Average]
  (min, avg, max) = (1105695.521, 1109685.004, 1115789.073), stdev = 2120.105
  CI (99.9%): [1108268.534, 1111101.473] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_reject  thrpt   30  1109685.004 ± 1416.470  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3067511.505 ops/s
# Warmup Iteration   2: 7714014.668 ops/s
# Warmup Iteration   3: 6478339.789 ops/s
# Warmup Iteration   4: 7774732.397 ops/s
# Warmup Iteration   5: 7759942.191 ops/s
# Warmup Iteration   6: 7783953.140 ops/s
# Warmup Iteration   7: 7786682.322 ops/s
# Warmup Iteration   8: 7769619.666 ops/s
# Warmup Iteration   9: 7782675.681 ops/s
# Warmup Iteration  10: 7798295.579 ops/s
# Warmup Iteration  11: 7773110.422 ops/s
# Warmup Iteration  12: 7771859.442 ops/s
# Warmup Iteration  13: 7795644.635 ops/s
# Warmup Iteration  14: 7785843.367 ops/s
# Warmup Iteration  15: 7785295.451 ops/s
# Warmup Iteration  16: 7782040.141 ops/s
# Warmup Iteration  17: 7781916.373 ops/s
# Warmup Iteration  18: 7794216.112 ops/s
# Warmup Iteration  19: 7797142.502 ops/s
# Warmup Iteration  20: 7789339.807 ops/s
# Warmup Iteration  21: 7790768.339 ops/s
# Warmup Iteration  22: 7765294.938 ops/s
# Warmup Iteration  23: 7812270.378 ops/s
# Warmup Iteration  24: 7771325.131 ops/s
# Warmup Iteration  25: 7780016.894 ops/s
# Warmup Iteration  26: 7774392.578 ops/s
# Warmup Iteration  27: 7766919.453 ops/s
# Warmup Iteration  28: 7767391.991 ops/s
# Warmup Iteration  29: 7775273.589 ops/s
# Warmup Iteration  30: 7783284.983 ops/s
Iteration   1: 7761553.527 ops/s
Iteration   2: 7782229.248 ops/s
Iteration   3: 7803186.457 ops/s
Iteration   4: 7766535.435 ops/s
Iteration   5: 7794398.386 ops/s
Iteration   6: 7784033.117 ops/s
Iteration   7: 7781405.436 ops/s
Iteration   8: 7779501.298 ops/s
Iteration   9: 7780355.939 ops/s
Iteration  10: 7769002.128 ops/s
Iteration  11: 7777872.679 ops/s
Iteration  12: 7799708.170 ops/s
Iteration  13: 7766633.088 ops/s
Iteration  14: 7785056.870 ops/s
Iteration  15: 7777567.178 ops/s
Iteration  16: 7737555.706 ops/s
Iteration  17: 7755344.681 ops/s
Iteration  18: 7765312.158 ops/s
Iteration  19: 7804397.614 ops/s
Iteration  20: 7792408.167 ops/s
Iteration  21: 7785813.434 ops/s
Iteration  22: 7747611.516 ops/s
Iteration  23: 7762036.178 ops/s
Iteration  24: 7765322.993 ops/s
Iteration  25: 7778245.286 ops/s
Iteration  26: 7773252.840 ops/s
Iteration  27: 7778322.442 ops/s
Iteration  28: 7772583.463 ops/s
Iteration  29: 7744827.457 ops/s
Iteration  30: 7783587.644 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectToTarget":
  7775188.684 ±(99.9%) 10866.418 ops/s [Average]
  (min, avg, max) = (7737555.706, 7775188.684, 7804397.614), stdev = 16264.344
  CI (99.9%): [7764322.267, 7786055.102] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_rejectToTarget  thrpt   30  7775188.684 ± 10866.418  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 520541.613 ops/s
# Warmup Iteration   2: 1021332.816 ops/s
# Warmup Iteration   3: 1130875.902 ops/s
# Warmup Iteration   4: 1139079.826 ops/s
# Warmup Iteration   5: 951391.469 ops/s
# Warmup Iteration   6: 1129257.825 ops/s
# Warmup Iteration   7: 1141962.604 ops/s
# Warmup Iteration   8: 1138754.832 ops/s
# Warmup Iteration   9: 1138386.237 ops/s
# Warmup Iteration  10: 1140863.628 ops/s
# Warmup Iteration  11: 1139987.354 ops/s
# Warmup Iteration  12: 1135863.910 ops/s
# Warmup Iteration  13: 1139908.319 ops/s
# Warmup Iteration  14: 1140345.739 ops/s
# Warmup Iteration  15: 1141607.020 ops/s
# Warmup Iteration  16: 1138564.403 ops/s
# Warmup Iteration  17: 1139413.661 ops/s
# Warmup Iteration  18: 1142092.438 ops/s
# Warmup Iteration  19: 1139406.456 ops/s
# Warmup Iteration  20: 1141777.328 ops/s
# Warmup Iteration  21: 1143481.935 ops/s
# Warmup Iteration  22: 1139324.804 ops/s
# Warmup Iteration  23: 1142058.279 ops/s
# Warmup Iteration  24: 1139805.447 ops/s
# Warmup Iteration  25: 1142820.930 ops/s
# Warmup Iteration  26: 1138096.907 ops/s
# Warmup Iteration  27: 1140719.360 ops/s
# Warmup Iteration  28: 1141012.652 ops/s
# Warmup Iteration  29: 1140107.453 ops/s
# Warmup Iteration  30: 1141089.601 ops/s
Iteration   1: 1140999.964 ops/s
Iteration   2: 1140337.630 ops/s
Iteration   3: 1137143.510 ops/s
Iteration   4: 1138730.440 ops/s
Iteration   5: 1140330.331 ops/s
Iteration   6: 1141541.415 ops/s
Iteration   7: 1139255.745 ops/s
Iteration   8: 1140640.729 ops/s
Iteration   9: 1141137.174 ops/s
Iteration  10: 1142431.691 ops/s
Iteration  11: 1147325.043 ops/s
Iteration  12: 1145088.613 ops/s
Iteration  13: 1141434.478 ops/s
Iteration  14: 1137326.181 ops/s
Iteration  15: 1138074.656 ops/s
Iteration  16: 1145449.522 ops/s
Iteration  17: 1142941.309 ops/s
Iteration  18: 1139206.766 ops/s
Iteration  19: 1141207.664 ops/s
Iteration  20: 1142240.167 ops/s
Iteration  21: 1138330.272 ops/s
Iteration  22: 1136710.402 ops/s
Iteration  23: 1139074.788 ops/s
Iteration  24: 1138218.075 ops/s
Iteration  25: 1141275.863 ops/s
Iteration  26: 1137672.614 ops/s
Iteration  27: 1139841.465 ops/s
Iteration  28: 1137996.358 ops/s
Iteration  29: 1134892.969 ops/s
Iteration  30: 1138491.686 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith":
  1140178.251 ±(99.9%) 1821.644 ops/s [Average]
  (min, avg, max) = (1134892.969, 1140178.251, 1147325.043), stdev = 2726.552
  CI (99.9%): [1138356.606, 1141999.895] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith  thrpt   30  1140178.251 ± 1821.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 22969646.826 ops/s
# Warmup Iteration   2: 44967579.656 ops/s
# Warmup Iteration   3: 38569692.416 ops/s
# Warmup Iteration   4: 45289110.308 ops/s
# Warmup Iteration   5: 45041618.391 ops/s
# Warmup Iteration   6: 44866688.298 ops/s
# Warmup Iteration   7: 45040644.696 ops/s
# Warmup Iteration   8: 44954457.469 ops/s
# Warmup Iteration   9: 45014892.958 ops/s
# Warmup Iteration  10: 45181741.914 ops/s
# Warmup Iteration  11: 45145110.655 ops/s
# Warmup Iteration  12: 45107804.133 ops/s
# Warmup Iteration  13: 44855598.916 ops/s
# Warmup Iteration  14: 45052891.070 ops/s
# Warmup Iteration  15: 44838853.000 ops/s
# Warmup Iteration  16: 45078072.116 ops/s
# Warmup Iteration  17: 45153465.646 ops/s
# Warmup Iteration  18: 45145579.300 ops/s
# Warmup Iteration  19: 45124793.658 ops/s
# Warmup Iteration  20: 45234394.969 ops/s
# Warmup Iteration  21: 45105763.720 ops/s
# Warmup Iteration  22: 44966092.241 ops/s
# Warmup Iteration  23: 45010668.989 ops/s
# Warmup Iteration  24: 45047224.121 ops/s
# Warmup Iteration  25: 45024967.252 ops/s
# Warmup Iteration  26: 45111002.998 ops/s
# Warmup Iteration  27: 45168171.093 ops/s
# Warmup Iteration  28: 45247116.016 ops/s
# Warmup Iteration  29: 45205362.464 ops/s
# Warmup Iteration  30: 45149548.011 ops/s
Iteration   1: 45103489.345 ops/s
Iteration   2: 45258624.466 ops/s
Iteration   3: 45193948.229 ops/s
Iteration   4: 45190054.025 ops/s
Iteration   5: 45314673.167 ops/s
Iteration   6: 45197917.698 ops/s
Iteration   7: 45358957.361 ops/s
Iteration   8: 45301772.572 ops/s
Iteration   9: 45485037.374 ops/s
Iteration  10: 45010591.697 ops/s
Iteration  11: 45342850.226 ops/s
Iteration  12: 45280487.767 ops/s
Iteration  13: 45332900.979 ops/s
Iteration  14: 45292616.292 ops/s
Iteration  15: 45315224.113 ops/s
Iteration  16: 45160757.409 ops/s
Iteration  17: 45115668.643 ops/s
Iteration  18: 45078828.964 ops/s
Iteration  19: 45124147.622 ops/s
Iteration  20: 45423733.718 ops/s
Iteration  21: 45322203.791 ops/s
Iteration  22: 45161766.926 ops/s
Iteration  23: 44995442.017 ops/s
Iteration  24: 45293800.037 ops/s
Iteration  25: 45113313.268 ops/s
Iteration  26: 45261487.591 ops/s
Iteration  27: 44945144.577 ops/s
Iteration  28: 45230874.808 ops/s
Iteration  29: 45006160.125 ops/s
Iteration  30: 45278229.733 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWithToTarget":
  45216356.818 ±(99.9%) 88098.625 ops/s [Average]
  (min, avg, max) = (44945144.577, 45216356.818, 45485037.374), stdev = 131861.884
  CI (99.9%): [45128258.193, 45304455.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_rejectWithToTarget  thrpt   30  45216356.818 ± 88098.625  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621581.261 ops/s
# Warmup Iteration   2: 1320348.225 ops/s
# Warmup Iteration   3: 1388200.266 ops/s
# Warmup Iteration   4: 1400926.330 ops/s
# Warmup Iteration   5: 1160582.536 ops/s
# Warmup Iteration   6: 1402617.477 ops/s
# Warmup Iteration   7: 1402788.226 ops/s
# Warmup Iteration   8: 1400928.138 ops/s
# Warmup Iteration   9: 1401381.855 ops/s
# Warmup Iteration  10: 1402374.591 ops/s
# Warmup Iteration  11: 1398055.483 ops/s
# Warmup Iteration  12: 1399243.910 ops/s
# Warmup Iteration  13: 1401790.730 ops/s
# Warmup Iteration  14: 1402300.764 ops/s
# Warmup Iteration  15: 1400232.322 ops/s
# Warmup Iteration  16: 1399675.072 ops/s
# Warmup Iteration  17: 1403811.043 ops/s
# Warmup Iteration  18: 1402188.875 ops/s
# Warmup Iteration  19: 1405527.226 ops/s
# Warmup Iteration  20: 1398048.624 ops/s
# Warmup Iteration  21: 1399459.790 ops/s
# Warmup Iteration  22: 1400302.015 ops/s
# Warmup Iteration  23: 1401340.235 ops/s
# Warmup Iteration  24: 1403339.976 ops/s
# Warmup Iteration  25: 1405087.936 ops/s
# Warmup Iteration  26: 1403694.957 ops/s
# Warmup Iteration  27: 1404473.417 ops/s
# Warmup Iteration  28: 1403150.318 ops/s
# Warmup Iteration  29: 1403954.080 ops/s
# Warmup Iteration  30: 1402181.964 ops/s
Iteration   1: 1402185.617 ops/s
Iteration   2: 1404586.742 ops/s
Iteration   3: 1403839.677 ops/s
Iteration   4: 1408668.420 ops/s
Iteration   5: 1402173.173 ops/s
Iteration   6: 1403802.025 ops/s
Iteration   7: 1402731.267 ops/s
Iteration   8: 1407488.631 ops/s
Iteration   9: 1404589.906 ops/s
Iteration  10: 1401352.519 ops/s
Iteration  11: 1402136.202 ops/s
Iteration  12: 1406586.106 ops/s
Iteration  13: 1400806.920 ops/s
Iteration  14: 1403826.555 ops/s
Iteration  15: 1404205.723 ops/s
Iteration  16: 1405684.297 ops/s
Iteration  17: 1398960.368 ops/s
Iteration  18: 1402599.285 ops/s
Iteration  19: 1399464.545 ops/s
Iteration  20: 1407184.339 ops/s
Iteration  21: 1399885.550 ops/s
Iteration  22: 1408534.493 ops/s
Iteration  23: 1405703.313 ops/s
Iteration  24: 1410776.272 ops/s
Iteration  25: 1399816.225 ops/s
Iteration  26: 1409617.370 ops/s
Iteration  27: 1401641.328 ops/s
Iteration  28: 1401214.620 ops/s
Iteration  29: 1403373.482 ops/s
Iteration  30: 1401123.381 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith_target":
  1403818.612 ±(99.9%) 2104.281 ops/s [Average]
  (min, avg, max) = (1398960.368, 1403818.612, 1410776.272), stdev = 3149.588
  CI (99.9%): [1401714.331, 1405922.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1403818.612 ± 2104.281  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 642961.369 ops/s
# Warmup Iteration   2: 747800.430 ops/s
# Warmup Iteration   3: 940901.828 ops/s
# Warmup Iteration   4: 945181.639 ops/s
# Warmup Iteration   5: 940089.311 ops/s
# Warmup Iteration   6: 947298.785 ops/s
# Warmup Iteration   7: 944368.687 ops/s
# Warmup Iteration   8: 946273.392 ops/s
# Warmup Iteration   9: 807930.281 ops/s
# Warmup Iteration  10: 924593.921 ops/s
# Warmup Iteration  11: 943320.543 ops/s
# Warmup Iteration  12: 945187.390 ops/s
# Warmup Iteration  13: 941171.984 ops/s
# Warmup Iteration  14: 941286.785 ops/s
# Warmup Iteration  15: 944874.238 ops/s
# Warmup Iteration  16: 941201.952 ops/s
# Warmup Iteration  17: 997945.437 ops/s
# Warmup Iteration  18: 999924.120 ops/s
# Warmup Iteration  19: 995551.311 ops/s
# Warmup Iteration  20: 997511.225 ops/s
# Warmup Iteration  21: 998215.383 ops/s
# Warmup Iteration  22: 996137.694 ops/s
# Warmup Iteration  23: 998665.279 ops/s
# Warmup Iteration  24: 996593.377 ops/s
# Warmup Iteration  25: 999421.172 ops/s
# Warmup Iteration  26: 999567.930 ops/s
# Warmup Iteration  27: 998079.684 ops/s
# Warmup Iteration  28: 1000017.553 ops/s
# Warmup Iteration  29: 999584.013 ops/s
# Warmup Iteration  30: 998029.332 ops/s
Iteration   1: 995583.011 ops/s
Iteration   2: 997236.917 ops/s
Iteration   3: 995412.983 ops/s
Iteration   4: 999054.156 ops/s
Iteration   5: 997574.517 ops/s
Iteration   6: 997235.773 ops/s
Iteration   7: 1000123.993 ops/s
Iteration   8: 1000669.573 ops/s
Iteration   9: 994617.963 ops/s
Iteration  10: 998478.878 ops/s
Iteration  11: 999921.882 ops/s
Iteration  12: 994407.710 ops/s
Iteration  13: 1000907.016 ops/s
Iteration  14: 998099.685 ops/s
Iteration  15: 996947.457 ops/s
Iteration  16: 998348.337 ops/s
Iteration  17: 1001207.533 ops/s
Iteration  18: 997387.186 ops/s
Iteration  19: 1001006.469 ops/s
Iteration  20: 994927.277 ops/s
Iteration  21: 996767.346 ops/s
Iteration  22: 998395.429 ops/s
Iteration  23: 998886.855 ops/s
Iteration  24: 1001154.908 ops/s
Iteration  25: 995882.105 ops/s
Iteration  26: 993014.835 ops/s
Iteration  27: 1001886.118 ops/s
Iteration  28: 1000204.399 ops/s
Iteration  29: 992711.324 ops/s
Iteration  30: 998538.687 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_remove":
  997886.344 ±(99.9%) 1679.784 ops/s [Average]
  (min, avg, max) = (992711.324, 997886.344, 1001886.118), stdev = 2514.222
  CI (99.9%): [996206.560, 999566.128] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_remove  thrpt   30  997886.344 ± 1679.784  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 615458.828 ops/s
# Warmup Iteration   2: 749168.799 ops/s
# Warmup Iteration   3: 924285.598 ops/s
# Warmup Iteration   4: 921345.602 ops/s
# Warmup Iteration   5: 926347.183 ops/s
# Warmup Iteration   6: 925770.124 ops/s
# Warmup Iteration   7: 928640.303 ops/s
# Warmup Iteration   8: 930625.505 ops/s
# Warmup Iteration   9: 778484.690 ops/s
# Warmup Iteration  10: 923778.249 ops/s
# Warmup Iteration  11: 923893.232 ops/s
# Warmup Iteration  12: 924066.493 ops/s
# Warmup Iteration  13: 926137.849 ops/s
# Warmup Iteration  14: 923624.481 ops/s
# Warmup Iteration  15: 927600.062 ops/s
# Warmup Iteration  16: 927595.236 ops/s
# Warmup Iteration  17: 973390.007 ops/s
# Warmup Iteration  18: 973206.118 ops/s
# Warmup Iteration  19: 969948.739 ops/s
# Warmup Iteration  20: 970493.507 ops/s
# Warmup Iteration  21: 968531.859 ops/s
# Warmup Iteration  22: 968460.951 ops/s
# Warmup Iteration  23: 968351.992 ops/s
# Warmup Iteration  24: 969864.827 ops/s
# Warmup Iteration  25: 971018.120 ops/s
# Warmup Iteration  26: 968080.675 ops/s
# Warmup Iteration  27: 969455.551 ops/s
# Warmup Iteration  28: 972243.820 ops/s
# Warmup Iteration  29: 973649.742 ops/s
# Warmup Iteration  30: 972360.692 ops/s
Iteration   1: 974634.901 ops/s
Iteration   2: 971343.947 ops/s
Iteration   3: 974519.150 ops/s
Iteration   4: 969482.723 ops/s
Iteration   5: 971565.303 ops/s
Iteration   6: 973699.893 ops/s
Iteration   7: 971818.880 ops/s
Iteration   8: 971094.659 ops/s
Iteration   9: 972494.822 ops/s
Iteration  10: 972916.073 ops/s
Iteration  11: 971792.041 ops/s
Iteration  12: 972285.044 ops/s
Iteration  13: 966442.603 ops/s
Iteration  14: 972920.700 ops/s
Iteration  15: 972921.005 ops/s
Iteration  16: 973921.487 ops/s
Iteration  17: 973508.083 ops/s
Iteration  18: 969081.304 ops/s
Iteration  19: 971012.995 ops/s
Iteration  20: 970494.834 ops/s
Iteration  21: 971043.364 ops/s
Iteration  22: 974555.274 ops/s
Iteration  23: 974009.031 ops/s
Iteration  24: 976177.579 ops/s
Iteration  25: 975789.597 ops/s
Iteration  26: 969522.646 ops/s
Iteration  27: 970135.529 ops/s
Iteration  28: 975003.927 ops/s
Iteration  29: 973950.478 ops/s
Iteration  30: 976554.266 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_removeAll":
  972489.738 ±(99.9%) 1543.518 ops/s [Average]
  (min, avg, max) = (966442.603, 972489.738, 976554.266), stdev = 2310.266
  CI (99.9%): [970946.220, 974033.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_removeAll  thrpt   30  972489.738 ± 1543.518  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 726493.867 ops/s
# Warmup Iteration   2: 781516.221 ops/s
# Warmup Iteration   3: 990049.070 ops/s
# Warmup Iteration   4: 991103.627 ops/s
# Warmup Iteration   5: 983577.160 ops/s
# Warmup Iteration   6: 989725.111 ops/s
# Warmup Iteration   7: 991792.696 ops/s
# Warmup Iteration   8: 990373.228 ops/s
# Warmup Iteration   9: 991231.666 ops/s
# Warmup Iteration  10: 992443.709 ops/s
# Warmup Iteration  11: 878814.047 ops/s
# Warmup Iteration  12: 948687.016 ops/s
# Warmup Iteration  13: 992450.571 ops/s
# Warmup Iteration  14: 986673.342 ops/s
# Warmup Iteration  15: 990791.470 ops/s
# Warmup Iteration  16: 989320.894 ops/s
# Warmup Iteration  17: 1052712.242 ops/s
# Warmup Iteration  18: 1051453.895 ops/s
# Warmup Iteration  19: 1051537.353 ops/s
# Warmup Iteration  20: 1053309.118 ops/s
# Warmup Iteration  21: 1050530.722 ops/s
# Warmup Iteration  22: 1049956.740 ops/s
# Warmup Iteration  23: 1053934.133 ops/s
# Warmup Iteration  24: 1053738.588 ops/s
# Warmup Iteration  25: 1048989.464 ops/s
# Warmup Iteration  26: 1052249.508 ops/s
# Warmup Iteration  27: 1050324.157 ops/s
# Warmup Iteration  28: 1052318.442 ops/s
# Warmup Iteration  29: 1051801.331 ops/s
# Warmup Iteration  30: 1052296.814 ops/s
Iteration   1: 1049882.046 ops/s
Iteration   2: 1054519.581 ops/s
Iteration   3: 1049964.693 ops/s
Iteration   4: 1051721.835 ops/s
Iteration   5: 1051506.010 ops/s
Iteration   6: 1053745.366 ops/s
Iteration   7: 1048948.102 ops/s
Iteration   8: 1053420.208 ops/s
Iteration   9: 1055420.974 ops/s
Iteration  10: 1056574.705 ops/s
Iteration  11: 1055940.020 ops/s
Iteration  12: 1052017.219 ops/s
Iteration  13: 1051469.642 ops/s
Iteration  14: 1051213.360 ops/s
Iteration  15: 1050416.099 ops/s
Iteration  16: 1049066.876 ops/s
Iteration  17: 1051492.864 ops/s
Iteration  18: 1048686.136 ops/s
Iteration  19: 1051594.068 ops/s
Iteration  20: 1055027.532 ops/s
Iteration  21: 1054928.332 ops/s
Iteration  22: 1052931.369 ops/s
Iteration  23: 1051310.333 ops/s
Iteration  24: 1057258.229 ops/s
Iteration  25: 1050083.278 ops/s
Iteration  26: 1053310.328 ops/s
Iteration  27: 1054582.709 ops/s
Iteration  28: 1053871.949 ops/s
Iteration  29: 1051139.446 ops/s
Iteration  30: 1053490.807 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_retainAll":
  1052517.804 ±(99.9%) 1561.766 ops/s [Average]
  (min, avg, max) = (1048686.136, 1052517.804, 1057258.229), stdev = 2337.579
  CI (99.9%): [1050956.037, 1054079.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_retainAll  thrpt   30  1052517.804 ± 1561.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 235193.056 ops/s
# Warmup Iteration   2: 474908.597 ops/s
# Warmup Iteration   3: 534797.285 ops/s
# Warmup Iteration   4: 538708.495 ops/s
# Warmup Iteration   5: 454602.558 ops/s
# Warmup Iteration   6: 529751.595 ops/s
# Warmup Iteration   7: 540554.550 ops/s
# Warmup Iteration   8: 539191.979 ops/s
# Warmup Iteration   9: 538089.043 ops/s
# Warmup Iteration  10: 539171.353 ops/s
# Warmup Iteration  11: 538523.883 ops/s
# Warmup Iteration  12: 540772.343 ops/s
# Warmup Iteration  13: 539436.831 ops/s
# Warmup Iteration  14: 539034.130 ops/s
# Warmup Iteration  15: 537388.085 ops/s
# Warmup Iteration  16: 538272.196 ops/s
# Warmup Iteration  17: 539718.236 ops/s
# Warmup Iteration  18: 540123.628 ops/s
# Warmup Iteration  19: 537132.726 ops/s
# Warmup Iteration  20: 539901.589 ops/s
# Warmup Iteration  21: 539088.592 ops/s
# Warmup Iteration  22: 537759.440 ops/s
# Warmup Iteration  23: 539443.486 ops/s
# Warmup Iteration  24: 537540.991 ops/s
# Warmup Iteration  25: 537427.416 ops/s
# Warmup Iteration  26: 539360.502 ops/s
# Warmup Iteration  27: 537610.173 ops/s
# Warmup Iteration  28: 537265.407 ops/s
# Warmup Iteration  29: 539883.651 ops/s
# Warmup Iteration  30: 539122.235 ops/s
Iteration   1: 539977.388 ops/s
Iteration   2: 540071.627 ops/s
Iteration   3: 539446.448 ops/s
Iteration   4: 537556.057 ops/s
Iteration   5: 540997.820 ops/s
Iteration   6: 539740.069 ops/s
Iteration   7: 538534.151 ops/s
Iteration   8: 540460.974 ops/s
Iteration   9: 539938.183 ops/s
Iteration  10: 538027.078 ops/s
Iteration  11: 540979.844 ops/s
Iteration  12: 539182.842 ops/s
Iteration  13: 538992.325 ops/s
Iteration  14: 539281.944 ops/s
Iteration  15: 539810.297 ops/s
Iteration  16: 539753.659 ops/s
Iteration  17: 538866.276 ops/s
Iteration  18: 538347.327 ops/s
Iteration  19: 540183.322 ops/s
Iteration  20: 538649.720 ops/s
Iteration  21: 540207.129 ops/s
Iteration  22: 540182.342 ops/s
Iteration  23: 538868.625 ops/s
Iteration  24: 539238.500 ops/s
Iteration  25: 540025.133 ops/s
Iteration  26: 537899.746 ops/s
Iteration  27: 539065.080 ops/s
Iteration  28: 537940.483 ops/s
Iteration  29: 540112.644 ops/s
Iteration  30: 537963.328 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_select":
  539343.345 ±(99.9%) 625.552 ops/s [Average]
  (min, avg, max) = (537556.057, 539343.345, 540997.820), stdev = 936.297
  CI (99.9%): [538717.793, 539968.897] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_select  thrpt   30  539343.345 ± 625.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12962180.760 ops/s
# Warmup Iteration   2: 18460470.191 ops/s
# Warmup Iteration   3: 21852287.132 ops/s
# Warmup Iteration   4: 21728121.758 ops/s
# Warmup Iteration   5: 21920046.375 ops/s
# Warmup Iteration   6: 21830451.239 ops/s
# Warmup Iteration   7: 18944226.888 ops/s
# Warmup Iteration   8: 21420062.731 ops/s
# Warmup Iteration   9: 21923579.482 ops/s
# Warmup Iteration  10: 21917344.668 ops/s
# Warmup Iteration  11: 21893464.786 ops/s
# Warmup Iteration  12: 21878652.809 ops/s
# Warmup Iteration  13: 21896371.259 ops/s
# Warmup Iteration  14: 21925994.270 ops/s
# Warmup Iteration  15: 21887899.888 ops/s
# Warmup Iteration  16: 21960081.356 ops/s
# Warmup Iteration  17: 21900137.193 ops/s
# Warmup Iteration  18: 21898887.870 ops/s
# Warmup Iteration  19: 21912941.938 ops/s
# Warmup Iteration  20: 21867869.274 ops/s
# Warmup Iteration  21: 21929172.988 ops/s
# Warmup Iteration  22: 21856612.065 ops/s
# Warmup Iteration  23: 21898567.750 ops/s
# Warmup Iteration  24: 21883426.111 ops/s
# Warmup Iteration  25: 21889305.099 ops/s
# Warmup Iteration  26: 21915036.679 ops/s
# Warmup Iteration  27: 21885603.108 ops/s
# Warmup Iteration  28: 21886382.888 ops/s
# Warmup Iteration  29: 21943417.685 ops/s
# Warmup Iteration  30: 21869411.381 ops/s
Iteration   1: 21876477.352 ops/s
Iteration   2: 21905541.846 ops/s
Iteration   3: 21881764.119 ops/s
Iteration   4: 21910650.909 ops/s
Iteration   5: 21903824.072 ops/s
Iteration   6: 21807955.093 ops/s
Iteration   7: 21863003.269 ops/s
Iteration   8: 21869260.542 ops/s
Iteration   9: 21916279.574 ops/s
Iteration  10: 21833674.817 ops/s
Iteration  11: 21890942.578 ops/s
Iteration  12: 21931542.610 ops/s
Iteration  13: 21929011.925 ops/s
Iteration  14: 21871803.797 ops/s
Iteration  15: 21922216.835 ops/s
Iteration  16: 21911959.214 ops/s
Iteration  17: 21956449.384 ops/s
Iteration  18: 21827552.234 ops/s
Iteration  19: 21946229.573 ops/s
Iteration  20: 21912734.617 ops/s
Iteration  21: 21936506.971 ops/s
Iteration  22: 21930470.458 ops/s
Iteration  23: 21924757.703 ops/s
Iteration  24: 21934280.448 ops/s
Iteration  25: 21903314.266 ops/s
Iteration  26: 21891250.132 ops/s
Iteration  27: 21877805.145 ops/s
Iteration  28: 21923931.755 ops/s
Iteration  29: 21819146.250 ops/s
Iteration  30: 21952669.717 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectByOccurrences":
  21898766.907 ±(99.9%) 26332.139 ops/s [Average]
  (min, avg, max) = (21807955.093, 21898766.907, 21956449.384), stdev = 39412.709
  CI (99.9%): [21872434.768, 21925099.046] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  21898766.907 ± 26332.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 53421256.400 ops/s
# Warmup Iteration   2: 110386345.044 ops/s
# Warmup Iteration   3: 102573166.563 ops/s
# Warmup Iteration   4: 120877958.770 ops/s
# Warmup Iteration   5: 121260843.275 ops/s
# Warmup Iteration   6: 121220665.862 ops/s
# Warmup Iteration   7: 120340267.741 ops/s
# Warmup Iteration   8: 120533477.681 ops/s
# Warmup Iteration   9: 121013334.358 ops/s
# Warmup Iteration  10: 120991301.399 ops/s
# Warmup Iteration  11: 120455695.235 ops/s
# Warmup Iteration  12: 120924448.064 ops/s
# Warmup Iteration  13: 120969191.633 ops/s
# Warmup Iteration  14: 120936287.302 ops/s
# Warmup Iteration  15: 121145665.813 ops/s
# Warmup Iteration  16: 121254481.417 ops/s
# Warmup Iteration  17: 120532089.970 ops/s
# Warmup Iteration  18: 120126499.621 ops/s
# Warmup Iteration  19: 120064659.445 ops/s
# Warmup Iteration  20: 120542379.312 ops/s
# Warmup Iteration  21: 120079142.039 ops/s
# Warmup Iteration  22: 120232066.737 ops/s
# Warmup Iteration  23: 119927431.459 ops/s
# Warmup Iteration  24: 119206443.543 ops/s
# Warmup Iteration  25: 120221848.021 ops/s
# Warmup Iteration  26: 120570977.293 ops/s
# Warmup Iteration  27: 120114188.189 ops/s
# Warmup Iteration  28: 120563332.290 ops/s
# Warmup Iteration  29: 120248703.522 ops/s
# Warmup Iteration  30: 120382804.470 ops/s
Iteration   1: 119998188.296 ops/s
Iteration   2: 120816453.782 ops/s
Iteration   3: 120486563.713 ops/s
Iteration   4: 120716047.169 ops/s
Iteration   5: 120100496.017 ops/s
Iteration   6: 120817892.301 ops/s
Iteration   7: 120667760.765 ops/s
Iteration   8: 120155531.962 ops/s
Iteration   9: 120339491.051 ops/s
Iteration  10: 120194477.777 ops/s
Iteration  11: 119853048.319 ops/s
Iteration  12: 120502658.900 ops/s
Iteration  13: 120040320.108 ops/s
Iteration  14: 119599816.282 ops/s
Iteration  15: 119330384.244 ops/s
Iteration  16: 120859797.841 ops/s
Iteration  17: 119425292.962 ops/s
Iteration  18: 120194559.330 ops/s
Iteration  19: 120614379.841 ops/s
Iteration  20: 119767512.785 ops/s
Iteration  21: 120333358.815 ops/s
Iteration  22: 119678476.458 ops/s
Iteration  23: 120000025.036 ops/s
Iteration  24: 119684601.103 ops/s
Iteration  25: 119657402.145 ops/s
Iteration  26: 119450672.828 ops/s
Iteration  27: 120503607.396 ops/s
Iteration  28: 120245429.117 ops/s
Iteration  29: 120549908.286 ops/s
Iteration  30: 120456622.308 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectDuplicates":
  120168025.898 ±(99.9%) 300138.515 ops/s [Average]
  (min, avg, max) = (119330384.244, 120168025.898, 120859797.841), stdev = 449233.233
  CI (99.9%): [119867887.383, 120468164.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  120168025.898 ± 300138.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 30712378.192 ops/s
# Warmup Iteration   2: 63321589.438 ops/s
# Warmup Iteration   3: 60816253.555 ops/s
# Warmup Iteration   4: 51126955.192 ops/s
# Warmup Iteration   5: 59947704.979 ops/s
# Warmup Iteration   6: 59849167.931 ops/s
# Warmup Iteration   7: 59855274.551 ops/s
# Warmup Iteration   8: 60058464.194 ops/s
# Warmup Iteration   9: 60095700.179 ops/s
# Warmup Iteration  10: 59811229.586 ops/s
# Warmup Iteration  11: 60123843.063 ops/s
# Warmup Iteration  12: 60128199.442 ops/s
# Warmup Iteration  13: 60117650.364 ops/s
# Warmup Iteration  14: 60070465.193 ops/s
# Warmup Iteration  15: 60069606.221 ops/s
# Warmup Iteration  16: 60253566.638 ops/s
# Warmup Iteration  17: 60193356.862 ops/s
# Warmup Iteration  18: 60104043.786 ops/s
# Warmup Iteration  19: 60095509.559 ops/s
# Warmup Iteration  20: 60259310.763 ops/s
# Warmup Iteration  21: 59929993.052 ops/s
# Warmup Iteration  22: 60004379.866 ops/s
# Warmup Iteration  23: 60241963.046 ops/s
# Warmup Iteration  24: 60254801.180 ops/s
# Warmup Iteration  25: 60101229.425 ops/s
# Warmup Iteration  26: 60247945.995 ops/s
# Warmup Iteration  27: 60182848.447 ops/s
# Warmup Iteration  28: 60174165.662 ops/s
# Warmup Iteration  29: 60438722.890 ops/s
# Warmup Iteration  30: 60182238.633 ops/s
Iteration   1: 60469125.590 ops/s
Iteration   2: 59966019.229 ops/s
Iteration   3: 60137565.241 ops/s
Iteration   4: 60264188.990 ops/s
Iteration   5: 60047076.474 ops/s
Iteration   6: 60523568.892 ops/s
Iteration   7: 60128975.084 ops/s
Iteration   8: 60188414.405 ops/s
Iteration   9: 60402495.411 ops/s
Iteration  10: 60149788.584 ops/s
Iteration  11: 60340236.641 ops/s
Iteration  12: 60123950.156 ops/s
Iteration  13: 60175507.462 ops/s
Iteration  14: 60258858.777 ops/s
Iteration  15: 60180212.700 ops/s
Iteration  16: 60102050.487 ops/s
Iteration  17: 60185988.240 ops/s
Iteration  18: 59886445.716 ops/s
Iteration  19: 60343335.719 ops/s
Iteration  20: 60144360.382 ops/s
Iteration  21: 59948628.847 ops/s
Iteration  22: 59936153.904 ops/s
Iteration  23: 60031706.842 ops/s
Iteration  24: 60118152.515 ops/s
Iteration  25: 59936183.285 ops/s
Iteration  26: 60171858.676 ops/s
Iteration  27: 60132638.457 ops/s
Iteration  28: 60090053.242 ops/s
Iteration  29: 60117061.896 ops/s
Iteration  30: 59929371.344 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectInstancesOf":
  60147665.773 ±(99.9%) 105741.858 ops/s [Average]
  (min, avg, max) = (59886445.716, 60147665.773, 60523568.892), stdev = 158269.447
  CI (99.9%): [60041923.915, 60253407.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  60147665.773 ± 105741.858  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3073271.132 ops/s
# Warmup Iteration   2: 7699899.579 ops/s
# Warmup Iteration   3: 6464036.319 ops/s
# Warmup Iteration   4: 7759727.742 ops/s
# Warmup Iteration   5: 7742048.986 ops/s
# Warmup Iteration   6: 7769403.027 ops/s
# Warmup Iteration   7: 7765274.327 ops/s
# Warmup Iteration   8: 7754176.939 ops/s
# Warmup Iteration   9: 7766991.063 ops/s
# Warmup Iteration  10: 7781393.629 ops/s
# Warmup Iteration  11: 7740063.079 ops/s
# Warmup Iteration  12: 7745850.461 ops/s
# Warmup Iteration  13: 7758385.039 ops/s
# Warmup Iteration  14: 7765785.315 ops/s
# Warmup Iteration  15: 7740882.496 ops/s
# Warmup Iteration  16: 7734047.624 ops/s
# Warmup Iteration  17: 7762560.169 ops/s
# Warmup Iteration  18: 7756476.441 ops/s
# Warmup Iteration  19: 7762958.986 ops/s
# Warmup Iteration  20: 7747265.182 ops/s
# Warmup Iteration  21: 7777090.950 ops/s
# Warmup Iteration  22: 7744110.281 ops/s
# Warmup Iteration  23: 7738887.731 ops/s
# Warmup Iteration  24: 7762341.615 ops/s
# Warmup Iteration  25: 7782458.895 ops/s
# Warmup Iteration  26: 7755726.629 ops/s
# Warmup Iteration  27: 7752341.987 ops/s
# Warmup Iteration  28: 7759269.019 ops/s
# Warmup Iteration  29: 7768832.122 ops/s
# Warmup Iteration  30: 7770388.293 ops/s
Iteration   1: 7766484.955 ops/s
Iteration   2: 7711466.775 ops/s
Iteration   3: 7792649.987 ops/s
Iteration   4: 7778963.597 ops/s
Iteration   5: 7743583.430 ops/s
Iteration   6: 7761468.632 ops/s
Iteration   7: 7778301.743 ops/s
Iteration   8: 7738196.012 ops/s
Iteration   9: 7806093.971 ops/s
Iteration  10: 7765030.579 ops/s
Iteration  11: 7762542.663 ops/s
Iteration  12: 7752734.962 ops/s
Iteration  13: 7763457.031 ops/s
Iteration  14: 7681419.648 ops/s
Iteration  15: 7783876.572 ops/s
Iteration  16: 7765426.385 ops/s
Iteration  17: 7764117.861 ops/s
Iteration  18: 7708536.502 ops/s
Iteration  19: 7731446.579 ops/s
Iteration  20: 7774994.609 ops/s
Iteration  21: 7757101.759 ops/s
Iteration  22: 7750332.658 ops/s
Iteration  23: 7767603.155 ops/s
Iteration  24: 7735211.931 ops/s
Iteration  25: 7746113.719 ops/s
Iteration  26: 7749469.427 ops/s
Iteration  27: 7745079.747 ops/s
Iteration  28: 7732733.324 ops/s
Iteration  29: 7704021.931 ops/s
Iteration  30: 7735986.456 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectToTarget":
  7751814.887 ±(99.9%) 18128.242 ops/s [Average]
  (min, avg, max) = (7681419.648, 7751814.887, 7806093.971), stdev = 27133.501
  CI (99.9%): [7733686.645, 7769943.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectToTarget  thrpt   30  7751814.887 ± 18128.242  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 876609.627 ops/s
# Warmup Iteration   2: 1408894.515 ops/s
# Warmup Iteration   3: 1692627.939 ops/s
# Warmup Iteration   4: 1717981.211 ops/s
# Warmup Iteration   5: 1696209.363 ops/s
# Warmup Iteration   6: 1622100.296 ops/s
# Warmup Iteration   7: 1476444.891 ops/s
# Warmup Iteration   8: 1693307.221 ops/s
# Warmup Iteration   9: 1706138.675 ops/s
# Warmup Iteration  10: 1714152.748 ops/s
# Warmup Iteration  11: 1691032.619 ops/s
# Warmup Iteration  12: 1708132.294 ops/s
# Warmup Iteration  13: 1732401.509 ops/s
# Warmup Iteration  14: 1693143.832 ops/s
# Warmup Iteration  15: 1705959.214 ops/s
# Warmup Iteration  16: 1717578.258 ops/s
# Warmup Iteration  17: 1722888.680 ops/s
# Warmup Iteration  18: 1717670.853 ops/s
# Warmup Iteration  19: 1710704.530 ops/s
# Warmup Iteration  20: 1695166.260 ops/s
# Warmup Iteration  21: 1722648.391 ops/s
# Warmup Iteration  22: 1681497.091 ops/s
# Warmup Iteration  23: 1722446.835 ops/s
# Warmup Iteration  24: 1715464.632 ops/s
# Warmup Iteration  25: 1717350.576 ops/s
# Warmup Iteration  26: 1714780.757 ops/s
# Warmup Iteration  27: 1713539.877 ops/s
# Warmup Iteration  28: 1712644.971 ops/s
# Warmup Iteration  29: 1702097.691 ops/s
# Warmup Iteration  30: 1720704.416 ops/s
Iteration   1: 1722593.358 ops/s
Iteration   2: 1725591.128 ops/s
Iteration   3: 1701771.922 ops/s
Iteration   4: 1721035.091 ops/s
Iteration   5: 1715281.071 ops/s
Iteration   6: 1720144.550 ops/s
Iteration   7: 1691986.820 ops/s
Iteration   8: 1718942.675 ops/s
Iteration   9: 1711939.306 ops/s
Iteration  10: 1715820.240 ops/s
Iteration  11: 1700495.281 ops/s
Iteration  12: 1719386.503 ops/s
Iteration  13: 1729772.043 ops/s
Iteration  14: 1678501.639 ops/s
Iteration  15: 1690206.589 ops/s
Iteration  16: 1705126.578 ops/s
Iteration  17: 1716379.936 ops/s
Iteration  18: 1727498.796 ops/s
Iteration  19: 1694745.108 ops/s
Iteration  20: 1707115.587 ops/s
Iteration  21: 1708786.200 ops/s
Iteration  22: 1715031.822 ops/s
Iteration  23: 1698585.907 ops/s
Iteration  24: 1714403.037 ops/s
Iteration  25: 1734863.958 ops/s
Iteration  26: 1724254.437 ops/s
Iteration  27: 1719456.068 ops/s
Iteration  28: 1726743.173 ops/s
Iteration  29: 1707909.102 ops/s
Iteration  30: 1738493.366 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectUnique":
  1713428.710 ±(99.9%) 9251.168 ops/s [Average]
  (min, avg, max) = (1678501.639, 1713428.710, 1738493.366), stdev = 13846.713
  CI (99.9%): [1704177.542, 1722679.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectUnique  thrpt   30  1713428.710 ± 9251.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 255549.215 ops/s
# Warmup Iteration   2: 486758.895 ops/s
# Warmup Iteration   3: 538411.967 ops/s
# Warmup Iteration   4: 541000.937 ops/s
# Warmup Iteration   5: 473905.519 ops/s
# Warmup Iteration   6: 514966.727 ops/s
# Warmup Iteration   7: 543337.929 ops/s
# Warmup Iteration   8: 543864.518 ops/s
# Warmup Iteration   9: 543301.073 ops/s
# Warmup Iteration  10: 541429.993 ops/s
# Warmup Iteration  11: 543112.625 ops/s
# Warmup Iteration  12: 545009.265 ops/s
# Warmup Iteration  13: 543356.732 ops/s
# Warmup Iteration  14: 542004.661 ops/s
# Warmup Iteration  15: 542044.853 ops/s
# Warmup Iteration  16: 541693.570 ops/s
# Warmup Iteration  17: 543233.342 ops/s
# Warmup Iteration  18: 544152.812 ops/s
# Warmup Iteration  19: 543141.375 ops/s
# Warmup Iteration  20: 543164.757 ops/s
# Warmup Iteration  21: 543150.670 ops/s
# Warmup Iteration  22: 542748.283 ops/s
# Warmup Iteration  23: 544013.054 ops/s
# Warmup Iteration  24: 542365.586 ops/s
# Warmup Iteration  25: 544188.267 ops/s
# Warmup Iteration  26: 543910.469 ops/s
# Warmup Iteration  27: 544064.518 ops/s
# Warmup Iteration  28: 543540.076 ops/s
# Warmup Iteration  29: 543039.936 ops/s
# Warmup Iteration  30: 544319.491 ops/s
Iteration   1: 541784.820 ops/s
Iteration   2: 546193.908 ops/s
Iteration   3: 541716.002 ops/s
Iteration   4: 543494.221 ops/s
Iteration   5: 543069.540 ops/s
Iteration   6: 543991.743 ops/s
Iteration   7: 542133.636 ops/s
Iteration   8: 541959.942 ops/s
Iteration   9: 542358.567 ops/s
Iteration  10: 543195.696 ops/s
Iteration  11: 544025.459 ops/s
Iteration  12: 544831.340 ops/s
Iteration  13: 542590.478 ops/s
Iteration  14: 543150.809 ops/s
Iteration  15: 541345.161 ops/s
Iteration  16: 543697.650 ops/s
Iteration  17: 541327.516 ops/s
Iteration  18: 541827.166 ops/s
Iteration  19: 543372.175 ops/s
Iteration  20: 543693.801 ops/s
Iteration  21: 543478.899 ops/s
Iteration  22: 541790.455 ops/s
Iteration  23: 542518.459 ops/s
Iteration  24: 544046.612 ops/s
Iteration  25: 541974.790 ops/s
Iteration  26: 544052.113 ops/s
Iteration  27: 543253.721 ops/s
Iteration  28: 543382.783 ops/s
Iteration  29: 543076.968 ops/s
Iteration  30: 542887.318 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith":
  543007.392 ±(99.9%) 732.514 ops/s [Average]
  (min, avg, max) = (541327.516, 543007.392, 546193.908), stdev = 1096.392
  CI (99.9%): [542274.878, 543739.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectWith  thrpt   30  543007.392 ± 732.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWithToTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWithToTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4749278.772 ops/s
# Warmup Iteration   2: 11812589.445 ops/s
# Warmup Iteration   3: 11886446.174 ops/s
# Warmup Iteration   4: 9845799.495 ops/s
# Warmup Iteration   5: 11930388.258 ops/s
# Warmup Iteration   6: 11932704.432 ops/s
# Warmup Iteration   7: 11925252.327 ops/s
# Warmup Iteration   8: 11904537.665 ops/s
# Warmup Iteration   9: 11916122.302 ops/s
# Warmup Iteration  10: 11881134.762 ops/s
# Warmup Iteration  11: 11887805.383 ops/s
# Warmup Iteration  12: 11946089.049 ops/s
# Warmup Iteration  13: 11964103.562 ops/s
# Warmup Iteration  14: 11927672.115 ops/s
# Warmup Iteration  15: 11945656.285 ops/s
# Warmup Iteration  16: 11970537.385 ops/s
# Warmup Iteration  17: 11959662.033 ops/s
# Warmup Iteration  18: 11934017.112 ops/s
# Warmup Iteration  19: 11912805.017 ops/s
# Warmup Iteration  20: 11945798.340 ops/s
# Warmup Iteration  21: 11957296.069 ops/s
# Warmup Iteration  22: 11948260.464 ops/s
# Warmup Iteration  23: 11973871.153 ops/s
# Warmup Iteration  24: 11917996.423 ops/s
# Warmup Iteration  25: 11956276.723 ops/s
# Warmup Iteration  26: 11960368.679 ops/s
# Warmup Iteration  27: 11940372.417 ops/s
# Warmup Iteration  28: 11909104.313 ops/s
# Warmup Iteration  29: 11928268.212 ops/s
# Warmup Iteration  30: 11942319.735 ops/s
Iteration   1: 11924321.552 ops/s
Iteration   2: 11970754.070 ops/s
Iteration   3: 11971595.299 ops/s
Iteration   4: 11948607.693 ops/s
Iteration   5: 11920947.281 ops/s
Iteration   6: 11928812.555 ops/s
Iteration   7: 11946298.930 ops/s
Iteration   8: 11931808.350 ops/s
Iteration   9: 11961540.628 ops/s
Iteration  10: 11888299.509 ops/s
Iteration  11: 11954773.261 ops/s
Iteration  12: 11986386.469 ops/s
Iteration  13: 11947776.237 ops/s
Iteration  14: 11929438.942 ops/s
Iteration  15: 11865829.980 ops/s
Iteration  16: 11934204.240 ops/s
Iteration  17: 11936388.539 ops/s
Iteration  18: 11917971.661 ops/s
Iteration  19: 11956662.882 ops/s
Iteration  20: 11931164.048 ops/s
Iteration  21: 11994471.066 ops/s
Iteration  22: 11947553.425 ops/s
Iteration  23: 11959194.350 ops/s
Iteration  24: 11946785.199 ops/s
Iteration  25: 11963906.597 ops/s
Iteration  26: 11932939.018 ops/s
Iteration  27: 11942914.974 ops/s
Iteration  28: 11946170.589 ops/s
Iteration  29: 11940697.279 ops/s
Iteration  30: 11949554.117 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWithToTarget":
  11942592.291 ±(99.9%) 17066.718 ops/s [Average]
  (min, avg, max) = (11865829.980, 11942592.291, 11994471.066), stdev = 25544.661
  CI (99.9%): [11925525.574, 11959659.009] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectWithToTarget  thrpt   30  11942592.291 ± 17066.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246921.512 ops/s
# Warmup Iteration   2: 486394.333 ops/s
# Warmup Iteration   3: 544690.592 ops/s
# Warmup Iteration   4: 548783.037 ops/s
# Warmup Iteration   5: 476924.769 ops/s
# Warmup Iteration   6: 523397.755 ops/s
# Warmup Iteration   7: 545976.844 ops/s
# Warmup Iteration   8: 547070.913 ops/s
# Warmup Iteration   9: 545686.301 ops/s
# Warmup Iteration  10: 546817.438 ops/s
# Warmup Iteration  11: 547248.133 ops/s
# Warmup Iteration  12: 547219.279 ops/s
# Warmup Iteration  13: 548678.572 ops/s
# Warmup Iteration  14: 548030.482 ops/s
# Warmup Iteration  15: 546706.040 ops/s
# Warmup Iteration  16: 547111.894 ops/s
# Warmup Iteration  17: 545897.242 ops/s
# Warmup Iteration  18: 548516.407 ops/s
# Warmup Iteration  19: 547451.359 ops/s
# Warmup Iteration  20: 547504.855 ops/s
# Warmup Iteration  21: 548749.479 ops/s
# Warmup Iteration  22: 548627.835 ops/s
# Warmup Iteration  23: 547972.891 ops/s
# Warmup Iteration  24: 548535.762 ops/s
# Warmup Iteration  25: 548536.760 ops/s
# Warmup Iteration  26: 549213.308 ops/s
# Warmup Iteration  27: 547615.245 ops/s
# Warmup Iteration  28: 549125.629 ops/s
# Warmup Iteration  29: 549455.984 ops/s
# Warmup Iteration  30: 549286.660 ops/s
Iteration   1: 547108.677 ops/s
Iteration   2: 550589.824 ops/s
Iteration   3: 549163.746 ops/s
Iteration   4: 547419.627 ops/s
Iteration   5: 548795.830 ops/s
Iteration   6: 549365.380 ops/s
Iteration   7: 549107.359 ops/s
Iteration   8: 548683.819 ops/s
Iteration   9: 545886.428 ops/s
Iteration  10: 548444.470 ops/s
Iteration  11: 548784.714 ops/s
Iteration  12: 548399.465 ops/s
Iteration  13: 549026.921 ops/s
Iteration  14: 550383.287 ops/s
Iteration  15: 549329.786 ops/s
Iteration  16: 547947.445 ops/s
Iteration  17: 549888.848 ops/s
Iteration  18: 547487.260 ops/s
Iteration  19: 549516.753 ops/s
Iteration  20: 550230.877 ops/s
Iteration  21: 547341.794 ops/s
Iteration  22: 548438.487 ops/s
Iteration  23: 548498.243 ops/s
Iteration  24: 550723.031 ops/s
Iteration  25: 549761.296 ops/s
Iteration  26: 547455.363 ops/s
Iteration  27: 548115.359 ops/s
Iteration  28: 549898.814 ops/s
Iteration  29: 548494.024 ops/s
Iteration  30: 549665.295 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_selectWith_target":
  548798.407 ±(99.9%) 761.139 ops/s [Average]
  (min, avg, max) = (545886.428, 548798.407, 550723.031), stdev = 1139.237
  CI (99.9%): [548037.269, 549559.546] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  548798.407 ± 761.139  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 109344.304 ops/s
# Warmup Iteration   2: 191890.961 ops/s
# Warmup Iteration   3: 229684.561 ops/s
# Warmup Iteration   4: 232163.022 ops/s
# Warmup Iteration   5: 232486.792 ops/s
# Warmup Iteration   6: 201245.598 ops/s
# Warmup Iteration   7: 232751.635 ops/s
# Warmup Iteration   8: 232213.491 ops/s
# Warmup Iteration   9: 232679.776 ops/s
# Warmup Iteration  10: 232731.308 ops/s
# Warmup Iteration  11: 233426.973 ops/s
# Warmup Iteration  12: 232973.895 ops/s
# Warmup Iteration  13: 232823.045 ops/s
# Warmup Iteration  14: 232572.235 ops/s
# Warmup Iteration  15: 232163.670 ops/s
# Warmup Iteration  16: 232902.416 ops/s
# Warmup Iteration  17: 232494.172 ops/s
# Warmup Iteration  18: 231529.035 ops/s
# Warmup Iteration  19: 231644.555 ops/s
# Warmup Iteration  20: 231671.471 ops/s
# Warmup Iteration  21: 232398.088 ops/s
# Warmup Iteration  22: 232245.285 ops/s
# Warmup Iteration  23: 231833.109 ops/s
# Warmup Iteration  24: 231892.736 ops/s
# Warmup Iteration  25: 232403.695 ops/s
# Warmup Iteration  26: 233102.652 ops/s
# Warmup Iteration  27: 232039.100 ops/s
# Warmup Iteration  28: 232356.182 ops/s
# Warmup Iteration  29: 231576.573 ops/s
# Warmup Iteration  30: 232364.190 ops/s
Iteration   1: 232647.644 ops/s
Iteration   2: 232155.129 ops/s
Iteration   3: 232465.359 ops/s
Iteration   4: 232499.945 ops/s
Iteration   5: 231968.209 ops/s
Iteration   6: 232854.010 ops/s
Iteration   7: 232253.684 ops/s
Iteration   8: 231424.027 ops/s
Iteration   9: 231014.060 ops/s
Iteration  10: 231025.577 ops/s
Iteration  11: 232315.957 ops/s
Iteration  12: 231218.695 ops/s
Iteration  13: 232079.930 ops/s
Iteration  14: 231967.577 ops/s
Iteration  15: 233624.424 ops/s
Iteration  16: 231505.629 ops/s
Iteration  17: 232529.495 ops/s
Iteration  18: 231698.736 ops/s
Iteration  19: 232658.153 ops/s
Iteration  20: 231826.460 ops/s
Iteration  21: 231907.583 ops/s
Iteration  22: 233232.069 ops/s
Iteration  23: 232264.880 ops/s
Iteration  24: 234327.941 ops/s
Iteration  25: 232437.458 ops/s
Iteration  26: 234151.374 ops/s
Iteration  27: 232729.574 ops/s
Iteration  28: 233088.189 ops/s
Iteration  29: 231915.001 ops/s
Iteration  30: 233128.277 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_serialization":
  232363.835 ±(99.9%) 544.398 ops/s [Average]
  (min, avg, max) = (231014.060, 232363.835, 234327.941), stdev = 814.830
  CI (99.9%): [231819.437, 232908.233] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_serialization  thrpt   30  232363.835 ± 544.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549167.158 ops/s
# Warmup Iteration   2: 970894.519 ops/s
# Warmup Iteration   3: 1090362.602 ops/s
# Warmup Iteration   4: 1094554.088 ops/s
# Warmup Iteration   5: 1097036.982 ops/s
# Warmup Iteration   6: 899646.799 ops/s
# Warmup Iteration   7: 1096699.051 ops/s
# Warmup Iteration   8: 1096937.641 ops/s
# Warmup Iteration   9: 1098993.304 ops/s
# Warmup Iteration  10: 1097689.000 ops/s
# Warmup Iteration  11: 1100420.959 ops/s
# Warmup Iteration  12: 1096949.893 ops/s
# Warmup Iteration  13: 1099582.831 ops/s
# Warmup Iteration  14: 1099460.962 ops/s
# Warmup Iteration  15: 1096684.923 ops/s
# Warmup Iteration  16: 1099031.465 ops/s
# Warmup Iteration  17: 1096829.814 ops/s
# Warmup Iteration  18: 1098218.685 ops/s
# Warmup Iteration  19: 1097304.144 ops/s
# Warmup Iteration  20: 1097943.375 ops/s
# Warmup Iteration  21: 1098265.006 ops/s
# Warmup Iteration  22: 1095567.210 ops/s
# Warmup Iteration  23: 1095978.106 ops/s
# Warmup Iteration  24: 1098044.338 ops/s
# Warmup Iteration  25: 1099182.891 ops/s
# Warmup Iteration  26: 1096632.368 ops/s
# Warmup Iteration  27: 1097274.018 ops/s
# Warmup Iteration  28: 1097563.378 ops/s
# Warmup Iteration  29: 1096681.325 ops/s
# Warmup Iteration  30: 1098462.326 ops/s
Iteration   1: 1101185.961 ops/s
Iteration   2: 1100129.460 ops/s
Iteration   3: 1094665.956 ops/s
Iteration   4: 1094595.723 ops/s
Iteration   5: 1098560.038 ops/s
Iteration   6: 1096503.977 ops/s
Iteration   7: 1096673.509 ops/s
Iteration   8: 1099633.784 ops/s
Iteration   9: 1096746.191 ops/s
Iteration  10: 1098750.154 ops/s
Iteration  11: 1098474.596 ops/s
Iteration  12: 1099255.496 ops/s
Iteration  13: 1102402.936 ops/s
Iteration  14: 1101229.847 ops/s
Iteration  15: 1097360.732 ops/s
Iteration  16: 1097538.390 ops/s
Iteration  17: 1096498.069 ops/s
Iteration  18: 1100104.088 ops/s
Iteration  19: 1095689.291 ops/s
Iteration  20: 1099050.354 ops/s
Iteration  21: 1096715.296 ops/s
Iteration  22: 1102794.974 ops/s
Iteration  23: 1098359.431 ops/s
Iteration  24: 1096688.799 ops/s
Iteration  25: 1098975.278 ops/s
Iteration  26: 1097695.217 ops/s
Iteration  27: 1096299.765 ops/s
Iteration  28: 1096689.542 ops/s
Iteration  29: 1094949.682 ops/s
Iteration  30: 1100386.645 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDouble":
  1098153.439 ±(99.9%) 1459.069 ops/s [Average]
  (min, avg, max) = (1094595.723, 1098153.439, 1102794.974), stdev = 2183.866
  CI (99.9%): [1096694.370, 1099612.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1098153.439 ± 1459.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.327 ops/s
# Warmup Iteration   2: 61.336 ops/s
# Warmup Iteration   3: 85.368 ops/s
# Warmup Iteration   4: 89.369 ops/s
# Warmup Iteration   5: 88.082 ops/s
# Warmup Iteration   6: 92.563 ops/s
# Warmup Iteration   7: 90.092 ops/s
# Warmup Iteration   8: 88.077 ops/s
# Warmup Iteration   9: 88.374 ops/s
# Warmup Iteration  10: 89.480 ops/s
# Warmup Iteration  11: 77.565 ops/s
# Warmup Iteration  12: 89.090 ops/s
# Warmup Iteration  13: 91.862 ops/s
# Warmup Iteration  14: 93.632 ops/s
# Warmup Iteration  15: 92.943 ops/s
# Warmup Iteration  16: 90.147 ops/s
# Warmup Iteration  17: 87.303 ops/s
# Warmup Iteration  18: 82.755 ops/s
# Warmup Iteration  19: 87.410 ops/s
# Warmup Iteration  20: 86.062 ops/s
# Warmup Iteration  21: 83.246 ops/s
# Warmup Iteration  22: 85.582 ops/s
# Warmup Iteration  23: 86.796 ops/s
# Warmup Iteration  24: 85.985 ops/s
# Warmup Iteration  25: 86.041 ops/s
# Warmup Iteration  26: 85.054 ops/s
# Warmup Iteration  27: 83.264 ops/s
# Warmup Iteration  28: 80.433 ops/s
# Warmup Iteration  29: 85.379 ops/s
# Warmup Iteration  30: 85.527 ops/s
Iteration   1: 86.830 ops/s
Iteration   2: 90.806 ops/s
Iteration   3: 88.780 ops/s
Iteration   4: 85.958 ops/s
Iteration   5: 84.071 ops/s
Iteration   6: 85.718 ops/s
Iteration   7: 84.282 ops/s
Iteration   8: 85.815 ops/s
Iteration   9: 84.337 ops/s
Iteration  10: 88.308 ops/s
Iteration  11: 87.317 ops/s
Iteration  12: 88.170 ops/s
Iteration  13: 85.486 ops/s
Iteration  14: 86.855 ops/s
Iteration  15: 85.522 ops/s
Iteration  16: 86.386 ops/s
Iteration  17: 89.674 ops/s
Iteration  18: 89.772 ops/s
Iteration  19: 92.770 ops/s
Iteration  20: 92.364 ops/s
Iteration  21: 88.076 ops/s
Iteration  22: 88.432 ops/s
Iteration  23: 87.427 ops/s
Iteration  24: 88.126 ops/s
Iteration  25: 89.809 ops/s
Iteration  26: 87.134 ops/s
Iteration  27: 87.361 ops/s
Iteration  28: 87.184 ops/s
Iteration  29: 90.557 ops/s
Iteration  30: 90.092 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  87.781 ±(99.9%) 1.502 ops/s [Average]
  (min, avg, max) = (84.071, 87.781, 92.770), stdev = 2.248
  CI (99.9%): [86.279, 89.282] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt   Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  87.781 ± 1.502  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516768.395 ops/s
# Warmup Iteration   2: 870813.179 ops/s
# Warmup Iteration   3: 1007743.792 ops/s
# Warmup Iteration   4: 1013393.764 ops/s
# Warmup Iteration   5: 1010457.597 ops/s
# Warmup Iteration   6: 834635.637 ops/s
# Warmup Iteration   7: 1015028.593 ops/s
# Warmup Iteration   8: 1015744.519 ops/s
# Warmup Iteration   9: 1015037.724 ops/s
# Warmup Iteration  10: 1013827.989 ops/s
# Warmup Iteration  11: 1013776.948 ops/s
# Warmup Iteration  12: 1016482.783 ops/s
# Warmup Iteration  13: 1014101.234 ops/s
# Warmup Iteration  14: 1014101.278 ops/s
# Warmup Iteration  15: 1012501.490 ops/s
# Warmup Iteration  16: 1016100.743 ops/s
# Warmup Iteration  17: 1010666.089 ops/s
# Warmup Iteration  18: 1012962.193 ops/s
# Warmup Iteration  19: 1012144.434 ops/s
# Warmup Iteration  20: 1014984.000 ops/s
# Warmup Iteration  21: 1012809.601 ops/s
# Warmup Iteration  22: 1012337.733 ops/s
# Warmup Iteration  23: 1013931.546 ops/s
# Warmup Iteration  24: 1014043.483 ops/s
# Warmup Iteration  25: 1014886.598 ops/s
# Warmup Iteration  26: 1011750.217 ops/s
# Warmup Iteration  27: 1013107.555 ops/s
# Warmup Iteration  28: 1014971.825 ops/s
# Warmup Iteration  29: 1013491.932 ops/s
# Warmup Iteration  30: 1015191.140 ops/s
Iteration   1: 1016749.350 ops/s
Iteration   2: 1010899.748 ops/s
Iteration   3: 1012735.543 ops/s
Iteration   4: 1013609.288 ops/s
Iteration   5: 1011482.368 ops/s
Iteration   6: 1013653.432 ops/s
Iteration   7: 1012532.470 ops/s
Iteration   8: 1011887.882 ops/s
Iteration   9: 1013720.259 ops/s
Iteration  10: 1013194.001 ops/s
Iteration  11: 1013376.795 ops/s
Iteration  12: 1015985.798 ops/s
Iteration  13: 1009417.804 ops/s
Iteration  14: 1014147.570 ops/s
Iteration  15: 1011812.004 ops/s
Iteration  16: 1016458.319 ops/s
Iteration  17: 1017441.091 ops/s
Iteration  18: 1016047.166 ops/s
Iteration  19: 1014507.327 ops/s
Iteration  20: 1018836.634 ops/s
Iteration  21: 1011933.706 ops/s
Iteration  22: 1014832.823 ops/s
Iteration  23: 1011614.288 ops/s
Iteration  24: 1011883.692 ops/s
Iteration  25: 1016000.784 ops/s
Iteration  26: 1013913.682 ops/s
Iteration  27: 1014217.393 ops/s
Iteration  28: 1012444.218 ops/s
Iteration  29: 1015528.638 ops/s
Iteration  30: 1011173.773 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloat":
  1013734.595 ±(99.9%) 1459.599 ops/s [Average]
  (min, avg, max) = (1009417.804, 1013734.595, 1018836.634), stdev = 2184.658
  CI (99.9%): [1012274.996, 1015194.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1013734.595 ± 1459.599  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56.409 ops/s
# Warmup Iteration   2: 60.604 ops/s
# Warmup Iteration   3: 79.256 ops/s
# Warmup Iteration   4: 85.378 ops/s
# Warmup Iteration   5: 85.056 ops/s
# Warmup Iteration   6: 84.735 ops/s
# Warmup Iteration   7: 86.454 ops/s
# Warmup Iteration   8: 87.488 ops/s
# Warmup Iteration   9: 90.526 ops/s
# Warmup Iteration  10: 87.897 ops/s
# Warmup Iteration  11: 82.315 ops/s
# Warmup Iteration  12: 77.102 ops/s
# Warmup Iteration  13: 88.577 ops/s
# Warmup Iteration  14: 88.199 ops/s
# Warmup Iteration  15: 87.731 ops/s
# Warmup Iteration  16: 87.807 ops/s
# Warmup Iteration  17: 87.016 ops/s
# Warmup Iteration  18: 90.134 ops/s
# Warmup Iteration  19: 89.066 ops/s
# Warmup Iteration  20: 88.640 ops/s
# Warmup Iteration  21: 85.629 ops/s
# Warmup Iteration  22: 85.631 ops/s
# Warmup Iteration  23: 86.108 ops/s
# Warmup Iteration  24: 86.123 ops/s
# Warmup Iteration  25: 87.131 ops/s
# Warmup Iteration  26: 87.450 ops/s
# Warmup Iteration  27: 85.128 ops/s
# Warmup Iteration  28: 87.866 ops/s
# Warmup Iteration  29: 88.396 ops/s
# Warmup Iteration  30: 87.193 ops/s
Iteration   1: 85.665 ops/s
Iteration   2: 87.988 ops/s
Iteration   3: 86.849 ops/s
Iteration   4: 85.038 ops/s
Iteration   5: 84.571 ops/s
Iteration   6: 84.583 ops/s
Iteration   7: 84.694 ops/s
Iteration   8: 84.701 ops/s
Iteration   9: 85.699 ops/s
Iteration  10: 84.700 ops/s
Iteration  11: 84.893 ops/s
Iteration  12: 84.687 ops/s
Iteration  13: 85.948 ops/s
Iteration  14: 87.388 ops/s
Iteration  15: 86.185 ops/s
Iteration  16: 86.251 ops/s
Iteration  17: 86.421 ops/s
Iteration  18: 87.307 ops/s
Iteration  19: 86.174 ops/s
Iteration  20: 86.275 ops/s
Iteration  21: 86.570 ops/s
Iteration  22: 87.608 ops/s
Iteration  23: 84.891 ops/s
Iteration  24: 85.671 ops/s
Iteration  25: 88.002 ops/s
Iteration  26: 86.930 ops/s
Iteration  27: 87.423 ops/s
Iteration  28: 85.328 ops/s
Iteration  29: 84.410 ops/s
Iteration  30: 83.915 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  85.892 ±(99.9%) 0.785 ops/s [Average]
  (min, avg, max) = (83.915, 85.892, 88.002), stdev = 1.175
  CI (99.9%): [85.107, 86.677] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt   Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  85.892 ± 0.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639913.395 ops/s
# Warmup Iteration   2: 1126090.470 ops/s
# Warmup Iteration   3: 1262831.047 ops/s
# Warmup Iteration   4: 1267813.287 ops/s
# Warmup Iteration   5: 1269161.584 ops/s
# Warmup Iteration   6: 1045420.125 ops/s
# Warmup Iteration   7: 1266157.683 ops/s
# Warmup Iteration   8: 1264421.876 ops/s
# Warmup Iteration   9: 1265090.632 ops/s
# Warmup Iteration  10: 1265892.894 ops/s
# Warmup Iteration  11: 1269278.744 ops/s
# Warmup Iteration  12: 1269310.668 ops/s
# Warmup Iteration  13: 1273153.302 ops/s
# Warmup Iteration  14: 1267718.355 ops/s
# Warmup Iteration  15: 1264014.573 ops/s
# Warmup Iteration  16: 1264843.951 ops/s
# Warmup Iteration  17: 1272021.401 ops/s
# Warmup Iteration  18: 1269136.840 ops/s
# Warmup Iteration  19: 1269832.460 ops/s
# Warmup Iteration  20: 1266210.682 ops/s
# Warmup Iteration  21: 1269065.427 ops/s
# Warmup Iteration  22: 1268959.285 ops/s
# Warmup Iteration  23: 1274815.604 ops/s
# Warmup Iteration  24: 1267315.376 ops/s
# Warmup Iteration  25: 1266748.245 ops/s
# Warmup Iteration  26: 1270445.258 ops/s
# Warmup Iteration  27: 1270854.692 ops/s
# Warmup Iteration  28: 1270327.802 ops/s
# Warmup Iteration  29: 1268700.079 ops/s
# Warmup Iteration  30: 1266298.602 ops/s
Iteration   1: 1273641.733 ops/s
Iteration   2: 1272529.998 ops/s
Iteration   3: 1273865.376 ops/s
Iteration   4: 1270194.531 ops/s
Iteration   5: 1263772.462 ops/s
Iteration   6: 1266062.412 ops/s
Iteration   7: 1267924.817 ops/s
Iteration   8: 1264547.516 ops/s
Iteration   9: 1269867.846 ops/s
Iteration  10: 1264518.207 ops/s
Iteration  11: 1268150.463 ops/s
Iteration  12: 1271958.075 ops/s
Iteration  13: 1264956.369 ops/s
Iteration  14: 1265685.263 ops/s
Iteration  15: 1266440.630 ops/s
Iteration  16: 1269954.958 ops/s
Iteration  17: 1269691.792 ops/s
Iteration  18: 1271295.981 ops/s
Iteration  19: 1268448.091 ops/s
Iteration  20: 1266440.817 ops/s
Iteration  21: 1270715.790 ops/s
Iteration  22: 1269008.007 ops/s
Iteration  23: 1264116.056 ops/s
Iteration  24: 1268464.244 ops/s
Iteration  25: 1269275.409 ops/s
Iteration  26: 1275098.160 ops/s
Iteration  27: 1270395.657 ops/s
Iteration  28: 1271401.650 ops/s
Iteration  29: 1266145.586 ops/s
Iteration  30: 1263617.194 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByInt":
  1268606.170 ±(99.9%) 2142.748 ops/s [Average]
  (min, avg, max) = (1263617.194, 1268606.170, 1275098.160), stdev = 3207.165
  CI (99.9%): [1266463.421, 1270748.918] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1268606.170 ± 2142.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 643079.403 ops/s
# Warmup Iteration   2: 1182423.481 ops/s
# Warmup Iteration   3: 1310643.618 ops/s
# Warmup Iteration   4: 1315315.730 ops/s
# Warmup Iteration   5: 1229087.520 ops/s
# Warmup Iteration   6: 1167125.045 ops/s
# Warmup Iteration   7: 1320182.638 ops/s
# Warmup Iteration   8: 1313554.947 ops/s
# Warmup Iteration   9: 1317876.003 ops/s
# Warmup Iteration  10: 1321052.589 ops/s
# Warmup Iteration  11: 1318503.793 ops/s
# Warmup Iteration  12: 1321706.133 ops/s
# Warmup Iteration  13: 1318381.851 ops/s
# Warmup Iteration  14: 1323075.624 ops/s
# Warmup Iteration  15: 1316482.100 ops/s
# Warmup Iteration  16: 1318585.105 ops/s
# Warmup Iteration  17: 1319231.447 ops/s
# Warmup Iteration  18: 1317827.640 ops/s
# Warmup Iteration  19: 1317766.512 ops/s
# Warmup Iteration  20: 1314680.120 ops/s
# Warmup Iteration  21: 1319191.125 ops/s
# Warmup Iteration  22: 1314971.498 ops/s
# Warmup Iteration  23: 1316529.970 ops/s
# Warmup Iteration  24: 1317366.327 ops/s
# Warmup Iteration  25: 1320537.526 ops/s
# Warmup Iteration  26: 1315028.472 ops/s
# Warmup Iteration  27: 1316606.792 ops/s
# Warmup Iteration  28: 1313585.434 ops/s
# Warmup Iteration  29: 1316990.540 ops/s
# Warmup Iteration  30: 1319277.223 ops/s
Iteration   1: 1318761.003 ops/s
Iteration   2: 1316474.068 ops/s
Iteration   3: 1320647.562 ops/s
Iteration   4: 1319179.966 ops/s
Iteration   5: 1316177.497 ops/s
Iteration   6: 1318797.061 ops/s
Iteration   7: 1321652.498 ops/s
Iteration   8: 1315895.491 ops/s
Iteration   9: 1321013.160 ops/s
Iteration  10: 1318065.448 ops/s
Iteration  11: 1316123.132 ops/s
Iteration  12: 1322935.259 ops/s
Iteration  13: 1314969.054 ops/s
Iteration  14: 1320697.623 ops/s
Iteration  15: 1316042.445 ops/s
Iteration  16: 1319160.605 ops/s
Iteration  17: 1319948.563 ops/s
Iteration  18: 1316983.849 ops/s
Iteration  19: 1321248.221 ops/s
Iteration  20: 1318159.397 ops/s
Iteration  21: 1315915.308 ops/s
Iteration  22: 1321967.070 ops/s
Iteration  23: 1316188.912 ops/s
Iteration  24: 1315508.125 ops/s
Iteration  25: 1320610.740 ops/s
Iteration  26: 1319960.043 ops/s
Iteration  27: 1321989.549 ops/s
Iteration  28: 1318377.385 ops/s
Iteration  29: 1315417.674 ops/s
Iteration  30: 1318443.602 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumByLong":
  1318577.010 ±(99.9%) 1570.368 ops/s [Average]
  (min, avg, max) = (1314969.054, 1318577.010, 1322935.259), stdev = 2350.452
  CI (99.9%): [1317006.643, 1320147.378] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1318577.010 ± 1570.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 760856.185 ops/s
# Warmup Iteration   2: 1260301.074 ops/s
# Warmup Iteration   3: 1482024.019 ops/s
# Warmup Iteration   4: 1495301.209 ops/s
# Warmup Iteration   5: 1488500.616 ops/s
# Warmup Iteration   6: 1270542.107 ops/s
# Warmup Iteration   7: 1445135.372 ops/s
# Warmup Iteration   8: 1490466.343 ops/s
# Warmup Iteration   9: 1494691.922 ops/s
# Warmup Iteration  10: 1495012.824 ops/s
# Warmup Iteration  11: 1496329.917 ops/s
# Warmup Iteration  12: 1493005.247 ops/s
# Warmup Iteration  13: 1492585.279 ops/s
# Warmup Iteration  14: 1491122.693 ops/s
# Warmup Iteration  15: 1494448.763 ops/s
# Warmup Iteration  16: 1495589.337 ops/s
# Warmup Iteration  17: 1489056.043 ops/s
# Warmup Iteration  18: 1484719.771 ops/s
# Warmup Iteration  19: 1486214.363 ops/s
# Warmup Iteration  20: 1483208.678 ops/s
# Warmup Iteration  21: 1486365.551 ops/s
# Warmup Iteration  22: 1487351.259 ops/s
# Warmup Iteration  23: 1486652.634 ops/s
# Warmup Iteration  24: 1489867.333 ops/s
# Warmup Iteration  25: 1488061.364 ops/s
# Warmup Iteration  26: 1487432.834 ops/s
# Warmup Iteration  27: 1488721.310 ops/s
# Warmup Iteration  28: 1487318.404 ops/s
# Warmup Iteration  29: 1486427.270 ops/s
# Warmup Iteration  30: 1487765.861 ops/s
Iteration   1: 1488519.647 ops/s
Iteration   2: 1487772.485 ops/s
Iteration   3: 1486132.431 ops/s
Iteration   4: 1488574.427 ops/s
Iteration   5: 1488869.752 ops/s
Iteration   6: 1487144.724 ops/s
Iteration   7: 1482578.603 ops/s
Iteration   8: 1486349.432 ops/s
Iteration   9: 1487061.043 ops/s
Iteration  10: 1487870.581 ops/s
Iteration  11: 1490886.523 ops/s
Iteration  12: 1487556.426 ops/s
Iteration  13: 1484601.067 ops/s
Iteration  14: 1488414.683 ops/s
Iteration  15: 1496251.944 ops/s
Iteration  16: 1485114.666 ops/s
Iteration  17: 1491370.276 ops/s
Iteration  18: 1489684.182 ops/s
Iteration  19: 1492079.796 ops/s
Iteration  20: 1479828.982 ops/s
Iteration  21: 1491912.384 ops/s
Iteration  22: 1483845.774 ops/s
Iteration  23: 1487322.029 ops/s
Iteration  24: 1482191.989 ops/s
Iteration  25: 1487655.478 ops/s
Iteration  26: 1486871.195 ops/s
Iteration  27: 1487119.781 ops/s
Iteration  28: 1486819.425 ops/s
Iteration  29: 1486647.449 ops/s
Iteration  30: 1485959.947 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDouble":
  1487433.571 ±(99.9%) 2147.461 ops/s [Average]
  (min, avg, max) = (1479828.982, 1487433.571, 1496251.944), stdev = 3214.219
  CI (99.9%): [1485286.109, 1489581.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumDouble  thrpt   30  1487433.571 ± 2147.461  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75.859 ops/s
# Warmup Iteration   2: 86.673 ops/s
# Warmup Iteration   3: 116.073 ops/s
# Warmup Iteration   4: 115.153 ops/s
# Warmup Iteration   5: 116.301 ops/s
# Warmup Iteration   6: 116.373 ops/s
# Warmup Iteration   7: 117.432 ops/s
# Warmup Iteration   8: 117.009 ops/s
# Warmup Iteration   9: 116.683 ops/s
# Warmup Iteration  10: 106.378 ops/s
# Warmup Iteration  11: 110.222 ops/s
# Warmup Iteration  12: 116.840 ops/s
# Warmup Iteration  13: 116.801 ops/s
# Warmup Iteration  14: 115.979 ops/s
# Warmup Iteration  15: 117.006 ops/s
# Warmup Iteration  16: 116.226 ops/s
# Warmup Iteration  17: 116.955 ops/s
# Warmup Iteration  18: 116.745 ops/s
# Warmup Iteration  19: 116.137 ops/s
# Warmup Iteration  20: 115.746 ops/s
# Warmup Iteration  21: 116.267 ops/s
# Warmup Iteration  22: 116.811 ops/s
# Warmup Iteration  23: 116.288 ops/s
# Warmup Iteration  24: 115.940 ops/s
# Warmup Iteration  25: 115.206 ops/s
# Warmup Iteration  26: 115.181 ops/s
# Warmup Iteration  27: 115.484 ops/s
# Warmup Iteration  28: 115.218 ops/s
# Warmup Iteration  29: 115.389 ops/s
# Warmup Iteration  30: 114.852 ops/s
Iteration   1: 114.989 ops/s
Iteration   2: 115.313 ops/s
Iteration   3: 114.716 ops/s
Iteration   4: 115.096 ops/s
Iteration   5: 114.943 ops/s
Iteration   6: 114.700 ops/s
Iteration   7: 114.847 ops/s
Iteration   8: 114.521 ops/s
Iteration   9: 115.142 ops/s
Iteration  10: 114.778 ops/s
Iteration  11: 115.112 ops/s
Iteration  12: 115.210 ops/s
Iteration  13: 115.015 ops/s
Iteration  14: 115.824 ops/s
Iteration  15: 115.106 ops/s
Iteration  16: 115.751 ops/s
Iteration  17: 115.646 ops/s
Iteration  18: 115.834 ops/s
Iteration  19: 115.585 ops/s
Iteration  20: 114.913 ops/s
Iteration  21: 115.245 ops/s
Iteration  22: 114.914 ops/s
Iteration  23: 115.403 ops/s
Iteration  24: 114.418 ops/s
Iteration  25: 115.551 ops/s
Iteration  26: 114.595 ops/s
Iteration  27: 113.976 ops/s
Iteration  28: 113.888 ops/s
Iteration  29: 114.333 ops/s
Iteration  30: 115.246 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  115.020 ±(99.9%) 0.333 ops/s [Average]
  (min, avg, max) = (113.888, 115.020, 115.834), stdev = 0.498
  CI (99.9%): [114.688, 115.353] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt    Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  115.020 ± 0.333  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.248 ops/s
# Warmup Iteration   2: 89.740 ops/s
# Warmup Iteration   3: 120.988 ops/s
# Warmup Iteration   4: 120.322 ops/s
# Warmup Iteration   5: 121.053 ops/s
# Warmup Iteration   6: 120.859 ops/s
# Warmup Iteration   7: 120.706 ops/s
# Warmup Iteration   8: 121.132 ops/s
# Warmup Iteration   9: 120.662 ops/s
# Warmup Iteration  10: 103.069 ops/s
# Warmup Iteration  11: 121.051 ops/s
# Warmup Iteration  12: 121.246 ops/s
# Warmup Iteration  13: 121.231 ops/s
# Warmup Iteration  14: 120.506 ops/s
# Warmup Iteration  15: 121.070 ops/s
# Warmup Iteration  16: 121.533 ops/s
# Warmup Iteration  17: 121.486 ops/s
# Warmup Iteration  18: 121.592 ops/s
# Warmup Iteration  19: 121.657 ops/s
# Warmup Iteration  20: 121.859 ops/s
# Warmup Iteration  21: 122.378 ops/s
# Warmup Iteration  22: 121.565 ops/s
# Warmup Iteration  23: 121.892 ops/s
# Warmup Iteration  24: 119.476 ops/s
# Warmup Iteration  25: 119.699 ops/s
# Warmup Iteration  26: 119.614 ops/s
# Warmup Iteration  27: 119.393 ops/s
# Warmup Iteration  28: 119.074 ops/s
# Warmup Iteration  29: 119.400 ops/s
# Warmup Iteration  30: 119.754 ops/s
Iteration   1: 119.528 ops/s
Iteration   2: 119.249 ops/s
Iteration   3: 118.978 ops/s
Iteration   4: 119.048 ops/s
Iteration   5: 119.518 ops/s
Iteration   6: 119.521 ops/s
Iteration   7: 119.345 ops/s
Iteration   8: 119.877 ops/s
Iteration   9: 119.808 ops/s
Iteration  10: 119.656 ops/s
Iteration  11: 119.615 ops/s
Iteration  12: 119.134 ops/s
Iteration  13: 119.293 ops/s
Iteration  14: 119.335 ops/s
Iteration  15: 119.433 ops/s
Iteration  16: 119.871 ops/s
Iteration  17: 118.572 ops/s
Iteration  18: 119.561 ops/s
Iteration  19: 118.984 ops/s
Iteration  20: 118.666 ops/s
Iteration  21: 118.945 ops/s
Iteration  22: 119.698 ops/s
Iteration  23: 119.659 ops/s
Iteration  24: 119.228 ops/s
Iteration  25: 119.811 ops/s
Iteration  26: 119.578 ops/s
Iteration  27: 119.581 ops/s
Iteration  28: 118.922 ops/s
Iteration  29: 119.518 ops/s
Iteration  30: 119.425 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  119.379 ±(99.9%) 0.231 ops/s [Average]
  (min, avg, max) = (118.572, 119.379, 119.877), stdev = 0.346
  CI (99.9%): [119.148, 119.610] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt    Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  119.379 ± 0.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 752461.511 ops/s
# Warmup Iteration   2: 1218156.940 ops/s
# Warmup Iteration   3: 1424300.099 ops/s
# Warmup Iteration   4: 1430838.844 ops/s
# Warmup Iteration   5: 1433942.607 ops/s
# Warmup Iteration   6: 1338029.747 ops/s
# Warmup Iteration   7: 1274490.776 ops/s
# Warmup Iteration   8: 1431149.193 ops/s
# Warmup Iteration   9: 1434203.835 ops/s
# Warmup Iteration  10: 1436456.343 ops/s
# Warmup Iteration  11: 1435795.607 ops/s
# Warmup Iteration  12: 1433131.833 ops/s
# Warmup Iteration  13: 1430818.128 ops/s
# Warmup Iteration  14: 1434254.863 ops/s
# Warmup Iteration  15: 1434527.431 ops/s
# Warmup Iteration  16: 1434004.790 ops/s
# Warmup Iteration  17: 1435761.189 ops/s
# Warmup Iteration  18: 1429450.043 ops/s
# Warmup Iteration  19: 1436422.779 ops/s
# Warmup Iteration  20: 1431652.030 ops/s
# Warmup Iteration  21: 1430308.359 ops/s
# Warmup Iteration  22: 1434224.825 ops/s
# Warmup Iteration  23: 1434658.758 ops/s
# Warmup Iteration  24: 1431884.853 ops/s
# Warmup Iteration  25: 1436621.018 ops/s
# Warmup Iteration  26: 1435536.823 ops/s
# Warmup Iteration  27: 1434763.724 ops/s
# Warmup Iteration  28: 1436159.636 ops/s
# Warmup Iteration  29: 1434464.271 ops/s
# Warmup Iteration  30: 1435018.292 ops/s
Iteration   1: 1435406.755 ops/s
Iteration   2: 1435878.792 ops/s
Iteration   3: 1434010.466 ops/s
Iteration   4: 1435075.541 ops/s
Iteration   5: 1436947.852 ops/s
Iteration   6: 1433785.929 ops/s
Iteration   7: 1434108.469 ops/s
Iteration   8: 1435384.064 ops/s
Iteration   9: 1428857.811 ops/s
Iteration  10: 1435822.106 ops/s
Iteration  11: 1436697.326 ops/s
Iteration  12: 1435112.087 ops/s
Iteration  13: 1434775.908 ops/s
Iteration  14: 1436108.992 ops/s
Iteration  15: 1430777.301 ops/s
Iteration  16: 1433607.906 ops/s
Iteration  17: 1436772.915 ops/s
Iteration  18: 1437142.958 ops/s
Iteration  19: 1437319.667 ops/s
Iteration  20: 1435761.759 ops/s
Iteration  21: 1434211.334 ops/s
Iteration  22: 1439387.887 ops/s
Iteration  23: 1432896.899 ops/s
Iteration  24: 1437436.854 ops/s
Iteration  25: 1434758.984 ops/s
Iteration  26: 1437361.913 ops/s
Iteration  27: 1432219.465 ops/s
Iteration  28: 1440358.840 ops/s
Iteration  29: 1431429.829 ops/s
Iteration  30: 1433955.503 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloat":
  1435112.404 ±(99.9%) 1617.401 ops/s [Average]
  (min, avg, max) = (1428857.811, 1435112.404, 1440358.840), stdev = 2420.849
  CI (99.9%): [1433495.003, 1436729.804] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumFloat  thrpt   30  1435112.404 ± 1617.401  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 75.567 ops/s
# Warmup Iteration   2: 84.951 ops/s
# Warmup Iteration   3: 115.186 ops/s
# Warmup Iteration   4: 115.070 ops/s
# Warmup Iteration   5: 115.472 ops/s
# Warmup Iteration   6: 115.661 ops/s
# Warmup Iteration   7: 115.568 ops/s
# Warmup Iteration   8: 115.717 ops/s
# Warmup Iteration   9: 115.628 ops/s
# Warmup Iteration  10: 107.420 ops/s
# Warmup Iteration  11: 106.136 ops/s
# Warmup Iteration  12: 115.903 ops/s
# Warmup Iteration  13: 115.528 ops/s
# Warmup Iteration  14: 115.645 ops/s
# Warmup Iteration  15: 115.858 ops/s
# Warmup Iteration  16: 115.256 ops/s
# Warmup Iteration  17: 115.360 ops/s
# Warmup Iteration  18: 114.612 ops/s
# Warmup Iteration  19: 115.811 ops/s
# Warmup Iteration  20: 115.241 ops/s
# Warmup Iteration  21: 115.452 ops/s
# Warmup Iteration  22: 115.703 ops/s
# Warmup Iteration  23: 115.504 ops/s
# Warmup Iteration  24: 115.613 ops/s
# Warmup Iteration  25: 107.127 ops/s
# Warmup Iteration  26: 107.169 ops/s
# Warmup Iteration  27: 106.861 ops/s
# Warmup Iteration  28: 107.084 ops/s
# Warmup Iteration  29: 107.228 ops/s
# Warmup Iteration  30: 107.352 ops/s
Iteration   1: 106.670 ops/s
Iteration   2: 107.196 ops/s
Iteration   3: 106.539 ops/s
Iteration   4: 106.937 ops/s
Iteration   5: 107.154 ops/s
Iteration   6: 106.760 ops/s
Iteration   7: 106.767 ops/s
Iteration   8: 107.163 ops/s
Iteration   9: 107.111 ops/s
Iteration  10: 107.490 ops/s
Iteration  11: 107.061 ops/s
Iteration  12: 106.544 ops/s
Iteration  13: 106.963 ops/s
Iteration  14: 106.599 ops/s
Iteration  15: 107.065 ops/s
Iteration  16: 106.467 ops/s
Iteration  17: 107.265 ops/s
Iteration  18: 107.054 ops/s
Iteration  19: 106.386 ops/s
Iteration  20: 107.077 ops/s
Iteration  21: 107.182 ops/s
Iteration  22: 106.851 ops/s
Iteration  23: 106.909 ops/s
Iteration  24: 107.321 ops/s
Iteration  25: 106.653 ops/s
Iteration  26: 107.340 ops/s
Iteration  27: 106.732 ops/s
Iteration  28: 107.116 ops/s
Iteration  29: 106.755 ops/s
Iteration  30: 107.066 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  106.940 ±(99.9%) 0.190 ops/s [Average]
  (min, avg, max) = (106.386, 106.940, 107.490), stdev = 0.284
  CI (99.9%): [106.750, 107.129] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt    Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  106.940 ± 0.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 78.261 ops/s
# Warmup Iteration   2: 91.275 ops/s
# Warmup Iteration   3: 121.770 ops/s
# Warmup Iteration   4: 121.740 ops/s
# Warmup Iteration   5: 121.596 ops/s
# Warmup Iteration   6: 122.094 ops/s
# Warmup Iteration   7: 121.954 ops/s
# Warmup Iteration   8: 122.235 ops/s
# Warmup Iteration   9: 121.896 ops/s
# Warmup Iteration  10: 102.835 ops/s
# Warmup Iteration  11: 121.533 ops/s
# Warmup Iteration  12: 121.941 ops/s
# Warmup Iteration  13: 121.469 ops/s
# Warmup Iteration  14: 121.359 ops/s
# Warmup Iteration  15: 120.796 ops/s
# Warmup Iteration  16: 121.648 ops/s
# Warmup Iteration  17: 121.716 ops/s
# Warmup Iteration  18: 121.839 ops/s
# Warmup Iteration  19: 121.803 ops/s
# Warmup Iteration  20: 121.161 ops/s
# Warmup Iteration  21: 121.708 ops/s
# Warmup Iteration  22: 121.750 ops/s
# Warmup Iteration  23: 121.172 ops/s
# Warmup Iteration  24: 118.490 ops/s
# Warmup Iteration  25: 119.049 ops/s
# Warmup Iteration  26: 119.264 ops/s
# Warmup Iteration  27: 119.178 ops/s
# Warmup Iteration  28: 119.431 ops/s
# Warmup Iteration  29: 119.602 ops/s
# Warmup Iteration  30: 119.874 ops/s
Iteration   1: 119.797 ops/s
Iteration   2: 118.949 ops/s
Iteration   3: 119.030 ops/s
Iteration   4: 118.896 ops/s
Iteration   5: 119.811 ops/s
Iteration   6: 120.036 ops/s
Iteration   7: 120.616 ops/s
Iteration   8: 119.854 ops/s
Iteration   9: 119.581 ops/s
Iteration  10: 119.535 ops/s
Iteration  11: 119.361 ops/s
Iteration  12: 119.470 ops/s
Iteration  13: 120.160 ops/s
Iteration  14: 119.303 ops/s
Iteration  15: 119.446 ops/s
Iteration  16: 119.471 ops/s
Iteration  17: 119.827 ops/s
Iteration  18: 118.963 ops/s
Iteration  19: 119.922 ops/s
Iteration  20: 119.724 ops/s
Iteration  21: 119.907 ops/s
Iteration  22: 119.918 ops/s
Iteration  23: 119.265 ops/s
Iteration  24: 119.743 ops/s
Iteration  25: 119.960 ops/s
Iteration  26: 119.754 ops/s
Iteration  27: 119.052 ops/s
Iteration  28: 120.612 ops/s
Iteration  29: 120.192 ops/s
Iteration  30: 119.980 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  119.671 ±(99.9%) 0.300 ops/s [Average]
  (min, avg, max) = (118.896, 119.671, 120.616), stdev = 0.449
  CI (99.9%): [119.371, 119.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt    Score   Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  119.671 ± 0.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 827981.791 ops/s
# Warmup Iteration   2: 1395588.941 ops/s
# Warmup Iteration   3: 1611969.552 ops/s
# Warmup Iteration   4: 1628398.024 ops/s
# Warmup Iteration   5: 1624040.421 ops/s
# Warmup Iteration   6: 1335511.480 ops/s
# Warmup Iteration   7: 1618533.719 ops/s
# Warmup Iteration   8: 1632327.411 ops/s
# Warmup Iteration   9: 1629186.985 ops/s
# Warmup Iteration  10: 1631213.816 ops/s
# Warmup Iteration  11: 1630743.950 ops/s
# Warmup Iteration  12: 1632355.255 ops/s
# Warmup Iteration  13: 1632344.573 ops/s
# Warmup Iteration  14: 1628967.030 ops/s
# Warmup Iteration  15: 1624894.983 ops/s
# Warmup Iteration  16: 1625026.278 ops/s
# Warmup Iteration  17: 1628207.272 ops/s
# Warmup Iteration  18: 1631845.308 ops/s
# Warmup Iteration  19: 1627058.741 ops/s
# Warmup Iteration  20: 1628192.102 ops/s
# Warmup Iteration  21: 1626729.704 ops/s
# Warmup Iteration  22: 1629457.132 ops/s
# Warmup Iteration  23: 1622830.073 ops/s
# Warmup Iteration  24: 1625256.838 ops/s
# Warmup Iteration  25: 1626032.202 ops/s
# Warmup Iteration  26: 1625567.135 ops/s
# Warmup Iteration  27: 1625763.632 ops/s
# Warmup Iteration  28: 1625797.070 ops/s
# Warmup Iteration  29: 1625386.777 ops/s
# Warmup Iteration  30: 1627166.327 ops/s
Iteration   1: 1633129.513 ops/s
Iteration   2: 1629443.185 ops/s
Iteration   3: 1630107.022 ops/s
Iteration   4: 1621149.984 ops/s
Iteration   5: 1630241.967 ops/s
Iteration   6: 1625540.160 ops/s
Iteration   7: 1628539.032 ops/s
Iteration   8: 1622060.137 ops/s
Iteration   9: 1631974.033 ops/s
Iteration  10: 1631025.230 ops/s
Iteration  11: 1627187.577 ops/s
Iteration  12: 1624826.852 ops/s
Iteration  13: 1628980.546 ops/s
Iteration  14: 1626268.479 ops/s
Iteration  15: 1627953.634 ops/s
Iteration  16: 1629032.779 ops/s
Iteration  17: 1624881.357 ops/s
Iteration  18: 1627792.665 ops/s
Iteration  19: 1631182.692 ops/s
Iteration  20: 1628071.154 ops/s
Iteration  21: 1630668.629 ops/s
Iteration  22: 1627135.386 ops/s
Iteration  23: 1628195.259 ops/s
Iteration  24: 1627667.792 ops/s
Iteration  25: 1624879.523 ops/s
Iteration  26: 1626684.557 ops/s
Iteration  27: 1623865.506 ops/s
Iteration  28: 1626799.337 ops/s
Iteration  29: 1622519.960 ops/s
Iteration  30: 1632615.518 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumInteger":
  1627680.649 ±(99.9%) 2051.053 ops/s [Average]
  (min, avg, max) = (1621149.984, 1627680.649, 1633129.513), stdev = 3069.920
  CI (99.9%): [1625629.596, 1629731.702] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumInteger  thrpt   30  1627680.649 ± 2051.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806318.015 ops/s
# Warmup Iteration   2: 1396891.050 ops/s
# Warmup Iteration   3: 1654957.294 ops/s
# Warmup Iteration   4: 1664909.481 ops/s
# Warmup Iteration   5: 1668629.069 ops/s
# Warmup Iteration   6: 1346961.956 ops/s
# Warmup Iteration   7: 1670388.879 ops/s
# Warmup Iteration   8: 1668180.181 ops/s
# Warmup Iteration   9: 1663433.928 ops/s
# Warmup Iteration  10: 1669296.551 ops/s
# Warmup Iteration  11: 1670128.160 ops/s
# Warmup Iteration  12: 1669087.975 ops/s
# Warmup Iteration  13: 1667977.435 ops/s
# Warmup Iteration  14: 1664470.942 ops/s
# Warmup Iteration  15: 1668961.462 ops/s
# Warmup Iteration  16: 1666154.496 ops/s
# Warmup Iteration  17: 1665184.627 ops/s
# Warmup Iteration  18: 1669403.859 ops/s
# Warmup Iteration  19: 1665400.608 ops/s
# Warmup Iteration  20: 1666146.067 ops/s
# Warmup Iteration  21: 1667296.609 ops/s
# Warmup Iteration  22: 1668825.959 ops/s
# Warmup Iteration  23: 1666681.976 ops/s
# Warmup Iteration  24: 1664087.008 ops/s
# Warmup Iteration  25: 1665188.870 ops/s
# Warmup Iteration  26: 1667982.283 ops/s
# Warmup Iteration  27: 1668302.609 ops/s
# Warmup Iteration  28: 1669679.953 ops/s
# Warmup Iteration  29: 1667800.765 ops/s
# Warmup Iteration  30: 1666505.214 ops/s
Iteration   1: 1663624.854 ops/s
Iteration   2: 1671915.945 ops/s
Iteration   3: 1668185.298 ops/s
Iteration   4: 1671504.878 ops/s
Iteration   5: 1669805.811 ops/s
Iteration   6: 1670443.019 ops/s
Iteration   7: 1661232.868 ops/s
Iteration   8: 1668613.194 ops/s
Iteration   9: 1667921.672 ops/s
Iteration  10: 1661952.064 ops/s
Iteration  11: 1673928.542 ops/s
Iteration  12: 1668131.584 ops/s
Iteration  13: 1667364.857 ops/s
Iteration  14: 1664959.421 ops/s
Iteration  15: 1673503.029 ops/s
Iteration  16: 1666478.754 ops/s
Iteration  17: 1666808.759 ops/s
Iteration  18: 1669685.378 ops/s
Iteration  19: 1670990.558 ops/s
Iteration  20: 1670148.785 ops/s
Iteration  21: 1671400.291 ops/s
Iteration  22: 1670181.127 ops/s
Iteration  23: 1664060.582 ops/s
Iteration  24: 1665027.459 ops/s
Iteration  25: 1662696.102 ops/s
Iteration  26: 1666161.104 ops/s
Iteration  27: 1669852.282 ops/s
Iteration  28: 1665208.191 ops/s
Iteration  29: 1671697.988 ops/s
Iteration  30: 1663935.036 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_sumLong":
  1667913.981 ±(99.9%) 2312.411 ops/s [Average]
  (min, avg, max) = (1661232.868, 1667913.981, 1673928.542), stdev = 3461.108
  CI (99.9%): [1665601.570, 1670226.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_sumLong  thrpt   30  1667913.981 ± 2312.411  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2124329.187 ops/s
# Warmup Iteration   2: 4063044.371 ops/s
# Warmup Iteration   3: 4382348.881 ops/s
# Warmup Iteration   4: 4397638.750 ops/s
# Warmup Iteration   5: 3614871.116 ops/s
# Warmup Iteration   6: 4425685.817 ops/s
# Warmup Iteration   7: 4426467.443 ops/s
# Warmup Iteration   8: 4408415.376 ops/s
# Warmup Iteration   9: 4407164.838 ops/s
# Warmup Iteration  10: 4425074.176 ops/s
# Warmup Iteration  11: 4415396.813 ops/s
# Warmup Iteration  12: 4418717.702 ops/s
# Warmup Iteration  13: 4397776.106 ops/s
# Warmup Iteration  14: 4425249.705 ops/s
# Warmup Iteration  15: 4409770.349 ops/s
# Warmup Iteration  16: 4415381.758 ops/s
# Warmup Iteration  17: 4415912.090 ops/s
# Warmup Iteration  18: 4422416.492 ops/s
# Warmup Iteration  19: 4422425.880 ops/s
# Warmup Iteration  20: 4406155.327 ops/s
# Warmup Iteration  21: 4405301.798 ops/s
# Warmup Iteration  22: 4415328.667 ops/s
# Warmup Iteration  23: 4432418.266 ops/s
# Warmup Iteration  24: 4416703.564 ops/s
# Warmup Iteration  25: 4412009.838 ops/s
# Warmup Iteration  26: 4416541.380 ops/s
# Warmup Iteration  27: 4435116.131 ops/s
# Warmup Iteration  28: 4418229.399 ops/s
# Warmup Iteration  29: 4415108.020 ops/s
# Warmup Iteration  30: 4418558.482 ops/s
Iteration   1: 4425872.054 ops/s
Iteration   2: 4423728.086 ops/s
Iteration   3: 4427860.999 ops/s
Iteration   4: 4414432.366 ops/s
Iteration   5: 4436266.404 ops/s
Iteration   6: 4425278.090 ops/s
Iteration   7: 4416096.330 ops/s
Iteration   8: 4413752.017 ops/s
Iteration   9: 4427700.402 ops/s
Iteration  10: 4397792.340 ops/s
Iteration  11: 4423587.824 ops/s
Iteration  12: 4425693.259 ops/s
Iteration  13: 4428376.639 ops/s
Iteration  14: 4422741.684 ops/s
Iteration  15: 4427203.510 ops/s
Iteration  16: 4429233.110 ops/s
Iteration  17: 4418239.181 ops/s
Iteration  18: 4439312.134 ops/s
Iteration  19: 4424993.755 ops/s
Iteration  20: 4417553.450 ops/s
Iteration  21: 4417094.619 ops/s
Iteration  22: 4412237.776 ops/s
Iteration  23: 4417047.541 ops/s
Iteration  24: 4424894.110 ops/s
Iteration  25: 4435244.132 ops/s
Iteration  26: 4441893.424 ops/s
Iteration  27: 4428325.781 ops/s
Iteration  28: 4414555.839 ops/s
Iteration  29: 4427699.638 ops/s
Iteration  30: 4417829.559 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeDouble":
  4423417.868 ±(99.9%) 5992.554 ops/s [Average]
  (min, avg, max) = (4397792.340, 4423417.868, 4441893.424), stdev = 8969.373
  CI (99.9%): [4417425.315, 4429410.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  4423417.868 ± 5992.554  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2133741.741 ops/s
# Warmup Iteration   2: 4084240.970 ops/s
# Warmup Iteration   3: 4421626.065 ops/s
# Warmup Iteration   4: 4445111.748 ops/s
# Warmup Iteration   5: 3662262.803 ops/s
# Warmup Iteration   6: 4458610.806 ops/s
# Warmup Iteration   7: 4446410.845 ops/s
# Warmup Iteration   8: 4439794.976 ops/s
# Warmup Iteration   9: 4455724.828 ops/s
# Warmup Iteration  10: 4461619.586 ops/s
# Warmup Iteration  11: 4446207.155 ops/s
# Warmup Iteration  12: 4451161.897 ops/s
# Warmup Iteration  13: 4434361.053 ops/s
# Warmup Iteration  14: 4446650.489 ops/s
# Warmup Iteration  15: 4444273.673 ops/s
# Warmup Iteration  16: 4431707.184 ops/s
# Warmup Iteration  17: 4446154.244 ops/s
# Warmup Iteration  18: 4440121.955 ops/s
# Warmup Iteration  19: 4451464.351 ops/s
# Warmup Iteration  20: 4455274.339 ops/s
# Warmup Iteration  21: 4451485.795 ops/s
# Warmup Iteration  22: 4435626.375 ops/s
# Warmup Iteration  23: 4440482.663 ops/s
# Warmup Iteration  24: 4450697.266 ops/s
# Warmup Iteration  25: 4452221.275 ops/s
# Warmup Iteration  26: 4459547.864 ops/s
# Warmup Iteration  27: 4445667.146 ops/s
# Warmup Iteration  28: 4458922.219 ops/s
# Warmup Iteration  29: 4446863.195 ops/s
# Warmup Iteration  30: 4443030.448 ops/s
Iteration   1: 4458358.033 ops/s
Iteration   2: 4441921.163 ops/s
Iteration   3: 4445681.102 ops/s
Iteration   4: 4445819.962 ops/s
Iteration   5: 4467846.313 ops/s
Iteration   6: 4450512.365 ops/s
Iteration   7: 4457190.238 ops/s
Iteration   8: 4449308.539 ops/s
Iteration   9: 4441769.966 ops/s
Iteration  10: 4444672.151 ops/s
Iteration  11: 4455737.335 ops/s
Iteration  12: 4449333.003 ops/s
Iteration  13: 4461203.369 ops/s
Iteration  14: 4455452.453 ops/s
Iteration  15: 4455112.100 ops/s
Iteration  16: 4456495.277 ops/s
Iteration  17: 4449454.293 ops/s
Iteration  18: 4452860.837 ops/s
Iteration  19: 4456289.133 ops/s
Iteration  20: 4466373.728 ops/s
Iteration  21: 4449983.023 ops/s
Iteration  22: 4459912.744 ops/s
Iteration  23: 4452646.510 ops/s
Iteration  24: 4454083.875 ops/s
Iteration  25: 4442151.999 ops/s
Iteration  26: 4445335.414 ops/s
Iteration  27: 4456071.963 ops/s
Iteration  28: 4459559.192 ops/s
Iteration  29: 4446852.146 ops/s
Iteration  30: 4446669.489 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeFloat":
  4452488.590 ±(99.9%) 4609.017 ops/s [Average]
  (min, avg, max) = (4441769.966, 4452488.590, 4467846.313), stdev = 6898.559
  CI (99.9%): [4447879.574, 4457097.607] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  4452488.590 ± 4609.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2095373.541 ops/s
# Warmup Iteration   2: 3895950.113 ops/s
# Warmup Iteration   3: 4305157.097 ops/s
# Warmup Iteration   4: 4322308.718 ops/s
# Warmup Iteration   5: 3626121.142 ops/s
# Warmup Iteration   6: 4247683.547 ops/s
# Warmup Iteration   7: 4331990.420 ops/s
# Warmup Iteration   8: 4329336.719 ops/s
# Warmup Iteration   9: 4326813.358 ops/s
# Warmup Iteration  10: 4329497.095 ops/s
# Warmup Iteration  11: 4321162.642 ops/s
# Warmup Iteration  12: 4323388.375 ops/s
# Warmup Iteration  13: 4332730.545 ops/s
# Warmup Iteration  14: 4324475.368 ops/s
# Warmup Iteration  15: 4322293.051 ops/s
# Warmup Iteration  16: 4319554.546 ops/s
# Warmup Iteration  17: 4334053.807 ops/s
# Warmup Iteration  18: 4327233.914 ops/s
# Warmup Iteration  19: 4328186.169 ops/s
# Warmup Iteration  20: 4331633.224 ops/s
# Warmup Iteration  21: 4335362.294 ops/s
# Warmup Iteration  22: 4325297.566 ops/s
# Warmup Iteration  23: 4325390.804 ops/s
# Warmup Iteration  24: 4314931.965 ops/s
# Warmup Iteration  25: 4328412.335 ops/s
# Warmup Iteration  26: 4332615.141 ops/s
# Warmup Iteration  27: 4322302.386 ops/s
# Warmup Iteration  28: 4318547.639 ops/s
# Warmup Iteration  29: 4318782.820 ops/s
# Warmup Iteration  30: 4321209.668 ops/s
Iteration   1: 4339420.588 ops/s
Iteration   2: 4324489.449 ops/s
Iteration   3: 4319909.940 ops/s
Iteration   4: 4323546.120 ops/s
Iteration   5: 4324864.229 ops/s
Iteration   6: 4332850.364 ops/s
Iteration   7: 4319899.706 ops/s
Iteration   8: 4314620.654 ops/s
Iteration   9: 4322952.018 ops/s
Iteration  10: 4324273.121 ops/s
Iteration  11: 4317257.432 ops/s
Iteration  12: 4325271.764 ops/s
Iteration  13: 4316812.806 ops/s
Iteration  14: 4330741.234 ops/s
Iteration  15: 4332656.412 ops/s
Iteration  16: 4316994.034 ops/s
Iteration  17: 4337978.955 ops/s
Iteration  18: 4327662.153 ops/s
Iteration  19: 4332142.494 ops/s
Iteration  20: 4323578.960 ops/s
Iteration  21: 4325435.904 ops/s
Iteration  22: 4325210.287 ops/s
Iteration  23: 4331872.268 ops/s
Iteration  24: 4330615.789 ops/s
Iteration  25: 4324089.296 ops/s
Iteration  26: 4339138.075 ops/s
Iteration  27: 4325226.806 ops/s
Iteration  28: 4321138.888 ops/s
Iteration  29: 4330524.272 ops/s
Iteration  30: 4315774.102 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeInt":
  4325898.271 ±(99.9%) 4530.947 ops/s [Average]
  (min, avg, max) = (4314620.654, 4325898.271, 4339420.588), stdev = 6781.708
  CI (99.9%): [4321367.324, 4330429.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  4325898.271 ± 4530.947  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2081181.317 ops/s
# Warmup Iteration   2: 3963042.199 ops/s
# Warmup Iteration   3: 4289125.797 ops/s
# Warmup Iteration   4: 4326447.901 ops/s
# Warmup Iteration   5: 3555246.816 ops/s
# Warmup Iteration   6: 4326850.578 ops/s
# Warmup Iteration   7: 4315357.829 ops/s
# Warmup Iteration   8: 4311989.447 ops/s
# Warmup Iteration   9: 4326853.345 ops/s
# Warmup Iteration  10: 4329110.343 ops/s
# Warmup Iteration  11: 4331301.283 ops/s
# Warmup Iteration  12: 4319685.566 ops/s
# Warmup Iteration  13: 4320828.763 ops/s
# Warmup Iteration  14: 4321017.400 ops/s
# Warmup Iteration  15: 4321956.504 ops/s
# Warmup Iteration  16: 4326403.336 ops/s
# Warmup Iteration  17: 4331389.932 ops/s
# Warmup Iteration  18: 4327486.213 ops/s
# Warmup Iteration  19: 4322137.969 ops/s
# Warmup Iteration  20: 4326587.328 ops/s
# Warmup Iteration  21: 4324900.586 ops/s
# Warmup Iteration  22: 4324098.947 ops/s
# Warmup Iteration  23: 4336183.504 ops/s
# Warmup Iteration  24: 4328751.626 ops/s
# Warmup Iteration  25: 4324092.703 ops/s
# Warmup Iteration  26: 4323509.859 ops/s
# Warmup Iteration  27: 4321584.991 ops/s
# Warmup Iteration  28: 4320750.661 ops/s
# Warmup Iteration  29: 4327144.520 ops/s
# Warmup Iteration  30: 4320184.339 ops/s
Iteration   1: 4334796.230 ops/s
Iteration   2: 4315794.178 ops/s
Iteration   3: 4327617.470 ops/s
Iteration   4: 4324154.108 ops/s
Iteration   5: 4319225.400 ops/s
Iteration   6: 4330379.273 ops/s
Iteration   7: 4324783.610 ops/s
Iteration   8: 4320652.234 ops/s
Iteration   9: 4331424.660 ops/s
Iteration  10: 4304405.835 ops/s
Iteration  11: 4341208.926 ops/s
Iteration  12: 4322984.068 ops/s
Iteration  13: 4319860.981 ops/s
Iteration  14: 4338249.522 ops/s
Iteration  15: 4320215.994 ops/s
Iteration  16: 4322829.490 ops/s
Iteration  17: 4333372.253 ops/s
Iteration  18: 4316311.198 ops/s
Iteration  19: 4315247.686 ops/s
Iteration  20: 4330398.287 ops/s
Iteration  21: 4324532.583 ops/s
Iteration  22: 4317615.891 ops/s
Iteration  23: 4329034.923 ops/s
Iteration  24: 4322730.908 ops/s
Iteration  25: 4324051.859 ops/s
Iteration  26: 4327630.672 ops/s
Iteration  27: 4304998.090 ops/s
Iteration  28: 4308431.736 ops/s
Iteration  29: 4320892.562 ops/s
Iteration  30: 4309835.811 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_summarizeLong":
  4322788.881 ±(99.9%) 6026.857 ops/s [Average]
  (min, avg, max) = (4304405.835, 4322788.881, 4341208.926), stdev = 9020.716
  CI (99.9%): [4316762.025, 4328815.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  4322788.881 ± 6026.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1286946.636 ops/s
# Warmup Iteration   2: 2653075.136 ops/s
# Warmup Iteration   3: 2891212.896 ops/s
# Warmup Iteration   4: 2905026.596 ops/s
# Warmup Iteration   5: 2388729.310 ops/s
# Warmup Iteration   6: 2914282.160 ops/s
# Warmup Iteration   7: 2909878.080 ops/s
# Warmup Iteration   8: 2919783.521 ops/s
# Warmup Iteration   9: 2914095.096 ops/s
# Warmup Iteration  10: 2913971.273 ops/s
# Warmup Iteration  11: 2912435.681 ops/s
# Warmup Iteration  12: 2909764.906 ops/s
# Warmup Iteration  13: 2916547.014 ops/s
# Warmup Iteration  14: 2916237.002 ops/s
# Warmup Iteration  15: 2909401.297 ops/s
# Warmup Iteration  16: 2916565.481 ops/s
# Warmup Iteration  17: 2914646.847 ops/s
# Warmup Iteration  18: 2916633.177 ops/s
# Warmup Iteration  19: 2918567.817 ops/s
# Warmup Iteration  20: 2917917.355 ops/s
# Warmup Iteration  21: 2909426.192 ops/s
# Warmup Iteration  22: 2914817.195 ops/s
# Warmup Iteration  23: 2915134.783 ops/s
# Warmup Iteration  24: 2922000.447 ops/s
# Warmup Iteration  25: 2910701.021 ops/s
# Warmup Iteration  26: 2918901.930 ops/s
# Warmup Iteration  27: 2914951.551 ops/s
# Warmup Iteration  28: 2911734.280 ops/s
# Warmup Iteration  29: 2926988.110 ops/s
# Warmup Iteration  30: 2920603.167 ops/s
Iteration   1: 2914195.303 ops/s
Iteration   2: 2912764.620 ops/s
Iteration   3: 2916151.348 ops/s
Iteration   4: 2923710.286 ops/s
Iteration   5: 2915687.234 ops/s
Iteration   6: 2912245.930 ops/s
Iteration   7: 2915149.177 ops/s
Iteration   8: 2920620.708 ops/s
Iteration   9: 2905675.554 ops/s
Iteration  10: 2925006.242 ops/s
Iteration  11: 2915733.361 ops/s
Iteration  12: 2911755.281 ops/s
Iteration  13: 2908797.969 ops/s
Iteration  14: 2924881.012 ops/s
Iteration  15: 2911736.713 ops/s
Iteration  16: 2919371.832 ops/s
Iteration  17: 2916994.598 ops/s
Iteration  18: 2916580.284 ops/s
Iteration  19: 2917261.103 ops/s
Iteration  20: 2912882.216 ops/s
Iteration  21: 2923375.143 ops/s
Iteration  22: 2922581.748 ops/s
Iteration  23: 2918303.908 ops/s
Iteration  24: 2919235.129 ops/s
Iteration  25: 2925165.314 ops/s
Iteration  26: 2910671.418 ops/s
Iteration  27: 2920405.757 ops/s
Iteration  28: 2917948.487 ops/s
Iteration  29: 2917383.388 ops/s
Iteration  30: 2918876.807 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_tap":
  2917038.262 ±(99.9%) 3317.726 ops/s [Average]
  (min, avg, max) = (2905675.554, 2917038.262, 2925165.314), stdev = 4965.817
  CI (99.9%): [2913720.536, 2920355.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_tap  thrpt   30  2917038.262 ± 3317.726  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testContainsAllArguments$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testContainsAllArguments

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12994988.796 ops/s
# Warmup Iteration   2: 25486440.222 ops/s
# Warmup Iteration   3: 25292738.459 ops/s
# Warmup Iteration   4: 24093254.004 ops/s
# Warmup Iteration   5: 26879682.546 ops/s
# Warmup Iteration   6: 26735911.054 ops/s
# Warmup Iteration   7: 26811229.567 ops/s
# Warmup Iteration   8: 26750836.050 ops/s
# Warmup Iteration   9: 26678616.699 ops/s
# Warmup Iteration  10: 26885234.094 ops/s
# Warmup Iteration  11: 26716972.816 ops/s
# Warmup Iteration  12: 26774147.484 ops/s
# Warmup Iteration  13: 26700700.272 ops/s
# Warmup Iteration  14: 26892151.801 ops/s
# Warmup Iteration  15: 26954989.228 ops/s
# Warmup Iteration  16: 26591357.982 ops/s
# Warmup Iteration  17: 26360910.454 ops/s
# Warmup Iteration  18: 26864192.853 ops/s
# Warmup Iteration  19: 26414006.099 ops/s
# Warmup Iteration  20: 26555324.987 ops/s
# Warmup Iteration  21: 26638406.709 ops/s
# Warmup Iteration  22: 26692602.100 ops/s
# Warmup Iteration  23: 26802722.072 ops/s
# Warmup Iteration  24: 26824278.650 ops/s
# Warmup Iteration  25: 26575391.392 ops/s
# Warmup Iteration  26: 26555552.520 ops/s
# Warmup Iteration  27: 26744018.419 ops/s
# Warmup Iteration  28: 26666455.743 ops/s
# Warmup Iteration  29: 26690453.365 ops/s
# Warmup Iteration  30: 26771508.323 ops/s
Iteration   1: 26610870.904 ops/s
Iteration   2: 26608120.165 ops/s
Iteration   3: 26474996.187 ops/s
Iteration   4: 26485795.402 ops/s
Iteration   5: 26874499.557 ops/s
Iteration   6: 26702455.051 ops/s
Iteration   7: 26170204.310 ops/s
Iteration   8: 26847527.536 ops/s
Iteration   9: 27142967.435 ops/s
Iteration  10: 26778740.845 ops/s
Iteration  11: 26744577.434 ops/s
Iteration  12: 26190560.081 ops/s
Iteration  13: 26526789.177 ops/s
Iteration  14: 26772991.972 ops/s
Iteration  15: 26762271.699 ops/s
Iteration  16: 26626964.437 ops/s
Iteration  17: 26990130.463 ops/s
Iteration  18: 26762729.260 ops/s
Iteration  19: 26491270.832 ops/s
Iteration  20: 26542922.156 ops/s
Iteration  21: 26582913.156 ops/s
Iteration  22: 26689027.242 ops/s
Iteration  23: 26423539.741 ops/s
Iteration  24: 26609393.199 ops/s
Iteration  25: 26742901.673 ops/s
Iteration  26: 26571928.140 ops/s
Iteration  27: 27199500.594 ops/s
Iteration  28: 26674878.204 ops/s
Iteration  29: 26562118.382 ops/s
Iteration  30: 26632600.602 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testContainsAllArguments":
  26659872.861 ±(99.9%) 149534.809 ops/s [Average]
  (min, avg, max) = (26170204.310, 26659872.861, 27199500.594), stdev = 223816.680
  CI (99.9%): [26510338.052, 26809407.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testContainsAllArguments  thrpt   30  26659872.861 ± 149534.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testForEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testForEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 42754540.344 ops/s
# Warmup Iteration   2: 78602204.202 ops/s
# Warmup Iteration   3: 68954507.015 ops/s
# Warmup Iteration   4: 80673291.696 ops/s
# Warmup Iteration   5: 80967160.913 ops/s
# Warmup Iteration   6: 80728660.929 ops/s
# Warmup Iteration   7: 80732927.093 ops/s
# Warmup Iteration   8: 80526028.742 ops/s
# Warmup Iteration   9: 80753800.945 ops/s
# Warmup Iteration  10: 80581668.310 ops/s
# Warmup Iteration  11: 80672869.727 ops/s
# Warmup Iteration  12: 80393370.165 ops/s
# Warmup Iteration  13: 80356411.291 ops/s
# Warmup Iteration  14: 80569299.956 ops/s
# Warmup Iteration  15: 80589265.866 ops/s
# Warmup Iteration  16: 80540386.897 ops/s
# Warmup Iteration  17: 81141267.949 ops/s
# Warmup Iteration  18: 81523759.068 ops/s
# Warmup Iteration  19: 81283529.174 ops/s
# Warmup Iteration  20: 81358852.197 ops/s
# Warmup Iteration  21: 81220775.437 ops/s
# Warmup Iteration  22: 81468754.014 ops/s
# Warmup Iteration  23: 81667321.914 ops/s
# Warmup Iteration  24: 81331252.284 ops/s
# Warmup Iteration  25: 81437415.210 ops/s
# Warmup Iteration  26: 81479824.944 ops/s
# Warmup Iteration  27: 81267633.054 ops/s
# Warmup Iteration  28: 81175109.242 ops/s
# Warmup Iteration  29: 81449613.052 ops/s
# Warmup Iteration  30: 81220056.107 ops/s
Iteration   1: 81001558.252 ops/s
Iteration   2: 81329569.987 ops/s
Iteration   3: 81420252.976 ops/s
Iteration   4: 81461920.817 ops/s
Iteration   5: 81485840.275 ops/s
Iteration   6: 81543746.235 ops/s
Iteration   7: 81287114.518 ops/s
Iteration   8: 81526349.658 ops/s
Iteration   9: 81635438.227 ops/s
Iteration  10: 81635592.322 ops/s
Iteration  11: 81552750.592 ops/s
Iteration  12: 81676264.916 ops/s
Iteration  13: 81747477.096 ops/s
Iteration  14: 81665756.578 ops/s
Iteration  15: 81434568.266 ops/s
Iteration  16: 81617577.796 ops/s
Iteration  17: 81511540.388 ops/s
Iteration  18: 81415075.599 ops/s
Iteration  19: 81446242.498 ops/s
Iteration  20: 81472231.962 ops/s
Iteration  21: 81433206.909 ops/s
Iteration  22: 81584880.851 ops/s
Iteration  23: 81179009.872 ops/s
Iteration  24: 81303280.322 ops/s
Iteration  25: 81459263.450 ops/s
Iteration  26: 81611290.210 ops/s
Iteration  27: 81531032.997 ops/s
Iteration  28: 81573101.029 ops/s
Iteration  29: 81872737.263 ops/s
Iteration  30: 81544197.883 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testForEachWithOccurrences":
  81498628.991 ±(99.9%) 113465.517 ops/s [Average]
  (min, avg, max) = (81001558.252, 81498628.991, 81872737.263), stdev = 169829.858
  CI (99.9%): [81385163.474, 81612094.509] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testForEachWithOccurrences  thrpt   30  81498628.991 ± 113465.517  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1483621.572 ops/s
# Warmup Iteration   2: 3486115.393 ops/s
# Warmup Iteration   3: 3699110.783 ops/s
# Warmup Iteration   4: 3272996.132 ops/s
# Warmup Iteration   5: 3474395.121 ops/s
# Warmup Iteration   6: 3695170.426 ops/s
# Warmup Iteration   7: 3708485.485 ops/s
# Warmup Iteration   8: 3698526.397 ops/s
# Warmup Iteration   9: 3696622.655 ops/s
# Warmup Iteration  10: 3692361.761 ops/s
# Warmup Iteration  11: 3703738.449 ops/s
# Warmup Iteration  12: 3705538.321 ops/s
# Warmup Iteration  13: 3706889.713 ops/s
# Warmup Iteration  14: 3697682.143 ops/s
# Warmup Iteration  15: 3692751.247 ops/s
# Warmup Iteration  16: 3705017.177 ops/s
# Warmup Iteration  17: 3696942.021 ops/s
# Warmup Iteration  18: 3697994.343 ops/s
# Warmup Iteration  19: 3705612.567 ops/s
# Warmup Iteration  20: 3705576.964 ops/s
# Warmup Iteration  21: 3679579.530 ops/s
# Warmup Iteration  22: 3698868.130 ops/s
# Warmup Iteration  23: 3695586.992 ops/s
# Warmup Iteration  24: 3692129.575 ops/s
# Warmup Iteration  25: 3693907.843 ops/s
# Warmup Iteration  26: 3695213.644 ops/s
# Warmup Iteration  27: 3694310.654 ops/s
# Warmup Iteration  28: 3699420.401 ops/s
# Warmup Iteration  29: 3689817.790 ops/s
# Warmup Iteration  30: 3696997.500 ops/s
Iteration   1: 3697655.831 ops/s
Iteration   2: 3698909.445 ops/s
Iteration   3: 3694187.245 ops/s
Iteration   4: 3706100.624 ops/s
Iteration   5: 3699609.871 ops/s
Iteration   6: 3701762.955 ops/s
Iteration   7: 3694265.490 ops/s
Iteration   8: 3681350.783 ops/s
Iteration   9: 3689623.211 ops/s
Iteration  10: 3683818.540 ops/s
Iteration  11: 3712831.535 ops/s
Iteration  12: 3690277.908 ops/s
Iteration  13: 3668879.061 ops/s
Iteration  14: 3696559.891 ops/s
Iteration  15: 3693499.798 ops/s
Iteration  16: 3708173.352 ops/s
Iteration  17: 3696207.003 ops/s
Iteration  18: 3704474.656 ops/s
Iteration  19: 3693667.860 ops/s
Iteration  20: 3696552.137 ops/s
Iteration  21: 3683272.307 ops/s
Iteration  22: 3698225.253 ops/s
Iteration  23: 3696046.509 ops/s
Iteration  24: 3684903.814 ops/s
Iteration  25: 3700090.678 ops/s
Iteration  26: 3688856.527 ops/s
Iteration  27: 3693893.131 ops/s
Iteration  28: 3688533.303 ops/s
Iteration  29: 3680551.475 ops/s
Iteration  30: 3694426.760 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupBy":
  3693906.898 ±(99.9%) 6053.954 ops/s [Average]
  (min, avg, max) = (3668879.061, 3693906.898, 3712831.535), stdev = 9061.274
  CI (99.9%): [3687852.945, 3699960.852] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testGroupBy  thrpt   30  3693906.898 ± 6053.954  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupByWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupByWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3386931.797 ops/s
# Warmup Iteration   2: 8399815.356 ops/s
# Warmup Iteration   3: 7169191.308 ops/s
# Warmup Iteration   4: 8360478.729 ops/s
# Warmup Iteration   5: 8472684.706 ops/s
# Warmup Iteration   6: 8489449.391 ops/s
# Warmup Iteration   7: 8484533.520 ops/s
# Warmup Iteration   8: 8459944.949 ops/s
# Warmup Iteration   9: 8466642.976 ops/s
# Warmup Iteration  10: 8481999.093 ops/s
# Warmup Iteration  11: 8459777.121 ops/s
# Warmup Iteration  12: 8494159.847 ops/s
# Warmup Iteration  13: 8477522.270 ops/s
# Warmup Iteration  14: 8479903.538 ops/s
# Warmup Iteration  15: 8473762.037 ops/s
# Warmup Iteration  16: 8477668.399 ops/s
# Warmup Iteration  17: 8482058.823 ops/s
# Warmup Iteration  18: 8459183.617 ops/s
# Warmup Iteration  19: 8464879.006 ops/s
# Warmup Iteration  20: 8402878.079 ops/s
# Warmup Iteration  21: 8491691.319 ops/s
# Warmup Iteration  22: 8481857.461 ops/s
# Warmup Iteration  23: 8479958.256 ops/s
# Warmup Iteration  24: 8491153.495 ops/s
# Warmup Iteration  25: 8487351.484 ops/s
# Warmup Iteration  26: 8467975.462 ops/s
# Warmup Iteration  27: 8479763.969 ops/s
# Warmup Iteration  28: 8512512.199 ops/s
# Warmup Iteration  29: 8479733.159 ops/s
# Warmup Iteration  30: 8446651.432 ops/s
Iteration   1: 8470209.350 ops/s
Iteration   2: 8461387.314 ops/s
Iteration   3: 8475195.806 ops/s
Iteration   4: 8505302.962 ops/s
Iteration   5: 8496593.828 ops/s
Iteration   6: 8488671.230 ops/s
Iteration   7: 8467053.344 ops/s
Iteration   8: 8492503.769 ops/s
Iteration   9: 8474064.989 ops/s
Iteration  10: 8458563.788 ops/s
Iteration  11: 8445772.056 ops/s
Iteration  12: 8472250.365 ops/s
Iteration  13: 8488077.519 ops/s
Iteration  14: 8513493.787 ops/s
Iteration  15: 8466712.978 ops/s
Iteration  16: 8505713.399 ops/s
Iteration  17: 8479634.669 ops/s
Iteration  18: 8459895.959 ops/s
Iteration  19: 8496536.418 ops/s
Iteration  20: 8477571.602 ops/s
Iteration  21: 8480727.071 ops/s
Iteration  22: 8483198.574 ops/s
Iteration  23: 8462236.592 ops/s
Iteration  24: 8499818.134 ops/s
Iteration  25: 8495122.995 ops/s
Iteration  26: 8471605.993 ops/s
Iteration  27: 8434236.686 ops/s
Iteration  28: 8474701.507 ops/s
Iteration  29: 8467098.853 ops/s
Iteration  30: 8457425.553 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testGroupByWithTarget":
  8477379.236 ±(99.9%) 12297.814 ops/s [Average]
  (min, avg, max) = (8434236.686, 8477379.236, 8513493.787), stdev = 18406.791
  CI (99.9%): [8465081.422, 8489677.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testGroupByWithTarget  thrpt   30  8477379.236 ± 12297.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6051418.101 ops/s
# Warmup Iteration   2: 12640862.862 ops/s
# Warmup Iteration   3: 10632767.988 ops/s
# Warmup Iteration   4: 12564621.669 ops/s
# Warmup Iteration   5: 12565702.069 ops/s
# Warmup Iteration   6: 12558969.765 ops/s
# Warmup Iteration   7: 12577590.824 ops/s
# Warmup Iteration   8: 12575292.873 ops/s
# Warmup Iteration   9: 12572824.692 ops/s
# Warmup Iteration  10: 12562318.733 ops/s
# Warmup Iteration  11: 12580252.650 ops/s
# Warmup Iteration  12: 12567161.324 ops/s
# Warmup Iteration  13: 12550856.360 ops/s
# Warmup Iteration  14: 12582716.140 ops/s
# Warmup Iteration  15: 12562545.225 ops/s
# Warmup Iteration  16: 12555117.216 ops/s
# Warmup Iteration  17: 12603720.098 ops/s
# Warmup Iteration  18: 12536328.036 ops/s
# Warmup Iteration  19: 12593241.503 ops/s
# Warmup Iteration  20: 12598087.345 ops/s
# Warmup Iteration  21: 12598973.227 ops/s
# Warmup Iteration  22: 12603186.169 ops/s
# Warmup Iteration  23: 12528290.914 ops/s
# Warmup Iteration  24: 12573034.201 ops/s
# Warmup Iteration  25: 12588532.980 ops/s
# Warmup Iteration  26: 12582741.929 ops/s
# Warmup Iteration  27: 12605972.943 ops/s
# Warmup Iteration  28: 12594332.828 ops/s
# Warmup Iteration  29: 12583180.870 ops/s
# Warmup Iteration  30: 12556050.968 ops/s
Iteration   1: 12563945.026 ops/s
Iteration   2: 12553025.519 ops/s
Iteration   3: 12640767.764 ops/s
Iteration   4: 12633062.261 ops/s
Iteration   5: 12563938.446 ops/s
Iteration   6: 12527308.447 ops/s
Iteration   7: 12584849.475 ops/s
Iteration   8: 12522176.724 ops/s
Iteration   9: 12586990.198 ops/s
Iteration  10: 12549589.145 ops/s
Iteration  11: 12544478.671 ops/s
Iteration  12: 12576967.396 ops/s
Iteration  13: 12613641.464 ops/s
Iteration  14: 12584768.516 ops/s
Iteration  15: 12593880.294 ops/s
Iteration  16: 12622125.194 ops/s
Iteration  17: 12563593.121 ops/s
Iteration  18: 12596205.416 ops/s
Iteration  19: 12556730.966 ops/s
Iteration  20: 12571868.172 ops/s
Iteration  21: 12590908.240 ops/s
Iteration  22: 12590184.084 ops/s
Iteration  23: 12629905.408 ops/s
Iteration  24: 12666425.530 ops/s
Iteration  25: 12600047.509 ops/s
Iteration  26: 12589911.564 ops/s
Iteration  27: 12530461.457 ops/s
Iteration  28: 12599271.242 ops/s
Iteration  29: 12572032.942 ops/s
Iteration  30: 12575493.266 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNewCollection":
  12583151.782 ±(99.9%) 22773.640 ops/s [Average]
  (min, avg, max) = (12522176.724, 12583151.782, 12666425.530), stdev = 34086.514
  CI (99.9%): [12560378.142, 12605925.422] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  12583151.782 ± 22773.640  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNotEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNotEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63518773.977 ops/s
# Warmup Iteration   2: 119900316.779 ops/s
# Warmup Iteration   3: 108472483.084 ops/s
# Warmup Iteration   4: 128109949.950 ops/s
# Warmup Iteration   5: 128257017.891 ops/s
# Warmup Iteration   6: 127719533.230 ops/s
# Warmup Iteration   7: 128342991.588 ops/s
# Warmup Iteration   8: 127851893.002 ops/s
# Warmup Iteration   9: 128244259.674 ops/s
# Warmup Iteration  10: 128339840.779 ops/s
# Warmup Iteration  11: 128772222.677 ops/s
# Warmup Iteration  12: 128783057.654 ops/s
# Warmup Iteration  13: 127955631.969 ops/s
# Warmup Iteration  14: 128642759.337 ops/s
# Warmup Iteration  15: 128317723.513 ops/s
# Warmup Iteration  16: 127845164.211 ops/s
# Warmup Iteration  17: 125740799.675 ops/s
# Warmup Iteration  18: 125334279.001 ops/s
# Warmup Iteration  19: 125686333.186 ops/s
# Warmup Iteration  20: 126362529.053 ops/s
# Warmup Iteration  21: 125706135.952 ops/s
# Warmup Iteration  22: 125321327.706 ops/s
# Warmup Iteration  23: 125311536.746 ops/s
# Warmup Iteration  24: 125941699.201 ops/s
# Warmup Iteration  25: 126202402.254 ops/s
# Warmup Iteration  26: 125732833.307 ops/s
# Warmup Iteration  27: 125713214.625 ops/s
# Warmup Iteration  28: 125185539.967 ops/s
# Warmup Iteration  29: 125554230.157 ops/s
# Warmup Iteration  30: 125882145.530 ops/s
Iteration   1: 125563448.665 ops/s
Iteration   2: 126003713.593 ops/s
Iteration   3: 125944371.745 ops/s
Iteration   4: 125734293.858 ops/s
Iteration   5: 125660483.362 ops/s
Iteration   6: 125864475.975 ops/s
Iteration   7: 126492754.355 ops/s
Iteration   8: 125968166.034 ops/s
Iteration   9: 126247047.591 ops/s
Iteration  10: 126017590.348 ops/s
Iteration  11: 125626494.106 ops/s
Iteration  12: 125846676.966 ops/s
Iteration  13: 125125547.345 ops/s
Iteration  14: 125773642.060 ops/s
Iteration  15: 126363410.800 ops/s
Iteration  16: 125606984.689 ops/s
Iteration  17: 126155157.643 ops/s
Iteration  18: 125208174.894 ops/s
Iteration  19: 126335570.655 ops/s
Iteration  20: 126031796.888 ops/s
Iteration  21: 126108140.345 ops/s
Iteration  22: 125897225.818 ops/s
Iteration  23: 125998106.497 ops/s
Iteration  24: 125609667.159 ops/s
Iteration  25: 125360150.199 ops/s
Iteration  26: 126015179.029 ops/s
Iteration  27: 126203383.297 ops/s
Iteration  28: 125726427.971 ops/s
Iteration  29: 125643769.007 ops/s
Iteration  30: 125944560.525 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testNotEmpty":
  125869213.714 ±(99.9%) 216688.783 ops/s [Average]
  (min, avg, max) = (125125547.345, 125869213.714, 126492754.355), stdev = 324329.594
  CI (99.9%): [125652524.931, 126085902.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testNotEmpty  thrpt   30  125869213.714 ± 216688.783  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testOccurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testOccurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28420016.670 ops/s
# Warmup Iteration   2: 56923786.791 ops/s
# Warmup Iteration   3: 58736449.917 ops/s
# Warmup Iteration   4: 50062487.557 ops/s
# Warmup Iteration   5: 58472430.155 ops/s
# Warmup Iteration   6: 58747863.720 ops/s
# Warmup Iteration   7: 58479943.738 ops/s
# Warmup Iteration   8: 59008079.965 ops/s
# Warmup Iteration   9: 58616635.246 ops/s
# Warmup Iteration  10: 58365479.625 ops/s
# Warmup Iteration  11: 58336512.586 ops/s
# Warmup Iteration  12: 58289020.838 ops/s
# Warmup Iteration  13: 58822032.319 ops/s
# Warmup Iteration  14: 58531069.968 ops/s
# Warmup Iteration  15: 58294637.705 ops/s
# Warmup Iteration  16: 58745582.586 ops/s
# Warmup Iteration  17: 58186119.127 ops/s
# Warmup Iteration  18: 58391864.135 ops/s
# Warmup Iteration  19: 58506045.226 ops/s
# Warmup Iteration  20: 58830074.332 ops/s
# Warmup Iteration  21: 59057279.603 ops/s
# Warmup Iteration  22: 58539433.987 ops/s
# Warmup Iteration  23: 58699569.469 ops/s
# Warmup Iteration  24: 58742488.084 ops/s
# Warmup Iteration  25: 58808165.576 ops/s
# Warmup Iteration  26: 58039767.023 ops/s
# Warmup Iteration  27: 58473653.659 ops/s
# Warmup Iteration  28: 58136663.314 ops/s
# Warmup Iteration  29: 58561673.480 ops/s
# Warmup Iteration  30: 58721660.031 ops/s
Iteration   1: 58383180.782 ops/s
Iteration   2: 58048661.687 ops/s
Iteration   3: 58366918.644 ops/s
Iteration   4: 59188831.213 ops/s
Iteration   5: 58900117.630 ops/s
Iteration   6: 59066960.602 ops/s
Iteration   7: 58547526.559 ops/s
Iteration   8: 58253703.146 ops/s
Iteration   9: 57749711.891 ops/s
Iteration  10: 57958380.113 ops/s
Iteration  11: 58460131.117 ops/s
Iteration  12: 58796331.744 ops/s
Iteration  13: 58635867.716 ops/s
Iteration  14: 59122446.274 ops/s
Iteration  15: 58918269.675 ops/s
Iteration  16: 59500719.667 ops/s
Iteration  17: 58833057.780 ops/s
Iteration  18: 57628922.600 ops/s
Iteration  19: 59278970.281 ops/s
Iteration  20: 59293718.119 ops/s
Iteration  21: 58926277.885 ops/s
Iteration  22: 59117685.947 ops/s
Iteration  23: 57855349.635 ops/s
Iteration  24: 58328752.852 ops/s
Iteration  25: 58291281.075 ops/s
Iteration  26: 59076037.012 ops/s
Iteration  27: 58132485.690 ops/s
Iteration  28: 58651791.816 ops/s
Iteration  29: 58572496.711 ops/s
Iteration  30: 58304315.223 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testOccurrencesOf":
  58606296.703 ±(99.9%) 331389.241 ops/s [Average]
  (min, avg, max) = (57628922.600, 58606296.703, 59500719.667), stdev = 496007.852
  CI (99.9%): [58274907.462, 58937685.944] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testOccurrencesOf  thrpt   30  58606296.703 ± 331389.241  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSize$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSize

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27607510.013 ops/s
# Warmup Iteration   2: 46396896.265 ops/s
# Warmup Iteration   3: 49803678.836 ops/s
# Warmup Iteration   4: 51965125.942 ops/s
# Warmup Iteration   5: 51563243.447 ops/s
# Warmup Iteration   6: 51915062.290 ops/s
# Warmup Iteration   7: 51666715.956 ops/s
# Warmup Iteration   8: 51753388.592 ops/s
# Warmup Iteration   9: 51921543.718 ops/s
# Warmup Iteration  10: 51851541.655 ops/s
# Warmup Iteration  11: 51578387.460 ops/s
# Warmup Iteration  12: 51907095.318 ops/s
# Warmup Iteration  13: 51788067.074 ops/s
# Warmup Iteration  14: 51775190.179 ops/s
# Warmup Iteration  15: 51478348.752 ops/s
# Warmup Iteration  16: 51804833.697 ops/s
# Warmup Iteration  17: 51616194.963 ops/s
# Warmup Iteration  18: 51809200.663 ops/s
# Warmup Iteration  19: 52169322.048 ops/s
# Warmup Iteration  20: 51856411.192 ops/s
# Warmup Iteration  21: 51778164.659 ops/s
# Warmup Iteration  22: 51876612.899 ops/s
# Warmup Iteration  23: 51837828.824 ops/s
# Warmup Iteration  24: 51942722.614 ops/s
# Warmup Iteration  25: 51833012.981 ops/s
# Warmup Iteration  26: 52001337.497 ops/s
# Warmup Iteration  27: 51683593.848 ops/s
# Warmup Iteration  28: 51664951.095 ops/s
# Warmup Iteration  29: 51711087.591 ops/s
# Warmup Iteration  30: 51739797.016 ops/s
Iteration   1: 51741721.444 ops/s
Iteration   2: 51876229.310 ops/s
Iteration   3: 52137527.773 ops/s
Iteration   4: 51916563.040 ops/s
Iteration   5: 51940045.242 ops/s
Iteration   6: 51864172.613 ops/s
Iteration   7: 51915468.935 ops/s
Iteration   8: 51821367.555 ops/s
Iteration   9: 51876558.056 ops/s
Iteration  10: 51883077.610 ops/s
Iteration  11: 51942694.818 ops/s
Iteration  12: 52061772.124 ops/s
Iteration  13: 51582656.741 ops/s
Iteration  14: 51400651.555 ops/s
Iteration  15: 51314166.607 ops/s
Iteration  16: 51492730.019 ops/s
Iteration  17: 52068037.464 ops/s
Iteration  18: 51880436.998 ops/s
Iteration  19: 51905699.284 ops/s
Iteration  20: 51631816.437 ops/s
Iteration  21: 51762539.757 ops/s
Iteration  22: 51777814.148 ops/s
Iteration  23: 51919201.925 ops/s
Iteration  24: 52067799.016 ops/s
Iteration  25: 51857708.898 ops/s
Iteration  26: 51795212.725 ops/s
Iteration  27: 51888054.044 ops/s
Iteration  28: 51942221.058 ops/s
Iteration  29: 51889690.251 ops/s
Iteration  30: 51776286.609 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSize":
  51830997.402 ±(99.9%) 125898.227 ops/s [Average]
  (min, avg, max) = (51314166.607, 51830997.402, 52137527.773), stdev = 188438.554
  CI (99.9%): [51705099.174, 51956895.629] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testSize  thrpt   30  51830997.402 ± 125898.227  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 63691722.643 ops/s
# Warmup Iteration   2: 121140877.825 ops/s
# Warmup Iteration   3: 110628614.257 ops/s
# Warmup Iteration   4: 128535896.807 ops/s
# Warmup Iteration   5: 128467969.075 ops/s
# Warmup Iteration   6: 129416503.444 ops/s
# Warmup Iteration   7: 128201853.794 ops/s
# Warmup Iteration   8: 128670062.413 ops/s
# Warmup Iteration   9: 128664823.542 ops/s
# Warmup Iteration  10: 128459449.123 ops/s
# Warmup Iteration  11: 128348244.718 ops/s
# Warmup Iteration  12: 128269334.806 ops/s
# Warmup Iteration  13: 128255915.251 ops/s
# Warmup Iteration  14: 128793666.445 ops/s
# Warmup Iteration  15: 128433576.433 ops/s
# Warmup Iteration  16: 128852389.739 ops/s
# Warmup Iteration  17: 127212812.188 ops/s
# Warmup Iteration  18: 127077247.228 ops/s
# Warmup Iteration  19: 127471942.126 ops/s
# Warmup Iteration  20: 127318074.314 ops/s
# Warmup Iteration  21: 127358578.750 ops/s
# Warmup Iteration  22: 127269003.802 ops/s
# Warmup Iteration  23: 127314184.801 ops/s
# Warmup Iteration  24: 127613000.440 ops/s
# Warmup Iteration  25: 127720845.561 ops/s
# Warmup Iteration  26: 127673090.270 ops/s
# Warmup Iteration  27: 127414991.568 ops/s
# Warmup Iteration  28: 127201207.311 ops/s
# Warmup Iteration  29: 127271595.310 ops/s
# Warmup Iteration  30: 127750856.180 ops/s
Iteration   1: 127843510.631 ops/s
Iteration   2: 127178282.107 ops/s
Iteration   3: 126878294.997 ops/s
Iteration   4: 125677538.488 ops/s
Iteration   5: 126231050.377 ops/s
Iteration   6: 126609297.391 ops/s
Iteration   7: 127157421.466 ops/s
Iteration   8: 126985992.878 ops/s
Iteration   9: 127177640.066 ops/s
Iteration  10: 127350781.840 ops/s
Iteration  11: 127402239.354 ops/s
Iteration  12: 127369017.054 ops/s
Iteration  13: 127638044.856 ops/s
Iteration  14: 126888261.567 ops/s
Iteration  15: 126363468.540 ops/s
Iteration  16: 127226012.590 ops/s
Iteration  17: 127073242.004 ops/s
Iteration  18: 127232564.166 ops/s
Iteration  19: 127851557.441 ops/s
Iteration  20: 126948414.706 ops/s
Iteration  21: 126803836.092 ops/s
Iteration  22: 127210014.742 ops/s
Iteration  23: 127163106.569 ops/s
Iteration  24: 126900978.156 ops/s
Iteration  25: 126423386.445 ops/s
Iteration  26: 126598613.453 ops/s
Iteration  27: 127375903.272 ops/s
Iteration  28: 127094377.896 ops/s
Iteration  29: 127533221.210 ops/s
Iteration  30: 127488896.388 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testSizeDistinct":
  127055832.225 ±(99.9%) 318348.778 ops/s [Average]
  (min, avg, max) = (125677538.488, 127055832.225, 127851557.441), stdev = 476489.501
  CI (99.9%): [126737483.446, 127374181.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testSizeDistinct  thrpt   30  127055832.225 ± 318348.778  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1104634.416 ops/s
# Warmup Iteration   2: 2572729.851 ops/s
# Warmup Iteration   3: 2605350.954 ops/s
# Warmup Iteration   4: 2157356.568 ops/s
# Warmup Iteration   5: 2622480.161 ops/s
# Warmup Iteration   6: 2613379.017 ops/s
# Warmup Iteration   7: 2608777.805 ops/s
# Warmup Iteration   8: 2617111.242 ops/s
# Warmup Iteration   9: 2606369.810 ops/s
# Warmup Iteration  10: 2616053.579 ops/s
# Warmup Iteration  11: 2611242.480 ops/s
# Warmup Iteration  12: 2615356.686 ops/s
# Warmup Iteration  13: 2611833.796 ops/s
# Warmup Iteration  14: 2612197.222 ops/s
# Warmup Iteration  15: 2618207.327 ops/s
# Warmup Iteration  16: 2614573.181 ops/s
# Warmup Iteration  17: 2606842.903 ops/s
# Warmup Iteration  18: 2604533.600 ops/s
# Warmup Iteration  19: 2617155.133 ops/s
# Warmup Iteration  20: 2614917.341 ops/s
# Warmup Iteration  21: 2609621.991 ops/s
# Warmup Iteration  22: 2616603.241 ops/s
# Warmup Iteration  23: 2605188.011 ops/s
# Warmup Iteration  24: 2608906.856 ops/s
# Warmup Iteration  25: 2606496.695 ops/s
# Warmup Iteration  26: 2614339.238 ops/s
# Warmup Iteration  27: 2611492.371 ops/s
# Warmup Iteration  28: 2617272.365 ops/s
# Warmup Iteration  29: 2605770.936 ops/s
# Warmup Iteration  30: 2614366.879 ops/s
Iteration   1: 2607330.294 ops/s
Iteration   2: 2615175.508 ops/s
Iteration   3: 2610547.974 ops/s
Iteration   4: 2619461.029 ops/s
Iteration   5: 2612599.955 ops/s
Iteration   6: 2620289.743 ops/s
Iteration   7: 2616809.213 ops/s
Iteration   8: 2605625.074 ops/s
Iteration   9: 2612729.409 ops/s
Iteration  10: 2615093.770 ops/s
Iteration  11: 2598641.192 ops/s
Iteration  12: 2617775.745 ops/s
Iteration  13: 2619987.976 ops/s
Iteration  14: 2613921.195 ops/s
Iteration  15: 2614582.943 ops/s
Iteration  16: 2603283.988 ops/s
Iteration  17: 2598354.408 ops/s
Iteration  18: 2619126.933 ops/s
Iteration  19: 2621165.959 ops/s
Iteration  20: 2615263.929 ops/s
Iteration  21: 2607897.540 ops/s
Iteration  22: 2615233.380 ops/s
Iteration  23: 2606021.632 ops/s
Iteration  24: 2615507.914 ops/s
Iteration  25: 2617010.816 ops/s
Iteration  26: 2611368.058 ops/s
Iteration  27: 2616976.309 ops/s
Iteration  28: 2607227.701 ops/s
Iteration  29: 2613740.254 ops/s
Iteration  30: 2614293.687 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_testToString":
  2612768.118 ±(99.9%) 4049.180 ops/s [Average]
  (min, avg, max) = (2598354.408, 2612768.118, 2621165.959), stdev = 6060.622
  CI (99.9%): [2608718.938, 2616817.298] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_testToString  thrpt   30  2612768.118 ± 4049.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1262965.635 ops/s
# Warmup Iteration   2: 3151337.097 ops/s
# Warmup Iteration   3: 3148424.772 ops/s
# Warmup Iteration   4: 2619544.855 ops/s
# Warmup Iteration   5: 3161194.420 ops/s
# Warmup Iteration   6: 3165448.305 ops/s
# Warmup Iteration   7: 3158075.772 ops/s
# Warmup Iteration   8: 3174266.683 ops/s
# Warmup Iteration   9: 3170025.320 ops/s
# Warmup Iteration  10: 3161880.051 ops/s
# Warmup Iteration  11: 3155574.806 ops/s
# Warmup Iteration  12: 3163664.093 ops/s
# Warmup Iteration  13: 3168151.832 ops/s
# Warmup Iteration  14: 3166932.405 ops/s
# Warmup Iteration  15: 3170093.060 ops/s
# Warmup Iteration  16: 3159759.641 ops/s
# Warmup Iteration  17: 3170640.440 ops/s
# Warmup Iteration  18: 3162022.092 ops/s
# Warmup Iteration  19: 3167129.460 ops/s
# Warmup Iteration  20: 3154912.871 ops/s
# Warmup Iteration  21: 3156398.011 ops/s
# Warmup Iteration  22: 3166624.592 ops/s
# Warmup Iteration  23: 3170920.860 ops/s
# Warmup Iteration  24: 3175356.729 ops/s
# Warmup Iteration  25: 3164379.635 ops/s
# Warmup Iteration  26: 3165073.702 ops/s
# Warmup Iteration  27: 3170664.889 ops/s
# Warmup Iteration  28: 3167751.472 ops/s
# Warmup Iteration  29: 3164500.276 ops/s
# Warmup Iteration  30: 3159516.845 ops/s
Iteration   1: 3160644.965 ops/s
Iteration   2: 3154283.253 ops/s
Iteration   3: 3169864.270 ops/s
Iteration   4: 3158726.503 ops/s
Iteration   5: 3161005.478 ops/s
Iteration   6: 3163163.720 ops/s
Iteration   7: 3167236.832 ops/s
Iteration   8: 3167825.386 ops/s
Iteration   9: 3169468.779 ops/s
Iteration  10: 3159096.028 ops/s
Iteration  11: 3170425.077 ops/s
Iteration  12: 3181596.984 ops/s
Iteration  13: 3169815.675 ops/s
Iteration  14: 3163718.876 ops/s
Iteration  15: 3170953.719 ops/s
Iteration  16: 3172421.272 ops/s
Iteration  17: 3165865.680 ops/s
Iteration  18: 3177182.316 ops/s
Iteration  19: 3154297.983 ops/s
Iteration  20: 3164364.568 ops/s
Iteration  21: 3165337.840 ops/s
Iteration  22: 3167822.079 ops/s
Iteration  23: 3159079.919 ops/s
Iteration  24: 3158183.897 ops/s
Iteration  25: 3163800.869 ops/s
Iteration  26: 3170412.330 ops/s
Iteration  27: 3163200.248 ops/s
Iteration  28: 3169328.739 ops/s
Iteration  29: 3159735.113 ops/s
Iteration  30: 3165889.219 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArray":
  3165491.587 ±(99.9%) 4173.964 ops/s [Average]
  (min, avg, max) = (3154283.253, 3165491.587, 3181596.984), stdev = 6247.394
  CI (99.9%): [3161317.623, 3169665.551] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toArray  thrpt   30  3165491.587 ± 4173.964  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArrayGivenArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArrayGivenArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9582279.906 ops/s
# Warmup Iteration   2: 17970518.412 ops/s
# Warmup Iteration   3: 15706279.753 ops/s
# Warmup Iteration   4: 18425078.992 ops/s
# Warmup Iteration   5: 18416263.757 ops/s
# Warmup Iteration   6: 18435035.271 ops/s
# Warmup Iteration   7: 18473765.336 ops/s
# Warmup Iteration   8: 18411603.043 ops/s
# Warmup Iteration   9: 18275216.459 ops/s
# Warmup Iteration  10: 18378903.231 ops/s
# Warmup Iteration  11: 18421827.724 ops/s
# Warmup Iteration  12: 18422556.466 ops/s
# Warmup Iteration  13: 18457311.757 ops/s
# Warmup Iteration  14: 18431614.513 ops/s
# Warmup Iteration  15: 18404647.974 ops/s
# Warmup Iteration  16: 18392363.410 ops/s
# Warmup Iteration  17: 18458208.364 ops/s
# Warmup Iteration  18: 18389399.766 ops/s
# Warmup Iteration  19: 18435387.483 ops/s
# Warmup Iteration  20: 18452544.876 ops/s
# Warmup Iteration  21: 18426161.630 ops/s
# Warmup Iteration  22: 18391320.064 ops/s
# Warmup Iteration  23: 18495612.424 ops/s
# Warmup Iteration  24: 18461183.555 ops/s
# Warmup Iteration  25: 18397782.895 ops/s
# Warmup Iteration  26: 18396561.779 ops/s
# Warmup Iteration  27: 18447258.125 ops/s
# Warmup Iteration  28: 18437176.408 ops/s
# Warmup Iteration  29: 18449331.220 ops/s
# Warmup Iteration  30: 18504896.906 ops/s
Iteration   1: 18432141.735 ops/s
Iteration   2: 18475918.435 ops/s
Iteration   3: 18451242.603 ops/s
Iteration   4: 18436659.023 ops/s
Iteration   5: 18495568.498 ops/s
Iteration   6: 18409196.090 ops/s
Iteration   7: 18466200.140 ops/s
Iteration   8: 18551097.485 ops/s
Iteration   9: 18394432.935 ops/s
Iteration  10: 18433615.378 ops/s
Iteration  11: 18442593.659 ops/s
Iteration  12: 18393473.002 ops/s
Iteration  13: 18432112.630 ops/s
Iteration  14: 18409807.846 ops/s
Iteration  15: 18369627.595 ops/s
Iteration  16: 18438229.538 ops/s
Iteration  17: 18375180.749 ops/s
Iteration  18: 18451018.713 ops/s
Iteration  19: 18466659.643 ops/s
Iteration  20: 18403702.302 ops/s
Iteration  21: 18435284.054 ops/s
Iteration  22: 18408603.788 ops/s
Iteration  23: 18457414.234 ops/s
Iteration  24: 18502685.651 ops/s
Iteration  25: 18486022.344 ops/s
Iteration  26: 18423765.327 ops/s
Iteration  27: 18369708.115 ops/s
Iteration  28: 18535807.943 ops/s
Iteration  29: 18491473.139 ops/s
Iteration  30: 18368464.092 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toArrayGivenArray":
  18440256.889 ±(99.9%) 31540.848 ops/s [Average]
  (min, avg, max) = (18368464.092, 18440256.889, 18551097.485), stdev = 47208.859
  CI (99.9%): [18408716.042, 18471797.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toArrayGivenArray  thrpt   30  18440256.889 ± 31540.848  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 554609.741 ops/s
# Warmup Iteration   2: 1024963.456 ops/s
# Warmup Iteration   3: 1167019.959 ops/s
# Warmup Iteration   4: 1173630.636 ops/s
# Warmup Iteration   5: 1130874.160 ops/s
# Warmup Iteration   6: 994009.910 ops/s
# Warmup Iteration   7: 1171768.315 ops/s
# Warmup Iteration   8: 1173792.340 ops/s
# Warmup Iteration   9: 1173633.935 ops/s
# Warmup Iteration  10: 1170883.006 ops/s
# Warmup Iteration  11: 1174422.942 ops/s
# Warmup Iteration  12: 1170778.371 ops/s
# Warmup Iteration  13: 1172404.796 ops/s
# Warmup Iteration  14: 1175502.177 ops/s
# Warmup Iteration  15: 1172537.889 ops/s
# Warmup Iteration  16: 1171611.988 ops/s
# Warmup Iteration  17: 1169396.863 ops/s
# Warmup Iteration  18: 1172798.671 ops/s
# Warmup Iteration  19: 1175030.904 ops/s
# Warmup Iteration  20: 1169562.272 ops/s
# Warmup Iteration  21: 1171227.195 ops/s
# Warmup Iteration  22: 1171882.877 ops/s
# Warmup Iteration  23: 1175483.276 ops/s
# Warmup Iteration  24: 1171835.058 ops/s
# Warmup Iteration  25: 1173295.641 ops/s
# Warmup Iteration  26: 1172024.274 ops/s
# Warmup Iteration  27: 1171976.346 ops/s
# Warmup Iteration  28: 1173016.125 ops/s
# Warmup Iteration  29: 1171171.143 ops/s
# Warmup Iteration  30: 1172921.624 ops/s
Iteration   1: 1173206.290 ops/s
Iteration   2: 1171030.146 ops/s
Iteration   3: 1171824.443 ops/s
Iteration   4: 1168730.537 ops/s
Iteration   5: 1172579.118 ops/s
Iteration   6: 1175646.087 ops/s
Iteration   7: 1174411.422 ops/s
Iteration   8: 1176600.049 ops/s
Iteration   9: 1171463.429 ops/s
Iteration  10: 1168300.953 ops/s
Iteration  11: 1170837.649 ops/s
Iteration  12: 1167991.874 ops/s
Iteration  13: 1175152.591 ops/s
Iteration  14: 1174829.347 ops/s
Iteration  15: 1174485.304 ops/s
Iteration  16: 1171805.187 ops/s
Iteration  17: 1175140.227 ops/s
Iteration  18: 1173758.259 ops/s
Iteration  19: 1172016.830 ops/s
Iteration  20: 1165786.219 ops/s
Iteration  21: 1172346.925 ops/s
Iteration  22: 1171685.028 ops/s
Iteration  23: 1170545.387 ops/s
Iteration  24: 1169604.509 ops/s
Iteration  25: 1174986.620 ops/s
Iteration  26: 1169235.752 ops/s
Iteration  27: 1173656.484 ops/s
Iteration  28: 1168105.835 ops/s
Iteration  29: 1171585.967 ops/s
Iteration  30: 1170555.329 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBag":
  1171930.127 ±(99.9%) 1778.449 ops/s [Average]
  (min, avg, max) = (1165786.219, 1171930.127, 1176600.049), stdev = 2661.900
  CI (99.9%): [1170151.677, 1173708.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toBag  thrpt   30  1171930.127 ± 1778.449  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95942.420 ops/s
# Warmup Iteration   2: 130032.733 ops/s
# Warmup Iteration   3: 165098.902 ops/s
# Warmup Iteration   4: 164551.097 ops/s
# Warmup Iteration   5: 165357.608 ops/s
# Warmup Iteration   6: 165334.813 ops/s
# Warmup Iteration   7: 165333.538 ops/s
# Warmup Iteration   8: 140548.297 ops/s
# Warmup Iteration   9: 162371.881 ops/s
# Warmup Iteration  10: 164971.103 ops/s
# Warmup Iteration  11: 165134.994 ops/s
# Warmup Iteration  12: 165030.704 ops/s
# Warmup Iteration  13: 165367.313 ops/s
# Warmup Iteration  14: 165415.674 ops/s
# Warmup Iteration  15: 164993.995 ops/s
# Warmup Iteration  16: 165630.975 ops/s
# Warmup Iteration  17: 170222.041 ops/s
# Warmup Iteration  18: 170213.806 ops/s
# Warmup Iteration  19: 170024.797 ops/s
# Warmup Iteration  20: 170446.931 ops/s
# Warmup Iteration  21: 170271.670 ops/s
# Warmup Iteration  22: 170186.915 ops/s
# Warmup Iteration  23: 169942.156 ops/s
# Warmup Iteration  24: 170109.756 ops/s
# Warmup Iteration  25: 169543.928 ops/s
# Warmup Iteration  26: 170199.542 ops/s
# Warmup Iteration  27: 170222.269 ops/s
# Warmup Iteration  28: 170108.177 ops/s
# Warmup Iteration  29: 170242.786 ops/s
# Warmup Iteration  30: 170534.463 ops/s
Iteration   1: 170214.029 ops/s
Iteration   2: 170515.172 ops/s
Iteration   3: 170068.990 ops/s
Iteration   4: 169287.517 ops/s
Iteration   5: 171007.895 ops/s
Iteration   6: 169756.755 ops/s
Iteration   7: 169252.114 ops/s
Iteration   8: 170322.041 ops/s
Iteration   9: 170360.028 ops/s
Iteration  10: 170318.532 ops/s
Iteration  11: 170220.963 ops/s
Iteration  12: 170433.809 ops/s
Iteration  13: 170020.457 ops/s
Iteration  14: 169335.528 ops/s
Iteration  15: 170518.831 ops/s
Iteration  16: 170338.395 ops/s
Iteration  17: 169916.507 ops/s
Iteration  18: 170713.203 ops/s
Iteration  19: 170089.112 ops/s
Iteration  20: 170336.551 ops/s
Iteration  21: 170168.216 ops/s
Iteration  22: 170089.465 ops/s
Iteration  23: 169959.230 ops/s
Iteration  24: 170401.929 ops/s
Iteration  25: 170660.959 ops/s
Iteration  26: 170262.473 ops/s
Iteration  27: 170413.362 ops/s
Iteration  28: 170335.295 ops/s
Iteration  29: 169696.081 ops/s
Iteration  30: 170198.403 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toBiMap":
  170173.728 ±(99.9%) 269.170 ops/s [Average]
  (min, avg, max) = (169252.114, 170173.728, 171007.895), stdev = 402.881
  CI (99.9%): [169904.558, 170442.898] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toBiMap  thrpt   30  170173.728 ± 269.170  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1280129.377 ops/s
# Warmup Iteration   2: 2592399.553 ops/s
# Warmup Iteration   3: 2797224.168 ops/s
# Warmup Iteration   4: 2800035.564 ops/s
# Warmup Iteration   5: 2314728.451 ops/s
# Warmup Iteration   6: 2821614.899 ops/s
# Warmup Iteration   7: 2822166.345 ops/s
# Warmup Iteration   8: 2818205.515 ops/s
# Warmup Iteration   9: 2817689.364 ops/s
# Warmup Iteration  10: 2816710.678 ops/s
# Warmup Iteration  11: 2828568.006 ops/s
# Warmup Iteration  12: 2822796.321 ops/s
# Warmup Iteration  13: 2823467.513 ops/s
# Warmup Iteration  14: 2813536.965 ops/s
# Warmup Iteration  15: 2824245.540 ops/s
# Warmup Iteration  16: 2823375.710 ops/s
# Warmup Iteration  17: 2819535.729 ops/s
# Warmup Iteration  18: 2816389.348 ops/s
# Warmup Iteration  19: 2825219.100 ops/s
# Warmup Iteration  20: 2826899.676 ops/s
# Warmup Iteration  21: 2817544.074 ops/s
# Warmup Iteration  22: 2822783.327 ops/s
# Warmup Iteration  23: 2824199.929 ops/s
# Warmup Iteration  24: 2818715.933 ops/s
# Warmup Iteration  25: 2823253.533 ops/s
# Warmup Iteration  26: 2814407.959 ops/s
# Warmup Iteration  27: 2820762.764 ops/s
# Warmup Iteration  28: 2821912.649 ops/s
# Warmup Iteration  29: 2818241.216 ops/s
# Warmup Iteration  30: 2822128.401 ops/s
Iteration   1: 2826655.046 ops/s
Iteration   2: 2819609.580 ops/s
Iteration   3: 2827665.551 ops/s
Iteration   4: 2813942.807 ops/s
Iteration   5: 2810839.601 ops/s
Iteration   6: 2825534.602 ops/s
Iteration   7: 2812142.177 ops/s
Iteration   8: 2819802.846 ops/s
Iteration   9: 2822342.292 ops/s
Iteration  10: 2817787.513 ops/s
Iteration  11: 2819188.054 ops/s
Iteration  12: 2824485.619 ops/s
Iteration  13: 2812534.872 ops/s
Iteration  14: 2822744.632 ops/s
Iteration  15: 2817782.757 ops/s
Iteration  16: 2822385.597 ops/s
Iteration  17: 2817954.793 ops/s
Iteration  18: 2811316.473 ops/s
Iteration  19: 2829878.571 ops/s
Iteration  20: 2811873.693 ops/s
Iteration  21: 2824020.541 ops/s
Iteration  22: 2832891.470 ops/s
Iteration  23: 2819887.181 ops/s
Iteration  24: 2823100.295 ops/s
Iteration  25: 2825230.461 ops/s
Iteration  26: 2828957.653 ops/s
Iteration  27: 2822225.148 ops/s
Iteration  28: 2828161.409 ops/s
Iteration  29: 2822221.225 ops/s
Iteration  30: 2820551.085 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toCollection":
  2821123.785 ±(99.9%) 3929.072 ops/s [Average]
  (min, avg, max) = (2810839.601, 2821123.785, 2832891.470), stdev = 5880.851
  CI (99.9%): [2817194.712, 2825052.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toCollection  thrpt   30  2821123.785 ± 3929.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 44346508.444 ops/s
# Warmup Iteration   2: 82013847.155 ops/s
# Warmup Iteration   3: 76898387.426 ops/s
# Warmup Iteration   4: 89538980.286 ops/s
# Warmup Iteration   5: 89988582.254 ops/s
# Warmup Iteration   6: 89630980.090 ops/s
# Warmup Iteration   7: 89724585.942 ops/s
# Warmup Iteration   8: 90006521.459 ops/s
# Warmup Iteration   9: 90145981.791 ops/s
# Warmup Iteration  10: 89905641.025 ops/s
# Warmup Iteration  11: 89743280.581 ops/s
# Warmup Iteration  12: 89827848.812 ops/s
# Warmup Iteration  13: 89985938.139 ops/s
# Warmup Iteration  14: 90015416.052 ops/s
# Warmup Iteration  15: 89919566.267 ops/s
# Warmup Iteration  16: 90039762.753 ops/s
# Warmup Iteration  17: 89897156.353 ops/s
# Warmup Iteration  18: 90056380.019 ops/s
# Warmup Iteration  19: 89831663.946 ops/s
# Warmup Iteration  20: 89457395.961 ops/s
# Warmup Iteration  21: 89995002.261 ops/s
# Warmup Iteration  22: 89791306.843 ops/s
# Warmup Iteration  23: 90050150.877 ops/s
# Warmup Iteration  24: 89789150.345 ops/s
# Warmup Iteration  25: 89824531.661 ops/s
# Warmup Iteration  26: 89954943.197 ops/s
# Warmup Iteration  27: 89814650.474 ops/s
# Warmup Iteration  28: 90069889.129 ops/s
# Warmup Iteration  29: 89791433.461 ops/s
# Warmup Iteration  30: 90102239.467 ops/s
Iteration   1: 89681497.271 ops/s
Iteration   2: 90041297.142 ops/s
Iteration   3: 89992379.433 ops/s
Iteration   4: 90503214.533 ops/s
Iteration   5: 89757165.686 ops/s
Iteration   6: 90134011.670 ops/s
Iteration   7: 89699338.815 ops/s
Iteration   8: 90122038.686 ops/s
Iteration   9: 90037849.815 ops/s
Iteration  10: 90090721.293 ops/s
Iteration  11: 89947828.569 ops/s
Iteration  12: 89481380.217 ops/s
Iteration  13: 89674930.496 ops/s
Iteration  14: 89998568.009 ops/s
Iteration  15: 89979109.168 ops/s
Iteration  16: 89824264.545 ops/s
Iteration  17: 90043159.004 ops/s
Iteration  18: 90086250.602 ops/s
Iteration  19: 89892687.430 ops/s
Iteration  20: 89475657.513 ops/s
Iteration  21: 89888188.923 ops/s
Iteration  22: 89661272.389 ops/s
Iteration  23: 90204298.726 ops/s
Iteration  24: 89229494.816 ops/s
Iteration  25: 89790762.974 ops/s
Iteration  26: 89973804.352 ops/s
Iteration  27: 89917187.005 ops/s
Iteration  28: 89464787.240 ops/s
Iteration  29: 89983076.986 ops/s
Iteration  30: 90031246.961 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutable":
  89886915.676 ±(99.9%) 174169.448 ops/s [Average]
  (min, avg, max) = (89229494.816, 89886915.676, 90503214.533), stdev = 260688.650
  CI (99.9%): [89712746.228, 90061085.123] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutable  thrpt   30  89886915.676 ± 174169.448  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 649115.278 ops/s
# Warmup Iteration   2: 1291776.918 ops/s
# Warmup Iteration   3: 1429951.895 ops/s
# Warmup Iteration   4: 1437948.444 ops/s
# Warmup Iteration   5: 1181440.611 ops/s
# Warmup Iteration   6: 1437976.984 ops/s
# Warmup Iteration   7: 1440545.577 ops/s
# Warmup Iteration   8: 1438333.783 ops/s
# Warmup Iteration   9: 1437902.486 ops/s
# Warmup Iteration  10: 1441120.410 ops/s
# Warmup Iteration  11: 1434487.466 ops/s
# Warmup Iteration  12: 1437923.013 ops/s
# Warmup Iteration  13: 1439459.996 ops/s
# Warmup Iteration  14: 1437462.836 ops/s
# Warmup Iteration  15: 1437277.203 ops/s
# Warmup Iteration  16: 1437198.505 ops/s
# Warmup Iteration  17: 1438369.459 ops/s
# Warmup Iteration  18: 1436121.659 ops/s
# Warmup Iteration  19: 1437404.005 ops/s
# Warmup Iteration  20: 1438482.565 ops/s
# Warmup Iteration  21: 1437454.102 ops/s
# Warmup Iteration  22: 1440832.640 ops/s
# Warmup Iteration  23: 1435266.155 ops/s
# Warmup Iteration  24: 1442486.270 ops/s
# Warmup Iteration  25: 1438296.232 ops/s
# Warmup Iteration  26: 1438480.415 ops/s
# Warmup Iteration  27: 1437355.638 ops/s
# Warmup Iteration  28: 1439635.207 ops/s
# Warmup Iteration  29: 1440761.969 ops/s
# Warmup Iteration  30: 1438677.103 ops/s
Iteration   1: 1438351.182 ops/s
Iteration   2: 1440095.183 ops/s
Iteration   3: 1436670.019 ops/s
Iteration   4: 1439504.038 ops/s
Iteration   5: 1440840.905 ops/s
Iteration   6: 1437325.329 ops/s
Iteration   7: 1440014.907 ops/s
Iteration   8: 1443199.562 ops/s
Iteration   9: 1438710.646 ops/s
Iteration  10: 1435755.243 ops/s
Iteration  11: 1438820.968 ops/s
Iteration  12: 1422875.406 ops/s
Iteration  13: 1437251.128 ops/s
Iteration  14: 1441463.294 ops/s
Iteration  15: 1436285.594 ops/s
Iteration  16: 1437732.909 ops/s
Iteration  17: 1438161.613 ops/s
Iteration  18: 1439976.178 ops/s
Iteration  19: 1438176.410 ops/s
Iteration  20: 1438464.986 ops/s
Iteration  21: 1436950.071 ops/s
Iteration  22: 1438251.706 ops/s
Iteration  23: 1443039.254 ops/s
Iteration  24: 1439026.280 ops/s
Iteration  25: 1442039.242 ops/s
Iteration  26: 1440881.343 ops/s
Iteration  27: 1438427.860 ops/s
Iteration  28: 1443601.644 ops/s
Iteration  29: 1436098.668 ops/s
Iteration  30: 1437794.868 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBag":
  1438526.214 ±(99.9%) 2424.911 ops/s [Average]
  (min, avg, max) = (1422875.406, 1438526.214, 1443601.644), stdev = 3629.493
  CI (99.9%): [1436101.304, 1440951.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1438526.214 ± 2424.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 84042.834 ops/s
# Warmup Iteration   2: 116438.518 ops/s
# Warmup Iteration   3: 147022.188 ops/s
# Warmup Iteration   4: 146432.695 ops/s
# Warmup Iteration   5: 146895.014 ops/s
# Warmup Iteration   6: 147535.790 ops/s
# Warmup Iteration   7: 146852.228 ops/s
# Warmup Iteration   8: 125284.951 ops/s
# Warmup Iteration   9: 145084.108 ops/s
# Warmup Iteration  10: 147444.627 ops/s
# Warmup Iteration  11: 147041.930 ops/s
# Warmup Iteration  12: 146924.937 ops/s
# Warmup Iteration  13: 147475.794 ops/s
# Warmup Iteration  14: 147273.950 ops/s
# Warmup Iteration  15: 147457.591 ops/s
# Warmup Iteration  16: 147167.981 ops/s
# Warmup Iteration  17: 151169.888 ops/s
# Warmup Iteration  18: 151391.691 ops/s
# Warmup Iteration  19: 151578.819 ops/s
# Warmup Iteration  20: 151399.885 ops/s
# Warmup Iteration  21: 151264.175 ops/s
# Warmup Iteration  22: 150666.650 ops/s
# Warmup Iteration  23: 151388.151 ops/s
# Warmup Iteration  24: 151051.539 ops/s
# Warmup Iteration  25: 151133.607 ops/s
# Warmup Iteration  26: 151416.546 ops/s
# Warmup Iteration  27: 151122.218 ops/s
# Warmup Iteration  28: 151189.638 ops/s
# Warmup Iteration  29: 151093.694 ops/s
# Warmup Iteration  30: 150934.306 ops/s
Iteration   1: 151231.216 ops/s
Iteration   2: 150924.173 ops/s
Iteration   3: 151491.993 ops/s
Iteration   4: 151371.141 ops/s
Iteration   5: 150972.098 ops/s
Iteration   6: 151011.882 ops/s
Iteration   7: 151553.423 ops/s
Iteration   8: 151557.502 ops/s
Iteration   9: 151337.288 ops/s
Iteration  10: 151066.674 ops/s
Iteration  11: 151647.738 ops/s
Iteration  12: 151156.891 ops/s
Iteration  13: 150585.973 ops/s
Iteration  14: 150614.576 ops/s
Iteration  15: 149990.746 ops/s
Iteration  16: 151178.465 ops/s
Iteration  17: 151419.832 ops/s
Iteration  18: 150864.294 ops/s
Iteration  19: 151411.831 ops/s
Iteration  20: 151643.096 ops/s
Iteration  21: 151773.820 ops/s
Iteration  22: 150903.628 ops/s
Iteration  23: 151579.831 ops/s
Iteration  24: 150756.323 ops/s
Iteration  25: 151514.149 ops/s
Iteration  26: 151721.920 ops/s
Iteration  27: 151039.573 ops/s
Iteration  28: 151613.760 ops/s
Iteration  29: 151061.239 ops/s
Iteration  30: 152066.605 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBiMap":
  151235.389 ±(99.9%) 288.683 ops/s [Average]
  (min, avg, max) = (149990.746, 151235.389, 152066.605), stdev = 432.087
  CI (99.9%): [150946.706, 151524.072] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  151235.389 ± 288.683  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693619.468 ops/s
# Warmup Iteration   2: 1349611.026 ops/s
# Warmup Iteration   3: 1512011.679 ops/s
# Warmup Iteration   4: 1523806.616 ops/s
# Warmup Iteration   5: 1291795.980 ops/s
# Warmup Iteration   6: 1476892.734 ops/s
# Warmup Iteration   7: 1522337.030 ops/s
# Warmup Iteration   8: 1521933.083 ops/s
# Warmup Iteration   9: 1523269.396 ops/s
# Warmup Iteration  10: 1522764.031 ops/s
# Warmup Iteration  11: 1523378.293 ops/s
# Warmup Iteration  12: 1522265.014 ops/s
# Warmup Iteration  13: 1519848.538 ops/s
# Warmup Iteration  14: 1523905.430 ops/s
# Warmup Iteration  15: 1523606.852 ops/s
# Warmup Iteration  16: 1519080.387 ops/s
# Warmup Iteration  17: 1522333.640 ops/s
# Warmup Iteration  18: 1522338.307 ops/s
# Warmup Iteration  19: 1521360.864 ops/s
# Warmup Iteration  20: 1523766.125 ops/s
# Warmup Iteration  21: 1521833.453 ops/s
# Warmup Iteration  22: 1525827.506 ops/s
# Warmup Iteration  23: 1521521.370 ops/s
# Warmup Iteration  24: 1522810.095 ops/s
# Warmup Iteration  25: 1524730.040 ops/s
# Warmup Iteration  26: 1518977.592 ops/s
# Warmup Iteration  27: 1524166.311 ops/s
# Warmup Iteration  28: 1524327.205 ops/s
# Warmup Iteration  29: 1522226.119 ops/s
# Warmup Iteration  30: 1518709.896 ops/s
Iteration   1: 1521399.822 ops/s
Iteration   2: 1519879.811 ops/s
Iteration   3: 1517421.426 ops/s
Iteration   4: 1519403.064 ops/s
Iteration   5: 1515546.151 ops/s
Iteration   6: 1520726.331 ops/s
Iteration   7: 1520300.040 ops/s
Iteration   8: 1514101.715 ops/s
Iteration   9: 1524020.822 ops/s
Iteration  10: 1522510.064 ops/s
Iteration  11: 1524508.806 ops/s
Iteration  12: 1520467.955 ops/s
Iteration  13: 1518705.897 ops/s
Iteration  14: 1518875.571 ops/s
Iteration  15: 1523214.705 ops/s
Iteration  16: 1523279.221 ops/s
Iteration  17: 1521629.694 ops/s
Iteration  18: 1524425.131 ops/s
Iteration  19: 1525505.844 ops/s
Iteration  20: 1521884.650 ops/s
Iteration  21: 1527416.083 ops/s
Iteration  22: 1516878.861 ops/s
Iteration  23: 1519069.512 ops/s
Iteration  24: 1523165.082 ops/s
Iteration  25: 1521403.348 ops/s
Iteration  26: 1524513.201 ops/s
Iteration  27: 1525034.611 ops/s
Iteration  28: 1519746.196 ops/s
Iteration  29: 1523381.856 ops/s
Iteration  30: 1518672.507 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableList":
  1521236.266 ±(99.9%) 2068.926 ops/s [Average]
  (min, avg, max) = (1514101.715, 1521236.266, 1527416.083), stdev = 3096.671
  CI (99.9%): [1519167.340, 1523305.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1521236.266 ± 2068.926  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 586490.839 ops/s
# Warmup Iteration   2: 1340880.479 ops/s
# Warmup Iteration   3: 1399442.180 ops/s
# Warmup Iteration   4: 1196464.903 ops/s
# Warmup Iteration   5: 1348065.090 ops/s
# Warmup Iteration   6: 1394788.571 ops/s
# Warmup Iteration   7: 1393793.308 ops/s
# Warmup Iteration   8: 1397084.843 ops/s
# Warmup Iteration   9: 1387396.195 ops/s
# Warmup Iteration  10: 1392212.760 ops/s
# Warmup Iteration  11: 1395976.965 ops/s
# Warmup Iteration  12: 1383557.917 ops/s
# Warmup Iteration  13: 1395247.720 ops/s
# Warmup Iteration  14: 1393785.912 ops/s
# Warmup Iteration  15: 1398847.234 ops/s
# Warmup Iteration  16: 1400464.137 ops/s
# Warmup Iteration  17: 1395550.918 ops/s
# Warmup Iteration  18: 1390431.947 ops/s
# Warmup Iteration  19: 1395059.853 ops/s
# Warmup Iteration  20: 1392579.486 ops/s
# Warmup Iteration  21: 1393785.723 ops/s
# Warmup Iteration  22: 1387447.602 ops/s
# Warmup Iteration  23: 1395282.922 ops/s
# Warmup Iteration  24: 1395790.025 ops/s
# Warmup Iteration  25: 1403575.809 ops/s
# Warmup Iteration  26: 1399718.401 ops/s
# Warmup Iteration  27: 1390523.982 ops/s
# Warmup Iteration  28: 1403962.124 ops/s
# Warmup Iteration  29: 1392679.758 ops/s
# Warmup Iteration  30: 1405071.698 ops/s
Iteration   1: 1404597.792 ops/s
Iteration   2: 1400960.818 ops/s
Iteration   3: 1396620.798 ops/s
Iteration   4: 1398018.719 ops/s
Iteration   5: 1392501.588 ops/s
Iteration   6: 1399514.755 ops/s
Iteration   7: 1405722.713 ops/s
Iteration   8: 1404743.381 ops/s
Iteration   9: 1396124.326 ops/s
Iteration  10: 1392395.611 ops/s
Iteration  11: 1394701.082 ops/s
Iteration  12: 1392984.663 ops/s
Iteration  13: 1395242.008 ops/s
Iteration  14: 1399813.593 ops/s
Iteration  15: 1412222.255 ops/s
Iteration  16: 1399570.289 ops/s
Iteration  17: 1396794.382 ops/s
Iteration  18: 1396027.543 ops/s
Iteration  19: 1398524.648 ops/s
Iteration  20: 1388578.170 ops/s
Iteration  21: 1390288.739 ops/s
Iteration  22: 1384589.107 ops/s
Iteration  23: 1395222.152 ops/s
Iteration  24: 1396459.033 ops/s
Iteration  25: 1400784.945 ops/s
Iteration  26: 1408442.656 ops/s
Iteration  27: 1414802.066 ops/s
Iteration  28: 1389901.990 ops/s
Iteration  29: 1405064.819 ops/s
Iteration  30: 1398247.998 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableMap":
  1398315.421 ±(99.9%) 4531.219 ops/s [Average]
  (min, avg, max) = (1384589.107, 1398315.421, 1414802.066), stdev = 6782.115
  CI (99.9%): [1393784.202, 1402846.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1398315.421 ± 4531.219  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 640514.992 ops/s
# Warmup Iteration   2: 1121960.405 ops/s
# Warmup Iteration   3: 1294503.164 ops/s
# Warmup Iteration   4: 1300220.872 ops/s
# Warmup Iteration   5: 1301180.397 ops/s
# Warmup Iteration   6: 1069304.646 ops/s
# Warmup Iteration   7: 1306865.356 ops/s
# Warmup Iteration   8: 1302314.767 ops/s
# Warmup Iteration   9: 1304487.068 ops/s
# Warmup Iteration  10: 1303882.167 ops/s
# Warmup Iteration  11: 1303417.023 ops/s
# Warmup Iteration  12: 1303445.615 ops/s
# Warmup Iteration  13: 1306274.288 ops/s
# Warmup Iteration  14: 1303067.011 ops/s
# Warmup Iteration  15: 1304888.844 ops/s
# Warmup Iteration  16: 1304851.449 ops/s
# Warmup Iteration  17: 1300606.924 ops/s
# Warmup Iteration  18: 1304095.899 ops/s
# Warmup Iteration  19: 1302562.518 ops/s
# Warmup Iteration  20: 1303863.929 ops/s
# Warmup Iteration  21: 1304756.665 ops/s
# Warmup Iteration  22: 1305545.291 ops/s
# Warmup Iteration  23: 1306598.469 ops/s
# Warmup Iteration  24: 1301843.526 ops/s
# Warmup Iteration  25: 1301689.501 ops/s
# Warmup Iteration  26: 1307295.602 ops/s
# Warmup Iteration  27: 1306161.651 ops/s
# Warmup Iteration  28: 1305497.832 ops/s
# Warmup Iteration  29: 1302334.753 ops/s
# Warmup Iteration  30: 1302673.147 ops/s
Iteration   1: 1311189.095 ops/s
Iteration   2: 1299887.205 ops/s
Iteration   3: 1306648.777 ops/s
Iteration   4: 1301860.441 ops/s
Iteration   5: 1303319.956 ops/s
Iteration   6: 1302000.326 ops/s
Iteration   7: 1308431.820 ops/s
Iteration   8: 1303787.545 ops/s
Iteration   9: 1299798.703 ops/s
Iteration  10: 1307545.032 ops/s
Iteration  11: 1303686.542 ops/s
Iteration  12: 1307676.618 ops/s
Iteration  13: 1299962.186 ops/s
Iteration  14: 1302886.915 ops/s
Iteration  15: 1305875.317 ops/s
Iteration  16: 1304828.185 ops/s
Iteration  17: 1298994.901 ops/s
Iteration  18: 1303790.054 ops/s
Iteration  19: 1305667.708 ops/s
Iteration  20: 1302673.906 ops/s
Iteration  21: 1305205.054 ops/s
Iteration  22: 1301071.821 ops/s
Iteration  23: 1303142.905 ops/s
Iteration  24: 1306565.112 ops/s
Iteration  25: 1305095.656 ops/s
Iteration  26: 1301741.095 ops/s
Iteration  27: 1303660.334 ops/s
Iteration  28: 1308360.007 ops/s
Iteration  29: 1304095.537 ops/s
Iteration  30: 1306035.220 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSet":
  1304182.799 ±(99.9%) 1943.799 ops/s [Average]
  (min, avg, max) = (1298994.901, 1304182.799, 1311189.095), stdev = 2909.386
  CI (99.9%): [1302239.001, 1306126.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1304182.799 ± 1943.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539557.488 ops/s
# Warmup Iteration   2: 1065452.729 ops/s
# Warmup Iteration   3: 1190924.516 ops/s
# Warmup Iteration   4: 1202524.942 ops/s
# Warmup Iteration   5: 1007724.336 ops/s
# Warmup Iteration   6: 1179401.186 ops/s
# Warmup Iteration   7: 1201142.468 ops/s
# Warmup Iteration   8: 1200309.987 ops/s
# Warmup Iteration   9: 1198294.091 ops/s
# Warmup Iteration  10: 1199118.961 ops/s
# Warmup Iteration  11: 1200297.483 ops/s
# Warmup Iteration  12: 1199461.928 ops/s
# Warmup Iteration  13: 1200996.748 ops/s
# Warmup Iteration  14: 1200498.789 ops/s
# Warmup Iteration  15: 1198104.648 ops/s
# Warmup Iteration  16: 1199317.126 ops/s
# Warmup Iteration  17: 1198448.425 ops/s
# Warmup Iteration  18: 1196504.073 ops/s
# Warmup Iteration  19: 1196571.348 ops/s
# Warmup Iteration  20: 1194677.544 ops/s
# Warmup Iteration  21: 1195379.991 ops/s
# Warmup Iteration  22: 1195219.460 ops/s
# Warmup Iteration  23: 1198130.105 ops/s
# Warmup Iteration  24: 1198279.442 ops/s
# Warmup Iteration  25: 1197136.239 ops/s
# Warmup Iteration  26: 1194637.220 ops/s
# Warmup Iteration  27: 1198122.267 ops/s
# Warmup Iteration  28: 1197195.030 ops/s
# Warmup Iteration  29: 1196416.412 ops/s
# Warmup Iteration  30: 1196519.264 ops/s
Iteration   1: 1194654.020 ops/s
Iteration   2: 1200364.930 ops/s
Iteration   3: 1195735.345 ops/s
Iteration   4: 1201135.847 ops/s
Iteration   5: 1195890.453 ops/s
Iteration   6: 1195840.920 ops/s
Iteration   7: 1195808.600 ops/s
Iteration   8: 1200307.470 ops/s
Iteration   9: 1194195.927 ops/s
Iteration  10: 1200142.186 ops/s
Iteration  11: 1198281.023 ops/s
Iteration  12: 1200554.922 ops/s
Iteration  13: 1198923.113 ops/s
Iteration  14: 1197706.131 ops/s
Iteration  15: 1192517.760 ops/s
Iteration  16: 1197755.508 ops/s
Iteration  17: 1195432.561 ops/s
Iteration  18: 1191743.729 ops/s
Iteration  19: 1193554.101 ops/s
Iteration  20: 1191161.884 ops/s
Iteration  21: 1194454.545 ops/s
Iteration  22: 1195422.203 ops/s
Iteration  23: 1195404.662 ops/s
Iteration  24: 1197005.364 ops/s
Iteration  25: 1191353.913 ops/s
Iteration  26: 1198442.954 ops/s
Iteration  27: 1196406.747 ops/s
Iteration  28: 1194032.095 ops/s
Iteration  29: 1194634.721 ops/s
Iteration  30: 1195983.806 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1196161.581 ±(99.9%) 1854.991 ops/s [Average]
  (min, avg, max) = (1191161.884, 1196161.581, 1201135.847), stdev = 2776.464
  CI (99.9%): [1194306.590, 1198016.573] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1196161.581 ± 1854.991  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295683.350 ops/s
# Warmup Iteration   2: 649720.372 ops/s
# Warmup Iteration   3: 717143.926 ops/s
# Warmup Iteration   4: 718800.297 ops/s
# Warmup Iteration   5: 600604.520 ops/s
# Warmup Iteration   6: 718814.819 ops/s
# Warmup Iteration   7: 721707.123 ops/s
# Warmup Iteration   8: 722607.012 ops/s
# Warmup Iteration   9: 721205.089 ops/s
# Warmup Iteration  10: 722868.315 ops/s
# Warmup Iteration  11: 721936.764 ops/s
# Warmup Iteration  12: 723057.476 ops/s
# Warmup Iteration  13: 721827.019 ops/s
# Warmup Iteration  14: 723470.929 ops/s
# Warmup Iteration  15: 721521.432 ops/s
# Warmup Iteration  16: 722967.403 ops/s
# Warmup Iteration  17: 723153.213 ops/s
# Warmup Iteration  18: 720985.894 ops/s
# Warmup Iteration  19: 722340.313 ops/s
# Warmup Iteration  20: 721766.858 ops/s
# Warmup Iteration  21: 723339.932 ops/s
# Warmup Iteration  22: 722355.048 ops/s
# Warmup Iteration  23: 721107.671 ops/s
# Warmup Iteration  24: 721400.588 ops/s
# Warmup Iteration  25: 721432.709 ops/s
# Warmup Iteration  26: 722359.316 ops/s
# Warmup Iteration  27: 721853.275 ops/s
# Warmup Iteration  28: 724121.438 ops/s
# Warmup Iteration  29: 723101.690 ops/s
# Warmup Iteration  30: 722801.061 ops/s
Iteration   1: 721631.903 ops/s
Iteration   2: 722099.286 ops/s
Iteration   3: 721861.392 ops/s
Iteration   4: 722585.194 ops/s
Iteration   5: 720033.512 ops/s
Iteration   6: 720966.061 ops/s
Iteration   7: 723200.680 ops/s
Iteration   8: 723862.069 ops/s
Iteration   9: 720797.482 ops/s
Iteration  10: 722238.350 ops/s
Iteration  11: 720378.213 ops/s
Iteration  12: 721702.385 ops/s
Iteration  13: 723600.714 ops/s
Iteration  14: 722849.027 ops/s
Iteration  15: 720602.027 ops/s
Iteration  16: 723050.609 ops/s
Iteration  17: 723147.302 ops/s
Iteration  18: 724367.928 ops/s
Iteration  19: 721091.980 ops/s
Iteration  20: 721888.892 ops/s
Iteration  21: 724416.878 ops/s
Iteration  22: 725319.084 ops/s
Iteration  23: 721617.094 ops/s
Iteration  24: 725409.121 ops/s
Iteration  25: 721421.784 ops/s
Iteration  26: 722892.778 ops/s
Iteration  27: 720983.145 ops/s
Iteration  28: 720031.997 ops/s
Iteration  29: 723370.451 ops/s
Iteration  30: 721241.195 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  722288.618 ±(99.9%) 987.040 ops/s [Average]
  (min, avg, max) = (720031.997, 722288.618, 725409.121), stdev = 1477.356
  CI (99.9%): [721301.577, 723275.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  722288.618 ± 987.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 291827.880 ops/s
# Warmup Iteration   2: 470511.129 ops/s
# Warmup Iteration   3: 580895.926 ops/s
# Warmup Iteration   4: 577064.410 ops/s
# Warmup Iteration   5: 581441.473 ops/s
# Warmup Iteration   6: 581646.739 ops/s
# Warmup Iteration   7: 483929.911 ops/s
# Warmup Iteration   8: 581002.817 ops/s
# Warmup Iteration   9: 580426.513 ops/s
# Warmup Iteration  10: 580251.768 ops/s
# Warmup Iteration  11: 582883.576 ops/s
# Warmup Iteration  12: 580959.448 ops/s
# Warmup Iteration  13: 580122.680 ops/s
# Warmup Iteration  14: 580465.368 ops/s
# Warmup Iteration  15: 581100.734 ops/s
# Warmup Iteration  16: 581363.108 ops/s
# Warmup Iteration  17: 581793.079 ops/s
# Warmup Iteration  18: 579312.921 ops/s
# Warmup Iteration  19: 580208.569 ops/s
# Warmup Iteration  20: 582163.513 ops/s
# Warmup Iteration  21: 580122.079 ops/s
# Warmup Iteration  22: 580803.703 ops/s
# Warmup Iteration  23: 581898.993 ops/s
# Warmup Iteration  24: 581273.872 ops/s
# Warmup Iteration  25: 581542.109 ops/s
# Warmup Iteration  26: 581230.901 ops/s
# Warmup Iteration  27: 581026.672 ops/s
# Warmup Iteration  28: 580255.595 ops/s
# Warmup Iteration  29: 580495.205 ops/s
# Warmup Iteration  30: 580844.711 ops/s
Iteration   1: 581400.506 ops/s
Iteration   2: 579395.340 ops/s
Iteration   3: 581513.211 ops/s
Iteration   4: 580575.908 ops/s
Iteration   5: 581380.876 ops/s
Iteration   6: 583286.644 ops/s
Iteration   7: 581175.769 ops/s
Iteration   8: 579649.318 ops/s
Iteration   9: 582576.577 ops/s
Iteration  10: 580122.913 ops/s
Iteration  11: 579679.491 ops/s
Iteration  12: 582021.649 ops/s
Iteration  13: 582138.171 ops/s
Iteration  14: 580739.184 ops/s
Iteration  15: 581839.061 ops/s
Iteration  16: 581861.235 ops/s
Iteration  17: 582611.989 ops/s
Iteration  18: 579394.904 ops/s
Iteration  19: 579311.614 ops/s
Iteration  20: 581665.213 ops/s
Iteration  21: 581334.328 ops/s
Iteration  22: 582483.053 ops/s
Iteration  23: 583365.453 ops/s
Iteration  24: 581833.279 ops/s
Iteration  25: 581314.546 ops/s
Iteration  26: 580054.598 ops/s
Iteration  27: 581111.531 ops/s
Iteration  28: 580538.799 ops/s
Iteration  29: 581227.852 ops/s
Iteration  30: 579046.923 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  581154.998 ±(99.9%) 791.414 ops/s [Average]
  (min, avg, max) = (579046.923, 581154.998, 583365.453), stdev = 1184.552
  CI (99.9%): [580363.583, 581946.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  581154.998 ± 791.414  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 451977.360 ops/s
# Warmup Iteration   2: 876233.529 ops/s
# Warmup Iteration   3: 1043726.467 ops/s
# Warmup Iteration   4: 1047203.587 ops/s
# Warmup Iteration   5: 1048388.375 ops/s
# Warmup Iteration   6: 871435.713 ops/s
# Warmup Iteration   7: 1051379.045 ops/s
# Warmup Iteration   8: 1052547.806 ops/s
# Warmup Iteration   9: 1051996.732 ops/s
# Warmup Iteration  10: 1050983.036 ops/s
# Warmup Iteration  11: 1051344.097 ops/s
# Warmup Iteration  12: 1050710.716 ops/s
# Warmup Iteration  13: 1052781.230 ops/s
# Warmup Iteration  14: 1051177.272 ops/s
# Warmup Iteration  15: 1052803.471 ops/s
# Warmup Iteration  16: 1049759.359 ops/s
# Warmup Iteration  17: 1054051.103 ops/s
# Warmup Iteration  18: 1053207.013 ops/s
# Warmup Iteration  19: 1051457.320 ops/s
# Warmup Iteration  20: 1054139.564 ops/s
# Warmup Iteration  21: 1054628.923 ops/s
# Warmup Iteration  22: 1053167.838 ops/s
# Warmup Iteration  23: 1053975.860 ops/s
# Warmup Iteration  24: 1055575.739 ops/s
# Warmup Iteration  25: 1052257.786 ops/s
# Warmup Iteration  26: 1053625.835 ops/s
# Warmup Iteration  27: 1055003.933 ops/s
# Warmup Iteration  28: 1052190.147 ops/s
# Warmup Iteration  29: 1051975.876 ops/s
# Warmup Iteration  30: 1054880.428 ops/s
Iteration   1: 1058943.251 ops/s
Iteration   2: 1054227.702 ops/s
Iteration   3: 1052125.786 ops/s
Iteration   4: 1054377.281 ops/s
Iteration   5: 1053153.311 ops/s
Iteration   6: 1054898.721 ops/s
Iteration   7: 1054846.495 ops/s
Iteration   8: 1053238.612 ops/s
Iteration   9: 1056051.273 ops/s
Iteration  10: 1052131.835 ops/s
Iteration  11: 1053202.522 ops/s
Iteration  12: 1050230.306 ops/s
Iteration  13: 1055626.316 ops/s
Iteration  14: 1052339.442 ops/s
Iteration  15: 1053230.508 ops/s
Iteration  16: 1053222.103 ops/s
Iteration  17: 1053393.583 ops/s
Iteration  18: 1052634.252 ops/s
Iteration  19: 1054102.406 ops/s
Iteration  20: 1054933.086 ops/s
Iteration  21: 1053645.138 ops/s
Iteration  22: 1054671.715 ops/s
Iteration  23: 1053972.363 ops/s
Iteration  24: 1049889.443 ops/s
Iteration  25: 1051923.703 ops/s
Iteration  26: 1052617.028 ops/s
Iteration  27: 1049741.743 ops/s
Iteration  28: 1054407.713 ops/s
Iteration  29: 1049728.940 ops/s
Iteration  30: 1052014.806 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1053317.379 ±(99.9%) 1321.297 ops/s [Average]
  (min, avg, max) = (1049728.940, 1053317.379, 1058943.251), stdev = 1977.655
  CI (99.9%): [1051996.082, 1054638.676] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1053317.379 ± 1321.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1291050.880 ops/s
# Warmup Iteration   2: 2911631.012 ops/s
# Warmup Iteration   3: 3044637.282 ops/s
# Warmup Iteration   4: 2875729.111 ops/s
# Warmup Iteration   5: 2715005.587 ops/s
# Warmup Iteration   6: 3064463.695 ops/s
# Warmup Iteration   7: 3063127.498 ops/s
# Warmup Iteration   8: 3060790.081 ops/s
# Warmup Iteration   9: 3064694.232 ops/s
# Warmup Iteration  10: 3066423.628 ops/s
# Warmup Iteration  11: 3062168.542 ops/s
# Warmup Iteration  12: 3068397.929 ops/s
# Warmup Iteration  13: 3060067.635 ops/s
# Warmup Iteration  14: 3058795.000 ops/s
# Warmup Iteration  15: 3069549.441 ops/s
# Warmup Iteration  16: 3068908.449 ops/s
# Warmup Iteration  17: 3053076.867 ops/s
# Warmup Iteration  18: 3057058.690 ops/s
# Warmup Iteration  19: 3056779.367 ops/s
# Warmup Iteration  20: 3061992.713 ops/s
# Warmup Iteration  21: 3057563.601 ops/s
# Warmup Iteration  22: 3066846.403 ops/s
# Warmup Iteration  23: 3065712.378 ops/s
# Warmup Iteration  24: 3054426.255 ops/s
# Warmup Iteration  25: 3065266.938 ops/s
# Warmup Iteration  26: 3068169.905 ops/s
# Warmup Iteration  27: 3055975.078 ops/s
# Warmup Iteration  28: 3061240.389 ops/s
# Warmup Iteration  29: 3062178.426 ops/s
# Warmup Iteration  30: 3062686.097 ops/s
Iteration   1: 3065154.846 ops/s
Iteration   2: 3062441.025 ops/s
Iteration   3: 3068703.662 ops/s
Iteration   4: 3066115.606 ops/s
Iteration   5: 3066249.150 ops/s
Iteration   6: 3069412.748 ops/s
Iteration   7: 3064312.219 ops/s
Iteration   8: 3059436.209 ops/s
Iteration   9: 3062898.242 ops/s
Iteration  10: 3062471.177 ops/s
Iteration  11: 3070829.496 ops/s
Iteration  12: 3070238.497 ops/s
Iteration  13: 3055113.699 ops/s
Iteration  14: 3065782.473 ops/s
Iteration  15: 3061877.027 ops/s
Iteration  16: 3075426.684 ops/s
Iteration  17: 3063278.530 ops/s
Iteration  18: 3066846.269 ops/s
Iteration  19: 3060598.720 ops/s
Iteration  20: 3052921.122 ops/s
Iteration  21: 3064984.987 ops/s
Iteration  22: 3064971.505 ops/s
Iteration  23: 3057240.836 ops/s
Iteration  24: 3056229.782 ops/s
Iteration  25: 3071410.492 ops/s
Iteration  26: 3062339.076 ops/s
Iteration  27: 3066342.883 ops/s
Iteration  28: 3064047.399 ops/s
Iteration  29: 3062747.985 ops/s
Iteration  30: 3047092.572 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  3063583.831 ±(99.9%) 3900.246 ops/s [Average]
  (min, avg, max) = (3047092.572, 3063583.831, 3075426.684), stdev = 5837.704
  CI (99.9%): [3059683.585, 3067484.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  3063583.831 ± 3900.246  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804988.090 ops/s
# Warmup Iteration   2: 1318063.639 ops/s
# Warmup Iteration   3: 1558840.547 ops/s
# Warmup Iteration   4: 1571388.806 ops/s
# Warmup Iteration   5: 1568295.546 ops/s
# Warmup Iteration   6: 1455527.742 ops/s
# Warmup Iteration   7: 1405437.918 ops/s
# Warmup Iteration   8: 1567572.805 ops/s
# Warmup Iteration   9: 1572004.512 ops/s
# Warmup Iteration  10: 1570440.753 ops/s
# Warmup Iteration  11: 1570500.925 ops/s
# Warmup Iteration  12: 1573280.939 ops/s
# Warmup Iteration  13: 1569643.644 ops/s
# Warmup Iteration  14: 1572847.585 ops/s
# Warmup Iteration  15: 1569833.768 ops/s
# Warmup Iteration  16: 1573091.980 ops/s
# Warmup Iteration  17: 1568258.081 ops/s
# Warmup Iteration  18: 1569090.117 ops/s
# Warmup Iteration  19: 1572161.658 ops/s
# Warmup Iteration  20: 1571676.653 ops/s
# Warmup Iteration  21: 1571268.208 ops/s
# Warmup Iteration  22: 1571999.686 ops/s
# Warmup Iteration  23: 1571054.684 ops/s
# Warmup Iteration  24: 1572836.720 ops/s
# Warmup Iteration  25: 1572461.616 ops/s
# Warmup Iteration  26: 1571825.223 ops/s
# Warmup Iteration  27: 1572856.907 ops/s
# Warmup Iteration  28: 1571863.265 ops/s
# Warmup Iteration  29: 1571057.357 ops/s
# Warmup Iteration  30: 1574891.063 ops/s
Iteration   1: 1569812.763 ops/s
Iteration   2: 1571328.058 ops/s
Iteration   3: 1568671.675 ops/s
Iteration   4: 1573460.748 ops/s
Iteration   5: 1569598.013 ops/s
Iteration   6: 1574493.812 ops/s
Iteration   7: 1570263.222 ops/s
Iteration   8: 1574515.705 ops/s
Iteration   9: 1570879.865 ops/s
Iteration  10: 1573327.868 ops/s
Iteration  11: 1572500.179 ops/s
Iteration  12: 1576694.820 ops/s
Iteration  13: 1571084.485 ops/s
Iteration  14: 1577108.629 ops/s
Iteration  15: 1572449.854 ops/s
Iteration  16: 1573135.587 ops/s
Iteration  17: 1573694.305 ops/s
Iteration  18: 1575079.963 ops/s
Iteration  19: 1570840.599 ops/s
Iteration  20: 1571934.837 ops/s
Iteration  21: 1572413.928 ops/s
Iteration  22: 1572240.323 ops/s
Iteration  23: 1571172.924 ops/s
Iteration  24: 1574042.405 ops/s
Iteration  25: 1573686.794 ops/s
Iteration  26: 1574450.789 ops/s
Iteration  27: 1572156.704 ops/s
Iteration  28: 1571349.675 ops/s
Iteration  29: 1571809.108 ops/s
Iteration  30: 1570444.223 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1572488.062 ±(99.9%) 1341.504 ops/s [Average]
  (min, avg, max) = (1568671.675, 1572488.062, 1577108.629), stdev = 2007.900
  CI (99.9%): [1571146.558, 1573829.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1572488.062 ± 1341.504  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1758011.720 ops/s
# Warmup Iteration   2: 3181650.682 ops/s
# Warmup Iteration   3: 3657009.834 ops/s
# Warmup Iteration   4: 3667550.623 ops/s
# Warmup Iteration   5: 3675948.228 ops/s
# Warmup Iteration   6: 2983895.709 ops/s
# Warmup Iteration   7: 3677603.909 ops/s
# Warmup Iteration   8: 3687038.951 ops/s
# Warmup Iteration   9: 3681986.490 ops/s
# Warmup Iteration  10: 3679764.180 ops/s
# Warmup Iteration  11: 3682909.232 ops/s
# Warmup Iteration  12: 3676820.799 ops/s
# Warmup Iteration  13: 3675893.330 ops/s
# Warmup Iteration  14: 3667750.882 ops/s
# Warmup Iteration  15: 3672849.148 ops/s
# Warmup Iteration  16: 3675570.095 ops/s
# Warmup Iteration  17: 3681767.667 ops/s
# Warmup Iteration  18: 3690124.451 ops/s
# Warmup Iteration  19: 3675758.333 ops/s
# Warmup Iteration  20: 3677818.275 ops/s
# Warmup Iteration  21: 3674854.831 ops/s
# Warmup Iteration  22: 3681709.123 ops/s
# Warmup Iteration  23: 3676744.339 ops/s
# Warmup Iteration  24: 3682395.142 ops/s
# Warmup Iteration  25: 3682461.325 ops/s
# Warmup Iteration  26: 3669152.720 ops/s
# Warmup Iteration  27: 3677152.589 ops/s
# Warmup Iteration  28: 3678998.355 ops/s
# Warmup Iteration  29: 3686154.970 ops/s
# Warmup Iteration  30: 3686788.592 ops/s
Iteration   1: 3679741.548 ops/s
Iteration   2: 3688547.848 ops/s
Iteration   3: 3693832.729 ops/s
Iteration   4: 3677665.458 ops/s
Iteration   5: 3690846.353 ops/s
Iteration   6: 3682614.495 ops/s
Iteration   7: 3664731.557 ops/s
Iteration   8: 3689873.457 ops/s
Iteration   9: 3682268.578 ops/s
Iteration  10: 3697894.964 ops/s
Iteration  11: 3673047.486 ops/s
Iteration  12: 3685128.046 ops/s
Iteration  13: 3680842.998 ops/s
Iteration  14: 3670851.545 ops/s
Iteration  15: 3678634.339 ops/s
Iteration  16: 3681148.484 ops/s
Iteration  17: 3693781.403 ops/s
Iteration  18: 3684070.328 ops/s
Iteration  19: 3682035.365 ops/s
Iteration  20: 3690483.470 ops/s
Iteration  21: 3680343.559 ops/s
Iteration  22: 3678464.751 ops/s
Iteration  23: 3695647.632 ops/s
Iteration  24: 3688190.729 ops/s
Iteration  25: 3676107.305 ops/s
Iteration  26: 3679683.267 ops/s
Iteration  27: 3689559.978 ops/s
Iteration  28: 3688626.305 ops/s
Iteration  29: 3678753.164 ops/s
Iteration  30: 3680488.852 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  3683463.533 ±(99.9%) 5070.832 ops/s [Average]
  (min, avg, max) = (3664731.557, 3683463.533, 3697894.964), stdev = 7589.783
  CI (99.9%): [3678392.701, 3688534.365] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  3683463.533 ± 5070.832  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544226.014 ops/s
# Warmup Iteration   2: 1311781.018 ops/s
# Warmup Iteration   3: 1374893.815 ops/s
# Warmup Iteration   4: 1144512.477 ops/s
# Warmup Iteration   5: 1372008.069 ops/s
# Warmup Iteration   6: 1368918.843 ops/s
# Warmup Iteration   7: 1370894.331 ops/s
# Warmup Iteration   8: 1370759.542 ops/s
# Warmup Iteration   9: 1367958.531 ops/s
# Warmup Iteration  10: 1369440.226 ops/s
# Warmup Iteration  11: 1366618.950 ops/s
# Warmup Iteration  12: 1369786.669 ops/s
# Warmup Iteration  13: 1367061.916 ops/s
# Warmup Iteration  14: 1369306.058 ops/s
# Warmup Iteration  15: 1373003.056 ops/s
# Warmup Iteration  16: 1369191.693 ops/s
# Warmup Iteration  17: 1367948.355 ops/s
# Warmup Iteration  18: 1371453.299 ops/s
# Warmup Iteration  19: 1370287.238 ops/s
# Warmup Iteration  20: 1370844.879 ops/s
# Warmup Iteration  21: 1364558.531 ops/s
# Warmup Iteration  22: 1366407.271 ops/s
# Warmup Iteration  23: 1365847.387 ops/s
# Warmup Iteration  24: 1364624.799 ops/s
# Warmup Iteration  25: 1366036.297 ops/s
# Warmup Iteration  26: 1366028.243 ops/s
# Warmup Iteration  27: 1361018.986 ops/s
# Warmup Iteration  28: 1367718.840 ops/s
# Warmup Iteration  29: 1364622.733 ops/s
# Warmup Iteration  30: 1362802.199 ops/s
Iteration   1: 1367102.625 ops/s
Iteration   2: 1363717.839 ops/s
Iteration   3: 1361562.141 ops/s
Iteration   4: 1367270.044 ops/s
Iteration   5: 1366003.959 ops/s
Iteration   6: 1363363.866 ops/s
Iteration   7: 1369245.704 ops/s
Iteration   8: 1368934.207 ops/s
Iteration   9: 1366774.034 ops/s
Iteration  10: 1365295.253 ops/s
Iteration  11: 1366858.328 ops/s
Iteration  12: 1371156.300 ops/s
Iteration  13: 1367214.767 ops/s
Iteration  14: 1369335.417 ops/s
Iteration  15: 1365249.506 ops/s
Iteration  16: 1364874.982 ops/s
Iteration  17: 1373017.046 ops/s
Iteration  18: 1369423.849 ops/s
Iteration  19: 1375527.446 ops/s
Iteration  20: 1369012.184 ops/s
Iteration  21: 1372477.900 ops/s
Iteration  22: 1365626.964 ops/s
Iteration  23: 1369237.368 ops/s
Iteration  24: 1361656.040 ops/s
Iteration  25: 1369507.333 ops/s
Iteration  26: 1371960.188 ops/s
Iteration  27: 1365818.673 ops/s
Iteration  28: 1368005.153 ops/s
Iteration  29: 1369400.139 ops/s
Iteration  30: 1370623.633 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1367841.763 ±(99.9%) 2191.396 ops/s [Average]
  (min, avg, max) = (1361562.141, 1367841.763, 1375527.446), stdev = 3279.979
  CI (99.9%): [1365650.367, 1370033.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1367841.763 ± 2191.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 622291.440 ops/s
# Warmup Iteration   2: 1158139.745 ops/s
# Warmup Iteration   3: 1322782.026 ops/s
# Warmup Iteration   4: 1328900.612 ops/s
# Warmup Iteration   5: 1332305.494 ops/s
# Warmup Iteration   6: 1101552.978 ops/s
# Warmup Iteration   7: 1331713.231 ops/s
# Warmup Iteration   8: 1327485.570 ops/s
# Warmup Iteration   9: 1327503.603 ops/s
# Warmup Iteration  10: 1333093.016 ops/s
# Warmup Iteration  11: 1329483.096 ops/s
# Warmup Iteration  12: 1330064.587 ops/s
# Warmup Iteration  13: 1329733.202 ops/s
# Warmup Iteration  14: 1328969.390 ops/s
# Warmup Iteration  15: 1327538.506 ops/s
# Warmup Iteration  16: 1328528.839 ops/s
# Warmup Iteration  17: 1325846.559 ops/s
# Warmup Iteration  18: 1323167.892 ops/s
# Warmup Iteration  19: 1324226.418 ops/s
# Warmup Iteration  20: 1327656.199 ops/s
# Warmup Iteration  21: 1324957.834 ops/s
# Warmup Iteration  22: 1324587.854 ops/s
# Warmup Iteration  23: 1327779.298 ops/s
# Warmup Iteration  24: 1325029.720 ops/s
# Warmup Iteration  25: 1325571.058 ops/s
# Warmup Iteration  26: 1327408.435 ops/s
# Warmup Iteration  27: 1329906.593 ops/s
# Warmup Iteration  28: 1324271.953 ops/s
# Warmup Iteration  29: 1322845.666 ops/s
# Warmup Iteration  30: 1323125.517 ops/s
Iteration   1: 1327991.357 ops/s
Iteration   2: 1325628.328 ops/s
Iteration   3: 1323092.861 ops/s
Iteration   4: 1331211.500 ops/s
Iteration   5: 1324027.038 ops/s
Iteration   6: 1327091.970 ops/s
Iteration   7: 1316784.664 ops/s
Iteration   8: 1329850.225 ops/s
Iteration   9: 1325669.494 ops/s
Iteration  10: 1327303.877 ops/s
Iteration  11: 1327385.274 ops/s
Iteration  12: 1323057.849 ops/s
Iteration  13: 1322982.786 ops/s
Iteration  14: 1329154.889 ops/s
Iteration  15: 1323348.061 ops/s
Iteration  16: 1325683.388 ops/s
Iteration  17: 1320364.608 ops/s
Iteration  18: 1328636.003 ops/s
Iteration  19: 1326499.997 ops/s
Iteration  20: 1324928.460 ops/s
Iteration  21: 1327400.260 ops/s
Iteration  22: 1322213.400 ops/s
Iteration  23: 1322071.304 ops/s
Iteration  24: 1327598.000 ops/s
Iteration  25: 1324857.866 ops/s
Iteration  26: 1326334.882 ops/s
Iteration  27: 1331747.064 ops/s
Iteration  28: 1325911.215 ops/s
Iteration  29: 1325956.415 ops/s
Iteration  30: 1328884.075 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1325788.904 ±(99.9%) 2145.109 ops/s [Average]
  (min, avg, max) = (1316784.664, 1325788.904, 1331747.064), stdev = 3210.698
  CI (99.9%): [1323643.795, 1327934.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1325788.904 ± 2145.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 941608.278 ops/s
# Warmup Iteration   2: 2507608.955 ops/s
# Warmup Iteration   3: 2562935.598 ops/s
# Warmup Iteration   4: 2108563.870 ops/s
# Warmup Iteration   5: 2557817.195 ops/s
# Warmup Iteration   6: 2557860.516 ops/s
# Warmup Iteration   7: 2561193.095 ops/s
# Warmup Iteration   8: 2559550.269 ops/s
# Warmup Iteration   9: 2562283.435 ops/s
# Warmup Iteration  10: 2555450.963 ops/s
# Warmup Iteration  11: 2560206.930 ops/s
# Warmup Iteration  12: 2559599.079 ops/s
# Warmup Iteration  13: 2565458.332 ops/s
# Warmup Iteration  14: 2561188.518 ops/s
# Warmup Iteration  15: 2555058.778 ops/s
# Warmup Iteration  16: 2556281.010 ops/s
# Warmup Iteration  17: 2561438.619 ops/s
# Warmup Iteration  18: 2555828.713 ops/s
# Warmup Iteration  19: 2559054.842 ops/s
# Warmup Iteration  20: 2557158.171 ops/s
# Warmup Iteration  21: 2551456.336 ops/s
# Warmup Iteration  22: 2561369.824 ops/s
# Warmup Iteration  23: 2564434.808 ops/s
# Warmup Iteration  24: 2558094.451 ops/s
# Warmup Iteration  25: 2560300.544 ops/s
# Warmup Iteration  26: 2554278.397 ops/s
# Warmup Iteration  27: 2560880.440 ops/s
# Warmup Iteration  28: 2564895.738 ops/s
# Warmup Iteration  29: 2556562.050 ops/s
# Warmup Iteration  30: 2558358.995 ops/s
Iteration   1: 2558529.115 ops/s
Iteration   2: 2559492.128 ops/s
Iteration   3: 2566659.458 ops/s
Iteration   4: 2562775.802 ops/s
Iteration   5: 2561392.469 ops/s
Iteration   6: 2557728.210 ops/s
Iteration   7: 2569091.532 ops/s
Iteration   8: 2563148.386 ops/s
Iteration   9: 2557471.622 ops/s
Iteration  10: 2562601.289 ops/s
Iteration  11: 2562630.696 ops/s
Iteration  12: 2557923.558 ops/s
Iteration  13: 2561623.085 ops/s
Iteration  14: 2560036.250 ops/s
Iteration  15: 2544068.557 ops/s
Iteration  16: 2558935.955 ops/s
Iteration  17: 2553658.417 ops/s
Iteration  18: 2555111.559 ops/s
Iteration  19: 2559543.023 ops/s
Iteration  20: 2553537.173 ops/s
Iteration  21: 2554164.850 ops/s
Iteration  22: 2556740.561 ops/s
Iteration  23: 2555865.616 ops/s
Iteration  24: 2559718.132 ops/s
Iteration  25: 2560905.836 ops/s
Iteration  26: 2557956.648 ops/s
Iteration  27: 2555796.554 ops/s
Iteration  28: 2538895.179 ops/s
Iteration  29: 2550270.166 ops/s
Iteration  30: 2546083.771 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toList":
  2557411.853 ±(99.9%) 4224.611 ops/s [Average]
  (min, avg, max) = (2538895.179, 2557411.853, 2569091.532), stdev = 6323.200
  CI (99.9%): [2553187.242, 2561636.464] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toList  thrpt   30  2557411.853 ± 4224.611  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 658773.763 ops/s
# Warmup Iteration   2: 1550815.103 ops/s
# Warmup Iteration   3: 1596861.728 ops/s
# Warmup Iteration   4: 1316951.955 ops/s
# Warmup Iteration   5: 1599467.377 ops/s
# Warmup Iteration   6: 1594988.082 ops/s
# Warmup Iteration   7: 1601841.220 ops/s
# Warmup Iteration   8: 1602995.384 ops/s
# Warmup Iteration   9: 1591479.740 ops/s
# Warmup Iteration  10: 1596841.465 ops/s
# Warmup Iteration  11: 1594644.913 ops/s
# Warmup Iteration  12: 1602629.896 ops/s
# Warmup Iteration  13: 1598270.505 ops/s
# Warmup Iteration  14: 1592901.286 ops/s
# Warmup Iteration  15: 1578926.314 ops/s
# Warmup Iteration  16: 1589511.015 ops/s
# Warmup Iteration  17: 1585696.327 ops/s
# Warmup Iteration  18: 1598025.541 ops/s
# Warmup Iteration  19: 1594688.841 ops/s
# Warmup Iteration  20: 1583914.636 ops/s
# Warmup Iteration  21: 1595165.952 ops/s
# Warmup Iteration  22: 1595059.663 ops/s
# Warmup Iteration  23: 1597044.959 ops/s
# Warmup Iteration  24: 1604793.439 ops/s
# Warmup Iteration  25: 1601782.336 ops/s
# Warmup Iteration  26: 1595034.996 ops/s
# Warmup Iteration  27: 1589312.535 ops/s
# Warmup Iteration  28: 1599735.572 ops/s
# Warmup Iteration  29: 1599634.755 ops/s
# Warmup Iteration  30: 1591509.192 ops/s
Iteration   1: 1610822.426 ops/s
Iteration   2: 1591917.477 ops/s
Iteration   3: 1589878.336 ops/s
Iteration   4: 1591678.266 ops/s
Iteration   5: 1592339.929 ops/s
Iteration   6: 1598491.927 ops/s
Iteration   7: 1605705.769 ops/s
Iteration   8: 1606390.844 ops/s
Iteration   9: 1579445.780 ops/s
Iteration  10: 1602912.021 ops/s
Iteration  11: 1597825.646 ops/s
Iteration  12: 1599879.327 ops/s
Iteration  13: 1588790.926 ops/s
Iteration  14: 1586397.345 ops/s
Iteration  15: 1597469.657 ops/s
Iteration  16: 1593390.069 ops/s
Iteration  17: 1600672.592 ops/s
Iteration  18: 1593597.179 ops/s
Iteration  19: 1603409.886 ops/s
Iteration  20: 1605776.549 ops/s
Iteration  21: 1596087.892 ops/s
Iteration  22: 1592373.432 ops/s
Iteration  23: 1587126.517 ops/s
Iteration  24: 1602183.017 ops/s
Iteration  25: 1593629.268 ops/s
Iteration  26: 1581092.792 ops/s
Iteration  27: 1592061.846 ops/s
Iteration  28: 1598581.490 ops/s
Iteration  29: 1590524.401 ops/s
Iteration  30: 1595939.345 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMap":
  1595546.398 ±(99.9%) 4946.632 ops/s [Average]
  (min, avg, max) = (1579445.780, 1595546.398, 1610822.426), stdev = 7403.886
  CI (99.9%): [1590599.767, 1600493.030] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toMap  thrpt   30  1595546.398 ± 4946.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6557126.454 ops/s
# Warmup Iteration   2: 15147742.433 ops/s
# Warmup Iteration   3: 15040476.119 ops/s
# Warmup Iteration   4: 12469203.794 ops/s
# Warmup Iteration   5: 15184086.325 ops/s
# Warmup Iteration   6: 15369058.205 ops/s
# Warmup Iteration   7: 15320969.692 ops/s
# Warmup Iteration   8: 15199176.073 ops/s
# Warmup Iteration   9: 15303530.878 ops/s
# Warmup Iteration  10: 15296095.808 ops/s
# Warmup Iteration  11: 15149556.284 ops/s
# Warmup Iteration  12: 15103210.204 ops/s
# Warmup Iteration  13: 15252892.390 ops/s
# Warmup Iteration  14: 15196101.412 ops/s
# Warmup Iteration  15: 15307947.066 ops/s
# Warmup Iteration  16: 15284808.088 ops/s
# Warmup Iteration  17: 15258648.219 ops/s
# Warmup Iteration  18: 15240270.899 ops/s
# Warmup Iteration  19: 15287624.287 ops/s
# Warmup Iteration  20: 15337130.099 ops/s
# Warmup Iteration  21: 15188369.032 ops/s
# Warmup Iteration  22: 15197370.992 ops/s
# Warmup Iteration  23: 15246048.405 ops/s
# Warmup Iteration  24: 15112292.302 ops/s
# Warmup Iteration  25: 15157445.902 ops/s
# Warmup Iteration  26: 15041255.944 ops/s
# Warmup Iteration  27: 15235538.470 ops/s
# Warmup Iteration  28: 15294214.970 ops/s
# Warmup Iteration  29: 15212543.536 ops/s
# Warmup Iteration  30: 15220098.407 ops/s
Iteration   1: 15157421.397 ops/s
Iteration   2: 15243084.295 ops/s
Iteration   3: 15264115.819 ops/s
Iteration   4: 15129921.628 ops/s
Iteration   5: 15193765.231 ops/s
Iteration   6: 15289539.053 ops/s
Iteration   7: 15070348.606 ops/s
Iteration   8: 14920437.520 ops/s
Iteration   9: 15175691.085 ops/s
Iteration  10: 15233032.640 ops/s
Iteration  11: 15195785.885 ops/s
Iteration  12: 15245957.471 ops/s
Iteration  13: 15411510.843 ops/s
Iteration  14: 14998044.127 ops/s
Iteration  15: 15235363.170 ops/s
Iteration  16: 14965992.246 ops/s
Iteration  17: 15380581.724 ops/s
Iteration  18: 15266756.201 ops/s
Iteration  19: 15540687.934 ops/s
Iteration  20: 15358316.030 ops/s
Iteration  21: 15107409.134 ops/s
Iteration  22: 15404703.452 ops/s
Iteration  23: 15303045.515 ops/s
Iteration  24: 15250409.317 ops/s
Iteration  25: 15381369.190 ops/s
Iteration  26: 15349627.389 ops/s
Iteration  27: 15486429.018 ops/s
Iteration  28: 15178077.627 ops/s
Iteration  29: 15383343.572 ops/s
Iteration  30: 15325811.784 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapOfItemToCount":
  15248219.297 ±(99.9%) 97719.725 ops/s [Average]
  (min, avg, max) = (14920437.520, 15248219.297, 15540687.934), stdev = 146262.295
  CI (99.9%): [15150499.572, 15345939.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  15248219.297 ± 97719.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685875.653 ops/s
# Warmup Iteration   2: 1680142.976 ops/s
# Warmup Iteration   3: 1703214.537 ops/s
# Warmup Iteration   4: 1414619.614 ops/s
# Warmup Iteration   5: 1703041.712 ops/s
# Warmup Iteration   6: 1716170.237 ops/s
# Warmup Iteration   7: 1718465.843 ops/s
# Warmup Iteration   8: 1726609.607 ops/s
# Warmup Iteration   9: 1714032.200 ops/s
# Warmup Iteration  10: 1716231.237 ops/s
# Warmup Iteration  11: 1709061.330 ops/s
# Warmup Iteration  12: 1714204.375 ops/s
# Warmup Iteration  13: 1712261.854 ops/s
# Warmup Iteration  14: 1716697.078 ops/s
# Warmup Iteration  15: 1701316.037 ops/s
# Warmup Iteration  16: 1711883.946 ops/s
# Warmup Iteration  17: 1716069.753 ops/s
# Warmup Iteration  18: 1720028.795 ops/s
# Warmup Iteration  19: 1710118.137 ops/s
# Warmup Iteration  20: 1711006.307 ops/s
# Warmup Iteration  21: 1700178.645 ops/s
# Warmup Iteration  22: 1726508.334 ops/s
# Warmup Iteration  23: 1708314.408 ops/s
# Warmup Iteration  24: 1718215.510 ops/s
# Warmup Iteration  25: 1715230.421 ops/s
# Warmup Iteration  26: 1726212.770 ops/s
# Warmup Iteration  27: 1704800.312 ops/s
# Warmup Iteration  28: 1718213.951 ops/s
# Warmup Iteration  29: 1707543.491 ops/s
# Warmup Iteration  30: 1713833.978 ops/s
Iteration   1: 1704978.951 ops/s
Iteration   2: 1713258.448 ops/s
Iteration   3: 1726864.122 ops/s
Iteration   4: 1712422.676 ops/s
Iteration   5: 1701266.151 ops/s
Iteration   6: 1725660.380 ops/s
Iteration   7: 1720279.659 ops/s
Iteration   8: 1715855.692 ops/s
Iteration   9: 1710941.939 ops/s
Iteration  10: 1717514.790 ops/s
Iteration  11: 1716768.021 ops/s
Iteration  12: 1718794.413 ops/s
Iteration  13: 1701361.648 ops/s
Iteration  14: 1716818.153 ops/s
Iteration  15: 1701963.893 ops/s
Iteration  16: 1729361.028 ops/s
Iteration  17: 1712465.917 ops/s
Iteration  18: 1703010.362 ops/s
Iteration  19: 1717448.614 ops/s
Iteration  20: 1717124.015 ops/s
Iteration  21: 1719130.171 ops/s
Iteration  22: 1729309.005 ops/s
Iteration  23: 1719852.251 ops/s
Iteration  24: 1703619.913 ops/s
Iteration  25: 1718448.026 ops/s
Iteration  26: 1710194.628 ops/s
Iteration  27: 1725578.549 ops/s
Iteration  28: 1717857.940 ops/s
Iteration  29: 1707150.835 ops/s
Iteration  30: 1723796.143 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toMapTarget":
  1715303.211 ±(99.9%) 5568.235 ops/s [Average]
  (min, avg, max) = (1701266.151, 1715303.211, 1729361.028), stdev = 8334.273
  CI (99.9%): [1709734.976, 1720871.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  1715303.211 ± 5568.235  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 939970.258 ops/s
# Warmup Iteration   2: 2181773.114 ops/s
# Warmup Iteration   3: 2358013.270 ops/s
# Warmup Iteration   4: 2376156.033 ops/s
# Warmup Iteration   5: 1953118.402 ops/s
# Warmup Iteration   6: 2383034.185 ops/s
# Warmup Iteration   7: 2374717.119 ops/s
# Warmup Iteration   8: 2377224.624 ops/s
# Warmup Iteration   9: 2374298.045 ops/s
# Warmup Iteration  10: 2375705.483 ops/s
# Warmup Iteration  11: 2387227.235 ops/s
# Warmup Iteration  12: 2388213.211 ops/s
# Warmup Iteration  13: 2368379.665 ops/s
# Warmup Iteration  14: 2376625.322 ops/s
# Warmup Iteration  15: 2373656.609 ops/s
# Warmup Iteration  16: 2375736.557 ops/s
# Warmup Iteration  17: 2379846.888 ops/s
# Warmup Iteration  18: 2378487.270 ops/s
# Warmup Iteration  19: 2382942.577 ops/s
# Warmup Iteration  20: 2382591.288 ops/s
# Warmup Iteration  21: 2380872.262 ops/s
# Warmup Iteration  22: 2381246.541 ops/s
# Warmup Iteration  23: 2379747.846 ops/s
# Warmup Iteration  24: 2377876.004 ops/s
# Warmup Iteration  25: 2381809.076 ops/s
# Warmup Iteration  26: 2377704.957 ops/s
# Warmup Iteration  27: 2376639.062 ops/s
# Warmup Iteration  28: 2386384.728 ops/s
# Warmup Iteration  29: 2381948.048 ops/s
# Warmup Iteration  30: 2371984.271 ops/s
Iteration   1: 2389165.143 ops/s
Iteration   2: 2374155.949 ops/s
Iteration   3: 2377938.030 ops/s
Iteration   4: 2383959.897 ops/s
Iteration   5: 2390486.529 ops/s
Iteration   6: 2370615.842 ops/s
Iteration   7: 2385255.857 ops/s
Iteration   8: 2383940.870 ops/s
Iteration   9: 2366778.284 ops/s
Iteration  10: 2381911.710 ops/s
Iteration  11: 2373697.141 ops/s
Iteration  12: 2384593.237 ops/s
Iteration  13: 2382164.461 ops/s
Iteration  14: 2391814.716 ops/s
Iteration  15: 2382977.089 ops/s
Iteration  16: 2383745.322 ops/s
Iteration  17: 2383342.081 ops/s
Iteration  18: 2380127.124 ops/s
Iteration  19: 2386376.304 ops/s
Iteration  20: 2380068.822 ops/s
Iteration  21: 2384442.264 ops/s
Iteration  22: 2375321.094 ops/s
Iteration  23: 2387351.252 ops/s
Iteration  24: 2376992.931 ops/s
Iteration  25: 2383150.225 ops/s
Iteration  26: 2380832.905 ops/s
Iteration  27: 2377166.163 ops/s
Iteration  28: 2380872.449 ops/s
Iteration  29: 2386344.501 ops/s
Iteration  30: 2374394.434 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSet":
  2381332.754 ±(99.9%) 3884.020 ops/s [Average]
  (min, avg, max) = (2366778.284, 2381332.754, 2391814.716), stdev = 5813.418
  CI (99.9%): [2377448.735, 2385216.774] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSet  thrpt   30  2381332.754 ± 3884.020  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 529391.294 ops/s
# Warmup Iteration   2: 1120501.675 ops/s
# Warmup Iteration   3: 1195613.144 ops/s
# Warmup Iteration   4: 1185418.847 ops/s
# Warmup Iteration   5: 1024784.428 ops/s
# Warmup Iteration   6: 1204843.365 ops/s
# Warmup Iteration   7: 1202801.047 ops/s
# Warmup Iteration   8: 1204794.252 ops/s
# Warmup Iteration   9: 1204488.532 ops/s
# Warmup Iteration  10: 1200230.403 ops/s
# Warmup Iteration  11: 1205695.680 ops/s
# Warmup Iteration  12: 1202426.505 ops/s
# Warmup Iteration  13: 1205145.641 ops/s
# Warmup Iteration  14: 1198071.191 ops/s
# Warmup Iteration  15: 1204487.969 ops/s
# Warmup Iteration  16: 1205236.735 ops/s
# Warmup Iteration  17: 1204484.932 ops/s
# Warmup Iteration  18: 1203839.341 ops/s
# Warmup Iteration  19: 1205960.799 ops/s
# Warmup Iteration  20: 1206485.042 ops/s
# Warmup Iteration  21: 1203766.821 ops/s
# Warmup Iteration  22: 1203211.852 ops/s
# Warmup Iteration  23: 1203846.844 ops/s
# Warmup Iteration  24: 1202697.265 ops/s
# Warmup Iteration  25: 1207948.404 ops/s
# Warmup Iteration  26: 1205611.713 ops/s
# Warmup Iteration  27: 1207884.515 ops/s
# Warmup Iteration  28: 1206581.945 ops/s
# Warmup Iteration  29: 1204766.201 ops/s
# Warmup Iteration  30: 1202324.910 ops/s
Iteration   1: 1202322.667 ops/s
Iteration   2: 1207098.160 ops/s
Iteration   3: 1206246.370 ops/s
Iteration   4: 1201156.209 ops/s
Iteration   5: 1203293.632 ops/s
Iteration   6: 1207205.057 ops/s
Iteration   7: 1209135.582 ops/s
Iteration   8: 1209379.115 ops/s
Iteration   9: 1203711.632 ops/s
Iteration  10: 1206723.800 ops/s
Iteration  11: 1204190.853 ops/s
Iteration  12: 1209113.175 ops/s
Iteration  13: 1202958.319 ops/s
Iteration  14: 1204430.702 ops/s
Iteration  15: 1202459.857 ops/s
Iteration  16: 1203344.841 ops/s
Iteration  17: 1203953.950 ops/s
Iteration  18: 1205252.482 ops/s
Iteration  19: 1192757.766 ops/s
Iteration  20: 1199338.698 ops/s
Iteration  21: 1206317.582 ops/s
Iteration  22: 1203191.734 ops/s
Iteration  23: 1198628.644 ops/s
Iteration  24: 1199365.314 ops/s
Iteration  25: 1197749.433 ops/s
Iteration  26: 1205165.338 ops/s
Iteration  27: 1200060.490 ops/s
Iteration  28: 1200144.294 ops/s
Iteration  29: 1201962.623 ops/s
Iteration  30: 1200793.123 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag":
  1203248.381 ±(99.9%) 2492.834 ops/s [Average]
  (min, avg, max) = (1192757.766, 1203248.381, 1209379.115), stdev = 3731.157
  CI (99.9%): [1200755.547, 1205741.215] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag  thrpt   30  1203248.381 ± 2492.834  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 768812.137 ops/s
# Warmup Iteration   2: 1376883.338 ops/s
# Warmup Iteration   3: 1593936.713 ops/s
# Warmup Iteration   4: 1597849.396 ops/s
# Warmup Iteration   5: 1598822.212 ops/s
# Warmup Iteration   6: 1335214.647 ops/s
# Warmup Iteration   7: 1605237.096 ops/s
# Warmup Iteration   8: 1602083.853 ops/s
# Warmup Iteration   9: 1603498.238 ops/s
# Warmup Iteration  10: 1604029.352 ops/s
# Warmup Iteration  11: 1599686.015 ops/s
# Warmup Iteration  12: 1599170.897 ops/s
# Warmup Iteration  13: 1598462.424 ops/s
# Warmup Iteration  14: 1599098.870 ops/s
# Warmup Iteration  15: 1601843.870 ops/s
# Warmup Iteration  16: 1602794.796 ops/s
# Warmup Iteration  17: 1595020.130 ops/s
# Warmup Iteration  18: 1596275.479 ops/s
# Warmup Iteration  19: 1598342.018 ops/s
# Warmup Iteration  20: 1594268.504 ops/s
# Warmup Iteration  21: 1595497.156 ops/s
# Warmup Iteration  22: 1597819.273 ops/s
# Warmup Iteration  23: 1594721.427 ops/s
# Warmup Iteration  24: 1589397.618 ops/s
# Warmup Iteration  25: 1593187.918 ops/s
# Warmup Iteration  26: 1598133.199 ops/s
# Warmup Iteration  27: 1598568.690 ops/s
# Warmup Iteration  28: 1597922.995 ops/s
# Warmup Iteration  29: 1597265.549 ops/s
# Warmup Iteration  30: 1593178.969 ops/s
Iteration   1: 1596141.637 ops/s
Iteration   2: 1594526.946 ops/s
Iteration   3: 1596161.618 ops/s
Iteration   4: 1599254.941 ops/s
Iteration   5: 1598067.441 ops/s
Iteration   6: 1602341.141 ops/s
Iteration   7: 1592991.390 ops/s
Iteration   8: 1600452.881 ops/s
Iteration   9: 1594243.193 ops/s
Iteration  10: 1605157.258 ops/s
Iteration  11: 1591300.613 ops/s
Iteration  12: 1596194.554 ops/s
Iteration  13: 1598605.198 ops/s
Iteration  14: 1596758.483 ops/s
Iteration  15: 1593906.899 ops/s
Iteration  16: 1591597.881 ops/s
Iteration  17: 1603691.825 ops/s
Iteration  18: 1589297.593 ops/s
Iteration  19: 1601326.113 ops/s
Iteration  20: 1586711.363 ops/s
Iteration  21: 1598063.655 ops/s
Iteration  22: 1588983.728 ops/s
Iteration  23: 1597747.956 ops/s
Iteration  24: 1601003.095 ops/s
Iteration  25: 1596307.383 ops/s
Iteration  26: 1592747.383 ops/s
Iteration  27: 1589856.437 ops/s
Iteration  28: 1595013.925 ops/s
Iteration  29: 1596251.464 ops/s
Iteration  30: 1600736.003 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBagBy":
  1596181.333 ±(99.9%) 3032.792 ops/s [Average]
  (min, avg, max) = (1586711.363, 1596181.333, 1605157.258), stdev = 4539.341
  CI (99.9%): [1593148.541, 1599214.125] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  1596181.333 ± 3032.792  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 433721.630 ops/s
# Warmup Iteration   2: 826114.778 ops/s
# Warmup Iteration   3: 958796.065 ops/s
# Warmup Iteration   4: 964770.899 ops/s
# Warmup Iteration   5: 965983.977 ops/s
# Warmup Iteration   6: 802609.401 ops/s
# Warmup Iteration   7: 963924.462 ops/s
# Warmup Iteration   8: 966848.324 ops/s
# Warmup Iteration   9: 965068.745 ops/s
# Warmup Iteration  10: 966011.233 ops/s
# Warmup Iteration  11: 964927.195 ops/s
# Warmup Iteration  12: 963154.789 ops/s
# Warmup Iteration  13: 962912.726 ops/s
# Warmup Iteration  14: 963685.648 ops/s
# Warmup Iteration  15: 964055.455 ops/s
# Warmup Iteration  16: 966607.290 ops/s
# Warmup Iteration  17: 968089.136 ops/s
# Warmup Iteration  18: 964044.245 ops/s
# Warmup Iteration  19: 967376.135 ops/s
# Warmup Iteration  20: 965281.816 ops/s
# Warmup Iteration  21: 966630.027 ops/s
# Warmup Iteration  22: 963168.441 ops/s
# Warmup Iteration  23: 967200.978 ops/s
# Warmup Iteration  24: 966802.398 ops/s
# Warmup Iteration  25: 967833.739 ops/s
# Warmup Iteration  26: 967261.075 ops/s
# Warmup Iteration  27: 966051.358 ops/s
# Warmup Iteration  28: 965463.377 ops/s
# Warmup Iteration  29: 964816.494 ops/s
# Warmup Iteration  30: 966248.106 ops/s
Iteration   1: 964871.786 ops/s
Iteration   2: 968443.032 ops/s
Iteration   3: 966594.315 ops/s
Iteration   4: 966913.183 ops/s
Iteration   5: 967677.541 ops/s
Iteration   6: 964866.459 ops/s
Iteration   7: 966177.731 ops/s
Iteration   8: 968847.223 ops/s
Iteration   9: 968796.054 ops/s
Iteration  10: 968324.139 ops/s
Iteration  11: 964246.503 ops/s
Iteration  12: 966372.257 ops/s
Iteration  13: 966705.456 ops/s
Iteration  14: 967869.735 ops/s
Iteration  15: 967075.144 ops/s
Iteration  16: 967874.337 ops/s
Iteration  17: 964327.002 ops/s
Iteration  18: 967951.802 ops/s
Iteration  19: 965456.533 ops/s
Iteration  20: 965782.143 ops/s
Iteration  21: 967233.242 ops/s
Iteration  22: 967821.530 ops/s
Iteration  23: 964202.951 ops/s
Iteration  24: 968974.492 ops/s
Iteration  25: 963895.872 ops/s
Iteration  26: 964463.434 ops/s
Iteration  27: 967607.044 ops/s
Iteration  28: 965395.196 ops/s
Iteration  29: 967134.372 ops/s
Iteration  30: 965465.321 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  966578.861 ±(99.9%) 1044.550 ops/s [Average]
  (min, avg, max) = (963895.872, 966578.861, 968974.492), stdev = 1563.433
  CI (99.9%): [965534.311, 967623.411] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  966578.861 ± 1044.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482033.664 ops/s
# Warmup Iteration   2: 914523.637 ops/s
# Warmup Iteration   3: 1059471.445 ops/s
# Warmup Iteration   4: 1063310.542 ops/s
# Warmup Iteration   5: 1065251.089 ops/s
# Warmup Iteration   6: 883924.210 ops/s
# Warmup Iteration   7: 1065699.452 ops/s
# Warmup Iteration   8: 1065359.178 ops/s
# Warmup Iteration   9: 1062944.533 ops/s
# Warmup Iteration  10: 1061216.417 ops/s
# Warmup Iteration  11: 1062966.276 ops/s
# Warmup Iteration  12: 1058276.180 ops/s
# Warmup Iteration  13: 1064834.424 ops/s
# Warmup Iteration  14: 1063747.031 ops/s
# Warmup Iteration  15: 1061837.402 ops/s
# Warmup Iteration  16: 1063410.615 ops/s
# Warmup Iteration  17: 1063390.275 ops/s
# Warmup Iteration  18: 1061817.525 ops/s
# Warmup Iteration  19: 1060343.993 ops/s
# Warmup Iteration  20: 1062256.217 ops/s
# Warmup Iteration  21: 1064392.207 ops/s
# Warmup Iteration  22: 1062941.847 ops/s
# Warmup Iteration  23: 1058991.202 ops/s
# Warmup Iteration  24: 1063651.259 ops/s
# Warmup Iteration  25: 1063973.888 ops/s
# Warmup Iteration  26: 1062454.163 ops/s
# Warmup Iteration  27: 1061441.770 ops/s
# Warmup Iteration  28: 1065050.147 ops/s
# Warmup Iteration  29: 1064194.839 ops/s
# Warmup Iteration  30: 1062872.274 ops/s
Iteration   1: 1056002.522 ops/s
Iteration   2: 1062403.316 ops/s
Iteration   3: 1062579.459 ops/s
Iteration   4: 1062375.330 ops/s
Iteration   5: 1062205.926 ops/s
Iteration   6: 1063387.505 ops/s
Iteration   7: 1065730.871 ops/s
Iteration   8: 1060094.128 ops/s
Iteration   9: 1064427.328 ops/s
Iteration  10: 1062162.161 ops/s
Iteration  11: 1062067.453 ops/s
Iteration  12: 1062927.655 ops/s
Iteration  13: 1062580.304 ops/s
Iteration  14: 1066330.059 ops/s
Iteration  15: 1066766.218 ops/s
Iteration  16: 1066647.107 ops/s
Iteration  17: 1066513.217 ops/s
Iteration  18: 1064650.845 ops/s
Iteration  19: 1065319.631 ops/s
Iteration  20: 1067075.294 ops/s
Iteration  21: 1067534.787 ops/s
Iteration  22: 1064718.635 ops/s
Iteration  23: 1067855.604 ops/s
Iteration  24: 1070566.998 ops/s
Iteration  25: 1064754.741 ops/s
Iteration  26: 1066813.740 ops/s
Iteration  27: 1066175.914 ops/s
Iteration  28: 1066136.175 ops/s
Iteration  29: 1063218.097 ops/s
Iteration  30: 1064900.439 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1064497.382 ±(99.9%) 1858.031 ops/s [Average]
  (min, avg, max) = (1056002.522, 1064497.382, 1070566.998), stdev = 2781.014
  CI (99.9%): [1062639.351, 1066355.413] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1064497.382 ± 1858.031  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 446436.488 ops/s
# Warmup Iteration   2: 491986.751 ops/s
# Warmup Iteration   3: 612135.351 ops/s
# Warmup Iteration   4: 647529.301 ops/s
# Warmup Iteration   5: 649006.091 ops/s
# Warmup Iteration   6: 644414.295 ops/s
# Warmup Iteration   7: 646678.185 ops/s
# Warmup Iteration   8: 648493.833 ops/s
# Warmup Iteration   9: 645764.604 ops/s
# Warmup Iteration  10: 647643.094 ops/s
# Warmup Iteration  11: 646554.359 ops/s
# Warmup Iteration  12: 642159.584 ops/s
# Warmup Iteration  13: 546273.923 ops/s
# Warmup Iteration  14: 646301.873 ops/s
# Warmup Iteration  15: 648958.304 ops/s
# Warmup Iteration  16: 648204.174 ops/s
# Warmup Iteration  17: 674537.156 ops/s
# Warmup Iteration  18: 675416.444 ops/s
# Warmup Iteration  19: 673824.159 ops/s
# Warmup Iteration  20: 673774.742 ops/s
# Warmup Iteration  21: 674514.347 ops/s
# Warmup Iteration  22: 673282.619 ops/s
# Warmup Iteration  23: 675291.368 ops/s
# Warmup Iteration  24: 675091.941 ops/s
# Warmup Iteration  25: 673833.210 ops/s
# Warmup Iteration  26: 673506.154 ops/s
# Warmup Iteration  27: 675320.268 ops/s
# Warmup Iteration  28: 672602.409 ops/s
# Warmup Iteration  29: 676069.849 ops/s
# Warmup Iteration  30: 674400.848 ops/s
Iteration   1: 676217.447 ops/s
Iteration   2: 672574.712 ops/s
Iteration   3: 674750.989 ops/s
Iteration   4: 674027.919 ops/s
Iteration   5: 674134.262 ops/s
Iteration   6: 677614.843 ops/s
Iteration   7: 671848.784 ops/s
Iteration   8: 675954.964 ops/s
Iteration   9: 675375.141 ops/s
Iteration  10: 674665.459 ops/s
Iteration  11: 673518.570 ops/s
Iteration  12: 675143.888 ops/s
Iteration  13: 673581.872 ops/s
Iteration  14: 674003.507 ops/s
Iteration  15: 675117.548 ops/s
Iteration  16: 675179.565 ops/s
Iteration  17: 674259.779 ops/s
Iteration  18: 674590.700 ops/s
Iteration  19: 676564.329 ops/s
Iteration  20: 675632.315 ops/s
Iteration  21: 673908.231 ops/s
Iteration  22: 676098.755 ops/s
Iteration  23: 674500.506 ops/s
Iteration  24: 674799.709 ops/s
Iteration  25: 672975.683 ops/s
Iteration  26: 676079.917 ops/s
Iteration  27: 674316.666 ops/s
Iteration  28: 673568.539 ops/s
Iteration  29: 673459.993 ops/s
Iteration  30: 673594.148 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_null":
  674601.958 ±(99.9%) 840.946 ops/s [Average]
  (min, avg, max) = (671848.784, 674601.958, 677614.843), stdev = 1258.688
  CI (99.9%): [673761.012, 675442.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  674601.958 ± 840.946  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7408578.859 ops/s
# Warmup Iteration   2: 16446031.410 ops/s
# Warmup Iteration   3: 13984023.989 ops/s
# Warmup Iteration   4: 16633097.445 ops/s
# Warmup Iteration   5: 16571845.595 ops/s
# Warmup Iteration   6: 16597873.283 ops/s
# Warmup Iteration   7: 16592101.767 ops/s
# Warmup Iteration   8: 16600330.218 ops/s
# Warmup Iteration   9: 16526243.876 ops/s
# Warmup Iteration  10: 16485107.283 ops/s
# Warmup Iteration  11: 16569709.922 ops/s
# Warmup Iteration  12: 16478821.003 ops/s
# Warmup Iteration  13: 16502390.648 ops/s
# Warmup Iteration  14: 16582503.472 ops/s
# Warmup Iteration  15: 16577974.239 ops/s
# Warmup Iteration  16: 16564330.331 ops/s
# Warmup Iteration  17: 16609364.456 ops/s
# Warmup Iteration  18: 16531295.832 ops/s
# Warmup Iteration  19: 16595646.332 ops/s
# Warmup Iteration  20: 16497833.579 ops/s
# Warmup Iteration  21: 16567174.216 ops/s
# Warmup Iteration  22: 16593570.826 ops/s
# Warmup Iteration  23: 16552905.646 ops/s
# Warmup Iteration  24: 16552642.832 ops/s
# Warmup Iteration  25: 16542022.004 ops/s
# Warmup Iteration  26: 16549295.555 ops/s
# Warmup Iteration  27: 16471506.767 ops/s
# Warmup Iteration  28: 16460218.562 ops/s
# Warmup Iteration  29: 16533249.142 ops/s
# Warmup Iteration  30: 16587410.611 ops/s
Iteration   1: 16558023.591 ops/s
Iteration   2: 16645296.070 ops/s
Iteration   3: 16483260.831 ops/s
Iteration   4: 16513878.398 ops/s
Iteration   5: 16553811.801 ops/s
Iteration   6: 16464485.925 ops/s
Iteration   7: 16587063.551 ops/s
Iteration   8: 16542353.317 ops/s
Iteration   9: 16592446.972 ops/s
Iteration  10: 16596060.970 ops/s
Iteration  11: 16577850.222 ops/s
Iteration  12: 16543810.465 ops/s
Iteration  13: 16600566.081 ops/s
Iteration  14: 16511394.384 ops/s
Iteration  15: 16560111.266 ops/s
Iteration  16: 16612682.302 ops/s
Iteration  17: 16593283.350 ops/s
Iteration  18: 16616265.342 ops/s
Iteration  19: 16607564.964 ops/s
Iteration  20: 16595225.702 ops/s
Iteration  21: 16550861.679 ops/s
Iteration  22: 16574886.562 ops/s
Iteration  23: 16570547.745 ops/s
Iteration  24: 16466719.669 ops/s
Iteration  25: 16573901.553 ops/s
Iteration  26: 16559398.774 ops/s
Iteration  27: 16566114.585 ops/s
Iteration  28: 16580497.127 ops/s
Iteration  29: 16512431.738 ops/s
Iteration  30: 16589465.141 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList":
  16563342.003 ±(99.9%) 29243.524 ops/s [Average]
  (min, avg, max) = (16464485.925, 16563342.003, 16645296.070), stdev = 43770.334
  CI (99.9%): [16534098.478, 16592585.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList  thrpt   30  16563342.003 ± 29243.524  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 569595.732 ops/s
# Warmup Iteration   2: 851625.886 ops/s
# Warmup Iteration   3: 1068878.077 ops/s
# Warmup Iteration   4: 1065088.334 ops/s
# Warmup Iteration   5: 1066233.401 ops/s
# Warmup Iteration   6: 1067348.038 ops/s
# Warmup Iteration   7: 885335.506 ops/s
# Warmup Iteration   8: 1053272.994 ops/s
# Warmup Iteration   9: 1070002.133 ops/s
# Warmup Iteration  10: 1066613.584 ops/s
# Warmup Iteration  11: 1068560.104 ops/s
# Warmup Iteration  12: 1069493.379 ops/s
# Warmup Iteration  13: 1067854.976 ops/s
# Warmup Iteration  14: 1072393.215 ops/s
# Warmup Iteration  15: 1070246.930 ops/s
# Warmup Iteration  16: 1070805.001 ops/s
# Warmup Iteration  17: 1070036.046 ops/s
# Warmup Iteration  18: 1068991.306 ops/s
# Warmup Iteration  19: 1069344.901 ops/s
# Warmup Iteration  20: 1070980.102 ops/s
# Warmup Iteration  21: 1068220.876 ops/s
# Warmup Iteration  22: 1069608.191 ops/s
# Warmup Iteration  23: 1068358.631 ops/s
# Warmup Iteration  24: 1069704.081 ops/s
# Warmup Iteration  25: 1068095.004 ops/s
# Warmup Iteration  26: 1070401.287 ops/s
# Warmup Iteration  27: 1070431.411 ops/s
# Warmup Iteration  28: 1068010.057 ops/s
# Warmup Iteration  29: 1066660.901 ops/s
# Warmup Iteration  30: 1070214.839 ops/s
Iteration   1: 1071110.936 ops/s
Iteration   2: 1070800.953 ops/s
Iteration   3: 1069492.176 ops/s
Iteration   4: 1066363.490 ops/s
Iteration   5: 1070040.213 ops/s
Iteration   6: 1069647.145 ops/s
Iteration   7: 1065942.053 ops/s
Iteration   8: 1069188.978 ops/s
Iteration   9: 1067842.346 ops/s
Iteration  10: 1071751.278 ops/s
Iteration  11: 1066468.333 ops/s
Iteration  12: 1070970.976 ops/s
Iteration  13: 1072523.978 ops/s
Iteration  14: 1065413.393 ops/s
Iteration  15: 1063996.228 ops/s
Iteration  16: 1066595.610 ops/s
Iteration  17: 1069594.751 ops/s
Iteration  18: 1067566.603 ops/s
Iteration  19: 1066548.333 ops/s
Iteration  20: 1068431.216 ops/s
Iteration  21: 1069388.124 ops/s
Iteration  22: 1066161.797 ops/s
Iteration  23: 1067672.789 ops/s
Iteration  24: 1067854.752 ops/s
Iteration  25: 1071370.391 ops/s
Iteration  26: 1068702.955 ops/s
Iteration  27: 1068779.177 ops/s
Iteration  28: 1067153.383 ops/s
Iteration  29: 1068151.783 ops/s
Iteration  30: 1070518.469 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy":
  1068534.754 ±(99.9%) 1397.069 ops/s [Average]
  (min, avg, max) = (1063996.228, 1068534.754, 1072523.978), stdev = 2091.067
  CI (99.9%): [1067137.685, 1069931.822] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1068534.754 ± 1397.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 821147.653 ops/s
# Warmup Iteration   2: 1153881.557 ops/s
# Warmup Iteration   3: 1472634.109 ops/s
# Warmup Iteration   4: 1461010.205 ops/s
# Warmup Iteration   5: 1473234.882 ops/s
# Warmup Iteration   6: 1471672.428 ops/s
# Warmup Iteration   7: 1472653.728 ops/s
# Warmup Iteration   8: 1205373.751 ops/s
# Warmup Iteration   9: 1470781.505 ops/s
# Warmup Iteration  10: 1475407.298 ops/s
# Warmup Iteration  11: 1473185.525 ops/s
# Warmup Iteration  12: 1471740.147 ops/s
# Warmup Iteration  13: 1468061.046 ops/s
# Warmup Iteration  14: 1467468.944 ops/s
# Warmup Iteration  15: 1468611.674 ops/s
# Warmup Iteration  16: 1472649.783 ops/s
# Warmup Iteration  17: 1472726.455 ops/s
# Warmup Iteration  18: 1471863.102 ops/s
# Warmup Iteration  19: 1474344.927 ops/s
# Warmup Iteration  20: 1473531.338 ops/s
# Warmup Iteration  21: 1475184.292 ops/s
# Warmup Iteration  22: 1469053.886 ops/s
# Warmup Iteration  23: 1471868.895 ops/s
# Warmup Iteration  24: 1469289.294 ops/s
# Warmup Iteration  25: 1476334.486 ops/s
# Warmup Iteration  26: 1472016.431 ops/s
# Warmup Iteration  27: 1469913.583 ops/s
# Warmup Iteration  28: 1469897.338 ops/s
# Warmup Iteration  29: 1474326.896 ops/s
# Warmup Iteration  30: 1474830.247 ops/s
Iteration   1: 1476992.439 ops/s
Iteration   2: 1477428.026 ops/s
Iteration   3: 1473346.190 ops/s
Iteration   4: 1479865.600 ops/s
Iteration   5: 1468459.862 ops/s
Iteration   6: 1467545.138 ops/s
Iteration   7: 1472825.221 ops/s
Iteration   8: 1477253.161 ops/s
Iteration   9: 1474175.566 ops/s
Iteration  10: 1475460.642 ops/s
Iteration  11: 1474203.388 ops/s
Iteration  12: 1473068.557 ops/s
Iteration  13: 1474380.075 ops/s
Iteration  14: 1474276.853 ops/s
Iteration  15: 1478405.456 ops/s
Iteration  16: 1472577.258 ops/s
Iteration  17: 1474881.162 ops/s
Iteration  18: 1473968.098 ops/s
Iteration  19: 1474397.340 ops/s
Iteration  20: 1472915.801 ops/s
Iteration  21: 1471523.847 ops/s
Iteration  22: 1472961.299 ops/s
Iteration  23: 1474093.117 ops/s
Iteration  24: 1471328.379 ops/s
Iteration  25: 1474693.943 ops/s
Iteration  26: 1475150.848 ops/s
Iteration  27: 1477260.228 ops/s
Iteration  28: 1470329.877 ops/s
Iteration  29: 1480083.648 ops/s
Iteration  30: 1476865.443 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1474357.215 ±(99.9%) 1955.173 ops/s [Average]
  (min, avg, max) = (1467545.138, 1474357.215, 1480083.648), stdev = 2926.411
  CI (99.9%): [1472402.043, 1476312.388] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1474357.215 ± 1955.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListWithComparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListWithComparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9565307.650 ops/s
# Warmup Iteration   2: 31953567.561 ops/s
# Warmup Iteration   3: 27203230.759 ops/s
# Warmup Iteration   4: 31835460.084 ops/s
# Warmup Iteration   5: 31926664.285 ops/s
# Warmup Iteration   6: 32002146.440 ops/s
# Warmup Iteration   7: 31870561.594 ops/s
# Warmup Iteration   8: 31884823.322 ops/s
# Warmup Iteration   9: 31989283.179 ops/s
# Warmup Iteration  10: 31961133.477 ops/s
# Warmup Iteration  11: 32099294.479 ops/s
# Warmup Iteration  12: 32017368.321 ops/s
# Warmup Iteration  13: 31973446.008 ops/s
# Warmup Iteration  14: 31914562.159 ops/s
# Warmup Iteration  15: 32032550.938 ops/s
# Warmup Iteration  16: 32018845.842 ops/s
# Warmup Iteration  17: 31944478.411 ops/s
# Warmup Iteration  18: 31946667.601 ops/s
# Warmup Iteration  19: 31757298.519 ops/s
# Warmup Iteration  20: 32002126.125 ops/s
# Warmup Iteration  21: 32044594.335 ops/s
# Warmup Iteration  22: 32040606.444 ops/s
# Warmup Iteration  23: 32045119.140 ops/s
# Warmup Iteration  24: 31982891.542 ops/s
# Warmup Iteration  25: 31926216.067 ops/s
# Warmup Iteration  26: 31979713.961 ops/s
# Warmup Iteration  27: 31877926.540 ops/s
# Warmup Iteration  28: 31998214.941 ops/s
# Warmup Iteration  29: 32018017.838 ops/s
# Warmup Iteration  30: 32121820.345 ops/s
Iteration   1: 31856372.149 ops/s
Iteration   2: 32040852.698 ops/s
Iteration   3: 32002158.844 ops/s
Iteration   4: 31945670.564 ops/s
Iteration   5: 31792464.214 ops/s
Iteration   6: 31930342.586 ops/s
Iteration   7: 31876361.719 ops/s
Iteration   8: 31927554.266 ops/s
Iteration   9: 31931348.904 ops/s
Iteration  10: 32037512.325 ops/s
Iteration  11: 32104401.661 ops/s
Iteration  12: 31954859.688 ops/s
Iteration  13: 31833794.911 ops/s
Iteration  14: 31981390.247 ops/s
Iteration  15: 31965695.488 ops/s
Iteration  16: 32076487.463 ops/s
Iteration  17: 32097778.471 ops/s
Iteration  18: 31974181.296 ops/s
Iteration  19: 31981938.153 ops/s
Iteration  20: 31871704.735 ops/s
Iteration  21: 32084913.802 ops/s
Iteration  22: 31997913.130 ops/s
Iteration  23: 31921939.898 ops/s
Iteration  24: 31834340.951 ops/s
Iteration  25: 31974287.339 ops/s
Iteration  26: 31990953.509 ops/s
Iteration  27: 31864465.526 ops/s
Iteration  28: 32135100.797 ops/s
Iteration  29: 32019291.132 ops/s
Iteration  30: 32046289.218 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListWithComparator":
  31968412.189 ±(99.9%) 58911.822 ops/s [Average]
  (min, avg, max) = (31792464.214, 31968412.189, 32135100.797), stdev = 88176.449
  CI (99.9%): [31909500.367, 32027324.012] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedListWithComparator  thrpt   30  31968412.189 ± 58911.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 906338.660 ops/s
# Warmup Iteration   2: 2046799.755 ops/s
# Warmup Iteration   3: 2169061.858 ops/s
# Warmup Iteration   4: 1964938.986 ops/s
# Warmup Iteration   5: 1988363.263 ops/s
# Warmup Iteration   6: 2171521.522 ops/s
# Warmup Iteration   7: 2168293.536 ops/s
# Warmup Iteration   8: 2173780.425 ops/s
# Warmup Iteration   9: 2175196.139 ops/s
# Warmup Iteration  10: 2167811.574 ops/s
# Warmup Iteration  11: 2169074.945 ops/s
# Warmup Iteration  12: 2166494.146 ops/s
# Warmup Iteration  13: 2169082.579 ops/s
# Warmup Iteration  14: 2170401.396 ops/s
# Warmup Iteration  15: 2179487.481 ops/s
# Warmup Iteration  16: 2172141.833 ops/s
# Warmup Iteration  17: 2165709.796 ops/s
# Warmup Iteration  18: 2164145.842 ops/s
# Warmup Iteration  19: 2168930.975 ops/s
# Warmup Iteration  20: 2165384.763 ops/s
# Warmup Iteration  21: 2161668.058 ops/s
# Warmup Iteration  22: 2167139.724 ops/s
# Warmup Iteration  23: 2162122.022 ops/s
# Warmup Iteration  24: 2171998.273 ops/s
# Warmup Iteration  25: 2166031.300 ops/s
# Warmup Iteration  26: 2162963.119 ops/s
# Warmup Iteration  27: 2163662.188 ops/s
# Warmup Iteration  28: 2162772.954 ops/s
# Warmup Iteration  29: 2166448.646 ops/s
# Warmup Iteration  30: 2165002.027 ops/s
Iteration   1: 2172824.344 ops/s
Iteration   2: 2158690.730 ops/s
Iteration   3: 2166401.456 ops/s
Iteration   4: 2161618.778 ops/s
Iteration   5: 2162332.156 ops/s
Iteration   6: 2168741.958 ops/s
Iteration   7: 2167493.469 ops/s
Iteration   8: 2168704.343 ops/s
Iteration   9: 2167132.453 ops/s
Iteration  10: 2166520.587 ops/s
Iteration  11: 2168869.499 ops/s
Iteration  12: 2174892.901 ops/s
Iteration  13: 2166321.561 ops/s
Iteration  14: 2166828.354 ops/s
Iteration  15: 2167841.163 ops/s
Iteration  16: 2165804.365 ops/s
Iteration  17: 2174675.794 ops/s
Iteration  18: 2163458.130 ops/s
Iteration  19: 2173972.582 ops/s
Iteration  20: 2157918.874 ops/s
Iteration  21: 2164883.161 ops/s
Iteration  22: 2169875.639 ops/s
Iteration  23: 2162651.651 ops/s
Iteration  24: 2158975.545 ops/s
Iteration  25: 2168539.119 ops/s
Iteration  26: 2155798.434 ops/s
Iteration  27: 2161110.043 ops/s
Iteration  28: 2164682.371 ops/s
Iteration  29: 2161455.452 ops/s
Iteration  30: 2161237.989 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2165675.097 ±(99.9%) 3298.151 ops/s [Average]
  (min, avg, max) = (2155798.434, 2165675.097, 2174892.901), stdev = 4936.517
  CI (99.9%): [2162376.946, 2168973.247] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2165675.097 ± 3298.151  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1312576.209 ops/s
# Warmup Iteration   2: 2658226.601 ops/s
# Warmup Iteration   3: 2970204.947 ops/s
# Warmup Iteration   4: 2990695.326 ops/s
# Warmup Iteration   5: 2426202.323 ops/s
# Warmup Iteration   6: 2990493.488 ops/s
# Warmup Iteration   7: 2993760.852 ops/s
# Warmup Iteration   8: 2996126.998 ops/s
# Warmup Iteration   9: 2996321.888 ops/s
# Warmup Iteration  10: 2998059.063 ops/s
# Warmup Iteration  11: 2980747.463 ops/s
# Warmup Iteration  12: 3000802.961 ops/s
# Warmup Iteration  13: 2990374.294 ops/s
# Warmup Iteration  14: 2995750.110 ops/s
# Warmup Iteration  15: 3008868.031 ops/s
# Warmup Iteration  16: 2987134.200 ops/s
# Warmup Iteration  17: 3000110.831 ops/s
# Warmup Iteration  18: 2998128.847 ops/s
# Warmup Iteration  19: 3001226.239 ops/s
# Warmup Iteration  20: 3000956.576 ops/s
# Warmup Iteration  21: 3001277.399 ops/s
# Warmup Iteration  22: 3002920.713 ops/s
# Warmup Iteration  23: 2995181.487 ops/s
# Warmup Iteration  24: 3001480.848 ops/s
# Warmup Iteration  25: 2994187.315 ops/s
# Warmup Iteration  26: 2999910.622 ops/s
# Warmup Iteration  27: 2996542.345 ops/s
# Warmup Iteration  28: 3006779.075 ops/s
# Warmup Iteration  29: 2999861.203 ops/s
# Warmup Iteration  30: 3000228.830 ops/s
Iteration   1: 3007347.147 ops/s
Iteration   2: 2997453.642 ops/s
Iteration   3: 2991142.523 ops/s
Iteration   4: 2991303.641 ops/s
Iteration   5: 2996429.319 ops/s
Iteration   6: 2995762.655 ops/s
Iteration   7: 2998750.208 ops/s
Iteration   8: 2992259.346 ops/s
Iteration   9: 2992782.181 ops/s
Iteration  10: 2999624.033 ops/s
Iteration  11: 2991285.521 ops/s
Iteration  12: 2992750.838 ops/s
Iteration  13: 2981183.181 ops/s
Iteration  14: 3008256.015 ops/s
Iteration  15: 2996266.186 ops/s
Iteration  16: 3006603.329 ops/s
Iteration  17: 3007761.719 ops/s
Iteration  18: 2991179.251 ops/s
Iteration  19: 2999655.031 ops/s
Iteration  20: 2995767.771 ops/s
Iteration  21: 2995433.828 ops/s
Iteration  22: 3001651.565 ops/s
Iteration  23: 3006026.949 ops/s
Iteration  24: 2998339.610 ops/s
Iteration  25: 2991548.337 ops/s
Iteration  26: 3004219.066 ops/s
Iteration  27: 2998033.399 ops/s
Iteration  28: 2995600.969 ops/s
Iteration  29: 2990841.077 ops/s
Iteration  30: 2992343.308 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  2996920.055 ±(99.9%) 4218.881 ops/s [Average]
  (min, avg, max) = (2981183.181, 2996920.055, 3008256.015), stdev = 6314.623
  CI (99.9%): [2992701.174, 3001138.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  2996920.055 ± 4218.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009788.616 ops/s
# Warmup Iteration   2: 1346900.649 ops/s
# Warmup Iteration   3: 1806148.024 ops/s
# Warmup Iteration   4: 1796371.286 ops/s
# Warmup Iteration   5: 1805997.582 ops/s
# Warmup Iteration   6: 1805924.238 ops/s
# Warmup Iteration   7: 1808803.533 ops/s
# Warmup Iteration   8: 1500265.852 ops/s
# Warmup Iteration   9: 1773715.960 ops/s
# Warmup Iteration  10: 1806594.620 ops/s
# Warmup Iteration  11: 1797552.513 ops/s
# Warmup Iteration  12: 1800975.381 ops/s
# Warmup Iteration  13: 1806640.619 ops/s
# Warmup Iteration  14: 1804756.332 ops/s
# Warmup Iteration  15: 1805726.930 ops/s
# Warmup Iteration  16: 1801212.813 ops/s
# Warmup Iteration  17: 1800272.390 ops/s
# Warmup Iteration  18: 1803184.568 ops/s
# Warmup Iteration  19: 1805112.445 ops/s
# Warmup Iteration  20: 1802673.302 ops/s
# Warmup Iteration  21: 1802253.778 ops/s
# Warmup Iteration  22: 1803800.749 ops/s
# Warmup Iteration  23: 1802847.303 ops/s
# Warmup Iteration  24: 1800046.975 ops/s
# Warmup Iteration  25: 1801066.461 ops/s
# Warmup Iteration  26: 1800860.392 ops/s
# Warmup Iteration  27: 1800867.815 ops/s
# Warmup Iteration  28: 1804651.713 ops/s
# Warmup Iteration  29: 1805911.183 ops/s
# Warmup Iteration  30: 1801210.177 ops/s
Iteration   1: 1799672.151 ops/s
Iteration   2: 1800207.733 ops/s
Iteration   3: 1799871.488 ops/s
Iteration   4: 1803369.535 ops/s
Iteration   5: 1800000.767 ops/s
Iteration   6: 1804219.697 ops/s
Iteration   7: 1803280.277 ops/s
Iteration   8: 1804515.553 ops/s
Iteration   9: 1799349.832 ops/s
Iteration  10: 1807835.460 ops/s
Iteration  11: 1800159.941 ops/s
Iteration  12: 1801301.195 ops/s
Iteration  13: 1809822.876 ops/s
Iteration  14: 1803963.089 ops/s
Iteration  15: 1803197.968 ops/s
Iteration  16: 1800141.241 ops/s
Iteration  17: 1802341.502 ops/s
Iteration  18: 1801323.751 ops/s
Iteration  19: 1802832.205 ops/s
Iteration  20: 1799057.115 ops/s
Iteration  21: 1808258.953 ops/s
Iteration  22: 1808647.833 ops/s
Iteration  23: 1808151.655 ops/s
Iteration  24: 1809007.813 ops/s
Iteration  25: 1806289.970 ops/s
Iteration  26: 1800732.476 ops/s
Iteration  27: 1808552.535 ops/s
Iteration  28: 1798023.934 ops/s
Iteration  29: 1806898.205 ops/s
Iteration  30: 1799723.575 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_null":
  1803358.344 ±(99.9%) 2417.348 ops/s [Average]
  (min, avg, max) = (1798023.934, 1803358.344, 1809822.876), stdev = 3618.173
  CI (99.9%): [1800940.996, 1805775.692] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  1803358.344 ± 2417.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 251853.246 ops/s
# Warmup Iteration   2: 512716.887 ops/s
# Warmup Iteration   3: 580312.109 ops/s
# Warmup Iteration   4: 586146.075 ops/s
# Warmup Iteration   5: 503573.196 ops/s
# Warmup Iteration   6: 569940.858 ops/s
# Warmup Iteration   7: 587249.522 ops/s
# Warmup Iteration   8: 584821.447 ops/s
# Warmup Iteration   9: 585741.971 ops/s
# Warmup Iteration  10: 585920.847 ops/s
# Warmup Iteration  11: 587266.448 ops/s
# Warmup Iteration  12: 585643.226 ops/s
# Warmup Iteration  13: 586785.716 ops/s
# Warmup Iteration  14: 585619.434 ops/s
# Warmup Iteration  15: 584333.029 ops/s
# Warmup Iteration  16: 585100.684 ops/s
# Warmup Iteration  17: 586720.959 ops/s
# Warmup Iteration  18: 585830.186 ops/s
# Warmup Iteration  19: 584189.658 ops/s
# Warmup Iteration  20: 585576.765 ops/s
# Warmup Iteration  21: 584753.713 ops/s
# Warmup Iteration  22: 584378.799 ops/s
# Warmup Iteration  23: 586690.743 ops/s
# Warmup Iteration  24: 585439.439 ops/s
# Warmup Iteration  25: 584853.290 ops/s
# Warmup Iteration  26: 586229.254 ops/s
# Warmup Iteration  27: 586144.156 ops/s
# Warmup Iteration  28: 587333.924 ops/s
# Warmup Iteration  29: 585430.557 ops/s
# Warmup Iteration  30: 585015.572 ops/s
Iteration   1: 585748.329 ops/s
Iteration   2: 585135.125 ops/s
Iteration   3: 583922.694 ops/s
Iteration   4: 586383.645 ops/s
Iteration   5: 586858.669 ops/s
Iteration   6: 585798.014 ops/s
Iteration   7: 586121.955 ops/s
Iteration   8: 583856.036 ops/s
Iteration   9: 586294.638 ops/s
Iteration  10: 589260.486 ops/s
Iteration  11: 586571.890 ops/s
Iteration  12: 584217.424 ops/s
Iteration  13: 586173.418 ops/s
Iteration  14: 583808.948 ops/s
Iteration  15: 585806.844 ops/s
Iteration  16: 586937.506 ops/s
Iteration  17: 583353.833 ops/s
Iteration  18: 585936.416 ops/s
Iteration  19: 587675.852 ops/s
Iteration  20: 586306.493 ops/s
Iteration  21: 585499.484 ops/s
Iteration  22: 587226.078 ops/s
Iteration  23: 583381.271 ops/s
Iteration  24: 586741.103 ops/s
Iteration  25: 585799.857 ops/s
Iteration  26: 584189.629 ops/s
Iteration  27: 586100.582 ops/s
Iteration  28: 585320.479 ops/s
Iteration  29: 586556.798 ops/s
Iteration  30: 587704.326 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap":
  585822.927 ±(99.9%) 926.474 ops/s [Average]
  (min, avg, max) = (583353.833, 585822.927, 589260.486), stdev = 1386.703
  CI (99.9%): [584896.453, 586749.402] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  585822.927 ± 926.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 217271.242 ops/s
# Warmup Iteration   2: 377672.356 ops/s
# Warmup Iteration   3: 451738.394 ops/s
# Warmup Iteration   4: 454855.263 ops/s
# Warmup Iteration   5: 453754.952 ops/s
# Warmup Iteration   6: 416751.881 ops/s
# Warmup Iteration   7: 416953.945 ops/s
# Warmup Iteration   8: 454661.383 ops/s
# Warmup Iteration   9: 453885.180 ops/s
# Warmup Iteration  10: 453683.822 ops/s
# Warmup Iteration  11: 453413.104 ops/s
# Warmup Iteration  12: 454380.900 ops/s
# Warmup Iteration  13: 452332.517 ops/s
# Warmup Iteration  14: 454937.632 ops/s
# Warmup Iteration  15: 452090.964 ops/s
# Warmup Iteration  16: 453931.978 ops/s
# Warmup Iteration  17: 454820.938 ops/s
# Warmup Iteration  18: 455096.126 ops/s
# Warmup Iteration  19: 454621.493 ops/s
# Warmup Iteration  20: 454943.590 ops/s
# Warmup Iteration  21: 454819.104 ops/s
# Warmup Iteration  22: 455232.723 ops/s
# Warmup Iteration  23: 455756.702 ops/s
# Warmup Iteration  24: 456025.313 ops/s
# Warmup Iteration  25: 455874.367 ops/s
# Warmup Iteration  26: 455696.789 ops/s
# Warmup Iteration  27: 455192.175 ops/s
# Warmup Iteration  28: 454987.350 ops/s
# Warmup Iteration  29: 456387.107 ops/s
# Warmup Iteration  30: 455799.298 ops/s
Iteration   1: 455419.534 ops/s
Iteration   2: 454762.259 ops/s
Iteration   3: 456200.690 ops/s
Iteration   4: 454796.100 ops/s
Iteration   5: 456146.137 ops/s
Iteration   6: 455779.910 ops/s
Iteration   7: 456513.289 ops/s
Iteration   8: 454209.619 ops/s
Iteration   9: 456298.137 ops/s
Iteration  10: 455597.694 ops/s
Iteration  11: 457405.251 ops/s
Iteration  12: 455375.096 ops/s
Iteration  13: 457830.567 ops/s
Iteration  14: 453996.970 ops/s
Iteration  15: 456414.221 ops/s
Iteration  16: 456863.702 ops/s
Iteration  17: 455278.465 ops/s
Iteration  18: 454940.760 ops/s
Iteration  19: 457919.167 ops/s
Iteration  20: 454951.793 ops/s
Iteration  21: 457198.926 ops/s
Iteration  22: 454836.748 ops/s
Iteration  23: 455546.229 ops/s
Iteration  24: 456567.705 ops/s
Iteration  25: 455997.392 ops/s
Iteration  26: 456578.370 ops/s
Iteration  27: 456561.889 ops/s
Iteration  28: 455633.411 ops/s
Iteration  29: 455839.468 ops/s
Iteration  30: 455220.630 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMapBy":
  455889.338 ±(99.9%) 663.347 ops/s [Average]
  (min, avg, max) = (453996.970, 455889.338, 457919.167), stdev = 992.866
  CI (99.9%): [455225.991, 456552.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  455889.338 ± 663.347  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 250490.229 ops/s
# Warmup Iteration   2: 508761.077 ops/s
# Warmup Iteration   3: 575971.465 ops/s
# Warmup Iteration   4: 577397.587 ops/s
# Warmup Iteration   5: 509686.143 ops/s
# Warmup Iteration   6: 553032.514 ops/s
# Warmup Iteration   7: 579339.780 ops/s
# Warmup Iteration   8: 579279.743 ops/s
# Warmup Iteration   9: 578128.381 ops/s
# Warmup Iteration  10: 579557.263 ops/s
# Warmup Iteration  11: 582883.586 ops/s
# Warmup Iteration  12: 581226.123 ops/s
# Warmup Iteration  13: 580758.172 ops/s
# Warmup Iteration  14: 581415.512 ops/s
# Warmup Iteration  15: 581405.383 ops/s
# Warmup Iteration  16: 581359.726 ops/s
# Warmup Iteration  17: 579576.829 ops/s
# Warmup Iteration  18: 580595.232 ops/s
# Warmup Iteration  19: 579681.549 ops/s
# Warmup Iteration  20: 580073.900 ops/s
# Warmup Iteration  21: 578770.887 ops/s
# Warmup Iteration  22: 582698.681 ops/s
# Warmup Iteration  23: 579212.740 ops/s
# Warmup Iteration  24: 579928.573 ops/s
# Warmup Iteration  25: 578225.504 ops/s
# Warmup Iteration  26: 581819.939 ops/s
# Warmup Iteration  27: 580622.332 ops/s
# Warmup Iteration  28: 578911.364 ops/s
# Warmup Iteration  29: 578138.128 ops/s
# Warmup Iteration  30: 580165.005 ops/s
Iteration   1: 583853.457 ops/s
Iteration   2: 579207.295 ops/s
Iteration   3: 579815.475 ops/s
Iteration   4: 580651.240 ops/s
Iteration   5: 579040.187 ops/s
Iteration   6: 578358.089 ops/s
Iteration   7: 580717.198 ops/s
Iteration   8: 580204.256 ops/s
Iteration   9: 583195.139 ops/s
Iteration  10: 579888.302 ops/s
Iteration  11: 577352.526 ops/s
Iteration  12: 582169.193 ops/s
Iteration  13: 580471.155 ops/s
Iteration  14: 581690.684 ops/s
Iteration  15: 576742.929 ops/s
Iteration  16: 581707.456 ops/s
Iteration  17: 581186.633 ops/s
Iteration  18: 578506.024 ops/s
Iteration  19: 580745.193 ops/s
Iteration  20: 580927.499 ops/s
Iteration  21: 579706.361 ops/s
Iteration  22: 580664.032 ops/s
Iteration  23: 583234.388 ops/s
Iteration  24: 581231.913 ops/s
Iteration  25: 579256.716 ops/s
Iteration  26: 580750.672 ops/s
Iteration  27: 582929.491 ops/s
Iteration  28: 579693.377 ops/s
Iteration  29: 581297.485 ops/s
Iteration  30: 578085.445 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  580442.660 ±(99.9%) 1147.007 ops/s [Average]
  (min, avg, max) = (576742.929, 580442.660, 583853.457), stdev = 1716.786
  CI (99.9%): [579295.654, 581589.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  580442.660 ± 1147.007  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539011.517 ops/s
# Warmup Iteration   2: 1049937.634 ops/s
# Warmup Iteration   3: 1145585.957 ops/s
# Warmup Iteration   4: 1153941.457 ops/s
# Warmup Iteration   5: 956951.117 ops/s
# Warmup Iteration   6: 1154468.733 ops/s
# Warmup Iteration   7: 1154274.783 ops/s
# Warmup Iteration   8: 1155000.380 ops/s
# Warmup Iteration   9: 1153282.102 ops/s
# Warmup Iteration  10: 1154225.537 ops/s
# Warmup Iteration  11: 1152223.582 ops/s
# Warmup Iteration  12: 1153969.983 ops/s
# Warmup Iteration  13: 1151957.414 ops/s
# Warmup Iteration  14: 1157272.779 ops/s
# Warmup Iteration  15: 1153121.356 ops/s
# Warmup Iteration  16: 1154842.258 ops/s
# Warmup Iteration  17: 1153155.236 ops/s
# Warmup Iteration  18: 1153756.946 ops/s
# Warmup Iteration  19: 1155891.685 ops/s
# Warmup Iteration  20: 1153961.827 ops/s
# Warmup Iteration  21: 1155010.300 ops/s
# Warmup Iteration  22: 1155326.307 ops/s
# Warmup Iteration  23: 1152371.109 ops/s
# Warmup Iteration  24: 1153592.015 ops/s
# Warmup Iteration  25: 1155023.987 ops/s
# Warmup Iteration  26: 1151696.976 ops/s
# Warmup Iteration  27: 1155574.478 ops/s
# Warmup Iteration  28: 1153812.884 ops/s
# Warmup Iteration  29: 1155346.262 ops/s
# Warmup Iteration  30: 1155698.901 ops/s
Iteration   1: 1154374.517 ops/s
Iteration   2: 1156103.075 ops/s
Iteration   3: 1153149.634 ops/s
Iteration   4: 1153522.539 ops/s
Iteration   5: 1155065.515 ops/s
Iteration   6: 1153797.849 ops/s
Iteration   7: 1149468.067 ops/s
Iteration   8: 1154869.719 ops/s
Iteration   9: 1153286.094 ops/s
Iteration  10: 1153500.821 ops/s
Iteration  11: 1157600.425 ops/s
Iteration  12: 1154395.470 ops/s
Iteration  13: 1156865.416 ops/s
Iteration  14: 1151998.794 ops/s
Iteration  15: 1154454.368 ops/s
Iteration  16: 1152980.408 ops/s
Iteration  17: 1155039.349 ops/s
Iteration  18: 1154337.366 ops/s
Iteration  19: 1155833.693 ops/s
Iteration  20: 1155168.733 ops/s
Iteration  21: 1156726.273 ops/s
Iteration  22: 1156543.187 ops/s
Iteration  23: 1154454.740 ops/s
Iteration  24: 1152004.246 ops/s
Iteration  25: 1155022.068 ops/s
Iteration  26: 1155274.972 ops/s
Iteration  27: 1153211.919 ops/s
Iteration  28: 1153819.761 ops/s
Iteration  29: 1151371.663 ops/s
Iteration  30: 1154122.349 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSetBy":
  1154278.768 ±(99.9%) 1158.888 ops/s [Average]
  (min, avg, max) = (1149468.067, 1154278.768, 1157600.425), stdev = 1734.569
  CI (99.9%): [1153119.880, 1155437.656] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1154278.768 ± 1158.888  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709134.207 ops/s
# Warmup Iteration   2: 1625067.069 ops/s
# Warmup Iteration   3: 1699789.408 ops/s
# Warmup Iteration   4: 1535892.321 ops/s
# Warmup Iteration   5: 1586271.075 ops/s
# Warmup Iteration   6: 1702304.390 ops/s
# Warmup Iteration   7: 1699186.272 ops/s
# Warmup Iteration   8: 1704909.395 ops/s
# Warmup Iteration   9: 1699591.471 ops/s
# Warmup Iteration  10: 1701504.149 ops/s
# Warmup Iteration  11: 1703133.339 ops/s
# Warmup Iteration  12: 1703491.405 ops/s
# Warmup Iteration  13: 1692656.439 ops/s
# Warmup Iteration  14: 1704331.981 ops/s
# Warmup Iteration  15: 1709744.030 ops/s
# Warmup Iteration  16: 1704728.547 ops/s
# Warmup Iteration  17: 1707433.789 ops/s
# Warmup Iteration  18: 1710224.006 ops/s
# Warmup Iteration  19: 1710637.033 ops/s
# Warmup Iteration  20: 1706327.183 ops/s
# Warmup Iteration  21: 1708337.389 ops/s
# Warmup Iteration  22: 1704674.170 ops/s
# Warmup Iteration  23: 1702759.719 ops/s
# Warmup Iteration  24: 1703907.923 ops/s
# Warmup Iteration  25: 1707037.485 ops/s
# Warmup Iteration  26: 1699965.381 ops/s
# Warmup Iteration  27: 1706465.384 ops/s
# Warmup Iteration  28: 1706715.672 ops/s
# Warmup Iteration  29: 1705682.983 ops/s
# Warmup Iteration  30: 1707583.898 ops/s
Iteration   1: 1705032.882 ops/s
Iteration   2: 1711073.992 ops/s
Iteration   3: 1712373.014 ops/s
Iteration   4: 1711441.959 ops/s
Iteration   5: 1706444.856 ops/s
Iteration   6: 1706682.058 ops/s
Iteration   7: 1699878.273 ops/s
Iteration   8: 1703201.010 ops/s
Iteration   9: 1702696.939 ops/s
Iteration  10: 1706922.758 ops/s
Iteration  11: 1704587.334 ops/s
Iteration  12: 1703821.226 ops/s
Iteration  13: 1706897.852 ops/s
Iteration  14: 1704309.289 ops/s
Iteration  15: 1709053.218 ops/s
Iteration  16: 1709635.470 ops/s
Iteration  17: 1705589.295 ops/s
Iteration  18: 1709689.393 ops/s
Iteration  19: 1709606.691 ops/s
Iteration  20: 1707332.419 ops/s
Iteration  21: 1709258.714 ops/s
Iteration  22: 1709434.842 ops/s
Iteration  23: 1704439.795 ops/s
Iteration  24: 1713261.250 ops/s
Iteration  25: 1707588.434 ops/s
Iteration  26: 1707957.112 ops/s
Iteration  27: 1705242.479 ops/s
Iteration  28: 1713368.321 ops/s
Iteration  29: 1710597.154 ops/s
Iteration  30: 1709561.772 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1707565.993 ±(99.9%) 2202.650 ops/s [Average]
  (min, avg, max) = (1699878.273, 1707565.993, 1713368.321), stdev = 3296.823
  CI (99.9%): [1705363.343, 1709768.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1707565.993 ± 2202.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 694376.076 ops/s
# Warmup Iteration   2: 1562078.394 ops/s
# Warmup Iteration   3: 1633201.315 ops/s
# Warmup Iteration   4: 1582199.102 ops/s
# Warmup Iteration   5: 1421494.919 ops/s
# Warmup Iteration   6: 1645280.535 ops/s
# Warmup Iteration   7: 1641649.996 ops/s
# Warmup Iteration   8: 1641322.570 ops/s
# Warmup Iteration   9: 1644413.579 ops/s
# Warmup Iteration  10: 1648990.015 ops/s
# Warmup Iteration  11: 1644812.533 ops/s
# Warmup Iteration  12: 1641594.507 ops/s
# Warmup Iteration  13: 1644348.422 ops/s
# Warmup Iteration  14: 1644583.042 ops/s
# Warmup Iteration  15: 1635879.301 ops/s
# Warmup Iteration  16: 1648874.428 ops/s
# Warmup Iteration  17: 1642513.057 ops/s
# Warmup Iteration  18: 1641450.396 ops/s
# Warmup Iteration  19: 1644912.337 ops/s
# Warmup Iteration  20: 1643934.202 ops/s
# Warmup Iteration  21: 1644316.351 ops/s
# Warmup Iteration  22: 1647579.218 ops/s
# Warmup Iteration  23: 1642794.471 ops/s
# Warmup Iteration  24: 1643611.055 ops/s
# Warmup Iteration  25: 1644650.943 ops/s
# Warmup Iteration  26: 1644816.053 ops/s
# Warmup Iteration  27: 1648310.871 ops/s
# Warmup Iteration  28: 1639671.121 ops/s
# Warmup Iteration  29: 1646008.526 ops/s
# Warmup Iteration  30: 1641925.817 ops/s
Iteration   1: 1645796.804 ops/s
Iteration   2: 1640699.829 ops/s
Iteration   3: 1644614.696 ops/s
Iteration   4: 1639729.347 ops/s
Iteration   5: 1642269.269 ops/s
Iteration   6: 1649455.737 ops/s
Iteration   7: 1643503.819 ops/s
Iteration   8: 1644442.230 ops/s
Iteration   9: 1646405.224 ops/s
Iteration  10: 1642587.008 ops/s
Iteration  11: 1639559.973 ops/s
Iteration  12: 1644024.175 ops/s
Iteration  13: 1648179.119 ops/s
Iteration  14: 1642473.074 ops/s
Iteration  15: 1641663.126 ops/s
Iteration  16: 1644739.159 ops/s
Iteration  17: 1647642.193 ops/s
Iteration  18: 1646047.583 ops/s
Iteration  19: 1639760.747 ops/s
Iteration  20: 1647652.070 ops/s
Iteration  21: 1634859.333 ops/s
Iteration  22: 1642436.019 ops/s
Iteration  23: 1644198.291 ops/s
Iteration  24: 1642955.223 ops/s
Iteration  25: 1647125.073 ops/s
Iteration  26: 1644094.785 ops/s
Iteration  27: 1647007.882 ops/s
Iteration  28: 1644623.249 ops/s
Iteration  29: 1645733.245 ops/s
Iteration  30: 1640560.411 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1643827.956 ±(99.9%) 2106.527 ops/s [Average]
  (min, avg, max) = (1634859.333, 1643827.956, 1649455.737), stdev = 3152.950
  CI (99.9%): [1641721.430, 1645934.483] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1643827.956 ± 2106.527  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6498162.825 ops/s
# Warmup Iteration   2: 13070962.819 ops/s
# Warmup Iteration   3: 11136473.089 ops/s
# Warmup Iteration   4: 13177560.897 ops/s
# Warmup Iteration   5: 13103988.792 ops/s
# Warmup Iteration   6: 13112204.769 ops/s
# Warmup Iteration   7: 13123202.871 ops/s
# Warmup Iteration   8: 13094792.626 ops/s
# Warmup Iteration   9: 13197446.629 ops/s
# Warmup Iteration  10: 13151311.630 ops/s
# Warmup Iteration  11: 13049378.238 ops/s
# Warmup Iteration  12: 13168831.164 ops/s
# Warmup Iteration  13: 13073466.722 ops/s
# Warmup Iteration  14: 13128877.903 ops/s
# Warmup Iteration  15: 13025116.253 ops/s
# Warmup Iteration  16: 13103921.227 ops/s
# Warmup Iteration  17: 13135063.998 ops/s
# Warmup Iteration  18: 13143917.334 ops/s
# Warmup Iteration  19: 13126848.011 ops/s
# Warmup Iteration  20: 13123377.590 ops/s
# Warmup Iteration  21: 13121344.502 ops/s
# Warmup Iteration  22: 13141550.896 ops/s
# Warmup Iteration  23: 13145068.127 ops/s
# Warmup Iteration  24: 13124613.052 ops/s
# Warmup Iteration  25: 13166724.585 ops/s
# Warmup Iteration  26: 13088326.653 ops/s
# Warmup Iteration  27: 13095021.241 ops/s
# Warmup Iteration  28: 13103112.305 ops/s
# Warmup Iteration  29: 13158564.327 ops/s
# Warmup Iteration  30: 13130274.175 ops/s
Iteration   1: 12993776.998 ops/s
Iteration   2: 13259222.271 ops/s
Iteration   3: 13113177.796 ops/s
Iteration   4: 13076942.312 ops/s
Iteration   5: 13119752.951 ops/s
Iteration   6: 13149379.429 ops/s
Iteration   7: 13153333.711 ops/s
Iteration   8: 13147495.222 ops/s
Iteration   9: 13144434.840 ops/s
Iteration  10: 13145339.600 ops/s
Iteration  11: 13065778.232 ops/s
Iteration  12: 13156044.384 ops/s
Iteration  13: 13138225.533 ops/s
Iteration  14: 13103634.527 ops/s
Iteration  15: 13085327.128 ops/s
Iteration  16: 13118263.269 ops/s
Iteration  17: 13162645.014 ops/s
Iteration  18: 13146520.030 ops/s
Iteration  19: 13130050.662 ops/s
Iteration  20: 13174279.454 ops/s
Iteration  21: 13131702.216 ops/s
Iteration  22: 13152610.538 ops/s
Iteration  23: 13156651.424 ops/s
Iteration  24: 13159102.327 ops/s
Iteration  25: 13234145.330 ops/s
Iteration  26: 13173283.823 ops/s
Iteration  27: 13090984.665 ops/s
Iteration  28: 13118743.540 ops/s
Iteration  29: 13187290.786 ops/s
Iteration  30: 13144270.376 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_toStringOfItemToCount":
  13137746.946 ±(99.9%) 32648.706 ops/s [Average]
  (min, avg, max) = (12993776.998, 13137746.946, 13259222.271), stdev = 48867.050
  CI (99.9%): [13105098.241, 13170395.652] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  13137746.946 ± 32648.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 69402.856 ops/s
# Warmup Iteration   2: 102068.336 ops/s
# Warmup Iteration   3: 142868.693 ops/s
# Warmup Iteration   4: 141777.295 ops/s
# Warmup Iteration   5: 142485.982 ops/s
# Warmup Iteration   6: 142845.869 ops/s
# Warmup Iteration   7: 142912.721 ops/s
# Warmup Iteration   8: 142583.816 ops/s
# Warmup Iteration   9: 117737.035 ops/s
# Warmup Iteration  10: 143111.936 ops/s
# Warmup Iteration  11: 142994.398 ops/s
# Warmup Iteration  12: 142549.565 ops/s
# Warmup Iteration  13: 142774.609 ops/s
# Warmup Iteration  14: 142753.224 ops/s
# Warmup Iteration  15: 142412.868 ops/s
# Warmup Iteration  16: 142848.511 ops/s
# Warmup Iteration  17: 142652.884 ops/s
# Warmup Iteration  18: 142802.329 ops/s
# Warmup Iteration  19: 142718.358 ops/s
# Warmup Iteration  20: 142755.853 ops/s
# Warmup Iteration  21: 142778.102 ops/s
# Warmup Iteration  22: 142820.826 ops/s
# Warmup Iteration  23: 142820.795 ops/s
# Warmup Iteration  24: 142975.058 ops/s
# Warmup Iteration  25: 143191.149 ops/s
# Warmup Iteration  26: 142706.676 ops/s
# Warmup Iteration  27: 142510.123 ops/s
# Warmup Iteration  28: 143130.223 ops/s
# Warmup Iteration  29: 142976.688 ops/s
# Warmup Iteration  30: 143350.068 ops/s
Iteration   1: 142990.522 ops/s
Iteration   2: 143058.077 ops/s
Iteration   3: 143040.758 ops/s
Iteration   4: 143300.574 ops/s
Iteration   5: 142834.753 ops/s
Iteration   6: 142737.969 ops/s
Iteration   7: 143232.339 ops/s
Iteration   8: 142974.245 ops/s
Iteration   9: 143493.265 ops/s
Iteration  10: 142955.350 ops/s
Iteration  11: 142112.156 ops/s
Iteration  12: 142375.167 ops/s
Iteration  13: 142710.090 ops/s
Iteration  14: 142499.439 ops/s
Iteration  15: 142403.120 ops/s
Iteration  16: 142922.797 ops/s
Iteration  17: 142937.649 ops/s
Iteration  18: 142659.981 ops/s
Iteration  19: 142733.307 ops/s
Iteration  20: 142922.055 ops/s
Iteration  21: 142834.545 ops/s
Iteration  22: 142559.429 ops/s
Iteration  23: 142891.277 ops/s
Iteration  24: 142954.790 ops/s
Iteration  25: 143083.184 ops/s
Iteration  26: 142650.524 ops/s
Iteration  27: 142548.266 ops/s
Iteration  28: 142779.309 ops/s
Iteration  29: 142795.989 ops/s
Iteration  30: 142622.518 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zip":
  142820.448 ±(99.9%) 192.110 ops/s [Average]
  (min, avg, max) = (142112.156, 142820.448, 143493.265), stdev = 287.541
  CI (99.9%): [142628.338, 143012.558] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_zip  thrpt   30  142820.448 ± 192.110  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 147787.187 ops/s
# Warmup Iteration   2: 224360.853 ops/s
# Warmup Iteration   3: 293826.697 ops/s
# Warmup Iteration   4: 292084.712 ops/s
# Warmup Iteration   5: 293589.006 ops/s
# Warmup Iteration   6: 293614.854 ops/s
# Warmup Iteration   7: 292836.393 ops/s
# Warmup Iteration   8: 242332.495 ops/s
# Warmup Iteration   9: 294587.953 ops/s
# Warmup Iteration  10: 294797.232 ops/s
# Warmup Iteration  11: 294187.634 ops/s
# Warmup Iteration  12: 294612.241 ops/s
# Warmup Iteration  13: 293948.662 ops/s
# Warmup Iteration  14: 294312.037 ops/s
# Warmup Iteration  15: 294063.603 ops/s
# Warmup Iteration  16: 294110.815 ops/s
# Warmup Iteration  17: 294337.217 ops/s
# Warmup Iteration  18: 295565.449 ops/s
# Warmup Iteration  19: 293720.353 ops/s
# Warmup Iteration  20: 293618.200 ops/s
# Warmup Iteration  21: 294749.363 ops/s
# Warmup Iteration  22: 293660.822 ops/s
# Warmup Iteration  23: 293688.754 ops/s
# Warmup Iteration  24: 293434.140 ops/s
# Warmup Iteration  25: 294746.864 ops/s
# Warmup Iteration  26: 294329.984 ops/s
# Warmup Iteration  27: 292908.767 ops/s
# Warmup Iteration  28: 293815.013 ops/s
# Warmup Iteration  29: 294646.508 ops/s
# Warmup Iteration  30: 294411.875 ops/s
Iteration   1: 294004.940 ops/s
Iteration   2: 293898.546 ops/s
Iteration   3: 294384.545 ops/s
Iteration   4: 294740.672 ops/s
Iteration   5: 294326.679 ops/s
Iteration   6: 294671.385 ops/s
Iteration   7: 292847.654 ops/s
Iteration   8: 294177.506 ops/s
Iteration   9: 293722.162 ops/s
Iteration  10: 292566.222 ops/s
Iteration  11: 294379.511 ops/s
Iteration  12: 293363.596 ops/s
Iteration  13: 293832.266 ops/s
Iteration  14: 295175.340 ops/s
Iteration  15: 294183.684 ops/s
Iteration  16: 295669.331 ops/s
Iteration  17: 294074.575 ops/s
Iteration  18: 294651.483 ops/s
Iteration  19: 293782.112 ops/s
Iteration  20: 292510.945 ops/s
Iteration  21: 294179.800 ops/s
Iteration  22: 294012.942 ops/s
Iteration  23: 293646.649 ops/s
Iteration  24: 294155.479 ops/s
Iteration  25: 294275.644 ops/s
Iteration  26: 294951.417 ops/s
Iteration  27: 295123.114 ops/s
Iteration  28: 292925.762 ops/s
Iteration  29: 294887.381 ops/s
Iteration  30: 294149.257 ops/s


Result "org.eclipse.collections.impl.bag.immutable.ImmutableSingletonBagTest._Benchmark.benchmark_zipWithIndex":
  294109.020 ±(99.9%) 500.302 ops/s [Average]
  (min, avg, max) = (292510.945, 294109.020, 295669.331), stdev = 748.828
  CI (99.9%): [293608.718, 294609.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
ImmutableSingletonBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  294109.020 ± 500.302  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11637814.535 ops/s
# Warmup Iteration   2: 18781337.176 ops/s
# Warmup Iteration   3: 21710538.278 ops/s
# Warmup Iteration   4: 21562456.610 ops/s
# Warmup Iteration   5: 21649402.604 ops/s
# Warmup Iteration   6: 21552898.778 ops/s
# Warmup Iteration   7: 21758055.361 ops/s
# Warmup Iteration   8: 21656984.310 ops/s
# Warmup Iteration   9: 21756253.156 ops/s
# Warmup Iteration  10: 21738402.638 ops/s
# Warmup Iteration  11: 21704126.603 ops/s
# Warmup Iteration  12: 21676151.570 ops/s
# Warmup Iteration  13: 21690679.735 ops/s
# Warmup Iteration  14: 21733683.624 ops/s
# Warmup Iteration  15: 21653080.250 ops/s
# Warmup Iteration  16: 21686983.733 ops/s
# Warmup Iteration  17: 21707701.094 ops/s
# Warmup Iteration  18: 21698415.372 ops/s
# Warmup Iteration  19: 21701341.979 ops/s
# Warmup Iteration  20: 21658667.741 ops/s
# Warmup Iteration  21: 21720556.657 ops/s
# Warmup Iteration  22: 21752830.813 ops/s
# Warmup Iteration  23: 21736415.395 ops/s
# Warmup Iteration  24: 21579412.023 ops/s
# Warmup Iteration  25: 21688570.221 ops/s
# Warmup Iteration  26: 21664908.424 ops/s
# Warmup Iteration  27: 21714016.607 ops/s
# Warmup Iteration  28: 21737336.930 ops/s
# Warmup Iteration  29: 21662109.479 ops/s
# Warmup Iteration  30: 21718439.492 ops/s
Iteration   1: 21804747.979 ops/s
Iteration   2: 21662389.388 ops/s
Iteration   3: 21755695.029 ops/s
Iteration   4: 21731375.951 ops/s
Iteration   5: 21595525.923 ops/s
Iteration   6: 21679345.478 ops/s
Iteration   7: 21716056.378 ops/s
Iteration   8: 21591001.037 ops/s
Iteration   9: 21689048.770 ops/s
Iteration  10: 21583415.902 ops/s
Iteration  11: 21695806.341 ops/s
Iteration  12: 21564477.795 ops/s
Iteration  13: 21632364.965 ops/s
Iteration  14: 21626014.410 ops/s
Iteration  15: 21656757.623 ops/s
Iteration  16: 21686511.575 ops/s
Iteration  17: 21752869.142 ops/s
Iteration  18: 21703500.315 ops/s
Iteration  19: 21646776.286 ops/s
Iteration  20: 21693992.871 ops/s
Iteration  21: 21689895.868 ops/s
Iteration  22: 21607218.222 ops/s
Iteration  23: 21780442.678 ops/s
Iteration  24: 21625780.071 ops/s
Iteration  25: 21687624.001 ops/s
Iteration  26: 21633848.512 ops/s
Iteration  27: 21751118.106 ops/s
Iteration  28: 21487184.162 ops/s
Iteration  29: 21709045.321 ops/s
Iteration  30: 21648810.695 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_allSatisfy":
  21669621.360 ±(99.9%) 46082.342 ops/s [Average]
  (min, avg, max) = (21487184.162, 21669621.360, 21804747.979), stdev = 68973.885
  CI (99.9%): [21623539.018, 21715703.701] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  21669621.360 ± 46082.342  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9166332.474 ops/s
# Warmup Iteration   2: 18284849.896 ops/s
# Warmup Iteration   3: 14940430.835 ops/s
# Warmup Iteration   4: 17537515.272 ops/s
# Warmup Iteration   5: 17566149.709 ops/s
# Warmup Iteration   6: 17536713.482 ops/s
# Warmup Iteration   7: 17525826.208 ops/s
# Warmup Iteration   8: 17553380.918 ops/s
# Warmup Iteration   9: 17556274.201 ops/s
# Warmup Iteration  10: 17542981.184 ops/s
# Warmup Iteration  11: 17533550.724 ops/s
# Warmup Iteration  12: 17533430.825 ops/s
# Warmup Iteration  13: 17534131.972 ops/s
# Warmup Iteration  14: 17592086.639 ops/s
# Warmup Iteration  15: 17534663.605 ops/s
# Warmup Iteration  16: 17537966.714 ops/s
# Warmup Iteration  17: 17522563.640 ops/s
# Warmup Iteration  18: 17526246.933 ops/s
# Warmup Iteration  19: 17399392.461 ops/s
# Warmup Iteration  20: 17531621.567 ops/s
# Warmup Iteration  21: 17553138.077 ops/s
# Warmup Iteration  22: 17518239.585 ops/s
# Warmup Iteration  23: 17556348.732 ops/s
# Warmup Iteration  24: 17559000.914 ops/s
# Warmup Iteration  25: 17469849.300 ops/s
# Warmup Iteration  26: 17589207.498 ops/s
# Warmup Iteration  27: 17561731.237 ops/s
# Warmup Iteration  28: 17614822.652 ops/s
# Warmup Iteration  29: 17537725.033 ops/s
# Warmup Iteration  30: 17540888.840 ops/s
Iteration   1: 17559136.214 ops/s
Iteration   2: 17521561.192 ops/s
Iteration   3: 17540695.443 ops/s
Iteration   4: 17542476.789 ops/s
Iteration   5: 17580092.403 ops/s
Iteration   6: 17504663.677 ops/s
Iteration   7: 17574316.584 ops/s
Iteration   8: 17541184.997 ops/s
Iteration   9: 17602907.006 ops/s
Iteration  10: 17616375.325 ops/s
Iteration  11: 17642121.649 ops/s
Iteration  12: 17575242.888 ops/s
Iteration  13: 17577328.316 ops/s
Iteration  14: 17560464.269 ops/s
Iteration  15: 17570039.544 ops/s
Iteration  16: 17591857.327 ops/s
Iteration  17: 17510433.672 ops/s
Iteration  18: 17614619.324 ops/s
Iteration  19: 17561831.494 ops/s
Iteration  20: 17556946.259 ops/s
Iteration  21: 17528619.476 ops/s
Iteration  22: 17542373.579 ops/s
Iteration  23: 17509232.759 ops/s
Iteration  24: 17595057.818 ops/s
Iteration  25: 17546235.761 ops/s
Iteration  26: 17568954.214 ops/s
Iteration  27: 17485645.589 ops/s
Iteration  28: 17612462.913 ops/s
Iteration  29: 17553703.771 ops/s
Iteration  30: 17632380.713 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_anySatisfy":
  17563965.365 ±(99.9%) 25877.829 ops/s [Average]
  (min, avg, max) = (17485645.589, 17563965.365, 17642121.649), stdev = 38732.719
  CI (99.9%): [17538087.536, 17589843.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  17563965.365 ± 25877.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 906122.161 ops/s
# Warmup Iteration   2: 2025984.192 ops/s
# Warmup Iteration   3: 2030171.711 ops/s
# Warmup Iteration   4: 1686912.398 ops/s
# Warmup Iteration   5: 2042298.597 ops/s
# Warmup Iteration   6: 2037788.897 ops/s
# Warmup Iteration   7: 2032306.166 ops/s
# Warmup Iteration   8: 2034085.120 ops/s
# Warmup Iteration   9: 2030387.260 ops/s
# Warmup Iteration  10: 2033733.604 ops/s
# Warmup Iteration  11: 2030563.048 ops/s
# Warmup Iteration  12: 2025443.909 ops/s
# Warmup Iteration  13: 2027566.633 ops/s
# Warmup Iteration  14: 2033435.091 ops/s
# Warmup Iteration  15: 2023937.265 ops/s
# Warmup Iteration  16: 2033996.961 ops/s
# Warmup Iteration  17: 2032463.943 ops/s
# Warmup Iteration  18: 2031940.156 ops/s
# Warmup Iteration  19: 2025363.518 ops/s
# Warmup Iteration  20: 2034806.922 ops/s
# Warmup Iteration  21: 2021901.829 ops/s
# Warmup Iteration  22: 2049323.758 ops/s
# Warmup Iteration  23: 2030825.754 ops/s
# Warmup Iteration  24: 2031527.980 ops/s
# Warmup Iteration  25: 2034285.970 ops/s
# Warmup Iteration  26: 2026535.796 ops/s
# Warmup Iteration  27: 2020646.558 ops/s
# Warmup Iteration  28: 2031280.765 ops/s
# Warmup Iteration  29: 2031269.938 ops/s
# Warmup Iteration  30: 2035813.029 ops/s
Iteration   1: 2034538.785 ops/s
Iteration   2: 2020025.411 ops/s
Iteration   3: 2015544.154 ops/s
Iteration   4: 2052498.537 ops/s
Iteration   5: 2021393.886 ops/s
Iteration   6: 2037983.043 ops/s
Iteration   7: 2028929.636 ops/s
Iteration   8: 2032732.422 ops/s
Iteration   9: 2017445.675 ops/s
Iteration  10: 2040002.065 ops/s
Iteration  11: 2037065.817 ops/s
Iteration  12: 2029593.645 ops/s
Iteration  13: 2019958.847 ops/s
Iteration  14: 2032092.625 ops/s
Iteration  15: 2021164.872 ops/s
Iteration  16: 2018253.317 ops/s
Iteration  17: 2034907.449 ops/s
Iteration  18: 2016969.322 ops/s
Iteration  19: 2018000.986 ops/s
Iteration  20: 2035644.881 ops/s
Iteration  21: 2029288.935 ops/s
Iteration  22: 2038779.092 ops/s
Iteration  23: 2048030.250 ops/s
Iteration  24: 2034032.171 ops/s
Iteration  25: 2057630.475 ops/s
Iteration  26: 2028262.002 ops/s
Iteration  27: 2025711.348 ops/s
Iteration  28: 2036840.089 ops/s
Iteration  29: 2030427.479 ops/s
Iteration  30: 2026665.141 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_appendString":
  2030680.412 ±(99.9%) 7049.225 ops/s [Average]
  (min, avg, max) = (2015544.154, 2030680.412, 2057630.475), stdev = 10550.949
  CI (99.9%): [2023631.187, 2037729.637] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_appendString  thrpt   30  2030680.412 ± 7049.225  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32149887.877 ops/s
# Warmup Iteration   2: 60536919.229 ops/s
# Warmup Iteration   3: 52510169.966 ops/s
# Warmup Iteration   4: 61898750.801 ops/s
# Warmup Iteration   5: 61560658.978 ops/s
# Warmup Iteration   6: 61707859.808 ops/s
# Warmup Iteration   7: 62081080.295 ops/s
# Warmup Iteration   8: 61697383.862 ops/s
# Warmup Iteration   9: 61651291.358 ops/s
# Warmup Iteration  10: 61987478.679 ops/s
# Warmup Iteration  11: 61885845.602 ops/s
# Warmup Iteration  12: 61940178.504 ops/s
# Warmup Iteration  13: 61781363.196 ops/s
# Warmup Iteration  14: 61961712.801 ops/s
# Warmup Iteration  15: 61826610.679 ops/s
# Warmup Iteration  16: 61874249.600 ops/s
# Warmup Iteration  17: 62056577.844 ops/s
# Warmup Iteration  18: 61592964.009 ops/s
# Warmup Iteration  19: 61765842.773 ops/s
# Warmup Iteration  20: 61881215.724 ops/s
# Warmup Iteration  21: 61711250.560 ops/s
# Warmup Iteration  22: 61696905.850 ops/s
# Warmup Iteration  23: 61947812.571 ops/s
# Warmup Iteration  24: 61959902.960 ops/s
# Warmup Iteration  25: 61891098.507 ops/s
# Warmup Iteration  26: 61857099.379 ops/s
# Warmup Iteration  27: 61883715.253 ops/s
# Warmup Iteration  28: 61845858.493 ops/s
# Warmup Iteration  29: 61966320.828 ops/s
# Warmup Iteration  30: 62016409.360 ops/s
Iteration   1: 61887556.048 ops/s
Iteration   2: 61949457.408 ops/s
Iteration   3: 61607365.563 ops/s
Iteration   4: 61876058.998 ops/s
Iteration   5: 62177327.808 ops/s
Iteration   6: 62022179.218 ops/s
Iteration   7: 61942929.502 ops/s
Iteration   8: 61980666.540 ops/s
Iteration   9: 61672651.688 ops/s
Iteration  10: 61898521.370 ops/s
Iteration  11: 62131421.907 ops/s
Iteration  12: 62097975.698 ops/s
Iteration  13: 62104306.292 ops/s
Iteration  14: 61778047.368 ops/s
Iteration  15: 61869397.219 ops/s
Iteration  16: 62068127.858 ops/s
Iteration  17: 61758274.768 ops/s
Iteration  18: 61919157.631 ops/s
Iteration  19: 61868595.521 ops/s
Iteration  20: 61700897.940 ops/s
Iteration  21: 62055660.854 ops/s
Iteration  22: 61925547.361 ops/s
Iteration  23: 61875237.065 ops/s
Iteration  24: 62021809.373 ops/s
Iteration  25: 61964688.187 ops/s
Iteration  26: 61931152.791 ops/s
Iteration  27: 61857464.704 ops/s
Iteration  28: 61900255.550 ops/s
Iteration  29: 61965853.173 ops/s
Iteration  30: 61861642.616 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_asLazy":
  61922340.934 ±(99.9%) 89332.966 ops/s [Average]
  (min, avg, max) = (61607365.563, 61922340.934, 62177327.808), stdev = 133709.388
  CI (99.9%): [61833007.968, 62011673.900] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_asLazy  thrpt   30  61922340.934 ± 89332.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 58151852.168 ops/s
# Warmup Iteration   2: 109147942.504 ops/s
# Warmup Iteration   3: 95361724.261 ops/s
# Warmup Iteration   4: 111281546.559 ops/s
# Warmup Iteration   5: 111417718.857 ops/s
# Warmup Iteration   6: 111412397.862 ops/s
# Warmup Iteration   7: 111460276.183 ops/s
# Warmup Iteration   8: 111556449.199 ops/s
# Warmup Iteration   9: 111504054.136 ops/s
# Warmup Iteration  10: 111653436.653 ops/s
# Warmup Iteration  11: 111788760.768 ops/s
# Warmup Iteration  12: 111509405.897 ops/s
# Warmup Iteration  13: 111900874.350 ops/s
# Warmup Iteration  14: 111863715.115 ops/s
# Warmup Iteration  15: 111389828.204 ops/s
# Warmup Iteration  16: 111520301.864 ops/s
# Warmup Iteration  17: 111257343.709 ops/s
# Warmup Iteration  18: 111499981.077 ops/s
# Warmup Iteration  19: 111598917.213 ops/s
# Warmup Iteration  20: 111772485.666 ops/s
# Warmup Iteration  21: 111719440.687 ops/s
# Warmup Iteration  22: 111409669.475 ops/s
# Warmup Iteration  23: 111791332.002 ops/s
# Warmup Iteration  24: 111538452.218 ops/s
# Warmup Iteration  25: 111525945.047 ops/s
# Warmup Iteration  26: 111421653.293 ops/s
# Warmup Iteration  27: 111737541.964 ops/s
# Warmup Iteration  28: 111563479.254 ops/s
# Warmup Iteration  29: 111320895.952 ops/s
# Warmup Iteration  30: 111569187.463 ops/s
Iteration   1: 112039964.354 ops/s
Iteration   2: 110812743.852 ops/s
Iteration   3: 111793936.769 ops/s
Iteration   4: 111128129.736 ops/s
Iteration   5: 111372131.305 ops/s
Iteration   6: 111210687.858 ops/s
Iteration   7: 111673196.334 ops/s
Iteration   8: 111743547.680 ops/s
Iteration   9: 110499178.940 ops/s
Iteration  10: 112116265.478 ops/s
Iteration  11: 111386505.864 ops/s
Iteration  12: 111391904.048 ops/s
Iteration  13: 111278233.910 ops/s
Iteration  14: 111548908.649 ops/s
Iteration  15: 111244179.934 ops/s
Iteration  16: 110959398.817 ops/s
Iteration  17: 111377872.943 ops/s
Iteration  18: 111594793.001 ops/s
Iteration  19: 112089881.944 ops/s
Iteration  20: 112017272.152 ops/s
Iteration  21: 111658818.153 ops/s
Iteration  22: 112031442.081 ops/s
Iteration  23: 111457594.489 ops/s
Iteration  24: 111532210.900 ops/s
Iteration  25: 112127514.459 ops/s
Iteration  26: 111344628.738 ops/s
Iteration  27: 111668828.410 ops/s
Iteration  28: 112160759.347 ops/s
Iteration  29: 111778096.378 ops/s
Iteration  30: 112097381.587 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_booleanIterator":
  111571200.270 ±(99.9%) 280405.777 ops/s [Average]
  (min, avg, max) = (110499178.940, 111571200.270, 112160759.347), stdev = 419698.198
  CI (99.9%): [111290794.494, 111851606.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  111571200.270 ± 280405.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 295549.171 ops/s
# Warmup Iteration   2: 645172.353 ops/s
# Warmup Iteration   3: 716761.506 ops/s
# Warmup Iteration   4: 721940.481 ops/s
# Warmup Iteration   5: 592723.755 ops/s
# Warmup Iteration   6: 724120.442 ops/s
# Warmup Iteration   7: 721509.975 ops/s
# Warmup Iteration   8: 722570.052 ops/s
# Warmup Iteration   9: 721576.903 ops/s
# Warmup Iteration  10: 722003.431 ops/s
# Warmup Iteration  11: 722859.216 ops/s
# Warmup Iteration  12: 723697.898 ops/s
# Warmup Iteration  13: 721230.563 ops/s
# Warmup Iteration  14: 721748.106 ops/s
# Warmup Iteration  15: 722152.253 ops/s
# Warmup Iteration  16: 723810.631 ops/s
# Warmup Iteration  17: 721927.103 ops/s
# Warmup Iteration  18: 718979.731 ops/s
# Warmup Iteration  19: 724114.070 ops/s
# Warmup Iteration  20: 721496.583 ops/s
# Warmup Iteration  21: 722070.705 ops/s
# Warmup Iteration  22: 724077.485 ops/s
# Warmup Iteration  23: 722469.482 ops/s
# Warmup Iteration  24: 721046.282 ops/s
# Warmup Iteration  25: 721616.531 ops/s
# Warmup Iteration  26: 721615.564 ops/s
# Warmup Iteration  27: 720688.411 ops/s
# Warmup Iteration  28: 722941.321 ops/s
# Warmup Iteration  29: 720107.485 ops/s
# Warmup Iteration  30: 721423.879 ops/s
Iteration   1: 720428.308 ops/s
Iteration   2: 721815.733 ops/s
Iteration   3: 722447.089 ops/s
Iteration   4: 720583.983 ops/s
Iteration   5: 719858.071 ops/s
Iteration   6: 721758.121 ops/s
Iteration   7: 722787.846 ops/s
Iteration   8: 721675.015 ops/s
Iteration   9: 721853.782 ops/s
Iteration  10: 721634.887 ops/s
Iteration  11: 721074.656 ops/s
Iteration  12: 721351.650 ops/s
Iteration  13: 722586.141 ops/s
Iteration  14: 723966.582 ops/s
Iteration  15: 720940.796 ops/s
Iteration  16: 723043.415 ops/s
Iteration  17: 722918.771 ops/s
Iteration  18: 724346.572 ops/s
Iteration  19: 722644.478 ops/s
Iteration  20: 723079.135 ops/s
Iteration  21: 722119.742 ops/s
Iteration  22: 721317.447 ops/s
Iteration  23: 724963.204 ops/s
Iteration  24: 721018.130 ops/s
Iteration  25: 723323.168 ops/s
Iteration  26: 720848.103 ops/s
Iteration  27: 723151.623 ops/s
Iteration  28: 723627.426 ops/s
Iteration  29: 723967.378 ops/s
Iteration  30: 721417.390 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_collect":
  722218.288 ±(99.9%) 840.748 ops/s [Average]
  (min, avg, max) = (719858.071, 722218.288, 724963.204), stdev = 1258.392
  CI (99.9%): [721377.540, 723059.036] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_collect  thrpt   30  722218.288 ± 840.748  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23419636.369 ops/s
# Warmup Iteration   2: 43404620.193 ops/s
# Warmup Iteration   3: 39186853.885 ops/s
# Warmup Iteration   4: 44912095.255 ops/s
# Warmup Iteration   5: 45083718.539 ops/s
# Warmup Iteration   6: 44901552.355 ops/s
# Warmup Iteration   7: 44862347.461 ops/s
# Warmup Iteration   8: 44892776.077 ops/s
# Warmup Iteration   9: 44934600.018 ops/s
# Warmup Iteration  10: 44955928.608 ops/s
# Warmup Iteration  11: 44952689.087 ops/s
# Warmup Iteration  12: 44957371.347 ops/s
# Warmup Iteration  13: 45092394.465 ops/s
# Warmup Iteration  14: 44884860.436 ops/s
# Warmup Iteration  15: 44919330.313 ops/s
# Warmup Iteration  16: 45221665.956 ops/s
# Warmup Iteration  17: 44890448.450 ops/s
# Warmup Iteration  18: 44904763.978 ops/s
# Warmup Iteration  19: 44839301.916 ops/s
# Warmup Iteration  20: 44986154.591 ops/s
# Warmup Iteration  21: 44809002.192 ops/s
# Warmup Iteration  22: 45069579.147 ops/s
# Warmup Iteration  23: 44898997.383 ops/s
# Warmup Iteration  24: 44951369.037 ops/s
# Warmup Iteration  25: 44954685.997 ops/s
# Warmup Iteration  26: 45017405.508 ops/s
# Warmup Iteration  27: 45030587.799 ops/s
# Warmup Iteration  28: 45160914.745 ops/s
# Warmup Iteration  29: 44900750.061 ops/s
# Warmup Iteration  30: 44962815.605 ops/s
Iteration   1: 44985507.370 ops/s
Iteration   2: 44606543.608 ops/s
Iteration   3: 44852329.327 ops/s
Iteration   4: 45003087.795 ops/s
Iteration   5: 44936243.195 ops/s
Iteration   6: 45034443.872 ops/s
Iteration   7: 45153615.852 ops/s
Iteration   8: 45033400.347 ops/s
Iteration   9: 44903829.309 ops/s
Iteration  10: 44971837.047 ops/s
Iteration  11: 44962539.200 ops/s
Iteration  12: 44726486.620 ops/s
Iteration  13: 45016033.997 ops/s
Iteration  14: 44788553.427 ops/s
Iteration  15: 44961136.518 ops/s
Iteration  16: 44915528.700 ops/s
Iteration  17: 44860800.982 ops/s
Iteration  18: 45012918.272 ops/s
Iteration  19: 44823100.962 ops/s
Iteration  20: 44689399.934 ops/s
Iteration  21: 45087813.460 ops/s
Iteration  22: 44644937.115 ops/s
Iteration  23: 44735384.603 ops/s
Iteration  24: 44687551.897 ops/s
Iteration  25: 45068159.703 ops/s
Iteration  26: 44952963.139 ops/s
Iteration  27: 44904551.886 ops/s
Iteration  28: 44790350.187 ops/s
Iteration  29: 45008026.894 ops/s
Iteration  30: 45080102.749 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_contains":
  44906572.599 ±(99.9%) 96096.135 ops/s [Average]
  (min, avg, max) = (44606543.608, 44906572.599, 45153615.852), stdev = 143832.182
  CI (99.9%): [44810476.464, 45002668.734] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_contains  thrpt   30  44906572.599 ± 96096.135  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14765546.302 ops/s
# Warmup Iteration   2: 23578731.878 ops/s
# Warmup Iteration   3: 27703012.513 ops/s
# Warmup Iteration   4: 27631924.087 ops/s
# Warmup Iteration   5: 27710710.074 ops/s
# Warmup Iteration   6: 27753518.781 ops/s
# Warmup Iteration   7: 27724107.065 ops/s
# Warmup Iteration   8: 27908304.725 ops/s
# Warmup Iteration   9: 27800498.056 ops/s
# Warmup Iteration  10: 27771321.303 ops/s
# Warmup Iteration  11: 27847062.460 ops/s
# Warmup Iteration  12: 27827312.969 ops/s
# Warmup Iteration  13: 27594927.124 ops/s
# Warmup Iteration  14: 27799823.695 ops/s
# Warmup Iteration  15: 27824587.637 ops/s
# Warmup Iteration  16: 27777098.666 ops/s
# Warmup Iteration  17: 27711259.636 ops/s
# Warmup Iteration  18: 27865984.280 ops/s
# Warmup Iteration  19: 27861763.547 ops/s
# Warmup Iteration  20: 27834957.039 ops/s
# Warmup Iteration  21: 27775318.271 ops/s
# Warmup Iteration  22: 27909530.028 ops/s
# Warmup Iteration  23: 27732991.703 ops/s
# Warmup Iteration  24: 27857139.435 ops/s
# Warmup Iteration  25: 27839491.152 ops/s
# Warmup Iteration  26: 27835696.740 ops/s
# Warmup Iteration  27: 27805141.177 ops/s
# Warmup Iteration  28: 27757744.627 ops/s
# Warmup Iteration  29: 27845639.853 ops/s
# Warmup Iteration  30: 27834852.731 ops/s
Iteration   1: 27716287.967 ops/s
Iteration   2: 27856283.169 ops/s
Iteration   3: 27726097.705 ops/s
Iteration   4: 27884501.785 ops/s
Iteration   5: 27881439.746 ops/s
Iteration   6: 27858316.435 ops/s
Iteration   7: 27899684.625 ops/s
Iteration   8: 27789282.965 ops/s
Iteration   9: 27718907.594 ops/s
Iteration  10: 27775802.456 ops/s
Iteration  11: 27728084.780 ops/s
Iteration  12: 27827090.862 ops/s
Iteration  13: 27747942.193 ops/s
Iteration  14: 27919838.606 ops/s
Iteration  15: 27941695.020 ops/s
Iteration  16: 27866226.143 ops/s
Iteration  17: 27896888.325 ops/s
Iteration  18: 27862220.963 ops/s
Iteration  19: 27885350.395 ops/s
Iteration  20: 27735192.312 ops/s
Iteration  21: 27717746.704 ops/s
Iteration  22: 27662471.011 ops/s
Iteration  23: 27770589.608 ops/s
Iteration  24: 27866009.885 ops/s
Iteration  25: 27798674.219 ops/s
Iteration  26: 27936691.079 ops/s
Iteration  27: 27931179.048 ops/s
Iteration  28: 27849918.085 ops/s
Iteration  29: 27846839.104 ops/s
Iteration  30: 27701450.078 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllArray":
  27819956.762 ±(99.9%) 54285.408 ops/s [Average]
  (min, avg, max) = (27662471.011, 27819956.762, 27941695.020), stdev = 81251.850
  CI (99.9%): [27765671.354, 27874242.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  27819956.762 ± 54285.408  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1936522.288 ops/s
# Warmup Iteration   2: 4294826.828 ops/s
# Warmup Iteration   3: 3769533.356 ops/s
# Warmup Iteration   4: 4394520.421 ops/s
# Warmup Iteration   5: 4401309.405 ops/s
# Warmup Iteration   6: 4380553.329 ops/s
# Warmup Iteration   7: 4387055.703 ops/s
# Warmup Iteration   8: 4393553.586 ops/s
# Warmup Iteration   9: 4410756.421 ops/s
# Warmup Iteration  10: 4394730.431 ops/s
# Warmup Iteration  11: 4386932.127 ops/s
# Warmup Iteration  12: 4399632.209 ops/s
# Warmup Iteration  13: 4389886.879 ops/s
# Warmup Iteration  14: 4371524.767 ops/s
# Warmup Iteration  15: 4387695.363 ops/s
# Warmup Iteration  16: 4368339.128 ops/s
# Warmup Iteration  17: 4382489.204 ops/s
# Warmup Iteration  18: 4387054.451 ops/s
# Warmup Iteration  19: 4378074.524 ops/s
# Warmup Iteration  20: 4378060.556 ops/s
# Warmup Iteration  21: 4385810.908 ops/s
# Warmup Iteration  22: 4376766.747 ops/s
# Warmup Iteration  23: 4396473.901 ops/s
# Warmup Iteration  24: 4382725.847 ops/s
# Warmup Iteration  25: 4383093.160 ops/s
# Warmup Iteration  26: 4386711.676 ops/s
# Warmup Iteration  27: 4391789.411 ops/s
# Warmup Iteration  28: 4393353.533 ops/s
# Warmup Iteration  29: 4400496.962 ops/s
# Warmup Iteration  30: 4383403.691 ops/s
Iteration   1: 4372623.565 ops/s
Iteration   2: 4363847.917 ops/s
Iteration   3: 4376536.615 ops/s
Iteration   4: 4384346.020 ops/s
Iteration   5: 4356677.726 ops/s
Iteration   6: 4388959.959 ops/s
Iteration   7: 4362189.033 ops/s
Iteration   8: 4372019.673 ops/s
Iteration   9: 4360216.776 ops/s
Iteration  10: 4389756.011 ops/s
Iteration  11: 4374515.974 ops/s
Iteration  12: 4369110.274 ops/s
Iteration  13: 4374213.708 ops/s
Iteration  14: 4380724.399 ops/s
Iteration  15: 4382913.655 ops/s
Iteration  16: 4395629.578 ops/s
Iteration  17: 4350625.686 ops/s
Iteration  18: 4385340.706 ops/s
Iteration  19: 4379040.588 ops/s
Iteration  20: 4372755.070 ops/s
Iteration  21: 4385586.612 ops/s
Iteration  22: 4364918.780 ops/s
Iteration  23: 4371704.048 ops/s
Iteration  24: 4384687.236 ops/s
Iteration  25: 4380465.966 ops/s
Iteration  26: 4380031.977 ops/s
Iteration  27: 4391360.885 ops/s
Iteration  28: 4379804.285 ops/s
Iteration  29: 4394691.909 ops/s
Iteration  30: 4394927.007 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllIterable":
  4377340.721 ±(99.9%) 7771.070 ops/s [Average]
  (min, avg, max) = (4350625.686, 4377340.721, 4395629.578), stdev = 11631.372
  CI (99.9%): [4369569.652, 4385111.791] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4377340.721 ± 7771.070  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28775118.874 ops/s
# Warmup Iteration   2: 44020041.681 ops/s
# Warmup Iteration   3: 48968306.906 ops/s
# Warmup Iteration   4: 48982549.707 ops/s
# Warmup Iteration   5: 48904987.935 ops/s
# Warmup Iteration   6: 49016834.900 ops/s
# Warmup Iteration   7: 49062147.865 ops/s
# Warmup Iteration   8: 49256210.574 ops/s
# Warmup Iteration   9: 49054591.920 ops/s
# Warmup Iteration  10: 49179839.342 ops/s
# Warmup Iteration  11: 49154982.933 ops/s
# Warmup Iteration  12: 49139223.325 ops/s
# Warmup Iteration  13: 49177617.188 ops/s
# Warmup Iteration  14: 49224798.663 ops/s
# Warmup Iteration  15: 49153147.128 ops/s
# Warmup Iteration  16: 49185565.683 ops/s
# Warmup Iteration  17: 49135167.424 ops/s
# Warmup Iteration  18: 49120434.545 ops/s
# Warmup Iteration  19: 48939999.946 ops/s
# Warmup Iteration  20: 49181282.531 ops/s
# Warmup Iteration  21: 48825892.449 ops/s
# Warmup Iteration  22: 48946895.773 ops/s
# Warmup Iteration  23: 49024888.760 ops/s
# Warmup Iteration  24: 49064649.860 ops/s
# Warmup Iteration  25: 49090293.298 ops/s
# Warmup Iteration  26: 49085521.704 ops/s
# Warmup Iteration  27: 48984698.659 ops/s
# Warmup Iteration  28: 49069665.064 ops/s
# Warmup Iteration  29: 49050999.186 ops/s
# Warmup Iteration  30: 49194585.215 ops/s
Iteration   1: 48968859.068 ops/s
Iteration   2: 49006277.128 ops/s
Iteration   3: 49122147.565 ops/s
Iteration   4: 49190167.866 ops/s
Iteration   5: 49122525.739 ops/s
Iteration   6: 49153635.051 ops/s
Iteration   7: 49018315.507 ops/s
Iteration   8: 48857752.483 ops/s
Iteration   9: 49043900.189 ops/s
Iteration  10: 48973502.902 ops/s
Iteration  11: 48663692.584 ops/s
Iteration  12: 48836580.065 ops/s
Iteration  13: 49067689.501 ops/s
Iteration  14: 49095759.273 ops/s
Iteration  15: 49259864.029 ops/s
Iteration  16: 48838331.207 ops/s
Iteration  17: 49060969.878 ops/s
Iteration  18: 49161616.034 ops/s
Iteration  19: 49163517.886 ops/s
Iteration  20: 49270439.405 ops/s
Iteration  21: 48900992.270 ops/s
Iteration  22: 48934428.790 ops/s
Iteration  23: 48922475.617 ops/s
Iteration  24: 48990568.383 ops/s
Iteration  25: 49126393.861 ops/s
Iteration  26: 49190440.414 ops/s
Iteration  27: 48810541.180 ops/s
Iteration  28: 49149462.338 ops/s
Iteration  29: 48955702.786 ops/s
Iteration  30: 48600437.963 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyArray":
  49015232.899 ±(99.9%) 109302.728 ops/s [Average]
  (min, avg, max) = (48600437.963, 49015232.899, 49270439.405), stdev = 163599.191
  CI (99.9%): [48905930.170, 49124535.627] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  49015232.899 ± 109302.728  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 853530.223 ops/s
# Warmup Iteration   2: 1226689.089 ops/s
# Warmup Iteration   3: 1435717.886 ops/s
# Warmup Iteration   4: 1435125.197 ops/s
# Warmup Iteration   5: 1431909.996 ops/s
# Warmup Iteration   6: 1431043.582 ops/s
# Warmup Iteration   7: 1197351.418 ops/s
# Warmup Iteration   8: 1434290.889 ops/s
# Warmup Iteration   9: 1435686.016 ops/s
# Warmup Iteration  10: 1436543.176 ops/s
# Warmup Iteration  11: 1434449.115 ops/s
# Warmup Iteration  12: 1433622.528 ops/s
# Warmup Iteration  13: 1434881.797 ops/s
# Warmup Iteration  14: 1432922.305 ops/s
# Warmup Iteration  15: 1432627.828 ops/s
# Warmup Iteration  16: 1432009.994 ops/s
# Warmup Iteration  17: 1431949.989 ops/s
# Warmup Iteration  18: 1432878.341 ops/s
# Warmup Iteration  19: 1433149.001 ops/s
# Warmup Iteration  20: 1432313.986 ops/s
# Warmup Iteration  21: 1436554.822 ops/s
# Warmup Iteration  22: 1435724.840 ops/s
# Warmup Iteration  23: 1436929.456 ops/s
# Warmup Iteration  24: 1432303.915 ops/s
# Warmup Iteration  25: 1434093.774 ops/s
# Warmup Iteration  26: 1434711.188 ops/s
# Warmup Iteration  27: 1434448.121 ops/s
# Warmup Iteration  28: 1433339.892 ops/s
# Warmup Iteration  29: 1434132.501 ops/s
# Warmup Iteration  30: 1435556.115 ops/s
Iteration   1: 1432737.561 ops/s
Iteration   2: 1437236.497 ops/s
Iteration   3: 1437389.025 ops/s
Iteration   4: 1435588.359 ops/s
Iteration   5: 1434060.340 ops/s
Iteration   6: 1432628.308 ops/s
Iteration   7: 1433101.100 ops/s
Iteration   8: 1434197.348 ops/s
Iteration   9: 1437731.641 ops/s
Iteration  10: 1430184.720 ops/s
Iteration  11: 1437839.184 ops/s
Iteration  12: 1431934.692 ops/s
Iteration  13: 1437706.520 ops/s
Iteration  14: 1436471.518 ops/s
Iteration  15: 1439485.672 ops/s
Iteration  16: 1437639.921 ops/s
Iteration  17: 1434786.088 ops/s
Iteration  18: 1438164.747 ops/s
Iteration  19: 1436209.282 ops/s
Iteration  20: 1434550.170 ops/s
Iteration  21: 1433906.403 ops/s
Iteration  22: 1435446.379 ops/s
Iteration  23: 1435093.542 ops/s
Iteration  24: 1430030.946 ops/s
Iteration  25: 1437330.045 ops/s
Iteration  26: 1427814.704 ops/s
Iteration  27: 1436700.638 ops/s
Iteration  28: 1434568.605 ops/s
Iteration  29: 1434683.468 ops/s
Iteration  30: 1431719.281 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyIterable":
  1434897.890 ±(99.9%) 1840.719 ops/s [Average]
  (min, avg, max) = (1427814.704, 1434897.890, 1439485.672), stdev = 2755.102
  CI (99.9%): [1433057.171, 1436738.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1434897.890 ± 1840.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26997728.849 ops/s
# Warmup Iteration   2: 42177951.965 ops/s
# Warmup Iteration   3: 45163657.618 ops/s
# Warmup Iteration   4: 45613434.008 ops/s
# Warmup Iteration   5: 45554636.456 ops/s
# Warmup Iteration   6: 45762433.893 ops/s
# Warmup Iteration   7: 45661636.449 ops/s
# Warmup Iteration   8: 45643690.354 ops/s
# Warmup Iteration   9: 45602887.980 ops/s
# Warmup Iteration  10: 45581124.300 ops/s
# Warmup Iteration  11: 45624140.178 ops/s
# Warmup Iteration  12: 45675279.910 ops/s
# Warmup Iteration  13: 45472073.644 ops/s
# Warmup Iteration  14: 45555770.972 ops/s
# Warmup Iteration  15: 45604269.450 ops/s
# Warmup Iteration  16: 45647092.601 ops/s
# Warmup Iteration  17: 45756699.584 ops/s
# Warmup Iteration  18: 45765554.727 ops/s
# Warmup Iteration  19: 45869387.251 ops/s
# Warmup Iteration  20: 45635010.297 ops/s
# Warmup Iteration  21: 45610355.803 ops/s
# Warmup Iteration  22: 45557058.884 ops/s
# Warmup Iteration  23: 45733275.074 ops/s
# Warmup Iteration  24: 45829110.451 ops/s
# Warmup Iteration  25: 45535732.782 ops/s
# Warmup Iteration  26: 45769217.779 ops/s
# Warmup Iteration  27: 45644883.369 ops/s
# Warmup Iteration  28: 45746140.809 ops/s
# Warmup Iteration  29: 45585771.758 ops/s
# Warmup Iteration  30: 45645864.161 ops/s
Iteration   1: 45656027.444 ops/s
Iteration   2: 45518246.224 ops/s
Iteration   3: 45692367.006 ops/s
Iteration   4: 45692451.552 ops/s
Iteration   5: 45667929.441 ops/s
Iteration   6: 45776394.738 ops/s
Iteration   7: 45564243.147 ops/s
Iteration   8: 45680193.160 ops/s
Iteration   9: 45525305.910 ops/s
Iteration  10: 45837419.758 ops/s
Iteration  11: 45787438.348 ops/s
Iteration  12: 45788883.145 ops/s
Iteration  13: 45685235.082 ops/s
Iteration  14: 45722969.151 ops/s
Iteration  15: 45811513.236 ops/s
Iteration  16: 45760797.681 ops/s
Iteration  17: 45728455.230 ops/s
Iteration  18: 45784495.008 ops/s
Iteration  19: 45752756.007 ops/s
Iteration  20: 45754696.850 ops/s
Iteration  21: 45618443.153 ops/s
Iteration  22: 45633012.336 ops/s
Iteration  23: 45721187.828 ops/s
Iteration  24: 45645502.724 ops/s
Iteration  25: 45753506.460 ops/s
Iteration  26: 45609870.526 ops/s
Iteration  27: 45493405.785 ops/s
Iteration  28: 45091216.971 ops/s
Iteration  29: 45436583.181 ops/s
Iteration  30: 45402745.615 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneArray":
  45653109.757 ±(99.9%) 102828.402 ops/s [Average]
  (min, avg, max) = (45091216.971, 45653109.757, 45837419.758), stdev = 153908.723
  CI (99.9%): [45550281.355, 45755938.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  45653109.757 ± 102828.402  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806147.558 ops/s
# Warmup Iteration   2: 1152217.527 ops/s
# Warmup Iteration   3: 1357043.654 ops/s
# Warmup Iteration   4: 1357532.774 ops/s
# Warmup Iteration   5: 1361050.990 ops/s
# Warmup Iteration   6: 1353220.579 ops/s
# Warmup Iteration   7: 1128936.627 ops/s
# Warmup Iteration   8: 1354289.764 ops/s
# Warmup Iteration   9: 1350474.542 ops/s
# Warmup Iteration  10: 1354198.267 ops/s
# Warmup Iteration  11: 1353136.000 ops/s
# Warmup Iteration  12: 1355076.346 ops/s
# Warmup Iteration  13: 1354577.797 ops/s
# Warmup Iteration  14: 1352703.931 ops/s
# Warmup Iteration  15: 1353102.679 ops/s
# Warmup Iteration  16: 1354410.783 ops/s
# Warmup Iteration  17: 1357941.925 ops/s
# Warmup Iteration  18: 1354454.308 ops/s
# Warmup Iteration  19: 1358305.598 ops/s
# Warmup Iteration  20: 1357940.624 ops/s
# Warmup Iteration  21: 1359080.803 ops/s
# Warmup Iteration  22: 1353121.745 ops/s
# Warmup Iteration  23: 1358307.361 ops/s
# Warmup Iteration  24: 1356665.359 ops/s
# Warmup Iteration  25: 1356037.861 ops/s
# Warmup Iteration  26: 1350781.997 ops/s
# Warmup Iteration  27: 1357526.444 ops/s
# Warmup Iteration  28: 1358242.154 ops/s
# Warmup Iteration  29: 1356496.880 ops/s
# Warmup Iteration  30: 1357790.089 ops/s
Iteration   1: 1352889.831 ops/s
Iteration   2: 1359641.042 ops/s
Iteration   3: 1357016.912 ops/s
Iteration   4: 1354719.637 ops/s
Iteration   5: 1354390.357 ops/s
Iteration   6: 1350783.345 ops/s
Iteration   7: 1353276.622 ops/s
Iteration   8: 1354867.171 ops/s
Iteration   9: 1360019.889 ops/s
Iteration  10: 1350487.377 ops/s
Iteration  11: 1362437.143 ops/s
Iteration  12: 1355189.755 ops/s
Iteration  13: 1355344.069 ops/s
Iteration  14: 1351880.321 ops/s
Iteration  15: 1359806.663 ops/s
Iteration  16: 1354885.944 ops/s
Iteration  17: 1351517.532 ops/s
Iteration  18: 1353593.381 ops/s
Iteration  19: 1355198.457 ops/s
Iteration  20: 1359925.596 ops/s
Iteration  21: 1356574.753 ops/s
Iteration  22: 1359881.099 ops/s
Iteration  23: 1359718.011 ops/s
Iteration  24: 1357315.886 ops/s
Iteration  25: 1354457.924 ops/s
Iteration  26: 1356591.235 ops/s
Iteration  27: 1361627.795 ops/s
Iteration  28: 1352761.136 ops/s
Iteration  29: 1356253.254 ops/s
Iteration  30: 1348500.773 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneIterable":
  1355718.430 ±(99.9%) 2346.062 ops/s [Average]
  (min, avg, max) = (1348500.773, 1355718.430, 1362437.143), stdev = 3511.476
  CI (99.9%): [1353372.368, 1358064.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1355718.430 ± 2346.062  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12373684.862 ops/s
# Warmup Iteration   2: 25227710.328 ops/s
# Warmup Iteration   3: 25973485.578 ops/s
# Warmup Iteration   4: 21773809.478 ops/s
# Warmup Iteration   5: 25943888.028 ops/s
# Warmup Iteration   6: 25956274.181 ops/s
# Warmup Iteration   7: 25871937.150 ops/s
# Warmup Iteration   8: 25950223.232 ops/s
# Warmup Iteration   9: 25924874.466 ops/s
# Warmup Iteration  10: 25894736.496 ops/s
# Warmup Iteration  11: 25980625.644 ops/s
# Warmup Iteration  12: 25909696.528 ops/s
# Warmup Iteration  13: 25915002.809 ops/s
# Warmup Iteration  14: 25904471.419 ops/s
# Warmup Iteration  15: 25931274.393 ops/s
# Warmup Iteration  16: 25944693.958 ops/s
# Warmup Iteration  17: 25935163.847 ops/s
# Warmup Iteration  18: 25938103.204 ops/s
# Warmup Iteration  19: 25986859.006 ops/s
# Warmup Iteration  20: 25940846.052 ops/s
# Warmup Iteration  21: 26001358.252 ops/s
# Warmup Iteration  22: 25908386.449 ops/s
# Warmup Iteration  23: 25924010.496 ops/s
# Warmup Iteration  24: 25994485.910 ops/s
# Warmup Iteration  25: 25954804.727 ops/s
# Warmup Iteration  26: 25913357.399 ops/s
# Warmup Iteration  27: 25971165.801 ops/s
# Warmup Iteration  28: 25879302.403 ops/s
# Warmup Iteration  29: 25997143.864 ops/s
# Warmup Iteration  30: 25981030.614 ops/s
Iteration   1: 25934314.410 ops/s
Iteration   2: 25996964.058 ops/s
Iteration   3: 25986493.043 ops/s
Iteration   4: 25947584.125 ops/s
Iteration   5: 25868140.870 ops/s
Iteration   6: 25945508.125 ops/s
Iteration   7: 25854568.811 ops/s
Iteration   8: 25917390.316 ops/s
Iteration   9: 25990275.402 ops/s
Iteration  10: 25972821.136 ops/s
Iteration  11: 25969447.101 ops/s
Iteration  12: 25981453.063 ops/s
Iteration  13: 25874205.268 ops/s
Iteration  14: 25908767.155 ops/s
Iteration  15: 25775015.373 ops/s
Iteration  16: 26012007.910 ops/s
Iteration  17: 25865768.644 ops/s
Iteration  18: 25999206.290 ops/s
Iteration  19: 25919357.152 ops/s
Iteration  20: 25998608.019 ops/s
Iteration  21: 25937390.782 ops/s
Iteration  22: 25943844.101 ops/s
Iteration  23: 25887666.874 ops/s
Iteration  24: 25907493.734 ops/s
Iteration  25: 25924880.616 ops/s
Iteration  26: 25935827.390 ops/s
Iteration  27: 25965889.469 ops/s
Iteration  28: 26030970.620 ops/s
Iteration  29: 25966417.566 ops/s
Iteration  30: 25994338.090 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_count":
  25940420.517 ±(99.9%) 37616.756 ops/s [Average]
  (min, avg, max) = (25775015.373, 25940420.517, 26030970.620), stdev = 56302.994
  CI (99.9%): [25902803.761, 25978037.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_count  thrpt   30  25940420.517 ± 37616.756  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21622658.320 ops/s
# Warmup Iteration   2: 40667177.275 ops/s
# Warmup Iteration   3: 37811820.874 ops/s
# Warmup Iteration   4: 44404877.774 ops/s
# Warmup Iteration   5: 44386588.499 ops/s
# Warmup Iteration   6: 44416090.370 ops/s
# Warmup Iteration   7: 44107263.239 ops/s
# Warmup Iteration   8: 44328994.570 ops/s
# Warmup Iteration   9: 44210336.259 ops/s
# Warmup Iteration  10: 44401277.327 ops/s
# Warmup Iteration  11: 44354775.708 ops/s
# Warmup Iteration  12: 44518266.733 ops/s
# Warmup Iteration  13: 44268430.600 ops/s
# Warmup Iteration  14: 44574184.401 ops/s
# Warmup Iteration  15: 44270692.015 ops/s
# Warmup Iteration  16: 44415908.289 ops/s
# Warmup Iteration  17: 44187780.853 ops/s
# Warmup Iteration  18: 44303021.242 ops/s
# Warmup Iteration  19: 44445494.011 ops/s
# Warmup Iteration  20: 44292454.943 ops/s
# Warmup Iteration  21: 44385038.522 ops/s
# Warmup Iteration  22: 43954982.584 ops/s
# Warmup Iteration  23: 44383078.954 ops/s
# Warmup Iteration  24: 44297262.282 ops/s
# Warmup Iteration  25: 44357752.218 ops/s
# Warmup Iteration  26: 44292865.841 ops/s
# Warmup Iteration  27: 44354990.336 ops/s
# Warmup Iteration  28: 44257094.952 ops/s
# Warmup Iteration  29: 44256393.773 ops/s
# Warmup Iteration  30: 44297792.090 ops/s
Iteration   1: 44254659.241 ops/s
Iteration   2: 44555673.808 ops/s
Iteration   3: 44294963.367 ops/s
Iteration   4: 44367907.581 ops/s
Iteration   5: 44211387.771 ops/s
Iteration   6: 44294440.057 ops/s
Iteration   7: 44259546.376 ops/s
Iteration   8: 44199543.732 ops/s
Iteration   9: 44322037.917 ops/s
Iteration  10: 44372400.200 ops/s
Iteration  11: 44476059.109 ops/s
Iteration  12: 44413551.236 ops/s
Iteration  13: 44217682.524 ops/s
Iteration  14: 44084606.223 ops/s
Iteration  15: 44383401.252 ops/s
Iteration  16: 44295984.116 ops/s
Iteration  17: 44607693.878 ops/s
Iteration  18: 43764923.930 ops/s
Iteration  19: 44438513.099 ops/s
Iteration  20: 44109954.519 ops/s
Iteration  21: 44223192.587 ops/s
Iteration  22: 44098715.076 ops/s
Iteration  23: 44340539.762 ops/s
Iteration  24: 44566231.789 ops/s
Iteration  25: 44375546.669 ops/s
Iteration  26: 44339287.604 ops/s
Iteration  27: 44161516.373 ops/s
Iteration  28: 44392439.090 ops/s
Iteration  29: 44454739.991 ops/s
Iteration  30: 44220139.806 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_detectIfNone":
  44303242.623 ±(99.9%) 112458.093 ops/s [Average]
  (min, avg, max) = (43764923.930, 44303242.623, 44607693.878), stdev = 168321.992
  CI (99.9%): [44190784.530, 44415700.716] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  44303242.623 ± 112458.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21770244.976 ops/s
# Warmup Iteration   2: 41283670.680 ops/s
# Warmup Iteration   3: 35338258.278 ops/s
# Warmup Iteration   4: 41600359.736 ops/s
# Warmup Iteration   5: 41542142.328 ops/s
# Warmup Iteration   6: 41561007.658 ops/s
# Warmup Iteration   7: 41476260.375 ops/s
# Warmup Iteration   8: 41373224.631 ops/s
# Warmup Iteration   9: 41664468.865 ops/s
# Warmup Iteration  10: 41444999.272 ops/s
# Warmup Iteration  11: 41618140.227 ops/s
# Warmup Iteration  12: 41495849.529 ops/s
# Warmup Iteration  13: 41433160.227 ops/s
# Warmup Iteration  14: 41522682.755 ops/s
# Warmup Iteration  15: 41563720.066 ops/s
# Warmup Iteration  16: 41558904.556 ops/s
# Warmup Iteration  17: 41496969.027 ops/s
# Warmup Iteration  18: 41441556.271 ops/s
# Warmup Iteration  19: 41574021.476 ops/s
# Warmup Iteration  20: 41495986.307 ops/s
# Warmup Iteration  21: 41471166.469 ops/s
# Warmup Iteration  22: 41315192.168 ops/s
# Warmup Iteration  23: 41393956.262 ops/s
# Warmup Iteration  24: 41518388.023 ops/s
# Warmup Iteration  25: 41541949.759 ops/s
# Warmup Iteration  26: 41523181.796 ops/s
# Warmup Iteration  27: 41260740.311 ops/s
# Warmup Iteration  28: 41362491.750 ops/s
# Warmup Iteration  29: 41411476.733 ops/s
# Warmup Iteration  30: 41504198.121 ops/s
Iteration   1: 41475101.750 ops/s
Iteration   2: 41298411.539 ops/s
Iteration   3: 41462577.001 ops/s
Iteration   4: 41275831.710 ops/s
Iteration   5: 41281757.516 ops/s
Iteration   6: 41609323.190 ops/s
Iteration   7: 41404157.300 ops/s
Iteration   8: 41440326.806 ops/s
Iteration   9: 41363691.791 ops/s
Iteration  10: 40885322.846 ops/s
Iteration  11: 41692679.539 ops/s
Iteration  12: 41408631.408 ops/s
Iteration  13: 41272554.060 ops/s
Iteration  14: 41433587.355 ops/s
Iteration  15: 41497432.423 ops/s
Iteration  16: 41308601.243 ops/s
Iteration  17: 41437825.568 ops/s
Iteration  18: 41058780.006 ops/s
Iteration  19: 41650692.429 ops/s
Iteration  20: 41408591.439 ops/s
Iteration  21: 41279704.385 ops/s
Iteration  22: 41274325.390 ops/s
Iteration  23: 41016798.225 ops/s
Iteration  24: 41368221.512 ops/s
Iteration  25: 41277680.417 ops/s
Iteration  26: 41455257.648 ops/s
Iteration  27: 41385620.356 ops/s
Iteration  28: 41387383.838 ops/s
Iteration  29: 41473020.164 ops/s
Iteration  30: 41248243.066 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEach":
  41361071.064 ±(99.9%) 113848.548 ops/s [Average]
  (min, avg, max) = (40885322.846, 41361071.064, 41692679.539), stdev = 170403.160
  CI (99.9%): [41247222.516, 41474919.612] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEach  thrpt   30  41361071.064 ± 113848.548  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 36289136.217 ops/s
# Warmup Iteration   2: 56841761.902 ops/s
# Warmup Iteration   3: 68413002.011 ops/s
# Warmup Iteration   4: 67263028.501 ops/s
# Warmup Iteration   5: 68050217.926 ops/s
# Warmup Iteration   6: 67586370.493 ops/s
# Warmup Iteration   7: 67307163.795 ops/s
# Warmup Iteration   8: 67398452.801 ops/s
# Warmup Iteration   9: 68230419.409 ops/s
# Warmup Iteration  10: 67729203.002 ops/s
# Warmup Iteration  11: 67670809.706 ops/s
# Warmup Iteration  12: 67993595.096 ops/s
# Warmup Iteration  13: 68406808.232 ops/s
# Warmup Iteration  14: 68209516.882 ops/s
# Warmup Iteration  15: 68466885.685 ops/s
# Warmup Iteration  16: 68316605.219 ops/s
# Warmup Iteration  17: 68356822.739 ops/s
# Warmup Iteration  18: 68398728.516 ops/s
# Warmup Iteration  19: 68053217.227 ops/s
# Warmup Iteration  20: 68632008.308 ops/s
# Warmup Iteration  21: 68621548.485 ops/s
# Warmup Iteration  22: 67830411.411 ops/s
# Warmup Iteration  23: 67999919.902 ops/s
# Warmup Iteration  24: 68125834.697 ops/s
# Warmup Iteration  25: 68013247.683 ops/s
# Warmup Iteration  26: 67653587.467 ops/s
# Warmup Iteration  27: 67708872.645 ops/s
# Warmup Iteration  28: 67890855.411 ops/s
# Warmup Iteration  29: 67994974.582 ops/s
# Warmup Iteration  30: 68011307.910 ops/s
Iteration   1: 67076436.436 ops/s
Iteration   2: 68094280.808 ops/s
Iteration   3: 67646672.336 ops/s
Iteration   4: 68055810.579 ops/s
Iteration   5: 67705210.873 ops/s
Iteration   6: 68039255.351 ops/s
Iteration   7: 67879658.831 ops/s
Iteration   8: 67841562.748 ops/s
Iteration   9: 68375130.193 ops/s
Iteration  10: 67665688.205 ops/s
Iteration  11: 67567967.171 ops/s
Iteration  12: 68324447.945 ops/s
Iteration  13: 68220724.369 ops/s
Iteration  14: 68347433.814 ops/s
Iteration  15: 67731011.474 ops/s
Iteration  16: 67873244.055 ops/s
Iteration  17: 68366053.881 ops/s
Iteration  18: 68179035.087 ops/s
Iteration  19: 67680036.313 ops/s
Iteration  20: 69292235.570 ops/s
Iteration  21: 67265290.281 ops/s
Iteration  22: 67390263.937 ops/s
Iteration  23: 69096073.260 ops/s
Iteration  24: 67701458.798 ops/s
Iteration  25: 68081375.401 ops/s
Iteration  26: 67593579.086 ops/s
Iteration  27: 68639673.238 ops/s
Iteration  28: 68001619.145 ops/s
Iteration  29: 67655979.626 ops/s
Iteration  30: 69175479.079 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEachWithOccurrences":
  68018756.263 ±(99.9%) 353771.644 ops/s [Average]
  (min, avg, max) = (67076436.436, 68018756.263, 69292235.570), stdev = 529508.783
  CI (99.9%): [67664984.618, 68372527.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  68018756.263 ± 353771.644  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33860184.907 ops/s
# Warmup Iteration   2: 67369220.368 ops/s
# Warmup Iteration   3: 57722482.084 ops/s
# Warmup Iteration   4: 68346642.945 ops/s
# Warmup Iteration   5: 68052539.746 ops/s
# Warmup Iteration   6: 68096686.846 ops/s
# Warmup Iteration   7: 68257195.872 ops/s
# Warmup Iteration   8: 67890693.050 ops/s
# Warmup Iteration   9: 67801299.097 ops/s
# Warmup Iteration  10: 68111502.326 ops/s
# Warmup Iteration  11: 67923681.355 ops/s
# Warmup Iteration  12: 68091882.716 ops/s
# Warmup Iteration  13: 68229706.824 ops/s
# Warmup Iteration  14: 68253248.049 ops/s
# Warmup Iteration  15: 68226213.090 ops/s
# Warmup Iteration  16: 68170819.992 ops/s
# Warmup Iteration  17: 68078876.797 ops/s
# Warmup Iteration  18: 68210691.263 ops/s
# Warmup Iteration  19: 68432425.707 ops/s
# Warmup Iteration  20: 68161834.531 ops/s
# Warmup Iteration  21: 68354647.458 ops/s
# Warmup Iteration  22: 68579528.066 ops/s
# Warmup Iteration  23: 68313450.428 ops/s
# Warmup Iteration  24: 68211460.491 ops/s
# Warmup Iteration  25: 68319543.435 ops/s
# Warmup Iteration  26: 68135963.392 ops/s
# Warmup Iteration  27: 68305638.018 ops/s
# Warmup Iteration  28: 68102989.372 ops/s
# Warmup Iteration  29: 68388947.074 ops/s
# Warmup Iteration  30: 68153612.043 ops/s
Iteration   1: 68344825.605 ops/s
Iteration   2: 68000470.078 ops/s
Iteration   3: 68182139.128 ops/s
Iteration   4: 67975788.307 ops/s
Iteration   5: 68475229.158 ops/s
Iteration   6: 68210465.962 ops/s
Iteration   7: 68228813.232 ops/s
Iteration   8: 67888088.683 ops/s
Iteration   9: 68167250.548 ops/s
Iteration  10: 67900163.711 ops/s
Iteration  11: 68075603.677 ops/s
Iteration  12: 68135844.037 ops/s
Iteration  13: 68426176.470 ops/s
Iteration  14: 68261094.276 ops/s
Iteration  15: 68530324.848 ops/s
Iteration  16: 68032661.685 ops/s
Iteration  17: 68143338.654 ops/s
Iteration  18: 68395574.362 ops/s
Iteration  19: 68210157.259 ops/s
Iteration  20: 68353698.315 ops/s
Iteration  21: 67875861.427 ops/s
Iteration  22: 68579615.393 ops/s
Iteration  23: 68248004.642 ops/s
Iteration  24: 68374442.131 ops/s
Iteration  25: 68319284.547 ops/s
Iteration  26: 68421054.594 ops/s
Iteration  27: 68275592.263 ops/s
Iteration  28: 68388488.841 ops/s
Iteration  29: 67833257.059 ops/s
Iteration  30: 68306545.878 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_injectInto":
  68218661.826 ±(99.9%) 134470.049 ops/s [Average]
  (min, avg, max) = (67833257.059, 68218661.826, 68579615.393), stdev = 201268.455
  CI (99.9%): [68084191.776, 68353131.875] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_injectInto  thrpt   30  68218661.826 ± 134470.049  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33508537.454 ops/s
# Warmup Iteration   2: 52746897.851 ops/s
# Warmup Iteration   3: 60960120.553 ops/s
# Warmup Iteration   4: 61137427.964 ops/s
# Warmup Iteration   5: 60817501.626 ops/s
# Warmup Iteration   6: 61014127.270 ops/s
# Warmup Iteration   7: 60648492.946 ops/s
# Warmup Iteration   8: 61053265.774 ops/s
# Warmup Iteration   9: 61120701.850 ops/s
# Warmup Iteration  10: 61114194.215 ops/s
# Warmup Iteration  11: 61251899.362 ops/s
# Warmup Iteration  12: 61034036.142 ops/s
# Warmup Iteration  13: 61086306.343 ops/s
# Warmup Iteration  14: 60994841.042 ops/s
# Warmup Iteration  15: 60948946.556 ops/s
# Warmup Iteration  16: 61154213.268 ops/s
# Warmup Iteration  17: 61134790.320 ops/s
# Warmup Iteration  18: 61033212.979 ops/s
# Warmup Iteration  19: 61243104.622 ops/s
# Warmup Iteration  20: 61262266.483 ops/s
# Warmup Iteration  21: 61181421.482 ops/s
# Warmup Iteration  22: 61169805.254 ops/s
# Warmup Iteration  23: 61126623.005 ops/s
# Warmup Iteration  24: 61203509.183 ops/s
# Warmup Iteration  25: 60871874.505 ops/s
# Warmup Iteration  26: 60305839.743 ops/s
# Warmup Iteration  27: 60962489.292 ops/s
# Warmup Iteration  28: 60718544.725 ops/s
# Warmup Iteration  29: 60885638.215 ops/s
# Warmup Iteration  30: 60947794.459 ops/s
Iteration   1: 60945315.616 ops/s
Iteration   2: 60745072.184 ops/s
Iteration   3: 61243289.653 ops/s
Iteration   4: 60696408.239 ops/s
Iteration   5: 61038322.482 ops/s
Iteration   6: 61156263.230 ops/s
Iteration   7: 61063798.499 ops/s
Iteration   8: 61103020.489 ops/s
Iteration   9: 60092353.300 ops/s
Iteration  10: 60967501.458 ops/s
Iteration  11: 61020999.623 ops/s
Iteration  12: 61097477.235 ops/s
Iteration  13: 61034995.636 ops/s
Iteration  14: 60722378.824 ops/s
Iteration  15: 61087646.627 ops/s
Iteration  16: 60680542.405 ops/s
Iteration  17: 60828212.069 ops/s
Iteration  18: 61319815.095 ops/s
Iteration  19: 61031097.425 ops/s
Iteration  20: 60892988.048 ops/s
Iteration  21: 60533863.364 ops/s
Iteration  22: 60607544.357 ops/s
Iteration  23: 60718695.085 ops/s
Iteration  24: 60888876.829 ops/s
Iteration  25: 61217297.168 ops/s
Iteration  26: 61156524.110 ops/s
Iteration  27: 61226461.538 ops/s
Iteration  28: 61321054.168 ops/s
Iteration  29: 61018272.709 ops/s
Iteration  30: 61189108.669 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_isEmpty":
  60954839.871 ±(99.9%) 179391.509 ops/s [Average]
  (min, avg, max) = (60092353.300, 60954839.871, 61321054.168), stdev = 268504.786
  CI (99.9%): [60775448.362, 61134231.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_isEmpty  thrpt   30  60954839.871 ± 179391.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855489.891 ops/s
# Warmup Iteration   2: 868716.549 ops/s
# Warmup Iteration   3: 1016597.049 ops/s
# Warmup Iteration   4: 1094960.466 ops/s
# Warmup Iteration   5: 1094251.808 ops/s
# Warmup Iteration   6: 1092433.162 ops/s
# Warmup Iteration   7: 1092325.191 ops/s
# Warmup Iteration   8: 1088770.350 ops/s
# Warmup Iteration   9: 1092090.242 ops/s
# Warmup Iteration  10: 1088219.029 ops/s
# Warmup Iteration  11: 1091252.734 ops/s
# Warmup Iteration  12: 1094952.482 ops/s
# Warmup Iteration  13: 1097588.281 ops/s
# Warmup Iteration  14: 920452.130 ops/s
# Warmup Iteration  15: 1093629.540 ops/s
# Warmup Iteration  16: 1091126.173 ops/s
# Warmup Iteration  17: 1158575.992 ops/s
# Warmup Iteration  18: 1163949.149 ops/s
# Warmup Iteration  19: 1159177.057 ops/s
# Warmup Iteration  20: 1160659.055 ops/s
# Warmup Iteration  21: 1160152.963 ops/s
# Warmup Iteration  22: 1160372.633 ops/s
# Warmup Iteration  23: 1160227.704 ops/s
# Warmup Iteration  24: 1160566.840 ops/s
# Warmup Iteration  25: 1162199.505 ops/s
# Warmup Iteration  26: 1154804.680 ops/s
# Warmup Iteration  27: 1158496.868 ops/s
# Warmup Iteration  28: 1161902.024 ops/s
# Warmup Iteration  29: 1159812.612 ops/s
# Warmup Iteration  30: 1161923.356 ops/s
Iteration   1: 1163841.595 ops/s
Iteration   2: 1158106.029 ops/s
Iteration   3: 1159007.663 ops/s
Iteration   4: 1156235.698 ops/s
Iteration   5: 1161613.798 ops/s
Iteration   6: 1159971.003 ops/s
Iteration   7: 1165590.867 ops/s
Iteration   8: 1157621.016 ops/s
Iteration   9: 1164106.988 ops/s
Iteration  10: 1160580.072 ops/s
Iteration  11: 1159161.560 ops/s
Iteration  12: 1164101.071 ops/s
Iteration  13: 1157074.258 ops/s
Iteration  14: 1160781.074 ops/s
Iteration  15: 1159679.083 ops/s
Iteration  16: 1161149.269 ops/s
Iteration  17: 1158916.839 ops/s
Iteration  18: 1159119.028 ops/s
Iteration  19: 1158810.594 ops/s
Iteration  20: 1159822.979 ops/s
Iteration  21: 1157999.337 ops/s
Iteration  22: 1163220.274 ops/s
Iteration  23: 1162393.605 ops/s
Iteration  24: 1158554.410 ops/s
Iteration  25: 1161214.424 ops/s
Iteration  26: 1161029.837 ops/s
Iteration  27: 1163118.195 ops/s
Iteration  28: 1156036.305 ops/s
Iteration  29: 1159718.224 ops/s
Iteration  30: 1157439.545 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws":
  1160200.488 ±(99.9%) 1652.111 ops/s [Average]
  (min, avg, max) = (1156036.305, 1160200.488, 1165590.867), stdev = 2472.803
  CI (99.9%): [1158548.377, 1161852.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1160200.488 ± 1652.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856025.169 ops/s
# Warmup Iteration   2: 868487.821 ops/s
# Warmup Iteration   3: 1011389.201 ops/s
# Warmup Iteration   4: 1077324.961 ops/s
# Warmup Iteration   5: 1083000.440 ops/s
# Warmup Iteration   6: 1084661.008 ops/s
# Warmup Iteration   7: 1083540.690 ops/s
# Warmup Iteration   8: 1081650.086 ops/s
# Warmup Iteration   9: 1080522.217 ops/s
# Warmup Iteration  10: 1082321.103 ops/s
# Warmup Iteration  11: 1082450.653 ops/s
# Warmup Iteration  12: 1084037.803 ops/s
# Warmup Iteration  13: 1079453.442 ops/s
# Warmup Iteration  14: 916994.077 ops/s
# Warmup Iteration  15: 1073110.997 ops/s
# Warmup Iteration  16: 1083025.299 ops/s
# Warmup Iteration  17: 1155541.177 ops/s
# Warmup Iteration  18: 1154954.594 ops/s
# Warmup Iteration  19: 1153718.166 ops/s
# Warmup Iteration  20: 1157504.863 ops/s
# Warmup Iteration  21: 1156377.114 ops/s
# Warmup Iteration  22: 1155836.476 ops/s
# Warmup Iteration  23: 1154160.380 ops/s
# Warmup Iteration  24: 1150690.743 ops/s
# Warmup Iteration  25: 1155480.875 ops/s
# Warmup Iteration  26: 1154362.502 ops/s
# Warmup Iteration  27: 1150876.753 ops/s
# Warmup Iteration  28: 1151650.926 ops/s
# Warmup Iteration  29: 1152672.264 ops/s
# Warmup Iteration  30: 1155994.504 ops/s
Iteration   1: 1154820.717 ops/s
Iteration   2: 1155298.360 ops/s
Iteration   3: 1158532.971 ops/s
Iteration   4: 1157434.560 ops/s
Iteration   5: 1153796.840 ops/s
Iteration   6: 1158262.648 ops/s
Iteration   7: 1156874.174 ops/s
Iteration   8: 1158158.494 ops/s
Iteration   9: 1155494.087 ops/s
Iteration  10: 1153513.621 ops/s
Iteration  11: 1153728.268 ops/s
Iteration  12: 1152546.762 ops/s
Iteration  13: 1154936.877 ops/s
Iteration  14: 1153708.613 ops/s
Iteration  15: 1151546.114 ops/s
Iteration  16: 1156467.306 ops/s
Iteration  17: 1155927.734 ops/s
Iteration  18: 1154598.989 ops/s
Iteration  19: 1150264.859 ops/s
Iteration  20: 1154781.076 ops/s
Iteration  21: 1154372.573 ops/s
Iteration  22: 1156294.849 ops/s
Iteration  23: 1153833.361 ops/s
Iteration  24: 1153469.340 ops/s
Iteration  25: 1158247.202 ops/s
Iteration  26: 1154227.204 ops/s
Iteration  27: 1151998.058 ops/s
Iteration  28: 1154274.900 ops/s
Iteration  29: 1154683.894 ops/s
Iteration  30: 1157133.124 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1154974.252 ±(99.9%) 1384.477 ops/s [Average]
  (min, avg, max) = (1150264.859, 1154974.252, 1158532.971), stdev = 2072.220
  CI (99.9%): [1153589.776, 1156358.729] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1154974.252 ± 1384.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786988.355 ops/s
# Warmup Iteration   2: 802033.982 ops/s
# Warmup Iteration   3: 1001289.808 ops/s
# Warmup Iteration   4: 1022945.192 ops/s
# Warmup Iteration   5: 1025673.578 ops/s
# Warmup Iteration   6: 1025960.757 ops/s
# Warmup Iteration   7: 1026213.956 ops/s
# Warmup Iteration   8: 1022860.953 ops/s
# Warmup Iteration   9: 1023931.293 ops/s
# Warmup Iteration  10: 1024388.453 ops/s
# Warmup Iteration  11: 1023613.138 ops/s
# Warmup Iteration  12: 1010949.305 ops/s
# Warmup Iteration  13: 872396.042 ops/s
# Warmup Iteration  14: 1027419.681 ops/s
# Warmup Iteration  15: 1027240.859 ops/s
# Warmup Iteration  16: 1025590.641 ops/s
# Warmup Iteration  17: 1090359.407 ops/s
# Warmup Iteration  18: 1094763.171 ops/s
# Warmup Iteration  19: 1093517.131 ops/s
# Warmup Iteration  20: 1092216.410 ops/s
# Warmup Iteration  21: 1090801.735 ops/s
# Warmup Iteration  22: 1087470.932 ops/s
# Warmup Iteration  23: 1092226.493 ops/s
# Warmup Iteration  24: 1091399.697 ops/s
# Warmup Iteration  25: 1090422.510 ops/s
# Warmup Iteration  26: 1088553.930 ops/s
# Warmup Iteration  27: 1091324.785 ops/s
# Warmup Iteration  28: 1088805.303 ops/s
# Warmup Iteration  29: 1092951.085 ops/s
# Warmup Iteration  30: 1090904.187 ops/s
Iteration   1: 1095427.797 ops/s
Iteration   2: 1090603.061 ops/s
Iteration   3: 1091111.302 ops/s
Iteration   4: 1096927.668 ops/s
Iteration   5: 1094355.941 ops/s
Iteration   6: 1096598.804 ops/s
Iteration   7: 1093223.431 ops/s
Iteration   8: 1084832.013 ops/s
Iteration   9: 1094608.939 ops/s
Iteration  10: 1091976.280 ops/s
Iteration  11: 1097141.981 ops/s
Iteration  12: 1091639.433 ops/s
Iteration  13: 1091309.454 ops/s
Iteration  14: 1090944.595 ops/s
Iteration  15: 1096777.251 ops/s
Iteration  16: 1089226.431 ops/s
Iteration  17: 1090811.124 ops/s
Iteration  18: 1092463.531 ops/s
Iteration  19: 1092604.811 ops/s
Iteration  20: 1089759.374 ops/s
Iteration  21: 1091458.558 ops/s
Iteration  22: 1090282.227 ops/s
Iteration  23: 1091557.525 ops/s
Iteration  24: 1093818.054 ops/s
Iteration  25: 1088999.405 ops/s
Iteration  26: 1091135.514 ops/s
Iteration  27: 1091513.270 ops/s
Iteration  28: 1089165.444 ops/s
Iteration  29: 1096295.330 ops/s
Iteration  30: 1094966.136 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1092384.489 ±(99.9%) 1915.704 ops/s [Average]
  (min, avg, max) = (1084832.013, 1092384.489, 1097141.981), stdev = 2867.335
  CI (99.9%): [1090468.786, 1094300.193] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1092384.489 ± 1915.704  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1070004.719 ops/s
# Warmup Iteration   2: 2308795.130 ops/s
# Warmup Iteration   3: 2305438.699 ops/s
# Warmup Iteration   4: 1933336.083 ops/s
# Warmup Iteration   5: 2299797.218 ops/s
# Warmup Iteration   6: 2288082.631 ops/s
# Warmup Iteration   7: 2296163.276 ops/s
# Warmup Iteration   8: 2327565.870 ops/s
# Warmup Iteration   9: 2319389.398 ops/s
# Warmup Iteration  10: 2316875.377 ops/s
# Warmup Iteration  11: 2311893.349 ops/s
# Warmup Iteration  12: 2304821.648 ops/s
# Warmup Iteration  13: 2309143.671 ops/s
# Warmup Iteration  14: 2309967.642 ops/s
# Warmup Iteration  15: 2318695.612 ops/s
# Warmup Iteration  16: 2313422.927 ops/s
# Warmup Iteration  17: 2321169.141 ops/s
# Warmup Iteration  18: 2303469.258 ops/s
# Warmup Iteration  19: 2302922.295 ops/s
# Warmup Iteration  20: 2323541.572 ops/s
# Warmup Iteration  21: 2313001.296 ops/s
# Warmup Iteration  22: 2308420.399 ops/s
# Warmup Iteration  23: 2319021.997 ops/s
# Warmup Iteration  24: 2306676.136 ops/s
# Warmup Iteration  25: 2316511.735 ops/s
# Warmup Iteration  26: 2324629.164 ops/s
# Warmup Iteration  27: 2296160.940 ops/s
# Warmup Iteration  28: 2316226.605 ops/s
# Warmup Iteration  29: 2312333.924 ops/s
# Warmup Iteration  30: 2298920.051 ops/s
Iteration   1: 2328964.607 ops/s
Iteration   2: 2321313.739 ops/s
Iteration   3: 2316963.126 ops/s
Iteration   4: 2345486.578 ops/s
Iteration   5: 2313140.161 ops/s
Iteration   6: 2332966.873 ops/s
Iteration   7: 2295160.567 ops/s
Iteration   8: 2293461.237 ops/s
Iteration   9: 2309445.348 ops/s
Iteration  10: 2310615.852 ops/s
Iteration  11: 2345216.624 ops/s
Iteration  12: 2311049.171 ops/s
Iteration  13: 2299855.712 ops/s
Iteration  14: 2299563.054 ops/s
Iteration  15: 2317286.022 ops/s
Iteration  16: 2311505.245 ops/s
Iteration  17: 2304992.365 ops/s
Iteration  18: 2300078.672 ops/s
Iteration  19: 2309768.709 ops/s
Iteration  20: 2299869.108 ops/s
Iteration  21: 2309406.213 ops/s
Iteration  22: 2312554.698 ops/s
Iteration  23: 2334009.152 ops/s
Iteration  24: 2307620.558 ops/s
Iteration  25: 2323870.580 ops/s
Iteration  26: 2311117.042 ops/s
Iteration  27: 2324677.062 ops/s
Iteration  28: 2314166.610 ops/s
Iteration  29: 2315245.509 ops/s
Iteration  30: 2327470.029 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_makeString":
  2314894.674 ±(99.9%) 8938.983 ops/s [Average]
  (min, avg, max) = (2293461.237, 2314894.674, 2345486.578), stdev = 13379.450
  CI (99.9%): [2305955.691, 2323833.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_makeString  thrpt   30  2314894.674 ± 8938.983  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16268917.208 ops/s
# Warmup Iteration   2: 31300028.040 ops/s
# Warmup Iteration   3: 26558824.214 ops/s
# Warmup Iteration   4: 31282023.574 ops/s
# Warmup Iteration   5: 31237357.045 ops/s
# Warmup Iteration   6: 31276776.668 ops/s
# Warmup Iteration   7: 31435926.698 ops/s
# Warmup Iteration   8: 31330384.506 ops/s
# Warmup Iteration   9: 31520751.538 ops/s
# Warmup Iteration  10: 31341814.254 ops/s
# Warmup Iteration  11: 31367511.259 ops/s
# Warmup Iteration  12: 31316695.990 ops/s
# Warmup Iteration  13: 31410597.571 ops/s
# Warmup Iteration  14: 31386002.333 ops/s
# Warmup Iteration  15: 31403841.591 ops/s
# Warmup Iteration  16: 31446035.865 ops/s
# Warmup Iteration  17: 31298505.740 ops/s
# Warmup Iteration  18: 31318353.465 ops/s
# Warmup Iteration  19: 31336484.883 ops/s
# Warmup Iteration  20: 31398987.511 ops/s
# Warmup Iteration  21: 31451948.596 ops/s
# Warmup Iteration  22: 31248187.961 ops/s
# Warmup Iteration  23: 31407549.206 ops/s
# Warmup Iteration  24: 31322936.438 ops/s
# Warmup Iteration  25: 31312867.002 ops/s
# Warmup Iteration  26: 31309975.988 ops/s
# Warmup Iteration  27: 31292656.138 ops/s
# Warmup Iteration  28: 31296886.428 ops/s
# Warmup Iteration  29: 31465270.861 ops/s
# Warmup Iteration  30: 31339920.825 ops/s
Iteration   1: 31228464.501 ops/s
Iteration   2: 31217953.112 ops/s
Iteration   3: 31409212.280 ops/s
Iteration   4: 31350517.709 ops/s
Iteration   5: 31417998.538 ops/s
Iteration   6: 31433128.265 ops/s
Iteration   7: 31348825.586 ops/s
Iteration   8: 31432710.138 ops/s
Iteration   9: 31360741.807 ops/s
Iteration  10: 31292128.185 ops/s
Iteration  11: 31298201.880 ops/s
Iteration  12: 31473429.177 ops/s
Iteration  13: 31358556.926 ops/s
Iteration  14: 31353657.219 ops/s
Iteration  15: 31176393.149 ops/s
Iteration  16: 31384655.494 ops/s
Iteration  17: 31319638.558 ops/s
Iteration  18: 31259956.635 ops/s
Iteration  19: 31329994.165 ops/s
Iteration  20: 31330431.295 ops/s
Iteration  21: 31224503.968 ops/s
Iteration  22: 31362282.719 ops/s
Iteration  23: 31235801.956 ops/s
Iteration  24: 31286684.028 ops/s
Iteration  25: 31172942.566 ops/s
Iteration  26: 31321574.500 ops/s
Iteration  27: 31179637.913 ops/s
Iteration  28: 31309700.111 ops/s
Iteration  29: 31286762.247 ops/s
Iteration  30: 31304228.000 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollection":
  31315357.088 ±(99.9%) 53009.086 ops/s [Average]
  (min, avg, max) = (31172942.566, 31315357.088, 31473429.177), stdev = 79341.511
  CI (99.9%): [31262348.001, 31368366.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollection  thrpt   30  31315357.088 ± 53009.086  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9016750.461 ops/s
# Warmup Iteration   2: 14281869.560 ops/s
# Warmup Iteration   3: 17004261.680 ops/s
# Warmup Iteration   4: 16962816.578 ops/s
# Warmup Iteration   5: 17088240.413 ops/s
# Warmup Iteration   6: 17047447.199 ops/s
# Warmup Iteration   7: 17035528.188 ops/s
# Warmup Iteration   8: 16998682.680 ops/s
# Warmup Iteration   9: 17005537.697 ops/s
# Warmup Iteration  10: 16970484.853 ops/s
# Warmup Iteration  11: 16940910.791 ops/s
# Warmup Iteration  12: 16996008.185 ops/s
# Warmup Iteration  13: 16973574.608 ops/s
# Warmup Iteration  14: 17054275.881 ops/s
# Warmup Iteration  15: 17014772.457 ops/s
# Warmup Iteration  16: 16968090.050 ops/s
# Warmup Iteration  17: 17005379.584 ops/s
# Warmup Iteration  18: 17039878.550 ops/s
# Warmup Iteration  19: 17011477.983 ops/s
# Warmup Iteration  20: 17001442.059 ops/s
# Warmup Iteration  21: 17019789.988 ops/s
# Warmup Iteration  22: 16871817.810 ops/s
# Warmup Iteration  23: 16951565.710 ops/s
# Warmup Iteration  24: 16954165.603 ops/s
# Warmup Iteration  25: 17030434.877 ops/s
# Warmup Iteration  26: 16985691.930 ops/s
# Warmup Iteration  27: 16963632.015 ops/s
# Warmup Iteration  28: 17011932.608 ops/s
# Warmup Iteration  29: 16999224.299 ops/s
# Warmup Iteration  30: 16998918.256 ops/s
Iteration   1: 17041709.381 ops/s
Iteration   2: 16842715.043 ops/s
Iteration   3: 16914728.582 ops/s
Iteration   4: 17046318.212 ops/s
Iteration   5: 17062618.609 ops/s
Iteration   6: 17017643.677 ops/s
Iteration   7: 17092705.660 ops/s
Iteration   8: 16976557.353 ops/s
Iteration   9: 17079629.470 ops/s
Iteration  10: 16972688.513 ops/s
Iteration  11: 17054595.983 ops/s
Iteration  12: 16933318.258 ops/s
Iteration  13: 16878287.606 ops/s
Iteration  14: 17053045.292 ops/s
Iteration  15: 16973008.669 ops/s
Iteration  16: 16967865.848 ops/s
Iteration  17: 17072815.958 ops/s
Iteration  18: 16952083.619 ops/s
Iteration  19: 17020229.528 ops/s
Iteration  20: 17044178.549 ops/s
Iteration  21: 17038252.627 ops/s
Iteration  22: 17007831.279 ops/s
Iteration  23: 17043264.633 ops/s
Iteration  24: 17043235.777 ops/s
Iteration  25: 16988554.783 ops/s
Iteration  26: 17128525.431 ops/s
Iteration  27: 17034528.060 ops/s
Iteration  28: 17003984.241 ops/s
Iteration  29: 17046200.384 ops/s
Iteration  30: 16995321.807 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollectionWith":
  17010881.428 ±(99.9%) 42047.172 ops/s [Average]
  (min, avg, max) = (16842715.043, 17010881.428, 17128525.431), stdev = 62934.233
  CI (99.9%): [16968834.256, 17052928.600] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  17010881.428 ± 42047.172  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212754.518 ops/s
# Warmup Iteration   2: 2721426.466 ops/s
# Warmup Iteration   3: 2928863.356 ops/s
# Warmup Iteration   4: 2933612.329 ops/s
# Warmup Iteration   5: 2395677.663 ops/s
# Warmup Iteration   6: 2933191.651 ops/s
# Warmup Iteration   7: 2923698.434 ops/s
# Warmup Iteration   8: 2936260.933 ops/s
# Warmup Iteration   9: 2926325.794 ops/s
# Warmup Iteration  10: 2921599.940 ops/s
# Warmup Iteration  11: 2926578.439 ops/s
# Warmup Iteration  12: 2935919.658 ops/s
# Warmup Iteration  13: 2928331.605 ops/s
# Warmup Iteration  14: 2934763.926 ops/s
# Warmup Iteration  15: 2939620.383 ops/s
# Warmup Iteration  16: 2925799.368 ops/s
# Warmup Iteration  17: 2932083.326 ops/s
# Warmup Iteration  18: 2932765.649 ops/s
# Warmup Iteration  19: 2933098.853 ops/s
# Warmup Iteration  20: 2933638.865 ops/s
# Warmup Iteration  21: 2938646.959 ops/s
# Warmup Iteration  22: 2935320.645 ops/s
# Warmup Iteration  23: 2940571.735 ops/s
# Warmup Iteration  24: 2935787.200 ops/s
# Warmup Iteration  25: 2940681.412 ops/s
# Warmup Iteration  26: 2934341.608 ops/s
# Warmup Iteration  27: 2933961.912 ops/s
# Warmup Iteration  28: 2942095.650 ops/s
# Warmup Iteration  29: 2940921.085 ops/s
# Warmup Iteration  30: 2943276.606 ops/s
Iteration   1: 2935164.744 ops/s
Iteration   2: 2941523.497 ops/s
Iteration   3: 2931485.489 ops/s
Iteration   4: 2939316.042 ops/s
Iteration   5: 2941409.047 ops/s
Iteration   6: 2946291.172 ops/s
Iteration   7: 2937397.286 ops/s
Iteration   8: 2937279.054 ops/s
Iteration   9: 2939747.807 ops/s
Iteration  10: 2926602.879 ops/s
Iteration  11: 2934504.772 ops/s
Iteration  12: 2942493.503 ops/s
Iteration  13: 2934194.136 ops/s
Iteration  14: 2925157.047 ops/s
Iteration  15: 2938233.893 ops/s
Iteration  16: 2938717.053 ops/s
Iteration  17: 2944921.397 ops/s
Iteration  18: 2941142.077 ops/s
Iteration  19: 2935219.327 ops/s
Iteration  20: 2933565.312 ops/s
Iteration  21: 2934838.786 ops/s
Iteration  22: 2934556.055 ops/s
Iteration  23: 2936112.068 ops/s
Iteration  24: 2924406.101 ops/s
Iteration  25: 2925114.995 ops/s
Iteration  26: 2940920.052 ops/s
Iteration  27: 2932689.815 ops/s
Iteration  28: 2936076.998 ops/s
Iteration  29: 2937510.597 ops/s
Iteration  30: 2943936.342 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithAll":
  2936350.911 ±(99.9%) 3817.821 ops/s [Average]
  (min, avg, max) = (2924406.101, 2936350.911, 2946291.172), stdev = 5714.336
  CI (99.9%): [2932533.090, 2940168.733] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithAll  thrpt   30  2936350.911 ± 3817.821  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1533391.397 ops/s
# Warmup Iteration   2: 2715050.335 ops/s
# Warmup Iteration   3: 3092971.626 ops/s
# Warmup Iteration   4: 3084879.914 ops/s
# Warmup Iteration   5: 3074908.774 ops/s
# Warmup Iteration   6: 2504722.089 ops/s
# Warmup Iteration   7: 3087189.954 ops/s
# Warmup Iteration   8: 3095551.203 ops/s
# Warmup Iteration   9: 3091584.045 ops/s
# Warmup Iteration  10: 3089799.077 ops/s
# Warmup Iteration  11: 3087833.284 ops/s
# Warmup Iteration  12: 3087285.048 ops/s
# Warmup Iteration  13: 3098594.521 ops/s
# Warmup Iteration  14: 3079751.772 ops/s
# Warmup Iteration  15: 3103100.310 ops/s
# Warmup Iteration  16: 3093918.685 ops/s
# Warmup Iteration  17: 3073653.262 ops/s
# Warmup Iteration  18: 3065956.332 ops/s
# Warmup Iteration  19: 3059466.136 ops/s
# Warmup Iteration  20: 3077328.796 ops/s
# Warmup Iteration  21: 3064089.555 ops/s
# Warmup Iteration  22: 3074665.191 ops/s
# Warmup Iteration  23: 3069515.181 ops/s
# Warmup Iteration  24: 3066636.874 ops/s
# Warmup Iteration  25: 3071826.020 ops/s
# Warmup Iteration  26: 3070275.946 ops/s
# Warmup Iteration  27: 3073938.334 ops/s
# Warmup Iteration  28: 3074721.183 ops/s
# Warmup Iteration  29: 3077627.178 ops/s
# Warmup Iteration  30: 3077993.853 ops/s
Iteration   1: 3079125.539 ops/s
Iteration   2: 3062634.395 ops/s
Iteration   3: 3058401.311 ops/s
Iteration   4: 3070229.740 ops/s
Iteration   5: 3066725.992 ops/s
Iteration   6: 3080981.740 ops/s
Iteration   7: 3068751.755 ops/s
Iteration   8: 3081245.512 ops/s
Iteration   9: 3073332.447 ops/s
Iteration  10: 3085196.097 ops/s
Iteration  11: 3075560.201 ops/s
Iteration  12: 3071921.713 ops/s
Iteration  13: 3081406.901 ops/s
Iteration  14: 3088417.925 ops/s
Iteration  15: 3060375.352 ops/s
Iteration  16: 3075881.918 ops/s
Iteration  17: 3070642.059 ops/s
Iteration  18: 3068133.943 ops/s
Iteration  19: 3075342.189 ops/s
Iteration  20: 3074288.377 ops/s
Iteration  21: 3077220.077 ops/s
Iteration  22: 3079146.949 ops/s
Iteration  23: 3069845.612 ops/s
Iteration  24: 3074236.935 ops/s
Iteration  25: 3067426.999 ops/s
Iteration  26: 3073593.657 ops/s
Iteration  27: 3056321.112 ops/s
Iteration  28: 3067698.871 ops/s
Iteration  29: 3082956.574 ops/s
Iteration  30: 3069670.417 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithout":
  3072890.410 ±(99.9%) 5173.002 ops/s [Average]
  (min, avg, max) = (3056321.112, 3072890.410, 3088417.925), stdev = 7742.706
  CI (99.9%): [3067717.409, 3078063.412] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithout  thrpt   30  3072890.410 ± 5173.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7802888.375 ops/s
# Warmup Iteration   2: 17639106.976 ops/s
# Warmup Iteration   3: 17658065.601 ops/s
# Warmup Iteration   4: 14595727.774 ops/s
# Warmup Iteration   5: 17649373.082 ops/s
# Warmup Iteration   6: 17631628.165 ops/s
# Warmup Iteration   7: 17613558.034 ops/s
# Warmup Iteration   8: 17603770.733 ops/s
# Warmup Iteration   9: 17620826.073 ops/s
# Warmup Iteration  10: 17660397.786 ops/s
# Warmup Iteration  11: 17604327.114 ops/s
# Warmup Iteration  12: 17613967.904 ops/s
# Warmup Iteration  13: 17611881.900 ops/s
# Warmup Iteration  14: 17643223.977 ops/s
# Warmup Iteration  15: 17648289.610 ops/s
# Warmup Iteration  16: 17647026.799 ops/s
# Warmup Iteration  17: 17001200.179 ops/s
# Warmup Iteration  18: 17004219.495 ops/s
# Warmup Iteration  19: 17048471.918 ops/s
# Warmup Iteration  20: 17012602.410 ops/s
# Warmup Iteration  21: 17033384.098 ops/s
# Warmup Iteration  22: 16998027.816 ops/s
# Warmup Iteration  23: 16961811.020 ops/s
# Warmup Iteration  24: 17013120.564 ops/s
# Warmup Iteration  25: 16989415.630 ops/s
# Warmup Iteration  26: 16987344.767 ops/s
# Warmup Iteration  27: 16992812.235 ops/s
# Warmup Iteration  28: 17005816.525 ops/s
# Warmup Iteration  29: 16994356.792 ops/s
# Warmup Iteration  30: 16982283.678 ops/s
Iteration   1: 17009718.200 ops/s
Iteration   2: 16979194.023 ops/s
Iteration   3: 17045927.325 ops/s
Iteration   4: 16993517.324 ops/s
Iteration   5: 17019523.286 ops/s
Iteration   6: 17022291.241 ops/s
Iteration   7: 16905565.383 ops/s
Iteration   8: 17000436.425 ops/s
Iteration   9: 16973325.145 ops/s
Iteration  10: 17000746.944 ops/s
Iteration  11: 17029747.510 ops/s
Iteration  12: 17012502.990 ops/s
Iteration  13: 16969273.623 ops/s
Iteration  14: 17012933.633 ops/s
Iteration  15: 16992882.502 ops/s
Iteration  16: 17002704.393 ops/s
Iteration  17: 17031788.379 ops/s
Iteration  18: 16994593.602 ops/s
Iteration  19: 17039352.259 ops/s
Iteration  20: 17019964.278 ops/s
Iteration  21: 17013648.717 ops/s
Iteration  22: 16979757.164 ops/s
Iteration  23: 17014034.937 ops/s
Iteration  24: 16972327.530 ops/s
Iteration  25: 16968545.704 ops/s
Iteration  26: 17027732.160 ops/s
Iteration  27: 17017228.315 ops/s
Iteration  28: 16973967.328 ops/s
Iteration  29: 16990524.842 ops/s
Iteration  30: 17061015.180 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithoutAll":
  17002492.345 ±(99.9%) 20120.981 ops/s [Average]
  (min, avg, max) = (16905565.383, 17002492.345, 17061015.180), stdev = 30116.139
  CI (99.9%): [16982371.364, 17022613.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  17002492.345 ± 20120.981  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7188296.792 ops/s
# Warmup Iteration   2: 14632509.238 ops/s
# Warmup Iteration   3: 12072175.206 ops/s
# Warmup Iteration   4: 14188776.780 ops/s
# Warmup Iteration   5: 14228358.235 ops/s
# Warmup Iteration   6: 14191245.182 ops/s
# Warmup Iteration   7: 14208568.459 ops/s
# Warmup Iteration   8: 14219123.260 ops/s
# Warmup Iteration   9: 14190808.458 ops/s
# Warmup Iteration  10: 14202756.806 ops/s
# Warmup Iteration  11: 14206760.925 ops/s
# Warmup Iteration  12: 14202273.347 ops/s
# Warmup Iteration  13: 14154262.474 ops/s
# Warmup Iteration  14: 14192870.967 ops/s
# Warmup Iteration  15: 14247008.574 ops/s
# Warmup Iteration  16: 14207006.809 ops/s
# Warmup Iteration  17: 14212464.010 ops/s
# Warmup Iteration  18: 14237953.696 ops/s
# Warmup Iteration  19: 14166109.865 ops/s
# Warmup Iteration  20: 14181003.909 ops/s
# Warmup Iteration  21: 14134281.901 ops/s
# Warmup Iteration  22: 14210597.568 ops/s
# Warmup Iteration  23: 14130020.744 ops/s
# Warmup Iteration  24: 14124722.284 ops/s
# Warmup Iteration  25: 14095660.441 ops/s
# Warmup Iteration  26: 14168574.834 ops/s
# Warmup Iteration  27: 14196486.908 ops/s
# Warmup Iteration  28: 14145599.347 ops/s
# Warmup Iteration  29: 14107547.579 ops/s
# Warmup Iteration  30: 14148012.135 ops/s
Iteration   1: 14083467.559 ops/s
Iteration   2: 14176879.725 ops/s
Iteration   3: 14132416.407 ops/s
Iteration   4: 14158759.560 ops/s
Iteration   5: 14188363.346 ops/s
Iteration   6: 14149038.749 ops/s
Iteration   7: 14192714.140 ops/s
Iteration   8: 14163727.558 ops/s
Iteration   9: 14113201.589 ops/s
Iteration  10: 14103920.843 ops/s
Iteration  11: 14147162.301 ops/s
Iteration  12: 14156162.420 ops/s
Iteration  13: 14057418.650 ops/s
Iteration  14: 14137026.570 ops/s
Iteration  15: 14126783.920 ops/s
Iteration  16: 14156459.025 ops/s
Iteration  17: 14196642.754 ops/s
Iteration  18: 14247637.655 ops/s
Iteration  19: 14187087.283 ops/s
Iteration  20: 14160597.600 ops/s
Iteration  21: 14119840.016 ops/s
Iteration  22: 14202709.989 ops/s
Iteration  23: 14186484.761 ops/s
Iteration  24: 14211136.624 ops/s
Iteration  25: 14183122.686 ops/s
Iteration  26: 14024596.406 ops/s
Iteration  27: 14124981.595 ops/s
Iteration  28: 14098664.897 ops/s
Iteration  29: 14176756.122 ops/s
Iteration  30: 14147403.111 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_noneSatisfy":
  14150372.129 ±(99.9%) 31538.127 ops/s [Average]
  (min, avg, max) = (14024596.406, 14150372.129, 14247637.655), stdev = 47204.787
  CI (99.9%): [14118834.002, 14181910.256] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  14150372.129 ± 31538.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 165205775.931 ops/s
# Warmup Iteration   2: 299510286.695 ops/s
# Warmup Iteration   3: 261592760.681 ops/s
# Warmup Iteration   4: 305999900.703 ops/s
# Warmup Iteration   5: 305533876.621 ops/s
# Warmup Iteration   6: 307256339.378 ops/s
# Warmup Iteration   7: 307936158.939 ops/s
# Warmup Iteration   8: 306752436.164 ops/s
# Warmup Iteration   9: 306759205.163 ops/s
# Warmup Iteration  10: 306647561.522 ops/s
# Warmup Iteration  11: 306648482.060 ops/s
# Warmup Iteration  12: 306066515.646 ops/s
# Warmup Iteration  13: 305597702.392 ops/s
# Warmup Iteration  14: 305757134.517 ops/s
# Warmup Iteration  15: 307181075.673 ops/s
# Warmup Iteration  16: 306913440.862 ops/s
# Warmup Iteration  17: 307079698.788 ops/s
# Warmup Iteration  18: 305651569.936 ops/s
# Warmup Iteration  19: 307438540.339 ops/s
# Warmup Iteration  20: 305676271.698 ops/s
# Warmup Iteration  21: 305795523.359 ops/s
# Warmup Iteration  22: 306697005.609 ops/s
# Warmup Iteration  23: 306357477.330 ops/s
# Warmup Iteration  24: 306028529.484 ops/s
# Warmup Iteration  25: 305113574.314 ops/s
# Warmup Iteration  26: 305533755.796 ops/s
# Warmup Iteration  27: 306405757.853 ops/s
# Warmup Iteration  28: 303917306.762 ops/s
# Warmup Iteration  29: 303898149.510 ops/s
# Warmup Iteration  30: 306638411.750 ops/s
Iteration   1: 305699221.491 ops/s
Iteration   2: 305646345.472 ops/s
Iteration   3: 306286281.548 ops/s
Iteration   4: 305442761.041 ops/s
Iteration   5: 306795359.163 ops/s
Iteration   6: 305703668.754 ops/s
Iteration   7: 306665800.461 ops/s
Iteration   8: 304411862.484 ops/s
Iteration   9: 303453510.052 ops/s
Iteration  10: 303275349.546 ops/s
Iteration  11: 307074231.915 ops/s
Iteration  12: 306062893.341 ops/s
Iteration  13: 306010639.402 ops/s
Iteration  14: 305592480.507 ops/s
Iteration  15: 305028797.298 ops/s
Iteration  16: 306768100.999 ops/s
Iteration  17: 305251559.870 ops/s
Iteration  18: 305142231.230 ops/s
Iteration  19: 306311175.455 ops/s
Iteration  20: 305758088.584 ops/s
Iteration  21: 306426433.795 ops/s
Iteration  22: 306829018.349 ops/s
Iteration  23: 306353786.615 ops/s
Iteration  24: 306898743.157 ops/s
Iteration  25: 306519046.875 ops/s
Iteration  26: 306539800.064 ops/s
Iteration  27: 305382396.874 ops/s
Iteration  28: 305733789.163 ops/s
Iteration  29: 306492286.985 ops/s
Iteration  30: 305759713.513 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_notEmpty":
  305843845.800 ±(99.9%) 619017.090 ops/s [Average]
  (min, avg, max) = (303275349.546, 305843845.800, 307074231.915), stdev = 926515.709
  CI (99.9%): [305224828.710, 306462862.890] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_notEmpty  thrpt   30  305843845.800 ± 619017.090  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 163284715.944 ops/s
# Warmup Iteration   2: 300094326.084 ops/s
# Warmup Iteration   3: 234487709.272 ops/s
# Warmup Iteration   4: 270175370.598 ops/s
# Warmup Iteration   5: 270051715.857 ops/s
# Warmup Iteration   6: 271115282.397 ops/s
# Warmup Iteration   7: 271168466.225 ops/s
# Warmup Iteration   8: 271752180.561 ops/s
# Warmup Iteration   9: 269537491.220 ops/s
# Warmup Iteration  10: 270476804.669 ops/s
# Warmup Iteration  11: 270583778.370 ops/s
# Warmup Iteration  12: 271243223.268 ops/s
# Warmup Iteration  13: 271853855.565 ops/s
# Warmup Iteration  14: 271154436.879 ops/s
# Warmup Iteration  15: 269707510.770 ops/s
# Warmup Iteration  16: 269383429.030 ops/s
# Warmup Iteration  17: 269168264.436 ops/s
# Warmup Iteration  18: 270296045.904 ops/s
# Warmup Iteration  19: 270455084.666 ops/s
# Warmup Iteration  20: 271291858.974 ops/s
# Warmup Iteration  21: 269914944.750 ops/s
# Warmup Iteration  22: 270441925.747 ops/s
# Warmup Iteration  23: 270440274.471 ops/s
# Warmup Iteration  24: 270634454.640 ops/s
# Warmup Iteration  25: 270356411.320 ops/s
# Warmup Iteration  26: 270986742.622 ops/s
# Warmup Iteration  27: 271300180.228 ops/s
# Warmup Iteration  28: 265864616.556 ops/s
# Warmup Iteration  29: 270831173.129 ops/s
# Warmup Iteration  30: 270787759.754 ops/s
Iteration   1: 270770963.021 ops/s
Iteration   2: 270635384.206 ops/s
Iteration   3: 271178769.571 ops/s
Iteration   4: 269278491.715 ops/s
Iteration   5: 266798916.401 ops/s
Iteration   6: 267078561.972 ops/s
Iteration   7: 270763615.838 ops/s
Iteration   8: 271157382.486 ops/s
Iteration   9: 272111690.779 ops/s
Iteration  10: 270794644.538 ops/s
Iteration  11: 271594027.600 ops/s
Iteration  12: 271433348.885 ops/s
Iteration  13: 271645096.180 ops/s
Iteration  14: 270116454.181 ops/s
Iteration  15: 265834402.256 ops/s
Iteration  16: 269961470.382 ops/s
Iteration  17: 270916702.179 ops/s
Iteration  18: 271401261.746 ops/s
Iteration  19: 271701588.219 ops/s
Iteration  20: 270658034.874 ops/s
Iteration  21: 270671272.330 ops/s
Iteration  22: 270346261.701 ops/s
Iteration  23: 272044882.617 ops/s
Iteration  24: 271245772.775 ops/s
Iteration  25: 270419696.066 ops/s
Iteration  26: 269097474.076 ops/s
Iteration  27: 270872437.758 ops/s
Iteration  28: 270849363.212 ops/s
Iteration  29: 270974723.160 ops/s
Iteration  30: 271181056.355 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_occurrencesOf":
  270451124.903 ±(99.9%) 996558.163 ops/s [Average]
  (min, avg, max) = (265834402.256, 270451124.903, 272111690.779), stdev = 1491601.456
  CI (99.9%): [269454566.740, 271447683.065] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  270451124.903 ± 996558.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6551738.322 ops/s
# Warmup Iteration   2: 12221330.822 ops/s
# Warmup Iteration   3: 11397619.749 ops/s
# Warmup Iteration   4: 12825653.765 ops/s
# Warmup Iteration   5: 12783401.831 ops/s
# Warmup Iteration   6: 12804783.270 ops/s
# Warmup Iteration   7: 12787638.528 ops/s
# Warmup Iteration   8: 12755849.370 ops/s
# Warmup Iteration   9: 12737303.245 ops/s
# Warmup Iteration  10: 12755661.156 ops/s
# Warmup Iteration  11: 12724599.716 ops/s
# Warmup Iteration  12: 12808768.872 ops/s
# Warmup Iteration  13: 12796503.941 ops/s
# Warmup Iteration  14: 12758895.408 ops/s
# Warmup Iteration  15: 12816020.057 ops/s
# Warmup Iteration  16: 12774605.489 ops/s
# Warmup Iteration  17: 12767611.634 ops/s
# Warmup Iteration  18: 12779473.102 ops/s
# Warmup Iteration  19: 12746760.034 ops/s
# Warmup Iteration  20: 12775296.727 ops/s
# Warmup Iteration  21: 12737878.203 ops/s
# Warmup Iteration  22: 12720271.277 ops/s
# Warmup Iteration  23: 12809573.075 ops/s
# Warmup Iteration  24: 12776041.126 ops/s
# Warmup Iteration  25: 12702421.753 ops/s
# Warmup Iteration  26: 12798490.806 ops/s
# Warmup Iteration  27: 12766833.320 ops/s
# Warmup Iteration  28: 12814927.847 ops/s
# Warmup Iteration  29: 12802619.255 ops/s
# Warmup Iteration  30: 12760734.472 ops/s
Iteration   1: 12824829.302 ops/s
Iteration   2: 12807820.913 ops/s
Iteration   3: 12815733.228 ops/s
Iteration   4: 12785215.838 ops/s
Iteration   5: 12756923.219 ops/s
Iteration   6: 12769920.536 ops/s
Iteration   7: 12615915.918 ops/s
Iteration   8: 12706405.646 ops/s
Iteration   9: 12610118.899 ops/s
Iteration  10: 12716385.247 ops/s
Iteration  11: 12679214.564 ops/s
Iteration  12: 12748913.341 ops/s
Iteration  13: 12727705.510 ops/s
Iteration  14: 12748042.718 ops/s
Iteration  15: 12730880.040 ops/s
Iteration  16: 12760849.413 ops/s
Iteration  17: 12802496.061 ops/s
Iteration  18: 12789327.495 ops/s
Iteration  19: 12719554.741 ops/s
Iteration  20: 12677743.121 ops/s
Iteration  21: 12810874.535 ops/s
Iteration  22: 12717852.917 ops/s
Iteration  23: 12775783.726 ops/s
Iteration  24: 12713239.703 ops/s
Iteration  25: 12728647.674 ops/s
Iteration  26: 12772798.800 ops/s
Iteration  27: 12682445.609 ops/s
Iteration  28: 12722526.069 ops/s
Iteration  29: 12702644.962 ops/s
Iteration  30: 12765146.545 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduce":
  12739531.876 ±(99.9%) 36001.298 ops/s [Average]
  (min, avg, max) = (12610118.899, 12739531.876, 12824829.302), stdev = 53885.052
  CI (99.9%): [12703530.579, 12775533.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduce  thrpt   30  12739531.876 ± 36001.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6505761.352 ops/s
# Warmup Iteration   2: 12248720.175 ops/s
# Warmup Iteration   3: 11176170.388 ops/s
# Warmup Iteration   4: 12697009.947 ops/s
# Warmup Iteration   5: 12699308.335 ops/s
# Warmup Iteration   6: 12706291.489 ops/s
# Warmup Iteration   7: 12722287.613 ops/s
# Warmup Iteration   8: 12782106.961 ops/s
# Warmup Iteration   9: 12732437.673 ops/s
# Warmup Iteration  10: 12762263.170 ops/s
# Warmup Iteration  11: 12705840.514 ops/s
# Warmup Iteration  12: 12698524.141 ops/s
# Warmup Iteration  13: 12768145.648 ops/s
# Warmup Iteration  14: 12727715.910 ops/s
# Warmup Iteration  15: 12784611.615 ops/s
# Warmup Iteration  16: 12739298.101 ops/s
# Warmup Iteration  17: 12696008.905 ops/s
# Warmup Iteration  18: 12711548.745 ops/s
# Warmup Iteration  19: 12679808.699 ops/s
# Warmup Iteration  20: 12722612.659 ops/s
# Warmup Iteration  21: 12700236.867 ops/s
# Warmup Iteration  22: 12774855.973 ops/s
# Warmup Iteration  23: 12730108.303 ops/s
# Warmup Iteration  24: 12701477.633 ops/s
# Warmup Iteration  25: 12694817.276 ops/s
# Warmup Iteration  26: 12725293.278 ops/s
# Warmup Iteration  27: 12717413.643 ops/s
# Warmup Iteration  28: 12735060.310 ops/s
# Warmup Iteration  29: 12682929.805 ops/s
# Warmup Iteration  30: 12718070.629 ops/s
Iteration   1: 12713870.217 ops/s
Iteration   2: 12679395.379 ops/s
Iteration   3: 12676459.302 ops/s
Iteration   4: 12651224.421 ops/s
Iteration   5: 12724818.857 ops/s
Iteration   6: 12712486.882 ops/s
Iteration   7: 12734031.492 ops/s
Iteration   8: 12677219.782 ops/s
Iteration   9: 12729076.920 ops/s
Iteration  10: 12775829.628 ops/s
Iteration  11: 12709801.165 ops/s
Iteration  12: 12750323.925 ops/s
Iteration  13: 12744511.651 ops/s
Iteration  14: 12736713.511 ops/s
Iteration  15: 12715300.499 ops/s
Iteration  16: 12534265.487 ops/s
Iteration  17: 12767671.822 ops/s
Iteration  18: 12643713.079 ops/s
Iteration  19: 12737821.652 ops/s
Iteration  20: 12709865.569 ops/s
Iteration  21: 12758575.441 ops/s
Iteration  22: 12744587.576 ops/s
Iteration  23: 12732971.707 ops/s
Iteration  24: 12759534.638 ops/s
Iteration  25: 12689380.189 ops/s
Iteration  26: 12697419.609 ops/s
Iteration  27: 12723628.800 ops/s
Iteration  28: 12727878.611 ops/s
Iteration  29: 12702152.430 ops/s
Iteration  30: 12705463.030 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceIfEmpty":
  12712199.776 ±(99.9%) 31042.419 ops/s [Average]
  (min, avg, max) = (12534265.487, 12712199.776, 12775829.628), stdev = 46462.835
  CI (99.9%): [12681157.357, 12743242.195] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  12712199.776 ± 31042.419  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834568.509 ops/s
# Warmup Iteration   2: 845192.576 ops/s
# Warmup Iteration   3: 1028721.585 ops/s
# Warmup Iteration   4: 1076888.945 ops/s
# Warmup Iteration   5: 1069319.859 ops/s
# Warmup Iteration   6: 1079200.956 ops/s
# Warmup Iteration   7: 1081674.569 ops/s
# Warmup Iteration   8: 1077647.749 ops/s
# Warmup Iteration   9: 1080451.605 ops/s
# Warmup Iteration  10: 1076544.090 ops/s
# Warmup Iteration  11: 1079474.648 ops/s
# Warmup Iteration  12: 1075834.478 ops/s
# Warmup Iteration  13: 915923.641 ops/s
# Warmup Iteration  14: 1065609.831 ops/s
# Warmup Iteration  15: 1076717.583 ops/s
# Warmup Iteration  16: 1071888.037 ops/s
# Warmup Iteration  17: 1142616.672 ops/s
# Warmup Iteration  18: 1143334.038 ops/s
# Warmup Iteration  19: 1147204.039 ops/s
# Warmup Iteration  20: 1144681.119 ops/s
# Warmup Iteration  21: 1136067.974 ops/s
# Warmup Iteration  22: 1135543.638 ops/s
# Warmup Iteration  23: 1144610.396 ops/s
# Warmup Iteration  24: 1138474.626 ops/s
# Warmup Iteration  25: 1148523.973 ops/s
# Warmup Iteration  26: 1147819.855 ops/s
# Warmup Iteration  27: 1148777.531 ops/s
# Warmup Iteration  28: 1142829.806 ops/s
# Warmup Iteration  29: 1144367.091 ops/s
# Warmup Iteration  30: 1138440.341 ops/s
Iteration   1: 1141220.904 ops/s
Iteration   2: 1147373.979 ops/s
Iteration   3: 1143278.300 ops/s
Iteration   4: 1146919.151 ops/s
Iteration   5: 1148001.817 ops/s
Iteration   6: 1143323.370 ops/s
Iteration   7: 1146425.107 ops/s
Iteration   8: 1146236.317 ops/s
Iteration   9: 1145293.999 ops/s
Iteration  10: 1138657.204 ops/s
Iteration  11: 1146739.011 ops/s
Iteration  12: 1146240.937 ops/s
Iteration  13: 1147430.069 ops/s
Iteration  14: 1144694.476 ops/s
Iteration  15: 1146155.143 ops/s
Iteration  16: 1144666.256 ops/s
Iteration  17: 1145217.553 ops/s
Iteration  18: 1140746.432 ops/s
Iteration  19: 1142086.281 ops/s
Iteration  20: 1141865.858 ops/s
Iteration  21: 1147235.977 ops/s
Iteration  22: 1140716.446 ops/s
Iteration  23: 1127839.735 ops/s
Iteration  24: 1144623.124 ops/s
Iteration  25: 1147272.015 ops/s
Iteration  26: 1147831.445 ops/s
Iteration  27: 1145043.838 ops/s
Iteration  28: 1147889.602 ops/s
Iteration  29: 1146145.539 ops/s
Iteration  30: 1150025.971 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1144573.195 ±(99.9%) 2750.026 ops/s [Average]
  (min, avg, max) = (1127839.735, 1144573.195, 1150025.971), stdev = 4116.111
  CI (99.9%): [1141823.169, 1147323.222] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1144573.195 ± 2750.026  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2905455.110 ops/s
# Warmup Iteration   2: 6411406.610 ops/s
# Warmup Iteration   3: 5377416.923 ops/s
# Warmup Iteration   4: 6327059.537 ops/s
# Warmup Iteration   5: 6365177.456 ops/s
# Warmup Iteration   6: 6367498.296 ops/s
# Warmup Iteration   7: 6349306.022 ops/s
# Warmup Iteration   8: 6350708.960 ops/s
# Warmup Iteration   9: 6385095.022 ops/s
# Warmup Iteration  10: 6381608.744 ops/s
# Warmup Iteration  11: 6370273.589 ops/s
# Warmup Iteration  12: 6369434.183 ops/s
# Warmup Iteration  13: 6392185.034 ops/s
# Warmup Iteration  14: 6352446.686 ops/s
# Warmup Iteration  15: 6354830.011 ops/s
# Warmup Iteration  16: 6367752.381 ops/s
# Warmup Iteration  17: 6349065.282 ops/s
# Warmup Iteration  18: 6328009.370 ops/s
# Warmup Iteration  19: 6361644.543 ops/s
# Warmup Iteration  20: 6348270.975 ops/s
# Warmup Iteration  21: 6375626.145 ops/s
# Warmup Iteration  22: 6364733.511 ops/s
# Warmup Iteration  23: 6343879.228 ops/s
# Warmup Iteration  24: 6382344.041 ops/s
# Warmup Iteration  25: 6373284.085 ops/s
# Warmup Iteration  26: 6362057.718 ops/s
# Warmup Iteration  27: 6398739.044 ops/s
# Warmup Iteration  28: 6363101.490 ops/s
# Warmup Iteration  29: 6347940.862 ops/s
# Warmup Iteration  30: 6387997.808 ops/s
Iteration   1: 6402516.591 ops/s
Iteration   2: 6370248.794 ops/s
Iteration   3: 6391353.027 ops/s
Iteration   4: 6405287.681 ops/s
Iteration   5: 6352207.924 ops/s
Iteration   6: 6362776.996 ops/s
Iteration   7: 6407387.261 ops/s
Iteration   8: 6397620.011 ops/s
Iteration   9: 6371267.606 ops/s
Iteration  10: 6371855.472 ops/s
Iteration  11: 6345300.813 ops/s
Iteration  12: 6398932.070 ops/s
Iteration  13: 6365563.751 ops/s
Iteration  14: 6346023.935 ops/s
Iteration  15: 6374624.267 ops/s
Iteration  16: 6409012.970 ops/s
Iteration  17: 6410654.633 ops/s
Iteration  18: 6398655.885 ops/s
Iteration  19: 6399954.294 ops/s
Iteration  20: 6368977.863 ops/s
Iteration  21: 6361341.868 ops/s
Iteration  22: 6379145.343 ops/s
Iteration  23: 6392010.432 ops/s
Iteration  24: 6280885.150 ops/s
Iteration  25: 6413056.062 ops/s
Iteration  26: 6389056.874 ops/s
Iteration  27: 6377569.322 ops/s
Iteration  28: 6292672.250 ops/s
Iteration  29: 6396496.966 ops/s
Iteration  30: 6400386.152 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reject":
  6377761.409 ±(99.9%) 21093.653 ops/s [Average]
  (min, avg, max) = (6280885.150, 6377761.409, 6413056.062), stdev = 31571.989
  CI (99.9%): [6356667.756, 6398855.062] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_reject  thrpt   30  6377761.409 ± 21093.653  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2842662.812 ops/s
# Warmup Iteration   2: 6372355.562 ops/s
# Warmup Iteration   3: 5443912.748 ops/s
# Warmup Iteration   4: 6285146.657 ops/s
# Warmup Iteration   5: 6449047.695 ops/s
# Warmup Iteration   6: 6375248.797 ops/s
# Warmup Iteration   7: 6434529.119 ops/s
# Warmup Iteration   8: 6449549.362 ops/s
# Warmup Iteration   9: 6415166.015 ops/s
# Warmup Iteration  10: 6424954.285 ops/s
# Warmup Iteration  11: 6429550.206 ops/s
# Warmup Iteration  12: 6387683.183 ops/s
# Warmup Iteration  13: 6435701.048 ops/s
# Warmup Iteration  14: 6425419.615 ops/s
# Warmup Iteration  15: 6345843.206 ops/s
# Warmup Iteration  16: 6449090.904 ops/s
# Warmup Iteration  17: 6440457.191 ops/s
# Warmup Iteration  18: 6447635.000 ops/s
# Warmup Iteration  19: 6433044.323 ops/s
# Warmup Iteration  20: 6450283.873 ops/s
# Warmup Iteration  21: 6397086.685 ops/s
# Warmup Iteration  22: 6413620.034 ops/s
# Warmup Iteration  23: 6454254.876 ops/s
# Warmup Iteration  24: 6448145.356 ops/s
# Warmup Iteration  25: 6410407.160 ops/s
# Warmup Iteration  26: 6374728.949 ops/s
# Warmup Iteration  27: 6448898.935 ops/s
# Warmup Iteration  28: 6457422.824 ops/s
# Warmup Iteration  29: 6429193.070 ops/s
# Warmup Iteration  30: 6425123.182 ops/s
Iteration   1: 6434808.950 ops/s
Iteration   2: 6444241.341 ops/s
Iteration   3: 6412926.249 ops/s
Iteration   4: 6443808.656 ops/s
Iteration   5: 6443534.064 ops/s
Iteration   6: 6430732.789 ops/s
Iteration   7: 6398375.214 ops/s
Iteration   8: 6453347.134 ops/s
Iteration   9: 6426746.321 ops/s
Iteration  10: 6444603.881 ops/s
Iteration  11: 6394691.013 ops/s
Iteration  12: 6428247.373 ops/s
Iteration  13: 6432920.612 ops/s
Iteration  14: 6441357.821 ops/s
Iteration  15: 6346271.689 ops/s
Iteration  16: 6468015.300 ops/s
Iteration  17: 6453091.196 ops/s
Iteration  18: 6460428.670 ops/s
Iteration  19: 6473707.791 ops/s
Iteration  20: 6399384.602 ops/s
Iteration  21: 6450251.974 ops/s
Iteration  22: 6412731.587 ops/s
Iteration  23: 6417061.268 ops/s
Iteration  24: 6450205.805 ops/s
Iteration  25: 6408093.756 ops/s
Iteration  26: 6445990.989 ops/s
Iteration  27: 6445994.270 ops/s
Iteration  28: 6457525.872 ops/s
Iteration  29: 6434343.584 ops/s
Iteration  30: 6433108.376 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_select":
  6432884.938 ±(99.9%) 17379.161 ops/s [Average]
  (min, avg, max) = (6346271.689, 6432884.938, 6473707.791), stdev = 26012.312
  CI (99.9%): [6415505.777, 6450264.099] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_select  thrpt   30  6432884.938 ± 17379.161  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21521812.943 ops/s
# Warmup Iteration   2: 34912706.961 ops/s
# Warmup Iteration   3: 42539414.794 ops/s
# Warmup Iteration   4: 42645226.405 ops/s
# Warmup Iteration   5: 42195810.817 ops/s
# Warmup Iteration   6: 42548041.333 ops/s
# Warmup Iteration   7: 42665314.696 ops/s
# Warmup Iteration   8: 42543817.022 ops/s
# Warmup Iteration   9: 42459635.767 ops/s
# Warmup Iteration  10: 42675903.875 ops/s
# Warmup Iteration  11: 42648104.434 ops/s
# Warmup Iteration  12: 42683740.670 ops/s
# Warmup Iteration  13: 42212072.304 ops/s
# Warmup Iteration  14: 42712314.761 ops/s
# Warmup Iteration  15: 42614537.198 ops/s
# Warmup Iteration  16: 42253886.756 ops/s
# Warmup Iteration  17: 42764135.318 ops/s
# Warmup Iteration  18: 42517143.582 ops/s
# Warmup Iteration  19: 42270102.987 ops/s
# Warmup Iteration  20: 42171772.959 ops/s
# Warmup Iteration  21: 42634986.994 ops/s
# Warmup Iteration  22: 42557919.547 ops/s
# Warmup Iteration  23: 42505672.297 ops/s
# Warmup Iteration  24: 42813013.105 ops/s
# Warmup Iteration  25: 42246204.949 ops/s
# Warmup Iteration  26: 42504609.160 ops/s
# Warmup Iteration  27: 42769486.431 ops/s
# Warmup Iteration  28: 42660311.836 ops/s
# Warmup Iteration  29: 42730583.385 ops/s
# Warmup Iteration  30: 42709183.167 ops/s
Iteration   1: 42674117.315 ops/s
Iteration   2: 42786493.980 ops/s
Iteration   3: 42798477.169 ops/s
Iteration   4: 42762261.486 ops/s
Iteration   5: 42741659.473 ops/s
Iteration   6: 42727558.438 ops/s
Iteration   7: 42683563.949 ops/s
Iteration   8: 42631310.594 ops/s
Iteration   9: 42557773.988 ops/s
Iteration  10: 42375848.519 ops/s
Iteration  11: 42374748.950 ops/s
Iteration  12: 42723935.424 ops/s
Iteration  13: 42789648.461 ops/s
Iteration  14: 42979516.556 ops/s
Iteration  15: 42577256.749 ops/s
Iteration  16: 42698318.985 ops/s
Iteration  17: 42469947.628 ops/s
Iteration  18: 42826148.498 ops/s
Iteration  19: 42267280.595 ops/s
Iteration  20: 42613762.355 ops/s
Iteration  21: 42817932.559 ops/s
Iteration  22: 42480169.479 ops/s
Iteration  23: 42843659.021 ops/s
Iteration  24: 42813452.972 ops/s
Iteration  25: 42822786.090 ops/s
Iteration  26: 42393659.477 ops/s
Iteration  27: 42597139.733 ops/s
Iteration  28: 42611142.923 ops/s
Iteration  29: 42400175.801 ops/s
Iteration  30: 41812135.303 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_selectUnique":
  42621729.416 ±(99.9%) 154119.925 ops/s [Average]
  (min, avg, max) = (41812135.303, 42621729.416, 42979516.556), stdev = 230679.466
  CI (99.9%): [42467609.491, 42775849.341] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_selectUnique  thrpt   30  42621729.416 ± 154119.925  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33450051.075 ops/s
# Warmup Iteration   2: 52227492.079 ops/s
# Warmup Iteration   3: 60300712.875 ops/s
# Warmup Iteration   4: 60557127.119 ops/s
# Warmup Iteration   5: 60221129.898 ops/s
# Warmup Iteration   6: 60599448.235 ops/s
# Warmup Iteration   7: 60608043.280 ops/s
# Warmup Iteration   8: 60624179.588 ops/s
# Warmup Iteration   9: 60290500.032 ops/s
# Warmup Iteration  10: 60566907.054 ops/s
# Warmup Iteration  11: 60632790.684 ops/s
# Warmup Iteration  12: 60813304.682 ops/s
# Warmup Iteration  13: 60687788.653 ops/s
# Warmup Iteration  14: 60582712.743 ops/s
# Warmup Iteration  15: 60507576.759 ops/s
# Warmup Iteration  16: 60371633.424 ops/s
# Warmup Iteration  17: 60616758.033 ops/s
# Warmup Iteration  18: 60894235.413 ops/s
# Warmup Iteration  19: 60824747.480 ops/s
# Warmup Iteration  20: 60682336.837 ops/s
# Warmup Iteration  21: 60633240.069 ops/s
# Warmup Iteration  22: 60797991.946 ops/s
# Warmup Iteration  23: 60559199.834 ops/s
# Warmup Iteration  24: 60468078.753 ops/s
# Warmup Iteration  25: 60616930.705 ops/s
# Warmup Iteration  26: 60337576.343 ops/s
# Warmup Iteration  27: 60469559.170 ops/s
# Warmup Iteration  28: 60501287.308 ops/s
# Warmup Iteration  29: 60155138.828 ops/s
# Warmup Iteration  30: 60250634.090 ops/s
Iteration   1: 60496284.266 ops/s
Iteration   2: 61031481.375 ops/s
Iteration   3: 60872822.126 ops/s
Iteration   4: 60801295.458 ops/s
Iteration   5: 60247671.366 ops/s
Iteration   6: 61035855.951 ops/s
Iteration   7: 60914880.811 ops/s
Iteration   8: 59996879.563 ops/s
Iteration   9: 59859397.171 ops/s
Iteration  10: 60660558.185 ops/s
Iteration  11: 60982972.018 ops/s
Iteration  12: 58772046.554 ops/s
Iteration  13: 61202503.477 ops/s
Iteration  14: 61094173.511 ops/s
Iteration  15: 60963305.620 ops/s
Iteration  16: 59953597.252 ops/s
Iteration  17: 60839524.079 ops/s
Iteration  18: 60860335.982 ops/s
Iteration  19: 60548611.730 ops/s
Iteration  20: 60760300.209 ops/s
Iteration  21: 60667431.190 ops/s
Iteration  22: 61002267.990 ops/s
Iteration  23: 59883055.575 ops/s
Iteration  24: 60640863.479 ops/s
Iteration  25: 60735249.355 ops/s
Iteration  26: 60668543.161 ops/s
Iteration  27: 60771562.168 ops/s
Iteration  28: 60424889.876 ops/s
Iteration  29: 61116233.695 ops/s
Iteration  30: 60902229.202 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_size":
  60623560.747 ±(99.9%) 340807.244 ops/s [Average]
  (min, avg, max) = (58772046.554, 60623560.747, 61202503.477), stdev = 510104.278
  CI (99.9%): [60282753.502, 60964367.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_size  thrpt   30  60623560.747 ± 340807.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15855919.801 ops/s
# Warmup Iteration   2: 31383656.787 ops/s
# Warmup Iteration   3: 26513507.993 ops/s
# Warmup Iteration   4: 31029331.866 ops/s
# Warmup Iteration   5: 31423326.987 ops/s
# Warmup Iteration   6: 31342738.741 ops/s
# Warmup Iteration   7: 31248097.476 ops/s
# Warmup Iteration   8: 31291444.219 ops/s
# Warmup Iteration   9: 31303033.182 ops/s
# Warmup Iteration  10: 31288154.736 ops/s
# Warmup Iteration  11: 31285271.708 ops/s
# Warmup Iteration  12: 31382371.522 ops/s
# Warmup Iteration  13: 31380880.690 ops/s
# Warmup Iteration  14: 31405695.341 ops/s
# Warmup Iteration  15: 31230298.910 ops/s
# Warmup Iteration  16: 31358975.788 ops/s
# Warmup Iteration  17: 31500520.363 ops/s
# Warmup Iteration  18: 31158452.073 ops/s
# Warmup Iteration  19: 31047034.964 ops/s
# Warmup Iteration  20: 31395953.863 ops/s
# Warmup Iteration  21: 31345984.160 ops/s
# Warmup Iteration  22: 31298775.733 ops/s
# Warmup Iteration  23: 31412206.619 ops/s
# Warmup Iteration  24: 31356371.787 ops/s
# Warmup Iteration  25: 31261955.975 ops/s
# Warmup Iteration  26: 31357248.037 ops/s
# Warmup Iteration  27: 31392969.177 ops/s
# Warmup Iteration  28: 31321110.221 ops/s
# Warmup Iteration  29: 31125547.096 ops/s
# Warmup Iteration  30: 31088154.597 ops/s
Iteration   1: 31331513.950 ops/s
Iteration   2: 30848502.135 ops/s
Iteration   3: 31235900.237 ops/s
Iteration   4: 31230531.787 ops/s
Iteration   5: 31378970.335 ops/s
Iteration   6: 31326399.758 ops/s
Iteration   7: 31213581.498 ops/s
Iteration   8: 31271266.013 ops/s
Iteration   9: 31282077.021 ops/s
Iteration  10: 31259412.336 ops/s
Iteration  11: 31348856.932 ops/s
Iteration  12: 31462663.243 ops/s
Iteration  13: 31363146.831 ops/s
Iteration  14: 31194004.918 ops/s
Iteration  15: 31370331.959 ops/s
Iteration  16: 31301573.315 ops/s
Iteration  17: 31446790.014 ops/s
Iteration  18: 31414558.968 ops/s
Iteration  19: 31315194.109 ops/s
Iteration  20: 30876719.925 ops/s
Iteration  21: 31302232.417 ops/s
Iteration  22: 31425655.338 ops/s
Iteration  23: 31332287.371 ops/s
Iteration  24: 31229427.593 ops/s
Iteration  25: 31300156.850 ops/s
Iteration  26: 31368731.134 ops/s
Iteration  27: 31129009.706 ops/s
Iteration  28: 31295077.806 ops/s
Iteration  29: 31082355.381 ops/s
Iteration  30: 31206101.844 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_sizeDistinct":
  31271434.357 ±(99.9%) 94613.127 ops/s [Average]
  (min, avg, max) = (30848502.135, 31271434.357, 31462663.243), stdev = 141612.486
  CI (99.9%): [31176821.230, 31366047.485] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  31271434.357 ± 94613.127  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25998.339 ops/s
# Warmup Iteration   2: 43540.317 ops/s
# Warmup Iteration   3: 52308.095 ops/s
# Warmup Iteration   4: 52123.072 ops/s
# Warmup Iteration   5: 51828.947 ops/s
# Warmup Iteration   6: 44901.946 ops/s
# Warmup Iteration   7: 52398.297 ops/s
# Warmup Iteration   8: 51586.592 ops/s
# Warmup Iteration   9: 52447.669 ops/s
# Warmup Iteration  10: 52294.080 ops/s
# Warmup Iteration  11: 52554.500 ops/s
# Warmup Iteration  12: 52591.789 ops/s
# Warmup Iteration  13: 52512.959 ops/s
# Warmup Iteration  14: 52701.886 ops/s
# Warmup Iteration  15: 51985.259 ops/s
# Warmup Iteration  16: 52468.428 ops/s
# Warmup Iteration  17: 52514.918 ops/s
# Warmup Iteration  18: 52489.608 ops/s
# Warmup Iteration  19: 52337.260 ops/s
# Warmup Iteration  20: 52474.499 ops/s
# Warmup Iteration  21: 52433.174 ops/s
# Warmup Iteration  22: 52564.587 ops/s
# Warmup Iteration  23: 52493.459 ops/s
# Warmup Iteration  24: 52524.388 ops/s
# Warmup Iteration  25: 52470.245 ops/s
# Warmup Iteration  26: 52345.217 ops/s
# Warmup Iteration  27: 52441.461 ops/s
# Warmup Iteration  28: 52476.100 ops/s
# Warmup Iteration  29: 52219.829 ops/s
# Warmup Iteration  30: 52173.203 ops/s
Iteration   1: 52589.360 ops/s
Iteration   2: 52333.404 ops/s
Iteration   3: 52381.443 ops/s
Iteration   4: 52355.511 ops/s
Iteration   5: 52366.396 ops/s
Iteration   6: 52405.318 ops/s
Iteration   7: 52305.681 ops/s
Iteration   8: 52666.437 ops/s
Iteration   9: 52304.373 ops/s
Iteration  10: 52568.275 ops/s
Iteration  11: 52580.544 ops/s
Iteration  12: 52504.502 ops/s
Iteration  13: 52706.131 ops/s
Iteration  14: 52256.854 ops/s
Iteration  15: 51991.558 ops/s
Iteration  16: 51890.251 ops/s
Iteration  17: 52372.307 ops/s
Iteration  18: 52061.877 ops/s
Iteration  19: 52271.139 ops/s
Iteration  20: 52376.705 ops/s
Iteration  21: 52334.071 ops/s
Iteration  22: 52190.412 ops/s
Iteration  23: 52283.708 ops/s
Iteration  24: 52338.086 ops/s
Iteration  25: 52026.950 ops/s
Iteration  26: 52419.527 ops/s
Iteration  27: 51833.702 ops/s
Iteration  28: 52520.175 ops/s
Iteration  29: 52191.826 ops/s
Iteration  30: 52495.400 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testEquals":
  52330.731 ±(99.9%) 142.894 ops/s [Average]
  (min, avg, max) = (51833.702, 52330.731, 52706.131), stdev = 213.877
  CI (99.9%): [52187.837, 52473.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testEquals  thrpt   30  52330.731 ± 142.894  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 924361.211 ops/s
# Warmup Iteration   2: 2374959.498 ops/s
# Warmup Iteration   3: 2149846.942 ops/s
# Warmup Iteration   4: 2224378.200 ops/s
# Warmup Iteration   5: 2396699.440 ops/s
# Warmup Iteration   6: 2394693.479 ops/s
# Warmup Iteration   7: 2396437.817 ops/s
# Warmup Iteration   8: 2396295.221 ops/s
# Warmup Iteration   9: 2395474.396 ops/s
# Warmup Iteration  10: 2391743.824 ops/s
# Warmup Iteration  11: 2369210.538 ops/s
# Warmup Iteration  12: 2371445.769 ops/s
# Warmup Iteration  13: 2393317.850 ops/s
# Warmup Iteration  14: 2396633.253 ops/s
# Warmup Iteration  15: 2397163.534 ops/s
# Warmup Iteration  16: 2398861.223 ops/s
# Warmup Iteration  17: 2389577.146 ops/s
# Warmup Iteration  18: 2391098.611 ops/s
# Warmup Iteration  19: 2396898.944 ops/s
# Warmup Iteration  20: 2395890.129 ops/s
# Warmup Iteration  21: 2395144.593 ops/s
# Warmup Iteration  22: 2396465.765 ops/s
# Warmup Iteration  23: 2397935.818 ops/s
# Warmup Iteration  24: 2396650.580 ops/s
# Warmup Iteration  25: 2394357.961 ops/s
# Warmup Iteration  26: 2396718.505 ops/s
# Warmup Iteration  27: 2394592.266 ops/s
# Warmup Iteration  28: 2392457.726 ops/s
# Warmup Iteration  29: 2398810.636 ops/s
# Warmup Iteration  30: 2394826.009 ops/s
Iteration   1: 2397537.638 ops/s
Iteration   2: 2391087.166 ops/s
Iteration   3: 2395281.485 ops/s
Iteration   4: 2403739.057 ops/s
Iteration   5: 2393734.452 ops/s
Iteration   6: 2398161.197 ops/s
Iteration   7: 2393688.943 ops/s
Iteration   8: 2390618.031 ops/s
Iteration   9: 2394061.983 ops/s
Iteration  10: 2395603.892 ops/s
Iteration  11: 2402718.882 ops/s
Iteration  12: 2396170.396 ops/s
Iteration  13: 2398747.394 ops/s
Iteration  14: 2398281.156 ops/s
Iteration  15: 2396434.914 ops/s
Iteration  16: 2395247.770 ops/s
Iteration  17: 2401324.781 ops/s
Iteration  18: 2404721.288 ops/s
Iteration  19: 2402082.188 ops/s
Iteration  20: 2397581.322 ops/s
Iteration  21: 2396202.066 ops/s
Iteration  22: 2396187.323 ops/s
Iteration  23: 2404405.816 ops/s
Iteration  24: 2403625.231 ops/s
Iteration  25: 2400167.426 ops/s
Iteration  26: 2386290.558 ops/s
Iteration  27: 2400032.136 ops/s
Iteration  28: 2400213.726 ops/s
Iteration  29: 2396351.149 ops/s
Iteration  30: 2393898.851 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testHashCode":
  2397473.274 ±(99.9%) 2913.488 ops/s [Average]
  (min, avg, max) = (2386290.558, 2397473.274, 2404721.288), stdev = 4360.772
  CI (99.9%): [2394559.786, 2400386.762] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testHashCode  thrpt   30  2397473.274 ± 2913.488  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 804594.948 ops/s
# Warmup Iteration   2: 2278915.398 ops/s
# Warmup Iteration   3: 2406164.198 ops/s
# Warmup Iteration   4: 2103804.155 ops/s
# Warmup Iteration   5: 2252996.076 ops/s
# Warmup Iteration   6: 2409699.391 ops/s
# Warmup Iteration   7: 2410551.409 ops/s
# Warmup Iteration   8: 2407137.938 ops/s
# Warmup Iteration   9: 2401885.693 ops/s
# Warmup Iteration  10: 2413070.801 ops/s
# Warmup Iteration  11: 2402641.047 ops/s
# Warmup Iteration  12: 2405003.563 ops/s
# Warmup Iteration  13: 2406760.189 ops/s
# Warmup Iteration  14: 2398791.205 ops/s
# Warmup Iteration  15: 2406711.842 ops/s
# Warmup Iteration  16: 2414802.938 ops/s
# Warmup Iteration  17: 2399049.197 ops/s
# Warmup Iteration  18: 2403671.214 ops/s
# Warmup Iteration  19: 2411801.114 ops/s
# Warmup Iteration  20: 2411284.682 ops/s
# Warmup Iteration  21: 2406232.104 ops/s
# Warmup Iteration  22: 2413439.927 ops/s
# Warmup Iteration  23: 2404422.772 ops/s
# Warmup Iteration  24: 2407894.847 ops/s
# Warmup Iteration  25: 2408085.552 ops/s
# Warmup Iteration  26: 2401743.409 ops/s
# Warmup Iteration  27: 2407382.461 ops/s
# Warmup Iteration  28: 2405067.553 ops/s
# Warmup Iteration  29: 2404377.660 ops/s
# Warmup Iteration  30: 2409247.047 ops/s
Iteration   1: 2400748.545 ops/s
Iteration   2: 2393226.951 ops/s
Iteration   3: 2403840.568 ops/s
Iteration   4: 2405638.466 ops/s
Iteration   5: 2396938.229 ops/s
Iteration   6: 2414374.867 ops/s
Iteration   7: 2412400.109 ops/s
Iteration   8: 2393488.555 ops/s
Iteration   9: 2405729.167 ops/s
Iteration  10: 2409052.869 ops/s
Iteration  11: 2403859.031 ops/s
Iteration  12: 2408474.304 ops/s
Iteration  13: 2413051.403 ops/s
Iteration  14: 2405981.233 ops/s
Iteration  15: 2402065.802 ops/s
Iteration  16: 2411716.544 ops/s
Iteration  17: 2407721.197 ops/s
Iteration  18: 2404374.452 ops/s
Iteration  19: 2409921.973 ops/s
Iteration  20: 2404644.551 ops/s
Iteration  21: 2403415.347 ops/s
Iteration  22: 2400511.573 ops/s
Iteration  23: 2415524.540 ops/s
Iteration  24: 2414264.805 ops/s
Iteration  25: 2397119.581 ops/s
Iteration  26: 2413299.476 ops/s
Iteration  27: 2408636.896 ops/s
Iteration  28: 2402472.005 ops/s
Iteration  29: 2412718.785 ops/s
Iteration  30: 2399068.123 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testNewWith":
  2405809.332 ±(99.9%) 4162.300 ops/s [Average]
  (min, avg, max) = (2393226.951, 2405809.332, 2415524.540), stdev = 6229.935
  CI (99.9%): [2401647.032, 2409971.631] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testNewWith  thrpt   30  2405809.332 ± 4162.300  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1973276.367 ops/s
# Warmup Iteration   2: 4182442.893 ops/s
# Warmup Iteration   3: 3968298.383 ops/s
# Warmup Iteration   4: 3740302.854 ops/s
# Warmup Iteration   5: 4176403.372 ops/s
# Warmup Iteration   6: 4190298.743 ops/s
# Warmup Iteration   7: 4205185.053 ops/s
# Warmup Iteration   8: 4194195.769 ops/s
# Warmup Iteration   9: 4213767.375 ops/s
# Warmup Iteration  10: 4192539.391 ops/s
# Warmup Iteration  11: 4188421.699 ops/s
# Warmup Iteration  12: 4190059.661 ops/s
# Warmup Iteration  13: 4204508.834 ops/s
# Warmup Iteration  14: 4187386.762 ops/s
# Warmup Iteration  15: 4198101.402 ops/s
# Warmup Iteration  16: 4197695.856 ops/s
# Warmup Iteration  17: 4206613.899 ops/s
# Warmup Iteration  18: 4206947.812 ops/s
# Warmup Iteration  19: 4196236.782 ops/s
# Warmup Iteration  20: 4198504.589 ops/s
# Warmup Iteration  21: 4217590.281 ops/s
# Warmup Iteration  22: 4187636.103 ops/s
# Warmup Iteration  23: 4211159.729 ops/s
# Warmup Iteration  24: 4211374.630 ops/s
# Warmup Iteration  25: 4231378.499 ops/s
# Warmup Iteration  26: 4209135.703 ops/s
# Warmup Iteration  27: 4190667.900 ops/s
# Warmup Iteration  28: 4213102.848 ops/s
# Warmup Iteration  29: 4200194.623 ops/s
# Warmup Iteration  30: 4212435.012 ops/s
Iteration   1: 4202965.462 ops/s
Iteration   2: 4188442.519 ops/s
Iteration   3: 4204710.095 ops/s
Iteration   4: 4198414.752 ops/s
Iteration   5: 4230050.303 ops/s
Iteration   6: 4185596.079 ops/s
Iteration   7: 4205177.444 ops/s
Iteration   8: 4199000.484 ops/s
Iteration   9: 4188645.780 ops/s
Iteration  10: 4200670.110 ops/s
Iteration  11: 4198930.211 ops/s
Iteration  12: 4167587.562 ops/s
Iteration  13: 4182167.025 ops/s
Iteration  14: 4195542.828 ops/s
Iteration  15: 4197239.573 ops/s
Iteration  16: 4198018.336 ops/s
Iteration  17: 4197787.073 ops/s
Iteration  18: 4198238.342 ops/s
Iteration  19: 4208301.890 ops/s
Iteration  20: 4183925.311 ops/s
Iteration  21: 4199730.844 ops/s
Iteration  22: 4222746.798 ops/s
Iteration  23: 4183421.539 ops/s
Iteration  24: 4198715.817 ops/s
Iteration  25: 4193031.980 ops/s
Iteration  26: 4199591.879 ops/s
Iteration  27: 4190683.608 ops/s
Iteration  28: 4185609.162 ops/s
Iteration  29: 4197051.152 ops/s
Iteration  30: 4189189.748 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testToString":
  4196372.790 ±(99.9%) 7884.398 ops/s [Average]
  (min, avg, max) = (4167587.562, 4196372.790, 4230050.303), stdev = 11800.997
  CI (99.9%): [4188488.392, 4204257.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_testToString  thrpt   30  4196372.790 ± 7884.398  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12645658.388 ops/s
# Warmup Iteration   2: 27753964.267 ops/s
# Warmup Iteration   3: 23310076.569 ops/s
# Warmup Iteration   4: 28304471.282 ops/s
# Warmup Iteration   5: 28454010.048 ops/s
# Warmup Iteration   6: 28403217.891 ops/s
# Warmup Iteration   7: 28345793.888 ops/s
# Warmup Iteration   8: 28356453.476 ops/s
# Warmup Iteration   9: 28450837.447 ops/s
# Warmup Iteration  10: 28416709.602 ops/s
# Warmup Iteration  11: 28472171.522 ops/s
# Warmup Iteration  12: 28450089.661 ops/s
# Warmup Iteration  13: 28420907.530 ops/s
# Warmup Iteration  14: 28445023.558 ops/s
# Warmup Iteration  15: 28375746.950 ops/s
# Warmup Iteration  16: 28431291.057 ops/s
# Warmup Iteration  17: 28345706.426 ops/s
# Warmup Iteration  18: 28392718.696 ops/s
# Warmup Iteration  19: 28371733.614 ops/s
# Warmup Iteration  20: 28444750.516 ops/s
# Warmup Iteration  21: 28425892.143 ops/s
# Warmup Iteration  22: 28345844.551 ops/s
# Warmup Iteration  23: 28454208.243 ops/s
# Warmup Iteration  24: 28401506.950 ops/s
# Warmup Iteration  25: 28428906.164 ops/s
# Warmup Iteration  26: 28460453.827 ops/s
# Warmup Iteration  27: 28415675.105 ops/s
# Warmup Iteration  28: 28463999.308 ops/s
# Warmup Iteration  29: 28485426.990 ops/s
# Warmup Iteration  30: 28440481.359 ops/s
Iteration   1: 28525583.725 ops/s
Iteration   2: 28510721.262 ops/s
Iteration   3: 28355916.995 ops/s
Iteration   4: 28267396.947 ops/s
Iteration   5: 28440585.268 ops/s
Iteration   6: 28372933.607 ops/s
Iteration   7: 28476604.695 ops/s
Iteration   8: 28294592.868 ops/s
Iteration   9: 28522572.665 ops/s
Iteration  10: 28441775.065 ops/s
Iteration  11: 28534502.002 ops/s
Iteration  12: 28458968.109 ops/s
Iteration  13: 28429424.448 ops/s
Iteration  14: 28340457.849 ops/s
Iteration  15: 28411811.550 ops/s
Iteration  16: 28427811.113 ops/s
Iteration  17: 28513681.731 ops/s
Iteration  18: 28423953.134 ops/s
Iteration  19: 28481328.662 ops/s
Iteration  20: 28437778.936 ops/s
Iteration  21: 28339168.029 ops/s
Iteration  22: 28408198.871 ops/s
Iteration  23: 28410915.735 ops/s
Iteration  24: 28365636.060 ops/s
Iteration  25: 28503817.088 ops/s
Iteration  26: 28484794.267 ops/s
Iteration  27: 28461752.081 ops/s
Iteration  28: 28455531.805 ops/s
Iteration  29: 28487333.702 ops/s
Iteration  30: 28394830.055 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toArray":
  28432679.277 ±(99.9%) 46032.295 ops/s [Average]
  (min, avg, max) = (28267396.947, 28432679.277, 28534502.002), stdev = 68898.977
  CI (99.9%): [28386646.983, 28478711.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toArray  thrpt   30  28432679.277 ± 46032.295  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6645643.906 ops/s
# Warmup Iteration   2: 12536016.634 ops/s
# Warmup Iteration   3: 11108744.220 ops/s
# Warmup Iteration   4: 12967380.007 ops/s
# Warmup Iteration   5: 12969516.240 ops/s
# Warmup Iteration   6: 13016880.786 ops/s
# Warmup Iteration   7: 12968976.046 ops/s
# Warmup Iteration   8: 12960892.800 ops/s
# Warmup Iteration   9: 12936190.332 ops/s
# Warmup Iteration  10: 13005673.286 ops/s
# Warmup Iteration  11: 12977562.332 ops/s
# Warmup Iteration  12: 12953699.012 ops/s
# Warmup Iteration  13: 13021414.998 ops/s
# Warmup Iteration  14: 13024285.355 ops/s
# Warmup Iteration  15: 13029276.427 ops/s
# Warmup Iteration  16: 13003968.656 ops/s
# Warmup Iteration  17: 13001665.095 ops/s
# Warmup Iteration  18: 12984595.355 ops/s
# Warmup Iteration  19: 12939512.027 ops/s
# Warmup Iteration  20: 12898556.050 ops/s
# Warmup Iteration  21: 12924393.524 ops/s
# Warmup Iteration  22: 12945425.814 ops/s
# Warmup Iteration  23: 12964191.647 ops/s
# Warmup Iteration  24: 12998661.977 ops/s
# Warmup Iteration  25: 12942702.411 ops/s
# Warmup Iteration  26: 12988954.139 ops/s
# Warmup Iteration  27: 12984373.476 ops/s
# Warmup Iteration  28: 13028209.857 ops/s
# Warmup Iteration  29: 12970254.993 ops/s
# Warmup Iteration  30: 13015871.870 ops/s
Iteration   1: 13026747.921 ops/s
Iteration   2: 13014302.925 ops/s
Iteration   3: 12940476.578 ops/s
Iteration   4: 13025657.736 ops/s
Iteration   5: 13033103.474 ops/s
Iteration   6: 13061991.521 ops/s
Iteration   7: 12995867.137 ops/s
Iteration   8: 13039792.553 ops/s
Iteration   9: 12987520.037 ops/s
Iteration  10: 12980017.863 ops/s
Iteration  11: 12970489.157 ops/s
Iteration  12: 12933026.400 ops/s
Iteration  13: 12988531.439 ops/s
Iteration  14: 12988369.740 ops/s
Iteration  15: 13006947.515 ops/s
Iteration  16: 13024664.836 ops/s
Iteration  17: 13003344.658 ops/s
Iteration  18: 13004006.187 ops/s
Iteration  19: 12996952.585 ops/s
Iteration  20: 12995879.824 ops/s
Iteration  21: 13013988.869 ops/s
Iteration  22: 12970974.766 ops/s
Iteration  23: 12905811.948 ops/s
Iteration  24: 12913187.194 ops/s
Iteration  25: 13038955.933 ops/s
Iteration  26: 13070353.007 ops/s
Iteration  27: 12956471.871 ops/s
Iteration  28: 12995523.087 ops/s
Iteration  29: 12974843.674 ops/s
Iteration  30: 12930288.565 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toBag":
  12992936.300 ±(99.9%) 27286.645 ops/s [Average]
  (min, avg, max) = (12905811.948, 12992936.300, 13070353.007), stdev = 40841.368
  CI (99.9%): [12965649.655, 13020222.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toBag  thrpt   30  12992936.300 ± 27286.645  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 164859974.757 ops/s
# Warmup Iteration   2: 298051812.448 ops/s
# Warmup Iteration   3: 262255708.591 ops/s
# Warmup Iteration   4: 305815818.637 ops/s
# Warmup Iteration   5: 305277757.638 ops/s
# Warmup Iteration   6: 306674707.120 ops/s
# Warmup Iteration   7: 306743425.616 ops/s
# Warmup Iteration   8: 307103399.525 ops/s
# Warmup Iteration   9: 306433903.777 ops/s
# Warmup Iteration  10: 308299841.534 ops/s
# Warmup Iteration  11: 307035733.868 ops/s
# Warmup Iteration  12: 307281130.095 ops/s
# Warmup Iteration  13: 305779501.140 ops/s
# Warmup Iteration  14: 308169536.218 ops/s
# Warmup Iteration  15: 306631529.406 ops/s
# Warmup Iteration  16: 307355833.508 ops/s
# Warmup Iteration  17: 307309811.245 ops/s
# Warmup Iteration  18: 307392360.920 ops/s
# Warmup Iteration  19: 307744141.415 ops/s
# Warmup Iteration  20: 306498199.193 ops/s
# Warmup Iteration  21: 307015518.158 ops/s
# Warmup Iteration  22: 307490364.020 ops/s
# Warmup Iteration  23: 306593304.814 ops/s
# Warmup Iteration  24: 304362386.875 ops/s
# Warmup Iteration  25: 306989940.716 ops/s
# Warmup Iteration  26: 307755968.403 ops/s
# Warmup Iteration  27: 306365380.808 ops/s
# Warmup Iteration  28: 307394634.432 ops/s
# Warmup Iteration  29: 307205631.565 ops/s
# Warmup Iteration  30: 307364347.090 ops/s
Iteration   1: 305017582.222 ops/s
Iteration   2: 307785002.275 ops/s
Iteration   3: 307020706.374 ops/s
Iteration   4: 306466742.519 ops/s
Iteration   5: 307732757.687 ops/s
Iteration   6: 307959407.818 ops/s
Iteration   7: 308048674.381 ops/s
Iteration   8: 306741210.456 ops/s
Iteration   9: 307225313.494 ops/s
Iteration  10: 306494061.362 ops/s
Iteration  11: 307482692.146 ops/s
Iteration  12: 305789349.906 ops/s
Iteration  13: 306130870.009 ops/s
Iteration  14: 305654524.785 ops/s
Iteration  15: 306067450.548 ops/s
Iteration  16: 307475995.247 ops/s
Iteration  17: 306570267.259 ops/s
Iteration  18: 306805206.434 ops/s
Iteration  19: 304936348.717 ops/s
Iteration  20: 306694152.824 ops/s
Iteration  21: 307017900.631 ops/s
Iteration  22: 302161797.652 ops/s
Iteration  23: 306552351.301 ops/s
Iteration  24: 305257495.944 ops/s
Iteration  25: 306408591.556 ops/s
Iteration  26: 306755477.009 ops/s
Iteration  27: 307965556.371 ops/s
Iteration  28: 306265575.891 ops/s
Iteration  29: 306373878.594 ops/s
Iteration  30: 306145550.678 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toImmutable":
  306500083.070 ±(99.9%) 783169.348 ops/s [Average]
  (min, avg, max) = (302161797.652, 306500083.070, 308048674.381), stdev = 1172211.100
  CI (99.9%): [305716913.721, 307283252.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt          Score        Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toImmutable  thrpt   30  306500083.070 ± 783169.348  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5001948.878 ops/s
# Warmup Iteration   2: 8750681.563 ops/s
# Warmup Iteration   3: 10501953.435 ops/s
# Warmup Iteration   4: 10469199.380 ops/s
# Warmup Iteration   5: 10462343.978 ops/s
# Warmup Iteration   6: 10505343.180 ops/s
# Warmup Iteration   7: 10466612.708 ops/s
# Warmup Iteration   8: 10460029.042 ops/s
# Warmup Iteration   9: 10426206.927 ops/s
# Warmup Iteration  10: 10428843.617 ops/s
# Warmup Iteration  11: 10452734.695 ops/s
# Warmup Iteration  12: 10478707.397 ops/s
# Warmup Iteration  13: 10479790.366 ops/s
# Warmup Iteration  14: 10493190.506 ops/s
# Warmup Iteration  15: 10462186.162 ops/s
# Warmup Iteration  16: 10461920.988 ops/s
# Warmup Iteration  17: 10413342.175 ops/s
# Warmup Iteration  18: 10440981.887 ops/s
# Warmup Iteration  19: 10483063.701 ops/s
# Warmup Iteration  20: 10430410.033 ops/s
# Warmup Iteration  21: 10485129.025 ops/s
# Warmup Iteration  22: 10475058.378 ops/s
# Warmup Iteration  23: 10471286.027 ops/s
# Warmup Iteration  24: 10449505.565 ops/s
# Warmup Iteration  25: 10445327.171 ops/s
# Warmup Iteration  26: 10442430.296 ops/s
# Warmup Iteration  27: 10406489.479 ops/s
# Warmup Iteration  28: 10411053.897 ops/s
# Warmup Iteration  29: 10424294.821 ops/s
# Warmup Iteration  30: 10437800.771 ops/s
Iteration   1: 10414524.001 ops/s
Iteration   2: 10395350.787 ops/s
Iteration   3: 10503725.481 ops/s
Iteration   4: 10470051.953 ops/s
Iteration   5: 10470432.813 ops/s
Iteration   6: 10448990.951 ops/s
Iteration   7: 10443695.198 ops/s
Iteration   8: 10422644.421 ops/s
Iteration   9: 10448874.386 ops/s
Iteration  10: 10383001.851 ops/s
Iteration  11: 10480443.779 ops/s
Iteration  12: 10484845.870 ops/s
Iteration  13: 10415635.633 ops/s
Iteration  14: 10443102.750 ops/s
Iteration  15: 10396676.779 ops/s
Iteration  16: 10424478.855 ops/s
Iteration  17: 10456982.875 ops/s
Iteration  18: 10462480.398 ops/s
Iteration  19: 10368099.977 ops/s
Iteration  20: 10436152.164 ops/s
Iteration  21: 10409816.714 ops/s
Iteration  22: 10424681.455 ops/s
Iteration  23: 10508389.295 ops/s
Iteration  24: 10445182.990 ops/s
Iteration  25: 10473168.414 ops/s
Iteration  26: 10515000.683 ops/s
Iteration  27: 10494547.976 ops/s
Iteration  28: 10460447.661 ops/s
Iteration  29: 10510885.236 ops/s
Iteration  30: 10454102.181 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toList":
  10448880.451 ±(99.9%) 25854.583 ops/s [Average]
  (min, avg, max) = (10368099.977, 10448880.451, 10515000.683), stdev = 38697.926
  CI (99.9%): [10423025.867, 10474735.034] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toList  thrpt   30  10448880.451 ± 25854.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7301953.157 ops/s
# Warmup Iteration   2: 17461107.869 ops/s
# Warmup Iteration   3: 16611781.570 ops/s
# Warmup Iteration   4: 13582899.845 ops/s
# Warmup Iteration   5: 16308619.015 ops/s
# Warmup Iteration   6: 16277794.882 ops/s
# Warmup Iteration   7: 16298705.342 ops/s
# Warmup Iteration   8: 16197443.598 ops/s
# Warmup Iteration   9: 16245704.257 ops/s
# Warmup Iteration  10: 16285231.179 ops/s
# Warmup Iteration  11: 16295655.140 ops/s
# Warmup Iteration  12: 16291083.345 ops/s
# Warmup Iteration  13: 16243855.070 ops/s
# Warmup Iteration  14: 16257568.417 ops/s
# Warmup Iteration  15: 16223700.497 ops/s
# Warmup Iteration  16: 16231480.260 ops/s
# Warmup Iteration  17: 16267739.297 ops/s
# Warmup Iteration  18: 16268880.071 ops/s
# Warmup Iteration  19: 16294303.559 ops/s
# Warmup Iteration  20: 16246511.385 ops/s
# Warmup Iteration  21: 16308126.151 ops/s
# Warmup Iteration  22: 16308999.097 ops/s
# Warmup Iteration  23: 16309785.360 ops/s
# Warmup Iteration  24: 16274183.089 ops/s
# Warmup Iteration  25: 16246048.180 ops/s
# Warmup Iteration  26: 16288018.110 ops/s
# Warmup Iteration  27: 16291887.548 ops/s
# Warmup Iteration  28: 16314275.948 ops/s
# Warmup Iteration  29: 16293496.662 ops/s
# Warmup Iteration  30: 16245882.421 ops/s
Iteration   1: 16278579.206 ops/s
Iteration   2: 16283991.467 ops/s
Iteration   3: 16293289.041 ops/s
Iteration   4: 16254048.011 ops/s
Iteration   5: 16246667.024 ops/s
Iteration   6: 16392553.838 ops/s
Iteration   7: 16203578.715 ops/s
Iteration   8: 16290252.428 ops/s
Iteration   9: 16329174.014 ops/s
Iteration  10: 16323854.037 ops/s
Iteration  11: 16307908.459 ops/s
Iteration  12: 16290774.261 ops/s
Iteration  13: 16287597.173 ops/s
Iteration  14: 16267103.423 ops/s
Iteration  15: 16296968.481 ops/s
Iteration  16: 16354731.343 ops/s
Iteration  17: 16303110.223 ops/s
Iteration  18: 16274052.839 ops/s
Iteration  19: 16354525.192 ops/s
Iteration  20: 16311746.428 ops/s
Iteration  21: 16303164.443 ops/s
Iteration  22: 16299524.388 ops/s
Iteration  23: 16284791.037 ops/s
Iteration  24: 16304874.951 ops/s
Iteration  25: 16293947.069 ops/s
Iteration  26: 16339345.171 ops/s
Iteration  27: 16317306.595 ops/s
Iteration  28: 16293153.639 ops/s
Iteration  29: 16236250.862 ops/s
Iteration  30: 16298358.636 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toSet":
  16297174.080 ±(99.9%) 24595.120 ops/s [Average]
  (min, avg, max) = (16203578.715, 16297174.080, 16392553.838), stdev = 36812.821
  CI (99.9%): [16272578.959, 16321769.200] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanEmptyBagTest._Benchmark.benchmark_toSet  thrpt   30  16297174.080 ± 24595.120  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8645315.498 ops/s
# Warmup Iteration   2: 14308962.597 ops/s
# Warmup Iteration   3: 16877088.657 ops/s
# Warmup Iteration   4: 16972243.670 ops/s
# Warmup Iteration   5: 17006795.133 ops/s
# Warmup Iteration   6: 16956112.902 ops/s
# Warmup Iteration   7: 16981834.636 ops/s
# Warmup Iteration   8: 16979070.653 ops/s
# Warmup Iteration   9: 17026069.210 ops/s
# Warmup Iteration  10: 16881959.795 ops/s
# Warmup Iteration  11: 17054521.439 ops/s
# Warmup Iteration  12: 16990801.696 ops/s
# Warmup Iteration  13: 16922392.240 ops/s
# Warmup Iteration  14: 16892991.382 ops/s
# Warmup Iteration  15: 16837027.150 ops/s
# Warmup Iteration  16: 16950005.524 ops/s
# Warmup Iteration  17: 16954909.228 ops/s
# Warmup Iteration  18: 16912155.309 ops/s
# Warmup Iteration  19: 16895841.853 ops/s
# Warmup Iteration  20: 16943653.637 ops/s
# Warmup Iteration  21: 16864035.036 ops/s
# Warmup Iteration  22: 16876171.045 ops/s
# Warmup Iteration  23: 16908040.682 ops/s
# Warmup Iteration  24: 16805492.422 ops/s
# Warmup Iteration  25: 16821399.094 ops/s
# Warmup Iteration  26: 16903837.433 ops/s
# Warmup Iteration  27: 16927131.582 ops/s
# Warmup Iteration  28: 16984482.521 ops/s
# Warmup Iteration  29: 16941448.711 ops/s
# Warmup Iteration  30: 16913921.469 ops/s
Iteration   1: 16969892.136 ops/s
Iteration   2: 16958953.511 ops/s
Iteration   3: 16791608.605 ops/s
Iteration   4: 16910656.927 ops/s
Iteration   5: 16840145.420 ops/s
Iteration   6: 16867331.370 ops/s
Iteration   7: 16753137.255 ops/s
Iteration   8: 16964136.182 ops/s
Iteration   9: 16946808.892 ops/s
Iteration  10: 16937650.355 ops/s
Iteration  11: 16878336.540 ops/s
Iteration  12: 17037648.503 ops/s
Iteration  13: 16860153.670 ops/s
Iteration  14: 16885573.800 ops/s
Iteration  15: 16913015.642 ops/s
Iteration  16: 16962376.041 ops/s
Iteration  17: 16819999.764 ops/s
Iteration  18: 16822000.246 ops/s
Iteration  19: 16780267.022 ops/s
Iteration  20: 16861974.347 ops/s
Iteration  21: 16971305.782 ops/s
Iteration  22: 17045331.020 ops/s
Iteration  23: 17005546.764 ops/s
Iteration  24: 17110371.875 ops/s
Iteration  25: 17031540.815 ops/s
Iteration  26: 17091534.249 ops/s
Iteration  27: 17007795.050 ops/s
Iteration  28: 17027731.619 ops/s
Iteration  29: 16978908.394 ops/s
Iteration  30: 16957934.923 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_allSatisfy":
  16932988.890 ±(99.9%) 61804.291 ops/s [Average]
  (min, avg, max) = (16753137.255, 16932988.890, 17110371.875), stdev = 92505.760
  CI (99.9%): [16871184.599, 16994793.182] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  16932988.890 ± 61804.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11593769.184 ops/s
# Warmup Iteration   2: 19593185.983 ops/s
# Warmup Iteration   3: 21845671.321 ops/s
# Warmup Iteration   4: 22263750.075 ops/s
# Warmup Iteration   5: 22241574.440 ops/s
# Warmup Iteration   6: 22146222.326 ops/s
# Warmup Iteration   7: 22330882.254 ops/s
# Warmup Iteration   8: 22380981.098 ops/s
# Warmup Iteration   9: 22296647.205 ops/s
# Warmup Iteration  10: 22308455.606 ops/s
# Warmup Iteration  11: 22223925.643 ops/s
# Warmup Iteration  12: 22307730.328 ops/s
# Warmup Iteration  13: 22246796.326 ops/s
# Warmup Iteration  14: 22298817.504 ops/s
# Warmup Iteration  15: 22235247.311 ops/s
# Warmup Iteration  16: 22363746.368 ops/s
# Warmup Iteration  17: 22192450.575 ops/s
# Warmup Iteration  18: 22195347.015 ops/s
# Warmup Iteration  19: 22151301.051 ops/s
# Warmup Iteration  20: 22269784.591 ops/s
# Warmup Iteration  21: 22258097.457 ops/s
# Warmup Iteration  22: 22369179.864 ops/s
# Warmup Iteration  23: 22312477.892 ops/s
# Warmup Iteration  24: 22292721.810 ops/s
# Warmup Iteration  25: 22361825.367 ops/s
# Warmup Iteration  26: 22356529.095 ops/s
# Warmup Iteration  27: 22328780.239 ops/s
# Warmup Iteration  28: 22315699.861 ops/s
# Warmup Iteration  29: 22154830.817 ops/s
# Warmup Iteration  30: 22234855.868 ops/s
Iteration   1: 22153989.352 ops/s
Iteration   2: 22187725.917 ops/s
Iteration   3: 22195351.702 ops/s
Iteration   4: 22240751.508 ops/s
Iteration   5: 22203590.920 ops/s
Iteration   6: 22058614.270 ops/s
Iteration   7: 22209098.535 ops/s
Iteration   8: 22095698.376 ops/s
Iteration   9: 22090094.725 ops/s
Iteration  10: 22134594.520 ops/s
Iteration  11: 22226272.254 ops/s
Iteration  12: 22074049.711 ops/s
Iteration  13: 22235113.245 ops/s
Iteration  14: 22271194.175 ops/s
Iteration  15: 22297462.995 ops/s
Iteration  16: 22243244.976 ops/s
Iteration  17: 22243567.578 ops/s
Iteration  18: 22322865.209 ops/s
Iteration  19: 22294740.280 ops/s
Iteration  20: 22349974.057 ops/s
Iteration  21: 22321128.035 ops/s
Iteration  22: 22306919.850 ops/s
Iteration  23: 22304121.063 ops/s
Iteration  24: 22268087.392 ops/s
Iteration  25: 22359278.363 ops/s
Iteration  26: 22282345.972 ops/s
Iteration  27: 22347147.061 ops/s
Iteration  28: 22295844.581 ops/s
Iteration  29: 22204400.617 ops/s
Iteration  30: 22352906.084 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_anySatisfy":
  22239005.777 ±(99.9%) 57698.266 ops/s [Average]
  (min, avg, max) = (22058614.270, 22239005.777, 22359278.363), stdev = 86360.055
  CI (99.9%): [22181307.512, 22296704.043] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  22239005.777 ± 57698.266  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 909039.858 ops/s
# Warmup Iteration   2: 2000686.888 ops/s
# Warmup Iteration   3: 2001093.780 ops/s
# Warmup Iteration   4: 1676540.287 ops/s
# Warmup Iteration   5: 2002633.334 ops/s
# Warmup Iteration   6: 2016057.080 ops/s
# Warmup Iteration   7: 2009484.838 ops/s
# Warmup Iteration   8: 2002578.412 ops/s
# Warmup Iteration   9: 2014141.096 ops/s
# Warmup Iteration  10: 1999958.843 ops/s
# Warmup Iteration  11: 2010475.878 ops/s
# Warmup Iteration  12: 2007616.605 ops/s
# Warmup Iteration  13: 2013512.545 ops/s
# Warmup Iteration  14: 2023652.171 ops/s
# Warmup Iteration  15: 2000972.007 ops/s
# Warmup Iteration  16: 2001230.452 ops/s
# Warmup Iteration  17: 2000464.027 ops/s
# Warmup Iteration  18: 2013160.955 ops/s
# Warmup Iteration  19: 2008109.591 ops/s
# Warmup Iteration  20: 2009822.404 ops/s
# Warmup Iteration  21: 2006803.271 ops/s
# Warmup Iteration  22: 2010710.246 ops/s
# Warmup Iteration  23: 2004593.423 ops/s
# Warmup Iteration  24: 2017564.389 ops/s
# Warmup Iteration  25: 1993526.931 ops/s
# Warmup Iteration  26: 2012786.607 ops/s
# Warmup Iteration  27: 2018387.945 ops/s
# Warmup Iteration  28: 2011113.477 ops/s
# Warmup Iteration  29: 2014490.516 ops/s
# Warmup Iteration  30: 2012359.064 ops/s
Iteration   1: 2002086.154 ops/s
Iteration   2: 2012992.769 ops/s
Iteration   3: 2027523.998 ops/s
Iteration   4: 2007317.631 ops/s
Iteration   5: 2019086.111 ops/s
Iteration   6: 2028127.635 ops/s
Iteration   7: 2008338.301 ops/s
Iteration   8: 2021570.210 ops/s
Iteration   9: 2020863.744 ops/s
Iteration  10: 2019397.616 ops/s
Iteration  11: 2012084.979 ops/s
Iteration  12: 2003609.252 ops/s
Iteration  13: 2016233.793 ops/s
Iteration  14: 2032472.934 ops/s
Iteration  15: 2005331.428 ops/s
Iteration  16: 2009528.083 ops/s
Iteration  17: 2007669.774 ops/s
Iteration  18: 1985728.764 ops/s
Iteration  19: 2017349.370 ops/s
Iteration  20: 2010849.967 ops/s
Iteration  21: 2007738.737 ops/s
Iteration  22: 2000317.676 ops/s
Iteration  23: 2021307.633 ops/s
Iteration  24: 2008056.179 ops/s
Iteration  25: 2010675.043 ops/s
Iteration  26: 2013697.789 ops/s
Iteration  27: 2011275.729 ops/s
Iteration  28: 2022746.765 ops/s
Iteration  29: 2006779.289 ops/s
Iteration  30: 2011378.407 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_appendString":
  2012737.859 ±(99.9%) 6321.863 ops/s [Average]
  (min, avg, max) = (1985728.764, 2012737.859, 2032472.934), stdev = 9462.268
  CI (99.9%): [2006415.996, 2019059.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_appendString  thrpt   30  2012737.859 ± 6321.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 18445081.883 ops/s
# Warmup Iteration   2: 35356877.772 ops/s
# Warmup Iteration   3: 30137430.781 ops/s
# Warmup Iteration   4: 35339286.652 ops/s
# Warmup Iteration   5: 35380512.314 ops/s
# Warmup Iteration   6: 35451860.834 ops/s
# Warmup Iteration   7: 35383304.805 ops/s
# Warmup Iteration   8: 35352875.746 ops/s
# Warmup Iteration   9: 35282580.131 ops/s
# Warmup Iteration  10: 35483537.883 ops/s
# Warmup Iteration  11: 35345724.449 ops/s
# Warmup Iteration  12: 35259159.076 ops/s
# Warmup Iteration  13: 35344573.861 ops/s
# Warmup Iteration  14: 35277924.576 ops/s
# Warmup Iteration  15: 35404131.192 ops/s
# Warmup Iteration  16: 35390176.045 ops/s
# Warmup Iteration  17: 35520262.430 ops/s
# Warmup Iteration  18: 35411634.811 ops/s
# Warmup Iteration  19: 35491316.556 ops/s
# Warmup Iteration  20: 35447529.213 ops/s
# Warmup Iteration  21: 35394642.553 ops/s
# Warmup Iteration  22: 35475185.593 ops/s
# Warmup Iteration  23: 35423681.290 ops/s
# Warmup Iteration  24: 35515452.020 ops/s
# Warmup Iteration  25: 35529357.403 ops/s
# Warmup Iteration  26: 35331712.507 ops/s
# Warmup Iteration  27: 35442450.785 ops/s
# Warmup Iteration  28: 35420657.194 ops/s
# Warmup Iteration  29: 35444205.399 ops/s
# Warmup Iteration  30: 35522997.391 ops/s
Iteration   1: 35413643.682 ops/s
Iteration   2: 35498650.202 ops/s
Iteration   3: 35448209.431 ops/s
Iteration   4: 35368863.485 ops/s
Iteration   5: 35361247.931 ops/s
Iteration   6: 35321416.275 ops/s
Iteration   7: 35574359.566 ops/s
Iteration   8: 35578173.366 ops/s
Iteration   9: 35503074.925 ops/s
Iteration  10: 35407306.314 ops/s
Iteration  11: 35415759.042 ops/s
Iteration  12: 35522396.356 ops/s
Iteration  13: 35415108.731 ops/s
Iteration  14: 35557053.020 ops/s
Iteration  15: 35445052.350 ops/s
Iteration  16: 35255927.765 ops/s
Iteration  17: 35419763.589 ops/s
Iteration  18: 35427412.813 ops/s
Iteration  19: 35500882.903 ops/s
Iteration  20: 35466800.424 ops/s
Iteration  21: 35459276.835 ops/s
Iteration  22: 35514520.702 ops/s
Iteration  23: 35397463.452 ops/s
Iteration  24: 35463140.107 ops/s
Iteration  25: 35608539.772 ops/s
Iteration  26: 35456454.126 ops/s
Iteration  27: 35598211.721 ops/s
Iteration  28: 35473512.175 ops/s
Iteration  29: 35507467.042 ops/s
Iteration  30: 35594940.826 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_asLazy":
  35465820.964 ±(99.9%) 56032.243 ops/s [Average]
  (min, avg, max) = (35255927.765, 35465820.964, 35608539.772), stdev = 83866.430
  CI (99.9%): [35409788.721, 35521853.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_asLazy  thrpt   30  35465820.964 ± 56032.243  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10278928.253 ops/s
# Warmup Iteration   2: 16207549.377 ops/s
# Warmup Iteration   3: 18741491.282 ops/s
# Warmup Iteration   4: 18712809.436 ops/s
# Warmup Iteration   5: 18774154.557 ops/s
# Warmup Iteration   6: 18664603.464 ops/s
# Warmup Iteration   7: 18663020.805 ops/s
# Warmup Iteration   8: 18669743.156 ops/s
# Warmup Iteration   9: 18822646.013 ops/s
# Warmup Iteration  10: 18782650.678 ops/s
# Warmup Iteration  11: 18804530.982 ops/s
# Warmup Iteration  12: 18744898.524 ops/s
# Warmup Iteration  13: 18771491.790 ops/s
# Warmup Iteration  14: 18734579.716 ops/s
# Warmup Iteration  15: 18586423.667 ops/s
# Warmup Iteration  16: 18549373.323 ops/s
# Warmup Iteration  17: 18617085.274 ops/s
# Warmup Iteration  18: 18622284.742 ops/s
# Warmup Iteration  19: 18705212.624 ops/s
# Warmup Iteration  20: 18834593.467 ops/s
# Warmup Iteration  21: 18595341.383 ops/s
# Warmup Iteration  22: 18707991.018 ops/s
# Warmup Iteration  23: 18668291.048 ops/s
# Warmup Iteration  24: 18647128.153 ops/s
# Warmup Iteration  25: 18608138.447 ops/s
# Warmup Iteration  26: 18758708.641 ops/s
# Warmup Iteration  27: 18627095.676 ops/s
# Warmup Iteration  28: 18683233.936 ops/s
# Warmup Iteration  29: 18636160.068 ops/s
# Warmup Iteration  30: 18775675.437 ops/s
Iteration   1: 18604293.808 ops/s
Iteration   2: 18804843.188 ops/s
Iteration   3: 18648958.932 ops/s
Iteration   4: 18721769.884 ops/s
Iteration   5: 18619947.174 ops/s
Iteration   6: 18712853.715 ops/s
Iteration   7: 18710607.527 ops/s
Iteration   8: 18682155.766 ops/s
Iteration   9: 18682496.890 ops/s
Iteration  10: 18648300.986 ops/s
Iteration  11: 18532978.875 ops/s
Iteration  12: 18822282.924 ops/s
Iteration  13: 18652605.892 ops/s
Iteration  14: 18687195.752 ops/s
Iteration  15: 18721061.400 ops/s
Iteration  16: 18677472.244 ops/s
Iteration  17: 18809300.355 ops/s
Iteration  18: 18829888.604 ops/s
Iteration  19: 18861192.956 ops/s
Iteration  20: 18792254.918 ops/s
Iteration  21: 18759104.678 ops/s
Iteration  22: 18821718.952 ops/s
Iteration  23: 18822449.600 ops/s
Iteration  24: 18733312.039 ops/s
Iteration  25: 18777234.293 ops/s
Iteration  26: 18724082.992 ops/s
Iteration  27: 18692997.408 ops/s
Iteration  28: 18623185.627 ops/s
Iteration  29: 18684301.206 ops/s
Iteration  30: 18793431.951 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_booleanIterator":
  18721809.351 ±(99.9%) 53268.801 ops/s [Average]
  (min, avg, max) = (18532978.875, 18721809.351, 18861192.956), stdev = 79730.240
  CI (99.9%): [18668540.550, 18775078.152] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  18721809.351 ± 53268.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 233015.768 ops/s
# Warmup Iteration   2: 478784.079 ops/s
# Warmup Iteration   3: 539460.632 ops/s
# Warmup Iteration   4: 542704.427 ops/s
# Warmup Iteration   5: 446782.902 ops/s
# Warmup Iteration   6: 543301.218 ops/s
# Warmup Iteration   7: 543100.891 ops/s
# Warmup Iteration   8: 541747.647 ops/s
# Warmup Iteration   9: 540442.283 ops/s
# Warmup Iteration  10: 543175.172 ops/s
# Warmup Iteration  11: 541287.411 ops/s
# Warmup Iteration  12: 543695.863 ops/s
# Warmup Iteration  13: 543830.616 ops/s
# Warmup Iteration  14: 543437.060 ops/s
# Warmup Iteration  15: 543558.589 ops/s
# Warmup Iteration  16: 542851.857 ops/s
# Warmup Iteration  17: 544856.460 ops/s
# Warmup Iteration  18: 543972.238 ops/s
# Warmup Iteration  19: 544860.808 ops/s
# Warmup Iteration  20: 545648.867 ops/s
# Warmup Iteration  21: 544048.563 ops/s
# Warmup Iteration  22: 545738.157 ops/s
# Warmup Iteration  23: 544568.656 ops/s
# Warmup Iteration  24: 544062.510 ops/s
# Warmup Iteration  25: 544580.725 ops/s
# Warmup Iteration  26: 545207.893 ops/s
# Warmup Iteration  27: 545393.263 ops/s
# Warmup Iteration  28: 544589.670 ops/s
# Warmup Iteration  29: 542186.756 ops/s
# Warmup Iteration  30: 544204.292 ops/s
Iteration   1: 544132.798 ops/s
Iteration   2: 543920.651 ops/s
Iteration   3: 544535.208 ops/s
Iteration   4: 545954.998 ops/s
Iteration   5: 543547.471 ops/s
Iteration   6: 544407.147 ops/s
Iteration   7: 544895.145 ops/s
Iteration   8: 545428.887 ops/s
Iteration   9: 544693.946 ops/s
Iteration  10: 542031.297 ops/s
Iteration  11: 544368.239 ops/s
Iteration  12: 544584.891 ops/s
Iteration  13: 542886.239 ops/s
Iteration  14: 542512.982 ops/s
Iteration  15: 542812.270 ops/s
Iteration  16: 544503.191 ops/s
Iteration  17: 543779.236 ops/s
Iteration  18: 545039.480 ops/s
Iteration  19: 543303.685 ops/s
Iteration  20: 545254.469 ops/s
Iteration  21: 544936.361 ops/s
Iteration  22: 544739.971 ops/s
Iteration  23: 545863.211 ops/s
Iteration  24: 542793.065 ops/s
Iteration  25: 543242.507 ops/s
Iteration  26: 546376.226 ops/s
Iteration  27: 543896.095 ops/s
Iteration  28: 545094.722 ops/s
Iteration  29: 544698.854 ops/s
Iteration  30: 544259.081 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_collect":
  544283.077 ±(99.9%) 706.389 ops/s [Average]
  (min, avg, max) = (542031.297, 544283.077, 546376.226), stdev = 1057.289
  CI (99.9%): [543576.689, 544989.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_collect  thrpt   30  544283.077 ± 706.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 15588617.988 ops/s
# Warmup Iteration   2: 29373766.042 ops/s
# Warmup Iteration   3: 25177733.833 ops/s
# Warmup Iteration   4: 29623853.363 ops/s
# Warmup Iteration   5: 29589508.854 ops/s
# Warmup Iteration   6: 29247969.761 ops/s
# Warmup Iteration   7: 29509907.878 ops/s
# Warmup Iteration   8: 29665621.757 ops/s
# Warmup Iteration   9: 29566993.496 ops/s
# Warmup Iteration  10: 29543759.421 ops/s
# Warmup Iteration  11: 29524956.658 ops/s
# Warmup Iteration  12: 29557306.400 ops/s
# Warmup Iteration  13: 29637883.694 ops/s
# Warmup Iteration  14: 29599618.147 ops/s
# Warmup Iteration  15: 29518465.904 ops/s
# Warmup Iteration  16: 29168313.795 ops/s
# Warmup Iteration  17: 29364607.962 ops/s
# Warmup Iteration  18: 29331812.767 ops/s
# Warmup Iteration  19: 29459969.712 ops/s
# Warmup Iteration  20: 29569436.525 ops/s
# Warmup Iteration  21: 29611662.641 ops/s
# Warmup Iteration  22: 29471004.843 ops/s
# Warmup Iteration  23: 29618176.024 ops/s
# Warmup Iteration  24: 29516492.730 ops/s
# Warmup Iteration  25: 29491281.823 ops/s
# Warmup Iteration  26: 29519345.950 ops/s
# Warmup Iteration  27: 29596863.465 ops/s
# Warmup Iteration  28: 29487677.751 ops/s
# Warmup Iteration  29: 29638141.150 ops/s
# Warmup Iteration  30: 29618769.699 ops/s
Iteration   1: 29469272.969 ops/s
Iteration   2: 29584896.055 ops/s
Iteration   3: 29579668.565 ops/s
Iteration   4: 29641102.712 ops/s
Iteration   5: 29597355.471 ops/s
Iteration   6: 29533279.649 ops/s
Iteration   7: 29479437.558 ops/s
Iteration   8: 29542978.385 ops/s
Iteration   9: 29528856.149 ops/s
Iteration  10: 29488288.064 ops/s
Iteration  11: 29465533.888 ops/s
Iteration  12: 29421856.916 ops/s
Iteration  13: 29249280.635 ops/s
Iteration  14: 29459374.054 ops/s
Iteration  15: 29620964.391 ops/s
Iteration  16: 29508978.928 ops/s
Iteration  17: 29515474.308 ops/s
Iteration  18: 29469858.254 ops/s
Iteration  19: 29528545.511 ops/s
Iteration  20: 29508852.371 ops/s
Iteration  21: 29565275.614 ops/s
Iteration  22: 29616394.697 ops/s
Iteration  23: 29593353.930 ops/s
Iteration  24: 29472573.334 ops/s
Iteration  25: 29560399.466 ops/s
Iteration  26: 29487124.932 ops/s
Iteration  27: 29576028.728 ops/s
Iteration  28: 29564360.694 ops/s
Iteration  29: 29531251.966 ops/s
Iteration  30: 29461452.240 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_contains":
  29520735.681 ±(99.9%) 50756.112 ops/s [Average]
  (min, avg, max) = (29249280.635, 29520735.681, 29641102.712), stdev = 75969.365
  CI (99.9%): [29469979.569, 29571491.793] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_contains  thrpt   30  29520735.681 ± 50756.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9192536.374 ops/s
# Warmup Iteration   2: 14716389.171 ops/s
# Warmup Iteration   3: 17383223.761 ops/s
# Warmup Iteration   4: 17262195.226 ops/s
# Warmup Iteration   5: 17366373.775 ops/s
# Warmup Iteration   6: 17238359.318 ops/s
# Warmup Iteration   7: 17252786.571 ops/s
# Warmup Iteration   8: 17298715.048 ops/s
# Warmup Iteration   9: 17282850.015 ops/s
# Warmup Iteration  10: 17376074.367 ops/s
# Warmup Iteration  11: 17332561.546 ops/s
# Warmup Iteration  12: 17410835.172 ops/s
# Warmup Iteration  13: 17334005.272 ops/s
# Warmup Iteration  14: 17255286.187 ops/s
# Warmup Iteration  15: 17339627.142 ops/s
# Warmup Iteration  16: 17318361.840 ops/s
# Warmup Iteration  17: 17374514.474 ops/s
# Warmup Iteration  18: 17455308.097 ops/s
# Warmup Iteration  19: 17463524.082 ops/s
# Warmup Iteration  20: 17445751.664 ops/s
# Warmup Iteration  21: 17315102.860 ops/s
# Warmup Iteration  22: 17444968.201 ops/s
# Warmup Iteration  23: 17408825.925 ops/s
# Warmup Iteration  24: 17449503.821 ops/s
# Warmup Iteration  25: 17484052.884 ops/s
# Warmup Iteration  26: 17417085.406 ops/s
# Warmup Iteration  27: 17453085.311 ops/s
# Warmup Iteration  28: 17417751.823 ops/s
# Warmup Iteration  29: 17387012.237 ops/s
# Warmup Iteration  30: 17375662.692 ops/s
Iteration   1: 17372861.623 ops/s
Iteration   2: 17429107.380 ops/s
Iteration   3: 17398197.889 ops/s
Iteration   4: 17486456.460 ops/s
Iteration   5: 17412184.671 ops/s
Iteration   6: 17391864.099 ops/s
Iteration   7: 17422140.348 ops/s
Iteration   8: 17389255.863 ops/s
Iteration   9: 17482081.123 ops/s
Iteration  10: 17473315.476 ops/s
Iteration  11: 17394399.417 ops/s
Iteration  12: 17369603.967 ops/s
Iteration  13: 17397233.061 ops/s
Iteration  14: 17481762.252 ops/s
Iteration  15: 17430060.167 ops/s
Iteration  16: 17394258.050 ops/s
Iteration  17: 17385890.772 ops/s
Iteration  18: 17428952.976 ops/s
Iteration  19: 17385895.080 ops/s
Iteration  20: 17279662.532 ops/s
Iteration  21: 17329834.288 ops/s
Iteration  22: 17223192.402 ops/s
Iteration  23: 17319826.487 ops/s
Iteration  24: 17280707.424 ops/s
Iteration  25: 17230126.465 ops/s
Iteration  26: 17155262.516 ops/s
Iteration  27: 17273718.851 ops/s
Iteration  28: 17274783.434 ops/s
Iteration  29: 17318406.857 ops/s
Iteration  30: 17256692.647 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllArray":
  17362257.819 ±(99.9%) 56579.688 ops/s [Average]
  (min, avg, max) = (17155262.516, 17362257.819, 17486456.460), stdev = 84685.820
  CI (99.9%): [17305678.131, 17418837.508] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  17362257.819 ± 56579.688  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1588945.617 ops/s
# Warmup Iteration   2: 3501395.903 ops/s
# Warmup Iteration   3: 3063429.057 ops/s
# Warmup Iteration   4: 3688601.145 ops/s
# Warmup Iteration   5: 3681519.531 ops/s
# Warmup Iteration   6: 3687270.205 ops/s
# Warmup Iteration   7: 3706868.023 ops/s
# Warmup Iteration   8: 3697239.236 ops/s
# Warmup Iteration   9: 3717726.492 ops/s
# Warmup Iteration  10: 3712859.724 ops/s
# Warmup Iteration  11: 3701213.669 ops/s
# Warmup Iteration  12: 3708106.870 ops/s
# Warmup Iteration  13: 3713812.799 ops/s
# Warmup Iteration  14: 3715575.980 ops/s
# Warmup Iteration  15: 3708206.433 ops/s
# Warmup Iteration  16: 3711448.917 ops/s
# Warmup Iteration  17: 3714590.592 ops/s
# Warmup Iteration  18: 3712354.242 ops/s
# Warmup Iteration  19: 3721514.008 ops/s
# Warmup Iteration  20: 3712131.012 ops/s
# Warmup Iteration  21: 3710115.131 ops/s
# Warmup Iteration  22: 3722575.930 ops/s
# Warmup Iteration  23: 3717676.455 ops/s
# Warmup Iteration  24: 3723531.885 ops/s
# Warmup Iteration  25: 3716072.789 ops/s
# Warmup Iteration  26: 3699198.925 ops/s
# Warmup Iteration  27: 3712205.177 ops/s
# Warmup Iteration  28: 3707925.120 ops/s
# Warmup Iteration  29: 3713404.158 ops/s
# Warmup Iteration  30: 3717824.208 ops/s
Iteration   1: 3708608.586 ops/s
Iteration   2: 3703939.166 ops/s
Iteration   3: 3706033.033 ops/s
Iteration   4: 3707209.482 ops/s
Iteration   5: 3715835.605 ops/s
Iteration   6: 3710527.457 ops/s
Iteration   7: 3707370.605 ops/s
Iteration   8: 3694954.697 ops/s
Iteration   9: 3678700.984 ops/s
Iteration  10: 3708424.413 ops/s
Iteration  11: 3719027.556 ops/s
Iteration  12: 3707641.579 ops/s
Iteration  13: 3694084.124 ops/s
Iteration  14: 3728692.155 ops/s
Iteration  15: 3685549.318 ops/s
Iteration  16: 3709087.002 ops/s
Iteration  17: 3723483.650 ops/s
Iteration  18: 3672090.288 ops/s
Iteration  19: 3710064.274 ops/s
Iteration  20: 3721203.760 ops/s
Iteration  21: 3696566.144 ops/s
Iteration  22: 3721419.062 ops/s
Iteration  23: 3708140.051 ops/s
Iteration  24: 3704598.480 ops/s
Iteration  25: 3715265.999 ops/s
Iteration  26: 3716017.741 ops/s
Iteration  27: 3677667.110 ops/s
Iteration  28: 3701633.108 ops/s
Iteration  29: 3721343.217 ops/s
Iteration  30: 3710755.515 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllIterable":
  3706197.805 ±(99.9%) 9253.684 ops/s [Average]
  (min, avg, max) = (3672090.288, 3706197.805, 3728692.155), stdev = 13850.480
  CI (99.9%): [3696944.121, 3715451.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3706197.805 ± 9253.684  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29401202.824 ops/s
# Warmup Iteration   2: 44176818.311 ops/s
# Warmup Iteration   3: 46973375.356 ops/s
# Warmup Iteration   4: 46959480.286 ops/s
# Warmup Iteration   5: 46994029.011 ops/s
# Warmup Iteration   6: 46887241.860 ops/s
# Warmup Iteration   7: 47106079.284 ops/s
# Warmup Iteration   8: 47071365.443 ops/s
# Warmup Iteration   9: 46918147.294 ops/s
# Warmup Iteration  10: 47050924.324 ops/s
# Warmup Iteration  11: 46994363.691 ops/s
# Warmup Iteration  12: 47073500.372 ops/s
# Warmup Iteration  13: 47096353.282 ops/s
# Warmup Iteration  14: 47085838.591 ops/s
# Warmup Iteration  15: 46990346.272 ops/s
# Warmup Iteration  16: 47066768.347 ops/s
# Warmup Iteration  17: 46765860.785 ops/s
# Warmup Iteration  18: 46713663.160 ops/s
# Warmup Iteration  19: 46785977.179 ops/s
# Warmup Iteration  20: 46643414.195 ops/s
# Warmup Iteration  21: 46768167.471 ops/s
# Warmup Iteration  22: 46682377.165 ops/s
# Warmup Iteration  23: 46785131.269 ops/s
# Warmup Iteration  24: 46776311.595 ops/s
# Warmup Iteration  25: 46585193.630 ops/s
# Warmup Iteration  26: 46647314.995 ops/s
# Warmup Iteration  27: 46792396.852 ops/s
# Warmup Iteration  28: 46859194.412 ops/s
# Warmup Iteration  29: 46663586.324 ops/s
# Warmup Iteration  30: 46714654.448 ops/s
Iteration   1: 46634300.471 ops/s
Iteration   2: 46736800.700 ops/s
Iteration   3: 46681176.592 ops/s
Iteration   4: 46758050.086 ops/s
Iteration   5: 46713874.591 ops/s
Iteration   6: 46606059.057 ops/s
Iteration   7: 46797783.880 ops/s
Iteration   8: 46518825.974 ops/s
Iteration   9: 46705477.196 ops/s
Iteration  10: 46695219.950 ops/s
Iteration  11: 46620868.516 ops/s
Iteration  12: 46646884.560 ops/s
Iteration  13: 46542300.460 ops/s
Iteration  14: 46806293.123 ops/s
Iteration  15: 46611703.680 ops/s
Iteration  16: 46607808.437 ops/s
Iteration  17: 46810544.155 ops/s
Iteration  18: 46768637.136 ops/s
Iteration  19: 46808023.218 ops/s
Iteration  20: 46821131.980 ops/s
Iteration  21: 46688659.579 ops/s
Iteration  22: 46706726.637 ops/s
Iteration  23: 46506318.825 ops/s
Iteration  24: 46618885.869 ops/s
Iteration  25: 46532546.444 ops/s
Iteration  26: 46649203.818 ops/s
Iteration  27: 46726754.573 ops/s
Iteration  28: 46585974.529 ops/s
Iteration  29: 46479587.368 ops/s
Iteration  30: 46642152.361 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyArray":
  46667619.125 ±(99.9%) 65030.484 ops/s [Average]
  (min, avg, max) = (46479587.368, 46667619.125, 46821131.980), stdev = 97334.574
  CI (99.9%): [46602588.642, 46732649.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  46667619.125 ± 65030.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 859894.675 ops/s
# Warmup Iteration   2: 1229458.777 ops/s
# Warmup Iteration   3: 1432836.960 ops/s
# Warmup Iteration   4: 1438371.436 ops/s
# Warmup Iteration   5: 1431308.669 ops/s
# Warmup Iteration   6: 1435125.940 ops/s
# Warmup Iteration   7: 1198889.544 ops/s
# Warmup Iteration   8: 1431702.086 ops/s
# Warmup Iteration   9: 1437760.779 ops/s
# Warmup Iteration  10: 1437278.815 ops/s
# Warmup Iteration  11: 1433745.303 ops/s
# Warmup Iteration  12: 1434874.163 ops/s
# Warmup Iteration  13: 1433182.204 ops/s
# Warmup Iteration  14: 1433398.641 ops/s
# Warmup Iteration  15: 1432831.205 ops/s
# Warmup Iteration  16: 1432875.813 ops/s
# Warmup Iteration  17: 1420315.386 ops/s
# Warmup Iteration  18: 1421795.931 ops/s
# Warmup Iteration  19: 1419987.268 ops/s
# Warmup Iteration  20: 1419357.392 ops/s
# Warmup Iteration  21: 1420025.960 ops/s
# Warmup Iteration  22: 1421362.933 ops/s
# Warmup Iteration  23: 1421731.562 ops/s
# Warmup Iteration  24: 1419711.329 ops/s
# Warmup Iteration  25: 1419551.064 ops/s
# Warmup Iteration  26: 1423271.844 ops/s
# Warmup Iteration  27: 1422461.159 ops/s
# Warmup Iteration  28: 1421731.313 ops/s
# Warmup Iteration  29: 1423594.846 ops/s
# Warmup Iteration  30: 1421408.192 ops/s
Iteration   1: 1422601.508 ops/s
Iteration   2: 1419355.806 ops/s
Iteration   3: 1424976.763 ops/s
Iteration   4: 1416621.394 ops/s
Iteration   5: 1423474.137 ops/s
Iteration   6: 1416852.288 ops/s
Iteration   7: 1423099.797 ops/s
Iteration   8: 1423144.923 ops/s
Iteration   9: 1424852.347 ops/s
Iteration  10: 1422435.741 ops/s
Iteration  11: 1426968.829 ops/s
Iteration  12: 1423065.764 ops/s
Iteration  13: 1424049.670 ops/s
Iteration  14: 1424476.824 ops/s
Iteration  15: 1421424.414 ops/s
Iteration  16: 1423729.202 ops/s
Iteration  17: 1419933.335 ops/s
Iteration  18: 1423653.104 ops/s
Iteration  19: 1423897.426 ops/s
Iteration  20: 1420037.945 ops/s
Iteration  21: 1425827.249 ops/s
Iteration  22: 1418388.948 ops/s
Iteration  23: 1421832.204 ops/s
Iteration  24: 1419227.573 ops/s
Iteration  25: 1422028.949 ops/s
Iteration  26: 1418205.297 ops/s
Iteration  27: 1420067.266 ops/s
Iteration  28: 1425477.812 ops/s
Iteration  29: 1421853.939 ops/s
Iteration  30: 1421182.869 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyIterable":
  1422091.444 ±(99.9%) 1774.916 ops/s [Average]
  (min, avg, max) = (1416621.394, 1422091.444, 1426968.829), stdev = 2656.611
  CI (99.9%): [1420316.528, 1423866.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1422091.444 ± 1774.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 27280695.643 ops/s
# Warmup Iteration   2: 42081285.652 ops/s
# Warmup Iteration   3: 45526364.721 ops/s
# Warmup Iteration   4: 45670609.757 ops/s
# Warmup Iteration   5: 45502455.474 ops/s
# Warmup Iteration   6: 45617262.714 ops/s
# Warmup Iteration   7: 45642506.092 ops/s
# Warmup Iteration   8: 45460479.767 ops/s
# Warmup Iteration   9: 45551858.790 ops/s
# Warmup Iteration  10: 45604361.673 ops/s
# Warmup Iteration  11: 45610154.973 ops/s
# Warmup Iteration  12: 45713320.570 ops/s
# Warmup Iteration  13: 45530682.602 ops/s
# Warmup Iteration  14: 45694608.088 ops/s
# Warmup Iteration  15: 45688601.106 ops/s
# Warmup Iteration  16: 45551382.805 ops/s
# Warmup Iteration  17: 45752137.646 ops/s
# Warmup Iteration  18: 45583153.386 ops/s
# Warmup Iteration  19: 45718220.636 ops/s
# Warmup Iteration  20: 45691103.915 ops/s
# Warmup Iteration  21: 45767341.956 ops/s
# Warmup Iteration  22: 45761525.726 ops/s
# Warmup Iteration  23: 45803415.185 ops/s
# Warmup Iteration  24: 45668163.634 ops/s
# Warmup Iteration  25: 45614113.849 ops/s
# Warmup Iteration  26: 45694545.317 ops/s
# Warmup Iteration  27: 45793296.459 ops/s
# Warmup Iteration  28: 45635159.338 ops/s
# Warmup Iteration  29: 45603301.648 ops/s
# Warmup Iteration  30: 45685859.337 ops/s
Iteration   1: 45742132.244 ops/s
Iteration   2: 45644988.554 ops/s
Iteration   3: 45561595.463 ops/s
Iteration   4: 45658757.897 ops/s
Iteration   5: 45644338.245 ops/s
Iteration   6: 45671422.367 ops/s
Iteration   7: 45657468.460 ops/s
Iteration   8: 45589606.722 ops/s
Iteration   9: 45704811.140 ops/s
Iteration  10: 45860417.551 ops/s
Iteration  11: 45777439.661 ops/s
Iteration  12: 45744265.888 ops/s
Iteration  13: 45747180.811 ops/s
Iteration  14: 45832112.023 ops/s
Iteration  15: 45826164.434 ops/s
Iteration  16: 45786349.003 ops/s
Iteration  17: 45477674.444 ops/s
Iteration  18: 45647361.989 ops/s
Iteration  19: 45642589.368 ops/s
Iteration  20: 45741745.083 ops/s
Iteration  21: 45823037.975 ops/s
Iteration  22: 45738746.682 ops/s
Iteration  23: 45755104.142 ops/s
Iteration  24: 45802484.519 ops/s
Iteration  25: 45776533.948 ops/s
Iteration  26: 45706183.549 ops/s
Iteration  27: 45542662.847 ops/s
Iteration  28: 45527896.219 ops/s
Iteration  29: 45655082.832 ops/s
Iteration  30: 45865752.942 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneArray":
  45705063.567 ±(99.9%) 67583.813 ops/s [Average]
  (min, avg, max) = (45477674.444, 45705063.567, 45865752.942), stdev = 101156.277
  CI (99.9%): [45637479.754, 45772647.380] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  45705063.567 ± 67583.813  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806474.566 ops/s
# Warmup Iteration   2: 1159269.776 ops/s
# Warmup Iteration   3: 1350170.795 ops/s
# Warmup Iteration   4: 1348898.250 ops/s
# Warmup Iteration   5: 1351763.212 ops/s
# Warmup Iteration   6: 1348728.182 ops/s
# Warmup Iteration   7: 1126914.198 ops/s
# Warmup Iteration   8: 1351537.046 ops/s
# Warmup Iteration   9: 1351809.118 ops/s
# Warmup Iteration  10: 1352946.196 ops/s
# Warmup Iteration  11: 1351273.586 ops/s
# Warmup Iteration  12: 1351165.466 ops/s
# Warmup Iteration  13: 1348412.226 ops/s
# Warmup Iteration  14: 1351295.009 ops/s
# Warmup Iteration  15: 1351214.455 ops/s
# Warmup Iteration  16: 1351921.807 ops/s
# Warmup Iteration  17: 1349656.792 ops/s
# Warmup Iteration  18: 1351558.172 ops/s
# Warmup Iteration  19: 1351587.211 ops/s
# Warmup Iteration  20: 1349845.231 ops/s
# Warmup Iteration  21: 1349555.358 ops/s
# Warmup Iteration  22: 1349504.798 ops/s
# Warmup Iteration  23: 1347718.333 ops/s
# Warmup Iteration  24: 1347120.317 ops/s
# Warmup Iteration  25: 1351300.727 ops/s
# Warmup Iteration  26: 1349945.128 ops/s
# Warmup Iteration  27: 1349823.669 ops/s
# Warmup Iteration  28: 1351802.540 ops/s
# Warmup Iteration  29: 1350450.305 ops/s
# Warmup Iteration  30: 1350609.481 ops/s
Iteration   1: 1348978.601 ops/s
Iteration   2: 1353279.501 ops/s
Iteration   3: 1351918.762 ops/s
Iteration   4: 1350776.183 ops/s
Iteration   5: 1351515.883 ops/s
Iteration   6: 1347671.337 ops/s
Iteration   7: 1350937.736 ops/s
Iteration   8: 1351147.291 ops/s
Iteration   9: 1346668.266 ops/s
Iteration  10: 1351786.862 ops/s
Iteration  11: 1347110.884 ops/s
Iteration  12: 1344670.004 ops/s
Iteration  13: 1350243.134 ops/s
Iteration  14: 1351202.982 ops/s
Iteration  15: 1345937.214 ops/s
Iteration  16: 1349897.241 ops/s
Iteration  17: 1349896.965 ops/s
Iteration  18: 1350695.662 ops/s
Iteration  19: 1351713.791 ops/s
Iteration  20: 1349168.146 ops/s
Iteration  21: 1345418.399 ops/s
Iteration  22: 1351147.491 ops/s
Iteration  23: 1355461.246 ops/s
Iteration  24: 1346177.767 ops/s
Iteration  25: 1344645.186 ops/s
Iteration  26: 1349410.795 ops/s
Iteration  27: 1352005.177 ops/s
Iteration  28: 1350657.188 ops/s
Iteration  29: 1352385.727 ops/s
Iteration  30: 1348058.366 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneIterable":
  1349686.126 ±(99.9%) 1780.315 ops/s [Average]
  (min, avg, max) = (1344645.186, 1349686.126, 1355461.246), stdev = 2664.693
  CI (99.9%): [1347905.811, 1351466.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1349686.126 ± 1780.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11488458.495 ops/s
# Warmup Iteration   2: 22591067.069 ops/s
# Warmup Iteration   3: 19126637.178 ops/s
# Warmup Iteration   4: 22563930.970 ops/s
# Warmup Iteration   5: 22648473.928 ops/s
# Warmup Iteration   6: 22624734.420 ops/s
# Warmup Iteration   7: 22624486.977 ops/s
# Warmup Iteration   8: 22604250.300 ops/s
# Warmup Iteration   9: 22619365.512 ops/s
# Warmup Iteration  10: 22676289.592 ops/s
# Warmup Iteration  11: 22681558.705 ops/s
# Warmup Iteration  12: 22648061.855 ops/s
# Warmup Iteration  13: 22599673.127 ops/s
# Warmup Iteration  14: 22637819.637 ops/s
# Warmup Iteration  15: 22625002.140 ops/s
# Warmup Iteration  16: 22605233.035 ops/s
# Warmup Iteration  17: 22579989.616 ops/s
# Warmup Iteration  18: 22603323.231 ops/s
# Warmup Iteration  19: 22621649.242 ops/s
# Warmup Iteration  20: 22544883.543 ops/s
# Warmup Iteration  21: 22605729.227 ops/s
# Warmup Iteration  22: 22641983.336 ops/s
# Warmup Iteration  23: 22568822.891 ops/s
# Warmup Iteration  24: 22625889.083 ops/s
# Warmup Iteration  25: 22632660.473 ops/s
# Warmup Iteration  26: 22603939.788 ops/s
# Warmup Iteration  27: 22620181.510 ops/s
# Warmup Iteration  28: 22631173.415 ops/s
# Warmup Iteration  29: 22673841.563 ops/s
# Warmup Iteration  30: 22638142.311 ops/s
Iteration   1: 22572773.350 ops/s
Iteration   2: 22669325.724 ops/s
Iteration   3: 22525807.863 ops/s
Iteration   4: 22553532.343 ops/s
Iteration   5: 22592434.298 ops/s
Iteration   6: 22735323.548 ops/s
Iteration   7: 22603248.728 ops/s
Iteration   8: 22574162.312 ops/s
Iteration   9: 22667300.638 ops/s
Iteration  10: 22583777.714 ops/s
Iteration  11: 22670403.005 ops/s
Iteration  12: 22630559.531 ops/s
Iteration  13: 22666822.801 ops/s
Iteration  14: 22644305.660 ops/s
Iteration  15: 22646105.614 ops/s
Iteration  16: 22548625.413 ops/s
Iteration  17: 22595416.204 ops/s
Iteration  18: 22674765.315 ops/s
Iteration  19: 22656777.836 ops/s
Iteration  20: 22645875.148 ops/s
Iteration  21: 22705820.682 ops/s
Iteration  22: 22672954.642 ops/s
Iteration  23: 22696399.870 ops/s
Iteration  24: 22710151.637 ops/s
Iteration  25: 22679825.723 ops/s
Iteration  26: 22661045.341 ops/s
Iteration  27: 22586890.756 ops/s
Iteration  28: 22726891.072 ops/s
Iteration  29: 22651813.066 ops/s
Iteration  30: 22676761.908 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_count":
  22640863.258 ±(99.9%) 36777.775 ops/s [Average]
  (min, avg, max) = (22525807.863, 22640863.258, 22735323.548), stdev = 55047.246
  CI (99.9%): [22604085.483, 22677641.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_count  thrpt   30  22640863.258 ± 36777.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8459366.800 ops/s
# Warmup Iteration   2: 16803728.534 ops/s
# Warmup Iteration   3: 16656189.439 ops/s
# Warmup Iteration   4: 14040330.809 ops/s
# Warmup Iteration   5: 16713403.644 ops/s
# Warmup Iteration   6: 16733043.668 ops/s
# Warmup Iteration   7: 16733212.790 ops/s
# Warmup Iteration   8: 16740000.645 ops/s
# Warmup Iteration   9: 16683664.046 ops/s
# Warmup Iteration  10: 16687412.460 ops/s
# Warmup Iteration  11: 16720513.764 ops/s
# Warmup Iteration  12: 16730879.040 ops/s
# Warmup Iteration  13: 16709998.242 ops/s
# Warmup Iteration  14: 16694681.543 ops/s
# Warmup Iteration  15: 16719635.679 ops/s
# Warmup Iteration  16: 16744242.059 ops/s
# Warmup Iteration  17: 16705475.764 ops/s
# Warmup Iteration  18: 16722405.037 ops/s
# Warmup Iteration  19: 16737845.504 ops/s
# Warmup Iteration  20: 16677851.208 ops/s
# Warmup Iteration  21: 16700147.506 ops/s
# Warmup Iteration  22: 16688638.854 ops/s
# Warmup Iteration  23: 16754459.364 ops/s
# Warmup Iteration  24: 16736409.257 ops/s
# Warmup Iteration  25: 16704105.920 ops/s
# Warmup Iteration  26: 16729221.914 ops/s
# Warmup Iteration  27: 16752908.958 ops/s
# Warmup Iteration  28: 16762860.524 ops/s
# Warmup Iteration  29: 16730589.576 ops/s
# Warmup Iteration  30: 16741129.884 ops/s
Iteration   1: 16755401.555 ops/s
Iteration   2: 16652818.077 ops/s
Iteration   3: 16757619.187 ops/s
Iteration   4: 16695528.348 ops/s
Iteration   5: 16698138.897 ops/s
Iteration   6: 16700350.086 ops/s
Iteration   7: 16755906.894 ops/s
Iteration   8: 16743515.476 ops/s
Iteration   9: 16704447.198 ops/s
Iteration  10: 16715421.872 ops/s
Iteration  11: 16759139.071 ops/s
Iteration  12: 16689115.579 ops/s
Iteration  13: 16698502.850 ops/s
Iteration  14: 16726473.580 ops/s
Iteration  15: 16695426.764 ops/s
Iteration  16: 16726581.150 ops/s
Iteration  17: 16723870.260 ops/s
Iteration  18: 16678580.144 ops/s
Iteration  19: 16712336.107 ops/s
Iteration  20: 16704961.934 ops/s
Iteration  21: 16699754.286 ops/s
Iteration  22: 16699494.716 ops/s
Iteration  23: 16723646.586 ops/s
Iteration  24: 16749183.759 ops/s
Iteration  25: 16704000.688 ops/s
Iteration  26: 16729460.814 ops/s
Iteration  27: 16713811.340 ops/s
Iteration  28: 16744599.283 ops/s
Iteration  29: 16768275.168 ops/s
Iteration  30: 16723205.526 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_detectIfNone":
  16718318.906 ±(99.9%) 18124.816 ops/s [Average]
  (min, avg, max) = (16652818.077, 16718318.906, 16768275.168), stdev = 27128.373
  CI (99.9%): [16700194.091, 16736443.722] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  16718318.906 ± 18124.816  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10796599.809 ops/s
# Warmup Iteration   2: 20881670.542 ops/s
# Warmup Iteration   3: 17713211.638 ops/s
# Warmup Iteration   4: 20918073.497 ops/s
# Warmup Iteration   5: 20926334.602 ops/s
# Warmup Iteration   6: 20927980.126 ops/s
# Warmup Iteration   7: 20877203.469 ops/s
# Warmup Iteration   8: 20933418.262 ops/s
# Warmup Iteration   9: 20915976.168 ops/s
# Warmup Iteration  10: 20947573.849 ops/s
# Warmup Iteration  11: 20850919.616 ops/s
# Warmup Iteration  12: 20877152.644 ops/s
# Warmup Iteration  13: 20892918.145 ops/s
# Warmup Iteration  14: 20923674.687 ops/s
# Warmup Iteration  15: 20951020.475 ops/s
# Warmup Iteration  16: 20914147.318 ops/s
# Warmup Iteration  17: 20936230.617 ops/s
# Warmup Iteration  18: 20942655.442 ops/s
# Warmup Iteration  19: 20834936.408 ops/s
# Warmup Iteration  20: 20856564.772 ops/s
# Warmup Iteration  21: 20922613.076 ops/s
# Warmup Iteration  22: 20853624.486 ops/s
# Warmup Iteration  23: 20912432.310 ops/s
# Warmup Iteration  24: 20900304.225 ops/s
# Warmup Iteration  25: 20980046.450 ops/s
# Warmup Iteration  26: 20932446.072 ops/s
# Warmup Iteration  27: 20854282.425 ops/s
# Warmup Iteration  28: 20901308.250 ops/s
# Warmup Iteration  29: 20871333.538 ops/s
# Warmup Iteration  30: 20877889.068 ops/s
Iteration   1: 20939516.890 ops/s
Iteration   2: 20940192.307 ops/s
Iteration   3: 20821928.828 ops/s
Iteration   4: 20884402.413 ops/s
Iteration   5: 20904513.182 ops/s
Iteration   6: 20928512.712 ops/s
Iteration   7: 20841449.387 ops/s
Iteration   8: 20843769.719 ops/s
Iteration   9: 20869259.804 ops/s
Iteration  10: 20883014.020 ops/s
Iteration  11: 20902994.281 ops/s
Iteration  12: 20894401.018 ops/s
Iteration  13: 20890625.670 ops/s
Iteration  14: 20886766.196 ops/s
Iteration  15: 20876290.033 ops/s
Iteration  16: 20902466.576 ops/s
Iteration  17: 20971205.016 ops/s
Iteration  18: 20930543.306 ops/s
Iteration  19: 20904831.377 ops/s
Iteration  20: 20817879.056 ops/s
Iteration  21: 20886907.760 ops/s
Iteration  22: 20881169.638 ops/s
Iteration  23: 20914909.960 ops/s
Iteration  24: 20818134.822 ops/s
Iteration  25: 20920102.468 ops/s
Iteration  26: 20865402.640 ops/s
Iteration  27: 20928619.536 ops/s
Iteration  28: 20839606.610 ops/s
Iteration  29: 20823103.670 ops/s
Iteration  30: 20915853.919 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEach":
  20887612.427 ±(99.9%) 26866.005 ops/s [Average]
  (min, avg, max) = (20817879.056, 20887612.427, 20971205.016), stdev = 40211.775
  CI (99.9%): [20860746.422, 20914478.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_forEach  thrpt   30  20887612.427 ± 26866.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 9573746.146 ops/s
# Warmup Iteration   2: 19639973.993 ops/s
# Warmup Iteration   3: 15959960.999 ops/s
# Warmup Iteration   4: 18812872.737 ops/s
# Warmup Iteration   5: 18706061.739 ops/s
# Warmup Iteration   6: 18787752.769 ops/s
# Warmup Iteration   7: 18964779.139 ops/s
# Warmup Iteration   8: 18711496.090 ops/s
# Warmup Iteration   9: 18912161.674 ops/s
# Warmup Iteration  10: 18849688.003 ops/s
# Warmup Iteration  11: 18845629.304 ops/s
# Warmup Iteration  12: 18750246.943 ops/s
# Warmup Iteration  13: 18784524.069 ops/s
# Warmup Iteration  14: 18772889.967 ops/s
# Warmup Iteration  15: 18785524.721 ops/s
# Warmup Iteration  16: 18818843.133 ops/s
# Warmup Iteration  17: 18935649.090 ops/s
# Warmup Iteration  18: 18762415.299 ops/s
# Warmup Iteration  19: 18856529.302 ops/s
# Warmup Iteration  20: 18789938.224 ops/s
# Warmup Iteration  21: 18820021.674 ops/s
# Warmup Iteration  22: 18739219.864 ops/s
# Warmup Iteration  23: 18824364.052 ops/s
# Warmup Iteration  24: 18907820.845 ops/s
# Warmup Iteration  25: 19022859.706 ops/s
# Warmup Iteration  26: 18840467.208 ops/s
# Warmup Iteration  27: 18765467.292 ops/s
# Warmup Iteration  28: 18788077.781 ops/s
# Warmup Iteration  29: 18819148.236 ops/s
# Warmup Iteration  30: 18662331.115 ops/s
Iteration   1: 18849133.029 ops/s
Iteration   2: 18832921.584 ops/s
Iteration   3: 18752691.368 ops/s
Iteration   4: 18655352.060 ops/s
Iteration   5: 18769736.221 ops/s
Iteration   6: 18899564.307 ops/s
Iteration   7: 18931656.443 ops/s
Iteration   8: 18627440.581 ops/s
Iteration   9: 18748440.891 ops/s
Iteration  10: 18784720.956 ops/s
Iteration  11: 18779271.354 ops/s
Iteration  12: 18793527.599 ops/s
Iteration  13: 18898830.842 ops/s
Iteration  14: 18838312.890 ops/s
Iteration  15: 18797415.851 ops/s
Iteration  16: 18879264.789 ops/s
Iteration  17: 18883109.611 ops/s
Iteration  18: 18978360.986 ops/s
Iteration  19: 18735209.840 ops/s
Iteration  20: 18857636.118 ops/s
Iteration  21: 18681549.882 ops/s
Iteration  22: 18842956.908 ops/s
Iteration  23: 18980101.717 ops/s
Iteration  24: 18904625.203 ops/s
Iteration  25: 18894647.354 ops/s
Iteration  26: 18612751.194 ops/s
Iteration  27: 18871481.436 ops/s
Iteration  28: 18727503.382 ops/s
Iteration  29: 18939285.014 ops/s
Iteration  30: 18731625.255 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences":
  18815970.822 ±(99.9%) 65859.220 ops/s [Average]
  (min, avg, max) = (18612751.194, 18815970.822, 18980101.717), stdev = 98574.988
  CI (99.9%): [18750111.602, 18881830.042] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  18815970.822 ± 65859.220  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33602368.283 ops/s
# Warmup Iteration   2: 67341191.427 ops/s
# Warmup Iteration   3: 57812686.960 ops/s
# Warmup Iteration   4: 68289682.197 ops/s
# Warmup Iteration   5: 68197683.006 ops/s
# Warmup Iteration   6: 68083775.186 ops/s
# Warmup Iteration   7: 68208388.383 ops/s
# Warmup Iteration   8: 68154368.072 ops/s
# Warmup Iteration   9: 67936101.693 ops/s
# Warmup Iteration  10: 68197396.218 ops/s
# Warmup Iteration  11: 68498125.282 ops/s
# Warmup Iteration  12: 68346899.232 ops/s
# Warmup Iteration  13: 68167100.756 ops/s
# Warmup Iteration  14: 68061333.468 ops/s
# Warmup Iteration  15: 68080363.656 ops/s
# Warmup Iteration  16: 68082919.671 ops/s
# Warmup Iteration  17: 68168864.378 ops/s
# Warmup Iteration  18: 68178849.220 ops/s
# Warmup Iteration  19: 68352105.619 ops/s
# Warmup Iteration  20: 68037356.342 ops/s
# Warmup Iteration  21: 68290879.311 ops/s
# Warmup Iteration  22: 68288860.146 ops/s
# Warmup Iteration  23: 68052897.102 ops/s
# Warmup Iteration  24: 68096189.046 ops/s
# Warmup Iteration  25: 68081832.798 ops/s
# Warmup Iteration  26: 67924581.748 ops/s
# Warmup Iteration  27: 67925234.310 ops/s
# Warmup Iteration  28: 68170231.822 ops/s
# Warmup Iteration  29: 67860218.407 ops/s
# Warmup Iteration  30: 68115636.103 ops/s
Iteration   1: 68259121.780 ops/s
Iteration   2: 67886891.731 ops/s
Iteration   3: 68103193.733 ops/s
Iteration   4: 67924673.771 ops/s
Iteration   5: 68132310.603 ops/s
Iteration   6: 68176043.160 ops/s
Iteration   7: 68238125.792 ops/s
Iteration   8: 68150401.090 ops/s
Iteration   9: 68265561.728 ops/s
Iteration  10: 67919449.548 ops/s
Iteration  11: 67936583.703 ops/s
Iteration  12: 67964816.151 ops/s
Iteration  13: 68363552.965 ops/s
Iteration  14: 67890810.277 ops/s
Iteration  15: 68277325.816 ops/s
Iteration  16: 68276793.890 ops/s
Iteration  17: 68356441.452 ops/s
Iteration  18: 68076391.350 ops/s
Iteration  19: 68105838.510 ops/s
Iteration  20: 68193433.296 ops/s
Iteration  21: 68399112.807 ops/s
Iteration  22: 68195759.157 ops/s
Iteration  23: 68456120.935 ops/s
Iteration  24: 68543948.043 ops/s
Iteration  25: 68344063.480 ops/s
Iteration  26: 68181282.649 ops/s
Iteration  27: 68269562.962 ops/s
Iteration  28: 68232343.517 ops/s
Iteration  29: 68098701.751 ops/s
Iteration  30: 68182498.199 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_injectInto":
  68180038.461 ±(99.9%) 113405.363 ops/s [Average]
  (min, avg, max) = (67886891.731, 68180038.461, 68543948.043), stdev = 169739.822
  CI (99.9%): [68066633.098, 68293443.825] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_injectInto  thrpt   30  68180038.461 ± 113405.363  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2014049.199 ops/s
# Warmup Iteration   2: 3211591.429 ops/s
# Warmup Iteration   3: 3740341.377 ops/s
# Warmup Iteration   4: 3729684.272 ops/s
# Warmup Iteration   5: 3732796.134 ops/s
# Warmup Iteration   6: 3737896.257 ops/s
# Warmup Iteration   7: 3736213.500 ops/s
# Warmup Iteration   8: 3733622.870 ops/s
# Warmup Iteration   9: 3720929.645 ops/s
# Warmup Iteration  10: 3723013.061 ops/s
# Warmup Iteration  11: 3716557.779 ops/s
# Warmup Iteration  12: 3728165.148 ops/s
# Warmup Iteration  13: 3737866.745 ops/s
# Warmup Iteration  14: 3740230.050 ops/s
# Warmup Iteration  15: 3729958.379 ops/s
# Warmup Iteration  16: 3734256.125 ops/s
# Warmup Iteration  17: 3758165.766 ops/s
# Warmup Iteration  18: 3762374.215 ops/s
# Warmup Iteration  19: 3755896.336 ops/s
# Warmup Iteration  20: 3762241.427 ops/s
# Warmup Iteration  21: 3752062.568 ops/s
# Warmup Iteration  22: 3765563.892 ops/s
# Warmup Iteration  23: 3754396.880 ops/s
# Warmup Iteration  24: 3760763.401 ops/s
# Warmup Iteration  25: 3739684.540 ops/s
# Warmup Iteration  26: 3734237.919 ops/s
# Warmup Iteration  27: 3756827.080 ops/s
# Warmup Iteration  28: 3762123.490 ops/s
# Warmup Iteration  29: 3746702.390 ops/s
# Warmup Iteration  30: 3743911.919 ops/s
Iteration   1: 3769409.572 ops/s
Iteration   2: 3728231.505 ops/s
Iteration   3: 3753933.603 ops/s
Iteration   4: 3741799.667 ops/s
Iteration   5: 3765042.673 ops/s
Iteration   6: 3756571.553 ops/s
Iteration   7: 3750963.942 ops/s
Iteration   8: 3712112.707 ops/s
Iteration   9: 3738213.828 ops/s
Iteration  10: 3752301.500 ops/s
Iteration  11: 3737060.376 ops/s
Iteration  12: 3763567.004 ops/s
Iteration  13: 3764904.167 ops/s
Iteration  14: 3758565.932 ops/s
Iteration  15: 3710491.511 ops/s
Iteration  16: 3755407.541 ops/s
Iteration  17: 3766170.840 ops/s
Iteration  18: 3741612.567 ops/s
Iteration  19: 3758026.865 ops/s
Iteration  20: 3760064.024 ops/s
Iteration  21: 3764722.430 ops/s
Iteration  22: 3741130.723 ops/s
Iteration  23: 3757681.907 ops/s
Iteration  24: 3754896.180 ops/s
Iteration  25: 3756895.186 ops/s
Iteration  26: 3740585.513 ops/s
Iteration  27: 3752883.748 ops/s
Iteration  28: 3758663.178 ops/s
Iteration  29: 3725069.598 ops/s
Iteration  30: 3756564.778 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_isEmpty":
  3749784.821 ±(99.9%) 10215.096 ops/s [Average]
  (min, avg, max) = (3710491.511, 3749784.821, 3769409.572), stdev = 15289.476
  CI (99.9%): [3739569.724, 3759999.917] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_isEmpty  thrpt   30  3749784.821 ± 10215.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790417.361 ops/s
# Warmup Iteration   2: 801216.092 ops/s
# Warmup Iteration   3: 998670.982 ops/s
# Warmup Iteration   4: 1042905.534 ops/s
# Warmup Iteration   5: 1040151.563 ops/s
# Warmup Iteration   6: 1039837.946 ops/s
# Warmup Iteration   7: 1040279.751 ops/s
# Warmup Iteration   8: 1038254.224 ops/s
# Warmup Iteration   9: 1042899.791 ops/s
# Warmup Iteration  10: 1045062.827 ops/s
# Warmup Iteration  11: 1041271.017 ops/s
# Warmup Iteration  12: 1042727.612 ops/s
# Warmup Iteration  13: 877256.450 ops/s
# Warmup Iteration  14: 1044818.284 ops/s
# Warmup Iteration  15: 1038582.550 ops/s
# Warmup Iteration  16: 1039210.002 ops/s
# Warmup Iteration  17: 1105920.864 ops/s
# Warmup Iteration  18: 1111285.703 ops/s
# Warmup Iteration  19: 1108746.647 ops/s
# Warmup Iteration  20: 1108256.235 ops/s
# Warmup Iteration  21: 1107441.289 ops/s
# Warmup Iteration  22: 1105891.296 ops/s
# Warmup Iteration  23: 1104011.391 ops/s
# Warmup Iteration  24: 1106599.812 ops/s
# Warmup Iteration  25: 1108482.898 ops/s
# Warmup Iteration  26: 1106542.480 ops/s
# Warmup Iteration  27: 1104575.136 ops/s
# Warmup Iteration  28: 1109087.160 ops/s
# Warmup Iteration  29: 1111962.594 ops/s
# Warmup Iteration  30: 1109540.521 ops/s
Iteration   1: 1112337.001 ops/s
Iteration   2: 1102707.894 ops/s
Iteration   3: 1111856.280 ops/s
Iteration   4: 1106117.433 ops/s
Iteration   5: 1104094.298 ops/s
Iteration   6: 1109254.797 ops/s
Iteration   7: 1108378.204 ops/s
Iteration   8: 1109221.567 ops/s
Iteration   9: 1105344.627 ops/s
Iteration  10: 1108740.583 ops/s
Iteration  11: 1111882.547 ops/s
Iteration  12: 1108470.771 ops/s
Iteration  13: 1105914.768 ops/s
Iteration  14: 1115312.510 ops/s
Iteration  15: 1108967.247 ops/s
Iteration  16: 1109341.661 ops/s
Iteration  17: 1108449.430 ops/s
Iteration  18: 1109903.794 ops/s
Iteration  19: 1106242.005 ops/s
Iteration  20: 1105547.024 ops/s
Iteration  21: 1113183.927 ops/s
Iteration  22: 1106290.570 ops/s
Iteration  23: 1111226.469 ops/s
Iteration  24: 1110119.313 ops/s
Iteration  25: 1108522.985 ops/s
Iteration  26: 1112552.360 ops/s
Iteration  27: 1109163.693 ops/s
Iteration  28: 1104678.496 ops/s
Iteration  29: 1107264.496 ops/s
Iteration  30: 1105002.856 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws":
  1108536.320 ±(99.9%) 1996.863 ops/s [Average]
  (min, avg, max) = (1102707.894, 1108536.320, 1115312.510), stdev = 2988.811
  CI (99.9%): [1106539.457, 1110533.183] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1108536.320 ± 1996.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 855678.117 ops/s
# Warmup Iteration   2: 864995.420 ops/s
# Warmup Iteration   3: 1016369.835 ops/s
# Warmup Iteration   4: 1093033.599 ops/s
# Warmup Iteration   5: 1096181.627 ops/s
# Warmup Iteration   6: 1094614.851 ops/s
# Warmup Iteration   7: 1093002.959 ops/s
# Warmup Iteration   8: 1096245.578 ops/s
# Warmup Iteration   9: 1095514.687 ops/s
# Warmup Iteration  10: 1096166.469 ops/s
# Warmup Iteration  11: 1097464.022 ops/s
# Warmup Iteration  12: 1098951.716 ops/s
# Warmup Iteration  13: 1099697.808 ops/s
# Warmup Iteration  14: 919821.125 ops/s
# Warmup Iteration  15: 1098552.193 ops/s
# Warmup Iteration  16: 1099725.186 ops/s
# Warmup Iteration  17: 1159720.343 ops/s
# Warmup Iteration  18: 1163476.417 ops/s
# Warmup Iteration  19: 1162874.077 ops/s
# Warmup Iteration  20: 1167344.433 ops/s
# Warmup Iteration  21: 1163445.732 ops/s
# Warmup Iteration  22: 1166053.801 ops/s
# Warmup Iteration  23: 1163181.164 ops/s
# Warmup Iteration  24: 1160461.097 ops/s
# Warmup Iteration  25: 1166184.764 ops/s
# Warmup Iteration  26: 1161665.316 ops/s
# Warmup Iteration  27: 1161790.857 ops/s
# Warmup Iteration  28: 1160364.129 ops/s
# Warmup Iteration  29: 1163853.411 ops/s
# Warmup Iteration  30: 1163385.384 ops/s
Iteration   1: 1161954.246 ops/s
Iteration   2: 1161728.952 ops/s
Iteration   3: 1165018.366 ops/s
Iteration   4: 1167700.286 ops/s
Iteration   5: 1158260.641 ops/s
Iteration   6: 1164622.645 ops/s
Iteration   7: 1164402.620 ops/s
Iteration   8: 1164309.712 ops/s
Iteration   9: 1163638.797 ops/s
Iteration  10: 1160464.988 ops/s
Iteration  11: 1165414.836 ops/s
Iteration  12: 1163862.334 ops/s
Iteration  13: 1165399.391 ops/s
Iteration  14: 1165347.989 ops/s
Iteration  15: 1168278.234 ops/s
Iteration  16: 1162644.298 ops/s
Iteration  17: 1159357.752 ops/s
Iteration  18: 1163630.063 ops/s
Iteration  19: 1165798.122 ops/s
Iteration  20: 1164307.967 ops/s
Iteration  21: 1165968.934 ops/s
Iteration  22: 1163876.436 ops/s
Iteration  23: 1160542.688 ops/s
Iteration  24: 1167622.912 ops/s
Iteration  25: 1166213.904 ops/s
Iteration  26: 1166557.640 ops/s
Iteration  27: 1162687.444 ops/s
Iteration  28: 1158293.540 ops/s
Iteration  29: 1164471.758 ops/s
Iteration  30: 1163528.981 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1163863.549 ±(99.9%) 1736.132 ops/s [Average]
  (min, avg, max) = (1158260.641, 1163863.549, 1168278.234), stdev = 2598.561
  CI (99.9%): [1162127.417, 1165599.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1163863.549 ± 1736.132  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 791072.696 ops/s
# Warmup Iteration   2: 804785.343 ops/s
# Warmup Iteration   3: 1006401.529 ops/s
# Warmup Iteration   4: 1022383.545 ops/s
# Warmup Iteration   5: 1026244.403 ops/s
# Warmup Iteration   6: 1023412.966 ops/s
# Warmup Iteration   7: 1024311.386 ops/s
# Warmup Iteration   8: 1024242.016 ops/s
# Warmup Iteration   9: 1023605.612 ops/s
# Warmup Iteration  10: 1025586.735 ops/s
# Warmup Iteration  11: 1026015.698 ops/s
# Warmup Iteration  12: 1009042.104 ops/s
# Warmup Iteration  13: 878602.577 ops/s
# Warmup Iteration  14: 1023660.229 ops/s
# Warmup Iteration  15: 1025829.682 ops/s
# Warmup Iteration  16: 1021796.966 ops/s
# Warmup Iteration  17: 1085500.172 ops/s
# Warmup Iteration  18: 1082446.351 ops/s
# Warmup Iteration  19: 1086262.299 ops/s
# Warmup Iteration  20: 1088439.052 ops/s
# Warmup Iteration  21: 1089474.491 ops/s
# Warmup Iteration  22: 1083515.734 ops/s
# Warmup Iteration  23: 1087607.201 ops/s
# Warmup Iteration  24: 1082766.617 ops/s
# Warmup Iteration  25: 1089386.586 ops/s
# Warmup Iteration  26: 1086775.069 ops/s
# Warmup Iteration  27: 1090478.790 ops/s
# Warmup Iteration  28: 1085212.580 ops/s
# Warmup Iteration  29: 1087661.157 ops/s
# Warmup Iteration  30: 1084232.426 ops/s
Iteration   1: 1090738.080 ops/s
Iteration   2: 1090325.499 ops/s
Iteration   3: 1086330.533 ops/s
Iteration   4: 1082868.929 ops/s
Iteration   5: 1085957.440 ops/s
Iteration   6: 1088243.509 ops/s
Iteration   7: 1087656.718 ops/s
Iteration   8: 1086789.942 ops/s
Iteration   9: 1085963.961 ops/s
Iteration  10: 1084947.486 ops/s
Iteration  11: 1087270.592 ops/s
Iteration  12: 1083382.796 ops/s
Iteration  13: 1088996.702 ops/s
Iteration  14: 1084063.037 ops/s
Iteration  15: 1087337.647 ops/s
Iteration  16: 1087542.835 ops/s
Iteration  17: 1091979.695 ops/s
Iteration  18: 1089563.773 ops/s
Iteration  19: 1088931.850 ops/s
Iteration  20: 1084018.308 ops/s
Iteration  21: 1087474.395 ops/s
Iteration  22: 1088756.714 ops/s
Iteration  23: 1090488.329 ops/s
Iteration  24: 1082385.467 ops/s
Iteration  25: 1086472.819 ops/s
Iteration  26: 1087083.631 ops/s
Iteration  27: 1087052.094 ops/s
Iteration  28: 1086752.583 ops/s
Iteration  29: 1088810.078 ops/s
Iteration  30: 1088021.840 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1087206.909 ±(99.9%) 1575.538 ops/s [Average]
  (min, avg, max) = (1082385.467, 1087206.909, 1091979.695), stdev = 2358.191
  CI (99.9%): [1085631.372, 1088782.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1087206.909 ± 1575.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1072352.129 ops/s
# Warmup Iteration   2: 2302697.781 ops/s
# Warmup Iteration   3: 2287965.665 ops/s
# Warmup Iteration   4: 1910768.480 ops/s
# Warmup Iteration   5: 2294364.378 ops/s
# Warmup Iteration   6: 2301438.395 ops/s
# Warmup Iteration   7: 2298771.700 ops/s
# Warmup Iteration   8: 2314075.266 ops/s
# Warmup Iteration   9: 2292910.201 ops/s
# Warmup Iteration  10: 2289075.116 ops/s
# Warmup Iteration  11: 2302870.450 ops/s
# Warmup Iteration  12: 2294398.082 ops/s
# Warmup Iteration  13: 2304019.590 ops/s
# Warmup Iteration  14: 2313487.061 ops/s
# Warmup Iteration  15: 2298493.922 ops/s
# Warmup Iteration  16: 2308469.920 ops/s
# Warmup Iteration  17: 2296273.028 ops/s
# Warmup Iteration  18: 2300582.894 ops/s
# Warmup Iteration  19: 2285181.089 ops/s
# Warmup Iteration  20: 2299979.595 ops/s
# Warmup Iteration  21: 2304033.273 ops/s
# Warmup Iteration  22: 2306687.495 ops/s
# Warmup Iteration  23: 2295845.590 ops/s
# Warmup Iteration  24: 2309850.578 ops/s
# Warmup Iteration  25: 2301747.690 ops/s
# Warmup Iteration  26: 2305683.574 ops/s
# Warmup Iteration  27: 2290715.730 ops/s
# Warmup Iteration  28: 2296245.372 ops/s
# Warmup Iteration  29: 2296557.234 ops/s
# Warmup Iteration  30: 2284683.744 ops/s
Iteration   1: 2300574.117 ops/s
Iteration   2: 2311936.734 ops/s
Iteration   3: 2302137.049 ops/s
Iteration   4: 2298291.380 ops/s
Iteration   5: 2298391.146 ops/s
Iteration   6: 2305189.570 ops/s
Iteration   7: 2296703.611 ops/s
Iteration   8: 2279341.126 ops/s
Iteration   9: 2289181.027 ops/s
Iteration  10: 2289640.937 ops/s
Iteration  11: 2303774.864 ops/s
Iteration  12: 2277501.570 ops/s
Iteration  13: 2294811.487 ops/s
Iteration  14: 2301667.486 ops/s
Iteration  15: 2312740.978 ops/s
Iteration  16: 2297642.647 ops/s
Iteration  17: 2283840.484 ops/s
Iteration  18: 2285063.117 ops/s
Iteration  19: 2291783.186 ops/s
Iteration  20: 2297272.142 ops/s
Iteration  21: 2290968.467 ops/s
Iteration  22: 2310767.324 ops/s
Iteration  23: 2299347.843 ops/s
Iteration  24: 2311626.592 ops/s
Iteration  25: 2285358.490 ops/s
Iteration  26: 2286294.854 ops/s
Iteration  27: 2284051.753 ops/s
Iteration  28: 2309582.532 ops/s
Iteration  29: 2316269.349 ops/s
Iteration  30: 2274500.755 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_makeString":
  2296208.421 ±(99.9%) 7530.434 ops/s [Average]
  (min, avg, max) = (2274500.755, 2296208.421, 2316269.349), stdev = 11271.200
  CI (99.9%): [2288677.986, 2303738.855] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_makeString  thrpt   30  2296208.421 ± 7530.434  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16048407.785 ops/s
# Warmup Iteration   2: 31466605.882 ops/s
# Warmup Iteration   3: 25662311.385 ops/s
# Warmup Iteration   4: 29926697.436 ops/s
# Warmup Iteration   5: 29944632.026 ops/s
# Warmup Iteration   6: 29959073.431 ops/s
# Warmup Iteration   7: 30015942.353 ops/s
# Warmup Iteration   8: 29965568.956 ops/s
# Warmup Iteration   9: 29928427.673 ops/s
# Warmup Iteration  10: 29957064.452 ops/s
# Warmup Iteration  11: 30049289.136 ops/s
# Warmup Iteration  12: 29926361.672 ops/s
# Warmup Iteration  13: 29791358.365 ops/s
# Warmup Iteration  14: 29886503.850 ops/s
# Warmup Iteration  15: 29948863.282 ops/s
# Warmup Iteration  16: 29885172.774 ops/s
# Warmup Iteration  17: 30014939.643 ops/s
# Warmup Iteration  18: 30079537.133 ops/s
# Warmup Iteration  19: 29992940.417 ops/s
# Warmup Iteration  20: 30027431.124 ops/s
# Warmup Iteration  21: 29973087.752 ops/s
# Warmup Iteration  22: 30009328.282 ops/s
# Warmup Iteration  23: 30072101.945 ops/s
# Warmup Iteration  24: 30031760.488 ops/s
# Warmup Iteration  25: 30034675.539 ops/s
# Warmup Iteration  26: 30025986.614 ops/s
# Warmup Iteration  27: 30101755.295 ops/s
# Warmup Iteration  28: 29933323.665 ops/s
# Warmup Iteration  29: 29971306.888 ops/s
# Warmup Iteration  30: 30051464.237 ops/s
Iteration   1: 30045573.940 ops/s
Iteration   2: 30136654.645 ops/s
Iteration   3: 30050781.308 ops/s
Iteration   4: 29941811.336 ops/s
Iteration   5: 30142715.426 ops/s
Iteration   6: 29943346.127 ops/s
Iteration   7: 30147289.949 ops/s
Iteration   8: 30054392.837 ops/s
Iteration   9: 30042472.594 ops/s
Iteration  10: 30014720.794 ops/s
Iteration  11: 30074995.699 ops/s
Iteration  12: 30046073.385 ops/s
Iteration  13: 30110482.875 ops/s
Iteration  14: 30063002.773 ops/s
Iteration  15: 30073093.030 ops/s
Iteration  16: 30055345.462 ops/s
Iteration  17: 30119045.967 ops/s
Iteration  18: 30075608.934 ops/s
Iteration  19: 30140396.319 ops/s
Iteration  20: 29850430.517 ops/s
Iteration  21: 30099821.302 ops/s
Iteration  22: 30108727.681 ops/s
Iteration  23: 29989169.093 ops/s
Iteration  24: 30003112.610 ops/s
Iteration  25: 30058545.085 ops/s
Iteration  26: 30117404.242 ops/s
Iteration  27: 30085772.262 ops/s
Iteration  28: 30063360.923 ops/s
Iteration  29: 30141140.910 ops/s
Iteration  30: 30149901.140 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollection":
  30064839.639 ±(99.9%) 46092.942 ops/s [Average]
  (min, avg, max) = (29850430.517, 30064839.639, 30149901.140), stdev = 68989.751
  CI (99.9%): [30018746.697, 30110932.581] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollection  thrpt   30  30064839.639 ± 46092.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8972781.375 ops/s
# Warmup Iteration   2: 14253602.073 ops/s
# Warmup Iteration   3: 16898147.233 ops/s
# Warmup Iteration   4: 16956958.961 ops/s
# Warmup Iteration   5: 16959882.027 ops/s
# Warmup Iteration   6: 16869262.226 ops/s
# Warmup Iteration   7: 17020444.963 ops/s
# Warmup Iteration   8: 16935643.443 ops/s
# Warmup Iteration   9: 16877953.401 ops/s
# Warmup Iteration  10: 16863601.640 ops/s
# Warmup Iteration  11: 16924822.033 ops/s
# Warmup Iteration  12: 16957998.952 ops/s
# Warmup Iteration  13: 16951265.488 ops/s
# Warmup Iteration  14: 16950387.940 ops/s
# Warmup Iteration  15: 16914004.328 ops/s
# Warmup Iteration  16: 16947728.778 ops/s
# Warmup Iteration  17: 16875509.766 ops/s
# Warmup Iteration  18: 16875902.757 ops/s
# Warmup Iteration  19: 16924502.069 ops/s
# Warmup Iteration  20: 16861090.571 ops/s
# Warmup Iteration  21: 16910688.232 ops/s
# Warmup Iteration  22: 16844683.653 ops/s
# Warmup Iteration  23: 16910195.542 ops/s
# Warmup Iteration  24: 16831980.151 ops/s
# Warmup Iteration  25: 16905392.390 ops/s
# Warmup Iteration  26: 16801773.684 ops/s
# Warmup Iteration  27: 16868592.374 ops/s
# Warmup Iteration  28: 16879905.833 ops/s
# Warmup Iteration  29: 16846605.660 ops/s
# Warmup Iteration  30: 16937817.646 ops/s
Iteration   1: 16839307.482 ops/s
Iteration   2: 16906676.408 ops/s
Iteration   3: 16873536.839 ops/s
Iteration   4: 16996186.412 ops/s
Iteration   5: 16871924.178 ops/s
Iteration   6: 16937349.480 ops/s
Iteration   7: 16855708.977 ops/s
Iteration   8: 16902290.146 ops/s
Iteration   9: 16902376.583 ops/s
Iteration  10: 16866099.323 ops/s
Iteration  11: 16823453.231 ops/s
Iteration  12: 16832454.875 ops/s
Iteration  13: 16925237.818 ops/s
Iteration  14: 16796486.164 ops/s
Iteration  15: 16864123.681 ops/s
Iteration  16: 16841830.659 ops/s
Iteration  17: 16861855.855 ops/s
Iteration  18: 16874128.652 ops/s
Iteration  19: 16949258.643 ops/s
Iteration  20: 16949800.189 ops/s
Iteration  21: 16816136.807 ops/s
Iteration  22: 16884996.516 ops/s
Iteration  23: 16862311.861 ops/s
Iteration  24: 16856393.726 ops/s
Iteration  25: 16892770.869 ops/s
Iteration  26: 16998434.933 ops/s
Iteration  27: 16906316.405 ops/s
Iteration  28: 16911642.679 ops/s
Iteration  29: 16969042.821 ops/s
Iteration  30: 16902470.676 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollectionWith":
  16889020.096 ±(99.9%) 33775.480 ops/s [Average]
  (min, avg, max) = (16796486.164, 16889020.096, 16998434.933), stdev = 50553.552
  CI (99.9%): [16855244.617, 16922795.576] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  16889020.096 ± 33775.480  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1325305.677 ops/s
# Warmup Iteration   2: 2722878.103 ops/s
# Warmup Iteration   3: 2904953.210 ops/s
# Warmup Iteration   4: 2913426.849 ops/s
# Warmup Iteration   5: 2385984.222 ops/s
# Warmup Iteration   6: 2913639.729 ops/s
# Warmup Iteration   7: 2904979.917 ops/s
# Warmup Iteration   8: 2909183.231 ops/s
# Warmup Iteration   9: 2909631.851 ops/s
# Warmup Iteration  10: 2906387.079 ops/s
# Warmup Iteration  11: 2911834.708 ops/s
# Warmup Iteration  12: 2910316.341 ops/s
# Warmup Iteration  13: 2912894.961 ops/s
# Warmup Iteration  14: 2913640.177 ops/s
# Warmup Iteration  15: 2911043.590 ops/s
# Warmup Iteration  16: 2914460.911 ops/s
# Warmup Iteration  17: 2913387.128 ops/s
# Warmup Iteration  18: 2911904.063 ops/s
# Warmup Iteration  19: 2914894.911 ops/s
# Warmup Iteration  20: 2911641.141 ops/s
# Warmup Iteration  21: 2906921.419 ops/s
# Warmup Iteration  22: 2917091.423 ops/s
# Warmup Iteration  23: 2910592.441 ops/s
# Warmup Iteration  24: 2917453.046 ops/s
# Warmup Iteration  25: 2918139.783 ops/s
# Warmup Iteration  26: 2913065.093 ops/s
# Warmup Iteration  27: 2908170.898 ops/s
# Warmup Iteration  28: 2915093.011 ops/s
# Warmup Iteration  29: 2912891.838 ops/s
# Warmup Iteration  30: 2909080.450 ops/s
Iteration   1: 2916876.680 ops/s
Iteration   2: 2914913.132 ops/s
Iteration   3: 2915262.791 ops/s
Iteration   4: 2907355.497 ops/s
Iteration   5: 2899662.440 ops/s
Iteration   6: 2904203.791 ops/s
Iteration   7: 2921532.344 ops/s
Iteration   8: 2909724.356 ops/s
Iteration   9: 2907904.300 ops/s
Iteration  10: 2910252.242 ops/s
Iteration  11: 2908140.217 ops/s
Iteration  12: 2904365.500 ops/s
Iteration  13: 2916333.687 ops/s
Iteration  14: 2916829.924 ops/s
Iteration  15: 2901487.268 ops/s
Iteration  16: 2910504.713 ops/s
Iteration  17: 2908660.059 ops/s
Iteration  18: 2926065.570 ops/s
Iteration  19: 2912435.565 ops/s
Iteration  20: 2913040.155 ops/s
Iteration  21: 2916998.819 ops/s
Iteration  22: 2910937.922 ops/s
Iteration  23: 2910694.292 ops/s
Iteration  24: 2912403.680 ops/s
Iteration  25: 2911012.564 ops/s
Iteration  26: 2910551.789 ops/s
Iteration  27: 2914789.135 ops/s
Iteration  28: 2912289.986 ops/s
Iteration  29: 2915863.540 ops/s
Iteration  30: 2910415.419 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithAll":
  2911716.913 ±(99.9%) 3692.113 ops/s [Average]
  (min, avg, max) = (2899662.440, 2911716.913, 2926065.570), stdev = 5526.182
  CI (99.9%): [2908024.799, 2915409.026] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithAll  thrpt   30  2911716.913 ± 3692.113  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1322892.182 ops/s
# Warmup Iteration   2: 2865227.113 ops/s
# Warmup Iteration   3: 3080922.460 ops/s
# Warmup Iteration   4: 3082526.899 ops/s
# Warmup Iteration   5: 2909891.751 ops/s
# Warmup Iteration   6: 2654733.653 ops/s
# Warmup Iteration   7: 3090875.315 ops/s
# Warmup Iteration   8: 3083970.323 ops/s
# Warmup Iteration   9: 3088613.260 ops/s
# Warmup Iteration  10: 3087800.353 ops/s
# Warmup Iteration  11: 3087434.113 ops/s
# Warmup Iteration  12: 3081121.527 ops/s
# Warmup Iteration  13: 3078062.075 ops/s
# Warmup Iteration  14: 3080966.532 ops/s
# Warmup Iteration  15: 3073981.852 ops/s
# Warmup Iteration  16: 3085788.607 ops/s
# Warmup Iteration  17: 3087241.768 ops/s
# Warmup Iteration  18: 3084034.984 ops/s
# Warmup Iteration  19: 3083703.224 ops/s
# Warmup Iteration  20: 3085976.896 ops/s
# Warmup Iteration  21: 3088402.966 ops/s
# Warmup Iteration  22: 3090701.188 ops/s
# Warmup Iteration  23: 3080104.884 ops/s
# Warmup Iteration  24: 3085862.579 ops/s
# Warmup Iteration  25: 3084288.822 ops/s
# Warmup Iteration  26: 3085324.862 ops/s
# Warmup Iteration  27: 3085370.284 ops/s
# Warmup Iteration  28: 3078535.030 ops/s
# Warmup Iteration  29: 3081506.108 ops/s
# Warmup Iteration  30: 3080344.490 ops/s
Iteration   1: 3082292.761 ops/s
Iteration   2: 3075340.297 ops/s
Iteration   3: 3082697.564 ops/s
Iteration   4: 3087131.591 ops/s
Iteration   5: 3076837.884 ops/s
Iteration   6: 3081751.549 ops/s
Iteration   7: 3083419.546 ops/s
Iteration   8: 3069958.778 ops/s
Iteration   9: 3084877.789 ops/s
Iteration  10: 3083459.794 ops/s
Iteration  11: 3085223.236 ops/s
Iteration  12: 3078507.233 ops/s
Iteration  13: 3086549.362 ops/s
Iteration  14: 3087561.385 ops/s
Iteration  15: 3077050.597 ops/s
Iteration  16: 3093093.971 ops/s
Iteration  17: 3083845.772 ops/s
Iteration  18: 3081073.677 ops/s
Iteration  19: 3086822.603 ops/s
Iteration  20: 3082526.416 ops/s
Iteration  21: 3082054.623 ops/s
Iteration  22: 3085873.367 ops/s
Iteration  23: 3086364.226 ops/s
Iteration  24: 3090463.412 ops/s
Iteration  25: 3085174.524 ops/s
Iteration  26: 3079073.388 ops/s
Iteration  27: 3086415.485 ops/s
Iteration  28: 3083234.484 ops/s
Iteration  29: 3075592.826 ops/s
Iteration  30: 3084031.442 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithout":
  3082943.319 ±(99.9%) 3208.477 ops/s [Average]
  (min, avg, max) = (3069958.778, 3082943.319, 3093093.971), stdev = 4802.298
  CI (99.9%): [3079734.842, 3086151.796] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithout  thrpt   30  3082943.319 ± 3208.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7660797.778 ops/s
# Warmup Iteration   2: 17080159.428 ops/s
# Warmup Iteration   3: 17380845.162 ops/s
# Warmup Iteration   4: 14405389.447 ops/s
# Warmup Iteration   5: 17448967.560 ops/s
# Warmup Iteration   6: 17412870.704 ops/s
# Warmup Iteration   7: 17439973.260 ops/s
# Warmup Iteration   8: 17389032.320 ops/s
# Warmup Iteration   9: 17472459.804 ops/s
# Warmup Iteration  10: 17413933.858 ops/s
# Warmup Iteration  11: 17449738.069 ops/s
# Warmup Iteration  12: 17410217.208 ops/s
# Warmup Iteration  13: 17414562.445 ops/s
# Warmup Iteration  14: 17421089.751 ops/s
# Warmup Iteration  15: 17417001.377 ops/s
# Warmup Iteration  16: 17399019.817 ops/s
# Warmup Iteration  17: 17453593.972 ops/s
# Warmup Iteration  18: 17409206.331 ops/s
# Warmup Iteration  19: 17459891.649 ops/s
# Warmup Iteration  20: 17393878.801 ops/s
# Warmup Iteration  21: 17447219.801 ops/s
# Warmup Iteration  22: 17409906.647 ops/s
# Warmup Iteration  23: 17405886.459 ops/s
# Warmup Iteration  24: 17435656.979 ops/s
# Warmup Iteration  25: 17433508.054 ops/s
# Warmup Iteration  26: 17405042.643 ops/s
# Warmup Iteration  27: 17442289.745 ops/s
# Warmup Iteration  28: 17423064.065 ops/s
# Warmup Iteration  29: 17453374.544 ops/s
# Warmup Iteration  30: 17403102.850 ops/s
Iteration   1: 17456774.208 ops/s
Iteration   2: 17461354.987 ops/s
Iteration   3: 17482908.729 ops/s
Iteration   4: 17419166.189 ops/s
Iteration   5: 17467418.877 ops/s
Iteration   6: 17427191.746 ops/s
Iteration   7: 17472433.809 ops/s
Iteration   8: 17403534.773 ops/s
Iteration   9: 17441843.762 ops/s
Iteration  10: 17439851.944 ops/s
Iteration  11: 17446711.481 ops/s
Iteration  12: 17403922.824 ops/s
Iteration  13: 17349675.474 ops/s
Iteration  14: 17461903.108 ops/s
Iteration  15: 17403826.301 ops/s
Iteration  16: 17429015.358 ops/s
Iteration  17: 17376958.834 ops/s
Iteration  18: 17492660.388 ops/s
Iteration  19: 17455912.798 ops/s
Iteration  20: 17452029.884 ops/s
Iteration  21: 17417063.071 ops/s
Iteration  22: 17374029.962 ops/s
Iteration  23: 17420761.017 ops/s
Iteration  24: 17437468.336 ops/s
Iteration  25: 17424805.625 ops/s
Iteration  26: 17468327.886 ops/s
Iteration  27: 17379303.880 ops/s
Iteration  28: 17395352.282 ops/s
Iteration  29: 17459932.990 ops/s
Iteration  30: 17427269.698 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithoutAll":
  17431647.007 ±(99.9%) 23311.282 ops/s [Average]
  (min, avg, max) = (17349675.474, 17431647.007, 17492660.388), stdev = 34891.231
  CI (99.9%): [17408335.726, 17454958.289] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  17431647.007 ± 23311.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10615930.833 ops/s
# Warmup Iteration   2: 17050770.421 ops/s
# Warmup Iteration   3: 20220696.218 ops/s
# Warmup Iteration   4: 20290264.968 ops/s
# Warmup Iteration   5: 20233957.282 ops/s
# Warmup Iteration   6: 20295133.784 ops/s
# Warmup Iteration   7: 20188779.432 ops/s
# Warmup Iteration   8: 20291183.275 ops/s
# Warmup Iteration   9: 20190778.643 ops/s
# Warmup Iteration  10: 20271523.060 ops/s
# Warmup Iteration  11: 20300114.754 ops/s
# Warmup Iteration  12: 20340968.207 ops/s
# Warmup Iteration  13: 20294016.950 ops/s
# Warmup Iteration  14: 20248200.038 ops/s
# Warmup Iteration  15: 20239318.999 ops/s
# Warmup Iteration  16: 20321461.027 ops/s
# Warmup Iteration  17: 20259392.861 ops/s
# Warmup Iteration  18: 20275462.082 ops/s
# Warmup Iteration  19: 20272863.419 ops/s
# Warmup Iteration  20: 20293590.901 ops/s
# Warmup Iteration  21: 20192526.100 ops/s
# Warmup Iteration  22: 20278625.451 ops/s
# Warmup Iteration  23: 20297046.686 ops/s
# Warmup Iteration  24: 20117844.926 ops/s
# Warmup Iteration  25: 20208590.559 ops/s
# Warmup Iteration  26: 20285919.877 ops/s
# Warmup Iteration  27: 20207235.529 ops/s
# Warmup Iteration  28: 20246494.281 ops/s
# Warmup Iteration  29: 20201445.748 ops/s
# Warmup Iteration  30: 20277983.351 ops/s
Iteration   1: 20334373.016 ops/s
Iteration   2: 20144736.181 ops/s
Iteration   3: 20307858.396 ops/s
Iteration   4: 20289598.794 ops/s
Iteration   5: 20310137.907 ops/s
Iteration   6: 20177664.901 ops/s
Iteration   7: 20313088.223 ops/s
Iteration   8: 20044157.751 ops/s
Iteration   9: 20290724.478 ops/s
Iteration  10: 20249774.993 ops/s
Iteration  11: 20316427.723 ops/s
Iteration  12: 20313329.751 ops/s
Iteration  13: 20185479.107 ops/s
Iteration  14: 20230124.392 ops/s
Iteration  15: 20289895.694 ops/s
Iteration  16: 20328747.686 ops/s
Iteration  17: 20249941.383 ops/s
Iteration  18: 20301936.783 ops/s
Iteration  19: 20200881.820 ops/s
Iteration  20: 20251533.994 ops/s
Iteration  21: 20198043.693 ops/s
Iteration  22: 20255298.394 ops/s
Iteration  23: 20343958.924 ops/s
Iteration  24: 20137382.854 ops/s
Iteration  25: 20299769.947 ops/s
Iteration  26: 20267760.146 ops/s
Iteration  27: 20200506.219 ops/s
Iteration  28: 20247553.969 ops/s
Iteration  29: 20279962.627 ops/s
Iteration  30: 20260559.348 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_noneSatisfy":
  20254040.303 ±(99.9%) 45730.556 ops/s [Average]
  (min, avg, max) = (20044157.751, 20254040.303, 20343958.924), stdev = 68447.349
  CI (99.9%): [20208309.747, 20299770.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  20254040.303 ± 45730.556  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 32460304.184 ops/s
# Warmup Iteration   2: 64074319.414 ops/s
# Warmup Iteration   3: 54618143.344 ops/s
# Warmup Iteration   4: 64677769.874 ops/s
# Warmup Iteration   5: 64454735.831 ops/s
# Warmup Iteration   6: 64669445.770 ops/s
# Warmup Iteration   7: 64538792.501 ops/s
# Warmup Iteration   8: 64542940.484 ops/s
# Warmup Iteration   9: 64535184.392 ops/s
# Warmup Iteration  10: 64375079.163 ops/s
# Warmup Iteration  11: 64336859.225 ops/s
# Warmup Iteration  12: 64353386.247 ops/s
# Warmup Iteration  13: 64540248.295 ops/s
# Warmup Iteration  14: 64631466.715 ops/s
# Warmup Iteration  15: 64046558.044 ops/s
# Warmup Iteration  16: 64509145.278 ops/s
# Warmup Iteration  17: 64600214.442 ops/s
# Warmup Iteration  18: 64417480.877 ops/s
# Warmup Iteration  19: 64460294.487 ops/s
# Warmup Iteration  20: 64493999.408 ops/s
# Warmup Iteration  21: 64556095.969 ops/s
# Warmup Iteration  22: 64516356.201 ops/s
# Warmup Iteration  23: 64503821.305 ops/s
# Warmup Iteration  24: 64560994.972 ops/s
# Warmup Iteration  25: 64372130.479 ops/s
# Warmup Iteration  26: 64598606.641 ops/s
# Warmup Iteration  27: 64532520.410 ops/s
# Warmup Iteration  28: 64364789.098 ops/s
# Warmup Iteration  29: 64559572.808 ops/s
# Warmup Iteration  30: 64441780.883 ops/s
Iteration   1: 64510175.882 ops/s
Iteration   2: 64500472.014 ops/s
Iteration   3: 64572407.603 ops/s
Iteration   4: 64554300.768 ops/s
Iteration   5: 64821107.490 ops/s
Iteration   6: 64552035.606 ops/s
Iteration   7: 64493979.050 ops/s
Iteration   8: 64494445.558 ops/s
Iteration   9: 64777157.217 ops/s
Iteration  10: 64546680.522 ops/s
Iteration  11: 64626572.626 ops/s
Iteration  12: 64739713.963 ops/s
Iteration  13: 64418715.664 ops/s
Iteration  14: 64531541.598 ops/s
Iteration  15: 64609065.977 ops/s
Iteration  16: 64592321.690 ops/s
Iteration  17: 64611130.877 ops/s
Iteration  18: 64150390.525 ops/s
Iteration  19: 64267416.883 ops/s
Iteration  20: 64818729.907 ops/s
Iteration  21: 64645034.286 ops/s
Iteration  22: 64335128.873 ops/s
Iteration  23: 64836669.747 ops/s
Iteration  24: 64635166.084 ops/s
Iteration  25: 64670171.887 ops/s
Iteration  26: 64633614.988 ops/s
Iteration  27: 64376381.498 ops/s
Iteration  28: 64605721.368 ops/s
Iteration  29: 64561361.235 ops/s
Iteration  30: 64791097.355 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_notEmpty":
  64575956.958 ±(99.9%) 107691.579 ops/s [Average]
  (min, avg, max) = (64150390.525, 64575956.958, 64836669.747), stdev = 161187.698
  CI (99.9%): [64468265.379, 64683648.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_notEmpty  thrpt   30  64575956.958 ± 107691.579  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6811877.249 ops/s
# Warmup Iteration   2: 12141293.487 ops/s
# Warmup Iteration   3: 11738797.298 ops/s
# Warmup Iteration   4: 12909182.680 ops/s
# Warmup Iteration   5: 12917355.632 ops/s
# Warmup Iteration   6: 12934305.010 ops/s
# Warmup Iteration   7: 12962367.214 ops/s
# Warmup Iteration   8: 12964752.678 ops/s
# Warmup Iteration   9: 12974041.075 ops/s
# Warmup Iteration  10: 12930186.156 ops/s
# Warmup Iteration  11: 12947895.148 ops/s
# Warmup Iteration  12: 12996252.896 ops/s
# Warmup Iteration  13: 12940363.091 ops/s
# Warmup Iteration  14: 12898158.437 ops/s
# Warmup Iteration  15: 12972956.983 ops/s
# Warmup Iteration  16: 12930037.476 ops/s
# Warmup Iteration  17: 12871843.227 ops/s
# Warmup Iteration  18: 12858568.640 ops/s
# Warmup Iteration  19: 12889136.037 ops/s
# Warmup Iteration  20: 12877411.553 ops/s
# Warmup Iteration  21: 12883296.972 ops/s
# Warmup Iteration  22: 12956350.556 ops/s
# Warmup Iteration  23: 12939116.886 ops/s
# Warmup Iteration  24: 12937353.014 ops/s
# Warmup Iteration  25: 12965087.285 ops/s
# Warmup Iteration  26: 12958003.120 ops/s
# Warmup Iteration  27: 12991946.709 ops/s
# Warmup Iteration  28: 12934193.431 ops/s
# Warmup Iteration  29: 12958348.029 ops/s
# Warmup Iteration  30: 12959098.467 ops/s
Iteration   1: 12988933.854 ops/s
Iteration   2: 12913942.507 ops/s
Iteration   3: 12941476.808 ops/s
Iteration   4: 12924492.736 ops/s
Iteration   5: 12940214.798 ops/s
Iteration   6: 12921686.265 ops/s
Iteration   7: 12929972.550 ops/s
Iteration   8: 12963251.104 ops/s
Iteration   9: 12889107.967 ops/s
Iteration  10: 12950486.396 ops/s
Iteration  11: 12964302.535 ops/s
Iteration  12: 12978516.895 ops/s
Iteration  13: 12985551.032 ops/s
Iteration  14: 12959033.399 ops/s
Iteration  15: 12946418.220 ops/s
Iteration  16: 12988581.401 ops/s
Iteration  17: 12915057.263 ops/s
Iteration  18: 13002279.858 ops/s
Iteration  19: 12968359.567 ops/s
Iteration  20: 12910491.331 ops/s
Iteration  21: 12968653.115 ops/s
Iteration  22: 12927180.188 ops/s
Iteration  23: 12970402.813 ops/s
Iteration  24: 12895568.409 ops/s
Iteration  25: 12887596.746 ops/s
Iteration  26: 12956945.535 ops/s
Iteration  27: 12959748.722 ops/s
Iteration  28: 12904543.879 ops/s
Iteration  29: 12917085.951 ops/s
Iteration  30: 12953108.057 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduce":
  12944099.663 ±(99.9%) 21068.588 ops/s [Average]
  (min, avg, max) = (12887596.746, 12944099.663, 13002279.858), stdev = 31534.473
  CI (99.9%): [12923031.076, 12965168.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_reduce  thrpt   30  12944099.663 ± 21068.588  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6481312.215 ops/s
# Warmup Iteration   2: 12257634.327 ops/s
# Warmup Iteration   3: 11189483.504 ops/s
# Warmup Iteration   4: 12703157.893 ops/s
# Warmup Iteration   5: 12743502.868 ops/s
# Warmup Iteration   6: 12761514.414 ops/s
# Warmup Iteration   7: 12719646.078 ops/s
# Warmup Iteration   8: 12697685.402 ops/s
# Warmup Iteration   9: 12704447.027 ops/s
# Warmup Iteration  10: 12743818.255 ops/s
# Warmup Iteration  11: 12753585.160 ops/s
# Warmup Iteration  12: 12753110.726 ops/s
# Warmup Iteration  13: 12724657.184 ops/s
# Warmup Iteration  14: 12730437.740 ops/s
# Warmup Iteration  15: 12732627.727 ops/s
# Warmup Iteration  16: 12746083.128 ops/s
# Warmup Iteration  17: 12745263.340 ops/s
# Warmup Iteration  18: 12679562.620 ops/s
# Warmup Iteration  19: 12706424.272 ops/s
# Warmup Iteration  20: 12721863.632 ops/s
# Warmup Iteration  21: 12744996.286 ops/s
# Warmup Iteration  22: 12718673.158 ops/s
# Warmup Iteration  23: 12678209.344 ops/s
# Warmup Iteration  24: 12681800.945 ops/s
# Warmup Iteration  25: 12724665.410 ops/s
# Warmup Iteration  26: 12746981.867 ops/s
# Warmup Iteration  27: 12715805.974 ops/s
# Warmup Iteration  28: 12657137.703 ops/s
# Warmup Iteration  29: 12735784.775 ops/s
# Warmup Iteration  30: 12710685.081 ops/s
Iteration   1: 12747456.002 ops/s
Iteration   2: 12712946.208 ops/s
Iteration   3: 12693634.689 ops/s
Iteration   4: 12743243.693 ops/s
Iteration   5: 12716317.087 ops/s
Iteration   6: 12713021.370 ops/s
Iteration   7: 12744884.487 ops/s
Iteration   8: 12734211.669 ops/s
Iteration   9: 12679434.567 ops/s
Iteration  10: 12774561.172 ops/s
Iteration  11: 12696985.074 ops/s
Iteration  12: 12716849.165 ops/s
Iteration  13: 12718239.488 ops/s
Iteration  14: 12753129.266 ops/s
Iteration  15: 12682373.384 ops/s
Iteration  16: 12675857.070 ops/s
Iteration  17: 12714361.405 ops/s
Iteration  18: 12729077.213 ops/s
Iteration  19: 12702609.410 ops/s
Iteration  20: 12718981.103 ops/s
Iteration  21: 12754766.770 ops/s
Iteration  22: 12719734.014 ops/s
Iteration  23: 12772041.354 ops/s
Iteration  24: 12692806.506 ops/s
Iteration  25: 12776796.649 ops/s
Iteration  26: 12695303.356 ops/s
Iteration  27: 12701523.039 ops/s
Iteration  28: 12745930.001 ops/s
Iteration  29: 12661661.973 ops/s
Iteration  30: 12770105.748 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty":
  12721961.431 ±(99.9%) 20860.656 ops/s [Average]
  (min, avg, max) = (12661661.973, 12721961.431, 12776796.649), stdev = 31223.250
  CI (99.9%): [12701100.775, 12742822.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  12721961.431 ± 20860.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 838962.747 ops/s
# Warmup Iteration   2: 849292.117 ops/s
# Warmup Iteration   3: 1037799.551 ops/s
# Warmup Iteration   4: 1077864.048 ops/s
# Warmup Iteration   5: 1080231.732 ops/s
# Warmup Iteration   6: 1078674.533 ops/s
# Warmup Iteration   7: 1079519.333 ops/s
# Warmup Iteration   8: 1076066.637 ops/s
# Warmup Iteration   9: 1078611.202 ops/s
# Warmup Iteration  10: 1078846.295 ops/s
# Warmup Iteration  11: 1076275.911 ops/s
# Warmup Iteration  12: 1077989.891 ops/s
# Warmup Iteration  13: 907338.552 ops/s
# Warmup Iteration  14: 1078161.799 ops/s
# Warmup Iteration  15: 1078753.235 ops/s
# Warmup Iteration  16: 1076189.606 ops/s
# Warmup Iteration  17: 1145871.096 ops/s
# Warmup Iteration  18: 1142138.012 ops/s
# Warmup Iteration  19: 1143417.046 ops/s
# Warmup Iteration  20: 1144225.946 ops/s
# Warmup Iteration  21: 1143474.826 ops/s
# Warmup Iteration  22: 1141247.229 ops/s
# Warmup Iteration  23: 1143639.491 ops/s
# Warmup Iteration  24: 1145077.906 ops/s
# Warmup Iteration  25: 1145418.425 ops/s
# Warmup Iteration  26: 1141862.445 ops/s
# Warmup Iteration  27: 1144012.782 ops/s
# Warmup Iteration  28: 1141875.244 ops/s
# Warmup Iteration  29: 1141678.344 ops/s
# Warmup Iteration  30: 1143947.117 ops/s
Iteration   1: 1144575.349 ops/s
Iteration   2: 1143512.197 ops/s
Iteration   3: 1142394.064 ops/s
Iteration   4: 1142711.492 ops/s
Iteration   5: 1143301.511 ops/s
Iteration   6: 1139187.202 ops/s
Iteration   7: 1147036.687 ops/s
Iteration   8: 1141860.399 ops/s
Iteration   9: 1145989.692 ops/s
Iteration  10: 1140248.509 ops/s
Iteration  11: 1145489.367 ops/s
Iteration  12: 1143543.636 ops/s
Iteration  13: 1147423.895 ops/s
Iteration  14: 1143417.366 ops/s
Iteration  15: 1143856.662 ops/s
Iteration  16: 1140101.463 ops/s
Iteration  17: 1144939.627 ops/s
Iteration  18: 1142526.587 ops/s
Iteration  19: 1146380.370 ops/s
Iteration  20: 1142188.040 ops/s
Iteration  21: 1149193.466 ops/s
Iteration  22: 1143362.738 ops/s
Iteration  23: 1142740.631 ops/s
Iteration  24: 1140579.706 ops/s
Iteration  25: 1144439.374 ops/s
Iteration  26: 1142105.746 ops/s
Iteration  27: 1143556.337 ops/s
Iteration  28: 1141328.203 ops/s
Iteration  29: 1144021.832 ops/s
Iteration  30: 1141768.155 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1143459.343 ±(99.9%) 1519.455 ops/s [Average]
  (min, avg, max) = (1139187.202, 1143459.343, 1149193.466), stdev = 2274.248
  CI (99.9%): [1141939.889, 1144978.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1143459.343 ± 1519.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1607383.730 ops/s
# Warmup Iteration   2: 3707700.861 ops/s
# Warmup Iteration   3: 3756055.109 ops/s
# Warmup Iteration   4: 3100774.819 ops/s
# Warmup Iteration   5: 3750645.809 ops/s
# Warmup Iteration   6: 3757305.913 ops/s
# Warmup Iteration   7: 3751438.638 ops/s
# Warmup Iteration   8: 3747373.131 ops/s
# Warmup Iteration   9: 3745753.902 ops/s
# Warmup Iteration  10: 3759404.118 ops/s
# Warmup Iteration  11: 3746752.975 ops/s
# Warmup Iteration  12: 3743886.519 ops/s
# Warmup Iteration  13: 3745554.055 ops/s
# Warmup Iteration  14: 3753012.299 ops/s
# Warmup Iteration  15: 3752083.509 ops/s
# Warmup Iteration  16: 3751903.217 ops/s
# Warmup Iteration  17: 3759469.255 ops/s
# Warmup Iteration  18: 3753416.543 ops/s
# Warmup Iteration  19: 3760589.642 ops/s
# Warmup Iteration  20: 3757130.209 ops/s
# Warmup Iteration  21: 3757750.517 ops/s
# Warmup Iteration  22: 3759589.662 ops/s
# Warmup Iteration  23: 3760105.163 ops/s
# Warmup Iteration  24: 3756979.014 ops/s
# Warmup Iteration  25: 3751137.193 ops/s
# Warmup Iteration  26: 3759681.670 ops/s
# Warmup Iteration  27: 3754766.894 ops/s
# Warmup Iteration  28: 3757587.527 ops/s
# Warmup Iteration  29: 3755656.502 ops/s
# Warmup Iteration  30: 3762879.707 ops/s
Iteration   1: 3757862.263 ops/s
Iteration   2: 3745922.182 ops/s
Iteration   3: 3758456.597 ops/s
Iteration   4: 3763050.424 ops/s
Iteration   5: 3756451.721 ops/s
Iteration   6: 3777007.762 ops/s
Iteration   7: 3760540.993 ops/s
Iteration   8: 3762980.880 ops/s
Iteration   9: 3754732.331 ops/s
Iteration  10: 3761566.322 ops/s
Iteration  11: 3761152.951 ops/s
Iteration  12: 3762208.575 ops/s
Iteration  13: 3767132.382 ops/s
Iteration  14: 3761846.769 ops/s
Iteration  15: 3756482.411 ops/s
Iteration  16: 3761976.847 ops/s
Iteration  17: 3771012.967 ops/s
Iteration  18: 3782224.077 ops/s
Iteration  19: 3769535.239 ops/s
Iteration  20: 3766395.683 ops/s
Iteration  21: 3762530.231 ops/s
Iteration  22: 3760910.101 ops/s
Iteration  23: 3767397.969 ops/s
Iteration  24: 3760490.711 ops/s
Iteration  25: 3757599.457 ops/s
Iteration  26: 3756678.447 ops/s
Iteration  27: 3768984.057 ops/s
Iteration  28: 3762017.982 ops/s
Iteration  29: 3764588.673 ops/s
Iteration  30: 3751086.122 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_reject":
  3762360.771 ±(99.9%) 4767.351 ops/s [Average]
  (min, avg, max) = (3745922.182, 3762360.771, 3782224.077), stdev = 7135.547
  CI (99.9%): [3757593.420, 3767128.121] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_reject  thrpt   30  3762360.771 ± 4767.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1632196.474 ops/s
# Warmup Iteration   2: 3756260.147 ops/s
# Warmup Iteration   3: 3802942.143 ops/s
# Warmup Iteration   4: 3138426.261 ops/s
# Warmup Iteration   5: 3812049.673 ops/s
# Warmup Iteration   6: 3790866.786 ops/s
# Warmup Iteration   7: 3803495.275 ops/s
# Warmup Iteration   8: 3807594.949 ops/s
# Warmup Iteration   9: 3804086.304 ops/s
# Warmup Iteration  10: 3804106.810 ops/s
# Warmup Iteration  11: 3793706.949 ops/s
# Warmup Iteration  12: 3796960.182 ops/s
# Warmup Iteration  13: 3796885.690 ops/s
# Warmup Iteration  14: 3810705.895 ops/s
# Warmup Iteration  15: 3802979.403 ops/s
# Warmup Iteration  16: 3811737.123 ops/s
# Warmup Iteration  17: 3811043.451 ops/s
# Warmup Iteration  18: 3816892.921 ops/s
# Warmup Iteration  19: 3804971.880 ops/s
# Warmup Iteration  20: 3812871.257 ops/s
# Warmup Iteration  21: 3805433.436 ops/s
# Warmup Iteration  22: 3810806.958 ops/s
# Warmup Iteration  23: 3814083.510 ops/s
# Warmup Iteration  24: 3807701.091 ops/s
# Warmup Iteration  25: 3805783.162 ops/s
# Warmup Iteration  26: 3815159.847 ops/s
# Warmup Iteration  27: 3807637.282 ops/s
# Warmup Iteration  28: 3814305.709 ops/s
# Warmup Iteration  29: 3804839.955 ops/s
# Warmup Iteration  30: 3806687.880 ops/s
Iteration   1: 3804317.917 ops/s
Iteration   2: 3815952.484 ops/s
Iteration   3: 3801233.183 ops/s
Iteration   4: 3812455.024 ops/s
Iteration   5: 3817054.658 ops/s
Iteration   6: 3815246.934 ops/s
Iteration   7: 3814781.527 ops/s
Iteration   8: 3805792.797 ops/s
Iteration   9: 3823020.300 ops/s
Iteration  10: 3812965.031 ops/s
Iteration  11: 3815992.010 ops/s
Iteration  12: 3817839.037 ops/s
Iteration  13: 3804859.358 ops/s
Iteration  14: 3810702.065 ops/s
Iteration  15: 3816165.133 ops/s
Iteration  16: 3818344.787 ops/s
Iteration  17: 3805849.970 ops/s
Iteration  18: 3810918.167 ops/s
Iteration  19: 3821001.512 ops/s
Iteration  20: 3813674.756 ops/s
Iteration  21: 3816222.873 ops/s
Iteration  22: 3809273.669 ops/s
Iteration  23: 3814741.056 ops/s
Iteration  24: 3808615.189 ops/s
Iteration  25: 3800314.593 ops/s
Iteration  26: 3810874.627 ops/s
Iteration  27: 3811958.345 ops/s
Iteration  28: 3814774.275 ops/s
Iteration  29: 3812529.052 ops/s
Iteration  30: 3811089.571 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_select":
  3812285.330 ±(99.9%) 3653.205 ops/s [Average]
  (min, avg, max) = (3800314.593, 3812285.330, 3823020.300), stdev = 5467.945
  CI (99.9%): [3808632.125, 3815938.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_select  thrpt   30  3812285.330 ± 3653.205  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14292863.345 ops/s
# Warmup Iteration   2: 23306071.013 ops/s
# Warmup Iteration   3: 27436380.483 ops/s
# Warmup Iteration   4: 27469147.813 ops/s
# Warmup Iteration   5: 27393244.329 ops/s
# Warmup Iteration   6: 27389379.884 ops/s
# Warmup Iteration   7: 27341623.965 ops/s
# Warmup Iteration   8: 27425671.448 ops/s
# Warmup Iteration   9: 27434116.199 ops/s
# Warmup Iteration  10: 27475549.356 ops/s
# Warmup Iteration  11: 27312666.710 ops/s
# Warmup Iteration  12: 27482230.167 ops/s
# Warmup Iteration  13: 27442432.457 ops/s
# Warmup Iteration  14: 27427769.189 ops/s
# Warmup Iteration  15: 27368014.133 ops/s
# Warmup Iteration  16: 27406597.363 ops/s
# Warmup Iteration  17: 27279613.840 ops/s
# Warmup Iteration  18: 27411071.889 ops/s
# Warmup Iteration  19: 27409174.425 ops/s
# Warmup Iteration  20: 27432622.824 ops/s
# Warmup Iteration  21: 27517052.465 ops/s
# Warmup Iteration  22: 27455061.785 ops/s
# Warmup Iteration  23: 27448285.103 ops/s
# Warmup Iteration  24: 27421111.258 ops/s
# Warmup Iteration  25: 27275779.175 ops/s
# Warmup Iteration  26: 27339976.219 ops/s
# Warmup Iteration  27: 27384597.593 ops/s
# Warmup Iteration  28: 27427836.580 ops/s
# Warmup Iteration  29: 27410985.215 ops/s
# Warmup Iteration  30: 27477930.860 ops/s
Iteration   1: 27457960.410 ops/s
Iteration   2: 27381127.415 ops/s
Iteration   3: 27350740.553 ops/s
Iteration   4: 27532714.448 ops/s
Iteration   5: 27456645.524 ops/s
Iteration   6: 27373909.338 ops/s
Iteration   7: 27418030.898 ops/s
Iteration   8: 27302681.699 ops/s
Iteration   9: 27308528.303 ops/s
Iteration  10: 27310650.127 ops/s
Iteration  11: 27267336.248 ops/s
Iteration  12: 27471454.934 ops/s
Iteration  13: 27245845.359 ops/s
Iteration  14: 27468151.845 ops/s
Iteration  15: 27502219.869 ops/s
Iteration  16: 27433084.268 ops/s
Iteration  17: 27238220.252 ops/s
Iteration  18: 27376624.972 ops/s
Iteration  19: 27582557.651 ops/s
Iteration  20: 27366636.506 ops/s
Iteration  21: 27449419.833 ops/s
Iteration  22: 27306921.886 ops/s
Iteration  23: 27446944.368 ops/s
Iteration  24: 27300591.784 ops/s
Iteration  25: 27424808.891 ops/s
Iteration  26: 27439561.629 ops/s
Iteration  27: 27310300.312 ops/s
Iteration  28: 27403788.513 ops/s
Iteration  29: 27339876.915 ops/s
Iteration  30: 27358083.906 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_selectUnique":
  27387513.955 ±(99.9%) 57088.332 ops/s [Average]
  (min, avg, max) = (27238220.252, 27387513.955, 27582557.651), stdev = 85447.134
  CI (99.9%): [27330425.623, 27444602.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_selectUnique  thrpt   30  27387513.955 ± 57088.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5324963.849 ops/s
# Warmup Iteration   2: 8610247.865 ops/s
# Warmup Iteration   3: 10151959.407 ops/s
# Warmup Iteration   4: 10115458.335 ops/s
# Warmup Iteration   5: 10164625.880 ops/s
# Warmup Iteration   6: 10147753.711 ops/s
# Warmup Iteration   7: 10166292.567 ops/s
# Warmup Iteration   8: 10155849.636 ops/s
# Warmup Iteration   9: 10181249.137 ops/s
# Warmup Iteration  10: 10149448.213 ops/s
# Warmup Iteration  11: 10145982.474 ops/s
# Warmup Iteration  12: 10157253.708 ops/s
# Warmup Iteration  13: 10194172.344 ops/s
# Warmup Iteration  14: 10159552.783 ops/s
# Warmup Iteration  15: 10167859.952 ops/s
# Warmup Iteration  16: 10178328.559 ops/s
# Warmup Iteration  17: 10114321.935 ops/s
# Warmup Iteration  18: 10145845.110 ops/s
# Warmup Iteration  19: 10164946.431 ops/s
# Warmup Iteration  20: 10094884.917 ops/s
# Warmup Iteration  21: 10041141.734 ops/s
# Warmup Iteration  22: 10159781.274 ops/s
# Warmup Iteration  23: 10102245.765 ops/s
# Warmup Iteration  24: 10129225.686 ops/s
# Warmup Iteration  25: 10105049.133 ops/s
# Warmup Iteration  26: 10156380.374 ops/s
# Warmup Iteration  27: 10142591.110 ops/s
# Warmup Iteration  28: 10113489.091 ops/s
# Warmup Iteration  29: 10132405.198 ops/s
# Warmup Iteration  30: 10050535.551 ops/s
Iteration   1: 10087310.882 ops/s
Iteration   2: 10151047.335 ops/s
Iteration   3: 10149743.806 ops/s
Iteration   4: 10137353.154 ops/s
Iteration   5: 10159562.521 ops/s
Iteration   6: 10139413.244 ops/s
Iteration   7: 10130849.125 ops/s
Iteration   8: 10130749.326 ops/s
Iteration   9: 10132922.092 ops/s
Iteration  10: 10102704.171 ops/s
Iteration  11: 10092905.721 ops/s
Iteration  12: 10138907.270 ops/s
Iteration  13: 10131161.745 ops/s
Iteration  14: 10090868.351 ops/s
Iteration  15: 10110934.320 ops/s
Iteration  16: 10109423.882 ops/s
Iteration  17: 10204264.110 ops/s
Iteration  18: 10155095.179 ops/s
Iteration  19: 10115703.361 ops/s
Iteration  20: 10018360.193 ops/s
Iteration  21: 10104636.037 ops/s
Iteration  22: 10090714.701 ops/s
Iteration  23: 10155398.288 ops/s
Iteration  24: 10136953.225 ops/s
Iteration  25: 10152791.435 ops/s
Iteration  26: 10167542.905 ops/s
Iteration  27: 10200926.915 ops/s
Iteration  28: 10114192.495 ops/s
Iteration  29: 10211147.294 ops/s
Iteration  30: 10166198.501 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_size":
  10132992.720 ±(99.9%) 26239.274 ops/s [Average]
  (min, avg, max) = (10018360.193, 10132992.720, 10211147.294), stdev = 39273.712
  CI (99.9%): [10106753.446, 10159231.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_size  thrpt   30  10132992.720 ± 26239.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16206924.501 ops/s
# Warmup Iteration   2: 31459036.847 ops/s
# Warmup Iteration   3: 26591182.703 ops/s
# Warmup Iteration   4: 31387006.064 ops/s
# Warmup Iteration   5: 31431204.228 ops/s
# Warmup Iteration   6: 31295895.550 ops/s
# Warmup Iteration   7: 31363378.584 ops/s
# Warmup Iteration   8: 31342358.297 ops/s
# Warmup Iteration   9: 31402016.238 ops/s
# Warmup Iteration  10: 31394732.815 ops/s
# Warmup Iteration  11: 31310197.396 ops/s
# Warmup Iteration  12: 31401201.429 ops/s
# Warmup Iteration  13: 31427347.940 ops/s
# Warmup Iteration  14: 31389614.678 ops/s
# Warmup Iteration  15: 31429801.595 ops/s
# Warmup Iteration  16: 31389838.223 ops/s
# Warmup Iteration  17: 31432709.300 ops/s
# Warmup Iteration  18: 31395749.353 ops/s
# Warmup Iteration  19: 31394945.243 ops/s
# Warmup Iteration  20: 31347604.948 ops/s
# Warmup Iteration  21: 31451940.510 ops/s
# Warmup Iteration  22: 31338440.420 ops/s
# Warmup Iteration  23: 31477170.746 ops/s
# Warmup Iteration  24: 31334818.547 ops/s
# Warmup Iteration  25: 31388084.824 ops/s
# Warmup Iteration  26: 31404802.653 ops/s
# Warmup Iteration  27: 31445287.662 ops/s
# Warmup Iteration  28: 31419952.371 ops/s
# Warmup Iteration  29: 31357644.171 ops/s
# Warmup Iteration  30: 31412088.566 ops/s
Iteration   1: 31289134.795 ops/s
Iteration   2: 31395781.553 ops/s
Iteration   3: 31222877.054 ops/s
Iteration   4: 31357525.282 ops/s
Iteration   5: 31460638.265 ops/s
Iteration   6: 31489539.846 ops/s
Iteration   7: 31441826.502 ops/s
Iteration   8: 31403098.120 ops/s
Iteration   9: 31408375.478 ops/s
Iteration  10: 31395922.820 ops/s
Iteration  11: 31284604.758 ops/s
Iteration  12: 31349160.174 ops/s
Iteration  13: 31420059.611 ops/s
Iteration  14: 31430939.895 ops/s
Iteration  15: 31390436.233 ops/s
Iteration  16: 31505567.161 ops/s
Iteration  17: 31390124.452 ops/s
Iteration  18: 31501164.048 ops/s
Iteration  19: 31321796.168 ops/s
Iteration  20: 31465769.920 ops/s
Iteration  21: 31335304.162 ops/s
Iteration  22: 31342252.887 ops/s
Iteration  23: 31454339.477 ops/s
Iteration  24: 31386207.842 ops/s
Iteration  25: 31261058.000 ops/s
Iteration  26: 31496076.707 ops/s
Iteration  27: 31453979.129 ops/s
Iteration  28: 31358825.672 ops/s
Iteration  29: 31388885.692 ops/s
Iteration  30: 31346186.362 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_sizeDistinct":
  31391581.935 ±(99.9%) 48527.951 ops/s [Average]
  (min, avg, max) = (31222877.054, 31391581.935, 31505567.161), stdev = 72634.357
  CI (99.9%): [31343053.985, 31440109.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  31391581.935 ± 48527.951  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25872.868 ops/s
# Warmup Iteration   2: 44306.161 ops/s
# Warmup Iteration   3: 52725.445 ops/s
# Warmup Iteration   4: 52551.057 ops/s
# Warmup Iteration   5: 52618.060 ops/s
# Warmup Iteration   6: 45126.084 ops/s
# Warmup Iteration   7: 52549.843 ops/s
# Warmup Iteration   8: 52760.166 ops/s
# Warmup Iteration   9: 52634.166 ops/s
# Warmup Iteration  10: 52732.094 ops/s
# Warmup Iteration  11: 52792.227 ops/s
# Warmup Iteration  12: 52843.941 ops/s
# Warmup Iteration  13: 52831.249 ops/s
# Warmup Iteration  14: 52681.222 ops/s
# Warmup Iteration  15: 52628.562 ops/s
# Warmup Iteration  16: 52810.968 ops/s
# Warmup Iteration  17: 52623.897 ops/s
# Warmup Iteration  18: 52601.782 ops/s
# Warmup Iteration  19: 52705.335 ops/s
# Warmup Iteration  20: 52651.615 ops/s
# Warmup Iteration  21: 52582.612 ops/s
# Warmup Iteration  22: 52641.937 ops/s
# Warmup Iteration  23: 52626.656 ops/s
# Warmup Iteration  24: 52655.082 ops/s
# Warmup Iteration  25: 52581.997 ops/s
# Warmup Iteration  26: 52707.317 ops/s
# Warmup Iteration  27: 52638.703 ops/s
# Warmup Iteration  28: 52435.843 ops/s
# Warmup Iteration  29: 52690.398 ops/s
# Warmup Iteration  30: 52489.071 ops/s
Iteration   1: 52723.911 ops/s
Iteration   2: 52852.288 ops/s
Iteration   3: 52799.201 ops/s
Iteration   4: 52731.724 ops/s
Iteration   5: 52694.728 ops/s
Iteration   6: 52654.185 ops/s
Iteration   7: 52637.908 ops/s
Iteration   8: 52808.052 ops/s
Iteration   9: 52596.458 ops/s
Iteration  10: 52767.163 ops/s
Iteration  11: 52722.100 ops/s
Iteration  12: 52682.873 ops/s
Iteration  13: 52880.477 ops/s
Iteration  14: 52753.704 ops/s
Iteration  15: 52481.786 ops/s
Iteration  16: 52746.875 ops/s
Iteration  17: 52697.881 ops/s
Iteration  18: 52370.807 ops/s
Iteration  19: 52382.826 ops/s
Iteration  20: 52567.157 ops/s
Iteration  21: 52327.139 ops/s
Iteration  22: 52418.043 ops/s
Iteration  23: 52456.896 ops/s
Iteration  24: 52472.188 ops/s
Iteration  25: 52471.055 ops/s
Iteration  26: 52610.223 ops/s
Iteration  27: 52505.066 ops/s
Iteration  28: 52621.262 ops/s
Iteration  29: 52569.319 ops/s
Iteration  30: 52690.746 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testEquals":
  52623.135 ±(99.9%) 100.354 ops/s [Average]
  (min, avg, max) = (52327.139, 52623.135, 52880.477), stdev = 150.205
  CI (99.9%): [52522.781, 52723.489] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt      Score     Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_testEquals  thrpt   30  52623.135 ± 100.354  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790003.573 ops/s
# Warmup Iteration   2: 2333715.486 ops/s
# Warmup Iteration   3: 2210070.938 ops/s
# Warmup Iteration   4: 2095245.348 ops/s
# Warmup Iteration   5: 2355908.472 ops/s
# Warmup Iteration   6: 2360187.806 ops/s
# Warmup Iteration   7: 2359180.277 ops/s
# Warmup Iteration   8: 2349185.863 ops/s
# Warmup Iteration   9: 2355598.802 ops/s
# Warmup Iteration  10: 2352565.914 ops/s
# Warmup Iteration  11: 2350338.498 ops/s
# Warmup Iteration  12: 2351694.285 ops/s
# Warmup Iteration  13: 2351265.698 ops/s
# Warmup Iteration  14: 2355413.889 ops/s
# Warmup Iteration  15: 2356415.417 ops/s
# Warmup Iteration  16: 2362531.528 ops/s
# Warmup Iteration  17: 2345464.014 ops/s
# Warmup Iteration  18: 2354445.798 ops/s
# Warmup Iteration  19: 2357422.228 ops/s
# Warmup Iteration  20: 2353481.390 ops/s
# Warmup Iteration  21: 2356050.560 ops/s
# Warmup Iteration  22: 2356064.059 ops/s
# Warmup Iteration  23: 2362285.974 ops/s
# Warmup Iteration  24: 2357604.733 ops/s
# Warmup Iteration  25: 2349889.379 ops/s
# Warmup Iteration  26: 2356399.046 ops/s
# Warmup Iteration  27: 2355947.892 ops/s
# Warmup Iteration  28: 2357331.903 ops/s
# Warmup Iteration  29: 2353818.347 ops/s
# Warmup Iteration  30: 2356912.763 ops/s
Iteration   1: 2349542.432 ops/s
Iteration   2: 2350309.541 ops/s
Iteration   3: 2352684.919 ops/s
Iteration   4: 2352144.109 ops/s
Iteration   5: 2349694.834 ops/s
Iteration   6: 2351303.345 ops/s
Iteration   7: 2358410.664 ops/s
Iteration   8: 2351920.476 ops/s
Iteration   9: 2355519.571 ops/s
Iteration  10: 2352296.192 ops/s
Iteration  11: 2358256.651 ops/s
Iteration  12: 2352145.048 ops/s
Iteration  13: 2348022.823 ops/s
Iteration  14: 2357204.885 ops/s
Iteration  15: 2345727.668 ops/s
Iteration  16: 2355986.355 ops/s
Iteration  17: 2359013.734 ops/s
Iteration  18: 2348812.434 ops/s
Iteration  19: 2362994.113 ops/s
Iteration  20: 2357134.816 ops/s
Iteration  21: 2348873.976 ops/s
Iteration  22: 2354362.945 ops/s
Iteration  23: 2359439.066 ops/s
Iteration  24: 2354792.495 ops/s
Iteration  25: 2348138.941 ops/s
Iteration  26: 2358798.417 ops/s
Iteration  27: 2345468.817 ops/s
Iteration  28: 2354583.819 ops/s
Iteration  29: 2352376.127 ops/s
Iteration  30: 2351576.465 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testHashCode":
  2353251.189 ±(99.9%) 2922.713 ops/s [Average]
  (min, avg, max) = (2345468.817, 2353251.189, 2362994.113), stdev = 4374.580
  CI (99.9%): [2350328.476, 2356173.902] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_testHashCode  thrpt   30  2353251.189 ± 2922.713  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802206.762 ops/s
# Warmup Iteration   2: 2251036.461 ops/s
# Warmup Iteration   3: 2361918.520 ops/s
# Warmup Iteration   4: 2131386.358 ops/s
# Warmup Iteration   5: 2156679.134 ops/s
# Warmup Iteration   6: 2365141.540 ops/s
# Warmup Iteration   7: 2369777.882 ops/s
# Warmup Iteration   8: 2364296.619 ops/s
# Warmup Iteration   9: 2365058.042 ops/s
# Warmup Iteration  10: 2359780.754 ops/s
# Warmup Iteration  11: 2361656.588 ops/s
# Warmup Iteration  12: 2367239.103 ops/s
# Warmup Iteration  13: 2369269.911 ops/s
# Warmup Iteration  14: 2365135.225 ops/s
# Warmup Iteration  15: 2363730.330 ops/s
# Warmup Iteration  16: 2366348.241 ops/s
# Warmup Iteration  17: 2368683.448 ops/s
# Warmup Iteration  18: 2363001.002 ops/s
# Warmup Iteration  19: 2364825.111 ops/s
# Warmup Iteration  20: 2370923.498 ops/s
# Warmup Iteration  21: 2362207.551 ops/s
# Warmup Iteration  22: 2367298.641 ops/s
# Warmup Iteration  23: 2368509.374 ops/s
# Warmup Iteration  24: 2368131.169 ops/s
# Warmup Iteration  25: 2367928.589 ops/s
# Warmup Iteration  26: 2366053.151 ops/s
# Warmup Iteration  27: 2365630.759 ops/s
# Warmup Iteration  28: 2370390.893 ops/s
# Warmup Iteration  29: 2367578.257 ops/s
# Warmup Iteration  30: 2367602.089 ops/s
Iteration   1: 2371926.424 ops/s
Iteration   2: 2367946.349 ops/s
Iteration   3: 2357294.472 ops/s
Iteration   4: 2374221.882 ops/s
Iteration   5: 2360975.831 ops/s
Iteration   6: 2367297.063 ops/s
Iteration   7: 2371226.742 ops/s
Iteration   8: 2368084.329 ops/s
Iteration   9: 2369596.689 ops/s
Iteration  10: 2370721.876 ops/s
Iteration  11: 2371748.478 ops/s
Iteration  12: 2368983.055 ops/s
Iteration  13: 2364069.650 ops/s
Iteration  14: 2367260.473 ops/s
Iteration  15: 2362006.060 ops/s
Iteration  16: 2368871.933 ops/s
Iteration  17: 2369261.197 ops/s
Iteration  18: 2366745.244 ops/s
Iteration  19: 2364387.012 ops/s
Iteration  20: 2362810.775 ops/s
Iteration  21: 2363975.842 ops/s
Iteration  22: 2362533.884 ops/s
Iteration  23: 2366219.354 ops/s
Iteration  24: 2361622.584 ops/s
Iteration  25: 2362510.241 ops/s
Iteration  26: 2364034.275 ops/s
Iteration  27: 2363418.060 ops/s
Iteration  28: 2372669.019 ops/s
Iteration  29: 2361874.005 ops/s
Iteration  30: 2364624.713 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testNewWith":
  2366297.250 ±(99.9%) 2747.171 ops/s [Average]
  (min, avg, max) = (2357294.472, 2366297.250, 2374221.882), stdev = 4111.836
  CI (99.9%): [2363550.080, 2369044.421] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_testNewWith  thrpt   30  2366297.250 ± 2747.171  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1746998.202 ops/s
# Warmup Iteration   2: 3819871.578 ops/s
# Warmup Iteration   3: 3775447.837 ops/s
# Warmup Iteration   4: 3318986.952 ops/s
# Warmup Iteration   5: 3884253.574 ops/s
# Warmup Iteration   6: 3885127.153 ops/s
# Warmup Iteration   7: 3881480.416 ops/s
# Warmup Iteration   8: 3894738.896 ops/s
# Warmup Iteration   9: 3878197.593 ops/s
# Warmup Iteration  10: 3899174.627 ops/s
# Warmup Iteration  11: 3872064.665 ops/s
# Warmup Iteration  12: 3884784.754 ops/s
# Warmup Iteration  13: 3891678.670 ops/s
# Warmup Iteration  14: 3863594.944 ops/s
# Warmup Iteration  15: 3872412.476 ops/s
# Warmup Iteration  16: 3908571.557 ops/s
# Warmup Iteration  17: 3878047.299 ops/s
# Warmup Iteration  18: 3887262.068 ops/s
# Warmup Iteration  19: 3885571.274 ops/s
# Warmup Iteration  20: 3888811.864 ops/s
# Warmup Iteration  21: 3885625.840 ops/s
# Warmup Iteration  22: 3879444.342 ops/s
# Warmup Iteration  23: 3889809.195 ops/s
# Warmup Iteration  24: 3887790.208 ops/s
# Warmup Iteration  25: 3872799.406 ops/s
# Warmup Iteration  26: 3880838.622 ops/s
# Warmup Iteration  27: 3909585.296 ops/s
# Warmup Iteration  28: 3888196.421 ops/s
# Warmup Iteration  29: 3872810.829 ops/s
# Warmup Iteration  30: 3874565.157 ops/s
Iteration   1: 3885548.183 ops/s
Iteration   2: 3883295.879 ops/s
Iteration   3: 3879343.497 ops/s
Iteration   4: 3879221.303 ops/s
Iteration   5: 3867114.919 ops/s
Iteration   6: 3890334.925 ops/s
Iteration   7: 3862285.148 ops/s
Iteration   8: 3892159.650 ops/s
Iteration   9: 3880052.014 ops/s
Iteration  10: 3870884.199 ops/s
Iteration  11: 3910403.685 ops/s
Iteration  12: 3892554.948 ops/s
Iteration  13: 3868707.040 ops/s
Iteration  14: 3882782.383 ops/s
Iteration  15: 3892793.669 ops/s
Iteration  16: 3903193.921 ops/s
Iteration  17: 3901384.472 ops/s
Iteration  18: 3881514.708 ops/s
Iteration  19: 3881160.153 ops/s
Iteration  20: 3889687.565 ops/s
Iteration  21: 3861342.859 ops/s
Iteration  22: 3871090.150 ops/s
Iteration  23: 3872156.890 ops/s
Iteration  24: 3874072.041 ops/s
Iteration  25: 3899679.979 ops/s
Iteration  26: 3892795.095 ops/s
Iteration  27: 3880039.582 ops/s
Iteration  28: 3891255.444 ops/s
Iteration  29: 3892377.173 ops/s
Iteration  30: 3860147.794 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_testToString":
  3882979.309 ±(99.9%) 8610.575 ops/s [Average]
  (min, avg, max) = (3860147.794, 3882979.309, 3910403.685), stdev = 12887.904
  CI (99.9%): [3874368.734, 3891589.884] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_testToString  thrpt   30  3882979.309 ± 8610.575  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12357631.652 ops/s
# Warmup Iteration   2: 27831698.329 ops/s
# Warmup Iteration   3: 23327116.800 ops/s
# Warmup Iteration   4: 28360149.723 ops/s
# Warmup Iteration   5: 28431219.753 ops/s
# Warmup Iteration   6: 28401436.929 ops/s
# Warmup Iteration   7: 28359022.802 ops/s
# Warmup Iteration   8: 28393592.680 ops/s
# Warmup Iteration   9: 28388025.571 ops/s
# Warmup Iteration  10: 28391254.160 ops/s
# Warmup Iteration  11: 28397246.685 ops/s
# Warmup Iteration  12: 28400744.248 ops/s
# Warmup Iteration  13: 28350263.454 ops/s
# Warmup Iteration  14: 28413598.523 ops/s
# Warmup Iteration  15: 28377533.000 ops/s
# Warmup Iteration  16: 28383017.536 ops/s
# Warmup Iteration  17: 28338989.206 ops/s
# Warmup Iteration  18: 28368375.136 ops/s
# Warmup Iteration  19: 28312029.620 ops/s
# Warmup Iteration  20: 28404358.490 ops/s
# Warmup Iteration  21: 28390316.973 ops/s
# Warmup Iteration  22: 28312850.831 ops/s
# Warmup Iteration  23: 28392813.586 ops/s
# Warmup Iteration  24: 28465169.109 ops/s
# Warmup Iteration  25: 28269144.205 ops/s
# Warmup Iteration  26: 28427755.405 ops/s
# Warmup Iteration  27: 28381087.306 ops/s
# Warmup Iteration  28: 28378913.998 ops/s
# Warmup Iteration  29: 28368758.576 ops/s
# Warmup Iteration  30: 28342695.723 ops/s
Iteration   1: 28463576.043 ops/s
Iteration   2: 28440174.944 ops/s
Iteration   3: 28461544.862 ops/s
Iteration   4: 28272253.410 ops/s
Iteration   5: 28474014.863 ops/s
Iteration   6: 28506059.062 ops/s
Iteration   7: 28444296.056 ops/s
Iteration   8: 28532964.072 ops/s
Iteration   9: 28475427.999 ops/s
Iteration  10: 28320070.638 ops/s
Iteration  11: 28495341.885 ops/s
Iteration  12: 28468099.689 ops/s
Iteration  13: 28430269.649 ops/s
Iteration  14: 28417745.787 ops/s
Iteration  15: 28577882.648 ops/s
Iteration  16: 28427690.556 ops/s
Iteration  17: 28419300.360 ops/s
Iteration  18: 28454288.568 ops/s
Iteration  19: 28457860.656 ops/s
Iteration  20: 28468273.004 ops/s
Iteration  21: 28426431.500 ops/s
Iteration  22: 28375152.784 ops/s
Iteration  23: 28437150.912 ops/s
Iteration  24: 28453065.859 ops/s
Iteration  25: 28431389.607 ops/s
Iteration  26: 28436681.632 ops/s
Iteration  27: 28421067.123 ops/s
Iteration  28: 28469052.949 ops/s
Iteration  29: 28450331.917 ops/s
Iteration  30: 28333489.320 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toArray":
  28441364.945 ±(99.9%) 39542.891 ops/s [Average]
  (min, avg, max) = (28272253.410, 28441364.945, 28577882.648), stdev = 59185.942
  CI (99.9%): [28401822.054, 28480907.836] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_toArray  thrpt   30  28441364.945 ± 39542.891  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6578106.599 ops/s
# Warmup Iteration   2: 12531224.826 ops/s
# Warmup Iteration   3: 10919991.010 ops/s
# Warmup Iteration   4: 12774260.778 ops/s
# Warmup Iteration   5: 12819699.985 ops/s
# Warmup Iteration   6: 12801272.538 ops/s
# Warmup Iteration   7: 12840508.834 ops/s
# Warmup Iteration   8: 12845234.823 ops/s
# Warmup Iteration   9: 12814595.688 ops/s
# Warmup Iteration  10: 12809613.859 ops/s
# Warmup Iteration  11: 12797123.088 ops/s
# Warmup Iteration  12: 12821618.544 ops/s
# Warmup Iteration  13: 12812831.892 ops/s
# Warmup Iteration  14: 12852523.884 ops/s
# Warmup Iteration  15: 12834095.458 ops/s
# Warmup Iteration  16: 12872614.322 ops/s
# Warmup Iteration  17: 12821969.599 ops/s
# Warmup Iteration  18: 12837030.820 ops/s
# Warmup Iteration  19: 12855647.938 ops/s
# Warmup Iteration  20: 12841253.472 ops/s
# Warmup Iteration  21: 12855376.549 ops/s
# Warmup Iteration  22: 12838634.615 ops/s
# Warmup Iteration  23: 12904704.292 ops/s
# Warmup Iteration  24: 12866377.445 ops/s
# Warmup Iteration  25: 12873849.889 ops/s
# Warmup Iteration  26: 12825507.847 ops/s
# Warmup Iteration  27: 12843038.651 ops/s
# Warmup Iteration  28: 12892195.268 ops/s
# Warmup Iteration  29: 12858739.283 ops/s
# Warmup Iteration  30: 12843001.314 ops/s
Iteration   1: 12901591.196 ops/s
Iteration   2: 12844552.050 ops/s
Iteration   3: 12836983.344 ops/s
Iteration   4: 12881743.718 ops/s
Iteration   5: 12848878.228 ops/s
Iteration   6: 12881384.677 ops/s
Iteration   7: 12874277.702 ops/s
Iteration   8: 12837107.176 ops/s
Iteration   9: 12857483.170 ops/s
Iteration  10: 12909663.962 ops/s
Iteration  11: 12914470.634 ops/s
Iteration  12: 12863716.647 ops/s
Iteration  13: 12881636.473 ops/s
Iteration  14: 12825930.278 ops/s
Iteration  15: 12911906.885 ops/s
Iteration  16: 12871520.341 ops/s
Iteration  17: 12819425.093 ops/s
Iteration  18: 12908069.429 ops/s
Iteration  19: 12852283.457 ops/s
Iteration  20: 12851137.288 ops/s
Iteration  21: 12870468.882 ops/s
Iteration  22: 12851989.052 ops/s
Iteration  23: 12916325.205 ops/s
Iteration  24: 12896614.108 ops/s
Iteration  25: 12881159.200 ops/s
Iteration  26: 12849376.145 ops/s
Iteration  27: 12886960.024 ops/s
Iteration  28: 12884979.937 ops/s
Iteration  29: 12827707.004 ops/s
Iteration  30: 12825485.056 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toBag":
  12868827.545 ±(99.9%) 19529.706 ops/s [Average]
  (min, avg, max) = (12819425.093, 12868827.545, 12916325.205), stdev = 29231.147
  CI (99.9%): [12849297.839, 12888357.251] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_toBag  thrpt   30  12868827.545 ± 19529.706  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16823327.814 ops/s
# Warmup Iteration   2: 27121893.953 ops/s
# Warmup Iteration   3: 29931087.697 ops/s
# Warmup Iteration   4: 30663692.784 ops/s
# Warmup Iteration   5: 30827673.383 ops/s
# Warmup Iteration   6: 30729125.006 ops/s
# Warmup Iteration   7: 30699749.869 ops/s
# Warmup Iteration   8: 30836839.111 ops/s
# Warmup Iteration   9: 30777638.557 ops/s
# Warmup Iteration  10: 30764588.050 ops/s
# Warmup Iteration  11: 30766388.310 ops/s
# Warmup Iteration  12: 30736584.404 ops/s
# Warmup Iteration  13: 30841489.078 ops/s
# Warmup Iteration  14: 30832335.779 ops/s
# Warmup Iteration  15: 30770899.290 ops/s
# Warmup Iteration  16: 30743605.117 ops/s
# Warmup Iteration  17: 30781307.115 ops/s
# Warmup Iteration  18: 30953845.244 ops/s
# Warmup Iteration  19: 30877134.259 ops/s
# Warmup Iteration  20: 30839125.428 ops/s
# Warmup Iteration  21: 30887595.565 ops/s
# Warmup Iteration  22: 30914604.141 ops/s
# Warmup Iteration  23: 30663485.122 ops/s
# Warmup Iteration  24: 30937368.849 ops/s
# Warmup Iteration  25: 30891373.216 ops/s
# Warmup Iteration  26: 30828181.656 ops/s
# Warmup Iteration  27: 30811340.722 ops/s
# Warmup Iteration  28: 30882726.232 ops/s
# Warmup Iteration  29: 30735240.354 ops/s
# Warmup Iteration  30: 30957787.358 ops/s
Iteration   1: 30954719.878 ops/s
Iteration   2: 30625633.467 ops/s
Iteration   3: 30885273.239 ops/s
Iteration   4: 30906828.709 ops/s
Iteration   5: 30918241.079 ops/s
Iteration   6: 30831924.355 ops/s
Iteration   7: 30761818.184 ops/s
Iteration   8: 30889709.758 ops/s
Iteration   9: 30915131.150 ops/s
Iteration  10: 30735338.302 ops/s
Iteration  11: 30875619.393 ops/s
Iteration  12: 31005340.375 ops/s
Iteration  13: 30822772.810 ops/s
Iteration  14: 30894167.676 ops/s
Iteration  15: 30963580.357 ops/s
Iteration  16: 30920718.330 ops/s
Iteration  17: 30885377.567 ops/s
Iteration  18: 30917502.245 ops/s
Iteration  19: 30710955.742 ops/s
Iteration  20: 30843468.904 ops/s
Iteration  21: 30998272.074 ops/s
Iteration  22: 30862187.374 ops/s
Iteration  23: 30919465.406 ops/s
Iteration  24: 30747786.595 ops/s
Iteration  25: 30907714.635 ops/s
Iteration  26: 30842662.351 ops/s
Iteration  27: 30811319.868 ops/s
Iteration  28: 30876908.712 ops/s
Iteration  29: 30861847.560 ops/s
Iteration  30: 30896223.921 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toImmutable":
  30866283.667 ±(99.9%) 56228.399 ops/s [Average]
  (min, avg, max) = (30625633.467, 30866283.667, 31005340.375), stdev = 84160.026
  CI (99.9%): [30810055.269, 30922512.066] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_toImmutable  thrpt   30  30866283.667 ± 56228.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5021939.309 ops/s
# Warmup Iteration   2: 8740189.815 ops/s
# Warmup Iteration   3: 10493927.590 ops/s
# Warmup Iteration   4: 10477388.475 ops/s
# Warmup Iteration   5: 10456505.855 ops/s
# Warmup Iteration   6: 10454107.037 ops/s
# Warmup Iteration   7: 10471912.932 ops/s
# Warmup Iteration   8: 10453580.725 ops/s
# Warmup Iteration   9: 10451872.448 ops/s
# Warmup Iteration  10: 10504737.949 ops/s
# Warmup Iteration  11: 10510730.661 ops/s
# Warmup Iteration  12: 10468227.715 ops/s
# Warmup Iteration  13: 10488458.033 ops/s
# Warmup Iteration  14: 10436016.724 ops/s
# Warmup Iteration  15: 10495708.513 ops/s
# Warmup Iteration  16: 10469508.037 ops/s
# Warmup Iteration  17: 10498380.776 ops/s
# Warmup Iteration  18: 10486999.881 ops/s
# Warmup Iteration  19: 10474572.186 ops/s
# Warmup Iteration  20: 10515978.970 ops/s
# Warmup Iteration  21: 10457195.215 ops/s
# Warmup Iteration  22: 10465673.471 ops/s
# Warmup Iteration  23: 10468049.709 ops/s
# Warmup Iteration  24: 10497334.124 ops/s
# Warmup Iteration  25: 10492745.485 ops/s
# Warmup Iteration  26: 10410825.688 ops/s
# Warmup Iteration  27: 10516209.820 ops/s
# Warmup Iteration  28: 10460624.056 ops/s
# Warmup Iteration  29: 10498543.123 ops/s
# Warmup Iteration  30: 10495882.192 ops/s
Iteration   1: 10483781.486 ops/s
Iteration   2: 10467865.200 ops/s
Iteration   3: 10511498.831 ops/s
Iteration   4: 10488549.287 ops/s
Iteration   5: 10520295.979 ops/s
Iteration   6: 10486457.859 ops/s
Iteration   7: 10506064.728 ops/s
Iteration   8: 10494752.818 ops/s
Iteration   9: 10536372.580 ops/s
Iteration  10: 10500131.053 ops/s
Iteration  11: 10520350.852 ops/s
Iteration  12: 10468252.894 ops/s
Iteration  13: 10508038.168 ops/s
Iteration  14: 10442572.939 ops/s
Iteration  15: 10519662.477 ops/s
Iteration  16: 10521686.542 ops/s
Iteration  17: 10520132.392 ops/s
Iteration  18: 10467005.177 ops/s
Iteration  19: 10525517.654 ops/s
Iteration  20: 10474994.739 ops/s
Iteration  21: 10494439.271 ops/s
Iteration  22: 10477579.582 ops/s
Iteration  23: 10439668.148 ops/s
Iteration  24: 10509649.929 ops/s
Iteration  25: 10476129.563 ops/s
Iteration  26: 10556002.033 ops/s
Iteration  27: 10494856.383 ops/s
Iteration  28: 10482442.517 ops/s
Iteration  29: 10516494.693 ops/s
Iteration  30: 10497035.212 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toList":
  10496942.700 ±(99.9%) 17659.752 ops/s [Average]
  (min, avg, max) = (10439668.148, 10496942.700, 10556002.033), stdev = 26432.288
  CI (99.9%): [10479282.947, 10514602.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_toList  thrpt   30  10496942.700 ± 17659.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7218579.133 ops/s
# Warmup Iteration   2: 17295579.283 ops/s
# Warmup Iteration   3: 17293404.497 ops/s
# Warmup Iteration   4: 14177963.502 ops/s
# Warmup Iteration   5: 17273380.328 ops/s
# Warmup Iteration   6: 17302089.730 ops/s
# Warmup Iteration   7: 17280656.086 ops/s
# Warmup Iteration   8: 17329916.353 ops/s
# Warmup Iteration   9: 17345046.301 ops/s
# Warmup Iteration  10: 17331436.949 ops/s
# Warmup Iteration  11: 17287362.564 ops/s
# Warmup Iteration  12: 17340140.516 ops/s
# Warmup Iteration  13: 17285834.133 ops/s
# Warmup Iteration  14: 17321875.121 ops/s
# Warmup Iteration  15: 17295626.111 ops/s
# Warmup Iteration  16: 17277782.788 ops/s
# Warmup Iteration  17: 17311325.733 ops/s
# Warmup Iteration  18: 17354506.900 ops/s
# Warmup Iteration  19: 17322142.109 ops/s
# Warmup Iteration  20: 17305857.221 ops/s
# Warmup Iteration  21: 17345206.237 ops/s
# Warmup Iteration  22: 17308106.962 ops/s
# Warmup Iteration  23: 17298696.266 ops/s
# Warmup Iteration  24: 17290206.178 ops/s
# Warmup Iteration  25: 17263118.008 ops/s
# Warmup Iteration  26: 17236839.586 ops/s
# Warmup Iteration  27: 17292723.460 ops/s
# Warmup Iteration  28: 17296964.506 ops/s
# Warmup Iteration  29: 17257233.821 ops/s
# Warmup Iteration  30: 17280008.020 ops/s
Iteration   1: 17302140.460 ops/s
Iteration   2: 17289808.770 ops/s
Iteration   3: 17259715.737 ops/s
Iteration   4: 17256152.946 ops/s
Iteration   5: 17347191.473 ops/s
Iteration   6: 17328290.169 ops/s
Iteration   7: 17285085.841 ops/s
Iteration   8: 17287867.780 ops/s
Iteration   9: 17313182.310 ops/s
Iteration  10: 17306620.509 ops/s
Iteration  11: 17313754.399 ops/s
Iteration  12: 17312595.840 ops/s
Iteration  13: 17362570.925 ops/s
Iteration  14: 17320233.731 ops/s
Iteration  15: 17275940.535 ops/s
Iteration  16: 17322211.829 ops/s
Iteration  17: 17265409.099 ops/s
Iteration  18: 17329347.970 ops/s
Iteration  19: 17292884.506 ops/s
Iteration  20: 17283609.608 ops/s
Iteration  21: 17301508.166 ops/s
Iteration  22: 17300091.990 ops/s
Iteration  23: 17286635.717 ops/s
Iteration  24: 17372385.915 ops/s
Iteration  25: 17336906.384 ops/s
Iteration  26: 17329628.391 ops/s
Iteration  27: 17312521.682 ops/s
Iteration  28: 17291983.639 ops/s
Iteration  29: 17271869.230 ops/s
Iteration  30: 17351883.234 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanHashBagTest._Benchmark.benchmark_toSet":
  17307000.960 ±(99.9%) 19727.777 ops/s [Average]
  (min, avg, max) = (17256152.946, 17307000.960, 17372385.915), stdev = 29527.610
  CI (99.9%): [17287273.183, 17326728.736] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanHashBagTest._Benchmark.benchmark_toSet  thrpt   30  17307000.960 ± 19727.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 11904344.714 ops/s
# Warmup Iteration   2: 19213871.696 ops/s
# Warmup Iteration   3: 23032704.505 ops/s
# Warmup Iteration   4: 23003165.465 ops/s
# Warmup Iteration   5: 22919700.905 ops/s
# Warmup Iteration   6: 23023283.159 ops/s
# Warmup Iteration   7: 23049638.361 ops/s
# Warmup Iteration   8: 22876210.252 ops/s
# Warmup Iteration   9: 22779526.966 ops/s
# Warmup Iteration  10: 23020629.362 ops/s
# Warmup Iteration  11: 22984932.792 ops/s
# Warmup Iteration  12: 22991655.942 ops/s
# Warmup Iteration  13: 22897488.011 ops/s
# Warmup Iteration  14: 23024094.963 ops/s
# Warmup Iteration  15: 22963515.361 ops/s
# Warmup Iteration  16: 23010112.859 ops/s
# Warmup Iteration  17: 23007139.904 ops/s
# Warmup Iteration  18: 22848810.234 ops/s
# Warmup Iteration  19: 22867354.751 ops/s
# Warmup Iteration  20: 22990604.077 ops/s
# Warmup Iteration  21: 22954825.280 ops/s
# Warmup Iteration  22: 22941513.773 ops/s
# Warmup Iteration  23: 23023104.800 ops/s
# Warmup Iteration  24: 22924801.185 ops/s
# Warmup Iteration  25: 22898653.558 ops/s
# Warmup Iteration  26: 22975166.674 ops/s
# Warmup Iteration  27: 22857481.450 ops/s
# Warmup Iteration  28: 22941785.267 ops/s
# Warmup Iteration  29: 22829988.197 ops/s
# Warmup Iteration  30: 22873243.919 ops/s
Iteration   1: 22903745.814 ops/s
Iteration   2: 22823629.172 ops/s
Iteration   3: 22815416.867 ops/s
Iteration   4: 22791370.571 ops/s
Iteration   5: 22779402.163 ops/s
Iteration   6: 22764368.533 ops/s
Iteration   7: 22693754.957 ops/s
Iteration   8: 22664825.766 ops/s
Iteration   9: 22635774.004 ops/s
Iteration  10: 22842036.845 ops/s
Iteration  11: 22842462.349 ops/s
Iteration  12: 22882902.930 ops/s
Iteration  13: 22866992.826 ops/s
Iteration  14: 22650078.780 ops/s
Iteration  15: 22702442.325 ops/s
Iteration  16: 22849801.657 ops/s
Iteration  17: 22729371.554 ops/s
Iteration  18: 22766908.847 ops/s
Iteration  19: 22645076.232 ops/s
Iteration  20: 22762522.292 ops/s
Iteration  21: 22796237.640 ops/s
Iteration  22: 22926422.792 ops/s
Iteration  23: 22764652.696 ops/s
Iteration  24: 22854056.046 ops/s
Iteration  25: 23096064.193 ops/s
Iteration  26: 22983907.596 ops/s
Iteration  27: 22990559.499 ops/s
Iteration  28: 22812744.297 ops/s
Iteration  29: 22935597.153 ops/s
Iteration  30: 23081613.127 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_allSatisfy":
  22821824.651 ±(99.9%) 79660.755 ops/s [Average]
  (min, avg, max) = (22635774.004, 22821824.651, 23096064.193), stdev = 119232.477
  CI (99.9%): [22742163.896, 22901485.405] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  22821824.651 ± 79660.755  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8483083.995 ops/s
# Warmup Iteration   2: 16768659.984 ops/s
# Warmup Iteration   3: 13866581.953 ops/s
# Warmup Iteration   4: 16377923.431 ops/s
# Warmup Iteration   5: 16367903.359 ops/s
# Warmup Iteration   6: 16363501.556 ops/s
# Warmup Iteration   7: 16355736.638 ops/s
# Warmup Iteration   8: 16339501.057 ops/s
# Warmup Iteration   9: 16393883.740 ops/s
# Warmup Iteration  10: 16358374.511 ops/s
# Warmup Iteration  11: 16364952.294 ops/s
# Warmup Iteration  12: 16340717.805 ops/s
# Warmup Iteration  13: 16349331.485 ops/s
# Warmup Iteration  14: 16324942.342 ops/s
# Warmup Iteration  15: 16375536.791 ops/s
# Warmup Iteration  16: 16349621.608 ops/s
# Warmup Iteration  17: 16347540.293 ops/s
# Warmup Iteration  18: 16390094.767 ops/s
# Warmup Iteration  19: 16317818.522 ops/s
# Warmup Iteration  20: 16372972.539 ops/s
# Warmup Iteration  21: 16394475.586 ops/s
# Warmup Iteration  22: 16372648.421 ops/s
# Warmup Iteration  23: 16364091.580 ops/s
# Warmup Iteration  24: 16325408.022 ops/s
# Warmup Iteration  25: 16345868.864 ops/s
# Warmup Iteration  26: 16366459.415 ops/s
# Warmup Iteration  27: 16397532.544 ops/s
# Warmup Iteration  28: 16359311.866 ops/s
# Warmup Iteration  29: 16354596.004 ops/s
# Warmup Iteration  30: 16240851.328 ops/s
Iteration   1: 16364100.439 ops/s
Iteration   2: 16376480.537 ops/s
Iteration   3: 16436936.123 ops/s
Iteration   4: 16358497.058 ops/s
Iteration   5: 16244256.068 ops/s
Iteration   6: 16210068.987 ops/s
Iteration   7: 16414273.256 ops/s
Iteration   8: 16264160.903 ops/s
Iteration   9: 16380562.489 ops/s
Iteration  10: 16289390.024 ops/s
Iteration  11: 16399550.766 ops/s
Iteration  12: 16401087.142 ops/s
Iteration  13: 16379015.293 ops/s
Iteration  14: 16374140.095 ops/s
Iteration  15: 16428463.366 ops/s
Iteration  16: 16354029.464 ops/s
Iteration  17: 16402086.542 ops/s
Iteration  18: 16365172.609 ops/s
Iteration  19: 16340516.716 ops/s
Iteration  20: 16322160.101 ops/s
Iteration  21: 16426114.950 ops/s
Iteration  22: 16359330.356 ops/s
Iteration  23: 16342633.170 ops/s
Iteration  24: 16377501.273 ops/s
Iteration  25: 16322359.834 ops/s
Iteration  26: 16398848.725 ops/s
Iteration  27: 16347058.391 ops/s
Iteration  28: 16406770.883 ops/s
Iteration  29: 16319047.183 ops/s
Iteration  30: 16416022.577 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_anySatisfy":
  16360687.844 ±(99.9%) 36559.004 ops/s [Average]
  (min, avg, max) = (16210068.987, 16360687.844, 16436936.123), stdev = 54719.800
  CI (99.9%): [16324128.840, 16397246.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  16360687.844 ± 36559.004  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 892542.913 ops/s
# Warmup Iteration   2: 1960331.542 ops/s
# Warmup Iteration   3: 1949836.779 ops/s
# Warmup Iteration   4: 1642760.707 ops/s
# Warmup Iteration   5: 1977591.991 ops/s
# Warmup Iteration   6: 1965888.957 ops/s
# Warmup Iteration   7: 1968574.836 ops/s
# Warmup Iteration   8: 1965085.715 ops/s
# Warmup Iteration   9: 1973421.157 ops/s
# Warmup Iteration  10: 1955119.536 ops/s
# Warmup Iteration  11: 1953854.058 ops/s
# Warmup Iteration  12: 1949116.778 ops/s
# Warmup Iteration  13: 1971349.279 ops/s
# Warmup Iteration  14: 1958483.754 ops/s
# Warmup Iteration  15: 1974325.417 ops/s
# Warmup Iteration  16: 1969348.444 ops/s
# Warmup Iteration  17: 1967905.487 ops/s
# Warmup Iteration  18: 1974464.792 ops/s
# Warmup Iteration  19: 1972043.567 ops/s
# Warmup Iteration  20: 1971394.895 ops/s
# Warmup Iteration  21: 1963655.053 ops/s
# Warmup Iteration  22: 1972768.759 ops/s
# Warmup Iteration  23: 1963562.983 ops/s
# Warmup Iteration  24: 1963237.923 ops/s
# Warmup Iteration  25: 1960622.100 ops/s
# Warmup Iteration  26: 1973115.744 ops/s
# Warmup Iteration  27: 1963015.121 ops/s
# Warmup Iteration  28: 1963146.615 ops/s
# Warmup Iteration  29: 1956750.527 ops/s
# Warmup Iteration  30: 1957892.020 ops/s
Iteration   1: 1973476.530 ops/s
Iteration   2: 1967012.826 ops/s
Iteration   3: 1948411.771 ops/s
Iteration   4: 1968038.249 ops/s
Iteration   5: 1958408.261 ops/s
Iteration   6: 1966969.390 ops/s
Iteration   7: 1954099.887 ops/s
Iteration   8: 1964050.269 ops/s
Iteration   9: 1976321.845 ops/s
Iteration  10: 1952207.369 ops/s
Iteration  11: 1980953.484 ops/s
Iteration  12: 1967575.744 ops/s
Iteration  13: 1973621.461 ops/s
Iteration  14: 1958744.971 ops/s
Iteration  15: 1972050.790 ops/s
Iteration  16: 1949279.341 ops/s
Iteration  17: 1963002.415 ops/s
Iteration  18: 1962279.543 ops/s
Iteration  19: 1956857.642 ops/s
Iteration  20: 1955239.359 ops/s
Iteration  21: 1945313.885 ops/s
Iteration  22: 1968592.300 ops/s
Iteration  23: 1961942.967 ops/s
Iteration  24: 1951725.937 ops/s
Iteration  25: 1950468.494 ops/s
Iteration  26: 1945691.759 ops/s
Iteration  27: 1947814.098 ops/s
Iteration  28: 1958880.766 ops/s
Iteration  29: 1954330.117 ops/s
Iteration  30: 1948133.569 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_appendString":
  1960049.835 ±(99.9%) 6599.494 ops/s [Average]
  (min, avg, max) = (1945313.885, 1960049.835, 1980953.484), stdev = 9877.812
  CI (99.9%): [1953450.341, 1966649.328] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_appendString  thrpt   30  1960049.835 ± 6599.494  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 26903045.253 ops/s
# Warmup Iteration   2: 52553757.503 ops/s
# Warmup Iteration   3: 43289646.761 ops/s
# Warmup Iteration   4: 49752464.294 ops/s
# Warmup Iteration   5: 49782801.677 ops/s
# Warmup Iteration   6: 49968580.897 ops/s
# Warmup Iteration   7: 49839422.167 ops/s
# Warmup Iteration   8: 49978401.740 ops/s
# Warmup Iteration   9: 49678661.110 ops/s
# Warmup Iteration  10: 49903038.137 ops/s
# Warmup Iteration  11: 49757427.604 ops/s
# Warmup Iteration  12: 49879858.252 ops/s
# Warmup Iteration  13: 49955887.732 ops/s
# Warmup Iteration  14: 49805560.651 ops/s
# Warmup Iteration  15: 49978298.961 ops/s
# Warmup Iteration  16: 49749706.748 ops/s
# Warmup Iteration  17: 49955741.457 ops/s
# Warmup Iteration  18: 49738289.151 ops/s
# Warmup Iteration  19: 49800792.907 ops/s
# Warmup Iteration  20: 49792528.992 ops/s
# Warmup Iteration  21: 50030039.952 ops/s
# Warmup Iteration  22: 49840036.575 ops/s
# Warmup Iteration  23: 49869256.209 ops/s
# Warmup Iteration  24: 49916398.153 ops/s
# Warmup Iteration  25: 49876013.529 ops/s
# Warmup Iteration  26: 49890563.179 ops/s
# Warmup Iteration  27: 49955248.098 ops/s
# Warmup Iteration  28: 49999949.179 ops/s
# Warmup Iteration  29: 49856215.198 ops/s
# Warmup Iteration  30: 49901327.428 ops/s
Iteration   1: 49409265.753 ops/s
Iteration   2: 49923352.439 ops/s
Iteration   3: 49906954.781 ops/s
Iteration   4: 49579828.012 ops/s
Iteration   5: 49962037.523 ops/s
Iteration   6: 49715000.067 ops/s
Iteration   7: 49899426.692 ops/s
Iteration   8: 50048610.981 ops/s
Iteration   9: 49901380.851 ops/s
Iteration  10: 50120637.151 ops/s
Iteration  11: 49702670.268 ops/s
Iteration  12: 49827762.605 ops/s
Iteration  13: 49907040.142 ops/s
Iteration  14: 49826631.330 ops/s
Iteration  15: 49993977.392 ops/s
Iteration  16: 49920698.813 ops/s
Iteration  17: 49854611.929 ops/s
Iteration  18: 49917820.230 ops/s
Iteration  19: 49737990.393 ops/s
Iteration  20: 49941010.761 ops/s
Iteration  21: 49525963.647 ops/s
Iteration  22: 50000388.628 ops/s
Iteration  23: 50016032.348 ops/s
Iteration  24: 49832593.693 ops/s
Iteration  25: 49821239.236 ops/s
Iteration  26: 49795799.255 ops/s
Iteration  27: 49986646.198 ops/s
Iteration  28: 49867948.467 ops/s
Iteration  29: 49713430.864 ops/s
Iteration  30: 49898971.038 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_asLazy":
  49851857.383 ±(99.9%) 103858.731 ops/s [Average]
  (min, avg, max) = (49409265.753, 49851857.383, 50120637.151), stdev = 155450.870
  CI (99.9%): [49747998.652, 49955716.114] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_asLazy  thrpt   30  49851857.383 ± 103858.731  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_booleanIterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_booleanIterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56674105.126 ops/s
# Warmup Iteration   2: 106806758.291 ops/s
# Warmup Iteration   3: 98155402.043 ops/s
# Warmup Iteration   4: 114564296.341 ops/s
# Warmup Iteration   5: 114558166.414 ops/s
# Warmup Iteration   6: 114556814.049 ops/s
# Warmup Iteration   7: 114200184.682 ops/s
# Warmup Iteration   8: 114349200.822 ops/s
# Warmup Iteration   9: 113961385.867 ops/s
# Warmup Iteration  10: 114453463.714 ops/s
# Warmup Iteration  11: 114243638.760 ops/s
# Warmup Iteration  12: 114455920.454 ops/s
# Warmup Iteration  13: 114497508.169 ops/s
# Warmup Iteration  14: 114651571.184 ops/s
# Warmup Iteration  15: 114748044.129 ops/s
# Warmup Iteration  16: 114305651.268 ops/s
# Warmup Iteration  17: 117820149.872 ops/s
# Warmup Iteration  18: 118003648.870 ops/s
# Warmup Iteration  19: 118154758.673 ops/s
# Warmup Iteration  20: 118123257.035 ops/s
# Warmup Iteration  21: 118146808.889 ops/s
# Warmup Iteration  22: 118103902.755 ops/s
# Warmup Iteration  23: 118246563.266 ops/s
# Warmup Iteration  24: 118106010.403 ops/s
# Warmup Iteration  25: 118321996.785 ops/s
# Warmup Iteration  26: 117669890.408 ops/s
# Warmup Iteration  27: 118042084.622 ops/s
# Warmup Iteration  28: 118184450.216 ops/s
# Warmup Iteration  29: 117994506.711 ops/s
# Warmup Iteration  30: 117764151.433 ops/s
Iteration   1: 117781981.422 ops/s
Iteration   2: 117644261.311 ops/s
Iteration   3: 118204344.364 ops/s
Iteration   4: 117429381.522 ops/s
Iteration   5: 118198498.913 ops/s
Iteration   6: 118081068.189 ops/s
Iteration   7: 117246325.234 ops/s
Iteration   8: 117969073.235 ops/s
Iteration   9: 117624350.736 ops/s
Iteration  10: 118065669.579 ops/s
Iteration  11: 118165229.105 ops/s
Iteration  12: 117423171.776 ops/s
Iteration  13: 118109035.867 ops/s
Iteration  14: 118083832.542 ops/s
Iteration  15: 118254202.571 ops/s
Iteration  16: 118157366.689 ops/s
Iteration  17: 117859102.592 ops/s
Iteration  18: 118429189.546 ops/s
Iteration  19: 117998322.462 ops/s
Iteration  20: 117872103.438 ops/s
Iteration  21: 117671960.023 ops/s
Iteration  22: 118111131.490 ops/s
Iteration  23: 118404610.058 ops/s
Iteration  24: 117755902.363 ops/s
Iteration  25: 118252540.929 ops/s
Iteration  26: 118058499.570 ops/s
Iteration  27: 118023533.548 ops/s
Iteration  28: 117550731.874 ops/s
Iteration  29: 117695443.088 ops/s
Iteration  30: 117516933.784 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_booleanIterator":
  117921259.927 ±(99.9%) 205497.054 ops/s [Average]
  (min, avg, max) = (117246325.234, 117921259.927, 118429189.546), stdev = 307578.340
  CI (99.9%): [117715762.873, 118126756.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt          Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_booleanIterator  thrpt   30  117921259.927 ± 205497.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 285419.832 ops/s
# Warmup Iteration   2: 601240.573 ops/s
# Warmup Iteration   3: 680395.358 ops/s
# Warmup Iteration   4: 684740.193 ops/s
# Warmup Iteration   5: 559227.025 ops/s
# Warmup Iteration   6: 684634.869 ops/s
# Warmup Iteration   7: 685316.050 ops/s
# Warmup Iteration   8: 685344.494 ops/s
# Warmup Iteration   9: 684902.356 ops/s
# Warmup Iteration  10: 684813.788 ops/s
# Warmup Iteration  11: 684375.465 ops/s
# Warmup Iteration  12: 683063.346 ops/s
# Warmup Iteration  13: 684559.299 ops/s
# Warmup Iteration  14: 683844.791 ops/s
# Warmup Iteration  15: 682023.531 ops/s
# Warmup Iteration  16: 684289.757 ops/s
# Warmup Iteration  17: 683140.486 ops/s
# Warmup Iteration  18: 684726.953 ops/s
# Warmup Iteration  19: 682362.147 ops/s
# Warmup Iteration  20: 683078.194 ops/s
# Warmup Iteration  21: 685569.713 ops/s
# Warmup Iteration  22: 684353.396 ops/s
# Warmup Iteration  23: 684165.447 ops/s
# Warmup Iteration  24: 684810.226 ops/s
# Warmup Iteration  25: 684920.713 ops/s
# Warmup Iteration  26: 683806.565 ops/s
# Warmup Iteration  27: 684928.831 ops/s
# Warmup Iteration  28: 685970.876 ops/s
# Warmup Iteration  29: 685350.164 ops/s
# Warmup Iteration  30: 684440.798 ops/s
Iteration   1: 687292.727 ops/s
Iteration   2: 682624.036 ops/s
Iteration   3: 684078.323 ops/s
Iteration   4: 685112.971 ops/s
Iteration   5: 680974.626 ops/s
Iteration   6: 686691.999 ops/s
Iteration   7: 684749.369 ops/s
Iteration   8: 686567.114 ops/s
Iteration   9: 686238.597 ops/s
Iteration  10: 684779.199 ops/s
Iteration  11: 683153.483 ops/s
Iteration  12: 683900.470 ops/s
Iteration  13: 687316.691 ops/s
Iteration  14: 682948.392 ops/s
Iteration  15: 685069.322 ops/s
Iteration  16: 685880.995 ops/s
Iteration  17: 683796.519 ops/s
Iteration  18: 686625.287 ops/s
Iteration  19: 682639.538 ops/s
Iteration  20: 683470.769 ops/s
Iteration  21: 685503.508 ops/s
Iteration  22: 682546.089 ops/s
Iteration  23: 684678.714 ops/s
Iteration  24: 682106.615 ops/s
Iteration  25: 681790.941 ops/s
Iteration  26: 685172.273 ops/s
Iteration  27: 682647.763 ops/s
Iteration  28: 684074.441 ops/s
Iteration  29: 684649.536 ops/s
Iteration  30: 684614.841 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_collect":
  684389.838 ±(99.9%) 1126.729 ops/s [Average]
  (min, avg, max) = (680974.626, 684389.838, 687316.691), stdev = 1686.435
  CI (99.9%): [683263.109, 685516.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_collect  thrpt   30  684389.838 ± 1126.729  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 23565923.938 ops/s
# Warmup Iteration   2: 43339784.158 ops/s
# Warmup Iteration   3: 39480974.163 ops/s
# Warmup Iteration   4: 45128338.776 ops/s
# Warmup Iteration   5: 45041163.986 ops/s
# Warmup Iteration   6: 44782462.727 ops/s
# Warmup Iteration   7: 44907127.520 ops/s
# Warmup Iteration   8: 45259220.356 ops/s
# Warmup Iteration   9: 45052618.071 ops/s
# Warmup Iteration  10: 45108083.983 ops/s
# Warmup Iteration  11: 45101688.573 ops/s
# Warmup Iteration  12: 45207361.834 ops/s
# Warmup Iteration  13: 45030287.611 ops/s
# Warmup Iteration  14: 45017426.190 ops/s
# Warmup Iteration  15: 44972956.543 ops/s
# Warmup Iteration  16: 44953896.672 ops/s
# Warmup Iteration  17: 44994132.633 ops/s
# Warmup Iteration  18: 45177475.779 ops/s
# Warmup Iteration  19: 45166766.415 ops/s
# Warmup Iteration  20: 45312409.359 ops/s
# Warmup Iteration  21: 45202130.333 ops/s
# Warmup Iteration  22: 45142866.060 ops/s
# Warmup Iteration  23: 45012603.923 ops/s
# Warmup Iteration  24: 44997026.462 ops/s
# Warmup Iteration  25: 45217169.884 ops/s
# Warmup Iteration  26: 45096965.587 ops/s
# Warmup Iteration  27: 45188897.779 ops/s
# Warmup Iteration  28: 45146364.590 ops/s
# Warmup Iteration  29: 45147878.299 ops/s
# Warmup Iteration  30: 45056556.603 ops/s
Iteration   1: 45032138.074 ops/s
Iteration   2: 45195464.014 ops/s
Iteration   3: 45180999.396 ops/s
Iteration   4: 45202673.493 ops/s
Iteration   5: 44990027.080 ops/s
Iteration   6: 45359155.405 ops/s
Iteration   7: 45132603.895 ops/s
Iteration   8: 45071169.002 ops/s
Iteration   9: 45111244.004 ops/s
Iteration  10: 45034570.899 ops/s
Iteration  11: 44928948.159 ops/s
Iteration  12: 45135110.312 ops/s
Iteration  13: 45141431.160 ops/s
Iteration  14: 45113878.911 ops/s
Iteration  15: 45387725.695 ops/s
Iteration  16: 45031522.747 ops/s
Iteration  17: 45266608.343 ops/s
Iteration  18: 45259954.993 ops/s
Iteration  19: 45233352.135 ops/s
Iteration  20: 45291844.311 ops/s
Iteration  21: 45153750.811 ops/s
Iteration  22: 45235957.266 ops/s
Iteration  23: 45325371.241 ops/s
Iteration  24: 45257930.142 ops/s
Iteration  25: 45219828.884 ops/s
Iteration  26: 45266665.727 ops/s
Iteration  27: 45395690.595 ops/s
Iteration  28: 45297780.192 ops/s
Iteration  29: 45093003.592 ops/s
Iteration  30: 45002327.267 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_contains":
  45178290.925 ±(99.9%) 81891.114 ops/s [Average]
  (min, avg, max) = (44928948.159, 45178290.925, 45395690.595), stdev = 122570.773
  CI (99.9%): [45096399.811, 45260182.039] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_contains  thrpt   30  45178290.925 ± 81891.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 10550245.183 ops/s
# Warmup Iteration   2: 16876419.315 ops/s
# Warmup Iteration   3: 19678496.816 ops/s
# Warmup Iteration   4: 19661829.624 ops/s
# Warmup Iteration   5: 19659979.814 ops/s
# Warmup Iteration   6: 19616994.566 ops/s
# Warmup Iteration   7: 19639287.183 ops/s
# Warmup Iteration   8: 19592146.559 ops/s
# Warmup Iteration   9: 19627155.458 ops/s
# Warmup Iteration  10: 19508556.637 ops/s
# Warmup Iteration  11: 19610902.189 ops/s
# Warmup Iteration  12: 19566872.952 ops/s
# Warmup Iteration  13: 19635530.976 ops/s
# Warmup Iteration  14: 19631702.237 ops/s
# Warmup Iteration  15: 19636643.115 ops/s
# Warmup Iteration  16: 19567542.769 ops/s
# Warmup Iteration  17: 19598182.729 ops/s
# Warmup Iteration  18: 19650578.708 ops/s
# Warmup Iteration  19: 19666672.863 ops/s
# Warmup Iteration  20: 19600796.944 ops/s
# Warmup Iteration  21: 19578959.785 ops/s
# Warmup Iteration  22: 19582233.454 ops/s
# Warmup Iteration  23: 19671730.841 ops/s
# Warmup Iteration  24: 19589116.314 ops/s
# Warmup Iteration  25: 19603259.148 ops/s
# Warmup Iteration  26: 19583234.439 ops/s
# Warmup Iteration  27: 19568467.295 ops/s
# Warmup Iteration  28: 19561889.579 ops/s
# Warmup Iteration  29: 19573157.432 ops/s
# Warmup Iteration  30: 19576187.514 ops/s
Iteration   1: 19412549.591 ops/s
Iteration   2: 19488427.664 ops/s
Iteration   3: 19635328.997 ops/s
Iteration   4: 19620173.366 ops/s
Iteration   5: 19608451.231 ops/s
Iteration   6: 19665207.337 ops/s
Iteration   7: 19675933.449 ops/s
Iteration   8: 19684203.898 ops/s
Iteration   9: 19642440.420 ops/s
Iteration  10: 19589408.819 ops/s
Iteration  11: 19632710.242 ops/s
Iteration  12: 19580935.848 ops/s
Iteration  13: 19549749.650 ops/s
Iteration  14: 19514726.725 ops/s
Iteration  15: 19600518.752 ops/s
Iteration  16: 19628948.660 ops/s
Iteration  17: 19625250.936 ops/s
Iteration  18: 19701232.684 ops/s
Iteration  19: 19659058.968 ops/s
Iteration  20: 19491803.778 ops/s
Iteration  21: 19476956.612 ops/s
Iteration  22: 19616776.453 ops/s
Iteration  23: 19623010.883 ops/s
Iteration  24: 19614725.225 ops/s
Iteration  25: 19642931.685 ops/s
Iteration  26: 19591231.789 ops/s
Iteration  27: 19636955.730 ops/s
Iteration  28: 19627318.983 ops/s
Iteration  29: 19710353.747 ops/s
Iteration  30: 19602087.496 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllArray":
  19604980.321 ±(99.9%) 46108.338 ops/s [Average]
  (min, avg, max) = (19412549.591, 19604980.321, 19710353.747), stdev = 69012.795
  CI (99.9%): [19558871.983, 19651088.658] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  19604980.321 ± 46108.338  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1499642.531 ops/s
# Warmup Iteration   2: 3361448.400 ops/s
# Warmup Iteration   3: 2846009.255 ops/s
# Warmup Iteration   4: 3411376.481 ops/s
# Warmup Iteration   5: 3399944.775 ops/s
# Warmup Iteration   6: 3410784.443 ops/s
# Warmup Iteration   7: 3412421.467 ops/s
# Warmup Iteration   8: 3405417.635 ops/s
# Warmup Iteration   9: 3415651.063 ops/s
# Warmup Iteration  10: 3412338.080 ops/s
# Warmup Iteration  11: 3411668.601 ops/s
# Warmup Iteration  12: 3423869.946 ops/s
# Warmup Iteration  13: 3412438.437 ops/s
# Warmup Iteration  14: 3407896.720 ops/s
# Warmup Iteration  15: 3403351.251 ops/s
# Warmup Iteration  16: 3396869.216 ops/s
# Warmup Iteration  17: 3402597.329 ops/s
# Warmup Iteration  18: 3407766.991 ops/s
# Warmup Iteration  19: 3407069.552 ops/s
# Warmup Iteration  20: 3406393.257 ops/s
# Warmup Iteration  21: 3415843.795 ops/s
# Warmup Iteration  22: 3408736.890 ops/s
# Warmup Iteration  23: 3401496.307 ops/s
# Warmup Iteration  24: 3411582.533 ops/s
# Warmup Iteration  25: 3398099.750 ops/s
# Warmup Iteration  26: 3400985.024 ops/s
# Warmup Iteration  27: 3407519.294 ops/s
# Warmup Iteration  28: 3411695.314 ops/s
# Warmup Iteration  29: 3413926.770 ops/s
# Warmup Iteration  30: 3394715.523 ops/s
Iteration   1: 3406283.188 ops/s
Iteration   2: 3387696.552 ops/s
Iteration   3: 3406471.987 ops/s
Iteration   4: 3407735.860 ops/s
Iteration   5: 3414922.382 ops/s
Iteration   6: 3409133.402 ops/s
Iteration   7: 3406185.761 ops/s
Iteration   8: 3407770.500 ops/s
Iteration   9: 3421627.519 ops/s
Iteration  10: 3404294.711 ops/s
Iteration  11: 3405731.181 ops/s
Iteration  12: 3411932.708 ops/s
Iteration  13: 3411250.078 ops/s
Iteration  14: 3401182.534 ops/s
Iteration  15: 3406800.234 ops/s
Iteration  16: 3414316.090 ops/s
Iteration  17: 3419901.529 ops/s
Iteration  18: 3422711.149 ops/s
Iteration  19: 3407379.581 ops/s
Iteration  20: 3399245.719 ops/s
Iteration  21: 3421168.826 ops/s
Iteration  22: 3410779.250 ops/s
Iteration  23: 3422005.850 ops/s
Iteration  24: 3389531.079 ops/s
Iteration  25: 3414970.289 ops/s
Iteration  26: 3415485.410 ops/s
Iteration  27: 3409477.762 ops/s
Iteration  28: 3404429.465 ops/s
Iteration  29: 3407409.703 ops/s
Iteration  30: 3418149.713 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllIterable":
  3409532.667 ±(99.9%) 5677.931 ops/s [Average]
  (min, avg, max) = (3387696.552, 3409532.667, 3422711.149), stdev = 8498.461
  CI (99.9%): [3403854.736, 3415210.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  3409532.667 ± 5677.931  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 29320465.254 ops/s
# Warmup Iteration   2: 44310018.319 ops/s
# Warmup Iteration   3: 47026008.908 ops/s
# Warmup Iteration   4: 47156724.949 ops/s
# Warmup Iteration   5: 47036086.879 ops/s
# Warmup Iteration   6: 47029755.722 ops/s
# Warmup Iteration   7: 47254201.812 ops/s
# Warmup Iteration   8: 47186875.845 ops/s
# Warmup Iteration   9: 47104946.028 ops/s
# Warmup Iteration  10: 46599511.049 ops/s
# Warmup Iteration  11: 46954826.254 ops/s
# Warmup Iteration  12: 47117881.500 ops/s
# Warmup Iteration  13: 47059463.756 ops/s
# Warmup Iteration  14: 46862573.044 ops/s
# Warmup Iteration  15: 47005637.793 ops/s
# Warmup Iteration  16: 46976949.140 ops/s
# Warmup Iteration  17: 47030407.772 ops/s
# Warmup Iteration  18: 46938799.793 ops/s
# Warmup Iteration  19: 46547624.743 ops/s
# Warmup Iteration  20: 46631262.172 ops/s
# Warmup Iteration  21: 46623161.339 ops/s
# Warmup Iteration  22: 47094628.039 ops/s
# Warmup Iteration  23: 47009817.050 ops/s
# Warmup Iteration  24: 47084494.548 ops/s
# Warmup Iteration  25: 47174804.705 ops/s
# Warmup Iteration  26: 46909151.060 ops/s
# Warmup Iteration  27: 46827949.265 ops/s
# Warmup Iteration  28: 47085977.596 ops/s
# Warmup Iteration  29: 46988083.592 ops/s
# Warmup Iteration  30: 47127835.246 ops/s
Iteration   1: 46731724.661 ops/s
Iteration   2: 46776798.493 ops/s
Iteration   3: 47240120.226 ops/s
Iteration   4: 47354609.294 ops/s
Iteration   5: 47103538.798 ops/s
Iteration   6: 47237348.977 ops/s
Iteration   7: 47088787.519 ops/s
Iteration   8: 47254062.365 ops/s
Iteration   9: 47245047.166 ops/s
Iteration  10: 47125466.240 ops/s
Iteration  11: 47134859.864 ops/s
Iteration  12: 47281482.743 ops/s
Iteration  13: 47040534.230 ops/s
Iteration  14: 46731258.329 ops/s
Iteration  15: 47139509.840 ops/s
Iteration  16: 47210114.346 ops/s
Iteration  17: 47119814.531 ops/s
Iteration  18: 46816850.248 ops/s
Iteration  19: 46934102.990 ops/s
Iteration  20: 46858384.842 ops/s
Iteration  21: 46800197.795 ops/s
Iteration  22: 47070075.994 ops/s
Iteration  23: 47048259.453 ops/s
Iteration  24: 47405413.374 ops/s
Iteration  25: 47100533.858 ops/s
Iteration  26: 47032848.322 ops/s
Iteration  27: 47230081.727 ops/s
Iteration  28: 47276710.354 ops/s
Iteration  29: 47169341.070 ops/s
Iteration  30: 47123882.461 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyArray":
  47089392.004 ±(99.9%) 123079.700 ops/s [Average]
  (min, avg, max) = (46731258.329, 47089392.004, 47405413.374), stdev = 184219.915
  CI (99.9%): [46966312.304, 47212471.704] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyArray  thrpt   30  47089392.004 ± 123079.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 857916.888 ops/s
# Warmup Iteration   2: 1242745.377 ops/s
# Warmup Iteration   3: 1436190.434 ops/s
# Warmup Iteration   4: 1436123.803 ops/s
# Warmup Iteration   5: 1443632.573 ops/s
# Warmup Iteration   6: 1439861.102 ops/s
# Warmup Iteration   7: 1202009.653 ops/s
# Warmup Iteration   8: 1443421.965 ops/s
# Warmup Iteration   9: 1446633.248 ops/s
# Warmup Iteration  10: 1443040.637 ops/s
# Warmup Iteration  11: 1447824.204 ops/s
# Warmup Iteration  12: 1441390.521 ops/s
# Warmup Iteration  13: 1444495.893 ops/s
# Warmup Iteration  14: 1444740.532 ops/s
# Warmup Iteration  15: 1442807.909 ops/s
# Warmup Iteration  16: 1444484.037 ops/s
# Warmup Iteration  17: 1429380.835 ops/s
# Warmup Iteration  18: 1425948.262 ops/s
# Warmup Iteration  19: 1434284.320 ops/s
# Warmup Iteration  20: 1429346.247 ops/s
# Warmup Iteration  21: 1430141.942 ops/s
# Warmup Iteration  22: 1429906.966 ops/s
# Warmup Iteration  23: 1427756.524 ops/s
# Warmup Iteration  24: 1429566.963 ops/s
# Warmup Iteration  25: 1430294.639 ops/s
# Warmup Iteration  26: 1431000.190 ops/s
# Warmup Iteration  27: 1429524.225 ops/s
# Warmup Iteration  28: 1431661.722 ops/s
# Warmup Iteration  29: 1428577.756 ops/s
# Warmup Iteration  30: 1432758.487 ops/s
Iteration   1: 1419646.956 ops/s
Iteration   2: 1427231.230 ops/s
Iteration   3: 1431183.702 ops/s
Iteration   4: 1431328.570 ops/s
Iteration   5: 1434847.542 ops/s
Iteration   6: 1424021.050 ops/s
Iteration   7: 1429082.453 ops/s
Iteration   8: 1429378.833 ops/s
Iteration   9: 1428737.203 ops/s
Iteration  10: 1431360.508 ops/s
Iteration  11: 1432933.190 ops/s
Iteration  12: 1429539.874 ops/s
Iteration  13: 1431380.359 ops/s
Iteration  14: 1433369.132 ops/s
Iteration  15: 1430278.750 ops/s
Iteration  16: 1430550.180 ops/s
Iteration  17: 1426752.280 ops/s
Iteration  18: 1435968.826 ops/s
Iteration  19: 1430146.894 ops/s
Iteration  20: 1433723.822 ops/s
Iteration  21: 1433678.728 ops/s
Iteration  22: 1428495.612 ops/s
Iteration  23: 1433910.614 ops/s
Iteration  24: 1430859.840 ops/s
Iteration  25: 1434695.577 ops/s
Iteration  26: 1428656.516 ops/s
Iteration  27: 1427221.548 ops/s
Iteration  28: 1427542.195 ops/s
Iteration  29: 1429999.594 ops/s
Iteration  30: 1428411.447 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyIterable":
  1430164.434 ±(99.9%) 2272.829 ops/s [Average]
  (min, avg, max) = (1419646.956, 1430164.434, 1435968.826), stdev = 3401.864
  CI (99.9%): [1427891.605, 1432437.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  1430164.434 ± 2272.829  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 28007304.851 ops/s
# Warmup Iteration   2: 41959489.633 ops/s
# Warmup Iteration   3: 45635418.893 ops/s
# Warmup Iteration   4: 45577219.838 ops/s
# Warmup Iteration   5: 45543010.591 ops/s
# Warmup Iteration   6: 45463803.430 ops/s
# Warmup Iteration   7: 45596617.342 ops/s
# Warmup Iteration   8: 45357164.090 ops/s
# Warmup Iteration   9: 45567986.867 ops/s
# Warmup Iteration  10: 45412677.701 ops/s
# Warmup Iteration  11: 45358252.245 ops/s
# Warmup Iteration  12: 45639208.339 ops/s
# Warmup Iteration  13: 45586287.751 ops/s
# Warmup Iteration  14: 45446533.285 ops/s
# Warmup Iteration  15: 45540276.201 ops/s
# Warmup Iteration  16: 45451014.012 ops/s
# Warmup Iteration  17: 45569669.499 ops/s
# Warmup Iteration  18: 45571009.714 ops/s
# Warmup Iteration  19: 45656358.944 ops/s
# Warmup Iteration  20: 45498640.963 ops/s
# Warmup Iteration  21: 45689850.426 ops/s
# Warmup Iteration  22: 45463719.481 ops/s
# Warmup Iteration  23: 45509070.174 ops/s
# Warmup Iteration  24: 45594983.901 ops/s
# Warmup Iteration  25: 45390942.417 ops/s
# Warmup Iteration  26: 45515427.340 ops/s
# Warmup Iteration  27: 45676810.783 ops/s
# Warmup Iteration  28: 45490847.660 ops/s
# Warmup Iteration  29: 45602704.885 ops/s
# Warmup Iteration  30: 45560236.747 ops/s
Iteration   1: 45664638.134 ops/s
Iteration   2: 45745788.440 ops/s
Iteration   3: 45624182.509 ops/s
Iteration   4: 45520046.881 ops/s
Iteration   5: 45719597.757 ops/s
Iteration   6: 45806018.190 ops/s
Iteration   7: 45625200.185 ops/s
Iteration   8: 45803046.017 ops/s
Iteration   9: 45663707.663 ops/s
Iteration  10: 45644263.453 ops/s
Iteration  11: 45669169.747 ops/s
Iteration  12: 45607292.600 ops/s
Iteration  13: 45631902.725 ops/s
Iteration  14: 45622215.616 ops/s
Iteration  15: 45717238.639 ops/s
Iteration  16: 45459732.896 ops/s
Iteration  17: 45611293.535 ops/s
Iteration  18: 45541225.724 ops/s
Iteration  19: 45589709.761 ops/s
Iteration  20: 45390385.144 ops/s
Iteration  21: 45683825.838 ops/s
Iteration  22: 45499225.579 ops/s
Iteration  23: 45559599.286 ops/s
Iteration  24: 45768733.236 ops/s
Iteration  25: 45044317.913 ops/s
Iteration  26: 45649634.133 ops/s
Iteration  27: 45209818.910 ops/s
Iteration  28: 45591168.891 ops/s
Iteration  29: 45578350.875 ops/s
Iteration  30: 45459192.432 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneArray":
  45590017.424 ±(99.9%) 107629.123 ops/s [Average]
  (min, avg, max) = (45044317.913, 45590017.424, 45806018.190), stdev = 161094.217
  CI (99.9%): [45482388.301, 45697646.547] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneArray  thrpt   30  45590017.424 ± 107629.123  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 806541.959 ops/s
# Warmup Iteration   2: 1163339.287 ops/s
# Warmup Iteration   3: 1360898.651 ops/s
# Warmup Iteration   4: 1364323.106 ops/s
# Warmup Iteration   5: 1361135.585 ops/s
# Warmup Iteration   6: 1366580.415 ops/s
# Warmup Iteration   7: 1138115.399 ops/s
# Warmup Iteration   8: 1364521.634 ops/s
# Warmup Iteration   9: 1362695.721 ops/s
# Warmup Iteration  10: 1364639.199 ops/s
# Warmup Iteration  11: 1359307.927 ops/s
# Warmup Iteration  12: 1363895.871 ops/s
# Warmup Iteration  13: 1364750.024 ops/s
# Warmup Iteration  14: 1359266.261 ops/s
# Warmup Iteration  15: 1361106.186 ops/s
# Warmup Iteration  16: 1364823.745 ops/s
# Warmup Iteration  17: 1367422.659 ops/s
# Warmup Iteration  18: 1366447.711 ops/s
# Warmup Iteration  19: 1366276.978 ops/s
# Warmup Iteration  20: 1366544.221 ops/s
# Warmup Iteration  21: 1364408.284 ops/s
# Warmup Iteration  22: 1363962.440 ops/s
# Warmup Iteration  23: 1365068.310 ops/s
# Warmup Iteration  24: 1364474.196 ops/s
# Warmup Iteration  25: 1363719.015 ops/s
# Warmup Iteration  26: 1366612.704 ops/s
# Warmup Iteration  27: 1361535.525 ops/s
# Warmup Iteration  28: 1362743.996 ops/s
# Warmup Iteration  29: 1366842.400 ops/s
# Warmup Iteration  30: 1363183.631 ops/s
Iteration   1: 1363620.791 ops/s
Iteration   2: 1363700.341 ops/s
Iteration   3: 1362416.005 ops/s
Iteration   4: 1367204.668 ops/s
Iteration   5: 1356220.910 ops/s
Iteration   6: 1364765.618 ops/s
Iteration   7: 1361786.495 ops/s
Iteration   8: 1366955.154 ops/s
Iteration   9: 1362135.646 ops/s
Iteration  10: 1368095.351 ops/s
Iteration  11: 1361343.276 ops/s
Iteration  12: 1367220.279 ops/s
Iteration  13: 1363572.538 ops/s
Iteration  14: 1361655.837 ops/s
Iteration  15: 1364166.767 ops/s
Iteration  16: 1362310.748 ops/s
Iteration  17: 1366820.943 ops/s
Iteration  18: 1363075.870 ops/s
Iteration  19: 1363862.209 ops/s
Iteration  20: 1367882.432 ops/s
Iteration  21: 1365538.026 ops/s
Iteration  22: 1367859.541 ops/s
Iteration  23: 1363183.457 ops/s
Iteration  24: 1369101.729 ops/s
Iteration  25: 1365464.322 ops/s
Iteration  26: 1364128.465 ops/s
Iteration  27: 1362735.088 ops/s
Iteration  28: 1367009.218 ops/s
Iteration  29: 1365338.312 ops/s
Iteration  30: 1368022.112 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneIterable":
  1364573.072 ±(99.9%) 1851.749 ops/s [Average]
  (min, avg, max) = (1356220.910, 1364573.072, 1369101.729), stdev = 2771.611
  CI (99.9%): [1362721.323, 1366424.821] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  1364573.072 ± 1851.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12930024.862 ops/s
# Warmup Iteration   2: 25753309.197 ops/s
# Warmup Iteration   3: 26047485.700 ops/s
# Warmup Iteration   4: 21849703.427 ops/s
# Warmup Iteration   5: 26064022.524 ops/s
# Warmup Iteration   6: 26001813.849 ops/s
# Warmup Iteration   7: 26037172.283 ops/s
# Warmup Iteration   8: 26078957.618 ops/s
# Warmup Iteration   9: 25994799.223 ops/s
# Warmup Iteration  10: 26050964.430 ops/s
# Warmup Iteration  11: 26029377.841 ops/s
# Warmup Iteration  12: 26023916.889 ops/s
# Warmup Iteration  13: 26041230.367 ops/s
# Warmup Iteration  14: 26048839.956 ops/s
# Warmup Iteration  15: 26009684.829 ops/s
# Warmup Iteration  16: 26065324.981 ops/s
# Warmup Iteration  17: 26105859.187 ops/s
# Warmup Iteration  18: 26076599.685 ops/s
# Warmup Iteration  19: 26066687.589 ops/s
# Warmup Iteration  20: 25958828.560 ops/s
# Warmup Iteration  21: 26105678.493 ops/s
# Warmup Iteration  22: 26105213.215 ops/s
# Warmup Iteration  23: 26007684.820 ops/s
# Warmup Iteration  24: 26148850.871 ops/s
# Warmup Iteration  25: 26059760.949 ops/s
# Warmup Iteration  26: 26057639.294 ops/s
# Warmup Iteration  27: 26054866.888 ops/s
# Warmup Iteration  28: 26028734.701 ops/s
# Warmup Iteration  29: 26086672.101 ops/s
# Warmup Iteration  30: 26028778.958 ops/s
Iteration   1: 25964571.608 ops/s
Iteration   2: 26110289.152 ops/s
Iteration   3: 26071186.908 ops/s
Iteration   4: 25956756.980 ops/s
Iteration   5: 26105484.184 ops/s
Iteration   6: 26124776.736 ops/s
Iteration   7: 26035151.896 ops/s
Iteration   8: 26025653.362 ops/s
Iteration   9: 26036113.650 ops/s
Iteration  10: 26061875.291 ops/s
Iteration  11: 26118950.525 ops/s
Iteration  12: 26166350.658 ops/s
Iteration  13: 26095475.239 ops/s
Iteration  14: 26109472.079 ops/s
Iteration  15: 26085149.877 ops/s
Iteration  16: 26063482.067 ops/s
Iteration  17: 25989238.902 ops/s
Iteration  18: 26038133.766 ops/s
Iteration  19: 26109871.920 ops/s
Iteration  20: 26031934.924 ops/s
Iteration  21: 25997716.969 ops/s
Iteration  22: 26068685.517 ops/s
Iteration  23: 26047829.205 ops/s
Iteration  24: 26143163.745 ops/s
Iteration  25: 26126097.154 ops/s
Iteration  26: 26042578.743 ops/s
Iteration  27: 26109386.296 ops/s
Iteration  28: 26165957.529 ops/s
Iteration  29: 26065200.547 ops/s
Iteration  30: 26048905.481 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_count":
  26070514.697 ±(99.9%) 36201.376 ops/s [Average]
  (min, avg, max) = (25956756.980, 26070514.697, 26166350.658), stdev = 54184.520
  CI (99.9%): [26034313.321, 26106716.073] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_count  thrpt   30  26070514.697 ± 36201.376  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21899594.993 ops/s
# Warmup Iteration   2: 42128374.576 ops/s
# Warmup Iteration   3: 37250618.844 ops/s
# Warmup Iteration   4: 43853231.118 ops/s
# Warmup Iteration   5: 43706841.776 ops/s
# Warmup Iteration   6: 43879534.296 ops/s
# Warmup Iteration   7: 43949539.170 ops/s
# Warmup Iteration   8: 43918717.956 ops/s
# Warmup Iteration   9: 43862201.519 ops/s
# Warmup Iteration  10: 43788452.793 ops/s
# Warmup Iteration  11: 43961698.470 ops/s
# Warmup Iteration  12: 43848691.261 ops/s
# Warmup Iteration  13: 43980965.683 ops/s
# Warmup Iteration  14: 43812649.250 ops/s
# Warmup Iteration  15: 44054038.916 ops/s
# Warmup Iteration  16: 44014920.274 ops/s
# Warmup Iteration  17: 43950619.561 ops/s
# Warmup Iteration  18: 43989362.308 ops/s
# Warmup Iteration  19: 44009560.938 ops/s
# Warmup Iteration  20: 43907274.222 ops/s
# Warmup Iteration  21: 43847188.326 ops/s
# Warmup Iteration  22: 43883788.529 ops/s
# Warmup Iteration  23: 43972083.360 ops/s
# Warmup Iteration  24: 44035664.400 ops/s
# Warmup Iteration  25: 44023164.758 ops/s
# Warmup Iteration  26: 43996831.730 ops/s
# Warmup Iteration  27: 43855186.625 ops/s
# Warmup Iteration  28: 43914343.618 ops/s
# Warmup Iteration  29: 43916196.721 ops/s
# Warmup Iteration  30: 44033094.389 ops/s
Iteration   1: 44053843.016 ops/s
Iteration   2: 43990406.932 ops/s
Iteration   3: 43968383.987 ops/s
Iteration   4: 43906053.112 ops/s
Iteration   5: 43958518.204 ops/s
Iteration   6: 44033434.674 ops/s
Iteration   7: 44057045.302 ops/s
Iteration   8: 43930831.062 ops/s
Iteration   9: 44052645.917 ops/s
Iteration  10: 44039449.175 ops/s
Iteration  11: 43761073.803 ops/s
Iteration  12: 43893484.949 ops/s
Iteration  13: 44001367.015 ops/s
Iteration  14: 44108204.127 ops/s
Iteration  15: 43570046.316 ops/s
Iteration  16: 44078848.299 ops/s
Iteration  17: 43995089.883 ops/s
Iteration  18: 44009935.762 ops/s
Iteration  19: 44055848.181 ops/s
Iteration  20: 44176198.485 ops/s
Iteration  21: 43940761.362 ops/s
Iteration  22: 43927906.530 ops/s
Iteration  23: 43628427.599 ops/s
Iteration  24: 43775413.468 ops/s
Iteration  25: 43857121.806 ops/s
Iteration  26: 43996285.668 ops/s
Iteration  27: 44026398.155 ops/s
Iteration  28: 44055271.853 ops/s
Iteration  29: 43921522.038 ops/s
Iteration  30: 43904483.297 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_detectIfNone":
  43955809.999 ±(99.9%) 88740.974 ops/s [Average]
  (min, avg, max) = (43570046.316, 43955809.999, 44176198.485), stdev = 132823.322
  CI (99.9%): [43867069.025, 44044550.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  43955809.999 ± 88740.974  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21744497.782 ops/s
# Warmup Iteration   2: 40333087.965 ops/s
# Warmup Iteration   3: 34613025.325 ops/s
# Warmup Iteration   4: 40470511.387 ops/s
# Warmup Iteration   5: 40600475.659 ops/s
# Warmup Iteration   6: 40657164.738 ops/s
# Warmup Iteration   7: 40613261.648 ops/s
# Warmup Iteration   8: 40563638.296 ops/s
# Warmup Iteration   9: 40428898.801 ops/s
# Warmup Iteration  10: 40608271.746 ops/s
# Warmup Iteration  11: 40515390.485 ops/s
# Warmup Iteration  12: 40628415.402 ops/s
# Warmup Iteration  13: 40627790.634 ops/s
# Warmup Iteration  14: 40617005.841 ops/s
# Warmup Iteration  15: 40614828.526 ops/s
# Warmup Iteration  16: 40488008.881 ops/s
# Warmup Iteration  17: 40674362.727 ops/s
# Warmup Iteration  18: 40626378.338 ops/s
# Warmup Iteration  19: 40540671.808 ops/s
# Warmup Iteration  20: 40592441.574 ops/s
# Warmup Iteration  21: 40625154.415 ops/s
# Warmup Iteration  22: 40636433.142 ops/s
# Warmup Iteration  23: 40579791.084 ops/s
# Warmup Iteration  24: 40605791.526 ops/s
# Warmup Iteration  25: 40593105.124 ops/s
# Warmup Iteration  26: 40594706.333 ops/s
# Warmup Iteration  27: 40599749.279 ops/s
# Warmup Iteration  28: 40509166.036 ops/s
# Warmup Iteration  29: 40681581.555 ops/s
# Warmup Iteration  30: 40618119.505 ops/s
Iteration   1: 40582223.536 ops/s
Iteration   2: 40527553.104 ops/s
Iteration   3: 40764591.120 ops/s
Iteration   4: 40713715.476 ops/s
Iteration   5: 40714025.985 ops/s
Iteration   6: 40460259.928 ops/s
Iteration   7: 40640183.568 ops/s
Iteration   8: 40663848.158 ops/s
Iteration   9: 40606937.247 ops/s
Iteration  10: 40680615.201 ops/s
Iteration  11: 40623081.246 ops/s
Iteration  12: 40393712.491 ops/s
Iteration  13: 40523886.867 ops/s
Iteration  14: 40150210.502 ops/s
Iteration  15: 40366057.256 ops/s
Iteration  16: 40310627.647 ops/s
Iteration  17: 40659224.256 ops/s
Iteration  18: 40519733.731 ops/s
Iteration  19: 40482068.605 ops/s
Iteration  20: 40620532.383 ops/s
Iteration  21: 40359066.421 ops/s
Iteration  22: 40427188.389 ops/s
Iteration  23: 40592175.071 ops/s
Iteration  24: 40243631.804 ops/s
Iteration  25: 40570676.926 ops/s
Iteration  26: 40362734.819 ops/s
Iteration  27: 40591122.569 ops/s
Iteration  28: 40354824.360 ops/s
Iteration  29: 40685350.540 ops/s
Iteration  30: 40514799.147 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEach":
  40523488.612 ±(99.9%) 101970.229 ops/s [Average]
  (min, avg, max) = (40150210.502, 40523488.612, 40764591.120), stdev = 152624.249
  CI (99.9%): [40421518.383, 40625458.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEach  thrpt   30  40523488.612 ± 101970.229  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21361034.929 ops/s
# Warmup Iteration   2: 38999432.432 ops/s
# Warmup Iteration   3: 32404111.982 ops/s
# Warmup Iteration   4: 38380171.265 ops/s
# Warmup Iteration   5: 37830056.943 ops/s
# Warmup Iteration   6: 38145463.711 ops/s
# Warmup Iteration   7: 38116017.420 ops/s
# Warmup Iteration   8: 38006333.993 ops/s
# Warmup Iteration   9: 38243824.761 ops/s
# Warmup Iteration  10: 38038755.082 ops/s
# Warmup Iteration  11: 38090448.839 ops/s
# Warmup Iteration  12: 37927302.816 ops/s
# Warmup Iteration  13: 38257754.813 ops/s
# Warmup Iteration  14: 38111392.113 ops/s
# Warmup Iteration  15: 38348406.642 ops/s
# Warmup Iteration  16: 37943074.232 ops/s
# Warmup Iteration  17: 38466517.921 ops/s
# Warmup Iteration  18: 38466407.952 ops/s
# Warmup Iteration  19: 38139059.814 ops/s
# Warmup Iteration  20: 38397088.825 ops/s
# Warmup Iteration  21: 38213039.117 ops/s
# Warmup Iteration  22: 38680334.573 ops/s
# Warmup Iteration  23: 38150576.497 ops/s
# Warmup Iteration  24: 38236258.918 ops/s
# Warmup Iteration  25: 38259701.015 ops/s
# Warmup Iteration  26: 38362837.734 ops/s
# Warmup Iteration  27: 38298642.796 ops/s
# Warmup Iteration  28: 38177866.457 ops/s
# Warmup Iteration  29: 38225606.352 ops/s
# Warmup Iteration  30: 38073017.780 ops/s
Iteration   1: 38142423.308 ops/s
Iteration   2: 38466452.025 ops/s
Iteration   3: 38022380.166 ops/s
Iteration   4: 38301633.493 ops/s
Iteration   5: 37795393.534 ops/s
Iteration   6: 38303201.066 ops/s
Iteration   7: 38031751.717 ops/s
Iteration   8: 38359638.038 ops/s
Iteration   9: 38280081.704 ops/s
Iteration  10: 38141016.438 ops/s
Iteration  11: 38325555.110 ops/s
Iteration  12: 37883488.142 ops/s
Iteration  13: 38741421.847 ops/s
Iteration  14: 38298790.377 ops/s
Iteration  15: 38016820.153 ops/s
Iteration  16: 38209784.423 ops/s
Iteration  17: 38193881.661 ops/s
Iteration  18: 37814064.773 ops/s
Iteration  19: 38150363.187 ops/s
Iteration  20: 38694387.549 ops/s
Iteration  21: 38107088.112 ops/s
Iteration  22: 37831978.592 ops/s
Iteration  23: 37640516.548 ops/s
Iteration  24: 38095521.750 ops/s
Iteration  25: 38273916.827 ops/s
Iteration  26: 38239984.586 ops/s
Iteration  27: 38280786.113 ops/s
Iteration  28: 38440270.422 ops/s
Iteration  29: 38351441.159 ops/s
Iteration  30: 38215334.037 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEachWithOccurrences":
  38188312.229 ±(99.9%) 164637.637 ops/s [Average]
  (min, avg, max) = (37640516.548, 38188312.229, 38741421.847), stdev = 246421.882
  CI (99.9%): [38023674.592, 38352949.865] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  38188312.229 ± 164637.637  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33706789.955 ops/s
# Warmup Iteration   2: 67879692.263 ops/s
# Warmup Iteration   3: 56694340.532 ops/s
# Warmup Iteration   4: 66160865.133 ops/s
# Warmup Iteration   5: 66020190.839 ops/s
# Warmup Iteration   6: 66101437.158 ops/s
# Warmup Iteration   7: 66002757.171 ops/s
# Warmup Iteration   8: 66152628.386 ops/s
# Warmup Iteration   9: 65952731.411 ops/s
# Warmup Iteration  10: 66042232.202 ops/s
# Warmup Iteration  11: 65622327.346 ops/s
# Warmup Iteration  12: 65996857.296 ops/s
# Warmup Iteration  13: 66124092.156 ops/s
# Warmup Iteration  14: 65907513.656 ops/s
# Warmup Iteration  15: 66196435.609 ops/s
# Warmup Iteration  16: 65914397.758 ops/s
# Warmup Iteration  17: 65905704.675 ops/s
# Warmup Iteration  18: 65918782.139 ops/s
# Warmup Iteration  19: 65916202.220 ops/s
# Warmup Iteration  20: 65919777.102 ops/s
# Warmup Iteration  21: 66210357.145 ops/s
# Warmup Iteration  22: 65989751.087 ops/s
# Warmup Iteration  23: 66119992.145 ops/s
# Warmup Iteration  24: 66229954.543 ops/s
# Warmup Iteration  25: 65941620.495 ops/s
# Warmup Iteration  26: 66134177.741 ops/s
# Warmup Iteration  27: 65979273.884 ops/s
# Warmup Iteration  28: 65861149.599 ops/s
# Warmup Iteration  29: 66220075.258 ops/s
# Warmup Iteration  30: 66020324.910 ops/s
Iteration   1: 65881249.738 ops/s
Iteration   2: 65932046.374 ops/s
Iteration   3: 66174539.000 ops/s
Iteration   4: 66267058.330 ops/s
Iteration   5: 65964749.901 ops/s
Iteration   6: 65994806.004 ops/s
Iteration   7: 65900801.830 ops/s
Iteration   8: 66101140.445 ops/s
Iteration   9: 66178291.016 ops/s
Iteration  10: 65978443.543 ops/s
Iteration  11: 66039068.309 ops/s
Iteration  12: 66108063.804 ops/s
Iteration  13: 65975069.531 ops/s
Iteration  14: 66232468.590 ops/s
Iteration  15: 66144543.246 ops/s
Iteration  16: 66374090.286 ops/s
Iteration  17: 66001415.983 ops/s
Iteration  18: 65717052.848 ops/s
Iteration  19: 66285206.014 ops/s
Iteration  20: 66046534.419 ops/s
Iteration  21: 66064656.120 ops/s
Iteration  22: 65934122.431 ops/s
Iteration  23: 66176307.578 ops/s
Iteration  24: 66175300.782 ops/s
Iteration  25: 65997203.337 ops/s
Iteration  26: 66230207.375 ops/s
Iteration  27: 66090968.630 ops/s
Iteration  28: 66352817.844 ops/s
Iteration  29: 66237263.714 ops/s
Iteration  30: 65984268.807 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_injectInto":
  66084658.528 ±(99.9%) 101095.532 ops/s [Average]
  (min, avg, max) = (65717052.848, 66084658.528, 66374090.286), stdev = 151315.045
  CI (99.9%): [65983562.995, 66185754.060] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_injectInto  thrpt   30  66084658.528 ± 101095.532  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2702332.772 ops/s
# Warmup Iteration   2: 4310456.565 ops/s
# Warmup Iteration   3: 5080891.951 ops/s
# Warmup Iteration   4: 5075452.949 ops/s
# Warmup Iteration   5: 5055079.993 ops/s
# Warmup Iteration   6: 5058795.600 ops/s
# Warmup Iteration   7: 5056716.169 ops/s
# Warmup Iteration   8: 5078318.604 ops/s
# Warmup Iteration   9: 5059389.270 ops/s
# Warmup Iteration  10: 5041863.615 ops/s
# Warmup Iteration  11: 5045590.729 ops/s
# Warmup Iteration  12: 5056774.982 ops/s
# Warmup Iteration  13: 5066813.364 ops/s
# Warmup Iteration  14: 5074799.422 ops/s
# Warmup Iteration  15: 5044756.898 ops/s
# Warmup Iteration  16: 5037041.975 ops/s
# Warmup Iteration  17: 5070563.024 ops/s
# Warmup Iteration  18: 5036423.097 ops/s
# Warmup Iteration  19: 5053892.718 ops/s
# Warmup Iteration  20: 5054837.438 ops/s
# Warmup Iteration  21: 5041410.726 ops/s
# Warmup Iteration  22: 5078452.375 ops/s
# Warmup Iteration  23: 5087085.806 ops/s
# Warmup Iteration  24: 5045574.130 ops/s
# Warmup Iteration  25: 5053294.362 ops/s
# Warmup Iteration  26: 5049646.520 ops/s
# Warmup Iteration  27: 5036755.757 ops/s
# Warmup Iteration  28: 5070215.214 ops/s
# Warmup Iteration  29: 5053163.729 ops/s
# Warmup Iteration  30: 5037992.118 ops/s
Iteration   1: 5045989.330 ops/s
Iteration   2: 5043236.575 ops/s
Iteration   3: 5065074.052 ops/s
Iteration   4: 5026113.969 ops/s
Iteration   5: 5039991.303 ops/s
Iteration   6: 5038783.597 ops/s
Iteration   7: 5062087.384 ops/s
Iteration   8: 5060581.785 ops/s
Iteration   9: 5059356.390 ops/s
Iteration  10: 5081986.587 ops/s
Iteration  11: 5057864.071 ops/s
Iteration  12: 5085316.716 ops/s
Iteration  13: 5055380.257 ops/s
Iteration  14: 5061308.004 ops/s
Iteration  15: 5074803.138 ops/s
Iteration  16: 5062619.591 ops/s
Iteration  17: 5070282.535 ops/s
Iteration  18: 5057384.686 ops/s
Iteration  19: 5040282.742 ops/s
Iteration  20: 5055613.138 ops/s
Iteration  21: 5044065.220 ops/s
Iteration  22: 5062174.469 ops/s
Iteration  23: 5041029.582 ops/s
Iteration  24: 5087467.563 ops/s
Iteration  25: 5077155.304 ops/s
Iteration  26: 5061955.354 ops/s
Iteration  27: 5075031.462 ops/s
Iteration  28: 5049995.217 ops/s
Iteration  29: 5068201.993 ops/s
Iteration  30: 5084091.410 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_isEmpty":
  5059840.781 ±(99.9%) 10416.712 ops/s [Average]
  (min, avg, max) = (5026113.969, 5059840.781, 5087467.563), stdev = 15591.246
  CI (99.9%): [5049424.068, 5070257.493] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_isEmpty  thrpt   30  5059840.781 ± 10416.712  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 787122.567 ops/s
# Warmup Iteration   2: 794869.005 ops/s
# Warmup Iteration   3: 1051181.525 ops/s
# Warmup Iteration   4: 1063088.037 ops/s
# Warmup Iteration   5: 1058239.062 ops/s
# Warmup Iteration   6: 1056424.730 ops/s
# Warmup Iteration   7: 1061751.812 ops/s
# Warmup Iteration   8: 1062248.545 ops/s
# Warmup Iteration   9: 1059472.470 ops/s
# Warmup Iteration  10: 1061142.972 ops/s
# Warmup Iteration  11: 1064798.633 ops/s
# Warmup Iteration  12: 886017.480 ops/s
# Warmup Iteration  13: 1060890.806 ops/s
# Warmup Iteration  14: 1056836.551 ops/s
# Warmup Iteration  15: 1058116.071 ops/s
# Warmup Iteration  16: 1058023.626 ops/s
# Warmup Iteration  17: 1129912.288 ops/s
# Warmup Iteration  18: 1133196.124 ops/s
# Warmup Iteration  19: 1129448.460 ops/s
# Warmup Iteration  20: 1128630.652 ops/s
# Warmup Iteration  21: 1130809.326 ops/s
# Warmup Iteration  22: 1129364.255 ops/s
# Warmup Iteration  23: 1133182.229 ops/s
# Warmup Iteration  24: 1128191.240 ops/s
# Warmup Iteration  25: 1130380.527 ops/s
# Warmup Iteration  26: 1130341.156 ops/s
# Warmup Iteration  27: 1129421.938 ops/s
# Warmup Iteration  28: 1130157.480 ops/s
# Warmup Iteration  29: 1131050.284 ops/s
# Warmup Iteration  30: 1131406.866 ops/s
Iteration   1: 1131309.652 ops/s
Iteration   2: 1130911.557 ops/s
Iteration   3: 1129003.884 ops/s
Iteration   4: 1133016.309 ops/s
Iteration   5: 1131769.353 ops/s
Iteration   6: 1134481.107 ops/s
Iteration   7: 1129528.516 ops/s
Iteration   8: 1130895.330 ops/s
Iteration   9: 1130662.910 ops/s
Iteration  10: 1131982.214 ops/s
Iteration  11: 1130667.166 ops/s
Iteration  12: 1132313.731 ops/s
Iteration  13: 1134879.746 ops/s
Iteration  14: 1132312.147 ops/s
Iteration  15: 1128702.991 ops/s
Iteration  16: 1131477.881 ops/s
Iteration  17: 1134609.729 ops/s
Iteration  18: 1130273.258 ops/s
Iteration  19: 1132418.826 ops/s
Iteration  20: 1132225.117 ops/s
Iteration  21: 1132030.511 ops/s
Iteration  22: 1127897.159 ops/s
Iteration  23: 1136184.321 ops/s
Iteration  24: 1129717.186 ops/s
Iteration  25: 1134716.764 ops/s
Iteration  26: 1133625.127 ops/s
Iteration  27: 1135149.315 ops/s
Iteration  28: 1130673.602 ops/s
Iteration  29: 1131207.821 ops/s
Iteration  30: 1133017.868 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws":
  1131922.037 ±(99.9%) 1365.610 ops/s [Average]
  (min, avg, max) = (1127897.159, 1131922.037, 1136184.321), stdev = 2043.980
  CI (99.9%): [1130556.427, 1133287.646] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  1131922.037 ± 1365.610  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_emptyList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_emptyList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 854008.015 ops/s
# Warmup Iteration   2: 868086.222 ops/s
# Warmup Iteration   3: 1015119.063 ops/s
# Warmup Iteration   4: 1087078.438 ops/s
# Warmup Iteration   5: 1092626.073 ops/s
# Warmup Iteration   6: 1092220.197 ops/s
# Warmup Iteration   7: 1084798.383 ops/s
# Warmup Iteration   8: 1087613.431 ops/s
# Warmup Iteration   9: 1091258.288 ops/s
# Warmup Iteration  10: 1093027.311 ops/s
# Warmup Iteration  11: 1092602.117 ops/s
# Warmup Iteration  12: 1089882.235 ops/s
# Warmup Iteration  13: 1092945.994 ops/s
# Warmup Iteration  14: 916579.604 ops/s
# Warmup Iteration  15: 1090854.421 ops/s
# Warmup Iteration  16: 1089488.323 ops/s
# Warmup Iteration  17: 1164343.526 ops/s
# Warmup Iteration  18: 1166530.396 ops/s
# Warmup Iteration  19: 1164646.460 ops/s
# Warmup Iteration  20: 1160135.352 ops/s
# Warmup Iteration  21: 1162785.657 ops/s
# Warmup Iteration  22: 1164334.721 ops/s
# Warmup Iteration  23: 1166431.411 ops/s
# Warmup Iteration  24: 1163671.142 ops/s
# Warmup Iteration  25: 1165023.057 ops/s
# Warmup Iteration  26: 1166861.904 ops/s
# Warmup Iteration  27: 1166133.101 ops/s
# Warmup Iteration  28: 1164551.006 ops/s
# Warmup Iteration  29: 1161043.732 ops/s
# Warmup Iteration  30: 1165518.024 ops/s
Iteration   1: 1163236.474 ops/s
Iteration   2: 1164413.124 ops/s
Iteration   3: 1162756.049 ops/s
Iteration   4: 1164891.291 ops/s
Iteration   5: 1161870.226 ops/s
Iteration   6: 1166541.588 ops/s
Iteration   7: 1164391.380 ops/s
Iteration   8: 1167519.296 ops/s
Iteration   9: 1166382.052 ops/s
Iteration  10: 1164795.116 ops/s
Iteration  11: 1155383.946 ops/s
Iteration  12: 1163750.868 ops/s
Iteration  13: 1166522.263 ops/s
Iteration  14: 1159205.924 ops/s
Iteration  15: 1166608.491 ops/s
Iteration  16: 1162406.776 ops/s
Iteration  17: 1167164.543 ops/s
Iteration  18: 1167291.255 ops/s
Iteration  19: 1163001.525 ops/s
Iteration  20: 1166490.240 ops/s
Iteration  21: 1166373.173 ops/s
Iteration  22: 1161301.948 ops/s
Iteration  23: 1165820.789 ops/s
Iteration  24: 1164715.456 ops/s
Iteration  25: 1164548.061 ops/s
Iteration  26: 1162960.168 ops/s
Iteration  27: 1165291.772 ops/s
Iteration  28: 1163858.011 ops/s
Iteration  29: 1163991.844 ops/s
Iteration  30: 1168551.400 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_emptyList":
  1164401.168 ±(99.9%) 1796.437 ops/s [Average]
  (min, avg, max) = (1155383.946, 1164401.168, 1168551.400), stdev = 2688.823
  CI (99.9%): [1162604.731, 1166197.606] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_emptyList  thrpt   30  1164401.168 ± 1796.437  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 787288.552 ops/s
# Warmup Iteration   2: 806042.194 ops/s
# Warmup Iteration   3: 1002051.742 ops/s
# Warmup Iteration   4: 1023796.235 ops/s
# Warmup Iteration   5: 1023347.854 ops/s
# Warmup Iteration   6: 1024101.845 ops/s
# Warmup Iteration   7: 1022154.820 ops/s
# Warmup Iteration   8: 1024523.590 ops/s
# Warmup Iteration   9: 1017470.205 ops/s
# Warmup Iteration  10: 1022061.101 ops/s
# Warmup Iteration  11: 1020671.988 ops/s
# Warmup Iteration  12: 1014176.881 ops/s
# Warmup Iteration  13: 873556.207 ops/s
# Warmup Iteration  14: 1024799.930 ops/s
# Warmup Iteration  15: 1020477.907 ops/s
# Warmup Iteration  16: 1020042.196 ops/s
# Warmup Iteration  17: 1087374.904 ops/s
# Warmup Iteration  18: 1086774.023 ops/s
# Warmup Iteration  19: 1088402.550 ops/s
# Warmup Iteration  20: 1085635.861 ops/s
# Warmup Iteration  21: 1084647.424 ops/s
# Warmup Iteration  22: 1088930.178 ops/s
# Warmup Iteration  23: 1089519.944 ops/s
# Warmup Iteration  24: 1085404.548 ops/s
# Warmup Iteration  25: 1086247.219 ops/s
# Warmup Iteration  26: 1082079.611 ops/s
# Warmup Iteration  27: 1083161.641 ops/s
# Warmup Iteration  28: 1084507.965 ops/s
# Warmup Iteration  29: 1087715.687 ops/s
# Warmup Iteration  30: 1082998.807 ops/s
Iteration   1: 1086182.956 ops/s
Iteration   2: 1086034.468 ops/s
Iteration   3: 1083104.675 ops/s
Iteration   4: 1081963.711 ops/s
Iteration   5: 1085710.994 ops/s
Iteration   6: 1088396.838 ops/s
Iteration   7: 1086300.069 ops/s
Iteration   8: 1080805.453 ops/s
Iteration   9: 1084573.010 ops/s
Iteration  10: 1084967.773 ops/s
Iteration  11: 1084669.960 ops/s
Iteration  12: 1083579.101 ops/s
Iteration  13: 1086216.425 ops/s
Iteration  14: 1085728.582 ops/s
Iteration  15: 1087113.942 ops/s
Iteration  16: 1078851.918 ops/s
Iteration  17: 1085924.816 ops/s
Iteration  18: 1082740.462 ops/s
Iteration  19: 1083022.403 ops/s
Iteration  20: 1086252.027 ops/s
Iteration  21: 1082529.694 ops/s
Iteration  22: 1084519.391 ops/s
Iteration  23: 1085188.064 ops/s
Iteration  24: 1084028.235 ops/s
Iteration  25: 1089331.403 ops/s
Iteration  26: 1086797.892 ops/s
Iteration  27: 1084225.707 ops/s
Iteration  28: 1086369.643 ops/s
Iteration  29: 1081985.984 ops/s
Iteration  30: 1084789.249 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection":
  1084730.162 ±(99.9%) 1485.495 ops/s [Average]
  (min, avg, max) = (1078851.918, 1084730.162, 1089331.403), stdev = 2223.420
  CI (99.9%): [1083244.666, 1086215.657] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_iterator_throws_non_empty_collection  thrpt   30  1084730.162 ± 1485.495  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1033198.471 ops/s
# Warmup Iteration   2: 2231306.668 ops/s
# Warmup Iteration   3: 2205260.854 ops/s
# Warmup Iteration   4: 1860697.855 ops/s
# Warmup Iteration   5: 2243442.956 ops/s
# Warmup Iteration   6: 2239237.055 ops/s
# Warmup Iteration   7: 2236742.192 ops/s
# Warmup Iteration   8: 2234154.853 ops/s
# Warmup Iteration   9: 2252892.028 ops/s
# Warmup Iteration  10: 2244752.541 ops/s
# Warmup Iteration  11: 2248206.101 ops/s
# Warmup Iteration  12: 2247679.874 ops/s
# Warmup Iteration  13: 2232080.545 ops/s
# Warmup Iteration  14: 2239222.481 ops/s
# Warmup Iteration  15: 2245145.889 ops/s
# Warmup Iteration  16: 2235945.305 ops/s
# Warmup Iteration  17: 2241651.910 ops/s
# Warmup Iteration  18: 2242081.080 ops/s
# Warmup Iteration  19: 2236956.649 ops/s
# Warmup Iteration  20: 2232650.882 ops/s
# Warmup Iteration  21: 2234983.540 ops/s
# Warmup Iteration  22: 2240643.817 ops/s
# Warmup Iteration  23: 2239234.362 ops/s
# Warmup Iteration  24: 2233074.685 ops/s
# Warmup Iteration  25: 2228985.797 ops/s
# Warmup Iteration  26: 2232867.518 ops/s
# Warmup Iteration  27: 2264975.177 ops/s
# Warmup Iteration  28: 2237289.493 ops/s
# Warmup Iteration  29: 2244510.729 ops/s
# Warmup Iteration  30: 2241959.577 ops/s
Iteration   1: 2242576.684 ops/s
Iteration   2: 2240994.848 ops/s
Iteration   3: 2237612.159 ops/s
Iteration   4: 2231714.948 ops/s
Iteration   5: 2246737.722 ops/s
Iteration   6: 2231019.624 ops/s
Iteration   7: 2241684.140 ops/s
Iteration   8: 2230999.744 ops/s
Iteration   9: 2238365.502 ops/s
Iteration  10: 2247412.202 ops/s
Iteration  11: 2227873.313 ops/s
Iteration  12: 2250575.120 ops/s
Iteration  13: 2241998.538 ops/s
Iteration  14: 2254064.021 ops/s
Iteration  15: 2224071.761 ops/s
Iteration  16: 2242532.994 ops/s
Iteration  17: 2231427.188 ops/s
Iteration  18: 2248579.853 ops/s
Iteration  19: 2238581.717 ops/s
Iteration  20: 2239349.586 ops/s
Iteration  21: 2227282.270 ops/s
Iteration  22: 2233120.626 ops/s
Iteration  23: 2237241.134 ops/s
Iteration  24: 2237351.010 ops/s
Iteration  25: 2238301.875 ops/s
Iteration  26: 2225710.028 ops/s
Iteration  27: 2261226.741 ops/s
Iteration  28: 2249068.097 ops/s
Iteration  29: 2235738.718 ops/s
Iteration  30: 2247843.090 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_makeString":
  2239368.508 ±(99.9%) 5886.396 ops/s [Average]
  (min, avg, max) = (2224071.761, 2239368.508, 2261226.741), stdev = 8810.482
  CI (99.9%): [2233482.112, 2245254.905] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_makeString  thrpt   30  2239368.508 ± 5886.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16311994.798 ops/s
# Warmup Iteration   2: 31124382.566 ops/s
# Warmup Iteration   3: 25647479.368 ops/s
# Warmup Iteration   4: 30067203.066 ops/s
# Warmup Iteration   5: 29898798.382 ops/s
# Warmup Iteration   6: 29885592.786 ops/s
# Warmup Iteration   7: 29973387.539 ops/s
# Warmup Iteration   8: 29992425.042 ops/s
# Warmup Iteration   9: 30025041.403 ops/s
# Warmup Iteration  10: 29937200.765 ops/s
# Warmup Iteration  11: 30024822.959 ops/s
# Warmup Iteration  12: 29996444.576 ops/s
# Warmup Iteration  13: 29996781.907 ops/s
# Warmup Iteration  14: 30012411.700 ops/s
# Warmup Iteration  15: 29948778.090 ops/s
# Warmup Iteration  16: 30039972.542 ops/s
# Warmup Iteration  17: 30029182.929 ops/s
# Warmup Iteration  18: 30054563.573 ops/s
# Warmup Iteration  19: 30038716.988 ops/s
# Warmup Iteration  20: 30043587.165 ops/s
# Warmup Iteration  21: 30159547.738 ops/s
# Warmup Iteration  22: 30096558.520 ops/s
# Warmup Iteration  23: 30061112.385 ops/s
# Warmup Iteration  24: 30034439.025 ops/s
# Warmup Iteration  25: 30139277.176 ops/s
# Warmup Iteration  26: 29988586.520 ops/s
# Warmup Iteration  27: 30138984.968 ops/s
# Warmup Iteration  28: 30142099.530 ops/s
# Warmup Iteration  29: 30129812.380 ops/s
# Warmup Iteration  30: 30109577.927 ops/s
Iteration   1: 30131690.185 ops/s
Iteration   2: 30075269.036 ops/s
Iteration   3: 30057339.282 ops/s
Iteration   4: 30048052.948 ops/s
Iteration   5: 29962897.010 ops/s
Iteration   6: 29887355.811 ops/s
Iteration   7: 30056570.509 ops/s
Iteration   8: 30006474.816 ops/s
Iteration   9: 30060132.470 ops/s
Iteration  10: 29879447.857 ops/s
Iteration  11: 30060281.167 ops/s
Iteration  12: 30033825.927 ops/s
Iteration  13: 29982720.298 ops/s
Iteration  14: 30097001.705 ops/s
Iteration  15: 30018540.783 ops/s
Iteration  16: 30209362.116 ops/s
Iteration  17: 30108346.989 ops/s
Iteration  18: 30097495.400 ops/s
Iteration  19: 30025340.533 ops/s
Iteration  20: 29985800.018 ops/s
Iteration  21: 29916823.815 ops/s
Iteration  22: 29980594.426 ops/s
Iteration  23: 30112812.364 ops/s
Iteration  24: 30011725.184 ops/s
Iteration  25: 30067994.546 ops/s
Iteration  26: 30139781.456 ops/s
Iteration  27: 30084735.362 ops/s
Iteration  28: 30022288.261 ops/s
Iteration  29: 30035208.557 ops/s
Iteration  30: 30094086.870 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollection":
  30041666.523 ±(99.9%) 48815.957 ops/s [Average]
  (min, avg, max) = (29879447.857, 30041666.523, 30209362.116), stdev = 73065.431
  CI (99.9%): [29992850.567, 30090482.480] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollection  thrpt   30  30041666.523 ± 48815.957  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollectionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollectionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8963259.872 ops/s
# Warmup Iteration   2: 14305615.274 ops/s
# Warmup Iteration   3: 16602844.122 ops/s
# Warmup Iteration   4: 16555698.542 ops/s
# Warmup Iteration   5: 16575225.913 ops/s
# Warmup Iteration   6: 16601244.972 ops/s
# Warmup Iteration   7: 16488353.134 ops/s
# Warmup Iteration   8: 16540892.228 ops/s
# Warmup Iteration   9: 16603877.715 ops/s
# Warmup Iteration  10: 16573123.344 ops/s
# Warmup Iteration  11: 16496795.210 ops/s
# Warmup Iteration  12: 16577008.686 ops/s
# Warmup Iteration  13: 16551144.827 ops/s
# Warmup Iteration  14: 16588040.445 ops/s
# Warmup Iteration  15: 16507686.185 ops/s
# Warmup Iteration  16: 16470436.519 ops/s
# Warmup Iteration  17: 16560144.092 ops/s
# Warmup Iteration  18: 16601040.477 ops/s
# Warmup Iteration  19: 16599340.089 ops/s
# Warmup Iteration  20: 16524869.540 ops/s
# Warmup Iteration  21: 16598388.681 ops/s
# Warmup Iteration  22: 16431078.008 ops/s
# Warmup Iteration  23: 16500179.344 ops/s
# Warmup Iteration  24: 16551502.469 ops/s
# Warmup Iteration  25: 16452542.721 ops/s
# Warmup Iteration  26: 16502472.905 ops/s
# Warmup Iteration  27: 16597587.805 ops/s
# Warmup Iteration  28: 16558973.664 ops/s
# Warmup Iteration  29: 16585022.317 ops/s
# Warmup Iteration  30: 16621909.194 ops/s
Iteration   1: 16598047.852 ops/s
Iteration   2: 16565136.390 ops/s
Iteration   3: 16605986.929 ops/s
Iteration   4: 16647957.363 ops/s
Iteration   5: 16556072.539 ops/s
Iteration   6: 16616688.330 ops/s
Iteration   7: 16624556.571 ops/s
Iteration   8: 16617273.021 ops/s
Iteration   9: 16630074.059 ops/s
Iteration  10: 16521898.501 ops/s
Iteration  11: 16544050.435 ops/s
Iteration  12: 16562525.439 ops/s
Iteration  13: 16547263.722 ops/s
Iteration  14: 16597782.903 ops/s
Iteration  15: 16490536.796 ops/s
Iteration  16: 16537792.133 ops/s
Iteration  17: 16534907.904 ops/s
Iteration  18: 16618603.943 ops/s
Iteration  19: 16544882.002 ops/s
Iteration  20: 16409046.200 ops/s
Iteration  21: 16647822.803 ops/s
Iteration  22: 16494637.321 ops/s
Iteration  23: 16551289.664 ops/s
Iteration  24: 16519448.241 ops/s
Iteration  25: 16569596.369 ops/s
Iteration  26: 16574444.244 ops/s
Iteration  27: 16589733.722 ops/s
Iteration  28: 16553819.796 ops/s
Iteration  29: 16602841.842 ops/s
Iteration  30: 16567291.852 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollectionWith":
  16568066.963 ±(99.9%) 34533.328 ops/s [Average]
  (min, avg, max) = (16409046.200, 16568066.963, 16647957.363), stdev = 51687.863
  CI (99.9%): [16533533.635, 16602600.291] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newCollectionWith  thrpt   30  16568066.963 ± 34533.328  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1332713.455 ops/s
# Warmup Iteration   2: 2769126.734 ops/s
# Warmup Iteration   3: 2927979.160 ops/s
# Warmup Iteration   4: 2927411.252 ops/s
# Warmup Iteration   5: 2400137.740 ops/s
# Warmup Iteration   6: 2927304.639 ops/s
# Warmup Iteration   7: 2931987.446 ops/s
# Warmup Iteration   8: 2917935.706 ops/s
# Warmup Iteration   9: 2932053.837 ops/s
# Warmup Iteration  10: 2937105.319 ops/s
# Warmup Iteration  11: 2915692.833 ops/s
# Warmup Iteration  12: 2928440.200 ops/s
# Warmup Iteration  13: 2919240.745 ops/s
# Warmup Iteration  14: 2935965.084 ops/s
# Warmup Iteration  15: 2928156.478 ops/s
# Warmup Iteration  16: 2929365.185 ops/s
# Warmup Iteration  17: 2932370.793 ops/s
# Warmup Iteration  18: 2928365.565 ops/s
# Warmup Iteration  19: 2931536.902 ops/s
# Warmup Iteration  20: 2931766.806 ops/s
# Warmup Iteration  21: 2933794.024 ops/s
# Warmup Iteration  22: 2933446.136 ops/s
# Warmup Iteration  23: 2928888.498 ops/s
# Warmup Iteration  24: 2929466.238 ops/s
# Warmup Iteration  25: 2932924.679 ops/s
# Warmup Iteration  26: 2929983.736 ops/s
# Warmup Iteration  27: 2935015.674 ops/s
# Warmup Iteration  28: 2930519.060 ops/s
# Warmup Iteration  29: 2926647.603 ops/s
# Warmup Iteration  30: 2922645.520 ops/s
Iteration   1: 2931279.202 ops/s
Iteration   2: 2916004.271 ops/s
Iteration   3: 2922207.559 ops/s
Iteration   4: 2919427.424 ops/s
Iteration   5: 2935685.653 ops/s
Iteration   6: 2924466.878 ops/s
Iteration   7: 2926634.305 ops/s
Iteration   8: 2931792.226 ops/s
Iteration   9: 2923553.753 ops/s
Iteration  10: 2929753.542 ops/s
Iteration  11: 2927385.340 ops/s
Iteration  12: 2934070.106 ops/s
Iteration  13: 2929104.563 ops/s
Iteration  14: 2924339.694 ops/s
Iteration  15: 2939955.993 ops/s
Iteration  16: 2924303.383 ops/s
Iteration  17: 2923582.554 ops/s
Iteration  18: 2923841.087 ops/s
Iteration  19: 2938155.224 ops/s
Iteration  20: 2922018.234 ops/s
Iteration  21: 2925878.985 ops/s
Iteration  22: 2920437.511 ops/s
Iteration  23: 2927023.877 ops/s
Iteration  24: 2919461.383 ops/s
Iteration  25: 2928568.686 ops/s
Iteration  26: 2923269.153 ops/s
Iteration  27: 2922255.638 ops/s
Iteration  28: 2923450.825 ops/s
Iteration  29: 2923882.465 ops/s
Iteration  30: 2926341.102 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithAll":
  2926271.020 ±(99.9%) 3718.820 ops/s [Average]
  (min, avg, max) = (2916004.271, 2926271.020, 2939955.993), stdev = 5566.155
  CI (99.9%): [2922552.201, 2929989.840] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithAll  thrpt   30  2926271.020 ± 3718.820  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithout$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithout

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1326933.393 ops/s
# Warmup Iteration   2: 3097776.929 ops/s
# Warmup Iteration   3: 3263816.837 ops/s
# Warmup Iteration   4: 3282842.987 ops/s
# Warmup Iteration   5: 2690122.400 ops/s
# Warmup Iteration   6: 3226295.135 ops/s
# Warmup Iteration   7: 3272072.985 ops/s
# Warmup Iteration   8: 3261785.664 ops/s
# Warmup Iteration   9: 3257057.809 ops/s
# Warmup Iteration  10: 3264563.701 ops/s
# Warmup Iteration  11: 3259201.248 ops/s
# Warmup Iteration  12: 3267361.835 ops/s
# Warmup Iteration  13: 3264029.312 ops/s
# Warmup Iteration  14: 3260976.317 ops/s
# Warmup Iteration  15: 3264723.380 ops/s
# Warmup Iteration  16: 3263806.543 ops/s
# Warmup Iteration  17: 3321049.103 ops/s
# Warmup Iteration  18: 3326146.801 ops/s
# Warmup Iteration  19: 3327010.334 ops/s
# Warmup Iteration  20: 3323441.174 ops/s
# Warmup Iteration  21: 3320770.057 ops/s
# Warmup Iteration  22: 3327794.989 ops/s
# Warmup Iteration  23: 3333461.045 ops/s
# Warmup Iteration  24: 3325789.835 ops/s
# Warmup Iteration  25: 3325034.198 ops/s
# Warmup Iteration  26: 3327919.619 ops/s
# Warmup Iteration  27: 3332877.384 ops/s
# Warmup Iteration  28: 3329492.538 ops/s
# Warmup Iteration  29: 3325793.581 ops/s
# Warmup Iteration  30: 3327034.413 ops/s
Iteration   1: 3331966.440 ops/s
Iteration   2: 3332915.788 ops/s
Iteration   3: 3333657.244 ops/s
Iteration   4: 3319203.495 ops/s
Iteration   5: 3319223.273 ops/s
Iteration   6: 3330746.279 ops/s
Iteration   7: 3332218.606 ops/s
Iteration   8: 3339696.613 ops/s
Iteration   9: 3316263.961 ops/s
Iteration  10: 3318089.931 ops/s
Iteration  11: 3328634.178 ops/s
Iteration  12: 3320673.215 ops/s
Iteration  13: 3329911.516 ops/s
Iteration  14: 3333505.858 ops/s
Iteration  15: 3321805.027 ops/s
Iteration  16: 3325590.694 ops/s
Iteration  17: 3331522.593 ops/s
Iteration  18: 3322286.879 ops/s
Iteration  19: 3319016.581 ops/s
Iteration  20: 3325001.785 ops/s
Iteration  21: 3324916.898 ops/s
Iteration  22: 3331157.577 ops/s
Iteration  23: 3315438.992 ops/s
Iteration  24: 3326102.322 ops/s
Iteration  25: 3330248.348 ops/s
Iteration  26: 3318328.530 ops/s
Iteration  27: 3334295.971 ops/s
Iteration  28: 3340704.907 ops/s
Iteration  29: 3330670.152 ops/s
Iteration  30: 3320817.856 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithout":
  3326820.384 ±(99.9%) 4623.581 ops/s [Average]
  (min, avg, max) = (3315438.992, 3326820.384, 3340704.907), stdev = 6920.359
  CI (99.9%): [3322196.803, 3331443.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithout  thrpt   30  3326820.384 ± 4623.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7618816.719 ops/s
# Warmup Iteration   2: 17150586.972 ops/s
# Warmup Iteration   3: 17458561.956 ops/s
# Warmup Iteration   4: 14417461.058 ops/s
# Warmup Iteration   5: 17494377.403 ops/s
# Warmup Iteration   6: 17480088.621 ops/s
# Warmup Iteration   7: 17479386.295 ops/s
# Warmup Iteration   8: 17466735.788 ops/s
# Warmup Iteration   9: 17452614.440 ops/s
# Warmup Iteration  10: 17479765.312 ops/s
# Warmup Iteration  11: 17472923.368 ops/s
# Warmup Iteration  12: 17422865.721 ops/s
# Warmup Iteration  13: 17430255.486 ops/s
# Warmup Iteration  14: 17427296.343 ops/s
# Warmup Iteration  15: 17472309.538 ops/s
# Warmup Iteration  16: 17457442.718 ops/s
# Warmup Iteration  17: 17585256.166 ops/s
# Warmup Iteration  18: 17579098.771 ops/s
# Warmup Iteration  19: 17635779.300 ops/s
# Warmup Iteration  20: 17574068.117 ops/s
# Warmup Iteration  21: 17592341.945 ops/s
# Warmup Iteration  22: 17596059.285 ops/s
# Warmup Iteration  23: 17644125.838 ops/s
# Warmup Iteration  24: 17645434.717 ops/s
# Warmup Iteration  25: 17605847.307 ops/s
# Warmup Iteration  26: 17605307.240 ops/s
# Warmup Iteration  27: 17637512.090 ops/s
# Warmup Iteration  28: 17615951.976 ops/s
# Warmup Iteration  29: 17651432.232 ops/s
# Warmup Iteration  30: 17606794.150 ops/s
Iteration   1: 17658182.797 ops/s
Iteration   2: 17593878.581 ops/s
Iteration   3: 17600458.930 ops/s
Iteration   4: 17631732.886 ops/s
Iteration   5: 17598195.552 ops/s
Iteration   6: 17608222.997 ops/s
Iteration   7: 17647636.841 ops/s
Iteration   8: 17653072.726 ops/s
Iteration   9: 17641636.251 ops/s
Iteration  10: 17608224.495 ops/s
Iteration  11: 17622187.721 ops/s
Iteration  12: 17591834.231 ops/s
Iteration  13: 17573161.346 ops/s
Iteration  14: 17623182.711 ops/s
Iteration  15: 17604779.102 ops/s
Iteration  16: 17635612.370 ops/s
Iteration  17: 17644529.359 ops/s
Iteration  18: 17644387.801 ops/s
Iteration  19: 17613937.412 ops/s
Iteration  20: 17589579.597 ops/s
Iteration  21: 17619857.135 ops/s
Iteration  22: 17657236.656 ops/s
Iteration  23: 17587049.818 ops/s
Iteration  24: 17648644.760 ops/s
Iteration  25: 17659600.349 ops/s
Iteration  26: 17626138.188 ops/s
Iteration  27: 17581458.038 ops/s
Iteration  28: 17636915.060 ops/s
Iteration  29: 17663658.961 ops/s
Iteration  30: 17637314.968 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithoutAll":
  17623410.255 ±(99.9%) 17502.341 ops/s [Average]
  (min, avg, max) = (17573161.346, 17623410.255, 17663658.961), stdev = 26196.682
  CI (99.9%): [17605907.913, 17640912.596] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_newWithoutAll  thrpt   30  17623410.255 ± 17502.341  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6971385.164 ops/s
# Warmup Iteration   2: 13486155.395 ops/s
# Warmup Iteration   3: 11402669.271 ops/s
# Warmup Iteration   4: 13423374.455 ops/s
# Warmup Iteration   5: 13453992.556 ops/s
# Warmup Iteration   6: 13457939.221 ops/s
# Warmup Iteration   7: 13427729.495 ops/s
# Warmup Iteration   8: 13425140.757 ops/s
# Warmup Iteration   9: 13454428.129 ops/s
# Warmup Iteration  10: 13418535.454 ops/s
# Warmup Iteration  11: 13431953.425 ops/s
# Warmup Iteration  12: 13439368.946 ops/s
# Warmup Iteration  13: 13466740.752 ops/s
# Warmup Iteration  14: 13412733.946 ops/s
# Warmup Iteration  15: 13431027.180 ops/s
# Warmup Iteration  16: 13436516.077 ops/s
# Warmup Iteration  17: 13494759.461 ops/s
# Warmup Iteration  18: 13434317.788 ops/s
# Warmup Iteration  19: 13442729.674 ops/s
# Warmup Iteration  20: 13409338.571 ops/s
# Warmup Iteration  21: 13451987.421 ops/s
# Warmup Iteration  22: 13418205.222 ops/s
# Warmup Iteration  23: 13432705.605 ops/s
# Warmup Iteration  24: 13435814.129 ops/s
# Warmup Iteration  25: 13440736.894 ops/s
# Warmup Iteration  26: 13433427.872 ops/s
# Warmup Iteration  27: 13423447.825 ops/s
# Warmup Iteration  28: 13463882.541 ops/s
# Warmup Iteration  29: 13434189.396 ops/s
# Warmup Iteration  30: 13455819.766 ops/s
Iteration   1: 13431325.753 ops/s
Iteration   2: 13408379.639 ops/s
Iteration   3: 13408080.704 ops/s
Iteration   4: 13493807.805 ops/s
Iteration   5: 13421202.175 ops/s
Iteration   6: 13453261.055 ops/s
Iteration   7: 13437271.702 ops/s
Iteration   8: 13440538.929 ops/s
Iteration   9: 13468329.837 ops/s
Iteration  10: 13457365.138 ops/s
Iteration  11: 13381335.492 ops/s
Iteration  12: 13422155.908 ops/s
Iteration  13: 13450436.967 ops/s
Iteration  14: 13476672.727 ops/s
Iteration  15: 13517773.112 ops/s
Iteration  16: 13463329.857 ops/s
Iteration  17: 13481678.950 ops/s
Iteration  18: 13449796.031 ops/s
Iteration  19: 13433135.032 ops/s
Iteration  20: 13446969.687 ops/s
Iteration  21: 13478793.229 ops/s
Iteration  22: 13481022.437 ops/s
Iteration  23: 13416990.978 ops/s
Iteration  24: 13394920.285 ops/s
Iteration  25: 13445334.406 ops/s
Iteration  26: 13477644.400 ops/s
Iteration  27: 13507371.825 ops/s
Iteration  28: 13432531.233 ops/s
Iteration  29: 13396940.215 ops/s
Iteration  30: 13372025.444 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_noneSatisfy":
  13444880.698 ±(99.9%) 24157.899 ops/s [Average]
  (min, avg, max) = (13372025.444, 13444880.698, 13517773.112), stdev = 36158.408
  CI (99.9%): [13420722.800, 13469038.597] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  13444880.698 ± 24157.899  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162389752.359 ops/s
# Warmup Iteration   2: 296460307.357 ops/s
# Warmup Iteration   3: 258811113.530 ops/s
# Warmup Iteration   4: 303425069.659 ops/s
# Warmup Iteration   5: 304076997.680 ops/s
# Warmup Iteration   6: 304277850.443 ops/s
# Warmup Iteration   7: 303771225.902 ops/s
# Warmup Iteration   8: 304058296.460 ops/s
# Warmup Iteration   9: 302792002.049 ops/s
# Warmup Iteration  10: 303274948.618 ops/s
# Warmup Iteration  11: 302906197.708 ops/s
# Warmup Iteration  12: 303561008.896 ops/s
# Warmup Iteration  13: 304175343.211 ops/s
# Warmup Iteration  14: 304333721.235 ops/s
# Warmup Iteration  15: 303064796.723 ops/s
# Warmup Iteration  16: 303930947.726 ops/s
# Warmup Iteration  17: 303598283.869 ops/s
# Warmup Iteration  18: 304910001.577 ops/s
# Warmup Iteration  19: 304771185.045 ops/s
# Warmup Iteration  20: 303456702.376 ops/s
# Warmup Iteration  21: 304503369.051 ops/s
# Warmup Iteration  22: 304876530.301 ops/s
# Warmup Iteration  23: 304779685.561 ops/s
# Warmup Iteration  24: 303525017.696 ops/s
# Warmup Iteration  25: 304905691.163 ops/s
# Warmup Iteration  26: 304382465.969 ops/s
# Warmup Iteration  27: 303799947.010 ops/s
# Warmup Iteration  28: 303530494.233 ops/s
# Warmup Iteration  29: 302987249.063 ops/s
# Warmup Iteration  30: 305072555.621 ops/s
Iteration   1: 304690458.122 ops/s
Iteration   2: 304071038.155 ops/s
Iteration   3: 305123175.366 ops/s
Iteration   4: 303689087.097 ops/s
Iteration   5: 305679973.084 ops/s
Iteration   6: 305029542.575 ops/s
Iteration   7: 304401732.092 ops/s
Iteration   8: 304264234.475 ops/s
Iteration   9: 304818740.180 ops/s
Iteration  10: 305240099.787 ops/s
Iteration  11: 303912590.582 ops/s
Iteration  12: 304005969.664 ops/s
Iteration  13: 303509157.800 ops/s
Iteration  14: 304781305.989 ops/s
Iteration  15: 303296514.108 ops/s
Iteration  16: 304493612.199 ops/s
Iteration  17: 302469139.919 ops/s
Iteration  18: 302930290.270 ops/s
Iteration  19: 304454860.920 ops/s
Iteration  20: 302684984.205 ops/s
Iteration  21: 304019229.086 ops/s
Iteration  22: 303484557.718 ops/s
Iteration  23: 303682796.768 ops/s
Iteration  24: 304096758.917 ops/s
Iteration  25: 305413563.409 ops/s
Iteration  26: 304096738.559 ops/s
Iteration  27: 304051044.960 ops/s
Iteration  28: 303192552.722 ops/s
Iteration  29: 303432972.826 ops/s
Iteration  30: 303022620.531 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_notEmpty":
  304067978.070 ±(99.9%) 545880.614 ops/s [Average]
  (min, avg, max) = (302469139.919, 304067978.070, 305679973.084), stdev = 817048.467
  CI (99.9%): [303522097.455, 304613858.684] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt          Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_notEmpty  thrpt   30  304067978.070 ± 545880.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduce$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduce

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6654929.657 ops/s
# Warmup Iteration   2: 12174993.493 ops/s
# Warmup Iteration   3: 11337869.309 ops/s
# Warmup Iteration   4: 12843820.792 ops/s
# Warmup Iteration   5: 12779164.198 ops/s
# Warmup Iteration   6: 12835826.146 ops/s
# Warmup Iteration   7: 12779951.141 ops/s
# Warmup Iteration   8: 12834436.193 ops/s
# Warmup Iteration   9: 12803432.980 ops/s
# Warmup Iteration  10: 12772480.784 ops/s
# Warmup Iteration  11: 12813781.328 ops/s
# Warmup Iteration  12: 12784668.181 ops/s
# Warmup Iteration  13: 12788391.921 ops/s
# Warmup Iteration  14: 12721641.104 ops/s
# Warmup Iteration  15: 12771084.729 ops/s
# Warmup Iteration  16: 12812360.653 ops/s
# Warmup Iteration  17: 12745301.927 ops/s
# Warmup Iteration  18: 12823110.869 ops/s
# Warmup Iteration  19: 12772906.183 ops/s
# Warmup Iteration  20: 12797036.883 ops/s
# Warmup Iteration  21: 12712043.401 ops/s
# Warmup Iteration  22: 12819276.705 ops/s
# Warmup Iteration  23: 12746671.703 ops/s
# Warmup Iteration  24: 12776579.340 ops/s
# Warmup Iteration  25: 12787280.708 ops/s
# Warmup Iteration  26: 12746211.364 ops/s
# Warmup Iteration  27: 12774305.290 ops/s
# Warmup Iteration  28: 12751712.400 ops/s
# Warmup Iteration  29: 12787269.572 ops/s
# Warmup Iteration  30: 12770183.850 ops/s
Iteration   1: 12742754.905 ops/s
Iteration   2: 12665483.246 ops/s
Iteration   3: 12775029.974 ops/s
Iteration   4: 12733309.383 ops/s
Iteration   5: 12808666.744 ops/s
Iteration   6: 12798667.797 ops/s
Iteration   7: 12825776.025 ops/s
Iteration   8: 12839331.076 ops/s
Iteration   9: 12801481.718 ops/s
Iteration  10: 12716171.535 ops/s
Iteration  11: 12721472.692 ops/s
Iteration  12: 12753946.627 ops/s
Iteration  13: 12752992.314 ops/s
Iteration  14: 12830618.932 ops/s
Iteration  15: 12841556.689 ops/s
Iteration  16: 12779988.897 ops/s
Iteration  17: 12741668.607 ops/s
Iteration  18: 12753698.289 ops/s
Iteration  19: 12794182.622 ops/s
Iteration  20: 12768993.604 ops/s
Iteration  21: 12767701.551 ops/s
Iteration  22: 12827467.466 ops/s
Iteration  23: 12815595.656 ops/s
Iteration  24: 12852091.244 ops/s
Iteration  25: 12795531.430 ops/s
Iteration  26: 12728016.429 ops/s
Iteration  27: 12840385.479 ops/s
Iteration  28: 12710270.996 ops/s
Iteration  29: 12771930.869 ops/s
Iteration  30: 12751837.089 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduce":
  12776887.330 ±(99.9%) 31037.247 ops/s [Average]
  (min, avg, max) = (12665483.246, 12776887.330, 12852091.244), stdev = 46455.094
  CI (99.9%): [12745850.082, 12807924.577] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduce  thrpt   30  12776887.330 ± 31037.247  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceIfEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceIfEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6528161.934 ops/s
# Warmup Iteration   2: 12250106.742 ops/s
# Warmup Iteration   3: 11127954.191 ops/s
# Warmup Iteration   4: 12630750.428 ops/s
# Warmup Iteration   5: 12628616.432 ops/s
# Warmup Iteration   6: 12634857.036 ops/s
# Warmup Iteration   7: 12591717.891 ops/s
# Warmup Iteration   8: 12658918.332 ops/s
# Warmup Iteration   9: 12604508.225 ops/s
# Warmup Iteration  10: 12643202.149 ops/s
# Warmup Iteration  11: 12610623.791 ops/s
# Warmup Iteration  12: 12617974.357 ops/s
# Warmup Iteration  13: 12672155.933 ops/s
# Warmup Iteration  14: 12633000.971 ops/s
# Warmup Iteration  15: 12606242.112 ops/s
# Warmup Iteration  16: 12633309.479 ops/s
# Warmup Iteration  17: 12594770.123 ops/s
# Warmup Iteration  18: 12629162.902 ops/s
# Warmup Iteration  19: 12576338.288 ops/s
# Warmup Iteration  20: 12656564.693 ops/s
# Warmup Iteration  21: 12619374.610 ops/s
# Warmup Iteration  22: 12595290.757 ops/s
# Warmup Iteration  23: 12601892.335 ops/s
# Warmup Iteration  24: 12605730.115 ops/s
# Warmup Iteration  25: 12658465.425 ops/s
# Warmup Iteration  26: 12630127.277 ops/s
# Warmup Iteration  27: 12622787.450 ops/s
# Warmup Iteration  28: 12629957.216 ops/s
# Warmup Iteration  29: 12657195.557 ops/s
# Warmup Iteration  30: 12613536.576 ops/s
Iteration   1: 12619845.492 ops/s
Iteration   2: 12609357.900 ops/s
Iteration   3: 12634768.190 ops/s
Iteration   4: 12581854.276 ops/s
Iteration   5: 12679446.965 ops/s
Iteration   6: 12627282.108 ops/s
Iteration   7: 12628495.295 ops/s
Iteration   8: 12531814.209 ops/s
Iteration   9: 12515500.121 ops/s
Iteration  10: 12597680.488 ops/s
Iteration  11: 12550543.578 ops/s
Iteration  12: 12548584.509 ops/s
Iteration  13: 12598570.045 ops/s
Iteration  14: 12605093.847 ops/s
Iteration  15: 12606933.658 ops/s
Iteration  16: 12619661.431 ops/s
Iteration  17: 12657048.082 ops/s
Iteration  18: 12580672.107 ops/s
Iteration  19: 12680250.229 ops/s
Iteration  20: 12632416.914 ops/s
Iteration  21: 12612315.777 ops/s
Iteration  22: 12678596.562 ops/s
Iteration  23: 12639277.015 ops/s
Iteration  24: 12659934.833 ops/s
Iteration  25: 12633415.330 ops/s
Iteration  26: 12658923.007 ops/s
Iteration  27: 12616416.212 ops/s
Iteration  28: 12652553.610 ops/s
Iteration  29: 12599090.537 ops/s
Iteration  30: 12627074.346 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceIfEmpty":
  12616113.889 ±(99.9%) 27847.551 ops/s [Average]
  (min, avg, max) = (12515500.121, 12616113.889, 12680250.229), stdev = 41680.907
  CI (99.9%): [12588266.338, 12643961.440] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceIfEmpty  thrpt   30  12616113.889 ± 27847.551  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceOnEmptyThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceOnEmptyThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 834029.165 ops/s
# Warmup Iteration   2: 849313.475 ops/s
# Warmup Iteration   3: 1037211.119 ops/s
# Warmup Iteration   4: 1083656.444 ops/s
# Warmup Iteration   5: 1084035.320 ops/s
# Warmup Iteration   6: 1087051.140 ops/s
# Warmup Iteration   7: 1080729.861 ops/s
# Warmup Iteration   8: 1083063.658 ops/s
# Warmup Iteration   9: 1083028.470 ops/s
# Warmup Iteration  10: 1081789.653 ops/s
# Warmup Iteration  11: 1080972.153 ops/s
# Warmup Iteration  12: 1086770.127 ops/s
# Warmup Iteration  13: 907084.656 ops/s
# Warmup Iteration  14: 1079208.146 ops/s
# Warmup Iteration  15: 1078039.820 ops/s
# Warmup Iteration  16: 1077768.744 ops/s
# Warmup Iteration  17: 1148359.148 ops/s
# Warmup Iteration  18: 1149088.913 ops/s
# Warmup Iteration  19: 1153313.758 ops/s
# Warmup Iteration  20: 1148858.455 ops/s
# Warmup Iteration  21: 1145497.826 ops/s
# Warmup Iteration  22: 1142231.919 ops/s
# Warmup Iteration  23: 1146563.277 ops/s
# Warmup Iteration  24: 1141879.767 ops/s
# Warmup Iteration  25: 1149121.946 ops/s
# Warmup Iteration  26: 1149522.499 ops/s
# Warmup Iteration  27: 1148914.942 ops/s
# Warmup Iteration  28: 1143082.375 ops/s
# Warmup Iteration  29: 1147066.040 ops/s
# Warmup Iteration  30: 1147468.419 ops/s
Iteration   1: 1153488.694 ops/s
Iteration   2: 1152533.409 ops/s
Iteration   3: 1148638.352 ops/s
Iteration   4: 1152070.034 ops/s
Iteration   5: 1142602.123 ops/s
Iteration   6: 1150247.325 ops/s
Iteration   7: 1146029.368 ops/s
Iteration   8: 1149920.970 ops/s
Iteration   9: 1148247.038 ops/s
Iteration  10: 1147529.473 ops/s
Iteration  11: 1145892.677 ops/s
Iteration  12: 1148034.172 ops/s
Iteration  13: 1147726.080 ops/s
Iteration  14: 1145063.107 ops/s
Iteration  15: 1144087.798 ops/s
Iteration  16: 1146127.468 ops/s
Iteration  17: 1152419.871 ops/s
Iteration  18: 1147619.088 ops/s
Iteration  19: 1152195.905 ops/s
Iteration  20: 1152386.755 ops/s
Iteration  21: 1145722.197 ops/s
Iteration  22: 1147946.887 ops/s
Iteration  23: 1150072.194 ops/s
Iteration  24: 1148892.627 ops/s
Iteration  25: 1150086.459 ops/s
Iteration  26: 1148633.770 ops/s
Iteration  27: 1148921.802 ops/s
Iteration  28: 1148732.530 ops/s
Iteration  29: 1152244.755 ops/s
Iteration  30: 1149624.953 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceOnEmptyThrows":
  1148791.263 ±(99.9%) 1825.391 ops/s [Average]
  (min, avg, max) = (1142602.123, 1148791.263, 1153488.694), stdev = 2732.159
  CI (99.9%): [1146965.872, 1150616.654] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reduceOnEmptyThrows  thrpt   30  1148791.263 ± 1825.391  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2846719.146 ops/s
# Warmup Iteration   2: 6398308.527 ops/s
# Warmup Iteration   3: 5288544.152 ops/s
# Warmup Iteration   4: 6405977.815 ops/s
# Warmup Iteration   5: 6430882.740 ops/s
# Warmup Iteration   6: 6401650.562 ops/s
# Warmup Iteration   7: 6411799.747 ops/s
# Warmup Iteration   8: 6392375.609 ops/s
# Warmup Iteration   9: 6399530.082 ops/s
# Warmup Iteration  10: 6395599.730 ops/s
# Warmup Iteration  11: 6420553.815 ops/s
# Warmup Iteration  12: 6411016.024 ops/s
# Warmup Iteration  13: 6413843.093 ops/s
# Warmup Iteration  14: 6400905.484 ops/s
# Warmup Iteration  15: 6397025.248 ops/s
# Warmup Iteration  16: 6425612.256 ops/s
# Warmup Iteration  17: 6402560.848 ops/s
# Warmup Iteration  18: 6398851.464 ops/s
# Warmup Iteration  19: 6395947.550 ops/s
# Warmup Iteration  20: 6399353.021 ops/s
# Warmup Iteration  21: 6393938.729 ops/s
# Warmup Iteration  22: 6393868.958 ops/s
# Warmup Iteration  23: 6414088.897 ops/s
# Warmup Iteration  24: 6412196.529 ops/s
# Warmup Iteration  25: 6404629.591 ops/s
# Warmup Iteration  26: 6388724.776 ops/s
# Warmup Iteration  27: 6415744.412 ops/s
# Warmup Iteration  28: 6393115.702 ops/s
# Warmup Iteration  29: 6398396.019 ops/s
# Warmup Iteration  30: 6419112.124 ops/s
Iteration   1: 6404254.350 ops/s
Iteration   2: 6401492.128 ops/s
Iteration   3: 6407043.719 ops/s
Iteration   4: 6390916.661 ops/s
Iteration   5: 6394609.451 ops/s
Iteration   6: 6408367.941 ops/s
Iteration   7: 6424793.495 ops/s
Iteration   8: 6414556.559 ops/s
Iteration   9: 6395498.422 ops/s
Iteration  10: 6385112.206 ops/s
Iteration  11: 6412471.847 ops/s
Iteration  12: 6430339.857 ops/s
Iteration  13: 6393521.709 ops/s
Iteration  14: 6410070.566 ops/s
Iteration  15: 6383590.938 ops/s
Iteration  16: 6400934.615 ops/s
Iteration  17: 6380445.167 ops/s
Iteration  18: 6408921.377 ops/s
Iteration  19: 6381755.679 ops/s
Iteration  20: 6386800.447 ops/s
Iteration  21: 6380648.703 ops/s
Iteration  22: 6412513.992 ops/s
Iteration  23: 6416436.004 ops/s
Iteration  24: 6381829.870 ops/s
Iteration  25: 6412396.018 ops/s
Iteration  26: 6399606.285 ops/s
Iteration  27: 6410107.283 ops/s
Iteration  28: 6394223.118 ops/s
Iteration  29: 6401726.770 ops/s
Iteration  30: 6426862.229 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reject":
  6401728.247 ±(99.9%) 9476.484 ops/s [Average]
  (min, avg, max) = (6380445.167, 6401728.247, 6430339.857), stdev = 14183.957
  CI (99.9%): [6392251.762, 6411204.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_reject  thrpt   30  6401728.247 ± 9476.484  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2835426.206 ops/s
# Warmup Iteration   2: 6315121.230 ops/s
# Warmup Iteration   3: 5250021.546 ops/s
# Warmup Iteration   4: 6330974.459 ops/s
# Warmup Iteration   5: 6327253.141 ops/s
# Warmup Iteration   6: 6338616.454 ops/s
# Warmup Iteration   7: 6343982.279 ops/s
# Warmup Iteration   8: 6335260.889 ops/s
# Warmup Iteration   9: 6346788.011 ops/s
# Warmup Iteration  10: 6326123.617 ops/s
# Warmup Iteration  11: 6334681.562 ops/s
# Warmup Iteration  12: 6334021.482 ops/s
# Warmup Iteration  13: 6341883.198 ops/s
# Warmup Iteration  14: 6346200.846 ops/s
# Warmup Iteration  15: 6346640.864 ops/s
# Warmup Iteration  16: 6344269.805 ops/s
# Warmup Iteration  17: 6349881.436 ops/s
# Warmup Iteration  18: 6351844.349 ops/s
# Warmup Iteration  19: 6341346.060 ops/s
# Warmup Iteration  20: 6337966.410 ops/s
# Warmup Iteration  21: 6344505.696 ops/s
# Warmup Iteration  22: 6340587.776 ops/s
# Warmup Iteration  23: 6349077.156 ops/s
# Warmup Iteration  24: 6343908.940 ops/s
# Warmup Iteration  25: 6333498.036 ops/s
# Warmup Iteration  26: 6332493.371 ops/s
# Warmup Iteration  27: 6351288.446 ops/s
# Warmup Iteration  28: 6333040.908 ops/s
# Warmup Iteration  29: 6335960.886 ops/s
# Warmup Iteration  30: 6344288.932 ops/s
Iteration   1: 6356452.089 ops/s
Iteration   2: 6335581.798 ops/s
Iteration   3: 6345304.179 ops/s
Iteration   4: 6338855.664 ops/s
Iteration   5: 6326469.773 ops/s
Iteration   6: 6362013.736 ops/s
Iteration   7: 6343008.517 ops/s
Iteration   8: 6350936.834 ops/s
Iteration   9: 6332544.444 ops/s
Iteration  10: 6340864.212 ops/s
Iteration  11: 6322626.821 ops/s
Iteration  12: 6350261.776 ops/s
Iteration  13: 6343208.246 ops/s
Iteration  14: 6321766.345 ops/s
Iteration  15: 6349529.577 ops/s
Iteration  16: 6345664.310 ops/s
Iteration  17: 6356834.183 ops/s
Iteration  18: 6365451.020 ops/s
Iteration  19: 6338998.203 ops/s
Iteration  20: 6363614.546 ops/s
Iteration  21: 6344596.070 ops/s
Iteration  22: 6358050.184 ops/s
Iteration  23: 6343468.901 ops/s
Iteration  24: 6324826.678 ops/s
Iteration  25: 6361965.032 ops/s
Iteration  26: 6343718.277 ops/s
Iteration  27: 6340646.151 ops/s
Iteration  28: 6340771.897 ops/s
Iteration  29: 6341005.757 ops/s
Iteration  30: 6348246.209 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_select":
  6344576.048 ±(99.9%) 7907.350 ops/s [Average]
  (min, avg, max) = (6321766.345, 6344576.048, 6365451.020), stdev = 11835.350
  CI (99.9%): [6336668.698, 6352483.397] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_select  thrpt   30  6344576.048 ± 7907.350  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 21532875.851 ops/s
# Warmup Iteration   2: 34800283.646 ops/s
# Warmup Iteration   3: 41103038.704 ops/s
# Warmup Iteration   4: 41264892.566 ops/s
# Warmup Iteration   5: 41263560.127 ops/s
# Warmup Iteration   6: 41206405.333 ops/s
# Warmup Iteration   7: 41079843.577 ops/s
# Warmup Iteration   8: 41254237.019 ops/s
# Warmup Iteration   9: 41219544.649 ops/s
# Warmup Iteration  10: 41226307.947 ops/s
# Warmup Iteration  11: 41198896.602 ops/s
# Warmup Iteration  12: 41319030.855 ops/s
# Warmup Iteration  13: 41342663.619 ops/s
# Warmup Iteration  14: 41175247.627 ops/s
# Warmup Iteration  15: 41261878.558 ops/s
# Warmup Iteration  16: 41236633.784 ops/s
# Warmup Iteration  17: 41160114.173 ops/s
# Warmup Iteration  18: 41317586.956 ops/s
# Warmup Iteration  19: 41330315.360 ops/s
# Warmup Iteration  20: 41242725.003 ops/s
# Warmup Iteration  21: 41288030.925 ops/s
# Warmup Iteration  22: 41337355.429 ops/s
# Warmup Iteration  23: 41277045.214 ops/s
# Warmup Iteration  24: 41290877.467 ops/s
# Warmup Iteration  25: 41177771.006 ops/s
# Warmup Iteration  26: 41005008.631 ops/s
# Warmup Iteration  27: 40753865.521 ops/s
# Warmup Iteration  28: 41155034.643 ops/s
# Warmup Iteration  29: 41053811.424 ops/s
# Warmup Iteration  30: 41240579.220 ops/s
Iteration   1: 41219242.126 ops/s
Iteration   2: 41265769.288 ops/s
Iteration   3: 41318803.105 ops/s
Iteration   4: 41276088.536 ops/s
Iteration   5: 41245064.740 ops/s
Iteration   6: 41280236.574 ops/s
Iteration   7: 41352367.207 ops/s
Iteration   8: 41267606.674 ops/s
Iteration   9: 41068750.208 ops/s
Iteration  10: 41153382.262 ops/s
Iteration  11: 40884601.708 ops/s
Iteration  12: 41267322.198 ops/s
Iteration  13: 41129880.467 ops/s
Iteration  14: 41018553.265 ops/s
Iteration  15: 41103462.626 ops/s
Iteration  16: 41287011.192 ops/s
Iteration  17: 41085974.070 ops/s
Iteration  18: 41160208.010 ops/s
Iteration  19: 41105946.451 ops/s
Iteration  20: 41347646.606 ops/s
Iteration  21: 41126400.859 ops/s
Iteration  22: 41227995.146 ops/s
Iteration  23: 40704332.715 ops/s
Iteration  24: 41252263.998 ops/s
Iteration  25: 41133451.329 ops/s
Iteration  26: 40941459.337 ops/s
Iteration  27: 41313369.966 ops/s
Iteration  28: 41096874.986 ops/s
Iteration  29: 41294033.466 ops/s
Iteration  30: 41395874.008 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_selectUnique":
  41177465.771 ±(99.9%) 101216.162 ops/s [Average]
  (min, avg, max) = (40704332.715, 41177465.771, 41395874.008), stdev = 151495.598
  CI (99.9%): [41076249.608, 41278681.933] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_selectUnique  thrpt   30  41177465.771 ± 101216.162  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 33456894.646 ops/s
# Warmup Iteration   2: 51933067.399 ops/s
# Warmup Iteration   3: 62269619.719 ops/s
# Warmup Iteration   4: 62662175.678 ops/s
# Warmup Iteration   5: 62527782.353 ops/s
# Warmup Iteration   6: 62288291.682 ops/s
# Warmup Iteration   7: 62590108.563 ops/s
# Warmup Iteration   8: 62401728.293 ops/s
# Warmup Iteration   9: 62543741.872 ops/s
# Warmup Iteration  10: 61975959.780 ops/s
# Warmup Iteration  11: 62150086.343 ops/s
# Warmup Iteration  12: 62601126.374 ops/s
# Warmup Iteration  13: 62520612.135 ops/s
# Warmup Iteration  14: 62370054.691 ops/s
# Warmup Iteration  15: 62589194.190 ops/s
# Warmup Iteration  16: 62370302.222 ops/s
# Warmup Iteration  17: 61837970.006 ops/s
# Warmup Iteration  18: 62531001.409 ops/s
# Warmup Iteration  19: 62700061.237 ops/s
# Warmup Iteration  20: 62166382.071 ops/s
# Warmup Iteration  21: 62370001.317 ops/s
# Warmup Iteration  22: 62676176.517 ops/s
# Warmup Iteration  23: 62621209.071 ops/s
# Warmup Iteration  24: 62397785.737 ops/s
# Warmup Iteration  25: 62636050.662 ops/s
# Warmup Iteration  26: 62713641.706 ops/s
# Warmup Iteration  27: 62643689.413 ops/s
# Warmup Iteration  28: 62757379.452 ops/s
# Warmup Iteration  29: 62713568.938 ops/s
# Warmup Iteration  30: 62330731.807 ops/s
Iteration   1: 62403940.305 ops/s
Iteration   2: 62114835.760 ops/s
Iteration   3: 62469019.739 ops/s
Iteration   4: 62565720.938 ops/s
Iteration   5: 62624153.250 ops/s
Iteration   6: 62880659.010 ops/s
Iteration   7: 62943243.708 ops/s
Iteration   8: 62500022.246 ops/s
Iteration   9: 62591414.696 ops/s
Iteration  10: 62686825.823 ops/s
Iteration  11: 62441501.594 ops/s
Iteration  12: 62607314.784 ops/s
Iteration  13: 62671379.152 ops/s
Iteration  14: 62468201.232 ops/s
Iteration  15: 62494698.061 ops/s
Iteration  16: 62697467.193 ops/s
Iteration  17: 62673967.710 ops/s
Iteration  18: 62417587.397 ops/s
Iteration  19: 62552288.246 ops/s
Iteration  20: 62234378.487 ops/s
Iteration  21: 62685932.840 ops/s
Iteration  22: 62299656.912 ops/s
Iteration  23: 63036346.899 ops/s
Iteration  24: 62627759.101 ops/s
Iteration  25: 62722643.141 ops/s
Iteration  26: 62495365.362 ops/s
Iteration  27: 62739349.852 ops/s
Iteration  28: 62428785.819 ops/s
Iteration  29: 62755690.279 ops/s
Iteration  30: 62448345.280 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_size":
  62575949.827 ±(99.9%) 132653.214 ops/s [Average]
  (min, avg, max) = (62114835.760, 62575949.827, 63036346.899), stdev = 198549.101
  CI (99.9%): [62443296.613, 62708603.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_size  thrpt   30  62575949.827 ± 132653.214  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 16304050.262 ops/s
# Warmup Iteration   2: 31448121.041 ops/s
# Warmup Iteration   3: 26518285.808 ops/s
# Warmup Iteration   4: 31412367.540 ops/s
# Warmup Iteration   5: 31359516.946 ops/s
# Warmup Iteration   6: 31457538.887 ops/s
# Warmup Iteration   7: 31393959.422 ops/s
# Warmup Iteration   8: 31499330.318 ops/s
# Warmup Iteration   9: 31415872.052 ops/s
# Warmup Iteration  10: 31422337.067 ops/s
# Warmup Iteration  11: 31320724.589 ops/s
# Warmup Iteration  12: 31462788.471 ops/s
# Warmup Iteration  13: 31415237.254 ops/s
# Warmup Iteration  14: 31487534.591 ops/s
# Warmup Iteration  15: 31366968.807 ops/s
# Warmup Iteration  16: 31376506.348 ops/s
# Warmup Iteration  17: 31454706.223 ops/s
# Warmup Iteration  18: 31451358.670 ops/s
# Warmup Iteration  19: 31457854.198 ops/s
# Warmup Iteration  20: 31408856.981 ops/s
# Warmup Iteration  21: 31356419.017 ops/s
# Warmup Iteration  22: 31411766.106 ops/s
# Warmup Iteration  23: 31500473.187 ops/s
# Warmup Iteration  24: 31485928.887 ops/s
# Warmup Iteration  25: 31391272.180 ops/s
# Warmup Iteration  26: 31331933.105 ops/s
# Warmup Iteration  27: 31408274.517 ops/s
# Warmup Iteration  28: 31302164.284 ops/s
# Warmup Iteration  29: 31471726.019 ops/s
# Warmup Iteration  30: 31426290.690 ops/s
Iteration   1: 31366929.793 ops/s
Iteration   2: 31498601.149 ops/s
Iteration   3: 31427674.039 ops/s
Iteration   4: 31510277.541 ops/s
Iteration   5: 31378893.939 ops/s
Iteration   6: 31424592.586 ops/s
Iteration   7: 31404413.967 ops/s
Iteration   8: 31414020.030 ops/s
Iteration   9: 31447533.554 ops/s
Iteration  10: 31308198.742 ops/s
Iteration  11: 31470587.042 ops/s
Iteration  12: 31470131.149 ops/s
Iteration  13: 31306984.338 ops/s
Iteration  14: 31329120.018 ops/s
Iteration  15: 31485862.164 ops/s
Iteration  16: 31445669.688 ops/s
Iteration  17: 31409797.069 ops/s
Iteration  18: 31421244.187 ops/s
Iteration  19: 31400330.345 ops/s
Iteration  20: 31468572.470 ops/s
Iteration  21: 31340192.697 ops/s
Iteration  22: 31498272.079 ops/s
Iteration  23: 31403150.333 ops/s
Iteration  24: 31410225.453 ops/s
Iteration  25: 31564227.689 ops/s
Iteration  26: 31545085.472 ops/s
Iteration  27: 31490667.930 ops/s
Iteration  28: 31332598.237 ops/s
Iteration  29: 31456421.947 ops/s
Iteration  30: 31484836.838 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_sizeDistinct":
  31430503.750 ±(99.9%) 44832.078 ops/s [Average]
  (min, avg, max) = (31306984.338, 31430503.750, 31564227.689), stdev = 67102.548
  CI (99.9%): [31385671.672, 31475335.827] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_sizeDistinct  thrpt   30  31430503.750 ± 44832.078  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testEquals$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testEquals

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25140.098 ops/s
# Warmup Iteration   2: 43868.399 ops/s
# Warmup Iteration   3: 52087.607 ops/s
# Warmup Iteration   4: 52211.684 ops/s
# Warmup Iteration   5: 52303.077 ops/s
# Warmup Iteration   6: 44855.141 ops/s
# Warmup Iteration   7: 52610.849 ops/s
# Warmup Iteration   8: 52428.764 ops/s
# Warmup Iteration   9: 52335.494 ops/s
# Warmup Iteration  10: 52437.280 ops/s
# Warmup Iteration  11: 52384.221 ops/s
# Warmup Iteration  12: 52540.457 ops/s
# Warmup Iteration  13: 52388.530 ops/s
# Warmup Iteration  14: 52446.372 ops/s
# Warmup Iteration  15: 52320.174 ops/s
# Warmup Iteration  16: 52422.789 ops/s
# Warmup Iteration  17: 52394.230 ops/s
# Warmup Iteration  18: 52400.622 ops/s
# Warmup Iteration  19: 52473.080 ops/s
# Warmup Iteration  20: 52392.686 ops/s
# Warmup Iteration  21: 52427.240 ops/s
# Warmup Iteration  22: 52348.871 ops/s
# Warmup Iteration  23: 52318.858 ops/s
# Warmup Iteration  24: 52336.503 ops/s
# Warmup Iteration  25: 52252.815 ops/s
# Warmup Iteration  26: 52465.247 ops/s
# Warmup Iteration  27: 52335.592 ops/s
# Warmup Iteration  28: 52316.563 ops/s
# Warmup Iteration  29: 52385.246 ops/s
# Warmup Iteration  30: 52474.551 ops/s
Iteration   1: 52417.955 ops/s
Iteration   2: 52498.126 ops/s
Iteration   3: 52452.720 ops/s
Iteration   4: 52241.542 ops/s
Iteration   5: 52325.396 ops/s
Iteration   6: 52554.629 ops/s
Iteration   7: 52423.815 ops/s
Iteration   8: 52605.553 ops/s
Iteration   9: 52498.681 ops/s
Iteration  10: 52260.428 ops/s
Iteration  11: 52294.598 ops/s
Iteration  12: 52383.757 ops/s
Iteration  13: 52261.963 ops/s
Iteration  14: 52315.668 ops/s
Iteration  15: 52033.970 ops/s
Iteration  16: 52014.268 ops/s
Iteration  17: 52283.414 ops/s
Iteration  18: 51972.906 ops/s
Iteration  19: 52240.365 ops/s
Iteration  20: 51956.534 ops/s
Iteration  21: 52220.333 ops/s
Iteration  22: 52346.867 ops/s
Iteration  23: 52318.257 ops/s
Iteration  24: 52184.867 ops/s
Iteration  25: 52198.110 ops/s
Iteration  26: 52312.791 ops/s
Iteration  27: 52252.295 ops/s
Iteration  28: 52114.184 ops/s
Iteration  29: 52360.104 ops/s
Iteration  30: 52231.901 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testEquals":
  52285.867 ±(99.9%) 107.930 ops/s [Average]
  (min, avg, max) = (51956.534, 52285.867, 52605.553), stdev = 161.545
  CI (99.9%): [52177.937, 52393.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt      Score     Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testEquals  thrpt   30  52285.867 ± 107.930  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 880665.822 ops/s
# Warmup Iteration   2: 2217373.606 ops/s
# Warmup Iteration   3: 2009549.438 ops/s
# Warmup Iteration   4: 2057203.795 ops/s
# Warmup Iteration   5: 2228628.457 ops/s
# Warmup Iteration   6: 2234653.249 ops/s
# Warmup Iteration   7: 2223255.640 ops/s
# Warmup Iteration   8: 2235966.000 ops/s
# Warmup Iteration   9: 2229778.403 ops/s
# Warmup Iteration  10: 2220702.911 ops/s
# Warmup Iteration  11: 2222718.930 ops/s
# Warmup Iteration  12: 2229673.333 ops/s
# Warmup Iteration  13: 2233407.458 ops/s
# Warmup Iteration  14: 2223184.119 ops/s
# Warmup Iteration  15: 2235675.474 ops/s
# Warmup Iteration  16: 2229123.972 ops/s
# Warmup Iteration  17: 2229256.793 ops/s
# Warmup Iteration  18: 2234384.886 ops/s
# Warmup Iteration  19: 2229746.696 ops/s
# Warmup Iteration  20: 2229626.011 ops/s
# Warmup Iteration  21: 2230994.623 ops/s
# Warmup Iteration  22: 2227443.444 ops/s
# Warmup Iteration  23: 2231361.867 ops/s
# Warmup Iteration  24: 2226765.410 ops/s
# Warmup Iteration  25: 2224687.898 ops/s
# Warmup Iteration  26: 2233403.938 ops/s
# Warmup Iteration  27: 2234408.516 ops/s
# Warmup Iteration  28: 2227975.286 ops/s
# Warmup Iteration  29: 2222471.843 ops/s
# Warmup Iteration  30: 2226610.231 ops/s
Iteration   1: 2231971.544 ops/s
Iteration   2: 2235734.221 ops/s
Iteration   3: 2222377.863 ops/s
Iteration   4: 2230154.260 ops/s
Iteration   5: 2230345.965 ops/s
Iteration   6: 2236341.225 ops/s
Iteration   7: 2229895.450 ops/s
Iteration   8: 2230743.834 ops/s
Iteration   9: 2230500.740 ops/s
Iteration  10: 2233418.318 ops/s
Iteration  11: 2235035.411 ops/s
Iteration  12: 2241183.190 ops/s
Iteration  13: 2239276.928 ops/s
Iteration  14: 2236580.139 ops/s
Iteration  15: 2232044.297 ops/s
Iteration  16: 2232260.901 ops/s
Iteration  17: 2228380.121 ops/s
Iteration  18: 2230875.216 ops/s
Iteration  19: 2238654.373 ops/s
Iteration  20: 2231752.001 ops/s
Iteration  21: 2236128.468 ops/s
Iteration  22: 2235183.217 ops/s
Iteration  23: 2226857.632 ops/s
Iteration  24: 2232334.805 ops/s
Iteration  25: 2228797.134 ops/s
Iteration  26: 2234934.986 ops/s
Iteration  27: 2234366.182 ops/s
Iteration  28: 2234503.158 ops/s
Iteration  29: 2232504.873 ops/s
Iteration  30: 2231986.324 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testHashCode":
  2232837.426 ±(99.9%) 2577.846 ops/s [Average]
  (min, avg, max) = (2222377.863, 2232837.426, 2241183.190), stdev = 3858.398
  CI (99.9%): [2230259.580, 2235415.272] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testHashCode  thrpt   30  2232837.426 ± 2577.846  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799631.759 ops/s
# Warmup Iteration   2: 2008059.693 ops/s
# Warmup Iteration   3: 2100999.319 ops/s
# Warmup Iteration   4: 2106757.485 ops/s
# Warmup Iteration   5: 1719851.806 ops/s
# Warmup Iteration   6: 2103897.367 ops/s
# Warmup Iteration   7: 2104210.665 ops/s
# Warmup Iteration   8: 2103517.479 ops/s
# Warmup Iteration   9: 2103654.546 ops/s
# Warmup Iteration  10: 2109627.106 ops/s
# Warmup Iteration  11: 2106526.562 ops/s
# Warmup Iteration  12: 2105594.088 ops/s
# Warmup Iteration  13: 2112696.221 ops/s
# Warmup Iteration  14: 2106728.833 ops/s
# Warmup Iteration  15: 2105727.069 ops/s
# Warmup Iteration  16: 2108476.807 ops/s
# Warmup Iteration  17: 2106505.837 ops/s
# Warmup Iteration  18: 2106463.472 ops/s
# Warmup Iteration  19: 2105367.818 ops/s
# Warmup Iteration  20: 2106812.338 ops/s
# Warmup Iteration  21: 2107143.798 ops/s
# Warmup Iteration  22: 2107037.290 ops/s
# Warmup Iteration  23: 2107908.303 ops/s
# Warmup Iteration  24: 2105968.190 ops/s
# Warmup Iteration  25: 2104204.573 ops/s
# Warmup Iteration  26: 2108471.212 ops/s
# Warmup Iteration  27: 2108278.752 ops/s
# Warmup Iteration  28: 2104410.827 ops/s
# Warmup Iteration  29: 2105325.293 ops/s
# Warmup Iteration  30: 2108828.256 ops/s
Iteration   1: 2115168.930 ops/s
Iteration   2: 2100642.149 ops/s
Iteration   3: 2102715.347 ops/s
Iteration   4: 2107816.395 ops/s
Iteration   5: 2108971.191 ops/s
Iteration   6: 2104625.527 ops/s
Iteration   7: 2103825.430 ops/s
Iteration   8: 2108350.686 ops/s
Iteration   9: 2112301.573 ops/s
Iteration  10: 2105037.721 ops/s
Iteration  11: 2106476.875 ops/s
Iteration  12: 2104899.119 ops/s
Iteration  13: 2096928.337 ops/s
Iteration  14: 2099953.495 ops/s
Iteration  15: 2099933.332 ops/s
Iteration  16: 2103709.178 ops/s
Iteration  17: 2102283.257 ops/s
Iteration  18: 2103401.223 ops/s
Iteration  19: 2109058.304 ops/s
Iteration  20: 2107119.627 ops/s
Iteration  21: 2108990.043 ops/s
Iteration  22: 2113572.022 ops/s
Iteration  23: 2110360.064 ops/s
Iteration  24: 2102495.413 ops/s
Iteration  25: 2099795.160 ops/s
Iteration  26: 2104362.378 ops/s
Iteration  27: 2108031.148 ops/s
Iteration  28: 2111550.413 ops/s
Iteration  29: 2101461.173 ops/s
Iteration  30: 2109654.184 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testNewWith":
  2105782.990 ±(99.9%) 3008.982 ops/s [Average]
  (min, avg, max) = (2096928.337, 2105782.990, 2115168.930), stdev = 4503.703
  CI (99.9%): [2102774.008, 2108791.972] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testNewWith  thrpt   30  2105782.990 ± 3008.982  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1955435.087 ops/s
# Warmup Iteration   2: 4162972.243 ops/s
# Warmup Iteration   3: 3977788.046 ops/s
# Warmup Iteration   4: 3658218.852 ops/s
# Warmup Iteration   5: 4148343.372 ops/s
# Warmup Iteration   6: 4180416.350 ops/s
# Warmup Iteration   7: 4159132.817 ops/s
# Warmup Iteration   8: 4164442.510 ops/s
# Warmup Iteration   9: 4163164.551 ops/s
# Warmup Iteration  10: 4157712.900 ops/s
# Warmup Iteration  11: 4195567.296 ops/s
# Warmup Iteration  12: 4146713.676 ops/s
# Warmup Iteration  13: 4178868.266 ops/s
# Warmup Iteration  14: 4128123.121 ops/s
# Warmup Iteration  15: 4156420.188 ops/s
# Warmup Iteration  16: 4185609.980 ops/s
# Warmup Iteration  17: 4155821.123 ops/s
# Warmup Iteration  18: 4151342.285 ops/s
# Warmup Iteration  19: 4156879.994 ops/s
# Warmup Iteration  20: 4144073.947 ops/s
# Warmup Iteration  21: 4159053.360 ops/s
# Warmup Iteration  22: 4139090.744 ops/s
# Warmup Iteration  23: 4126137.782 ops/s
# Warmup Iteration  24: 4136463.395 ops/s
# Warmup Iteration  25: 4159857.065 ops/s
# Warmup Iteration  26: 4151040.227 ops/s
# Warmup Iteration  27: 4145633.549 ops/s
# Warmup Iteration  28: 4143920.685 ops/s
# Warmup Iteration  29: 4147565.268 ops/s
# Warmup Iteration  30: 4160015.211 ops/s
Iteration   1: 4171680.147 ops/s
Iteration   2: 4160982.757 ops/s
Iteration   3: 4167890.994 ops/s
Iteration   4: 4171598.267 ops/s
Iteration   5: 4147780.915 ops/s
Iteration   6: 4158463.898 ops/s
Iteration   7: 4163624.928 ops/s
Iteration   8: 4175519.598 ops/s
Iteration   9: 4193403.283 ops/s
Iteration  10: 4168188.183 ops/s
Iteration  11: 4114858.240 ops/s
Iteration  12: 4172454.381 ops/s
Iteration  13: 4169932.125 ops/s
Iteration  14: 4177187.106 ops/s
Iteration  15: 4183832.131 ops/s
Iteration  16: 4151018.193 ops/s
Iteration  17: 4178802.319 ops/s
Iteration  18: 4144585.769 ops/s
Iteration  19: 4179621.651 ops/s
Iteration  20: 4175217.801 ops/s
Iteration  21: 4150967.024 ops/s
Iteration  22: 4193129.208 ops/s
Iteration  23: 4163570.800 ops/s
Iteration  24: 4158693.818 ops/s
Iteration  25: 4160454.724 ops/s
Iteration  26: 4163115.007 ops/s
Iteration  27: 4155595.787 ops/s
Iteration  28: 4161851.733 ops/s
Iteration  29: 4159609.689 ops/s
Iteration  30: 4188011.392 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testToString":
  4166054.729 ±(99.9%) 10583.657 ops/s [Average]
  (min, avg, max) = (4114858.240, 4166054.729, 4193403.283), stdev = 15841.121
  CI (99.9%): [4155471.072, 4176638.386] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_testToString  thrpt   30  4166054.729 ± 10583.657  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12727629.918 ops/s
# Warmup Iteration   2: 27775258.177 ops/s
# Warmup Iteration   3: 23279683.008 ops/s
# Warmup Iteration   4: 27980413.481 ops/s
# Warmup Iteration   5: 28049175.168 ops/s
# Warmup Iteration   6: 28010495.402 ops/s
# Warmup Iteration   7: 27948821.069 ops/s
# Warmup Iteration   8: 27909840.088 ops/s
# Warmup Iteration   9: 27942784.815 ops/s
# Warmup Iteration  10: 27890864.678 ops/s
# Warmup Iteration  11: 27958027.063 ops/s
# Warmup Iteration  12: 27942790.032 ops/s
# Warmup Iteration  13: 27983296.097 ops/s
# Warmup Iteration  14: 27942441.363 ops/s
# Warmup Iteration  15: 28017304.040 ops/s
# Warmup Iteration  16: 27969663.300 ops/s
# Warmup Iteration  17: 27976643.204 ops/s
# Warmup Iteration  18: 28032163.927 ops/s
# Warmup Iteration  19: 27972188.298 ops/s
# Warmup Iteration  20: 28005255.425 ops/s
# Warmup Iteration  21: 27935071.351 ops/s
# Warmup Iteration  22: 27921422.806 ops/s
# Warmup Iteration  23: 27944634.712 ops/s
# Warmup Iteration  24: 27912482.067 ops/s
# Warmup Iteration  25: 27919444.636 ops/s
# Warmup Iteration  26: 28030129.758 ops/s
# Warmup Iteration  27: 27992860.548 ops/s
# Warmup Iteration  28: 27927221.102 ops/s
# Warmup Iteration  29: 28020847.174 ops/s
# Warmup Iteration  30: 28006624.759 ops/s
Iteration   1: 28105870.794 ops/s
Iteration   2: 27961289.899 ops/s
Iteration   3: 28118703.906 ops/s
Iteration   4: 27964740.331 ops/s
Iteration   5: 27925614.691 ops/s
Iteration   6: 27936076.303 ops/s
Iteration   7: 28033930.650 ops/s
Iteration   8: 27951339.859 ops/s
Iteration   9: 27987559.679 ops/s
Iteration  10: 27907504.355 ops/s
Iteration  11: 28019739.771 ops/s
Iteration  12: 27956623.515 ops/s
Iteration  13: 27967743.358 ops/s
Iteration  14: 27787453.427 ops/s
Iteration  15: 27826120.371 ops/s
Iteration  16: 27811228.924 ops/s
Iteration  17: 28005789.272 ops/s
Iteration  18: 27910318.553 ops/s
Iteration  19: 27935410.166 ops/s
Iteration  20: 28072735.417 ops/s
Iteration  21: 27919088.334 ops/s
Iteration  22: 28016841.194 ops/s
Iteration  23: 27910042.338 ops/s
Iteration  24: 28051642.903 ops/s
Iteration  25: 27993074.740 ops/s
Iteration  26: 27843825.872 ops/s
Iteration  27: 27842112.581 ops/s
Iteration  28: 27997941.262 ops/s
Iteration  29: 27973772.598 ops/s
Iteration  30: 27956064.227 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toArray":
  27956339.976 ±(99.9%) 54670.167 ops/s [Average]
  (min, avg, max) = (27787453.427, 27956339.976, 28118703.906), stdev = 81827.739
  CI (99.9%): [27901669.809, 28011010.143] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toArray  thrpt   30  27956339.976 ± 54670.167  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6532080.231 ops/s
# Warmup Iteration   2: 12596383.357 ops/s
# Warmup Iteration   3: 10944782.982 ops/s
# Warmup Iteration   4: 12789170.032 ops/s
# Warmup Iteration   5: 12792192.287 ops/s
# Warmup Iteration   6: 12808158.265 ops/s
# Warmup Iteration   7: 12811019.182 ops/s
# Warmup Iteration   8: 12813297.575 ops/s
# Warmup Iteration   9: 12790755.987 ops/s
# Warmup Iteration  10: 12797193.144 ops/s
# Warmup Iteration  11: 12795830.644 ops/s
# Warmup Iteration  12: 12774669.312 ops/s
# Warmup Iteration  13: 12801536.485 ops/s
# Warmup Iteration  14: 12802712.981 ops/s
# Warmup Iteration  15: 12814602.529 ops/s
# Warmup Iteration  16: 12751186.345 ops/s
# Warmup Iteration  17: 12756022.334 ops/s
# Warmup Iteration  18: 12789947.848 ops/s
# Warmup Iteration  19: 12798556.353 ops/s
# Warmup Iteration  20: 12737276.780 ops/s
# Warmup Iteration  21: 12816059.296 ops/s
# Warmup Iteration  22: 12768378.591 ops/s
# Warmup Iteration  23: 12784997.846 ops/s
# Warmup Iteration  24: 12805807.580 ops/s
# Warmup Iteration  25: 12815181.078 ops/s
# Warmup Iteration  26: 12762372.109 ops/s
# Warmup Iteration  27: 12768455.013 ops/s
# Warmup Iteration  28: 12820536.178 ops/s
# Warmup Iteration  29: 12775625.987 ops/s
# Warmup Iteration  30: 12779209.038 ops/s
Iteration   1: 12763346.525 ops/s
Iteration   2: 12801861.666 ops/s
Iteration   3: 12744518.654 ops/s
Iteration   4: 12769675.311 ops/s
Iteration   5: 12796728.109 ops/s
Iteration   6: 12776211.096 ops/s
Iteration   7: 12803009.159 ops/s
Iteration   8: 12715535.407 ops/s
Iteration   9: 12787404.389 ops/s
Iteration  10: 12785384.137 ops/s
Iteration  11: 12713634.532 ops/s
Iteration  12: 12857586.385 ops/s
Iteration  13: 12817089.508 ops/s
Iteration  14: 12805019.158 ops/s
Iteration  15: 12792182.752 ops/s
Iteration  16: 12778969.025 ops/s
Iteration  17: 12843823.254 ops/s
Iteration  18: 12808560.104 ops/s
Iteration  19: 12875037.276 ops/s
Iteration  20: 12811722.523 ops/s
Iteration  21: 12834013.447 ops/s
Iteration  22: 12772677.523 ops/s
Iteration  23: 12804427.598 ops/s
Iteration  24: 12807287.058 ops/s
Iteration  25: 12765897.482 ops/s
Iteration  26: 12815800.696 ops/s
Iteration  27: 12767760.680 ops/s
Iteration  28: 12804569.690 ops/s
Iteration  29: 12804998.658 ops/s
Iteration  30: 12861182.032 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toBag":
  12796197.128 ±(99.9%) 24991.701 ops/s [Average]
  (min, avg, max) = (12713634.532, 12796197.128, 12875037.276), stdev = 37406.405
  CI (99.9%): [12771205.426, 12821188.829] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toBag  thrpt   30  12796197.128 ± 24991.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 162360832.363 ops/s
# Warmup Iteration   2: 299071342.451 ops/s
# Warmup Iteration   3: 264240011.385 ops/s
# Warmup Iteration   4: 308416829.336 ops/s
# Warmup Iteration   5: 309251486.366 ops/s
# Warmup Iteration   6: 308904209.556 ops/s
# Warmup Iteration   7: 308358063.938 ops/s
# Warmup Iteration   8: 308058322.208 ops/s
# Warmup Iteration   9: 309044851.086 ops/s
# Warmup Iteration  10: 309684074.037 ops/s
# Warmup Iteration  11: 308704683.731 ops/s
# Warmup Iteration  12: 307988663.467 ops/s
# Warmup Iteration  13: 309501905.565 ops/s
# Warmup Iteration  14: 308659457.283 ops/s
# Warmup Iteration  15: 308990477.320 ops/s
# Warmup Iteration  16: 308964388.729 ops/s
# Warmup Iteration  17: 308513715.045 ops/s
# Warmup Iteration  18: 308276736.754 ops/s
# Warmup Iteration  19: 307651614.977 ops/s
# Warmup Iteration  20: 309459676.193 ops/s
# Warmup Iteration  21: 307331994.716 ops/s
# Warmup Iteration  22: 308268461.151 ops/s
# Warmup Iteration  23: 308790976.936 ops/s
# Warmup Iteration  24: 307890770.001 ops/s
# Warmup Iteration  25: 307559087.951 ops/s
# Warmup Iteration  26: 307533719.067 ops/s
# Warmup Iteration  27: 308480484.118 ops/s
# Warmup Iteration  28: 308784628.760 ops/s
# Warmup Iteration  29: 308179148.892 ops/s
# Warmup Iteration  30: 308839294.857 ops/s
Iteration   1: 308115771.463 ops/s
Iteration   2: 308643213.978 ops/s
Iteration   3: 307631610.160 ops/s
Iteration   4: 308097574.291 ops/s
Iteration   5: 308417639.626 ops/s
Iteration   6: 309376384.725 ops/s
Iteration   7: 307917703.404 ops/s
Iteration   8: 307285091.778 ops/s
Iteration   9: 309616591.355 ops/s
Iteration  10: 309154052.340 ops/s
Iteration  11: 306658674.547 ops/s
Iteration  12: 308965933.037 ops/s
Iteration  13: 306802334.545 ops/s
Iteration  14: 308708571.191 ops/s
Iteration  15: 307965196.163 ops/s
Iteration  16: 308540937.582 ops/s
Iteration  17: 306806883.211 ops/s
Iteration  18: 308345219.000 ops/s
Iteration  19: 305447124.708 ops/s
Iteration  20: 307627977.537 ops/s
Iteration  21: 308354475.520 ops/s
Iteration  22: 308869087.300 ops/s
Iteration  23: 309293621.450 ops/s
Iteration  24: 308007971.293 ops/s
Iteration  25: 307966006.363 ops/s
Iteration  26: 306751722.854 ops/s
Iteration  27: 308221763.263 ops/s
Iteration  28: 307247310.746 ops/s
Iteration  29: 306199760.592 ops/s
Iteration  30: 308803692.671 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toImmutable":
  307994663.223 ±(99.9%) 666735.298 ops/s [Average]
  (min, avg, max) = (305447124.708, 307994663.223, 309616591.355), stdev = 997938.083
  CI (99.9%): [307327927.925, 308661398.521] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score        Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toImmutable  thrpt   30  307994663.223 ± 666735.298  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4934264.880 ops/s
# Warmup Iteration   2: 8694405.835 ops/s
# Warmup Iteration   3: 10398928.742 ops/s
# Warmup Iteration   4: 10441576.502 ops/s
# Warmup Iteration   5: 10395696.192 ops/s
# Warmup Iteration   6: 10420391.766 ops/s
# Warmup Iteration   7: 10420522.633 ops/s
# Warmup Iteration   8: 10385858.674 ops/s
# Warmup Iteration   9: 10424146.444 ops/s
# Warmup Iteration  10: 10432249.615 ops/s
# Warmup Iteration  11: 10442974.234 ops/s
# Warmup Iteration  12: 10454707.394 ops/s
# Warmup Iteration  13: 10409780.180 ops/s
# Warmup Iteration  14: 10427106.133 ops/s
# Warmup Iteration  15: 10432055.827 ops/s
# Warmup Iteration  16: 10450324.939 ops/s
# Warmup Iteration  17: 10387383.226 ops/s
# Warmup Iteration  18: 10454562.817 ops/s
# Warmup Iteration  19: 10419898.644 ops/s
# Warmup Iteration  20: 10420344.237 ops/s
# Warmup Iteration  21: 10402383.524 ops/s
# Warmup Iteration  22: 10355136.171 ops/s
# Warmup Iteration  23: 10391220.632 ops/s
# Warmup Iteration  24: 10390935.130 ops/s
# Warmup Iteration  25: 10418400.559 ops/s
# Warmup Iteration  26: 10399832.951 ops/s
# Warmup Iteration  27: 10388839.526 ops/s
# Warmup Iteration  28: 10342090.218 ops/s
# Warmup Iteration  29: 10371219.429 ops/s
# Warmup Iteration  30: 10360770.667 ops/s
Iteration   1: 10383849.576 ops/s
Iteration   2: 10377251.849 ops/s
Iteration   3: 10310081.872 ops/s
Iteration   4: 10344472.986 ops/s
Iteration   5: 10371811.928 ops/s
Iteration   6: 10419634.098 ops/s
Iteration   7: 10393221.539 ops/s
Iteration   8: 10437934.815 ops/s
Iteration   9: 10419657.965 ops/s
Iteration  10: 10442449.822 ops/s
Iteration  11: 10391913.261 ops/s
Iteration  12: 10407822.638 ops/s
Iteration  13: 10350197.644 ops/s
Iteration  14: 10375375.542 ops/s
Iteration  15: 10420178.119 ops/s
Iteration  16: 10383527.554 ops/s
Iteration  17: 10422232.219 ops/s
Iteration  18: 10488032.097 ops/s
Iteration  19: 10460671.399 ops/s
Iteration  20: 10414320.347 ops/s
Iteration  21: 10405556.956 ops/s
Iteration  22: 10443900.419 ops/s
Iteration  23: 10411717.709 ops/s
Iteration  24: 10459022.877 ops/s
Iteration  25: 10422462.929 ops/s
Iteration  26: 10456778.030 ops/s
Iteration  27: 10428524.393 ops/s
Iteration  28: 10468264.327 ops/s
Iteration  29: 10380138.466 ops/s
Iteration  30: 10415849.541 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toList":
  10410228.431 ±(99.9%) 26350.474 ops/s [Average]
  (min, avg, max) = (10310081.872, 10410228.431, 10488032.097), stdev = 39440.151
  CI (99.9%): [10383877.957, 10436578.904] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toList  thrpt   30  10410228.431 ± 26350.474  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 7204642.034 ops/s
# Warmup Iteration   2: 17194845.246 ops/s
# Warmup Iteration   3: 17216942.909 ops/s
# Warmup Iteration   4: 14068205.370 ops/s
# Warmup Iteration   5: 17210215.765 ops/s
# Warmup Iteration   6: 17235597.963 ops/s
# Warmup Iteration   7: 17256923.796 ops/s
# Warmup Iteration   8: 17203602.196 ops/s
# Warmup Iteration   9: 17274487.416 ops/s
# Warmup Iteration  10: 17265988.766 ops/s
# Warmup Iteration  11: 17270414.731 ops/s
# Warmup Iteration  12: 17198569.272 ops/s
# Warmup Iteration  13: 17237910.061 ops/s
# Warmup Iteration  14: 17278150.252 ops/s
# Warmup Iteration  15: 17221763.280 ops/s
# Warmup Iteration  16: 17258240.427 ops/s
# Warmup Iteration  17: 17273007.572 ops/s
# Warmup Iteration  18: 17242196.661 ops/s
# Warmup Iteration  19: 17255780.457 ops/s
# Warmup Iteration  20: 17261567.737 ops/s
# Warmup Iteration  21: 17275409.984 ops/s
# Warmup Iteration  22: 17280166.939 ops/s
# Warmup Iteration  23: 17248469.512 ops/s
# Warmup Iteration  24: 17280639.385 ops/s
# Warmup Iteration  25: 17236736.268 ops/s
# Warmup Iteration  26: 17268736.007 ops/s
# Warmup Iteration  27: 17243034.127 ops/s
# Warmup Iteration  28: 17239227.651 ops/s
# Warmup Iteration  29: 17265360.470 ops/s
# Warmup Iteration  30: 17208066.984 ops/s
Iteration   1: 17287729.122 ops/s
Iteration   2: 17202313.027 ops/s
Iteration   3: 17225114.036 ops/s
Iteration   4: 17221288.437 ops/s
Iteration   5: 17237602.867 ops/s
Iteration   6: 17253173.832 ops/s
Iteration   7: 17159172.113 ops/s
Iteration   8: 17232778.996 ops/s
Iteration   9: 17171864.758 ops/s
Iteration  10: 17202141.967 ops/s
Iteration  11: 17134042.390 ops/s
Iteration  12: 17215045.336 ops/s
Iteration  13: 17210043.791 ops/s
Iteration  14: 17267126.398 ops/s
Iteration  15: 17244125.379 ops/s
Iteration  16: 17257343.061 ops/s
Iteration  17: 17218749.173 ops/s
Iteration  18: 17219988.220 ops/s
Iteration  19: 17225443.083 ops/s
Iteration  20: 17288462.349 ops/s
Iteration  21: 17300147.235 ops/s
Iteration  22: 17253503.663 ops/s
Iteration  23: 17226328.628 ops/s
Iteration  24: 17254555.051 ops/s
Iteration  25: 17251359.760 ops/s
Iteration  26: 17212049.214 ops/s
Iteration  27: 17235786.129 ops/s
Iteration  28: 17273369.886 ops/s
Iteration  29: 17212216.452 ops/s
Iteration  30: 17235849.412 ops/s


Result "org.eclipse.collections.impl.bag.immutable.primitive.ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toSet":
  17230957.125 ±(99.9%) 24469.530 ops/s [Average]
  (min, avg, max) = (17134042.390, 17230957.125, 17300147.235), stdev = 36624.843
  CI (99.9%): [17206487.595, 17255426.655] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ImmutableBooleanSingletonBagTest._Benchmark.benchmark_toSet  thrpt   30  17230957.125 ± 24469.530  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3206959.403 ops/s
# Warmup Iteration   2: 7945341.721 ops/s
# Warmup Iteration   3: 7937112.445 ops/s
# Warmup Iteration   4: 6495690.170 ops/s
# Warmup Iteration   5: 7950291.564 ops/s
# Warmup Iteration   6: 7961590.996 ops/s
# Warmup Iteration   7: 7943237.720 ops/s
# Warmup Iteration   8: 7938688.316 ops/s
# Warmup Iteration   9: 7950271.231 ops/s
# Warmup Iteration  10: 7933419.546 ops/s
# Warmup Iteration  11: 7921027.796 ops/s
# Warmup Iteration  12: 7962306.084 ops/s
# Warmup Iteration  13: 7961600.660 ops/s
# Warmup Iteration  14: 7947041.684 ops/s
# Warmup Iteration  15: 7939709.502 ops/s
# Warmup Iteration  16: 7943998.119 ops/s
# Warmup Iteration  17: 7954101.943 ops/s
# Warmup Iteration  18: 7965099.796 ops/s
# Warmup Iteration  19: 7956957.023 ops/s
# Warmup Iteration  20: 7945908.102 ops/s
# Warmup Iteration  21: 7929849.667 ops/s
# Warmup Iteration  22: 7965762.525 ops/s
# Warmup Iteration  23: 7944444.531 ops/s
# Warmup Iteration  24: 7946240.870 ops/s
# Warmup Iteration  25: 7943279.855 ops/s
# Warmup Iteration  26: 7954030.737 ops/s
# Warmup Iteration  27: 7936621.521 ops/s
# Warmup Iteration  28: 7957031.731 ops/s
# Warmup Iteration  29: 7955334.078 ops/s
# Warmup Iteration  30: 7962402.631 ops/s
Iteration   1: 7948477.044 ops/s
Iteration   2: 7926903.752 ops/s
Iteration   3: 7934248.073 ops/s
Iteration   4: 7960903.568 ops/s
Iteration   5: 7956203.541 ops/s
Iteration   6: 7929982.633 ops/s
Iteration   7: 7964842.387 ops/s
Iteration   8: 7941944.983 ops/s
Iteration   9: 7964577.609 ops/s
Iteration  10: 7949344.966 ops/s
Iteration  11: 7976124.244 ops/s
Iteration  12: 7965949.195 ops/s
Iteration  13: 7958529.491 ops/s
Iteration  14: 7961087.797 ops/s
Iteration  15: 7940107.499 ops/s
Iteration  16: 7963449.131 ops/s
Iteration  17: 7946519.309 ops/s
Iteration  18: 7945362.871 ops/s
Iteration  19: 7942623.161 ops/s
Iteration  20: 7937012.799 ops/s
Iteration  21: 7950172.278 ops/s
Iteration  22: 7978923.421 ops/s
Iteration  23: 7937730.246 ops/s
Iteration  24: 7969286.747 ops/s
Iteration  25: 7957291.966 ops/s
Iteration  26: 7972383.277 ops/s
Iteration  27: 7951081.961 ops/s
Iteration  28: 7950462.674 ops/s
Iteration  29: 7942468.980 ops/s
Iteration  30: 7938796.424 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_add":
  7952093.068 ±(99.9%) 9178.786 ops/s [Average]
  (min, avg, max) = (7926903.752, 7952093.068, 7978923.421), stdev = 13738.376
  CI (99.9%): [7942914.281, 7961271.854] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_add  thrpt   30  7952093.068 ± 9178.786  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 150700.605 ops/s
# Warmup Iteration   2: 293871.975 ops/s
# Warmup Iteration   3: 322925.361 ops/s
# Warmup Iteration   4: 324607.800 ops/s
# Warmup Iteration   5: 270136.437 ops/s
# Warmup Iteration   6: 322219.440 ops/s
# Warmup Iteration   7: 324636.212 ops/s
# Warmup Iteration   8: 324757.899 ops/s
# Warmup Iteration   9: 324273.581 ops/s
# Warmup Iteration  10: 325532.378 ops/s
# Warmup Iteration  11: 324380.021 ops/s
# Warmup Iteration  12: 323950.450 ops/s
# Warmup Iteration  13: 324394.038 ops/s
# Warmup Iteration  14: 324287.547 ops/s
# Warmup Iteration  15: 325251.627 ops/s
# Warmup Iteration  16: 324195.400 ops/s
# Warmup Iteration  17: 325043.504 ops/s
# Warmup Iteration  18: 325150.593 ops/s
# Warmup Iteration  19: 324468.706 ops/s
# Warmup Iteration  20: 325148.878 ops/s
# Warmup Iteration  21: 324746.970 ops/s
# Warmup Iteration  22: 325438.524 ops/s
# Warmup Iteration  23: 324401.375 ops/s
# Warmup Iteration  24: 325586.834 ops/s
# Warmup Iteration  25: 325151.441 ops/s
# Warmup Iteration  26: 325272.265 ops/s
# Warmup Iteration  27: 325397.412 ops/s
# Warmup Iteration  28: 324721.145 ops/s
# Warmup Iteration  29: 324749.569 ops/s
# Warmup Iteration  30: 324979.384 ops/s
Iteration   1: 324517.461 ops/s
Iteration   2: 325311.622 ops/s
Iteration   3: 324541.566 ops/s
Iteration   4: 324519.250 ops/s
Iteration   5: 325099.670 ops/s
Iteration   6: 324704.481 ops/s
Iteration   7: 324176.961 ops/s
Iteration   8: 324929.577 ops/s
Iteration   9: 324119.673 ops/s
Iteration  10: 324900.283 ops/s
Iteration  11: 325099.475 ops/s
Iteration  12: 323831.697 ops/s
Iteration  13: 325590.471 ops/s
Iteration  14: 323802.775 ops/s
Iteration  15: 324966.755 ops/s
Iteration  16: 323584.865 ops/s
Iteration  17: 324549.310 ops/s
Iteration  18: 324895.022 ops/s
Iteration  19: 324948.798 ops/s
Iteration  20: 324340.723 ops/s
Iteration  21: 324517.762 ops/s
Iteration  22: 324339.768 ops/s
Iteration  23: 324173.638 ops/s
Iteration  24: 323948.361 ops/s
Iteration  25: 325641.679 ops/s
Iteration  26: 323712.794 ops/s
Iteration  27: 324460.086 ops/s
Iteration  28: 323821.109 ops/s
Iteration  29: 324268.284 ops/s
Iteration  30: 324681.461 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAll":
  324533.179 ±(99.9%) 360.733 ops/s [Average]
  (min, avg, max) = (323584.865, 324533.179, 325641.679), stdev = 539.929
  CI (99.9%): [324172.446, 324893.913] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_addAll  thrpt   30  324533.179 ± 360.733  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538222.968 ops/s
# Warmup Iteration   2: 1021263.011 ops/s
# Warmup Iteration   3: 1119071.245 ops/s
# Warmup Iteration   4: 1127491.846 ops/s
# Warmup Iteration   5: 985174.539 ops/s
# Warmup Iteration   6: 1078401.549 ops/s
# Warmup Iteration   7: 1129237.812 ops/s
# Warmup Iteration   8: 1127303.214 ops/s
# Warmup Iteration   9: 1128365.471 ops/s
# Warmup Iteration  10: 1128650.315 ops/s
# Warmup Iteration  11: 1127099.996 ops/s
# Warmup Iteration  12: 1127833.509 ops/s
# Warmup Iteration  13: 1127656.021 ops/s
# Warmup Iteration  14: 1129213.155 ops/s
# Warmup Iteration  15: 1130132.739 ops/s
# Warmup Iteration  16: 1130567.273 ops/s
# Warmup Iteration  17: 1125819.741 ops/s
# Warmup Iteration  18: 1128482.799 ops/s
# Warmup Iteration  19: 1126868.410 ops/s
# Warmup Iteration  20: 1127826.619 ops/s
# Warmup Iteration  21: 1128534.340 ops/s
# Warmup Iteration  22: 1131120.941 ops/s
# Warmup Iteration  23: 1130486.078 ops/s
# Warmup Iteration  24: 1128123.996 ops/s
# Warmup Iteration  25: 1126857.864 ops/s
# Warmup Iteration  26: 1128622.473 ops/s
# Warmup Iteration  27: 1126141.658 ops/s
# Warmup Iteration  28: 1126492.586 ops/s
# Warmup Iteration  29: 1128297.652 ops/s
# Warmup Iteration  30: 1128306.853 ops/s
Iteration   1: 1130392.811 ops/s
Iteration   2: 1127364.555 ops/s
Iteration   3: 1128429.063 ops/s
Iteration   4: 1129002.272 ops/s
Iteration   5: 1129046.591 ops/s
Iteration   6: 1124170.560 ops/s
Iteration   7: 1129155.702 ops/s
Iteration   8: 1128303.707 ops/s
Iteration   9: 1119830.065 ops/s
Iteration  10: 1128032.209 ops/s
Iteration  11: 1130198.812 ops/s
Iteration  12: 1127708.700 ops/s
Iteration  13: 1130660.051 ops/s
Iteration  14: 1128116.409 ops/s
Iteration  15: 1126530.230 ops/s
Iteration  16: 1129614.296 ops/s
Iteration  17: 1124138.581 ops/s
Iteration  18: 1131038.590 ops/s
Iteration  19: 1126902.476 ops/s
Iteration  20: 1127409.505 ops/s
Iteration  21: 1130373.888 ops/s
Iteration  22: 1125702.274 ops/s
Iteration  23: 1125109.290 ops/s
Iteration  24: 1132329.817 ops/s
Iteration  25: 1128818.090 ops/s
Iteration  26: 1125995.277 ops/s
Iteration  27: 1131259.205 ops/s
Iteration  28: 1127197.353 ops/s
Iteration  29: 1132654.886 ops/s
Iteration  30: 1127485.213 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addAllIterable":
  1128099.016 ±(99.9%) 1795.047 ops/s [Average]
  (min, avg, max) = (1119830.065, 1128099.016, 1132654.886), stdev = 2686.742
  CI (99.9%): [1126303.969, 1129894.063] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_addAllIterable  thrpt   30  1128099.016 ± 1795.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 353535.805 ops/s
# Warmup Iteration   2: 645242.292 ops/s
# Warmup Iteration   3: 721186.263 ops/s
# Warmup Iteration   4: 722894.711 ops/s
# Warmup Iteration   5: 727367.156 ops/s
# Warmup Iteration   6: 602925.427 ops/s
# Warmup Iteration   7: 725510.738 ops/s
# Warmup Iteration   8: 724597.267 ops/s
# Warmup Iteration   9: 726098.876 ops/s
# Warmup Iteration  10: 726716.013 ops/s
# Warmup Iteration  11: 725893.936 ops/s
# Warmup Iteration  12: 726643.759 ops/s
# Warmup Iteration  13: 722627.076 ops/s
# Warmup Iteration  14: 725809.299 ops/s
# Warmup Iteration  15: 725654.425 ops/s
# Warmup Iteration  16: 725263.976 ops/s
# Warmup Iteration  17: 725883.827 ops/s
# Warmup Iteration  18: 727137.190 ops/s
# Warmup Iteration  19: 724549.399 ops/s
# Warmup Iteration  20: 725579.643 ops/s
# Warmup Iteration  21: 726451.197 ops/s
# Warmup Iteration  22: 724487.068 ops/s
# Warmup Iteration  23: 724579.324 ops/s
# Warmup Iteration  24: 724294.251 ops/s
# Warmup Iteration  25: 725062.186 ops/s
# Warmup Iteration  26: 724126.125 ops/s
# Warmup Iteration  27: 725779.061 ops/s
# Warmup Iteration  28: 724530.871 ops/s
# Warmup Iteration  29: 726112.552 ops/s
# Warmup Iteration  30: 724715.939 ops/s
Iteration   1: 725784.507 ops/s
Iteration   2: 727241.312 ops/s
Iteration   3: 725363.881 ops/s
Iteration   4: 727362.042 ops/s
Iteration   5: 723963.234 ops/s
Iteration   6: 725433.796 ops/s
Iteration   7: 727283.650 ops/s
Iteration   8: 725731.008 ops/s
Iteration   9: 726799.698 ops/s
Iteration  10: 727057.122 ops/s
Iteration  11: 728503.646 ops/s
Iteration  12: 725460.462 ops/s
Iteration  13: 723792.468 ops/s
Iteration  14: 725211.324 ops/s
Iteration  15: 722416.611 ops/s
Iteration  16: 726089.911 ops/s
Iteration  17: 723956.675 ops/s
Iteration  18: 727137.662 ops/s
Iteration  19: 724548.007 ops/s
Iteration  20: 725298.042 ops/s
Iteration  21: 723983.623 ops/s
Iteration  22: 724966.726 ops/s
Iteration  23: 725857.426 ops/s
Iteration  24: 723549.775 ops/s
Iteration  25: 726381.143 ops/s
Iteration  26: 727248.264 ops/s
Iteration  27: 725739.391 ops/s
Iteration  28: 727884.761 ops/s
Iteration  29: 725676.636 ops/s
Iteration  30: 726878.334 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences":
  725753.371 ±(99.9%) 963.401 ops/s [Average]
  (min, avg, max) = (722416.611, 725753.371, 728503.646), stdev = 1441.973
  CI (99.9%): [724789.970, 726716.772] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_addOccurrences  thrpt   30  725753.371 ± 963.401  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773871.833 ops/s
# Warmup Iteration   2: 803452.335 ops/s
# Warmup Iteration   3: 1062126.163 ops/s
# Warmup Iteration   4: 1067068.238 ops/s
# Warmup Iteration   5: 1069262.368 ops/s
# Warmup Iteration   6: 1063444.167 ops/s
# Warmup Iteration   7: 1064426.320 ops/s
# Warmup Iteration   8: 1067462.133 ops/s
# Warmup Iteration   9: 1067236.601 ops/s
# Warmup Iteration  10: 1067357.981 ops/s
# Warmup Iteration  11: 1071027.537 ops/s
# Warmup Iteration  12: 894340.672 ops/s
# Warmup Iteration  13: 1066705.131 ops/s
# Warmup Iteration  14: 1068050.469 ops/s
# Warmup Iteration  15: 1069826.065 ops/s
# Warmup Iteration  16: 1066302.877 ops/s
# Warmup Iteration  17: 1138121.975 ops/s
# Warmup Iteration  18: 1132200.524 ops/s
# Warmup Iteration  19: 1134382.661 ops/s
# Warmup Iteration  20: 1137312.199 ops/s
# Warmup Iteration  21: 1139773.693 ops/s
# Warmup Iteration  22: 1135689.614 ops/s
# Warmup Iteration  23: 1138233.679 ops/s
# Warmup Iteration  24: 1137502.265 ops/s
# Warmup Iteration  25: 1137251.662 ops/s
# Warmup Iteration  26: 1134235.191 ops/s
# Warmup Iteration  27: 1139608.505 ops/s
# Warmup Iteration  28: 1136675.626 ops/s
# Warmup Iteration  29: 1139540.693 ops/s
# Warmup Iteration  30: 1137018.378 ops/s
Iteration   1: 1139751.220 ops/s
Iteration   2: 1138033.015 ops/s
Iteration   3: 1138587.231 ops/s
Iteration   4: 1140935.609 ops/s
Iteration   5: 1137644.900 ops/s
Iteration   6: 1137222.829 ops/s
Iteration   7: 1141002.987 ops/s
Iteration   8: 1142483.439 ops/s
Iteration   9: 1134425.708 ops/s
Iteration  10: 1137107.569 ops/s
Iteration  11: 1136081.029 ops/s
Iteration  12: 1141082.336 ops/s
Iteration  13: 1134693.279 ops/s
Iteration  14: 1136712.878 ops/s
Iteration  15: 1135498.514 ops/s
Iteration  16: 1137588.687 ops/s
Iteration  17: 1138321.177 ops/s
Iteration  18: 1141505.433 ops/s
Iteration  19: 1137138.071 ops/s
Iteration  20: 1140260.731 ops/s
Iteration  21: 1138108.443 ops/s
Iteration  22: 1136785.047 ops/s
Iteration  23: 1138765.360 ops/s
Iteration  24: 1136271.776 ops/s
Iteration  25: 1137662.766 ops/s
Iteration  26: 1138978.130 ops/s
Iteration  27: 1138352.604 ops/s
Iteration  28: 1137643.680 ops/s
Iteration  29: 1132798.994 ops/s
Iteration  30: 1135628.559 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_addOccurrences_throws":
  1137902.400 ±(99.9%) 1492.236 ops/s [Average]
  (min, avg, max) = (1132798.994, 1137902.400, 1142483.439), stdev = 2233.509
  CI (99.9%): [1136410.164, 1139394.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_addOccurrences_throws  thrpt   30  1137902.400 ± 1492.236  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1051849.362 ops/s
# Warmup Iteration   2: 2111922.825 ops/s
# Warmup Iteration   3: 2261763.677 ops/s
# Warmup Iteration   4: 2266261.776 ops/s
# Warmup Iteration   5: 1865082.248 ops/s
# Warmup Iteration   6: 2272817.475 ops/s
# Warmup Iteration   7: 2273082.216 ops/s
# Warmup Iteration   8: 2284540.168 ops/s
# Warmup Iteration   9: 2285093.461 ops/s
# Warmup Iteration  10: 2267971.353 ops/s
# Warmup Iteration  11: 2277963.190 ops/s
# Warmup Iteration  12: 2278404.909 ops/s
# Warmup Iteration  13: 2264221.044 ops/s
# Warmup Iteration  14: 2278229.598 ops/s
# Warmup Iteration  15: 2288055.916 ops/s
# Warmup Iteration  16: 2281410.849 ops/s
# Warmup Iteration  17: 2277942.815 ops/s
# Warmup Iteration  18: 2268589.135 ops/s
# Warmup Iteration  19: 2280139.995 ops/s
# Warmup Iteration  20: 2285300.248 ops/s
# Warmup Iteration  21: 2285908.610 ops/s
# Warmup Iteration  22: 2276389.434 ops/s
# Warmup Iteration  23: 2276020.920 ops/s
# Warmup Iteration  24: 2286495.851 ops/s
# Warmup Iteration  25: 2283382.976 ops/s
# Warmup Iteration  26: 2288814.825 ops/s
# Warmup Iteration  27: 2279783.703 ops/s
# Warmup Iteration  28: 2271088.622 ops/s
# Warmup Iteration  29: 2278370.839 ops/s
# Warmup Iteration  30: 2282090.140 ops/s
Iteration   1: 2265959.694 ops/s
Iteration   2: 2297410.062 ops/s
Iteration   3: 2273917.012 ops/s
Iteration   4: 2271375.309 ops/s
Iteration   5: 2278755.519 ops/s
Iteration   6: 2290630.438 ops/s
Iteration   7: 2281615.270 ops/s
Iteration   8: 2281664.878 ops/s
Iteration   9: 2293941.742 ops/s
Iteration  10: 2255314.787 ops/s
Iteration  11: 2293355.473 ops/s
Iteration  12: 2272240.127 ops/s
Iteration  13: 2279510.678 ops/s
Iteration  14: 2273662.808 ops/s
Iteration  15: 2271934.801 ops/s
Iteration  16: 2275748.323 ops/s
Iteration  17: 2261761.697 ops/s
Iteration  18: 2277102.982 ops/s
Iteration  19: 2275962.771 ops/s
Iteration  20: 2311399.894 ops/s
Iteration  21: 2274176.052 ops/s
Iteration  22: 2288611.900 ops/s
Iteration  23: 2277695.639 ops/s
Iteration  24: 2282326.246 ops/s
Iteration  25: 2256824.358 ops/s
Iteration  26: 2282558.600 ops/s
Iteration  27: 2271345.160 ops/s
Iteration  28: 2282927.337 ops/s
Iteration  29: 2269768.986 ops/s
Iteration  30: 2295204.101 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByMutating":
  2278823.421 ±(99.9%) 8117.456 ops/s [Average]
  (min, avg, max) = (2255314.787, 2278823.421, 2311399.894), stdev = 12149.827
  CI (99.9%): [2270705.966, 2286940.877] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  2278823.421 ± 8117.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875948.135 ops/s
# Warmup Iteration   2: 1584029.228 ops/s
# Warmup Iteration   3: 1752253.922 ops/s
# Warmup Iteration   4: 1757099.771 ops/s
# Warmup Iteration   5: 1698168.131 ops/s
# Warmup Iteration   6: 1507763.751 ops/s
# Warmup Iteration   7: 1755793.673 ops/s
# Warmup Iteration   8: 1764956.176 ops/s
# Warmup Iteration   9: 1753861.432 ops/s
# Warmup Iteration  10: 1767255.147 ops/s
# Warmup Iteration  11: 1767766.672 ops/s
# Warmup Iteration  12: 1757784.644 ops/s
# Warmup Iteration  13: 1763669.182 ops/s
# Warmup Iteration  14: 1756399.395 ops/s
# Warmup Iteration  15: 1760206.434 ops/s
# Warmup Iteration  16: 1769592.796 ops/s
# Warmup Iteration  17: 1751291.805 ops/s
# Warmup Iteration  18: 1755698.031 ops/s
# Warmup Iteration  19: 1760171.180 ops/s
# Warmup Iteration  20: 1772035.108 ops/s
# Warmup Iteration  21: 1757665.456 ops/s
# Warmup Iteration  22: 1760260.357 ops/s
# Warmup Iteration  23: 1760834.440 ops/s
# Warmup Iteration  24: 1761035.850 ops/s
# Warmup Iteration  25: 1763634.213 ops/s
# Warmup Iteration  26: 1754529.432 ops/s
# Warmup Iteration  27: 1767583.676 ops/s
# Warmup Iteration  28: 1764937.951 ops/s
# Warmup Iteration  29: 1764343.802 ops/s
# Warmup Iteration  30: 1758086.235 ops/s
Iteration   1: 1757272.675 ops/s
Iteration   2: 1771650.429 ops/s
Iteration   3: 1774045.712 ops/s
Iteration   4: 1772325.528 ops/s
Iteration   5: 1756573.422 ops/s
Iteration   6: 1769416.713 ops/s
Iteration   7: 1767518.360 ops/s
Iteration   8: 1771679.985 ops/s
Iteration   9: 1766035.628 ops/s
Iteration  10: 1763051.072 ops/s
Iteration  11: 1772359.013 ops/s
Iteration  12: 1762559.188 ops/s
Iteration  13: 1771839.393 ops/s
Iteration  14: 1765598.564 ops/s
Iteration  15: 1770925.445 ops/s
Iteration  16: 1757495.079 ops/s
Iteration  17: 1770657.133 ops/s
Iteration  18: 1768744.957 ops/s
Iteration  19: 1760561.548 ops/s
Iteration  20: 1767185.936 ops/s
Iteration  21: 1768194.171 ops/s
Iteration  22: 1764743.043 ops/s
Iteration  23: 1761482.079 ops/s
Iteration  24: 1754854.235 ops/s
Iteration  25: 1757400.073 ops/s
Iteration  26: 1766373.289 ops/s
Iteration  27: 1758498.793 ops/s
Iteration  28: 1768869.478 ops/s
Iteration  29: 1752411.443 ops/s
Iteration  30: 1756255.256 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_aggregateByNonMutating":
  1764885.921 ±(99.9%) 4174.177 ops/s [Average]
  (min, avg, max) = (1752411.443, 1764885.921, 1774045.712), stdev = 6247.712
  CI (99.9%): [1760711.745, 1769060.098] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1764885.921 ± 4174.177  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1388940.877 ops/s
# Warmup Iteration   2: 2648842.018 ops/s
# Warmup Iteration   3: 2896145.029 ops/s
# Warmup Iteration   4: 2920567.919 ops/s
# Warmup Iteration   5: 2376993.681 ops/s
# Warmup Iteration   6: 2918208.505 ops/s
# Warmup Iteration   7: 2927898.773 ops/s
# Warmup Iteration   8: 2919017.949 ops/s
# Warmup Iteration   9: 2917592.233 ops/s
# Warmup Iteration  10: 2925473.638 ops/s
# Warmup Iteration  11: 2923418.017 ops/s
# Warmup Iteration  12: 2914055.535 ops/s
# Warmup Iteration  13: 2922764.806 ops/s
# Warmup Iteration  14: 2927091.071 ops/s
# Warmup Iteration  15: 2923077.897 ops/s
# Warmup Iteration  16: 2927983.074 ops/s
# Warmup Iteration  17: 2921778.183 ops/s
# Warmup Iteration  18: 2921239.744 ops/s
# Warmup Iteration  19: 2925057.752 ops/s
# Warmup Iteration  20: 2925141.924 ops/s
# Warmup Iteration  21: 2923788.914 ops/s
# Warmup Iteration  22: 2928705.696 ops/s
# Warmup Iteration  23: 2924690.761 ops/s
# Warmup Iteration  24: 2930347.606 ops/s
# Warmup Iteration  25: 2924071.796 ops/s
# Warmup Iteration  26: 2922505.928 ops/s
# Warmup Iteration  27: 2931433.466 ops/s
# Warmup Iteration  28: 2927263.687 ops/s
# Warmup Iteration  29: 2930801.678 ops/s
# Warmup Iteration  30: 2920151.481 ops/s
Iteration   1: 2915179.028 ops/s
Iteration   2: 2934242.236 ops/s
Iteration   3: 2919966.140 ops/s
Iteration   4: 2928390.702 ops/s
Iteration   5: 2923315.614 ops/s
Iteration   6: 2938503.210 ops/s
Iteration   7: 2928291.222 ops/s
Iteration   8: 2930749.161 ops/s
Iteration   9: 2928739.598 ops/s
Iteration  10: 2918776.060 ops/s
Iteration  11: 2932238.301 ops/s
Iteration  12: 2928354.664 ops/s
Iteration  13: 2926058.437 ops/s
Iteration  14: 2937125.932 ops/s
Iteration  15: 2914356.767 ops/s
Iteration  16: 2920973.093 ops/s
Iteration  17: 2931231.902 ops/s
Iteration  18: 2918829.779 ops/s
Iteration  19: 2918291.983 ops/s
Iteration  20: 2927256.027 ops/s
Iteration  21: 2927924.572 ops/s
Iteration  22: 2928300.987 ops/s
Iteration  23: 2923868.580 ops/s
Iteration  24: 2920345.312 ops/s
Iteration  25: 2921089.744 ops/s
Iteration  26: 2926573.536 ops/s
Iteration  27: 2936863.869 ops/s
Iteration  28: 2924524.212 ops/s
Iteration  29: 2926153.512 ops/s
Iteration  30: 2932811.523 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfy":
  2926310.857 ±(99.9%) 4263.093 ops/s [Average]
  (min, avg, max) = (2914356.767, 2926310.857, 2938503.210), stdev = 6380.798
  CI (99.9%): [2922047.764, 2930573.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_allSatisfy  thrpt   30  2926310.857 ± 4263.093  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1351160.453 ops/s
# Warmup Iteration   2: 2527626.624 ops/s
# Warmup Iteration   3: 2792643.755 ops/s
# Warmup Iteration   4: 2811503.668 ops/s
# Warmup Iteration   5: 2467425.298 ops/s
# Warmup Iteration   6: 2643225.857 ops/s
# Warmup Iteration   7: 2814702.585 ops/s
# Warmup Iteration   8: 2814777.816 ops/s
# Warmup Iteration   9: 2807306.349 ops/s
# Warmup Iteration  10: 2811729.689 ops/s
# Warmup Iteration  11: 2814514.802 ops/s
# Warmup Iteration  12: 2808100.719 ops/s
# Warmup Iteration  13: 2808746.551 ops/s
# Warmup Iteration  14: 2809467.409 ops/s
# Warmup Iteration  15: 2805770.144 ops/s
# Warmup Iteration  16: 2808350.517 ops/s
# Warmup Iteration  17: 2803593.180 ops/s
# Warmup Iteration  18: 2799781.255 ops/s
# Warmup Iteration  19: 2814920.164 ops/s
# Warmup Iteration  20: 2803251.123 ops/s
# Warmup Iteration  21: 2800712.657 ops/s
# Warmup Iteration  22: 2813722.424 ops/s
# Warmup Iteration  23: 2805201.610 ops/s
# Warmup Iteration  24: 2813831.539 ops/s
# Warmup Iteration  25: 2803662.386 ops/s
# Warmup Iteration  26: 2805020.899 ops/s
# Warmup Iteration  27: 2810106.806 ops/s
# Warmup Iteration  28: 2807897.700 ops/s
# Warmup Iteration  29: 2801876.419 ops/s
# Warmup Iteration  30: 2807510.218 ops/s
Iteration   1: 2814833.378 ops/s
Iteration   2: 2799255.431 ops/s
Iteration   3: 2805122.148 ops/s
Iteration   4: 2800301.117 ops/s
Iteration   5: 2799691.548 ops/s
Iteration   6: 2801788.321 ops/s
Iteration   7: 2806658.349 ops/s
Iteration   8: 2818118.323 ops/s
Iteration   9: 2815106.453 ops/s
Iteration  10: 2804491.436 ops/s
Iteration  11: 2815094.758 ops/s
Iteration  12: 2815728.933 ops/s
Iteration  13: 2806343.297 ops/s
Iteration  14: 2814974.452 ops/s
Iteration  15: 2813255.974 ops/s
Iteration  16: 2810506.987 ops/s
Iteration  17: 2809254.335 ops/s
Iteration  18: 2813993.968 ops/s
Iteration  19: 2809879.381 ops/s
Iteration  20: 2807849.784 ops/s
Iteration  21: 2805698.381 ops/s
Iteration  22: 2810518.768 ops/s
Iteration  23: 2815036.968 ops/s
Iteration  24: 2812806.474 ops/s
Iteration  25: 2810924.057 ops/s
Iteration  26: 2812209.518 ops/s
Iteration  27: 2804206.285 ops/s
Iteration  28: 2815419.732 ops/s
Iteration  29: 2803896.268 ops/s
Iteration  30: 2807682.880 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWith":
  2809354.924 ±(99.9%) 3603.444 ops/s [Average]
  (min, avg, max) = (2799255.431, 2809354.924, 2818118.323), stdev = 5393.466
  CI (99.9%): [2805751.480, 2812958.367] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2809354.924 ± 3603.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1030377.252 ops/s
# Warmup Iteration   2: 2622268.149 ops/s
# Warmup Iteration   3: 2865761.165 ops/s
# Warmup Iteration   4: 2876635.467 ops/s
# Warmup Iteration   5: 2373709.980 ops/s
# Warmup Iteration   6: 2883645.346 ops/s
# Warmup Iteration   7: 2877759.440 ops/s
# Warmup Iteration   8: 2878745.133 ops/s
# Warmup Iteration   9: 2891722.763 ops/s
# Warmup Iteration  10: 2881735.158 ops/s
# Warmup Iteration  11: 2883159.330 ops/s
# Warmup Iteration  12: 2879947.362 ops/s
# Warmup Iteration  13: 2883819.314 ops/s
# Warmup Iteration  14: 2879288.075 ops/s
# Warmup Iteration  15: 2882083.610 ops/s
# Warmup Iteration  16: 2879033.847 ops/s
# Warmup Iteration  17: 2880216.698 ops/s
# Warmup Iteration  18: 2879824.581 ops/s
# Warmup Iteration  19: 2877317.098 ops/s
# Warmup Iteration  20: 2880774.885 ops/s
# Warmup Iteration  21: 2879014.611 ops/s
# Warmup Iteration  22: 2879547.169 ops/s
# Warmup Iteration  23: 2878418.324 ops/s
# Warmup Iteration  24: 2881155.229 ops/s
# Warmup Iteration  25: 2886714.248 ops/s
# Warmup Iteration  26: 2878549.429 ops/s
# Warmup Iteration  27: 2883227.318 ops/s
# Warmup Iteration  28: 2873279.314 ops/s
# Warmup Iteration  29: 2885600.363 ops/s
# Warmup Iteration  30: 2881977.696 ops/s
Iteration   1: 2879265.775 ops/s
Iteration   2: 2893247.938 ops/s
Iteration   3: 2882026.818 ops/s
Iteration   4: 2890454.426 ops/s
Iteration   5: 2879147.833 ops/s
Iteration   6: 2883403.429 ops/s
Iteration   7: 2882181.069 ops/s
Iteration   8: 2877253.402 ops/s
Iteration   9: 2876460.265 ops/s
Iteration  10: 2891839.186 ops/s
Iteration  11: 2876607.600 ops/s
Iteration  12: 2872458.552 ops/s
Iteration  13: 2880799.160 ops/s
Iteration  14: 2886288.854 ops/s
Iteration  15: 2879714.929 ops/s
Iteration  16: 2880685.174 ops/s
Iteration  17: 2878585.885 ops/s
Iteration  18: 2883334.257 ops/s
Iteration  19: 2881170.449 ops/s
Iteration  20: 2876005.449 ops/s
Iteration  21: 2879880.122 ops/s
Iteration  22: 2879552.863 ops/s
Iteration  23: 2881744.379 ops/s
Iteration  24: 2880425.273 ops/s
Iteration  25: 2889702.047 ops/s
Iteration  26: 2877944.752 ops/s
Iteration  27: 2878796.854 ops/s
Iteration  28: 2881442.212 ops/s
Iteration  29: 2882617.706 ops/s
Iteration  30: 2876487.620 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences":
  2881317.476 ±(99.9%) 3232.273 ops/s [Average]
  (min, avg, max) = (2872458.552, 2881317.476, 2893247.938), stdev = 4837.914
  CI (99.9%): [2878085.203, 2884549.748] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_allSatisfyWithOccurrences  thrpt   30  2881317.476 ± 3232.273  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1382272.154 ops/s
# Warmup Iteration   2: 2656438.148 ops/s
# Warmup Iteration   3: 2908632.504 ops/s
# Warmup Iteration   4: 2925100.831 ops/s
# Warmup Iteration   5: 2381988.549 ops/s
# Warmup Iteration   6: 2921820.727 ops/s
# Warmup Iteration   7: 2929341.815 ops/s
# Warmup Iteration   8: 2922318.492 ops/s
# Warmup Iteration   9: 2926526.803 ops/s
# Warmup Iteration  10: 2920018.368 ops/s
# Warmup Iteration  11: 2922337.380 ops/s
# Warmup Iteration  12: 2922054.464 ops/s
# Warmup Iteration  13: 2922815.422 ops/s
# Warmup Iteration  14: 2924213.254 ops/s
# Warmup Iteration  15: 2921877.287 ops/s
# Warmup Iteration  16: 2921449.408 ops/s
# Warmup Iteration  17: 2924690.809 ops/s
# Warmup Iteration  18: 2925398.292 ops/s
# Warmup Iteration  19: 2926696.650 ops/s
# Warmup Iteration  20: 2925026.376 ops/s
# Warmup Iteration  21: 2926030.413 ops/s
# Warmup Iteration  22: 2928585.762 ops/s
# Warmup Iteration  23: 2923988.809 ops/s
# Warmup Iteration  24: 2927744.755 ops/s
# Warmup Iteration  25: 2914829.530 ops/s
# Warmup Iteration  26: 2914349.333 ops/s
# Warmup Iteration  27: 2929527.662 ops/s
# Warmup Iteration  28: 2921624.931 ops/s
# Warmup Iteration  29: 2927329.729 ops/s
# Warmup Iteration  30: 2914596.310 ops/s
Iteration   1: 2917397.763 ops/s
Iteration   2: 2912582.851 ops/s
Iteration   3: 2929303.702 ops/s
Iteration   4: 2919338.816 ops/s
Iteration   5: 2917032.779 ops/s
Iteration   6: 2925227.031 ops/s
Iteration   7: 2900223.260 ops/s
Iteration   8: 2920370.055 ops/s
Iteration   9: 2930773.320 ops/s
Iteration  10: 2920568.365 ops/s
Iteration  11: 2918079.813 ops/s
Iteration  12: 2923343.361 ops/s
Iteration  13: 2919367.958 ops/s
Iteration  14: 2932028.934 ops/s
Iteration  15: 2921496.577 ops/s
Iteration  16: 2929652.322 ops/s
Iteration  17: 2920062.024 ops/s
Iteration  18: 2923977.742 ops/s
Iteration  19: 2913879.697 ops/s
Iteration  20: 2918952.260 ops/s
Iteration  21: 2924569.296 ops/s
Iteration  22: 2918348.357 ops/s
Iteration  23: 2924249.256 ops/s
Iteration  24: 2909222.694 ops/s
Iteration  25: 2915428.413 ops/s
Iteration  26: 2922460.066 ops/s
Iteration  27: 2907762.665 ops/s
Iteration  28: 2911166.141 ops/s
Iteration  29: 2922820.574 ops/s
Iteration  30: 2923429.354 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfy":
  2919770.515 ±(99.9%) 4696.481 ops/s [Average]
  (min, avg, max) = (2900223.260, 2919770.515, 2932028.934), stdev = 7029.472
  CI (99.9%): [2915074.034, 2924466.996] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_anySatisfy  thrpt   30  2919770.515 ± 4696.481  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1356180.209 ops/s
# Warmup Iteration   2: 2574816.387 ops/s
# Warmup Iteration   3: 2827382.612 ops/s
# Warmup Iteration   4: 2837206.488 ops/s
# Warmup Iteration   5: 2427059.751 ops/s
# Warmup Iteration   6: 2739267.562 ops/s
# Warmup Iteration   7: 2853381.363 ops/s
# Warmup Iteration   8: 2853703.020 ops/s
# Warmup Iteration   9: 2851357.372 ops/s
# Warmup Iteration  10: 2850222.700 ops/s
# Warmup Iteration  11: 2859421.091 ops/s
# Warmup Iteration  12: 2855631.979 ops/s
# Warmup Iteration  13: 2849629.967 ops/s
# Warmup Iteration  14: 2855983.602 ops/s
# Warmup Iteration  15: 2858929.559 ops/s
# Warmup Iteration  16: 2853617.746 ops/s
# Warmup Iteration  17: 2847084.098 ops/s
# Warmup Iteration  18: 2845917.448 ops/s
# Warmup Iteration  19: 2851763.827 ops/s
# Warmup Iteration  20: 2853650.764 ops/s
# Warmup Iteration  21: 2855005.930 ops/s
# Warmup Iteration  22: 2854621.643 ops/s
# Warmup Iteration  23: 2846109.486 ops/s
# Warmup Iteration  24: 2851203.843 ops/s
# Warmup Iteration  25: 2846653.522 ops/s
# Warmup Iteration  26: 2855537.809 ops/s
# Warmup Iteration  27: 2855797.135 ops/s
# Warmup Iteration  28: 2854196.226 ops/s
# Warmup Iteration  29: 2853032.676 ops/s
# Warmup Iteration  30: 2855454.917 ops/s
Iteration   1: 2846221.483 ops/s
Iteration   2: 2847585.448 ops/s
Iteration   3: 2863411.116 ops/s
Iteration   4: 2850997.085 ops/s
Iteration   5: 2837841.717 ops/s
Iteration   6: 2850533.584 ops/s
Iteration   7: 2842974.847 ops/s
Iteration   8: 2859628.273 ops/s
Iteration   9: 2844851.354 ops/s
Iteration  10: 2852458.044 ops/s
Iteration  11: 2854167.472 ops/s
Iteration  12: 2842112.255 ops/s
Iteration  13: 2853094.704 ops/s
Iteration  14: 2845044.982 ops/s
Iteration  15: 2854902.938 ops/s
Iteration  16: 2849889.146 ops/s
Iteration  17: 2854632.955 ops/s
Iteration  18: 2844574.627 ops/s
Iteration  19: 2850078.486 ops/s
Iteration  20: 2851232.602 ops/s
Iteration  21: 2856783.082 ops/s
Iteration  22: 2868402.752 ops/s
Iteration  23: 2852714.059 ops/s
Iteration  24: 2852572.347 ops/s
Iteration  25: 2848919.104 ops/s
Iteration  26: 2855876.557 ops/s
Iteration  27: 2849428.046 ops/s
Iteration  28: 2863303.538 ops/s
Iteration  29: 2856124.240 ops/s
Iteration  30: 2838752.801 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWith":
  2851303.655 ±(99.9%) 4705.586 ops/s [Average]
  (min, avg, max) = (2837841.717, 2851303.655, 2868402.752), stdev = 7043.100
  CI (99.9%): [2846598.069, 2856009.241] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2851303.655 ± 4705.586  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1607118.829 ops/s
# Warmup Iteration   2: 1840604.698 ops/s
# Warmup Iteration   3: 2235850.869 ops/s
# Warmup Iteration   4: 2246375.017 ops/s
# Warmup Iteration   5: 2047139.336 ops/s
# Warmup Iteration   6: 2065426.940 ops/s
# Warmup Iteration   7: 2253872.994 ops/s
# Warmup Iteration   8: 2255919.730 ops/s
# Warmup Iteration   9: 2253452.195 ops/s
# Warmup Iteration  10: 2254683.641 ops/s
# Warmup Iteration  11: 2255393.008 ops/s
# Warmup Iteration  12: 2254937.692 ops/s
# Warmup Iteration  13: 2249248.164 ops/s
# Warmup Iteration  14: 2256027.871 ops/s
# Warmup Iteration  15: 2250863.380 ops/s
# Warmup Iteration  16: 2251669.670 ops/s
# Warmup Iteration  17: 2251522.555 ops/s
# Warmup Iteration  18: 2252436.149 ops/s
# Warmup Iteration  19: 2251541.737 ops/s
# Warmup Iteration  20: 2256546.749 ops/s
# Warmup Iteration  21: 2253101.363 ops/s
# Warmup Iteration  22: 2256016.894 ops/s
# Warmup Iteration  23: 2246306.751 ops/s
# Warmup Iteration  24: 2250804.471 ops/s
# Warmup Iteration  25: 2248650.865 ops/s
# Warmup Iteration  26: 2248566.918 ops/s
# Warmup Iteration  27: 2256937.811 ops/s
# Warmup Iteration  28: 2254370.163 ops/s
# Warmup Iteration  29: 2256119.930 ops/s
# Warmup Iteration  30: 2248273.778 ops/s
Iteration   1: 2252241.944 ops/s
Iteration   2: 2247960.147 ops/s
Iteration   3: 2246191.144 ops/s
Iteration   4: 2249468.560 ops/s
Iteration   5: 2253459.075 ops/s
Iteration   6: 2254798.333 ops/s
Iteration   7: 2258935.159 ops/s
Iteration   8: 2248572.645 ops/s
Iteration   9: 2253865.137 ops/s
Iteration  10: 2259898.788 ops/s
Iteration  11: 2258395.404 ops/s
Iteration  12: 2251462.616 ops/s
Iteration  13: 2266771.738 ops/s
Iteration  14: 2257958.598 ops/s
Iteration  15: 2252397.559 ops/s
Iteration  16: 2256896.885 ops/s
Iteration  17: 2258145.752 ops/s
Iteration  18: 2260764.836 ops/s
Iteration  19: 2252947.523 ops/s
Iteration  20: 2261136.257 ops/s
Iteration  21: 2252971.901 ops/s
Iteration  22: 2256339.891 ops/s
Iteration  23: 2251590.120 ops/s
Iteration  24: 2256387.938 ops/s
Iteration  25: 2253866.695 ops/s
Iteration  26: 2256341.166 ops/s
Iteration  27: 2254392.199 ops/s
Iteration  28: 2246430.246 ops/s
Iteration  29: 2257200.941 ops/s
Iteration  30: 2257848.952 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences":
  2254854.605 ±(99.9%) 3102.315 ops/s [Average]
  (min, avg, max) = (2246191.144, 2254854.605, 2266771.738), stdev = 4643.400
  CI (99.9%): [2251752.289, 2257956.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_anySatisfyWithOccurrences  thrpt   30  2254854.605 ± 3102.315  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1058703.659 ops/s
# Warmup Iteration   2: 2403032.724 ops/s
# Warmup Iteration   3: 2435670.033 ops/s
# Warmup Iteration   4: 2019763.775 ops/s
# Warmup Iteration   5: 2441462.733 ops/s
# Warmup Iteration   6: 2440710.029 ops/s
# Warmup Iteration   7: 2442427.913 ops/s
# Warmup Iteration   8: 2438510.480 ops/s
# Warmup Iteration   9: 2440840.191 ops/s
# Warmup Iteration  10: 2441041.171 ops/s
# Warmup Iteration  11: 2448377.513 ops/s
# Warmup Iteration  12: 2441219.579 ops/s
# Warmup Iteration  13: 2444811.007 ops/s
# Warmup Iteration  14: 2448765.298 ops/s
# Warmup Iteration  15: 2438977.766 ops/s
# Warmup Iteration  16: 2440218.146 ops/s
# Warmup Iteration  17: 2444860.679 ops/s
# Warmup Iteration  18: 2431461.702 ops/s
# Warmup Iteration  19: 2443383.521 ops/s
# Warmup Iteration  20: 2442314.663 ops/s
# Warmup Iteration  21: 2434505.714 ops/s
# Warmup Iteration  22: 2437210.418 ops/s
# Warmup Iteration  23: 2438262.713 ops/s
# Warmup Iteration  24: 2433776.261 ops/s
# Warmup Iteration  25: 2437338.373 ops/s
# Warmup Iteration  26: 2428927.808 ops/s
# Warmup Iteration  27: 2432154.487 ops/s
# Warmup Iteration  28: 2442173.468 ops/s
# Warmup Iteration  29: 2434352.743 ops/s
# Warmup Iteration  30: 2438623.019 ops/s
Iteration   1: 2439886.385 ops/s
Iteration   2: 2434380.481 ops/s
Iteration   3: 2432475.159 ops/s
Iteration   4: 2435855.803 ops/s
Iteration   5: 2436714.761 ops/s
Iteration   6: 2432479.661 ops/s
Iteration   7: 2432479.323 ops/s
Iteration   8: 2443830.983 ops/s
Iteration   9: 2437735.329 ops/s
Iteration  10: 2437346.758 ops/s
Iteration  11: 2439466.358 ops/s
Iteration  12: 2434729.775 ops/s
Iteration  13: 2430576.311 ops/s
Iteration  14: 2437039.447 ops/s
Iteration  15: 2438683.912 ops/s
Iteration  16: 2444657.807 ops/s
Iteration  17: 2439403.938 ops/s
Iteration  18: 2437740.437 ops/s
Iteration  19: 2434652.223 ops/s
Iteration  20: 2437170.451 ops/s
Iteration  21: 2431162.959 ops/s
Iteration  22: 2439383.688 ops/s
Iteration  23: 2442773.535 ops/s
Iteration  24: 2437827.386 ops/s
Iteration  25: 2438527.207 ops/s
Iteration  26: 2438026.876 ops/s
Iteration  27: 2435913.928 ops/s
Iteration  28: 2442437.410 ops/s
Iteration  29: 2430318.733 ops/s
Iteration  30: 2449675.063 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendString":
  2437445.070 ±(99.9%) 2931.612 ops/s [Average]
  (min, avg, max) = (2430318.733, 2437445.070, 2449675.063), stdev = 4387.899
  CI (99.9%): [2434513.457, 2440376.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_appendString  thrpt   30  2437445.070 ± 2931.612  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98506.614 ops/s
# Warmup Iteration   2: 104249.002 ops/s
# Warmup Iteration   3: 119999.871 ops/s
# Warmup Iteration   4: 132527.883 ops/s
# Warmup Iteration   5: 131957.787 ops/s
# Warmup Iteration   6: 132594.286 ops/s
# Warmup Iteration   7: 131726.651 ops/s
# Warmup Iteration   8: 132493.883 ops/s
# Warmup Iteration   9: 132427.155 ops/s
# Warmup Iteration  10: 132151.798 ops/s
# Warmup Iteration  11: 132231.068 ops/s
# Warmup Iteration  12: 132612.843 ops/s
# Warmup Iteration  13: 132477.203 ops/s
# Warmup Iteration  14: 126629.890 ops/s
# Warmup Iteration  15: 116151.437 ops/s
# Warmup Iteration  16: 132527.434 ops/s
# Warmup Iteration  17: 138898.872 ops/s
# Warmup Iteration  18: 139106.566 ops/s
# Warmup Iteration  19: 139129.216 ops/s
# Warmup Iteration  20: 139130.319 ops/s
# Warmup Iteration  21: 139524.289 ops/s
# Warmup Iteration  22: 138749.283 ops/s
# Warmup Iteration  23: 139259.910 ops/s
# Warmup Iteration  24: 139102.245 ops/s
# Warmup Iteration  25: 138887.623 ops/s
# Warmup Iteration  26: 139181.555 ops/s
# Warmup Iteration  27: 139072.610 ops/s
# Warmup Iteration  28: 139238.760 ops/s
# Warmup Iteration  29: 139258.699 ops/s
# Warmup Iteration  30: 138959.692 ops/s
Iteration   1: 139376.677 ops/s
Iteration   2: 138928.711 ops/s
Iteration   3: 138896.093 ops/s
Iteration   4: 139071.607 ops/s
Iteration   5: 138951.197 ops/s
Iteration   6: 139004.900 ops/s
Iteration   7: 139315.993 ops/s
Iteration   8: 138987.969 ops/s
Iteration   9: 139203.592 ops/s
Iteration  10: 139161.876 ops/s
Iteration  11: 139602.420 ops/s
Iteration  12: 139151.835 ops/s
Iteration  13: 139147.968 ops/s
Iteration  14: 139613.476 ops/s
Iteration  15: 139325.083 ops/s
Iteration  16: 139114.305 ops/s
Iteration  17: 139408.446 ops/s
Iteration  18: 139463.191 ops/s
Iteration  19: 139175.942 ops/s
Iteration  20: 139215.379 ops/s
Iteration  21: 138852.596 ops/s
Iteration  22: 139244.931 ops/s
Iteration  23: 138729.992 ops/s
Iteration  24: 138367.003 ops/s
Iteration  25: 138908.311 ops/s
Iteration  26: 138811.335 ops/s
Iteration  27: 138896.244 ops/s
Iteration  28: 138345.870 ops/s
Iteration  29: 138820.485 ops/s
Iteration  30: 139084.440 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringThrows":
  139072.595 ±(99.9%) 200.581 ops/s [Average]
  (min, avg, max) = (138345.870, 139072.595, 139613.476), stdev = 300.220
  CI (99.9%): [138872.014, 139273.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_appendStringThrows  thrpt   30  139072.595 ± 200.581  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1046614.401 ops/s
# Warmup Iteration   2: 2422134.824 ops/s
# Warmup Iteration   3: 2435922.782 ops/s
# Warmup Iteration   4: 2023364.640 ops/s
# Warmup Iteration   5: 2441334.168 ops/s
# Warmup Iteration   6: 2436954.404 ops/s
# Warmup Iteration   7: 2441954.974 ops/s
# Warmup Iteration   8: 2447206.912 ops/s
# Warmup Iteration   9: 2445036.920 ops/s
# Warmup Iteration  10: 2442220.982 ops/s
# Warmup Iteration  11: 2446744.396 ops/s
# Warmup Iteration  12: 2440452.240 ops/s
# Warmup Iteration  13: 2443212.100 ops/s
# Warmup Iteration  14: 2443686.418 ops/s
# Warmup Iteration  15: 2444573.587 ops/s
# Warmup Iteration  16: 2435089.389 ops/s
# Warmup Iteration  17: 2434532.231 ops/s
# Warmup Iteration  18: 2443516.512 ops/s
# Warmup Iteration  19: 2442958.287 ops/s
# Warmup Iteration  20: 2440606.394 ops/s
# Warmup Iteration  21: 2440520.315 ops/s
# Warmup Iteration  22: 2446446.003 ops/s
# Warmup Iteration  23: 2445750.172 ops/s
# Warmup Iteration  24: 2441583.218 ops/s
# Warmup Iteration  25: 2438460.553 ops/s
# Warmup Iteration  26: 2439000.824 ops/s
# Warmup Iteration  27: 2447140.482 ops/s
# Warmup Iteration  28: 2440469.856 ops/s
# Warmup Iteration  29: 2445139.907 ops/s
# Warmup Iteration  30: 2439418.228 ops/s
Iteration   1: 2434761.033 ops/s
Iteration   2: 2432694.555 ops/s
Iteration   3: 2443300.489 ops/s
Iteration   4: 2441309.339 ops/s
Iteration   5: 2446741.284 ops/s
Iteration   6: 2448821.610 ops/s
Iteration   7: 2443601.863 ops/s
Iteration   8: 2446346.324 ops/s
Iteration   9: 2444305.907 ops/s
Iteration  10: 2438034.299 ops/s
Iteration  11: 2441350.721 ops/s
Iteration  12: 2443175.781 ops/s
Iteration  13: 2447251.259 ops/s
Iteration  14: 2437187.476 ops/s
Iteration  15: 2438314.601 ops/s
Iteration  16: 2445238.426 ops/s
Iteration  17: 2436003.281 ops/s
Iteration  18: 2447343.321 ops/s
Iteration  19: 2428659.979 ops/s
Iteration  20: 2440391.224 ops/s
Iteration  21: 2439484.551 ops/s
Iteration  22: 2441403.801 ops/s
Iteration  23: 2437395.802 ops/s
Iteration  24: 2445127.005 ops/s
Iteration  25: 2445785.205 ops/s
Iteration  26: 2437158.212 ops/s
Iteration  27: 2452813.168 ops/s
Iteration  28: 2446284.695 ops/s
Iteration  29: 2444429.851 ops/s
Iteration  30: 2452178.348 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparator":
  2442229.780 ±(99.9%) 3707.409 ops/s [Average]
  (min, avg, max) = (2428659.979, 2442229.780, 2452813.168), stdev = 5549.076
  CI (99.9%): [2438522.371, 2445937.190] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2442229.780 ± 3707.409  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1119417.751 ops/s
# Warmup Iteration   2: 2377475.724 ops/s
# Warmup Iteration   3: 2420355.713 ops/s
# Warmup Iteration   4: 2355437.300 ops/s
# Warmup Iteration   5: 2088364.701 ops/s
# Warmup Iteration   6: 2425649.218 ops/s
# Warmup Iteration   7: 2424924.327 ops/s
# Warmup Iteration   8: 2424627.346 ops/s
# Warmup Iteration   9: 2421546.197 ops/s
# Warmup Iteration  10: 2426635.095 ops/s
# Warmup Iteration  11: 2419916.039 ops/s
# Warmup Iteration  12: 2419097.449 ops/s
# Warmup Iteration  13: 2417811.810 ops/s
# Warmup Iteration  14: 2423555.827 ops/s
# Warmup Iteration  15: 2422722.452 ops/s
# Warmup Iteration  16: 2426265.959 ops/s
# Warmup Iteration  17: 2433845.713 ops/s
# Warmup Iteration  18: 2416322.922 ops/s
# Warmup Iteration  19: 2422034.240 ops/s
# Warmup Iteration  20: 2424477.678 ops/s
# Warmup Iteration  21: 2422419.624 ops/s
# Warmup Iteration  22: 2425992.045 ops/s
# Warmup Iteration  23: 2425728.621 ops/s
# Warmup Iteration  24: 2421637.649 ops/s
# Warmup Iteration  25: 2428538.254 ops/s
# Warmup Iteration  26: 2423685.718 ops/s
# Warmup Iteration  27: 2425886.310 ops/s
# Warmup Iteration  28: 2422860.687 ops/s
# Warmup Iteration  29: 2427960.435 ops/s
# Warmup Iteration  30: 2425739.636 ops/s
Iteration   1: 2428196.866 ops/s
Iteration   2: 2421329.209 ops/s
Iteration   3: 2423014.879 ops/s
Iteration   4: 2417222.264 ops/s
Iteration   5: 2426229.494 ops/s
Iteration   6: 2422523.304 ops/s
Iteration   7: 2423634.806 ops/s
Iteration   8: 2425467.870 ops/s
Iteration   9: 2427920.261 ops/s
Iteration  10: 2422455.807 ops/s
Iteration  11: 2434207.896 ops/s
Iteration  12: 2421143.988 ops/s
Iteration  13: 2413924.070 ops/s
Iteration  14: 2424144.016 ops/s
Iteration  15: 2422794.309 ops/s
Iteration  16: 2424113.056 ops/s
Iteration  17: 2421162.335 ops/s
Iteration  18: 2423774.081 ops/s
Iteration  19: 2420578.319 ops/s
Iteration  20: 2425285.999 ops/s
Iteration  21: 2429517.347 ops/s
Iteration  22: 2429668.191 ops/s
Iteration  23: 2428470.856 ops/s
Iteration  24: 2437164.676 ops/s
Iteration  25: 2421091.527 ops/s
Iteration  26: 2420883.359 ops/s
Iteration  27: 2420454.911 ops/s
Iteration  28: 2431492.951 ops/s
Iteration  29: 2419412.908 ops/s
Iteration  30: 2431590.887 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2424629.015 ±(99.9%) 3386.842 ops/s [Average]
  (min, avg, max) = (2413924.070, 2424629.015, 2437164.676), stdev = 5069.266
  CI (99.9%): [2421242.172, 2428015.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2424629.015 ± 3386.842  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25258550.746 ops/s
# Warmup Iteration   2: 42640793.688 ops/s
# Warmup Iteration   3: 48333336.713 ops/s
# Warmup Iteration   4: 48268622.166 ops/s
# Warmup Iteration   5: 48285773.734 ops/s
# Warmup Iteration   6: 48300159.352 ops/s
# Warmup Iteration   7: 48243401.143 ops/s
# Warmup Iteration   8: 48240080.426 ops/s
# Warmup Iteration   9: 48357149.328 ops/s
# Warmup Iteration  10: 48377381.093 ops/s
# Warmup Iteration  11: 48394356.317 ops/s
# Warmup Iteration  12: 48181403.867 ops/s
# Warmup Iteration  13: 48373469.230 ops/s
# Warmup Iteration  14: 48052911.801 ops/s
# Warmup Iteration  15: 48174302.294 ops/s
# Warmup Iteration  16: 48360979.169 ops/s
# Warmup Iteration  17: 48078025.649 ops/s
# Warmup Iteration  18: 48306797.561 ops/s
# Warmup Iteration  19: 48195078.023 ops/s
# Warmup Iteration  20: 48267533.431 ops/s
# Warmup Iteration  21: 48407720.960 ops/s
# Warmup Iteration  22: 48448534.489 ops/s
# Warmup Iteration  23: 48291252.172 ops/s
# Warmup Iteration  24: 48142307.542 ops/s
# Warmup Iteration  25: 48273929.379 ops/s
# Warmup Iteration  26: 47969406.840 ops/s
# Warmup Iteration  27: 48313794.828 ops/s
# Warmup Iteration  28: 48203892.567 ops/s
# Warmup Iteration  29: 48149153.087 ops/s
# Warmup Iteration  30: 48311846.630 ops/s
Iteration   1: 48326752.439 ops/s
Iteration   2: 48220286.093 ops/s
Iteration   3: 47946646.468 ops/s
Iteration   4: 48237864.281 ops/s
Iteration   5: 48377046.095 ops/s
Iteration   6: 47979220.224 ops/s
Iteration   7: 48199752.234 ops/s
Iteration   8: 48092509.789 ops/s
Iteration   9: 48082310.294 ops/s
Iteration  10: 48320742.307 ops/s
Iteration  11: 48151449.342 ops/s
Iteration  12: 48129302.182 ops/s
Iteration  13: 48346577.128 ops/s
Iteration  14: 48094209.203 ops/s
Iteration  15: 48653287.973 ops/s
Iteration  16: 48335509.662 ops/s
Iteration  17: 48416533.275 ops/s
Iteration  18: 48075426.409 ops/s
Iteration  19: 48241594.690 ops/s
Iteration  20: 48478198.299 ops/s
Iteration  21: 48361506.584 ops/s
Iteration  22: 48277292.399 ops/s
Iteration  23: 48481228.534 ops/s
Iteration  24: 48161616.215 ops/s
Iteration  25: 48376975.531 ops/s
Iteration  26: 48616246.410 ops/s
Iteration  27: 48433868.978 ops/s
Iteration  28: 48301894.783 ops/s
Iteration  29: 48000003.311 ops/s
Iteration  30: 48321641.574 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asLazy":
  48267916.424 ±(99.9%) 118107.618 ops/s [Average]
  (min, avg, max) = (47946646.468, 48267916.424, 48653287.973), stdev = 176777.935
  CI (99.9%): [48149808.806, 48386024.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt         Score        Error  Units
HashBagTest._Benchmark.benchmark_asLazy  thrpt   30  48267916.424 ± 118107.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 20595349.707 ops/s
# Warmup Iteration   2: 33976473.505 ops/s
# Warmup Iteration   3: 39682700.971 ops/s
# Warmup Iteration   4: 39800371.759 ops/s
# Warmup Iteration   5: 39807222.772 ops/s
# Warmup Iteration   6: 39723260.076 ops/s
# Warmup Iteration   7: 39691663.058 ops/s
# Warmup Iteration   8: 39870526.518 ops/s
# Warmup Iteration   9: 39709957.073 ops/s
# Warmup Iteration  10: 39467841.679 ops/s
# Warmup Iteration  11: 39455713.035 ops/s
# Warmup Iteration  12: 39692484.433 ops/s
# Warmup Iteration  13: 39644299.302 ops/s
# Warmup Iteration  14: 39657527.076 ops/s
# Warmup Iteration  15: 39752476.146 ops/s
# Warmup Iteration  16: 39743901.069 ops/s
# Warmup Iteration  17: 39731457.228 ops/s
# Warmup Iteration  18: 39575778.872 ops/s
# Warmup Iteration  19: 39656523.335 ops/s
# Warmup Iteration  20: 39784336.506 ops/s
# Warmup Iteration  21: 39660534.162 ops/s
# Warmup Iteration  22: 39490969.396 ops/s
# Warmup Iteration  23: 39552731.898 ops/s
# Warmup Iteration  24: 39737597.792 ops/s
# Warmup Iteration  25: 39591225.116 ops/s
# Warmup Iteration  26: 39617016.155 ops/s
# Warmup Iteration  27: 39592607.566 ops/s
# Warmup Iteration  28: 39815288.264 ops/s
# Warmup Iteration  29: 39680550.741 ops/s
# Warmup Iteration  30: 39830707.583 ops/s
Iteration   1: 39640680.364 ops/s
Iteration   2: 40025841.879 ops/s
Iteration   3: 39867038.672 ops/s
Iteration   4: 39885224.063 ops/s
Iteration   5: 39967940.539 ops/s
Iteration   6: 39866600.509 ops/s
Iteration   7: 39775230.639 ops/s
Iteration   8: 39860509.193 ops/s
Iteration   9: 39754679.214 ops/s
Iteration  10: 40032147.306 ops/s
Iteration  11: 39798686.093 ops/s
Iteration  12: 39986288.318 ops/s
Iteration  13: 39871761.092 ops/s
Iteration  14: 39825284.841 ops/s
Iteration  15: 40023848.771 ops/s
Iteration  16: 40039868.327 ops/s
Iteration  17: 39920060.899 ops/s
Iteration  18: 39520360.796 ops/s
Iteration  19: 39880359.747 ops/s
Iteration  20: 39744316.644 ops/s
Iteration  21: 39767764.067 ops/s
Iteration  22: 39945702.379 ops/s
Iteration  23: 39859310.504 ops/s
Iteration  24: 39987626.860 ops/s
Iteration  25: 39892746.468 ops/s
Iteration  26: 39810145.915 ops/s
Iteration  27: 39833250.182 ops/s
Iteration  28: 40018123.660 ops/s
Iteration  29: 39868934.018 ops/s
Iteration  30: 39873272.946 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asSynchronized":
  39871453.497 ±(99.9%) 79115.117 ops/s [Average]
  (min, avg, max) = (39520360.796, 39871453.497, 40039868.327), stdev = 118415.791
  CI (99.9%): [39792338.380, 39950568.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_asSynchronized  thrpt   30  39871453.497 ± 79115.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 25925210.957 ops/s
# Warmup Iteration   2: 42884332.002 ops/s
# Warmup Iteration   3: 50695240.465 ops/s
# Warmup Iteration   4: 50613922.015 ops/s
# Warmup Iteration   5: 50552324.937 ops/s
# Warmup Iteration   6: 50918622.633 ops/s
# Warmup Iteration   7: 50719090.579 ops/s
# Warmup Iteration   8: 50768174.650 ops/s
# Warmup Iteration   9: 50738087.704 ops/s
# Warmup Iteration  10: 50834892.967 ops/s
# Warmup Iteration  11: 50965159.771 ops/s
# Warmup Iteration  12: 50513662.836 ops/s
# Warmup Iteration  13: 50718921.195 ops/s
# Warmup Iteration  14: 50325503.710 ops/s
# Warmup Iteration  15: 50117220.580 ops/s
# Warmup Iteration  16: 50265172.217 ops/s
# Warmup Iteration  17: 50305092.415 ops/s
# Warmup Iteration  18: 50485960.635 ops/s
# Warmup Iteration  19: 50385982.680 ops/s
# Warmup Iteration  20: 50969543.472 ops/s
# Warmup Iteration  21: 50760620.927 ops/s
# Warmup Iteration  22: 50857317.804 ops/s
# Warmup Iteration  23: 50803172.263 ops/s
# Warmup Iteration  24: 50652489.492 ops/s
# Warmup Iteration  25: 50556478.428 ops/s
# Warmup Iteration  26: 50808016.013 ops/s
# Warmup Iteration  27: 50670461.524 ops/s
# Warmup Iteration  28: 50740813.073 ops/s
# Warmup Iteration  29: 50779203.956 ops/s
# Warmup Iteration  30: 50817700.409 ops/s
Iteration   1: 50852654.488 ops/s
Iteration   2: 50882927.591 ops/s
Iteration   3: 50846107.668 ops/s
Iteration   4: 50683176.257 ops/s
Iteration   5: 50516472.639 ops/s
Iteration   6: 50490011.418 ops/s
Iteration   7: 50769111.007 ops/s
Iteration   8: 50754691.653 ops/s
Iteration   9: 50832733.016 ops/s
Iteration  10: 50575323.621 ops/s
Iteration  11: 50977480.333 ops/s
Iteration  12: 50748513.350 ops/s
Iteration  13: 50667806.792 ops/s
Iteration  14: 50665239.743 ops/s
Iteration  15: 50816291.987 ops/s
Iteration  16: 50796215.701 ops/s
Iteration  17: 50568385.550 ops/s
Iteration  18: 51013977.376 ops/s
Iteration  19: 50729450.969 ops/s
Iteration  20: 50681735.261 ops/s
Iteration  21: 50826456.075 ops/s
Iteration  22: 50986147.120 ops/s
Iteration  23: 50617875.994 ops/s
Iteration  24: 51046295.941 ops/s
Iteration  25: 50924028.943 ops/s
Iteration  26: 51112973.845 ops/s
Iteration  27: 50670028.831 ops/s
Iteration  28: 50718689.463 ops/s
Iteration  29: 50775066.468 ops/s
Iteration  30: 50576859.351 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_asUnmodifiable":
  50770757.615 ±(99.9%) 106414.855 ops/s [Average]
  (min, avg, max) = (50490011.418, 50770757.615, 51112973.845), stdev = 159276.757
  CI (99.9%): [50664342.760, 50877172.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score        Error  Units
HashBagTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  50770757.615 ± 106414.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_bottomOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_bottomOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 90548.355 ops/s
# Warmup Iteration   2: 163825.815 ops/s
# Warmup Iteration   3: 191068.444 ops/s
# Warmup Iteration   4: 191618.951 ops/s
# Warmup Iteration   5: 192124.685 ops/s
# Warmup Iteration   6: 158960.428 ops/s
# Warmup Iteration   7: 191536.873 ops/s
# Warmup Iteration   8: 192228.480 ops/s
# Warmup Iteration   9: 192693.198 ops/s
# Warmup Iteration  10: 192687.148 ops/s
# Warmup Iteration  11: 192046.557 ops/s
# Warmup Iteration  12: 192453.305 ops/s
# Warmup Iteration  13: 192394.813 ops/s
# Warmup Iteration  14: 192410.017 ops/s
# Warmup Iteration  15: 192353.401 ops/s
# Warmup Iteration  16: 191998.265 ops/s
# Warmup Iteration  17: 193876.825 ops/s
# Warmup Iteration  18: 194359.095 ops/s
# Warmup Iteration  19: 194446.663 ops/s
# Warmup Iteration  20: 193785.174 ops/s
# Warmup Iteration  21: 194259.971 ops/s
# Warmup Iteration  22: 194116.779 ops/s
# Warmup Iteration  23: 194640.988 ops/s
# Warmup Iteration  24: 193683.273 ops/s
# Warmup Iteration  25: 193385.738 ops/s
# Warmup Iteration  26: 194460.827 ops/s
# Warmup Iteration  27: 193786.269 ops/s
# Warmup Iteration  28: 194241.416 ops/s
# Warmup Iteration  29: 193865.390 ops/s
# Warmup Iteration  30: 193976.851 ops/s
Iteration   1: 194479.574 ops/s
Iteration   2: 193913.903 ops/s
Iteration   3: 194227.088 ops/s
Iteration   4: 195155.352 ops/s
Iteration   5: 193458.346 ops/s
Iteration   6: 194240.809 ops/s
Iteration   7: 194144.480 ops/s
Iteration   8: 195150.652 ops/s
Iteration   9: 194580.370 ops/s
Iteration  10: 194544.676 ops/s
Iteration  11: 195177.159 ops/s
Iteration  12: 194044.968 ops/s
Iteration  13: 194030.838 ops/s
Iteration  14: 193543.033 ops/s
Iteration  15: 194619.922 ops/s
Iteration  16: 194413.720 ops/s
Iteration  17: 193228.482 ops/s
Iteration  18: 194052.532 ops/s
Iteration  19: 193801.921 ops/s
Iteration  20: 194249.832 ops/s
Iteration  21: 194200.828 ops/s
Iteration  22: 194161.576 ops/s
Iteration  23: 194677.237 ops/s
Iteration  24: 194333.370 ops/s
Iteration  25: 194411.488 ops/s
Iteration  26: 194002.407 ops/s
Iteration  27: 194309.455 ops/s
Iteration  28: 193785.404 ops/s
Iteration  29: 194404.602 ops/s
Iteration  30: 193791.943 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_bottomOccurrences":
  194237.866 ±(99.9%) 310.489 ops/s [Average]
  (min, avg, max) = (193228.482, 194237.866, 195177.159), stdev = 464.726
  CI (99.9%): [193927.376, 194548.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_bottomOccurrences  thrpt   30  194237.866 ± 310.489  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 629145.909 ops/s
# Warmup Iteration   2: 1204920.535 ops/s
# Warmup Iteration   3: 1347324.622 ops/s
# Warmup Iteration   4: 1351815.122 ops/s
# Warmup Iteration   5: 1130322.648 ops/s
# Warmup Iteration   6: 1322835.470 ops/s
# Warmup Iteration   7: 1352602.911 ops/s
# Warmup Iteration   8: 1350630.556 ops/s
# Warmup Iteration   9: 1348141.282 ops/s
# Warmup Iteration  10: 1351799.281 ops/s
# Warmup Iteration  11: 1352105.420 ops/s
# Warmup Iteration  12: 1348486.260 ops/s
# Warmup Iteration  13: 1353956.234 ops/s
# Warmup Iteration  14: 1352972.734 ops/s
# Warmup Iteration  15: 1350910.029 ops/s
# Warmup Iteration  16: 1347961.107 ops/s
# Warmup Iteration  17: 1341044.027 ops/s
# Warmup Iteration  18: 1341177.565 ops/s
# Warmup Iteration  19: 1340381.325 ops/s
# Warmup Iteration  20: 1342107.520 ops/s
# Warmup Iteration  21: 1339800.755 ops/s
# Warmup Iteration  22: 1341612.974 ops/s
# Warmup Iteration  23: 1337588.675 ops/s
# Warmup Iteration  24: 1336099.697 ops/s
# Warmup Iteration  25: 1338913.285 ops/s
# Warmup Iteration  26: 1339530.919 ops/s
# Warmup Iteration  27: 1332688.453 ops/s
# Warmup Iteration  28: 1340167.814 ops/s
# Warmup Iteration  29: 1341455.107 ops/s
# Warmup Iteration  30: 1344164.091 ops/s
Iteration   1: 1343482.675 ops/s
Iteration   2: 1340546.120 ops/s
Iteration   3: 1341687.346 ops/s
Iteration   4: 1340297.388 ops/s
Iteration   5: 1338919.951 ops/s
Iteration   6: 1345251.734 ops/s
Iteration   7: 1339233.968 ops/s
Iteration   8: 1334876.374 ops/s
Iteration   9: 1337067.432 ops/s
Iteration  10: 1338538.871 ops/s
Iteration  11: 1337858.990 ops/s
Iteration  12: 1341962.152 ops/s
Iteration  13: 1333790.070 ops/s
Iteration  14: 1337156.486 ops/s
Iteration  15: 1338728.823 ops/s
Iteration  16: 1340468.614 ops/s
Iteration  17: 1342484.900 ops/s
Iteration  18: 1338061.111 ops/s
Iteration  19: 1343290.057 ops/s
Iteration  20: 1337021.985 ops/s
Iteration  21: 1338313.465 ops/s
Iteration  22: 1337605.435 ops/s
Iteration  23: 1345586.221 ops/s
Iteration  24: 1336664.253 ops/s
Iteration  25: 1337660.189 ops/s
Iteration  26: 1341270.932 ops/s
Iteration  27: 1340816.140 ops/s
Iteration  28: 1340630.768 ops/s
Iteration  29: 1344897.520 ops/s
Iteration  30: 1335531.928 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk":
  1339656.730 ±(99.9%) 2029.933 ops/s [Average]
  (min, avg, max) = (1333790.070, 1339656.730, 1345586.221), stdev = 3038.309
  CI (99.9%): [1337626.797, 1341686.663] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_chunk  thrpt   30  1339656.730 ± 2029.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 14614198.092 ops/s
# Warmup Iteration   2: 25433060.922 ops/s
# Warmup Iteration   3: 27687114.043 ops/s
# Warmup Iteration   4: 28934242.333 ops/s
# Warmup Iteration   5: 28959563.665 ops/s
# Warmup Iteration   6: 28881094.320 ops/s
# Warmup Iteration   7: 28893597.405 ops/s
# Warmup Iteration   8: 28732075.870 ops/s
# Warmup Iteration   9: 28951486.539 ops/s
# Warmup Iteration  10: 28958948.468 ops/s
# Warmup Iteration  11: 28936899.511 ops/s
# Warmup Iteration  12: 28734822.107 ops/s
# Warmup Iteration  13: 28771085.980 ops/s
# Warmup Iteration  14: 28833978.902 ops/s
# Warmup Iteration  15: 28872362.973 ops/s
# Warmup Iteration  16: 28894864.986 ops/s
# Warmup Iteration  17: 28881926.569 ops/s
# Warmup Iteration  18: 28789197.906 ops/s
# Warmup Iteration  19: 28904432.221 ops/s
# Warmup Iteration  20: 28877068.638 ops/s
# Warmup Iteration  21: 28853726.817 ops/s
# Warmup Iteration  22: 28935082.707 ops/s
# Warmup Iteration  23: 28879325.822 ops/s
# Warmup Iteration  24: 28928723.317 ops/s
# Warmup Iteration  25: 28898759.442 ops/s
# Warmup Iteration  26: 28783792.967 ops/s
# Warmup Iteration  27: 28934511.515 ops/s
# Warmup Iteration  28: 28911340.221 ops/s
# Warmup Iteration  29: 28923830.238 ops/s
# Warmup Iteration  30: 28916104.782 ops/s
Iteration   1: 28813693.900 ops/s
Iteration   2: 28902154.849 ops/s
Iteration   3: 28906005.260 ops/s
Iteration   4: 28941082.646 ops/s
Iteration   5: 28920825.745 ops/s
Iteration   6: 28881474.449 ops/s
Iteration   7: 29004660.765 ops/s
Iteration   8: 28800902.147 ops/s
Iteration   9: 28975008.715 ops/s
Iteration  10: 28915793.469 ops/s
Iteration  11: 28931138.774 ops/s
Iteration  12: 28909344.109 ops/s
Iteration  13: 28866707.967 ops/s
Iteration  14: 28707826.531 ops/s
Iteration  15: 28750677.796 ops/s
Iteration  16: 28586650.508 ops/s
Iteration  17: 28796166.513 ops/s
Iteration  18: 28860363.516 ops/s
Iteration  19: 28936417.638 ops/s
Iteration  20: 28921045.554 ops/s
Iteration  21: 29002868.991 ops/s
Iteration  22: 28984914.310 ops/s
Iteration  23: 28947616.422 ops/s
Iteration  24: 28722498.182 ops/s
Iteration  25: 28809864.331 ops/s
Iteration  26: 28783273.816 ops/s
Iteration  27: 28704491.221 ops/s
Iteration  28: 28834162.311 ops/s
Iteration  29: 28959471.776 ops/s
Iteration  30: 28860968.967 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_empty":
  28864602.373 ±(99.9%) 67230.617 ops/s [Average]
  (min, avg, max) = (28586650.508, 28864602.373, 29004660.765), stdev = 100627.629
  CI (99.9%): [28797371.756, 28931832.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_chunk_empty  thrpt   30  28864602.373 ± 67230.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 693078.263 ops/s
# Warmup Iteration   2: 1167999.017 ops/s
# Warmup Iteration   3: 1374206.904 ops/s
# Warmup Iteration   4: 1385711.622 ops/s
# Warmup Iteration   5: 1382168.561 ops/s
# Warmup Iteration   6: 1132250.088 ops/s
# Warmup Iteration   7: 1386414.630 ops/s
# Warmup Iteration   8: 1385762.905 ops/s
# Warmup Iteration   9: 1386904.899 ops/s
# Warmup Iteration  10: 1385447.621 ops/s
# Warmup Iteration  11: 1384826.191 ops/s
# Warmup Iteration  12: 1384444.779 ops/s
# Warmup Iteration  13: 1383408.389 ops/s
# Warmup Iteration  14: 1385989.571 ops/s
# Warmup Iteration  15: 1384501.364 ops/s
# Warmup Iteration  16: 1384465.072 ops/s
# Warmup Iteration  17: 1387785.951 ops/s
# Warmup Iteration  18: 1385123.992 ops/s
# Warmup Iteration  19: 1385613.759 ops/s
# Warmup Iteration  20: 1384655.518 ops/s
# Warmup Iteration  21: 1387683.318 ops/s
# Warmup Iteration  22: 1386522.604 ops/s
# Warmup Iteration  23: 1382662.302 ops/s
# Warmup Iteration  24: 1382621.935 ops/s
# Warmup Iteration  25: 1385862.978 ops/s
# Warmup Iteration  26: 1385095.052 ops/s
# Warmup Iteration  27: 1386002.886 ops/s
# Warmup Iteration  28: 1386472.623 ops/s
# Warmup Iteration  29: 1385067.209 ops/s
# Warmup Iteration  30: 1384107.448 ops/s
Iteration   1: 1385725.450 ops/s
Iteration   2: 1376293.256 ops/s
Iteration   3: 1387131.133 ops/s
Iteration   4: 1389670.026 ops/s
Iteration   5: 1392461.517 ops/s
Iteration   6: 1384630.249 ops/s
Iteration   7: 1382072.462 ops/s
Iteration   8: 1382530.749 ops/s
Iteration   9: 1387377.587 ops/s
Iteration  10: 1387639.685 ops/s
Iteration  11: 1386740.988 ops/s
Iteration  12: 1382013.588 ops/s
Iteration  13: 1381343.988 ops/s
Iteration  14: 1385249.959 ops/s
Iteration  15: 1380437.817 ops/s
Iteration  16: 1388243.360 ops/s
Iteration  17: 1385608.682 ops/s
Iteration  18: 1386091.314 ops/s
Iteration  19: 1389773.384 ops/s
Iteration  20: 1386431.002 ops/s
Iteration  21: 1381974.606 ops/s
Iteration  22: 1386027.962 ops/s
Iteration  23: 1387855.160 ops/s
Iteration  24: 1386247.674 ops/s
Iteration  25: 1386056.671 ops/s
Iteration  26: 1384903.267 ops/s
Iteration  27: 1389550.318 ops/s
Iteration  28: 1390381.544 ops/s
Iteration  29: 1386181.526 ops/s
Iteration  30: 1386084.160 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_large_size":
  1385757.636 ±(99.9%) 2236.455 ops/s [Average]
  (min, avg, max) = (1376293.256, 1385757.636, 1392461.517), stdev = 3347.421
  CI (99.9%): [1383521.181, 1387994.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_chunk_large_size  thrpt   30  1385757.636 ± 2236.455  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2048073.799 ops/s
# Warmup Iteration   2: 5616147.872 ops/s
# Warmup Iteration   3: 5677762.958 ops/s
# Warmup Iteration   4: 4653891.752 ops/s
# Warmup Iteration   5: 5690133.333 ops/s
# Warmup Iteration   6: 5676681.311 ops/s
# Warmup Iteration   7: 5692731.295 ops/s
# Warmup Iteration   8: 5679358.868 ops/s
# Warmup Iteration   9: 5665953.628 ops/s
# Warmup Iteration  10: 5664454.350 ops/s
# Warmup Iteration  11: 5684011.497 ops/s
# Warmup Iteration  12: 5678415.809 ops/s
# Warmup Iteration  13: 5686153.302 ops/s
# Warmup Iteration  14: 5682500.288 ops/s
# Warmup Iteration  15: 5680578.718 ops/s
# Warmup Iteration  16: 5675005.408 ops/s
# Warmup Iteration  17: 5679306.763 ops/s
# Warmup Iteration  18: 5686232.836 ops/s
# Warmup Iteration  19: 5687345.187 ops/s
# Warmup Iteration  20: 5689000.501 ops/s
# Warmup Iteration  21: 5686111.806 ops/s
# Warmup Iteration  22: 5701541.106 ops/s
# Warmup Iteration  23: 5683408.426 ops/s
# Warmup Iteration  24: 5687492.863 ops/s
# Warmup Iteration  25: 5693296.594 ops/s
# Warmup Iteration  26: 5690114.529 ops/s
# Warmup Iteration  27: 5693397.141 ops/s
# Warmup Iteration  28: 5677648.091 ops/s
# Warmup Iteration  29: 5682162.874 ops/s
# Warmup Iteration  30: 5665348.012 ops/s
Iteration   1: 5680477.547 ops/s
Iteration   2: 5681981.262 ops/s
Iteration   3: 5696093.908 ops/s
Iteration   4: 5663117.708 ops/s
Iteration   5: 5681983.937 ops/s
Iteration   6: 5689747.607 ops/s
Iteration   7: 5672120.579 ops/s
Iteration   8: 5686099.711 ops/s
Iteration   9: 5675421.143 ops/s
Iteration  10: 5684568.970 ops/s
Iteration  11: 5681619.151 ops/s
Iteration  12: 5678321.394 ops/s
Iteration  13: 5683826.722 ops/s
Iteration  14: 5652535.467 ops/s
Iteration  15: 5677798.453 ops/s
Iteration  16: 5694044.754 ops/s
Iteration  17: 5652729.022 ops/s
Iteration  18: 5684613.201 ops/s
Iteration  19: 5661042.922 ops/s
Iteration  20: 5678053.903 ops/s
Iteration  21: 5655759.116 ops/s
Iteration  22: 5677436.926 ops/s
Iteration  23: 5691261.649 ops/s
Iteration  24: 5668368.442 ops/s
Iteration  25: 5679871.605 ops/s
Iteration  26: 5671299.894 ops/s
Iteration  27: 5672820.311 ops/s
Iteration  28: 5668130.894 ops/s
Iteration  29: 5669615.622 ops/s
Iteration  30: 5663960.946 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_single":
  5675824.092 ±(99.9%) 7707.327 ops/s [Average]
  (min, avg, max) = (5652535.467, 5675824.092, 5696093.908), stdev = 11535.964
  CI (99.9%): [5668116.766, 5683531.419] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_chunk_single  thrpt   30  5675824.092 ± 7707.327  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 512734.358 ops/s
# Warmup Iteration   2: 584599.856 ops/s
# Warmup Iteration   3: 767848.276 ops/s
# Warmup Iteration   4: 769538.980 ops/s
# Warmup Iteration   5: 761065.656 ops/s
# Warmup Iteration   6: 765791.803 ops/s
# Warmup Iteration   7: 768181.707 ops/s
# Warmup Iteration   8: 765238.921 ops/s
# Warmup Iteration   9: 765838.386 ops/s
# Warmup Iteration  10: 632663.522 ops/s
# Warmup Iteration  11: 759339.637 ops/s
# Warmup Iteration  12: 758450.387 ops/s
# Warmup Iteration  13: 757695.482 ops/s
# Warmup Iteration  14: 759855.921 ops/s
# Warmup Iteration  15: 757376.231 ops/s
# Warmup Iteration  16: 758631.776 ops/s
# Warmup Iteration  17: 792328.799 ops/s
# Warmup Iteration  18: 794737.880 ops/s
# Warmup Iteration  19: 791727.839 ops/s
# Warmup Iteration  20: 793432.169 ops/s
# Warmup Iteration  21: 793471.493 ops/s
# Warmup Iteration  22: 789919.964 ops/s
# Warmup Iteration  23: 793147.469 ops/s
# Warmup Iteration  24: 791596.582 ops/s
# Warmup Iteration  25: 792748.801 ops/s
# Warmup Iteration  26: 792926.586 ops/s
# Warmup Iteration  27: 791651.334 ops/s
# Warmup Iteration  28: 792551.719 ops/s
# Warmup Iteration  29: 791030.860 ops/s
# Warmup Iteration  30: 794641.902 ops/s
Iteration   1: 793262.846 ops/s
Iteration   2: 792062.060 ops/s
Iteration   3: 791840.429 ops/s
Iteration   4: 791938.005 ops/s
Iteration   5: 791191.909 ops/s
Iteration   6: 796439.649 ops/s
Iteration   7: 794511.903 ops/s
Iteration   8: 793140.849 ops/s
Iteration   9: 795387.233 ops/s
Iteration  10: 795728.421 ops/s
Iteration  11: 794228.644 ops/s
Iteration  12: 793527.878 ops/s
Iteration  13: 795879.648 ops/s
Iteration  14: 790099.369 ops/s
Iteration  15: 794189.131 ops/s
Iteration  16: 792067.486 ops/s
Iteration  17: 796231.935 ops/s
Iteration  18: 790711.749 ops/s
Iteration  19: 793769.163 ops/s
Iteration  20: 793266.900 ops/s
Iteration  21: 793488.799 ops/s
Iteration  22: 793607.943 ops/s
Iteration  23: 793097.453 ops/s
Iteration  24: 794023.043 ops/s
Iteration  25: 793880.332 ops/s
Iteration  26: 792101.282 ops/s
Iteration  27: 793453.062 ops/s
Iteration  28: 794441.074 ops/s
Iteration  29: 795419.256 ops/s
Iteration  30: 792047.976 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_chunk_zero_throws":
  793501.181 ±(99.9%) 1080.479 ops/s [Average]
  (min, avg, max) = (790099.369, 793501.181, 796439.649), stdev = 1617.210
  CI (99.9%): [792420.702, 794581.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  793501.181 ± 1080.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1979983.406 ops/s
# Warmup Iteration   2: 4672966.713 ops/s
# Warmup Iteration   3: 4729067.370 ops/s
# Warmup Iteration   4: 3912375.793 ops/s
# Warmup Iteration   5: 4733724.204 ops/s
# Warmup Iteration   6: 4742326.420 ops/s
# Warmup Iteration   7: 4719198.539 ops/s
# Warmup Iteration   8: 4731397.283 ops/s
# Warmup Iteration   9: 4742618.541 ops/s
# Warmup Iteration  10: 4724762.366 ops/s
# Warmup Iteration  11: 4728294.510 ops/s
# Warmup Iteration  12: 4726496.277 ops/s
# Warmup Iteration  13: 4726947.176 ops/s
# Warmup Iteration  14: 4747588.293 ops/s
# Warmup Iteration  15: 4717350.835 ops/s
# Warmup Iteration  16: 4733018.934 ops/s
# Warmup Iteration  17: 4721773.398 ops/s
# Warmup Iteration  18: 4744733.549 ops/s
# Warmup Iteration  19: 4730525.481 ops/s
# Warmup Iteration  20: 4742777.708 ops/s
# Warmup Iteration  21: 4737552.668 ops/s
# Warmup Iteration  22: 4732213.809 ops/s
# Warmup Iteration  23: 4736800.582 ops/s
# Warmup Iteration  24: 4724903.058 ops/s
# Warmup Iteration  25: 4738100.331 ops/s
# Warmup Iteration  26: 4731479.320 ops/s
# Warmup Iteration  27: 4747346.608 ops/s
# Warmup Iteration  28: 4736640.374 ops/s
# Warmup Iteration  29: 4735175.668 ops/s
# Warmup Iteration  30: 4742469.453 ops/s
Iteration   1: 4728484.093 ops/s
Iteration   2: 4733522.545 ops/s
Iteration   3: 4715534.916 ops/s
Iteration   4: 4740019.604 ops/s
Iteration   5: 4722567.836 ops/s
Iteration   6: 4746035.881 ops/s
Iteration   7: 4753239.152 ops/s
Iteration   8: 4747945.075 ops/s
Iteration   9: 4725939.516 ops/s
Iteration  10: 4732915.932 ops/s
Iteration  11: 4748275.609 ops/s
Iteration  12: 4739419.435 ops/s
Iteration  13: 4738621.859 ops/s
Iteration  14: 4752325.160 ops/s
Iteration  15: 4750055.328 ops/s
Iteration  16: 4750426.505 ops/s
Iteration  17: 4726687.339 ops/s
Iteration  18: 4741694.827 ops/s
Iteration  19: 4736087.416 ops/s
Iteration  20: 4738033.833 ops/s
Iteration  21: 4723925.503 ops/s
Iteration  22: 4742990.794 ops/s
Iteration  23: 4727327.240 ops/s
Iteration  24: 4732085.020 ops/s
Iteration  25: 4725421.774 ops/s
Iteration  26: 4745154.204 ops/s
Iteration  27: 4729640.645 ops/s
Iteration  28: 4734939.988 ops/s
Iteration  29: 4743618.018 ops/s
Iteration  30: 4758808.955 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_clear":
  4737724.800 ±(99.9%) 7133.057 ops/s [Average]
  (min, avg, max) = (4715534.916, 4737724.800, 4758808.955), stdev = 10676.424
  CI (99.9%): [4730591.743, 4744857.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_clear  thrpt   30  4737724.800 ± 7133.057  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476487.162 ops/s
# Warmup Iteration   2: 986789.503 ops/s
# Warmup Iteration   3: 1044678.957 ops/s
# Warmup Iteration   4: 1052733.403 ops/s
# Warmup Iteration   5: 870414.349 ops/s
# Warmup Iteration   6: 1044853.449 ops/s
# Warmup Iteration   7: 1056789.644 ops/s
# Warmup Iteration   8: 1054861.204 ops/s
# Warmup Iteration   9: 1057432.570 ops/s
# Warmup Iteration  10: 1051321.977 ops/s
# Warmup Iteration  11: 1049009.658 ops/s
# Warmup Iteration  12: 1059232.548 ops/s
# Warmup Iteration  13: 1048379.180 ops/s
# Warmup Iteration  14: 1065912.821 ops/s
# Warmup Iteration  15: 1050888.585 ops/s
# Warmup Iteration  16: 1058338.386 ops/s
# Warmup Iteration  17: 1059822.644 ops/s
# Warmup Iteration  18: 1045955.421 ops/s
# Warmup Iteration  19: 1055232.802 ops/s
# Warmup Iteration  20: 1050763.954 ops/s
# Warmup Iteration  21: 1048592.791 ops/s
# Warmup Iteration  22: 1051760.484 ops/s
# Warmup Iteration  23: 1049492.023 ops/s
# Warmup Iteration  24: 1056949.835 ops/s
# Warmup Iteration  25: 1051535.305 ops/s
# Warmup Iteration  26: 1055523.562 ops/s
# Warmup Iteration  27: 1054675.129 ops/s
# Warmup Iteration  28: 1041159.947 ops/s
# Warmup Iteration  29: 1056956.017 ops/s
# Warmup Iteration  30: 1051811.545 ops/s
Iteration   1: 1051167.473 ops/s
Iteration   2: 1049024.916 ops/s
Iteration   3: 1053721.246 ops/s
Iteration   4: 1052310.326 ops/s
Iteration   5: 1057775.256 ops/s
Iteration   6: 1054095.664 ops/s
Iteration   7: 1061964.636 ops/s
Iteration   8: 1053213.384 ops/s
Iteration   9: 1053962.491 ops/s
Iteration  10: 1057366.026 ops/s
Iteration  11: 1062773.109 ops/s
Iteration  12: 1065065.407 ops/s
Iteration  13: 1049956.681 ops/s
Iteration  14: 1061658.012 ops/s
Iteration  15: 1049241.902 ops/s
Iteration  16: 1060660.734 ops/s
Iteration  17: 1055872.611 ops/s
Iteration  18: 1054858.754 ops/s
Iteration  19: 1043379.860 ops/s
Iteration  20: 1064200.583 ops/s
Iteration  21: 1052624.832 ops/s
Iteration  22: 1054380.010 ops/s
Iteration  23: 1052771.567 ops/s
Iteration  24: 1054934.346 ops/s
Iteration  25: 1053824.104 ops/s
Iteration  26: 1058385.824 ops/s
Iteration  27: 1045551.073 ops/s
Iteration  28: 1067719.113 ops/s
Iteration  29: 1056930.642 ops/s
Iteration  30: 1060860.869 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collect":
  1055675.048 ±(99.9%) 3809.064 ops/s [Average]
  (min, avg, max) = (1043379.860, 1055675.048, 1067719.113), stdev = 5701.229
  CI (99.9%): [1051865.984, 1059484.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collect  thrpt   30  1055675.048 ± 3809.064  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4565051.385 ops/s
# Warmup Iteration   2: 10773200.035 ops/s
# Warmup Iteration   3: 10967603.743 ops/s
# Warmup Iteration   4: 9059798.757 ops/s
# Warmup Iteration   5: 10910989.707 ops/s
# Warmup Iteration   6: 11022574.183 ops/s
# Warmup Iteration   7: 10964561.114 ops/s
# Warmup Iteration   8: 10961896.771 ops/s
# Warmup Iteration   9: 10983451.764 ops/s
# Warmup Iteration  10: 11019065.761 ops/s
# Warmup Iteration  11: 11011306.598 ops/s
# Warmup Iteration  12: 11015655.211 ops/s
# Warmup Iteration  13: 10999931.283 ops/s
# Warmup Iteration  14: 10945511.055 ops/s
# Warmup Iteration  15: 10994435.731 ops/s
# Warmup Iteration  16: 11001751.819 ops/s
# Warmup Iteration  17: 11031803.721 ops/s
# Warmup Iteration  18: 10980767.708 ops/s
# Warmup Iteration  19: 11027350.406 ops/s
# Warmup Iteration  20: 10992710.050 ops/s
# Warmup Iteration  21: 10972760.937 ops/s
# Warmup Iteration  22: 10994763.100 ops/s
# Warmup Iteration  23: 11007464.345 ops/s
# Warmup Iteration  24: 10995145.316 ops/s
# Warmup Iteration  25: 11028071.555 ops/s
# Warmup Iteration  26: 11030827.382 ops/s
# Warmup Iteration  27: 10998782.749 ops/s
# Warmup Iteration  28: 11020610.429 ops/s
# Warmup Iteration  29: 11040962.823 ops/s
# Warmup Iteration  30: 11014507.662 ops/s
Iteration   1: 10995849.756 ops/s
Iteration   2: 11022885.014 ops/s
Iteration   3: 11012369.077 ops/s
Iteration   4: 11006372.543 ops/s
Iteration   5: 10981002.676 ops/s
Iteration   6: 11002085.969 ops/s
Iteration   7: 10999672.976 ops/s
Iteration   8: 10984585.161 ops/s
Iteration   9: 11017309.442 ops/s
Iteration  10: 10988015.862 ops/s
Iteration  11: 10983001.271 ops/s
Iteration  12: 11031156.618 ops/s
Iteration  13: 10968051.394 ops/s
Iteration  14: 11022971.070 ops/s
Iteration  15: 11008983.917 ops/s
Iteration  16: 11011857.647 ops/s
Iteration  17: 11037250.544 ops/s
Iteration  18: 10984767.922 ops/s
Iteration  19: 10974731.234 ops/s
Iteration  20: 11025414.384 ops/s
Iteration  21: 11040402.266 ops/s
Iteration  22: 11029099.297 ops/s
Iteration  23: 11028500.691 ops/s
Iteration  24: 11043366.402 ops/s
Iteration  25: 11036109.306 ops/s
Iteration  26: 10969545.980 ops/s
Iteration  27: 10995440.919 ops/s
Iteration  28: 11026877.854 ops/s
Iteration  29: 10996895.842 ops/s
Iteration  30: 10993981.380 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBoolean":
  11007285.147 ±(99.9%) 14843.543 ops/s [Average]
  (min, avg, max) = (10968051.394, 11007285.147, 11043366.402), stdev = 22217.119
  CI (99.9%): [10992441.604, 11022128.691] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_collectBoolean  thrpt   30  11007285.147 ± 14843.543  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4499499.767 ops/s
# Warmup Iteration   2: 10798902.159 ops/s
# Warmup Iteration   3: 10960987.229 ops/s
# Warmup Iteration   4: 9090176.220 ops/s
# Warmup Iteration   5: 11045551.179 ops/s
# Warmup Iteration   6: 11063052.117 ops/s
# Warmup Iteration   7: 11040339.749 ops/s
# Warmup Iteration   8: 11048719.641 ops/s
# Warmup Iteration   9: 10999262.766 ops/s
# Warmup Iteration  10: 11020936.416 ops/s
# Warmup Iteration  11: 11008641.959 ops/s
# Warmup Iteration  12: 11053878.682 ops/s
# Warmup Iteration  13: 11044218.259 ops/s
# Warmup Iteration  14: 11027886.795 ops/s
# Warmup Iteration  15: 11034795.403 ops/s
# Warmup Iteration  16: 10982604.453 ops/s
# Warmup Iteration  17: 11070039.959 ops/s
# Warmup Iteration  18: 11018213.113 ops/s
# Warmup Iteration  19: 11045677.228 ops/s
# Warmup Iteration  20: 11036719.486 ops/s
# Warmup Iteration  21: 11036825.504 ops/s
# Warmup Iteration  22: 11004126.399 ops/s
# Warmup Iteration  23: 11039533.353 ops/s
# Warmup Iteration  24: 11055950.561 ops/s
# Warmup Iteration  25: 11052630.811 ops/s
# Warmup Iteration  26: 11013202.078 ops/s
# Warmup Iteration  27: 11040106.992 ops/s
# Warmup Iteration  28: 11036637.668 ops/s
# Warmup Iteration  29: 11027095.765 ops/s
# Warmup Iteration  30: 11039643.286 ops/s
Iteration   1: 11045496.702 ops/s
Iteration   2: 11028990.369 ops/s
Iteration   3: 11023105.998 ops/s
Iteration   4: 11039184.195 ops/s
Iteration   5: 11021673.000 ops/s
Iteration   6: 11006614.363 ops/s
Iteration   7: 11015138.019 ops/s
Iteration   8: 11042610.885 ops/s
Iteration   9: 11006282.759 ops/s
Iteration  10: 11083566.719 ops/s
Iteration  11: 11052676.220 ops/s
Iteration  12: 10976794.282 ops/s
Iteration  13: 11011720.994 ops/s
Iteration  14: 11037866.309 ops/s
Iteration  15: 11046488.013 ops/s
Iteration  16: 11023998.246 ops/s
Iteration  17: 11047387.206 ops/s
Iteration  18: 10966501.069 ops/s
Iteration  19: 11060417.745 ops/s
Iteration  20: 11044542.592 ops/s
Iteration  21: 11015630.501 ops/s
Iteration  22: 11055161.271 ops/s
Iteration  23: 11034939.059 ops/s
Iteration  24: 11044912.089 ops/s
Iteration  25: 11078872.570 ops/s
Iteration  26: 11055401.805 ops/s
Iteration  27: 10932750.444 ops/s
Iteration  28: 11058800.935 ops/s
Iteration  29: 11026464.475 ops/s
Iteration  30: 11033427.598 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  11030580.548 ±(99.9%) 21033.540 ops/s [Average]
  (min, avg, max) = (10932750.444, 11030580.548, 11083566.719), stdev = 31482.014
  CI (99.9%): [11009547.008, 11051614.087] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  11030580.548 ± 21033.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2682130.842 ops/s
# Warmup Iteration   2: 5145303.039 ops/s
# Warmup Iteration   3: 5437125.534 ops/s
# Warmup Iteration   4: 5490099.300 ops/s
# Warmup Iteration   5: 4706797.445 ops/s
# Warmup Iteration   6: 5295394.670 ops/s
# Warmup Iteration   7: 5485987.971 ops/s
# Warmup Iteration   8: 5475765.434 ops/s
# Warmup Iteration   9: 5481421.941 ops/s
# Warmup Iteration  10: 5497050.955 ops/s
# Warmup Iteration  11: 5478737.294 ops/s
# Warmup Iteration  12: 5484845.926 ops/s
# Warmup Iteration  13: 5473621.481 ops/s
# Warmup Iteration  14: 5497555.412 ops/s
# Warmup Iteration  15: 5493481.892 ops/s
# Warmup Iteration  16: 5486831.476 ops/s
# Warmup Iteration  17: 5625361.711 ops/s
# Warmup Iteration  18: 5612256.776 ops/s
# Warmup Iteration  19: 5614920.568 ops/s
# Warmup Iteration  20: 5610925.577 ops/s
# Warmup Iteration  21: 5610893.745 ops/s
# Warmup Iteration  22: 5613080.193 ops/s
# Warmup Iteration  23: 5626137.281 ops/s
# Warmup Iteration  24: 5605128.911 ops/s
# Warmup Iteration  25: 5617643.174 ops/s
# Warmup Iteration  26: 5615545.188 ops/s
# Warmup Iteration  27: 5621384.061 ops/s
# Warmup Iteration  28: 5620358.408 ops/s
# Warmup Iteration  29: 5615131.923 ops/s
# Warmup Iteration  30: 5625267.580 ops/s
Iteration   1: 5612770.009 ops/s
Iteration   2: 5616705.335 ops/s
Iteration   3: 5626772.542 ops/s
Iteration   4: 5628361.214 ops/s
Iteration   5: 5609307.276 ops/s
Iteration   6: 5620174.493 ops/s
Iteration   7: 5620204.665 ops/s
Iteration   8: 5603624.969 ops/s
Iteration   9: 5634166.293 ops/s
Iteration  10: 5604486.928 ops/s
Iteration  11: 5627422.218 ops/s
Iteration  12: 5617788.567 ops/s
Iteration  13: 5600177.097 ops/s
Iteration  14: 5614717.458 ops/s
Iteration  15: 5625712.810 ops/s
Iteration  16: 5617464.377 ops/s
Iteration  17: 5616442.418 ops/s
Iteration  18: 5608786.233 ops/s
Iteration  19: 5598015.269 ops/s
Iteration  20: 5616681.552 ops/s
Iteration  21: 5602177.397 ops/s
Iteration  22: 5595580.246 ops/s
Iteration  23: 5631860.068 ops/s
Iteration  24: 5614467.399 ops/s
Iteration  25: 5618677.999 ops/s
Iteration  26: 5599790.894 ops/s
Iteration  27: 5605973.048 ops/s
Iteration  28: 5619033.413 ops/s
Iteration  29: 5636907.189 ops/s
Iteration  30: 5629456.495 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectBooleanWithTarget":
  5615790.196 ±(99.9%) 7538.573 ops/s [Average]
  (min, avg, max) = (5595580.246, 5615790.196, 5636907.189), stdev = 11283.382
  CI (99.9%): [5608251.623, 5623328.769] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  5615790.196 ± 7538.573  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 624974.436 ops/s
# Warmup Iteration   2: 1340845.890 ops/s
# Warmup Iteration   3: 1404909.756 ops/s
# Warmup Iteration   4: 1413632.577 ops/s
# Warmup Iteration   5: 1177313.574 ops/s
# Warmup Iteration   6: 1415553.530 ops/s
# Warmup Iteration   7: 1416463.047 ops/s
# Warmup Iteration   8: 1414060.932 ops/s
# Warmup Iteration   9: 1418380.560 ops/s
# Warmup Iteration  10: 1408198.554 ops/s
# Warmup Iteration  11: 1415557.629 ops/s
# Warmup Iteration  12: 1417880.826 ops/s
# Warmup Iteration  13: 1416015.268 ops/s
# Warmup Iteration  14: 1416638.199 ops/s
# Warmup Iteration  15: 1417498.913 ops/s
# Warmup Iteration  16: 1417080.695 ops/s
# Warmup Iteration  17: 1414987.340 ops/s
# Warmup Iteration  18: 1412324.515 ops/s
# Warmup Iteration  19: 1412369.936 ops/s
# Warmup Iteration  20: 1414595.212 ops/s
# Warmup Iteration  21: 1410694.606 ops/s
# Warmup Iteration  22: 1412805.804 ops/s
# Warmup Iteration  23: 1414563.296 ops/s
# Warmup Iteration  24: 1412090.294 ops/s
# Warmup Iteration  25: 1412252.564 ops/s
# Warmup Iteration  26: 1410523.292 ops/s
# Warmup Iteration  27: 1409323.938 ops/s
# Warmup Iteration  28: 1411163.219 ops/s
# Warmup Iteration  29: 1412972.440 ops/s
# Warmup Iteration  30: 1416087.160 ops/s
Iteration   1: 1415388.109 ops/s
Iteration   2: 1414716.311 ops/s
Iteration   3: 1414591.588 ops/s
Iteration   4: 1411752.217 ops/s
Iteration   5: 1409828.284 ops/s
Iteration   6: 1412486.481 ops/s
Iteration   7: 1411331.326 ops/s
Iteration   8: 1413520.119 ops/s
Iteration   9: 1415953.707 ops/s
Iteration  10: 1411359.400 ops/s
Iteration  11: 1414904.937 ops/s
Iteration  12: 1413334.566 ops/s
Iteration  13: 1417739.816 ops/s
Iteration  14: 1419325.198 ops/s
Iteration  15: 1420256.330 ops/s
Iteration  16: 1415013.919 ops/s
Iteration  17: 1418707.890 ops/s
Iteration  18: 1419682.099 ops/s
Iteration  19: 1419212.007 ops/s
Iteration  20: 1419693.360 ops/s
Iteration  21: 1415044.060 ops/s
Iteration  22: 1406775.372 ops/s
Iteration  23: 1417901.598 ops/s
Iteration  24: 1413325.763 ops/s
Iteration  25: 1416728.172 ops/s
Iteration  26: 1412721.866 ops/s
Iteration  27: 1417062.944 ops/s
Iteration  28: 1414771.858 ops/s
Iteration  29: 1409963.998 ops/s
Iteration  30: 1416028.014 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByte":
  1414970.710 ±(99.9%) 2231.915 ops/s [Average]
  (min, avg, max) = (1406775.372, 1414970.710, 1420256.330), stdev = 3340.625
  CI (99.9%): [1412738.795, 1417202.625] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectByte  thrpt   30  1414970.710 ± 2231.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1252625.540 ops/s
# Warmup Iteration   2: 3037525.043 ops/s
# Warmup Iteration   3: 3135008.511 ops/s
# Warmup Iteration   4: 2591455.169 ops/s
# Warmup Iteration   5: 3137127.482 ops/s
# Warmup Iteration   6: 3147739.108 ops/s
# Warmup Iteration   7: 3143165.974 ops/s
# Warmup Iteration   8: 3140436.569 ops/s
# Warmup Iteration   9: 3147428.963 ops/s
# Warmup Iteration  10: 3149995.390 ops/s
# Warmup Iteration  11: 3133562.344 ops/s
# Warmup Iteration  12: 3142224.534 ops/s
# Warmup Iteration  13: 3138049.211 ops/s
# Warmup Iteration  14: 3140061.314 ops/s
# Warmup Iteration  15: 3143534.518 ops/s
# Warmup Iteration  16: 3139311.711 ops/s
# Warmup Iteration  17: 3145508.240 ops/s
# Warmup Iteration  18: 3139701.455 ops/s
# Warmup Iteration  19: 3143936.742 ops/s
# Warmup Iteration  20: 3147106.951 ops/s
# Warmup Iteration  21: 3140263.098 ops/s
# Warmup Iteration  22: 3141863.250 ops/s
# Warmup Iteration  23: 3139130.050 ops/s
# Warmup Iteration  24: 3152162.819 ops/s
# Warmup Iteration  25: 3141808.330 ops/s
# Warmup Iteration  26: 3140691.883 ops/s
# Warmup Iteration  27: 3142821.009 ops/s
# Warmup Iteration  28: 3143256.523 ops/s
# Warmup Iteration  29: 3138493.170 ops/s
# Warmup Iteration  30: 3133801.011 ops/s
Iteration   1: 3143004.966 ops/s
Iteration   2: 3142003.469 ops/s
Iteration   3: 3144397.364 ops/s
Iteration   4: 3139273.156 ops/s
Iteration   5: 3142841.365 ops/s
Iteration   6: 3145799.509 ops/s
Iteration   7: 3134701.442 ops/s
Iteration   8: 3136395.056 ops/s
Iteration   9: 3148201.329 ops/s
Iteration  10: 3131224.929 ops/s
Iteration  11: 3148257.369 ops/s
Iteration  12: 3143144.848 ops/s
Iteration  13: 3143663.905 ops/s
Iteration  14: 3149293.813 ops/s
Iteration  15: 3137176.825 ops/s
Iteration  16: 3152884.342 ops/s
Iteration  17: 3140368.847 ops/s
Iteration  18: 3148953.295 ops/s
Iteration  19: 3145442.756 ops/s
Iteration  20: 3145813.537 ops/s
Iteration  21: 3144068.372 ops/s
Iteration  22: 3139957.812 ops/s
Iteration  23: 3144467.962 ops/s
Iteration  24: 3148884.733 ops/s
Iteration  25: 3137480.540 ops/s
Iteration  26: 3141260.937 ops/s
Iteration  27: 3148434.476 ops/s
Iteration  28: 3137857.540 ops/s
Iteration  29: 3140806.457 ops/s
Iteration  30: 3132367.508 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithBagTarget":
  3142614.282 ±(99.9%) 3527.721 ops/s [Average]
  (min, avg, max) = (3131224.929, 3142614.282, 3152884.342), stdev = 5280.128
  CI (99.9%): [3139086.561, 3146142.003] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  3142614.282 ± 3527.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1037668.591 ops/s
# Warmup Iteration   2: 2159741.204 ops/s
# Warmup Iteration   3: 2274197.046 ops/s
# Warmup Iteration   4: 2288802.864 ops/s
# Warmup Iteration   5: 1892343.733 ops/s
# Warmup Iteration   6: 2284300.265 ops/s
# Warmup Iteration   7: 2289807.354 ops/s
# Warmup Iteration   8: 2283239.438 ops/s
# Warmup Iteration   9: 2292306.556 ops/s
# Warmup Iteration  10: 2284849.306 ops/s
# Warmup Iteration  11: 2283706.256 ops/s
# Warmup Iteration  12: 2286248.646 ops/s
# Warmup Iteration  13: 2285974.402 ops/s
# Warmup Iteration  14: 2293523.239 ops/s
# Warmup Iteration  15: 2288358.900 ops/s
# Warmup Iteration  16: 2287670.279 ops/s
# Warmup Iteration  17: 2288975.660 ops/s
# Warmup Iteration  18: 2293936.428 ops/s
# Warmup Iteration  19: 2297574.175 ops/s
# Warmup Iteration  20: 2289859.642 ops/s
# Warmup Iteration  21: 2290324.480 ops/s
# Warmup Iteration  22: 2296310.478 ops/s
# Warmup Iteration  23: 2297223.466 ops/s
# Warmup Iteration  24: 2286036.457 ops/s
# Warmup Iteration  25: 2293086.509 ops/s
# Warmup Iteration  26: 2290844.333 ops/s
# Warmup Iteration  27: 2286596.681 ops/s
# Warmup Iteration  28: 2291012.075 ops/s
# Warmup Iteration  29: 2292131.297 ops/s
# Warmup Iteration  30: 2295063.098 ops/s
Iteration   1: 2290660.399 ops/s
Iteration   2: 2293906.684 ops/s
Iteration   3: 2290486.102 ops/s
Iteration   4: 2297803.121 ops/s
Iteration   5: 2295186.888 ops/s
Iteration   6: 2298421.452 ops/s
Iteration   7: 2293710.788 ops/s
Iteration   8: 2299639.482 ops/s
Iteration   9: 2292637.749 ops/s
Iteration  10: 2296633.876 ops/s
Iteration  11: 2294351.600 ops/s
Iteration  12: 2292115.598 ops/s
Iteration  13: 2292041.745 ops/s
Iteration  14: 2286708.303 ops/s
Iteration  15: 2293795.208 ops/s
Iteration  16: 2289969.963 ops/s
Iteration  17: 2294063.444 ops/s
Iteration  18: 2292874.954 ops/s
Iteration  19: 2303250.731 ops/s
Iteration  20: 2295392.437 ops/s
Iteration  21: 2288977.353 ops/s
Iteration  22: 2296092.288 ops/s
Iteration  23: 2294418.463 ops/s
Iteration  24: 2285272.399 ops/s
Iteration  25: 2294507.265 ops/s
Iteration  26: 2291430.098 ops/s
Iteration  27: 2294275.466 ops/s
Iteration  28: 2289953.526 ops/s
Iteration  29: 2298298.854 ops/s
Iteration  30: 2291528.096 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectByteWithTarget":
  2293613.478 ±(99.9%) 2526.577 ops/s [Average]
  (min, avg, max) = (2285272.399, 2293613.478, 2303250.731), stdev = 3781.662
  CI (99.9%): [2291086.901, 2296140.055] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2293613.478 ± 2526.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625022.940 ops/s
# Warmup Iteration   2: 1440242.589 ops/s
# Warmup Iteration   3: 1499029.412 ops/s
# Warmup Iteration   4: 1296019.606 ops/s
# Warmup Iteration   5: 1447982.469 ops/s
# Warmup Iteration   6: 1501105.366 ops/s
# Warmup Iteration   7: 1504530.792 ops/s
# Warmup Iteration   8: 1499151.151 ops/s
# Warmup Iteration   9: 1502480.124 ops/s
# Warmup Iteration  10: 1502519.613 ops/s
# Warmup Iteration  11: 1502939.086 ops/s
# Warmup Iteration  12: 1502592.640 ops/s
# Warmup Iteration  13: 1505614.993 ops/s
# Warmup Iteration  14: 1497164.191 ops/s
# Warmup Iteration  15: 1498490.581 ops/s
# Warmup Iteration  16: 1503168.997 ops/s
# Warmup Iteration  17: 1499051.399 ops/s
# Warmup Iteration  18: 1501505.403 ops/s
# Warmup Iteration  19: 1504237.189 ops/s
# Warmup Iteration  20: 1499925.851 ops/s
# Warmup Iteration  21: 1503263.140 ops/s
# Warmup Iteration  22: 1501612.571 ops/s
# Warmup Iteration  23: 1502119.014 ops/s
# Warmup Iteration  24: 1498339.844 ops/s
# Warmup Iteration  25: 1501304.581 ops/s
# Warmup Iteration  26: 1501943.854 ops/s
# Warmup Iteration  27: 1503267.443 ops/s
# Warmup Iteration  28: 1505208.667 ops/s
# Warmup Iteration  29: 1501727.314 ops/s
# Warmup Iteration  30: 1500749.503 ops/s
Iteration   1: 1499942.204 ops/s
Iteration   2: 1492217.059 ops/s
Iteration   3: 1494127.418 ops/s
Iteration   4: 1500213.255 ops/s
Iteration   5: 1503616.211 ops/s
Iteration   6: 1499249.858 ops/s
Iteration   7: 1504362.608 ops/s
Iteration   8: 1505602.847 ops/s
Iteration   9: 1493607.037 ops/s
Iteration  10: 1499133.821 ops/s
Iteration  11: 1505494.416 ops/s
Iteration  12: 1501027.015 ops/s
Iteration  13: 1502813.943 ops/s
Iteration  14: 1503325.919 ops/s
Iteration  15: 1503833.228 ops/s
Iteration  16: 1503983.270 ops/s
Iteration  17: 1504717.791 ops/s
Iteration  18: 1509269.290 ops/s
Iteration  19: 1498337.054 ops/s
Iteration  20: 1499541.998 ops/s
Iteration  21: 1499703.545 ops/s
Iteration  22: 1503421.687 ops/s
Iteration  23: 1500635.150 ops/s
Iteration  24: 1499290.441 ops/s
Iteration  25: 1502249.091 ops/s
Iteration  26: 1504934.429 ops/s
Iteration  27: 1495811.770 ops/s
Iteration  28: 1502477.212 ops/s
Iteration  29: 1502742.053 ops/s
Iteration  30: 1502887.804 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectChar":
  1501285.647 ±(99.9%) 2557.041 ops/s [Average]
  (min, avg, max) = (1492217.059, 1501285.647, 1509269.290), stdev = 3827.259
  CI (99.9%): [1498728.606, 1503842.689] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectChar  thrpt   30  1501285.647 ± 2557.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1205743.588 ops/s
# Warmup Iteration   2: 2863319.649 ops/s
# Warmup Iteration   3: 2913891.667 ops/s
# Warmup Iteration   4: 2420399.833 ops/s
# Warmup Iteration   5: 2912657.878 ops/s
# Warmup Iteration   6: 2919124.549 ops/s
# Warmup Iteration   7: 2921603.143 ops/s
# Warmup Iteration   8: 2910637.860 ops/s
# Warmup Iteration   9: 2921976.875 ops/s
# Warmup Iteration  10: 2924368.121 ops/s
# Warmup Iteration  11: 2912361.547 ops/s
# Warmup Iteration  12: 2914605.047 ops/s
# Warmup Iteration  13: 2925369.787 ops/s
# Warmup Iteration  14: 2916659.672 ops/s
# Warmup Iteration  15: 2919468.244 ops/s
# Warmup Iteration  16: 2918963.486 ops/s
# Warmup Iteration  17: 2924617.477 ops/s
# Warmup Iteration  18: 2912554.280 ops/s
# Warmup Iteration  19: 2919040.799 ops/s
# Warmup Iteration  20: 2920679.146 ops/s
# Warmup Iteration  21: 2921761.044 ops/s
# Warmup Iteration  22: 2925093.621 ops/s
# Warmup Iteration  23: 2922840.686 ops/s
# Warmup Iteration  24: 2923752.201 ops/s
# Warmup Iteration  25: 2917418.793 ops/s
# Warmup Iteration  26: 2913446.537 ops/s
# Warmup Iteration  27: 2924319.826 ops/s
# Warmup Iteration  28: 2919885.210 ops/s
# Warmup Iteration  29: 2926025.250 ops/s
# Warmup Iteration  30: 2919396.584 ops/s
Iteration   1: 2933061.317 ops/s
Iteration   2: 2928353.418 ops/s
Iteration   3: 2916566.124 ops/s
Iteration   4: 2912179.196 ops/s
Iteration   5: 2924265.464 ops/s
Iteration   6: 2922321.569 ops/s
Iteration   7: 2919223.102 ops/s
Iteration   8: 2915479.543 ops/s
Iteration   9: 2911019.614 ops/s
Iteration  10: 2916618.707 ops/s
Iteration  11: 2916575.326 ops/s
Iteration  12: 2919632.337 ops/s
Iteration  13: 2924198.008 ops/s
Iteration  14: 2927911.379 ops/s
Iteration  15: 2930692.826 ops/s
Iteration  16: 2922610.105 ops/s
Iteration  17: 2931886.756 ops/s
Iteration  18: 2916235.153 ops/s
Iteration  19: 2929466.727 ops/s
Iteration  20: 2929215.054 ops/s
Iteration  21: 2921063.902 ops/s
Iteration  22: 2924633.182 ops/s
Iteration  23: 2920472.360 ops/s
Iteration  24: 2922196.925 ops/s
Iteration  25: 2928162.577 ops/s
Iteration  26: 2927036.322 ops/s
Iteration  27: 2922682.601 ops/s
Iteration  28: 2913794.973 ops/s
Iteration  29: 2908624.782 ops/s
Iteration  30: 2929683.273 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithBagTarget":
  2922195.421 ±(99.9%) 4406.187 ops/s [Average]
  (min, avg, max) = (2908624.782, 2922195.421, 2933061.317), stdev = 6594.974
  CI (99.9%): [2917789.233, 2926601.608] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2922195.421 ± 4406.187  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009527.293 ops/s
# Warmup Iteration   2: 2233232.377 ops/s
# Warmup Iteration   3: 2342531.410 ops/s
# Warmup Iteration   4: 2312223.948 ops/s
# Warmup Iteration   5: 2000271.423 ops/s
# Warmup Iteration   6: 2364636.312 ops/s
# Warmup Iteration   7: 2358258.648 ops/s
# Warmup Iteration   8: 2366187.571 ops/s
# Warmup Iteration   9: 2361764.968 ops/s
# Warmup Iteration  10: 2362137.893 ops/s
# Warmup Iteration  11: 2364949.856 ops/s
# Warmup Iteration  12: 2363074.697 ops/s
# Warmup Iteration  13: 2360538.746 ops/s
# Warmup Iteration  14: 2368103.857 ops/s
# Warmup Iteration  15: 2363991.557 ops/s
# Warmup Iteration  16: 2368232.670 ops/s
# Warmup Iteration  17: 2360018.371 ops/s
# Warmup Iteration  18: 2358383.624 ops/s
# Warmup Iteration  19: 2359160.845 ops/s
# Warmup Iteration  20: 2358964.202 ops/s
# Warmup Iteration  21: 2358642.330 ops/s
# Warmup Iteration  22: 2358933.792 ops/s
# Warmup Iteration  23: 2358680.927 ops/s
# Warmup Iteration  24: 2362040.084 ops/s
# Warmup Iteration  25: 2359591.066 ops/s
# Warmup Iteration  26: 2365856.907 ops/s
# Warmup Iteration  27: 2360841.601 ops/s
# Warmup Iteration  28: 2357402.929 ops/s
# Warmup Iteration  29: 2363185.962 ops/s
# Warmup Iteration  30: 2356205.999 ops/s
Iteration   1: 2361589.683 ops/s
Iteration   2: 2361495.541 ops/s
Iteration   3: 2361287.346 ops/s
Iteration   4: 2360265.300 ops/s
Iteration   5: 2364248.306 ops/s
Iteration   6: 2364031.630 ops/s
Iteration   7: 2366058.127 ops/s
Iteration   8: 2365809.810 ops/s
Iteration   9: 2358381.543 ops/s
Iteration  10: 2367867.817 ops/s
Iteration  11: 2349423.054 ops/s
Iteration  12: 2362402.665 ops/s
Iteration  13: 2369048.912 ops/s
Iteration  14: 2363520.716 ops/s
Iteration  15: 2368109.343 ops/s
Iteration  16: 2361006.835 ops/s
Iteration  17: 2365683.976 ops/s
Iteration  18: 2363793.484 ops/s
Iteration  19: 2366649.954 ops/s
Iteration  20: 2366205.037 ops/s
Iteration  21: 2367320.391 ops/s
Iteration  22: 2367764.492 ops/s
Iteration  23: 2364957.128 ops/s
Iteration  24: 2369876.175 ops/s
Iteration  25: 2364251.507 ops/s
Iteration  26: 2362796.534 ops/s
Iteration  27: 2362431.546 ops/s
Iteration  28: 2368041.211 ops/s
Iteration  29: 2359946.262 ops/s
Iteration  30: 2361578.733 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectCharWithTarget":
  2363861.435 ±(99.9%) 2694.027 ops/s [Average]
  (min, avg, max) = (2349423.054, 2363861.435, 2369876.175), stdev = 4032.294
  CI (99.9%): [2361167.408, 2366555.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2363861.435 ± 2694.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502985.651 ops/s
# Warmup Iteration   2: 1137121.901 ops/s
# Warmup Iteration   3: 1171998.167 ops/s
# Warmup Iteration   4: 1008467.691 ops/s
# Warmup Iteration   5: 1133885.462 ops/s
# Warmup Iteration   6: 1163598.344 ops/s
# Warmup Iteration   7: 1170569.709 ops/s
# Warmup Iteration   8: 1164993.795 ops/s
# Warmup Iteration   9: 1170705.985 ops/s
# Warmup Iteration  10: 1165254.156 ops/s
# Warmup Iteration  11: 1166421.632 ops/s
# Warmup Iteration  12: 1171807.286 ops/s
# Warmup Iteration  13: 1166768.969 ops/s
# Warmup Iteration  14: 1168577.094 ops/s
# Warmup Iteration  15: 1163361.931 ops/s
# Warmup Iteration  16: 1168434.059 ops/s
# Warmup Iteration  17: 1162843.983 ops/s
# Warmup Iteration  18: 1165739.356 ops/s
# Warmup Iteration  19: 1166741.090 ops/s
# Warmup Iteration  20: 1162755.465 ops/s
# Warmup Iteration  21: 1163584.531 ops/s
# Warmup Iteration  22: 1164813.182 ops/s
# Warmup Iteration  23: 1166118.404 ops/s
# Warmup Iteration  24: 1163016.428 ops/s
# Warmup Iteration  25: 1164690.056 ops/s
# Warmup Iteration  26: 1164736.401 ops/s
# Warmup Iteration  27: 1164476.418 ops/s
# Warmup Iteration  28: 1160013.160 ops/s
# Warmup Iteration  29: 1170626.809 ops/s
# Warmup Iteration  30: 1168470.365 ops/s
Iteration   1: 1174023.483 ops/s
Iteration   2: 1165529.024 ops/s
Iteration   3: 1164510.496 ops/s
Iteration   4: 1173597.414 ops/s
Iteration   5: 1167259.336 ops/s
Iteration   6: 1172568.139 ops/s
Iteration   7: 1169026.517 ops/s
Iteration   8: 1164882.512 ops/s
Iteration   9: 1166027.644 ops/s
Iteration  10: 1167930.001 ops/s
Iteration  11: 1170077.508 ops/s
Iteration  12: 1170279.049 ops/s
Iteration  13: 1165825.659 ops/s
Iteration  14: 1172150.550 ops/s
Iteration  15: 1167062.151 ops/s
Iteration  16: 1165009.877 ops/s
Iteration  17: 1176447.094 ops/s
Iteration  18: 1167899.364 ops/s
Iteration  19: 1171659.046 ops/s
Iteration  20: 1172186.277 ops/s
Iteration  21: 1165937.367 ops/s
Iteration  22: 1168838.956 ops/s
Iteration  23: 1176615.222 ops/s
Iteration  24: 1168141.322 ops/s
Iteration  25: 1169638.380 ops/s
Iteration  26: 1170433.069 ops/s
Iteration  27: 1161690.721 ops/s
Iteration  28: 1162876.300 ops/s
Iteration  29: 1162521.212 ops/s
Iteration  30: 1170335.992 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDouble":
  1168699.323 ±(99.9%) 2603.035 ops/s [Average]
  (min, avg, max) = (1161690.721, 1168699.323, 1176615.222), stdev = 3896.100
  CI (99.9%): [1166096.288, 1171302.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectDouble  thrpt   30  1168699.323 ± 2603.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 927848.361 ops/s
# Warmup Iteration   2: 2118131.775 ops/s
# Warmup Iteration   3: 2148057.408 ops/s
# Warmup Iteration   4: 1820568.662 ops/s
# Warmup Iteration   5: 2141462.065 ops/s
# Warmup Iteration   6: 2163110.160 ops/s
# Warmup Iteration   7: 2158370.369 ops/s
# Warmup Iteration   8: 2159658.772 ops/s
# Warmup Iteration   9: 2161713.475 ops/s
# Warmup Iteration  10: 2164740.664 ops/s
# Warmup Iteration  11: 2161851.816 ops/s
# Warmup Iteration  12: 2162498.198 ops/s
# Warmup Iteration  13: 2164549.229 ops/s
# Warmup Iteration  14: 2162655.867 ops/s
# Warmup Iteration  15: 2163477.132 ops/s
# Warmup Iteration  16: 2168447.022 ops/s
# Warmup Iteration  17: 2169620.647 ops/s
# Warmup Iteration  18: 2171315.318 ops/s
# Warmup Iteration  19: 2166970.530 ops/s
# Warmup Iteration  20: 2168171.270 ops/s
# Warmup Iteration  21: 2164237.063 ops/s
# Warmup Iteration  22: 2167919.784 ops/s
# Warmup Iteration  23: 2164746.891 ops/s
# Warmup Iteration  24: 2157985.522 ops/s
# Warmup Iteration  25: 2167560.267 ops/s
# Warmup Iteration  26: 2167152.576 ops/s
# Warmup Iteration  27: 2176539.156 ops/s
# Warmup Iteration  28: 2163638.107 ops/s
# Warmup Iteration  29: 2161642.416 ops/s
# Warmup Iteration  30: 2161002.088 ops/s
Iteration   1: 2168191.859 ops/s
Iteration   2: 2171568.439 ops/s
Iteration   3: 2169068.079 ops/s
Iteration   4: 2158630.975 ops/s
Iteration   5: 2165413.054 ops/s
Iteration   6: 2165544.529 ops/s
Iteration   7: 2159028.069 ops/s
Iteration   8: 2170779.857 ops/s
Iteration   9: 2163406.481 ops/s
Iteration  10: 2161922.291 ops/s
Iteration  11: 2166247.724 ops/s
Iteration  12: 2170406.834 ops/s
Iteration  13: 2169563.713 ops/s
Iteration  14: 2180143.006 ops/s
Iteration  15: 2159368.169 ops/s
Iteration  16: 2169965.645 ops/s
Iteration  17: 2146259.134 ops/s
Iteration  18: 2165262.170 ops/s
Iteration  19: 2152545.340 ops/s
Iteration  20: 2165637.883 ops/s
Iteration  21: 2158397.030 ops/s
Iteration  22: 2171229.929 ops/s
Iteration  23: 2168173.037 ops/s
Iteration  24: 2158194.296 ops/s
Iteration  25: 2153991.756 ops/s
Iteration  26: 2167411.207 ops/s
Iteration  27: 2165176.432 ops/s
Iteration  28: 2164033.608 ops/s
Iteration  29: 2160861.446 ops/s
Iteration  30: 2158828.834 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2164175.027 ±(99.9%) 4537.582 ops/s [Average]
  (min, avg, max) = (2146259.134, 2164175.027, 2180143.006), stdev = 6791.639
  CI (99.9%): [2159637.446, 2168712.609] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2164175.027 ± 4537.582  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 790801.632 ops/s
# Warmup Iteration   2: 1745421.128 ops/s
# Warmup Iteration   3: 1813203.842 ops/s
# Warmup Iteration   4: 1764083.027 ops/s
# Warmup Iteration   5: 1573753.724 ops/s
# Warmup Iteration   6: 1831420.346 ops/s
# Warmup Iteration   7: 1830217.138 ops/s
# Warmup Iteration   8: 1836437.238 ops/s
# Warmup Iteration   9: 1830456.472 ops/s
# Warmup Iteration  10: 1831707.031 ops/s
# Warmup Iteration  11: 1831849.366 ops/s
# Warmup Iteration  12: 1829786.472 ops/s
# Warmup Iteration  13: 1834539.165 ops/s
# Warmup Iteration  14: 1830599.168 ops/s
# Warmup Iteration  15: 1831845.110 ops/s
# Warmup Iteration  16: 1829750.461 ops/s
# Warmup Iteration  17: 1828878.355 ops/s
# Warmup Iteration  18: 1832307.642 ops/s
# Warmup Iteration  19: 1827706.975 ops/s
# Warmup Iteration  20: 1832601.264 ops/s
# Warmup Iteration  21: 1819748.878 ops/s
# Warmup Iteration  22: 1826682.449 ops/s
# Warmup Iteration  23: 1826047.036 ops/s
# Warmup Iteration  24: 1827883.628 ops/s
# Warmup Iteration  25: 1827264.186 ops/s
# Warmup Iteration  26: 1828425.226 ops/s
# Warmup Iteration  27: 1825800.276 ops/s
# Warmup Iteration  28: 1825940.884 ops/s
# Warmup Iteration  29: 1829270.682 ops/s
# Warmup Iteration  30: 1832726.359 ops/s
Iteration   1: 1824431.317 ops/s
Iteration   2: 1832842.956 ops/s
Iteration   3: 1825813.336 ops/s
Iteration   4: 1826664.049 ops/s
Iteration   5: 1832366.326 ops/s
Iteration   6: 1829430.246 ops/s
Iteration   7: 1834068.029 ops/s
Iteration   8: 1821402.044 ops/s
Iteration   9: 1833440.701 ops/s
Iteration  10: 1829254.627 ops/s
Iteration  11: 1829887.269 ops/s
Iteration  12: 1829327.856 ops/s
Iteration  13: 1829629.919 ops/s
Iteration  14: 1829656.191 ops/s
Iteration  15: 1830658.263 ops/s
Iteration  16: 1834791.921 ops/s
Iteration  17: 1826241.115 ops/s
Iteration  18: 1829781.684 ops/s
Iteration  19: 1826566.533 ops/s
Iteration  20: 1828334.556 ops/s
Iteration  21: 1834812.027 ops/s
Iteration  22: 1833741.139 ops/s
Iteration  23: 1827411.241 ops/s
Iteration  24: 1833916.966 ops/s
Iteration  25: 1831826.649 ops/s
Iteration  26: 1831851.367 ops/s
Iteration  27: 1830955.901 ops/s
Iteration  28: 1830482.444 ops/s
Iteration  29: 1828252.509 ops/s
Iteration  30: 1828198.253 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectDoubleWithTarget":
  1829867.914 ±(99.9%) 2157.024 ops/s [Average]
  (min, avg, max) = (1821402.044, 1829867.914, 1834812.027), stdev = 3228.533
  CI (99.9%): [1827710.890, 1832024.939] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1829867.914 ± 2157.024  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562362.153 ops/s
# Warmup Iteration   2: 1209249.725 ops/s
# Warmup Iteration   3: 1274250.921 ops/s
# Warmup Iteration   4: 1274618.127 ops/s
# Warmup Iteration   5: 1056258.039 ops/s
# Warmup Iteration   6: 1279101.869 ops/s
# Warmup Iteration   7: 1274306.250 ops/s
# Warmup Iteration   8: 1278218.214 ops/s
# Warmup Iteration   9: 1274549.291 ops/s
# Warmup Iteration  10: 1281043.454 ops/s
# Warmup Iteration  11: 1272353.285 ops/s
# Warmup Iteration  12: 1277984.013 ops/s
# Warmup Iteration  13: 1273212.594 ops/s
# Warmup Iteration  14: 1275892.584 ops/s
# Warmup Iteration  15: 1275555.477 ops/s
# Warmup Iteration  16: 1276048.844 ops/s
# Warmup Iteration  17: 1276275.254 ops/s
# Warmup Iteration  18: 1273962.130 ops/s
# Warmup Iteration  19: 1274363.823 ops/s
# Warmup Iteration  20: 1274081.077 ops/s
# Warmup Iteration  21: 1272444.191 ops/s
# Warmup Iteration  22: 1274567.427 ops/s
# Warmup Iteration  23: 1279662.496 ops/s
# Warmup Iteration  24: 1274614.660 ops/s
# Warmup Iteration  25: 1276661.681 ops/s
# Warmup Iteration  26: 1275713.149 ops/s
# Warmup Iteration  27: 1276415.401 ops/s
# Warmup Iteration  28: 1273344.862 ops/s
# Warmup Iteration  29: 1279815.227 ops/s
# Warmup Iteration  30: 1276715.442 ops/s
Iteration   1: 1273055.258 ops/s
Iteration   2: 1272540.657 ops/s
Iteration   3: 1279468.847 ops/s
Iteration   4: 1280989.815 ops/s
Iteration   5: 1275255.309 ops/s
Iteration   6: 1279523.970 ops/s
Iteration   7: 1277409.916 ops/s
Iteration   8: 1277077.887 ops/s
Iteration   9: 1276319.493 ops/s
Iteration  10: 1275283.437 ops/s
Iteration  11: 1279943.363 ops/s
Iteration  12: 1273414.118 ops/s
Iteration  13: 1277491.547 ops/s
Iteration  14: 1272968.416 ops/s
Iteration  15: 1280587.746 ops/s
Iteration  16: 1274719.632 ops/s
Iteration  17: 1275173.075 ops/s
Iteration  18: 1279450.441 ops/s
Iteration  19: 1274175.938 ops/s
Iteration  20: 1275492.218 ops/s
Iteration  21: 1275684.223 ops/s
Iteration  22: 1272312.530 ops/s
Iteration  23: 1277263.327 ops/s
Iteration  24: 1278020.821 ops/s
Iteration  25: 1278896.779 ops/s
Iteration  26: 1272961.978 ops/s
Iteration  27: 1278771.609 ops/s
Iteration  28: 1276409.315 ops/s
Iteration  29: 1275591.267 ops/s
Iteration  30: 1273508.770 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloat":
  1276325.390 ±(99.9%) 1731.881 ops/s [Average]
  (min, avg, max) = (1272312.530, 1276325.390, 1280989.815), stdev = 2592.198
  CI (99.9%): [1274593.509, 1278057.271] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectFloat  thrpt   30  1276325.390 ± 1731.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1071463.672 ops/s
# Warmup Iteration   2: 2418526.595 ops/s
# Warmup Iteration   3: 2493960.184 ops/s
# Warmup Iteration   4: 2131805.771 ops/s
# Warmup Iteration   5: 2447457.424 ops/s
# Warmup Iteration   6: 2502763.807 ops/s
# Warmup Iteration   7: 2491225.817 ops/s
# Warmup Iteration   8: 2494960.079 ops/s
# Warmup Iteration   9: 2487975.668 ops/s
# Warmup Iteration  10: 2491737.271 ops/s
# Warmup Iteration  11: 2482640.143 ops/s
# Warmup Iteration  12: 2492824.121 ops/s
# Warmup Iteration  13: 2491971.296 ops/s
# Warmup Iteration  14: 2491903.580 ops/s
# Warmup Iteration  15: 2493350.525 ops/s
# Warmup Iteration  16: 2493592.864 ops/s
# Warmup Iteration  17: 2501326.952 ops/s
# Warmup Iteration  18: 2494624.424 ops/s
# Warmup Iteration  19: 2496012.969 ops/s
# Warmup Iteration  20: 2498478.392 ops/s
# Warmup Iteration  21: 2485652.916 ops/s
# Warmup Iteration  22: 2498875.992 ops/s
# Warmup Iteration  23: 2491572.158 ops/s
# Warmup Iteration  24: 2498144.899 ops/s
# Warmup Iteration  25: 2503549.971 ops/s
# Warmup Iteration  26: 2498012.303 ops/s
# Warmup Iteration  27: 2493680.156 ops/s
# Warmup Iteration  28: 2496965.252 ops/s
# Warmup Iteration  29: 2493270.450 ops/s
# Warmup Iteration  30: 2493314.816 ops/s
Iteration   1: 2495656.227 ops/s
Iteration   2: 2502485.370 ops/s
Iteration   3: 2492529.705 ops/s
Iteration   4: 2500391.770 ops/s
Iteration   5: 2493533.066 ops/s
Iteration   6: 2504183.407 ops/s
Iteration   7: 2501610.466 ops/s
Iteration   8: 2494521.977 ops/s
Iteration   9: 2488786.296 ops/s
Iteration  10: 2493182.022 ops/s
Iteration  11: 2495412.821 ops/s
Iteration  12: 2496406.910 ops/s
Iteration  13: 2497418.648 ops/s
Iteration  14: 2495727.297 ops/s
Iteration  15: 2490613.019 ops/s
Iteration  16: 2498675.086 ops/s
Iteration  17: 2497916.383 ops/s
Iteration  18: 2492984.750 ops/s
Iteration  19: 2504150.167 ops/s
Iteration  20: 2492920.725 ops/s
Iteration  21: 2495373.180 ops/s
Iteration  22: 2482853.156 ops/s
Iteration  23: 2481947.546 ops/s
Iteration  24: 2473533.287 ops/s
Iteration  25: 2497421.688 ops/s
Iteration  26: 2500022.052 ops/s
Iteration  27: 2493669.804 ops/s
Iteration  28: 2493813.289 ops/s
Iteration  29: 2500097.616 ops/s
Iteration  30: 2495330.834 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2494772.285 ±(99.9%) 4375.016 ops/s [Average]
  (min, avg, max) = (2473533.287, 2494772.285, 2504183.407), stdev = 6548.319
  CI (99.9%): [2490397.269, 2499147.302] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2494772.285 ± 4375.016  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 910852.555 ops/s
# Warmup Iteration   2: 1931084.260 ops/s
# Warmup Iteration   3: 2022479.878 ops/s
# Warmup Iteration   4: 2038573.808 ops/s
# Warmup Iteration   5: 1690812.170 ops/s
# Warmup Iteration   6: 2038708.996 ops/s
# Warmup Iteration   7: 2039176.762 ops/s
# Warmup Iteration   8: 2048594.318 ops/s
# Warmup Iteration   9: 2037978.018 ops/s
# Warmup Iteration  10: 2036880.179 ops/s
# Warmup Iteration  11: 2042179.233 ops/s
# Warmup Iteration  12: 2041586.194 ops/s
# Warmup Iteration  13: 2043038.948 ops/s
# Warmup Iteration  14: 2041406.019 ops/s
# Warmup Iteration  15: 2041399.488 ops/s
# Warmup Iteration  16: 2036191.370 ops/s
# Warmup Iteration  17: 2038674.636 ops/s
# Warmup Iteration  18: 2041554.461 ops/s
# Warmup Iteration  19: 2045962.056 ops/s
# Warmup Iteration  20: 2037413.299 ops/s
# Warmup Iteration  21: 2036836.291 ops/s
# Warmup Iteration  22: 2041881.809 ops/s
# Warmup Iteration  23: 2035301.230 ops/s
# Warmup Iteration  24: 2038295.322 ops/s
# Warmup Iteration  25: 2038265.907 ops/s
# Warmup Iteration  26: 2040269.453 ops/s
# Warmup Iteration  27: 2036313.167 ops/s
# Warmup Iteration  28: 2042679.501 ops/s
# Warmup Iteration  29: 2039111.856 ops/s
# Warmup Iteration  30: 2042984.134 ops/s
Iteration   1: 2045229.182 ops/s
Iteration   2: 2042722.812 ops/s
Iteration   3: 2046825.269 ops/s
Iteration   4: 2030956.063 ops/s
Iteration   5: 2037759.166 ops/s
Iteration   6: 2038831.857 ops/s
Iteration   7: 2039589.591 ops/s
Iteration   8: 2040171.738 ops/s
Iteration   9: 2039578.747 ops/s
Iteration  10: 2033174.622 ops/s
Iteration  11: 2031995.681 ops/s
Iteration  12: 2038356.655 ops/s
Iteration  13: 2039718.844 ops/s
Iteration  14: 2038051.730 ops/s
Iteration  15: 2040080.328 ops/s
Iteration  16: 2033919.999 ops/s
Iteration  17: 2038423.547 ops/s
Iteration  18: 2042388.340 ops/s
Iteration  19: 2042309.401 ops/s
Iteration  20: 2044566.628 ops/s
Iteration  21: 2041497.050 ops/s
Iteration  22: 2038895.381 ops/s
Iteration  23: 2042819.213 ops/s
Iteration  24: 2038534.760 ops/s
Iteration  25: 2041787.187 ops/s
Iteration  26: 2047078.037 ops/s
Iteration  27: 2042571.332 ops/s
Iteration  28: 2039018.543 ops/s
Iteration  29: 2041757.037 ops/s
Iteration  30: 2040610.562 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectFloatWithTarget":
  2039973.977 ±(99.9%) 2591.572 ops/s [Average]
  (min, avg, max) = (2030956.063, 2039973.977, 2047078.037), stdev = 3878.944
  CI (99.9%): [2037382.404, 2042565.549] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  2039973.977 ± 2591.572  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 504371.416 ops/s
# Warmup Iteration   2: 1067177.388 ops/s
# Warmup Iteration   3: 1122091.165 ops/s
# Warmup Iteration   4: 1134961.992 ops/s
# Warmup Iteration   5: 935834.636 ops/s
# Warmup Iteration   6: 1126477.254 ops/s
# Warmup Iteration   7: 1123562.084 ops/s
# Warmup Iteration   8: 1124263.166 ops/s
# Warmup Iteration   9: 1129155.432 ops/s
# Warmup Iteration  10: 1128613.873 ops/s
# Warmup Iteration  11: 1126829.755 ops/s
# Warmup Iteration  12: 1131618.876 ops/s
# Warmup Iteration  13: 1126644.289 ops/s
# Warmup Iteration  14: 1122304.369 ops/s
# Warmup Iteration  15: 1125582.828 ops/s
# Warmup Iteration  16: 1122647.291 ops/s
# Warmup Iteration  17: 1137063.541 ops/s
# Warmup Iteration  18: 1127804.163 ops/s
# Warmup Iteration  19: 1131112.100 ops/s
# Warmup Iteration  20: 1125060.687 ops/s
# Warmup Iteration  21: 1135375.109 ops/s
# Warmup Iteration  22: 1129021.686 ops/s
# Warmup Iteration  23: 1132226.410 ops/s
# Warmup Iteration  24: 1128248.356 ops/s
# Warmup Iteration  25: 1128537.492 ops/s
# Warmup Iteration  26: 1129805.251 ops/s
# Warmup Iteration  27: 1126965.660 ops/s
# Warmup Iteration  28: 1133096.961 ops/s
# Warmup Iteration  29: 1128092.264 ops/s
# Warmup Iteration  30: 1126513.725 ops/s
Iteration   1: 1123867.400 ops/s
Iteration   2: 1131065.762 ops/s
Iteration   3: 1129429.133 ops/s
Iteration   4: 1133941.911 ops/s
Iteration   5: 1131315.460 ops/s
Iteration   6: 1120554.948 ops/s
Iteration   7: 1129296.984 ops/s
Iteration   8: 1127303.128 ops/s
Iteration   9: 1143226.183 ops/s
Iteration  10: 1131621.978 ops/s
Iteration  11: 1121694.790 ops/s
Iteration  12: 1125327.021 ops/s
Iteration  13: 1126780.917 ops/s
Iteration  14: 1131630.277 ops/s
Iteration  15: 1125246.194 ops/s
Iteration  16: 1128792.124 ops/s
Iteration  17: 1136965.994 ops/s
Iteration  18: 1138486.811 ops/s
Iteration  19: 1134386.884 ops/s
Iteration  20: 1130113.356 ops/s
Iteration  21: 1128496.746 ops/s
Iteration  22: 1132400.121 ops/s
Iteration  23: 1122510.348 ops/s
Iteration  24: 1126912.714 ops/s
Iteration  25: 1123581.725 ops/s
Iteration  26: 1134580.076 ops/s
Iteration  27: 1138295.683 ops/s
Iteration  28: 1131181.101 ops/s
Iteration  29: 1124977.798 ops/s
Iteration  30: 1138613.781 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIf":
  1130086.578 ±(99.9%) 3729.822 ops/s [Average]
  (min, avg, max) = (1120554.948, 1130086.578, 1143226.183), stdev = 5582.623
  CI (99.9%): [1126356.756, 1133816.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectIf  thrpt   30  1130086.578 ± 3729.822  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 663316.728 ops/s
# Warmup Iteration   2: 1577400.939 ops/s
# Warmup Iteration   3: 1617083.992 ops/s
# Warmup Iteration   4: 1343821.784 ops/s
# Warmup Iteration   5: 1615852.421 ops/s
# Warmup Iteration   6: 1619369.409 ops/s
# Warmup Iteration   7: 1619432.204 ops/s
# Warmup Iteration   8: 1618957.201 ops/s
# Warmup Iteration   9: 1621838.007 ops/s
# Warmup Iteration  10: 1619904.215 ops/s
# Warmup Iteration  11: 1621172.724 ops/s
# Warmup Iteration  12: 1621788.380 ops/s
# Warmup Iteration  13: 1619139.342 ops/s
# Warmup Iteration  14: 1621878.547 ops/s
# Warmup Iteration  15: 1619076.364 ops/s
# Warmup Iteration  16: 1618581.424 ops/s
# Warmup Iteration  17: 1618301.058 ops/s
# Warmup Iteration  18: 1623098.344 ops/s
# Warmup Iteration  19: 1618283.878 ops/s
# Warmup Iteration  20: 1618997.128 ops/s
# Warmup Iteration  21: 1620905.464 ops/s
# Warmup Iteration  22: 1619574.679 ops/s
# Warmup Iteration  23: 1620912.022 ops/s
# Warmup Iteration  24: 1617718.356 ops/s
# Warmup Iteration  25: 1618459.655 ops/s
# Warmup Iteration  26: 1616854.490 ops/s
# Warmup Iteration  27: 1620017.122 ops/s
# Warmup Iteration  28: 1618113.671 ops/s
# Warmup Iteration  29: 1617847.020 ops/s
# Warmup Iteration  30: 1617854.966 ops/s
Iteration   1: 1622809.382 ops/s
Iteration   2: 1621393.518 ops/s
Iteration   3: 1620494.234 ops/s
Iteration   4: 1619344.191 ops/s
Iteration   5: 1618099.365 ops/s
Iteration   6: 1625141.292 ops/s
Iteration   7: 1619666.263 ops/s
Iteration   8: 1614727.987 ops/s
Iteration   9: 1613136.391 ops/s
Iteration  10: 1622150.495 ops/s
Iteration  11: 1616481.733 ops/s
Iteration  12: 1617552.852 ops/s
Iteration  13: 1622594.698 ops/s
Iteration  14: 1616990.398 ops/s
Iteration  15: 1620707.420 ops/s
Iteration  16: 1618413.949 ops/s
Iteration  17: 1615666.309 ops/s
Iteration  18: 1622653.482 ops/s
Iteration  19: 1621744.429 ops/s
Iteration  20: 1616221.169 ops/s
Iteration  21: 1620013.935 ops/s
Iteration  22: 1619851.643 ops/s
Iteration  23: 1614647.960 ops/s
Iteration  24: 1618927.122 ops/s
Iteration  25: 1618083.076 ops/s
Iteration  26: 1617279.706 ops/s
Iteration  27: 1621692.330 ops/s
Iteration  28: 1618457.983 ops/s
Iteration  29: 1617663.464 ops/s
Iteration  30: 1619579.187 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectInt":
  1619072.865 ±(99.9%) 1867.150 ops/s [Average]
  (min, avg, max) = (1613136.391, 1619072.865, 1625141.292), stdev = 2794.662
  CI (99.9%): [1617205.716, 1620940.015] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectInt  thrpt   30  1619072.865 ± 1867.150  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1186764.515 ops/s
# Warmup Iteration   2: 2786325.165 ops/s
# Warmup Iteration   3: 2814410.434 ops/s
# Warmup Iteration   4: 2356134.044 ops/s
# Warmup Iteration   5: 2846696.555 ops/s
# Warmup Iteration   6: 2835668.836 ops/s
# Warmup Iteration   7: 2824162.155 ops/s
# Warmup Iteration   8: 2829088.351 ops/s
# Warmup Iteration   9: 2835596.895 ops/s
# Warmup Iteration  10: 2838797.243 ops/s
# Warmup Iteration  11: 2813159.405 ops/s
# Warmup Iteration  12: 2828460.651 ops/s
# Warmup Iteration  13: 2822712.446 ops/s
# Warmup Iteration  14: 2846002.752 ops/s
# Warmup Iteration  15: 2818258.832 ops/s
# Warmup Iteration  16: 2836360.193 ops/s
# Warmup Iteration  17: 2828388.224 ops/s
# Warmup Iteration  18: 2830757.974 ops/s
# Warmup Iteration  19: 2827874.987 ops/s
# Warmup Iteration  20: 2826776.110 ops/s
# Warmup Iteration  21: 2818723.467 ops/s
# Warmup Iteration  22: 2829893.596 ops/s
# Warmup Iteration  23: 2828483.070 ops/s
# Warmup Iteration  24: 2834536.917 ops/s
# Warmup Iteration  25: 2852683.452 ops/s
# Warmup Iteration  26: 2825190.254 ops/s
# Warmup Iteration  27: 2830455.443 ops/s
# Warmup Iteration  28: 2842374.366 ops/s
# Warmup Iteration  29: 2851502.063 ops/s
# Warmup Iteration  30: 2848594.144 ops/s
Iteration   1: 2837452.226 ops/s
Iteration   2: 2817239.108 ops/s
Iteration   3: 2832284.694 ops/s
Iteration   4: 2838397.870 ops/s
Iteration   5: 2818595.813 ops/s
Iteration   6: 2825184.771 ops/s
Iteration   7: 2823510.776 ops/s
Iteration   8: 2832068.060 ops/s
Iteration   9: 2856672.419 ops/s
Iteration  10: 2843709.207 ops/s
Iteration  11: 2801882.379 ops/s
Iteration  12: 2800765.877 ops/s
Iteration  13: 2829865.491 ops/s
Iteration  14: 2852910.858 ops/s
Iteration  15: 2850112.196 ops/s
Iteration  16: 2833192.696 ops/s
Iteration  17: 2835819.645 ops/s
Iteration  18: 2822746.869 ops/s
Iteration  19: 2798842.745 ops/s
Iteration  20: 2831283.606 ops/s
Iteration  21: 2843230.609 ops/s
Iteration  22: 2846353.875 ops/s
Iteration  23: 2844431.940 ops/s
Iteration  24: 2835576.709 ops/s
Iteration  25: 2844443.145 ops/s
Iteration  26: 2830110.449 ops/s
Iteration  27: 2835542.821 ops/s
Iteration  28: 2855468.999 ops/s
Iteration  29: 2843767.612 ops/s
Iteration  30: 2811496.221 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithBagTarget":
  2832431.990 ±(99.9%) 10351.289 ops/s [Average]
  (min, avg, max) = (2798842.745, 2832431.990, 2856672.419), stdev = 15493.324
  CI (99.9%): [2822080.700, 2842783.279] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2832431.990 ± 10351.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 977495.929 ops/s
# Warmup Iteration   2: 2153732.607 ops/s
# Warmup Iteration   3: 2228940.535 ops/s
# Warmup Iteration   4: 2210652.022 ops/s
# Warmup Iteration   5: 1886598.364 ops/s
# Warmup Iteration   6: 2257008.009 ops/s
# Warmup Iteration   7: 2248973.618 ops/s
# Warmup Iteration   8: 2252160.917 ops/s
# Warmup Iteration   9: 2250777.370 ops/s
# Warmup Iteration  10: 2255626.429 ops/s
# Warmup Iteration  11: 2253923.791 ops/s
# Warmup Iteration  12: 2256653.860 ops/s
# Warmup Iteration  13: 2255767.800 ops/s
# Warmup Iteration  14: 2248524.398 ops/s
# Warmup Iteration  15: 2254780.040 ops/s
# Warmup Iteration  16: 2248594.095 ops/s
# Warmup Iteration  17: 2253712.727 ops/s
# Warmup Iteration  18: 2251672.066 ops/s
# Warmup Iteration  19: 2255234.280 ops/s
# Warmup Iteration  20: 2255496.438 ops/s
# Warmup Iteration  21: 2258642.011 ops/s
# Warmup Iteration  22: 2255004.115 ops/s
# Warmup Iteration  23: 2251519.899 ops/s
# Warmup Iteration  24: 2254246.530 ops/s
# Warmup Iteration  25: 2256109.899 ops/s
# Warmup Iteration  26: 2255251.675 ops/s
# Warmup Iteration  27: 2251930.009 ops/s
# Warmup Iteration  28: 2255752.670 ops/s
# Warmup Iteration  29: 2245810.910 ops/s
# Warmup Iteration  30: 2259455.798 ops/s
Iteration   1: 2251205.815 ops/s
Iteration   2: 2259587.919 ops/s
Iteration   3: 2254986.686 ops/s
Iteration   4: 2233796.385 ops/s
Iteration   5: 2256872.353 ops/s
Iteration   6: 2258381.298 ops/s
Iteration   7: 2250139.246 ops/s
Iteration   8: 2255300.368 ops/s
Iteration   9: 2257024.694 ops/s
Iteration  10: 2261271.173 ops/s
Iteration  11: 2264509.510 ops/s
Iteration  12: 2259063.915 ops/s
Iteration  13: 2251795.358 ops/s
Iteration  14: 2273739.938 ops/s
Iteration  15: 2248010.570 ops/s
Iteration  16: 2253077.307 ops/s
Iteration  17: 2255175.979 ops/s
Iteration  18: 2262813.231 ops/s
Iteration  19: 2262190.250 ops/s
Iteration  20: 2255278.056 ops/s
Iteration  21: 2248480.074 ops/s
Iteration  22: 2259058.388 ops/s
Iteration  23: 2256915.892 ops/s
Iteration  24: 2262171.699 ops/s
Iteration  25: 2259922.525 ops/s
Iteration  26: 2249537.976 ops/s
Iteration  27: 2256725.177 ops/s
Iteration  28: 2254688.420 ops/s
Iteration  29: 2259422.714 ops/s
Iteration  30: 2254337.492 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectIntWithTarget":
  2256182.680 ±(99.9%) 4558.769 ops/s [Average]
  (min, avg, max) = (2233796.385, 2256182.680, 2273739.938), stdev = 6823.351
  CI (99.9%): [2251623.912, 2260741.449] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  2256182.680 ± 4558.769  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549378.395 ops/s
# Warmup Iteration   2: 1377642.783 ops/s
# Warmup Iteration   3: 1393217.534 ops/s
# Warmup Iteration   4: 1155304.736 ops/s
# Warmup Iteration   5: 1391845.184 ops/s
# Warmup Iteration   6: 1396123.503 ops/s
# Warmup Iteration   7: 1395678.929 ops/s
# Warmup Iteration   8: 1388605.349 ops/s
# Warmup Iteration   9: 1391992.435 ops/s
# Warmup Iteration  10: 1392122.390 ops/s
# Warmup Iteration  11: 1395774.832 ops/s
# Warmup Iteration  12: 1394158.511 ops/s
# Warmup Iteration  13: 1394430.030 ops/s
# Warmup Iteration  14: 1388939.620 ops/s
# Warmup Iteration  15: 1391730.526 ops/s
# Warmup Iteration  16: 1389762.557 ops/s
# Warmup Iteration  17: 1392764.051 ops/s
# Warmup Iteration  18: 1391328.440 ops/s
# Warmup Iteration  19: 1392744.553 ops/s
# Warmup Iteration  20: 1392544.845 ops/s
# Warmup Iteration  21: 1393110.107 ops/s
# Warmup Iteration  22: 1394633.966 ops/s
# Warmup Iteration  23: 1393716.152 ops/s
# Warmup Iteration  24: 1394869.161 ops/s
# Warmup Iteration  25: 1394018.180 ops/s
# Warmup Iteration  26: 1395317.179 ops/s
# Warmup Iteration  27: 1391713.545 ops/s
# Warmup Iteration  28: 1394354.516 ops/s
# Warmup Iteration  29: 1393637.422 ops/s
# Warmup Iteration  30: 1392516.379 ops/s
Iteration   1: 1395232.123 ops/s
Iteration   2: 1392119.071 ops/s
Iteration   3: 1397191.227 ops/s
Iteration   4: 1396565.433 ops/s
Iteration   5: 1396014.130 ops/s
Iteration   6: 1394624.964 ops/s
Iteration   7: 1393528.996 ops/s
Iteration   8: 1393110.752 ops/s
Iteration   9: 1396277.063 ops/s
Iteration  10: 1399275.281 ops/s
Iteration  11: 1396906.978 ops/s
Iteration  12: 1395176.964 ops/s
Iteration  13: 1391456.762 ops/s
Iteration  14: 1393280.383 ops/s
Iteration  15: 1393387.245 ops/s
Iteration  16: 1394406.269 ops/s
Iteration  17: 1375226.556 ops/s
Iteration  18: 1380092.111 ops/s
Iteration  19: 1382533.551 ops/s
Iteration  20: 1389308.991 ops/s
Iteration  21: 1391654.293 ops/s
Iteration  22: 1383717.323 ops/s
Iteration  23: 1388247.323 ops/s
Iteration  24: 1390044.164 ops/s
Iteration  25: 1383274.394 ops/s
Iteration  26: 1391784.417 ops/s
Iteration  27: 1392297.879 ops/s
Iteration  28: 1390825.968 ops/s
Iteration  29: 1389526.175 ops/s
Iteration  30: 1387812.743 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLong":
  1391163.318 ±(99.9%) 3694.578 ops/s [Average]
  (min, avg, max) = (1375226.556, 1391163.318, 1399275.281), stdev = 5529.871
  CI (99.9%): [1387468.739, 1394857.896] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectLong  thrpt   30  1391163.318 ± 3694.578  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1107673.413 ops/s
# Warmup Iteration   2: 2721576.077 ops/s
# Warmup Iteration   3: 2751173.097 ops/s
# Warmup Iteration   4: 2293766.854 ops/s
# Warmup Iteration   5: 2752306.247 ops/s
# Warmup Iteration   6: 2753394.815 ops/s
# Warmup Iteration   7: 2742773.980 ops/s
# Warmup Iteration   8: 2746650.315 ops/s
# Warmup Iteration   9: 2763527.670 ops/s
# Warmup Iteration  10: 2752690.394 ops/s
# Warmup Iteration  11: 2759439.528 ops/s
# Warmup Iteration  12: 2756428.906 ops/s
# Warmup Iteration  13: 2746807.479 ops/s
# Warmup Iteration  14: 2754232.817 ops/s
# Warmup Iteration  15: 2756693.138 ops/s
# Warmup Iteration  16: 2760549.597 ops/s
# Warmup Iteration  17: 2753485.724 ops/s
# Warmup Iteration  18: 2750109.435 ops/s
# Warmup Iteration  19: 2752286.325 ops/s
# Warmup Iteration  20: 2758578.093 ops/s
# Warmup Iteration  21: 2752050.427 ops/s
# Warmup Iteration  22: 2747254.129 ops/s
# Warmup Iteration  23: 2751249.468 ops/s
# Warmup Iteration  24: 2763267.469 ops/s
# Warmup Iteration  25: 2751134.628 ops/s
# Warmup Iteration  26: 2752757.822 ops/s
# Warmup Iteration  27: 2749450.691 ops/s
# Warmup Iteration  28: 2755897.926 ops/s
# Warmup Iteration  29: 2761706.724 ops/s
# Warmup Iteration  30: 2747132.111 ops/s
Iteration   1: 2783661.192 ops/s
Iteration   2: 2764024.623 ops/s
Iteration   3: 2751458.721 ops/s
Iteration   4: 2760194.841 ops/s
Iteration   5: 2753556.422 ops/s
Iteration   6: 2757142.023 ops/s
Iteration   7: 2739522.681 ops/s
Iteration   8: 2754755.763 ops/s
Iteration   9: 2764844.365 ops/s
Iteration  10: 2739447.489 ops/s
Iteration  11: 2756822.120 ops/s
Iteration  12: 2764144.997 ops/s
Iteration  13: 2758744.103 ops/s
Iteration  14: 2768069.640 ops/s
Iteration  15: 2760461.004 ops/s
Iteration  16: 2761310.796 ops/s
Iteration  17: 2767064.152 ops/s
Iteration  18: 2757097.504 ops/s
Iteration  19: 2762392.171 ops/s
Iteration  20: 2740107.689 ops/s
Iteration  21: 2759050.064 ops/s
Iteration  22: 2770781.143 ops/s
Iteration  23: 2782913.073 ops/s
Iteration  24: 2763049.399 ops/s
Iteration  25: 2750187.436 ops/s
Iteration  26: 2754202.093 ops/s
Iteration  27: 2765278.964 ops/s
Iteration  28: 2768330.791 ops/s
Iteration  29: 2731061.655 ops/s
Iteration  30: 2736797.381 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithBagTarget":
  2758215.810 ±(99.9%) 8141.179 ops/s [Average]
  (min, avg, max) = (2731061.655, 2758215.810, 2783661.192), stdev = 12185.335
  CI (99.9%): [2750074.630, 2766356.989] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2758215.810 ± 8141.179  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 841630.759 ops/s
# Warmup Iteration   2: 2020657.785 ops/s
# Warmup Iteration   3: 2059390.383 ops/s
# Warmup Iteration   4: 1707530.090 ops/s
# Warmup Iteration   5: 2069937.308 ops/s
# Warmup Iteration   6: 2070595.329 ops/s
# Warmup Iteration   7: 2065927.071 ops/s
# Warmup Iteration   8: 2066908.508 ops/s
# Warmup Iteration   9: 2069078.586 ops/s
# Warmup Iteration  10: 2073361.547 ops/s
# Warmup Iteration  11: 2071572.530 ops/s
# Warmup Iteration  12: 2068812.381 ops/s
# Warmup Iteration  13: 2064650.099 ops/s
# Warmup Iteration  14: 2064061.590 ops/s
# Warmup Iteration  15: 2077350.354 ops/s
# Warmup Iteration  16: 2063573.678 ops/s
# Warmup Iteration  17: 2064467.474 ops/s
# Warmup Iteration  18: 2058824.075 ops/s
# Warmup Iteration  19: 2069135.986 ops/s
# Warmup Iteration  20: 2063024.765 ops/s
# Warmup Iteration  21: 2065896.187 ops/s
# Warmup Iteration  22: 2063326.483 ops/s
# Warmup Iteration  23: 2067706.026 ops/s
# Warmup Iteration  24: 2067204.054 ops/s
# Warmup Iteration  25: 2068366.863 ops/s
# Warmup Iteration  26: 2066022.060 ops/s
# Warmup Iteration  27: 2068397.047 ops/s
# Warmup Iteration  28: 2064007.673 ops/s
# Warmup Iteration  29: 2066512.881 ops/s
# Warmup Iteration  30: 2067945.823 ops/s
Iteration   1: 2065815.308 ops/s
Iteration   2: 2071696.653 ops/s
Iteration   3: 2068644.171 ops/s
Iteration   4: 2066767.269 ops/s
Iteration   5: 2066612.872 ops/s
Iteration   6: 2069129.615 ops/s
Iteration   7: 2069430.061 ops/s
Iteration   8: 2067421.596 ops/s
Iteration   9: 2066140.713 ops/s
Iteration  10: 2069529.270 ops/s
Iteration  11: 2068631.958 ops/s
Iteration  12: 2072808.076 ops/s
Iteration  13: 2063785.073 ops/s
Iteration  14: 2069111.966 ops/s
Iteration  15: 2070008.326 ops/s
Iteration  16: 2066551.332 ops/s
Iteration  17: 2069210.141 ops/s
Iteration  18: 2062148.260 ops/s
Iteration  19: 2064941.333 ops/s
Iteration  20: 2067220.367 ops/s
Iteration  21: 2068946.748 ops/s
Iteration  22: 2070748.330 ops/s
Iteration  23: 2067344.614 ops/s
Iteration  24: 2065182.122 ops/s
Iteration  25: 2061966.903 ops/s
Iteration  26: 2071514.283 ops/s
Iteration  27: 2062110.080 ops/s
Iteration  28: 2061346.490 ops/s
Iteration  29: 2068882.062 ops/s
Iteration  30: 2063409.790 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectLongWithTarget":
  2067235.193 ±(99.9%) 2057.012 ops/s [Average]
  (min, avg, max) = (2061346.490, 2067235.193, 2072808.076), stdev = 3078.839
  CI (99.9%): [2065178.181, 2069292.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  2067235.193 ± 2057.012  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623817.307 ops/s
# Warmup Iteration   2: 1397793.487 ops/s
# Warmup Iteration   3: 1463250.652 ops/s
# Warmup Iteration   4: 1325906.107 ops/s
# Warmup Iteration   5: 1358613.040 ops/s
# Warmup Iteration   6: 1469153.366 ops/s
# Warmup Iteration   7: 1469024.725 ops/s
# Warmup Iteration   8: 1468086.761 ops/s
# Warmup Iteration   9: 1469144.900 ops/s
# Warmup Iteration  10: 1468968.310 ops/s
# Warmup Iteration  11: 1469596.664 ops/s
# Warmup Iteration  12: 1469413.019 ops/s
# Warmup Iteration  13: 1470355.696 ops/s
# Warmup Iteration  14: 1466350.406 ops/s
# Warmup Iteration  15: 1469408.522 ops/s
# Warmup Iteration  16: 1468997.485 ops/s
# Warmup Iteration  17: 1467933.188 ops/s
# Warmup Iteration  18: 1469959.060 ops/s
# Warmup Iteration  19: 1468588.998 ops/s
# Warmup Iteration  20: 1468894.681 ops/s
# Warmup Iteration  21: 1467320.437 ops/s
# Warmup Iteration  22: 1468342.299 ops/s
# Warmup Iteration  23: 1469213.975 ops/s
# Warmup Iteration  24: 1467430.038 ops/s
# Warmup Iteration  25: 1469555.999 ops/s
# Warmup Iteration  26: 1471457.007 ops/s
# Warmup Iteration  27: 1468180.326 ops/s
# Warmup Iteration  28: 1467242.565 ops/s
# Warmup Iteration  29: 1468073.279 ops/s
# Warmup Iteration  30: 1468247.790 ops/s
Iteration   1: 1477682.892 ops/s
Iteration   2: 1469278.185 ops/s
Iteration   3: 1471296.054 ops/s
Iteration   4: 1467396.771 ops/s
Iteration   5: 1472479.947 ops/s
Iteration   6: 1464603.340 ops/s
Iteration   7: 1472141.426 ops/s
Iteration   8: 1469902.262 ops/s
Iteration   9: 1473190.532 ops/s
Iteration  10: 1464903.092 ops/s
Iteration  11: 1467509.569 ops/s
Iteration  12: 1467981.711 ops/s
Iteration  13: 1467872.145 ops/s
Iteration  14: 1468621.006 ops/s
Iteration  15: 1467090.166 ops/s
Iteration  16: 1469038.169 ops/s
Iteration  17: 1468358.687 ops/s
Iteration  18: 1467335.140 ops/s
Iteration  19: 1467011.188 ops/s
Iteration  20: 1464752.270 ops/s
Iteration  21: 1468918.727 ops/s
Iteration  22: 1463207.759 ops/s
Iteration  23: 1470262.717 ops/s
Iteration  24: 1470004.985 ops/s
Iteration  25: 1469486.063 ops/s
Iteration  26: 1463134.331 ops/s
Iteration  27: 1469637.859 ops/s
Iteration  28: 1471649.183 ops/s
Iteration  29: 1466953.260 ops/s
Iteration  30: 1468940.318 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShort":
  1468687.992 ±(99.9%) 2049.094 ops/s [Average]
  (min, avg, max) = (1463134.331, 1468687.992, 1477682.892), stdev = 3066.987
  CI (99.9%): [1466638.898, 1470737.086] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectShort  thrpt   30  1468687.992 ± 2049.094  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1213525.108 ops/s
# Warmup Iteration   2: 2938902.116 ops/s
# Warmup Iteration   3: 2980157.350 ops/s
# Warmup Iteration   4: 2477075.162 ops/s
# Warmup Iteration   5: 2996066.801 ops/s
# Warmup Iteration   6: 2991789.107 ops/s
# Warmup Iteration   7: 2982670.096 ops/s
# Warmup Iteration   8: 2991137.695 ops/s
# Warmup Iteration   9: 2981847.530 ops/s
# Warmup Iteration  10: 2977867.691 ops/s
# Warmup Iteration  11: 2974257.303 ops/s
# Warmup Iteration  12: 2981477.976 ops/s
# Warmup Iteration  13: 2978733.591 ops/s
# Warmup Iteration  14: 2983203.569 ops/s
# Warmup Iteration  15: 2982519.453 ops/s
# Warmup Iteration  16: 2981772.230 ops/s
# Warmup Iteration  17: 2986152.030 ops/s
# Warmup Iteration  18: 2976805.949 ops/s
# Warmup Iteration  19: 2988823.242 ops/s
# Warmup Iteration  20: 2987483.671 ops/s
# Warmup Iteration  21: 2986097.390 ops/s
# Warmup Iteration  22: 2985887.451 ops/s
# Warmup Iteration  23: 2985452.248 ops/s
# Warmup Iteration  24: 2980632.853 ops/s
# Warmup Iteration  25: 2990980.294 ops/s
# Warmup Iteration  26: 2984502.126 ops/s
# Warmup Iteration  27: 2988284.980 ops/s
# Warmup Iteration  28: 2988048.726 ops/s
# Warmup Iteration  29: 2989030.490 ops/s
# Warmup Iteration  30: 2987250.836 ops/s
Iteration   1: 2985041.832 ops/s
Iteration   2: 3000260.721 ops/s
Iteration   3: 2980451.453 ops/s
Iteration   4: 2983704.146 ops/s
Iteration   5: 2984751.618 ops/s
Iteration   6: 2987907.594 ops/s
Iteration   7: 2986282.421 ops/s
Iteration   8: 2988673.098 ops/s
Iteration   9: 2977746.283 ops/s
Iteration  10: 2984755.415 ops/s
Iteration  11: 2981569.172 ops/s
Iteration  12: 2983354.329 ops/s
Iteration  13: 2988304.058 ops/s
Iteration  14: 2990873.772 ops/s
Iteration  15: 2997456.642 ops/s
Iteration  16: 3002909.768 ops/s
Iteration  17: 2977690.531 ops/s
Iteration  18: 3002371.916 ops/s
Iteration  19: 2988259.288 ops/s
Iteration  20: 2982687.155 ops/s
Iteration  21: 2992164.654 ops/s
Iteration  22: 2984083.082 ops/s
Iteration  23: 2990539.997 ops/s
Iteration  24: 2992798.503 ops/s
Iteration  25: 2988541.817 ops/s
Iteration  26: 2987803.477 ops/s
Iteration  27: 2994732.431 ops/s
Iteration  28: 2994951.219 ops/s
Iteration  29: 2999517.732 ops/s
Iteration  30: 2987143.910 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithBagTarget":
  2988910.934 ±(99.9%) 4563.396 ops/s [Average]
  (min, avg, max) = (2977690.531, 2988910.934, 3002909.768), stdev = 6830.276
  CI (99.9%): [2984347.539, 2993474.330] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2988910.934 ± 4563.396  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1010500.796 ops/s
# Warmup Iteration   2: 2054733.538 ops/s
# Warmup Iteration   3: 2207084.009 ops/s
# Warmup Iteration   4: 2205448.712 ops/s
# Warmup Iteration   5: 1837570.474 ops/s
# Warmup Iteration   6: 2224487.522 ops/s
# Warmup Iteration   7: 2226377.089 ops/s
# Warmup Iteration   8: 2226380.278 ops/s
# Warmup Iteration   9: 2221458.038 ops/s
# Warmup Iteration  10: 2216793.574 ops/s
# Warmup Iteration  11: 2223366.379 ops/s
# Warmup Iteration  12: 2214776.651 ops/s
# Warmup Iteration  13: 2219398.359 ops/s
# Warmup Iteration  14: 2221060.857 ops/s
# Warmup Iteration  15: 2227125.488 ops/s
# Warmup Iteration  16: 2224681.522 ops/s
# Warmup Iteration  17: 2208710.640 ops/s
# Warmup Iteration  18: 2213687.474 ops/s
# Warmup Iteration  19: 2214501.818 ops/s
# Warmup Iteration  20: 2214554.230 ops/s
# Warmup Iteration  21: 2217103.059 ops/s
# Warmup Iteration  22: 2208874.360 ops/s
# Warmup Iteration  23: 2213791.921 ops/s
# Warmup Iteration  24: 2209089.420 ops/s
# Warmup Iteration  25: 2216414.355 ops/s
# Warmup Iteration  26: 2214876.355 ops/s
# Warmup Iteration  27: 2209892.733 ops/s
# Warmup Iteration  28: 2212743.123 ops/s
# Warmup Iteration  29: 2207986.476 ops/s
# Warmup Iteration  30: 2215394.796 ops/s
Iteration   1: 2209737.106 ops/s
Iteration   2: 2218000.758 ops/s
Iteration   3: 2218698.173 ops/s
Iteration   4: 2224236.232 ops/s
Iteration   5: 2213901.166 ops/s
Iteration   6: 2220150.201 ops/s
Iteration   7: 2214777.578 ops/s
Iteration   8: 2209750.695 ops/s
Iteration   9: 2213628.143 ops/s
Iteration  10: 2222378.966 ops/s
Iteration  11: 2216453.522 ops/s
Iteration  12: 2214117.371 ops/s
Iteration  13: 2212839.329 ops/s
Iteration  14: 2221367.100 ops/s
Iteration  15: 2217427.789 ops/s
Iteration  16: 2218363.917 ops/s
Iteration  17: 2215708.364 ops/s
Iteration  18: 2217987.917 ops/s
Iteration  19: 2216787.323 ops/s
Iteration  20: 2214720.281 ops/s
Iteration  21: 2208354.469 ops/s
Iteration  22: 2219302.374 ops/s
Iteration  23: 2218010.209 ops/s
Iteration  24: 2212083.368 ops/s
Iteration  25: 2214414.834 ops/s
Iteration  26: 2219782.276 ops/s
Iteration  27: 2220760.872 ops/s
Iteration  28: 2213923.487 ops/s
Iteration  29: 2217101.152 ops/s
Iteration  30: 2218699.174 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectShortWithTarget":
  2216448.805 ±(99.9%) 2537.421 ops/s [Average]
  (min, avg, max) = (2208354.469, 2216448.805, 2224236.232), stdev = 3797.893
  CI (99.9%): [2213911.383, 2218986.226] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2216448.805 ± 2537.421  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 114595.079 ops/s
# Warmup Iteration   2: 193542.706 ops/s
# Warmup Iteration   3: 236973.830 ops/s
# Warmup Iteration   4: 239050.019 ops/s
# Warmup Iteration   5: 239383.876 ops/s
# Warmup Iteration   6: 221225.272 ops/s
# Warmup Iteration   7: 213152.037 ops/s
# Warmup Iteration   8: 238990.875 ops/s
# Warmup Iteration   9: 239000.317 ops/s
# Warmup Iteration  10: 238874.219 ops/s
# Warmup Iteration  11: 239456.168 ops/s
# Warmup Iteration  12: 239296.389 ops/s
# Warmup Iteration  13: 239050.001 ops/s
# Warmup Iteration  14: 238354.087 ops/s
# Warmup Iteration  15: 238471.433 ops/s
# Warmup Iteration  16: 239097.486 ops/s
# Warmup Iteration  17: 239642.719 ops/s
# Warmup Iteration  18: 239227.312 ops/s
# Warmup Iteration  19: 239538.222 ops/s
# Warmup Iteration  20: 239360.403 ops/s
# Warmup Iteration  21: 239409.192 ops/s
# Warmup Iteration  22: 239348.056 ops/s
# Warmup Iteration  23: 239716.345 ops/s
# Warmup Iteration  24: 239303.944 ops/s
# Warmup Iteration  25: 239112.310 ops/s
# Warmup Iteration  26: 239345.427 ops/s
# Warmup Iteration  27: 239649.085 ops/s
# Warmup Iteration  28: 238954.796 ops/s
# Warmup Iteration  29: 239671.886 ops/s
# Warmup Iteration  30: 238950.890 ops/s
Iteration   1: 239520.750 ops/s
Iteration   2: 239391.582 ops/s
Iteration   3: 239716.326 ops/s
Iteration   4: 238750.710 ops/s
Iteration   5: 239602.502 ops/s
Iteration   6: 239116.799 ops/s
Iteration   7: 239564.013 ops/s
Iteration   8: 238714.355 ops/s
Iteration   9: 239524.524 ops/s
Iteration  10: 238691.954 ops/s
Iteration  11: 239842.093 ops/s
Iteration  12: 238874.812 ops/s
Iteration  13: 239693.480 ops/s
Iteration  14: 238706.928 ops/s
Iteration  15: 239686.644 ops/s
Iteration  16: 238917.566 ops/s
Iteration  17: 239339.772 ops/s
Iteration  18: 239943.890 ops/s
Iteration  19: 239452.730 ops/s
Iteration  20: 239600.064 ops/s
Iteration  21: 240405.932 ops/s
Iteration  22: 239361.758 ops/s
Iteration  23: 240203.504 ops/s
Iteration  24: 238976.230 ops/s
Iteration  25: 239507.524 ops/s
Iteration  26: 239905.184 ops/s
Iteration  27: 239630.150 ops/s
Iteration  28: 239210.435 ops/s
Iteration  29: 239521.337 ops/s
Iteration  30: 239333.139 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectTarget":
  239423.556 ±(99.9%) 292.622 ops/s [Average]
  (min, avg, max) = (238691.954, 239423.556, 240405.932), stdev = 437.983
  CI (99.9%): [239130.934, 239716.178] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_collectTarget  thrpt   30  239423.556 ± 292.622  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704047.342 ops/s
# Warmup Iteration   2: 1349240.375 ops/s
# Warmup Iteration   3: 1473237.738 ops/s
# Warmup Iteration   4: 1485652.895 ops/s
# Warmup Iteration   5: 1285024.587 ops/s
# Warmup Iteration   6: 1400078.606 ops/s
# Warmup Iteration   7: 1484186.957 ops/s
# Warmup Iteration   8: 1483906.927 ops/s
# Warmup Iteration   9: 1484846.364 ops/s
# Warmup Iteration  10: 1483716.612 ops/s
# Warmup Iteration  11: 1484071.108 ops/s
# Warmup Iteration  12: 1483642.911 ops/s
# Warmup Iteration  13: 1484686.078 ops/s
# Warmup Iteration  14: 1482934.561 ops/s
# Warmup Iteration  15: 1484794.406 ops/s
# Warmup Iteration  16: 1481263.448 ops/s
# Warmup Iteration  17: 1485253.652 ops/s
# Warmup Iteration  18: 1482346.912 ops/s
# Warmup Iteration  19: 1482548.252 ops/s
# Warmup Iteration  20: 1479226.606 ops/s
# Warmup Iteration  21: 1481305.768 ops/s
# Warmup Iteration  22: 1484265.846 ops/s
# Warmup Iteration  23: 1485628.701 ops/s
# Warmup Iteration  24: 1481192.289 ops/s
# Warmup Iteration  25: 1485543.286 ops/s
# Warmup Iteration  26: 1482669.660 ops/s
# Warmup Iteration  27: 1481501.448 ops/s
# Warmup Iteration  28: 1480302.054 ops/s
# Warmup Iteration  29: 1478242.691 ops/s
# Warmup Iteration  30: 1482209.776 ops/s
Iteration   1: 1481344.900 ops/s
Iteration   2: 1485553.249 ops/s
Iteration   3: 1480226.675 ops/s
Iteration   4: 1484273.113 ops/s
Iteration   5: 1482594.708 ops/s
Iteration   6: 1482913.927 ops/s
Iteration   7: 1485313.373 ops/s
Iteration   8: 1481545.508 ops/s
Iteration   9: 1479383.209 ops/s
Iteration  10: 1487297.904 ops/s
Iteration  11: 1482525.389 ops/s
Iteration  12: 1481783.264 ops/s
Iteration  13: 1485507.594 ops/s
Iteration  14: 1478404.136 ops/s
Iteration  15: 1486101.191 ops/s
Iteration  16: 1486219.127 ops/s
Iteration  17: 1484449.841 ops/s
Iteration  18: 1486426.407 ops/s
Iteration  19: 1482936.308 ops/s
Iteration  20: 1483257.402 ops/s
Iteration  21: 1487943.870 ops/s
Iteration  22: 1481412.934 ops/s
Iteration  23: 1487267.078 ops/s
Iteration  24: 1483104.110 ops/s
Iteration  25: 1483162.665 ops/s
Iteration  26: 1487754.885 ops/s
Iteration  27: 1486812.448 ops/s
Iteration  28: 1480126.273 ops/s
Iteration  29: 1482816.731 ops/s
Iteration  30: 1484509.096 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith":
  1483765.577 ±(99.9%) 1737.389 ops/s [Average]
  (min, avg, max) = (1478404.136, 1483765.577, 1487943.870), stdev = 2600.442
  CI (99.9%): [1482028.188, 1485502.966] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_collectWith  thrpt   30  1483765.577 ± 1737.389  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 250626.713 ops/s
# Warmup Iteration   2: 419775.112 ops/s
# Warmup Iteration   3: 497031.783 ops/s
# Warmup Iteration   4: 501350.578 ops/s
# Warmup Iteration   5: 499645.382 ops/s
# Warmup Iteration   6: 433038.335 ops/s
# Warmup Iteration   7: 480676.706 ops/s
# Warmup Iteration   8: 501443.133 ops/s
# Warmup Iteration   9: 501718.407 ops/s
# Warmup Iteration  10: 502024.710 ops/s
# Warmup Iteration  11: 501731.266 ops/s
# Warmup Iteration  12: 500947.822 ops/s
# Warmup Iteration  13: 501971.631 ops/s
# Warmup Iteration  14: 502143.049 ops/s
# Warmup Iteration  15: 502524.095 ops/s
# Warmup Iteration  16: 501043.461 ops/s
# Warmup Iteration  17: 500128.597 ops/s
# Warmup Iteration  18: 501172.414 ops/s
# Warmup Iteration  19: 501120.387 ops/s
# Warmup Iteration  20: 501972.170 ops/s
# Warmup Iteration  21: 501093.854 ops/s
# Warmup Iteration  22: 500299.344 ops/s
# Warmup Iteration  23: 501139.876 ops/s
# Warmup Iteration  24: 499725.167 ops/s
# Warmup Iteration  25: 499905.820 ops/s
# Warmup Iteration  26: 500209.812 ops/s
# Warmup Iteration  27: 499734.940 ops/s
# Warmup Iteration  28: 500044.197 ops/s
# Warmup Iteration  29: 500572.246 ops/s
# Warmup Iteration  30: 500627.065 ops/s
Iteration   1: 499918.883 ops/s
Iteration   2: 501864.590 ops/s
Iteration   3: 501207.959 ops/s
Iteration   4: 500498.934 ops/s
Iteration   5: 500985.860 ops/s
Iteration   6: 499759.399 ops/s
Iteration   7: 498913.736 ops/s
Iteration   8: 501986.271 ops/s
Iteration   9: 499786.057 ops/s
Iteration  10: 500477.006 ops/s
Iteration  11: 499942.744 ops/s
Iteration  12: 500932.815 ops/s
Iteration  13: 501924.849 ops/s
Iteration  14: 500180.031 ops/s
Iteration  15: 502068.767 ops/s
Iteration  16: 499881.065 ops/s
Iteration  17: 500272.713 ops/s
Iteration  18: 500850.110 ops/s
Iteration  19: 500989.815 ops/s
Iteration  20: 500972.723 ops/s
Iteration  21: 501493.285 ops/s
Iteration  22: 501519.997 ops/s
Iteration  23: 501868.749 ops/s
Iteration  24: 501204.391 ops/s
Iteration  25: 501441.879 ops/s
Iteration  26: 501018.292 ops/s
Iteration  27: 502002.031 ops/s
Iteration  28: 500392.558 ops/s
Iteration  29: 499077.718 ops/s
Iteration  30: 498228.709 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWithOccurrences":
  500722.065 ±(99.9%) 660.647 ops/s [Average]
  (min, avg, max) = (498228.709, 500722.065, 502068.767), stdev = 988.826
  CI (99.9%): [500061.417, 501382.712] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_collectWithOccurrences  thrpt   30  500722.065 ± 660.647  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 117348.895 ops/s
# Warmup Iteration   2: 202669.478 ops/s
# Warmup Iteration   3: 245209.502 ops/s
# Warmup Iteration   4: 246939.326 ops/s
# Warmup Iteration   5: 247045.596 ops/s
# Warmup Iteration   6: 210056.946 ops/s
# Warmup Iteration   7: 240187.627 ops/s
# Warmup Iteration   8: 246492.359 ops/s
# Warmup Iteration   9: 247340.330 ops/s
# Warmup Iteration  10: 247427.298 ops/s
# Warmup Iteration  11: 247262.043 ops/s
# Warmup Iteration  12: 247628.853 ops/s
# Warmup Iteration  13: 247360.007 ops/s
# Warmup Iteration  14: 247215.990 ops/s
# Warmup Iteration  15: 247623.651 ops/s
# Warmup Iteration  16: 247073.214 ops/s
# Warmup Iteration  17: 247273.559 ops/s
# Warmup Iteration  18: 247296.724 ops/s
# Warmup Iteration  19: 247104.868 ops/s
# Warmup Iteration  20: 247810.091 ops/s
# Warmup Iteration  21: 247518.426 ops/s
# Warmup Iteration  22: 246765.076 ops/s
# Warmup Iteration  23: 246437.259 ops/s
# Warmup Iteration  24: 247291.788 ops/s
# Warmup Iteration  25: 246962.384 ops/s
# Warmup Iteration  26: 247395.023 ops/s
# Warmup Iteration  27: 247178.810 ops/s
# Warmup Iteration  28: 247590.081 ops/s
# Warmup Iteration  29: 247135.018 ops/s
# Warmup Iteration  30: 247450.463 ops/s
Iteration   1: 246865.645 ops/s
Iteration   2: 246779.872 ops/s
Iteration   3: 246863.441 ops/s
Iteration   4: 246944.589 ops/s
Iteration   5: 246883.396 ops/s
Iteration   6: 246832.592 ops/s
Iteration   7: 247093.574 ops/s
Iteration   8: 246738.105 ops/s
Iteration   9: 247667.600 ops/s
Iteration  10: 247629.303 ops/s
Iteration  11: 247925.064 ops/s
Iteration  12: 247166.263 ops/s
Iteration  13: 246852.347 ops/s
Iteration  14: 247069.748 ops/s
Iteration  15: 246721.718 ops/s
Iteration  16: 248038.707 ops/s
Iteration  17: 247049.075 ops/s
Iteration  18: 246768.963 ops/s
Iteration  19: 247257.930 ops/s
Iteration  20: 247654.656 ops/s
Iteration  21: 246764.975 ops/s
Iteration  22: 248090.841 ops/s
Iteration  23: 247280.835 ops/s
Iteration  24: 247562.112 ops/s
Iteration  25: 247527.863 ops/s
Iteration  26: 247920.173 ops/s
Iteration  27: 247577.049 ops/s
Iteration  28: 246704.356 ops/s
Iteration  29: 245935.523 ops/s
Iteration  30: 247662.298 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_collectWith_target":
  247194.287 ±(99.9%) 335.006 ops/s [Average]
  (min, avg, max) = (245935.523, 247194.287, 248090.841), stdev = 501.422
  CI (99.9%): [246859.281, 247529.293] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_collectWith_target  thrpt   30  247194.287 ± 335.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2770312.027 ops/s
# Warmup Iteration   2: 4839223.465 ops/s
# Warmup Iteration   3: 5374127.041 ops/s
# Warmup Iteration   4: 5395083.055 ops/s
# Warmup Iteration   5: 5397268.086 ops/s
# Warmup Iteration   6: 4444478.966 ops/s
# Warmup Iteration   7: 5391359.017 ops/s
# Warmup Iteration   8: 5397361.486 ops/s
# Warmup Iteration   9: 5408180.915 ops/s
# Warmup Iteration  10: 5395788.299 ops/s
# Warmup Iteration  11: 5401072.762 ops/s
# Warmup Iteration  12: 5399158.843 ops/s
# Warmup Iteration  13: 5392262.343 ops/s
# Warmup Iteration  14: 5409751.000 ops/s
# Warmup Iteration  15: 5412295.028 ops/s
# Warmup Iteration  16: 5392532.869 ops/s
# Warmup Iteration  17: 5397729.198 ops/s
# Warmup Iteration  18: 5399589.436 ops/s
# Warmup Iteration  19: 5398453.617 ops/s
# Warmup Iteration  20: 5403163.317 ops/s
# Warmup Iteration  21: 5399902.020 ops/s
# Warmup Iteration  22: 5400975.966 ops/s
# Warmup Iteration  23: 5407150.558 ops/s
# Warmup Iteration  24: 5408592.537 ops/s
# Warmup Iteration  25: 5408579.679 ops/s
# Warmup Iteration  26: 5410709.448 ops/s
# Warmup Iteration  27: 5407033.151 ops/s
# Warmup Iteration  28: 5406219.408 ops/s
# Warmup Iteration  29: 5403473.764 ops/s
# Warmup Iteration  30: 5411113.312 ops/s
Iteration   1: 5421477.468 ops/s
Iteration   2: 5386730.408 ops/s
Iteration   3: 5422839.535 ops/s
Iteration   4: 5415049.468 ops/s
Iteration   5: 5404042.378 ops/s
Iteration   6: 5397431.030 ops/s
Iteration   7: 5362483.079 ops/s
Iteration   8: 5399580.862 ops/s
Iteration   9: 5402342.412 ops/s
Iteration  10: 5401820.436 ops/s
Iteration  11: 5386405.197 ops/s
Iteration  12: 5385307.694 ops/s
Iteration  13: 5392343.816 ops/s
Iteration  14: 5392628.027 ops/s
Iteration  15: 5407990.383 ops/s
Iteration  16: 5401475.151 ops/s
Iteration  17: 5366432.787 ops/s
Iteration  18: 5400978.343 ops/s
Iteration  19: 5395827.255 ops/s
Iteration  20: 5423066.908 ops/s
Iteration  21: 5395335.108 ops/s
Iteration  22: 5402493.676 ops/s
Iteration  23: 5405551.456 ops/s
Iteration  24: 5401142.432 ops/s
Iteration  25: 5384449.304 ops/s
Iteration  26: 5400371.573 ops/s
Iteration  27: 5402538.406 ops/s
Iteration  28: 5408357.894 ops/s
Iteration  29: 5408400.739 ops/s
Iteration  30: 5403235.987 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_contains":
  5399270.974 ±(99.9%) 9222.054 ops/s [Average]
  (min, avg, max) = (5362483.079, 5399270.974, 5423066.908), stdev = 13803.137
  CI (99.9%): [5390048.920, 5408493.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_contains  thrpt   30  5399270.974 ± 9222.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2321286.182 ops/s
# Warmup Iteration   2: 3942818.952 ops/s
# Warmup Iteration   3: 4436952.532 ops/s
# Warmup Iteration   4: 4465097.472 ops/s
# Warmup Iteration   5: 4467269.265 ops/s
# Warmup Iteration   6: 3664078.572 ops/s
# Warmup Iteration   7: 4473709.271 ops/s
# Warmup Iteration   8: 4468209.003 ops/s
# Warmup Iteration   9: 4478560.007 ops/s
# Warmup Iteration  10: 4475856.183 ops/s
# Warmup Iteration  11: 4473166.502 ops/s
# Warmup Iteration  12: 4468885.418 ops/s
# Warmup Iteration  13: 4468755.057 ops/s
# Warmup Iteration  14: 4472397.259 ops/s
# Warmup Iteration  15: 4472062.974 ops/s
# Warmup Iteration  16: 4469696.819 ops/s
# Warmup Iteration  17: 4477381.810 ops/s
# Warmup Iteration  18: 4480458.399 ops/s
# Warmup Iteration  19: 4479277.916 ops/s
# Warmup Iteration  20: 4472486.974 ops/s
# Warmup Iteration  21: 4475445.384 ops/s
# Warmup Iteration  22: 4473417.204 ops/s
# Warmup Iteration  23: 4472967.993 ops/s
# Warmup Iteration  24: 4468590.875 ops/s
# Warmup Iteration  25: 4481677.019 ops/s
# Warmup Iteration  26: 4483508.584 ops/s
# Warmup Iteration  27: 4462455.614 ops/s
# Warmup Iteration  28: 4469199.166 ops/s
# Warmup Iteration  29: 4469473.438 ops/s
# Warmup Iteration  30: 4467856.116 ops/s
Iteration   1: 4480660.774 ops/s
Iteration   2: 4473770.522 ops/s
Iteration   3: 4459349.439 ops/s
Iteration   4: 4485578.498 ops/s
Iteration   5: 4473897.948 ops/s
Iteration   6: 4483770.133 ops/s
Iteration   7: 4456294.345 ops/s
Iteration   8: 4472496.318 ops/s
Iteration   9: 4483910.758 ops/s
Iteration  10: 4472719.282 ops/s
Iteration  11: 4481415.695 ops/s
Iteration  12: 4478185.106 ops/s
Iteration  13: 4476460.316 ops/s
Iteration  14: 4452198.871 ops/s
Iteration  15: 4489138.543 ops/s
Iteration  16: 4467612.260 ops/s
Iteration  17: 4470840.942 ops/s
Iteration  18: 4472672.001 ops/s
Iteration  19: 4471002.326 ops/s
Iteration  20: 4481608.399 ops/s
Iteration  21: 4487061.175 ops/s
Iteration  22: 4478842.114 ops/s
Iteration  23: 4483358.866 ops/s
Iteration  24: 4477906.171 ops/s
Iteration  25: 4485434.928 ops/s
Iteration  26: 4478409.585 ops/s
Iteration  27: 4483344.188 ops/s
Iteration  28: 4484185.483 ops/s
Iteration  29: 4474982.837 ops/s
Iteration  30: 4470057.051 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllArray":
  4476238.829 ±(99.9%) 5964.096 ops/s [Average]
  (min, avg, max) = (4452198.871, 4476238.829, 4489138.543), stdev = 8926.780
  CI (99.9%): [4470274.733, 4482202.926] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_containsAllArray  thrpt   30  4476238.829 ± 5964.096  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2357394.897 ops/s
# Warmup Iteration   2: 4278126.193 ops/s
# Warmup Iteration   3: 4739171.510 ops/s
# Warmup Iteration   4: 4794305.610 ops/s
# Warmup Iteration   5: 4628888.463 ops/s
# Warmup Iteration   6: 4132549.717 ops/s
# Warmup Iteration   7: 4812888.955 ops/s
# Warmup Iteration   8: 4815224.812 ops/s
# Warmup Iteration   9: 4813639.062 ops/s
# Warmup Iteration  10: 4798490.947 ops/s
# Warmup Iteration  11: 4810641.875 ops/s
# Warmup Iteration  12: 4806744.686 ops/s
# Warmup Iteration  13: 4807879.880 ops/s
# Warmup Iteration  14: 4811309.595 ops/s
# Warmup Iteration  15: 4806695.028 ops/s
# Warmup Iteration  16: 4805159.156 ops/s
# Warmup Iteration  17: 4803174.688 ops/s
# Warmup Iteration  18: 4796120.836 ops/s
# Warmup Iteration  19: 4799239.327 ops/s
# Warmup Iteration  20: 4804989.215 ops/s
# Warmup Iteration  21: 4784819.974 ops/s
# Warmup Iteration  22: 4804003.948 ops/s
# Warmup Iteration  23: 4794981.450 ops/s
# Warmup Iteration  24: 4793865.904 ops/s
# Warmup Iteration  25: 4804141.483 ops/s
# Warmup Iteration  26: 4791755.016 ops/s
# Warmup Iteration  27: 4794929.845 ops/s
# Warmup Iteration  28: 4799039.460 ops/s
# Warmup Iteration  29: 4793760.009 ops/s
# Warmup Iteration  30: 4803860.194 ops/s
Iteration   1: 4795266.099 ops/s
Iteration   2: 4791836.158 ops/s
Iteration   3: 4800149.295 ops/s
Iteration   4: 4798845.703 ops/s
Iteration   5: 4809866.626 ops/s
Iteration   6: 4803945.415 ops/s
Iteration   7: 4797004.148 ops/s
Iteration   8: 4795938.225 ops/s
Iteration   9: 4788244.597 ops/s
Iteration  10: 4808385.129 ops/s
Iteration  11: 4796781.378 ops/s
Iteration  12: 4798873.962 ops/s
Iteration  13: 4811461.557 ops/s
Iteration  14: 4799399.895 ops/s
Iteration  15: 4803300.478 ops/s
Iteration  16: 4803361.320 ops/s
Iteration  17: 4797316.757 ops/s
Iteration  18: 4806436.620 ops/s
Iteration  19: 4800854.787 ops/s
Iteration  20: 4780761.325 ops/s
Iteration  21: 4809476.831 ops/s
Iteration  22: 4799337.867 ops/s
Iteration  23: 4799139.079 ops/s
Iteration  24: 4784645.328 ops/s
Iteration  25: 4798678.857 ops/s
Iteration  26: 4797204.602 ops/s
Iteration  27: 4795492.281 ops/s
Iteration  28: 4807429.865 ops/s
Iteration  29: 4816688.332 ops/s
Iteration  30: 4795167.763 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllCollection":
  4799709.676 ±(99.9%) 5165.499 ops/s [Average]
  (min, avg, max) = (4780761.325, 4799709.676, 4816688.332), stdev = 7731.477
  CI (99.9%): [4794544.177, 4804875.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4799709.676 ± 5165.499  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2357406.650 ops/s
# Warmup Iteration   2: 4286868.468 ops/s
# Warmup Iteration   3: 4809584.881 ops/s
# Warmup Iteration   4: 4821486.444 ops/s
# Warmup Iteration   5: 4585095.978 ops/s
# Warmup Iteration   6: 4196784.133 ops/s
# Warmup Iteration   7: 4819067.964 ops/s
# Warmup Iteration   8: 4817735.113 ops/s
# Warmup Iteration   9: 4826361.175 ops/s
# Warmup Iteration  10: 4827528.594 ops/s
# Warmup Iteration  11: 4825846.645 ops/s
# Warmup Iteration  12: 4821298.223 ops/s
# Warmup Iteration  13: 4825495.830 ops/s
# Warmup Iteration  14: 4824822.864 ops/s
# Warmup Iteration  15: 4827801.826 ops/s
# Warmup Iteration  16: 4820099.332 ops/s
# Warmup Iteration  17: 4827076.765 ops/s
# Warmup Iteration  18: 4834641.404 ops/s
# Warmup Iteration  19: 4832824.522 ops/s
# Warmup Iteration  20: 4826779.013 ops/s
# Warmup Iteration  21: 4825239.322 ops/s
# Warmup Iteration  22: 4819248.938 ops/s
# Warmup Iteration  23: 4822395.261 ops/s
# Warmup Iteration  24: 4835684.995 ops/s
# Warmup Iteration  25: 4825644.854 ops/s
# Warmup Iteration  26: 4833959.820 ops/s
# Warmup Iteration  27: 4837207.709 ops/s
# Warmup Iteration  28: 4831130.714 ops/s
# Warmup Iteration  29: 4822736.170 ops/s
# Warmup Iteration  30: 4819290.589 ops/s
Iteration   1: 4839812.246 ops/s
Iteration   2: 4827065.686 ops/s
Iteration   3: 4836902.353 ops/s
Iteration   4: 4811231.889 ops/s
Iteration   5: 4824837.391 ops/s
Iteration   6: 4822718.850 ops/s
Iteration   7: 4825615.094 ops/s
Iteration   8: 4827884.958 ops/s
Iteration   9: 4820420.255 ops/s
Iteration  10: 4831146.474 ops/s
Iteration  11: 4830280.086 ops/s
Iteration  12: 4822457.601 ops/s
Iteration  13: 4834413.286 ops/s
Iteration  14: 4828819.820 ops/s
Iteration  15: 4829032.943 ops/s
Iteration  16: 4831617.130 ops/s
Iteration  17: 4825673.760 ops/s
Iteration  18: 4831365.336 ops/s
Iteration  19: 4839671.120 ops/s
Iteration  20: 4821023.179 ops/s
Iteration  21: 4836517.045 ops/s
Iteration  22: 4816552.530 ops/s
Iteration  23: 4820885.576 ops/s
Iteration  24: 4831183.556 ops/s
Iteration  25: 4830932.070 ops/s
Iteration  26: 4837900.986 ops/s
Iteration  27: 4825459.210 ops/s
Iteration  28: 4825603.474 ops/s
Iteration  29: 4828864.934 ops/s
Iteration  30: 4824081.832 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAllIterable":
  4827999.022 ±(99.9%) 4481.027 ops/s [Average]
  (min, avg, max) = (4811231.889, 4827999.022, 4839812.246), stdev = 6706.991
  CI (99.9%): [4823517.995, 4832480.050] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4827999.022 ± 4481.027  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 55634.851 ops/s
# Warmup Iteration   2: 83399.390 ops/s
# Warmup Iteration   3: 98395.493 ops/s
# Warmup Iteration   4: 97837.207 ops/s
# Warmup Iteration   5: 98474.058 ops/s
# Warmup Iteration   6: 98710.216 ops/s
# Warmup Iteration   7: 83123.332 ops/s
# Warmup Iteration   8: 98639.171 ops/s
# Warmup Iteration   9: 98793.812 ops/s
# Warmup Iteration  10: 98377.762 ops/s
# Warmup Iteration  11: 98551.978 ops/s
# Warmup Iteration  12: 98343.200 ops/s
# Warmup Iteration  13: 98745.498 ops/s
# Warmup Iteration  14: 98533.575 ops/s
# Warmup Iteration  15: 98491.697 ops/s
# Warmup Iteration  16: 98392.429 ops/s
# Warmup Iteration  17: 98604.271 ops/s
# Warmup Iteration  18: 98274.175 ops/s
# Warmup Iteration  19: 98525.944 ops/s
# Warmup Iteration  20: 98716.767 ops/s
# Warmup Iteration  21: 98439.268 ops/s
# Warmup Iteration  22: 98528.295 ops/s
# Warmup Iteration  23: 98910.889 ops/s
# Warmup Iteration  24: 98297.261 ops/s
# Warmup Iteration  25: 98686.986 ops/s
# Warmup Iteration  26: 98736.470 ops/s
# Warmup Iteration  27: 98622.404 ops/s
# Warmup Iteration  28: 98682.848 ops/s
# Warmup Iteration  29: 98562.496 ops/s
# Warmup Iteration  30: 98846.967 ops/s
Iteration   1: 98710.573 ops/s
Iteration   2: 98587.636 ops/s
Iteration   3: 98640.323 ops/s
Iteration   4: 98550.711 ops/s
Iteration   5: 98865.110 ops/s
Iteration   6: 98666.848 ops/s
Iteration   7: 98638.423 ops/s
Iteration   8: 98661.773 ops/s
Iteration   9: 98814.062 ops/s
Iteration  10: 98698.256 ops/s
Iteration  11: 98749.065 ops/s
Iteration  12: 98568.398 ops/s
Iteration  13: 98651.940 ops/s
Iteration  14: 98755.040 ops/s
Iteration  15: 98207.565 ops/s
Iteration  16: 98712.991 ops/s
Iteration  17: 98627.319 ops/s
Iteration  18: 98664.381 ops/s
Iteration  19: 98622.873 ops/s
Iteration  20: 98861.802 ops/s
Iteration  21: 98509.055 ops/s
Iteration  22: 98506.569 ops/s
Iteration  23: 98719.857 ops/s
Iteration  24: 98540.588 ops/s
Iteration  25: 98696.230 ops/s
Iteration  26: 98552.736 ops/s
Iteration  27: 98687.915 ops/s
Iteration  28: 98752.666 ops/s
Iteration  29: 98968.117 ops/s
Iteration  30: 98578.261 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyCollection":
  98658.903 ±(99.9%) 92.173 ops/s [Average]
  (min, avg, max) = (98207.565, 98658.903, 98968.117), stdev = 137.961
  CI (99.9%): [98566.730, 98751.076] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score    Error  Units
HashBagTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  98658.903 ± 92.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 50413.543 ops/s
# Warmup Iteration   2: 71144.563 ops/s
# Warmup Iteration   3: 86294.556 ops/s
# Warmup Iteration   4: 85915.066 ops/s
# Warmup Iteration   5: 86507.454 ops/s
# Warmup Iteration   6: 86450.980 ops/s
# Warmup Iteration   7: 86348.035 ops/s
# Warmup Iteration   8: 73036.971 ops/s
# Warmup Iteration   9: 86479.014 ops/s
# Warmup Iteration  10: 86286.885 ops/s
# Warmup Iteration  11: 86611.428 ops/s
# Warmup Iteration  12: 86407.564 ops/s
# Warmup Iteration  13: 86321.372 ops/s
# Warmup Iteration  14: 86222.701 ops/s
# Warmup Iteration  15: 86456.343 ops/s
# Warmup Iteration  16: 86369.803 ops/s
# Warmup Iteration  17: 86377.377 ops/s
# Warmup Iteration  18: 86523.504 ops/s
# Warmup Iteration  19: 86414.362 ops/s
# Warmup Iteration  20: 86467.728 ops/s
# Warmup Iteration  21: 86306.770 ops/s
# Warmup Iteration  22: 86374.168 ops/s
# Warmup Iteration  23: 86270.497 ops/s
# Warmup Iteration  24: 86630.774 ops/s
# Warmup Iteration  25: 86477.758 ops/s
# Warmup Iteration  26: 86339.083 ops/s
# Warmup Iteration  27: 86600.625 ops/s
# Warmup Iteration  28: 86523.495 ops/s
# Warmup Iteration  29: 86502.894 ops/s
# Warmup Iteration  30: 86708.372 ops/s
Iteration   1: 86267.702 ops/s
Iteration   2: 86529.996 ops/s
Iteration   3: 86559.151 ops/s
Iteration   4: 86183.588 ops/s
Iteration   5: 86682.621 ops/s
Iteration   6: 86163.081 ops/s
Iteration   7: 86218.867 ops/s
Iteration   8: 86579.298 ops/s
Iteration   9: 86205.173 ops/s
Iteration  10: 86390.416 ops/s
Iteration  11: 86353.585 ops/s
Iteration  12: 86345.721 ops/s
Iteration  13: 86593.965 ops/s
Iteration  14: 86327.332 ops/s
Iteration  15: 86454.190 ops/s
Iteration  16: 86666.490 ops/s
Iteration  17: 86524.101 ops/s
Iteration  18: 86382.134 ops/s
Iteration  19: 86203.139 ops/s
Iteration  20: 86555.143 ops/s
Iteration  21: 86366.172 ops/s
Iteration  22: 86568.240 ops/s
Iteration  23: 86533.758 ops/s
Iteration  24: 86443.618 ops/s
Iteration  25: 86554.194 ops/s
Iteration  26: 86366.423 ops/s
Iteration  27: 86720.738 ops/s
Iteration  28: 86574.201 ops/s
Iteration  29: 86372.822 ops/s
Iteration  30: 86550.474 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsAnyIterable":
  86441.211 ±(99.9%) 105.701 ops/s [Average]
  (min, avg, max) = (86163.081, 86441.211, 86720.738), stdev = 158.209
  CI (99.9%): [86335.510, 86546.913] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score     Error  Units
HashBagTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  86441.211 ± 105.701  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 654616.261 ops/s
# Warmup Iteration   2: 698855.218 ops/s
# Warmup Iteration   3: 853766.634 ops/s
# Warmup Iteration   4: 900217.534 ops/s
# Warmup Iteration   5: 905982.866 ops/s
# Warmup Iteration   6: 900501.715 ops/s
# Warmup Iteration   7: 908636.750 ops/s
# Warmup Iteration   8: 903683.182 ops/s
# Warmup Iteration   9: 900583.008 ops/s
# Warmup Iteration  10: 904894.883 ops/s
# Warmup Iteration  11: 906895.046 ops/s
# Warmup Iteration  12: 908676.244 ops/s
# Warmup Iteration  13: 794393.775 ops/s
# Warmup Iteration  14: 867661.986 ops/s
# Warmup Iteration  15: 907434.675 ops/s
# Warmup Iteration  16: 909366.470 ops/s
# Warmup Iteration  17: 961283.038 ops/s
# Warmup Iteration  18: 961966.150 ops/s
# Warmup Iteration  19: 964237.850 ops/s
# Warmup Iteration  20: 959001.440 ops/s
# Warmup Iteration  21: 958796.054 ops/s
# Warmup Iteration  22: 964209.079 ops/s
# Warmup Iteration  23: 957931.372 ops/s
# Warmup Iteration  24: 960500.395 ops/s
# Warmup Iteration  25: 960403.278 ops/s
# Warmup Iteration  26: 961054.871 ops/s
# Warmup Iteration  27: 958732.031 ops/s
# Warmup Iteration  28: 962778.721 ops/s
# Warmup Iteration  29: 963040.850 ops/s
# Warmup Iteration  30: 958175.801 ops/s
Iteration   1: 960962.692 ops/s
Iteration   2: 961380.861 ops/s
Iteration   3: 960164.054 ops/s
Iteration   4: 964076.157 ops/s
Iteration   5: 961738.724 ops/s
Iteration   6: 952820.399 ops/s
Iteration   7: 961321.719 ops/s
Iteration   8: 965629.425 ops/s
Iteration   9: 960722.801 ops/s
Iteration  10: 959597.521 ops/s
Iteration  11: 961537.758 ops/s
Iteration  12: 958621.076 ops/s
Iteration  13: 958511.048 ops/s
Iteration  14: 956242.296 ops/s
Iteration  15: 957260.442 ops/s
Iteration  16: 958554.508 ops/s
Iteration  17: 959470.704 ops/s
Iteration  18: 961096.292 ops/s
Iteration  19: 962066.509 ops/s
Iteration  20: 954920.355 ops/s
Iteration  21: 959063.475 ops/s
Iteration  22: 957865.076 ops/s
Iteration  23: 963676.701 ops/s
Iteration  24: 964175.564 ops/s
Iteration  25: 962479.357 ops/s
Iteration  26: 959090.306 ops/s
Iteration  27: 961138.193 ops/s
Iteration  28: 957106.918 ops/s
Iteration  29: 965816.944 ops/s
Iteration  30: 963087.504 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsBy":
  960339.846 ±(99.9%) 2011.444 ops/s [Average]
  (min, avg, max) = (952820.399, 960339.846, 965816.944), stdev = 3010.635
  CI (99.9%): [958328.402, 962351.290] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_containsBy  thrpt   30  960339.846 ± 2011.444  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56470.334 ops/s
# Warmup Iteration   2: 85586.930 ops/s
# Warmup Iteration   3: 99886.732 ops/s
# Warmup Iteration   4: 99564.291 ops/s
# Warmup Iteration   5: 99891.993 ops/s
# Warmup Iteration   6: 99915.497 ops/s
# Warmup Iteration   7: 84769.783 ops/s
# Warmup Iteration   8: 100019.509 ops/s
# Warmup Iteration   9: 99995.243 ops/s
# Warmup Iteration  10: 99939.808 ops/s
# Warmup Iteration  11: 100048.691 ops/s
# Warmup Iteration  12: 99757.924 ops/s
# Warmup Iteration  13: 99812.502 ops/s
# Warmup Iteration  14: 99695.106 ops/s
# Warmup Iteration  15: 99644.330 ops/s
# Warmup Iteration  16: 99884.651 ops/s
# Warmup Iteration  17: 99838.726 ops/s
# Warmup Iteration  18: 99858.223 ops/s
# Warmup Iteration  19: 99929.289 ops/s
# Warmup Iteration  20: 100035.696 ops/s
# Warmup Iteration  21: 99798.026 ops/s
# Warmup Iteration  22: 99754.164 ops/s
# Warmup Iteration  23: 99902.878 ops/s
# Warmup Iteration  24: 99705.221 ops/s
# Warmup Iteration  25: 99884.542 ops/s
# Warmup Iteration  26: 100045.824 ops/s
# Warmup Iteration  27: 99818.539 ops/s
# Warmup Iteration  28: 99793.152 ops/s
# Warmup Iteration  29: 99829.275 ops/s
# Warmup Iteration  30: 100013.145 ops/s
Iteration   1: 99641.769 ops/s
Iteration   2: 99656.906 ops/s
Iteration   3: 99577.858 ops/s
Iteration   4: 99959.273 ops/s
Iteration   5: 99872.112 ops/s
Iteration   6: 99853.925 ops/s
Iteration   7: 99807.749 ops/s
Iteration   8: 99999.915 ops/s
Iteration   9: 99632.483 ops/s
Iteration  10: 100258.318 ops/s
Iteration  11: 99891.481 ops/s
Iteration  12: 99792.218 ops/s
Iteration  13: 99938.956 ops/s
Iteration  14: 99830.508 ops/s
Iteration  15: 99954.107 ops/s
Iteration  16: 99788.847 ops/s
Iteration  17: 100097.582 ops/s
Iteration  18: 99594.949 ops/s
Iteration  19: 100264.289 ops/s
Iteration  20: 100140.094 ops/s
Iteration  21: 100122.776 ops/s
Iteration  22: 100093.833 ops/s
Iteration  23: 99800.291 ops/s
Iteration  24: 99754.499 ops/s
Iteration  25: 99960.798 ops/s
Iteration  26: 100116.791 ops/s
Iteration  27: 99901.215 ops/s
Iteration  28: 100203.776 ops/s
Iteration  29: 99881.436 ops/s
Iteration  30: 100663.161 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneCollection":
  99935.064 ±(99.9%) 157.780 ops/s [Average]
  (min, avg, max) = (99577.858, 99935.064, 100663.161), stdev = 236.158
  CI (99.9%): [99777.284, 100092.844] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
HashBagTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  99935.064 ± 157.780  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51824.421 ops/s
# Warmup Iteration   2: 73613.592 ops/s
# Warmup Iteration   3: 88576.746 ops/s
# Warmup Iteration   4: 88004.223 ops/s
# Warmup Iteration   5: 88293.037 ops/s
# Warmup Iteration   6: 88435.144 ops/s
# Warmup Iteration   7: 88536.887 ops/s
# Warmup Iteration   8: 74757.683 ops/s
# Warmup Iteration   9: 88289.021 ops/s
# Warmup Iteration  10: 88247.738 ops/s
# Warmup Iteration  11: 88573.939 ops/s
# Warmup Iteration  12: 88321.646 ops/s
# Warmup Iteration  13: 88435.927 ops/s
# Warmup Iteration  14: 88526.418 ops/s
# Warmup Iteration  15: 88192.952 ops/s
# Warmup Iteration  16: 88545.703 ops/s
# Warmup Iteration  17: 88446.167 ops/s
# Warmup Iteration  18: 88434.172 ops/s
# Warmup Iteration  19: 88544.552 ops/s
# Warmup Iteration  20: 88093.210 ops/s
# Warmup Iteration  21: 88463.876 ops/s
# Warmup Iteration  22: 88462.395 ops/s
# Warmup Iteration  23: 88072.009 ops/s
# Warmup Iteration  24: 88148.096 ops/s
# Warmup Iteration  25: 88614.280 ops/s
# Warmup Iteration  26: 88541.240 ops/s
# Warmup Iteration  27: 88507.700 ops/s
# Warmup Iteration  28: 88394.879 ops/s
# Warmup Iteration  29: 88350.619 ops/s
# Warmup Iteration  30: 88427.954 ops/s
Iteration   1: 88420.612 ops/s
Iteration   2: 88416.813 ops/s
Iteration   3: 88818.887 ops/s
Iteration   4: 88730.161 ops/s
Iteration   5: 88224.749 ops/s
Iteration   6: 88699.390 ops/s
Iteration   7: 88564.499 ops/s
Iteration   8: 88983.937 ops/s
Iteration   9: 88552.198 ops/s
Iteration  10: 88445.667 ops/s
Iteration  11: 88669.388 ops/s
Iteration  12: 88572.175 ops/s
Iteration  13: 88672.905 ops/s
Iteration  14: 88434.056 ops/s
Iteration  15: 88386.510 ops/s
Iteration  16: 88510.165 ops/s
Iteration  17: 88296.587 ops/s
Iteration  18: 88613.743 ops/s
Iteration  19: 88810.679 ops/s
Iteration  20: 88390.178 ops/s
Iteration  21: 88690.250 ops/s
Iteration  22: 88779.377 ops/s
Iteration  23: 88846.262 ops/s
Iteration  24: 88715.083 ops/s
Iteration  25: 88374.165 ops/s
Iteration  26: 88704.040 ops/s
Iteration  27: 88460.196 ops/s
Iteration  28: 88940.294 ops/s
Iteration  29: 88574.164 ops/s
Iteration  30: 88626.544 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_containsNoneIterable":
  88597.456 ±(99.9%) 126.605 ops/s [Average]
  (min, avg, max) = (88224.749, 88597.456, 88983.937), stdev = 189.497
  CI (99.9%): [88470.850, 88724.061] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt      Score     Error  Units
HashBagTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  88597.456 ± 126.605  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2618773.567 ops/s
# Warmup Iteration   2: 4983057.505 ops/s
# Warmup Iteration   3: 5437002.393 ops/s
# Warmup Iteration   4: 5466317.930 ops/s
# Warmup Iteration   5: 4437061.487 ops/s
# Warmup Iteration   6: 5470339.688 ops/s
# Warmup Iteration   7: 5478086.504 ops/s
# Warmup Iteration   8: 5471476.733 ops/s
# Warmup Iteration   9: 5481001.437 ops/s
# Warmup Iteration  10: 5467385.777 ops/s
# Warmup Iteration  11: 5456164.379 ops/s
# Warmup Iteration  12: 5473929.129 ops/s
# Warmup Iteration  13: 5479278.211 ops/s
# Warmup Iteration  14: 5470056.550 ops/s
# Warmup Iteration  15: 5466819.576 ops/s
# Warmup Iteration  16: 5472971.907 ops/s
# Warmup Iteration  17: 5482802.294 ops/s
# Warmup Iteration  18: 5477949.853 ops/s
# Warmup Iteration  19: 5471433.912 ops/s
# Warmup Iteration  20: 5472026.986 ops/s
# Warmup Iteration  21: 5477283.835 ops/s
# Warmup Iteration  22: 5483642.970 ops/s
# Warmup Iteration  23: 5479749.751 ops/s
# Warmup Iteration  24: 5475718.126 ops/s
# Warmup Iteration  25: 5478539.811 ops/s
# Warmup Iteration  26: 5467940.210 ops/s
# Warmup Iteration  27: 5474115.128 ops/s
# Warmup Iteration  28: 5469127.230 ops/s
# Warmup Iteration  29: 5463099.478 ops/s
# Warmup Iteration  30: 5457819.931 ops/s
Iteration   1: 5485971.961 ops/s
Iteration   2: 5462636.070 ops/s
Iteration   3: 5478344.626 ops/s
Iteration   4: 5480937.974 ops/s
Iteration   5: 5437945.852 ops/s
Iteration   6: 5476476.022 ops/s
Iteration   7: 5472563.131 ops/s
Iteration   8: 5480609.941 ops/s
Iteration   9: 5489009.530 ops/s
Iteration  10: 5472802.090 ops/s
Iteration  11: 5461693.245 ops/s
Iteration  12: 5501415.343 ops/s
Iteration  13: 5476355.227 ops/s
Iteration  14: 5469869.149 ops/s
Iteration  15: 5493888.604 ops/s
Iteration  16: 5481156.152 ops/s
Iteration  17: 5472448.143 ops/s
Iteration  18: 5478790.716 ops/s
Iteration  19: 5481905.256 ops/s
Iteration  20: 5470384.331 ops/s
Iteration  21: 5472584.752 ops/s
Iteration  22: 5453119.486 ops/s
Iteration  23: 5464365.126 ops/s
Iteration  24: 5477701.949 ops/s
Iteration  25: 5480149.234 ops/s
Iteration  26: 5459615.348 ops/s
Iteration  27: 5476706.484 ops/s
Iteration  28: 5476507.218 ops/s
Iteration  29: 5473493.878 ops/s
Iteration  30: 5478878.652 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_count":
  5474610.850 ±(99.9%) 8047.141 ops/s [Average]
  (min, avg, max) = (5437945.852, 5474610.850, 5501415.343), stdev = 12044.583
  CI (99.9%): [5466563.708, 5482657.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_count  thrpt   30  5474610.850 ± 8047.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 825532.594 ops/s
# Warmup Iteration   2: 1505470.936 ops/s
# Warmup Iteration   3: 1672786.458 ops/s
# Warmup Iteration   4: 1680276.545 ops/s
# Warmup Iteration   5: 1517235.603 ops/s
# Warmup Iteration   6: 1532465.171 ops/s
# Warmup Iteration   7: 1678874.406 ops/s
# Warmup Iteration   8: 1676567.187 ops/s
# Warmup Iteration   9: 1675662.378 ops/s
# Warmup Iteration  10: 1679365.633 ops/s
# Warmup Iteration  11: 1679400.159 ops/s
# Warmup Iteration  12: 1679276.323 ops/s
# Warmup Iteration  13: 1677791.173 ops/s
# Warmup Iteration  14: 1677810.370 ops/s
# Warmup Iteration  15: 1674790.356 ops/s
# Warmup Iteration  16: 1683601.689 ops/s
# Warmup Iteration  17: 1683576.293 ops/s
# Warmup Iteration  18: 1683769.461 ops/s
# Warmup Iteration  19: 1683403.362 ops/s
# Warmup Iteration  20: 1680993.839 ops/s
# Warmup Iteration  21: 1683685.235 ops/s
# Warmup Iteration  22: 1683922.812 ops/s
# Warmup Iteration  23: 1682166.175 ops/s
# Warmup Iteration  24: 1683139.866 ops/s
# Warmup Iteration  25: 1679844.642 ops/s
# Warmup Iteration  26: 1681499.677 ops/s
# Warmup Iteration  27: 1684500.005 ops/s
# Warmup Iteration  28: 1675900.110 ops/s
# Warmup Iteration  29: 1679062.873 ops/s
# Warmup Iteration  30: 1676867.210 ops/s
Iteration   1: 1685391.284 ops/s
Iteration   2: 1680905.841 ops/s
Iteration   3: 1684341.231 ops/s
Iteration   4: 1686188.184 ops/s
Iteration   5: 1683013.328 ops/s
Iteration   6: 1682665.138 ops/s
Iteration   7: 1678827.475 ops/s
Iteration   8: 1684137.991 ops/s
Iteration   9: 1678681.377 ops/s
Iteration  10: 1666836.688 ops/s
Iteration  11: 1691620.985 ops/s
Iteration  12: 1675709.478 ops/s
Iteration  13: 1681300.658 ops/s
Iteration  14: 1681466.246 ops/s
Iteration  15: 1679854.011 ops/s
Iteration  16: 1683660.923 ops/s
Iteration  17: 1673431.691 ops/s
Iteration  18: 1680210.315 ops/s
Iteration  19: 1685017.705 ops/s
Iteration  20: 1685322.528 ops/s
Iteration  21: 1683815.166 ops/s
Iteration  22: 1676519.373 ops/s
Iteration  23: 1677627.667 ops/s
Iteration  24: 1676712.865 ops/s
Iteration  25: 1679692.634 ops/s
Iteration  26: 1679153.483 ops/s
Iteration  27: 1684305.347 ops/s
Iteration  28: 1684706.625 ops/s
Iteration  29: 1681251.654 ops/s
Iteration  30: 1682945.912 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countBy":
  1681177.127 ±(99.9%) 3082.752 ops/s [Average]
  (min, avg, max) = (1666836.688, 1681177.127, 1691620.985), stdev = 4614.119
  CI (99.9%): [1678094.375, 1684259.879] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_countBy  thrpt   30  1681177.127 ± 3082.752  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244813.648 ops/s
# Warmup Iteration   2: 475576.171 ops/s
# Warmup Iteration   3: 521904.630 ops/s
# Warmup Iteration   4: 526169.558 ops/s
# Warmup Iteration   5: 438401.516 ops/s
# Warmup Iteration   6: 523041.611 ops/s
# Warmup Iteration   7: 526688.530 ops/s
# Warmup Iteration   8: 526556.352 ops/s
# Warmup Iteration   9: 526074.938 ops/s
# Warmup Iteration  10: 526282.939 ops/s
# Warmup Iteration  11: 527046.545 ops/s
# Warmup Iteration  12: 525055.127 ops/s
# Warmup Iteration  13: 525301.264 ops/s
# Warmup Iteration  14: 528539.299 ops/s
# Warmup Iteration  15: 526934.897 ops/s
# Warmup Iteration  16: 527535.746 ops/s
# Warmup Iteration  17: 527208.829 ops/s
# Warmup Iteration  18: 527762.060 ops/s
# Warmup Iteration  19: 526005.647 ops/s
# Warmup Iteration  20: 527658.523 ops/s
# Warmup Iteration  21: 526033.310 ops/s
# Warmup Iteration  22: 526427.883 ops/s
# Warmup Iteration  23: 526162.498 ops/s
# Warmup Iteration  24: 526788.714 ops/s
# Warmup Iteration  25: 527860.081 ops/s
# Warmup Iteration  26: 525177.464 ops/s
# Warmup Iteration  27: 527892.707 ops/s
# Warmup Iteration  28: 525920.648 ops/s
# Warmup Iteration  29: 526344.976 ops/s
# Warmup Iteration  30: 526927.935 ops/s
Iteration   1: 526264.902 ops/s
Iteration   2: 526395.090 ops/s
Iteration   3: 527063.794 ops/s
Iteration   4: 527919.058 ops/s
Iteration   5: 527401.042 ops/s
Iteration   6: 528294.351 ops/s
Iteration   7: 528294.945 ops/s
Iteration   8: 525775.310 ops/s
Iteration   9: 527796.588 ops/s
Iteration  10: 527427.457 ops/s
Iteration  11: 526575.102 ops/s
Iteration  12: 528307.385 ops/s
Iteration  13: 528066.382 ops/s
Iteration  14: 527658.540 ops/s
Iteration  15: 528102.645 ops/s
Iteration  16: 525688.375 ops/s
Iteration  17: 527475.359 ops/s
Iteration  18: 526564.213 ops/s
Iteration  19: 529481.676 ops/s
Iteration  20: 526382.083 ops/s
Iteration  21: 527940.800 ops/s
Iteration  22: 527922.387 ops/s
Iteration  23: 526918.738 ops/s
Iteration  24: 527827.783 ops/s
Iteration  25: 525998.612 ops/s
Iteration  26: 526075.996 ops/s
Iteration  27: 527534.838 ops/s
Iteration  28: 526337.426 ops/s
Iteration  29: 524782.181 ops/s
Iteration  30: 528322.327 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByEach":
  527219.846 ±(99.9%) 692.604 ops/s [Average]
  (min, avg, max) = (524782.181, 527219.846, 529481.676), stdev = 1036.658
  CI (99.9%): [526527.242, 527912.450] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_countByEach  thrpt   30  527219.846 ± 692.604  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 810461.687 ops/s
# Warmup Iteration   2: 1448979.728 ops/s
# Warmup Iteration   3: 1587436.849 ops/s
# Warmup Iteration   4: 1588026.892 ops/s
# Warmup Iteration   5: 1590672.394 ops/s
# Warmup Iteration   6: 1314869.363 ops/s
# Warmup Iteration   7: 1587907.040 ops/s
# Warmup Iteration   8: 1593085.919 ops/s
# Warmup Iteration   9: 1596932.891 ops/s
# Warmup Iteration  10: 1592045.458 ops/s
# Warmup Iteration  11: 1591090.708 ops/s
# Warmup Iteration  12: 1593051.408 ops/s
# Warmup Iteration  13: 1592056.268 ops/s
# Warmup Iteration  14: 1593824.261 ops/s
# Warmup Iteration  15: 1592657.334 ops/s
# Warmup Iteration  16: 1594969.811 ops/s
# Warmup Iteration  17: 1593530.348 ops/s
# Warmup Iteration  18: 1596545.239 ops/s
# Warmup Iteration  19: 1593215.981 ops/s
# Warmup Iteration  20: 1591816.809 ops/s
# Warmup Iteration  21: 1597310.122 ops/s
# Warmup Iteration  22: 1596304.604 ops/s
# Warmup Iteration  23: 1594808.752 ops/s
# Warmup Iteration  24: 1598487.620 ops/s
# Warmup Iteration  25: 1598238.127 ops/s
# Warmup Iteration  26: 1594098.855 ops/s
# Warmup Iteration  27: 1593697.393 ops/s
# Warmup Iteration  28: 1594336.960 ops/s
# Warmup Iteration  29: 1600156.481 ops/s
# Warmup Iteration  30: 1592222.921 ops/s
Iteration   1: 1596792.183 ops/s
Iteration   2: 1589253.986 ops/s
Iteration   3: 1596738.540 ops/s
Iteration   4: 1599431.550 ops/s
Iteration   5: 1600260.150 ops/s
Iteration   6: 1597896.244 ops/s
Iteration   7: 1593207.157 ops/s
Iteration   8: 1598685.851 ops/s
Iteration   9: 1595724.434 ops/s
Iteration  10: 1595151.140 ops/s
Iteration  11: 1591496.157 ops/s
Iteration  12: 1594288.416 ops/s
Iteration  13: 1602330.526 ops/s
Iteration  14: 1594561.081 ops/s
Iteration  15: 1595519.621 ops/s
Iteration  16: 1594154.431 ops/s
Iteration  17: 1598812.326 ops/s
Iteration  18: 1602875.017 ops/s
Iteration  19: 1594253.308 ops/s
Iteration  20: 1599365.127 ops/s
Iteration  21: 1594530.699 ops/s
Iteration  22: 1595473.983 ops/s
Iteration  23: 1595886.452 ops/s
Iteration  24: 1593397.283 ops/s
Iteration  25: 1597536.082 ops/s
Iteration  26: 1596748.986 ops/s
Iteration  27: 1597123.406 ops/s
Iteration  28: 1594377.099 ops/s
Iteration  29: 1597115.076 ops/s
Iteration  30: 1594503.449 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countByWith":
  1596249.659 ±(99.9%) 1970.304 ops/s [Average]
  (min, avg, max) = (1589253.986, 1596249.659, 1602875.017), stdev = 2949.058
  CI (99.9%): [1594279.355, 1598219.962] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_countByWith  thrpt   30  1596249.659 ± 1970.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2559241.368 ops/s
# Warmup Iteration   2: 4926418.702 ops/s
# Warmup Iteration   3: 5322988.042 ops/s
# Warmup Iteration   4: 5372623.621 ops/s
# Warmup Iteration   5: 4413269.823 ops/s
# Warmup Iteration   6: 5390036.272 ops/s
# Warmup Iteration   7: 5390589.532 ops/s
# Warmup Iteration   8: 5377884.366 ops/s
# Warmup Iteration   9: 5386185.002 ops/s
# Warmup Iteration  10: 5390975.804 ops/s
# Warmup Iteration  11: 5387824.445 ops/s
# Warmup Iteration  12: 5377229.212 ops/s
# Warmup Iteration  13: 5383927.210 ops/s
# Warmup Iteration  14: 5391168.981 ops/s
# Warmup Iteration  15: 5386919.544 ops/s
# Warmup Iteration  16: 5392511.786 ops/s
# Warmup Iteration  17: 5381236.902 ops/s
# Warmup Iteration  18: 5375899.947 ops/s
# Warmup Iteration  19: 5391437.040 ops/s
# Warmup Iteration  20: 5365349.137 ops/s
# Warmup Iteration  21: 5399040.045 ops/s
# Warmup Iteration  22: 5393254.823 ops/s
# Warmup Iteration  23: 5386083.496 ops/s
# Warmup Iteration  24: 5388561.837 ops/s
# Warmup Iteration  25: 5379023.961 ops/s
# Warmup Iteration  26: 5389286.097 ops/s
# Warmup Iteration  27: 5396643.153 ops/s
# Warmup Iteration  28: 5398706.878 ops/s
# Warmup Iteration  29: 5386042.253 ops/s
# Warmup Iteration  30: 5406158.505 ops/s
Iteration   1: 5387379.004 ops/s
Iteration   2: 5390305.870 ops/s
Iteration   3: 5394936.111 ops/s
Iteration   4: 5366658.543 ops/s
Iteration   5: 5395517.004 ops/s
Iteration   6: 5398590.348 ops/s
Iteration   7: 5391104.466 ops/s
Iteration   8: 5384684.284 ops/s
Iteration   9: 5384742.374 ops/s
Iteration  10: 5387950.891 ops/s
Iteration  11: 5380512.107 ops/s
Iteration  12: 5383898.459 ops/s
Iteration  13: 5386315.226 ops/s
Iteration  14: 5380930.434 ops/s
Iteration  15: 5393940.377 ops/s
Iteration  16: 5375247.428 ops/s
Iteration  17: 5381986.520 ops/s
Iteration  18: 5384357.510 ops/s
Iteration  19: 5399505.232 ops/s
Iteration  20: 5382584.372 ops/s
Iteration  21: 5388394.416 ops/s
Iteration  22: 5383127.150 ops/s
Iteration  23: 5382298.471 ops/s
Iteration  24: 5385924.589 ops/s
Iteration  25: 5395779.489 ops/s
Iteration  26: 5389709.804 ops/s
Iteration  27: 5390679.597 ops/s
Iteration  28: 5378489.674 ops/s
Iteration  29: 5387663.001 ops/s
Iteration  30: 5365794.481 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_countWith":
  5385966.908 ±(99.9%) 5314.450 ops/s [Average]
  (min, avg, max) = (5365794.481, 5385966.908, 5399505.232), stdev = 7954.420
  CI (99.9%): [5380652.457, 5391281.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_countWith  thrpt   30  5385966.908 ± 5314.450  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 863343.787 ops/s
# Warmup Iteration   2: 1548258.636 ops/s
# Warmup Iteration   3: 1740500.786 ops/s
# Warmup Iteration   4: 1747631.392 ops/s
# Warmup Iteration   5: 1724409.933 ops/s
# Warmup Iteration   6: 1456849.729 ops/s
# Warmup Iteration   7: 1742110.887 ops/s
# Warmup Iteration   8: 1739559.589 ops/s
# Warmup Iteration   9: 1748035.103 ops/s
# Warmup Iteration  10: 1749619.441 ops/s
# Warmup Iteration  11: 1748392.967 ops/s
# Warmup Iteration  12: 1744779.878 ops/s
# Warmup Iteration  13: 1747651.353 ops/s
# Warmup Iteration  14: 1745597.825 ops/s
# Warmup Iteration  15: 1747001.535 ops/s
# Warmup Iteration  16: 1746142.036 ops/s
# Warmup Iteration  17: 1751280.515 ops/s
# Warmup Iteration  18: 1750967.502 ops/s
# Warmup Iteration  19: 1745114.979 ops/s
# Warmup Iteration  20: 1751388.732 ops/s
# Warmup Iteration  21: 1746506.326 ops/s
# Warmup Iteration  22: 1751726.898 ops/s
# Warmup Iteration  23: 1747976.509 ops/s
# Warmup Iteration  24: 1747114.910 ops/s
# Warmup Iteration  25: 1747272.100 ops/s
# Warmup Iteration  26: 1750256.845 ops/s
# Warmup Iteration  27: 1748822.062 ops/s
# Warmup Iteration  28: 1749512.648 ops/s
# Warmup Iteration  29: 1751139.225 ops/s
# Warmup Iteration  30: 1750009.201 ops/s
Iteration   1: 1748559.208 ops/s
Iteration   2: 1742401.305 ops/s
Iteration   3: 1751708.644 ops/s
Iteration   4: 1757456.960 ops/s
Iteration   5: 1744057.312 ops/s
Iteration   6: 1739366.913 ops/s
Iteration   7: 1753596.912 ops/s
Iteration   8: 1744201.048 ops/s
Iteration   9: 1748853.907 ops/s
Iteration  10: 1752435.493 ops/s
Iteration  11: 1748414.850 ops/s
Iteration  12: 1746632.553 ops/s
Iteration  13: 1751953.794 ops/s
Iteration  14: 1751880.271 ops/s
Iteration  15: 1747294.026 ops/s
Iteration  16: 1746925.861 ops/s
Iteration  17: 1754831.994 ops/s
Iteration  18: 1747369.468 ops/s
Iteration  19: 1754361.993 ops/s
Iteration  20: 1751679.089 ops/s
Iteration  21: 1751559.110 ops/s
Iteration  22: 1748795.295 ops/s
Iteration  23: 1751327.278 ops/s
Iteration  24: 1748061.914 ops/s
Iteration  25: 1745777.999 ops/s
Iteration  26: 1751309.094 ops/s
Iteration  27: 1749660.781 ops/s
Iteration  28: 1752727.757 ops/s
Iteration  29: 1747535.401 ops/s
Iteration  30: 1743095.277 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detect":
  1749127.717 ±(99.9%) 2712.584 ops/s [Average]
  (min, avg, max) = (1739366.913, 1749127.717, 1757456.960), stdev = 4060.068
  CI (99.9%): [1746415.133, 1751840.301] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_detect  thrpt   30  1749127.717 ± 2712.584  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 865917.405 ops/s
# Warmup Iteration   2: 1551815.787 ops/s
# Warmup Iteration   3: 1701033.082 ops/s
# Warmup Iteration   4: 1711360.850 ops/s
# Warmup Iteration   5: 1705619.869 ops/s
# Warmup Iteration   6: 1399968.181 ops/s
# Warmup Iteration   7: 1714024.436 ops/s
# Warmup Iteration   8: 1711051.735 ops/s
# Warmup Iteration   9: 1711844.857 ops/s
# Warmup Iteration  10: 1708504.060 ops/s
# Warmup Iteration  11: 1711145.807 ops/s
# Warmup Iteration  12: 1711700.196 ops/s
# Warmup Iteration  13: 1710749.434 ops/s
# Warmup Iteration  14: 1711648.584 ops/s
# Warmup Iteration  15: 1710599.163 ops/s
# Warmup Iteration  16: 1711732.943 ops/s
# Warmup Iteration  17: 1708599.362 ops/s
# Warmup Iteration  18: 1712397.562 ops/s
# Warmup Iteration  19: 1709505.750 ops/s
# Warmup Iteration  20: 1709869.168 ops/s
# Warmup Iteration  21: 1714187.248 ops/s
# Warmup Iteration  22: 1713399.343 ops/s
# Warmup Iteration  23: 1707611.067 ops/s
# Warmup Iteration  24: 1711489.492 ops/s
# Warmup Iteration  25: 1711954.255 ops/s
# Warmup Iteration  26: 1711255.719 ops/s
# Warmup Iteration  27: 1711268.146 ops/s
# Warmup Iteration  28: 1713107.053 ops/s
# Warmup Iteration  29: 1713078.405 ops/s
# Warmup Iteration  30: 1710314.165 ops/s
Iteration   1: 1704772.454 ops/s
Iteration   2: 1708441.063 ops/s
Iteration   3: 1705267.072 ops/s
Iteration   4: 1703980.795 ops/s
Iteration   5: 1708327.579 ops/s
Iteration   6: 1705148.083 ops/s
Iteration   7: 1713457.366 ops/s
Iteration   8: 1707734.385 ops/s
Iteration   9: 1704356.798 ops/s
Iteration  10: 1711147.215 ops/s
Iteration  11: 1704303.556 ops/s
Iteration  12: 1707288.363 ops/s
Iteration  13: 1717127.749 ops/s
Iteration  14: 1715612.153 ops/s
Iteration  15: 1707216.604 ops/s
Iteration  16: 1704720.741 ops/s
Iteration  17: 1711153.819 ops/s
Iteration  18: 1712061.984 ops/s
Iteration  19: 1710612.232 ops/s
Iteration  20: 1706906.309 ops/s
Iteration  21: 1709383.464 ops/s
Iteration  22: 1716033.396 ops/s
Iteration  23: 1709349.331 ops/s
Iteration  24: 1715569.927 ops/s
Iteration  25: 1713887.393 ops/s
Iteration  26: 1713956.589 ops/s
Iteration  27: 1711495.884 ops/s
Iteration  28: 1715814.132 ops/s
Iteration  29: 1708095.948 ops/s
Iteration  30: 1712236.128 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectIfNone":
  1709848.617 ±(99.9%) 2721.537 ops/s [Average]
  (min, avg, max) = (1703980.795, 1709848.617, 1717127.749), stdev = 4073.469
  CI (99.9%): [1707127.080, 1712570.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_detectIfNone  thrpt   30  1709848.617 ± 2721.537  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 306124.261 ops/s
# Warmup Iteration   2: 381924.926 ops/s
# Warmup Iteration   3: 482334.606 ops/s
# Warmup Iteration   4: 479538.370 ops/s
# Warmup Iteration   5: 481449.479 ops/s
# Warmup Iteration   6: 482713.134 ops/s
# Warmup Iteration   7: 483285.658 ops/s
# Warmup Iteration   8: 482470.234 ops/s
# Warmup Iteration   9: 402176.315 ops/s
# Warmup Iteration  10: 482408.747 ops/s
# Warmup Iteration  11: 481500.169 ops/s
# Warmup Iteration  12: 481650.115 ops/s
# Warmup Iteration  13: 482755.602 ops/s
# Warmup Iteration  14: 479898.612 ops/s
# Warmup Iteration  15: 480334.724 ops/s
# Warmup Iteration  16: 481738.030 ops/s
# Warmup Iteration  17: 495271.851 ops/s
# Warmup Iteration  18: 496254.256 ops/s
# Warmup Iteration  19: 496343.306 ops/s
# Warmup Iteration  20: 496707.439 ops/s
# Warmup Iteration  21: 494826.095 ops/s
# Warmup Iteration  22: 495287.127 ops/s
# Warmup Iteration  23: 497138.943 ops/s
# Warmup Iteration  24: 495197.652 ops/s
# Warmup Iteration  25: 496191.688 ops/s
# Warmup Iteration  26: 496234.532 ops/s
# Warmup Iteration  27: 494235.036 ops/s
# Warmup Iteration  28: 495008.825 ops/s
# Warmup Iteration  29: 496164.201 ops/s
# Warmup Iteration  30: 494652.125 ops/s
Iteration   1: 495410.883 ops/s
Iteration   2: 496128.363 ops/s
Iteration   3: 496685.399 ops/s
Iteration   4: 494735.824 ops/s
Iteration   5: 495642.470 ops/s
Iteration   6: 496077.483 ops/s
Iteration   7: 494987.856 ops/s
Iteration   8: 496800.348 ops/s
Iteration   9: 496247.926 ops/s
Iteration  10: 495044.143 ops/s
Iteration  11: 497620.171 ops/s
Iteration  12: 496881.097 ops/s
Iteration  13: 496092.988 ops/s
Iteration  14: 497675.900 ops/s
Iteration  15: 496249.473 ops/s
Iteration  16: 494725.211 ops/s
Iteration  17: 496597.035 ops/s
Iteration  18: 497549.389 ops/s
Iteration  19: 496418.422 ops/s
Iteration  20: 497312.654 ops/s
Iteration  21: 494646.733 ops/s
Iteration  22: 497206.860 ops/s
Iteration  23: 497656.586 ops/s
Iteration  24: 494801.046 ops/s
Iteration  25: 497135.011 ops/s
Iteration  26: 495655.186 ops/s
Iteration  27: 496019.249 ops/s
Iteration  28: 494902.312 ops/s
Iteration  29: 497182.268 ops/s
Iteration  30: 494159.091 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectOptional":
  496141.579 ±(99.9%) 702.192 ops/s [Average]
  (min, avg, max) = (494159.091, 496141.579, 497675.900), stdev = 1051.008
  CI (99.9%): [495439.387, 496843.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_detectOptional  thrpt   30  496141.579 ± 702.192  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 858633.783 ops/s
# Warmup Iteration   2: 1539756.276 ops/s
# Warmup Iteration   3: 1738280.372 ops/s
# Warmup Iteration   4: 1745113.673 ops/s
# Warmup Iteration   5: 1728792.017 ops/s
# Warmup Iteration   6: 1439353.331 ops/s
# Warmup Iteration   7: 1741310.853 ops/s
# Warmup Iteration   8: 1741010.854 ops/s
# Warmup Iteration   9: 1741400.365 ops/s
# Warmup Iteration  10: 1743677.486 ops/s
# Warmup Iteration  11: 1743238.444 ops/s
# Warmup Iteration  12: 1740574.018 ops/s
# Warmup Iteration  13: 1741831.419 ops/s
# Warmup Iteration  14: 1747076.776 ops/s
# Warmup Iteration  15: 1741564.745 ops/s
# Warmup Iteration  16: 1744309.318 ops/s
# Warmup Iteration  17: 1734024.769 ops/s
# Warmup Iteration  18: 1741472.634 ops/s
# Warmup Iteration  19: 1741540.894 ops/s
# Warmup Iteration  20: 1745691.859 ops/s
# Warmup Iteration  21: 1743753.089 ops/s
# Warmup Iteration  22: 1743981.776 ops/s
# Warmup Iteration  23: 1739876.093 ops/s
# Warmup Iteration  24: 1749401.171 ops/s
# Warmup Iteration  25: 1745300.026 ops/s
# Warmup Iteration  26: 1745791.171 ops/s
# Warmup Iteration  27: 1747006.281 ops/s
# Warmup Iteration  28: 1746225.501 ops/s
# Warmup Iteration  29: 1742846.313 ops/s
# Warmup Iteration  30: 1748751.067 ops/s
Iteration   1: 1747696.527 ops/s
Iteration   2: 1743504.285 ops/s
Iteration   3: 1746011.064 ops/s
Iteration   4: 1746875.624 ops/s
Iteration   5: 1742741.368 ops/s
Iteration   6: 1744800.022 ops/s
Iteration   7: 1745091.673 ops/s
Iteration   8: 1747435.756 ops/s
Iteration   9: 1746110.391 ops/s
Iteration  10: 1744678.666 ops/s
Iteration  11: 1746603.323 ops/s
Iteration  12: 1750530.250 ops/s
Iteration  13: 1746668.492 ops/s
Iteration  14: 1748178.400 ops/s
Iteration  15: 1735832.563 ops/s
Iteration  16: 1745353.257 ops/s
Iteration  17: 1744761.317 ops/s
Iteration  18: 1741222.099 ops/s
Iteration  19: 1744931.767 ops/s
Iteration  20: 1739388.805 ops/s
Iteration  21: 1751408.422 ops/s
Iteration  22: 1746503.006 ops/s
Iteration  23: 1743969.011 ops/s
Iteration  24: 1749495.515 ops/s
Iteration  25: 1748935.530 ops/s
Iteration  26: 1750421.484 ops/s
Iteration  27: 1743392.147 ops/s
Iteration  28: 1743011.931 ops/s
Iteration  29: 1750991.751 ops/s
Iteration  30: 1744680.109 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWith":
  1745707.485 ±(99.9%) 2285.970 ops/s [Average]
  (min, avg, max) = (1735832.563, 1745707.485, 1751408.422), stdev = 3421.533
  CI (99.9%): [1743421.515, 1747993.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_detectWith  thrpt   30  1745707.485 ± 2285.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 847831.873 ops/s
# Warmup Iteration   2: 1467451.984 ops/s
# Warmup Iteration   3: 1662214.987 ops/s
# Warmup Iteration   4: 1661316.926 ops/s
# Warmup Iteration   5: 1666794.204 ops/s
# Warmup Iteration   6: 1363793.194 ops/s
# Warmup Iteration   7: 1670284.029 ops/s
# Warmup Iteration   8: 1672616.939 ops/s
# Warmup Iteration   9: 1671195.590 ops/s
# Warmup Iteration  10: 1669872.752 ops/s
# Warmup Iteration  11: 1670123.924 ops/s
# Warmup Iteration  12: 1669643.380 ops/s
# Warmup Iteration  13: 1666723.931 ops/s
# Warmup Iteration  14: 1670590.116 ops/s
# Warmup Iteration  15: 1669335.935 ops/s
# Warmup Iteration  16: 1671503.030 ops/s
# Warmup Iteration  17: 1673002.086 ops/s
# Warmup Iteration  18: 1670893.825 ops/s
# Warmup Iteration  19: 1676052.481 ops/s
# Warmup Iteration  20: 1669612.688 ops/s
# Warmup Iteration  21: 1669846.852 ops/s
# Warmup Iteration  22: 1669095.176 ops/s
# Warmup Iteration  23: 1671880.790 ops/s
# Warmup Iteration  24: 1672299.891 ops/s
# Warmup Iteration  25: 1673081.591 ops/s
# Warmup Iteration  26: 1671069.945 ops/s
# Warmup Iteration  27: 1671373.495 ops/s
# Warmup Iteration  28: 1671330.590 ops/s
# Warmup Iteration  29: 1673455.767 ops/s
# Warmup Iteration  30: 1671981.972 ops/s
Iteration   1: 1670737.259 ops/s
Iteration   2: 1670933.570 ops/s
Iteration   3: 1672244.586 ops/s
Iteration   4: 1667903.939 ops/s
Iteration   5: 1678804.363 ops/s
Iteration   6: 1673744.707 ops/s
Iteration   7: 1669433.820 ops/s
Iteration   8: 1671992.235 ops/s
Iteration   9: 1664812.854 ops/s
Iteration  10: 1675449.466 ops/s
Iteration  11: 1676546.163 ops/s
Iteration  12: 1674343.727 ops/s
Iteration  13: 1663052.805 ops/s
Iteration  14: 1674001.262 ops/s
Iteration  15: 1670538.346 ops/s
Iteration  16: 1669222.210 ops/s
Iteration  17: 1674089.286 ops/s
Iteration  18: 1666194.603 ops/s
Iteration  19: 1673978.148 ops/s
Iteration  20: 1671769.675 ops/s
Iteration  21: 1679051.937 ops/s
Iteration  22: 1666642.421 ops/s
Iteration  23: 1674309.670 ops/s
Iteration  24: 1672003.057 ops/s
Iteration  25: 1671875.233 ops/s
Iteration  26: 1674400.315 ops/s
Iteration  27: 1673732.498 ops/s
Iteration  28: 1671002.093 ops/s
Iteration  29: 1668070.805 ops/s
Iteration  30: 1670796.731 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1671722.593 ±(99.9%) 2509.917 ops/s [Average]
  (min, avg, max) = (1663052.805, 1671722.593, 1679051.937), stdev = 3756.726
  CI (99.9%): [1669212.676, 1674232.510] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1671722.593 ± 2509.917  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888927.898 ops/s
# Warmup Iteration   2: 2582194.552 ops/s
# Warmup Iteration   3: 2918472.153 ops/s
# Warmup Iteration   4: 2828576.419 ops/s
# Warmup Iteration   5: 2515558.569 ops/s
# Warmup Iteration   6: 2938057.442 ops/s
# Warmup Iteration   7: 2936815.278 ops/s
# Warmup Iteration   8: 2920244.663 ops/s
# Warmup Iteration   9: 2935345.069 ops/s
# Warmup Iteration  10: 2933260.680 ops/s
# Warmup Iteration  11: 2933259.521 ops/s
# Warmup Iteration  12: 2931633.584 ops/s
# Warmup Iteration  13: 2923751.152 ops/s
# Warmup Iteration  14: 2924849.836 ops/s
# Warmup Iteration  15: 2937670.694 ops/s
# Warmup Iteration  16: 2924344.590 ops/s
# Warmup Iteration  17: 2936813.753 ops/s
# Warmup Iteration  18: 2929168.436 ops/s
# Warmup Iteration  19: 2928828.150 ops/s
# Warmup Iteration  20: 2939270.842 ops/s
# Warmup Iteration  21: 2933475.726 ops/s
# Warmup Iteration  22: 2930239.754 ops/s
# Warmup Iteration  23: 2937770.812 ops/s
# Warmup Iteration  24: 2932556.152 ops/s
# Warmup Iteration  25: 2934926.331 ops/s
# Warmup Iteration  26: 2927074.564 ops/s
# Warmup Iteration  27: 2938252.691 ops/s
# Warmup Iteration  28: 2932293.900 ops/s
# Warmup Iteration  29: 2931836.851 ops/s
# Warmup Iteration  30: 2940079.737 ops/s
Iteration   1: 2930828.626 ops/s
Iteration   2: 2935789.180 ops/s
Iteration   3: 2927998.678 ops/s
Iteration   4: 2929704.964 ops/s
Iteration   5: 2934581.337 ops/s
Iteration   6: 2934502.611 ops/s
Iteration   7: 2934283.944 ops/s
Iteration   8: 2923716.506 ops/s
Iteration   9: 2939604.226 ops/s
Iteration  10: 2920476.915 ops/s
Iteration  11: 2933000.700 ops/s
Iteration  12: 2937168.692 ops/s
Iteration  13: 2934338.963 ops/s
Iteration  14: 2928027.752 ops/s
Iteration  15: 2924811.953 ops/s
Iteration  16: 2928246.452 ops/s
Iteration  17: 2937022.636 ops/s
Iteration  18: 2933565.807 ops/s
Iteration  19: 2929956.799 ops/s
Iteration  20: 2934700.552 ops/s
Iteration  21: 2939106.573 ops/s
Iteration  22: 2935952.726 ops/s
Iteration  23: 2935074.320 ops/s
Iteration  24: 2940963.789 ops/s
Iteration  25: 2934123.608 ops/s
Iteration  26: 2929945.110 ops/s
Iteration  27: 2936574.002 ops/s
Iteration  28: 2927543.002 ops/s
Iteration  29: 2928661.984 ops/s
Iteration  30: 2937257.772 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOccurrences":
  2932584.339 ±(99.9%) 3287.693 ops/s [Average]
  (min, avg, max) = (2920476.915, 2932584.339, 2940963.789), stdev = 4920.864
  CI (99.9%): [2929296.647, 2935872.032] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_detectWithOccurrences  thrpt   30  2932584.339 ± 3287.693  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 289493.584 ops/s
# Warmup Iteration   2: 343516.623 ops/s
# Warmup Iteration   3: 449551.629 ops/s
# Warmup Iteration   4: 450395.876 ops/s
# Warmup Iteration   5: 447611.294 ops/s
# Warmup Iteration   6: 449700.436 ops/s
# Warmup Iteration   7: 450495.616 ops/s
# Warmup Iteration   8: 449464.854 ops/s
# Warmup Iteration   9: 430740.116 ops/s
# Warmup Iteration  10: 390948.039 ops/s
# Warmup Iteration  11: 450190.258 ops/s
# Warmup Iteration  12: 449765.174 ops/s
# Warmup Iteration  13: 449105.170 ops/s
# Warmup Iteration  14: 451299.988 ops/s
# Warmup Iteration  15: 451193.479 ops/s
# Warmup Iteration  16: 450370.482 ops/s
# Warmup Iteration  17: 462996.529 ops/s
# Warmup Iteration  18: 462233.969 ops/s
# Warmup Iteration  19: 463366.976 ops/s
# Warmup Iteration  20: 461997.785 ops/s
# Warmup Iteration  21: 461627.859 ops/s
# Warmup Iteration  22: 462067.269 ops/s
# Warmup Iteration  23: 463339.225 ops/s
# Warmup Iteration  24: 462576.954 ops/s
# Warmup Iteration  25: 462658.383 ops/s
# Warmup Iteration  26: 462027.414 ops/s
# Warmup Iteration  27: 461894.169 ops/s
# Warmup Iteration  28: 461925.847 ops/s
# Warmup Iteration  29: 462468.318 ops/s
# Warmup Iteration  30: 463087.697 ops/s
Iteration   1: 462522.419 ops/s
Iteration   2: 460801.591 ops/s
Iteration   3: 459607.483 ops/s
Iteration   4: 463084.393 ops/s
Iteration   5: 461925.553 ops/s
Iteration   6: 462634.729 ops/s
Iteration   7: 462394.678 ops/s
Iteration   8: 462127.727 ops/s
Iteration   9: 462007.242 ops/s
Iteration  10: 463270.550 ops/s
Iteration  11: 462066.549 ops/s
Iteration  12: 461894.143 ops/s
Iteration  13: 463841.346 ops/s
Iteration  14: 462041.718 ops/s
Iteration  15: 461722.571 ops/s
Iteration  16: 461230.263 ops/s
Iteration  17: 460226.629 ops/s
Iteration  18: 463091.419 ops/s
Iteration  19: 461443.807 ops/s
Iteration  20: 462251.848 ops/s
Iteration  21: 464219.037 ops/s
Iteration  22: 461802.724 ops/s
Iteration  23: 462657.916 ops/s
Iteration  24: 461741.352 ops/s
Iteration  25: 462665.704 ops/s
Iteration  26: 463434.316 ops/s
Iteration  27: 463163.421 ops/s
Iteration  28: 462128.955 ops/s
Iteration  29: 463462.057 ops/s
Iteration  30: 463458.299 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_detectWithOptional":
  462297.348 ±(99.9%) 685.571 ops/s [Average]
  (min, avg, max) = (459607.483, 462297.348, 464219.037), stdev = 1026.131
  CI (99.9%): [461611.777, 462982.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_detectWithOptional  thrpt   30  462297.348 ± 685.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1111079.787 ops/s
# Warmup Iteration   2: 1685995.097 ops/s
# Warmup Iteration   3: 2051008.839 ops/s
# Warmup Iteration   4: 2045965.924 ops/s
# Warmup Iteration   5: 2053574.665 ops/s
# Warmup Iteration   6: 2056580.777 ops/s
# Warmup Iteration   7: 1682504.840 ops/s
# Warmup Iteration   8: 2059741.506 ops/s
# Warmup Iteration   9: 2062148.345 ops/s
# Warmup Iteration  10: 2059315.226 ops/s
# Warmup Iteration  11: 2062333.059 ops/s
# Warmup Iteration  12: 2056298.754 ops/s
# Warmup Iteration  13: 2059677.220 ops/s
# Warmup Iteration  14: 2058528.374 ops/s
# Warmup Iteration  15: 2061024.160 ops/s
# Warmup Iteration  16: 2052597.469 ops/s
# Warmup Iteration  17: 2055842.819 ops/s
# Warmup Iteration  18: 2061504.572 ops/s
# Warmup Iteration  19: 2059188.891 ops/s
# Warmup Iteration  20: 2059835.595 ops/s
# Warmup Iteration  21: 2058781.979 ops/s
# Warmup Iteration  22: 2061149.682 ops/s
# Warmup Iteration  23: 2060144.597 ops/s
# Warmup Iteration  24: 2058015.103 ops/s
# Warmup Iteration  25: 2063240.019 ops/s
# Warmup Iteration  26: 2054501.975 ops/s
# Warmup Iteration  27: 2059265.301 ops/s
# Warmup Iteration  28: 2056178.358 ops/s
# Warmup Iteration  29: 2060143.787 ops/s
# Warmup Iteration  30: 2059760.759 ops/s
Iteration   1: 2059981.114 ops/s
Iteration   2: 2063769.395 ops/s
Iteration   3: 2059766.256 ops/s
Iteration   4: 2060917.068 ops/s
Iteration   5: 2055747.274 ops/s
Iteration   6: 2058815.684 ops/s
Iteration   7: 2059638.270 ops/s
Iteration   8: 2055749.249 ops/s
Iteration   9: 2064405.867 ops/s
Iteration  10: 2060995.715 ops/s
Iteration  11: 2060757.414 ops/s
Iteration  12: 2056979.332 ops/s
Iteration  13: 2060361.679 ops/s
Iteration  14: 2059625.972 ops/s
Iteration  15: 2067334.717 ops/s
Iteration  16: 2054757.720 ops/s
Iteration  17: 2065428.974 ops/s
Iteration  18: 2055813.728 ops/s
Iteration  19: 2063872.430 ops/s
Iteration  20: 2062637.918 ops/s
Iteration  21: 2063535.105 ops/s
Iteration  22: 2058552.183 ops/s
Iteration  23: 2064131.462 ops/s
Iteration  24: 2055471.288 ops/s
Iteration  25: 2062345.898 ops/s
Iteration  26: 2058974.444 ops/s
Iteration  27: 2053000.520 ops/s
Iteration  28: 2059339.733 ops/s
Iteration  29: 2056392.013 ops/s
Iteration  30: 2063522.468 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_distinctView":
  2060087.363 ±(99.9%) 2375.937 ops/s [Average]
  (min, avg, max) = (2053000.520, 2060087.363, 2067334.717), stdev = 3556.191
  CI (99.9%): [2057711.426, 2062463.300] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_distinctView  thrpt   30  2060087.363 ± 2375.937  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8083783.323 ops/s
# Warmup Iteration   2: 13287607.414 ops/s
# Warmup Iteration   3: 15728164.434 ops/s
# Warmup Iteration   4: 15680871.025 ops/s
# Warmup Iteration   5: 15692605.388 ops/s
# Warmup Iteration   6: 15689678.693 ops/s
# Warmup Iteration   7: 15781863.952 ops/s
# Warmup Iteration   8: 15724899.930 ops/s
# Warmup Iteration   9: 15705240.638 ops/s
# Warmup Iteration  10: 15721982.686 ops/s
# Warmup Iteration  11: 15678975.232 ops/s
# Warmup Iteration  12: 15682783.377 ops/s
# Warmup Iteration  13: 15765973.766 ops/s
# Warmup Iteration  14: 15744694.078 ops/s
# Warmup Iteration  15: 15704065.698 ops/s
# Warmup Iteration  16: 15736350.366 ops/s
# Warmup Iteration  17: 15758983.171 ops/s
# Warmup Iteration  18: 15720381.257 ops/s
# Warmup Iteration  19: 15697792.935 ops/s
# Warmup Iteration  20: 15560100.061 ops/s
# Warmup Iteration  21: 15737951.569 ops/s
# Warmup Iteration  22: 15712748.742 ops/s
# Warmup Iteration  23: 15681904.908 ops/s
# Warmup Iteration  24: 15650230.375 ops/s
# Warmup Iteration  25: 15672432.774 ops/s
# Warmup Iteration  26: 15619592.758 ops/s
# Warmup Iteration  27: 15645012.029 ops/s
# Warmup Iteration  28: 15700178.062 ops/s
# Warmup Iteration  29: 15684190.517 ops/s
# Warmup Iteration  30: 15596524.539 ops/s
Iteration   1: 15595730.848 ops/s
Iteration   2: 15681204.255 ops/s
Iteration   3: 15599957.959 ops/s
Iteration   4: 15677390.063 ops/s
Iteration   5: 15602424.657 ops/s
Iteration   6: 15589704.556 ops/s
Iteration   7: 15695715.640 ops/s
Iteration   8: 15651334.131 ops/s
Iteration   9: 15687749.941 ops/s
Iteration  10: 15655288.765 ops/s
Iteration  11: 15573895.206 ops/s
Iteration  12: 15649787.663 ops/s
Iteration  13: 15724953.903 ops/s
Iteration  14: 15683561.280 ops/s
Iteration  15: 15719440.692 ops/s
Iteration  16: 15715971.645 ops/s
Iteration  17: 15668248.432 ops/s
Iteration  18: 15672569.908 ops/s
Iteration  19: 15690731.290 ops/s
Iteration  20: 15714518.431 ops/s
Iteration  21: 15772065.790 ops/s
Iteration  22: 15542569.239 ops/s
Iteration  23: 15668071.324 ops/s
Iteration  24: 15631008.203 ops/s
Iteration  25: 15753651.329 ops/s
Iteration  26: 15633422.180 ops/s
Iteration  27: 15759604.182 ops/s
Iteration  28: 15747562.772 ops/s
Iteration  29: 15645046.171 ops/s
Iteration  30: 15728414.458 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_empty":
  15671053.164 ±(99.9%) 38748.700 ops/s [Average]
  (min, avg, max) = (15542569.239, 15671053.164, 15772065.790), stdev = 57997.235
  CI (99.9%): [15632304.463, 15709801.864] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_empty  thrpt   30  15671053.164 ± 38748.700  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 166080.508 ops/s
# Warmup Iteration   2: 293928.336 ops/s
# Warmup Iteration   3: 334978.398 ops/s
# Warmup Iteration   4: 335325.265 ops/s
# Warmup Iteration   5: 335920.423 ops/s
# Warmup Iteration   6: 276299.219 ops/s
# Warmup Iteration   7: 336344.446 ops/s
# Warmup Iteration   8: 336882.969 ops/s
# Warmup Iteration   9: 337057.592 ops/s
# Warmup Iteration  10: 336237.506 ops/s
# Warmup Iteration  11: 336783.772 ops/s
# Warmup Iteration  12: 336001.879 ops/s
# Warmup Iteration  13: 336133.793 ops/s
# Warmup Iteration  14: 336599.520 ops/s
# Warmup Iteration  15: 335657.446 ops/s
# Warmup Iteration  16: 336335.403 ops/s
# Warmup Iteration  17: 336249.937 ops/s
# Warmup Iteration  18: 336580.947 ops/s
# Warmup Iteration  19: 337112.150 ops/s
# Warmup Iteration  20: 336866.359 ops/s
# Warmup Iteration  21: 337403.313 ops/s
# Warmup Iteration  22: 336714.431 ops/s
# Warmup Iteration  23: 336464.872 ops/s
# Warmup Iteration  24: 336628.274 ops/s
# Warmup Iteration  25: 335634.710 ops/s
# Warmup Iteration  26: 337294.159 ops/s
# Warmup Iteration  27: 336582.682 ops/s
# Warmup Iteration  28: 336595.627 ops/s
# Warmup Iteration  29: 335773.016 ops/s
# Warmup Iteration  30: 336609.255 ops/s
Iteration   1: 336768.079 ops/s
Iteration   2: 337416.765 ops/s
Iteration   3: 336570.381 ops/s
Iteration   4: 335914.293 ops/s
Iteration   5: 336865.921 ops/s
Iteration   6: 336406.711 ops/s
Iteration   7: 337482.963 ops/s
Iteration   8: 337161.622 ops/s
Iteration   9: 335819.149 ops/s
Iteration  10: 335186.688 ops/s
Iteration  11: 336584.840 ops/s
Iteration  12: 336318.087 ops/s
Iteration  13: 335753.254 ops/s
Iteration  14: 336651.517 ops/s
Iteration  15: 337399.184 ops/s
Iteration  16: 335670.139 ops/s
Iteration  17: 336745.835 ops/s
Iteration  18: 336626.021 ops/s
Iteration  19: 336256.167 ops/s
Iteration  20: 335095.520 ops/s
Iteration  21: 336904.478 ops/s
Iteration  22: 335397.267 ops/s
Iteration  23: 336868.648 ops/s
Iteration  24: 337113.014 ops/s
Iteration  25: 336601.011 ops/s
Iteration  26: 334869.722 ops/s
Iteration  27: 337440.778 ops/s
Iteration  28: 336636.497 ops/s
Iteration  29: 336008.876 ops/s
Iteration  30: 337226.996 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_equalsAndHashCode":
  336458.681 ±(99.9%) 486.918 ops/s [Average]
  (min, avg, max) = (334869.722, 336458.681, 337482.963), stdev = 728.796
  CI (99.9%): [335971.762, 336945.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  336458.681 ± 486.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 435607.278 ops/s
# Warmup Iteration   2: 946624.481 ops/s
# Warmup Iteration   3: 1015239.823 ops/s
# Warmup Iteration   4: 1017529.658 ops/s
# Warmup Iteration   5: 848489.229 ops/s
# Warmup Iteration   6: 1019728.368 ops/s
# Warmup Iteration   7: 1024406.927 ops/s
# Warmup Iteration   8: 1021863.430 ops/s
# Warmup Iteration   9: 1021224.552 ops/s
# Warmup Iteration  10: 1021556.204 ops/s
# Warmup Iteration  11: 1024555.492 ops/s
# Warmup Iteration  12: 1020970.707 ops/s
# Warmup Iteration  13: 1019427.867 ops/s
# Warmup Iteration  14: 1024922.721 ops/s
# Warmup Iteration  15: 1023281.699 ops/s
# Warmup Iteration  16: 1020658.833 ops/s
# Warmup Iteration  17: 1022564.537 ops/s
# Warmup Iteration  18: 1020219.622 ops/s
# Warmup Iteration  19: 1025565.960 ops/s
# Warmup Iteration  20: 1018766.761 ops/s
# Warmup Iteration  21: 1023270.053 ops/s
# Warmup Iteration  22: 1023486.378 ops/s
# Warmup Iteration  23: 1020784.275 ops/s
# Warmup Iteration  24: 1027687.389 ops/s
# Warmup Iteration  25: 1025201.295 ops/s
# Warmup Iteration  26: 1020407.556 ops/s
# Warmup Iteration  27: 1017880.260 ops/s
# Warmup Iteration  28: 1022019.871 ops/s
# Warmup Iteration  29: 1021287.146 ops/s
# Warmup Iteration  30: 1023222.161 ops/s
Iteration   1: 1022563.475 ops/s
Iteration   2: 1022103.970 ops/s
Iteration   3: 1018937.984 ops/s
Iteration   4: 1020628.700 ops/s
Iteration   5: 1023256.464 ops/s
Iteration   6: 1020389.928 ops/s
Iteration   7: 1025860.180 ops/s
Iteration   8: 1025120.264 ops/s
Iteration   9: 1026030.481 ops/s
Iteration  10: 1019831.356 ops/s
Iteration  11: 1025754.782 ops/s
Iteration  12: 1021431.986 ops/s
Iteration  13: 1023822.905 ops/s
Iteration  14: 1022863.485 ops/s
Iteration  15: 1026855.241 ops/s
Iteration  16: 1023163.340 ops/s
Iteration  17: 1021891.255 ops/s
Iteration  18: 1019791.370 ops/s
Iteration  19: 1018697.716 ops/s
Iteration  20: 1023508.664 ops/s
Iteration  21: 1019784.989 ops/s
Iteration  22: 1029430.226 ops/s
Iteration  23: 1020564.775 ops/s
Iteration  24: 1020185.771 ops/s
Iteration  25: 1025920.906 ops/s
Iteration  26: 1017518.363 ops/s
Iteration  27: 1021690.001 ops/s
Iteration  28: 1024545.645 ops/s
Iteration  29: 1018493.476 ops/s
Iteration  30: 1020097.720 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollect":
  1022357.847 ±(99.9%) 1931.606 ops/s [Average]
  (min, avg, max) = (1017518.363, 1022357.847, 1029430.226), stdev = 2891.137
  CI (99.9%): [1020426.241, 1024289.453] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollect  thrpt   30  1022357.847 ± 1931.606  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1952548.599 ops/s
# Warmup Iteration   2: 4964314.882 ops/s
# Warmup Iteration   3: 4281076.491 ops/s
# Warmup Iteration   4: 4803715.014 ops/s
# Warmup Iteration   5: 4971805.784 ops/s
# Warmup Iteration   6: 4976532.569 ops/s
# Warmup Iteration   7: 4978902.785 ops/s
# Warmup Iteration   8: 4980450.481 ops/s
# Warmup Iteration   9: 4974421.944 ops/s
# Warmup Iteration  10: 4979115.421 ops/s
# Warmup Iteration  11: 4974103.775 ops/s
# Warmup Iteration  12: 4972960.565 ops/s
# Warmup Iteration  13: 4974051.827 ops/s
# Warmup Iteration  14: 4955957.422 ops/s
# Warmup Iteration  15: 4979112.783 ops/s
# Warmup Iteration  16: 4969543.873 ops/s
# Warmup Iteration  17: 4970468.141 ops/s
# Warmup Iteration  18: 4981940.378 ops/s
# Warmup Iteration  19: 4987874.995 ops/s
# Warmup Iteration  20: 4980987.457 ops/s
# Warmup Iteration  21: 4977911.951 ops/s
# Warmup Iteration  22: 4970921.068 ops/s
# Warmup Iteration  23: 4981175.089 ops/s
# Warmup Iteration  24: 4955621.301 ops/s
# Warmup Iteration  25: 4990163.297 ops/s
# Warmup Iteration  26: 4975151.622 ops/s
# Warmup Iteration  27: 4971047.009 ops/s
# Warmup Iteration  28: 4985156.368 ops/s
# Warmup Iteration  29: 4986034.056 ops/s
# Warmup Iteration  30: 4976226.973 ops/s
Iteration   1: 4954327.297 ops/s
Iteration   2: 4981301.295 ops/s
Iteration   3: 4988308.005 ops/s
Iteration   4: 4955911.616 ops/s
Iteration   5: 4987990.111 ops/s
Iteration   6: 4985323.769 ops/s
Iteration   7: 4982885.472 ops/s
Iteration   8: 4962262.792 ops/s
Iteration   9: 4976051.574 ops/s
Iteration  10: 4979876.734 ops/s
Iteration  11: 4976921.365 ops/s
Iteration  12: 4947482.886 ops/s
Iteration  13: 4986911.919 ops/s
Iteration  14: 4968332.797 ops/s
Iteration  15: 4981302.459 ops/s
Iteration  16: 5000158.336 ops/s
Iteration  17: 4953119.761 ops/s
Iteration  18: 4987435.264 ops/s
Iteration  19: 4971120.836 ops/s
Iteration  20: 4991258.940 ops/s
Iteration  21: 4964920.080 ops/s
Iteration  22: 4957787.749 ops/s
Iteration  23: 4947005.801 ops/s
Iteration  24: 4991117.663 ops/s
Iteration  25: 4983484.107 ops/s
Iteration  26: 4955694.456 ops/s
Iteration  27: 4970358.788 ops/s
Iteration  28: 4972565.838 ops/s
Iteration  29: 4955591.984 ops/s
Iteration  30: 4988446.811 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectBoolean":
  4973508.550 ±(99.9%) 9979.416 ops/s [Average]
  (min, avg, max) = (4947005.801, 4973508.550, 5000158.336), stdev = 14936.722
  CI (99.9%): [4963529.134, 4983487.967] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  4973508.550 ± 9979.416  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 713062.961 ops/s
# Warmup Iteration   2: 1167128.286 ops/s
# Warmup Iteration   3: 1375661.378 ops/s
# Warmup Iteration   4: 1383780.992 ops/s
# Warmup Iteration   5: 1385201.417 ops/s
# Warmup Iteration   6: 1265597.742 ops/s
# Warmup Iteration   7: 1267259.028 ops/s
# Warmup Iteration   8: 1384192.932 ops/s
# Warmup Iteration   9: 1384614.058 ops/s
# Warmup Iteration  10: 1383900.677 ops/s
# Warmup Iteration  11: 1384672.947 ops/s
# Warmup Iteration  12: 1382709.982 ops/s
# Warmup Iteration  13: 1386533.304 ops/s
# Warmup Iteration  14: 1385820.108 ops/s
# Warmup Iteration  15: 1383906.967 ops/s
# Warmup Iteration  16: 1386590.529 ops/s
# Warmup Iteration  17: 1384858.569 ops/s
# Warmup Iteration  18: 1382995.125 ops/s
# Warmup Iteration  19: 1383266.562 ops/s
# Warmup Iteration  20: 1386190.467 ops/s
# Warmup Iteration  21: 1383376.498 ops/s
# Warmup Iteration  22: 1384787.784 ops/s
# Warmup Iteration  23: 1388542.118 ops/s
# Warmup Iteration  24: 1384431.621 ops/s
# Warmup Iteration  25: 1382554.529 ops/s
# Warmup Iteration  26: 1382413.575 ops/s
# Warmup Iteration  27: 1387140.729 ops/s
# Warmup Iteration  28: 1383394.165 ops/s
# Warmup Iteration  29: 1384961.534 ops/s
# Warmup Iteration  30: 1381108.421 ops/s
Iteration   1: 1386839.480 ops/s
Iteration   2: 1377953.687 ops/s
Iteration   3: 1389561.285 ops/s
Iteration   4: 1381165.796 ops/s
Iteration   5: 1383837.302 ops/s
Iteration   6: 1382335.220 ops/s
Iteration   7: 1391379.411 ops/s
Iteration   8: 1383382.940 ops/s
Iteration   9: 1384981.143 ops/s
Iteration  10: 1384818.851 ops/s
Iteration  11: 1383647.457 ops/s
Iteration  12: 1384142.606 ops/s
Iteration  13: 1390150.708 ops/s
Iteration  14: 1383814.440 ops/s
Iteration  15: 1385953.343 ops/s
Iteration  16: 1384678.549 ops/s
Iteration  17: 1387300.445 ops/s
Iteration  18: 1384918.780 ops/s
Iteration  19: 1383235.695 ops/s
Iteration  20: 1381759.574 ops/s
Iteration  21: 1382451.326 ops/s
Iteration  22: 1380887.121 ops/s
Iteration  23: 1382928.453 ops/s
Iteration  24: 1384021.166 ops/s
Iteration  25: 1384180.572 ops/s
Iteration  26: 1385812.932 ops/s
Iteration  27: 1385373.870 ops/s
Iteration  28: 1380009.992 ops/s
Iteration  29: 1386934.972 ops/s
Iteration  30: 1386077.855 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectByte":
  1384484.499 ±(99.9%) 1932.911 ops/s [Average]
  (min, avg, max) = (1377953.687, 1384484.499, 1391379.411), stdev = 2893.090
  CI (99.9%): [1382551.588, 1386417.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1384484.499 ± 1932.911  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 827421.325 ops/s
# Warmup Iteration   2: 2127650.436 ops/s
# Warmup Iteration   3: 2141691.226 ops/s
# Warmup Iteration   4: 1789559.903 ops/s
# Warmup Iteration   5: 2146121.029 ops/s
# Warmup Iteration   6: 2145128.216 ops/s
# Warmup Iteration   7: 2142517.606 ops/s
# Warmup Iteration   8: 2146666.775 ops/s
# Warmup Iteration   9: 2141382.483 ops/s
# Warmup Iteration  10: 2143009.837 ops/s
# Warmup Iteration  11: 2146225.503 ops/s
# Warmup Iteration  12: 2140810.696 ops/s
# Warmup Iteration  13: 2139501.999 ops/s
# Warmup Iteration  14: 2142531.820 ops/s
# Warmup Iteration  15: 2155684.420 ops/s
# Warmup Iteration  16: 2150997.312 ops/s
# Warmup Iteration  17: 2145384.881 ops/s
# Warmup Iteration  18: 2147906.048 ops/s
# Warmup Iteration  19: 2145279.244 ops/s
# Warmup Iteration  20: 2145556.625 ops/s
# Warmup Iteration  21: 2150593.364 ops/s
# Warmup Iteration  22: 2148528.043 ops/s
# Warmup Iteration  23: 2148259.048 ops/s
# Warmup Iteration  24: 2145824.243 ops/s
# Warmup Iteration  25: 2147431.629 ops/s
# Warmup Iteration  26: 2149247.943 ops/s
# Warmup Iteration  27: 2150039.505 ops/s
# Warmup Iteration  28: 2150869.249 ops/s
# Warmup Iteration  29: 2146148.191 ops/s
# Warmup Iteration  30: 2151828.300 ops/s
Iteration   1: 2150575.984 ops/s
Iteration   2: 2150485.731 ops/s
Iteration   3: 2150493.322 ops/s
Iteration   4: 2149713.259 ops/s
Iteration   5: 2153059.318 ops/s
Iteration   6: 2149766.345 ops/s
Iteration   7: 2144456.965 ops/s
Iteration   8: 2149006.962 ops/s
Iteration   9: 2159532.130 ops/s
Iteration  10: 2149389.650 ops/s
Iteration  11: 2144819.024 ops/s
Iteration  12: 2145014.756 ops/s
Iteration  13: 2153354.355 ops/s
Iteration  14: 2155308.079 ops/s
Iteration  15: 2154258.071 ops/s
Iteration  16: 2152017.674 ops/s
Iteration  17: 2143135.156 ops/s
Iteration  18: 2147608.446 ops/s
Iteration  19: 2159302.142 ops/s
Iteration  20: 2151011.187 ops/s
Iteration  21: 2151577.292 ops/s
Iteration  22: 2153752.149 ops/s
Iteration  23: 2148663.466 ops/s
Iteration  24: 2151889.817 ops/s
Iteration  25: 2148507.200 ops/s
Iteration  26: 2138326.139 ops/s
Iteration  27: 2153956.902 ops/s
Iteration  28: 2152143.834 ops/s
Iteration  29: 2151901.588 ops/s
Iteration  30: 2153410.662 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectChar":
  2150547.920 ±(99.9%) 2972.144 ops/s [Average]
  (min, avg, max) = (2138326.139, 2150547.920, 2159532.130), stdev = 4448.566
  CI (99.9%): [2147575.776, 2153520.064] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectChar  thrpt   30  2150547.920 ± 2972.144  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 409192.225 ops/s
# Warmup Iteration   2: 962701.916 ops/s
# Warmup Iteration   3: 1000604.185 ops/s
# Warmup Iteration   4: 831704.702 ops/s
# Warmup Iteration   5: 1003602.176 ops/s
# Warmup Iteration   6: 1000635.538 ops/s
# Warmup Iteration   7: 1001380.150 ops/s
# Warmup Iteration   8: 1002110.519 ops/s
# Warmup Iteration   9: 1002992.363 ops/s
# Warmup Iteration  10: 1002302.962 ops/s
# Warmup Iteration  11: 1001938.467 ops/s
# Warmup Iteration  12: 1001393.678 ops/s
# Warmup Iteration  13: 1000116.741 ops/s
# Warmup Iteration  14: 1000624.337 ops/s
# Warmup Iteration  15: 1001084.989 ops/s
# Warmup Iteration  16: 1002269.474 ops/s
# Warmup Iteration  17: 1000791.044 ops/s
# Warmup Iteration  18: 1000938.461 ops/s
# Warmup Iteration  19: 1000570.121 ops/s
# Warmup Iteration  20: 1003144.566 ops/s
# Warmup Iteration  21: 1003582.787 ops/s
# Warmup Iteration  22: 1002045.754 ops/s
# Warmup Iteration  23: 1002317.894 ops/s
# Warmup Iteration  24: 1002462.203 ops/s
# Warmup Iteration  25: 1005106.192 ops/s
# Warmup Iteration  26: 1001228.408 ops/s
# Warmup Iteration  27: 1002885.784 ops/s
# Warmup Iteration  28: 1005684.919 ops/s
# Warmup Iteration  29: 1004215.730 ops/s
# Warmup Iteration  30: 1003368.613 ops/s
Iteration   1: 1003274.742 ops/s
Iteration   2: 1001794.853 ops/s
Iteration   3: 1007823.198 ops/s
Iteration   4: 1005180.458 ops/s
Iteration   5: 1002043.292 ops/s
Iteration   6: 1003925.282 ops/s
Iteration   7: 1004547.701 ops/s
Iteration   8: 1005882.644 ops/s
Iteration   9: 1005113.521 ops/s
Iteration  10: 1005546.951 ops/s
Iteration  11: 1002688.581 ops/s
Iteration  12: 1002460.886 ops/s
Iteration  13: 1002957.803 ops/s
Iteration  14: 1002451.188 ops/s
Iteration  15: 1006369.966 ops/s
Iteration  16: 1002213.742 ops/s
Iteration  17: 1004233.038 ops/s
Iteration  18: 1003179.658 ops/s
Iteration  19: 1003832.088 ops/s
Iteration  20: 999879.076 ops/s
Iteration  21: 1005377.191 ops/s
Iteration  22: 1005584.333 ops/s
Iteration  23: 1004071.126 ops/s
Iteration  24: 1003985.012 ops/s
Iteration  25: 1002396.670 ops/s
Iteration  26: 1005414.233 ops/s
Iteration  27: 1001506.152 ops/s
Iteration  28: 1004896.308 ops/s
Iteration  29: 1004111.894 ops/s
Iteration  30: 1004859.326 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectDouble":
  1003920.031 ±(99.9%) 1132.968 ops/s [Average]
  (min, avg, max) = (999879.076, 1003920.031, 1007823.198), stdev = 1695.773
  CI (99.9%): [1002787.063, 1005052.998] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  1003920.031 ± 1132.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 698550.021 ops/s
# Warmup Iteration   2: 1565789.938 ops/s
# Warmup Iteration   3: 1646317.583 ops/s
# Warmup Iteration   4: 1618313.700 ops/s
# Warmup Iteration   5: 1417703.180 ops/s
# Warmup Iteration   6: 1662932.933 ops/s
# Warmup Iteration   7: 1657648.339 ops/s
# Warmup Iteration   8: 1659797.289 ops/s
# Warmup Iteration   9: 1659862.918 ops/s
# Warmup Iteration  10: 1659636.662 ops/s
# Warmup Iteration  11: 1656865.243 ops/s
# Warmup Iteration  12: 1659523.555 ops/s
# Warmup Iteration  13: 1663530.771 ops/s
# Warmup Iteration  14: 1657141.015 ops/s
# Warmup Iteration  15: 1659135.443 ops/s
# Warmup Iteration  16: 1657522.319 ops/s
# Warmup Iteration  17: 1657025.572 ops/s
# Warmup Iteration  18: 1660893.996 ops/s
# Warmup Iteration  19: 1660580.369 ops/s
# Warmup Iteration  20: 1660422.055 ops/s
# Warmup Iteration  21: 1660416.379 ops/s
# Warmup Iteration  22: 1660252.404 ops/s
# Warmup Iteration  23: 1659364.894 ops/s
# Warmup Iteration  24: 1659728.500 ops/s
# Warmup Iteration  25: 1665725.234 ops/s
# Warmup Iteration  26: 1661242.718 ops/s
# Warmup Iteration  27: 1662467.018 ops/s
# Warmup Iteration  28: 1662299.604 ops/s
# Warmup Iteration  29: 1665441.278 ops/s
# Warmup Iteration  30: 1662297.795 ops/s
Iteration   1: 1660436.289 ops/s
Iteration   2: 1657049.275 ops/s
Iteration   3: 1665119.861 ops/s
Iteration   4: 1658460.645 ops/s
Iteration   5: 1659272.915 ops/s
Iteration   6: 1658252.579 ops/s
Iteration   7: 1663582.687 ops/s
Iteration   8: 1659927.725 ops/s
Iteration   9: 1661084.927 ops/s
Iteration  10: 1660674.622 ops/s
Iteration  11: 1660104.637 ops/s
Iteration  12: 1663445.978 ops/s
Iteration  13: 1660383.091 ops/s
Iteration  14: 1656185.076 ops/s
Iteration  15: 1662216.778 ops/s
Iteration  16: 1655355.859 ops/s
Iteration  17: 1661156.583 ops/s
Iteration  18: 1664075.254 ops/s
Iteration  19: 1664983.660 ops/s
Iteration  20: 1660554.029 ops/s
Iteration  21: 1659565.562 ops/s
Iteration  22: 1657377.452 ops/s
Iteration  23: 1666201.542 ops/s
Iteration  24: 1659266.610 ops/s
Iteration  25: 1660253.586 ops/s
Iteration  26: 1665190.795 ops/s
Iteration  27: 1654802.680 ops/s
Iteration  28: 1663925.069 ops/s
Iteration  29: 1656622.623 ops/s
Iteration  30: 1659015.628 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectFloat":
  1660484.801 ±(99.9%) 2048.048 ops/s [Average]
  (min, avg, max) = (1654802.680, 1660484.801, 1666201.542), stdev = 3065.422
  CI (99.9%): [1658436.753, 1662532.848] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1660484.801 ± 2048.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 874798.129 ops/s
# Warmup Iteration   2: 2405263.170 ops/s
# Warmup Iteration   3: 2409990.142 ops/s
# Warmup Iteration   4: 1999958.981 ops/s
# Warmup Iteration   5: 2424289.941 ops/s
# Warmup Iteration   6: 2415927.110 ops/s
# Warmup Iteration   7: 2415870.227 ops/s
# Warmup Iteration   8: 2405498.992 ops/s
# Warmup Iteration   9: 2422497.172 ops/s
# Warmup Iteration  10: 2422649.203 ops/s
# Warmup Iteration  11: 2425520.315 ops/s
# Warmup Iteration  12: 2420753.174 ops/s
# Warmup Iteration  13: 2424443.691 ops/s
# Warmup Iteration  14: 2418475.268 ops/s
# Warmup Iteration  15: 2424025.216 ops/s
# Warmup Iteration  16: 2412899.686 ops/s
# Warmup Iteration  17: 2403147.062 ops/s
# Warmup Iteration  18: 2411666.278 ops/s
# Warmup Iteration  19: 2415545.539 ops/s
# Warmup Iteration  20: 2417905.520 ops/s
# Warmup Iteration  21: 2401890.973 ops/s
# Warmup Iteration  22: 2412571.402 ops/s
# Warmup Iteration  23: 2417882.184 ops/s
# Warmup Iteration  24: 2419270.200 ops/s
# Warmup Iteration  25: 2420152.782 ops/s
# Warmup Iteration  26: 2414459.231 ops/s
# Warmup Iteration  27: 2417607.795 ops/s
# Warmup Iteration  28: 2417336.689 ops/s
# Warmup Iteration  29: 2414919.977 ops/s
# Warmup Iteration  30: 2419267.480 ops/s
Iteration   1: 2418724.277 ops/s
Iteration   2: 2421204.425 ops/s
Iteration   3: 2424079.959 ops/s
Iteration   4: 2417146.069 ops/s
Iteration   5: 2418569.661 ops/s
Iteration   6: 2416188.610 ops/s
Iteration   7: 2420627.790 ops/s
Iteration   8: 2423026.198 ops/s
Iteration   9: 2420145.970 ops/s
Iteration  10: 2423464.131 ops/s
Iteration  11: 2426301.379 ops/s
Iteration  12: 2425350.444 ops/s
Iteration  13: 2426217.929 ops/s
Iteration  14: 2419411.482 ops/s
Iteration  15: 2419519.726 ops/s
Iteration  16: 2418779.569 ops/s
Iteration  17: 2415819.318 ops/s
Iteration  18: 2425361.503 ops/s
Iteration  19: 2418619.585 ops/s
Iteration  20: 2416028.610 ops/s
Iteration  21: 2424628.323 ops/s
Iteration  22: 2422605.632 ops/s
Iteration  23: 2421888.025 ops/s
Iteration  24: 2421937.832 ops/s
Iteration  25: 2428606.845 ops/s
Iteration  26: 2427620.292 ops/s
Iteration  27: 2424184.990 ops/s
Iteration  28: 2412504.661 ops/s
Iteration  29: 2422682.135 ops/s
Iteration  30: 2405879.480 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectInt":
  2420904.162 ±(99.9%) 3193.111 ops/s [Average]
  (min, avg, max) = (2405879.480, 2420904.162, 2428606.845), stdev = 4779.299
  CI (99.9%): [2417711.050, 2424097.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2420904.162 ± 3193.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 797884.650 ops/s
# Warmup Iteration   2: 2070291.150 ops/s
# Warmup Iteration   3: 1726647.744 ops/s
# Warmup Iteration   4: 2073538.403 ops/s
# Warmup Iteration   5: 2082410.077 ops/s
# Warmup Iteration   6: 2068614.760 ops/s
# Warmup Iteration   7: 2072603.141 ops/s
# Warmup Iteration   8: 2083365.098 ops/s
# Warmup Iteration   9: 2075922.501 ops/s
# Warmup Iteration  10: 2069692.373 ops/s
# Warmup Iteration  11: 2072714.994 ops/s
# Warmup Iteration  12: 2075806.129 ops/s
# Warmup Iteration  13: 2075789.901 ops/s
# Warmup Iteration  14: 2068845.191 ops/s
# Warmup Iteration  15: 2075550.857 ops/s
# Warmup Iteration  16: 2076466.377 ops/s
# Warmup Iteration  17: 2083473.658 ops/s
# Warmup Iteration  18: 2075806.568 ops/s
# Warmup Iteration  19: 2076171.049 ops/s
# Warmup Iteration  20: 2078897.315 ops/s
# Warmup Iteration  21: 2079020.969 ops/s
# Warmup Iteration  22: 2076643.469 ops/s
# Warmup Iteration  23: 2078955.914 ops/s
# Warmup Iteration  24: 2083062.747 ops/s
# Warmup Iteration  25: 2078358.802 ops/s
# Warmup Iteration  26: 2079436.067 ops/s
# Warmup Iteration  27: 2078369.372 ops/s
# Warmup Iteration  28: 2079226.977 ops/s
# Warmup Iteration  29: 2079795.287 ops/s
# Warmup Iteration  30: 2072190.238 ops/s
Iteration   1: 2081261.315 ops/s
Iteration   2: 2078870.786 ops/s
Iteration   3: 2080548.846 ops/s
Iteration   4: 2075658.998 ops/s
Iteration   5: 2079276.960 ops/s
Iteration   6: 2076865.312 ops/s
Iteration   7: 2088760.569 ops/s
Iteration   8: 2077374.449 ops/s
Iteration   9: 2077332.919 ops/s
Iteration  10: 2076727.689 ops/s
Iteration  11: 2083253.907 ops/s
Iteration  12: 2071930.267 ops/s
Iteration  13: 2084274.781 ops/s
Iteration  14: 2076128.912 ops/s
Iteration  15: 2084178.925 ops/s
Iteration  16: 2074202.629 ops/s
Iteration  17: 2082713.886 ops/s
Iteration  18: 2085680.523 ops/s
Iteration  19: 2074321.965 ops/s
Iteration  20: 2065136.481 ops/s
Iteration  21: 2079328.119 ops/s
Iteration  22: 2073615.409 ops/s
Iteration  23: 2073390.276 ops/s
Iteration  24: 2075504.875 ops/s
Iteration  25: 2075633.739 ops/s
Iteration  26: 2074304.513 ops/s
Iteration  27: 2075561.273 ops/s
Iteration  28: 2074477.226 ops/s
Iteration  29: 2077168.842 ops/s
Iteration  30: 2079679.260 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectLong":
  2077772.122 ±(99.9%) 3169.603 ops/s [Average]
  (min, avg, max) = (2065136.481, 2077772.122, 2088760.569), stdev = 4744.113
  CI (99.9%): [2074602.519, 2080941.725] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectLong  thrpt   30  2077772.122 ± 3169.603  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902262.724 ops/s
# Warmup Iteration   2: 2365700.007 ops/s
# Warmup Iteration   3: 2390974.226 ops/s
# Warmup Iteration   4: 1992496.697 ops/s
# Warmup Iteration   5: 2397530.652 ops/s
# Warmup Iteration   6: 2400493.425 ops/s
# Warmup Iteration   7: 2407539.020 ops/s
# Warmup Iteration   8: 2401250.825 ops/s
# Warmup Iteration   9: 2406268.781 ops/s
# Warmup Iteration  10: 2398158.639 ops/s
# Warmup Iteration  11: 2400993.775 ops/s
# Warmup Iteration  12: 2405087.243 ops/s
# Warmup Iteration  13: 2402750.468 ops/s
# Warmup Iteration  14: 2404795.305 ops/s
# Warmup Iteration  15: 2401577.906 ops/s
# Warmup Iteration  16: 2402178.214 ops/s
# Warmup Iteration  17: 2405912.691 ops/s
# Warmup Iteration  18: 2399276.639 ops/s
# Warmup Iteration  19: 2392080.584 ops/s
# Warmup Iteration  20: 2402448.773 ops/s
# Warmup Iteration  21: 2403395.743 ops/s
# Warmup Iteration  22: 2395108.621 ops/s
# Warmup Iteration  23: 2402394.662 ops/s
# Warmup Iteration  24: 2397154.360 ops/s
# Warmup Iteration  25: 2404382.915 ops/s
# Warmup Iteration  26: 2403284.701 ops/s
# Warmup Iteration  27: 2402990.055 ops/s
# Warmup Iteration  28: 2398820.303 ops/s
# Warmup Iteration  29: 2401742.916 ops/s
# Warmup Iteration  30: 2402744.047 ops/s
Iteration   1: 2388238.270 ops/s
Iteration   2: 2400363.723 ops/s
Iteration   3: 2401446.778 ops/s
Iteration   4: 2400490.674 ops/s
Iteration   5: 2405715.557 ops/s
Iteration   6: 2398574.568 ops/s
Iteration   7: 2404487.618 ops/s
Iteration   8: 2402598.958 ops/s
Iteration   9: 2406005.498 ops/s
Iteration  10: 2403196.992 ops/s
Iteration  11: 2401081.982 ops/s
Iteration  12: 2404945.761 ops/s
Iteration  13: 2405159.023 ops/s
Iteration  14: 2405556.918 ops/s
Iteration  15: 2406211.772 ops/s
Iteration  16: 2406539.370 ops/s
Iteration  17: 2407425.216 ops/s
Iteration  18: 2399712.455 ops/s
Iteration  19: 2403093.983 ops/s
Iteration  20: 2401881.930 ops/s
Iteration  21: 2394540.387 ops/s
Iteration  22: 2403638.577 ops/s
Iteration  23: 2402878.360 ops/s
Iteration  24: 2404809.578 ops/s
Iteration  25: 2401909.305 ops/s
Iteration  26: 2399613.468 ops/s
Iteration  27: 2405435.168 ops/s
Iteration  28: 2402147.501 ops/s
Iteration  29: 2395945.409 ops/s
Iteration  30: 2398712.255 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectShort":
  2402078.568 ±(99.9%) 2724.886 ops/s [Average]
  (min, avg, max) = (2388238.270, 2402078.568, 2407425.216), stdev = 4078.482
  CI (99.9%): [2399353.682, 2404803.455] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2402078.568 ± 2724.886  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 180523.592 ops/s
# Warmup Iteration   2: 352771.681 ops/s
# Warmup Iteration   3: 387435.370 ops/s
# Warmup Iteration   4: 389398.076 ops/s
# Warmup Iteration   5: 323351.972 ops/s
# Warmup Iteration   6: 390042.620 ops/s
# Warmup Iteration   7: 389523.619 ops/s
# Warmup Iteration   8: 388538.061 ops/s
# Warmup Iteration   9: 388872.328 ops/s
# Warmup Iteration  10: 390361.411 ops/s
# Warmup Iteration  11: 391023.808 ops/s
# Warmup Iteration  12: 390576.643 ops/s
# Warmup Iteration  13: 389928.733 ops/s
# Warmup Iteration  14: 390539.607 ops/s
# Warmup Iteration  15: 390466.829 ops/s
# Warmup Iteration  16: 390278.337 ops/s
# Warmup Iteration  17: 390172.520 ops/s
# Warmup Iteration  18: 389459.924 ops/s
# Warmup Iteration  19: 390857.917 ops/s
# Warmup Iteration  20: 390296.046 ops/s
# Warmup Iteration  21: 390837.311 ops/s
# Warmup Iteration  22: 388622.479 ops/s
# Warmup Iteration  23: 390396.487 ops/s
# Warmup Iteration  24: 390556.560 ops/s
# Warmup Iteration  25: 390485.590 ops/s
# Warmup Iteration  26: 390272.524 ops/s
# Warmup Iteration  27: 390544.198 ops/s
# Warmup Iteration  28: 390687.208 ops/s
# Warmup Iteration  29: 390902.768 ops/s
# Warmup Iteration  30: 389379.668 ops/s
Iteration   1: 389852.073 ops/s
Iteration   2: 390570.455 ops/s
Iteration   3: 388700.765 ops/s
Iteration   4: 389896.252 ops/s
Iteration   5: 391071.669 ops/s
Iteration   6: 388603.845 ops/s
Iteration   7: 389258.962 ops/s
Iteration   8: 390098.740 ops/s
Iteration   9: 389354.210 ops/s
Iteration  10: 389818.127 ops/s
Iteration  11: 391939.906 ops/s
Iteration  12: 390728.787 ops/s
Iteration  13: 389684.036 ops/s
Iteration  14: 390417.833 ops/s
Iteration  15: 390143.200 ops/s
Iteration  16: 390707.273 ops/s
Iteration  17: 390853.588 ops/s
Iteration  18: 387993.199 ops/s
Iteration  19: 389991.129 ops/s
Iteration  20: 388723.909 ops/s
Iteration  21: 389356.603 ops/s
Iteration  22: 390346.578 ops/s
Iteration  23: 389798.846 ops/s
Iteration  24: 390084.007 ops/s
Iteration  25: 389772.747 ops/s
Iteration  26: 389473.460 ops/s
Iteration  27: 391100.107 ops/s
Iteration  28: 390814.906 ops/s
Iteration  29: 390556.241 ops/s
Iteration  30: 388364.949 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_flatCollectWith":
  389935.880 ±(99.9%) 598.491 ops/s [Average]
  (min, avg, max) = (387993.199, 389935.880, 391939.906), stdev = 895.793
  CI (99.9%): [389337.389, 390534.371] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_flatCollectWith  thrpt   30  389935.880 ± 598.491  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1167720.239 ops/s
# Warmup Iteration   2: 2432823.366 ops/s
# Warmup Iteration   3: 2701040.830 ops/s
# Warmup Iteration   4: 2711298.782 ops/s
# Warmup Iteration   5: 2221775.461 ops/s
# Warmup Iteration   6: 2720200.156 ops/s
# Warmup Iteration   7: 2716044.167 ops/s
# Warmup Iteration   8: 2717801.151 ops/s
# Warmup Iteration   9: 2721263.566 ops/s
# Warmup Iteration  10: 2715914.727 ops/s
# Warmup Iteration  11: 2716252.561 ops/s
# Warmup Iteration  12: 2717773.891 ops/s
# Warmup Iteration  13: 2710886.268 ops/s
# Warmup Iteration  14: 2712846.593 ops/s
# Warmup Iteration  15: 2718982.192 ops/s
# Warmup Iteration  16: 2716507.596 ops/s
# Warmup Iteration  17: 2716601.711 ops/s
# Warmup Iteration  18: 2716791.499 ops/s
# Warmup Iteration  19: 2713838.875 ops/s
# Warmup Iteration  20: 2716088.663 ops/s
# Warmup Iteration  21: 2709812.921 ops/s
# Warmup Iteration  22: 2717061.567 ops/s
# Warmup Iteration  23: 2704251.233 ops/s
# Warmup Iteration  24: 2720106.298 ops/s
# Warmup Iteration  25: 2713138.910 ops/s
# Warmup Iteration  26: 2711929.189 ops/s
# Warmup Iteration  27: 2711431.005 ops/s
# Warmup Iteration  28: 2712915.710 ops/s
# Warmup Iteration  29: 2706648.595 ops/s
# Warmup Iteration  30: 2711733.736 ops/s
Iteration   1: 2716596.925 ops/s
Iteration   2: 2704170.792 ops/s
Iteration   3: 2728529.816 ops/s
Iteration   4: 2712882.667 ops/s
Iteration   5: 2714027.068 ops/s
Iteration   6: 2718471.826 ops/s
Iteration   7: 2722296.283 ops/s
Iteration   8: 2718696.208 ops/s
Iteration   9: 2713083.884 ops/s
Iteration  10: 2720659.687 ops/s
Iteration  11: 2704793.171 ops/s
Iteration  12: 2714691.615 ops/s
Iteration  13: 2720024.791 ops/s
Iteration  14: 2718930.802 ops/s
Iteration  15: 2713575.705 ops/s
Iteration  16: 2714492.919 ops/s
Iteration  17: 2715654.240 ops/s
Iteration  18: 2721559.187 ops/s
Iteration  19: 2723136.670 ops/s
Iteration  20: 2723676.607 ops/s
Iteration  21: 2717942.038 ops/s
Iteration  22: 2718007.485 ops/s
Iteration  23: 2722875.772 ops/s
Iteration  24: 2708674.944 ops/s
Iteration  25: 2720268.186 ops/s
Iteration  26: 2712118.274 ops/s
Iteration  27: 2715755.938 ops/s
Iteration  28: 2708385.618 ops/s
Iteration  29: 2716388.000 ops/s
Iteration  30: 2716897.477 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEach":
  2716575.487 ±(99.9%) 3693.607 ops/s [Average]
  (min, avg, max) = (2704170.792, 2716575.487, 2728529.816), stdev = 5528.418
  CI (99.9%): [2712881.879, 2720269.094] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_forEach  thrpt   30  2716575.487 ± 3693.607  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1449439.204 ops/s
# Warmup Iteration   2: 3588914.394 ops/s
# Warmup Iteration   3: 3631459.724 ops/s
# Warmup Iteration   4: 2993358.116 ops/s
# Warmup Iteration   5: 3618950.761 ops/s
# Warmup Iteration   6: 3634576.532 ops/s
# Warmup Iteration   7: 3632339.008 ops/s
# Warmup Iteration   8: 3626225.883 ops/s
# Warmup Iteration   9: 3629697.264 ops/s
# Warmup Iteration  10: 3632434.272 ops/s
# Warmup Iteration  11: 3623689.451 ops/s
# Warmup Iteration  12: 3632477.634 ops/s
# Warmup Iteration  13: 3630276.446 ops/s
# Warmup Iteration  14: 3630596.171 ops/s
# Warmup Iteration  15: 3626562.588 ops/s
# Warmup Iteration  16: 3620308.214 ops/s
# Warmup Iteration  17: 3634947.720 ops/s
# Warmup Iteration  18: 3623311.728 ops/s
# Warmup Iteration  19: 3631779.455 ops/s
# Warmup Iteration  20: 3627270.768 ops/s
# Warmup Iteration  21: 3633496.075 ops/s
# Warmup Iteration  22: 3638251.231 ops/s
# Warmup Iteration  23: 3634533.644 ops/s
# Warmup Iteration  24: 3629557.433 ops/s
# Warmup Iteration  25: 3635487.459 ops/s
# Warmup Iteration  26: 3631381.854 ops/s
# Warmup Iteration  27: 3639948.424 ops/s
# Warmup Iteration  28: 3621282.048 ops/s
# Warmup Iteration  29: 3625298.846 ops/s
# Warmup Iteration  30: 3634421.633 ops/s
Iteration   1: 3639872.189 ops/s
Iteration   2: 3639330.169 ops/s
Iteration   3: 3641387.215 ops/s
Iteration   4: 3636204.499 ops/s
Iteration   5: 3620272.388 ops/s
Iteration   6: 3640613.338 ops/s
Iteration   7: 3642020.499 ops/s
Iteration   8: 3628545.430 ops/s
Iteration   9: 3621153.692 ops/s
Iteration  10: 3627839.198 ops/s
Iteration  11: 3642472.970 ops/s
Iteration  12: 3635236.618 ops/s
Iteration  13: 3637925.869 ops/s
Iteration  14: 3617863.651 ops/s
Iteration  15: 3626746.762 ops/s
Iteration  16: 3635661.643 ops/s
Iteration  17: 3639654.699 ops/s
Iteration  18: 3633855.059 ops/s
Iteration  19: 3633990.050 ops/s
Iteration  20: 3640748.553 ops/s
Iteration  21: 3628725.504 ops/s
Iteration  22: 3630874.415 ops/s
Iteration  23: 3640881.802 ops/s
Iteration  24: 3647922.744 ops/s
Iteration  25: 3640894.255 ops/s
Iteration  26: 3634533.638 ops/s
Iteration  27: 3645052.944 ops/s
Iteration  28: 3627649.586 ops/s
Iteration  29: 3639259.778 ops/s
Iteration  30: 3644396.851 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWith":
  3635386.200 ±(99.9%) 5116.571 ops/s [Average]
  (min, avg, max) = (3617863.651, 3635386.200, 3647922.744), stdev = 7658.243
  CI (99.9%): [3630269.629, 3640502.771] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_forEachWith  thrpt   30  3635386.200 ± 5116.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 499965.098 ops/s
# Warmup Iteration   2: 850425.979 ops/s
# Warmup Iteration   3: 979084.210 ops/s
# Warmup Iteration   4: 985569.601 ops/s
# Warmup Iteration   5: 983439.289 ops/s
# Warmup Iteration   6: 803379.884 ops/s
# Warmup Iteration   7: 986570.656 ops/s
# Warmup Iteration   8: 982076.672 ops/s
# Warmup Iteration   9: 985746.489 ops/s
# Warmup Iteration  10: 985240.023 ops/s
# Warmup Iteration  11: 985060.410 ops/s
# Warmup Iteration  12: 985209.672 ops/s
# Warmup Iteration  13: 985452.227 ops/s
# Warmup Iteration  14: 986337.937 ops/s
# Warmup Iteration  15: 988304.637 ops/s
# Warmup Iteration  16: 984332.036 ops/s
# Warmup Iteration  17: 984876.555 ops/s
# Warmup Iteration  18: 984531.040 ops/s
# Warmup Iteration  19: 987361.390 ops/s
# Warmup Iteration  20: 987457.158 ops/s
# Warmup Iteration  21: 984675.495 ops/s
# Warmup Iteration  22: 983552.739 ops/s
# Warmup Iteration  23: 983893.768 ops/s
# Warmup Iteration  24: 986965.374 ops/s
# Warmup Iteration  25: 985722.991 ops/s
# Warmup Iteration  26: 986776.064 ops/s
# Warmup Iteration  27: 985977.719 ops/s
# Warmup Iteration  28: 987657.952 ops/s
# Warmup Iteration  29: 984542.270 ops/s
# Warmup Iteration  30: 986652.043 ops/s
Iteration   1: 984404.126 ops/s
Iteration   2: 984192.729 ops/s
Iteration   3: 984011.776 ops/s
Iteration   4: 984127.577 ops/s
Iteration   5: 986564.131 ops/s
Iteration   6: 986496.746 ops/s
Iteration   7: 988611.164 ops/s
Iteration   8: 984977.456 ops/s
Iteration   9: 988175.661 ops/s
Iteration  10: 987695.902 ops/s
Iteration  11: 988088.120 ops/s
Iteration  12: 988766.964 ops/s
Iteration  13: 987381.425 ops/s
Iteration  14: 986468.663 ops/s
Iteration  15: 985529.843 ops/s
Iteration  16: 989260.723 ops/s
Iteration  17: 985630.113 ops/s
Iteration  18: 987174.489 ops/s
Iteration  19: 983514.018 ops/s
Iteration  20: 984264.122 ops/s
Iteration  21: 985209.630 ops/s
Iteration  22: 983734.051 ops/s
Iteration  23: 985822.723 ops/s
Iteration  24: 985976.936 ops/s
Iteration  25: 983864.685 ops/s
Iteration  26: 984800.023 ops/s
Iteration  27: 983973.730 ops/s
Iteration  28: 985832.843 ops/s
Iteration  29: 985963.456 ops/s
Iteration  30: 988534.780 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithIndex":
  985968.287 ±(99.9%) 1159.454 ops/s [Average]
  (min, avg, max) = (983514.018, 985968.287, 989260.723), stdev = 1735.416
  CI (99.9%): [984808.833, 987127.740] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_forEachWithIndex  thrpt   30  985968.287 ± 1159.454  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2219441.944 ops/s
# Warmup Iteration   2: 4366138.975 ops/s
# Warmup Iteration   3: 4739029.821 ops/s
# Warmup Iteration   4: 4761974.472 ops/s
# Warmup Iteration   5: 3899694.951 ops/s
# Warmup Iteration   6: 4773631.268 ops/s
# Warmup Iteration   7: 4762012.771 ops/s
# Warmup Iteration   8: 4772675.719 ops/s
# Warmup Iteration   9: 4765632.055 ops/s
# Warmup Iteration  10: 4760770.023 ops/s
# Warmup Iteration  11: 4768503.672 ops/s
# Warmup Iteration  12: 4762895.617 ops/s
# Warmup Iteration  13: 4759556.180 ops/s
# Warmup Iteration  14: 4766810.080 ops/s
# Warmup Iteration  15: 4756157.195 ops/s
# Warmup Iteration  16: 4764509.781 ops/s
# Warmup Iteration  17: 4761195.340 ops/s
# Warmup Iteration  18: 4774280.958 ops/s
# Warmup Iteration  19: 4762861.489 ops/s
# Warmup Iteration  20: 4777965.226 ops/s
# Warmup Iteration  21: 4755836.812 ops/s
# Warmup Iteration  22: 4772638.669 ops/s
# Warmup Iteration  23: 4764086.532 ops/s
# Warmup Iteration  24: 4757806.137 ops/s
# Warmup Iteration  25: 4763092.934 ops/s
# Warmup Iteration  26: 4776249.927 ops/s
# Warmup Iteration  27: 4766740.183 ops/s
# Warmup Iteration  28: 4758894.720 ops/s
# Warmup Iteration  29: 4773303.499 ops/s
# Warmup Iteration  30: 4766160.443 ops/s
Iteration   1: 4764675.975 ops/s
Iteration   2: 4765181.282 ops/s
Iteration   3: 4760516.283 ops/s
Iteration   4: 4767694.614 ops/s
Iteration   5: 4757711.221 ops/s
Iteration   6: 4766758.261 ops/s
Iteration   7: 4764174.864 ops/s
Iteration   8: 4771520.659 ops/s
Iteration   9: 4765287.432 ops/s
Iteration  10: 4762312.738 ops/s
Iteration  11: 4757182.220 ops/s
Iteration  12: 4769882.392 ops/s
Iteration  13: 4748087.075 ops/s
Iteration  14: 4776505.539 ops/s
Iteration  15: 4769483.037 ops/s
Iteration  16: 4773495.008 ops/s
Iteration  17: 4777158.148 ops/s
Iteration  18: 4768863.238 ops/s
Iteration  19: 4767810.596 ops/s
Iteration  20: 4771197.638 ops/s
Iteration  21: 4770849.894 ops/s
Iteration  22: 4774288.519 ops/s
Iteration  23: 4780930.589 ops/s
Iteration  24: 4754579.559 ops/s
Iteration  25: 4774690.544 ops/s
Iteration  26: 4775094.821 ops/s
Iteration  27: 4764969.699 ops/s
Iteration  28: 4776666.199 ops/s
Iteration  29: 4776938.623 ops/s
Iteration  30: 4767077.777 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_forEachWithOccurrences":
  4768052.815 ±(99.9%) 4995.017 ops/s [Average]
  (min, avg, max) = (4748087.075, 4768052.815, 4780930.589), stdev = 7476.307
  CI (99.9%): [4763057.797, 4773047.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  4768052.815 ± 4995.017  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_fusedCollectMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_fusedCollectMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 945399.486 ops/s
# Warmup Iteration   2: 2154756.260 ops/s
# Warmup Iteration   3: 2261319.254 ops/s
# Warmup Iteration   4: 1966964.362 ops/s
# Warmup Iteration   5: 2158522.224 ops/s
# Warmup Iteration   6: 2254485.420 ops/s
# Warmup Iteration   7: 2251064.828 ops/s
# Warmup Iteration   8: 2255402.302 ops/s
# Warmup Iteration   9: 2251265.951 ops/s
# Warmup Iteration  10: 2253162.299 ops/s
# Warmup Iteration  11: 2247856.886 ops/s
# Warmup Iteration  12: 2257999.957 ops/s
# Warmup Iteration  13: 2255235.014 ops/s
# Warmup Iteration  14: 2257355.126 ops/s
# Warmup Iteration  15: 2257095.917 ops/s
# Warmup Iteration  16: 2259007.206 ops/s
# Warmup Iteration  17: 2258883.762 ops/s
# Warmup Iteration  18: 2256242.643 ops/s
# Warmup Iteration  19: 2261378.081 ops/s
# Warmup Iteration  20: 2256407.691 ops/s
# Warmup Iteration  21: 2258634.742 ops/s
# Warmup Iteration  22: 2257592.281 ops/s
# Warmup Iteration  23: 2257860.199 ops/s
# Warmup Iteration  24: 2261135.989 ops/s
# Warmup Iteration  25: 2262746.657 ops/s
# Warmup Iteration  26: 2258849.044 ops/s
# Warmup Iteration  27: 2259396.240 ops/s
# Warmup Iteration  28: 2260173.099 ops/s
# Warmup Iteration  29: 2259404.355 ops/s
# Warmup Iteration  30: 2262541.189 ops/s
Iteration   1: 2258392.890 ops/s
Iteration   2: 2248765.068 ops/s
Iteration   3: 2254403.979 ops/s
Iteration   4: 2254434.408 ops/s
Iteration   5: 2252260.445 ops/s
Iteration   6: 2262677.128 ops/s
Iteration   7: 2256554.025 ops/s
Iteration   8: 2260770.639 ops/s
Iteration   9: 2257155.550 ops/s
Iteration  10: 2255312.274 ops/s
Iteration  11: 2265844.554 ops/s
Iteration  12: 2263943.038 ops/s
Iteration  13: 2261566.108 ops/s
Iteration  14: 2261791.011 ops/s
Iteration  15: 2259817.240 ops/s
Iteration  16: 2258255.663 ops/s
Iteration  17: 2265445.034 ops/s
Iteration  18: 2258079.363 ops/s
Iteration  19: 2262667.571 ops/s
Iteration  20: 2254708.699 ops/s
Iteration  21: 2258296.488 ops/s
Iteration  22: 2260232.910 ops/s
Iteration  23: 2255912.066 ops/s
Iteration  24: 2260842.263 ops/s
Iteration  25: 2263322.244 ops/s
Iteration  26: 2258753.181 ops/s
Iteration  27: 2261028.381 ops/s
Iteration  28: 2252528.865 ops/s
Iteration  29: 2263741.271 ops/s
Iteration  30: 2256108.185 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_fusedCollectMakeString":
  2258787.018 ±(99.9%) 2780.952 ops/s [Average]
  (min, avg, max) = (2248765.068, 2258787.018, 2265844.554), stdev = 4162.399
  CI (99.9%): [2256006.066, 2261567.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_fusedCollectMakeString  thrpt   30  2258787.018 ± 2780.952  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getAny$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getAny

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1692888.274 ops/s
# Warmup Iteration   2: 3431220.923 ops/s
# Warmup Iteration   3: 3676291.836 ops/s
# Warmup Iteration   4: 3691410.463 ops/s
# Warmup Iteration   5: 3020831.859 ops/s
# Warmup Iteration   6: 3704398.054 ops/s
# Warmup Iteration   7: 3698567.007 ops/s
# Warmup Iteration   8: 3701037.063 ops/s
# Warmup Iteration   9: 3703970.011 ops/s
# Warmup Iteration  10: 3697951.437 ops/s
# Warmup Iteration  11: 3694236.940 ops/s
# Warmup Iteration  12: 3693921.939 ops/s
# Warmup Iteration  13: 3692843.156 ops/s
# Warmup Iteration  14: 3699482.827 ops/s
# Warmup Iteration  15: 3703168.616 ops/s
# Warmup Iteration  16: 3700315.427 ops/s
# Warmup Iteration  17: 3698643.399 ops/s
# Warmup Iteration  18: 3701173.829 ops/s
# Warmup Iteration  19: 3691446.980 ops/s
# Warmup Iteration  20: 3693143.237 ops/s
# Warmup Iteration  21: 3695616.069 ops/s
# Warmup Iteration  22: 3686878.909 ops/s
# Warmup Iteration  23: 3703486.063 ops/s
# Warmup Iteration  24: 3692936.410 ops/s
# Warmup Iteration  25: 3707332.618 ops/s
# Warmup Iteration  26: 3693476.573 ops/s
# Warmup Iteration  27: 3702782.420 ops/s
# Warmup Iteration  28: 3705472.755 ops/s
# Warmup Iteration  29: 3705745.560 ops/s
# Warmup Iteration  30: 3708601.035 ops/s
Iteration   1: 3705230.304 ops/s
Iteration   2: 3694507.074 ops/s
Iteration   3: 3713375.295 ops/s
Iteration   4: 3698034.854 ops/s
Iteration   5: 3690413.695 ops/s
Iteration   6: 3699306.705 ops/s
Iteration   7: 3700880.648 ops/s
Iteration   8: 3703219.807 ops/s
Iteration   9: 3703490.856 ops/s
Iteration  10: 3697811.054 ops/s
Iteration  11: 3688782.653 ops/s
Iteration  12: 3702525.487 ops/s
Iteration  13: 3713814.917 ops/s
Iteration  14: 3704265.258 ops/s
Iteration  15: 3712432.472 ops/s
Iteration  16: 3712580.262 ops/s
Iteration  17: 3712455.928 ops/s
Iteration  18: 3697278.498 ops/s
Iteration  19: 3697492.033 ops/s
Iteration  20: 3698299.598 ops/s
Iteration  21: 3696834.335 ops/s
Iteration  22: 3684926.155 ops/s
Iteration  23: 3692150.193 ops/s
Iteration  24: 3694057.850 ops/s
Iteration  25: 3701046.871 ops/s
Iteration  26: 3691129.476 ops/s
Iteration  27: 3709208.072 ops/s
Iteration  28: 3706048.050 ops/s
Iteration  29: 3709940.216 ops/s
Iteration  30: 3717778.076 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getAny":
  3701643.890 ±(99.9%) 5625.137 ops/s [Average]
  (min, avg, max) = (3684926.155, 3701643.890, 3717778.076), stdev = 8419.441
  CI (99.9%): [3696018.753, 3707269.027] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getAny  thrpt   30  3701643.890 ± 5625.137  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getFirst$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getFirst

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1422405.857 ops/s
# Warmup Iteration   2: 2764418.584 ops/s
# Warmup Iteration   3: 2984780.128 ops/s
# Warmup Iteration   4: 2997235.848 ops/s
# Warmup Iteration   5: 2453538.262 ops/s
# Warmup Iteration   6: 3004515.116 ops/s
# Warmup Iteration   7: 2998022.105 ops/s
# Warmup Iteration   8: 3005879.024 ops/s
# Warmup Iteration   9: 2997814.449 ops/s
# Warmup Iteration  10: 3002431.872 ops/s
# Warmup Iteration  11: 2992933.780 ops/s
# Warmup Iteration  12: 3003035.563 ops/s
# Warmup Iteration  13: 2999903.334 ops/s
# Warmup Iteration  14: 2991800.495 ops/s
# Warmup Iteration  15: 2998737.372 ops/s
# Warmup Iteration  16: 3005554.500 ops/s
# Warmup Iteration  17: 3001675.702 ops/s
# Warmup Iteration  18: 3008627.572 ops/s
# Warmup Iteration  19: 2997785.246 ops/s
# Warmup Iteration  20: 2996583.320 ops/s
# Warmup Iteration  21: 2996648.395 ops/s
# Warmup Iteration  22: 2998518.945 ops/s
# Warmup Iteration  23: 3009813.013 ops/s
# Warmup Iteration  24: 3002280.959 ops/s
# Warmup Iteration  25: 3000110.257 ops/s
# Warmup Iteration  26: 2999850.974 ops/s
# Warmup Iteration  27: 3004512.693 ops/s
# Warmup Iteration  28: 2984245.763 ops/s
# Warmup Iteration  29: 3000798.199 ops/s
# Warmup Iteration  30: 3003351.565 ops/s
Iteration   1: 2992364.225 ops/s
Iteration   2: 3001990.909 ops/s
Iteration   3: 2993514.511 ops/s
Iteration   4: 2995731.223 ops/s
Iteration   5: 3000284.770 ops/s
Iteration   6: 3009746.663 ops/s
Iteration   7: 3002513.574 ops/s
Iteration   8: 3001575.309 ops/s
Iteration   9: 3005201.368 ops/s
Iteration  10: 3003245.979 ops/s
Iteration  11: 3001002.452 ops/s
Iteration  12: 3009091.284 ops/s
Iteration  13: 3006829.218 ops/s
Iteration  14: 3006366.006 ops/s
Iteration  15: 2997104.599 ops/s
Iteration  16: 3007839.226 ops/s
Iteration  17: 3008339.740 ops/s
Iteration  18: 3010260.106 ops/s
Iteration  19: 3007089.484 ops/s
Iteration  20: 2994599.936 ops/s
Iteration  21: 3003242.901 ops/s
Iteration  22: 3002404.766 ops/s
Iteration  23: 3006489.631 ops/s
Iteration  24: 3013184.338 ops/s
Iteration  25: 2989161.976 ops/s
Iteration  26: 3015812.130 ops/s
Iteration  27: 3002509.583 ops/s
Iteration  28: 3008542.215 ops/s
Iteration  29: 3007366.031 ops/s
Iteration  30: 3002334.146 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getFirst":
  3003524.610 ±(99.9%) 4161.165 ops/s [Average]
  (min, avg, max) = (2989161.976, 3003524.610, 3015812.130), stdev = 6228.237
  CI (99.9%): [2999363.445, 3007685.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getFirst  thrpt   30  3003524.610 ± 4161.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getLast$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getLast

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2670095.983 ops/s
# Warmup Iteration   2: 6439993.789 ops/s
# Warmup Iteration   3: 6441901.210 ops/s
# Warmup Iteration   4: 5306847.959 ops/s
# Warmup Iteration   5: 6427611.743 ops/s
# Warmup Iteration   6: 6453040.471 ops/s
# Warmup Iteration   7: 6457261.907 ops/s
# Warmup Iteration   8: 6461364.502 ops/s
# Warmup Iteration   9: 6451379.639 ops/s
# Warmup Iteration  10: 6453843.262 ops/s
# Warmup Iteration  11: 6450544.996 ops/s
# Warmup Iteration  12: 6460329.964 ops/s
# Warmup Iteration  13: 6442578.092 ops/s
# Warmup Iteration  14: 6455822.896 ops/s
# Warmup Iteration  15: 6445087.143 ops/s
# Warmup Iteration  16: 6454351.914 ops/s
# Warmup Iteration  17: 6468639.512 ops/s
# Warmup Iteration  18: 6457562.153 ops/s
# Warmup Iteration  19: 6453506.665 ops/s
# Warmup Iteration  20: 6480489.812 ops/s
# Warmup Iteration  21: 6457928.570 ops/s
# Warmup Iteration  22: 6455556.148 ops/s
# Warmup Iteration  23: 6441382.628 ops/s
# Warmup Iteration  24: 6450670.958 ops/s
# Warmup Iteration  25: 6457293.429 ops/s
# Warmup Iteration  26: 6455120.161 ops/s
# Warmup Iteration  27: 6450409.495 ops/s
# Warmup Iteration  28: 6434060.788 ops/s
# Warmup Iteration  29: 6459402.236 ops/s
# Warmup Iteration  30: 6454079.345 ops/s
Iteration   1: 6475380.287 ops/s
Iteration   2: 6449798.448 ops/s
Iteration   3: 6453526.066 ops/s
Iteration   4: 6444261.050 ops/s
Iteration   5: 6468258.719 ops/s
Iteration   6: 6454139.210 ops/s
Iteration   7: 6443499.558 ops/s
Iteration   8: 6450614.588 ops/s
Iteration   9: 6462975.122 ops/s
Iteration  10: 6449696.557 ops/s
Iteration  11: 6451533.371 ops/s
Iteration  12: 6440902.479 ops/s
Iteration  13: 6453188.708 ops/s
Iteration  14: 6474253.078 ops/s
Iteration  15: 6458256.858 ops/s
Iteration  16: 6462720.657 ops/s
Iteration  17: 6445363.641 ops/s
Iteration  18: 6463717.542 ops/s
Iteration  19: 6445893.723 ops/s
Iteration  20: 6461761.699 ops/s
Iteration  21: 6448830.440 ops/s
Iteration  22: 6466726.074 ops/s
Iteration  23: 6473164.320 ops/s
Iteration  24: 6453115.690 ops/s
Iteration  25: 6444530.020 ops/s
Iteration  26: 6445336.256 ops/s
Iteration  27: 6454554.927 ops/s
Iteration  28: 6467470.286 ops/s
Iteration  29: 6435127.106 ops/s
Iteration  30: 6458580.527 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getLast":
  6455239.234 ±(99.9%) 7024.677 ops/s [Average]
  (min, avg, max) = (6435127.106, 6455239.234, 6475380.287), stdev = 10514.206
  CI (99.9%): [6448214.557, 6462263.910] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getLast  thrpt   30  6455239.234 ± 7024.677  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2661508.072 ops/s
# Warmup Iteration   2: 6456419.278 ops/s
# Warmup Iteration   3: 6580313.051 ops/s
# Warmup Iteration   4: 5390302.287 ops/s
# Warmup Iteration   5: 6588146.098 ops/s
# Warmup Iteration   6: 6606180.199 ops/s
# Warmup Iteration   7: 6559746.024 ops/s
# Warmup Iteration   8: 6605978.875 ops/s
# Warmup Iteration   9: 6594030.595 ops/s
# Warmup Iteration  10: 6608370.264 ops/s
# Warmup Iteration  11: 6598176.303 ops/s
# Warmup Iteration  12: 6602055.530 ops/s
# Warmup Iteration  13: 6604396.884 ops/s
# Warmup Iteration  14: 6604179.980 ops/s
# Warmup Iteration  15: 6600636.890 ops/s
# Warmup Iteration  16: 6589560.861 ops/s
# Warmup Iteration  17: 6606738.985 ops/s
# Warmup Iteration  18: 6588595.781 ops/s
# Warmup Iteration  19: 6604654.471 ops/s
# Warmup Iteration  20: 6589472.670 ops/s
# Warmup Iteration  21: 6606925.967 ops/s
# Warmup Iteration  22: 6598662.152 ops/s
# Warmup Iteration  23: 6589071.630 ops/s
# Warmup Iteration  24: 6598993.444 ops/s
# Warmup Iteration  25: 6589154.844 ops/s
# Warmup Iteration  26: 6589098.224 ops/s
# Warmup Iteration  27: 6603292.330 ops/s
# Warmup Iteration  28: 6595751.684 ops/s
# Warmup Iteration  29: 6590816.693 ops/s
# Warmup Iteration  30: 6589491.777 ops/s
Iteration   1: 6605756.132 ops/s
Iteration   2: 6578230.312 ops/s
Iteration   3: 6576672.748 ops/s
Iteration   4: 6589798.033 ops/s
Iteration   5: 6601231.741 ops/s
Iteration   6: 6620359.247 ops/s
Iteration   7: 6616933.751 ops/s
Iteration   8: 6599732.832 ops/s
Iteration   9: 6596602.004 ops/s
Iteration  10: 6603432.043 ops/s
Iteration  11: 6584764.076 ops/s
Iteration  12: 6600226.625 ops/s
Iteration  13: 6600053.280 ops/s
Iteration  14: 6613694.106 ops/s
Iteration  15: 6592790.729 ops/s
Iteration  16: 6605016.460 ops/s
Iteration  17: 6604745.393 ops/s
Iteration  18: 6581217.681 ops/s
Iteration  19: 6573468.661 ops/s
Iteration  20: 6597063.439 ops/s
Iteration  21: 6603684.952 ops/s
Iteration  22: 6610918.386 ops/s
Iteration  23: 6599990.430 ops/s
Iteration  24: 6600389.742 ops/s
Iteration  25: 6587363.020 ops/s
Iteration  26: 6607048.525 ops/s
Iteration  27: 6618052.272 ops/s
Iteration  28: 6579099.319 ops/s
Iteration  29: 6592458.160 ops/s
Iteration  30: 6614233.469 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly":
  6598500.919 ±(99.9%) 8562.526 ops/s [Average]
  (min, avg, max) = (6573468.661, 6598500.919, 6620359.247), stdev = 12815.986
  CI (99.9%): [6589938.393, 6607063.445] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getOnly  thrpt   30  6598500.919 ± 8562.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744235.202 ops/s
# Warmup Iteration   2: 797584.326 ops/s
# Warmup Iteration   3: 1044946.614 ops/s
# Warmup Iteration   4: 1039280.998 ops/s
# Warmup Iteration   5: 1037619.529 ops/s
# Warmup Iteration   6: 1038032.326 ops/s
# Warmup Iteration   7: 1038454.260 ops/s
# Warmup Iteration   8: 1035528.637 ops/s
# Warmup Iteration   9: 1035412.587 ops/s
# Warmup Iteration  10: 1040344.986 ops/s
# Warmup Iteration  11: 868667.587 ops/s
# Warmup Iteration  12: 1042132.954 ops/s
# Warmup Iteration  13: 1036456.888 ops/s
# Warmup Iteration  14: 1037474.264 ops/s
# Warmup Iteration  15: 1040145.928 ops/s
# Warmup Iteration  16: 1042149.052 ops/s
# Warmup Iteration  17: 1104017.907 ops/s
# Warmup Iteration  18: 1104240.159 ops/s
# Warmup Iteration  19: 1104875.658 ops/s
# Warmup Iteration  20: 1106150.104 ops/s
# Warmup Iteration  21: 1102977.689 ops/s
# Warmup Iteration  22: 1104176.597 ops/s
# Warmup Iteration  23: 1102107.129 ops/s
# Warmup Iteration  24: 1100393.187 ops/s
# Warmup Iteration  25: 1100053.620 ops/s
# Warmup Iteration  26: 1103055.820 ops/s
# Warmup Iteration  27: 1100041.911 ops/s
# Warmup Iteration  28: 1101093.229 ops/s
# Warmup Iteration  29: 1102615.313 ops/s
# Warmup Iteration  30: 1101613.400 ops/s
Iteration   1: 1104005.608 ops/s
Iteration   2: 1102750.908 ops/s
Iteration   3: 1102951.557 ops/s
Iteration   4: 1106619.191 ops/s
Iteration   5: 1102573.646 ops/s
Iteration   6: 1100162.732 ops/s
Iteration   7: 1100150.926 ops/s
Iteration   8: 1103402.371 ops/s
Iteration   9: 1099955.950 ops/s
Iteration  10: 1100329.468 ops/s
Iteration  11: 1103663.900 ops/s
Iteration  12: 1102121.853 ops/s
Iteration  13: 1104751.899 ops/s
Iteration  14: 1098231.080 ops/s
Iteration  15: 1098098.831 ops/s
Iteration  16: 1103052.202 ops/s
Iteration  17: 1103927.475 ops/s
Iteration  18: 1098784.190 ops/s
Iteration  19: 1104058.212 ops/s
Iteration  20: 1100961.022 ops/s
Iteration  21: 1100060.993 ops/s
Iteration  22: 1099109.614 ops/s
Iteration  23: 1104834.228 ops/s
Iteration  24: 1107049.878 ops/s
Iteration  25: 1106044.086 ops/s
Iteration  26: 1102764.128 ops/s
Iteration  27: 1107666.859 ops/s
Iteration  28: 1104626.812 ops/s
Iteration  29: 1104843.443 ops/s
Iteration  30: 1106431.498 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_empty_throws":
  1102799.485 ±(99.9%) 1811.932 ops/s [Average]
  (min, avg, max) = (1098098.831, 1102799.485, 1107666.859), stdev = 2712.015
  CI (99.9%): [1100987.553, 1104611.418] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getOnly_empty_throws  thrpt   30  1102799.485 ± 1811.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661949.711 ops/s
# Warmup Iteration   2: 710895.507 ops/s
# Warmup Iteration   3: 946232.080 ops/s
# Warmup Iteration   4: 947071.388 ops/s
# Warmup Iteration   5: 944246.278 ops/s
# Warmup Iteration   6: 947426.423 ops/s
# Warmup Iteration   7: 950351.801 ops/s
# Warmup Iteration   8: 949683.566 ops/s
# Warmup Iteration   9: 946629.618 ops/s
# Warmup Iteration  10: 947306.003 ops/s
# Warmup Iteration  11: 782410.540 ops/s
# Warmup Iteration  12: 947922.911 ops/s
# Warmup Iteration  13: 947750.444 ops/s
# Warmup Iteration  14: 948124.101 ops/s
# Warmup Iteration  15: 947633.650 ops/s
# Warmup Iteration  16: 948917.282 ops/s
# Warmup Iteration  17: 1005394.893 ops/s
# Warmup Iteration  18: 1002947.764 ops/s
# Warmup Iteration  19: 1003419.319 ops/s
# Warmup Iteration  20: 1003910.000 ops/s
# Warmup Iteration  21: 1005174.090 ops/s
# Warmup Iteration  22: 998763.787 ops/s
# Warmup Iteration  23: 1001340.878 ops/s
# Warmup Iteration  24: 1000835.144 ops/s
# Warmup Iteration  25: 1002093.151 ops/s
# Warmup Iteration  26: 1004329.371 ops/s
# Warmup Iteration  27: 1002450.918 ops/s
# Warmup Iteration  28: 1004919.384 ops/s
# Warmup Iteration  29: 1002983.685 ops/s
# Warmup Iteration  30: 1004861.752 ops/s
Iteration   1: 1004761.988 ops/s
Iteration   2: 1004205.326 ops/s
Iteration   3: 1004596.610 ops/s
Iteration   4: 1004147.086 ops/s
Iteration   5: 1006434.003 ops/s
Iteration   6: 1004223.753 ops/s
Iteration   7: 1003748.686 ops/s
Iteration   8: 1004520.251 ops/s
Iteration   9: 1002987.181 ops/s
Iteration  10: 1004587.474 ops/s
Iteration  11: 1005225.610 ops/s
Iteration  12: 1003623.985 ops/s
Iteration  13: 1007706.457 ops/s
Iteration  14: 997888.002 ops/s
Iteration  15: 998659.446 ops/s
Iteration  16: 1004207.499 ops/s
Iteration  17: 1001404.503 ops/s
Iteration  18: 999129.570 ops/s
Iteration  19: 1006114.752 ops/s
Iteration  20: 1004093.610 ops/s
Iteration  21: 1001794.501 ops/s
Iteration  22: 1005231.097 ops/s
Iteration  23: 1003436.151 ops/s
Iteration  24: 1008795.954 ops/s
Iteration  25: 1004324.076 ops/s
Iteration  26: 1004892.941 ops/s
Iteration  27: 1007325.009 ops/s
Iteration  28: 1002917.422 ops/s
Iteration  29: 999863.250 ops/s
Iteration  30: 1003911.673 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws":
  1003825.262 ±(99.9%) 1682.696 ops/s [Average]
  (min, avg, max) = (997888.002, 1003825.262, 1008795.954), stdev = 2518.580
  CI (99.9%): [1002142.567, 1005507.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_getOnly_not_only_one_throws  thrpt   30  1003825.262 ± 1682.696  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 131245.923 ops/s
# Warmup Iteration   2: 198525.760 ops/s
# Warmup Iteration   3: 242255.084 ops/s
# Warmup Iteration   4: 240084.673 ops/s
# Warmup Iteration   5: 242855.580 ops/s
# Warmup Iteration   6: 242426.634 ops/s
# Warmup Iteration   7: 200016.107 ops/s
# Warmup Iteration   8: 242466.043 ops/s
# Warmup Iteration   9: 242916.817 ops/s
# Warmup Iteration  10: 242168.925 ops/s
# Warmup Iteration  11: 242589.103 ops/s
# Warmup Iteration  12: 243030.582 ops/s
# Warmup Iteration  13: 242889.383 ops/s
# Warmup Iteration  14: 242577.742 ops/s
# Warmup Iteration  15: 242689.280 ops/s
# Warmup Iteration  16: 242559.361 ops/s
# Warmup Iteration  17: 242843.508 ops/s
# Warmup Iteration  18: 243181.780 ops/s
# Warmup Iteration  19: 243416.378 ops/s
# Warmup Iteration  20: 242948.051 ops/s
# Warmup Iteration  21: 242834.756 ops/s
# Warmup Iteration  22: 243126.562 ops/s
# Warmup Iteration  23: 242893.904 ops/s
# Warmup Iteration  24: 243166.518 ops/s
# Warmup Iteration  25: 242720.819 ops/s
# Warmup Iteration  26: 242228.677 ops/s
# Warmup Iteration  27: 242821.557 ops/s
# Warmup Iteration  28: 242588.196 ops/s
# Warmup Iteration  29: 242785.752 ops/s
# Warmup Iteration  30: 242570.135 ops/s
Iteration   1: 242255.072 ops/s
Iteration   2: 242626.165 ops/s
Iteration   3: 242819.133 ops/s
Iteration   4: 242866.824 ops/s
Iteration   5: 241903.676 ops/s
Iteration   6: 243266.949 ops/s
Iteration   7: 242002.879 ops/s
Iteration   8: 243152.854 ops/s
Iteration   9: 243101.010 ops/s
Iteration  10: 242312.945 ops/s
Iteration  11: 242938.699 ops/s
Iteration  12: 242722.517 ops/s
Iteration  13: 242579.483 ops/s
Iteration  14: 242604.773 ops/s
Iteration  15: 243756.859 ops/s
Iteration  16: 243280.840 ops/s
Iteration  17: 243040.963 ops/s
Iteration  18: 242740.677 ops/s
Iteration  19: 243288.060 ops/s
Iteration  20: 242752.852 ops/s
Iteration  21: 242897.361 ops/s
Iteration  22: 243041.988 ops/s
Iteration  23: 243108.521 ops/s
Iteration  24: 242480.562 ops/s
Iteration  25: 242766.878 ops/s
Iteration  26: 243285.047 ops/s
Iteration  27: 242402.320 ops/s
Iteration  28: 242058.808 ops/s
Iteration  29: 242800.610 ops/s
Iteration  30: 242055.772 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupBy":
  242763.703 ±(99.9%) 296.863 ops/s [Average]
  (min, avg, max) = (241903.676, 242763.703, 243756.859), stdev = 444.330
  CI (99.9%): [242466.841, 243060.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_groupBy  thrpt   30  242763.703 ± 296.863  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 34156.725 ops/s
# Warmup Iteration   2: 49230.918 ops/s
# Warmup Iteration   3: 62765.330 ops/s
# Warmup Iteration   4: 62440.032 ops/s
# Warmup Iteration   5: 62792.218 ops/s
# Warmup Iteration   6: 62825.221 ops/s
# Warmup Iteration   7: 62684.632 ops/s
# Warmup Iteration   8: 51627.934 ops/s
# Warmup Iteration   9: 62662.667 ops/s
# Warmup Iteration  10: 62930.020 ops/s
# Warmup Iteration  11: 62831.838 ops/s
# Warmup Iteration  12: 62768.918 ops/s
# Warmup Iteration  13: 62610.607 ops/s
# Warmup Iteration  14: 62827.623 ops/s
# Warmup Iteration  15: 62753.860 ops/s
# Warmup Iteration  16: 62797.268 ops/s
# Warmup Iteration  17: 62783.949 ops/s
# Warmup Iteration  18: 62908.712 ops/s
# Warmup Iteration  19: 62826.659 ops/s
# Warmup Iteration  20: 62902.373 ops/s
# Warmup Iteration  21: 62876.093 ops/s
# Warmup Iteration  22: 62996.662 ops/s
# Warmup Iteration  23: 62863.107 ops/s
# Warmup Iteration  24: 62866.417 ops/s
# Warmup Iteration  25: 62902.625 ops/s
# Warmup Iteration  26: 62873.560 ops/s
# Warmup Iteration  27: 62931.647 ops/s
# Warmup Iteration  28: 62955.294 ops/s
# Warmup Iteration  29: 62851.835 ops/s
# Warmup Iteration  30: 62827.625 ops/s
Iteration   1: 62957.188 ops/s
Iteration   2: 62709.176 ops/s
Iteration   3: 62648.753 ops/s
Iteration   4: 62999.374 ops/s
Iteration   5: 62518.424 ops/s
Iteration   6: 63042.878 ops/s
Iteration   7: 62806.542 ops/s
Iteration   8: 62923.565 ops/s
Iteration   9: 62949.233 ops/s
Iteration  10: 62876.367 ops/s
Iteration  11: 62930.455 ops/s
Iteration  12: 62492.295 ops/s
Iteration  13: 62881.124 ops/s
Iteration  14: 62772.734 ops/s
Iteration  15: 62707.535 ops/s
Iteration  16: 62669.746 ops/s
Iteration  17: 62880.056 ops/s
Iteration  18: 62900.824 ops/s
Iteration  19: 62786.347 ops/s
Iteration  20: 62945.061 ops/s
Iteration  21: 62764.287 ops/s
Iteration  22: 62558.032 ops/s
Iteration  23: 62777.331 ops/s
Iteration  24: 62766.979 ops/s
Iteration  25: 62634.382 ops/s
Iteration  26: 62684.893 ops/s
Iteration  27: 62723.933 ops/s
Iteration  28: 63171.644 ops/s
Iteration  29: 62846.162 ops/s
Iteration  30: 62766.722 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByEach":
  62803.068 ±(99.9%) 104.435 ops/s [Average]
  (min, avg, max) = (62492.295, 62803.068, 63171.644), stdev = 156.314
  CI (99.9%): [62698.633, 62907.503] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt      Score     Error  Units
HashBagTest._Benchmark.benchmark_groupByEach  thrpt   30  62803.068 ± 104.435  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1731525.302 ops/s
# Warmup Iteration   2: 3171634.844 ops/s
# Warmup Iteration   3: 3499656.645 ops/s
# Warmup Iteration   4: 3506358.004 ops/s
# Warmup Iteration   5: 3293910.310 ops/s
# Warmup Iteration   6: 3100021.403 ops/s
# Warmup Iteration   7: 3525036.638 ops/s
# Warmup Iteration   8: 3524239.516 ops/s
# Warmup Iteration   9: 3522004.880 ops/s
# Warmup Iteration  10: 3526445.767 ops/s
# Warmup Iteration  11: 3524478.369 ops/s
# Warmup Iteration  12: 3533004.713 ops/s
# Warmup Iteration  13: 3525940.007 ops/s
# Warmup Iteration  14: 3515294.780 ops/s
# Warmup Iteration  15: 3519964.683 ops/s
# Warmup Iteration  16: 3518380.209 ops/s
# Warmup Iteration  17: 3521289.376 ops/s
# Warmup Iteration  18: 3533120.674 ops/s
# Warmup Iteration  19: 3528471.020 ops/s
# Warmup Iteration  20: 3521816.802 ops/s
# Warmup Iteration  21: 3526570.601 ops/s
# Warmup Iteration  22: 3527708.820 ops/s
# Warmup Iteration  23: 3524586.266 ops/s
# Warmup Iteration  24: 3529762.960 ops/s
# Warmup Iteration  25: 3520106.896 ops/s
# Warmup Iteration  26: 3527465.045 ops/s
# Warmup Iteration  27: 3533246.428 ops/s
# Warmup Iteration  28: 3532863.760 ops/s
# Warmup Iteration  29: 3520334.232 ops/s
# Warmup Iteration  30: 3528670.738 ops/s
Iteration   1: 3532793.871 ops/s
Iteration   2: 3525252.412 ops/s
Iteration   3: 3519844.626 ops/s
Iteration   4: 3529509.410 ops/s
Iteration   5: 3512693.350 ops/s
Iteration   6: 3521788.769 ops/s
Iteration   7: 3524856.799 ops/s
Iteration   8: 3534848.650 ops/s
Iteration   9: 3544384.274 ops/s
Iteration  10: 3530803.000 ops/s
Iteration  11: 3524033.847 ops/s
Iteration  12: 3534972.352 ops/s
Iteration  13: 3534257.076 ops/s
Iteration  14: 3524767.617 ops/s
Iteration  15: 3531176.251 ops/s
Iteration  16: 3543038.285 ops/s
Iteration  17: 3536045.269 ops/s
Iteration  18: 3530913.215 ops/s
Iteration  19: 3540564.140 ops/s
Iteration  20: 3526022.503 ops/s
Iteration  21: 3531262.187 ops/s
Iteration  22: 3538009.578 ops/s
Iteration  23: 3519058.731 ops/s
Iteration  24: 3533559.907 ops/s
Iteration  25: 3535568.693 ops/s
Iteration  26: 3526274.237 ops/s
Iteration  27: 3532409.347 ops/s
Iteration  28: 3525712.127 ops/s
Iteration  29: 3519715.765 ops/s
Iteration  30: 3534123.409 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey":
  3529941.990 ±(99.9%) 4947.175 ops/s [Average]
  (min, avg, max) = (3512693.350, 3529941.990, 3544384.274), stdev = 7404.699
  CI (99.9%): [3524994.815, 3534889.165] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_groupByUniqueKey  thrpt   30  3529941.990 ± 4947.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1335918.353 ops/s
# Warmup Iteration   2: 2413375.613 ops/s
# Warmup Iteration   3: 2656591.178 ops/s
# Warmup Iteration   4: 2671786.569 ops/s
# Warmup Iteration   5: 2591077.244 ops/s
# Warmup Iteration   6: 2258060.899 ops/s
# Warmup Iteration   7: 2675196.568 ops/s
# Warmup Iteration   8: 2675065.481 ops/s
# Warmup Iteration   9: 2672283.097 ops/s
# Warmup Iteration  10: 2675960.190 ops/s
# Warmup Iteration  11: 2673704.466 ops/s
# Warmup Iteration  12: 2669621.625 ops/s
# Warmup Iteration  13: 2676588.683 ops/s
# Warmup Iteration  14: 2676072.439 ops/s
# Warmup Iteration  15: 2673397.714 ops/s
# Warmup Iteration  16: 2680646.094 ops/s
# Warmup Iteration  17: 2674110.901 ops/s
# Warmup Iteration  18: 2683465.398 ops/s
# Warmup Iteration  19: 2673604.764 ops/s
# Warmup Iteration  20: 2676273.579 ops/s
# Warmup Iteration  21: 2674816.859 ops/s
# Warmup Iteration  22: 2672600.104 ops/s
# Warmup Iteration  23: 2677962.174 ops/s
# Warmup Iteration  24: 2677482.569 ops/s
# Warmup Iteration  25: 2679218.277 ops/s
# Warmup Iteration  26: 2677972.183 ops/s
# Warmup Iteration  27: 2674862.780 ops/s
# Warmup Iteration  28: 2672656.479 ops/s
# Warmup Iteration  29: 2677824.913 ops/s
# Warmup Iteration  30: 2673547.065 ops/s
Iteration   1: 2675135.600 ops/s
Iteration   2: 2676821.147 ops/s
Iteration   3: 2667673.525 ops/s
Iteration   4: 2677340.190 ops/s
Iteration   5: 2673202.837 ops/s
Iteration   6: 2673366.352 ops/s
Iteration   7: 2676149.832 ops/s
Iteration   8: 2659569.842 ops/s
Iteration   9: 2682614.165 ops/s
Iteration  10: 2680050.980 ops/s
Iteration  11: 2667746.601 ops/s
Iteration  12: 2678368.802 ops/s
Iteration  13: 2677662.329 ops/s
Iteration  14: 2683916.171 ops/s
Iteration  15: 2679202.757 ops/s
Iteration  16: 2658022.620 ops/s
Iteration  17: 2684087.078 ops/s
Iteration  18: 2682344.876 ops/s
Iteration  19: 2672292.763 ops/s
Iteration  20: 2677385.568 ops/s
Iteration  21: 2681738.092 ops/s
Iteration  22: 2684622.198 ops/s
Iteration  23: 2671094.859 ops/s
Iteration  24: 2677935.585 ops/s
Iteration  25: 2674682.846 ops/s
Iteration  26: 2665874.124 ops/s
Iteration  27: 2683631.406 ops/s
Iteration  28: 2690612.810 ops/s
Iteration  29: 2673788.766 ops/s
Iteration  30: 2683957.558 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target":
  2676363.076 ±(99.9%) 4942.005 ops/s [Average]
  (min, avg, max) = (2658022.620, 2676363.076, 2690612.810), stdev = 7396.961
  CI (99.9%): [2671421.071, 2681305.081] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_groupByUniqueKey_target  thrpt   30  2676363.076 ± 4942.005  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 416768.771 ops/s
# Warmup Iteration   2: 486050.201 ops/s
# Warmup Iteration   3: 635944.243 ops/s
# Warmup Iteration   4: 632962.073 ops/s
# Warmup Iteration   5: 632416.145 ops/s
# Warmup Iteration   6: 633662.789 ops/s
# Warmup Iteration   7: 632693.671 ops/s
# Warmup Iteration   8: 634162.802 ops/s
# Warmup Iteration   9: 634835.625 ops/s
# Warmup Iteration  10: 527873.048 ops/s
# Warmup Iteration  11: 633380.250 ops/s
# Warmup Iteration  12: 633859.290 ops/s
# Warmup Iteration  13: 634891.862 ops/s
# Warmup Iteration  14: 632741.229 ops/s
# Warmup Iteration  15: 633879.073 ops/s
# Warmup Iteration  16: 633499.153 ops/s
# Warmup Iteration  17: 660410.337 ops/s
# Warmup Iteration  18: 660409.652 ops/s
# Warmup Iteration  19: 659705.683 ops/s
# Warmup Iteration  20: 658276.508 ops/s
# Warmup Iteration  21: 660297.462 ops/s
# Warmup Iteration  22: 659532.885 ops/s
# Warmup Iteration  23: 659737.674 ops/s
# Warmup Iteration  24: 659811.905 ops/s
# Warmup Iteration  25: 660966.883 ops/s
# Warmup Iteration  26: 660007.855 ops/s
# Warmup Iteration  27: 659791.460 ops/s
# Warmup Iteration  28: 659504.270 ops/s
# Warmup Iteration  29: 659119.269 ops/s
# Warmup Iteration  30: 659162.228 ops/s
Iteration   1: 660144.457 ops/s
Iteration   2: 657717.059 ops/s
Iteration   3: 658954.644 ops/s
Iteration   4: 659551.673 ops/s
Iteration   5: 657891.736 ops/s
Iteration   6: 661457.733 ops/s
Iteration   7: 659811.184 ops/s
Iteration   8: 659131.406 ops/s
Iteration   9: 659014.811 ops/s
Iteration  10: 658682.185 ops/s
Iteration  11: 659247.041 ops/s
Iteration  12: 656516.886 ops/s
Iteration  13: 659663.443 ops/s
Iteration  14: 658460.021 ops/s
Iteration  15: 658832.270 ops/s
Iteration  16: 659891.197 ops/s
Iteration  17: 660505.795 ops/s
Iteration  18: 658478.393 ops/s
Iteration  19: 660710.253 ops/s
Iteration  20: 659197.862 ops/s
Iteration  21: 660900.983 ops/s
Iteration  22: 658168.003 ops/s
Iteration  23: 660134.287 ops/s
Iteration  24: 658261.712 ops/s
Iteration  25: 661022.944 ops/s
Iteration  26: 660552.517 ops/s
Iteration  27: 658386.654 ops/s
Iteration  28: 661121.483 ops/s
Iteration  29: 658300.393 ops/s
Iteration  30: 660086.987 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate":
  659359.867 ±(99.9%) 783.627 ops/s [Average]
  (min, avg, max) = (656516.886, 659359.867, 661457.733), stdev = 1172.897
  CI (99.9%): [658576.240, 660143.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_groupByUniqueKey_target_throws_for_duplicate  thrpt   30  659359.867 ± 783.627  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441097.278 ops/s
# Warmup Iteration   2: 483108.709 ops/s
# Warmup Iteration   3: 644834.205 ops/s
# Warmup Iteration   4: 641273.201 ops/s
# Warmup Iteration   5: 637419.025 ops/s
# Warmup Iteration   6: 641284.908 ops/s
# Warmup Iteration   7: 642226.284 ops/s
# Warmup Iteration   8: 640596.670 ops/s
# Warmup Iteration   9: 641717.195 ops/s
# Warmup Iteration  10: 641255.069 ops/s
# Warmup Iteration  11: 536308.799 ops/s
# Warmup Iteration  12: 642066.189 ops/s
# Warmup Iteration  13: 641904.593 ops/s
# Warmup Iteration  14: 642534.285 ops/s
# Warmup Iteration  15: 642216.132 ops/s
# Warmup Iteration  16: 640123.710 ops/s
# Warmup Iteration  17: 669036.013 ops/s
# Warmup Iteration  18: 670197.301 ops/s
# Warmup Iteration  19: 665332.663 ops/s
# Warmup Iteration  20: 670241.037 ops/s
# Warmup Iteration  21: 668185.402 ops/s
# Warmup Iteration  22: 669707.146 ops/s
# Warmup Iteration  23: 669327.398 ops/s
# Warmup Iteration  24: 668900.213 ops/s
# Warmup Iteration  25: 668831.710 ops/s
# Warmup Iteration  26: 669031.879 ops/s
# Warmup Iteration  27: 668787.099 ops/s
# Warmup Iteration  28: 669988.167 ops/s
# Warmup Iteration  29: 668734.929 ops/s
# Warmup Iteration  30: 667879.023 ops/s
Iteration   1: 668059.761 ops/s
Iteration   2: 668849.609 ops/s
Iteration   3: 672215.100 ops/s
Iteration   4: 669014.325 ops/s
Iteration   5: 666919.929 ops/s
Iteration   6: 668667.345 ops/s
Iteration   7: 669419.068 ops/s
Iteration   8: 667252.586 ops/s
Iteration   9: 669082.167 ops/s
Iteration  10: 666971.531 ops/s
Iteration  11: 669453.328 ops/s
Iteration  12: 668568.781 ops/s
Iteration  13: 670022.521 ops/s
Iteration  14: 671125.844 ops/s
Iteration  15: 670253.456 ops/s
Iteration  16: 669854.821 ops/s
Iteration  17: 669651.474 ops/s
Iteration  18: 670218.609 ops/s
Iteration  19: 668755.835 ops/s
Iteration  20: 669173.825 ops/s
Iteration  21: 670587.744 ops/s
Iteration  22: 670606.087 ops/s
Iteration  23: 667955.487 ops/s
Iteration  24: 670207.120 ops/s
Iteration  25: 669196.101 ops/s
Iteration  26: 667557.643 ops/s
Iteration  27: 667952.115 ops/s
Iteration  28: 668191.380 ops/s
Iteration  29: 668372.889 ops/s
Iteration  30: 667047.312 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate":
  669040.126 ±(99.9%) 868.159 ops/s [Average]
  (min, avg, max) = (666919.929, 669040.126, 672215.100), stdev = 1299.420
  CI (99.9%): [668171.967, 669908.286] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_groupByUniqueKey_throws_for_duplicate  thrpt   30  669040.126 ± 868.159  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectInto$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectInto

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2457568.054 ops/s
# Warmup Iteration   2: 4596919.173 ops/s
# Warmup Iteration   3: 5035587.102 ops/s
# Warmup Iteration   4: 5067716.530 ops/s
# Warmup Iteration   5: 4273711.778 ops/s
# Warmup Iteration   6: 4909946.691 ops/s
# Warmup Iteration   7: 5036021.098 ops/s
# Warmup Iteration   8: 5063018.981 ops/s
# Warmup Iteration   9: 5041470.402 ops/s
# Warmup Iteration  10: 5043627.228 ops/s
# Warmup Iteration  11: 5050312.973 ops/s
# Warmup Iteration  12: 5060150.288 ops/s
# Warmup Iteration  13: 5037537.927 ops/s
# Warmup Iteration  14: 5058178.493 ops/s
# Warmup Iteration  15: 5048494.194 ops/s
# Warmup Iteration  16: 5049454.273 ops/s
# Warmup Iteration  17: 5062066.737 ops/s
# Warmup Iteration  18: 5082856.241 ops/s
# Warmup Iteration  19: 5066894.601 ops/s
# Warmup Iteration  20: 5069200.428 ops/s
# Warmup Iteration  21: 5080736.469 ops/s
# Warmup Iteration  22: 5059791.131 ops/s
# Warmup Iteration  23: 5059733.345 ops/s
# Warmup Iteration  24: 5064339.483 ops/s
# Warmup Iteration  25: 5070824.774 ops/s
# Warmup Iteration  26: 5068447.485 ops/s
# Warmup Iteration  27: 5067164.455 ops/s
# Warmup Iteration  28: 5081634.999 ops/s
# Warmup Iteration  29: 5068241.265 ops/s
# Warmup Iteration  30: 5058021.730 ops/s
Iteration   1: 5056209.488 ops/s
Iteration   2: 5070093.417 ops/s
Iteration   3: 5084181.965 ops/s
Iteration   4: 5062003.017 ops/s
Iteration   5: 5065775.501 ops/s
Iteration   6: 5069086.882 ops/s
Iteration   7: 5067909.499 ops/s
Iteration   8: 5057162.434 ops/s
Iteration   9: 5059139.772 ops/s
Iteration  10: 5069878.663 ops/s
Iteration  11: 5074998.593 ops/s
Iteration  12: 5061996.727 ops/s
Iteration  13: 5040642.579 ops/s
Iteration  14: 5079601.113 ops/s
Iteration  15: 5062311.069 ops/s
Iteration  16: 5075422.208 ops/s
Iteration  17: 5056535.053 ops/s
Iteration  18: 5065013.715 ops/s
Iteration  19: 5071297.990 ops/s
Iteration  20: 5071871.008 ops/s
Iteration  21: 5067784.439 ops/s
Iteration  22: 5085388.651 ops/s
Iteration  23: 5073887.540 ops/s
Iteration  24: 5075592.312 ops/s
Iteration  25: 5083618.952 ops/s
Iteration  26: 5076880.391 ops/s
Iteration  27: 5080854.756 ops/s
Iteration  28: 5077535.442 ops/s
Iteration  29: 5047554.326 ops/s
Iteration  30: 5076464.376 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectInto":
  5068889.729 ±(99.9%) 7135.841 ops/s [Average]
  (min, avg, max) = (5040642.579, 5068889.729, 5085388.651), stdev = 10680.592
  CI (99.9%): [5061753.888, 5076025.571] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectInto  thrpt   30  5068889.729 ± 7135.841  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2482051.245 ops/s
# Warmup Iteration   2: 4648178.516 ops/s
# Warmup Iteration   3: 5056567.043 ops/s
# Warmup Iteration   4: 5109717.631 ops/s
# Warmup Iteration   5: 4233685.730 ops/s
# Warmup Iteration   6: 5074419.933 ops/s
# Warmup Iteration   7: 5106303.363 ops/s
# Warmup Iteration   8: 5109971.244 ops/s
# Warmup Iteration   9: 5106104.022 ops/s
# Warmup Iteration  10: 5113541.453 ops/s
# Warmup Iteration  11: 5120274.898 ops/s
# Warmup Iteration  12: 5116416.700 ops/s
# Warmup Iteration  13: 5122521.854 ops/s
# Warmup Iteration  14: 5127008.654 ops/s
# Warmup Iteration  15: 5127873.024 ops/s
# Warmup Iteration  16: 5112661.627 ops/s
# Warmup Iteration  17: 5117826.477 ops/s
# Warmup Iteration  18: 5126612.205 ops/s
# Warmup Iteration  19: 5110263.973 ops/s
# Warmup Iteration  20: 5121130.714 ops/s
# Warmup Iteration  21: 5105050.243 ops/s
# Warmup Iteration  22: 5125810.560 ops/s
# Warmup Iteration  23: 5114378.370 ops/s
# Warmup Iteration  24: 5122485.421 ops/s
# Warmup Iteration  25: 5120581.776 ops/s
# Warmup Iteration  26: 5112415.490 ops/s
# Warmup Iteration  27: 5116985.121 ops/s
# Warmup Iteration  28: 5119012.102 ops/s
# Warmup Iteration  29: 5113597.870 ops/s
# Warmup Iteration  30: 5112715.242 ops/s
Iteration   1: 5115292.126 ops/s
Iteration   2: 5100231.882 ops/s
Iteration   3: 5113764.657 ops/s
Iteration   4: 5129426.890 ops/s
Iteration   5: 5111059.346 ops/s
Iteration   6: 5107083.479 ops/s
Iteration   7: 5119633.823 ops/s
Iteration   8: 5111548.597 ops/s
Iteration   9: 5103312.940 ops/s
Iteration  10: 5130847.585 ops/s
Iteration  11: 5094994.115 ops/s
Iteration  12: 5130218.024 ops/s
Iteration  13: 5123687.852 ops/s
Iteration  14: 5130209.322 ops/s
Iteration  15: 5121905.817 ops/s
Iteration  16: 5102796.687 ops/s
Iteration  17: 5119332.865 ops/s
Iteration  18: 5130465.775 ops/s
Iteration  19: 5113165.867 ops/s
Iteration  20: 5109234.179 ops/s
Iteration  21: 5110886.650 ops/s
Iteration  22: 5118942.097 ops/s
Iteration  23: 5106034.249 ops/s
Iteration  24: 5113354.517 ops/s
Iteration  25: 5105586.933 ops/s
Iteration  26: 5137247.379 ops/s
Iteration  27: 5114422.700 ops/s
Iteration  28: 5122861.270 ops/s
Iteration  29: 5110803.703 ops/s
Iteration  30: 5128352.742 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoDouble":
  5116223.469 ±(99.9%) 7093.687 ops/s [Average]
  (min, avg, max) = (5094994.115, 5116223.469, 5137247.379), stdev = 10617.498
  CI (99.9%): [5109129.782, 5123317.156] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectIntoDouble  thrpt   30  5116223.469 ± 7093.687  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2487139.640 ops/s
# Warmup Iteration   2: 4671349.642 ops/s
# Warmup Iteration   3: 5099144.125 ops/s
# Warmup Iteration   4: 5134171.115 ops/s
# Warmup Iteration   5: 4195462.834 ops/s
# Warmup Iteration   6: 5152427.881 ops/s
# Warmup Iteration   7: 5153765.866 ops/s
# Warmup Iteration   8: 5136980.160 ops/s
# Warmup Iteration   9: 5137484.102 ops/s
# Warmup Iteration  10: 5146666.434 ops/s
# Warmup Iteration  11: 5141082.087 ops/s
# Warmup Iteration  12: 5145137.090 ops/s
# Warmup Iteration  13: 5145834.406 ops/s
# Warmup Iteration  14: 5150399.705 ops/s
# Warmup Iteration  15: 5140592.772 ops/s
# Warmup Iteration  16: 5144442.309 ops/s
# Warmup Iteration  17: 5143297.155 ops/s
# Warmup Iteration  18: 5136843.870 ops/s
# Warmup Iteration  19: 5149369.968 ops/s
# Warmup Iteration  20: 5137317.185 ops/s
# Warmup Iteration  21: 5138934.521 ops/s
# Warmup Iteration  22: 5134698.854 ops/s
# Warmup Iteration  23: 5148215.856 ops/s
# Warmup Iteration  24: 5148009.395 ops/s
# Warmup Iteration  25: 5139662.913 ops/s
# Warmup Iteration  26: 5130007.516 ops/s
# Warmup Iteration  27: 5125487.378 ops/s
# Warmup Iteration  28: 5134339.875 ops/s
# Warmup Iteration  29: 5121010.193 ops/s
# Warmup Iteration  30: 5145632.452 ops/s
Iteration   1: 5128410.984 ops/s
Iteration   2: 5133276.213 ops/s
Iteration   3: 5128072.342 ops/s
Iteration   4: 5131582.782 ops/s
Iteration   5: 5146487.467 ops/s
Iteration   6: 5154903.659 ops/s
Iteration   7: 5136087.170 ops/s
Iteration   8: 5135509.331 ops/s
Iteration   9: 5128732.633 ops/s
Iteration  10: 5137636.631 ops/s
Iteration  11: 5122971.501 ops/s
Iteration  12: 5139210.272 ops/s
Iteration  13: 5128150.623 ops/s
Iteration  14: 5127271.544 ops/s
Iteration  15: 5142852.902 ops/s
Iteration  16: 5146823.000 ops/s
Iteration  17: 5149118.954 ops/s
Iteration  18: 5130060.841 ops/s
Iteration  19: 5143738.446 ops/s
Iteration  20: 5144960.964 ops/s
Iteration  21: 5142713.088 ops/s
Iteration  22: 5166622.719 ops/s
Iteration  23: 5152346.966 ops/s
Iteration  24: 5160394.712 ops/s
Iteration  25: 5145747.028 ops/s
Iteration  26: 5140653.112 ops/s
Iteration  27: 5130955.120 ops/s
Iteration  28: 5142919.724 ops/s
Iteration  29: 5137903.596 ops/s
Iteration  30: 5162006.777 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoFloat":
  5140604.037 ±(99.9%) 7422.339 ops/s [Average]
  (min, avg, max) = (5122971.501, 5140604.037, 5166622.719), stdev = 11109.409
  CI (99.9%): [5133181.697, 5148026.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectIntoFloat  thrpt   30  5140604.037 ± 7422.339  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2466567.921 ops/s
# Warmup Iteration   2: 4602265.345 ops/s
# Warmup Iteration   3: 5173213.152 ops/s
# Warmup Iteration   4: 5149634.456 ops/s
# Warmup Iteration   5: 4229534.528 ops/s
# Warmup Iteration   6: 5181732.394 ops/s
# Warmup Iteration   7: 5189061.320 ops/s
# Warmup Iteration   8: 5182719.226 ops/s
# Warmup Iteration   9: 5186379.938 ops/s
# Warmup Iteration  10: 5179624.674 ops/s
# Warmup Iteration  11: 5178185.624 ops/s
# Warmup Iteration  12: 5187986.711 ops/s
# Warmup Iteration  13: 5176700.090 ops/s
# Warmup Iteration  14: 5196096.995 ops/s
# Warmup Iteration  15: 5194785.089 ops/s
# Warmup Iteration  16: 5202586.020 ops/s
# Warmup Iteration  17: 5176255.008 ops/s
# Warmup Iteration  18: 5181349.818 ops/s
# Warmup Iteration  19: 5204101.989 ops/s
# Warmup Iteration  20: 5194636.157 ops/s
# Warmup Iteration  21: 5199627.447 ops/s
# Warmup Iteration  22: 5184464.043 ops/s
# Warmup Iteration  23: 5200769.057 ops/s
# Warmup Iteration  24: 5184744.106 ops/s
# Warmup Iteration  25: 5182065.089 ops/s
# Warmup Iteration  26: 5200896.581 ops/s
# Warmup Iteration  27: 5206623.472 ops/s
# Warmup Iteration  28: 5195792.953 ops/s
# Warmup Iteration  29: 5183620.446 ops/s
# Warmup Iteration  30: 5189366.630 ops/s
Iteration   1: 5207168.321 ops/s
Iteration   2: 5192486.359 ops/s
Iteration   3: 5188139.289 ops/s
Iteration   4: 5189079.219 ops/s
Iteration   5: 5192425.308 ops/s
Iteration   6: 5200288.227 ops/s
Iteration   7: 5171905.648 ops/s
Iteration   8: 5203686.701 ops/s
Iteration   9: 5196142.561 ops/s
Iteration  10: 5193956.027 ops/s
Iteration  11: 5205339.502 ops/s
Iteration  12: 5186029.425 ops/s
Iteration  13: 5161060.221 ops/s
Iteration  14: 5203177.900 ops/s
Iteration  15: 5181925.940 ops/s
Iteration  16: 5181332.943 ops/s
Iteration  17: 5203280.434 ops/s
Iteration  18: 5176283.121 ops/s
Iteration  19: 5188752.311 ops/s
Iteration  20: 5197280.903 ops/s
Iteration  21: 5185628.968 ops/s
Iteration  22: 5189356.936 ops/s
Iteration  23: 5207274.249 ops/s
Iteration  24: 5195732.602 ops/s
Iteration  25: 5184709.520 ops/s
Iteration  26: 5198540.137 ops/s
Iteration  27: 5176942.790 ops/s
Iteration  28: 5208355.739 ops/s
Iteration  29: 5192396.304 ops/s
Iteration  30: 5194938.039 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoInt":
  5191787.188 ±(99.9%) 7546.762 ops/s [Average]
  (min, avg, max) = (5161060.221, 5191787.188, 5208355.739), stdev = 11295.639
  CI (99.9%): [5184240.426, 5199333.950] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectIntoInt  thrpt   30  5191787.188 ± 7546.762  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2487776.191 ops/s
# Warmup Iteration   2: 4694221.732 ops/s
# Warmup Iteration   3: 5189823.501 ops/s
# Warmup Iteration   4: 5211154.456 ops/s
# Warmup Iteration   5: 4260746.424 ops/s
# Warmup Iteration   6: 5226288.172 ops/s
# Warmup Iteration   7: 5232608.276 ops/s
# Warmup Iteration   8: 5213770.710 ops/s
# Warmup Iteration   9: 5231492.837 ops/s
# Warmup Iteration  10: 5223207.831 ops/s
# Warmup Iteration  11: 5231308.163 ops/s
# Warmup Iteration  12: 5237152.624 ops/s
# Warmup Iteration  13: 5238810.092 ops/s
# Warmup Iteration  14: 5238411.571 ops/s
# Warmup Iteration  15: 5231309.702 ops/s
# Warmup Iteration  16: 5252327.406 ops/s
# Warmup Iteration  17: 5239465.390 ops/s
# Warmup Iteration  18: 5242396.188 ops/s
# Warmup Iteration  19: 5227851.186 ops/s
# Warmup Iteration  20: 5241791.887 ops/s
# Warmup Iteration  21: 5232325.145 ops/s
# Warmup Iteration  22: 5245863.409 ops/s
# Warmup Iteration  23: 5233411.687 ops/s
# Warmup Iteration  24: 5238002.930 ops/s
# Warmup Iteration  25: 5235885.141 ops/s
# Warmup Iteration  26: 5232508.333 ops/s
# Warmup Iteration  27: 5232387.611 ops/s
# Warmup Iteration  28: 5247724.577 ops/s
# Warmup Iteration  29: 5228231.498 ops/s
# Warmup Iteration  30: 5232618.454 ops/s
Iteration   1: 5245666.167 ops/s
Iteration   2: 5232645.217 ops/s
Iteration   3: 5230685.610 ops/s
Iteration   4: 5234922.427 ops/s
Iteration   5: 5235980.250 ops/s
Iteration   6: 5242494.204 ops/s
Iteration   7: 5229846.873 ops/s
Iteration   8: 5236729.003 ops/s
Iteration   9: 5242352.065 ops/s
Iteration  10: 5241961.147 ops/s
Iteration  11: 5239292.826 ops/s
Iteration  12: 5232832.871 ops/s
Iteration  13: 5232590.705 ops/s
Iteration  14: 5221411.388 ops/s
Iteration  15: 5256679.775 ops/s
Iteration  16: 5247590.354 ops/s
Iteration  17: 5224427.591 ops/s
Iteration  18: 5249903.125 ops/s
Iteration  19: 5235661.335 ops/s
Iteration  20: 5258180.964 ops/s
Iteration  21: 5238076.899 ops/s
Iteration  22: 5227196.450 ops/s
Iteration  23: 5224354.644 ops/s
Iteration  24: 5247439.660 ops/s
Iteration  25: 5226959.337 ops/s
Iteration  26: 5226736.612 ops/s
Iteration  27: 5258671.968 ops/s
Iteration  28: 5221469.881 ops/s
Iteration  29: 5245334.578 ops/s
Iteration  30: 5249612.598 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoLong":
  5237923.551 ±(99.9%) 7148.156 ops/s [Average]
  (min, avg, max) = (5221411.388, 5237923.551, 5258671.968), stdev = 10699.024
  CI (99.9%): [5230775.395, 5245071.706] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectIntoLong  thrpt   30  5237923.551 ± 7148.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2655945.303 ops/s
# Warmup Iteration   2: 4906868.305 ops/s
# Warmup Iteration   3: 5359095.421 ops/s
# Warmup Iteration   4: 5385034.166 ops/s
# Warmup Iteration   5: 4603391.524 ops/s
# Warmup Iteration   6: 5206992.278 ops/s
# Warmup Iteration   7: 5390029.478 ops/s
# Warmup Iteration   8: 5403287.590 ops/s
# Warmup Iteration   9: 5393316.449 ops/s
# Warmup Iteration  10: 5401357.599 ops/s
# Warmup Iteration  11: 5393085.498 ops/s
# Warmup Iteration  12: 5396090.830 ops/s
# Warmup Iteration  13: 5388943.897 ops/s
# Warmup Iteration  14: 5394259.510 ops/s
# Warmup Iteration  15: 5394280.801 ops/s
# Warmup Iteration  16: 5387523.405 ops/s
# Warmup Iteration  17: 5389515.288 ops/s
# Warmup Iteration  18: 5394599.466 ops/s
# Warmup Iteration  19: 5400944.956 ops/s
# Warmup Iteration  20: 5393699.483 ops/s
# Warmup Iteration  21: 5404802.309 ops/s
# Warmup Iteration  22: 5384266.659 ops/s
# Warmup Iteration  23: 5398341.456 ops/s
# Warmup Iteration  24: 5391952.143 ops/s
# Warmup Iteration  25: 5399849.313 ops/s
# Warmup Iteration  26: 5383436.101 ops/s
# Warmup Iteration  27: 5394477.341 ops/s
# Warmup Iteration  28: 5388445.036 ops/s
# Warmup Iteration  29: 5392798.971 ops/s
# Warmup Iteration  30: 5408636.327 ops/s
Iteration   1: 5385286.721 ops/s
Iteration   2: 5404608.782 ops/s
Iteration   3: 5384006.477 ops/s
Iteration   4: 5389707.917 ops/s
Iteration   5: 5404314.281 ops/s
Iteration   6: 5382169.003 ops/s
Iteration   7: 5375459.658 ops/s
Iteration   8: 5398524.250 ops/s
Iteration   9: 5384482.860 ops/s
Iteration  10: 5391167.330 ops/s
Iteration  11: 5389051.059 ops/s
Iteration  12: 5387680.011 ops/s
Iteration  13: 5397379.947 ops/s
Iteration  14: 5394544.073 ops/s
Iteration  15: 5391962.708 ops/s
Iteration  16: 5390506.410 ops/s
Iteration  17: 5382235.654 ops/s
Iteration  18: 5399896.121 ops/s
Iteration  19: 5408549.087 ops/s
Iteration  20: 5415719.578 ops/s
Iteration  21: 5397717.587 ops/s
Iteration  22: 5400188.728 ops/s
Iteration  23: 5384012.145 ops/s
Iteration  24: 5394050.186 ops/s
Iteration  25: 5384732.681 ops/s
Iteration  26: 5388598.220 ops/s
Iteration  27: 5402456.907 ops/s
Iteration  28: 5382383.674 ops/s
Iteration  29: 5403233.961 ops/s
Iteration  30: 5391377.034 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_injectIntoWith":
  5392866.768 ±(99.9%) 6193.390 ops/s [Average]
  (min, avg, max) = (5375459.658, 5392866.768, 5415719.578), stdev = 9269.976
  CI (99.9%): [5386673.378, 5399060.159] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_injectIntoWith  thrpt   30  5392866.768 ± 6193.390  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_isEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_isEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1899928.808 ops/s
# Warmup Iteration   2: 4220570.024 ops/s
# Warmup Iteration   3: 3607681.625 ops/s
# Warmup Iteration   4: 4327507.490 ops/s
# Warmup Iteration   5: 4349275.401 ops/s
# Warmup Iteration   6: 4320794.596 ops/s
# Warmup Iteration   7: 4343286.774 ops/s
# Warmup Iteration   8: 4330218.269 ops/s
# Warmup Iteration   9: 4347576.311 ops/s
# Warmup Iteration  10: 4352369.619 ops/s
# Warmup Iteration  11: 4337755.040 ops/s
# Warmup Iteration  12: 4351586.675 ops/s
# Warmup Iteration  13: 4342051.088 ops/s
# Warmup Iteration  14: 4353500.672 ops/s
# Warmup Iteration  15: 4353646.810 ops/s
# Warmup Iteration  16: 4342658.088 ops/s
# Warmup Iteration  17: 4345477.989 ops/s
# Warmup Iteration  18: 4354539.409 ops/s
# Warmup Iteration  19: 4349946.845 ops/s
# Warmup Iteration  20: 4359611.485 ops/s
# Warmup Iteration  21: 4349820.368 ops/s
# Warmup Iteration  22: 4344329.770 ops/s
# Warmup Iteration  23: 4353316.150 ops/s
# Warmup Iteration  24: 4339938.578 ops/s
# Warmup Iteration  25: 4344907.468 ops/s
# Warmup Iteration  26: 4342395.350 ops/s
# Warmup Iteration  27: 4356716.005 ops/s
# Warmup Iteration  28: 4339710.336 ops/s
# Warmup Iteration  29: 4344632.464 ops/s
# Warmup Iteration  30: 4353436.755 ops/s
Iteration   1: 4332031.307 ops/s
Iteration   2: 4356273.383 ops/s
Iteration   3: 4354800.797 ops/s
Iteration   4: 4331177.537 ops/s
Iteration   5: 4339978.223 ops/s
Iteration   6: 4363987.149 ops/s
Iteration   7: 4343152.783 ops/s
Iteration   8: 4365450.011 ops/s
Iteration   9: 4357320.312 ops/s
Iteration  10: 4357849.014 ops/s
Iteration  11: 4330040.396 ops/s
Iteration  12: 4357643.495 ops/s
Iteration  13: 4345384.467 ops/s
Iteration  14: 4366156.115 ops/s
Iteration  15: 4367370.812 ops/s
Iteration  16: 4356348.815 ops/s
Iteration  17: 4362803.850 ops/s
Iteration  18: 4360452.318 ops/s
Iteration  19: 4357306.119 ops/s
Iteration  20: 4349694.515 ops/s
Iteration  21: 4378175.999 ops/s
Iteration  22: 4342838.966 ops/s
Iteration  23: 4355929.778 ops/s
Iteration  24: 4348990.239 ops/s
Iteration  25: 4361049.238 ops/s
Iteration  26: 4362449.889 ops/s
Iteration  27: 4340755.173 ops/s
Iteration  28: 4351655.761 ops/s
Iteration  29: 4365711.838 ops/s
Iteration  30: 4352587.918 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_isEmpty":
  4353845.541 ±(99.9%) 7748.702 ops/s [Average]
  (min, avg, max) = (4330040.396, 4353845.541, 4378175.999), stdev = 11597.894
  CI (99.9%): [4346096.838, 4361594.243] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_isEmpty  thrpt   30  4353845.541 ± 7748.702  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 101840.646 ops/s
# Warmup Iteration   2: 116405.308 ops/s
# Warmup Iteration   3: 134473.087 ops/s
# Warmup Iteration   4: 149207.425 ops/s
# Warmup Iteration   5: 148495.598 ops/s
# Warmup Iteration   6: 148667.442 ops/s
# Warmup Iteration   7: 147938.601 ops/s
# Warmup Iteration   8: 148831.876 ops/s
# Warmup Iteration   9: 149150.166 ops/s
# Warmup Iteration  10: 148789.246 ops/s
# Warmup Iteration  11: 148906.153 ops/s
# Warmup Iteration  12: 149193.751 ops/s
# Warmup Iteration  13: 149130.831 ops/s
# Warmup Iteration  14: 133491.406 ops/s
# Warmup Iteration  15: 140292.493 ops/s
# Warmup Iteration  16: 148890.879 ops/s
# Warmup Iteration  17: 155039.962 ops/s
# Warmup Iteration  18: 154733.444 ops/s
# Warmup Iteration  19: 155029.515 ops/s
# Warmup Iteration  20: 154675.550 ops/s
# Warmup Iteration  21: 155254.558 ops/s
# Warmup Iteration  22: 155037.966 ops/s
# Warmup Iteration  23: 154874.957 ops/s
# Warmup Iteration  24: 155425.381 ops/s
# Warmup Iteration  25: 155223.132 ops/s
# Warmup Iteration  26: 155487.780 ops/s
# Warmup Iteration  27: 155197.907 ops/s
# Warmup Iteration  28: 155263.206 ops/s
# Warmup Iteration  29: 155337.885 ops/s
# Warmup Iteration  30: 155369.503 ops/s
Iteration   1: 155090.646 ops/s
Iteration   2: 154982.220 ops/s
Iteration   3: 155312.973 ops/s
Iteration   4: 155251.477 ops/s
Iteration   5: 154701.777 ops/s
Iteration   6: 154875.746 ops/s
Iteration   7: 155072.762 ops/s
Iteration   8: 155714.536 ops/s
Iteration   9: 155409.201 ops/s
Iteration  10: 155082.570 ops/s
Iteration  11: 155156.467 ops/s
Iteration  12: 155021.934 ops/s
Iteration  13: 155625.951 ops/s
Iteration  14: 155724.602 ops/s
Iteration  15: 155282.707 ops/s
Iteration  16: 155394.588 ops/s
Iteration  17: 154754.559 ops/s
Iteration  18: 154839.269 ops/s
Iteration  19: 155127.813 ops/s
Iteration  20: 155471.903 ops/s
Iteration  21: 154782.385 ops/s
Iteration  22: 155493.126 ops/s
Iteration  23: 155411.033 ops/s
Iteration  24: 154946.621 ops/s
Iteration  25: 155259.136 ops/s
Iteration  26: 155215.065 ops/s
Iteration  27: 155292.552 ops/s
Iteration  28: 155352.627 ops/s
Iteration  29: 155418.561 ops/s
Iteration  30: 155316.347 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator":
  155212.705 ±(99.9%) 182.777 ops/s [Average]
  (min, avg, max) = (154701.777, 155212.705, 155724.602), stdev = 273.572
  CI (99.9%): [155029.929, 155395.482] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_iterator  thrpt   30  155212.705 ± 182.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1798482.261 ops/s
# Warmup Iteration   2: 2723730.302 ops/s
# Warmup Iteration   3: 3232486.898 ops/s
# Warmup Iteration   4: 3253803.189 ops/s
# Warmup Iteration   5: 3263910.334 ops/s
# Warmup Iteration   6: 3259171.196 ops/s
# Warmup Iteration   7: 2681655.623 ops/s
# Warmup Iteration   8: 3258181.364 ops/s
# Warmup Iteration   9: 3262082.500 ops/s
# Warmup Iteration  10: 3262717.323 ops/s
# Warmup Iteration  11: 3254083.839 ops/s
# Warmup Iteration  12: 3266156.927 ops/s
# Warmup Iteration  13: 3262993.392 ops/s
# Warmup Iteration  14: 3260076.525 ops/s
# Warmup Iteration  15: 3256549.802 ops/s
# Warmup Iteration  16: 3260109.196 ops/s
# Warmup Iteration  17: 3258994.889 ops/s
# Warmup Iteration  18: 3255440.953 ops/s
# Warmup Iteration  19: 3263581.631 ops/s
# Warmup Iteration  20: 3256743.344 ops/s
# Warmup Iteration  21: 3259894.300 ops/s
# Warmup Iteration  22: 3257823.439 ops/s
# Warmup Iteration  23: 3265836.721 ops/s
# Warmup Iteration  24: 3255566.983 ops/s
# Warmup Iteration  25: 3249844.898 ops/s
# Warmup Iteration  26: 3257894.037 ops/s
# Warmup Iteration  27: 3264097.515 ops/s
# Warmup Iteration  28: 3254106.299 ops/s
# Warmup Iteration  29: 3262028.051 ops/s
# Warmup Iteration  30: 3261328.041 ops/s
Iteration   1: 3259073.730 ops/s
Iteration   2: 3267610.246 ops/s
Iteration   3: 3266760.372 ops/s
Iteration   4: 3265102.530 ops/s
Iteration   5: 3263252.820 ops/s
Iteration   6: 3274064.123 ops/s
Iteration   7: 3256066.060 ops/s
Iteration   8: 3265129.025 ops/s
Iteration   9: 3263360.118 ops/s
Iteration  10: 3258262.589 ops/s
Iteration  11: 3264521.831 ops/s
Iteration  12: 3260721.117 ops/s
Iteration  13: 3269233.792 ops/s
Iteration  14: 3256815.389 ops/s
Iteration  15: 3262563.345 ops/s
Iteration  16: 3255384.920 ops/s
Iteration  17: 3250633.488 ops/s
Iteration  18: 3261861.639 ops/s
Iteration  19: 3252473.637 ops/s
Iteration  20: 3257242.540 ops/s
Iteration  21: 3252565.796 ops/s
Iteration  22: 3261919.602 ops/s
Iteration  23: 3259886.348 ops/s
Iteration  24: 3259564.049 ops/s
Iteration  25: 3244230.816 ops/s
Iteration  26: 3255627.385 ops/s
Iteration  27: 3263448.534 ops/s
Iteration  28: 3267008.272 ops/s
Iteration  29: 3257869.567 ops/s
Iteration  30: 3254805.334 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove":
  3260235.301 ±(99.9%) 4138.072 ops/s [Average]
  (min, avg, max) = (3244230.816, 3260235.301, 3274064.123), stdev = 6193.672
  CI (99.9%): [3256097.229, 3264373.372] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_iteratorRemove  thrpt   30  3260235.301 ± 4138.072  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1768269.603 ops/s
# Warmup Iteration   2: 2593199.843 ops/s
# Warmup Iteration   3: 3111257.419 ops/s
# Warmup Iteration   4: 3092093.207 ops/s
# Warmup Iteration   5: 3106285.804 ops/s
# Warmup Iteration   6: 3110926.893 ops/s
# Warmup Iteration   7: 2566550.218 ops/s
# Warmup Iteration   8: 3112544.755 ops/s
# Warmup Iteration   9: 3111160.369 ops/s
# Warmup Iteration  10: 3104806.283 ops/s
# Warmup Iteration  11: 3100112.480 ops/s
# Warmup Iteration  12: 3115000.658 ops/s
# Warmup Iteration  13: 3112288.701 ops/s
# Warmup Iteration  14: 3117248.154 ops/s
# Warmup Iteration  15: 3109871.079 ops/s
# Warmup Iteration  16: 3111889.126 ops/s
# Warmup Iteration  17: 3124170.035 ops/s
# Warmup Iteration  18: 3114914.536 ops/s
# Warmup Iteration  19: 3118450.939 ops/s
# Warmup Iteration  20: 3115800.726 ops/s
# Warmup Iteration  21: 3122867.406 ops/s
# Warmup Iteration  22: 3125612.900 ops/s
# Warmup Iteration  23: 3116236.539 ops/s
# Warmup Iteration  24: 3115464.539 ops/s
# Warmup Iteration  25: 3116829.416 ops/s
# Warmup Iteration  26: 3122267.828 ops/s
# Warmup Iteration  27: 3117205.722 ops/s
# Warmup Iteration  28: 3118230.929 ops/s
# Warmup Iteration  29: 3117197.346 ops/s
# Warmup Iteration  30: 3118788.849 ops/s
Iteration   1: 3116209.744 ops/s
Iteration   2: 3122080.471 ops/s
Iteration   3: 3126202.147 ops/s
Iteration   4: 3119277.121 ops/s
Iteration   5: 3124310.661 ops/s
Iteration   6: 3112627.357 ops/s
Iteration   7: 3125547.283 ops/s
Iteration   8: 3119472.824 ops/s
Iteration   9: 3124001.785 ops/s
Iteration  10: 3123867.639 ops/s
Iteration  11: 3115078.131 ops/s
Iteration  12: 3127061.545 ops/s
Iteration  13: 3107943.803 ops/s
Iteration  14: 3119741.252 ops/s
Iteration  15: 3119984.590 ops/s
Iteration  16: 3120667.299 ops/s
Iteration  17: 3102273.326 ops/s
Iteration  18: 3116966.838 ops/s
Iteration  19: 3116519.387 ops/s
Iteration  20: 3132891.704 ops/s
Iteration  21: 3118447.462 ops/s
Iteration  22: 3110496.865 ops/s
Iteration  23: 3123595.358 ops/s
Iteration  24: 3123610.785 ops/s
Iteration  25: 3116241.965 ops/s
Iteration  26: 3110779.207 ops/s
Iteration  27: 3115245.889 ops/s
Iteration  28: 3119775.341 ops/s
Iteration  29: 3120224.341 ops/s
Iteration  30: 3119424.179 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iteratorRemove2":
  3119018.877 ±(99.9%) 4163.742 ops/s [Average]
  (min, avg, max) = (3102273.326, 3119018.877, 3132891.704), stdev = 6232.094
  CI (99.9%): [3114855.134, 3123182.619] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_iteratorRemove2  thrpt   30  3119018.877 ± 4163.742  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 542007.326 ops/s
# Warmup Iteration   2: 570429.242 ops/s
# Warmup Iteration   3: 726072.609 ops/s
# Warmup Iteration   4: 744110.727 ops/s
# Warmup Iteration   5: 746649.798 ops/s
# Warmup Iteration   6: 738805.986 ops/s
# Warmup Iteration   7: 743261.068 ops/s
# Warmup Iteration   8: 749395.512 ops/s
# Warmup Iteration   9: 748149.747 ops/s
# Warmup Iteration  10: 749045.256 ops/s
# Warmup Iteration  11: 744032.440 ops/s
# Warmup Iteration  12: 678514.333 ops/s
# Warmup Iteration  13: 687133.648 ops/s
# Warmup Iteration  14: 745773.854 ops/s
# Warmup Iteration  15: 745395.861 ops/s
# Warmup Iteration  16: 747790.317 ops/s
# Warmup Iteration  17: 776108.306 ops/s
# Warmup Iteration  18: 779592.737 ops/s
# Warmup Iteration  19: 777093.288 ops/s
# Warmup Iteration  20: 777728.027 ops/s
# Warmup Iteration  21: 778500.254 ops/s
# Warmup Iteration  22: 779180.945 ops/s
# Warmup Iteration  23: 777824.734 ops/s
# Warmup Iteration  24: 779401.166 ops/s
# Warmup Iteration  25: 775194.891 ops/s
# Warmup Iteration  26: 779441.593 ops/s
# Warmup Iteration  27: 777108.818 ops/s
# Warmup Iteration  28: 776786.340 ops/s
# Warmup Iteration  29: 777143.191 ops/s
# Warmup Iteration  30: 778880.238 ops/s
Iteration   1: 780745.346 ops/s
Iteration   2: 773301.527 ops/s
Iteration   3: 781686.682 ops/s
Iteration   4: 778327.280 ops/s
Iteration   5: 777842.747 ops/s
Iteration   6: 775696.863 ops/s
Iteration   7: 779576.118 ops/s
Iteration   8: 777414.745 ops/s
Iteration   9: 777814.122 ops/s
Iteration  10: 780961.488 ops/s
Iteration  11: 782356.800 ops/s
Iteration  12: 778452.946 ops/s
Iteration  13: 780673.316 ops/s
Iteration  14: 777546.780 ops/s
Iteration  15: 776228.114 ops/s
Iteration  16: 780392.666 ops/s
Iteration  17: 778272.076 ops/s
Iteration  18: 783953.307 ops/s
Iteration  19: 776665.614 ops/s
Iteration  20: 779933.601 ops/s
Iteration  21: 778168.291 ops/s
Iteration  22: 777781.996 ops/s
Iteration  23: 779650.170 ops/s
Iteration  24: 780771.066 ops/s
Iteration  25: 779475.285 ops/s
Iteration  26: 779156.395 ops/s
Iteration  27: 776731.498 ops/s
Iteration  28: 781944.394 ops/s
Iteration  29: 779082.409 ops/s
Iteration  30: 779859.159 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_iterator_throws":
  779015.427 ±(99.9%) 1476.143 ops/s [Average]
  (min, avg, max) = (773301.527, 779015.427, 783953.307), stdev = 2209.422
  CI (99.9%): [777539.283, 780491.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_iterator_throws  thrpt   30  779015.427 ± 1476.143  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4.944 ops/s
# Warmup Iteration   2: 6.281 ops/s
# Warmup Iteration   3: 7.461 ops/s
# Warmup Iteration   4: 7.756 ops/s
# Warmup Iteration   5: 7.862 ops/s
# Warmup Iteration   6: 7.850 ops/s
# Warmup Iteration   7: 7.832 ops/s
# Warmup Iteration   8: 7.828 ops/s
# Warmup Iteration   9: 7.844 ops/s
# Warmup Iteration  10: 7.854 ops/s
# Warmup Iteration  11: 7.821 ops/s
# Warmup Iteration  12: 7.892 ops/s
# Warmup Iteration  13: 6.859 ops/s
# Warmup Iteration  14: 7.919 ops/s
# Warmup Iteration  15: 7.898 ops/s
# Warmup Iteration  16: 7.909 ops/s
# Warmup Iteration  17: 7.870 ops/s
# Warmup Iteration  18: 7.851 ops/s
# Warmup Iteration  19: 7.910 ops/s
# Warmup Iteration  20: 7.904 ops/s
# Warmup Iteration  21: 7.944 ops/s
# Warmup Iteration  22: 7.885 ops/s
# Warmup Iteration  23: 7.931 ops/s
# Warmup Iteration  24: 7.900 ops/s
# Warmup Iteration  25: 7.937 ops/s
# Warmup Iteration  26: 7.876 ops/s
# Warmup Iteration  27: 7.882 ops/s
# Warmup Iteration  28: 7.869 ops/s
# Warmup Iteration  29: 7.860 ops/s
# Warmup Iteration  30: 7.890 ops/s
Iteration   1: 7.928 ops/s
Iteration   2: 7.871 ops/s
Iteration   3: 7.864 ops/s
Iteration   4: 7.937 ops/s
Iteration   5: 7.925 ops/s
Iteration   6: 7.922 ops/s
Iteration   7: 7.898 ops/s
Iteration   8: 7.873 ops/s
Iteration   9: 7.932 ops/s
Iteration  10: 7.874 ops/s
Iteration  11: 7.929 ops/s
Iteration  12: 7.887 ops/s
Iteration  13: 7.887 ops/s
Iteration  14: 7.897 ops/s
Iteration  15: 7.817 ops/s
Iteration  16: 7.945 ops/s
Iteration  17: 7.877 ops/s
Iteration  18: 7.870 ops/s
Iteration  19: 7.847 ops/s
Iteration  20: 7.939 ops/s
Iteration  21: 7.854 ops/s
Iteration  22: 7.934 ops/s
Iteration  23: 7.910 ops/s
Iteration  24: 7.872 ops/s
Iteration  25: 7.906 ops/s
Iteration  26: 7.924 ops/s
Iteration  27: 7.861 ops/s
Iteration  28: 7.894 ops/s
Iteration  29: 7.899 ops/s
Iteration  30: 7.897 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap":
  7.896 ±(99.9%) 0.021 ops/s [Average]
  (min, avg, max) = (7.817, 7.896, 7.945), stdev = 0.032
  CI (99.9%): [7.874, 7.917] (assumes normal distribution)


# Run complete. Total time: 00:01:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt  Score   Error  Units
HashBagTest._Benchmark.benchmark_largeCollectionStreamToBagMultimap  thrpt   30  7.896 ± 0.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1061348.343 ops/s
# Warmup Iteration   2: 2524239.744 ops/s
# Warmup Iteration   3: 2538735.930 ops/s
# Warmup Iteration   4: 2103840.330 ops/s
# Warmup Iteration   5: 2542007.888 ops/s
# Warmup Iteration   6: 2545613.050 ops/s
# Warmup Iteration   7: 2530891.189 ops/s
# Warmup Iteration   8: 2536613.239 ops/s
# Warmup Iteration   9: 2541302.937 ops/s
# Warmup Iteration  10: 2542280.865 ops/s
# Warmup Iteration  11: 2534176.871 ops/s
# Warmup Iteration  12: 2523479.492 ops/s
# Warmup Iteration  13: 2533487.905 ops/s
# Warmup Iteration  14: 2535917.811 ops/s
# Warmup Iteration  15: 2540859.125 ops/s
# Warmup Iteration  16: 2534741.791 ops/s
# Warmup Iteration  17: 2538118.895 ops/s
# Warmup Iteration  18: 2539632.766 ops/s
# Warmup Iteration  19: 2540126.947 ops/s
# Warmup Iteration  20: 2541128.961 ops/s
# Warmup Iteration  21: 2538063.483 ops/s
# Warmup Iteration  22: 2539434.940 ops/s
# Warmup Iteration  23: 2538211.524 ops/s
# Warmup Iteration  24: 2538138.507 ops/s
# Warmup Iteration  25: 2537463.975 ops/s
# Warmup Iteration  26: 2537664.186 ops/s
# Warmup Iteration  27: 2527952.574 ops/s
# Warmup Iteration  28: 2543449.085 ops/s
# Warmup Iteration  29: 2536965.166 ops/s
# Warmup Iteration  30: 2533956.900 ops/s
Iteration   1: 2541995.996 ops/s
Iteration   2: 2536714.019 ops/s
Iteration   3: 2532881.786 ops/s
Iteration   4: 2541482.135 ops/s
Iteration   5: 2542031.667 ops/s
Iteration   6: 2538440.640 ops/s
Iteration   7: 2538804.628 ops/s
Iteration   8: 2539734.616 ops/s
Iteration   9: 2540258.528 ops/s
Iteration  10: 2529801.086 ops/s
Iteration  11: 2539671.307 ops/s
Iteration  12: 2534943.744 ops/s
Iteration  13: 2533141.269 ops/s
Iteration  14: 2540103.401 ops/s
Iteration  15: 2542544.775 ops/s
Iteration  16: 2539254.415 ops/s
Iteration  17: 2543607.924 ops/s
Iteration  18: 2533416.796 ops/s
Iteration  19: 2531687.685 ops/s
Iteration  20: 2533931.242 ops/s
Iteration  21: 2535056.933 ops/s
Iteration  22: 2535261.708 ops/s
Iteration  23: 2535442.275 ops/s
Iteration  24: 2536945.881 ops/s
Iteration  25: 2535380.627 ops/s
Iteration  26: 2538815.048 ops/s
Iteration  27: 2534851.267 ops/s
Iteration  28: 2541676.728 ops/s
Iteration  29: 2540041.228 ops/s
Iteration  30: 2543264.281 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeString":
  2537706.121 ±(99.9%) 2492.695 ops/s [Average]
  (min, avg, max) = (2529801.086, 2537706.121, 2543607.924), stdev = 3730.949
  CI (99.9%): [2535213.426, 2540198.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_makeString  thrpt   30  2537706.121 ± 2492.695  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1042334.505 ops/s
# Warmup Iteration   2: 2436179.140 ops/s
# Warmup Iteration   3: 2427812.933 ops/s
# Warmup Iteration   4: 2017136.688 ops/s
# Warmup Iteration   5: 2418333.377 ops/s
# Warmup Iteration   6: 2424779.683 ops/s
# Warmup Iteration   7: 2424913.178 ops/s
# Warmup Iteration   8: 2413064.812 ops/s
# Warmup Iteration   9: 2428064.629 ops/s
# Warmup Iteration  10: 2422750.668 ops/s
# Warmup Iteration  11: 2421557.888 ops/s
# Warmup Iteration  12: 2420090.060 ops/s
# Warmup Iteration  13: 2417370.091 ops/s
# Warmup Iteration  14: 2420003.648 ops/s
# Warmup Iteration  15: 2424166.619 ops/s
# Warmup Iteration  16: 2425735.361 ops/s
# Warmup Iteration  17: 2426221.346 ops/s
# Warmup Iteration  18: 2426571.886 ops/s
# Warmup Iteration  19: 2431911.376 ops/s
# Warmup Iteration  20: 2426256.347 ops/s
# Warmup Iteration  21: 2427355.091 ops/s
# Warmup Iteration  22: 2428150.009 ops/s
# Warmup Iteration  23: 2429847.339 ops/s
# Warmup Iteration  24: 2423320.337 ops/s
# Warmup Iteration  25: 2425431.485 ops/s
# Warmup Iteration  26: 2428814.947 ops/s
# Warmup Iteration  27: 2418274.829 ops/s
# Warmup Iteration  28: 2426824.002 ops/s
# Warmup Iteration  29: 2424503.504 ops/s
# Warmup Iteration  30: 2422089.690 ops/s
Iteration   1: 2416226.708 ops/s
Iteration   2: 2416607.171 ops/s
Iteration   3: 2416460.251 ops/s
Iteration   4: 2420707.673 ops/s
Iteration   5: 2415024.360 ops/s
Iteration   6: 2423469.713 ops/s
Iteration   7: 2431967.804 ops/s
Iteration   8: 2429861.075 ops/s
Iteration   9: 2424109.812 ops/s
Iteration  10: 2433256.568 ops/s
Iteration  11: 2425081.427 ops/s
Iteration  12: 2430197.943 ops/s
Iteration  13: 2423567.887 ops/s
Iteration  14: 2421076.069 ops/s
Iteration  15: 2441117.221 ops/s
Iteration  16: 2429026.747 ops/s
Iteration  17: 2427349.696 ops/s
Iteration  18: 2426280.947 ops/s
Iteration  19: 2429377.850 ops/s
Iteration  20: 2422684.843 ops/s
Iteration  21: 2431826.825 ops/s
Iteration  22: 2422910.981 ops/s
Iteration  23: 2432668.272 ops/s
Iteration  24: 2432772.503 ops/s
Iteration  25: 2425136.767 ops/s
Iteration  26: 2432977.719 ops/s
Iteration  27: 2432065.598 ops/s
Iteration  28: 2426210.779 ops/s
Iteration  29: 2428243.089 ops/s
Iteration  30: 2435788.949 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparator":
  2426801.775 ±(99.9%) 4204.818 ops/s [Average]
  (min, avg, max) = (2415024.360, 2426801.775, 2441117.221), stdev = 6293.574
  CI (99.9%): [2422596.957, 2431006.593] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_makeStringWithSeparator  thrpt   30  2426801.775 ± 4204.818  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1088686.475 ops/s
# Warmup Iteration   2: 2248721.229 ops/s
# Warmup Iteration   3: 2303186.694 ops/s
# Warmup Iteration   4: 2314019.520 ops/s
# Warmup Iteration   5: 1927214.995 ops/s
# Warmup Iteration   6: 2318202.628 ops/s
# Warmup Iteration   7: 2323666.055 ops/s
# Warmup Iteration   8: 2309183.349 ops/s
# Warmup Iteration   9: 2308028.349 ops/s
# Warmup Iteration  10: 2314715.692 ops/s
# Warmup Iteration  11: 2317469.245 ops/s
# Warmup Iteration  12: 2312880.591 ops/s
# Warmup Iteration  13: 2318989.128 ops/s
# Warmup Iteration  14: 2322980.356 ops/s
# Warmup Iteration  15: 2318957.636 ops/s
# Warmup Iteration  16: 2321068.540 ops/s
# Warmup Iteration  17: 2316200.401 ops/s
# Warmup Iteration  18: 2310874.815 ops/s
# Warmup Iteration  19: 2317886.510 ops/s
# Warmup Iteration  20: 2318681.835 ops/s
# Warmup Iteration  21: 2314644.316 ops/s
# Warmup Iteration  22: 2307529.732 ops/s
# Warmup Iteration  23: 2312583.029 ops/s
# Warmup Iteration  24: 2314638.316 ops/s
# Warmup Iteration  25: 2311197.774 ops/s
# Warmup Iteration  26: 2308499.858 ops/s
# Warmup Iteration  27: 2318388.487 ops/s
# Warmup Iteration  28: 2317202.517 ops/s
# Warmup Iteration  29: 2311601.274 ops/s
# Warmup Iteration  30: 2316813.777 ops/s
Iteration   1: 2317494.408 ops/s
Iteration   2: 2324825.421 ops/s
Iteration   3: 2317698.777 ops/s
Iteration   4: 2313598.686 ops/s
Iteration   5: 2306036.540 ops/s
Iteration   6: 2326474.634 ops/s
Iteration   7: 2319103.623 ops/s
Iteration   8: 2310493.571 ops/s
Iteration   9: 2312917.018 ops/s
Iteration  10: 2321128.794 ops/s
Iteration  11: 2311347.758 ops/s
Iteration  12: 2315967.649 ops/s
Iteration  13: 2318420.224 ops/s
Iteration  14: 2324933.157 ops/s
Iteration  15: 2317818.939 ops/s
Iteration  16: 2316838.914 ops/s
Iteration  17: 2316948.023 ops/s
Iteration  18: 2301280.462 ops/s
Iteration  19: 2312275.690 ops/s
Iteration  20: 2309999.980 ops/s
Iteration  21: 2314308.774 ops/s
Iteration  22: 2310910.063 ops/s
Iteration  23: 2320565.883 ops/s
Iteration  24: 2318632.011 ops/s
Iteration  25: 2312903.063 ops/s
Iteration  26: 2315646.906 ops/s
Iteration  27: 2305526.965 ops/s
Iteration  28: 2318368.377 ops/s
Iteration  29: 2313293.759 ops/s
Iteration  30: 2317131.961 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd":
  2315429.668 ±(99.9%) 3788.921 ops/s [Average]
  (min, avg, max) = (2301280.462, 2315429.668, 2326474.634), stdev = 5671.078
  CI (99.9%): [2311640.747, 2319218.588] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_makeStringWithSeparatorAndStartAndEnd  thrpt   30  2315429.668 ± 3788.921  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2763405.053 ops/s
# Warmup Iteration   2: 4990107.426 ops/s
# Warmup Iteration   3: 5516245.042 ops/s
# Warmup Iteration   4: 5538152.809 ops/s
# Warmup Iteration   5: 5266478.737 ops/s
# Warmup Iteration   6: 4810499.997 ops/s
# Warmup Iteration   7: 5545824.685 ops/s
# Warmup Iteration   8: 5546618.503 ops/s
# Warmup Iteration   9: 5556197.157 ops/s
# Warmup Iteration  10: 5533730.845 ops/s
# Warmup Iteration  11: 5541232.763 ops/s
# Warmup Iteration  12: 5536750.103 ops/s
# Warmup Iteration  13: 5551028.219 ops/s
# Warmup Iteration  14: 5538643.906 ops/s
# Warmup Iteration  15: 5550673.797 ops/s
# Warmup Iteration  16: 5547297.660 ops/s
# Warmup Iteration  17: 5554332.487 ops/s
# Warmup Iteration  18: 5547494.179 ops/s
# Warmup Iteration  19: 5553854.627 ops/s
# Warmup Iteration  20: 5542675.924 ops/s
# Warmup Iteration  21: 5550497.689 ops/s
# Warmup Iteration  22: 5548089.251 ops/s
# Warmup Iteration  23: 5553425.144 ops/s
# Warmup Iteration  24: 5549219.753 ops/s
# Warmup Iteration  25: 5547911.616 ops/s
# Warmup Iteration  26: 5526038.112 ops/s
# Warmup Iteration  27: 5550281.097 ops/s
# Warmup Iteration  28: 5551115.068 ops/s
# Warmup Iteration  29: 5552643.563 ops/s
# Warmup Iteration  30: 5541732.077 ops/s
Iteration   1: 5542091.389 ops/s
Iteration   2: 5548597.195 ops/s
Iteration   3: 5569768.123 ops/s
Iteration   4: 5543728.725 ops/s
Iteration   5: 5555206.211 ops/s
Iteration   6: 5544321.375 ops/s
Iteration   7: 5546967.984 ops/s
Iteration   8: 5558663.462 ops/s
Iteration   9: 5543171.748 ops/s
Iteration  10: 5544130.017 ops/s
Iteration  11: 5551294.261 ops/s
Iteration  12: 5546901.655 ops/s
Iteration  13: 5547493.930 ops/s
Iteration  14: 5527167.779 ops/s
Iteration  15: 5546724.405 ops/s
Iteration  16: 5541983.881 ops/s
Iteration  17: 5553287.386 ops/s
Iteration  18: 5549015.285 ops/s
Iteration  19: 5552906.588 ops/s
Iteration  20: 5533474.948 ops/s
Iteration  21: 5536496.034 ops/s
Iteration  22: 5519369.071 ops/s
Iteration  23: 5551200.158 ops/s
Iteration  24: 5530178.389 ops/s
Iteration  25: 5551570.129 ops/s
Iteration  26: 5551034.566 ops/s
Iteration  27: 5540648.972 ops/s
Iteration  28: 5567257.905 ops/s
Iteration  29: 5551237.754 ops/s
Iteration  30: 5541871.977 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max":
  5546258.710 ±(99.9%) 6993.923 ops/s [Average]
  (min, avg, max) = (5519369.071, 5546258.710, 5569768.123), stdev = 10468.175
  CI (99.9%): [5539264.787, 5553252.633] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max  thrpt   30  5546258.710 ± 6993.923  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1948364.659 ops/s
# Warmup Iteration   2: 4263446.018 ops/s
# Warmup Iteration   3: 4454877.679 ops/s
# Warmup Iteration   4: 4240928.528 ops/s
# Warmup Iteration   5: 3893802.705 ops/s
# Warmup Iteration   6: 4485021.975 ops/s
# Warmup Iteration   7: 4477570.359 ops/s
# Warmup Iteration   8: 4481950.454 ops/s
# Warmup Iteration   9: 4478882.361 ops/s
# Warmup Iteration  10: 4487753.956 ops/s
# Warmup Iteration  11: 4482782.560 ops/s
# Warmup Iteration  12: 4467302.054 ops/s
# Warmup Iteration  13: 4491034.286 ops/s
# Warmup Iteration  14: 4486719.998 ops/s
# Warmup Iteration  15: 4471100.071 ops/s
# Warmup Iteration  16: 4477197.824 ops/s
# Warmup Iteration  17: 4476687.278 ops/s
# Warmup Iteration  18: 4484075.408 ops/s
# Warmup Iteration  19: 4484933.459 ops/s
# Warmup Iteration  20: 4489506.440 ops/s
# Warmup Iteration  21: 4469380.118 ops/s
# Warmup Iteration  22: 4479745.372 ops/s
# Warmup Iteration  23: 4480132.652 ops/s
# Warmup Iteration  24: 4480004.959 ops/s
# Warmup Iteration  25: 4480731.900 ops/s
# Warmup Iteration  26: 4477464.694 ops/s
# Warmup Iteration  27: 4467263.948 ops/s
# Warmup Iteration  28: 4486107.868 ops/s
# Warmup Iteration  29: 4480640.555 ops/s
# Warmup Iteration  30: 4483788.655 ops/s
Iteration   1: 4477957.073 ops/s
Iteration   2: 4454170.796 ops/s
Iteration   3: 4481939.914 ops/s
Iteration   4: 4482793.171 ops/s
Iteration   5: 4480816.833 ops/s
Iteration   6: 4485446.808 ops/s
Iteration   7: 4449777.077 ops/s
Iteration   8: 4489008.309 ops/s
Iteration   9: 4488233.148 ops/s
Iteration  10: 4483242.102 ops/s
Iteration  11: 4477962.081 ops/s
Iteration  12: 4493548.385 ops/s
Iteration  13: 4502056.570 ops/s
Iteration  14: 4500836.893 ops/s
Iteration  15: 4496102.821 ops/s
Iteration  16: 4494062.201 ops/s
Iteration  17: 4472773.715 ops/s
Iteration  18: 4481243.875 ops/s
Iteration  19: 4468095.987 ops/s
Iteration  20: 4474518.883 ops/s
Iteration  21: 4481599.219 ops/s
Iteration  22: 4487450.539 ops/s
Iteration  23: 4499063.918 ops/s
Iteration  24: 4488004.315 ops/s
Iteration  25: 4471212.466 ops/s
Iteration  26: 4476861.488 ops/s
Iteration  27: 4479107.954 ops/s
Iteration  28: 4485306.639 ops/s
Iteration  29: 4472400.231 ops/s
Iteration  30: 4483657.416 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy":
  4481975.028 ±(99.9%) 7975.721 ops/s [Average]
  (min, avg, max) = (4449777.077, 4481975.028, 4502056.570), stdev = 11937.685
  CI (99.9%): [4473999.306, 4489950.749] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_maxBy  thrpt   30  4481975.028 ± 7975.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1880951.935 ops/s
# Warmup Iteration   2: 4483277.361 ops/s
# Warmup Iteration   3: 4424227.346 ops/s
# Warmup Iteration   4: 3668543.962 ops/s
# Warmup Iteration   5: 4450113.456 ops/s
# Warmup Iteration   6: 4434750.016 ops/s
# Warmup Iteration   7: 4421689.137 ops/s
# Warmup Iteration   8: 4444408.881 ops/s
# Warmup Iteration   9: 4443378.757 ops/s
# Warmup Iteration  10: 4424369.355 ops/s
# Warmup Iteration  11: 4434795.252 ops/s
# Warmup Iteration  12: 4440692.478 ops/s
# Warmup Iteration  13: 4436008.504 ops/s
# Warmup Iteration  14: 4423164.117 ops/s
# Warmup Iteration  15: 4436874.398 ops/s
# Warmup Iteration  16: 4426029.603 ops/s
# Warmup Iteration  17: 4424686.907 ops/s
# Warmup Iteration  18: 4444238.478 ops/s
# Warmup Iteration  19: 4437732.210 ops/s
# Warmup Iteration  20: 4441986.678 ops/s
# Warmup Iteration  21: 4426730.634 ops/s
# Warmup Iteration  22: 4432264.529 ops/s
# Warmup Iteration  23: 4437752.564 ops/s
# Warmup Iteration  24: 4431748.060 ops/s
# Warmup Iteration  25: 4436344.559 ops/s
# Warmup Iteration  26: 4442172.087 ops/s
# Warmup Iteration  27: 4432338.731 ops/s
# Warmup Iteration  28: 4436983.697 ops/s
# Warmup Iteration  29: 4434198.090 ops/s
# Warmup Iteration  30: 4426564.341 ops/s
Iteration   1: 4434655.159 ops/s
Iteration   2: 4431996.898 ops/s
Iteration   3: 4429114.006 ops/s
Iteration   4: 4431774.672 ops/s
Iteration   5: 4454587.723 ops/s
Iteration   6: 4439782.388 ops/s
Iteration   7: 4425989.847 ops/s
Iteration   8: 4430949.352 ops/s
Iteration   9: 4424177.580 ops/s
Iteration  10: 4446291.649 ops/s
Iteration  11: 4422248.490 ops/s
Iteration  12: 4434403.041 ops/s
Iteration  13: 4440161.265 ops/s
Iteration  14: 4447013.569 ops/s
Iteration  15: 4440340.198 ops/s
Iteration  16: 4442748.647 ops/s
Iteration  17: 4432421.047 ops/s
Iteration  18: 4443588.297 ops/s
Iteration  19: 4451311.134 ops/s
Iteration  20: 4414552.861 ops/s
Iteration  21: 4434940.145 ops/s
Iteration  22: 4446119.034 ops/s
Iteration  23: 4437032.793 ops/s
Iteration  24: 4446417.888 ops/s
Iteration  25: 4438244.836 ops/s
Iteration  26: 4447316.574 ops/s
Iteration  27: 4411842.637 ops/s
Iteration  28: 4430561.165 ops/s
Iteration  29: 4445040.910 ops/s
Iteration  30: 4447923.062 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxByOptional":
  4436784.896 ±(99.9%) 6950.503 ops/s [Average]
  (min, avg, max) = (4411842.637, 4436784.896, 4454587.723), stdev = 10403.186
  CI (99.9%): [4429834.393, 4443735.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_maxByOptional  thrpt   30  4436784.896 ± 6950.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2783664.147 ops/s
# Warmup Iteration   2: 5569003.554 ops/s
# Warmup Iteration   3: 6170241.629 ops/s
# Warmup Iteration   4: 6201658.621 ops/s
# Warmup Iteration   5: 5069369.918 ops/s
# Warmup Iteration   6: 6201969.227 ops/s
# Warmup Iteration   7: 6204426.434 ops/s
# Warmup Iteration   8: 6194719.319 ops/s
# Warmup Iteration   9: 6215505.797 ops/s
# Warmup Iteration  10: 6210679.707 ops/s
# Warmup Iteration  11: 6209936.050 ops/s
# Warmup Iteration  12: 6205000.410 ops/s
# Warmup Iteration  13: 6205737.718 ops/s
# Warmup Iteration  14: 6200452.461 ops/s
# Warmup Iteration  15: 6201741.460 ops/s
# Warmup Iteration  16: 6203919.997 ops/s
# Warmup Iteration  17: 6141191.673 ops/s
# Warmup Iteration  18: 6134352.754 ops/s
# Warmup Iteration  19: 6121216.647 ops/s
# Warmup Iteration  20: 6140724.846 ops/s
# Warmup Iteration  21: 6145199.641 ops/s
# Warmup Iteration  22: 6119758.710 ops/s
# Warmup Iteration  23: 6154715.413 ops/s
# Warmup Iteration  24: 6134238.812 ops/s
# Warmup Iteration  25: 6144941.098 ops/s
# Warmup Iteration  26: 6129063.427 ops/s
# Warmup Iteration  27: 6150929.088 ops/s
# Warmup Iteration  28: 6133650.242 ops/s
# Warmup Iteration  29: 6129183.602 ops/s
# Warmup Iteration  30: 6140143.484 ops/s
Iteration   1: 6132089.426 ops/s
Iteration   2: 6147207.110 ops/s
Iteration   3: 6137697.545 ops/s
Iteration   4: 6127248.023 ops/s
Iteration   5: 6126939.281 ops/s
Iteration   6: 6157065.856 ops/s
Iteration   7: 6154687.138 ops/s
Iteration   8: 6140790.559 ops/s
Iteration   9: 6151766.282 ops/s
Iteration  10: 6135163.730 ops/s
Iteration  11: 6144970.653 ops/s
Iteration  12: 6152820.966 ops/s
Iteration  13: 6150728.276 ops/s
Iteration  14: 6142858.463 ops/s
Iteration  15: 6147394.227 ops/s
Iteration  16: 6137473.465 ops/s
Iteration  17: 6145274.530 ops/s
Iteration  18: 6104761.832 ops/s
Iteration  19: 6129502.076 ops/s
Iteration  20: 6134658.080 ops/s
Iteration  21: 6142226.237 ops/s
Iteration  22: 6111447.958 ops/s
Iteration  23: 6113626.356 ops/s
Iteration  24: 6124259.509 ops/s
Iteration  25: 6103916.319 ops/s
Iteration  26: 6131348.619 ops/s
Iteration  27: 6100492.928 ops/s
Iteration  28: 6124953.100 ops/s
Iteration  29: 6116459.218 ops/s
Iteration  30: 6138199.069 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxBy_null_throws":
  6133600.894 ±(99.9%) 10498.526 ops/s [Average]
  (min, avg, max) = (6100492.928, 6133600.894, 6157065.856), stdev = 15713.701
  CI (99.9%): [6123102.368, 6144099.420] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_maxBy_null_throws  thrpt   30  6133600.894 ± 10498.526  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1110422.569 ops/s
# Warmup Iteration   2: 2283232.009 ops/s
# Warmup Iteration   3: 2405046.967 ops/s
# Warmup Iteration   4: 2416263.563 ops/s
# Warmup Iteration   5: 1987353.223 ops/s
# Warmup Iteration   6: 2431601.192 ops/s
# Warmup Iteration   7: 2423088.387 ops/s
# Warmup Iteration   8: 2423072.041 ops/s
# Warmup Iteration   9: 2427771.778 ops/s
# Warmup Iteration  10: 2425824.629 ops/s
# Warmup Iteration  11: 2426889.973 ops/s
# Warmup Iteration  12: 2432139.953 ops/s
# Warmup Iteration  13: 2424062.082 ops/s
# Warmup Iteration  14: 2423338.513 ops/s
# Warmup Iteration  15: 2425169.278 ops/s
# Warmup Iteration  16: 2428015.993 ops/s
# Warmup Iteration  17: 2419964.551 ops/s
# Warmup Iteration  18: 2417435.943 ops/s
# Warmup Iteration  19: 2414738.337 ops/s
# Warmup Iteration  20: 2417684.639 ops/s
# Warmup Iteration  21: 2412832.127 ops/s
# Warmup Iteration  22: 2411104.766 ops/s
# Warmup Iteration  23: 2410118.477 ops/s
# Warmup Iteration  24: 2412329.302 ops/s
# Warmup Iteration  25: 2423489.320 ops/s
# Warmup Iteration  26: 2419065.768 ops/s
# Warmup Iteration  27: 2410462.462 ops/s
# Warmup Iteration  28: 2417058.491 ops/s
# Warmup Iteration  29: 2418063.821 ops/s
# Warmup Iteration  30: 2421262.079 ops/s
Iteration   1: 2414472.630 ops/s
Iteration   2: 2418554.036 ops/s
Iteration   3: 2414033.507 ops/s
Iteration   4: 2401744.688 ops/s
Iteration   5: 2412279.078 ops/s
Iteration   6: 2417929.904 ops/s
Iteration   7: 2403155.030 ops/s
Iteration   8: 2398508.896 ops/s
Iteration   9: 2413213.669 ops/s
Iteration  10: 2415405.568 ops/s
Iteration  11: 2418798.136 ops/s
Iteration  12: 2413889.964 ops/s
Iteration  13: 2415600.352 ops/s
Iteration  14: 2408656.143 ops/s
Iteration  15: 2414696.883 ops/s
Iteration  16: 2424112.926 ops/s
Iteration  17: 2422329.203 ops/s
Iteration  18: 2413635.909 ops/s
Iteration  19: 2421829.606 ops/s
Iteration  20: 2418872.724 ops/s
Iteration  21: 2406937.725 ops/s
Iteration  22: 2414626.480 ops/s
Iteration  23: 2418454.753 ops/s
Iteration  24: 2422773.764 ops/s
Iteration  25: 2409764.490 ops/s
Iteration  26: 2425486.146 ops/s
Iteration  27: 2406472.645 ops/s
Iteration  28: 2419074.716 ops/s
Iteration  29: 2428699.539 ops/s
Iteration  30: 2416366.529 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_maxOptional":
  2415012.521 ±(99.9%) 4694.045 ops/s [Average]
  (min, avg, max) = (2398508.896, 2415012.521, 2428699.539), stdev = 7025.827
  CI (99.9%): [2410318.476, 2419706.567] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_maxOptional  thrpt   30  2415012.521 ± 4694.045  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 749858.308 ops/s
# Warmup Iteration   2: 780989.254 ops/s
# Warmup Iteration   3: 1007888.210 ops/s
# Warmup Iteration   4: 1008693.807 ops/s
# Warmup Iteration   5: 1009815.772 ops/s
# Warmup Iteration   6: 1001803.153 ops/s
# Warmup Iteration   7: 1012229.784 ops/s
# Warmup Iteration   8: 1008193.557 ops/s
# Warmup Iteration   9: 1008080.729 ops/s
# Warmup Iteration  10: 1011323.073 ops/s
# Warmup Iteration  11: 1014477.447 ops/s
# Warmup Iteration  12: 869172.695 ops/s
# Warmup Iteration  13: 991550.971 ops/s
# Warmup Iteration  14: 1014359.017 ops/s
# Warmup Iteration  15: 1008873.475 ops/s
# Warmup Iteration  16: 1013353.511 ops/s
# Warmup Iteration  17: 1076544.143 ops/s
# Warmup Iteration  18: 1068524.196 ops/s
# Warmup Iteration  19: 1072086.313 ops/s
# Warmup Iteration  20: 1075924.648 ops/s
# Warmup Iteration  21: 1075508.801 ops/s
# Warmup Iteration  22: 1071058.741 ops/s
# Warmup Iteration  23: 1077497.705 ops/s
# Warmup Iteration  24: 1075358.182 ops/s
# Warmup Iteration  25: 1073657.185 ops/s
# Warmup Iteration  26: 1075679.295 ops/s
# Warmup Iteration  27: 1076502.526 ops/s
# Warmup Iteration  28: 1075346.758 ops/s
# Warmup Iteration  29: 1073546.523 ops/s
# Warmup Iteration  30: 1078035.371 ops/s
Iteration   1: 1078435.478 ops/s
Iteration   2: 1077887.193 ops/s
Iteration   3: 1073668.012 ops/s
Iteration   4: 1077328.938 ops/s
Iteration   5: 1079541.931 ops/s
Iteration   6: 1080455.798 ops/s
Iteration   7: 1074328.552 ops/s
Iteration   8: 1075848.412 ops/s
Iteration   9: 1074863.191 ops/s
Iteration  10: 1071432.843 ops/s
Iteration  11: 1074624.292 ops/s
Iteration  12: 1077204.102 ops/s
Iteration  13: 1073901.017 ops/s
Iteration  14: 1072934.314 ops/s
Iteration  15: 1074893.803 ops/s
Iteration  16: 1076561.395 ops/s
Iteration  17: 1076328.454 ops/s
Iteration  18: 1075197.459 ops/s
Iteration  19: 1077740.979 ops/s
Iteration  20: 1076506.553 ops/s
Iteration  21: 1078486.960 ops/s
Iteration  22: 1076000.397 ops/s
Iteration  23: 1071080.566 ops/s
Iteration  24: 1075867.370 ops/s
Iteration  25: 1072974.919 ops/s
Iteration  26: 1078001.087 ops/s
Iteration  27: 1075117.726 ops/s
Iteration  28: 1076514.201 ops/s
Iteration  29: 1077731.402 ops/s
Iteration  30: 1075788.646 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_empty_throws":
  1075908.200 ±(99.9%) 1489.720 ops/s [Average]
  (min, avg, max) = (1071080.566, 1075908.200, 1080455.798), stdev = 2229.744
  CI (99.9%): [1074418.479, 1077397.920] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max_empty_throws  thrpt   30  1075908.200 ± 1489.720  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2328047.148 ops/s
# Warmup Iteration   2: 3839324.025 ops/s
# Warmup Iteration   3: 4405587.530 ops/s
# Warmup Iteration   4: 4448663.081 ops/s
# Warmup Iteration   5: 4436368.676 ops/s
# Warmup Iteration   6: 3605818.878 ops/s
# Warmup Iteration   7: 4446446.552 ops/s
# Warmup Iteration   8: 4457512.824 ops/s
# Warmup Iteration   9: 4454981.016 ops/s
# Warmup Iteration  10: 4454017.810 ops/s
# Warmup Iteration  11: 4447754.964 ops/s
# Warmup Iteration  12: 4454474.116 ops/s
# Warmup Iteration  13: 4456533.515 ops/s
# Warmup Iteration  14: 4456560.202 ops/s
# Warmup Iteration  15: 4455706.103 ops/s
# Warmup Iteration  16: 4443740.541 ops/s
# Warmup Iteration  17: 4455434.547 ops/s
# Warmup Iteration  18: 4456093.669 ops/s
# Warmup Iteration  19: 4451005.427 ops/s
# Warmup Iteration  20: 4447732.620 ops/s
# Warmup Iteration  21: 4451530.966 ops/s
# Warmup Iteration  22: 4448788.394 ops/s
# Warmup Iteration  23: 4451386.524 ops/s
# Warmup Iteration  24: 4452433.625 ops/s
# Warmup Iteration  25: 4459751.092 ops/s
# Warmup Iteration  26: 4455380.203 ops/s
# Warmup Iteration  27: 4449840.983 ops/s
# Warmup Iteration  28: 4445497.846 ops/s
# Warmup Iteration  29: 4450630.850 ops/s
# Warmup Iteration  30: 4455532.436 ops/s
Iteration   1: 4473584.753 ops/s
Iteration   2: 4460757.050 ops/s
Iteration   3: 4465523.433 ops/s
Iteration   4: 4444574.214 ops/s
Iteration   5: 4444894.780 ops/s
Iteration   6: 4446440.080 ops/s
Iteration   7: 4458660.601 ops/s
Iteration   8: 4453582.808 ops/s
Iteration   9: 4448055.749 ops/s
Iteration  10: 4432316.962 ops/s
Iteration  11: 4463168.233 ops/s
Iteration  12: 4445988.006 ops/s
Iteration  13: 4454429.275 ops/s
Iteration  14: 4446245.671 ops/s
Iteration  15: 4455266.636 ops/s
Iteration  16: 4455111.808 ops/s
Iteration  17: 4444346.572 ops/s
Iteration  18: 4462864.931 ops/s
Iteration  19: 4451366.378 ops/s
Iteration  20: 4438898.201 ops/s
Iteration  21: 4457746.416 ops/s
Iteration  22: 4464477.062 ops/s
Iteration  23: 4443142.993 ops/s
Iteration  24: 4467090.933 ops/s
Iteration  25: 4452773.841 ops/s
Iteration  26: 4456630.290 ops/s
Iteration  27: 4445736.887 ops/s
Iteration  28: 4457769.162 ops/s
Iteration  29: 4459023.198 ops/s
Iteration  30: 4450008.503 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_safe":
  4453349.181 ±(99.9%) 6164.557 ops/s [Average]
  (min, avg, max) = (4432316.962, 4453349.181, 4473584.753), stdev = 9226.820
  CI (99.9%): [4447184.624, 4459513.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max_null_safe  thrpt   30  4453349.181 ± 6164.557  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2799947.830 ops/s
# Warmup Iteration   2: 5497740.513 ops/s
# Warmup Iteration   3: 6069517.868 ops/s
# Warmup Iteration   4: 6102324.957 ops/s
# Warmup Iteration   5: 4983188.176 ops/s
# Warmup Iteration   6: 6117267.584 ops/s
# Warmup Iteration   7: 6102618.240 ops/s
# Warmup Iteration   8: 6099596.468 ops/s
# Warmup Iteration   9: 6103859.780 ops/s
# Warmup Iteration  10: 6115353.386 ops/s
# Warmup Iteration  11: 6116686.508 ops/s
# Warmup Iteration  12: 6101000.732 ops/s
# Warmup Iteration  13: 6119234.436 ops/s
# Warmup Iteration  14: 6111668.915 ops/s
# Warmup Iteration  15: 6100877.893 ops/s
# Warmup Iteration  16: 6102015.992 ops/s
# Warmup Iteration  17: 6100124.528 ops/s
# Warmup Iteration  18: 6114868.325 ops/s
# Warmup Iteration  19: 6103065.517 ops/s
# Warmup Iteration  20: 6102640.871 ops/s
# Warmup Iteration  21: 6107711.284 ops/s
# Warmup Iteration  22: 6102267.063 ops/s
# Warmup Iteration  23: 6109780.936 ops/s
# Warmup Iteration  24: 6107771.427 ops/s
# Warmup Iteration  25: 6109656.188 ops/s
# Warmup Iteration  26: 6111862.763 ops/s
# Warmup Iteration  27: 6103420.459 ops/s
# Warmup Iteration  28: 6114122.474 ops/s
# Warmup Iteration  29: 6109698.036 ops/s
# Warmup Iteration  30: 6099175.878 ops/s
Iteration   1: 6090463.694 ops/s
Iteration   2: 6129507.543 ops/s
Iteration   3: 6095411.692 ops/s
Iteration   4: 6102041.356 ops/s
Iteration   5: 6111198.650 ops/s
Iteration   6: 6125755.651 ops/s
Iteration   7: 6132732.172 ops/s
Iteration   8: 6120174.364 ops/s
Iteration   9: 6120203.981 ops/s
Iteration  10: 6086295.570 ops/s
Iteration  11: 6115211.232 ops/s
Iteration  12: 6107261.681 ops/s
Iteration  13: 6108553.313 ops/s
Iteration  14: 6120258.882 ops/s
Iteration  15: 6105432.330 ops/s
Iteration  16: 6107600.646 ops/s
Iteration  17: 6117191.911 ops/s
Iteration  18: 6109819.890 ops/s
Iteration  19: 6116096.599 ops/s
Iteration  20: 6125877.614 ops/s
Iteration  21: 6118317.666 ops/s
Iteration  22: 6123666.354 ops/s
Iteration  23: 6128211.684 ops/s
Iteration  24: 6097846.961 ops/s
Iteration  25: 6104754.553 ops/s
Iteration  26: 6110500.983 ops/s
Iteration  27: 6134348.977 ops/s
Iteration  28: 6126160.437 ops/s
Iteration  29: 6116482.177 ops/s
Iteration  30: 6132109.936 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws":
  6114649.617 ±(99.9%) 8399.320 ops/s [Average]
  (min, avg, max) = (6086295.570, 6114649.617, 6134348.977), stdev = 12571.708
  CI (99.9%): [6106250.297, 6123048.937] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max_null_throws  thrpt   30  6114649.617 ± 8399.320  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2785079.548 ops/s
# Warmup Iteration   2: 5460765.460 ops/s
# Warmup Iteration   3: 6049132.254 ops/s
# Warmup Iteration   4: 6089561.282 ops/s
# Warmup Iteration   5: 4929843.778 ops/s
# Warmup Iteration   6: 6074944.250 ops/s
# Warmup Iteration   7: 6080713.445 ops/s
# Warmup Iteration   8: 6083227.550 ops/s
# Warmup Iteration   9: 6089906.800 ops/s
# Warmup Iteration  10: 6083311.932 ops/s
# Warmup Iteration  11: 6083119.738 ops/s
# Warmup Iteration  12: 6094416.606 ops/s
# Warmup Iteration  13: 6081649.977 ops/s
# Warmup Iteration  14: 6076876.212 ops/s
# Warmup Iteration  15: 6080719.839 ops/s
# Warmup Iteration  16: 6093123.907 ops/s
# Warmup Iteration  17: 6086313.156 ops/s
# Warmup Iteration  18: 6095426.808 ops/s
# Warmup Iteration  19: 6088926.670 ops/s
# Warmup Iteration  20: 6098233.816 ops/s
# Warmup Iteration  21: 6097699.374 ops/s
# Warmup Iteration  22: 6083007.667 ops/s
# Warmup Iteration  23: 6075664.502 ops/s
# Warmup Iteration  24: 6084984.415 ops/s
# Warmup Iteration  25: 6102442.942 ops/s
# Warmup Iteration  26: 6087477.454 ops/s
# Warmup Iteration  27: 6086528.417 ops/s
# Warmup Iteration  28: 6099141.312 ops/s
# Warmup Iteration  29: 6099673.209 ops/s
# Warmup Iteration  30: 6077205.359 ops/s
Iteration   1: 6065812.225 ops/s
Iteration   2: 6098087.811 ops/s
Iteration   3: 6083912.243 ops/s
Iteration   4: 6097552.221 ops/s
Iteration   5: 6105155.183 ops/s
Iteration   6: 6093907.752 ops/s
Iteration   7: 6072488.439 ops/s
Iteration   8: 6091465.472 ops/s
Iteration   9: 6099085.293 ops/s
Iteration  10: 6064072.998 ops/s
Iteration  11: 6096198.811 ops/s
Iteration  12: 6083564.262 ops/s
Iteration  13: 6092637.359 ops/s
Iteration  14: 6079206.515 ops/s
Iteration  15: 6079702.957 ops/s
Iteration  16: 6114449.315 ops/s
Iteration  17: 6098452.696 ops/s
Iteration  18: 6090773.652 ops/s
Iteration  19: 6094364.316 ops/s
Iteration  20: 6076863.908 ops/s
Iteration  21: 6078638.835 ops/s
Iteration  22: 6102030.140 ops/s
Iteration  23: 6083726.520 ops/s
Iteration  24: 6081472.705 ops/s
Iteration  25: 6105518.076 ops/s
Iteration  26: 6064467.560 ops/s
Iteration  27: 6083472.532 ops/s
Iteration  28: 6099941.110 ops/s
Iteration  29: 6081784.202 ops/s
Iteration  30: 6088725.099 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_null_throws_without_comparator":
  6088251.007 ±(99.9%) 8433.884 ops/s [Average]
  (min, avg, max) = (6064072.998, 6088251.007, 6114449.315), stdev = 12623.442
  CI (99.9%): [6079817.123, 6096684.891] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max_null_throws_without_comparator  thrpt   30  6088251.007 ± 8433.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2757228.459 ops/s
# Warmup Iteration   2: 4929903.945 ops/s
# Warmup Iteration   3: 5488834.667 ops/s
# Warmup Iteration   4: 5500813.263 ops/s
# Warmup Iteration   5: 5309474.902 ops/s
# Warmup Iteration   6: 4699930.714 ops/s
# Warmup Iteration   7: 5520657.107 ops/s
# Warmup Iteration   8: 5514417.804 ops/s
# Warmup Iteration   9: 5518043.386 ops/s
# Warmup Iteration  10: 5529441.316 ops/s
# Warmup Iteration  11: 5516027.444 ops/s
# Warmup Iteration  12: 5525104.685 ops/s
# Warmup Iteration  13: 5517249.012 ops/s
# Warmup Iteration  14: 5527834.933 ops/s
# Warmup Iteration  15: 5517354.860 ops/s
# Warmup Iteration  16: 5519801.429 ops/s
# Warmup Iteration  17: 5516042.334 ops/s
# Warmup Iteration  18: 5492072.694 ops/s
# Warmup Iteration  19: 5521362.460 ops/s
# Warmup Iteration  20: 5530275.731 ops/s
# Warmup Iteration  21: 5516704.775 ops/s
# Warmup Iteration  22: 5510881.740 ops/s
# Warmup Iteration  23: 5509450.281 ops/s
# Warmup Iteration  24: 5514280.035 ops/s
# Warmup Iteration  25: 5509155.635 ops/s
# Warmup Iteration  26: 5515056.871 ops/s
# Warmup Iteration  27: 5503487.412 ops/s
# Warmup Iteration  28: 5518893.842 ops/s
# Warmup Iteration  29: 5519770.218 ops/s
# Warmup Iteration  30: 5526539.029 ops/s
Iteration   1: 5531213.637 ops/s
Iteration   2: 5515707.668 ops/s
Iteration   3: 5519616.298 ops/s
Iteration   4: 5511706.842 ops/s
Iteration   5: 5519497.551 ops/s
Iteration   6: 5509226.632 ops/s
Iteration   7: 5528291.231 ops/s
Iteration   8: 5523825.508 ops/s
Iteration   9: 5517443.554 ops/s
Iteration  10: 5515762.166 ops/s
Iteration  11: 5512724.594 ops/s
Iteration  12: 5507823.496 ops/s
Iteration  13: 5519626.773 ops/s
Iteration  14: 5512175.093 ops/s
Iteration  15: 5540023.526 ops/s
Iteration  16: 5525234.642 ops/s
Iteration  17: 5490707.315 ops/s
Iteration  18: 5530492.560 ops/s
Iteration  19: 5518923.450 ops/s
Iteration  20: 5518518.592 ops/s
Iteration  21: 5525666.716 ops/s
Iteration  22: 5519240.807 ops/s
Iteration  23: 5521369.467 ops/s
Iteration  24: 5535050.624 ops/s
Iteration  25: 5512092.409 ops/s
Iteration  26: 5499576.166 ops/s
Iteration  27: 5511996.567 ops/s
Iteration  28: 5530579.259 ops/s
Iteration  29: 5508340.630 ops/s
Iteration  30: 5511648.155 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_max_without_comparator":
  5518136.731 ±(99.9%) 6927.663 ops/s [Average]
  (min, avg, max) = (5490707.315, 5518136.731, 5540023.526), stdev = 10369.000
  CI (99.9%): [5511209.068, 5525064.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_max_without_comparator  thrpt   30  5518136.731 ± 6927.663  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2806803.341 ops/s
# Warmup Iteration   2: 5216295.917 ops/s
# Warmup Iteration   3: 5744688.608 ops/s
# Warmup Iteration   4: 5781434.152 ops/s
# Warmup Iteration   5: 5022675.642 ops/s
# Warmup Iteration   6: 5491243.376 ops/s
# Warmup Iteration   7: 5803816.637 ops/s
# Warmup Iteration   8: 5808996.258 ops/s
# Warmup Iteration   9: 5796230.746 ops/s
# Warmup Iteration  10: 5781640.261 ops/s
# Warmup Iteration  11: 5799451.909 ops/s
# Warmup Iteration  12: 5797810.852 ops/s
# Warmup Iteration  13: 5793462.585 ops/s
# Warmup Iteration  14: 5796518.269 ops/s
# Warmup Iteration  15: 5784527.922 ops/s
# Warmup Iteration  16: 5777734.533 ops/s
# Warmup Iteration  17: 5799348.677 ops/s
# Warmup Iteration  18: 5800745.095 ops/s
# Warmup Iteration  19: 5789025.338 ops/s
# Warmup Iteration  20: 5780256.164 ops/s
# Warmup Iteration  21: 5788960.190 ops/s
# Warmup Iteration  22: 5810021.649 ops/s
# Warmup Iteration  23: 5771254.824 ops/s
# Warmup Iteration  24: 5798981.182 ops/s
# Warmup Iteration  25: 5785481.735 ops/s
# Warmup Iteration  26: 5792900.209 ops/s
# Warmup Iteration  27: 5783280.121 ops/s
# Warmup Iteration  28: 5811750.720 ops/s
# Warmup Iteration  29: 5790093.060 ops/s
# Warmup Iteration  30: 5789655.954 ops/s
Iteration   1: 5774922.932 ops/s
Iteration   2: 5805021.902 ops/s
Iteration   3: 5785935.963 ops/s
Iteration   4: 5800991.874 ops/s
Iteration   5: 5801961.593 ops/s
Iteration   6: 5771080.427 ops/s
Iteration   7: 5770268.141 ops/s
Iteration   8: 5749374.812 ops/s
Iteration   9: 5771672.935 ops/s
Iteration  10: 5775761.242 ops/s
Iteration  11: 5796812.806 ops/s
Iteration  12: 5780655.991 ops/s
Iteration  13: 5790516.313 ops/s
Iteration  14: 5767152.141 ops/s
Iteration  15: 5803804.539 ops/s
Iteration  16: 5804061.746 ops/s
Iteration  17: 5793821.496 ops/s
Iteration  18: 5805557.604 ops/s
Iteration  19: 5788308.308 ops/s
Iteration  20: 5773352.912 ops/s
Iteration  21: 5790934.812 ops/s
Iteration  22: 5808289.522 ops/s
Iteration  23: 5781148.938 ops/s
Iteration  24: 5802949.058 ops/s
Iteration  25: 5789975.347 ops/s
Iteration  26: 5790458.374 ops/s
Iteration  27: 5763245.896 ops/s
Iteration  28: 5782203.358 ops/s
Iteration  29: 5802368.886 ops/s
Iteration  30: 5810641.426 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min":
  5787775.043 ±(99.9%) 10409.223 ops/s [Average]
  (min, avg, max) = (5749374.812, 5787775.043, 5810641.426), stdev = 15580.036
  CI (99.9%): [5777365.820, 5798184.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_min  thrpt   30  5787775.043 ± 10409.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2066931.396 ops/s
# Warmup Iteration   2: 4270990.629 ops/s
# Warmup Iteration   3: 4565533.901 ops/s
# Warmup Iteration   4: 4607236.960 ops/s
# Warmup Iteration   5: 3745152.039 ops/s
# Warmup Iteration   6: 4611393.841 ops/s
# Warmup Iteration   7: 4617790.813 ops/s
# Warmup Iteration   8: 4597577.320 ops/s
# Warmup Iteration   9: 4607292.846 ops/s
# Warmup Iteration  10: 4601897.083 ops/s
# Warmup Iteration  11: 4598836.210 ops/s
# Warmup Iteration  12: 4588274.194 ops/s
# Warmup Iteration  13: 4606382.127 ops/s
# Warmup Iteration  14: 4603736.183 ops/s
# Warmup Iteration  15: 4597449.943 ops/s
# Warmup Iteration  16: 4600660.063 ops/s
# Warmup Iteration  17: 4601796.301 ops/s
# Warmup Iteration  18: 4592591.663 ops/s
# Warmup Iteration  19: 4600068.674 ops/s
# Warmup Iteration  20: 4593484.247 ops/s
# Warmup Iteration  21: 4587566.705 ops/s
# Warmup Iteration  22: 4610451.662 ops/s
# Warmup Iteration  23: 4601606.296 ops/s
# Warmup Iteration  24: 4599079.254 ops/s
# Warmup Iteration  25: 4592120.211 ops/s
# Warmup Iteration  26: 4596367.710 ops/s
# Warmup Iteration  27: 4600716.017 ops/s
# Warmup Iteration  28: 4604765.807 ops/s
# Warmup Iteration  29: 4605164.990 ops/s
# Warmup Iteration  30: 4602982.144 ops/s
Iteration   1: 4603588.617 ops/s
Iteration   2: 4612880.635 ops/s
Iteration   3: 4605336.399 ops/s
Iteration   4: 4608533.233 ops/s
Iteration   5: 4613802.300 ops/s
Iteration   6: 4625389.923 ops/s
Iteration   7: 4605425.764 ops/s
Iteration   8: 4612366.441 ops/s
Iteration   9: 4587183.876 ops/s
Iteration  10: 4599807.092 ops/s
Iteration  11: 4590368.868 ops/s
Iteration  12: 4593313.863 ops/s
Iteration  13: 4612669.957 ops/s
Iteration  14: 4619287.936 ops/s
Iteration  15: 4603270.117 ops/s
Iteration  16: 4603374.983 ops/s
Iteration  17: 4613463.966 ops/s
Iteration  18: 4587368.359 ops/s
Iteration  19: 4600961.957 ops/s
Iteration  20: 4599890.131 ops/s
Iteration  21: 4618993.624 ops/s
Iteration  22: 4579953.707 ops/s
Iteration  23: 4607247.187 ops/s
Iteration  24: 4602782.382 ops/s
Iteration  25: 4601363.640 ops/s
Iteration  26: 4606501.101 ops/s
Iteration  27: 4602392.730 ops/s
Iteration  28: 4605373.834 ops/s
Iteration  29: 4590857.190 ops/s
Iteration  30: 4591257.890 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy":
  4603500.257 ±(99.9%) 7007.040 ops/s [Average]
  (min, avg, max) = (4579953.707, 4603500.257, 4625389.923), stdev = 10487.808
  CI (99.9%): [4596493.217, 4610507.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_minBy  thrpt   30  4603500.257 ± 7007.040  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minByOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minByOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1845486.006 ops/s
# Warmup Iteration   2: 4335631.856 ops/s
# Warmup Iteration   3: 4413158.328 ops/s
# Warmup Iteration   4: 3653300.488 ops/s
# Warmup Iteration   5: 4431675.294 ops/s
# Warmup Iteration   6: 4428940.364 ops/s
# Warmup Iteration   7: 4427394.718 ops/s
# Warmup Iteration   8: 4426799.478 ops/s
# Warmup Iteration   9: 4428362.249 ops/s
# Warmup Iteration  10: 4423441.040 ops/s
# Warmup Iteration  11: 4429257.407 ops/s
# Warmup Iteration  12: 4428340.727 ops/s
# Warmup Iteration  13: 4421656.587 ops/s
# Warmup Iteration  14: 4431154.463 ops/s
# Warmup Iteration  15: 4433101.407 ops/s
# Warmup Iteration  16: 4424633.035 ops/s
# Warmup Iteration  17: 4426156.775 ops/s
# Warmup Iteration  18: 4438462.848 ops/s
# Warmup Iteration  19: 4422575.089 ops/s
# Warmup Iteration  20: 4433638.547 ops/s
# Warmup Iteration  21: 4428216.826 ops/s
# Warmup Iteration  22: 4432182.871 ops/s
# Warmup Iteration  23: 4436479.156 ops/s
# Warmup Iteration  24: 4449756.582 ops/s
# Warmup Iteration  25: 4442936.859 ops/s
# Warmup Iteration  26: 4424707.405 ops/s
# Warmup Iteration  27: 4437419.367 ops/s
# Warmup Iteration  28: 4430113.902 ops/s
# Warmup Iteration  29: 4429764.649 ops/s
# Warmup Iteration  30: 4416465.400 ops/s
Iteration   1: 4423576.900 ops/s
Iteration   2: 4437992.540 ops/s
Iteration   3: 4438385.603 ops/s
Iteration   4: 4434225.543 ops/s
Iteration   5: 4423731.534 ops/s
Iteration   6: 4429051.898 ops/s
Iteration   7: 4427972.960 ops/s
Iteration   8: 4429162.269 ops/s
Iteration   9: 4441920.163 ops/s
Iteration  10: 4443642.409 ops/s
Iteration  11: 4455710.781 ops/s
Iteration  12: 4409716.188 ops/s
Iteration  13: 4410503.528 ops/s
Iteration  14: 4425148.184 ops/s
Iteration  15: 4420953.562 ops/s
Iteration  16: 4414330.232 ops/s
Iteration  17: 4437727.559 ops/s
Iteration  18: 4439308.488 ops/s
Iteration  19: 4423787.434 ops/s
Iteration  20: 4423291.664 ops/s
Iteration  21: 4434380.705 ops/s
Iteration  22: 4434947.103 ops/s
Iteration  23: 4424655.174 ops/s
Iteration  24: 4432819.880 ops/s
Iteration  25: 4426756.841 ops/s
Iteration  26: 4443139.567 ops/s
Iteration  27: 4433594.910 ops/s
Iteration  28: 4417319.221 ops/s
Iteration  29: 4419461.080 ops/s
Iteration  30: 4437546.271 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minByOptional":
  4429825.340 ±(99.9%) 7022.767 ops/s [Average]
  (min, avg, max) = (4409716.188, 4429825.340, 4455710.781), stdev = 10511.348
  CI (99.9%): [4422802.572, 4436848.107] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_minByOptional  thrpt   30  4429825.340 ± 7022.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2768538.431 ops/s
# Warmup Iteration   2: 5541080.027 ops/s
# Warmup Iteration   3: 6126016.439 ops/s
# Warmup Iteration   4: 6171258.646 ops/s
# Warmup Iteration   5: 5037296.781 ops/s
# Warmup Iteration   6: 6191820.536 ops/s
# Warmup Iteration   7: 6183539.904 ops/s
# Warmup Iteration   8: 6161333.329 ops/s
# Warmup Iteration   9: 6186330.092 ops/s
# Warmup Iteration  10: 6175228.850 ops/s
# Warmup Iteration  11: 6161651.612 ops/s
# Warmup Iteration  12: 6173542.625 ops/s
# Warmup Iteration  13: 6183499.029 ops/s
# Warmup Iteration  14: 6181450.197 ops/s
# Warmup Iteration  15: 6180225.541 ops/s
# Warmup Iteration  16: 6178296.726 ops/s
# Warmup Iteration  17: 6169769.942 ops/s
# Warmup Iteration  18: 6163989.731 ops/s
# Warmup Iteration  19: 6170390.695 ops/s
# Warmup Iteration  20: 6159706.033 ops/s
# Warmup Iteration  21: 6160027.400 ops/s
# Warmup Iteration  22: 6174287.780 ops/s
# Warmup Iteration  23: 6182640.015 ops/s
# Warmup Iteration  24: 6194185.690 ops/s
# Warmup Iteration  25: 6187308.304 ops/s
# Warmup Iteration  26: 6186855.010 ops/s
# Warmup Iteration  27: 6176269.851 ops/s
# Warmup Iteration  28: 6168459.017 ops/s
# Warmup Iteration  29: 6177342.741 ops/s
# Warmup Iteration  30: 6186753.988 ops/s
Iteration   1: 6168282.912 ops/s
Iteration   2: 6149273.816 ops/s
Iteration   3: 6185348.389 ops/s
Iteration   4: 6184771.119 ops/s
Iteration   5: 6157824.544 ops/s
Iteration   6: 6190149.376 ops/s
Iteration   7: 6164731.585 ops/s
Iteration   8: 6175844.806 ops/s
Iteration   9: 6178802.419 ops/s
Iteration  10: 6166872.623 ops/s
Iteration  11: 6177998.233 ops/s
Iteration  12: 6162352.286 ops/s
Iteration  13: 6187809.493 ops/s
Iteration  14: 6160063.894 ops/s
Iteration  15: 6165851.141 ops/s
Iteration  16: 6185445.948 ops/s
Iteration  17: 6189161.447 ops/s
Iteration  18: 6150868.971 ops/s
Iteration  19: 6171727.733 ops/s
Iteration  20: 6184460.818 ops/s
Iteration  21: 6181720.644 ops/s
Iteration  22: 6167068.701 ops/s
Iteration  23: 6148367.089 ops/s
Iteration  24: 6167898.906 ops/s
Iteration  25: 6170549.770 ops/s
Iteration  26: 6175901.859 ops/s
Iteration  27: 6170310.976 ops/s
Iteration  28: 6164483.016 ops/s
Iteration  29: 6164907.848 ops/s
Iteration  30: 6164154.224 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minBy_null_throws":
  6171100.153 ±(99.9%) 7882.735 ops/s [Average]
  (min, avg, max) = (6148367.089, 6171100.153, 6190149.376), stdev = 11798.507
  CI (99.9%): [6163217.418, 6178982.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_minBy_null_throws  thrpt   30  6171100.153 ± 7882.735  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1141048.611 ops/s
# Warmup Iteration   2: 2483900.532 ops/s
# Warmup Iteration   3: 2609815.085 ops/s
# Warmup Iteration   4: 2559842.811 ops/s
# Warmup Iteration   5: 2210684.167 ops/s
# Warmup Iteration   6: 2617523.927 ops/s
# Warmup Iteration   7: 2628952.989 ops/s
# Warmup Iteration   8: 2630268.882 ops/s
# Warmup Iteration   9: 2629358.935 ops/s
# Warmup Iteration  10: 2631078.653 ops/s
# Warmup Iteration  11: 2631195.478 ops/s
# Warmup Iteration  12: 2637853.763 ops/s
# Warmup Iteration  13: 2628586.149 ops/s
# Warmup Iteration  14: 2639072.678 ops/s
# Warmup Iteration  15: 2644780.008 ops/s
# Warmup Iteration  16: 2626743.144 ops/s
# Warmup Iteration  17: 2624434.810 ops/s
# Warmup Iteration  18: 2618581.742 ops/s
# Warmup Iteration  19: 2611291.946 ops/s
# Warmup Iteration  20: 2601189.272 ops/s
# Warmup Iteration  21: 2617137.748 ops/s
# Warmup Iteration  22: 2613135.498 ops/s
# Warmup Iteration  23: 2610589.644 ops/s
# Warmup Iteration  24: 2610108.887 ops/s
# Warmup Iteration  25: 2611529.453 ops/s
# Warmup Iteration  26: 2622993.136 ops/s
# Warmup Iteration  27: 2600090.472 ops/s
# Warmup Iteration  28: 2618345.088 ops/s
# Warmup Iteration  29: 2612201.109 ops/s
# Warmup Iteration  30: 2595564.019 ops/s
Iteration   1: 2623977.031 ops/s
Iteration   2: 2606790.364 ops/s
Iteration   3: 2607598.103 ops/s
Iteration   4: 2613940.812 ops/s
Iteration   5: 2606564.659 ops/s
Iteration   6: 2597735.283 ops/s
Iteration   7: 2609197.988 ops/s
Iteration   8: 2617705.417 ops/s
Iteration   9: 2614487.717 ops/s
Iteration  10: 2627901.868 ops/s
Iteration  11: 2609254.872 ops/s
Iteration  12: 2615553.224 ops/s
Iteration  13: 2614742.566 ops/s
Iteration  14: 2621376.768 ops/s
Iteration  15: 2612328.829 ops/s
Iteration  16: 2620112.181 ops/s
Iteration  17: 2624836.860 ops/s
Iteration  18: 2632390.780 ops/s
Iteration  19: 2615268.239 ops/s
Iteration  20: 2625503.544 ops/s
Iteration  21: 2619319.478 ops/s
Iteration  22: 2619416.913 ops/s
Iteration  23: 2620010.151 ops/s
Iteration  24: 2608395.179 ops/s
Iteration  25: 2621354.910 ops/s
Iteration  26: 2618623.266 ops/s
Iteration  27: 2621233.350 ops/s
Iteration  28: 2620879.398 ops/s
Iteration  29: 2616920.674 ops/s
Iteration  30: 2612296.476 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_minOptional":
  2616523.897 ±(99.9%) 4920.399 ops/s [Average]
  (min, avg, max) = (2597735.283, 2616523.897, 2632390.780), stdev = 7364.622
  CI (99.9%): [2611603.497, 2621444.296] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_minOptional  thrpt   30  2616523.897 ± 4920.399  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_empty_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_empty_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 746619.575 ops/s
# Warmup Iteration   2: 782214.149 ops/s
# Warmup Iteration   3: 1008039.457 ops/s
# Warmup Iteration   4: 1011790.525 ops/s
# Warmup Iteration   5: 1014081.667 ops/s
# Warmup Iteration   6: 1007922.068 ops/s
# Warmup Iteration   7: 1015671.591 ops/s
# Warmup Iteration   8: 1007979.320 ops/s
# Warmup Iteration   9: 1012592.347 ops/s
# Warmup Iteration  10: 1014638.241 ops/s
# Warmup Iteration  11: 1014281.422 ops/s
# Warmup Iteration  12: 865562.623 ops/s
# Warmup Iteration  13: 1000191.275 ops/s
# Warmup Iteration  14: 1013698.149 ops/s
# Warmup Iteration  15: 1015513.018 ops/s
# Warmup Iteration  16: 1012704.176 ops/s
# Warmup Iteration  17: 1080757.446 ops/s
# Warmup Iteration  18: 1084230.730 ops/s
# Warmup Iteration  19: 1083664.627 ops/s
# Warmup Iteration  20: 1084793.430 ops/s
# Warmup Iteration  21: 1082649.076 ops/s
# Warmup Iteration  22: 1080940.232 ops/s
# Warmup Iteration  23: 1079428.637 ops/s
# Warmup Iteration  24: 1083982.280 ops/s
# Warmup Iteration  25: 1083293.248 ops/s
# Warmup Iteration  26: 1085075.849 ops/s
# Warmup Iteration  27: 1084916.976 ops/s
# Warmup Iteration  28: 1079549.487 ops/s
# Warmup Iteration  29: 1085262.261 ops/s
# Warmup Iteration  30: 1082795.494 ops/s
Iteration   1: 1083777.754 ops/s
Iteration   2: 1078916.687 ops/s
Iteration   3: 1080159.757 ops/s
Iteration   4: 1081416.440 ops/s
Iteration   5: 1081907.771 ops/s
Iteration   6: 1082514.354 ops/s
Iteration   7: 1082153.160 ops/s
Iteration   8: 1076382.498 ops/s
Iteration   9: 1083087.946 ops/s
Iteration  10: 1085600.736 ops/s
Iteration  11: 1084346.161 ops/s
Iteration  12: 1085089.949 ops/s
Iteration  13: 1087897.072 ops/s
Iteration  14: 1079840.834 ops/s
Iteration  15: 1081548.560 ops/s
Iteration  16: 1076342.857 ops/s
Iteration  17: 1076237.106 ops/s
Iteration  18: 1080217.016 ops/s
Iteration  19: 1083184.377 ops/s
Iteration  20: 1083728.846 ops/s
Iteration  21: 1091123.122 ops/s
Iteration  22: 1081539.878 ops/s
Iteration  23: 1086985.126 ops/s
Iteration  24: 1077675.208 ops/s
Iteration  25: 1086805.072 ops/s
Iteration  26: 1085138.322 ops/s
Iteration  27: 1080034.035 ops/s
Iteration  28: 1080199.575 ops/s
Iteration  29: 1082028.645 ops/s
Iteration  30: 1080305.954 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_empty_throws":
  1082206.161 ±(99.9%) 2349.109 ops/s [Average]
  (min, avg, max) = (1076237.106, 1082206.161, 1091123.122), stdev = 3516.036
  CI (99.9%): [1079857.052, 1084555.269] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_min_empty_throws  thrpt   30  1082206.161 ± 2349.109  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_safe$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_safe

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2432877.633 ops/s
# Warmup Iteration   2: 4166545.462 ops/s
# Warmup Iteration   3: 4724544.227 ops/s
# Warmup Iteration   4: 4748888.876 ops/s
# Warmup Iteration   5: 4746565.426 ops/s
# Warmup Iteration   6: 3882367.422 ops/s
# Warmup Iteration   7: 4749767.491 ops/s
# Warmup Iteration   8: 4737665.651 ops/s
# Warmup Iteration   9: 4739393.724 ops/s
# Warmup Iteration  10: 4753404.316 ops/s
# Warmup Iteration  11: 4740248.126 ops/s
# Warmup Iteration  12: 4744950.268 ops/s
# Warmup Iteration  13: 4738406.751 ops/s
# Warmup Iteration  14: 4746156.042 ops/s
# Warmup Iteration  15: 4744691.952 ops/s
# Warmup Iteration  16: 4746386.758 ops/s
# Warmup Iteration  17: 4740143.592 ops/s
# Warmup Iteration  18: 4744310.867 ops/s
# Warmup Iteration  19: 4738901.843 ops/s
# Warmup Iteration  20: 4753803.019 ops/s
# Warmup Iteration  21: 4740143.750 ops/s
# Warmup Iteration  22: 4743444.799 ops/s
# Warmup Iteration  23: 4756424.353 ops/s
# Warmup Iteration  24: 4743361.436 ops/s
# Warmup Iteration  25: 4745305.075 ops/s
# Warmup Iteration  26: 4741293.227 ops/s
# Warmup Iteration  27: 4742896.166 ops/s
# Warmup Iteration  28: 4739930.819 ops/s
# Warmup Iteration  29: 4738103.729 ops/s
# Warmup Iteration  30: 4753464.301 ops/s
Iteration   1: 4765258.810 ops/s
Iteration   2: 4759852.825 ops/s
Iteration   3: 4751867.124 ops/s
Iteration   4: 4744925.325 ops/s
Iteration   5: 4730049.117 ops/s
Iteration   6: 4720085.244 ops/s
Iteration   7: 4750603.172 ops/s
Iteration   8: 4737798.738 ops/s
Iteration   9: 4742612.213 ops/s
Iteration  10: 4762126.119 ops/s
Iteration  11: 4742143.816 ops/s
Iteration  12: 4740490.478 ops/s
Iteration  13: 4742336.259 ops/s
Iteration  14: 4756140.196 ops/s
Iteration  15: 4733838.205 ops/s
Iteration  16: 4746021.712 ops/s
Iteration  17: 4761148.337 ops/s
Iteration  18: 4745331.770 ops/s
Iteration  19: 4767644.671 ops/s
Iteration  20: 4750785.208 ops/s
Iteration  21: 4747007.953 ops/s
Iteration  22: 4740791.449 ops/s
Iteration  23: 4734644.929 ops/s
Iteration  24: 4746848.593 ops/s
Iteration  25: 4738869.173 ops/s
Iteration  26: 4759919.676 ops/s
Iteration  27: 4741754.621 ops/s
Iteration  28: 4767076.807 ops/s
Iteration  29: 4742952.758 ops/s
Iteration  30: 4741174.954 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_safe":
  4747070.008 ±(99.9%) 7625.674 ops/s [Average]
  (min, avg, max) = (4720085.244, 4747070.008, 4767644.671), stdev = 11413.751
  CI (99.9%): [4739444.334, 4754695.682] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_min_null_safe  thrpt   30  4747070.008 ± 7625.674  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2782285.954 ops/s
# Warmup Iteration   2: 5484539.531 ops/s
# Warmup Iteration   3: 6071302.740 ops/s
# Warmup Iteration   4: 6082636.463 ops/s
# Warmup Iteration   5: 4985317.828 ops/s
# Warmup Iteration   6: 6110178.818 ops/s
# Warmup Iteration   7: 6089986.540 ops/s
# Warmup Iteration   8: 6102842.991 ops/s
# Warmup Iteration   9: 6098228.766 ops/s
# Warmup Iteration  10: 6101456.395 ops/s
# Warmup Iteration  11: 6086152.889 ops/s
# Warmup Iteration  12: 6088344.268 ops/s
# Warmup Iteration  13: 6103354.039 ops/s
# Warmup Iteration  14: 6084031.136 ops/s
# Warmup Iteration  15: 6091908.989 ops/s
# Warmup Iteration  16: 6097183.970 ops/s
# Warmup Iteration  17: 6072152.434 ops/s
# Warmup Iteration  18: 6090553.276 ops/s
# Warmup Iteration  19: 6102856.095 ops/s
# Warmup Iteration  20: 6095549.791 ops/s
# Warmup Iteration  21: 6093115.540 ops/s
# Warmup Iteration  22: 6101163.019 ops/s
# Warmup Iteration  23: 6108881.222 ops/s
# Warmup Iteration  24: 6099142.759 ops/s
# Warmup Iteration  25: 6124344.582 ops/s
# Warmup Iteration  26: 6119853.254 ops/s
# Warmup Iteration  27: 6092664.418 ops/s
# Warmup Iteration  28: 6101807.832 ops/s
# Warmup Iteration  29: 6102854.298 ops/s
# Warmup Iteration  30: 6099229.661 ops/s
Iteration   1: 6101572.563 ops/s
Iteration   2: 6106059.109 ops/s
Iteration   3: 6082679.892 ops/s
Iteration   4: 6114836.167 ops/s
Iteration   5: 6122501.218 ops/s
Iteration   6: 6076797.924 ops/s
Iteration   7: 6090030.134 ops/s
Iteration   8: 6096577.219 ops/s
Iteration   9: 6119327.761 ops/s
Iteration  10: 6102151.701 ops/s
Iteration  11: 6124967.234 ops/s
Iteration  12: 6101361.465 ops/s
Iteration  13: 6105251.630 ops/s
Iteration  14: 6113251.431 ops/s
Iteration  15: 6096211.303 ops/s
Iteration  16: 6102738.887 ops/s
Iteration  17: 6116595.927 ops/s
Iteration  18: 6110579.671 ops/s
Iteration  19: 6104583.487 ops/s
Iteration  20: 6108395.613 ops/s
Iteration  21: 6082529.708 ops/s
Iteration  22: 6109161.549 ops/s
Iteration  23: 6123443.521 ops/s
Iteration  24: 6112374.083 ops/s
Iteration  25: 6085878.094 ops/s
Iteration  26: 6108755.487 ops/s
Iteration  27: 6089410.637 ops/s
Iteration  28: 6087928.458 ops/s
Iteration  29: 6096171.267 ops/s
Iteration  30: 6090998.539 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws":
  6102770.723 ±(99.9%) 8696.550 ops/s [Average]
  (min, avg, max) = (6076797.924, 6102770.723, 6124967.234), stdev = 13016.588
  CI (99.9%): [6094074.172, 6111467.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_min_null_throws  thrpt   30  6102770.723 ± 8696.550  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2825325.673 ops/s
# Warmup Iteration   2: 5491193.308 ops/s
# Warmup Iteration   3: 6011005.912 ops/s
# Warmup Iteration   4: 6050136.502 ops/s
# Warmup Iteration   5: 4936035.184 ops/s
# Warmup Iteration   6: 6055893.454 ops/s
# Warmup Iteration   7: 6056307.960 ops/s
# Warmup Iteration   8: 6051802.006 ops/s
# Warmup Iteration   9: 6039026.608 ops/s
# Warmup Iteration  10: 6053215.712 ops/s
# Warmup Iteration  11: 6056689.596 ops/s
# Warmup Iteration  12: 6044237.848 ops/s
# Warmup Iteration  13: 6048543.140 ops/s
# Warmup Iteration  14: 6055665.316 ops/s
# Warmup Iteration  15: 6050842.176 ops/s
# Warmup Iteration  16: 6057783.663 ops/s
# Warmup Iteration  17: 6067789.981 ops/s
# Warmup Iteration  18: 6056636.933 ops/s
# Warmup Iteration  19: 6056956.803 ops/s
# Warmup Iteration  20: 6066272.922 ops/s
# Warmup Iteration  21: 6059213.347 ops/s
# Warmup Iteration  22: 6056688.691 ops/s
# Warmup Iteration  23: 6043064.864 ops/s
# Warmup Iteration  24: 6072831.844 ops/s
# Warmup Iteration  25: 6041149.147 ops/s
# Warmup Iteration  26: 6039179.139 ops/s
# Warmup Iteration  27: 6065980.679 ops/s
# Warmup Iteration  28: 6064952.488 ops/s
# Warmup Iteration  29: 6039105.754 ops/s
# Warmup Iteration  30: 6032920.824 ops/s
Iteration   1: 6055503.393 ops/s
Iteration   2: 6039127.255 ops/s
Iteration   3: 6070482.091 ops/s
Iteration   4: 6047883.235 ops/s
Iteration   5: 6048526.296 ops/s
Iteration   6: 6043391.991 ops/s
Iteration   7: 6056690.467 ops/s
Iteration   8: 6038221.997 ops/s
Iteration   9: 6053255.901 ops/s
Iteration  10: 6050784.133 ops/s
Iteration  11: 6034575.016 ops/s
Iteration  12: 6040398.627 ops/s
Iteration  13: 6071309.616 ops/s
Iteration  14: 6052038.052 ops/s
Iteration  15: 6064336.386 ops/s
Iteration  16: 6078900.072 ops/s
Iteration  17: 6040340.984 ops/s
Iteration  18: 6030722.942 ops/s
Iteration  19: 6067479.565 ops/s
Iteration  20: 6053040.352 ops/s
Iteration  21: 6066143.533 ops/s
Iteration  22: 6059421.147 ops/s
Iteration  23: 6046311.052 ops/s
Iteration  24: 6048674.497 ops/s
Iteration  25: 6055368.131 ops/s
Iteration  26: 6056069.387 ops/s
Iteration  27: 6063084.702 ops/s
Iteration  28: 6049836.348 ops/s
Iteration  29: 6049464.849 ops/s
Iteration  30: 6059895.991 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_null_throws_without_comparator":
  6053042.600 ±(99.9%) 7692.014 ops/s [Average]
  (min, avg, max) = (6030722.942, 6053042.600, 6078900.072), stdev = 11513.045
  CI (99.9%): [6045350.586, 6060734.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_min_null_throws_without_comparator  thrpt   30  6053042.600 ± 7692.014  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_without_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_without_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2757688.342 ops/s
# Warmup Iteration   2: 4976107.628 ops/s
# Warmup Iteration   3: 5527647.337 ops/s
# Warmup Iteration   4: 5530551.793 ops/s
# Warmup Iteration   5: 5276240.481 ops/s
# Warmup Iteration   6: 4809653.537 ops/s
# Warmup Iteration   7: 5539465.126 ops/s
# Warmup Iteration   8: 5558286.877 ops/s
# Warmup Iteration   9: 5548869.339 ops/s
# Warmup Iteration  10: 5557332.811 ops/s
# Warmup Iteration  11: 5554103.593 ops/s
# Warmup Iteration  12: 5545795.782 ops/s
# Warmup Iteration  13: 5548035.902 ops/s
# Warmup Iteration  14: 5548374.743 ops/s
# Warmup Iteration  15: 5563390.878 ops/s
# Warmup Iteration  16: 5548374.211 ops/s
# Warmup Iteration  17: 5532423.507 ops/s
# Warmup Iteration  18: 5558834.984 ops/s
# Warmup Iteration  19: 5545124.294 ops/s
# Warmup Iteration  20: 5558074.834 ops/s
# Warmup Iteration  21: 5538391.119 ops/s
# Warmup Iteration  22: 5560803.456 ops/s
# Warmup Iteration  23: 5540981.642 ops/s
# Warmup Iteration  24: 5530705.074 ops/s
# Warmup Iteration  25: 5563479.927 ops/s
# Warmup Iteration  26: 5546180.705 ops/s
# Warmup Iteration  27: 5543209.117 ops/s
# Warmup Iteration  28: 5547145.603 ops/s
# Warmup Iteration  29: 5552033.764 ops/s
# Warmup Iteration  30: 5516417.103 ops/s
Iteration   1: 5545344.198 ops/s
Iteration   2: 5545568.558 ops/s
Iteration   3: 5557612.134 ops/s
Iteration   4: 5561337.502 ops/s
Iteration   5: 5532010.937 ops/s
Iteration   6: 5563238.958 ops/s
Iteration   7: 5557770.871 ops/s
Iteration   8: 5550316.821 ops/s
Iteration   9: 5550883.779 ops/s
Iteration  10: 5550679.673 ops/s
Iteration  11: 5557844.681 ops/s
Iteration  12: 5542876.600 ops/s
Iteration  13: 5550994.426 ops/s
Iteration  14: 5555723.255 ops/s
Iteration  15: 5533193.001 ops/s
Iteration  16: 5578741.713 ops/s
Iteration  17: 5530817.768 ops/s
Iteration  18: 5572010.470 ops/s
Iteration  19: 5539524.591 ops/s
Iteration  20: 5529921.363 ops/s
Iteration  21: 5560919.149 ops/s
Iteration  22: 5554453.548 ops/s
Iteration  23: 5552927.372 ops/s
Iteration  24: 5555996.545 ops/s
Iteration  25: 5556111.826 ops/s
Iteration  26: 5545377.099 ops/s
Iteration  27: 5540583.566 ops/s
Iteration  28: 5528893.850 ops/s
Iteration  29: 5559678.727 ops/s
Iteration  30: 5562881.582 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_min_without_comparator":
  5550807.819 ±(99.9%) 8252.718 ops/s [Average]
  (min, avg, max) = (5528893.850, 5550807.819, 5578741.713), stdev = 12352.281
  CI (99.9%): [5542555.101, 5559060.537] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_min_without_comparator  thrpt   30  5550807.819 ± 8252.718  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 845483.654 ops/s
# Warmup Iteration   2: 1400663.111 ops/s
# Warmup Iteration   3: 1616325.766 ops/s
# Warmup Iteration   4: 1628468.741 ops/s
# Warmup Iteration   5: 1624828.983 ops/s
# Warmup Iteration   6: 1324658.920 ops/s
# Warmup Iteration   7: 1618466.893 ops/s
# Warmup Iteration   8: 1618695.254 ops/s
# Warmup Iteration   9: 1621014.537 ops/s
# Warmup Iteration  10: 1619954.516 ops/s
# Warmup Iteration  11: 1621490.324 ops/s
# Warmup Iteration  12: 1615976.351 ops/s
# Warmup Iteration  13: 1618162.664 ops/s
# Warmup Iteration  14: 1619739.057 ops/s
# Warmup Iteration  15: 1621017.321 ops/s
# Warmup Iteration  16: 1616609.737 ops/s
# Warmup Iteration  17: 1627458.170 ops/s
# Warmup Iteration  18: 1625169.579 ops/s
# Warmup Iteration  19: 1625713.522 ops/s
# Warmup Iteration  20: 1628164.101 ops/s
# Warmup Iteration  21: 1625628.810 ops/s
# Warmup Iteration  22: 1624797.931 ops/s
# Warmup Iteration  23: 1627111.714 ops/s
# Warmup Iteration  24: 1622758.356 ops/s
# Warmup Iteration  25: 1624992.109 ops/s
# Warmup Iteration  26: 1627418.961 ops/s
# Warmup Iteration  27: 1629768.189 ops/s
# Warmup Iteration  28: 1619901.384 ops/s
# Warmup Iteration  29: 1621954.985 ops/s
# Warmup Iteration  30: 1625001.602 ops/s
Iteration   1: 1629412.820 ops/s
Iteration   2: 1626351.235 ops/s
Iteration   3: 1630109.021 ops/s
Iteration   4: 1624108.719 ops/s
Iteration   5: 1625988.596 ops/s
Iteration   6: 1629880.845 ops/s
Iteration   7: 1630119.635 ops/s
Iteration   8: 1629170.339 ops/s
Iteration   9: 1628956.661 ops/s
Iteration  10: 1628605.560 ops/s
Iteration  11: 1619483.672 ops/s
Iteration  12: 1630906.800 ops/s
Iteration  13: 1626046.709 ops/s
Iteration  14: 1633355.443 ops/s
Iteration  15: 1630782.272 ops/s
Iteration  16: 1626069.014 ops/s
Iteration  17: 1629896.445 ops/s
Iteration  18: 1628679.025 ops/s
Iteration  19: 1627141.995 ops/s
Iteration  20: 1630939.189 ops/s
Iteration  21: 1626545.186 ops/s
Iteration  22: 1629225.560 ops/s
Iteration  23: 1631226.666 ops/s
Iteration  24: 1627755.679 ops/s
Iteration  25: 1628821.415 ops/s
Iteration  26: 1624396.347 ops/s
Iteration  27: 1627526.361 ops/s
Iteration  28: 1627788.704 ops/s
Iteration  29: 1627272.191 ops/s
Iteration  30: 1625885.569 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromBag":
  1628081.589 ±(99.9%) 1798.857 ops/s [Average]
  (min, avg, max) = (1619483.672, 1628081.589, 1633355.443), stdev = 2692.444
  CI (99.9%): [1626282.732, 1629880.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_newBagFromBag  thrpt   30  1628081.589 ± 1798.857  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546427.785 ops/s
# Warmup Iteration   2: 969870.128 ops/s
# Warmup Iteration   3: 1117722.403 ops/s
# Warmup Iteration   4: 1125113.459 ops/s
# Warmup Iteration   5: 1127688.950 ops/s
# Warmup Iteration   6: 927231.140 ops/s
# Warmup Iteration   7: 1127234.006 ops/s
# Warmup Iteration   8: 1125522.769 ops/s
# Warmup Iteration   9: 1129415.150 ops/s
# Warmup Iteration  10: 1129533.079 ops/s
# Warmup Iteration  11: 1129172.709 ops/s
# Warmup Iteration  12: 1126472.366 ops/s
# Warmup Iteration  13: 1127005.828 ops/s
# Warmup Iteration  14: 1125933.173 ops/s
# Warmup Iteration  15: 1128077.085 ops/s
# Warmup Iteration  16: 1127869.519 ops/s
# Warmup Iteration  17: 1130031.929 ops/s
# Warmup Iteration  18: 1133342.254 ops/s
# Warmup Iteration  19: 1130199.510 ops/s
# Warmup Iteration  20: 1131714.636 ops/s
# Warmup Iteration  21: 1131599.881 ops/s
# Warmup Iteration  22: 1131244.133 ops/s
# Warmup Iteration  23: 1133461.326 ops/s
# Warmup Iteration  24: 1128958.244 ops/s
# Warmup Iteration  25: 1132939.517 ops/s
# Warmup Iteration  26: 1129922.447 ops/s
# Warmup Iteration  27: 1131192.713 ops/s
# Warmup Iteration  28: 1131442.657 ops/s
# Warmup Iteration  29: 1130811.442 ops/s
# Warmup Iteration  30: 1128988.808 ops/s
Iteration   1: 1133944.025 ops/s
Iteration   2: 1128672.590 ops/s
Iteration   3: 1133121.742 ops/s
Iteration   4: 1131120.607 ops/s
Iteration   5: 1132516.401 ops/s
Iteration   6: 1130184.716 ops/s
Iteration   7: 1129161.604 ops/s
Iteration   8: 1126110.022 ops/s
Iteration   9: 1133126.708 ops/s
Iteration  10: 1127952.667 ops/s
Iteration  11: 1137097.130 ops/s
Iteration  12: 1131456.299 ops/s
Iteration  13: 1129474.159 ops/s
Iteration  14: 1129766.162 ops/s
Iteration  15: 1130924.332 ops/s
Iteration  16: 1133028.922 ops/s
Iteration  17: 1134504.687 ops/s
Iteration  18: 1133568.444 ops/s
Iteration  19: 1130064.772 ops/s
Iteration  20: 1131714.455 ops/s
Iteration  21: 1129405.750 ops/s
Iteration  22: 1130250.189 ops/s
Iteration  23: 1133679.697 ops/s
Iteration  24: 1131456.238 ops/s
Iteration  25: 1131251.447 ops/s
Iteration  26: 1127755.700 ops/s
Iteration  27: 1128970.755 ops/s
Iteration  28: 1128172.584 ops/s
Iteration  29: 1130260.474 ops/s
Iteration  30: 1128416.945 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagFromIterable":
  1130904.341 ±(99.9%) 1610.101 ops/s [Average]
  (min, avg, max) = (1126110.022, 1130904.341, 1137097.130), stdev = 2409.924
  CI (99.9%): [1129294.239, 1132514.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_newBagFromIterable  thrpt   30  1130904.341 ± 1610.101  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 343687.940 ops/s
# Warmup Iteration   2: 635074.285 ops/s
# Warmup Iteration   3: 712461.076 ops/s
# Warmup Iteration   4: 715743.978 ops/s
# Warmup Iteration   5: 716413.032 ops/s
# Warmup Iteration   6: 594299.899 ops/s
# Warmup Iteration   7: 716501.709 ops/s
# Warmup Iteration   8: 715754.899 ops/s
# Warmup Iteration   9: 715749.299 ops/s
# Warmup Iteration  10: 718311.797 ops/s
# Warmup Iteration  11: 717501.160 ops/s
# Warmup Iteration  12: 717729.649 ops/s
# Warmup Iteration  13: 717640.166 ops/s
# Warmup Iteration  14: 718202.801 ops/s
# Warmup Iteration  15: 717032.556 ops/s
# Warmup Iteration  16: 716442.005 ops/s
# Warmup Iteration  17: 717686.855 ops/s
# Warmup Iteration  18: 717660.027 ops/s
# Warmup Iteration  19: 716724.632 ops/s
# Warmup Iteration  20: 717882.733 ops/s
# Warmup Iteration  21: 718534.553 ops/s
# Warmup Iteration  22: 717609.616 ops/s
# Warmup Iteration  23: 717038.210 ops/s
# Warmup Iteration  24: 715742.583 ops/s
# Warmup Iteration  25: 720693.181 ops/s
# Warmup Iteration  26: 718646.029 ops/s
# Warmup Iteration  27: 717332.126 ops/s
# Warmup Iteration  28: 716678.745 ops/s
# Warmup Iteration  29: 715760.767 ops/s
# Warmup Iteration  30: 717769.065 ops/s
Iteration   1: 721299.708 ops/s
Iteration   2: 716211.879 ops/s
Iteration   3: 719167.112 ops/s
Iteration   4: 715604.343 ops/s
Iteration   5: 719002.474 ops/s
Iteration   6: 720884.310 ops/s
Iteration   7: 718875.764 ops/s
Iteration   8: 717714.166 ops/s
Iteration   9: 717244.215 ops/s
Iteration  10: 716517.058 ops/s
Iteration  11: 718437.168 ops/s
Iteration  12: 718890.984 ops/s
Iteration  13: 723824.036 ops/s
Iteration  14: 717376.840 ops/s
Iteration  15: 716611.628 ops/s
Iteration  16: 720586.373 ops/s
Iteration  17: 716576.075 ops/s
Iteration  18: 718377.217 ops/s
Iteration  19: 717317.223 ops/s
Iteration  20: 719007.854 ops/s
Iteration  21: 721179.370 ops/s
Iteration  22: 717680.851 ops/s
Iteration  23: 719637.578 ops/s
Iteration  24: 714466.545 ops/s
Iteration  25: 715463.032 ops/s
Iteration  26: 719629.294 ops/s
Iteration  27: 718776.637 ops/s
Iteration  28: 720013.753 ops/s
Iteration  29: 718041.270 ops/s
Iteration  30: 720662.525 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newBagWith":
  718502.576 ±(99.9%) 1360.942 ops/s [Average]
  (min, avg, max) = (714466.545, 718502.576, 723824.036), stdev = 2036.994
  CI (99.9%): [717141.634, 719863.518] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_newBagWith  thrpt   30  718502.576 ± 1360.942  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8512210.681 ops/s
# Warmup Iteration   2: 14211606.151 ops/s
# Warmup Iteration   3: 17066455.506 ops/s
# Warmup Iteration   4: 16982274.224 ops/s
# Warmup Iteration   5: 17061735.480 ops/s
# Warmup Iteration   6: 17061063.414 ops/s
# Warmup Iteration   7: 16928810.348 ops/s
# Warmup Iteration   8: 16955295.666 ops/s
# Warmup Iteration   9: 17059880.029 ops/s
# Warmup Iteration  10: 17013522.241 ops/s
# Warmup Iteration  11: 17077582.356 ops/s
# Warmup Iteration  12: 17086773.978 ops/s
# Warmup Iteration  13: 17062587.562 ops/s
# Warmup Iteration  14: 16919736.753 ops/s
# Warmup Iteration  15: 17168301.857 ops/s
# Warmup Iteration  16: 17134500.389 ops/s
# Warmup Iteration  17: 16991308.677 ops/s
# Warmup Iteration  18: 17043634.699 ops/s
# Warmup Iteration  19: 17117186.631 ops/s
# Warmup Iteration  20: 17165628.929 ops/s
# Warmup Iteration  21: 17129249.781 ops/s
# Warmup Iteration  22: 17157547.614 ops/s
# Warmup Iteration  23: 17072943.439 ops/s
# Warmup Iteration  24: 17100996.364 ops/s
# Warmup Iteration  25: 17119028.445 ops/s
# Warmup Iteration  26: 17097249.691 ops/s
# Warmup Iteration  27: 17050651.210 ops/s
# Warmup Iteration  28: 16893679.549 ops/s
# Warmup Iteration  29: 17016321.889 ops/s
# Warmup Iteration  30: 17017323.267 ops/s
Iteration   1: 16784224.610 ops/s
Iteration   2: 16886818.133 ops/s
Iteration   3: 17019071.612 ops/s
Iteration   4: 16919211.902 ops/s
Iteration   5: 16996926.415 ops/s
Iteration   6: 16950861.099 ops/s
Iteration   7: 16921203.737 ops/s
Iteration   8: 16956611.147 ops/s
Iteration   9: 17044672.299 ops/s
Iteration  10: 17130779.184 ops/s
Iteration  11: 17089045.912 ops/s
Iteration  12: 16926325.091 ops/s
Iteration  13: 17105882.664 ops/s
Iteration  14: 16802766.080 ops/s
Iteration  15: 16909499.630 ops/s
Iteration  16: 17013540.939 ops/s
Iteration  17: 16922065.210 ops/s
Iteration  18: 17125788.295 ops/s
Iteration  19: 17043341.824 ops/s
Iteration  20: 17095039.215 ops/s
Iteration  21: 17050703.366 ops/s
Iteration  22: 17007582.955 ops/s
Iteration  23: 17112241.115 ops/s
Iteration  24: 17054682.478 ops/s
Iteration  25: 17011198.350 ops/s
Iteration  26: 17029925.134 ops/s
Iteration  27: 16876068.566 ops/s
Iteration  28: 16951641.452 ops/s
Iteration  29: 17045143.732 ops/s
Iteration  30: 17097101.950 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_newEmpty":
  16995998.803 ±(99.9%) 61839.641 ops/s [Average]
  (min, avg, max) = (16784224.610, 16995998.803, 17130779.184), stdev = 92558.671
  CI (99.9%): [16934159.162, 17057838.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_newEmpty  thrpt   30  16995998.803 ± 61839.641  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1066884.321 ops/s
# Warmup Iteration   2: 2132036.498 ops/s
# Warmup Iteration   3: 2309811.367 ops/s
# Warmup Iteration   4: 2325797.025 ops/s
# Warmup Iteration   5: 1901112.291 ops/s
# Warmup Iteration   6: 2321222.958 ops/s
# Warmup Iteration   7: 2326994.871 ops/s
# Warmup Iteration   8: 2329905.124 ops/s
# Warmup Iteration   9: 2321738.241 ops/s
# Warmup Iteration  10: 2329634.415 ops/s
# Warmup Iteration  11: 2328122.868 ops/s
# Warmup Iteration  12: 2319454.169 ops/s
# Warmup Iteration  13: 2328042.819 ops/s
# Warmup Iteration  14: 2331282.537 ops/s
# Warmup Iteration  15: 2324170.283 ops/s
# Warmup Iteration  16: 2326785.144 ops/s
# Warmup Iteration  17: 2323879.020 ops/s
# Warmup Iteration  18: 2329887.849 ops/s
# Warmup Iteration  19: 2327524.756 ops/s
# Warmup Iteration  20: 2329361.730 ops/s
# Warmup Iteration  21: 2328197.409 ops/s
# Warmup Iteration  22: 2321623.759 ops/s
# Warmup Iteration  23: 2326857.740 ops/s
# Warmup Iteration  24: 2329722.784 ops/s
# Warmup Iteration  25: 2319006.457 ops/s
# Warmup Iteration  26: 2325560.797 ops/s
# Warmup Iteration  27: 2329940.643 ops/s
# Warmup Iteration  28: 2325164.640 ops/s
# Warmup Iteration  29: 2324880.272 ops/s
# Warmup Iteration  30: 2324591.090 ops/s
Iteration   1: 2330671.755 ops/s
Iteration   2: 2327621.915 ops/s
Iteration   3: 2332174.387 ops/s
Iteration   4: 2317866.230 ops/s
Iteration   5: 2328109.053 ops/s
Iteration   6: 2330415.198 ops/s
Iteration   7: 2328946.555 ops/s
Iteration   8: 2330817.824 ops/s
Iteration   9: 2317435.649 ops/s
Iteration  10: 2325437.818 ops/s
Iteration  11: 2324138.221 ops/s
Iteration  12: 2321383.448 ops/s
Iteration  13: 2328157.116 ops/s
Iteration  14: 2328009.400 ops/s
Iteration  15: 2330989.629 ops/s
Iteration  16: 2330790.818 ops/s
Iteration  17: 2323006.021 ops/s
Iteration  18: 2325473.859 ops/s
Iteration  19: 2327928.559 ops/s
Iteration  20: 2330305.241 ops/s
Iteration  21: 2328090.142 ops/s
Iteration  22: 2320811.401 ops/s
Iteration  23: 2324676.164 ops/s
Iteration  24: 2333372.288 ops/s
Iteration  25: 2326388.291 ops/s
Iteration  26: 2335011.057 ops/s
Iteration  27: 2336479.888 ops/s
Iteration  28: 2334240.697 ops/s
Iteration  29: 2325012.220 ops/s
Iteration  30: 2319358.458 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfy":
  2327437.310 ±(99.9%) 3283.965 ops/s [Average]
  (min, avg, max) = (2317435.649, 2327437.310, 2336479.888), stdev = 4915.284
  CI (99.9%): [2324153.345, 2330721.275] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_noneSatisfy  thrpt   30  2327437.310 ± 3283.965  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1330412.307 ops/s
# Warmup Iteration   2: 2525976.339 ops/s
# Warmup Iteration   3: 2784287.120 ops/s
# Warmup Iteration   4: 2801900.743 ops/s
# Warmup Iteration   5: 2486992.759 ops/s
# Warmup Iteration   6: 2621694.915 ops/s
# Warmup Iteration   7: 2806878.155 ops/s
# Warmup Iteration   8: 2815983.523 ops/s
# Warmup Iteration   9: 2805927.372 ops/s
# Warmup Iteration  10: 2808307.287 ops/s
# Warmup Iteration  11: 2803498.220 ops/s
# Warmup Iteration  12: 2806569.814 ops/s
# Warmup Iteration  13: 2804145.234 ops/s
# Warmup Iteration  14: 2805286.152 ops/s
# Warmup Iteration  15: 2813321.673 ops/s
# Warmup Iteration  16: 2809523.119 ops/s
# Warmup Iteration  17: 2795962.879 ops/s
# Warmup Iteration  18: 2808794.740 ops/s
# Warmup Iteration  19: 2809517.238 ops/s
# Warmup Iteration  20: 2803368.345 ops/s
# Warmup Iteration  21: 2812128.540 ops/s
# Warmup Iteration  22: 2801635.634 ops/s
# Warmup Iteration  23: 2810449.364 ops/s
# Warmup Iteration  24: 2804473.768 ops/s
# Warmup Iteration  25: 2809251.177 ops/s
# Warmup Iteration  26: 2818657.884 ops/s
# Warmup Iteration  27: 2798141.632 ops/s
# Warmup Iteration  28: 2800110.023 ops/s
# Warmup Iteration  29: 2806061.040 ops/s
# Warmup Iteration  30: 2804338.201 ops/s
Iteration   1: 2795100.163 ops/s
Iteration   2: 2801186.640 ops/s
Iteration   3: 2809124.016 ops/s
Iteration   4: 2804866.447 ops/s
Iteration   5: 2790059.830 ops/s
Iteration   6: 2795190.474 ops/s
Iteration   7: 2803042.794 ops/s
Iteration   8: 2803893.990 ops/s
Iteration   9: 2809258.555 ops/s
Iteration  10: 2796803.821 ops/s
Iteration  11: 2801935.125 ops/s
Iteration  12: 2804315.027 ops/s
Iteration  13: 2785819.149 ops/s
Iteration  14: 2785940.632 ops/s
Iteration  15: 2804631.076 ops/s
Iteration  16: 2808902.808 ops/s
Iteration  17: 2816239.439 ops/s
Iteration  18: 2800896.807 ops/s
Iteration  19: 2799756.174 ops/s
Iteration  20: 2815266.905 ops/s
Iteration  21: 2802521.861 ops/s
Iteration  22: 2812189.751 ops/s
Iteration  23: 2811944.476 ops/s
Iteration  24: 2807953.388 ops/s
Iteration  25: 2812040.243 ops/s
Iteration  26: 2814026.705 ops/s
Iteration  27: 2807220.585 ops/s
Iteration  28: 2805650.637 ops/s
Iteration  29: 2800008.227 ops/s
Iteration  30: 2809263.287 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWith":
  2803834.968 ±(99.9%) 5300.654 ops/s [Average]
  (min, avg, max) = (2785819.149, 2803834.968, 2816239.439), stdev = 7933.770
  CI (99.9%): [2798534.314, 2809135.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_noneSatisfyWith  thrpt   30  2803834.968 ± 5300.654  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1029983.347 ops/s
# Warmup Iteration   2: 2219989.989 ops/s
# Warmup Iteration   3: 2440671.696 ops/s
# Warmup Iteration   4: 2456370.849 ops/s
# Warmup Iteration   5: 2029183.841 ops/s
# Warmup Iteration   6: 2461206.403 ops/s
# Warmup Iteration   7: 2458389.048 ops/s
# Warmup Iteration   8: 2461142.697 ops/s
# Warmup Iteration   9: 2464113.625 ops/s
# Warmup Iteration  10: 2461376.058 ops/s
# Warmup Iteration  11: 2459287.692 ops/s
# Warmup Iteration  12: 2459885.496 ops/s
# Warmup Iteration  13: 2465106.059 ops/s
# Warmup Iteration  14: 2466017.307 ops/s
# Warmup Iteration  15: 2459642.608 ops/s
# Warmup Iteration  16: 2467964.081 ops/s
# Warmup Iteration  17: 2465457.939 ops/s
# Warmup Iteration  18: 2465407.694 ops/s
# Warmup Iteration  19: 2457085.765 ops/s
# Warmup Iteration  20: 2458429.155 ops/s
# Warmup Iteration  21: 2466376.815 ops/s
# Warmup Iteration  22: 2456977.984 ops/s
# Warmup Iteration  23: 2464824.632 ops/s
# Warmup Iteration  24: 2464411.576 ops/s
# Warmup Iteration  25: 2459305.757 ops/s
# Warmup Iteration  26: 2462738.127 ops/s
# Warmup Iteration  27: 2469352.743 ops/s
# Warmup Iteration  28: 2460360.515 ops/s
# Warmup Iteration  29: 2450895.548 ops/s
# Warmup Iteration  30: 2456891.392 ops/s
Iteration   1: 2460113.991 ops/s
Iteration   2: 2462086.578 ops/s
Iteration   3: 2448407.811 ops/s
Iteration   4: 2448332.976 ops/s
Iteration   5: 2463563.105 ops/s
Iteration   6: 2465840.130 ops/s
Iteration   7: 2453453.131 ops/s
Iteration   8: 2467241.370 ops/s
Iteration   9: 2452157.777 ops/s
Iteration  10: 2453056.619 ops/s
Iteration  11: 2449819.611 ops/s
Iteration  12: 2466258.653 ops/s
Iteration  13: 2452609.412 ops/s
Iteration  14: 2463518.117 ops/s
Iteration  15: 2447493.121 ops/s
Iteration  16: 2460497.329 ops/s
Iteration  17: 2456343.332 ops/s
Iteration  18: 2452835.200 ops/s
Iteration  19: 2452729.700 ops/s
Iteration  20: 2457755.879 ops/s
Iteration  21: 2454165.444 ops/s
Iteration  22: 2452787.495 ops/s
Iteration  23: 2465368.109 ops/s
Iteration  24: 2446911.645 ops/s
Iteration  25: 2457627.698 ops/s
Iteration  26: 2463882.682 ops/s
Iteration  27: 2458878.954 ops/s
Iteration  28: 2462512.731 ops/s
Iteration  29: 2460003.505 ops/s
Iteration  30: 2459416.207 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences":
  2457188.944 ±(99.9%) 4102.596 ops/s [Average]
  (min, avg, max) = (2446911.645, 2457188.944, 2467241.370), stdev = 6140.573
  CI (99.9%): [2453086.348, 2461291.540] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_noneSatisfyWithOccurrences  thrpt   30  2457188.944 ± 4102.596  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_notEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_notEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 3602587.992 ops/s
# Warmup Iteration   2: 7580500.203 ops/s
# Warmup Iteration   3: 6409716.164 ops/s
# Warmup Iteration   4: 7636225.966 ops/s
# Warmup Iteration   5: 7644012.702 ops/s
# Warmup Iteration   6: 7652788.426 ops/s
# Warmup Iteration   7: 7630610.372 ops/s
# Warmup Iteration   8: 7663884.754 ops/s
# Warmup Iteration   9: 7654745.578 ops/s
# Warmup Iteration  10: 7627794.061 ops/s
# Warmup Iteration  11: 7668011.048 ops/s
# Warmup Iteration  12: 7671694.797 ops/s
# Warmup Iteration  13: 7638975.905 ops/s
# Warmup Iteration  14: 7668494.209 ops/s
# Warmup Iteration  15: 7666843.924 ops/s
# Warmup Iteration  16: 7671900.399 ops/s
# Warmup Iteration  17: 7655814.799 ops/s
# Warmup Iteration  18: 7644463.787 ops/s
# Warmup Iteration  19: 7667193.690 ops/s
# Warmup Iteration  20: 7666548.154 ops/s
# Warmup Iteration  21: 7680284.068 ops/s
# Warmup Iteration  22: 7652372.740 ops/s
# Warmup Iteration  23: 7661085.717 ops/s
# Warmup Iteration  24: 7652898.969 ops/s
# Warmup Iteration  25: 7673661.160 ops/s
# Warmup Iteration  26: 7667114.744 ops/s
# Warmup Iteration  27: 7644867.918 ops/s
# Warmup Iteration  28: 7689125.144 ops/s
# Warmup Iteration  29: 7667512.745 ops/s
# Warmup Iteration  30: 7681504.923 ops/s
Iteration   1: 7654000.734 ops/s
Iteration   2: 7727437.605 ops/s
Iteration   3: 7662613.232 ops/s
Iteration   4: 7638202.739 ops/s
Iteration   5: 7661170.571 ops/s
Iteration   6: 7666993.526 ops/s
Iteration   7: 7690560.928 ops/s
Iteration   8: 7682252.833 ops/s
Iteration   9: 7630990.625 ops/s
Iteration  10: 7649554.180 ops/s
Iteration  11: 7666696.624 ops/s
Iteration  12: 7653718.901 ops/s
Iteration  13: 7637301.027 ops/s
Iteration  14: 7576078.033 ops/s
Iteration  15: 7662534.983 ops/s
Iteration  16: 7638183.233 ops/s
Iteration  17: 7658585.599 ops/s
Iteration  18: 7659221.393 ops/s
Iteration  19: 7710740.522 ops/s
Iteration  20: 7630417.249 ops/s
Iteration  21: 7644053.605 ops/s
Iteration  22: 7658029.092 ops/s
Iteration  23: 7707891.596 ops/s
Iteration  24: 7689150.176 ops/s
Iteration  25: 7664398.540 ops/s
Iteration  26: 7654198.496 ops/s
Iteration  27: 7645399.207 ops/s
Iteration  28: 7652270.495 ops/s
Iteration  29: 7657374.958 ops/s
Iteration  30: 7655486.495 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_notEmpty":
  7659516.907 ±(99.9%) 18741.996 ops/s [Average]
  (min, avg, max) = (7576078.033, 7659516.907, 7727437.605), stdev = 28052.140
  CI (99.9%): [7640774.910, 7678258.903] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_notEmpty  thrpt   30  7659516.907 ± 18741.996  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 4687558.016 ops/s
# Warmup Iteration   2: 10388975.703 ops/s
# Warmup Iteration   3: 10699069.560 ops/s
# Warmup Iteration   4: 9571037.565 ops/s
# Warmup Iteration   5: 9952680.396 ops/s
# Warmup Iteration   6: 10722964.835 ops/s
# Warmup Iteration   7: 10695216.649 ops/s
# Warmup Iteration   8: 10718818.123 ops/s
# Warmup Iteration   9: 10713717.634 ops/s
# Warmup Iteration  10: 10722809.717 ops/s
# Warmup Iteration  11: 10719840.426 ops/s
# Warmup Iteration  12: 10715018.995 ops/s
# Warmup Iteration  13: 10704034.910 ops/s
# Warmup Iteration  14: 10715879.183 ops/s
# Warmup Iteration  15: 10709633.896 ops/s
# Warmup Iteration  16: 10693820.506 ops/s
# Warmup Iteration  17: 10712076.783 ops/s
# Warmup Iteration  18: 10697486.200 ops/s
# Warmup Iteration  19: 10703534.233 ops/s
# Warmup Iteration  20: 10731253.255 ops/s
# Warmup Iteration  21: 10703190.217 ops/s
# Warmup Iteration  22: 10711127.287 ops/s
# Warmup Iteration  23: 10712008.711 ops/s
# Warmup Iteration  24: 10693208.847 ops/s
# Warmup Iteration  25: 10715709.812 ops/s
# Warmup Iteration  26: 10707336.860 ops/s
# Warmup Iteration  27: 10714808.733 ops/s
# Warmup Iteration  28: 10725639.710 ops/s
# Warmup Iteration  29: 10708471.712 ops/s
# Warmup Iteration  30: 10749761.849 ops/s
Iteration   1: 10721623.903 ops/s
Iteration   2: 10706432.476 ops/s
Iteration   3: 10664662.161 ops/s
Iteration   4: 10633984.004 ops/s
Iteration   5: 10739850.518 ops/s
Iteration   6: 10692214.317 ops/s
Iteration   7: 10701108.331 ops/s
Iteration   8: 10703576.855 ops/s
Iteration   9: 10735412.075 ops/s
Iteration  10: 10691462.360 ops/s
Iteration  11: 10670780.765 ops/s
Iteration  12: 10675007.012 ops/s
Iteration  13: 10708796.388 ops/s
Iteration  14: 10720274.790 ops/s
Iteration  15: 10685087.840 ops/s
Iteration  16: 10751901.007 ops/s
Iteration  17: 10702600.536 ops/s
Iteration  18: 10640260.067 ops/s
Iteration  19: 10711228.570 ops/s
Iteration  20: 10731234.485 ops/s
Iteration  21: 10757983.131 ops/s
Iteration  22: 10739257.830 ops/s
Iteration  23: 10716826.250 ops/s
Iteration  24: 10663087.750 ops/s
Iteration  25: 10669754.018 ops/s
Iteration  26: 10704653.707 ops/s
Iteration  27: 10703495.512 ops/s
Iteration  28: 10694831.978 ops/s
Iteration  29: 10696494.184 ops/s
Iteration  30: 10698600.400 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_occurrencesOf":
  10701082.774 ±(99.9%) 20069.876 ops/s [Average]
  (min, avg, max) = (10633984.004, 10701082.774, 10757983.131), stdev = 30039.648
  CI (99.9%): [10681012.898, 10721152.650] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_occurrencesOf  thrpt   30  10701082.774 ± 20069.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 171806.365 ops/s
# Warmup Iteration   2: 287515.033 ops/s
# Warmup Iteration   3: 336852.275 ops/s
# Warmup Iteration   4: 338417.734 ops/s
# Warmup Iteration   5: 339089.208 ops/s
# Warmup Iteration   6: 279236.307 ops/s
# Warmup Iteration   7: 338306.462 ops/s
# Warmup Iteration   8: 339534.453 ops/s
# Warmup Iteration   9: 339661.689 ops/s
# Warmup Iteration  10: 339334.100 ops/s
# Warmup Iteration  11: 340056.241 ops/s
# Warmup Iteration  12: 340064.609 ops/s
# Warmup Iteration  13: 339621.738 ops/s
# Warmup Iteration  14: 339809.178 ops/s
# Warmup Iteration  15: 339538.271 ops/s
# Warmup Iteration  16: 340215.704 ops/s
# Warmup Iteration  17: 338883.511 ops/s
# Warmup Iteration  18: 340114.623 ops/s
# Warmup Iteration  19: 339235.351 ops/s
# Warmup Iteration  20: 339489.462 ops/s
# Warmup Iteration  21: 339800.484 ops/s
# Warmup Iteration  22: 339295.714 ops/s
# Warmup Iteration  23: 339873.674 ops/s
# Warmup Iteration  24: 339057.586 ops/s
# Warmup Iteration  25: 339028.093 ops/s
# Warmup Iteration  26: 339607.085 ops/s
# Warmup Iteration  27: 338758.391 ops/s
# Warmup Iteration  28: 339909.714 ops/s
# Warmup Iteration  29: 340204.933 ops/s
# Warmup Iteration  30: 340071.108 ops/s
Iteration   1: 339527.503 ops/s
Iteration   2: 338787.612 ops/s
Iteration   3: 339964.380 ops/s
Iteration   4: 339137.043 ops/s
Iteration   5: 339838.268 ops/s
Iteration   6: 339428.689 ops/s
Iteration   7: 339575.669 ops/s
Iteration   8: 339198.206 ops/s
Iteration   9: 340090.418 ops/s
Iteration  10: 339172.270 ops/s
Iteration  11: 339721.728 ops/s
Iteration  12: 339073.205 ops/s
Iteration  13: 339199.414 ops/s
Iteration  14: 339302.234 ops/s
Iteration  15: 339640.218 ops/s
Iteration  16: 339363.287 ops/s
Iteration  17: 339214.324 ops/s
Iteration  18: 339296.295 ops/s
Iteration  19: 339076.617 ops/s
Iteration  20: 339001.441 ops/s
Iteration  21: 339254.373 ops/s
Iteration  22: 339712.027 ops/s
Iteration  23: 339173.763 ops/s
Iteration  24: 339565.853 ops/s
Iteration  25: 338906.907 ops/s
Iteration  26: 340566.742 ops/s
Iteration  27: 338619.737 ops/s
Iteration  28: 339177.857 ops/s
Iteration  29: 339508.324 ops/s
Iteration  30: 338578.329 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partition":
  339355.758 ±(99.9%) 285.291 ops/s [Average]
  (min, avg, max) = (338578.329, 339355.758, 340566.742), stdev = 427.009
  CI (99.9%): [339070.467, 339641.048] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_partition  thrpt   30  339355.758 ± 285.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 126408.077 ops/s
# Warmup Iteration   2: 166350.689 ops/s
# Warmup Iteration   3: 224193.956 ops/s
# Warmup Iteration   4: 222219.547 ops/s
# Warmup Iteration   5: 223989.346 ops/s
# Warmup Iteration   6: 224165.481 ops/s
# Warmup Iteration   7: 223626.438 ops/s
# Warmup Iteration   8: 223335.332 ops/s
# Warmup Iteration   9: 183417.179 ops/s
# Warmup Iteration  10: 224050.412 ops/s
# Warmup Iteration  11: 223746.432 ops/s
# Warmup Iteration  12: 223959.687 ops/s
# Warmup Iteration  13: 224971.221 ops/s
# Warmup Iteration  14: 224564.678 ops/s
# Warmup Iteration  15: 223455.291 ops/s
# Warmup Iteration  16: 224472.169 ops/s
# Warmup Iteration  17: 224624.647 ops/s
# Warmup Iteration  18: 224129.570 ops/s
# Warmup Iteration  19: 223998.840 ops/s
# Warmup Iteration  20: 223805.137 ops/s
# Warmup Iteration  21: 224602.972 ops/s
# Warmup Iteration  22: 223500.450 ops/s
# Warmup Iteration  23: 224364.113 ops/s
# Warmup Iteration  24: 224140.904 ops/s
# Warmup Iteration  25: 224129.638 ops/s
# Warmup Iteration  26: 224148.099 ops/s
# Warmup Iteration  27: 224240.870 ops/s
# Warmup Iteration  28: 224364.301 ops/s
# Warmup Iteration  29: 223912.837 ops/s
# Warmup Iteration  30: 224282.388 ops/s
Iteration   1: 224088.833 ops/s
Iteration   2: 223983.893 ops/s
Iteration   3: 224803.590 ops/s
Iteration   4: 224295.239 ops/s
Iteration   5: 223728.757 ops/s
Iteration   6: 224473.523 ops/s
Iteration   7: 224888.374 ops/s
Iteration   8: 224131.880 ops/s
Iteration   9: 224922.426 ops/s
Iteration  10: 224664.752 ops/s
Iteration  11: 224130.628 ops/s
Iteration  12: 224963.914 ops/s
Iteration  13: 225013.662 ops/s
Iteration  14: 224183.292 ops/s
Iteration  15: 224631.634 ops/s
Iteration  16: 223993.712 ops/s
Iteration  17: 224021.776 ops/s
Iteration  18: 224091.874 ops/s
Iteration  19: 224515.852 ops/s
Iteration  20: 224674.935 ops/s
Iteration  21: 224409.101 ops/s
Iteration  22: 223067.805 ops/s
Iteration  23: 224277.737 ops/s
Iteration  24: 224107.567 ops/s
Iteration  25: 223703.525 ops/s
Iteration  26: 224942.034 ops/s
Iteration  27: 224461.265 ops/s
Iteration  28: 224349.897 ops/s
Iteration  29: 224901.636 ops/s
Iteration  30: 223548.041 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_partitionWith":
  224332.372 ±(99.9%) 314.201 ops/s [Average]
  (min, avg, max) = (223067.805, 224332.372, 225013.662), stdev = 470.281
  CI (99.9%): [224018.171, 224646.572] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_partitionWith  thrpt   30  224332.372 ± 314.201  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reduceOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reduceOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 360739.734 ops/s
# Warmup Iteration   2: 575214.068 ops/s
# Warmup Iteration   3: 653117.314 ops/s
# Warmup Iteration   4: 656074.552 ops/s
# Warmup Iteration   5: 656647.112 ops/s
# Warmup Iteration   6: 574743.425 ops/s
# Warmup Iteration   7: 631329.606 ops/s
# Warmup Iteration   8: 658471.282 ops/s
# Warmup Iteration   9: 657455.862 ops/s
# Warmup Iteration  10: 655147.805 ops/s
# Warmup Iteration  11: 655001.085 ops/s
# Warmup Iteration  12: 656194.786 ops/s
# Warmup Iteration  13: 657415.190 ops/s
# Warmup Iteration  14: 658369.796 ops/s
# Warmup Iteration  15: 660115.694 ops/s
# Warmup Iteration  16: 658849.405 ops/s
# Warmup Iteration  17: 656834.259 ops/s
# Warmup Iteration  18: 657068.080 ops/s
# Warmup Iteration  19: 658181.619 ops/s
# Warmup Iteration  20: 655113.942 ops/s
# Warmup Iteration  21: 656150.741 ops/s
# Warmup Iteration  22: 658348.872 ops/s
# Warmup Iteration  23: 656398.689 ops/s
# Warmup Iteration  24: 657222.433 ops/s
# Warmup Iteration  25: 658014.200 ops/s
# Warmup Iteration  26: 658261.418 ops/s
# Warmup Iteration  27: 657916.515 ops/s
# Warmup Iteration  28: 655670.255 ops/s
# Warmup Iteration  29: 659266.831 ops/s
# Warmup Iteration  30: 656059.796 ops/s
Iteration   1: 654467.621 ops/s
Iteration   2: 658616.906 ops/s
Iteration   3: 658762.174 ops/s
Iteration   4: 657772.689 ops/s
Iteration   5: 656842.933 ops/s
Iteration   6: 657166.600 ops/s
Iteration   7: 656142.193 ops/s
Iteration   8: 657031.531 ops/s
Iteration   9: 657853.496 ops/s
Iteration  10: 659999.957 ops/s
Iteration  11: 656380.440 ops/s
Iteration  12: 658946.602 ops/s
Iteration  13: 659237.388 ops/s
Iteration  14: 658411.334 ops/s
Iteration  15: 660719.195 ops/s
Iteration  16: 657738.322 ops/s
Iteration  17: 658993.101 ops/s
Iteration  18: 660223.820 ops/s
Iteration  19: 658665.029 ops/s
Iteration  20: 657256.668 ops/s
Iteration  21: 659954.976 ops/s
Iteration  22: 660362.032 ops/s
Iteration  23: 655945.401 ops/s
Iteration  24: 658981.290 ops/s
Iteration  25: 658759.997 ops/s
Iteration  26: 658212.763 ops/s
Iteration  27: 655261.478 ops/s
Iteration  28: 661138.751 ops/s
Iteration  29: 660414.768 ops/s
Iteration  30: 660601.974 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reduceOptional":
  658362.048 ±(99.9%) 1142.290 ops/s [Average]
  (min, avg, max) = (654467.621, 658362.048, 661138.751), stdev = 1709.726
  CI (99.9%): [657219.757, 659504.338] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_reduceOptional  thrpt   30  658362.048 ± 1142.290  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625463.215 ops/s
# Warmup Iteration   2: 1253459.939 ops/s
# Warmup Iteration   3: 1348950.943 ops/s
# Warmup Iteration   4: 1350122.867 ops/s
# Warmup Iteration   5: 1111082.531 ops/s
# Warmup Iteration   6: 1353065.000 ops/s
# Warmup Iteration   7: 1353349.266 ops/s
# Warmup Iteration   8: 1351069.756 ops/s
# Warmup Iteration   9: 1348410.003 ops/s
# Warmup Iteration  10: 1351389.554 ops/s
# Warmup Iteration  11: 1356802.235 ops/s
# Warmup Iteration  12: 1355092.647 ops/s
# Warmup Iteration  13: 1351374.715 ops/s
# Warmup Iteration  14: 1355331.842 ops/s
# Warmup Iteration  15: 1356004.226 ops/s
# Warmup Iteration  16: 1354005.909 ops/s
# Warmup Iteration  17: 1352736.565 ops/s
# Warmup Iteration  18: 1349391.782 ops/s
# Warmup Iteration  19: 1352991.954 ops/s
# Warmup Iteration  20: 1349423.613 ops/s
# Warmup Iteration  21: 1347989.043 ops/s
# Warmup Iteration  22: 1351616.262 ops/s
# Warmup Iteration  23: 1351956.062 ops/s
# Warmup Iteration  24: 1352853.915 ops/s
# Warmup Iteration  25: 1350751.386 ops/s
# Warmup Iteration  26: 1352923.022 ops/s
# Warmup Iteration  27: 1351961.498 ops/s
# Warmup Iteration  28: 1354379.998 ops/s
# Warmup Iteration  29: 1348551.451 ops/s
# Warmup Iteration  30: 1352656.976 ops/s
Iteration   1: 1354324.684 ops/s
Iteration   2: 1348001.379 ops/s
Iteration   3: 1351040.999 ops/s
Iteration   4: 1351069.864 ops/s
Iteration   5: 1351618.361 ops/s
Iteration   6: 1355732.403 ops/s
Iteration   7: 1349234.511 ops/s
Iteration   8: 1351782.545 ops/s
Iteration   9: 1354987.890 ops/s
Iteration  10: 1348634.384 ops/s
Iteration  11: 1351537.420 ops/s
Iteration  12: 1354614.067 ops/s
Iteration  13: 1352148.574 ops/s
Iteration  14: 1352098.019 ops/s
Iteration  15: 1355042.950 ops/s
Iteration  16: 1347391.687 ops/s
Iteration  17: 1350043.539 ops/s
Iteration  18: 1358207.114 ops/s
Iteration  19: 1353821.711 ops/s
Iteration  20: 1353866.469 ops/s
Iteration  21: 1351854.366 ops/s
Iteration  22: 1354444.182 ops/s
Iteration  23: 1348571.839 ops/s
Iteration  24: 1352996.991 ops/s
Iteration  25: 1352172.427 ops/s
Iteration  26: 1351525.075 ops/s
Iteration  27: 1354867.732 ops/s
Iteration  28: 1353187.063 ops/s
Iteration  29: 1348121.375 ops/s
Iteration  30: 1349535.828 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_reject":
  1352082.515 ±(99.9%) 1761.028 ops/s [Average]
  (min, avg, max) = (1347391.687, 1352082.515, 1358207.114), stdev = 2635.823
  CI (99.9%): [1350321.487, 1353843.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_reject  thrpt   30  1352082.515 ± 1761.028  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 636423.430 ops/s
# Warmup Iteration   2: 1247596.054 ops/s
# Warmup Iteration   3: 1344590.408 ops/s
# Warmup Iteration   4: 1352109.151 ops/s
# Warmup Iteration   5: 1117866.378 ops/s
# Warmup Iteration   6: 1351214.945 ops/s
# Warmup Iteration   7: 1350945.702 ops/s
# Warmup Iteration   8: 1352043.768 ops/s
# Warmup Iteration   9: 1356883.121 ops/s
# Warmup Iteration  10: 1357903.001 ops/s
# Warmup Iteration  11: 1354285.139 ops/s
# Warmup Iteration  12: 1357560.322 ops/s
# Warmup Iteration  13: 1359414.756 ops/s
# Warmup Iteration  14: 1356004.198 ops/s
# Warmup Iteration  15: 1358397.625 ops/s
# Warmup Iteration  16: 1354997.466 ops/s
# Warmup Iteration  17: 1357466.319 ops/s
# Warmup Iteration  18: 1357061.455 ops/s
# Warmup Iteration  19: 1356571.361 ops/s
# Warmup Iteration  20: 1349317.478 ops/s
# Warmup Iteration  21: 1356087.174 ops/s
# Warmup Iteration  22: 1348176.358 ops/s
# Warmup Iteration  23: 1348709.910 ops/s
# Warmup Iteration  24: 1351008.214 ops/s
# Warmup Iteration  25: 1349129.087 ops/s
# Warmup Iteration  26: 1351805.143 ops/s
# Warmup Iteration  27: 1354514.488 ops/s
# Warmup Iteration  28: 1351487.596 ops/s
# Warmup Iteration  29: 1352854.329 ops/s
# Warmup Iteration  30: 1350780.331 ops/s
Iteration   1: 1354749.231 ops/s
Iteration   2: 1347077.451 ops/s
Iteration   3: 1353669.030 ops/s
Iteration   4: 1350701.727 ops/s
Iteration   5: 1349188.446 ops/s
Iteration   6: 1351363.494 ops/s
Iteration   7: 1348918.625 ops/s
Iteration   8: 1355472.082 ops/s
Iteration   9: 1357037.491 ops/s
Iteration  10: 1353964.440 ops/s
Iteration  11: 1351784.514 ops/s
Iteration  12: 1352036.599 ops/s
Iteration  13: 1345667.137 ops/s
Iteration  14: 1348408.118 ops/s
Iteration  15: 1353522.684 ops/s
Iteration  16: 1352530.133 ops/s
Iteration  17: 1347767.177 ops/s
Iteration  18: 1353584.348 ops/s
Iteration  19: 1355439.025 ops/s
Iteration  20: 1347518.194 ops/s
Iteration  21: 1355183.556 ops/s
Iteration  22: 1352368.035 ops/s
Iteration  23: 1352295.268 ops/s
Iteration  24: 1355864.464 ops/s
Iteration  25: 1354291.617 ops/s
Iteration  26: 1352250.549 ops/s
Iteration  27: 1351846.187 ops/s
Iteration  28: 1351880.568 ops/s
Iteration  29: 1356203.006 ops/s
Iteration  30: 1355474.183 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith":
  1352268.579 ±(99.9%) 2006.511 ops/s [Average]
  (min, avg, max) = (1345667.137, 1352268.579, 1357037.491), stdev = 3003.252
  CI (99.9%): [1350262.068, 1354275.091] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_rejectWith  thrpt   30  1352268.579 ± 2006.511  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 689958.801 ops/s
# Warmup Iteration   2: 1544096.643 ops/s
# Warmup Iteration   3: 1621947.251 ops/s
# Warmup Iteration   4: 1492059.896 ops/s
# Warmup Iteration   5: 1465970.589 ops/s
# Warmup Iteration   6: 1622712.322 ops/s
# Warmup Iteration   7: 1623050.950 ops/s
# Warmup Iteration   8: 1620857.656 ops/s
# Warmup Iteration   9: 1624338.633 ops/s
# Warmup Iteration  10: 1622388.713 ops/s
# Warmup Iteration  11: 1622172.560 ops/s
# Warmup Iteration  12: 1621110.122 ops/s
# Warmup Iteration  13: 1625908.246 ops/s
# Warmup Iteration  14: 1623678.475 ops/s
# Warmup Iteration  15: 1621988.034 ops/s
# Warmup Iteration  16: 1623815.392 ops/s
# Warmup Iteration  17: 1621149.451 ops/s
# Warmup Iteration  18: 1625689.647 ops/s
# Warmup Iteration  19: 1627638.754 ops/s
# Warmup Iteration  20: 1626638.235 ops/s
# Warmup Iteration  21: 1626146.442 ops/s
# Warmup Iteration  22: 1627651.121 ops/s
# Warmup Iteration  23: 1627594.515 ops/s
# Warmup Iteration  24: 1626874.969 ops/s
# Warmup Iteration  25: 1622006.914 ops/s
# Warmup Iteration  26: 1627482.849 ops/s
# Warmup Iteration  27: 1625328.166 ops/s
# Warmup Iteration  28: 1623201.893 ops/s
# Warmup Iteration  29: 1630099.273 ops/s
# Warmup Iteration  30: 1625509.562 ops/s
Iteration   1: 1630930.976 ops/s
Iteration   2: 1631754.908 ops/s
Iteration   3: 1627867.571 ops/s
Iteration   4: 1629738.314 ops/s
Iteration   5: 1634137.067 ops/s
Iteration   6: 1628458.287 ops/s
Iteration   7: 1628898.977 ops/s
Iteration   8: 1623197.842 ops/s
Iteration   9: 1627764.891 ops/s
Iteration  10: 1625925.048 ops/s
Iteration  11: 1625963.142 ops/s
Iteration  12: 1625484.570 ops/s
Iteration  13: 1626009.430 ops/s
Iteration  14: 1627451.934 ops/s
Iteration  15: 1626250.525 ops/s
Iteration  16: 1630473.753 ops/s
Iteration  17: 1616835.122 ops/s
Iteration  18: 1630463.888 ops/s
Iteration  19: 1631214.152 ops/s
Iteration  20: 1626549.016 ops/s
Iteration  21: 1629752.922 ops/s
Iteration  22: 1627753.544 ops/s
Iteration  23: 1616128.711 ops/s
Iteration  24: 1620520.191 ops/s
Iteration  25: 1625856.262 ops/s
Iteration  26: 1630385.304 ops/s
Iteration  27: 1625262.128 ops/s
Iteration  28: 1628746.637 ops/s
Iteration  29: 1628966.271 ops/s
Iteration  30: 1627979.610 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_rejectWith_target":
  1627224.033 ±(99.9%) 2661.285 ops/s [Average]
  (min, avg, max) = (1616128.711, 1627224.033, 1634137.067), stdev = 3983.286
  CI (99.9%): [1624562.748, 1629885.318] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_rejectWith_target  thrpt   30  1627224.033 ± 2661.285  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 514793.651 ops/s
# Warmup Iteration   2: 954206.520 ops/s
# Warmup Iteration   3: 1076811.995 ops/s
# Warmup Iteration   4: 1078894.361 ops/s
# Warmup Iteration   5: 1037753.366 ops/s
# Warmup Iteration   6: 933117.102 ops/s
# Warmup Iteration   7: 1078504.996 ops/s
# Warmup Iteration   8: 1084656.137 ops/s
# Warmup Iteration   9: 1085923.314 ops/s
# Warmup Iteration  10: 1077533.972 ops/s
# Warmup Iteration  11: 1085807.241 ops/s
# Warmup Iteration  12: 1082703.555 ops/s
# Warmup Iteration  13: 1082785.311 ops/s
# Warmup Iteration  14: 1083251.350 ops/s
# Warmup Iteration  15: 1086908.619 ops/s
# Warmup Iteration  16: 1079635.219 ops/s
# Warmup Iteration  17: 1080856.789 ops/s
# Warmup Iteration  18: 1080391.354 ops/s
# Warmup Iteration  19: 1087898.359 ops/s
# Warmup Iteration  20: 1082616.569 ops/s
# Warmup Iteration  21: 1083326.600 ops/s
# Warmup Iteration  22: 1083785.309 ops/s
# Warmup Iteration  23: 1083885.064 ops/s
# Warmup Iteration  24: 1084571.587 ops/s
# Warmup Iteration  25: 1081727.536 ops/s
# Warmup Iteration  26: 1082469.376 ops/s
# Warmup Iteration  27: 1083154.018 ops/s
# Warmup Iteration  28: 1085716.923 ops/s
# Warmup Iteration  29: 1083245.609 ops/s
# Warmup Iteration  30: 1085396.193 ops/s
Iteration   1: 1085636.834 ops/s
Iteration   2: 1080809.021 ops/s
Iteration   3: 1081869.220 ops/s
Iteration   4: 1089704.509 ops/s
Iteration   5: 1087746.898 ops/s
Iteration   6: 1084913.142 ops/s
Iteration   7: 1084396.858 ops/s
Iteration   8: 1082136.418 ops/s
Iteration   9: 1083869.082 ops/s
Iteration  10: 1085801.404 ops/s
Iteration  11: 1086818.353 ops/s
Iteration  12: 1081910.257 ops/s
Iteration  13: 1083896.518 ops/s
Iteration  14: 1085289.585 ops/s
Iteration  15: 1083892.966 ops/s
Iteration  16: 1084555.345 ops/s
Iteration  17: 1085441.550 ops/s
Iteration  18: 1086145.649 ops/s
Iteration  19: 1085535.770 ops/s
Iteration  20: 1082613.409 ops/s
Iteration  21: 1087391.897 ops/s
Iteration  22: 1085255.341 ops/s
Iteration  23: 1087024.447 ops/s
Iteration  24: 1086164.247 ops/s
Iteration  25: 1085523.531 ops/s
Iteration  26: 1083754.953 ops/s
Iteration  27: 1085209.176 ops/s
Iteration  28: 1083639.936 ops/s
Iteration  29: 1082027.010 ops/s
Iteration  30: 1084234.560 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAll":
  1084773.596 ±(99.9%) 1323.814 ops/s [Average]
  (min, avg, max) = (1080809.021, 1084773.596, 1089704.509), stdev = 1981.422
  CI (99.9%): [1083449.783, 1086097.410] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_removeAll  thrpt   30  1084773.596 ± 1323.814  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511971.746 ops/s
# Warmup Iteration   2: 942954.854 ops/s
# Warmup Iteration   3: 1067583.421 ops/s
# Warmup Iteration   4: 1072763.051 ops/s
# Warmup Iteration   5: 1044903.734 ops/s
# Warmup Iteration   6: 904478.770 ops/s
# Warmup Iteration   7: 1073184.109 ops/s
# Warmup Iteration   8: 1068286.462 ops/s
# Warmup Iteration   9: 1074646.456 ops/s
# Warmup Iteration  10: 1072956.219 ops/s
# Warmup Iteration  11: 1067607.119 ops/s
# Warmup Iteration  12: 1074590.265 ops/s
# Warmup Iteration  13: 1072491.663 ops/s
# Warmup Iteration  14: 1073275.346 ops/s
# Warmup Iteration  15: 1068513.052 ops/s
# Warmup Iteration  16: 1074159.577 ops/s
# Warmup Iteration  17: 1072266.012 ops/s
# Warmup Iteration  18: 1072714.292 ops/s
# Warmup Iteration  19: 1071737.730 ops/s
# Warmup Iteration  20: 1072308.508 ops/s
# Warmup Iteration  21: 1071456.118 ops/s
# Warmup Iteration  22: 1070320.711 ops/s
# Warmup Iteration  23: 1073638.277 ops/s
# Warmup Iteration  24: 1073454.240 ops/s
# Warmup Iteration  25: 1071389.227 ops/s
# Warmup Iteration  26: 1073485.841 ops/s
# Warmup Iteration  27: 1073012.616 ops/s
# Warmup Iteration  28: 1070875.816 ops/s
# Warmup Iteration  29: 1074332.513 ops/s
# Warmup Iteration  30: 1073124.101 ops/s
Iteration   1: 1069913.362 ops/s
Iteration   2: 1072310.701 ops/s
Iteration   3: 1073010.176 ops/s
Iteration   4: 1071448.253 ops/s
Iteration   5: 1069390.670 ops/s
Iteration   6: 1071385.811 ops/s
Iteration   7: 1071111.740 ops/s
Iteration   8: 1074330.706 ops/s
Iteration   9: 1070479.128 ops/s
Iteration  10: 1071205.198 ops/s
Iteration  11: 1069609.451 ops/s
Iteration  12: 1073027.162 ops/s
Iteration  13: 1069607.635 ops/s
Iteration  14: 1075929.146 ops/s
Iteration  15: 1075896.006 ops/s
Iteration  16: 1070448.172 ops/s
Iteration  17: 1069936.975 ops/s
Iteration  18: 1071399.286 ops/s
Iteration  19: 1073072.307 ops/s
Iteration  20: 1072425.735 ops/s
Iteration  21: 1068850.078 ops/s
Iteration  22: 1068912.825 ops/s
Iteration  23: 1069466.198 ops/s
Iteration  24: 1074130.912 ops/s
Iteration  25: 1071818.263 ops/s
Iteration  26: 1071206.378 ops/s
Iteration  27: 1077020.509 ops/s
Iteration  28: 1071614.385 ops/s
Iteration  29: 1068812.959 ops/s
Iteration  30: 1070306.648 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeAllIterable":
  1071602.559 ±(99.9%) 1459.076 ops/s [Average]
  (min, avg, max) = (1068812.959, 1071602.559, 1077020.509), stdev = 2183.877
  CI (99.9%): [1070143.483, 1073061.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_removeAllIterable  thrpt   30  1071602.559 ± 1459.076  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 316831.333 ops/s
# Warmup Iteration   2: 515921.998 ops/s
# Warmup Iteration   3: 611232.177 ops/s
# Warmup Iteration   4: 617807.559 ops/s
# Warmup Iteration   5: 614436.186 ops/s
# Warmup Iteration   6: 576889.492 ops/s
# Warmup Iteration   7: 543200.427 ops/s
# Warmup Iteration   8: 617191.350 ops/s
# Warmup Iteration   9: 619319.985 ops/s
# Warmup Iteration  10: 619474.624 ops/s
# Warmup Iteration  11: 619714.990 ops/s
# Warmup Iteration  12: 616603.822 ops/s
# Warmup Iteration  13: 617410.178 ops/s
# Warmup Iteration  14: 617759.350 ops/s
# Warmup Iteration  15: 619135.157 ops/s
# Warmup Iteration  16: 617978.301 ops/s
# Warmup Iteration  17: 618305.614 ops/s
# Warmup Iteration  18: 617551.841 ops/s
# Warmup Iteration  19: 617614.115 ops/s
# Warmup Iteration  20: 617278.754 ops/s
# Warmup Iteration  21: 616853.619 ops/s
# Warmup Iteration  22: 618619.172 ops/s
# Warmup Iteration  23: 615817.063 ops/s
# Warmup Iteration  24: 617828.599 ops/s
# Warmup Iteration  25: 617911.488 ops/s
# Warmup Iteration  26: 615320.269 ops/s
# Warmup Iteration  27: 618309.079 ops/s
# Warmup Iteration  28: 618148.127 ops/s
# Warmup Iteration  29: 616499.399 ops/s
# Warmup Iteration  30: 615316.643 ops/s
Iteration   1: 617841.812 ops/s
Iteration   2: 618133.595 ops/s
Iteration   3: 618485.176 ops/s
Iteration   4: 616960.253 ops/s
Iteration   5: 615705.916 ops/s
Iteration   6: 613965.735 ops/s
Iteration   7: 616700.609 ops/s
Iteration   8: 617669.356 ops/s
Iteration   9: 617323.356 ops/s
Iteration  10: 616353.745 ops/s
Iteration  11: 615903.640 ops/s
Iteration  12: 617209.682 ops/s
Iteration  13: 614286.113 ops/s
Iteration  14: 616164.019 ops/s
Iteration  15: 617700.979 ops/s
Iteration  16: 618941.603 ops/s
Iteration  17: 616970.644 ops/s
Iteration  18: 616512.345 ops/s
Iteration  19: 617439.135 ops/s
Iteration  20: 616269.219 ops/s
Iteration  21: 614675.087 ops/s
Iteration  22: 619897.740 ops/s
Iteration  23: 616441.359 ops/s
Iteration  24: 616970.705 ops/s
Iteration  25: 617238.317 ops/s
Iteration  26: 616172.681 ops/s
Iteration  27: 616012.941 ops/s
Iteration  28: 618595.610 ops/s
Iteration  29: 616396.117 ops/s
Iteration  30: 615640.631 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIf":
  616819.271 ±(99.9%) 879.801 ops/s [Average]
  (min, avg, max) = (613965.735, 616819.271, 619897.740), stdev = 1316.844
  CI (99.9%): [615939.470, 617699.071] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_removeIf  thrpt   30  616819.271 ± 879.801  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 756283.078 ops/s
# Warmup Iteration   2: 1330986.402 ops/s
# Warmup Iteration   3: 1518617.975 ops/s
# Warmup Iteration   4: 1520269.845 ops/s
# Warmup Iteration   5: 1522367.825 ops/s
# Warmup Iteration   6: 1250464.414 ops/s
# Warmup Iteration   7: 1526019.284 ops/s
# Warmup Iteration   8: 1522793.025 ops/s
# Warmup Iteration   9: 1526082.844 ops/s
# Warmup Iteration  10: 1525931.298 ops/s
# Warmup Iteration  11: 1520660.818 ops/s
# Warmup Iteration  12: 1527936.254 ops/s
# Warmup Iteration  13: 1528587.835 ops/s
# Warmup Iteration  14: 1526091.613 ops/s
# Warmup Iteration  15: 1526647.373 ops/s
# Warmup Iteration  16: 1529473.929 ops/s
# Warmup Iteration  17: 1528428.983 ops/s
# Warmup Iteration  18: 1524167.987 ops/s
# Warmup Iteration  19: 1529562.659 ops/s
# Warmup Iteration  20: 1523358.468 ops/s
# Warmup Iteration  21: 1531544.951 ops/s
# Warmup Iteration  22: 1527996.532 ops/s
# Warmup Iteration  23: 1529187.577 ops/s
# Warmup Iteration  24: 1530646.667 ops/s
# Warmup Iteration  25: 1525801.684 ops/s
# Warmup Iteration  26: 1528691.139 ops/s
# Warmup Iteration  27: 1529956.797 ops/s
# Warmup Iteration  28: 1525963.175 ops/s
# Warmup Iteration  29: 1528856.048 ops/s
# Warmup Iteration  30: 1531948.339 ops/s
Iteration   1: 1529145.438 ops/s
Iteration   2: 1529927.464 ops/s
Iteration   3: 1526716.818 ops/s
Iteration   4: 1526321.651 ops/s
Iteration   5: 1528300.683 ops/s
Iteration   6: 1534136.879 ops/s
Iteration   7: 1527096.840 ops/s
Iteration   8: 1526474.854 ops/s
Iteration   9: 1527502.244 ops/s
Iteration  10: 1526945.214 ops/s
Iteration  11: 1525401.322 ops/s
Iteration  12: 1534622.266 ops/s
Iteration  13: 1530470.427 ops/s
Iteration  14: 1527430.013 ops/s
Iteration  15: 1528821.190 ops/s
Iteration  16: 1525985.519 ops/s
Iteration  17: 1529159.759 ops/s
Iteration  18: 1528098.233 ops/s
Iteration  19: 1527093.719 ops/s
Iteration  20: 1534611.870 ops/s
Iteration  21: 1528391.656 ops/s
Iteration  22: 1529312.786 ops/s
Iteration  23: 1526924.023 ops/s
Iteration  24: 1531620.813 ops/s
Iteration  25: 1530743.446 ops/s
Iteration  26: 1528100.985 ops/s
Iteration  27: 1535769.745 ops/s
Iteration  28: 1527375.885 ops/s
Iteration  29: 1532023.193 ops/s
Iteration  30: 1527351.232 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeIfWith":
  1529062.539 ±(99.9%) 1867.514 ops/s [Average]
  (min, avg, max) = (1525401.322, 1529062.539, 1535769.745), stdev = 2795.208
  CI (99.9%): [1527195.025, 1530930.053] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_removeIfWith  thrpt   30  1529062.539 ± 1867.514  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeObject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeObject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 744200.271 ops/s
# Warmup Iteration   2: 1838512.819 ops/s
# Warmup Iteration   3: 1896472.260 ops/s
# Warmup Iteration   4: 1571915.922 ops/s
# Warmup Iteration   5: 1902168.002 ops/s
# Warmup Iteration   6: 1901205.737 ops/s
# Warmup Iteration   7: 1898762.605 ops/s
# Warmup Iteration   8: 1905142.776 ops/s
# Warmup Iteration   9: 1901336.142 ops/s
# Warmup Iteration  10: 1901026.873 ops/s
# Warmup Iteration  11: 1900495.216 ops/s
# Warmup Iteration  12: 1905186.665 ops/s
# Warmup Iteration  13: 1898131.399 ops/s
# Warmup Iteration  14: 1899409.849 ops/s
# Warmup Iteration  15: 1903587.702 ops/s
# Warmup Iteration  16: 1893820.129 ops/s
# Warmup Iteration  17: 1899846.781 ops/s
# Warmup Iteration  18: 1902576.767 ops/s
# Warmup Iteration  19: 1904830.001 ops/s
# Warmup Iteration  20: 1902388.502 ops/s
# Warmup Iteration  21: 1904932.315 ops/s
# Warmup Iteration  22: 1907507.844 ops/s
# Warmup Iteration  23: 1906826.159 ops/s
# Warmup Iteration  24: 1905840.654 ops/s
# Warmup Iteration  25: 1902413.015 ops/s
# Warmup Iteration  26: 1904149.908 ops/s
# Warmup Iteration  27: 1907837.809 ops/s
# Warmup Iteration  28: 1903308.684 ops/s
# Warmup Iteration  29: 1901638.418 ops/s
# Warmup Iteration  30: 1901702.063 ops/s
Iteration   1: 1903555.931 ops/s
Iteration   2: 1898332.756 ops/s
Iteration   3: 1903695.034 ops/s
Iteration   4: 1905373.342 ops/s
Iteration   5: 1915380.185 ops/s
Iteration   6: 1899718.428 ops/s
Iteration   7: 1900450.950 ops/s
Iteration   8: 1898323.007 ops/s
Iteration   9: 1908559.674 ops/s
Iteration  10: 1906314.675 ops/s
Iteration  11: 1908962.836 ops/s
Iteration  12: 1904827.829 ops/s
Iteration  13: 1898351.110 ops/s
Iteration  14: 1906661.219 ops/s
Iteration  15: 1906183.974 ops/s
Iteration  16: 1908221.021 ops/s
Iteration  17: 1904210.672 ops/s
Iteration  18: 1904780.468 ops/s
Iteration  19: 1905673.754 ops/s
Iteration  20: 1894193.926 ops/s
Iteration  21: 1908076.460 ops/s
Iteration  22: 1909800.957 ops/s
Iteration  23: 1901595.271 ops/s
Iteration  24: 1904505.773 ops/s
Iteration  25: 1902095.815 ops/s
Iteration  26: 1901969.314 ops/s
Iteration  27: 1902814.835 ops/s
Iteration  28: 1905083.647 ops/s
Iteration  29: 1903809.882 ops/s
Iteration  30: 1901199.990 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeObject":
  1904090.758 ±(99.9%) 2812.428 ops/s [Average]
  (min, avg, max) = (1894193.926, 1904090.758, 1915380.185), stdev = 4209.511
  CI (99.9%): [1901278.330, 1906903.186] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_removeObject  thrpt   30  1904090.758 ± 2812.428  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 241455.828 ops/s
# Warmup Iteration   2: 527481.574 ops/s
# Warmup Iteration   3: 557107.409 ops/s
# Warmup Iteration   4: 560772.569 ops/s
# Warmup Iteration   5: 465071.629 ops/s
# Warmup Iteration   6: 561234.819 ops/s
# Warmup Iteration   7: 561652.346 ops/s
# Warmup Iteration   8: 559914.282 ops/s
# Warmup Iteration   9: 562258.028 ops/s
# Warmup Iteration  10: 562540.981 ops/s
# Warmup Iteration  11: 559893.728 ops/s
# Warmup Iteration  12: 560849.989 ops/s
# Warmup Iteration  13: 561235.837 ops/s
# Warmup Iteration  14: 560592.261 ops/s
# Warmup Iteration  15: 560947.426 ops/s
# Warmup Iteration  16: 561197.806 ops/s
# Warmup Iteration  17: 561201.877 ops/s
# Warmup Iteration  18: 560846.485 ops/s
# Warmup Iteration  19: 560361.080 ops/s
# Warmup Iteration  20: 563191.380 ops/s
# Warmup Iteration  21: 561282.275 ops/s
# Warmup Iteration  22: 561423.279 ops/s
# Warmup Iteration  23: 561004.663 ops/s
# Warmup Iteration  24: 562772.003 ops/s
# Warmup Iteration  25: 560750.236 ops/s
# Warmup Iteration  26: 561465.951 ops/s
# Warmup Iteration  27: 560119.756 ops/s
# Warmup Iteration  28: 561803.103 ops/s
# Warmup Iteration  29: 561377.208 ops/s
# Warmup Iteration  30: 562593.006 ops/s
Iteration   1: 560376.634 ops/s
Iteration   2: 561818.263 ops/s
Iteration   3: 559629.722 ops/s
Iteration   4: 561425.996 ops/s
Iteration   5: 560114.157 ops/s
Iteration   6: 560422.324 ops/s
Iteration   7: 563444.033 ops/s
Iteration   8: 562069.628 ops/s
Iteration   9: 561475.914 ops/s
Iteration  10: 562347.273 ops/s
Iteration  11: 563011.117 ops/s
Iteration  12: 562342.540 ops/s
Iteration  13: 562602.514 ops/s
Iteration  14: 563935.344 ops/s
Iteration  15: 560743.111 ops/s
Iteration  16: 560606.572 ops/s
Iteration  17: 562052.561 ops/s
Iteration  18: 564555.603 ops/s
Iteration  19: 560163.288 ops/s
Iteration  20: 561316.099 ops/s
Iteration  21: 561168.602 ops/s
Iteration  22: 561400.782 ops/s
Iteration  23: 560290.036 ops/s
Iteration  24: 560192.503 ops/s
Iteration  25: 561182.990 ops/s
Iteration  26: 562636.642 ops/s
Iteration  27: 560530.165 ops/s
Iteration  28: 560654.132 ops/s
Iteration  29: 560013.434 ops/s
Iteration  30: 560938.955 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences":
  561448.698 ±(99.9%) 827.915 ops/s [Average]
  (min, avg, max) = (559629.722, 561448.698, 564555.603), stdev = 1239.185
  CI (99.9%): [560620.783, 562276.613] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_removeOccurrences  thrpt   30  561448.698 ± 827.915  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 772879.166 ops/s
# Warmup Iteration   2: 798795.435 ops/s
# Warmup Iteration   3: 1050476.085 ops/s
# Warmup Iteration   4: 1060020.601 ops/s
# Warmup Iteration   5: 1058208.117 ops/s
# Warmup Iteration   6: 1051227.218 ops/s
# Warmup Iteration   7: 1059972.763 ops/s
# Warmup Iteration   8: 1058313.485 ops/s
# Warmup Iteration   9: 1060157.271 ops/s
# Warmup Iteration  10: 1059405.547 ops/s
# Warmup Iteration  11: 1062421.510 ops/s
# Warmup Iteration  12: 884394.006 ops/s
# Warmup Iteration  13: 1062095.469 ops/s
# Warmup Iteration  14: 1056330.927 ops/s
# Warmup Iteration  15: 1058919.043 ops/s
# Warmup Iteration  16: 1052307.492 ops/s
# Warmup Iteration  17: 1126833.631 ops/s
# Warmup Iteration  18: 1123658.461 ops/s
# Warmup Iteration  19: 1129143.944 ops/s
# Warmup Iteration  20: 1125202.164 ops/s
# Warmup Iteration  21: 1132713.099 ops/s
# Warmup Iteration  22: 1128567.870 ops/s
# Warmup Iteration  23: 1127245.360 ops/s
# Warmup Iteration  24: 1127224.263 ops/s
# Warmup Iteration  25: 1131233.350 ops/s
# Warmup Iteration  26: 1123984.779 ops/s
# Warmup Iteration  27: 1125596.740 ops/s
# Warmup Iteration  28: 1125824.074 ops/s
# Warmup Iteration  29: 1123352.757 ops/s
# Warmup Iteration  30: 1124873.967 ops/s
Iteration   1: 1129053.061 ops/s
Iteration   2: 1125108.704 ops/s
Iteration   3: 1128629.874 ops/s
Iteration   4: 1125589.429 ops/s
Iteration   5: 1129433.639 ops/s
Iteration   6: 1123836.208 ops/s
Iteration   7: 1133009.866 ops/s
Iteration   8: 1128257.772 ops/s
Iteration   9: 1127822.538 ops/s
Iteration  10: 1130961.590 ops/s
Iteration  11: 1130531.937 ops/s
Iteration  12: 1129624.874 ops/s
Iteration  13: 1123311.217 ops/s
Iteration  14: 1130452.327 ops/s
Iteration  15: 1128653.797 ops/s
Iteration  16: 1126229.953 ops/s
Iteration  17: 1127634.650 ops/s
Iteration  18: 1125904.095 ops/s
Iteration  19: 1124404.468 ops/s
Iteration  20: 1122910.489 ops/s
Iteration  21: 1123852.073 ops/s
Iteration  22: 1135489.547 ops/s
Iteration  23: 1126442.095 ops/s
Iteration  24: 1124809.159 ops/s
Iteration  25: 1125413.638 ops/s
Iteration  26: 1121999.314 ops/s
Iteration  27: 1124980.357 ops/s
Iteration  28: 1130387.014 ops/s
Iteration  29: 1134951.384 ops/s
Iteration  30: 1129696.199 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_removeOccurrences_throws":
  1127646.042 ±(99.9%) 2300.618 ops/s [Average]
  (min, avg, max) = (1121999.314, 1127646.042, 1135489.547), stdev = 3443.458
  CI (99.9%): [1125345.424, 1129946.661] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_removeOccurrences_throws  thrpt   30  1127646.042 ± 2300.618  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 308629.821 ops/s
# Warmup Iteration   2: 539585.241 ops/s
# Warmup Iteration   3: 649664.851 ops/s
# Warmup Iteration   4: 653891.756 ops/s
# Warmup Iteration   5: 651398.900 ops/s
# Warmup Iteration   6: 563332.624 ops/s
# Warmup Iteration   7: 631002.709 ops/s
# Warmup Iteration   8: 654485.833 ops/s
# Warmup Iteration   9: 654521.197 ops/s
# Warmup Iteration  10: 656732.862 ops/s
# Warmup Iteration  11: 653227.832 ops/s
# Warmup Iteration  12: 652715.262 ops/s
# Warmup Iteration  13: 654443.109 ops/s
# Warmup Iteration  14: 654519.542 ops/s
# Warmup Iteration  15: 653635.978 ops/s
# Warmup Iteration  16: 652918.856 ops/s
# Warmup Iteration  17: 654662.776 ops/s
# Warmup Iteration  18: 654520.811 ops/s
# Warmup Iteration  19: 655965.360 ops/s
# Warmup Iteration  20: 654824.296 ops/s
# Warmup Iteration  21: 652488.245 ops/s
# Warmup Iteration  22: 654667.858 ops/s
# Warmup Iteration  23: 653892.112 ops/s
# Warmup Iteration  24: 655562.162 ops/s
# Warmup Iteration  25: 651820.746 ops/s
# Warmup Iteration  26: 656187.088 ops/s
# Warmup Iteration  27: 654563.971 ops/s
# Warmup Iteration  28: 653501.612 ops/s
# Warmup Iteration  29: 655642.341 ops/s
# Warmup Iteration  30: 654943.842 ops/s
Iteration   1: 654371.896 ops/s
Iteration   2: 654052.558 ops/s
Iteration   3: 652431.368 ops/s
Iteration   4: 655379.860 ops/s
Iteration   5: 654289.507 ops/s
Iteration   6: 654790.657 ops/s
Iteration   7: 655083.248 ops/s
Iteration   8: 656007.600 ops/s
Iteration   9: 654834.585 ops/s
Iteration  10: 656173.017 ops/s
Iteration  11: 653853.180 ops/s
Iteration  12: 654947.164 ops/s
Iteration  13: 654119.181 ops/s
Iteration  14: 655411.721 ops/s
Iteration  15: 653746.253 ops/s
Iteration  16: 652902.287 ops/s
Iteration  17: 653220.745 ops/s
Iteration  18: 652520.978 ops/s
Iteration  19: 657403.813 ops/s
Iteration  20: 655423.569 ops/s
Iteration  21: 654462.990 ops/s
Iteration  22: 653078.760 ops/s
Iteration  23: 651622.110 ops/s
Iteration  24: 657395.743 ops/s
Iteration  25: 655116.129 ops/s
Iteration  26: 655211.684 ops/s
Iteration  27: 655057.415 ops/s
Iteration  28: 656895.657 ops/s
Iteration  29: 653765.857 ops/s
Iteration  30: 655856.200 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAll":
  654647.524 ±(99.9%) 943.440 ops/s [Average]
  (min, avg, max) = (651622.110, 654647.524, 657403.813), stdev = 1412.097
  CI (99.9%): [653704.084, 655590.964] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_retainAll  thrpt   30  654647.524 ± 943.440  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 495249.566 ops/s
# Warmup Iteration   2: 874590.549 ops/s
# Warmup Iteration   3: 1037871.562 ops/s
# Warmup Iteration   4: 1043703.327 ops/s
# Warmup Iteration   5: 1039906.659 ops/s
# Warmup Iteration   6: 851887.792 ops/s
# Warmup Iteration   7: 1041321.829 ops/s
# Warmup Iteration   8: 1042648.395 ops/s
# Warmup Iteration   9: 1037344.335 ops/s
# Warmup Iteration  10: 1041777.198 ops/s
# Warmup Iteration  11: 1042396.128 ops/s
# Warmup Iteration  12: 1044100.137 ops/s
# Warmup Iteration  13: 1043781.241 ops/s
# Warmup Iteration  14: 1042367.824 ops/s
# Warmup Iteration  15: 1044036.027 ops/s
# Warmup Iteration  16: 1040520.860 ops/s
# Warmup Iteration  17: 1043511.114 ops/s
# Warmup Iteration  18: 1046462.234 ops/s
# Warmup Iteration  19: 1047455.938 ops/s
# Warmup Iteration  20: 1045262.854 ops/s
# Warmup Iteration  21: 1048679.209 ops/s
# Warmup Iteration  22: 1049323.297 ops/s
# Warmup Iteration  23: 1045996.541 ops/s
# Warmup Iteration  24: 1048890.343 ops/s
# Warmup Iteration  25: 1049232.833 ops/s
# Warmup Iteration  26: 1045633.061 ops/s
# Warmup Iteration  27: 1046660.103 ops/s
# Warmup Iteration  28: 1049739.843 ops/s
# Warmup Iteration  29: 1048661.365 ops/s
# Warmup Iteration  30: 1045376.991 ops/s
Iteration   1: 1043392.288 ops/s
Iteration   2: 1047476.595 ops/s
Iteration   3: 1049277.184 ops/s
Iteration   4: 1047508.028 ops/s
Iteration   5: 1045721.386 ops/s
Iteration   6: 1045978.414 ops/s
Iteration   7: 1046140.719 ops/s
Iteration   8: 1046452.559 ops/s
Iteration   9: 1048905.748 ops/s
Iteration  10: 1047026.990 ops/s
Iteration  11: 1044751.817 ops/s
Iteration  12: 1047584.485 ops/s
Iteration  13: 1043631.813 ops/s
Iteration  14: 1046399.020 ops/s
Iteration  15: 1047877.310 ops/s
Iteration  16: 1049302.649 ops/s
Iteration  17: 1051385.814 ops/s
Iteration  18: 1044934.519 ops/s
Iteration  19: 1047538.044 ops/s
Iteration  20: 1047652.326 ops/s
Iteration  21: 1046779.168 ops/s
Iteration  22: 1047884.961 ops/s
Iteration  23: 1048381.523 ops/s
Iteration  24: 1048957.857 ops/s
Iteration  25: 1045346.168 ops/s
Iteration  26: 1050940.177 ops/s
Iteration  27: 1044762.288 ops/s
Iteration  28: 1050066.059 ops/s
Iteration  29: 1048175.284 ops/s
Iteration  30: 1048905.257 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_retainAllIterable":
  1047304.548 ±(99.9%) 1329.855 ops/s [Average]
  (min, avg, max) = (1043392.288, 1047304.548, 1051385.814), stdev = 1990.465
  CI (99.9%): [1045974.693, 1048634.404] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_retainAllIterable  thrpt   30  1047304.548 ± 1329.855  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 311388.541 ops/s
# Warmup Iteration   2: 579489.823 ops/s
# Warmup Iteration   3: 649660.924 ops/s
# Warmup Iteration   4: 650700.444 ops/s
# Warmup Iteration   5: 606112.946 ops/s
# Warmup Iteration   6: 580877.492 ops/s
# Warmup Iteration   7: 650943.737 ops/s
# Warmup Iteration   8: 651274.261 ops/s
# Warmup Iteration   9: 650417.590 ops/s
# Warmup Iteration  10: 652484.369 ops/s
# Warmup Iteration  11: 649375.124 ops/s
# Warmup Iteration  12: 649575.355 ops/s
# Warmup Iteration  13: 651231.492 ops/s
# Warmup Iteration  14: 649153.242 ops/s
# Warmup Iteration  15: 648890.997 ops/s
# Warmup Iteration  16: 650623.059 ops/s
# Warmup Iteration  17: 650305.231 ops/s
# Warmup Iteration  18: 649718.380 ops/s
# Warmup Iteration  19: 650506.135 ops/s
# Warmup Iteration  20: 649073.027 ops/s
# Warmup Iteration  21: 649990.715 ops/s
# Warmup Iteration  22: 649360.291 ops/s
# Warmup Iteration  23: 650343.852 ops/s
# Warmup Iteration  24: 649917.180 ops/s
# Warmup Iteration  25: 650885.156 ops/s
# Warmup Iteration  26: 650196.267 ops/s
# Warmup Iteration  27: 650384.801 ops/s
# Warmup Iteration  28: 650153.279 ops/s
# Warmup Iteration  29: 649059.925 ops/s
# Warmup Iteration  30: 650127.477 ops/s
Iteration   1: 649304.357 ops/s
Iteration   2: 648763.206 ops/s
Iteration   3: 647447.806 ops/s
Iteration   4: 650748.519 ops/s
Iteration   5: 652672.442 ops/s
Iteration   6: 651109.146 ops/s
Iteration   7: 652432.439 ops/s
Iteration   8: 650684.006 ops/s
Iteration   9: 650891.126 ops/s
Iteration  10: 652180.008 ops/s
Iteration  11: 651665.198 ops/s
Iteration  12: 651811.178 ops/s
Iteration  13: 648443.935 ops/s
Iteration  14: 649945.737 ops/s
Iteration  15: 651293.076 ops/s
Iteration  16: 648558.274 ops/s
Iteration  17: 651453.213 ops/s
Iteration  18: 650787.958 ops/s
Iteration  19: 648832.998 ops/s
Iteration  20: 650016.536 ops/s
Iteration  21: 649288.103 ops/s
Iteration  22: 650950.432 ops/s
Iteration  23: 649767.228 ops/s
Iteration  24: 647642.144 ops/s
Iteration  25: 651997.997 ops/s
Iteration  26: 649165.723 ops/s
Iteration  27: 650604.172 ops/s
Iteration  28: 649289.835 ops/s
Iteration  29: 647753.920 ops/s
Iteration  30: 651136.014 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_select":
  650221.224 ±(99.9%) 986.006 ops/s [Average]
  (min, avg, max) = (647447.806, 650221.224, 652672.442), stdev = 1475.808
  CI (99.9%): [649235.218, 651207.230] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_select  thrpt   30  650221.224 ± 986.006  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectAndRejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectAndRejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2669916.265 ops/s
# Warmup Iteration   2: 6611024.427 ops/s
# Warmup Iteration   3: 5617395.715 ops/s
# Warmup Iteration   4: 6736176.554 ops/s
# Warmup Iteration   5: 6734027.613 ops/s
# Warmup Iteration   6: 6734328.576 ops/s
# Warmup Iteration   7: 6727169.119 ops/s
# Warmup Iteration   8: 6753092.817 ops/s
# Warmup Iteration   9: 6755716.771 ops/s
# Warmup Iteration  10: 6744820.660 ops/s
# Warmup Iteration  11: 6787058.234 ops/s
# Warmup Iteration  12: 6748515.726 ops/s
# Warmup Iteration  13: 6740399.718 ops/s
# Warmup Iteration  14: 6737338.231 ops/s
# Warmup Iteration  15: 6740811.854 ops/s
# Warmup Iteration  16: 6728452.298 ops/s
# Warmup Iteration  17: 6764758.569 ops/s
# Warmup Iteration  18: 6744237.630 ops/s
# Warmup Iteration  19: 6749550.845 ops/s
# Warmup Iteration  20: 6756489.516 ops/s
# Warmup Iteration  21: 6743021.955 ops/s
# Warmup Iteration  22: 6759271.863 ops/s
# Warmup Iteration  23: 6687095.998 ops/s
# Warmup Iteration  24: 6752365.203 ops/s
# Warmup Iteration  25: 6738407.907 ops/s
# Warmup Iteration  26: 6748152.565 ops/s
# Warmup Iteration  27: 6723748.701 ops/s
# Warmup Iteration  28: 6758858.921 ops/s
# Warmup Iteration  29: 6757943.023 ops/s
# Warmup Iteration  30: 6720231.308 ops/s
Iteration   1: 6774974.677 ops/s
Iteration   2: 6726122.709 ops/s
Iteration   3: 6771706.912 ops/s
Iteration   4: 6775587.605 ops/s
Iteration   5: 6762292.299 ops/s
Iteration   6: 6762013.846 ops/s
Iteration   7: 6752904.799 ops/s
Iteration   8: 6754337.473 ops/s
Iteration   9: 6667905.102 ops/s
Iteration  10: 6763676.246 ops/s
Iteration  11: 6783155.560 ops/s
Iteration  12: 6741721.298 ops/s
Iteration  13: 6767983.576 ops/s
Iteration  14: 6748023.465 ops/s
Iteration  15: 6768984.419 ops/s
Iteration  16: 6771208.879 ops/s
Iteration  17: 6767617.239 ops/s
Iteration  18: 6784748.485 ops/s
Iteration  19: 6746478.296 ops/s
Iteration  20: 6756418.719 ops/s
Iteration  21: 6765159.185 ops/s
Iteration  22: 6761924.253 ops/s
Iteration  23: 6773223.357 ops/s
Iteration  24: 6735445.221 ops/s
Iteration  25: 6765185.557 ops/s
Iteration  26: 6736600.138 ops/s
Iteration  27: 6773387.501 ops/s
Iteration  28: 6745397.531 ops/s
Iteration  29: 6749994.020 ops/s
Iteration  30: 6777985.458 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectAndRejectWith":
  6757738.794 ±(99.9%) 14956.889 ops/s [Average]
  (min, avg, max) = (6667905.102, 6757738.794, 6784748.485), stdev = 22386.768
  CI (99.9%): [6742781.906, 6772695.683] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_selectAndRejectWith  thrpt   30  6757738.794 ± 14956.889  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectByOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectByOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1054728.924 ops/s
# Warmup Iteration   2: 1900878.098 ops/s
# Warmup Iteration   3: 2127767.270 ops/s
# Warmup Iteration   4: 2140762.224 ops/s
# Warmup Iteration   5: 2095995.876 ops/s
# Warmup Iteration   6: 1790934.703 ops/s
# Warmup Iteration   7: 2130992.139 ops/s
# Warmup Iteration   8: 2131034.384 ops/s
# Warmup Iteration   9: 2144329.723 ops/s
# Warmup Iteration  10: 2139755.972 ops/s
# Warmup Iteration  11: 2131294.556 ops/s
# Warmup Iteration  12: 2137952.223 ops/s
# Warmup Iteration  13: 2139073.074 ops/s
# Warmup Iteration  14: 2136531.006 ops/s
# Warmup Iteration  15: 2131775.578 ops/s
# Warmup Iteration  16: 2137313.994 ops/s
# Warmup Iteration  17: 2141380.165 ops/s
# Warmup Iteration  18: 2122024.972 ops/s
# Warmup Iteration  19: 2139613.522 ops/s
# Warmup Iteration  20: 2138228.830 ops/s
# Warmup Iteration  21: 2137637.616 ops/s
# Warmup Iteration  22: 2138137.229 ops/s
# Warmup Iteration  23: 2147059.559 ops/s
# Warmup Iteration  24: 2136232.451 ops/s
# Warmup Iteration  25: 2141532.260 ops/s
# Warmup Iteration  26: 2144183.850 ops/s
# Warmup Iteration  27: 2148141.431 ops/s
# Warmup Iteration  28: 2136371.547 ops/s
# Warmup Iteration  29: 2142543.551 ops/s
# Warmup Iteration  30: 2136832.439 ops/s
Iteration   1: 2140127.498 ops/s
Iteration   2: 2139022.911 ops/s
Iteration   3: 2139247.577 ops/s
Iteration   4: 2143504.500 ops/s
Iteration   5: 2133349.207 ops/s
Iteration   6: 2134540.542 ops/s
Iteration   7: 2136322.381 ops/s
Iteration   8: 2142062.561 ops/s
Iteration   9: 2138582.003 ops/s
Iteration  10: 2137956.289 ops/s
Iteration  11: 2150075.028 ops/s
Iteration  12: 2147333.316 ops/s
Iteration  13: 2145539.140 ops/s
Iteration  14: 2138766.209 ops/s
Iteration  15: 2133180.966 ops/s
Iteration  16: 2132803.830 ops/s
Iteration  17: 2145196.218 ops/s
Iteration  18: 2128669.435 ops/s
Iteration  19: 2142143.408 ops/s
Iteration  20: 2134132.838 ops/s
Iteration  21: 2135874.246 ops/s
Iteration  22: 2138460.482 ops/s
Iteration  23: 2139168.244 ops/s
Iteration  24: 2144742.415 ops/s
Iteration  25: 2144441.269 ops/s
Iteration  26: 2145332.068 ops/s
Iteration  27: 2141066.424 ops/s
Iteration  28: 2128240.901 ops/s
Iteration  29: 2129122.471 ops/s
Iteration  30: 2136501.939 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectByOccurrences":
  2138850.211 ±(99.9%) 3748.823 ops/s [Average]
  (min, avg, max) = (2128240.901, 2138850.211, 2150075.028), stdev = 5611.062
  CI (99.9%): [2135101.388, 2142599.033] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_selectByOccurrences  thrpt   30  2138850.211 ± 3748.823  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectDuplicates$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectDuplicates

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 691600.323 ops/s
# Warmup Iteration   2: 1189991.394 ops/s
# Warmup Iteration   3: 1382061.063 ops/s
# Warmup Iteration   4: 1394571.781 ops/s
# Warmup Iteration   5: 1391023.333 ops/s
# Warmup Iteration   6: 1129140.657 ops/s
# Warmup Iteration   7: 1395277.453 ops/s
# Warmup Iteration   8: 1394436.527 ops/s
# Warmup Iteration   9: 1393198.961 ops/s
# Warmup Iteration  10: 1397408.436 ops/s
# Warmup Iteration  11: 1391992.209 ops/s
# Warmup Iteration  12: 1392413.442 ops/s
# Warmup Iteration  13: 1391344.607 ops/s
# Warmup Iteration  14: 1391142.053 ops/s
# Warmup Iteration  15: 1389845.732 ops/s
# Warmup Iteration  16: 1389441.710 ops/s
# Warmup Iteration  17: 1395141.546 ops/s
# Warmup Iteration  18: 1391991.254 ops/s
# Warmup Iteration  19: 1393384.615 ops/s
# Warmup Iteration  20: 1394735.050 ops/s
# Warmup Iteration  21: 1392510.561 ops/s
# Warmup Iteration  22: 1393541.763 ops/s
# Warmup Iteration  23: 1395060.443 ops/s
# Warmup Iteration  24: 1393053.267 ops/s
# Warmup Iteration  25: 1392481.361 ops/s
# Warmup Iteration  26: 1394849.241 ops/s
# Warmup Iteration  27: 1393742.223 ops/s
# Warmup Iteration  28: 1393568.042 ops/s
# Warmup Iteration  29: 1390892.117 ops/s
# Warmup Iteration  30: 1395710.163 ops/s
Iteration   1: 1393140.281 ops/s
Iteration   2: 1387159.590 ops/s
Iteration   3: 1395823.320 ops/s
Iteration   4: 1394844.151 ops/s
Iteration   5: 1392576.379 ops/s
Iteration   6: 1392318.677 ops/s
Iteration   7: 1390580.434 ops/s
Iteration   8: 1388749.309 ops/s
Iteration   9: 1393054.959 ops/s
Iteration  10: 1389963.523 ops/s
Iteration  11: 1393898.048 ops/s
Iteration  12: 1396726.828 ops/s
Iteration  13: 1392103.678 ops/s
Iteration  14: 1392014.196 ops/s
Iteration  15: 1393588.798 ops/s
Iteration  16: 1393997.128 ops/s
Iteration  17: 1394350.703 ops/s
Iteration  18: 1389995.559 ops/s
Iteration  19: 1392541.162 ops/s
Iteration  20: 1391214.832 ops/s
Iteration  21: 1396009.943 ops/s
Iteration  22: 1394712.880 ops/s
Iteration  23: 1398854.095 ops/s
Iteration  24: 1395052.192 ops/s
Iteration  25: 1389591.484 ops/s
Iteration  26: 1393062.840 ops/s
Iteration  27: 1383591.573 ops/s
Iteration  28: 1396677.503 ops/s
Iteration  29: 1388996.533 ops/s
Iteration  30: 1395168.733 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectDuplicates":
  1392678.644 ±(99.9%) 2124.112 ops/s [Average]
  (min, avg, max) = (1383591.573, 1392678.644, 1398854.095), stdev = 3179.271
  CI (99.9%): [1390554.533, 1394802.756] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_selectDuplicates  thrpt   30  1392678.644 ± 2124.112  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectInstancesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectInstancesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 294403.963 ops/s
# Warmup Iteration   2: 527639.891 ops/s
# Warmup Iteration   3: 592149.753 ops/s
# Warmup Iteration   4: 594270.492 ops/s
# Warmup Iteration   5: 594833.239 ops/s
# Warmup Iteration   6: 491412.058 ops/s
# Warmup Iteration   7: 595320.099 ops/s
# Warmup Iteration   8: 594833.541 ops/s
# Warmup Iteration   9: 596667.718 ops/s
# Warmup Iteration  10: 595081.731 ops/s
# Warmup Iteration  11: 597276.611 ops/s
# Warmup Iteration  12: 596644.707 ops/s
# Warmup Iteration  13: 596268.546 ops/s
# Warmup Iteration  14: 593256.862 ops/s
# Warmup Iteration  15: 595666.899 ops/s
# Warmup Iteration  16: 596008.113 ops/s
# Warmup Iteration  17: 594547.125 ops/s
# Warmup Iteration  18: 595174.555 ops/s
# Warmup Iteration  19: 596484.062 ops/s
# Warmup Iteration  20: 598035.203 ops/s
# Warmup Iteration  21: 594984.583 ops/s
# Warmup Iteration  22: 595140.507 ops/s
# Warmup Iteration  23: 597167.331 ops/s
# Warmup Iteration  24: 594604.782 ops/s
# Warmup Iteration  25: 595635.784 ops/s
# Warmup Iteration  26: 595319.324 ops/s
# Warmup Iteration  27: 596107.820 ops/s
# Warmup Iteration  28: 594663.666 ops/s
# Warmup Iteration  29: 594538.233 ops/s
# Warmup Iteration  30: 595537.876 ops/s
Iteration   1: 596485.634 ops/s
Iteration   2: 595632.186 ops/s
Iteration   3: 596995.156 ops/s
Iteration   4: 596741.796 ops/s
Iteration   5: 594120.583 ops/s
Iteration   6: 596696.119 ops/s
Iteration   7: 596301.648 ops/s
Iteration   8: 595744.380 ops/s
Iteration   9: 594290.194 ops/s
Iteration  10: 593838.100 ops/s
Iteration  11: 598433.657 ops/s
Iteration  12: 596487.225 ops/s
Iteration  13: 597100.104 ops/s
Iteration  14: 594990.178 ops/s
Iteration  15: 593062.658 ops/s
Iteration  16: 594918.560 ops/s
Iteration  17: 594312.372 ops/s
Iteration  18: 594160.581 ops/s
Iteration  19: 596188.358 ops/s
Iteration  20: 596026.547 ops/s
Iteration  21: 594464.762 ops/s
Iteration  22: 592406.936 ops/s
Iteration  23: 596511.551 ops/s
Iteration  24: 596466.461 ops/s
Iteration  25: 594986.137 ops/s
Iteration  26: 597223.638 ops/s
Iteration  27: 595526.894 ops/s
Iteration  28: 592875.116 ops/s
Iteration  29: 593639.932 ops/s
Iteration  30: 597816.502 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectInstancesOf":
  595481.465 ±(99.9%) 1017.041 ops/s [Average]
  (min, avg, max) = (592406.936, 595481.465, 598433.657), stdev = 1522.259
  CI (99.9%): [594464.425, 596498.506] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_selectInstancesOf  thrpt   30  595481.465 ± 1017.041  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1090355.123 ops/s
# Warmup Iteration   2: 2037482.739 ops/s
# Warmup Iteration   3: 2251520.358 ops/s
# Warmup Iteration   4: 2265028.339 ops/s
# Warmup Iteration   5: 2050223.151 ops/s
# Warmup Iteration   6: 2068786.011 ops/s
# Warmup Iteration   7: 2276671.892 ops/s
# Warmup Iteration   8: 2272836.523 ops/s
# Warmup Iteration   9: 2268497.992 ops/s
# Warmup Iteration  10: 2270395.410 ops/s
# Warmup Iteration  11: 2278810.685 ops/s
# Warmup Iteration  12: 2272352.155 ops/s
# Warmup Iteration  13: 2266748.508 ops/s
# Warmup Iteration  14: 2272235.135 ops/s
# Warmup Iteration  15: 2275088.012 ops/s
# Warmup Iteration  16: 2275556.637 ops/s
# Warmup Iteration  17: 2277583.146 ops/s
# Warmup Iteration  18: 2269634.894 ops/s
# Warmup Iteration  19: 2271462.116 ops/s
# Warmup Iteration  20: 2264930.088 ops/s
# Warmup Iteration  21: 2267906.053 ops/s
# Warmup Iteration  22: 2260085.188 ops/s
# Warmup Iteration  23: 2272490.133 ops/s
# Warmup Iteration  24: 2274442.674 ops/s
# Warmup Iteration  25: 2273012.552 ops/s
# Warmup Iteration  26: 2276242.486 ops/s
# Warmup Iteration  27: 2264526.593 ops/s
# Warmup Iteration  28: 2275640.067 ops/s
# Warmup Iteration  29: 2274790.015 ops/s
# Warmup Iteration  30: 2274207.976 ops/s
Iteration   1: 2266703.607 ops/s
Iteration   2: 2273117.761 ops/s
Iteration   3: 2279252.854 ops/s
Iteration   4: 2268918.032 ops/s
Iteration   5: 2265179.451 ops/s
Iteration   6: 2271583.111 ops/s
Iteration   7: 2271703.268 ops/s
Iteration   8: 2282237.643 ops/s
Iteration   9: 2267831.692 ops/s
Iteration  10: 2273134.271 ops/s
Iteration  11: 2265872.296 ops/s
Iteration  12: 2263324.380 ops/s
Iteration  13: 2268434.772 ops/s
Iteration  14: 2271648.183 ops/s
Iteration  15: 2271520.419 ops/s
Iteration  16: 2276808.731 ops/s
Iteration  17: 2272233.838 ops/s
Iteration  18: 2264433.061 ops/s
Iteration  19: 2275420.528 ops/s
Iteration  20: 2269908.772 ops/s
Iteration  21: 2276555.819 ops/s
Iteration  22: 2270479.625 ops/s
Iteration  23: 2269027.022 ops/s
Iteration  24: 2263654.499 ops/s
Iteration  25: 2266607.496 ops/s
Iteration  26: 2273586.705 ops/s
Iteration  27: 2269374.493 ops/s
Iteration  28: 2262297.430 ops/s
Iteration  29: 2277150.898 ops/s
Iteration  30: 2275857.570 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectUnique":
  2270795.274 ±(99.9%) 3319.999 ops/s [Average]
  (min, avg, max) = (2262297.430, 2270795.274, 2282237.643), stdev = 4969.218
  CI (99.9%): [2267475.276, 2274115.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_selectUnique  thrpt   30  2270795.274 ± 3319.999  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 341749.788 ops/s
# Warmup Iteration   2: 704223.376 ops/s
# Warmup Iteration   3: 750919.007 ops/s
# Warmup Iteration   4: 751691.632 ops/s
# Warmup Iteration   5: 623141.954 ops/s
# Warmup Iteration   6: 753943.444 ops/s
# Warmup Iteration   7: 753148.028 ops/s
# Warmup Iteration   8: 752476.023 ops/s
# Warmup Iteration   9: 755206.182 ops/s
# Warmup Iteration  10: 755059.176 ops/s
# Warmup Iteration  11: 752476.787 ops/s
# Warmup Iteration  12: 757629.807 ops/s
# Warmup Iteration  13: 753330.101 ops/s
# Warmup Iteration  14: 754099.845 ops/s
# Warmup Iteration  15: 754866.874 ops/s
# Warmup Iteration  16: 756459.358 ops/s
# Warmup Iteration  17: 754012.445 ops/s
# Warmup Iteration  18: 754420.578 ops/s
# Warmup Iteration  19: 757364.111 ops/s
# Warmup Iteration  20: 754733.484 ops/s
# Warmup Iteration  21: 757725.053 ops/s
# Warmup Iteration  22: 756380.159 ops/s
# Warmup Iteration  23: 757195.977 ops/s
# Warmup Iteration  24: 754046.289 ops/s
# Warmup Iteration  25: 757269.896 ops/s
# Warmup Iteration  26: 755375.431 ops/s
# Warmup Iteration  27: 754893.479 ops/s
# Warmup Iteration  28: 753822.636 ops/s
# Warmup Iteration  29: 758039.153 ops/s
# Warmup Iteration  30: 755307.716 ops/s
Iteration   1: 756258.189 ops/s
Iteration   2: 755977.804 ops/s
Iteration   3: 758593.203 ops/s
Iteration   4: 759579.904 ops/s
Iteration   5: 758754.883 ops/s
Iteration   6: 756621.561 ops/s
Iteration   7: 754275.993 ops/s
Iteration   8: 755316.123 ops/s
Iteration   9: 756997.594 ops/s
Iteration  10: 753414.856 ops/s
Iteration  11: 758358.356 ops/s
Iteration  12: 758070.203 ops/s
Iteration  13: 755363.364 ops/s
Iteration  14: 754847.970 ops/s
Iteration  15: 755730.138 ops/s
Iteration  16: 756165.714 ops/s
Iteration  17: 754305.622 ops/s
Iteration  18: 754590.532 ops/s
Iteration  19: 757387.808 ops/s
Iteration  20: 756297.073 ops/s
Iteration  21: 753931.686 ops/s
Iteration  22: 756554.573 ops/s
Iteration  23: 755637.712 ops/s
Iteration  24: 759412.362 ops/s
Iteration  25: 757033.393 ops/s
Iteration  26: 760255.149 ops/s
Iteration  27: 752537.165 ops/s
Iteration  28: 753860.640 ops/s
Iteration  29: 754820.981 ops/s
Iteration  30: 755888.628 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith":
  756227.973 ±(99.9%) 1296.469 ops/s [Average]
  (min, avg, max) = (752537.165, 756227.973, 760255.149), stdev = 1940.494
  CI (99.9%): [754931.503, 757524.442] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_selectWith  thrpt   30  756227.973 ± 1296.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 267661.363 ops/s
# Warmup Iteration   2: 535926.239 ops/s
# Warmup Iteration   3: 599819.886 ops/s
# Warmup Iteration   4: 602883.363 ops/s
# Warmup Iteration   5: 495212.192 ops/s
# Warmup Iteration   6: 602320.617 ops/s
# Warmup Iteration   7: 599526.000 ops/s
# Warmup Iteration   8: 602604.563 ops/s
# Warmup Iteration   9: 601700.850 ops/s
# Warmup Iteration  10: 601510.898 ops/s
# Warmup Iteration  11: 600195.582 ops/s
# Warmup Iteration  12: 599710.522 ops/s
# Warmup Iteration  13: 601433.134 ops/s
# Warmup Iteration  14: 602931.592 ops/s
# Warmup Iteration  15: 602444.802 ops/s
# Warmup Iteration  16: 601090.026 ops/s
# Warmup Iteration  17: 602763.756 ops/s
# Warmup Iteration  18: 601962.695 ops/s
# Warmup Iteration  19: 601360.704 ops/s
# Warmup Iteration  20: 600428.011 ops/s
# Warmup Iteration  21: 602824.640 ops/s
# Warmup Iteration  22: 600600.735 ops/s
# Warmup Iteration  23: 603751.860 ops/s
# Warmup Iteration  24: 599696.326 ops/s
# Warmup Iteration  25: 601053.002 ops/s
# Warmup Iteration  26: 602133.257 ops/s
# Warmup Iteration  27: 602406.548 ops/s
# Warmup Iteration  28: 602166.588 ops/s
# Warmup Iteration  29: 602400.599 ops/s
# Warmup Iteration  30: 601679.020 ops/s
Iteration   1: 603834.310 ops/s
Iteration   2: 603809.632 ops/s
Iteration   3: 600871.625 ops/s
Iteration   4: 603719.121 ops/s
Iteration   5: 601329.560 ops/s
Iteration   6: 603461.065 ops/s
Iteration   7: 603228.676 ops/s
Iteration   8: 601796.139 ops/s
Iteration   9: 602638.829 ops/s
Iteration  10: 603403.329 ops/s
Iteration  11: 600660.200 ops/s
Iteration  12: 599735.223 ops/s
Iteration  13: 604149.636 ops/s
Iteration  14: 602728.392 ops/s
Iteration  15: 603846.573 ops/s
Iteration  16: 603940.225 ops/s
Iteration  17: 601816.924 ops/s
Iteration  18: 601726.702 ops/s
Iteration  19: 601766.471 ops/s
Iteration  20: 602944.432 ops/s
Iteration  21: 603693.765 ops/s
Iteration  22: 602698.574 ops/s
Iteration  23: 602988.252 ops/s
Iteration  24: 603191.855 ops/s
Iteration  25: 600361.454 ops/s
Iteration  26: 601464.153 ops/s
Iteration  27: 603303.336 ops/s
Iteration  28: 602307.707 ops/s
Iteration  29: 602178.986 ops/s
Iteration  30: 603475.052 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_selectWith_target":
  602569.007 ±(99.9%) 791.493 ops/s [Average]
  (min, avg, max) = (599735.223, 602569.007, 604149.636), stdev = 1184.669
  CI (99.9%): [601777.514, 603360.499] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_selectWith_target  thrpt   30  602569.007 ± 791.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_serialization$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_serialization

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 95526.036 ops/s
# Warmup Iteration   2: 153376.529 ops/s
# Warmup Iteration   3: 188976.284 ops/s
# Warmup Iteration   4: 190563.746 ops/s
# Warmup Iteration   5: 191992.751 ops/s
# Warmup Iteration   6: 192037.987 ops/s
# Warmup Iteration   7: 163482.229 ops/s
# Warmup Iteration   8: 191868.074 ops/s
# Warmup Iteration   9: 191727.061 ops/s
# Warmup Iteration  10: 190894.694 ops/s
# Warmup Iteration  11: 190695.285 ops/s
# Warmup Iteration  12: 191507.758 ops/s
# Warmup Iteration  13: 191657.950 ops/s
# Warmup Iteration  14: 191102.472 ops/s
# Warmup Iteration  15: 191887.652 ops/s
# Warmup Iteration  16: 190933.680 ops/s
# Warmup Iteration  17: 190967.673 ops/s
# Warmup Iteration  18: 190943.689 ops/s
# Warmup Iteration  19: 191911.921 ops/s
# Warmup Iteration  20: 191125.072 ops/s
# Warmup Iteration  21: 191353.069 ops/s
# Warmup Iteration  22: 191513.719 ops/s
# Warmup Iteration  23: 192297.905 ops/s
# Warmup Iteration  24: 190868.731 ops/s
# Warmup Iteration  25: 191246.887 ops/s
# Warmup Iteration  26: 191677.379 ops/s
# Warmup Iteration  27: 190740.318 ops/s
# Warmup Iteration  28: 191216.100 ops/s
# Warmup Iteration  29: 192004.439 ops/s
# Warmup Iteration  30: 192149.720 ops/s
Iteration   1: 191023.248 ops/s
Iteration   2: 191371.524 ops/s
Iteration   3: 190610.570 ops/s
Iteration   4: 191183.832 ops/s
Iteration   5: 192038.858 ops/s
Iteration   6: 190732.738 ops/s
Iteration   7: 190662.175 ops/s
Iteration   8: 191212.328 ops/s
Iteration   9: 190766.554 ops/s
Iteration  10: 191404.114 ops/s
Iteration  11: 192372.751 ops/s
Iteration  12: 191378.191 ops/s
Iteration  13: 191420.535 ops/s
Iteration  14: 190691.593 ops/s
Iteration  15: 190220.466 ops/s
Iteration  16: 190815.689 ops/s
Iteration  17: 191152.249 ops/s
Iteration  18: 191386.267 ops/s
Iteration  19: 191901.889 ops/s
Iteration  20: 191273.223 ops/s
Iteration  21: 192142.758 ops/s
Iteration  22: 191972.859 ops/s
Iteration  23: 192373.450 ops/s
Iteration  24: 192011.468 ops/s
Iteration  25: 191426.520 ops/s
Iteration  26: 191682.322 ops/s
Iteration  27: 191101.142 ops/s
Iteration  28: 191964.322 ops/s
Iteration  29: 191388.668 ops/s
Iteration  30: 192077.751 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_serialization":
  191392.002 ±(99.9%) 378.456 ops/s [Average]
  (min, avg, max) = (190220.466, 191392.002, 192373.450), stdev = 566.455
  CI (99.9%): [191013.546, 191770.458] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_serialization  thrpt   30  191392.002 ± 378.456  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 244039.539 ops/s
# Warmup Iteration   2: 550479.230 ops/s
# Warmup Iteration   3: 571942.342 ops/s
# Warmup Iteration   4: 526309.609 ops/s
# Warmup Iteration   5: 522216.328 ops/s
# Warmup Iteration   6: 573369.424 ops/s
# Warmup Iteration   7: 572234.181 ops/s
# Warmup Iteration   8: 572490.798 ops/s
# Warmup Iteration   9: 573806.143 ops/s
# Warmup Iteration  10: 572177.435 ops/s
# Warmup Iteration  11: 571616.043 ops/s
# Warmup Iteration  12: 570538.174 ops/s
# Warmup Iteration  13: 571082.359 ops/s
# Warmup Iteration  14: 573157.587 ops/s
# Warmup Iteration  15: 572034.142 ops/s
# Warmup Iteration  16: 573608.820 ops/s
# Warmup Iteration  17: 572401.154 ops/s
# Warmup Iteration  18: 571377.203 ops/s
# Warmup Iteration  19: 570443.291 ops/s
# Warmup Iteration  20: 571141.020 ops/s
# Warmup Iteration  21: 572589.501 ops/s
# Warmup Iteration  22: 570219.582 ops/s
# Warmup Iteration  23: 570906.555 ops/s
# Warmup Iteration  24: 571167.302 ops/s
# Warmup Iteration  25: 571923.798 ops/s
# Warmup Iteration  26: 570124.843 ops/s
# Warmup Iteration  27: 570372.077 ops/s
# Warmup Iteration  28: 570921.381 ops/s
# Warmup Iteration  29: 572074.491 ops/s
# Warmup Iteration  30: 571876.821 ops/s
Iteration   1: 572565.325 ops/s
Iteration   2: 574312.857 ops/s
Iteration   3: 567021.272 ops/s
Iteration   4: 570620.243 ops/s
Iteration   5: 573116.086 ops/s
Iteration   6: 574754.237 ops/s
Iteration   7: 574034.543 ops/s
Iteration   8: 573304.484 ops/s
Iteration   9: 572559.014 ops/s
Iteration  10: 572856.429 ops/s
Iteration  11: 571421.988 ops/s
Iteration  12: 573787.050 ops/s
Iteration  13: 573979.259 ops/s
Iteration  14: 571341.459 ops/s
Iteration  15: 571010.688 ops/s
Iteration  16: 572053.293 ops/s
Iteration  17: 572147.307 ops/s
Iteration  18: 573459.628 ops/s
Iteration  19: 574147.172 ops/s
Iteration  20: 574151.441 ops/s
Iteration  21: 572841.537 ops/s
Iteration  22: 573617.450 ops/s
Iteration  23: 573684.342 ops/s
Iteration  24: 571517.889 ops/s
Iteration  25: 571132.700 ops/s
Iteration  26: 573509.108 ops/s
Iteration  27: 574011.983 ops/s
Iteration  28: 574915.338 ops/s
Iteration  29: 572346.940 ops/s
Iteration  30: 572153.182 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences":
  572745.808 ±(99.9%) 1065.505 ops/s [Average]
  (min, avg, max) = (567021.272, 572745.808, 574915.338), stdev = 1594.798
  CI (99.9%): [571680.303, 573811.313] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_setOccurrences  thrpt   30  572745.808 ± 1065.505  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 773326.921 ops/s
# Warmup Iteration   2: 798869.478 ops/s
# Warmup Iteration   3: 1057504.061 ops/s
# Warmup Iteration   4: 1064935.131 ops/s
# Warmup Iteration   5: 1063304.357 ops/s
# Warmup Iteration   6: 1057493.386 ops/s
# Warmup Iteration   7: 1058596.411 ops/s
# Warmup Iteration   8: 1059762.600 ops/s
# Warmup Iteration   9: 1064964.761 ops/s
# Warmup Iteration  10: 1061138.756 ops/s
# Warmup Iteration  11: 1060519.379 ops/s
# Warmup Iteration  12: 884694.213 ops/s
# Warmup Iteration  13: 1065565.296 ops/s
# Warmup Iteration  14: 1061469.268 ops/s
# Warmup Iteration  15: 1062547.021 ops/s
# Warmup Iteration  16: 1063877.030 ops/s
# Warmup Iteration  17: 1133358.722 ops/s
# Warmup Iteration  18: 1134755.633 ops/s
# Warmup Iteration  19: 1138146.560 ops/s
# Warmup Iteration  20: 1130931.520 ops/s
# Warmup Iteration  21: 1135273.713 ops/s
# Warmup Iteration  22: 1132895.474 ops/s
# Warmup Iteration  23: 1130692.242 ops/s
# Warmup Iteration  24: 1132404.421 ops/s
# Warmup Iteration  25: 1134040.654 ops/s
# Warmup Iteration  26: 1130030.384 ops/s
# Warmup Iteration  27: 1134283.605 ops/s
# Warmup Iteration  28: 1134386.841 ops/s
# Warmup Iteration  29: 1136247.974 ops/s
# Warmup Iteration  30: 1133199.347 ops/s
Iteration   1: 1131852.563 ops/s
Iteration   2: 1132080.837 ops/s
Iteration   3: 1136506.247 ops/s
Iteration   4: 1132776.637 ops/s
Iteration   5: 1133559.421 ops/s
Iteration   6: 1136881.731 ops/s
Iteration   7: 1129892.060 ops/s
Iteration   8: 1131728.318 ops/s
Iteration   9: 1135888.616 ops/s
Iteration  10: 1137100.360 ops/s
Iteration  11: 1126675.529 ops/s
Iteration  12: 1134482.083 ops/s
Iteration  13: 1133641.134 ops/s
Iteration  14: 1134405.389 ops/s
Iteration  15: 1131774.383 ops/s
Iteration  16: 1137713.033 ops/s
Iteration  17: 1129424.497 ops/s
Iteration  18: 1131364.664 ops/s
Iteration  19: 1131944.485 ops/s
Iteration  20: 1127674.131 ops/s
Iteration  21: 1130044.519 ops/s
Iteration  22: 1130622.881 ops/s
Iteration  23: 1137357.329 ops/s
Iteration  24: 1135549.239 ops/s
Iteration  25: 1133011.481 ops/s
Iteration  26: 1134746.293 ops/s
Iteration  27: 1138610.170 ops/s
Iteration  28: 1135605.417 ops/s
Iteration  29: 1133178.754 ops/s
Iteration  30: 1135537.378 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_setOccurrences_throws":
  1133387.653 ±(99.9%) 2010.847 ops/s [Average]
  (min, avg, max) = (1126675.529, 1133387.653, 1138610.170), stdev = 3009.742
  CI (99.9%): [1131376.805, 1135398.500] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_setOccurrences_throws  thrpt   30  1133387.653 ± 2010.847  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633103.210 ops/s
# Warmup Iteration   2: 948708.211 ops/s
# Warmup Iteration   3: 1120063.605 ops/s
# Warmup Iteration   4: 1125225.662 ops/s
# Warmup Iteration   5: 1124845.954 ops/s
# Warmup Iteration   6: 1126781.966 ops/s
# Warmup Iteration   7: 930999.409 ops/s
# Warmup Iteration   8: 1127095.893 ops/s
# Warmup Iteration   9: 1126977.123 ops/s
# Warmup Iteration  10: 1126493.278 ops/s
# Warmup Iteration  11: 1128420.142 ops/s
# Warmup Iteration  12: 1128694.965 ops/s
# Warmup Iteration  13: 1129303.550 ops/s
# Warmup Iteration  14: 1129624.073 ops/s
# Warmup Iteration  15: 1126612.282 ops/s
# Warmup Iteration  16: 1128050.994 ops/s
# Warmup Iteration  17: 1127196.619 ops/s
# Warmup Iteration  18: 1131424.327 ops/s
# Warmup Iteration  19: 1112963.297 ops/s
# Warmup Iteration  20: 1127429.434 ops/s
# Warmup Iteration  21: 1127170.365 ops/s
# Warmup Iteration  22: 1123880.347 ops/s
# Warmup Iteration  23: 1127175.882 ops/s
# Warmup Iteration  24: 1129282.054 ops/s
# Warmup Iteration  25: 1126620.047 ops/s
# Warmup Iteration  26: 1128256.381 ops/s
# Warmup Iteration  27: 1128149.557 ops/s
# Warmup Iteration  28: 1124284.741 ops/s
# Warmup Iteration  29: 1125226.939 ops/s
# Warmup Iteration  30: 1127023.925 ops/s
Iteration   1: 1127506.863 ops/s
Iteration   2: 1130543.483 ops/s
Iteration   3: 1125432.831 ops/s
Iteration   4: 1128442.716 ops/s
Iteration   5: 1126839.445 ops/s
Iteration   6: 1126310.082 ops/s
Iteration   7: 1129577.687 ops/s
Iteration   8: 1128677.713 ops/s
Iteration   9: 1129924.547 ops/s
Iteration  10: 1125123.024 ops/s
Iteration  11: 1129032.465 ops/s
Iteration  12: 1128135.991 ops/s
Iteration  13: 1130593.964 ops/s
Iteration  14: 1127682.437 ops/s
Iteration  15: 1126614.312 ops/s
Iteration  16: 1126438.160 ops/s
Iteration  17: 1129903.813 ops/s
Iteration  18: 1126339.580 ops/s
Iteration  19: 1124901.274 ops/s
Iteration  20: 1126963.516 ops/s
Iteration  21: 1127525.072 ops/s
Iteration  22: 1131227.771 ops/s
Iteration  23: 1122785.430 ops/s
Iteration  24: 1126357.982 ops/s
Iteration  25: 1130885.758 ops/s
Iteration  26: 1131551.762 ops/s
Iteration  27: 1129546.767 ops/s
Iteration  28: 1128954.102 ops/s
Iteration  29: 1126773.795 ops/s
Iteration  30: 1125302.425 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDouble":
  1127863.159 ±(99.9%) 1441.288 ops/s [Average]
  (min, avg, max) = (1122785.430, 1127863.159, 1131551.762), stdev = 2157.252
  CI (99.9%): [1126421.871, 1129304.447] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumByDouble  thrpt   30  1127863.159 ± 1441.288  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 57.118 ops/s
# Warmup Iteration   2: 63.349 ops/s
# Warmup Iteration   3: 83.665 ops/s
# Warmup Iteration   4: 87.121 ops/s
# Warmup Iteration   5: 86.888 ops/s
# Warmup Iteration   6: 90.119 ops/s
# Warmup Iteration   7: 89.700 ops/s
# Warmup Iteration   8: 90.445 ops/s
# Warmup Iteration   9: 88.796 ops/s
# Warmup Iteration  10: 86.984 ops/s
# Warmup Iteration  11: 79.665 ops/s
# Warmup Iteration  12: 86.486 ops/s
# Warmup Iteration  13: 89.691 ops/s
# Warmup Iteration  14: 90.859 ops/s
# Warmup Iteration  15: 90.603 ops/s
# Warmup Iteration  16: 90.547 ops/s
# Warmup Iteration  17: 89.812 ops/s
# Warmup Iteration  18: 92.312 ops/s
# Warmup Iteration  19: 92.146 ops/s
# Warmup Iteration  20: 88.463 ops/s
# Warmup Iteration  21: 92.278 ops/s
# Warmup Iteration  22: 91.893 ops/s
# Warmup Iteration  23: 89.565 ops/s
# Warmup Iteration  24: 85.940 ops/s
# Warmup Iteration  25: 83.336 ops/s
# Warmup Iteration  26: 87.856 ops/s
# Warmup Iteration  27: 84.480 ops/s
# Warmup Iteration  28: 86.446 ops/s
# Warmup Iteration  29: 89.028 ops/s
# Warmup Iteration  30: 83.063 ops/s
Iteration   1: 86.974 ops/s
Iteration   2: 88.397 ops/s
Iteration   3: 86.986 ops/s
Iteration   4: 84.033 ops/s
Iteration   5: 83.973 ops/s
Iteration   6: 80.420 ops/s
Iteration   7: 82.335 ops/s
Iteration   8: 86.236 ops/s
Iteration   9: 81.920 ops/s
Iteration  10: 84.654 ops/s
Iteration  11: 86.701 ops/s
Iteration  12: 85.058 ops/s
Iteration  13: 83.714 ops/s
Iteration  14: 87.927 ops/s
Iteration  15: 87.439 ops/s
Iteration  16: 86.324 ops/s
Iteration  17: 84.847 ops/s
Iteration  18: 83.839 ops/s
Iteration  19: 81.318 ops/s
Iteration  20: 79.468 ops/s
Iteration  21: 85.693 ops/s
Iteration  22: 85.432 ops/s
Iteration  23: 84.924 ops/s
Iteration  24: 87.826 ops/s
Iteration  25: 89.065 ops/s
Iteration  26: 83.180 ops/s
Iteration  27: 86.938 ops/s
Iteration  28: 84.721 ops/s
Iteration  29: 86.224 ops/s
Iteration  30: 86.017 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding":
  85.086 ±(99.9%) 1.577 ops/s [Average]
  (min, avg, max) = (79.468, 85.086, 89.065), stdev = 2.360
  CI (99.9%): [83.509, 86.663] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt   Score   Error  Units
HashBagTest._Benchmark.benchmark_sumByDoubleConsistentRounding  thrpt   30  85.086 ± 1.577  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623251.759 ops/s
# Warmup Iteration   2: 932580.679 ops/s
# Warmup Iteration   3: 1117989.554 ops/s
# Warmup Iteration   4: 1111434.245 ops/s
# Warmup Iteration   5: 1120152.437 ops/s
# Warmup Iteration   6: 1120048.160 ops/s
# Warmup Iteration   7: 916687.398 ops/s
# Warmup Iteration   8: 1116357.877 ops/s
# Warmup Iteration   9: 1121327.645 ops/s
# Warmup Iteration  10: 1114882.537 ops/s
# Warmup Iteration  11: 1118510.132 ops/s
# Warmup Iteration  12: 1119066.923 ops/s
# Warmup Iteration  13: 1121102.958 ops/s
# Warmup Iteration  14: 1121215.105 ops/s
# Warmup Iteration  15: 1122068.795 ops/s
# Warmup Iteration  16: 1124000.714 ops/s
# Warmup Iteration  17: 1121752.091 ops/s
# Warmup Iteration  18: 1119602.887 ops/s
# Warmup Iteration  19: 1121940.123 ops/s
# Warmup Iteration  20: 1122602.370 ops/s
# Warmup Iteration  21: 1121938.772 ops/s
# Warmup Iteration  22: 1122994.257 ops/s
# Warmup Iteration  23: 1123196.433 ops/s
# Warmup Iteration  24: 1122092.069 ops/s
# Warmup Iteration  25: 1115816.820 ops/s
# Warmup Iteration  26: 1122297.523 ops/s
# Warmup Iteration  27: 1121138.733 ops/s
# Warmup Iteration  28: 1118848.598 ops/s
# Warmup Iteration  29: 1121021.076 ops/s
# Warmup Iteration  30: 1121110.631 ops/s
Iteration   1: 1119808.462 ops/s
Iteration   2: 1117237.075 ops/s
Iteration   3: 1123572.913 ops/s
Iteration   4: 1115257.429 ops/s
Iteration   5: 1123629.587 ops/s
Iteration   6: 1114064.974 ops/s
Iteration   7: 1122308.570 ops/s
Iteration   8: 1121360.948 ops/s
Iteration   9: 1118780.606 ops/s
Iteration  10: 1109413.430 ops/s
Iteration  11: 1126392.475 ops/s
Iteration  12: 1120498.155 ops/s
Iteration  13: 1120377.301 ops/s
Iteration  14: 1122455.593 ops/s
Iteration  15: 1120467.456 ops/s
Iteration  16: 1119052.031 ops/s
Iteration  17: 1120160.523 ops/s
Iteration  18: 1120819.452 ops/s
Iteration  19: 1124212.894 ops/s
Iteration  20: 1121874.896 ops/s
Iteration  21: 1119257.571 ops/s
Iteration  22: 1121077.637 ops/s
Iteration  23: 1117452.118 ops/s
Iteration  24: 1120109.516 ops/s
Iteration  25: 1117765.661 ops/s
Iteration  26: 1123814.442 ops/s
Iteration  27: 1122456.794 ops/s
Iteration  28: 1121181.008 ops/s
Iteration  29: 1122480.180 ops/s
Iteration  30: 1120496.860 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloat":
  1120261.219 ±(99.9%) 2226.182 ops/s [Average]
  (min, avg, max) = (1109413.430, 1120261.219, 1126392.475), stdev = 3332.045
  CI (99.9%): [1118035.037, 1122487.400] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumByFloat  thrpt   30  1120261.219 ± 2226.182  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 56.038 ops/s
# Warmup Iteration   2: 61.506 ops/s
# Warmup Iteration   3: 84.835 ops/s
# Warmup Iteration   4: 88.175 ops/s
# Warmup Iteration   5: 91.502 ops/s
# Warmup Iteration   6: 89.426 ops/s
# Warmup Iteration   7: 90.868 ops/s
# Warmup Iteration   8: 89.863 ops/s
# Warmup Iteration   9: 88.860 ops/s
# Warmup Iteration  10: 90.401 ops/s
# Warmup Iteration  11: 78.026 ops/s
# Warmup Iteration  12: 86.897 ops/s
# Warmup Iteration  13: 88.568 ops/s
# Warmup Iteration  14: 90.699 ops/s
# Warmup Iteration  15: 92.224 ops/s
# Warmup Iteration  16: 90.153 ops/s
# Warmup Iteration  17: 91.392 ops/s
# Warmup Iteration  18: 92.502 ops/s
# Warmup Iteration  19: 90.664 ops/s
# Warmup Iteration  20: 90.368 ops/s
# Warmup Iteration  21: 91.224 ops/s
# Warmup Iteration  22: 89.336 ops/s
# Warmup Iteration  23: 88.342 ops/s
# Warmup Iteration  24: 91.949 ops/s
# Warmup Iteration  25: 91.692 ops/s
# Warmup Iteration  26: 90.002 ops/s
# Warmup Iteration  27: 89.360 ops/s
# Warmup Iteration  28: 92.693 ops/s
# Warmup Iteration  29: 89.786 ops/s
# Warmup Iteration  30: 87.814 ops/s
Iteration   1: 91.071 ops/s
Iteration   2: 89.352 ops/s
Iteration   3: 87.813 ops/s
Iteration   4: 87.931 ops/s
Iteration   5: 88.034 ops/s
Iteration   6: 84.346 ops/s
Iteration   7: 87.649 ops/s
Iteration   8: 88.194 ops/s
Iteration   9: 87.935 ops/s
Iteration  10: 87.738 ops/s
Iteration  11: 88.134 ops/s
Iteration  12: 86.289 ops/s
Iteration  13: 85.890 ops/s
Iteration  14: 88.488 ops/s
Iteration  15: 88.518 ops/s
Iteration  16: 91.422 ops/s
Iteration  17: 89.795 ops/s
Iteration  18: 89.313 ops/s
Iteration  19: 84.969 ops/s
Iteration  20: 90.177 ops/s
Iteration  21: 90.920 ops/s
Iteration  22: 88.917 ops/s
Iteration  23: 88.428 ops/s
Iteration  24: 87.937 ops/s
Iteration  25: 89.360 ops/s
Iteration  26: 83.643 ops/s
Iteration  27: 90.030 ops/s
Iteration  28: 91.930 ops/s
Iteration  29: 89.859 ops/s
Iteration  30: 90.193 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding":
  88.476 ±(99.9%) 1.329 ops/s [Average]
  (min, avg, max) = (83.643, 88.476, 91.930), stdev = 1.990
  CI (99.9%): [87.147, 89.805] (assumes normal distribution)


# Run complete. Total time: 00:01:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt   Score   Error  Units
HashBagTest._Benchmark.benchmark_sumByFloatConsistentRounding  thrpt   30  88.476 ± 1.329  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 830852.710 ops/s
# Warmup Iteration   2: 1364310.884 ops/s
# Warmup Iteration   3: 1578006.319 ops/s
# Warmup Iteration   4: 1589030.168 ops/s
# Warmup Iteration   5: 1581802.713 ops/s
# Warmup Iteration   6: 1288524.336 ops/s
# Warmup Iteration   7: 1582917.095 ops/s
# Warmup Iteration   8: 1586105.348 ops/s
# Warmup Iteration   9: 1588653.125 ops/s
# Warmup Iteration  10: 1587750.900 ops/s
# Warmup Iteration  11: 1586924.504 ops/s
# Warmup Iteration  12: 1588968.977 ops/s
# Warmup Iteration  13: 1587635.334 ops/s
# Warmup Iteration  14: 1589968.992 ops/s
# Warmup Iteration  15: 1586766.559 ops/s
# Warmup Iteration  16: 1588220.649 ops/s
# Warmup Iteration  17: 1580696.874 ops/s
# Warmup Iteration  18: 1578473.617 ops/s
# Warmup Iteration  19: 1583859.513 ops/s
# Warmup Iteration  20: 1586691.434 ops/s
# Warmup Iteration  21: 1579087.785 ops/s
# Warmup Iteration  22: 1584076.138 ops/s
# Warmup Iteration  23: 1578481.747 ops/s
# Warmup Iteration  24: 1581366.140 ops/s
# Warmup Iteration  25: 1581629.206 ops/s
# Warmup Iteration  26: 1585317.723 ops/s
# Warmup Iteration  27: 1581482.959 ops/s
# Warmup Iteration  28: 1578174.482 ops/s
# Warmup Iteration  29: 1580431.865 ops/s
# Warmup Iteration  30: 1587359.869 ops/s
Iteration   1: 1582147.964 ops/s
Iteration   2: 1579844.121 ops/s
Iteration   3: 1583260.301 ops/s
Iteration   4: 1581004.210 ops/s
Iteration   5: 1577460.368 ops/s
Iteration   6: 1579818.546 ops/s
Iteration   7: 1586125.700 ops/s
Iteration   8: 1577639.040 ops/s
Iteration   9: 1585170.528 ops/s
Iteration  10: 1582432.057 ops/s
Iteration  11: 1583459.289 ops/s
Iteration  12: 1581614.409 ops/s
Iteration  13: 1586109.626 ops/s
Iteration  14: 1577728.314 ops/s
Iteration  15: 1571939.785 ops/s
Iteration  16: 1582475.322 ops/s
Iteration  17: 1587901.303 ops/s
Iteration  18: 1582205.192 ops/s
Iteration  19: 1586006.719 ops/s
Iteration  20: 1587028.250 ops/s
Iteration  21: 1581003.120 ops/s
Iteration  22: 1578048.239 ops/s
Iteration  23: 1578646.203 ops/s
Iteration  24: 1579037.845 ops/s
Iteration  25: 1576680.487 ops/s
Iteration  26: 1589104.922 ops/s
Iteration  27: 1583225.572 ops/s
Iteration  28: 1580389.902 ops/s
Iteration  29: 1577603.363 ops/s
Iteration  30: 1580237.674 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByInt":
  1581511.612 ±(99.9%) 2568.881 ops/s [Average]
  (min, avg, max) = (1571939.785, 1581511.612, 1589104.922), stdev = 3844.981
  CI (99.9%): [1578942.731, 1584080.494] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumByInt  thrpt   30  1581511.612 ± 2568.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 812403.871 ops/s
# Warmup Iteration   2: 1333273.930 ops/s
# Warmup Iteration   3: 1549865.402 ops/s
# Warmup Iteration   4: 1558407.545 ops/s
# Warmup Iteration   5: 1558102.093 ops/s
# Warmup Iteration   6: 1266729.899 ops/s
# Warmup Iteration   7: 1564292.290 ops/s
# Warmup Iteration   8: 1559884.493 ops/s
# Warmup Iteration   9: 1559589.742 ops/s
# Warmup Iteration  10: 1560310.046 ops/s
# Warmup Iteration  11: 1562322.249 ops/s
# Warmup Iteration  12: 1560363.391 ops/s
# Warmup Iteration  13: 1564297.288 ops/s
# Warmup Iteration  14: 1561404.096 ops/s
# Warmup Iteration  15: 1563099.702 ops/s
# Warmup Iteration  16: 1560548.927 ops/s
# Warmup Iteration  17: 1562222.629 ops/s
# Warmup Iteration  18: 1560014.572 ops/s
# Warmup Iteration  19: 1562710.114 ops/s
# Warmup Iteration  20: 1561005.304 ops/s
# Warmup Iteration  21: 1565471.360 ops/s
# Warmup Iteration  22: 1559040.473 ops/s
# Warmup Iteration  23: 1560795.904 ops/s
# Warmup Iteration  24: 1563248.473 ops/s
# Warmup Iteration  25: 1560065.529 ops/s
# Warmup Iteration  26: 1557338.809 ops/s
# Warmup Iteration  27: 1561678.335 ops/s
# Warmup Iteration  28: 1560233.853 ops/s
# Warmup Iteration  29: 1561385.665 ops/s
# Warmup Iteration  30: 1564122.824 ops/s
Iteration   1: 1558590.623 ops/s
Iteration   2: 1559055.810 ops/s
Iteration   3: 1561139.964 ops/s
Iteration   4: 1558302.718 ops/s
Iteration   5: 1552927.355 ops/s
Iteration   6: 1564680.203 ops/s
Iteration   7: 1557759.578 ops/s
Iteration   8: 1564733.713 ops/s
Iteration   9: 1562650.146 ops/s
Iteration  10: 1566101.171 ops/s
Iteration  11: 1564599.351 ops/s
Iteration  12: 1557234.322 ops/s
Iteration  13: 1561460.068 ops/s
Iteration  14: 1564253.405 ops/s
Iteration  15: 1563542.361 ops/s
Iteration  16: 1560150.953 ops/s
Iteration  17: 1567515.085 ops/s
Iteration  18: 1566303.998 ops/s
Iteration  19: 1556313.918 ops/s
Iteration  20: 1559025.496 ops/s
Iteration  21: 1561279.325 ops/s
Iteration  22: 1563282.266 ops/s
Iteration  23: 1571191.558 ops/s
Iteration  24: 1560406.406 ops/s
Iteration  25: 1557019.002 ops/s
Iteration  26: 1558918.419 ops/s
Iteration  27: 1567377.299 ops/s
Iteration  28: 1561529.203 ops/s
Iteration  29: 1560216.890 ops/s
Iteration  30: 1561899.974 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumByLong":
  1561648.686 ±(99.9%) 2631.148 ops/s [Average]
  (min, avg, max) = (1552927.355, 1561648.686, 1571191.558), stdev = 3938.178
  CI (99.9%): [1559017.538, 1564279.834] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumByLong  thrpt   30  1561648.686 ± 2631.148  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2357635.381 ops/s
# Warmup Iteration   2: 4473203.739 ops/s
# Warmup Iteration   3: 4841074.058 ops/s
# Warmup Iteration   4: 4851515.445 ops/s
# Warmup Iteration   5: 4007724.369 ops/s
# Warmup Iteration   6: 4872549.429 ops/s
# Warmup Iteration   7: 4870920.002 ops/s
# Warmup Iteration   8: 4871224.183 ops/s
# Warmup Iteration   9: 4874276.751 ops/s
# Warmup Iteration  10: 4862310.316 ops/s
# Warmup Iteration  11: 4879696.236 ops/s
# Warmup Iteration  12: 4858297.075 ops/s
# Warmup Iteration  13: 4864734.861 ops/s
# Warmup Iteration  14: 4860268.252 ops/s
# Warmup Iteration  15: 4857952.933 ops/s
# Warmup Iteration  16: 4870095.095 ops/s
# Warmup Iteration  17: 4871432.299 ops/s
# Warmup Iteration  18: 4859902.374 ops/s
# Warmup Iteration  19: 4862969.123 ops/s
# Warmup Iteration  20: 4864105.243 ops/s
# Warmup Iteration  21: 4863380.876 ops/s
# Warmup Iteration  22: 4883584.158 ops/s
# Warmup Iteration  23: 4880553.830 ops/s
# Warmup Iteration  24: 4876451.399 ops/s
# Warmup Iteration  25: 4868117.345 ops/s
# Warmup Iteration  26: 4876897.323 ops/s
# Warmup Iteration  27: 4879279.188 ops/s
# Warmup Iteration  28: 4876323.164 ops/s
# Warmup Iteration  29: 4868215.295 ops/s
# Warmup Iteration  30: 4863957.132 ops/s
Iteration   1: 4882722.152 ops/s
Iteration   2: 4834030.530 ops/s
Iteration   3: 4867212.736 ops/s
Iteration   4: 4858142.510 ops/s
Iteration   5: 4870980.768 ops/s
Iteration   6: 4882631.790 ops/s
Iteration   7: 4866769.720 ops/s
Iteration   8: 4858547.590 ops/s
Iteration   9: 4868466.624 ops/s
Iteration  10: 4872316.702 ops/s
Iteration  11: 4863693.819 ops/s
Iteration  12: 4871566.208 ops/s
Iteration  13: 4855547.148 ops/s
Iteration  14: 4889493.844 ops/s
Iteration  15: 4868403.578 ops/s
Iteration  16: 4876884.438 ops/s
Iteration  17: 4895704.734 ops/s
Iteration  18: 4882332.603 ops/s
Iteration  19: 4873552.802 ops/s
Iteration  20: 4886331.469 ops/s
Iteration  21: 4862710.142 ops/s
Iteration  22: 4858175.054 ops/s
Iteration  23: 4868839.342 ops/s
Iteration  24: 4863030.056 ops/s
Iteration  25: 4862903.174 ops/s
Iteration  26: 4878772.279 ops/s
Iteration  27: 4869582.849 ops/s
Iteration  28: 4879244.823 ops/s
Iteration  29: 4877244.176 ops/s
Iteration  30: 4862123.604 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDouble":
  4870265.242 ±(99.9%) 8093.165 ops/s [Average]
  (min, avg, max) = (4834030.530, 4870265.242, 4895704.734), stdev = 12113.469
  CI (99.9%): [4862172.077, 4878358.407] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumDouble  thrpt   30  4870265.242 ± 8093.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 77.365 ops/s
# Warmup Iteration   2: 85.789 ops/s
# Warmup Iteration   3: 117.243 ops/s
# Warmup Iteration   4: 117.679 ops/s
# Warmup Iteration   5: 117.043 ops/s
# Warmup Iteration   6: 116.676 ops/s
# Warmup Iteration   7: 117.162 ops/s
# Warmup Iteration   8: 116.982 ops/s
# Warmup Iteration   9: 116.923 ops/s
# Warmup Iteration  10: 117.646 ops/s
# Warmup Iteration  11: 99.856 ops/s
# Warmup Iteration  12: 117.810 ops/s
# Warmup Iteration  13: 117.303 ops/s
# Warmup Iteration  14: 118.167 ops/s
# Warmup Iteration  15: 117.714 ops/s
# Warmup Iteration  16: 117.432 ops/s
# Warmup Iteration  17: 117.781 ops/s
# Warmup Iteration  18: 117.454 ops/s
# Warmup Iteration  19: 117.034 ops/s
# Warmup Iteration  20: 117.314 ops/s
# Warmup Iteration  21: 117.318 ops/s
# Warmup Iteration  22: 117.883 ops/s
# Warmup Iteration  23: 117.671 ops/s
# Warmup Iteration  24: 113.903 ops/s
# Warmup Iteration  25: 109.212 ops/s
# Warmup Iteration  26: 108.253 ops/s
# Warmup Iteration  27: 108.700 ops/s
# Warmup Iteration  28: 108.487 ops/s
# Warmup Iteration  29: 109.028 ops/s
# Warmup Iteration  30: 108.200 ops/s
Iteration   1: 108.787 ops/s
Iteration   2: 108.179 ops/s
Iteration   3: 108.421 ops/s
Iteration   4: 108.626 ops/s
Iteration   5: 108.124 ops/s
Iteration   6: 108.347 ops/s
Iteration   7: 108.708 ops/s
Iteration   8: 108.577 ops/s
Iteration   9: 108.720 ops/s
Iteration  10: 108.832 ops/s
Iteration  11: 107.656 ops/s
Iteration  12: 107.633 ops/s
Iteration  13: 108.106 ops/s
Iteration  14: 109.230 ops/s
Iteration  15: 108.460 ops/s
Iteration  16: 108.912 ops/s
Iteration  17: 109.293 ops/s
Iteration  18: 107.961 ops/s
Iteration  19: 108.270 ops/s
Iteration  20: 108.945 ops/s
Iteration  21: 108.555 ops/s
Iteration  22: 108.733 ops/s
Iteration  23: 108.734 ops/s
Iteration  24: 109.024 ops/s
Iteration  25: 108.250 ops/s
Iteration  26: 108.918 ops/s
Iteration  27: 109.131 ops/s
Iteration  28: 109.273 ops/s
Iteration  29: 108.373 ops/s
Iteration  30: 109.055 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1":
  108.595 ±(99.9%) 0.297 ops/s [Average]
  (min, avg, max) = (107.633, 108.595, 109.293), stdev = 0.445
  CI (99.9%): [108.297, 108.892] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt    Score   Error  Units
HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding1  thrpt   30  108.595 ± 0.297  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.969 ops/s
# Warmup Iteration   2: 90.919 ops/s
# Warmup Iteration   3: 122.701 ops/s
# Warmup Iteration   4: 121.588 ops/s
# Warmup Iteration   5: 120.249 ops/s
# Warmup Iteration   6: 121.116 ops/s
# Warmup Iteration   7: 121.606 ops/s
# Warmup Iteration   8: 121.615 ops/s
# Warmup Iteration   9: 122.128 ops/s
# Warmup Iteration  10: 115.042 ops/s
# Warmup Iteration  11: 109.694 ops/s
# Warmup Iteration  12: 122.243 ops/s
# Warmup Iteration  13: 121.587 ops/s
# Warmup Iteration  14: 120.627 ops/s
# Warmup Iteration  15: 122.172 ops/s
# Warmup Iteration  16: 122.646 ops/s
# Warmup Iteration  17: 122.395 ops/s
# Warmup Iteration  18: 122.065 ops/s
# Warmup Iteration  19: 122.324 ops/s
# Warmup Iteration  20: 122.649 ops/s
# Warmup Iteration  21: 120.927 ops/s
# Warmup Iteration  22: 122.458 ops/s
# Warmup Iteration  23: 122.050 ops/s
# Warmup Iteration  24: 119.898 ops/s
# Warmup Iteration  25: 119.781 ops/s
# Warmup Iteration  26: 120.446 ops/s
# Warmup Iteration  27: 119.939 ops/s
# Warmup Iteration  28: 119.612 ops/s
# Warmup Iteration  29: 120.070 ops/s
# Warmup Iteration  30: 120.376 ops/s
Iteration   1: 120.280 ops/s
Iteration   2: 119.601 ops/s
Iteration   3: 119.939 ops/s
Iteration   4: 120.698 ops/s
Iteration   5: 120.027 ops/s
Iteration   6: 120.123 ops/s
Iteration   7: 119.759 ops/s
Iteration   8: 119.560 ops/s
Iteration   9: 119.551 ops/s
Iteration  10: 119.668 ops/s
Iteration  11: 120.834 ops/s
Iteration  12: 120.813 ops/s
Iteration  13: 120.361 ops/s
Iteration  14: 119.930 ops/s
Iteration  15: 119.477 ops/s
Iteration  16: 120.380 ops/s
Iteration  17: 120.434 ops/s
Iteration  18: 120.322 ops/s
Iteration  19: 120.312 ops/s
Iteration  20: 120.164 ops/s
Iteration  21: 119.235 ops/s
Iteration  22: 120.698 ops/s
Iteration  23: 120.652 ops/s
Iteration  24: 120.091 ops/s
Iteration  25: 120.111 ops/s
Iteration  26: 120.160 ops/s
Iteration  27: 119.679 ops/s
Iteration  28: 119.776 ops/s
Iteration  29: 119.861 ops/s
Iteration  30: 119.884 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2":
  120.079 ±(99.9%) 0.282 ops/s [Average]
  (min, avg, max) = (119.235, 120.079, 120.834), stdev = 0.422
  CI (99.9%): [119.797, 120.362] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt    Score   Error  Units
HashBagTest._Benchmark.benchmark_sumDoubleConsistentRounding2  thrpt   30  120.079 ± 0.282  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2346586.744 ops/s
# Warmup Iteration   2: 4376721.873 ops/s
# Warmup Iteration   3: 4729608.112 ops/s
# Warmup Iteration   4: 4771487.233 ops/s
# Warmup Iteration   5: 3956677.564 ops/s
# Warmup Iteration   6: 4728582.627 ops/s
# Warmup Iteration   7: 4773473.408 ops/s
# Warmup Iteration   8: 4777787.653 ops/s
# Warmup Iteration   9: 4768688.447 ops/s
# Warmup Iteration  10: 4776929.046 ops/s
# Warmup Iteration  11: 4780699.600 ops/s
# Warmup Iteration  12: 4764394.543 ops/s
# Warmup Iteration  13: 4760489.972 ops/s
# Warmup Iteration  14: 4753457.644 ops/s
# Warmup Iteration  15: 4771994.198 ops/s
# Warmup Iteration  16: 4749297.022 ops/s
# Warmup Iteration  17: 4766534.524 ops/s
# Warmup Iteration  18: 4767587.158 ops/s
# Warmup Iteration  19: 4768801.367 ops/s
# Warmup Iteration  20: 4754843.137 ops/s
# Warmup Iteration  21: 4773864.685 ops/s
# Warmup Iteration  22: 4771554.555 ops/s
# Warmup Iteration  23: 4757452.546 ops/s
# Warmup Iteration  24: 4778937.970 ops/s
# Warmup Iteration  25: 4778328.854 ops/s
# Warmup Iteration  26: 4764665.373 ops/s
# Warmup Iteration  27: 4763272.779 ops/s
# Warmup Iteration  28: 4770460.424 ops/s
# Warmup Iteration  29: 4761203.435 ops/s
# Warmup Iteration  30: 4766117.194 ops/s
Iteration   1: 4767058.257 ops/s
Iteration   2: 4769693.941 ops/s
Iteration   3: 4780861.622 ops/s
Iteration   4: 4767643.509 ops/s
Iteration   5: 4754150.239 ops/s
Iteration   6: 4774922.994 ops/s
Iteration   7: 4764629.795 ops/s
Iteration   8: 4780140.868 ops/s
Iteration   9: 4784663.080 ops/s
Iteration  10: 4790011.655 ops/s
Iteration  11: 4759494.742 ops/s
Iteration  12: 4779115.421 ops/s
Iteration  13: 4774104.156 ops/s
Iteration  14: 4768158.148 ops/s
Iteration  15: 4780335.790 ops/s
Iteration  16: 4767863.053 ops/s
Iteration  17: 4768221.740 ops/s
Iteration  18: 4768883.505 ops/s
Iteration  19: 4759726.468 ops/s
Iteration  20: 4783254.528 ops/s
Iteration  21: 4777826.839 ops/s
Iteration  22: 4774765.050 ops/s
Iteration  23: 4778639.974 ops/s
Iteration  24: 4773168.806 ops/s
Iteration  25: 4759445.603 ops/s
Iteration  26: 4788208.215 ops/s
Iteration  27: 4780824.848 ops/s
Iteration  28: 4773207.511 ops/s
Iteration  29: 4775685.063 ops/s
Iteration  30: 4773593.304 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloat":
  4773276.624 ±(99.9%) 5855.828 ops/s [Average]
  (min, avg, max) = (4754150.239, 4773276.624, 4790011.655), stdev = 8764.729
  CI (99.9%): [4767420.796, 4779132.452] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumFloat  thrpt   30  4773276.624 ± 5855.828  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 76.756 ops/s
# Warmup Iteration   2: 85.205 ops/s
# Warmup Iteration   3: 115.765 ops/s
# Warmup Iteration   4: 116.020 ops/s
# Warmup Iteration   5: 116.037 ops/s
# Warmup Iteration   6: 116.458 ops/s
# Warmup Iteration   7: 116.281 ops/s
# Warmup Iteration   8: 116.279 ops/s
# Warmup Iteration   9: 116.277 ops/s
# Warmup Iteration  10: 116.337 ops/s
# Warmup Iteration  11: 98.195 ops/s
# Warmup Iteration  12: 115.977 ops/s
# Warmup Iteration  13: 116.080 ops/s
# Warmup Iteration  14: 115.438 ops/s
# Warmup Iteration  15: 116.057 ops/s
# Warmup Iteration  16: 116.608 ops/s
# Warmup Iteration  17: 116.408 ops/s
# Warmup Iteration  18: 116.037 ops/s
# Warmup Iteration  19: 116.122 ops/s
# Warmup Iteration  20: 116.685 ops/s
# Warmup Iteration  21: 115.941 ops/s
# Warmup Iteration  22: 115.876 ops/s
# Warmup Iteration  23: 116.819 ops/s
# Warmup Iteration  24: 113.559 ops/s
# Warmup Iteration  25: 107.752 ops/s
# Warmup Iteration  26: 107.714 ops/s
# Warmup Iteration  27: 107.792 ops/s
# Warmup Iteration  28: 107.342 ops/s
# Warmup Iteration  29: 107.897 ops/s
# Warmup Iteration  30: 107.872 ops/s
Iteration   1: 107.697 ops/s
Iteration   2: 107.236 ops/s
Iteration   3: 107.941 ops/s
Iteration   4: 107.738 ops/s
Iteration   5: 107.730 ops/s
Iteration   6: 107.344 ops/s
Iteration   7: 107.468 ops/s
Iteration   8: 107.111 ops/s
Iteration   9: 107.706 ops/s
Iteration  10: 108.140 ops/s
Iteration  11: 108.137 ops/s
Iteration  12: 107.730 ops/s
Iteration  13: 108.570 ops/s
Iteration  14: 107.683 ops/s
Iteration  15: 107.441 ops/s
Iteration  16: 108.014 ops/s
Iteration  17: 108.106 ops/s
Iteration  18: 108.170 ops/s
Iteration  19: 108.065 ops/s
Iteration  20: 107.518 ops/s
Iteration  21: 107.501 ops/s
Iteration  22: 107.376 ops/s
Iteration  23: 107.557 ops/s
Iteration  24: 107.727 ops/s
Iteration  25: 107.637 ops/s
Iteration  26: 108.039 ops/s
Iteration  27: 107.913 ops/s
Iteration  28: 106.921 ops/s
Iteration  29: 107.550 ops/s
Iteration  30: 107.876 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1":
  107.721 ±(99.9%) 0.237 ops/s [Average]
  (min, avg, max) = (106.921, 107.721, 108.570), stdev = 0.354
  CI (99.9%): [107.485, 107.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt    Score   Error  Units
HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding1  thrpt   30  107.721 ± 0.237  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79.978 ops/s
# Warmup Iteration   2: 90.459 ops/s
# Warmup Iteration   3: 123.470 ops/s
# Warmup Iteration   4: 123.408 ops/s
# Warmup Iteration   5: 122.260 ops/s
# Warmup Iteration   6: 123.131 ops/s
# Warmup Iteration   7: 123.134 ops/s
# Warmup Iteration   8: 123.336 ops/s
# Warmup Iteration   9: 122.754 ops/s
# Warmup Iteration  10: 113.355 ops/s
# Warmup Iteration  11: 114.736 ops/s
# Warmup Iteration  12: 123.287 ops/s
# Warmup Iteration  13: 123.445 ops/s
# Warmup Iteration  14: 123.459 ops/s
# Warmup Iteration  15: 123.389 ops/s
# Warmup Iteration  16: 123.251 ops/s
# Warmup Iteration  17: 123.315 ops/s
# Warmup Iteration  18: 122.961 ops/s
# Warmup Iteration  19: 122.322 ops/s
# Warmup Iteration  20: 123.335 ops/s
# Warmup Iteration  21: 123.175 ops/s
# Warmup Iteration  22: 123.176 ops/s
# Warmup Iteration  23: 121.691 ops/s
# Warmup Iteration  24: 121.020 ops/s
# Warmup Iteration  25: 120.137 ops/s
# Warmup Iteration  26: 120.451 ops/s
# Warmup Iteration  27: 120.691 ops/s
# Warmup Iteration  28: 120.964 ops/s
# Warmup Iteration  29: 120.481 ops/s
# Warmup Iteration  30: 120.923 ops/s
Iteration   1: 121.409 ops/s
Iteration   2: 121.455 ops/s
Iteration   3: 119.866 ops/s
Iteration   4: 119.215 ops/s
Iteration   5: 120.940 ops/s
Iteration   6: 120.349 ops/s
Iteration   7: 120.191 ops/s
Iteration   8: 121.414 ops/s
Iteration   9: 121.292 ops/s
Iteration  10: 120.506 ops/s
Iteration  11: 121.206 ops/s
Iteration  12: 121.279 ops/s
Iteration  13: 121.322 ops/s
Iteration  14: 120.447 ops/s
Iteration  15: 120.942 ops/s
Iteration  16: 121.402 ops/s
Iteration  17: 120.761 ops/s
Iteration  18: 121.166 ops/s
Iteration  19: 121.314 ops/s
Iteration  20: 121.792 ops/s
Iteration  21: 121.429 ops/s
Iteration  22: 120.716 ops/s
Iteration  23: 121.292 ops/s
Iteration  24: 120.384 ops/s
Iteration  25: 121.775 ops/s
Iteration  26: 121.695 ops/s
Iteration  27: 121.726 ops/s
Iteration  28: 121.104 ops/s
Iteration  29: 121.204 ops/s
Iteration  30: 121.627 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2":
  121.041 ±(99.9%) 0.405 ops/s [Average]
  (min, avg, max) = (119.215, 121.041, 121.792), stdev = 0.607
  CI (99.9%): [120.635, 121.446] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt    Score   Error  Units
HashBagTest._Benchmark.benchmark_sumFloatConsistentRounding2  thrpt   30  121.041 ± 0.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumInteger$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumInteger

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2502591.888 ops/s
# Warmup Iteration   2: 4796276.964 ops/s
# Warmup Iteration   3: 5220449.994 ops/s
# Warmup Iteration   4: 5253497.972 ops/s
# Warmup Iteration   5: 4302664.791 ops/s
# Warmup Iteration   6: 5280860.863 ops/s
# Warmup Iteration   7: 5274992.082 ops/s
# Warmup Iteration   8: 5259612.607 ops/s
# Warmup Iteration   9: 5267528.379 ops/s
# Warmup Iteration  10: 5284891.756 ops/s
# Warmup Iteration  11: 5287891.033 ops/s
# Warmup Iteration  12: 5276246.256 ops/s
# Warmup Iteration  13: 5263095.044 ops/s
# Warmup Iteration  14: 5257155.213 ops/s
# Warmup Iteration  15: 5272947.716 ops/s
# Warmup Iteration  16: 5262993.618 ops/s
# Warmup Iteration  17: 5252439.558 ops/s
# Warmup Iteration  18: 5270222.801 ops/s
# Warmup Iteration  19: 5278635.518 ops/s
# Warmup Iteration  20: 5269079.452 ops/s
# Warmup Iteration  21: 5268461.371 ops/s
# Warmup Iteration  22: 5270198.729 ops/s
# Warmup Iteration  23: 5275473.960 ops/s
# Warmup Iteration  24: 5268756.730 ops/s
# Warmup Iteration  25: 5267736.320 ops/s
# Warmup Iteration  26: 5255571.576 ops/s
# Warmup Iteration  27: 5269118.328 ops/s
# Warmup Iteration  28: 5272206.638 ops/s
# Warmup Iteration  29: 5260048.459 ops/s
# Warmup Iteration  30: 5264292.718 ops/s
Iteration   1: 5251232.233 ops/s
Iteration   2: 5245085.660 ops/s
Iteration   3: 5273635.280 ops/s
Iteration   4: 5273711.628 ops/s
Iteration   5: 5261989.200 ops/s
Iteration   6: 5250089.319 ops/s
Iteration   7: 5267280.431 ops/s
Iteration   8: 5252709.264 ops/s
Iteration   9: 5278210.227 ops/s
Iteration  10: 5280351.146 ops/s
Iteration  11: 5251324.348 ops/s
Iteration  12: 5280538.875 ops/s
Iteration  13: 5269757.217 ops/s
Iteration  14: 5267956.122 ops/s
Iteration  15: 5262376.756 ops/s
Iteration  16: 5271081.777 ops/s
Iteration  17: 5264893.112 ops/s
Iteration  18: 5252713.035 ops/s
Iteration  19: 5265838.074 ops/s
Iteration  20: 5273282.464 ops/s
Iteration  21: 5270054.191 ops/s
Iteration  22: 5265698.892 ops/s
Iteration  23: 5254591.316 ops/s
Iteration  24: 5273137.395 ops/s
Iteration  25: 5276838.100 ops/s
Iteration  26: 5277569.770 ops/s
Iteration  27: 5274039.584 ops/s
Iteration  28: 5268364.997 ops/s
Iteration  29: 5266288.552 ops/s
Iteration  30: 5274425.167 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumInteger":
  5266502.138 ±(99.9%) 6649.941 ops/s [Average]
  (min, avg, max) = (5245085.660, 5266502.138, 5280538.875), stdev = 9953.319
  CI (99.9%): [5259852.197, 5273152.078] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_sumInteger  thrpt   30  5266502.138 ± 6649.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2496276.111 ops/s
# Warmup Iteration   2: 4672187.927 ops/s
# Warmup Iteration   3: 5118971.165 ops/s
# Warmup Iteration   4: 5150888.634 ops/s
# Warmup Iteration   5: 4197219.684 ops/s
# Warmup Iteration   6: 5148869.234 ops/s
# Warmup Iteration   7: 5165756.257 ops/s
# Warmup Iteration   8: 5144761.746 ops/s
# Warmup Iteration   9: 5144338.982 ops/s
# Warmup Iteration  10: 5158815.586 ops/s
# Warmup Iteration  11: 5147568.972 ops/s
# Warmup Iteration  12: 5135370.934 ops/s
# Warmup Iteration  13: 5144858.682 ops/s
# Warmup Iteration  14: 5158393.751 ops/s
# Warmup Iteration  15: 5144150.085 ops/s
# Warmup Iteration  16: 5143806.286 ops/s
# Warmup Iteration  17: 5152946.600 ops/s
# Warmup Iteration  18: 5163541.124 ops/s
# Warmup Iteration  19: 5144478.943 ops/s
# Warmup Iteration  20: 5161250.852 ops/s
# Warmup Iteration  21: 5155918.712 ops/s
# Warmup Iteration  22: 5139209.651 ops/s
# Warmup Iteration  23: 5153371.406 ops/s
# Warmup Iteration  24: 5151458.845 ops/s
# Warmup Iteration  25: 5143116.745 ops/s
# Warmup Iteration  26: 5067094.364 ops/s
# Warmup Iteration  27: 5144149.391 ops/s
# Warmup Iteration  28: 5155371.825 ops/s
# Warmup Iteration  29: 5139150.365 ops/s
# Warmup Iteration  30: 5151393.320 ops/s
Iteration   1: 5143482.823 ops/s
Iteration   2: 5143889.322 ops/s
Iteration   3: 5141003.684 ops/s
Iteration   4: 5143634.778 ops/s
Iteration   5: 5149039.487 ops/s
Iteration   6: 5153153.170 ops/s
Iteration   7: 5135236.483 ops/s
Iteration   8: 5149611.939 ops/s
Iteration   9: 5099118.404 ops/s
Iteration  10: 5136620.493 ops/s
Iteration  11: 5077895.234 ops/s
Iteration  12: 5114967.661 ops/s
Iteration  13: 5133375.927 ops/s
Iteration  14: 5132362.130 ops/s
Iteration  15: 5142545.787 ops/s
Iteration  16: 5145963.149 ops/s
Iteration  17: 5124723.613 ops/s
Iteration  18: 5123889.435 ops/s
Iteration  19: 5129243.840 ops/s
Iteration  20: 5147306.136 ops/s
Iteration  21: 5141542.929 ops/s
Iteration  22: 5148757.672 ops/s
Iteration  23: 5154733.819 ops/s
Iteration  24: 5144776.180 ops/s
Iteration  25: 5149733.787 ops/s
Iteration  26: 5148630.809 ops/s
Iteration  27: 5158552.163 ops/s
Iteration  28: 5063724.128 ops/s
Iteration  29: 5129343.588 ops/s
Iteration  30: 5145073.275 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_sumLong":
  5135064.395 ±(99.9%) 14384.512 ops/s [Average]
  (min, avg, max) = (5063724.128, 5135064.395, 5158552.163), stdev = 21530.062
  CI (99.9%): [5120679.883, 5149448.907] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_sumLong  thrpt   30  5135064.395 ± 14384.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2413274.561 ops/s
# Warmup Iteration   2: 4553173.408 ops/s
# Warmup Iteration   3: 4983127.372 ops/s
# Warmup Iteration   4: 5018720.410 ops/s
# Warmup Iteration   5: 4115555.615 ops/s
# Warmup Iteration   6: 5045662.816 ops/s
# Warmup Iteration   7: 5032060.040 ops/s
# Warmup Iteration   8: 5031379.051 ops/s
# Warmup Iteration   9: 5046077.101 ops/s
# Warmup Iteration  10: 5028397.930 ops/s
# Warmup Iteration  11: 5022159.603 ops/s
# Warmup Iteration  12: 5025152.801 ops/s
# Warmup Iteration  13: 5042728.559 ops/s
# Warmup Iteration  14: 5030256.325 ops/s
# Warmup Iteration  15: 5030787.114 ops/s
# Warmup Iteration  16: 5028177.561 ops/s
# Warmup Iteration  17: 5028775.979 ops/s
# Warmup Iteration  18: 5035157.253 ops/s
# Warmup Iteration  19: 5044330.358 ops/s
# Warmup Iteration  20: 5027553.005 ops/s
# Warmup Iteration  21: 5045917.002 ops/s
# Warmup Iteration  22: 5037195.569 ops/s
# Warmup Iteration  23: 5033851.005 ops/s
# Warmup Iteration  24: 5035626.107 ops/s
# Warmup Iteration  25: 5039757.524 ops/s
# Warmup Iteration  26: 5054677.763 ops/s
# Warmup Iteration  27: 5031528.742 ops/s
# Warmup Iteration  28: 5038349.079 ops/s
# Warmup Iteration  29: 5033828.383 ops/s
# Warmup Iteration  30: 5028075.272 ops/s
Iteration   1: 5029356.096 ops/s
Iteration   2: 5013641.565 ops/s
Iteration   3: 5026970.996 ops/s
Iteration   4: 5044142.032 ops/s
Iteration   5: 5030156.557 ops/s
Iteration   6: 5037251.810 ops/s
Iteration   7: 5044905.520 ops/s
Iteration   8: 5025740.469 ops/s
Iteration   9: 5032716.466 ops/s
Iteration  10: 5048002.535 ops/s
Iteration  11: 5026365.013 ops/s
Iteration  12: 5030665.084 ops/s
Iteration  13: 5038037.730 ops/s
Iteration  14: 5027315.896 ops/s
Iteration  15: 4991618.432 ops/s
Iteration  16: 5045122.945 ops/s
Iteration  17: 5046617.270 ops/s
Iteration  18: 5043381.876 ops/s
Iteration  19: 5031003.102 ops/s
Iteration  20: 5015548.192 ops/s
Iteration  21: 5026982.168 ops/s
Iteration  22: 5052019.678 ops/s
Iteration  23: 5030781.023 ops/s
Iteration  24: 5033968.867 ops/s
Iteration  25: 5038648.945 ops/s
Iteration  26: 5040888.159 ops/s
Iteration  27: 5031370.770 ops/s
Iteration  28: 5027001.508 ops/s
Iteration  29: 5044542.816 ops/s
Iteration  30: 5041126.417 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeDouble":
  5033196.331 ±(99.9%) 8132.985 ops/s [Average]
  (min, avg, max) = (4991618.432, 5033196.331, 5052019.678), stdev = 12173.070
  CI (99.9%): [5025063.346, 5041329.316] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_summarizeDouble  thrpt   30  5033196.331 ± 8132.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2427820.647 ops/s
# Warmup Iteration   2: 4556841.016 ops/s
# Warmup Iteration   3: 5000197.031 ops/s
# Warmup Iteration   4: 5013365.309 ops/s
# Warmup Iteration   5: 4121145.356 ops/s
# Warmup Iteration   6: 5039238.369 ops/s
# Warmup Iteration   7: 5029473.681 ops/s
# Warmup Iteration   8: 5047699.517 ops/s
# Warmup Iteration   9: 5043522.499 ops/s
# Warmup Iteration  10: 5038147.152 ops/s
# Warmup Iteration  11: 5040040.417 ops/s
# Warmup Iteration  12: 5025259.648 ops/s
# Warmup Iteration  13: 5046336.614 ops/s
# Warmup Iteration  14: 5042493.574 ops/s
# Warmup Iteration  15: 5032628.492 ops/s
# Warmup Iteration  16: 5040994.514 ops/s
# Warmup Iteration  17: 5031364.714 ops/s
# Warmup Iteration  18: 5041804.132 ops/s
# Warmup Iteration  19: 5041658.671 ops/s
# Warmup Iteration  20: 5044747.744 ops/s
# Warmup Iteration  21: 5036020.662 ops/s
# Warmup Iteration  22: 5023128.347 ops/s
# Warmup Iteration  23: 5037065.151 ops/s
# Warmup Iteration  24: 5054528.383 ops/s
# Warmup Iteration  25: 5037675.154 ops/s
# Warmup Iteration  26: 5031809.717 ops/s
# Warmup Iteration  27: 5044878.525 ops/s
# Warmup Iteration  28: 5049149.180 ops/s
# Warmup Iteration  29: 5029273.824 ops/s
# Warmup Iteration  30: 5033517.887 ops/s
Iteration   1: 5043856.134 ops/s
Iteration   2: 5052030.832 ops/s
Iteration   3: 5004910.676 ops/s
Iteration   4: 5035884.987 ops/s
Iteration   5: 5054081.615 ops/s
Iteration   6: 5048923.257 ops/s
Iteration   7: 5045812.085 ops/s
Iteration   8: 5053168.090 ops/s
Iteration   9: 5033644.608 ops/s
Iteration  10: 5045824.525 ops/s
Iteration  11: 5021556.509 ops/s
Iteration  12: 5034461.968 ops/s
Iteration  13: 5051521.291 ops/s
Iteration  14: 5049705.734 ops/s
Iteration  15: 5048275.331 ops/s
Iteration  16: 5034967.021 ops/s
Iteration  17: 5028064.822 ops/s
Iteration  18: 5027142.055 ops/s
Iteration  19: 5039961.957 ops/s
Iteration  20: 5039384.573 ops/s
Iteration  21: 5033938.499 ops/s
Iteration  22: 5044410.898 ops/s
Iteration  23: 5038220.680 ops/s
Iteration  24: 5028006.867 ops/s
Iteration  25: 5034771.377 ops/s
Iteration  26: 5039088.766 ops/s
Iteration  27: 5049615.327 ops/s
Iteration  28: 5059982.047 ops/s
Iteration  29: 5052609.675 ops/s
Iteration  30: 5052921.054 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeFloat":
  5040891.442 ±(99.9%) 7838.913 ops/s [Average]
  (min, avg, max) = (5004910.676, 5040891.442, 5059982.047), stdev = 11732.917
  CI (99.9%): [5033052.529, 5048730.355] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_summarizeFloat  thrpt   30  5040891.442 ± 7838.913  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2626742.235 ops/s
# Warmup Iteration   2: 5158336.159 ops/s
# Warmup Iteration   3: 5530450.208 ops/s
# Warmup Iteration   4: 5558085.456 ops/s
# Warmup Iteration   5: 4557639.152 ops/s
# Warmup Iteration   6: 5575552.194 ops/s
# Warmup Iteration   7: 5573973.042 ops/s
# Warmup Iteration   8: 5569696.828 ops/s
# Warmup Iteration   9: 5576033.285 ops/s
# Warmup Iteration  10: 5546712.158 ops/s
# Warmup Iteration  11: 5572148.235 ops/s
# Warmup Iteration  12: 5573298.777 ops/s
# Warmup Iteration  13: 5570696.672 ops/s
# Warmup Iteration  14: 5545785.357 ops/s
# Warmup Iteration  15: 5572516.516 ops/s
# Warmup Iteration  16: 5579040.869 ops/s
# Warmup Iteration  17: 5569503.326 ops/s
# Warmup Iteration  18: 5566406.534 ops/s
# Warmup Iteration  19: 5565996.258 ops/s
# Warmup Iteration  20: 5579399.998 ops/s
# Warmup Iteration  21: 5572228.144 ops/s
# Warmup Iteration  22: 5583547.262 ops/s
# Warmup Iteration  23: 5578288.588 ops/s
# Warmup Iteration  24: 5549716.564 ops/s
# Warmup Iteration  25: 5571163.499 ops/s
# Warmup Iteration  26: 5567202.731 ops/s
# Warmup Iteration  27: 5578458.160 ops/s
# Warmup Iteration  28: 5575254.914 ops/s
# Warmup Iteration  29: 5560793.647 ops/s
# Warmup Iteration  30: 5577607.962 ops/s
Iteration   1: 5547835.776 ops/s
Iteration   2: 5570438.387 ops/s
Iteration   3: 5577131.282 ops/s
Iteration   4: 5581579.000 ops/s
Iteration   5: 5562083.905 ops/s
Iteration   6: 5571645.360 ops/s
Iteration   7: 5569010.662 ops/s
Iteration   8: 5561954.504 ops/s
Iteration   9: 5573583.726 ops/s
Iteration  10: 5583241.524 ops/s
Iteration  11: 5565412.163 ops/s
Iteration  12: 5564785.361 ops/s
Iteration  13: 5555080.060 ops/s
Iteration  14: 5564889.213 ops/s
Iteration  15: 5569208.052 ops/s
Iteration  16: 5550861.823 ops/s
Iteration  17: 5553657.880 ops/s
Iteration  18: 5547603.314 ops/s
Iteration  19: 5552466.890 ops/s
Iteration  20: 5563048.390 ops/s
Iteration  21: 5565599.500 ops/s
Iteration  22: 5586361.621 ops/s
Iteration  23: 5560320.382 ops/s
Iteration  24: 5576633.581 ops/s
Iteration  25: 5589837.747 ops/s
Iteration  26: 5575882.269 ops/s
Iteration  27: 5567197.937 ops/s
Iteration  28: 5574083.409 ops/s
Iteration  29: 5570155.518 ops/s
Iteration  30: 5553915.196 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeInt":
  5566850.148 ±(99.9%) 7467.087 ops/s [Average]
  (min, avg, max) = (5547603.314, 5566850.148, 5589837.747), stdev = 11176.386
  CI (99.9%): [5559383.060, 5574317.235] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_summarizeInt  thrpt   30  5566850.148 ± 7467.087  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2528381.545 ops/s
# Warmup Iteration   2: 4799364.961 ops/s
# Warmup Iteration   3: 5158418.901 ops/s
# Warmup Iteration   4: 5191329.040 ops/s
# Warmup Iteration   5: 4257830.613 ops/s
# Warmup Iteration   6: 5229555.800 ops/s
# Warmup Iteration   7: 5239107.858 ops/s
# Warmup Iteration   8: 5230313.869 ops/s
# Warmup Iteration   9: 5237768.945 ops/s
# Warmup Iteration  10: 5213808.924 ops/s
# Warmup Iteration  11: 5238845.866 ops/s
# Warmup Iteration  12: 5239710.597 ops/s
# Warmup Iteration  13: 5242940.017 ops/s
# Warmup Iteration  14: 5237919.721 ops/s
# Warmup Iteration  15: 5208418.265 ops/s
# Warmup Iteration  16: 5230578.383 ops/s
# Warmup Iteration  17: 5223536.161 ops/s
# Warmup Iteration  18: 5226116.697 ops/s
# Warmup Iteration  19: 5218295.308 ops/s
# Warmup Iteration  20: 5225276.972 ops/s
# Warmup Iteration  21: 5220753.464 ops/s
# Warmup Iteration  22: 5226169.477 ops/s
# Warmup Iteration  23: 5250827.386 ops/s
# Warmup Iteration  24: 5230168.830 ops/s
# Warmup Iteration  25: 5245676.502 ops/s
# Warmup Iteration  26: 5238504.827 ops/s
# Warmup Iteration  27: 5234608.769 ops/s
# Warmup Iteration  28: 5227466.979 ops/s
# Warmup Iteration  29: 5220033.968 ops/s
# Warmup Iteration  30: 5225273.448 ops/s
Iteration   1: 5230326.340 ops/s
Iteration   2: 5238779.455 ops/s
Iteration   3: 5198960.774 ops/s
Iteration   4: 5215287.336 ops/s
Iteration   5: 5227563.052 ops/s
Iteration   6: 5226036.899 ops/s
Iteration   7: 5217054.136 ops/s
Iteration   8: 5224019.716 ops/s
Iteration   9: 5223946.044 ops/s
Iteration  10: 5239247.134 ops/s
Iteration  11: 5227476.753 ops/s
Iteration  12: 5246537.179 ops/s
Iteration  13: 5241218.348 ops/s
Iteration  14: 5237951.406 ops/s
Iteration  15: 5241385.972 ops/s
Iteration  16: 5232147.202 ops/s
Iteration  17: 5241279.354 ops/s
Iteration  18: 5226886.327 ops/s
Iteration  19: 5228085.786 ops/s
Iteration  20: 5237419.330 ops/s
Iteration  21: 5220617.657 ops/s
Iteration  22: 5239238.273 ops/s
Iteration  23: 5232899.107 ops/s
Iteration  24: 5228347.325 ops/s
Iteration  25: 5229589.868 ops/s
Iteration  26: 5236230.281 ops/s
Iteration  27: 5247170.923 ops/s
Iteration  28: 5192644.282 ops/s
Iteration  29: 5234976.453 ops/s
Iteration  30: 5221985.822 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_summarizeLong":
  5229510.284 ±(99.9%) 8228.289 ops/s [Average]
  (min, avg, max) = (5192644.282, 5229510.284, 5247170.923), stdev = 12315.717
  CI (99.9%): [5221281.995, 5237738.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_summarizeLong  thrpt   30  5229510.284 ± 8228.289  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1712834.105 ops/s
# Warmup Iteration   2: 3150416.119 ops/s
# Warmup Iteration   3: 3573859.157 ops/s
# Warmup Iteration   4: 3590126.735 ops/s
# Warmup Iteration   5: 3281223.676 ops/s
# Warmup Iteration   6: 3267553.848 ops/s
# Warmup Iteration   7: 3597042.437 ops/s
# Warmup Iteration   8: 3600458.529 ops/s
# Warmup Iteration   9: 3605823.432 ops/s
# Warmup Iteration  10: 3593081.459 ops/s
# Warmup Iteration  11: 3602243.913 ops/s
# Warmup Iteration  12: 3597515.338 ops/s
# Warmup Iteration  13: 3599024.581 ops/s
# Warmup Iteration  14: 3597701.501 ops/s
# Warmup Iteration  15: 3610681.011 ops/s
# Warmup Iteration  16: 3605890.077 ops/s
# Warmup Iteration  17: 3591350.901 ops/s
# Warmup Iteration  18: 3607232.715 ops/s
# Warmup Iteration  19: 3605694.431 ops/s
# Warmup Iteration  20: 3588058.605 ops/s
# Warmup Iteration  21: 3608788.133 ops/s
# Warmup Iteration  22: 3603564.567 ops/s
# Warmup Iteration  23: 3596525.513 ops/s
# Warmup Iteration  24: 3600852.269 ops/s
# Warmup Iteration  25: 3599585.007 ops/s
# Warmup Iteration  26: 3599779.821 ops/s
# Warmup Iteration  27: 3593034.840 ops/s
# Warmup Iteration  28: 3606403.364 ops/s
# Warmup Iteration  29: 3610280.052 ops/s
# Warmup Iteration  30: 3590783.774 ops/s
Iteration   1: 3609700.965 ops/s
Iteration   2: 3598322.889 ops/s
Iteration   3: 3601802.055 ops/s
Iteration   4: 3607325.647 ops/s
Iteration   5: 3604954.682 ops/s
Iteration   6: 3603420.325 ops/s
Iteration   7: 3596231.904 ops/s
Iteration   8: 3604075.594 ops/s
Iteration   9: 3612645.028 ops/s
Iteration  10: 3601565.628 ops/s
Iteration  11: 3597755.070 ops/s
Iteration  12: 3598197.660 ops/s
Iteration  13: 3590737.974 ops/s
Iteration  14: 3623950.829 ops/s
Iteration  15: 3602187.230 ops/s
Iteration  16: 3604691.059 ops/s
Iteration  17: 3604225.595 ops/s
Iteration  18: 3604362.821 ops/s
Iteration  19: 3596279.009 ops/s
Iteration  20: 3603564.550 ops/s
Iteration  21: 3602773.186 ops/s
Iteration  22: 3600343.721 ops/s
Iteration  23: 3603853.028 ops/s
Iteration  24: 3602095.626 ops/s
Iteration  25: 3612083.545 ops/s
Iteration  26: 3601405.458 ops/s
Iteration  27: 3603262.256 ops/s
Iteration  28: 3610226.237 ops/s
Iteration  29: 3603925.294 ops/s
Iteration  30: 3615540.342 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_tap":
  3604050.173 ±(99.9%) 4290.997 ops/s [Average]
  (min, avg, max) = (3590737.974, 3604050.173, 3623950.829), stdev = 6422.563
  CI (99.9%): [3599759.176, 3608341.171] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_tap  thrpt   30  3604050.173 ± 4290.997  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 12048627.499 ops/s
# Warmup Iteration   2: 19810460.630 ops/s
# Warmup Iteration   3: 23496214.413 ops/s
# Warmup Iteration   4: 23529193.162 ops/s
# Warmup Iteration   5: 23574035.535 ops/s
# Warmup Iteration   6: 23459883.903 ops/s
# Warmup Iteration   7: 23524445.658 ops/s
# Warmup Iteration   8: 23546444.205 ops/s
# Warmup Iteration   9: 23497353.202 ops/s
# Warmup Iteration  10: 23557638.498 ops/s
# Warmup Iteration  11: 23603599.933 ops/s
# Warmup Iteration  12: 23509168.687 ops/s
# Warmup Iteration  13: 23385553.675 ops/s
# Warmup Iteration  14: 23446115.781 ops/s
# Warmup Iteration  15: 23480472.162 ops/s
# Warmup Iteration  16: 23439329.509 ops/s
# Warmup Iteration  17: 23593525.145 ops/s
# Warmup Iteration  18: 23568746.174 ops/s
# Warmup Iteration  19: 23382604.742 ops/s
# Warmup Iteration  20: 23533792.919 ops/s
# Warmup Iteration  21: 23600470.230 ops/s
# Warmup Iteration  22: 23377732.330 ops/s
# Warmup Iteration  23: 23382421.943 ops/s
# Warmup Iteration  24: 23426313.442 ops/s
# Warmup Iteration  25: 23506727.338 ops/s
# Warmup Iteration  26: 23443095.055 ops/s
# Warmup Iteration  27: 23463194.050 ops/s
# Warmup Iteration  28: 23454368.899 ops/s
# Warmup Iteration  29: 23341664.888 ops/s
# Warmup Iteration  30: 23528594.447 ops/s
Iteration   1: 23470893.473 ops/s
Iteration   2: 23503426.153 ops/s
Iteration   3: 23473976.908 ops/s
Iteration   4: 23469645.361 ops/s
Iteration   5: 23398865.523 ops/s
Iteration   6: 23376583.286 ops/s
Iteration   7: 23228398.549 ops/s
Iteration   8: 23485327.506 ops/s
Iteration   9: 23514373.672 ops/s
Iteration  10: 23466910.866 ops/s
Iteration  11: 23386879.760 ops/s
Iteration  12: 23421992.764 ops/s
Iteration  13: 23519330.106 ops/s
Iteration  14: 23686783.247 ops/s
Iteration  15: 23633830.382 ops/s
Iteration  16: 23535975.288 ops/s
Iteration  17: 23433881.735 ops/s
Iteration  18: 23401607.602 ops/s
Iteration  19: 23585985.902 ops/s
Iteration  20: 23582156.763 ops/s
Iteration  21: 23621582.989 ops/s
Iteration  22: 23544416.990 ops/s
Iteration  23: 23563081.835 ops/s
Iteration  24: 23413407.433 ops/s
Iteration  25: 23341060.331 ops/s
Iteration  26: 23523905.130 ops/s
Iteration  27: 23456592.533 ops/s
Iteration  28: 23408126.661 ops/s
Iteration  29: 23514002.901 ops/s
Iteration  30: 23551555.255 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewCollection":
  23483818.563 ±(99.9%) 63762.303 ops/s [Average]
  (min, avg, max) = (23228398.549, 23483818.563, 23686783.247), stdev = 95436.421
  CI (99.9%): [23420056.260, 23547580.866] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score       Error  Units
HashBagTest._Benchmark.benchmark_testNewCollection  thrpt   30  23483818.563 ± 63762.303  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2890875.465 ops/s
# Warmup Iteration   2: 6108730.464 ops/s
# Warmup Iteration   3: 5276118.180 ops/s
# Warmup Iteration   4: 6280553.401 ops/s
# Warmup Iteration   5: 6259454.735 ops/s
# Warmup Iteration   6: 6292739.755 ops/s
# Warmup Iteration   7: 6296058.286 ops/s
# Warmup Iteration   8: 6278474.104 ops/s
# Warmup Iteration   9: 6279283.372 ops/s
# Warmup Iteration  10: 6277678.841 ops/s
# Warmup Iteration  11: 6293141.265 ops/s
# Warmup Iteration  12: 6264535.431 ops/s
# Warmup Iteration  13: 6251310.174 ops/s
# Warmup Iteration  14: 6258625.476 ops/s
# Warmup Iteration  15: 6290039.757 ops/s
# Warmup Iteration  16: 6269897.746 ops/s
# Warmup Iteration  17: 6279145.725 ops/s
# Warmup Iteration  18: 6270468.610 ops/s
# Warmup Iteration  19: 6290305.014 ops/s
# Warmup Iteration  20: 6268484.460 ops/s
# Warmup Iteration  21: 6292409.682 ops/s
# Warmup Iteration  22: 6307144.986 ops/s
# Warmup Iteration  23: 6289788.062 ops/s
# Warmup Iteration  24: 6268469.711 ops/s
# Warmup Iteration  25: 6274472.146 ops/s
# Warmup Iteration  26: 6268841.736 ops/s
# Warmup Iteration  27: 6284378.971 ops/s
# Warmup Iteration  28: 6285474.425 ops/s
# Warmup Iteration  29: 6286558.973 ops/s
# Warmup Iteration  30: 6269459.475 ops/s
Iteration   1: 6280709.479 ops/s
Iteration   2: 6288989.529 ops/s
Iteration   3: 6312084.708 ops/s
Iteration   4: 6310255.815 ops/s
Iteration   5: 6298406.462 ops/s
Iteration   6: 6294392.917 ops/s
Iteration   7: 6304264.644 ops/s
Iteration   8: 6299015.397 ops/s
Iteration   9: 6299645.471 ops/s
Iteration  10: 6288093.768 ops/s
Iteration  11: 6311833.858 ops/s
Iteration  12: 6266155.409 ops/s
Iteration  13: 6276055.014 ops/s
Iteration  14: 6265600.669 ops/s
Iteration  15: 6309285.975 ops/s
Iteration  16: 6295608.387 ops/s
Iteration  17: 6259242.017 ops/s
Iteration  18: 6306660.830 ops/s
Iteration  19: 6287042.942 ops/s
Iteration  20: 6303617.814 ops/s
Iteration  21: 6251355.505 ops/s
Iteration  22: 6303413.364 ops/s
Iteration  23: 6298049.063 ops/s
Iteration  24: 6260685.317 ops/s
Iteration  25: 6280028.457 ops/s
Iteration  26: 6289725.936 ops/s
Iteration  27: 6297082.253 ops/s
Iteration  28: 6228161.986 ops/s
Iteration  29: 6266120.858 ops/s
Iteration  30: 6298801.726 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWith":
  6287679.519 ±(99.9%) 13686.766 ops/s [Average]
  (min, avg, max) = (6228161.986, 6287679.519, 6312084.708), stdev = 20485.709
  CI (99.9%): [6273992.753, 6301366.285] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_testNewWith  thrpt   30  6287679.519 ± 13686.766  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithVarArgs$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithVarArgs

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1459658.453 ops/s
# Warmup Iteration   2: 3336946.434 ops/s
# Warmup Iteration   3: 2965225.551 ops/s
# Warmup Iteration   4: 3185647.273 ops/s
# Warmup Iteration   5: 3352471.186 ops/s
# Warmup Iteration   6: 3361524.272 ops/s
# Warmup Iteration   7: 3352885.759 ops/s
# Warmup Iteration   8: 3357520.570 ops/s
# Warmup Iteration   9: 3355620.203 ops/s
# Warmup Iteration  10: 3359521.760 ops/s
# Warmup Iteration  11: 3368015.460 ops/s
# Warmup Iteration  12: 3350182.152 ops/s
# Warmup Iteration  13: 3351823.943 ops/s
# Warmup Iteration  14: 3364143.076 ops/s
# Warmup Iteration  15: 3348717.157 ops/s
# Warmup Iteration  16: 3360313.363 ops/s
# Warmup Iteration  17: 3357135.436 ops/s
# Warmup Iteration  18: 3360085.062 ops/s
# Warmup Iteration  19: 3348542.577 ops/s
# Warmup Iteration  20: 3353364.341 ops/s
# Warmup Iteration  21: 3360416.845 ops/s
# Warmup Iteration  22: 3348566.064 ops/s
# Warmup Iteration  23: 3349453.714 ops/s
# Warmup Iteration  24: 3359052.572 ops/s
# Warmup Iteration  25: 3340030.977 ops/s
# Warmup Iteration  26: 3347534.334 ops/s
# Warmup Iteration  27: 3341024.978 ops/s
# Warmup Iteration  28: 3342221.881 ops/s
# Warmup Iteration  29: 3354256.251 ops/s
# Warmup Iteration  30: 3358466.108 ops/s
Iteration   1: 3367572.762 ops/s
Iteration   2: 3360969.461 ops/s
Iteration   3: 3360360.799 ops/s
Iteration   4: 3349593.427 ops/s
Iteration   5: 3350839.254 ops/s
Iteration   6: 3351046.760 ops/s
Iteration   7: 3361002.326 ops/s
Iteration   8: 3370035.415 ops/s
Iteration   9: 3355486.816 ops/s
Iteration  10: 3362596.069 ops/s
Iteration  11: 3357729.492 ops/s
Iteration  12: 3353053.755 ops/s
Iteration  13: 3351673.572 ops/s
Iteration  14: 3361489.258 ops/s
Iteration  15: 3364339.987 ops/s
Iteration  16: 3359479.132 ops/s
Iteration  17: 3365487.968 ops/s
Iteration  18: 3351850.511 ops/s
Iteration  19: 3355343.711 ops/s
Iteration  20: 3361703.231 ops/s
Iteration  21: 3355629.651 ops/s
Iteration  22: 3365820.399 ops/s
Iteration  23: 3364019.416 ops/s
Iteration  24: 3343279.002 ops/s
Iteration  25: 3349574.814 ops/s
Iteration  26: 3362557.032 ops/s
Iteration  27: 3370504.078 ops/s
Iteration  28: 3361873.740 ops/s
Iteration  29: 3373447.439 ops/s
Iteration  30: 3362005.244 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithVarArgs":
  3359345.484 ±(99.9%) 4764.156 ops/s [Average]
  (min, avg, max) = (3343279.002, 3359345.484, 3373447.439), stdev = 7130.765
  CI (99.9%): [3354581.328, 3364109.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_testNewWithVarArgs  thrpt   30  3359345.484 ± 4764.156  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2376904.157 ops/s
# Warmup Iteration   2: 5184410.232 ops/s
# Warmup Iteration   3: 4416579.197 ops/s
# Warmup Iteration   4: 5194263.117 ops/s
# Warmup Iteration   5: 5256135.324 ops/s
# Warmup Iteration   6: 5244246.529 ops/s
# Warmup Iteration   7: 5194767.486 ops/s
# Warmup Iteration   8: 5213089.988 ops/s
# Warmup Iteration   9: 5230837.350 ops/s
# Warmup Iteration  10: 5241177.897 ops/s
# Warmup Iteration  11: 5212739.957 ops/s
# Warmup Iteration  12: 5226053.842 ops/s
# Warmup Iteration  13: 5236178.447 ops/s
# Warmup Iteration  14: 5239099.455 ops/s
# Warmup Iteration  15: 5241846.070 ops/s
# Warmup Iteration  16: 5239132.606 ops/s
# Warmup Iteration  17: 5224780.652 ops/s
# Warmup Iteration  18: 5238226.802 ops/s
# Warmup Iteration  19: 5262954.235 ops/s
# Warmup Iteration  20: 5242627.274 ops/s
# Warmup Iteration  21: 5218722.152 ops/s
# Warmup Iteration  22: 5241949.911 ops/s
# Warmup Iteration  23: 5246172.201 ops/s
# Warmup Iteration  24: 5246114.194 ops/s
# Warmup Iteration  25: 5240403.858 ops/s
# Warmup Iteration  26: 5241024.385 ops/s
# Warmup Iteration  27: 5224263.183 ops/s
# Warmup Iteration  28: 5231828.737 ops/s
# Warmup Iteration  29: 5258909.407 ops/s
# Warmup Iteration  30: 5239391.724 ops/s
Iteration   1: 5250916.778 ops/s
Iteration   2: 5235137.728 ops/s
Iteration   3: 5231130.292 ops/s
Iteration   4: 5268717.566 ops/s
Iteration   5: 5214530.763 ops/s
Iteration   6: 5242657.188 ops/s
Iteration   7: 5226004.579 ops/s
Iteration   8: 5236661.695 ops/s
Iteration   9: 5253884.515 ops/s
Iteration  10: 5239509.505 ops/s
Iteration  11: 5219081.842 ops/s
Iteration  12: 5182886.104 ops/s
Iteration  13: 5216152.667 ops/s
Iteration  14: 5180446.642 ops/s
Iteration  15: 5189259.789 ops/s
Iteration  16: 5228908.154 ops/s
Iteration  17: 5196240.560 ops/s
Iteration  18: 5225483.075 ops/s
Iteration  19: 5246214.253 ops/s
Iteration  20: 5227619.089 ops/s
Iteration  21: 5229457.835 ops/s
Iteration  22: 5227405.236 ops/s
Iteration  23: 5237115.400 ops/s
Iteration  24: 5218322.396 ops/s
Iteration  25: 5260369.735 ops/s
Iteration  26: 5249386.469 ops/s
Iteration  27: 5224995.952 ops/s
Iteration  28: 5223302.245 ops/s
Iteration  29: 5241083.091 ops/s
Iteration  30: 5279940.956 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWith":
  5230094.070 ±(99.9%) 15365.878 ops/s [Average]
  (min, avg, max) = (5180446.642, 5230094.070, 5279940.956), stdev = 22998.925
  CI (99.9%): [5214728.192, 5245459.948] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_testNewWithWith  thrpt   30  5230094.070 ± 15365.878  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWithWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWithWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1519262.911 ops/s
# Warmup Iteration   2: 3536663.656 ops/s
# Warmup Iteration   3: 2994392.491 ops/s
# Warmup Iteration   4: 3609763.404 ops/s
# Warmup Iteration   5: 3613245.853 ops/s
# Warmup Iteration   6: 3613451.513 ops/s
# Warmup Iteration   7: 3610067.242 ops/s
# Warmup Iteration   8: 3617856.065 ops/s
# Warmup Iteration   9: 3601854.655 ops/s
# Warmup Iteration  10: 3616041.463 ops/s
# Warmup Iteration  11: 3612709.130 ops/s
# Warmup Iteration  12: 3606146.329 ops/s
# Warmup Iteration  13: 3614810.926 ops/s
# Warmup Iteration  14: 3616489.466 ops/s
# Warmup Iteration  15: 3611832.521 ops/s
# Warmup Iteration  16: 3603582.064 ops/s
# Warmup Iteration  17: 3601351.283 ops/s
# Warmup Iteration  18: 3583932.385 ops/s
# Warmup Iteration  19: 3606388.144 ops/s
# Warmup Iteration  20: 3600884.264 ops/s
# Warmup Iteration  21: 3600268.358 ops/s
# Warmup Iteration  22: 3601138.388 ops/s
# Warmup Iteration  23: 3616900.445 ops/s
# Warmup Iteration  24: 3607705.427 ops/s
# Warmup Iteration  25: 3613427.653 ops/s
# Warmup Iteration  26: 3600706.880 ops/s
# Warmup Iteration  27: 3595018.446 ops/s
# Warmup Iteration  28: 3606345.347 ops/s
# Warmup Iteration  29: 3576907.484 ops/s
# Warmup Iteration  30: 3581359.745 ops/s
Iteration   1: 3586713.241 ops/s
Iteration   2: 3598365.555 ops/s
Iteration   3: 3535874.044 ops/s
Iteration   4: 3590328.277 ops/s
Iteration   5: 3596974.517 ops/s
Iteration   6: 3579551.082 ops/s
Iteration   7: 3587444.980 ops/s
Iteration   8: 3592019.065 ops/s
Iteration   9: 3622034.972 ops/s
Iteration  10: 3601663.846 ops/s
Iteration  11: 3604964.000 ops/s
Iteration  12: 3602165.160 ops/s
Iteration  13: 3593671.981 ops/s
Iteration  14: 3611736.770 ops/s
Iteration  15: 3611525.710 ops/s
Iteration  16: 3604519.056 ops/s
Iteration  17: 3585914.647 ops/s
Iteration  18: 3566023.626 ops/s
Iteration  19: 3595825.730 ops/s
Iteration  20: 3591221.764 ops/s
Iteration  21: 3605689.580 ops/s
Iteration  22: 3604657.056 ops/s
Iteration  23: 3603729.198 ops/s
Iteration  24: 3592483.481 ops/s
Iteration  25: 3591891.989 ops/s
Iteration  26: 3579533.964 ops/s
Iteration  27: 3596459.268 ops/s
Iteration  28: 3598065.506 ops/s
Iteration  29: 3593389.390 ops/s
Iteration  30: 3602500.668 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testNewWithWithWith":
  3594231.271 ±(99.9%) 10384.837 ops/s [Average]
  (min, avg, max) = (3535874.044, 3594231.271, 3622034.972), stdev = 15543.536
  CI (99.9%): [3583846.434, 3604616.108] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
HashBagTest._Benchmark.benchmark_testNewWithWithWith  thrpt   30  3594231.271 ± 10384.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testToString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testToString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1593773.453 ops/s
# Warmup Iteration   2: 3310597.663 ops/s
# Warmup Iteration   3: 3435356.033 ops/s
# Warmup Iteration   4: 3460411.829 ops/s
# Warmup Iteration   5: 2837398.898 ops/s
# Warmup Iteration   6: 3433623.271 ops/s
# Warmup Iteration   7: 3435750.853 ops/s
# Warmup Iteration   8: 3425132.064 ops/s
# Warmup Iteration   9: 3434104.510 ops/s
# Warmup Iteration  10: 3423395.196 ops/s
# Warmup Iteration  11: 3433894.649 ops/s
# Warmup Iteration  12: 3430179.581 ops/s
# Warmup Iteration  13: 3439238.364 ops/s
# Warmup Iteration  14: 3419448.497 ops/s
# Warmup Iteration  15: 3439510.369 ops/s
# Warmup Iteration  16: 3425700.693 ops/s
# Warmup Iteration  17: 3447067.006 ops/s
# Warmup Iteration  18: 3452405.240 ops/s
# Warmup Iteration  19: 3470684.979 ops/s
# Warmup Iteration  20: 3468607.908 ops/s
# Warmup Iteration  21: 3468934.031 ops/s
# Warmup Iteration  22: 3464510.332 ops/s
# Warmup Iteration  23: 3460916.409 ops/s
# Warmup Iteration  24: 3433390.286 ops/s
# Warmup Iteration  25: 3457598.178 ops/s
# Warmup Iteration  26: 3438125.361 ops/s
# Warmup Iteration  27: 3449804.257 ops/s
# Warmup Iteration  28: 3451209.323 ops/s
# Warmup Iteration  29: 3457653.906 ops/s
# Warmup Iteration  30: 3438493.202 ops/s
Iteration   1: 3448824.168 ops/s
Iteration   2: 3472308.161 ops/s
Iteration   3: 3471000.486 ops/s
Iteration   4: 3461849.892 ops/s
Iteration   5: 3460548.900 ops/s
Iteration   6: 3447389.972 ops/s
Iteration   7: 3447045.263 ops/s
Iteration   8: 3454029.731 ops/s
Iteration   9: 3465356.097 ops/s
Iteration  10: 3463842.712 ops/s
Iteration  11: 3456284.864 ops/s
Iteration  12: 3451935.242 ops/s
Iteration  13: 3450468.069 ops/s
Iteration  14: 3461939.217 ops/s
Iteration  15: 3456468.198 ops/s
Iteration  16: 3461549.437 ops/s
Iteration  17: 3470242.100 ops/s
Iteration  18: 3457102.602 ops/s
Iteration  19: 3455894.424 ops/s
Iteration  20: 3450761.719 ops/s
Iteration  21: 3465667.649 ops/s
Iteration  22: 3451762.500 ops/s
Iteration  23: 3449557.336 ops/s
Iteration  24: 3441278.964 ops/s
Iteration  25: 3482201.859 ops/s
Iteration  26: 3449018.484 ops/s
Iteration  27: 3456561.001 ops/s
Iteration  28: 3457302.433 ops/s
Iteration  29: 3471737.330 ops/s
Iteration  30: 3455059.692 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_testToString":
  3458166.283 ±(99.9%) 6158.839 ops/s [Average]
  (min, avg, max) = (3441278.964, 3458166.283, 3482201.859), stdev = 9218.261
  CI (99.9%): [3452007.444, 3464325.122] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_testToString  thrpt   30  3458166.283 ± 6158.839  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1638198.774 ops/s
# Warmup Iteration   2: 3659284.020 ops/s
# Warmup Iteration   3: 3779367.129 ops/s
# Warmup Iteration   4: 3355279.969 ops/s
# Warmup Iteration   5: 3544867.069 ops/s
# Warmup Iteration   6: 3789411.323 ops/s
# Warmup Iteration   7: 3791475.941 ops/s
# Warmup Iteration   8: 3782868.500 ops/s
# Warmup Iteration   9: 3789903.689 ops/s
# Warmup Iteration  10: 3787193.077 ops/s
# Warmup Iteration  11: 3782432.406 ops/s
# Warmup Iteration  12: 3790227.888 ops/s
# Warmup Iteration  13: 3785735.579 ops/s
# Warmup Iteration  14: 3790603.336 ops/s
# Warmup Iteration  15: 3787656.902 ops/s
# Warmup Iteration  16: 3787425.266 ops/s
# Warmup Iteration  17: 3779999.453 ops/s
# Warmup Iteration  18: 3749208.953 ops/s
# Warmup Iteration  19: 3777931.902 ops/s
# Warmup Iteration  20: 3786292.858 ops/s
# Warmup Iteration  21: 3792210.898 ops/s
# Warmup Iteration  22: 3758373.466 ops/s
# Warmup Iteration  23: 3790056.935 ops/s
# Warmup Iteration  24: 3773687.200 ops/s
# Warmup Iteration  25: 3783555.967 ops/s
# Warmup Iteration  26: 3793529.389 ops/s
# Warmup Iteration  27: 3792320.105 ops/s
# Warmup Iteration  28: 3774405.849 ops/s
# Warmup Iteration  29: 3764974.858 ops/s
# Warmup Iteration  30: 3790595.774 ops/s
Iteration   1: 3784303.871 ops/s
Iteration   2: 3781681.775 ops/s
Iteration   3: 3788831.404 ops/s
Iteration   4: 3771326.469 ops/s
Iteration   5: 3781888.650 ops/s
Iteration   6: 3777238.071 ops/s
Iteration   7: 3792832.136 ops/s
Iteration   8: 3796868.000 ops/s
Iteration   9: 3786129.045 ops/s
Iteration  10: 3781075.883 ops/s
Iteration  11: 3775417.322 ops/s
Iteration  12: 3787644.477 ops/s
Iteration  13: 3797620.831 ops/s
Iteration  14: 3785959.890 ops/s
Iteration  15: 3778774.373 ops/s
Iteration  16: 3779685.955 ops/s
Iteration  17: 3774683.787 ops/s
Iteration  18: 3784675.228 ops/s
Iteration  19: 3780547.040 ops/s
Iteration  20: 3781936.396 ops/s
Iteration  21: 3784514.845 ops/s
Iteration  22: 3790015.347 ops/s
Iteration  23: 3772996.184 ops/s
Iteration  24: 3794340.520 ops/s
Iteration  25: 3772715.845 ops/s
Iteration  26: 3791345.618 ops/s
Iteration  27: 3794271.234 ops/s
Iteration  28: 3788315.518 ops/s
Iteration  29: 3789531.906 ops/s
Iteration  30: 3800051.717 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toArray":
  3784907.311 ±(99.9%) 5198.001 ops/s [Average]
  (min, avg, max) = (3771326.469, 3784907.311, 3800051.717), stdev = 7780.124
  CI (99.9%): [3779709.310, 3790105.312] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toArray  thrpt   30  3784907.311 ± 5198.001  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 865383.882 ops/s
# Warmup Iteration   2: 1485060.889 ops/s
# Warmup Iteration   3: 1692313.287 ops/s
# Warmup Iteration   4: 1700113.579 ops/s
# Warmup Iteration   5: 1701095.169 ops/s
# Warmup Iteration   6: 1386506.647 ops/s
# Warmup Iteration   7: 1703339.094 ops/s
# Warmup Iteration   8: 1707208.828 ops/s
# Warmup Iteration   9: 1700255.676 ops/s
# Warmup Iteration  10: 1696709.845 ops/s
# Warmup Iteration  11: 1700533.325 ops/s
# Warmup Iteration  12: 1698788.499 ops/s
# Warmup Iteration  13: 1701640.590 ops/s
# Warmup Iteration  14: 1704879.877 ops/s
# Warmup Iteration  15: 1704917.491 ops/s
# Warmup Iteration  16: 1706789.005 ops/s
# Warmup Iteration  17: 1701921.602 ops/s
# Warmup Iteration  18: 1705128.381 ops/s
# Warmup Iteration  19: 1703324.748 ops/s
# Warmup Iteration  20: 1703011.849 ops/s
# Warmup Iteration  21: 1706091.197 ops/s
# Warmup Iteration  22: 1702440.574 ops/s
# Warmup Iteration  23: 1703415.196 ops/s
# Warmup Iteration  24: 1699985.580 ops/s
# Warmup Iteration  25: 1707807.437 ops/s
# Warmup Iteration  26: 1708243.002 ops/s
# Warmup Iteration  27: 1700308.893 ops/s
# Warmup Iteration  28: 1701192.311 ops/s
# Warmup Iteration  29: 1706161.654 ops/s
# Warmup Iteration  30: 1701963.171 ops/s
Iteration   1: 1700964.295 ops/s
Iteration   2: 1707529.408 ops/s
Iteration   3: 1699851.436 ops/s
Iteration   4: 1703608.269 ops/s
Iteration   5: 1713796.479 ops/s
Iteration   6: 1701088.555 ops/s
Iteration   7: 1695179.048 ops/s
Iteration   8: 1697801.397 ops/s
Iteration   9: 1701537.101 ops/s
Iteration  10: 1702716.885 ops/s
Iteration  11: 1708168.741 ops/s
Iteration  12: 1701126.981 ops/s
Iteration  13: 1702712.185 ops/s
Iteration  14: 1707430.026 ops/s
Iteration  15: 1699659.557 ops/s
Iteration  16: 1706479.878 ops/s
Iteration  17: 1703762.081 ops/s
Iteration  18: 1705257.144 ops/s
Iteration  19: 1706614.125 ops/s
Iteration  20: 1701961.010 ops/s
Iteration  21: 1700327.475 ops/s
Iteration  22: 1706693.845 ops/s
Iteration  23: 1702803.212 ops/s
Iteration  24: 1700028.123 ops/s
Iteration  25: 1707676.701 ops/s
Iteration  26: 1703128.958 ops/s
Iteration  27: 1709713.458 ops/s
Iteration  28: 1699912.084 ops/s
Iteration  29: 1704626.566 ops/s
Iteration  30: 1705305.241 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBag":
  1703582.009 ±(99.9%) 2609.920 ops/s [Average]
  (min, avg, max) = (1695179.048, 1703582.009, 1713796.479), stdev = 3906.405
  CI (99.9%): [1700972.089, 1706191.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toBag  thrpt   30  1703582.009 ± 2609.920  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 98525.109 ops/s
# Warmup Iteration   2: 134002.509 ops/s
# Warmup Iteration   3: 171494.155 ops/s
# Warmup Iteration   4: 170805.930 ops/s
# Warmup Iteration   5: 171317.612 ops/s
# Warmup Iteration   6: 171469.924 ops/s
# Warmup Iteration   7: 171268.139 ops/s
# Warmup Iteration   8: 141458.421 ops/s
# Warmup Iteration   9: 171144.859 ops/s
# Warmup Iteration  10: 171411.254 ops/s
# Warmup Iteration  11: 170939.991 ops/s
# Warmup Iteration  12: 171174.785 ops/s
# Warmup Iteration  13: 171537.310 ops/s
# Warmup Iteration  14: 171570.600 ops/s
# Warmup Iteration  15: 171195.386 ops/s
# Warmup Iteration  16: 171212.845 ops/s
# Warmup Iteration  17: 176729.558 ops/s
# Warmup Iteration  18: 177244.447 ops/s
# Warmup Iteration  19: 176813.118 ops/s
# Warmup Iteration  20: 177391.218 ops/s
# Warmup Iteration  21: 177117.937 ops/s
# Warmup Iteration  22: 176308.780 ops/s
# Warmup Iteration  23: 176570.506 ops/s
# Warmup Iteration  24: 176928.970 ops/s
# Warmup Iteration  25: 176385.630 ops/s
# Warmup Iteration  26: 176825.719 ops/s
# Warmup Iteration  27: 177558.726 ops/s
# Warmup Iteration  28: 176745.404 ops/s
# Warmup Iteration  29: 176080.325 ops/s
# Warmup Iteration  30: 176917.227 ops/s
Iteration   1: 176937.889 ops/s
Iteration   2: 176316.292 ops/s
Iteration   3: 176603.537 ops/s
Iteration   4: 176429.197 ops/s
Iteration   5: 176985.503 ops/s
Iteration   6: 176611.467 ops/s
Iteration   7: 177109.045 ops/s
Iteration   8: 176444.453 ops/s
Iteration   9: 176714.688 ops/s
Iteration  10: 176582.391 ops/s
Iteration  11: 176638.663 ops/s
Iteration  12: 176743.081 ops/s
Iteration  13: 176809.662 ops/s
Iteration  14: 177745.742 ops/s
Iteration  15: 176851.441 ops/s
Iteration  16: 177304.032 ops/s
Iteration  17: 177236.632 ops/s
Iteration  18: 175936.181 ops/s
Iteration  19: 176212.634 ops/s
Iteration  20: 175708.951 ops/s
Iteration  21: 176570.766 ops/s
Iteration  22: 176563.878 ops/s
Iteration  23: 176756.814 ops/s
Iteration  24: 175972.137 ops/s
Iteration  25: 175982.553 ops/s
Iteration  26: 176845.778 ops/s
Iteration  27: 176845.381 ops/s
Iteration  28: 176438.246 ops/s
Iteration  29: 177099.285 ops/s
Iteration  30: 176105.314 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toBiMap":
  176636.721 ±(99.9%) 298.774 ops/s [Average]
  (min, avg, max) = (175708.951, 176636.721, 177745.742), stdev = 447.191
  CI (99.9%): [176337.947, 176935.495] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_toBiMap  thrpt   30  176636.721 ± 298.774  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1399805.035 ops/s
# Warmup Iteration   2: 2748954.430 ops/s
# Warmup Iteration   3: 3055417.092 ops/s
# Warmup Iteration   4: 3074555.163 ops/s
# Warmup Iteration   5: 2519493.156 ops/s
# Warmup Iteration   6: 3094357.520 ops/s
# Warmup Iteration   7: 3083804.629 ops/s
# Warmup Iteration   8: 3094605.535 ops/s
# Warmup Iteration   9: 3082785.751 ops/s
# Warmup Iteration  10: 3074727.574 ops/s
# Warmup Iteration  11: 3091170.516 ops/s
# Warmup Iteration  12: 3089607.082 ops/s
# Warmup Iteration  13: 3089212.553 ops/s
# Warmup Iteration  14: 3085786.107 ops/s
# Warmup Iteration  15: 3093933.467 ops/s
# Warmup Iteration  16: 3082505.481 ops/s
# Warmup Iteration  17: 3076471.550 ops/s
# Warmup Iteration  18: 3096158.639 ops/s
# Warmup Iteration  19: 3085537.665 ops/s
# Warmup Iteration  20: 3091172.715 ops/s
# Warmup Iteration  21: 3088220.148 ops/s
# Warmup Iteration  22: 3076320.734 ops/s
# Warmup Iteration  23: 3086492.480 ops/s
# Warmup Iteration  24: 3085148.437 ops/s
# Warmup Iteration  25: 3078914.105 ops/s
# Warmup Iteration  26: 3094308.715 ops/s
# Warmup Iteration  27: 3080692.759 ops/s
# Warmup Iteration  28: 3090195.519 ops/s
# Warmup Iteration  29: 3090756.928 ops/s
# Warmup Iteration  30: 3076188.074 ops/s
Iteration   1: 3076739.620 ops/s
Iteration   2: 3078605.097 ops/s
Iteration   3: 3084650.532 ops/s
Iteration   4: 3085281.740 ops/s
Iteration   5: 3085274.321 ops/s
Iteration   6: 3088166.475 ops/s
Iteration   7: 3083991.568 ops/s
Iteration   8: 3085981.944 ops/s
Iteration   9: 3101937.589 ops/s
Iteration  10: 3090281.464 ops/s
Iteration  11: 3089067.975 ops/s
Iteration  12: 3094350.639 ops/s
Iteration  13: 3079852.557 ops/s
Iteration  14: 3083589.217 ops/s
Iteration  15: 3087675.450 ops/s
Iteration  16: 3090560.615 ops/s
Iteration  17: 3090812.601 ops/s
Iteration  18: 3081614.461 ops/s
Iteration  19: 3099950.024 ops/s
Iteration  20: 3083870.391 ops/s
Iteration  21: 3081434.526 ops/s
Iteration  22: 3091463.029 ops/s
Iteration  23: 3087726.819 ops/s
Iteration  24: 3081688.147 ops/s
Iteration  25: 3094939.090 ops/s
Iteration  26: 3094768.882 ops/s
Iteration  27: 3095761.774 ops/s
Iteration  28: 3092824.043 ops/s
Iteration  29: 3084947.029 ops/s
Iteration  30: 3079697.032 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toCollection":
  3087583.488 ±(99.9%) 4205.053 ops/s [Average]
  (min, avg, max) = (3076739.620, 3087583.488, 3101937.589), stdev = 6293.925
  CI (99.9%): [3083378.436, 3091788.541] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toCollection  thrpt   30  3087583.488 ± 4205.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2167504.861 ops/s
# Warmup Iteration   2: 5133798.528 ops/s
# Warmup Iteration   3: 5167172.174 ops/s
# Warmup Iteration   4: 4327965.362 ops/s
# Warmup Iteration   5: 5173838.570 ops/s
# Warmup Iteration   6: 5180982.526 ops/s
# Warmup Iteration   7: 5172135.178 ops/s
# Warmup Iteration   8: 5169473.177 ops/s
# Warmup Iteration   9: 5173894.460 ops/s
# Warmup Iteration  10: 5164431.423 ops/s
# Warmup Iteration  11: 5176158.960 ops/s
# Warmup Iteration  12: 5173102.681 ops/s
# Warmup Iteration  13: 5189042.814 ops/s
# Warmup Iteration  14: 5182587.232 ops/s
# Warmup Iteration  15: 5178502.777 ops/s
# Warmup Iteration  16: 5176412.913 ops/s
# Warmup Iteration  17: 5136070.199 ops/s
# Warmup Iteration  18: 5129443.805 ops/s
# Warmup Iteration  19: 5124155.630 ops/s
# Warmup Iteration  20: 5144703.727 ops/s
# Warmup Iteration  21: 5135218.113 ops/s
# Warmup Iteration  22: 5124774.232 ops/s
# Warmup Iteration  23: 5128215.035 ops/s
# Warmup Iteration  24: 5136732.740 ops/s
# Warmup Iteration  25: 5137996.845 ops/s
# Warmup Iteration  26: 5128419.058 ops/s
# Warmup Iteration  27: 5136975.889 ops/s
# Warmup Iteration  28: 5140383.528 ops/s
# Warmup Iteration  29: 5125443.731 ops/s
# Warmup Iteration  30: 5136911.722 ops/s
Iteration   1: 5153958.262 ops/s
Iteration   2: 5139956.844 ops/s
Iteration   3: 5138765.317 ops/s
Iteration   4: 5125468.889 ops/s
Iteration   5: 5145651.820 ops/s
Iteration   6: 5149549.833 ops/s
Iteration   7: 5132341.033 ops/s
Iteration   8: 5129340.033 ops/s
Iteration   9: 5140005.396 ops/s
Iteration  10: 5148752.581 ops/s
Iteration  11: 5140611.249 ops/s
Iteration  12: 5140289.464 ops/s
Iteration  13: 5145573.536 ops/s
Iteration  14: 5141778.329 ops/s
Iteration  15: 5139715.737 ops/s
Iteration  16: 5144961.229 ops/s
Iteration  17: 5128144.210 ops/s
Iteration  18: 5128586.537 ops/s
Iteration  19: 5137430.257 ops/s
Iteration  20: 5148975.457 ops/s
Iteration  21: 5151506.617 ops/s
Iteration  22: 5146409.410 ops/s
Iteration  23: 5141114.593 ops/s
Iteration  24: 5128608.026 ops/s
Iteration  25: 5127843.457 ops/s
Iteration  26: 5131361.169 ops/s
Iteration  27: 5161256.084 ops/s
Iteration  28: 5144611.080 ops/s
Iteration  29: 5130640.291 ops/s
Iteration  30: 5138639.994 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutable":
  5140061.558 ±(99.9%) 5932.173 ops/s [Average]
  (min, avg, max) = (5125468.889, 5140061.558, 5161256.084), stdev = 8878.998
  CI (99.9%): [5134129.385, 5145993.731] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutable  thrpt   30  5140061.558 ± 5932.173  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBag$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBag

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 655188.478 ops/s
# Warmup Iteration   2: 1296738.618 ops/s
# Warmup Iteration   3: 1477747.761 ops/s
# Warmup Iteration   4: 1481984.600 ops/s
# Warmup Iteration   5: 1227793.782 ops/s
# Warmup Iteration   6: 1462891.974 ops/s
# Warmup Iteration   7: 1481071.322 ops/s
# Warmup Iteration   8: 1479108.606 ops/s
# Warmup Iteration   9: 1480744.526 ops/s
# Warmup Iteration  10: 1482310.289 ops/s
# Warmup Iteration  11: 1483349.927 ops/s
# Warmup Iteration  12: 1477715.207 ops/s
# Warmup Iteration  13: 1479982.146 ops/s
# Warmup Iteration  14: 1482238.132 ops/s
# Warmup Iteration  15: 1480264.208 ops/s
# Warmup Iteration  16: 1479546.342 ops/s
# Warmup Iteration  17: 1474899.512 ops/s
# Warmup Iteration  18: 1479189.157 ops/s
# Warmup Iteration  19: 1478212.804 ops/s
# Warmup Iteration  20: 1477501.809 ops/s
# Warmup Iteration  21: 1475288.368 ops/s
# Warmup Iteration  22: 1476550.157 ops/s
# Warmup Iteration  23: 1476474.580 ops/s
# Warmup Iteration  24: 1474003.770 ops/s
# Warmup Iteration  25: 1475071.803 ops/s
# Warmup Iteration  26: 1479763.395 ops/s
# Warmup Iteration  27: 1477231.917 ops/s
# Warmup Iteration  28: 1478267.158 ops/s
# Warmup Iteration  29: 1476788.475 ops/s
# Warmup Iteration  30: 1477324.497 ops/s
Iteration   1: 1483098.989 ops/s
Iteration   2: 1473650.803 ops/s
Iteration   3: 1481042.739 ops/s
Iteration   4: 1480052.803 ops/s
Iteration   5: 1476444.723 ops/s
Iteration   6: 1470847.432 ops/s
Iteration   7: 1474980.076 ops/s
Iteration   8: 1475964.047 ops/s
Iteration   9: 1475958.117 ops/s
Iteration  10: 1477131.738 ops/s
Iteration  11: 1481639.318 ops/s
Iteration  12: 1473719.005 ops/s
Iteration  13: 1462002.370 ops/s
Iteration  14: 1480403.940 ops/s
Iteration  15: 1471427.510 ops/s
Iteration  16: 1476368.609 ops/s
Iteration  17: 1482032.106 ops/s
Iteration  18: 1478979.761 ops/s
Iteration  19: 1472605.284 ops/s
Iteration  20: 1474485.889 ops/s
Iteration  21: 1474492.229 ops/s
Iteration  22: 1469270.749 ops/s
Iteration  23: 1479306.597 ops/s
Iteration  24: 1479375.483 ops/s
Iteration  25: 1482932.108 ops/s
Iteration  26: 1482134.964 ops/s
Iteration  27: 1475939.873 ops/s
Iteration  28: 1477303.459 ops/s
Iteration  29: 1478639.801 ops/s
Iteration  30: 1477297.597 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBag":
  1476650.937 ±(99.9%) 3070.506 ops/s [Average]
  (min, avg, max) = (1462002.370, 1476650.937, 1483098.989), stdev = 4595.790
  CI (99.9%): [1473580.431, 1479721.444] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableBag  thrpt   30  1476650.937 ± 3070.506  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBiMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBiMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 86640.922 ops/s
# Warmup Iteration   2: 118902.249 ops/s
# Warmup Iteration   3: 149254.125 ops/s
# Warmup Iteration   4: 148512.618 ops/s
# Warmup Iteration   5: 148019.623 ops/s
# Warmup Iteration   6: 148880.015 ops/s
# Warmup Iteration   7: 147901.693 ops/s
# Warmup Iteration   8: 124797.432 ops/s
# Warmup Iteration   9: 148909.085 ops/s
# Warmup Iteration  10: 148802.151 ops/s
# Warmup Iteration  11: 149097.826 ops/s
# Warmup Iteration  12: 148654.667 ops/s
# Warmup Iteration  13: 149097.822 ops/s
# Warmup Iteration  14: 148742.845 ops/s
# Warmup Iteration  15: 148335.535 ops/s
# Warmup Iteration  16: 148569.580 ops/s
# Warmup Iteration  17: 153492.006 ops/s
# Warmup Iteration  18: 153286.693 ops/s
# Warmup Iteration  19: 153337.185 ops/s
# Warmup Iteration  20: 153728.007 ops/s
# Warmup Iteration  21: 153755.527 ops/s
# Warmup Iteration  22: 152936.334 ops/s
# Warmup Iteration  23: 152555.452 ops/s
# Warmup Iteration  24: 152754.747 ops/s
# Warmup Iteration  25: 153676.088 ops/s
# Warmup Iteration  26: 153103.704 ops/s
# Warmup Iteration  27: 153428.556 ops/s
# Warmup Iteration  28: 153116.934 ops/s
# Warmup Iteration  29: 153230.175 ops/s
# Warmup Iteration  30: 152904.576 ops/s
Iteration   1: 152689.609 ops/s
Iteration   2: 154102.760 ops/s
Iteration   3: 153574.410 ops/s
Iteration   4: 153075.816 ops/s
Iteration   5: 154094.373 ops/s
Iteration   6: 153791.807 ops/s
Iteration   7: 153118.338 ops/s
Iteration   8: 154005.749 ops/s
Iteration   9: 153295.990 ops/s
Iteration  10: 152601.706 ops/s
Iteration  11: 152895.910 ops/s
Iteration  12: 153784.657 ops/s
Iteration  13: 153531.032 ops/s
Iteration  14: 153782.357 ops/s
Iteration  15: 153766.521 ops/s
Iteration  16: 153348.422 ops/s
Iteration  17: 153671.958 ops/s
Iteration  18: 153210.588 ops/s
Iteration  19: 153540.033 ops/s
Iteration  20: 153987.617 ops/s
Iteration  21: 153629.623 ops/s
Iteration  22: 153757.242 ops/s
Iteration  23: 154203.006 ops/s
Iteration  24: 152396.066 ops/s
Iteration  25: 153684.596 ops/s
Iteration  26: 153915.014 ops/s
Iteration  27: 154174.807 ops/s
Iteration  28: 153653.239 ops/s
Iteration  29: 153835.580 ops/s
Iteration  30: 152985.984 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableBiMap":
  153536.827 ±(99.9%) 320.763 ops/s [Average]
  (min, avg, max) = (152396.066, 153536.827, 154203.006), stdev = 480.103
  CI (99.9%): [153216.064, 153857.590] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_toImmutableBiMap  thrpt   30  153536.827 ± 320.763  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 852621.392 ops/s
# Warmup Iteration   2: 1654889.450 ops/s
# Warmup Iteration   3: 1839695.196 ops/s
# Warmup Iteration   4: 1851277.179 ops/s
# Warmup Iteration   5: 1625566.153 ops/s
# Warmup Iteration   6: 1752531.012 ops/s
# Warmup Iteration   7: 1854912.722 ops/s
# Warmup Iteration   8: 1859880.447 ops/s
# Warmup Iteration   9: 1859274.385 ops/s
# Warmup Iteration  10: 1856004.847 ops/s
# Warmup Iteration  11: 1854603.595 ops/s
# Warmup Iteration  12: 1859834.879 ops/s
# Warmup Iteration  13: 1857305.247 ops/s
# Warmup Iteration  14: 1857908.431 ops/s
# Warmup Iteration  15: 1859938.955 ops/s
# Warmup Iteration  16: 1866417.945 ops/s
# Warmup Iteration  17: 1893955.343 ops/s
# Warmup Iteration  18: 1899740.667 ops/s
# Warmup Iteration  19: 1898499.875 ops/s
# Warmup Iteration  20: 1895216.196 ops/s
# Warmup Iteration  21: 1899636.189 ops/s
# Warmup Iteration  22: 1901817.024 ops/s
# Warmup Iteration  23: 1902558.106 ops/s
# Warmup Iteration  24: 1897401.969 ops/s
# Warmup Iteration  25: 1902088.555 ops/s
# Warmup Iteration  26: 1900550.993 ops/s
# Warmup Iteration  27: 1894184.326 ops/s
# Warmup Iteration  28: 1895798.745 ops/s
# Warmup Iteration  29: 1898075.416 ops/s
# Warmup Iteration  30: 1896700.293 ops/s
Iteration   1: 1898571.215 ops/s
Iteration   2: 1899586.926 ops/s
Iteration   3: 1900075.916 ops/s
Iteration   4: 1902557.956 ops/s
Iteration   5: 1906036.952 ops/s
Iteration   6: 1901112.827 ops/s
Iteration   7: 1892672.040 ops/s
Iteration   8: 1901854.934 ops/s
Iteration   9: 1899331.496 ops/s
Iteration  10: 1897287.576 ops/s
Iteration  11: 1905889.633 ops/s
Iteration  12: 1900447.595 ops/s
Iteration  13: 1904267.958 ops/s
Iteration  14: 1890946.528 ops/s
Iteration  15: 1899732.294 ops/s
Iteration  16: 1894500.482 ops/s
Iteration  17: 1904417.669 ops/s
Iteration  18: 1897670.975 ops/s
Iteration  19: 1899253.496 ops/s
Iteration  20: 1900720.344 ops/s
Iteration  21: 1906165.178 ops/s
Iteration  22: 1900545.572 ops/s
Iteration  23: 1905035.284 ops/s
Iteration  24: 1897457.921 ops/s
Iteration  25: 1901668.152 ops/s
Iteration  26: 1899341.927 ops/s
Iteration  27: 1895549.557 ops/s
Iteration  28: 1898226.333 ops/s
Iteration  29: 1903657.543 ops/s
Iteration  30: 1898776.473 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableList":
  1900111.958 ±(99.9%) 2523.077 ops/s [Average]
  (min, avg, max) = (1890946.528, 1900111.958, 1906165.178), stdev = 3776.423
  CI (99.9%): [1897588.882, 1902635.035] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableList  thrpt   30  1900111.958 ± 2523.077  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 646423.157 ops/s
# Warmup Iteration   2: 1580615.376 ops/s
# Warmup Iteration   3: 1610645.051 ops/s
# Warmup Iteration   4: 1323598.726 ops/s
# Warmup Iteration   5: 1593816.268 ops/s
# Warmup Iteration   6: 1606187.693 ops/s
# Warmup Iteration   7: 1608762.366 ops/s
# Warmup Iteration   8: 1608662.754 ops/s
# Warmup Iteration   9: 1616391.826 ops/s
# Warmup Iteration  10: 1615764.721 ops/s
# Warmup Iteration  11: 1600816.855 ops/s
# Warmup Iteration  12: 1613167.495 ops/s
# Warmup Iteration  13: 1618418.156 ops/s
# Warmup Iteration  14: 1623689.613 ops/s
# Warmup Iteration  15: 1612372.731 ops/s
# Warmup Iteration  16: 1607898.143 ops/s
# Warmup Iteration  17: 1615477.078 ops/s
# Warmup Iteration  18: 1602791.277 ops/s
# Warmup Iteration  19: 1620623.859 ops/s
# Warmup Iteration  20: 1596260.184 ops/s
# Warmup Iteration  21: 1609451.389 ops/s
# Warmup Iteration  22: 1602089.837 ops/s
# Warmup Iteration  23: 1613815.102 ops/s
# Warmup Iteration  24: 1621780.284 ops/s
# Warmup Iteration  25: 1602974.984 ops/s
# Warmup Iteration  26: 1612984.041 ops/s
# Warmup Iteration  27: 1612095.245 ops/s
# Warmup Iteration  28: 1606931.552 ops/s
# Warmup Iteration  29: 1607603.236 ops/s
# Warmup Iteration  30: 1605836.898 ops/s
Iteration   1: 1618587.018 ops/s
Iteration   2: 1602246.299 ops/s
Iteration   3: 1603541.789 ops/s
Iteration   4: 1609276.251 ops/s
Iteration   5: 1627340.727 ops/s
Iteration   6: 1616750.507 ops/s
Iteration   7: 1615277.975 ops/s
Iteration   8: 1614136.991 ops/s
Iteration   9: 1621788.359 ops/s
Iteration  10: 1599006.704 ops/s
Iteration  11: 1611049.453 ops/s
Iteration  12: 1606008.202 ops/s
Iteration  13: 1614932.940 ops/s
Iteration  14: 1627780.271 ops/s
Iteration  15: 1608251.918 ops/s
Iteration  16: 1602101.298 ops/s
Iteration  17: 1597572.907 ops/s
Iteration  18: 1624460.588 ops/s
Iteration  19: 1611232.800 ops/s
Iteration  20: 1612717.840 ops/s
Iteration  21: 1592264.991 ops/s
Iteration  22: 1581929.072 ops/s
Iteration  23: 1601542.647 ops/s
Iteration  24: 1609229.291 ops/s
Iteration  25: 1601637.478 ops/s
Iteration  26: 1594911.076 ops/s
Iteration  27: 1616895.932 ops/s
Iteration  28: 1616704.440 ops/s
Iteration  29: 1601613.199 ops/s
Iteration  30: 1598462.189 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableMap":
  1608641.705 ±(99.9%) 7165.141 ops/s [Average]
  (min, avg, max) = (1581929.072, 1608641.705, 1627780.271), stdev = 10724.447
  CI (99.9%): [1601476.564, 1615806.847] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableMap  thrpt   30  1608641.705 ± 7165.141  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 786885.969 ops/s
# Warmup Iteration   2: 1402657.817 ops/s
# Warmup Iteration   3: 1631153.770 ops/s
# Warmup Iteration   4: 1638459.902 ops/s
# Warmup Iteration   5: 1643165.863 ops/s
# Warmup Iteration   6: 1335136.550 ops/s
# Warmup Iteration   7: 1640132.399 ops/s
# Warmup Iteration   8: 1644380.339 ops/s
# Warmup Iteration   9: 1641349.589 ops/s
# Warmup Iteration  10: 1637430.383 ops/s
# Warmup Iteration  11: 1644304.138 ops/s
# Warmup Iteration  12: 1639127.603 ops/s
# Warmup Iteration  13: 1639091.956 ops/s
# Warmup Iteration  14: 1644347.812 ops/s
# Warmup Iteration  15: 1640684.396 ops/s
# Warmup Iteration  16: 1643577.684 ops/s
# Warmup Iteration  17: 1633337.502 ops/s
# Warmup Iteration  18: 1633961.951 ops/s
# Warmup Iteration  19: 1631241.601 ops/s
# Warmup Iteration  20: 1626097.887 ops/s
# Warmup Iteration  21: 1631505.206 ops/s
# Warmup Iteration  22: 1633120.802 ops/s
# Warmup Iteration  23: 1627119.034 ops/s
# Warmup Iteration  24: 1630097.967 ops/s
# Warmup Iteration  25: 1632339.263 ops/s
# Warmup Iteration  26: 1635162.219 ops/s
# Warmup Iteration  27: 1628253.775 ops/s
# Warmup Iteration  28: 1630970.519 ops/s
# Warmup Iteration  29: 1626827.456 ops/s
# Warmup Iteration  30: 1628064.752 ops/s
Iteration   1: 1628037.826 ops/s
Iteration   2: 1633359.140 ops/s
Iteration   3: 1633857.696 ops/s
Iteration   4: 1635538.030 ops/s
Iteration   5: 1634732.258 ops/s
Iteration   6: 1628935.289 ops/s
Iteration   7: 1628991.026 ops/s
Iteration   8: 1628606.462 ops/s
Iteration   9: 1635051.690 ops/s
Iteration  10: 1629052.485 ops/s
Iteration  11: 1630279.923 ops/s
Iteration  12: 1629946.150 ops/s
Iteration  13: 1628361.403 ops/s
Iteration  14: 1627685.924 ops/s
Iteration  15: 1632123.560 ops/s
Iteration  16: 1633079.336 ops/s
Iteration  17: 1635293.499 ops/s
Iteration  18: 1627497.043 ops/s
Iteration  19: 1627470.258 ops/s
Iteration  20: 1626814.385 ops/s
Iteration  21: 1629683.243 ops/s
Iteration  22: 1634430.473 ops/s
Iteration  23: 1633942.151 ops/s
Iteration  24: 1630359.868 ops/s
Iteration  25: 1632731.288 ops/s
Iteration  26: 1632469.725 ops/s
Iteration  27: 1629938.867 ops/s
Iteration  28: 1634556.216 ops/s
Iteration  29: 1639243.414 ops/s
Iteration  30: 1633433.857 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSet":
  1631516.750 ±(99.9%) 2092.538 ops/s [Average]
  (min, avg, max) = (1626814.385, 1631516.750, 1639243.414), stdev = 3132.012
  CI (99.9%): [1629424.212, 1633609.287] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSet  thrpt   30  1631516.750 ± 2092.538  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 635536.361 ops/s
# Warmup Iteration   2: 1338982.521 ops/s
# Warmup Iteration   3: 1464613.516 ops/s
# Warmup Iteration   4: 1473519.325 ops/s
# Warmup Iteration   5: 1212065.322 ops/s
# Warmup Iteration   6: 1479426.314 ops/s
# Warmup Iteration   7: 1476696.237 ops/s
# Warmup Iteration   8: 1468375.918 ops/s
# Warmup Iteration   9: 1474175.848 ops/s
# Warmup Iteration  10: 1475013.339 ops/s
# Warmup Iteration  11: 1472033.590 ops/s
# Warmup Iteration  12: 1472002.470 ops/s
# Warmup Iteration  13: 1477826.170 ops/s
# Warmup Iteration  14: 1473205.591 ops/s
# Warmup Iteration  15: 1473479.003 ops/s
# Warmup Iteration  16: 1474956.713 ops/s
# Warmup Iteration  17: 1476524.603 ops/s
# Warmup Iteration  18: 1472692.780 ops/s
# Warmup Iteration  19: 1476346.890 ops/s
# Warmup Iteration  20: 1474929.431 ops/s
# Warmup Iteration  21: 1473242.019 ops/s
# Warmup Iteration  22: 1472756.889 ops/s
# Warmup Iteration  23: 1476489.852 ops/s
# Warmup Iteration  24: 1470603.098 ops/s
# Warmup Iteration  25: 1472033.638 ops/s
# Warmup Iteration  26: 1473345.219 ops/s
# Warmup Iteration  27: 1473236.751 ops/s
# Warmup Iteration  28: 1473498.717 ops/s
# Warmup Iteration  29: 1471267.065 ops/s
# Warmup Iteration  30: 1472732.917 ops/s
Iteration   1: 1472827.287 ops/s
Iteration   2: 1471434.296 ops/s
Iteration   3: 1470593.265 ops/s
Iteration   4: 1469013.990 ops/s
Iteration   5: 1474725.029 ops/s
Iteration   6: 1474158.865 ops/s
Iteration   7: 1475244.409 ops/s
Iteration   8: 1476661.879 ops/s
Iteration   9: 1471022.421 ops/s
Iteration  10: 1472665.764 ops/s
Iteration  11: 1468861.003 ops/s
Iteration  12: 1475540.916 ops/s
Iteration  13: 1468389.017 ops/s
Iteration  14: 1470087.519 ops/s
Iteration  15: 1474821.733 ops/s
Iteration  16: 1470086.891 ops/s
Iteration  17: 1470258.547 ops/s
Iteration  18: 1470142.854 ops/s
Iteration  19: 1474758.239 ops/s
Iteration  20: 1468804.845 ops/s
Iteration  21: 1471067.499 ops/s
Iteration  22: 1475711.550 ops/s
Iteration  23: 1474399.097 ops/s
Iteration  24: 1473533.053 ops/s
Iteration  25: 1479779.400 ops/s
Iteration  26: 1473240.538 ops/s
Iteration  27: 1472669.003 ops/s
Iteration  28: 1473142.803 ops/s
Iteration  29: 1474142.003 ops/s
Iteration  30: 1469115.597 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering":
  1472563.310 ±(99.9%) 1851.047 ops/s [Average]
  (min, avg, max) = (1468389.017, 1472563.310, 1479779.400), stdev = 2770.561
  CI (99.9%): [1470712.263, 1474414.358] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortSet_natural_ordering  thrpt   30  1472563.310 ± 1851.047  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 275286.871 ops/s
# Warmup Iteration   2: 626428.320 ops/s
# Warmup Iteration   3: 675711.781 ops/s
# Warmup Iteration   4: 678749.847 ops/s
# Warmup Iteration   5: 569032.690 ops/s
# Warmup Iteration   6: 681178.121 ops/s
# Warmup Iteration   7: 680953.693 ops/s
# Warmup Iteration   8: 680378.470 ops/s
# Warmup Iteration   9: 682519.788 ops/s
# Warmup Iteration  10: 680755.442 ops/s
# Warmup Iteration  11: 682712.477 ops/s
# Warmup Iteration  12: 682491.829 ops/s
# Warmup Iteration  13: 679165.355 ops/s
# Warmup Iteration  14: 681310.022 ops/s
# Warmup Iteration  15: 682258.444 ops/s
# Warmup Iteration  16: 682585.776 ops/s
# Warmup Iteration  17: 682583.324 ops/s
# Warmup Iteration  18: 682345.075 ops/s
# Warmup Iteration  19: 683156.822 ops/s
# Warmup Iteration  20: 681347.122 ops/s
# Warmup Iteration  21: 681564.970 ops/s
# Warmup Iteration  22: 684153.921 ops/s
# Warmup Iteration  23: 681675.909 ops/s
# Warmup Iteration  24: 682981.887 ops/s
# Warmup Iteration  25: 683461.063 ops/s
# Warmup Iteration  26: 684172.377 ops/s
# Warmup Iteration  27: 680941.658 ops/s
# Warmup Iteration  28: 683566.031 ops/s
# Warmup Iteration  29: 680242.145 ops/s
# Warmup Iteration  30: 680462.458 ops/s
Iteration   1: 682992.771 ops/s
Iteration   2: 681636.852 ops/s
Iteration   3: 681666.596 ops/s
Iteration   4: 681006.087 ops/s
Iteration   5: 683550.982 ops/s
Iteration   6: 681486.180 ops/s
Iteration   7: 682159.705 ops/s
Iteration   8: 681823.841 ops/s
Iteration   9: 679609.455 ops/s
Iteration  10: 683017.394 ops/s
Iteration  11: 681211.760 ops/s
Iteration  12: 682170.085 ops/s
Iteration  13: 680266.321 ops/s
Iteration  14: 682038.863 ops/s
Iteration  15: 678752.433 ops/s
Iteration  16: 679247.011 ops/s
Iteration  17: 680533.083 ops/s
Iteration  18: 683073.307 ops/s
Iteration  19: 684201.604 ops/s
Iteration  20: 680327.445 ops/s
Iteration  21: 683550.239 ops/s
Iteration  22: 682243.293 ops/s
Iteration  23: 682780.838 ops/s
Iteration  24: 683315.649 ops/s
Iteration  25: 684118.138 ops/s
Iteration  26: 684135.373 ops/s
Iteration  27: 683097.137 ops/s
Iteration  28: 681873.873 ops/s
Iteration  29: 683348.057 ops/s
Iteration  30: 682359.829 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBagBy":
  682053.140 ±(99.9%) 971.796 ops/s [Average]
  (min, avg, max) = (678752.433, 682053.140, 684201.604), stdev = 1454.539
  CI (99.9%): [681081.344, 683024.936] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedBagBy  thrpt   30  682053.140 ± 971.796  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 312033.781 ops/s
# Warmup Iteration   2: 540948.179 ops/s
# Warmup Iteration   3: 649812.981 ops/s
# Warmup Iteration   4: 654952.426 ops/s
# Warmup Iteration   5: 653589.006 ops/s
# Warmup Iteration   6: 592990.900 ops/s
# Warmup Iteration   7: 605691.460 ops/s
# Warmup Iteration   8: 650995.994 ops/s
# Warmup Iteration   9: 654037.978 ops/s
# Warmup Iteration  10: 654386.990 ops/s
# Warmup Iteration  11: 653720.857 ops/s
# Warmup Iteration  12: 656257.562 ops/s
# Warmup Iteration  13: 653106.029 ops/s
# Warmup Iteration  14: 654809.475 ops/s
# Warmup Iteration  15: 654583.367 ops/s
# Warmup Iteration  16: 654422.325 ops/s
# Warmup Iteration  17: 653176.508 ops/s
# Warmup Iteration  18: 650087.167 ops/s
# Warmup Iteration  19: 651661.411 ops/s
# Warmup Iteration  20: 651674.043 ops/s
# Warmup Iteration  21: 653029.165 ops/s
# Warmup Iteration  22: 651211.815 ops/s
# Warmup Iteration  23: 652320.033 ops/s
# Warmup Iteration  24: 651904.036 ops/s
# Warmup Iteration  25: 653436.374 ops/s
# Warmup Iteration  26: 654839.986 ops/s
# Warmup Iteration  27: 652662.114 ops/s
# Warmup Iteration  28: 653021.155 ops/s
# Warmup Iteration  29: 653307.526 ops/s
# Warmup Iteration  30: 653599.594 ops/s
Iteration   1: 653005.478 ops/s
Iteration   2: 654223.658 ops/s
Iteration   3: 653938.728 ops/s
Iteration   4: 650094.903 ops/s
Iteration   5: 652793.207 ops/s
Iteration   6: 653718.135 ops/s
Iteration   7: 650687.342 ops/s
Iteration   8: 651344.067 ops/s
Iteration   9: 649763.897 ops/s
Iteration  10: 648574.584 ops/s
Iteration  11: 653808.783 ops/s
Iteration  12: 652817.849 ops/s
Iteration  13: 652113.742 ops/s
Iteration  14: 648718.775 ops/s
Iteration  15: 652320.419 ops/s
Iteration  16: 649871.591 ops/s
Iteration  17: 652430.674 ops/s
Iteration  18: 654596.289 ops/s
Iteration  19: 650503.756 ops/s
Iteration  20: 653196.420 ops/s
Iteration  21: 648690.349 ops/s
Iteration  22: 652934.364 ops/s
Iteration  23: 651005.499 ops/s
Iteration  24: 652406.733 ops/s
Iteration  25: 652828.335 ops/s
Iteration  26: 650239.490 ops/s
Iteration  27: 650579.387 ops/s
Iteration  28: 650816.614 ops/s
Iteration  29: 650264.074 ops/s
Iteration  30: 651875.900 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering":
  651672.101 ±(99.9%) 1148.860 ops/s [Average]
  (min, avg, max) = (648574.584, 651672.101, 654596.289), stdev = 1719.559
  CI (99.9%): [650523.242, 652820.961] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedBag_natural_ordering  thrpt   30  651672.101 ± 1148.860  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498604.861 ops/s
# Warmup Iteration   2: 966607.359 ops/s
# Warmup Iteration   3: 1119800.932 ops/s
# Warmup Iteration   4: 1128639.318 ops/s
# Warmup Iteration   5: 1121710.971 ops/s
# Warmup Iteration   6: 950831.154 ops/s
# Warmup Iteration   7: 1132221.036 ops/s
# Warmup Iteration   8: 1132129.893 ops/s
# Warmup Iteration   9: 1135742.634 ops/s
# Warmup Iteration  10: 1136675.306 ops/s
# Warmup Iteration  11: 1135325.026 ops/s
# Warmup Iteration  12: 1131857.206 ops/s
# Warmup Iteration  13: 1133776.309 ops/s
# Warmup Iteration  14: 1135614.375 ops/s
# Warmup Iteration  15: 1132574.184 ops/s
# Warmup Iteration  16: 1130200.108 ops/s
# Warmup Iteration  17: 1130255.548 ops/s
# Warmup Iteration  18: 1130930.912 ops/s
# Warmup Iteration  19: 1133105.049 ops/s
# Warmup Iteration  20: 1130432.585 ops/s
# Warmup Iteration  21: 1131053.522 ops/s
# Warmup Iteration  22: 1135212.449 ops/s
# Warmup Iteration  23: 1130752.990 ops/s
# Warmup Iteration  24: 1133645.548 ops/s
# Warmup Iteration  25: 1138886.509 ops/s
# Warmup Iteration  26: 1130768.632 ops/s
# Warmup Iteration  27: 1132574.309 ops/s
# Warmup Iteration  28: 1136084.581 ops/s
# Warmup Iteration  29: 1130310.525 ops/s
# Warmup Iteration  30: 1121414.599 ops/s
Iteration   1: 1133148.317 ops/s
Iteration   2: 1135306.185 ops/s
Iteration   3: 1132335.663 ops/s
Iteration   4: 1129367.821 ops/s
Iteration   5: 1122918.976 ops/s
Iteration   6: 1134471.472 ops/s
Iteration   7: 1129595.797 ops/s
Iteration   8: 1134765.921 ops/s
Iteration   9: 1130254.686 ops/s
Iteration  10: 1133939.819 ops/s
Iteration  11: 1131655.926 ops/s
Iteration  12: 1127304.043 ops/s
Iteration  13: 1131481.260 ops/s
Iteration  14: 1126441.962 ops/s
Iteration  15: 1131758.044 ops/s
Iteration  16: 1128362.459 ops/s
Iteration  17: 1130572.139 ops/s
Iteration  18: 1130068.677 ops/s
Iteration  19: 1138006.125 ops/s
Iteration  20: 1131994.344 ops/s
Iteration  21: 1133874.550 ops/s
Iteration  22: 1141608.376 ops/s
Iteration  23: 1126182.807 ops/s
Iteration  24: 1128676.327 ops/s
Iteration  25: 1128257.097 ops/s
Iteration  26: 1135220.841 ops/s
Iteration  27: 1127261.855 ops/s
Iteration  28: 1129103.773 ops/s
Iteration  29: 1136902.197 ops/s
Iteration  30: 1130255.128 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator":
  1131369.753 ±(99.9%) 2625.002 ops/s [Average]
  (min, avg, max) = (1122918.976, 1131369.753, 1141608.376), stdev = 3928.980
  CI (99.9%): [1128744.751, 1133994.755] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedBag_with_comparator  thrpt   30  1131369.753 ± 2625.002  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1350151.944 ops/s
# Warmup Iteration   2: 3001640.916 ops/s
# Warmup Iteration   3: 3162075.315 ops/s
# Warmup Iteration   4: 3033870.279 ops/s
# Warmup Iteration   5: 2756881.918 ops/s
# Warmup Iteration   6: 3186585.358 ops/s
# Warmup Iteration   7: 3180226.109 ops/s
# Warmup Iteration   8: 3167073.666 ops/s
# Warmup Iteration   9: 3173007.055 ops/s
# Warmup Iteration  10: 3179193.440 ops/s
# Warmup Iteration  11: 3185443.528 ops/s
# Warmup Iteration  12: 3174831.473 ops/s
# Warmup Iteration  13: 3173859.835 ops/s
# Warmup Iteration  14: 3174296.696 ops/s
# Warmup Iteration  15: 3163762.921 ops/s
# Warmup Iteration  16: 3179045.260 ops/s
# Warmup Iteration  17: 3176798.557 ops/s
# Warmup Iteration  18: 3181897.839 ops/s
# Warmup Iteration  19: 3181381.674 ops/s
# Warmup Iteration  20: 3181966.871 ops/s
# Warmup Iteration  21: 3180587.059 ops/s
# Warmup Iteration  22: 3177648.000 ops/s
# Warmup Iteration  23: 3187734.027 ops/s
# Warmup Iteration  24: 3192337.506 ops/s
# Warmup Iteration  25: 3183691.319 ops/s
# Warmup Iteration  26: 3179468.814 ops/s
# Warmup Iteration  27: 3186861.175 ops/s
# Warmup Iteration  28: 3188748.581 ops/s
# Warmup Iteration  29: 3184674.420 ops/s
# Warmup Iteration  30: 3191308.750 ops/s
Iteration   1: 3180769.669 ops/s
Iteration   2: 3170281.709 ops/s
Iteration   3: 3182553.437 ops/s
Iteration   4: 3172026.556 ops/s
Iteration   5: 3178715.318 ops/s
Iteration   6: 3175681.883 ops/s
Iteration   7: 3186425.690 ops/s
Iteration   8: 3183395.275 ops/s
Iteration   9: 3183140.348 ops/s
Iteration  10: 3165857.267 ops/s
Iteration  11: 3172158.265 ops/s
Iteration  12: 3188159.068 ops/s
Iteration  13: 3192019.816 ops/s
Iteration  14: 3178727.606 ops/s
Iteration  15: 3183774.785 ops/s
Iteration  16: 3170365.353 ops/s
Iteration  17: 3183111.991 ops/s
Iteration  18: 3172786.678 ops/s
Iteration  19: 3188147.175 ops/s
Iteration  20: 3190034.598 ops/s
Iteration  21: 3189114.108 ops/s
Iteration  22: 3184122.813 ops/s
Iteration  23: 3183974.214 ops/s
Iteration  24: 3177241.072 ops/s
Iteration  25: 3182881.775 ops/s
Iteration  26: 3187128.247 ops/s
Iteration  27: 3188272.095 ops/s
Iteration  28: 3179428.100 ops/s
Iteration  29: 3185378.766 ops/s
Iteration  30: 3170854.536 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedListBy":
  3180884.274 ±(99.9%) 4639.782 ops/s [Average]
  (min, avg, max) = (3165857.267, 3180884.274, 3192019.816), stdev = 6944.608
  CI (99.9%): [3176244.491, 3185524.056] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedListBy  thrpt   30  3180884.274 ± 4639.782  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1007168.956 ops/s
# Warmup Iteration   2: 1670529.912 ops/s
# Warmup Iteration   3: 1975308.222 ops/s
# Warmup Iteration   4: 1997405.778 ops/s
# Warmup Iteration   5: 1994278.837 ops/s
# Warmup Iteration   6: 1747383.683 ops/s
# Warmup Iteration   7: 1886670.102 ops/s
# Warmup Iteration   8: 1992285.230 ops/s
# Warmup Iteration   9: 1991680.506 ops/s
# Warmup Iteration  10: 1983887.653 ops/s
# Warmup Iteration  11: 1985041.192 ops/s
# Warmup Iteration  12: 1990830.567 ops/s
# Warmup Iteration  13: 1986101.660 ops/s
# Warmup Iteration  14: 1991311.469 ops/s
# Warmup Iteration  15: 1989649.705 ops/s
# Warmup Iteration  16: 1989536.414 ops/s
# Warmup Iteration  17: 1990821.167 ops/s
# Warmup Iteration  18: 1991959.466 ops/s
# Warmup Iteration  19: 1991005.201 ops/s
# Warmup Iteration  20: 1980754.960 ops/s
# Warmup Iteration  21: 1990133.891 ops/s
# Warmup Iteration  22: 1994851.130 ops/s
# Warmup Iteration  23: 1981481.574 ops/s
# Warmup Iteration  24: 1996641.750 ops/s
# Warmup Iteration  25: 1993321.211 ops/s
# Warmup Iteration  26: 1990449.894 ops/s
# Warmup Iteration  27: 1990612.314 ops/s
# Warmup Iteration  28: 1997850.714 ops/s
# Warmup Iteration  29: 1997670.765 ops/s
# Warmup Iteration  30: 1989377.855 ops/s
Iteration   1: 1988529.755 ops/s
Iteration   2: 1991736.617 ops/s
Iteration   3: 1995413.356 ops/s
Iteration   4: 1994375.750 ops/s
Iteration   5: 1999171.723 ops/s
Iteration   6: 1996611.190 ops/s
Iteration   7: 1992364.215 ops/s
Iteration   8: 1994882.606 ops/s
Iteration   9: 1993401.718 ops/s
Iteration  10: 1993469.858 ops/s
Iteration  11: 1997145.288 ops/s
Iteration  12: 1999095.184 ops/s
Iteration  13: 2001425.666 ops/s
Iteration  14: 1998453.480 ops/s
Iteration  15: 1988725.777 ops/s
Iteration  16: 1996727.686 ops/s
Iteration  17: 1991443.442 ops/s
Iteration  18: 2000660.680 ops/s
Iteration  19: 1992755.307 ops/s
Iteration  20: 1993743.489 ops/s
Iteration  21: 1993542.212 ops/s
Iteration  22: 2002670.985 ops/s
Iteration  23: 1993347.168 ops/s
Iteration  24: 1988054.344 ops/s
Iteration  25: 2000311.895 ops/s
Iteration  26: 1994438.079 ops/s
Iteration  27: 1994859.399 ops/s
Iteration  28: 1999561.163 ops/s
Iteration  29: 1993424.767 ops/s
Iteration  30: 2000930.567 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering":
  1995375.779 ±(99.9%) 2625.664 ops/s [Average]
  (min, avg, max) = (1988054.344, 1995375.779, 2002670.985), stdev = 3929.971
  CI (99.9%): [1992750.115, 1998001.443] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedList_natural_ordering  thrpt   30  1995375.779 ± 2625.664  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1902362.331 ops/s
# Warmup Iteration   2: 3562449.177 ops/s
# Warmup Iteration   3: 4122848.354 ops/s
# Warmup Iteration   4: 4121883.439 ops/s
# Warmup Iteration   5: 3954329.484 ops/s
# Warmup Iteration   6: 3529167.951 ops/s
# Warmup Iteration   7: 4123770.543 ops/s
# Warmup Iteration   8: 4111404.679 ops/s
# Warmup Iteration   9: 4142589.656 ops/s
# Warmup Iteration  10: 4144053.183 ops/s
# Warmup Iteration  11: 4127575.897 ops/s
# Warmup Iteration  12: 4134992.283 ops/s
# Warmup Iteration  13: 4126770.735 ops/s
# Warmup Iteration  14: 4138828.412 ops/s
# Warmup Iteration  15: 4134642.013 ops/s
# Warmup Iteration  16: 4129665.990 ops/s
# Warmup Iteration  17: 4125430.348 ops/s
# Warmup Iteration  18: 4131114.480 ops/s
# Warmup Iteration  19: 4144966.796 ops/s
# Warmup Iteration  20: 4143556.197 ops/s
# Warmup Iteration  21: 4146476.366 ops/s
# Warmup Iteration  22: 4144385.710 ops/s
# Warmup Iteration  23: 4141499.905 ops/s
# Warmup Iteration  24: 4151202.860 ops/s
# Warmup Iteration  25: 4136384.228 ops/s
# Warmup Iteration  26: 4148054.253 ops/s
# Warmup Iteration  27: 4141891.595 ops/s
# Warmup Iteration  28: 4128622.532 ops/s
# Warmup Iteration  29: 4133873.869 ops/s
# Warmup Iteration  30: 4147202.509 ops/s
Iteration   1: 4130250.229 ops/s
Iteration   2: 4142981.728 ops/s
Iteration   3: 4124563.315 ops/s
Iteration   4: 4147086.619 ops/s
Iteration   5: 4137704.590 ops/s
Iteration   6: 4140505.213 ops/s
Iteration   7: 4147612.372 ops/s
Iteration   8: 4136882.276 ops/s
Iteration   9: 4131954.199 ops/s
Iteration  10: 4128411.802 ops/s
Iteration  11: 4137700.665 ops/s
Iteration  12: 4141994.261 ops/s
Iteration  13: 4129031.163 ops/s
Iteration  14: 4135972.664 ops/s
Iteration  15: 4143397.870 ops/s
Iteration  16: 4131315.679 ops/s
Iteration  17: 4161124.544 ops/s
Iteration  18: 4135495.123 ops/s
Iteration  19: 4138695.042 ops/s
Iteration  20: 4141793.532 ops/s
Iteration  21: 4145345.896 ops/s
Iteration  22: 4128971.904 ops/s
Iteration  23: 4137062.028 ops/s
Iteration  24: 4133254.669 ops/s
Iteration  25: 4154209.920 ops/s
Iteration  26: 4140030.959 ops/s
Iteration  27: 4141864.995 ops/s
Iteration  28: 4153261.855 ops/s
Iteration  29: 4136178.502 ops/s
Iteration  30: 4133978.712 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator":
  4138954.411 ±(99.9%) 5510.188 ops/s [Average]
  (min, avg, max) = (4124563.315, 4138954.411, 4161124.544), stdev = 8247.391
  CI (99.9%): [4133444.223, 4144464.599] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedList_with_comparator  thrpt   30  4138954.411 ± 5510.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 542786.315 ops/s
# Warmup Iteration   2: 1159477.238 ops/s
# Warmup Iteration   3: 1271374.511 ops/s
# Warmup Iteration   4: 1279327.060 ops/s
# Warmup Iteration   5: 1057293.947 ops/s
# Warmup Iteration   6: 1283270.102 ops/s
# Warmup Iteration   7: 1278749.608 ops/s
# Warmup Iteration   8: 1283133.063 ops/s
# Warmup Iteration   9: 1281980.719 ops/s
# Warmup Iteration  10: 1281809.086 ops/s
# Warmup Iteration  11: 1279848.437 ops/s
# Warmup Iteration  12: 1278505.734 ops/s
# Warmup Iteration  13: 1274483.202 ops/s
# Warmup Iteration  14: 1279693.970 ops/s
# Warmup Iteration  15: 1280292.864 ops/s
# Warmup Iteration  16: 1277868.981 ops/s
# Warmup Iteration  17: 1279988.233 ops/s
# Warmup Iteration  18: 1279832.295 ops/s
# Warmup Iteration  19: 1280833.636 ops/s
# Warmup Iteration  20: 1280632.105 ops/s
# Warmup Iteration  21: 1283322.730 ops/s
# Warmup Iteration  22: 1279638.374 ops/s
# Warmup Iteration  23: 1277326.221 ops/s
# Warmup Iteration  24: 1284653.580 ops/s
# Warmup Iteration  25: 1281700.608 ops/s
# Warmup Iteration  26: 1281098.832 ops/s
# Warmup Iteration  27: 1279750.381 ops/s
# Warmup Iteration  28: 1283798.279 ops/s
# Warmup Iteration  29: 1282153.440 ops/s
# Warmup Iteration  30: 1276149.787 ops/s
Iteration   1: 1278544.659 ops/s
Iteration   2: 1283599.084 ops/s
Iteration   3: 1281386.059 ops/s
Iteration   4: 1282941.629 ops/s
Iteration   5: 1286002.918 ops/s
Iteration   6: 1284599.117 ops/s
Iteration   7: 1279077.729 ops/s
Iteration   8: 1283245.623 ops/s
Iteration   9: 1285019.960 ops/s
Iteration  10: 1283420.895 ops/s
Iteration  11: 1275649.221 ops/s
Iteration  12: 1279294.727 ops/s
Iteration  13: 1284144.000 ops/s
Iteration  14: 1281916.415 ops/s
Iteration  15: 1285015.063 ops/s
Iteration  16: 1281803.901 ops/s
Iteration  17: 1282660.428 ops/s
Iteration  18: 1283423.132 ops/s
Iteration  19: 1280500.317 ops/s
Iteration  20: 1281132.477 ops/s
Iteration  21: 1278380.645 ops/s
Iteration  22: 1281182.468 ops/s
Iteration  23: 1285554.621 ops/s
Iteration  24: 1281531.522 ops/s
Iteration  25: 1280764.285 ops/s
Iteration  26: 1266967.643 ops/s
Iteration  27: 1288848.095 ops/s
Iteration  28: 1281459.279 ops/s
Iteration  29: 1276568.689 ops/s
Iteration  30: 1286200.135 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSetBy":
  1281694.491 ±(99.9%) 2696.153 ops/s [Average]
  (min, avg, max) = (1266967.643, 1281694.491, 1288848.095), stdev = 4035.475
  CI (99.9%): [1278998.339, 1284390.644] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedSetBy  thrpt   30  1281694.491 ± 2696.153  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661566.289 ops/s
# Warmup Iteration   2: 1247287.629 ops/s
# Warmup Iteration   3: 1404635.392 ops/s
# Warmup Iteration   4: 1412469.611 ops/s
# Warmup Iteration   5: 1356127.569 ops/s
# Warmup Iteration   6: 1231454.212 ops/s
# Warmup Iteration   7: 1412501.149 ops/s
# Warmup Iteration   8: 1417981.101 ops/s
# Warmup Iteration   9: 1419133.638 ops/s
# Warmup Iteration  10: 1416611.847 ops/s
# Warmup Iteration  11: 1414220.808 ops/s
# Warmup Iteration  12: 1413555.306 ops/s
# Warmup Iteration  13: 1416421.988 ops/s
# Warmup Iteration  14: 1417929.253 ops/s
# Warmup Iteration  15: 1414647.317 ops/s
# Warmup Iteration  16: 1414420.877 ops/s
# Warmup Iteration  17: 1418568.810 ops/s
# Warmup Iteration  18: 1414822.552 ops/s
# Warmup Iteration  19: 1415777.722 ops/s
# Warmup Iteration  20: 1416677.028 ops/s
# Warmup Iteration  21: 1411648.300 ops/s
# Warmup Iteration  22: 1412554.024 ops/s
# Warmup Iteration  23: 1412589.445 ops/s
# Warmup Iteration  24: 1415698.689 ops/s
# Warmup Iteration  25: 1416034.819 ops/s
# Warmup Iteration  26: 1416724.541 ops/s
# Warmup Iteration  27: 1413305.466 ops/s
# Warmup Iteration  28: 1414550.884 ops/s
# Warmup Iteration  29: 1413987.838 ops/s
# Warmup Iteration  30: 1413025.241 ops/s
Iteration   1: 1416515.514 ops/s
Iteration   2: 1414765.236 ops/s
Iteration   3: 1411024.318 ops/s
Iteration   4: 1420083.529 ops/s
Iteration   5: 1410928.671 ops/s
Iteration   6: 1418121.039 ops/s
Iteration   7: 1412863.428 ops/s
Iteration   8: 1410514.936 ops/s
Iteration   9: 1412574.907 ops/s
Iteration  10: 1412467.849 ops/s
Iteration  11: 1417000.833 ops/s
Iteration  12: 1413353.001 ops/s
Iteration  13: 1409646.668 ops/s
Iteration  14: 1417681.977 ops/s
Iteration  15: 1417805.300 ops/s
Iteration  16: 1417116.361 ops/s
Iteration  17: 1414435.512 ops/s
Iteration  18: 1415520.437 ops/s
Iteration  19: 1415442.278 ops/s
Iteration  20: 1411056.638 ops/s
Iteration  21: 1413113.754 ops/s
Iteration  22: 1413114.955 ops/s
Iteration  23: 1416848.043 ops/s
Iteration  24: 1416492.084 ops/s
Iteration  25: 1416327.403 ops/s
Iteration  26: 1415045.108 ops/s
Iteration  27: 1416311.989 ops/s
Iteration  28: 1416359.875 ops/s
Iteration  29: 1412419.871 ops/s
Iteration  30: 1409535.643 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator":
  1414482.905 ±(99.9%) 1861.493 ops/s [Average]
  (min, avg, max) = (1409535.643, 1414482.905, 1420083.529), stdev = 2786.195
  CI (99.9%): [1412621.412, 1416344.398] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toImmutableSortedSet_with_comparator  thrpt   30  1414482.905 ± 1861.493  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toList$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toList

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1310657.346 ops/s
# Warmup Iteration   2: 2645940.358 ops/s
# Warmup Iteration   3: 2962508.277 ops/s
# Warmup Iteration   4: 2986189.656 ops/s
# Warmup Iteration   5: 2418918.916 ops/s
# Warmup Iteration   6: 2994327.424 ops/s
# Warmup Iteration   7: 2998839.805 ops/s
# Warmup Iteration   8: 2985694.306 ops/s
# Warmup Iteration   9: 2991049.897 ops/s
# Warmup Iteration  10: 2978597.717 ops/s
# Warmup Iteration  11: 3000270.590 ops/s
# Warmup Iteration  12: 2993209.169 ops/s
# Warmup Iteration  13: 2986056.820 ops/s
# Warmup Iteration  14: 2991699.177 ops/s
# Warmup Iteration  15: 2996532.474 ops/s
# Warmup Iteration  16: 2987248.258 ops/s
# Warmup Iteration  17: 2983534.018 ops/s
# Warmup Iteration  18: 2994573.296 ops/s
# Warmup Iteration  19: 2994804.073 ops/s
# Warmup Iteration  20: 2997271.045 ops/s
# Warmup Iteration  21: 2995221.440 ops/s
# Warmup Iteration  22: 3000059.007 ops/s
# Warmup Iteration  23: 2986685.088 ops/s
# Warmup Iteration  24: 2985977.867 ops/s
# Warmup Iteration  25: 2987177.989 ops/s
# Warmup Iteration  26: 2982072.904 ops/s
# Warmup Iteration  27: 2988541.772 ops/s
# Warmup Iteration  28: 2989827.676 ops/s
# Warmup Iteration  29: 2985232.165 ops/s
# Warmup Iteration  30: 2989554.408 ops/s
Iteration   1: 2987622.333 ops/s
Iteration   2: 2991349.372 ops/s
Iteration   3: 2993952.174 ops/s
Iteration   4: 2997372.925 ops/s
Iteration   5: 2995474.519 ops/s
Iteration   6: 2996229.523 ops/s
Iteration   7: 2993998.248 ops/s
Iteration   8: 2979733.812 ops/s
Iteration   9: 2985766.746 ops/s
Iteration  10: 2992616.333 ops/s
Iteration  11: 2985015.216 ops/s
Iteration  12: 2992757.883 ops/s
Iteration  13: 2999330.642 ops/s
Iteration  14: 2995109.835 ops/s
Iteration  15: 2995578.905 ops/s
Iteration  16: 2996503.904 ops/s
Iteration  17: 3003019.599 ops/s
Iteration  18: 2994404.409 ops/s
Iteration  19: 3005261.330 ops/s
Iteration  20: 2983390.144 ops/s
Iteration  21: 2996540.995 ops/s
Iteration  22: 2996456.562 ops/s
Iteration  23: 2991211.726 ops/s
Iteration  24: 2986080.195 ops/s
Iteration  25: 2988348.678 ops/s
Iteration  26: 2985290.640 ops/s
Iteration  27: 3002299.672 ops/s
Iteration  28: 3011068.437 ops/s
Iteration  29: 3003899.186 ops/s
Iteration  30: 2990872.871 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toList":
  2993885.227 ±(99.9%) 4706.980 ops/s [Average]
  (min, avg, max) = (2979733.812, 2993885.227, 3011068.437), stdev = 7045.187
  CI (99.9%): [2989178.247, 2998592.208] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toList  thrpt   30  2993885.227 ± 4706.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 996617.092 ops/s
# Warmup Iteration   2: 2355341.505 ops/s
# Warmup Iteration   3: 2410476.838 ops/s
# Warmup Iteration   4: 1970899.803 ops/s
# Warmup Iteration   5: 2411669.460 ops/s
# Warmup Iteration   6: 2414688.310 ops/s
# Warmup Iteration   7: 2430928.310 ops/s
# Warmup Iteration   8: 2416226.796 ops/s
# Warmup Iteration   9: 2423116.936 ops/s
# Warmup Iteration  10: 2427722.662 ops/s
# Warmup Iteration  11: 2406022.505 ops/s
# Warmup Iteration  12: 2420658.939 ops/s
# Warmup Iteration  13: 2425277.349 ops/s
# Warmup Iteration  14: 2405218.967 ops/s
# Warmup Iteration  15: 2421471.947 ops/s
# Warmup Iteration  16: 2424213.053 ops/s
# Warmup Iteration  17: 2422874.193 ops/s
# Warmup Iteration  18: 2417776.610 ops/s
# Warmup Iteration  19: 2420110.782 ops/s
# Warmup Iteration  20: 2414328.046 ops/s
# Warmup Iteration  21: 2416273.334 ops/s
# Warmup Iteration  22: 2433593.751 ops/s
# Warmup Iteration  23: 2429626.120 ops/s
# Warmup Iteration  24: 2448965.747 ops/s
# Warmup Iteration  25: 2425657.886 ops/s
# Warmup Iteration  26: 2431751.883 ops/s
# Warmup Iteration  27: 2419498.174 ops/s
# Warmup Iteration  28: 2426011.520 ops/s
# Warmup Iteration  29: 2417389.813 ops/s
# Warmup Iteration  30: 2432055.023 ops/s
Iteration   1: 2420402.165 ops/s
Iteration   2: 2422138.735 ops/s
Iteration   3: 2444502.771 ops/s
Iteration   4: 2419743.041 ops/s
Iteration   5: 2421921.897 ops/s
Iteration   6: 2417673.566 ops/s
Iteration   7: 2438334.920 ops/s
Iteration   8: 2432069.608 ops/s
Iteration   9: 2410572.598 ops/s
Iteration  10: 2426128.547 ops/s
Iteration  11: 2420685.101 ops/s
Iteration  12: 2428203.774 ops/s
Iteration  13: 2432969.243 ops/s
Iteration  14: 2410081.586 ops/s
Iteration  15: 2409235.601 ops/s
Iteration  16: 2430126.711 ops/s
Iteration  17: 2421337.869 ops/s
Iteration  18: 2435393.349 ops/s
Iteration  19: 2432101.417 ops/s
Iteration  20: 2422205.669 ops/s
Iteration  21: 2414344.819 ops/s
Iteration  22: 2426110.788 ops/s
Iteration  23: 2425490.026 ops/s
Iteration  24: 2417708.800 ops/s
Iteration  25: 2453622.121 ops/s
Iteration  26: 2422433.754 ops/s
Iteration  27: 2441213.620 ops/s
Iteration  28: 2396328.179 ops/s
Iteration  29: 2438025.802 ops/s
Iteration  30: 2422422.724 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMap":
  2425117.627 ±(99.9%) 7809.178 ops/s [Average]
  (min, avg, max) = (2396328.179, 2425117.627, 2453622.121), stdev = 11688.411
  CI (99.9%): [2417308.449, 2432926.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toMap  thrpt   30  2425117.627 ± 7809.178  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1653569.654 ops/s
# Warmup Iteration   2: 2986350.104 ops/s
# Warmup Iteration   3: 3407212.335 ops/s
# Warmup Iteration   4: 3425796.497 ops/s
# Warmup Iteration   5: 3428534.884 ops/s
# Warmup Iteration   6: 2749779.178 ops/s
# Warmup Iteration   7: 3428016.697 ops/s
# Warmup Iteration   8: 3422908.249 ops/s
# Warmup Iteration   9: 3428656.069 ops/s
# Warmup Iteration  10: 3439638.751 ops/s
# Warmup Iteration  11: 3436205.132 ops/s
# Warmup Iteration  12: 3433508.585 ops/s
# Warmup Iteration  13: 3429749.249 ops/s
# Warmup Iteration  14: 3432507.446 ops/s
# Warmup Iteration  15: 3429587.169 ops/s
# Warmup Iteration  16: 3426539.962 ops/s
# Warmup Iteration  17: 3439571.407 ops/s
# Warmup Iteration  18: 3425015.135 ops/s
# Warmup Iteration  19: 3436557.254 ops/s
# Warmup Iteration  20: 3436675.367 ops/s
# Warmup Iteration  21: 3441466.739 ops/s
# Warmup Iteration  22: 3429818.285 ops/s
# Warmup Iteration  23: 3432360.974 ops/s
# Warmup Iteration  24: 3425454.071 ops/s
# Warmup Iteration  25: 3429113.489 ops/s
# Warmup Iteration  26: 3424297.136 ops/s
# Warmup Iteration  27: 3428354.023 ops/s
# Warmup Iteration  28: 3430473.350 ops/s
# Warmup Iteration  29: 3421890.990 ops/s
# Warmup Iteration  30: 3417442.501 ops/s
Iteration   1: 3427846.152 ops/s
Iteration   2: 3424547.111 ops/s
Iteration   3: 3424366.662 ops/s
Iteration   4: 3437514.225 ops/s
Iteration   5: 3421717.125 ops/s
Iteration   6: 3428615.828 ops/s
Iteration   7: 3419264.660 ops/s
Iteration   8: 3430280.488 ops/s
Iteration   9: 3442289.175 ops/s
Iteration  10: 3435611.334 ops/s
Iteration  11: 3431763.740 ops/s
Iteration  12: 3426002.945 ops/s
Iteration  13: 3426357.803 ops/s
Iteration  14: 3426280.082 ops/s
Iteration  15: 3425567.455 ops/s
Iteration  16: 3433311.092 ops/s
Iteration  17: 3429757.010 ops/s
Iteration  18: 3422139.530 ops/s
Iteration  19: 3432820.893 ops/s
Iteration  20: 3409733.779 ops/s
Iteration  21: 3438534.540 ops/s
Iteration  22: 3433938.621 ops/s
Iteration  23: 3438873.938 ops/s
Iteration  24: 3416991.618 ops/s
Iteration  25: 3402945.562 ops/s
Iteration  26: 3423108.660 ops/s
Iteration  27: 3427519.698 ops/s
Iteration  28: 3429522.046 ops/s
Iteration  29: 3430165.390 ops/s
Iteration  30: 3437898.872 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapOfItemToCount":
  3427842.868 ±(99.9%) 5676.190 ops/s [Average]
  (min, avg, max) = (3402945.562, 3427842.868, 3442289.175), stdev = 8495.855
  CI (99.9%): [3422166.677, 3433519.058] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  3427842.868 ± 5676.190  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 859908.817 ops/s
# Warmup Iteration   2: 2076086.966 ops/s
# Warmup Iteration   3: 2070830.746 ops/s
# Warmup Iteration   4: 1705737.785 ops/s
# Warmup Iteration   5: 2072873.904 ops/s
# Warmup Iteration   6: 2059732.019 ops/s
# Warmup Iteration   7: 2049723.221 ops/s
# Warmup Iteration   8: 2069073.503 ops/s
# Warmup Iteration   9: 2069094.139 ops/s
# Warmup Iteration  10: 2061890.093 ops/s
# Warmup Iteration  11: 2069605.208 ops/s
# Warmup Iteration  12: 2068915.355 ops/s
# Warmup Iteration  13: 2066557.073 ops/s
# Warmup Iteration  14: 2073937.207 ops/s
# Warmup Iteration  15: 2070479.021 ops/s
# Warmup Iteration  16: 2061879.136 ops/s
# Warmup Iteration  17: 2073792.834 ops/s
# Warmup Iteration  18: 2062765.577 ops/s
# Warmup Iteration  19: 2075387.910 ops/s
# Warmup Iteration  20: 2077380.289 ops/s
# Warmup Iteration  21: 2065151.545 ops/s
# Warmup Iteration  22: 2069022.506 ops/s
# Warmup Iteration  23: 2072908.061 ops/s
# Warmup Iteration  24: 2068968.880 ops/s
# Warmup Iteration  25: 2068417.181 ops/s
# Warmup Iteration  26: 2062458.893 ops/s
# Warmup Iteration  27: 2075988.625 ops/s
# Warmup Iteration  28: 2050144.075 ops/s
# Warmup Iteration  29: 2044797.878 ops/s
# Warmup Iteration  30: 2066442.751 ops/s
Iteration   1: 2068874.282 ops/s
Iteration   2: 2056253.486 ops/s
Iteration   3: 2082494.791 ops/s
Iteration   4: 2066716.757 ops/s
Iteration   5: 2052984.209 ops/s
Iteration   6: 2081446.199 ops/s
Iteration   7: 2066596.687 ops/s
Iteration   8: 2081934.445 ops/s
Iteration   9: 2063182.475 ops/s
Iteration  10: 2068173.017 ops/s
Iteration  11: 2075177.580 ops/s
Iteration  12: 2066885.538 ops/s
Iteration  13: 2067699.902 ops/s
Iteration  14: 2087088.947 ops/s
Iteration  15: 2067608.980 ops/s
Iteration  16: 2083975.824 ops/s
Iteration  17: 2074840.187 ops/s
Iteration  18: 2089328.864 ops/s
Iteration  19: 2083961.856 ops/s
Iteration  20: 2072601.628 ops/s
Iteration  21: 2079497.070 ops/s
Iteration  22: 2074024.099 ops/s
Iteration  23: 2082990.040 ops/s
Iteration  24: 2071918.423 ops/s
Iteration  25: 2081402.850 ops/s
Iteration  26: 2072209.384 ops/s
Iteration  27: 2075135.620 ops/s
Iteration  28: 2070848.351 ops/s
Iteration  29: 2066607.587 ops/s
Iteration  30: 2070968.204 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toMapTarget":
  2073447.576 ±(99.9%) 5834.775 ops/s [Average]
  (min, avg, max) = (2052984.209, 2073447.576, 2089328.864), stdev = 8733.216
  CI (99.9%): [2067612.802, 2079282.351] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toMapTarget  thrpt   30  2073447.576 ± 5834.775  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSet$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSet

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 860860.598 ops/s
# Warmup Iteration   2: 1533495.953 ops/s
# Warmup Iteration   3: 1798097.769 ops/s
# Warmup Iteration   4: 1797902.192 ops/s
# Warmup Iteration   5: 1813474.770 ops/s
# Warmup Iteration   6: 1471485.217 ops/s
# Warmup Iteration   7: 1815590.222 ops/s
# Warmup Iteration   8: 1803342.064 ops/s
# Warmup Iteration   9: 1804500.959 ops/s
# Warmup Iteration  10: 1809871.723 ops/s
# Warmup Iteration  11: 1810171.564 ops/s
# Warmup Iteration  12: 1803751.249 ops/s
# Warmup Iteration  13: 1803821.160 ops/s
# Warmup Iteration  14: 1809201.940 ops/s
# Warmup Iteration  15: 1809811.166 ops/s
# Warmup Iteration  16: 1810674.167 ops/s
# Warmup Iteration  17: 1814078.399 ops/s
# Warmup Iteration  18: 1811057.481 ops/s
# Warmup Iteration  19: 1810417.497 ops/s
# Warmup Iteration  20: 1811841.894 ops/s
# Warmup Iteration  21: 1816661.347 ops/s
# Warmup Iteration  22: 1810320.052 ops/s
# Warmup Iteration  23: 1805644.402 ops/s
# Warmup Iteration  24: 1810805.499 ops/s
# Warmup Iteration  25: 1810492.494 ops/s
# Warmup Iteration  26: 1808301.074 ops/s
# Warmup Iteration  27: 1814013.138 ops/s
# Warmup Iteration  28: 1811515.905 ops/s
# Warmup Iteration  29: 1809963.183 ops/s
# Warmup Iteration  30: 1811452.064 ops/s
Iteration   1: 1810251.224 ops/s
Iteration   2: 1823462.807 ops/s
Iteration   3: 1817141.999 ops/s
Iteration   4: 1817422.674 ops/s
Iteration   5: 1803191.103 ops/s
Iteration   6: 1807853.159 ops/s
Iteration   7: 1813347.839 ops/s
Iteration   8: 1813779.157 ops/s
Iteration   9: 1817316.580 ops/s
Iteration  10: 1815121.279 ops/s
Iteration  11: 1810678.600 ops/s
Iteration  12: 1808810.639 ops/s
Iteration  13: 1810637.287 ops/s
Iteration  14: 1816262.992 ops/s
Iteration  15: 1807785.476 ops/s
Iteration  16: 1814182.004 ops/s
Iteration  17: 1814896.410 ops/s
Iteration  18: 1810659.738 ops/s
Iteration  19: 1816129.038 ops/s
Iteration  20: 1811846.901 ops/s
Iteration  21: 1819267.046 ops/s
Iteration  22: 1815017.605 ops/s
Iteration  23: 1815559.172 ops/s
Iteration  24: 1812721.587 ops/s
Iteration  25: 1805371.070 ops/s
Iteration  26: 1810671.199 ops/s
Iteration  27: 1806984.067 ops/s
Iteration  28: 1816532.863 ops/s
Iteration  29: 1808275.340 ops/s
Iteration  30: 1811464.493 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSet":
  1812754.712 ±(99.9%) 2970.853 ops/s [Average]
  (min, avg, max) = (1803191.103, 1812754.712, 1823462.807), stdev = 4446.633
  CI (99.9%): [1809783.858, 1815725.565] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSet  thrpt   30  1812754.712 ± 2970.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBagBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBagBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 292279.370 ops/s
# Warmup Iteration   2: 600710.846 ops/s
# Warmup Iteration   3: 669939.067 ops/s
# Warmup Iteration   4: 673590.608 ops/s
# Warmup Iteration   5: 566051.015 ops/s
# Warmup Iteration   6: 674694.177 ops/s
# Warmup Iteration   7: 673507.828 ops/s
# Warmup Iteration   8: 673428.438 ops/s
# Warmup Iteration   9: 674239.277 ops/s
# Warmup Iteration  10: 674958.898 ops/s
# Warmup Iteration  11: 673783.620 ops/s
# Warmup Iteration  12: 673665.611 ops/s
# Warmup Iteration  13: 675476.680 ops/s
# Warmup Iteration  14: 672116.596 ops/s
# Warmup Iteration  15: 672984.074 ops/s
# Warmup Iteration  16: 674477.761 ops/s
# Warmup Iteration  17: 671066.281 ops/s
# Warmup Iteration  18: 670121.376 ops/s
# Warmup Iteration  19: 672184.185 ops/s
# Warmup Iteration  20: 672096.204 ops/s
# Warmup Iteration  21: 672496.763 ops/s
# Warmup Iteration  22: 673779.492 ops/s
# Warmup Iteration  23: 673241.613 ops/s
# Warmup Iteration  24: 671606.533 ops/s
# Warmup Iteration  25: 671957.387 ops/s
# Warmup Iteration  26: 672422.394 ops/s
# Warmup Iteration  27: 674243.858 ops/s
# Warmup Iteration  28: 673599.316 ops/s
# Warmup Iteration  29: 673819.794 ops/s
# Warmup Iteration  30: 672837.524 ops/s
Iteration   1: 674512.489 ops/s
Iteration   2: 672974.492 ops/s
Iteration   3: 671404.010 ops/s
Iteration   4: 672642.252 ops/s
Iteration   5: 674959.479 ops/s
Iteration   6: 673794.778 ops/s
Iteration   7: 673716.287 ops/s
Iteration   8: 674070.810 ops/s
Iteration   9: 670845.019 ops/s
Iteration  10: 674060.244 ops/s
Iteration  11: 669959.165 ops/s
Iteration  12: 673715.087 ops/s
Iteration  13: 674427.778 ops/s
Iteration  14: 673227.572 ops/s
Iteration  15: 669979.043 ops/s
Iteration  16: 673708.506 ops/s
Iteration  17: 673187.536 ops/s
Iteration  18: 673660.158 ops/s
Iteration  19: 674099.157 ops/s
Iteration  20: 671104.688 ops/s
Iteration  21: 673556.059 ops/s
Iteration  22: 673557.652 ops/s
Iteration  23: 673421.478 ops/s
Iteration  24: 672430.913 ops/s
Iteration  25: 675225.176 ops/s
Iteration  26: 673842.850 ops/s
Iteration  27: 672598.908 ops/s
Iteration  28: 674041.550 ops/s
Iteration  29: 671118.125 ops/s
Iteration  30: 675291.590 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBagBy":
  673171.095 ±(99.9%) 957.429 ops/s [Average]
  (min, avg, max) = (669959.165, 673171.095, 675291.590), stdev = 1433.035
  CI (99.9%): [672213.666, 674128.524] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_toSortedBagBy  thrpt   30  673171.095 ± 957.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 460078.065 ops/s
# Warmup Iteration   2: 877906.332 ops/s
# Warmup Iteration   3: 1010294.549 ops/s
# Warmup Iteration   4: 1018208.272 ops/s
# Warmup Iteration   5: 1015132.431 ops/s
# Warmup Iteration   6: 849292.419 ops/s
# Warmup Iteration   7: 1018687.279 ops/s
# Warmup Iteration   8: 1013829.893 ops/s
# Warmup Iteration   9: 1014174.238 ops/s
# Warmup Iteration  10: 1014716.204 ops/s
# Warmup Iteration  11: 1016508.535 ops/s
# Warmup Iteration  12: 1015356.889 ops/s
# Warmup Iteration  13: 1016019.185 ops/s
# Warmup Iteration  14: 1017452.966 ops/s
# Warmup Iteration  15: 1014304.423 ops/s
# Warmup Iteration  16: 1016972.285 ops/s
# Warmup Iteration  17: 1016463.934 ops/s
# Warmup Iteration  18: 1014927.759 ops/s
# Warmup Iteration  19: 1016790.890 ops/s
# Warmup Iteration  20: 1014679.357 ops/s
# Warmup Iteration  21: 1017395.151 ops/s
# Warmup Iteration  22: 1016387.271 ops/s
# Warmup Iteration  23: 1012311.145 ops/s
# Warmup Iteration  24: 1016447.668 ops/s
# Warmup Iteration  25: 1017023.681 ops/s
# Warmup Iteration  26: 1019050.038 ops/s
# Warmup Iteration  27: 1018516.333 ops/s
# Warmup Iteration  28: 1015613.869 ops/s
# Warmup Iteration  29: 1015974.222 ops/s
# Warmup Iteration  30: 1016249.994 ops/s
Iteration   1: 1016266.755 ops/s
Iteration   2: 1019873.461 ops/s
Iteration   3: 1014710.173 ops/s
Iteration   4: 1019065.483 ops/s
Iteration   5: 1015317.088 ops/s
Iteration   6: 1014952.232 ops/s
Iteration   7: 1018100.322 ops/s
Iteration   8: 1015665.664 ops/s
Iteration   9: 1015871.925 ops/s
Iteration  10: 1015106.060 ops/s
Iteration  11: 1015697.153 ops/s
Iteration  12: 1017566.394 ops/s
Iteration  13: 1014297.071 ops/s
Iteration  14: 1017624.297 ops/s
Iteration  15: 1020096.910 ops/s
Iteration  16: 1021615.637 ops/s
Iteration  17: 1019570.357 ops/s
Iteration  18: 1016121.092 ops/s
Iteration  19: 1017815.505 ops/s
Iteration  20: 1018710.597 ops/s
Iteration  21: 1017430.187 ops/s
Iteration  22: 1019618.912 ops/s
Iteration  23: 1017223.568 ops/s
Iteration  24: 1022392.527 ops/s
Iteration  25: 1017877.862 ops/s
Iteration  26: 1020750.218 ops/s
Iteration  27: 1020597.790 ops/s
Iteration  28: 1020218.453 ops/s
Iteration  29: 1017950.326 ops/s
Iteration  30: 1016886.013 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering":
  1017833.001 ±(99.9%) 1463.600 ops/s [Average]
  (min, avg, max) = (1014297.071, 1017833.001, 1022392.527), stdev = 2190.648
  CI (99.9%): [1016369.401, 1019296.601] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedBag_natural_ordering  thrpt   30  1017833.001 ± 1463.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 522910.787 ops/s
# Warmup Iteration   2: 971242.485 ops/s
# Warmup Iteration   3: 1130245.521 ops/s
# Warmup Iteration   4: 1134508.954 ops/s
# Warmup Iteration   5: 1135435.652 ops/s
# Warmup Iteration   6: 945369.911 ops/s
# Warmup Iteration   7: 1132969.760 ops/s
# Warmup Iteration   8: 1130952.427 ops/s
# Warmup Iteration   9: 1132334.873 ops/s
# Warmup Iteration  10: 1132187.236 ops/s
# Warmup Iteration  11: 1128937.621 ops/s
# Warmup Iteration  12: 1132496.189 ops/s
# Warmup Iteration  13: 1131564.860 ops/s
# Warmup Iteration  14: 1131759.493 ops/s
# Warmup Iteration  15: 1131839.553 ops/s
# Warmup Iteration  16: 1132032.421 ops/s
# Warmup Iteration  17: 1132788.582 ops/s
# Warmup Iteration  18: 1132381.964 ops/s
# Warmup Iteration  19: 1131595.874 ops/s
# Warmup Iteration  20: 1134159.060 ops/s
# Warmup Iteration  21: 1134678.967 ops/s
# Warmup Iteration  22: 1135349.840 ops/s
# Warmup Iteration  23: 1133412.400 ops/s
# Warmup Iteration  24: 1131382.840 ops/s
# Warmup Iteration  25: 1133480.178 ops/s
# Warmup Iteration  26: 1133572.374 ops/s
# Warmup Iteration  27: 1134527.574 ops/s
# Warmup Iteration  28: 1127968.617 ops/s
# Warmup Iteration  29: 1135760.206 ops/s
# Warmup Iteration  30: 1135471.770 ops/s
Iteration   1: 1132484.562 ops/s
Iteration   2: 1132030.347 ops/s
Iteration   3: 1133724.405 ops/s
Iteration   4: 1132529.048 ops/s
Iteration   5: 1136142.232 ops/s
Iteration   6: 1131564.613 ops/s
Iteration   7: 1138097.714 ops/s
Iteration   8: 1128566.565 ops/s
Iteration   9: 1129404.001 ops/s
Iteration  10: 1134858.965 ops/s
Iteration  11: 1133209.374 ops/s
Iteration  12: 1133658.231 ops/s
Iteration  13: 1133874.642 ops/s
Iteration  14: 1131849.805 ops/s
Iteration  15: 1128247.141 ops/s
Iteration  16: 1130052.172 ops/s
Iteration  17: 1136468.195 ops/s
Iteration  18: 1134944.470 ops/s
Iteration  19: 1131673.146 ops/s
Iteration  20: 1134625.952 ops/s
Iteration  21: 1136879.130 ops/s
Iteration  22: 1128134.899 ops/s
Iteration  23: 1130949.048 ops/s
Iteration  24: 1133345.294 ops/s
Iteration  25: 1132744.937 ops/s
Iteration  26: 1130640.530 ops/s
Iteration  27: 1132860.961 ops/s
Iteration  28: 1135729.874 ops/s
Iteration  29: 1126214.430 ops/s
Iteration  30: 1131261.668 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_comparator":
  1132558.878 ±(99.9%) 1878.876 ops/s [Average]
  (min, avg, max) = (1126214.430, 1132558.878, 1138097.714), stdev = 2812.213
  CI (99.9%): [1130680.003, 1134437.754] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedBag_with_comparator  thrpt   30  1132558.878 ± 1878.876  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 476444.703 ops/s
# Warmup Iteration   2: 519847.723 ops/s
# Warmup Iteration   3: 641460.855 ops/s
# Warmup Iteration   4: 686980.423 ops/s
# Warmup Iteration   5: 688118.385 ops/s
# Warmup Iteration   6: 680179.182 ops/s
# Warmup Iteration   7: 687021.095 ops/s
# Warmup Iteration   8: 685487.839 ops/s
# Warmup Iteration   9: 686630.786 ops/s
# Warmup Iteration  10: 685245.017 ops/s
# Warmup Iteration  11: 685253.316 ops/s
# Warmup Iteration  12: 685756.656 ops/s
# Warmup Iteration  13: 566774.128 ops/s
# Warmup Iteration  14: 683560.794 ops/s
# Warmup Iteration  15: 685695.247 ops/s
# Warmup Iteration  16: 682830.137 ops/s
# Warmup Iteration  17: 715712.857 ops/s
# Warmup Iteration  18: 711814.233 ops/s
# Warmup Iteration  19: 710977.606 ops/s
# Warmup Iteration  20: 713194.693 ops/s
# Warmup Iteration  21: 715754.233 ops/s
# Warmup Iteration  22: 713559.854 ops/s
# Warmup Iteration  23: 712064.995 ops/s
# Warmup Iteration  24: 715034.986 ops/s
# Warmup Iteration  25: 715217.671 ops/s
# Warmup Iteration  26: 713368.123 ops/s
# Warmup Iteration  27: 715087.615 ops/s
# Warmup Iteration  28: 713906.966 ops/s
# Warmup Iteration  29: 715849.357 ops/s
# Warmup Iteration  30: 716083.055 ops/s
Iteration   1: 716831.648 ops/s
Iteration   2: 717211.390 ops/s
Iteration   3: 713567.491 ops/s
Iteration   4: 716815.645 ops/s
Iteration   5: 714245.028 ops/s
Iteration   6: 715719.051 ops/s
Iteration   7: 714659.632 ops/s
Iteration   8: 715771.313 ops/s
Iteration   9: 715969.644 ops/s
Iteration  10: 712717.198 ops/s
Iteration  11: 714609.498 ops/s
Iteration  12: 716744.888 ops/s
Iteration  13: 717305.577 ops/s
Iteration  14: 710673.879 ops/s
Iteration  15: 713617.185 ops/s
Iteration  16: 715570.520 ops/s
Iteration  17: 711509.335 ops/s
Iteration  18: 714774.693 ops/s
Iteration  19: 715205.230 ops/s
Iteration  20: 714808.422 ops/s
Iteration  21: 712707.104 ops/s
Iteration  22: 718329.759 ops/s
Iteration  23: 712419.859 ops/s
Iteration  24: 714596.538 ops/s
Iteration  25: 713546.575 ops/s
Iteration  26: 713126.623 ops/s
Iteration  27: 716766.201 ops/s
Iteration  28: 716861.146 ops/s
Iteration  29: 716368.991 ops/s
Iteration  30: 715455.183 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedBag_with_null":
  714950.175 ±(99.9%) 1244.989 ops/s [Average]
  (min, avg, max) = (710673.879, 714950.175, 718329.759), stdev = 1863.440
  CI (99.9%): [713705.186, 716195.163] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedBag_with_null  thrpt   30  714950.175 ± 1244.989  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1011311.784 ops/s
# Warmup Iteration   2: 1548196.474 ops/s
# Warmup Iteration   3: 1844866.062 ops/s
# Warmup Iteration   4: 1854701.346 ops/s
# Warmup Iteration   5: 1853249.915 ops/s
# Warmup Iteration   6: 1858115.426 ops/s
# Warmup Iteration   7: 1526751.638 ops/s
# Warmup Iteration   8: 1850501.063 ops/s
# Warmup Iteration   9: 1856439.896 ops/s
# Warmup Iteration  10: 1850985.781 ops/s
# Warmup Iteration  11: 1849147.326 ops/s
# Warmup Iteration  12: 1854340.113 ops/s
# Warmup Iteration  13: 1851802.996 ops/s
# Warmup Iteration  14: 1848065.935 ops/s
# Warmup Iteration  15: 1845695.377 ops/s
# Warmup Iteration  16: 1856646.196 ops/s
# Warmup Iteration  17: 1856038.778 ops/s
# Warmup Iteration  18: 1858319.141 ops/s
# Warmup Iteration  19: 1856209.585 ops/s
# Warmup Iteration  20: 1858628.320 ops/s
# Warmup Iteration  21: 1852219.278 ops/s
# Warmup Iteration  22: 1856750.398 ops/s
# Warmup Iteration  23: 1858930.876 ops/s
# Warmup Iteration  24: 1853578.493 ops/s
# Warmup Iteration  25: 1856131.388 ops/s
# Warmup Iteration  26: 1858242.859 ops/s
# Warmup Iteration  27: 1858500.721 ops/s
# Warmup Iteration  28: 1853856.465 ops/s
# Warmup Iteration  29: 1857352.877 ops/s
# Warmup Iteration  30: 1857688.308 ops/s
Iteration   1: 1858591.815 ops/s
Iteration   2: 1853557.221 ops/s
Iteration   3: 1859954.861 ops/s
Iteration   4: 1864328.043 ops/s
Iteration   5: 1857142.236 ops/s
Iteration   6: 1857206.742 ops/s
Iteration   7: 1858762.083 ops/s
Iteration   8: 1852795.790 ops/s
Iteration   9: 1850215.641 ops/s
Iteration  10: 1861931.513 ops/s
Iteration  11: 1859295.555 ops/s
Iteration  12: 1863434.146 ops/s
Iteration  13: 1865391.629 ops/s
Iteration  14: 1853421.932 ops/s
Iteration  15: 1855672.337 ops/s
Iteration  16: 1856237.368 ops/s
Iteration  17: 1860711.493 ops/s
Iteration  18: 1852916.198 ops/s
Iteration  19: 1860102.451 ops/s
Iteration  20: 1856189.169 ops/s
Iteration  21: 1859607.460 ops/s
Iteration  22: 1851788.060 ops/s
Iteration  23: 1857497.243 ops/s
Iteration  24: 1856183.554 ops/s
Iteration  25: 1861798.679 ops/s
Iteration  26: 1853462.284 ops/s
Iteration  27: 1860236.333 ops/s
Iteration  28: 1851678.400 ops/s
Iteration  29: 1858236.601 ops/s
Iteration  30: 1863843.705 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy":
  1857739.685 ±(99.9%) 2724.197 ops/s [Average]
  (min, avg, max) = (1850215.641, 1857739.685, 1865391.629), stdev = 4077.451
  CI (99.9%): [1855015.487, 1860463.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedListBy  thrpt   30  1857739.685 ± 2724.197  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 914245.055 ops/s
# Warmup Iteration   2: 1256725.644 ops/s
# Warmup Iteration   3: 1603271.345 ops/s
# Warmup Iteration   4: 1592808.450 ops/s
# Warmup Iteration   5: 1605792.803 ops/s
# Warmup Iteration   6: 1605883.290 ops/s
# Warmup Iteration   7: 1605171.215 ops/s
# Warmup Iteration   8: 1314359.916 ops/s
# Warmup Iteration   9: 1602579.153 ops/s
# Warmup Iteration  10: 1604112.934 ops/s
# Warmup Iteration  11: 1602630.941 ops/s
# Warmup Iteration  12: 1599479.685 ops/s
# Warmup Iteration  13: 1598754.684 ops/s
# Warmup Iteration  14: 1603769.404 ops/s
# Warmup Iteration  15: 1601500.236 ops/s
# Warmup Iteration  16: 1601607.977 ops/s
# Warmup Iteration  17: 1604674.847 ops/s
# Warmup Iteration  18: 1601480.690 ops/s
# Warmup Iteration  19: 1607223.176 ops/s
# Warmup Iteration  20: 1603074.542 ops/s
# Warmup Iteration  21: 1606070.570 ops/s
# Warmup Iteration  22: 1608461.066 ops/s
# Warmup Iteration  23: 1604898.018 ops/s
# Warmup Iteration  24: 1607369.133 ops/s
# Warmup Iteration  25: 1606295.185 ops/s
# Warmup Iteration  26: 1605792.722 ops/s
# Warmup Iteration  27: 1609176.562 ops/s
# Warmup Iteration  28: 1607384.202 ops/s
# Warmup Iteration  29: 1605948.996 ops/s
# Warmup Iteration  30: 1607295.788 ops/s
Iteration   1: 1603748.883 ops/s
Iteration   2: 1605556.980 ops/s
Iteration   3: 1602091.648 ops/s
Iteration   4: 1605988.704 ops/s
Iteration   5: 1602937.211 ops/s
Iteration   6: 1605222.783 ops/s
Iteration   7: 1602089.107 ops/s
Iteration   8: 1603039.009 ops/s
Iteration   9: 1605274.710 ops/s
Iteration  10: 1604747.022 ops/s
Iteration  11: 1604967.273 ops/s
Iteration  12: 1594328.956 ops/s
Iteration  13: 1612358.433 ops/s
Iteration  14: 1605372.082 ops/s
Iteration  15: 1606608.507 ops/s
Iteration  16: 1608769.863 ops/s
Iteration  17: 1605830.188 ops/s
Iteration  18: 1606419.049 ops/s
Iteration  19: 1607298.620 ops/s
Iteration  20: 1609439.344 ops/s
Iteration  21: 1606780.595 ops/s
Iteration  22: 1606591.528 ops/s
Iteration  23: 1601474.483 ops/s
Iteration  24: 1603264.147 ops/s
Iteration  25: 1598406.821 ops/s
Iteration  26: 1607618.975 ops/s
Iteration  27: 1606249.358 ops/s
Iteration  28: 1607768.679 ops/s
Iteration  29: 1610821.968 ops/s
Iteration  30: 1602135.534 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListBy_with_null":
  1605106.682 ±(99.9%) 2364.369 ops/s [Average]
  (min, avg, max) = (1594328.956, 1605106.682, 1612358.433), stdev = 3538.877
  CI (99.9%): [1602742.313, 1607471.051] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedListBy_with_null  thrpt   30  1605106.682 ± 2364.369  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1851344.887 ops/s
# Warmup Iteration   2: 3329532.019 ops/s
# Warmup Iteration   3: 3868914.197 ops/s
# Warmup Iteration   4: 3875993.475 ops/s
# Warmup Iteration   5: 3892719.400 ops/s
# Warmup Iteration   6: 3159319.025 ops/s
# Warmup Iteration   7: 3895494.995 ops/s
# Warmup Iteration   8: 3895680.996 ops/s
# Warmup Iteration   9: 3900346.213 ops/s
# Warmup Iteration  10: 3890819.319 ops/s
# Warmup Iteration  11: 3886961.665 ops/s
# Warmup Iteration  12: 3892092.887 ops/s
# Warmup Iteration  13: 3893795.273 ops/s
# Warmup Iteration  14: 3880706.531 ops/s
# Warmup Iteration  15: 3897301.885 ops/s
# Warmup Iteration  16: 3881181.867 ops/s
# Warmup Iteration  17: 3898402.499 ops/s
# Warmup Iteration  18: 3881834.137 ops/s
# Warmup Iteration  19: 3893255.234 ops/s
# Warmup Iteration  20: 3887865.594 ops/s
# Warmup Iteration  21: 3894641.946 ops/s
# Warmup Iteration  22: 3893828.682 ops/s
# Warmup Iteration  23: 3888386.324 ops/s
# Warmup Iteration  24: 3889236.872 ops/s
# Warmup Iteration  25: 3899951.937 ops/s
# Warmup Iteration  26: 3891809.123 ops/s
# Warmup Iteration  27: 3889280.726 ops/s
# Warmup Iteration  28: 3898534.129 ops/s
# Warmup Iteration  29: 3893277.420 ops/s
# Warmup Iteration  30: 3885135.397 ops/s
Iteration   1: 3886161.295 ops/s
Iteration   2: 3888066.051 ops/s
Iteration   3: 3914195.999 ops/s
Iteration   4: 3873540.104 ops/s
Iteration   5: 3903306.830 ops/s
Iteration   6: 3904660.260 ops/s
Iteration   7: 3896096.545 ops/s
Iteration   8: 3889936.524 ops/s
Iteration   9: 3891271.420 ops/s
Iteration  10: 3893622.238 ops/s
Iteration  11: 3894348.351 ops/s
Iteration  12: 3885153.124 ops/s
Iteration  13: 3895129.449 ops/s
Iteration  14: 3883399.480 ops/s
Iteration  15: 3903790.785 ops/s
Iteration  16: 3891653.050 ops/s
Iteration  17: 3892399.623 ops/s
Iteration  18: 3892465.839 ops/s
Iteration  19: 3886394.073 ops/s
Iteration  20: 3895956.421 ops/s
Iteration  21: 3881155.903 ops/s
Iteration  22: 3884790.162 ops/s
Iteration  23: 3895962.822 ops/s
Iteration  24: 3892673.138 ops/s
Iteration  25: 3893930.825 ops/s
Iteration  26: 3876262.256 ops/s
Iteration  27: 3894705.937 ops/s
Iteration  28: 3876672.184 ops/s
Iteration  29: 3896240.415 ops/s
Iteration  30: 3892583.509 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedListWith":
  3891550.820 ±(99.9%) 5832.069 ops/s [Average]
  (min, avg, max) = (3873540.104, 3891550.820, 3914195.999), stdev = 8729.167
  CI (99.9%): [3885718.752, 3897382.889] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedListWith  thrpt   30  3891550.820 ± 5832.069  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 940918.986 ops/s
# Warmup Iteration   2: 2115508.135 ops/s
# Warmup Iteration   3: 2223400.389 ops/s
# Warmup Iteration   4: 2118766.317 ops/s
# Warmup Iteration   5: 1955845.357 ops/s
# Warmup Iteration   6: 2225727.607 ops/s
# Warmup Iteration   7: 2219942.510 ops/s
# Warmup Iteration   8: 2227905.110 ops/s
# Warmup Iteration   9: 2225778.292 ops/s
# Warmup Iteration  10: 2230451.536 ops/s
# Warmup Iteration  11: 2230834.018 ops/s
# Warmup Iteration  12: 2223425.333 ops/s
# Warmup Iteration  13: 2231419.127 ops/s
# Warmup Iteration  14: 2226138.396 ops/s
# Warmup Iteration  15: 2220785.097 ops/s
# Warmup Iteration  16: 2226152.912 ops/s
# Warmup Iteration  17: 2230769.243 ops/s
# Warmup Iteration  18: 2235732.319 ops/s
# Warmup Iteration  19: 2224731.355 ops/s
# Warmup Iteration  20: 2231429.173 ops/s
# Warmup Iteration  21: 2239790.772 ops/s
# Warmup Iteration  22: 2227920.946 ops/s
# Warmup Iteration  23: 2235031.333 ops/s
# Warmup Iteration  24: 2234873.007 ops/s
# Warmup Iteration  25: 2231875.460 ops/s
# Warmup Iteration  26: 2231772.855 ops/s
# Warmup Iteration  27: 2234585.849 ops/s
# Warmup Iteration  28: 2227092.670 ops/s
# Warmup Iteration  29: 2231947.138 ops/s
# Warmup Iteration  30: 2234367.154 ops/s
Iteration   1: 2222007.698 ops/s
Iteration   2: 2228744.536 ops/s
Iteration   3: 2221044.288 ops/s
Iteration   4: 2218703.178 ops/s
Iteration   5: 2226288.640 ops/s
Iteration   6: 2235978.545 ops/s
Iteration   7: 2239499.204 ops/s
Iteration   8: 2233421.312 ops/s
Iteration   9: 2233122.754 ops/s
Iteration  10: 2218871.704 ops/s
Iteration  11: 2228785.432 ops/s
Iteration  12: 2230091.858 ops/s
Iteration  13: 2229739.463 ops/s
Iteration  14: 2232139.803 ops/s
Iteration  15: 2227602.775 ops/s
Iteration  16: 2221531.075 ops/s
Iteration  17: 2227550.828 ops/s
Iteration  18: 2217118.424 ops/s
Iteration  19: 2232672.649 ops/s
Iteration  20: 2234684.002 ops/s
Iteration  21: 2228958.412 ops/s
Iteration  22: 2226359.105 ops/s
Iteration  23: 2244515.388 ops/s
Iteration  24: 2225858.234 ops/s
Iteration  25: 2226650.983 ops/s
Iteration  26: 2235400.085 ops/s
Iteration  27: 2237159.681 ops/s
Iteration  28: 2236188.803 ops/s
Iteration  29: 2231974.946 ops/s
Iteration  30: 2231622.452 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_natural_ordering":
  2229476.209 ±(99.9%) 4321.634 ops/s [Average]
  (min, avg, max) = (2217118.424, 2229476.209, 2244515.388), stdev = 6468.419
  CI (99.9%): [2225154.574, 2233797.843] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedList_natural_ordering  thrpt   30  2229476.209 ± 4321.634  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1524020.594 ops/s
# Warmup Iteration   2: 2990497.529 ops/s
# Warmup Iteration   3: 3338419.694 ops/s
# Warmup Iteration   4: 3363758.790 ops/s
# Warmup Iteration   5: 2757316.799 ops/s
# Warmup Iteration   6: 3372327.782 ops/s
# Warmup Iteration   7: 3360540.061 ops/s
# Warmup Iteration   8: 3352439.641 ops/s
# Warmup Iteration   9: 3361017.942 ops/s
# Warmup Iteration  10: 3364209.060 ops/s
# Warmup Iteration  11: 3363485.838 ops/s
# Warmup Iteration  12: 3362424.113 ops/s
# Warmup Iteration  13: 3360844.782 ops/s
# Warmup Iteration  14: 3358122.275 ops/s
# Warmup Iteration  15: 3343637.983 ops/s
# Warmup Iteration  16: 3347640.044 ops/s
# Warmup Iteration  17: 3353089.354 ops/s
# Warmup Iteration  18: 3355392.491 ops/s
# Warmup Iteration  19: 3365749.346 ops/s
# Warmup Iteration  20: 3350414.467 ops/s
# Warmup Iteration  21: 3367179.083 ops/s
# Warmup Iteration  22: 3360771.747 ops/s
# Warmup Iteration  23: 3351102.595 ops/s
# Warmup Iteration  24: 3362621.324 ops/s
# Warmup Iteration  25: 3363003.192 ops/s
# Warmup Iteration  26: 3352228.427 ops/s
# Warmup Iteration  27: 3349783.834 ops/s
# Warmup Iteration  28: 3350254.115 ops/s
# Warmup Iteration  29: 3359932.609 ops/s
# Warmup Iteration  30: 3348989.888 ops/s
Iteration   1: 3352815.462 ops/s
Iteration   2: 3349316.475 ops/s
Iteration   3: 3358996.498 ops/s
Iteration   4: 3353048.709 ops/s
Iteration   5: 3361598.411 ops/s
Iteration   6: 3356154.760 ops/s
Iteration   7: 3348847.367 ops/s
Iteration   8: 3357047.983 ops/s
Iteration   9: 3363448.761 ops/s
Iteration  10: 3364236.164 ops/s
Iteration  11: 3370741.338 ops/s
Iteration  12: 3366117.152 ops/s
Iteration  13: 3362067.865 ops/s
Iteration  14: 3351486.435 ops/s
Iteration  15: 3352904.857 ops/s
Iteration  16: 3355390.035 ops/s
Iteration  17: 3356142.169 ops/s
Iteration  18: 3365622.025 ops/s
Iteration  19: 3352567.489 ops/s
Iteration  20: 3375066.621 ops/s
Iteration  21: 3354860.490 ops/s
Iteration  22: 3362943.054 ops/s
Iteration  23: 3367360.787 ops/s
Iteration  24: 3360678.071 ops/s
Iteration  25: 3374341.422 ops/s
Iteration  26: 3357780.533 ops/s
Iteration  27: 3362207.664 ops/s
Iteration  28: 3348979.898 ops/s
Iteration  29: 3357634.092 ops/s
Iteration  30: 3371377.317 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_comparator":
  3359725.997 ±(99.9%) 4938.777 ops/s [Average]
  (min, avg, max) = (3348847.367, 3359725.997, 3375066.621), stdev = 7392.129
  CI (99.9%): [3354787.220, 3364664.773] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedList_with_comparator  thrpt   30  3359725.997 ± 4938.777  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_null$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_null

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1223658.019 ops/s
# Warmup Iteration   2: 1777800.101 ops/s
# Warmup Iteration   3: 2244693.993 ops/s
# Warmup Iteration   4: 2228467.432 ops/s
# Warmup Iteration   5: 2241900.002 ops/s
# Warmup Iteration   6: 2238863.005 ops/s
# Warmup Iteration   7: 2013807.095 ops/s
# Warmup Iteration   8: 2055829.698 ops/s
# Warmup Iteration   9: 2238915.794 ops/s
# Warmup Iteration  10: 2240864.181 ops/s
# Warmup Iteration  11: 2234651.853 ops/s
# Warmup Iteration  12: 2234703.490 ops/s
# Warmup Iteration  13: 2237757.922 ops/s
# Warmup Iteration  14: 2243401.898 ops/s
# Warmup Iteration  15: 2245135.407 ops/s
# Warmup Iteration  16: 2235561.738 ops/s
# Warmup Iteration  17: 2239596.382 ops/s
# Warmup Iteration  18: 2243260.165 ops/s
# Warmup Iteration  19: 2237877.667 ops/s
# Warmup Iteration  20: 2241654.050 ops/s
# Warmup Iteration  21: 2244812.959 ops/s
# Warmup Iteration  22: 2243386.980 ops/s
# Warmup Iteration  23: 2238164.416 ops/s
# Warmup Iteration  24: 2245122.812 ops/s
# Warmup Iteration  25: 2239389.765 ops/s
# Warmup Iteration  26: 2240968.702 ops/s
# Warmup Iteration  27: 2243515.213 ops/s
# Warmup Iteration  28: 2241163.063 ops/s
# Warmup Iteration  29: 2241836.457 ops/s
# Warmup Iteration  30: 2240512.112 ops/s
Iteration   1: 2239525.283 ops/s
Iteration   2: 2237620.596 ops/s
Iteration   3: 2246519.206 ops/s
Iteration   4: 2229937.041 ops/s
Iteration   5: 2243949.281 ops/s
Iteration   6: 2241028.347 ops/s
Iteration   7: 2245924.943 ops/s
Iteration   8: 2246062.105 ops/s
Iteration   9: 2238131.020 ops/s
Iteration  10: 2235705.241 ops/s
Iteration  11: 2233681.948 ops/s
Iteration  12: 2243636.465 ops/s
Iteration  13: 2239221.533 ops/s
Iteration  14: 2241146.847 ops/s
Iteration  15: 2247855.270 ops/s
Iteration  16: 2242311.286 ops/s
Iteration  17: 2237070.577 ops/s
Iteration  18: 2243105.598 ops/s
Iteration  19: 2251002.252 ops/s
Iteration  20: 2242059.631 ops/s
Iteration  21: 2249479.807 ops/s
Iteration  22: 2245729.775 ops/s
Iteration  23: 2239564.041 ops/s
Iteration  24: 2238351.523 ops/s
Iteration  25: 2233623.622 ops/s
Iteration  26: 2244566.689 ops/s
Iteration  27: 2240775.446 ops/s
Iteration  28: 2243774.871 ops/s
Iteration  29: 2249256.977 ops/s
Iteration  30: 2244773.778 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedList_with_null":
  2241846.367 ±(99.9%) 3361.010 ops/s [Average]
  (min, avg, max) = (2229937.041, 2241846.367, 2251002.252), stdev = 5030.601
  CI (99.9%): [2238485.357, 2245207.376] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedList_with_null  thrpt   30  2241846.367 ± 3361.010  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502705.496 ops/s
# Warmup Iteration   2: 1057486.716 ops/s
# Warmup Iteration   3: 1137623.212 ops/s
# Warmup Iteration   4: 1142630.119 ops/s
# Warmup Iteration   5: 949407.949 ops/s
# Warmup Iteration   6: 1145610.141 ops/s
# Warmup Iteration   7: 1143639.426 ops/s
# Warmup Iteration   8: 1143547.669 ops/s
# Warmup Iteration   9: 1143527.571 ops/s
# Warmup Iteration  10: 1140404.090 ops/s
# Warmup Iteration  11: 1141882.617 ops/s
# Warmup Iteration  12: 1143270.759 ops/s
# Warmup Iteration  13: 1143811.422 ops/s
# Warmup Iteration  14: 1142670.456 ops/s
# Warmup Iteration  15: 1145920.291 ops/s
# Warmup Iteration  16: 1143348.068 ops/s
# Warmup Iteration  17: 1146126.498 ops/s
# Warmup Iteration  18: 1145057.158 ops/s
# Warmup Iteration  19: 1139280.448 ops/s
# Warmup Iteration  20: 1143755.722 ops/s
# Warmup Iteration  21: 1143926.304 ops/s
# Warmup Iteration  22: 1143437.586 ops/s
# Warmup Iteration  23: 1145622.833 ops/s
# Warmup Iteration  24: 1139172.174 ops/s
# Warmup Iteration  25: 1139911.421 ops/s
# Warmup Iteration  26: 1141841.440 ops/s
# Warmup Iteration  27: 1139731.619 ops/s
# Warmup Iteration  28: 1141157.186 ops/s
# Warmup Iteration  29: 1142777.946 ops/s
# Warmup Iteration  30: 1140908.603 ops/s
Iteration   1: 1143316.005 ops/s
Iteration   2: 1140528.315 ops/s
Iteration   3: 1147370.314 ops/s
Iteration   4: 1149297.376 ops/s
Iteration   5: 1145965.569 ops/s
Iteration   6: 1143372.423 ops/s
Iteration   7: 1143638.318 ops/s
Iteration   8: 1142252.761 ops/s
Iteration   9: 1138530.775 ops/s
Iteration  10: 1146024.087 ops/s
Iteration  11: 1146297.690 ops/s
Iteration  12: 1143600.908 ops/s
Iteration  13: 1146774.766 ops/s
Iteration  14: 1142272.015 ops/s
Iteration  15: 1144253.333 ops/s
Iteration  16: 1144956.092 ops/s
Iteration  17: 1147007.170 ops/s
Iteration  18: 1139807.714 ops/s
Iteration  19: 1140284.278 ops/s
Iteration  20: 1142213.227 ops/s
Iteration  21: 1140875.273 ops/s
Iteration  22: 1134438.713 ops/s
Iteration  23: 1145731.221 ops/s
Iteration  24: 1146153.609 ops/s
Iteration  25: 1144757.012 ops/s
Iteration  26: 1141069.911 ops/s
Iteration  27: 1147612.271 ops/s
Iteration  28: 1142037.808 ops/s
Iteration  29: 1143039.879 ops/s
Iteration  30: 1144258.019 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap":
  1143591.228 ±(99.9%) 2094.325 ops/s [Average]
  (min, avg, max) = (1134438.713, 1143591.228, 1149297.376), stdev = 3134.688
  CI (99.9%): [1141496.903, 1145685.554] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedMap  thrpt   30  1143591.228 ± 2094.325  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMapBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMapBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 425428.924 ops/s
# Warmup Iteration   2: 746928.886 ops/s
# Warmup Iteration   3: 865229.438 ops/s
# Warmup Iteration   4: 867315.818 ops/s
# Warmup Iteration   5: 862951.810 ops/s
# Warmup Iteration   6: 715501.498 ops/s
# Warmup Iteration   7: 869699.287 ops/s
# Warmup Iteration   8: 866470.969 ops/s
# Warmup Iteration   9: 868655.795 ops/s
# Warmup Iteration  10: 867719.696 ops/s
# Warmup Iteration  11: 869178.855 ops/s
# Warmup Iteration  12: 868193.520 ops/s
# Warmup Iteration  13: 868046.869 ops/s
# Warmup Iteration  14: 870229.895 ops/s
# Warmup Iteration  15: 866019.392 ops/s
# Warmup Iteration  16: 867611.960 ops/s
# Warmup Iteration  17: 869150.431 ops/s
# Warmup Iteration  18: 871904.983 ops/s
# Warmup Iteration  19: 865939.550 ops/s
# Warmup Iteration  20: 868440.494 ops/s
# Warmup Iteration  21: 868153.093 ops/s
# Warmup Iteration  22: 867547.796 ops/s
# Warmup Iteration  23: 866456.615 ops/s
# Warmup Iteration  24: 866256.629 ops/s
# Warmup Iteration  25: 868887.354 ops/s
# Warmup Iteration  26: 866481.669 ops/s
# Warmup Iteration  27: 868318.313 ops/s
# Warmup Iteration  28: 867314.277 ops/s
# Warmup Iteration  29: 864492.228 ops/s
# Warmup Iteration  30: 871934.919 ops/s
Iteration   1: 868451.001 ops/s
Iteration   2: 869903.049 ops/s
Iteration   3: 867708.264 ops/s
Iteration   4: 864709.794 ops/s
Iteration   5: 867746.787 ops/s
Iteration   6: 871427.724 ops/s
Iteration   7: 867041.030 ops/s
Iteration   8: 867569.434 ops/s
Iteration   9: 870782.310 ops/s
Iteration  10: 865685.288 ops/s
Iteration  11: 863663.814 ops/s
Iteration  12: 867992.799 ops/s
Iteration  13: 866215.043 ops/s
Iteration  14: 869415.005 ops/s
Iteration  15: 868972.472 ops/s
Iteration  16: 864662.879 ops/s
Iteration  17: 869763.763 ops/s
Iteration  18: 865595.078 ops/s
Iteration  19: 866182.915 ops/s
Iteration  20: 871340.060 ops/s
Iteration  21: 869982.029 ops/s
Iteration  22: 865107.318 ops/s
Iteration  23: 866391.492 ops/s
Iteration  24: 865710.261 ops/s
Iteration  25: 865561.054 ops/s
Iteration  26: 857871.454 ops/s
Iteration  27: 869606.590 ops/s
Iteration  28: 864431.960 ops/s
Iteration  29: 868183.322 ops/s
Iteration  30: 862700.873 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMapBy":
  867012.495 ±(99.9%) 1934.037 ops/s [Average]
  (min, avg, max) = (857871.454, 867012.495, 871427.724), stdev = 2894.775
  CI (99.9%): [865078.459, 868946.532] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedMapBy  thrpt   30  867012.495 ± 1934.037  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 487358.605 ops/s
# Warmup Iteration   2: 1002870.231 ops/s
# Warmup Iteration   3: 1095152.742 ops/s
# Warmup Iteration   4: 1096564.489 ops/s
# Warmup Iteration   5: 917707.460 ops/s
# Warmup Iteration   6: 1099578.302 ops/s
# Warmup Iteration   7: 1100100.657 ops/s
# Warmup Iteration   8: 1100137.140 ops/s
# Warmup Iteration   9: 1099468.282 ops/s
# Warmup Iteration  10: 1099489.131 ops/s
# Warmup Iteration  11: 1100708.520 ops/s
# Warmup Iteration  12: 1101113.300 ops/s
# Warmup Iteration  13: 1098690.938 ops/s
# Warmup Iteration  14: 1101598.327 ops/s
# Warmup Iteration  15: 1104141.664 ops/s
# Warmup Iteration  16: 1103581.841 ops/s
# Warmup Iteration  17: 1098900.450 ops/s
# Warmup Iteration  18: 1105100.537 ops/s
# Warmup Iteration  19: 1099659.391 ops/s
# Warmup Iteration  20: 1100639.279 ops/s
# Warmup Iteration  21: 1101310.673 ops/s
# Warmup Iteration  22: 1103078.236 ops/s
# Warmup Iteration  23: 1102209.026 ops/s
# Warmup Iteration  24: 1101659.067 ops/s
# Warmup Iteration  25: 1098953.588 ops/s
# Warmup Iteration  26: 1102942.811 ops/s
# Warmup Iteration  27: 1098211.842 ops/s
# Warmup Iteration  28: 1106545.377 ops/s
# Warmup Iteration  29: 1100739.930 ops/s
# Warmup Iteration  30: 1099773.820 ops/s
Iteration   1: 1102914.693 ops/s
Iteration   2: 1100089.679 ops/s
Iteration   3: 1100397.002 ops/s
Iteration   4: 1105396.149 ops/s
Iteration   5: 1101416.865 ops/s
Iteration   6: 1106256.575 ops/s
Iteration   7: 1099235.910 ops/s
Iteration   8: 1103592.181 ops/s
Iteration   9: 1105982.205 ops/s
Iteration  10: 1097605.731 ops/s
Iteration  11: 1097017.081 ops/s
Iteration  12: 1100856.216 ops/s
Iteration  13: 1095779.555 ops/s
Iteration  14: 1101740.919 ops/s
Iteration  15: 1096225.241 ops/s
Iteration  16: 1103359.882 ops/s
Iteration  17: 1102087.093 ops/s
Iteration  18: 1101081.488 ops/s
Iteration  19: 1100633.688 ops/s
Iteration  20: 1102303.201 ops/s
Iteration  21: 1099772.645 ops/s
Iteration  22: 1105159.505 ops/s
Iteration  23: 1105675.935 ops/s
Iteration  24: 1101027.911 ops/s
Iteration  25: 1103788.470 ops/s
Iteration  26: 1103464.027 ops/s
Iteration  27: 1100807.609 ops/s
Iteration  28: 1097744.284 ops/s
Iteration  29: 1102130.806 ops/s
Iteration  30: 1101248.801 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedMap_with_comparator":
  1101493.045 ±(99.9%) 1891.515 ops/s [Average]
  (min, avg, max) = (1095779.555, 1101493.045, 1106256.575), stdev = 2831.131
  CI (99.9%): [1099601.530, 1103384.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedMap_with_comparator  thrpt   30  1101493.045 ± 1891.515  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSetBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSetBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573742.763 ops/s
# Warmup Iteration   2: 1159968.262 ops/s
# Warmup Iteration   3: 1246707.229 ops/s
# Warmup Iteration   4: 1255951.597 ops/s
# Warmup Iteration   5: 1037629.294 ops/s
# Warmup Iteration   6: 1257059.097 ops/s
# Warmup Iteration   7: 1256185.389 ops/s
# Warmup Iteration   8: 1258761.001 ops/s
# Warmup Iteration   9: 1258339.756 ops/s
# Warmup Iteration  10: 1254352.882 ops/s
# Warmup Iteration  11: 1257655.626 ops/s
# Warmup Iteration  12: 1255017.096 ops/s
# Warmup Iteration  13: 1257785.126 ops/s
# Warmup Iteration  14: 1259677.688 ops/s
# Warmup Iteration  15: 1252653.009 ops/s
# Warmup Iteration  16: 1255579.917 ops/s
# Warmup Iteration  17: 1255864.961 ops/s
# Warmup Iteration  18: 1254977.007 ops/s
# Warmup Iteration  19: 1254328.429 ops/s
# Warmup Iteration  20: 1252939.870 ops/s
# Warmup Iteration  21: 1257209.769 ops/s
# Warmup Iteration  22: 1257789.657 ops/s
# Warmup Iteration  23: 1257051.234 ops/s
# Warmup Iteration  24: 1260632.074 ops/s
# Warmup Iteration  25: 1258790.986 ops/s
# Warmup Iteration  26: 1254357.488 ops/s
# Warmup Iteration  27: 1259964.220 ops/s
# Warmup Iteration  28: 1259488.675 ops/s
# Warmup Iteration  29: 1252804.281 ops/s
# Warmup Iteration  30: 1259950.089 ops/s
Iteration   1: 1260436.298 ops/s
Iteration   2: 1260212.447 ops/s
Iteration   3: 1259558.657 ops/s
Iteration   4: 1255056.207 ops/s
Iteration   5: 1259452.811 ops/s
Iteration   6: 1257927.432 ops/s
Iteration   7: 1251696.927 ops/s
Iteration   8: 1251765.550 ops/s
Iteration   9: 1257616.801 ops/s
Iteration  10: 1251735.646 ops/s
Iteration  11: 1256704.456 ops/s
Iteration  12: 1255177.771 ops/s
Iteration  13: 1254590.355 ops/s
Iteration  14: 1257430.763 ops/s
Iteration  15: 1262810.545 ops/s
Iteration  16: 1259269.557 ops/s
Iteration  17: 1253401.716 ops/s
Iteration  18: 1251653.293 ops/s
Iteration  19: 1257586.959 ops/s
Iteration  20: 1257165.589 ops/s
Iteration  21: 1257033.952 ops/s
Iteration  22: 1256822.419 ops/s
Iteration  23: 1252030.850 ops/s
Iteration  24: 1255651.539 ops/s
Iteration  25: 1256948.125 ops/s
Iteration  26: 1256803.410 ops/s
Iteration  27: 1258477.737 ops/s
Iteration  28: 1259150.125 ops/s
Iteration  29: 1259591.132 ops/s
Iteration  30: 1253136.560 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSetBy":
  1256563.188 ±(99.9%) 2009.986 ops/s [Average]
  (min, avg, max) = (1251653.293, 1256563.188, 1262810.545), stdev = 3008.453
  CI (99.9%): [1254553.201, 1258573.174] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedSetBy  thrpt   30  1256563.188 ± 2009.986  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 757083.441 ops/s
# Warmup Iteration   2: 1783546.616 ops/s
# Warmup Iteration   3: 1863841.206 ops/s
# Warmup Iteration   4: 1545784.763 ops/s
# Warmup Iteration   5: 1862135.810 ops/s
# Warmup Iteration   6: 1867270.593 ops/s
# Warmup Iteration   7: 1858553.544 ops/s
# Warmup Iteration   8: 1868819.802 ops/s
# Warmup Iteration   9: 1863887.231 ops/s
# Warmup Iteration  10: 1863138.016 ops/s
# Warmup Iteration  11: 1862817.018 ops/s
# Warmup Iteration  12: 1866653.239 ops/s
# Warmup Iteration  13: 1864773.870 ops/s
# Warmup Iteration  14: 1864550.855 ops/s
# Warmup Iteration  15: 1868175.123 ops/s
# Warmup Iteration  16: 1863160.462 ops/s
# Warmup Iteration  17: 1858091.483 ops/s
# Warmup Iteration  18: 1865702.313 ops/s
# Warmup Iteration  19: 1859735.224 ops/s
# Warmup Iteration  20: 1866858.070 ops/s
# Warmup Iteration  21: 1865019.750 ops/s
# Warmup Iteration  22: 1866107.318 ops/s
# Warmup Iteration  23: 1864323.072 ops/s
# Warmup Iteration  24: 1863259.489 ops/s
# Warmup Iteration  25: 1867484.450 ops/s
# Warmup Iteration  26: 1866661.064 ops/s
# Warmup Iteration  27: 1861051.650 ops/s
# Warmup Iteration  28: 1865411.335 ops/s
# Warmup Iteration  29: 1863315.212 ops/s
# Warmup Iteration  30: 1863899.257 ops/s
Iteration   1: 1862413.341 ops/s
Iteration   2: 1867675.386 ops/s
Iteration   3: 1869348.558 ops/s
Iteration   4: 1865972.245 ops/s
Iteration   5: 1871334.912 ops/s
Iteration   6: 1858551.298 ops/s
Iteration   7: 1861496.988 ops/s
Iteration   8: 1861056.000 ops/s
Iteration   9: 1868484.610 ops/s
Iteration  10: 1860358.281 ops/s
Iteration  11: 1868319.085 ops/s
Iteration  12: 1864093.133 ops/s
Iteration  13: 1860893.606 ops/s
Iteration  14: 1862327.396 ops/s
Iteration  15: 1863464.601 ops/s
Iteration  16: 1866875.985 ops/s
Iteration  17: 1867583.463 ops/s
Iteration  18: 1865591.334 ops/s
Iteration  19: 1866897.075 ops/s
Iteration  20: 1863138.772 ops/s
Iteration  21: 1865011.847 ops/s
Iteration  22: 1870122.074 ops/s
Iteration  23: 1857328.205 ops/s
Iteration  24: 1846624.036 ops/s
Iteration  25: 1868184.415 ops/s
Iteration  26: 1870103.524 ops/s
Iteration  27: 1869822.803 ops/s
Iteration  28: 1861350.043 ops/s
Iteration  29: 1866702.371 ops/s
Iteration  30: 1871715.565 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering":
  1864761.365 ±(99.9%) 3452.872 ops/s [Average]
  (min, avg, max) = (1846624.036, 1864761.365, 1871715.565), stdev = 5168.097
  CI (99.9%): [1861308.493, 1868214.237] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedSet_natural_ordering  thrpt   30  1864761.365 ± 3452.872  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_with_comparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_with_comparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 731407.630 ops/s
# Warmup Iteration   2: 1668052.124 ops/s
# Warmup Iteration   3: 1747061.990 ops/s
# Warmup Iteration   4: 1638824.770 ops/s
# Warmup Iteration   5: 1570441.498 ops/s
# Warmup Iteration   6: 1756604.940 ops/s
# Warmup Iteration   7: 1754686.392 ops/s
# Warmup Iteration   8: 1755483.310 ops/s
# Warmup Iteration   9: 1753028.057 ops/s
# Warmup Iteration  10: 1752681.247 ops/s
# Warmup Iteration  11: 1758669.634 ops/s
# Warmup Iteration  12: 1755273.194 ops/s
# Warmup Iteration  13: 1757226.268 ops/s
# Warmup Iteration  14: 1756686.896 ops/s
# Warmup Iteration  15: 1750153.123 ops/s
# Warmup Iteration  16: 1756869.181 ops/s
# Warmup Iteration  17: 1757216.425 ops/s
# Warmup Iteration  18: 1751895.731 ops/s
# Warmup Iteration  19: 1750136.841 ops/s
# Warmup Iteration  20: 1750468.858 ops/s
# Warmup Iteration  21: 1752636.644 ops/s
# Warmup Iteration  22: 1747845.424 ops/s
# Warmup Iteration  23: 1754354.313 ops/s
# Warmup Iteration  24: 1756583.333 ops/s
# Warmup Iteration  25: 1759253.125 ops/s
# Warmup Iteration  26: 1759247.957 ops/s
# Warmup Iteration  27: 1756007.218 ops/s
# Warmup Iteration  28: 1756764.676 ops/s
# Warmup Iteration  29: 1757676.245 ops/s
# Warmup Iteration  30: 1762433.647 ops/s
Iteration   1: 1757488.808 ops/s
Iteration   2: 1762892.255 ops/s
Iteration   3: 1760306.376 ops/s
Iteration   4: 1751618.552 ops/s
Iteration   5: 1755773.834 ops/s
Iteration   6: 1758796.421 ops/s
Iteration   7: 1761252.337 ops/s
Iteration   8: 1755308.708 ops/s
Iteration   9: 1749286.119 ops/s
Iteration  10: 1747777.749 ops/s
Iteration  11: 1744369.329 ops/s
Iteration  12: 1757605.903 ops/s
Iteration  13: 1760726.041 ops/s
Iteration  14: 1755762.958 ops/s
Iteration  15: 1761357.676 ops/s
Iteration  16: 1756015.518 ops/s
Iteration  17: 1748624.360 ops/s
Iteration  18: 1753939.208 ops/s
Iteration  19: 1747753.635 ops/s
Iteration  20: 1750914.771 ops/s
Iteration  21: 1752184.810 ops/s
Iteration  22: 1756269.201 ops/s
Iteration  23: 1757516.505 ops/s
Iteration  24: 1750302.741 ops/s
Iteration  25: 1755301.864 ops/s
Iteration  26: 1748913.333 ops/s
Iteration  27: 1753303.378 ops/s
Iteration  28: 1751846.414 ops/s
Iteration  29: 1748131.048 ops/s
Iteration  30: 1747576.331 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toSortedSet_with_comparator":
  1753963.873 ±(99.9%) 3307.361 ops/s [Average]
  (min, avg, max) = (1744369.329, 1753963.873, 1762892.255), stdev = 4950.303
  CI (99.9%): [1750656.511, 1757271.234] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toSortedSet_with_comparator  thrpt   30  1753963.873 ± 3307.361  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 766271.088 ops/s
# Warmup Iteration   2: 1859526.790 ops/s
# Warmup Iteration   3: 1852971.512 ops/s
# Warmup Iteration   4: 1544257.635 ops/s
# Warmup Iteration   5: 1864154.041 ops/s
# Warmup Iteration   6: 1853688.501 ops/s
# Warmup Iteration   7: 1856936.780 ops/s
# Warmup Iteration   8: 1859201.406 ops/s
# Warmup Iteration   9: 1864954.199 ops/s
# Warmup Iteration  10: 1863728.948 ops/s
# Warmup Iteration  11: 1855642.651 ops/s
# Warmup Iteration  12: 1854976.841 ops/s
# Warmup Iteration  13: 1858177.777 ops/s
# Warmup Iteration  14: 1852254.159 ops/s
# Warmup Iteration  15: 1854875.893 ops/s
# Warmup Iteration  16: 1862085.644 ops/s
# Warmup Iteration  17: 1852342.045 ops/s
# Warmup Iteration  18: 1854438.697 ops/s
# Warmup Iteration  19: 1865436.833 ops/s
# Warmup Iteration  20: 1859106.092 ops/s
# Warmup Iteration  21: 1858826.376 ops/s
# Warmup Iteration  22: 1859098.247 ops/s
# Warmup Iteration  23: 1861140.292 ops/s
# Warmup Iteration  24: 1861700.808 ops/s
# Warmup Iteration  25: 1853326.377 ops/s
# Warmup Iteration  26: 1863923.315 ops/s
# Warmup Iteration  27: 1857334.263 ops/s
# Warmup Iteration  28: 1858658.244 ops/s
# Warmup Iteration  29: 1861510.199 ops/s
# Warmup Iteration  30: 1863959.029 ops/s
Iteration   1: 1871587.815 ops/s
Iteration   2: 1863616.174 ops/s
Iteration   3: 1852679.571 ops/s
Iteration   4: 1861583.327 ops/s
Iteration   5: 1854919.496 ops/s
Iteration   6: 1864470.980 ops/s
Iteration   7: 1853449.846 ops/s
Iteration   8: 1864087.790 ops/s
Iteration   9: 1860631.461 ops/s
Iteration  10: 1863146.409 ops/s
Iteration  11: 1869636.825 ops/s
Iteration  12: 1853956.235 ops/s
Iteration  13: 1859370.003 ops/s
Iteration  14: 1853572.502 ops/s
Iteration  15: 1864434.224 ops/s
Iteration  16: 1869871.250 ops/s
Iteration  17: 1863827.527 ops/s
Iteration  18: 1867551.977 ops/s
Iteration  19: 1865548.034 ops/s
Iteration  20: 1867947.341 ops/s
Iteration  21: 1851348.361 ops/s
Iteration  22: 1862606.051 ops/s
Iteration  23: 1862418.640 ops/s
Iteration  24: 1858526.028 ops/s
Iteration  25: 1864195.723 ops/s
Iteration  26: 1855396.903 ops/s
Iteration  27: 1858931.742 ops/s
Iteration  28: 1852641.027 ops/s
Iteration  29: 1857020.185 ops/s
Iteration  30: 1861570.289 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_toStringOfItemToCount":
  1861018.124 ±(99.9%) 3797.694 ops/s [Average]
  (min, avg, max) = (1851348.361, 1861018.124, 1871587.815), stdev = 5684.210
  CI (99.9%): [1857220.430, 1864815.819] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  1861018.124 ± 3797.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_topOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_topOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 87561.750 ops/s
# Warmup Iteration   2: 161423.888 ops/s
# Warmup Iteration   3: 192103.992 ops/s
# Warmup Iteration   4: 193872.413 ops/s
# Warmup Iteration   5: 193504.695 ops/s
# Warmup Iteration   6: 160585.161 ops/s
# Warmup Iteration   7: 194213.679 ops/s
# Warmup Iteration   8: 193341.221 ops/s
# Warmup Iteration   9: 193297.059 ops/s
# Warmup Iteration  10: 193797.972 ops/s
# Warmup Iteration  11: 194281.320 ops/s
# Warmup Iteration  12: 193777.807 ops/s
# Warmup Iteration  13: 194157.058 ops/s
# Warmup Iteration  14: 194070.058 ops/s
# Warmup Iteration  15: 193069.051 ops/s
# Warmup Iteration  16: 193266.436 ops/s
# Warmup Iteration  17: 195842.019 ops/s
# Warmup Iteration  18: 195696.353 ops/s
# Warmup Iteration  19: 195308.099 ops/s
# Warmup Iteration  20: 195755.928 ops/s
# Warmup Iteration  21: 196192.164 ops/s
# Warmup Iteration  22: 195555.535 ops/s
# Warmup Iteration  23: 195499.453 ops/s
# Warmup Iteration  24: 196635.673 ops/s
# Warmup Iteration  25: 195426.119 ops/s
# Warmup Iteration  26: 196245.996 ops/s
# Warmup Iteration  27: 196513.990 ops/s
# Warmup Iteration  28: 195882.238 ops/s
# Warmup Iteration  29: 196200.804 ops/s
# Warmup Iteration  30: 196363.893 ops/s
Iteration   1: 196243.417 ops/s
Iteration   2: 196806.194 ops/s
Iteration   3: 196821.442 ops/s
Iteration   4: 195940.134 ops/s
Iteration   5: 196038.276 ops/s
Iteration   6: 195413.311 ops/s
Iteration   7: 195659.220 ops/s
Iteration   8: 196694.471 ops/s
Iteration   9: 196171.112 ops/s
Iteration  10: 194958.076 ops/s
Iteration  11: 194810.168 ops/s
Iteration  12: 195702.637 ops/s
Iteration  13: 195646.520 ops/s
Iteration  14: 196182.128 ops/s
Iteration  15: 195881.798 ops/s
Iteration  16: 196714.745 ops/s
Iteration  17: 194965.277 ops/s
Iteration  18: 195500.704 ops/s
Iteration  19: 195937.707 ops/s
Iteration  20: 195250.390 ops/s
Iteration  21: 195509.463 ops/s
Iteration  22: 195127.951 ops/s
Iteration  23: 196024.854 ops/s
Iteration  24: 195905.652 ops/s
Iteration  25: 195380.500 ops/s
Iteration  26: 196288.879 ops/s
Iteration  27: 196017.676 ops/s
Iteration  28: 196886.928 ops/s
Iteration  29: 195399.954 ops/s
Iteration  30: 195360.150 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_topOccurrences":
  195841.325 ±(99.9%) 388.352 ops/s [Average]
  (min, avg, max) = (194810.168, 195841.325, 196886.928), stdev = 581.267
  CI (99.9%): [195452.973, 196229.677] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_topOccurrences  thrpt   30  195841.325 ± 388.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1262246.442 ops/s
# Warmup Iteration   2: 2052147.386 ops/s
# Warmup Iteration   3: 2429703.686 ops/s
# Warmup Iteration   4: 2451171.594 ops/s
# Warmup Iteration   5: 2451939.395 ops/s
# Warmup Iteration   6: 2044507.132 ops/s
# Warmup Iteration   7: 2393757.731 ops/s
# Warmup Iteration   8: 2453020.195 ops/s
# Warmup Iteration   9: 2454609.519 ops/s
# Warmup Iteration  10: 2435239.547 ops/s
# Warmup Iteration  11: 2456825.888 ops/s
# Warmup Iteration  12: 2462444.764 ops/s
# Warmup Iteration  13: 2457078.554 ops/s
# Warmup Iteration  14: 2452560.766 ops/s
# Warmup Iteration  15: 2455597.687 ops/s
# Warmup Iteration  16: 2450872.559 ops/s
# Warmup Iteration  17: 2438790.979 ops/s
# Warmup Iteration  18: 2450978.116 ops/s
# Warmup Iteration  19: 2459839.923 ops/s
# Warmup Iteration  20: 2452936.288 ops/s
# Warmup Iteration  21: 2455777.808 ops/s
# Warmup Iteration  22: 2458033.361 ops/s
# Warmup Iteration  23: 2461326.226 ops/s
# Warmup Iteration  24: 2454760.612 ops/s
# Warmup Iteration  25: 2466118.744 ops/s
# Warmup Iteration  26: 2456995.641 ops/s
# Warmup Iteration  27: 2444530.424 ops/s
# Warmup Iteration  28: 2457152.157 ops/s
# Warmup Iteration  29: 2448890.829 ops/s
# Warmup Iteration  30: 2453434.066 ops/s
Iteration   1: 2439195.773 ops/s
Iteration   2: 2452167.699 ops/s
Iteration   3: 2442607.052 ops/s
Iteration   4: 2456852.776 ops/s
Iteration   5: 2457397.689 ops/s
Iteration   6: 2453045.009 ops/s
Iteration   7: 2447425.826 ops/s
Iteration   8: 2445137.882 ops/s
Iteration   9: 2461464.357 ops/s
Iteration  10: 2457735.688 ops/s
Iteration  11: 2447318.522 ops/s
Iteration  12: 2442689.011 ops/s
Iteration  13: 2440956.832 ops/s
Iteration  14: 2450140.133 ops/s
Iteration  15: 2458281.664 ops/s
Iteration  16: 2455786.903 ops/s
Iteration  17: 2464315.840 ops/s
Iteration  18: 2441490.929 ops/s
Iteration  19: 2458334.962 ops/s
Iteration  20: 2445730.417 ops/s
Iteration  21: 2454198.892 ops/s
Iteration  22: 2448793.721 ops/s
Iteration  23: 2453956.164 ops/s
Iteration  24: 2456304.946 ops/s
Iteration  25: 2454332.482 ops/s
Iteration  26: 2458147.168 ops/s
Iteration  27: 2452808.706 ops/s
Iteration  28: 2460980.283 ops/s
Iteration  29: 2449461.036 ops/s
Iteration  30: 2445799.509 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_with":
  2451761.929 ±(99.9%) 4526.332 ops/s [Average]
  (min, avg, max) = (2439195.773, 2451761.929, 2464315.840), stdev = 6774.801
  CI (99.9%): [2447235.598, 2456288.261] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_with  thrpt   30  2451761.929 ± 4526.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785309.359 ops/s
# Warmup Iteration   2: 1373299.803 ops/s
# Warmup Iteration   3: 1589253.092 ops/s
# Warmup Iteration   4: 1592139.670 ops/s
# Warmup Iteration   5: 1594372.852 ops/s
# Warmup Iteration   6: 1305415.222 ops/s
# Warmup Iteration   7: 1597167.773 ops/s
# Warmup Iteration   8: 1595163.650 ops/s
# Warmup Iteration   9: 1599526.467 ops/s
# Warmup Iteration  10: 1598660.079 ops/s
# Warmup Iteration  11: 1595778.338 ops/s
# Warmup Iteration  12: 1595743.001 ops/s
# Warmup Iteration  13: 1602726.491 ops/s
# Warmup Iteration  14: 1597700.715 ops/s
# Warmup Iteration  15: 1594290.852 ops/s
# Warmup Iteration  16: 1594141.432 ops/s
# Warmup Iteration  17: 1597508.875 ops/s
# Warmup Iteration  18: 1595843.795 ops/s
# Warmup Iteration  19: 1600705.597 ops/s
# Warmup Iteration  20: 1600670.832 ops/s
# Warmup Iteration  21: 1596700.216 ops/s
# Warmup Iteration  22: 1600053.154 ops/s
# Warmup Iteration  23: 1601910.553 ops/s
# Warmup Iteration  24: 1600917.608 ops/s
# Warmup Iteration  25: 1595632.748 ops/s
# Warmup Iteration  26: 1595551.178 ops/s
# Warmup Iteration  27: 1600565.976 ops/s
# Warmup Iteration  28: 1598759.481 ops/s
# Warmup Iteration  29: 1596694.168 ops/s
# Warmup Iteration  30: 1598391.757 ops/s
Iteration   1: 1601436.831 ops/s
Iteration   2: 1601818.007 ops/s
Iteration   3: 1596991.318 ops/s
Iteration   4: 1595578.868 ops/s
Iteration   5: 1604308.324 ops/s
Iteration   6: 1600630.058 ops/s
Iteration   7: 1601470.800 ops/s
Iteration   8: 1602017.981 ops/s
Iteration   9: 1598545.822 ops/s
Iteration  10: 1591799.979 ops/s
Iteration  11: 1592784.199 ops/s
Iteration  12: 1599554.349 ops/s
Iteration  13: 1598226.100 ops/s
Iteration  14: 1602301.853 ops/s
Iteration  15: 1600795.054 ops/s
Iteration  16: 1601477.962 ops/s
Iteration  17: 1594511.728 ops/s
Iteration  18: 1603216.458 ops/s
Iteration  19: 1601217.156 ops/s
Iteration  20: 1596335.893 ops/s
Iteration  21: 1600568.839 ops/s
Iteration  22: 1598626.117 ops/s
Iteration  23: 1595743.794 ops/s
Iteration  24: 1589922.012 ops/s
Iteration  25: 1602513.654 ops/s
Iteration  26: 1598551.909 ops/s
Iteration  27: 1603835.722 ops/s
Iteration  28: 1605368.043 ops/s
Iteration  29: 1597633.107 ops/s
Iteration  30: 1597893.608 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withAll":
  1599189.185 ±(99.9%) 2516.945 ops/s [Average]
  (min, avg, max) = (1589922.012, 1599189.185, 1605368.043), stdev = 3767.246
  CI (99.9%): [1596672.239, 1601706.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_withAll  thrpt   30  1599189.185 ± 2516.945  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1653843.014 ops/s
# Warmup Iteration   2: 3359841.317 ops/s
# Warmup Iteration   3: 3553215.070 ops/s
# Warmup Iteration   4: 3591409.185 ops/s
# Warmup Iteration   5: 2959971.623 ops/s
# Warmup Iteration   6: 3606017.573 ops/s
# Warmup Iteration   7: 3605438.345 ops/s
# Warmup Iteration   8: 3621841.357 ops/s
# Warmup Iteration   9: 3591766.834 ops/s
# Warmup Iteration  10: 3596810.447 ops/s
# Warmup Iteration  11: 3621957.330 ops/s
# Warmup Iteration  12: 3612795.229 ops/s
# Warmup Iteration  13: 3613427.070 ops/s
# Warmup Iteration  14: 3611253.361 ops/s
# Warmup Iteration  15: 3621981.684 ops/s
# Warmup Iteration  16: 3607404.539 ops/s
# Warmup Iteration  17: 3598004.232 ops/s
# Warmup Iteration  18: 3613934.540 ops/s
# Warmup Iteration  19: 3613599.625 ops/s
# Warmup Iteration  20: 3608055.464 ops/s
# Warmup Iteration  21: 3612576.725 ops/s
# Warmup Iteration  22: 3611594.217 ops/s
# Warmup Iteration  23: 3611142.019 ops/s
# Warmup Iteration  24: 3615918.614 ops/s
# Warmup Iteration  25: 3612697.958 ops/s
# Warmup Iteration  26: 3614021.345 ops/s
# Warmup Iteration  27: 3606640.701 ops/s
# Warmup Iteration  28: 3608017.935 ops/s
# Warmup Iteration  29: 3613089.416 ops/s
# Warmup Iteration  30: 3598005.029 ops/s
Iteration   1: 3598150.348 ops/s
Iteration   2: 3616848.950 ops/s
Iteration   3: 3608659.373 ops/s
Iteration   4: 3618553.387 ops/s
Iteration   5: 3613876.838 ops/s
Iteration   6: 3606978.203 ops/s
Iteration   7: 3609397.468 ops/s
Iteration   8: 3616984.128 ops/s
Iteration   9: 3615183.714 ops/s
Iteration  10: 3619096.026 ops/s
Iteration  11: 3598117.495 ops/s
Iteration  12: 3600761.306 ops/s
Iteration  13: 3605239.738 ops/s
Iteration  14: 3599291.759 ops/s
Iteration  15: 3604359.326 ops/s
Iteration  16: 3607057.408 ops/s
Iteration  17: 3614060.618 ops/s
Iteration  18: 3603970.503 ops/s
Iteration  19: 3616059.047 ops/s
Iteration  20: 3603964.034 ops/s
Iteration  21: 3603099.470 ops/s
Iteration  22: 3605232.274 ops/s
Iteration  23: 3606977.816 ops/s
Iteration  24: 3627930.100 ops/s
Iteration  25: 3582459.674 ops/s
Iteration  26: 3609244.007 ops/s
Iteration  27: 3597047.657 ops/s
Iteration  28: 3602533.580 ops/s
Iteration  29: 3611137.840 ops/s
Iteration  30: 3606197.740 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_without":
  3607615.661 ±(99.9%) 5824.805 ops/s [Average]
  (min, avg, max) = (3582459.674, 3607615.661, 3627930.100), stdev = 8718.295
  CI (99.9%): [3601790.856, 3613440.466] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_without  thrpt   30  3607615.661 ± 5824.805  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 888801.557 ops/s
# Warmup Iteration   2: 1520663.996 ops/s
# Warmup Iteration   3: 1763681.255 ops/s
# Warmup Iteration   4: 1780393.183 ops/s
# Warmup Iteration   5: 1768876.433 ops/s
# Warmup Iteration   6: 1444733.899 ops/s
# Warmup Iteration   7: 1770418.390 ops/s
# Warmup Iteration   8: 1774487.196 ops/s
# Warmup Iteration   9: 1770113.629 ops/s
# Warmup Iteration  10: 1777804.813 ops/s
# Warmup Iteration  11: 1771472.424 ops/s
# Warmup Iteration  12: 1770559.541 ops/s
# Warmup Iteration  13: 1770958.428 ops/s
# Warmup Iteration  14: 1773216.069 ops/s
# Warmup Iteration  15: 1771782.363 ops/s
# Warmup Iteration  16: 1770156.793 ops/s
# Warmup Iteration  17: 1773550.504 ops/s
# Warmup Iteration  18: 1774395.885 ops/s
# Warmup Iteration  19: 1769080.060 ops/s
# Warmup Iteration  20: 1779364.759 ops/s
# Warmup Iteration  21: 1778178.814 ops/s
# Warmup Iteration  22: 1774294.649 ops/s
# Warmup Iteration  23: 1775095.557 ops/s
# Warmup Iteration  24: 1780695.047 ops/s
# Warmup Iteration  25: 1770568.601 ops/s
# Warmup Iteration  26: 1771758.940 ops/s
# Warmup Iteration  27: 1779241.025 ops/s
# Warmup Iteration  28: 1777695.180 ops/s
# Warmup Iteration  29: 1774521.853 ops/s
# Warmup Iteration  30: 1774692.638 ops/s
Iteration   1: 1776124.922 ops/s
Iteration   2: 1781841.744 ops/s
Iteration   3: 1771759.422 ops/s
Iteration   4: 1772375.176 ops/s
Iteration   5: 1779462.207 ops/s
Iteration   6: 1775940.426 ops/s
Iteration   7: 1769604.831 ops/s
Iteration   8: 1774004.942 ops/s
Iteration   9: 1773606.020 ops/s
Iteration  10: 1772517.784 ops/s
Iteration  11: 1770517.854 ops/s
Iteration  12: 1776438.536 ops/s
Iteration  13: 1775763.383 ops/s
Iteration  14: 1770529.097 ops/s
Iteration  15: 1777455.420 ops/s
Iteration  16: 1782180.657 ops/s
Iteration  17: 1771652.006 ops/s
Iteration  18: 1774029.759 ops/s
Iteration  19: 1776033.702 ops/s
Iteration  20: 1763378.898 ops/s
Iteration  21: 1779850.334 ops/s
Iteration  22: 1769918.071 ops/s
Iteration  23: 1770390.716 ops/s
Iteration  24: 1772402.334 ops/s
Iteration  25: 1766891.585 ops/s
Iteration  26: 1779904.525 ops/s
Iteration  27: 1778236.437 ops/s
Iteration  28: 1782230.023 ops/s
Iteration  29: 1775740.141 ops/s
Iteration  30: 1771925.151 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_withoutAll":
  1774423.537 ±(99.9%) 3046.512 ops/s [Average]
  (min, avg, max) = (1763378.898, 1774423.537, 1782230.023), stdev = 4559.876
  CI (99.9%): [1771377.025, 1777470.049] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score      Error  Units
HashBagTest._Benchmark.benchmark_withoutAll  thrpt   30  1774423.537 ± 3046.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 79207.527 ops/s
# Warmup Iteration   2: 100468.870 ops/s
# Warmup Iteration   3: 138619.909 ops/s
# Warmup Iteration   4: 138212.299 ops/s
# Warmup Iteration   5: 138049.927 ops/s
# Warmup Iteration   6: 138695.511 ops/s
# Warmup Iteration   7: 138723.871 ops/s
# Warmup Iteration   8: 139108.004 ops/s
# Warmup Iteration   9: 138925.708 ops/s
# Warmup Iteration  10: 114596.528 ops/s
# Warmup Iteration  11: 139167.717 ops/s
# Warmup Iteration  12: 138836.024 ops/s
# Warmup Iteration  13: 138437.556 ops/s
# Warmup Iteration  14: 138626.569 ops/s
# Warmup Iteration  15: 138818.630 ops/s
# Warmup Iteration  16: 139076.756 ops/s
# Warmup Iteration  17: 138733.228 ops/s
# Warmup Iteration  18: 138915.641 ops/s
# Warmup Iteration  19: 138616.886 ops/s
# Warmup Iteration  20: 138686.170 ops/s
# Warmup Iteration  21: 139007.675 ops/s
# Warmup Iteration  22: 138884.415 ops/s
# Warmup Iteration  23: 139059.605 ops/s
# Warmup Iteration  24: 138343.018 ops/s
# Warmup Iteration  25: 138906.751 ops/s
# Warmup Iteration  26: 139149.391 ops/s
# Warmup Iteration  27: 138621.230 ops/s
# Warmup Iteration  28: 138942.111 ops/s
# Warmup Iteration  29: 138702.309 ops/s
# Warmup Iteration  30: 138541.437 ops/s
Iteration   1: 138821.680 ops/s
Iteration   2: 138783.756 ops/s
Iteration   3: 139099.548 ops/s
Iteration   4: 138666.781 ops/s
Iteration   5: 138594.169 ops/s
Iteration   6: 138809.326 ops/s
Iteration   7: 138122.205 ops/s
Iteration   8: 138628.398 ops/s
Iteration   9: 139399.675 ops/s
Iteration  10: 138749.672 ops/s
Iteration  11: 139049.988 ops/s
Iteration  12: 138870.709 ops/s
Iteration  13: 138643.487 ops/s
Iteration  14: 138245.042 ops/s
Iteration  15: 139042.535 ops/s
Iteration  16: 138916.052 ops/s
Iteration  17: 138350.755 ops/s
Iteration  18: 138414.183 ops/s
Iteration  19: 138733.235 ops/s
Iteration  20: 137887.555 ops/s
Iteration  21: 138773.936 ops/s
Iteration  22: 139362.174 ops/s
Iteration  23: 138968.798 ops/s
Iteration  24: 138793.556 ops/s
Iteration  25: 138861.622 ops/s
Iteration  26: 138995.541 ops/s
Iteration  27: 138109.614 ops/s
Iteration  28: 138976.866 ops/s
Iteration  29: 138262.391 ops/s
Iteration  30: 138690.690 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zip":
  138720.798 ±(99.9%) 237.662 ops/s [Average]
  (min, avg, max) = (137887.555, 138720.798, 139399.675), stdev = 355.721
  CI (99.9%): [138483.136, 138958.460] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_zip  thrpt   30  138720.798 ± 237.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 288644.498 ops/s
# Warmup Iteration   2: 443331.300 ops/s
# Warmup Iteration   3: 530989.263 ops/s
# Warmup Iteration   4: 529100.193 ops/s
# Warmup Iteration   5: 531044.150 ops/s
# Warmup Iteration   6: 534192.143 ops/s
# Warmup Iteration   7: 443170.181 ops/s
# Warmup Iteration   8: 531405.448 ops/s
# Warmup Iteration   9: 529762.549 ops/s
# Warmup Iteration  10: 531229.541 ops/s
# Warmup Iteration  11: 530028.010 ops/s
# Warmup Iteration  12: 530702.529 ops/s
# Warmup Iteration  13: 531083.131 ops/s
# Warmup Iteration  14: 530575.091 ops/s
# Warmup Iteration  15: 531412.402 ops/s
# Warmup Iteration  16: 532699.775 ops/s
# Warmup Iteration  17: 534240.204 ops/s
# Warmup Iteration  18: 531765.467 ops/s
# Warmup Iteration  19: 530789.669 ops/s
# Warmup Iteration  20: 532996.857 ops/s
# Warmup Iteration  21: 532506.462 ops/s
# Warmup Iteration  22: 534357.260 ops/s
# Warmup Iteration  23: 534438.827 ops/s
# Warmup Iteration  24: 532222.302 ops/s
# Warmup Iteration  25: 532788.472 ops/s
# Warmup Iteration  26: 532523.948 ops/s
# Warmup Iteration  27: 534948.630 ops/s
# Warmup Iteration  28: 532630.680 ops/s
# Warmup Iteration  29: 531723.167 ops/s
# Warmup Iteration  30: 532162.997 ops/s
Iteration   1: 535730.258 ops/s
Iteration   2: 532340.396 ops/s
Iteration   3: 533570.728 ops/s
Iteration   4: 534469.075 ops/s
Iteration   5: 535501.811 ops/s
Iteration   6: 531152.330 ops/s
Iteration   7: 535064.260 ops/s
Iteration   8: 534979.806 ops/s
Iteration   9: 534439.744 ops/s
Iteration  10: 532673.899 ops/s
Iteration  11: 532836.803 ops/s
Iteration  12: 532452.888 ops/s
Iteration  13: 533345.192 ops/s
Iteration  14: 532911.277 ops/s
Iteration  15: 532638.363 ops/s
Iteration  16: 533914.331 ops/s
Iteration  17: 534427.195 ops/s
Iteration  18: 532520.692 ops/s
Iteration  19: 532014.391 ops/s
Iteration  20: 533397.287 ops/s
Iteration  21: 533690.351 ops/s
Iteration  22: 532501.854 ops/s
Iteration  23: 534244.105 ops/s
Iteration  24: 529308.764 ops/s
Iteration  25: 534241.295 ops/s
Iteration  26: 534802.343 ops/s
Iteration  27: 535785.772 ops/s
Iteration  28: 532591.626 ops/s
Iteration  29: 533103.077 ops/s
Iteration  30: 533151.416 ops/s


Result "org.eclipse.collections.impl.bag.mutable.HashBagTest._Benchmark.benchmark_zipWithIndex":
  533460.044 ±(99.9%) 940.941 ops/s [Average]
  (min, avg, max) = (529308.764, 533460.044, 535785.772), stdev = 1408.356
  CI (99.9%): [532519.103, 534400.985] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score     Error  Units
HashBagTest._Benchmark.benchmark_zipWithIndex  thrpt   30  533460.044 ± 940.941  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 528446.891 ops/s
# Warmup Iteration   2: 643154.872 ops/s
# Warmup Iteration   3: 842383.531 ops/s
# Warmup Iteration   4: 842190.642 ops/s
# Warmup Iteration   5: 838333.632 ops/s
# Warmup Iteration   6: 842065.763 ops/s
# Warmup Iteration   7: 840626.017 ops/s
# Warmup Iteration   8: 842125.310 ops/s
# Warmup Iteration   9: 779275.269 ops/s
# Warmup Iteration  10: 758841.999 ops/s
# Warmup Iteration  11: 842444.402 ops/s
# Warmup Iteration  12: 840012.163 ops/s
# Warmup Iteration  13: 834496.531 ops/s
# Warmup Iteration  14: 838870.250 ops/s
# Warmup Iteration  15: 840793.110 ops/s
# Warmup Iteration  16: 838594.871 ops/s
# Warmup Iteration  17: 880714.510 ops/s
# Warmup Iteration  18: 883819.593 ops/s
# Warmup Iteration  19: 881140.962 ops/s
# Warmup Iteration  20: 880619.147 ops/s
# Warmup Iteration  21: 885536.249 ops/s
# Warmup Iteration  22: 882770.898 ops/s
# Warmup Iteration  23: 880957.132 ops/s
# Warmup Iteration  24: 885247.876 ops/s
# Warmup Iteration  25: 881632.289 ops/s
# Warmup Iteration  26: 884238.322 ops/s
# Warmup Iteration  27: 880344.874 ops/s
# Warmup Iteration  28: 880853.243 ops/s
# Warmup Iteration  29: 881007.183 ops/s
# Warmup Iteration  30: 881532.183 ops/s
Iteration   1: 879049.582 ops/s
Iteration   2: 878899.073 ops/s
Iteration   3: 884562.002 ops/s
Iteration   4: 880032.818 ops/s
Iteration   5: 880932.045 ops/s
Iteration   6: 880543.356 ops/s
Iteration   7: 877582.745 ops/s
Iteration   8: 881877.429 ops/s
Iteration   9: 882399.862 ops/s
Iteration  10: 883658.521 ops/s
Iteration  11: 880094.068 ops/s
Iteration  12: 886813.147 ops/s
Iteration  13: 879249.977 ops/s
Iteration  14: 880491.715 ops/s
Iteration  15: 885012.006 ops/s
Iteration  16: 883801.822 ops/s
Iteration  17: 879898.020 ops/s
Iteration  18: 880683.541 ops/s
Iteration  19: 881637.675 ops/s
Iteration  20: 883159.471 ops/s
Iteration  21: 883624.486 ops/s
Iteration  22: 881807.474 ops/s
Iteration  23: 884718.688 ops/s
Iteration  24: 885605.131 ops/s
Iteration  25: 882363.628 ops/s
Iteration  26: 883810.453 ops/s
Iteration  27: 878548.693 ops/s
Iteration  28: 880690.468 ops/s
Iteration  29: 882122.764 ops/s
Iteration  30: 884816.044 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_add":
  881949.557 ±(99.9%) 1564.436 ops/s [Average]
  (min, avg, max) = (877582.745, 881949.557, 886813.147), stdev = 2341.575
  CI (99.9%): [880385.121, 883513.993] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_add  thrpt   30  881949.557 ± 1564.436  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 526859.959 ops/s
# Warmup Iteration   2: 638280.508 ops/s
# Warmup Iteration   3: 835661.347 ops/s
# Warmup Iteration   4: 837439.054 ops/s
# Warmup Iteration   5: 832179.763 ops/s
# Warmup Iteration   6: 834404.768 ops/s
# Warmup Iteration   7: 837185.324 ops/s
# Warmup Iteration   8: 834328.733 ops/s
# Warmup Iteration   9: 773825.233 ops/s
# Warmup Iteration  10: 762788.518 ops/s
# Warmup Iteration  11: 836462.565 ops/s
# Warmup Iteration  12: 835521.527 ops/s
# Warmup Iteration  13: 838156.182 ops/s
# Warmup Iteration  14: 840251.365 ops/s
# Warmup Iteration  15: 838602.441 ops/s
# Warmup Iteration  16: 839421.388 ops/s
# Warmup Iteration  17: 880232.027 ops/s
# Warmup Iteration  18: 879549.146 ops/s
# Warmup Iteration  19: 879795.351 ops/s
# Warmup Iteration  20: 879888.861 ops/s
# Warmup Iteration  21: 877274.916 ops/s
# Warmup Iteration  22: 879329.937 ops/s
# Warmup Iteration  23: 877815.838 ops/s
# Warmup Iteration  24: 882648.468 ops/s
# Warmup Iteration  25: 881961.095 ops/s
# Warmup Iteration  26: 880143.819 ops/s
# Warmup Iteration  27: 879194.189 ops/s
# Warmup Iteration  28: 881069.219 ops/s
# Warmup Iteration  29: 876324.242 ops/s
# Warmup Iteration  30: 882778.332 ops/s
Iteration   1: 879283.895 ops/s
Iteration   2: 883881.059 ops/s
Iteration   3: 878881.645 ops/s
Iteration   4: 878123.628 ops/s
Iteration   5: 879108.381 ops/s
Iteration   6: 880780.421 ops/s
Iteration   7: 875824.571 ops/s
Iteration   8: 881885.579 ops/s
Iteration   9: 885796.633 ops/s
Iteration  10: 873714.507 ops/s
Iteration  11: 879314.873 ops/s
Iteration  12: 883566.735 ops/s
Iteration  13: 881666.379 ops/s
Iteration  14: 882076.074 ops/s
Iteration  15: 879994.027 ops/s
Iteration  16: 879109.866 ops/s
Iteration  17: 879348.990 ops/s
Iteration  18: 880771.782 ops/s
Iteration  19: 878627.363 ops/s
Iteration  20: 882772.174 ops/s
Iteration  21: 877957.506 ops/s
Iteration  22: 880831.821 ops/s
Iteration  23: 881182.539 ops/s
Iteration  24: 879360.019 ops/s
Iteration  25: 871131.757 ops/s
Iteration  26: 875349.857 ops/s
Iteration  27: 877097.125 ops/s
Iteration  28: 876645.519 ops/s
Iteration  29: 877523.759 ops/s
Iteration  30: 875792.979 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAll":
  879246.715 ±(99.9%) 2079.479 ops/s [Average]
  (min, avg, max) = (871131.757, 879246.715, 885796.633), stdev = 3112.466
  CI (99.9%): [877167.237, 881326.194] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAll  thrpt   30  879246.715 ± 2079.479  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525185.662 ops/s
# Warmup Iteration   2: 647030.032 ops/s
# Warmup Iteration   3: 842689.245 ops/s
# Warmup Iteration   4: 837733.576 ops/s
# Warmup Iteration   5: 844379.013 ops/s
# Warmup Iteration   6: 846495.659 ops/s
# Warmup Iteration   7: 840157.147 ops/s
# Warmup Iteration   8: 840634.711 ops/s
# Warmup Iteration   9: 732526.984 ops/s
# Warmup Iteration  10: 813179.181 ops/s
# Warmup Iteration  11: 843886.867 ops/s
# Warmup Iteration  12: 844366.015 ops/s
# Warmup Iteration  13: 844433.376 ops/s
# Warmup Iteration  14: 841877.827 ops/s
# Warmup Iteration  15: 844600.360 ops/s
# Warmup Iteration  16: 842351.289 ops/s
# Warmup Iteration  17: 885458.498 ops/s
# Warmup Iteration  18: 888100.778 ops/s
# Warmup Iteration  19: 886770.655 ops/s
# Warmup Iteration  20: 886501.424 ops/s
# Warmup Iteration  21: 891358.393 ops/s
# Warmup Iteration  22: 884687.417 ops/s
# Warmup Iteration  23: 889292.653 ops/s
# Warmup Iteration  24: 886180.224 ops/s
# Warmup Iteration  25: 882482.072 ops/s
# Warmup Iteration  26: 885002.075 ops/s
# Warmup Iteration  27: 885183.814 ops/s
# Warmup Iteration  28: 888076.105 ops/s
# Warmup Iteration  29: 886594.105 ops/s
# Warmup Iteration  30: 888072.894 ops/s
Iteration   1: 888003.024 ops/s
Iteration   2: 887907.862 ops/s
Iteration   3: 886832.736 ops/s
Iteration   4: 887896.666 ops/s
Iteration   5: 891226.915 ops/s
Iteration   6: 889064.094 ops/s
Iteration   7: 890549.719 ops/s
Iteration   8: 887724.621 ops/s
Iteration   9: 888349.931 ops/s
Iteration  10: 889332.433 ops/s
Iteration  11: 884305.484 ops/s
Iteration  12: 884795.144 ops/s
Iteration  13: 889965.147 ops/s
Iteration  14: 885430.719 ops/s
Iteration  15: 887994.924 ops/s
Iteration  16: 889993.195 ops/s
Iteration  17: 891883.201 ops/s
Iteration  18: 884499.005 ops/s
Iteration  19: 889455.331 ops/s
Iteration  20: 888706.599 ops/s
Iteration  21: 884473.016 ops/s
Iteration  22: 884551.659 ops/s
Iteration  23: 884237.756 ops/s
Iteration  24: 887917.143 ops/s
Iteration  25: 889167.768 ops/s
Iteration  26: 880987.760 ops/s
Iteration  27: 885236.497 ops/s
Iteration  28: 882801.920 ops/s
Iteration  29: 886344.855 ops/s
Iteration  30: 886933.413 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAllIterable":
  887218.951 ±(99.9%) 1750.035 ops/s [Average]
  (min, avg, max) = (880987.760, 887218.951, 891883.201), stdev = 2619.369
  CI (99.9%): [885468.917, 888968.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addAllIterable  thrpt   30  887218.951 ± 1750.035  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537134.903 ops/s
# Warmup Iteration   2: 672143.215 ops/s
# Warmup Iteration   3: 877952.746 ops/s
# Warmup Iteration   4: 871671.075 ops/s
# Warmup Iteration   5: 873626.114 ops/s
# Warmup Iteration   6: 876269.893 ops/s
# Warmup Iteration   7: 872735.124 ops/s
# Warmup Iteration   8: 872340.922 ops/s
# Warmup Iteration   9: 727848.495 ops/s
# Warmup Iteration  10: 874489.484 ops/s
# Warmup Iteration  11: 876909.990 ops/s
# Warmup Iteration  12: 870048.380 ops/s
# Warmup Iteration  13: 876333.351 ops/s
# Warmup Iteration  14: 875840.751 ops/s
# Warmup Iteration  15: 876296.682 ops/s
# Warmup Iteration  16: 873904.116 ops/s
# Warmup Iteration  17: 920096.035 ops/s
# Warmup Iteration  18: 920547.303 ops/s
# Warmup Iteration  19: 918115.348 ops/s
# Warmup Iteration  20: 924020.756 ops/s
# Warmup Iteration  21: 919049.810 ops/s
# Warmup Iteration  22: 915856.047 ops/s
# Warmup Iteration  23: 923807.917 ops/s
# Warmup Iteration  24: 918572.179 ops/s
# Warmup Iteration  25: 916358.412 ops/s
# Warmup Iteration  26: 920551.149 ops/s
# Warmup Iteration  27: 919903.894 ops/s
# Warmup Iteration  28: 920093.880 ops/s
# Warmup Iteration  29: 920261.074 ops/s
# Warmup Iteration  30: 918467.396 ops/s
Iteration   1: 919444.950 ops/s
Iteration   2: 918185.301 ops/s
Iteration   3: 917819.892 ops/s
Iteration   4: 916312.920 ops/s
Iteration   5: 924081.530 ops/s
Iteration   6: 919727.911 ops/s
Iteration   7: 915721.141 ops/s
Iteration   8: 920355.779 ops/s
Iteration   9: 920274.679 ops/s
Iteration  10: 921485.667 ops/s
Iteration  11: 910663.143 ops/s
Iteration  12: 913254.350 ops/s
Iteration  13: 918438.781 ops/s
Iteration  14: 923218.978 ops/s
Iteration  15: 917163.195 ops/s
Iteration  16: 922986.204 ops/s
Iteration  17: 917857.634 ops/s
Iteration  18: 915168.299 ops/s
Iteration  19: 919498.980 ops/s
Iteration  20: 924424.236 ops/s
Iteration  21: 916737.526 ops/s
Iteration  22: 922780.134 ops/s
Iteration  23: 916582.187 ops/s
Iteration  24: 918196.877 ops/s
Iteration  25: 923606.373 ops/s
Iteration  26: 918202.243 ops/s
Iteration  27: 919998.783 ops/s
Iteration  28: 923787.027 ops/s
Iteration  29: 920931.478 ops/s
Iteration  30: 915274.471 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addOccurrences":
  919072.689 ±(99.9%) 2256.799 ops/s [Average]
  (min, avg, max) = (910663.143, 919072.689, 924424.236), stdev = 3377.871
  CI (99.9%): [916815.890, 921329.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_addOccurrences  thrpt   30  919072.689 ± 2256.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525979.506 ops/s
# Warmup Iteration   2: 644122.733 ops/s
# Warmup Iteration   3: 847314.746 ops/s
# Warmup Iteration   4: 846608.639 ops/s
# Warmup Iteration   5: 842868.414 ops/s
# Warmup Iteration   6: 846444.503 ops/s
# Warmup Iteration   7: 843649.079 ops/s
# Warmup Iteration   8: 841562.428 ops/s
# Warmup Iteration   9: 760508.904 ops/s
# Warmup Iteration  10: 787076.668 ops/s
# Warmup Iteration  11: 840934.923 ops/s
# Warmup Iteration  12: 843780.570 ops/s
# Warmup Iteration  13: 843187.679 ops/s
# Warmup Iteration  14: 844756.112 ops/s
# Warmup Iteration  15: 844431.642 ops/s
# Warmup Iteration  16: 842284.583 ops/s
# Warmup Iteration  17: 886266.548 ops/s
# Warmup Iteration  18: 888814.467 ops/s
# Warmup Iteration  19: 887331.105 ops/s
# Warmup Iteration  20: 889309.858 ops/s
# Warmup Iteration  21: 889947.043 ops/s
# Warmup Iteration  22: 889873.637 ops/s
# Warmup Iteration  23: 888569.107 ops/s
# Warmup Iteration  24: 889729.497 ops/s
# Warmup Iteration  25: 888740.723 ops/s
# Warmup Iteration  26: 885652.972 ops/s
# Warmup Iteration  27: 886630.550 ops/s
# Warmup Iteration  28: 888813.908 ops/s
# Warmup Iteration  29: 888409.973 ops/s
# Warmup Iteration  30: 890162.506 ops/s
Iteration   1: 883948.614 ops/s
Iteration   2: 884091.743 ops/s
Iteration   3: 889833.588 ops/s
Iteration   4: 889383.084 ops/s
Iteration   5: 890655.095 ops/s
Iteration   6: 891874.765 ops/s
Iteration   7: 884403.292 ops/s
Iteration   8: 887655.621 ops/s
Iteration   9: 888404.503 ops/s
Iteration  10: 890485.397 ops/s
Iteration  11: 890155.123 ops/s
Iteration  12: 890720.129 ops/s
Iteration  13: 889022.763 ops/s
Iteration  14: 892234.868 ops/s
Iteration  15: 892739.020 ops/s
Iteration  16: 888254.106 ops/s
Iteration  17: 881067.622 ops/s
Iteration  18: 888428.478 ops/s
Iteration  19: 885231.801 ops/s
Iteration  20: 887204.848 ops/s
Iteration  21: 886044.093 ops/s
Iteration  22: 885787.729 ops/s
Iteration  23: 890384.494 ops/s
Iteration  24: 885701.725 ops/s
Iteration  25: 884797.301 ops/s
Iteration  26: 888869.536 ops/s
Iteration  27: 886208.396 ops/s
Iteration  28: 886514.385 ops/s
Iteration  29: 893112.518 ops/s
Iteration  30: 889417.975 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_clear":
  888087.754 ±(99.9%) 1971.591 ops/s [Average]
  (min, avg, max) = (881067.622, 888087.754, 893112.518), stdev = 2950.984
  CI (99.9%): [886116.163, 890059.344] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_clear  thrpt   30  888087.754 ± 1971.591  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 482772.481 ops/s
# Warmup Iteration   2: 1258284.338 ops/s
# Warmup Iteration   3: 1272105.846 ops/s
# Warmup Iteration   4: 1068122.336 ops/s
# Warmup Iteration   5: 1270441.324 ops/s
# Warmup Iteration   6: 1271531.496 ops/s
# Warmup Iteration   7: 1265760.151 ops/s
# Warmup Iteration   8: 1267140.078 ops/s
# Warmup Iteration   9: 1268036.238 ops/s
# Warmup Iteration  10: 1274476.973 ops/s
# Warmup Iteration  11: 1263998.217 ops/s
# Warmup Iteration  12: 1261778.748 ops/s
# Warmup Iteration  13: 1262184.850 ops/s
# Warmup Iteration  14: 1264881.146 ops/s
# Warmup Iteration  15: 1267182.566 ops/s
# Warmup Iteration  16: 1259961.890 ops/s
# Warmup Iteration  17: 1270686.227 ops/s
# Warmup Iteration  18: 1273446.639 ops/s
# Warmup Iteration  19: 1270995.361 ops/s
# Warmup Iteration  20: 1277288.321 ops/s
# Warmup Iteration  21: 1272617.799 ops/s
# Warmup Iteration  22: 1274229.461 ops/s
# Warmup Iteration  23: 1274456.865 ops/s
# Warmup Iteration  24: 1276808.608 ops/s
# Warmup Iteration  25: 1270516.564 ops/s
# Warmup Iteration  26: 1269982.268 ops/s
# Warmup Iteration  27: 1278459.894 ops/s
# Warmup Iteration  28: 1277038.766 ops/s
# Warmup Iteration  29: 1271976.058 ops/s
# Warmup Iteration  30: 1276997.386 ops/s
Iteration   1: 1277756.619 ops/s
Iteration   2: 1275252.339 ops/s
Iteration   3: 1267286.284 ops/s
Iteration   4: 1262227.154 ops/s
Iteration   5: 1271742.802 ops/s
Iteration   6: 1277213.131 ops/s
Iteration   7: 1270207.815 ops/s
Iteration   8: 1275564.614 ops/s
Iteration   9: 1268396.880 ops/s
Iteration  10: 1274606.021 ops/s
Iteration  11: 1260125.547 ops/s
Iteration  12: 1263334.193 ops/s
Iteration  13: 1269699.378 ops/s
Iteration  14: 1271546.716 ops/s
Iteration  15: 1275763.632 ops/s
Iteration  16: 1269168.934 ops/s
Iteration  17: 1257075.707 ops/s
Iteration  18: 1264001.569 ops/s
Iteration  19: 1273162.675 ops/s
Iteration  20: 1275003.234 ops/s
Iteration  21: 1276124.165 ops/s
Iteration  22: 1274067.171 ops/s
Iteration  23: 1280832.647 ops/s
Iteration  24: 1273658.412 ops/s
Iteration  25: 1278730.645 ops/s
Iteration  26: 1280021.518 ops/s
Iteration  27: 1272578.502 ops/s
Iteration  28: 1274352.992 ops/s
Iteration  29: 1270833.769 ops/s
Iteration  30: 1266825.895 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collect":
  1271572.032 ±(99.9%) 3933.949 ops/s [Average]
  (min, avg, max) = (1257075.707, 1271572.032, 1280832.647), stdev = 5888.150
  CI (99.9%): [1267638.083, 1275505.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collect  thrpt   30  1271572.032 ± 3933.949  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1371427.137 ops/s
# Warmup Iteration   2: 3285114.024 ops/s
# Warmup Iteration   3: 2921818.247 ops/s
# Warmup Iteration   4: 3274392.831 ops/s
# Warmup Iteration   5: 3367576.159 ops/s
# Warmup Iteration   6: 3373550.627 ops/s
# Warmup Iteration   7: 3330235.756 ops/s
# Warmup Iteration   8: 3376570.702 ops/s
# Warmup Iteration   9: 3365988.241 ops/s
# Warmup Iteration  10: 3365372.402 ops/s
# Warmup Iteration  11: 3361424.507 ops/s
# Warmup Iteration  12: 3371057.795 ops/s
# Warmup Iteration  13: 3370720.970 ops/s
# Warmup Iteration  14: 3370176.163 ops/s
# Warmup Iteration  15: 3391494.885 ops/s
# Warmup Iteration  16: 3372200.107 ops/s
# Warmup Iteration  17: 3332974.251 ops/s
# Warmup Iteration  18: 3332421.123 ops/s
# Warmup Iteration  19: 3340210.677 ops/s
# Warmup Iteration  20: 3329662.689 ops/s
# Warmup Iteration  21: 3324851.605 ops/s
# Warmup Iteration  22: 3337609.133 ops/s
# Warmup Iteration  23: 3320898.229 ops/s
# Warmup Iteration  24: 3308788.169 ops/s
# Warmup Iteration  25: 3328592.515 ops/s
# Warmup Iteration  26: 3340510.667 ops/s
# Warmup Iteration  27: 3331156.346 ops/s
# Warmup Iteration  28: 3328594.354 ops/s
# Warmup Iteration  29: 3329988.848 ops/s
# Warmup Iteration  30: 3324474.087 ops/s
Iteration   1: 3328798.372 ops/s
Iteration   2: 3330640.028 ops/s
Iteration   3: 3346096.289 ops/s
Iteration   4: 3332073.953 ops/s
Iteration   5: 3331024.669 ops/s
Iteration   6: 3340397.803 ops/s
Iteration   7: 3341433.034 ops/s
Iteration   8: 3333330.211 ops/s
Iteration   9: 3328884.112 ops/s
Iteration  10: 3311412.740 ops/s
Iteration  11: 3318891.245 ops/s
Iteration  12: 3336148.245 ops/s
Iteration  13: 3333289.072 ops/s
Iteration  14: 3312790.366 ops/s
Iteration  15: 3334966.877 ops/s
Iteration  16: 3307793.472 ops/s
Iteration  17: 3335978.062 ops/s
Iteration  18: 3338278.808 ops/s
Iteration  19: 3332695.315 ops/s
Iteration  20: 3327001.942 ops/s
Iteration  21: 3314624.196 ops/s
Iteration  22: 3305453.595 ops/s
Iteration  23: 3335250.563 ops/s
Iteration  24: 3326408.668 ops/s
Iteration  25: 3337797.250 ops/s
Iteration  26: 3328734.330 ops/s
Iteration  27: 3307252.774 ops/s
Iteration  28: 3324255.573 ops/s
Iteration  29: 3334147.924 ops/s
Iteration  30: 3325001.617 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectBoolean":
  3328028.370 ±(99.9%) 7220.652 ops/s [Average]
  (min, avg, max) = (3305453.595, 3328028.370, 3346096.289), stdev = 10807.532
  CI (99.9%): [3320807.719, 3335249.022] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectBoolean  thrpt   30  3328028.370 ± 7220.652  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1254884.482 ops/s
# Warmup Iteration   2: 3251018.386 ops/s
# Warmup Iteration   3: 2777272.651 ops/s
# Warmup Iteration   4: 3305461.616 ops/s
# Warmup Iteration   5: 3291161.671 ops/s
# Warmup Iteration   6: 3314045.861 ops/s
# Warmup Iteration   7: 3291843.579 ops/s
# Warmup Iteration   8: 3291708.760 ops/s
# Warmup Iteration   9: 3305136.039 ops/s
# Warmup Iteration  10: 3313109.549 ops/s
# Warmup Iteration  11: 3310763.420 ops/s
# Warmup Iteration  12: 3306825.187 ops/s
# Warmup Iteration  13: 3310312.750 ops/s
# Warmup Iteration  14: 3307363.099 ops/s
# Warmup Iteration  15: 3300483.250 ops/s
# Warmup Iteration  16: 3313546.755 ops/s
# Warmup Iteration  17: 3320216.222 ops/s
# Warmup Iteration  18: 3305075.963 ops/s
# Warmup Iteration  19: 3304487.868 ops/s
# Warmup Iteration  20: 3292701.546 ops/s
# Warmup Iteration  21: 3300317.675 ops/s
# Warmup Iteration  22: 3294503.488 ops/s
# Warmup Iteration  23: 3321894.254 ops/s
# Warmup Iteration  24: 3292564.266 ops/s
# Warmup Iteration  25: 3287071.468 ops/s
# Warmup Iteration  26: 3278450.418 ops/s
# Warmup Iteration  27: 3299498.285 ops/s
# Warmup Iteration  28: 3300382.548 ops/s
# Warmup Iteration  29: 3295036.500 ops/s
# Warmup Iteration  30: 3303631.395 ops/s
Iteration   1: 3292667.376 ops/s
Iteration   2: 3287945.719 ops/s
Iteration   3: 3296946.228 ops/s
Iteration   4: 3287795.824 ops/s
Iteration   5: 3304872.580 ops/s
Iteration   6: 3311799.587 ops/s
Iteration   7: 3298129.981 ops/s
Iteration   8: 3284483.159 ops/s
Iteration   9: 3293956.245 ops/s
Iteration  10: 3278681.703 ops/s
Iteration  11: 3276879.760 ops/s
Iteration  12: 3306231.348 ops/s
Iteration  13: 3310861.302 ops/s
Iteration  14: 3304467.159 ops/s
Iteration  15: 3288632.751 ops/s
Iteration  16: 3310178.454 ops/s
Iteration  17: 3303234.032 ops/s
Iteration  18: 3322595.970 ops/s
Iteration  19: 3310170.915 ops/s
Iteration  20: 3299782.758 ops/s
Iteration  21: 3288961.016 ops/s
Iteration  22: 3300129.186 ops/s
Iteration  23: 3298795.122 ops/s
Iteration  24: 3299252.215 ops/s
Iteration  25: 3272916.588 ops/s
Iteration  26: 3316988.774 ops/s
Iteration  27: 3310077.502 ops/s
Iteration  28: 3286063.851 ops/s
Iteration  29: 3307826.180 ops/s
Iteration  30: 3308909.302 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectByte":
  3298674.420 ±(99.9%) 8186.367 ops/s [Average]
  (min, avg, max) = (3272916.588, 3298674.420, 3322595.970), stdev = 12252.970
  CI (99.9%): [3290488.052, 3306860.787] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectByte  thrpt   30  3298674.420 ± 8186.367  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1209113.454 ops/s
# Warmup Iteration   2: 3238524.396 ops/s
# Warmup Iteration   3: 2718801.420 ops/s
# Warmup Iteration   4: 3255558.699 ops/s
# Warmup Iteration   5: 3259570.458 ops/s
# Warmup Iteration   6: 3241761.878 ops/s
# Warmup Iteration   7: 3244110.892 ops/s
# Warmup Iteration   8: 3239630.188 ops/s
# Warmup Iteration   9: 3253543.543 ops/s
# Warmup Iteration  10: 3249764.748 ops/s
# Warmup Iteration  11: 3267511.226 ops/s
# Warmup Iteration  12: 3265657.151 ops/s
# Warmup Iteration  13: 3259135.662 ops/s
# Warmup Iteration  14: 3249696.002 ops/s
# Warmup Iteration  15: 3251970.034 ops/s
# Warmup Iteration  16: 3258170.216 ops/s
# Warmup Iteration  17: 3249197.649 ops/s
# Warmup Iteration  18: 3252792.713 ops/s
# Warmup Iteration  19: 3250828.819 ops/s
# Warmup Iteration  20: 3236189.405 ops/s
# Warmup Iteration  21: 3253682.818 ops/s
# Warmup Iteration  22: 3269208.281 ops/s
# Warmup Iteration  23: 3267597.027 ops/s
# Warmup Iteration  24: 3251568.073 ops/s
# Warmup Iteration  25: 3266761.100 ops/s
# Warmup Iteration  26: 3253044.053 ops/s
# Warmup Iteration  27: 3254533.613 ops/s
# Warmup Iteration  28: 3271304.025 ops/s
# Warmup Iteration  29: 3252722.813 ops/s
# Warmup Iteration  30: 3263775.106 ops/s
Iteration   1: 3250904.647 ops/s
Iteration   2: 3269886.621 ops/s
Iteration   3: 3249677.724 ops/s
Iteration   4: 3261435.625 ops/s
Iteration   5: 3270440.779 ops/s
Iteration   6: 3255105.678 ops/s
Iteration   7: 3241590.135 ops/s
Iteration   8: 3231292.890 ops/s
Iteration   9: 3261171.392 ops/s
Iteration  10: 3248922.036 ops/s
Iteration  11: 3253095.952 ops/s
Iteration  12: 3250179.872 ops/s
Iteration  13: 3277998.461 ops/s
Iteration  14: 3252827.958 ops/s
Iteration  15: 3244465.635 ops/s
Iteration  16: 3252230.870 ops/s
Iteration  17: 3253221.613 ops/s
Iteration  18: 3270929.840 ops/s
Iteration  19: 3276939.342 ops/s
Iteration  20: 3252400.016 ops/s
Iteration  21: 3245185.310 ops/s
Iteration  22: 3249966.380 ops/s
Iteration  23: 3265434.937 ops/s
Iteration  24: 3261431.730 ops/s
Iteration  25: 3268916.094 ops/s
Iteration  26: 3242184.382 ops/s
Iteration  27: 3269449.471 ops/s
Iteration  28: 3252766.758 ops/s
Iteration  29: 3258905.694 ops/s
Iteration  30: 3262422.420 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectChar":
  3256712.675 ±(99.9%) 7457.914 ops/s [Average]
  (min, avg, max) = (3231292.890, 3256712.675, 3277998.461), stdev = 11162.655
  CI (99.9%): [3249254.762, 3264170.589] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectChar  thrpt   30  3256712.675 ± 7457.914  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1144603.074 ops/s
# Warmup Iteration   2: 3006794.994 ops/s
# Warmup Iteration   3: 2514749.577 ops/s
# Warmup Iteration   4: 2955912.449 ops/s
# Warmup Iteration   5: 2974576.268 ops/s
# Warmup Iteration   6: 2971641.390 ops/s
# Warmup Iteration   7: 2990894.144 ops/s
# Warmup Iteration   8: 2995970.568 ops/s
# Warmup Iteration   9: 2976463.124 ops/s
# Warmup Iteration  10: 2994186.303 ops/s
# Warmup Iteration  11: 2979150.604 ops/s
# Warmup Iteration  12: 2970632.410 ops/s
# Warmup Iteration  13: 2985616.288 ops/s
# Warmup Iteration  14: 2990798.812 ops/s
# Warmup Iteration  15: 2977896.128 ops/s
# Warmup Iteration  16: 3005877.632 ops/s
# Warmup Iteration  17: 3032100.258 ops/s
# Warmup Iteration  18: 3031681.026 ops/s
# Warmup Iteration  19: 3020468.156 ops/s
# Warmup Iteration  20: 3013047.276 ops/s
# Warmup Iteration  21: 3045510.839 ops/s
# Warmup Iteration  22: 3016686.442 ops/s
# Warmup Iteration  23: 3022024.548 ops/s
# Warmup Iteration  24: 3034065.953 ops/s
# Warmup Iteration  25: 3015825.483 ops/s
# Warmup Iteration  26: 3020911.028 ops/s
# Warmup Iteration  27: 3019640.007 ops/s
# Warmup Iteration  28: 3030475.180 ops/s
# Warmup Iteration  29: 3017518.162 ops/s
# Warmup Iteration  30: 3030780.744 ops/s
Iteration   1: 3029494.982 ops/s
Iteration   2: 3042738.303 ops/s
Iteration   3: 2965834.290 ops/s
Iteration   4: 3003997.170 ops/s
Iteration   5: 2997849.797 ops/s
Iteration   6: 3025139.609 ops/s
Iteration   7: 3026758.216 ops/s
Iteration   8: 3027648.089 ops/s
Iteration   9: 3020498.149 ops/s
Iteration  10: 3019493.108 ops/s
Iteration  11: 3015491.613 ops/s
Iteration  12: 3054816.435 ops/s
Iteration  13: 3012782.265 ops/s
Iteration  14: 3021766.058 ops/s
Iteration  15: 3032493.293 ops/s
Iteration  16: 2989775.932 ops/s
Iteration  17: 2999425.001 ops/s
Iteration  18: 2992977.126 ops/s
Iteration  19: 3018738.256 ops/s
Iteration  20: 2996460.716 ops/s
Iteration  21: 2991344.264 ops/s
Iteration  22: 3030694.568 ops/s
Iteration  23: 3025360.782 ops/s
Iteration  24: 2996587.042 ops/s
Iteration  25: 3006634.086 ops/s
Iteration  26: 3007925.311 ops/s
Iteration  27: 3010867.818 ops/s
Iteration  28: 3030107.372 ops/s
Iteration  29: 3035143.414 ops/s
Iteration  30: 3020285.352 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectDouble":
  3014970.947 ±(99.9%) 12393.244 ops/s [Average]
  (min, avg, max) = (2965834.290, 3014970.947, 3054816.435), stdev = 18549.626
  CI (99.9%): [3002577.703, 3027364.192] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectDouble  thrpt   30  3014970.947 ± 12393.244  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1179752.287 ops/s
# Warmup Iteration   2: 3099513.515 ops/s
# Warmup Iteration   3: 2604822.445 ops/s
# Warmup Iteration   4: 3117778.153 ops/s
# Warmup Iteration   5: 3119004.538 ops/s
# Warmup Iteration   6: 3121651.611 ops/s
# Warmup Iteration   7: 3111774.975 ops/s
# Warmup Iteration   8: 3125691.547 ops/s
# Warmup Iteration   9: 3140465.972 ops/s
# Warmup Iteration  10: 3102940.308 ops/s
# Warmup Iteration  11: 3117635.034 ops/s
# Warmup Iteration  12: 3110051.888 ops/s
# Warmup Iteration  13: 3113560.145 ops/s
# Warmup Iteration  14: 3116929.758 ops/s
# Warmup Iteration  15: 3134508.906 ops/s
# Warmup Iteration  16: 3132652.161 ops/s
# Warmup Iteration  17: 3118337.982 ops/s
# Warmup Iteration  18: 3112357.968 ops/s
# Warmup Iteration  19: 3125133.847 ops/s
# Warmup Iteration  20: 3113614.186 ops/s
# Warmup Iteration  21: 3112597.689 ops/s
# Warmup Iteration  22: 3113222.525 ops/s
# Warmup Iteration  23: 3110601.144 ops/s
# Warmup Iteration  24: 3102933.721 ops/s
# Warmup Iteration  25: 3113753.424 ops/s
# Warmup Iteration  26: 3124186.465 ops/s
# Warmup Iteration  27: 3113142.570 ops/s
# Warmup Iteration  28: 3117221.136 ops/s
# Warmup Iteration  29: 3119149.805 ops/s
# Warmup Iteration  30: 3121865.798 ops/s
Iteration   1: 3082599.912 ops/s
Iteration   2: 3114158.269 ops/s
Iteration   3: 3122715.959 ops/s
Iteration   4: 3106440.184 ops/s
Iteration   5: 3100021.037 ops/s
Iteration   6: 3108424.854 ops/s
Iteration   7: 3088127.077 ops/s
Iteration   8: 3120295.455 ops/s
Iteration   9: 3112990.370 ops/s
Iteration  10: 3123165.195 ops/s
Iteration  11: 3131998.474 ops/s
Iteration  12: 3115746.267 ops/s
Iteration  13: 3111217.414 ops/s
Iteration  14: 3121813.402 ops/s
Iteration  15: 3110711.174 ops/s
Iteration  16: 3095629.215 ops/s
Iteration  17: 3110299.790 ops/s
Iteration  18: 3119089.100 ops/s
Iteration  19: 3112602.137 ops/s
Iteration  20: 3113755.871 ops/s
Iteration  21: 3115989.324 ops/s
Iteration  22: 3110963.174 ops/s
Iteration  23: 3138750.513 ops/s
Iteration  24: 3126805.863 ops/s
Iteration  25: 3114698.630 ops/s
Iteration  26: 3123136.014 ops/s
Iteration  27: 3122659.125 ops/s
Iteration  28: 3113259.505 ops/s
Iteration  29: 3118560.359 ops/s
Iteration  30: 3134710.496 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectFloat":
  3114711.139 ±(99.9%) 8144.165 ops/s [Average]
  (min, avg, max) = (3082599.912, 3114711.139, 3138750.513), stdev = 12189.804
  CI (99.9%): [3106566.974, 3122855.304] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectFloat  thrpt   30  3114711.139 ± 8144.165  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 544440.601 ops/s
# Warmup Iteration   2: 1464148.145 ops/s
# Warmup Iteration   3: 1467974.526 ops/s
# Warmup Iteration   4: 1223591.151 ops/s
# Warmup Iteration   5: 1477778.420 ops/s
# Warmup Iteration   6: 1473926.131 ops/s
# Warmup Iteration   7: 1483426.050 ops/s
# Warmup Iteration   8: 1478311.377 ops/s
# Warmup Iteration   9: 1477868.247 ops/s
# Warmup Iteration  10: 1480463.430 ops/s
# Warmup Iteration  11: 1478369.853 ops/s
# Warmup Iteration  12: 1470811.171 ops/s
# Warmup Iteration  13: 1475624.193 ops/s
# Warmup Iteration  14: 1482346.828 ops/s
# Warmup Iteration  15: 1477799.545 ops/s
# Warmup Iteration  16: 1472089.354 ops/s
# Warmup Iteration  17: 1480274.403 ops/s
# Warmup Iteration  18: 1478250.885 ops/s
# Warmup Iteration  19: 1477995.255 ops/s
# Warmup Iteration  20: 1477318.402 ops/s
# Warmup Iteration  21: 1479734.563 ops/s
# Warmup Iteration  22: 1476097.098 ops/s
# Warmup Iteration  23: 1478885.742 ops/s
# Warmup Iteration  24: 1481722.525 ops/s
# Warmup Iteration  25: 1487549.938 ops/s
# Warmup Iteration  26: 1478930.256 ops/s
# Warmup Iteration  27: 1481042.417 ops/s
# Warmup Iteration  28: 1482443.454 ops/s
# Warmup Iteration  29: 1480097.750 ops/s
# Warmup Iteration  30: 1491302.577 ops/s
Iteration   1: 1486353.479 ops/s
Iteration   2: 1486728.085 ops/s
Iteration   3: 1478884.512 ops/s
Iteration   4: 1474422.085 ops/s
Iteration   5: 1477943.079 ops/s
Iteration   6: 1483224.068 ops/s
Iteration   7: 1479807.488 ops/s
Iteration   8: 1485174.012 ops/s
Iteration   9: 1484978.982 ops/s
Iteration  10: 1474414.128 ops/s
Iteration  11: 1467255.407 ops/s
Iteration  12: 1480125.590 ops/s
Iteration  13: 1477538.235 ops/s
Iteration  14: 1478363.651 ops/s
Iteration  15: 1482164.735 ops/s
Iteration  16: 1482875.381 ops/s
Iteration  17: 1477173.715 ops/s
Iteration  18: 1473910.588 ops/s
Iteration  19: 1478572.668 ops/s
Iteration  20: 1479625.569 ops/s
Iteration  21: 1480821.390 ops/s
Iteration  22: 1482109.162 ops/s
Iteration  23: 1484444.949 ops/s
Iteration  24: 1479074.499 ops/s
Iteration  25: 1466559.788 ops/s
Iteration  26: 1481926.353 ops/s
Iteration  27: 1472419.820 ops/s
Iteration  28: 1480869.044 ops/s
Iteration  29: 1481528.522 ops/s
Iteration  30: 1480299.655 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectIf":
  1479319.621 ±(99.9%) 3290.976 ops/s [Average]
  (min, avg, max) = (1466559.788, 1479319.621, 1486728.085), stdev = 4925.779
  CI (99.9%): [1476028.645, 1482610.598] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectIf  thrpt   30  1479319.621 ± 3290.976  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1212260.931 ops/s
# Warmup Iteration   2: 3150882.180 ops/s
# Warmup Iteration   3: 2652771.266 ops/s
# Warmup Iteration   4: 3181764.119 ops/s
# Warmup Iteration   5: 3184905.899 ops/s
# Warmup Iteration   6: 3186290.167 ops/s
# Warmup Iteration   7: 3173983.637 ops/s
# Warmup Iteration   8: 3185673.857 ops/s
# Warmup Iteration   9: 3184441.893 ops/s
# Warmup Iteration  10: 3182601.216 ops/s
# Warmup Iteration  11: 3167645.866 ops/s
# Warmup Iteration  12: 3185241.499 ops/s
# Warmup Iteration  13: 3183364.685 ops/s
# Warmup Iteration  14: 3170703.266 ops/s
# Warmup Iteration  15: 3174946.029 ops/s
# Warmup Iteration  16: 3180923.477 ops/s
# Warmup Iteration  17: 3157435.409 ops/s
# Warmup Iteration  18: 3167752.636 ops/s
# Warmup Iteration  19: 3169613.026 ops/s
# Warmup Iteration  20: 3185644.276 ops/s
# Warmup Iteration  21: 3173815.618 ops/s
# Warmup Iteration  22: 3178863.417 ops/s
# Warmup Iteration  23: 3182482.291 ops/s
# Warmup Iteration  24: 3152523.611 ops/s
# Warmup Iteration  25: 3180283.766 ops/s
# Warmup Iteration  26: 3163362.641 ops/s
# Warmup Iteration  27: 3169318.676 ops/s
# Warmup Iteration  28: 3175812.487 ops/s
# Warmup Iteration  29: 3160437.167 ops/s
# Warmup Iteration  30: 3178070.411 ops/s
Iteration   1: 3165063.958 ops/s
Iteration   2: 3182371.573 ops/s
Iteration   3: 3188681.629 ops/s
Iteration   4: 3199360.078 ops/s
Iteration   5: 3187999.680 ops/s
Iteration   6: 3188669.911 ops/s
Iteration   7: 3175157.600 ops/s
Iteration   8: 3170779.867 ops/s
Iteration   9: 3187813.975 ops/s
Iteration  10: 3181728.637 ops/s
Iteration  11: 3191261.935 ops/s
Iteration  12: 3196400.618 ops/s
Iteration  13: 3179924.980 ops/s
Iteration  14: 3164885.157 ops/s
Iteration  15: 3187915.478 ops/s
Iteration  16: 3189326.832 ops/s
Iteration  17: 3187462.620 ops/s
Iteration  18: 3180739.105 ops/s
Iteration  19: 3194434.268 ops/s
Iteration  20: 3189360.157 ops/s
Iteration  21: 3175040.155 ops/s
Iteration  22: 3180789.722 ops/s
Iteration  23: 3199590.358 ops/s
Iteration  24: 3180628.836 ops/s
Iteration  25: 3191636.433 ops/s
Iteration  26: 3164093.307 ops/s
Iteration  27: 3170571.957 ops/s
Iteration  28: 3156083.867 ops/s
Iteration  29: 3199880.891 ops/s
Iteration  30: 3173534.694 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectInt":
  3182706.276 ±(99.9%) 7640.570 ops/s [Average]
  (min, avg, max) = (3156083.867, 3182706.276, 3199880.891), stdev = 11436.046
  CI (99.9%): [3175065.706, 3190346.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectInt  thrpt   30  3182706.276 ± 7640.570  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1210468.339 ops/s
# Warmup Iteration   2: 3007185.095 ops/s
# Warmup Iteration   3: 2589714.846 ops/s
# Warmup Iteration   4: 3078776.042 ops/s
# Warmup Iteration   5: 3094967.209 ops/s
# Warmup Iteration   6: 3095935.299 ops/s
# Warmup Iteration   7: 3084727.838 ops/s
# Warmup Iteration   8: 3085435.499 ops/s
# Warmup Iteration   9: 3071144.433 ops/s
# Warmup Iteration  10: 3086430.479 ops/s
# Warmup Iteration  11: 3106215.980 ops/s
# Warmup Iteration  12: 3080653.312 ops/s
# Warmup Iteration  13: 3097045.254 ops/s
# Warmup Iteration  14: 3076238.166 ops/s
# Warmup Iteration  15: 3101471.913 ops/s
# Warmup Iteration  16: 3081315.782 ops/s
# Warmup Iteration  17: 3090249.883 ops/s
# Warmup Iteration  18: 3082078.625 ops/s
# Warmup Iteration  19: 3063095.467 ops/s
# Warmup Iteration  20: 3078100.860 ops/s
# Warmup Iteration  21: 3076051.539 ops/s
# Warmup Iteration  22: 3070257.613 ops/s
# Warmup Iteration  23: 3106275.310 ops/s
# Warmup Iteration  24: 3101113.812 ops/s
# Warmup Iteration  25: 3093515.093 ops/s
# Warmup Iteration  26: 3078641.160 ops/s
# Warmup Iteration  27: 3085473.593 ops/s
# Warmup Iteration  28: 3112096.636 ops/s
# Warmup Iteration  29: 3091457.532 ops/s
# Warmup Iteration  30: 3081264.066 ops/s
Iteration   1: 3109885.231 ops/s
Iteration   2: 3060534.626 ops/s
Iteration   3: 3098896.147 ops/s
Iteration   4: 3071911.105 ops/s
Iteration   5: 3062796.134 ops/s
Iteration   6: 3078260.035 ops/s
Iteration   7: 3078330.756 ops/s
Iteration   8: 3090756.231 ops/s
Iteration   9: 3112709.399 ops/s
Iteration  10: 3106590.800 ops/s
Iteration  11: 3084003.855 ops/s
Iteration  12: 3096393.020 ops/s
Iteration  13: 3095201.164 ops/s
Iteration  14: 3127455.048 ops/s
Iteration  15: 3099762.211 ops/s
Iteration  16: 3083543.032 ops/s
Iteration  17: 3103988.346 ops/s
Iteration  18: 3073252.206 ops/s
Iteration  19: 3117698.193 ops/s
Iteration  20: 3072501.190 ops/s
Iteration  21: 3094654.404 ops/s
Iteration  22: 3113083.196 ops/s
Iteration  23: 3093365.261 ops/s
Iteration  24: 3094235.437 ops/s
Iteration  25: 3071794.291 ops/s
Iteration  26: 3087239.689 ops/s
Iteration  27: 3089357.124 ops/s
Iteration  28: 3103442.177 ops/s
Iteration  29: 3099008.967 ops/s
Iteration  30: 3102048.806 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectLong":
  3092423.269 ±(99.9%) 10973.296 ops/s [Average]
  (min, avg, max) = (3060534.626, 3092423.269, 3127455.048), stdev = 16424.314
  CI (99.9%): [3081449.973, 3103396.566] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectLong  thrpt   30  3092423.269 ± 10973.296  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1264834.283 ops/s
# Warmup Iteration   2: 3259768.570 ops/s
# Warmup Iteration   3: 2751990.632 ops/s
# Warmup Iteration   4: 3273946.962 ops/s
# Warmup Iteration   5: 3280835.464 ops/s
# Warmup Iteration   6: 3256669.962 ops/s
# Warmup Iteration   7: 3260378.614 ops/s
# Warmup Iteration   8: 3258239.552 ops/s
# Warmup Iteration   9: 3248161.244 ops/s
# Warmup Iteration  10: 3235159.450 ops/s
# Warmup Iteration  11: 3237837.009 ops/s
# Warmup Iteration  12: 3250442.386 ops/s
# Warmup Iteration  13: 3257439.351 ops/s
# Warmup Iteration  14: 3252743.270 ops/s
# Warmup Iteration  15: 3252788.163 ops/s
# Warmup Iteration  16: 3266353.943 ops/s
# Warmup Iteration  17: 3244963.104 ops/s
# Warmup Iteration  18: 3249329.672 ops/s
# Warmup Iteration  19: 3253044.761 ops/s
# Warmup Iteration  20: 3258881.313 ops/s
# Warmup Iteration  21: 3267718.354 ops/s
# Warmup Iteration  22: 3276540.465 ops/s
# Warmup Iteration  23: 3276657.944 ops/s
# Warmup Iteration  24: 3262484.039 ops/s
# Warmup Iteration  25: 3275967.915 ops/s
# Warmup Iteration  26: 3271615.597 ops/s
# Warmup Iteration  27: 3263632.324 ops/s
# Warmup Iteration  28: 3275769.237 ops/s
# Warmup Iteration  29: 3291284.689 ops/s
# Warmup Iteration  30: 3301656.174 ops/s
Iteration   1: 3288898.197 ops/s
Iteration   2: 3267925.498 ops/s
Iteration   3: 3288374.895 ops/s
Iteration   4: 3279807.905 ops/s
Iteration   5: 3296849.358 ops/s
Iteration   6: 3291573.602 ops/s
Iteration   7: 3281134.794 ops/s
Iteration   8: 3259143.318 ops/s
Iteration   9: 3265591.904 ops/s
Iteration  10: 3284352.268 ops/s
Iteration  11: 3289542.134 ops/s
Iteration  12: 3284082.162 ops/s
Iteration  13: 3281608.730 ops/s
Iteration  14: 3285792.855 ops/s
Iteration  15: 3291735.078 ops/s
Iteration  16: 3287017.753 ops/s
Iteration  17: 3301515.796 ops/s
Iteration  18: 3274865.316 ops/s
Iteration  19: 3288586.380 ops/s
Iteration  20: 3289016.738 ops/s
Iteration  21: 3275461.100 ops/s
Iteration  22: 3280101.309 ops/s
Iteration  23: 3274200.208 ops/s
Iteration  24: 3277814.065 ops/s
Iteration  25: 3277857.531 ops/s
Iteration  26: 3284888.845 ops/s
Iteration  27: 3294570.268 ops/s
Iteration  28: 3269704.158 ops/s
Iteration  29: 3272813.353 ops/s
Iteration  30: 3279395.843 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectShort":
  3282140.712 ±(99.9%) 6412.293 ops/s [Average]
  (min, avg, max) = (3259143.318, 3282140.712, 3301515.796), stdev = 9597.619
  CI (99.9%): [3275728.419, 3288553.005] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectShort  thrpt   30  3282140.712 ± 6412.293  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471840.235 ops/s
# Warmup Iteration   2: 1219043.560 ops/s
# Warmup Iteration   3: 1225813.625 ops/s
# Warmup Iteration   4: 1029125.686 ops/s
# Warmup Iteration   5: 1231973.283 ops/s
# Warmup Iteration   6: 1232417.608 ops/s
# Warmup Iteration   7: 1229082.767 ops/s
# Warmup Iteration   8: 1233272.637 ops/s
# Warmup Iteration   9: 1228413.094 ops/s
# Warmup Iteration  10: 1232037.887 ops/s
# Warmup Iteration  11: 1229800.597 ops/s
# Warmup Iteration  12: 1230598.356 ops/s
# Warmup Iteration  13: 1228698.787 ops/s
# Warmup Iteration  14: 1232412.321 ops/s
# Warmup Iteration  15: 1233085.319 ops/s
# Warmup Iteration  16: 1233241.731 ops/s
# Warmup Iteration  17: 1230424.706 ops/s
# Warmup Iteration  18: 1230133.721 ops/s
# Warmup Iteration  19: 1227250.021 ops/s
# Warmup Iteration  20: 1232911.617 ops/s
# Warmup Iteration  21: 1239240.009 ops/s
# Warmup Iteration  22: 1235730.439 ops/s
# Warmup Iteration  23: 1236865.468 ops/s
# Warmup Iteration  24: 1241396.041 ops/s
# Warmup Iteration  25: 1239594.718 ops/s
# Warmup Iteration  26: 1236046.913 ops/s
# Warmup Iteration  27: 1243963.058 ops/s
# Warmup Iteration  28: 1239655.907 ops/s
# Warmup Iteration  29: 1233762.980 ops/s
# Warmup Iteration  30: 1237448.503 ops/s
Iteration   1: 1235807.509 ops/s
Iteration   2: 1232170.410 ops/s
Iteration   3: 1237373.514 ops/s
Iteration   4: 1227866.383 ops/s
Iteration   5: 1229616.081 ops/s
Iteration   6: 1238159.277 ops/s
Iteration   7: 1238482.486 ops/s
Iteration   8: 1240962.508 ops/s
Iteration   9: 1233457.415 ops/s
Iteration  10: 1237225.554 ops/s
Iteration  11: 1227935.664 ops/s
Iteration  12: 1228175.749 ops/s
Iteration  13: 1234583.625 ops/s
Iteration  14: 1233576.945 ops/s
Iteration  15: 1236758.578 ops/s
Iteration  16: 1232119.228 ops/s
Iteration  17: 1241775.292 ops/s
Iteration  18: 1227361.302 ops/s
Iteration  19: 1242061.192 ops/s
Iteration  20: 1241536.610 ops/s
Iteration  21: 1237962.746 ops/s
Iteration  22: 1243156.066 ops/s
Iteration  23: 1235848.041 ops/s
Iteration  24: 1237146.093 ops/s
Iteration  25: 1237660.141 ops/s
Iteration  26: 1232404.120 ops/s
Iteration  27: 1244654.417 ops/s
Iteration  28: 1239782.736 ops/s
Iteration  29: 1240704.878 ops/s
Iteration  30: 1242493.017 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectWith":
  1236293.919 ±(99.9%) 3317.569 ops/s [Average]
  (min, avg, max) = (1227361.302, 1236293.919, 1244654.417), stdev = 4965.581
  CI (99.9%): [1232976.350, 1239611.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_collectWith  thrpt   30  1236293.919 ± 3317.569  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 555100.654 ops/s
# Warmup Iteration   2: 652704.858 ops/s
# Warmup Iteration   3: 863900.328 ops/s
# Warmup Iteration   4: 860727.428 ops/s
# Warmup Iteration   5: 861004.677 ops/s
# Warmup Iteration   6: 861480.634 ops/s
# Warmup Iteration   7: 862627.538 ops/s
# Warmup Iteration   8: 864801.272 ops/s
# Warmup Iteration   9: 862625.843 ops/s
# Warmup Iteration  10: 719300.305 ops/s
# Warmup Iteration  11: 861346.162 ops/s
# Warmup Iteration  12: 862964.496 ops/s
# Warmup Iteration  13: 863011.173 ops/s
# Warmup Iteration  14: 860632.401 ops/s
# Warmup Iteration  15: 863868.550 ops/s
# Warmup Iteration  16: 863590.357 ops/s
# Warmup Iteration  17: 904487.411 ops/s
# Warmup Iteration  18: 906738.444 ops/s
# Warmup Iteration  19: 907846.437 ops/s
# Warmup Iteration  20: 908589.625 ops/s
# Warmup Iteration  21: 907631.924 ops/s
# Warmup Iteration  22: 907828.521 ops/s
# Warmup Iteration  23: 906412.620 ops/s
# Warmup Iteration  24: 906529.923 ops/s
# Warmup Iteration  25: 907477.720 ops/s
# Warmup Iteration  26: 909251.773 ops/s
# Warmup Iteration  27: 908573.796 ops/s
# Warmup Iteration  28: 905737.766 ops/s
# Warmup Iteration  29: 909596.834 ops/s
# Warmup Iteration  30: 909700.335 ops/s
Iteration   1: 911028.866 ops/s
Iteration   2: 907198.994 ops/s
Iteration   3: 910334.254 ops/s
Iteration   4: 903936.805 ops/s
Iteration   5: 905243.380 ops/s
Iteration   6: 906976.843 ops/s
Iteration   7: 909137.369 ops/s
Iteration   8: 907996.560 ops/s
Iteration   9: 907615.972 ops/s
Iteration  10: 906823.498 ops/s
Iteration  11: 905443.599 ops/s
Iteration  12: 908214.422 ops/s
Iteration  13: 907289.704 ops/s
Iteration  14: 908779.228 ops/s
Iteration  15: 903266.946 ops/s
Iteration  16: 908214.666 ops/s
Iteration  17: 908892.199 ops/s
Iteration  18: 906481.974 ops/s
Iteration  19: 912302.962 ops/s
Iteration  20: 912556.886 ops/s
Iteration  21: 908170.408 ops/s
Iteration  22: 910282.812 ops/s
Iteration  23: 907939.841 ops/s
Iteration  24: 906824.975 ops/s
Iteration  25: 910421.494 ops/s
Iteration  26: 911699.215 ops/s
Iteration  27: 907052.871 ops/s
Iteration  28: 909836.006 ops/s
Iteration  29: 909440.216 ops/s
Iteration  30: 909294.359 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_distinctView":
  908289.911 ±(99.9%) 1506.439 ops/s [Average]
  (min, avg, max) = (903266.946, 908289.911, 912556.886), stdev = 2254.768
  CI (99.9%): [906783.471, 909796.350] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_distinctView  thrpt   30  908289.911 ± 1506.439  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 678833.206 ops/s
# Warmup Iteration   2: 1737614.126 ops/s
# Warmup Iteration   3: 1809413.345 ops/s
# Warmup Iteration   4: 1490555.791 ops/s
# Warmup Iteration   5: 1802310.753 ops/s
# Warmup Iteration   6: 1800676.485 ops/s
# Warmup Iteration   7: 1804266.350 ops/s
# Warmup Iteration   8: 1805200.236 ops/s
# Warmup Iteration   9: 1801474.262 ops/s
# Warmup Iteration  10: 1805859.377 ops/s
# Warmup Iteration  11: 1812570.800 ops/s
# Warmup Iteration  12: 1807300.297 ops/s
# Warmup Iteration  13: 1808374.112 ops/s
# Warmup Iteration  14: 1807849.217 ops/s
# Warmup Iteration  15: 1809062.696 ops/s
# Warmup Iteration  16: 1810388.445 ops/s
# Warmup Iteration  17: 1808857.446 ops/s
# Warmup Iteration  18: 1801829.133 ops/s
# Warmup Iteration  19: 1798317.529 ops/s
# Warmup Iteration  20: 1806183.795 ops/s
# Warmup Iteration  21: 1809414.533 ops/s
# Warmup Iteration  22: 1803459.814 ops/s
# Warmup Iteration  23: 1802180.168 ops/s
# Warmup Iteration  24: 1799442.514 ops/s
# Warmup Iteration  25: 1801898.085 ops/s
# Warmup Iteration  26: 1800812.675 ops/s
# Warmup Iteration  27: 1808361.269 ops/s
# Warmup Iteration  28: 1800868.079 ops/s
# Warmup Iteration  29: 1802795.194 ops/s
# Warmup Iteration  30: 1806220.921 ops/s
Iteration   1: 1805853.342 ops/s
Iteration   2: 1808939.533 ops/s
Iteration   3: 1805661.463 ops/s
Iteration   4: 1799432.198 ops/s
Iteration   5: 1793066.810 ops/s
Iteration   6: 1801351.915 ops/s
Iteration   7: 1801890.656 ops/s
Iteration   8: 1803537.949 ops/s
Iteration   9: 1796943.184 ops/s
Iteration  10: 1793037.790 ops/s
Iteration  11: 1797584.541 ops/s
Iteration  12: 1797985.998 ops/s
Iteration  13: 1801531.398 ops/s
Iteration  14: 1807175.554 ops/s
Iteration  15: 1806853.306 ops/s
Iteration  16: 1803929.642 ops/s
Iteration  17: 1807166.634 ops/s
Iteration  18: 1798482.308 ops/s
Iteration  19: 1812918.256 ops/s
Iteration  20: 1808371.245 ops/s
Iteration  21: 1805993.593 ops/s
Iteration  22: 1809624.078 ops/s
Iteration  23: 1810267.518 ops/s
Iteration  24: 1804320.369 ops/s
Iteration  25: 1798482.354 ops/s
Iteration  26: 1806959.914 ops/s
Iteration  27: 1798562.379 ops/s
Iteration  28: 1796487.779 ops/s
Iteration  29: 1799293.424 ops/s
Iteration  30: 1803159.642 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_flatCollect":
  1802828.826 ±(99.9%) 3454.523 ops/s [Average]
  (min, avg, max) = (1793037.790, 1802828.826, 1812918.256), stdev = 5170.568
  CI (99.9%): [1799374.303, 1806283.349] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_flatCollect  thrpt   30  1802828.826 ± 3454.523  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_forEachWithOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_forEachWithOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2852093.615 ops/s
# Warmup Iteration   2: 7337646.909 ops/s
# Warmup Iteration   3: 6703284.317 ops/s
# Warmup Iteration   4: 6568136.532 ops/s
# Warmup Iteration   5: 7253600.151 ops/s
# Warmup Iteration   6: 7278315.582 ops/s
# Warmup Iteration   7: 7258716.666 ops/s
# Warmup Iteration   8: 7311827.434 ops/s
# Warmup Iteration   9: 7269439.691 ops/s
# Warmup Iteration  10: 7289085.671 ops/s
# Warmup Iteration  11: 7271537.177 ops/s
# Warmup Iteration  12: 7295361.360 ops/s
# Warmup Iteration  13: 7284015.843 ops/s
# Warmup Iteration  14: 7283384.940 ops/s
# Warmup Iteration  15: 7317151.195 ops/s
# Warmup Iteration  16: 7298042.320 ops/s
# Warmup Iteration  17: 7139171.869 ops/s
# Warmup Iteration  18: 7170155.248 ops/s
# Warmup Iteration  19: 7152971.060 ops/s
# Warmup Iteration  20: 7158909.445 ops/s
# Warmup Iteration  21: 7155382.794 ops/s
# Warmup Iteration  22: 7174064.293 ops/s
# Warmup Iteration  23: 7151819.090 ops/s
# Warmup Iteration  24: 7141635.196 ops/s
# Warmup Iteration  25: 7171047.576 ops/s
# Warmup Iteration  26: 7175329.544 ops/s
# Warmup Iteration  27: 7143138.052 ops/s
# Warmup Iteration  28: 7129529.842 ops/s
# Warmup Iteration  29: 7154377.861 ops/s
# Warmup Iteration  30: 7172457.936 ops/s
Iteration   1: 7132149.196 ops/s
Iteration   2: 7151589.939 ops/s
Iteration   3: 7153360.180 ops/s
Iteration   4: 7114932.169 ops/s
Iteration   5: 7159704.703 ops/s
Iteration   6: 7141002.531 ops/s
Iteration   7: 7160747.165 ops/s
Iteration   8: 7109217.152 ops/s
Iteration   9: 7180609.950 ops/s
Iteration  10: 7194528.128 ops/s
Iteration  11: 7156030.251 ops/s
Iteration  12: 7131407.826 ops/s
Iteration  13: 7184220.122 ops/s
Iteration  14: 7108712.127 ops/s
Iteration  15: 7134400.692 ops/s
Iteration  16: 7143156.283 ops/s
Iteration  17: 7156169.539 ops/s
Iteration  18: 7178667.411 ops/s
Iteration  19: 7124789.244 ops/s
Iteration  20: 7155353.811 ops/s
Iteration  21: 7121366.356 ops/s
Iteration  22: 7161688.061 ops/s
Iteration  23: 7155411.610 ops/s
Iteration  24: 7141290.903 ops/s
Iteration  25: 7141746.227 ops/s
Iteration  26: 7136923.219 ops/s
Iteration  27: 7154170.777 ops/s
Iteration  28: 7064957.358 ops/s
Iteration  29: 7134566.382 ops/s
Iteration  30: 7138781.416 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_forEachWithOccurrences":
  7144055.024 ±(99.9%) 17263.403 ops/s [Average]
  (min, avg, max) = (7064957.358, 7144055.024, 7194528.128), stdev = 25839.051
  CI (99.9%): [7126791.621, 7161318.428] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_forEachWithOccurrences  thrpt   30  7144055.024 ± 17263.403  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788574.483 ops/s
# Warmup Iteration   2: 1952038.831 ops/s
# Warmup Iteration   3: 2015282.746 ops/s
# Warmup Iteration   4: 1692640.890 ops/s
# Warmup Iteration   5: 2014369.287 ops/s
# Warmup Iteration   6: 2011320.695 ops/s
# Warmup Iteration   7: 2022192.137 ops/s
# Warmup Iteration   8: 2022501.588 ops/s
# Warmup Iteration   9: 2009978.652 ops/s
# Warmup Iteration  10: 2027952.483 ops/s
# Warmup Iteration  11: 2023117.385 ops/s
# Warmup Iteration  12: 2021942.832 ops/s
# Warmup Iteration  13: 2015757.021 ops/s
# Warmup Iteration  14: 2021002.969 ops/s
# Warmup Iteration  15: 2023743.218 ops/s
# Warmup Iteration  16: 2020626.036 ops/s
# Warmup Iteration  17: 2010342.834 ops/s
# Warmup Iteration  18: 2001878.835 ops/s
# Warmup Iteration  19: 2007531.158 ops/s
# Warmup Iteration  20: 2009027.556 ops/s
# Warmup Iteration  21: 2013354.343 ops/s
# Warmup Iteration  22: 2015328.278 ops/s
# Warmup Iteration  23: 2009208.595 ops/s
# Warmup Iteration  24: 2011632.355 ops/s
# Warmup Iteration  25: 2015412.113 ops/s
# Warmup Iteration  26: 2010764.220 ops/s
# Warmup Iteration  27: 2008638.383 ops/s
# Warmup Iteration  28: 2019906.554 ops/s
# Warmup Iteration  29: 2008991.464 ops/s
# Warmup Iteration  30: 2014166.758 ops/s
Iteration   1: 2019803.315 ops/s
Iteration   2: 2011496.897 ops/s
Iteration   3: 2009445.894 ops/s
Iteration   4: 1996206.212 ops/s
Iteration   5: 2009068.969 ops/s
Iteration   6: 2015130.693 ops/s
Iteration   7: 2024058.447 ops/s
Iteration   8: 2025185.509 ops/s
Iteration   9: 2023553.932 ops/s
Iteration  10: 2010216.258 ops/s
Iteration  11: 2004812.280 ops/s
Iteration  12: 2015648.731 ops/s
Iteration  13: 2007564.811 ops/s
Iteration  14: 2011141.406 ops/s
Iteration  15: 2019013.915 ops/s
Iteration  16: 2010402.711 ops/s
Iteration  17: 2016636.963 ops/s
Iteration  18: 2014519.929 ops/s
Iteration  19: 2001393.198 ops/s
Iteration  20: 2017071.200 ops/s
Iteration  21: 2025365.407 ops/s
Iteration  22: 2031129.390 ops/s
Iteration  23: 2006814.710 ops/s
Iteration  24: 2021017.543 ops/s
Iteration  25: 2011390.202 ops/s
Iteration  26: 2016790.236 ops/s
Iteration  27: 2013825.780 ops/s
Iteration  28: 2018663.906 ops/s
Iteration  29: 2017806.140 ops/s
Iteration  30: 2025190.521 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_groupBy":
  2015012.170 ±(99.9%) 5195.933 ops/s [Average]
  (min, avg, max) = (1996206.212, 2015012.170, 2031129.390), stdev = 7777.029
  CI (99.9%): [2009816.237, 2020208.103] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_groupBy  thrpt   30  2015012.170 ± 5195.933  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 481278.282 ops/s
# Warmup Iteration   2: 626115.651 ops/s
# Warmup Iteration   3: 805903.900 ops/s
# Warmup Iteration   4: 802400.277 ops/s
# Warmup Iteration   5: 809562.679 ops/s
# Warmup Iteration   6: 807980.245 ops/s
# Warmup Iteration   7: 806671.672 ops/s
# Warmup Iteration   8: 779766.442 ops/s
# Warmup Iteration   9: 700840.652 ops/s
# Warmup Iteration  10: 808664.429 ops/s
# Warmup Iteration  11: 807409.285 ops/s
# Warmup Iteration  12: 807552.229 ops/s
# Warmup Iteration  13: 806698.092 ops/s
# Warmup Iteration  14: 806400.679 ops/s
# Warmup Iteration  15: 810083.446 ops/s
# Warmup Iteration  16: 808537.915 ops/s
# Warmup Iteration  17: 847469.983 ops/s
# Warmup Iteration  18: 848200.836 ops/s
# Warmup Iteration  19: 846953.876 ops/s
# Warmup Iteration  20: 844799.738 ops/s
# Warmup Iteration  21: 847579.426 ops/s
# Warmup Iteration  22: 847074.968 ops/s
# Warmup Iteration  23: 848777.548 ops/s
# Warmup Iteration  24: 847472.748 ops/s
# Warmup Iteration  25: 848667.531 ops/s
# Warmup Iteration  26: 846967.609 ops/s
# Warmup Iteration  27: 845702.614 ops/s
# Warmup Iteration  28: 849537.935 ops/s
# Warmup Iteration  29: 849940.975 ops/s
# Warmup Iteration  30: 847549.097 ops/s
Iteration   1: 847786.940 ops/s
Iteration   2: 847249.099 ops/s
Iteration   3: 849841.021 ops/s
Iteration   4: 846448.720 ops/s
Iteration   5: 841920.843 ops/s
Iteration   6: 842051.224 ops/s
Iteration   7: 847581.301 ops/s
Iteration   8: 845699.152 ops/s
Iteration   9: 849400.894 ops/s
Iteration  10: 845441.241 ops/s
Iteration  11: 843375.289 ops/s
Iteration  12: 847028.189 ops/s
Iteration  13: 844582.368 ops/s
Iteration  14: 843343.833 ops/s
Iteration  15: 843831.710 ops/s
Iteration  16: 842955.353 ops/s
Iteration  17: 838998.000 ops/s
Iteration  18: 843831.297 ops/s
Iteration  19: 844252.063 ops/s
Iteration  20: 845540.386 ops/s
Iteration  21: 840064.081 ops/s
Iteration  22: 841705.069 ops/s
Iteration  23: 842486.854 ops/s
Iteration  24: 841588.246 ops/s
Iteration  25: 845743.369 ops/s
Iteration  26: 843299.131 ops/s
Iteration  27: 840973.073 ops/s
Iteration  28: 839289.421 ops/s
Iteration  29: 838881.298 ops/s
Iteration  30: 844694.484 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove":
  843996.132 ±(99.9%) 1959.510 ops/s [Average]
  (min, avg, max) = (838881.298, 843996.132, 849841.021), stdev = 2932.902
  CI (99.9%): [842036.622, 845955.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  843996.132 ± 1959.510  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1476888.533 ops/s
# Warmup Iteration   2: 3691557.399 ops/s
# Warmup Iteration   3: 3109864.794 ops/s
# Warmup Iteration   4: 3731959.001 ops/s
# Warmup Iteration   5: 3731601.841 ops/s
# Warmup Iteration   6: 3725273.079 ops/s
# Warmup Iteration   7: 3739825.917 ops/s
# Warmup Iteration   8: 3745904.719 ops/s
# Warmup Iteration   9: 3732268.764 ops/s
# Warmup Iteration  10: 3743533.239 ops/s
# Warmup Iteration  11: 3756556.443 ops/s
# Warmup Iteration  12: 3729307.146 ops/s
# Warmup Iteration  13: 3752315.648 ops/s
# Warmup Iteration  14: 3741367.938 ops/s
# Warmup Iteration  15: 3740395.867 ops/s
# Warmup Iteration  16: 3734667.760 ops/s
# Warmup Iteration  17: 3759889.725 ops/s
# Warmup Iteration  18: 3769035.525 ops/s
# Warmup Iteration  19: 3744959.736 ops/s
# Warmup Iteration  20: 3766980.697 ops/s
# Warmup Iteration  21: 3778306.992 ops/s
# Warmup Iteration  22: 3754514.055 ops/s
# Warmup Iteration  23: 3767903.081 ops/s
# Warmup Iteration  24: 3775498.606 ops/s
# Warmup Iteration  25: 3763233.419 ops/s
# Warmup Iteration  26: 3748605.274 ops/s
# Warmup Iteration  27: 3754026.512 ops/s
# Warmup Iteration  28: 3754759.405 ops/s
# Warmup Iteration  29: 3763496.233 ops/s
# Warmup Iteration  30: 3753796.691 ops/s
Iteration   1: 3778118.227 ops/s
Iteration   2: 3763308.578 ops/s
Iteration   3: 3761638.422 ops/s
Iteration   4: 3747975.008 ops/s
Iteration   5: 3764359.311 ops/s
Iteration   6: 3749131.051 ops/s
Iteration   7: 3760953.208 ops/s
Iteration   8: 3728266.780 ops/s
Iteration   9: 3750803.917 ops/s
Iteration  10: 3731221.847 ops/s
Iteration  11: 3742823.630 ops/s
Iteration  12: 3725038.809 ops/s
Iteration  13: 3748496.353 ops/s
Iteration  14: 3740200.113 ops/s
Iteration  15: 3766152.646 ops/s
Iteration  16: 3763192.527 ops/s
Iteration  17: 3757247.798 ops/s
Iteration  18: 3750942.321 ops/s
Iteration  19: 3778890.946 ops/s
Iteration  20: 3759973.099 ops/s
Iteration  21: 3762921.855 ops/s
Iteration  22: 3763282.573 ops/s
Iteration  23: 3780826.508 ops/s
Iteration  24: 3758061.331 ops/s
Iteration  25: 3768743.007 ops/s
Iteration  26: 3759319.843 ops/s
Iteration  27: 3762971.389 ops/s
Iteration  28: 3767637.092 ops/s
Iteration  29: 3741968.316 ops/s
Iteration  30: 3761547.577 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_newEmpty":
  3756533.803 ±(99.9%) 9324.310 ops/s [Average]
  (min, avg, max) = (3725038.809, 3756533.803, 3780826.508), stdev = 13956.190
  CI (99.9%): [3747209.493, 3765858.113] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_newEmpty  thrpt   30  3756533.803 ± 9324.310  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_occurrencesOf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_occurrencesOf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1483005.149 ops/s
# Warmup Iteration   2: 3884908.128 ops/s
# Warmup Iteration   3: 3376827.543 ops/s
# Warmup Iteration   4: 3743439.776 ops/s
# Warmup Iteration   5: 3900332.808 ops/s
# Warmup Iteration   6: 3887440.296 ops/s
# Warmup Iteration   7: 3871680.300 ops/s
# Warmup Iteration   8: 3880226.733 ops/s
# Warmup Iteration   9: 3888317.974 ops/s
# Warmup Iteration  10: 3881037.106 ops/s
# Warmup Iteration  11: 3887367.708 ops/s
# Warmup Iteration  12: 3888034.013 ops/s
# Warmup Iteration  13: 3877970.559 ops/s
# Warmup Iteration  14: 3876747.656 ops/s
# Warmup Iteration  15: 3874522.938 ops/s
# Warmup Iteration  16: 3854231.624 ops/s
# Warmup Iteration  17: 3865085.069 ops/s
# Warmup Iteration  18: 3879355.095 ops/s
# Warmup Iteration  19: 3888416.492 ops/s
# Warmup Iteration  20: 3862981.150 ops/s
# Warmup Iteration  21: 3879548.285 ops/s
# Warmup Iteration  22: 3877287.584 ops/s
# Warmup Iteration  23: 3881648.215 ops/s
# Warmup Iteration  24: 3877025.529 ops/s
# Warmup Iteration  25: 3900798.953 ops/s
# Warmup Iteration  26: 3893597.343 ops/s
# Warmup Iteration  27: 3901605.960 ops/s
# Warmup Iteration  28: 3903052.684 ops/s
# Warmup Iteration  29: 3893854.460 ops/s
# Warmup Iteration  30: 3899547.955 ops/s
Iteration   1: 3884555.837 ops/s
Iteration   2: 3887354.953 ops/s
Iteration   3: 3895424.906 ops/s
Iteration   4: 3900078.720 ops/s
Iteration   5: 3908560.851 ops/s
Iteration   6: 3902674.328 ops/s
Iteration   7: 3880001.409 ops/s
Iteration   8: 3875641.504 ops/s
Iteration   9: 3922525.787 ops/s
Iteration  10: 3898807.475 ops/s
Iteration  11: 3894913.428 ops/s
Iteration  12: 3891250.785 ops/s
Iteration  13: 3873786.103 ops/s
Iteration  14: 3868633.930 ops/s
Iteration  15: 3869780.644 ops/s
Iteration  16: 3897836.186 ops/s
Iteration  17: 3900198.301 ops/s
Iteration  18: 3864471.908 ops/s
Iteration  19: 3881279.419 ops/s
Iteration  20: 3888681.956 ops/s
Iteration  21: 3871599.533 ops/s
Iteration  22: 3874658.835 ops/s
Iteration  23: 3904216.008 ops/s
Iteration  24: 3861159.653 ops/s
Iteration  25: 3890903.505 ops/s
Iteration  26: 3892119.262 ops/s
Iteration  27: 3891511.664 ops/s
Iteration  28: 3860213.730 ops/s
Iteration  29: 3876386.735 ops/s
Iteration  30: 3896420.918 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_occurrencesOf":
  3886854.942 ±(99.9%) 10075.799 ops/s [Average]
  (min, avg, max) = (3860213.730, 3886854.942, 3922525.787), stdev = 15080.983
  CI (99.9%): [3876779.143, 3896930.742] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_occurrencesOf  thrpt   30  3886854.942 ± 10075.799  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 627313.389 ops/s
# Warmup Iteration   2: 1697970.549 ops/s
# Warmup Iteration   3: 1714149.711 ops/s
# Warmup Iteration   4: 1428894.693 ops/s
# Warmup Iteration   5: 1728432.793 ops/s
# Warmup Iteration   6: 1727995.952 ops/s
# Warmup Iteration   7: 1722300.201 ops/s
# Warmup Iteration   8: 1726615.830 ops/s
# Warmup Iteration   9: 1724734.813 ops/s
# Warmup Iteration  10: 1725713.489 ops/s
# Warmup Iteration  11: 1731359.635 ops/s
# Warmup Iteration  12: 1730363.732 ops/s
# Warmup Iteration  13: 1721877.232 ops/s
# Warmup Iteration  14: 1726710.299 ops/s
# Warmup Iteration  15: 1730908.664 ops/s
# Warmup Iteration  16: 1724507.299 ops/s
# Warmup Iteration  17: 1730652.922 ops/s
# Warmup Iteration  18: 1733268.613 ops/s
# Warmup Iteration  19: 1718383.905 ops/s
# Warmup Iteration  20: 1732507.056 ops/s
# Warmup Iteration  21: 1736031.075 ops/s
# Warmup Iteration  22: 1728780.333 ops/s
# Warmup Iteration  23: 1729149.943 ops/s
# Warmup Iteration  24: 1727374.236 ops/s
# Warmup Iteration  25: 1727784.401 ops/s
# Warmup Iteration  26: 1719117.838 ops/s
# Warmup Iteration  27: 1732332.848 ops/s
# Warmup Iteration  28: 1731552.086 ops/s
# Warmup Iteration  29: 1727252.659 ops/s
# Warmup Iteration  30: 1722292.178 ops/s
Iteration   1: 1735828.926 ops/s
Iteration   2: 1735052.913 ops/s
Iteration   3: 1731513.088 ops/s
Iteration   4: 1726506.241 ops/s
Iteration   5: 1721443.873 ops/s
Iteration   6: 1731549.433 ops/s
Iteration   7: 1733247.661 ops/s
Iteration   8: 1732457.488 ops/s
Iteration   9: 1729861.942 ops/s
Iteration  10: 1724324.800 ops/s
Iteration  11: 1719836.371 ops/s
Iteration  12: 1724861.477 ops/s
Iteration  13: 1733454.515 ops/s
Iteration  14: 1734352.056 ops/s
Iteration  15: 1732941.187 ops/s
Iteration  16: 1743188.485 ops/s
Iteration  17: 1729989.271 ops/s
Iteration  18: 1710766.901 ops/s
Iteration  19: 1728045.674 ops/s
Iteration  20: 1734777.790 ops/s
Iteration  21: 1732114.222 ops/s
Iteration  22: 1730389.249 ops/s
Iteration  23: 1724619.774 ops/s
Iteration  24: 1726686.746 ops/s
Iteration  25: 1722211.995 ops/s
Iteration  26: 1728247.664 ops/s
Iteration  27: 1719398.571 ops/s
Iteration  28: 1723651.561 ops/s
Iteration  29: 1733425.788 ops/s
Iteration  30: 1732560.045 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partition":
  1728910.190 ±(99.9%) 4264.985 ops/s [Average]
  (min, avg, max) = (1710766.901, 1728910.190, 1743188.485), stdev = 6383.629
  CI (99.9%): [1724645.205, 1733175.175] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partition  thrpt   30  1728910.190 ± 4264.985  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 621257.607 ops/s
# Warmup Iteration   2: 1710251.787 ops/s
# Warmup Iteration   3: 1736011.690 ops/s
# Warmup Iteration   4: 1429615.597 ops/s
# Warmup Iteration   5: 1734256.713 ops/s
# Warmup Iteration   6: 1740502.041 ops/s
# Warmup Iteration   7: 1733320.583 ops/s
# Warmup Iteration   8: 1736287.595 ops/s
# Warmup Iteration   9: 1722651.208 ops/s
# Warmup Iteration  10: 1722024.550 ops/s
# Warmup Iteration  11: 1726745.319 ops/s
# Warmup Iteration  12: 1734874.018 ops/s
# Warmup Iteration  13: 1734479.199 ops/s
# Warmup Iteration  14: 1728524.720 ops/s
# Warmup Iteration  15: 1734504.416 ops/s
# Warmup Iteration  16: 1731980.681 ops/s
# Warmup Iteration  17: 1729827.168 ops/s
# Warmup Iteration  18: 1734388.424 ops/s
# Warmup Iteration  19: 1739017.938 ops/s
# Warmup Iteration  20: 1734791.737 ops/s
# Warmup Iteration  21: 1735599.758 ops/s
# Warmup Iteration  22: 1739568.552 ops/s
# Warmup Iteration  23: 1740196.295 ops/s
# Warmup Iteration  24: 1737813.047 ops/s
# Warmup Iteration  25: 1748583.290 ops/s
# Warmup Iteration  26: 1738675.025 ops/s
# Warmup Iteration  27: 1743054.551 ops/s
# Warmup Iteration  28: 1740433.274 ops/s
# Warmup Iteration  29: 1740053.384 ops/s
# Warmup Iteration  30: 1740792.542 ops/s
Iteration   1: 1739860.216 ops/s
Iteration   2: 1737038.959 ops/s
Iteration   3: 1736391.176 ops/s
Iteration   4: 1745832.623 ops/s
Iteration   5: 1746676.859 ops/s
Iteration   6: 1742633.700 ops/s
Iteration   7: 1737455.486 ops/s
Iteration   8: 1740606.063 ops/s
Iteration   9: 1744547.472 ops/s
Iteration  10: 1732526.769 ops/s
Iteration  11: 1740409.346 ops/s
Iteration  12: 1738729.972 ops/s
Iteration  13: 1738888.867 ops/s
Iteration  14: 1740151.084 ops/s
Iteration  15: 1739727.210 ops/s
Iteration  16: 1747158.891 ops/s
Iteration  17: 1739347.226 ops/s
Iteration  18: 1740600.890 ops/s
Iteration  19: 1740855.572 ops/s
Iteration  20: 1740751.596 ops/s
Iteration  21: 1735059.027 ops/s
Iteration  22: 1723794.460 ops/s
Iteration  23: 1734998.356 ops/s
Iteration  24: 1738640.051 ops/s
Iteration  25: 1734576.808 ops/s
Iteration  26: 1739388.524 ops/s
Iteration  27: 1727443.404 ops/s
Iteration  28: 1733928.633 ops/s
Iteration  29: 1731040.393 ops/s
Iteration  30: 1718272.065 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partitionWith":
  1737577.723 ±(99.9%) 4228.671 ops/s [Average]
  (min, avg, max) = (1718272.065, 1737577.723, 1747158.891), stdev = 6329.275
  CI (99.9%): [1733349.053, 1741806.394] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_partitionWith  thrpt   30  1737577.723 ± 4228.671  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 502533.671 ops/s
# Warmup Iteration   2: 1340110.816 ops/s
# Warmup Iteration   3: 1352043.078 ops/s
# Warmup Iteration   4: 1128614.876 ops/s
# Warmup Iteration   5: 1351466.852 ops/s
# Warmup Iteration   6: 1356697.921 ops/s
# Warmup Iteration   7: 1355183.122 ops/s
# Warmup Iteration   8: 1357069.262 ops/s
# Warmup Iteration   9: 1349717.207 ops/s
# Warmup Iteration  10: 1355622.687 ops/s
# Warmup Iteration  11: 1356851.997 ops/s
# Warmup Iteration  12: 1353899.565 ops/s
# Warmup Iteration  13: 1355424.948 ops/s
# Warmup Iteration  14: 1357622.273 ops/s
# Warmup Iteration  15: 1356285.519 ops/s
# Warmup Iteration  16: 1348774.939 ops/s
# Warmup Iteration  17: 1358899.478 ops/s
# Warmup Iteration  18: 1358159.842 ops/s
# Warmup Iteration  19: 1354097.844 ops/s
# Warmup Iteration  20: 1358199.163 ops/s
# Warmup Iteration  21: 1353469.279 ops/s
# Warmup Iteration  22: 1356030.541 ops/s
# Warmup Iteration  23: 1354568.589 ops/s
# Warmup Iteration  24: 1355036.342 ops/s
# Warmup Iteration  25: 1349429.194 ops/s
# Warmup Iteration  26: 1347538.457 ops/s
# Warmup Iteration  27: 1353429.068 ops/s
# Warmup Iteration  28: 1355972.016 ops/s
# Warmup Iteration  29: 1349654.049 ops/s
# Warmup Iteration  30: 1356593.371 ops/s
Iteration   1: 1353030.495 ops/s
Iteration   2: 1360101.975 ops/s
Iteration   3: 1359321.251 ops/s
Iteration   4: 1353523.038 ops/s
Iteration   5: 1355655.593 ops/s
Iteration   6: 1352546.435 ops/s
Iteration   7: 1358150.310 ops/s
Iteration   8: 1354335.656 ops/s
Iteration   9: 1360507.367 ops/s
Iteration  10: 1355664.126 ops/s
Iteration  11: 1352197.754 ops/s
Iteration  12: 1347569.821 ops/s
Iteration  13: 1350933.029 ops/s
Iteration  14: 1361019.301 ops/s
Iteration  15: 1350838.615 ops/s
Iteration  16: 1349941.038 ops/s
Iteration  17: 1356220.816 ops/s
Iteration  18: 1350564.251 ops/s
Iteration  19: 1362645.794 ops/s
Iteration  20: 1357502.476 ops/s
Iteration  21: 1356334.187 ops/s
Iteration  22: 1350159.748 ops/s
Iteration  23: 1353304.332 ops/s
Iteration  24: 1350930.340 ops/s
Iteration  25: 1344066.189 ops/s
Iteration  26: 1356202.476 ops/s
Iteration  27: 1353126.079 ops/s
Iteration  28: 1357679.562 ops/s
Iteration  29: 1352984.842 ops/s
Iteration  30: 1353819.124 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_reject":
  1354362.534 ±(99.9%) 2808.861 ops/s [Average]
  (min, avg, max) = (1344066.189, 1354362.534, 1362645.794), stdev = 4204.171
  CI (99.9%): [1351553.673, 1357171.395] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_reject  thrpt   30  1354362.534 ± 2808.861  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 492589.392 ops/s
# Warmup Iteration   2: 1321412.717 ops/s
# Warmup Iteration   3: 1341276.058 ops/s
# Warmup Iteration   4: 1110465.200 ops/s
# Warmup Iteration   5: 1349658.987 ops/s
# Warmup Iteration   6: 1344806.527 ops/s
# Warmup Iteration   7: 1338106.668 ops/s
# Warmup Iteration   8: 1342698.989 ops/s
# Warmup Iteration   9: 1342635.033 ops/s
# Warmup Iteration  10: 1342318.171 ops/s
# Warmup Iteration  11: 1341402.291 ops/s
# Warmup Iteration  12: 1342554.363 ops/s
# Warmup Iteration  13: 1337658.751 ops/s
# Warmup Iteration  14: 1332968.738 ops/s
# Warmup Iteration  15: 1346149.358 ops/s
# Warmup Iteration  16: 1341903.464 ops/s
# Warmup Iteration  17: 1340937.276 ops/s
# Warmup Iteration  18: 1340414.875 ops/s
# Warmup Iteration  19: 1343460.008 ops/s
# Warmup Iteration  20: 1342493.781 ops/s
# Warmup Iteration  21: 1335734.317 ops/s
# Warmup Iteration  22: 1344350.460 ops/s
# Warmup Iteration  23: 1347799.698 ops/s
# Warmup Iteration  24: 1340762.898 ops/s
# Warmup Iteration  25: 1344561.556 ops/s
# Warmup Iteration  26: 1346921.982 ops/s
# Warmup Iteration  27: 1338295.225 ops/s
# Warmup Iteration  28: 1341322.933 ops/s
# Warmup Iteration  29: 1343675.943 ops/s
# Warmup Iteration  30: 1345063.341 ops/s
Iteration   1: 1338175.517 ops/s
Iteration   2: 1340925.186 ops/s
Iteration   3: 1352197.509 ops/s
Iteration   4: 1353425.372 ops/s
Iteration   5: 1353524.792 ops/s
Iteration   6: 1345571.528 ops/s
Iteration   7: 1340842.187 ops/s
Iteration   8: 1342187.109 ops/s
Iteration   9: 1335498.642 ops/s
Iteration  10: 1338945.749 ops/s
Iteration  11: 1344220.095 ops/s
Iteration  12: 1340837.681 ops/s
Iteration  13: 1339318.407 ops/s
Iteration  14: 1343139.225 ops/s
Iteration  15: 1341266.877 ops/s
Iteration  16: 1349803.117 ops/s
Iteration  17: 1341873.519 ops/s
Iteration  18: 1345503.387 ops/s
Iteration  19: 1343964.753 ops/s
Iteration  20: 1346646.904 ops/s
Iteration  21: 1337006.157 ops/s
Iteration  22: 1346187.612 ops/s
Iteration  23: 1342522.773 ops/s
Iteration  24: 1344767.108 ops/s
Iteration  25: 1353837.416 ops/s
Iteration  26: 1345343.057 ops/s
Iteration  27: 1347746.037 ops/s
Iteration  28: 1341012.934 ops/s
Iteration  29: 1346882.066 ops/s
Iteration  30: 1344945.845 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_rejectWith":
  1344270.619 ±(99.9%) 3226.500 ops/s [Average]
  (min, avg, max) = (1335498.642, 1344270.619, 1353837.416), stdev = 4829.273
  CI (99.9%): [1341044.119, 1347497.118] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_rejectWith  thrpt   30  1344270.619 ± 3226.500  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 510509.181 ops/s
# Warmup Iteration   2: 602502.828 ops/s
# Warmup Iteration   3: 791478.329 ops/s
# Warmup Iteration   4: 789475.759 ops/s
# Warmup Iteration   5: 787709.269 ops/s
# Warmup Iteration   6: 791694.290 ops/s
# Warmup Iteration   7: 791670.935 ops/s
# Warmup Iteration   8: 790080.726 ops/s
# Warmup Iteration   9: 789988.556 ops/s
# Warmup Iteration  10: 657859.727 ops/s
# Warmup Iteration  11: 791421.766 ops/s
# Warmup Iteration  12: 791528.169 ops/s
# Warmup Iteration  13: 791303.946 ops/s
# Warmup Iteration  14: 791659.877 ops/s
# Warmup Iteration  15: 792580.331 ops/s
# Warmup Iteration  16: 789944.762 ops/s
# Warmup Iteration  17: 832469.266 ops/s
# Warmup Iteration  18: 831502.784 ops/s
# Warmup Iteration  19: 827988.407 ops/s
# Warmup Iteration  20: 828745.154 ops/s
# Warmup Iteration  21: 834021.848 ops/s
# Warmup Iteration  22: 834677.482 ops/s
# Warmup Iteration  23: 831254.277 ops/s
# Warmup Iteration  24: 824760.599 ops/s
# Warmup Iteration  25: 832302.674 ops/s
# Warmup Iteration  26: 830305.233 ops/s
# Warmup Iteration  27: 831885.048 ops/s
# Warmup Iteration  28: 832324.299 ops/s
# Warmup Iteration  29: 826860.100 ops/s
# Warmup Iteration  30: 831162.831 ops/s
Iteration   1: 832689.496 ops/s
Iteration   2: 833364.005 ops/s
Iteration   3: 830289.079 ops/s
Iteration   4: 832654.405 ops/s
Iteration   5: 830063.439 ops/s
Iteration   6: 832712.573 ops/s
Iteration   7: 834213.406 ops/s
Iteration   8: 830850.195 ops/s
Iteration   9: 833136.946 ops/s
Iteration  10: 832074.999 ops/s
Iteration  11: 831470.692 ops/s
Iteration  12: 834391.899 ops/s
Iteration  13: 834245.484 ops/s
Iteration  14: 831593.523 ops/s
Iteration  15: 832300.444 ops/s
Iteration  16: 836525.764 ops/s
Iteration  17: 833480.785 ops/s
Iteration  18: 830459.854 ops/s
Iteration  19: 831883.971 ops/s
Iteration  20: 835733.174 ops/s
Iteration  21: 834533.314 ops/s
Iteration  22: 831962.417 ops/s
Iteration  23: 834702.743 ops/s
Iteration  24: 833038.467 ops/s
Iteration  25: 829940.385 ops/s
Iteration  26: 832115.951 ops/s
Iteration  27: 833310.539 ops/s
Iteration  28: 828214.915 ops/s
Iteration  29: 834485.066 ops/s
Iteration  30: 831576.627 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_remove":
  832600.485 ±(99.9%) 1230.719 ops/s [Average]
  (min, avg, max) = (828214.915, 832600.485, 836525.764), stdev = 1842.083
  CI (99.9%): [831369.766, 833831.205] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_remove  thrpt   30  832600.485 ± 1230.719  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 524358.991 ops/s
# Warmup Iteration   2: 643130.132 ops/s
# Warmup Iteration   3: 838663.791 ops/s
# Warmup Iteration   4: 839720.579 ops/s
# Warmup Iteration   5: 840556.418 ops/s
# Warmup Iteration   6: 840407.366 ops/s
# Warmup Iteration   7: 840174.706 ops/s
# Warmup Iteration   8: 843283.106 ops/s
# Warmup Iteration   9: 750328.369 ops/s
# Warmup Iteration  10: 788746.941 ops/s
# Warmup Iteration  11: 841036.695 ops/s
# Warmup Iteration  12: 841322.876 ops/s
# Warmup Iteration  13: 843295.340 ops/s
# Warmup Iteration  14: 840337.095 ops/s
# Warmup Iteration  15: 844549.025 ops/s
# Warmup Iteration  16: 843664.082 ops/s
# Warmup Iteration  17: 874956.895 ops/s
# Warmup Iteration  18: 878556.440 ops/s
# Warmup Iteration  19: 877229.874 ops/s
# Warmup Iteration  20: 877587.114 ops/s
# Warmup Iteration  21: 879122.674 ops/s
# Warmup Iteration  22: 877192.223 ops/s
# Warmup Iteration  23: 880933.114 ops/s
# Warmup Iteration  24: 882149.803 ops/s
# Warmup Iteration  25: 879107.467 ops/s
# Warmup Iteration  26: 876096.814 ops/s
# Warmup Iteration  27: 877862.378 ops/s
# Warmup Iteration  28: 879611.907 ops/s
# Warmup Iteration  29: 878188.476 ops/s
# Warmup Iteration  30: 881696.661 ops/s
Iteration   1: 873835.575 ops/s
Iteration   2: 880850.457 ops/s
Iteration   3: 877615.985 ops/s
Iteration   4: 877100.110 ops/s
Iteration   5: 881479.350 ops/s
Iteration   6: 878354.324 ops/s
Iteration   7: 881295.351 ops/s
Iteration   8: 879750.149 ops/s
Iteration   9: 880598.199 ops/s
Iteration  10: 881554.445 ops/s
Iteration  11: 882913.468 ops/s
Iteration  12: 881949.380 ops/s
Iteration  13: 884890.465 ops/s
Iteration  14: 879160.114 ops/s
Iteration  15: 880215.424 ops/s
Iteration  16: 881325.702 ops/s
Iteration  17: 878489.032 ops/s
Iteration  18: 878750.583 ops/s
Iteration  19: 874977.411 ops/s
Iteration  20: 882970.497 ops/s
Iteration  21: 880937.307 ops/s
Iteration  22: 879040.443 ops/s
Iteration  23: 880666.092 ops/s
Iteration  24: 876837.091 ops/s
Iteration  25: 878589.402 ops/s
Iteration  26: 880506.499 ops/s
Iteration  27: 881251.252 ops/s
Iteration  28: 876750.659 ops/s
Iteration  29: 876225.677 ops/s
Iteration  30: 878301.585 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAll":
  879572.734 ±(99.9%) 1651.081 ops/s [Average]
  (min, avg, max) = (873835.575, 879572.734, 884890.465), stdev = 2471.261
  CI (99.9%): [877921.653, 881223.816] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAll  thrpt   30  879572.734 ± 1651.081  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525362.566 ops/s
# Warmup Iteration   2: 646887.275 ops/s
# Warmup Iteration   3: 840292.797 ops/s
# Warmup Iteration   4: 836645.495 ops/s
# Warmup Iteration   5: 840549.068 ops/s
# Warmup Iteration   6: 840986.413 ops/s
# Warmup Iteration   7: 843260.581 ops/s
# Warmup Iteration   8: 843841.126 ops/s
# Warmup Iteration   9: 717402.951 ops/s
# Warmup Iteration  10: 823899.490 ops/s
# Warmup Iteration  11: 842525.037 ops/s
# Warmup Iteration  12: 845145.801 ops/s
# Warmup Iteration  13: 840171.790 ops/s
# Warmup Iteration  14: 839575.653 ops/s
# Warmup Iteration  15: 843705.594 ops/s
# Warmup Iteration  16: 840101.858 ops/s
# Warmup Iteration  17: 889509.985 ops/s
# Warmup Iteration  18: 887074.919 ops/s
# Warmup Iteration  19: 884779.632 ops/s
# Warmup Iteration  20: 886874.370 ops/s
# Warmup Iteration  21: 886211.313 ops/s
# Warmup Iteration  22: 885428.109 ops/s
# Warmup Iteration  23: 886449.122 ops/s
# Warmup Iteration  24: 883685.807 ops/s
# Warmup Iteration  25: 886892.445 ops/s
# Warmup Iteration  26: 885698.839 ops/s
# Warmup Iteration  27: 886893.726 ops/s
# Warmup Iteration  28: 887704.631 ops/s
# Warmup Iteration  29: 881809.296 ops/s
# Warmup Iteration  30: 888496.113 ops/s
Iteration   1: 889410.051 ops/s
Iteration   2: 887975.548 ops/s
Iteration   3: 887840.232 ops/s
Iteration   4: 887106.586 ops/s
Iteration   5: 883849.318 ops/s
Iteration   6: 886827.542 ops/s
Iteration   7: 885500.307 ops/s
Iteration   8: 890956.465 ops/s
Iteration   9: 888438.938 ops/s
Iteration  10: 886675.847 ops/s
Iteration  11: 887100.848 ops/s
Iteration  12: 884646.718 ops/s
Iteration  13: 891497.510 ops/s
Iteration  14: 888077.483 ops/s
Iteration  15: 887044.564 ops/s
Iteration  16: 886484.596 ops/s
Iteration  17: 887163.085 ops/s
Iteration  18: 886527.611 ops/s
Iteration  19: 885886.581 ops/s
Iteration  20: 887550.600 ops/s
Iteration  21: 890214.778 ops/s
Iteration  22: 892240.752 ops/s
Iteration  23: 884885.103 ops/s
Iteration  24: 890035.160 ops/s
Iteration  25: 886612.907 ops/s
Iteration  26: 881383.327 ops/s
Iteration  27: 886257.178 ops/s
Iteration  28: 886193.137 ops/s
Iteration  29: 884073.426 ops/s
Iteration  30: 886975.620 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable":
  887181.061 ±(99.9%) 1561.826 ops/s [Average]
  (min, avg, max) = (881383.327, 887181.061, 892240.752), stdev = 2337.668
  CI (99.9%): [885619.235, 888742.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  887181.061 ± 1561.826  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 516934.841 ops/s
# Warmup Iteration   2: 640775.030 ops/s
# Warmup Iteration   3: 841077.222 ops/s
# Warmup Iteration   4: 839794.180 ops/s
# Warmup Iteration   5: 839796.379 ops/s
# Warmup Iteration   6: 840878.281 ops/s
# Warmup Iteration   7: 840624.436 ops/s
# Warmup Iteration   8: 841486.058 ops/s
# Warmup Iteration   9: 753844.616 ops/s
# Warmup Iteration  10: 789126.168 ops/s
# Warmup Iteration  11: 837704.430 ops/s
# Warmup Iteration  12: 841018.130 ops/s
# Warmup Iteration  13: 843592.500 ops/s
# Warmup Iteration  14: 843019.487 ops/s
# Warmup Iteration  15: 842695.227 ops/s
# Warmup Iteration  16: 845178.935 ops/s
# Warmup Iteration  17: 883743.172 ops/s
# Warmup Iteration  18: 885162.246 ops/s
# Warmup Iteration  19: 884445.771 ops/s
# Warmup Iteration  20: 883363.892 ops/s
# Warmup Iteration  21: 885951.336 ops/s
# Warmup Iteration  22: 883713.528 ops/s
# Warmup Iteration  23: 885646.882 ops/s
# Warmup Iteration  24: 887122.895 ops/s
# Warmup Iteration  25: 882127.715 ops/s
# Warmup Iteration  26: 883848.147 ops/s
# Warmup Iteration  27: 882398.643 ops/s
# Warmup Iteration  28: 882833.855 ops/s
# Warmup Iteration  29: 882766.016 ops/s
# Warmup Iteration  30: 886343.218 ops/s
Iteration   1: 878161.256 ops/s
Iteration   2: 880136.748 ops/s
Iteration   3: 879810.778 ops/s
Iteration   4: 881090.619 ops/s
Iteration   5: 884457.299 ops/s
Iteration   6: 884813.494 ops/s
Iteration   7: 878951.026 ops/s
Iteration   8: 882384.500 ops/s
Iteration   9: 883149.985 ops/s
Iteration  10: 885281.666 ops/s
Iteration  11: 881842.184 ops/s
Iteration  12: 882468.878 ops/s
Iteration  13: 881367.704 ops/s
Iteration  14: 879450.906 ops/s
Iteration  15: 880825.266 ops/s
Iteration  16: 880453.380 ops/s
Iteration  17: 886838.598 ops/s
Iteration  18: 884380.559 ops/s
Iteration  19: 884020.465 ops/s
Iteration  20: 882661.646 ops/s
Iteration  21: 888963.289 ops/s
Iteration  22: 883412.592 ops/s
Iteration  23: 881627.493 ops/s
Iteration  24: 884902.110 ops/s
Iteration  25: 886641.509 ops/s
Iteration  26: 885681.845 ops/s
Iteration  27: 883318.293 ops/s
Iteration  28: 881069.011 ops/s
Iteration  29: 879144.397 ops/s
Iteration  30: 880280.398 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIf":
  882586.263 ±(99.9%) 1760.590 ops/s [Average]
  (min, avg, max) = (878161.256, 882586.263, 888963.289), stdev = 2635.169
  CI (99.9%): [880825.673, 884346.853] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIf  thrpt   30  882586.263 ± 1760.590  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 525635.736 ops/s
# Warmup Iteration   2: 639970.442 ops/s
# Warmup Iteration   3: 839937.706 ops/s
# Warmup Iteration   4: 840821.260 ops/s
# Warmup Iteration   5: 837381.438 ops/s
# Warmup Iteration   6: 838603.303 ops/s
# Warmup Iteration   7: 841974.107 ops/s
# Warmup Iteration   8: 841758.672 ops/s
# Warmup Iteration   9: 734311.622 ops/s
# Warmup Iteration  10: 799287.633 ops/s
# Warmup Iteration  11: 839094.271 ops/s
# Warmup Iteration  12: 837282.868 ops/s
# Warmup Iteration  13: 840432.862 ops/s
# Warmup Iteration  14: 839570.623 ops/s
# Warmup Iteration  15: 839812.729 ops/s
# Warmup Iteration  16: 839233.393 ops/s
# Warmup Iteration  17: 879619.079 ops/s
# Warmup Iteration  18: 880659.635 ops/s
# Warmup Iteration  19: 882029.370 ops/s
# Warmup Iteration  20: 883909.848 ops/s
# Warmup Iteration  21: 878505.076 ops/s
# Warmup Iteration  22: 879122.888 ops/s
# Warmup Iteration  23: 880061.374 ops/s
# Warmup Iteration  24: 878809.782 ops/s
# Warmup Iteration  25: 882842.431 ops/s
# Warmup Iteration  26: 876130.412 ops/s
# Warmup Iteration  27: 880350.144 ops/s
# Warmup Iteration  28: 879093.526 ops/s
# Warmup Iteration  29: 880246.990 ops/s
# Warmup Iteration  30: 880185.573 ops/s
Iteration   1: 879073.488 ops/s
Iteration   2: 884981.454 ops/s
Iteration   3: 877767.310 ops/s
Iteration   4: 884267.492 ops/s
Iteration   5: 880025.216 ops/s
Iteration   6: 878588.577 ops/s
Iteration   7: 884198.715 ops/s
Iteration   8: 884848.757 ops/s
Iteration   9: 881136.879 ops/s
Iteration  10: 881798.567 ops/s
Iteration  11: 882894.750 ops/s
Iteration  12: 879525.355 ops/s
Iteration  13: 883696.659 ops/s
Iteration  14: 881710.130 ops/s
Iteration  15: 878358.992 ops/s
Iteration  16: 881700.936 ops/s
Iteration  17: 882772.725 ops/s
Iteration  18: 874344.175 ops/s
Iteration  19: 876562.310 ops/s
Iteration  20: 881955.659 ops/s
Iteration  21: 880283.043 ops/s
Iteration  22: 881321.242 ops/s
Iteration  23: 878635.468 ops/s
Iteration  24: 877344.134 ops/s
Iteration  25: 877810.475 ops/s
Iteration  26: 876364.562 ops/s
Iteration  27: 875900.888 ops/s
Iteration  28: 879628.083 ops/s
Iteration  29: 881918.115 ops/s
Iteration  30: 879481.809 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIfWith":
  880296.532 ±(99.9%) 1880.038 ops/s [Average]
  (min, avg, max) = (874344.175, 880296.532, 884981.454), stdev = 2813.952
  CI (99.9%): [878416.494, 882176.570] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeIfWith  thrpt   30  880296.532 ± 1880.038  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 537318.808 ops/s
# Warmup Iteration   2: 679342.272 ops/s
# Warmup Iteration   3: 872069.222 ops/s
# Warmup Iteration   4: 862623.526 ops/s
# Warmup Iteration   5: 867046.281 ops/s
# Warmup Iteration   6: 871985.467 ops/s
# Warmup Iteration   7: 868852.078 ops/s
# Warmup Iteration   8: 866790.307 ops/s
# Warmup Iteration   9: 726533.350 ops/s
# Warmup Iteration  10: 868568.786 ops/s
# Warmup Iteration  11: 868211.071 ops/s
# Warmup Iteration  12: 868779.576 ops/s
# Warmup Iteration  13: 867628.037 ops/s
# Warmup Iteration  14: 867452.453 ops/s
# Warmup Iteration  15: 869806.301 ops/s
# Warmup Iteration  16: 868956.183 ops/s
# Warmup Iteration  17: 914981.506 ops/s
# Warmup Iteration  18: 915217.530 ops/s
# Warmup Iteration  19: 915776.536 ops/s
# Warmup Iteration  20: 917820.312 ops/s
# Warmup Iteration  21: 910940.216 ops/s
# Warmup Iteration  22: 915439.470 ops/s
# Warmup Iteration  23: 916173.428 ops/s
# Warmup Iteration  24: 908576.983 ops/s
# Warmup Iteration  25: 914100.010 ops/s
# Warmup Iteration  26: 914348.753 ops/s
# Warmup Iteration  27: 917622.951 ops/s
# Warmup Iteration  28: 912475.180 ops/s
# Warmup Iteration  29: 914920.149 ops/s
# Warmup Iteration  30: 916388.754 ops/s
Iteration   1: 914689.856 ops/s
Iteration   2: 911582.968 ops/s
Iteration   3: 917582.582 ops/s
Iteration   4: 910091.851 ops/s
Iteration   5: 913974.016 ops/s
Iteration   6: 914658.282 ops/s
Iteration   7: 915350.880 ops/s
Iteration   8: 911728.791 ops/s
Iteration   9: 911916.222 ops/s
Iteration  10: 914857.258 ops/s
Iteration  11: 916006.201 ops/s
Iteration  12: 912546.003 ops/s
Iteration  13: 913378.802 ops/s
Iteration  14: 917698.320 ops/s
Iteration  15: 909379.961 ops/s
Iteration  16: 918437.862 ops/s
Iteration  17: 917947.717 ops/s
Iteration  18: 911369.113 ops/s
Iteration  19: 914706.862 ops/s
Iteration  20: 914463.115 ops/s
Iteration  21: 913042.189 ops/s
Iteration  22: 909656.102 ops/s
Iteration  23: 908993.381 ops/s
Iteration  24: 913412.107 ops/s
Iteration  25: 915619.463 ops/s
Iteration  26: 915426.288 ops/s
Iteration  27: 920800.243 ops/s
Iteration  28: 912495.535 ops/s
Iteration  29: 912100.667 ops/s
Iteration  30: 912175.790 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeOccurrences":
  913869.614 ±(99.9%) 1906.617 ops/s [Average]
  (min, avg, max) = (908993.381, 913869.614, 920800.243), stdev = 2853.735
  CI (99.9%): [911962.997, 915776.231] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_removeOccurrences  thrpt   30  913869.614 ± 1906.617  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 527133.616 ops/s
# Warmup Iteration   2: 649661.170 ops/s
# Warmup Iteration   3: 850401.623 ops/s
# Warmup Iteration   4: 845989.007 ops/s
# Warmup Iteration   5: 853556.366 ops/s
# Warmup Iteration   6: 848811.392 ops/s
# Warmup Iteration   7: 851020.374 ops/s
# Warmup Iteration   8: 849398.840 ops/s
# Warmup Iteration   9: 731920.089 ops/s
# Warmup Iteration  10: 817820.460 ops/s
# Warmup Iteration  11: 850883.599 ops/s
# Warmup Iteration  12: 847020.187 ops/s
# Warmup Iteration  13: 846559.523 ops/s
# Warmup Iteration  14: 849956.186 ops/s
# Warmup Iteration  15: 847297.769 ops/s
# Warmup Iteration  16: 845042.883 ops/s
# Warmup Iteration  17: 885643.851 ops/s
# Warmup Iteration  18: 888579.890 ops/s
# Warmup Iteration  19: 889243.116 ops/s
# Warmup Iteration  20: 887006.111 ops/s
# Warmup Iteration  21: 891202.581 ops/s
# Warmup Iteration  22: 887747.316 ops/s
# Warmup Iteration  23: 890815.473 ops/s
# Warmup Iteration  24: 892796.801 ops/s
# Warmup Iteration  25: 892341.033 ops/s
# Warmup Iteration  26: 889846.775 ops/s
# Warmup Iteration  27: 893641.929 ops/s
# Warmup Iteration  28: 891749.715 ops/s
# Warmup Iteration  29: 891301.618 ops/s
# Warmup Iteration  30: 890356.156 ops/s
Iteration   1: 892517.343 ops/s
Iteration   2: 888793.400 ops/s
Iteration   3: 890032.824 ops/s
Iteration   4: 890297.752 ops/s
Iteration   5: 888179.465 ops/s
Iteration   6: 887874.817 ops/s
Iteration   7: 893268.331 ops/s
Iteration   8: 892740.569 ops/s
Iteration   9: 888145.068 ops/s
Iteration  10: 887602.108 ops/s
Iteration  11: 888969.580 ops/s
Iteration  12: 887248.118 ops/s
Iteration  13: 887591.603 ops/s
Iteration  14: 891187.123 ops/s
Iteration  15: 888879.181 ops/s
Iteration  16: 886472.264 ops/s
Iteration  17: 886513.636 ops/s
Iteration  18: 889178.463 ops/s
Iteration  19: 886058.299 ops/s
Iteration  20: 889407.642 ops/s
Iteration  21: 876908.504 ops/s
Iteration  22: 884329.320 ops/s
Iteration  23: 887778.209 ops/s
Iteration  24: 886383.088 ops/s
Iteration  25: 883474.781 ops/s
Iteration  26: 885725.226 ops/s
Iteration  27: 889993.702 ops/s
Iteration  28: 881657.898 ops/s
Iteration  29: 889505.541 ops/s
Iteration  30: 882774.819 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAll":
  887649.622 ±(99.9%) 2287.938 ops/s [Average]
  (min, avg, max) = (876908.504, 887649.622, 893268.331), stdev = 3424.478
  CI (99.9%): [885361.685, 889937.560] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAll  thrpt   30  887649.622 ± 2287.938  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 519563.460 ops/s
# Warmup Iteration   2: 638917.580 ops/s
# Warmup Iteration   3: 837928.065 ops/s
# Warmup Iteration   4: 834282.704 ops/s
# Warmup Iteration   5: 835622.952 ops/s
# Warmup Iteration   6: 837550.874 ops/s
# Warmup Iteration   7: 841246.030 ops/s
# Warmup Iteration   8: 838845.132 ops/s
# Warmup Iteration   9: 725949.691 ops/s
# Warmup Iteration  10: 806448.412 ops/s
# Warmup Iteration  11: 836546.378 ops/s
# Warmup Iteration  12: 838309.451 ops/s
# Warmup Iteration  13: 840439.724 ops/s
# Warmup Iteration  14: 839144.188 ops/s
# Warmup Iteration  15: 838578.093 ops/s
# Warmup Iteration  16: 840629.613 ops/s
# Warmup Iteration  17: 886543.164 ops/s
# Warmup Iteration  18: 884167.255 ops/s
# Warmup Iteration  19: 883601.212 ops/s
# Warmup Iteration  20: 882991.820 ops/s
# Warmup Iteration  21: 883944.025 ops/s
# Warmup Iteration  22: 886519.192 ops/s
# Warmup Iteration  23: 884444.255 ops/s
# Warmup Iteration  24: 881249.884 ops/s
# Warmup Iteration  25: 883809.235 ops/s
# Warmup Iteration  26: 882913.616 ops/s
# Warmup Iteration  27: 886849.446 ops/s
# Warmup Iteration  28: 882722.818 ops/s
# Warmup Iteration  29: 885830.109 ops/s
# Warmup Iteration  30: 884969.548 ops/s
Iteration   1: 885595.339 ops/s
Iteration   2: 883127.079 ops/s
Iteration   3: 882019.809 ops/s
Iteration   4: 884273.773 ops/s
Iteration   5: 882277.182 ops/s
Iteration   6: 880734.015 ops/s
Iteration   7: 883134.792 ops/s
Iteration   8: 886736.284 ops/s
Iteration   9: 877270.683 ops/s
Iteration  10: 884478.670 ops/s
Iteration  11: 884685.830 ops/s
Iteration  12: 882310.677 ops/s
Iteration  13: 882950.654 ops/s
Iteration  14: 883581.110 ops/s
Iteration  15: 885065.203 ops/s
Iteration  16: 883596.190 ops/s
Iteration  17: 884208.033 ops/s
Iteration  18: 883695.448 ops/s
Iteration  19: 887271.675 ops/s
Iteration  20: 884612.083 ops/s
Iteration  21: 888897.471 ops/s
Iteration  22: 882863.783 ops/s
Iteration  23: 882514.792 ops/s
Iteration  24: 886496.867 ops/s
Iteration  25: 886597.031 ops/s
Iteration  26: 884720.405 ops/s
Iteration  27: 886649.331 ops/s
Iteration  28: 886240.285 ops/s
Iteration  29: 878384.816 ops/s
Iteration  30: 879839.826 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable":
  883827.638 ±(99.9%) 1722.516 ops/s [Average]
  (min, avg, max) = (877270.683, 883827.638, 888897.471), stdev = 2578.181
  CI (99.9%): [882105.122, 885550.154] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  883827.638 ± 1722.516  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 498218.666 ops/s
# Warmup Iteration   2: 1333285.092 ops/s
# Warmup Iteration   3: 1350496.086 ops/s
# Warmup Iteration   4: 1126367.083 ops/s
# Warmup Iteration   5: 1352157.831 ops/s
# Warmup Iteration   6: 1352540.933 ops/s
# Warmup Iteration   7: 1354226.399 ops/s
# Warmup Iteration   8: 1357860.972 ops/s
# Warmup Iteration   9: 1347795.017 ops/s
# Warmup Iteration  10: 1353473.041 ops/s
# Warmup Iteration  11: 1343128.159 ops/s
# Warmup Iteration  12: 1347767.230 ops/s
# Warmup Iteration  13: 1347804.102 ops/s
# Warmup Iteration  14: 1352679.541 ops/s
# Warmup Iteration  15: 1352265.236 ops/s
# Warmup Iteration  16: 1347572.331 ops/s
# Warmup Iteration  17: 1352542.566 ops/s
# Warmup Iteration  18: 1351442.921 ops/s
# Warmup Iteration  19: 1349333.489 ops/s
# Warmup Iteration  20: 1355331.855 ops/s
# Warmup Iteration  21: 1352289.556 ops/s
# Warmup Iteration  22: 1351505.076 ops/s
# Warmup Iteration  23: 1343396.604 ops/s
# Warmup Iteration  24: 1353121.041 ops/s
# Warmup Iteration  25: 1355925.256 ops/s
# Warmup Iteration  26: 1351972.450 ops/s
# Warmup Iteration  27: 1357296.641 ops/s
# Warmup Iteration  28: 1358467.559 ops/s
# Warmup Iteration  29: 1357674.660 ops/s
# Warmup Iteration  30: 1354932.233 ops/s
Iteration   1: 1354222.959 ops/s
Iteration   2: 1353562.618 ops/s
Iteration   3: 1355716.123 ops/s
Iteration   4: 1361574.809 ops/s
Iteration   5: 1355827.049 ops/s
Iteration   6: 1351365.227 ops/s
Iteration   7: 1353941.015 ops/s
Iteration   8: 1356702.823 ops/s
Iteration   9: 1358826.112 ops/s
Iteration  10: 1355185.057 ops/s
Iteration  11: 1354300.426 ops/s
Iteration  12: 1342051.577 ops/s
Iteration  13: 1358949.271 ops/s
Iteration  14: 1359469.468 ops/s
Iteration  15: 1362907.037 ops/s
Iteration  16: 1359304.613 ops/s
Iteration  17: 1353414.322 ops/s
Iteration  18: 1351376.613 ops/s
Iteration  19: 1345285.290 ops/s
Iteration  20: 1354302.061 ops/s
Iteration  21: 1358015.823 ops/s
Iteration  22: 1354110.738 ops/s
Iteration  23: 1353228.770 ops/s
Iteration  24: 1353236.144 ops/s
Iteration  25: 1355480.688 ops/s
Iteration  26: 1348181.251 ops/s
Iteration  27: 1360052.075 ops/s
Iteration  28: 1352619.109 ops/s
Iteration  29: 1351073.026 ops/s
Iteration  30: 1356279.210 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_select":
  1354685.377 ±(99.9%) 2994.125 ops/s [Average]
  (min, avg, max) = (1342051.577, 1354685.377, 1362907.037), stdev = 4481.466
  CI (99.9%): [1351691.252, 1357679.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_select  thrpt   30  1354685.377 ± 2994.125  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 852379.073 ops/s
# Warmup Iteration   2: 1748751.400 ops/s
# Warmup Iteration   3: 1904481.564 ops/s
# Warmup Iteration   4: 1914486.274 ops/s
# Warmup Iteration   5: 1581305.995 ops/s
# Warmup Iteration   6: 1919176.913 ops/s
# Warmup Iteration   7: 1912198.231 ops/s
# Warmup Iteration   8: 1922665.068 ops/s
# Warmup Iteration   9: 1913931.937 ops/s
# Warmup Iteration  10: 1921241.353 ops/s
# Warmup Iteration  11: 1919314.346 ops/s
# Warmup Iteration  12: 1924507.138 ops/s
# Warmup Iteration  13: 1923930.675 ops/s
# Warmup Iteration  14: 1919935.406 ops/s
# Warmup Iteration  15: 1919203.852 ops/s
# Warmup Iteration  16: 1923141.649 ops/s
# Warmup Iteration  17: 1922704.593 ops/s
# Warmup Iteration  18: 1917687.477 ops/s
# Warmup Iteration  19: 1922113.239 ops/s
# Warmup Iteration  20: 1923047.090 ops/s
# Warmup Iteration  21: 1916155.395 ops/s
# Warmup Iteration  22: 1922998.535 ops/s
# Warmup Iteration  23: 1915271.599 ops/s
# Warmup Iteration  24: 1923681.660 ops/s
# Warmup Iteration  25: 1922517.922 ops/s
# Warmup Iteration  26: 1924656.928 ops/s
# Warmup Iteration  27: 1917018.317 ops/s
# Warmup Iteration  28: 1911384.185 ops/s
# Warmup Iteration  29: 1915564.856 ops/s
# Warmup Iteration  30: 1906858.982 ops/s
Iteration   1: 1920759.347 ops/s
Iteration   2: 1910451.885 ops/s
Iteration   3: 1910112.026 ops/s
Iteration   4: 1914436.060 ops/s
Iteration   5: 1915615.528 ops/s
Iteration   6: 1918593.510 ops/s
Iteration   7: 1913081.005 ops/s
Iteration   8: 1927329.002 ops/s
Iteration   9: 1897655.843 ops/s
Iteration  10: 1901771.555 ops/s
Iteration  11: 1912805.074 ops/s
Iteration  12: 1919492.526 ops/s
Iteration  13: 1916695.597 ops/s
Iteration  14: 1908778.531 ops/s
Iteration  15: 1906738.626 ops/s
Iteration  16: 1905864.469 ops/s
Iteration  17: 1912913.819 ops/s
Iteration  18: 1908336.223 ops/s
Iteration  19: 1916028.212 ops/s
Iteration  20: 1922124.134 ops/s
Iteration  21: 1922261.546 ops/s
Iteration  22: 1917791.179 ops/s
Iteration  23: 1915393.909 ops/s
Iteration  24: 1918880.849 ops/s
Iteration  25: 1923597.770 ops/s
Iteration  26: 1913899.464 ops/s
Iteration  27: 1911792.778 ops/s
Iteration  28: 1913779.858 ops/s
Iteration  29: 1919574.094 ops/s
Iteration  30: 1920224.854 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectUnique":
  1914559.309 ±(99.9%) 4380.679 ops/s [Average]
  (min, avg, max) = (1897655.843, 1914559.309, 1927329.002), stdev = 6556.795
  CI (99.9%): [1910178.630, 1918939.988] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectUnique  thrpt   30  1914559.309 ± 4380.679  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 473628.077 ops/s
# Warmup Iteration   2: 1229060.688 ops/s
# Warmup Iteration   3: 1284275.630 ops/s
# Warmup Iteration   4: 1070772.555 ops/s
# Warmup Iteration   5: 1285963.206 ops/s
# Warmup Iteration   6: 1279834.364 ops/s
# Warmup Iteration   7: 1292901.887 ops/s
# Warmup Iteration   8: 1287967.148 ops/s
# Warmup Iteration   9: 1277808.974 ops/s
# Warmup Iteration  10: 1279775.602 ops/s
# Warmup Iteration  11: 1283269.733 ops/s
# Warmup Iteration  12: 1285166.518 ops/s
# Warmup Iteration  13: 1283368.759 ops/s
# Warmup Iteration  14: 1282962.968 ops/s
# Warmup Iteration  15: 1275587.681 ops/s
# Warmup Iteration  16: 1279152.092 ops/s
# Warmup Iteration  17: 1283874.017 ops/s
# Warmup Iteration  18: 1278713.157 ops/s
# Warmup Iteration  19: 1277320.090 ops/s
# Warmup Iteration  20: 1282665.563 ops/s
# Warmup Iteration  21: 1283021.454 ops/s
# Warmup Iteration  22: 1284318.259 ops/s
# Warmup Iteration  23: 1278589.753 ops/s
# Warmup Iteration  24: 1280713.530 ops/s
# Warmup Iteration  25: 1287651.897 ops/s
# Warmup Iteration  26: 1284134.695 ops/s
# Warmup Iteration  27: 1287019.598 ops/s
# Warmup Iteration  28: 1288390.131 ops/s
# Warmup Iteration  29: 1291093.626 ops/s
# Warmup Iteration  30: 1287065.697 ops/s
Iteration   1: 1281901.156 ops/s
Iteration   2: 1289792.886 ops/s
Iteration   3: 1284099.376 ops/s
Iteration   4: 1282083.020 ops/s
Iteration   5: 1283697.747 ops/s
Iteration   6: 1279003.808 ops/s
Iteration   7: 1290922.978 ops/s
Iteration   8: 1286106.199 ops/s
Iteration   9: 1287419.227 ops/s
Iteration  10: 1291474.669 ops/s
Iteration  11: 1289979.131 ops/s
Iteration  12: 1281338.012 ops/s
Iteration  13: 1288119.487 ops/s
Iteration  14: 1288695.399 ops/s
Iteration  15: 1292965.978 ops/s
Iteration  16: 1286775.796 ops/s
Iteration  17: 1292121.481 ops/s
Iteration  18: 1283895.622 ops/s
Iteration  19: 1281698.965 ops/s
Iteration  20: 1284233.147 ops/s
Iteration  21: 1284634.819 ops/s
Iteration  22: 1288590.572 ops/s
Iteration  23: 1285499.042 ops/s
Iteration  24: 1286177.165 ops/s
Iteration  25: 1285765.412 ops/s
Iteration  26: 1282921.227 ops/s
Iteration  27: 1286947.530 ops/s
Iteration  28: 1282293.625 ops/s
Iteration  29: 1290619.094 ops/s
Iteration  30: 1288686.490 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectWith":
  1286281.969 ±(99.9%) 2424.168 ops/s [Average]
  (min, avg, max) = (1279003.808, 1286281.969, 1292965.978), stdev = 3628.381
  CI (99.9%): [1283857.800, 1288706.137] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_selectWith  thrpt   30  1286281.969 ± 2424.168  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_setOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_setOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540855.900 ops/s
# Warmup Iteration   2: 676808.939 ops/s
# Warmup Iteration   3: 874635.792 ops/s
# Warmup Iteration   4: 866118.334 ops/s
# Warmup Iteration   5: 869519.240 ops/s
# Warmup Iteration   6: 870088.253 ops/s
# Warmup Iteration   7: 871850.082 ops/s
# Warmup Iteration   8: 865566.021 ops/s
# Warmup Iteration   9: 727643.875 ops/s
# Warmup Iteration  10: 866817.292 ops/s
# Warmup Iteration  11: 866502.037 ops/s
# Warmup Iteration  12: 866071.224 ops/s
# Warmup Iteration  13: 867944.426 ops/s
# Warmup Iteration  14: 867423.032 ops/s
# Warmup Iteration  15: 870911.445 ops/s
# Warmup Iteration  16: 872162.476 ops/s
# Warmup Iteration  17: 918985.424 ops/s
# Warmup Iteration  18: 915050.731 ops/s
# Warmup Iteration  19: 920995.138 ops/s
# Warmup Iteration  20: 916034.320 ops/s
# Warmup Iteration  21: 916411.135 ops/s
# Warmup Iteration  22: 917068.343 ops/s
# Warmup Iteration  23: 913240.137 ops/s
# Warmup Iteration  24: 919018.851 ops/s
# Warmup Iteration  25: 915220.832 ops/s
# Warmup Iteration  26: 919393.785 ops/s
# Warmup Iteration  27: 919157.229 ops/s
# Warmup Iteration  28: 914205.941 ops/s
# Warmup Iteration  29: 916566.996 ops/s
# Warmup Iteration  30: 913911.376 ops/s
Iteration   1: 910891.230 ops/s
Iteration   2: 914785.541 ops/s
Iteration   3: 905838.751 ops/s
Iteration   4: 915607.781 ops/s
Iteration   5: 911282.855 ops/s
Iteration   6: 914110.639 ops/s
Iteration   7: 917326.025 ops/s
Iteration   8: 915818.254 ops/s
Iteration   9: 914601.677 ops/s
Iteration  10: 913731.370 ops/s
Iteration  11: 916725.551 ops/s
Iteration  12: 912374.033 ops/s
Iteration  13: 915246.661 ops/s
Iteration  14: 917932.155 ops/s
Iteration  15: 916074.912 ops/s
Iteration  16: 916620.011 ops/s
Iteration  17: 914291.772 ops/s
Iteration  18: 910502.211 ops/s
Iteration  19: 914691.171 ops/s
Iteration  20: 917772.748 ops/s
Iteration  21: 914420.266 ops/s
Iteration  22: 910275.546 ops/s
Iteration  23: 916458.666 ops/s
Iteration  24: 916771.263 ops/s
Iteration  25: 920495.463 ops/s
Iteration  26: 916970.784 ops/s
Iteration  27: 915033.264 ops/s
Iteration  28: 915790.641 ops/s
Iteration  29: 919198.172 ops/s
Iteration  30: 916292.133 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_setOccurrences":
  914931.052 ±(99.9%) 1986.180 ops/s [Average]
  (min, avg, max) = (905838.751, 914931.052, 920495.463), stdev = 2972.821
  CI (99.9%): [912944.871, 916917.232] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_setOccurrences  thrpt   30  914931.052 ± 1986.180  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_sizeDistinct$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_sizeDistinct

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2931397.183 ops/s
# Warmup Iteration   2: 7392556.489 ops/s
# Warmup Iteration   3: 6691388.156 ops/s
# Warmup Iteration   4: 6901887.788 ops/s
# Warmup Iteration   5: 7462994.951 ops/s
# Warmup Iteration   6: 7458400.300 ops/s
# Warmup Iteration   7: 7450318.750 ops/s
# Warmup Iteration   8: 7440029.014 ops/s
# Warmup Iteration   9: 7469674.620 ops/s
# Warmup Iteration  10: 7443627.519 ops/s
# Warmup Iteration  11: 7435345.003 ops/s
# Warmup Iteration  12: 7461012.143 ops/s
# Warmup Iteration  13: 7456492.666 ops/s
# Warmup Iteration  14: 7467280.494 ops/s
# Warmup Iteration  15: 7440418.350 ops/s
# Warmup Iteration  16: 7432969.845 ops/s
# Warmup Iteration  17: 7524579.671 ops/s
# Warmup Iteration  18: 7495920.944 ops/s
# Warmup Iteration  19: 7499911.897 ops/s
# Warmup Iteration  20: 7500143.143 ops/s
# Warmup Iteration  21: 7481007.490 ops/s
# Warmup Iteration  22: 7523386.383 ops/s
# Warmup Iteration  23: 7528848.557 ops/s
# Warmup Iteration  24: 7520094.847 ops/s
# Warmup Iteration  25: 7544099.588 ops/s
# Warmup Iteration  26: 7527266.843 ops/s
# Warmup Iteration  27: 7528402.211 ops/s
# Warmup Iteration  28: 7519541.029 ops/s
# Warmup Iteration  29: 7508627.339 ops/s
# Warmup Iteration  30: 7498841.432 ops/s
Iteration   1: 7530355.801 ops/s
Iteration   2: 7512286.402 ops/s
Iteration   3: 7523764.478 ops/s
Iteration   4: 7510528.989 ops/s
Iteration   5: 7552276.958 ops/s
Iteration   6: 7508166.380 ops/s
Iteration   7: 7530081.161 ops/s
Iteration   8: 7532701.811 ops/s
Iteration   9: 7553925.299 ops/s
Iteration  10: 7521493.138 ops/s
Iteration  11: 7508207.472 ops/s
Iteration  12: 7497497.404 ops/s
Iteration  13: 7493233.977 ops/s
Iteration  14: 7529961.517 ops/s
Iteration  15: 7521703.783 ops/s
Iteration  16: 7547602.019 ops/s
Iteration  17: 7521031.852 ops/s
Iteration  18: 7531741.041 ops/s
Iteration  19: 7507517.892 ops/s
Iteration  20: 7500156.598 ops/s
Iteration  21: 7509527.928 ops/s
Iteration  22: 7506649.656 ops/s
Iteration  23: 7542738.111 ops/s
Iteration  24: 7503865.436 ops/s
Iteration  25: 7523839.269 ops/s
Iteration  26: 7494246.393 ops/s
Iteration  27: 7530707.221 ops/s
Iteration  28: 7513559.800 ops/s
Iteration  29: 7552912.721 ops/s
Iteration  30: 7536836.818 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_sizeDistinct":
  7521637.244 ±(99.9%) 11749.311 ops/s [Average]
  (min, avg, max) = (7493233.977, 7521637.244, 7553925.299), stdev = 17585.817
  CI (99.9%): [7509887.933, 7533386.555] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_sizeDistinct  thrpt   30  7521637.244 ± 11749.311  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1870949.114 ops/s
# Warmup Iteration   2: 4904584.415 ops/s
# Warmup Iteration   3: 4927771.052 ops/s
# Warmup Iteration   4: 4098489.425 ops/s
# Warmup Iteration   5: 4927517.209 ops/s
# Warmup Iteration   6: 4942291.668 ops/s
# Warmup Iteration   7: 4940013.007 ops/s
# Warmup Iteration   8: 4918241.643 ops/s
# Warmup Iteration   9: 4932476.879 ops/s
# Warmup Iteration  10: 4938992.308 ops/s
# Warmup Iteration  11: 4932954.041 ops/s
# Warmup Iteration  12: 4944021.581 ops/s
# Warmup Iteration  13: 4940699.668 ops/s
# Warmup Iteration  14: 4943784.306 ops/s
# Warmup Iteration  15: 4929112.085 ops/s
# Warmup Iteration  16: 4945960.982 ops/s
# Warmup Iteration  17: 4920318.652 ops/s
# Warmup Iteration  18: 4910944.554 ops/s
# Warmup Iteration  19: 4934237.512 ops/s
# Warmup Iteration  20: 4920074.191 ops/s
# Warmup Iteration  21: 4930996.538 ops/s
# Warmup Iteration  22: 4910557.124 ops/s
# Warmup Iteration  23: 4924828.142 ops/s
# Warmup Iteration  24: 4931243.466 ops/s
# Warmup Iteration  25: 4927385.345 ops/s
# Warmup Iteration  26: 4935660.131 ops/s
# Warmup Iteration  27: 4923013.168 ops/s
# Warmup Iteration  28: 4928475.708 ops/s
# Warmup Iteration  29: 4941903.335 ops/s
# Warmup Iteration  30: 4944015.681 ops/s
Iteration   1: 4951629.111 ops/s
Iteration   2: 4898938.775 ops/s
Iteration   3: 4925900.047 ops/s
Iteration   4: 4953849.574 ops/s
Iteration   5: 4931943.829 ops/s
Iteration   6: 4936827.830 ops/s
Iteration   7: 4923908.865 ops/s
Iteration   8: 4913033.822 ops/s
Iteration   9: 4926748.888 ops/s
Iteration  10: 4930108.966 ops/s
Iteration  11: 4930497.324 ops/s
Iteration  12: 4924853.243 ops/s
Iteration  13: 4942001.702 ops/s
Iteration  14: 4918938.976 ops/s
Iteration  15: 4919182.992 ops/s
Iteration  16: 4925807.596 ops/s
Iteration  17: 4926030.855 ops/s
Iteration  18: 4941300.356 ops/s
Iteration  19: 4928142.492 ops/s
Iteration  20: 4963150.251 ops/s
Iteration  21: 4946214.145 ops/s
Iteration  22: 4929720.170 ops/s
Iteration  23: 4915384.398 ops/s
Iteration  24: 4939615.890 ops/s
Iteration  25: 4938025.270 ops/s
Iteration  26: 4947014.168 ops/s
Iteration  27: 4964021.857 ops/s
Iteration  28: 4955114.997 ops/s
Iteration  29: 4929254.051 ops/s
Iteration  30: 4932497.265 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_tap":
  4933655.257 ±(99.9%) 9921.259 ops/s [Average]
  (min, avg, max) = (4898938.775, 4933655.257, 4964021.857), stdev = 14849.674
  CI (99.9%): [4923733.998, 4943576.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_tap  thrpt   30  4933655.257 ± 9921.259  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 881752.601 ops/s
# Warmup Iteration   2: 2155690.860 ops/s
# Warmup Iteration   3: 2154353.359 ops/s
# Warmup Iteration   4: 1844895.362 ops/s
# Warmup Iteration   5: 2186871.030 ops/s
# Warmup Iteration   6: 2165114.399 ops/s
# Warmup Iteration   7: 2177525.819 ops/s
# Warmup Iteration   8: 2176175.571 ops/s
# Warmup Iteration   9: 2178003.288 ops/s
# Warmup Iteration  10: 2164442.511 ops/s
# Warmup Iteration  11: 2175817.160 ops/s
# Warmup Iteration  12: 2164626.579 ops/s
# Warmup Iteration  13: 2161264.024 ops/s
# Warmup Iteration  14: 2168848.474 ops/s
# Warmup Iteration  15: 2169462.243 ops/s
# Warmup Iteration  16: 2157680.084 ops/s
# Warmup Iteration  17: 2154993.107 ops/s
# Warmup Iteration  18: 2161779.811 ops/s
# Warmup Iteration  19: 2156496.778 ops/s
# Warmup Iteration  20: 2155308.439 ops/s
# Warmup Iteration  21: 2163922.792 ops/s
# Warmup Iteration  22: 2157326.141 ops/s
# Warmup Iteration  23: 2159411.151 ops/s
# Warmup Iteration  24: 2163690.804 ops/s
# Warmup Iteration  25: 2164723.188 ops/s
# Warmup Iteration  26: 2158474.925 ops/s
# Warmup Iteration  27: 2160578.418 ops/s
# Warmup Iteration  28: 2153554.785 ops/s
# Warmup Iteration  29: 2162658.846 ops/s
# Warmup Iteration  30: 2157459.628 ops/s
Iteration   1: 2170137.456 ops/s
Iteration   2: 2164400.297 ops/s
Iteration   3: 2159587.015 ops/s
Iteration   4: 2168614.633 ops/s
Iteration   5: 2160883.173 ops/s
Iteration   6: 2161032.912 ops/s
Iteration   7: 2160919.849 ops/s
Iteration   8: 2163418.708 ops/s
Iteration   9: 2163639.633 ops/s
Iteration  10: 2160181.888 ops/s
Iteration  11: 2156859.624 ops/s
Iteration  12: 2154107.624 ops/s
Iteration  13: 2142746.319 ops/s
Iteration  14: 2154246.226 ops/s
Iteration  15: 2160444.824 ops/s
Iteration  16: 2171707.412 ops/s
Iteration  17: 2161982.189 ops/s
Iteration  18: 2167607.641 ops/s
Iteration  19: 2151510.990 ops/s
Iteration  20: 2154914.102 ops/s
Iteration  21: 2159325.824 ops/s
Iteration  22: 2160551.791 ops/s
Iteration  23: 2151126.076 ops/s
Iteration  24: 2146524.089 ops/s
Iteration  25: 2158163.689 ops/s
Iteration  26: 2153482.285 ops/s
Iteration  27: 2146046.020 ops/s
Iteration  28: 2150987.593 ops/s
Iteration  29: 2166469.124 ops/s
Iteration  30: 2162637.014 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testAppendString":
  2158808.534 ±(99.9%) 4782.009 ops/s [Average]
  (min, avg, max) = (2142746.319, 2158808.534, 2171707.412), stdev = 7157.486
  CI (99.9%): [2154026.526, 2163590.543] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testAppendString  thrpt   30  2158808.534 ± 4782.009  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 799824.482 ops/s
# Warmup Iteration   2: 2131788.593 ops/s
# Warmup Iteration   3: 2145489.122 ops/s
# Warmup Iteration   4: 1793335.065 ops/s
# Warmup Iteration   5: 2142782.060 ops/s
# Warmup Iteration   6: 2138884.863 ops/s
# Warmup Iteration   7: 2142536.099 ops/s
# Warmup Iteration   8: 2139242.934 ops/s
# Warmup Iteration   9: 2141149.563 ops/s
# Warmup Iteration  10: 2143908.394 ops/s
# Warmup Iteration  11: 2132055.094 ops/s
# Warmup Iteration  12: 2145946.646 ops/s
# Warmup Iteration  13: 2144512.548 ops/s
# Warmup Iteration  14: 2138290.278 ops/s
# Warmup Iteration  15: 2137256.898 ops/s
# Warmup Iteration  16: 2139028.038 ops/s
# Warmup Iteration  17: 2145925.626 ops/s
# Warmup Iteration  18: 2130538.906 ops/s
# Warmup Iteration  19: 2137414.688 ops/s
# Warmup Iteration  20: 2133558.680 ops/s
# Warmup Iteration  21: 2138182.392 ops/s
# Warmup Iteration  22: 2144138.010 ops/s
# Warmup Iteration  23: 2144892.518 ops/s
# Warmup Iteration  24: 2140515.528 ops/s
# Warmup Iteration  25: 2139475.452 ops/s
# Warmup Iteration  26: 2144455.679 ops/s
# Warmup Iteration  27: 2139126.326 ops/s
# Warmup Iteration  28: 2135671.670 ops/s
# Warmup Iteration  29: 2139221.551 ops/s
# Warmup Iteration  30: 2133948.549 ops/s
Iteration   1: 2146901.410 ops/s
Iteration   2: 2134487.951 ops/s
Iteration   3: 2130418.693 ops/s
Iteration   4: 2132306.163 ops/s
Iteration   5: 2134066.766 ops/s
Iteration   6: 2133506.026 ops/s
Iteration   7: 2149330.234 ops/s
Iteration   8: 2136334.721 ops/s
Iteration   9: 2134670.719 ops/s
Iteration  10: 2137733.183 ops/s
Iteration  11: 2135257.172 ops/s
Iteration  12: 2147729.588 ops/s
Iteration  13: 2142457.648 ops/s
Iteration  14: 2143959.439 ops/s
Iteration  15: 2143316.458 ops/s
Iteration  16: 2127883.805 ops/s
Iteration  17: 2130641.925 ops/s
Iteration  18: 2149094.161 ops/s
Iteration  19: 2142097.117 ops/s
Iteration  20: 2134914.028 ops/s
Iteration  21: 2144941.546 ops/s
Iteration  22: 2130190.905 ops/s
Iteration  23: 2141060.193 ops/s
Iteration  24: 2147687.528 ops/s
Iteration  25: 2140624.102 ops/s
Iteration  26: 2141095.025 ops/s
Iteration  27: 2145950.356 ops/s
Iteration  28: 2154488.323 ops/s
Iteration  29: 2138672.681 ops/s
Iteration  30: 2147237.014 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testMakeString":
  2139968.496 ±(99.9%) 4616.477 ops/s [Average]
  (min, avg, max) = (2127883.805, 2139968.496, 2154488.323), stdev = 6909.726
  CI (99.9%): [2135352.019, 2144584.973] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_testMakeString  thrpt   30  2139968.496 ± 4616.477  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toMapOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toMapOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2048243.511 ops/s
# Warmup Iteration   2: 5661982.038 ops/s
# Warmup Iteration   3: 5606693.949 ops/s
# Warmup Iteration   4: 4848156.376 ops/s
# Warmup Iteration   5: 5716371.308 ops/s
# Warmup Iteration   6: 5712782.426 ops/s
# Warmup Iteration   7: 5729574.948 ops/s
# Warmup Iteration   8: 5733742.041 ops/s
# Warmup Iteration   9: 5705767.960 ops/s
# Warmup Iteration  10: 5731210.376 ops/s
# Warmup Iteration  11: 5722116.645 ops/s
# Warmup Iteration  12: 5725788.520 ops/s
# Warmup Iteration  13: 5728218.222 ops/s
# Warmup Iteration  14: 5728578.276 ops/s
# Warmup Iteration  15: 5712086.701 ops/s
# Warmup Iteration  16: 5713388.851 ops/s
# Warmup Iteration  17: 5712661.036 ops/s
# Warmup Iteration  18: 5704239.051 ops/s
# Warmup Iteration  19: 5711916.207 ops/s
# Warmup Iteration  20: 5711493.889 ops/s
# Warmup Iteration  21: 5714674.010 ops/s
# Warmup Iteration  22: 5711459.565 ops/s
# Warmup Iteration  23: 5704298.465 ops/s
# Warmup Iteration  24: 5722425.727 ops/s
# Warmup Iteration  25: 5710245.616 ops/s
# Warmup Iteration  26: 5711218.537 ops/s
# Warmup Iteration  27: 5713930.792 ops/s
# Warmup Iteration  28: 5718128.343 ops/s
# Warmup Iteration  29: 5722053.073 ops/s
# Warmup Iteration  30: 5716607.777 ops/s
Iteration   1: 5715783.518 ops/s
Iteration   2: 5722174.967 ops/s
Iteration   3: 5734993.962 ops/s
Iteration   4: 5720964.525 ops/s
Iteration   5: 5714369.848 ops/s
Iteration   6: 5696482.495 ops/s
Iteration   7: 5711955.673 ops/s
Iteration   8: 5707964.145 ops/s
Iteration   9: 5680039.099 ops/s
Iteration  10: 5698238.709 ops/s
Iteration  11: 5696424.534 ops/s
Iteration  12: 5692661.279 ops/s
Iteration  13: 5702042.637 ops/s
Iteration  14: 5688067.106 ops/s
Iteration  15: 5699563.124 ops/s
Iteration  16: 5725002.868 ops/s
Iteration  17: 5717280.308 ops/s
Iteration  18: 5717371.630 ops/s
Iteration  19: 5704376.171 ops/s
Iteration  20: 5697605.418 ops/s
Iteration  21: 5710957.327 ops/s
Iteration  22: 5689221.771 ops/s
Iteration  23: 5695555.021 ops/s
Iteration  24: 5706998.871 ops/s
Iteration  25: 5692586.036 ops/s
Iteration  26: 5679211.514 ops/s
Iteration  27: 5664958.901 ops/s
Iteration  28: 5702766.833 ops/s
Iteration  29: 5694802.154 ops/s
Iteration  30: 5701551.636 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toMapOfItemToCount":
  5702732.403 ±(99.9%) 10024.457 ops/s [Average]
  (min, avg, max) = (5664958.901, 5702732.403, 5734993.962), stdev = 15004.136
  CI (99.9%): [5692707.946, 5712756.859] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toMapOfItemToCount  thrpt   30  5702732.403 ± 10024.457  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toStringOfItemToCount$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toStringOfItemToCount

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1530424.220 ops/s
# Warmup Iteration   2: 4122858.491 ops/s
# Warmup Iteration   3: 4055806.432 ops/s
# Warmup Iteration   4: 3537190.829 ops/s
# Warmup Iteration   5: 4126402.824 ops/s
# Warmup Iteration   6: 4151869.684 ops/s
# Warmup Iteration   7: 4166948.357 ops/s
# Warmup Iteration   8: 4127225.124 ops/s
# Warmup Iteration   9: 4170290.768 ops/s
# Warmup Iteration  10: 4155849.304 ops/s
# Warmup Iteration  11: 4150316.709 ops/s
# Warmup Iteration  12: 4157147.283 ops/s
# Warmup Iteration  13: 4136916.202 ops/s
# Warmup Iteration  14: 4140898.572 ops/s
# Warmup Iteration  15: 4129503.069 ops/s
# Warmup Iteration  16: 4154270.791 ops/s
# Warmup Iteration  17: 4093848.353 ops/s
# Warmup Iteration  18: 4096339.355 ops/s
# Warmup Iteration  19: 4091445.952 ops/s
# Warmup Iteration  20: 4105386.172 ops/s
# Warmup Iteration  21: 4100742.506 ops/s
# Warmup Iteration  22: 4092835.297 ops/s
# Warmup Iteration  23: 4123332.946 ops/s
# Warmup Iteration  24: 4106532.722 ops/s
# Warmup Iteration  25: 4095424.286 ops/s
# Warmup Iteration  26: 4104849.658 ops/s
# Warmup Iteration  27: 4102170.980 ops/s
# Warmup Iteration  28: 4108908.545 ops/s
# Warmup Iteration  29: 4089856.298 ops/s
# Warmup Iteration  30: 4102198.022 ops/s
Iteration   1: 4107298.543 ops/s
Iteration   2: 4093525.515 ops/s
Iteration   3: 4104546.382 ops/s
Iteration   4: 4112825.579 ops/s
Iteration   5: 4097530.638 ops/s
Iteration   6: 4113377.917 ops/s
Iteration   7: 4084352.594 ops/s
Iteration   8: 4089939.692 ops/s
Iteration   9: 4115752.428 ops/s
Iteration  10: 4090837.429 ops/s
Iteration  11: 4094551.297 ops/s
Iteration  12: 4107594.144 ops/s
Iteration  13: 4099549.782 ops/s
Iteration  14: 4103597.461 ops/s
Iteration  15: 4083581.670 ops/s
Iteration  16: 4091394.598 ops/s
Iteration  17: 4076024.679 ops/s
Iteration  18: 4113591.376 ops/s
Iteration  19: 4124082.006 ops/s
Iteration  20: 4095920.681 ops/s
Iteration  21: 4097263.955 ops/s
Iteration  22: 4102357.193 ops/s
Iteration  23: 4097629.362 ops/s
Iteration  24: 4111460.254 ops/s
Iteration  25: 4099953.659 ops/s
Iteration  26: 4103268.683 ops/s
Iteration  27: 4093005.209 ops/s
Iteration  28: 4099724.338 ops/s
Iteration  29: 4111784.138 ops/s
Iteration  30: 4093602.140 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toStringOfItemToCount":
  4100330.778 ±(99.9%) 7159.351 ops/s [Average]
  (min, avg, max) = (4076024.679, 4100330.778, 4124082.006), stdev = 10715.781
  CI (99.9%): [4093171.427, 4107490.130] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_toStringOfItemToCount  thrpt   30  4100330.778 ± 7159.351  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 501887.234 ops/s
# Warmup Iteration   2: 580627.293 ops/s
# Warmup Iteration   3: 764501.899 ops/s
# Warmup Iteration   4: 767248.188 ops/s
# Warmup Iteration   5: 759732.685 ops/s
# Warmup Iteration   6: 764170.244 ops/s
# Warmup Iteration   7: 762130.147 ops/s
# Warmup Iteration   8: 766568.416 ops/s
# Warmup Iteration   9: 764298.746 ops/s
# Warmup Iteration  10: 670156.184 ops/s
# Warmup Iteration  11: 735811.822 ops/s
# Warmup Iteration  12: 769201.758 ops/s
# Warmup Iteration  13: 766523.348 ops/s
# Warmup Iteration  14: 767223.795 ops/s
# Warmup Iteration  15: 766731.954 ops/s
# Warmup Iteration  16: 765756.923 ops/s
# Warmup Iteration  17: 803059.841 ops/s
# Warmup Iteration  18: 805424.885 ops/s
# Warmup Iteration  19: 804026.675 ops/s
# Warmup Iteration  20: 803220.053 ops/s
# Warmup Iteration  21: 804587.767 ops/s
# Warmup Iteration  22: 804627.414 ops/s
# Warmup Iteration  23: 804620.626 ops/s
# Warmup Iteration  24: 802580.285 ops/s
# Warmup Iteration  25: 804195.524 ops/s
# Warmup Iteration  26: 804894.108 ops/s
# Warmup Iteration  27: 800987.627 ops/s
# Warmup Iteration  28: 800772.585 ops/s
# Warmup Iteration  29: 804182.938 ops/s
# Warmup Iteration  30: 798495.404 ops/s
Iteration   1: 803702.251 ops/s
Iteration   2: 802653.426 ops/s
Iteration   3: 802638.073 ops/s
Iteration   4: 805804.377 ops/s
Iteration   5: 798800.859 ops/s
Iteration   6: 799609.792 ops/s
Iteration   7: 801252.823 ops/s
Iteration   8: 801053.292 ops/s
Iteration   9: 802779.885 ops/s
Iteration  10: 803508.234 ops/s
Iteration  11: 802060.069 ops/s
Iteration  12: 803337.444 ops/s
Iteration  13: 802470.017 ops/s
Iteration  14: 803563.259 ops/s
Iteration  15: 803763.570 ops/s
Iteration  16: 806621.193 ops/s
Iteration  17: 804074.646 ops/s
Iteration  18: 804489.040 ops/s
Iteration  19: 804290.887 ops/s
Iteration  20: 805487.471 ops/s
Iteration  21: 800439.869 ops/s
Iteration  22: 802214.457 ops/s
Iteration  23: 806271.177 ops/s
Iteration  24: 803267.312 ops/s
Iteration  25: 805815.547 ops/s
Iteration  26: 805435.637 ops/s
Iteration  27: 801128.442 ops/s
Iteration  28: 802762.404 ops/s
Iteration  29: 801998.226 ops/s
Iteration  30: 799673.821 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_with":
  803032.250 ±(99.9%) 1352.255 ops/s [Average]
  (min, avg, max) = (798800.859, 803032.250, 806621.193), stdev = 2023.992
  CI (99.9%): [801679.995, 804384.505] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_with  thrpt   30  803032.250 ± 1352.255  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 518751.869 ops/s
# Warmup Iteration   2: 624450.977 ops/s
# Warmup Iteration   3: 821487.456 ops/s
# Warmup Iteration   4: 820654.810 ops/s
# Warmup Iteration   5: 812470.584 ops/s
# Warmup Iteration   6: 820577.059 ops/s
# Warmup Iteration   7: 820552.892 ops/s
# Warmup Iteration   8: 820343.300 ops/s
# Warmup Iteration   9: 814785.766 ops/s
# Warmup Iteration  10: 689342.025 ops/s
# Warmup Iteration  11: 823108.988 ops/s
# Warmup Iteration  12: 820686.149 ops/s
# Warmup Iteration  13: 822173.466 ops/s
# Warmup Iteration  14: 824657.093 ops/s
# Warmup Iteration  15: 819858.646 ops/s
# Warmup Iteration  16: 823465.158 ops/s
# Warmup Iteration  17: 862883.488 ops/s
# Warmup Iteration  18: 862009.757 ops/s
# Warmup Iteration  19: 858907.141 ops/s
# Warmup Iteration  20: 859584.205 ops/s
# Warmup Iteration  21: 861510.974 ops/s
# Warmup Iteration  22: 860801.149 ops/s
# Warmup Iteration  23: 860736.357 ops/s
# Warmup Iteration  24: 862404.977 ops/s
# Warmup Iteration  25: 858681.994 ops/s
# Warmup Iteration  26: 862829.749 ops/s
# Warmup Iteration  27: 863862.016 ops/s
# Warmup Iteration  28: 863442.614 ops/s
# Warmup Iteration  29: 862263.765 ops/s
# Warmup Iteration  30: 862651.680 ops/s
Iteration   1: 862603.387 ops/s
Iteration   2: 861272.086 ops/s
Iteration   3: 856740.692 ops/s
Iteration   4: 863072.017 ops/s
Iteration   5: 862896.867 ops/s
Iteration   6: 866733.996 ops/s
Iteration   7: 863784.577 ops/s
Iteration   8: 862001.926 ops/s
Iteration   9: 858875.615 ops/s
Iteration  10: 859428.767 ops/s
Iteration  11: 859026.650 ops/s
Iteration  12: 861062.302 ops/s
Iteration  13: 863638.875 ops/s
Iteration  14: 864022.024 ops/s
Iteration  15: 861472.717 ops/s
Iteration  16: 862118.640 ops/s
Iteration  17: 858073.122 ops/s
Iteration  18: 861301.010 ops/s
Iteration  19: 866281.638 ops/s
Iteration  20: 858342.134 ops/s
Iteration  21: 861087.752 ops/s
Iteration  22: 864153.746 ops/s
Iteration  23: 862686.354 ops/s
Iteration  24: 862567.607 ops/s
Iteration  25: 862252.824 ops/s
Iteration  26: 864559.200 ops/s
Iteration  27: 863339.550 ops/s
Iteration  28: 864423.734 ops/s
Iteration  29: 862278.200 ops/s
Iteration  30: 864612.240 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withAll":
  862157.008 ±(99.9%) 1586.837 ops/s [Average]
  (min, avg, max) = (856740.692, 862157.008, 866733.996), stdev = 2375.104
  CI (99.9%): [860570.171, 863743.846] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withAll  thrpt   30  862157.008 ± 1586.837  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 517114.533 ops/s
# Warmup Iteration   2: 616735.024 ops/s
# Warmup Iteration   3: 818267.412 ops/s
# Warmup Iteration   4: 819494.704 ops/s
# Warmup Iteration   5: 815414.735 ops/s
# Warmup Iteration   6: 818502.327 ops/s
# Warmup Iteration   7: 818999.417 ops/s
# Warmup Iteration   8: 824170.590 ops/s
# Warmup Iteration   9: 802678.780 ops/s
# Warmup Iteration  10: 699382.496 ops/s
# Warmup Iteration  11: 823729.533 ops/s
# Warmup Iteration  12: 822828.278 ops/s
# Warmup Iteration  13: 818189.918 ops/s
# Warmup Iteration  14: 820503.670 ops/s
# Warmup Iteration  15: 819568.800 ops/s
# Warmup Iteration  16: 817647.937 ops/s
# Warmup Iteration  17: 857558.631 ops/s
# Warmup Iteration  18: 861401.953 ops/s
# Warmup Iteration  19: 857251.252 ops/s
# Warmup Iteration  20: 856772.903 ops/s
# Warmup Iteration  21: 860472.782 ops/s
# Warmup Iteration  22: 860983.280 ops/s
# Warmup Iteration  23: 861092.686 ops/s
# Warmup Iteration  24: 859569.907 ops/s
# Warmup Iteration  25: 865268.974 ops/s
# Warmup Iteration  26: 860874.880 ops/s
# Warmup Iteration  27: 858690.672 ops/s
# Warmup Iteration  28: 862543.944 ops/s
# Warmup Iteration  29: 861008.873 ops/s
# Warmup Iteration  30: 859576.835 ops/s
Iteration   1: 858393.093 ops/s
Iteration   2: 858397.073 ops/s
Iteration   3: 860205.053 ops/s
Iteration   4: 857700.099 ops/s
Iteration   5: 860739.567 ops/s
Iteration   6: 855710.664 ops/s
Iteration   7: 858724.690 ops/s
Iteration   8: 859369.898 ops/s
Iteration   9: 856690.921 ops/s
Iteration  10: 864996.465 ops/s
Iteration  11: 861754.713 ops/s
Iteration  12: 861582.193 ops/s
Iteration  13: 862502.502 ops/s
Iteration  14: 860769.332 ops/s
Iteration  15: 862058.226 ops/s
Iteration  16: 862270.934 ops/s
Iteration  17: 862864.524 ops/s
Iteration  18: 859117.152 ops/s
Iteration  19: 856439.441 ops/s
Iteration  20: 858050.769 ops/s
Iteration  21: 860294.837 ops/s
Iteration  22: 862544.531 ops/s
Iteration  23: 857750.790 ops/s
Iteration  24: 856534.918 ops/s
Iteration  25: 855321.546 ops/s
Iteration  26: 849655.465 ops/s
Iteration  27: 854687.646 ops/s
Iteration  28: 858142.435 ops/s
Iteration  29: 857198.360 ops/s
Iteration  30: 859151.158 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_without":
  858987.300 ±(99.9%) 2063.585 ops/s [Average]
  (min, avg, max) = (849655.465, 858987.300, 864996.465), stdev = 3088.677
  CI (99.9%): [856923.715, 861050.885] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_without  thrpt   30  858987.300 ± 2063.585  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 513082.744 ops/s
# Warmup Iteration   2: 625711.041 ops/s
# Warmup Iteration   3: 823779.320 ops/s
# Warmup Iteration   4: 820913.473 ops/s
# Warmup Iteration   5: 815519.514 ops/s
# Warmup Iteration   6: 821831.761 ops/s
# Warmup Iteration   7: 823616.115 ops/s
# Warmup Iteration   8: 818805.308 ops/s
# Warmup Iteration   9: 751356.655 ops/s
# Warmup Iteration  10: 750478.755 ops/s
# Warmup Iteration  11: 822398.860 ops/s
# Warmup Iteration  12: 822420.415 ops/s
# Warmup Iteration  13: 825790.727 ops/s
# Warmup Iteration  14: 822587.933 ops/s
# Warmup Iteration  15: 822713.479 ops/s
# Warmup Iteration  16: 823679.075 ops/s
# Warmup Iteration  17: 859417.723 ops/s
# Warmup Iteration  18: 863718.043 ops/s
# Warmup Iteration  19: 865123.256 ops/s
# Warmup Iteration  20: 864639.266 ops/s
# Warmup Iteration  21: 864066.212 ops/s
# Warmup Iteration  22: 861036.595 ops/s
# Warmup Iteration  23: 862369.539 ops/s
# Warmup Iteration  24: 861057.366 ops/s
# Warmup Iteration  25: 856372.877 ops/s
# Warmup Iteration  26: 862425.574 ops/s
# Warmup Iteration  27: 860313.714 ops/s
# Warmup Iteration  28: 859323.700 ops/s
# Warmup Iteration  29: 863911.886 ops/s
# Warmup Iteration  30: 862216.841 ops/s
Iteration   1: 860865.948 ops/s
Iteration   2: 865281.321 ops/s
Iteration   3: 858363.886 ops/s
Iteration   4: 863520.550 ops/s
Iteration   5: 865326.582 ops/s
Iteration   6: 860720.199 ops/s
Iteration   7: 862909.131 ops/s
Iteration   8: 861310.886 ops/s
Iteration   9: 862117.226 ops/s
Iteration  10: 860718.855 ops/s
Iteration  11: 864673.076 ops/s
Iteration  12: 863448.843 ops/s
Iteration  13: 861790.363 ops/s
Iteration  14: 865176.135 ops/s
Iteration  15: 864498.678 ops/s
Iteration  16: 858205.061 ops/s
Iteration  17: 859696.101 ops/s
Iteration  18: 864437.224 ops/s
Iteration  19: 861636.486 ops/s
Iteration  20: 861982.864 ops/s
Iteration  21: 865688.446 ops/s
Iteration  22: 858099.527 ops/s
Iteration  23: 861220.899 ops/s
Iteration  24: 861623.190 ops/s
Iteration  25: 859578.736 ops/s
Iteration  26: 861626.565 ops/s
Iteration  27: 861852.827 ops/s
Iteration  28: 860550.713 ops/s
Iteration  29: 862977.791 ops/s
Iteration  30: 859179.561 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withoutAll":
  861969.256 ±(99.9%) 1474.358 ops/s [Average]
  (min, avg, max) = (858099.527, 861969.256, 865688.446), stdev = 2206.751
  CI (99.9%): [860494.897, 863443.614] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_withoutAll  thrpt   30  861969.256 ± 1474.358  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 246343.876 ops/s
# Warmup Iteration   2: 466932.470 ops/s
# Warmup Iteration   3: 556529.890 ops/s
# Warmup Iteration   4: 560144.571 ops/s
# Warmup Iteration   5: 562872.674 ops/s
# Warmup Iteration   6: 463398.726 ops/s
# Warmup Iteration   7: 563114.313 ops/s
# Warmup Iteration   8: 561088.950 ops/s
# Warmup Iteration   9: 561125.397 ops/s
# Warmup Iteration  10: 558790.177 ops/s
# Warmup Iteration  11: 560957.819 ops/s
# Warmup Iteration  12: 562908.800 ops/s
# Warmup Iteration  13: 559654.655 ops/s
# Warmup Iteration  14: 562391.258 ops/s
# Warmup Iteration  15: 559118.138 ops/s
# Warmup Iteration  16: 560507.838 ops/s
# Warmup Iteration  17: 561143.926 ops/s
# Warmup Iteration  18: 563370.819 ops/s
# Warmup Iteration  19: 562641.142 ops/s
# Warmup Iteration  20: 560293.698 ops/s
# Warmup Iteration  21: 562749.333 ops/s
# Warmup Iteration  22: 561891.201 ops/s
# Warmup Iteration  23: 560854.426 ops/s
# Warmup Iteration  24: 563711.447 ops/s
# Warmup Iteration  25: 562021.851 ops/s
# Warmup Iteration  26: 562183.379 ops/s
# Warmup Iteration  27: 562259.952 ops/s
# Warmup Iteration  28: 561831.659 ops/s
# Warmup Iteration  29: 563352.615 ops/s
# Warmup Iteration  30: 559555.389 ops/s
Iteration   1: 563489.440 ops/s
Iteration   2: 560638.692 ops/s
Iteration   3: 564555.587 ops/s
Iteration   4: 560246.516 ops/s
Iteration   5: 564364.198 ops/s
Iteration   6: 558903.773 ops/s
Iteration   7: 557902.749 ops/s
Iteration   8: 561515.511 ops/s
Iteration   9: 561771.941 ops/s
Iteration  10: 561344.527 ops/s
Iteration  11: 560507.236 ops/s
Iteration  12: 562458.938 ops/s
Iteration  13: 557134.671 ops/s
Iteration  14: 562449.701 ops/s
Iteration  15: 562423.426 ops/s
Iteration  16: 559957.824 ops/s
Iteration  17: 562308.688 ops/s
Iteration  18: 560926.232 ops/s
Iteration  19: 563199.345 ops/s
Iteration  20: 560106.859 ops/s
Iteration  21: 560901.950 ops/s
Iteration  22: 560500.558 ops/s
Iteration  23: 561319.048 ops/s
Iteration  24: 561258.028 ops/s
Iteration  25: 559468.980 ops/s
Iteration  26: 559603.471 ops/s
Iteration  27: 556244.279 ops/s
Iteration  28: 560433.484 ops/s
Iteration  29: 563341.985 ops/s
Iteration  30: 560155.343 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zip":
  560981.099 ±(99.9%) 1298.540 ops/s [Average]
  (min, avg, max) = (556244.279, 560981.099, 564555.587), stdev = 1943.594
  CI (99.9%): [559682.559, 562279.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zip  thrpt   30  560981.099 ± 1298.540  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 573725.258 ops/s
# Warmup Iteration   2: 1461309.163 ops/s
# Warmup Iteration   3: 1553055.264 ops/s
# Warmup Iteration   4: 1287158.274 ops/s
# Warmup Iteration   5: 1543055.478 ops/s
# Warmup Iteration   6: 1548696.547 ops/s
# Warmup Iteration   7: 1541160.519 ops/s
# Warmup Iteration   8: 1543969.310 ops/s
# Warmup Iteration   9: 1547337.708 ops/s
# Warmup Iteration  10: 1548760.548 ops/s
# Warmup Iteration  11: 1548298.314 ops/s
# Warmup Iteration  12: 1545783.398 ops/s
# Warmup Iteration  13: 1547336.701 ops/s
# Warmup Iteration  14: 1544995.815 ops/s
# Warmup Iteration  15: 1542953.441 ops/s
# Warmup Iteration  16: 1543304.957 ops/s
# Warmup Iteration  17: 1545976.396 ops/s
# Warmup Iteration  18: 1546465.951 ops/s
# Warmup Iteration  19: 1548224.634 ops/s
# Warmup Iteration  20: 1542114.416 ops/s
# Warmup Iteration  21: 1545723.325 ops/s
# Warmup Iteration  22: 1534723.020 ops/s
# Warmup Iteration  23: 1540509.829 ops/s
# Warmup Iteration  24: 1543622.123 ops/s
# Warmup Iteration  25: 1535428.821 ops/s
# Warmup Iteration  26: 1541019.532 ops/s
# Warmup Iteration  27: 1541664.757 ops/s
# Warmup Iteration  28: 1537538.458 ops/s
# Warmup Iteration  29: 1539743.442 ops/s
# Warmup Iteration  30: 1543148.242 ops/s
Iteration   1: 1546918.386 ops/s
Iteration   2: 1546140.794 ops/s
Iteration   3: 1533978.609 ops/s
Iteration   4: 1541567.746 ops/s
Iteration   5: 1548429.930 ops/s
Iteration   6: 1544075.034 ops/s
Iteration   7: 1541659.969 ops/s
Iteration   8: 1549660.093 ops/s
Iteration   9: 1551238.087 ops/s
Iteration  10: 1546186.247 ops/s
Iteration  11: 1542303.941 ops/s
Iteration  12: 1548225.589 ops/s
Iteration  13: 1548678.237 ops/s
Iteration  14: 1549417.057 ops/s
Iteration  15: 1545776.746 ops/s
Iteration  16: 1544083.687 ops/s
Iteration  17: 1542175.042 ops/s
Iteration  18: 1543944.126 ops/s
Iteration  19: 1547767.613 ops/s
Iteration  20: 1542092.889 ops/s
Iteration  21: 1540608.614 ops/s
Iteration  22: 1547705.958 ops/s
Iteration  23: 1536240.354 ops/s
Iteration  24: 1539833.358 ops/s
Iteration  25: 1543270.236 ops/s
Iteration  26: 1552245.941 ops/s
Iteration  27: 1543131.826 ops/s
Iteration  28: 1548808.363 ops/s
Iteration  29: 1544185.274 ops/s
Iteration  30: 1536641.389 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex":
  1544566.371 ±(99.9%) 2961.552 ops/s [Average]
  (min, avg, max) = (1533978.609, 1544566.371, 1552245.941), stdev = 4432.712
  CI (99.9%): [1541604.819, 1547527.923] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsReadUntouchableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1544566.371 ± 2961.552  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_add$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_add

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561673.176 ops/s
# Warmup Iteration   2: 677406.610 ops/s
# Warmup Iteration   3: 883753.449 ops/s
# Warmup Iteration   4: 883660.834 ops/s
# Warmup Iteration   5: 883015.326 ops/s
# Warmup Iteration   6: 884745.811 ops/s
# Warmup Iteration   7: 882056.358 ops/s
# Warmup Iteration   8: 886820.519 ops/s
# Warmup Iteration   9: 786248.289 ops/s
# Warmup Iteration  10: 824634.445 ops/s
# Warmup Iteration  11: 890844.140 ops/s
# Warmup Iteration  12: 889837.629 ops/s
# Warmup Iteration  13: 884933.527 ops/s
# Warmup Iteration  14: 885771.492 ops/s
# Warmup Iteration  15: 889771.557 ops/s
# Warmup Iteration  16: 881083.577 ops/s
# Warmup Iteration  17: 934236.245 ops/s
# Warmup Iteration  18: 934816.391 ops/s
# Warmup Iteration  19: 937683.626 ops/s
# Warmup Iteration  20: 932337.027 ops/s
# Warmup Iteration  21: 939045.518 ops/s
# Warmup Iteration  22: 935328.293 ops/s
# Warmup Iteration  23: 933692.118 ops/s
# Warmup Iteration  24: 936131.175 ops/s
# Warmup Iteration  25: 935837.991 ops/s
# Warmup Iteration  26: 935069.495 ops/s
# Warmup Iteration  27: 935433.611 ops/s
# Warmup Iteration  28: 936866.494 ops/s
# Warmup Iteration  29: 935398.428 ops/s
# Warmup Iteration  30: 934423.163 ops/s
Iteration   1: 930942.440 ops/s
Iteration   2: 940426.501 ops/s
Iteration   3: 938624.230 ops/s
Iteration   4: 935630.080 ops/s
Iteration   5: 934885.245 ops/s
Iteration   6: 936500.157 ops/s
Iteration   7: 938310.795 ops/s
Iteration   8: 934836.012 ops/s
Iteration   9: 935369.031 ops/s
Iteration  10: 938171.553 ops/s
Iteration  11: 937915.235 ops/s
Iteration  12: 941056.742 ops/s
Iteration  13: 934835.765 ops/s
Iteration  14: 938602.734 ops/s
Iteration  15: 935256.750 ops/s
Iteration  16: 938352.576 ops/s
Iteration  17: 933541.674 ops/s
Iteration  18: 937224.780 ops/s
Iteration  19: 936921.538 ops/s
Iteration  20: 933519.618 ops/s
Iteration  21: 932849.915 ops/s
Iteration  22: 934453.028 ops/s
Iteration  23: 939827.040 ops/s
Iteration  24: 934674.883 ops/s
Iteration  25: 936622.977 ops/s
Iteration  26: 938678.049 ops/s
Iteration  27: 934656.632 ops/s
Iteration  28: 931640.805 ops/s
Iteration  29: 936537.056 ops/s
Iteration  30: 937058.044 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_add":
  936264.063 ±(99.9%) 1664.048 ops/s [Average]
  (min, avg, max) = (930942.440, 936264.063, 941056.742), stdev = 2490.669
  CI (99.9%): [934600.015, 937928.111] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_add  thrpt   30  936264.063 ± 1664.048  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 560290.713 ops/s
# Warmup Iteration   2: 675808.417 ops/s
# Warmup Iteration   3: 879298.569 ops/s
# Warmup Iteration   4: 883161.162 ops/s
# Warmup Iteration   5: 878322.184 ops/s
# Warmup Iteration   6: 878627.863 ops/s
# Warmup Iteration   7: 880397.219 ops/s
# Warmup Iteration   8: 881467.783 ops/s
# Warmup Iteration   9: 782021.240 ops/s
# Warmup Iteration  10: 837374.504 ops/s
# Warmup Iteration  11: 881515.911 ops/s
# Warmup Iteration  12: 885465.891 ops/s
# Warmup Iteration  13: 885453.590 ops/s
# Warmup Iteration  14: 887362.484 ops/s
# Warmup Iteration  15: 880425.843 ops/s
# Warmup Iteration  16: 885006.566 ops/s
# Warmup Iteration  17: 936636.078 ops/s
# Warmup Iteration  18: 936106.325 ops/s
# Warmup Iteration  19: 935401.654 ops/s
# Warmup Iteration  20: 938339.181 ops/s
# Warmup Iteration  21: 933425.980 ops/s
# Warmup Iteration  22: 933732.427 ops/s
# Warmup Iteration  23: 934411.585 ops/s
# Warmup Iteration  24: 935797.065 ops/s
# Warmup Iteration  25: 934749.275 ops/s
# Warmup Iteration  26: 938570.961 ops/s
# Warmup Iteration  27: 936050.455 ops/s
# Warmup Iteration  28: 935904.776 ops/s
# Warmup Iteration  29: 934589.326 ops/s
# Warmup Iteration  30: 935990.657 ops/s
Iteration   1: 937886.015 ops/s
Iteration   2: 933888.081 ops/s
Iteration   3: 930109.749 ops/s
Iteration   4: 935784.296 ops/s
Iteration   5: 937865.876 ops/s
Iteration   6: 933584.222 ops/s
Iteration   7: 938766.970 ops/s
Iteration   8: 936105.109 ops/s
Iteration   9: 934675.739 ops/s
Iteration  10: 934069.717 ops/s
Iteration  11: 932853.468 ops/s
Iteration  12: 933373.202 ops/s
Iteration  13: 933328.740 ops/s
Iteration  14: 933792.007 ops/s
Iteration  15: 934329.240 ops/s
Iteration  16: 935861.484 ops/s
Iteration  17: 930102.098 ops/s
Iteration  18: 932683.063 ops/s
Iteration  19: 934216.041 ops/s
Iteration  20: 936049.377 ops/s
Iteration  21: 934166.767 ops/s
Iteration  22: 938770.841 ops/s
Iteration  23: 930539.885 ops/s
Iteration  24: 921230.806 ops/s
Iteration  25: 932092.851 ops/s
Iteration  26: 931790.583 ops/s
Iteration  27: 934003.273 ops/s
Iteration  28: 936739.635 ops/s
Iteration  29: 929258.850 ops/s
Iteration  30: 934936.959 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAll":
  933761.832 ±(99.9%) 2282.966 ops/s [Average]
  (min, avg, max) = (921230.806, 933761.832, 938770.841), stdev = 3417.037
  CI (99.9%): [931478.865, 936044.798] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAll  thrpt   30  933761.832 ± 2282.966  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 557485.331 ops/s
# Warmup Iteration   2: 676422.843 ops/s
# Warmup Iteration   3: 872009.418 ops/s
# Warmup Iteration   4: 869940.650 ops/s
# Warmup Iteration   5: 874389.443 ops/s
# Warmup Iteration   6: 874852.611 ops/s
# Warmup Iteration   7: 874826.917 ops/s
# Warmup Iteration   8: 880357.045 ops/s
# Warmup Iteration   9: 755131.211 ops/s
# Warmup Iteration  10: 850284.398 ops/s
# Warmup Iteration  11: 879730.513 ops/s
# Warmup Iteration  12: 877460.197 ops/s
# Warmup Iteration  13: 874735.534 ops/s
# Warmup Iteration  14: 876098.969 ops/s
# Warmup Iteration  15: 876725.823 ops/s
# Warmup Iteration  16: 878284.488 ops/s
# Warmup Iteration  17: 926102.588 ops/s
# Warmup Iteration  18: 933028.869 ops/s
# Warmup Iteration  19: 929922.749 ops/s
# Warmup Iteration  20: 926177.286 ops/s
# Warmup Iteration  21: 930395.333 ops/s
# Warmup Iteration  22: 927393.795 ops/s
# Warmup Iteration  23: 926849.426 ops/s
# Warmup Iteration  24: 927044.225 ops/s
# Warmup Iteration  25: 931256.437 ops/s
# Warmup Iteration  26: 925939.379 ops/s
# Warmup Iteration  27: 924765.569 ops/s
# Warmup Iteration  28: 932495.438 ops/s
# Warmup Iteration  29: 931494.530 ops/s
# Warmup Iteration  30: 923754.449 ops/s
Iteration   1: 923587.805 ops/s
Iteration   2: 924896.364 ops/s
Iteration   3: 923777.502 ops/s
Iteration   4: 929092.262 ops/s
Iteration   5: 923680.202 ops/s
Iteration   6: 922469.136 ops/s
Iteration   7: 926422.428 ops/s
Iteration   8: 929141.991 ops/s
Iteration   9: 927697.355 ops/s
Iteration  10: 928728.547 ops/s
Iteration  11: 928057.249 ops/s
Iteration  12: 923405.643 ops/s
Iteration  13: 923485.363 ops/s
Iteration  14: 924073.563 ops/s
Iteration  15: 925652.435 ops/s
Iteration  16: 927586.473 ops/s
Iteration  17: 920553.403 ops/s
Iteration  18: 927087.359 ops/s
Iteration  19: 924942.728 ops/s
Iteration  20: 920379.836 ops/s
Iteration  21: 928728.093 ops/s
Iteration  22: 931273.215 ops/s
Iteration  23: 928910.406 ops/s
Iteration  24: 932316.303 ops/s
Iteration  25: 927739.673 ops/s
Iteration  26: 927369.353 ops/s
Iteration  27: 925752.066 ops/s
Iteration  28: 926683.008 ops/s
Iteration  29: 924383.086 ops/s
Iteration  30: 928505.230 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAllIterable":
  926212.603 ±(99.9%) 1936.097 ops/s [Average]
  (min, avg, max) = (920379.836, 926212.603, 932316.303), stdev = 2897.858
  CI (99.9%): [924276.506, 928148.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_addAllIterable  thrpt   30  926212.603 ± 1936.097  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 561148.715 ops/s
# Warmup Iteration   2: 676502.957 ops/s
# Warmup Iteration   3: 880485.173 ops/s
# Warmup Iteration   4: 880723.427 ops/s
# Warmup Iteration   5: 877497.348 ops/s
# Warmup Iteration   6: 885956.679 ops/s
# Warmup Iteration   7: 883017.641 ops/s
# Warmup Iteration   8: 881957.166 ops/s
# Warmup Iteration   9: 778808.473 ops/s
# Warmup Iteration  10: 842480.540 ops/s
# Warmup Iteration  11: 887842.513 ops/s
# Warmup Iteration  12: 887151.956 ops/s
# Warmup Iteration  13: 887769.321 ops/s
# Warmup Iteration  14: 885826.335 ops/s
# Warmup Iteration  15: 884805.506 ops/s
# Warmup Iteration  16: 885636.742 ops/s
# Warmup Iteration  17: 936569.194 ops/s
# Warmup Iteration  18: 933862.299 ops/s
# Warmup Iteration  19: 932707.236 ops/s
# Warmup Iteration  20: 933371.901 ops/s
# Warmup Iteration  21: 933117.144 ops/s
# Warmup Iteration  22: 931125.989 ops/s
# Warmup Iteration  23: 936580.316 ops/s
# Warmup Iteration  24: 930366.936 ops/s
# Warmup Iteration  25: 935149.098 ops/s
# Warmup Iteration  26: 936069.325 ops/s
# Warmup Iteration  27: 937714.500 ops/s
# Warmup Iteration  28: 932061.091 ops/s
# Warmup Iteration  29: 931067.936 ops/s
# Warmup Iteration  30: 936635.553 ops/s
Iteration   1: 934571.166 ops/s
Iteration   2: 934138.335 ops/s
Iteration   3: 929159.556 ops/s
Iteration   4: 935070.477 ops/s
Iteration   5: 935216.994 ops/s
Iteration   6: 936360.310 ops/s
Iteration   7: 931969.036 ops/s
Iteration   8: 934661.298 ops/s
Iteration   9: 933448.592 ops/s
Iteration  10: 928157.852 ops/s
Iteration  11: 935701.785 ops/s
Iteration  12: 934370.021 ops/s
Iteration  13: 937747.036 ops/s
Iteration  14: 933751.818 ops/s
Iteration  15: 935009.098 ops/s
Iteration  16: 931346.056 ops/s
Iteration  17: 933962.498 ops/s
Iteration  18: 933317.732 ops/s
Iteration  19: 933473.199 ops/s
Iteration  20: 930634.931 ops/s
Iteration  21: 932081.777 ops/s
Iteration  22: 934743.985 ops/s
Iteration  23: 932494.375 ops/s
Iteration  24: 926924.330 ops/s
Iteration  25: 930204.827 ops/s
Iteration  26: 933317.253 ops/s
Iteration  27: 931139.913 ops/s
Iteration  28: 932420.017 ops/s
Iteration  29: 936386.206 ops/s
Iteration  30: 928365.209 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_clear":
  933004.856 ±(99.9%) 1746.114 ops/s [Average]
  (min, avg, max) = (926924.330, 933004.856, 937747.036), stdev = 2613.502
  CI (99.9%): [931258.742, 934750.970] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_clear  thrpt   30  933004.856 ± 1746.114  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 489253.969 ops/s
# Warmup Iteration   2: 1155692.327 ops/s
# Warmup Iteration   3: 1188996.677 ops/s
# Warmup Iteration   4: 995465.688 ops/s
# Warmup Iteration   5: 1187651.813 ops/s
# Warmup Iteration   6: 1179155.222 ops/s
# Warmup Iteration   7: 1189525.873 ops/s
# Warmup Iteration   8: 1195890.663 ops/s
# Warmup Iteration   9: 1194759.032 ops/s
# Warmup Iteration  10: 1194481.908 ops/s
# Warmup Iteration  11: 1203493.424 ops/s
# Warmup Iteration  12: 1197848.823 ops/s
# Warmup Iteration  13: 1194299.208 ops/s
# Warmup Iteration  14: 1199723.912 ops/s
# Warmup Iteration  15: 1203141.220 ops/s
# Warmup Iteration  16: 1199362.524 ops/s
# Warmup Iteration  17: 1195495.594 ops/s
# Warmup Iteration  18: 1202103.674 ops/s
# Warmup Iteration  19: 1208711.405 ops/s
# Warmup Iteration  20: 1205038.061 ops/s
# Warmup Iteration  21: 1201408.511 ops/s
# Warmup Iteration  22: 1200997.285 ops/s
# Warmup Iteration  23: 1199401.246 ops/s
# Warmup Iteration  24: 1204917.191 ops/s
# Warmup Iteration  25: 1200877.288 ops/s
# Warmup Iteration  26: 1205435.453 ops/s
# Warmup Iteration  27: 1199462.566 ops/s
# Warmup Iteration  28: 1205748.366 ops/s
# Warmup Iteration  29: 1205993.820 ops/s
# Warmup Iteration  30: 1202277.030 ops/s
Iteration   1: 1212326.075 ops/s
Iteration   2: 1203116.240 ops/s
Iteration   3: 1206539.240 ops/s
Iteration   4: 1208010.064 ops/s
Iteration   5: 1212378.671 ops/s
Iteration   6: 1202412.895 ops/s
Iteration   7: 1197502.200 ops/s
Iteration   8: 1207100.347 ops/s
Iteration   9: 1208178.947 ops/s
Iteration  10: 1208534.034 ops/s
Iteration  11: 1209660.190 ops/s
Iteration  12: 1207649.344 ops/s
Iteration  13: 1202898.717 ops/s
Iteration  14: 1205511.768 ops/s
Iteration  15: 1198962.326 ops/s
Iteration  16: 1199951.812 ops/s
Iteration  17: 1211938.431 ops/s
Iteration  18: 1207034.924 ops/s
Iteration  19: 1200515.171 ops/s
Iteration  20: 1192369.383 ops/s
Iteration  21: 1205613.890 ops/s
Iteration  22: 1202054.427 ops/s
Iteration  23: 1198993.764 ops/s
Iteration  24: 1203591.330 ops/s
Iteration  25: 1198881.239 ops/s
Iteration  26: 1194056.155 ops/s
Iteration  27: 1194721.371 ops/s
Iteration  28: 1205679.750 ops/s
Iteration  29: 1204315.048 ops/s
Iteration  30: 1198242.505 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collect":
  1203624.675 ±(99.9%) 3595.995 ops/s [Average]
  (min, avg, max) = (1192369.383, 1203624.675, 1212378.671), stdev = 5382.316
  CI (99.9%): [1200028.680, 1207220.670] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collect  thrpt   30  1203624.675 ± 3595.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1121391.723 ops/s
# Warmup Iteration   2: 2795429.619 ops/s
# Warmup Iteration   3: 2827127.735 ops/s
# Warmup Iteration   4: 2345439.593 ops/s
# Warmup Iteration   5: 2835247.511 ops/s
# Warmup Iteration   6: 2836883.158 ops/s
# Warmup Iteration   7: 2841625.716 ops/s
# Warmup Iteration   8: 2846667.174 ops/s
# Warmup Iteration   9: 2851364.880 ops/s
# Warmup Iteration  10: 2850912.413 ops/s
# Warmup Iteration  11: 2840482.039 ops/s
# Warmup Iteration  12: 2835711.702 ops/s
# Warmup Iteration  13: 2834036.349 ops/s
# Warmup Iteration  14: 2830438.887 ops/s
# Warmup Iteration  15: 2829435.281 ops/s
# Warmup Iteration  16: 2833524.457 ops/s
# Warmup Iteration  17: 2844742.960 ops/s
# Warmup Iteration  18: 2838754.677 ops/s
# Warmup Iteration  19: 2844061.187 ops/s
# Warmup Iteration  20: 2851770.764 ops/s
# Warmup Iteration  21: 2845573.756 ops/s
# Warmup Iteration  22: 2833302.315 ops/s
# Warmup Iteration  23: 2850103.470 ops/s
# Warmup Iteration  24: 2844594.849 ops/s
# Warmup Iteration  25: 2841830.411 ops/s
# Warmup Iteration  26: 2846494.991 ops/s
# Warmup Iteration  27: 2848602.000 ops/s
# Warmup Iteration  28: 2837956.615 ops/s
# Warmup Iteration  29: 2849942.527 ops/s
# Warmup Iteration  30: 2847653.525 ops/s
Iteration   1: 2851529.182 ops/s
Iteration   2: 2840364.582 ops/s
Iteration   3: 2834039.576 ops/s
Iteration   4: 2844867.417 ops/s
Iteration   5: 2841920.709 ops/s
Iteration   6: 2844405.704 ops/s
Iteration   7: 2849136.461 ops/s
Iteration   8: 2846125.906 ops/s
Iteration   9: 2841487.074 ops/s
Iteration  10: 2836849.364 ops/s
Iteration  11: 2846906.682 ops/s
Iteration  12: 2844217.464 ops/s
Iteration  13: 2851008.903 ops/s
Iteration  14: 2856153.370 ops/s
Iteration  15: 2843854.940 ops/s
Iteration  16: 2833134.004 ops/s
Iteration  17: 2843810.404 ops/s
Iteration  18: 2835677.274 ops/s
Iteration  19: 2846261.667 ops/s
Iteration  20: 2849281.832 ops/s
Iteration  21: 2848097.976 ops/s
Iteration  22: 2850214.624 ops/s
Iteration  23: 2831400.826 ops/s
Iteration  24: 2839158.128 ops/s
Iteration  25: 2828067.305 ops/s
Iteration  26: 2839571.603 ops/s
Iteration  27: 2835832.598 ops/s
Iteration  28: 2856841.597 ops/s
Iteration  29: 2837918.548 ops/s
Iteration  30: 2833718.771 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectBoolean":
  2842728.483 ±(99.9%) 4845.379 ops/s [Average]
  (min, avg, max) = (2828067.305, 2842728.483, 2856841.597), stdev = 7252.335
  CI (99.9%): [2837883.104, 2847573.862] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectBoolean  thrpt   30  2842728.483 ± 4845.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 987663.977 ops/s
# Warmup Iteration   2: 2578819.710 ops/s
# Warmup Iteration   3: 2608411.124 ops/s
# Warmup Iteration   4: 2179332.655 ops/s
# Warmup Iteration   5: 2624869.002 ops/s
# Warmup Iteration   6: 2621920.738 ops/s
# Warmup Iteration   7: 2607353.500 ops/s
# Warmup Iteration   8: 2611093.761 ops/s
# Warmup Iteration   9: 2616560.724 ops/s
# Warmup Iteration  10: 2612115.675 ops/s
# Warmup Iteration  11: 2617145.737 ops/s
# Warmup Iteration  12: 2622211.836 ops/s
# Warmup Iteration  13: 2596878.781 ops/s
# Warmup Iteration  14: 2604709.008 ops/s
# Warmup Iteration  15: 2610784.161 ops/s
# Warmup Iteration  16: 2611954.699 ops/s
# Warmup Iteration  17: 2614658.294 ops/s
# Warmup Iteration  18: 2627184.478 ops/s
# Warmup Iteration  19: 2626657.511 ops/s
# Warmup Iteration  20: 2609479.895 ops/s
# Warmup Iteration  21: 2612671.209 ops/s
# Warmup Iteration  22: 2614100.405 ops/s
# Warmup Iteration  23: 2613502.900 ops/s
# Warmup Iteration  24: 2611164.709 ops/s
# Warmup Iteration  25: 2622910.674 ops/s
# Warmup Iteration  26: 2623525.999 ops/s
# Warmup Iteration  27: 2608629.797 ops/s
# Warmup Iteration  28: 2630921.571 ops/s
# Warmup Iteration  29: 2629506.895 ops/s
# Warmup Iteration  30: 2624868.550 ops/s
Iteration   1: 2633495.214 ops/s
Iteration   2: 2631126.350 ops/s
Iteration   3: 2618486.286 ops/s
Iteration   4: 2630822.005 ops/s
Iteration   5: 2629144.953 ops/s
Iteration   6: 2619224.186 ops/s
Iteration   7: 2611331.894 ops/s
Iteration   8: 2627909.535 ops/s
Iteration   9: 2621953.850 ops/s
Iteration  10: 2616394.390 ops/s
Iteration  11: 2627322.685 ops/s
Iteration  12: 2621929.005 ops/s
Iteration  13: 2618772.768 ops/s
Iteration  14: 2619480.113 ops/s
Iteration  15: 2623295.786 ops/s
Iteration  16: 2636237.939 ops/s
Iteration  17: 2624085.284 ops/s
Iteration  18: 2605704.806 ops/s
Iteration  19: 2617991.290 ops/s
Iteration  20: 2611673.399 ops/s
Iteration  21: 2617061.112 ops/s
Iteration  22: 2627085.497 ops/s
Iteration  23: 2622981.411 ops/s
Iteration  24: 2619106.134 ops/s
Iteration  25: 2632475.090 ops/s
Iteration  26: 2625057.894 ops/s
Iteration  27: 2626357.681 ops/s
Iteration  28: 2631317.598 ops/s
Iteration  29: 2629627.701 ops/s
Iteration  30: 2622410.468 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectByte":
  2623328.744 ±(99.9%) 4767.191 ops/s [Average]
  (min, avg, max) = (2605704.806, 2623328.744, 2636237.939), stdev = 7135.308
  CI (99.9%): [2618561.553, 2628095.935] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectByte  thrpt   30  2623328.744 ± 4767.191  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 902739.711 ops/s
# Warmup Iteration   2: 2630356.605 ops/s
# Warmup Iteration   3: 2737854.961 ops/s
# Warmup Iteration   4: 2278642.086 ops/s
# Warmup Iteration   5: 2738027.815 ops/s
# Warmup Iteration   6: 2754214.866 ops/s
# Warmup Iteration   7: 2746764.055 ops/s
# Warmup Iteration   8: 2758269.155 ops/s
# Warmup Iteration   9: 2755289.947 ops/s
# Warmup Iteration  10: 2752850.350 ops/s
# Warmup Iteration  11: 2755697.420 ops/s
# Warmup Iteration  12: 2754154.758 ops/s
# Warmup Iteration  13: 2764291.195 ops/s
# Warmup Iteration  14: 2759328.695 ops/s
# Warmup Iteration  15: 2751741.263 ops/s
# Warmup Iteration  16: 2762001.639 ops/s
# Warmup Iteration  17: 2768986.730 ops/s
# Warmup Iteration  18: 2765484.194 ops/s
# Warmup Iteration  19: 2762494.102 ops/s
# Warmup Iteration  20: 2765831.926 ops/s
# Warmup Iteration  21: 2759385.101 ops/s
# Warmup Iteration  22: 2752482.866 ops/s
# Warmup Iteration  23: 2759060.306 ops/s
# Warmup Iteration  24: 2758798.326 ops/s
# Warmup Iteration  25: 2752691.032 ops/s
# Warmup Iteration  26: 2772775.207 ops/s
# Warmup Iteration  27: 2757727.985 ops/s
# Warmup Iteration  28: 2741158.085 ops/s
# Warmup Iteration  29: 2763125.988 ops/s
# Warmup Iteration  30: 2762143.125 ops/s
Iteration   1: 2766108.300 ops/s
Iteration   2: 2769312.804 ops/s
Iteration   3: 2758214.862 ops/s
Iteration   4: 2755737.335 ops/s
Iteration   5: 2765289.992 ops/s
Iteration   6: 2769730.287 ops/s
Iteration   7: 2773752.417 ops/s
Iteration   8: 2781873.959 ops/s
Iteration   9: 2762306.551 ops/s
Iteration  10: 2753345.906 ops/s
Iteration  11: 2774218.306 ops/s
Iteration  12: 2771871.434 ops/s
Iteration  13: 2763143.178 ops/s
Iteration  14: 2760150.213 ops/s
Iteration  15: 2775003.392 ops/s
Iteration  16: 2768913.651 ops/s
Iteration  17: 2753679.418 ops/s
Iteration  18: 2763604.872 ops/s
Iteration  19: 2766214.035 ops/s
Iteration  20: 2753519.311 ops/s
Iteration  21: 2748130.840 ops/s
Iteration  22: 2731755.900 ops/s
Iteration  23: 2745960.863 ops/s
Iteration  24: 2742177.541 ops/s
Iteration  25: 2766014.153 ops/s
Iteration  26: 2757532.706 ops/s
Iteration  27: 2752915.478 ops/s
Iteration  28: 2758420.345 ops/s
Iteration  29: 2770333.781 ops/s
Iteration  30: 2763266.610 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectChar":
  2761416.615 ±(99.9%) 7214.918 ops/s [Average]
  (min, avg, max) = (2731755.900, 2761416.615, 2781873.959), stdev = 10798.951
  CI (99.9%): [2754201.696, 2768631.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectChar  thrpt   30  2761416.615 ± 7214.918  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1012842.990 ops/s
# Warmup Iteration   2: 2615239.986 ops/s
# Warmup Iteration   3: 2576390.894 ops/s
# Warmup Iteration   4: 2246205.099 ops/s
# Warmup Iteration   5: 2640962.777 ops/s
# Warmup Iteration   6: 2627561.070 ops/s
# Warmup Iteration   7: 2604283.862 ops/s
# Warmup Iteration   8: 2610873.428 ops/s
# Warmup Iteration   9: 2618556.827 ops/s
# Warmup Iteration  10: 2614120.986 ops/s
# Warmup Iteration  11: 2624370.874 ops/s
# Warmup Iteration  12: 2622587.169 ops/s
# Warmup Iteration  13: 2639091.594 ops/s
# Warmup Iteration  14: 2641575.365 ops/s
# Warmup Iteration  15: 2644377.930 ops/s
# Warmup Iteration  16: 2636699.340 ops/s
# Warmup Iteration  17: 2639613.101 ops/s
# Warmup Iteration  18: 2639972.483 ops/s
# Warmup Iteration  19: 2647003.521 ops/s
# Warmup Iteration  20: 2634934.544 ops/s
# Warmup Iteration  21: 2648831.817 ops/s
# Warmup Iteration  22: 2646609.955 ops/s
# Warmup Iteration  23: 2652552.099 ops/s
# Warmup Iteration  24: 2647349.428 ops/s
# Warmup Iteration  25: 2652724.844 ops/s
# Warmup Iteration  26: 2647775.420 ops/s
# Warmup Iteration  27: 2640334.205 ops/s
# Warmup Iteration  28: 2642464.586 ops/s
# Warmup Iteration  29: 2647072.249 ops/s
# Warmup Iteration  30: 2631092.326 ops/s
Iteration   1: 2636050.173 ops/s
Iteration   2: 2654385.792 ops/s
Iteration   3: 2641419.842 ops/s
Iteration   4: 2634832.426 ops/s
Iteration   5: 2641989.028 ops/s
Iteration   6: 2646808.171 ops/s
Iteration   7: 2629761.946 ops/s
Iteration   8: 2646388.735 ops/s
Iteration   9: 2633264.508 ops/s
Iteration  10: 2635304.373 ops/s
Iteration  11: 2639403.444 ops/s
Iteration  12: 2636883.518 ops/s
Iteration  13: 2635463.883 ops/s
Iteration  14: 2641960.340 ops/s
Iteration  15: 2645281.410 ops/s
Iteration  16: 2648513.553 ops/s
Iteration  17: 2626173.994 ops/s
Iteration  18: 2634866.151 ops/s
Iteration  19: 2621262.224 ops/s
Iteration  20: 2615855.451 ops/s
Iteration  21: 2633253.654 ops/s
Iteration  22: 2633703.659 ops/s
Iteration  23: 2621907.403 ops/s
Iteration  24: 2616186.936 ops/s
Iteration  25: 2628727.939 ops/s
Iteration  26: 2608853.420 ops/s
Iteration  27: 2606089.487 ops/s
Iteration  28: 2608152.100 ops/s
Iteration  29: 2609720.109 ops/s
Iteration  30: 2629150.418 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectDouble":
  2631387.136 ±(99.9%) 8641.186 ops/s [Average]
  (min, avg, max) = (2606089.487, 2631387.136, 2654385.792), stdev = 12933.721
  CI (99.9%): [2622745.951, 2640028.322] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectDouble  thrpt   30  2631387.136 ± 8641.186  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1062425.223 ops/s
# Warmup Iteration   2: 2743436.535 ops/s
# Warmup Iteration   3: 2733841.483 ops/s
# Warmup Iteration   4: 2337675.975 ops/s
# Warmup Iteration   5: 2767120.303 ops/s
# Warmup Iteration   6: 2774175.577 ops/s
# Warmup Iteration   7: 2776915.866 ops/s
# Warmup Iteration   8: 2774117.468 ops/s
# Warmup Iteration   9: 2776851.361 ops/s
# Warmup Iteration  10: 2768120.028 ops/s
# Warmup Iteration  11: 2757205.243 ops/s
# Warmup Iteration  12: 2763768.258 ops/s
# Warmup Iteration  13: 2772317.543 ops/s
# Warmup Iteration  14: 2770581.958 ops/s
# Warmup Iteration  15: 2752158.662 ops/s
# Warmup Iteration  16: 2757093.138 ops/s
# Warmup Iteration  17: 2775738.843 ops/s
# Warmup Iteration  18: 2766373.633 ops/s
# Warmup Iteration  19: 2777432.701 ops/s
# Warmup Iteration  20: 2774486.414 ops/s
# Warmup Iteration  21: 2777839.603 ops/s
# Warmup Iteration  22: 2763793.774 ops/s
# Warmup Iteration  23: 2780622.891 ops/s
# Warmup Iteration  24: 2780957.587 ops/s
# Warmup Iteration  25: 2759784.343 ops/s
# Warmup Iteration  26: 2767976.301 ops/s
# Warmup Iteration  27: 2764765.770 ops/s
# Warmup Iteration  28: 2766610.155 ops/s
# Warmup Iteration  29: 2746114.513 ops/s
# Warmup Iteration  30: 2767835.989 ops/s
Iteration   1: 2757747.962 ops/s
Iteration   2: 2762444.649 ops/s
Iteration   3: 2754231.414 ops/s
Iteration   4: 2750552.113 ops/s
Iteration   5: 2771000.470 ops/s
Iteration   6: 2757469.802 ops/s
Iteration   7: 2777416.096 ops/s
Iteration   8: 2760041.500 ops/s
Iteration   9: 2768542.757 ops/s
Iteration  10: 2740387.979 ops/s
Iteration  11: 2772027.299 ops/s
Iteration  12: 2745766.148 ops/s
Iteration  13: 2761296.762 ops/s
Iteration  14: 2769850.194 ops/s
Iteration  15: 2772825.781 ops/s
Iteration  16: 2771935.309 ops/s
Iteration  17: 2750465.944 ops/s
Iteration  18: 2763071.852 ops/s
Iteration  19: 2773420.959 ops/s
Iteration  20: 2776890.302 ops/s
Iteration  21: 2771046.796 ops/s
Iteration  22: 2744431.476 ops/s
Iteration  23: 2758230.193 ops/s
Iteration  24: 2781595.697 ops/s
Iteration  25: 2782354.937 ops/s
Iteration  26: 2760470.382 ops/s
Iteration  27: 2780318.724 ops/s
Iteration  28: 2774236.549 ops/s
Iteration  29: 2776465.837 ops/s
Iteration  30: 2768918.307 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectFloat":
  2765181.806 ±(99.9%) 7683.175 ops/s [Average]
  (min, avg, max) = (2740387.979, 2765181.806, 2782354.937), stdev = 11499.816
  CI (99.9%): [2757498.631, 2772864.981] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectFloat  thrpt   30  2765181.806 ± 7683.175  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 539456.477 ops/s
# Warmup Iteration   2: 1318298.810 ops/s
# Warmup Iteration   3: 1321133.661 ops/s
# Warmup Iteration   4: 1104662.688 ops/s
# Warmup Iteration   5: 1322016.801 ops/s
# Warmup Iteration   6: 1319491.303 ops/s
# Warmup Iteration   7: 1321157.300 ops/s
# Warmup Iteration   8: 1325882.872 ops/s
# Warmup Iteration   9: 1329371.047 ops/s
# Warmup Iteration  10: 1320984.468 ops/s
# Warmup Iteration  11: 1330580.532 ops/s
# Warmup Iteration  12: 1327313.024 ops/s
# Warmup Iteration  13: 1322818.400 ops/s
# Warmup Iteration  14: 1318353.237 ops/s
# Warmup Iteration  15: 1320919.648 ops/s
# Warmup Iteration  16: 1318355.230 ops/s
# Warmup Iteration  17: 1314839.640 ops/s
# Warmup Iteration  18: 1319230.115 ops/s
# Warmup Iteration  19: 1323029.101 ops/s
# Warmup Iteration  20: 1317705.603 ops/s
# Warmup Iteration  21: 1328597.877 ops/s
# Warmup Iteration  22: 1324193.787 ops/s
# Warmup Iteration  23: 1324088.372 ops/s
# Warmup Iteration  24: 1320216.268 ops/s
# Warmup Iteration  25: 1324301.103 ops/s
# Warmup Iteration  26: 1326333.324 ops/s
# Warmup Iteration  27: 1324105.482 ops/s
# Warmup Iteration  28: 1328270.335 ops/s
# Warmup Iteration  29: 1329265.815 ops/s
# Warmup Iteration  30: 1326363.718 ops/s
Iteration   1: 1330087.786 ops/s
Iteration   2: 1329498.428 ops/s
Iteration   3: 1326074.073 ops/s
Iteration   4: 1324502.494 ops/s
Iteration   5: 1325072.119 ops/s
Iteration   6: 1319891.864 ops/s
Iteration   7: 1323148.823 ops/s
Iteration   8: 1321311.234 ops/s
Iteration   9: 1331076.957 ops/s
Iteration  10: 1329516.746 ops/s
Iteration  11: 1324202.526 ops/s
Iteration  12: 1310935.210 ops/s
Iteration  13: 1319774.594 ops/s
Iteration  14: 1323922.998 ops/s
Iteration  15: 1323029.895 ops/s
Iteration  16: 1327280.637 ops/s
Iteration  17: 1315911.299 ops/s
Iteration  18: 1324669.264 ops/s
Iteration  19: 1320981.033 ops/s
Iteration  20: 1314458.638 ops/s
Iteration  21: 1320709.683 ops/s
Iteration  22: 1320920.619 ops/s
Iteration  23: 1323280.166 ops/s
Iteration  24: 1321339.707 ops/s
Iteration  25: 1325165.997 ops/s
Iteration  26: 1322541.375 ops/s
Iteration  27: 1321482.946 ops/s
Iteration  28: 1325555.959 ops/s
Iteration  29: 1323063.084 ops/s
Iteration  30: 1327668.635 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectIf":
  1323235.826 ±(99.9%) 2992.092 ops/s [Average]
  (min, avg, max) = (1310935.210, 1323235.826, 1331076.957), stdev = 4478.423
  CI (99.9%): [1320243.734, 1326227.919] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectIf  thrpt   30  1323235.826 ± 2992.092  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1009632.313 ops/s
# Warmup Iteration   2: 2621882.813 ops/s
# Warmup Iteration   3: 2632495.099 ops/s
# Warmup Iteration   4: 2192330.647 ops/s
# Warmup Iteration   5: 2629043.138 ops/s
# Warmup Iteration   6: 2659035.898 ops/s
# Warmup Iteration   7: 2644197.974 ops/s
# Warmup Iteration   8: 2626714.967 ops/s
# Warmup Iteration   9: 2637336.656 ops/s
# Warmup Iteration  10: 2636649.353 ops/s
# Warmup Iteration  11: 2628175.683 ops/s
# Warmup Iteration  12: 2635782.976 ops/s
# Warmup Iteration  13: 2634702.204 ops/s
# Warmup Iteration  14: 2632183.721 ops/s
# Warmup Iteration  15: 2628480.242 ops/s
# Warmup Iteration  16: 2627584.084 ops/s
# Warmup Iteration  17: 2636284.730 ops/s
# Warmup Iteration  18: 2635049.881 ops/s
# Warmup Iteration  19: 2632781.464 ops/s
# Warmup Iteration  20: 2638736.169 ops/s
# Warmup Iteration  21: 2640199.079 ops/s
# Warmup Iteration  22: 2644020.506 ops/s
# Warmup Iteration  23: 2644202.426 ops/s
# Warmup Iteration  24: 2637857.427 ops/s
# Warmup Iteration  25: 2642362.706 ops/s
# Warmup Iteration  26: 2640378.727 ops/s
# Warmup Iteration  27: 2643467.627 ops/s
# Warmup Iteration  28: 2643343.273 ops/s
# Warmup Iteration  29: 2640566.092 ops/s
# Warmup Iteration  30: 2653648.042 ops/s
Iteration   1: 2643079.741 ops/s
Iteration   2: 2648773.049 ops/s
Iteration   3: 2644905.202 ops/s
Iteration   4: 2637007.853 ops/s
Iteration   5: 2655401.332 ops/s
Iteration   6: 2648755.248 ops/s
Iteration   7: 2655898.442 ops/s
Iteration   8: 2649281.823 ops/s
Iteration   9: 2629739.428 ops/s
Iteration  10: 2625687.825 ops/s
Iteration  11: 2632791.051 ops/s
Iteration  12: 2638690.969 ops/s
Iteration  13: 2648341.138 ops/s
Iteration  14: 2647344.405 ops/s
Iteration  15: 2640962.611 ops/s
Iteration  16: 2628895.821 ops/s
Iteration  17: 2638648.744 ops/s
Iteration  18: 2630222.383 ops/s
Iteration  19: 2632508.823 ops/s
Iteration  20: 2647882.579 ops/s
Iteration  21: 2637158.779 ops/s
Iteration  22: 2635936.985 ops/s
Iteration  23: 2634833.402 ops/s
Iteration  24: 2634348.762 ops/s
Iteration  25: 2653496.027 ops/s
Iteration  26: 2641617.583 ops/s
Iteration  27: 2639161.602 ops/s
Iteration  28: 2649433.262 ops/s
Iteration  29: 2646660.371 ops/s
Iteration  30: 2631353.086 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectInt":
  2640960.611 ±(99.9%) 5615.335 ops/s [Average]
  (min, avg, max) = (2625687.825, 2640960.611, 2655898.442), stdev = 8404.769
  CI (99.9%): [2635345.276, 2646575.945] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectInt  thrpt   30  2640960.611 ± 5615.335  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1019005.165 ops/s
# Warmup Iteration   2: 2636787.006 ops/s
# Warmup Iteration   3: 2566080.953 ops/s
# Warmup Iteration   4: 2285959.664 ops/s
# Warmup Iteration   5: 2647307.241 ops/s
# Warmup Iteration   6: 2630463.613 ops/s
# Warmup Iteration   7: 2635000.915 ops/s
# Warmup Iteration   8: 2635456.974 ops/s
# Warmup Iteration   9: 2652345.132 ops/s
# Warmup Iteration  10: 2634064.611 ops/s
# Warmup Iteration  11: 2646375.774 ops/s
# Warmup Iteration  12: 2640862.224 ops/s
# Warmup Iteration  13: 2637743.429 ops/s
# Warmup Iteration  14: 2625680.322 ops/s
# Warmup Iteration  15: 2646667.975 ops/s
# Warmup Iteration  16: 2646826.829 ops/s
# Warmup Iteration  17: 2640554.742 ops/s
# Warmup Iteration  18: 2635451.726 ops/s
# Warmup Iteration  19: 2641374.731 ops/s
# Warmup Iteration  20: 2645643.043 ops/s
# Warmup Iteration  21: 2649837.062 ops/s
# Warmup Iteration  22: 2655047.741 ops/s
# Warmup Iteration  23: 2640770.768 ops/s
# Warmup Iteration  24: 2636690.508 ops/s
# Warmup Iteration  25: 2646451.821 ops/s
# Warmup Iteration  26: 2641025.508 ops/s
# Warmup Iteration  27: 2626404.550 ops/s
# Warmup Iteration  28: 2639944.904 ops/s
# Warmup Iteration  29: 2646947.157 ops/s
# Warmup Iteration  30: 2630425.641 ops/s
Iteration   1: 2642235.749 ops/s
Iteration   2: 2646256.461 ops/s
Iteration   3: 2638149.075 ops/s
Iteration   4: 2655532.437 ops/s
Iteration   5: 2629113.726 ops/s
Iteration   6: 2638497.285 ops/s
Iteration   7: 2633137.199 ops/s
Iteration   8: 2644895.630 ops/s
Iteration   9: 2646955.607 ops/s
Iteration  10: 2653390.300 ops/s
Iteration  11: 2652971.624 ops/s
Iteration  12: 2650530.338 ops/s
Iteration  13: 2638696.071 ops/s
Iteration  14: 2644869.338 ops/s
Iteration  15: 2639702.755 ops/s
Iteration  16: 2645870.652 ops/s
Iteration  17: 2656368.066 ops/s
Iteration  18: 2652251.926 ops/s
Iteration  19: 2647843.291 ops/s
Iteration  20: 2645127.314 ops/s
Iteration  21: 2641322.755 ops/s
Iteration  22: 2643269.928 ops/s
Iteration  23: 2646379.597 ops/s
Iteration  24: 2641966.668 ops/s
Iteration  25: 2650490.082 ops/s
Iteration  26: 2646382.293 ops/s
Iteration  27: 2637241.699 ops/s
Iteration  28: 2644267.091 ops/s
Iteration  29: 2645429.497 ops/s
Iteration  30: 2654082.996 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectLong":
  2645107.582 ±(99.9%) 4354.809 ops/s [Average]
  (min, avg, max) = (2629113.726, 2645107.582, 2656368.066), stdev = 6518.074
  CI (99.9%): [2640752.773, 2649462.391] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectLong  thrpt   30  2645107.582 ± 4354.809  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1043066.459 ops/s
# Warmup Iteration   2: 2709168.852 ops/s
# Warmup Iteration   3: 2723696.327 ops/s
# Warmup Iteration   4: 2265318.163 ops/s
# Warmup Iteration   5: 2725142.870 ops/s
# Warmup Iteration   6: 2734605.978 ops/s
# Warmup Iteration   7: 2737728.036 ops/s
# Warmup Iteration   8: 2721856.060 ops/s
# Warmup Iteration   9: 2720812.467 ops/s
# Warmup Iteration  10: 2731647.411 ops/s
# Warmup Iteration  11: 2728293.148 ops/s
# Warmup Iteration  12: 2721387.206 ops/s
# Warmup Iteration  13: 2722750.597 ops/s
# Warmup Iteration  14: 2735386.181 ops/s
# Warmup Iteration  15: 2728508.021 ops/s
# Warmup Iteration  16: 2740031.779 ops/s
# Warmup Iteration  17: 2733847.522 ops/s
# Warmup Iteration  18: 2734120.055 ops/s
# Warmup Iteration  19: 2724311.469 ops/s
# Warmup Iteration  20: 2734516.310 ops/s
# Warmup Iteration  21: 2738334.594 ops/s
# Warmup Iteration  22: 2725937.610 ops/s
# Warmup Iteration  23: 2731002.819 ops/s
# Warmup Iteration  24: 2733438.831 ops/s
# Warmup Iteration  25: 2739153.971 ops/s
# Warmup Iteration  26: 2733336.841 ops/s
# Warmup Iteration  27: 2738149.033 ops/s
# Warmup Iteration  28: 2732905.694 ops/s
# Warmup Iteration  29: 2726622.171 ops/s
# Warmup Iteration  30: 2738948.585 ops/s
Iteration   1: 2739493.964 ops/s
Iteration   2: 2733386.148 ops/s
Iteration   3: 2730143.471 ops/s
Iteration   4: 2736627.248 ops/s
Iteration   5: 2723351.794 ops/s
Iteration   6: 2736537.651 ops/s
Iteration   7: 2739665.692 ops/s
Iteration   8: 2747596.412 ops/s
Iteration   9: 2734489.719 ops/s
Iteration  10: 2739054.273 ops/s
Iteration  11: 2737384.683 ops/s
Iteration  12: 2729848.728 ops/s
Iteration  13: 2738103.179 ops/s
Iteration  14: 2733077.090 ops/s
Iteration  15: 2731255.015 ops/s
Iteration  16: 2716580.851 ops/s
Iteration  17: 2739584.128 ops/s
Iteration  18: 2733691.938 ops/s
Iteration  19: 2730117.313 ops/s
Iteration  20: 2737980.133 ops/s
Iteration  21: 2735627.831 ops/s
Iteration  22: 2737770.230 ops/s
Iteration  23: 2731843.176 ops/s
Iteration  24: 2718945.006 ops/s
Iteration  25: 2739465.849 ops/s
Iteration  26: 2738028.155 ops/s
Iteration  27: 2735246.720 ops/s
Iteration  28: 2732697.299 ops/s
Iteration  29: 2742195.371 ops/s
Iteration  30: 2730408.464 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectShort":
  2734339.918 ±(99.9%) 4313.054 ops/s [Average]
  (min, avg, max) = (2716580.851, 2734339.918, 2747596.412), stdev = 6455.576
  CI (99.9%): [2730026.864, 2738652.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectShort  thrpt   30  2734339.918 ± 4313.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 478683.784 ops/s
# Warmup Iteration   2: 1094182.562 ops/s
# Warmup Iteration   3: 1125742.938 ops/s
# Warmup Iteration   4: 949417.835 ops/s
# Warmup Iteration   5: 1134127.033 ops/s
# Warmup Iteration   6: 1131528.750 ops/s
# Warmup Iteration   7: 1127736.675 ops/s
# Warmup Iteration   8: 1137451.206 ops/s
# Warmup Iteration   9: 1130249.857 ops/s
# Warmup Iteration  10: 1124534.901 ops/s
# Warmup Iteration  11: 1133135.736 ops/s
# Warmup Iteration  12: 1133723.513 ops/s
# Warmup Iteration  13: 1133357.449 ops/s
# Warmup Iteration  14: 1131761.568 ops/s
# Warmup Iteration  15: 1135548.885 ops/s
# Warmup Iteration  16: 1132660.572 ops/s
# Warmup Iteration  17: 1121466.525 ops/s
# Warmup Iteration  18: 1129918.471 ops/s
# Warmup Iteration  19: 1127129.998 ops/s
# Warmup Iteration  20: 1126928.200 ops/s
# Warmup Iteration  21: 1136519.006 ops/s
# Warmup Iteration  22: 1129586.895 ops/s
# Warmup Iteration  23: 1131375.995 ops/s
# Warmup Iteration  24: 1132385.838 ops/s
# Warmup Iteration  25: 1129923.920 ops/s
# Warmup Iteration  26: 1133156.276 ops/s
# Warmup Iteration  27: 1128080.281 ops/s
# Warmup Iteration  28: 1132107.016 ops/s
# Warmup Iteration  29: 1134783.066 ops/s
# Warmup Iteration  30: 1131221.009 ops/s
Iteration   1: 1132425.657 ops/s
Iteration   2: 1137714.867 ops/s
Iteration   3: 1135621.377 ops/s
Iteration   4: 1129669.956 ops/s
Iteration   5: 1135093.994 ops/s
Iteration   6: 1133582.297 ops/s
Iteration   7: 1133075.682 ops/s
Iteration   8: 1121480.567 ops/s
Iteration   9: 1133865.504 ops/s
Iteration  10: 1140281.134 ops/s
Iteration  11: 1136889.968 ops/s
Iteration  12: 1137209.449 ops/s
Iteration  13: 1122287.537 ops/s
Iteration  14: 1122443.103 ops/s
Iteration  15: 1131278.461 ops/s
Iteration  16: 1130996.794 ops/s
Iteration  17: 1127177.579 ops/s
Iteration  18: 1131384.602 ops/s
Iteration  19: 1136683.337 ops/s
Iteration  20: 1127277.467 ops/s
Iteration  21: 1127466.815 ops/s
Iteration  22: 1130438.805 ops/s
Iteration  23: 1133077.124 ops/s
Iteration  24: 1135885.365 ops/s
Iteration  25: 1132575.475 ops/s
Iteration  26: 1132600.919 ops/s
Iteration  27: 1133756.494 ops/s
Iteration  28: 1120930.695 ops/s
Iteration  29: 1127395.062 ops/s
Iteration  30: 1126472.126 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectWith":
  1131234.607 ±(99.9%) 3404.881 ops/s [Average]
  (min, avg, max) = (1120930.695, 1131234.607, 1140281.134), stdev = 5096.266
  CI (99.9%): [1127829.726, 1134639.488] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_collectWith  thrpt   30  1131234.607 ± 3404.881  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 685145.308 ops/s
# Warmup Iteration   2: 1705775.629 ops/s
# Warmup Iteration   3: 1809872.380 ops/s
# Warmup Iteration   4: 1490753.293 ops/s
# Warmup Iteration   5: 1811804.860 ops/s
# Warmup Iteration   6: 1810612.301 ops/s
# Warmup Iteration   7: 1809076.085 ops/s
# Warmup Iteration   8: 1813934.537 ops/s
# Warmup Iteration   9: 1810411.305 ops/s
# Warmup Iteration  10: 1816962.629 ops/s
# Warmup Iteration  11: 1818748.880 ops/s
# Warmup Iteration  12: 1802499.732 ops/s
# Warmup Iteration  13: 1815844.554 ops/s
# Warmup Iteration  14: 1815900.008 ops/s
# Warmup Iteration  15: 1808281.455 ops/s
# Warmup Iteration  16: 1812463.876 ops/s
# Warmup Iteration  17: 1811099.601 ops/s
# Warmup Iteration  18: 1815127.194 ops/s
# Warmup Iteration  19: 1815587.987 ops/s
# Warmup Iteration  20: 1819982.450 ops/s
# Warmup Iteration  21: 1815831.150 ops/s
# Warmup Iteration  22: 1814474.192 ops/s
# Warmup Iteration  23: 1814332.626 ops/s
# Warmup Iteration  24: 1817034.783 ops/s
# Warmup Iteration  25: 1818307.658 ops/s
# Warmup Iteration  26: 1815221.278 ops/s
# Warmup Iteration  27: 1821887.349 ops/s
# Warmup Iteration  28: 1826842.561 ops/s
# Warmup Iteration  29: 1817311.304 ops/s
# Warmup Iteration  30: 1822976.880 ops/s
Iteration   1: 1818133.995 ops/s
Iteration   2: 1825934.063 ops/s
Iteration   3: 1812360.145 ops/s
Iteration   4: 1819023.343 ops/s
Iteration   5: 1818066.012 ops/s
Iteration   6: 1816856.548 ops/s
Iteration   7: 1815440.343 ops/s
Iteration   8: 1820584.624 ops/s
Iteration   9: 1814764.153 ops/s
Iteration  10: 1811221.872 ops/s
Iteration  11: 1811954.216 ops/s
Iteration  12: 1817912.885 ops/s
Iteration  13: 1820651.373 ops/s
Iteration  14: 1818987.277 ops/s
Iteration  15: 1815277.581 ops/s
Iteration  16: 1812134.916 ops/s
Iteration  17: 1810086.012 ops/s
Iteration  18: 1817411.282 ops/s
Iteration  19: 1818531.660 ops/s
Iteration  20: 1812864.584 ops/s
Iteration  21: 1817519.601 ops/s
Iteration  22: 1810182.910 ops/s
Iteration  23: 1811489.892 ops/s
Iteration  24: 1817730.692 ops/s
Iteration  25: 1810944.562 ops/s
Iteration  26: 1821704.088 ops/s
Iteration  27: 1815208.764 ops/s
Iteration  28: 1817205.027 ops/s
Iteration  29: 1817644.092 ops/s
Iteration  30: 1813042.640 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_flatCollect":
  1816028.972 ±(99.9%) 2562.650 ops/s [Average]
  (min, avg, max) = (1810086.012, 1816028.972, 1825934.063), stdev = 3835.655
  CI (99.9%): [1813466.321, 1818591.622] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_flatCollect  thrpt   30  1816028.972 ± 2562.650  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_groupBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_groupBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785828.251 ops/s
# Warmup Iteration   2: 1798421.544 ops/s
# Warmup Iteration   3: 1880512.002 ops/s
# Warmup Iteration   4: 1758047.635 ops/s
# Warmup Iteration   5: 1706967.010 ops/s
# Warmup Iteration   6: 1897127.291 ops/s
# Warmup Iteration   7: 1896433.684 ops/s
# Warmup Iteration   8: 1894605.621 ops/s
# Warmup Iteration   9: 1894868.995 ops/s
# Warmup Iteration  10: 1898860.653 ops/s
# Warmup Iteration  11: 1897117.323 ops/s
# Warmup Iteration  12: 1901741.830 ops/s
# Warmup Iteration  13: 1894649.483 ops/s
# Warmup Iteration  14: 1891166.920 ops/s
# Warmup Iteration  15: 1898102.003 ops/s
# Warmup Iteration  16: 1901823.089 ops/s
# Warmup Iteration  17: 1898204.886 ops/s
# Warmup Iteration  18: 1898613.872 ops/s
# Warmup Iteration  19: 1904520.763 ops/s
# Warmup Iteration  20: 1895456.485 ops/s
# Warmup Iteration  21: 1902291.951 ops/s
# Warmup Iteration  22: 1900998.314 ops/s
# Warmup Iteration  23: 1900949.136 ops/s
# Warmup Iteration  24: 1899681.464 ops/s
# Warmup Iteration  25: 1907718.951 ops/s
# Warmup Iteration  26: 1908516.445 ops/s
# Warmup Iteration  27: 1903118.142 ops/s
# Warmup Iteration  28: 1902657.767 ops/s
# Warmup Iteration  29: 1900745.403 ops/s
# Warmup Iteration  30: 1903489.542 ops/s
Iteration   1: 1909047.978 ops/s
Iteration   2: 1900605.432 ops/s
Iteration   3: 1901522.778 ops/s
Iteration   4: 1898790.532 ops/s
Iteration   5: 1898977.542 ops/s
Iteration   6: 1901680.948 ops/s
Iteration   7: 1895336.498 ops/s
Iteration   8: 1903456.431 ops/s
Iteration   9: 1902926.716 ops/s
Iteration  10: 1906226.433 ops/s
Iteration  11: 1904366.432 ops/s
Iteration  12: 1901607.838 ops/s
Iteration  13: 1902246.007 ops/s
Iteration  14: 1898620.028 ops/s
Iteration  15: 1902131.919 ops/s
Iteration  16: 1903061.419 ops/s
Iteration  17: 1906148.061 ops/s
Iteration  18: 1901210.260 ops/s
Iteration  19: 1895319.893 ops/s
Iteration  20: 1898010.718 ops/s
Iteration  21: 1903180.067 ops/s
Iteration  22: 1907095.541 ops/s
Iteration  23: 1902915.358 ops/s
Iteration  24: 1903115.457 ops/s
Iteration  25: 1904838.845 ops/s
Iteration  26: 1900234.258 ops/s
Iteration  27: 1895116.887 ops/s
Iteration  28: 1905178.313 ops/s
Iteration  29: 1903519.497 ops/s
Iteration  30: 1900520.614 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_groupBy":
  1901900.290 ±(99.9%) 2273.055 ops/s [Average]
  (min, avg, max) = (1895116.887, 1901900.290, 1909047.978), stdev = 3402.202
  CI (99.9%): [1899627.235, 1904173.345] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_groupBy  thrpt   30  1901900.290 ± 2273.055  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 588711.996 ops/s
# Warmup Iteration   2: 666447.664 ops/s
# Warmup Iteration   3: 887749.947 ops/s
# Warmup Iteration   4: 887418.908 ops/s
# Warmup Iteration   5: 880009.325 ops/s
# Warmup Iteration   6: 890211.415 ops/s
# Warmup Iteration   7: 889477.844 ops/s
# Warmup Iteration   8: 885156.176 ops/s
# Warmup Iteration   9: 883393.369 ops/s
# Warmup Iteration  10: 783553.394 ops/s
# Warmup Iteration  11: 838164.071 ops/s
# Warmup Iteration  12: 885310.772 ops/s
# Warmup Iteration  13: 887398.618 ops/s
# Warmup Iteration  14: 885068.545 ops/s
# Warmup Iteration  15: 887026.538 ops/s
# Warmup Iteration  16: 885493.081 ops/s
# Warmup Iteration  17: 937428.377 ops/s
# Warmup Iteration  18: 936156.302 ops/s
# Warmup Iteration  19: 936448.994 ops/s
# Warmup Iteration  20: 939179.916 ops/s
# Warmup Iteration  21: 935567.037 ops/s
# Warmup Iteration  22: 931529.000 ops/s
# Warmup Iteration  23: 936697.937 ops/s
# Warmup Iteration  24: 937282.637 ops/s
# Warmup Iteration  25: 939172.533 ops/s
# Warmup Iteration  26: 937489.014 ops/s
# Warmup Iteration  27: 936365.151 ops/s
# Warmup Iteration  28: 938549.067 ops/s
# Warmup Iteration  29: 933796.903 ops/s
# Warmup Iteration  30: 934400.422 ops/s
Iteration   1: 935135.825 ops/s
Iteration   2: 937802.297 ops/s
Iteration   3: 942309.866 ops/s
Iteration   4: 936614.183 ops/s
Iteration   5: 940725.594 ops/s
Iteration   6: 937495.978 ops/s
Iteration   7: 935720.814 ops/s
Iteration   8: 939516.991 ops/s
Iteration   9: 937155.873 ops/s
Iteration  10: 931429.007 ops/s
Iteration  11: 938429.947 ops/s
Iteration  12: 934231.651 ops/s
Iteration  13: 938241.311 ops/s
Iteration  14: 935555.862 ops/s
Iteration  15: 940111.168 ops/s
Iteration  16: 937808.013 ops/s
Iteration  17: 934856.755 ops/s
Iteration  18: 939052.764 ops/s
Iteration  19: 940782.605 ops/s
Iteration  20: 937356.044 ops/s
Iteration  21: 939405.684 ops/s
Iteration  22: 942758.727 ops/s
Iteration  23: 938612.442 ops/s
Iteration  24: 939244.948 ops/s
Iteration  25: 938048.918 ops/s
Iteration  26: 941307.468 ops/s
Iteration  27: 935166.703 ops/s
Iteration  28: 940704.438 ops/s
Iteration  29: 938760.461 ops/s
Iteration  30: 940877.668 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove":
  938174.000 ±(99.9%) 1721.987 ops/s [Average]
  (min, avg, max) = (931429.007, 938174.000, 942758.727), stdev = 2577.390
  CI (99.9%): [936452.013, 939895.987] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_iteratorRemove  thrpt   30  938174.000 ± 1721.987  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_newEmpty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_newEmpty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 785202.984 ops/s
# Warmup Iteration   2: 2083979.611 ops/s
# Warmup Iteration   3: 2122860.037 ops/s
# Warmup Iteration   4: 1765598.101 ops/s
# Warmup Iteration   5: 2119859.359 ops/s
# Warmup Iteration   6: 2125865.568 ops/s
# Warmup Iteration   7: 2113639.066 ops/s
# Warmup Iteration   8: 2126484.219 ops/s
# Warmup Iteration   9: 2121142.650 ops/s
# Warmup Iteration  10: 2114696.323 ops/s
# Warmup Iteration  11: 2123040.853 ops/s
# Warmup Iteration  12: 2118064.488 ops/s
# Warmup Iteration  13: 2121668.444 ops/s
# Warmup Iteration  14: 2122126.119 ops/s
# Warmup Iteration  15: 2123504.082 ops/s
# Warmup Iteration  16: 2125356.365 ops/s
# Warmup Iteration  17: 2118813.338 ops/s
# Warmup Iteration  18: 2125515.695 ops/s
# Warmup Iteration  19: 2134830.217 ops/s
# Warmup Iteration  20: 2125826.330 ops/s
# Warmup Iteration  21: 2125710.681 ops/s
# Warmup Iteration  22: 2135263.585 ops/s
# Warmup Iteration  23: 2125841.907 ops/s
# Warmup Iteration  24: 2123391.614 ops/s
# Warmup Iteration  25: 2133275.281 ops/s
# Warmup Iteration  26: 2132602.067 ops/s
# Warmup Iteration  27: 2124190.206 ops/s
# Warmup Iteration  28: 2128373.377 ops/s
# Warmup Iteration  29: 2126350.699 ops/s
# Warmup Iteration  30: 2124834.382 ops/s
Iteration   1: 2120598.562 ops/s
Iteration   2: 2125137.379 ops/s
Iteration   3: 2128575.513 ops/s
Iteration   4: 2130341.783 ops/s
Iteration   5: 2130318.760 ops/s
Iteration   6: 2126819.509 ops/s
Iteration   7: 2114713.232 ops/s
Iteration   8: 2132104.445 ops/s
Iteration   9: 2127463.119 ops/s
Iteration  10: 2126363.304 ops/s
Iteration  11: 2131679.651 ops/s
Iteration  12: 2128335.525 ops/s
Iteration  13: 2129646.656 ops/s
Iteration  14: 2123942.323 ops/s
Iteration  15: 2125465.842 ops/s
Iteration  16: 2128902.820 ops/s
Iteration  17: 2137883.901 ops/s
Iteration  18: 2125709.259 ops/s
Iteration  19: 2134155.408 ops/s
Iteration  20: 2125498.477 ops/s
Iteration  21: 2128315.617 ops/s
Iteration  22: 2131227.919 ops/s
Iteration  23: 2129054.647 ops/s
Iteration  24: 2137368.469 ops/s
Iteration  25: 2137128.192 ops/s
Iteration  26: 2132450.860 ops/s
Iteration  27: 2121949.168 ops/s
Iteration  28: 2123484.629 ops/s
Iteration  29: 2136726.191 ops/s
Iteration  30: 2134877.903 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_newEmpty":
  2128874.635 ±(99.9%) 3550.747 ops/s [Average]
  (min, avg, max) = (2114713.232, 2128874.635, 2137883.901), stdev = 5314.591
  CI (99.9%): [2125323.889, 2132425.382] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_newEmpty  thrpt   30  2128874.635 ± 3550.747  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partition$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partition

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 628208.588 ops/s
# Warmup Iteration   2: 1530429.190 ops/s
# Warmup Iteration   3: 1560576.748 ops/s
# Warmup Iteration   4: 1294673.620 ops/s
# Warmup Iteration   5: 1555328.168 ops/s
# Warmup Iteration   6: 1557759.313 ops/s
# Warmup Iteration   7: 1552199.018 ops/s
# Warmup Iteration   8: 1557670.433 ops/s
# Warmup Iteration   9: 1561541.075 ops/s
# Warmup Iteration  10: 1561425.342 ops/s
# Warmup Iteration  11: 1562645.031 ops/s
# Warmup Iteration  12: 1552807.705 ops/s
# Warmup Iteration  13: 1559416.930 ops/s
# Warmup Iteration  14: 1553661.136 ops/s
# Warmup Iteration  15: 1554579.835 ops/s
# Warmup Iteration  16: 1561725.412 ops/s
# Warmup Iteration  17: 1582220.806 ops/s
# Warmup Iteration  18: 1581932.505 ops/s
# Warmup Iteration  19: 1585675.567 ops/s
# Warmup Iteration  20: 1588205.193 ops/s
# Warmup Iteration  21: 1585454.979 ops/s
# Warmup Iteration  22: 1579722.741 ops/s
# Warmup Iteration  23: 1584959.201 ops/s
# Warmup Iteration  24: 1587842.287 ops/s
# Warmup Iteration  25: 1587896.673 ops/s
# Warmup Iteration  26: 1586495.573 ops/s
# Warmup Iteration  27: 1586720.213 ops/s
# Warmup Iteration  28: 1586848.581 ops/s
# Warmup Iteration  29: 1592184.287 ops/s
# Warmup Iteration  30: 1586006.746 ops/s
Iteration   1: 1587490.951 ops/s
Iteration   2: 1583675.817 ops/s
Iteration   3: 1589203.959 ops/s
Iteration   4: 1587147.442 ops/s
Iteration   5: 1595384.790 ops/s
Iteration   6: 1589264.084 ops/s
Iteration   7: 1591741.437 ops/s
Iteration   8: 1589865.368 ops/s
Iteration   9: 1588712.948 ops/s
Iteration  10: 1588574.683 ops/s
Iteration  11: 1584722.912 ops/s
Iteration  12: 1591843.777 ops/s
Iteration  13: 1582724.802 ops/s
Iteration  14: 1586932.836 ops/s
Iteration  15: 1585933.134 ops/s
Iteration  16: 1585190.823 ops/s
Iteration  17: 1582348.234 ops/s
Iteration  18: 1589410.673 ops/s
Iteration  19: 1588617.395 ops/s
Iteration  20: 1588798.896 ops/s
Iteration  21: 1589009.971 ops/s
Iteration  22: 1591900.741 ops/s
Iteration  23: 1587841.974 ops/s
Iteration  24: 1590840.773 ops/s
Iteration  25: 1586881.116 ops/s
Iteration  26: 1583912.473 ops/s
Iteration  27: 1589946.684 ops/s
Iteration  28: 1590118.715 ops/s
Iteration  29: 1583082.264 ops/s
Iteration  30: 1586342.854 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partition":
  1587915.418 ±(99.9%) 2055.387 ops/s [Average]
  (min, avg, max) = (1582348.234, 1587915.418, 1595384.790), stdev = 3076.407
  CI (99.9%): [1585860.031, 1589970.805] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partition  thrpt   30  1587915.418 ± 2055.387  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partitionWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partitionWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 625535.355 ops/s
# Warmup Iteration   2: 1540135.609 ops/s
# Warmup Iteration   3: 1561123.607 ops/s
# Warmup Iteration   4: 1296503.290 ops/s
# Warmup Iteration   5: 1568718.515 ops/s
# Warmup Iteration   6: 1567311.164 ops/s
# Warmup Iteration   7: 1563357.916 ops/s
# Warmup Iteration   8: 1564509.739 ops/s
# Warmup Iteration   9: 1565415.596 ops/s
# Warmup Iteration  10: 1561665.313 ops/s
# Warmup Iteration  11: 1562821.635 ops/s
# Warmup Iteration  12: 1561010.173 ops/s
# Warmup Iteration  13: 1563188.457 ops/s
# Warmup Iteration  14: 1556032.142 ops/s
# Warmup Iteration  15: 1564326.963 ops/s
# Warmup Iteration  16: 1558390.049 ops/s
# Warmup Iteration  17: 1595189.581 ops/s
# Warmup Iteration  18: 1597645.074 ops/s
# Warmup Iteration  19: 1594450.420 ops/s
# Warmup Iteration  20: 1585714.534 ops/s
# Warmup Iteration  21: 1594652.430 ops/s
# Warmup Iteration  22: 1593690.569 ops/s
# Warmup Iteration  23: 1593921.694 ops/s
# Warmup Iteration  24: 1593580.986 ops/s
# Warmup Iteration  25: 1595279.169 ops/s
# Warmup Iteration  26: 1588888.339 ops/s
# Warmup Iteration  27: 1587098.631 ops/s
# Warmup Iteration  28: 1591516.476 ops/s
# Warmup Iteration  29: 1589569.874 ops/s
# Warmup Iteration  30: 1580581.827 ops/s
Iteration   1: 1591072.112 ops/s
Iteration   2: 1586618.506 ops/s
Iteration   3: 1583805.628 ops/s
Iteration   4: 1587123.816 ops/s
Iteration   5: 1597221.064 ops/s
Iteration   6: 1594041.485 ops/s
Iteration   7: 1586837.476 ops/s
Iteration   8: 1593028.354 ops/s
Iteration   9: 1592331.840 ops/s
Iteration  10: 1594397.747 ops/s
Iteration  11: 1586237.328 ops/s
Iteration  12: 1583554.666 ops/s
Iteration  13: 1583159.220 ops/s
Iteration  14: 1582351.891 ops/s
Iteration  15: 1590508.918 ops/s
Iteration  16: 1590049.705 ops/s
Iteration  17: 1585203.130 ops/s
Iteration  18: 1583205.770 ops/s
Iteration  19: 1589619.339 ops/s
Iteration  20: 1578515.136 ops/s
Iteration  21: 1583148.920 ops/s
Iteration  22: 1590720.308 ops/s
Iteration  23: 1590996.531 ops/s
Iteration  24: 1587718.173 ops/s
Iteration  25: 1591654.815 ops/s
Iteration  26: 1595461.116 ops/s
Iteration  27: 1588480.566 ops/s
Iteration  28: 1588057.255 ops/s
Iteration  29: 1587281.904 ops/s
Iteration  30: 1594765.929 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partitionWith":
  1588572.288 ±(99.9%) 3027.239 ops/s [Average]
  (min, avg, max) = (1578515.136, 1588572.288, 1597221.064), stdev = 4531.029
  CI (99.9%): [1585545.050, 1591599.527] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_partitionWith  thrpt   30  1588572.288 ± 3027.239  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_reject$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_reject

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 552448.852 ops/s
# Warmup Iteration   2: 1325227.417 ops/s
# Warmup Iteration   3: 1335339.676 ops/s
# Warmup Iteration   4: 1117332.133 ops/s
# Warmup Iteration   5: 1330158.860 ops/s
# Warmup Iteration   6: 1329283.518 ops/s
# Warmup Iteration   7: 1331222.335 ops/s
# Warmup Iteration   8: 1330271.943 ops/s
# Warmup Iteration   9: 1332532.762 ops/s
# Warmup Iteration  10: 1332429.835 ops/s
# Warmup Iteration  11: 1328581.295 ops/s
# Warmup Iteration  12: 1329973.267 ops/s
# Warmup Iteration  13: 1336398.316 ops/s
# Warmup Iteration  14: 1335058.499 ops/s
# Warmup Iteration  15: 1328942.549 ops/s
# Warmup Iteration  16: 1336084.057 ops/s
# Warmup Iteration  17: 1332621.071 ops/s
# Warmup Iteration  18: 1330897.336 ops/s
# Warmup Iteration  19: 1325820.460 ops/s
# Warmup Iteration  20: 1326838.116 ops/s
# Warmup Iteration  21: 1334016.822 ops/s
# Warmup Iteration  22: 1327999.499 ops/s
# Warmup Iteration  23: 1338360.225 ops/s
# Warmup Iteration  24: 1329090.543 ops/s
# Warmup Iteration  25: 1325996.761 ops/s
# Warmup Iteration  26: 1334277.024 ops/s
# Warmup Iteration  27: 1335882.538 ops/s
# Warmup Iteration  28: 1338671.026 ops/s
# Warmup Iteration  29: 1330651.469 ops/s
# Warmup Iteration  30: 1333293.199 ops/s
Iteration   1: 1340238.117 ops/s
Iteration   2: 1334312.392 ops/s
Iteration   3: 1331647.564 ops/s
Iteration   4: 1329358.402 ops/s
Iteration   5: 1338722.708 ops/s
Iteration   6: 1336340.394 ops/s
Iteration   7: 1335505.780 ops/s
Iteration   8: 1334251.089 ops/s
Iteration   9: 1331842.476 ops/s
Iteration  10: 1328903.728 ops/s
Iteration  11: 1331733.903 ops/s
Iteration  12: 1334337.261 ops/s
Iteration  13: 1333012.930 ops/s
Iteration  14: 1331449.510 ops/s
Iteration  15: 1340321.921 ops/s
Iteration  16: 1330259.051 ops/s
Iteration  17: 1325709.640 ops/s
Iteration  18: 1331633.564 ops/s
Iteration  19: 1332965.686 ops/s
Iteration  20: 1332008.000 ops/s
Iteration  21: 1335520.245 ops/s
Iteration  22: 1331613.838 ops/s
Iteration  23: 1328846.967 ops/s
Iteration  24: 1326934.059 ops/s
Iteration  25: 1334167.779 ops/s
Iteration  26: 1333592.743 ops/s
Iteration  27: 1333416.696 ops/s
Iteration  28: 1327553.203 ops/s
Iteration  29: 1336025.886 ops/s
Iteration  30: 1331078.396 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_reject":
  1332776.798 ±(99.9%) 2377.469 ops/s [Average]
  (min, avg, max) = (1325709.640, 1332776.798, 1340321.921), stdev = 3558.483
  CI (99.9%): [1330399.329, 1335154.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_reject  thrpt   30  1332776.798 ± 2377.469  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_rejectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_rejectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 545976.729 ops/s
# Warmup Iteration   2: 1315653.923 ops/s
# Warmup Iteration   3: 1328753.802 ops/s
# Warmup Iteration   4: 1115244.617 ops/s
# Warmup Iteration   5: 1332068.072 ops/s
# Warmup Iteration   6: 1329443.197 ops/s
# Warmup Iteration   7: 1328660.898 ops/s
# Warmup Iteration   8: 1334980.822 ops/s
# Warmup Iteration   9: 1329140.193 ops/s
# Warmup Iteration  10: 1323564.993 ops/s
# Warmup Iteration  11: 1329547.137 ops/s
# Warmup Iteration  12: 1335129.799 ops/s
# Warmup Iteration  13: 1328148.970 ops/s
# Warmup Iteration  14: 1325884.258 ops/s
# Warmup Iteration  15: 1329873.391 ops/s
# Warmup Iteration  16: 1331177.978 ops/s
# Warmup Iteration  17: 1324888.292 ops/s
# Warmup Iteration  18: 1328455.091 ops/s
# Warmup Iteration  19: 1325151.580 ops/s
# Warmup Iteration  20: 1306730.373 ops/s
# Warmup Iteration  21: 1319812.222 ops/s
# Warmup Iteration  22: 1313186.009 ops/s
# Warmup Iteration  23: 1319583.511 ops/s
# Warmup Iteration  24: 1321884.341 ops/s
# Warmup Iteration  25: 1330804.718 ops/s
# Warmup Iteration  26: 1322152.324 ops/s
# Warmup Iteration  27: 1319052.887 ops/s
# Warmup Iteration  28: 1324487.054 ops/s
# Warmup Iteration  29: 1321536.724 ops/s
# Warmup Iteration  30: 1316580.850 ops/s
Iteration   1: 1316815.802 ops/s
Iteration   2: 1320050.369 ops/s
Iteration   3: 1315911.981 ops/s
Iteration   4: 1323978.433 ops/s
Iteration   5: 1330238.335 ops/s
Iteration   6: 1329156.762 ops/s
Iteration   7: 1318008.209 ops/s
Iteration   8: 1325234.736 ops/s
Iteration   9: 1322171.153 ops/s
Iteration  10: 1318562.001 ops/s
Iteration  11: 1323413.641 ops/s
Iteration  12: 1321154.715 ops/s
Iteration  13: 1323229.198 ops/s
Iteration  14: 1320113.719 ops/s
Iteration  15: 1327348.661 ops/s
Iteration  16: 1326164.949 ops/s
Iteration  17: 1326270.432 ops/s
Iteration  18: 1322509.809 ops/s
Iteration  19: 1328239.261 ops/s
Iteration  20: 1321071.747 ops/s
Iteration  21: 1325317.202 ops/s
Iteration  22: 1328995.004 ops/s
Iteration  23: 1328008.519 ops/s
Iteration  24: 1326175.028 ops/s
Iteration  25: 1327473.367 ops/s
Iteration  26: 1328259.417 ops/s
Iteration  27: 1324743.142 ops/s
Iteration  28: 1323907.134 ops/s
Iteration  29: 1333447.798 ops/s
Iteration  30: 1328358.805 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_rejectWith":
  1324477.644 ±(99.9%) 2834.853 ops/s [Average]
  (min, avg, max) = (1315911.981, 1324477.644, 1333447.798), stdev = 4243.075
  CI (99.9%): [1321642.791, 1327312.497] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_rejectWith  thrpt   30  1324477.644 ± 2834.853  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565430.964 ops/s
# Warmup Iteration   2: 683846.358 ops/s
# Warmup Iteration   3: 884674.049 ops/s
# Warmup Iteration   4: 879760.917 ops/s
# Warmup Iteration   5: 886172.869 ops/s
# Warmup Iteration   6: 887426.864 ops/s
# Warmup Iteration   7: 884564.920 ops/s
# Warmup Iteration   8: 886163.008 ops/s
# Warmup Iteration   9: 769707.809 ops/s
# Warmup Iteration  10: 856980.317 ops/s
# Warmup Iteration  11: 885966.733 ops/s
# Warmup Iteration  12: 886293.749 ops/s
# Warmup Iteration  13: 884470.300 ops/s
# Warmup Iteration  14: 884214.417 ops/s
# Warmup Iteration  15: 884991.831 ops/s
# Warmup Iteration  16: 883170.435 ops/s
# Warmup Iteration  17: 936916.470 ops/s
# Warmup Iteration  18: 935922.360 ops/s
# Warmup Iteration  19: 935078.779 ops/s
# Warmup Iteration  20: 938350.395 ops/s
# Warmup Iteration  21: 938625.323 ops/s
# Warmup Iteration  22: 932390.268 ops/s
# Warmup Iteration  23: 937517.635 ops/s
# Warmup Iteration  24: 937007.212 ops/s
# Warmup Iteration  25: 935643.360 ops/s
# Warmup Iteration  26: 935158.502 ops/s
# Warmup Iteration  27: 937543.722 ops/s
# Warmup Iteration  28: 938163.557 ops/s
# Warmup Iteration  29: 936579.044 ops/s
# Warmup Iteration  30: 938456.842 ops/s
Iteration   1: 938482.515 ops/s
Iteration   2: 936149.657 ops/s
Iteration   3: 933876.590 ops/s
Iteration   4: 939588.569 ops/s
Iteration   5: 941111.332 ops/s
Iteration   6: 936830.826 ops/s
Iteration   7: 936732.625 ops/s
Iteration   8: 935991.393 ops/s
Iteration   9: 937735.024 ops/s
Iteration  10: 936923.712 ops/s
Iteration  11: 935014.046 ops/s
Iteration  12: 939862.036 ops/s
Iteration  13: 941768.627 ops/s
Iteration  14: 936746.656 ops/s
Iteration  15: 939030.753 ops/s
Iteration  16: 935899.002 ops/s
Iteration  17: 935712.721 ops/s
Iteration  18: 934062.480 ops/s
Iteration  19: 935024.532 ops/s
Iteration  20: 939932.084 ops/s
Iteration  21: 938169.955 ops/s
Iteration  22: 937906.401 ops/s
Iteration  23: 940399.700 ops/s
Iteration  24: 935567.132 ops/s
Iteration  25: 936343.221 ops/s
Iteration  26: 935692.403 ops/s
Iteration  27: 937263.231 ops/s
Iteration  28: 935681.747 ops/s
Iteration  29: 934040.544 ops/s
Iteration  30: 936058.992 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_remove":
  937119.950 ±(99.9%) 1414.383 ops/s [Average]
  (min, avg, max) = (933876.590, 937119.950, 941768.627), stdev = 2116.983
  CI (99.9%): [935705.567, 938534.334] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_remove  thrpt   30  937119.950 ± 1414.383  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 560016.339 ops/s
# Warmup Iteration   2: 676154.263 ops/s
# Warmup Iteration   3: 880751.402 ops/s
# Warmup Iteration   4: 873838.474 ops/s
# Warmup Iteration   5: 882822.025 ops/s
# Warmup Iteration   6: 880388.950 ops/s
# Warmup Iteration   7: 877250.136 ops/s
# Warmup Iteration   8: 881731.842 ops/s
# Warmup Iteration   9: 763142.901 ops/s
# Warmup Iteration  10: 844181.714 ops/s
# Warmup Iteration  11: 877869.369 ops/s
# Warmup Iteration  12: 878351.023 ops/s
# Warmup Iteration  13: 876571.072 ops/s
# Warmup Iteration  14: 878722.900 ops/s
# Warmup Iteration  15: 877182.755 ops/s
# Warmup Iteration  16: 877568.937 ops/s
# Warmup Iteration  17: 921994.434 ops/s
# Warmup Iteration  18: 927874.637 ops/s
# Warmup Iteration  19: 925605.354 ops/s
# Warmup Iteration  20: 919200.262 ops/s
# Warmup Iteration  21: 926594.287 ops/s
# Warmup Iteration  22: 923731.532 ops/s
# Warmup Iteration  23: 923817.127 ops/s
# Warmup Iteration  24: 922121.040 ops/s
# Warmup Iteration  25: 922126.597 ops/s
# Warmup Iteration  26: 921817.489 ops/s
# Warmup Iteration  27: 917659.725 ops/s
# Warmup Iteration  28: 923176.707 ops/s
# Warmup Iteration  29: 920190.743 ops/s
# Warmup Iteration  30: 919983.248 ops/s
Iteration   1: 922730.738 ops/s
Iteration   2: 924955.902 ops/s
Iteration   3: 919153.221 ops/s
Iteration   4: 927395.671 ops/s
Iteration   5: 922163.045 ops/s
Iteration   6: 923509.869 ops/s
Iteration   7: 913352.236 ops/s
Iteration   8: 920945.084 ops/s
Iteration   9: 922621.342 ops/s
Iteration  10: 921988.487 ops/s
Iteration  11: 925362.600 ops/s
Iteration  12: 927524.971 ops/s
Iteration  13: 922482.473 ops/s
Iteration  14: 920913.877 ops/s
Iteration  15: 921425.335 ops/s
Iteration  16: 916397.936 ops/s
Iteration  17: 924115.004 ops/s
Iteration  18: 917396.163 ops/s
Iteration  19: 927426.217 ops/s
Iteration  20: 919094.948 ops/s
Iteration  21: 925207.932 ops/s
Iteration  22: 922439.230 ops/s
Iteration  23: 925406.656 ops/s
Iteration  24: 920558.855 ops/s
Iteration  25: 921927.179 ops/s
Iteration  26: 927203.923 ops/s
Iteration  27: 920960.147 ops/s
Iteration  28: 923860.552 ops/s
Iteration  29: 920090.677 ops/s
Iteration  30: 920764.035 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAll":
  922312.477 ±(99.9%) 2224.984 ops/s [Average]
  (min, avg, max) = (913352.236, 922312.477, 927524.971), stdev = 3330.252
  CI (99.9%): [920087.493, 924537.461] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAll  thrpt   30  922312.477 ± 2224.984  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562856.285 ops/s
# Warmup Iteration   2: 683827.085 ops/s
# Warmup Iteration   3: 875281.869 ops/s
# Warmup Iteration   4: 873621.928 ops/s
# Warmup Iteration   5: 876049.646 ops/s
# Warmup Iteration   6: 878770.003 ops/s
# Warmup Iteration   7: 878874.975 ops/s
# Warmup Iteration   8: 875779.058 ops/s
# Warmup Iteration   9: 731704.435 ops/s
# Warmup Iteration  10: 881321.730 ops/s
# Warmup Iteration  11: 881202.608 ops/s
# Warmup Iteration  12: 874705.269 ops/s
# Warmup Iteration  13: 877902.978 ops/s
# Warmup Iteration  14: 877652.064 ops/s
# Warmup Iteration  15: 879916.729 ops/s
# Warmup Iteration  16: 878133.833 ops/s
# Warmup Iteration  17: 926635.855 ops/s
# Warmup Iteration  18: 928743.780 ops/s
# Warmup Iteration  19: 926463.491 ops/s
# Warmup Iteration  20: 927810.877 ops/s
# Warmup Iteration  21: 926027.255 ops/s
# Warmup Iteration  22: 926395.559 ops/s
# Warmup Iteration  23: 928750.370 ops/s
# Warmup Iteration  24: 931159.410 ops/s
# Warmup Iteration  25: 925760.076 ops/s
# Warmup Iteration  26: 927882.691 ops/s
# Warmup Iteration  27: 924760.724 ops/s
# Warmup Iteration  28: 927985.794 ops/s
# Warmup Iteration  29: 927063.964 ops/s
# Warmup Iteration  30: 927140.107 ops/s
Iteration   1: 932056.493 ops/s
Iteration   2: 924001.943 ops/s
Iteration   3: 922327.418 ops/s
Iteration   4: 925072.369 ops/s
Iteration   5: 927504.799 ops/s
Iteration   6: 927396.828 ops/s
Iteration   7: 928582.268 ops/s
Iteration   8: 926381.600 ops/s
Iteration   9: 927265.309 ops/s
Iteration  10: 926459.426 ops/s
Iteration  11: 925427.724 ops/s
Iteration  12: 928390.303 ops/s
Iteration  13: 931023.513 ops/s
Iteration  14: 924939.876 ops/s
Iteration  15: 924067.534 ops/s
Iteration  16: 925121.679 ops/s
Iteration  17: 921991.510 ops/s
Iteration  18: 927651.596 ops/s
Iteration  19: 926928.213 ops/s
Iteration  20: 926749.433 ops/s
Iteration  21: 926180.542 ops/s
Iteration  22: 925946.419 ops/s
Iteration  23: 922294.817 ops/s
Iteration  24: 924293.640 ops/s
Iteration  25: 927120.221 ops/s
Iteration  26: 924902.496 ops/s
Iteration  27: 924841.763 ops/s
Iteration  28: 924303.215 ops/s
Iteration  29: 926819.468 ops/s
Iteration  30: 926345.093 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable":
  926079.584 ±(99.9%) 1514.130 ops/s [Average]
  (min, avg, max) = (921991.510, 926079.584, 932056.493), stdev = 2266.279
  CI (99.9%): [924565.453, 927593.714] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeAllIterable  thrpt   30  926079.584 ± 1514.130  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 511727.919 ops/s
# Warmup Iteration   2: 583086.172 ops/s
# Warmup Iteration   3: 774947.571 ops/s
# Warmup Iteration   4: 776861.251 ops/s
# Warmup Iteration   5: 773909.930 ops/s
# Warmup Iteration   6: 776236.663 ops/s
# Warmup Iteration   7: 772874.109 ops/s
# Warmup Iteration   8: 777070.063 ops/s
# Warmup Iteration   9: 776133.268 ops/s
# Warmup Iteration  10: 665525.315 ops/s
# Warmup Iteration  11: 757122.626 ops/s
# Warmup Iteration  12: 774366.840 ops/s
# Warmup Iteration  13: 779259.966 ops/s
# Warmup Iteration  14: 777413.382 ops/s
# Warmup Iteration  15: 779340.863 ops/s
# Warmup Iteration  16: 778788.465 ops/s
# Warmup Iteration  17: 814487.043 ops/s
# Warmup Iteration  18: 819480.510 ops/s
# Warmup Iteration  19: 815712.037 ops/s
# Warmup Iteration  20: 813914.045 ops/s
# Warmup Iteration  21: 815519.628 ops/s
# Warmup Iteration  22: 818716.895 ops/s
# Warmup Iteration  23: 817153.837 ops/s
# Warmup Iteration  24: 816363.582 ops/s
# Warmup Iteration  25: 816157.543 ops/s
# Warmup Iteration  26: 818503.211 ops/s
# Warmup Iteration  27: 815599.790 ops/s
# Warmup Iteration  28: 816718.276 ops/s
# Warmup Iteration  29: 818425.713 ops/s
# Warmup Iteration  30: 816314.111 ops/s
Iteration   1: 816201.744 ops/s
Iteration   2: 816443.690 ops/s
Iteration   3: 820481.177 ops/s
Iteration   4: 818056.358 ops/s
Iteration   5: 821836.642 ops/s
Iteration   6: 817301.743 ops/s
Iteration   7: 806436.809 ops/s
Iteration   8: 817866.382 ops/s
Iteration   9: 819747.951 ops/s
Iteration  10: 818850.263 ops/s
Iteration  11: 822149.798 ops/s
Iteration  12: 820711.734 ops/s
Iteration  13: 812467.228 ops/s
Iteration  14: 815141.655 ops/s
Iteration  15: 816505.693 ops/s
Iteration  16: 818509.607 ops/s
Iteration  17: 818236.656 ops/s
Iteration  18: 817665.112 ops/s
Iteration  19: 819337.054 ops/s
Iteration  20: 814695.078 ops/s
Iteration  21: 819044.214 ops/s
Iteration  22: 816959.938 ops/s
Iteration  23: 816894.924 ops/s
Iteration  24: 817386.111 ops/s
Iteration  25: 816844.515 ops/s
Iteration  26: 817557.461 ops/s
Iteration  27: 817623.476 ops/s
Iteration  28: 819434.000 ops/s
Iteration  29: 819874.539 ops/s
Iteration  30: 816313.431 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIf":
  817552.499 ±(99.9%) 1965.970 ops/s [Average]
  (min, avg, max) = (806436.809, 817552.499, 822149.798), stdev = 2942.572
  CI (99.9%): [815586.529, 819518.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIf  thrpt   30  817552.499 ± 1965.970  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIfWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIfWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562375.594 ops/s
# Warmup Iteration   2: 680600.972 ops/s
# Warmup Iteration   3: 874277.422 ops/s
# Warmup Iteration   4: 872599.554 ops/s
# Warmup Iteration   5: 877991.000 ops/s
# Warmup Iteration   6: 877752.986 ops/s
# Warmup Iteration   7: 879193.326 ops/s
# Warmup Iteration   8: 873789.015 ops/s
# Warmup Iteration   9: 749399.509 ops/s
# Warmup Iteration  10: 862543.766 ops/s
# Warmup Iteration  11: 880190.511 ops/s
# Warmup Iteration  12: 879444.623 ops/s
# Warmup Iteration  13: 881733.791 ops/s
# Warmup Iteration  14: 883862.096 ops/s
# Warmup Iteration  15: 880679.895 ops/s
# Warmup Iteration  16: 881730.203 ops/s
# Warmup Iteration  17: 931734.957 ops/s
# Warmup Iteration  18: 931382.040 ops/s
# Warmup Iteration  19: 932743.747 ops/s
# Warmup Iteration  20: 935286.987 ops/s
# Warmup Iteration  21: 933520.625 ops/s
# Warmup Iteration  22: 931465.287 ops/s
# Warmup Iteration  23: 931340.364 ops/s
# Warmup Iteration  24: 931277.738 ops/s
# Warmup Iteration  25: 931869.676 ops/s
# Warmup Iteration  26: 929689.742 ops/s
# Warmup Iteration  27: 931207.726 ops/s
# Warmup Iteration  28: 933940.923 ops/s
# Warmup Iteration  29: 931503.236 ops/s
# Warmup Iteration  30: 932439.492 ops/s
Iteration   1: 928099.486 ops/s
Iteration   2: 932107.694 ops/s
Iteration   3: 926451.059 ops/s
Iteration   4: 930735.599 ops/s
Iteration   5: 932434.716 ops/s
Iteration   6: 932941.740 ops/s
Iteration   7: 932315.595 ops/s
Iteration   8: 935241.185 ops/s
Iteration   9: 932216.867 ops/s
Iteration  10: 933974.746 ops/s
Iteration  11: 930637.079 ops/s
Iteration  12: 932800.859 ops/s
Iteration  13: 933000.841 ops/s
Iteration  14: 929852.969 ops/s
Iteration  15: 928774.595 ops/s
Iteration  16: 931334.216 ops/s
Iteration  17: 927311.823 ops/s
Iteration  18: 935260.764 ops/s
Iteration  19: 942465.057 ops/s
Iteration  20: 936453.640 ops/s
Iteration  21: 932251.567 ops/s
Iteration  22: 933214.594 ops/s
Iteration  23: 931837.115 ops/s
Iteration  24: 932546.336 ops/s
Iteration  25: 929436.114 ops/s
Iteration  26: 931484.379 ops/s
Iteration  27: 935828.147 ops/s
Iteration  28: 932101.523 ops/s
Iteration  29: 937443.581 ops/s
Iteration  30: 930850.138 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIfWith":
  932380.134 ±(99.9%) 2127.825 ops/s [Average]
  (min, avg, max) = (926451.059, 932380.134, 942465.057), stdev = 3184.829
  CI (99.9%): [930252.309, 934507.959] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_removeIfWith  thrpt   30  932380.134 ± 2127.825  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 565483.798 ops/s
# Warmup Iteration   2: 686856.862 ops/s
# Warmup Iteration   3: 881591.157 ops/s
# Warmup Iteration   4: 880226.296 ops/s
# Warmup Iteration   5: 886034.906 ops/s
# Warmup Iteration   6: 881120.483 ops/s
# Warmup Iteration   7: 882531.477 ops/s
# Warmup Iteration   8: 883348.123 ops/s
# Warmup Iteration   9: 755343.444 ops/s
# Warmup Iteration  10: 862609.290 ops/s
# Warmup Iteration  11: 884761.419 ops/s
# Warmup Iteration  12: 886237.967 ops/s
# Warmup Iteration  13: 885462.254 ops/s
# Warmup Iteration  14: 886351.145 ops/s
# Warmup Iteration  15: 887130.056 ops/s
# Warmup Iteration  16: 885315.945 ops/s
# Warmup Iteration  17: 929783.774 ops/s
# Warmup Iteration  18: 933351.633 ops/s
# Warmup Iteration  19: 934997.008 ops/s
# Warmup Iteration  20: 934020.125 ops/s
# Warmup Iteration  21: 934458.357 ops/s
# Warmup Iteration  22: 934852.482 ops/s
# Warmup Iteration  23: 930776.746 ops/s
# Warmup Iteration  24: 934672.306 ops/s
# Warmup Iteration  25: 932663.534 ops/s
# Warmup Iteration  26: 932384.309 ops/s
# Warmup Iteration  27: 930452.135 ops/s
# Warmup Iteration  28: 934492.440 ops/s
# Warmup Iteration  29: 936473.030 ops/s
# Warmup Iteration  30: 931474.875 ops/s
Iteration   1: 933083.310 ops/s
Iteration   2: 937984.399 ops/s
Iteration   3: 936948.729 ops/s
Iteration   4: 936837.415 ops/s
Iteration   5: 933790.560 ops/s
Iteration   6: 935834.654 ops/s
Iteration   7: 934652.996 ops/s
Iteration   8: 935962.868 ops/s
Iteration   9: 938682.718 ops/s
Iteration  10: 935447.221 ops/s
Iteration  11: 934621.952 ops/s
Iteration  12: 939993.202 ops/s
Iteration  13: 932507.595 ops/s
Iteration  14: 932111.330 ops/s
Iteration  15: 937608.754 ops/s
Iteration  16: 936938.693 ops/s
Iteration  17: 938151.220 ops/s
Iteration  18: 940025.637 ops/s
Iteration  19: 935670.710 ops/s
Iteration  20: 931970.152 ops/s
Iteration  21: 939156.201 ops/s
Iteration  22: 935104.625 ops/s
Iteration  23: 935415.837 ops/s
Iteration  24: 934980.951 ops/s
Iteration  25: 940951.731 ops/s
Iteration  26: 936464.417 ops/s
Iteration  27: 932196.542 ops/s
Iteration  28: 936333.401 ops/s
Iteration  29: 933990.737 ops/s
Iteration  30: 933453.844 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAll":
  935895.747 ±(99.9%) 1644.686 ops/s [Average]
  (min, avg, max) = (931970.152, 935895.747, 940951.731), stdev = 2461.689
  CI (99.9%): [934251.060, 937540.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAll  thrpt   30  935895.747 ± 1644.686  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 558621.825 ops/s
# Warmup Iteration   2: 679319.602 ops/s
# Warmup Iteration   3: 879134.135 ops/s
# Warmup Iteration   4: 873962.021 ops/s
# Warmup Iteration   5: 878101.713 ops/s
# Warmup Iteration   6: 881356.680 ops/s
# Warmup Iteration   7: 880966.980 ops/s
# Warmup Iteration   8: 876870.941 ops/s
# Warmup Iteration   9: 727874.182 ops/s
# Warmup Iteration  10: 879961.954 ops/s
# Warmup Iteration  11: 880449.039 ops/s
# Warmup Iteration  12: 878783.867 ops/s
# Warmup Iteration  13: 882590.685 ops/s
# Warmup Iteration  14: 879556.415 ops/s
# Warmup Iteration  15: 880223.152 ops/s
# Warmup Iteration  16: 876708.677 ops/s
# Warmup Iteration  17: 928994.961 ops/s
# Warmup Iteration  18: 927478.003 ops/s
# Warmup Iteration  19: 930570.876 ops/s
# Warmup Iteration  20: 931076.589 ops/s
# Warmup Iteration  21: 927838.448 ops/s
# Warmup Iteration  22: 930559.260 ops/s
# Warmup Iteration  23: 931485.359 ops/s
# Warmup Iteration  24: 929061.447 ops/s
# Warmup Iteration  25: 930435.444 ops/s
# Warmup Iteration  26: 929410.726 ops/s
# Warmup Iteration  27: 932287.047 ops/s
# Warmup Iteration  28: 932153.653 ops/s
# Warmup Iteration  29: 929158.177 ops/s
# Warmup Iteration  30: 932789.955 ops/s
Iteration   1: 931839.317 ops/s
Iteration   2: 935667.946 ops/s
Iteration   3: 927946.793 ops/s
Iteration   4: 929555.643 ops/s
Iteration   5: 931068.504 ops/s
Iteration   6: 932962.049 ops/s
Iteration   7: 927205.909 ops/s
Iteration   8: 930840.473 ops/s
Iteration   9: 933520.008 ops/s
Iteration  10: 929144.985 ops/s
Iteration  11: 926796.638 ops/s
Iteration  12: 926746.004 ops/s
Iteration  13: 928615.063 ops/s
Iteration  14: 927428.528 ops/s
Iteration  15: 931211.761 ops/s
Iteration  16: 928303.249 ops/s
Iteration  17: 930706.984 ops/s
Iteration  18: 923671.518 ops/s
Iteration  19: 924965.150 ops/s
Iteration  20: 926812.517 ops/s
Iteration  21: 930445.268 ops/s
Iteration  22: 927584.567 ops/s
Iteration  23: 928021.693 ops/s
Iteration  24: 926885.404 ops/s
Iteration  25: 928917.182 ops/s
Iteration  26: 934121.756 ops/s
Iteration  27: 930275.085 ops/s
Iteration  28: 929923.822 ops/s
Iteration  29: 929065.952 ops/s
Iteration  30: 929788.486 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable":
  929334.609 ±(99.9%) 1784.059 ops/s [Average]
  (min, avg, max) = (923671.518, 929334.609, 935667.946), stdev = 2670.295
  CI (99.9%): [927550.550, 931118.667] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_retainAllIterable  thrpt   30  929334.609 ± 1784.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_select$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_select

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549124.261 ops/s
# Warmup Iteration   2: 1328509.570 ops/s
# Warmup Iteration   3: 1340237.082 ops/s
# Warmup Iteration   4: 1129873.653 ops/s
# Warmup Iteration   5: 1348418.041 ops/s
# Warmup Iteration   6: 1343616.561 ops/s
# Warmup Iteration   7: 1343528.687 ops/s
# Warmup Iteration   8: 1350113.650 ops/s
# Warmup Iteration   9: 1354627.615 ops/s
# Warmup Iteration  10: 1346027.545 ops/s
# Warmup Iteration  11: 1351140.507 ops/s
# Warmup Iteration  12: 1345140.296 ops/s
# Warmup Iteration  13: 1348126.618 ops/s
# Warmup Iteration  14: 1343914.772 ops/s
# Warmup Iteration  15: 1340571.509 ops/s
# Warmup Iteration  16: 1350889.188 ops/s
# Warmup Iteration  17: 1347474.655 ops/s
# Warmup Iteration  18: 1352863.555 ops/s
# Warmup Iteration  19: 1352439.476 ops/s
# Warmup Iteration  20: 1350760.494 ops/s
# Warmup Iteration  21: 1348232.748 ops/s
# Warmup Iteration  22: 1346586.459 ops/s
# Warmup Iteration  23: 1345713.624 ops/s
# Warmup Iteration  24: 1342940.968 ops/s
# Warmup Iteration  25: 1343450.419 ops/s
# Warmup Iteration  26: 1343850.272 ops/s
# Warmup Iteration  27: 1339108.947 ops/s
# Warmup Iteration  28: 1348809.435 ops/s
# Warmup Iteration  29: 1346068.563 ops/s
# Warmup Iteration  30: 1341776.137 ops/s
Iteration   1: 1350429.771 ops/s
Iteration   2: 1343721.771 ops/s
Iteration   3: 1349572.126 ops/s
Iteration   4: 1349196.343 ops/s
Iteration   5: 1348473.814 ops/s
Iteration   6: 1344214.444 ops/s
Iteration   7: 1344591.995 ops/s
Iteration   8: 1340505.476 ops/s
Iteration   9: 1348519.749 ops/s
Iteration  10: 1350706.655 ops/s
Iteration  11: 1345353.688 ops/s
Iteration  12: 1354113.258 ops/s
Iteration  13: 1341671.715 ops/s
Iteration  14: 1342038.249 ops/s
Iteration  15: 1349160.678 ops/s
Iteration  16: 1348221.018 ops/s
Iteration  17: 1340452.142 ops/s
Iteration  18: 1346550.013 ops/s
Iteration  19: 1349751.331 ops/s
Iteration  20: 1342794.990 ops/s
Iteration  21: 1343054.369 ops/s
Iteration  22: 1352552.192 ops/s
Iteration  23: 1344324.747 ops/s
Iteration  24: 1347278.646 ops/s
Iteration  25: 1349585.103 ops/s
Iteration  26: 1345667.772 ops/s
Iteration  27: 1337431.743 ops/s
Iteration  28: 1343366.869 ops/s
Iteration  29: 1346500.229 ops/s
Iteration  30: 1336515.219 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_select":
  1345877.204 ±(99.9%) 2850.571 ops/s [Average]
  (min, avg, max) = (1336515.219, 1345877.204, 1354113.258), stdev = 4266.601
  CI (99.9%): [1343026.632, 1348727.775] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_select  thrpt   30  1345877.204 ± 2850.571  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectUnique$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectUnique

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 875556.211 ops/s
# Warmup Iteration   2: 1715352.912 ops/s
# Warmup Iteration   3: 1931570.023 ops/s
# Warmup Iteration   4: 1931387.799 ops/s
# Warmup Iteration   5: 1579598.948 ops/s
# Warmup Iteration   6: 1928764.339 ops/s
# Warmup Iteration   7: 1935991.127 ops/s
# Warmup Iteration   8: 1925567.611 ops/s
# Warmup Iteration   9: 1926455.323 ops/s
# Warmup Iteration  10: 1932295.024 ops/s
# Warmup Iteration  11: 1924702.618 ops/s
# Warmup Iteration  12: 1929020.381 ops/s
# Warmup Iteration  13: 1931445.604 ops/s
# Warmup Iteration  14: 1931505.714 ops/s
# Warmup Iteration  15: 1915088.685 ops/s
# Warmup Iteration  16: 1926990.432 ops/s
# Warmup Iteration  17: 1928291.609 ops/s
# Warmup Iteration  18: 1926391.641 ops/s
# Warmup Iteration  19: 1935437.288 ops/s
# Warmup Iteration  20: 1930298.825 ops/s
# Warmup Iteration  21: 1932354.823 ops/s
# Warmup Iteration  22: 1925887.418 ops/s
# Warmup Iteration  23: 1926584.957 ops/s
# Warmup Iteration  24: 1931983.901 ops/s
# Warmup Iteration  25: 1928085.054 ops/s
# Warmup Iteration  26: 1932212.131 ops/s
# Warmup Iteration  27: 1929243.068 ops/s
# Warmup Iteration  28: 1935682.614 ops/s
# Warmup Iteration  29: 1927876.008 ops/s
# Warmup Iteration  30: 1927761.814 ops/s
Iteration   1: 1926882.694 ops/s
Iteration   2: 1926781.902 ops/s
Iteration   3: 1926968.875 ops/s
Iteration   4: 1925987.946 ops/s
Iteration   5: 1924271.917 ops/s
Iteration   6: 1927735.983 ops/s
Iteration   7: 1935630.522 ops/s
Iteration   8: 1933983.170 ops/s
Iteration   9: 1931390.802 ops/s
Iteration  10: 1934133.880 ops/s
Iteration  11: 1922173.550 ops/s
Iteration  12: 1923888.297 ops/s
Iteration  13: 1929903.829 ops/s
Iteration  14: 1927868.200 ops/s
Iteration  15: 1934305.659 ops/s
Iteration  16: 1933393.536 ops/s
Iteration  17: 1926414.830 ops/s
Iteration  18: 1930259.197 ops/s
Iteration  19: 1932294.132 ops/s
Iteration  20: 1930946.358 ops/s
Iteration  21: 1935892.757 ops/s
Iteration  22: 1913918.289 ops/s
Iteration  23: 1930616.428 ops/s
Iteration  24: 1933490.377 ops/s
Iteration  25: 1934647.831 ops/s
Iteration  26: 1932774.092 ops/s
Iteration  27: 1927501.217 ops/s
Iteration  28: 1933796.112 ops/s
Iteration  29: 1927521.651 ops/s
Iteration  30: 1930615.291 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectUnique":
  1929532.977 ±(99.9%) 3182.512 ops/s [Average]
  (min, avg, max) = (1913918.289, 1929532.977, 1935892.757), stdev = 4763.435
  CI (99.9%): [1926350.465, 1932715.490] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectUnique  thrpt   30  1929532.977 ± 3182.512  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 540325.458 ops/s
# Warmup Iteration   2: 1319193.496 ops/s
# Warmup Iteration   3: 1328541.111 ops/s
# Warmup Iteration   4: 1112454.191 ops/s
# Warmup Iteration   5: 1338466.377 ops/s
# Warmup Iteration   6: 1331223.623 ops/s
# Warmup Iteration   7: 1335065.808 ops/s
# Warmup Iteration   8: 1339242.080 ops/s
# Warmup Iteration   9: 1338321.498 ops/s
# Warmup Iteration  10: 1331953.964 ops/s
# Warmup Iteration  11: 1340819.367 ops/s
# Warmup Iteration  12: 1339757.923 ops/s
# Warmup Iteration  13: 1336803.806 ops/s
# Warmup Iteration  14: 1327660.581 ops/s
# Warmup Iteration  15: 1337611.338 ops/s
# Warmup Iteration  16: 1332911.778 ops/s
# Warmup Iteration  17: 1330495.643 ops/s
# Warmup Iteration  18: 1332777.051 ops/s
# Warmup Iteration  19: 1333549.558 ops/s
# Warmup Iteration  20: 1331396.941 ops/s
# Warmup Iteration  21: 1334867.657 ops/s
# Warmup Iteration  22: 1336553.177 ops/s
# Warmup Iteration  23: 1325374.737 ops/s
# Warmup Iteration  24: 1325786.963 ops/s
# Warmup Iteration  25: 1329648.739 ops/s
# Warmup Iteration  26: 1328302.741 ops/s
# Warmup Iteration  27: 1330188.205 ops/s
# Warmup Iteration  28: 1333072.174 ops/s
# Warmup Iteration  29: 1330005.642 ops/s
# Warmup Iteration  30: 1325775.548 ops/s
Iteration   1: 1321973.372 ops/s
Iteration   2: 1329388.389 ops/s
Iteration   3: 1336131.565 ops/s
Iteration   4: 1334278.142 ops/s
Iteration   5: 1332970.819 ops/s
Iteration   6: 1334424.165 ops/s
Iteration   7: 1326189.124 ops/s
Iteration   8: 1333057.691 ops/s
Iteration   9: 1336194.622 ops/s
Iteration  10: 1339104.472 ops/s
Iteration  11: 1337680.327 ops/s
Iteration  12: 1336019.057 ops/s
Iteration  13: 1338059.972 ops/s
Iteration  14: 1326468.468 ops/s
Iteration  15: 1338822.888 ops/s
Iteration  16: 1333638.730 ops/s
Iteration  17: 1330729.869 ops/s
Iteration  18: 1339195.604 ops/s
Iteration  19: 1340551.288 ops/s
Iteration  20: 1333849.601 ops/s
Iteration  21: 1332386.398 ops/s
Iteration  22: 1339856.283 ops/s
Iteration  23: 1336586.288 ops/s
Iteration  24: 1336482.963 ops/s
Iteration  25: 1334412.875 ops/s
Iteration  26: 1330508.580 ops/s
Iteration  27: 1332867.410 ops/s
Iteration  28: 1333997.546 ops/s
Iteration  29: 1344724.096 ops/s
Iteration  30: 1337839.052 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectWith":
  1334612.989 ±(99.9%) 3141.711 ops/s [Average]
  (min, avg, max) = (1321973.372, 1334612.989, 1344724.096), stdev = 4702.365
  CI (99.9%): [1331471.278, 1337754.699] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_selectWith  thrpt   30  1334612.989 ± 3141.711  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_tap$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_tap

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1733007.612 ops/s
# Warmup Iteration   2: 4104021.384 ops/s
# Warmup Iteration   3: 4310280.908 ops/s
# Warmup Iteration   4: 3554809.689 ops/s
# Warmup Iteration   5: 4283277.801 ops/s
# Warmup Iteration   6: 4318351.219 ops/s
# Warmup Iteration   7: 4327670.671 ops/s
# Warmup Iteration   8: 4306602.182 ops/s
# Warmup Iteration   9: 4294825.401 ops/s
# Warmup Iteration  10: 4316019.379 ops/s
# Warmup Iteration  11: 4316991.868 ops/s
# Warmup Iteration  12: 4301245.116 ops/s
# Warmup Iteration  13: 4301361.014 ops/s
# Warmup Iteration  14: 4318806.204 ops/s
# Warmup Iteration  15: 4303263.135 ops/s
# Warmup Iteration  16: 4312257.442 ops/s
# Warmup Iteration  17: 4306656.585 ops/s
# Warmup Iteration  18: 4302978.237 ops/s
# Warmup Iteration  19: 4305521.699 ops/s
# Warmup Iteration  20: 4310515.417 ops/s
# Warmup Iteration  21: 4320478.990 ops/s
# Warmup Iteration  22: 4312144.105 ops/s
# Warmup Iteration  23: 4313866.757 ops/s
# Warmup Iteration  24: 4315936.144 ops/s
# Warmup Iteration  25: 4304130.483 ops/s
# Warmup Iteration  26: 4315552.692 ops/s
# Warmup Iteration  27: 4303930.799 ops/s
# Warmup Iteration  28: 4296692.183 ops/s
# Warmup Iteration  29: 4299708.138 ops/s
# Warmup Iteration  30: 4300616.771 ops/s
Iteration   1: 4310358.804 ops/s
Iteration   2: 4303472.882 ops/s
Iteration   3: 4278145.575 ops/s
Iteration   4: 4307493.391 ops/s
Iteration   5: 4299811.566 ops/s
Iteration   6: 4294432.174 ops/s
Iteration   7: 4310087.465 ops/s
Iteration   8: 4291121.614 ops/s
Iteration   9: 4294987.908 ops/s
Iteration  10: 4287833.552 ops/s
Iteration  11: 4284201.803 ops/s
Iteration  12: 4303924.085 ops/s
Iteration  13: 4310629.758 ops/s
Iteration  14: 4308005.275 ops/s
Iteration  15: 4307455.886 ops/s
Iteration  16: 4293352.381 ops/s
Iteration  17: 4290539.610 ops/s
Iteration  18: 4298590.875 ops/s
Iteration  19: 4305015.242 ops/s
Iteration  20: 4309754.333 ops/s
Iteration  21: 4300029.979 ops/s
Iteration  22: 4317429.777 ops/s
Iteration  23: 4303407.888 ops/s
Iteration  24: 4303776.460 ops/s
Iteration  25: 4317055.810 ops/s
Iteration  26: 4316484.206 ops/s
Iteration  27: 4313120.716 ops/s
Iteration  28: 4299857.162 ops/s
Iteration  29: 4309555.702 ops/s
Iteration  30: 4302012.747 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_tap":
  4302398.154 ±(99.9%) 6540.053 ops/s [Average]
  (min, avg, max) = (4278145.575, 4302398.154, 4317429.777), stdev = 9788.845
  CI (99.9%): [4295858.101, 4308938.207] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_tap  thrpt   30  4302398.154 ± 6540.053  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testAppendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testAppendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 780818.391 ops/s
# Warmup Iteration   2: 1961331.945 ops/s
# Warmup Iteration   3: 1983074.195 ops/s
# Warmup Iteration   4: 1656496.350 ops/s
# Warmup Iteration   5: 1989934.179 ops/s
# Warmup Iteration   6: 1988820.693 ops/s
# Warmup Iteration   7: 1987109.784 ops/s
# Warmup Iteration   8: 1994690.258 ops/s
# Warmup Iteration   9: 1993442.441 ops/s
# Warmup Iteration  10: 1995447.311 ops/s
# Warmup Iteration  11: 1990298.882 ops/s
# Warmup Iteration  12: 1989285.886 ops/s
# Warmup Iteration  13: 1991516.937 ops/s
# Warmup Iteration  14: 1990924.468 ops/s
# Warmup Iteration  15: 1984115.821 ops/s
# Warmup Iteration  16: 1993415.074 ops/s
# Warmup Iteration  17: 1986243.559 ops/s
# Warmup Iteration  18: 1988815.735 ops/s
# Warmup Iteration  19: 1990380.842 ops/s
# Warmup Iteration  20: 1981129.795 ops/s
# Warmup Iteration  21: 1979964.480 ops/s
# Warmup Iteration  22: 1994615.651 ops/s
# Warmup Iteration  23: 1986404.746 ops/s
# Warmup Iteration  24: 1995222.151 ops/s
# Warmup Iteration  25: 1992430.670 ops/s
# Warmup Iteration  26: 1995047.590 ops/s
# Warmup Iteration  27: 1985369.251 ops/s
# Warmup Iteration  28: 1993000.956 ops/s
# Warmup Iteration  29: 1990640.336 ops/s
# Warmup Iteration  30: 1991651.377 ops/s
Iteration   1: 1994608.436 ops/s
Iteration   2: 1990324.223 ops/s
Iteration   3: 1997357.795 ops/s
Iteration   4: 1992025.590 ops/s
Iteration   5: 1995784.963 ops/s
Iteration   6: 1990728.901 ops/s
Iteration   7: 1988926.926 ops/s
Iteration   8: 1988198.099 ops/s
Iteration   9: 1994348.882 ops/s
Iteration  10: 1984009.488 ops/s
Iteration  11: 1996882.174 ops/s
Iteration  12: 1997646.828 ops/s
Iteration  13: 1996783.403 ops/s
Iteration  14: 1985779.720 ops/s
Iteration  15: 1990562.246 ops/s
Iteration  16: 1991485.382 ops/s
Iteration  17: 1992142.428 ops/s
Iteration  18: 1996615.515 ops/s
Iteration  19: 1997047.514 ops/s
Iteration  20: 1987157.292 ops/s
Iteration  21: 1984175.355 ops/s
Iteration  22: 1987910.788 ops/s
Iteration  23: 1999688.940 ops/s
Iteration  24: 1993916.509 ops/s
Iteration  25: 1985676.580 ops/s
Iteration  26: 1984514.232 ops/s
Iteration  27: 1983066.014 ops/s
Iteration  28: 1990048.619 ops/s
Iteration  29: 1978121.704 ops/s
Iteration  30: 1992985.145 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testAppendString":
  1990950.656 ±(99.9%) 3549.082 ops/s [Average]
  (min, avg, max) = (1978121.704, 1990950.656, 1999688.940), stdev = 5312.099
  CI (99.9%): [1987401.574, 1994499.738] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testAppendString  thrpt   30  1990950.656 ± 3549.082  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testMakeString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testMakeString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 793581.458 ops/s
# Warmup Iteration   2: 2000686.024 ops/s
# Warmup Iteration   3: 1995663.642 ops/s
# Warmup Iteration   4: 1671364.706 ops/s
# Warmup Iteration   5: 2004025.562 ops/s
# Warmup Iteration   6: 2009567.317 ops/s
# Warmup Iteration   7: 1998657.404 ops/s
# Warmup Iteration   8: 1989938.584 ops/s
# Warmup Iteration   9: 1995748.915 ops/s
# Warmup Iteration  10: 2001429.900 ops/s
# Warmup Iteration  11: 2003707.374 ops/s
# Warmup Iteration  12: 2004756.416 ops/s
# Warmup Iteration  13: 1999742.879 ops/s
# Warmup Iteration  14: 1997867.157 ops/s
# Warmup Iteration  15: 1996828.961 ops/s
# Warmup Iteration  16: 1999442.863 ops/s
# Warmup Iteration  17: 2002311.148 ops/s
# Warmup Iteration  18: 2007395.235 ops/s
# Warmup Iteration  19: 2001096.301 ops/s
# Warmup Iteration  20: 2004508.879 ops/s
# Warmup Iteration  21: 1998734.023 ops/s
# Warmup Iteration  22: 1998629.987 ops/s
# Warmup Iteration  23: 2004040.259 ops/s
# Warmup Iteration  24: 2006358.981 ops/s
# Warmup Iteration  25: 2001543.061 ops/s
# Warmup Iteration  26: 1994646.221 ops/s
# Warmup Iteration  27: 1994043.630 ops/s
# Warmup Iteration  28: 1995437.361 ops/s
# Warmup Iteration  29: 2001384.082 ops/s
# Warmup Iteration  30: 2000880.243 ops/s
Iteration   1: 2000135.264 ops/s
Iteration   2: 2000729.030 ops/s
Iteration   3: 1996897.230 ops/s
Iteration   4: 1995246.014 ops/s
Iteration   5: 1997799.995 ops/s
Iteration   6: 1998434.392 ops/s
Iteration   7: 2004996.645 ops/s
Iteration   8: 2000650.427 ops/s
Iteration   9: 1997406.803 ops/s
Iteration  10: 1994713.948 ops/s
Iteration  11: 2001198.507 ops/s
Iteration  12: 1998817.387 ops/s
Iteration  13: 2005494.429 ops/s
Iteration  14: 1993562.130 ops/s
Iteration  15: 1996360.843 ops/s
Iteration  16: 1998548.675 ops/s
Iteration  17: 1997065.625 ops/s
Iteration  18: 2000855.386 ops/s
Iteration  19: 2002958.647 ops/s
Iteration  20: 2006191.773 ops/s
Iteration  21: 2001325.108 ops/s
Iteration  22: 2013492.026 ops/s
Iteration  23: 1995526.509 ops/s
Iteration  24: 1996893.299 ops/s
Iteration  25: 1999458.271 ops/s
Iteration  26: 1996356.946 ops/s
Iteration  27: 2002357.427 ops/s
Iteration  28: 1996042.749 ops/s
Iteration  29: 2006856.652 ops/s
Iteration  30: 1999227.081 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testMakeString":
  1999853.307 ±(99.9%) 2887.238 ops/s [Average]
  (min, avg, max) = (1993562.130, 1999853.307, 2013492.026), stdev = 4321.483
  CI (99.9%): [1996966.069, 2002740.545] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_testMakeString  thrpt   30  1999853.307 ± 2887.238  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_with$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_with

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 559238.976 ops/s
# Warmup Iteration   2: 671320.186 ops/s
# Warmup Iteration   3: 859664.320 ops/s
# Warmup Iteration   4: 865873.513 ops/s
# Warmup Iteration   5: 862805.700 ops/s
# Warmup Iteration   6: 863180.629 ops/s
# Warmup Iteration   7: 860813.153 ops/s
# Warmup Iteration   8: 860341.603 ops/s
# Warmup Iteration   9: 804056.997 ops/s
# Warmup Iteration  10: 778105.564 ops/s
# Warmup Iteration  11: 864326.377 ops/s
# Warmup Iteration  12: 866045.740 ops/s
# Warmup Iteration  13: 865108.025 ops/s
# Warmup Iteration  14: 862817.968 ops/s
# Warmup Iteration  15: 867199.196 ops/s
# Warmup Iteration  16: 868384.143 ops/s
# Warmup Iteration  17: 911048.837 ops/s
# Warmup Iteration  18: 909243.369 ops/s
# Warmup Iteration  19: 916513.913 ops/s
# Warmup Iteration  20: 912542.014 ops/s
# Warmup Iteration  21: 912754.902 ops/s
# Warmup Iteration  22: 910695.798 ops/s
# Warmup Iteration  23: 909886.567 ops/s
# Warmup Iteration  24: 911669.240 ops/s
# Warmup Iteration  25: 912734.319 ops/s
# Warmup Iteration  26: 913816.363 ops/s
# Warmup Iteration  27: 913417.822 ops/s
# Warmup Iteration  28: 914359.606 ops/s
# Warmup Iteration  29: 916052.179 ops/s
# Warmup Iteration  30: 913775.812 ops/s
Iteration   1: 914762.807 ops/s
Iteration   2: 910675.466 ops/s
Iteration   3: 913300.818 ops/s
Iteration   4: 912963.008 ops/s
Iteration   5: 915831.598 ops/s
Iteration   6: 915268.910 ops/s
Iteration   7: 913935.898 ops/s
Iteration   8: 912163.861 ops/s
Iteration   9: 913220.448 ops/s
Iteration  10: 912623.451 ops/s
Iteration  11: 914136.576 ops/s
Iteration  12: 912884.381 ops/s
Iteration  13: 911965.634 ops/s
Iteration  14: 913094.378 ops/s
Iteration  15: 911723.515 ops/s
Iteration  16: 912370.538 ops/s
Iteration  17: 918182.686 ops/s
Iteration  18: 910773.297 ops/s
Iteration  19: 913809.159 ops/s
Iteration  20: 910740.255 ops/s
Iteration  21: 910468.672 ops/s
Iteration  22: 911392.557 ops/s
Iteration  23: 914289.248 ops/s
Iteration  24: 916027.449 ops/s
Iteration  25: 911073.219 ops/s
Iteration  26: 912082.666 ops/s
Iteration  27: 912774.014 ops/s
Iteration  28: 912458.347 ops/s
Iteration  29: 915695.302 ops/s
Iteration  30: 915289.598 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_with":
  913199.259 ±(99.9%) 1250.274 ops/s [Average]
  (min, avg, max) = (910468.672, 913199.259, 918182.686), stdev = 1871.351
  CI (99.9%): [911948.985, 914449.533] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_with  thrpt   30  913199.259 ± 1250.274  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 553905.410 ops/s
# Warmup Iteration   2: 672958.844 ops/s
# Warmup Iteration   3: 872016.600 ops/s
# Warmup Iteration   4: 877606.159 ops/s
# Warmup Iteration   5: 870452.660 ops/s
# Warmup Iteration   6: 871626.834 ops/s
# Warmup Iteration   7: 874558.365 ops/s
# Warmup Iteration   8: 873085.284 ops/s
# Warmup Iteration   9: 788654.337 ops/s
# Warmup Iteration  10: 811009.345 ops/s
# Warmup Iteration  11: 876366.537 ops/s
# Warmup Iteration  12: 876451.951 ops/s
# Warmup Iteration  13: 876110.587 ops/s
# Warmup Iteration  14: 876205.234 ops/s
# Warmup Iteration  15: 873856.077 ops/s
# Warmup Iteration  16: 876924.802 ops/s
# Warmup Iteration  17: 924429.550 ops/s
# Warmup Iteration  18: 924896.859 ops/s
# Warmup Iteration  19: 922729.719 ops/s
# Warmup Iteration  20: 923590.312 ops/s
# Warmup Iteration  21: 925930.492 ops/s
# Warmup Iteration  22: 925188.169 ops/s
# Warmup Iteration  23: 925041.314 ops/s
# Warmup Iteration  24: 929472.957 ops/s
# Warmup Iteration  25: 924219.584 ops/s
# Warmup Iteration  26: 926057.916 ops/s
# Warmup Iteration  27: 927226.857 ops/s
# Warmup Iteration  28: 926232.645 ops/s
# Warmup Iteration  29: 923139.903 ops/s
# Warmup Iteration  30: 925848.285 ops/s
Iteration   1: 928294.449 ops/s
Iteration   2: 929062.868 ops/s
Iteration   3: 924669.164 ops/s
Iteration   4: 917530.837 ops/s
Iteration   5: 925952.785 ops/s
Iteration   6: 925695.799 ops/s
Iteration   7: 925005.960 ops/s
Iteration   8: 929945.282 ops/s
Iteration   9: 928559.021 ops/s
Iteration  10: 924148.694 ops/s
Iteration  11: 928423.158 ops/s
Iteration  12: 926827.697 ops/s
Iteration  13: 925225.975 ops/s
Iteration  14: 925146.974 ops/s
Iteration  15: 926270.573 ops/s
Iteration  16: 926617.888 ops/s
Iteration  17: 924006.232 ops/s
Iteration  18: 925728.561 ops/s
Iteration  19: 924467.879 ops/s
Iteration  20: 921778.716 ops/s
Iteration  21: 925637.643 ops/s
Iteration  22: 924972.460 ops/s
Iteration  23: 924843.779 ops/s
Iteration  24: 923589.226 ops/s
Iteration  25: 926231.554 ops/s
Iteration  26: 924495.141 ops/s
Iteration  27: 924824.455 ops/s
Iteration  28: 925819.383 ops/s
Iteration  29: 926700.528 ops/s
Iteration  30: 920658.204 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withAll":
  925371.030 ±(99.9%) 1648.472 ops/s [Average]
  (min, avg, max) = (917530.837, 925371.030, 929945.282), stdev = 2467.356
  CI (99.9%): [923722.557, 927019.502] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withAll  thrpt   30  925371.030 ± 1648.472  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_without$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_without

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 549786.288 ops/s
# Warmup Iteration   2: 660185.869 ops/s
# Warmup Iteration   3: 856428.863 ops/s
# Warmup Iteration   4: 858112.245 ops/s
# Warmup Iteration   5: 854228.069 ops/s
# Warmup Iteration   6: 858998.122 ops/s
# Warmup Iteration   7: 858957.080 ops/s
# Warmup Iteration   8: 861230.906 ops/s
# Warmup Iteration   9: 813615.004 ops/s
# Warmup Iteration  10: 757343.317 ops/s
# Warmup Iteration  11: 857637.423 ops/s
# Warmup Iteration  12: 862348.805 ops/s
# Warmup Iteration  13: 856734.649 ops/s
# Warmup Iteration  14: 859053.744 ops/s
# Warmup Iteration  15: 861276.171 ops/s
# Warmup Iteration  16: 861066.390 ops/s
# Warmup Iteration  17: 904291.275 ops/s
# Warmup Iteration  18: 907158.207 ops/s
# Warmup Iteration  19: 904093.478 ops/s
# Warmup Iteration  20: 904488.989 ops/s
# Warmup Iteration  21: 901726.024 ops/s
# Warmup Iteration  22: 905372.218 ops/s
# Warmup Iteration  23: 906842.831 ops/s
# Warmup Iteration  24: 901524.719 ops/s
# Warmup Iteration  25: 906372.364 ops/s
# Warmup Iteration  26: 909418.050 ops/s
# Warmup Iteration  27: 902376.434 ops/s
# Warmup Iteration  28: 906254.369 ops/s
# Warmup Iteration  29: 904571.933 ops/s
# Warmup Iteration  30: 906315.946 ops/s
Iteration   1: 904281.092 ops/s
Iteration   2: 906007.777 ops/s
Iteration   3: 901366.606 ops/s
Iteration   4: 904542.915 ops/s
Iteration   5: 904648.496 ops/s
Iteration   6: 906573.149 ops/s
Iteration   7: 901405.460 ops/s
Iteration   8: 904529.052 ops/s
Iteration   9: 903792.466 ops/s
Iteration  10: 902369.608 ops/s
Iteration  11: 904912.973 ops/s
Iteration  12: 906192.340 ops/s
Iteration  13: 903547.038 ops/s
Iteration  14: 898677.595 ops/s
Iteration  15: 907869.733 ops/s
Iteration  16: 902834.206 ops/s
Iteration  17: 899756.535 ops/s
Iteration  18: 905815.630 ops/s
Iteration  19: 904394.256 ops/s
Iteration  20: 899053.456 ops/s
Iteration  21: 896070.283 ops/s
Iteration  22: 905189.719 ops/s
Iteration  23: 903003.778 ops/s
Iteration  24: 907097.115 ops/s
Iteration  25: 905800.927 ops/s
Iteration  26: 900466.937 ops/s
Iteration  27: 901537.894 ops/s
Iteration  28: 895982.334 ops/s
Iteration  29: 900726.730 ops/s
Iteration  30: 904608.578 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_without":
  903101.823 ±(99.9%) 2047.503 ops/s [Average]
  (min, avg, max) = (895982.334, 903101.823, 907869.733), stdev = 3064.606
  CI (99.9%): [901054.320, 905149.326] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_without  thrpt   30  903101.823 ± 2047.503  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withoutAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withoutAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546349.413 ops/s
# Warmup Iteration   2: 659751.944 ops/s
# Warmup Iteration   3: 857996.639 ops/s
# Warmup Iteration   4: 865288.566 ops/s
# Warmup Iteration   5: 860936.618 ops/s
# Warmup Iteration   6: 858876.465 ops/s
# Warmup Iteration   7: 861933.429 ops/s
# Warmup Iteration   8: 860728.786 ops/s
# Warmup Iteration   9: 800515.286 ops/s
# Warmup Iteration  10: 777600.148 ops/s
# Warmup Iteration  11: 863597.301 ops/s
# Warmup Iteration  12: 867087.104 ops/s
# Warmup Iteration  13: 864884.665 ops/s
# Warmup Iteration  14: 867266.694 ops/s
# Warmup Iteration  15: 863238.226 ops/s
# Warmup Iteration  16: 866514.204 ops/s
# Warmup Iteration  17: 913915.326 ops/s
# Warmup Iteration  18: 916170.136 ops/s
# Warmup Iteration  19: 912492.615 ops/s
# Warmup Iteration  20: 916821.743 ops/s
# Warmup Iteration  21: 916766.505 ops/s
# Warmup Iteration  22: 913928.484 ops/s
# Warmup Iteration  23: 916053.383 ops/s
# Warmup Iteration  24: 917576.402 ops/s
# Warmup Iteration  25: 912481.257 ops/s
# Warmup Iteration  26: 913525.703 ops/s
# Warmup Iteration  27: 916033.841 ops/s
# Warmup Iteration  28: 915467.319 ops/s
# Warmup Iteration  29: 917350.832 ops/s
# Warmup Iteration  30: 915512.821 ops/s
Iteration   1: 917723.256 ops/s
Iteration   2: 917185.519 ops/s
Iteration   3: 915281.379 ops/s
Iteration   4: 916650.624 ops/s
Iteration   5: 918738.521 ops/s
Iteration   6: 919605.269 ops/s
Iteration   7: 916933.688 ops/s
Iteration   8: 914209.341 ops/s
Iteration   9: 914599.594 ops/s
Iteration  10: 912950.704 ops/s
Iteration  11: 914776.950 ops/s
Iteration  12: 916922.966 ops/s
Iteration  13: 916843.347 ops/s
Iteration  14: 916534.588 ops/s
Iteration  15: 912639.515 ops/s
Iteration  16: 914021.411 ops/s
Iteration  17: 912098.807 ops/s
Iteration  18: 917060.950 ops/s
Iteration  19: 914686.213 ops/s
Iteration  20: 916735.815 ops/s
Iteration  21: 911565.511 ops/s
Iteration  22: 917310.338 ops/s
Iteration  23: 919104.947 ops/s
Iteration  24: 910507.882 ops/s
Iteration  25: 909346.853 ops/s
Iteration  26: 912596.824 ops/s
Iteration  27: 914894.456 ops/s
Iteration  28: 909402.273 ops/s
Iteration  29: 915674.184 ops/s
Iteration  30: 910053.906 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withoutAll":
  914888.521 ±(99.9%) 1915.995 ops/s [Average]
  (min, avg, max) = (909346.853, 914888.521, 919605.269), stdev = 2867.771
  CI (99.9%): [912972.526, 916804.516] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_withoutAll  thrpt   30  914888.521 ± 1915.995  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zip$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zip

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 230457.998 ops/s
# Warmup Iteration   2: 401399.516 ops/s
# Warmup Iteration   3: 500762.661 ops/s
# Warmup Iteration   4: 505151.698 ops/s
# Warmup Iteration   5: 504529.908 ops/s
# Warmup Iteration   6: 470597.515 ops/s
# Warmup Iteration   7: 450560.742 ops/s
# Warmup Iteration   8: 503925.096 ops/s
# Warmup Iteration   9: 505378.710 ops/s
# Warmup Iteration  10: 504167.308 ops/s
# Warmup Iteration  11: 503723.313 ops/s
# Warmup Iteration  12: 504220.793 ops/s
# Warmup Iteration  13: 503686.433 ops/s
# Warmup Iteration  14: 505108.295 ops/s
# Warmup Iteration  15: 503991.051 ops/s
# Warmup Iteration  16: 504834.416 ops/s
# Warmup Iteration  17: 504204.964 ops/s
# Warmup Iteration  18: 502583.647 ops/s
# Warmup Iteration  19: 504340.411 ops/s
# Warmup Iteration  20: 505427.689 ops/s
# Warmup Iteration  21: 504838.677 ops/s
# Warmup Iteration  22: 506225.886 ops/s
# Warmup Iteration  23: 505215.221 ops/s
# Warmup Iteration  24: 503211.348 ops/s
# Warmup Iteration  25: 504586.778 ops/s
# Warmup Iteration  26: 505136.354 ops/s
# Warmup Iteration  27: 505186.590 ops/s
# Warmup Iteration  28: 505350.905 ops/s
# Warmup Iteration  29: 506038.563 ops/s
# Warmup Iteration  30: 506475.418 ops/s
Iteration   1: 507236.638 ops/s
Iteration   2: 504971.133 ops/s
Iteration   3: 507292.224 ops/s
Iteration   4: 507095.610 ops/s
Iteration   5: 507798.923 ops/s
Iteration   6: 506036.924 ops/s
Iteration   7: 507988.944 ops/s
Iteration   8: 506872.448 ops/s
Iteration   9: 507670.515 ops/s
Iteration  10: 505056.541 ops/s
Iteration  11: 508800.200 ops/s
Iteration  12: 506015.603 ops/s
Iteration  13: 506922.737 ops/s
Iteration  14: 504481.828 ops/s
Iteration  15: 506790.232 ops/s
Iteration  16: 506079.894 ops/s
Iteration  17: 506461.084 ops/s
Iteration  18: 506558.604 ops/s
Iteration  19: 507709.622 ops/s
Iteration  20: 504310.849 ops/s
Iteration  21: 504625.155 ops/s
Iteration  22: 508240.921 ops/s
Iteration  23: 506055.917 ops/s
Iteration  24: 505452.263 ops/s
Iteration  25: 507969.692 ops/s
Iteration  26: 506560.732 ops/s
Iteration  27: 503159.600 ops/s
Iteration  28: 505034.437 ops/s
Iteration  29: 506665.389 ops/s
Iteration  30: 505700.044 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zip":
  506387.157 ±(99.9%) 890.059 ops/s [Average]
  (min, avg, max) = (503159.600, 506387.157, 508800.200), stdev = 1332.199
  CI (99.9%): [505497.097, 507277.216] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zip  thrpt   30  506387.157 ± 890.059  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 551658.830 ops/s
# Warmup Iteration   2: 1305896.656 ops/s
# Warmup Iteration   3: 1390120.844 ops/s
# Warmup Iteration   4: 1311096.353 ops/s
# Warmup Iteration   5: 1246130.585 ops/s
# Warmup Iteration   6: 1393951.974 ops/s
# Warmup Iteration   7: 1405682.260 ops/s
# Warmup Iteration   8: 1408220.183 ops/s
# Warmup Iteration   9: 1403691.589 ops/s
# Warmup Iteration  10: 1404297.465 ops/s
# Warmup Iteration  11: 1405612.281 ops/s
# Warmup Iteration  12: 1403751.749 ops/s
# Warmup Iteration  13: 1406827.467 ops/s
# Warmup Iteration  14: 1405254.672 ops/s
# Warmup Iteration  15: 1402850.734 ops/s
# Warmup Iteration  16: 1404069.795 ops/s
# Warmup Iteration  17: 1406447.342 ops/s
# Warmup Iteration  18: 1405105.868 ops/s
# Warmup Iteration  19: 1402777.787 ops/s
# Warmup Iteration  20: 1403104.321 ops/s
# Warmup Iteration  21: 1407230.839 ops/s
# Warmup Iteration  22: 1402826.512 ops/s
# Warmup Iteration  23: 1402962.693 ops/s
# Warmup Iteration  24: 1407030.954 ops/s
# Warmup Iteration  25: 1402101.842 ops/s
# Warmup Iteration  26: 1404403.972 ops/s
# Warmup Iteration  27: 1406216.485 ops/s
# Warmup Iteration  28: 1407763.499 ops/s
# Warmup Iteration  29: 1401962.484 ops/s
# Warmup Iteration  30: 1400802.063 ops/s
Iteration   1: 1407388.456 ops/s
Iteration   2: 1405342.439 ops/s
Iteration   3: 1403167.129 ops/s
Iteration   4: 1399674.721 ops/s
Iteration   5: 1408863.636 ops/s
Iteration   6: 1407811.396 ops/s
Iteration   7: 1399535.764 ops/s
Iteration   8: 1408965.725 ops/s
Iteration   9: 1407117.646 ops/s
Iteration  10: 1400539.400 ops/s
Iteration  11: 1403740.540 ops/s
Iteration  12: 1400969.257 ops/s
Iteration  13: 1405698.088 ops/s
Iteration  14: 1406527.317 ops/s
Iteration  15: 1405854.820 ops/s
Iteration  16: 1402739.695 ops/s
Iteration  17: 1407436.050 ops/s
Iteration  18: 1406834.119 ops/s
Iteration  19: 1404754.132 ops/s
Iteration  20: 1408235.942 ops/s
Iteration  21: 1405784.243 ops/s
Iteration  22: 1407385.625 ops/s
Iteration  23: 1407712.888 ops/s
Iteration  24: 1399133.489 ops/s
Iteration  25: 1397821.792 ops/s
Iteration  26: 1400631.191 ops/s
Iteration  27: 1393743.625 ops/s
Iteration  28: 1404113.554 ops/s
Iteration  29: 1405656.583 ops/s
Iteration  30: 1394887.291 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex":
  1403935.552 ±(99.9%) 2750.658 ops/s [Average]
  (min, avg, max) = (1393743.625, 1403935.552, 1408965.725), stdev = 4117.055
  CI (99.9%): [1401184.894, 1406686.209] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsUnmodifiableTest._Benchmark.benchmark_zipWithIndex  thrpt   30  1403935.552 ± 2750.658  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 899024.592 ops/s
# Warmup Iteration   2: 1849225.877 ops/s
# Warmup Iteration   3: 1987249.589 ops/s
# Warmup Iteration   4: 1998795.848 ops/s
# Warmup Iteration   5: 1653076.925 ops/s
# Warmup Iteration   6: 2008977.537 ops/s
# Warmup Iteration   7: 1994819.718 ops/s
# Warmup Iteration   8: 2005412.966 ops/s
# Warmup Iteration   9: 1990625.310 ops/s
# Warmup Iteration  10: 2001223.654 ops/s
# Warmup Iteration  11: 2004233.808 ops/s
# Warmup Iteration  12: 1996206.625 ops/s
# Warmup Iteration  13: 2001280.261 ops/s
# Warmup Iteration  14: 1994824.222 ops/s
# Warmup Iteration  15: 2000050.293 ops/s
# Warmup Iteration  16: 2002438.358 ops/s
# Warmup Iteration  17: 1994431.651 ops/s
# Warmup Iteration  18: 2000994.381 ops/s
# Warmup Iteration  19: 2006195.481 ops/s
# Warmup Iteration  20: 1997323.859 ops/s
# Warmup Iteration  21: 2006505.748 ops/s
# Warmup Iteration  22: 2007898.649 ops/s
# Warmup Iteration  23: 1999632.665 ops/s
# Warmup Iteration  24: 1997853.516 ops/s
# Warmup Iteration  25: 2007511.315 ops/s
# Warmup Iteration  26: 2004821.997 ops/s
# Warmup Iteration  27: 1997892.404 ops/s
# Warmup Iteration  28: 2009939.837 ops/s
# Warmup Iteration  29: 2001524.568 ops/s
# Warmup Iteration  30: 2003238.591 ops/s
Iteration   1: 2001388.572 ops/s
Iteration   2: 2003323.662 ops/s
Iteration   3: 2012887.926 ops/s
Iteration   4: 1998827.309 ops/s
Iteration   5: 2006154.834 ops/s
Iteration   6: 2010065.641 ops/s
Iteration   7: 2005907.990 ops/s
Iteration   8: 1992492.477 ops/s
Iteration   9: 2006171.886 ops/s
Iteration  10: 1999833.386 ops/s
Iteration  11: 2004606.231 ops/s
Iteration  12: 2006701.284 ops/s
Iteration  13: 2001568.091 ops/s
Iteration  14: 2002161.861 ops/s
Iteration  15: 1998177.009 ops/s
Iteration  16: 2006806.535 ops/s
Iteration  17: 2007015.680 ops/s
Iteration  18: 2008354.149 ops/s
Iteration  19: 2012707.459 ops/s
Iteration  20: 2000163.683 ops/s
Iteration  21: 2001156.666 ops/s
Iteration  22: 2008423.319 ops/s
Iteration  23: 2004265.258 ops/s
Iteration  24: 2004397.572 ops/s
Iteration  25: 2009974.654 ops/s
Iteration  26: 2003749.264 ops/s
Iteration  27: 1995558.840 ops/s
Iteration  28: 1998006.356 ops/s
Iteration  29: 2009008.546 ops/s
Iteration  30: 2008816.639 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAll":
  2004289.093 ±(99.9%) 3297.739 ops/s [Average]
  (min, avg, max) = (1992492.477, 2004289.093, 2012887.926), stdev = 4935.900
  CI (99.9%): [2000991.354, 2007586.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAll  thrpt   30  2004289.093 ± 3297.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 432514.813 ops/s
# Warmup Iteration   2: 895219.298 ops/s
# Warmup Iteration   3: 962239.603 ops/s
# Warmup Iteration   4: 964578.813 ops/s
# Warmup Iteration   5: 802010.832 ops/s
# Warmup Iteration   6: 964824.569 ops/s
# Warmup Iteration   7: 960824.491 ops/s
# Warmup Iteration   8: 964919.116 ops/s
# Warmup Iteration   9: 960747.511 ops/s
# Warmup Iteration  10: 965687.425 ops/s
# Warmup Iteration  11: 967689.401 ops/s
# Warmup Iteration  12: 956660.796 ops/s
# Warmup Iteration  13: 965197.058 ops/s
# Warmup Iteration  14: 963412.561 ops/s
# Warmup Iteration  15: 959745.708 ops/s
# Warmup Iteration  16: 966106.265 ops/s
# Warmup Iteration  17: 961594.061 ops/s
# Warmup Iteration  18: 962689.313 ops/s
# Warmup Iteration  19: 954909.921 ops/s
# Warmup Iteration  20: 959161.936 ops/s
# Warmup Iteration  21: 961202.357 ops/s
# Warmup Iteration  22: 957356.908 ops/s
# Warmup Iteration  23: 961074.658 ops/s
# Warmup Iteration  24: 960025.064 ops/s
# Warmup Iteration  25: 964304.981 ops/s
# Warmup Iteration  26: 963778.166 ops/s
# Warmup Iteration  27: 965849.070 ops/s
# Warmup Iteration  28: 964803.323 ops/s
# Warmup Iteration  29: 960333.552 ops/s
# Warmup Iteration  30: 963707.371 ops/s
Iteration   1: 962837.603 ops/s
Iteration   2: 966221.137 ops/s
Iteration   3: 960522.549 ops/s
Iteration   4: 957806.899 ops/s
Iteration   5: 964649.381 ops/s
Iteration   6: 962296.010 ops/s
Iteration   7: 964103.749 ops/s
Iteration   8: 960067.150 ops/s
Iteration   9: 964943.758 ops/s
Iteration  10: 958165.990 ops/s
Iteration  11: 958415.092 ops/s
Iteration  12: 964152.866 ops/s
Iteration  13: 962409.543 ops/s
Iteration  14: 960055.031 ops/s
Iteration  15: 960678.532 ops/s
Iteration  16: 964619.887 ops/s
Iteration  17: 956582.895 ops/s
Iteration  18: 960541.398 ops/s
Iteration  19: 960993.184 ops/s
Iteration  20: 965819.635 ops/s
Iteration  21: 966960.148 ops/s
Iteration  22: 965456.404 ops/s
Iteration  23: 961143.536 ops/s
Iteration  24: 954996.841 ops/s
Iteration  25: 962115.370 ops/s
Iteration  26: 963279.474 ops/s
Iteration  27: 959255.163 ops/s
Iteration  28: 961648.350 ops/s
Iteration  29: 965474.644 ops/s
Iteration  30: 964675.253 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable":
  962029.582 ±(99.9%) 2034.374 ops/s [Average]
  (min, avg, max) = (954996.841, 962029.582, 966960.148), stdev = 3044.956
  CI (99.9%): [959995.208, 964063.957] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addAllIterable  thrpt   30  962029.582 ± 2034.374  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addOccurrences$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addOccurrences

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 354399.020 ops/s
# Warmup Iteration   2: 748314.731 ops/s
# Warmup Iteration   3: 814141.756 ops/s
# Warmup Iteration   4: 818238.196 ops/s
# Warmup Iteration   5: 682143.366 ops/s
# Warmup Iteration   6: 820548.975 ops/s
# Warmup Iteration   7: 823324.872 ops/s
# Warmup Iteration   8: 822483.975 ops/s
# Warmup Iteration   9: 823949.976 ops/s
# Warmup Iteration  10: 820864.128 ops/s
# Warmup Iteration  11: 826036.696 ops/s
# Warmup Iteration  12: 821921.551 ops/s
# Warmup Iteration  13: 823106.635 ops/s
# Warmup Iteration  14: 821732.980 ops/s
# Warmup Iteration  15: 822112.992 ops/s
# Warmup Iteration  16: 824442.309 ops/s
# Warmup Iteration  17: 821894.972 ops/s
# Warmup Iteration  18: 824959.697 ops/s
# Warmup Iteration  19: 826123.969 ops/s
# Warmup Iteration  20: 821830.406 ops/s
# Warmup Iteration  21: 823913.496 ops/s
# Warmup Iteration  22: 824193.190 ops/s
# Warmup Iteration  23: 820657.362 ops/s
# Warmup Iteration  24: 823890.633 ops/s
# Warmup Iteration  25: 823383.260 ops/s
# Warmup Iteration  26: 823373.319 ops/s
# Warmup Iteration  27: 823929.266 ops/s
# Warmup Iteration  28: 823222.245 ops/s
# Warmup Iteration  29: 821781.092 ops/s
# Warmup Iteration  30: 821758.626 ops/s
Iteration   1: 821655.386 ops/s
Iteration   2: 825910.814 ops/s
Iteration   3: 822861.261 ops/s
Iteration   4: 826086.531 ops/s
Iteration   5: 824036.114 ops/s
Iteration   6: 826257.232 ops/s
Iteration   7: 822522.107 ops/s
Iteration   8: 824986.555 ops/s
Iteration   9: 820671.272 ops/s
Iteration  10: 821827.562 ops/s
Iteration  11: 823655.542 ops/s
Iteration  12: 822005.514 ops/s
Iteration  13: 820255.578 ops/s
Iteration  14: 819903.525 ops/s
Iteration  15: 822567.994 ops/s
Iteration  16: 825936.448 ops/s
Iteration  17: 822705.660 ops/s
Iteration  18: 823994.445 ops/s
Iteration  19: 823595.726 ops/s
Iteration  20: 821160.897 ops/s
Iteration  21: 819558.160 ops/s
Iteration  22: 823061.195 ops/s
Iteration  23: 825271.031 ops/s
Iteration  24: 821820.496 ops/s
Iteration  25: 825865.209 ops/s
Iteration  26: 828015.461 ops/s
Iteration  27: 819831.640 ops/s
Iteration  28: 824254.737 ops/s
Iteration  29: 822231.723 ops/s
Iteration  30: 826854.614 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addOccurrences":
  823312.014 ±(99.9%) 1522.252 ops/s [Average]
  (min, avg, max) = (819558.160, 823312.014, 828015.461), stdev = 2278.435
  CI (99.9%): [821789.763, 824834.266] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_addOccurrences  thrpt   30  823312.014 ± 1522.252  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856157.199 ops/s
# Warmup Iteration   2: 1810963.875 ops/s
# Warmup Iteration   3: 1895029.879 ops/s
# Warmup Iteration   4: 1902645.260 ops/s
# Warmup Iteration   5: 1593420.772 ops/s
# Warmup Iteration   6: 1899007.268 ops/s
# Warmup Iteration   7: 1918027.013 ops/s
# Warmup Iteration   8: 1929468.685 ops/s
# Warmup Iteration   9: 1912186.199 ops/s
# Warmup Iteration  10: 1898508.023 ops/s
# Warmup Iteration  11: 1908172.573 ops/s
# Warmup Iteration  12: 1908999.046 ops/s
# Warmup Iteration  13: 1919929.333 ops/s
# Warmup Iteration  14: 1917622.812 ops/s
# Warmup Iteration  15: 1907785.596 ops/s
# Warmup Iteration  16: 1912359.145 ops/s
# Warmup Iteration  17: 1914392.371 ops/s
# Warmup Iteration  18: 1903583.668 ops/s
# Warmup Iteration  19: 1924647.676 ops/s
# Warmup Iteration  20: 1912960.059 ops/s
# Warmup Iteration  21: 1916293.745 ops/s
# Warmup Iteration  22: 1910386.149 ops/s
# Warmup Iteration  23: 1919521.245 ops/s
# Warmup Iteration  24: 1920379.442 ops/s
# Warmup Iteration  25: 1907415.591 ops/s
# Warmup Iteration  26: 1906175.615 ops/s
# Warmup Iteration  27: 1923229.539 ops/s
# Warmup Iteration  28: 1908277.201 ops/s
# Warmup Iteration  29: 1915850.187 ops/s
# Warmup Iteration  30: 1925132.379 ops/s
Iteration   1: 1918138.834 ops/s
Iteration   2: 1911814.312 ops/s
Iteration   3: 1914692.233 ops/s
Iteration   4: 1936498.602 ops/s
Iteration   5: 1924955.567 ops/s
Iteration   6: 1918727.993 ops/s
Iteration   7: 1910816.506 ops/s
Iteration   8: 1896927.469 ops/s
Iteration   9: 1902711.119 ops/s
Iteration  10: 1900216.178 ops/s
Iteration  11: 1917100.426 ops/s
Iteration  12: 1911159.437 ops/s
Iteration  13: 1907584.714 ops/s
Iteration  14: 1920125.799 ops/s
Iteration  15: 1919758.608 ops/s
Iteration  16: 1925674.914 ops/s
Iteration  17: 1928618.769 ops/s
Iteration  18: 1909581.785 ops/s
Iteration  19: 1895332.587 ops/s
Iteration  20: 1926036.195 ops/s
Iteration  21: 1911824.591 ops/s
Iteration  22: 1901339.149 ops/s
Iteration  23: 1919633.532 ops/s
Iteration  24: 1928546.773 ops/s
Iteration  25: 1914762.045 ops/s
Iteration  26: 1920120.439 ops/s
Iteration  27: 1932125.781 ops/s
Iteration  28: 1916806.103 ops/s
Iteration  29: 1921127.605 ops/s
Iteration  30: 1926794.502 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating":
  1916318.419 ±(99.9%) 6928.223 ops/s [Average]
  (min, avg, max) = (1895332.587, 1916318.419, 1936498.602), stdev = 10369.839
  CI (99.9%): [1909390.196, 1923246.642] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByMutating  thrpt   30  1916318.419 ± 6928.223  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 623101.953 ops/s
# Warmup Iteration   2: 1206255.357 ops/s
# Warmup Iteration   3: 1318886.372 ops/s
# Warmup Iteration   4: 1334773.923 ops/s
# Warmup Iteration   5: 1094534.029 ops/s
# Warmup Iteration   6: 1331925.081 ops/s
# Warmup Iteration   7: 1333967.493 ops/s
# Warmup Iteration   8: 1336271.459 ops/s
# Warmup Iteration   9: 1335161.499 ops/s
# Warmup Iteration  10: 1335133.071 ops/s
# Warmup Iteration  11: 1336925.641 ops/s
# Warmup Iteration  12: 1337249.184 ops/s
# Warmup Iteration  13: 1334629.062 ops/s
# Warmup Iteration  14: 1334979.892 ops/s
# Warmup Iteration  15: 1335368.387 ops/s
# Warmup Iteration  16: 1333688.882 ops/s
# Warmup Iteration  17: 1334377.903 ops/s
# Warmup Iteration  18: 1331010.602 ops/s
# Warmup Iteration  19: 1336103.830 ops/s
# Warmup Iteration  20: 1334804.461 ops/s
# Warmup Iteration  21: 1338619.479 ops/s
# Warmup Iteration  22: 1336432.960 ops/s
# Warmup Iteration  23: 1339273.884 ops/s
# Warmup Iteration  24: 1332482.642 ops/s
# Warmup Iteration  25: 1332303.778 ops/s
# Warmup Iteration  26: 1335408.669 ops/s
# Warmup Iteration  27: 1333443.415 ops/s
# Warmup Iteration  28: 1341018.109 ops/s
# Warmup Iteration  29: 1336806.384 ops/s
# Warmup Iteration  30: 1331961.436 ops/s
Iteration   1: 1341881.154 ops/s
Iteration   2: 1335601.397 ops/s
Iteration   3: 1341489.661 ops/s
Iteration   4: 1334184.043 ops/s
Iteration   5: 1331552.691 ops/s
Iteration   6: 1332990.032 ops/s
Iteration   7: 1330463.581 ops/s
Iteration   8: 1338551.857 ops/s
Iteration   9: 1331697.134 ops/s
Iteration  10: 1332606.224 ops/s
Iteration  11: 1338365.902 ops/s
Iteration  12: 1340555.499 ops/s
Iteration  13: 1335121.574 ops/s
Iteration  14: 1332511.211 ops/s
Iteration  15: 1337786.114 ops/s
Iteration  16: 1338570.130 ops/s
Iteration  17: 1337736.131 ops/s
Iteration  18: 1335700.794 ops/s
Iteration  19: 1336519.625 ops/s
Iteration  20: 1331588.923 ops/s
Iteration  21: 1337054.638 ops/s
Iteration  22: 1337610.594 ops/s
Iteration  23: 1338581.337 ops/s
Iteration  24: 1332622.661 ops/s
Iteration  25: 1337890.045 ops/s
Iteration  26: 1331056.003 ops/s
Iteration  27: 1333671.559 ops/s
Iteration  28: 1339179.774 ops/s
Iteration  29: 1337906.069 ops/s
Iteration  30: 1336349.924 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating":
  1335913.209 ±(99.9%) 2166.673 ops/s [Average]
  (min, avg, max) = (1330463.581, 1335913.209, 1341881.154), stdev = 3242.974
  CI (99.9%): [1333746.536, 1338079.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_aggregateByNonMutating  thrpt   30  1335913.209 ± 2166.673  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 924954.629 ops/s
# Warmup Iteration   2: 2175107.550 ops/s
# Warmup Iteration   3: 2262563.002 ops/s
# Warmup Iteration   4: 1863429.147 ops/s
# Warmup Iteration   5: 2252824.042 ops/s
# Warmup Iteration   6: 2257268.088 ops/s
# Warmup Iteration   7: 2259205.944 ops/s
# Warmup Iteration   8: 2257137.216 ops/s
# Warmup Iteration   9: 2256095.253 ops/s
# Warmup Iteration  10: 2248003.053 ops/s
# Warmup Iteration  11: 2256509.006 ops/s
# Warmup Iteration  12: 2256948.503 ops/s
# Warmup Iteration  13: 2261776.365 ops/s
# Warmup Iteration  14: 2256289.059 ops/s
# Warmup Iteration  15: 2248198.765 ops/s
# Warmup Iteration  16: 2267777.855 ops/s
# Warmup Iteration  17: 2265212.462 ops/s
# Warmup Iteration  18: 2256428.220 ops/s
# Warmup Iteration  19: 2261344.415 ops/s
# Warmup Iteration  20: 2251181.651 ops/s
# Warmup Iteration  21: 2254176.267 ops/s
# Warmup Iteration  22: 2256482.941 ops/s
# Warmup Iteration  23: 2264085.207 ops/s
# Warmup Iteration  24: 2261582.907 ops/s
# Warmup Iteration  25: 2257300.693 ops/s
# Warmup Iteration  26: 2264044.240 ops/s
# Warmup Iteration  27: 2258747.193 ops/s
# Warmup Iteration  28: 2257621.996 ops/s
# Warmup Iteration  29: 2259252.990 ops/s
# Warmup Iteration  30: 2253430.129 ops/s
Iteration   1: 2262348.639 ops/s
Iteration   2: 2262508.862 ops/s
Iteration   3: 2243630.734 ops/s
Iteration   4: 2241604.609 ops/s
Iteration   5: 2263792.371 ops/s
Iteration   6: 2262592.748 ops/s
Iteration   7: 2258258.123 ops/s
Iteration   8: 2247559.908 ops/s
Iteration   9: 2250542.535 ops/s
Iteration  10: 2258690.787 ops/s
Iteration  11: 2262794.179 ops/s
Iteration  12: 2261760.732 ops/s
Iteration  13: 2257575.321 ops/s
Iteration  14: 2254180.784 ops/s
Iteration  15: 2251386.930 ops/s
Iteration  16: 2251078.596 ops/s
Iteration  17: 2241046.571 ops/s
Iteration  18: 2264620.513 ops/s
Iteration  19: 2256814.303 ops/s
Iteration  20: 2262690.752 ops/s
Iteration  21: 2249035.541 ops/s
Iteration  22: 2257184.706 ops/s
Iteration  23: 2240126.463 ops/s
Iteration  24: 2238192.809 ops/s
Iteration  25: 2257473.775 ops/s
Iteration  26: 2243706.724 ops/s
Iteration  27: 2243904.888 ops/s
Iteration  28: 2236303.014 ops/s
Iteration  29: 2247234.585 ops/s
Iteration  30: 2241216.650 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy":
  2252328.572 ±(99.9%) 5991.163 ops/s [Average]
  (min, avg, max) = (2236303.014, 2252328.572, 2264620.513), stdev = 8967.292
  CI (99.9%): [2246337.409, 2258319.735] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfy  thrpt   30  2252328.572 ± 5991.163  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 856211.314 ops/s
# Warmup Iteration   2: 1984134.575 ops/s
# Warmup Iteration   3: 2105401.306 ops/s
# Warmup Iteration   4: 1985717.602 ops/s
# Warmup Iteration   5: 1883780.754 ops/s
# Warmup Iteration   6: 2120420.206 ops/s
# Warmup Iteration   7: 2121790.527 ops/s
# Warmup Iteration   8: 2135270.174 ops/s
# Warmup Iteration   9: 2136923.314 ops/s
# Warmup Iteration  10: 2126858.362 ops/s
# Warmup Iteration  11: 2134965.844 ops/s
# Warmup Iteration  12: 2134871.128 ops/s
# Warmup Iteration  13: 2130494.841 ops/s
# Warmup Iteration  14: 2128886.655 ops/s
# Warmup Iteration  15: 2129330.479 ops/s
# Warmup Iteration  16: 2119902.704 ops/s
# Warmup Iteration  17: 2111860.797 ops/s
# Warmup Iteration  18: 2119260.406 ops/s
# Warmup Iteration  19: 2124232.159 ops/s
# Warmup Iteration  20: 2122732.472 ops/s
# Warmup Iteration  21: 2124289.812 ops/s
# Warmup Iteration  22: 2124574.762 ops/s
# Warmup Iteration  23: 2121152.634 ops/s
# Warmup Iteration  24: 2115372.792 ops/s
# Warmup Iteration  25: 2120032.795 ops/s
# Warmup Iteration  26: 2115765.534 ops/s
# Warmup Iteration  27: 2121525.697 ops/s
# Warmup Iteration  28: 2125755.938 ops/s
# Warmup Iteration  29: 2124519.624 ops/s
# Warmup Iteration  30: 2125900.994 ops/s
Iteration   1: 2124760.050 ops/s
Iteration   2: 2123197.954 ops/s
Iteration   3: 2104594.296 ops/s
Iteration   4: 2126114.682 ops/s
Iteration   5: 2124740.143 ops/s
Iteration   6: 2117547.104 ops/s
Iteration   7: 2114118.550 ops/s
Iteration   8: 2122066.470 ops/s
Iteration   9: 2131016.062 ops/s
Iteration  10: 2115654.141 ops/s
Iteration  11: 2127703.854 ops/s
Iteration  12: 2124274.511 ops/s
Iteration  13: 2125871.989 ops/s
Iteration  14: 2126592.989 ops/s
Iteration  15: 2133379.918 ops/s
Iteration  16: 2126131.361 ops/s
Iteration  17: 2116263.958 ops/s
Iteration  18: 2117237.185 ops/s
Iteration  19: 2116904.227 ops/s
Iteration  20: 2127641.426 ops/s
Iteration  21: 2117345.710 ops/s
Iteration  22: 2122564.565 ops/s
Iteration  23: 2122569.268 ops/s
Iteration  24: 2121406.753 ops/s
Iteration  25: 2136218.440 ops/s
Iteration  26: 2127568.381 ops/s
Iteration  27: 2116676.339 ops/s
Iteration  28: 2125457.260 ops/s
Iteration  29: 2130674.102 ops/s
Iteration  30: 2128133.103 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith":
  2123147.493 ±(99.9%) 4374.393 ops/s [Average]
  (min, avg, max) = (2104594.296, 2123147.493, 2136218.440), stdev = 6547.386
  CI (99.9%): [2118773.100, 2127521.886] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_allSatisfyWith  thrpt   30  2123147.493 ± 4374.393  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 922565.426 ops/s
# Warmup Iteration   2: 2173556.060 ops/s
# Warmup Iteration   3: 2242014.926 ops/s
# Warmup Iteration   4: 1859948.939 ops/s
# Warmup Iteration   5: 2249064.385 ops/s
# Warmup Iteration   6: 2250115.468 ops/s
# Warmup Iteration   7: 2245511.936 ops/s
# Warmup Iteration   8: 2250211.104 ops/s
# Warmup Iteration   9: 2254223.517 ops/s
# Warmup Iteration  10: 2256194.748 ops/s
# Warmup Iteration  11: 2257501.787 ops/s
# Warmup Iteration  12: 2259775.721 ops/s
# Warmup Iteration  13: 2247520.342 ops/s
# Warmup Iteration  14: 2254180.740 ops/s
# Warmup Iteration  15: 2253126.595 ops/s
# Warmup Iteration  16: 2256871.227 ops/s
# Warmup Iteration  17: 2247970.001 ops/s
# Warmup Iteration  18: 2247127.655 ops/s
# Warmup Iteration  19: 2250707.276 ops/s
# Warmup Iteration  20: 2254618.401 ops/s
# Warmup Iteration  21: 2257560.349 ops/s
# Warmup Iteration  22: 2254868.611 ops/s
# Warmup Iteration  23: 2252591.591 ops/s
# Warmup Iteration  24: 2253870.056 ops/s
# Warmup Iteration  25: 2253154.454 ops/s
# Warmup Iteration  26: 2261979.413 ops/s
# Warmup Iteration  27: 2265155.837 ops/s
# Warmup Iteration  28: 2259432.929 ops/s
# Warmup Iteration  29: 2251406.037 ops/s
# Warmup Iteration  30: 2256144.174 ops/s
Iteration   1: 2248153.101 ops/s
Iteration   2: 2256995.641 ops/s
Iteration   3: 2248112.141 ops/s
Iteration   4: 2246088.270 ops/s
Iteration   5: 2259707.265 ops/s
Iteration   6: 2260558.762 ops/s
Iteration   7: 2252231.025 ops/s
Iteration   8: 2259093.736 ops/s
Iteration   9: 2256755.209 ops/s
Iteration  10: 2250080.861 ops/s
Iteration  11: 2263516.322 ops/s
Iteration  12: 2255515.974 ops/s
Iteration  13: 2262474.240 ops/s
Iteration  14: 2259185.581 ops/s
Iteration  15: 2268261.009 ops/s
Iteration  16: 2257340.749 ops/s
Iteration  17: 2252796.755 ops/s
Iteration  18: 2256288.969 ops/s
Iteration  19: 2251760.127 ops/s
Iteration  20: 2254753.095 ops/s
Iteration  21: 2258067.176 ops/s
Iteration  22: 2259902.527 ops/s
Iteration  23: 2262198.183 ops/s
Iteration  24: 2244884.053 ops/s
Iteration  25: 2255674.182 ops/s
Iteration  26: 2252771.014 ops/s
Iteration  27: 2249151.213 ops/s
Iteration  28: 2257595.756 ops/s
Iteration  29: 2253374.261 ops/s
Iteration  30: 2258797.732 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy":
  2255736.164 ±(99.9%) 3642.196 ops/s [Average]
  (min, avg, max) = (2244884.053, 2255736.164, 2268261.009), stdev = 5451.468
  CI (99.9%): [2252093.968, 2259378.360] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfy  thrpt   30  2255736.164 ± 3642.196  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 885161.228 ops/s
# Warmup Iteration   2: 2073612.815 ops/s
# Warmup Iteration   3: 2189052.678 ops/s
# Warmup Iteration   4: 1908060.928 ops/s
# Warmup Iteration   5: 2090043.407 ops/s
# Warmup Iteration   6: 2193799.281 ops/s
# Warmup Iteration   7: 2202930.445 ops/s
# Warmup Iteration   8: 2199121.937 ops/s
# Warmup Iteration   9: 2201882.056 ops/s
# Warmup Iteration  10: 2204346.873 ops/s
# Warmup Iteration  11: 2200207.766 ops/s
# Warmup Iteration  12: 2204572.571 ops/s
# Warmup Iteration  13: 2198124.639 ops/s
# Warmup Iteration  14: 2195633.576 ops/s
# Warmup Iteration  15: 2193293.664 ops/s
# Warmup Iteration  16: 2194065.284 ops/s
# Warmup Iteration  17: 2141431.387 ops/s
# Warmup Iteration  18: 2152277.106 ops/s
# Warmup Iteration  19: 2145546.466 ops/s
# Warmup Iteration  20: 2144541.007 ops/s
# Warmup Iteration  21: 2151200.857 ops/s
# Warmup Iteration  22: 2153708.482 ops/s
# Warmup Iteration  23: 2151412.631 ops/s
# Warmup Iteration  24: 2147305.615 ops/s
# Warmup Iteration  25: 2153174.674 ops/s
# Warmup Iteration  26: 2153598.604 ops/s
# Warmup Iteration  27: 2147215.936 ops/s
# Warmup Iteration  28: 2144527.524 ops/s
# Warmup Iteration  29: 2149998.728 ops/s
# Warmup Iteration  30: 2148728.575 ops/s
Iteration   1: 2150755.324 ops/s
Iteration   2: 2155270.538 ops/s
Iteration   3: 2145355.277 ops/s
Iteration   4: 2148172.552 ops/s
Iteration   5: 2157174.178 ops/s
Iteration   6: 2142639.043 ops/s
Iteration   7: 2141503.225 ops/s
Iteration   8: 2143899.837 ops/s
Iteration   9: 2148430.297 ops/s
Iteration  10: 2153608.354 ops/s
Iteration  11: 2150160.834 ops/s
Iteration  12: 2149986.554 ops/s
Iteration  13: 2144722.633 ops/s
Iteration  14: 2157241.820 ops/s
Iteration  15: 2157777.392 ops/s
Iteration  16: 2160617.815 ops/s
Iteration  17: 2148470.862 ops/s
Iteration  18: 2156264.383 ops/s
Iteration  19: 2154571.357 ops/s
Iteration  20: 2132728.392 ops/s
Iteration  21: 2149506.192 ops/s
Iteration  22: 2146883.548 ops/s
Iteration  23: 2147399.396 ops/s
Iteration  24: 2150048.356 ops/s
Iteration  25: 2148754.230 ops/s
Iteration  26: 2148754.713 ops/s
Iteration  27: 2139990.717 ops/s
Iteration  28: 2144370.412 ops/s
Iteration  29: 2144188.892 ops/s
Iteration  30: 2130247.964 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith":
  2148316.503 ±(99.9%) 4623.379 ops/s [Average]
  (min, avg, max) = (2130247.964, 2148316.503, 2160617.815), stdev = 6920.056
  CI (99.9%): [2143693.124, 2152939.882] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_anySatisfyWith  thrpt   30  2148316.503 ± 4623.379  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendString$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendString

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1249637.136 ops/s
# Warmup Iteration   2: 2886804.102 ops/s
# Warmup Iteration   3: 2910518.308 ops/s
# Warmup Iteration   4: 2423552.370 ops/s
# Warmup Iteration   5: 2921660.940 ops/s
# Warmup Iteration   6: 2927552.618 ops/s
# Warmup Iteration   7: 2923262.009 ops/s
# Warmup Iteration   8: 2915547.127 ops/s
# Warmup Iteration   9: 2919135.284 ops/s
# Warmup Iteration  10: 2913097.496 ops/s
# Warmup Iteration  11: 2927065.832 ops/s
# Warmup Iteration  12: 2921792.317 ops/s
# Warmup Iteration  13: 2920841.300 ops/s
# Warmup Iteration  14: 2922026.307 ops/s
# Warmup Iteration  15: 2927097.232 ops/s
# Warmup Iteration  16: 2919244.996 ops/s
# Warmup Iteration  17: 2894388.632 ops/s
# Warmup Iteration  18: 2854813.824 ops/s
# Warmup Iteration  19: 2906488.289 ops/s
# Warmup Iteration  20: 2886650.856 ops/s
# Warmup Iteration  21: 2897343.090 ops/s
# Warmup Iteration  22: 2891055.132 ops/s
# Warmup Iteration  23: 2900841.749 ops/s
# Warmup Iteration  24: 2905736.155 ops/s
# Warmup Iteration  25: 2887737.363 ops/s
# Warmup Iteration  26: 2899586.004 ops/s
# Warmup Iteration  27: 2907732.505 ops/s
# Warmup Iteration  28: 2898252.573 ops/s
# Warmup Iteration  29: 2893552.859 ops/s
# Warmup Iteration  30: 2899715.489 ops/s
Iteration   1: 2896229.157 ops/s
Iteration   2: 2909074.605 ops/s
Iteration   3: 2889301.974 ops/s
Iteration   4: 2900774.999 ops/s
Iteration   5: 2908896.505 ops/s
Iteration   6: 2885428.154 ops/s
Iteration   7: 2892359.753 ops/s
Iteration   8: 2901323.427 ops/s
Iteration   9: 2888159.679 ops/s
Iteration  10: 2897917.199 ops/s
Iteration  11: 2879440.891 ops/s
Iteration  12: 2911418.240 ops/s
Iteration  13: 2908261.432 ops/s
Iteration  14: 2908749.142 ops/s
Iteration  15: 2898345.887 ops/s
Iteration  16: 2891302.624 ops/s
Iteration  17: 2877555.810 ops/s
Iteration  18: 2899501.508 ops/s
Iteration  19: 2897296.993 ops/s
Iteration  20: 2917355.896 ops/s
Iteration  21: 2902114.582 ops/s
Iteration  22: 2908535.990 ops/s
Iteration  23: 2891811.322 ops/s
Iteration  24: 2904478.397 ops/s
Iteration  25: 2893469.847 ops/s
Iteration  26: 2904284.009 ops/s
Iteration  27: 2909821.763 ops/s
Iteration  28: 2898318.211 ops/s
Iteration  29: 2895289.449 ops/s
Iteration  30: 2900103.024 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendString":
  2898897.349 ±(99.9%) 6334.602 ops/s [Average]
  (min, avg, max) = (2877555.810, 2898897.349, 2917355.896), stdev = 9481.334
  CI (99.9%): [2892562.747, 2905231.951] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendString  thrpt   30  2898897.349 ± 6334.602  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 88476.462 ops/s
# Warmup Iteration   2: 97242.544 ops/s
# Warmup Iteration   3: 116865.974 ops/s
# Warmup Iteration   4: 125561.333 ops/s
# Warmup Iteration   5: 125488.967 ops/s
# Warmup Iteration   6: 124590.739 ops/s
# Warmup Iteration   7: 124962.819 ops/s
# Warmup Iteration   8: 125772.014 ops/s
# Warmup Iteration   9: 125863.081 ops/s
# Warmup Iteration  10: 125177.045 ops/s
# Warmup Iteration  11: 125745.368 ops/s
# Warmup Iteration  12: 125910.248 ops/s
# Warmup Iteration  13: 114052.507 ops/s
# Warmup Iteration  14: 116802.496 ops/s
# Warmup Iteration  15: 125818.376 ops/s
# Warmup Iteration  16: 125591.868 ops/s
# Warmup Iteration  17: 130423.338 ops/s
# Warmup Iteration  18: 130662.531 ops/s
# Warmup Iteration  19: 130845.270 ops/s
# Warmup Iteration  20: 130260.278 ops/s
# Warmup Iteration  21: 130573.430 ops/s
# Warmup Iteration  22: 130718.634 ops/s
# Warmup Iteration  23: 131014.083 ops/s
# Warmup Iteration  24: 131038.729 ops/s
# Warmup Iteration  25: 130951.414 ops/s
# Warmup Iteration  26: 130593.080 ops/s
# Warmup Iteration  27: 130761.112 ops/s
# Warmup Iteration  28: 130945.804 ops/s
# Warmup Iteration  29: 130830.495 ops/s
# Warmup Iteration  30: 130608.542 ops/s
Iteration   1: 131092.246 ops/s
Iteration   2: 130765.062 ops/s
Iteration   3: 130902.889 ops/s
Iteration   4: 130974.502 ops/s
Iteration   5: 130689.121 ops/s
Iteration   6: 130512.188 ops/s
Iteration   7: 130456.881 ops/s
Iteration   8: 131230.963 ops/s
Iteration   9: 131112.117 ops/s
Iteration  10: 130850.518 ops/s
Iteration  11: 130913.803 ops/s
Iteration  12: 130647.380 ops/s
Iteration  13: 130628.112 ops/s
Iteration  14: 130783.676 ops/s
Iteration  15: 131068.563 ops/s
Iteration  16: 131328.225 ops/s
Iteration  17: 131507.142 ops/s
Iteration  18: 130932.603 ops/s
Iteration  19: 130584.558 ops/s
Iteration  20: 129765.634 ops/s
Iteration  21: 130678.043 ops/s
Iteration  22: 130893.546 ops/s
Iteration  23: 130674.035 ops/s
Iteration  24: 130673.345 ops/s
Iteration  25: 131004.134 ops/s
Iteration  26: 131025.151 ops/s
Iteration  27: 130426.729 ops/s
Iteration  28: 131199.602 ops/s
Iteration  29: 130304.774 ops/s
Iteration  30: 130734.180 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows":
  130811.991 ±(99.9%) 227.739 ops/s [Average]
  (min, avg, max) = (129765.634, 130811.991, 131507.142), stdev = 340.869
  CI (99.9%): [130584.252, 131039.730] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringThrows  thrpt   30  130811.991 ± 227.739  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 884809.998 ops/s
# Warmup Iteration   2: 2221661.714 ops/s
# Warmup Iteration   3: 2251204.301 ops/s
# Warmup Iteration   4: 1870600.802 ops/s
# Warmup Iteration   5: 2241228.996 ops/s
# Warmup Iteration   6: 2241928.314 ops/s
# Warmup Iteration   7: 2245424.787 ops/s
# Warmup Iteration   8: 2232416.869 ops/s
# Warmup Iteration   9: 2241808.455 ops/s
# Warmup Iteration  10: 2248207.341 ops/s
# Warmup Iteration  11: 2244586.809 ops/s
# Warmup Iteration  12: 2242719.880 ops/s
# Warmup Iteration  13: 2248091.229 ops/s
# Warmup Iteration  14: 2244580.194 ops/s
# Warmup Iteration  15: 2244179.849 ops/s
# Warmup Iteration  16: 2247089.919 ops/s
# Warmup Iteration  17: 2240839.607 ops/s
# Warmup Iteration  18: 2245956.788 ops/s
# Warmup Iteration  19: 2246229.832 ops/s
# Warmup Iteration  20: 2253253.946 ops/s
# Warmup Iteration  21: 2248239.913 ops/s
# Warmup Iteration  22: 2252603.045 ops/s
# Warmup Iteration  23: 2255630.431 ops/s
# Warmup Iteration  24: 2250678.010 ops/s
# Warmup Iteration  25: 2253621.570 ops/s
# Warmup Iteration  26: 2241369.423 ops/s
# Warmup Iteration  27: 2246426.901 ops/s
# Warmup Iteration  28: 2238881.233 ops/s
# Warmup Iteration  29: 2248106.447 ops/s
# Warmup Iteration  30: 2257278.832 ops/s
Iteration   1: 2240070.239 ops/s
Iteration   2: 2251425.750 ops/s
Iteration   3: 2249847.437 ops/s
Iteration   4: 2244543.490 ops/s
Iteration   5: 2244609.503 ops/s
Iteration   6: 2259421.164 ops/s
Iteration   7: 2255390.496 ops/s
Iteration   8: 2260115.454 ops/s
Iteration   9: 2240066.944 ops/s
Iteration  10: 2240995.827 ops/s
Iteration  11: 2259949.137 ops/s
Iteration  12: 2253340.605 ops/s
Iteration  13: 2263284.574 ops/s
Iteration  14: 2260117.530 ops/s
Iteration  15: 2251385.903 ops/s
Iteration  16: 2250430.687 ops/s
Iteration  17: 2249448.652 ops/s
Iteration  18: 2245137.726 ops/s
Iteration  19: 2258404.470 ops/s
Iteration  20: 2245285.807 ops/s
Iteration  21: 2242132.992 ops/s
Iteration  22: 2247234.913 ops/s
Iteration  23: 2253302.000 ops/s
Iteration  24: 2248982.674 ops/s
Iteration  25: 2247466.540 ops/s
Iteration  26: 2256202.567 ops/s
Iteration  27: 2254102.042 ops/s
Iteration  28: 2252214.172 ops/s
Iteration  29: 2250555.224 ops/s
Iteration  30: 2242016.431 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator":
  2250582.698 ±(99.9%) 4419.968 ops/s [Average]
  (min, avg, max) = (2240066.944, 2250582.698, 2263284.574), stdev = 6615.600
  CI (99.9%): [2246162.731, 2255002.666] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparator  thrpt   30  2250582.698 ± 4419.968  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 949442.151 ops/s
# Warmup Iteration   2: 2345581.764 ops/s
# Warmup Iteration   3: 2383947.219 ops/s
# Warmup Iteration   4: 1981424.837 ops/s
# Warmup Iteration   5: 2383012.148 ops/s
# Warmup Iteration   6: 2383280.188 ops/s
# Warmup Iteration   7: 2383404.799 ops/s
# Warmup Iteration   8: 2384225.651 ops/s
# Warmup Iteration   9: 2384671.592 ops/s
# Warmup Iteration  10: 2376979.704 ops/s
# Warmup Iteration  11: 2376618.034 ops/s
# Warmup Iteration  12: 2374750.212 ops/s
# Warmup Iteration  13: 2371495.593 ops/s
# Warmup Iteration  14: 2379375.714 ops/s
# Warmup Iteration  15: 2382593.957 ops/s
# Warmup Iteration  16: 2386796.708 ops/s
# Warmup Iteration  17: 2409144.868 ops/s
# Warmup Iteration  18: 2405191.999 ops/s
# Warmup Iteration  19: 2401232.145 ops/s
# Warmup Iteration  20: 2404053.722 ops/s
# Warmup Iteration  21: 2410452.891 ops/s
# Warmup Iteration  22: 2405186.542 ops/s
# Warmup Iteration  23: 2399379.072 ops/s
# Warmup Iteration  24: 2401531.297 ops/s
# Warmup Iteration  25: 2404932.885 ops/s
# Warmup Iteration  26: 2403458.467 ops/s
# Warmup Iteration  27: 2403486.639 ops/s
# Warmup Iteration  28: 2409843.115 ops/s
# Warmup Iteration  29: 2406726.484 ops/s
# Warmup Iteration  30: 2399375.870 ops/s
Iteration   1: 2411301.935 ops/s
Iteration   2: 2401960.619 ops/s
Iteration   3: 2396276.707 ops/s
Iteration   4: 2397906.457 ops/s
Iteration   5: 2397731.002 ops/s
Iteration   6: 2396404.648 ops/s
Iteration   7: 2393862.796 ops/s
Iteration   8: 2401194.233 ops/s
Iteration   9: 2408050.975 ops/s
Iteration  10: 2393599.585 ops/s
Iteration  11: 2395531.269 ops/s
Iteration  12: 2390226.531 ops/s
Iteration  13: 2392443.591 ops/s
Iteration  14: 2397063.779 ops/s
Iteration  15: 2398195.782 ops/s
Iteration  16: 2396882.029 ops/s
Iteration  17: 2396116.272 ops/s
Iteration  18: 2405638.620 ops/s
Iteration  19: 2393808.759 ops/s
Iteration  20: 2380871.605 ops/s
Iteration  21: 2404695.401 ops/s
Iteration  22: 2397663.197 ops/s
Iteration  23: 2390825.489 ops/s
Iteration  24: 2407448.258 ops/s
Iteration  25: 2404254.051 ops/s
Iteration  26: 2390112.136 ops/s
Iteration  27: 2390655.363 ops/s
Iteration  28: 2401031.355 ops/s
Iteration  29: 2397577.203 ops/s
Iteration  30: 2398655.045 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd":
  2397599.490 ±(99.9%) 4233.304 ops/s [Average]
  (min, avg, max) = (2380871.605, 2397599.490, 2411301.935), stdev = 6336.211
  CI (99.9%): [2393366.186, 2401832.794] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_appendStringWithSeparatorAndStartAndEnd  thrpt   30  2397599.490 ± 4233.304  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asLazy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asLazy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 6694882.570 ops/s
# Warmup Iteration   2: 14006149.469 ops/s
# Warmup Iteration   3: 12050023.603 ops/s
# Warmup Iteration   4: 14061846.192 ops/s
# Warmup Iteration   5: 14030462.635 ops/s
# Warmup Iteration   6: 14066741.992 ops/s
# Warmup Iteration   7: 14002476.595 ops/s
# Warmup Iteration   8: 14041938.713 ops/s
# Warmup Iteration   9: 14034109.885 ops/s
# Warmup Iteration  10: 14020082.117 ops/s
# Warmup Iteration  11: 13985063.338 ops/s
# Warmup Iteration  12: 13923741.002 ops/s
# Warmup Iteration  13: 13977653.437 ops/s
# Warmup Iteration  14: 14023634.855 ops/s
# Warmup Iteration  15: 13991945.598 ops/s
# Warmup Iteration  16: 13963350.395 ops/s
# Warmup Iteration  17: 14222254.381 ops/s
# Warmup Iteration  18: 14232691.500 ops/s
# Warmup Iteration  19: 14215728.049 ops/s
# Warmup Iteration  20: 14240730.032 ops/s
# Warmup Iteration  21: 14250101.494 ops/s
# Warmup Iteration  22: 14184870.505 ops/s
# Warmup Iteration  23: 14232507.942 ops/s
# Warmup Iteration  24: 14243102.276 ops/s
# Warmup Iteration  25: 14176409.773 ops/s
# Warmup Iteration  26: 14242514.674 ops/s
# Warmup Iteration  27: 14207896.912 ops/s
# Warmup Iteration  28: 14257086.197 ops/s
# Warmup Iteration  29: 14242355.318 ops/s
# Warmup Iteration  30: 14241481.958 ops/s
Iteration   1: 14234027.046 ops/s
Iteration   2: 14136923.299 ops/s
Iteration   3: 14047982.282 ops/s
Iteration   4: 14219002.733 ops/s
Iteration   5: 14168140.563 ops/s
Iteration   6: 14235182.877 ops/s
Iteration   7: 14177601.809 ops/s
Iteration   8: 14268571.711 ops/s
Iteration   9: 14233548.306 ops/s
Iteration  10: 14278051.406 ops/s
Iteration  11: 14136378.942 ops/s
Iteration  12: 14253272.215 ops/s
Iteration  13: 14275032.236 ops/s
Iteration  14: 14268001.569 ops/s
Iteration  15: 14230179.463 ops/s
Iteration  16: 14160950.788 ops/s
Iteration  17: 14178442.479 ops/s
Iteration  18: 14226235.803 ops/s
Iteration  19: 14256124.379 ops/s
Iteration  20: 14265969.260 ops/s
Iteration  21: 14239707.155 ops/s
Iteration  22: 14283421.693 ops/s
Iteration  23: 14211059.291 ops/s
Iteration  24: 14250556.662 ops/s
Iteration  25: 14187858.697 ops/s
Iteration  26: 14199182.754 ops/s
Iteration  27: 14231708.567 ops/s
Iteration  28: 14279034.349 ops/s
Iteration  29: 14247936.760 ops/s
Iteration  30: 14244682.068 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asLazy":
  14220825.572 ±(99.9%) 35398.608 ops/s [Average]
  (min, avg, max) = (14047982.282, 14220825.572, 14283421.693), stdev = 52982.973
  CI (99.9%): [14185426.964, 14256224.180] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt         Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asLazy  thrpt   30  14220825.572 ± 35398.608  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 614961.491 ops/s
# Warmup Iteration   2: 704502.648 ops/s
# Warmup Iteration   3: 913822.179 ops/s
# Warmup Iteration   4: 912057.371 ops/s
# Warmup Iteration   5: 909407.964 ops/s
# Warmup Iteration   6: 916349.820 ops/s
# Warmup Iteration   7: 914337.360 ops/s
# Warmup Iteration   8: 914871.754 ops/s
# Warmup Iteration   9: 919446.786 ops/s
# Warmup Iteration  10: 796229.110 ops/s
# Warmup Iteration  11: 887564.752 ops/s
# Warmup Iteration  12: 914425.157 ops/s
# Warmup Iteration  13: 916812.285 ops/s
# Warmup Iteration  14: 914247.091 ops/s
# Warmup Iteration  15: 917684.464 ops/s
# Warmup Iteration  16: 915198.672 ops/s
# Warmup Iteration  17: 965341.790 ops/s
# Warmup Iteration  18: 966805.883 ops/s
# Warmup Iteration  19: 966206.922 ops/s
# Warmup Iteration  20: 963517.794 ops/s
# Warmup Iteration  21: 964320.119 ops/s
# Warmup Iteration  22: 967765.804 ops/s
# Warmup Iteration  23: 963016.469 ops/s
# Warmup Iteration  24: 964555.609 ops/s
# Warmup Iteration  25: 966077.835 ops/s
# Warmup Iteration  26: 966684.263 ops/s
# Warmup Iteration  27: 963447.247 ops/s
# Warmup Iteration  28: 967006.851 ops/s
# Warmup Iteration  29: 968144.621 ops/s
# Warmup Iteration  30: 962174.103 ops/s
Iteration   1: 966232.184 ops/s
Iteration   2: 969960.278 ops/s
Iteration   3: 971671.775 ops/s
Iteration   4: 968211.804 ops/s
Iteration   5: 965063.920 ops/s
Iteration   6: 968255.864 ops/s
Iteration   7: 966811.851 ops/s
Iteration   8: 971266.437 ops/s
Iteration   9: 967478.005 ops/s
Iteration  10: 967861.054 ops/s
Iteration  11: 973399.904 ops/s
Iteration  12: 964400.219 ops/s
Iteration  13: 963859.775 ops/s
Iteration  14: 964331.993 ops/s
Iteration  15: 969267.039 ops/s
Iteration  16: 969296.460 ops/s
Iteration  17: 971266.186 ops/s
Iteration  18: 966799.815 ops/s
Iteration  19: 963942.254 ops/s
Iteration  20: 964642.602 ops/s
Iteration  21: 968343.431 ops/s
Iteration  22: 968582.636 ops/s
Iteration  23: 967742.761 ops/s
Iteration  24: 969428.324 ops/s
Iteration  25: 969918.534 ops/s
Iteration  26: 959864.304 ops/s
Iteration  27: 963754.141 ops/s
Iteration  28: 965771.263 ops/s
Iteration  29: 966000.738 ops/s
Iteration  30: 964184.068 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized":
  967253.654 ±(99.9%) 1979.903 ops/s [Average]
  (min, avg, max) = (959864.304, 967253.654, 973399.904), stdev = 2963.426
  CI (99.9%): [965273.751, 969233.557] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asSynchronized  thrpt   30  967253.654 ± 1979.903  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 596409.853 ops/s
# Warmup Iteration   2: 675473.805 ops/s
# Warmup Iteration   3: 876050.791 ops/s
# Warmup Iteration   4: 880989.527 ops/s
# Warmup Iteration   5: 872323.683 ops/s
# Warmup Iteration   6: 873033.871 ops/s
# Warmup Iteration   7: 881001.862 ops/s
# Warmup Iteration   8: 877290.841 ops/s
# Warmup Iteration   9: 879915.946 ops/s
# Warmup Iteration  10: 854349.346 ops/s
# Warmup Iteration  11: 764522.778 ops/s
# Warmup Iteration  12: 878221.547 ops/s
# Warmup Iteration  13: 877024.558 ops/s
# Warmup Iteration  14: 875812.291 ops/s
# Warmup Iteration  15: 873873.310 ops/s
# Warmup Iteration  16: 877100.908 ops/s
# Warmup Iteration  17: 921386.806 ops/s
# Warmup Iteration  18: 918883.080 ops/s
# Warmup Iteration  19: 919322.787 ops/s
# Warmup Iteration  20: 921140.907 ops/s
# Warmup Iteration  21: 919515.181 ops/s
# Warmup Iteration  22: 921717.718 ops/s
# Warmup Iteration  23: 917866.244 ops/s
# Warmup Iteration  24: 917916.300 ops/s
# Warmup Iteration  25: 919327.377 ops/s
# Warmup Iteration  26: 918956.892 ops/s
# Warmup Iteration  27: 921579.984 ops/s
# Warmup Iteration  28: 918264.547 ops/s
# Warmup Iteration  29: 921400.564 ops/s
# Warmup Iteration  30: 918659.466 ops/s
Iteration   1: 917547.698 ops/s
Iteration   2: 921779.707 ops/s
Iteration   3: 915911.248 ops/s
Iteration   4: 920665.013 ops/s
Iteration   5: 916854.650 ops/s
Iteration   6: 919876.181 ops/s
Iteration   7: 918194.687 ops/s
Iteration   8: 916528.323 ops/s
Iteration   9: 912072.939 ops/s
Iteration  10: 915042.348 ops/s
Iteration  11: 918352.173 ops/s
Iteration  12: 921632.315 ops/s
Iteration  13: 922419.328 ops/s
Iteration  14: 918324.460 ops/s
Iteration  15: 921101.711 ops/s
Iteration  16: 921728.817 ops/s
Iteration  17: 918432.591 ops/s
Iteration  18: 923438.944 ops/s
Iteration  19: 921226.875 ops/s
Iteration  20: 917734.961 ops/s
Iteration  21: 917976.764 ops/s
Iteration  22: 922116.231 ops/s
Iteration  23: 919597.486 ops/s
Iteration  24: 916560.816 ops/s
Iteration  25: 921359.859 ops/s
Iteration  26: 923691.281 ops/s
Iteration  27: 918863.564 ops/s
Iteration  28: 917512.880 ops/s
Iteration  29: 912304.859 ops/s
Iteration  30: 910644.338 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable":
  918649.768 ±(99.9%) 2197.407 ops/s [Average]
  (min, avg, max) = (910644.338, 918649.768, 923691.281), stdev = 3288.976
  CI (99.9%): [916452.361, 920847.176] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_asUnmodifiable  thrpt   30  918649.768 ± 2197.407  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 562517.038 ops/s
# Warmup Iteration   2: 1168518.091 ops/s
# Warmup Iteration   3: 1262292.328 ops/s
# Warmup Iteration   4: 1272205.727 ops/s
# Warmup Iteration   5: 1046132.572 ops/s
# Warmup Iteration   6: 1274330.899 ops/s
# Warmup Iteration   7: 1272950.472 ops/s
# Warmup Iteration   8: 1276294.052 ops/s
# Warmup Iteration   9: 1271288.020 ops/s
# Warmup Iteration  10: 1276345.441 ops/s
# Warmup Iteration  11: 1275707.885 ops/s
# Warmup Iteration  12: 1279593.414 ops/s
# Warmup Iteration  13: 1274776.988 ops/s
# Warmup Iteration  14: 1279792.434 ops/s
# Warmup Iteration  15: 1277067.269 ops/s
# Warmup Iteration  16: 1274750.401 ops/s
# Warmup Iteration  17: 1277601.977 ops/s
# Warmup Iteration  18: 1280566.806 ops/s
# Warmup Iteration  19: 1278226.455 ops/s
# Warmup Iteration  20: 1275479.339 ops/s
# Warmup Iteration  21: 1277041.860 ops/s
# Warmup Iteration  22: 1279725.954 ops/s
# Warmup Iteration  23: 1276722.786 ops/s
# Warmup Iteration  24: 1277018.126 ops/s
# Warmup Iteration  25: 1276915.793 ops/s
# Warmup Iteration  26: 1274244.923 ops/s
# Warmup Iteration  27: 1275610.989 ops/s
# Warmup Iteration  28: 1277788.299 ops/s
# Warmup Iteration  29: 1272262.499 ops/s
# Warmup Iteration  30: 1271462.378 ops/s
Iteration   1: 1279973.258 ops/s
Iteration   2: 1272537.740 ops/s
Iteration   3: 1277363.432 ops/s
Iteration   4: 1273263.307 ops/s
Iteration   5: 1274748.801 ops/s
Iteration   6: 1267679.886 ops/s
Iteration   7: 1274895.263 ops/s
Iteration   8: 1277482.644 ops/s
Iteration   9: 1275578.807 ops/s
Iteration  10: 1272155.760 ops/s
Iteration  11: 1273785.449 ops/s
Iteration  12: 1276039.026 ops/s
Iteration  13: 1272276.332 ops/s
Iteration  14: 1271804.797 ops/s
Iteration  15: 1275892.614 ops/s
Iteration  16: 1278806.105 ops/s
Iteration  17: 1273048.366 ops/s
Iteration  18: 1275387.155 ops/s
Iteration  19: 1267478.578 ops/s
Iteration  20: 1270641.802 ops/s
Iteration  21: 1276519.076 ops/s
Iteration  22: 1277873.737 ops/s
Iteration  23: 1273798.913 ops/s
Iteration  24: 1273344.304 ops/s
Iteration  25: 1279438.443 ops/s
Iteration  26: 1275645.014 ops/s
Iteration  27: 1267317.570 ops/s
Iteration  28: 1281390.191 ops/s
Iteration  29: 1279183.037 ops/s
Iteration  30: 1279159.239 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk":
  1274816.955 ±(99.9%) 2453.694 ops/s [Average]
  (min, avg, max) = (1267317.570, 1274816.955, 1281390.191), stdev = 3672.574
  CI (99.9%): [1272363.261, 1277270.649] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk  thrpt   30  1274816.955 ± 2453.694  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 5836466.016 ops/s
# Warmup Iteration   2: 12174171.538 ops/s
# Warmup Iteration   3: 10482164.513 ops/s
# Warmup Iteration   4: 12183395.004 ops/s
# Warmup Iteration   5: 12102635.773 ops/s
# Warmup Iteration   6: 12236024.273 ops/s
# Warmup Iteration   7: 12166259.512 ops/s
# Warmup Iteration   8: 12197097.358 ops/s
# Warmup Iteration   9: 12213105.181 ops/s
# Warmup Iteration  10: 12145888.042 ops/s
# Warmup Iteration  11: 12215571.770 ops/s
# Warmup Iteration  12: 12179249.726 ops/s
# Warmup Iteration  13: 12024331.607 ops/s
# Warmup Iteration  14: 12215697.412 ops/s
# Warmup Iteration  15: 12163290.310 ops/s
# Warmup Iteration  16: 12274567.851 ops/s
# Warmup Iteration  17: 12338628.431 ops/s
# Warmup Iteration  18: 12309793.713 ops/s
# Warmup Iteration  19: 12327540.577 ops/s
# Warmup Iteration  20: 12372558.626 ops/s
# Warmup Iteration  21: 12331049.077 ops/s
# Warmup Iteration  22: 12311135.271 ops/s
# Warmup Iteration  23: 12292494.824 ops/s
# Warmup Iteration  24: 12346646.509 ops/s
# Warmup Iteration  25: 12271968.797 ops/s
# Warmup Iteration  26: 12397283.491 ops/s
# Warmup Iteration  27: 12377494.371 ops/s
# Warmup Iteration  28: 12362643.308 ops/s
# Warmup Iteration  29: 12386327.322 ops/s
# Warmup Iteration  30: 12337443.008 ops/s
Iteration   1: 12342356.006 ops/s
Iteration   2: 12373499.179 ops/s
Iteration   3: 12320958.546 ops/s
Iteration   4: 12291182.334 ops/s
Iteration   5: 12369050.173 ops/s
Iteration   6: 12402183.427 ops/s
Iteration   7: 12315737.760 ops/s
Iteration   8: 12331208.869 ops/s
Iteration   9: 12314903.107 ops/s
Iteration  10: 12340342.030 ops/s
Iteration  11: 12387494.969 ops/s
Iteration  12: 12399235.534 ops/s
Iteration  13: 12376244.246 ops/s
Iteration  14: 12421746.800 ops/s
Iteration  15: 12291302.020 ops/s
Iteration  16: 12194835.992 ops/s
Iteration  17: 12253236.857 ops/s
Iteration  18: 12360421.720 ops/s
Iteration  19: 12358421.772 ops/s
Iteration  20: 12323358.783 ops/s
Iteration  21: 12309990.434 ops/s
Iteration  22: 12307137.826 ops/s
Iteration  23: 12339543.178 ops/s
Iteration  24: 12281526.298 ops/s
Iteration  25: 12284063.017 ops/s
Iteration  26: 12300599.516 ops/s
Iteration  27: 12345407.026 ops/s
Iteration  28: 12267678.144 ops/s
Iteration  29: 12291647.086 ops/s
Iteration  30: 12283109.559 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty":
  12325947.407 ±(99.9%) 32973.724 ops/s [Average]
  (min, avg, max) = (12194835.992, 12325947.407, 12421746.800), stdev = 49353.522
  CI (99.9%): [12292973.682, 12358921.131] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt         Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_empty  thrpt   30  12325947.407 ± 32973.724  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 606342.690 ops/s
# Warmup Iteration   2: 1114638.667 ops/s
# Warmup Iteration   3: 1263978.477 ops/s
# Warmup Iteration   4: 1267543.205 ops/s
# Warmup Iteration   5: 1270482.921 ops/s
# Warmup Iteration   6: 1041487.650 ops/s
# Warmup Iteration   7: 1272455.459 ops/s
# Warmup Iteration   8: 1265836.230 ops/s
# Warmup Iteration   9: 1273758.579 ops/s
# Warmup Iteration  10: 1273369.788 ops/s
# Warmup Iteration  11: 1273808.272 ops/s
# Warmup Iteration  12: 1275286.084 ops/s
# Warmup Iteration  13: 1270510.563 ops/s
# Warmup Iteration  14: 1273194.485 ops/s
# Warmup Iteration  15: 1275952.996 ops/s
# Warmup Iteration  16: 1273222.844 ops/s
# Warmup Iteration  17: 1277058.478 ops/s
# Warmup Iteration  18: 1274234.522 ops/s
# Warmup Iteration  19: 1270155.573 ops/s
# Warmup Iteration  20: 1269431.526 ops/s
# Warmup Iteration  21: 1274050.126 ops/s
# Warmup Iteration  22: 1275328.232 ops/s
# Warmup Iteration  23: 1272245.793 ops/s
# Warmup Iteration  24: 1275253.366 ops/s
# Warmup Iteration  25: 1275220.061 ops/s
# Warmup Iteration  26: 1276935.005 ops/s
# Warmup Iteration  27: 1277302.773 ops/s
# Warmup Iteration  28: 1275381.965 ops/s
# Warmup Iteration  29: 1272788.267 ops/s
# Warmup Iteration  30: 1274199.854 ops/s
Iteration   1: 1272536.003 ops/s
Iteration   2: 1272951.980 ops/s
Iteration   3: 1275568.686 ops/s
Iteration   4: 1274890.745 ops/s
Iteration   5: 1275048.679 ops/s
Iteration   6: 1274831.116 ops/s
Iteration   7: 1274296.115 ops/s
Iteration   8: 1273152.563 ops/s
Iteration   9: 1278895.804 ops/s
Iteration  10: 1271724.657 ops/s
Iteration  11: 1280341.701 ops/s
Iteration  12: 1272934.700 ops/s
Iteration  13: 1276503.230 ops/s
Iteration  14: 1272616.679 ops/s
Iteration  15: 1275131.096 ops/s
Iteration  16: 1272267.076 ops/s
Iteration  17: 1278124.007 ops/s
Iteration  18: 1278857.831 ops/s
Iteration  19: 1275161.234 ops/s
Iteration  20: 1271175.605 ops/s
Iteration  21: 1276752.093 ops/s
Iteration  22: 1268597.793 ops/s
Iteration  23: 1272702.808 ops/s
Iteration  24: 1276249.926 ops/s
Iteration  25: 1269819.326 ops/s
Iteration  26: 1274387.212 ops/s
Iteration  27: 1274033.066 ops/s
Iteration  28: 1271821.764 ops/s
Iteration  29: 1273212.302 ops/s
Iteration  30: 1275483.328 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size":
  1274335.637 ±(99.9%) 1786.291 ops/s [Average]
  (min, avg, max) = (1268597.793, 1274335.637, 1280341.701), stdev = 2673.637
  CI (99.9%): [1272549.346, 1276121.929] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_large_size  thrpt   30  1274335.637 ± 1786.291  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_single$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_single

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1556912.896 ops/s
# Warmup Iteration   2: 4310586.462 ops/s
# Warmup Iteration   3: 3999166.947 ops/s
# Warmup Iteration   4: 3938338.500 ops/s
# Warmup Iteration   5: 4324295.176 ops/s
# Warmup Iteration   6: 4353015.250 ops/s
# Warmup Iteration   7: 4330011.390 ops/s
# Warmup Iteration   8: 4314373.899 ops/s
# Warmup Iteration   9: 4343548.076 ops/s
# Warmup Iteration  10: 4348309.606 ops/s
# Warmup Iteration  11: 4341475.514 ops/s
# Warmup Iteration  12: 4343071.910 ops/s
# Warmup Iteration  13: 4343390.143 ops/s
# Warmup Iteration  14: 4351103.163 ops/s
# Warmup Iteration  15: 4338264.709 ops/s
# Warmup Iteration  16: 4350883.825 ops/s
# Warmup Iteration  17: 4364735.467 ops/s
# Warmup Iteration  18: 4323346.010 ops/s
# Warmup Iteration  19: 4346270.909 ops/s
# Warmup Iteration  20: 4351985.838 ops/s
# Warmup Iteration  21: 4345072.600 ops/s
# Warmup Iteration  22: 4329366.253 ops/s
# Warmup Iteration  23: 4336007.364 ops/s
# Warmup Iteration  24: 4340738.019 ops/s
# Warmup Iteration  25: 4334612.961 ops/s
# Warmup Iteration  26: 4356370.580 ops/s
# Warmup Iteration  27: 4353783.592 ops/s
# Warmup Iteration  28: 4339548.978 ops/s
# Warmup Iteration  29: 4357458.570 ops/s
# Warmup Iteration  30: 4356648.368 ops/s
Iteration   1: 4351884.771 ops/s
Iteration   2: 4355790.390 ops/s
Iteration   3: 4349314.935 ops/s
Iteration   4: 4356159.254 ops/s
Iteration   5: 4356799.267 ops/s
Iteration   6: 4357239.142 ops/s
Iteration   7: 4336080.171 ops/s
Iteration   8: 4347736.647 ops/s
Iteration   9: 4338752.561 ops/s
Iteration  10: 4327597.007 ops/s
Iteration  11: 4350535.494 ops/s
Iteration  12: 4350350.934 ops/s
Iteration  13: 4352599.227 ops/s
Iteration  14: 4344117.152 ops/s
Iteration  15: 4352135.873 ops/s
Iteration  16: 4334277.956 ops/s
Iteration  17: 4340242.274 ops/s
Iteration  18: 4350611.381 ops/s
Iteration  19: 4350141.479 ops/s
Iteration  20: 4348971.875 ops/s
Iteration  21: 4353179.130 ops/s
Iteration  22: 4358868.685 ops/s
Iteration  23: 4359444.415 ops/s
Iteration  24: 4344149.788 ops/s
Iteration  25: 4332258.405 ops/s
Iteration  26: 4306307.556 ops/s
Iteration  27: 4319055.881 ops/s
Iteration  28: 4334243.262 ops/s
Iteration  29: 4345079.660 ops/s
Iteration  30: 4315897.773 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_single":
  4343994.078 ±(99.9%) 8893.352 ops/s [Average]
  (min, avg, max) = (4306307.556, 4343994.078, 4359444.415), stdev = 13311.152
  CI (99.9%): [4335100.726, 4352887.430] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_single  thrpt   30  4343994.078 ± 8893.352  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 439278.191 ops/s
# Warmup Iteration   2: 545420.801 ops/s
# Warmup Iteration   3: 702607.104 ops/s
# Warmup Iteration   4: 698923.981 ops/s
# Warmup Iteration   5: 701599.463 ops/s
# Warmup Iteration   6: 703758.935 ops/s
# Warmup Iteration   7: 704158.146 ops/s
# Warmup Iteration   8: 701869.519 ops/s
# Warmup Iteration   9: 583305.912 ops/s
# Warmup Iteration  10: 703831.440 ops/s
# Warmup Iteration  11: 705124.772 ops/s
# Warmup Iteration  12: 704707.479 ops/s
# Warmup Iteration  13: 699850.257 ops/s
# Warmup Iteration  14: 704266.970 ops/s
# Warmup Iteration  15: 703942.989 ops/s
# Warmup Iteration  16: 702354.204 ops/s
# Warmup Iteration  17: 734620.207 ops/s
# Warmup Iteration  18: 735005.101 ops/s
# Warmup Iteration  19: 734637.870 ops/s
# Warmup Iteration  20: 732460.329 ops/s
# Warmup Iteration  21: 734973.093 ops/s
# Warmup Iteration  22: 734111.102 ops/s
# Warmup Iteration  23: 735727.620 ops/s
# Warmup Iteration  24: 736238.380 ops/s
# Warmup Iteration  25: 734114.117 ops/s
# Warmup Iteration  26: 733541.405 ops/s
# Warmup Iteration  27: 732878.218 ops/s
# Warmup Iteration  28: 733663.981 ops/s
# Warmup Iteration  29: 732777.830 ops/s
# Warmup Iteration  30: 731988.014 ops/s
Iteration   1: 737059.705 ops/s
Iteration   2: 734858.318 ops/s
Iteration   3: 738074.172 ops/s
Iteration   4: 734676.475 ops/s
Iteration   5: 736604.538 ops/s
Iteration   6: 737081.492 ops/s
Iteration   7: 734565.258 ops/s
Iteration   8: 735954.994 ops/s
Iteration   9: 732458.454 ops/s
Iteration  10: 733197.773 ops/s
Iteration  11: 734860.045 ops/s
Iteration  12: 735768.078 ops/s
Iteration  13: 733723.224 ops/s
Iteration  14: 736959.974 ops/s
Iteration  15: 737734.622 ops/s
Iteration  16: 732843.097 ops/s
Iteration  17: 734851.714 ops/s
Iteration  18: 733726.692 ops/s
Iteration  19: 734148.260 ops/s
Iteration  20: 732102.662 ops/s
Iteration  21: 735390.095 ops/s
Iteration  22: 735766.405 ops/s
Iteration  23: 735842.141 ops/s
Iteration  24: 734506.320 ops/s
Iteration  25: 735708.029 ops/s
Iteration  26: 735260.385 ops/s
Iteration  27: 733319.479 ops/s
Iteration  28: 737552.572 ops/s
Iteration  29: 735858.162 ops/s
Iteration  30: 734102.653 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws":
  735151.860 ±(99.9%) 1059.721 ops/s [Average]
  (min, avg, max) = (732102.662, 735151.860, 738074.172), stdev = 1586.140
  CI (99.9%): [734092.139, 736211.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_chunk_zero_throws  thrpt   30  735151.860 ± 1059.721  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_clear$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_clear

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1542199.973 ops/s
# Warmup Iteration   2: 4015173.804 ops/s
# Warmup Iteration   3: 3963300.075 ops/s
# Warmup Iteration   4: 3277370.203 ops/s
# Warmup Iteration   5: 3971726.182 ops/s
# Warmup Iteration   6: 3987342.016 ops/s
# Warmup Iteration   7: 3974726.848 ops/s
# Warmup Iteration   8: 3976189.843 ops/s
# Warmup Iteration   9: 3970546.750 ops/s
# Warmup Iteration  10: 3974477.198 ops/s
# Warmup Iteration  11: 3970110.444 ops/s
# Warmup Iteration  12: 3956977.468 ops/s
# Warmup Iteration  13: 3990902.721 ops/s
# Warmup Iteration  14: 3966740.776 ops/s
# Warmup Iteration  15: 3965988.691 ops/s
# Warmup Iteration  16: 3979496.612 ops/s
# Warmup Iteration  17: 3974493.508 ops/s
# Warmup Iteration  18: 3964033.660 ops/s
# Warmup Iteration  19: 3983173.687 ops/s
# Warmup Iteration  20: 3986307.260 ops/s
# Warmup Iteration  21: 3972114.695 ops/s
# Warmup Iteration  22: 3970756.496 ops/s
# Warmup Iteration  23: 3972615.375 ops/s
# Warmup Iteration  24: 3977635.463 ops/s
# Warmup Iteration  25: 3962488.142 ops/s
# Warmup Iteration  26: 3981746.851 ops/s
# Warmup Iteration  27: 3974200.118 ops/s
# Warmup Iteration  28: 3973307.355 ops/s
# Warmup Iteration  29: 3971356.446 ops/s
# Warmup Iteration  30: 3985319.198 ops/s
Iteration   1: 3975198.061 ops/s
Iteration   2: 3992660.251 ops/s
Iteration   3: 3968746.145 ops/s
Iteration   4: 3995764.039 ops/s
Iteration   5: 3974406.895 ops/s
Iteration   6: 3966018.934 ops/s
Iteration   7: 3987477.539 ops/s
Iteration   8: 3999937.463 ops/s
Iteration   9: 3971096.738 ops/s
Iteration  10: 3961213.230 ops/s
Iteration  11: 3992526.302 ops/s
Iteration  12: 3993440.561 ops/s
Iteration  13: 3986269.745 ops/s
Iteration  14: 3976107.291 ops/s
Iteration  15: 3989883.104 ops/s
Iteration  16: 3978952.305 ops/s
Iteration  17: 3993466.084 ops/s
Iteration  18: 3979829.270 ops/s
Iteration  19: 3998328.544 ops/s
Iteration  20: 3980871.630 ops/s
Iteration  21: 3973970.051 ops/s
Iteration  22: 3979313.296 ops/s
Iteration  23: 3990240.421 ops/s
Iteration  24: 3959939.347 ops/s
Iteration  25: 3974562.962 ops/s
Iteration  26: 3990019.405 ops/s
Iteration  27: 3995936.540 ops/s
Iteration  28: 3961729.647 ops/s
Iteration  29: 3953200.768 ops/s
Iteration  30: 3965572.990 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_clear":
  3980222.652 ±(99.9%) 8654.785 ops/s [Average]
  (min, avg, max) = (3953200.768, 3980222.652, 3999937.463), stdev = 12954.076
  CI (99.9%): [3971567.867, 3988877.437] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_clear  thrpt   30  3980222.652 ± 8654.785  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 357754.736 ops/s
# Warmup Iteration   2: 735664.930 ops/s
# Warmup Iteration   3: 808159.827 ops/s
# Warmup Iteration   4: 814449.728 ops/s
# Warmup Iteration   5: 670711.621 ops/s
# Warmup Iteration   6: 814408.702 ops/s
# Warmup Iteration   7: 819716.151 ops/s
# Warmup Iteration   8: 818887.600 ops/s
# Warmup Iteration   9: 814755.468 ops/s
# Warmup Iteration  10: 820013.189 ops/s
# Warmup Iteration  11: 817726.309 ops/s
# Warmup Iteration  12: 822932.431 ops/s
# Warmup Iteration  13: 812916.423 ops/s
# Warmup Iteration  14: 815276.656 ops/s
# Warmup Iteration  15: 816968.690 ops/s
# Warmup Iteration  16: 813557.036 ops/s
# Warmup Iteration  17: 815350.926 ops/s
# Warmup Iteration  18: 816081.292 ops/s
# Warmup Iteration  19: 817194.962 ops/s
# Warmup Iteration  20: 823396.478 ops/s
# Warmup Iteration  21: 817581.393 ops/s
# Warmup Iteration  22: 814756.652 ops/s
# Warmup Iteration  23: 816742.665 ops/s
# Warmup Iteration  24: 814510.492 ops/s
# Warmup Iteration  25: 821314.963 ops/s
# Warmup Iteration  26: 817848.308 ops/s
# Warmup Iteration  27: 813614.620 ops/s
# Warmup Iteration  28: 818474.452 ops/s
# Warmup Iteration  29: 816718.074 ops/s
# Warmup Iteration  30: 818163.495 ops/s
Iteration   1: 820642.026 ops/s
Iteration   2: 811795.930 ops/s
Iteration   3: 805736.919 ops/s
Iteration   4: 811933.810 ops/s
Iteration   5: 820510.616 ops/s
Iteration   6: 812392.202 ops/s
Iteration   7: 817403.014 ops/s
Iteration   8: 817514.713 ops/s
Iteration   9: 826738.455 ops/s
Iteration  10: 813667.332 ops/s
Iteration  11: 813914.714 ops/s
Iteration  12: 815593.538 ops/s
Iteration  13: 822715.491 ops/s
Iteration  14: 813899.701 ops/s
Iteration  15: 815842.176 ops/s
Iteration  16: 812280.660 ops/s
Iteration  17: 810908.663 ops/s
Iteration  18: 817851.087 ops/s
Iteration  19: 809240.215 ops/s
Iteration  20: 817775.720 ops/s
Iteration  21: 821106.976 ops/s
Iteration  22: 810717.652 ops/s
Iteration  23: 816560.919 ops/s
Iteration  24: 818880.002 ops/s
Iteration  25: 817139.142 ops/s
Iteration  26: 809289.135 ops/s
Iteration  27: 817953.136 ops/s
Iteration  28: 817845.616 ops/s
Iteration  29: 813388.436 ops/s
Iteration  30: 814388.740 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collect":
  815520.891 ±(99.9%) 2998.749 ops/s [Average]
  (min, avg, max) = (805736.919, 815520.891, 826738.455), stdev = 4488.387
  CI (99.9%): [812522.142, 818519.640] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collect  thrpt   30  815520.891 ± 2998.749  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2684426.817 ops/s
# Warmup Iteration   2: 6705493.250 ops/s
# Warmup Iteration   3: 5879253.849 ops/s
# Warmup Iteration   4: 6562538.907 ops/s
# Warmup Iteration   5: 6776692.929 ops/s
# Warmup Iteration   6: 6789906.849 ops/s
# Warmup Iteration   7: 6801532.873 ops/s
# Warmup Iteration   8: 6784226.252 ops/s
# Warmup Iteration   9: 6795986.472 ops/s
# Warmup Iteration  10: 6793431.257 ops/s
# Warmup Iteration  11: 6761945.339 ops/s
# Warmup Iteration  12: 6800791.421 ops/s
# Warmup Iteration  13: 6795535.175 ops/s
# Warmup Iteration  14: 6768248.561 ops/s
# Warmup Iteration  15: 6759459.485 ops/s
# Warmup Iteration  16: 6756235.603 ops/s
# Warmup Iteration  17: 6780032.116 ops/s
# Warmup Iteration  18: 6771182.494 ops/s
# Warmup Iteration  19: 6801536.928 ops/s
# Warmup Iteration  20: 6773776.172 ops/s
# Warmup Iteration  21: 6772085.221 ops/s
# Warmup Iteration  22: 6762640.491 ops/s
# Warmup Iteration  23: 6798641.981 ops/s
# Warmup Iteration  24: 6800422.642 ops/s
# Warmup Iteration  25: 6773479.794 ops/s
# Warmup Iteration  26: 6804007.922 ops/s
# Warmup Iteration  27: 6792352.719 ops/s
# Warmup Iteration  28: 6782277.980 ops/s
# Warmup Iteration  29: 6793592.665 ops/s
# Warmup Iteration  30: 6797422.211 ops/s
Iteration   1: 6785895.723 ops/s
Iteration   2: 6779673.425 ops/s
Iteration   3: 6758177.901 ops/s
Iteration   4: 6799103.373 ops/s
Iteration   5: 6803975.049 ops/s
Iteration   6: 6810130.839 ops/s
Iteration   7: 6797856.487 ops/s
Iteration   8: 6782701.357 ops/s
Iteration   9: 6777626.465 ops/s
Iteration  10: 6805509.527 ops/s
Iteration  11: 6845637.852 ops/s
Iteration  12: 6805737.089 ops/s
Iteration  13: 6790622.087 ops/s
Iteration  14: 6812793.433 ops/s
Iteration  15: 6810507.625 ops/s
Iteration  16: 6802085.190 ops/s
Iteration  17: 6788211.253 ops/s
Iteration  18: 6814390.454 ops/s
Iteration  19: 6803185.358 ops/s
Iteration  20: 6812289.427 ops/s
Iteration  21: 6794285.252 ops/s
Iteration  22: 6803769.141 ops/s
Iteration  23: 6777032.142 ops/s
Iteration  24: 6796177.065 ops/s
Iteration  25: 6823220.063 ops/s
Iteration  26: 6832745.180 ops/s
Iteration  27: 6832580.245 ops/s
Iteration  28: 6821736.017 ops/s
Iteration  29: 6800657.373 ops/s
Iteration  30: 6784719.366 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean":
  6801767.725 ±(99.9%) 12517.131 ops/s [Average]
  (min, avg, max) = (6758177.901, 6801767.725, 6845637.852), stdev = 18735.054
  CI (99.9%): [6789250.594, 6814284.857] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBoolean  thrpt   30  6801767.725 ± 12517.131  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 2974672.501 ops/s
# Warmup Iteration   2: 7275660.399 ops/s
# Warmup Iteration   3: 6094749.376 ops/s
# Warmup Iteration   4: 7326273.200 ops/s
# Warmup Iteration   5: 7352291.256 ops/s
# Warmup Iteration   6: 7350620.953 ops/s
# Warmup Iteration   7: 7364613.957 ops/s
# Warmup Iteration   8: 7370567.706 ops/s
# Warmup Iteration   9: 7333700.551 ops/s
# Warmup Iteration  10: 7349807.071 ops/s
# Warmup Iteration  11: 7365277.078 ops/s
# Warmup Iteration  12: 7348280.121 ops/s
# Warmup Iteration  13: 7360496.948 ops/s
# Warmup Iteration  14: 7372153.011 ops/s
# Warmup Iteration  15: 7390369.368 ops/s
# Warmup Iteration  16: 7381139.254 ops/s
# Warmup Iteration  17: 7406934.020 ops/s
# Warmup Iteration  18: 7414139.484 ops/s
# Warmup Iteration  19: 7418204.635 ops/s
# Warmup Iteration  20: 7394129.922 ops/s
# Warmup Iteration  21: 7415104.205 ops/s
# Warmup Iteration  22: 7392497.103 ops/s
# Warmup Iteration  23: 7382181.419 ops/s
# Warmup Iteration  24: 7411963.459 ops/s
# Warmup Iteration  25: 7404108.494 ops/s
# Warmup Iteration  26: 7389918.418 ops/s
# Warmup Iteration  27: 7413150.872 ops/s
# Warmup Iteration  28: 7401767.829 ops/s
# Warmup Iteration  29: 7408568.773 ops/s
# Warmup Iteration  30: 7356080.739 ops/s
Iteration   1: 7371208.098 ops/s
Iteration   2: 7414231.555 ops/s
Iteration   3: 7382084.532 ops/s
Iteration   4: 7382071.388 ops/s
Iteration   5: 7405607.180 ops/s
Iteration   6: 7403302.563 ops/s
Iteration   7: 7396170.871 ops/s
Iteration   8: 7346877.141 ops/s
Iteration   9: 7383370.473 ops/s
Iteration  10: 7408604.949 ops/s
Iteration  11: 7352524.419 ops/s
Iteration  12: 7369896.079 ops/s
Iteration  13: 7376008.021 ops/s
Iteration  14: 7408983.015 ops/s
Iteration  15: 7412268.078 ops/s
Iteration  16: 7391899.412 ops/s
Iteration  17: 7397517.945 ops/s
Iteration  18: 7394828.490 ops/s
Iteration  19: 7357023.913 ops/s
Iteration  20: 7358200.682 ops/s
Iteration  21: 7357306.647 ops/s
Iteration  22: 7390255.119 ops/s
Iteration  23: 7405335.203 ops/s
Iteration  24: 7373436.835 ops/s
Iteration  25: 7401894.486 ops/s
Iteration  26: 7385888.170 ops/s
Iteration  27: 7367365.834 ops/s
Iteration  28: 7336925.927 ops/s
Iteration  29: 7340835.478 ops/s
Iteration  30: 7344739.182 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget":
  7380555.390 ±(99.9%) 15531.692 ops/s [Average]
  (min, avg, max) = (7336925.927, 7380555.390, 7414231.555), stdev = 23247.107
  CI (99.9%): [7365023.698, 7396087.082] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithBagTarget  thrpt   30  7380555.390 ± 15531.692  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1814121.474 ops/s
# Warmup Iteration   2: 4490699.216 ops/s
# Warmup Iteration   3: 4572276.430 ops/s
# Warmup Iteration   4: 3776705.963 ops/s
# Warmup Iteration   5: 4581070.674 ops/s
# Warmup Iteration   6: 4575293.657 ops/s
# Warmup Iteration   7: 4588167.604 ops/s
# Warmup Iteration   8: 4584272.394 ops/s
# Warmup Iteration   9: 4589209.936 ops/s
# Warmup Iteration  10: 4594075.978 ops/s
# Warmup Iteration  11: 4586885.772 ops/s
# Warmup Iteration  12: 4597885.407 ops/s
# Warmup Iteration  13: 4593621.227 ops/s
# Warmup Iteration  14: 4587558.556 ops/s
# Warmup Iteration  15: 4583020.156 ops/s
# Warmup Iteration  16: 4596833.423 ops/s
# Warmup Iteration  17: 4599114.321 ops/s
# Warmup Iteration  18: 4588069.224 ops/s
# Warmup Iteration  19: 4607788.892 ops/s
# Warmup Iteration  20: 4615126.769 ops/s
# Warmup Iteration  21: 4605553.509 ops/s
# Warmup Iteration  22: 4614981.077 ops/s
# Warmup Iteration  23: 4609480.483 ops/s
# Warmup Iteration  24: 4614082.599 ops/s
# Warmup Iteration  25: 4598965.937 ops/s
# Warmup Iteration  26: 4605597.038 ops/s
# Warmup Iteration  27: 4600359.035 ops/s
# Warmup Iteration  28: 4615391.290 ops/s
# Warmup Iteration  29: 4617953.742 ops/s
# Warmup Iteration  30: 4613592.163 ops/s
Iteration   1: 4595029.637 ops/s
Iteration   2: 4594720.215 ops/s
Iteration   3: 4590344.887 ops/s
Iteration   4: 4616882.611 ops/s
Iteration   5: 4609791.490 ops/s
Iteration   6: 4625703.151 ops/s
Iteration   7: 4599892.956 ops/s
Iteration   8: 4613996.080 ops/s
Iteration   9: 4618284.927 ops/s
Iteration  10: 4596481.391 ops/s
Iteration  11: 4607799.271 ops/s
Iteration  12: 4618826.614 ops/s
Iteration  13: 4609923.595 ops/s
Iteration  14: 4625576.766 ops/s
Iteration  15: 4598306.115 ops/s
Iteration  16: 4600912.939 ops/s
Iteration  17: 4599534.202 ops/s
Iteration  18: 4603747.723 ops/s
Iteration  19: 4608762.698 ops/s
Iteration  20: 4618907.000 ops/s
Iteration  21: 4610978.657 ops/s
Iteration  22: 4606559.514 ops/s
Iteration  23: 4610277.778 ops/s
Iteration  24: 4603465.200 ops/s
Iteration  25: 4603956.041 ops/s
Iteration  26: 4611735.425 ops/s
Iteration  27: 4628855.985 ops/s
Iteration  28: 4620838.755 ops/s
Iteration  29: 4592707.923 ops/s
Iteration  30: 4606832.083 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget":
  4608321.054 ±(99.9%) 6878.932 ops/s [Average]
  (min, avg, max) = (4590344.887, 4608321.054, 4628855.985), stdev = 10296.062
  CI (99.9%): [4601442.123, 4615199.986] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectBooleanWithTarget  thrpt   30  4608321.054 ± 6878.932  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 546148.637 ops/s
# Warmup Iteration   2: 1291227.824 ops/s
# Warmup Iteration   3: 1365266.407 ops/s
# Warmup Iteration   4: 1198490.041 ops/s
# Warmup Iteration   5: 1308535.691 ops/s
# Warmup Iteration   6: 1368169.587 ops/s
# Warmup Iteration   7: 1372285.276 ops/s
# Warmup Iteration   8: 1367050.141 ops/s
# Warmup Iteration   9: 1366717.194 ops/s
# Warmup Iteration  10: 1368255.289 ops/s
# Warmup Iteration  11: 1366160.779 ops/s
# Warmup Iteration  12: 1367519.873 ops/s
# Warmup Iteration  13: 1369000.910 ops/s
# Warmup Iteration  14: 1369180.576 ops/s
# Warmup Iteration  15: 1371726.649 ops/s
# Warmup Iteration  16: 1368305.910 ops/s
# Warmup Iteration  17: 1370814.335 ops/s
# Warmup Iteration  18: 1372927.970 ops/s
# Warmup Iteration  19: 1373188.048 ops/s
# Warmup Iteration  20: 1366642.685 ops/s
# Warmup Iteration  21: 1372367.432 ops/s
# Warmup Iteration  22: 1375329.749 ops/s
# Warmup Iteration  23: 1367848.266 ops/s
# Warmup Iteration  24: 1366882.051 ops/s
# Warmup Iteration  25: 1370121.245 ops/s
# Warmup Iteration  26: 1374378.587 ops/s
# Warmup Iteration  27: 1369815.749 ops/s
# Warmup Iteration  28: 1368317.866 ops/s
# Warmup Iteration  29: 1373090.282 ops/s
# Warmup Iteration  30: 1369177.180 ops/s
Iteration   1: 1373198.053 ops/s
Iteration   2: 1374169.141 ops/s
Iteration   3: 1374506.984 ops/s
Iteration   4: 1366142.520 ops/s
Iteration   5: 1371644.949 ops/s
Iteration   6: 1358164.185 ops/s
Iteration   7: 1371291.435 ops/s
Iteration   8: 1371676.339 ops/s
Iteration   9: 1372799.654 ops/s
Iteration  10: 1376794.955 ops/s
Iteration  11: 1371908.452 ops/s
Iteration  12: 1367862.357 ops/s
Iteration  13: 1369690.225 ops/s
Iteration  14: 1370717.758 ops/s
Iteration  15: 1372852.525 ops/s
Iteration  16: 1366268.952 ops/s
Iteration  17: 1372483.132 ops/s
Iteration  18: 1368591.441 ops/s
Iteration  19: 1363445.774 ops/s
Iteration  20: 1369310.317 ops/s
Iteration  21: 1370664.200 ops/s
Iteration  22: 1368428.189 ops/s
Iteration  23: 1371021.125 ops/s
Iteration  24: 1371059.177 ops/s
Iteration  25: 1375534.453 ops/s
Iteration  26: 1367750.419 ops/s
Iteration  27: 1369755.756 ops/s
Iteration  28: 1365649.512 ops/s
Iteration  29: 1370281.032 ops/s
Iteration  30: 1372106.228 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByte":
  1370192.308 ±(99.9%) 2511.231 ops/s [Average]
  (min, avg, max) = (1358164.185, 1370192.308, 1376794.955), stdev = 3758.692
  CI (99.9%): [1367681.077, 1372703.539] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByte  thrpt   30  1370192.308 ± 2511.231  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 948118.382 ops/s
# Warmup Iteration   2: 2282932.268 ops/s
# Warmup Iteration   3: 2392771.487 ops/s
# Warmup Iteration   4: 1975151.824 ops/s
# Warmup Iteration   5: 2390223.712 ops/s
# Warmup Iteration   6: 2386440.319 ops/s
# Warmup Iteration   7: 2390955.025 ops/s
# Warmup Iteration   8: 2370305.198 ops/s
# Warmup Iteration   9: 2384393.252 ops/s
# Warmup Iteration  10: 2384001.089 ops/s
# Warmup Iteration  11: 2385212.224 ops/s
# Warmup Iteration  12: 2389859.512 ops/s
# Warmup Iteration  13: 2388661.412 ops/s
# Warmup Iteration  14: 2384720.047 ops/s
# Warmup Iteration  15: 2389083.349 ops/s
# Warmup Iteration  16: 2393133.396 ops/s
# Warmup Iteration  17: 2386350.752 ops/s
# Warmup Iteration  18: 2379096.319 ops/s
# Warmup Iteration  19: 2379850.301 ops/s
# Warmup Iteration  20: 2386227.328 ops/s
# Warmup Iteration  21: 2383860.265 ops/s
# Warmup Iteration  22: 2377329.386 ops/s
# Warmup Iteration  23: 2385116.661 ops/s
# Warmup Iteration  24: 2387499.363 ops/s
# Warmup Iteration  25: 2389742.990 ops/s
# Warmup Iteration  26: 2394234.844 ops/s
# Warmup Iteration  27: 2390715.821 ops/s
# Warmup Iteration  28: 2374919.316 ops/s
# Warmup Iteration  29: 2389093.883 ops/s
# Warmup Iteration  30: 2391154.082 ops/s
Iteration   1: 2388301.567 ops/s
Iteration   2: 2380776.030 ops/s
Iteration   3: 2386061.019 ops/s
Iteration   4: 2381417.687 ops/s
Iteration   5: 2383459.808 ops/s
Iteration   6: 2393205.076 ops/s
Iteration   7: 2384730.473 ops/s
Iteration   8: 2386981.025 ops/s
Iteration   9: 2382219.633 ops/s
Iteration  10: 2377340.302 ops/s
Iteration  11: 2387034.770 ops/s
Iteration  12: 2384202.636 ops/s
Iteration  13: 2384840.239 ops/s
Iteration  14: 2394803.731 ops/s
Iteration  15: 2371062.457 ops/s
Iteration  16: 2372184.199 ops/s
Iteration  17: 2385322.441 ops/s
Iteration  18: 2393961.907 ops/s
Iteration  19: 2379472.969 ops/s
Iteration  20: 2391189.087 ops/s
Iteration  21: 2384125.680 ops/s
Iteration  22: 2389565.181 ops/s
Iteration  23: 2390572.798 ops/s
Iteration  24: 2392383.424 ops/s
Iteration  25: 2392285.856 ops/s
Iteration  26: 2385243.613 ops/s
Iteration  27: 2387755.039 ops/s
Iteration  28: 2382090.257 ops/s
Iteration  29: 2385321.974 ops/s
Iteration  30: 2377256.457 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget":
  2385172.244 ±(99.9%) 3975.973 ops/s [Average]
  (min, avg, max) = (2371062.457, 2385172.244, 2394803.731), stdev = 5951.049
  CI (99.9%): [2381196.272, 2389148.217] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithBagTarget  thrpt   30  2385172.244 ± 3975.973  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 833034.693 ops/s
# Warmup Iteration   2: 1940081.340 ops/s
# Warmup Iteration   3: 2034569.785 ops/s
# Warmup Iteration   4: 1897541.685 ops/s
# Warmup Iteration   5: 1856358.938 ops/s
# Warmup Iteration   6: 2044777.208 ops/s
# Warmup Iteration   7: 2053225.075 ops/s
# Warmup Iteration   8: 2053205.085 ops/s
# Warmup Iteration   9: 2048637.707 ops/s
# Warmup Iteration  10: 2048994.810 ops/s
# Warmup Iteration  11: 2047783.813 ops/s
# Warmup Iteration  12: 2055414.151 ops/s
# Warmup Iteration  13: 2048278.065 ops/s
# Warmup Iteration  14: 2047663.650 ops/s
# Warmup Iteration  15: 2052517.275 ops/s
# Warmup Iteration  16: 2048310.658 ops/s
# Warmup Iteration  17: 2056733.169 ops/s
# Warmup Iteration  18: 2043792.620 ops/s
# Warmup Iteration  19: 2052862.565 ops/s
# Warmup Iteration  20: 2055501.238 ops/s
# Warmup Iteration  21: 2050915.572 ops/s
# Warmup Iteration  22: 2055005.027 ops/s
# Warmup Iteration  23: 2043719.577 ops/s
# Warmup Iteration  24: 2055769.756 ops/s
# Warmup Iteration  25: 2054184.964 ops/s
# Warmup Iteration  26: 2051098.442 ops/s
# Warmup Iteration  27: 2056787.951 ops/s
# Warmup Iteration  28: 2049564.371 ops/s
# Warmup Iteration  29: 2053638.688 ops/s
# Warmup Iteration  30: 2056622.931 ops/s
Iteration   1: 2053621.426 ops/s
Iteration   2: 2056169.579 ops/s
Iteration   3: 2048065.532 ops/s
Iteration   4: 2038916.402 ops/s
Iteration   5: 2051799.358 ops/s
Iteration   6: 2034328.445 ops/s
Iteration   7: 2050007.648 ops/s
Iteration   8: 2054248.625 ops/s
Iteration   9: 2054082.368 ops/s
Iteration  10: 2057969.308 ops/s
Iteration  11: 2052797.589 ops/s
Iteration  12: 2052310.834 ops/s
Iteration  13: 2058510.107 ops/s
Iteration  14: 2052723.498 ops/s
Iteration  15: 2061896.504 ops/s
Iteration  16: 2060472.082 ops/s
Iteration  17: 2064325.060 ops/s
Iteration  18: 2056107.136 ops/s
Iteration  19: 2052989.663 ops/s
Iteration  20: 2052574.926 ops/s
Iteration  21: 2054920.351 ops/s
Iteration  22: 2055915.442 ops/s
Iteration  23: 2050292.685 ops/s
Iteration  24: 2037798.266 ops/s
Iteration  25: 2046018.445 ops/s
Iteration  26: 2055845.612 ops/s
Iteration  27: 2051161.012 ops/s
Iteration  28: 2054140.450 ops/s
Iteration  29: 2049097.432 ops/s
Iteration  30: 2057952.291 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget":
  2052568.603 ±(99.9%) 4421.164 ops/s [Average]
  (min, avg, max) = (2034328.445, 2052568.603, 2064325.060), stdev = 6617.391
  CI (99.9%): [2048147.438, 2056989.767] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectByteWithTarget  thrpt   30  2052568.603 ± 4421.164  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 538541.436 ops/s
# Warmup Iteration   2: 1324477.006 ops/s
# Warmup Iteration   3: 1394256.627 ops/s
# Warmup Iteration   4: 1156971.788 ops/s
# Warmup Iteration   5: 1398242.521 ops/s
# Warmup Iteration   6: 1397035.515 ops/s
# Warmup Iteration   7: 1393058.903 ops/s
# Warmup Iteration   8: 1392291.402 ops/s
# Warmup Iteration   9: 1401891.916 ops/s
# Warmup Iteration  10: 1400673.972 ops/s
# Warmup Iteration  11: 1396923.253 ops/s
# Warmup Iteration  12: 1396017.480 ops/s
# Warmup Iteration  13: 1397332.551 ops/s
# Warmup Iteration  14: 1401206.628 ops/s
# Warmup Iteration  15: 1401637.190 ops/s
# Warmup Iteration  16: 1397567.838 ops/s
# Warmup Iteration  17: 1398609.718 ops/s
# Warmup Iteration  18: 1397994.940 ops/s
# Warmup Iteration  19: 1397115.041 ops/s
# Warmup Iteration  20: 1397964.970 ops/s
# Warmup Iteration  21: 1394344.111 ops/s
# Warmup Iteration  22: 1397229.535 ops/s
# Warmup Iteration  23: 1402051.779 ops/s
# Warmup Iteration  24: 1399223.273 ops/s
# Warmup Iteration  25: 1399273.775 ops/s
# Warmup Iteration  26: 1398390.982 ops/s
# Warmup Iteration  27: 1402135.190 ops/s
# Warmup Iteration  28: 1396151.310 ops/s
# Warmup Iteration  29: 1400152.078 ops/s
# Warmup Iteration  30: 1403376.639 ops/s
Iteration   1: 1399523.915 ops/s
Iteration   2: 1397120.984 ops/s
Iteration   3: 1396486.213 ops/s
Iteration   4: 1398456.673 ops/s
Iteration   5: 1402318.922 ops/s
Iteration   6: 1402295.440 ops/s
Iteration   7: 1402772.072 ops/s
Iteration   8: 1405500.564 ops/s
Iteration   9: 1394863.774 ops/s
Iteration  10: 1396420.439 ops/s
Iteration  11: 1406122.357 ops/s
Iteration  12: 1402393.180 ops/s
Iteration  13: 1394990.059 ops/s
Iteration  14: 1397230.485 ops/s
Iteration  15: 1393014.608 ops/s
Iteration  16: 1390144.218 ops/s
Iteration  17: 1399735.964 ops/s
Iteration  18: 1396690.518 ops/s
Iteration  19: 1398245.106 ops/s
Iteration  20: 1398232.009 ops/s
Iteration  21: 1393048.983 ops/s
Iteration  22: 1393536.633 ops/s
Iteration  23: 1392382.553 ops/s
Iteration  24: 1397206.190 ops/s
Iteration  25: 1396879.572 ops/s
Iteration  26: 1395006.233 ops/s
Iteration  27: 1393277.451 ops/s
Iteration  28: 1397408.264 ops/s
Iteration  29: 1393404.460 ops/s
Iteration  30: 1392758.489 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectChar":
  1397248.878 ±(99.9%) 2665.395 ops/s [Average]
  (min, avg, max) = (1390144.218, 1397248.878, 1406122.357), stdev = 3989.438
  CI (99.9%): [1394583.483, 1399914.273] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectChar  thrpt   30  1397248.878 ± 2665.395  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 921730.677 ops/s
# Warmup Iteration   2: 2351121.687 ops/s
# Warmup Iteration   3: 2444050.633 ops/s
# Warmup Iteration   4: 2037620.377 ops/s
# Warmup Iteration   5: 2444400.039 ops/s
# Warmup Iteration   6: 2440634.406 ops/s
# Warmup Iteration   7: 2450121.964 ops/s
# Warmup Iteration   8: 2447659.127 ops/s
# Warmup Iteration   9: 2444283.509 ops/s
# Warmup Iteration  10: 2448581.716 ops/s
# Warmup Iteration  11: 2455522.152 ops/s
# Warmup Iteration  12: 2449501.754 ops/s
# Warmup Iteration  13: 2453262.567 ops/s
# Warmup Iteration  14: 2455278.335 ops/s
# Warmup Iteration  15: 2459168.661 ops/s
# Warmup Iteration  16: 2447523.078 ops/s
# Warmup Iteration  17: 2424554.499 ops/s
# Warmup Iteration  18: 2434726.423 ops/s
# Warmup Iteration  19: 2427641.680 ops/s
# Warmup Iteration  20: 2423140.621 ops/s
# Warmup Iteration  21: 2419337.910 ops/s
# Warmup Iteration  22: 2432905.267 ops/s
# Warmup Iteration  23: 2426077.563 ops/s
# Warmup Iteration  24: 2430236.348 ops/s
# Warmup Iteration  25: 2433997.681 ops/s
# Warmup Iteration  26: 2426776.819 ops/s
# Warmup Iteration  27: 2436934.646 ops/s
# Warmup Iteration  28: 2427124.244 ops/s
# Warmup Iteration  29: 2430849.546 ops/s
# Warmup Iteration  30: 2428825.960 ops/s
Iteration   1: 2433679.996 ops/s
Iteration   2: 2421901.363 ops/s
Iteration   3: 2427031.432 ops/s
Iteration   4: 2417681.463 ops/s
Iteration   5: 2431750.490 ops/s
Iteration   6: 2423212.075 ops/s
Iteration   7: 2439258.877 ops/s
Iteration   8: 2427942.245 ops/s
Iteration   9: 2432187.365 ops/s
Iteration  10: 2441002.616 ops/s
Iteration  11: 2427224.087 ops/s
Iteration  12: 2415164.243 ops/s
Iteration  13: 2431676.394 ops/s
Iteration  14: 2430071.897 ops/s
Iteration  15: 2430388.639 ops/s
Iteration  16: 2432594.525 ops/s
Iteration  17: 2430792.527 ops/s
Iteration  18: 2428589.887 ops/s
Iteration  19: 2420100.811 ops/s
Iteration  20: 2425620.049 ops/s
Iteration  21: 2422460.186 ops/s
Iteration  22: 2435051.961 ops/s
Iteration  23: 2420601.027 ops/s
Iteration  24: 2428162.465 ops/s
Iteration  25: 2438521.307 ops/s
Iteration  26: 2422138.729 ops/s
Iteration  27: 2424278.824 ops/s
Iteration  28: 2411026.831 ops/s
Iteration  29: 2443090.600 ops/s
Iteration  30: 2426335.532 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget":
  2427984.615 ±(99.9%) 5002.904 ops/s [Average]
  (min, avg, max) = (2411026.831, 2427984.615, 2443090.600), stdev = 7488.112
  CI (99.9%): [2422981.711, 2432987.519] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithBagTarget  thrpt   30  2427984.615 ± 5002.904  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 835096.920 ops/s
# Warmup Iteration   2: 2005676.948 ops/s
# Warmup Iteration   3: 2095611.949 ops/s
# Warmup Iteration   4: 1732221.326 ops/s
# Warmup Iteration   5: 2097386.854 ops/s
# Warmup Iteration   6: 2059382.933 ops/s
# Warmup Iteration   7: 2101085.974 ops/s
# Warmup Iteration   8: 2098935.763 ops/s
# Warmup Iteration   9: 2095918.152 ops/s
# Warmup Iteration  10: 2106097.163 ops/s
# Warmup Iteration  11: 2101203.772 ops/s
# Warmup Iteration  12: 2100633.810 ops/s
# Warmup Iteration  13: 2100041.188 ops/s
# Warmup Iteration  14: 2103704.618 ops/s
# Warmup Iteration  15: 2098157.694 ops/s
# Warmup Iteration  16: 2095342.649 ops/s
# Warmup Iteration  17: 2101272.548 ops/s
# Warmup Iteration  18: 2099125.056 ops/s
# Warmup Iteration  19: 2107152.954 ops/s
# Warmup Iteration  20: 2098903.476 ops/s
# Warmup Iteration  21: 2094346.038 ops/s
# Warmup Iteration  22: 2104620.633 ops/s
# Warmup Iteration  23: 2105979.082 ops/s
# Warmup Iteration  24: 2097413.464 ops/s
# Warmup Iteration  25: 2095943.999 ops/s
# Warmup Iteration  26: 2103439.990 ops/s
# Warmup Iteration  27: 2102063.540 ops/s
# Warmup Iteration  28: 2092101.128 ops/s
# Warmup Iteration  29: 2105778.577 ops/s
# Warmup Iteration  30: 2102772.981 ops/s
Iteration   1: 2108344.681 ops/s
Iteration   2: 2097014.204 ops/s
Iteration   3: 2098942.750 ops/s
Iteration   4: 2100355.891 ops/s
Iteration   5: 2107312.378 ops/s
Iteration   6: 2100263.940 ops/s
Iteration   7: 2094804.136 ops/s
Iteration   8: 2096259.695 ops/s
Iteration   9: 2095591.922 ops/s
Iteration  10: 2093427.925 ops/s
Iteration  11: 2091199.572 ops/s
Iteration  12: 2096056.527 ops/s
Iteration  13: 2101896.764 ops/s
Iteration  14: 2098002.167 ops/s
Iteration  15: 2096796.386 ops/s
Iteration  16: 2079855.998 ops/s
Iteration  17: 2095280.341 ops/s
Iteration  18: 2094840.512 ops/s
Iteration  19: 2100783.304 ops/s
Iteration  20: 2100980.833 ops/s
Iteration  21: 2098384.788 ops/s
Iteration  22: 2089364.587 ops/s
Iteration  23: 2095890.993 ops/s
Iteration  24: 2101874.623 ops/s
Iteration  25: 2101724.290 ops/s
Iteration  26: 2100048.408 ops/s
Iteration  27: 2105954.700 ops/s
Iteration  28: 2105239.432 ops/s
Iteration  29: 2091405.871 ops/s
Iteration  30: 2096253.197 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget":
  2097805.027 ±(99.9%) 3822.770 ops/s [Average]
  (min, avg, max) = (2079855.998, 2097805.027, 2108344.681), stdev = 5721.742
  CI (99.9%): [2093982.258, 2101627.797] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectCharWithTarget  thrpt   30  2097805.027 ± 3822.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 441098.205 ops/s
# Warmup Iteration   2: 1002070.682 ops/s
# Warmup Iteration   3: 1035708.479 ops/s
# Warmup Iteration   4: 928035.496 ops/s
# Warmup Iteration   5: 983157.184 ops/s
# Warmup Iteration   6: 1026967.871 ops/s
# Warmup Iteration   7: 1033646.407 ops/s
# Warmup Iteration   8: 1028593.427 ops/s
# Warmup Iteration   9: 1032910.685 ops/s
# Warmup Iteration  10: 1038005.806 ops/s
# Warmup Iteration  11: 1034570.284 ops/s
# Warmup Iteration  12: 1039163.826 ops/s
# Warmup Iteration  13: 1034355.529 ops/s
# Warmup Iteration  14: 1032812.134 ops/s
# Warmup Iteration  15: 1036762.886 ops/s
# Warmup Iteration  16: 1022813.299 ops/s
# Warmup Iteration  17: 1034436.982 ops/s
# Warmup Iteration  18: 1037740.812 ops/s
# Warmup Iteration  19: 1035724.606 ops/s
# Warmup Iteration  20: 1035425.256 ops/s
# Warmup Iteration  21: 1034701.192 ops/s
# Warmup Iteration  22: 1035622.533 ops/s
# Warmup Iteration  23: 1033832.398 ops/s
# Warmup Iteration  24: 1038671.064 ops/s
# Warmup Iteration  25: 1036769.354 ops/s
# Warmup Iteration  26: 1031732.591 ops/s
# Warmup Iteration  27: 1040156.097 ops/s
# Warmup Iteration  28: 1037646.293 ops/s
# Warmup Iteration  29: 1034307.885 ops/s
# Warmup Iteration  30: 1036623.154 ops/s
Iteration   1: 1039419.547 ops/s
Iteration   2: 1029962.061 ops/s
Iteration   3: 1041478.261 ops/s
Iteration   4: 1029723.904 ops/s
Iteration   5: 1027689.746 ops/s
Iteration   6: 1026892.311 ops/s
Iteration   7: 1036945.444 ops/s
Iteration   8: 1037178.885 ops/s
Iteration   9: 1030098.496 ops/s
Iteration  10: 1037831.151 ops/s
Iteration  11: 1037061.596 ops/s
Iteration  12: 1033711.257 ops/s
Iteration  13: 1037968.191 ops/s
Iteration  14: 1035557.519 ops/s
Iteration  15: 1038479.856 ops/s
Iteration  16: 1037514.957 ops/s
Iteration  17: 1034775.879 ops/s
Iteration  18: 1042121.120 ops/s
Iteration  19: 1029599.887 ops/s
Iteration  20: 1037436.712 ops/s
Iteration  21: 1039172.592 ops/s
Iteration  22: 1037186.731 ops/s
Iteration  23: 1045106.086 ops/s
Iteration  24: 1038093.049 ops/s
Iteration  25: 1041516.721 ops/s
Iteration  26: 1034729.013 ops/s
Iteration  27: 1033016.801 ops/s
Iteration  28: 1032712.455 ops/s
Iteration  29: 1033496.586 ops/s
Iteration  30: 1037803.557 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDouble":
  1035809.346 ±(99.9%) 2961.656 ops/s [Average]
  (min, avg, max) = (1026892.311, 1035809.346, 1045106.086), stdev = 4432.868
  CI (99.9%): [1032847.689, 1038771.002] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDouble  thrpt   30  1035809.346 ± 2961.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 788788.436 ops/s
# Warmup Iteration   2: 2069705.343 ops/s
# Warmup Iteration   3: 2104874.336 ops/s
# Warmup Iteration   4: 1731178.766 ops/s
# Warmup Iteration   5: 2098728.083 ops/s
# Warmup Iteration   6: 2096295.683 ops/s
# Warmup Iteration   7: 2094003.489 ops/s
# Warmup Iteration   8: 2090765.786 ops/s
# Warmup Iteration   9: 2103434.215 ops/s
# Warmup Iteration  10: 2102303.089 ops/s
# Warmup Iteration  11: 2099758.168 ops/s
# Warmup Iteration  12: 2100730.883 ops/s
# Warmup Iteration  13: 2102618.682 ops/s
# Warmup Iteration  14: 2099755.097 ops/s
# Warmup Iteration  15: 2097534.270 ops/s
# Warmup Iteration  16: 2102100.246 ops/s
# Warmup Iteration  17: 2105215.833 ops/s
# Warmup Iteration  18: 2093777.203 ops/s
# Warmup Iteration  19: 2111379.561 ops/s
# Warmup Iteration  20: 2105060.509 ops/s
# Warmup Iteration  21: 2092014.146 ops/s
# Warmup Iteration  22: 2105945.043 ops/s
# Warmup Iteration  23: 2114720.670 ops/s
# Warmup Iteration  24: 2105918.684 ops/s
# Warmup Iteration  25: 2111572.480 ops/s
# Warmup Iteration  26: 2115641.249 ops/s
# Warmup Iteration  27: 2111807.238 ops/s
# Warmup Iteration  28: 2109748.177 ops/s
# Warmup Iteration  29: 2111667.891 ops/s
# Warmup Iteration  30: 2111527.595 ops/s
Iteration   1: 2106823.349 ops/s
Iteration   2: 2102084.683 ops/s
Iteration   3: 2110830.825 ops/s
Iteration   4: 2097328.780 ops/s
Iteration   5: 2103643.319 ops/s
Iteration   6: 2111376.847 ops/s
Iteration   7: 2113243.230 ops/s
Iteration   8: 2098898.685 ops/s
Iteration   9: 2098270.158 ops/s
Iteration  10: 2116248.831 ops/s
Iteration  11: 2113197.608 ops/s
Iteration  12: 2114245.316 ops/s
Iteration  13: 2121024.512 ops/s
Iteration  14: 2116498.752 ops/s
Iteration  15: 2109791.623 ops/s
Iteration  16: 2115209.197 ops/s
Iteration  17: 2104075.783 ops/s
Iteration  18: 2115654.299 ops/s
Iteration  19: 2099224.667 ops/s
Iteration  20: 2112766.475 ops/s
Iteration  21: 2110889.114 ops/s
Iteration  22: 2114722.465 ops/s
Iteration  23: 2117684.479 ops/s
Iteration  24: 2122583.289 ops/s
Iteration  25: 2112007.816 ops/s
Iteration  26: 2118009.513 ops/s
Iteration  27: 2104530.272 ops/s
Iteration  28: 2109254.141 ops/s
Iteration  29: 2105098.905 ops/s
Iteration  30: 2104018.550 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget":
  2109974.516 ±(99.9%) 4634.869 ops/s [Average]
  (min, avg, max) = (2097328.780, 2109974.516, 2122583.289), stdev = 6937.255
  CI (99.9%): [2105339.647, 2114609.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithBagTarget  thrpt   30  2109974.516 ± 4634.869  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674423.868 ops/s
# Warmup Iteration   2: 1607272.080 ops/s
# Warmup Iteration   3: 1686292.494 ops/s
# Warmup Iteration   4: 1402786.432 ops/s
# Warmup Iteration   5: 1696875.025 ops/s
# Warmup Iteration   6: 1690308.424 ops/s
# Warmup Iteration   7: 1692292.647 ops/s
# Warmup Iteration   8: 1697400.645 ops/s
# Warmup Iteration   9: 1690416.040 ops/s
# Warmup Iteration  10: 1692374.308 ops/s
# Warmup Iteration  11: 1694068.616 ops/s
# Warmup Iteration  12: 1690381.758 ops/s
# Warmup Iteration  13: 1688736.915 ops/s
# Warmup Iteration  14: 1697891.701 ops/s
# Warmup Iteration  15: 1697203.881 ops/s
# Warmup Iteration  16: 1690301.361 ops/s
# Warmup Iteration  17: 1696188.124 ops/s
# Warmup Iteration  18: 1696135.043 ops/s
# Warmup Iteration  19: 1696436.415 ops/s
# Warmup Iteration  20: 1688101.945 ops/s
# Warmup Iteration  21: 1689747.271 ops/s
# Warmup Iteration  22: 1694853.078 ops/s
# Warmup Iteration  23: 1692720.227 ops/s
# Warmup Iteration  24: 1694420.136 ops/s
# Warmup Iteration  25: 1692981.724 ops/s
# Warmup Iteration  26: 1694036.598 ops/s
# Warmup Iteration  27: 1692669.874 ops/s
# Warmup Iteration  28: 1702144.378 ops/s
# Warmup Iteration  29: 1693604.406 ops/s
# Warmup Iteration  30: 1689216.438 ops/s
Iteration   1: 1698534.806 ops/s
Iteration   2: 1691534.527 ops/s
Iteration   3: 1693586.597 ops/s
Iteration   4: 1687483.906 ops/s
Iteration   5: 1688468.414 ops/s
Iteration   6: 1690757.451 ops/s
Iteration   7: 1693372.350 ops/s
Iteration   8: 1695760.925 ops/s
Iteration   9: 1700917.546 ops/s
Iteration  10: 1699561.490 ops/s
Iteration  11: 1696448.845 ops/s
Iteration  12: 1692287.394 ops/s
Iteration  13: 1692402.285 ops/s
Iteration  14: 1693453.850 ops/s
Iteration  15: 1692939.357 ops/s
Iteration  16: 1696327.191 ops/s
Iteration  17: 1693794.273 ops/s
Iteration  18: 1693208.767 ops/s
Iteration  19: 1694766.001 ops/s
Iteration  20: 1696029.133 ops/s
Iteration  21: 1696319.438 ops/s
Iteration  22: 1696189.854 ops/s
Iteration  23: 1704332.105 ops/s
Iteration  24: 1695971.963 ops/s
Iteration  25: 1699737.164 ops/s
Iteration  26: 1695031.672 ops/s
Iteration  27: 1693224.410 ops/s
Iteration  28: 1698491.861 ops/s
Iteration  29: 1698459.796 ops/s
Iteration  30: 1699417.685 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget":
  1695293.702 ±(99.9%) 2453.119 ops/s [Average]
  (min, avg, max) = (1687483.906, 1695293.702, 1704332.105), stdev = 3671.713
  CI (99.9%): [1692840.583, 1697746.820] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectDoubleWithTarget  thrpt   30  1695293.702 ± 2453.119  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 493911.646 ops/s
# Warmup Iteration   2: 1132261.401 ops/s
# Warmup Iteration   3: 1181160.315 ops/s
# Warmup Iteration   4: 1093923.398 ops/s
# Warmup Iteration   5: 1091184.328 ops/s
# Warmup Iteration   6: 1191320.074 ops/s
# Warmup Iteration   7: 1193250.140 ops/s
# Warmup Iteration   8: 1189417.983 ops/s
# Warmup Iteration   9: 1188397.040 ops/s
# Warmup Iteration  10: 1192078.114 ops/s
# Warmup Iteration  11: 1184352.857 ops/s
# Warmup Iteration  12: 1190883.685 ops/s
# Warmup Iteration  13: 1188941.529 ops/s
# Warmup Iteration  14: 1187776.611 ops/s
# Warmup Iteration  15: 1189991.296 ops/s
# Warmup Iteration  16: 1191728.353 ops/s
# Warmup Iteration  17: 1190800.650 ops/s
# Warmup Iteration  18: 1189466.960 ops/s
# Warmup Iteration  19: 1187533.381 ops/s
# Warmup Iteration  20: 1191711.940 ops/s
# Warmup Iteration  21: 1187241.870 ops/s
# Warmup Iteration  22: 1184688.502 ops/s
# Warmup Iteration  23: 1186836.310 ops/s
# Warmup Iteration  24: 1176875.561 ops/s
# Warmup Iteration  25: 1186155.527 ops/s
# Warmup Iteration  26: 1189957.341 ops/s
# Warmup Iteration  27: 1187081.402 ops/s
# Warmup Iteration  28: 1184798.682 ops/s
# Warmup Iteration  29: 1187441.931 ops/s
# Warmup Iteration  30: 1184782.478 ops/s
Iteration   1: 1186186.410 ops/s
Iteration   2: 1185074.021 ops/s
Iteration   3: 1185549.524 ops/s
Iteration   4: 1186262.735 ops/s
Iteration   5: 1190324.297 ops/s
Iteration   6: 1187474.641 ops/s
Iteration   7: 1185039.346 ops/s
Iteration   8: 1186746.724 ops/s
Iteration   9: 1186897.847 ops/s
Iteration  10: 1191333.568 ops/s
Iteration  11: 1193631.042 ops/s
Iteration  12: 1191049.503 ops/s
Iteration  13: 1180969.387 ops/s
Iteration  14: 1187352.403 ops/s
Iteration  15: 1189598.480 ops/s
Iteration  16: 1188641.328 ops/s
Iteration  17: 1189763.707 ops/s
Iteration  18: 1184893.029 ops/s
Iteration  19: 1189711.119 ops/s
Iteration  20: 1192520.388 ops/s
Iteration  21: 1186615.679 ops/s
Iteration  22: 1181622.114 ops/s
Iteration  23: 1180408.135 ops/s
Iteration  24: 1192180.494 ops/s
Iteration  25: 1193473.040 ops/s
Iteration  26: 1186571.467 ops/s
Iteration  27: 1190179.907 ops/s
Iteration  28: 1182653.242 ops/s
Iteration  29: 1180509.943 ops/s
Iteration  30: 1178740.145 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloat":
  1187065.789 ±(99.9%) 2712.098 ops/s [Average]
  (min, avg, max) = (1178740.145, 1187065.789, 1193631.042), stdev = 4059.341
  CI (99.9%): [1184353.690, 1189777.887] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloat  thrpt   30  1187065.789 ± 2712.098  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 869971.011 ops/s
# Warmup Iteration   2: 2180477.938 ops/s
# Warmup Iteration   3: 2232301.193 ops/s
# Warmup Iteration   4: 1853877.137 ops/s
# Warmup Iteration   5: 2242713.379 ops/s
# Warmup Iteration   6: 2229548.874 ops/s
# Warmup Iteration   7: 2241888.623 ops/s
# Warmup Iteration   8: 2253517.717 ops/s
# Warmup Iteration   9: 2247741.314 ops/s
# Warmup Iteration  10: 2251735.819 ops/s
# Warmup Iteration  11: 2252289.636 ops/s
# Warmup Iteration  12: 2243695.840 ops/s
# Warmup Iteration  13: 2247216.383 ops/s
# Warmup Iteration  14: 2251118.324 ops/s
# Warmup Iteration  15: 2250564.712 ops/s
# Warmup Iteration  16: 2247689.203 ops/s
# Warmup Iteration  17: 2250107.535 ops/s
# Warmup Iteration  18: 2253333.762 ops/s
# Warmup Iteration  19: 2242192.140 ops/s
# Warmup Iteration  20: 2249127.805 ops/s
# Warmup Iteration  21: 2250921.534 ops/s
# Warmup Iteration  22: 2249425.407 ops/s
# Warmup Iteration  23: 2237591.819 ops/s
# Warmup Iteration  24: 2249223.370 ops/s
# Warmup Iteration  25: 2251594.518 ops/s
# Warmup Iteration  26: 2241442.264 ops/s
# Warmup Iteration  27: 2242842.042 ops/s
# Warmup Iteration  28: 2249201.767 ops/s
# Warmup Iteration  29: 2238049.145 ops/s
# Warmup Iteration  30: 2244176.049 ops/s
Iteration   1: 2247933.478 ops/s
Iteration   2: 2254691.374 ops/s
Iteration   3: 2248539.993 ops/s
Iteration   4: 2244125.067 ops/s
Iteration   5: 2237035.794 ops/s
Iteration   6: 2251077.550 ops/s
Iteration   7: 2245319.845 ops/s
Iteration   8: 2257569.040 ops/s
Iteration   9: 2252790.506 ops/s
Iteration  10: 2247119.742 ops/s
Iteration  11: 2247486.303 ops/s
Iteration  12: 2244473.245 ops/s
Iteration  13: 2254485.345 ops/s
Iteration  14: 2257349.551 ops/s
Iteration  15: 2243867.253 ops/s
Iteration  16: 2247533.851 ops/s
Iteration  17: 2254007.244 ops/s
Iteration  18: 2241378.230 ops/s
Iteration  19: 2251569.538 ops/s
Iteration  20: 2257249.816 ops/s
Iteration  21: 2249773.842 ops/s
Iteration  22: 2257699.647 ops/s
Iteration  23: 2240018.239 ops/s
Iteration  24: 2256840.937 ops/s
Iteration  25: 2241238.468 ops/s
Iteration  26: 2247467.961 ops/s
Iteration  27: 2258439.421 ops/s
Iteration  28: 2251454.292 ops/s
Iteration  29: 2255420.985 ops/s
Iteration  30: 2263411.554 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget":
  2250245.604 ±(99.9%) 4292.867 ops/s [Average]
  (min, avg, max) = (2237035.794, 2250245.604, 2263411.554), stdev = 6425.361
  CI (99.9%): [2245952.737, 2254538.470] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithBagTarget  thrpt   30  2250245.604 ± 4292.867  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 759163.081 ops/s
# Warmup Iteration   2: 1743491.749 ops/s
# Warmup Iteration   3: 1842179.143 ops/s
# Warmup Iteration   4: 1697257.677 ops/s
# Warmup Iteration   5: 1694246.074 ops/s
# Warmup Iteration   6: 1849285.352 ops/s
# Warmup Iteration   7: 1849360.765 ops/s
# Warmup Iteration   8: 1848836.003 ops/s
# Warmup Iteration   9: 1849914.573 ops/s
# Warmup Iteration  10: 1846638.903 ops/s
# Warmup Iteration  11: 1846387.010 ops/s
# Warmup Iteration  12: 1840528.140 ops/s
# Warmup Iteration  13: 1849685.378 ops/s
# Warmup Iteration  14: 1841245.595 ops/s
# Warmup Iteration  15: 1849110.724 ops/s
# Warmup Iteration  16: 1846068.376 ops/s
# Warmup Iteration  17: 1844093.558 ops/s
# Warmup Iteration  18: 1847013.070 ops/s
# Warmup Iteration  19: 1849819.548 ops/s
# Warmup Iteration  20: 1850973.359 ops/s
# Warmup Iteration  21: 1844971.474 ops/s
# Warmup Iteration  22: 1848345.388 ops/s
# Warmup Iteration  23: 1851889.009 ops/s
# Warmup Iteration  24: 1848738.440 ops/s
# Warmup Iteration  25: 1850401.526 ops/s
# Warmup Iteration  26: 1847531.088 ops/s
# Warmup Iteration  27: 1849005.873 ops/s
# Warmup Iteration  28: 1852638.782 ops/s
# Warmup Iteration  29: 1848898.948 ops/s
# Warmup Iteration  30: 1850898.246 ops/s
Iteration   1: 1849212.523 ops/s
Iteration   2: 1847909.301 ops/s
Iteration   3: 1846304.125 ops/s
Iteration   4: 1854968.201 ops/s
Iteration   5: 1847227.874 ops/s
Iteration   6: 1854546.159 ops/s
Iteration   7: 1857736.769 ops/s
Iteration   8: 1841236.538 ops/s
Iteration   9: 1845763.422 ops/s
Iteration  10: 1840193.298 ops/s
Iteration  11: 1851129.196 ops/s
Iteration  12: 1851828.823 ops/s
Iteration  13: 1855021.741 ops/s
Iteration  14: 1856392.974 ops/s
Iteration  15: 1837509.216 ops/s
Iteration  16: 1846570.415 ops/s
Iteration  17: 1852490.016 ops/s
Iteration  18: 1855323.373 ops/s
Iteration  19: 1844444.731 ops/s
Iteration  20: 1851088.655 ops/s
Iteration  21: 1841184.856 ops/s
Iteration  22: 1845165.119 ops/s
Iteration  23: 1848075.046 ops/s
Iteration  24: 1842537.972 ops/s
Iteration  25: 1856959.464 ops/s
Iteration  26: 1843624.890 ops/s
Iteration  27: 1855082.762 ops/s
Iteration  28: 1844011.132 ops/s
Iteration  29: 1836050.721 ops/s
Iteration  30: 1849198.775 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget":
  1848292.936 ±(99.9%) 4013.638 ops/s [Average]
  (min, avg, max) = (1836050.721, 1848292.936, 1857736.769), stdev = 6007.425
  CI (99.9%): [1844279.298, 1852306.574] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectFloatWithTarget  thrpt   30  1848292.936 ± 4013.638  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIf$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIf

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 410644.857 ops/s
# Warmup Iteration   2: 886009.114 ops/s
# Warmup Iteration   3: 925248.490 ops/s
# Warmup Iteration   4: 932693.175 ops/s
# Warmup Iteration   5: 780057.740 ops/s
# Warmup Iteration   6: 927489.286 ops/s
# Warmup Iteration   7: 933924.139 ops/s
# Warmup Iteration   8: 930459.895 ops/s
# Warmup Iteration   9: 925426.529 ops/s
# Warmup Iteration  10: 931941.770 ops/s
# Warmup Iteration  11: 929751.247 ops/s
# Warmup Iteration  12: 930310.759 ops/s
# Warmup Iteration  13: 931668.255 ops/s
# Warmup Iteration  14: 926240.148 ops/s
# Warmup Iteration  15: 929489.201 ops/s
# Warmup Iteration  16: 925624.546 ops/s
# Warmup Iteration  17: 930437.803 ops/s
# Warmup Iteration  18: 928250.150 ops/s
# Warmup Iteration  19: 928931.473 ops/s
# Warmup Iteration  20: 932610.945 ops/s
# Warmup Iteration  21: 932450.031 ops/s
# Warmup Iteration  22: 926007.401 ops/s
# Warmup Iteration  23: 935567.971 ops/s
# Warmup Iteration  24: 935284.884 ops/s
# Warmup Iteration  25: 929355.269 ops/s
# Warmup Iteration  26: 931134.755 ops/s
# Warmup Iteration  27: 930496.734 ops/s
# Warmup Iteration  28: 920402.666 ops/s
# Warmup Iteration  29: 933759.063 ops/s
# Warmup Iteration  30: 934968.160 ops/s
Iteration   1: 928595.633 ops/s
Iteration   2: 927849.399 ops/s
Iteration   3: 932302.734 ops/s
Iteration   4: 930097.260 ops/s
Iteration   5: 923178.852 ops/s
Iteration   6: 919206.770 ops/s
Iteration   7: 935295.327 ops/s
Iteration   8: 918978.340 ops/s
Iteration   9: 939597.448 ops/s
Iteration  10: 931064.518 ops/s
Iteration  11: 927385.209 ops/s
Iteration  12: 930839.205 ops/s
Iteration  13: 926169.311 ops/s
Iteration  14: 919764.907 ops/s
Iteration  15: 934093.477 ops/s
Iteration  16: 926774.449 ops/s
Iteration  17: 914792.504 ops/s
Iteration  18: 921803.227 ops/s
Iteration  19: 927550.174 ops/s
Iteration  20: 919342.787 ops/s
Iteration  21: 922645.081 ops/s
Iteration  22: 928953.134 ops/s
Iteration  23: 929330.279 ops/s
Iteration  24: 922064.436 ops/s
Iteration  25: 928213.533 ops/s
Iteration  26: 925144.923 ops/s
Iteration  27: 931815.136 ops/s
Iteration  28: 919665.763 ops/s
Iteration  29: 927096.525 ops/s
Iteration  30: 925726.995 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIf":
  926511.245 ±(99.9%) 3736.147 ops/s [Average]
  (min, avg, max) = (914792.504, 926511.245, 939597.448), stdev = 5592.089
  CI (99.9%): [922775.098, 930247.392] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIf  thrpt   30  926511.245 ± 3736.147  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 550834.297 ops/s
# Warmup Iteration   2: 1344048.263 ops/s
# Warmup Iteration   3: 1396997.603 ops/s
# Warmup Iteration   4: 1159225.961 ops/s
# Warmup Iteration   5: 1403344.544 ops/s
# Warmup Iteration   6: 1397167.492 ops/s
# Warmup Iteration   7: 1400588.894 ops/s
# Warmup Iteration   8: 1402092.101 ops/s
# Warmup Iteration   9: 1397068.370 ops/s
# Warmup Iteration  10: 1392328.939 ops/s
# Warmup Iteration  11: 1397982.065 ops/s
# Warmup Iteration  12: 1401209.911 ops/s
# Warmup Iteration  13: 1398085.365 ops/s
# Warmup Iteration  14: 1391847.569 ops/s
# Warmup Iteration  15: 1399763.093 ops/s
# Warmup Iteration  16: 1398571.895 ops/s
# Warmup Iteration  17: 1401065.629 ops/s
# Warmup Iteration  18: 1403124.137 ops/s
# Warmup Iteration  19: 1403381.814 ops/s
# Warmup Iteration  20: 1401356.255 ops/s
# Warmup Iteration  21: 1397061.490 ops/s
# Warmup Iteration  22: 1397171.320 ops/s
# Warmup Iteration  23: 1399581.338 ops/s
# Warmup Iteration  24: 1401376.882 ops/s
# Warmup Iteration  25: 1404292.497 ops/s
# Warmup Iteration  26: 1404341.925 ops/s
# Warmup Iteration  27: 1398925.495 ops/s
# Warmup Iteration  28: 1398142.120 ops/s
# Warmup Iteration  29: 1404481.892 ops/s
# Warmup Iteration  30: 1408849.239 ops/s
Iteration   1: 1395767.671 ops/s
Iteration   2: 1391092.652 ops/s
Iteration   3: 1394845.039 ops/s
Iteration   4: 1390781.346 ops/s
Iteration   5: 1394145.136 ops/s
Iteration   6: 1397643.354 ops/s
Iteration   7: 1392423.751 ops/s
Iteration   8: 1391649.965 ops/s
Iteration   9: 1404545.772 ops/s
Iteration  10: 1397723.515 ops/s
Iteration  11: 1398819.029 ops/s
Iteration  12: 1393307.772 ops/s
Iteration  13: 1393227.494 ops/s
Iteration  14: 1390471.009 ops/s
Iteration  15: 1382146.566 ops/s
Iteration  16: 1402484.829 ops/s
Iteration  17: 1401380.463 ops/s
Iteration  18: 1402750.154 ops/s
Iteration  19: 1406464.167 ops/s
Iteration  20: 1390828.530 ops/s
Iteration  21: 1397579.814 ops/s
Iteration  22: 1390322.598 ops/s
Iteration  23: 1399448.610 ops/s
Iteration  24: 1396921.736 ops/s
Iteration  25: 1399986.685 ops/s
Iteration  26: 1403020.628 ops/s
Iteration  27: 1398150.654 ops/s
Iteration  28: 1395972.850 ops/s
Iteration  29: 1401588.102 ops/s
Iteration  30: 1394458.562 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectInt":
  1396331.615 ±(99.9%) 3536.021 ops/s [Average]
  (min, avg, max) = (1382146.566, 1396331.615, 1406464.167), stdev = 5292.550
  CI (99.9%): [1392795.594, 1399867.636] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectInt  thrpt   30  1396331.615 ± 3536.021  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 908747.780 ops/s
# Warmup Iteration   2: 2212263.405 ops/s
# Warmup Iteration   3: 2279782.096 ops/s
# Warmup Iteration   4: 1906021.587 ops/s
# Warmup Iteration   5: 2281107.494 ops/s
# Warmup Iteration   6: 2286080.563 ops/s
# Warmup Iteration   7: 2291106.310 ops/s
# Warmup Iteration   8: 2288608.639 ops/s
# Warmup Iteration   9: 2276730.604 ops/s
# Warmup Iteration  10: 2300306.203 ops/s
# Warmup Iteration  11: 2290400.385 ops/s
# Warmup Iteration  12: 2298197.502 ops/s
# Warmup Iteration  13: 2292278.133 ops/s
# Warmup Iteration  14: 2290251.219 ops/s
# Warmup Iteration  15: 2286106.758 ops/s
# Warmup Iteration  16: 2287576.631 ops/s
# Warmup Iteration  17: 2286625.093 ops/s
# Warmup Iteration  18: 2290992.237 ops/s
# Warmup Iteration  19: 2274889.307 ops/s
# Warmup Iteration  20: 2287137.747 ops/s
# Warmup Iteration  21: 2275516.835 ops/s
# Warmup Iteration  22: 2288006.257 ops/s
# Warmup Iteration  23: 2282942.829 ops/s
# Warmup Iteration  24: 2281709.399 ops/s
# Warmup Iteration  25: 2279465.808 ops/s
# Warmup Iteration  26: 2270814.271 ops/s
# Warmup Iteration  27: 2280827.867 ops/s
# Warmup Iteration  28: 2276092.918 ops/s
# Warmup Iteration  29: 2281824.367 ops/s
# Warmup Iteration  30: 2275729.728 ops/s
Iteration   1: 2275890.784 ops/s
Iteration   2: 2284643.253 ops/s
Iteration   3: 2286973.070 ops/s
Iteration   4: 2277891.991 ops/s
Iteration   5: 2278829.629 ops/s
Iteration   6: 2283029.956 ops/s
Iteration   7: 2286786.728 ops/s
Iteration   8: 2275664.027 ops/s
Iteration   9: 2271251.144 ops/s
Iteration  10: 2291612.057 ops/s
Iteration  11: 2276085.535 ops/s
Iteration  12: 2274722.894 ops/s
Iteration  13: 2285172.065 ops/s
Iteration  14: 2272679.806 ops/s
Iteration  15: 2280698.039 ops/s
Iteration  16: 2297161.055 ops/s
Iteration  17: 2289480.471 ops/s
Iteration  18: 2261770.120 ops/s
Iteration  19: 2278769.247 ops/s
Iteration  20: 2286735.373 ops/s
Iteration  21: 2266028.390 ops/s
Iteration  22: 2277222.536 ops/s
Iteration  23: 2280888.886 ops/s
Iteration  24: 2292343.910 ops/s
Iteration  25: 2268418.716 ops/s
Iteration  26: 2287177.574 ops/s
Iteration  27: 2285806.463 ops/s
Iteration  28: 2302472.075 ops/s
Iteration  29: 2292887.238 ops/s
Iteration  30: 2277649.876 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget":
  2281558.097 ±(99.9%) 6134.781 ops/s [Average]
  (min, avg, max) = (2261770.120, 2281558.097, 2302472.075), stdev = 9182.252
  CI (99.9%): [2275423.316, 2287692.878] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithBagTarget  thrpt   30  2281558.097 ± 6134.781  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 802516.423 ops/s
# Warmup Iteration   2: 1904261.390 ops/s
# Warmup Iteration   3: 1988919.144 ops/s
# Warmup Iteration   4: 1703384.330 ops/s
# Warmup Iteration   5: 1930033.689 ops/s
# Warmup Iteration   6: 1983176.323 ops/s
# Warmup Iteration   7: 1984273.726 ops/s
# Warmup Iteration   8: 1990248.648 ops/s
# Warmup Iteration   9: 1992205.478 ops/s
# Warmup Iteration  10: 1985236.388 ops/s
# Warmup Iteration  11: 1981870.497 ops/s
# Warmup Iteration  12: 1995619.927 ops/s
# Warmup Iteration  13: 1988091.781 ops/s
# Warmup Iteration  14: 1988581.256 ops/s
# Warmup Iteration  15: 1990961.945 ops/s
# Warmup Iteration  16: 1989386.335 ops/s
# Warmup Iteration  17: 1987639.902 ops/s
# Warmup Iteration  18: 1990714.422 ops/s
# Warmup Iteration  19: 1988097.629 ops/s
# Warmup Iteration  20: 1997742.641 ops/s
# Warmup Iteration  21: 1988664.735 ops/s
# Warmup Iteration  22: 1991672.713 ops/s
# Warmup Iteration  23: 1990150.410 ops/s
# Warmup Iteration  24: 1984046.246 ops/s
# Warmup Iteration  25: 1992938.347 ops/s
# Warmup Iteration  26: 1991553.472 ops/s
# Warmup Iteration  27: 1989812.177 ops/s
# Warmup Iteration  28: 1989635.921 ops/s
# Warmup Iteration  29: 1988593.935 ops/s
# Warmup Iteration  30: 1987325.173 ops/s
Iteration   1: 1981669.830 ops/s
Iteration   2: 1983714.702 ops/s
Iteration   3: 1993582.947 ops/s
Iteration   4: 1995451.502 ops/s
Iteration   5: 1999113.460 ops/s
Iteration   6: 1997022.841 ops/s
Iteration   7: 1989563.810 ops/s
Iteration   8: 1987605.734 ops/s
Iteration   9: 1990909.738 ops/s
Iteration  10: 1982424.006 ops/s
Iteration  11: 1996709.767 ops/s
Iteration  12: 1985107.492 ops/s
Iteration  13: 1991345.693 ops/s
Iteration  14: 1989488.382 ops/s
Iteration  15: 1987112.341 ops/s
Iteration  16: 1989927.305 ops/s
Iteration  17: 1991156.376 ops/s
Iteration  18: 1993584.154 ops/s
Iteration  19: 1985306.855 ops/s
Iteration  20: 1987199.500 ops/s
Iteration  21: 1983331.628 ops/s
Iteration  22: 1988942.393 ops/s
Iteration  23: 1993953.983 ops/s
Iteration  24: 1987791.639 ops/s
Iteration  25: 1989254.000 ops/s
Iteration  26: 1981176.206 ops/s
Iteration  27: 1988056.508 ops/s
Iteration  28: 1988968.177 ops/s
Iteration  29: 1984616.111 ops/s
Iteration  30: 1987927.133 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget":
  1989067.140 ±(99.9%) 3108.900 ops/s [Average]
  (min, avg, max) = (1981176.206, 1989067.140, 1999113.460), stdev = 4653.256
  CI (99.9%): [1985958.240, 1992176.041] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectIntWithTarget  thrpt   30  1989067.140 ± 3108.900  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 471850.858 ops/s
# Warmup Iteration   2: 1245088.044 ops/s
# Warmup Iteration   3: 1251302.919 ops/s
# Warmup Iteration   4: 1050975.133 ops/s
# Warmup Iteration   5: 1256101.098 ops/s
# Warmup Iteration   6: 1261758.947 ops/s
# Warmup Iteration   7: 1264603.593 ops/s
# Warmup Iteration   8: 1262052.660 ops/s
# Warmup Iteration   9: 1254126.291 ops/s
# Warmup Iteration  10: 1258888.480 ops/s
# Warmup Iteration  11: 1266199.921 ops/s
# Warmup Iteration  12: 1259265.493 ops/s
# Warmup Iteration  13: 1258122.384 ops/s
# Warmup Iteration  14: 1259312.542 ops/s
# Warmup Iteration  15: 1258071.746 ops/s
# Warmup Iteration  16: 1254987.559 ops/s
# Warmup Iteration  17: 1262815.221 ops/s
# Warmup Iteration  18: 1262013.300 ops/s
# Warmup Iteration  19: 1257142.986 ops/s
# Warmup Iteration  20: 1260335.138 ops/s
# Warmup Iteration  21: 1263631.656 ops/s
# Warmup Iteration  22: 1260867.442 ops/s
# Warmup Iteration  23: 1262730.912 ops/s
# Warmup Iteration  24: 1262143.257 ops/s
# Warmup Iteration  25: 1258994.626 ops/s
# Warmup Iteration  26: 1258138.758 ops/s
# Warmup Iteration  27: 1259176.791 ops/s
# Warmup Iteration  28: 1260123.010 ops/s
# Warmup Iteration  29: 1257773.061 ops/s
# Warmup Iteration  30: 1260487.621 ops/s
Iteration   1: 1259316.086 ops/s
Iteration   2: 1256775.384 ops/s
Iteration   3: 1265112.116 ops/s
Iteration   4: 1258558.828 ops/s
Iteration   5: 1249506.635 ops/s
Iteration   6: 1266659.679 ops/s
Iteration   7: 1261068.532 ops/s
Iteration   8: 1256035.986 ops/s
Iteration   9: 1251255.041 ops/s
Iteration  10: 1257695.393 ops/s
Iteration  11: 1251412.127 ops/s
Iteration  12: 1256235.326 ops/s
Iteration  13: 1254781.378 ops/s
Iteration  14: 1261237.522 ops/s
Iteration  15: 1260089.921 ops/s
Iteration  16: 1256976.125 ops/s
Iteration  17: 1260208.593 ops/s
Iteration  18: 1247846.897 ops/s
Iteration  19: 1257316.641 ops/s
Iteration  20: 1264511.165 ops/s
Iteration  21: 1261583.487 ops/s
Iteration  22: 1255777.327 ops/s
Iteration  23: 1260639.025 ops/s
Iteration  24: 1255929.768 ops/s
Iteration  25: 1250864.763 ops/s
Iteration  26: 1265391.043 ops/s
Iteration  27: 1261413.581 ops/s
Iteration  28: 1261267.280 ops/s
Iteration  29: 1255928.904 ops/s
Iteration  30: 1258479.046 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLong":
  1257995.787 ±(99.9%) 3151.185 ops/s [Average]
  (min, avg, max) = (1247846.897, 1257995.787, 1266659.679), stdev = 4716.545
  CI (99.9%): [1254844.602, 1261146.971] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLong  thrpt   30  1257995.787 ± 3151.185  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 818165.762 ops/s
# Warmup Iteration   2: 2169671.143 ops/s
# Warmup Iteration   3: 2180784.905 ops/s
# Warmup Iteration   4: 1820578.976 ops/s
# Warmup Iteration   5: 2189884.133 ops/s
# Warmup Iteration   6: 2187880.238 ops/s
# Warmup Iteration   7: 2185651.734 ops/s
# Warmup Iteration   8: 2185121.590 ops/s
# Warmup Iteration   9: 2187997.420 ops/s
# Warmup Iteration  10: 2197170.175 ops/s
# Warmup Iteration  11: 2194460.847 ops/s
# Warmup Iteration  12: 2189066.245 ops/s
# Warmup Iteration  13: 2204702.009 ops/s
# Warmup Iteration  14: 2183674.795 ops/s
# Warmup Iteration  15: 2201540.760 ops/s
# Warmup Iteration  16: 2192961.606 ops/s
# Warmup Iteration  17: 2180398.133 ops/s
# Warmup Iteration  18: 2185051.913 ops/s
# Warmup Iteration  19: 2184721.780 ops/s
# Warmup Iteration  20: 2197712.587 ops/s
# Warmup Iteration  21: 2180208.523 ops/s
# Warmup Iteration  22: 2196549.367 ops/s
# Warmup Iteration  23: 2183810.475 ops/s
# Warmup Iteration  24: 2179329.886 ops/s
# Warmup Iteration  25: 2189303.783 ops/s
# Warmup Iteration  26: 2191224.263 ops/s
# Warmup Iteration  27: 2194778.101 ops/s
# Warmup Iteration  28: 2191056.896 ops/s
# Warmup Iteration  29: 2185168.847 ops/s
# Warmup Iteration  30: 2191773.921 ops/s
Iteration   1: 2183865.319 ops/s
Iteration   2: 2192613.459 ops/s
Iteration   3: 2191679.806 ops/s
Iteration   4: 2197636.997 ops/s
Iteration   5: 2199444.764 ops/s
Iteration   6: 2196490.619 ops/s
Iteration   7: 2202929.433 ops/s
Iteration   8: 2182887.170 ops/s
Iteration   9: 2184026.834 ops/s
Iteration  10: 2186021.699 ops/s
Iteration  11: 2190561.273 ops/s
Iteration  12: 2194952.396 ops/s
Iteration  13: 2197966.892 ops/s
Iteration  14: 2183344.102 ops/s
Iteration  15: 2186917.367 ops/s
Iteration  16: 2185957.757 ops/s
Iteration  17: 2192685.666 ops/s
Iteration  18: 2198012.840 ops/s
Iteration  19: 2166833.924 ops/s
Iteration  20: 2192842.826 ops/s
Iteration  21: 2184927.877 ops/s
Iteration  22: 2189940.819 ops/s
Iteration  23: 2180163.863 ops/s
Iteration  24: 2184767.330 ops/s
Iteration  25: 2191080.609 ops/s
Iteration  26: 2181434.212 ops/s
Iteration  27: 2189613.392 ops/s
Iteration  28: 2191981.206 ops/s
Iteration  29: 2191744.303 ops/s
Iteration  30: 2190713.762 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget":
  2189467.950 ±(99.9%) 4812.025 ops/s [Average]
  (min, avg, max) = (2166833.924, 2189467.950, 2202929.433), stdev = 7202.414
  CI (99.9%): [2184655.925, 2194279.976] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithBagTarget  thrpt   30  2189467.950 ± 4812.025  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 704250.832 ops/s
# Warmup Iteration   2: 1859176.962 ops/s
# Warmup Iteration   3: 1884636.981 ops/s
# Warmup Iteration   4: 1562116.542 ops/s
# Warmup Iteration   5: 1891236.085 ops/s
# Warmup Iteration   6: 1889058.507 ops/s
# Warmup Iteration   7: 1897494.547 ops/s
# Warmup Iteration   8: 1890848.527 ops/s
# Warmup Iteration   9: 1884742.614 ops/s
# Warmup Iteration  10: 1893832.156 ops/s
# Warmup Iteration  11: 1895993.297 ops/s
# Warmup Iteration  12: 1898955.393 ops/s
# Warmup Iteration  13: 1896978.455 ops/s
# Warmup Iteration  14: 1899910.684 ops/s
# Warmup Iteration  15: 1894335.312 ops/s
# Warmup Iteration  16: 1896245.643 ops/s
# Warmup Iteration  17: 1891997.073 ops/s
# Warmup Iteration  18: 1893834.260 ops/s
# Warmup Iteration  19: 1881651.281 ops/s
# Warmup Iteration  20: 1890586.245 ops/s
# Warmup Iteration  21: 1894021.668 ops/s
# Warmup Iteration  22: 1886928.721 ops/s
# Warmup Iteration  23: 1886283.363 ops/s
# Warmup Iteration  24: 1894505.420 ops/s
# Warmup Iteration  25: 1897482.300 ops/s
# Warmup Iteration  26: 1883687.352 ops/s
# Warmup Iteration  27: 1893745.542 ops/s
# Warmup Iteration  28: 1892001.545 ops/s
# Warmup Iteration  29: 1889442.913 ops/s
# Warmup Iteration  30: 1886966.448 ops/s
Iteration   1: 1892054.915 ops/s
Iteration   2: 1887930.926 ops/s
Iteration   3: 1878273.365 ops/s
Iteration   4: 1890484.397 ops/s
Iteration   5: 1884206.122 ops/s
Iteration   6: 1881886.312 ops/s
Iteration   7: 1891210.432 ops/s
Iteration   8: 1896709.782 ops/s
Iteration   9: 1887284.333 ops/s
Iteration  10: 1882469.879 ops/s
Iteration  11: 1880854.956 ops/s
Iteration  12: 1877223.347 ops/s
Iteration  13: 1891172.586 ops/s
Iteration  14: 1881619.843 ops/s
Iteration  15: 1885912.893 ops/s
Iteration  16: 1886925.848 ops/s
Iteration  17: 1883153.843 ops/s
Iteration  18: 1876931.304 ops/s
Iteration  19: 1875171.781 ops/s
Iteration  20: 1881214.242 ops/s
Iteration  21: 1885073.263 ops/s
Iteration  22: 1887176.214 ops/s
Iteration  23: 1885647.901 ops/s
Iteration  24: 1875243.347 ops/s
Iteration  25: 1872599.655 ops/s
Iteration  26: 1870485.691 ops/s
Iteration  27: 1878941.487 ops/s
Iteration  28: 1879487.592 ops/s
Iteration  29: 1887726.334 ops/s
Iteration  30: 1887397.020 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget":
  1883415.654 ±(99.9%) 4137.614 ops/s [Average]
  (min, avg, max) = (1870485.691, 1883415.654, 1896709.782), stdev = 6192.986
  CI (99.9%): [1879278.040, 1887553.268] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectLongWithTarget  thrpt   30  1883415.654 ± 4137.614  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 550689.954 ops/s
# Warmup Iteration   2: 1379640.922 ops/s
# Warmup Iteration   3: 1442328.180 ops/s
# Warmup Iteration   4: 1195278.483 ops/s
# Warmup Iteration   5: 1437662.551 ops/s
# Warmup Iteration   6: 1445199.177 ops/s
# Warmup Iteration   7: 1438535.217 ops/s
# Warmup Iteration   8: 1448719.164 ops/s
# Warmup Iteration   9: 1442090.869 ops/s
# Warmup Iteration  10: 1449094.942 ops/s
# Warmup Iteration  11: 1446377.873 ops/s
# Warmup Iteration  12: 1447092.986 ops/s
# Warmup Iteration  13: 1449581.296 ops/s
# Warmup Iteration  14: 1434376.720 ops/s
# Warmup Iteration  15: 1447378.161 ops/s
# Warmup Iteration  16: 1441369.344 ops/s
# Warmup Iteration  17: 1439503.158 ops/s
# Warmup Iteration  18: 1440565.396 ops/s
# Warmup Iteration  19: 1441009.549 ops/s
# Warmup Iteration  20: 1440940.859 ops/s
# Warmup Iteration  21: 1447495.097 ops/s
# Warmup Iteration  22: 1446939.790 ops/s
# Warmup Iteration  23: 1443865.138 ops/s
# Warmup Iteration  24: 1448103.354 ops/s
# Warmup Iteration  25: 1446440.513 ops/s
# Warmup Iteration  26: 1445850.709 ops/s
# Warmup Iteration  27: 1444574.031 ops/s
# Warmup Iteration  28: 1444632.246 ops/s
# Warmup Iteration  29: 1444154.824 ops/s
# Warmup Iteration  30: 1450775.711 ops/s
Iteration   1: 1449563.919 ops/s
Iteration   2: 1447645.470 ops/s
Iteration   3: 1444146.408 ops/s
Iteration   4: 1450455.298 ops/s
Iteration   5: 1453639.666 ops/s
Iteration   6: 1452066.327 ops/s
Iteration   7: 1447432.931 ops/s
Iteration   8: 1446065.268 ops/s
Iteration   9: 1447025.778 ops/s
Iteration  10: 1451634.490 ops/s
Iteration  11: 1453974.990 ops/s
Iteration  12: 1448813.155 ops/s
Iteration  13: 1451893.166 ops/s
Iteration  14: 1436803.868 ops/s
Iteration  15: 1441644.025 ops/s
Iteration  16: 1451273.683 ops/s
Iteration  17: 1445623.981 ops/s
Iteration  18: 1452226.037 ops/s
Iteration  19: 1442841.305 ops/s
Iteration  20: 1443342.437 ops/s
Iteration  21: 1443708.821 ops/s
Iteration  22: 1450128.900 ops/s
Iteration  23: 1447427.942 ops/s
Iteration  24: 1450792.701 ops/s
Iteration  25: 1447291.709 ops/s
Iteration  26: 1449294.630 ops/s
Iteration  27: 1446617.596 ops/s
Iteration  28: 1435899.416 ops/s
Iteration  29: 1439369.569 ops/s
Iteration  30: 1446975.613 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShort":
  1447187.303 ±(99.9%) 3106.884 ops/s [Average]
  (min, avg, max) = (1435899.416, 1447187.303, 1453974.990), stdev = 4650.238
  CI (99.9%): [1444080.419, 1450294.187] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShort  thrpt   30  1447187.303 ± 3106.884  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 946835.143 ops/s
# Warmup Iteration   2: 2419430.275 ops/s
# Warmup Iteration   3: 2478577.623 ops/s
# Warmup Iteration   4: 2068767.306 ops/s
# Warmup Iteration   5: 2485555.230 ops/s
# Warmup Iteration   6: 2478335.429 ops/s
# Warmup Iteration   7: 2485875.029 ops/s
# Warmup Iteration   8: 2492978.706 ops/s
# Warmup Iteration   9: 2487831.669 ops/s
# Warmup Iteration  10: 2483956.443 ops/s
# Warmup Iteration  11: 2486054.674 ops/s
# Warmup Iteration  12: 2473633.493 ops/s
# Warmup Iteration  13: 2469573.685 ops/s
# Warmup Iteration  14: 2476523.261 ops/s
# Warmup Iteration  15: 2469821.830 ops/s
# Warmup Iteration  16: 2462976.660 ops/s
# Warmup Iteration  17: 2471471.770 ops/s
# Warmup Iteration  18: 2481237.626 ops/s
# Warmup Iteration  19: 2467656.270 ops/s
# Warmup Iteration  20: 2477143.941 ops/s
# Warmup Iteration  21: 2486675.130 ops/s
# Warmup Iteration  22: 2464149.288 ops/s
# Warmup Iteration  23: 2475338.707 ops/s
# Warmup Iteration  24: 2480532.571 ops/s
# Warmup Iteration  25: 2477285.525 ops/s
# Warmup Iteration  26: 2474820.341 ops/s
# Warmup Iteration  27: 2479827.262 ops/s
# Warmup Iteration  28: 2477952.335 ops/s
# Warmup Iteration  29: 2469820.124 ops/s
# Warmup Iteration  30: 2485568.105 ops/s
Iteration   1: 2491196.715 ops/s
Iteration   2: 2489290.235 ops/s
Iteration   3: 2481552.934 ops/s
Iteration   4: 2476736.892 ops/s
Iteration   5: 2488068.124 ops/s
Iteration   6: 2485813.564 ops/s
Iteration   7: 2487105.780 ops/s
Iteration   8: 2483019.629 ops/s
Iteration   9: 2488431.503 ops/s
Iteration  10: 2485573.682 ops/s
Iteration  11: 2482315.661 ops/s
Iteration  12: 2480990.746 ops/s
Iteration  13: 2480958.400 ops/s
Iteration  14: 2473161.867 ops/s
Iteration  15: 2480041.985 ops/s
Iteration  16: 2471976.895 ops/s
Iteration  17: 2479688.598 ops/s
Iteration  18: 2482700.326 ops/s
Iteration  19: 2481105.692 ops/s
Iteration  20: 2471784.012 ops/s
Iteration  21: 2479425.878 ops/s
Iteration  22: 2478976.894 ops/s
Iteration  23: 2469045.719 ops/s
Iteration  24: 2463701.611 ops/s
Iteration  25: 2470916.938 ops/s
Iteration  26: 2471907.106 ops/s
Iteration  27: 2479530.928 ops/s
Iteration  28: 2472192.527 ops/s
Iteration  29: 2480426.261 ops/s
Iteration  30: 2485471.576 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget":
  2479770.289 ±(99.9%) 4481.188 ops/s [Average]
  (min, avg, max) = (2463701.611, 2479770.289, 2491196.715), stdev = 6707.232
  CI (99.9%): [2475289.101, 2484251.477] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithBagTarget  thrpt   30  2479770.289 ± 4481.188  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 832793.707 ops/s
# Warmup Iteration   2: 2036836.043 ops/s
# Warmup Iteration   3: 2143263.508 ops/s
# Warmup Iteration   4: 1770742.852 ops/s
# Warmup Iteration   5: 2141299.843 ops/s
# Warmup Iteration   6: 2141935.093 ops/s
# Warmup Iteration   7: 2139977.692 ops/s
# Warmup Iteration   8: 2142959.242 ops/s
# Warmup Iteration   9: 2152367.310 ops/s
# Warmup Iteration  10: 2125484.593 ops/s
# Warmup Iteration  11: 2138356.191 ops/s
# Warmup Iteration  12: 2146103.528 ops/s
# Warmup Iteration  13: 2147895.071 ops/s
# Warmup Iteration  14: 2130704.222 ops/s
# Warmup Iteration  15: 2146755.962 ops/s
# Warmup Iteration  16: 2139471.344 ops/s
# Warmup Iteration  17: 2141581.893 ops/s
# Warmup Iteration  18: 2139942.712 ops/s
# Warmup Iteration  19: 2153110.839 ops/s
# Warmup Iteration  20: 2149175.247 ops/s
# Warmup Iteration  21: 2150345.436 ops/s
# Warmup Iteration  22: 2155241.336 ops/s
# Warmup Iteration  23: 2148276.167 ops/s
# Warmup Iteration  24: 2145467.831 ops/s
# Warmup Iteration  25: 2151490.364 ops/s
# Warmup Iteration  26: 2150490.699 ops/s
# Warmup Iteration  27: 2138767.765 ops/s
# Warmup Iteration  28: 2148640.295 ops/s
# Warmup Iteration  29: 2150882.641 ops/s
# Warmup Iteration  30: 2145229.730 ops/s
Iteration   1: 2144661.804 ops/s
Iteration   2: 2146763.094 ops/s
Iteration   3: 2141566.200 ops/s
Iteration   4: 2132476.222 ops/s
Iteration   5: 2151692.301 ops/s
Iteration   6: 2153818.817 ops/s
Iteration   7: 2150697.205 ops/s
Iteration   8: 2138001.168 ops/s
Iteration   9: 2150841.474 ops/s
Iteration  10: 2148223.312 ops/s
Iteration  11: 2148604.594 ops/s
Iteration  12: 2147627.436 ops/s
Iteration  13: 2146438.787 ops/s
Iteration  14: 2150263.301 ops/s
Iteration  15: 2137979.646 ops/s
Iteration  16: 2155414.455 ops/s
Iteration  17: 2150012.788 ops/s
Iteration  18: 2149825.886 ops/s
Iteration  19: 2150923.597 ops/s
Iteration  20: 2144545.445 ops/s
Iteration  21: 2141579.852 ops/s
Iteration  22: 2146911.044 ops/s
Iteration  23: 2153600.338 ops/s
Iteration  24: 2152521.601 ops/s
Iteration  25: 2150469.398 ops/s
Iteration  26: 2149076.934 ops/s
Iteration  27: 2148634.923 ops/s
Iteration  28: 2140644.100 ops/s
Iteration  29: 2156554.154 ops/s
Iteration  30: 2154675.344 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget":
  2147834.841 ±(99.9%) 3767.451 ops/s [Average]
  (min, avg, max) = (2132476.222, 2147834.841, 2156554.154), stdev = 5638.944
  CI (99.9%): [2144067.390, 2151602.292] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectShortWithTarget  thrpt   30  2147834.841 ± 3767.451  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectTarget$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectTarget

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93271.931 ops/s
# Warmup Iteration   2: 174832.001 ops/s
# Warmup Iteration   3: 207352.378 ops/s
# Warmup Iteration   4: 207950.153 ops/s
# Warmup Iteration   5: 209110.395 ops/s
# Warmup Iteration   6: 171155.520 ops/s
# Warmup Iteration   7: 208907.215 ops/s
# Warmup Iteration   8: 209056.824 ops/s
# Warmup Iteration   9: 208163.856 ops/s
# Warmup Iteration  10: 209185.598 ops/s
# Warmup Iteration  11: 208275.138 ops/s
# Warmup Iteration  12: 208414.321 ops/s
# Warmup Iteration  13: 209251.263 ops/s
# Warmup Iteration  14: 208864.375 ops/s
# Warmup Iteration  15: 208916.219 ops/s
# Warmup Iteration  16: 209036.068 ops/s
# Warmup Iteration  17: 208845.305 ops/s
# Warmup Iteration  18: 208339.762 ops/s
# Warmup Iteration  19: 207995.354 ops/s
# Warmup Iteration  20: 207972.177 ops/s
# Warmup Iteration  21: 208509.322 ops/s
# Warmup Iteration  22: 208351.789 ops/s
# Warmup Iteration  23: 208470.747 ops/s
# Warmup Iteration  24: 208465.832 ops/s
# Warmup Iteration  25: 208823.246 ops/s
# Warmup Iteration  26: 208672.184 ops/s
# Warmup Iteration  27: 208668.113 ops/s
# Warmup Iteration  28: 208878.593 ops/s
# Warmup Iteration  29: 208066.802 ops/s
# Warmup Iteration  30: 208462.738 ops/s
Iteration   1: 208762.923 ops/s
Iteration   2: 208996.266 ops/s
Iteration   3: 208330.968 ops/s
Iteration   4: 208723.122 ops/s
Iteration   5: 208031.184 ops/s
Iteration   6: 208076.132 ops/s
Iteration   7: 208427.511 ops/s
Iteration   8: 208816.460 ops/s
Iteration   9: 208143.089 ops/s
Iteration  10: 208305.033 ops/s
Iteration  11: 209115.338 ops/s
Iteration  12: 207734.418 ops/s
Iteration  13: 209547.015 ops/s
Iteration  14: 209087.339 ops/s
Iteration  15: 208904.536 ops/s
Iteration  16: 208705.841 ops/s
Iteration  17: 208168.429 ops/s
Iteration  18: 208355.514 ops/s
Iteration  19: 208416.123 ops/s
Iteration  20: 208462.983 ops/s
Iteration  21: 207974.552 ops/s
Iteration  22: 209122.494 ops/s
Iteration  23: 208328.451 ops/s
Iteration  24: 208426.782 ops/s
Iteration  25: 207061.106 ops/s
Iteration  26: 208698.509 ops/s
Iteration  27: 209135.903 ops/s
Iteration  28: 208510.399 ops/s
Iteration  29: 208631.404 ops/s
Iteration  30: 209058.450 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectTarget":
  208535.276 ±(99.9%) 335.659 ops/s [Average]
  (min, avg, max) = (207061.106, 208535.276, 209547.015), stdev = 502.398
  CI (99.9%): [208199.617, 208870.934] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectTarget  thrpt   30  208535.276 ± 335.659  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 607919.067 ops/s
# Warmup Iteration   2: 1252010.387 ops/s
# Warmup Iteration   3: 1374448.275 ops/s
# Warmup Iteration   4: 1379459.258 ops/s
# Warmup Iteration   5: 1135576.249 ops/s
# Warmup Iteration   6: 1384276.717 ops/s
# Warmup Iteration   7: 1382815.753 ops/s
# Warmup Iteration   8: 1388647.561 ops/s
# Warmup Iteration   9: 1388348.910 ops/s
# Warmup Iteration  10: 1381334.915 ops/s
# Warmup Iteration  11: 1380416.509 ops/s
# Warmup Iteration  12: 1385123.971 ops/s
# Warmup Iteration  13: 1388614.636 ops/s
# Warmup Iteration  14: 1379865.299 ops/s
# Warmup Iteration  15: 1386665.715 ops/s
# Warmup Iteration  16: 1388750.917 ops/s
# Warmup Iteration  17: 1386276.413 ops/s
# Warmup Iteration  18: 1383840.177 ops/s
# Warmup Iteration  19: 1385841.071 ops/s
# Warmup Iteration  20: 1388082.225 ops/s
# Warmup Iteration  21: 1385706.848 ops/s
# Warmup Iteration  22: 1387334.896 ops/s
# Warmup Iteration  23: 1388723.518 ops/s
# Warmup Iteration  24: 1386342.121 ops/s
# Warmup Iteration  25: 1385573.298 ops/s
# Warmup Iteration  26: 1380981.060 ops/s
# Warmup Iteration  27: 1389647.636 ops/s
# Warmup Iteration  28: 1383219.042 ops/s
# Warmup Iteration  29: 1385924.156 ops/s
# Warmup Iteration  30: 1379886.552 ops/s
Iteration   1: 1373684.351 ops/s
Iteration   2: 1383719.279 ops/s
Iteration   3: 1382183.831 ops/s
Iteration   4: 1383537.455 ops/s
Iteration   5: 1379832.277 ops/s
Iteration   6: 1383175.105 ops/s
Iteration   7: 1382086.710 ops/s
Iteration   8: 1382580.670 ops/s
Iteration   9: 1386969.811 ops/s
Iteration  10: 1381461.657 ops/s
Iteration  11: 1381738.064 ops/s
Iteration  12: 1380908.544 ops/s
Iteration  13: 1383343.857 ops/s
Iteration  14: 1381907.676 ops/s
Iteration  15: 1385039.658 ops/s
Iteration  16: 1383622.844 ops/s
Iteration  17: 1384607.705 ops/s
Iteration  18: 1380615.453 ops/s
Iteration  19: 1384165.863 ops/s
Iteration  20: 1382438.193 ops/s
Iteration  21: 1380219.653 ops/s
Iteration  22: 1384002.841 ops/s
Iteration  23: 1381185.277 ops/s
Iteration  24: 1385036.652 ops/s
Iteration  25: 1380231.660 ops/s
Iteration  26: 1386270.439 ops/s
Iteration  27: 1379269.531 ops/s
Iteration  28: 1383783.890 ops/s
Iteration  29: 1381233.881 ops/s
Iteration  30: 1383749.254 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith":
  1382420.069 ±(99.9%) 1673.206 ops/s [Average]
  (min, avg, max) = (1373684.351, 1382420.069, 1386969.811), stdev = 2504.376
  CI (99.9%): [1380746.864, 1384093.275] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith  thrpt   30  1382420.069 ± 1673.206  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 93262.548 ops/s
# Warmup Iteration   2: 177327.448 ops/s
# Warmup Iteration   3: 215546.049 ops/s
# Warmup Iteration   4: 216265.070 ops/s
# Warmup Iteration   5: 216418.743 ops/s
# Warmup Iteration   6: 177247.183 ops/s
# Warmup Iteration   7: 217582.874 ops/s
# Warmup Iteration   8: 217213.903 ops/s
# Warmup Iteration   9: 215722.167 ops/s
# Warmup Iteration  10: 216616.276 ops/s
# Warmup Iteration  11: 216806.374 ops/s
# Warmup Iteration  12: 215726.454 ops/s
# Warmup Iteration  13: 217083.700 ops/s
# Warmup Iteration  14: 216823.825 ops/s
# Warmup Iteration  15: 216570.057 ops/s
# Warmup Iteration  16: 215948.981 ops/s
# Warmup Iteration  17: 216758.455 ops/s
# Warmup Iteration  18: 216659.404 ops/s
# Warmup Iteration  19: 216076.320 ops/s
# Warmup Iteration  20: 215679.027 ops/s
# Warmup Iteration  21: 215980.427 ops/s
# Warmup Iteration  22: 216799.460 ops/s
# Warmup Iteration  23: 215515.153 ops/s
# Warmup Iteration  24: 216657.574 ops/s
# Warmup Iteration  25: 215479.613 ops/s
# Warmup Iteration  26: 215988.490 ops/s
# Warmup Iteration  27: 216484.297 ops/s
# Warmup Iteration  28: 217378.707 ops/s
# Warmup Iteration  29: 216498.118 ops/s
# Warmup Iteration  30: 216890.361 ops/s
Iteration   1: 216554.854 ops/s
Iteration   2: 216937.254 ops/s
Iteration   3: 217404.438 ops/s
Iteration   4: 217298.236 ops/s
Iteration   5: 215453.395 ops/s
Iteration   6: 217731.644 ops/s
Iteration   7: 217643.175 ops/s
Iteration   8: 217408.056 ops/s
Iteration   9: 217368.423 ops/s
Iteration  10: 217695.631 ops/s
Iteration  11: 216331.686 ops/s
Iteration  12: 217301.957 ops/s
Iteration  13: 216122.272 ops/s
Iteration  14: 217487.939 ops/s
Iteration  15: 216811.876 ops/s
Iteration  16: 216964.545 ops/s
Iteration  17: 217111.834 ops/s
Iteration  18: 215409.518 ops/s
Iteration  19: 216344.771 ops/s
Iteration  20: 215677.505 ops/s
Iteration  21: 217184.161 ops/s
Iteration  22: 217286.070 ops/s
Iteration  23: 216185.990 ops/s
Iteration  24: 217445.540 ops/s
Iteration  25: 215669.551 ops/s
Iteration  26: 217296.031 ops/s
Iteration  27: 216693.489 ops/s
Iteration  28: 217338.554 ops/s
Iteration  29: 217582.187 ops/s
Iteration  30: 216325.355 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target":
  216868.865 ±(99.9%) 467.621 ops/s [Average]
  (min, avg, max) = (215409.518, 216868.865, 217731.644), stdev = 699.914
  CI (99.9%): [216401.243, 217336.486] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_collectWith_target  thrpt   30  216868.865 ± 467.621  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1891927.896 ops/s
# Warmup Iteration   2: 4428321.052 ops/s
# Warmup Iteration   3: 4565402.022 ops/s
# Warmup Iteration   4: 3761921.776 ops/s
# Warmup Iteration   5: 4550512.469 ops/s
# Warmup Iteration   6: 4547398.713 ops/s
# Warmup Iteration   7: 4545323.956 ops/s
# Warmup Iteration   8: 4546099.971 ops/s
# Warmup Iteration   9: 4535781.654 ops/s
# Warmup Iteration  10: 4546106.277 ops/s
# Warmup Iteration  11: 4543136.417 ops/s
# Warmup Iteration  12: 4563928.344 ops/s
# Warmup Iteration  13: 4545565.929 ops/s
# Warmup Iteration  14: 4535715.939 ops/s
# Warmup Iteration  15: 4543596.228 ops/s
# Warmup Iteration  16: 4552588.025 ops/s
# Warmup Iteration  17: 4557160.502 ops/s
# Warmup Iteration  18: 4574756.242 ops/s
# Warmup Iteration  19: 4563380.851 ops/s
# Warmup Iteration  20: 4560083.147 ops/s
# Warmup Iteration  21: 4561518.504 ops/s
# Warmup Iteration  22: 4570887.954 ops/s
# Warmup Iteration  23: 4567594.258 ops/s
# Warmup Iteration  24: 4562925.639 ops/s
# Warmup Iteration  25: 4566221.493 ops/s
# Warmup Iteration  26: 4563085.178 ops/s
# Warmup Iteration  27: 4574130.140 ops/s
# Warmup Iteration  28: 4565275.104 ops/s
# Warmup Iteration  29: 4564335.352 ops/s
# Warmup Iteration  30: 4565572.958 ops/s
Iteration   1: 4563952.207 ops/s
Iteration   2: 4564607.355 ops/s
Iteration   3: 4568360.877 ops/s
Iteration   4: 4572497.680 ops/s
Iteration   5: 4542081.347 ops/s
Iteration   6: 4555177.114 ops/s
Iteration   7: 4565546.932 ops/s
Iteration   8: 4532928.246 ops/s
Iteration   9: 4580977.254 ops/s
Iteration  10: 4582046.516 ops/s
Iteration  11: 4582831.618 ops/s
Iteration  12: 4576724.428 ops/s
Iteration  13: 4575313.535 ops/s
Iteration  14: 4565401.115 ops/s
Iteration  15: 4565849.022 ops/s
Iteration  16: 4569491.357 ops/s
Iteration  17: 4555677.584 ops/s
Iteration  18: 4559664.877 ops/s
Iteration  19: 4573855.985 ops/s
Iteration  20: 4556642.806 ops/s
Iteration  21: 4564393.513 ops/s
Iteration  22: 4552205.362 ops/s
Iteration  23: 4572415.882 ops/s
Iteration  24: 4590477.448 ops/s
Iteration  25: 4577989.237 ops/s
Iteration  26: 4562354.207 ops/s
Iteration  27: 4578709.714 ops/s
Iteration  28: 4570491.214 ops/s
Iteration  29: 4559065.781 ops/s
Iteration  30: 4552750.549 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_contains":
  4566349.359 ±(99.9%) 8326.632 ops/s [Average]
  (min, avg, max) = (4532928.246, 4566349.359, 4590477.448), stdev = 12462.911
  CI (99.9%): [4558022.727, 4574675.991] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_contains  thrpt   30  4566349.359 ± 8326.632  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1690065.430 ops/s
# Warmup Iteration   2: 3736072.184 ops/s
# Warmup Iteration   3: 3998517.653 ops/s
# Warmup Iteration   4: 3606626.921 ops/s
# Warmup Iteration   5: 3667026.924 ops/s
# Warmup Iteration   6: 3990387.370 ops/s
# Warmup Iteration   7: 3969278.581 ops/s
# Warmup Iteration   8: 3979267.399 ops/s
# Warmup Iteration   9: 3979377.090 ops/s
# Warmup Iteration  10: 3985688.072 ops/s
# Warmup Iteration  11: 3990402.122 ops/s
# Warmup Iteration  12: 3976888.540 ops/s
# Warmup Iteration  13: 3982913.783 ops/s
# Warmup Iteration  14: 3985848.518 ops/s
# Warmup Iteration  15: 3988415.651 ops/s
# Warmup Iteration  16: 3988085.719 ops/s
# Warmup Iteration  17: 4006960.068 ops/s
# Warmup Iteration  18: 4009102.077 ops/s
# Warmup Iteration  19: 3997952.697 ops/s
# Warmup Iteration  20: 4003195.445 ops/s
# Warmup Iteration  21: 3974514.758 ops/s
# Warmup Iteration  22: 4002715.843 ops/s
# Warmup Iteration  23: 3998881.934 ops/s
# Warmup Iteration  24: 3997767.058 ops/s
# Warmup Iteration  25: 4004724.857 ops/s
# Warmup Iteration  26: 3995609.353 ops/s
# Warmup Iteration  27: 3990855.807 ops/s
# Warmup Iteration  28: 3998577.397 ops/s
# Warmup Iteration  29: 3988662.557 ops/s
# Warmup Iteration  30: 4004756.725 ops/s
Iteration   1: 4001349.264 ops/s
Iteration   2: 4005113.622 ops/s
Iteration   3: 4006984.711 ops/s
Iteration   4: 3982351.972 ops/s
Iteration   5: 4009379.707 ops/s
Iteration   6: 4004924.734 ops/s
Iteration   7: 4004901.605 ops/s
Iteration   8: 4015926.755 ops/s
Iteration   9: 3999992.577 ops/s
Iteration  10: 4007491.599 ops/s
Iteration  11: 3989655.718 ops/s
Iteration  12: 3996514.675 ops/s
Iteration  13: 4005729.962 ops/s
Iteration  14: 4008549.392 ops/s
Iteration  15: 4008437.873 ops/s
Iteration  16: 4007239.095 ops/s
Iteration  17: 3985347.666 ops/s
Iteration  18: 3982060.269 ops/s
Iteration  19: 3978395.345 ops/s
Iteration  20: 3987093.846 ops/s
Iteration  21: 3996195.199 ops/s
Iteration  22: 4000475.435 ops/s
Iteration  23: 3994119.126 ops/s
Iteration  24: 3980049.375 ops/s
Iteration  25: 3970290.692 ops/s
Iteration  26: 3993110.219 ops/s
Iteration  27: 4008387.282 ops/s
Iteration  28: 4006682.551 ops/s
Iteration  29: 4004379.994 ops/s
Iteration  30: 3990301.286 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray":
  3997714.385 ±(99.9%) 7649.662 ops/s [Average]
  (min, avg, max) = (3970290.692, 3997714.385, 4015926.755), stdev = 11449.655
  CI (99.9%): [3990064.723, 4005364.047] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllArray  thrpt   30  3997714.385 ± 7649.662  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1664664.384 ops/s
# Warmup Iteration   2: 3829694.856 ops/s
# Warmup Iteration   3: 3980335.354 ops/s
# Warmup Iteration   4: 3562520.670 ops/s
# Warmup Iteration   5: 3696555.650 ops/s
# Warmup Iteration   6: 3999309.431 ops/s
# Warmup Iteration   7: 3996211.009 ops/s
# Warmup Iteration   8: 3993275.503 ops/s
# Warmup Iteration   9: 3992067.703 ops/s
# Warmup Iteration  10: 3982481.238 ops/s
# Warmup Iteration  11: 3991039.438 ops/s
# Warmup Iteration  12: 3996340.304 ops/s
# Warmup Iteration  13: 3994160.713 ops/s
# Warmup Iteration  14: 3973033.967 ops/s
# Warmup Iteration  15: 3998962.585 ops/s
# Warmup Iteration  16: 3991477.632 ops/s
# Warmup Iteration  17: 4010211.695 ops/s
# Warmup Iteration  18: 4009119.870 ops/s
# Warmup Iteration  19: 4012302.946 ops/s
# Warmup Iteration  20: 4013811.060 ops/s
# Warmup Iteration  21: 4003187.161 ops/s
# Warmup Iteration  22: 4011596.487 ops/s
# Warmup Iteration  23: 4021839.923 ops/s
# Warmup Iteration  24: 4009028.847 ops/s
# Warmup Iteration  25: 4004507.393 ops/s
# Warmup Iteration  26: 4021590.656 ops/s
# Warmup Iteration  27: 4005292.967 ops/s
# Warmup Iteration  28: 4014346.485 ops/s
# Warmup Iteration  29: 4010378.832 ops/s
# Warmup Iteration  30: 4013517.342 ops/s
Iteration   1: 4006194.116 ops/s
Iteration   2: 4020359.429 ops/s
Iteration   3: 4018285.586 ops/s
Iteration   4: 4006177.477 ops/s
Iteration   5: 4008877.370 ops/s
Iteration   6: 4028000.179 ops/s
Iteration   7: 4008156.599 ops/s
Iteration   8: 4011764.663 ops/s
Iteration   9: 4013337.853 ops/s
Iteration  10: 4022297.964 ops/s
Iteration  11: 4001128.217 ops/s
Iteration  12: 4020788.307 ops/s
Iteration  13: 4024614.756 ops/s
Iteration  14: 4008518.367 ops/s
Iteration  15: 4005221.011 ops/s
Iteration  16: 4015752.305 ops/s
Iteration  17: 3996425.622 ops/s
Iteration  18: 4005552.779 ops/s
Iteration  19: 4004844.068 ops/s
Iteration  20: 4014196.267 ops/s
Iteration  21: 4004667.448 ops/s
Iteration  22: 4016960.360 ops/s
Iteration  23: 4017302.819 ops/s
Iteration  24: 3988570.480 ops/s
Iteration  25: 4013134.572 ops/s
Iteration  26: 4017155.048 ops/s
Iteration  27: 4004236.521 ops/s
Iteration  28: 3990499.747 ops/s
Iteration  29: 3996711.034 ops/s
Iteration  30: 4023889.140 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection":
  4010454.003 ±(99.9%) 6613.429 ops/s [Average]
  (min, avg, max) = (3988570.480, 4010454.003, 4028000.179), stdev = 9898.670
  CI (99.9%): [4003840.574, 4017067.433] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllCollection  thrpt   30  4010454.003 ± 6613.429  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1681597.945 ops/s
# Warmup Iteration   2: 3831548.501 ops/s
# Warmup Iteration   3: 3990877.682 ops/s
# Warmup Iteration   4: 3570577.069 ops/s
# Warmup Iteration   5: 3737353.162 ops/s
# Warmup Iteration   6: 3990838.793 ops/s
# Warmup Iteration   7: 3997899.211 ops/s
# Warmup Iteration   8: 3969635.074 ops/s
# Warmup Iteration   9: 3982883.900 ops/s
# Warmup Iteration  10: 4006113.028 ops/s
# Warmup Iteration  11: 3992462.667 ops/s
# Warmup Iteration  12: 3997993.584 ops/s
# Warmup Iteration  13: 3999041.137 ops/s
# Warmup Iteration  14: 4007127.745 ops/s
# Warmup Iteration  15: 4001979.660 ops/s
# Warmup Iteration  16: 4000455.782 ops/s
# Warmup Iteration  17: 4008309.828 ops/s
# Warmup Iteration  18: 4016734.221 ops/s
# Warmup Iteration  19: 3992462.086 ops/s
# Warmup Iteration  20: 4018114.644 ops/s
# Warmup Iteration  21: 4012243.799 ops/s
# Warmup Iteration  22: 3998944.525 ops/s
# Warmup Iteration  23: 4015865.141 ops/s
# Warmup Iteration  24: 4005879.640 ops/s
# Warmup Iteration  25: 4006551.636 ops/s
# Warmup Iteration  26: 4013335.952 ops/s
# Warmup Iteration  27: 4014988.976 ops/s
# Warmup Iteration  28: 4000239.919 ops/s
# Warmup Iteration  29: 3999436.065 ops/s
# Warmup Iteration  30: 4005464.305 ops/s
Iteration   1: 4007881.696 ops/s
Iteration   2: 3994533.515 ops/s
Iteration   3: 4014805.598 ops/s
Iteration   4: 3989307.826 ops/s
Iteration   5: 4014697.693 ops/s
Iteration   6: 4002899.582 ops/s
Iteration   7: 3999645.165 ops/s
Iteration   8: 4026959.366 ops/s
Iteration   9: 4016713.468 ops/s
Iteration  10: 4025699.030 ops/s
Iteration  11: 4004625.649 ops/s
Iteration  12: 4005707.529 ops/s
Iteration  13: 4013720.894 ops/s
Iteration  14: 4018628.493 ops/s
Iteration  15: 4024823.224 ops/s
Iteration  16: 4017368.162 ops/s
Iteration  17: 4014566.311 ops/s
Iteration  18: 4011868.622 ops/s
Iteration  19: 4033634.193 ops/s
Iteration  20: 4028534.896 ops/s
Iteration  21: 4015780.353 ops/s
Iteration  22: 3999042.138 ops/s
Iteration  23: 4023983.700 ops/s
Iteration  24: 4000582.840 ops/s
Iteration  25: 3998399.919 ops/s
Iteration  26: 4004621.054 ops/s
Iteration  27: 4000369.824 ops/s
Iteration  28: 3995757.724 ops/s
Iteration  29: 4013987.596 ops/s
Iteration  30: 4006285.573 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable":
  4010847.721 ±(99.9%) 7541.332 ops/s [Average]
  (min, avg, max) = (3989307.826, 4010847.721, 4033634.193), stdev = 11287.512
  CI (99.9%): [4003306.389, 4018389.054] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAllIterable  thrpt   30  4010847.721 ± 7541.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 52969.189 ops/s
# Warmup Iteration   2: 82112.409 ops/s
# Warmup Iteration   3: 97090.934 ops/s
# Warmup Iteration   4: 96833.532 ops/s
# Warmup Iteration   5: 97436.566 ops/s
# Warmup Iteration   6: 97490.823 ops/s
# Warmup Iteration   7: 81884.807 ops/s
# Warmup Iteration   8: 97235.936 ops/s
# Warmup Iteration   9: 97377.837 ops/s
# Warmup Iteration  10: 97689.392 ops/s
# Warmup Iteration  11: 97319.403 ops/s
# Warmup Iteration  12: 97464.213 ops/s
# Warmup Iteration  13: 97636.547 ops/s
# Warmup Iteration  14: 97447.725 ops/s
# Warmup Iteration  15: 97399.585 ops/s
# Warmup Iteration  16: 97617.033 ops/s
# Warmup Iteration  17: 97278.259 ops/s
# Warmup Iteration  18: 97480.050 ops/s
# Warmup Iteration  19: 97667.972 ops/s
# Warmup Iteration  20: 97734.508 ops/s
# Warmup Iteration  21: 97213.575 ops/s
# Warmup Iteration  22: 97735.587 ops/s
# Warmup Iteration  23: 97504.154 ops/s
# Warmup Iteration  24: 97545.524 ops/s
# Warmup Iteration  25: 97754.310 ops/s
# Warmup Iteration  26: 97797.350 ops/s
# Warmup Iteration  27: 97661.108 ops/s
# Warmup Iteration  28: 97385.307 ops/s
# Warmup Iteration  29: 97621.202 ops/s
# Warmup Iteration  30: 97712.741 ops/s
Iteration   1: 97465.793 ops/s
Iteration   2: 97306.696 ops/s
Iteration   3: 97863.198 ops/s
Iteration   4: 97667.281 ops/s
Iteration   5: 97628.087 ops/s
Iteration   6: 97516.841 ops/s
Iteration   7: 97507.649 ops/s
Iteration   8: 97260.601 ops/s
Iteration   9: 97249.751 ops/s
Iteration  10: 97322.216 ops/s
Iteration  11: 97349.749 ops/s
Iteration  12: 97235.127 ops/s
Iteration  13: 97594.892 ops/s
Iteration  14: 97459.047 ops/s
Iteration  15: 97189.742 ops/s
Iteration  16: 97382.774 ops/s
Iteration  17: 97487.651 ops/s
Iteration  18: 97530.914 ops/s
Iteration  19: 97419.636 ops/s
Iteration  20: 97460.419 ops/s
Iteration  21: 97122.922 ops/s
Iteration  22: 97310.622 ops/s
Iteration  23: 97579.010 ops/s
Iteration  24: 97310.628 ops/s
Iteration  25: 97631.515 ops/s
Iteration  26: 97170.326 ops/s
Iteration  27: 97452.833 ops/s
Iteration  28: 97235.023 ops/s
Iteration  29: 97713.767 ops/s
Iteration  30: 97730.799 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection":
  97438.517 ±(99.9%) 123.656 ops/s [Average]
  (min, avg, max) = (97122.922, 97438.517, 97863.198), stdev = 185.082
  CI (99.9%): [97314.861, 97562.173] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyCollection  thrpt   30  97438.517 ± 123.656  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 49430.368 ops/s
# Warmup Iteration   2: 71488.274 ops/s
# Warmup Iteration   3: 86201.824 ops/s
# Warmup Iteration   4: 85858.088 ops/s
# Warmup Iteration   5: 86295.997 ops/s
# Warmup Iteration   6: 85977.324 ops/s
# Warmup Iteration   7: 83746.910 ops/s
# Warmup Iteration   8: 75080.975 ops/s
# Warmup Iteration   9: 85919.419 ops/s
# Warmup Iteration  10: 85994.633 ops/s
# Warmup Iteration  11: 85992.398 ops/s
# Warmup Iteration  12: 85865.803 ops/s
# Warmup Iteration  13: 86245.597 ops/s
# Warmup Iteration  14: 86092.342 ops/s
# Warmup Iteration  15: 86115.300 ops/s
# Warmup Iteration  16: 85538.884 ops/s
# Warmup Iteration  17: 85711.381 ops/s
# Warmup Iteration  18: 85855.531 ops/s
# Warmup Iteration  19: 85719.565 ops/s
# Warmup Iteration  20: 86103.026 ops/s
# Warmup Iteration  21: 85799.881 ops/s
# Warmup Iteration  22: 85634.714 ops/s
# Warmup Iteration  23: 85797.679 ops/s
# Warmup Iteration  24: 86104.363 ops/s
# Warmup Iteration  25: 86080.697 ops/s
# Warmup Iteration  26: 86079.490 ops/s
# Warmup Iteration  27: 85982.750 ops/s
# Warmup Iteration  28: 86138.554 ops/s
# Warmup Iteration  29: 85884.301 ops/s
# Warmup Iteration  30: 86159.346 ops/s
Iteration   1: 86424.550 ops/s
Iteration   2: 85966.710 ops/s
Iteration   3: 86313.037 ops/s
Iteration   4: 85727.122 ops/s
Iteration   5: 85711.622 ops/s
Iteration   6: 85900.532 ops/s
Iteration   7: 86303.073 ops/s
Iteration   8: 85995.713 ops/s
Iteration   9: 86139.052 ops/s
Iteration  10: 85720.664 ops/s
Iteration  11: 85982.127 ops/s
Iteration  12: 85702.372 ops/s
Iteration  13: 86076.652 ops/s
Iteration  14: 86040.455 ops/s
Iteration  15: 86105.827 ops/s
Iteration  16: 86148.201 ops/s
Iteration  17: 86000.066 ops/s
Iteration  18: 85871.989 ops/s
Iteration  19: 86182.264 ops/s
Iteration  20: 85787.191 ops/s
Iteration  21: 86262.538 ops/s
Iteration  22: 86376.654 ops/s
Iteration  23: 86326.875 ops/s
Iteration  24: 86091.861 ops/s
Iteration  25: 85989.916 ops/s
Iteration  26: 86005.745 ops/s
Iteration  27: 86365.622 ops/s
Iteration  28: 86193.528 ops/s
Iteration  29: 86123.530 ops/s
Iteration  30: 86160.299 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable":
  86066.526 ±(99.9%) 139.600 ops/s [Average]
  (min, avg, max) = (85702.372, 86066.526, 86424.550), stdev = 208.946
  CI (99.9%): [85926.926, 86206.126] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt      Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsAnyIterable  thrpt   30  86066.526 ± 139.600  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 645454.509 ops/s
# Warmup Iteration   2: 690771.468 ops/s
# Warmup Iteration   3: 832932.516 ops/s
# Warmup Iteration   4: 888456.946 ops/s
# Warmup Iteration   5: 889996.646 ops/s
# Warmup Iteration   6: 887915.782 ops/s
# Warmup Iteration   7: 891311.881 ops/s
# Warmup Iteration   8: 888865.000 ops/s
# Warmup Iteration   9: 885484.854 ops/s
# Warmup Iteration  10: 888905.228 ops/s
# Warmup Iteration  11: 891522.757 ops/s
# Warmup Iteration  12: 894553.442 ops/s
# Warmup Iteration  13: 825861.081 ops/s
# Warmup Iteration  14: 810507.517 ops/s
# Warmup Iteration  15: 890918.699 ops/s
# Warmup Iteration  16: 890256.251 ops/s
# Warmup Iteration  17: 936876.206 ops/s
# Warmup Iteration  18: 943161.148 ops/s
# Warmup Iteration  19: 943997.402 ops/s
# Warmup Iteration  20: 945394.026 ops/s
# Warmup Iteration  21: 939379.555 ops/s
# Warmup Iteration  22: 941645.084 ops/s
# Warmup Iteration  23: 944109.543 ops/s
# Warmup Iteration  24: 944238.342 ops/s
# Warmup Iteration  25: 941622.445 ops/s
# Warmup Iteration  26: 936759.064 ops/s
# Warmup Iteration  27: 939645.430 ops/s
# Warmup Iteration  28: 944047.758 ops/s
# Warmup Iteration  29: 941368.118 ops/s
# Warmup Iteration  30: 942740.885 ops/s
Iteration   1: 939391.586 ops/s
Iteration   2: 938231.875 ops/s
Iteration   3: 941047.967 ops/s
Iteration   4: 942199.250 ops/s
Iteration   5: 941475.591 ops/s
Iteration   6: 949120.462 ops/s
Iteration   7: 939152.270 ops/s
Iteration   8: 945160.273 ops/s
Iteration   9: 943525.726 ops/s
Iteration  10: 945745.143 ops/s
Iteration  11: 942865.225 ops/s
Iteration  12: 936298.762 ops/s
Iteration  13: 944524.680 ops/s
Iteration  14: 941027.644 ops/s
Iteration  15: 945457.102 ops/s
Iteration  16: 944260.091 ops/s
Iteration  17: 946800.603 ops/s
Iteration  18: 942950.153 ops/s
Iteration  19: 951280.184 ops/s
Iteration  20: 943103.065 ops/s
Iteration  21: 938213.269 ops/s
Iteration  22: 940248.475 ops/s
Iteration  23: 943431.549 ops/s
Iteration  24: 941603.545 ops/s
Iteration  25: 941970.520 ops/s
Iteration  26: 944257.892 ops/s
Iteration  27: 945444.864 ops/s
Iteration  28: 937451.957 ops/s
Iteration  29: 937043.889 ops/s
Iteration  30: 946883.803 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsBy":
  942672.247 ±(99.9%) 2381.332 ops/s [Average]
  (min, avg, max) = (936298.762, 942672.247, 951280.184), stdev = 3564.267
  CI (99.9%): [940290.915, 945053.580] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsBy  thrpt   30  942672.247 ± 2381.332  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 51534.448 ops/s
# Warmup Iteration   2: 76722.835 ops/s
# Warmup Iteration   3: 91099.145 ops/s
# Warmup Iteration   4: 91471.718 ops/s
# Warmup Iteration   5: 91434.236 ops/s
# Warmup Iteration   6: 91475.282 ops/s
# Warmup Iteration   7: 78315.553 ops/s
# Warmup Iteration   8: 90627.767 ops/s
# Warmup Iteration   9: 91395.628 ops/s
# Warmup Iteration  10: 91669.249 ops/s
# Warmup Iteration  11: 91663.434 ops/s
# Warmup Iteration  12: 91245.352 ops/s
# Warmup Iteration  13: 91636.254 ops/s
# Warmup Iteration  14: 91766.354 ops/s
# Warmup Iteration  15: 91538.643 ops/s
# Warmup Iteration  16: 91486.736 ops/s
# Warmup Iteration  17: 91708.152 ops/s
# Warmup Iteration  18: 91442.262 ops/s
# Warmup Iteration  19: 91331.957 ops/s
# Warmup Iteration  20: 91555.987 ops/s
# Warmup Iteration  21: 91212.607 ops/s
# Warmup Iteration  22: 90984.976 ops/s
# Warmup Iteration  23: 91899.987 ops/s
# Warmup Iteration  24: 91841.418 ops/s
# Warmup Iteration  25: 91874.796 ops/s
# Warmup Iteration  26: 91606.122 ops/s
# Warmup Iteration  27: 91694.623 ops/s
# Warmup Iteration  28: 91755.652 ops/s
# Warmup Iteration  29: 91682.196 ops/s
# Warmup Iteration  30: 92056.159 ops/s
Iteration   1: 91918.411 ops/s
Iteration   2: 91805.230 ops/s
Iteration   3: 91468.433 ops/s
Iteration   4: 91948.257 ops/s
Iteration   5: 91834.199 ops/s
Iteration   6: 92090.436 ops/s
Iteration   7: 91740.113 ops/s
Iteration   8: 91752.503 ops/s
Iteration   9: 91834.315 ops/s
Iteration  10: 91772.996 ops/s
Iteration  11: 91711.620 ops/s
Iteration  12: 91552.430 ops/s
Iteration  13: 91460.042 ops/s
Iteration  14: 91485.228 ops/s
Iteration  15: 91956.001 ops/s
Iteration  16: 92329.713 ops/s
Iteration  17: 91508.267 ops/s
Iteration  18: 91749.672 ops/s
Iteration  19: 91714.233 ops/s
Iteration  20: 91881.163 ops/s
Iteration  21: 91764.056 ops/s
Iteration  22: 91688.185 ops/s
Iteration  23: 91425.489 ops/s
Iteration  24: 91872.110 ops/s
Iteration  25: 91434.871 ops/s
Iteration  26: 91596.652 ops/s
Iteration  27: 91844.701 ops/s
Iteration  28: 91680.213 ops/s
Iteration  29: 91921.470 ops/s
Iteration  30: 91731.018 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection":
  91749.068 ±(99.9%) 137.117 ops/s [Average]
  (min, avg, max) = (91425.489, 91749.068, 92329.713), stdev = 205.231
  CI (99.9%): [91611.950, 91886.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt      Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneCollection  thrpt   30  91749.068 ± 137.117  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 48986.046 ops/s
# Warmup Iteration   2: 70572.177 ops/s
# Warmup Iteration   3: 84923.005 ops/s
# Warmup Iteration   4: 84634.743 ops/s
# Warmup Iteration   5: 85192.356 ops/s
# Warmup Iteration   6: 85011.052 ops/s
# Warmup Iteration   7: 84372.350 ops/s
# Warmup Iteration   8: 72406.078 ops/s
# Warmup Iteration   9: 84938.973 ops/s
# Warmup Iteration  10: 84885.508 ops/s
# Warmup Iteration  11: 84950.923 ops/s
# Warmup Iteration  12: 84728.912 ops/s
# Warmup Iteration  13: 85072.263 ops/s
# Warmup Iteration  14: 84814.248 ops/s
# Warmup Iteration  15: 85064.997 ops/s
# Warmup Iteration  16: 84951.147 ops/s
# Warmup Iteration  17: 84434.297 ops/s
# Warmup Iteration  18: 84639.487 ops/s
# Warmup Iteration  19: 84747.541 ops/s
# Warmup Iteration  20: 84842.466 ops/s
# Warmup Iteration  21: 84451.450 ops/s
# Warmup Iteration  22: 84727.159 ops/s
# Warmup Iteration  23: 84853.992 ops/s
# Warmup Iteration  24: 84273.331 ops/s
# Warmup Iteration  25: 84760.152 ops/s
# Warmup Iteration  26: 85028.817 ops/s
# Warmup Iteration  27: 84521.856 ops/s
# Warmup Iteration  28: 84604.524 ops/s
# Warmup Iteration  29: 84704.304 ops/s
# Warmup Iteration  30: 84579.589 ops/s
Iteration   1: 84587.770 ops/s
Iteration   2: 84832.691 ops/s
Iteration   3: 84861.767 ops/s
Iteration   4: 85313.441 ops/s
Iteration   5: 84741.677 ops/s
Iteration   6: 85193.570 ops/s
Iteration   7: 84527.695 ops/s
Iteration   8: 84631.765 ops/s
Iteration   9: 84672.094 ops/s
Iteration  10: 84593.569 ops/s
Iteration  11: 84786.863 ops/s
Iteration  12: 84446.069 ops/s
Iteration  13: 84351.078 ops/s
Iteration  14: 84712.380 ops/s
Iteration  15: 83898.139 ops/s
Iteration  16: 85015.223 ops/s
Iteration  17: 84631.074 ops/s
Iteration  18: 84848.493 ops/s
Iteration  19: 84746.532 ops/s
Iteration  20: 84242.973 ops/s
Iteration  21: 84472.725 ops/s
Iteration  22: 84212.363 ops/s
Iteration  23: 84796.181 ops/s
Iteration  24: 84394.393 ops/s
Iteration  25: 84398.034 ops/s
Iteration  26: 84773.131 ops/s
Iteration  27: 84157.599 ops/s
Iteration  28: 84205.445 ops/s
Iteration  29: 84483.777 ops/s
Iteration  30: 84288.187 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable":
  84593.890 ±(99.9%) 207.770 ops/s [Average]
  (min, avg, max) = (83898.139, 84593.890, 85313.441), stdev = 310.981
  CI (99.9%): [84386.120, 84801.660] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt      Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_containsNoneIterable  thrpt   30  84593.890 ± 207.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_count$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_count

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1800691.373 ops/s
# Warmup Iteration   2: 4293433.300 ops/s
# Warmup Iteration   3: 4443850.478 ops/s
# Warmup Iteration   4: 3678184.875 ops/s
# Warmup Iteration   5: 4456619.552 ops/s
# Warmup Iteration   6: 4441111.347 ops/s
# Warmup Iteration   7: 4447622.815 ops/s
# Warmup Iteration   8: 4448450.144 ops/s
# Warmup Iteration   9: 4451009.758 ops/s
# Warmup Iteration  10: 4461590.055 ops/s
# Warmup Iteration  11: 4454091.229 ops/s
# Warmup Iteration  12: 4437669.128 ops/s
# Warmup Iteration  13: 4456129.284 ops/s
# Warmup Iteration  14: 4452047.062 ops/s
# Warmup Iteration  15: 4440798.412 ops/s
# Warmup Iteration  16: 4446693.174 ops/s
# Warmup Iteration  17: 4452815.371 ops/s
# Warmup Iteration  18: 4454823.861 ops/s
# Warmup Iteration  19: 4453188.414 ops/s
# Warmup Iteration  20: 4453381.299 ops/s
# Warmup Iteration  21: 4445572.116 ops/s
# Warmup Iteration  22: 4441371.710 ops/s
# Warmup Iteration  23: 4445597.798 ops/s
# Warmup Iteration  24: 4457197.704 ops/s
# Warmup Iteration  25: 4447114.084 ops/s
# Warmup Iteration  26: 4434524.131 ops/s
# Warmup Iteration  27: 4458137.110 ops/s
# Warmup Iteration  28: 4450743.358 ops/s
# Warmup Iteration  29: 4430742.560 ops/s
# Warmup Iteration  30: 4456268.131 ops/s
Iteration   1: 4459815.859 ops/s
Iteration   2: 4463964.119 ops/s
Iteration   3: 4440990.797 ops/s
Iteration   4: 4442019.681 ops/s
Iteration   5: 4457912.339 ops/s
Iteration   6: 4427330.200 ops/s
Iteration   7: 4433567.093 ops/s
Iteration   8: 4454175.426 ops/s
Iteration   9: 4446328.203 ops/s
Iteration  10: 4437814.325 ops/s
Iteration  11: 4440087.637 ops/s
Iteration  12: 4443200.281 ops/s
Iteration  13: 4450425.382 ops/s
Iteration  14: 4449130.397 ops/s
Iteration  15: 4444876.149 ops/s
Iteration  16: 4450699.661 ops/s
Iteration  17: 4456116.887 ops/s
Iteration  18: 4429634.873 ops/s
Iteration  19: 4459725.970 ops/s
Iteration  20: 4462139.545 ops/s
Iteration  21: 4442455.416 ops/s
Iteration  22: 4446241.995 ops/s
Iteration  23: 4458368.388 ops/s
Iteration  24: 4433921.108 ops/s
Iteration  25: 4436130.654 ops/s
Iteration  26: 4440094.057 ops/s
Iteration  27: 4435826.481 ops/s
Iteration  28: 4431526.629 ops/s
Iteration  29: 4440234.440 ops/s
Iteration  30: 4420748.723 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_count":
  4444516.757 ±(99.9%) 7453.980 ops/s [Average]
  (min, avg, max) = (4420748.723, 4444516.757, 4463964.119), stdev = 11156.767
  CI (99.9%): [4437062.777, 4451970.737] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_count  thrpt   30  4444516.757 ± 7453.980  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countBy$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countBy

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 697573.483 ops/s
# Warmup Iteration   2: 1403890.069 ops/s
# Warmup Iteration   3: 1530586.672 ops/s
# Warmup Iteration   4: 1535767.754 ops/s
# Warmup Iteration   5: 1274273.171 ops/s
# Warmup Iteration   6: 1542787.666 ops/s
# Warmup Iteration   7: 1542652.594 ops/s
# Warmup Iteration   8: 1539218.265 ops/s
# Warmup Iteration   9: 1545438.163 ops/s
# Warmup Iteration  10: 1534768.801 ops/s
# Warmup Iteration  11: 1543343.082 ops/s
# Warmup Iteration  12: 1534683.330 ops/s
# Warmup Iteration  13: 1540444.495 ops/s
# Warmup Iteration  14: 1540847.497 ops/s
# Warmup Iteration  15: 1537875.746 ops/s
# Warmup Iteration  16: 1543053.844 ops/s
# Warmup Iteration  17: 1541943.211 ops/s
# Warmup Iteration  18: 1541987.878 ops/s
# Warmup Iteration  19: 1541781.362 ops/s
# Warmup Iteration  20: 1536475.028 ops/s
# Warmup Iteration  21: 1537726.972 ops/s
# Warmup Iteration  22: 1541008.477 ops/s
# Warmup Iteration  23: 1541972.884 ops/s
# Warmup Iteration  24: 1545048.029 ops/s
# Warmup Iteration  25: 1539238.496 ops/s
# Warmup Iteration  26: 1537158.588 ops/s
# Warmup Iteration  27: 1538703.464 ops/s
# Warmup Iteration  28: 1540225.857 ops/s
# Warmup Iteration  29: 1542509.791 ops/s
# Warmup Iteration  30: 1538112.345 ops/s
Iteration   1: 1526917.440 ops/s
Iteration   2: 1529300.198 ops/s
Iteration   3: 1547026.192 ops/s
Iteration   4: 1545833.856 ops/s
Iteration   5: 1540508.943 ops/s
Iteration   6: 1543838.421 ops/s
Iteration   7: 1533451.297 ops/s
Iteration   8: 1540251.811 ops/s
Iteration   9: 1544141.179 ops/s
Iteration  10: 1537452.899 ops/s
Iteration  11: 1539345.882 ops/s
Iteration  12: 1539927.540 ops/s
Iteration  13: 1537385.787 ops/s
Iteration  14: 1538735.734 ops/s
Iteration  15: 1539853.086 ops/s
Iteration  16: 1541165.909 ops/s
Iteration  17: 1544558.707 ops/s
Iteration  18: 1546167.136 ops/s
Iteration  19: 1539735.582 ops/s
Iteration  20: 1536383.488 ops/s
Iteration  21: 1534037.655 ops/s
Iteration  22: 1539553.198 ops/s
Iteration  23: 1542378.032 ops/s
Iteration  24: 1538470.899 ops/s
Iteration  25: 1541857.864 ops/s
Iteration  26: 1543717.713 ops/s
Iteration  27: 1542267.615 ops/s
Iteration  28: 1536537.145 ops/s
Iteration  29: 1545138.815 ops/s
Iteration  30: 1544041.131 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countBy":
  1539999.372 ±(99.9%) 3172.091 ops/s [Average]
  (min, avg, max) = (1526917.440, 1539999.372, 1547026.192), stdev = 4747.838
  CI (99.9%): [1536827.280, 1543171.463] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countBy  thrpt   30  1539999.372 ± 3172.091  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 236139.184 ops/s
# Warmup Iteration   2: 477501.117 ops/s
# Warmup Iteration   3: 530264.379 ops/s
# Warmup Iteration   4: 533551.805 ops/s
# Warmup Iteration   5: 442464.018 ops/s
# Warmup Iteration   6: 535740.080 ops/s
# Warmup Iteration   7: 535798.283 ops/s
# Warmup Iteration   8: 535368.346 ops/s
# Warmup Iteration   9: 534944.330 ops/s
# Warmup Iteration  10: 535908.894 ops/s
# Warmup Iteration  11: 533262.370 ops/s
# Warmup Iteration  12: 534882.359 ops/s
# Warmup Iteration  13: 534518.638 ops/s
# Warmup Iteration  14: 534396.952 ops/s
# Warmup Iteration  15: 533652.191 ops/s
# Warmup Iteration  16: 533887.267 ops/s
# Warmup Iteration  17: 534922.965 ops/s
# Warmup Iteration  18: 533940.805 ops/s
# Warmup Iteration  19: 533952.447 ops/s
# Warmup Iteration  20: 534924.439 ops/s
# Warmup Iteration  21: 535775.342 ops/s
# Warmup Iteration  22: 533970.415 ops/s
# Warmup Iteration  23: 535996.232 ops/s
# Warmup Iteration  24: 534269.521 ops/s
# Warmup Iteration  25: 534072.308 ops/s
# Warmup Iteration  26: 535953.813 ops/s
# Warmup Iteration  27: 534953.809 ops/s
# Warmup Iteration  28: 536076.349 ops/s
# Warmup Iteration  29: 533200.167 ops/s
# Warmup Iteration  30: 536249.219 ops/s
Iteration   1: 533767.813 ops/s
Iteration   2: 534613.594 ops/s
Iteration   3: 534948.268 ops/s
Iteration   4: 533442.912 ops/s
Iteration   5: 532738.306 ops/s
Iteration   6: 533476.754 ops/s
Iteration   7: 535412.103 ops/s
Iteration   8: 531041.488 ops/s
Iteration   9: 534946.434 ops/s
Iteration  10: 533227.782 ops/s
Iteration  11: 534675.089 ops/s
Iteration  12: 533811.098 ops/s
Iteration  13: 534003.047 ops/s
Iteration  14: 534097.874 ops/s
Iteration  15: 538354.653 ops/s
Iteration  16: 535963.380 ops/s
Iteration  17: 534735.504 ops/s
Iteration  18: 533243.297 ops/s
Iteration  19: 534026.921 ops/s
Iteration  20: 533191.401 ops/s
Iteration  21: 535362.129 ops/s
Iteration  22: 535004.042 ops/s
Iteration  23: 533218.616 ops/s
Iteration  24: 534195.830 ops/s
Iteration  25: 532715.759 ops/s
Iteration  26: 533692.885 ops/s
Iteration  27: 535518.327 ops/s
Iteration  28: 534089.005 ops/s
Iteration  29: 533994.344 ops/s
Iteration  30: 536048.046 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByEach":
  534251.890 ±(99.9%) 883.324 ops/s [Average]
  (min, avg, max) = (531041.488, 534251.890, 538354.653), stdev = 1322.117
  CI (99.9%): [533368.567, 535135.214] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByEach  thrpt   30  534251.890 ± 883.324  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 671621.687 ops/s
# Warmup Iteration   2: 1328836.326 ops/s
# Warmup Iteration   3: 1473338.467 ops/s
# Warmup Iteration   4: 1480477.629 ops/s
# Warmup Iteration   5: 1228699.776 ops/s
# Warmup Iteration   6: 1491701.085 ops/s
# Warmup Iteration   7: 1480655.834 ops/s
# Warmup Iteration   8: 1483753.055 ops/s
# Warmup Iteration   9: 1487727.788 ops/s
# Warmup Iteration  10: 1479702.542 ops/s
# Warmup Iteration  11: 1485489.863 ops/s
# Warmup Iteration  12: 1490809.753 ops/s
# Warmup Iteration  13: 1489227.901 ops/s
# Warmup Iteration  14: 1488370.510 ops/s
# Warmup Iteration  15: 1487079.327 ops/s
# Warmup Iteration  16: 1493439.685 ops/s
# Warmup Iteration  17: 1485214.119 ops/s
# Warmup Iteration  18: 1490676.114 ops/s
# Warmup Iteration  19: 1493294.765 ops/s
# Warmup Iteration  20: 1489603.867 ops/s
# Warmup Iteration  21: 1493904.972 ops/s
# Warmup Iteration  22: 1494068.984 ops/s
# Warmup Iteration  23: 1488488.165 ops/s
# Warmup Iteration  24: 1491379.332 ops/s
# Warmup Iteration  25: 1491028.405 ops/s
# Warmup Iteration  26: 1490151.023 ops/s
# Warmup Iteration  27: 1491507.317 ops/s
# Warmup Iteration  28: 1491247.168 ops/s
# Warmup Iteration  29: 1490097.005 ops/s
# Warmup Iteration  30: 1489545.361 ops/s
Iteration   1: 1485330.396 ops/s
Iteration   2: 1490620.123 ops/s
Iteration   3: 1491463.672 ops/s
Iteration   4: 1487776.068 ops/s
Iteration   5: 1491218.827 ops/s
Iteration   6: 1489122.461 ops/s
Iteration   7: 1481529.824 ops/s
Iteration   8: 1494846.003 ops/s
Iteration   9: 1485576.801 ops/s
Iteration  10: 1492582.000 ops/s
Iteration  11: 1492248.394 ops/s
Iteration  12: 1487219.535 ops/s
Iteration  13: 1490318.834 ops/s
Iteration  14: 1486525.367 ops/s
Iteration  15: 1486652.236 ops/s
Iteration  16: 1489080.072 ops/s
Iteration  17: 1491913.730 ops/s
Iteration  18: 1487416.445 ops/s
Iteration  19: 1493206.153 ops/s
Iteration  20: 1487882.437 ops/s
Iteration  21: 1486699.773 ops/s
Iteration  22: 1487496.041 ops/s
Iteration  23: 1488055.832 ops/s
Iteration  24: 1489447.108 ops/s
Iteration  25: 1490540.275 ops/s
Iteration  26: 1492643.571 ops/s
Iteration  27: 1486996.776 ops/s
Iteration  28: 1484347.994 ops/s
Iteration  29: 1494044.429 ops/s
Iteration  30: 1492391.071 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByWith":
  1489173.075 ±(99.9%) 2098.725 ops/s [Average]
  (min, avg, max) = (1481529.824, 1489173.075, 1494846.003), stdev = 3141.272
  CI (99.9%): [1487074.350, 1491271.799] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countByWith  thrpt   30  1489173.075 ± 2098.725  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1710916.590 ops/s
# Warmup Iteration   2: 4115800.775 ops/s
# Warmup Iteration   3: 4270323.017 ops/s
# Warmup Iteration   4: 3509312.998 ops/s
# Warmup Iteration   5: 4263451.350 ops/s
# Warmup Iteration   6: 4272410.847 ops/s
# Warmup Iteration   7: 4280512.145 ops/s
# Warmup Iteration   8: 4261329.408 ops/s
# Warmup Iteration   9: 4253913.638 ops/s
# Warmup Iteration  10: 4273212.537 ops/s
# Warmup Iteration  11: 4276321.767 ops/s
# Warmup Iteration  12: 4258826.849 ops/s
# Warmup Iteration  13: 4265573.201 ops/s
# Warmup Iteration  14: 4263367.916 ops/s
# Warmup Iteration  15: 4257600.867 ops/s
# Warmup Iteration  16: 4264853.916 ops/s
# Warmup Iteration  17: 4260257.381 ops/s
# Warmup Iteration  18: 4253229.127 ops/s
# Warmup Iteration  19: 4246559.942 ops/s
# Warmup Iteration  20: 4256999.687 ops/s
# Warmup Iteration  21: 4253283.653 ops/s
# Warmup Iteration  22: 4238732.266 ops/s
# Warmup Iteration  23: 4258087.945 ops/s
# Warmup Iteration  24: 4254630.808 ops/s
# Warmup Iteration  25: 4256496.575 ops/s
# Warmup Iteration  26: 4253387.835 ops/s
# Warmup Iteration  27: 4260605.810 ops/s
# Warmup Iteration  28: 4251206.279 ops/s
# Warmup Iteration  29: 4231464.008 ops/s
# Warmup Iteration  30: 4259361.370 ops/s
Iteration   1: 4248571.677 ops/s
Iteration   2: 4250369.221 ops/s
Iteration   3: 4236810.347 ops/s
Iteration   4: 4242780.998 ops/s
Iteration   5: 4242235.126 ops/s
Iteration   6: 4260336.836 ops/s
Iteration   7: 4238402.816 ops/s
Iteration   8: 4252329.400 ops/s
Iteration   9: 4215904.360 ops/s
Iteration  10: 4215730.776 ops/s
Iteration  11: 4245216.264 ops/s
Iteration  12: 4253822.439 ops/s
Iteration  13: 4259234.692 ops/s
Iteration  14: 4256630.246 ops/s
Iteration  15: 4252708.971 ops/s
Iteration  16: 4235498.636 ops/s
Iteration  17: 4248111.322 ops/s
Iteration  18: 4243336.142 ops/s
Iteration  19: 4256475.569 ops/s
Iteration  20: 4251308.388 ops/s
Iteration  21: 4262434.114 ops/s
Iteration  22: 4242725.722 ops/s
Iteration  23: 4252801.906 ops/s
Iteration  24: 4228609.042 ops/s
Iteration  25: 4243486.721 ops/s
Iteration  26: 4252737.849 ops/s
Iteration  27: 4248830.701 ops/s
Iteration  28: 4245517.884 ops/s
Iteration  29: 4251745.871 ops/s
Iteration  30: 4241729.148 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countWith":
  4245881.106 ±(99.9%) 7500.589 ops/s [Average]
  (min, avg, max) = (4215730.776, 4245881.106, 4262434.114), stdev = 11226.529
  CI (99.9%): [4238380.517, 4253381.695] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_countWith  thrpt   30  4245881.106 ± 7500.589  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 661146.517 ops/s
# Warmup Iteration   2: 1422000.667 ops/s
# Warmup Iteration   3: 1519677.907 ops/s
# Warmup Iteration   4: 1521315.531 ops/s
# Warmup Iteration   5: 1256468.677 ops/s
# Warmup Iteration   6: 1529967.533 ops/s
# Warmup Iteration   7: 1526299.965 ops/s
# Warmup Iteration   8: 1517888.546 ops/s
# Warmup Iteration   9: 1527282.456 ops/s
# Warmup Iteration  10: 1527904.615 ops/s
# Warmup Iteration  11: 1527242.992 ops/s
# Warmup Iteration  12: 1527679.818 ops/s
# Warmup Iteration  13: 1527214.339 ops/s
# Warmup Iteration  14: 1528566.119 ops/s
# Warmup Iteration  15: 1524296.351 ops/s
# Warmup Iteration  16: 1528349.790 ops/s
# Warmup Iteration  17: 1527784.839 ops/s
# Warmup Iteration  18: 1536832.942 ops/s
# Warmup Iteration  19: 1532685.821 ops/s
# Warmup Iteration  20: 1529820.663 ops/s
# Warmup Iteration  21: 1533726.804 ops/s
# Warmup Iteration  22: 1534435.760 ops/s
# Warmup Iteration  23: 1532687.045 ops/s
# Warmup Iteration  24: 1527941.473 ops/s
# Warmup Iteration  25: 1534371.610 ops/s
# Warmup Iteration  26: 1530406.164 ops/s
# Warmup Iteration  27: 1523348.500 ops/s
# Warmup Iteration  28: 1529000.675 ops/s
# Warmup Iteration  29: 1534478.159 ops/s
# Warmup Iteration  30: 1527036.074 ops/s
Iteration   1: 1526994.170 ops/s
Iteration   2: 1529818.284 ops/s
Iteration   3: 1534143.828 ops/s
Iteration   4: 1532981.615 ops/s
Iteration   5: 1542782.156 ops/s
Iteration   6: 1525664.820 ops/s
Iteration   7: 1525438.429 ops/s
Iteration   8: 1531841.612 ops/s
Iteration   9: 1534178.048 ops/s
Iteration  10: 1531150.178 ops/s
Iteration  11: 1533051.157 ops/s
Iteration  12: 1529870.236 ops/s
Iteration  13: 1533112.304 ops/s
Iteration  14: 1521117.041 ops/s
Iteration  15: 1535177.543 ops/s
Iteration  16: 1528574.176 ops/s
Iteration  17: 1529903.660 ops/s
Iteration  18: 1534201.327 ops/s
Iteration  19: 1534360.288 ops/s
Iteration  20: 1526507.114 ops/s
Iteration  21: 1534797.848 ops/s
Iteration  22: 1531041.073 ops/s
Iteration  23: 1535247.518 ops/s
Iteration  24: 1529648.545 ops/s
Iteration  25: 1529135.774 ops/s
Iteration  26: 1539674.282 ops/s
Iteration  27: 1526661.846 ops/s
Iteration  28: 1526201.467 ops/s
Iteration  29: 1532023.026 ops/s
Iteration  30: 1537418.531 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detect":
  1531423.930 ±(99.9%) 3053.854 ops/s [Average]
  (min, avg, max) = (1521117.041, 1531423.930, 1542782.156), stdev = 4570.865
  CI (99.9%): [1528370.076, 1534477.784] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detect  thrpt   30  1531423.930 ± 3053.854  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 638496.563 ops/s
# Warmup Iteration   2: 1307504.428 ops/s
# Warmup Iteration   3: 1401189.184 ops/s
# Warmup Iteration   4: 1410117.174 ops/s
# Warmup Iteration   5: 1165932.147 ops/s
# Warmup Iteration   6: 1418236.153 ops/s
# Warmup Iteration   7: 1414900.904 ops/s
# Warmup Iteration   8: 1411923.204 ops/s
# Warmup Iteration   9: 1410338.787 ops/s
# Warmup Iteration  10: 1415357.314 ops/s
# Warmup Iteration  11: 1412311.214 ops/s
# Warmup Iteration  12: 1415629.805 ops/s
# Warmup Iteration  13: 1418829.759 ops/s
# Warmup Iteration  14: 1416595.812 ops/s
# Warmup Iteration  15: 1415382.440 ops/s
# Warmup Iteration  16: 1410709.519 ops/s
# Warmup Iteration  17: 1409064.600 ops/s
# Warmup Iteration  18: 1413019.340 ops/s
# Warmup Iteration  19: 1409918.606 ops/s
# Warmup Iteration  20: 1419682.037 ops/s
# Warmup Iteration  21: 1415094.550 ops/s
# Warmup Iteration  22: 1413785.364 ops/s
# Warmup Iteration  23: 1411153.096 ops/s
# Warmup Iteration  24: 1413347.708 ops/s
# Warmup Iteration  25: 1415468.542 ops/s
# Warmup Iteration  26: 1415295.364 ops/s
# Warmup Iteration  27: 1407704.543 ops/s
# Warmup Iteration  28: 1416116.390 ops/s
# Warmup Iteration  29: 1410370.565 ops/s
# Warmup Iteration  30: 1413207.621 ops/s
Iteration   1: 1419931.140 ops/s
Iteration   2: 1412679.916 ops/s
Iteration   3: 1409003.598 ops/s
Iteration   4: 1405072.007 ops/s
Iteration   5: 1414358.498 ops/s
Iteration   6: 1419278.501 ops/s
Iteration   7: 1417803.156 ops/s
Iteration   8: 1412376.039 ops/s
Iteration   9: 1412300.997 ops/s
Iteration  10: 1417616.147 ops/s
Iteration  11: 1411563.793 ops/s
Iteration  12: 1414121.168 ops/s
Iteration  13: 1417259.467 ops/s
Iteration  14: 1416213.951 ops/s
Iteration  15: 1416255.740 ops/s
Iteration  16: 1415340.890 ops/s
Iteration  17: 1409658.120 ops/s
Iteration  18: 1413071.178 ops/s
Iteration  19: 1414039.535 ops/s
Iteration  20: 1417266.732 ops/s
Iteration  21: 1413577.436 ops/s
Iteration  22: 1416962.206 ops/s
Iteration  23: 1412440.468 ops/s
Iteration  24: 1409026.210 ops/s
Iteration  25: 1409538.754 ops/s
Iteration  26: 1417159.999 ops/s
Iteration  27: 1415753.191 ops/s
Iteration  28: 1417186.894 ops/s
Iteration  29: 1414755.109 ops/s
Iteration  30: 1417925.156 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone":
  1414317.867 ±(99.9%) 2332.916 ops/s [Average]
  (min, avg, max) = (1405072.007, 1414317.867, 1419931.140), stdev = 3491.800
  CI (99.9%): [1411984.950, 1416650.783] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectIfNone  thrpt   30  1414317.867 ± 2332.916  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 259004.158 ops/s
# Warmup Iteration   2: 377218.353 ops/s
# Warmup Iteration   3: 453074.515 ops/s
# Warmup Iteration   4: 449928.244 ops/s
# Warmup Iteration   5: 454215.594 ops/s
# Warmup Iteration   6: 454937.286 ops/s
# Warmup Iteration   7: 395459.620 ops/s
# Warmup Iteration   8: 441060.135 ops/s
# Warmup Iteration   9: 455782.659 ops/s
# Warmup Iteration  10: 453942.341 ops/s
# Warmup Iteration  11: 455137.937 ops/s
# Warmup Iteration  12: 455938.172 ops/s
# Warmup Iteration  13: 457065.699 ops/s
# Warmup Iteration  14: 453954.654 ops/s
# Warmup Iteration  15: 455764.192 ops/s
# Warmup Iteration  16: 455932.963 ops/s
# Warmup Iteration  17: 465939.536 ops/s
# Warmup Iteration  18: 468039.422 ops/s
# Warmup Iteration  19: 466602.695 ops/s
# Warmup Iteration  20: 466422.161 ops/s
# Warmup Iteration  21: 467373.860 ops/s
# Warmup Iteration  22: 467648.915 ops/s
# Warmup Iteration  23: 467466.425 ops/s
# Warmup Iteration  24: 466099.342 ops/s
# Warmup Iteration  25: 469023.101 ops/s
# Warmup Iteration  26: 467288.628 ops/s
# Warmup Iteration  27: 466533.827 ops/s
# Warmup Iteration  28: 466616.411 ops/s
# Warmup Iteration  29: 467518.555 ops/s
# Warmup Iteration  30: 467030.168 ops/s
Iteration   1: 466713.108 ops/s
Iteration   2: 466207.614 ops/s
Iteration   3: 468590.055 ops/s
Iteration   4: 468718.037 ops/s
Iteration   5: 468135.262 ops/s
Iteration   6: 468631.658 ops/s
Iteration   7: 466457.788 ops/s
Iteration   8: 467382.610 ops/s
Iteration   9: 467804.866 ops/s
Iteration  10: 467130.442 ops/s
Iteration  11: 467195.591 ops/s
Iteration  12: 466063.268 ops/s
Iteration  13: 468952.957 ops/s
Iteration  14: 466548.119 ops/s
Iteration  15: 469728.150 ops/s
Iteration  16: 467099.937 ops/s
Iteration  17: 467092.922 ops/s
Iteration  18: 467111.218 ops/s
Iteration  19: 469657.558 ops/s
Iteration  20: 467874.520 ops/s
Iteration  21: 467234.290 ops/s
Iteration  22: 467484.969 ops/s
Iteration  23: 466271.747 ops/s
Iteration  24: 467250.876 ops/s
Iteration  25: 465570.654 ops/s
Iteration  26: 467605.019 ops/s
Iteration  27: 466845.906 ops/s
Iteration  28: 467874.314 ops/s
Iteration  29: 466112.306 ops/s
Iteration  30: 467192.159 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectOptional":
  467417.931 ±(99.9%) 692.405 ops/s [Average]
  (min, avg, max) = (465570.654, 467417.931, 469728.150), stdev = 1036.359
  CI (99.9%): [466725.526, 468110.336] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectOptional  thrpt   30  467417.931 ± 692.405  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 641111.822 ops/s
# Warmup Iteration   2: 1351615.582 ops/s
# Warmup Iteration   3: 1450262.540 ops/s
# Warmup Iteration   4: 1456044.658 ops/s
# Warmup Iteration   5: 1199170.676 ops/s
# Warmup Iteration   6: 1456429.770 ops/s
# Warmup Iteration   7: 1456035.110 ops/s
# Warmup Iteration   8: 1453219.909 ops/s
# Warmup Iteration   9: 1458828.588 ops/s
# Warmup Iteration  10: 1456792.867 ops/s
# Warmup Iteration  11: 1457101.155 ops/s
# Warmup Iteration  12: 1459745.457 ops/s
# Warmup Iteration  13: 1459909.417 ops/s
# Warmup Iteration  14: 1456514.373 ops/s
# Warmup Iteration  15: 1461971.068 ops/s
# Warmup Iteration  16: 1457174.930 ops/s
# Warmup Iteration  17: 1455455.274 ops/s
# Warmup Iteration  18: 1458298.571 ops/s
# Warmup Iteration  19: 1456157.537 ops/s
# Warmup Iteration  20: 1456591.075 ops/s
# Warmup Iteration  21: 1458901.984 ops/s
# Warmup Iteration  22: 1453870.190 ops/s
# Warmup Iteration  23: 1459607.215 ops/s
# Warmup Iteration  24: 1455165.655 ops/s
# Warmup Iteration  25: 1456083.222 ops/s
# Warmup Iteration  26: 1454514.422 ops/s
# Warmup Iteration  27: 1457089.606 ops/s
# Warmup Iteration  28: 1455514.830 ops/s
# Warmup Iteration  29: 1457100.450 ops/s
# Warmup Iteration  30: 1457425.042 ops/s
Iteration   1: 1459307.190 ops/s
Iteration   2: 1466118.850 ops/s
Iteration   3: 1454334.177 ops/s
Iteration   4: 1459923.012 ops/s
Iteration   5: 1454005.801 ops/s
Iteration   6: 1457870.825 ops/s
Iteration   7: 1454941.269 ops/s
Iteration   8: 1459328.777 ops/s
Iteration   9: 1454208.672 ops/s
Iteration  10: 1452904.197 ops/s
Iteration  11: 1454241.426 ops/s
Iteration  12: 1458849.634 ops/s
Iteration  13: 1459143.991 ops/s
Iteration  14: 1458049.496 ops/s
Iteration  15: 1459245.064 ops/s
Iteration  16: 1460939.927 ops/s
Iteration  17: 1461327.629 ops/s
Iteration  18: 1453664.220 ops/s
Iteration  19: 1456824.556 ops/s
Iteration  20: 1451074.595 ops/s
Iteration  21: 1453388.288 ops/s
Iteration  22: 1459617.925 ops/s
Iteration  23: 1458262.121 ops/s
Iteration  24: 1452205.618 ops/s
Iteration  25: 1455520.389 ops/s
Iteration  26: 1464672.327 ops/s
Iteration  27: 1454969.490 ops/s
Iteration  28: 1452646.729 ops/s
Iteration  29: 1455958.443 ops/s
Iteration  30: 1459694.548 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWith":
  1457107.973 ±(99.9%) 2440.558 ops/s [Average]
  (min, avg, max) = (1451074.595, 1457107.973, 1466118.850), stdev = 3652.912
  CI (99.9%): [1454667.415, 1459548.531] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWith  thrpt   30  1457107.973 ± 2440.558  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 633433.044 ops/s
# Warmup Iteration   2: 1275263.354 ops/s
# Warmup Iteration   3: 1367645.673 ops/s
# Warmup Iteration   4: 1379101.730 ops/s
# Warmup Iteration   5: 1143149.827 ops/s
# Warmup Iteration   6: 1370841.459 ops/s
# Warmup Iteration   7: 1365360.835 ops/s
# Warmup Iteration   8: 1374287.740 ops/s
# Warmup Iteration   9: 1370385.943 ops/s
# Warmup Iteration  10: 1368601.997 ops/s
# Warmup Iteration  11: 1373493.485 ops/s
# Warmup Iteration  12: 1368829.739 ops/s
# Warmup Iteration  13: 1366750.568 ops/s
# Warmup Iteration  14: 1370499.237 ops/s
# Warmup Iteration  15: 1365223.849 ops/s
# Warmup Iteration  16: 1367664.826 ops/s
# Warmup Iteration  17: 1380553.213 ops/s
# Warmup Iteration  18: 1376443.184 ops/s
# Warmup Iteration  19: 1381653.987 ops/s
# Warmup Iteration  20: 1379046.377 ops/s
# Warmup Iteration  21: 1379389.829 ops/s
# Warmup Iteration  22: 1378701.089 ops/s
# Warmup Iteration  23: 1378009.377 ops/s
# Warmup Iteration  24: 1378453.700 ops/s
# Warmup Iteration  25: 1377891.482 ops/s
# Warmup Iteration  26: 1377705.800 ops/s
# Warmup Iteration  27: 1376586.344 ops/s
# Warmup Iteration  28: 1378349.514 ops/s
# Warmup Iteration  29: 1373296.263 ops/s
# Warmup Iteration  30: 1376859.492 ops/s
Iteration   1: 1377776.053 ops/s
Iteration   2: 1371619.606 ops/s
Iteration   3: 1380050.655 ops/s
Iteration   4: 1378814.512 ops/s
Iteration   5: 1376285.886 ops/s
Iteration   6: 1380427.512 ops/s
Iteration   7: 1377134.702 ops/s
Iteration   8: 1379910.622 ops/s
Iteration   9: 1382131.486 ops/s
Iteration  10: 1384278.517 ops/s
Iteration  11: 1378602.145 ops/s
Iteration  12: 1380446.162 ops/s
Iteration  13: 1381192.798 ops/s
Iteration  14: 1374960.298 ops/s
Iteration  15: 1382160.136 ops/s
Iteration  16: 1381198.875 ops/s
Iteration  17: 1385648.255 ops/s
Iteration  18: 1381641.217 ops/s
Iteration  19: 1381087.256 ops/s
Iteration  20: 1377666.759 ops/s
Iteration  21: 1377539.327 ops/s
Iteration  22: 1383881.899 ops/s
Iteration  23: 1384077.327 ops/s
Iteration  24: 1378250.882 ops/s
Iteration  25: 1380134.022 ops/s
Iteration  26: 1377594.792 ops/s
Iteration  27: 1377683.346 ops/s
Iteration  28: 1381361.880 ops/s
Iteration  29: 1377469.764 ops/s
Iteration  30: 1384346.731 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock":
  1379845.781 ±(99.9%) 2062.417 ops/s [Average]
  (min, avg, max) = (1371619.606, 1379845.781, 1385648.255), stdev = 3086.930
  CI (99.9%): [1377783.363, 1381908.198] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithIfNoneBlock  thrpt   30  1379845.781 ± 2062.417  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 252492.954 ops/s
# Warmup Iteration   2: 361907.116 ops/s
# Warmup Iteration   3: 439020.354 ops/s
# Warmup Iteration   4: 436790.470 ops/s
# Warmup Iteration   5: 437914.536 ops/s
# Warmup Iteration   6: 436817.207 ops/s
# Warmup Iteration   7: 412848.421 ops/s
# Warmup Iteration   8: 391531.531 ops/s
# Warmup Iteration   9: 438344.964 ops/s
# Warmup Iteration  10: 440124.007 ops/s
# Warmup Iteration  11: 439559.798 ops/s
# Warmup Iteration  12: 440246.349 ops/s
# Warmup Iteration  13: 438497.942 ops/s
# Warmup Iteration  14: 438761.727 ops/s
# Warmup Iteration  15: 439166.604 ops/s
# Warmup Iteration  16: 439460.837 ops/s
# Warmup Iteration  17: 450517.918 ops/s
# Warmup Iteration  18: 451048.821 ops/s
# Warmup Iteration  19: 449544.059 ops/s
# Warmup Iteration  20: 450031.925 ops/s
# Warmup Iteration  21: 451326.630 ops/s
# Warmup Iteration  22: 450140.191 ops/s
# Warmup Iteration  23: 451313.809 ops/s
# Warmup Iteration  24: 450892.770 ops/s
# Warmup Iteration  25: 449858.076 ops/s
# Warmup Iteration  26: 451042.055 ops/s
# Warmup Iteration  27: 451239.959 ops/s
# Warmup Iteration  28: 451107.758 ops/s
# Warmup Iteration  29: 449776.554 ops/s
# Warmup Iteration  30: 451100.528 ops/s
Iteration   1: 448510.059 ops/s
Iteration   2: 449269.908 ops/s
Iteration   3: 451036.370 ops/s
Iteration   4: 450677.544 ops/s
Iteration   5: 450722.001 ops/s
Iteration   6: 452815.157 ops/s
Iteration   7: 451801.029 ops/s
Iteration   8: 450635.938 ops/s
Iteration   9: 449714.433 ops/s
Iteration  10: 451037.779 ops/s
Iteration  11: 451302.825 ops/s
Iteration  12: 450467.028 ops/s
Iteration  13: 451550.553 ops/s
Iteration  14: 450199.889 ops/s
Iteration  15: 452154.817 ops/s
Iteration  16: 449363.052 ops/s
Iteration  17: 448792.323 ops/s
Iteration  18: 450199.526 ops/s
Iteration  19: 450523.609 ops/s
Iteration  20: 450822.405 ops/s
Iteration  21: 449927.302 ops/s
Iteration  22: 451724.493 ops/s
Iteration  23: 449387.237 ops/s
Iteration  24: 450971.856 ops/s
Iteration  25: 449506.234 ops/s
Iteration  26: 448784.920 ops/s
Iteration  27: 449344.793 ops/s
Iteration  28: 451177.580 ops/s
Iteration  29: 449194.562 ops/s
Iteration  30: 449025.543 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional":
  450354.692 ±(99.9%) 734.568 ops/s [Average]
  (min, avg, max) = (448510.059, 450354.692, 452815.157), stdev = 1099.467
  CI (99.9%): [449620.124, 451089.260] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_detectWithOptional  thrpt   30  450354.692 ± 734.568  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_distinctView$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_distinctView

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 612612.298 ops/s
# Warmup Iteration   2: 697453.537 ops/s
# Warmup Iteration   3: 899257.125 ops/s
# Warmup Iteration   4: 897475.094 ops/s
# Warmup Iteration   5: 892583.693 ops/s
# Warmup Iteration   6: 897605.517 ops/s
# Warmup Iteration   7: 896259.417 ops/s
# Warmup Iteration   8: 899271.083 ops/s
# Warmup Iteration   9: 896929.126 ops/s
# Warmup Iteration  10: 822083.149 ops/s
# Warmup Iteration  11: 835323.096 ops/s
# Warmup Iteration  12: 899652.569 ops/s
# Warmup Iteration  13: 899173.724 ops/s
# Warmup Iteration  14: 899527.883 ops/s
# Warmup Iteration  15: 899213.377 ops/s
# Warmup Iteration  16: 896920.362 ops/s
# Warmup Iteration  17: 944347.591 ops/s
# Warmup Iteration  18: 945536.302 ops/s
# Warmup Iteration  19: 943885.919 ops/s
# Warmup Iteration  20: 945347.007 ops/s
# Warmup Iteration  21: 945839.059 ops/s
# Warmup Iteration  22: 942962.431 ops/s
# Warmup Iteration  23: 943496.088 ops/s
# Warmup Iteration  24: 942652.502 ops/s
# Warmup Iteration  25: 947139.118 ops/s
# Warmup Iteration  26: 943237.699 ops/s
# Warmup Iteration  27: 941424.717 ops/s
# Warmup Iteration  28: 941076.581 ops/s
# Warmup Iteration  29: 944781.019 ops/s
# Warmup Iteration  30: 942486.377 ops/s
Iteration   1: 946864.726 ops/s
Iteration   2: 936301.734 ops/s
Iteration   3: 942194.560 ops/s
Iteration   4: 944067.330 ops/s
Iteration   5: 941740.708 ops/s
Iteration   6: 940359.375 ops/s
Iteration   7: 942844.473 ops/s
Iteration   8: 944663.060 ops/s
Iteration   9: 945930.774 ops/s
Iteration  10: 946856.665 ops/s
Iteration  11: 946753.713 ops/s
Iteration  12: 946254.379 ops/s
Iteration  13: 943187.023 ops/s
Iteration  14: 947515.186 ops/s
Iteration  15: 944421.058 ops/s
Iteration  16: 947281.071 ops/s
Iteration  17: 943136.588 ops/s
Iteration  18: 945866.160 ops/s
Iteration  19: 946901.980 ops/s
Iteration  20: 943950.403 ops/s
Iteration  21: 943506.346 ops/s
Iteration  22: 937532.896 ops/s
Iteration  23: 941855.396 ops/s
Iteration  24: 946038.421 ops/s
Iteration  25: 944966.141 ops/s
Iteration  26: 941525.030 ops/s
Iteration  27: 944698.265 ops/s
Iteration  28: 941185.930 ops/s
Iteration  29: 948164.549 ops/s
Iteration  30: 943656.329 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_distinctView":
  944007.342 ±(99.9%) 1905.042 ops/s [Average]
  (min, avg, max) = (936301.734, 944007.342, 948164.549), stdev = 2851.378
  CI (99.9%): [942102.300, 945912.385] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_distinctView  thrpt   30  944007.342 ± 1905.042  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1858281.340 ops/s
# Warmup Iteration   2: 3858757.508 ops/s
# Warmup Iteration   3: 3332719.486 ops/s
# Warmup Iteration   4: 3883746.684 ops/s
# Warmup Iteration   5: 3884901.751 ops/s
# Warmup Iteration   6: 3890274.833 ops/s
# Warmup Iteration   7: 3891876.996 ops/s
# Warmup Iteration   8: 3879003.862 ops/s
# Warmup Iteration   9: 3882334.247 ops/s
# Warmup Iteration  10: 3898011.695 ops/s
# Warmup Iteration  11: 3888306.263 ops/s
# Warmup Iteration  12: 3886293.961 ops/s
# Warmup Iteration  13: 3901286.201 ops/s
# Warmup Iteration  14: 3904753.566 ops/s
# Warmup Iteration  15: 3882992.444 ops/s
# Warmup Iteration  16: 3891914.834 ops/s
# Warmup Iteration  17: 3878827.033 ops/s
# Warmup Iteration  18: 3878667.748 ops/s
# Warmup Iteration  19: 3885613.353 ops/s
# Warmup Iteration  20: 3883882.163 ops/s
# Warmup Iteration  21: 3880727.413 ops/s
# Warmup Iteration  22: 3879880.077 ops/s
# Warmup Iteration  23: 3896976.867 ops/s
# Warmup Iteration  24: 3883537.741 ops/s
# Warmup Iteration  25: 3882240.575 ops/s
# Warmup Iteration  26: 3884137.488 ops/s
# Warmup Iteration  27: 3904797.235 ops/s
# Warmup Iteration  28: 3863251.251 ops/s
# Warmup Iteration  29: 3872082.033 ops/s
# Warmup Iteration  30: 3882871.661 ops/s
Iteration   1: 3873154.194 ops/s
Iteration   2: 3868235.473 ops/s
Iteration   3: 3861919.655 ops/s
Iteration   4: 3897772.840 ops/s
Iteration   5: 3895275.459 ops/s
Iteration   6: 3893808.405 ops/s
Iteration   7: 3893604.635 ops/s
Iteration   8: 3893178.648 ops/s
Iteration   9: 3868090.698 ops/s
Iteration  10: 3879027.140 ops/s
Iteration  11: 3885942.542 ops/s
Iteration  12: 3895030.933 ops/s
Iteration  13: 3873274.931 ops/s
Iteration  14: 3876594.538 ops/s
Iteration  15: 3882856.919 ops/s
Iteration  16: 3869436.596 ops/s
Iteration  17: 3849968.624 ops/s
Iteration  18: 3889038.099 ops/s
Iteration  19: 3881989.840 ops/s
Iteration  20: 3897737.856 ops/s
Iteration  21: 3891069.934 ops/s
Iteration  22: 3875006.053 ops/s
Iteration  23: 3867138.765 ops/s
Iteration  24: 3849491.810 ops/s
Iteration  25: 3873418.895 ops/s
Iteration  26: 3862103.021 ops/s
Iteration  27: 3874249.464 ops/s
Iteration  28: 3847065.330 ops/s
Iteration  29: 3892436.435 ops/s
Iteration  30: 3871175.730 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_empty":
  3877636.449 ±(99.9%) 9834.509 ops/s [Average]
  (min, avg, max) = (3847065.330, 3877636.449, 3897772.840), stdev = 14719.831
  CI (99.9%): [3867801.940, 3887470.958] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_empty  thrpt   30  3877636.449 ± 9834.509  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 356641.906 ops/s
# Warmup Iteration   2: 832950.250 ops/s
# Warmup Iteration   3: 864022.910 ops/s
# Warmup Iteration   4: 782982.209 ops/s
# Warmup Iteration   5: 812376.276 ops/s
# Warmup Iteration   6: 870149.543 ops/s
# Warmup Iteration   7: 870257.591 ops/s
# Warmup Iteration   8: 867178.148 ops/s
# Warmup Iteration   9: 869509.085 ops/s
# Warmup Iteration  10: 869689.221 ops/s
# Warmup Iteration  11: 866795.336 ops/s
# Warmup Iteration  12: 867330.270 ops/s
# Warmup Iteration  13: 863919.157 ops/s
# Warmup Iteration  14: 868422.510 ops/s
# Warmup Iteration  15: 870915.625 ops/s
# Warmup Iteration  16: 867309.898 ops/s
# Warmup Iteration  17: 863045.452 ops/s
# Warmup Iteration  18: 869233.556 ops/s
# Warmup Iteration  19: 868154.045 ops/s
# Warmup Iteration  20: 865977.609 ops/s
# Warmup Iteration  21: 866313.756 ops/s
# Warmup Iteration  22: 869402.159 ops/s
# Warmup Iteration  23: 866305.877 ops/s
# Warmup Iteration  24: 868797.634 ops/s
# Warmup Iteration  25: 867977.575 ops/s
# Warmup Iteration  26: 871052.588 ops/s
# Warmup Iteration  27: 865318.837 ops/s
# Warmup Iteration  28: 868489.200 ops/s
# Warmup Iteration  29: 867642.482 ops/s
# Warmup Iteration  30: 866817.582 ops/s
Iteration   1: 870920.984 ops/s
Iteration   2: 871750.290 ops/s
Iteration   3: 868125.640 ops/s
Iteration   4: 867360.615 ops/s
Iteration   5: 868518.817 ops/s
Iteration   6: 866573.987 ops/s
Iteration   7: 871146.822 ops/s
Iteration   8: 868813.832 ops/s
Iteration   9: 869346.321 ops/s
Iteration  10: 871839.913 ops/s
Iteration  11: 870593.307 ops/s
Iteration  12: 872863.030 ops/s
Iteration  13: 863954.568 ops/s
Iteration  14: 869514.119 ops/s
Iteration  15: 870452.004 ops/s
Iteration  16: 867921.901 ops/s
Iteration  17: 869818.943 ops/s
Iteration  18: 870162.379 ops/s
Iteration  19: 868091.855 ops/s
Iteration  20: 866638.195 ops/s
Iteration  21: 868710.775 ops/s
Iteration  22: 868069.278 ops/s
Iteration  23: 867946.504 ops/s
Iteration  24: 867990.938 ops/s
Iteration  25: 865605.607 ops/s
Iteration  26: 863976.785 ops/s
Iteration  27: 868400.176 ops/s
Iteration  28: 870415.912 ops/s
Iteration  29: 870402.906 ops/s
Iteration  30: 870467.674 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode":
  868879.803 ±(99.9%) 1438.386 ops/s [Average]
  (min, avg, max) = (863954.568, 868879.803, 872863.030), stdev = 2152.909
  CI (99.9%): [867441.416, 870318.189] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_equalsAndHashCode  thrpt   30  868879.803 ± 1438.386  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollect$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollect

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 387411.428 ops/s
# Warmup Iteration   2: 863845.435 ops/s
# Warmup Iteration   3: 941820.302 ops/s
# Warmup Iteration   4: 942112.354 ops/s
# Warmup Iteration   5: 777199.175 ops/s
# Warmup Iteration   6: 935597.318 ops/s
# Warmup Iteration   7: 938277.977 ops/s
# Warmup Iteration   8: 938812.914 ops/s
# Warmup Iteration   9: 945331.602 ops/s
# Warmup Iteration  10: 939098.553 ops/s
# Warmup Iteration  11: 938452.969 ops/s
# Warmup Iteration  12: 940190.812 ops/s
# Warmup Iteration  13: 945217.328 ops/s
# Warmup Iteration  14: 941408.078 ops/s
# Warmup Iteration  15: 939191.588 ops/s
# Warmup Iteration  16: 943931.129 ops/s
# Warmup Iteration  17: 940675.867 ops/s
# Warmup Iteration  18: 938616.966 ops/s
# Warmup Iteration  19: 939833.289 ops/s
# Warmup Iteration  20: 938525.966 ops/s
# Warmup Iteration  21: 939396.925 ops/s
# Warmup Iteration  22: 939165.591 ops/s
# Warmup Iteration  23: 937030.424 ops/s
# Warmup Iteration  24: 941224.383 ops/s
# Warmup Iteration  25: 934234.065 ops/s
# Warmup Iteration  26: 939424.910 ops/s
# Warmup Iteration  27: 937258.192 ops/s
# Warmup Iteration  28: 936765.034 ops/s
# Warmup Iteration  29: 942747.615 ops/s
# Warmup Iteration  30: 938711.955 ops/s
Iteration   1: 940040.136 ops/s
Iteration   2: 939315.177 ops/s
Iteration   3: 943700.873 ops/s
Iteration   4: 942359.192 ops/s
Iteration   5: 939691.638 ops/s
Iteration   6: 937879.632 ops/s
Iteration   7: 947216.026 ops/s
Iteration   8: 938884.842 ops/s
Iteration   9: 942484.282 ops/s
Iteration  10: 939035.447 ops/s
Iteration  11: 941908.773 ops/s
Iteration  12: 939196.640 ops/s
Iteration  13: 938246.686 ops/s
Iteration  14: 938335.317 ops/s
Iteration  15: 940229.239 ops/s
Iteration  16: 941450.018 ops/s
Iteration  17: 934691.234 ops/s
Iteration  18: 936791.295 ops/s
Iteration  19: 942710.111 ops/s
Iteration  20: 943567.567 ops/s
Iteration  21: 940967.198 ops/s
Iteration  22: 946765.474 ops/s
Iteration  23: 940590.585 ops/s
Iteration  24: 944651.302 ops/s
Iteration  25: 946102.580 ops/s
Iteration  26: 938608.027 ops/s
Iteration  27: 938844.954 ops/s
Iteration  28: 942711.835 ops/s
Iteration  29: 935831.732 ops/s
Iteration  30: 934848.432 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollect":
  940588.542 ±(99.9%) 2169.054 ops/s [Average]
  (min, avg, max) = (934691.234, 940588.542, 947216.026), stdev = 3246.537
  CI (99.9%): [938419.488, 942757.595] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollect  thrpt   30  940588.542 ± 2169.054  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1479410.269 ops/s
# Warmup Iteration   2: 4001777.073 ops/s
# Warmup Iteration   3: 3286552.152 ops/s
# Warmup Iteration   4: 3971400.614 ops/s
# Warmup Iteration   5: 3967442.888 ops/s
# Warmup Iteration   6: 3970829.049 ops/s
# Warmup Iteration   7: 3950587.578 ops/s
# Warmup Iteration   8: 3981822.707 ops/s
# Warmup Iteration   9: 3977484.589 ops/s
# Warmup Iteration  10: 3949961.069 ops/s
# Warmup Iteration  11: 3951482.427 ops/s
# Warmup Iteration  12: 3957537.935 ops/s
# Warmup Iteration  13: 3964022.870 ops/s
# Warmup Iteration  14: 3957968.751 ops/s
# Warmup Iteration  15: 3955559.182 ops/s
# Warmup Iteration  16: 3959245.548 ops/s
# Warmup Iteration  17: 3956053.622 ops/s
# Warmup Iteration  18: 3974425.065 ops/s
# Warmup Iteration  19: 3963860.090 ops/s
# Warmup Iteration  20: 3938036.402 ops/s
# Warmup Iteration  21: 3973162.392 ops/s
# Warmup Iteration  22: 3962572.240 ops/s
# Warmup Iteration  23: 3965959.077 ops/s
# Warmup Iteration  24: 3966398.927 ops/s
# Warmup Iteration  25: 3958803.563 ops/s
# Warmup Iteration  26: 3970593.971 ops/s
# Warmup Iteration  27: 3972314.285 ops/s
# Warmup Iteration  28: 3976907.377 ops/s
# Warmup Iteration  29: 3976802.611 ops/s
# Warmup Iteration  30: 3963638.837 ops/s
Iteration   1: 3985599.868 ops/s
Iteration   2: 3974771.978 ops/s
Iteration   3: 3972240.633 ops/s
Iteration   4: 3976869.671 ops/s
Iteration   5: 3981090.254 ops/s
Iteration   6: 3966160.214 ops/s
Iteration   7: 3974324.949 ops/s
Iteration   8: 3989117.790 ops/s
Iteration   9: 3980794.269 ops/s
Iteration  10: 3966187.107 ops/s
Iteration  11: 3969989.011 ops/s
Iteration  12: 3965189.352 ops/s
Iteration  13: 3956060.173 ops/s
Iteration  14: 3962003.183 ops/s
Iteration  15: 3980043.483 ops/s
Iteration  16: 3953524.433 ops/s
Iteration  17: 3963855.252 ops/s
Iteration  18: 3966674.675 ops/s
Iteration  19: 3956779.102 ops/s
Iteration  20: 3945345.003 ops/s
Iteration  21: 3963848.809 ops/s
Iteration  22: 3950669.637 ops/s
Iteration  23: 3959151.525 ops/s
Iteration  24: 3974992.303 ops/s
Iteration  25: 3953084.495 ops/s
Iteration  26: 3970151.368 ops/s
Iteration  27: 3943682.361 ops/s
Iteration  28: 3970352.724 ops/s
Iteration  29: 3969568.487 ops/s
Iteration  30: 3953930.307 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean":
  3966535.081 ±(99.9%) 7735.751 ops/s [Average]
  (min, avg, max) = (3943682.361, 3966535.081, 3989117.790), stdev = 11578.509
  CI (99.9%): [3958799.330, 3974270.832] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectBoolean  thrpt   30  3966535.081 ± 7735.751  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 609439.558 ops/s
# Warmup Iteration   2: 1171928.781 ops/s
# Warmup Iteration   3: 1355247.859 ops/s
# Warmup Iteration   4: 1360111.117 ops/s
# Warmup Iteration   5: 1361262.457 ops/s
# Warmup Iteration   6: 1127744.100 ops/s
# Warmup Iteration   7: 1365365.965 ops/s
# Warmup Iteration   8: 1360577.483 ops/s
# Warmup Iteration   9: 1362509.004 ops/s
# Warmup Iteration  10: 1361453.446 ops/s
# Warmup Iteration  11: 1358205.196 ops/s
# Warmup Iteration  12: 1361296.285 ops/s
# Warmup Iteration  13: 1360569.996 ops/s
# Warmup Iteration  14: 1364509.544 ops/s
# Warmup Iteration  15: 1359464.788 ops/s
# Warmup Iteration  16: 1364173.982 ops/s
# Warmup Iteration  17: 1362140.625 ops/s
# Warmup Iteration  18: 1362494.649 ops/s
# Warmup Iteration  19: 1362201.921 ops/s
# Warmup Iteration  20: 1362912.392 ops/s
# Warmup Iteration  21: 1361419.159 ops/s
# Warmup Iteration  22: 1358966.411 ops/s
# Warmup Iteration  23: 1364968.692 ops/s
# Warmup Iteration  24: 1363529.989 ops/s
# Warmup Iteration  25: 1359734.638 ops/s
# Warmup Iteration  26: 1363658.760 ops/s
# Warmup Iteration  27: 1364023.675 ops/s
# Warmup Iteration  28: 1362436.703 ops/s
# Warmup Iteration  29: 1363517.520 ops/s
# Warmup Iteration  30: 1363954.849 ops/s
Iteration   1: 1366461.042 ops/s
Iteration   2: 1363331.648 ops/s
Iteration   3: 1355334.081 ops/s
Iteration   4: 1360792.932 ops/s
Iteration   5: 1364305.742 ops/s
Iteration   6: 1361905.484 ops/s
Iteration   7: 1370894.640 ops/s
Iteration   8: 1360867.574 ops/s
Iteration   9: 1362875.993 ops/s
Iteration  10: 1361601.256 ops/s
Iteration  11: 1362054.063 ops/s
Iteration  12: 1363460.163 ops/s
Iteration  13: 1362439.244 ops/s
Iteration  14: 1364747.018 ops/s
Iteration  15: 1368854.134 ops/s
Iteration  16: 1361489.690 ops/s
Iteration  17: 1365644.452 ops/s
Iteration  18: 1366777.976 ops/s
Iteration  19: 1364241.596 ops/s
Iteration  20: 1366368.633 ops/s
Iteration  21: 1361109.871 ops/s
Iteration  22: 1366783.071 ops/s
Iteration  23: 1356818.372 ops/s
Iteration  24: 1359187.070 ops/s
Iteration  25: 1365764.203 ops/s
Iteration  26: 1366078.902 ops/s
Iteration  27: 1362863.383 ops/s
Iteration  28: 1363106.396 ops/s
Iteration  29: 1355958.131 ops/s
Iteration  30: 1362614.831 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte":
  1363157.720 ±(99.9%) 2352.111 ops/s [Average]
  (min, avg, max) = (1355334.081, 1363157.720, 1370894.640), stdev = 3520.530
  CI (99.9%): [1360805.609, 1365509.831] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectByte  thrpt   30  1363157.720 ± 2352.111  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 674284.152 ops/s
# Warmup Iteration   2: 1889414.843 ops/s
# Warmup Iteration   3: 1890032.580 ops/s
# Warmup Iteration   4: 1582625.941 ops/s
# Warmup Iteration   5: 1892048.317 ops/s
# Warmup Iteration   6: 1899320.140 ops/s
# Warmup Iteration   7: 1898829.131 ops/s
# Warmup Iteration   8: 1897191.470 ops/s
# Warmup Iteration   9: 1893237.037 ops/s
# Warmup Iteration  10: 1890984.019 ops/s
# Warmup Iteration  11: 1894615.086 ops/s
# Warmup Iteration  12: 1901641.221 ops/s
# Warmup Iteration  13: 1892902.133 ops/s
# Warmup Iteration  14: 1896886.715 ops/s
# Warmup Iteration  15: 1896517.662 ops/s
# Warmup Iteration  16: 1898394.605 ops/s
# Warmup Iteration  17: 1898310.267 ops/s
# Warmup Iteration  18: 1906437.611 ops/s
# Warmup Iteration  19: 1894224.819 ops/s
# Warmup Iteration  20: 1890726.391 ops/s
# Warmup Iteration  21: 1892763.526 ops/s
# Warmup Iteration  22: 1892000.536 ops/s
# Warmup Iteration  23: 1895183.017 ops/s
# Warmup Iteration  24: 1894571.649 ops/s
# Warmup Iteration  25: 1891942.493 ops/s
# Warmup Iteration  26: 1893442.829 ops/s
# Warmup Iteration  27: 1889393.558 ops/s
# Warmup Iteration  28: 1899795.918 ops/s
# Warmup Iteration  29: 1894656.010 ops/s
# Warmup Iteration  30: 1890650.072 ops/s
Iteration   1: 1891131.551 ops/s
Iteration   2: 1893622.419 ops/s
Iteration   3: 1900684.695 ops/s
Iteration   4: 1902448.046 ops/s
Iteration   5: 1895822.936 ops/s
Iteration   6: 1890808.892 ops/s
Iteration   7: 1892300.085 ops/s
Iteration   8: 1895904.915 ops/s
Iteration   9: 1898920.550 ops/s
Iteration  10: 1898571.551 ops/s
Iteration  11: 1890067.056 ops/s
Iteration  12: 1900486.591 ops/s
Iteration  13: 1898600.292 ops/s
Iteration  14: 1891187.423 ops/s
Iteration  15: 1892060.359 ops/s
Iteration  16: 1895649.831 ops/s
Iteration  17: 1899337.092 ops/s
Iteration  18: 1890153.948 ops/s
Iteration  19: 1889329.756 ops/s
Iteration  20: 1883445.331 ops/s
Iteration  21: 1886000.559 ops/s
Iteration  22: 1896465.514 ops/s
Iteration  23: 1894756.220 ops/s
Iteration  24: 1902806.031 ops/s
Iteration  25: 1895616.828 ops/s
Iteration  26: 1899672.404 ops/s
Iteration  27: 1887667.425 ops/s
Iteration  28: 1893711.738 ops/s
Iteration  29: 1894813.483 ops/s
Iteration  30: 1898215.137 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar":
  1894675.289 ±(99.9%) 3251.988 ops/s [Average]
  (min, avg, max) = (1883445.331, 1894675.289, 1902806.031), stdev = 4867.423
  CI (99.9%): [1891423.300, 1897927.277] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectChar  thrpt   30  1894675.289 ± 3251.988  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 361976.999 ops/s
# Warmup Iteration   2: 860795.863 ops/s
# Warmup Iteration   3: 907915.302 ops/s
# Warmup Iteration   4: 767056.737 ops/s
# Warmup Iteration   5: 889988.552 ops/s
# Warmup Iteration   6: 907680.459 ops/s
# Warmup Iteration   7: 906785.954 ops/s
# Warmup Iteration   8: 906346.601 ops/s
# Warmup Iteration   9: 905017.878 ops/s
# Warmup Iteration  10: 907705.389 ops/s
# Warmup Iteration  11: 906704.099 ops/s
# Warmup Iteration  12: 908613.492 ops/s
# Warmup Iteration  13: 906071.302 ops/s
# Warmup Iteration  14: 901131.435 ops/s
# Warmup Iteration  15: 905788.045 ops/s
# Warmup Iteration  16: 905875.061 ops/s
# Warmup Iteration  17: 905430.929 ops/s
# Warmup Iteration  18: 903180.643 ops/s
# Warmup Iteration  19: 905901.922 ops/s
# Warmup Iteration  20: 905407.089 ops/s
# Warmup Iteration  21: 903145.659 ops/s
# Warmup Iteration  22: 905279.800 ops/s
# Warmup Iteration  23: 905009.358 ops/s
# Warmup Iteration  24: 907864.740 ops/s
# Warmup Iteration  25: 904224.854 ops/s
# Warmup Iteration  26: 906502.463 ops/s
# Warmup Iteration  27: 907520.177 ops/s
# Warmup Iteration  28: 905877.060 ops/s
# Warmup Iteration  29: 904842.205 ops/s
# Warmup Iteration  30: 906385.310 ops/s
Iteration   1: 904045.104 ops/s
Iteration   2: 904527.953 ops/s
Iteration   3: 904107.781 ops/s
Iteration   4: 906997.593 ops/s
Iteration   5: 905819.180 ops/s
Iteration   6: 904914.849 ops/s
Iteration   7: 909073.347 ops/s
Iteration   8: 907580.008 ops/s
Iteration   9: 904000.061 ops/s
Iteration  10: 903833.225 ops/s
Iteration  11: 904164.094 ops/s
Iteration  12: 903619.493 ops/s
Iteration  13: 908134.311 ops/s
Iteration  14: 910982.329 ops/s
Iteration  15: 907659.443 ops/s
Iteration  16: 904621.990 ops/s
Iteration  17: 905970.400 ops/s
Iteration  18: 904370.489 ops/s
Iteration  19: 903137.026 ops/s
Iteration  20: 907137.503 ops/s
Iteration  21: 906465.999 ops/s
Iteration  22: 907338.038 ops/s
Iteration  23: 905512.461 ops/s
Iteration  24: 906627.209 ops/s
Iteration  25: 906833.328 ops/s
Iteration  26: 909193.787 ops/s
Iteration  27: 907702.844 ops/s
Iteration  28: 907033.232 ops/s
Iteration  29: 906607.770 ops/s
Iteration  30: 900152.082 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble":
  905938.764 ±(99.9%) 1465.770 ops/s [Average]
  (min, avg, max) = (900152.082, 905938.764, 910982.329), stdev = 2193.896
  CI (99.9%): [904472.994, 907404.535] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectDouble  thrpt   30  905938.764 ± 1465.770  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 557595.985 ops/s
# Warmup Iteration   2: 1406250.278 ops/s
# Warmup Iteration   3: 1467697.399 ops/s
# Warmup Iteration   4: 1232524.159 ops/s
# Warmup Iteration   5: 1473540.771 ops/s
# Warmup Iteration   6: 1474319.591 ops/s
# Warmup Iteration   7: 1474298.164 ops/s
# Warmup Iteration   8: 1471774.699 ops/s
# Warmup Iteration   9: 1467734.823 ops/s
# Warmup Iteration  10: 1470676.875 ops/s
# Warmup Iteration  11: 1469675.608 ops/s
# Warmup Iteration  12: 1470198.934 ops/s
# Warmup Iteration  13: 1467193.287 ops/s
# Warmup Iteration  14: 1471097.841 ops/s
# Warmup Iteration  15: 1467015.563 ops/s
# Warmup Iteration  16: 1466026.504 ops/s
# Warmup Iteration  17: 1468886.630 ops/s
# Warmup Iteration  18: 1469261.369 ops/s
# Warmup Iteration  19: 1470327.352 ops/s
# Warmup Iteration  20: 1466318.210 ops/s
# Warmup Iteration  21: 1469935.938 ops/s
# Warmup Iteration  22: 1473525.227 ops/s
# Warmup Iteration  23: 1466318.543 ops/s
# Warmup Iteration  24: 1462808.524 ops/s
# Warmup Iteration  25: 1471667.986 ops/s
# Warmup Iteration  26: 1473392.271 ops/s
# Warmup Iteration  27: 1469701.803 ops/s
# Warmup Iteration  28: 1467604.398 ops/s
# Warmup Iteration  29: 1466436.596 ops/s
# Warmup Iteration  30: 1465586.483 ops/s
Iteration   1: 1476659.653 ops/s
Iteration   2: 1468661.943 ops/s
Iteration   3: 1467847.647 ops/s
Iteration   4: 1466536.210 ops/s
Iteration   5: 1471009.692 ops/s
Iteration   6: 1472091.046 ops/s
Iteration   7: 1465681.483 ops/s
Iteration   8: 1472168.158 ops/s
Iteration   9: 1466149.908 ops/s
Iteration  10: 1472729.025 ops/s
Iteration  11: 1472066.089 ops/s
Iteration  12: 1475830.463 ops/s
Iteration  13: 1474219.979 ops/s
Iteration  14: 1467581.165 ops/s
Iteration  15: 1475288.102 ops/s
Iteration  16: 1468681.174 ops/s
Iteration  17: 1468927.557 ops/s
Iteration  18: 1471847.508 ops/s
Iteration  19: 1468300.358 ops/s
Iteration  20: 1469861.900 ops/s
Iteration  21: 1471161.514 ops/s
Iteration  22: 1468937.400 ops/s
Iteration  23: 1476228.422 ops/s
Iteration  24: 1472685.035 ops/s
Iteration  25: 1468852.082 ops/s
Iteration  26: 1472069.687 ops/s
Iteration  27: 1469347.910 ops/s
Iteration  28: 1475334.403 ops/s
Iteration  29: 1475315.053 ops/s
Iteration  30: 1474131.914 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat":
  1471206.749 ±(99.9%) 2139.833 ops/s [Average]
  (min, avg, max) = (1465681.483, 1471206.749, 1476659.653), stdev = 3202.801
  CI (99.9%): [1469066.916, 1473346.582] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectFloat  thrpt   30  1471206.749 ± 2139.833  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 709221.493 ops/s
# Warmup Iteration   2: 2041059.693 ops/s
# Warmup Iteration   3: 2059190.983 ops/s
# Warmup Iteration   4: 1717550.326 ops/s
# Warmup Iteration   5: 2055984.829 ops/s
# Warmup Iteration   6: 2056316.853 ops/s
# Warmup Iteration   7: 2055346.569 ops/s
# Warmup Iteration   8: 2052452.029 ops/s
# Warmup Iteration   9: 2058857.446 ops/s
# Warmup Iteration  10: 2059254.012 ops/s
# Warmup Iteration  11: 2058876.676 ops/s
# Warmup Iteration  12: 2055705.483 ops/s
# Warmup Iteration  13: 2051529.616 ops/s
# Warmup Iteration  14: 2055679.136 ops/s
# Warmup Iteration  15: 2052006.566 ops/s
# Warmup Iteration  16: 2053806.303 ops/s
# Warmup Iteration  17: 2054490.862 ops/s
# Warmup Iteration  18: 2057495.791 ops/s
# Warmup Iteration  19: 2053147.625 ops/s
# Warmup Iteration  20: 2058541.334 ops/s
# Warmup Iteration  21: 2059350.240 ops/s
# Warmup Iteration  22: 2053033.042 ops/s
# Warmup Iteration  23: 2055704.587 ops/s
# Warmup Iteration  24: 2058680.200 ops/s
# Warmup Iteration  25: 2055697.176 ops/s
# Warmup Iteration  26: 2058047.176 ops/s
# Warmup Iteration  27: 2058314.370 ops/s
# Warmup Iteration  28: 2051859.588 ops/s
# Warmup Iteration  29: 2052801.359 ops/s
# Warmup Iteration  30: 2054632.756 ops/s
Iteration   1: 2056971.557 ops/s
Iteration   2: 2060315.293 ops/s
Iteration   3: 2060618.900 ops/s
Iteration   4: 2059390.510 ops/s
Iteration   5: 2049873.748 ops/s
Iteration   6: 2046576.324 ops/s
Iteration   7: 2043221.635 ops/s
Iteration   8: 2050572.227 ops/s
Iteration   9: 2052472.442 ops/s
Iteration  10: 2057447.514 ops/s
Iteration  11: 2058317.174 ops/s
Iteration  12: 2058069.892 ops/s
Iteration  13: 2049381.816 ops/s
Iteration  14: 2060227.526 ops/s
Iteration  15: 2057495.553 ops/s
Iteration  16: 2039774.030 ops/s
Iteration  17: 2049111.717 ops/s
Iteration  18: 2049934.500 ops/s
Iteration  19: 2050158.815 ops/s
Iteration  20: 2055098.992 ops/s
Iteration  21: 2052121.078 ops/s
Iteration  22: 2058993.704 ops/s
Iteration  23: 2053360.397 ops/s
Iteration  24: 2047635.229 ops/s
Iteration  25: 2056926.216 ops/s
Iteration  26: 2048328.600 ops/s
Iteration  27: 2046485.440 ops/s
Iteration  28: 2048716.718 ops/s
Iteration  29: 2050291.139 ops/s
Iteration  30: 2039607.590 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt":
  2052249.876 ±(99.9%) 3973.309 ops/s [Average]
  (min, avg, max) = (2039607.590, 2052249.876, 2060618.900), stdev = 5947.062
  CI (99.9%): [2048276.567, 2056223.185] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectInt  thrpt   30  2052249.876 ± 3973.309  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 639665.004 ops/s
# Warmup Iteration   2: 1806874.596 ops/s
# Warmup Iteration   3: 1621970.615 ops/s
# Warmup Iteration   4: 1722318.512 ops/s
# Warmup Iteration   5: 1829901.808 ops/s
# Warmup Iteration   6: 1828136.145 ops/s
# Warmup Iteration   7: 1835700.759 ops/s
# Warmup Iteration   8: 1832922.874 ops/s
# Warmup Iteration   9: 1842208.417 ops/s
# Warmup Iteration  10: 1833233.834 ops/s
# Warmup Iteration  11: 1832835.150 ops/s
# Warmup Iteration  12: 1839098.750 ops/s
# Warmup Iteration  13: 1829909.090 ops/s
# Warmup Iteration  14: 1835030.036 ops/s
# Warmup Iteration  15: 1833865.572 ops/s
# Warmup Iteration  16: 1837409.393 ops/s
# Warmup Iteration  17: 1834368.196 ops/s
# Warmup Iteration  18: 1831275.052 ops/s
# Warmup Iteration  19: 1831815.787 ops/s
# Warmup Iteration  20: 1827450.626 ops/s
# Warmup Iteration  21: 1832634.547 ops/s
# Warmup Iteration  22: 1840597.315 ops/s
# Warmup Iteration  23: 1831321.909 ops/s
# Warmup Iteration  24: 1833796.876 ops/s
# Warmup Iteration  25: 1838383.607 ops/s
# Warmup Iteration  26: 1841439.515 ops/s
# Warmup Iteration  27: 1833503.329 ops/s
# Warmup Iteration  28: 1829653.157 ops/s
# Warmup Iteration  29: 1835970.141 ops/s
# Warmup Iteration  30: 1828294.424 ops/s
Iteration   1: 1836102.521 ops/s
Iteration   2: 1831972.888 ops/s
Iteration   3: 1842401.782 ops/s
Iteration   4: 1830433.723 ops/s
Iteration   5: 1834436.362 ops/s
Iteration   6: 1825881.399 ops/s
Iteration   7: 1833804.915 ops/s
Iteration   8: 1837720.693 ops/s
Iteration   9: 1838745.252 ops/s
Iteration  10: 1837745.679 ops/s
Iteration  11: 1836041.340 ops/s
Iteration  12: 1843866.414 ops/s
Iteration  13: 1837031.522 ops/s
Iteration  14: 1828893.712 ops/s
Iteration  15: 1836680.237 ops/s
Iteration  16: 1842107.910 ops/s
Iteration  17: 1836497.670 ops/s
Iteration  18: 1835835.579 ops/s
Iteration  19: 1837976.295 ops/s
Iteration  20: 1823334.721 ops/s
Iteration  21: 1826727.213 ops/s
Iteration  22: 1837286.513 ops/s
Iteration  23: 1833053.458 ops/s
Iteration  24: 1838362.506 ops/s
Iteration  25: 1836975.876 ops/s
Iteration  26: 1832516.737 ops/s
Iteration  27: 1833440.357 ops/s
Iteration  28: 1837314.560 ops/s
Iteration  29: 1832692.593 ops/s
Iteration  30: 1831529.352 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong":
  1834913.659 ±(99.9%) 3153.272 ops/s [Average]
  (min, avg, max) = (1823334.721, 1834913.659, 1843866.414), stdev = 4719.669
  CI (99.9%): [1831760.387, 1838066.931] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectLong  thrpt   30  1834913.659 ± 3153.272  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 751244.073 ops/s
# Warmup Iteration   2: 2109804.860 ops/s
# Warmup Iteration   3: 2143138.259 ops/s
# Warmup Iteration   4: 1778401.622 ops/s
# Warmup Iteration   5: 2145431.487 ops/s
# Warmup Iteration   6: 2157182.099 ops/s
# Warmup Iteration   7: 2142450.246 ops/s
# Warmup Iteration   8: 2143045.411 ops/s
# Warmup Iteration   9: 2138808.893 ops/s
# Warmup Iteration  10: 2152003.732 ops/s
# Warmup Iteration  11: 2149096.387 ops/s
# Warmup Iteration  12: 2146688.522 ops/s
# Warmup Iteration  13: 2149330.083 ops/s
# Warmup Iteration  14: 2149279.501 ops/s
# Warmup Iteration  15: 2141212.689 ops/s
# Warmup Iteration  16: 2145505.440 ops/s
# Warmup Iteration  17: 2151274.100 ops/s
# Warmup Iteration  18: 2146957.375 ops/s
# Warmup Iteration  19: 2155815.122 ops/s
# Warmup Iteration  20: 2154073.381 ops/s
# Warmup Iteration  21: 2149340.595 ops/s
# Warmup Iteration  22: 2142283.592 ops/s
# Warmup Iteration  23: 2151660.770 ops/s
# Warmup Iteration  24: 2150555.090 ops/s
# Warmup Iteration  25: 2134100.810 ops/s
# Warmup Iteration  26: 2141868.617 ops/s
# Warmup Iteration  27: 2141878.186 ops/s
# Warmup Iteration  28: 2140932.670 ops/s
# Warmup Iteration  29: 2144285.528 ops/s
# Warmup Iteration  30: 2149977.226 ops/s
Iteration   1: 2142761.387 ops/s
Iteration   2: 2141372.140 ops/s
Iteration   3: 2144176.141 ops/s
Iteration   4: 2140679.438 ops/s
Iteration   5: 2145910.899 ops/s
Iteration   6: 2146415.535 ops/s
Iteration   7: 2146512.709 ops/s
Iteration   8: 2143710.549 ops/s
Iteration   9: 2135378.862 ops/s
Iteration  10: 2144060.126 ops/s
Iteration  11: 2133679.389 ops/s
Iteration  12: 2136789.468 ops/s
Iteration  13: 2135474.818 ops/s
Iteration  14: 2144803.618 ops/s
Iteration  15: 2138535.720 ops/s
Iteration  16: 2131174.941 ops/s
Iteration  17: 2138799.835 ops/s
Iteration  18: 2142291.999 ops/s
Iteration  19: 2138817.800 ops/s
Iteration  20: 2146370.880 ops/s
Iteration  21: 2150481.930 ops/s
Iteration  22: 2147683.928 ops/s
Iteration  23: 2136965.640 ops/s
Iteration  24: 2140399.979 ops/s
Iteration  25: 2145543.729 ops/s
Iteration  26: 2144835.980 ops/s
Iteration  27: 2153356.322 ops/s
Iteration  28: 2151747.696 ops/s
Iteration  29: 2138007.911 ops/s
Iteration  30: 2145881.786 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort":
  2142420.705 ±(99.9%) 3577.767 ops/s [Average]
  (min, avg, max) = (2131174.941, 2142420.705, 2153356.322), stdev = 5355.034
  CI (99.9%): [2138842.938, 2145998.472] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectShort  thrpt   30  2142420.705 ± 3577.767  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 169010.778 ops/s
# Warmup Iteration   2: 346160.022 ops/s
# Warmup Iteration   3: 384963.302 ops/s
# Warmup Iteration   4: 386752.731 ops/s
# Warmup Iteration   5: 322357.291 ops/s
# Warmup Iteration   6: 386968.136 ops/s
# Warmup Iteration   7: 387866.419 ops/s
# Warmup Iteration   8: 387691.161 ops/s
# Warmup Iteration   9: 388092.484 ops/s
# Warmup Iteration  10: 386720.190 ops/s
# Warmup Iteration  11: 387285.342 ops/s
# Warmup Iteration  12: 388195.267 ops/s
# Warmup Iteration  13: 385763.829 ops/s
# Warmup Iteration  14: 387550.506 ops/s
# Warmup Iteration  15: 388176.129 ops/s
# Warmup Iteration  16: 386768.918 ops/s
# Warmup Iteration  17: 385437.608 ops/s
# Warmup Iteration  18: 386010.795 ops/s
# Warmup Iteration  19: 385762.483 ops/s
# Warmup Iteration  20: 386912.865 ops/s
# Warmup Iteration  21: 385957.907 ops/s
# Warmup Iteration  22: 385113.985 ops/s
# Warmup Iteration  23: 386635.136 ops/s
# Warmup Iteration  24: 386833.665 ops/s
# Warmup Iteration  25: 385718.752 ops/s
# Warmup Iteration  26: 386143.922 ops/s
# Warmup Iteration  27: 387192.709 ops/s
# Warmup Iteration  28: 386154.613 ops/s
# Warmup Iteration  29: 387573.424 ops/s
# Warmup Iteration  30: 386350.139 ops/s
Iteration   1: 387349.286 ops/s
Iteration   2: 387549.562 ops/s
Iteration   3: 387386.478 ops/s
Iteration   4: 386370.132 ops/s
Iteration   5: 386935.712 ops/s
Iteration   6: 384958.374 ops/s
Iteration   7: 386101.663 ops/s
Iteration   8: 388790.901 ops/s
Iteration   9: 388206.909 ops/s
Iteration  10: 387207.913 ops/s
Iteration  11: 386226.688 ops/s
Iteration  12: 387107.145 ops/s
Iteration  13: 385440.860 ops/s
Iteration  14: 386292.540 ops/s
Iteration  15: 388513.778 ops/s
Iteration  16: 385622.659 ops/s
Iteration  17: 386576.706 ops/s
Iteration  18: 387652.408 ops/s
Iteration  19: 386582.800 ops/s
Iteration  20: 385097.849 ops/s
Iteration  21: 387364.170 ops/s
Iteration  22: 386720.075 ops/s
Iteration  23: 386306.963 ops/s
Iteration  24: 388689.486 ops/s
Iteration  25: 388465.467 ops/s
Iteration  26: 387786.162 ops/s
Iteration  27: 386837.818 ops/s
Iteration  28: 386274.776 ops/s
Iteration  29: 388286.897 ops/s
Iteration  30: 388158.221 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith":
  387028.680 ±(99.9%) 708.583 ops/s [Average]
  (min, avg, max) = (384958.374, 387028.680, 388790.901), stdev = 1060.574
  CI (99.9%): [386320.097, 387737.263] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score     Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_flatCollectWith  thrpt   30  387028.680 ± 708.583  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEach$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEach

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 530593.374 ops/s
# Warmup Iteration   2: 1263663.015 ops/s
# Warmup Iteration   3: 1316009.078 ops/s
# Warmup Iteration   4: 1097762.184 ops/s
# Warmup Iteration   5: 1308063.416 ops/s
# Warmup Iteration   6: 1312990.621 ops/s
# Warmup Iteration   7: 1314483.557 ops/s
# Warmup Iteration   8: 1314010.468 ops/s
# Warmup Iteration   9: 1310977.072 ops/s
# Warmup Iteration  10: 1319004.549 ops/s
# Warmup Iteration  11: 1316523.686 ops/s
# Warmup Iteration  12: 1305998.321 ops/s
# Warmup Iteration  13: 1313840.724 ops/s
# Warmup Iteration  14: 1318158.255 ops/s
# Warmup Iteration  15: 1315705.310 ops/s
# Warmup Iteration  16: 1316282.120 ops/s
# Warmup Iteration  17: 1311459.543 ops/s
# Warmup Iteration  18: 1309319.075 ops/s
# Warmup Iteration  19: 1311944.234 ops/s
# Warmup Iteration  20: 1313987.373 ops/s
# Warmup Iteration  21: 1312382.918 ops/s
# Warmup Iteration  22: 1310753.046 ops/s
# Warmup Iteration  23: 1315941.311 ops/s
# Warmup Iteration  24: 1313188.373 ops/s
# Warmup Iteration  25: 1308899.477 ops/s
# Warmup Iteration  26: 1315353.845 ops/s
# Warmup Iteration  27: 1315414.488 ops/s
# Warmup Iteration  28: 1310613.705 ops/s
# Warmup Iteration  29: 1312154.121 ops/s
# Warmup Iteration  30: 1312280.818 ops/s
Iteration   1: 1311003.650 ops/s
Iteration   2: 1316936.770 ops/s
Iteration   3: 1308032.687 ops/s
Iteration   4: 1313743.156 ops/s
Iteration   5: 1314280.579 ops/s
Iteration   6: 1311906.921 ops/s
Iteration   7: 1315140.194 ops/s
Iteration   8: 1312277.539 ops/s
Iteration   9: 1316218.585 ops/s
Iteration  10: 1311944.452 ops/s
Iteration  11: 1312286.905 ops/s
Iteration  12: 1315669.855 ops/s
Iteration  13: 1319590.188 ops/s
Iteration  14: 1322683.234 ops/s
Iteration  15: 1320136.867 ops/s
Iteration  16: 1316985.547 ops/s
Iteration  17: 1316557.640 ops/s
Iteration  18: 1315613.054 ops/s
Iteration  19: 1312175.798 ops/s
Iteration  20: 1317285.229 ops/s
Iteration  21: 1315783.063 ops/s
Iteration  22: 1317239.171 ops/s
Iteration  23: 1311326.923 ops/s
Iteration  24: 1318337.738 ops/s
Iteration  25: 1317572.173 ops/s
Iteration  26: 1319948.107 ops/s
Iteration  27: 1316175.261 ops/s
Iteration  28: 1319645.699 ops/s
Iteration  29: 1313471.012 ops/s
Iteration  30: 1312427.283 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEach":
  1315413.176 ±(99.9%) 2221.368 ops/s [Average]
  (min, avg, max) = (1308032.687, 1315413.176, 1322683.234), stdev = 3324.839
  CI (99.9%): [1313191.808, 1317634.544] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEach  thrpt   30  1315413.176 ± 2221.368  ops/s
----------------------------------------
=== Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWith$ ===
# JMH version: 1.33
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: -XX:+UseParallelGC -Xms8G -Xmx8G
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 30 iterations, 2 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWith

# Run progress: 0.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 1169497.670 ops/s
# Warmup Iteration   2: 2953915.101 ops/s
# Warmup Iteration   3: 2990113.351 ops/s
# Warmup Iteration   4: 2482573.236 ops/s
# Warmup Iteration   5: 2992395.137 ops/s
# Warmup Iteration   6: 2988937.724 ops/s
# Warmup Iteration   7: 2994949.197 ops/s
# Warmup Iteration   8: 2994349.506 ops/s
# Warmup Iteration   9: 3000202.468 ops/s
# Warmup Iteration  10: 2976376.791 ops/s
# Warmup Iteration  11: 3000987.285 ops/s
# Warmup Iteration  12: 3003186.145 ops/s
# Warmup Iteration  13: 2984533.188 ops/s
# Warmup Iteration  14: 2993439.698 ops/s
# Warmup Iteration  15: 3003104.697 ops/s
# Warmup Iteration  16: 3002793.376 ops/s
# Warmup Iteration  17: 2999501.124 ops/s
# Warmup Iteration  18: 3011175.348 ops/s
# Warmup Iteration  19: 3014632.676 ops/s
# Warmup Iteration  20: 2997866.225 ops/s
# Warmup Iteration  21: 3004176.885 ops/s
# Warmup Iteration  22: 2999694.604 ops/s
# Warmup Iteration  23: 2989631.572 ops/s
# Warmup Iteration  24: 2986459.995 ops/s
# Warmup Iteration  25: 2998049.486 ops/s
# Warmup Iteration  26: 2996124.362 ops/s
# Warmup Iteration  27: 3000451.859 ops/s
# Warmup Iteration  28: 3012225.868 ops/s
# Warmup Iteration  29: 3010967.083 ops/s
# Warmup Iteration  30: 3001193.776 ops/s
Iteration   1: 3011558.651 ops/s
Iteration   2: 3006953.359 ops/s
Iteration   3: 3013124.159 ops/s
Iteration   4: 2999490.488 ops/s
Iteration   5: 3012137.876 ops/s
Iteration   6: 3006484.832 ops/s
Iteration   7: 2996299.442 ops/s
Iteration   8: 3004141.808 ops/s
Iteration   9: 3004410.107 ops/s
Iteration  10: 3004352.631 ops/s
Iteration  11: 2999766.226 ops/s
Iteration  12: 3006534.098 ops/s
Iteration  13: 3000734.682 ops/s
Iteration  14: 3000601.346 ops/s
Iteration  15: 3004608.264 ops/s
Iteration  16: 3011163.198 ops/s
Iteration  17: 3009485.712 ops/s
Iteration  18: 3016172.054 ops/s
Iteration  19: 2995394.731 ops/s
Iteration  20: 3004236.674 ops/s
Iteration  21: 3003027.646 ops/s
Iteration  22: 2994061.864 ops/s
Iteration  23: 3009596.196 ops/s
Iteration  24: 3008590.285 ops/s
Iteration  25: 3009469.762 ops/s
Iteration  26: 2996120.591 ops/s
Iteration  27: 3002492.482 ops/s
Iteration  28: 2998423.804 ops/s
Iteration  29: 3014773.190 ops/s
Iteration  30: 3012668.633 ops/s


Result "org.eclipse.collections.impl.bag.mutable.MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWith":
  3005229.160 ±(99.9%) 4068.522 ops/s [Average]
  (min, avg, max) = (2994061.864, 3005229.160, 3016172.054), stdev = 6089.572
  CI (99.9%): [3001160.638, 3009297.681] (assumes normal distribution)


# Run complete. Total time: 00:01:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score      Error  Units
MultiReaderHashBagAsWriteUntouchableTest._Benchmark.benchmark_forEachWith  thrpt   30  3005229.160 ± 4068.522  ops/s
----------------------------------------
